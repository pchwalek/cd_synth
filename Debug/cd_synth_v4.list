
cd_synth_v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016f28  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0006cc00  080170e8  080170e8  000270e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08083ce8  08083ce8  00093ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08083cf0  08083cf0  00093cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08083cf4  08083cf4  00093cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000c4  20000000  08083cf8  000a0000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0007da58  200000c8  08083dbc  000a00c8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  2007db20  08083dbc  000adb20  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000a00c4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00074293  00000000  00000000  000a00f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000ae1f  00000000  00000000  00114387  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0003c900  00000000  00000000  0011f1a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002a40  00000000  00000000  0015baa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00008dc0  00000000  00000000  0015e4e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000218c2  00000000  00000000  001672a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00012f64  00000000  00000000  00188b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000ea  00000000  00000000  0019bace  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009478  00000000  00000000  0019bbb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000c8 	.word	0x200000c8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080170d0 	.word	0x080170d0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000cc 	.word	0x200000cc
 80001fc:	080170d0 	.word	0x080170d0

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033e:	f1a4 0401 	sub.w	r4, r4, #1
 8000342:	d1e9      	bne.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f092 0f00 	teq	r2, #0
 80004ea:	bf14      	ite	ne
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000500:	e720      	b.n	8000344 <__adddf3+0x138>
 8000502:	bf00      	nop

08000504 <__aeabi_ul2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	e00a      	b.n	800052a <__aeabi_l2d+0x16>

08000514 <__aeabi_l2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000522:	d502      	bpl.n	800052a <__aeabi_l2d+0x16>
 8000524:	4240      	negs	r0, r0
 8000526:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800052e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000532:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000536:	f43f aedc 	beq.w	80002f2 <__adddf3+0xe6>
 800053a:	f04f 0203 	mov.w	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000552:	f1c2 0320 	rsb	r3, r2, #32
 8000556:	fa00 fc03 	lsl.w	ip, r0, r3
 800055a:	fa20 f002 	lsr.w	r0, r0, r2
 800055e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000562:	ea40 000e 	orr.w	r0, r0, lr
 8000566:	fa21 f102 	lsr.w	r1, r1, r2
 800056a:	4414      	add	r4, r2
 800056c:	e6c1      	b.n	80002f2 <__adddf3+0xe6>
 800056e:	bf00      	nop

08000570 <__aeabi_dmul>:
 8000570:	b570      	push	{r4, r5, r6, lr}
 8000572:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000576:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800057a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800057e:	bf1d      	ittte	ne
 8000580:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000584:	ea94 0f0c 	teqne	r4, ip
 8000588:	ea95 0f0c 	teqne	r5, ip
 800058c:	f000 f8de 	bleq	800074c <__aeabi_dmul+0x1dc>
 8000590:	442c      	add	r4, r5
 8000592:	ea81 0603 	eor.w	r6, r1, r3
 8000596:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800059a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800059e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005a2:	bf18      	it	ne
 80005a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b0:	d038      	beq.n	8000624 <__aeabi_dmul+0xb4>
 80005b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005c6:	f04f 0600 	mov.w	r6, #0
 80005ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ce:	f09c 0f00 	teq	ip, #0
 80005d2:	bf18      	it	ne
 80005d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e4:	d204      	bcs.n	80005f0 <__aeabi_dmul+0x80>
 80005e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ea:	416d      	adcs	r5, r5
 80005ec:	eb46 0606 	adc.w	r6, r6, r6
 80005f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000600:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000604:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000608:	bf88      	it	hi
 800060a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800060e:	d81e      	bhi.n	800064e <__aeabi_dmul+0xde>
 8000610:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000614:	bf08      	it	eq
 8000616:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800061a:	f150 0000 	adcs.w	r0, r0, #0
 800061e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000628:	ea46 0101 	orr.w	r1, r6, r1
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	ea81 0103 	eor.w	r1, r1, r3
 8000634:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000638:	bfc2      	ittt	gt
 800063a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800063e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000642:	bd70      	popgt	{r4, r5, r6, pc}
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f04f 0e00 	mov.w	lr, #0
 800064c:	3c01      	subs	r4, #1
 800064e:	f300 80ab 	bgt.w	80007a8 <__aeabi_dmul+0x238>
 8000652:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000656:	bfde      	ittt	le
 8000658:	2000      	movle	r0, #0
 800065a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800065e:	bd70      	pople	{r4, r5, r6, pc}
 8000660:	f1c4 0400 	rsb	r4, r4, #0
 8000664:	3c20      	subs	r4, #32
 8000666:	da35      	bge.n	80006d4 <__aeabi_dmul+0x164>
 8000668:	340c      	adds	r4, #12
 800066a:	dc1b      	bgt.n	80006a4 <__aeabi_dmul+0x134>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f305 	lsl.w	r3, r0, r5
 8000678:	fa20 f004 	lsr.w	r0, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000688:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800068c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000690:	fa21 f604 	lsr.w	r6, r1, r4
 8000694:	eb42 0106 	adc.w	r1, r2, r6
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 040c 	rsb	r4, r4, #12
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f304 	lsl.w	r3, r0, r4
 80006b0:	fa20 f005 	lsr.w	r0, r0, r5
 80006b4:	fa01 f204 	lsl.w	r2, r1, r4
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c4:	f141 0100 	adc.w	r1, r1, #0
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 0520 	rsb	r5, r4, #32
 80006d8:	fa00 f205 	lsl.w	r2, r0, r5
 80006dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e0:	fa20 f304 	lsr.w	r3, r0, r4
 80006e4:	fa01 f205 	lsl.w	r2, r1, r5
 80006e8:	ea43 0302 	orr.w	r3, r3, r2
 80006ec:	fa21 f004 	lsr.w	r0, r1, r4
 80006f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f4:	fa21 f204 	lsr.w	r2, r1, r4
 80006f8:	ea20 0002 	bic.w	r0, r0, r2
 80006fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f094 0f00 	teq	r4, #0
 8000710:	d10f      	bne.n	8000732 <__aeabi_dmul+0x1c2>
 8000712:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000716:	0040      	lsls	r0, r0, #1
 8000718:	eb41 0101 	adc.w	r1, r1, r1
 800071c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3c01      	subeq	r4, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1a6>
 8000726:	ea41 0106 	orr.w	r1, r1, r6
 800072a:	f095 0f00 	teq	r5, #0
 800072e:	bf18      	it	ne
 8000730:	4770      	bxne	lr
 8000732:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000736:	0052      	lsls	r2, r2, #1
 8000738:	eb43 0303 	adc.w	r3, r3, r3
 800073c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3d01      	subeq	r5, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1c6>
 8000746:	ea43 0306 	orr.w	r3, r3, r6
 800074a:	4770      	bx	lr
 800074c:	ea94 0f0c 	teq	r4, ip
 8000750:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000754:	bf18      	it	ne
 8000756:	ea95 0f0c 	teqne	r5, ip
 800075a:	d00c      	beq.n	8000776 <__aeabi_dmul+0x206>
 800075c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000760:	bf18      	it	ne
 8000762:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000766:	d1d1      	bne.n	800070c <__aeabi_dmul+0x19c>
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000770:	f04f 0000 	mov.w	r0, #0
 8000774:	bd70      	pop	{r4, r5, r6, pc}
 8000776:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077a:	bf06      	itte	eq
 800077c:	4610      	moveq	r0, r2
 800077e:	4619      	moveq	r1, r3
 8000780:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000784:	d019      	beq.n	80007ba <__aeabi_dmul+0x24a>
 8000786:	ea94 0f0c 	teq	r4, ip
 800078a:	d102      	bne.n	8000792 <__aeabi_dmul+0x222>
 800078c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000790:	d113      	bne.n	80007ba <__aeabi_dmul+0x24a>
 8000792:	ea95 0f0c 	teq	r5, ip
 8000796:	d105      	bne.n	80007a4 <__aeabi_dmul+0x234>
 8000798:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800079c:	bf1c      	itt	ne
 800079e:	4610      	movne	r0, r2
 80007a0:	4619      	movne	r1, r3
 80007a2:	d10a      	bne.n	80007ba <__aeabi_dmul+0x24a>
 80007a4:	ea81 0103 	eor.w	r1, r1, r3
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b4:	f04f 0000 	mov.w	r0, #0
 80007b8:	bd70      	pop	{r4, r5, r6, pc}
 80007ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007c2:	bd70      	pop	{r4, r5, r6, pc}

080007c4 <__aeabi_ddiv>:
 80007c4:	b570      	push	{r4, r5, r6, lr}
 80007c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007d2:	bf1d      	ittte	ne
 80007d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d8:	ea94 0f0c 	teqne	r4, ip
 80007dc:	ea95 0f0c 	teqne	r5, ip
 80007e0:	f000 f8a7 	bleq	8000932 <__aeabi_ddiv+0x16e>
 80007e4:	eba4 0405 	sub.w	r4, r4, r5
 80007e8:	ea81 0e03 	eor.w	lr, r1, r3
 80007ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f4:	f000 8088 	beq.w	8000908 <__aeabi_ddiv+0x144>
 80007f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000800:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000804:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000808:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800080c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000810:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000814:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000818:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800081c:	429d      	cmp	r5, r3
 800081e:	bf08      	it	eq
 8000820:	4296      	cmpeq	r6, r2
 8000822:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000826:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800082a:	d202      	bcs.n	8000832 <__aeabi_ddiv+0x6e>
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	1ab6      	subs	r6, r6, r2
 8000834:	eb65 0503 	sbc.w	r5, r5, r3
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000842:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 000c 	orrcs.w	r0, r0, ip
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a4:	d018      	beq.n	80008d8 <__aeabi_ddiv+0x114>
 80008a6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008aa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008b2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008b6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008be:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008c2:	d1c0      	bne.n	8000846 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	d10b      	bne.n	80008e2 <__aeabi_ddiv+0x11e>
 80008ca:	ea41 0100 	orr.w	r1, r1, r0
 80008ce:	f04f 0000 	mov.w	r0, #0
 80008d2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008d6:	e7b6      	b.n	8000846 <__aeabi_ddiv+0x82>
 80008d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008dc:	bf04      	itt	eq
 80008de:	4301      	orreq	r1, r0
 80008e0:	2000      	moveq	r0, #0
 80008e2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008e6:	bf88      	it	hi
 80008e8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008ec:	f63f aeaf 	bhi.w	800064e <__aeabi_dmul+0xde>
 80008f0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f4:	bf04      	itt	eq
 80008f6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008fe:	f150 0000 	adcs.w	r0, r0, #0
 8000902:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000906:	bd70      	pop	{r4, r5, r6, pc}
 8000908:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800090c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000910:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000914:	bfc2      	ittt	gt
 8000916:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800091e:	bd70      	popgt	{r4, r5, r6, pc}
 8000920:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000924:	f04f 0e00 	mov.w	lr, #0
 8000928:	3c01      	subs	r4, #1
 800092a:	e690      	b.n	800064e <__aeabi_dmul+0xde>
 800092c:	ea45 0e06 	orr.w	lr, r5, r6
 8000930:	e68d      	b.n	800064e <__aeabi_dmul+0xde>
 8000932:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000936:	ea94 0f0c 	teq	r4, ip
 800093a:	bf08      	it	eq
 800093c:	ea95 0f0c 	teqeq	r5, ip
 8000940:	f43f af3b 	beq.w	80007ba <__aeabi_dmul+0x24a>
 8000944:	ea94 0f0c 	teq	r4, ip
 8000948:	d10a      	bne.n	8000960 <__aeabi_ddiv+0x19c>
 800094a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800094e:	f47f af34 	bne.w	80007ba <__aeabi_dmul+0x24a>
 8000952:	ea95 0f0c 	teq	r5, ip
 8000956:	f47f af25 	bne.w	80007a4 <__aeabi_dmul+0x234>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e72c      	b.n	80007ba <__aeabi_dmul+0x24a>
 8000960:	ea95 0f0c 	teq	r5, ip
 8000964:	d106      	bne.n	8000974 <__aeabi_ddiv+0x1b0>
 8000966:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096a:	f43f aefd 	beq.w	8000768 <__aeabi_dmul+0x1f8>
 800096e:	4610      	mov	r0, r2
 8000970:	4619      	mov	r1, r3
 8000972:	e722      	b.n	80007ba <__aeabi_dmul+0x24a>
 8000974:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000978:	bf18      	it	ne
 800097a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800097e:	f47f aec5 	bne.w	800070c <__aeabi_dmul+0x19c>
 8000982:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000986:	f47f af0d 	bne.w	80007a4 <__aeabi_dmul+0x234>
 800098a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800098e:	f47f aeeb 	bne.w	8000768 <__aeabi_dmul+0x1f8>
 8000992:	e712      	b.n	80007ba <__aeabi_dmul+0x24a>

08000994 <__gedf2>:
 8000994:	f04f 3cff 	mov.w	ip, #4294967295
 8000998:	e006      	b.n	80009a8 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__ledf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	e002      	b.n	80009a8 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__cmpdf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009be:	d01b      	beq.n	80009f8 <__cmpdf2+0x54>
 80009c0:	b001      	add	sp, #4
 80009c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009c6:	bf0c      	ite	eq
 80009c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009cc:	ea91 0f03 	teqne	r1, r3
 80009d0:	bf02      	ittt	eq
 80009d2:	ea90 0f02 	teqeq	r0, r2
 80009d6:	2000      	moveq	r0, #0
 80009d8:	4770      	bxeq	lr
 80009da:	f110 0f00 	cmn.w	r0, #0
 80009de:	ea91 0f03 	teq	r1, r3
 80009e2:	bf58      	it	pl
 80009e4:	4299      	cmppl	r1, r3
 80009e6:	bf08      	it	eq
 80009e8:	4290      	cmpeq	r0, r2
 80009ea:	bf2c      	ite	cs
 80009ec:	17d8      	asrcs	r0, r3, #31
 80009ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009f2:	f040 0001 	orr.w	r0, r0, #1
 80009f6:	4770      	bx	lr
 80009f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d102      	bne.n	8000a08 <__cmpdf2+0x64>
 8000a02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a06:	d107      	bne.n	8000a18 <__cmpdf2+0x74>
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d1d6      	bne.n	80009c0 <__cmpdf2+0x1c>
 8000a12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a16:	d0d3      	beq.n	80009c0 <__cmpdf2+0x1c>
 8000a18:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdrcmple>:
 8000a20:	4684      	mov	ip, r0
 8000a22:	4610      	mov	r0, r2
 8000a24:	4662      	mov	r2, ip
 8000a26:	468c      	mov	ip, r1
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4663      	mov	r3, ip
 8000a2c:	e000      	b.n	8000a30 <__aeabi_cdcmpeq>
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdcmpeq>:
 8000a30:	b501      	push	{r0, lr}
 8000a32:	f7ff ffb7 	bl	80009a4 <__cmpdf2>
 8000a36:	2800      	cmp	r0, #0
 8000a38:	bf48      	it	mi
 8000a3a:	f110 0f00 	cmnmi.w	r0, #0
 8000a3e:	bd01      	pop	{r0, pc}

08000a40 <__aeabi_dcmpeq>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff fff4 	bl	8000a30 <__aeabi_cdcmpeq>
 8000a48:	bf0c      	ite	eq
 8000a4a:	2001      	moveq	r0, #1
 8000a4c:	2000      	movne	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmplt>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffea 	bl	8000a30 <__aeabi_cdcmpeq>
 8000a5c:	bf34      	ite	cc
 8000a5e:	2001      	movcc	r0, #1
 8000a60:	2000      	movcs	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmple>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffe0 	bl	8000a30 <__aeabi_cdcmpeq>
 8000a70:	bf94      	ite	ls
 8000a72:	2001      	movls	r0, #1
 8000a74:	2000      	movhi	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpge>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffce 	bl	8000a20 <__aeabi_cdrcmple>
 8000a84:	bf94      	ite	ls
 8000a86:	2001      	movls	r0, #1
 8000a88:	2000      	movhi	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmpgt>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffc4 	bl	8000a20 <__aeabi_cdrcmple>
 8000a98:	bf34      	ite	cc
 8000a9a:	2001      	movcc	r0, #1
 8000a9c:	2000      	movcs	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpun>:
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x10>
 8000aae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab2:	d10a      	bne.n	8000aca <__aeabi_dcmpun+0x26>
 8000ab4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x20>
 8000abe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac2:	d102      	bne.n	8000aca <__aeabi_dcmpun+0x26>
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	f04f 0001 	mov.w	r0, #1
 8000ace:	4770      	bx	lr

08000ad0 <__aeabi_d2iz>:
 8000ad0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad8:	d215      	bcs.n	8000b06 <__aeabi_d2iz+0x36>
 8000ada:	d511      	bpl.n	8000b00 <__aeabi_d2iz+0x30>
 8000adc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae4:	d912      	bls.n	8000b0c <__aeabi_d2iz+0x3c>
 8000ae6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	bf18      	it	ne
 8000afc:	4240      	negne	r0, r0
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0a:	d105      	bne.n	8000b18 <__aeabi_d2iz+0x48>
 8000b0c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b10:	bf08      	it	eq
 8000b12:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop

08000b20 <__aeabi_d2uiz>:
 8000b20:	004a      	lsls	r2, r1, #1
 8000b22:	d211      	bcs.n	8000b48 <__aeabi_d2uiz+0x28>
 8000b24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b28:	d211      	bcs.n	8000b4e <__aeabi_d2uiz+0x2e>
 8000b2a:	d50d      	bpl.n	8000b48 <__aeabi_d2uiz+0x28>
 8000b2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b34:	d40e      	bmi.n	8000b54 <__aeabi_d2uiz+0x34>
 8000b36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_d2uiz+0x3a>
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0000 	mov.w	r0, #0
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2f>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b68:	bf24      	itt	cs
 8000b6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b72:	d90d      	bls.n	8000b90 <__aeabi_d2f+0x30>
 8000b74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b88:	bf08      	it	eq
 8000b8a:	f020 0001 	biceq.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b94:	d121      	bne.n	8000bda <__aeabi_d2f+0x7a>
 8000b96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b9a:	bfbc      	itt	lt
 8000b9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	4770      	bxlt	lr
 8000ba2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000baa:	f1c2 0218 	rsb	r2, r2, #24
 8000bae:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bba:	bf18      	it	ne
 8000bbc:	f040 0001 	orrne.w	r0, r0, #1
 8000bc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bcc:	ea40 000c 	orr.w	r0, r0, ip
 8000bd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd8:	e7cc      	b.n	8000b74 <__aeabi_d2f+0x14>
 8000bda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bde:	d107      	bne.n	8000bf0 <__aeabi_d2f+0x90>
 8000be0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be4:	bf1e      	ittt	ne
 8000be6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bee:	4770      	bxne	lr
 8000bf0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__aeabi_uldivmod>:
 8000c00:	b953      	cbnz	r3, 8000c18 <__aeabi_uldivmod+0x18>
 8000c02:	b94a      	cbnz	r2, 8000c18 <__aeabi_uldivmod+0x18>
 8000c04:	2900      	cmp	r1, #0
 8000c06:	bf08      	it	eq
 8000c08:	2800      	cmpeq	r0, #0
 8000c0a:	bf1c      	itt	ne
 8000c0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c10:	f04f 30ff 	movne.w	r0, #4294967295
 8000c14:	f000 b97a 	b.w	8000f0c <__aeabi_idiv0>
 8000c18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c20:	f000 f806 	bl	8000c30 <__udivmoddi4>
 8000c24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c2c:	b004      	add	sp, #16
 8000c2e:	4770      	bx	lr

08000c30 <__udivmoddi4>:
 8000c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c34:	468c      	mov	ip, r1
 8000c36:	460d      	mov	r5, r1
 8000c38:	4604      	mov	r4, r0
 8000c3a:	9e08      	ldr	r6, [sp, #32]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d151      	bne.n	8000ce4 <__udivmoddi4+0xb4>
 8000c40:	428a      	cmp	r2, r1
 8000c42:	4617      	mov	r7, r2
 8000c44:	d96d      	bls.n	8000d22 <__udivmoddi4+0xf2>
 8000c46:	fab2 fe82 	clz	lr, r2
 8000c4a:	f1be 0f00 	cmp.w	lr, #0
 8000c4e:	d00b      	beq.n	8000c68 <__udivmoddi4+0x38>
 8000c50:	f1ce 0c20 	rsb	ip, lr, #32
 8000c54:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c58:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c5c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c60:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c64:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c68:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c6c:	0c25      	lsrs	r5, r4, #16
 8000c6e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c72:	fa1f f987 	uxth.w	r9, r7
 8000c76:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c7a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c7e:	fb08 f309 	mul.w	r3, r8, r9
 8000c82:	42ab      	cmp	r3, r5
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x6c>
 8000c86:	19ed      	adds	r5, r5, r7
 8000c88:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c8c:	f080 8123 	bcs.w	8000ed6 <__udivmoddi4+0x2a6>
 8000c90:	42ab      	cmp	r3, r5
 8000c92:	f240 8120 	bls.w	8000ed6 <__udivmoddi4+0x2a6>
 8000c96:	f1a8 0802 	sub.w	r8, r8, #2
 8000c9a:	443d      	add	r5, r7
 8000c9c:	1aed      	subs	r5, r5, r3
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ca4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000ca8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cac:	fb00 f909 	mul.w	r9, r0, r9
 8000cb0:	45a1      	cmp	r9, r4
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x98>
 8000cb4:	19e4      	adds	r4, r4, r7
 8000cb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cba:	f080 810a 	bcs.w	8000ed2 <__udivmoddi4+0x2a2>
 8000cbe:	45a1      	cmp	r9, r4
 8000cc0:	f240 8107 	bls.w	8000ed2 <__udivmoddi4+0x2a2>
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	443c      	add	r4, r7
 8000cc8:	eba4 0409 	sub.w	r4, r4, r9
 8000ccc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d061      	beq.n	8000d9a <__udivmoddi4+0x16a>
 8000cd6:	fa24 f40e 	lsr.w	r4, r4, lr
 8000cda:	2300      	movs	r3, #0
 8000cdc:	6034      	str	r4, [r6, #0]
 8000cde:	6073      	str	r3, [r6, #4]
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	d907      	bls.n	8000cf8 <__udivmoddi4+0xc8>
 8000ce8:	2e00      	cmp	r6, #0
 8000cea:	d054      	beq.n	8000d96 <__udivmoddi4+0x166>
 8000cec:	2100      	movs	r1, #0
 8000cee:	e886 0021 	stmia.w	r6, {r0, r5}
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf8:	fab3 f183 	clz	r1, r3
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	f040 808e 	bne.w	8000e1e <__udivmoddi4+0x1ee>
 8000d02:	42ab      	cmp	r3, r5
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xdc>
 8000d06:	4282      	cmp	r2, r0
 8000d08:	f200 80fa 	bhi.w	8000f00 <__udivmoddi4+0x2d0>
 8000d0c:	1a84      	subs	r4, r0, r2
 8000d0e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	46ac      	mov	ip, r5
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	d03f      	beq.n	8000d9a <__udivmoddi4+0x16a>
 8000d1a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	b912      	cbnz	r2, 8000d2a <__udivmoddi4+0xfa>
 8000d24:	2701      	movs	r7, #1
 8000d26:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d2a:	fab7 fe87 	clz	lr, r7
 8000d2e:	f1be 0f00 	cmp.w	lr, #0
 8000d32:	d134      	bne.n	8000d9e <__udivmoddi4+0x16e>
 8000d34:	1beb      	subs	r3, r5, r7
 8000d36:	0c3a      	lsrs	r2, r7, #16
 8000d38:	fa1f fc87 	uxth.w	ip, r7
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d42:	0c25      	lsrs	r5, r4, #16
 8000d44:	fb02 3318 	mls	r3, r2, r8, r3
 8000d48:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d4c:	fb0c f308 	mul.w	r3, ip, r8
 8000d50:	42ab      	cmp	r3, r5
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x134>
 8000d54:	19ed      	adds	r5, r5, r7
 8000d56:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x132>
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	f200 80d1 	bhi.w	8000f04 <__udivmoddi4+0x2d4>
 8000d62:	4680      	mov	r8, r0
 8000d64:	1aed      	subs	r5, r5, r3
 8000d66:	b2a3      	uxth	r3, r4
 8000d68:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d6c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d70:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d74:	fb0c fc00 	mul.w	ip, ip, r0
 8000d78:	45a4      	cmp	ip, r4
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x15c>
 8000d7c:	19e4      	adds	r4, r4, r7
 8000d7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x15a>
 8000d84:	45a4      	cmp	ip, r4
 8000d86:	f200 80b8 	bhi.w	8000efa <__udivmoddi4+0x2ca>
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	eba4 040c 	sub.w	r4, r4, ip
 8000d90:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d94:	e79d      	b.n	8000cd2 <__udivmoddi4+0xa2>
 8000d96:	4631      	mov	r1, r6
 8000d98:	4630      	mov	r0, r6
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	f1ce 0420 	rsb	r4, lr, #32
 8000da2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000da6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000daa:	fa20 f804 	lsr.w	r8, r0, r4
 8000dae:	0c3a      	lsrs	r2, r7, #16
 8000db0:	fa25 f404 	lsr.w	r4, r5, r4
 8000db4:	ea48 0803 	orr.w	r8, r8, r3
 8000db8:	fbb4 f1f2 	udiv	r1, r4, r2
 8000dbc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000dc0:	fb02 4411 	mls	r4, r2, r1, r4
 8000dc4:	fa1f fc87 	uxth.w	ip, r7
 8000dc8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000dcc:	fb01 f30c 	mul.w	r3, r1, ip
 8000dd0:	42ab      	cmp	r3, r5
 8000dd2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000dd6:	d909      	bls.n	8000dec <__udivmoddi4+0x1bc>
 8000dd8:	19ed      	adds	r5, r5, r7
 8000dda:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dde:	f080 808a 	bcs.w	8000ef6 <__udivmoddi4+0x2c6>
 8000de2:	42ab      	cmp	r3, r5
 8000de4:	f240 8087 	bls.w	8000ef6 <__udivmoddi4+0x2c6>
 8000de8:	3902      	subs	r1, #2
 8000dea:	443d      	add	r5, r7
 8000dec:	1aeb      	subs	r3, r5, r3
 8000dee:	fa1f f588 	uxth.w	r5, r8
 8000df2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000df6:	fb02 3310 	mls	r3, r2, r0, r3
 8000dfa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dfe:	fb00 f30c 	mul.w	r3, r0, ip
 8000e02:	42ab      	cmp	r3, r5
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x1e6>
 8000e06:	19ed      	adds	r5, r5, r7
 8000e08:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e0c:	d26f      	bcs.n	8000eee <__udivmoddi4+0x2be>
 8000e0e:	42ab      	cmp	r3, r5
 8000e10:	d96d      	bls.n	8000eee <__udivmoddi4+0x2be>
 8000e12:	3802      	subs	r0, #2
 8000e14:	443d      	add	r5, r7
 8000e16:	1aeb      	subs	r3, r5, r3
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	e78f      	b.n	8000d3e <__udivmoddi4+0x10e>
 8000e1e:	f1c1 0720 	rsb	r7, r1, #32
 8000e22:	fa22 f807 	lsr.w	r8, r2, r7
 8000e26:	408b      	lsls	r3, r1
 8000e28:	fa05 f401 	lsl.w	r4, r5, r1
 8000e2c:	ea48 0303 	orr.w	r3, r8, r3
 8000e30:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e34:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e38:	40fd      	lsrs	r5, r7
 8000e3a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e3e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e42:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e46:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e4a:	fa1f f883 	uxth.w	r8, r3
 8000e4e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e52:	fb09 f408 	mul.w	r4, r9, r8
 8000e56:	42ac      	cmp	r4, r5
 8000e58:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x244>
 8000e62:	18ed      	adds	r5, r5, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	d243      	bcs.n	8000ef2 <__udivmoddi4+0x2c2>
 8000e6a:	42ac      	cmp	r4, r5
 8000e6c:	d941      	bls.n	8000ef2 <__udivmoddi4+0x2c2>
 8000e6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e72:	441d      	add	r5, r3
 8000e74:	1b2d      	subs	r5, r5, r4
 8000e76:	fa1f fe8e 	uxth.w	lr, lr
 8000e7a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e7e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e82:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e86:	fb00 f808 	mul.w	r8, r0, r8
 8000e8a:	45a0      	cmp	r8, r4
 8000e8c:	d907      	bls.n	8000e9e <__udivmoddi4+0x26e>
 8000e8e:	18e4      	adds	r4, r4, r3
 8000e90:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e94:	d229      	bcs.n	8000eea <__udivmoddi4+0x2ba>
 8000e96:	45a0      	cmp	r8, r4
 8000e98:	d927      	bls.n	8000eea <__udivmoddi4+0x2ba>
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	441c      	add	r4, r3
 8000e9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea2:	eba4 0408 	sub.w	r4, r4, r8
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	454c      	cmp	r4, r9
 8000eac:	46c6      	mov	lr, r8
 8000eae:	464d      	mov	r5, r9
 8000eb0:	d315      	bcc.n	8000ede <__udivmoddi4+0x2ae>
 8000eb2:	d012      	beq.n	8000eda <__udivmoddi4+0x2aa>
 8000eb4:	b156      	cbz	r6, 8000ecc <__udivmoddi4+0x29c>
 8000eb6:	ebba 030e 	subs.w	r3, sl, lr
 8000eba:	eb64 0405 	sbc.w	r4, r4, r5
 8000ebe:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec2:	40cb      	lsrs	r3, r1
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	40cc      	lsrs	r4, r1
 8000ec8:	6037      	str	r7, [r6, #0]
 8000eca:	6074      	str	r4, [r6, #4]
 8000ecc:	2100      	movs	r1, #0
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	e6f8      	b.n	8000cc8 <__udivmoddi4+0x98>
 8000ed6:	4690      	mov	r8, r2
 8000ed8:	e6e0      	b.n	8000c9c <__udivmoddi4+0x6c>
 8000eda:	45c2      	cmp	sl, r8
 8000edc:	d2ea      	bcs.n	8000eb4 <__udivmoddi4+0x284>
 8000ede:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ee2:	eb69 0503 	sbc.w	r5, r9, r3
 8000ee6:	3801      	subs	r0, #1
 8000ee8:	e7e4      	b.n	8000eb4 <__udivmoddi4+0x284>
 8000eea:	4628      	mov	r0, r5
 8000eec:	e7d7      	b.n	8000e9e <__udivmoddi4+0x26e>
 8000eee:	4640      	mov	r0, r8
 8000ef0:	e791      	b.n	8000e16 <__udivmoddi4+0x1e6>
 8000ef2:	4681      	mov	r9, r0
 8000ef4:	e7be      	b.n	8000e74 <__udivmoddi4+0x244>
 8000ef6:	4601      	mov	r1, r0
 8000ef8:	e778      	b.n	8000dec <__udivmoddi4+0x1bc>
 8000efa:	3802      	subs	r0, #2
 8000efc:	443c      	add	r4, r7
 8000efe:	e745      	b.n	8000d8c <__udivmoddi4+0x15c>
 8000f00:	4608      	mov	r0, r1
 8000f02:	e708      	b.n	8000d16 <__udivmoddi4+0xe6>
 8000f04:	f1a8 0802 	sub.w	r8, r8, #2
 8000f08:	443d      	add	r5, r7
 8000f0a:	e72b      	b.n	8000d64 <__udivmoddi4+0x134>

08000f0c <__aeabi_idiv0>:
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f10:	b500      	push	{lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f12:	2003      	movs	r0, #3
{
 8000f14:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f16:	f000 fc59 	bl	80017cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f010 fa96 	bl	801144c <HAL_InitTick>
 8000f20:	b118      	cbz	r0, 8000f2a <HAL_Init+0x1a>
  {
    status = HAL_ERROR;
 8000f22:	2001      	movs	r0, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8000f24:	b003      	add	sp, #12
 8000f26:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f2a:	9001      	str	r0, [sp, #4]
    HAL_MspInit();
 8000f2c:	f010 fa6e 	bl	801140c <HAL_MspInit>
 8000f30:	9801      	ldr	r0, [sp, #4]
}
 8000f32:	b003      	add	sp, #12
 8000f34:	f85d fb04 	ldr.w	pc, [sp], #4

08000f38 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000f38:	4a02      	ldr	r2, [pc, #8]	; (8000f44 <HAL_IncTick+0xc>)
 8000f3a:	6813      	ldr	r3, [r2, #0]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20005408 	.word	0x20005408

08000f48 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f48:	4b01      	ldr	r3, [pc, #4]	; (8000f50 <HAL_GetTick+0x8>)
 8000f4a:	6818      	ldr	r0, [r3, #0]
}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20005408 	.word	0x20005408

08000f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f54:	b538      	push	{r3, r4, r5, lr}
 8000f56:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f58:	f7ff fff6 	bl	8000f48 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000f5e:	4605      	mov	r5, r0
  {
    wait++;
 8000f60:	bf18      	it	ne
 8000f62:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f64:	f7ff fff0 	bl	8000f48 <HAL_GetTick>
 8000f68:	1b40      	subs	r0, r0, r5
 8000f6a:	4284      	cmp	r4, r0
 8000f6c:	d8fa      	bhi.n	8000f64 <HAL_Delay+0x10>
  {
  }
}
 8000f6e:	bd38      	pop	{r3, r4, r5, pc}

08000f70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f72:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f78:	2800      	cmp	r0, #0
 8000f7a:	f000 80b8 	beq.w	80010ee <HAL_ADC_Init+0x17e>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f7e:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8000f80:	4604      	mov	r4, r0
 8000f82:	2d00      	cmp	r5, #0
 8000f84:	f000 80a0 	beq.w	80010c8 <HAL_ADC_Init+0x158>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000f88:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f8a:	6893      	ldr	r3, [r2, #8]
 8000f8c:	0098      	lsls	r0, r3, #2
 8000f8e:	d505      	bpl.n	8000f9c <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f90:	6893      	ldr	r3, [r2, #8]
 8000f92:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000f96:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f9a:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f9c:	6893      	ldr	r3, [r2, #8]
 8000f9e:	00d9      	lsls	r1, r3, #3
 8000fa0:	d417      	bmi.n	8000fd2 <HAL_ADC_Init+0x62>
    LL_ADC_EnableInternalRegulator(hadc->Instance);
    
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000fa2:	4b5d      	ldr	r3, [pc, #372]	; (8001118 <HAL_ADC_Init+0x1a8>)
  MODIFY_REG(ADCx->CR,
 8000fa4:	6891      	ldr	r1, [r2, #8]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	485c      	ldr	r0, [pc, #368]	; (800111c <HAL_ADC_Init+0x1ac>)
 8000faa:	099b      	lsrs	r3, r3, #6
 8000fac:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8000fb0:	fba0 0303 	umull	r0, r3, r0, r3
 8000fb4:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8000fb8:	099b      	lsrs	r3, r3, #6
 8000fba:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000fbe:	6091      	str	r1, [r2, #8]
 8000fc0:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8000fc2:	9b01      	ldr	r3, [sp, #4]
 8000fc4:	b12b      	cbz	r3, 8000fd2 <HAL_ADC_Init+0x62>
    {
      wait_loop_index--;
 8000fc6:	9b01      	ldr	r3, [sp, #4]
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8000fcc:	9b01      	ldr	r3, [sp, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1f9      	bne.n	8000fc6 <HAL_ADC_Init+0x56>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fd2:	6893      	ldr	r3, [r2, #8]
 8000fd4:	00db      	lsls	r3, r3, #3
 8000fd6:	d414      	bmi.n	8001002 <HAL_ADC_Init+0x92>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000fda:	f043 0310 	orr.w	r3, r3, #16
 8000fde:	65a3      	str	r3, [r4, #88]	; 0x58
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fe0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	65e3      	str	r3, [r4, #92]	; 0x5c
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000fe8:	6893      	ldr	r3, [r2, #8]
 8000fea:	075f      	lsls	r7, r3, #29
    
    tmp_hal_status = HAL_ERROR;
 8000fec:	f04f 0001 	mov.w	r0, #1
 8000ff0:	d50c      	bpl.n	800100c <HAL_ADC_Init+0x9c>
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000ff2:	6da3      	ldr	r3, [r4, #88]	; 0x58
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ff4:	6da3      	ldr	r3, [r4, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8000ff6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ff8:	f043 0310 	orr.w	r3, r3, #16
 8000ffc:	65a3      	str	r3, [r4, #88]	; 0x58
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8000ffe:	b003      	add	sp, #12
 8001000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001002:	6893      	ldr	r3, [r2, #8]
 8001004:	075f      	lsls	r7, r3, #29
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	d4f2      	bmi.n	8000ff2 <HAL_ADC_Init+0x82>
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800100c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800100e:	06d9      	lsls	r1, r3, #27
 8001010:	d4f0      	bmi.n	8000ff4 <HAL_ADC_Init+0x84>
    ADC_STATE_CLR_SET(hadc->State,
 8001012:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001014:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800101e:	6893      	ldr	r3, [r2, #8]
 8001020:	07de      	lsls	r6, r3, #31
 8001022:	d40a      	bmi.n	800103a <HAL_ADC_Init+0xca>
 8001024:	4b3e      	ldr	r3, [pc, #248]	; (8001120 <HAL_ADC_Init+0x1b0>)
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	07db      	lsls	r3, r3, #31
 800102a:	d406      	bmi.n	800103a <HAL_ADC_Init+0xca>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800102c:	493d      	ldr	r1, [pc, #244]	; (8001124 <HAL_ADC_Init+0x1b4>)
 800102e:	6865      	ldr	r5, [r4, #4]
 8001030:	688b      	ldr	r3, [r1, #8]
 8001032:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001036:	432b      	orrs	r3, r5
 8001038:	608b      	str	r3, [r1, #8]
                hadc->Init.DataAlign                                                   |
 800103a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800103c:	68e7      	ldr	r7, [r4, #12]
 800103e:	68a6      	ldr	r6, [r4, #8]
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode)  );
 8001040:	f894 1020 	ldrb.w	r1, [r4, #32]
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001044:	7e65      	ldrb	r5, [r4, #25]
                hadc->Init.DataAlign                                                   |
 8001046:	433b      	orrs	r3, r7
 8001048:	4333      	orrs	r3, r6
 800104a:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800104e:	2901      	cmp	r1, #1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001050:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001054:	d046      	beq.n	80010e4 <HAL_ADC_Init+0x174>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001056:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001058:	b121      	cbz	r1, 8001064 <HAL_ADC_Init+0xf4>
                  | hadc->Init.ExternalTrigConvEdge
 800105a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800105c:	f401 7170 	and.w	r1, r1, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001060:	4329      	orrs	r1, r5
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001062:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 8001064:	68d5      	ldr	r5, [r2, #12]
 8001066:	4930      	ldr	r1, [pc, #192]	; (8001128 <HAL_ADC_Init+0x1b8>)
 8001068:	4029      	ands	r1, r5
 800106a:	430b      	orrs	r3, r1
 800106c:	60d3      	str	r3, [r2, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800106e:	6893      	ldr	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001070:	6891      	ldr	r1, [r2, #8]
 8001072:	070d      	lsls	r5, r1, #28
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001074:	f003 0304 	and.w	r3, r3, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001078:	d417      	bmi.n	80010aa <HAL_ADC_Init+0x13a>
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 800107a:	b9b3      	cbnz	r3, 80010aa <HAL_ADC_Init+0x13a>
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800107c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001080:	7e27      	ldrb	r7, [r4, #24]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001082:	68d1      	ldr	r1, [r2, #12]
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                            |
 8001084:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
      if (hadc->Init.OversamplingMode == ENABLE)
 8001086:	f894 6038 	ldrb.w	r6, [r4, #56]	; 0x38
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800108a:	005b      	lsls	r3, r3, #1
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                            |
 800108c:	ea43 3387 	orr.w	r3, r3, r7, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001090:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                            |
 8001094:	432b      	orrs	r3, r5
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001096:	f021 0106 	bic.w	r1, r1, #6
 800109a:	430b      	orrs	r3, r1
      if (hadc->Init.OversamplingMode == ENABLE)
 800109c:	2e01      	cmp	r6, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800109e:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80010a0:	d028      	beq.n	80010f4 <HAL_ADC_Init+0x184>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80010a2:	6913      	ldr	r3, [r2, #16]
 80010a4:	f023 0301 	bic.w	r3, r3, #1
 80010a8:	6113      	str	r3, [r2, #16]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010aa:	6923      	ldr	r3, [r4, #16]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d011      	beq.n	80010d4 <HAL_ADC_Init+0x164>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80010b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80010b2:	f023 030f 	bic.w	r3, r3, #15
 80010b6:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80010b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80010ba:	f023 0303 	bic.w	r3, r3, #3
 80010be:	f043 0301 	orr.w	r3, r3, #1
 80010c2:	65a3      	str	r3, [r4, #88]	; 0x58
}
 80010c4:	b003      	add	sp, #12
 80010c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 80010c8:	f00d fbec 	bl	800e8a4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80010cc:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 80010ce:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
 80010d2:	e759      	b.n	8000f88 <HAL_ADC_Init+0x18>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80010d4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80010d6:	69e3      	ldr	r3, [r4, #28]
 80010d8:	f021 010f 	bic.w	r1, r1, #15
 80010dc:	3b01      	subs	r3, #1
 80010de:	430b      	orrs	r3, r1
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	e7e9      	b.n	80010b8 <HAL_ADC_Init+0x148>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80010e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80010e6:	3901      	subs	r1, #1
 80010e8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80010ec:	e7b3      	b.n	8001056 <HAL_ADC_Init+0xe6>
    return HAL_ERROR;
 80010ee:	2001      	movs	r0, #1
}
 80010f0:	b003      	add	sp, #12
 80010f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MODIFY_REG(hadc->Instance->CFGR2,
 80010f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80010f6:	6c27      	ldr	r7, [r4, #64]	; 0x40
 80010f8:	6c66      	ldr	r6, [r4, #68]	; 0x44
 80010fa:	6915      	ldr	r5, [r2, #16]
 80010fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80010fe:	433b      	orrs	r3, r7
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	4333      	orrs	r3, r6
 8001106:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 800110a:	430b      	orrs	r3, r1
 800110c:	f025 0504 	bic.w	r5, r5, #4
 8001110:	432b      	orrs	r3, r5
 8001112:	6113      	str	r3, [r2, #16]
 8001114:	e7c9      	b.n	80010aa <HAL_ADC_Init+0x13a>
 8001116:	bf00      	nop
 8001118:	20000050 	.word	0x20000050
 800111c:	053e2d63 	.word	0x053e2d63
 8001120:	50040000 	.word	0x50040000
 8001124:	50040300 	.word	0x50040300
 8001128:	fff0c007 	.word	0xfff0c007

0800112c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800112c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800112e:	4603      	mov	r3, r0
 8001130:	b083      	sub	sp, #12
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001132:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
  __IO uint32_t wait_loop_index = 0;
 8001136:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8001138:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0;
 800113a:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 800113c:	f000 8084 	beq.w	8001248 <HAL_ADC_ConfigChannel+0x11c>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001140:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001142:	6894      	ldr	r4, [r2, #8]
  __HAL_LOCK(hadc);
 8001144:	2001      	movs	r0, #1
 8001146:	f014 0404 	ands.w	r4, r4, #4
 800114a:	f883 0054 	strb.w	r0, [r3, #84]	; 0x54
 800114e:	d008      	beq.n	8001162 <HAL_ADC_ConfigChannel+0x36>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001150:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001152:	f042 0220 	orr.w	r2, r2, #32
 8001156:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001158:	2200      	movs	r2, #0
 800115a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  
  /* Return function status */
  return tmp_hal_status;
}
 800115e:	b003      	add	sp, #12
 8001160:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank <= 5U)
 8001162:	684d      	ldr	r5, [r1, #4]
 8001164:	2d05      	cmp	r5, #5
 8001166:	d972      	bls.n	800124e <HAL_ADC_ConfigChannel+0x122>
 8001168:	f005 071f 	and.w	r7, r5, #31
 800116c:	261f      	movs	r6, #31
 800116e:	09ac      	lsrs	r4, r5, #6
 8001170:	fa06 f507 	lsl.w	r5, r6, r7
 8001174:	f004 040c 	and.w	r4, r4, #12
 8001178:	43ed      	mvns	r5, r5
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800117a:	f102 0e30 	add.w	lr, r2, #48	; 0x30
  MODIFY_REG(*preg,
 800117e:	6808      	ldr	r0, [r1, #0]
 8001180:	f85e 6004 	ldr.w	r6, [lr, r4]
 8001184:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8001188:	4035      	ands	r5, r6
 800118a:	40b8      	lsls	r0, r7
 800118c:	4328      	orrs	r0, r5
 800118e:	f84e 0004 	str.w	r0, [lr, r4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001192:	6890      	ldr	r0, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001194:	6894      	ldr	r4, [r2, #8]
 8001196:	0725      	lsls	r5, r4, #28
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001198:	f000 0004 	and.w	r0, r0, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800119c:	f100 809f 	bmi.w	80012de <HAL_ADC_ConfigChannel+0x1b2>
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 80011a0:	2800      	cmp	r0, #0
 80011a2:	f040 809c 	bne.w	80012de <HAL_ADC_ConfigChannel+0x1b2>
      if(sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80011a6:	688d      	ldr	r5, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80011a8:	680c      	ldr	r4, [r1, #0]
      if(sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80011aa:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 80011ae:	f000 815e 	beq.w	800146e <HAL_ADC_ConfigChannel+0x342>
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80011b2:	0de6      	lsrs	r6, r4, #23
 80011b4:	f006 0604 	and.w	r6, r6, #4
 80011b8:	f102 0e14 	add.w	lr, r2, #20
  MODIFY_REG(*preg,
 80011bc:	f3c4 5404 	ubfx	r4, r4, #20, #5
 80011c0:	f856 000e 	ldr.w	r0, [r6, lr]
 80011c4:	2707      	movs	r7, #7
 80011c6:	40a7      	lsls	r7, r4
 80011c8:	ea20 0007 	bic.w	r0, r0, r7
 80011cc:	fa05 f404 	lsl.w	r4, r5, r4
 80011d0:	4320      	orrs	r0, r4
 80011d2:	f846 000e 	str.w	r0, [r6, lr]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80011d6:	6950      	ldr	r0, [r2, #20]
 80011d8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80011dc:	6150      	str	r0, [r2, #20]
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80011de:	690e      	ldr	r6, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80011e0:	68d4      	ldr	r4, [r2, #12]
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80011e2:	2e04      	cmp	r6, #4
 80011e4:	d03b      	beq.n	800125e <HAL_ADC_ConfigChannel+0x132>
  MODIFY_REG(*preg,
 80011e6:	680d      	ldr	r5, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80011e8:	6948      	ldr	r0, [r1, #20]
 80011ea:	f8df e330 	ldr.w	lr, [pc, #816]	; 800151c <HAL_ADC_ConfigChannel+0x3f0>
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011ee:	f102 0760 	add.w	r7, r2, #96	; 0x60
 80011f2:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 80011f6:	0064      	lsls	r4, r4, #1
 80011f8:	40a0      	lsls	r0, r4
  MODIFY_REG(*preg,
 80011fa:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80011fe:	f857 4026 	ldr.w	r4, [r7, r6, lsl #2]
 8001202:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001206:	4328      	orrs	r0, r5
 8001208:	ea04 0e0e 	and.w	lr, r4, lr
 800120c:	ea40 000e 	orr.w	r0, r0, lr
 8001210:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
 8001214:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001216:	6894      	ldr	r4, [r2, #8]
 8001218:	07e4      	lsls	r4, r4, #31
 800121a:	d564      	bpl.n	80012e6 <HAL_ADC_ConfigChannel+0x1ba>
 800121c:	4604      	mov	r4, r0
    if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800121e:	49b6      	ldr	r1, [pc, #728]	; (80014f8 <HAL_ADC_ConfigChannel+0x3cc>)
 8001220:	420c      	tst	r4, r1
 8001222:	d00f      	beq.n	8001244 <HAL_ADC_ConfigChannel+0x118>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001224:	49b5      	ldr	r1, [pc, #724]	; (80014fc <HAL_ADC_ConfigChannel+0x3d0>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001226:	4db6      	ldr	r5, [pc, #728]	; (8001500 <HAL_ADC_ConfigChannel+0x3d4>)
 8001228:	6888      	ldr	r0, [r1, #8]
 800122a:	42ac      	cmp	r4, r5
 800122c:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8001230:	f000 80bd 	beq.w	80013ae <HAL_ADC_ConfigChannel+0x282>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001234:	4db3      	ldr	r5, [pc, #716]	; (8001504 <HAL_ADC_ConfigChannel+0x3d8>)
 8001236:	42ac      	cmp	r4, r5
 8001238:	f000 80dd 	beq.w	80013f6 <HAL_ADC_ConfigChannel+0x2ca>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800123c:	4db2      	ldr	r5, [pc, #712]	; (8001508 <HAL_ADC_ConfigChannel+0x3dc>)
 800123e:	42ac      	cmp	r4, r5
 8001240:	f000 80a5 	beq.w	800138e <HAL_ADC_ConfigChannel+0x262>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001244:	2000      	movs	r0, #0
 8001246:	e787      	b.n	8001158 <HAL_ADC_ConfigChannel+0x2c>
  __HAL_LOCK(hadc);
 8001248:	2002      	movs	r0, #2
}
 800124a:	b003      	add	sp, #12
 800124c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      switch (sConfig->Rank)
 800124e:	3d02      	subs	r5, #2
 8001250:	2d03      	cmp	r5, #3
 8001252:	f200 80e0 	bhi.w	8001416 <HAL_ADC_ConfigChannel+0x2ea>
 8001256:	e8df f005 	tbb	[pc, r5]
 800125a:	9095      	.short	0x9095
 800125c:	838b      	.short	0x838b
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800125e:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001260:	6e16      	ldr	r6, [r2, #96]	; 0x60
 8001262:	f3c0 0412 	ubfx	r4, r0, #0, #19
 8001266:	f3c6 6784 	ubfx	r7, r6, #26, #5
 800126a:	2c00      	cmp	r4, #0
 800126c:	f040 815a 	bne.w	8001524 <HAL_ADC_ConfigChannel+0x3f8>
 8001270:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8001274:	42af      	cmp	r7, r5
 8001276:	f040 8191 	bne.w	800159c <HAL_ADC_ConfigChannel+0x470>
  MODIFY_REG(*preg,
 800127a:	4614      	mov	r4, r2
 800127c:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 8001280:	f844 6f60 	str.w	r6, [r4, #96]!
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001284:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001286:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8001288:	f3c0 0512 	ubfx	r5, r0, #0, #19
 800128c:	f3c6 6784 	ubfx	r7, r6, #26, #5
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001290:	f102 0e64 	add.w	lr, r2, #100	; 0x64
 8001294:	2d00      	cmp	r5, #0
 8001296:	f040 8153 	bne.w	8001540 <HAL_ADC_ConfigChannel+0x414>
 800129a:	f3c0 6584 	ubfx	r5, r0, #26, #5
 800129e:	42af      	cmp	r7, r5
 80012a0:	f000 8154 	beq.w	800154c <HAL_ADC_ConfigChannel+0x420>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012a4:	68a6      	ldr	r6, [r4, #8]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012a6:	f104 0e08 	add.w	lr, r4, #8
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012aa:	f3c6 6784 	ubfx	r7, r6, #26, #5
 80012ae:	42af      	cmp	r7, r5
 80012b0:	f040 816f 	bne.w	8001592 <HAL_ADC_ConfigChannel+0x466>
  MODIFY_REG(*preg,
 80012b4:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 80012b8:	f8ce 6000 	str.w	r6, [lr]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012bc:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012be:	68e6      	ldr	r6, [r4, #12]
 80012c0:	f3c0 0512 	ubfx	r5, r0, #0, #19
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012c4:	340c      	adds	r4, #12
 80012c6:	f3c6 6784 	ubfx	r7, r6, #26, #5
 80012ca:	2d00      	cmp	r5, #0
 80012cc:	f040 8156 	bne.w	800157c <HAL_ADC_ConfigChannel+0x450>
 80012d0:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80012d4:	42bd      	cmp	r5, r7
 80012d6:	d19e      	bne.n	8001216 <HAL_ADC_ConfigChannel+0xea>
  MODIFY_REG(*preg,
 80012d8:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 80012dc:	6026      	str	r6, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012de:	6894      	ldr	r4, [r2, #8]
 80012e0:	6808      	ldr	r0, [r1, #0]
 80012e2:	07e4      	lsls	r4, r4, #31
 80012e4:	d49a      	bmi.n	800121c <HAL_ADC_ConfigChannel+0xf0>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80012e6:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80012e8:	4c88      	ldr	r4, [pc, #544]	; (800150c <HAL_ADC_ConfigChannel+0x3e0>)
 80012ea:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80012ee:	f8df e230 	ldr.w	lr, [pc, #560]	; 8001520 <HAL_ADC_ConfigChannel+0x3f4>
 80012f2:	f006 0718 	and.w	r7, r6, #24
 80012f6:	40fc      	lsrs	r4, r7
 80012f8:	f3c0 0712 	ubfx	r7, r0, #0, #19
 80012fc:	4004      	ands	r4, r0
 80012fe:	ea25 0507 	bic.w	r5, r5, r7
 8001302:	432c      	orrs	r4, r5
 8001304:	4576      	cmp	r6, lr
 8001306:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800130a:	4604      	mov	r4, r0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800130c:	d187      	bne.n	800121e <HAL_ADC_ConfigChannel+0xf2>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1UL) & 0x1FUL), sConfig->SamplingTime);
 800130e:	2f00      	cmp	r7, #0
 8001310:	f040 8086 	bne.w	8001420 <HAL_ADC_ConfigChannel+0x2f4>
 8001314:	0e80      	lsrs	r0, r0, #26
 8001316:	1c44      	adds	r4, r0, #1
 8001318:	f004 061f 	and.w	r6, r4, #31
 800131c:	2e09      	cmp	r6, #9
 800131e:	f200 80b9 	bhi.w	8001494 <HAL_ADC_ConfigChannel+0x368>
 8001322:	06a4      	lsls	r4, r4, #26
 8001324:	2501      	movs	r5, #1
 8001326:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 800132a:	40b5      	lsls	r5, r6
 800132c:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8001330:	432c      	orrs	r4, r5
 8001332:	0500      	lsls	r0, r0, #20
 8001334:	4320      	orrs	r0, r4
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001336:	0dc5      	lsrs	r5, r0, #23
 8001338:	f005 0504 	and.w	r5, r5, #4
 800133c:	f102 0e14 	add.w	lr, r2, #20
  MODIFY_REG(*preg,
 8001340:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8001344:	f855 400e 	ldr.w	r4, [r5, lr]
 8001348:	688e      	ldr	r6, [r1, #8]
 800134a:	2707      	movs	r7, #7
 800134c:	4087      	lsls	r7, r0
 800134e:	ea24 0407 	bic.w	r4, r4, r7
 8001352:	fa06 f000 	lsl.w	r0, r6, r0
 8001356:	4320      	orrs	r0, r4
 8001358:	f845 000e 	str.w	r0, [r5, lr]
 800135c:	680c      	ldr	r4, [r1, #0]
 800135e:	e75e      	b.n	800121e <HAL_ADC_ConfigChannel+0xf2>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8001360:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001364:	6048      	str	r0, [r1, #4]
 8001366:	2700      	movs	r7, #0
 8001368:	f06f 051f 	mvn.w	r5, #31
 800136c:	2404      	movs	r4, #4
 800136e:	e704      	b.n	800117a <HAL_ADC_ConfigChannel+0x4e>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8001370:	2718      	movs	r7, #24
 8001372:	604f      	str	r7, [r1, #4]
 8001374:	f06f 55f8 	mvn.w	r5, #520093696	; 0x1f000000
 8001378:	e6ff      	b.n	800117a <HAL_ADC_ConfigChannel+0x4e>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 800137a:	2712      	movs	r7, #18
 800137c:	604f      	str	r7, [r1, #4]
 800137e:	f46f 05f8 	mvn.w	r5, #8126464	; 0x7c0000
 8001382:	e6fa      	b.n	800117a <HAL_ADC_ConfigChannel+0x4e>
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8001384:	270c      	movs	r7, #12
 8001386:	604f      	str	r7, [r1, #4]
 8001388:	f46f 35f8 	mvn.w	r5, #126976	; 0x1f000
 800138c:	e6f5      	b.n	800117a <HAL_ADC_ConfigChannel+0x4e>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800138e:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8001392:	f47f af57 	bne.w	8001244 <HAL_ADC_ConfigChannel+0x118>
        if (ADC_VREFINT_INSTANCE(hadc))
 8001396:	4c5e      	ldr	r4, [pc, #376]	; (8001510 <HAL_ADC_ConfigChannel+0x3e4>)
 8001398:	42a2      	cmp	r2, r4
 800139a:	f47f af53 	bne.w	8001244 <HAL_ADC_ConfigChannel+0x118>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800139e:	688a      	ldr	r2, [r1, #8]
 80013a0:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80013a4:	4332      	orrs	r2, r6
 80013a6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80013aa:	608a      	str	r2, [r1, #8]
 80013ac:	e6d4      	b.n	8001158 <HAL_ADC_ConfigChannel+0x2c>
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80013ae:	0200      	lsls	r0, r0, #8
 80013b0:	f53f af48 	bmi.w	8001244 <HAL_ADC_ConfigChannel+0x118>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 80013b4:	4856      	ldr	r0, [pc, #344]	; (8001510 <HAL_ADC_ConfigChannel+0x3e4>)
 80013b6:	4282      	cmp	r2, r0
 80013b8:	f47f af44 	bne.w	8001244 <HAL_ADC_ConfigChannel+0x118>
 80013bc:	688a      	ldr	r2, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80013be:	4c55      	ldr	r4, [pc, #340]	; (8001514 <HAL_ADC_ConfigChannel+0x3e8>)
 80013c0:	4855      	ldr	r0, [pc, #340]	; (8001518 <HAL_ADC_ConfigChannel+0x3ec>)
 80013c2:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80013c6:	4332      	orrs	r2, r6
 80013c8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80013cc:	608a      	str	r2, [r1, #8]
 80013ce:	6822      	ldr	r2, [r4, #0]
 80013d0:	0992      	lsrs	r2, r2, #6
 80013d2:	fba0 1202 	umull	r1, r2, r0, r2
 80013d6:	0992      	lsrs	r2, r2, #6
 80013d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80013dc:	0092      	lsls	r2, r2, #2
 80013de:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0UL)
 80013e0:	9a01      	ldr	r2, [sp, #4]
 80013e2:	2a00      	cmp	r2, #0
 80013e4:	f43f af2e 	beq.w	8001244 <HAL_ADC_ConfigChannel+0x118>
            wait_loop_index--;
 80013e8:	9a01      	ldr	r2, [sp, #4]
 80013ea:	3a01      	subs	r2, #1
 80013ec:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0UL)
 80013ee:	9a01      	ldr	r2, [sp, #4]
 80013f0:	2a00      	cmp	r2, #0
 80013f2:	d1f9      	bne.n	80013e8 <HAL_ADC_ConfigChannel+0x2bc>
 80013f4:	e726      	b.n	8001244 <HAL_ADC_ConfigChannel+0x118>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80013f6:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80013fa:	f47f af23 	bne.w	8001244 <HAL_ADC_ConfigChannel+0x118>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80013fe:	4c44      	ldr	r4, [pc, #272]	; (8001510 <HAL_ADC_ConfigChannel+0x3e4>)
 8001400:	42a2      	cmp	r2, r4
 8001402:	f47f af1f 	bne.w	8001244 <HAL_ADC_ConfigChannel+0x118>
 8001406:	688a      	ldr	r2, [r1, #8]
 8001408:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800140c:	4332      	orrs	r2, r6
 800140e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001412:	608a      	str	r2, [r1, #8]
 8001414:	e6a0      	b.n	8001158 <HAL_ADC_ConfigChannel+0x2c>
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8001416:	2706      	movs	r7, #6
 8001418:	604f      	str	r7, [r1, #4]
 800141a:	f46f 65f8 	mvn.w	r5, #1984	; 0x7c0
 800141e:	e6ac      	b.n	800117a <HAL_ADC_ConfigChannel+0x4e>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001420:	fa90 f4a0 	rbit	r4, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1UL) & 0x1FUL), sConfig->SamplingTime);
 8001424:	fab4 f484 	clz	r4, r4
 8001428:	3401      	adds	r4, #1
 800142a:	f004 041f 	and.w	r4, r4, #31
 800142e:	2c09      	cmp	r4, #9
 8001430:	d83f      	bhi.n	80014b2 <HAL_ADC_ConfigChannel+0x386>
 8001432:	fa90 f4a0 	rbit	r4, r0
 8001436:	fab4 f484 	clz	r4, r4
 800143a:	fa90 f5a0 	rbit	r5, r0
 800143e:	fab5 f585 	clz	r5, r5
 8001442:	3501      	adds	r5, #1
 8001444:	3401      	adds	r4, #1
 8001446:	2601      	movs	r6, #1
 8001448:	f005 051f 	and.w	r5, r5, #31
 800144c:	06a4      	lsls	r4, r4, #26
 800144e:	fa06 f505 	lsl.w	r5, r6, r5
 8001452:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8001456:	432c      	orrs	r4, r5
 8001458:	fa90 f0a0 	rbit	r0, r0
 800145c:	fab0 f080 	clz	r0, r0
 8001460:	4430      	add	r0, r6
 8001462:	f000 001f 	and.w	r0, r0, #31
 8001466:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800146a:	0500      	lsls	r0, r0, #20
 800146c:	e762      	b.n	8001334 <HAL_ADC_ConfigChannel+0x208>
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800146e:	0de0      	lsrs	r0, r4, #23
 8001470:	f000 0004 	and.w	r0, r0, #4
 8001474:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 8001478:	f3c4 5404 	ubfx	r4, r4, #20, #5
 800147c:	59c5      	ldr	r5, [r0, r7]
 800147e:	2607      	movs	r6, #7
 8001480:	fa06 f404 	lsl.w	r4, r6, r4
 8001484:	ea25 0504 	bic.w	r5, r5, r4
 8001488:	51c5      	str	r5, [r0, r7]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800148a:	6950      	ldr	r0, [r2, #20]
 800148c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8001490:	6150      	str	r0, [r2, #20]
 8001492:	e6a4      	b.n	80011de <HAL_ADC_ConfigChannel+0xb2>
 8001494:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8001498:	06a5      	lsls	r5, r4, #26
 800149a:	381e      	subs	r0, #30
 800149c:	2401      	movs	r4, #1
 800149e:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80014a2:	fa04 f606 	lsl.w	r6, r4, r6
 80014a6:	0500      	lsls	r0, r0, #20
 80014a8:	4335      	orrs	r5, r6
 80014aa:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 80014ae:	4328      	orrs	r0, r5
 80014b0:	e741      	b.n	8001336 <HAL_ADC_ConfigChannel+0x20a>
 80014b2:	fa90 f5a0 	rbit	r5, r0
 80014b6:	fab5 f585 	clz	r5, r5
 80014ba:	fa90 f4a0 	rbit	r4, r0
 80014be:	fab4 f484 	clz	r4, r4
 80014c2:	3401      	adds	r4, #1
 80014c4:	3501      	adds	r5, #1
 80014c6:	2601      	movs	r6, #1
 80014c8:	f004 041f 	and.w	r4, r4, #31
 80014cc:	06ad      	lsls	r5, r5, #26
 80014ce:	fa06 f404 	lsl.w	r4, r6, r4
 80014d2:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80014d6:	4325      	orrs	r5, r4
 80014d8:	fa90 f4a0 	rbit	r4, r0
 80014dc:	fab4 f484 	clz	r4, r4
 80014e0:	4434      	add	r4, r6
 80014e2:	f004 041f 	and.w	r4, r4, #31
 80014e6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80014ea:	f1a4 001e 	sub.w	r0, r4, #30
 80014ee:	0500      	lsls	r0, r0, #20
 80014f0:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 80014f4:	e7db      	b.n	80014ae <HAL_ADC_ConfigChannel+0x382>
 80014f6:	bf00      	nop
 80014f8:	80080000 	.word	0x80080000
 80014fc:	50040300 	.word	0x50040300
 8001500:	c7520000 	.word	0xc7520000
 8001504:	cb840000 	.word	0xcb840000
 8001508:	80000001 	.word	0x80000001
 800150c:	0007ffff 	.word	0x0007ffff
 8001510:	50040000 	.word	0x50040000
 8001514:	20000050 	.word	0x20000050
 8001518:	053e2d63 	.word	0x053e2d63
 800151c:	03fff000 	.word	0x03fff000
 8001520:	407f0000 	.word	0x407f0000
 8001524:	fa90 f4a0 	rbit	r4, r0
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001528:	fab4 f484 	clz	r4, r4
 800152c:	42a7      	cmp	r7, r4
 800152e:	f43f aea4 	beq.w	800127a <HAL_ADC_ConfigChannel+0x14e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001532:	6e56      	ldr	r6, [r2, #100]	; 0x64
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001534:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001538:	f3c6 6784 	ubfx	r7, r6, #26, #5
 800153c:	f102 0e64 	add.w	lr, r2, #100	; 0x64
 8001540:	fa90 f5a0 	rbit	r5, r0
 8001544:	fab5 f585 	clz	r5, r5
 8001548:	42bd      	cmp	r5, r7
 800154a:	d11c      	bne.n	8001586 <HAL_ADC_ConfigChannel+0x45a>
  MODIFY_REG(*preg,
 800154c:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 8001550:	f8ce 6000 	str.w	r6, [lr]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001554:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001556:	68a6      	ldr	r6, [r4, #8]
 8001558:	f3c0 0512 	ubfx	r5, r0, #0, #19
 800155c:	f3c6 6784 	ubfx	r7, r6, #26, #5
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001560:	f104 0e08 	add.w	lr, r4, #8
 8001564:	b315      	cbz	r5, 80015ac <HAL_ADC_ConfigChannel+0x480>
 8001566:	fa90 f5a0 	rbit	r5, r0
 800156a:	fab5 f585 	clz	r5, r5
 800156e:	42bd      	cmp	r5, r7
 8001570:	f43f aea0 	beq.w	80012b4 <HAL_ADC_ConfigChannel+0x188>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001574:	68e6      	ldr	r6, [r4, #12]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001576:	340c      	adds	r4, #12
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001578:	f3c6 6784 	ubfx	r7, r6, #26, #5
 800157c:	fa90 f5a0 	rbit	r5, r0
 8001580:	fab5 f585 	clz	r5, r5
 8001584:	e6a6      	b.n	80012d4 <HAL_ADC_ConfigChannel+0x1a8>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001586:	68a6      	ldr	r6, [r4, #8]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001588:	f104 0e08 	add.w	lr, r4, #8
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800158c:	f3c6 6784 	ubfx	r7, r6, #26, #5
 8001590:	e7e9      	b.n	8001566 <HAL_ADC_ConfigChannel+0x43a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001592:	68e6      	ldr	r6, [r4, #12]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001594:	340c      	adds	r4, #12
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001596:	f3c6 6784 	ubfx	r7, r6, #26, #5
 800159a:	e69b      	b.n	80012d4 <HAL_ADC_ConfigChannel+0x1a8>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800159c:	6e56      	ldr	r6, [r2, #100]	; 0x64
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800159e:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80015a2:	f3c6 6784 	ubfx	r7, r6, #26, #5
 80015a6:	f102 0e64 	add.w	lr, r2, #100	; 0x64
 80015aa:	e678      	b.n	800129e <HAL_ADC_ConfigChannel+0x172>
 80015ac:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80015b0:	e67d      	b.n	80012ae <HAL_ADC_ConfigChannel+0x182>
 80015b2:	bf00      	nop

080015b4 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80015b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015b6:	b083      	sub	sp, #12
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	9300      	str	r3, [sp, #0]
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80015bc:	2800      	cmp	r0, #0
 80015be:	f000 8085 	beq.w	80016cc <HAL_COMP_Init+0x118>
  {
    status = HAL_ERROR;
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80015c2:	6802      	ldr	r2, [r0, #0]
 80015c4:	6813      	ldr	r3, [r2, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	4604      	mov	r4, r0
 80015ca:	db7f      	blt.n	80016cc <HAL_COMP_Init+0x118>
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif
    
    if(hcomp->State == HAL_COMP_STATE_RESET)
 80015cc:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80015d0:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d07c      	beq.n	80016d2 <HAL_COMP_Init+0x11e>
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
    
    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.NonInvertingInput
               | hcomp->Init.InvertingInput
 80015d8:	6927      	ldr	r7, [r4, #16]
 80015da:	68e3      	ldr	r3, [r4, #12]
               | hcomp->Init.BlankingSrce
 80015dc:	69e6      	ldr	r6, [r4, #28]
               | hcomp->Init.Hysteresis
 80015de:	6965      	ldr	r5, [r4, #20]
               | hcomp->Init.OutputPol
 80015e0:	69a0      	ldr	r0, [r4, #24]
    tmp_csr = (  hcomp->Init.NonInvertingInput
 80015e2:	68a1      	ldr	r1, [r4, #8]
               | hcomp->Init.InvertingInput
 80015e4:	433b      	orrs	r3, r7
               | hcomp->Init.BlankingSrce
 80015e6:	4333      	orrs	r3, r6
               | hcomp->Init.Hysteresis
 80015e8:	432b      	orrs	r3, r5
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80015ea:	6816      	ldr	r6, [r2, #0]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif
#else
    MODIFY_REG(hcomp->Instance->CSR,
 80015ec:	4d45      	ldr	r5, [pc, #276]	; (8001704 <HAL_COMP_Init+0x150>)
 80015ee:	6817      	ldr	r7, [r2, #0]
               | hcomp->Init.OutputPol
 80015f0:	4303      	orrs	r3, r0
    tmp_csr = (  hcomp->Init.NonInvertingInput
 80015f2:	430b      	orrs	r3, r1
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80015f4:	6861      	ldr	r1, [r4, #4]
    MODIFY_REG(hcomp->Instance->CSR,
 80015f6:	403d      	ands	r5, r7
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80015f8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    MODIFY_REG(hcomp->Instance->CSR,
 80015fc:	ea43 0305 	orr.w	r3, r3, r5
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8001600:	4941      	ldr	r1, [pc, #260]	; (8001708 <HAL_COMP_Init+0x154>)
    MODIFY_REG(hcomp->Instance->CSR,
 8001602:	6013      	str	r3, [r2, #0]
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8001604:	680b      	ldr	r3, [r1, #0]
 8001606:	bf0c      	ite	eq
 8001608:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 800160c:	f423 7300 	bicne.w	r3, r3, #512	; 0x200
 8001610:	600b      	str	r3, [r1, #0]
    }
#endif /* COMP2 */
    
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8001612:	6813      	ldr	r3, [r2, #0]
 8001614:	021d      	lsls	r5, r3, #8
 8001616:	d514      	bpl.n	8001642 <HAL_COMP_Init+0x8e>
 8001618:	0237      	lsls	r7, r6, #8
 800161a:	d412      	bmi.n	8001642 <HAL_COMP_Init+0x8e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800161c:	4b3b      	ldr	r3, [pc, #236]	; (800170c <HAL_COMP_Init+0x158>)
 800161e:	493c      	ldr	r1, [pc, #240]	; (8001710 <HAL_COMP_Init+0x15c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	099b      	lsrs	r3, r3, #6
 8001624:	fba1 1303 	umull	r1, r3, r1, r3
 8001628:	099b      	lsrs	r3, r3, #6
 800162a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	9300      	str	r3, [sp, #0]
      while(wait_loop_index != 0UL)
 8001632:	9b00      	ldr	r3, [sp, #0]
 8001634:	b12b      	cbz	r3, 8001642 <HAL_COMP_Init+0x8e>
      {
        wait_loop_index--;
 8001636:	9b00      	ldr	r3, [sp, #0]
 8001638:	3b01      	subs	r3, #1
 800163a:	9300      	str	r3, [sp, #0]
      while(wait_loop_index != 0UL)
 800163c:	9b00      	ldr	r3, [sp, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f9      	bne.n	8001636 <HAL_COMP_Init+0x82>
      }
    }
    
    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8001642:	4934      	ldr	r1, [pc, #208]	; (8001714 <HAL_COMP_Init+0x160>)
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8001644:	6a23      	ldr	r3, [r4, #32]
 8001646:	428a      	cmp	r2, r1
 8001648:	bf0b      	itete	eq
 800164a:	f46f 1200 	mvneq.w	r2, #2097152	; 0x200000
 800164e:	f46f 0280 	mvnne.w	r2, #4194304	; 0x400000
 8001652:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
 8001656:	f44f 0180 	movne.w	r1, #4194304	; 0x400000
 800165a:	0798      	lsls	r0, r3, #30
 800165c:	d111      	bne.n	8001682 <HAL_COMP_Init+0xce>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800165e:	4b2e      	ldr	r3, [pc, #184]	; (8001718 <HAL_COMP_Init+0x164>)
 8001660:	6859      	ldr	r1, [r3, #4]
 8001662:	4011      	ands	r1, r2
 8001664:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001666:	6819      	ldr	r1, [r3, #0]
 8001668:	400a      	ands	r2, r1
 800166a:	601a      	str	r2, [r3, #0]
    }
    
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800166c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8001670:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8001674:	2b00      	cmp	r3, #0
 8001676:	d126      	bne.n	80016c6 <HAL_COMP_Init+0x112>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8001678:	2301      	movs	r3, #1
 800167a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    }
  }
  
  return status;
}
 800167e:	b003      	add	sp, #12
 8001680:	bdf0      	pop	{r4, r5, r6, r7, pc}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001682:	4d25      	ldr	r5, [pc, #148]	; (8001718 <HAL_COMP_Init+0x164>)
 8001684:	68a8      	ldr	r0, [r5, #8]
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8001686:	06de      	lsls	r6, r3, #27
 8001688:	bf4c      	ite	mi
 800168a:	4308      	orrmi	r0, r1
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800168c:	4010      	andpl	r0, r2
 800168e:	60a8      	str	r0, [r5, #8]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001690:	4d21      	ldr	r5, [pc, #132]	; (8001718 <HAL_COMP_Init+0x164>)
 8001692:	68e8      	ldr	r0, [r5, #12]
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8001694:	069f      	lsls	r7, r3, #26
 8001696:	bf4c      	ite	mi
 8001698:	4308      	orrmi	r0, r1
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800169a:	4010      	andpl	r0, r2
 800169c:	60e8      	str	r0, [r5, #12]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 800169e:	481e      	ldr	r0, [pc, #120]	; (8001718 <HAL_COMP_Init+0x164>)
 80016a0:	6141      	str	r1, [r0, #20]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80016a2:	6845      	ldr	r5, [r0, #4]
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80016a4:	079e      	lsls	r6, r3, #30
 80016a6:	bf4c      	ite	mi
 80016a8:	430d      	orrmi	r5, r1
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80016aa:	4015      	andpl	r5, r2
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80016ac:	07db      	lsls	r3, r3, #31
 80016ae:	6045      	str	r5, [r0, #4]
 80016b0:	d523      	bpl.n	80016fa <HAL_COMP_Init+0x146>
  SET_BIT(EXTI->IMR1, ExtiLine);
 80016b2:	4b19      	ldr	r3, [pc, #100]	; (8001718 <HAL_COMP_Init+0x164>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	4311      	orrs	r1, r2
 80016b8:	6019      	str	r1, [r3, #0]
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80016ba:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80016be:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0d8      	beq.n	8001678 <HAL_COMP_Init+0xc4>
  HAL_StatusTypeDef status = HAL_OK;
 80016c6:	2000      	movs	r0, #0
}
 80016c8:	b003      	add	sp, #12
 80016ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_ERROR;
 80016cc:	2001      	movs	r0, #1
}
 80016ce:	b003      	add	sp, #12
 80016d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016d6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
      COMP_CLEAR_ERRORCODE(hcomp);
 80016da:	6281      	str	r1, [r0, #40]	; 0x28
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
      hcomp->Lock = HAL_UNLOCKED;
 80016de:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e2:	f042 0201 	orr.w	r2, r2, #1
 80016e6:	661a      	str	r2, [r3, #96]	; 0x60
 80016e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	9b01      	ldr	r3, [sp, #4]
      HAL_COMP_MspInit(hcomp);
 80016f2:	f00d fb8d 	bl	800ee10 <HAL_COMP_MspInit>
 80016f6:	6822      	ldr	r2, [r4, #0]
 80016f8:	e76e      	b.n	80015d8 <HAL_COMP_Init+0x24>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80016fa:	4907      	ldr	r1, [pc, #28]	; (8001718 <HAL_COMP_Init+0x164>)
 80016fc:	680b      	ldr	r3, [r1, #0]
 80016fe:	401a      	ands	r2, r3
 8001700:	600a      	str	r2, [r1, #0]
 8001702:	e7b3      	b.n	800166c <HAL_COMP_Init+0xb8>
 8001704:	ff207d03 	.word	0xff207d03
 8001708:	40010204 	.word	0x40010204
 800170c:	20000050 	.word	0x20000050
 8001710:	053e2d63 	.word	0x053e2d63
 8001714:	40010200 	.word	0x40010200
 8001718:	40010400 	.word	0x40010400

0800171c <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 800171c:	b410      	push	{r4}
 800171e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8001720:	2300      	movs	r3, #0
 8001722:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8001724:	b138      	cbz	r0, 8001736 <HAL_COMP_Start+0x1a>
  {
    status = HAL_ERROR;
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8001726:	6802      	ldr	r2, [r0, #0]
 8001728:	6813      	ldr	r3, [r2, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	db03      	blt.n	8001736 <HAL_COMP_Start+0x1a>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 800172e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001732:	2b01      	cmp	r3, #1
 8001734:	d004      	beq.n	8001740 <HAL_COMP_Start+0x24>
    status = HAL_ERROR;
 8001736:	2001      	movs	r0, #1
      status = HAL_ERROR;
    }
  }

  return status;
}
 8001738:	b003      	add	sp, #12
 800173a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800173e:	4770      	bx	lr
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8001740:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <HAL_COMP_Start+0x60>)
 8001744:	4c0e      	ldr	r4, [pc, #56]	; (8001780 <HAL_COMP_Start+0x64>)
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8001746:	f041 0101 	orr.w	r1, r1, #1
 800174a:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	099b      	lsrs	r3, r3, #6
 8001750:	fba4 2303 	umull	r2, r3, r4, r3
 8001754:	099b      	lsrs	r3, r3, #6
 8001756:	00db      	lsls	r3, r3, #3
      hcomp->State = HAL_COMP_STATE_BUSY;
 8001758:	2202      	movs	r2, #2
 800175a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800175e:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 8001760:	9b01      	ldr	r3, [sp, #4]
 8001762:	b12b      	cbz	r3, 8001770 <HAL_COMP_Start+0x54>
        wait_loop_index--;
 8001764:	9b01      	ldr	r3, [sp, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 800176a:	9b01      	ldr	r3, [sp, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1f9      	bne.n	8001764 <HAL_COMP_Start+0x48>
  HAL_StatusTypeDef status = HAL_OK;
 8001770:	2000      	movs	r0, #0
}
 8001772:	b003      	add	sp, #12
 8001774:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	20000050 	.word	0x20000050
 8001780:	053e2d63 	.word	0x053e2d63

08001784 <HAL_COMP_IRQHandler>:
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001784:	4a0e      	ldr	r2, [pc, #56]	; (80017c0 <HAL_COMP_IRQHandler+0x3c>)
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8001786:	6803      	ldr	r3, [r0, #0]
 8001788:	6951      	ldr	r1, [r2, #20]
{
 800178a:	b510      	push	{r4, lr}
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800178c:	4c0d      	ldr	r4, [pc, #52]	; (80017c4 <HAL_COMP_IRQHandler+0x40>)
 800178e:	42a3      	cmp	r3, r4
 8001790:	bf0c      	ite	eq
 8001792:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001796:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 800179a:	ea33 0101 	bics.w	r1, r3, r1
 800179e:	d000      	beq.n	80017a2 <HAL_COMP_IRQHandler+0x1e>
 80017a0:	bd10      	pop	{r4, pc}
  /* Check COMP EXTI flag */
  if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
  {
#if defined(COMP2)
    /* Check whether comparator is in independent or window mode */
    if(READ_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE) != RESET)
 80017a2:	4909      	ldr	r1, [pc, #36]	; (80017c8 <HAL_COMP_IRQHandler+0x44>)
 80017a4:	6809      	ldr	r1, [r1, #0]
 80017a6:	0589      	lsls	r1, r1, #22
 80017a8:	d403      	bmi.n	80017b2 <HAL_COMP_IRQHandler+0x2e>
  WRITE_REG(EXTI->PR1, ExtiLine);
 80017aa:	6153      	str	r3, [r2, #20]
    
    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 80017ac:	f00f f98c 	bl	8010ac8 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 80017b0:	bd10      	pop	{r4, pc}
 80017b2:	f44f 03c0 	mov.w	r3, #6291456	; 0x600000
 80017b6:	6153      	str	r3, [r2, #20]
    HAL_COMP_TriggerCallback(hcomp);
 80017b8:	f00f f986 	bl	8010ac8 <HAL_COMP_TriggerCallback>
}
 80017bc:	bd10      	pop	{r4, pc}
 80017be:	bf00      	nop
 80017c0:	40010400 	.word	0x40010400
 80017c4:	40010200 	.word	0x40010200
 80017c8:	40010204 	.word	0x40010204

080017cc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017cc:	4a07      	ldr	r2, [pc, #28]	; (80017ec <HAL_NVIC_SetPriorityGrouping+0x20>)
 80017ce:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017d0:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 80017d4:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80017d6:	0200      	lsls	r0, r0, #8
 80017d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017dc:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80017e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80017e4:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80017e6:	60d3      	str	r3, [r2, #12]
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f0:	4b18      	ldr	r3, [pc, #96]	; (8001854 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f2:	b470      	push	{r4, r5, r6}
 80017f4:	68dc      	ldr	r4, [r3, #12]
 80017f6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017fa:	f1c4 0607 	rsb	r6, r4, #7
 80017fe:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001800:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001804:	bf28      	it	cs
 8001806:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001808:	2b06      	cmp	r3, #6
 800180a:	d917      	bls.n	800183c <HAL_NVIC_SetPriority+0x4c>
 800180c:	3c03      	subs	r4, #3
 800180e:	2501      	movs	r5, #1
 8001810:	40a5      	lsls	r5, r4
 8001812:	3d01      	subs	r5, #1
 8001814:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001816:	2301      	movs	r3, #1
 8001818:	40b3      	lsls	r3, r6
 800181a:	3b01      	subs	r3, #1
 800181c:	4019      	ands	r1, r3
 800181e:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 8001820:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001822:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 8001826:	db0c      	blt.n	8001842 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001828:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800182c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001830:	0109      	lsls	r1, r1, #4
 8001832:	b2c9      	uxtb	r1, r1
 8001834:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001838:	bc70      	pop	{r4, r5, r6}
 800183a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800183c:	2200      	movs	r2, #0
 800183e:	4614      	mov	r4, r2
 8001840:	e7e9      	b.n	8001816 <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001842:	4b05      	ldr	r3, [pc, #20]	; (8001858 <HAL_NVIC_SetPriority+0x68>)
 8001844:	f000 000f 	and.w	r0, r0, #15
 8001848:	0109      	lsls	r1, r1, #4
 800184a:	4403      	add	r3, r0
 800184c:	b2c9      	uxtb	r1, r1
 800184e:	7619      	strb	r1, [r3, #24]
 8001850:	bc70      	pop	{r4, r5, r6}
 8001852:	4770      	bx	lr
 8001854:	e000ed00 	.word	0xe000ed00
 8001858:	e000ecfc 	.word	0xe000ecfc

0800185c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800185c:	f000 011f 	and.w	r1, r0, #31
 8001860:	2301      	movs	r3, #1
 8001862:	0940      	lsrs	r0, r0, #5
 8001864:	4a02      	ldr	r2, [pc, #8]	; (8001870 <HAL_NVIC_EnableIRQ+0x14>)
 8001866:	408b      	lsls	r3, r1
 8001868:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100

08001874 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
  /* Check DAC handle */
  if(hdac == NULL)
 8001874:	b188      	cbz	r0, 800189a <HAL_DAC_Init+0x26>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8001876:	7903      	ldrb	r3, [r0, #4]
{
 8001878:	b510      	push	{r4, lr}
  if(hdac->State == HAL_DAC_STATE_RESET)
 800187a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800187e:	4604      	mov	r4, r0
 8001880:	b13b      	cbz	r3, 8001892 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001882:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8001884:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001886:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8001888:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 800188a:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800188c:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800188e:	7122      	strb	r2, [r4, #4]
  return HAL_OK;
 8001890:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8001892:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8001894:	f00d fb1e 	bl	800eed4 <HAL_DAC_MspInit>
 8001898:	e7f3      	b.n	8001882 <HAL_DAC_Init+0xe>
     return HAL_ERROR;
 800189a:	2001      	movs	r0, #1
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop

080018a0 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80018a0:	7943      	ldrb	r3, [r0, #5]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d022      	beq.n	80018ec <HAL_DAC_Start+0x4c>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80018a6:	6802      	ldr	r2, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 80018a8:	2302      	movs	r3, #2
{
 80018aa:	b430      	push	{r4, r5}
  hdac->State = HAL_DAC_STATE_BUSY;
 80018ac:	7103      	strb	r3, [r0, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 80018ae:	6815      	ldr	r5, [r2, #0]
  __HAL_LOCK(hdac);
 80018b0:	2401      	movs	r4, #1
  __HAL_DAC_ENABLE(hdac, Channel);
 80018b2:	f001 0310 	and.w	r3, r1, #16
 80018b6:	fa04 f303 	lsl.w	r3, r4, r3
 80018ba:	432b      	orrs	r3, r5
  __HAL_LOCK(hdac);
 80018bc:	7144      	strb	r4, [r0, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 80018be:	6013      	str	r3, [r2, #0]

#if defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if(((DAC_CR_TEN1 & ~(DAC_CR_TSEL1)) == (hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1))))
 80018c0:	6813      	ldr	r3, [r2, #0]
  if(Channel == DAC_CHANNEL_1)
 80018c2:	b159      	cbz	r1, 80018dc <HAL_DAC_Start+0x3c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if(((DAC_CR_TEN2 & ~(DAC_CR_TSEL2)) == (hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2))))
 80018c4:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
 80018c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80018cc:	d010      	beq.n	80018f0 <HAL_DAC_Start+0x50>
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80018ce:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_READY;
 80018d0:	2201      	movs	r2, #1
 80018d2:	7102      	strb	r2, [r0, #4]
  __HAL_UNLOCK(hdac);
 80018d4:	7143      	strb	r3, [r0, #5]

  /* Return function status */
  return HAL_OK;
}
 80018d6:	bc30      	pop	{r4, r5}
  return HAL_OK;
 80018d8:	4618      	mov	r0, r3
}
 80018da:	4770      	bx	lr
    if(((DAC_CR_TEN1 & ~(DAC_CR_TSEL1)) == (hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1))))
 80018dc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d1f4      	bne.n	80018ce <HAL_DAC_Start+0x2e>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80018e4:	6853      	ldr	r3, [r2, #4]
 80018e6:	4323      	orrs	r3, r4
 80018e8:	6053      	str	r3, [r2, #4]
 80018ea:	e7f0      	b.n	80018ce <HAL_DAC_Start+0x2e>
  __HAL_LOCK(hdac);
 80018ec:	2002      	movs	r0, #2
 80018ee:	4770      	bx	lr
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80018f0:	6853      	ldr	r3, [r2, #4]
 80018f2:	f043 0302 	orr.w	r3, r3, #2
 80018f6:	6053      	str	r3, [r2, #4]
 80018f8:	e7e9      	b.n	80018ce <HAL_DAC_Start+0x2e>
 80018fa:	bf00      	nop

080018fc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 80018fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80018fe:	7944      	ldrb	r4, [r0, #5]
{
 8001900:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdac);
 8001902:	2c01      	cmp	r4, #1
 8001904:	d052      	beq.n	80019ac <HAL_DAC_Start_DMA+0xb0>
 8001906:	4696      	mov	lr, r2
 8001908:	460f      	mov	r7, r1

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800190a:	2202      	movs	r2, #2
  __HAL_LOCK(hdac);
 800190c:	2101      	movs	r1, #1
 800190e:	4604      	mov	r4, r0
 8001910:	7141      	strb	r1, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8001912:	7102      	strb	r2, [r0, #4]

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001914:	6806      	ldr	r6, [r0, #0]
  if(Channel == DAC_CHANNEL_1)
 8001916:	bb17      	cbnz	r7, 800195e <HAL_DAC_Start_DMA+0x62>
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001918:	6832      	ldr	r2, [r6, #0]
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800191a:	6880      	ldr	r0, [r0, #8]
 800191c:	492d      	ldr	r1, [pc, #180]	; (80019d4 <HAL_DAC_Start_DMA+0xd8>)
 800191e:	62c1      	str	r1, [r0, #44]	; 0x2c
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001920:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 80019e4 <HAL_DAC_Start_DMA+0xe8>
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001924:	492c      	ldr	r1, [pc, #176]	; (80019d8 <HAL_DAC_Start_DMA+0xdc>)
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001926:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800192a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000

    /* Case of use of channel 1 */
    switch(Alignment)
 800192e:	2d04      	cmp	r5, #4
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001930:	6341      	str	r1, [r0, #52]	; 0x34
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001932:	6032      	str	r2, [r6, #0]
    switch(Alignment)
 8001934:	d048      	beq.n	80019c8 <HAL_DAC_Start_DMA+0xcc>
 8001936:	2d08      	cmp	r5, #8
 8001938:	d03a      	beq.n	80019b0 <HAL_DAC_Start_DMA+0xb4>
 800193a:	2d00      	cmp	r5, #0
 800193c:	d041      	beq.n	80019c2 <HAL_DAC_Start_DMA+0xc6>
  uint32_t tmpreg = 0U;
 800193e:	463a      	mov	r2, r7

  /* Enable the DMA channel */
  if(Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001940:	6835      	ldr	r5, [r6, #0]
 8001942:	f445 5500 	orr.w	r5, r5, #8192	; 0x2000

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001946:	4671      	mov	r1, lr
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001948:	6035      	str	r5, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800194a:	f000 fa31 	bl	8001db0 <HAL_DMA_Start_IT>
    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800194e:	2300      	movs	r3, #0
 8001950:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8001952:	b310      	cbz	r0, 800199a <HAL_DAC_Start_DMA+0x9e>
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001954:	6923      	ldr	r3, [r4, #16]
 8001956:	f043 0304 	orr.w	r3, r3, #4
 800195a:	6123      	str	r3, [r4, #16]
 800195c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800195e:	6832      	ldr	r2, [r6, #0]
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001960:	68c0      	ldr	r0, [r0, #12]
 8001962:	491e      	ldr	r1, [pc, #120]	; (80019dc <HAL_DAC_Start_DMA+0xe0>)
 8001964:	62c1      	str	r1, [r0, #44]	; 0x2c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001966:	f8df c080 	ldr.w	ip, [pc, #128]	; 80019e8 <HAL_DAC_Start_DMA+0xec>
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800196a:	491d      	ldr	r1, [pc, #116]	; (80019e0 <HAL_DAC_Start_DMA+0xe4>)
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800196c:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001970:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    switch(Alignment)
 8001974:	2d04      	cmp	r5, #4
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001976:	6341      	str	r1, [r0, #52]	; 0x34
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001978:	6032      	str	r2, [r6, #0]
    switch(Alignment)
 800197a:	d01f      	beq.n	80019bc <HAL_DAC_Start_DMA+0xc0>
 800197c:	2d08      	cmp	r5, #8
 800197e:	d01a      	beq.n	80019b6 <HAL_DAC_Start_DMA+0xba>
 8001980:	b32d      	cbz	r5, 80019ce <HAL_DAC_Start_DMA+0xd2>
  uint32_t tmpreg = 0U;
 8001982:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001984:	6835      	ldr	r5, [r6, #0]
 8001986:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800198a:	4671      	mov	r1, lr
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800198c:	6035      	str	r5, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800198e:	f000 fa0f 	bl	8001db0 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8001992:	2300      	movs	r3, #0
 8001994:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 8001996:	2800      	cmp	r0, #0
 8001998:	d1dc      	bne.n	8001954 <HAL_DAC_Start_DMA+0x58>
    __HAL_DAC_ENABLE(hdac, Channel);
 800199a:	6823      	ldr	r3, [r4, #0]
 800199c:	f007 0710 	and.w	r7, r7, #16
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	2101      	movs	r1, #1
 80019a4:	40b9      	lsls	r1, r7
 80019a6:	4311      	orrs	r1, r2
 80019a8:	6019      	str	r1, [r3, #0]
 80019aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hdac);
 80019ac:	2002      	movs	r0, #2
 80019ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80019b0:	f106 0210 	add.w	r2, r6, #16
        break;
 80019b4:	e7c4      	b.n	8001940 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80019b6:	f106 021c 	add.w	r2, r6, #28
        break;
 80019ba:	e7e3      	b.n	8001984 <HAL_DAC_Start_DMA+0x88>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80019bc:	f106 0218 	add.w	r2, r6, #24
        break;
 80019c0:	e7e0      	b.n	8001984 <HAL_DAC_Start_DMA+0x88>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80019c2:	f106 0208 	add.w	r2, r6, #8
        break;
 80019c6:	e7bb      	b.n	8001940 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80019c8:	f106 020c 	add.w	r2, r6, #12
        break;
 80019cc:	e7b8      	b.n	8001940 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80019ce:	f106 0214 	add.w	r2, r6, #20
        break;
 80019d2:	e7d7      	b.n	8001984 <HAL_DAC_Start_DMA+0x88>
 80019d4:	08001a45 	.word	0x08001a45
 80019d8:	08001a69 	.word	0x08001a69
 80019dc:	08001c4d 	.word	0x08001c4d
 80019e0:	08001c69 	.word	0x08001c69
 80019e4:	08001a59 	.word	0x08001a59
 80019e8:	08001c5d 	.word	0x08001c5d

080019ec <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80019ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80019ee:	6803      	ldr	r3, [r0, #0]
 80019f0:	f001 0710 	and.w	r7, r1, #16
 80019f4:	681d      	ldr	r5, [r3, #0]
 80019f6:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 80019fa:	40be      	lsls	r6, r7
 80019fc:	ea25 0506 	bic.w	r5, r5, r6
 8001a00:	601d      	str	r5, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001a02:	681a      	ldr	r2, [r3, #0]
{
 8001a04:	4604      	mov	r4, r0
  __HAL_DAC_DISABLE(hdac, Channel);
 8001a06:	2001      	movs	r0, #1
 8001a08:	40b8      	lsls	r0, r7
 8001a0a:	ea22 0200 	bic.w	r2, r2, r0
 8001a0e:	601a      	str	r2, [r3, #0]
  /* Disable the DMA channel */
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8001a10:	b959      	cbnz	r1, 8001a2a <HAL_DAC_Stop_DMA+0x3e>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8001a12:	68a0      	ldr	r0, [r4, #8]
 8001a14:	f000 fa28 	bl	8001e68 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001a18:	6822      	ldr	r2, [r4, #0]
 8001a1a:	6813      	ldr	r3, [r2, #0]
 8001a1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a20:	6013      	str	r3, [r2, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8001a22:	b960      	cbnz	r0, 8001a3e <HAL_DAC_Stop_DMA+0x52>
    hdac->State = HAL_DAC_STATE_ERROR;
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8001a24:	2301      	movs	r3, #1
 8001a26:	7123      	strb	r3, [r4, #4]
  }

  /* Return function status */
  return status;
}
 8001a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 8001a2a:	68e0      	ldr	r0, [r4, #12]
 8001a2c:	f000 fa1c 	bl	8001e68 <HAL_DMA_Abort>
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001a30:	6822      	ldr	r2, [r4, #0]
 8001a32:	6813      	ldr	r3, [r2, #0]
 8001a34:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001a38:	6013      	str	r3, [r2, #0]
  if (status != HAL_OK)
 8001a3a:	2800      	cmp	r0, #0
 8001a3c:	d0f2      	beq.n	8001a24 <HAL_DAC_Stop_DMA+0x38>
    hdac->State = HAL_DAC_STATE_ERROR;
 8001a3e:	2304      	movs	r3, #4
 8001a40:	7123      	strb	r3, [r4, #4]
 8001a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001a44 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001a44:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a46:	6a84      	ldr	r4, [r0, #40]	; 0x28

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001a48:	4620      	mov	r0, r4
 8001a4a:	f010 fac3 	bl	8011fd4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	7123      	strb	r3, [r4, #4]
 8001a52:	bd10      	pop	{r4, pc}

08001a54 <HAL_DAC_ConvHalfCpltCallbackCh1>:
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop

08001a58 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001a58:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001a5a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001a5c:	f7ff fffa 	bl	8001a54 <HAL_DAC_ConvHalfCpltCallbackCh1>
 8001a60:	bd08      	pop	{r3, pc}
 8001a62:	bf00      	nop

08001a64 <HAL_DAC_ErrorCallbackCh1>:
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop

08001a68 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001a68:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a6a:	6a84      	ldr	r4, [r0, #40]	; 0x28

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001a6c:	6923      	ldr	r3, [r4, #16]
 8001a6e:	f043 0304 	orr.w	r3, r3, #4
 8001a72:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001a74:	4620      	mov	r0, r4
 8001a76:	f7ff fff5 	bl	8001a64 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	7123      	strb	r3, [r4, #4]
 8001a7e:	bd10      	pop	{r4, pc}

08001a80 <HAL_DAC_DMAUnderrunCallbackCh1>:
{
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop

08001a84 <HAL_DAC_IRQHandler>:
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001a84:	6803      	ldr	r3, [r0, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	0491      	lsls	r1, r2, #18
{
 8001a8a:	b510      	push	{r4, lr}
 8001a8c:	4604      	mov	r4, r0
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001a8e:	d502      	bpl.n	8001a96 <HAL_DAC_IRQHandler+0x12>
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001a90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a92:	0492      	lsls	r2, r2, #18
 8001a94:	d418      	bmi.n	8001ac8 <HAL_DAC_IRQHandler+0x44>
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	0091      	lsls	r1, r2, #2
 8001a9a:	d502      	bpl.n	8001aa2 <HAL_DAC_IRQHandler+0x1e>
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001a9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a9e:	0092      	lsls	r2, r2, #2
 8001aa0:	d400      	bmi.n	8001aa4 <HAL_DAC_IRQHandler+0x20>
 8001aa2:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8001aa4:	2204      	movs	r2, #4
 8001aa6:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001aa8:	6922      	ldr	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8001aaa:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001aae:	f042 0202 	orr.w	r2, r2, #2
 8001ab2:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8001ab4:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001abc:	4620      	mov	r0, r4
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001abe:	601a      	str	r2, [r3, #0]
}
 8001ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001ac4:	f000 b8c0 	b.w	8001c48 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8001ac8:	2204      	movs	r2, #4
 8001aca:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001acc:	6902      	ldr	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8001ace:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001ad2:	f042 0201 	orr.w	r2, r2, #1
 8001ad6:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8001ad8:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ae0:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001ae2:	f7ff ffcd 	bl	8001a80 <HAL_DAC_DMAUnderrunCallbackCh1>
 8001ae6:	6823      	ldr	r3, [r4, #0]
 8001ae8:	e7d5      	b.n	8001a96 <HAL_DAC_IRQHandler+0x12>
 8001aea:	bf00      	nop

08001aec <HAL_DAC_ConfigChannel>:
{
 8001aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdac);
 8001aee:	7943      	ldrb	r3, [r0, #5]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d042      	beq.n	8001b7a <HAL_DAC_ConfigChannel+0x8e>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8001af4:	684f      	ldr	r7, [r1, #4]
 8001af6:	4615      	mov	r5, r2
  hdac->State = HAL_DAC_STATE_BUSY;
 8001af8:	2302      	movs	r3, #2
  __HAL_LOCK(hdac);
 8001afa:	2201      	movs	r2, #1
  if(sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001afc:	2f04      	cmp	r7, #4
 8001afe:	460e      	mov	r6, r1
 8001b00:	4604      	mov	r4, r0
  __HAL_LOCK(hdac);
 8001b02:	7142      	strb	r2, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b04:	7103      	strb	r3, [r0, #4]
  if(sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001b06:	d03a      	beq.n	8001b7e <HAL_DAC_ConfigChannel+0x92>
 8001b08:	6803      	ldr	r3, [r0, #0]
 8001b0a:	f005 0510 	and.w	r5, r5, #16
  if(sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001b0e:	6972      	ldr	r2, [r6, #20]
 8001b10:	2a01      	cmp	r2, #1
 8001b12:	d05f      	beq.n	8001bd4 <HAL_DAC_ConfigChannel+0xe8>
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001b14:	6930      	ldr	r0, [r6, #16]
 8001b16:	68f2      	ldr	r2, [r6, #12]
  tmpreg1 = hdac->Instance->MCR;
 8001b18:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001b1a:	4302      	orrs	r2, r0
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001b1c:	2007      	movs	r0, #7
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001b1e:	433a      	orrs	r2, r7
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001b20:	40a8      	lsls	r0, r5
 8001b22:	ea21 0100 	bic.w	r1, r1, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b26:	40aa      	lsls	r2, r5
 8001b28:	430a      	orrs	r2, r1
  hdac->Instance->MCR = tmpreg1;
 8001b2a:	63da      	str	r2, [r3, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001b2c:	6819      	ldr	r1, [r3, #0]
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b2e:	68b2      	ldr	r2, [r6, #8]
  if(DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8001b30:	6837      	ldr	r7, [r6, #0]
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001b32:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b36:	40a8      	lsls	r0, r5
 8001b38:	ea21 0100 	bic.w	r1, r1, r0
 8001b3c:	6019      	str	r1, [r3, #0]
  tmpreg1 = hdac->Instance->CR;
 8001b3e:	681e      	ldr	r6, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001b40:	f640 71fe 	movw	r1, #4094	; 0xffe
 8001b44:	40a9      	lsls	r1, r5
 8001b46:	ea26 0601 	bic.w	r6, r6, r1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b4a:	40aa      	lsls	r2, r5
  if(DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8001b4c:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b50:	ea46 0602 	orr.w	r6, r6, r2
  if(DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8001b54:	d03b      	beq.n	8001bce <HAL_DAC_ConfigChannel+0xe2>
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8001b56:	2f00      	cmp	r7, #0
 8001b58:	d146      	bne.n	8001be8 <HAL_DAC_ConfigChannel+0xfc>
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8001b5a:	f426 4600 	bic.w	r6, r6, #32768	; 0x8000
  hdac->Instance->CR = tmpreg1;
 8001b5e:	601e      	str	r6, [r3, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001b60:	6819      	ldr	r1, [r3, #0]
 8001b62:	22c0      	movs	r2, #192	; 0xc0
 8001b64:	fa02 f505 	lsl.w	r5, r2, r5
 8001b68:	ea21 0505 	bic.w	r5, r1, r5
  __HAL_UNLOCK(hdac);
 8001b6c:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8001b6e:	2101      	movs	r1, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001b70:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 8001b72:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 8001b74:	7121      	strb	r1, [r4, #4]
  __HAL_UNLOCK(hdac);
 8001b76:	7162      	strb	r2, [r4, #5]
  return HAL_OK;
 8001b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hdac);
 8001b7a:	2002      	movs	r0, #2
}
 8001b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Channel == DAC_CHANNEL_1)
 8001b7e:	b925      	cbnz	r5, 8001b8a <HAL_DAC_ConfigChannel+0x9e>
 8001b80:	e045      	b.n	8001c0e <HAL_DAC_ConfigChannel+0x122>
        if((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001b82:	f7ff f9e1 	bl	8000f48 <HAL_GetTick>
 8001b86:	2801      	cmp	r0, #1
 8001b88:	d837      	bhi.n	8001bfa <HAL_DAC_ConfigChannel+0x10e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001b8a:	6823      	ldr	r3, [r4, #0]
 8001b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	dbf7      	blt.n	8001b82 <HAL_DAC_ConfigChannel+0x96>
      HAL_Delay(1);
 8001b92:	2001      	movs	r0, #1
 8001b94:	f7ff f9de 	bl	8000f54 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001b98:	6823      	ldr	r3, [r4, #0]
 8001b9a:	69f2      	ldr	r2, [r6, #28]
 8001b9c:	645a      	str	r2, [r3, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001b9e:	f005 0510 	and.w	r5, r5, #16
 8001ba2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001ba4:	6a32      	ldr	r2, [r6, #32]
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001ba6:	6a70      	ldr	r0, [r6, #36]	; 0x24
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001ba8:	f240 37ff 	movw	r7, #1023	; 0x3ff
 8001bac:	40af      	lsls	r7, r5
 8001bae:	ea21 0107 	bic.w	r1, r1, r7
 8001bb2:	40aa      	lsls	r2, r5
 8001bb4:	4311      	orrs	r1, r2
 8001bb6:	6499      	str	r1, [r3, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001bb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bba:	6877      	ldr	r7, [r6, #4]
 8001bbc:	21ff      	movs	r1, #255	; 0xff
 8001bbe:	40a9      	lsls	r1, r5
 8001bc0:	ea22 0201 	bic.w	r2, r2, r1
 8001bc4:	fa00 f105 	lsl.w	r1, r0, r5
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	64da      	str	r2, [r3, #76]	; 0x4c
 8001bcc:	e79f      	b.n	8001b0e <HAL_DAC_ConfigChannel+0x22>
    tmpreg1 |= DAC_CR_HFSEL;
 8001bce:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
 8001bd2:	e7c4      	b.n	8001b5e <HAL_DAC_ConfigChannel+0x72>
  tmpreg1 = hdac->Instance->CCR;
 8001bd4:	6b99      	ldr	r1, [r3, #56]	; 0x38
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001bd6:	69b2      	ldr	r2, [r6, #24]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001bd8:	201f      	movs	r0, #31
 8001bda:	40a8      	lsls	r0, r5
 8001bdc:	ea21 0100 	bic.w	r1, r1, r0
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001be0:	40aa      	lsls	r2, r5
 8001be2:	430a      	orrs	r2, r1
  hdac->Instance->CCR = tmpreg1;
 8001be4:	639a      	str	r2, [r3, #56]	; 0x38
 8001be6:	e795      	b.n	8001b14 <HAL_DAC_ConfigChannel+0x28>
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8001be8:	f002 fee2 	bl	80049b0 <HAL_RCC_GetHCLKFreq>
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001bec:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <HAL_DAC_ConfigChannel+0x14c>)
 8001bee:	4298      	cmp	r0, r3
 8001bf0:	d90b      	bls.n	8001c0a <HAL_DAC_ConfigChannel+0x11e>
         tmpreg1 |= DAC_CR_HFSEL;
 8001bf2:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
 8001bf6:	6823      	ldr	r3, [r4, #0]
 8001bf8:	e7b1      	b.n	8001b5e <HAL_DAC_ConfigChannel+0x72>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001bfa:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001bfc:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001bfe:	f043 0308 	orr.w	r3, r3, #8
 8001c02:	6123      	str	r3, [r4, #16]
          return HAL_TIMEOUT;
 8001c04:	4610      	mov	r0, r2
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001c06:	7122      	strb	r2, [r4, #4]
          return HAL_TIMEOUT;
 8001c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c0a:	6823      	ldr	r3, [r4, #0]
 8001c0c:	e7a5      	b.n	8001b5a <HAL_DAC_ConfigChannel+0x6e>
      tickstart = HAL_GetTick();
 8001c0e:	f7ff f99b 	bl	8000f48 <HAL_GetTick>
 8001c12:	4607      	mov	r7, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001c14:	e004      	b.n	8001c20 <HAL_DAC_ConfigChannel+0x134>
        if((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001c16:	f7ff f997 	bl	8000f48 <HAL_GetTick>
 8001c1a:	1bc0      	subs	r0, r0, r7
 8001c1c:	2801      	cmp	r0, #1
 8001c1e:	d8ec      	bhi.n	8001bfa <HAL_DAC_ConfigChannel+0x10e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001c20:	6823      	ldr	r3, [r4, #0]
 8001c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c24:	041b      	lsls	r3, r3, #16
 8001c26:	d4f6      	bmi.n	8001c16 <HAL_DAC_ConfigChannel+0x12a>
      HAL_Delay(1);
 8001c28:	2001      	movs	r0, #1
 8001c2a:	f7ff f993 	bl	8000f54 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001c2e:	6823      	ldr	r3, [r4, #0]
 8001c30:	69f2      	ldr	r2, [r6, #28]
 8001c32:	641a      	str	r2, [r3, #64]	; 0x40
 8001c34:	e7b3      	b.n	8001b9e <HAL_DAC_ConfigChannel+0xb2>
 8001c36:	bf00      	nop
 8001c38:	04c4b400 	.word	0x04c4b400

08001c3c <HAL_DACEx_ConvCpltCallbackCh2>:
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop

08001c40 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop

08001c44 <HAL_DACEx_ErrorCallbackCh2>:
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop

08001c48 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop

08001c4c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001c4c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c4e:	6a84      	ldr	r4, [r0, #40]	; 0x28

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001c50:	4620      	mov	r0, r4
 8001c52:	f7ff fff3 	bl	8001c3c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State= HAL_DAC_STATE_READY;
 8001c56:	2301      	movs	r3, #1
 8001c58:	7123      	strb	r3, [r4, #4]
 8001c5a:	bd10      	pop	{r4, pc}

08001c5c <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001c5c:	b508      	push	{r3, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001c5e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001c60:	f7ff ffee 	bl	8001c40 <HAL_DACEx_ConvHalfCpltCallbackCh2>
 8001c64:	bd08      	pop	{r3, pc}
 8001c66:	bf00      	nop

08001c68 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001c68:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c6a:	6a84      	ldr	r4, [r0, #40]	; 0x28

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001c6c:	6923      	ldr	r3, [r4, #16]
 8001c6e:	f043 0304 	orr.w	r3, r3, #4
 8001c72:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001c74:	4620      	mov	r0, r4
 8001c76:	f7ff ffe5 	bl	8001c44 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State= HAL_DAC_STATE_READY;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	7123      	strb	r3, [r4, #4]
 8001c7e:	bd10      	pop	{r4, pc}

08001c80 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001c80:	2800      	cmp	r0, #0
 8001c82:	d07d      	beq.n	8001d80 <HAL_DMA_Init+0x100>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001c84:	6801      	ldr	r1, [r0, #0]
 8001c86:	4a3f      	ldr	r2, [pc, #252]	; (8001d84 <HAL_DMA_Init+0x104>)
 8001c88:	4291      	cmp	r1, r2
{
 8001c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c8e:	4603      	mov	r3, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001c90:	d963      	bls.n	8001d5a <HAL_DMA_Init+0xda>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001c92:	4f3d      	ldr	r7, [pc, #244]	; (8001d88 <HAL_DMA_Init+0x108>)
 8001c94:	4a3d      	ldr	r2, [pc, #244]	; (8001d8c <HAL_DMA_Init+0x10c>)
    hdma->DmaBaseAddress = DMA2;
 8001c96:	483e      	ldr	r0, [pc, #248]	; (8001d90 <HAL_DMA_Init+0x110>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001c98:	440f      	add	r7, r1
 8001c9a:	fba2 2707 	umull	r2, r7, r2, r7
 8001c9e:	093f      	lsrs	r7, r7, #4
 8001ca0:	00bf      	lsls	r7, r7, #2
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ca2:	f103 020c 	add.w	r2, r3, #12
 8001ca6:	ca34      	ldmia	r2, {r2, r4, r5}
  tmp |=  hdma->Init.Direction        |
 8001ca8:	689e      	ldr	r6, [r3, #8]
 8001caa:	6418      	str	r0, [r3, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cac:	f04f 0e02 	mov.w	lr, #2
  tmp |=  hdma->Init.Direction        |
 8001cb0:	4332      	orrs	r2, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cb2:	6998      	ldr	r0, [r3, #24]
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cb4:	f883 e025 	strb.w	lr, [r3, #37]	; 0x25
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cb8:	4322      	orrs	r2, r4
  else
  {
    /* DMA2 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
  }
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001cba:	fa5f fe81 	uxtb.w	lr, r1
 8001cbe:	4c33      	ldr	r4, [pc, #204]	; (8001d8c <HAL_DMA_Init+0x10c>)
  tmp = hdma->Instance->CCR;
 8001cc0:	f8d1 8000 	ldr.w	r8, [r1]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001cc4:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 8001d84 <HAL_DMA_Init+0x104>
 8001cc8:	645f      	str	r7, [r3, #68]	; 0x44
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cca:	432a      	orrs	r2, r5
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001ccc:	f1ae 0508 	sub.w	r5, lr, #8
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cd0:	4302      	orrs	r2, r0
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001cd2:	fba4 0505 	umull	r0, r5, r4, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cd6:	69d8      	ldr	r0, [r3, #28]
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cd8:	6a1c      	ldr	r4, [r3, #32]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001cda:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 8001dac <HAL_DMA_Init+0x12c>
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cde:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ce0:	4322      	orrs	r2, r4
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001ce2:	4c2c      	ldr	r4, [pc, #176]	; (8001d94 <HAL_DMA_Init+0x114>)
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001ce4:	0928      	lsrs	r0, r5, #4
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001ce6:	f428 48ff 	bic.w	r8, r8, #32640	; 0x7f80
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001cea:	4561      	cmp	r1, ip
 8001cec:	bf98      	it	ls
 8001cee:	46a6      	movls	lr, r4
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_ChannelBase + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001cf0:	08bf      	lsrs	r7, r7, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001cf2:	f028 0870 	bic.w	r8, r8, #112	; 0x70
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001cf6:	f000 001c 	and.w	r0, r0, #28
 8001cfa:	2401      	movs	r4, #1
  tmp |=  hdma->Init.Direction        |
 8001cfc:	ea42 0208 	orr.w	r2, r2, r8
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001d00:	fa04 f000 	lsl.w	r0, r4, r0
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_ChannelBase + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001d04:	eb0e 0c87 	add.w	ip, lr, r7, lsl #2
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001d08:	4d23      	ldr	r5, [pc, #140]	; (8001d98 <HAL_DMA_Init+0x118>)
  hdma->Instance->CCR = tmp;
 8001d0a:	600a      	str	r2, [r1, #0]
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d0c:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001d10:	6518      	str	r0, [r3, #80]	; 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_ChannelBase + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001d12:	f8c3 c048 	str.w	ip, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001d16:	64dd      	str	r5, [r3, #76]	; 0x4c
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d18:	d028      	beq.n	8001d6c <HAL_DMA_Init+0xec>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d1a:	6859      	ldr	r1, [r3, #4]
 8001d1c:	b2ca      	uxtb	r2, r1
  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001d1e:	3901      	subs	r1, #1
 8001d20:	2903      	cmp	r1, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d22:	f84e 2027 	str.w	r2, [lr, r7, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d26:	6068      	str	r0, [r5, #4]
  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001d28:	d825      	bhi.n	8001d76 <HAL_DMA_Init+0xf6>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d2a:	491c      	ldr	r1, [pc, #112]	; (8001d9c <HAL_DMA_Init+0x11c>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001d2c:	481c      	ldr	r0, [pc, #112]	; (8001da0 <HAL_DMA_Init+0x120>)
 8001d2e:	6598      	str	r0, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d30:	4411      	add	r1, r2

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001d32:	3a01      	subs	r2, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d34:	0089      	lsls	r1, r1, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001d36:	f002 0203 	and.w	r2, r2, #3
 8001d3a:	fa04 f202 	lsl.w	r2, r4, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d3e:	2400      	movs	r4, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d40:	6559      	str	r1, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001d42:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d44:	600c      	str	r4, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d46:	6042      	str	r2, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d48:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8001d4a:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d4c:	63d8      	str	r0, [r3, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8001d4e:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8001d52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return HAL_OK;
 8001d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d5a:	4f12      	ldr	r7, [pc, #72]	; (8001da4 <HAL_DMA_Init+0x124>)
 8001d5c:	4a0b      	ldr	r2, [pc, #44]	; (8001d8c <HAL_DMA_Init+0x10c>)
    hdma->DmaBaseAddress = DMA1;
 8001d5e:	4812      	ldr	r0, [pc, #72]	; (8001da8 <HAL_DMA_Init+0x128>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d60:	440f      	add	r7, r1
 8001d62:	fba2 2707 	umull	r2, r7, r2, r7
 8001d66:	093f      	lsrs	r7, r7, #4
 8001d68:	00bf      	lsls	r7, r7, #2
 8001d6a:	e79a      	b.n	8001ca2 <HAL_DMA_Init+0x22>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	605a      	str	r2, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d70:	f84e 2027 	str.w	r2, [lr, r7, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d74:	6068      	str	r0, [r5, #4]
    hdma->DMAmuxRequestGen = 0U;
 8001d76:	2200      	movs	r2, #0
 8001d78:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001d7a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d7c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d7e:	e7e3      	b.n	8001d48 <HAL_DMA_Init+0xc8>
    return HAL_ERROR;
 8001d80:	2001      	movs	r0, #1
 8001d82:	4770      	bx	lr
 8001d84:	40020407 	.word	0x40020407
 8001d88:	bffdfbf8 	.word	0xbffdfbf8
 8001d8c:	cccccccd 	.word	0xcccccccd
 8001d90:	40020400 	.word	0x40020400
 8001d94:	40020800 	.word	0x40020800
 8001d98:	40020880 	.word	0x40020880
 8001d9c:	1000823f 	.word	0x1000823f
 8001da0:	40020940 	.word	0x40020940
 8001da4:	bffdfff8 	.word	0xbffdfff8
 8001da8:	40020000 	.word	0x40020000
 8001dac:	4002081c 	.word	0x4002081c

08001db0 <HAL_DMA_Start_IT>:
{
 8001db0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8001db2:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8001db6:	2c01      	cmp	r4, #1
 8001db8:	d00b      	beq.n	8001dd2 <HAL_DMA_Start_IT+0x22>
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dba:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 8001dbe:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dc0:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 8001dc2:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dc6:	d006      	beq.n	8001dd6 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    status = HAL_BUSY;
 8001dce:	2002      	movs	r0, #2
 8001dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 8001dd2:	2002      	movs	r0, #2
}
 8001dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE(hdma);
 8001dd6:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001dd8:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
 8001dda:	f8d0 e050 	ldr.w	lr, [r0, #80]	; 0x50
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dde:	2602      	movs	r6, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001de0:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8001de2:	f880 6025 	strb.w	r6, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001de6:	63c5      	str	r5, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001de8:	6826      	ldr	r6, [r4, #0]
  if(hdma->DMAmuxRequestGen != 0U)
 8001dea:	6d45      	ldr	r5, [r0, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8001dec:	f026 0601 	bic.w	r6, r6, #1
 8001df0:	6026      	str	r6, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001df2:	f8c7 e004 	str.w	lr, [r7, #4]
  if(hdma->DMAmuxRequestGen != 0U)
 8001df6:	b115      	cbz	r5, 8001dfe <HAL_DMA_Start_IT+0x4e>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001df8:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8001dfa:	6dc7      	ldr	r7, [r0, #92]	; 0x5c
 8001dfc:	6077      	str	r7, [r6, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001dfe:	6c46      	ldr	r6, [r0, #68]	; 0x44
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e00:	6887      	ldr	r7, [r0, #8]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e02:	f006 0e1c 	and.w	lr, r6, #28
 8001e06:	2601      	movs	r6, #1
 8001e08:	fa06 fe0e 	lsl.w	lr, r6, lr
 8001e0c:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8001e0e:	f8c6 e004 	str.w	lr, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8001e12:	6063      	str	r3, [r4, #4]
    if(NULL != hdma->XferHalfCpltCallback )
 8001e14:	6b03      	ldr	r3, [r0, #48]	; 0x30
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e16:	2f10      	cmp	r7, #16
    hdma->Instance->CPAR = DstAddress;
 8001e18:	bf0b      	itete	eq
 8001e1a:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8001e1c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001e1e:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8001e20:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001e22:	b1bb      	cbz	r3, 8001e54 <HAL_DMA_Start_IT+0xa4>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e24:	6823      	ldr	r3, [r4, #0]
 8001e26:	f043 030e 	orr.w	r3, r3, #14
 8001e2a:	6023      	str	r3, [r4, #0]
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001e2c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	03d2      	lsls	r2, r2, #15
 8001e32:	d40a      	bmi.n	8001e4a <HAL_DMA_Start_IT+0x9a>
    if(hdma->DMAmuxRequestGen != 0U)
 8001e34:	b11d      	cbz	r5, 8001e3e <HAL_DMA_Start_IT+0x8e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001e36:	682b      	ldr	r3, [r5, #0]
 8001e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e3c:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8001e3e:	6823      	ldr	r3, [r4, #0]
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e46:	2000      	movs	r0, #0
 8001e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	e7ef      	b.n	8001e34 <HAL_DMA_Start_IT+0x84>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e54:	6823      	ldr	r3, [r4, #0]
 8001e56:	f023 0304 	bic.w	r3, r3, #4
 8001e5a:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e5c:	6823      	ldr	r3, [r4, #0]
 8001e5e:	f043 030a 	orr.w	r3, r3, #10
 8001e62:	6023      	str	r3, [r4, #0]
 8001e64:	e7e2      	b.n	8001e2c <HAL_DMA_Start_IT+0x7c>
 8001e66:	bf00      	nop

08001e68 <HAL_DMA_Abort>:
  if(NULL == hdma)
 8001e68:	2800      	cmp	r0, #0
 8001e6a:	d02a      	beq.n	8001ec2 <HAL_DMA_Abort+0x5a>
  __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e6c:	6803      	ldr	r3, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e6e:	6c42      	ldr	r2, [r0, #68]	; 0x44
  __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e70:	6819      	ldr	r1, [r3, #0]
{
 8001e72:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e74:	f021 010e 	bic.w	r1, r1, #14
  hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e78:	6c87      	ldr	r7, [r0, #72]	; 0x48
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e7a:	6c06      	ldr	r6, [r0, #64]	; 0x40
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e7c:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
  if(hdma->DMAmuxRequestGen != 0U)
 8001e7e:	6d44      	ldr	r4, [r0, #84]	; 0x54
  __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e80:	6019      	str	r1, [r3, #0]
  hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e82:	6839      	ldr	r1, [r7, #0]
 8001e84:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001e88:	6039      	str	r1, [r7, #0]
  __HAL_DMA_DISABLE(hdma);
 8001e8a:	6819      	ldr	r1, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e8c:	6d07      	ldr	r7, [r0, #80]	; 0x50
  __HAL_DMA_DISABLE(hdma);
 8001e8e:	f021 0101 	bic.w	r1, r1, #1
 8001e92:	6019      	str	r1, [r3, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e94:	f002 021c 	and.w	r2, r2, #28
 8001e98:	2301      	movs	r3, #1
 8001e9a:	4093      	lsls	r3, r2
 8001e9c:	6073      	str	r3, [r6, #4]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e9e:	606f      	str	r7, [r5, #4]
  if(hdma->DMAmuxRequestGen != 0U)
 8001ea0:	b134      	cbz	r4, 8001eb0 <HAL_DMA_Abort+0x48>
    hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ea2:	6823      	ldr	r3, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ea4:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8001ea6:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001eac:	6023      	str	r3, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001eae:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hdma);
 8001eb0:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8001eb8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8001ebc:	bcf0      	pop	{r4, r5, r6, r7}
  return status;
 8001ebe:	4618      	mov	r0, r3
}
 8001ec0:	4770      	bx	lr
    return HAL_ERROR;
 8001ec2:	2001      	movs	r0, #1
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop

08001ec8 <HAL_DMA_Abort_IT>:
{
 8001ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001eca:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d003      	beq.n	8001eda <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eda:	6803      	ldr	r3, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001edc:	6c87      	ldr	r7, [r0, #72]	; 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ede:	6819      	ldr	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001ee0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001ee2:	6c06      	ldr	r6, [r0, #64]	; 0x40
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ee4:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
    if(hdma->DMAmuxRequestGen != 0U)
 8001ee6:	6d44      	ldr	r4, [r0, #84]	; 0x54
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ee8:	f021 010e 	bic.w	r1, r1, #14
 8001eec:	6019      	str	r1, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001eee:	6819      	ldr	r1, [r3, #0]
 8001ef0:	f021 0101 	bic.w	r1, r1, #1
 8001ef4:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ef6:	683b      	ldr	r3, [r7, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ef8:	6d01      	ldr	r1, [r0, #80]	; 0x50
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001efa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001efe:	603b      	str	r3, [r7, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001f00:	f002 021c 	and.w	r2, r2, #28
 8001f04:	2301      	movs	r3, #1
 8001f06:	4093      	lsls	r3, r2
 8001f08:	6073      	str	r3, [r6, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f0a:	6069      	str	r1, [r5, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8001f0c:	b134      	cbz	r4, 8001f1c <HAL_DMA_Abort_IT+0x54>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f0e:	6823      	ldr	r3, [r4, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f10:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8001f12:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f18:	6023      	str	r3, [r4, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f1a:	6051      	str	r1, [r2, #4]
    if(hdma->XferAbortCallback != NULL)
 8001f1c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001f1e:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 8001f20:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8001f22:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001f26:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8001f2a:	b113      	cbz	r3, 8001f32 <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 8001f2c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001f2e:	4620      	mov	r0, r4
 8001f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f32:	4618      	mov	r0, r3
}
 8001f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f36:	bf00      	nop

08001f38 <HAL_DMA_IRQHandler>:
{
 8001f38:	b4f0      	push	{r4, r5, r6, r7}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001f3a:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f3c:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8001f3e:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f40:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001f42:	682c      	ldr	r4, [r5, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001f44:	2204      	movs	r2, #4
 8001f46:	f003 031c 	and.w	r3, r3, #28
 8001f4a:	409a      	lsls	r2, r3
 8001f4c:	4211      	tst	r1, r2
 8001f4e:	d00d      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x34>
 8001f50:	0767      	lsls	r7, r4, #29
 8001f52:	d50b      	bpl.n	8001f6c <HAL_DMA_IRQHandler+0x34>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f54:	682b      	ldr	r3, [r5, #0]
 8001f56:	069b      	lsls	r3, r3, #26
 8001f58:	d403      	bmi.n	8001f62 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f5a:	682b      	ldr	r3, [r5, #0]
 8001f5c:	f023 0304 	bic.w	r3, r3, #4
 8001f60:	602b      	str	r3, [r5, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8001f62:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001f64:	6072      	str	r2, [r6, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8001f66:	b1c3      	cbz	r3, 8001f9a <HAL_DMA_IRQHandler+0x62>
}
 8001f68:	bcf0      	pop	{r4, r5, r6, r7}
      hdma->XferErrorCallback(hdma);
 8001f6a:	4718      	bx	r3
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	409a      	lsls	r2, r3
 8001f70:	4211      	tst	r1, r2
 8001f72:	d014      	beq.n	8001f9e <HAL_DMA_IRQHandler+0x66>
 8001f74:	07a7      	lsls	r7, r4, #30
 8001f76:	d512      	bpl.n	8001f9e <HAL_DMA_IRQHandler+0x66>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f78:	682b      	ldr	r3, [r5, #0]
 8001f7a:	0699      	lsls	r1, r3, #26
 8001f7c:	d406      	bmi.n	8001f8c <HAL_DMA_IRQHandler+0x54>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001f7e:	682b      	ldr	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001f80:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001f82:	f023 030a 	bic.w	r3, r3, #10
 8001f86:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001f88:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    if(hdma->XferCpltCallback != NULL)
 8001f8c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001f8e:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8001f90:	2200      	movs	r2, #0
 8001f92:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1e6      	bne.n	8001f68 <HAL_DMA_IRQHandler+0x30>
}
 8001f9a:	bcf0      	pop	{r4, r5, r6, r7}
 8001f9c:	4770      	bx	lr
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001f9e:	2208      	movs	r2, #8
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	420a      	tst	r2, r1
 8001fa4:	d0f9      	beq.n	8001f9a <HAL_DMA_IRQHandler+0x62>
 8001fa6:	0722      	lsls	r2, r4, #28
 8001fa8:	d5f7      	bpl.n	8001f9a <HAL_DMA_IRQHandler+0x62>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001faa:	6829      	ldr	r1, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8001fac:	6b44      	ldr	r4, [r0, #52]	; 0x34
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001fae:	2201      	movs	r2, #1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fb0:	f021 010e 	bic.w	r1, r1, #14
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 8001fb8:	2700      	movs	r7, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fba:	6029      	str	r1, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001fbc:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001fbe:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8001fc0:	f880 7024 	strb.w	r7, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8001fc4:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 8001fc8:	2c00      	cmp	r4, #0
 8001fca:	d0e6      	beq.n	8001f9a <HAL_DMA_IRQHandler+0x62>
      hdma->XferErrorCallback(hdma);
 8001fcc:	4623      	mov	r3, r4
}
 8001fce:	bcf0      	pop	{r4, r5, r6, r7}
      hdma->XferErrorCallback(hdma);
 8001fd0:	4718      	bx	r3
 8001fd2:	bf00      	nop

08001fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd4:	468c      	mov	ip, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fd6:	6809      	ldr	r1, [r1, #0]
 8001fd8:	2900      	cmp	r1, #0
 8001fda:	f000 80fe 	beq.w	80021da <HAL_GPIO_Init+0x206>
{
 8001fde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe2:	f8df 8214 	ldr.w	r8, [pc, #532]	; 80021f8 <HAL_GPIO_Init+0x224>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001fe6:	f8df e214 	ldr.w	lr, [pc, #532]	; 80021fc <HAL_GPIO_Init+0x228>
{
 8001fea:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fec:	2500      	movs	r5, #0
 8001fee:	e088      	b.n	8002102 <HAL_GPIO_Init+0x12e>
 8001ff0:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ff4:	2203      	movs	r2, #3
      temp = GPIOx->MODER;
 8001ff6:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ffa:	fa02 f209 	lsl.w	r2, r2, r9
 8001ffe:	43d2      	mvns	r2, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002000:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002004:	ea0b 0b02 	and.w	fp, fp, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002008:	fa06 f609 	lsl.w	r6, r6, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800200c:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002010:	ea46 060b 	orr.w	r6, r6, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002014:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8002018:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800201a:	f240 80a7 	bls.w	800216c <HAL_GPIO_Init+0x198>
      temp = GPIOx->PUPDR;
 800201e:	68c6      	ldr	r6, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002020:	f8dc 3008 	ldr.w	r3, [ip, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002024:	4032      	ands	r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002026:	fa03 f309 	lsl.w	r3, r3, r9
 800202a:	4313      	orrs	r3, r2
      GPIOx->PUPDR = temp;
 800202c:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800202e:	00e3      	lsls	r3, r4, #3
 8002030:	d563      	bpl.n	80020fa <HAL_GPIO_Init+0x126>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002032:	f8d8 3060 	ldr.w	r3, [r8, #96]	; 0x60
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	f8c8 3060 	str.w	r3, [r8, #96]	; 0x60
 800203e:	f8d8 3060 	ldr.w	r3, [r8, #96]	; 0x60
 8002042:	f025 0603 	bic.w	r6, r5, #3
 8002046:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8002052:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002054:	f005 0303 	and.w	r3, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002058:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800205a:	f8d6 9008 	ldr.w	r9, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	220f      	movs	r2, #15
 8002062:	409a      	lsls	r2, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002064:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002068:	ea29 0a02 	bic.w	sl, r9, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800206c:	f000 8095 	beq.w	800219a <HAL_GPIO_Init+0x1c6>
 8002070:	4a5a      	ldr	r2, [pc, #360]	; (80021dc <HAL_GPIO_Init+0x208>)
 8002072:	4290      	cmp	r0, r2
 8002074:	f000 8093 	beq.w	800219e <HAL_GPIO_Init+0x1ca>
 8002078:	4a59      	ldr	r2, [pc, #356]	; (80021e0 <HAL_GPIO_Init+0x20c>)
 800207a:	4290      	cmp	r0, r2
 800207c:	f000 8094 	beq.w	80021a8 <HAL_GPIO_Init+0x1d4>
 8002080:	4a58      	ldr	r2, [pc, #352]	; (80021e4 <HAL_GPIO_Init+0x210>)
 8002082:	4290      	cmp	r0, r2
 8002084:	f000 8095 	beq.w	80021b2 <HAL_GPIO_Init+0x1de>
 8002088:	4a57      	ldr	r2, [pc, #348]	; (80021e8 <HAL_GPIO_Init+0x214>)
 800208a:	4290      	cmp	r0, r2
 800208c:	f000 8096 	beq.w	80021bc <HAL_GPIO_Init+0x1e8>
 8002090:	4a56      	ldr	r2, [pc, #344]	; (80021ec <HAL_GPIO_Init+0x218>)
 8002092:	4290      	cmp	r0, r2
 8002094:	f000 8097 	beq.w	80021c6 <HAL_GPIO_Init+0x1f2>
 8002098:	4a55      	ldr	r2, [pc, #340]	; (80021f0 <HAL_GPIO_Init+0x21c>)
 800209a:	4290      	cmp	r0, r2
 800209c:	f000 8098 	beq.w	80021d0 <HAL_GPIO_Init+0x1fc>
 80020a0:	4a54      	ldr	r2, [pc, #336]	; (80021f4 <HAL_GPIO_Init+0x220>)
 80020a2:	4290      	cmp	r0, r2
 80020a4:	bf0c      	ite	eq
 80020a6:	f04f 0907 	moveq.w	r9, #7
 80020aa:	f04f 0908 	movne.w	r9, #8
 80020ae:	fa09 f303 	lsl.w	r3, r9, r3
 80020b2:	ea43 030a 	orr.w	r3, r3, sl
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020b6:	60b3      	str	r3, [r6, #8]
        temp = EXTI->IMR1;
 80020b8:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~(iocurrent);
 80020bc:	43fa      	mvns	r2, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020be:	03e6      	lsls	r6, r4, #15
        temp &= ~(iocurrent);
 80020c0:	bf54      	ite	pl
 80020c2:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80020c4:	433b      	orrmi	r3, r7
        }
        EXTI->IMR1 = temp;
 80020c6:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR1;
 80020ca:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020ce:	03a6      	lsls	r6, r4, #14
        temp &= ~(iocurrent);
 80020d0:	bf54      	ite	pl
 80020d2:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80020d4:	433b      	orrmi	r3, r7
        }
        EXTI->EMR1 = temp;
 80020d6:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020da:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020de:	02e6      	lsls	r6, r4, #11
        temp &= ~(iocurrent);
 80020e0:	bf54      	ite	pl
 80020e2:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80020e4:	433b      	orrmi	r3, r7
        }
        EXTI->RTSR1 = temp;
 80020e6:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR1;
 80020ea:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020ee:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 80020f0:	bf54      	ite	pl
 80020f2:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80020f4:	433b      	orrmi	r3, r7
        }
        EXTI->FTSR1 = temp;
 80020f6:	f8ce 300c 	str.w	r3, [lr, #12]
      }
    }

    position++;
 80020fa:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020fc:	fa31 f305 	lsrs.w	r3, r1, r5
 8002100:	d048      	beq.n	8002194 <HAL_GPIO_Init+0x1c0>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002102:	2301      	movs	r3, #1
 8002104:	40ab      	lsls	r3, r5
    if (iocurrent != 0x00u)
 8002106:	ea13 0701 	ands.w	r7, r3, r1
 800210a:	d0f6      	beq.n	80020fa <HAL_GPIO_Init+0x126>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800210c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8002110:	f024 0a10 	bic.w	sl, r4, #16
 8002114:	f1ba 0f02 	cmp.w	sl, #2
 8002118:	f47f af6a 	bne.w	8001ff0 <HAL_GPIO_Init+0x1c>
        temp = GPIOx->AFR[position >> 3u];
 800211c:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 8002120:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002124:	f005 0207 	and.w	r2, r5, #7
        temp = GPIOx->AFR[position >> 3u];
 8002128:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800212c:	0092      	lsls	r2, r2, #2
 800212e:	f04f 0b0f 	mov.w	fp, #15
 8002132:	fa0b fb02 	lsl.w	fp, fp, r2
 8002136:	ea26 0a0b 	bic.w	sl, r6, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800213a:	f8dc 6010 	ldr.w	r6, [ip, #16]
 800213e:	fa06 f202 	lsl.w	r2, r6, r2
 8002142:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->AFR[position >> 3u] = temp;
 8002146:	f8c9 2020 	str.w	r2, [r9, #32]
 800214a:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800214e:	2203      	movs	r2, #3
      temp = GPIOx->MODER;
 8002150:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002154:	fa02 f209 	lsl.w	r2, r2, r9
 8002158:	43d2      	mvns	r2, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800215a:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800215e:	ea02 0a0a 	and.w	sl, r2, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002162:	fa06 f609 	lsl.w	r6, r6, r9
 8002166:	ea46 060a 	orr.w	r6, r6, sl
      GPIOx->MODER = temp;
 800216a:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR;
 800216c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800216e:	ea06 0a02 	and.w	sl, r6, r2
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002172:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8002176:	fa06 f609 	lsl.w	r6, r6, r9
 800217a:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 800217e:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8002180:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002184:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002188:	ea2a 0303 	bic.w	r3, sl, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800218c:	40ae      	lsls	r6, r5
 800218e:	431e      	orrs	r6, r3
        GPIOx->OTYPER = temp;
 8002190:	6046      	str	r6, [r0, #4]
 8002192:	e744      	b.n	800201e <HAL_GPIO_Init+0x4a>
  }
}
 8002194:	b003      	add	sp, #12
 8002196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800219a:	2300      	movs	r3, #0
 800219c:	e789      	b.n	80020b2 <HAL_GPIO_Init+0xde>
 800219e:	f04f 0901 	mov.w	r9, #1
 80021a2:	fa09 f303 	lsl.w	r3, r9, r3
 80021a6:	e784      	b.n	80020b2 <HAL_GPIO_Init+0xde>
 80021a8:	f04f 0902 	mov.w	r9, #2
 80021ac:	fa09 f303 	lsl.w	r3, r9, r3
 80021b0:	e77f      	b.n	80020b2 <HAL_GPIO_Init+0xde>
 80021b2:	f04f 0903 	mov.w	r9, #3
 80021b6:	fa09 f303 	lsl.w	r3, r9, r3
 80021ba:	e77a      	b.n	80020b2 <HAL_GPIO_Init+0xde>
 80021bc:	f04f 0904 	mov.w	r9, #4
 80021c0:	fa09 f303 	lsl.w	r3, r9, r3
 80021c4:	e775      	b.n	80020b2 <HAL_GPIO_Init+0xde>
 80021c6:	f04f 0905 	mov.w	r9, #5
 80021ca:	fa09 f303 	lsl.w	r3, r9, r3
 80021ce:	e770      	b.n	80020b2 <HAL_GPIO_Init+0xde>
 80021d0:	f04f 0906 	mov.w	r9, #6
 80021d4:	fa09 f303 	lsl.w	r3, r9, r3
 80021d8:	e76b      	b.n	80020b2 <HAL_GPIO_Init+0xde>
 80021da:	4770      	bx	lr
 80021dc:	48000400 	.word	0x48000400
 80021e0:	48000800 	.word	0x48000800
 80021e4:	48000c00 	.word	0x48000c00
 80021e8:	48001000 	.word	0x48001000
 80021ec:	48001400 	.word	0x48001400
 80021f0:	48001800 	.word	0x48001800
 80021f4:	48001c00 	.word	0x48001c00
 80021f8:	40021000 	.word	0x40021000
 80021fc:	40010400 	.word	0x40010400

08002200 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002200:	6903      	ldr	r3, [r0, #16]
 8002202:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002204:	bf14      	ite	ne
 8002206:	2001      	movne	r0, #1
 8002208:	2000      	moveq	r0, #0
 800220a:	4770      	bx	lr

0800220c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800220c:	b90a      	cbnz	r2, 8002212 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800220e:	6281      	str	r1, [r0, #40]	; 0x28
 8002210:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002212:	6181      	str	r1, [r0, #24]
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop

08002218 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002218:	4a04      	ldr	r2, [pc, #16]	; (800222c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800221a:	6951      	ldr	r1, [r2, #20]
 800221c:	4201      	tst	r1, r0
 800221e:	d100      	bne.n	8002222 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002220:	4770      	bx	lr
{
 8002222:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002224:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002226:	f00e fc51 	bl	8010acc <HAL_GPIO_EXTI_Callback>
 800222a:	bd08      	pop	{r3, pc}
 800222c:	40010400 	.word	0x40010400

08002230 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002230:	b570      	push	{r4, r5, r6, lr}
 8002232:	4604      	mov	r4, r0
 8002234:	4616      	mov	r6, r2
 8002236:	460d      	mov	r5, r1
 8002238:	b941      	cbnz	r1, 800224c <I2C_WaitOnRXNEFlagUntilTimeout+0x1c>
 800223a:	e041      	b.n	80022c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x90>
    {
      return HAL_ERROR;
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800223c:	699a      	ldr	r2, [r3, #24]
 800223e:	0691      	lsls	r1, r2, #26
 8002240:	d457      	bmi.n	80022f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
        return HAL_ERROR;
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002242:	f7fe fe81 	bl	8000f48 <HAL_GetTick>
 8002246:	1b80      	subs	r0, r0, r6
 8002248:	4285      	cmp	r5, r0
 800224a:	d345      	bcc.n	80022d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800224c:	6823      	ldr	r3, [r4, #0]
 800224e:	699a      	ldr	r2, [r3, #24]
 8002250:	0752      	lsls	r2, r2, #29
 8002252:	d44c      	bmi.n	80022ee <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002254:	699a      	ldr	r2, [r3, #24]
 8002256:	06d0      	lsls	r0, r2, #27
 8002258:	d5f0      	bpl.n	800223c <I2C_WaitOnRXNEFlagUntilTimeout+0xc>
 800225a:	1c68      	adds	r0, r5, #1
 800225c:	d124      	bne.n	80022a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x78>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800225e:	699a      	ldr	r2, [r3, #24]
 8002260:	0691      	lsls	r1, r2, #26
 8002262:	d5fc      	bpl.n	800225e <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002264:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002266:	2110      	movs	r1, #16
 8002268:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800226a:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800226c:	699a      	ldr	r2, [r3, #24]
 800226e:	0796      	lsls	r6, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8002270:	bf44      	itt	mi
 8002272:	2200      	movmi	r2, #0
 8002274:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002276:	699a      	ldr	r2, [r3, #24]
 8002278:	07d5      	lsls	r5, r2, #31
 800227a:	d403      	bmi.n	8002284 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800227c:	699a      	ldr	r2, [r3, #24]
 800227e:	f042 0201 	orr.w	r2, r2, #1
 8002282:	619a      	str	r2, [r3, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	4928      	ldr	r1, [pc, #160]	; (8002328 <I2C_WaitOnRXNEFlagUntilTimeout+0xf8>)
 8002288:	400a      	ands	r2, r1
 800228a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800228c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800228e:	2120      	movs	r1, #32
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002290:	f043 0304 	orr.w	r3, r3, #4
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002294:	2200      	movs	r2, #0
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002296:	6463      	str	r3, [r4, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002298:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800229c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      return HAL_ERROR;
 80022a0:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a2:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80022a6:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022a8:	699a      	ldr	r2, [r3, #24]
 80022aa:	0692      	lsls	r2, r2, #26
 80022ac:	d4da      	bmi.n	8002264 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ae:	f7fe fe4b 	bl	8000f48 <HAL_GetTick>
 80022b2:	1b80      	subs	r0, r0, r6
 80022b4:	4285      	cmp	r5, r0
 80022b6:	d332      	bcc.n	800231e <I2C_WaitOnRXNEFlagUntilTimeout+0xee>
 80022b8:	2d00      	cmp	r5, #0
 80022ba:	d030      	beq.n	800231e <I2C_WaitOnRXNEFlagUntilTimeout+0xee>
 80022bc:	6823      	ldr	r3, [r4, #0]
 80022be:	e7cc      	b.n	800225a <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022c0:	6803      	ldr	r3, [r0, #0]
 80022c2:	699a      	ldr	r2, [r3, #24]
 80022c4:	0751      	lsls	r1, r2, #29
 80022c6:	d412      	bmi.n	80022ee <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022c8:	699a      	ldr	r2, [r3, #24]
 80022ca:	06d2      	lsls	r2, r2, #27
 80022cc:	d4c5      	bmi.n	800225a <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80022ce:	699a      	ldr	r2, [r3, #24]
 80022d0:	0692      	lsls	r2, r2, #26
 80022d2:	d40e      	bmi.n	80022f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022d4:	f7fe fe38 	bl	8000f48 <HAL_GetTick>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80022da:	2220      	movs	r2, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022dc:	4313      	orrs	r3, r2
      __HAL_UNLOCK(hi2c);
 80022de:	2100      	movs	r1, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022e0:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80022e2:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 80022e6:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      return HAL_ERROR;
 80022ea:	2001      	movs	r0, #1
 80022ec:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_OK;
 80022ee:	2000      	movs	r0, #0
 80022f0:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80022f2:	699a      	ldr	r2, [r3, #24]
 80022f4:	0750      	lsls	r0, r2, #29
 80022f6:	d502      	bpl.n	80022fe <I2C_WaitOnRXNEFlagUntilTimeout+0xce>
 80022f8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80022fa:	2a00      	cmp	r2, #0
 80022fc:	d1f7      	bne.n	80022ee <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022fe:	2520      	movs	r5, #32
 8002300:	61dd      	str	r5, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8002302:	6859      	ldr	r1, [r3, #4]
 8002304:	4808      	ldr	r0, [pc, #32]	; (8002328 <I2C_WaitOnRXNEFlagUntilTimeout+0xf8>)
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002306:	2200      	movs	r2, #0
        I2C_RESET_CR2(hi2c);
 8002308:	4001      	ands	r1, r0
 800230a:	6059      	str	r1, [r3, #4]
        return HAL_ERROR;
 800230c:	2001      	movs	r0, #1
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800230e:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8002310:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8002314:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002318:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        return HAL_ERROR;
 800231c:	bd70      	pop	{r4, r5, r6, pc}
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800231e:	6c63      	ldr	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002320:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002322:	430b      	orrs	r3, r1
 8002324:	e7b6      	b.n	8002294 <I2C_WaitOnRXNEFlagUntilTimeout+0x64>
 8002326:	bf00      	nop
 8002328:	fe00e800 	.word	0xfe00e800

0800232c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800232c:	b570      	push	{r4, r5, r6, lr}
 800232e:	4604      	mov	r4, r0
 8002330:	460d      	mov	r5, r1
 8002332:	4616      	mov	r6, r2
 8002334:	1c6b      	adds	r3, r5, #1
 8002336:	6822      	ldr	r2, [r4, #0]
 8002338:	d12a      	bne.n	8002390 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800233a:	6993      	ldr	r3, [r2, #24]
 800233c:	0798      	lsls	r0, r3, #30
 800233e:	d42a      	bmi.n	8002396 <I2C_WaitOnTXISFlagUntilTimeout+0x6a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002340:	6993      	ldr	r3, [r2, #24]
 8002342:	06d9      	lsls	r1, r3, #27
 8002344:	d5f9      	bpl.n	800233a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002346:	6993      	ldr	r3, [r2, #24]
 8002348:	069d      	lsls	r5, r3, #26
 800234a:	d5fc      	bpl.n	8002346 <I2C_WaitOnTXISFlagUntilTimeout+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800234c:	2110      	movs	r1, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800234e:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002350:	61d1      	str	r1, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002352:	61d3      	str	r3, [r2, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002354:	6993      	ldr	r3, [r2, #24]
 8002356:	0798      	lsls	r0, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 8002358:	bf44      	itt	mi
 800235a:	2300      	movmi	r3, #0
 800235c:	6293      	strmi	r3, [r2, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800235e:	6993      	ldr	r3, [r2, #24]
 8002360:	07d9      	lsls	r1, r3, #31
 8002362:	d403      	bmi.n	800236c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002364:	6993      	ldr	r3, [r2, #24]
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	6193      	str	r3, [r2, #24]
    I2C_RESET_CR2(hi2c);
 800236c:	6853      	ldr	r3, [r2, #4]
 800236e:	4918      	ldr	r1, [pc, #96]	; (80023d0 <I2C_WaitOnTXISFlagUntilTimeout+0xa4>)
 8002370:	400b      	ands	r3, r1
 8002372:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002374:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002376:	2120      	movs	r1, #32
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002378:	f043 0304 	orr.w	r3, r3, #4
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800237c:	2200      	movs	r2, #0
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800237e:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8002380:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002384:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      return HAL_ERROR;
 8002388:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800238a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800238e:	bd70      	pop	{r4, r5, r6, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002390:	6993      	ldr	r3, [r2, #24]
 8002392:	079b      	lsls	r3, r3, #30
 8002394:	d501      	bpl.n	800239a <I2C_WaitOnTXISFlagUntilTimeout+0x6e>
  return HAL_OK;
 8002396:	2000      	movs	r0, #0
}
 8002398:	bd70      	pop	{r4, r5, r6, pc}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800239a:	6993      	ldr	r3, [r2, #24]
 800239c:	06d9      	lsls	r1, r3, #27
 800239e:	d412      	bmi.n	80023c6 <I2C_WaitOnTXISFlagUntilTimeout+0x9a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023a0:	f7fe fdd2 	bl	8000f48 <HAL_GetTick>
 80023a4:	1b80      	subs	r0, r0, r6
 80023a6:	4285      	cmp	r5, r0
 80023a8:	d301      	bcc.n	80023ae <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 80023aa:	2d00      	cmp	r5, #0
 80023ac:	d1c2      	bne.n	8002334 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80023b0:	2120      	movs	r1, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023b2:	430b      	orrs	r3, r1
 80023b4:	e7e2      	b.n	800237c <I2C_WaitOnTXISFlagUntilTimeout+0x50>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023b6:	f7fe fdc7 	bl	8000f48 <HAL_GetTick>
 80023ba:	1b80      	subs	r0, r0, r6
 80023bc:	4285      	cmp	r5, r0
 80023be:	d3f6      	bcc.n	80023ae <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 80023c0:	2d00      	cmp	r5, #0
 80023c2:	d0f4      	beq.n	80023ae <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 80023c4:	6822      	ldr	r2, [r4, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023c6:	6993      	ldr	r3, [r2, #24]
 80023c8:	069b      	lsls	r3, r3, #26
 80023ca:	d5f4      	bpl.n	80023b6 <I2C_WaitOnTXISFlagUntilTimeout+0x8a>
 80023cc:	e7be      	b.n	800234c <I2C_WaitOnTXISFlagUntilTimeout+0x20>
 80023ce:	bf00      	nop
 80023d0:	fe00e800 	.word	0xfe00e800

080023d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80023d4:	b570      	push	{r4, r5, r6, lr}
 80023d6:	4604      	mov	r4, r0
 80023d8:	4616      	mov	r6, r2
 80023da:	460d      	mov	r5, r1
 80023dc:	b929      	cbnz	r1, 80023ea <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
 80023de:	e03d      	b.n	800245c <I2C_WaitOnSTOPFlagUntilTimeout+0x88>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e0:	f7fe fdb2 	bl	8000f48 <HAL_GetTick>
 80023e4:	1b80      	subs	r0, r0, r6
 80023e6:	4285      	cmp	r5, r0
 80023e8:	d341      	bcc.n	800246e <I2C_WaitOnSTOPFlagUntilTimeout+0x9a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023ea:	6822      	ldr	r2, [r4, #0]
 80023ec:	6993      	ldr	r3, [r2, #24]
 80023ee:	0698      	lsls	r0, r3, #26
 80023f0:	d441      	bmi.n	8002476 <I2C_WaitOnSTOPFlagUntilTimeout+0xa2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023f2:	6993      	ldr	r3, [r2, #24]
 80023f4:	06d9      	lsls	r1, r3, #27
 80023f6:	d5f3      	bpl.n	80023e0 <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
 80023f8:	1c68      	adds	r0, r5, #1
 80023fa:	d124      	bne.n	8002446 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023fc:	6993      	ldr	r3, [r2, #24]
 80023fe:	0699      	lsls	r1, r3, #26
 8002400:	d5fc      	bpl.n	80023fc <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002402:	2110      	movs	r1, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002404:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002406:	61d1      	str	r1, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002408:	61d3      	str	r3, [r2, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800240a:	6993      	ldr	r3, [r2, #24]
 800240c:	0798      	lsls	r0, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 800240e:	bf44      	itt	mi
 8002410:	2300      	movmi	r3, #0
 8002412:	6293      	strmi	r3, [r2, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002414:	6993      	ldr	r3, [r2, #24]
 8002416:	07d9      	lsls	r1, r3, #31
 8002418:	d403      	bmi.n	8002422 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800241a:	6993      	ldr	r3, [r2, #24]
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	6193      	str	r3, [r2, #24]
    I2C_RESET_CR2(hi2c);
 8002422:	6853      	ldr	r3, [r2, #4]
 8002424:	4915      	ldr	r1, [pc, #84]	; (800247c <I2C_WaitOnSTOPFlagUntilTimeout+0xa8>)
 8002426:	400b      	ands	r3, r1
 8002428:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800242a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800242c:	2120      	movs	r1, #32
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800242e:	f043 0304 	orr.w	r3, r3, #4
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002432:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002434:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8002436:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 800243a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 800243e:	2001      	movs	r0, #1
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002440:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002444:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002446:	6993      	ldr	r3, [r2, #24]
 8002448:	069b      	lsls	r3, r3, #26
 800244a:	d4da      	bmi.n	8002402 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800244c:	f7fe fd7c 	bl	8000f48 <HAL_GetTick>
 8002450:	1b80      	subs	r0, r0, r6
 8002452:	4285      	cmp	r5, r0
 8002454:	d30b      	bcc.n	800246e <I2C_WaitOnSTOPFlagUntilTimeout+0x9a>
 8002456:	b155      	cbz	r5, 800246e <I2C_WaitOnSTOPFlagUntilTimeout+0x9a>
 8002458:	6822      	ldr	r2, [r4, #0]
 800245a:	e7cd      	b.n	80023f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800245c:	6802      	ldr	r2, [r0, #0]
 800245e:	6993      	ldr	r3, [r2, #24]
 8002460:	069b      	lsls	r3, r3, #26
 8002462:	d408      	bmi.n	8002476 <I2C_WaitOnSTOPFlagUntilTimeout+0xa2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002464:	6993      	ldr	r3, [r2, #24]
 8002466:	06db      	lsls	r3, r3, #27
 8002468:	d4c6      	bmi.n	80023f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800246a:	f7fe fd6d 	bl	8000f48 <HAL_GetTick>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800246e:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002470:	2120      	movs	r1, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002472:	430b      	orrs	r3, r1
 8002474:	e7dd      	b.n	8002432 <I2C_WaitOnSTOPFlagUntilTimeout+0x5e>
  return HAL_OK;
 8002476:	2000      	movs	r0, #0
 8002478:	bd70      	pop	{r4, r5, r6, pc}
 800247a:	bf00      	nop
 800247c:	fe00e800 	.word	0xfe00e800

08002480 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002480:	2800      	cmp	r0, #0
 8002482:	d051      	beq.n	8002528 <HAL_I2C_Init+0xa8>
{
 8002484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002486:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800248a:	4604      	mov	r4, r0
 800248c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002490:	2b00      	cmp	r3, #0
 8002492:	d040      	beq.n	8002516 <HAL_I2C_Init+0x96>
  __HAL_I2C_DISABLE(hi2c);
 8002494:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002496:	68e0      	ldr	r0, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002498:	2224      	movs	r2, #36	; 0x24
 800249a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800249e:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024a0:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 80024a2:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 80024aa:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024ac:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024ae:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024b0:	2801      	cmp	r0, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024b6:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024b8:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024ba:	d031      	beq.n	8002520 <HAL_I2C_Init+0xa0>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024bc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024c0:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024c2:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024c4:	bf04      	itt	eq
 80024c6:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 80024ca:	605a      	streq	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024cc:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80024ce:	6922      	ldr	r2, [r4, #16]
 80024d0:	f8d4 e014 	ldr.w	lr, [r4, #20]
 80024d4:	69a7      	ldr	r7, [r4, #24]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024d6:	69e0      	ldr	r0, [r4, #28]
 80024d8:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024da:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80024de:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80024e2:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024e4:	68dd      	ldr	r5, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80024e6:	ea42 020e 	orr.w	r2, r2, lr
 80024ea:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024ee:	4330      	orrs	r0, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024f0:	f425 4500 	bic.w	r5, r5, #32768	; 0x8000
 80024f4:	60dd      	str	r5, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80024f6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024f8:	6018      	str	r0, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80024fa:	6819      	ldr	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024fc:	2200      	movs	r2, #0
  __HAL_I2C_ENABLE(hi2c);
 80024fe:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8002502:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 8002504:	6019      	str	r1, [r3, #0]
  return HAL_OK;
 8002506:	4610      	mov	r0, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002508:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800250a:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800250e:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002510:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  return HAL_OK;
 8002514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002516:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800251a:	f00d facf 	bl	800fabc <HAL_I2C_MspInit>
 800251e:	e7b9      	b.n	8002494 <HAL_I2C_Init+0x14>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002520:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002524:	609a      	str	r2, [r3, #8]
 8002526:	e7d1      	b.n	80024cc <HAL_I2C_Init+0x4c>
    return HAL_ERROR;
 8002528:	2001      	movs	r0, #1
 800252a:	4770      	bx	lr

0800252c <HAL_I2C_Master_Transmit>:
{
 800252c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002530:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8002534:	2c20      	cmp	r4, #32
 8002536:	d002      	beq.n	800253e <HAL_I2C_Master_Transmit+0x12>
    return HAL_BUSY;
 8002538:	2002      	movs	r0, #2
 800253a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hi2c);
 800253e:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8002542:	2c01      	cmp	r4, #1
 8002544:	d0f8      	beq.n	8002538 <HAL_I2C_Master_Transmit+0xc>
 8002546:	4698      	mov	r8, r3
 8002548:	2301      	movs	r3, #1
 800254a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800254e:	4617      	mov	r7, r2
 8002550:	460e      	mov	r6, r1
 8002552:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8002554:	f7fe fcf8 	bl	8000f48 <HAL_GetTick>
 8002558:	4605      	mov	r5, r0
 800255a:	e004      	b.n	8002566 <HAL_I2C_Master_Transmit+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800255c:	f7fe fcf4 	bl	8000f48 <HAL_GetTick>
 8002560:	1b40      	subs	r0, r0, r5
 8002562:	2819      	cmp	r0, #25
 8002564:	d86f      	bhi.n	8002646 <HAL_I2C_Master_Transmit+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002566:	6823      	ldr	r3, [r4, #0]
 8002568:	6998      	ldr	r0, [r3, #24]
 800256a:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 800256e:	d1f5      	bne.n	800255c <HAL_I2C_Master_Transmit+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002570:	2221      	movs	r2, #33	; 0x21
 8002572:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002576:	2210      	movs	r2, #16
 8002578:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800257c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800257e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002582:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8002584:	6267      	str	r7, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002586:	b292      	uxth	r2, r2
 8002588:	2aff      	cmp	r2, #255	; 0xff
    hi2c->XferISR   = NULL;
 800258a:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800258c:	d96c      	bls.n	8002668 <HAL_I2C_Master_Transmit+0x13c>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	4948      	ldr	r1, [pc, #288]	; (80026b4 <HAL_I2C_Master_Transmit+0x188>)
 8002592:	4849      	ldr	r0, [pc, #292]	; (80026b8 <HAL_I2C_Master_Transmit+0x18c>)
 8002594:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8002598:	4331      	orrs	r1, r6
 800259a:	4002      	ands	r2, r0
 800259c:	430a      	orrs	r2, r1
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800259e:	21ff      	movs	r1, #255	; 0xff
 80025a0:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80025a2:	605a      	str	r2, [r3, #4]
 80025a4:	f046 77ff 	orr.w	r7, r6, #33423360	; 0x1fe0000
 80025a8:	f8df 8114 	ldr.w	r8, [pc, #276]	; 80026c0 <HAL_I2C_Master_Transmit+0x194>
 80025ac:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
    while (hi2c->XferCount > 0U)
 80025b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025b2:	9906      	ldr	r1, [sp, #24]
    while (hi2c->XferCount > 0U)
 80025b4:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025b6:	462a      	mov	r2, r5
 80025b8:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d066      	beq.n	800268c <HAL_I2C_Master_Transmit+0x160>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025be:	f7ff feb5 	bl	800232c <I2C_WaitOnTXISFlagUntilTimeout>
 80025c2:	2800      	cmp	r0, #0
 80025c4:	d14d      	bne.n	8002662 <HAL_I2C_Master_Transmit+0x136>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80025c8:	6822      	ldr	r2, [r4, #0]
 80025ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80025ce:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 80025d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80025d2:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80025d4:	3b01      	subs	r3, #1
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80025da:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025dc:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80025de:	3b01      	subs	r3, #1
 80025e0:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025e2:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 80025e4:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025e6:	2900      	cmp	r1, #0
 80025e8:	d0e2      	beq.n	80025b0 <HAL_I2C_Master_Transmit+0x84>
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1e0      	bne.n	80025b0 <HAL_I2C_Master_Transmit+0x84>
 80025ee:	9b06      	ldr	r3, [sp, #24]
 80025f0:	3301      	adds	r3, #1
 80025f2:	d10e      	bne.n	8002612 <HAL_I2C_Master_Transmit+0xe6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025f4:	6993      	ldr	r3, [r2, #24]
 80025f6:	0619      	lsls	r1, r3, #24
 80025f8:	d5fc      	bpl.n	80025f4 <HAL_I2C_Master_Transmit+0xc8>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025fa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	2bff      	cmp	r3, #255	; 0xff
 8002600:	d913      	bls.n	800262a <HAL_I2C_Master_Transmit+0xfe>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002602:	6853      	ldr	r3, [r2, #4]
 8002604:	ea03 0308 	and.w	r3, r3, r8
 8002608:	433b      	orrs	r3, r7
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800260a:	21ff      	movs	r1, #255	; 0xff
 800260c:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800260e:	6053      	str	r3, [r2, #4]
 8002610:	e7ce      	b.n	80025b0 <HAL_I2C_Master_Transmit+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002612:	6993      	ldr	r3, [r2, #24]
 8002614:	061b      	lsls	r3, r3, #24
 8002616:	d4f0      	bmi.n	80025fa <HAL_I2C_Master_Transmit+0xce>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002618:	f7fe fc96 	bl	8000f48 <HAL_GetTick>
 800261c:	9b06      	ldr	r3, [sp, #24]
 800261e:	1b40      	subs	r0, r0, r5
 8002620:	4283      	cmp	r3, r0
 8002622:	d310      	bcc.n	8002646 <HAL_I2C_Master_Transmit+0x11a>
 8002624:	b17b      	cbz	r3, 8002646 <HAL_I2C_Master_Transmit+0x11a>
 8002626:	6822      	ldr	r2, [r4, #0]
 8002628:	e7e2      	b.n	80025f0 <HAL_I2C_Master_Transmit+0xc4>
          hi2c->XferSize = hi2c->XferCount;
 800262a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800262c:	6850      	ldr	r0, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 800262e:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002630:	b2cb      	uxtb	r3, r1
 8002632:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 8002636:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800263a:	ea00 0008 	and.w	r0, r0, r8
 800263e:	4303      	orrs	r3, r0
          hi2c->XferSize = hi2c->XferCount;
 8002640:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002642:	6053      	str	r3, [r2, #4]
 8002644:	e7b4      	b.n	80025b0 <HAL_I2C_Master_Transmit+0x84>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002646:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002648:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800264a:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800264c:	430b      	orrs	r3, r1
 800264e:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8002650:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 8002654:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          return HAL_ERROR;
 8002658:	2001      	movs	r0, #1
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800265a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800265e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8002662:	2001      	movs	r0, #1
 8002664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hi2c->XferSize = hi2c->XferCount;
 8002668:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800266a:	4f13      	ldr	r7, [pc, #76]	; (80026b8 <HAL_I2C_Master_Transmit+0x18c>)
 800266c:	6858      	ldr	r0, [r3, #4]
 800266e:	f3c6 0609 	ubfx	r6, r6, #0, #10
      hi2c->XferSize = hi2c->XferCount;
 8002672:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002674:	f046 4202 	orr.w	r2, r6, #2181038080	; 0x82000000
 8002678:	4038      	ands	r0, r7
 800267a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800267e:	b2cf      	uxtb	r7, r1
 8002680:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8002684:	4302      	orrs	r2, r0
      hi2c->XferSize = hi2c->XferCount;
 8002686:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	e78b      	b.n	80025a4 <HAL_I2C_Master_Transmit+0x78>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800268c:	f7ff fea2 	bl	80023d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002690:	2800      	cmp	r0, #0
 8002692:	d1e6      	bne.n	8002662 <HAL_I2C_Master_Transmit+0x136>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002694:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002696:	4d09      	ldr	r5, [pc, #36]	; (80026bc <HAL_I2C_Master_Transmit+0x190>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002698:	2120      	movs	r1, #32
 800269a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	402a      	ands	r2, r5
 80026a0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80026a2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80026a6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026aa:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80026ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026b2:	bf00      	nop
 80026b4:	81ff2000 	.word	0x81ff2000
 80026b8:	fc009800 	.word	0xfc009800
 80026bc:	fe00e800 	.word	0xfe00e800
 80026c0:	fc009c00 	.word	0xfc009c00

080026c4 <HAL_I2C_Master_Receive>:
{
 80026c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80026c8:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80026cc:	2c20      	cmp	r4, #32
 80026ce:	d002      	beq.n	80026d6 <HAL_I2C_Master_Receive+0x12>
    return HAL_BUSY;
 80026d0:	2002      	movs	r0, #2
 80026d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hi2c);
 80026d6:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80026da:	2c01      	cmp	r4, #1
 80026dc:	d0f8      	beq.n	80026d0 <HAL_I2C_Master_Receive+0xc>
 80026de:	4698      	mov	r8, r3
 80026e0:	2301      	movs	r3, #1
 80026e2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80026e6:	4617      	mov	r7, r2
 80026e8:	460e      	mov	r6, r1
 80026ea:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 80026ec:	f7fe fc2c 	bl	8000f48 <HAL_GetTick>
 80026f0:	4605      	mov	r5, r0
 80026f2:	e004      	b.n	80026fe <HAL_I2C_Master_Receive+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f4:	f7fe fc28 	bl	8000f48 <HAL_GetTick>
 80026f8:	1b40      	subs	r0, r0, r5
 80026fa:	2819      	cmp	r0, #25
 80026fc:	d862      	bhi.n	80027c4 <HAL_I2C_Master_Receive+0x100>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026fe:	6823      	ldr	r3, [r4, #0]
 8002700:	6998      	ldr	r0, [r3, #24]
 8002702:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8002706:	d1f5      	bne.n	80026f4 <HAL_I2C_Master_Receive+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002708:	2222      	movs	r2, #34	; 0x22
 800270a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800270e:	2210      	movs	r2, #16
 8002710:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002714:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8002716:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800271a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 800271c:	6267      	str	r7, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800271e:	b292      	uxth	r2, r2
 8002720:	2aff      	cmp	r2, #255	; 0xff
    hi2c->XferISR   = NULL;
 8002722:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002724:	d96d      	bls.n	8002802 <HAL_I2C_Master_Receive+0x13e>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	4948      	ldr	r1, [pc, #288]	; (800284c <HAL_I2C_Master_Receive+0x188>)
 800272a:	4849      	ldr	r0, [pc, #292]	; (8002850 <HAL_I2C_Master_Receive+0x18c>)
 800272c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8002730:	4331      	orrs	r1, r6
 8002732:	4002      	ands	r2, r0
 8002734:	430a      	orrs	r2, r1
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002736:	21ff      	movs	r1, #255	; 0xff
 8002738:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800273a:	605a      	str	r2, [r3, #4]
 800273c:	f046 77ff 	orr.w	r7, r6, #33423360	; 0x1fe0000
 8002740:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8002858 <HAL_I2C_Master_Receive+0x194>
 8002744:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
    while (hi2c->XferCount > 0U)
 8002748:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800274a:	9906      	ldr	r1, [sp, #24]
    while (hi2c->XferCount > 0U)
 800274c:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800274e:	462a      	mov	r2, r5
 8002750:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8002752:	2b00      	cmp	r3, #0
 8002754:	d067      	beq.n	8002826 <HAL_I2C_Master_Receive+0x162>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002756:	f7ff fd6b 	bl	8002230 <I2C_WaitOnRXNEFlagUntilTimeout>
 800275a:	2800      	cmp	r0, #0
 800275c:	d14e      	bne.n	80027fc <HAL_I2C_Master_Receive+0x138>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800275e:	6822      	ldr	r2, [r4, #0]
 8002760:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002762:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002764:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8002766:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002768:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800276a:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800276c:	3901      	subs	r1, #1
 800276e:	b289      	uxth	r1, r1
 8002770:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002772:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002774:	3b01      	subs	r3, #1
 8002776:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8002778:	3201      	adds	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800277a:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 800277c:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800277e:	6262      	str	r2, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002780:	2900      	cmp	r1, #0
 8002782:	d0e1      	beq.n	8002748 <HAL_I2C_Master_Receive+0x84>
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1df      	bne.n	8002748 <HAL_I2C_Master_Receive+0x84>
 8002788:	9b06      	ldr	r3, [sp, #24]
 800278a:	6822      	ldr	r2, [r4, #0]
 800278c:	3301      	adds	r3, #1
 800278e:	d10e      	bne.n	80027ae <HAL_I2C_Master_Receive+0xea>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002790:	6993      	ldr	r3, [r2, #24]
 8002792:	0619      	lsls	r1, r3, #24
 8002794:	d5fc      	bpl.n	8002790 <HAL_I2C_Master_Receive+0xcc>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002796:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002798:	b29b      	uxth	r3, r3
 800279a:	2bff      	cmp	r3, #255	; 0xff
 800279c:	d920      	bls.n	80027e0 <HAL_I2C_Master_Receive+0x11c>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800279e:	6853      	ldr	r3, [r2, #4]
 80027a0:	ea03 0308 	and.w	r3, r3, r8
 80027a4:	433b      	orrs	r3, r7
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027a6:	21ff      	movs	r1, #255	; 0xff
 80027a8:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80027aa:	6053      	str	r3, [r2, #4]
 80027ac:	e7cc      	b.n	8002748 <HAL_I2C_Master_Receive+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027ae:	6993      	ldr	r3, [r2, #24]
 80027b0:	061b      	lsls	r3, r3, #24
 80027b2:	d4f0      	bmi.n	8002796 <HAL_I2C_Master_Receive+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027b4:	f7fe fbc8 	bl	8000f48 <HAL_GetTick>
 80027b8:	9b06      	ldr	r3, [sp, #24]
 80027ba:	1b40      	subs	r0, r0, r5
 80027bc:	4283      	cmp	r3, r0
 80027be:	d301      	bcc.n	80027c4 <HAL_I2C_Master_Receive+0x100>
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1e2      	bne.n	800278a <HAL_I2C_Master_Receive+0xc6>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80027c6:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c8:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027ca:	430b      	orrs	r3, r1
 80027cc:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80027ce:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 80027d2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          return HAL_ERROR;
 80027d6:	2001      	movs	r0, #1
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80027dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          hi2c->XferSize = hi2c->XferCount;
 80027e0:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80027e2:	6850      	ldr	r0, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 80027e4:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80027e6:	b2cb      	uxtb	r3, r1
 80027e8:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 80027ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027f0:	ea00 0008 	and.w	r0, r0, r8
 80027f4:	4303      	orrs	r3, r0
          hi2c->XferSize = hi2c->XferCount;
 80027f6:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80027f8:	6053      	str	r3, [r2, #4]
 80027fa:	e7a5      	b.n	8002748 <HAL_I2C_Master_Receive+0x84>
        return HAL_ERROR;
 80027fc:	2001      	movs	r0, #1
 80027fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hi2c->XferSize = hi2c->XferCount;
 8002802:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002804:	4f12      	ldr	r7, [pc, #72]	; (8002850 <HAL_I2C_Master_Receive+0x18c>)
 8002806:	6858      	ldr	r0, [r3, #4]
 8002808:	f3c6 0609 	ubfx	r6, r6, #0, #10
      hi2c->XferSize = hi2c->XferCount;
 800280c:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800280e:	f046 4202 	orr.w	r2, r6, #2181038080	; 0x82000000
 8002812:	4038      	ands	r0, r7
 8002814:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8002818:	b2cf      	uxtb	r7, r1
 800281a:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800281e:	4302      	orrs	r2, r0
      hi2c->XferSize = hi2c->XferCount;
 8002820:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002822:	605a      	str	r2, [r3, #4]
 8002824:	e78a      	b.n	800273c <HAL_I2C_Master_Receive+0x78>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002826:	f7ff fdd5 	bl	80023d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800282a:	2800      	cmp	r0, #0
 800282c:	d1e6      	bne.n	80027fc <HAL_I2C_Master_Receive+0x138>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800282e:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002830:	4d08      	ldr	r5, [pc, #32]	; (8002854 <HAL_I2C_Master_Receive+0x190>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002832:	2120      	movs	r1, #32
 8002834:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	402a      	ands	r2, r5
 800283a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800283c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002840:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002844:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800284c:	81ff2400 	.word	0x81ff2400
 8002850:	fc009800 	.word	0xfc009800
 8002854:	fe00e800 	.word	0xfe00e800
 8002858:	fc009c00 	.word	0xfc009c00

0800285c <HAL_I2C_Mem_Write>:
{
 800285c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002860:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 8002864:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002868:	2c20      	cmp	r4, #32
 800286a:	d002      	beq.n	8002872 <HAL_I2C_Mem_Write+0x16>
    return HAL_BUSY;
 800286c:	2002      	movs	r0, #2
 800286e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((pData == NULL) || (Size == 0U))
 8002872:	9c08      	ldr	r4, [sp, #32]
 8002874:	2c00      	cmp	r4, #0
 8002876:	f000 809e 	beq.w	80029b6 <HAL_I2C_Mem_Write+0x15a>
 800287a:	2d00      	cmp	r5, #0
 800287c:	f000 809b 	beq.w	80029b6 <HAL_I2C_Mem_Write+0x15a>
    __HAL_LOCK(hi2c);
 8002880:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8002884:	2c01      	cmp	r4, #1
 8002886:	d0f1      	beq.n	800286c <HAL_I2C_Mem_Write+0x10>
 8002888:	461e      	mov	r6, r3
 800288a:	2301      	movs	r3, #1
 800288c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8002890:	4617      	mov	r7, r2
 8002892:	4688      	mov	r8, r1
 8002894:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8002896:	f7fe fb57 	bl	8000f48 <HAL_GetTick>
 800289a:	4681      	mov	r9, r0
 800289c:	e006      	b.n	80028ac <HAL_I2C_Mem_Write+0x50>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800289e:	f7fe fb53 	bl	8000f48 <HAL_GetTick>
 80028a2:	eba0 0009 	sub.w	r0, r0, r9
 80028a6:	2819      	cmp	r0, #25
 80028a8:	f200 8098 	bhi.w	80029dc <HAL_I2C_Mem_Write+0x180>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028ac:	6823      	ldr	r3, [r4, #0]
 80028ae:	6998      	ldr	r0, [r3, #24]
 80028b0:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 80028b4:	d1f3      	bne.n	800289e <HAL_I2C_Mem_Write+0x42>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028b6:	2121      	movs	r1, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028b8:	2240      	movs	r2, #64	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028ba:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80028be:	f3c8 0809 	ubfx	r8, r8, #0, #10
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028c2:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028c6:	6460      	str	r0, [r4, #68]	; 0x44
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80028c8:	b2f2      	uxtb	r2, r6
    hi2c->XferCount = Size;
 80028ca:	8565      	strh	r5, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80028cc:	6859      	ldr	r1, [r3, #4]
 80028ce:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 8002aa0 <HAL_I2C_Mem_Write+0x244>
    hi2c->pBuffPtr  = pData;
 80028d2:	9d08      	ldr	r5, [sp, #32]
    hi2c->XferISR   = NULL;
 80028d4:	6360      	str	r0, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80028d6:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 80028da:	f042 4201 	orr.w	r2, r2, #2164260864	; 0x81000000
 80028de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028e2:	ea01 010e 	and.w	r1, r1, lr
 80028e6:	4311      	orrs	r1, r2
    hi2c->pBuffPtr  = pData;
 80028e8:	6265      	str	r5, [r4, #36]	; 0x24
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ea:	464a      	mov	r2, r9
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80028ec:	6059      	str	r1, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ee:	4620      	mov	r0, r4
 80028f0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80028f2:	f7ff fd1b 	bl	800232c <I2C_WaitOnTXISFlagUntilTimeout>
 80028f6:	2800      	cmp	r0, #0
 80028f8:	f040 80a4 	bne.w	8002a44 <HAL_I2C_Mem_Write+0x1e8>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028fc:	2e01      	cmp	r6, #1
 80028fe:	d00a      	beq.n	8002916 <HAL_I2C_Mem_Write+0xba>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002900:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002902:	990a      	ldr	r1, [sp, #40]	; 0x28
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002904:	0a3a      	lsrs	r2, r7, #8
 8002906:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002908:	4620      	mov	r0, r4
 800290a:	464a      	mov	r2, r9
 800290c:	f7ff fd0e 	bl	800232c <I2C_WaitOnTXISFlagUntilTimeout>
 8002910:	2800      	cmp	r0, #0
 8002912:	f040 8097 	bne.w	8002a44 <HAL_I2C_Mem_Write+0x1e8>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002916:	6822      	ldr	r2, [r4, #0]
 8002918:	b2ff      	uxtb	r7, r7
 800291a:	6297      	str	r7, [r2, #40]	; 0x28
 800291c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800291e:	3301      	adds	r3, #1
 8002920:	d177      	bne.n	8002a12 <HAL_I2C_Mem_Write+0x1b6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002922:	6993      	ldr	r3, [r2, #24]
 8002924:	061d      	lsls	r5, r3, #24
 8002926:	d5fc      	bpl.n	8002922 <HAL_I2C_Mem_Write+0xc6>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002928:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800292a:	b29b      	uxth	r3, r3
 800292c:	2bff      	cmp	r3, #255	; 0xff
 800292e:	f240 808f 	bls.w	8002a50 <HAL_I2C_Mem_Write+0x1f4>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002932:	6853      	ldr	r3, [r2, #4]
 8002934:	4858      	ldr	r0, [pc, #352]	; (8002a98 <HAL_I2C_Mem_Write+0x23c>)
 8002936:	f048 71ff 	orr.w	r1, r8, #33423360	; 0x1fe0000
 800293a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800293e:	4003      	ands	r3, r0
 8002940:	430b      	orrs	r3, r1
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002942:	21ff      	movs	r1, #255	; 0xff
 8002944:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002946:	6053      	str	r3, [r2, #4]
 8002948:	f048 75ff 	orr.w	r5, r8, #33423360	; 0x1fe0000
 800294c:	4e52      	ldr	r6, [pc, #328]	; (8002a98 <HAL_I2C_Mem_Write+0x23c>)
 800294e:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
 8002952:	e004      	b.n	800295e <HAL_I2C_Mem_Write+0x102>
    while (hi2c->XferCount > 0U);
 8002954:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002956:	b29b      	uxth	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 8087 	beq.w	8002a6c <HAL_I2C_Mem_Write+0x210>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800295e:	464a      	mov	r2, r9
 8002960:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002962:	4620      	mov	r0, r4
 8002964:	f7ff fce2 	bl	800232c <I2C_WaitOnTXISFlagUntilTimeout>
 8002968:	2800      	cmp	r0, #0
 800296a:	d15f      	bne.n	8002a2c <HAL_I2C_Mem_Write+0x1d0>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800296c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800296e:	6822      	ldr	r2, [r4, #0]
 8002970:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002974:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8002976:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8002978:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800297a:	3b01      	subs	r3, #1
 800297c:	b29b      	uxth	r3, r3
 800297e:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002980:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002982:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002984:	3b01      	subs	r3, #1
 8002986:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002988:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 800298a:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800298c:	2900      	cmp	r1, #0
 800298e:	d0e1      	beq.n	8002954 <HAL_I2C_Mem_Write+0xf8>
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1df      	bne.n	8002954 <HAL_I2C_Mem_Write+0xf8>
 8002994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002996:	3301      	adds	r3, #1
 8002998:	d113      	bne.n	80029c2 <HAL_I2C_Mem_Write+0x166>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800299a:	6993      	ldr	r3, [r2, #24]
 800299c:	0619      	lsls	r1, r3, #24
 800299e:	d5fc      	bpl.n	800299a <HAL_I2C_Mem_Write+0x13e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	2bff      	cmp	r3, #255	; 0xff
 80029a6:	d927      	bls.n	80029f8 <HAL_I2C_Mem_Write+0x19c>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80029a8:	6853      	ldr	r3, [r2, #4]
 80029aa:	4033      	ands	r3, r6
 80029ac:	432b      	orrs	r3, r5
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029ae:	21ff      	movs	r1, #255	; 0xff
 80029b0:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80029b2:	6053      	str	r3, [r2, #4]
 80029b4:	e7ce      	b.n	8002954 <HAL_I2C_Mem_Write+0xf8>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80029b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029ba:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 80029bc:	2001      	movs	r0, #1
 80029be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029c2:	6993      	ldr	r3, [r2, #24]
 80029c4:	061b      	lsls	r3, r3, #24
 80029c6:	d4eb      	bmi.n	80029a0 <HAL_I2C_Mem_Write+0x144>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c8:	f7fe fabe 	bl	8000f48 <HAL_GetTick>
 80029cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80029ce:	eba0 0009 	sub.w	r0, r0, r9
 80029d2:	4283      	cmp	r3, r0
 80029d4:	d302      	bcc.n	80029dc <HAL_I2C_Mem_Write+0x180>
 80029d6:	b10b      	cbz	r3, 80029dc <HAL_I2C_Mem_Write+0x180>
 80029d8:	6822      	ldr	r2, [r4, #0]
 80029da:	e7dc      	b.n	8002996 <HAL_I2C_Mem_Write+0x13a>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80029de:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e0:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029e2:	430b      	orrs	r3, r1
 80029e4:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80029e6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 80029ea:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          return HAL_ERROR;
 80029ee:	2001      	movs	r0, #1
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80029f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          hi2c->XferSize = hi2c->XferCount;
 80029f8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80029fa:	6850      	ldr	r0, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 80029fc:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80029fe:	b2cf      	uxtb	r7, r1
 8002a00:	f048 7300 	orr.w	r3, r8, #33554432	; 0x2000000
 8002a04:	4030      	ands	r0, r6
 8002a06:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8002a0a:	4303      	orrs	r3, r0
          hi2c->XferSize = hi2c->XferCount;
 8002a0c:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002a0e:	6053      	str	r3, [r2, #4]
 8002a10:	e7a0      	b.n	8002954 <HAL_I2C_Mem_Write+0xf8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a12:	6993      	ldr	r3, [r2, #24]
 8002a14:	0618      	lsls	r0, r3, #24
 8002a16:	d487      	bmi.n	8002928 <HAL_I2C_Mem_Write+0xcc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a18:	f7fe fa96 	bl	8000f48 <HAL_GetTick>
 8002a1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002a1e:	eba0 0009 	sub.w	r0, r0, r9
 8002a22:	4283      	cmp	r3, r0
 8002a24:	d305      	bcc.n	8002a32 <HAL_I2C_Mem_Write+0x1d6>
 8002a26:	b123      	cbz	r3, 8002a32 <HAL_I2C_Mem_Write+0x1d6>
 8002a28:	6822      	ldr	r2, [r4, #0]
 8002a2a:	e778      	b.n	800291e <HAL_I2C_Mem_Write+0xc2>
        return HAL_ERROR;
 8002a2c:	2001      	movs	r0, #1
 8002a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a32:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a34:	2120      	movs	r1, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a36:	430b      	orrs	r3, r1
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a38:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a3a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a3c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a40:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002a44:	2300      	movs	r3, #0
 8002a46:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002a4a:	2001      	movs	r0, #1
 8002a4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hi2c->XferSize = hi2c->XferCount;
 8002a50:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002a52:	4811      	ldr	r0, [pc, #68]	; (8002a98 <HAL_I2C_Mem_Write+0x23c>)
 8002a54:	6853      	ldr	r3, [r2, #4]
      hi2c->XferSize = hi2c->XferCount;
 8002a56:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002a58:	4018      	ands	r0, r3
 8002a5a:	b2cd      	uxtb	r5, r1
 8002a5c:	f048 7300 	orr.w	r3, r8, #33554432	; 0x2000000
 8002a60:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8002a64:	4303      	orrs	r3, r0
      hi2c->XferSize = hi2c->XferCount;
 8002a66:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002a68:	6053      	str	r3, [r2, #4]
 8002a6a:	e76d      	b.n	8002948 <HAL_I2C_Mem_Write+0xec>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a6c:	464a      	mov	r2, r9
 8002a6e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002a70:	4620      	mov	r0, r4
 8002a72:	f7ff fcaf 	bl	80023d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a76:	2800      	cmp	r0, #0
 8002a78:	d1d8      	bne.n	8002a2c <HAL_I2C_Mem_Write+0x1d0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a7a:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002a7c:	4d07      	ldr	r5, [pc, #28]	; (8002a9c <HAL_I2C_Mem_Write+0x240>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a7e:	2120      	movs	r1, #32
 8002a80:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	402a      	ands	r2, r5
 8002a86:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002a88:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002a8c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a90:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002a94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a98:	fc009c00 	.word	0xfc009c00
 8002a9c:	fe00e800 	.word	0xfe00e800
 8002aa0:	fc009800 	.word	0xfc009800

08002aa4 <HAL_I2C_Mem_Read>:
{
 8002aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aa8:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 8002aac:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ab0:	2c20      	cmp	r4, #32
 8002ab2:	d002      	beq.n	8002aba <HAL_I2C_Mem_Read+0x16>
    return HAL_BUSY;
 8002ab4:	2002      	movs	r0, #2
 8002ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((pData == NULL) || (Size == 0U))
 8002aba:	9c08      	ldr	r4, [sp, #32]
 8002abc:	2c00      	cmp	r4, #0
 8002abe:	f000 808d 	beq.w	8002bdc <HAL_I2C_Mem_Read+0x138>
 8002ac2:	2d00      	cmp	r5, #0
 8002ac4:	f000 808a 	beq.w	8002bdc <HAL_I2C_Mem_Read+0x138>
    __HAL_LOCK(hi2c);
 8002ac8:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8002acc:	2c01      	cmp	r4, #1
 8002ace:	d0f1      	beq.n	8002ab4 <HAL_I2C_Mem_Read+0x10>
 8002ad0:	4699      	mov	r9, r3
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8002ad8:	4617      	mov	r7, r2
 8002ada:	460e      	mov	r6, r1
 8002adc:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8002ade:	f7fe fa33 	bl	8000f48 <HAL_GetTick>
 8002ae2:	4680      	mov	r8, r0
 8002ae4:	e006      	b.n	8002af4 <HAL_I2C_Mem_Read+0x50>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ae6:	f7fe fa2f 	bl	8000f48 <HAL_GetTick>
 8002aea:	eba0 0008 	sub.w	r0, r0, r8
 8002aee:	2819      	cmp	r0, #25
 8002af0:	f200 8092 	bhi.w	8002c18 <HAL_I2C_Mem_Read+0x174>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002af4:	6823      	ldr	r3, [r4, #0]
 8002af6:	6998      	ldr	r0, [r3, #24]
 8002af8:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8002afc:	d1f3      	bne.n	8002ae6 <HAL_I2C_Mem_Read+0x42>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002afe:	2122      	movs	r1, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b00:	2240      	movs	r2, #64	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b02:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002b06:	f3c6 0609 	ubfx	r6, r6, #0, #10
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b0a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b0e:	6460      	str	r0, [r4, #68]	; 0x44
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002b10:	fa5f f289 	uxtb.w	r2, r9
    hi2c->XferCount = Size;
 8002b14:	8565      	strh	r5, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002b16:	6859      	ldr	r1, [r3, #4]
 8002b18:	f8df e1e4 	ldr.w	lr, [pc, #484]	; 8002d00 <HAL_I2C_Mem_Read+0x25c>
    hi2c->pBuffPtr  = pData;
 8002b1c:	9d08      	ldr	r5, [sp, #32]
    hi2c->XferISR   = NULL;
 8002b1e:	6360      	str	r0, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002b20:	ea46 4202 	orr.w	r2, r6, r2, lsl #16
 8002b24:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002b28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b2c:	ea01 010e 	and.w	r1, r1, lr
 8002b30:	4311      	orrs	r1, r2
    hi2c->pBuffPtr  = pData;
 8002b32:	6265      	str	r5, [r4, #36]	; 0x24
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b34:	4642      	mov	r2, r8
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002b36:	6059      	str	r1, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b38:	4620      	mov	r0, r4
 8002b3a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002b3c:	f7ff fbf6 	bl	800232c <I2C_WaitOnTXISFlagUntilTimeout>
 8002b40:	2800      	cmp	r0, #0
 8002b42:	f040 80ae 	bne.w	8002ca2 <HAL_I2C_Mem_Read+0x1fe>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b46:	f1b9 0f01 	cmp.w	r9, #1
 8002b4a:	d00a      	beq.n	8002b62 <HAL_I2C_Mem_Read+0xbe>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b4c:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b4e:	990a      	ldr	r1, [sp, #40]	; 0x28
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b50:	0a3a      	lsrs	r2, r7, #8
 8002b52:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b54:	4620      	mov	r0, r4
 8002b56:	4642      	mov	r2, r8
 8002b58:	f7ff fbe8 	bl	800232c <I2C_WaitOnTXISFlagUntilTimeout>
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	f040 80a0 	bne.w	8002ca2 <HAL_I2C_Mem_Read+0x1fe>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b62:	6821      	ldr	r1, [r4, #0]
 8002b64:	b2ff      	uxtb	r7, r7
 8002b66:	628f      	str	r7, [r1, #40]	; 0x28
 8002b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	f040 8082 	bne.w	8002c74 <HAL_I2C_Mem_Read+0x1d0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b70:	698b      	ldr	r3, [r1, #24]
 8002b72:	0658      	lsls	r0, r3, #25
 8002b74:	d5fc      	bpl.n	8002b70 <HAL_I2C_Mem_Read+0xcc>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b76:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	2bff      	cmp	r3, #255	; 0xff
 8002b7c:	f240 8097 	bls.w	8002cae <HAL_I2C_Mem_Read+0x20a>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002b80:	684b      	ldr	r3, [r1, #4]
 8002b82:	485f      	ldr	r0, [pc, #380]	; (8002d00 <HAL_I2C_Mem_Read+0x25c>)
 8002b84:	4a5f      	ldr	r2, [pc, #380]	; (8002d04 <HAL_I2C_Mem_Read+0x260>)
 8002b86:	4003      	ands	r3, r0
 8002b88:	4332      	orrs	r2, r6
 8002b8a:	4313      	orrs	r3, r2
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b8c:	22ff      	movs	r2, #255	; 0xff
 8002b8e:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002b90:	604b      	str	r3, [r1, #4]
 8002b92:	f046 75ff 	orr.w	r5, r6, #33423360	; 0x1fe0000
 8002b96:	4f5c      	ldr	r7, [pc, #368]	; (8002d08 <HAL_I2C_Mem_Read+0x264>)
 8002b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b9a:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	d122      	bne.n	8002be8 <HAL_I2C_Mem_Read+0x144>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ba2:	698b      	ldr	r3, [r1, #24]
 8002ba4:	075b      	lsls	r3, r3, #29
 8002ba6:	d5fc      	bpl.n	8002ba2 <HAL_I2C_Mem_Read+0xfe>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ba8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002baa:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8002bac:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8002bae:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002bb0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002bb2:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002bb4:	3901      	subs	r1, #1
 8002bb6:	b289      	uxth	r1, r1
 8002bb8:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bba:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8002bc0:	3201      	adds	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bc2:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 8002bc4:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002bc6:	6262      	str	r2, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bc8:	b109      	cbz	r1, 8002bce <HAL_I2C_Mem_Read+0x12a>
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d032      	beq.n	8002c34 <HAL_I2C_Mem_Read+0x190>
    while (hi2c->XferCount > 0U);
 8002bce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d07b      	beq.n	8002cce <HAL_I2C_Mem_Read+0x22a>
 8002bd6:	6821      	ldr	r1, [r4, #0]
 8002bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002bda:	e7e0      	b.n	8002b9e <HAL_I2C_Mem_Read+0xfa>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002bdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002be0:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8002be2:	2001      	movs	r0, #1
 8002be4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002be8:	698b      	ldr	r3, [r1, #24]
 8002bea:	0758      	lsls	r0, r3, #29
 8002bec:	d4dc      	bmi.n	8002ba8 <HAL_I2C_Mem_Read+0x104>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bee:	f7fe f9ab 	bl	8000f48 <HAL_GetTick>
 8002bf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002bf4:	eba0 0008 	sub.w	r0, r0, r8
 8002bf8:	4283      	cmp	r3, r0
 8002bfa:	d30d      	bcc.n	8002c18 <HAL_I2C_Mem_Read+0x174>
 8002bfc:	b163      	cbz	r3, 8002c18 <HAL_I2C_Mem_Read+0x174>
 8002bfe:	6821      	ldr	r1, [r4, #0]
 8002c00:	e7cd      	b.n	8002b9e <HAL_I2C_Mem_Read+0xfa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c02:	6993      	ldr	r3, [r2, #24]
 8002c04:	061b      	lsls	r3, r3, #24
 8002c06:	d41c      	bmi.n	8002c42 <HAL_I2C_Mem_Read+0x19e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c08:	f7fe f99e 	bl	8000f48 <HAL_GetTick>
 8002c0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c0e:	eba0 0008 	sub.w	r0, r0, r8
 8002c12:	4283      	cmp	r3, r0
 8002c14:	d300      	bcc.n	8002c18 <HAL_I2C_Mem_Read+0x174>
 8002c16:	b973      	cbnz	r3, 8002c36 <HAL_I2C_Mem_Read+0x192>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c18:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002c1a:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c1c:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c1e:	430b      	orrs	r3, r1
 8002c20:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8002c22:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 8002c26:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          return HAL_ERROR;
 8002c2a:	2001      	movs	r0, #1
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c2c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002c30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c36:	6822      	ldr	r2, [r4, #0]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	d1e2      	bne.n	8002c02 <HAL_I2C_Mem_Read+0x15e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c3c:	6993      	ldr	r3, [r2, #24]
 8002c3e:	0619      	lsls	r1, r3, #24
 8002c40:	d5fc      	bpl.n	8002c3c <HAL_I2C_Mem_Read+0x198>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c42:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	2bff      	cmp	r3, #255	; 0xff
 8002c48:	d906      	bls.n	8002c58 <HAL_I2C_Mem_Read+0x1b4>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002c4a:	6853      	ldr	r3, [r2, #4]
 8002c4c:	403b      	ands	r3, r7
 8002c4e:	432b      	orrs	r3, r5
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c50:	21ff      	movs	r1, #255	; 0xff
 8002c52:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002c54:	6053      	str	r3, [r2, #4]
 8002c56:	e7ba      	b.n	8002bce <HAL_I2C_Mem_Read+0x12a>
          hi2c->XferSize = hi2c->XferCount;
 8002c58:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002c5a:	6850      	ldr	r0, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8002c5c:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002c5e:	fa5f fe81 	uxtb.w	lr, r1
 8002c62:	f046 7300 	orr.w	r3, r6, #33554432	; 0x2000000
 8002c66:	4038      	ands	r0, r7
 8002c68:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8002c6c:	4303      	orrs	r3, r0
          hi2c->XferSize = hi2c->XferCount;
 8002c6e:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002c70:	6053      	str	r3, [r2, #4]
 8002c72:	e7ac      	b.n	8002bce <HAL_I2C_Mem_Read+0x12a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c74:	698b      	ldr	r3, [r1, #24]
 8002c76:	065a      	lsls	r2, r3, #25
 8002c78:	f53f af7d 	bmi.w	8002b76 <HAL_I2C_Mem_Read+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c7c:	f7fe f964 	bl	8000f48 <HAL_GetTick>
 8002c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c82:	eba0 0008 	sub.w	r0, r0, r8
 8002c86:	4283      	cmp	r3, r0
 8002c88:	d302      	bcc.n	8002c90 <HAL_I2C_Mem_Read+0x1ec>
 8002c8a:	b10b      	cbz	r3, 8002c90 <HAL_I2C_Mem_Read+0x1ec>
 8002c8c:	6821      	ldr	r1, [r4, #0]
 8002c8e:	e76c      	b.n	8002b6a <HAL_I2C_Mem_Read+0xc6>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c90:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002c92:	2120      	movs	r1, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c94:	430b      	orrs	r3, r1
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c96:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c98:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002c9a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c9e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002ca8:	2001      	movs	r0, #1
 8002caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hi2c->XferSize = hi2c->XferCount;
 8002cae:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002cb0:	4d13      	ldr	r5, [pc, #76]	; (8002d00 <HAL_I2C_Mem_Read+0x25c>)
 8002cb2:	6848      	ldr	r0, [r1, #4]
      hi2c->XferSize = hi2c->XferCount;
 8002cb4:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002cb6:	f046 4302 	orr.w	r3, r6, #2181038080	; 0x82000000
 8002cba:	4028      	ands	r0, r5
 8002cbc:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8002cc0:	b2d5      	uxtb	r5, r2
 8002cc2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8002cc6:	4303      	orrs	r3, r0
      hi2c->XferSize = hi2c->XferCount;
 8002cc8:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002cca:	604b      	str	r3, [r1, #4]
 8002ccc:	e761      	b.n	8002b92 <HAL_I2C_Mem_Read+0xee>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cce:	4642      	mov	r2, r8
 8002cd0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	f7ff fb7e 	bl	80023d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cd8:	b970      	cbnz	r0, 8002cf8 <HAL_I2C_Mem_Read+0x254>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cda:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002cdc:	4d0b      	ldr	r5, [pc, #44]	; (8002d0c <HAL_I2C_Mem_Read+0x268>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cde:	2120      	movs	r1, #32
 8002ce0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	402a      	ands	r2, r5
 8002ce6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002ce8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002cec:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cf0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002cf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_ERROR;
 8002cf8:	2001      	movs	r0, #1
 8002cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cfe:	bf00      	nop
 8002d00:	fc009800 	.word	0xfc009800
 8002d04:	81ff2400 	.word	0x81ff2400
 8002d08:	fc009c00 	.word	0xfc009c00
 8002d0c:	fe00e800 	.word	0xfe00e800

08002d10 <HAL_I2C_Mem_Write_IT>:
{
 8002d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d14:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 8002d18:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d1c:	2c20      	cmp	r4, #32
 8002d1e:	d003      	beq.n	8002d28 <HAL_I2C_Mem_Write_IT+0x18>
    return HAL_BUSY;
 8002d20:	2502      	movs	r5, #2
}
 8002d22:	4628      	mov	r0, r5
 8002d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((pData == NULL) || (Size == 0U))
 8002d28:	9c08      	ldr	r4, [sp, #32]
 8002d2a:	2c00      	cmp	r4, #0
 8002d2c:	d07c      	beq.n	8002e28 <HAL_I2C_Mem_Write_IT+0x118>
 8002d2e:	2d00      	cmp	r5, #0
 8002d30:	d07a      	beq.n	8002e28 <HAL_I2C_Mem_Write_IT+0x118>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002d32:	6804      	ldr	r4, [r0, #0]
 8002d34:	69a4      	ldr	r4, [r4, #24]
 8002d36:	f414 4a00 	ands.w	sl, r4, #32768	; 0x8000
 8002d3a:	d1f1      	bne.n	8002d20 <HAL_I2C_Mem_Write_IT+0x10>
    __HAL_LOCK(hi2c);
 8002d3c:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8002d40:	2c01      	cmp	r4, #1
 8002d42:	d0ed      	beq.n	8002d20 <HAL_I2C_Mem_Write_IT+0x10>
 8002d44:	4698      	mov	r8, r3
 8002d46:	2301      	movs	r3, #1
 8002d48:	4604      	mov	r4, r0
 8002d4a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8002d4e:	4617      	mov	r7, r2
 8002d50:	460e      	mov	r6, r1
    tickstart = HAL_GetTick();
 8002d52:	f7fe f8f9 	bl	8000f48 <HAL_GetTick>
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d56:	2321      	movs	r3, #33	; 0x21
 8002d58:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002d5c:	2240      	movs	r2, #64	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d5e:	4b3d      	ldr	r3, [pc, #244]	; (8002e54 <HAL_I2C_Mem_Write_IT+0x144>)
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002d60:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d64:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
 8002d68:	8565      	strh	r5, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d6a:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d6c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8002d6e:	4a3a      	ldr	r2, [pc, #232]	; (8002e58 <HAL_I2C_Mem_Write_IT+0x148>)
    hi2c->pBuffPtr    = pData;
 8002d70:	9908      	ldr	r1, [sp, #32]
 8002d72:	6261      	str	r1, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	2bff      	cmp	r3, #255	; 0xff
    tickstart = HAL_GetTick();
 8002d78:	4681      	mov	r9, r0
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8002d7a:	6362      	str	r2, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d7c:	d859      	bhi.n	8002e32 <HAL_I2C_Mem_Write_IT+0x122>
      hi2c->XferSize = hi2c->XferCount;
 8002d7e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      xfermode = I2C_AUTOEND_MODE;
 8002d80:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8002d84:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002d86:	6821      	ldr	r1, [r4, #0]
 8002d88:	4834      	ldr	r0, [pc, #208]	; (8002e5c <HAL_I2C_Mem_Write_IT+0x14c>)
 8002d8a:	684a      	ldr	r2, [r1, #4]
 8002d8c:	8523      	strh	r3, [r4, #40]	; 0x28
 8002d8e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8002d92:	fa5f f388 	uxtb.w	r3, r8
 8002d96:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 8002d9a:	f043 4301 	orr.w	r3, r3, #2164260864	; 0x81000000
 8002d9e:	4002      	ands	r2, r0
 8002da0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002da4:	4313      	orrs	r3, r2
 8002da6:	604b      	str	r3, [r1, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002da8:	464a      	mov	r2, r9
 8002daa:	2119      	movs	r1, #25
 8002dac:	4620      	mov	r0, r4
 8002dae:	f7ff fabd 	bl	800232c <I2C_WaitOnTXISFlagUntilTimeout>
 8002db2:	4605      	mov	r5, r0
 8002db4:	2800      	cmp	r0, #0
 8002db6:	d148      	bne.n	8002e4a <HAL_I2C_Mem_Write_IT+0x13a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002db8:	f1b8 0f01 	cmp.w	r8, #1
 8002dbc:	d009      	beq.n	8002dd2 <HAL_I2C_Mem_Write_IT+0xc2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002dbe:	6823      	ldr	r3, [r4, #0]
 8002dc0:	0a3a      	lsrs	r2, r7, #8
 8002dc2:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dc4:	2119      	movs	r1, #25
 8002dc6:	464a      	mov	r2, r9
 8002dc8:	4620      	mov	r0, r4
 8002dca:	f7ff faaf 	bl	800232c <I2C_WaitOnTXISFlagUntilTimeout>
 8002dce:	2800      	cmp	r0, #0
 8002dd0:	d13b      	bne.n	8002e4a <HAL_I2C_Mem_Write_IT+0x13a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002dd2:	6822      	ldr	r2, [r4, #0]
 8002dd4:	b2ff      	uxtb	r7, r7
 8002dd6:	6297      	str	r7, [r2, #40]	; 0x28
 8002dd8:	e006      	b.n	8002de8 <HAL_I2C_Mem_Write_IT+0xd8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dda:	f7fe f8b5 	bl	8000f48 <HAL_GetTick>
 8002dde:	eba0 0009 	sub.w	r0, r0, r9
 8002de2:	2819      	cmp	r0, #25
 8002de4:	d829      	bhi.n	8002e3a <HAL_I2C_Mem_Write_IT+0x12a>
 8002de6:	6822      	ldr	r2, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002de8:	6997      	ldr	r7, [r2, #24]
 8002dea:	f017 0780 	ands.w	r7, r7, #128	; 0x80
 8002dee:	d0f4      	beq.n	8002dda <HAL_I2C_Mem_Write_IT+0xca>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002df0:	6851      	ldr	r1, [r2, #4]
 8002df2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8002df6:	481a      	ldr	r0, [pc, #104]	; (8002e60 <HAL_I2C_Mem_Write_IT+0x150>)
 8002df8:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 8002dfc:	4001      	ands	r1, r0
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002dfe:	4e19      	ldr	r6, [pc, #100]	; (8002e64 <HAL_I2C_Mem_Write_IT+0x154>)
 8002e00:	6b60      	ldr	r0, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002e02:	ea43 030a 	orr.w	r3, r3, sl
 8002e06:	430b      	orrs	r3, r1
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002e08:	42b0      	cmp	r0, r6
    __HAL_UNLOCK(hi2c);
 8002e0a:	f04f 0100 	mov.w	r1, #0
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002e0e:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hi2c);
 8002e10:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002e14:	d004      	beq.n	8002e20 <HAL_I2C_Mem_Write_IT+0x110>
 8002e16:	4914      	ldr	r1, [pc, #80]	; (8002e68 <HAL_I2C_Mem_Write_IT+0x158>)
 8002e18:	4288      	cmp	r0, r1
 8002e1a:	bf14      	ite	ne
 8002e1c:	21f2      	movne	r1, #242	; 0xf2
 8002e1e:	2100      	moveq	r1, #0
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002e20:	6813      	ldr	r3, [r2, #0]
 8002e22:	4319      	orrs	r1, r3
 8002e24:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 8002e26:	e77c      	b.n	8002d22 <HAL_I2C_Mem_Write_IT+0x12>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e2c:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8002e2e:	2501      	movs	r5, #1
 8002e30:	e777      	b.n	8002d22 <HAL_I2C_Mem_Write_IT+0x12>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e32:	23ff      	movs	r3, #255	; 0xff
      xfermode = I2C_RELOAD_MODE;
 8002e34:	f04f 7a80 	mov.w	sl, #16777216	; 0x1000000
 8002e38:	e7a5      	b.n	8002d86 <HAL_I2C_Mem_Write_IT+0x76>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002e3c:	2220      	movs	r2, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002e42:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e46:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002e50:	2501      	movs	r5, #1
 8002e52:	e766      	b.n	8002d22 <HAL_I2C_Mem_Write_IT+0x12>
 8002e54:	ffff0000 	.word	0xffff0000
 8002e58:	080039f1 	.word	0x080039f1
 8002e5c:	fc009800 	.word	0xfc009800
 8002e60:	fc009c00 	.word	0xfc009c00
 8002e64:	08003c2d 	.word	0x08003c2d
 8002e68:	08003609 	.word	0x08003609

08002e6c <HAL_I2C_Mem_Read_IT>:
{
 8002e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e70:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 8002e74:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e78:	2c20      	cmp	r4, #32
 8002e7a:	d003      	beq.n	8002e84 <HAL_I2C_Mem_Read_IT+0x18>
    return HAL_BUSY;
 8002e7c:	2502      	movs	r5, #2
}
 8002e7e:	4628      	mov	r0, r5
 8002e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((pData == NULL) || (Size == 0U))
 8002e84:	9c08      	ldr	r4, [sp, #32]
 8002e86:	2c00      	cmp	r4, #0
 8002e88:	f000 8081 	beq.w	8002f8e <HAL_I2C_Mem_Read_IT+0x122>
 8002e8c:	2d00      	cmp	r5, #0
 8002e8e:	d07e      	beq.n	8002f8e <HAL_I2C_Mem_Read_IT+0x122>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002e90:	6804      	ldr	r4, [r0, #0]
 8002e92:	69a4      	ldr	r4, [r4, #24]
 8002e94:	f414 4a00 	ands.w	sl, r4, #32768	; 0x8000
 8002e98:	d1f0      	bne.n	8002e7c <HAL_I2C_Mem_Read_IT+0x10>
    __HAL_LOCK(hi2c);
 8002e9a:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8002e9e:	2c01      	cmp	r4, #1
 8002ea0:	d0ec      	beq.n	8002e7c <HAL_I2C_Mem_Read_IT+0x10>
 8002ea2:	4698      	mov	r8, r3
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	4604      	mov	r4, r0
 8002ea8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8002eac:	4617      	mov	r7, r2
 8002eae:	460e      	mov	r6, r1
    tickstart = HAL_GetTick();
 8002eb0:	f7fe f84a 	bl	8000f48 <HAL_GetTick>
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002eb4:	2322      	movs	r3, #34	; 0x22
 8002eb6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002eba:	2240      	movs	r2, #64	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ebc:	4b3f      	ldr	r3, [pc, #252]	; (8002fbc <HAL_I2C_Mem_Read_IT+0x150>)
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002ebe:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ec2:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
 8002ec6:	8565      	strh	r5, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ec8:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8002ecc:	4a3c      	ldr	r2, [pc, #240]	; (8002fc0 <HAL_I2C_Mem_Read_IT+0x154>)
    hi2c->pBuffPtr    = pData;
 8002ece:	9908      	ldr	r1, [sp, #32]
 8002ed0:	6261      	str	r1, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2bff      	cmp	r3, #255	; 0xff
    tickstart = HAL_GetTick();
 8002ed6:	4681      	mov	r9, r0
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8002ed8:	6362      	str	r2, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eda:	d85d      	bhi.n	8002f98 <HAL_I2C_Mem_Read_IT+0x12c>
      hi2c->XferSize = hi2c->XferCount;
 8002edc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      xfermode = I2C_AUTOEND_MODE;
 8002ede:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8002ee2:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002ee4:	6821      	ldr	r1, [r4, #0]
 8002ee6:	4837      	ldr	r0, [pc, #220]	; (8002fc4 <HAL_I2C_Mem_Read_IT+0x158>)
 8002ee8:	684a      	ldr	r2, [r1, #4]
 8002eea:	8523      	strh	r3, [r4, #40]	; 0x28
 8002eec:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8002ef0:	fa5f f388 	uxtb.w	r3, r8
 8002ef4:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 8002ef8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002efc:	4002      	ands	r2, r0
 8002efe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f02:	4313      	orrs	r3, r2
 8002f04:	604b      	str	r3, [r1, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f06:	464a      	mov	r2, r9
 8002f08:	2119      	movs	r1, #25
 8002f0a:	4620      	mov	r0, r4
 8002f0c:	f7ff fa0e 	bl	800232c <I2C_WaitOnTXISFlagUntilTimeout>
 8002f10:	4605      	mov	r5, r0
 8002f12:	2800      	cmp	r0, #0
 8002f14:	d14c      	bne.n	8002fb0 <HAL_I2C_Mem_Read_IT+0x144>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f16:	f1b8 0f01 	cmp.w	r8, #1
 8002f1a:	d009      	beq.n	8002f30 <HAL_I2C_Mem_Read_IT+0xc4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f1c:	6823      	ldr	r3, [r4, #0]
 8002f1e:	0a3a      	lsrs	r2, r7, #8
 8002f20:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f22:	2119      	movs	r1, #25
 8002f24:	464a      	mov	r2, r9
 8002f26:	4620      	mov	r0, r4
 8002f28:	f7ff fa00 	bl	800232c <I2C_WaitOnTXISFlagUntilTimeout>
 8002f2c:	2800      	cmp	r0, #0
 8002f2e:	d13f      	bne.n	8002fb0 <HAL_I2C_Mem_Read_IT+0x144>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f30:	6822      	ldr	r2, [r4, #0]
 8002f32:	b2ff      	uxtb	r7, r7
 8002f34:	6297      	str	r7, [r2, #40]	; 0x28
 8002f36:	e006      	b.n	8002f46 <HAL_I2C_Mem_Read_IT+0xda>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f38:	f7fe f806 	bl	8000f48 <HAL_GetTick>
 8002f3c:	eba0 0009 	sub.w	r0, r0, r9
 8002f40:	2819      	cmp	r0, #25
 8002f42:	d82d      	bhi.n	8002fa0 <HAL_I2C_Mem_Read_IT+0x134>
 8002f44:	6822      	ldr	r2, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f46:	6997      	ldr	r7, [r2, #24]
 8002f48:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 8002f4c:	d0f4      	beq.n	8002f38 <HAL_I2C_Mem_Read_IT+0xcc>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002f4e:	6851      	ldr	r1, [r2, #4]
 8002f50:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8002f54:	481b      	ldr	r0, [pc, #108]	; (8002fc4 <HAL_I2C_Mem_Read_IT+0x158>)
 8002f56:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 8002f5a:	f446 5610 	orr.w	r6, r6, #9216	; 0x2400
 8002f5e:	4001      	ands	r1, r0
 8002f60:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002f64:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002f66:	4e18      	ldr	r6, [pc, #96]	; (8002fc8 <HAL_I2C_Mem_Read_IT+0x15c>)
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002f68:	ea43 030a 	orr.w	r3, r3, sl
 8002f6c:	430b      	orrs	r3, r1
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002f6e:	42b0      	cmp	r0, r6
    __HAL_UNLOCK(hi2c);
 8002f70:	f04f 0100 	mov.w	r1, #0
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002f74:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hi2c);
 8002f76:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002f7a:	d004      	beq.n	8002f86 <HAL_I2C_Mem_Read_IT+0x11a>
 8002f7c:	4913      	ldr	r1, [pc, #76]	; (8002fcc <HAL_I2C_Mem_Read_IT+0x160>)
 8002f7e:	4288      	cmp	r0, r1
 8002f80:	bf14      	ite	ne
 8002f82:	21f4      	movne	r1, #244	; 0xf4
 8002f84:	2100      	moveq	r1, #0
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002f86:	6813      	ldr	r3, [r2, #0]
 8002f88:	4319      	orrs	r1, r3
 8002f8a:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 8002f8c:	e777      	b.n	8002e7e <HAL_I2C_Mem_Read_IT+0x12>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f92:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8002f94:	2501      	movs	r5, #1
 8002f96:	e772      	b.n	8002e7e <HAL_I2C_Mem_Read_IT+0x12>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f98:	23ff      	movs	r3, #255	; 0xff
      xfermode = I2C_RELOAD_MODE;
 8002f9a:	f04f 7a80 	mov.w	sl, #16777216	; 0x1000000
 8002f9e:	e7a1      	b.n	8002ee4 <HAL_I2C_Mem_Read_IT+0x78>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fa0:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002fa2:	2220      	movs	r2, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002fa8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002fb6:	2501      	movs	r5, #1
 8002fb8:	e761      	b.n	8002e7e <HAL_I2C_Mem_Read_IT+0x12>
 8002fba:	bf00      	nop
 8002fbc:	ffff0000 	.word	0xffff0000
 8002fc0:	080039f1 	.word	0x080039f1
 8002fc4:	fc009800 	.word	0xfc009800
 8002fc8:	08003c2d 	.word	0x08003c2d
 8002fcc:	08003609 	.word	0x08003609

08002fd0 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002fd0:	6803      	ldr	r3, [r0, #0]
{
 8002fd2:	b410      	push	{r4}
  if (hi2c->XferISR != NULL)
 8002fd4:	6b44      	ldr	r4, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002fd6:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002fd8:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8002fda:	b11c      	cbz	r4, 8002fe4 <HAL_I2C_EV_IRQHandler+0x14>
    hi2c->XferISR(hi2c, itflags, itsources);
 8002fdc:	4623      	mov	r3, r4
}
 8002fde:	f85d 4b04 	ldr.w	r4, [sp], #4
    hi2c->XferISR(hi2c, itflags, itsources);
 8002fe2:	4718      	bx	r3
}
 8002fe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop

08002fec <HAL_I2C_MasterTxCpltCallback>:
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop

08002ff0 <HAL_I2C_MasterRxCpltCallback>:
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop

08002ff4 <HAL_I2C_SlaveTxCpltCallback>:
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop

08002ff8 <HAL_I2C_SlaveRxCpltCallback>:
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop

08002ffc <HAL_I2C_AddrCallback>:
{
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop

08003000 <I2C_ITAddrCplt.isra.8.part.9>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8003000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    transferdirection = I2C_GET_DIR(hi2c);
 8003002:	6804      	ldr	r4, [r0, #0]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003004:	68c3      	ldr	r3, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8003006:	69a1      	ldr	r1, [r4, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003008:	69a2      	ldr	r2, [r4, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800300a:	68a6      	ldr	r6, [r4, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800300c:	68e7      	ldr	r7, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800300e:	0c12      	lsrs	r2, r2, #16
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003010:	2b02      	cmp	r3, #2
    transferdirection = I2C_GET_DIR(hi2c);
 8003012:	f3c1 4100 	ubfx	r1, r1, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003016:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800301a:	d10d      	bne.n	8003038 <I2C_ITAddrCplt.isra.8.part.9+0x38>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800301c:	f3c6 0609 	ubfx	r6, r6, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8003020:	ea82 12d6 	eor.w	r2, r2, r6, lsr #7
 8003024:	f012 0306 	ands.w	r3, r2, #6
 8003028:	d110      	bne.n	800304c <I2C_ITAddrCplt.isra.8.part.9+0x4c>
        hi2c->AddrEventCount++;
 800302a:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800302c:	3201      	adds	r2, #1
 800302e:	6482      	str	r2, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003030:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003032:	2a02      	cmp	r2, #2
 8003034:	d016      	beq.n	8003064 <I2C_ITAddrCplt.isra.8.part.9+0x64>
 8003036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003038:	6823      	ldr	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
 800303a:	2600      	movs	r6, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800303c:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
 8003040:	6023      	str	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
 8003042:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003046:	f7ff ffd9 	bl	8002ffc <HAL_I2C_AddrCallback>
 800304a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800304c:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);
 800304e:	2600      	movs	r6, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003050:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
 8003054:	6023      	str	r3, [r4, #0]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003056:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
        __HAL_UNLOCK(hi2c);
 800305a:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800305e:	f7ff ffcd 	bl	8002ffc <HAL_I2C_AddrCallback>
 8003062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003064:	2708      	movs	r7, #8
          hi2c->AddrEventCount = 0U;
 8003066:	6483      	str	r3, [r0, #72]	; 0x48
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003068:	4632      	mov	r2, r6
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800306a:	61e7      	str	r7, [r4, #28]
          __HAL_UNLOCK(hi2c);
 800306c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003070:	f7ff ffc4 	bl	8002ffc <HAL_I2C_AddrCallback>
 8003074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003076:	bf00      	nop

08003078 <HAL_I2C_ListenCpltCallback>:
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop

0800307c <HAL_I2C_MemTxCpltCallback>:
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop

08003080 <HAL_I2C_MemRxCpltCallback>:
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop

08003084 <HAL_I2C_ErrorCallback>:
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop

08003088 <HAL_I2C_AbortCpltCallback>:
{
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop

0800308c <I2C_ITError>:
{
 800308c:	b570      	push	{r4, r5, r6, lr}
 800308e:	4604      	mov	r4, r0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003090:	4a40      	ldr	r2, [pc, #256]	; (8003194 <I2C_ITError+0x108>)
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003092:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003096:	2000      	movs	r0, #0
 8003098:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800309c:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800309e:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 80030a0:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80030a2:	3b28      	subs	r3, #40	; 0x28
  hi2c->ErrorCode |= ErrorCode;
 80030a4:	4311      	orrs	r1, r2
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80030a6:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
 80030a8:	6461      	str	r1, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80030aa:	d83d      	bhi.n	8003128 <I2C_ITError+0x9c>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80030ac:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80030b0:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80030b4:	6823      	ldr	r3, [r4, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80030b6:	4e38      	ldr	r6, [pc, #224]	; (8003198 <I2C_ITError+0x10c>)
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80030b8:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80030ba:	f001 0128 	and.w	r1, r1, #40	; 0x28
 80030be:	2928      	cmp	r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80030c0:	f005 0528 	and.w	r5, r5, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80030c4:	bf14      	ite	ne
 80030c6:	f06f 01f6 	mvnne.w	r1, #246	; 0xf6
 80030ca:	f06f 0146 	mvneq.w	r1, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80030ce:	2d28      	cmp	r5, #40	; 0x28
 80030d0:	bf18      	it	ne
 80030d2:	f06f 01f6 	mvnne.w	r1, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80030d6:	400a      	ands	r2, r1
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80030d8:	2128      	movs	r1, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80030da:	601a      	str	r2, [r3, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80030dc:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80030e0:	6366      	str	r6, [r4, #52]	; 0x34
    hi2c->PreviousState = I2C_STATE_NONE;
 80030e2:	6320      	str	r0, [r4, #48]	; 0x30
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	f412 4280 	ands.w	r2, r2, #16384	; 0x4000
 80030ea:	d00f      	beq.n	800310c <I2C_ITError+0x80>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80030ec:	681a      	ldr	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 80030ee:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80030f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030f4:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 80030f6:	b140      	cbz	r0, 800310a <I2C_ITError+0x7e>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80030f8:	4b28      	ldr	r3, [pc, #160]	; (800319c <I2C_ITError+0x110>)
 80030fa:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 80030fc:	2300      	movs	r3, #0
 80030fe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003102:	f7fe fee1 	bl	8001ec8 <HAL_DMA_Abort_IT>
 8003106:	2800      	cmp	r0, #0
 8003108:	d136      	bne.n	8003178 <I2C_ITError+0xec>
 800310a:	bd70      	pop	{r4, r5, r6, pc}
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800310c:	6819      	ldr	r1, [r3, #0]
 800310e:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
 8003112:	d11d      	bne.n	8003150 <I2C_ITError+0xc4>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003114:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003118:	2b60      	cmp	r3, #96	; 0x60
 800311a:	d032      	beq.n	8003182 <I2C_ITError+0xf6>
    __HAL_UNLOCK(hi2c);
 800311c:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003120:	4620      	mov	r0, r4
 8003122:	f7ff ffaf 	bl	8003084 <HAL_I2C_ErrorCallback>
 8003126:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003128:	6823      	ldr	r3, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800312a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800312e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
 8003138:	601a      	str	r2, [r3, #0]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800313a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800313e:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 8003140:	bf1c      	itt	ne
 8003142:	2220      	movne	r2, #32
 8003144:	f884 2041 	strbne.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003148:	2200      	movs	r2, #0
 800314a:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800314c:	6362      	str	r2, [r4, #52]	; 0x34
 800314e:	e7c9      	b.n	80030e4 <I2C_ITError+0x58>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003150:	6819      	ldr	r1, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8003152:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003154:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8003158:	6019      	str	r1, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800315a:	2800      	cmp	r0, #0
 800315c:	d0d5      	beq.n	800310a <I2C_ITError+0x7e>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800315e:	4b0f      	ldr	r3, [pc, #60]	; (800319c <I2C_ITError+0x110>)
 8003160:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8003162:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003166:	f7fe feaf 	bl	8001ec8 <HAL_DMA_Abort_IT>
 800316a:	2800      	cmp	r0, #0
 800316c:	d0cd      	beq.n	800310a <I2C_ITError+0x7e>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800316e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8003170:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003174:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003176:	4718      	bx	r3
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003178:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 800317a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800317e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003180:	4718      	bx	r3
    hi2c->State = HAL_I2C_STATE_READY;
 8003182:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8003184:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003188:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 800318c:	4620      	mov	r0, r4
 800318e:	f7ff ff7b 	bl	8003088 <HAL_I2C_AbortCpltCallback>
 8003192:	bd70      	pop	{r4, r5, r6, pc}
 8003194:	ffff0000 	.word	0xffff0000
 8003198:	080032f9 	.word	0x080032f9
 800319c:	080037c9 	.word	0x080037c9

080031a0 <I2C_ITSlaveCplt>:
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80031a0:	6803      	ldr	r3, [r0, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031a2:	2220      	movs	r2, #32
{
 80031a4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80031a6:	681d      	ldr	r5, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031a8:	61da      	str	r2, [r3, #28]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80031aa:	2208      	movs	r2, #8
 80031ac:	61da      	str	r2, [r3, #28]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80031ae:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80031b2:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  I2C_RESET_CR2(hi2c);
 80031b6:	4e4e      	ldr	r6, [pc, #312]	; (80032f0 <I2C_ITSlaveCplt+0x150>)
{
 80031b8:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80031ba:	6818      	ldr	r0, [r3, #0]
 80031bc:	f020 00fe 	bic.w	r0, r0, #254	; 0xfe
 80031c0:	6018      	str	r0, [r3, #0]
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80031c2:	6858      	ldr	r0, [r3, #4]
 80031c4:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80031c8:	6058      	str	r0, [r3, #4]
  I2C_RESET_CR2(hi2c);
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	4032      	ands	r2, r6
 80031ce:	605a      	str	r2, [r3, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031d0:	699a      	ldr	r2, [r3, #24]
 80031d2:	0792      	lsls	r2, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 80031d4:	bf44      	itt	mi
 80031d6:	2200      	movmi	r2, #0
 80031d8:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031da:	699a      	ldr	r2, [r3, #24]
 80031dc:	07d6      	lsls	r6, r2, #31
 80031de:	d403      	bmi.n	80031e8 <I2C_ITSlaveCplt+0x48>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80031e0:	699a      	ldr	r2, [r3, #24]
 80031e2:	f042 0201 	orr.w	r2, r2, #1
 80031e6:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80031e8:	0468      	lsls	r0, r5, #17
 80031ea:	d530      	bpl.n	800324e <I2C_ITSlaveCplt+0xae>
    if (hi2c->hdmatx != NULL)
 80031ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80031ee:	b11a      	cbz	r2, 80031f8 <I2C_ITSlaveCplt+0x58>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80031f0:	6812      	ldr	r2, [r2, #0]
 80031f2:	6852      	ldr	r2, [r2, #4]
 80031f4:	b292      	uxth	r2, r2
 80031f6:	8562      	strh	r2, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80031f8:	f011 0604 	ands.w	r6, r1, #4
 80031fc:	d007      	beq.n	800320e <I2C_ITSlaveCplt+0x6e>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 8003204:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8003206:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 8003208:	3301      	adds	r3, #1
 800320a:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800320c:	bb7a      	cbnz	r2, 800326e <I2C_ITSlaveCplt+0xce>
  if (hi2c->XferCount != 0U)
 800320e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003210:	b29b      	uxth	r3, r3
 8003212:	b11b      	cbz	r3, 800321c <I2C_ITSlaveCplt+0x7c>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003214:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003216:	f043 0304 	orr.w	r3, r3, #4
 800321a:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 800321c:	2500      	movs	r5, #0
 800321e:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003220:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003224:	6c63      	ldr	r3, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 8003226:	6365      	str	r5, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003228:	bb43      	cbnz	r3, 800327c <I2C_ITSlaveCplt+0xdc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800322a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800322c:	4931      	ldr	r1, [pc, #196]	; (80032f4 <I2C_ITSlaveCplt+0x154>)
 800322e:	428a      	cmp	r2, r1
 8003230:	d113      	bne.n	800325a <I2C_ITSlaveCplt+0xba>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003232:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003236:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800323a:	2a22      	cmp	r2, #34	; 0x22
    hi2c->State = HAL_I2C_STATE_READY;
 800323c:	f04f 0220 	mov.w	r2, #32
 8003240:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003244:	4620      	mov	r0, r4
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003246:	d050      	beq.n	80032ea <I2C_ITSlaveCplt+0x14a>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003248:	f7ff fed4 	bl	8002ff4 <HAL_I2C_SlaveTxCpltCallback>
 800324c:	bd70      	pop	{r4, r5, r6, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800324e:	042a      	lsls	r2, r5, #16
 8003250:	d5d2      	bpl.n	80031f8 <I2C_ITSlaveCplt+0x58>
    if (hi2c->hdmarx != NULL)
 8003252:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003254:	2a00      	cmp	r2, #0
 8003256:	d1cb      	bne.n	80031f0 <I2C_ITSlaveCplt+0x50>
 8003258:	e7ce      	b.n	80031f8 <I2C_ITSlaveCplt+0x58>
    hi2c->State = HAL_I2C_STATE_READY;
 800325a:	2220      	movs	r2, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800325c:	62e1      	str	r1, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hi2c);
 800325e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003262:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    HAL_I2C_ListenCpltCallback(hi2c);
 8003266:	4620      	mov	r0, r4
 8003268:	f7ff ff06 	bl	8003078 <HAL_I2C_ListenCpltCallback>
 800326c:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->XferCount--;
 800326e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003270:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8003272:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8003274:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8003276:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003278:	8563      	strh	r3, [r4, #42]	; 0x2a
 800327a:	e7c8      	b.n	800320e <I2C_ITSlaveCplt+0x6e>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800327c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800327e:	4620      	mov	r0, r4
 8003280:	f7ff ff04 	bl	800308c <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003284:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003288:	2b28      	cmp	r3, #40	; 0x28
 800328a:	d1df      	bne.n	800324c <I2C_ITSlaveCplt+0xac>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800328c:	4a19      	ldr	r2, [pc, #100]	; (80032f4 <I2C_ITSlaveCplt+0x154>)
 800328e:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 8003290:	2320      	movs	r3, #32
  hi2c->PreviousState = I2C_STATE_NONE;
 8003292:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->XferISR = NULL;
 8003294:	6365      	str	r5, [r4, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 8003296:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800329a:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800329e:	b196      	cbz	r6, 80032c6 <I2C_ITSlaveCplt+0x126>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032a0:	6822      	ldr	r2, [r4, #0]
 80032a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80032a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80032aa:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 80032ac:	3301      	adds	r3, #1
 80032ae:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80032b0:	b14a      	cbz	r2, 80032c6 <I2C_ITSlaveCplt+0x126>
      hi2c->XferCount--;
 80032b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->XferSize--;
 80032bc:	3a01      	subs	r2, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032be:	f043 0304 	orr.w	r3, r3, #4
      hi2c->XferSize--;
 80032c2:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032c4:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80032c6:	6823      	ldr	r3, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80032c8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80032cc:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80032d0:	681a      	ldr	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032d2:	2510      	movs	r5, #16
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80032d4:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
  __HAL_UNLOCK(hi2c);
 80032d8:	2100      	movs	r1, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80032da:	601a      	str	r2, [r3, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 80032dc:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032de:	61dd      	str	r5, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80032e0:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 80032e4:	f7ff fec8 	bl	8003078 <HAL_I2C_ListenCpltCallback>
 80032e8:	bd70      	pop	{r4, r5, r6, pc}
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80032ea:	f7ff fe85 	bl	8002ff8 <HAL_I2C_SlaveRxCpltCallback>
 80032ee:	bd70      	pop	{r4, r5, r6, pc}
 80032f0:	fe00e800 	.word	0xfe00e800
 80032f4:	ffff0000 	.word	0xffff0000

080032f8 <I2C_Slave_ISR_IT>:
{
 80032f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 80032fa:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 80032fe:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8003300:	2b01      	cmp	r3, #1
 8003302:	f000 80d9 	beq.w	80034b8 <I2C_Slave_ISR_IT+0x1c0>
 8003306:	4616      	mov	r6, r2
 8003308:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800330a:	06ca      	lsls	r2, r1, #27
 800330c:	4604      	mov	r4, r0
 800330e:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 8003310:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003314:	d448      	bmi.n	80033a8 <I2C_Slave_ISR_IT+0xb0>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003316:	0768      	lsls	r0, r5, #29
 8003318:	f140 808d 	bpl.w	8003436 <I2C_Slave_ISR_IT+0x13e>
 800331c:	0771      	lsls	r1, r6, #29
 800331e:	f140 808a 	bpl.w	8003436 <I2C_Slave_ISR_IT+0x13e>
    if (hi2c->XferCount > 0U)
 8003322:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003324:	b29b      	uxth	r3, r3
 8003326:	b16b      	cbz	r3, 8003344 <I2C_Slave_ISR_IT+0x4c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003328:	6822      	ldr	r2, [r4, #0]
 800332a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800332c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800332e:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8003330:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003332:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003334:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003336:	3b01      	subs	r3, #1
 8003338:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 800333a:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800333c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800333e:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003340:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003342:	8522      	strh	r2, [r4, #40]	; 0x28
    if ((hi2c->XferCount == 0U) && \
 8003344:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003346:	b29b      	uxth	r3, r3
 8003348:	bb2b      	cbnz	r3, 8003396 <I2C_Slave_ISR_IT+0x9e>
 800334a:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 800334e:	d022      	beq.n	8003396 <I2C_Slave_ISR_IT+0x9e>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003350:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003354:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8003358:	2a29      	cmp	r2, #41	; 0x29
 800335a:	f000 8109 	beq.w	8003570 <I2C_Slave_ISR_IT+0x278>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800335e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8003362:	2a2a      	cmp	r2, #42	; 0x2a
 8003364:	d117      	bne.n	8003396 <I2C_Slave_ISR_IT+0x9e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003366:	2128      	movs	r1, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003368:	2222      	movs	r2, #34	; 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800336a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800336e:	6322      	str	r2, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003370:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003374:	6821      	ldr	r1, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003376:	f002 0228 	and.w	r2, r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800337a:	6808      	ldr	r0, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800337c:	2a28      	cmp	r2, #40	; 0x28
 800337e:	bf14      	ite	ne
 8003380:	f06f 02f4 	mvnne.w	r2, #244	; 0xf4
 8003384:	f06f 0244 	mvneq.w	r2, #68	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003388:	4002      	ands	r2, r0
 800338a:	600a      	str	r2, [r1, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800338c:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 800338e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003392:	f7ff fe31 	bl	8002ff8 <HAL_I2C_SlaveRxCpltCallback>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003396:	06aa      	lsls	r2, r5, #26
 8003398:	d502      	bpl.n	80033a0 <I2C_Slave_ISR_IT+0xa8>
 800339a:	06b3      	lsls	r3, r6, #26
 800339c:	f100 808e 	bmi.w	80034bc <I2C_Slave_ISR_IT+0x1c4>
  __HAL_UNLOCK(hi2c);
 80033a0:	2000      	movs	r0, #0
 80033a2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return HAL_OK;
 80033a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80033a8:	06f3      	lsls	r3, r6, #27
 80033aa:	d5b4      	bpl.n	8003316 <I2C_Slave_ISR_IT+0x1e>
    if (hi2c->XferCount == 0U)
 80033ac:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f040 8088 	bne.w	80034c6 <I2C_Slave_ISR_IT+0x1ce>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80033b6:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80033ba:	2a28      	cmp	r2, #40	; 0x28
 80033bc:	f000 80a0 	beq.w	8003500 <I2C_Slave_ISR_IT+0x208>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80033c0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80033c4:	2b29      	cmp	r3, #41	; 0x29
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033c6:	6823      	ldr	r3, [r4, #0]
 80033c8:	f04f 0210 	mov.w	r2, #16
 80033cc:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80033ce:	d1e2      	bne.n	8003396 <I2C_Slave_ISR_IT+0x9e>
 80033d0:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 80033d4:	d0df      	beq.n	8003396 <I2C_Slave_ISR_IT+0x9e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80033d6:	699a      	ldr	r2, [r3, #24]
 80033d8:	0792      	lsls	r2, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 80033da:	bf44      	itt	mi
 80033dc:	2200      	movmi	r2, #0
 80033de:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033e0:	699a      	ldr	r2, [r3, #24]
 80033e2:	07d7      	lsls	r7, r2, #31
 80033e4:	d403      	bmi.n	80033ee <I2C_Slave_ISR_IT+0xf6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033e6:	699a      	ldr	r2, [r3, #24]
 80033e8:	f042 0201 	orr.w	r2, r2, #1
 80033ec:	619a      	str	r2, [r3, #24]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ee:	2200      	movs	r2, #0
 80033f0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80033f4:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 80033f8:	2929      	cmp	r1, #41	; 0x29
 80033fa:	f000 80eb 	beq.w	80035d4 <I2C_Slave_ISR_IT+0x2dc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80033fe:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8003402:	292a      	cmp	r1, #42	; 0x2a
 8003404:	d1c7      	bne.n	8003396 <I2C_Slave_ISR_IT+0x9e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003406:	2028      	movs	r0, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003408:	2122      	movs	r1, #34	; 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800340a:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800340e:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003410:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003414:	6818      	ldr	r0, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003416:	f001 0128 	and.w	r1, r1, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800341a:	2928      	cmp	r1, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800341c:	bf14      	ite	ne
 800341e:	f06f 01f4 	mvnne.w	r1, #244	; 0xf4
 8003422:	f06f 0144 	mvneq.w	r1, #68	; 0x44
 8003426:	4001      	ands	r1, r0
 8003428:	6019      	str	r1, [r3, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800342a:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 800342c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003430:	f7ff fde2 	bl	8002ff8 <HAL_I2C_SlaveRxCpltCallback>
 8003434:	e7af      	b.n	8003396 <I2C_Slave_ISR_IT+0x9e>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003436:	072a      	lsls	r2, r5, #28
 8003438:	d50f      	bpl.n	800345a <I2C_Slave_ISR_IT+0x162>
 800343a:	0733      	lsls	r3, r6, #28
 800343c:	d50d      	bpl.n	800345a <I2C_Slave_ISR_IT+0x162>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800343e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003442:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003446:	2b28      	cmp	r3, #40	; 0x28
 8003448:	f000 808e 	beq.w	8003568 <I2C_Slave_ISR_IT+0x270>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800344c:	6822      	ldr	r2, [r4, #0]
 800344e:	2108      	movs	r1, #8
    __HAL_UNLOCK(hi2c);
 8003450:	2300      	movs	r3, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003452:	61d1      	str	r1, [r2, #28]
    __HAL_UNLOCK(hi2c);
 8003454:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003458:	e79d      	b.n	8003396 <I2C_Slave_ISR_IT+0x9e>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800345a:	07a8      	lsls	r0, r5, #30
 800345c:	d59b      	bpl.n	8003396 <I2C_Slave_ISR_IT+0x9e>
 800345e:	07b1      	lsls	r1, r6, #30
 8003460:	d599      	bpl.n	8003396 <I2C_Slave_ISR_IT+0x9e>
    if (hi2c->XferCount > 0U)
 8003462:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003464:	b29b      	uxth	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d13c      	bne.n	80034e4 <I2C_Slave_ISR_IT+0x1ec>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800346a:	f037 7780 	bics.w	r7, r7, #16777216	; 0x1000000
 800346e:	d192      	bne.n	8003396 <I2C_Slave_ISR_IT+0x9e>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003470:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003474:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003478:	2b29      	cmp	r3, #41	; 0x29
 800347a:	f000 8092 	beq.w	80035a2 <I2C_Slave_ISR_IT+0x2aa>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800347e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003482:	2b2a      	cmp	r3, #42	; 0x2a
 8003484:	d187      	bne.n	8003396 <I2C_Slave_ISR_IT+0x9e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003486:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003488:	2322      	movs	r3, #34	; 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800348a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800348e:	6323      	str	r3, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003490:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003494:	6822      	ldr	r2, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003496:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800349a:	2b28      	cmp	r3, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800349c:	6811      	ldr	r1, [r2, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800349e:	bf14      	ite	ne
 80034a0:	f06f 03f4 	mvnne.w	r3, #244	; 0xf4
 80034a4:	f06f 0344 	mvneq.w	r3, #68	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80034a8:	400b      	ands	r3, r1
 80034aa:	6013      	str	r3, [r2, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80034ac:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80034ae:	f884 7040 	strb.w	r7, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80034b2:	f7ff fda1 	bl	8002ff8 <HAL_I2C_SlaveRxCpltCallback>
 80034b6:	e76e      	b.n	8003396 <I2C_Slave_ISR_IT+0x9e>
  __HAL_LOCK(hi2c);
 80034b8:	2002      	movs	r0, #2
}
 80034ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80034bc:	4629      	mov	r1, r5
 80034be:	4620      	mov	r0, r4
 80034c0:	f7ff fe6e 	bl	80031a0 <I2C_ITSlaveCplt>
 80034c4:	e76c      	b.n	80033a0 <I2C_Slave_ISR_IT+0xa8>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034c6:	6803      	ldr	r3, [r0, #0]
 80034c8:	2210      	movs	r2, #16
 80034ca:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034cc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80034ce:	f043 0304 	orr.w	r3, r3, #4
 80034d2:	6443      	str	r3, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80034d4:	f037 7380 	bics.w	r3, r7, #16777216	; 0x1000000
 80034d8:	f47f af5d 	bne.w	8003396 <I2C_Slave_ISR_IT+0x9e>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80034dc:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80034de:	f7ff fdd5 	bl	800308c <I2C_ITError>
 80034e2:	e758      	b.n	8003396 <I2C_Slave_ISR_IT+0x9e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80034e6:	6823      	ldr	r3, [r4, #0]
 80034e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80034ec:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80034f0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80034f2:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80034f8:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80034fa:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80034fc:	8522      	strh	r2, [r4, #40]	; 0x28
 80034fe:	e74a      	b.n	8003396 <I2C_Slave_ISR_IT+0x9e>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003500:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 8003504:	f47f af5c 	bne.w	80033c0 <I2C_Slave_ISR_IT+0xc8>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003508:	493e      	ldr	r1, [pc, #248]	; (8003604 <I2C_Slave_ISR_IT+0x30c>)
 800350a:	62c1      	str	r1, [r0, #44]	; 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 800350c:	2220      	movs	r2, #32
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800350e:	0769      	lsls	r1, r5, #29
  hi2c->PreviousState = I2C_STATE_NONE;
 8003510:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR = NULL;
 8003512:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 8003514:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003518:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800351c:	d512      	bpl.n	8003544 <I2C_Slave_ISR_IT+0x24c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800351e:	6802      	ldr	r2, [r0, #0]
 8003520:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003522:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003524:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003526:	6a43      	ldr	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8003528:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    hi2c->pBuffPtr++;
 800352a:	3301      	adds	r3, #1
 800352c:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800352e:	b14a      	cbz	r2, 8003544 <I2C_Slave_ISR_IT+0x24c>
      hi2c->XferCount--;
 8003530:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003532:	3b01      	subs	r3, #1
 8003534:	b29b      	uxth	r3, r3
 8003536:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003538:	6c43      	ldr	r3, [r0, #68]	; 0x44
      hi2c->XferSize--;
 800353a:	3a01      	subs	r2, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800353c:	f043 0304 	orr.w	r3, r3, #4
      hi2c->XferSize--;
 8003540:	8502      	strh	r2, [r0, #40]	; 0x28
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003542:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003544:	6823      	ldr	r3, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003546:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800354a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800354e:	681a      	ldr	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003550:	2710      	movs	r7, #16
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003552:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
  __HAL_UNLOCK(hi2c);
 8003556:	2100      	movs	r1, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003558:	601a      	str	r2, [r3, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 800355a:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800355c:	61df      	str	r7, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800355e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8003562:	f7ff fd89 	bl	8003078 <HAL_I2C_ListenCpltCallback>
 8003566:	e716      	b.n	8003396 <I2C_Slave_ISR_IT+0x9e>
 8003568:	4620      	mov	r0, r4
 800356a:	f7ff fd49 	bl	8003000 <I2C_ITAddrCplt.isra.8.part.9>
 800356e:	e712      	b.n	8003396 <I2C_Slave_ISR_IT+0x9e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003570:	2128      	movs	r1, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003572:	2221      	movs	r2, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003574:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003578:	6322      	str	r2, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800357a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800357e:	6821      	ldr	r1, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003580:	f002 0228 	and.w	r2, r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003584:	6808      	ldr	r0, [r1, #0]
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003586:	2a28      	cmp	r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003588:	bf14      	ite	ne
 800358a:	f06f 02f2 	mvnne.w	r2, #242	; 0xf2
 800358e:	f06f 0242 	mvneq.w	r2, #66	; 0x42
 8003592:	4002      	ands	r2, r0
 8003594:	600a      	str	r2, [r1, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003596:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8003598:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800359c:	f7ff fd2a 	bl	8002ff4 <HAL_I2C_SlaveTxCpltCallback>
 80035a0:	e6f9      	b.n	8003396 <I2C_Slave_ISR_IT+0x9e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80035a2:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80035a4:	2321      	movs	r3, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80035a6:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80035aa:	6323      	str	r3, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80035ac:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80035b0:	6822      	ldr	r2, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80035b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80035b6:	2b28      	cmp	r3, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80035b8:	6811      	ldr	r1, [r2, #0]
 80035ba:	bf14      	ite	ne
 80035bc:	f06f 03f2 	mvnne.w	r3, #242	; 0xf2
 80035c0:	f06f 0342 	mvneq.w	r3, #66	; 0x42
 80035c4:	400b      	ands	r3, r1
 80035c6:	6013      	str	r3, [r2, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80035c8:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80035ca:	f884 7040 	strb.w	r7, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80035ce:	f7ff fd11 	bl	8002ff4 <HAL_I2C_SlaveTxCpltCallback>
 80035d2:	e6e0      	b.n	8003396 <I2C_Slave_ISR_IT+0x9e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80035d4:	2028      	movs	r0, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80035d6:	2121      	movs	r1, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80035d8:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80035dc:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80035de:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80035e2:	6818      	ldr	r0, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80035e4:	f001 0128 	and.w	r1, r1, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80035e8:	2928      	cmp	r1, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80035ea:	bf14      	ite	ne
 80035ec:	f06f 01f2 	mvnne.w	r1, #242	; 0xf2
 80035f0:	f06f 0142 	mvneq.w	r1, #66	; 0x42
 80035f4:	4001      	ands	r1, r0
 80035f6:	6019      	str	r1, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80035f8:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80035fa:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80035fe:	f7ff fcf9 	bl	8002ff4 <HAL_I2C_SlaveTxCpltCallback>
 8003602:	e6c8      	b.n	8003396 <I2C_Slave_ISR_IT+0x9e>
 8003604:	ffff0000 	.word	0xffff0000

08003608 <I2C_Slave_ISR_DMA>:
{
 8003608:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hi2c);
 800360a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 800360e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8003610:	2b01      	cmp	r3, #1
 8003612:	d06c      	beq.n	80036ee <I2C_Slave_ISR_DMA+0xe6>
 8003614:	2301      	movs	r3, #1
 8003616:	4604      	mov	r4, r0
 8003618:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800361c:	06c8      	lsls	r0, r1, #27
 800361e:	d410      	bmi.n	8003642 <I2C_Slave_ISR_DMA+0x3a>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003620:	070b      	lsls	r3, r1, #28
 8003622:	d55c      	bpl.n	80036de <I2C_Slave_ISR_DMA+0xd6>
 8003624:	0715      	lsls	r5, r2, #28
 8003626:	d55a      	bpl.n	80036de <I2C_Slave_ISR_DMA+0xd6>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003628:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800362c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003630:	2b28      	cmp	r3, #40	; 0x28
 8003632:	d077      	beq.n	8003724 <I2C_Slave_ISR_DMA+0x11c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003634:	6823      	ldr	r3, [r4, #0]
 8003636:	2208      	movs	r2, #8
 8003638:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800363a:	2000      	movs	r0, #0
 800363c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8003640:	bd38      	pop	{r3, r4, r5, pc}
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003642:	06d3      	lsls	r3, r2, #27
 8003644:	d5ec      	bpl.n	8003620 <I2C_Slave_ISR_DMA+0x18>
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003646:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 800364a:	d052      	beq.n	80036f2 <I2C_Slave_ISR_DMA+0xea>
      if (hi2c->hdmarx != NULL)
 800364c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800364e:	2b00      	cmp	r3, #0
 8003650:	d053      	beq.n	80036fa <I2C_Slave_ISR_DMA+0xf2>
        if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d14f      	bne.n	80036fa <I2C_Slave_ISR_DMA+0xf2>
      if (hi2c->hdmatx != NULL)
 800365a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800365c:	b10b      	cbz	r3, 8003662 <I2C_Slave_ISR_DMA+0x5a>
        if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003662:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003666:	2b28      	cmp	r3, #40	; 0x28
 8003668:	d060      	beq.n	800372c <I2C_Slave_ISR_DMA+0x124>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800366a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800366e:	2b29      	cmp	r3, #41	; 0x29
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003670:	6823      	ldr	r3, [r4, #0]
 8003672:	f04f 0210 	mov.w	r2, #16
 8003676:	61da      	str	r2, [r3, #28]
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003678:	d1df      	bne.n	800363a <I2C_Slave_ISR_DMA+0x32>
 800367a:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 800367e:	d0dc      	beq.n	800363a <I2C_Slave_ISR_DMA+0x32>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003680:	699a      	ldr	r2, [r3, #24]
 8003682:	0791      	lsls	r1, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8003684:	bf44      	itt	mi
 8003686:	2200      	movmi	r2, #0
 8003688:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800368a:	699a      	ldr	r2, [r3, #24]
 800368c:	07d2      	lsls	r2, r2, #31
 800368e:	d403      	bmi.n	8003698 <I2C_Slave_ISR_DMA+0x90>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003690:	699a      	ldr	r2, [r3, #24]
 8003692:	f042 0201 	orr.w	r2, r2, #1
 8003696:	619a      	str	r2, [r3, #24]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003698:	2200      	movs	r2, #0
 800369a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800369e:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 80036a2:	2929      	cmp	r1, #41	; 0x29
 80036a4:	d076      	beq.n	8003794 <I2C_Slave_ISR_DMA+0x18c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80036a6:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 80036aa:	292a      	cmp	r1, #42	; 0x2a
 80036ac:	d1c5      	bne.n	800363a <I2C_Slave_ISR_DMA+0x32>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80036ae:	2028      	movs	r0, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80036b0:	2122      	movs	r1, #34	; 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80036b2:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80036b6:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80036b8:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80036bc:	6818      	ldr	r0, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80036be:	f001 0128 	and.w	r1, r1, #40	; 0x28
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80036c2:	2928      	cmp	r1, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80036c4:	bf14      	ite	ne
 80036c6:	f06f 01f4 	mvnne.w	r1, #244	; 0xf4
 80036ca:	f06f 0144 	mvneq.w	r1, #68	; 0x44
 80036ce:	4001      	ands	r1, r0
 80036d0:	6019      	str	r1, [r3, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80036d2:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80036d4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80036d8:	f7ff fc8e 	bl	8002ff8 <HAL_I2C_SlaveRxCpltCallback>
 80036dc:	e7ad      	b.n	800363a <I2C_Slave_ISR_DMA+0x32>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80036de:	0688      	lsls	r0, r1, #26
 80036e0:	d5ab      	bpl.n	800363a <I2C_Slave_ISR_DMA+0x32>
 80036e2:	0693      	lsls	r3, r2, #26
 80036e4:	d5a9      	bpl.n	800363a <I2C_Slave_ISR_DMA+0x32>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80036e6:	4620      	mov	r0, r4
 80036e8:	f7ff fd5a 	bl	80031a0 <I2C_ITSlaveCplt>
 80036ec:	e7a5      	b.n	800363a <I2C_Slave_ISR_DMA+0x32>
  __HAL_LOCK(hi2c);
 80036ee:	2002      	movs	r0, #2
 80036f0:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036f2:	6823      	ldr	r3, [r4, #0]
 80036f4:	2210      	movs	r2, #16
 80036f6:	61da      	str	r2, [r3, #28]
 80036f8:	e79f      	b.n	800363a <I2C_Slave_ISR_DMA+0x32>
      if (hi2c->hdmatx != NULL)
 80036fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80036fc:	b11b      	cbz	r3, 8003706 <I2C_Slave_ISR_DMA+0xfe>
        if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0ad      	beq.n	8003662 <I2C_Slave_ISR_DMA+0x5a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003706:	6823      	ldr	r3, [r4, #0]
 8003708:	2210      	movs	r2, #16
 800370a:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800370c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800370e:	f043 0304 	orr.w	r3, r3, #4
 8003712:	6463      	str	r3, [r4, #68]	; 0x44
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003714:	f035 7380 	bics.w	r3, r5, #16777216	; 0x1000000
 8003718:	d18f      	bne.n	800363a <I2C_Slave_ISR_DMA+0x32>
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800371a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800371c:	4620      	mov	r0, r4
 800371e:	f7ff fcb5 	bl	800308c <I2C_ITError>
 8003722:	e78a      	b.n	800363a <I2C_Slave_ISR_DMA+0x32>
 8003724:	4620      	mov	r0, r4
 8003726:	f7ff fc6b 	bl	8003000 <I2C_ITAddrCplt.isra.8.part.9>
 800372a:	e786      	b.n	800363a <I2C_Slave_ISR_DMA+0x32>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800372c:	f1b5 7f00 	cmp.w	r5, #33554432	; 0x2000000
 8003730:	d19b      	bne.n	800366a <I2C_Slave_ISR_DMA+0x62>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003732:	4b24      	ldr	r3, [pc, #144]	; (80037c4 <I2C_Slave_ISR_DMA+0x1bc>)
 8003734:	62e3      	str	r3, [r4, #44]	; 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 8003736:	2220      	movs	r2, #32
  hi2c->PreviousState = I2C_STATE_NONE;
 8003738:	2300      	movs	r3, #0
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800373a:	0748      	lsls	r0, r1, #29
  hi2c->PreviousState = I2C_STATE_NONE;
 800373c:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->XferISR = NULL;
 800373e:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 8003740:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003744:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003748:	d512      	bpl.n	8003770 <I2C_Slave_ISR_DMA+0x168>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800374a:	6822      	ldr	r2, [r4, #0]
 800374c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800374e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003750:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003752:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8003754:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 8003756:	3301      	adds	r3, #1
 8003758:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800375a:	b14a      	cbz	r2, 8003770 <I2C_Slave_ISR_DMA+0x168>
      hi2c->XferCount--;
 800375c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800375e:	3b01      	subs	r3, #1
 8003760:	b29b      	uxth	r3, r3
 8003762:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003764:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->XferSize--;
 8003766:	3a01      	subs	r2, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003768:	f043 0304 	orr.w	r3, r3, #4
      hi2c->XferSize--;
 800376c:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800376e:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003770:	6823      	ldr	r3, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003772:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003776:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800377a:	681a      	ldr	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800377c:	2510      	movs	r5, #16
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800377e:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
  __HAL_UNLOCK(hi2c);
 8003782:	2100      	movs	r1, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003784:	601a      	str	r2, [r3, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 8003786:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003788:	61dd      	str	r5, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800378a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 800378e:	f7ff fc73 	bl	8003078 <HAL_I2C_ListenCpltCallback>
 8003792:	e752      	b.n	800363a <I2C_Slave_ISR_DMA+0x32>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003794:	2028      	movs	r0, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003796:	2121      	movs	r1, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003798:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800379c:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800379e:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80037a2:	6818      	ldr	r0, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80037a4:	f001 0128 	and.w	r1, r1, #40	; 0x28
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80037a8:	2928      	cmp	r1, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80037aa:	bf14      	ite	ne
 80037ac:	f06f 01f2 	mvnne.w	r1, #242	; 0xf2
 80037b0:	f06f 0142 	mvneq.w	r1, #66	; 0x42
 80037b4:	4001      	ands	r1, r0
 80037b6:	6019      	str	r1, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80037b8:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80037ba:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80037be:	f7ff fc19 	bl	8002ff4 <HAL_I2C_SlaveTxCpltCallback>
 80037c2:	e73a      	b.n	800363a <I2C_Slave_ISR_DMA+0x32>
 80037c4:	ffff0000 	.word	0xffff0000

080037c8 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80037c8:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80037ca:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  hi2c->hdmarx->XferAbortCallback = NULL;
 80037ce:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
{
 80037d0:	b510      	push	{r4, lr}
  hi2c->hdmatx->XferAbortCallback = NULL;
 80037d2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80037d4:	2300      	movs	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80037d6:	2a60      	cmp	r2, #96	; 0x60
  hi2c->hdmatx->XferAbortCallback = NULL;
 80037d8:	63a3      	str	r3, [r4, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 80037da:	638b      	str	r3, [r1, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80037dc:	d002      	beq.n	80037e4 <I2C_DMAAbort+0x1c>
    HAL_I2C_ErrorCallback(hi2c);
 80037de:	f7ff fc51 	bl	8003084 <HAL_I2C_ErrorCallback>
 80037e2:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80037e4:	2320      	movs	r3, #32
 80037e6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 80037ea:	f7ff fc4d 	bl	8003088 <HAL_I2C_AbortCpltCallback>
 80037ee:	bd10      	pop	{r4, pc}

080037f0 <I2C_ITMasterCplt>:
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037f0:	6803      	ldr	r3, [r0, #0]
 80037f2:	2220      	movs	r2, #32
{
 80037f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037f8:	61da      	str	r2, [r3, #28]
  I2C_RESET_CR2(hi2c);
 80037fa:	685a      	ldr	r2, [r3, #4]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80037fc:	4d78      	ldr	r5, [pc, #480]	; (80039e0 <I2C_ITMasterCplt+0x1f0>)
{
 80037fe:	4604      	mov	r4, r0
  I2C_RESET_CR2(hi2c);
 8003800:	4878      	ldr	r0, [pc, #480]	; (80039e4 <I2C_ITMasterCplt+0x1f4>)
 8003802:	4002      	ands	r2, r0
  hi2c->PreviousState = I2C_STATE_NONE;
 8003804:	2000      	movs	r0, #0
  I2C_RESET_CR2(hi2c);
 8003806:	605a      	str	r2, [r3, #4]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003808:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->XferISR       = NULL;
 800380a:	6360      	str	r0, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 800380c:	06c8      	lsls	r0, r1, #27
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800380e:	62e5      	str	r5, [r4, #44]	; 0x2c
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 8003810:	d505      	bpl.n	800381e <I2C_ITMasterCplt+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003812:	2210      	movs	r2, #16
 8003814:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003816:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003818:	f042 0204 	orr.w	r2, r2, #4
 800381c:	6462      	str	r2, [r4, #68]	; 0x44
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800381e:	699a      	ldr	r2, [r3, #24]
 8003820:	0791      	lsls	r1, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8003822:	bf44      	itt	mi
 8003824:	2200      	movmi	r2, #0
 8003826:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003828:	699a      	ldr	r2, [r3, #24]
 800382a:	07d2      	lsls	r2, r2, #31
 800382c:	d403      	bmi.n	8003836 <I2C_ITMasterCplt+0x46>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800382e:	699a      	ldr	r2, [r3, #24]
 8003830:	f042 0201 	orr.w	r2, r2, #1
 8003834:	619a      	str	r2, [r3, #24]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003836:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800383a:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800383e:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003840:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8003844:	2928      	cmp	r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003846:	f000 0028 	and.w	r0, r0, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800384a:	bf14      	ite	ne
 800384c:	f06f 01f6 	mvnne.w	r1, #246	; 0xf6
 8003850:	f06f 0146 	mvneq.w	r1, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003854:	2828      	cmp	r0, #40	; 0x28
 8003856:	bf18      	it	ne
 8003858:	f06f 01f6 	mvnne.w	r1, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800385c:	400a      	ands	r2, r1
 800385e:	601a      	str	r2, [r3, #0]
  tmperror = hi2c->ErrorCode;
 8003860:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003862:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8003866:	2960      	cmp	r1, #96	; 0x60
 8003868:	d00b      	beq.n	8003882 <I2C_ITMasterCplt+0x92>
 800386a:	b952      	cbnz	r2, 8003882 <I2C_ITMasterCplt+0x92>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800386c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003870:	2b21      	cmp	r3, #33	; 0x21
 8003872:	d077      	beq.n	8003964 <I2C_ITMasterCplt+0x174>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003874:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003878:	2b22      	cmp	r3, #34	; 0x22
 800387a:	f000 808e 	beq.w	800399a <I2C_ITMasterCplt+0x1aa>
 800387e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003882:	2000      	movs	r0, #0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003884:	4d56      	ldr	r5, [pc, #344]	; (80039e0 <I2C_ITMasterCplt+0x1f0>)
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003886:	6c61      	ldr	r1, [r4, #68]	; 0x44
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003888:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800388c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003890:	62e5      	str	r5, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003892:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8003894:	6c65      	ldr	r5, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003896:	3a28      	subs	r2, #40	; 0x28
  hi2c->ErrorCode |= ErrorCode;
 8003898:	4329      	orrs	r1, r5
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800389a:	2a02      	cmp	r2, #2
  hi2c->ErrorCode |= ErrorCode;
 800389c:	6461      	str	r1, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800389e:	d833      	bhi.n	8003908 <I2C_ITMasterCplt+0x118>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80038a0:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80038a4:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80038a8:	681f      	ldr	r7, [r3, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80038aa:	4e4f      	ldr	r6, [pc, #316]	; (80039e8 <I2C_ITMasterCplt+0x1f8>)
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80038ac:	f005 0528 	and.w	r5, r5, #40	; 0x28
 80038b0:	2d28      	cmp	r5, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80038b2:	f001 0128 	and.w	r1, r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80038b6:	bf14      	ite	ne
 80038b8:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
 80038bc:	f06f 0246 	mvneq.w	r2, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80038c0:	2928      	cmp	r1, #40	; 0x28
 80038c2:	bf18      	it	ne
 80038c4:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80038c8:	403a      	ands	r2, r7
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80038ca:	2128      	movs	r1, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80038cc:	601a      	str	r2, [r3, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80038ce:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80038d2:	6320      	str	r0, [r4, #48]	; 0x30
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80038d4:	681a      	ldr	r2, [r3, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80038d6:	6366      	str	r6, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80038d8:	f412 4280 	ands.w	r2, r2, #16384	; 0x4000
 80038dc:	d02a      	beq.n	8003934 <I2C_ITMasterCplt+0x144>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80038de:	681a      	ldr	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 80038e0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80038e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038e6:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 80038e8:	2800      	cmp	r0, #0
 80038ea:	d0c8      	beq.n	800387e <I2C_ITMasterCplt+0x8e>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80038ec:	4b3f      	ldr	r3, [pc, #252]	; (80039ec <I2C_ITMasterCplt+0x1fc>)
 80038ee:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 80038f0:	2300      	movs	r3, #0
 80038f2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80038f6:	f7fe fae7 	bl	8001ec8 <HAL_DMA_Abort_IT>
 80038fa:	2800      	cmp	r0, #0
 80038fc:	d0bf      	beq.n	800387e <I2C_ITMasterCplt+0x8e>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80038fe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 8003900:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003904:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003906:	4718      	bx	r3
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003908:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800390c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
 8003916:	601a      	str	r2, [r3, #0]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003918:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800391c:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 800391e:	bf1c      	itt	ne
 8003920:	2220      	movne	r2, #32
 8003922:	f884 2041 	strbne.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003926:	2200      	movs	r2, #0
 8003928:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800392a:	6362      	str	r2, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	f412 4280 	ands.w	r2, r2, #16384	; 0x4000
 8003932:	d1d4      	bne.n	80038de <I2C_ITMasterCplt+0xee>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003934:	6819      	ldr	r1, [r3, #0]
 8003936:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
 800393a:	d023      	beq.n	8003984 <I2C_ITMasterCplt+0x194>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800393c:	6819      	ldr	r1, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800393e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003940:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8003944:	6019      	str	r1, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8003946:	2800      	cmp	r0, #0
 8003948:	d099      	beq.n	800387e <I2C_ITMasterCplt+0x8e>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800394a:	4b28      	ldr	r3, [pc, #160]	; (80039ec <I2C_ITMasterCplt+0x1fc>)
 800394c:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800394e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003952:	f7fe fab9 	bl	8001ec8 <HAL_DMA_Abort_IT>
 8003956:	2800      	cmp	r0, #0
 8003958:	d091      	beq.n	800387e <I2C_ITMasterCplt+0x8e>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800395a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 800395c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003960:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003962:	4718      	bx	r3
    hi2c->State = HAL_I2C_STATE_READY;
 8003964:	2320      	movs	r3, #32
 8003966:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800396a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800396e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003972:	2b40      	cmp	r3, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003974:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003978:	4620      	mov	r0, r4
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800397a:	d01e      	beq.n	80039ba <I2C_ITMasterCplt+0x1ca>
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800397c:	f7ff fb36 	bl	8002fec <HAL_I2C_MasterTxCpltCallback>
 8003980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003984:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003988:	2b60      	cmp	r3, #96	; 0x60
 800398a:	d01e      	beq.n	80039ca <I2C_ITMasterCplt+0x1da>
    __HAL_UNLOCK(hi2c);
 800398c:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003990:	4620      	mov	r0, r4
 8003992:	f7ff fb77 	bl	8003084 <HAL_I2C_ErrorCallback>
 8003996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800399a:	2320      	movs	r3, #32
 800399c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039a0:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80039a4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039a8:	2b40      	cmp	r3, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039aa:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      HAL_I2C_MemRxCpltCallback(hi2c);
 80039ae:	4620      	mov	r0, r4
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039b0:	d007      	beq.n	80039c2 <I2C_ITMasterCplt+0x1d2>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80039b2:	f7ff fb1d 	bl	8002ff0 <HAL_I2C_MasterRxCpltCallback>
 80039b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      HAL_I2C_MemTxCpltCallback(hi2c);
 80039ba:	f7ff fb5f 	bl	800307c <HAL_I2C_MemTxCpltCallback>
 80039be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      HAL_I2C_MemRxCpltCallback(hi2c);
 80039c2:	f7ff fb5d 	bl	8003080 <HAL_I2C_MemRxCpltCallback>
 80039c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80039ca:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 80039cc:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80039d0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 80039d4:	4620      	mov	r0, r4
 80039d6:	f7ff fb57 	bl	8003088 <HAL_I2C_AbortCpltCallback>
 80039da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039de:	bf00      	nop
 80039e0:	ffff0000 	.word	0xffff0000
 80039e4:	fe00e800 	.word	0xfe00e800
 80039e8:	080032f9 	.word	0x080032f9
 80039ec:	080037c9 	.word	0x080037c9

080039f0 <I2C_Master_ISR_IT>:
{
 80039f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 80039f2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d068      	beq.n	8003acc <I2C_Master_ISR_IT+0xdc>
 80039fa:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80039fc:	06cf      	lsls	r7, r1, #27
 80039fe:	4616      	mov	r6, r2
 8003a00:	460d      	mov	r5, r1
 8003a02:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 8003a04:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003a08:	d412      	bmi.n	8003a30 <I2C_Master_ISR_IT+0x40>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003a0a:	076f      	lsls	r7, r5, #29
 8003a0c:	d526      	bpl.n	8003a5c <I2C_Master_ISR_IT+0x6c>
 8003a0e:	0770      	lsls	r0, r6, #29
 8003a10:	d524      	bpl.n	8003a5c <I2C_Master_ISR_IT+0x6c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a12:	6822      	ldr	r2, [r4, #0]
 8003a14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a16:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a18:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8003a1a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003a1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hi2c->XferSize--;
 8003a1e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->XferCount--;
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8003a24:	3101      	adds	r1, #1
    hi2c->XferSize--;
 8003a26:	3a01      	subs	r2, #1
    hi2c->XferCount--;
 8003a28:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003a2a:	6261      	str	r1, [r4, #36]	; 0x24
    hi2c->XferSize--;
 8003a2c:	8522      	strh	r2, [r4, #40]	; 0x28
 8003a2e:	e026      	b.n	8003a7e <I2C_Master_ISR_IT+0x8e>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003a30:	06d0      	lsls	r0, r2, #27
 8003a32:	d5ea      	bpl.n	8003a0a <I2C_Master_ISR_IT+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a34:	6823      	ldr	r3, [r4, #0]
 8003a36:	2210      	movs	r2, #16
 8003a38:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a3a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003a3c:	f042 0204 	orr.w	r2, r2, #4
 8003a40:	6462      	str	r2, [r4, #68]	; 0x44
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a42:	699a      	ldr	r2, [r3, #24]
 8003a44:	0791      	lsls	r1, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8003a46:	bf44      	itt	mi
 8003a48:	2200      	movmi	r2, #0
 8003a4a:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a4c:	699a      	ldr	r2, [r3, #24]
 8003a4e:	07d2      	lsls	r2, r2, #31
 8003a50:	d415      	bmi.n	8003a7e <I2C_Master_ISR_IT+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a52:	699a      	ldr	r2, [r3, #24]
 8003a54:	f042 0201 	orr.w	r2, r2, #1
 8003a58:	619a      	str	r2, [r3, #24]
 8003a5a:	e010      	b.n	8003a7e <I2C_Master_ISR_IT+0x8e>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003a5c:	07a9      	lsls	r1, r5, #30
 8003a5e:	d516      	bpl.n	8003a8e <I2C_Master_ISR_IT+0x9e>
 8003a60:	07b2      	lsls	r2, r6, #30
 8003a62:	d514      	bpl.n	8003a8e <I2C_Master_ISR_IT+0x9e>
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a64:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a6c:	629a      	str	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8003a6e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize--;
 8003a70:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 8003a72:	6261      	str	r1, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29b      	uxth	r3, r3
    hi2c->XferSize--;
 8003a78:	3a01      	subs	r2, #1
    hi2c->XferCount--;
 8003a7a:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize--;
 8003a7c:	8522      	strh	r2, [r4, #40]	; 0x28
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003a7e:	06aa      	lsls	r2, r5, #26
 8003a80:	d501      	bpl.n	8003a86 <I2C_Master_ISR_IT+0x96>
 8003a82:	06b3      	lsls	r3, r6, #26
 8003a84:	d43a      	bmi.n	8003afc <I2C_Master_ISR_IT+0x10c>
  __HAL_UNLOCK(hi2c);
 8003a86:	2000      	movs	r0, #0
 8003a88:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
 8003a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003a8e:	062b      	lsls	r3, r5, #24
 8003a90:	d51e      	bpl.n	8003ad0 <I2C_Master_ISR_IT+0xe0>
 8003a92:	0677      	lsls	r7, r6, #25
 8003a94:	d5f3      	bpl.n	8003a7e <I2C_Master_ISR_IT+0x8e>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a96:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d033      	beq.n	8003b06 <I2C_Master_ISR_IT+0x116>
 8003a9e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d130      	bne.n	8003b06 <I2C_Master_ISR_IT+0x116>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003aa4:	6822      	ldr	r2, [r4, #0]
 8003aa6:	6851      	ldr	r1, [r2, #4]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003aa8:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8003aaa:	b280      	uxth	r0, r0
 8003aac:	28ff      	cmp	r0, #255	; 0xff
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003aae:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ab2:	d972      	bls.n	8003b9a <I2C_Master_ISR_IT+0x1aa>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003ab4:	6853      	ldr	r3, [r2, #4]
 8003ab6:	485c      	ldr	r0, [pc, #368]	; (8003c28 <I2C_Master_ISR_IT+0x238>)
 8003ab8:	4003      	ands	r3, r0
 8003aba:	f043 73ff 	orr.w	r3, r3, #33423360	; 0x1fe0000
 8003abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac2:	430b      	orrs	r3, r1
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ac4:	21ff      	movs	r1, #255	; 0xff
 8003ac6:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003ac8:	6053      	str	r3, [r2, #4]
 8003aca:	e7d8      	b.n	8003a7e <I2C_Master_ISR_IT+0x8e>
  __HAL_LOCK(hi2c);
 8003acc:	2002      	movs	r0, #2
}
 8003ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003ad0:	0668      	lsls	r0, r5, #25
 8003ad2:	d5d4      	bpl.n	8003a7e <I2C_Master_ISR_IT+0x8e>
 8003ad4:	0671      	lsls	r1, r6, #25
 8003ad6:	d5d2      	bpl.n	8003a7e <I2C_Master_ISR_IT+0x8e>
    if (hi2c->XferCount == 0U)
 8003ad8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d137      	bne.n	8003b50 <I2C_Master_ISR_IT+0x160>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003ae0:	6822      	ldr	r2, [r4, #0]
 8003ae2:	6853      	ldr	r3, [r2, #4]
 8003ae4:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8003ae8:	d1c9      	bne.n	8003a7e <I2C_Master_ISR_IT+0x8e>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003aea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003aec:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8003af0:	d133      	bne.n	8003b5a <I2C_Master_ISR_IT+0x16a>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003af2:	6853      	ldr	r3, [r2, #4]
 8003af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003af8:	6053      	str	r3, [r2, #4]
 8003afa:	e7c0      	b.n	8003a7e <I2C_Master_ISR_IT+0x8e>
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003afc:	4629      	mov	r1, r5
 8003afe:	4620      	mov	r0, r4
 8003b00:	f7ff fe76 	bl	80037f0 <I2C_ITMasterCplt>
 8003b04:	e7bf      	b.n	8003a86 <I2C_Master_ISR_IT+0x96>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003b06:	6822      	ldr	r2, [r4, #0]
 8003b08:	6853      	ldr	r3, [r2, #4]
 8003b0a:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8003b0e:	d11f      	bne.n	8003b50 <I2C_Master_ISR_IT+0x160>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b14:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8003b18:	2921      	cmp	r1, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b1a:	f04f 0020 	mov.w	r0, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b1e:	d050      	beq.n	8003bc2 <I2C_Master_ISR_IT+0x1d2>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b20:	2112      	movs	r1, #18
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b22:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b26:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b28:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003b2c:	6817      	ldr	r7, [r2, #0]
    hi2c->XferISR       = NULL;
 8003b2e:	6363      	str	r3, [r4, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b30:	f000 0028 	and.w	r0, r0, #40	; 0x28
 8003b34:	2828      	cmp	r0, #40	; 0x28
 8003b36:	bf14      	ite	ne
 8003b38:	f06f 01f4 	mvnne.w	r1, #244	; 0xf4
 8003b3c:	f06f 0144 	mvneq.w	r1, #68	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003b40:	4039      	ands	r1, r7
 8003b42:	6011      	str	r1, [r2, #0]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b44:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8003b46:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b4a:	f7ff fa51 	bl	8002ff0 <HAL_I2C_MasterRxCpltCallback>
 8003b4e:	e796      	b.n	8003a7e <I2C_Master_ISR_IT+0x8e>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003b50:	2140      	movs	r1, #64	; 0x40
 8003b52:	4620      	mov	r0, r4
 8003b54:	f7ff fa9a 	bl	800308c <I2C_ITError>
 8003b58:	e791      	b.n	8003a7e <I2C_Master_ISR_IT+0x8e>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b5e:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8003b62:	2921      	cmp	r1, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b64:	f04f 0020 	mov.w	r0, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b68:	d04f      	beq.n	8003c0a <I2C_Master_ISR_IT+0x21a>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b6a:	2112      	movs	r1, #18
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b6c:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b70:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b72:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003b76:	6810      	ldr	r0, [r2, #0]
    hi2c->XferISR       = NULL;
 8003b78:	6363      	str	r3, [r4, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b7a:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8003b7e:	2928      	cmp	r1, #40	; 0x28
 8003b80:	bf14      	ite	ne
 8003b82:	f06f 01f4 	mvnne.w	r1, #244	; 0xf4
 8003b86:	f06f 0144 	mvneq.w	r1, #68	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003b8a:	4001      	ands	r1, r0
 8003b8c:	6011      	str	r1, [r2, #0]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b8e:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8003b90:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b94:	f7ff fa2c 	bl	8002ff0 <HAL_I2C_MasterRxCpltCallback>
 8003b98:	e771      	b.n	8003a7e <I2C_Master_ISR_IT+0x8e>
        hi2c->XferSize = hi2c->XferCount;
 8003b9a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003b9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
 8003b9e:	b280      	uxth	r0, r0
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003ba0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
        hi2c->XferSize = hi2c->XferCount;
 8003ba4:	8520      	strh	r0, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003ba6:	d025      	beq.n	8003bf4 <I2C_Master_ISR_IT+0x204>
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8003ba8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003baa:	f8df e07c 	ldr.w	lr, [pc, #124]	; 8003c28 <I2C_Master_ISR_IT+0x238>
 8003bae:	6853      	ldr	r3, [r2, #4]
 8003bb0:	ea03 030e 	and.w	r3, r3, lr
 8003bb4:	433b      	orrs	r3, r7
 8003bb6:	b2c0      	uxtb	r0, r0
 8003bb8:	430b      	orrs	r3, r1
 8003bba:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003bbe:	6053      	str	r3, [r2, #4]
 8003bc0:	e75d      	b.n	8003a7e <I2C_Master_ISR_IT+0x8e>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003bc2:	2111      	movs	r1, #17
    hi2c->State         = HAL_I2C_STATE_READY;
 8003bc4:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003bc8:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003bca:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003bce:	6810      	ldr	r0, [r2, #0]
    hi2c->XferISR       = NULL;
 8003bd0:	6363      	str	r3, [r4, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003bd2:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8003bd6:	2928      	cmp	r1, #40	; 0x28
 8003bd8:	bf18      	it	ne
 8003bda:	f06f 01f2 	mvnne.w	r1, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003bde:	bf08      	it	eq
 8003be0:	f06f 0142 	mvneq.w	r1, #66	; 0x42
 8003be4:	4001      	ands	r1, r0
 8003be6:	6011      	str	r1, [r2, #0]
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003be8:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8003bea:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003bee:	f7ff f9fd 	bl	8002fec <HAL_I2C_MasterTxCpltCallback>
 8003bf2:	e744      	b.n	8003a7e <I2C_Master_ISR_IT+0x8e>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003bf4:	6853      	ldr	r3, [r2, #4]
 8003bf6:	4f0c      	ldr	r7, [pc, #48]	; (8003c28 <I2C_Master_ISR_IT+0x238>)
 8003bf8:	403b      	ands	r3, r7
 8003bfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003bfe:	b2c0      	uxtb	r0, r0
 8003c00:	430b      	orrs	r3, r1
 8003c02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8003c06:	6050      	str	r0, [r2, #4]
 8003c08:	e739      	b.n	8003a7e <I2C_Master_ISR_IT+0x8e>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c0a:	2111      	movs	r1, #17
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c0c:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c10:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c12:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003c16:	6810      	ldr	r0, [r2, #0]
    hi2c->XferISR       = NULL;
 8003c18:	6363      	str	r3, [r4, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c1a:	f001 0128 	and.w	r1, r1, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003c1e:	2928      	cmp	r1, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003c20:	bf18      	it	ne
 8003c22:	f06f 01f2 	mvnne.w	r1, #242	; 0xf2
 8003c26:	e7da      	b.n	8003bde <I2C_Master_ISR_IT+0x1ee>
 8003c28:	fc009c00 	.word	0xfc009c00

08003c2c <I2C_Master_ISR_DMA>:
{
 8003c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8003c2e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d06d      	beq.n	8003d12 <I2C_Master_ISR_DMA+0xe6>
 8003c36:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003c38:	06cd      	lsls	r5, r1, #27
 8003c3a:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 8003c3c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003c40:	d43b      	bmi.n	8003cba <I2C_Master_ISR_DMA+0x8e>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003c42:	060f      	lsls	r7, r1, #24
 8003c44:	d55b      	bpl.n	8003cfe <I2C_Master_ISR_DMA+0xd2>
 8003c46:	0656      	lsls	r6, r2, #25
 8003c48:	d55b      	bpl.n	8003d02 <I2C_Master_ISR_DMA+0xd6>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003c4a:	6823      	ldr	r3, [r4, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c52:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003c54:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003c56:	b292      	uxth	r2, r2
 8003c58:	2a00      	cmp	r2, #0
 8003c5a:	d06f      	beq.n	8003d3c <I2C_Master_ISR_DMA+0x110>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003c5c:	685d      	ldr	r5, [r3, #4]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c5e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8003c60:	b289      	uxth	r1, r1
 8003c62:	29ff      	cmp	r1, #255	; 0xff
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003c64:	f3c5 0509 	ubfx	r5, r5, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c68:	f200 8091 	bhi.w	8003d8e <I2C_Master_ISR_DMA+0x162>
        hi2c->XferSize = hi2c->XferCount;
 8003c6c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003c6e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
 8003c70:	b290      	uxth	r0, r2
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003c72:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
          xfermode = hi2c->XferOptions;
 8003c76:	bf18      	it	ne
 8003c78:	6ae7      	ldrne	r7, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
 8003c7a:	8520      	strh	r0, [r4, #40]	; 0x28
 8003c7c:	b2c1      	uxtb	r1, r0
 8003c7e:	bf06      	itte	eq
 8003c80:	0409      	lsleq	r1, r1, #16
          xfermode = I2C_AUTOEND_MODE;
 8003c82:	f04f 7700 	moveq.w	r7, #33554432	; 0x2000000
 8003c86:	0409      	lslne	r1, r1, #16
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	4e6e      	ldr	r6, [pc, #440]	; (8003e44 <I2C_Master_ISR_DMA+0x218>)
 8003c8c:	4032      	ands	r2, r6
 8003c8e:	432a      	orrs	r2, r5
 8003c90:	433a      	orrs	r2, r7
 8003c92:	430a      	orrs	r2, r1
 8003c94:	605a      	str	r2, [r3, #4]
      hi2c->XferCount -= hi2c->XferSize;
 8003c96:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003c98:	1a12      	subs	r2, r2, r0
 8003c9a:	b292      	uxth	r2, r2
 8003c9c:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c9e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8003ca2:	2a22      	cmp	r2, #34	; 0x22
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	bf0c      	ite	eq
 8003ca8:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003cac:	f442 4280 	orrne.w	r2, r2, #16384	; 0x4000
 8003cb0:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hi2c);
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
 8003cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003cba:	06d0      	lsls	r0, r2, #27
 8003cbc:	d5c1      	bpl.n	8003c42 <I2C_Master_ISR_DMA+0x16>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cbe:	6823      	ldr	r3, [r4, #0]
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003cc0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003cc2:	4861      	ldr	r0, [pc, #388]	; (8003e48 <I2C_Master_ISR_DMA+0x21c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cc4:	2110      	movs	r1, #16
 8003cc6:	61d9      	str	r1, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cc8:	6c61      	ldr	r1, [r4, #68]	; 0x44
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003cca:	4282      	cmp	r2, r0
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ccc:	f041 0104 	orr.w	r1, r1, #4
 8003cd0:	6461      	str	r1, [r4, #68]	; 0x44
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003cd2:	d064      	beq.n	8003d9e <I2C_Master_ISR_DMA+0x172>
 8003cd4:	495d      	ldr	r1, [pc, #372]	; (8003e4c <I2C_Master_ISR_DMA+0x220>)
      tmpisr |= I2C_IT_TCI;
 8003cd6:	428a      	cmp	r2, r1
 8003cd8:	bf14      	ite	ne
 8003cda:	22f4      	movne	r2, #244	; 0xf4
 8003cdc:	2260      	moveq	r2, #96	; 0x60
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003cde:	6819      	ldr	r1, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	601a      	str	r2, [r3, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ce4:	699a      	ldr	r2, [r3, #24]
 8003ce6:	0791      	lsls	r1, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8003ce8:	bf44      	itt	mi
 8003cea:	2200      	movmi	r2, #0
 8003cec:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cee:	699a      	ldr	r2, [r3, #24]
 8003cf0:	07d2      	lsls	r2, r2, #31
 8003cf2:	d4de      	bmi.n	8003cb2 <I2C_Master_ISR_DMA+0x86>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003cf4:	699a      	ldr	r2, [r3, #24]
 8003cf6:	f042 0201 	orr.w	r2, r2, #1
 8003cfa:	619a      	str	r2, [r3, #24]
 8003cfc:	e7d9      	b.n	8003cb2 <I2C_Master_ISR_DMA+0x86>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003cfe:	064d      	lsls	r5, r1, #25
 8003d00:	d409      	bmi.n	8003d16 <I2C_Master_ISR_DMA+0xea>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003d02:	068b      	lsls	r3, r1, #26
 8003d04:	d5d5      	bpl.n	8003cb2 <I2C_Master_ISR_DMA+0x86>
 8003d06:	0692      	lsls	r2, r2, #26
 8003d08:	d5d3      	bpl.n	8003cb2 <I2C_Master_ISR_DMA+0x86>
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003d0a:	4620      	mov	r0, r4
 8003d0c:	f7ff fd70 	bl	80037f0 <I2C_ITMasterCplt>
 8003d10:	e7cf      	b.n	8003cb2 <I2C_Master_ISR_DMA+0x86>
  __HAL_LOCK(hi2c);
 8003d12:	2002      	movs	r0, #2
 8003d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003d16:	0650      	lsls	r0, r2, #25
 8003d18:	d5f3      	bpl.n	8003d02 <I2C_Master_ISR_DMA+0xd6>
    if (hi2c->XferCount == 0U)
 8003d1a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	bb8b      	cbnz	r3, 8003d84 <I2C_Master_ISR_DMA+0x158>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003d20:	6822      	ldr	r2, [r4, #0]
 8003d22:	6853      	ldr	r3, [r2, #4]
 8003d24:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8003d28:	d1c3      	bne.n	8003cb2 <I2C_Master_ISR_DMA+0x86>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003d2a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003d2c:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8003d30:	d137      	bne.n	8003da2 <I2C_Master_ISR_DMA+0x176>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d32:	6853      	ldr	r3, [r2, #4]
 8003d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d38:	6053      	str	r3, [r2, #4]
 8003d3a:	e7ba      	b.n	8003cb2 <I2C_Master_ISR_DMA+0x86>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	f012 7200 	ands.w	r2, r2, #33554432	; 0x2000000
 8003d42:	d11f      	bne.n	8003d84 <I2C_Master_ISR_DMA+0x158>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d44:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d48:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8003d4c:	2921      	cmp	r1, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d4e:	f04f 0020 	mov.w	r0, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d52:	d046      	beq.n	8003de2 <I2C_Master_ISR_DMA+0x1b6>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d54:	2112      	movs	r1, #18
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d56:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d5a:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d5c:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003d60:	6819      	ldr	r1, [r3, #0]
    hi2c->XferISR       = NULL;
 8003d62:	6362      	str	r2, [r4, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d64:	f000 0028 	and.w	r0, r0, #40	; 0x28
 8003d68:	2828      	cmp	r0, #40	; 0x28
 8003d6a:	bf14      	ite	ne
 8003d6c:	f06f 00f4 	mvnne.w	r0, #244	; 0xf4
 8003d70:	f06f 0044 	mvneq.w	r0, #68	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003d74:	4001      	ands	r1, r0
 8003d76:	6019      	str	r1, [r3, #0]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003d78:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8003d7a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003d7e:	f7ff f937 	bl	8002ff0 <HAL_I2C_MasterRxCpltCallback>
 8003d82:	e796      	b.n	8003cb2 <I2C_Master_ISR_DMA+0x86>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003d84:	2140      	movs	r1, #64	; 0x40
 8003d86:	4620      	mov	r0, r4
 8003d88:	f7ff f980 	bl	800308c <I2C_ITError>
 8003d8c:	e791      	b.n	8003cb2 <I2C_Master_ISR_DMA+0x86>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d8e:	22ff      	movs	r2, #255	; 0xff
 8003d90:	8522      	strh	r2, [r4, #40]	; 0x28
 8003d92:	4610      	mov	r0, r2
 8003d94:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
        xfermode = I2C_RELOAD_MODE;
 8003d98:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 8003d9c:	e774      	b.n	8003c88 <I2C_Master_ISR_DMA+0x5c>
      tmpisr |= I2C_IT_TCI;
 8003d9e:	2260      	movs	r2, #96	; 0x60
 8003da0:	e79d      	b.n	8003cde <I2C_Master_ISR_DMA+0xb2>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003da6:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8003daa:	2921      	cmp	r1, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_READY;
 8003dac:	f04f 0020 	mov.w	r0, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003db0:	d02f      	beq.n	8003e12 <I2C_Master_ISR_DMA+0x1e6>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003db2:	2112      	movs	r1, #18
    hi2c->State         = HAL_I2C_STATE_READY;
 8003db4:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003db8:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003dba:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003dbe:	6810      	ldr	r0, [r2, #0]
    hi2c->XferISR       = NULL;
 8003dc0:	6363      	str	r3, [r4, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003dc2:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8003dc6:	2928      	cmp	r1, #40	; 0x28
 8003dc8:	bf14      	ite	ne
 8003dca:	f06f 01f4 	mvnne.w	r1, #244	; 0xf4
 8003dce:	f06f 0144 	mvneq.w	r1, #68	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003dd2:	4001      	ands	r1, r0
 8003dd4:	6011      	str	r1, [r2, #0]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003dd6:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8003dd8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ddc:	f7ff f908 	bl	8002ff0 <HAL_I2C_MasterRxCpltCallback>
 8003de0:	e767      	b.n	8003cb2 <I2C_Master_ISR_DMA+0x86>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003de2:	2111      	movs	r1, #17
    hi2c->State         = HAL_I2C_STATE_READY;
 8003de4:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003de8:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003dea:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003dee:	6819      	ldr	r1, [r3, #0]
    hi2c->XferISR       = NULL;
 8003df0:	6362      	str	r2, [r4, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003df2:	f000 0028 	and.w	r0, r0, #40	; 0x28
 8003df6:	2828      	cmp	r0, #40	; 0x28
 8003df8:	bf14      	ite	ne
 8003dfa:	f06f 00f2 	mvnne.w	r0, #242	; 0xf2
 8003dfe:	f06f 0042 	mvneq.w	r0, #66	; 0x42
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003e02:	4001      	ands	r1, r0
 8003e04:	6019      	str	r1, [r3, #0]
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e06:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8003e08:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e0c:	f7ff f8ee 	bl	8002fec <HAL_I2C_MasterTxCpltCallback>
 8003e10:	e74f      	b.n	8003cb2 <I2C_Master_ISR_DMA+0x86>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003e12:	2111      	movs	r1, #17
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e14:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003e18:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e1a:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003e1e:	6810      	ldr	r0, [r2, #0]
    hi2c->XferISR       = NULL;
 8003e20:	6363      	str	r3, [r4, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e22:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8003e26:	2928      	cmp	r1, #40	; 0x28
 8003e28:	bf14      	ite	ne
 8003e2a:	f06f 01f2 	mvnne.w	r1, #242	; 0xf2
 8003e2e:	f06f 0142 	mvneq.w	r1, #66	; 0x42
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003e32:	4001      	ands	r1, r0
 8003e34:	6011      	str	r1, [r2, #0]
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e36:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8003e38:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e3c:	f7ff f8d6 	bl	8002fec <HAL_I2C_MasterTxCpltCallback>
 8003e40:	e737      	b.n	8003cb2 <I2C_Master_ISR_DMA+0x86>
 8003e42:	bf00      	nop
 8003e44:	fc009c00 	.word	0xfc009c00
 8003e48:	08003c2d 	.word	0x08003c2d
 8003e4c:	08003609 	.word	0x08003609

08003e50 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e50:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b20      	cmp	r3, #32
 8003e58:	d001      	beq.n	8003e5e <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003e5a:	2002      	movs	r0, #2
 8003e5c:	4770      	bx	lr
 8003e5e:	4602      	mov	r2, r0
    __HAL_LOCK(hi2c);
 8003e60:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8003e64:	2801      	cmp	r0, #1
 8003e66:	d0f8      	beq.n	8003e5a <HAL_I2CEx_ConfigAnalogFilter+0xa>
{
 8003e68:	b410      	push	{r4}
    __HAL_I2C_DISABLE(hi2c);
 8003e6a:	6810      	ldr	r0, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e6c:	2424      	movs	r4, #36	; 0x24
 8003e6e:	f882 4041 	strb.w	r4, [r2, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8003e72:	6804      	ldr	r4, [r0, #0]
 8003e74:	f024 0401 	bic.w	r4, r4, #1
 8003e78:	6004      	str	r4, [r0, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e7a:	6804      	ldr	r4, [r0, #0]
 8003e7c:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8003e80:	6004      	str	r4, [r0, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e82:	6804      	ldr	r4, [r0, #0]
 8003e84:	4321      	orrs	r1, r4
 8003e86:	6001      	str	r1, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003e88:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 8003e8a:	2400      	movs	r4, #0
    __HAL_I2C_ENABLE(hi2c);
 8003e8c:	f041 0101 	orr.w	r1, r1, #1
 8003e90:	6001      	str	r1, [r0, #0]
    return HAL_OK;
 8003e92:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8003e94:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003e98:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  }
}
 8003e9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop

08003ea4 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ea4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b20      	cmp	r3, #32
 8003eac:	d001      	beq.n	8003eb2 <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003eae:	2002      	movs	r0, #2
 8003eb0:	4770      	bx	lr
 8003eb2:	4602      	mov	r2, r0
    __HAL_LOCK(hi2c);
 8003eb4:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8003eb8:	2801      	cmp	r0, #1
 8003eba:	d0f8      	beq.n	8003eae <HAL_I2CEx_ConfigDigitalFilter+0xa>
{
 8003ebc:	b410      	push	{r4}
    __HAL_I2C_DISABLE(hi2c);
 8003ebe:	6810      	ldr	r0, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ec0:	2424      	movs	r4, #36	; 0x24
 8003ec2:	f882 4041 	strb.w	r4, [r2, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8003ec6:	6804      	ldr	r4, [r0, #0]
 8003ec8:	f024 0401 	bic.w	r4, r4, #1
 8003ecc:	6004      	str	r4, [r0, #0]
    tmpreg = hi2c->Instance->CR1;
 8003ece:	6804      	ldr	r4, [r0, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8003ed0:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8003ed4:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8003ed8:	6001      	str	r1, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003eda:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 8003edc:	2400      	movs	r4, #0
    __HAL_I2C_ENABLE(hi2c);
 8003ede:	f041 0101 	orr.w	r1, r1, #1
 8003ee2:	6001      	str	r1, [r0, #0]
    return HAL_OK;
 8003ee4:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8003ee6:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003eea:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  }
}
 8003eee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ef4:	4a02      	ldr	r2, [pc, #8]	; (8003f00 <HAL_PWR_EnableBkUpAccess+0xc>)
 8003ef6:	6813      	ldr	r3, [r2, #0]
 8003ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003efc:	6013      	str	r3, [r2, #0]
 8003efe:	4770      	bx	lr
 8003f00:	40007000 	.word	0x40007000

08003f04 <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f04:	4b07      	ldr	r3, [pc, #28]	; (8003f24 <HAL_PWREx_GetVoltageRange+0x20>)
 8003f06:	6818      	ldr	r0, [r3, #0]
 8003f08:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003f0c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003f10:	d007      	beq.n	8003f22 <HAL_PWREx_GetVoltageRange+0x1e>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f16:	f413 7f80 	tst.w	r3, #256	; 0x100
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003f1a:	bf14      	ite	ne
 8003f1c:	f44f 7000 	movne.w	r0, #512	; 0x200
 8003f20:	2000      	moveq	r0, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003f22:	4770      	bx	lr
 8003f24:	40007000 	.word	0x40007000

08003f28 <HAL_PWREx_ControlVoltageScaling>:

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f28:	4a3b      	ldr	r2, [pc, #236]	; (8004018 <HAL_PWREx_ControlVoltageScaling+0xf0>)
{
 8003f2a:	b410      	push	{r4}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f2c:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003f2e:	b968      	cbnz	r0, 8003f4c <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f38:	d014      	beq.n	8003f64 <HAL_PWREx_ControlVoltageScaling+0x3c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f3a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    }
  }
#endif

  return HAL_OK;
}
 8003f3e:	f85d 4b04 	ldr.w	r4, [sp], #4
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f46:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8003f4a:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f4c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003f50:	d031      	beq.n	8003fb6 <HAL_PWREx_ControlVoltageScaling+0x8e>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f5a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003f5c:	2000      	movs	r0, #0
}
 8003f5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f62:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f64:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003f68:	4b2c      	ldr	r3, [pc, #176]	; (800401c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003f6a:	482d      	ldr	r0, [pc, #180]	; (8004020 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f6c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003f70:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f74:	6811      	ldr	r1, [r2, #0]
 8003f76:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8003f7a:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003f7e:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003f80:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f82:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003f84:	2332      	movs	r3, #50	; 0x32
 8003f86:	fb03 f304 	mul.w	r3, r3, r4
 8003f8a:	fba0 0303 	umull	r0, r3, r0, r3
 8003f8e:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f90:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003f92:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f96:	d506      	bpl.n	8003fa6 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8003f98:	e000      	b.n	8003f9c <HAL_PWREx_ControlVoltageScaling+0x74>
 8003f9a:	b123      	cbz	r3, 8003fa6 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8003f9c:	6951      	ldr	r1, [r2, #20]
 8003f9e:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8003fa0:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fa4:	d4f9      	bmi.n	8003f9a <HAL_PWREx_ControlVoltageScaling+0x72>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fa6:	4b1c      	ldr	r3, [pc, #112]	; (8004018 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	055c      	lsls	r4, r3, #21
 8003fac:	d5d6      	bpl.n	8003f5c <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 8003fae:	2003      	movs	r0, #3
}
 8003fb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fb4:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fbe:	d007      	beq.n	8003fd0 <HAL_PWREx_ControlVoltageScaling+0xa8>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fc0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8003fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 8003fcc:	2000      	movs	r0, #0
 8003fce:	e7c6      	b.n	8003f5e <HAL_PWREx_ControlVoltageScaling+0x36>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fd0:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003fd4:	4b11      	ldr	r3, [pc, #68]	; (800401c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003fd6:	4812      	ldr	r0, [pc, #72]	; (8004020 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fd8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003fdc:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fe0:	6811      	ldr	r1, [r2, #0]
 8003fe2:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8003fe6:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003fea:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003fec:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fee:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003ff0:	2332      	movs	r3, #50	; 0x32
 8003ff2:	fb03 f304 	mul.w	r3, r3, r4
 8003ff6:	fba0 0303 	umull	r0, r3, r0, r3
 8003ffa:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ffc:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003ffe:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004002:	d5d0      	bpl.n	8003fa6 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004004:	e001      	b.n	800400a <HAL_PWREx_ControlVoltageScaling+0xe2>
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0cd      	beq.n	8003fa6 <HAL_PWREx_ControlVoltageScaling+0x7e>
 800400a:	6951      	ldr	r1, [r2, #20]
 800400c:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 800400e:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004012:	d5c8      	bpl.n	8003fa6 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004014:	e7f7      	b.n	8004006 <HAL_PWREx_ControlVoltageScaling+0xde>
 8004016:	bf00      	nop
 8004018:	40007000 	.word	0x40007000
 800401c:	20000050 	.word	0x20000050
 8004020:	431bde83 	.word	0x431bde83

08004024 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t msirange = 0U, sysclockfreq = 0U;
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004024:	4a2c      	ldr	r2, [pc, #176]	; (80040d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004026:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004028:	68d2      	ldr	r2, [r2, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800402a:	f013 030c 	ands.w	r3, r3, #12
 800402e:	d008      	beq.n	8004042 <HAL_RCC_GetSysClockFreq+0x1e>
 8004030:	2b0c      	cmp	r3, #12
 8004032:	d037      	beq.n	80040a4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004034:	2b04      	cmp	r3, #4
 8004036:	d033      	beq.n	80040a0 <HAL_RCC_GetSysClockFreq+0x7c>
 8004038:	2b08      	cmp	r3, #8
 800403a:	4828      	ldr	r0, [pc, #160]	; (80040dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800403c:	bf18      	it	ne
 800403e:	2000      	movne	r0, #0
 8004040:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004042:	4a25      	ldr	r2, [pc, #148]	; (80040d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004044:	6811      	ldr	r1, [r2, #0]
 8004046:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004048:	bf54      	ite	pl
 800404a:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800404e:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 8004050:	4923      	ldr	r1, [pc, #140]	; (80040e0 <HAL_RCC_GetSysClockFreq+0xbc>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004052:	bf54      	ite	pl
 8004054:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004058:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 800405c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004060:	b1fb      	cbz	r3, 80040a2 <HAL_RCC_GetSysClockFreq+0x7e>
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004062:	2b0c      	cmp	r3, #12
 8004064:	d136      	bne.n	80040d4 <HAL_RCC_GetSysClockFreq+0xb0>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004066:	491c      	ldr	r1, [pc, #112]	; (80040d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004068:	68ca      	ldr	r2, [r1, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800406a:	68cb      	ldr	r3, [r1, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800406c:	f002 0203 	and.w	r2, r2, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004070:	f3c3 1303 	ubfx	r3, r3, #4, #4

    switch (pllsource)
 8004074:	2a02      	cmp	r2, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004076:	f103 0301 	add.w	r3, r3, #1
    switch (pllsource)
 800407a:	d022      	beq.n	80040c2 <HAL_RCC_GetSysClockFreq+0x9e>
 800407c:	2a03      	cmp	r2, #3
 800407e:	d017      	beq.n	80040b0 <HAL_RCC_GetSysClockFreq+0x8c>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      break;

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004080:	fbb0 f0f3 	udiv	r0, r0, r3
 8004084:	68ca      	ldr	r2, [r1, #12]
 8004086:	f3c2 2306 	ubfx	r3, r2, #8, #7
 800408a:	fb00 f003 	mul.w	r0, r0, r3
      break;
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800408e:	4b12      	ldr	r3, [pc, #72]	; (80040d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8004096:	3301      	adds	r3, #1
 8004098:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800409a:	fbb0 f0f3 	udiv	r0, r0, r3
 800409e:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 80040a0:	4810      	ldr	r0, [pc, #64]	; (80040e4 <HAL_RCC_GetSysClockFreq+0xc0>)
  }

  return sysclockfreq;
}
 80040a2:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040a4:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040a8:	2a01      	cmp	r2, #1
 80040aa:	d0ca      	beq.n	8004042 <HAL_RCC_GetSysClockFreq+0x1e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80040ac:	2000      	movs	r0, #0
 80040ae:	e7da      	b.n	8004066 <HAL_RCC_GetSysClockFreq+0x42>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040b0:	68ca      	ldr	r2, [r1, #12]
 80040b2:	480a      	ldr	r0, [pc, #40]	; (80040dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80040b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80040b8:	f3c2 2306 	ubfx	r3, r2, #8, #7
 80040bc:	fb00 f003 	mul.w	r0, r0, r3
      break;
 80040c0:	e7e5      	b.n	800408e <HAL_RCC_GetSysClockFreq+0x6a>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040c2:	68ca      	ldr	r2, [r1, #12]
 80040c4:	4807      	ldr	r0, [pc, #28]	; (80040e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80040c6:	fbb0 f0f3 	udiv	r0, r0, r3
 80040ca:	f3c2 2306 	ubfx	r3, r2, #8, #7
 80040ce:	fb00 f003 	mul.w	r0, r0, r3
      break;
 80040d2:	e7dc      	b.n	800408e <HAL_RCC_GetSysClockFreq+0x6a>
 80040d4:	2000      	movs	r0, #0
  return sysclockfreq;
 80040d6:	4770      	bx	lr
 80040d8:	40021000 	.word	0x40021000
 80040dc:	007a1200 	.word	0x007a1200
 80040e0:	080173f4 	.word	0x080173f4
 80040e4:	00f42400 	.word	0x00f42400

080040e8 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80040e8:	2800      	cmp	r0, #0
 80040ea:	f000 82e7 	beq.w	80046bc <HAL_RCC_OscConfig+0x5d4>
{
 80040ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040f2:	4a99      	ldr	r2, [pc, #612]	; (8004358 <HAL_RCC_OscConfig+0x270>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040f4:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040f6:	6895      	ldr	r5, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040f8:	68d6      	ldr	r6, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040fa:	06da      	lsls	r2, r3, #27
{
 80040fc:	b085      	sub	sp, #20
 80040fe:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004100:	f005 050c 	and.w	r5, r5, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004104:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004108:	d52e      	bpl.n	8004168 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800410a:	2d00      	cmp	r5, #0
 800410c:	f000 812b 	beq.w	8004366 <HAL_RCC_OscConfig+0x27e>
 8004110:	2d0c      	cmp	r5, #12
 8004112:	f000 8125 	beq.w	8004360 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004116:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 8004118:	4f8f      	ldr	r7, [pc, #572]	; (8004358 <HAL_RCC_OscConfig+0x270>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 8181 	beq.w	8004422 <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_MSI_ENABLE();
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	f043 0301 	orr.w	r3, r3, #1
 8004126:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8004128:	f7fc ff0e 	bl	8000f48 <HAL_GetTick>
 800412c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800412e:	e006      	b.n	800413e <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004130:	f7fc ff0a 	bl	8000f48 <HAL_GetTick>
 8004134:	eba0 0008 	sub.w	r0, r0, r8
 8004138:	2802      	cmp	r0, #2
 800413a:	f200 81e1 	bhi.w	8004500 <HAL_RCC_OscConfig+0x418>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	079b      	lsls	r3, r3, #30
 8004142:	d5f5      	bpl.n	8004130 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	f043 0308 	orr.w	r3, r3, #8
 800414a:	603b      	str	r3, [r7, #0]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	6a22      	ldr	r2, [r4, #32]
 8004150:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004154:	4313      	orrs	r3, r2
 8004156:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	69e2      	ldr	r2, [r4, #28]
 800415c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004160:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004164:	607b      	str	r3, [r7, #4]
 8004166:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004168:	07d9      	lsls	r1, r3, #31
 800416a:	d529      	bpl.n	80041c0 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800416c:	2d08      	cmp	r5, #8
 800416e:	f000 8198 	beq.w	80044a2 <HAL_RCC_OscConfig+0x3ba>
 8004172:	2d0c      	cmp	r5, #12
 8004174:	f000 8192 	beq.w	800449c <HAL_RCC_OscConfig+0x3b4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004178:	6863      	ldr	r3, [r4, #4]
 800417a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800417e:	f000 819a 	beq.w	80044b6 <HAL_RCC_OscConfig+0x3ce>
 8004182:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004186:	f000 8280 	beq.w	800468a <HAL_RCC_OscConfig+0x5a2>
 800418a:	4f73      	ldr	r7, [pc, #460]	; (8004358 <HAL_RCC_OscConfig+0x270>)
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004192:	603a      	str	r2, [r7, #0]
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800419a:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800419c:	2b00      	cmp	r3, #0
 800419e:	f040 818f 	bne.w	80044c0 <HAL_RCC_OscConfig+0x3d8>
        tickstart = HAL_GetTick();
 80041a2:	f7fc fed1 	bl	8000f48 <HAL_GetTick>
 80041a6:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041a8:	e006      	b.n	80041b8 <HAL_RCC_OscConfig+0xd0>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041aa:	f7fc fecd 	bl	8000f48 <HAL_GetTick>
 80041ae:	eba0 0008 	sub.w	r0, r0, r8
 80041b2:	2864      	cmp	r0, #100	; 0x64
 80041b4:	f200 81a4 	bhi.w	8004500 <HAL_RCC_OscConfig+0x418>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	0398      	lsls	r0, r3, #14
 80041bc:	d4f5      	bmi.n	80041aa <HAL_RCC_OscConfig+0xc2>
 80041be:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041c0:	0799      	lsls	r1, r3, #30
 80041c2:	f100 80a3 	bmi.w	800430c <HAL_RCC_OscConfig+0x224>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041c6:	0719      	lsls	r1, r3, #28
 80041c8:	d519      	bpl.n	80041fe <HAL_RCC_OscConfig+0x116>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041ca:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 80041cc:	4e62      	ldr	r6, [pc, #392]	; (8004358 <HAL_RCC_OscConfig+0x270>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 813d 	beq.w	800444e <HAL_RCC_OscConfig+0x366>
      __HAL_RCC_LSI_ENABLE();
 80041d4:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80041d8:	f043 0301 	orr.w	r3, r3, #1
 80041dc:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 80041e0:	f7fc feb2 	bl	8000f48 <HAL_GetTick>
 80041e4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041e6:	e005      	b.n	80041f4 <HAL_RCC_OscConfig+0x10c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041e8:	f7fc feae 	bl	8000f48 <HAL_GetTick>
 80041ec:	1bc0      	subs	r0, r0, r7
 80041ee:	2802      	cmp	r0, #2
 80041f0:	f200 8186 	bhi.w	8004500 <HAL_RCC_OscConfig+0x418>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041f4:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80041f8:	079a      	lsls	r2, r3, #30
 80041fa:	d5f5      	bpl.n	80041e8 <HAL_RCC_OscConfig+0x100>
 80041fc:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041fe:	0758      	lsls	r0, r3, #29
 8004200:	d53f      	bpl.n	8004282 <HAL_RCC_OscConfig+0x19a>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004202:	4b55      	ldr	r3, [pc, #340]	; (8004358 <HAL_RCC_OscConfig+0x270>)
 8004204:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004206:	00d1      	lsls	r1, r2, #3
 8004208:	f100 81ec 	bmi.w	80045e4 <HAL_RCC_OscConfig+0x4fc>
      __HAL_RCC_PWR_CLK_ENABLE();
 800420c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800420e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004212:	659a      	str	r2, [r3, #88]	; 0x58
 8004214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800421a:	9301      	str	r3, [sp, #4]
 800421c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800421e:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004220:	4e4e      	ldr	r6, [pc, #312]	; (800435c <HAL_RCC_OscConfig+0x274>)
 8004222:	6833      	ldr	r3, [r6, #0]
 8004224:	05da      	lsls	r2, r3, #23
 8004226:	f140 815a 	bpl.w	80044de <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800422a:	68a3      	ldr	r3, [r4, #8]
 800422c:	2b01      	cmp	r3, #1
 800422e:	f000 8239 	beq.w	80046a4 <HAL_RCC_OscConfig+0x5bc>
 8004232:	2b05      	cmp	r3, #5
 8004234:	f000 81d8 	beq.w	80045e8 <HAL_RCC_OscConfig+0x500>
 8004238:	4e47      	ldr	r6, [pc, #284]	; (8004358 <HAL_RCC_OscConfig+0x270>)
 800423a:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800423e:	f022 0201 	bic.w	r2, r2, #1
 8004242:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 8004246:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800424a:	f022 0204 	bic.w	r2, r2, #4
 800424e:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004252:	2b00      	cmp	r3, #0
 8004254:	f040 81d5 	bne.w	8004602 <HAL_RCC_OscConfig+0x51a>
      tickstart = HAL_GetTick();
 8004258:	f7fc fe76 	bl	8000f48 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800425c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004260:	4681      	mov	r9, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004262:	e006      	b.n	8004272 <HAL_RCC_OscConfig+0x18a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004264:	f7fc fe70 	bl	8000f48 <HAL_GetTick>
 8004268:	eba0 0009 	sub.w	r0, r0, r9
 800426c:	4540      	cmp	r0, r8
 800426e:	f200 8147 	bhi.w	8004500 <HAL_RCC_OscConfig+0x418>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004272:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8004276:	0799      	lsls	r1, r3, #30
 8004278:	d4f4      	bmi.n	8004264 <HAL_RCC_OscConfig+0x17c>
    if(pwrclkchanged == SET)
 800427a:	2f00      	cmp	r7, #0
 800427c:	f040 81ff 	bne.w	800467e <HAL_RCC_OscConfig+0x596>
 8004280:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004282:	069a      	lsls	r2, r3, #26
 8004284:	d518      	bpl.n	80042b8 <HAL_RCC_OscConfig+0x1d0>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004286:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_RCC_HSI48_ENABLE();
 8004288:	4e33      	ldr	r6, [pc, #204]	; (8004358 <HAL_RCC_OscConfig+0x270>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 81cf 	beq.w	800462e <HAL_RCC_OscConfig+0x546>
      __HAL_RCC_HSI48_ENABLE();
 8004290:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8004294:	f043 0301 	orr.w	r3, r3, #1
 8004298:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
      tickstart = HAL_GetTick();
 800429c:	f7fc fe54 	bl	8000f48 <HAL_GetTick>
 80042a0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042a2:	e005      	b.n	80042b0 <HAL_RCC_OscConfig+0x1c8>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042a4:	f7fc fe50 	bl	8000f48 <HAL_GetTick>
 80042a8:	1bc0      	subs	r0, r0, r7
 80042aa:	2802      	cmp	r0, #2
 80042ac:	f200 8128 	bhi.w	8004500 <HAL_RCC_OscConfig+0x418>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042b0:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 80042b4:	079b      	lsls	r3, r3, #30
 80042b6:	d5f5      	bpl.n	80042a4 <HAL_RCC_OscConfig+0x1bc>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80042ba:	b31b      	cbz	r3, 8004304 <HAL_RCC_OscConfig+0x21c>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042bc:	2d0c      	cmp	r5, #12
 80042be:	f000 80ac 	beq.w	800441a <HAL_RCC_OscConfig+0x332>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	f000 820e 	beq.w	80046e4 <HAL_RCC_OscConfig+0x5fc>
        __HAL_RCC_PLL_DISABLE();
 80042c8:	4b23      	ldr	r3, [pc, #140]	; (8004358 <HAL_RCC_OscConfig+0x270>)
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80042d0:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	f012 5f20 	tst.w	r2, #671088640	; 0x28000000
 80042d8:	f000 81cc 	beq.w	8004674 <HAL_RCC_OscConfig+0x58c>
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80042dc:	4c1e      	ldr	r4, [pc, #120]	; (8004358 <HAL_RCC_OscConfig+0x270>)
 80042de:	68e3      	ldr	r3, [r4, #12]
 80042e0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80042e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042e8:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80042ea:	f7fc fe2d 	bl	8000f48 <HAL_GetTick>
 80042ee:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042f0:	e005      	b.n	80042fe <HAL_RCC_OscConfig+0x216>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f2:	f7fc fe29 	bl	8000f48 <HAL_GetTick>
 80042f6:	1b40      	subs	r0, r0, r5
 80042f8:	2802      	cmp	r0, #2
 80042fa:	f200 8101 	bhi.w	8004500 <HAL_RCC_OscConfig+0x418>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042fe:	6823      	ldr	r3, [r4, #0]
 8004300:	019b      	lsls	r3, r3, #6
 8004302:	d4f6      	bmi.n	80042f2 <HAL_RCC_OscConfig+0x20a>
  return HAL_OK;
 8004304:	2000      	movs	r0, #0
}
 8004306:	b005      	add	sp, #20
 8004308:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800430c:	2d04      	cmp	r5, #4
 800430e:	f000 80b5 	beq.w	800447c <HAL_RCC_OscConfig+0x394>
 8004312:	2d0c      	cmp	r5, #12
 8004314:	f000 80af 	beq.w	8004476 <HAL_RCC_OscConfig+0x38e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004318:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 800431a:	4e0f      	ldr	r6, [pc, #60]	; (8004358 <HAL_RCC_OscConfig+0x270>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 814f 	beq.w	80045c0 <HAL_RCC_OscConfig+0x4d8>
        __HAL_RCC_HSI_ENABLE();
 8004322:	6833      	ldr	r3, [r6, #0]
 8004324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004328:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800432a:	f7fc fe0d 	bl	8000f48 <HAL_GetTick>
 800432e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004330:	e005      	b.n	800433e <HAL_RCC_OscConfig+0x256>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004332:	f7fc fe09 	bl	8000f48 <HAL_GetTick>
 8004336:	1bc0      	subs	r0, r0, r7
 8004338:	2802      	cmp	r0, #2
 800433a:	f200 80e1 	bhi.w	8004500 <HAL_RCC_OscConfig+0x418>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800433e:	6833      	ldr	r3, [r6, #0]
 8004340:	055b      	lsls	r3, r3, #21
 8004342:	d5f6      	bpl.n	8004332 <HAL_RCC_OscConfig+0x24a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004344:	6873      	ldr	r3, [r6, #4]
 8004346:	6922      	ldr	r2, [r4, #16]
 8004348:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800434c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004350:	6073      	str	r3, [r6, #4]
 8004352:	6823      	ldr	r3, [r4, #0]
 8004354:	e737      	b.n	80041c6 <HAL_RCC_OscConfig+0xde>
 8004356:	bf00      	nop
 8004358:	40021000 	.word	0x40021000
 800435c:	40007000 	.word	0x40007000
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004360:	2e01      	cmp	r6, #1
 8004362:	f47f aed8 	bne.w	8004116 <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004366:	4bbf      	ldr	r3, [pc, #764]	; (8004664 <HAL_RCC_OscConfig+0x57c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	079f      	lsls	r7, r3, #30
 800436c:	d452      	bmi.n	8004414 <HAL_RCC_OscConfig+0x32c>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800436e:	4bbd      	ldr	r3, [pc, #756]	; (8004664 <HAL_RCC_OscConfig+0x57c>)
 8004370:	6a27      	ldr	r7, [r4, #32]
 8004372:	681a      	ldr	r2, [r3, #0]
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004374:	f8df 82ec 	ldr.w	r8, [pc, #748]	; 8004664 <HAL_RCC_OscConfig+0x57c>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004378:	0710      	lsls	r0, r2, #28
 800437a:	bf56      	itet	pl
 800437c:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 8004380:	681b      	ldrmi	r3, [r3, #0]
 8004382:	091b      	lsrpl	r3, r3, #4
 8004384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004388:	42bb      	cmp	r3, r7
 800438a:	f080 80bd 	bcs.w	8004508 <HAL_RCC_OscConfig+0x420>
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800438e:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 8004392:	00d9      	lsls	r1, r3, #3
 8004394:	f100 8163 	bmi.w	800465e <HAL_RCC_OscConfig+0x576>
  {
    vos = HAL_PWREx_GetVoltageRange();
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004398:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 800439c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043a0:	f8c8 3058 	str.w	r3, [r8, #88]	; 0x58
 80043a4:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 80043a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ac:	9302      	str	r3, [sp, #8]
 80043ae:	9b02      	ldr	r3, [sp, #8]
    vos = HAL_PWREx_GetVoltageRange();
 80043b0:	f7ff fda8 	bl	8003f04 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80043b4:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 80043b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043bc:	f8c8 3058 	str.w	r3, [r8, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043c0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80043c4:	f000 8183 	beq.w	80046ce <HAL_RCC_OscConfig+0x5e6>
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80043c8:	2f7f      	cmp	r7, #127	; 0x7f
 80043ca:	f200 8173 	bhi.w	80046b4 <HAL_RCC_OscConfig+0x5cc>
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80043ce:	f1a7 0770 	sub.w	r7, r7, #112	; 0x70
 80043d2:	fab7 f787 	clz	r7, r7
 80043d6:	097f      	lsrs	r7, r7, #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80043d8:	4aa3      	ldr	r2, [pc, #652]	; (8004668 <HAL_RCC_OscConfig+0x580>)
 80043da:	6813      	ldr	r3, [r2, #0]
 80043dc:	f023 030f 	bic.w	r3, r3, #15
 80043e0:	433b      	orrs	r3, r7
 80043e2:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80043e4:	6813      	ldr	r3, [r2, #0]
 80043e6:	f003 030f 	and.w	r3, r3, #15
 80043ea:	429f      	cmp	r7, r3
 80043ec:	d115      	bne.n	800441a <HAL_RCC_OscConfig+0x332>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043ee:	4b9d      	ldr	r3, [pc, #628]	; (8004664 <HAL_RCC_OscConfig+0x57c>)
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	f042 0208 	orr.w	r2, r2, #8
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	6a21      	ldr	r1, [r4, #32]
 80043fc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004400:	430a      	orrs	r2, r1
 8004402:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	69e1      	ldr	r1, [r4, #28]
 8004408:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800440c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004410:	605a      	str	r2, [r3, #4]
 8004412:	e0c0      	b.n	8004596 <HAL_RCC_OscConfig+0x4ae>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004414:	69a3      	ldr	r3, [r4, #24]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1a9      	bne.n	800436e <HAL_RCC_OscConfig+0x286>
      return HAL_ERROR;
 800441a:	2001      	movs	r0, #1
}
 800441c:	b005      	add	sp, #20
 800441e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        __HAL_RCC_MSI_DISABLE();
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	f023 0301 	bic.w	r3, r3, #1
 8004428:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800442a:	f7fc fd8d 	bl	8000f48 <HAL_GetTick>
 800442e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004430:	e005      	b.n	800443e <HAL_RCC_OscConfig+0x356>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004432:	f7fc fd89 	bl	8000f48 <HAL_GetTick>
 8004436:	eba0 0008 	sub.w	r0, r0, r8
 800443a:	2802      	cmp	r0, #2
 800443c:	d860      	bhi.n	8004500 <HAL_RCC_OscConfig+0x418>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	0798      	lsls	r0, r3, #30
 8004442:	d4f6      	bmi.n	8004432 <HAL_RCC_OscConfig+0x34a>
 8004444:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004446:	07d9      	lsls	r1, r3, #31
 8004448:	f57f aeba 	bpl.w	80041c0 <HAL_RCC_OscConfig+0xd8>
 800444c:	e68e      	b.n	800416c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 800444e:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8004452:	f023 0301 	bic.w	r3, r3, #1
 8004456:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 800445a:	f7fc fd75 	bl	8000f48 <HAL_GetTick>
 800445e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004460:	e004      	b.n	800446c <HAL_RCC_OscConfig+0x384>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004462:	f7fc fd71 	bl	8000f48 <HAL_GetTick>
 8004466:	1bc0      	subs	r0, r0, r7
 8004468:	2802      	cmp	r0, #2
 800446a:	d849      	bhi.n	8004500 <HAL_RCC_OscConfig+0x418>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800446c:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8004470:	079b      	lsls	r3, r3, #30
 8004472:	d4f6      	bmi.n	8004462 <HAL_RCC_OscConfig+0x37a>
 8004474:	e6c2      	b.n	80041fc <HAL_RCC_OscConfig+0x114>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8004476:	2e02      	cmp	r6, #2
 8004478:	f47f af4e 	bne.w	8004318 <HAL_RCC_OscConfig+0x230>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800447c:	4a79      	ldr	r2, [pc, #484]	; (8004664 <HAL_RCC_OscConfig+0x57c>)
 800447e:	6812      	ldr	r2, [r2, #0]
 8004480:	0552      	lsls	r2, r2, #21
 8004482:	d502      	bpl.n	800448a <HAL_RCC_OscConfig+0x3a2>
 8004484:	68e2      	ldr	r2, [r4, #12]
 8004486:	2a00      	cmp	r2, #0
 8004488:	d0c7      	beq.n	800441a <HAL_RCC_OscConfig+0x332>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800448a:	4976      	ldr	r1, [pc, #472]	; (8004664 <HAL_RCC_OscConfig+0x57c>)
 800448c:	6920      	ldr	r0, [r4, #16]
 800448e:	684a      	ldr	r2, [r1, #4]
 8004490:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 8004494:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8004498:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800449a:	e694      	b.n	80041c6 <HAL_RCC_OscConfig+0xde>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 800449c:	2e03      	cmp	r6, #3
 800449e:	f47f ae6b 	bne.w	8004178 <HAL_RCC_OscConfig+0x90>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a2:	4a70      	ldr	r2, [pc, #448]	; (8004664 <HAL_RCC_OscConfig+0x57c>)
 80044a4:	6812      	ldr	r2, [r2, #0]
 80044a6:	0392      	lsls	r2, r2, #14
 80044a8:	f57f ae8a 	bpl.w	80041c0 <HAL_RCC_OscConfig+0xd8>
 80044ac:	6862      	ldr	r2, [r4, #4]
 80044ae:	2a00      	cmp	r2, #0
 80044b0:	f47f ae86 	bne.w	80041c0 <HAL_RCC_OscConfig+0xd8>
 80044b4:	e7b1      	b.n	800441a <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044b6:	4a6b      	ldr	r2, [pc, #428]	; (8004664 <HAL_RCC_OscConfig+0x57c>)
 80044b8:	6813      	ldr	r3, [r2, #0]
 80044ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044be:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80044c0:	f7fc fd42 	bl	8000f48 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044c4:	4f67      	ldr	r7, [pc, #412]	; (8004664 <HAL_RCC_OscConfig+0x57c>)
        tickstart = HAL_GetTick();
 80044c6:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044c8:	e005      	b.n	80044d6 <HAL_RCC_OscConfig+0x3ee>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044ca:	f7fc fd3d 	bl	8000f48 <HAL_GetTick>
 80044ce:	eba0 0008 	sub.w	r0, r0, r8
 80044d2:	2864      	cmp	r0, #100	; 0x64
 80044d4:	d814      	bhi.n	8004500 <HAL_RCC_OscConfig+0x418>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	039b      	lsls	r3, r3, #14
 80044da:	d5f6      	bpl.n	80044ca <HAL_RCC_OscConfig+0x3e2>
 80044dc:	e66f      	b.n	80041be <HAL_RCC_OscConfig+0xd6>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044de:	6833      	ldr	r3, [r6, #0]
 80044e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044e4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80044e6:	f7fc fd2f 	bl	8000f48 <HAL_GetTick>
 80044ea:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044ec:	6833      	ldr	r3, [r6, #0]
 80044ee:	05db      	lsls	r3, r3, #23
 80044f0:	f53f ae9b 	bmi.w	800422a <HAL_RCC_OscConfig+0x142>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044f4:	f7fc fd28 	bl	8000f48 <HAL_GetTick>
 80044f8:	eba0 0008 	sub.w	r0, r0, r8
 80044fc:	2802      	cmp	r0, #2
 80044fe:	d9f5      	bls.n	80044ec <HAL_RCC_OscConfig+0x404>
            return HAL_TIMEOUT;
 8004500:	2003      	movs	r0, #3
}
 8004502:	b005      	add	sp, #20
 8004504:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004508:	f8d8 3000 	ldr.w	r3, [r8]
 800450c:	f043 0308 	orr.w	r3, r3, #8
 8004510:	f8c8 3000 	str.w	r3, [r8]
 8004514:	f8d8 3000 	ldr.w	r3, [r8]
 8004518:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800451c:	433b      	orrs	r3, r7
 800451e:	f8c8 3000 	str.w	r3, [r8]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004522:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004526:	69e2      	ldr	r2, [r4, #28]
 8004528:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800452c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004530:	f8c8 3004 	str.w	r3, [r8, #4]
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004534:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 8004538:	00da      	lsls	r2, r3, #3
 800453a:	f100 808d 	bmi.w	8004658 <HAL_RCC_OscConfig+0x570>
    __HAL_RCC_PWR_CLK_ENABLE();
 800453e:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 8004542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004546:	f8c8 3058 	str.w	r3, [r8, #88]	; 0x58
 800454a:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 800454e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004552:	9303      	str	r3, [sp, #12]
 8004554:	9b03      	ldr	r3, [sp, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004556:	f7ff fcd5 	bl	8003f04 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800455a:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 800455e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004562:	f8c8 3058 	str.w	r3, [r8, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004566:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800456a:	f000 80a9 	beq.w	80046c0 <HAL_RCC_OscConfig+0x5d8>
    if(msirange >= RCC_MSIRANGE_8)
 800456e:	2f7f      	cmp	r7, #127	; 0x7f
 8004570:	f200 80a2 	bhi.w	80046b8 <HAL_RCC_OscConfig+0x5d0>
      if(msirange == RCC_MSIRANGE_7)
 8004574:	f1a7 0770 	sub.w	r7, r7, #112	; 0x70
 8004578:	fab7 f787 	clz	r7, r7
 800457c:	097f      	lsrs	r7, r7, #5
  __HAL_FLASH_SET_LATENCY(latency);
 800457e:	4a3a      	ldr	r2, [pc, #232]	; (8004668 <HAL_RCC_OscConfig+0x580>)
 8004580:	6813      	ldr	r3, [r2, #0]
 8004582:	f023 030f 	bic.w	r3, r3, #15
 8004586:	433b      	orrs	r3, r7
 8004588:	6013      	str	r3, [r2, #0]
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800458a:	6813      	ldr	r3, [r2, #0]
 800458c:	f003 030f 	and.w	r3, r3, #15
 8004590:	429f      	cmp	r7, r3
 8004592:	f47f af42 	bne.w	800441a <HAL_RCC_OscConfig+0x332>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004596:	f7ff fd45 	bl	8004024 <HAL_RCC_GetSysClockFreq>
 800459a:	4b32      	ldr	r3, [pc, #200]	; (8004664 <HAL_RCC_OscConfig+0x57c>)
 800459c:	4933      	ldr	r1, [pc, #204]	; (800466c <HAL_RCC_OscConfig+0x584>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	4a33      	ldr	r2, [pc, #204]	; (8004670 <HAL_RCC_OscConfig+0x588>)
 80045a2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80045a6:	5ccb      	ldrb	r3, [r1, r3]
 80045a8:	f003 031f 	and.w	r3, r3, #31
 80045ac:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80045b0:	2000      	movs	r0, #0
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045b2:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80045b4:	f00c ff4a 	bl	801144c <HAL_InitTick>
        if(status != HAL_OK)
 80045b8:	2800      	cmp	r0, #0
 80045ba:	f43f af43 	beq.w	8004444 <HAL_RCC_OscConfig+0x35c>
 80045be:	e72d      	b.n	800441c <HAL_RCC_OscConfig+0x334>
        __HAL_RCC_HSI_DISABLE();
 80045c0:	6833      	ldr	r3, [r6, #0]
 80045c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045c6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80045c8:	f7fc fcbe 	bl	8000f48 <HAL_GetTick>
 80045cc:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045ce:	e004      	b.n	80045da <HAL_RCC_OscConfig+0x4f2>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045d0:	f7fc fcba 	bl	8000f48 <HAL_GetTick>
 80045d4:	1bc0      	subs	r0, r0, r7
 80045d6:	2802      	cmp	r0, #2
 80045d8:	d892      	bhi.n	8004500 <HAL_RCC_OscConfig+0x418>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045da:	6833      	ldr	r3, [r6, #0]
 80045dc:	0558      	lsls	r0, r3, #21
 80045de:	d4f7      	bmi.n	80045d0 <HAL_RCC_OscConfig+0x4e8>
 80045e0:	6823      	ldr	r3, [r4, #0]
 80045e2:	e5f0      	b.n	80041c6 <HAL_RCC_OscConfig+0xde>
    FlagStatus       pwrclkchanged = RESET;
 80045e4:	2700      	movs	r7, #0
 80045e6:	e61b      	b.n	8004220 <HAL_RCC_OscConfig+0x138>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045e8:	4b1e      	ldr	r3, [pc, #120]	; (8004664 <HAL_RCC_OscConfig+0x57c>)
 80045ea:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80045ee:	f042 0204 	orr.w	r2, r2, #4
 80045f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80045f6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80045fa:	f042 0201 	orr.w	r2, r2, #1
 80045fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      tickstart = HAL_GetTick();
 8004602:	f7fc fca1 	bl	8000f48 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004606:	4e17      	ldr	r6, [pc, #92]	; (8004664 <HAL_RCC_OscConfig+0x57c>)
      tickstart = HAL_GetTick();
 8004608:	4681      	mov	r9, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800460a:	f241 3888 	movw	r8, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800460e:	e006      	b.n	800461e <HAL_RCC_OscConfig+0x536>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004610:	f7fc fc9a 	bl	8000f48 <HAL_GetTick>
 8004614:	eba0 0009 	sub.w	r0, r0, r9
 8004618:	4540      	cmp	r0, r8
 800461a:	f63f af71 	bhi.w	8004500 <HAL_RCC_OscConfig+0x418>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800461e:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8004622:	0798      	lsls	r0, r3, #30
 8004624:	d5f4      	bpl.n	8004610 <HAL_RCC_OscConfig+0x528>
    if(pwrclkchanged == SET)
 8004626:	2f00      	cmp	r7, #0
 8004628:	f43f ae2a 	beq.w	8004280 <HAL_RCC_OscConfig+0x198>
 800462c:	e027      	b.n	800467e <HAL_RCC_OscConfig+0x596>
      __HAL_RCC_HSI48_DISABLE();
 800462e:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8004632:	f023 0301 	bic.w	r3, r3, #1
 8004636:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
      tickstart = HAL_GetTick();
 800463a:	f7fc fc85 	bl	8000f48 <HAL_GetTick>
 800463e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004640:	e005      	b.n	800464e <HAL_RCC_OscConfig+0x566>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004642:	f7fc fc81 	bl	8000f48 <HAL_GetTick>
 8004646:	1bc0      	subs	r0, r0, r7
 8004648:	2802      	cmp	r0, #2
 800464a:	f63f af59 	bhi.w	8004500 <HAL_RCC_OscConfig+0x418>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800464e:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8004652:	0798      	lsls	r0, r3, #30
 8004654:	d4f5      	bmi.n	8004642 <HAL_RCC_OscConfig+0x55a>
 8004656:	e62f      	b.n	80042b8 <HAL_RCC_OscConfig+0x1d0>
    vos = HAL_PWREx_GetVoltageRange();
 8004658:	f7ff fc54 	bl	8003f04 <HAL_PWREx_GetVoltageRange>
 800465c:	e783      	b.n	8004566 <HAL_RCC_OscConfig+0x47e>
 800465e:	f7ff fc51 	bl	8003f04 <HAL_PWREx_GetVoltageRange>
 8004662:	e6ad      	b.n	80043c0 <HAL_RCC_OscConfig+0x2d8>
 8004664:	40021000 	.word	0x40021000
 8004668:	40022000 	.word	0x40022000
 800466c:	080173dc 	.word	0x080173dc
 8004670:	20000050 	.word	0x20000050
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	f022 0203 	bic.w	r2, r2, #3
 800467a:	60da      	str	r2, [r3, #12]
 800467c:	e62e      	b.n	80042dc <HAL_RCC_OscConfig+0x1f4>
      __HAL_RCC_PWR_CLK_DISABLE();
 800467e:	4a39      	ldr	r2, [pc, #228]	; (8004764 <HAL_RCC_OscConfig+0x67c>)
 8004680:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004682:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004686:	6593      	str	r3, [r2, #88]	; 0x58
 8004688:	e5fa      	b.n	8004280 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800468a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800468e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80046a0:	601a      	str	r2, [r3, #0]
 80046a2:	e70d      	b.n	80044c0 <HAL_RCC_OscConfig+0x3d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046a4:	4a2f      	ldr	r2, [pc, #188]	; (8004764 <HAL_RCC_OscConfig+0x67c>)
 80046a6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80046aa:	f043 0301 	orr.w	r3, r3, #1
 80046ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046b2:	e7a6      	b.n	8004602 <HAL_RCC_OscConfig+0x51a>
        latency = FLASH_LATENCY_2; /* 2WS */
 80046b4:	2702      	movs	r7, #2
 80046b6:	e68f      	b.n	80043d8 <HAL_RCC_OscConfig+0x2f0>
 80046b8:	2702      	movs	r7, #2
 80046ba:	e760      	b.n	800457e <HAL_RCC_OscConfig+0x496>
    return HAL_ERROR;
 80046bc:	2001      	movs	r0, #1
}
 80046be:	4770      	bx	lr
    if(msirange > RCC_MSIRANGE_8)
 80046c0:	2f80      	cmp	r7, #128	; 0x80
 80046c2:	d90b      	bls.n	80046dc <HAL_RCC_OscConfig+0x5f4>
        latency = FLASH_LATENCY_2; /* 2WS */
 80046c4:	2fa1      	cmp	r7, #161	; 0xa1
 80046c6:	bf34      	ite	cc
 80046c8:	2701      	movcc	r7, #1
 80046ca:	2702      	movcs	r7, #2
 80046cc:	e757      	b.n	800457e <HAL_RCC_OscConfig+0x496>
    if(msirange > RCC_MSIRANGE_8)
 80046ce:	2f80      	cmp	r7, #128	; 0x80
 80046d0:	d906      	bls.n	80046e0 <HAL_RCC_OscConfig+0x5f8>
        latency = FLASH_LATENCY_2; /* 2WS */
 80046d2:	2fa1      	cmp	r7, #161	; 0xa1
 80046d4:	bf34      	ite	cc
 80046d6:	2701      	movcc	r7, #1
 80046d8:	2702      	movcs	r7, #2
 80046da:	e67d      	b.n	80043d8 <HAL_RCC_OscConfig+0x2f0>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80046dc:	2700      	movs	r7, #0
 80046de:	e74e      	b.n	800457e <HAL_RCC_OscConfig+0x496>
 80046e0:	2700      	movs	r7, #0
 80046e2:	e679      	b.n	80043d8 <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_PLL_DISABLE();
 80046e4:	4d1f      	ldr	r5, [pc, #124]	; (8004764 <HAL_RCC_OscConfig+0x67c>)
 80046e6:	682b      	ldr	r3, [r5, #0]
 80046e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046ec:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80046ee:	f7fc fc2b 	bl	8000f48 <HAL_GetTick>
 80046f2:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046f4:	e005      	b.n	8004702 <HAL_RCC_OscConfig+0x61a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046f6:	f7fc fc27 	bl	8000f48 <HAL_GetTick>
 80046fa:	1b80      	subs	r0, r0, r6
 80046fc:	2802      	cmp	r0, #2
 80046fe:	f63f aeff 	bhi.w	8004500 <HAL_RCC_OscConfig+0x418>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004702:	682b      	ldr	r3, [r5, #0]
 8004704:	0199      	lsls	r1, r3, #6
 8004706:	d4f6      	bmi.n	80046f6 <HAL_RCC_OscConfig+0x60e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004708:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800470a:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800470c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800470e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004710:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004712:	6c22      	ldr	r2, [r4, #64]	; 0x40
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004714:	4c13      	ldr	r4, [pc, #76]	; (8004764 <HAL_RCC_OscConfig+0x67c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004716:	06db      	lsls	r3, r3, #27
 8004718:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800471c:	3801      	subs	r0, #1
 800471e:	4333      	orrs	r3, r6
 8004720:	0849      	lsrs	r1, r1, #1
 8004722:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8004726:	3901      	subs	r1, #1
 8004728:	0852      	lsrs	r2, r2, #1
 800472a:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800472e:	3a01      	subs	r2, #1
 8004730:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004734:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8004736:	682b      	ldr	r3, [r5, #0]
 8004738:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800473c:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800473e:	68eb      	ldr	r3, [r5, #12]
 8004740:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004744:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8004746:	f7fc fbff 	bl	8000f48 <HAL_GetTick>
 800474a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800474c:	e005      	b.n	800475a <HAL_RCC_OscConfig+0x672>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800474e:	f7fc fbfb 	bl	8000f48 <HAL_GetTick>
 8004752:	1b40      	subs	r0, r0, r5
 8004754:	2802      	cmp	r0, #2
 8004756:	f63f aed3 	bhi.w	8004500 <HAL_RCC_OscConfig+0x418>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800475a:	6823      	ldr	r3, [r4, #0]
 800475c:	019a      	lsls	r2, r3, #6
 800475e:	d5f6      	bpl.n	800474e <HAL_RCC_OscConfig+0x666>
 8004760:	e5d0      	b.n	8004304 <HAL_RCC_OscConfig+0x21c>
 8004762:	bf00      	nop
 8004764:	40021000 	.word	0x40021000

08004768 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004768:	2800      	cmp	r0, #0
 800476a:	f000 80ec 	beq.w	8004946 <HAL_RCC_ClockConfig+0x1de>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800476e:	4a88      	ldr	r2, [pc, #544]	; (8004990 <HAL_RCC_ClockConfig+0x228>)
{
 8004770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004774:	6813      	ldr	r3, [r2, #0]
 8004776:	f003 030f 	and.w	r3, r3, #15
 800477a:	428b      	cmp	r3, r1
 800477c:	d20c      	bcs.n	8004798 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800477e:	6813      	ldr	r3, [r2, #0]
 8004780:	f023 030f 	bic.w	r3, r3, #15
 8004784:	430b      	orrs	r3, r1
 8004786:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004788:	6813      	ldr	r3, [r2, #0]
 800478a:	f003 030f 	and.w	r3, r3, #15
 800478e:	4299      	cmp	r1, r3
 8004790:	d002      	beq.n	8004798 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8004792:	2001      	movs	r0, #1
 8004794:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004798:	6803      	ldr	r3, [r0, #0]
 800479a:	07df      	lsls	r7, r3, #31
 800479c:	4604      	mov	r4, r0
 800479e:	460d      	mov	r5, r1
 80047a0:	d56e      	bpl.n	8004880 <HAL_RCC_ClockConfig+0x118>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047a2:	6842      	ldr	r2, [r0, #4]
 80047a4:	2a03      	cmp	r2, #3
 80047a6:	d07e      	beq.n	80048a6 <HAL_RCC_ClockConfig+0x13e>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047a8:	4b7a      	ldr	r3, [pc, #488]	; (8004994 <HAL_RCC_ClockConfig+0x22c>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047aa:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047ac:	681b      	ldr	r3, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ae:	d077      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x138>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80047b0:	2a00      	cmp	r2, #0
 80047b2:	f040 80b9 	bne.w	8004928 <HAL_RCC_ClockConfig+0x1c0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047b6:	079a      	lsls	r2, r3, #30
 80047b8:	d5eb      	bpl.n	8004792 <HAL_RCC_ClockConfig+0x2a>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80047ba:	f7ff fc33 	bl	8004024 <HAL_RCC_GetSysClockFreq>
 80047be:	4b76      	ldr	r3, [pc, #472]	; (8004998 <HAL_RCC_ClockConfig+0x230>)
 80047c0:	4298      	cmp	r0, r3
 80047c2:	f200 80b5 	bhi.w	8004930 <HAL_RCC_ClockConfig+0x1c8>
 80047c6:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80047c8:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047cc:	4e71      	ldr	r6, [pc, #452]	; (8004994 <HAL_RCC_ClockConfig+0x22c>)
 80047ce:	68b3      	ldr	r3, [r6, #8]
 80047d0:	f023 0303 	bic.w	r3, r3, #3
 80047d4:	431a      	orrs	r2, r3
 80047d6:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 80047d8:	f7fc fbb6 	bl	8000f48 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047dc:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80047e0:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047e2:	e006      	b.n	80047f2 <HAL_RCC_ClockConfig+0x8a>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047e4:	f7fc fbb0 	bl	8000f48 <HAL_GetTick>
 80047e8:	eba0 0008 	sub.w	r0, r0, r8
 80047ec:	42b8      	cmp	r0, r7
 80047ee:	f200 8098 	bhi.w	8004922 <HAL_RCC_ClockConfig+0x1ba>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f2:	68b3      	ldr	r3, [r6, #8]
 80047f4:	6862      	ldr	r2, [r4, #4]
 80047f6:	f003 030c 	and.w	r3, r3, #12
 80047fa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80047fe:	d1f1      	bne.n	80047e4 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004800:	6823      	ldr	r3, [r4, #0]
 8004802:	079f      	lsls	r7, r3, #30
 8004804:	d43e      	bmi.n	8004884 <HAL_RCC_ClockConfig+0x11c>
    if(hpre == RCC_SYSCLK_DIV2)
 8004806:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 800480a:	d103      	bne.n	8004814 <HAL_RCC_ClockConfig+0xac>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800480c:	68b2      	ldr	r2, [r6, #8]
 800480e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004812:	60b2      	str	r2, [r6, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004814:	495e      	ldr	r1, [pc, #376]	; (8004990 <HAL_RCC_ClockConfig+0x228>)
 8004816:	680a      	ldr	r2, [r1, #0]
 8004818:	f002 020f 	and.w	r2, r2, #15
 800481c:	4295      	cmp	r5, r2
 800481e:	d209      	bcs.n	8004834 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004820:	680a      	ldr	r2, [r1, #0]
 8004822:	f022 020f 	bic.w	r2, r2, #15
 8004826:	432a      	orrs	r2, r5
 8004828:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800482a:	680a      	ldr	r2, [r1, #0]
 800482c:	f002 020f 	and.w	r2, r2, #15
 8004830:	4295      	cmp	r5, r2
 8004832:	d1ae      	bne.n	8004792 <HAL_RCC_ClockConfig+0x2a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004834:	0758      	lsls	r0, r3, #29
 8004836:	d506      	bpl.n	8004846 <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004838:	4956      	ldr	r1, [pc, #344]	; (8004994 <HAL_RCC_ClockConfig+0x22c>)
 800483a:	68e0      	ldr	r0, [r4, #12]
 800483c:	688a      	ldr	r2, [r1, #8]
 800483e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004842:	4302      	orrs	r2, r0
 8004844:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004846:	0719      	lsls	r1, r3, #28
 8004848:	d507      	bpl.n	800485a <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800484a:	4a52      	ldr	r2, [pc, #328]	; (8004994 <HAL_RCC_ClockConfig+0x22c>)
 800484c:	6921      	ldr	r1, [r4, #16]
 800484e:	6893      	ldr	r3, [r2, #8]
 8004850:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004854:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004858:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800485a:	f7ff fbe3 	bl	8004024 <HAL_RCC_GetSysClockFreq>
 800485e:	4b4d      	ldr	r3, [pc, #308]	; (8004994 <HAL_RCC_ClockConfig+0x22c>)
 8004860:	494e      	ldr	r1, [pc, #312]	; (800499c <HAL_RCC_ClockConfig+0x234>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	4a4e      	ldr	r2, [pc, #312]	; (80049a0 <HAL_RCC_ClockConfig+0x238>)
 8004866:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800486a:	5ccb      	ldrb	r3, [r1, r3]
 800486c:	f003 031f 	and.w	r3, r3, #31
 8004870:	fa20 f303 	lsr.w	r3, r0, r3
 8004874:	6013      	str	r3, [r2, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8004876:	2000      	movs	r0, #0
}
 8004878:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  status = HAL_InitTick (TICK_INT_PRIORITY);
 800487c:	f00c bde6 	b.w	801144c <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004880:	079a      	lsls	r2, r3, #30
 8004882:	d5c7      	bpl.n	8004814 <HAL_RCC_ClockConfig+0xac>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004884:	4943      	ldr	r1, [pc, #268]	; (8004994 <HAL_RCC_ClockConfig+0x22c>)
 8004886:	68a0      	ldr	r0, [r4, #8]
 8004888:	688a      	ldr	r2, [r1, #8]
 800488a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800488e:	4302      	orrs	r2, r0
 8004890:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004892:	493f      	ldr	r1, [pc, #252]	; (8004990 <HAL_RCC_ClockConfig+0x228>)
 8004894:	680a      	ldr	r2, [r1, #0]
 8004896:	f002 020f 	and.w	r2, r2, #15
 800489a:	4295      	cmp	r5, r2
 800489c:	d3c0      	bcc.n	8004820 <HAL_RCC_ClockConfig+0xb8>
 800489e:	e7c9      	b.n	8004834 <HAL_RCC_ClockConfig+0xcc>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048a0:	0399      	lsls	r1, r3, #14
 80048a2:	d48a      	bmi.n	80047ba <HAL_RCC_ClockConfig+0x52>
 80048a4:	e775      	b.n	8004792 <HAL_RCC_ClockConfig+0x2a>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048a6:	493b      	ldr	r1, [pc, #236]	; (8004994 <HAL_RCC_ClockConfig+0x22c>)
 80048a8:	6808      	ldr	r0, [r1, #0]
 80048aa:	0186      	lsls	r6, r0, #6
 80048ac:	f57f af71 	bpl.w	8004792 <HAL_RCC_ClockConfig+0x2a>
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
  uint32_t msirange = 0U;
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80048b0:	68c8      	ldr	r0, [r1, #12]
 80048b2:	f000 0003 	and.w	r0, r0, #3
 80048b6:	2801      	cmp	r0, #1
 80048b8:	d05b      	beq.n	8004972 <HAL_RCC_ClockConfig+0x20a>
  uint32_t msirange = 0U;
 80048ba:	2100      	movs	r1, #0
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048bc:	4f35      	ldr	r7, [pc, #212]	; (8004994 <HAL_RCC_ClockConfig+0x22c>)
 80048be:	68fe      	ldr	r6, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048c0:	68f8      	ldr	r0, [r7, #12]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048c2:	f006 0603 	and.w	r6, r6, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048c6:	f3c0 1003 	ubfx	r0, r0, #4, #4

  switch (pllsource)
 80048ca:	2e02      	cmp	r6, #2
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048cc:	f100 0001 	add.w	r0, r0, #1
  switch (pllsource)
 80048d0:	d046      	beq.n	8004960 <HAL_RCC_ClockConfig+0x1f8>
 80048d2:	2e03      	cmp	r6, #3
 80048d4:	d13c      	bne.n	8004950 <HAL_RCC_ClockConfig+0x1e8>
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048d6:	68fe      	ldr	r6, [r7, #12]
 80048d8:	4932      	ldr	r1, [pc, #200]	; (80049a4 <HAL_RCC_ClockConfig+0x23c>)
 80048da:	fbb1 f1f0 	udiv	r1, r1, r0
 80048de:	f3c6 2006 	ubfx	r0, r6, #8, #7
 80048e2:	fb01 f100 	mul.w	r1, r1, r0
  default:
    pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048e6:	4e2b      	ldr	r6, [pc, #172]	; (8004994 <HAL_RCC_ClockConfig+0x22c>)
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80048e8:	4f2b      	ldr	r7, [pc, #172]	; (8004998 <HAL_RCC_ClockConfig+0x230>)
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048ea:	68f0      	ldr	r0, [r6, #12]
 80048ec:	f3c0 6041 	ubfx	r0, r0, #25, #2
 80048f0:	3001      	adds	r0, #1
 80048f2:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 80048f4:	fbb1 f1f0 	udiv	r1, r1, r0
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80048f8:	42b9      	cmp	r1, r7
 80048fa:	d926      	bls.n	800494a <HAL_RCC_ClockConfig+0x1e2>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80048fc:	68b1      	ldr	r1, [r6, #8]
 80048fe:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 8004902:	d005      	beq.n	8004910 <HAL_RCC_ClockConfig+0x1a8>
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004904:	f013 0902 	ands.w	r9, r3, #2
 8004908:	f43f af60 	beq.w	80047cc <HAL_RCC_ClockConfig+0x64>
 800490c:	68a3      	ldr	r3, [r4, #8]
 800490e:	b9e3      	cbnz	r3, 800494a <HAL_RCC_ClockConfig+0x1e2>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004910:	68b3      	ldr	r3, [r6, #8]
 8004912:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800491a:	60b3      	str	r3, [r6, #8]
          hpre = RCC_SYSCLK_DIV2;
 800491c:	f04f 0980 	mov.w	r9, #128	; 0x80
 8004920:	e754      	b.n	80047cc <HAL_RCC_ClockConfig+0x64>
        return HAL_TIMEOUT;
 8004922:	2003      	movs	r0, #3
 8004924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004928:	055b      	lsls	r3, r3, #21
 800492a:	f57f af32 	bpl.w	8004792 <HAL_RCC_ClockConfig+0x2a>
 800492e:	e744      	b.n	80047ba <HAL_RCC_ClockConfig+0x52>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004930:	4a18      	ldr	r2, [pc, #96]	; (8004994 <HAL_RCC_ClockConfig+0x22c>)
 8004932:	6893      	ldr	r3, [r2, #8]
 8004934:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800493c:	6093      	str	r3, [r2, #8]
 800493e:	6862      	ldr	r2, [r4, #4]
        hpre = RCC_SYSCLK_DIV2;
 8004940:	f04f 0980 	mov.w	r9, #128	; 0x80
 8004944:	e742      	b.n	80047cc <HAL_RCC_ClockConfig+0x64>
    return HAL_ERROR;
 8004946:	2001      	movs	r0, #1
}
 8004948:	4770      	bx	lr
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800494a:	f04f 0900 	mov.w	r9, #0
 800494e:	e73d      	b.n	80047cc <HAL_RCC_ClockConfig+0x64>
    pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004950:	68fe      	ldr	r6, [r7, #12]
 8004952:	fbb1 f1f0 	udiv	r1, r1, r0
 8004956:	f3c6 2006 	ubfx	r0, r6, #8, #7
 800495a:	fb01 f100 	mul.w	r1, r1, r0
 800495e:	e7c2      	b.n	80048e6 <HAL_RCC_ClockConfig+0x17e>
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004960:	68fe      	ldr	r6, [r7, #12]
 8004962:	4911      	ldr	r1, [pc, #68]	; (80049a8 <HAL_RCC_ClockConfig+0x240>)
 8004964:	fbb1 f1f0 	udiv	r1, r1, r0
 8004968:	f3c6 2006 	ubfx	r0, r6, #8, #7
 800496c:	fb01 f100 	mul.w	r1, r1, r0
 8004970:	e7b9      	b.n	80048e6 <HAL_RCC_ClockConfig+0x17e>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004972:	6808      	ldr	r0, [r1, #0]
 8004974:	0700      	lsls	r0, r0, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004976:	bf54      	ite	pl
 8004978:	f8d1 1094 	ldrpl.w	r1, [r1, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800497c:	6809      	ldrmi	r1, [r1, #0]
    msirange = MSIRangeTable[msirange];
 800497e:	480b      	ldr	r0, [pc, #44]	; (80049ac <HAL_RCC_ClockConfig+0x244>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004980:	bf54      	ite	pl
 8004982:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004986:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 800498a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800498e:	e795      	b.n	80048bc <HAL_RCC_ClockConfig+0x154>
 8004990:	40022000 	.word	0x40022000
 8004994:	40021000 	.word	0x40021000
 8004998:	04c4b400 	.word	0x04c4b400
 800499c:	080173dc 	.word	0x080173dc
 80049a0:	20000050 	.word	0x20000050
 80049a4:	007a1200 	.word	0x007a1200
 80049a8:	00f42400 	.word	0x00f42400
 80049ac:	080173f4 	.word	0x080173f4

080049b0 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 80049b0:	4b01      	ldr	r3, [pc, #4]	; (80049b8 <HAL_RCC_GetHCLKFreq+0x8>)
}
 80049b2:	6818      	ldr	r0, [r3, #0]
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	20000050 	.word	0x20000050

080049bc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80049bc:	4b05      	ldr	r3, [pc, #20]	; (80049d4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80049be:	4a06      	ldr	r2, [pc, #24]	; (80049d8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80049c0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80049c2:	4906      	ldr	r1, [pc, #24]	; (80049dc <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80049c4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80049c8:	6808      	ldr	r0, [r1, #0]
 80049ca:	5cd3      	ldrb	r3, [r2, r3]
 80049cc:	f003 031f 	and.w	r3, r3, #31
}
 80049d0:	40d8      	lsrs	r0, r3
 80049d2:	4770      	bx	lr
 80049d4:	40021000 	.word	0x40021000
 80049d8:	080173ec 	.word	0x080173ec
 80049dc:	20000050 	.word	0x20000050

080049e0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80049e0:	4b05      	ldr	r3, [pc, #20]	; (80049f8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80049e2:	4a06      	ldr	r2, [pc, #24]	; (80049fc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80049e4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80049e6:	4906      	ldr	r1, [pc, #24]	; (8004a00 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80049e8:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80049ec:	6808      	ldr	r0, [r1, #0]
 80049ee:	5cd3      	ldrb	r3, [r2, r3]
 80049f0:	f003 031f 	and.w	r3, r3, #31
}
 80049f4:	40d8      	lsrs	r0, r3
 80049f6:	4770      	bx	lr
 80049f8:	40021000 	.word	0x40021000
 80049fc:	080173ec 	.word	0x080173ec
 8004a00:	20000050 	.word	0x20000050

08004a04 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004a04:	4b0e      	ldr	r3, [pc, #56]	; (8004a40 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a06:	220f      	movs	r2, #15
 8004a08:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	f002 0203 	and.w	r2, r2, #3
 8004a10:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004a18:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004a20:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	08db      	lsrs	r3, r3, #3
{
 8004a26:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004a28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004a2c:	4c05      	ldr	r4, [pc, #20]	; (8004a44 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004a2e:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004a30:	6823      	ldr	r3, [r4, #0]
}
 8004a32:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004a36:	f003 030f 	and.w	r3, r3, #15
 8004a3a:	600b      	str	r3, [r1, #0]
}
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	40021000 	.word	0x40021000
 8004a44:	40022000 	.word	0x40022000

08004a48 <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a48:	4a44      	ldr	r2, [pc, #272]	; (8004b5c <RCCEx_PLLSAI1_Config+0x114>)
{
 8004a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a4c:	68d3      	ldr	r3, [r2, #12]
 8004a4e:	079b      	lsls	r3, r3, #30
 8004a50:	d007      	beq.n	8004a62 <RCCEx_PLLSAI1_Config+0x1a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a52:	68d3      	ldr	r3, [r2, #12]
 8004a54:	6802      	ldr	r2, [r0, #0]
 8004a56:	f003 0303 	and.w	r3, r3, #3
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d00c      	beq.n	8004a78 <RCCEx_PLLSAI1_Config+0x30>
 8004a5e:	2001      	movs	r0, #1
 8004a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a62:	6803      	ldr	r3, [r0, #0]
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d043      	beq.n	8004af0 <RCCEx_PLLSAI1_Config+0xa8>
 8004a68:	2b03      	cmp	r3, #3
 8004a6a:	d04d      	beq.n	8004b08 <RCCEx_PLLSAI1_Config+0xc0>
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d1f6      	bne.n	8004a5e <RCCEx_PLLSAI1_Config+0x16>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a70:	6812      	ldr	r2, [r2, #0]
 8004a72:	0797      	lsls	r7, r2, #30
 8004a74:	d5f3      	bpl.n	8004a5e <RCCEx_PLLSAI1_Config+0x16>
 8004a76:	e03e      	b.n	8004af6 <RCCEx_PLLSAI1_Config+0xae>
       ||
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d0f0      	beq.n	8004a5e <RCCEx_PLLSAI1_Config+0x16>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a7c:	4c37      	ldr	r4, [pc, #220]	; (8004b5c <RCCEx_PLLSAI1_Config+0x114>)
 8004a7e:	6823      	ldr	r3, [r4, #0]
 8004a80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a84:	6023      	str	r3, [r4, #0]
 8004a86:	460f      	mov	r7, r1
 8004a88:	4606      	mov	r6, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a8a:	f7fc fa5d 	bl	8000f48 <HAL_GetTick>
 8004a8e:	4605      	mov	r5, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a90:	e004      	b.n	8004a9c <RCCEx_PLLSAI1_Config+0x54>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a92:	f7fc fa59 	bl	8000f48 <HAL_GetTick>
 8004a96:	1b40      	subs	r0, r0, r5
 8004a98:	2802      	cmp	r0, #2
 8004a9a:	d833      	bhi.n	8004b04 <RCCEx_PLLSAI1_Config+0xbc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a9c:	6823      	ldr	r3, [r4, #0]
 8004a9e:	011a      	lsls	r2, r3, #4
 8004aa0:	d4f7      	bmi.n	8004a92 <RCCEx_PLLSAI1_Config+0x4a>
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004aa2:	2f00      	cmp	r7, #0
 8004aa4:	d137      	bne.n	8004b16 <RCCEx_PLLSAI1_Config+0xce>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004aa6:	68f3      	ldr	r3, [r6, #12]
 8004aa8:	68b5      	ldr	r5, [r6, #8]
 8004aaa:	6920      	ldr	r0, [r4, #16]
 8004aac:	492c      	ldr	r1, [pc, #176]	; (8004b60 <RCCEx_PLLSAI1_Config+0x118>)
 8004aae:	6872      	ldr	r2, [r6, #4]
 8004ab0:	06db      	lsls	r3, r3, #27
 8004ab2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004ab6:	4001      	ands	r1, r0
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	3a01      	subs	r2, #1
 8004abc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004ac0:	6123      	str	r3, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ac2:	4c26      	ldr	r4, [pc, #152]	; (8004b5c <RCCEx_PLLSAI1_Config+0x114>)
 8004ac4:	6823      	ldr	r3, [r4, #0]
 8004ac6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004aca:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004acc:	f7fc fa3c 	bl	8000f48 <HAL_GetTick>
 8004ad0:	4605      	mov	r5, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ad2:	e004      	b.n	8004ade <RCCEx_PLLSAI1_Config+0x96>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ad4:	f7fc fa38 	bl	8000f48 <HAL_GetTick>
 8004ad8:	1b40      	subs	r0, r0, r5
 8004ada:	2802      	cmp	r0, #2
 8004adc:	d812      	bhi.n	8004b04 <RCCEx_PLLSAI1_Config+0xbc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ade:	6823      	ldr	r3, [r4, #0]
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	d5f7      	bpl.n	8004ad4 <RCCEx_PLLSAI1_Config+0x8c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ae4:	69b2      	ldr	r2, [r6, #24]
 8004ae6:	6923      	ldr	r3, [r4, #16]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	6123      	str	r3, [r4, #16]
 8004aec:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8004aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004af0:	6812      	ldr	r2, [r2, #0]
 8004af2:	0556      	lsls	r6, r2, #21
 8004af4:	d5b3      	bpl.n	8004a5e <RCCEx_PLLSAI1_Config+0x16>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004af6:	4c19      	ldr	r4, [pc, #100]	; (8004b5c <RCCEx_PLLSAI1_Config+0x114>)
 8004af8:	68e2      	ldr	r2, [r4, #12]
 8004afa:	f022 0203 	bic.w	r2, r2, #3
 8004afe:	4313      	orrs	r3, r2
 8004b00:	60e3      	str	r3, [r4, #12]
 8004b02:	e7bb      	b.n	8004a7c <RCCEx_PLLSAI1_Config+0x34>
        status = HAL_TIMEOUT;
 8004b04:	2003      	movs	r0, #3
 8004b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b08:	6814      	ldr	r4, [r2, #0]
 8004b0a:	03a5      	lsls	r5, r4, #14
 8004b0c:	d4f3      	bmi.n	8004af6 <RCCEx_PLLSAI1_Config+0xae>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b0e:	6812      	ldr	r2, [r2, #0]
 8004b10:	0354      	lsls	r4, r2, #13
 8004b12:	d5a4      	bpl.n	8004a5e <RCCEx_PLLSAI1_Config+0x16>
 8004b14:	e7ef      	b.n	8004af6 <RCCEx_PLLSAI1_Config+0xae>
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b16:	2f01      	cmp	r7, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b18:	6925      	ldr	r5, [r4, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b1a:	d00f      	beq.n	8004b3c <RCCEx_PLLSAI1_Config+0xf4>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b1c:	4b11      	ldr	r3, [pc, #68]	; (8004b64 <RCCEx_PLLSAI1_Config+0x11c>)
 8004b1e:	68b0      	ldr	r0, [r6, #8]
 8004b20:	6871      	ldr	r1, [r6, #4]
 8004b22:	6972      	ldr	r2, [r6, #20]
 8004b24:	402b      	ands	r3, r5
 8004b26:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004b2a:	3901      	subs	r1, #1
 8004b2c:	0852      	lsrs	r2, r2, #1
 8004b2e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004b32:	3a01      	subs	r2, #1
 8004b34:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004b38:	6123      	str	r3, [r4, #16]
 8004b3a:	e7c2      	b.n	8004ac2 <RCCEx_PLLSAI1_Config+0x7a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b3c:	4b0a      	ldr	r3, [pc, #40]	; (8004b68 <RCCEx_PLLSAI1_Config+0x120>)
 8004b3e:	68b0      	ldr	r0, [r6, #8]
 8004b40:	6871      	ldr	r1, [r6, #4]
 8004b42:	6932      	ldr	r2, [r6, #16]
 8004b44:	402b      	ands	r3, r5
 8004b46:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004b4a:	3901      	subs	r1, #1
 8004b4c:	0852      	lsrs	r2, r2, #1
 8004b4e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004b52:	3a01      	subs	r2, #1
 8004b54:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8004b58:	6123      	str	r3, [r4, #16]
 8004b5a:	e7b2      	b.n	8004ac2 <RCCEx_PLLSAI1_Config+0x7a>
 8004b5c:	40021000 	.word	0x40021000
 8004b60:	07ff800f 	.word	0x07ff800f
 8004b64:	f9ff800f 	.word	0xf9ff800f
 8004b68:	ff9f800f 	.word	0xff9f800f

08004b6c <RCCEx_PLLSAI2_Config>:
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b6c:	4a44      	ldr	r2, [pc, #272]	; (8004c80 <RCCEx_PLLSAI2_Config+0x114>)
{
 8004b6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b70:	68d3      	ldr	r3, [r2, #12]
 8004b72:	079b      	lsls	r3, r3, #30
 8004b74:	d007      	beq.n	8004b86 <RCCEx_PLLSAI2_Config+0x1a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004b76:	68d3      	ldr	r3, [r2, #12]
 8004b78:	6802      	ldr	r2, [r0, #0]
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d00c      	beq.n	8004b9c <RCCEx_PLLSAI2_Config+0x30>
 8004b82:	2001      	movs	r0, #1
 8004b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004b86:	6803      	ldr	r3, [r0, #0]
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d043      	beq.n	8004c14 <RCCEx_PLLSAI2_Config+0xa8>
 8004b8c:	2b03      	cmp	r3, #3
 8004b8e:	d04d      	beq.n	8004c2c <RCCEx_PLLSAI2_Config+0xc0>
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d1f6      	bne.n	8004b82 <RCCEx_PLLSAI2_Config+0x16>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b94:	6812      	ldr	r2, [r2, #0]
 8004b96:	0797      	lsls	r7, r2, #30
 8004b98:	d5f3      	bpl.n	8004b82 <RCCEx_PLLSAI2_Config+0x16>
 8004b9a:	e03e      	b.n	8004c1a <RCCEx_PLLSAI2_Config+0xae>
       ||
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d0f0      	beq.n	8004b82 <RCCEx_PLLSAI2_Config+0x16>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ba0:	4c37      	ldr	r4, [pc, #220]	; (8004c80 <RCCEx_PLLSAI2_Config+0x114>)
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ba8:	6023      	str	r3, [r4, #0]
 8004baa:	460f      	mov	r7, r1
 8004bac:	4606      	mov	r6, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bae:	f7fc f9cb 	bl	8000f48 <HAL_GetTick>
 8004bb2:	4605      	mov	r5, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004bb4:	e004      	b.n	8004bc0 <RCCEx_PLLSAI2_Config+0x54>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004bb6:	f7fc f9c7 	bl	8000f48 <HAL_GetTick>
 8004bba:	1b40      	subs	r0, r0, r5
 8004bbc:	2802      	cmp	r0, #2
 8004bbe:	d833      	bhi.n	8004c28 <RCCEx_PLLSAI2_Config+0xbc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	009a      	lsls	r2, r3, #2
 8004bc4:	d4f7      	bmi.n	8004bb6 <RCCEx_PLLSAI2_Config+0x4a>
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004bc6:	2f00      	cmp	r7, #0
 8004bc8:	d137      	bne.n	8004c3a <RCCEx_PLLSAI2_Config+0xce>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004bca:	68f3      	ldr	r3, [r6, #12]
 8004bcc:	68b5      	ldr	r5, [r6, #8]
 8004bce:	6960      	ldr	r0, [r4, #20]
 8004bd0:	492c      	ldr	r1, [pc, #176]	; (8004c84 <RCCEx_PLLSAI2_Config+0x118>)
 8004bd2:	6872      	ldr	r2, [r6, #4]
 8004bd4:	06db      	lsls	r3, r3, #27
 8004bd6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004bda:	4001      	ands	r1, r0
 8004bdc:	430b      	orrs	r3, r1
 8004bde:	3a01      	subs	r2, #1
 8004be0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004be4:	6163      	str	r3, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004be6:	4c26      	ldr	r4, [pc, #152]	; (8004c80 <RCCEx_PLLSAI2_Config+0x114>)
 8004be8:	6823      	ldr	r3, [r4, #0]
 8004bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bee:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf0:	f7fc f9aa 	bl	8000f48 <HAL_GetTick>
 8004bf4:	4605      	mov	r5, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004bf6:	e004      	b.n	8004c02 <RCCEx_PLLSAI2_Config+0x96>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004bf8:	f7fc f9a6 	bl	8000f48 <HAL_GetTick>
 8004bfc:	1b40      	subs	r0, r0, r5
 8004bfe:	2802      	cmp	r0, #2
 8004c00:	d812      	bhi.n	8004c28 <RCCEx_PLLSAI2_Config+0xbc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c02:	6823      	ldr	r3, [r4, #0]
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	d5f7      	bpl.n	8004bf8 <RCCEx_PLLSAI2_Config+0x8c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004c08:	69b2      	ldr	r2, [r6, #24]
 8004c0a:	6963      	ldr	r3, [r4, #20]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	6163      	str	r3, [r4, #20]
 8004c10:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8004c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c14:	6812      	ldr	r2, [r2, #0]
 8004c16:	0556      	lsls	r6, r2, #21
 8004c18:	d5b3      	bpl.n	8004b82 <RCCEx_PLLSAI2_Config+0x16>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004c1a:	4c19      	ldr	r4, [pc, #100]	; (8004c80 <RCCEx_PLLSAI2_Config+0x114>)
 8004c1c:	68e2      	ldr	r2, [r4, #12]
 8004c1e:	f022 0203 	bic.w	r2, r2, #3
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60e3      	str	r3, [r4, #12]
 8004c26:	e7bb      	b.n	8004ba0 <RCCEx_PLLSAI2_Config+0x34>
        status = HAL_TIMEOUT;
 8004c28:	2003      	movs	r0, #3
 8004c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c2c:	6814      	ldr	r4, [r2, #0]
 8004c2e:	03a5      	lsls	r5, r4, #14
 8004c30:	d4f3      	bmi.n	8004c1a <RCCEx_PLLSAI2_Config+0xae>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c32:	6812      	ldr	r2, [r2, #0]
 8004c34:	0354      	lsls	r4, r2, #13
 8004c36:	d5a4      	bpl.n	8004b82 <RCCEx_PLLSAI2_Config+0x16>
 8004c38:	e7ef      	b.n	8004c1a <RCCEx_PLLSAI2_Config+0xae>
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c3a:	2f01      	cmp	r7, #1
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c3c:	6965      	ldr	r5, [r4, #20]
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c3e:	d00f      	beq.n	8004c60 <RCCEx_PLLSAI2_Config+0xf4>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c40:	4b11      	ldr	r3, [pc, #68]	; (8004c88 <RCCEx_PLLSAI2_Config+0x11c>)
 8004c42:	68b0      	ldr	r0, [r6, #8]
 8004c44:	6871      	ldr	r1, [r6, #4]
 8004c46:	6972      	ldr	r2, [r6, #20]
 8004c48:	402b      	ands	r3, r5
 8004c4a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004c4e:	3901      	subs	r1, #1
 8004c50:	0852      	lsrs	r2, r2, #1
 8004c52:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004c56:	3a01      	subs	r2, #1
 8004c58:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004c5c:	6163      	str	r3, [r4, #20]
 8004c5e:	e7c2      	b.n	8004be6 <RCCEx_PLLSAI2_Config+0x7a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c60:	4b0a      	ldr	r3, [pc, #40]	; (8004c8c <RCCEx_PLLSAI2_Config+0x120>)
 8004c62:	68b0      	ldr	r0, [r6, #8]
 8004c64:	6871      	ldr	r1, [r6, #4]
 8004c66:	6932      	ldr	r2, [r6, #16]
 8004c68:	402b      	ands	r3, r5
 8004c6a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004c6e:	3901      	subs	r1, #1
 8004c70:	0852      	lsrs	r2, r2, #1
 8004c72:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004c76:	3a01      	subs	r2, #1
 8004c78:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8004c7c:	6163      	str	r3, [r4, #20]
 8004c7e:	e7b2      	b.n	8004be6 <RCCEx_PLLSAI2_Config+0x7a>
 8004c80:	40021000 	.word	0x40021000
 8004c84:	07ff800f 	.word	0x07ff800f
 8004c88:	f9ff800f 	.word	0xf9ff800f
 8004c8c:	ff9f800f 	.word	0xff9f800f

08004c90 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c94:	6803      	ldr	r3, [r0, #0]
 8004c96:	f413 6600 	ands.w	r6, r3, #2048	; 0x800
{
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c9e:	d014      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x3a>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004ca0:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8004ca2:	2940      	cmp	r1, #64	; 0x40
 8004ca4:	f000 8215 	beq.w	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004ca8:	f200 8234 	bhi.w	8005114 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004cac:	2900      	cmp	r1, #0
 8004cae:	f000 8201 	beq.w	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004cb2:	2920      	cmp	r1, #32
 8004cb4:	f040 8232 	bne.w	800511c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004cb8:	2100      	movs	r1, #0
 8004cba:	3020      	adds	r0, #32
 8004cbc:	f7ff ff56 	bl	8004b6c <RCCEx_PLLSAI2_Config>
 8004cc0:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004cc2:	2e00      	cmp	r6, #0
 8004cc4:	f000 8239 	beq.w	800513a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8004cc8:	6823      	ldr	r3, [r4, #0]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004cca:	04df      	lsls	r7, r3, #19
 8004ccc:	f140 8132 	bpl.w	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004cd0:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8004cd2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004cd6:	f000 820b 	beq.w	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8004cda:	f200 8122 	bhi.w	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004cde:	2900      	cmp	r1, #0
 8004ce0:	f000 81ed 	beq.w	80050be <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004ce4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004ce8:	f040 8123 	bne.w	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004cec:	2100      	movs	r1, #0
 8004cee:	f104 0020 	add.w	r0, r4, #32
 8004cf2:	f7ff ff3b 	bl	8004b6c <RCCEx_PLLSAI2_Config>
 8004cf6:	6823      	ldr	r3, [r4, #0]
 8004cf8:	4607      	mov	r7, r0
    if(ret == HAL_OK)
 8004cfa:	2f00      	cmp	r7, #0
 8004cfc:	f040 81e7 	bne.w	80050ce <HAL_RCCEx_PeriphCLKConfig+0x43e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d00:	49c2      	ldr	r1, [pc, #776]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004d02:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004d04:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8004d08:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d0c:	4302      	orrs	r2, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d0e:	039d      	lsls	r5, r3, #14
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d10:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d14:	f100 8112 	bmi.w	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d18:	07dd      	lsls	r5, r3, #31
 8004d1a:	d508      	bpl.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d1c:	49bb      	ldr	r1, [pc, #748]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004d1e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004d20:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004d24:	f022 0203 	bic.w	r2, r2, #3
 8004d28:	4302      	orrs	r2, r0
 8004d2a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d2e:	0798      	lsls	r0, r3, #30
 8004d30:	d508      	bpl.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d32:	49b6      	ldr	r1, [pc, #728]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004d34:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004d36:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004d3a:	f022 020c 	bic.w	r2, r2, #12
 8004d3e:	4302      	orrs	r2, r0
 8004d40:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d44:	0759      	lsls	r1, r3, #29
 8004d46:	d508      	bpl.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0xca>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d48:	49b0      	ldr	r1, [pc, #704]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004d4a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004d4c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004d50:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8004d54:	4302      	orrs	r2, r0
 8004d56:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d5a:	071a      	lsls	r2, r3, #28
 8004d5c:	d508      	bpl.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d5e:	49ab      	ldr	r1, [pc, #684]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004d60:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004d62:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004d66:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004d6a:	4302      	orrs	r2, r0
 8004d6c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d70:	06dd      	lsls	r5, r3, #27
 8004d72:	d508      	bpl.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d74:	49a5      	ldr	r1, [pc, #660]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004d76:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004d78:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004d7c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004d80:	4302      	orrs	r2, r0
 8004d82:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d86:	0698      	lsls	r0, r3, #26
 8004d88:	d508      	bpl.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d8a:	49a0      	ldr	r1, [pc, #640]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004d8c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004d8e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004d92:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d96:	4302      	orrs	r2, r0
 8004d98:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d9c:	0599      	lsls	r1, r3, #22
 8004d9e:	d508      	bpl.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004da0:	499a      	ldr	r1, [pc, #616]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004da2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004da4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004da8:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8004dac:	4302      	orrs	r2, r0
 8004dae:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004db2:	055a      	lsls	r2, r3, #21
 8004db4:	d508      	bpl.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004db6:	4995      	ldr	r1, [pc, #596]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004db8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004dba:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004dbe:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004dc2:	4302      	orrs	r2, r0
 8004dc4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dc8:	065d      	lsls	r5, r3, #25
 8004dca:	d508      	bpl.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x14e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dcc:	498f      	ldr	r1, [pc, #572]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004dce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004dd0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004dd4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004dd8:	4302      	orrs	r2, r0
 8004dda:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004dde:	0618      	lsls	r0, r3, #24
 8004de0:	d508      	bpl.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x164>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004de2:	498a      	ldr	r1, [pc, #552]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004de4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004de6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004dea:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004dee:	4302      	orrs	r2, r0
 8004df0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004df4:	05d9      	lsls	r1, r3, #23
 8004df6:	d508      	bpl.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x17a>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004df8:	4984      	ldr	r1, [pc, #528]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004dfa:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004dfc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004e00:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004e04:	4302      	orrs	r2, r0
 8004e06:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e0a:	02da      	lsls	r2, r3, #11
 8004e0c:	d508      	bpl.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x190>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e0e:	497f      	ldr	r1, [pc, #508]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004e10:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004e12:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8004e16:	f022 0203 	bic.w	r2, r2, #3
 8004e1a:	4302      	orrs	r2, r0
 8004e1c:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e20:	049d      	lsls	r5, r3, #18
 8004e22:	d510      	bpl.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e24:	4879      	ldr	r0, [pc, #484]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004e26:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004e28:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004e2c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004e30:	430a      	orrs	r2, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e32:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e36:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e3a:	f000 812a 	beq.w	8005092 <HAL_RCCEx_PeriphCLKConfig+0x402>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e3e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004e42:	f000 817d 	beq.w	8005140 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e46:	0318      	lsls	r0, r3, #12
 8004e48:	d51a      	bpl.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e4a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8004e4c:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8004e50:	f000 8124 	beq.w	800509c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8004e54:	496d      	ldr	r1, [pc, #436]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004e56:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8004e5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e5e:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
 8004e62:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004e66:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004e6a:	4302      	orrs	r2, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e6c:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e70:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e74:	f000 8159 	beq.w	800512a <HAL_RCCEx_PeriphCLKConfig+0x49a>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e78:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8004e7c:	f000 8176 	beq.w	800516c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e80:	0359      	lsls	r1, r3, #13
 8004e82:	d510      	bpl.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e84:	4861      	ldr	r0, [pc, #388]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004e86:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004e88:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004e8c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004e90:	430a      	orrs	r2, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e92:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e96:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e9a:	f000 80f5 	beq.w	8005088 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e9e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004ea2:	f000 8158 	beq.w	8005156 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ea6:	045a      	lsls	r2, r3, #17
 8004ea8:	d50d      	bpl.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004eaa:	4858      	ldr	r0, [pc, #352]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004eac:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8004eb0:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004eb4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004eb8:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004eba:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ebe:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ec2:	f000 811c 	beq.w	80050fe <HAL_RCCEx_PeriphCLKConfig+0x46e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ec6:	03dd      	lsls	r5, r3, #15
 8004ec8:	d509      	bpl.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x24e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004eca:	4950      	ldr	r1, [pc, #320]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004ecc:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004ed0:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8004ed4:	f022 0204 	bic.w	r2, r2, #4
 8004ed8:	4302      	orrs	r2, r0
 8004eda:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004ede:	0298      	lsls	r0, r3, #10
 8004ee0:	d509      	bpl.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x266>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004ee2:	494a      	ldr	r1, [pc, #296]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004ee4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8004ee8:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8004eec:	f022 0218 	bic.w	r2, r2, #24
 8004ef0:	4302      	orrs	r2, r0
 8004ef2:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ef6:	0259      	lsls	r1, r3, #9
 8004ef8:	f100 8094 	bmi.w	8005024 <HAL_RCCEx_PeriphCLKConfig+0x394>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004efc:	01db      	lsls	r3, r3, #7
 8004efe:	d50c      	bpl.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004f00:	4a42      	ldr	r2, [pc, #264]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004f02:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8004f06:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004f0a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004f0e:	430b      	orrs	r3, r1
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004f10:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004f14:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004f18:	d07c      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x384>
}
 8004f1a:	4630      	mov	r0, r6
 8004f1c:	b002      	add	sp, #8
 8004f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch(PeriphClkInit->Sai2ClockSelection)
 8004f22:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8004f26:	f000 80fb 	beq.w	8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>
 8004f2a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004f2e:	f000 80f7 	beq.w	8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>
      ret = HAL_ERROR;
 8004f32:	2601      	movs	r6, #1
 8004f34:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f36:	039d      	lsls	r5, r3, #14
 8004f38:	f57f aeee 	bpl.w	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x88>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f3c:	4b33      	ldr	r3, [pc, #204]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004f3e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004f40:	00d0      	lsls	r0, r2, #3
 8004f42:	d556      	bpl.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    FlagStatus       pwrclkchanged = RESET;
 8004f44:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f48:	4d31      	ldr	r5, [pc, #196]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x380>)
 8004f4a:	682b      	ldr	r3, [r5, #0]
 8004f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f50:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004f52:	f7fb fff9 	bl	8000f48 <HAL_GetTick>
 8004f56:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f58:	e006      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f5a:	f7fb fff5 	bl	8000f48 <HAL_GetTick>
 8004f5e:	eba0 0009 	sub.w	r0, r0, r9
 8004f62:	2802      	cmp	r0, #2
 8004f64:	f200 8085 	bhi.w	8005072 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f68:	682b      	ldr	r3, [r5, #0]
 8004f6a:	05d9      	lsls	r1, r3, #23
 8004f6c:	d5f5      	bpl.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    if(ret == HAL_OK)
 8004f6e:	2f00      	cmp	r7, #0
 8004f70:	f040 8109 	bne.w	8005186 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f74:	4a25      	ldr	r2, [pc, #148]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f76:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f7a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f7e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004f82:	d029      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004f84:	428b      	cmp	r3, r1
 8004f86:	f000 80fc 	beq.w	8005182 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f8a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f8e:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 8004f92:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8004f96:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f9a:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fa2:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8004fa6:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8004faa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004fae:	07da      	lsls	r2, r3, #31
 8004fb0:	d512      	bpl.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x348>
        tickstart = HAL_GetTick();
 8004fb2:	f7fb ffc9 	bl	8000f48 <HAL_GetTick>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fb6:	4d15      	ldr	r5, [pc, #84]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
        tickstart = HAL_GetTick();
 8004fb8:	4682      	mov	sl, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fba:	f241 3988 	movw	r9, #5000	; 0x1388
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fbe:	e005      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x33c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fc0:	f7fb ffc2 	bl	8000f48 <HAL_GetTick>
 8004fc4:	eba0 000a 	sub.w	r0, r0, sl
 8004fc8:	4548      	cmp	r0, r9
 8004fca:	d852      	bhi.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fcc:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8004fd0:	079b      	lsls	r3, r3, #30
 8004fd2:	d5f5      	bpl.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004fd4:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fd8:	4a0c      	ldr	r2, [pc, #48]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004fda:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fe2:	430b      	orrs	r3, r1
 8004fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if(pwrclkchanged == SET)
 8004fe8:	f1b8 0f00 	cmp.w	r8, #0
 8004fec:	d146      	bne.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004fee:	6823      	ldr	r3, [r4, #0]
 8004ff0:	e692      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x88>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ff2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004ff4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004ff8:	659a      	str	r2, [r3, #88]	; 0x58
 8004ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005000:	9301      	str	r3, [sp, #4]
 8005002:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005004:	f04f 0801 	mov.w	r8, #1
 8005008:	e79e      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800500a:	bf00      	nop
 800500c:	40021000 	.word	0x40021000
 8005010:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005014:	68d3      	ldr	r3, [r2, #12]
}
 8005016:	4630      	mov	r0, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005018:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800501c:	60d3      	str	r3, [r2, #12]
}
 800501e:	b002      	add	sp, #8
 8005020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RCC_PLLSAI2_DISABLE();
 8005024:	4d5a      	ldr	r5, [pc, #360]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x500>)
 8005026:	682b      	ldr	r3, [r5, #0]
 8005028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800502c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800502e:	f7fb ff8b 	bl	8000f48 <HAL_GetTick>
 8005032:	4680      	mov	r8, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005034:	e005      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005036:	f7fb ff87 	bl	8000f48 <HAL_GetTick>
 800503a:	eba0 0008 	sub.w	r0, r0, r8
 800503e:	2802      	cmp	r0, #2
 8005040:	d870      	bhi.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x494>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005042:	682b      	ldr	r3, [r5, #0]
 8005044:	009a      	lsls	r2, r3, #2
 8005046:	d4f6      	bmi.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    if(ret == HAL_OK)
 8005048:	2f00      	cmp	r7, #0
 800504a:	d173      	bne.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800504c:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8005050:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005054:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005058:	4313      	orrs	r3, r2
 800505a:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800505e:	2102      	movs	r1, #2
 8005060:	f104 0020 	add.w	r0, r4, #32
 8005064:	f7ff fd82 	bl	8004b6c <RCCEx_PLLSAI2_Config>
    if(ret != HAL_OK)
 8005068:	2800      	cmp	r0, #0
 800506a:	f040 808e 	bne.w	800518a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	e744      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x26c>
        ret = HAL_TIMEOUT;
 8005072:	2603      	movs	r6, #3
 8005074:	4637      	mov	r7, r6
    if(pwrclkchanged == SET)
 8005076:	f1b8 0f00 	cmp.w	r8, #0
 800507a:	d0b8      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800507c:	4a44      	ldr	r2, [pc, #272]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x500>)
 800507e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005084:	6593      	str	r3, [r2, #88]	; 0x58
 8005086:	e7b2      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005088:	68c2      	ldr	r2, [r0, #12]
 800508a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800508e:	60c2      	str	r2, [r0, #12]
 8005090:	e709      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x216>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005092:	68c2      	ldr	r2, [r0, #12]
 8005094:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005098:	60c2      	str	r2, [r0, #12]
 800509a:	e6d4      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800509c:	4a3c      	ldr	r2, [pc, #240]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x500>)
 800509e:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
 80050a2:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80050a6:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050aa:	68d1      	ldr	r1, [r2, #12]
 80050ac:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80050b0:	60d1      	str	r1, [r2, #12]
 80050b2:	e6e5      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050b4:	3004      	adds	r0, #4
 80050b6:	f7ff fcc7 	bl	8004a48 <RCCEx_PLLSAI1_Config>
 80050ba:	4606      	mov	r6, r0
      break;
 80050bc:	e601      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x32>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050be:	1d20      	adds	r0, r4, #4
 80050c0:	f7ff fcc2 	bl	8004a48 <RCCEx_PLLSAI1_Config>
 80050c4:	4607      	mov	r7, r0
 80050c6:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80050c8:	2f00      	cmp	r7, #0
 80050ca:	f43f ae19 	beq.w	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x70>
 80050ce:	463e      	mov	r6, r7
 80050d0:	e731      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050d2:	482f      	ldr	r0, [pc, #188]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x500>)
 80050d4:	68c2      	ldr	r2, [r0, #12]
 80050d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80050da:	60c2      	str	r2, [r0, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050dc:	482c      	ldr	r0, [pc, #176]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x500>)
 80050de:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 80050e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050e6:	4311      	orrs	r1, r2
 80050e8:	f8c0 109c 	str.w	r1, [r0, #156]	; 0x9c
 80050ec:	2600      	movs	r6, #0
 80050ee:	e5ec      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050f0:	4927      	ldr	r1, [pc, #156]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x500>)
 80050f2:	68ca      	ldr	r2, [r1, #12]
 80050f4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80050f8:	60ca      	str	r2, [r1, #12]
      break;
 80050fa:	4637      	mov	r7, r6
 80050fc:	e5fd      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x6a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80050fe:	2102      	movs	r1, #2
 8005100:	1d20      	adds	r0, r4, #4
 8005102:	f7ff fca1 	bl	8004a48 <RCCEx_PLLSAI1_Config>
 8005106:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8005108:	4607      	mov	r7, r0
 800510a:	2800      	cmp	r0, #0
 800510c:	f43f aedb 	beq.w	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8005110:	4606      	mov	r6, r0
 8005112:	e6d8      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x236>
    switch(PeriphClkInit->Sai1ClockSelection)
 8005114:	2960      	cmp	r1, #96	; 0x60
 8005116:	d0e1      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x44c>
 8005118:	2980      	cmp	r1, #128	; 0x80
 800511a:	d0df      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x44c>
      ret = HAL_ERROR;
 800511c:	2601      	movs	r6, #1
 800511e:	e5d4      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x3a>
    switch(PeriphClkInit->Sai2ClockSelection)
 8005120:	4637      	mov	r7, r6
 8005122:	e5ea      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005124:	6823      	ldr	r3, [r4, #0]
        ret = HAL_TIMEOUT;
 8005126:	2603      	movs	r6, #3
 8005128:	e6e8      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800512a:	68ca      	ldr	r2, [r1, #12]
 800512c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005130:	60ca      	str	r2, [r1, #12]
 8005132:	e6a5      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    if(ret == HAL_OK)
 8005134:	463e      	mov	r6, r7
 8005136:	6823      	ldr	r3, [r4, #0]
 8005138:	e6e0      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800513a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800513c:	6823      	ldr	r3, [r4, #0]
 800513e:	e7cd      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x44c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005140:	2101      	movs	r1, #1
 8005142:	1d20      	adds	r0, r4, #4
 8005144:	f7ff fc80 	bl	8004a48 <RCCEx_PLLSAI1_Config>
 8005148:	6823      	ldr	r3, [r4, #0]
        if(ret != HAL_OK)
 800514a:	4607      	mov	r7, r0
 800514c:	2800      	cmp	r0, #0
 800514e:	f43f ae7a 	beq.w	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005152:	4606      	mov	r6, r0
 8005154:	e677      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005156:	2101      	movs	r1, #1
 8005158:	1d20      	adds	r0, r4, #4
 800515a:	f7ff fc75 	bl	8004a48 <RCCEx_PLLSAI1_Config>
 800515e:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8005160:	4607      	mov	r7, r0
 8005162:	2800      	cmp	r0, #0
 8005164:	f43f ae9f 	beq.w	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x216>
 8005168:	4606      	mov	r6, r0
 800516a:	e69c      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x216>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800516c:	2101      	movs	r1, #1
 800516e:	1d20      	adds	r0, r4, #4
 8005170:	f7ff fc6a 	bl	8004a48 <RCCEx_PLLSAI1_Config>
 8005174:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8005176:	4607      	mov	r7, r0
 8005178:	2800      	cmp	r0, #0
 800517a:	f43f ae81 	beq.w	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800517e:	4606      	mov	r6, r0
 8005180:	e67e      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8005182:	460b      	mov	r3, r1
 8005184:	e713      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x31e>
 8005186:	463e      	mov	r6, r7
 8005188:	e72e      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x358>
    if(ret != HAL_OK)
 800518a:	4606      	mov	r6, r0
 800518c:	6823      	ldr	r3, [r4, #0]
 800518e:	e6b5      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005190:	40021000 	.word	0x40021000

08005194 <HAL_RTC_Init>:
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_ERROR;

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8005194:	2800      	cmp	r0, #0
 8005196:	d06e      	beq.n	8005276 <HAL_RTC_Init+0xe2>
{
 8005198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800519a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800519e:	4604      	mov	r4, r0
 80051a0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d04f      	beq.n	8005248 <HAL_RTC_Init+0xb4>
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051a8:	6823      	ldr	r3, [r4, #0]
 80051aa:	2253      	movs	r2, #83	; 0x53
    hrtc->State = HAL_RTC_STATE_BUSY;
 80051ac:	2002      	movs	r0, #2
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051ae:	21ca      	movs	r1, #202	; 0xca
    hrtc->State = HAL_RTC_STATE_BUSY;
 80051b0:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051b4:	6259      	str	r1, [r3, #36]	; 0x24
 80051b6:	625a      	str	r2, [r3, #36]	; 0x24
        return HAL_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80051b8:	68da      	ldr	r2, [r3, #12]
 80051ba:	0655      	lsls	r5, r2, #25
 80051bc:	d52c      	bpl.n	8005218 <HAL_RTC_Init+0x84>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80051be:	6899      	ldr	r1, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80051c0:	6862      	ldr	r2, [r4, #4]
 80051c2:	6927      	ldr	r7, [r4, #16]
 80051c4:	69a6      	ldr	r6, [r4, #24]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80051c6:	68a0      	ldr	r0, [r4, #8]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80051c8:	68e5      	ldr	r5, [r4, #12]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80051ca:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80051ce:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80051d2:	6099      	str	r1, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80051d4:	6899      	ldr	r1, [r3, #8]
 80051d6:	433a      	orrs	r2, r7
 80051d8:	4332      	orrs	r2, r6
 80051da:	430a      	orrs	r2, r1
 80051dc:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80051de:	611d      	str	r5, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80051e0:	691a      	ldr	r2, [r3, #16]
 80051e2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80051e6:	611a      	str	r2, [r3, #16]
      CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051ee:	60da      	str	r2, [r3, #12]
      if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80051f0:	689a      	ldr	r2, [r3, #8]
 80051f2:	0692      	lsls	r2, r2, #26
 80051f4:	d52d      	bpl.n	8005252 <HAL_RTC_Init+0xbe>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80051f6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80051f8:	6960      	ldr	r0, [r4, #20]
 80051fa:	69e2      	ldr	r2, [r4, #28]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80051fc:	f021 0103 	bic.w	r1, r1, #3
 8005200:	64d9      	str	r1, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005202:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005204:	4302      	orrs	r2, r0
 8005206:	430a      	orrs	r2, r1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005208:	25ff      	movs	r5, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_READY;
 800520a:	2101      	movs	r1, #1
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800520c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->State = HAL_RTC_STATE_READY;
 800520e:	2000      	movs	r0, #0
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005210:	625d      	str	r5, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_READY;
 8005212:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
 8005216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005218:	f04f 32ff 	mov.w	r2, #4294967295
 800521c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800521e:	f7fb fe93 	bl	8000f48 <HAL_GetTick>
 8005222:	4605      	mov	r5, r0
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005224:	6823      	ldr	r3, [r4, #0]
 8005226:	68da      	ldr	r2, [r3, #12]
 8005228:	0650      	lsls	r0, r2, #25
 800522a:	d4c8      	bmi.n	80051be <HAL_RTC_Init+0x2a>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800522c:	f7fb fe8c 	bl	8000f48 <HAL_GetTick>
 8005230:	1b40      	subs	r0, r0, r5
 8005232:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005236:	d9f5      	bls.n	8005224 <HAL_RTC_Init+0x90>
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005238:	6822      	ldr	r2, [r4, #0]
 800523a:	21ff      	movs	r1, #255	; 0xff
          hrtc->State = HAL_RTC_STATE_ERROR;
 800523c:	2304      	movs	r3, #4
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800523e:	6251      	str	r1, [r2, #36]	; 0x24
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005240:	2001      	movs	r0, #1
 8005242:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 8005246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8005248:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 800524c:	f00b ffe8 	bl	8011220 <HAL_RTC_MspInit>
 8005250:	e7aa      	b.n	80051a8 <HAL_RTC_Init+0x14>
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005258:	60da      	str	r2, [r3, #12]
  tickstart = HAL_GetTick();
 800525a:	f7fb fe75 	bl	8000f48 <HAL_GetTick>
 800525e:	4605      	mov	r5, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005260:	6823      	ldr	r3, [r4, #0]
 8005262:	68da      	ldr	r2, [r3, #12]
 8005264:	0691      	lsls	r1, r2, #26
 8005266:	d4c6      	bmi.n	80051f6 <HAL_RTC_Init+0x62>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005268:	f7fb fe6e 	bl	8000f48 <HAL_GetTick>
 800526c:	1b40      	subs	r0, r0, r5
 800526e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005272:	d9f5      	bls.n	8005260 <HAL_RTC_Init+0xcc>
 8005274:	e7e0      	b.n	8005238 <HAL_RTC_Init+0xa4>
  HAL_StatusTypeDef status = HAL_ERROR;
 8005276:	2001      	movs	r0, #1
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop

0800527c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800527c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005280:	b087      	sub	sp, #28
 8005282:	4605      	mov	r5, r0
 8005284:	4688      	mov	r8, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005286:	f7fb fe5f 	bl	8000f48 <HAL_GetTick>
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
  uint32_t *scr = pSCR;
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 800528a:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 800528c:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 800528e:	6828      	ldr	r0, [r5, #0]
 8005290:	f002 fcba 	bl	8007c08 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005294:	4604      	mov	r4, r0
 8005296:	b118      	cbz	r0, 80052a0 <SD_FindSCR+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
    
  }

  return HAL_SD_ERROR_NONE;
}
 8005298:	4620      	mov	r0, r4
 800529a:	b007      	add	sp, #28
 800529c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 80052a0:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80052a2:	6828      	ldr	r0, [r5, #0]
 80052a4:	0409      	lsls	r1, r1, #16
 80052a6:	f002 fda3 	bl	8007df0 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 80052aa:	4604      	mov	r4, r0
 80052ac:	2800      	cmp	r0, #0
 80052ae:	d1f3      	bne.n	8005298 <SD_FindSCR+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80052b0:	f04f 31ff 	mov.w	r1, #4294967295
  config.DataLength    = 8;
 80052b4:	2008      	movs	r0, #8
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80052b6:	2202      	movs	r2, #2
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80052b8:	2301      	movs	r3, #1
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80052ba:	9100      	str	r1, [sp, #0]
  config.DataLength    = 8;
 80052bc:	9001      	str	r0, [sp, #4]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80052be:	4669      	mov	r1, sp
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80052c0:	2730      	movs	r7, #48	; 0x30
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80052c2:	6828      	ldr	r0, [r5, #0]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80052c4:	9404      	str	r4, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80052c6:	9203      	str	r2, [sp, #12]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80052c8:	9305      	str	r3, [sp, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80052ca:	9702      	str	r7, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80052cc:	f002 fc88 	bl	8007be0 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80052d0:	6828      	ldr	r0, [r5, #0]
 80052d2:	f002 fe47 	bl	8007f64 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80052d6:	4604      	mov	r4, r0
 80052d8:	2800      	cmp	r0, #0
 80052da:	d1dd      	bne.n	8005298 <SD_FindSCR+0x1c>
 80052dc:	4683      	mov	fp, r0
 80052de:	4682      	mov	sl, r0
 80052e0:	4681      	mov	r9, r0
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80052e2:	f240 572a 	movw	r7, #1322	; 0x52a
 80052e6:	e004      	b.n	80052f2 <SD_FindSCR+0x76>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80052e8:	f7fb fe2e 	bl	8000f48 <HAL_GetTick>
 80052ec:	1b80      	subs	r0, r0, r6
 80052ee:	3001      	adds	r0, #1
 80052f0:	d018      	beq.n	8005324 <SD_FindSCR+0xa8>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80052f2:	6828      	ldr	r0, [r5, #0]
 80052f4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80052f6:	423b      	tst	r3, r7
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80052f8:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80052fa:	d10e      	bne.n	800531a <SD_FindSCR+0x9e>
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80052fc:	031b      	lsls	r3, r3, #12
 80052fe:	d4f3      	bmi.n	80052e8 <SD_FindSCR+0x6c>
 8005300:	f1b9 0f00 	cmp.w	r9, #0
 8005304:	d1f0      	bne.n	80052e8 <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8005306:	f002 fc57 	bl	8007bb8 <SDMMC_ReadFIFO>
 800530a:	4682      	mov	sl, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800530c:	6828      	ldr	r0, [r5, #0]
 800530e:	f002 fc53 	bl	8007bb8 <SDMMC_ReadFIFO>
      index++;
 8005312:	f04f 0901 	mov.w	r9, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8005316:	4683      	mov	fp, r0
 8005318:	e7e6      	b.n	80052e8 <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800531a:	0719      	lsls	r1, r3, #28
 800531c:	d505      	bpl.n	800532a <SD_FindSCR+0xae>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800531e:	2408      	movs	r4, #8
 8005320:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005322:	e7b9      	b.n	8005298 <SD_FindSCR+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 8005324:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8005328:	e7b6      	b.n	8005298 <SD_FindSCR+0x1c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800532a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800532c:	079a      	lsls	r2, r3, #30
 800532e:	d502      	bpl.n	8005336 <SD_FindSCR+0xba>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005330:	2402      	movs	r4, #2
 8005332:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005334:	e7b0      	b.n	8005298 <SD_FindSCR+0x1c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005336:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005338:	069b      	lsls	r3, r3, #26
 800533a:	d502      	bpl.n	8005342 <SD_FindSCR+0xc6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800533c:	2420      	movs	r4, #32
 800533e:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8005340:	e7aa      	b.n	8005298 <SD_FindSCR+0x1c>
 8005342:	fa9b f28b 	rev.w	r2, fp
 8005346:	fa9a f38a 	rev.w	r3, sl
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800534a:	4902      	ldr	r1, [pc, #8]	; (8005354 <SD_FindSCR+0xd8>)
 800534c:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800534e:	e888 000c 	stmia.w	r8, {r2, r3}
  return HAL_SD_ERROR_NONE;
 8005352:	e7a1      	b.n	8005298 <SD_FindSCR+0x1c>
 8005354:	18000f3a 	.word	0x18000f3a

08005358 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005358:	6e02      	ldr	r2, [r0, #96]	; 0x60
{
 800535a:	b4f0      	push	{r4, r5, r6, r7}
 800535c:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800535e:	0f97      	lsrs	r7, r2, #30
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005360:	f3c2 6683 	ubfx	r6, r2, #26, #4
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005364:	f3c2 6501 	ubfx	r5, r2, #24, #2
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005368:	f3c2 4407 	ubfx	r4, r2, #16, #8
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800536c:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005370:	b2d2      	uxtb	r2, r2
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005372:	700f      	strb	r7, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005374:	704e      	strb	r6, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005376:	708d      	strb	r5, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005378:	70cc      	strb	r4, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800537a:	7108      	strb	r0, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800537c:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800537e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005380:	0d15      	lsrs	r5, r2, #20
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005382:	f3c2 4403 	ubfx	r4, r2, #16, #4
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005386:	80cd      	strh	r5, [r1, #6]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005388:	2000      	movs	r0, #0
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800538a:	720c      	strb	r4, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800538c:	f3c2 37c0 	ubfx	r7, r2, #15, #1
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005390:	f3c2 3680 	ubfx	r6, r2, #14, #1
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005394:	f3c2 3540 	ubfx	r5, r2, #13, #1
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005398:	f3c2 3400 	ubfx	r4, r2, #12, #1
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800539c:	724f      	strb	r7, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800539e:	728e      	strb	r6, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80053a0:	72cd      	strb	r5, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80053a2:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80053a4:	7348      	strb	r0, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 80053a6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80053a8:	2800      	cmp	r0, #0
 80053aa:	d16c      	bne.n	8005486 <HAL_SD_GetCardCSD+0x12e>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80053ac:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80053ae:	f640 74fc 	movw	r4, #4092	; 0xffc
 80053b2:	ea04 0282 	and.w	r2, r4, r2, lsl #2
 80053b6:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 80053ba:	610a      	str	r2, [r1, #16]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80053bc:	f3c0 5542 	ubfx	r5, r0, #21, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80053c0:	f3c0 4482 	ubfx	r4, r0, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80053c4:	f3c0 32c2 	ubfx	r2, r0, #15, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80053c8:	f3c0 67c2 	ubfx	r7, r0, #27, #3
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80053cc:	f3c0 6602 	ubfx	r6, r0, #24, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80053d0:	750f      	strb	r7, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80053d2:	754e      	strb	r6, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80053d4:	758d      	strb	r5, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80053d6:	75cc      	strb	r4, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80053d8:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80053da:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80053dc:	7e0c      	ldrb	r4, [r1, #24]
 80053de:	f004 0407 	and.w	r4, r4, #7
 80053e2:	3402      	adds	r4, #2
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80053e4:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80053e6:	40a2      	lsls	r2, r4
 80053e8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80053ea:	7a0d      	ldrb	r5, [r1, #8]
 80053ec:	2401      	movs	r4, #1
 80053ee:	f005 050f 	and.w	r5, r5, #15
 80053f2:	40ac      	lsls	r4, r5
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 80053f4:	0a65      	lsrs	r5, r4, #9
 80053f6:	fb02 f205 	mul.w	r2, r2, r5
    hsd->SdCard.LogBlockSize = 512U;
 80053fa:	f44f 7500 	mov.w	r5, #512	; 0x200
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80053fe:	651c      	str	r4, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8005400:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8005402:	659d      	str	r5, [r3, #88]	; 0x58
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005404:	f3c0 3480 	ubfx	r4, r0, #14, #1
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005408:	f3c0 12c6 	ubfx	r2, r0, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800540c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005410:	764c      	strb	r4, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005412:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005414:	76c8      	strb	r0, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005418:	0fdd      	lsrs	r5, r3, #31
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800541a:	f3c3 7441 	ubfx	r4, r3, #29, #2
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800541e:	f3c3 6282 	ubfx	r2, r3, #26, #3
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005422:	770d      	strb	r5, [r1, #28]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005424:	f3c3 5783 	ubfx	r7, r3, #22, #4
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005428:	774c      	strb	r4, [r1, #29]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800542a:	f3c3 5640 	ubfx	r6, r3, #21, #1
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800542e:	778a      	strb	r2, [r1, #30]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005430:	f3c3 4500 	ubfx	r5, r3, #16, #1
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005434:	f3c3 34c0 	ubfx	r4, r3, #15, #1
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005438:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->Reserved3 = 0;
 800543c:	2000      	movs	r0, #0
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800543e:	77cf      	strb	r7, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005440:	f881 6020 	strb.w	r6, [r1, #32]
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005444:	f3c3 3740 	ubfx	r7, r3, #13, #1
  pCSD->Reserved3 = 0;
 8005448:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800544c:	f3c3 3600 	ubfx	r6, r3, #12, #1
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005450:	f881 5022 	strb.w	r5, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005454:	f881 4023 	strb.w	r4, [r1, #35]	; 0x23
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005458:	f3c3 2581 	ubfx	r5, r3, #10, #2
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800545c:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005460:	f3c3 2401 	ubfx	r4, r3, #8, #2
  pCSD->Reserved4 = 1;
 8005464:	2201      	movs	r2, #1
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005466:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800546a:	f881 7025 	strb.w	r7, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800546e:	f881 6026 	strb.w	r6, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005472:	f881 5027 	strb.w	r5, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005476:	f881 4028 	strb.w	r4, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800547a:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800547e:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
}
 8005482:	bcf0      	pop	{r4, r5, r6, r7}
 8005484:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005486:	2801      	cmp	r0, #1
 8005488:	d00c      	beq.n	80054a4 <HAL_SD_GetCardCSD+0x14c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	490e      	ldr	r1, [pc, #56]	; (80054c8 <HAL_SD_GetCardCSD+0x170>)
 800548e:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005492:	2101      	movs	r1, #1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005494:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005498:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800549a:	4608      	mov	r0, r1
    hsd->State = HAL_SD_STATE_READY;
 800549c:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 80054a0:	bcf0      	pop	{r4, r5, r6, r7}
 80054a2:	4770      	bx	lr
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80054a4:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80054a6:	0412      	lsls	r2, r2, #16
 80054a8:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 80054ac:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
 80054b0:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80054b2:	690a      	ldr	r2, [r1, #16]
 80054b4:	3201      	adds	r2, #1
 80054b6:	0292      	lsls	r2, r2, #10
    hsd->SdCard.BlockSize = 512U;
 80054b8:	f44f 7400 	mov.w	r4, #512	; 0x200
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80054bc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80054be:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80054c0:	651c      	str	r4, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80054c2:	659c      	str	r4, [r3, #88]	; 0x58
 80054c4:	e79e      	b.n	8005404 <HAL_SD_GetCardCSD+0xac>
 80054c6:	bf00      	nop
 80054c8:	1fe00fff 	.word	0x1fe00fff

080054cc <HAL_SD_ConfigWideBusOperation>:
{
 80054cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80054ce:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  hsd->State = HAL_SD_STATE_BUSY;
 80054d0:	2203      	movs	r2, #3
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80054d2:	4293      	cmp	r3, r2
{
 80054d4:	b08b      	sub	sp, #44	; 0x2c
 80054d6:	4604      	mov	r4, r0
  hsd->State = HAL_SD_STATE_BUSY;
 80054d8:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
{
 80054dc:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80054de:	d015      	beq.n	800550c <HAL_SD_ConfigWideBusOperation+0x40>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80054e0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80054e4:	d012      	beq.n	800550c <HAL_SD_ConfigWideBusOperation+0x40>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80054e6:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80054ea:	d030      	beq.n	800554e <HAL_SD_ConfigWideBusOperation+0x82>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80054ec:	2900      	cmp	r1, #0
 80054ee:	d03d      	beq.n	800556c <HAL_SD_ConfigWideBusOperation+0xa0>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80054f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80054f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80054f6:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80054f8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80054fa:	b175      	cbz	r5, 800551a <HAL_SD_ConfigWideBusOperation+0x4e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	4a3a      	ldr	r2, [pc, #232]	; (80055e8 <HAL_SD_ConfigWideBusOperation+0x11c>)
 8005500:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005502:	2001      	movs	r0, #1
 8005504:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8005508:	b00b      	add	sp, #44	; 0x2c
 800550a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800550c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800550e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005512:	63a3      	str	r3, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005514:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8005516:	2d00      	cmp	r5, #0
 8005518:	d1f0      	bne.n	80054fc <HAL_SD_ConfigWideBusOperation+0x30>
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800551a:	6922      	ldr	r2, [r4, #16]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800551c:	6963      	ldr	r3, [r4, #20]
 800551e:	9308      	str	r3, [sp, #32]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005520:	9207      	str	r2, [sp, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8005522:	ab0a      	add	r3, sp, #40	; 0x28
 8005524:	e913 0007 	ldmdb	r3, {r0, r1, r2}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005528:	6867      	ldr	r7, [r4, #4]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800552a:	68a3      	ldr	r3, [r4, #8]
    Init.BusWide             = WideMode;
 800552c:	9606      	str	r6, [sp, #24]
    (void)SDMMC_Init(hsd->Instance, Init);
 800552e:	6826      	ldr	r6, [r4, #0]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005530:	9305      	str	r3, [sp, #20]
    (void)SDMMC_Init(hsd->Instance, Init);
 8005532:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005536:	9704      	str	r7, [sp, #16]
    (void)SDMMC_Init(hsd->Instance, Init);
 8005538:	ab04      	add	r3, sp, #16
 800553a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800553c:	4630      	mov	r0, r6
 800553e:	f002 fb21 	bl	8007b84 <SDMMC_Init>
  hsd->State = HAL_SD_STATE_READY;
 8005542:	2301      	movs	r3, #1
  return HAL_OK;
 8005544:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8005546:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800554a:	b00b      	add	sp, #44	; 0x2c
 800554c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t scr[2] = {0, 0};
 800554e:	2300      	movs	r3, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005550:	4619      	mov	r1, r3
 8005552:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 8005554:	9304      	str	r3, [sp, #16]
 8005556:	9305      	str	r3, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005558:	f002 fb3e 	bl	8007bd8 <SDMMC_GetResponse>
 800555c:	0180      	lsls	r0, r0, #6
 800555e:	d51e      	bpl.n	800559e <HAL_SD_ConfigWideBusOperation+0xd2>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005560:	f44f 6000 	mov.w	r0, #2048	; 0x800
      hsd->ErrorCode |= errorstate;
 8005564:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005566:	4318      	orrs	r0, r3
 8005568:	63a0      	str	r0, [r4, #56]	; 0x38
 800556a:	e7c5      	b.n	80054f8 <HAL_SD_ConfigWideBusOperation+0x2c>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800556c:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 800556e:	9104      	str	r1, [sp, #16]
 8005570:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005572:	f002 fb31 	bl	8007bd8 <SDMMC_GetResponse>
 8005576:	0182      	lsls	r2, r0, #6
 8005578:	d505      	bpl.n	8005586 <HAL_SD_ConfigWideBusOperation+0xba>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800557a:	f44f 6000 	mov.w	r0, #2048	; 0x800
      hsd->ErrorCode |= errorstate;
 800557e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005580:	4308      	orrs	r0, r1
 8005582:	63a0      	str	r0, [r4, #56]	; 0x38
 8005584:	e7b8      	b.n	80054f8 <HAL_SD_ConfigWideBusOperation+0x2c>
  errorstate = SD_FindSCR(hsd, scr);
 8005586:	a904      	add	r1, sp, #16
 8005588:	4620      	mov	r0, r4
 800558a:	f7ff fe77 	bl	800527c <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800558e:	2800      	cmp	r0, #0
 8005590:	d1f5      	bne.n	800557e <HAL_SD_ConfigWideBusOperation+0xb2>
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005592:	9b05      	ldr	r3, [sp, #20]
 8005594:	03db      	lsls	r3, r3, #15
 8005596:	d40e      	bmi.n	80055b6 <HAL_SD_ConfigWideBusOperation+0xea>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005598:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800559c:	e7ef      	b.n	800557e <HAL_SD_ConfigWideBusOperation+0xb2>
  errorstate = SD_FindSCR(hsd, scr);
 800559e:	a904      	add	r1, sp, #16
 80055a0:	4620      	mov	r0, r4
 80055a2:	f7ff fe6b 	bl	800527c <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80055a6:	2800      	cmp	r0, #0
 80055a8:	d1dc      	bne.n	8005564 <HAL_SD_ConfigWideBusOperation+0x98>
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80055aa:	9b05      	ldr	r3, [sp, #20]
 80055ac:	0359      	lsls	r1, r3, #13
 80055ae:	d40e      	bmi.n	80055ce <HAL_SD_ConfigWideBusOperation+0x102>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80055b0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80055b4:	e7d6      	b.n	8005564 <HAL_SD_ConfigWideBusOperation+0x98>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80055b6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80055b8:	6820      	ldr	r0, [r4, #0]
 80055ba:	0409      	lsls	r1, r1, #16
 80055bc:	f002 fc18 	bl	8007df0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80055c0:	2800      	cmp	r0, #0
 80055c2:	d1dc      	bne.n	800557e <HAL_SD_ConfigWideBusOperation+0xb2>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 80055c4:	4601      	mov	r1, r0
 80055c6:	6820      	ldr	r0, [r4, #0]
 80055c8:	f002 fc8a 	bl	8007ee0 <SDMMC_CmdBusWidth>
 80055cc:	e7d7      	b.n	800557e <HAL_SD_ConfigWideBusOperation+0xb2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80055ce:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80055d0:	6820      	ldr	r0, [r4, #0]
 80055d2:	0409      	lsls	r1, r1, #16
 80055d4:	f002 fc0c 	bl	8007df0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80055d8:	2800      	cmp	r0, #0
 80055da:	d1c3      	bne.n	8005564 <HAL_SD_ConfigWideBusOperation+0x98>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 80055dc:	2102      	movs	r1, #2
 80055de:	6820      	ldr	r0, [r4, #0]
 80055e0:	f002 fc7e 	bl	8007ee0 <SDMMC_CmdBusWidth>
 80055e4:	e7be      	b.n	8005564 <HAL_SD_ConfigWideBusOperation+0x98>
 80055e6:	bf00      	nop
 80055e8:	1fe00fff 	.word	0x1fe00fff

080055ec <HAL_SD_Init>:
{ 
 80055ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055f0:	b098      	sub	sp, #96	; 0x60
  if(hsd == NULL)
 80055f2:	b1f8      	cbz	r0, 8005634 <HAL_SD_Init+0x48>
  if(hsd->State == HAL_SD_STATE_RESET)
 80055f4:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80055f8:	4604      	mov	r4, r0
 80055fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d036      	beq.n	8005670 <HAL_SD_Init+0x84>
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8005602:	69a2      	ldr	r2, [r4, #24]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8005604:	6825      	ldr	r5, [r4, #0]
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005606:	2300      	movs	r3, #0
  hsd->State = HAL_SD_STATE_BUSY;
 8005608:	2003      	movs	r0, #3
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800560a:	213c      	movs	r1, #60	; 0x3c
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800560c:	2a01      	cmp	r2, #1
  hsd->State = HAL_SD_STATE_BUSY;
 800560e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005612:	9307      	str	r3, [sp, #28]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005614:	9308      	str	r3, [sp, #32]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005616:	9309      	str	r3, [sp, #36]	; 0x24
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005618:	930a      	str	r3, [sp, #40]	; 0x28
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800561a:	910b      	str	r1, [sp, #44]	; 0x2c
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800561c:	d02c      	beq.n	8005678 <HAL_SD_Init+0x8c>
  status = SDMMC_Init(hsd->Instance, Init);
 800561e:	ab0a      	add	r3, sp, #40	; 0x28
 8005620:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005624:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8005628:	ab07      	add	r3, sp, #28
 800562a:	4628      	mov	r0, r5
 800562c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800562e:	f002 faa9 	bl	8007b84 <SDMMC_Init>
  if(status != HAL_OK)
 8005632:	b120      	cbz	r0, 800563e <HAL_SD_Init+0x52>
    return HAL_ERROR;
 8005634:	2501      	movs	r5, #1
}
 8005636:	4628      	mov	r0, r5
 8005638:	b018      	add	sp, #96	; 0x60
 800563a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  status = SDMMC_PowerState_ON(hsd->Instance);
 800563e:	6820      	ldr	r0, [r4, #0]
 8005640:	f002 fabe 	bl	8007bc0 <SDMMC_PowerState_ON>
  if(status != HAL_OK)
 8005644:	4605      	mov	r5, r0
 8005646:	2800      	cmp	r0, #0
 8005648:	d1f4      	bne.n	8005634 <HAL_SD_Init+0x48>
  HAL_Delay(2U);
 800564a:	2002      	movs	r0, #2
 800564c:	f7fb fc82 	bl	8000f54 <HAL_Delay>
  __IO uint32_t count = 0;
 8005650:	9506      	str	r5, [sp, #24]
  uint32_t tickstart = HAL_GetTick();
 8005652:	f7fb fc79 	bl	8000f48 <HAL_GetTick>
 8005656:	4680      	mov	r8, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005658:	6820      	ldr	r0, [r4, #0]
 800565a:	f002 fb59 	bl	8007d10 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800565e:	4605      	mov	r5, r0
 8005660:	b178      	cbz	r0, 8005682 <HAL_SD_Init+0x96>
    hsd->State = HAL_SD_STATE_READY;
 8005662:	2301      	movs	r3, #1
 8005664:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005668:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800566a:	431d      	orrs	r5, r3
 800566c:	63a5      	str	r5, [r4, #56]	; 0x38
 800566e:	e7e1      	b.n	8005634 <HAL_SD_Init+0x48>
    hsd->Lock = HAL_UNLOCKED;
 8005670:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8005672:	f00b fe01 	bl	8011278 <HAL_SD_MspInit>
 8005676:	e7c4      	b.n	8005602 <HAL_SD_Init+0x16>
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8005678:	682b      	ldr	r3, [r5, #0]
 800567a:	f043 0304 	orr.w	r3, r3, #4
 800567e:	602b      	str	r3, [r5, #0]
 8005680:	e7cd      	b.n	800561e <HAL_SD_Init+0x32>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005682:	6820      	ldr	r0, [r4, #0]
 8005684:	f002 fb72 	bl	8007d6c <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005688:	fab0 f080 	clz	r0, r0
 800568c:	0940      	lsrs	r0, r0, #5
 800568e:	6420      	str	r0, [r4, #64]	; 0x40
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005690:	4629      	mov	r1, r5
 8005692:	6820      	ldr	r0, [r4, #0]
 8005694:	f002 fbac 	bl	8007df0 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005698:	b110      	cbz	r0, 80056a0 <HAL_SD_Init+0xb4>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800569a:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800569e:	e7e0      	b.n	8005662 <HAL_SD_Init+0x76>
    while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80056a0:	9b06      	ldr	r3, [sp, #24]
 80056a2:	f64f 77fe 	movw	r7, #65534	; 0xfffe
 80056a6:	42bb      	cmp	r3, r7
 80056a8:	f200 8101 	bhi.w	80058ae <HAL_SD_Init+0x2c2>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80056ac:	4e84      	ldr	r6, [pc, #528]	; (80058c0 <HAL_SD_Init+0x2d4>)
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80056ae:	6820      	ldr	r0, [r4, #0]
 80056b0:	2100      	movs	r1, #0
 80056b2:	f002 fb9d 	bl	8007df0 <SDMMC_CmdAppCommand>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80056b6:	4631      	mov	r1, r6
      if(errorstate != HAL_SD_ERROR_NONE)
 80056b8:	4605      	mov	r5, r0
 80056ba:	2800      	cmp	r0, #0
 80056bc:	d1d1      	bne.n	8005662 <HAL_SD_Init+0x76>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80056be:	6820      	ldr	r0, [r4, #0]
 80056c0:	f002 fbd8 	bl	8007e74 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80056c4:	4601      	mov	r1, r0
 80056c6:	2800      	cmp	r0, #0
 80056c8:	d1e7      	bne.n	800569a <HAL_SD_Init+0xae>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80056ca:	6820      	ldr	r0, [r4, #0]
 80056cc:	f002 fa84 	bl	8007bd8 <SDMMC_GetResponse>
      count++;
 80056d0:	9b06      	ldr	r3, [sp, #24]
 80056d2:	3301      	adds	r3, #1
 80056d4:	9306      	str	r3, [sp, #24]
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80056d6:	2800      	cmp	r0, #0
    while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80056d8:	9b06      	ldr	r3, [sp, #24]
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80056da:	db01      	blt.n	80056e0 <HAL_SD_Init+0xf4>
    while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80056dc:	42bb      	cmp	r3, r7
 80056de:	d9e6      	bls.n	80056ae <HAL_SD_Init+0xc2>
    if(count >= SDMMC_MAX_VOLT_TRIAL)
 80056e0:	9a06      	ldr	r2, [sp, #24]
 80056e2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d902      	bls.n	80056f0 <HAL_SD_Init+0x104>
      return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80056ea:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 80056ee:	e7b8      	b.n	8005662 <HAL_SD_Init+0x76>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80056f0:	0046      	lsls	r6, r0, #1
 80056f2:	d505      	bpl.n	8005700 <HAL_SD_Init+0x114>
      if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80056f4:	69a3      	ldr	r3, [r4, #24]
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80056f6:	2201      	movs	r2, #1
      if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80056f8:	4293      	cmp	r3, r2
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80056fa:	63e2      	str	r2, [r4, #60]	; 0x3c
      if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80056fc:	f000 8095 	beq.w	800582a <HAL_SD_Init+0x23e>
 8005700:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1;
 8005702:	2301      	movs	r3, #1
 8005704:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U) 
 8005708:	f002 fa62 	bl	8007bd0 <SDMMC_GetPowerState>
 800570c:	b940      	cbnz	r0, 8005720 <HAL_SD_Init+0x134>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800570e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 8005712:	2301      	movs	r3, #1
 8005714:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005718:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800571a:	4303      	orrs	r3, r0
 800571c:	63a3      	str	r3, [r4, #56]	; 0x38
 800571e:	e789      	b.n	8005634 <HAL_SD_Init+0x48>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005720:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005722:	2b03      	cmp	r3, #3
 8005724:	d10f      	bne.n	8005746 <HAL_SD_Init+0x15a>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8005726:	2104      	movs	r1, #4
 8005728:	6820      	ldr	r0, [r4, #0]
 800572a:	f002 fa55 	bl	8007bd8 <SDMMC_GetResponse>
 800572e:	0d00      	lsrs	r0, r0, #20
 8005730:	6460      	str	r0, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005732:	a90d      	add	r1, sp, #52	; 0x34
 8005734:	4620      	mov	r0, r4
 8005736:	f7ff fe0f 	bl	8005358 <HAL_SD_GetCardCSD>
 800573a:	4603      	mov	r3, r0
 800573c:	2800      	cmp	r0, #0
 800573e:	d046      	beq.n	80057ce <HAL_SD_Init+0x1e2>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005740:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005744:	e7e5      	b.n	8005712 <HAL_SD_Init+0x126>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005746:	6820      	ldr	r0, [r4, #0]
 8005748:	f002 fc4e 	bl	8007fe8 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800574c:	2800      	cmp	r0, #0
 800574e:	d1e0      	bne.n	8005712 <HAL_SD_Init+0x126>
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005750:	4601      	mov	r1, r0
 8005752:	6820      	ldr	r0, [r4, #0]
 8005754:	f002 fa40 	bl	8007bd8 <SDMMC_GetResponse>
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005758:	2104      	movs	r1, #4
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800575a:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800575c:	6820      	ldr	r0, [r4, #0]
 800575e:	f002 fa3b 	bl	8007bd8 <SDMMC_GetResponse>
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005762:	2108      	movs	r1, #8
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005764:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005766:	6820      	ldr	r0, [r4, #0]
 8005768:	f002 fa36 	bl	8007bd8 <SDMMC_GetResponse>
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800576c:	210c      	movs	r1, #12
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800576e:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005770:	6820      	ldr	r0, [r4, #0]
 8005772:	f002 fa31 	bl	8007bd8 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005776:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005778:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800577a:	2b03      	cmp	r3, #3
 800577c:	d0d3      	beq.n	8005726 <HAL_SD_Init+0x13a>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800577e:	f10d 0116 	add.w	r1, sp, #22
 8005782:	6820      	ldr	r0, [r4, #0]
 8005784:	f002 fcae 	bl	80080e4 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005788:	2800      	cmp	r0, #0
 800578a:	d1c2      	bne.n	8005712 <HAL_SD_Init+0x126>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800578c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800578e:	2b03      	cmp	r3, #3
 8005790:	d0c9      	beq.n	8005726 <HAL_SD_Init+0x13a>
    hsd->SdCard.RelCardAdd = sd_rca;
 8005792:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8005796:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005798:	6820      	ldr	r0, [r4, #0]
 800579a:	0409      	lsls	r1, r1, #16
 800579c:	f002 fc64 	bl	8008068 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80057a0:	2800      	cmp	r0, #0
 80057a2:	d1b6      	bne.n	8005712 <HAL_SD_Init+0x126>
      hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80057a4:	4601      	mov	r1, r0
 80057a6:	6820      	ldr	r0, [r4, #0]
 80057a8:	f002 fa16 	bl	8007bd8 <SDMMC_GetResponse>
      hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80057ac:	2104      	movs	r1, #4
      hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80057ae:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80057b0:	6820      	ldr	r0, [r4, #0]
 80057b2:	f002 fa11 	bl	8007bd8 <SDMMC_GetResponse>
      hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80057b6:	2108      	movs	r1, #8
      hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80057b8:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80057ba:	6820      	ldr	r0, [r4, #0]
 80057bc:	f002 fa0c 	bl	8007bd8 <SDMMC_GetResponse>
      hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80057c0:	210c      	movs	r1, #12
      hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80057c2:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80057c4:	6820      	ldr	r0, [r4, #0]
 80057c6:	f002 fa07 	bl	8007bd8 <SDMMC_GetResponse>
 80057ca:	66e0      	str	r0, [r4, #108]	; 0x6c
 80057cc:	e7ab      	b.n	8005726 <HAL_SD_Init+0x13a>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 80057ce:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80057d0:	6820      	ldr	r0, [r4, #0]
 80057d2:	0412      	lsls	r2, r2, #16
 80057d4:	f002 fa5a 	bl	8007c8c <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80057d8:	2800      	cmp	r0, #0
 80057da:	d19a      	bne.n	8005712 <HAL_SD_Init+0x126>
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80057dc:	68e1      	ldr	r1, [r4, #12]
 80057de:	4620      	mov	r0, r4
 80057e0:	f7ff fe74 	bl	80054cc <HAL_SD_ConfigWideBusOperation>
 80057e4:	4605      	mov	r5, r0
 80057e6:	2800      	cmp	r0, #0
 80057e8:	f47f af24 	bne.w	8005634 <HAL_SD_Init+0x48>
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80057ec:	69a3      	ldr	r3, [r4, #24]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d009      	beq.n	8005806 <HAL_SD_Init+0x21a>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80057f2:	2300      	movs	r3, #0
  hsd->State = HAL_SD_STATE_READY;
 80057f4:	2201      	movs	r2, #1
}
 80057f6:	4628      	mov	r0, r5
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80057f8:	63a3      	str	r3, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 80057fa:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 80057fc:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 8005800:	b018      	add	sp, #96	; 0x60
 8005802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) || 
 8005806:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800580c:	d002      	beq.n	8005814 <HAL_SD_Init+0x228>
 800580e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005810:	2b01      	cmp	r3, #1
 8005812:	d1ee      	bne.n	80057f2 <HAL_SD_Init+0x206>
      hsd->Instance->CLKCR |= 0x00100000U;
 8005814:	6822      	ldr	r2, [r4, #0]
 8005816:	6853      	ldr	r3, [r2, #4]
 8005818:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800581c:	6053      	str	r3, [r2, #4]
      if(HAL_SDEx_HighSpeed(hsd) != HAL_SD_ERROR_NONE)
 800581e:	4620      	mov	r0, r4
 8005820:	f000 f852 	bl	80058c8 <HAL_SDEx_HighSpeed>
 8005824:	2800      	cmp	r0, #0
 8005826:	d0e4      	beq.n	80057f2 <HAL_SD_Init+0x206>
 8005828:	e704      	b.n	8005634 <HAL_SD_Init+0x48>
        if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800582a:	01c5      	lsls	r5, r0, #7
 800582c:	f57f af68 	bpl.w	8005700 <HAL_SD_Init+0x114>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8005830:	6823      	ldr	r3, [r4, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
           hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005834:	f44f 7100 	mov.w	r1, #512	; 0x200
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8005838:	f042 0203 	orr.w	r2, r2, #3
           hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800583c:	65e1      	str	r1, [r4, #92]	; 0x5c
          errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800583e:	4618      	mov	r0, r3
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8005840:	601a      	str	r2, [r3, #0]
          errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8005842:	f002 fce5 	bl	8008210 <SDMMC_CmdVoltageSwitch>
          if(errorstate != HAL_SD_ERROR_NONE)
 8005846:	4605      	mov	r5, r0
 8005848:	b130      	cbz	r0, 8005858 <HAL_SD_Init+0x26c>
 800584a:	e70a      	b.n	8005662 <HAL_SD_Init+0x76>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800584c:	f7fb fb7c 	bl	8000f48 <HAL_GetTick>
 8005850:	eba0 0008 	sub.w	r0, r0, r8
 8005854:	3001      	adds	r0, #1
 8005856:	d02f      	beq.n	80058b8 <HAL_SD_Init+0x2cc>
          while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800585c:	0150      	lsls	r0, r2, #5
 800585e:	d5f5      	bpl.n	800584c <HAL_SD_Init+0x260>
          hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8005860:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005864:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8005866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005868:	02d9      	lsls	r1, r3, #11
 800586a:	f57f af16 	bpl.w	800569a <HAL_SD_Init+0xae>
            HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800586e:	2001      	movs	r0, #1
 8005870:	f000 f828 	bl	80058c4 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
            hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8005874:	6820      	ldr	r0, [r4, #0]
 8005876:	6803      	ldr	r3, [r0, #0]
 8005878:	f043 0302 	orr.w	r3, r3, #2
 800587c:	6003      	str	r3, [r0, #0]
 800587e:	e006      	b.n	800588e <HAL_SD_Init+0x2a2>
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005880:	f7fb fb62 	bl	8000f48 <HAL_GetTick>
 8005884:	eba0 0008 	sub.w	r0, r0, r8
 8005888:	3001      	adds	r0, #1
 800588a:	d015      	beq.n	80058b8 <HAL_SD_Init+0x2cc>
 800588c:	6820      	ldr	r0, [r4, #0]
            while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800588e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005890:	019a      	lsls	r2, r3, #6
 8005892:	d5f5      	bpl.n	8005880 <HAL_SD_Init+0x294>
            hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8005894:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005898:	6383      	str	r3, [r0, #56]	; 0x38
            if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800589a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800589c:	02db      	lsls	r3, r3, #11
 800589e:	f53f af24 	bmi.w	80056ea <HAL_SD_Init+0xfe>
            hsd->Instance->POWER = 0x13U; 
 80058a2:	2213      	movs	r2, #19
            hsd->Instance->ICR = 0xFFFFFFFFU;
 80058a4:	f04f 33ff 	mov.w	r3, #4294967295
            hsd->Instance->POWER = 0x13U; 
 80058a8:	6002      	str	r2, [r0, #0]
            hsd->Instance->ICR = 0xFFFFFFFFU;
 80058aa:	6383      	str	r3, [r0, #56]	; 0x38
 80058ac:	e729      	b.n	8005702 <HAL_SD_Init+0x116>
    if(count >= SDMMC_MAX_VOLT_TRIAL)
 80058ae:	9b06      	ldr	r3, [sp, #24]
 80058b0:	42bb      	cmp	r3, r7
 80058b2:	f63f af1a 	bhi.w	80056ea <HAL_SD_Init+0xfe>
 80058b6:	e723      	b.n	8005700 <HAL_SD_Init+0x114>
              return HAL_SD_ERROR_TIMEOUT;
 80058b8:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 80058bc:	e6d1      	b.n	8005662 <HAL_SD_Init+0x76>
 80058be:	bf00      	nop
 80058c0:	c1100000 	.word	0xc1100000

080058c4 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop

080058c8 <HAL_SDEx_HighSpeed>:
{
 80058c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058cc:	4604      	mov	r4, r0
 80058ce:	b096      	sub	sp, #88	; 0x58
  uint8_t SD_hs[64]  = {0};
 80058d0:	2540      	movs	r5, #64	; 0x40
 80058d2:	462a      	mov	r2, r5
 80058d4:	2100      	movs	r1, #0
 80058d6:	a806      	add	r0, sp, #24
 80058d8:	f00f fde3 	bl	80154a2 <memset>
  uint32_t Timeout = HAL_GetTick();
 80058dc:	f7fb fb34 	bl	8000f48 <HAL_GetTick>
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 80058e0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80058e2:	b92b      	cbnz	r3, 80058f0 <HAL_SDEx_HighSpeed+0x28>
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE; 
 80058e4:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
}
 80058e8:	4630      	mov	r0, r6
 80058ea:	b016      	add	sp, #88	; 0x58
 80058ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if((hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED) &&
 80058f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058f4:	d004      	beq.n	8005900 <HAL_SDEx_HighSpeed+0x38>
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80058f6:	2600      	movs	r6, #0
}
 80058f8:	4630      	mov	r0, r6
 80058fa:	b016      	add	sp, #88	; 0x58
 80058fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if((hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED) &&
 8005900:	69a7      	ldr	r7, [r4, #24]
 8005902:	2f01      	cmp	r7, #1
 8005904:	d1f7      	bne.n	80058f6 <HAL_SDEx_HighSpeed+0x2e>
 8005906:	4680      	mov	r8, r0
    hsd->Instance->DCTRL = 0;
 8005908:	6820      	ldr	r0, [r4, #0]
 800590a:	2300      	movs	r3, #0
 800590c:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64);
 800590e:	4629      	mov	r1, r5
 8005910:	f002 f97a 	bl	8007c08 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_SD_ERROR_NONE)
 8005914:	4606      	mov	r6, r0
 8005916:	2800      	cmp	r0, #0
 8005918:	d1e6      	bne.n	80058e8 <HAL_SDEx_HighSpeed+0x20>
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 800591a:	f04f 3eff 	mov.w	lr, #4294967295
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 800591e:	2260      	movs	r2, #96	; 0x60
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005920:	2302      	movs	r3, #2
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005922:	9004      	str	r0, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 8005924:	4669      	mov	r1, sp
 8005926:	6820      	ldr	r0, [r4, #0]
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005928:	f8cd e000 	str.w	lr, [sp]
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 800592c:	9202      	str	r2, [sp, #8]
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800592e:	9303      	str	r3, [sp, #12]
    sdmmc_datainitstructure.DataLength    = 64;
 8005930:	9501      	str	r5, [sp, #4]
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8005932:	9705      	str	r7, [sp, #20]
    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 8005934:	f002 f954 	bl	8007be0 <SDMMC_ConfigData>
    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_SDR25_SWITCH_PATTERN);
 8005938:	4930      	ldr	r1, [pc, #192]	; (80059fc <HAL_SDEx_HighSpeed+0x134>)
 800593a:	6820      	ldr	r0, [r4, #0]
 800593c:	f002 fc26 	bl	800818c <SDMMC_CmdSwitch>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005940:	4606      	mov	r6, r0
 8005942:	2800      	cmp	r0, #0
 8005944:	d1d0      	bne.n	80058e8 <HAL_SDEx_HighSpeed+0x20>
 8005946:	ad06      	add	r5, sp, #24
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8005948:	f240 5a2a 	movw	sl, #1322	; 0x52a
 800594c:	6820      	ldr	r0, [r4, #0]
 800594e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005950:	ea13 0f0a 	tst.w	r3, sl
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005954:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8005956:	d124      	bne.n	80059a2 <HAL_SDEx_HighSpeed+0xda>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005958:	041f      	lsls	r7, r3, #16
 800595a:	d515      	bpl.n	8005988 <HAL_SDEx_HighSpeed+0xc0>
 800595c:	1d2f      	adds	r7, r5, #4
 800595e:	f105 0924 	add.w	r9, r5, #36	; 0x24
 8005962:	e000      	b.n	8005966 <HAL_SDEx_HighSpeed+0x9e>
 8005964:	6820      	ldr	r0, [r4, #0]
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005966:	f002 f927 	bl	8007bb8 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 800596a:	f807 0c04 	strb.w	r0, [r7, #-4]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800596e:	0a02      	lsrs	r2, r0, #8
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005970:	0c03      	lsrs	r3, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005972:	0e00      	lsrs	r0, r0, #24
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005974:	f807 2c03 	strb.w	r2, [r7, #-3]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005978:	f807 3c02 	strb.w	r3, [r7, #-2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800597c:	f807 0c01 	strb.w	r0, [r7, #-1]
 8005980:	3704      	adds	r7, #4
        for (count = 0U; count < 8U; count++)
 8005982:	454f      	cmp	r7, r9
 8005984:	d1ee      	bne.n	8005964 <HAL_SDEx_HighSpeed+0x9c>
 8005986:	3520      	adds	r5, #32
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 8005988:	f7fb fade 	bl	8000f48 <HAL_GetTick>
 800598c:	eba0 0008 	sub.w	r0, r0, r8
 8005990:	3001      	adds	r0, #1
 8005992:	d1db      	bne.n	800594c <HAL_SDEx_HighSpeed+0x84>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005994:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
        hsd->State= HAL_SD_STATE_READY;
 8005998:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800599a:	63a6      	str	r6, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800599c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_SD_ERROR_TIMEOUT;
 80059a0:	e7a2      	b.n	80058e8 <HAL_SDEx_HighSpeed+0x20>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80059a2:	071d      	lsls	r5, r3, #28
 80059a4:	d405      	bmi.n	80059b2 <HAL_SDEx_HighSpeed+0xea>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80059a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80059a8:	0799      	lsls	r1, r3, #30
 80059aa:	d505      	bpl.n	80059b8 <HAL_SDEx_HighSpeed+0xf0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80059ac:	2602      	movs	r6, #2
 80059ae:	6386      	str	r6, [r0, #56]	; 0x38
      return errorstate;
 80059b0:	e79a      	b.n	80058e8 <HAL_SDEx_HighSpeed+0x20>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80059b2:	2308      	movs	r3, #8
 80059b4:	6383      	str	r3, [r0, #56]	; 0x38
      return errorstate;
 80059b6:	e797      	b.n	80058e8 <HAL_SDEx_HighSpeed+0x20>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80059b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80059ba:	069a      	lsls	r2, r3, #26
 80059bc:	d502      	bpl.n	80059c4 <HAL_SDEx_HighSpeed+0xfc>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80059be:	2620      	movs	r6, #32
 80059c0:	6386      	str	r6, [r0, #56]	; 0x38
      return errorstate;
 80059c2:	e791      	b.n	80058e8 <HAL_SDEx_HighSpeed+0x20>
    if ((SD_hs[13U] & 2U) == 0U)
 80059c4:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80059c8:	4a0d      	ldr	r2, [pc, #52]	; (8005a00 <HAL_SDEx_HighSpeed+0x138>)
 80059ca:	6382      	str	r2, [r0, #56]	; 0x38
    if ((SD_hs[13U] & 2U) == 0U)
 80059cc:	079b      	lsls	r3, r3, #30
 80059ce:	d402      	bmi.n	80059d6 <HAL_SDEx_HighSpeed+0x10e>
      return errorstate;
 80059d0:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 80059d4:	e788      	b.n	80058e8 <HAL_SDEx_HighSpeed+0x20>
      HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 80059d6:	2001      	movs	r0, #1
 80059d8:	f7ff ff74 	bl	80058c4 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80059dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80059e0:	6820      	ldr	r0, [r4, #0]
 80059e2:	f002 f911 	bl	8007c08 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 80059e6:	4606      	mov	r6, r0
 80059e8:	2800      	cmp	r0, #0
 80059ea:	f43f af7d 	beq.w	80058e8 <HAL_SDEx_HighSpeed+0x20>
      hsd->State = HAL_SD_STATE_READY;
 80059ee:	2301      	movs	r3, #1
 80059f0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->ErrorCode |= errorstate;
 80059f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80059f6:	4303      	orrs	r3, r0
 80059f8:	63a3      	str	r3, [r4, #56]	; 0x38
      return errorstate;
 80059fa:	e775      	b.n	80058e8 <HAL_SDEx_HighSpeed+0x20>
 80059fc:	80ffff01 	.word	0x80ffff01
 8005a00:	18000f3a 	.word	0x18000f3a

08005a04 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a04:	6803      	ldr	r3, [r0, #0]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a06:	6841      	ldr	r1, [r0, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a08:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a0a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a0e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a12:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a14:	d013      	beq.n	8005a3e <SPI_WaitFifoStateUntilTimeout.part.1+0x3a>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a16:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8005a18:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005a1c:	d107      	bne.n	8005a2e <SPI_WaitFifoStateUntilTimeout.part.1+0x2a>
        {
          SPI_RESET_CRC(hspi);
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a2e:	2201      	movs	r2, #1

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a30:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8005a32:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8005a36:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 8005a3a:	2003      	movs	r0, #3
 8005a3c:	4770      	bx	lr
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a3e:	6882      	ldr	r2, [r0, #8]
 8005a40:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005a44:	d002      	beq.n	8005a4c <SPI_WaitFifoStateUntilTimeout.part.1+0x48>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a46:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005a4a:	d1e4      	bne.n	8005a16 <SPI_WaitFifoStateUntilTimeout.part.1+0x12>
          __HAL_SPI_DISABLE(hspi);
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	e7df      	b.n	8005a16 <SPI_WaitFifoStateUntilTimeout.part.1+0x12>
 8005a56:	bf00      	nop

08005a58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a58:	b570      	push	{r4, r5, r6, lr}
 8005a5a:	4604      	mov	r4, r0
 8005a5c:	460d      	mov	r5, r1
 8005a5e:	4616      	mov	r6, r2
 8005a60:	1c69      	adds	r1, r5, #1
 8005a62:	6820      	ldr	r0, [r4, #0]
 8005a64:	d111      	bne.n	8005a8a <SPI_EndRxTxTransaction+0x32>
  while ((hspi->Instance->SR & Fifo) != State)
 8005a66:	6883      	ldr	r3, [r0, #8]
 8005a68:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 8005a6c:	d1fb      	bne.n	8005a66 <SPI_EndRxTxTransaction+0xe>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a6e:	6883      	ldr	r3, [r0, #8]
 8005a70:	061b      	lsls	r3, r3, #24
 8005a72:	d504      	bpl.n	8005a7e <SPI_EndRxTxTransaction+0x26>
 8005a74:	6883      	ldr	r3, [r0, #8]
 8005a76:	061b      	lsls	r3, r3, #24
 8005a78:	d4f9      	bmi.n	8005a6e <SPI_EndRxTxTransaction+0x16>
 8005a7a:	e000      	b.n	8005a7e <SPI_EndRxTxTransaction+0x26>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005a7c:	7b03      	ldrb	r3, [r0, #12]
  while ((hspi->Instance->SR & Fifo) != State)
 8005a7e:	6883      	ldr	r3, [r0, #8]
 8005a80:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8005a84:	d1fa      	bne.n	8005a7c <SPI_EndRxTxTransaction+0x24>
  return HAL_OK;
 8005a86:	2000      	movs	r0, #0
 8005a88:	bd70      	pop	{r4, r5, r6, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8005a8a:	6883      	ldr	r3, [r0, #8]
 8005a8c:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 8005a90:	d023      	beq.n	8005ada <SPI_EndRxTxTransaction+0x82>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005a92:	f7fb fa59 	bl	8000f48 <HAL_GetTick>
 8005a96:	1b80      	subs	r0, r0, r6
 8005a98:	4285      	cmp	r5, r0
 8005a9a:	d8e1      	bhi.n	8005a60 <SPI_EndRxTxTransaction+0x8>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a9c:	6823      	ldr	r3, [r4, #0]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a9e:	6861      	ldr	r1, [r4, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005aa0:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aa2:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005aa6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005aaa:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aac:	d02e      	beq.n	8005b0c <SPI_EndRxTxTransaction+0xb4>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005aae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005ab0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005ab4:	d021      	beq.n	8005afa <SPI_EndRxTxTransaction+0xa2>
        hspi->State = HAL_SPI_STATE_READY;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005abc:	6e23      	ldr	r3, [r4, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 8005abe:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ac0:	f043 0320 	orr.w	r3, r3, #32
 8005ac4:	6623      	str	r3, [r4, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 8005ac6:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    return HAL_TIMEOUT;
 8005aca:	2003      	movs	r0, #3
 8005acc:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005ace:	f7fb fa3b 	bl	8000f48 <HAL_GetTick>
 8005ad2:	1b80      	subs	r0, r0, r6
 8005ad4:	4285      	cmp	r5, r0
 8005ad6:	d9e1      	bls.n	8005a9c <SPI_EndRxTxTransaction+0x44>
 8005ad8:	6820      	ldr	r0, [r4, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ada:	6883      	ldr	r3, [r0, #8]
 8005adc:	061a      	lsls	r2, r3, #24
 8005ade:	d4f6      	bmi.n	8005ace <SPI_EndRxTxTransaction+0x76>
 8005ae0:	e006      	b.n	8005af0 <SPI_EndRxTxTransaction+0x98>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005ae2:	7b03      	ldrb	r3, [r0, #12]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005ae4:	f7fb fa30 	bl	8000f48 <HAL_GetTick>
 8005ae8:	1b80      	subs	r0, r0, r6
 8005aea:	4285      	cmp	r5, r0
 8005aec:	d91a      	bls.n	8005b24 <SPI_EndRxTxTransaction+0xcc>
 8005aee:	6820      	ldr	r0, [r4, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005af0:	6883      	ldr	r3, [r0, #8]
 8005af2:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8005af6:	d1f4      	bne.n	8005ae2 <SPI_EndRxTxTransaction+0x8a>
 8005af8:	e7c5      	b.n	8005a86 <SPI_EndRxTxTransaction+0x2e>
          SPI_RESET_CRC(hspi);
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b08:	601a      	str	r2, [r3, #0]
 8005b0a:	e7d4      	b.n	8005ab6 <SPI_EndRxTxTransaction+0x5e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b0c:	68a2      	ldr	r2, [r4, #8]
 8005b0e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005b12:	d002      	beq.n	8005b1a <SPI_EndRxTxTransaction+0xc2>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b14:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005b18:	d1c9      	bne.n	8005aae <SPI_EndRxTxTransaction+0x56>
          __HAL_SPI_DISABLE(hspi);
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b20:	601a      	str	r2, [r3, #0]
 8005b22:	e7c4      	b.n	8005aae <SPI_EndRxTxTransaction+0x56>
 8005b24:	4620      	mov	r0, r4
 8005b26:	f7ff ff6d 	bl	8005a04 <SPI_WaitFifoStateUntilTimeout.part.1>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b2a:	2800      	cmp	r0, #0
 8005b2c:	d0ab      	beq.n	8005a86 <SPI_EndRxTxTransaction+0x2e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b2e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005b30:	f043 0320 	orr.w	r3, r3, #32
 8005b34:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8005b36:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8005b38:	bd70      	pop	{r4, r5, r6, pc}
 8005b3a:	bf00      	nop

08005b3c <HAL_SPI_Init>:
  if (hspi == NULL)
 8005b3c:	2800      	cmp	r0, #0
 8005b3e:	d068      	beq.n	8005c12 <HAL_SPI_Init+0xd6>
{
 8005b40:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b42:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b46:	2200      	movs	r2, #0
{
 8005b48:	b083      	sub	sp, #12
 8005b4a:	4604      	mov	r4, r0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b4c:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b50:	6282      	str	r2, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d04d      	beq.n	8005bf2 <HAL_SPI_Init+0xb6>
  hspi->State = HAL_SPI_STATE_BUSY;
 8005b56:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8005b58:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8005b5a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8005b5e:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b60:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8005b62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b66:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8005b6a:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b6c:	d90b      	bls.n	8005b86 <HAL_SPI_Init+0x4a>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b6e:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8005b72:	d146      	bne.n	8005c02 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005b74:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005b76:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d13f      	bne.n	8005bfc <HAL_SPI_Init+0xc0>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	6323      	str	r3, [r4, #48]	; 0x30
 8005b80:	f04f 0e00 	mov.w	lr, #0
 8005b84:	e00f      	b.n	8005ba6 <HAL_SPI_Init+0x6a>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b86:	d007      	beq.n	8005b98 <HAL_SPI_Init+0x5c>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005b88:	6b20      	ldr	r0, [r4, #48]	; 0x30
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005b8e:	b130      	cbz	r0, 8005b9e <HAL_SPI_Init+0x62>
 8005b90:	4618      	mov	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b92:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
 8005b96:	e006      	b.n	8005ba6 <HAL_SPI_Init+0x6a>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005b98:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005b9a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005b9c:	b90b      	cbnz	r3, 8005ba2 <HAL_SPI_Init+0x66>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	6323      	str	r3, [r4, #48]	; 0x30
 8005ba2:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005ba6:	68a5      	ldr	r5, [r4, #8]
 8005ba8:	6863      	ldr	r3, [r4, #4]
 8005baa:	6927      	ldr	r7, [r4, #16]
 8005bac:	6966      	ldr	r6, [r4, #20]
 8005bae:	432b      	orrs	r3, r5
 8005bb0:	433b      	orrs	r3, r7
 8005bb2:	69e5      	ldr	r5, [r4, #28]
 8005bb4:	69a7      	ldr	r7, [r4, #24]
 8005bb6:	4333      	orrs	r3, r6
 8005bb8:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005bba:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8005bbc:	9501      	str	r5, [sp, #4]
 8005bbe:	6a65      	ldr	r5, [r4, #36]	; 0x24
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005bc0:	6a26      	ldr	r6, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005bc2:	432a      	orrs	r2, r5
 8005bc4:	9d01      	ldr	r5, [sp, #4]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005bc6:	4333      	orrs	r3, r6
 8005bc8:	f407 7600 	and.w	r6, r7, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005bcc:	0c3f      	lsrs	r7, r7, #16
 8005bce:	f007 0704 	and.w	r7, r7, #4
 8005bd2:	4315      	orrs	r5, r2
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005bd4:	4333      	orrs	r3, r6
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bd6:	2200      	movs	r2, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005bd8:	433d      	orrs	r5, r7
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005bda:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005bdc:	ea45 050e 	orr.w	r5, r5, lr
  hspi->State     = HAL_SPI_STATE_READY;
 8005be0:	2601      	movs	r6, #1
  return HAL_OK;
 8005be2:	4610      	mov	r0, r2
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005be4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005be6:	604d      	str	r5, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005be8:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005bea:	f884 605d 	strb.w	r6, [r4, #93]	; 0x5d
}
 8005bee:	b003      	add	sp, #12
 8005bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hspi->Lock = HAL_UNLOCKED;
 8005bf2:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8005bf6:	f00b fbb7 	bl	8011368 <HAL_SPI_MspInit>
 8005bfa:	e7ac      	b.n	8005b56 <HAL_SPI_Init+0x1a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005bfc:	f04f 0e00 	mov.w	lr, #0
 8005c00:	e7d1      	b.n	8005ba6 <HAL_SPI_Init+0x6a>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005c02:	6b20      	ldr	r0, [r4, #48]	; 0x30
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c04:	2300      	movs	r3, #0
 8005c06:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005c08:	2800      	cmp	r0, #0
 8005c0a:	d0b7      	beq.n	8005b7c <HAL_SPI_Init+0x40>
 8005c0c:	4618      	mov	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005c0e:	469e      	mov	lr, r3
 8005c10:	e7c9      	b.n	8005ba6 <HAL_SPI_Init+0x6a>
    return HAL_ERROR;
 8005c12:	2001      	movs	r0, #1
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop

08005c18 <HAL_SPI_Transmit>:
{
 8005c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hspi);
 8005c1c:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8005c20:	2c01      	cmp	r4, #1
{
 8005c22:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8005c24:	d103      	bne.n	8005c2e <HAL_SPI_Transmit+0x16>
 8005c26:	2002      	movs	r0, #2
}
 8005c28:	b002      	add	sp, #8
 8005c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c2e:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8005c30:	2301      	movs	r3, #1
 8005c32:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 8005c36:	4604      	mov	r4, r0
 8005c38:	4617      	mov	r7, r2
 8005c3a:	4688      	mov	r8, r1
  tickstart = HAL_GetTick();
 8005c3c:	f7fb f984 	bl	8000f48 <HAL_GetTick>
 8005c40:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005c42:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8005c46:	b2c0      	uxtb	r0, r0
 8005c48:	2801      	cmp	r0, #1
 8005c4a:	d009      	beq.n	8005c60 <HAL_SPI_Transmit+0x48>
    errorcode = HAL_BUSY;
 8005c4c:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8005c4e:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8005c50:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8005c52:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005c56:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8005c5a:	b002      	add	sp, #8
 8005c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8005c60:	f1b8 0f00 	cmp.w	r8, #0
 8005c64:	d0f3      	beq.n	8005c4e <HAL_SPI_Transmit+0x36>
 8005c66:	2f00      	cmp	r7, #0
 8005c68:	d0f1      	beq.n	8005c4e <HAL_SPI_Transmit+0x36>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c6a:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c6c:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c70:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c72:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c74:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c78:	f884 105d 	strb.w	r1, [r4, #93]	; 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c7c:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c7e:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferSize  = 0U;
 8005c80:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->TxISR       = NULL;
 8005c84:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005c86:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxXferCount = Size;
 8005c88:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005c8a:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005c8c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    SPI_1LINE_TX(hspi);
 8005c90:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c92:	f000 80ca 	beq.w	8005e2a <HAL_SPI_Transmit+0x212>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	0651      	lsls	r1, r2, #25
 8005c9a:	d403      	bmi.n	8005ca4 <HAL_SPI_Transmit+0x8c>
    __HAL_SPI_ENABLE(hspi);
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ca2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ca4:	68e2      	ldr	r2, [r4, #12]
 8005ca6:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005caa:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cac:	d950      	bls.n	8005d50 <HAL_SPI_Transmit+0x138>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cae:	2a00      	cmp	r2, #0
 8005cb0:	f000 80b1 	beq.w	8005e16 <HAL_SPI_Transmit+0x1fe>
 8005cb4:	2f01      	cmp	r7, #1
 8005cb6:	f000 80ae 	beq.w	8005e16 <HAL_SPI_Transmit+0x1fe>
 8005cba:	1c6a      	adds	r2, r5, #1
 8005cbc:	d12f      	bne.n	8005d1e <HAL_SPI_Transmit+0x106>
    while (hspi->TxXferCount > 0U)
 8005cbe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	b183      	cbz	r3, 8005ce6 <HAL_SPI_Transmit+0xce>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cc4:	6822      	ldr	r2, [r4, #0]
 8005cc6:	6893      	ldr	r3, [r2, #8]
 8005cc8:	079b      	lsls	r3, r3, #30
 8005cca:	d53e      	bpl.n	8005d4a <HAL_SPI_Transmit+0x132>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ccc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005cce:	f833 1b02 	ldrh.w	r1, [r3], #2
 8005cd2:	60d1      	str	r1, [r2, #12]
        hspi->TxXferCount--;
 8005cd4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cd6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005cd8:	3a01      	subs	r2, #1
 8005cda:	b292      	uxth	r2, r2
 8005cdc:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8005cde:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1ee      	bne.n	8005cc4 <HAL_SPI_Transmit+0xac>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ce6:	4632      	mov	r2, r6
 8005ce8:	4629      	mov	r1, r5
 8005cea:	4620      	mov	r0, r4
 8005cec:	f7ff feb4 	bl	8005a58 <SPI_EndRxTxTransaction>
 8005cf0:	b108      	cbz	r0, 8005cf6 <HAL_SPI_Transmit+0xde>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cf2:	2320      	movs	r3, #32
 8005cf4:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cf6:	68a3      	ldr	r3, [r4, #8]
 8005cf8:	b933      	cbnz	r3, 8005d08 <HAL_SPI_Transmit+0xf0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cfa:	6822      	ldr	r2, [r4, #0]
 8005cfc:	9301      	str	r3, [sp, #4]
 8005cfe:	68d3      	ldr	r3, [r2, #12]
 8005d00:	9301      	str	r3, [sp, #4]
 8005d02:	6893      	ldr	r3, [r2, #8]
 8005d04:	9301      	str	r3, [sp, #4]
 8005d06:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d08:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8005d0a:	3000      	adds	r0, #0
 8005d0c:	bf18      	it	ne
 8005d0e:	2001      	movne	r0, #1
 8005d10:	e79d      	b.n	8005c4e <HAL_SPI_Transmit+0x36>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d12:	f7fb f919 	bl	8000f48 <HAL_GetTick>
 8005d16:	1b80      	subs	r0, r0, r6
 8005d18:	42a8      	cmp	r0, r5
 8005d1a:	f080 8090 	bcs.w	8005e3e <HAL_SPI_Transmit+0x226>
    while (hspi->TxXferCount > 0U)
 8005d1e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d0df      	beq.n	8005ce6 <HAL_SPI_Transmit+0xce>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	689a      	ldr	r2, [r3, #8]
 8005d2a:	0797      	lsls	r7, r2, #30
 8005d2c:	d5f1      	bpl.n	8005d12 <HAL_SPI_Transmit+0xfa>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d2e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005d30:	f832 1b02 	ldrh.w	r1, [r2], #2
 8005d34:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 8005d36:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d38:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8005d40:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1ee      	bne.n	8005d26 <HAL_SPI_Transmit+0x10e>
 8005d48:	e7cd      	b.n	8005ce6 <HAL_SPI_Transmit+0xce>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d4a:	f7fb f8fd 	bl	8000f48 <HAL_GetTick>
 8005d4e:	e7b6      	b.n	8005cbe <HAL_SPI_Transmit+0xa6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d50:	2a00      	cmp	r2, #0
 8005d52:	d052      	beq.n	8005dfa <HAL_SPI_Transmit+0x1e2>
 8005d54:	2f01      	cmp	r7, #1
 8005d56:	d050      	beq.n	8005dfa <HAL_SPI_Transmit+0x1e2>
 8005d58:	1c68      	adds	r0, r5, #1
 8005d5a:	d129      	bne.n	8005db0 <HAL_SPI_Transmit+0x198>
    while (hspi->TxXferCount > 0U)
 8005d5c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0c0      	beq.n	8005ce6 <HAL_SPI_Transmit+0xce>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d64:	6822      	ldr	r2, [r4, #0]
 8005d66:	6893      	ldr	r3, [r2, #8]
 8005d68:	0799      	lsls	r1, r3, #30
 8005d6a:	d514      	bpl.n	8005d96 <HAL_SPI_Transmit+0x17e>
        if (hspi->TxXferCount > 1U)
 8005d6c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d937      	bls.n	8005de4 <HAL_SPI_Transmit+0x1cc>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d74:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005d76:	f831 3b02 	ldrh.w	r3, [r1], #2
 8005d7a:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 8005d7c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d7e:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005d80:	3b02      	subs	r3, #2
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8005d86:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d0ab      	beq.n	8005ce6 <HAL_SPI_Transmit+0xce>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d8e:	6822      	ldr	r2, [r4, #0]
 8005d90:	6893      	ldr	r3, [r2, #8]
 8005d92:	0799      	lsls	r1, r3, #30
 8005d94:	d4ea      	bmi.n	8005d6c <HAL_SPI_Transmit+0x154>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d96:	f7fb f8d7 	bl	8000f48 <HAL_GetTick>
 8005d9a:	e7df      	b.n	8005d5c <HAL_SPI_Transmit+0x144>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 8005da2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 8005da4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8005da6:	3b01      	subs	r3, #1
 8005da8:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 8005daa:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 8005dac:	87e3      	strh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 8005dae:	63a2      	str	r2, [r4, #56]	; 0x38
    while (hspi->TxXferCount > 0U)
 8005db0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d096      	beq.n	8005ce6 <HAL_SPI_Transmit+0xce>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005db8:	6822      	ldr	r2, [r4, #0]
 8005dba:	6893      	ldr	r3, [r2, #8]
 8005dbc:	079b      	lsls	r3, r3, #30
 8005dbe:	d539      	bpl.n	8005e34 <HAL_SPI_Transmit+0x21c>
        if (hspi->TxXferCount > 1U)
 8005dc0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d9e9      	bls.n	8005d9c <HAL_SPI_Transmit+0x184>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dc8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005dca:	f831 3b02 	ldrh.w	r3, [r1], #2
 8005dce:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 8005dd0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dd2:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005dd4:	3b02      	subs	r3, #2
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8005dda:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1ea      	bne.n	8005db8 <HAL_SPI_Transmit+0x1a0>
 8005de2:	e780      	b.n	8005ce6 <HAL_SPI_Transmit+0xce>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005de4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 8005dea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 8005dec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8005dee:	3b01      	subs	r3, #1
 8005df0:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 8005df2:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 8005df4:	87e3      	strh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 8005df6:	63a2      	str	r2, [r4, #56]	; 0x38
 8005df8:	e7b0      	b.n	8005d5c <HAL_SPI_Transmit+0x144>
      if (hspi->TxXferCount > 1U)
 8005dfa:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005dfc:	b292      	uxth	r2, r2
 8005dfe:	2a01      	cmp	r2, #1
 8005e00:	d91f      	bls.n	8005e42 <HAL_SPI_Transmit+0x22a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e02:	4641      	mov	r1, r8
 8005e04:	f831 2b02 	ldrh.w	r2, [r1], #2
 8005e08:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8005e0a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e0c:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005e0e:	3b02      	subs	r3, #2
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005e14:	e7a0      	b.n	8005d58 <HAL_SPI_Transmit+0x140>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e16:	4641      	mov	r1, r8
 8005e18:	f831 2b02 	ldrh.w	r2, [r1], #2
 8005e1c:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8005e1e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e20:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8005e22:	3b01      	subs	r3, #1
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005e28:	e747      	b.n	8005cba <HAL_SPI_Transmit+0xa2>
    SPI_1LINE_TX(hspi);
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e30:	601a      	str	r2, [r3, #0]
 8005e32:	e730      	b.n	8005c96 <HAL_SPI_Transmit+0x7e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e34:	f7fb f888 	bl	8000f48 <HAL_GetTick>
 8005e38:	1b80      	subs	r0, r0, r6
 8005e3a:	4285      	cmp	r5, r0
 8005e3c:	d8b8      	bhi.n	8005db0 <HAL_SPI_Transmit+0x198>
          errorcode = HAL_TIMEOUT;
 8005e3e:	2003      	movs	r0, #3
 8005e40:	e705      	b.n	8005c4e <HAL_SPI_Transmit+0x36>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e42:	f898 2000 	ldrb.w	r2, [r8]
 8005e46:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8005e48:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr ++;
 8005e4a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr ++;
 8005e50:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8005e52:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr ++;
 8005e54:	63a2      	str	r2, [r4, #56]	; 0x38
 8005e56:	e77f      	b.n	8005d58 <HAL_SPI_Transmit+0x140>

08005e58 <HAL_SPI_ErrorCallback>:
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop

08005e5c <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 8005e5c:	6802      	ldr	r2, [r0, #0]
{
 8005e5e:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8005e60:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8005e62:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005e64:	f003 0541 	and.w	r5, r3, #65	; 0x41
 8005e68:	2d01      	cmp	r5, #1
{
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005e6e:	d05a      	beq.n	8005f26 <HAL_SPI_IRQHandler+0xca>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005e70:	079d      	lsls	r5, r3, #30
 8005e72:	d452      	bmi.n	8005f1a <HAL_SPI_IRQHandler+0xbe>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005e74:	f413 7fb0 	tst.w	r3, #352	; 0x160
 8005e78:	d04d      	beq.n	8005f16 <HAL_SPI_IRQHandler+0xba>
 8005e7a:	068d      	lsls	r5, r1, #26
 8005e7c:	d54b      	bpl.n	8005f16 <HAL_SPI_IRQHandler+0xba>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005e7e:	0658      	lsls	r0, r3, #25
 8005e80:	d50e      	bpl.n	8005ea0 <HAL_SPI_IRQHandler+0x44>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005e82:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8005e86:	2803      	cmp	r0, #3
 8005e88:	d05b      	beq.n	8005f42 <HAL_SPI_IRQHandler+0xe6>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e8a:	6e20      	ldr	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e8c:	2500      	movs	r5, #0
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e8e:	f040 0004 	orr.w	r0, r0, #4
 8005e92:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e94:	9500      	str	r5, [sp, #0]
 8005e96:	68d0      	ldr	r0, [r2, #12]
 8005e98:	9000      	str	r0, [sp, #0]
 8005e9a:	6890      	ldr	r0, [r2, #8]
 8005e9c:	9000      	str	r0, [sp, #0]
 8005e9e:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005ea0:	069d      	lsls	r5, r3, #26
 8005ea2:	d50c      	bpl.n	8005ebe <HAL_SPI_IRQHandler+0x62>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005ea4:	6e20      	ldr	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005ea6:	2500      	movs	r5, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005ea8:	f040 0001 	orr.w	r0, r0, #1
 8005eac:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005eae:	9502      	str	r5, [sp, #8]
 8005eb0:	6890      	ldr	r0, [r2, #8]
 8005eb2:	9002      	str	r0, [sp, #8]
 8005eb4:	6810      	ldr	r0, [r2, #0]
 8005eb6:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8005eba:	6010      	str	r0, [r2, #0]
 8005ebc:	9802      	ldr	r0, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005ebe:	05d8      	lsls	r0, r3, #23
 8005ec0:	d508      	bpl.n	8005ed4 <HAL_SPI_IRQHandler+0x78>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005ec2:	6e23      	ldr	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005ec4:	2000      	movs	r0, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005ec6:	f043 0308 	orr.w	r3, r3, #8
 8005eca:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005ecc:	9003      	str	r0, [sp, #12]
 8005ece:	6893      	ldr	r3, [r2, #8]
 8005ed0:	9303      	str	r3, [sp, #12]
 8005ed2:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ed4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005ed6:	b1f3      	cbz	r3, 8005f16 <HAL_SPI_IRQHandler+0xba>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005ed8:	6853      	ldr	r3, [r2, #4]
 8005eda:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8005ede:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8005ee0:	2001      	movs	r0, #1
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005ee2:	078b      	lsls	r3, r1, #30
      hspi->State = HAL_SPI_STATE_READY;
 8005ee4:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005ee8:	d022      	beq.n	8005f30 <HAL_SPI_IRQHandler+0xd4>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005eea:	6853      	ldr	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8005eec:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005eee:	f023 0303 	bic.w	r3, r3, #3
 8005ef2:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8005ef4:	b120      	cbz	r0, 8005f00 <HAL_SPI_IRQHandler+0xa4>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005ef6:	4b17      	ldr	r3, [pc, #92]	; (8005f54 <HAL_SPI_IRQHandler+0xf8>)
 8005ef8:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005efa:	f7fb ffe5 	bl	8001ec8 <HAL_DMA_Abort_IT>
 8005efe:	b9d8      	cbnz	r0, 8005f38 <HAL_SPI_IRQHandler+0xdc>
        if (hspi->hdmatx != NULL)
 8005f00:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f02:	b140      	cbz	r0, 8005f16 <HAL_SPI_IRQHandler+0xba>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f04:	4b13      	ldr	r3, [pc, #76]	; (8005f54 <HAL_SPI_IRQHandler+0xf8>)
 8005f06:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005f08:	f7fb ffde 	bl	8001ec8 <HAL_DMA_Abort_IT>
 8005f0c:	b118      	cbz	r0, 8005f16 <HAL_SPI_IRQHandler+0xba>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f0e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f14:	6623      	str	r3, [r4, #96]	; 0x60
}
 8005f16:	b005      	add	sp, #20
 8005f18:	bd30      	pop	{r4, r5, pc}
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005f1a:	0608      	lsls	r0, r1, #24
 8005f1c:	d5aa      	bpl.n	8005e74 <HAL_SPI_IRQHandler+0x18>
    hspi->TxISR(hspi);
 8005f1e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005f20:	4620      	mov	r0, r4
 8005f22:	4798      	blx	r3
    return;
 8005f24:	e7f7      	b.n	8005f16 <HAL_SPI_IRQHandler+0xba>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005f26:	064d      	lsls	r5, r1, #25
 8005f28:	d5a2      	bpl.n	8005e70 <HAL_SPI_IRQHandler+0x14>
    hspi->RxISR(hspi);
 8005f2a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005f2c:	4798      	blx	r3
    return;
 8005f2e:	e7f2      	b.n	8005f16 <HAL_SPI_IRQHandler+0xba>
        HAL_SPI_ErrorCallback(hspi);
 8005f30:	4620      	mov	r0, r4
 8005f32:	f7ff ff91 	bl	8005e58 <HAL_SPI_ErrorCallback>
 8005f36:	e7ee      	b.n	8005f16 <HAL_SPI_IRQHandler+0xba>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f38:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f3e:	6623      	str	r3, [r4, #96]	; 0x60
 8005f40:	e7de      	b.n	8005f00 <HAL_SPI_IRQHandler+0xa4>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f42:	2300      	movs	r3, #0
 8005f44:	9301      	str	r3, [sp, #4]
 8005f46:	68d3      	ldr	r3, [r2, #12]
 8005f48:	9301      	str	r3, [sp, #4]
 8005f4a:	6893      	ldr	r3, [r2, #8]
 8005f4c:	9301      	str	r3, [sp, #4]
 8005f4e:	9b01      	ldr	r3, [sp, #4]
        return;
 8005f50:	e7e1      	b.n	8005f16 <HAL_SPI_IRQHandler+0xba>
 8005f52:	bf00      	nop
 8005f54:	08005f59 	.word	0x08005f59

08005f58 <SPI_DMAAbortOnError>:
{
 8005f58:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f5a:	6a83      	ldr	r3, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  HAL_SPI_ErrorCallback(hspi);
 8005f62:	4618      	mov	r0, r3
  hspi->TxXferCount = 0U;
 8005f64:	87da      	strh	r2, [r3, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8005f66:	f7ff ff77 	bl	8005e58 <HAL_SPI_ErrorCallback>
 8005f6a:	bd08      	pop	{r3, pc}

08005f6c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	f000 808e 	beq.w	800608e <HAL_TIM_Base_Init+0x122>
{
 8005f72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f74:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005f78:	4604      	mov	r4, r0
 8005f7a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d057      	beq.n	8006032 <HAL_TIM_Base_Init+0xc6>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f82:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f84:	4943      	ldr	r1, [pc, #268]	; (8006094 <HAL_TIM_Base_Init+0x128>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005f86:	2202      	movs	r2, #2
 8005f88:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f8c:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8005f8e:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f90:	d054      	beq.n	800603c <HAL_TIM_Base_Init+0xd0>
 8005f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f96:	d068      	beq.n	800606a <HAL_TIM_Base_Init+0xfe>
 8005f98:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8005f9c:	428b      	cmp	r3, r1
 8005f9e:	d026      	beq.n	8005fee <HAL_TIM_Base_Init+0x82>
 8005fa0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005fa4:	428b      	cmp	r3, r1
 8005fa6:	d022      	beq.n	8005fee <HAL_TIM_Base_Init+0x82>
 8005fa8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005fac:	428b      	cmp	r3, r1
 8005fae:	d01e      	beq.n	8005fee <HAL_TIM_Base_Init+0x82>
 8005fb0:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 8005fb4:	428b      	cmp	r3, r1
 8005fb6:	d01a      	beq.n	8005fee <HAL_TIM_Base_Init+0x82>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fb8:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8005fbc:	428b      	cmp	r3, r1
 8005fbe:	d051      	beq.n	8006064 <HAL_TIM_Base_Init+0xf8>
 8005fc0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005fc4:	428b      	cmp	r3, r1
 8005fc6:	d04d      	beq.n	8006064 <HAL_TIM_Base_Init+0xf8>
 8005fc8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005fcc:	428b      	cmp	r3, r1
 8005fce:	d049      	beq.n	8006064 <HAL_TIM_Base_Init+0xf8>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fd0:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fd2:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fd4:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fda:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8005fdc:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fde:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005fe0:	6299      	str	r1, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	615a      	str	r2, [r3, #20]
  return HAL_OK;
 8005fe6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005fe8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  return HAL_OK;
 8005fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8005fee:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ff0:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ff2:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ff4:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8005ff6:	6865      	ldr	r5, [r4, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ff8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005ffc:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ffe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006002:	4925      	ldr	r1, [pc, #148]	; (8006098 <HAL_TIM_Base_Init+0x12c>)
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006004:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006006:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800600a:	4302      	orrs	r2, r0
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800600c:	428b      	cmp	r3, r1
  TIMx->CR1 = tmpcr1;
 800600e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006010:	62df      	str	r7, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006012:	629d      	str	r5, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006014:	d00a      	beq.n	800602c <HAL_TIM_Base_Init+0xc0>
 8006016:	4a21      	ldr	r2, [pc, #132]	; (800609c <HAL_TIM_Base_Init+0x130>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d007      	beq.n	800602c <HAL_TIM_Base_Init+0xc0>
 800601c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006020:	4293      	cmp	r3, r2
 8006022:	d003      	beq.n	800602c <HAL_TIM_Base_Init+0xc0>
 8006024:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006028:	4293      	cmp	r3, r2
 800602a:	d1da      	bne.n	8005fe2 <HAL_TIM_Base_Init+0x76>
    TIMx->RCR = Structure->RepetitionCounter;
 800602c:	6962      	ldr	r2, [r4, #20]
 800602e:	631a      	str	r2, [r3, #48]	; 0x30
 8006030:	e7d7      	b.n	8005fe2 <HAL_TIM_Base_Init+0x76>
    htim->Lock = HAL_UNLOCKED;
 8006032:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006036:	f00b fc67 	bl	8011908 <HAL_TIM_Base_MspInit>
 800603a:	e7a2      	b.n	8005f82 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= Structure->CounterMode;
 800603c:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800603e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006040:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006042:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006046:	432a      	orrs	r2, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8006048:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800604c:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800604e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006052:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8006054:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006056:	68e2      	ldr	r2, [r4, #12]
 8006058:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800605a:	6862      	ldr	r2, [r4, #4]
 800605c:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800605e:	6962      	ldr	r2, [r4, #20]
 8006060:	631a      	str	r2, [r3, #48]	; 0x30
 8006062:	e7be      	b.n	8005fe2 <HAL_TIM_Base_Init+0x76>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006064:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006066:	69a1      	ldr	r1, [r4, #24]
 8006068:	e7ee      	b.n	8006048 <HAL_TIM_Base_Init+0xdc>
    tmpcr1 |= Structure->CounterMode;
 800606a:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800606c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800606e:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006070:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8006072:	6865      	ldr	r5, [r4, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006074:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006078:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 800607a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800607e:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006080:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006084:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8006086:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006088:	62df      	str	r7, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800608a:	629d      	str	r5, [r3, #40]	; 0x28
 800608c:	e7c3      	b.n	8006016 <HAL_TIM_Base_Init+0xaa>
    return HAL_ERROR;
 800608e:	2001      	movs	r0, #1
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	40012c00 	.word	0x40012c00
 8006098:	40013400 	.word	0x40013400
 800609c:	40014000 	.word	0x40014000

080060a0 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 80060a0:	2202      	movs	r2, #2
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 80060a2:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80060a4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 80060a8:	689a      	ldr	r2, [r3, #8]
 80060aa:	4909      	ldr	r1, [pc, #36]	; (80060d0 <HAL_TIM_Base_Start+0x30>)
 80060ac:	400a      	ands	r2, r1
 80060ae:	2a06      	cmp	r2, #6
 80060b0:	d008      	beq.n	80060c4 <HAL_TIM_Base_Start+0x24>
 80060b2:	689a      	ldr	r2, [r3, #8]
 80060b4:	400a      	ands	r2, r1
 80060b6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80060ba:	d003      	beq.n	80060c4 <HAL_TIM_Base_Start+0x24>
    __HAL_TIM_ENABLE(htim);
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	f042 0201 	orr.w	r2, r2, #1
 80060c2:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80060c4:	2301      	movs	r3, #1
 80060c6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80060ca:	2000      	movs	r0, #0
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	00010007 	.word	0x00010007

080060d4 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060d4:	6803      	ldr	r3, [r0, #0]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 80060d6:	490a      	ldr	r1, [pc, #40]	; (8006100 <HAL_TIM_Base_Start_IT+0x2c>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060d8:	68da      	ldr	r2, [r3, #12]
 80060da:	f042 0201 	orr.w	r2, r2, #1
 80060de:	60da      	str	r2, [r3, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 80060e0:	689a      	ldr	r2, [r3, #8]
 80060e2:	400a      	ands	r2, r1
 80060e4:	2a06      	cmp	r2, #6
 80060e6:	d008      	beq.n	80060fa <HAL_TIM_Base_Start_IT+0x26>
 80060e8:	689a      	ldr	r2, [r3, #8]
 80060ea:	400a      	ands	r2, r1
 80060ec:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80060f0:	d003      	beq.n	80060fa <HAL_TIM_Base_Start_IT+0x26>
    __HAL_TIM_ENABLE(htim);
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	f042 0201 	orr.w	r2, r2, #1
 80060f8:	601a      	str	r2, [r3, #0]
}
 80060fa:	2000      	movs	r0, #0
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	00010007 	.word	0x00010007

08006104 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006104:	6803      	ldr	r3, [r0, #0]
 8006106:	68da      	ldr	r2, [r3, #12]
 8006108:	f022 0201 	bic.w	r2, r2, #1
 800610c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 800610e:	6a19      	ldr	r1, [r3, #32]
 8006110:	f241 1211 	movw	r2, #4369	; 0x1111
 8006114:	4211      	tst	r1, r2
 8006116:	d108      	bne.n	800612a <HAL_TIM_Base_Stop_IT+0x26>
 8006118:	6a19      	ldr	r1, [r3, #32]
 800611a:	f240 4244 	movw	r2, #1092	; 0x444
 800611e:	4211      	tst	r1, r2
 8006120:	d103      	bne.n	800612a <HAL_TIM_Base_Stop_IT+0x26>
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	f022 0201 	bic.w	r2, r2, #1
 8006128:	601a      	str	r2, [r3, #0]
}
 800612a:	2000      	movs	r0, #0
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop

08006130 <HAL_TIM_PWM_MspInit>:
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop

08006134 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006134:	2800      	cmp	r0, #0
 8006136:	f000 808e 	beq.w	8006256 <HAL_TIM_PWM_Init+0x122>
{
 800613a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800613c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006140:	4604      	mov	r4, r0
 8006142:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006146:	2b00      	cmp	r3, #0
 8006148:	d057      	beq.n	80061fa <HAL_TIM_PWM_Init+0xc6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800614a:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800614c:	4943      	ldr	r1, [pc, #268]	; (800625c <HAL_TIM_PWM_Init+0x128>)
  htim->State = HAL_TIM_STATE_BUSY;
 800614e:	2202      	movs	r2, #2
 8006150:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006154:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8006156:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006158:	d054      	beq.n	8006204 <HAL_TIM_PWM_Init+0xd0>
 800615a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800615e:	d068      	beq.n	8006232 <HAL_TIM_PWM_Init+0xfe>
 8006160:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8006164:	428b      	cmp	r3, r1
 8006166:	d026      	beq.n	80061b6 <HAL_TIM_PWM_Init+0x82>
 8006168:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800616c:	428b      	cmp	r3, r1
 800616e:	d022      	beq.n	80061b6 <HAL_TIM_PWM_Init+0x82>
 8006170:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006174:	428b      	cmp	r3, r1
 8006176:	d01e      	beq.n	80061b6 <HAL_TIM_PWM_Init+0x82>
 8006178:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 800617c:	428b      	cmp	r3, r1
 800617e:	d01a      	beq.n	80061b6 <HAL_TIM_PWM_Init+0x82>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006180:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8006184:	428b      	cmp	r3, r1
 8006186:	d051      	beq.n	800622c <HAL_TIM_PWM_Init+0xf8>
 8006188:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800618c:	428b      	cmp	r3, r1
 800618e:	d04d      	beq.n	800622c <HAL_TIM_PWM_Init+0xf8>
 8006190:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006194:	428b      	cmp	r3, r1
 8006196:	d049      	beq.n	800622c <HAL_TIM_PWM_Init+0xf8>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006198:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800619a:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 800619c:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800619e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061a2:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80061a4:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061a6:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80061a8:	6299      	str	r1, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80061aa:	2201      	movs	r2, #1
 80061ac:	615a      	str	r2, [r3, #20]
  return HAL_OK;
 80061ae:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80061b0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  return HAL_OK;
 80061b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 80061b6:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061b8:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061ba:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061bc:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 80061be:	6865      	ldr	r5, [r4, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061c0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80061c4:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80061c6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061ca:	4925      	ldr	r1, [pc, #148]	; (8006260 <HAL_TIM_PWM_Init+0x12c>)
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061cc:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061d2:	4302      	orrs	r2, r0
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061d4:	428b      	cmp	r3, r1
  TIMx->CR1 = tmpcr1;
 80061d6:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061d8:	62df      	str	r7, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80061da:	629d      	str	r5, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061dc:	d00a      	beq.n	80061f4 <HAL_TIM_PWM_Init+0xc0>
 80061de:	4a21      	ldr	r2, [pc, #132]	; (8006264 <HAL_TIM_PWM_Init+0x130>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d007      	beq.n	80061f4 <HAL_TIM_PWM_Init+0xc0>
 80061e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d003      	beq.n	80061f4 <HAL_TIM_PWM_Init+0xc0>
 80061ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d1da      	bne.n	80061aa <HAL_TIM_PWM_Init+0x76>
    TIMx->RCR = Structure->RepetitionCounter;
 80061f4:	6962      	ldr	r2, [r4, #20]
 80061f6:	631a      	str	r2, [r3, #48]	; 0x30
 80061f8:	e7d7      	b.n	80061aa <HAL_TIM_PWM_Init+0x76>
    htim->Lock = HAL_UNLOCKED;
 80061fa:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80061fe:	f7ff ff97 	bl	8006130 <HAL_TIM_PWM_MspInit>
 8006202:	e7a2      	b.n	800614a <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= Structure->CounterMode;
 8006204:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006206:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006208:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800620a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800620e:	432a      	orrs	r2, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8006210:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006214:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006216:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800621a:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 800621c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800621e:	68e2      	ldr	r2, [r4, #12]
 8006220:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006222:	6862      	ldr	r2, [r4, #4]
 8006224:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006226:	6962      	ldr	r2, [r4, #20]
 8006228:	631a      	str	r2, [r3, #48]	; 0x30
 800622a:	e7be      	b.n	80061aa <HAL_TIM_PWM_Init+0x76>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800622c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800622e:	69a1      	ldr	r1, [r4, #24]
 8006230:	e7ee      	b.n	8006210 <HAL_TIM_PWM_Init+0xdc>
    tmpcr1 |= Structure->CounterMode;
 8006232:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006234:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006236:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006238:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 800623a:	6865      	ldr	r5, [r4, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800623c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006240:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8006242:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006246:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006248:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800624c:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 800624e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006250:	62df      	str	r7, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006252:	629d      	str	r5, [r3, #40]	; 0x28
 8006254:	e7c3      	b.n	80061de <HAL_TIM_PWM_Init+0xaa>
    return HAL_ERROR;
 8006256:	2001      	movs	r0, #1
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	40012c00 	.word	0x40012c00
 8006260:	40013400 	.word	0x40013400
 8006264:	40014000 	.word	0x40014000

08006268 <HAL_TIM_PWM_Start>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006268:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800626a:	2201      	movs	r2, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800626c:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800626e:	f001 011f 	and.w	r1, r1, #31
 8006272:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 8006276:	ea20 0001 	bic.w	r0, r0, r1
{
 800627a:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 800627c:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800627e:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006280:	4c15      	ldr	r4, [pc, #84]	; (80062d8 <HAL_TIM_PWM_Start+0x70>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006282:	4311      	orrs	r1, r2
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006284:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006286:	6219      	str	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006288:	d020      	beq.n	80062cc <HAL_TIM_PWM_Start+0x64>
 800628a:	4a14      	ldr	r2, [pc, #80]	; (80062dc <HAL_TIM_PWM_Start+0x74>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d01d      	beq.n	80062cc <HAL_TIM_PWM_Start+0x64>
 8006290:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006294:	4293      	cmp	r3, r2
 8006296:	d019      	beq.n	80062cc <HAL_TIM_PWM_Start+0x64>
 8006298:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800629c:	4293      	cmp	r3, r2
 800629e:	d015      	beq.n	80062cc <HAL_TIM_PWM_Start+0x64>
 80062a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d011      	beq.n	80062cc <HAL_TIM_PWM_Start+0x64>
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 80062a8:	689a      	ldr	r2, [r3, #8]
 80062aa:	490d      	ldr	r1, [pc, #52]	; (80062e0 <HAL_TIM_PWM_Start+0x78>)
 80062ac:	400a      	ands	r2, r1
 80062ae:	2a06      	cmp	r2, #6
 80062b0:	d008      	beq.n	80062c4 <HAL_TIM_PWM_Start+0x5c>
 80062b2:	689a      	ldr	r2, [r3, #8]
 80062b4:	400a      	ands	r2, r1
 80062b6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80062ba:	d003      	beq.n	80062c4 <HAL_TIM_PWM_Start+0x5c>
    __HAL_TIM_ENABLE(htim);
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	f042 0201 	orr.w	r2, r2, #1
 80062c2:	601a      	str	r2, [r3, #0]
}
 80062c4:	2000      	movs	r0, #0
 80062c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062ca:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 80062cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062d2:	645a      	str	r2, [r3, #68]	; 0x44
 80062d4:	e7e8      	b.n	80062a8 <HAL_TIM_PWM_Start+0x40>
 80062d6:	bf00      	nop
 80062d8:	40012c00 	.word	0x40012c00
 80062dc:	40013400 	.word	0x40013400
 80062e0:	00010007 	.word	0x00010007

080062e4 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80062e4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d066      	beq.n	80063ba <HAL_TIM_PWM_ConfigChannel+0xd6>
{
 80062ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 80062ee:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80062f0:	2401      	movs	r4, #1
 80062f2:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80062f6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 80062fa:	2a14      	cmp	r2, #20
 80062fc:	d855      	bhi.n	80063aa <HAL_TIM_PWM_ConfigChannel+0xc6>
 80062fe:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006302:	009e      	.short	0x009e
 8006304:	00540054 	.word	0x00540054
 8006308:	00dd0054 	.word	0x00dd0054
 800630c:	00540054 	.word	0x00540054
 8006310:	011d0054 	.word	0x011d0054
 8006314:	00540054 	.word	0x00540054
 8006318:	00150054 	.word	0x00150054
 800631c:	00540054 	.word	0x00540054
 8006320:	01590054 	.word	0x01590054
 8006324:	00540054 	.word	0x00540054
 8006328:	005e0054 	.word	0x005e0054
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800632c:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800632e:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006332:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006334:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006336:	4e9e      	ldr	r6, [pc, #632]	; (80065b0 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006338:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 800633c:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800633e:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006340:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8006342:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006344:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 8006348:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800634c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006350:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006352:	ea44 340e 	orr.w	r4, r4, lr, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006356:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800635a:	f000 8171 	beq.w	8006640 <HAL_TIM_PWM_ConfigChannel+0x35c>
 800635e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006362:	42b3      	cmp	r3, r6
 8006364:	f000 816c 	beq.w	8006640 <HAL_TIM_PWM_ConfigChannel+0x35c>
 8006368:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800636c:	42b3      	cmp	r3, r6
 800636e:	f000 8167 	beq.w	8006640 <HAL_TIM_PWM_ConfigChannel+0x35c>
 8006372:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006376:	42b3      	cmp	r3, r6
 8006378:	f000 8162 	beq.w	8006640 <HAL_TIM_PWM_ConfigChannel+0x35c>
 800637c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006380:	42b3      	cmp	r3, r6
 8006382:	f000 815d 	beq.w	8006640 <HAL_TIM_PWM_ConfigChannel+0x35c>
  TIMx->CCR4 = OC_Config->Pulse;
 8006386:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006388:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800638a:	61da      	str	r2, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800638c:	641e      	str	r6, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800638e:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006390:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006392:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006394:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8006398:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800639a:	69d9      	ldr	r1, [r3, #28]
 800639c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80063a0:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063a2:	69da      	ldr	r2, [r3, #28]
 80063a4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80063a8:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80063aa:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80063ac:	2201      	movs	r2, #1
 80063ae:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80063b2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80063b6:	4618      	mov	r0, r3
 80063b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 80063ba:	2002      	movs	r0, #2
 80063bc:	4770      	bx	lr
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80063be:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80063c0:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80063c4:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063c6:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063c8:	4e79      	ldr	r6, [pc, #484]	; (80065b0 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80063ca:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
 80063ce:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80063d0:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80063d2:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80063d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80063d6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80063da:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80063de:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063e2:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80063e4:	ea44 540e 	orr.w	r4, r4, lr, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063e8:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ec:	f000 811c 	beq.w	8006628 <HAL_TIM_PWM_ConfigChannel+0x344>
 80063f0:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80063f4:	42b3      	cmp	r3, r6
 80063f6:	f000 8117 	beq.w	8006628 <HAL_TIM_PWM_ConfigChannel+0x344>
 80063fa:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80063fe:	42b3      	cmp	r3, r6
 8006400:	f000 8112 	beq.w	8006628 <HAL_TIM_PWM_ConfigChannel+0x344>
 8006404:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006408:	42b3      	cmp	r3, r6
 800640a:	f000 810d 	beq.w	8006628 <HAL_TIM_PWM_ConfigChannel+0x344>
 800640e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006412:	42b3      	cmp	r3, r6
 8006414:	f000 8108 	beq.w	8006628 <HAL_TIM_PWM_ConfigChannel+0x344>
  TIMx->CCR6 = OC_Config->Pulse;
 8006418:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800641a:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800641c:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800641e:	65de      	str	r6, [r3, #92]	; 0x5c
  TIMx->CCER = tmpccer;
 8006420:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006422:	6d5c      	ldr	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006424:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006426:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 800642a:	655c      	str	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800642c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800642e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006432:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006434:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006436:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800643a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800643c:	e7b5      	b.n	80063aa <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800643e:	6803      	ldr	r3, [r0, #0]
  tmpccer |= OC_Config->OCPolarity;
 8006440:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006444:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8006446:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006448:	4e59      	ldr	r6, [pc, #356]	; (80065b0 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800644a:	f025 0501 	bic.w	r5, r5, #1
 800644e:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8006450:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006452:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8006454:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006456:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 800645a:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800645e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006462:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 8006464:	ea42 020e 	orr.w	r2, r2, lr
  tmpccmrx |= OC_Config->OCMode;
 8006468:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800646c:	f000 810c 	beq.w	8006688 <HAL_TIM_PWM_ConfigChannel+0x3a4>
 8006470:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006474:	42b3      	cmp	r3, r6
 8006476:	f000 8107 	beq.w	8006688 <HAL_TIM_PWM_ConfigChannel+0x3a4>
 800647a:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800647e:	42b3      	cmp	r3, r6
 8006480:	f000 8102 	beq.w	8006688 <HAL_TIM_PWM_ConfigChannel+0x3a4>
 8006484:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006488:	42b3      	cmp	r3, r6
 800648a:	f000 80fd 	beq.w	8006688 <HAL_TIM_PWM_ConfigChannel+0x3a4>
 800648e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006492:	42b3      	cmp	r3, r6
 8006494:	f000 80f8 	beq.w	8006688 <HAL_TIM_PWM_ConfigChannel+0x3a4>
  TIMx->CCR1 = OC_Config->Pulse;
 8006498:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800649a:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800649c:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800649e:	635e      	str	r6, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80064a0:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064a2:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064a4:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064a6:	f044 0408 	orr.w	r4, r4, #8
 80064aa:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064ac:	6999      	ldr	r1, [r3, #24]
 80064ae:	f021 0104 	bic.w	r1, r1, #4
 80064b2:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064b4:	699a      	ldr	r2, [r3, #24]
 80064b6:	432a      	orrs	r2, r5
 80064b8:	619a      	str	r2, [r3, #24]
      break;
 80064ba:	e776      	b.n	80063aa <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064bc:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064be:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064c2:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064c4:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064c6:	4e3a      	ldr	r6, [pc, #232]	; (80065b0 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064c8:	f025 0510 	bic.w	r5, r5, #16
 80064cc:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80064ce:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80064d0:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80064d2:	699a      	ldr	r2, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064d4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 80064d8:	f024 0420 	bic.w	r4, r4, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064dc:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064e0:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064e2:	ea44 140e 	orr.w	r4, r4, lr, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064e6:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064ea:	f000 80be 	beq.w	800666a <HAL_TIM_PWM_ConfigChannel+0x386>
 80064ee:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80064f2:	42b3      	cmp	r3, r6
 80064f4:	f000 80b9 	beq.w	800666a <HAL_TIM_PWM_ConfigChannel+0x386>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064f8:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80064fc:	42b3      	cmp	r3, r6
 80064fe:	f000 80bb 	beq.w	8006678 <HAL_TIM_PWM_ConfigChannel+0x394>
 8006502:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006506:	42b3      	cmp	r3, r6
 8006508:	f000 80b6 	beq.w	8006678 <HAL_TIM_PWM_ConfigChannel+0x394>
 800650c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006510:	42b3      	cmp	r3, r6
 8006512:	f000 80b1 	beq.w	8006678 <HAL_TIM_PWM_ConfigChannel+0x394>
  TIMx->CCR2 = OC_Config->Pulse;
 8006516:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006518:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800651a:	619a      	str	r2, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800651c:	639e      	str	r6, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800651e:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006520:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006522:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006524:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8006528:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800652a:	6999      	ldr	r1, [r3, #24]
 800652c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006530:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006532:	699a      	ldr	r2, [r3, #24]
 8006534:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8006538:	619a      	str	r2, [r3, #24]
      break;
 800653a:	e736      	b.n	80063aa <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800653c:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800653e:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006542:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8006544:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006546:	4e1a      	ldr	r6, [pc, #104]	; (80065b0 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006548:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 800654c:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800654e:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006550:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8006552:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006554:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 8006558:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800655c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006560:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006562:	ea44 240e 	orr.w	r4, r4, lr, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8006566:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800656a:	d06f      	beq.n	800664c <HAL_TIM_PWM_ConfigChannel+0x368>
 800656c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006570:	42b3      	cmp	r3, r6
 8006572:	d06b      	beq.n	800664c <HAL_TIM_PWM_ConfigChannel+0x368>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006574:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006578:	42b3      	cmp	r3, r6
 800657a:	d06e      	beq.n	800665a <HAL_TIM_PWM_ConfigChannel+0x376>
 800657c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006580:	42b3      	cmp	r3, r6
 8006582:	d06a      	beq.n	800665a <HAL_TIM_PWM_ConfigChannel+0x376>
 8006584:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006588:	42b3      	cmp	r3, r6
 800658a:	d066      	beq.n	800665a <HAL_TIM_PWM_ConfigChannel+0x376>
  TIMx->CCR3 = OC_Config->Pulse;
 800658c:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800658e:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006590:	61da      	str	r2, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8006592:	63de      	str	r6, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8006594:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006596:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006598:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800659a:	f044 0408 	orr.w	r4, r4, #8
 800659e:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065a0:	69d9      	ldr	r1, [r3, #28]
 80065a2:	f021 0104 	bic.w	r1, r1, #4
 80065a6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065a8:	69da      	ldr	r2, [r3, #28]
 80065aa:	432a      	orrs	r2, r5
 80065ac:	61da      	str	r2, [r3, #28]
      break;
 80065ae:	e6fc      	b.n	80063aa <HAL_TIM_PWM_ConfigChannel+0xc6>
 80065b0:	40012c00 	.word	0x40012c00
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80065b4:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80065b6:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80065ba:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 80065bc:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065be:	4e39      	ldr	r6, [pc, #228]	; (80066a4 <HAL_TIM_PWM_ConfigChannel+0x3c0>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80065c0:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
 80065c4:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80065c6:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80065c8:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80065ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80065cc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 80065d0:	f424 3400 	bic.w	r4, r4, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80065d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065d8:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80065da:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 80065de:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065e2:	d027      	beq.n	8006634 <HAL_TIM_PWM_ConfigChannel+0x350>
 80065e4:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80065e8:	42b3      	cmp	r3, r6
 80065ea:	d023      	beq.n	8006634 <HAL_TIM_PWM_ConfigChannel+0x350>
 80065ec:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80065f0:	42b3      	cmp	r3, r6
 80065f2:	d01f      	beq.n	8006634 <HAL_TIM_PWM_ConfigChannel+0x350>
 80065f4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80065f8:	42b3      	cmp	r3, r6
 80065fa:	d01b      	beq.n	8006634 <HAL_TIM_PWM_ConfigChannel+0x350>
 80065fc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006600:	42b3      	cmp	r3, r6
 8006602:	d017      	beq.n	8006634 <HAL_TIM_PWM_ConfigChannel+0x350>
  TIMx->CCR5 = OC_Config->Pulse;
 8006604:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006606:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006608:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800660a:	659e      	str	r6, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 800660c:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800660e:	6d5c      	ldr	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006610:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006612:	f044 0408 	orr.w	r4, r4, #8
 8006616:	655c      	str	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006618:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800661a:	f021 0104 	bic.w	r1, r1, #4
 800661e:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006620:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006622:	432a      	orrs	r2, r5
 8006624:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006626:	e6c0      	b.n	80063aa <HAL_TIM_PWM_ConfigChannel+0xc6>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006628:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 800662a:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800662e:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
 8006632:	e6f1      	b.n	8006418 <HAL_TIM_PWM_ConfigChannel+0x134>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006634:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006636:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800663a:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 800663e:	e7e1      	b.n	8006604 <HAL_TIM_PWM_ConfigChannel+0x320>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006640:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006642:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006646:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 800664a:	e69c      	b.n	8006386 <HAL_TIM_PWM_ConfigChannel+0xa2>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800664c:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800664e:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006652:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8006656:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800665a:	694e      	ldr	r6, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800665c:	698f      	ldr	r7, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800665e:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006662:	433e      	orrs	r6, r7
 8006664:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 8006668:	e790      	b.n	800658c <HAL_TIM_PWM_ConfigChannel+0x2a8>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800666a:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800666c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006670:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006674:	f024 0440 	bic.w	r4, r4, #64	; 0x40
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006678:	694e      	ldr	r6, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800667a:	698f      	ldr	r7, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800667c:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006680:	433e      	orrs	r6, r7
 8006682:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
 8006686:	e746      	b.n	8006516 <HAL_TIM_PWM_ConfigChannel+0x232>
    tmpccer |= OC_Config->OCNPolarity;
 8006688:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 800668a:	698f      	ldr	r7, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 800668c:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 8006690:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8006692:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006694:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8006698:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 800669a:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800669e:	4335      	orrs	r5, r6
 80066a0:	e6fa      	b.n	8006498 <HAL_TIM_PWM_ConfigChannel+0x1b4>
 80066a2:	bf00      	nop
 80066a4:	40012c00 	.word	0x40012c00

080066a8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80066a8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d03a      	beq.n	8006726 <HAL_TIM_ConfigClockSource+0x7e>
  htim->State = HAL_TIM_STATE_BUSY;
 80066b0:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 80066b2:	6803      	ldr	r3, [r0, #0]
{
 80066b4:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 80066b6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80066ba:	689d      	ldr	r5, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80066bc:	680a      	ldr	r2, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066be:	4c54      	ldr	r4, [pc, #336]	; (8006810 <HAL_TIM_ConfigClockSource+0x168>)
  switch (sClockSourceConfig->ClockSource)
 80066c0:	2a40      	cmp	r2, #64	; 0x40
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066c2:	ea04 0405 	and.w	r4, r4, r5
  __HAL_LOCK(htim);
 80066c6:	f04f 0501 	mov.w	r5, #1
 80066ca:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 80066ce:	609c      	str	r4, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80066d0:	d041      	beq.n	8006756 <HAL_TIM_ConfigClockSource+0xae>
 80066d2:	d958      	bls.n	8006786 <HAL_TIM_ConfigClockSource+0xde>
 80066d4:	2a70      	cmp	r2, #112	; 0x70
 80066d6:	f000 8084 	beq.w	80067e2 <HAL_TIM_ConfigClockSource+0x13a>
 80066da:	d826      	bhi.n	800672a <HAL_TIM_ConfigClockSource+0x82>
 80066dc:	2a50      	cmp	r2, #80	; 0x50
 80066de:	d068      	beq.n	80067b2 <HAL_TIM_ConfigClockSource+0x10a>
 80066e0:	2a60      	cmp	r2, #96	; 0x60
 80066e2:	d117      	bne.n	8006714 <HAL_TIM_ConfigClockSource+0x6c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066e4:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066e6:	684d      	ldr	r5, [r1, #4]
 80066e8:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066ea:	f024 0410 	bic.w	r4, r4, #16
 80066ee:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066f0:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80066f2:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066f4:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80066fc:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006700:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8006704:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8006706:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8006708:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800670a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800670e:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8006712:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8006714:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8006716:	2201      	movs	r2, #1
 8006718:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800671c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8006720:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8006722:	4618      	mov	r0, r3
}
 8006724:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006726:	2002      	movs	r0, #2
 8006728:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800672a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800672e:	d039      	beq.n	80067a4 <HAL_TIM_ConfigClockSource+0xfc>
 8006730:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006734:	d1ee      	bne.n	8006714 <HAL_TIM_ConfigClockSource+0x6c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006736:	688a      	ldr	r2, [r1, #8]
 8006738:	684d      	ldr	r5, [r1, #4]
 800673a:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 800673c:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800673e:	432a      	orrs	r2, r5
 8006740:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006744:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006748:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800674a:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800674c:	689a      	ldr	r2, [r3, #8]
 800674e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006752:	609a      	str	r2, [r3, #8]
      break;
 8006754:	e7de      	b.n	8006714 <HAL_TIM_ConfigClockSource+0x6c>
  tmpccer = TIMx->CCER;
 8006756:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006758:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800675a:	684c      	ldr	r4, [r1, #4]
 800675c:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800675e:	f026 0601 	bic.w	r6, r6, #1
 8006762:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006764:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006766:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800676a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800676e:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8006772:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8006774:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006776:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8006778:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800677a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800677e:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8006782:	609a      	str	r2, [r3, #8]
 8006784:	e7c6      	b.n	8006714 <HAL_TIM_ConfigClockSource+0x6c>
  switch (sClockSourceConfig->ClockSource)
 8006786:	2a10      	cmp	r2, #16
 8006788:	d004      	beq.n	8006794 <HAL_TIM_ConfigClockSource+0xec>
 800678a:	d93e      	bls.n	800680a <HAL_TIM_ConfigClockSource+0x162>
 800678c:	2a20      	cmp	r2, #32
 800678e:	d001      	beq.n	8006794 <HAL_TIM_ConfigClockSource+0xec>
 8006790:	2a30      	cmp	r2, #48	; 0x30
 8006792:	d1bf      	bne.n	8006714 <HAL_TIM_ConfigClockSource+0x6c>
  tmpsmcr = TIMx->SMCR;
 8006794:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006796:	f042 0207 	orr.w	r2, r2, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 800679a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800679e:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 80067a0:	609a      	str	r2, [r3, #8]
 80067a2:	e7b7      	b.n	8006714 <HAL_TIM_ConfigClockSource+0x6c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80067a4:	689a      	ldr	r2, [r3, #8]
 80067a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80067aa:	f022 0207 	bic.w	r2, r2, #7
 80067ae:	609a      	str	r2, [r3, #8]
      break;
 80067b0:	e7b0      	b.n	8006714 <HAL_TIM_ConfigClockSource+0x6c>
  tmpccer = TIMx->CCER;
 80067b2:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067b4:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067b6:	684c      	ldr	r4, [r1, #4]
 80067b8:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067ba:	f026 0601 	bic.w	r6, r6, #1
 80067be:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067c0:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067c2:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067c6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067ca:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80067ce:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80067d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067d2:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80067d4:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80067d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067da:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80067de:	609a      	str	r2, [r3, #8]
 80067e0:	e798      	b.n	8006714 <HAL_TIM_ConfigClockSource+0x6c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067e2:	688a      	ldr	r2, [r1, #8]
 80067e4:	684d      	ldr	r5, [r1, #4]
 80067e6:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 80067e8:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067ea:	432a      	orrs	r2, r5
 80067ec:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067f0:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067f4:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 80067f6:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80067f8:	689a      	ldr	r2, [r3, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80067fe:	f022 0277 	bic.w	r2, r2, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006802:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8006806:	609a      	str	r2, [r3, #8]
      break;
 8006808:	e784      	b.n	8006714 <HAL_TIM_ConfigClockSource+0x6c>
  switch (sClockSourceConfig->ClockSource)
 800680a:	2a00      	cmp	r2, #0
 800680c:	d0c2      	beq.n	8006794 <HAL_TIM_ConfigClockSource+0xec>
 800680e:	e781      	b.n	8006714 <HAL_TIM_ConfigClockSource+0x6c>
 8006810:	fffe0088 	.word	0xfffe0088

08006814 <HAL_TIM_OC_DelayElapsedCallback>:
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop

08006818 <HAL_TIM_IC_CaptureCallback>:
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop

0800681c <HAL_TIM_PWM_PulseFinishedCallback>:
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop

08006820 <HAL_TIM_TriggerCallback>:
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop

08006824 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006824:	6803      	ldr	r3, [r0, #0]
 8006826:	691a      	ldr	r2, [r3, #16]
 8006828:	0791      	lsls	r1, r2, #30
{
 800682a:	b510      	push	{r4, lr}
 800682c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800682e:	d502      	bpl.n	8006836 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006830:	68da      	ldr	r2, [r3, #12]
 8006832:	0792      	lsls	r2, r2, #30
 8006834:	d465      	bmi.n	8006902 <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006836:	691a      	ldr	r2, [r3, #16]
 8006838:	0752      	lsls	r2, r2, #29
 800683a:	d502      	bpl.n	8006842 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800683c:	68da      	ldr	r2, [r3, #12]
 800683e:	0750      	lsls	r0, r2, #29
 8006840:	d44c      	bmi.n	80068dc <HAL_TIM_IRQHandler+0xb8>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006842:	691a      	ldr	r2, [r3, #16]
 8006844:	0711      	lsls	r1, r2, #28
 8006846:	d502      	bpl.n	800684e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006848:	68da      	ldr	r2, [r3, #12]
 800684a:	0712      	lsls	r2, r2, #28
 800684c:	d434      	bmi.n	80068b8 <HAL_TIM_IRQHandler+0x94>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800684e:	691a      	ldr	r2, [r3, #16]
 8006850:	06d0      	lsls	r0, r2, #27
 8006852:	d502      	bpl.n	800685a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006854:	68da      	ldr	r2, [r3, #12]
 8006856:	06d1      	lsls	r1, r2, #27
 8006858:	d41e      	bmi.n	8006898 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800685a:	691a      	ldr	r2, [r3, #16]
 800685c:	07d2      	lsls	r2, r2, #31
 800685e:	d502      	bpl.n	8006866 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006860:	68da      	ldr	r2, [r3, #12]
 8006862:	07d0      	lsls	r0, r2, #31
 8006864:	d46b      	bmi.n	800693e <HAL_TIM_IRQHandler+0x11a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006866:	691a      	ldr	r2, [r3, #16]
 8006868:	0611      	lsls	r1, r2, #24
 800686a:	d502      	bpl.n	8006872 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800686c:	68da      	ldr	r2, [r3, #12]
 800686e:	0612      	lsls	r2, r2, #24
 8006870:	d46d      	bmi.n	800694e <HAL_TIM_IRQHandler+0x12a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006872:	691a      	ldr	r2, [r3, #16]
 8006874:	05d0      	lsls	r0, r2, #23
 8006876:	d502      	bpl.n	800687e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006878:	68da      	ldr	r2, [r3, #12]
 800687a:	0611      	lsls	r1, r2, #24
 800687c:	d46f      	bmi.n	800695e <HAL_TIM_IRQHandler+0x13a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800687e:	691a      	ldr	r2, [r3, #16]
 8006880:	0652      	lsls	r2, r2, #25
 8006882:	d502      	bpl.n	800688a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006884:	68da      	ldr	r2, [r3, #12]
 8006886:	0650      	lsls	r0, r2, #25
 8006888:	d451      	bmi.n	800692e <HAL_TIM_IRQHandler+0x10a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800688a:	691a      	ldr	r2, [r3, #16]
 800688c:	0691      	lsls	r1, r2, #26
 800688e:	d502      	bpl.n	8006896 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006890:	68da      	ldr	r2, [r3, #12]
 8006892:	0692      	lsls	r2, r2, #26
 8006894:	d443      	bmi.n	800691e <HAL_TIM_IRQHandler+0xfa>
 8006896:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006898:	f06f 0210 	mvn.w	r2, #16
 800689c:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800689e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068a0:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068a2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068a6:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80068a8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068aa:	d06c      	beq.n	8006986 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_IC_CaptureCallback(htim);
 80068ac:	f7ff ffb4 	bl	8006818 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068b0:	2200      	movs	r2, #0
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	7722      	strb	r2, [r4, #28]
 80068b6:	e7d0      	b.n	800685a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068b8:	f06f 0208 	mvn.w	r2, #8
 80068bc:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068be:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068c0:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068c2:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068c4:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80068c6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068c8:	d15a      	bne.n	8006980 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ca:	f7ff ffa3 	bl	8006814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068ce:	4620      	mov	r0, r4
 80068d0:	f7ff ffa4 	bl	800681c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068d4:	2200      	movs	r2, #0
 80068d6:	6823      	ldr	r3, [r4, #0]
 80068d8:	7722      	strb	r2, [r4, #28]
 80068da:	e7b8      	b.n	800684e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068dc:	f06f 0204 	mvn.w	r2, #4
 80068e0:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068e2:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068e4:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068e6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068ea:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80068ec:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068ee:	d144      	bne.n	800697a <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068f0:	f7ff ff90 	bl	8006814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068f4:	4620      	mov	r0, r4
 80068f6:	f7ff ff91 	bl	800681c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068fa:	2200      	movs	r2, #0
 80068fc:	6823      	ldr	r3, [r4, #0]
 80068fe:	7722      	strb	r2, [r4, #28]
 8006900:	e79f      	b.n	8006842 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006902:	f06f 0202 	mvn.w	r2, #2
 8006906:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006908:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800690a:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800690c:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800690e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006910:	d02d      	beq.n	800696e <HAL_TIM_IRQHandler+0x14a>
          HAL_TIM_IC_CaptureCallback(htim);
 8006912:	f7ff ff81 	bl	8006818 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006916:	2200      	movs	r2, #0
 8006918:	6823      	ldr	r3, [r4, #0]
 800691a:	7722      	strb	r2, [r4, #28]
 800691c:	e78b      	b.n	8006836 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800691e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8006922:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006924:	611a      	str	r2, [r3, #16]
}
 8006926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 800692a:	f000 b8a9 	b.w	8006a80 <HAL_TIMEx_CommutationCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800692e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006932:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006934:	4620      	mov	r0, r4
 8006936:	f7ff ff73 	bl	8006820 <HAL_TIM_TriggerCallback>
 800693a:	6823      	ldr	r3, [r4, #0]
 800693c:	e7a5      	b.n	800688a <HAL_TIM_IRQHandler+0x66>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800693e:	f06f 0201 	mvn.w	r2, #1
 8006942:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006944:	4620      	mov	r0, r4
 8006946:	f00a f8e1 	bl	8010b0c <HAL_TIM_PeriodElapsedCallback>
 800694a:	6823      	ldr	r3, [r4, #0]
 800694c:	e78b      	b.n	8006866 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800694e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006952:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006954:	4620      	mov	r0, r4
 8006956:	f000 f895 	bl	8006a84 <HAL_TIMEx_BreakCallback>
 800695a:	6823      	ldr	r3, [r4, #0]
 800695c:	e789      	b.n	8006872 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800695e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006962:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8006964:	4620      	mov	r0, r4
 8006966:	f000 f88f 	bl	8006a88 <HAL_TIMEx_Break2Callback>
 800696a:	6823      	ldr	r3, [r4, #0]
 800696c:	e787      	b.n	800687e <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800696e:	f7ff ff51 	bl	8006814 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006972:	4620      	mov	r0, r4
 8006974:	f7ff ff52 	bl	800681c <HAL_TIM_PWM_PulseFinishedCallback>
 8006978:	e7cd      	b.n	8006916 <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 800697a:	f7ff ff4d 	bl	8006818 <HAL_TIM_IC_CaptureCallback>
 800697e:	e7bc      	b.n	80068fa <HAL_TIM_IRQHandler+0xd6>
        HAL_TIM_IC_CaptureCallback(htim);
 8006980:	f7ff ff4a 	bl	8006818 <HAL_TIM_IC_CaptureCallback>
 8006984:	e7a6      	b.n	80068d4 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006986:	f7ff ff45 	bl	8006814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800698a:	4620      	mov	r0, r4
 800698c:	f7ff ff46 	bl	800681c <HAL_TIM_PWM_PulseFinishedCallback>
 8006990:	e78e      	b.n	80068b0 <HAL_TIM_IRQHandler+0x8c>
 8006992:	bf00      	nop

08006994 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006994:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8006998:	2a01      	cmp	r2, #1
 800699a:	d021      	beq.n	80069e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
{
 800699c:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800699e:	6804      	ldr	r4, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80069a0:	4d13      	ldr	r5, [pc, #76]	; (80069f0 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80069a2:	2202      	movs	r2, #2
 80069a4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80069a8:	42ac      	cmp	r4, r5
 80069aa:	4603      	mov	r3, r0
  tmpcr2 = htim->Instance->CR2;
 80069ac:	6862      	ldr	r2, [r4, #4]
  tmpsmcr = htim->Instance->SMCR;
 80069ae:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80069b0:	d018      	beq.n	80069e4 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 80069b2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80069b6:	42ac      	cmp	r4, r5
 80069b8:	d014      	beq.n	80069e4 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069ba:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069bc:	688d      	ldr	r5, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80069be:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 80069c2:	f020 0180 	bic.w	r1, r0, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069c6:	4332      	orrs	r2, r6
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069c8:	4329      	orrs	r1, r5

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069ca:	2601      	movs	r6, #1

  __HAL_UNLOCK(htim);
 80069cc:	2500      	movs	r5, #0
  htim->Instance->CR2 = tmpcr2;
 80069ce:	6062      	str	r2, [r4, #4]

  return HAL_OK;
 80069d0:	4628      	mov	r0, r5
  htim->Instance->SMCR = tmpsmcr;
 80069d2:	60a1      	str	r1, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 80069d4:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80069d8:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
}
 80069dc:	bc70      	pop	{r4, r5, r6}
 80069de:	4770      	bx	lr
  __HAL_LOCK(htim);
 80069e0:	2002      	movs	r0, #2
 80069e2:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80069e4:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80069e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80069ea:	432a      	orrs	r2, r5
 80069ec:	e7e5      	b.n	80069ba <HAL_TIMEx_MasterConfigSynchronization+0x26>
 80069ee:	bf00      	nop
 80069f0:	40012c00 	.word	0x40012c00

080069f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80069f4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d02c      	beq.n	8006a56 <HAL_TIMEx_ConfigBreakDeadTime+0x62>
{
 80069fc:	b4f0      	push	{r4, r5, r6, r7}

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80069fe:	e891 00e0 	ldmia.w	r1, {r5, r6, r7}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a02:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a04:	690c      	ldr	r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a0a:	433b      	orrs	r3, r7
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a10:	4333      	orrs	r3, r6
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a16:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a20:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a22:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006a24:	4d14      	ldr	r5, [pc, #80]	; (8006a78 <HAL_TIMEx_ConfigBreakDeadTime+0x84>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006a26:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a2c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006a32:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a34:	4333      	orrs	r3, r6
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006a36:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006a3a:	42a8      	cmp	r0, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006a3c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006a40:	d00b      	beq.n	8006a5a <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8006a42:	4c0e      	ldr	r4, [pc, #56]	; (8006a7c <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 8006a44:	42a0      	cmp	r0, r4
 8006a46:	d008      	beq.n	8006a5a <HAL_TIMEx_ConfigBreakDeadTime+0x66>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8006a48:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8006a4a:	6443      	str	r3, [r0, #68]	; 0x44

  return HAL_OK;
}
 8006a4c:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8006a4e:	4608      	mov	r0, r1
  __HAL_UNLOCK(htim);
 8006a50:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
}
 8006a54:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006a56:	2002      	movs	r0, #2
 8006a58:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006a5a:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006a5c:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006a5e:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006a60:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a64:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006a68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a6c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006a6e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006a72:	430b      	orrs	r3, r1
 8006a74:	e7e8      	b.n	8006a48 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 8006a76:	bf00      	nop
 8006a78:	40012c00 	.word	0x40012c00
 8006a7c:	40013400 	.word	0x40013400

08006a80 <HAL_TIMEx_CommutationCallback>:
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop

08006a84 <HAL_TIMEx_BreakCallback>:
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop

08006a88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop

08006a8c <HAL_UART_TxCpltCallback>:
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop

08006a90 <HAL_UART_ErrorCallback>:
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop

08006a94 <HAL_UART_IRQHandler>:
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a94:	6803      	ldr	r3, [r0, #0]
 8006a96:	69da      	ldr	r2, [r3, #28]
{
 8006a98:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
  if (errorflags == RESET)
 8006a9a:	0716      	lsls	r6, r2, #28
{
 8006a9c:	4604      	mov	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a9e:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006aa0:	6899      	ldr	r1, [r3, #8]
  if (errorflags == RESET)
 8006aa2:	d05d      	beq.n	8006b60 <HAL_UART_IRQHandler+0xcc>
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != RESET)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)
 8006aa4:	4d6a      	ldr	r5, [pc, #424]	; (8006c50 <HAL_UART_IRQHandler+0x1bc>)
 8006aa6:	400d      	ands	r5, r1
 8006aa8:	d07e      	beq.n	8006ba8 <HAL_UART_IRQHandler+0x114>
      && (((cr3its & USART_CR3_EIE) != RESET)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
#endif
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006aaa:	07d6      	lsls	r6, r2, #31
 8006aac:	d509      	bpl.n	8006ac2 <HAL_UART_IRQHandler+0x2e>
 8006aae:	05c6      	lsls	r6, r0, #23
 8006ab0:	d507      	bpl.n	8006ac2 <HAL_UART_IRQHandler+0x2e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ab2:	2601      	movs	r6, #1
 8006ab4:	621e      	str	r6, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ab6:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 8006aba:	f046 0601 	orr.w	r6, r6, #1
 8006abe:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ac2:	0796      	lsls	r6, r2, #30
 8006ac4:	f140 8089 	bpl.w	8006bda <HAL_UART_IRQHandler+0x146>
 8006ac8:	07ce      	lsls	r6, r1, #31
 8006aca:	d50a      	bpl.n	8006ae2 <HAL_UART_IRQHandler+0x4e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006acc:	2602      	movs	r6, #2
 8006ace:	621e      	str	r6, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ad0:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 8006ad4:	f046 0604 	orr.w	r6, r6, #4
 8006ad8:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006adc:	0756      	lsls	r6, r2, #29
 8006ade:	f100 8081 	bmi.w	8006be4 <HAL_UART_IRQHandler+0x150>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != RESET)
 8006ae2:	0716      	lsls	r6, r2, #28
 8006ae4:	d505      	bpl.n	8006af2 <HAL_UART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET) ||
 8006ae6:	0686      	lsls	r6, r0, #26
 8006ae8:	f100 8085 	bmi.w	8006bf6 <HAL_UART_IRQHandler+0x162>
 8006aec:	2d00      	cmp	r5, #0
 8006aee:	f040 8082 	bne.w	8006bf6 <HAL_UART_IRQHandler+0x162>

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006af2:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8006af6:	2d00      	cmp	r5, #0
 8006af8:	d031      	beq.n	8006b5e <HAL_UART_IRQHandler+0xca>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != RESET)
 8006afa:	0695      	lsls	r5, r2, #26
 8006afc:	d507      	bpl.n	8006b0e <HAL_UART_IRQHandler+0x7a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
 8006afe:	0680      	lsls	r0, r0, #26
 8006b00:	f140 8082 	bpl.w	8006c08 <HAL_UART_IRQHandler+0x174>
#else
      if (((isrflags & USART_ISR_RXNE) != RESET)
          && ((cr1its & USART_CR1_RXNEIE) != RESET))
#endif
      {
        if (huart->RxISR != NULL)
 8006b04:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8006b06:	b112      	cbz	r2, 8006b0e <HAL_UART_IRQHandler+0x7a>
        {
          huart->RxISR(huart);
 8006b08:	4620      	mov	r0, r4
 8006b0a:	4790      	blx	r2
 8006b0c:	6823      	ldr	r3, [r4, #0]
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8006b0e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8006b12:	0712      	lsls	r2, r2, #28
 8006b14:	d404      	bmi.n	8006b20 <HAL_UART_IRQHandler+0x8c>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8006b16:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8006b18:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8006b1c:	f000 8092 	beq.w	8006c44 <HAL_UART_IRQHandler+0x1b0>
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b26:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b28:	689a      	ldr	r2, [r3, #8]
 8006b2a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006b2e:	f022 0201 	bic.w	r2, r2, #1
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b32:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b34:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8006b36:	f884 107e 	strb.w	r1, [r4, #126]	; 0x7e
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b3a:	689a      	ldr	r2, [r3, #8]

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b3c:	2100      	movs	r1, #0
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b3e:	0656      	lsls	r6, r2, #25
  huart->RxISR = NULL;
 8006b40:	66e1      	str	r1, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b42:	d57b      	bpl.n	8006c3c <HAL_UART_IRQHandler+0x1a8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b44:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8006b46:	6fa0      	ldr	r0, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b4c:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8006b4e:	2800      	cmp	r0, #0
 8006b50:	d074      	beq.n	8006c3c <HAL_UART_IRQHandler+0x1a8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b52:	4b40      	ldr	r3, [pc, #256]	; (8006c54 <HAL_UART_IRQHandler+0x1c0>)
 8006b54:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b56:	f7fb f9b7 	bl	8001ec8 <HAL_DMA_Abort_IT>
 8006b5a:	2800      	cmp	r0, #0
 8006b5c:	d157      	bne.n	8006c0e <HAL_UART_IRQHandler+0x17a>
 8006b5e:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_RXNE_RXFNE) != RESET)
 8006b60:	0695      	lsls	r5, r2, #26
 8006b62:	d50a      	bpl.n	8006b7a <HAL_UART_IRQHandler+0xe6>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
 8006b64:	0686      	lsls	r6, r0, #26
 8006b66:	d506      	bpl.n	8006b76 <HAL_UART_IRQHandler+0xe2>
      if (huart->RxISR != NULL)
 8006b68:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d0f7      	beq.n	8006b5e <HAL_UART_IRQHandler+0xca>
      huart->TxISR(huart);
 8006b6e:	4620      	mov	r0, r4
}
 8006b70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8006b74:	4718      	bx	r3
            || ((cr3its & USART_CR3_RXFTIE) != RESET)))
 8006b76:	00cd      	lsls	r5, r1, #3
 8006b78:	d4f6      	bmi.n	8006b68 <HAL_UART_IRQHandler+0xd4>
  if (((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8006b7a:	02d5      	lsls	r5, r2, #11
 8006b7c:	d40a      	bmi.n	8006b94 <HAL_UART_IRQHandler+0x100>
  if (((isrflags & USART_ISR_TXE_TXFNF) != RESET)
 8006b7e:	0615      	lsls	r5, r2, #24
 8006b80:	d51a      	bpl.n	8006bb8 <HAL_UART_IRQHandler+0x124>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != RESET)
 8006b82:	0606      	lsls	r6, r0, #24
 8006b84:	d516      	bpl.n	8006bb4 <HAL_UART_IRQHandler+0x120>
    if (huart->TxISR != NULL)
 8006b86:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d0e8      	beq.n	8006b5e <HAL_UART_IRQHandler+0xca>
      huart->TxISR(huart);
 8006b8c:	4620      	mov	r0, r4
}
 8006b8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8006b92:	4718      	bx	r3
  if (((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8006b94:	024e      	lsls	r6, r1, #9
 8006b96:	d5f2      	bpl.n	8006b7e <HAL_UART_IRQHandler+0xea>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b98:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8006b9c:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b9e:	621a      	str	r2, [r3, #32]
}
 8006ba0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8006ba4:	f000 bea0 	b.w	80078e8 <HAL_UARTEx_WakeupCallback>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != RESET))))
 8006ba8:	f410 7f90 	tst.w	r0, #288	; 0x120
 8006bac:	d0e5      	beq.n	8006b7a <HAL_UART_IRQHandler+0xe6>
    if (((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006bae:	07d6      	lsls	r6, r2, #31
 8006bb0:	d587      	bpl.n	8006ac2 <HAL_UART_IRQHandler+0x2e>
 8006bb2:	e77c      	b.n	8006aae <HAL_UART_IRQHandler+0x1a>
          || ((cr3its & USART_CR3_TXFTIE) != RESET)))
 8006bb4:	020d      	lsls	r5, r1, #8
 8006bb6:	d4e6      	bmi.n	8006b86 <HAL_UART_IRQHandler+0xf2>
  if (((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006bb8:	0651      	lsls	r1, r2, #25
 8006bba:	d501      	bpl.n	8006bc0 <HAL_UART_IRQHandler+0x12c>
 8006bbc:	0646      	lsls	r6, r0, #25
 8006bbe:	d42b      	bmi.n	8006c18 <HAL_UART_IRQHandler+0x184>
  if (((isrflags & USART_ISR_TXFE) != RESET) && ((cr1its & USART_CR1_TXFEIE) != RESET))
 8006bc0:	0215      	lsls	r5, r2, #8
 8006bc2:	d501      	bpl.n	8006bc8 <HAL_UART_IRQHandler+0x134>
 8006bc4:	0041      	lsls	r1, r0, #1
 8006bc6:	d434      	bmi.n	8006c32 <HAL_UART_IRQHandler+0x19e>
  if (((isrflags & USART_ISR_RXFF) != RESET) && ((cr1its & USART_CR1_RXFFIE) != RESET))
 8006bc8:	01d3      	lsls	r3, r2, #7
 8006bca:	d5c8      	bpl.n	8006b5e <HAL_UART_IRQHandler+0xca>
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	dac6      	bge.n	8006b5e <HAL_UART_IRQHandler+0xca>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006bd0:	4620      	mov	r0, r4
}
 8006bd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006bd6:	f000 be89 	b.w	80078ec <HAL_UARTEx_RxFifoFullCallback>
    if (((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006bda:	0756      	lsls	r6, r2, #29
 8006bdc:	d581      	bpl.n	8006ae2 <HAL_UART_IRQHandler+0x4e>
 8006bde:	07ce      	lsls	r6, r1, #31
 8006be0:	f57f af7f 	bpl.w	8006ae2 <HAL_UART_IRQHandler+0x4e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006be4:	2604      	movs	r6, #4
 8006be6:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006be8:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 8006bec:	f046 0602 	orr.w	r6, r6, #2
 8006bf0:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 8006bf4:	e775      	b.n	8006ae2 <HAL_UART_IRQHandler+0x4e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bf6:	2508      	movs	r5, #8
 8006bf8:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bfa:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8006bfe:	f045 0508 	orr.w	r5, r5, #8
 8006c02:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8006c06:	e774      	b.n	8006af2 <HAL_UART_IRQHandler+0x5e>
              || ((cr3its & USART_CR3_RXFTIE) != RESET)))
 8006c08:	00c9      	lsls	r1, r1, #3
 8006c0a:	d580      	bpl.n	8006b0e <HAL_UART_IRQHandler+0x7a>
 8006c0c:	e77a      	b.n	8006b04 <HAL_UART_IRQHandler+0x70>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c0e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
}
 8006c10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c14:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006c16:	4718      	bx	r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c18:	681a      	ldr	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c1a:	2520      	movs	r5, #32
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c20:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c22:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c24:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8006c26:	f884 507d 	strb.w	r5, [r4, #125]	; 0x7d
  huart->TxISR = NULL;
 8006c2a:	6721      	str	r1, [r4, #112]	; 0x70
  HAL_UART_TxCpltCallback(huart);
 8006c2c:	f7ff ff2e 	bl	8006a8c <HAL_UART_TxCpltCallback>
 8006c30:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006c32:	4620      	mov	r0, r4
}
 8006c34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006c38:	f000 be5a 	b.w	80078f0 <HAL_UARTEx_TxFifoEmptyCallback>
            HAL_UART_ErrorCallback(huart);
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	f7ff ff27 	bl	8006a90 <HAL_UART_ErrorCallback>
 8006c42:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8006c44:	4620      	mov	r0, r4
 8006c46:	f7ff ff23 	bl	8006a90 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c4a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8006c4e:	bd70      	pop	{r4, r5, r6, pc}
 8006c50:	10000001 	.word	0x10000001
 8006c54:	08006c59 	.word	0x08006c59

08006c58 <UART_DMAAbortOnError>:
{
 8006c58:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c5a:	6a83      	ldr	r3, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  HAL_UART_ErrorCallback(huart);
 8006c62:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 8006c64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8006c68:	f7ff ff12 	bl	8006a90 <HAL_UART_ErrorCallback>
 8006c6c:	bd08      	pop	{r3, pc}
 8006c6e:	bf00      	nop

08006c70 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c70:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006c72:	07da      	lsls	r2, r3, #31
{
 8006c74:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c76:	d506      	bpl.n	8006c86 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c78:	6801      	ldr	r1, [r0, #0]
 8006c7a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006c7c:	684a      	ldr	r2, [r1, #4]
 8006c7e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006c82:	4322      	orrs	r2, r4
 8006c84:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c86:	079c      	lsls	r4, r3, #30
 8006c88:	d506      	bpl.n	8006c98 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c8a:	6801      	ldr	r1, [r0, #0]
 8006c8c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006c8e:	684a      	ldr	r2, [r1, #4]
 8006c90:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006c94:	4322      	orrs	r2, r4
 8006c96:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c98:	0759      	lsls	r1, r3, #29
 8006c9a:	d506      	bpl.n	8006caa <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c9c:	6801      	ldr	r1, [r0, #0]
 8006c9e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006ca0:	684a      	ldr	r2, [r1, #4]
 8006ca2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ca6:	4322      	orrs	r2, r4
 8006ca8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006caa:	071a      	lsls	r2, r3, #28
 8006cac:	d506      	bpl.n	8006cbc <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cae:	6801      	ldr	r1, [r0, #0]
 8006cb0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006cb2:	684a      	ldr	r2, [r1, #4]
 8006cb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006cb8:	4322      	orrs	r2, r4
 8006cba:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cbc:	06dc      	lsls	r4, r3, #27
 8006cbe:	d506      	bpl.n	8006cce <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cc0:	6801      	ldr	r1, [r0, #0]
 8006cc2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006cc4:	688a      	ldr	r2, [r1, #8]
 8006cc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006cca:	4322      	orrs	r2, r4
 8006ccc:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cce:	0699      	lsls	r1, r3, #26
 8006cd0:	d506      	bpl.n	8006ce0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cd2:	6801      	ldr	r1, [r0, #0]
 8006cd4:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006cd6:	688a      	ldr	r2, [r1, #8]
 8006cd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cdc:	4322      	orrs	r2, r4
 8006cde:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ce0:	065a      	lsls	r2, r3, #25
 8006ce2:	d509      	bpl.n	8006cf8 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ce4:	6801      	ldr	r1, [r0, #0]
 8006ce6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006ce8:	684a      	ldr	r2, [r1, #4]
 8006cea:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006cee:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cf0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cf4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cf6:	d00b      	beq.n	8006d10 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cf8:	061b      	lsls	r3, r3, #24
 8006cfa:	d506      	bpl.n	8006d0a <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cfc:	6802      	ldr	r2, [r0, #0]
 8006cfe:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006d00:	6853      	ldr	r3, [r2, #4]
 8006d02:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006d06:	430b      	orrs	r3, r1
 8006d08:	6053      	str	r3, [r2, #4]
}
 8006d0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d0e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d10:	684a      	ldr	r2, [r1, #4]
 8006d12:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8006d14:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8006d18:	4322      	orrs	r2, r4
 8006d1a:	604a      	str	r2, [r1, #4]
 8006d1c:	e7ec      	b.n	8006cf8 <UART_AdvFeatureConfig+0x88>
 8006d1e:	bf00      	nop

08006d20 <HAL_UART_Init>:
  if (huart == NULL)
 8006d20:	2800      	cmp	r0, #0
 8006d22:	f000 821d 	beq.w	8007160 <HAL_UART_Init+0x440>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006d26:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
{
 8006d2a:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8006d2e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006d32:	4604      	mov	r4, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d06e      	beq.n	8006e16 <HAL_UART_Init+0xf6>
  __HAL_UART_DISABLE(huart);
 8006d38:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d3a:	6926      	ldr	r6, [r4, #16]
 8006d3c:	6967      	ldr	r7, [r4, #20]
 8006d3e:	69e1      	ldr	r1, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d40:	48c6      	ldr	r0, [pc, #792]	; (800705c <HAL_UART_Init+0x33c>)
  huart->gState = HAL_UART_STATE_BUSY;
 8006d42:	2224      	movs	r2, #36	; 0x24
 8006d44:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
  __HAL_UART_DISABLE(huart);
 8006d48:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d4a:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8006d4c:	f025 0501 	bic.w	r5, r5, #1
 8006d50:	601d      	str	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d52:	4332      	orrs	r2, r6
  tmpreg |= (uint32_t)huart->FifoMode;
 8006d54:	6e65      	ldr	r5, [r4, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d56:	681e      	ldr	r6, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d58:	433a      	orrs	r2, r7
 8006d5a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d5c:	4030      	ands	r0, r6
  tmpreg |= (uint32_t)huart->FifoMode;
 8006d5e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d60:	4302      	orrs	r2, r0
 8006d62:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d64:	685a      	ldr	r2, [r3, #4]
 8006d66:	68e5      	ldr	r5, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d68:	48bd      	ldr	r0, [pc, #756]	; (8007060 <HAL_UART_Init+0x340>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d6a:	69a6      	ldr	r6, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d6c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006d70:	432a      	orrs	r2, r5
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d72:	4283      	cmp	r3, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d74:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d76:	f000 819b 	beq.w	80070b0 <HAL_UART_Init+0x390>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d7a:	6898      	ldr	r0, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8006d7c:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d7e:	6a65      	ldr	r5, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d80:	4fb8      	ldr	r7, [pc, #736]	; (8007064 <HAL_UART_Init+0x344>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d82:	f020 406e 	bic.w	r0, r0, #3992977408	; 0xee000000
 8006d86:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8006d8a:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d8c:	4302      	orrs	r2, r0
 8006d8e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d92:	f022 020f 	bic.w	r2, r2, #15
 8006d96:	432a      	orrs	r2, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d98:	42bb      	cmp	r3, r7
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d9c:	f000 81d0 	beq.w	8007140 <HAL_UART_Init+0x420>
 8006da0:	4ab1      	ldr	r2, [pc, #708]	; (8007068 <HAL_UART_Init+0x348>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	f000 81d4 	beq.w	8007150 <HAL_UART_Init+0x430>
 8006da8:	4ab0      	ldr	r2, [pc, #704]	; (800706c <HAL_UART_Init+0x34c>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d07f      	beq.n	8006eae <HAL_UART_Init+0x18e>
 8006dae:	4ab0      	ldr	r2, [pc, #704]	; (8007070 <HAL_UART_Init+0x350>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	f000 80b3 	beq.w	8006f1c <HAL_UART_Init+0x1fc>
 8006db6:	4aaf      	ldr	r2, [pc, #700]	; (8007074 <HAL_UART_Init+0x354>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d011      	beq.n	8006de0 <HAL_UART_Init+0xc0>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8006dbc:	2310      	movs	r3, #16
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dbe:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006dc2:	f000 815d 	beq.w	8007080 <HAL_UART_Init+0x360>
    switch (clocksource)
 8006dc6:	2b08      	cmp	r3, #8
 8006dc8:	d81c      	bhi.n	8006e04 <HAL_UART_Init+0xe4>
 8006dca:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006dce:	00b7      	.short	0x00b7
 8006dd0:	00f00029 	.word	0x00f00029
 8006dd4:	00e5001b 	.word	0x00e5001b
 8006dd8:	001b001b 	.word	0x001b001b
 8006ddc:	0080001b 	.word	0x0080001b
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006de0:	4ba5      	ldr	r3, [pc, #660]	; (8007078 <HAL_UART_Init+0x358>)
 8006de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dee:	f000 80cf 	beq.w	8006f90 <HAL_UART_Init+0x270>
 8006df2:	f240 809c 	bls.w	8006f2e <HAL_UART_Init+0x20e>
 8006df6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dfa:	f000 80d4 	beq.w	8006fa6 <HAL_UART_Init+0x286>
 8006dfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e02:	d060      	beq.n	8006ec6 <HAL_UART_Init+0x1a6>
  huart->RxISR = NULL;
 8006e04:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8006e06:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8006e0a:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8006e0c:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 8006e0e:	6723      	str	r3, [r4, #112]	; 0x70
    return HAL_ERROR;
 8006e10:	2001      	movs	r0, #1
 8006e12:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
    huart->Lock = HAL_UNLOCKED;
 8006e16:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 8006e1a:	f00a fe75 	bl	8011b08 <HAL_UART_MspInit>
 8006e1e:	e78b      	b.n	8006d38 <HAL_UART_Init+0x18>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e20:	f7fd fdde 	bl	80049e0 <HAL_RCC_GetPCLK2Freq>
 8006e24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f040 808e 	bne.w	8006f48 <HAL_UART_Init+0x228>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	6862      	ldr	r2, [r4, #4]
 8006e30:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e34:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8006e38:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e3c:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e3e:	f1a3 0110 	sub.w	r1, r3, #16
 8006e42:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006e46:	4291      	cmp	r1, r2
 8006e48:	d8dc      	bhi.n	8006e04 <HAL_UART_Init+0xe4>
      huart->Instance->BRR = usartdiv;
 8006e4a:	6822      	ldr	r2, [r4, #0]
 8006e4c:	60d3      	str	r3, [r2, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e4e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  huart->RxISR = NULL;
 8006e50:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8006e52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e56:	66a1      	str	r1, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8006e58:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 8006e5a:	6723      	str	r3, [r4, #112]	; 0x70
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e5c:	2a00      	cmp	r2, #0
 8006e5e:	f040 80f9 	bne.w	8007054 <HAL_UART_Init+0x334>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e62:	6823      	ldr	r3, [r4, #0]
 8006e64:	685a      	ldr	r2, [r3, #4]
 8006e66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e6c:	689a      	ldr	r2, [r3, #8]
 8006e6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e72:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006e74:	681a      	ldr	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e76:	2100      	movs	r1, #0
  __HAL_UART_ENABLE(huart);
 8006e78:	f042 0201 	orr.w	r2, r2, #1
 8006e7c:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e7e:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  tickstart = HAL_GetTick();
 8006e82:	f7fa f861 	bl	8000f48 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e86:	6823      	ldr	r3, [r4, #0]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8006e8c:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e8e:	f100 80b6 	bmi.w	8006ffe <HAL_UART_Init+0x2de>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	0752      	lsls	r2, r2, #29
 8006e96:	f100 80d0 	bmi.w	800703a <HAL_UART_Init+0x31a>
  huart->gState = HAL_UART_STATE_READY;
 8006e9a:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8006e9c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8006e9e:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(huart);
 8006ea2:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006ea6:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
 8006eaa:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006eae:	4b72      	ldr	r3, [pc, #456]	; (8007078 <HAL_UART_Init+0x358>)
 8006eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eb4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006eb8:	2b10      	cmp	r3, #16
 8006eba:	d069      	beq.n	8006f90 <HAL_UART_Init+0x270>
 8006ebc:	d937      	bls.n	8006f2e <HAL_UART_Init+0x20e>
 8006ebe:	2b20      	cmp	r3, #32
 8006ec0:	d071      	beq.n	8006fa6 <HAL_UART_Init+0x286>
 8006ec2:	2b30      	cmp	r3, #48	; 0x30
 8006ec4:	d19e      	bne.n	8006e04 <HAL_UART_Init+0xe4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ec6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006eca:	f000 81a3 	beq.w	8007214 <HAL_UART_Init+0x4f4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ece:	2d00      	cmp	r5, #0
 8006ed0:	f000 8150 	beq.w	8007174 <HAL_UART_Init+0x454>
 8006ed4:	2d01      	cmp	r5, #1
 8006ed6:	f000 8368 	beq.w	80075aa <HAL_UART_Init+0x88a>
 8006eda:	2d02      	cmp	r5, #2
 8006edc:	f000 836e 	beq.w	80075bc <HAL_UART_Init+0x89c>
 8006ee0:	2d03      	cmp	r5, #3
 8006ee2:	f000 8372 	beq.w	80075ca <HAL_UART_Init+0x8aa>
 8006ee6:	2d04      	cmp	r5, #4
 8006ee8:	f000 837d 	beq.w	80075e6 <HAL_UART_Init+0x8c6>
 8006eec:	2d05      	cmp	r5, #5
 8006eee:	f000 8393 	beq.w	8007618 <HAL_UART_Init+0x8f8>
 8006ef2:	2d06      	cmp	r5, #6
 8006ef4:	f000 83a8 	beq.w	8007648 <HAL_UART_Init+0x928>
 8006ef8:	2d07      	cmp	r5, #7
 8006efa:	f000 83c7 	beq.w	800768c <HAL_UART_Init+0x96c>
 8006efe:	2d08      	cmp	r5, #8
 8006f00:	f000 83e8 	beq.w	80076d4 <HAL_UART_Init+0x9b4>
 8006f04:	2d09      	cmp	r5, #9
 8006f06:	f000 840a 	beq.w	800771e <HAL_UART_Init+0x9fe>
 8006f0a:	2d0a      	cmp	r5, #10
 8006f0c:	f000 841c 	beq.w	8007748 <HAL_UART_Init+0xa28>
 8006f10:	2d0b      	cmp	r5, #11
 8006f12:	bf14      	ite	ne
 8006f14:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 8006f18:	2380      	moveq	r3, #128	; 0x80
 8006f1a:	e124      	b.n	8007166 <HAL_UART_Init+0x446>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f1c:	4b56      	ldr	r3, [pc, #344]	; (8007078 <HAL_UART_Init+0x358>)
 8006f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f22:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006f26:	2b40      	cmp	r3, #64	; 0x40
 8006f28:	d032      	beq.n	8006f90 <HAL_UART_Init+0x270>
 8006f2a:	f200 8126 	bhi.w	800717a <HAL_UART_Init+0x45a>
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f47f af68 	bne.w	8006e04 <HAL_UART_Init+0xe4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f34:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006f38:	f000 81a1 	beq.w	800727e <HAL_UART_Init+0x55e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f3c:	f7fd fd3e 	bl	80049bc <HAL_RCC_GetPCLK1Freq>
 8006f40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f43f af72 	beq.w	8006e2c <HAL_UART_Init+0x10c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	f000 8284 	beq.w	8007456 <HAL_UART_Init+0x736>
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	f000 8283 	beq.w	800745a <HAL_UART_Init+0x73a>
 8006f54:	2b03      	cmp	r3, #3
 8006f56:	f000 828f 	beq.w	8007478 <HAL_UART_Init+0x758>
 8006f5a:	2b04      	cmp	r3, #4
 8006f5c:	f000 81bc 	beq.w	80072d8 <HAL_UART_Init+0x5b8>
 8006f60:	2b05      	cmp	r3, #5
 8006f62:	f000 8327 	beq.w	80075b4 <HAL_UART_Init+0x894>
 8006f66:	2b06      	cmp	r3, #6
 8006f68:	f000 832d 	beq.w	80075c6 <HAL_UART_Init+0x8a6>
 8006f6c:	2b07      	cmp	r3, #7
 8006f6e:	f000 8331 	beq.w	80075d4 <HAL_UART_Init+0x8b4>
 8006f72:	2b08      	cmp	r3, #8
 8006f74:	f000 834e 	beq.w	8007614 <HAL_UART_Init+0x8f4>
 8006f78:	2b09      	cmp	r3, #9
 8006f7a:	f000 836a 	beq.w	8007652 <HAL_UART_Init+0x932>
 8006f7e:	2b0a      	cmp	r3, #10
 8006f80:	f000 8377 	beq.w	8007672 <HAL_UART_Init+0x952>
 8006f84:	2b0b      	cmp	r3, #11
 8006f86:	bf14      	ite	ne
 8006f88:	2301      	movne	r3, #1
 8006f8a:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8006f8e:	e74e      	b.n	8006e2e <HAL_UART_Init+0x10e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f90:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006f94:	f000 816c 	beq.w	8007270 <HAL_UART_Init+0x550>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f98:	f7fd f844 	bl	8004024 <HAL_RCC_GetSysClockFreq>
 8006f9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	f43f af44 	beq.w	8006e2c <HAL_UART_Init+0x10c>
 8006fa4:	e7d0      	b.n	8006f48 <HAL_UART_Init+0x228>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fa6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006faa:	f000 816e 	beq.w	800728a <HAL_UART_Init+0x56a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fae:	2d00      	cmp	r5, #0
 8006fb0:	f000 80d8 	beq.w	8007164 <HAL_UART_Init+0x444>
 8006fb4:	2d01      	cmp	r5, #1
 8006fb6:	f000 82f6 	beq.w	80075a6 <HAL_UART_Init+0x886>
 8006fba:	2d02      	cmp	r5, #2
 8006fbc:	f000 82fc 	beq.w	80075b8 <HAL_UART_Init+0x898>
 8006fc0:	2d03      	cmp	r5, #3
 8006fc2:	f000 8305 	beq.w	80075d0 <HAL_UART_Init+0x8b0>
 8006fc6:	2d04      	cmp	r5, #4
 8006fc8:	f000 8310 	beq.w	80075ec <HAL_UART_Init+0x8cc>
 8006fcc:	2d05      	cmp	r5, #5
 8006fce:	f000 8326 	beq.w	800761e <HAL_UART_Init+0x8fe>
 8006fd2:	2d06      	cmp	r5, #6
 8006fd4:	f000 833b 	beq.w	800764e <HAL_UART_Init+0x92e>
 8006fd8:	2d07      	cmp	r5, #7
 8006fda:	f000 8355 	beq.w	8007688 <HAL_UART_Init+0x968>
 8006fde:	2d08      	cmp	r5, #8
 8006fe0:	f000 8376 	beq.w	80076d0 <HAL_UART_Init+0x9b0>
 8006fe4:	2d09      	cmp	r5, #9
 8006fe6:	f000 839d 	beq.w	8007724 <HAL_UART_Init+0xa04>
 8006fea:	2d0a      	cmp	r5, #10
 8006fec:	f000 83af 	beq.w	800774e <HAL_UART_Init+0xa2e>
 8006ff0:	4b22      	ldr	r3, [pc, #136]	; (800707c <HAL_UART_Init+0x35c>)
 8006ff2:	f24f 4224 	movw	r2, #62500	; 0xf424
 8006ff6:	2d0b      	cmp	r5, #11
 8006ff8:	bf08      	it	eq
 8006ffa:	4613      	moveq	r3, r2
 8006ffc:	e0b3      	b.n	8007166 <HAL_UART_Init+0x446>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ffe:	69dd      	ldr	r5, [r3, #28]
 8007000:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 8007004:	f47f af45 	bne.w	8006e92 <HAL_UART_Init+0x172>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007008:	f7f9 ff9e 	bl	8000f48 <HAL_GetTick>
 800700c:	1b80      	subs	r0, r0, r6
 800700e:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007012:	6823      	ldr	r3, [r4, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007014:	d3f3      	bcc.n	8006ffe <HAL_UART_Init+0x2de>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800701c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800701e:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8007020:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007022:	f022 0201 	bic.w	r2, r2, #1
 8007026:	609a      	str	r2, [r3, #8]
      return HAL_TIMEOUT;
 8007028:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 800702a:	f884 107d 	strb.w	r1, [r4, #125]	; 0x7d
        __HAL_UNLOCK(huart);
 800702e:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007032:	f884 107e 	strb.w	r1, [r4, #126]	; 0x7e
 8007036:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800703a:	69dd      	ldr	r5, [r3, #28]
 800703c:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 8007040:	f47f af2b 	bne.w	8006e9a <HAL_UART_Init+0x17a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007044:	f7f9 ff80 	bl	8000f48 <HAL_GetTick>
 8007048:	1b80      	subs	r0, r0, r6
 800704a:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800704e:	6823      	ldr	r3, [r4, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007050:	d3f3      	bcc.n	800703a <HAL_UART_Init+0x31a>
 8007052:	e7e0      	b.n	8007016 <HAL_UART_Init+0x2f6>
    UART_AdvFeatureConfig(huart);
 8007054:	4620      	mov	r0, r4
 8007056:	f7ff fe0b 	bl	8006c70 <UART_AdvFeatureConfig>
 800705a:	e702      	b.n	8006e62 <HAL_UART_Init+0x142>
 800705c:	cfff69f3 	.word	0xcfff69f3
 8007060:	40008000 	.word	0x40008000
 8007064:	40013800 	.word	0x40013800
 8007068:	40004400 	.word	0x40004400
 800706c:	40004800 	.word	0x40004800
 8007070:	40004c00 	.word	0x40004c00
 8007074:	40005000 	.word	0x40005000
 8007078:	40021000 	.word	0x40021000
 800707c:	00f42400 	.word	0x00f42400
    switch (clocksource)
 8007080:	2b08      	cmp	r3, #8
 8007082:	f63f aebf 	bhi.w	8006e04 <HAL_UART_Init+0xe4>
 8007086:	a201      	add	r2, pc, #4	; (adr r2, 800708c <HAL_UART_Init+0x36c>)
 8007088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800708c:	0800727f 	.word	0x0800727f
 8007090:	08007189 	.word	0x08007189
 8007094:	0800728b 	.word	0x0800728b
 8007098:	08006e05 	.word	0x08006e05
 800709c:	08007271 	.word	0x08007271
 80070a0:	08006e05 	.word	0x08006e05
 80070a4:	08006e05 	.word	0x08006e05
 80070a8:	08006e05 	.word	0x08006e05
 80070ac:	08007215 	.word	0x08007215
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070b0:	689a      	ldr	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070b2:	48c5      	ldr	r0, [pc, #788]	; (80073c8 <HAL_UART_Init+0x6a8>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070b4:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 80070b8:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 80070bc:	4332      	orrs	r2, r6
 80070be:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80070c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80070c4:	f022 020f 	bic.w	r2, r2, #15
 80070c8:	430a      	orrs	r2, r1
 80070ca:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070cc:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80070d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80070d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070d8:	f000 81c1 	beq.w	800745e <HAL_UART_Init+0x73e>
 80070dc:	f240 81ab 	bls.w	8007436 <HAL_UART_Init+0x716>
 80070e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070e4:	f000 8090 	beq.w	8007208 <HAL_UART_Init+0x4e8>
 80070e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070ec:	f47f ae8a 	bne.w	8006e04 <HAL_UART_Init+0xe4>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80070f0:	2900      	cmp	r1, #0
 80070f2:	f040 8214 	bne.w	800751e <HAL_UART_Init+0x7fe>
 80070f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070fa:	2108      	movs	r1, #8
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 80070fc:	6862      	ldr	r2, [r4, #4]
 80070fe:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 8007102:	4298      	cmp	r0, r3
 8007104:	f63f ae7e 	bhi.w	8006e04 <HAL_UART_Init+0xe4>
 8007108:	ebb3 3f02 	cmp.w	r3, r2, lsl #12
 800710c:	f63f ae7a 	bhi.w	8006e04 <HAL_UART_Init+0xe4>
        switch (clocksource)
 8007110:	2908      	cmp	r1, #8
 8007112:	f63f ae77 	bhi.w	8006e04 <HAL_UART_Init+0xe4>
 8007116:	a301      	add	r3, pc, #4	; (adr r3, 800711c <HAL_UART_Init+0x3fc>)
 8007118:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800711c:	080073bb 	.word	0x080073bb
 8007120:	08006e05 	.word	0x08006e05
 8007124:	08007361 	.word	0x08007361
 8007128:	08006e05 	.word	0x08006e05
 800712c:	080072dd 	.word	0x080072dd
 8007130:	08006e05 	.word	0x08006e05
 8007134:	08006e05 	.word	0x08006e05
 8007138:	08006e05 	.word	0x08006e05
 800713c:	080073e9 	.word	0x080073e9
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007140:	4ba1      	ldr	r3, [pc, #644]	; (80073c8 <HAL_UART_Init+0x6a8>)
 8007142:	4aa2      	ldr	r2, [pc, #648]	; (80073cc <HAL_UART_Init+0x6ac>)
 8007144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007148:	f003 0303 	and.w	r3, r3, #3
 800714c:	5cd3      	ldrb	r3, [r2, r3]
 800714e:	e636      	b.n	8006dbe <HAL_UART_Init+0x9e>
 8007150:	4b9d      	ldr	r3, [pc, #628]	; (80073c8 <HAL_UART_Init+0x6a8>)
 8007152:	4a9f      	ldr	r2, [pc, #636]	; (80073d0 <HAL_UART_Init+0x6b0>)
 8007154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007158:	f003 030c 	and.w	r3, r3, #12
 800715c:	5cd3      	ldrb	r3, [r2, r3]
 800715e:	e62e      	b.n	8006dbe <HAL_UART_Init+0x9e>
    return HAL_ERROR;
 8007160:	2001      	movs	r0, #1
 8007162:	4770      	bx	lr
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007164:	4b9b      	ldr	r3, [pc, #620]	; (80073d4 <HAL_UART_Init+0x6b4>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007166:	6862      	ldr	r2, [r4, #4]
 8007168:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800716c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007170:	b29b      	uxth	r3, r3
 8007172:	e664      	b.n	8006e3e <HAL_UART_Init+0x11e>
 8007174:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007178:	e7f5      	b.n	8007166 <HAL_UART_Init+0x446>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800717a:	2b80      	cmp	r3, #128	; 0x80
 800717c:	f43f af13 	beq.w	8006fa6 <HAL_UART_Init+0x286>
 8007180:	2bc0      	cmp	r3, #192	; 0xc0
 8007182:	f43f aea0 	beq.w	8006ec6 <HAL_UART_Init+0x1a6>
 8007186:	e63d      	b.n	8006e04 <HAL_UART_Init+0xe4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007188:	f7fd fc2a 	bl	80049e0 <HAL_RCC_GetPCLK2Freq>
 800718c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800718e:	2b00      	cmp	r3, #0
 8007190:	d073      	beq.n	800727a <HAL_UART_Init+0x55a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007192:	2b01      	cmp	r3, #1
 8007194:	f000 8177 	beq.w	8007486 <HAL_UART_Init+0x766>
 8007198:	2b02      	cmp	r3, #2
 800719a:	f000 8209 	beq.w	80075b0 <HAL_UART_Init+0x890>
 800719e:	2b03      	cmp	r3, #3
 80071a0:	f000 820f 	beq.w	80075c2 <HAL_UART_Init+0x8a2>
 80071a4:	2b04      	cmp	r3, #4
 80071a6:	f000 821c 	beq.w	80075e2 <HAL_UART_Init+0x8c2>
 80071aa:	2b05      	cmp	r3, #5
 80071ac:	f000 8220 	beq.w	80075f0 <HAL_UART_Init+0x8d0>
 80071b0:	2b06      	cmp	r3, #6
 80071b2:	f000 8245 	beq.w	8007640 <HAL_UART_Init+0x920>
 80071b6:	2b07      	cmp	r3, #7
 80071b8:	f000 8240 	beq.w	800763c <HAL_UART_Init+0x91c>
 80071bc:	2b08      	cmp	r3, #8
 80071be:	f000 825b 	beq.w	8007678 <HAL_UART_Init+0x958>
 80071c2:	2b09      	cmp	r3, #9
 80071c4:	f000 82a9 	beq.w	800771a <HAL_UART_Init+0x9fa>
 80071c8:	2b0a      	cmp	r3, #10
 80071ca:	f000 828a 	beq.w	80076e2 <HAL_UART_Init+0x9c2>
 80071ce:	2b0b      	cmp	r3, #11
 80071d0:	bf14      	ite	ne
 80071d2:	2301      	movne	r3, #1
 80071d4:	f44f 7380 	moveq.w	r3, #256	; 0x100
 80071d8:	6861      	ldr	r1, [r4, #4]
 80071da:	fbb0 f2f3 	udiv	r2, r0, r3
 80071de:	084b      	lsrs	r3, r1, #1
 80071e0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80071e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80071e8:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071ea:	f1a3 0110 	sub.w	r1, r3, #16
 80071ee:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80071f2:	4291      	cmp	r1, r2
 80071f4:	f63f ae06 	bhi.w	8006e04 <HAL_UART_Init+0xe4>
      brrtemp = usartdiv & 0xFFF0U;
 80071f8:	f023 020f 	bic.w	r2, r3, #15
      huart->Instance->BRR = brrtemp;
 80071fc:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071fe:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8007202:	4313      	orrs	r3, r2
 8007204:	60cb      	str	r3, [r1, #12]
 8007206:	e622      	b.n	8006e4e <HAL_UART_Init+0x12e>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007208:	2900      	cmp	r1, #0
 800720a:	f040 813e 	bne.w	800748a <HAL_UART_Init+0x76a>
 800720e:	4b71      	ldr	r3, [pc, #452]	; (80073d4 <HAL_UART_Init+0x6b4>)
 8007210:	2102      	movs	r1, #2
 8007212:	e773      	b.n	80070fc <HAL_UART_Init+0x3dc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007214:	2d00      	cmp	r5, #0
 8007216:	f000 8131 	beq.w	800747c <HAL_UART_Init+0x75c>
 800721a:	2d01      	cmp	r5, #1
 800721c:	f000 81dc 	beq.w	80075d8 <HAL_UART_Init+0x8b8>
 8007220:	2d02      	cmp	r5, #2
 8007222:	f000 81e9 	beq.w	80075f8 <HAL_UART_Init+0x8d8>
 8007226:	2d03      	cmp	r5, #3
 8007228:	f000 8205 	beq.w	8007636 <HAL_UART_Init+0x916>
 800722c:	2d04      	cmp	r5, #4
 800722e:	f000 8228 	beq.w	8007682 <HAL_UART_Init+0x962>
 8007232:	2d05      	cmp	r5, #5
 8007234:	f000 8233 	beq.w	800769e <HAL_UART_Init+0x97e>
 8007238:	2d06      	cmp	r5, #6
 800723a:	f000 8261 	beq.w	8007700 <HAL_UART_Init+0x9e0>
 800723e:	2d07      	cmp	r5, #7
 8007240:	f000 825b 	beq.w	80076fa <HAL_UART_Init+0x9da>
 8007244:	2d08      	cmp	r5, #8
 8007246:	f000 826f 	beq.w	8007728 <HAL_UART_Init+0xa08>
 800724a:	2d09      	cmp	r5, #9
 800724c:	f000 82f7 	beq.w	800783e <HAL_UART_Init+0xb1e>
 8007250:	2d0a      	cmp	r5, #10
 8007252:	f000 82f9 	beq.w	8007848 <HAL_UART_Init+0xb28>
 8007256:	2d0b      	cmp	r5, #11
 8007258:	bf14      	ite	ne
 800725a:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 800725e:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8007262:	6862      	ldr	r2, [r4, #4]
 8007264:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8007268:	fbb3 f3f2 	udiv	r3, r3, r2
 800726c:	b29b      	uxth	r3, r3
 800726e:	e7bc      	b.n	80071ea <HAL_UART_Init+0x4ca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007270:	f7fc fed8 	bl	8004024 <HAL_RCC_GetSysClockFreq>
 8007274:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007276:	2b00      	cmp	r3, #0
 8007278:	d18b      	bne.n	8007192 <HAL_UART_Init+0x472>
 800727a:	2301      	movs	r3, #1
 800727c:	e7ac      	b.n	80071d8 <HAL_UART_Init+0x4b8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800727e:	f7fd fb9d 	bl	80049bc <HAL_RCC_GetPCLK1Freq>
 8007282:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007284:	2b00      	cmp	r3, #0
 8007286:	d0f8      	beq.n	800727a <HAL_UART_Init+0x55a>
 8007288:	e783      	b.n	8007192 <HAL_UART_Init+0x472>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800728a:	2d00      	cmp	r5, #0
 800728c:	f000 80f9 	beq.w	8007482 <HAL_UART_Init+0x762>
 8007290:	2d01      	cmp	r5, #1
 8007292:	f000 81a4 	beq.w	80075de <HAL_UART_Init+0x8be>
 8007296:	2d02      	cmp	r5, #2
 8007298:	f000 81ac 	beq.w	80075f4 <HAL_UART_Init+0x8d4>
 800729c:	2d03      	cmp	r5, #3
 800729e:	f000 81d1 	beq.w	8007644 <HAL_UART_Init+0x924>
 80072a2:	2d04      	cmp	r5, #4
 80072a4:	f000 81e3 	beq.w	800766e <HAL_UART_Init+0x94e>
 80072a8:	2d05      	cmp	r5, #5
 80072aa:	f000 81f6 	beq.w	800769a <HAL_UART_Init+0x97a>
 80072ae:	2d06      	cmp	r5, #6
 80072b0:	f000 8221 	beq.w	80076f6 <HAL_UART_Init+0x9d6>
 80072b4:	2d07      	cmp	r5, #7
 80072b6:	f000 821c 	beq.w	80076f2 <HAL_UART_Init+0x9d2>
 80072ba:	2d08      	cmp	r5, #8
 80072bc:	f000 8242 	beq.w	8007744 <HAL_UART_Init+0xa24>
 80072c0:	2d09      	cmp	r5, #9
 80072c2:	f000 829f 	beq.w	8007804 <HAL_UART_Init+0xae4>
 80072c6:	2d0a      	cmp	r5, #10
 80072c8:	f000 82b3 	beq.w	8007832 <HAL_UART_Init+0xb12>
 80072cc:	4b42      	ldr	r3, [pc, #264]	; (80073d8 <HAL_UART_Init+0x6b8>)
 80072ce:	4a43      	ldr	r2, [pc, #268]	; (80073dc <HAL_UART_Init+0x6bc>)
 80072d0:	2d0b      	cmp	r5, #11
 80072d2:	bf08      	it	eq
 80072d4:	4613      	moveq	r3, r2
 80072d6:	e7c4      	b.n	8007262 <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072d8:	2308      	movs	r3, #8
 80072da:	e5a8      	b.n	8006e2e <HAL_UART_Init+0x10e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072dc:	f7fc fea2 	bl	8004024 <HAL_RCC_GetSysClockFreq>
 80072e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072e2:	b303      	cbz	r3, 8007326 <HAL_UART_Init+0x606>
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	f000 81c9 	beq.w	800767c <HAL_UART_Init+0x95c>
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	f000 81e4 	beq.w	80076b8 <HAL_UART_Init+0x998>
 80072f0:	2b03      	cmp	r3, #3
 80072f2:	f000 81ea 	beq.w	80076ca <HAL_UART_Init+0x9aa>
 80072f6:	2b04      	cmp	r3, #4
 80072f8:	f000 822e 	beq.w	8007758 <HAL_UART_Init+0xa38>
 80072fc:	2b05      	cmp	r3, #5
 80072fe:	f000 821e 	beq.w	800773e <HAL_UART_Init+0xa1e>
 8007302:	2b06      	cmp	r3, #6
 8007304:	f000 8218 	beq.w	8007738 <HAL_UART_Init+0xa18>
 8007308:	2b07      	cmp	r3, #7
 800730a:	f000 8212 	beq.w	8007732 <HAL_UART_Init+0xa12>
 800730e:	2b08      	cmp	r3, #8
 8007310:	f000 82ab 	beq.w	800786a <HAL_UART_Init+0xb4a>
 8007314:	2b09      	cmp	r3, #9
 8007316:	f000 82a5 	beq.w	8007864 <HAL_UART_Init+0xb44>
 800731a:	2b0a      	cmp	r3, #10
 800731c:	f000 829f 	beq.w	800785e <HAL_UART_Init+0xb3e>
 8007320:	2b0b      	cmp	r3, #11
 8007322:	f000 82b0 	beq.w	8007886 <HAL_UART_Init+0xb66>
 8007326:	2201      	movs	r2, #1
 8007328:	2300      	movs	r3, #0
 800732a:	2100      	movs	r1, #0
 800732c:	f7f9 fc68 	bl	8000c00 <__aeabi_uldivmod>
 8007330:	6862      	ldr	r2, [r4, #4]
 8007332:	020f      	lsls	r7, r1, #8
 8007334:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8007338:	0206      	lsls	r6, r0, #8
 800733a:	0850      	lsrs	r0, r2, #1
 800733c:	eb16 0b00 	adds.w	fp, r6, r0
 8007340:	f147 0c00 	adc.w	ip, r7, #0
 8007344:	4658      	mov	r0, fp
 8007346:	4661      	mov	r1, ip
 8007348:	2300      	movs	r3, #0
 800734a:	f7f9 fc59 	bl	8000c00 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800734e:	4b24      	ldr	r3, [pc, #144]	; (80073e0 <HAL_UART_Init+0x6c0>)
 8007350:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8007354:	429a      	cmp	r2, r3
 8007356:	f63f ad55 	bhi.w	8006e04 <HAL_UART_Init+0xe4>
          huart->Instance->BRR = usartdiv;
 800735a:	6823      	ldr	r3, [r4, #0]
 800735c:	60d8      	str	r0, [r3, #12]
 800735e:	e576      	b.n	8006e4e <HAL_UART_Init+0x12e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007360:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007362:	b303      	cbz	r3, 80073a6 <HAL_UART_Init+0x686>
 8007364:	2b01      	cmp	r3, #1
 8007366:	f000 81ce 	beq.w	8007706 <HAL_UART_Init+0x9e6>
 800736a:	2b02      	cmp	r3, #2
 800736c:	f000 821a 	beq.w	80077a4 <HAL_UART_Init+0xa84>
 8007370:	2b03      	cmp	r3, #3
 8007372:	f000 8223 	beq.w	80077bc <HAL_UART_Init+0xa9c>
 8007376:	2b04      	cmp	r3, #4
 8007378:	f000 8230 	beq.w	80077dc <HAL_UART_Init+0xabc>
 800737c:	2b05      	cmp	r3, #5
 800737e:	f000 823e 	beq.w	80077fe <HAL_UART_Init+0xade>
 8007382:	2b06      	cmp	r3, #6
 8007384:	f000 8237 	beq.w	80077f6 <HAL_UART_Init+0xad6>
 8007388:	2b07      	cmp	r3, #7
 800738a:	f000 8231 	beq.w	80077f0 <HAL_UART_Init+0xad0>
 800738e:	2b08      	cmp	r3, #8
 8007390:	f000 8276 	beq.w	8007880 <HAL_UART_Init+0xb60>
 8007394:	2b09      	cmp	r3, #9
 8007396:	f000 8280 	beq.w	800789a <HAL_UART_Init+0xb7a>
 800739a:	2b0a      	cmp	r3, #10
 800739c:	f000 827a 	beq.w	8007894 <HAL_UART_Init+0xb74>
 80073a0:	2b0b      	cmp	r3, #11
 80073a2:	f000 8274 	beq.w	800788e <HAL_UART_Init+0xb6e>
 80073a6:	480f      	ldr	r0, [pc, #60]	; (80073e4 <HAL_UART_Init+0x6c4>)
 80073a8:	2100      	movs	r1, #0
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073aa:	0853      	lsrs	r3, r2, #1
 80073ac:	18c0      	adds	r0, r0, r3
 80073ae:	f141 0100 	adc.w	r1, r1, #0
 80073b2:	2300      	movs	r3, #0
 80073b4:	f7f9 fc24 	bl	8000c00 <__aeabi_uldivmod>
 80073b8:	e7c9      	b.n	800734e <HAL_UART_Init+0x62e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073ba:	f7fd faff 	bl	80049bc <HAL_RCC_GetPCLK1Freq>
 80073be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d0b0      	beq.n	8007326 <HAL_UART_Init+0x606>
 80073c4:	e78e      	b.n	80072e4 <HAL_UART_Init+0x5c4>
 80073c6:	bf00      	nop
 80073c8:	40021000 	.word	0x40021000
 80073cc:	08017160 	.word	0x08017160
 80073d0:	08017164 	.word	0x08017164
 80073d4:	00f42400 	.word	0x00f42400
 80073d8:	01e84800 	.word	0x01e84800
 80073dc:	0001e848 	.word	0x0001e848
 80073e0:	000ffcff 	.word	0x000ffcff
 80073e4:	f4240000 	.word	0xf4240000
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073ea:	b303      	cbz	r3, 800742e <HAL_UART_Init+0x70e>
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	f000 818d 	beq.w	800770c <HAL_UART_Init+0x9ec>
 80073f2:	2b02      	cmp	r3, #2
 80073f4:	f000 81d9 	beq.w	80077aa <HAL_UART_Init+0xa8a>
 80073f8:	2b03      	cmp	r3, #3
 80073fa:	f000 81da 	beq.w	80077b2 <HAL_UART_Init+0xa92>
 80073fe:	2b04      	cmp	r3, #4
 8007400:	f000 81f2 	beq.w	80077e8 <HAL_UART_Init+0xac8>
 8007404:	2b05      	cmp	r3, #5
 8007406:	f000 81e4 	beq.w	80077d2 <HAL_UART_Init+0xab2>
 800740a:	2b06      	cmp	r3, #6
 800740c:	f000 81de 	beq.w	80077cc <HAL_UART_Init+0xaac>
 8007410:	2b07      	cmp	r3, #7
 8007412:	f000 81d7 	beq.w	80077c4 <HAL_UART_Init+0xaa4>
 8007416:	2b08      	cmp	r3, #8
 8007418:	f000 822e 	beq.w	8007878 <HAL_UART_Init+0xb58>
 800741c:	2b09      	cmp	r3, #9
 800741e:	f000 821a 	beq.w	8007856 <HAL_UART_Init+0xb36>
 8007422:	2b0a      	cmp	r3, #10
 8007424:	f000 8213 	beq.w	800784e <HAL_UART_Init+0xb2e>
 8007428:	2b0b      	cmp	r3, #11
 800742a:	f000 8221 	beq.w	8007870 <HAL_UART_Init+0xb50>
 800742e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8007432:	2100      	movs	r1, #0
 8007434:	e7b9      	b.n	80073aa <HAL_UART_Init+0x68a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007436:	2b00      	cmp	r3, #0
 8007438:	f47f ace4 	bne.w	8006e04 <HAL_UART_Init+0xe4>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800743c:	f7fd fabe 	bl	80049bc <HAL_RCC_GetPCLK1Freq>
 8007440:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007442:	2b00      	cmp	r3, #0
 8007444:	d147      	bne.n	80074d6 <HAL_UART_Init+0x7b6>
 8007446:	2301      	movs	r3, #1
 8007448:	fbb0 f3f3 	udiv	r3, r0, r3
 800744c:	2100      	movs	r1, #0
    if (lpuart_ker_ck_pres != 0U)
 800744e:	2b00      	cmp	r3, #0
 8007450:	f47f ae54 	bne.w	80070fc <HAL_UART_Init+0x3dc>
 8007454:	e4fb      	b.n	8006e4e <HAL_UART_Init+0x12e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007456:	2302      	movs	r3, #2
 8007458:	e4e9      	b.n	8006e2e <HAL_UART_Init+0x10e>
 800745a:	2304      	movs	r3, #4
 800745c:	e4e7      	b.n	8006e2e <HAL_UART_Init+0x10e>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800745e:	f7fc fde1 	bl	8004024 <HAL_RCC_GetSysClockFreq>
 8007462:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007464:	2b00      	cmp	r3, #0
 8007466:	d17d      	bne.n	8007564 <HAL_UART_Init+0x844>
 8007468:	2301      	movs	r3, #1
 800746a:	fbb0 f3f3 	udiv	r3, r0, r3
 800746e:	2104      	movs	r1, #4
    if (lpuart_ker_ck_pres != 0U)
 8007470:	2b00      	cmp	r3, #0
 8007472:	f47f ae43 	bne.w	80070fc <HAL_UART_Init+0x3dc>
 8007476:	e4ea      	b.n	8006e4e <HAL_UART_Init+0x12e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007478:	2306      	movs	r3, #6
 800747a:	e4d8      	b.n	8006e2e <HAL_UART_Init+0x10e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800747c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007480:	e6ef      	b.n	8007262 <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007482:	4bb9      	ldr	r3, [pc, #740]	; (8007768 <HAL_UART_Init+0xa48>)
 8007484:	e6ed      	b.n	8007262 <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007486:	2302      	movs	r3, #2
 8007488:	e6a6      	b.n	80071d8 <HAL_UART_Init+0x4b8>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800748a:	2901      	cmp	r1, #1
 800748c:	f000 80b7 	beq.w	80075fe <HAL_UART_Init+0x8de>
 8007490:	2902      	cmp	r1, #2
 8007492:	f000 80ca 	beq.w	800762a <HAL_UART_Init+0x90a>
 8007496:	2903      	cmp	r1, #3
 8007498:	f000 80e0 	beq.w	800765c <HAL_UART_Init+0x93c>
 800749c:	2904      	cmp	r1, #4
 800749e:	f000 8103 	beq.w	80076a8 <HAL_UART_Init+0x988>
 80074a2:	2905      	cmp	r1, #5
 80074a4:	f000 8105 	beq.w	80076b2 <HAL_UART_Init+0x992>
 80074a8:	2906      	cmp	r1, #6
 80074aa:	f000 8133 	beq.w	8007714 <HAL_UART_Init+0x9f4>
 80074ae:	2907      	cmp	r1, #7
 80074b0:	f000 814f 	beq.w	8007752 <HAL_UART_Init+0xa32>
 80074b4:	2908      	cmp	r1, #8
 80074b6:	f000 81b9 	beq.w	800782c <HAL_UART_Init+0xb0c>
 80074ba:	2909      	cmp	r1, #9
 80074bc:	f000 81b3 	beq.w	8007826 <HAL_UART_Init+0xb06>
 80074c0:	290a      	cmp	r1, #10
 80074c2:	f000 81ad 	beq.w	8007820 <HAL_UART_Init+0xb00>
 80074c6:	4ba9      	ldr	r3, [pc, #676]	; (800776c <HAL_UART_Init+0xa4c>)
 80074c8:	f24f 4224 	movw	r2, #62500	; 0xf424
 80074cc:	290b      	cmp	r1, #11
 80074ce:	bf08      	it	eq
 80074d0:	4613      	moveq	r3, r2
 80074d2:	2102      	movs	r1, #2
 80074d4:	e612      	b.n	80070fc <HAL_UART_Init+0x3dc>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	f000 8096 	beq.w	8007608 <HAL_UART_Init+0x8e8>
 80074dc:	2b02      	cmp	r3, #2
 80074de:	f000 80a8 	beq.w	8007632 <HAL_UART_Init+0x912>
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	f000 80b8 	beq.w	8007658 <HAL_UART_Init+0x938>
 80074e8:	2b04      	cmp	r3, #4
 80074ea:	f000 80db 	beq.w	80076a4 <HAL_UART_Init+0x984>
 80074ee:	2b05      	cmp	r3, #5
 80074f0:	f000 80f3 	beq.w	80076da <HAL_UART_Init+0x9ba>
 80074f4:	2b06      	cmp	r3, #6
 80074f6:	f000 80f2 	beq.w	80076de <HAL_UART_Init+0x9be>
 80074fa:	2b07      	cmp	r3, #7
 80074fc:	f000 8117 	beq.w	800772e <HAL_UART_Init+0xa0e>
 8007500:	2b08      	cmp	r3, #8
 8007502:	f000 819f 	beq.w	8007844 <HAL_UART_Init+0xb24>
 8007506:	2b09      	cmp	r3, #9
 8007508:	f000 8180 	beq.w	800780c <HAL_UART_Init+0xaec>
 800750c:	2b0a      	cmp	r3, #10
 800750e:	f000 817b 	beq.w	8007808 <HAL_UART_Init+0xae8>
 8007512:	2b0b      	cmp	r3, #11
 8007514:	bf14      	ite	ne
 8007516:	2301      	movne	r3, #1
 8007518:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800751c:	e794      	b.n	8007448 <HAL_UART_Init+0x728>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800751e:	2901      	cmp	r1, #1
 8007520:	d074      	beq.n	800760c <HAL_UART_Init+0x8ec>
 8007522:	2902      	cmp	r1, #2
 8007524:	d07d      	beq.n	8007622 <HAL_UART_Init+0x902>
 8007526:	2903      	cmp	r1, #3
 8007528:	f000 809d 	beq.w	8007666 <HAL_UART_Init+0x946>
 800752c:	2904      	cmp	r1, #4
 800752e:	f000 80b0 	beq.w	8007692 <HAL_UART_Init+0x972>
 8007532:	2905      	cmp	r1, #5
 8007534:	f000 80c3 	beq.w	80076be <HAL_UART_Init+0x99e>
 8007538:	2906      	cmp	r1, #6
 800753a:	f000 80d4 	beq.w	80076e6 <HAL_UART_Init+0x9c6>
 800753e:	2907      	cmp	r1, #7
 8007540:	f000 810d 	beq.w	800775e <HAL_UART_Init+0xa3e>
 8007544:	2908      	cmp	r1, #8
 8007546:	f000 814c 	beq.w	80077e2 <HAL_UART_Init+0xac2>
 800754a:	2909      	cmp	r1, #9
 800754c:	f000 8164 	beq.w	8007818 <HAL_UART_Init+0xaf8>
 8007550:	290a      	cmp	r1, #10
 8007552:	f000 815d 	beq.w	8007810 <HAL_UART_Init+0xaf0>
 8007556:	290b      	cmp	r1, #11
 8007558:	bf14      	ite	ne
 800755a:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 800755e:	2380      	moveq	r3, #128	; 0x80
 8007560:	2108      	movs	r1, #8
 8007562:	e5cb      	b.n	80070fc <HAL_UART_Init+0x3dc>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007564:	2b01      	cmp	r3, #1
 8007566:	d04d      	beq.n	8007604 <HAL_UART_Init+0x8e4>
 8007568:	2b02      	cmp	r3, #2
 800756a:	d060      	beq.n	800762e <HAL_UART_Init+0x90e>
 800756c:	2b03      	cmp	r3, #3
 800756e:	d078      	beq.n	8007662 <HAL_UART_Init+0x942>
 8007570:	2b04      	cmp	r3, #4
 8007572:	f000 809c 	beq.w	80076ae <HAL_UART_Init+0x98e>
 8007576:	2b05      	cmp	r3, #5
 8007578:	f000 80a5 	beq.w	80076c6 <HAL_UART_Init+0x9a6>
 800757c:	2b06      	cmp	r3, #6
 800757e:	f000 80b6 	beq.w	80076ee <HAL_UART_Init+0x9ce>
 8007582:	2b07      	cmp	r3, #7
 8007584:	f000 8118 	beq.w	80077b8 <HAL_UART_Init+0xa98>
 8007588:	2b08      	cmp	r3, #8
 800758a:	f000 8125 	beq.w	80077d8 <HAL_UART_Init+0xab8>
 800758e:	2b09      	cmp	r3, #9
 8007590:	f000 8153 	beq.w	800783a <HAL_UART_Init+0xb1a>
 8007594:	2b0a      	cmp	r3, #10
 8007596:	f000 814e 	beq.w	8007836 <HAL_UART_Init+0xb16>
 800759a:	2b0b      	cmp	r3, #11
 800759c:	bf14      	ite	ne
 800759e:	2301      	movne	r3, #1
 80075a0:	f44f 7380 	moveq.w	r3, #256	; 0x100
 80075a4:	e761      	b.n	800746a <HAL_UART_Init+0x74a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075a6:	4b72      	ldr	r3, [pc, #456]	; (8007770 <HAL_UART_Init+0xa50>)
 80075a8:	e5dd      	b.n	8007166 <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80075ae:	e5da      	b.n	8007166 <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075b0:	2304      	movs	r3, #4
 80075b2:	e611      	b.n	80071d8 <HAL_UART_Init+0x4b8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075b4:	230a      	movs	r3, #10
 80075b6:	e43a      	b.n	8006e2e <HAL_UART_Init+0x10e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075b8:	4b6e      	ldr	r3, [pc, #440]	; (8007774 <HAL_UART_Init+0xa54>)
 80075ba:	e5d4      	b.n	8007166 <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80075c0:	e5d1      	b.n	8007166 <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075c2:	2306      	movs	r3, #6
 80075c4:	e608      	b.n	80071d8 <HAL_UART_Init+0x4b8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075c6:	230c      	movs	r3, #12
 80075c8:	e431      	b.n	8006e2e <HAL_UART_Init+0x10e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075ca:	f241 5355 	movw	r3, #5461	; 0x1555
 80075ce:	e5ca      	b.n	8007166 <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075d0:	4b69      	ldr	r3, [pc, #420]	; (8007778 <HAL_UART_Init+0xa58>)
 80075d2:	e5c8      	b.n	8007166 <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075d4:	2310      	movs	r3, #16
 80075d6:	e42a      	b.n	8006e2e <HAL_UART_Init+0x10e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075dc:	e641      	b.n	8007262 <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075de:	4b63      	ldr	r3, [pc, #396]	; (800776c <HAL_UART_Init+0xa4c>)
 80075e0:	e63f      	b.n	8007262 <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075e2:	2308      	movs	r3, #8
 80075e4:	e5f8      	b.n	80071d8 <HAL_UART_Init+0x4b8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075ea:	e5bc      	b.n	8007166 <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075ec:	4b63      	ldr	r3, [pc, #396]	; (800777c <HAL_UART_Init+0xa5c>)
 80075ee:	e5ba      	b.n	8007166 <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075f0:	230a      	movs	r3, #10
 80075f2:	e5f1      	b.n	80071d8 <HAL_UART_Init+0x4b8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075f4:	4b5e      	ldr	r3, [pc, #376]	; (8007770 <HAL_UART_Init+0xa50>)
 80075f6:	e634      	b.n	8007262 <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80075fc:	e631      	b.n	8007262 <HAL_UART_Init+0x542>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80075fe:	4b5c      	ldr	r3, [pc, #368]	; (8007770 <HAL_UART_Init+0xa50>)
 8007600:	2102      	movs	r1, #2
 8007602:	e57b      	b.n	80070fc <HAL_UART_Init+0x3dc>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007604:	2302      	movs	r3, #2
 8007606:	e730      	b.n	800746a <HAL_UART_Init+0x74a>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007608:	2302      	movs	r3, #2
 800760a:	e71d      	b.n	8007448 <HAL_UART_Init+0x728>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800760c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007610:	2108      	movs	r1, #8
 8007612:	e573      	b.n	80070fc <HAL_UART_Init+0x3dc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007614:	2320      	movs	r3, #32
 8007616:	e40a      	b.n	8006e2e <HAL_UART_Init+0x10e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007618:	f640 43cc 	movw	r3, #3276	; 0xccc
 800761c:	e5a3      	b.n	8007166 <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800761e:	4b58      	ldr	r3, [pc, #352]	; (8007780 <HAL_UART_Init+0xa60>)
 8007620:	e5a1      	b.n	8007166 <HAL_UART_Init+0x446>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007622:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007626:	2108      	movs	r1, #8
 8007628:	e568      	b.n	80070fc <HAL_UART_Init+0x3dc>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800762a:	4b52      	ldr	r3, [pc, #328]	; (8007774 <HAL_UART_Init+0xa54>)
 800762c:	e566      	b.n	80070fc <HAL_UART_Init+0x3dc>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800762e:	2304      	movs	r3, #4
 8007630:	e71b      	b.n	800746a <HAL_UART_Init+0x74a>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007632:	2304      	movs	r3, #4
 8007634:	e708      	b.n	8007448 <HAL_UART_Init+0x728>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007636:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800763a:	e612      	b.n	8007262 <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800763c:	2310      	movs	r3, #16
 800763e:	e5cb      	b.n	80071d8 <HAL_UART_Init+0x4b8>
 8007640:	230c      	movs	r3, #12
 8007642:	e5c9      	b.n	80071d8 <HAL_UART_Init+0x4b8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007644:	4b4f      	ldr	r3, [pc, #316]	; (8007784 <HAL_UART_Init+0xa64>)
 8007646:	e60c      	b.n	8007262 <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007648:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800764c:	e58b      	b.n	8007166 <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800764e:	4b4e      	ldr	r3, [pc, #312]	; (8007788 <HAL_UART_Init+0xa68>)
 8007650:	e589      	b.n	8007166 <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007652:	2340      	movs	r3, #64	; 0x40
 8007654:	f7ff bbeb 	b.w	8006e2e <HAL_UART_Init+0x10e>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007658:	2306      	movs	r3, #6
 800765a:	e6f5      	b.n	8007448 <HAL_UART_Init+0x728>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800765c:	4b46      	ldr	r3, [pc, #280]	; (8007778 <HAL_UART_Init+0xa58>)
 800765e:	2102      	movs	r1, #2
 8007660:	e54c      	b.n	80070fc <HAL_UART_Init+0x3dc>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007662:	2306      	movs	r3, #6
 8007664:	e701      	b.n	800746a <HAL_UART_Init+0x74a>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007666:	f241 5355 	movw	r3, #5461	; 0x1555
 800766a:	2108      	movs	r1, #8
 800766c:	e546      	b.n	80070fc <HAL_UART_Init+0x3dc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800766e:	4b41      	ldr	r3, [pc, #260]	; (8007774 <HAL_UART_Init+0xa54>)
 8007670:	e5f7      	b.n	8007262 <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007672:	2380      	movs	r3, #128	; 0x80
 8007674:	f7ff bbdb 	b.w	8006e2e <HAL_UART_Init+0x10e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007678:	2320      	movs	r3, #32
 800767a:	e5ad      	b.n	80071d8 <HAL_UART_Init+0x4b8>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800767c:	2202      	movs	r2, #2
 800767e:	2300      	movs	r3, #0
 8007680:	e653      	b.n	800732a <HAL_UART_Init+0x60a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007682:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007686:	e5ec      	b.n	8007262 <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007688:	4b40      	ldr	r3, [pc, #256]	; (800778c <HAL_UART_Init+0xa6c>)
 800768a:	e56c      	b.n	8007166 <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800768c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007690:	e569      	b.n	8007166 <HAL_UART_Init+0x446>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007696:	2108      	movs	r1, #8
 8007698:	e530      	b.n	80070fc <HAL_UART_Init+0x3dc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800769a:	4b3d      	ldr	r3, [pc, #244]	; (8007790 <HAL_UART_Init+0xa70>)
 800769c:	e5e1      	b.n	8007262 <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800769e:	f641 1398 	movw	r3, #6552	; 0x1998
 80076a2:	e5de      	b.n	8007262 <HAL_UART_Init+0x542>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80076a4:	2308      	movs	r3, #8
 80076a6:	e6cf      	b.n	8007448 <HAL_UART_Init+0x728>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80076a8:	4b34      	ldr	r3, [pc, #208]	; (800777c <HAL_UART_Init+0xa5c>)
 80076aa:	2102      	movs	r1, #2
 80076ac:	e526      	b.n	80070fc <HAL_UART_Init+0x3dc>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80076ae:	2308      	movs	r3, #8
 80076b0:	e6db      	b.n	800746a <HAL_UART_Init+0x74a>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80076b2:	4b33      	ldr	r3, [pc, #204]	; (8007780 <HAL_UART_Init+0xa60>)
 80076b4:	2102      	movs	r1, #2
 80076b6:	e521      	b.n	80070fc <HAL_UART_Init+0x3dc>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076b8:	2204      	movs	r2, #4
 80076ba:	2300      	movs	r3, #0
 80076bc:	e635      	b.n	800732a <HAL_UART_Init+0x60a>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80076be:	f640 43cc 	movw	r3, #3276	; 0xccc
 80076c2:	2108      	movs	r1, #8
 80076c4:	e51a      	b.n	80070fc <HAL_UART_Init+0x3dc>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80076c6:	230a      	movs	r3, #10
 80076c8:	e6cf      	b.n	800746a <HAL_UART_Init+0x74a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076ca:	2206      	movs	r2, #6
 80076cc:	2300      	movs	r3, #0
 80076ce:	e62c      	b.n	800732a <HAL_UART_Init+0x60a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076d0:	4b30      	ldr	r3, [pc, #192]	; (8007794 <HAL_UART_Init+0xa74>)
 80076d2:	e548      	b.n	8007166 <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076d8:	e545      	b.n	8007166 <HAL_UART_Init+0x446>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80076da:	230a      	movs	r3, #10
 80076dc:	e6b4      	b.n	8007448 <HAL_UART_Init+0x728>
 80076de:	230c      	movs	r3, #12
 80076e0:	e6b2      	b.n	8007448 <HAL_UART_Init+0x728>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076e2:	2380      	movs	r3, #128	; 0x80
 80076e4:	e578      	b.n	80071d8 <HAL_UART_Init+0x4b8>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80076e6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80076ea:	2108      	movs	r1, #8
 80076ec:	e506      	b.n	80070fc <HAL_UART_Init+0x3dc>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80076ee:	230c      	movs	r3, #12
 80076f0:	e6bb      	b.n	800746a <HAL_UART_Init+0x74a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076f2:	4b22      	ldr	r3, [pc, #136]	; (800777c <HAL_UART_Init+0xa5c>)
 80076f4:	e5b5      	b.n	8007262 <HAL_UART_Init+0x542>
 80076f6:	4b20      	ldr	r3, [pc, #128]	; (8007778 <HAL_UART_Init+0xa58>)
 80076f8:	e5b3      	b.n	8007262 <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076fe:	e5b0      	b.n	8007262 <HAL_UART_Init+0x542>
 8007700:	f241 5354 	movw	r3, #5460	; 0x1554
 8007704:	e5ad      	b.n	8007262 <HAL_UART_Init+0x542>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007706:	4824      	ldr	r0, [pc, #144]	; (8007798 <HAL_UART_Init+0xa78>)
 8007708:	2100      	movs	r1, #0
 800770a:	e64e      	b.n	80073aa <HAL_UART_Init+0x68a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800770c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8007710:	2100      	movs	r1, #0
 8007712:	e64a      	b.n	80073aa <HAL_UART_Init+0x68a>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007714:	4b1c      	ldr	r3, [pc, #112]	; (8007788 <HAL_UART_Init+0xa68>)
 8007716:	2102      	movs	r1, #2
 8007718:	e4f0      	b.n	80070fc <HAL_UART_Init+0x3dc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800771a:	2340      	movs	r3, #64	; 0x40
 800771c:	e55c      	b.n	80071d8 <HAL_UART_Init+0x4b8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800771e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007722:	e520      	b.n	8007166 <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007724:	4b1d      	ldr	r3, [pc, #116]	; (800779c <HAL_UART_Init+0xa7c>)
 8007726:	e51e      	b.n	8007166 <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007728:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800772c:	e599      	b.n	8007262 <HAL_UART_Init+0x542>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800772e:	2310      	movs	r3, #16
 8007730:	e68a      	b.n	8007448 <HAL_UART_Init+0x728>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007732:	2210      	movs	r2, #16
 8007734:	2300      	movs	r3, #0
 8007736:	e5f8      	b.n	800732a <HAL_UART_Init+0x60a>
 8007738:	220c      	movs	r2, #12
 800773a:	2300      	movs	r3, #0
 800773c:	e5f5      	b.n	800732a <HAL_UART_Init+0x60a>
 800773e:	220a      	movs	r2, #10
 8007740:	2300      	movs	r3, #0
 8007742:	e5f2      	b.n	800732a <HAL_UART_Init+0x60a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007744:	4b11      	ldr	r3, [pc, #68]	; (800778c <HAL_UART_Init+0xa6c>)
 8007746:	e58c      	b.n	8007262 <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007748:	f44f 7380 	mov.w	r3, #256	; 0x100
 800774c:	e50b      	b.n	8007166 <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800774e:	4b14      	ldr	r3, [pc, #80]	; (80077a0 <HAL_UART_Init+0xa80>)
 8007750:	e509      	b.n	8007166 <HAL_UART_Init+0x446>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007752:	4b0e      	ldr	r3, [pc, #56]	; (800778c <HAL_UART_Init+0xa6c>)
 8007754:	2102      	movs	r1, #2
 8007756:	e4d1      	b.n	80070fc <HAL_UART_Init+0x3dc>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007758:	2208      	movs	r2, #8
 800775a:	2300      	movs	r3, #0
 800775c:	e5e5      	b.n	800732a <HAL_UART_Init+0x60a>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800775e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007762:	2108      	movs	r1, #8
 8007764:	e4ca      	b.n	80070fc <HAL_UART_Init+0x3dc>
 8007766:	bf00      	nop
 8007768:	01e84800 	.word	0x01e84800
 800776c:	00f42400 	.word	0x00f42400
 8007770:	007a1200 	.word	0x007a1200
 8007774:	003d0900 	.word	0x003d0900
 8007778:	0028b0aa 	.word	0x0028b0aa
 800777c:	001e8480 	.word	0x001e8480
 8007780:	00186a00 	.word	0x00186a00
 8007784:	00516154 	.word	0x00516154
 8007788:	00145855 	.word	0x00145855
 800778c:	000f4240 	.word	0x000f4240
 8007790:	0030d400 	.word	0x0030d400
 8007794:	0007a120 	.word	0x0007a120
 8007798:	7a120000 	.word	0x7a120000
 800779c:	0003d090 	.word	0x0003d090
 80077a0:	0001e848 	.word	0x0001e848
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077a4:	4842      	ldr	r0, [pc, #264]	; (80078b0 <HAL_UART_Init+0xb90>)
 80077a6:	2100      	movs	r1, #0
 80077a8:	e5ff      	b.n	80073aa <HAL_UART_Init+0x68a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077aa:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80077ae:	2100      	movs	r1, #0
 80077b0:	e5fb      	b.n	80073aa <HAL_UART_Init+0x68a>
 80077b2:	4840      	ldr	r0, [pc, #256]	; (80078b4 <HAL_UART_Init+0xb94>)
 80077b4:	2100      	movs	r1, #0
 80077b6:	e5f8      	b.n	80073aa <HAL_UART_Init+0x68a>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80077b8:	2310      	movs	r3, #16
 80077ba:	e656      	b.n	800746a <HAL_UART_Init+0x74a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077bc:	a138      	add	r1, pc, #224	; (adr r1, 80078a0 <HAL_UART_Init+0xb80>)
 80077be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077c2:	e5f2      	b.n	80073aa <HAL_UART_Init+0x68a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077c4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80077c8:	2100      	movs	r1, #0
 80077ca:	e5ee      	b.n	80073aa <HAL_UART_Init+0x68a>
 80077cc:	483a      	ldr	r0, [pc, #232]	; (80078b8 <HAL_UART_Init+0xb98>)
 80077ce:	2100      	movs	r1, #0
 80077d0:	e5eb      	b.n	80073aa <HAL_UART_Init+0x68a>
 80077d2:	483a      	ldr	r0, [pc, #232]	; (80078bc <HAL_UART_Init+0xb9c>)
 80077d4:	2100      	movs	r1, #0
 80077d6:	e5e8      	b.n	80073aa <HAL_UART_Init+0x68a>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80077d8:	2320      	movs	r3, #32
 80077da:	e646      	b.n	800746a <HAL_UART_Init+0x74a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077dc:	4838      	ldr	r0, [pc, #224]	; (80078c0 <HAL_UART_Init+0xba0>)
 80077de:	2100      	movs	r1, #0
 80077e0:	e5e3      	b.n	80073aa <HAL_UART_Init+0x68a>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80077e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077e6:	e489      	b.n	80070fc <HAL_UART_Init+0x3dc>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077e8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80077ec:	2100      	movs	r1, #0
 80077ee:	e5dc      	b.n	80073aa <HAL_UART_Init+0x68a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077f0:	4834      	ldr	r0, [pc, #208]	; (80078c4 <HAL_UART_Init+0xba4>)
 80077f2:	2100      	movs	r1, #0
 80077f4:	e5d9      	b.n	80073aa <HAL_UART_Init+0x68a>
 80077f6:	a12c      	add	r1, pc, #176	; (adr r1, 80078a8 <HAL_UART_Init+0xb88>)
 80077f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077fc:	e5d5      	b.n	80073aa <HAL_UART_Init+0x68a>
 80077fe:	4832      	ldr	r0, [pc, #200]	; (80078c8 <HAL_UART_Init+0xba8>)
 8007800:	2100      	movs	r1, #0
 8007802:	e5d2      	b.n	80073aa <HAL_UART_Init+0x68a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007804:	4b31      	ldr	r3, [pc, #196]	; (80078cc <HAL_UART_Init+0xbac>)
 8007806:	e52c      	b.n	8007262 <HAL_UART_Init+0x542>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007808:	2380      	movs	r3, #128	; 0x80
 800780a:	e61d      	b.n	8007448 <HAL_UART_Init+0x728>
 800780c:	2340      	movs	r3, #64	; 0x40
 800780e:	e61b      	b.n	8007448 <HAL_UART_Init+0x728>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007810:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007814:	2108      	movs	r1, #8
 8007816:	e471      	b.n	80070fc <HAL_UART_Init+0x3dc>
 8007818:	f44f 7300 	mov.w	r3, #512	; 0x200
 800781c:	2108      	movs	r1, #8
 800781e:	e46d      	b.n	80070fc <HAL_UART_Init+0x3dc>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007820:	4b2b      	ldr	r3, [pc, #172]	; (80078d0 <HAL_UART_Init+0xbb0>)
 8007822:	2102      	movs	r1, #2
 8007824:	e46a      	b.n	80070fc <HAL_UART_Init+0x3dc>
 8007826:	4b2b      	ldr	r3, [pc, #172]	; (80078d4 <HAL_UART_Init+0xbb4>)
 8007828:	2102      	movs	r1, #2
 800782a:	e467      	b.n	80070fc <HAL_UART_Init+0x3dc>
 800782c:	4b27      	ldr	r3, [pc, #156]	; (80078cc <HAL_UART_Init+0xbac>)
 800782e:	2102      	movs	r1, #2
 8007830:	e464      	b.n	80070fc <HAL_UART_Init+0x3dc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007832:	4b28      	ldr	r3, [pc, #160]	; (80078d4 <HAL_UART_Init+0xbb4>)
 8007834:	e515      	b.n	8007262 <HAL_UART_Init+0x542>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007836:	2380      	movs	r3, #128	; 0x80
 8007838:	e617      	b.n	800746a <HAL_UART_Init+0x74a>
 800783a:	2340      	movs	r3, #64	; 0x40
 800783c:	e615      	b.n	800746a <HAL_UART_Init+0x74a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800783e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007842:	e50e      	b.n	8007262 <HAL_UART_Init+0x542>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007844:	2320      	movs	r3, #32
 8007846:	e5ff      	b.n	8007448 <HAL_UART_Init+0x728>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800784c:	e509      	b.n	8007262 <HAL_UART_Init+0x542>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800784e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007852:	2100      	movs	r1, #0
 8007854:	e5a9      	b.n	80073aa <HAL_UART_Init+0x68a>
 8007856:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800785a:	2100      	movs	r1, #0
 800785c:	e5a5      	b.n	80073aa <HAL_UART_Init+0x68a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800785e:	2280      	movs	r2, #128	; 0x80
 8007860:	2300      	movs	r3, #0
 8007862:	e562      	b.n	800732a <HAL_UART_Init+0x60a>
 8007864:	2240      	movs	r2, #64	; 0x40
 8007866:	2300      	movs	r3, #0
 8007868:	e55f      	b.n	800732a <HAL_UART_Init+0x60a>
 800786a:	2220      	movs	r2, #32
 800786c:	2300      	movs	r3, #0
 800786e:	e55c      	b.n	800732a <HAL_UART_Init+0x60a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007870:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007874:	2100      	movs	r1, #0
 8007876:	e598      	b.n	80073aa <HAL_UART_Init+0x68a>
 8007878:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800787c:	2100      	movs	r1, #0
 800787e:	e594      	b.n	80073aa <HAL_UART_Init+0x68a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007880:	4815      	ldr	r0, [pc, #84]	; (80078d8 <HAL_UART_Init+0xbb8>)
 8007882:	2100      	movs	r1, #0
 8007884:	e591      	b.n	80073aa <HAL_UART_Init+0x68a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007886:	f44f 7280 	mov.w	r2, #256	; 0x100
 800788a:	2300      	movs	r3, #0
 800788c:	e54d      	b.n	800732a <HAL_UART_Init+0x60a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800788e:	4813      	ldr	r0, [pc, #76]	; (80078dc <HAL_UART_Init+0xbbc>)
 8007890:	2100      	movs	r1, #0
 8007892:	e58a      	b.n	80073aa <HAL_UART_Init+0x68a>
 8007894:	4812      	ldr	r0, [pc, #72]	; (80078e0 <HAL_UART_Init+0xbc0>)
 8007896:	2100      	movs	r1, #0
 8007898:	e587      	b.n	80073aa <HAL_UART_Init+0x68a>
 800789a:	4812      	ldr	r0, [pc, #72]	; (80078e4 <HAL_UART_Init+0xbc4>)
 800789c:	2100      	movs	r1, #0
 800789e:	e584      	b.n	80073aa <HAL_UART_Init+0x68a>
 80078a0:	28b0aa00 	.word	0x28b0aa00
 80078a4:	00000000 	.word	0x00000000
 80078a8:	14585500 	.word	0x14585500
 80078ac:	00000000 	.word	0x00000000
 80078b0:	3d090000 	.word	0x3d090000
 80078b4:	00155500 	.word	0x00155500
 80078b8:	000aaa00 	.word	0x000aaa00
 80078bc:	000ccc00 	.word	0x000ccc00
 80078c0:	1e848000 	.word	0x1e848000
 80078c4:	0f424000 	.word	0x0f424000
 80078c8:	186a0000 	.word	0x186a0000
 80078cc:	0007a120 	.word	0x0007a120
 80078d0:	0001e848 	.word	0x0001e848
 80078d4:	0003d090 	.word	0x0003d090
 80078d8:	07a12000 	.word	0x07a12000
 80078dc:	00f42400 	.word	0x00f42400
 80078e0:	01e84800 	.word	0x01e84800
 80078e4:	03d09000 	.word	0x03d09000

080078e8 <HAL_UARTEx_WakeupCallback>:
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop

080078ec <HAL_UARTEx_RxFifoFullCallback>:
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop

080078f0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop

080078f4 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078f4:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 80078f8:	2a01      	cmp	r2, #1
 80078fa:	d017      	beq.n	800792c <HAL_UARTEx_DisableFifoMode+0x38>
{
 80078fc:	b430      	push	{r4, r5}

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078fe:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007900:	2124      	movs	r1, #36	; 0x24
 8007902:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007906:	6814      	ldr	r4, [r2, #0]
 8007908:	4603      	mov	r3, r0

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800790a:	6810      	ldr	r0, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800790c:	2100      	movs	r1, #0
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800790e:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8007912:	f020 0001 	bic.w	r0, r0, #1

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8007916:	2520      	movs	r5, #32
  __HAL_UART_DISABLE(huart);
 8007918:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 800791a:	4608      	mov	r0, r1
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800791c:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800791e:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007920:	f883 507d 	strb.w	r5, [r3, #125]	; 0x7d
  __HAL_UNLOCK(huart);
 8007924:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 8007928:	bc30      	pop	{r4, r5}
 800792a:	4770      	bx	lr
  __HAL_LOCK(huart);
 800792c:	2002      	movs	r0, #2
 800792e:	4770      	bx	lr

08007930 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007930:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8007934:	2a01      	cmp	r2, #1
 8007936:	d101      	bne.n	800793c <HAL_UARTEx_SetTxFifoThreshold+0xc>
 8007938:	2002      	movs	r0, #2
 800793a:	4770      	bx	lr
{
 800793c:	b5f0      	push	{r4, r5, r6, r7, lr}

  huart->gState = HAL_UART_STATE_BUSY;
 800793e:	2224      	movs	r2, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007940:	6804      	ldr	r4, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007942:	f880 207d 	strb.w	r2, [r0, #125]	; 0x7d
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007946:	6825      	ldr	r5, [r4, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007948:	6822      	ldr	r2, [r4, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U};
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800794a:	6e46      	ldr	r6, [r0, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 800794c:	f022 0201 	bic.w	r2, r2, #1
 8007950:	6022      	str	r2, [r4, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007952:	68a2      	ldr	r2, [r4, #8]
{
 8007954:	b085      	sub	sp, #20
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007956:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800795a:	4311      	orrs	r1, r2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U};
 800795c:	2707      	movs	r7, #7
 800795e:	2201      	movs	r2, #1
 8007960:	4603      	mov	r3, r0
 8007962:	f04f 0e03 	mov.w	lr, #3
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U};
 8007966:	2008      	movs	r0, #8
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007968:	60a1      	str	r1, [r4, #8]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U};
 800796a:	f88d 7004 	strb.w	r7, [sp, #4]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U};
 800796e:	2104      	movs	r1, #4
 8007970:	2702      	movs	r7, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U};
 8007972:	f88d 2000 	strb.w	r2, [sp]
 8007976:	f88d 2001 	strb.w	r2, [sp, #1]
 800797a:	f88d 2002 	strb.w	r2, [sp, #2]
 800797e:	f88d 2005 	strb.w	r2, [sp, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U};
 8007982:	f88d 200d 	strb.w	r2, [sp, #13]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U};
 8007986:	f88d e003 	strb.w	lr, [sp, #3]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U};
 800798a:	f88d 0008 	strb.w	r0, [sp, #8]
 800798e:	f88d 000c 	strb.w	r0, [sp, #12]
 8007992:	f88d 1009 	strb.w	r1, [sp, #9]
 8007996:	f88d 100b 	strb.w	r1, [sp, #11]
 800799a:	f88d 700a 	strb.w	r7, [sp, #10]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800799e:	b33e      	cbz	r6, 80079f0 <HAL_UARTEx_SetTxFifoThreshold+0xc0>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80079a0:	68a0      	ldr	r0, [r4, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80079a2:	68a6      	ldr	r6, [r4, #8]
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 80079a4:	aa04      	add	r2, sp, #16
 80079a6:	f3c0 6042 	ubfx	r0, r0, #25, #3
 80079aa:	4410      	add	r0, r2
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 80079ac:	eb02 7656 	add.w	r6, r2, r6, lsr #29
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 80079b0:	f810 2c10 	ldrb.w	r2, [r0, #-16]
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 80079b4:	f816 1c10 	ldrb.w	r1, [r6, #-16]
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 80079b8:	f810 7c08 	ldrb.w	r7, [r0, #-8]
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 80079bc:	f816 0c08 	ldrb.w	r0, [r6, #-8]
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 80079c0:	fa02 f20e 	lsl.w	r2, r2, lr
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 80079c4:	fa01 f10e 	lsl.w	r1, r1, lr
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 80079c8:	b2d2      	uxtb	r2, r2
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 80079ca:	b2c9      	uxtb	r1, r1
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 80079cc:	fbb2 f2f7 	udiv	r2, r2, r7
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 80079d0:	fbb1 f1f0 	udiv	r1, r1, r0
  __HAL_UNLOCK(huart);
 80079d4:	2600      	movs	r6, #0
  huart->gState = HAL_UART_STATE_READY;
 80079d6:	2720      	movs	r7, #32
  return HAL_OK;
 80079d8:	4630      	mov	r0, r6
 80079da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80079de:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079e2:	6025      	str	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_READY;
 80079e4:	f883 707d 	strb.w	r7, [r3, #125]	; 0x7d
  __HAL_UNLOCK(huart);
 80079e8:	f883 607c 	strb.w	r6, [r3, #124]	; 0x7c
}
 80079ec:	b005      	add	sp, #20
 80079ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    huart->NbTxDataToProcess = 1U;
 80079f0:	4611      	mov	r1, r2
 80079f2:	e7ef      	b.n	80079d4 <HAL_UARTEx_SetTxFifoThreshold+0xa4>

080079f4 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 80079f4:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 80079f8:	2a01      	cmp	r2, #1
 80079fa:	d101      	bne.n	8007a00 <HAL_UARTEx_SetRxFifoThreshold+0xc>
 80079fc:	2002      	movs	r0, #2
 80079fe:	4770      	bx	lr
{
 8007a00:	b5f0      	push	{r4, r5, r6, r7, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8007a02:	2224      	movs	r2, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a04:	6804      	ldr	r4, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007a06:	f880 207d 	strb.w	r2, [r0, #125]	; 0x7d
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a0a:	6825      	ldr	r5, [r4, #0]
  __HAL_UART_DISABLE(huart);
 8007a0c:	6822      	ldr	r2, [r4, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a0e:	6e46      	ldr	r6, [r0, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8007a10:	f022 0201 	bic.w	r2, r2, #1
 8007a14:	6022      	str	r2, [r4, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a16:	68a2      	ldr	r2, [r4, #8]
{
 8007a18:	b085      	sub	sp, #20
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a1a:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8007a1e:	4311      	orrs	r1, r2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U};
 8007a20:	2707      	movs	r7, #7
 8007a22:	2201      	movs	r2, #1
 8007a24:	4603      	mov	r3, r0
 8007a26:	f04f 0e03 	mov.w	lr, #3
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U};
 8007a2a:	2008      	movs	r0, #8
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a2c:	60a1      	str	r1, [r4, #8]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U};
 8007a2e:	f88d 7004 	strb.w	r7, [sp, #4]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U};
 8007a32:	2104      	movs	r1, #4
 8007a34:	2702      	movs	r7, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U};
 8007a36:	f88d 2000 	strb.w	r2, [sp]
 8007a3a:	f88d 2001 	strb.w	r2, [sp, #1]
 8007a3e:	f88d 2002 	strb.w	r2, [sp, #2]
 8007a42:	f88d 2005 	strb.w	r2, [sp, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U};
 8007a46:	f88d 200d 	strb.w	r2, [sp, #13]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U};
 8007a4a:	f88d e003 	strb.w	lr, [sp, #3]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U};
 8007a4e:	f88d 0008 	strb.w	r0, [sp, #8]
 8007a52:	f88d 000c 	strb.w	r0, [sp, #12]
 8007a56:	f88d 1009 	strb.w	r1, [sp, #9]
 8007a5a:	f88d 100b 	strb.w	r1, [sp, #11]
 8007a5e:	f88d 700a 	strb.w	r7, [sp, #10]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a62:	b33e      	cbz	r6, 8007ab4 <HAL_UARTEx_SetRxFifoThreshold+0xc0>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a64:	68a0      	ldr	r0, [r4, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a66:	68a6      	ldr	r6, [r4, #8]
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 8007a68:	aa04      	add	r2, sp, #16
 8007a6a:	f3c0 6042 	ubfx	r0, r0, #25, #3
 8007a6e:	4410      	add	r0, r2
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 8007a70:	eb02 7656 	add.w	r6, r2, r6, lsr #29
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 8007a74:	f810 2c10 	ldrb.w	r2, [r0, #-16]
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 8007a78:	f816 1c10 	ldrb.w	r1, [r6, #-16]
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 8007a7c:	f810 7c08 	ldrb.w	r7, [r0, #-8]
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 8007a80:	f816 0c08 	ldrb.w	r0, [r6, #-8]
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 8007a84:	fa02 f20e 	lsl.w	r2, r2, lr
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 8007a88:	fa01 f10e 	lsl.w	r1, r1, lr
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 8007a8c:	b2d2      	uxtb	r2, r2
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 8007a8e:	b2c9      	uxtb	r1, r1
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 8007a90:	fbb2 f2f7 	udiv	r2, r2, r7
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 8007a94:	fbb1 f1f0 	udiv	r1, r1, r0
  __HAL_UNLOCK(huart);
 8007a98:	2600      	movs	r6, #0
  huart->gState = HAL_UART_STATE_READY;
 8007a9a:	2720      	movs	r7, #32
  return HAL_OK;
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8007aa2:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007aa6:	6025      	str	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007aa8:	f883 707d 	strb.w	r7, [r3, #125]	; 0x7d
  __HAL_UNLOCK(huart);
 8007aac:	f883 607c 	strb.w	r6, [r3, #124]	; 0x7c
}
 8007ab0:	b005      	add	sp, #20
 8007ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    huart->NbTxDataToProcess = 1U;
 8007ab4:	4611      	mov	r1, r2
 8007ab6:	e7ef      	b.n	8007a98 <HAL_UARTEx_SetRxFifoThreshold+0xa4>

08007ab8 <SDMMC_GetCmdResp1.part.2>:
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007ab8:	4b30      	ldr	r3, [pc, #192]	; (8007b7c <SDMMC_GetCmdResp1.part.2+0xc4>)
 8007aba:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8007abc:	6943      	ldr	r3, [r0, #20]
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007abe:	4830      	ldr	r0, [pc, #192]	; (8007b80 <SDMMC_GetCmdResp1.part.2+0xc8>)
 8007ac0:	4018      	ands	r0, r3
 8007ac2:	b148      	cbz	r0, 8007ad8 <SDMMC_GetCmdResp1.part.2+0x20>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	db08      	blt.n	8007ada <SDMMC_GetCmdResp1.part.2+0x22>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007ac8:	0059      	lsls	r1, r3, #1
 8007aca:	d509      	bpl.n	8007ae0 <SDMMC_GetCmdResp1.part.2+0x28>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007acc:	2040      	movs	r0, #64	; 0x40
 8007ace:	4770      	bx	lr
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007ad0:	049a      	lsls	r2, r3, #18
 8007ad2:	d54a      	bpl.n	8007b6a <SDMMC_GetCmdResp1.part.2+0xb2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007ad4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
  }
}
 8007ad8:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007ada:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8007ade:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007ae0:	009a      	lsls	r2, r3, #2
 8007ae2:	d501      	bpl.n	8007ae8 <SDMMC_GetCmdResp1.part.2+0x30>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007ae4:	2080      	movs	r0, #128	; 0x80
 8007ae6:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007ae8:	00d9      	lsls	r1, r3, #3
 8007aea:	d502      	bpl.n	8007af2 <SDMMC_GetCmdResp1.part.2+0x3a>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007aec:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007af0:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007af2:	011a      	lsls	r2, r3, #4
 8007af4:	d502      	bpl.n	8007afc <SDMMC_GetCmdResp1.part.2+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007af6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007afa:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007afc:	0159      	lsls	r1, r3, #5
 8007afe:	d502      	bpl.n	8007b06 <SDMMC_GetCmdResp1.part.2+0x4e>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007b00:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007b04:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007b06:	01da      	lsls	r2, r3, #7
 8007b08:	d502      	bpl.n	8007b10 <SDMMC_GetCmdResp1.part.2+0x58>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007b0a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007b0e:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007b10:	0219      	lsls	r1, r3, #8
 8007b12:	d502      	bpl.n	8007b1a <SDMMC_GetCmdResp1.part.2+0x62>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007b14:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007b18:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007b1a:	025a      	lsls	r2, r3, #9
 8007b1c:	d502      	bpl.n	8007b24 <SDMMC_GetCmdResp1.part.2+0x6c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007b1e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007b22:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007b24:	0299      	lsls	r1, r3, #10
 8007b26:	d502      	bpl.n	8007b2e <SDMMC_GetCmdResp1.part.2+0x76>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007b28:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007b2c:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007b2e:	02da      	lsls	r2, r3, #11
 8007b30:	d502      	bpl.n	8007b38 <SDMMC_GetCmdResp1.part.2+0x80>
    return SDMMC_ERROR_CC_ERR;
 8007b32:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007b36:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007b38:	0359      	lsls	r1, r3, #13
 8007b3a:	d502      	bpl.n	8007b42 <SDMMC_GetCmdResp1.part.2+0x8a>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007b3c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8007b40:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007b42:	039a      	lsls	r2, r3, #14
 8007b44:	d502      	bpl.n	8007b4c <SDMMC_GetCmdResp1.part.2+0x94>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007b46:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8007b4a:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007b4c:	03d9      	lsls	r1, r3, #15
 8007b4e:	d502      	bpl.n	8007b56 <SDMMC_GetCmdResp1.part.2+0x9e>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007b50:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007b54:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007b56:	041a      	lsls	r2, r3, #16
 8007b58:	d502      	bpl.n	8007b60 <SDMMC_GetCmdResp1.part.2+0xa8>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007b5a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007b5e:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007b60:	0459      	lsls	r1, r3, #17
 8007b62:	d5b5      	bpl.n	8007ad0 <SDMMC_GetCmdResp1.part.2+0x18>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007b64:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8007b68:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007b6a:	f013 0f08 	tst.w	r3, #8
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007b6e:	bf14      	ite	ne
 8007b70:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8007b74:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	002000c5 	.word	0x002000c5
 8007b80:	fdffe008 	.word	0xfdffe008

08007b84 <SDMMC_Init>:
{
 8007b84:	b084      	sub	sp, #16
 8007b86:	b470      	push	{r4, r5, r6}
 8007b88:	ac04      	add	r4, sp, #16
 8007b8a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 8007b8e:	9e05      	ldr	r6, [sp, #20]
 8007b90:	9d06      	ldr	r5, [sp, #24]
 8007b92:	9c07      	ldr	r4, [sp, #28]
 8007b94:	4a07      	ldr	r2, [pc, #28]	; (8007bb4 <SDMMC_Init+0x30>)
 8007b96:	460b      	mov	r3, r1
 8007b98:	4333      	orrs	r3, r6
 8007b9a:	432b      	orrs	r3, r5
 8007b9c:	6845      	ldr	r5, [r0, #4]
 8007b9e:	9908      	ldr	r1, [sp, #32]
 8007ba0:	4323      	orrs	r3, r4
 8007ba2:	402a      	ands	r2, r5
}
 8007ba4:	bc70      	pop	{r4, r5, r6}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 8007ba6:	430b      	orrs	r3, r1
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	6043      	str	r3, [r0, #4]
}
 8007bac:	b004      	add	sp, #16
 8007bae:	2000      	movs	r0, #0
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	fffc2c00 	.word	0xfffc2c00

08007bb8 <SDMMC_ReadFIFO>:
 8007bb8:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop

08007bc0 <SDMMC_PowerState_ON>:
{  
 8007bc0:	4602      	mov	r2, r0
}
 8007bc2:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8007bc4:	6813      	ldr	r3, [r2, #0]
 8007bc6:	f043 0303 	orr.w	r3, r3, #3
 8007bca:	6013      	str	r3, [r2, #0]
}
 8007bcc:	4770      	bx	lr
 8007bce:	bf00      	nop

08007bd0 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007bd0:	6800      	ldr	r0, [r0, #0]
}
 8007bd2:	f000 0003 	and.w	r0, r0, #3
 8007bd6:	4770      	bx	lr

08007bd8 <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007bd8:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8007bda:	5840      	ldr	r0, [r0, r1]
}  
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop

08007be0 <SDMMC_ConfigData>:
  SDMMCx->DLEN = Data->DataLength;
 8007be0:	e891 000c 	ldmia.w	r1, {r2, r3}
{
 8007be4:	b470      	push	{r4, r5, r6}
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007be6:	6242      	str	r2, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 8007be8:	6283      	str	r3, [r0, #40]	; 0x28
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, Data->DataBlockSize |\
 8007bea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007bec:	688e      	ldr	r6, [r1, #8]
 8007bee:	68cd      	ldr	r5, [r1, #12]
 8007bf0:	690c      	ldr	r4, [r1, #16]
 8007bf2:	694a      	ldr	r2, [r1, #20]
 8007bf4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007bf8:	4333      	orrs	r3, r6
 8007bfa:	432b      	orrs	r3, r5
 8007bfc:	4323      	orrs	r3, r4
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8007c02:	bc70      	pop	{r4, r5, r6}
 8007c04:	2000      	movs	r0, #0
 8007c06:	4770      	bx	lr

08007c08 <SDMMC_CmdBlockLength>:
{
 8007c08:	b410      	push	{r4}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007c0a:	4b1d      	ldr	r3, [pc, #116]	; (8007c80 <SDMMC_CmdBlockLength+0x78>)
  SDMMCx->ARG = Command->Argument;
 8007c0c:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007c0e:	68c4      	ldr	r4, [r0, #12]
 8007c10:	4a1c      	ldr	r2, [pc, #112]	; (8007c84 <SDMMC_CmdBlockLength+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007c12:	491d      	ldr	r1, [pc, #116]	; (8007c88 <SDMMC_CmdBlockLength+0x80>)
 8007c14:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007c16:	4022      	ands	r2, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007c18:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007c1c:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007c20:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007c22:	f042 0210 	orr.w	r2, r2, #16
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007c26:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007c2a:	60c2      	str	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007c2c:	fb03 f301 	mul.w	r3, r3, r1
 8007c30:	e003      	b.n	8007c3a <SDMMC_CmdBlockLength+0x32>
  }while(!__SDMMC_GET_FLAG(SDMMCx, flags));
 8007c32:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007c34:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007c38:	d107      	bne.n	8007c4a <SDMMC_CmdBlockLength+0x42>
    if (count-- == 0U)
 8007c3a:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007c3e:	d2f8      	bcs.n	8007c32 <SDMMC_CmdBlockLength+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8007c40:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007c44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c48:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007c4a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007c4c:	075a      	lsls	r2, r3, #29
 8007c4e:	d505      	bpl.n	8007c5c <SDMMC_CmdBlockLength+0x54>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007c50:	2304      	movs	r3, #4
 8007c52:	6383      	str	r3, [r0, #56]	; 0x38
}
 8007c54:	f85d 4b04 	ldr.w	r4, [sp], #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007c58:	4618      	mov	r0, r3
}
 8007c5a:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007c5c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007c5e:	07db      	lsls	r3, r3, #31
 8007c60:	d405      	bmi.n	8007c6e <SDMMC_CmdBlockLength+0x66>
  return (uint8_t)(SDMMCx->RESPCMD);
 8007c62:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	2b10      	cmp	r3, #16
 8007c68:	d005      	beq.n	8007c76 <SDMMC_CmdBlockLength+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c6a:	2001      	movs	r0, #1
  return errorstate;
 8007c6c:	e7ea      	b.n	8007c44 <SDMMC_CmdBlockLength+0x3c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007c6e:	2301      	movs	r3, #1
 8007c70:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c72:	4618      	mov	r0, r3
 8007c74:	e7e6      	b.n	8007c44 <SDMMC_CmdBlockLength+0x3c>
}
 8007c76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c7a:	f7ff bf1d 	b.w	8007ab8 <SDMMC_GetCmdResp1.part.2>
 8007c7e:	bf00      	nop
 8007c80:	20000050 	.word	0x20000050
 8007c84:	fffee0c0 	.word	0xfffee0c0
 8007c88:	10624dd3 	.word	0x10624dd3

08007c8c <SDMMC_CmdSelDesel>:
{
 8007c8c:	b410      	push	{r4}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007c8e:	4b1d      	ldr	r3, [pc, #116]	; (8007d04 <SDMMC_CmdSelDesel+0x78>)
  SDMMCx->ARG = Command->Argument;
 8007c90:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007c92:	68c4      	ldr	r4, [r0, #12]
 8007c94:	4a1c      	ldr	r2, [pc, #112]	; (8007d08 <SDMMC_CmdSelDesel+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007c96:	491d      	ldr	r1, [pc, #116]	; (8007d0c <SDMMC_CmdSelDesel+0x80>)
 8007c98:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007c9a:	4022      	ands	r2, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007c9c:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007ca0:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007ca4:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007ca6:	f042 0207 	orr.w	r2, r2, #7
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007caa:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007cae:	60c2      	str	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007cb0:	fb03 f301 	mul.w	r3, r3, r1
 8007cb4:	e003      	b.n	8007cbe <SDMMC_CmdSelDesel+0x32>
  }while(!__SDMMC_GET_FLAG(SDMMCx, flags));
 8007cb6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007cb8:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007cbc:	d107      	bne.n	8007cce <SDMMC_CmdSelDesel+0x42>
    if (count-- == 0U)
 8007cbe:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007cc2:	d2f8      	bcs.n	8007cb6 <SDMMC_CmdSelDesel+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8007cc4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007cc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ccc:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007cce:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007cd0:	075a      	lsls	r2, r3, #29
 8007cd2:	d505      	bpl.n	8007ce0 <SDMMC_CmdSelDesel+0x54>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007cd4:	2304      	movs	r3, #4
 8007cd6:	6383      	str	r3, [r0, #56]	; 0x38
}
 8007cd8:	f85d 4b04 	ldr.w	r4, [sp], #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007cdc:	4618      	mov	r0, r3
}
 8007cde:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007ce0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007ce2:	07db      	lsls	r3, r3, #31
 8007ce4:	d405      	bmi.n	8007cf2 <SDMMC_CmdSelDesel+0x66>
  return (uint8_t)(SDMMCx->RESPCMD);
 8007ce6:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	2b07      	cmp	r3, #7
 8007cec:	d005      	beq.n	8007cfa <SDMMC_CmdSelDesel+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007cee:	2001      	movs	r0, #1
  return errorstate;
 8007cf0:	e7ea      	b.n	8007cc8 <SDMMC_CmdSelDesel+0x3c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	e7e6      	b.n	8007cc8 <SDMMC_CmdSelDesel+0x3c>
}
 8007cfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cfe:	f7ff bedb 	b.w	8007ab8 <SDMMC_GetCmdResp1.part.2>
 8007d02:	bf00      	nop
 8007d04:	20000050 	.word	0x20000050
 8007d08:	fffee0c0 	.word	0xfffee0c0
 8007d0c:	10624dd3 	.word	0x10624dd3

08007d10 <SDMMC_CmdGoIdleState>:
  SDMMCx->ARG = Command->Argument;
 8007d10:	2200      	movs	r2, #0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d12:	4b12      	ldr	r3, [pc, #72]	; (8007d5c <SDMMC_CmdGoIdleState+0x4c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007d14:	4912      	ldr	r1, [pc, #72]	; (8007d60 <SDMMC_CmdGoIdleState+0x50>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d16:	681b      	ldr	r3, [r3, #0]
{
 8007d18:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 8007d1a:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007d1c:	68c4      	ldr	r4, [r0, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d1e:	4a11      	ldr	r2, [pc, #68]	; (8007d64 <SDMMC_CmdGoIdleState+0x54>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007d20:	4021      	ands	r1, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d22:	fba2 2303 	umull	r2, r3, r2, r3
 8007d26:	0a5a      	lsrs	r2, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007d28:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d2c:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007d30:	60c1      	str	r1, [r0, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d32:	fb03 f302 	mul.w	r3, r3, r2
 8007d36:	e002      	b.n	8007d3e <SDMMC_CmdGoIdleState+0x2e>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007d38:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007d3a:	0612      	lsls	r2, r2, #24
 8007d3c:	d407      	bmi.n	8007d4e <SDMMC_CmdGoIdleState+0x3e>
    if (count-- == 0U)
 8007d3e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007d42:	d2f9      	bcs.n	8007d38 <SDMMC_CmdGoIdleState+0x28>
      return SDMMC_ERROR_TIMEOUT;
 8007d44:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007d48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d4c:	4770      	bx	lr
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007d4e:	4b06      	ldr	r3, [pc, #24]	; (8007d68 <SDMMC_CmdGoIdleState+0x58>)
 8007d50:	6383      	str	r3, [r0, #56]	; 0x38
}
 8007d52:	f85d 4b04 	ldr.w	r4, [sp], #4
  return SDMMC_ERROR_NONE;
 8007d56:	2000      	movs	r0, #0
}
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	20000050 	.word	0x20000050
 8007d60:	fffee0c0 	.word	0xfffee0c0
 8007d64:	10624dd3 	.word	0x10624dd3
 8007d68:	002000c5 	.word	0x002000c5

08007d6c <SDMMC_CmdOperCond>:
  SDMMCx->ARG = Command->Argument;
 8007d6c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
{
 8007d70:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 8007d72:	6083      	str	r3, [r0, #8]
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d74:	4b1b      	ldr	r3, [pc, #108]	; (8007de4 <SDMMC_CmdOperCond+0x78>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007d76:	68c4      	ldr	r4, [r0, #12]
 8007d78:	4a1b      	ldr	r2, [pc, #108]	; (8007de8 <SDMMC_CmdOperCond+0x7c>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d7a:	681b      	ldr	r3, [r3, #0]
{
 8007d7c:	4601      	mov	r1, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d7e:	481b      	ldr	r0, [pc, #108]	; (8007dec <SDMMC_CmdOperCond+0x80>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007d80:	4022      	ands	r2, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d82:	fba0 0303 	umull	r0, r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007d86:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d8a:	0a58      	lsrs	r0, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007d8c:	f042 0208 	orr.w	r2, r2, #8
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d90:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007d94:	60ca      	str	r2, [r1, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d96:	fb03 f300 	mul.w	r3, r3, r0
 8007d9a:	e003      	b.n	8007da4 <SDMMC_CmdOperCond+0x38>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007d9c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8007d9e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007da2:	d107      	bne.n	8007db4 <SDMMC_CmdOperCond+0x48>
    if (count-- == 0U)
 8007da4:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007da8:	d2f8      	bcs.n	8007d9c <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8007daa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007dae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007db2:	4770      	bx	lr

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007db4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8007db6:	075b      	lsls	r3, r3, #29
 8007db8:	d504      	bpl.n	8007dc4 <SDMMC_CmdOperCond+0x58>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007dba:	2004      	movs	r0, #4
 8007dbc:	6388      	str	r0, [r1, #56]	; 0x38
}
 8007dbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dc2:	4770      	bx	lr
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007dc4:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8007dc6:	f010 0001 	ands.w	r0, r0, #1
 8007dca:	d106      	bne.n	8007dda <SDMMC_CmdOperCond+0x6e>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007dcc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8007dce:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8007dd2:	d005      	beq.n	8007de0 <SDMMC_CmdOperCond+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007dd4:	2340      	movs	r3, #64	; 0x40
 8007dd6:	638b      	str	r3, [r1, #56]	; 0x38
 8007dd8:	e7e9      	b.n	8007dae <SDMMC_CmdOperCond+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007dda:	2001      	movs	r0, #1
 8007ddc:	6388      	str	r0, [r1, #56]	; 0x38
 8007dde:	e7e6      	b.n	8007dae <SDMMC_CmdOperCond+0x42>
  }
  
  return SDMMC_ERROR_NONE;
 8007de0:	4618      	mov	r0, r3
  return errorstate;
 8007de2:	e7e4      	b.n	8007dae <SDMMC_CmdOperCond+0x42>
 8007de4:	20000050 	.word	0x20000050
 8007de8:	fffee0c0 	.word	0xfffee0c0
 8007dec:	10624dd3 	.word	0x10624dd3

08007df0 <SDMMC_CmdAppCommand>:
{
 8007df0:	b410      	push	{r4}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007df2:	4b1d      	ldr	r3, [pc, #116]	; (8007e68 <SDMMC_CmdAppCommand+0x78>)
  SDMMCx->ARG = Command->Argument;
 8007df4:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007df6:	68c4      	ldr	r4, [r0, #12]
 8007df8:	4a1c      	ldr	r2, [pc, #112]	; (8007e6c <SDMMC_CmdAppCommand+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007dfa:	491d      	ldr	r1, [pc, #116]	; (8007e70 <SDMMC_CmdAppCommand+0x80>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007dfe:	4022      	ands	r2, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007e00:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007e04:	f442 5289 	orr.w	r2, r2, #4384	; 0x1120
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007e08:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007e0a:	f042 0217 	orr.w	r2, r2, #23
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007e0e:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007e12:	60c2      	str	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007e14:	fb03 f301 	mul.w	r3, r3, r1
 8007e18:	e003      	b.n	8007e22 <SDMMC_CmdAppCommand+0x32>
  }while(!__SDMMC_GET_FLAG(SDMMCx, flags));
 8007e1a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007e1c:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007e20:	d107      	bne.n	8007e32 <SDMMC_CmdAppCommand+0x42>
    if (count-- == 0U)
 8007e22:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007e26:	d2f8      	bcs.n	8007e1a <SDMMC_CmdAppCommand+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8007e28:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007e2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e30:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007e32:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007e34:	075a      	lsls	r2, r3, #29
 8007e36:	d505      	bpl.n	8007e44 <SDMMC_CmdAppCommand+0x54>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007e38:	2304      	movs	r3, #4
 8007e3a:	6383      	str	r3, [r0, #56]	; 0x38
}
 8007e3c:	f85d 4b04 	ldr.w	r4, [sp], #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007e40:	4618      	mov	r0, r3
}
 8007e42:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007e44:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007e46:	07db      	lsls	r3, r3, #31
 8007e48:	d405      	bmi.n	8007e56 <SDMMC_CmdAppCommand+0x66>
  return (uint8_t)(SDMMCx->RESPCMD);
 8007e4a:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2b37      	cmp	r3, #55	; 0x37
 8007e50:	d005      	beq.n	8007e5e <SDMMC_CmdAppCommand+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e52:	2001      	movs	r0, #1
  return errorstate;
 8007e54:	e7ea      	b.n	8007e2c <SDMMC_CmdAppCommand+0x3c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007e56:	2301      	movs	r3, #1
 8007e58:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	e7e6      	b.n	8007e2c <SDMMC_CmdAppCommand+0x3c>
}
 8007e5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e62:	f7ff be29 	b.w	8007ab8 <SDMMC_GetCmdResp1.part.2>
 8007e66:	bf00      	nop
 8007e68:	20000050 	.word	0x20000050
 8007e6c:	fffee0c0 	.word	0xfffee0c0
 8007e70:	10624dd3 	.word	0x10624dd3

08007e74 <SDMMC_CmdAppOperCommand>:
{
 8007e74:	b410      	push	{r4}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e76:	4b16      	ldr	r3, [pc, #88]	; (8007ed0 <SDMMC_CmdAppOperCommand+0x5c>)
  SDMMCx->ARG = Command->Argument;
 8007e78:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007e7a:	68c4      	ldr	r4, [r0, #12]
 8007e7c:	4a15      	ldr	r2, [pc, #84]	; (8007ed4 <SDMMC_CmdAppOperCommand+0x60>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e7e:	4916      	ldr	r1, [pc, #88]	; (8007ed8 <SDMMC_CmdAppOperCommand+0x64>)
 8007e80:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007e82:	4022      	ands	r2, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e84:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007e88:	f442 5289 	orr.w	r2, r2, #4384	; 0x1120
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e8c:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007e8e:	f042 0209 	orr.w	r2, r2, #9
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e92:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007e96:	60c2      	str	r2, [r0, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e98:	fb03 f301 	mul.w	r3, r3, r1
 8007e9c:	e003      	b.n	8007ea6 <SDMMC_CmdAppOperCommand+0x32>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007e9e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007ea0:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007ea4:	d107      	bne.n	8007eb6 <SDMMC_CmdAppOperCommand+0x42>
    if (count-- == 0U)
 8007ea6:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007eaa:	d2f8      	bcs.n	8007e9e <SDMMC_CmdAppOperCommand+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8007eac:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007eb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007eb4:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007eb6:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8007eb8:	f85d 4b04 	ldr.w	r4, [sp], #4
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007ebc:	f013 0304 	ands.w	r3, r3, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007ec0:	bf15      	itete	ne
 8007ec2:	2304      	movne	r3, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007ec4:	4a05      	ldreq	r2, [pc, #20]	; (8007edc <SDMMC_CmdAppOperCommand+0x68>)
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007ec6:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007ec8:	6382      	streq	r2, [r0, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8007eca:	4618      	mov	r0, r3
}
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	20000050 	.word	0x20000050
 8007ed4:	fffee0c0 	.word	0xfffee0c0
 8007ed8:	10624dd3 	.word	0x10624dd3
 8007edc:	002000c5 	.word	0x002000c5

08007ee0 <SDMMC_CmdBusWidth>:
 8007ee0:	b410      	push	{r4}
 8007ee2:	4b1d      	ldr	r3, [pc, #116]	; (8007f58 <SDMMC_CmdBusWidth+0x78>)
 8007ee4:	6081      	str	r1, [r0, #8]
 8007ee6:	68c4      	ldr	r4, [r0, #12]
 8007ee8:	4a1c      	ldr	r2, [pc, #112]	; (8007f5c <SDMMC_CmdBusWidth+0x7c>)
 8007eea:	491d      	ldr	r1, [pc, #116]	; (8007f60 <SDMMC_CmdBusWidth+0x80>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4022      	ands	r2, r4
 8007ef0:	fba1 1303 	umull	r1, r3, r1, r3
 8007ef4:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 8007ef8:	0a59      	lsrs	r1, r3, #9
 8007efa:	f042 0206 	orr.w	r2, r2, #6
 8007efe:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f02:	60c2      	str	r2, [r0, #12]
 8007f04:	fb03 f301 	mul.w	r3, r3, r1
 8007f08:	e003      	b.n	8007f12 <SDMMC_CmdBusWidth+0x32>
 8007f0a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007f0c:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007f10:	d107      	bne.n	8007f22 <SDMMC_CmdBusWidth+0x42>
 8007f12:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007f16:	d2f8      	bcs.n	8007f0a <SDMMC_CmdBusWidth+0x2a>
 8007f18:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8007f1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f20:	4770      	bx	lr
 8007f22:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007f24:	075a      	lsls	r2, r3, #29
 8007f26:	d505      	bpl.n	8007f34 <SDMMC_CmdBusWidth+0x54>
 8007f28:	2304      	movs	r3, #4
 8007f2a:	6383      	str	r3, [r0, #56]	; 0x38
 8007f2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f30:	4618      	mov	r0, r3
 8007f32:	4770      	bx	lr
 8007f34:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007f36:	07db      	lsls	r3, r3, #31
 8007f38:	d405      	bmi.n	8007f46 <SDMMC_CmdBusWidth+0x66>
 8007f3a:	6903      	ldr	r3, [r0, #16]
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b06      	cmp	r3, #6
 8007f40:	d005      	beq.n	8007f4e <SDMMC_CmdBusWidth+0x6e>
 8007f42:	2001      	movs	r0, #1
 8007f44:	e7ea      	b.n	8007f1c <SDMMC_CmdBusWidth+0x3c>
 8007f46:	2301      	movs	r3, #1
 8007f48:	6383      	str	r3, [r0, #56]	; 0x38
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	e7e6      	b.n	8007f1c <SDMMC_CmdBusWidth+0x3c>
 8007f4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f52:	f7ff bdb1 	b.w	8007ab8 <SDMMC_GetCmdResp1.part.2>
 8007f56:	bf00      	nop
 8007f58:	20000050 	.word	0x20000050
 8007f5c:	fffee0c0 	.word	0xfffee0c0
 8007f60:	10624dd3 	.word	0x10624dd3

08007f64 <SDMMC_CmdSendSCR>:
  SDMMCx->ARG = Command->Argument;
 8007f64:	2300      	movs	r3, #0
{
 8007f66:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 8007f68:	6083      	str	r3, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007f6a:	4b1c      	ldr	r3, [pc, #112]	; (8007fdc <SDMMC_CmdSendSCR+0x78>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007f6c:	68c4      	ldr	r4, [r0, #12]
 8007f6e:	4a1c      	ldr	r2, [pc, #112]	; (8007fe0 <SDMMC_CmdSendSCR+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007f70:	491c      	ldr	r1, [pc, #112]	; (8007fe4 <SDMMC_CmdSendSCR+0x80>)
 8007f72:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007f74:	4022      	ands	r2, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007f76:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007f7a:	f442 5289 	orr.w	r2, r2, #4384	; 0x1120
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007f7e:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007f80:	f042 0213 	orr.w	r2, r2, #19
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007f84:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007f88:	60c2      	str	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007f8a:	fb03 f301 	mul.w	r3, r3, r1
 8007f8e:	e003      	b.n	8007f98 <SDMMC_CmdSendSCR+0x34>
  }while(!__SDMMC_GET_FLAG(SDMMCx, flags));
 8007f90:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007f92:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007f96:	d107      	bne.n	8007fa8 <SDMMC_CmdSendSCR+0x44>
    if (count-- == 0U)
 8007f98:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007f9c:	d2f8      	bcs.n	8007f90 <SDMMC_CmdSendSCR+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8007f9e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007fa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fa6:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007fa8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007faa:	075a      	lsls	r2, r3, #29
 8007fac:	d505      	bpl.n	8007fba <SDMMC_CmdSendSCR+0x56>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007fae:	2304      	movs	r3, #4
 8007fb0:	6383      	str	r3, [r0, #56]	; 0x38
}
 8007fb2:	f85d 4b04 	ldr.w	r4, [sp], #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007fb6:	4618      	mov	r0, r3
}
 8007fb8:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007fba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007fbc:	07db      	lsls	r3, r3, #31
 8007fbe:	d405      	bmi.n	8007fcc <SDMMC_CmdSendSCR+0x68>
  return (uint8_t)(SDMMCx->RESPCMD);
 8007fc0:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	2b33      	cmp	r3, #51	; 0x33
 8007fc6:	d005      	beq.n	8007fd4 <SDMMC_CmdSendSCR+0x70>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007fc8:	2001      	movs	r0, #1
  return errorstate;
 8007fca:	e7ea      	b.n	8007fa2 <SDMMC_CmdSendSCR+0x3e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007fcc:	2301      	movs	r3, #1
 8007fce:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	e7e6      	b.n	8007fa2 <SDMMC_CmdSendSCR+0x3e>
}
 8007fd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fd8:	f7ff bd6e 	b.w	8007ab8 <SDMMC_GetCmdResp1.part.2>
 8007fdc:	20000050 	.word	0x20000050
 8007fe0:	fffee0c0 	.word	0xfffee0c0
 8007fe4:	10624dd3 	.word	0x10624dd3

08007fe8 <SDMMC_CmdSendCID>:
  SDMMCx->ARG = Command->Argument;
 8007fe8:	2300      	movs	r3, #0
{
 8007fea:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 8007fec:	6083      	str	r3, [r0, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007fee:	4b1a      	ldr	r3, [pc, #104]	; (8008058 <SDMMC_CmdSendCID+0x70>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007ff0:	68c4      	ldr	r4, [r0, #12]
 8007ff2:	4a1a      	ldr	r2, [pc, #104]	; (800805c <SDMMC_CmdSendCID+0x74>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007ff4:	491a      	ldr	r1, [pc, #104]	; (8008060 <SDMMC_CmdSendCID+0x78>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007ff8:	4022      	ands	r2, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007ffa:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007ffe:	f442 5298 	orr.w	r2, r2, #4864	; 0x1300
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008002:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8008004:	f042 0202 	orr.w	r2, r2, #2
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008008:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800800c:	60c2      	str	r2, [r0, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800800e:	fb03 f301 	mul.w	r3, r3, r1
 8008012:	e003      	b.n	800801c <SDMMC_CmdSendCID+0x34>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8008014:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8008016:	f012 0f45 	tst.w	r2, #69	; 0x45
 800801a:	d107      	bne.n	800802c <SDMMC_CmdSendCID+0x44>
    if (count-- == 0U)
 800801c:	f113 33ff 	adds.w	r3, r3, #4294967295
 8008020:	d2f8      	bcs.n	8008014 <SDMMC_CmdSendCID+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8008022:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8008026:	f85d 4b04 	ldr.w	r4, [sp], #4
 800802a:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800802c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800802e:	075b      	lsls	r3, r3, #29
 8008030:	d505      	bpl.n	800803e <SDMMC_CmdSendCID+0x56>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008032:	2304      	movs	r3, #4
 8008034:	6383      	str	r3, [r0, #56]	; 0x38
}
 8008036:	f85d 4b04 	ldr.w	r4, [sp], #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800803a:	4618      	mov	r0, r3
}
 800803c:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800803e:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8008040:	f85d 4b04 	ldr.w	r4, [sp], #4
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008044:	f013 0301 	ands.w	r3, r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008048:	bf15      	itete	ne
 800804a:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800804c:	4a05      	ldreq	r2, [pc, #20]	; (8008064 <SDMMC_CmdSendCID+0x7c>)
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800804e:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008050:	6382      	streq	r2, [r0, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8008052:	4618      	mov	r0, r3
}
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	20000050 	.word	0x20000050
 800805c:	fffee0c0 	.word	0xfffee0c0
 8008060:	10624dd3 	.word	0x10624dd3
 8008064:	002000c5 	.word	0x002000c5

08008068 <SDMMC_CmdSendCSD>:
{
 8008068:	b410      	push	{r4}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800806a:	4b1a      	ldr	r3, [pc, #104]	; (80080d4 <SDMMC_CmdSendCSD+0x6c>)
  SDMMCx->ARG = Command->Argument;
 800806c:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800806e:	68c4      	ldr	r4, [r0, #12]
 8008070:	4a19      	ldr	r2, [pc, #100]	; (80080d8 <SDMMC_CmdSendCSD+0x70>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008072:	491a      	ldr	r1, [pc, #104]	; (80080dc <SDMMC_CmdSendCSD+0x74>)
 8008074:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8008076:	4022      	ands	r2, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008078:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800807c:	f442 5298 	orr.w	r2, r2, #4864	; 0x1300
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008080:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8008082:	f042 0209 	orr.w	r2, r2, #9
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008086:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800808a:	60c2      	str	r2, [r0, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800808c:	fb03 f301 	mul.w	r3, r3, r1
 8008090:	e003      	b.n	800809a <SDMMC_CmdSendCSD+0x32>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8008092:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8008094:	f012 0f45 	tst.w	r2, #69	; 0x45
 8008098:	d107      	bne.n	80080aa <SDMMC_CmdSendCSD+0x42>
    if (count-- == 0U)
 800809a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800809e:	d2f8      	bcs.n	8008092 <SDMMC_CmdSendCSD+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 80080a0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80080a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080a8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80080aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80080ac:	075b      	lsls	r3, r3, #29
 80080ae:	d505      	bpl.n	80080bc <SDMMC_CmdSendCSD+0x54>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80080b0:	2304      	movs	r3, #4
 80080b2:	6383      	str	r3, [r0, #56]	; 0x38
}
 80080b4:	f85d 4b04 	ldr.w	r4, [sp], #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80080b8:	4618      	mov	r0, r3
}
 80080ba:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80080bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 80080be:	f85d 4b04 	ldr.w	r4, [sp], #4
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80080c2:	f013 0301 	ands.w	r3, r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80080c6:	bf15      	itete	ne
 80080c8:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80080ca:	4a05      	ldreq	r2, [pc, #20]	; (80080e0 <SDMMC_CmdSendCSD+0x78>)
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80080cc:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80080ce:	6382      	streq	r2, [r0, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 80080d0:	4618      	mov	r0, r3
}
 80080d2:	4770      	bx	lr
 80080d4:	20000050 	.word	0x20000050
 80080d8:	fffee0c0 	.word	0xfffee0c0
 80080dc:	10624dd3 	.word	0x10624dd3
 80080e0:	002000c5 	.word	0x002000c5

080080e4 <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
 80080e4:	2300      	movs	r3, #0
{
 80080e6:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 80080e8:	6083      	str	r3, [r0, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80080ea:	4b24      	ldr	r3, [pc, #144]	; (800817c <SDMMC_CmdSetRelAdd+0x98>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 80080ec:	68c5      	ldr	r5, [r0, #12]
 80080ee:	4a24      	ldr	r2, [pc, #144]	; (8008180 <SDMMC_CmdSetRelAdd+0x9c>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80080f0:	4c24      	ldr	r4, [pc, #144]	; (8008184 <SDMMC_CmdSetRelAdd+0xa0>)
 80080f2:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 80080f4:	402a      	ands	r2, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80080f6:	fba4 4303 	umull	r4, r3, r4, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 80080fa:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80080fe:	0a5c      	lsrs	r4, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8008100:	f042 0203 	orr.w	r2, r2, #3
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008104:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8008108:	60c2      	str	r2, [r0, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800810a:	fb03 f304 	mul.w	r3, r3, r4
 800810e:	e003      	b.n	8008118 <SDMMC_CmdSetRelAdd+0x34>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8008110:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8008112:	f012 0f45 	tst.w	r2, #69	; 0x45
 8008116:	d106      	bne.n	8008126 <SDMMC_CmdSetRelAdd+0x42>
    if (count-- == 0U)
 8008118:	f113 33ff 	adds.w	r3, r3, #4294967295
 800811c:	d2f8      	bcs.n	8008110 <SDMMC_CmdSetRelAdd+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800811e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8008122:	bc30      	pop	{r4, r5}
 8008124:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008126:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008128:	075d      	lsls	r5, r3, #29
 800812a:	d504      	bpl.n	8008136 <SDMMC_CmdSetRelAdd+0x52>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800812c:	2304      	movs	r3, #4
 800812e:	6383      	str	r3, [r0, #56]	; 0x38
}
 8008130:	bc30      	pop	{r4, r5}
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008132:	4618      	mov	r0, r3
}
 8008134:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008136:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008138:	07dc      	lsls	r4, r3, #31
 800813a:	d405      	bmi.n	8008148 <SDMMC_CmdSetRelAdd+0x64>
  return (uint8_t)(SDMMCx->RESPCMD);
 800813c:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800813e:	b2db      	uxtb	r3, r3
 8008140:	2b03      	cmp	r3, #3
 8008142:	d005      	beq.n	8008150 <SDMMC_CmdSetRelAdd+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008144:	2001      	movs	r0, #1
 8008146:	e7ec      	b.n	8008122 <SDMMC_CmdSetRelAdd+0x3e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008148:	2301      	movs	r3, #1
 800814a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800814c:	4618      	mov	r0, r3
 800814e:	e7e8      	b.n	8008122 <SDMMC_CmdSetRelAdd+0x3e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008150:	4b0d      	ldr	r3, [pc, #52]	; (8008188 <SDMMC_CmdSetRelAdd+0xa4>)
 8008152:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8008154:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008156:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 800815a:	d004      	beq.n	8008166 <SDMMC_CmdSetRelAdd+0x82>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800815c:	045a      	lsls	r2, r3, #17
 800815e:	d505      	bpl.n	800816c <SDMMC_CmdSetRelAdd+0x88>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008160:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8008164:	e7dd      	b.n	8008122 <SDMMC_CmdSetRelAdd+0x3e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008166:	0c1b      	lsrs	r3, r3, #16
 8008168:	800b      	strh	r3, [r1, #0]
 800816a:	e7da      	b.n	8008122 <SDMMC_CmdSetRelAdd+0x3e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800816c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8008170:	bf14      	ite	ne
 8008172:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8008176:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800817a:	e7d2      	b.n	8008122 <SDMMC_CmdSetRelAdd+0x3e>
 800817c:	20000050 	.word	0x20000050
 8008180:	fffee0c0 	.word	0xfffee0c0
 8008184:	10624dd3 	.word	0x10624dd3
 8008188:	002000c5 	.word	0x002000c5

0800818c <SDMMC_CmdSwitch>:
{
 800818c:	b410      	push	{r4}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800818e:	4b1d      	ldr	r3, [pc, #116]	; (8008204 <SDMMC_CmdSwitch+0x78>)
  SDMMCx->ARG = Command->Argument;
 8008190:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8008192:	68c4      	ldr	r4, [r0, #12]
 8008194:	4a1c      	ldr	r2, [pc, #112]	; (8008208 <SDMMC_CmdSwitch+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008196:	491d      	ldr	r1, [pc, #116]	; (800820c <SDMMC_CmdSwitch+0x80>)
 8008198:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800819a:	4022      	ands	r2, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800819c:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 80081a0:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80081a4:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 80081a6:	f042 0206 	orr.w	r2, r2, #6
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80081aa:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 80081ae:	60c2      	str	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80081b0:	fb03 f301 	mul.w	r3, r3, r1
 80081b4:	e003      	b.n	80081be <SDMMC_CmdSwitch+0x32>
  }while(!__SDMMC_GET_FLAG(SDMMCx, flags));
 80081b6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80081b8:	f012 0f45 	tst.w	r2, #69	; 0x45
 80081bc:	d107      	bne.n	80081ce <SDMMC_CmdSwitch+0x42>
    if (count-- == 0U)
 80081be:	f113 33ff 	adds.w	r3, r3, #4294967295
 80081c2:	d2f8      	bcs.n	80081b6 <SDMMC_CmdSwitch+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 80081c4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80081c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081cc:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80081ce:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80081d0:	075a      	lsls	r2, r3, #29
 80081d2:	d505      	bpl.n	80081e0 <SDMMC_CmdSwitch+0x54>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80081d4:	2304      	movs	r3, #4
 80081d6:	6383      	str	r3, [r0, #56]	; 0x38
}
 80081d8:	f85d 4b04 	ldr.w	r4, [sp], #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80081dc:	4618      	mov	r0, r3
}
 80081de:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80081e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80081e2:	07db      	lsls	r3, r3, #31
 80081e4:	d405      	bmi.n	80081f2 <SDMMC_CmdSwitch+0x66>
  return (uint8_t)(SDMMCx->RESPCMD);
 80081e6:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	2b06      	cmp	r3, #6
 80081ec:	d005      	beq.n	80081fa <SDMMC_CmdSwitch+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80081ee:	2001      	movs	r0, #1
  return errorstate;
 80081f0:	e7ea      	b.n	80081c8 <SDMMC_CmdSwitch+0x3c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80081f2:	2301      	movs	r3, #1
 80081f4:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80081f6:	4618      	mov	r0, r3
 80081f8:	e7e6      	b.n	80081c8 <SDMMC_CmdSwitch+0x3c>
}
 80081fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081fe:	f7ff bc5b 	b.w	8007ab8 <SDMMC_GetCmdResp1.part.2>
 8008202:	bf00      	nop
 8008204:	20000050 	.word	0x20000050
 8008208:	fffee0c0 	.word	0xfffee0c0
 800820c:	10624dd3 	.word	0x10624dd3

08008210 <SDMMC_CmdVoltageSwitch>:
  SDMMCx->ARG = Command->Argument;
 8008210:	2300      	movs	r3, #0
{
 8008212:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 8008214:	6083      	str	r3, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008216:	4b1c      	ldr	r3, [pc, #112]	; (8008288 <SDMMC_CmdVoltageSwitch+0x78>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8008218:	68c4      	ldr	r4, [r0, #12]
 800821a:	4a1c      	ldr	r2, [pc, #112]	; (800828c <SDMMC_CmdVoltageSwitch+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800821c:	491c      	ldr	r1, [pc, #112]	; (8008290 <SDMMC_CmdVoltageSwitch+0x80>)
 800821e:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8008220:	4022      	ands	r2, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008222:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8008226:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800822a:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800822c:	f042 020b 	orr.w	r2, r2, #11
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008230:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8008234:	60c2      	str	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008236:	fb03 f301 	mul.w	r3, r3, r1
 800823a:	e003      	b.n	8008244 <SDMMC_CmdVoltageSwitch+0x34>
  }while(!__SDMMC_GET_FLAG(SDMMCx, flags));
 800823c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800823e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8008242:	d107      	bne.n	8008254 <SDMMC_CmdVoltageSwitch+0x44>
    if (count-- == 0U)
 8008244:	f113 33ff 	adds.w	r3, r3, #4294967295
 8008248:	d2f8      	bcs.n	800823c <SDMMC_CmdVoltageSwitch+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800824a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800824e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008252:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008254:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008256:	075a      	lsls	r2, r3, #29
 8008258:	d505      	bpl.n	8008266 <SDMMC_CmdVoltageSwitch+0x56>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800825a:	2304      	movs	r3, #4
 800825c:	6383      	str	r3, [r0, #56]	; 0x38
}
 800825e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008262:	4618      	mov	r0, r3
}
 8008264:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008266:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008268:	07db      	lsls	r3, r3, #31
 800826a:	d405      	bmi.n	8008278 <SDMMC_CmdVoltageSwitch+0x68>
  return (uint8_t)(SDMMCx->RESPCMD);
 800826c:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800826e:	b2db      	uxtb	r3, r3
 8008270:	2b0b      	cmp	r3, #11
 8008272:	d005      	beq.n	8008280 <SDMMC_CmdVoltageSwitch+0x70>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008274:	2001      	movs	r0, #1
  return errorstate;
 8008276:	e7ea      	b.n	800824e <SDMMC_CmdVoltageSwitch+0x3e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008278:	2301      	movs	r3, #1
 800827a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800827c:	4618      	mov	r0, r3
 800827e:	e7e6      	b.n	800824e <SDMMC_CmdVoltageSwitch+0x3e>
}
 8008280:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008284:	f7ff bc18 	b.w	8007ab8 <SDMMC_GetCmdResp1.part.2>
 8008288:	20000050 	.word	0x20000050
 800828c:	fffee0c0 	.word	0xfffee0c0
 8008290:	10624dd3 	.word	0x10624dd3

08008294 <VL53L1_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 8008294:	b570      	push	{r4, r5, r6, lr}
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
		Status = VL53L1_data_init(Dev, 1);
 8008296:	2101      	movs	r1, #1
{
 8008298:	4604      	mov	r4, r0
		Status = VL53L1_data_init(Dev, 1);
 800829a:	f000 fc0f 	bl	8008abc <VL53L1_data_init>

	if (Status == VL53L1_ERROR_NONE) {
 800829e:	4606      	mov	r6, r0
 80082a0:	bb38      	cbnz	r0, 80082f2 <VL53L1_DataInit+0x5e>

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 80082a2:	f8d4 1388 	ldr.w	r1, [r4, #904]	; 0x388
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 80082a6:	2308      	movs	r3, #8
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 80082a8:	2501      	movs	r5, #1
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 80082aa:	f884 337c 	strb.w	r3, [r4, #892]	; 0x37c
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 80082ae:	f3c1 318f 	ubfx	r1, r1, #14, #16
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 80082b2:	f884 5378 	strb.w	r5, [r4, #888]	; 0x378
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 80082b6:	4620      	mov	r0, r4
 80082b8:	f000 fee8 	bl	800908c <VL53L1_set_lite_sigma_threshold>
		break;
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 80082bc:	f8d4 138c 	ldr.w	r1, [r4, #908]	; 0x38c

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
	}

	if (Status == VL53L1_ERROR_NONE)
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80082c0:	f884 5384 	strb.w	r5, [r4, #900]	; 0x384
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 80082c4:	f3c1 214f 	ubfx	r1, r1, #9, #16
 80082c8:	4620      	mov	r0, r4
 80082ca:	f000 fee9 	bl	80090a0 <VL53L1_set_lite_min_count_rate>

		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
				LimitCheckId,
				LimitChecksEnable);

		if (LimitChecksEnable == 0) {
 80082ce:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80082d2:	f884 5385 	strb.w	r5, [r4, #901]	; 0x385
		if (LimitChecksEnable == 0) {
 80082d6:	b973      	cbnz	r3, 80082f6 <VL53L1_DataInit+0x62>
			/* disabled write only internal value */
			VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80082d8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80082dc:	f8c4 3388 	str.w	r3, [r4, #904]	; 0x388
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 80082e0:	2120      	movs	r1, #32
 80082e2:	4620      	mov	r0, r4
 80082e4:	f000 fedc 	bl	80090a0 <VL53L1_set_lite_min_count_rate>

			Status = SetLimitValue(Dev, LimitCheckId,
					LimitCheckValue);

			if (Status == VL53L1_ERROR_NONE) {
				VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80082e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80082ec:	f8c4 338c 	str.w	r3, [r4, #908]	; 0x38c
			Status = SetLimitValue(Dev, LimitCheckId,
 80082f0:	2600      	movs	r6, #0
}
 80082f2:	4630      	mov	r0, r6
 80082f4:	bd70      	pop	{r4, r5, r6, pc}
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 80082f6:	2148      	movs	r1, #72	; 0x48
 80082f8:	4620      	mov	r0, r4
 80082fa:	f000 fec7 	bl	800908c <VL53L1_set_lite_sigma_threshold>
		if (LimitChecksEnable == 0) {
 80082fe:	f894 3385 	ldrb.w	r3, [r4, #901]	; 0x385
				VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008302:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8008306:	f8c4 2388 	str.w	r2, [r4, #904]	; 0x388
		if (LimitChecksEnable == 0) {
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1e8      	bne.n	80082e0 <VL53L1_DataInit+0x4c>
			VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800830e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008312:	f8c4 338c 	str.w	r3, [r4, #908]	; 0x38c
}
 8008316:	4630      	mov	r0, r6
 8008318:	bd70      	pop	{r4, r5, r6, pc}
 800831a:	bf00      	nop

0800831c <VL53L1_WaitDeviceBooted>:
	Status = VL53L1_poll_for_boot_completion(Dev,
 800831c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008320:	f003 bc36 	b.w	800bb90 <VL53L1_poll_for_boot_completion>

08008324 <VL53L1_SetDistanceMode>:
{
 8008324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8008328:	1e4b      	subs	r3, r1, #1
 800832a:	b2db      	uxtb	r3, r3
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 800832c:	2b02      	cmp	r3, #2
{
 800832e:	b08c      	sub	sp, #48	; 0x30
	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8008330:	f890 637c 	ldrb.w	r6, [r0, #892]	; 0x37c
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 8008334:	f200 80e3 	bhi.w	80084fe <VL53L1_SetDistanceMode+0x1da>
		if ((DistanceMode == VL53L1_DISTANCEMODE_SHORT) ||
 8008338:	bf18      	it	ne
 800833a:	460f      	movne	r7, r1
 800833c:	460d      	mov	r5, r1
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 800833e:	a908      	add	r1, sp, #32
			InternalDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8008340:	bf08      	it	eq
 8008342:	2703      	moveq	r7, #3
 8008344:	4604      	mov	r4, r0
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 8008346:	f000 fd73 	bl	8008e30 <VL53L1_get_user_zone>
	if (Status == VL53L1_ERROR_NONE)
 800834a:	b110      	cbz	r0, 8008352 <VL53L1_SetDistanceMode+0x2e>
}
 800834c:	b00c      	add	sp, #48	; 0x30
 800834e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8008352:	ab05      	add	r3, sp, #20
 8008354:	aa06      	add	r2, sp, #24
 8008356:	a907      	add	r1, sp, #28
 8008358:	4620      	mov	r0, r4
	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 800835a:	f8d4 8014 	ldr.w	r8, [r4, #20]
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 800835e:	f000 fd07 	bl	8008d70 <VL53L1_get_timeouts_us>
	if (Status == VL53L1_ERROR_NONE)
 8008362:	2800      	cmp	r0, #0
 8008364:	d1f2      	bne.n	800834c <VL53L1_SetDistanceMode+0x28>
	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8008366:	2e03      	cmp	r6, #3
	VL53L1_DevicePresetModes LightModes[3] = {
 8008368:	f04f 0102 	mov.w	r1, #2
	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800836c:	f000 808d 	beq.w	800848a <VL53L1_SetDistanceMode+0x166>
 8008370:	2e08      	cmp	r6, #8
	VL53L1_DevicePresetModes LightModes[3] = {
 8008372:	f04f 0301 	mov.w	r3, #1
 8008376:	f04f 0203 	mov.w	r2, #3
	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800837a:	d02e      	beq.n	80083da <VL53L1_SetDistanceMode+0xb6>
	VL53L1_DevicePresetModes LightModes[3] = {
 800837c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8008380:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
	VL53L1_DevicePresetModes TimedModes[3] = {
 8008384:	2107      	movs	r1, #7
 8008386:	2206      	movs	r2, #6
 8008388:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800838c:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
 8008390:	2108      	movs	r1, #8
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8008392:	2224      	movs	r2, #36	; 0x24
	VL53L1_DevicePresetModes TimedModes[3] = {
 8008394:	f88d 102a 	strb.w	r1, [sp, #42]	; 0x2a
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8008398:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 800839c:	2125      	movs	r1, #37	; 0x25
 800839e:	2226      	movs	r2, #38	; 0x26
	switch (DistanceMode) {
 80083a0:	429f      	cmp	r7, r3
	VL53L1_DevicePresetModes LightModes[3] = {
 80083a2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 80083a6:	f88d 102d 	strb.w	r1, [sp, #45]	; 0x2d
 80083aa:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
	switch (DistanceMode) {
 80083ae:	f000 809e 	beq.w	80084ee <VL53L1_SetDistanceMode+0x1ca>
 80083b2:	2f02      	cmp	r7, #2
 80083b4:	f000 808a 	beq.w	80084cc <VL53L1_SetDistanceMode+0x1a8>
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 80083b8:	f04f 0920 	mov.w	r9, #32
 80083bc:	2302      	movs	r3, #2
	switch (PresetMode) {
 80083be:	2e04      	cmp	r6, #4
 80083c0:	f000 808b 	beq.w	80084da <VL53L1_SetDistanceMode+0x1b6>
 80083c4:	2e08      	cmp	r6, #8
 80083c6:	f000 808d 	beq.w	80084e4 <VL53L1_SetDistanceMode+0x1c0>
 80083ca:	2e03      	cmp	r6, #3
 80083cc:	f000 8092 	beq.w	80084f4 <VL53L1_SetDistanceMode+0x1d0>
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 80083d0:	f06f 0007 	mvn.w	r0, #7
}
 80083d4:	b00c      	add	sp, #48	; 0x30
 80083d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	VL53L1_DevicePresetModes LightModes[3] = {
 80083da:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	VL53L1_DevicePresetModes TimedModes[3] = {
 80083de:	2306      	movs	r3, #6
	VL53L1_DevicePresetModes LightModes[3] = {
 80083e0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80083e4:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
	VL53L1_DevicePresetModes TimedModes[3] = {
 80083e8:	2107      	movs	r1, #7
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 80083ea:	2224      	movs	r2, #36	; 0x24
 80083ec:	f04f 0a25 	mov.w	sl, #37	; 0x25
	VL53L1_DevicePresetModes TimedModes[3] = {
 80083f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
	switch (DistanceMode) {
 80083f4:	2f01      	cmp	r7, #1
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 80083f6:	f04f 0326 	mov.w	r3, #38	; 0x26
	VL53L1_DevicePresetModes TimedModes[3] = {
 80083fa:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 80083fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8008402:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8008406:	f88d a02d 	strb.w	sl, [sp, #45]	; 0x2d
 800840a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	switch (DistanceMode) {
 800840e:	d060      	beq.n	80084d2 <VL53L1_SetDistanceMode+0x1ae>
 8008410:	2f02      	cmp	r7, #2
 8008412:	d158      	bne.n	80084c6 <VL53L1_SetDistanceMode+0x1a2>
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8008414:	f04f 0940 	mov.w	r9, #64	; 0x40
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8008418:	aa0b      	add	r2, sp, #44	; 0x2c
 800841a:	ab0a      	add	r3, sp, #40	; 0x28
 800841c:	9201      	str	r2, [sp, #4]
 800841e:	9300      	str	r3, [sp, #0]
 8008420:	f10d 0212 	add.w	r2, sp, #18
 8008424:	ab09      	add	r3, sp, #36	; 0x24
 8008426:	4651      	mov	r1, sl
 8008428:	4620      	mov	r0, r4
 800842a:	f000 fd13 	bl	8008e54 <VL53L1_get_preset_mode_timing_cfg>
	if (Status == VL53L1_ERROR_NONE)
 800842e:	2800      	cmp	r0, #0
 8008430:	d18c      	bne.n	800834c <VL53L1_SetDistanceMode+0x28>
		Status = VL53L1_set_preset_mode(
 8008432:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008434:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008436:	9101      	str	r1, [sp, #4]
 8008438:	9000      	str	r0, [sp, #0]
 800843a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800843c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8008440:	f8cd 8008 	str.w	r8, [sp, #8]
 8008444:	4651      	mov	r1, sl
 8008446:	4620      	mov	r0, r4
 8008448:	f000 fd58 	bl	8008efc <VL53L1_set_preset_mode>
	if (Status == VL53L1_ERROR_NONE)
 800844c:	2800      	cmp	r0, #0
 800844e:	f47f af7d 	bne.w	800834c <VL53L1_SetDistanceMode+0x28>
		VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8008452:	f884 9002 	strb.w	r9, [r4, #2]
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8008456:	f884 637c 	strb.w	r6, [r4, #892]	; 0x37c
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 800845a:	f884 737e 	strb.w	r7, [r4, #894]	; 0x37e
		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 800845e:	f884 737f 	strb.w	r7, [r4, #895]	; 0x37f
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8008462:	f884 537d 	strb.w	r5, [r4, #893]	; 0x37d
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8008466:	9b05      	ldr	r3, [sp, #20]
 8008468:	9a06      	ldr	r2, [sp, #24]
 800846a:	9907      	ldr	r1, [sp, #28]
 800846c:	4620      	mov	r0, r4
 800846e:	f000 fc59 	bl	8008d24 <VL53L1_set_timeouts_us>
		if (Status == VL53L1_ERROR_NONE)
 8008472:	2800      	cmp	r0, #0
 8008474:	f47f af6a 	bne.w	800834c <VL53L1_SetDistanceMode+0x28>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8008478:	9b05      	ldr	r3, [sp, #20]
 800847a:	6123      	str	r3, [r4, #16]
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 800847c:	a908      	add	r1, sp, #32
 800847e:	4620      	mov	r0, r4
 8008480:	f000 fcc4 	bl	8008e0c <VL53L1_set_user_zone>
}
 8008484:	b00c      	add	sp, #48	; 0x30
 8008486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	VL53L1_DevicePresetModes LightModes[3] = {
 800848a:	2201      	movs	r2, #1
	VL53L1_DevicePresetModes TimedModes[3] = {
 800848c:	2307      	movs	r3, #7
	VL53L1_DevicePresetModes LightModes[3] = {
 800848e:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
	VL53L1_DevicePresetModes TimedModes[3] = {
 8008492:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8008496:	2208      	movs	r2, #8
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8008498:	2324      	movs	r3, #36	; 0x24
	VL53L1_DevicePresetModes TimedModes[3] = {
 800849a:	f04f 0a06 	mov.w	sl, #6
 800849e:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 80084a2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80084a6:	2225      	movs	r2, #37	; 0x25
 80084a8:	2326      	movs	r3, #38	; 0x26
	switch (DistanceMode) {
 80084aa:	2f01      	cmp	r7, #1
	VL53L1_DevicePresetModes LightModes[3] = {
 80084ac:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
 80084b0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
	VL53L1_DevicePresetModes TimedModes[3] = {
 80084b4:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 80084b8:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
 80084bc:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	switch (DistanceMode) {
 80084c0:	d007      	beq.n	80084d2 <VL53L1_SetDistanceMode+0x1ae>
 80084c2:	428f      	cmp	r7, r1
 80084c4:	d0a6      	beq.n	8008414 <VL53L1_SetDistanceMode+0xf0>
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 80084c6:	f04f 0940 	mov.w	r9, #64	; 0x40
 80084ca:	e777      	b.n	80083bc <VL53L1_SetDistanceMode+0x98>
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 80084cc:	f04f 0920 	mov.w	r9, #32
 80084d0:	e775      	b.n	80083be <VL53L1_SetDistanceMode+0x9a>
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 80084d2:	f04f 0940 	mov.w	r9, #64	; 0x40
 80084d6:	2300      	movs	r3, #0
 80084d8:	e771      	b.n	80083be <VL53L1_SetDistanceMode+0x9a>
		*pDevicePresetMode = LightModes[DistIdx];
 80084da:	aa0c      	add	r2, sp, #48	; 0x30
 80084dc:	4413      	add	r3, r2
 80084de:	f813 ac0c 	ldrb.w	sl, [r3, #-12]
 80084e2:	e799      	b.n	8008418 <VL53L1_SetDistanceMode+0xf4>
 80084e4:	aa0c      	add	r2, sp, #48	; 0x30
 80084e6:	4413      	add	r3, r2
 80084e8:	f813 ac04 	ldrb.w	sl, [r3, #-4]
 80084ec:	e794      	b.n	8008418 <VL53L1_SetDistanceMode+0xf4>
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 80084ee:	f04f 0920 	mov.w	r9, #32
 80084f2:	e7f0      	b.n	80084d6 <VL53L1_SetDistanceMode+0x1b2>
 80084f4:	aa0c      	add	r2, sp, #48	; 0x30
 80084f6:	4413      	add	r3, r2
 80084f8:	f813 ac08 	ldrb.w	sl, [r3, #-8]
 80084fc:	e78c      	b.n	8008418 <VL53L1_SetDistanceMode+0xf4>
		return VL53L1_ERROR_INVALID_PARAMS;
 80084fe:	f06f 0003 	mvn.w	r0, #3
 8008502:	e723      	b.n	800834c <VL53L1_SetDistanceMode+0x28>

08008504 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8008504:	4b3e      	ldr	r3, [pc, #248]	; (8008600 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>)
 8008506:	4299      	cmp	r1, r3
 8008508:	d902      	bls.n	8008510 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xc>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800850a:	f06f 0003 	mvn.w	r0, #3
}
 800850e:	4770      	bx	lr
{
 8008510:	b530      	push	{r4, r5, lr}
 8008512:	b087      	sub	sp, #28
 8008514:	460d      	mov	r5, r1
{
	VL53L1_Error Status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 8008516:	f10d 0206 	add.w	r2, sp, #6
 800851a:	2105      	movs	r1, #5
 800851c:	4604      	mov	r4, r0
 800851e:	f000 fc5f 	bl	8008de0 <VL53L1_get_sequence_config_bit>
	if (Status == VL53L1_ERROR_NONE) {
 8008522:	b9c0      	cbnz	r0, 8008556 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
	Status = VL53L1_get_sequence_config_bit(Dev,
 8008524:	f10d 0207 	add.w	r2, sp, #7
 8008528:	2106      	movs	r1, #6
 800852a:	4620      	mov	r0, r4
 800852c:	f000 fc58 	bl	8008de0 <VL53L1_get_sequence_config_bit>
	if (Status == VL53L1_ERROR_NONE)
 8008530:	b988      	cbnz	r0, 8008556 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_get_timeouts_us(Dev,
 8008532:	ab02      	add	r3, sp, #8
 8008534:	aa03      	add	r2, sp, #12
 8008536:	a904      	add	r1, sp, #16
 8008538:	4620      	mov	r0, r4
 800853a:	f000 fc19 	bl	8008d70 <VL53L1_get_timeouts_us>
	if (Status == VL53L1_ERROR_NONE) {
 800853e:	b950      	cbnz	r0, 8008556 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		switch (PresetMode) {
 8008540:	f894 337c 	ldrb.w	r3, [r4, #892]	; 0x37c
 8008544:	2b04      	cmp	r3, #4
 8008546:	d032      	beq.n	80085ae <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xaa>
 8008548:	2b08      	cmp	r3, #8
 800854a:	d01e      	beq.n	800858a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x86>
 800854c:	2b03      	cmp	r3, #3
 800854e:	d004      	beq.n	800855a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x56>
		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8008550:	b1bd      	cbz	r5, 8008582 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7e>
 8008552:	f06f 0007 	mvn.w	r0, #7
}
 8008556:	b007      	add	sp, #28
 8008558:	bd30      	pop	{r4, r5, pc}
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800855a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800855e:	2b01      	cmp	r3, #1
 8008560:	d045      	beq.n	80085ee <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xea>
 8008562:	f89d 0007 	ldrb.w	r0, [sp, #7]
			FDAMaxTimingBudgetUs *= 2;
 8008566:	4927      	ldr	r1, [pc, #156]	; (8008604 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x100>)
 8008568:	f246 73e8 	movw	r3, #26600	; 0x67e8
 800856c:	f245 4260 	movw	r2, #21600	; 0x5460
 8008570:	2801      	cmp	r0, #1
 8008572:	bf08      	it	eq
 8008574:	461a      	moveq	r2, r3
 8008576:	2302      	movs	r3, #2
		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8008578:	4295      	cmp	r5, r2
 800857a:	d902      	bls.n	8008582 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7e>
					- TimingGuard);
 800857c:	1aaa      	subs	r2, r5, r2
			if (TimingBudget > FDAMaxTimingBudgetUs)
 800857e:	428a      	cmp	r2, r1
 8008580:	d925      	bls.n	80085ce <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xca>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8008582:	f06f 0003 	mvn.w	r0, #3
}
 8008586:	b007      	add	sp, #28
 8008588:	bd30      	pop	{r4, r5, pc}
			VL53L1_get_tuning_parm(Dev,
 800858a:	aa05      	add	r2, sp, #20
 800858c:	f248 0136 	movw	r1, #32822	; 0x8036
 8008590:	4620      	mov	r0, r4
 8008592:	f001 f8a5 	bl	80096e0 <VL53L1_get_tuning_parm>
			if (vhv_loops > 0) {
 8008596:	9b05      	ldr	r3, [sp, #20]
			FDAMaxTimingBudgetUs *= 2;
 8008598:	491a      	ldr	r1, [pc, #104]	; (8008604 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x100>)
			if (vhv_loops > 0) {
 800859a:	2b00      	cmp	r3, #0
				vhv += vhv_loops *
 800859c:	bfc3      	ittte	gt
 800859e:	22f5      	movgt	r2, #245	; 0xf5
 80085a0:	435a      	mulgt	r2, r3
 80085a2:	f602 62d1 	addwgt	r2, r2, #3793	; 0xed1
 80085a6:	f640 62d1 	movwle	r2, #3793	; 0xed1
			divisor = 2;
 80085aa:	2302      	movs	r3, #2
		break;
 80085ac:	e7e4      	b.n	8008578 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x74>
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80085ae:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d020      	beq.n	80085f8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf4>
 80085b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 80085ba:	4913      	ldr	r1, [pc, #76]	; (8008608 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x104>)
 80085bc:	2b01      	cmp	r3, #1
 80085be:	f241 3288 	movw	r2, #5000	; 0x1388
 80085c2:	f04f 0301 	mov.w	r3, #1
 80085c6:	bf18      	it	ne
 80085c8:	f44f 727a 	movne.w	r2, #1000	; 0x3e8
 80085cc:	e7d4      	b.n	8008578 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x74>
				TimingBudget /= divisor;
 80085ce:	fbb2 f3f3 	udiv	r3, r2, r3
				Status = VL53L1_set_timeouts_us(
 80085d2:	9904      	ldr	r1, [sp, #16]
 80085d4:	9a03      	ldr	r2, [sp, #12]
				TimingBudget /= divisor;
 80085d6:	9302      	str	r3, [sp, #8]
				Status = VL53L1_set_timeouts_us(
 80085d8:	4620      	mov	r0, r4
 80085da:	f000 fba3 	bl	8008d24 <VL53L1_set_timeouts_us>
			if (Status == VL53L1_ERROR_NONE)
 80085de:	2800      	cmp	r0, #0
 80085e0:	d1b9      	bne.n	8008556 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
				VL53L1DevDataSet(Dev,
 80085e2:	9b02      	ldr	r3, [sp, #8]
		VL53L1DevDataSet(Dev,
 80085e4:	f8c4 5380 	str.w	r5, [r4, #896]	; 0x380
				VL53L1DevDataSet(Dev,
 80085e8:	6123      	str	r3, [r4, #16]
}
 80085ea:	b007      	add	sp, #28
 80085ec:	bd30      	pop	{r4, r5, pc}
			FDAMaxTimingBudgetUs *= 2;
 80085ee:	4905      	ldr	r1, [pc, #20]	; (8008604 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x100>)
			divisor = 2;
 80085f0:	2302      	movs	r3, #2
				TimingGuard = 26600;
 80085f2:	f246 72e8 	movw	r2, #26600	; 0x67e8
 80085f6:	e7bf      	b.n	8008578 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x74>
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 80085f8:	4903      	ldr	r1, [pc, #12]	; (8008608 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x104>)
				TimingGuard = 5000;
 80085fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80085fe:	e7bb      	b.n	8008578 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x74>
 8008600:	00989680 	.word	0x00989680
 8008604:	0010c8e0 	.word	0x0010c8e0
 8008608:	00086470 	.word	0x00086470

0800860c <VL53L1_StaticInit>:
{
 800860c:	b530      	push	{r4, r5, lr}
 800860e:	b089      	sub	sp, #36	; 0x24
	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8008610:	2503      	movs	r5, #3
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8008612:	2120      	movs	r1, #32
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8008614:	aa07      	add	r2, sp, #28
 8008616:	ab06      	add	r3, sp, #24
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8008618:	7081      	strb	r1, [r0, #2]
	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 800861a:	f880 5378 	strb.w	r5, [r0, #888]	; 0x378
	VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 800861e:	f880 537f 	strb.w	r5, [r0, #895]	; 0x37f
	VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8008622:	f880 537e 	strb.w	r5, [r0, #894]	; 0x37e
	VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8008626:	f880 537d 	strb.w	r5, [r0, #893]	; 0x37d
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 800862a:	2126      	movs	r1, #38	; 0x26
 800862c:	9201      	str	r2, [sp, #4]
 800862e:	9300      	str	r3, [sp, #0]
 8008630:	f10d 0212 	add.w	r2, sp, #18
 8008634:	ab05      	add	r3, sp, #20
{
 8008636:	4604      	mov	r4, r0
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8008638:	f000 fc0c 	bl	8008e54 <VL53L1_get_preset_mode_timing_cfg>
	if (Status == VL53L1_ERROR_NONE)
 800863c:	b108      	cbz	r0, 8008642 <VL53L1_StaticInit+0x36>
}
 800863e:	b009      	add	sp, #36	; 0x24
 8008640:	bd30      	pop	{r4, r5, pc}
		Status = VL53L1_set_preset_mode(
 8008642:	9807      	ldr	r0, [sp, #28]
 8008644:	9906      	ldr	r1, [sp, #24]
 8008646:	9001      	str	r0, [sp, #4]
 8008648:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800864c:	9002      	str	r0, [sp, #8]
 800864e:	9100      	str	r1, [sp, #0]
 8008650:	9b05      	ldr	r3, [sp, #20]
 8008652:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8008656:	2126      	movs	r1, #38	; 0x26
 8008658:	4620      	mov	r0, r4
 800865a:	f000 fc4f 	bl	8008efc <VL53L1_set_preset_mode>
	if (Status == VL53L1_ERROR_NONE)
 800865e:	2800      	cmp	r0, #0
 8008660:	d1ed      	bne.n	800863e <VL53L1_StaticInit+0x32>
		VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8008662:	2240      	movs	r2, #64	; 0x40
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8008664:	2308      	movs	r3, #8
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8008666:	f884 537e 	strb.w	r5, [r4, #894]	; 0x37e
		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 800866a:	f884 537f 	strb.w	r5, [r4, #895]	; 0x37f
		VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 800866e:	70a2      	strb	r2, [r4, #2]
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8008670:	f884 337c 	strb.w	r3, [r4, #892]	; 0x37c
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8008674:	f24a 0128 	movw	r1, #41000	; 0xa028
 8008678:	4620      	mov	r0, r4
 800867a:	f7ff ff43 	bl	8008504 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
	if (Status == VL53L1_ERROR_NONE) {
 800867e:	2800      	cmp	r0, #0
 8008680:	d1dd      	bne.n	800863e <VL53L1_StaticInit+0x32>
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8008682:	4620      	mov	r0, r4
 8008684:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8008688:	f000 fb30 	bl	8008cec <VL53L1_set_inter_measurement_period_ms>
}
 800868c:	b009      	add	sp, #36	; 0x24
 800868e:	bd30      	pop	{r4, r5, pc}

08008690 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:
{
 8008690:	b570      	push	{r4, r5, r6, lr}
	uint8_t Mm1Enabled = 0;
 8008692:	2300      	movs	r3, #0
{
 8008694:	b086      	sub	sp, #24
	*pMeasurementTimingBudgetMicroSeconds = 0;
 8008696:	600b      	str	r3, [r1, #0]
{
 8008698:	460d      	mov	r5, r1
	Status = VL53L1_get_sequence_config_bit(Dev,
 800869a:	f10d 0206 	add.w	r2, sp, #6
 800869e:	2105      	movs	r1, #5
	uint8_t Mm1Enabled = 0;
 80086a0:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t Mm2Enabled = 0;
 80086a4:	f88d 3007 	strb.w	r3, [sp, #7]
	uint32_t  MmTimeoutUs = 0;
 80086a8:	9302      	str	r3, [sp, #8]
	uint32_t  RangeTimeoutUs = 0;
 80086aa:	9303      	str	r3, [sp, #12]
	uint32_t PhaseCalTimeoutUs = 0;
 80086ac:	9304      	str	r3, [sp, #16]
{
 80086ae:	4606      	mov	r6, r0
	Status = VL53L1_get_sequence_config_bit(Dev,
 80086b0:	f000 fb96 	bl	8008de0 <VL53L1_get_sequence_config_bit>
	if (Status == VL53L1_ERROR_NONE)
 80086b4:	4604      	mov	r4, r0
 80086b6:	b110      	cbz	r0, 80086be <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x2e>
}
 80086b8:	4620      	mov	r0, r4
 80086ba:	b006      	add	sp, #24
 80086bc:	bd70      	pop	{r4, r5, r6, pc}
	Status = VL53L1_get_sequence_config_bit(Dev,
 80086be:	f10d 0207 	add.w	r2, sp, #7
 80086c2:	2106      	movs	r1, #6
 80086c4:	4630      	mov	r0, r6
 80086c6:	f000 fb8b 	bl	8008de0 <VL53L1_get_sequence_config_bit>
	if (Status == VL53L1_ERROR_NONE)
 80086ca:	4604      	mov	r4, r0
 80086cc:	2800      	cmp	r0, #0
 80086ce:	d1f3      	bne.n	80086b8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x28>
		Status = VL53L1_get_timeouts_us(Dev,
 80086d0:	ab03      	add	r3, sp, #12
 80086d2:	aa02      	add	r2, sp, #8
 80086d4:	a904      	add	r1, sp, #16
 80086d6:	4630      	mov	r0, r6
 80086d8:	f000 fb4a 	bl	8008d70 <VL53L1_get_timeouts_us>
	if (Status == VL53L1_ERROR_NONE) {
 80086dc:	4604      	mov	r4, r0
 80086de:	2800      	cmp	r0, #0
 80086e0:	d1ea      	bne.n	80086b8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x28>
		switch (PresetMode) {
 80086e2:	f896 337c 	ldrb.w	r3, [r6, #892]	; 0x37c
 80086e6:	2b04      	cmp	r3, #4
 80086e8:	d02c      	beq.n	8008744 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xb4>
 80086ea:	2b08      	cmp	r3, #8
 80086ec:	d017      	beq.n	800871e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x8e>
 80086ee:	2b03      	cmp	r3, #3
 80086f0:	d004      	beq.n	80086fc <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x6c>
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 80086f2:	f06f 0407 	mvn.w	r4, #7
}
 80086f6:	4620      	mov	r0, r4
 80086f8:	b006      	add	sp, #24
 80086fa:	bd70      	pop	{r4, r5, r6, pc}
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80086fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008700:	2b01      	cmp	r3, #1
 8008702:	d02b      	beq.n	800875c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xcc>
 8008704:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008708:	2b01      	cmp	r3, #1
 800870a:	d027      	beq.n	800875c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xcc>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 800870c:	9b03      	ldr	r3, [sp, #12]
 800870e:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8008712:	3330      	adds	r3, #48	; 0x30
 8008714:	005b      	lsls	r3, r3, #1
}
 8008716:	4620      	mov	r0, r4
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 8008718:	602b      	str	r3, [r5, #0]
}
 800871a:	b006      	add	sp, #24
 800871c:	bd70      	pop	{r4, r5, r6, pc}
			VL53L1_get_tuning_parm(Dev,
 800871e:	aa05      	add	r2, sp, #20
 8008720:	4630      	mov	r0, r6
 8008722:	f248 0136 	movw	r1, #32822	; 0x8036
 8008726:	f000 ffdb 	bl	80096e0 <VL53L1_get_tuning_parm>
			if (vhv_loops > 0) {
 800872a:	9a05      	ldr	r2, [sp, #20]
				vhv += vhv_loops *
 800872c:	23f5      	movs	r3, #245	; 0xf5
			if (vhv_loops > 0) {
 800872e:	2a00      	cmp	r2, #0
				vhv += vhv_loops *
 8008730:	bfc8      	it	gt
 8008732:	4353      	mulgt	r3, r2
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8008734:	9a03      	ldr	r2, [sp, #12]
				vhv += vhv_loops *
 8008736:	bfc8      	it	gt
 8008738:	33f5      	addgt	r3, #245	; 0xf5
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 800873a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800873e:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
		break;
 8008742:	e7e8      	b.n	8008716 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8008744:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008748:	2b01      	cmp	r3, #1
 800874a:	d00d      	beq.n	8008768 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xd8>
 800874c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d009      	beq.n	8008768 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xd8>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 8008754:	9b03      	ldr	r3, [sp, #12]
 8008756:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800875a:	e7dc      	b.n	8008716 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 800875c:	9b03      	ldr	r3, [sp, #12]
 800875e:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 8008762:	3334      	adds	r3, #52	; 0x34
 8008764:	005b      	lsls	r3, r3, #1
 8008766:	e7d6      	b.n	8008716 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8008768:	9b03      	ldr	r3, [sp, #12]
 800876a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800876e:	3308      	adds	r3, #8
 8008770:	e7d1      	b.n	8008716 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
 8008772:	bf00      	nop

08008774 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:
	adjustedIMP += (adjustedIMP * 64) / 1000;
 8008774:	4a03      	ldr	r2, [pc, #12]	; (8008784 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x10>)
 8008776:	018b      	lsls	r3, r1, #6
 8008778:	fba2 2303 	umull	r2, r3, r2, r3
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 800877c:	eb01 1193 	add.w	r1, r1, r3, lsr #6
 8008780:	f000 bab4 	b.w	8008cec <VL53L1_set_inter_measurement_period_ms>
 8008784:	10624dd3 	.word	0x10624dd3

08008788 <VL53L1_StartMeasurement>:
	uint32_t MTBus, IMPms;

	LOG_FUNCTION_START("");

	CurrPalState = VL53L1DevDataGet(Dev, PalState);
	switch (CurrPalState) {
 8008788:	f890 3378 	ldrb.w	r3, [r0, #888]	; 0x378
 800878c:	2b05      	cmp	r3, #5
 800878e:	d814      	bhi.n	80087ba <VL53L1_StartMeasurement+0x32>
 8008790:	2b04      	cmp	r3, #4
 8008792:	d215      	bcs.n	80087c0 <VL53L1_StartMeasurement+0x38>
 8008794:	2b02      	cmp	r3, #2
 8008796:	d913      	bls.n	80087c0 <VL53L1_StartMeasurement+0x38>
{
 8008798:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		Status = VL53L1_ERROR_UNDEFINED;
	}

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800879a:	7885      	ldrb	r5, [r0, #2]

	/* Check timing configuration between timing budget and
	* inter measurement period */
	if ((Status == VL53L1_ERROR_NONE) &&
 800879c:	2d40      	cmp	r5, #64	; 0x40
{
 800879e:	b082      	sub	sp, #8
 80087a0:	4604      	mov	r4, r0
	if ((Status == VL53L1_ERROR_NONE) &&
 80087a2:	d013      	beq.n	80087cc <VL53L1_StartMeasurement+0x44>
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
			Status = VL53L1_ERROR_INVALID_PARAMS;
	}

	if (Status == VL53L1_ERROR_NONE)
		Status = VL53L1_init_and_start_range(
 80087a4:	4629      	mov	r1, r5
 80087a6:	2206      	movs	r2, #6
 80087a8:	4620      	mov	r0, r4
 80087aa:	f000 fc7d 	bl	80090a8 <VL53L1_init_and_start_range>
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 80087ae:	b910      	cbnz	r0, 80087b6 <VL53L1_StartMeasurement+0x2e>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 80087b0:	2304      	movs	r3, #4
 80087b2:	f884 3378 	strb.w	r3, [r4, #888]	; 0x378


	LOG_FUNCTION_END(Status);
	return Status;
}
 80087b6:	b002      	add	sp, #8
 80087b8:	bd70      	pop	{r4, r5, r6, pc}
	switch (CurrPalState) {
 80087ba:	3b62      	subs	r3, #98	; 0x62
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d802      	bhi.n	80087c6 <VL53L1_StartMeasurement+0x3e>
		Status = VL53L1_ERROR_INVALID_COMMAND;
 80087c0:	f06f 000d 	mvn.w	r0, #13
 80087c4:	4770      	bx	lr
		Status = VL53L1_ERROR_UNDEFINED;
 80087c6:	f06f 0002 	mvn.w	r0, #2
 80087ca:	4770      	bx	lr
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80087cc:	4669      	mov	r1, sp
 80087ce:	f7ff ff5f 	bl	8008690 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
		MTBus /= 1000;
 80087d2:	4e0b      	ldr	r6, [pc, #44]	; (8008800 <VL53L1_StartMeasurement+0x78>)
 80087d4:	9b00      	ldr	r3, [sp, #0]
 80087d6:	fba6 2303 	umull	r2, r3, r6, r3
 80087da:	099b      	lsrs	r3, r3, #6
	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 80087dc:	a901      	add	r1, sp, #4
 80087de:	4620      	mov	r0, r4
		MTBus /= 1000;
 80087e0:	9300      	str	r3, [sp, #0]
	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 80087e2:	f000 fa91 	bl	8008d08 <VL53L1_get_inter_measurement_period_ms>
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 80087e6:	e89d 000c 	ldmia.w	sp, {r2, r3}
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 80087ea:	0199      	lsls	r1, r3, #6
 80087ec:	fba6 0101 	umull	r0, r1, r6, r1
 80087f0:	eba3 1391 	sub.w	r3, r3, r1, lsr #6
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 80087f4:	3204      	adds	r2, #4
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d9d4      	bls.n	80087a4 <VL53L1_StartMeasurement+0x1c>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 80087fa:	f06f 0003 	mvn.w	r0, #3
	return Status;
 80087fe:	e7da      	b.n	80087b6 <VL53L1_StartMeasurement+0x2e>
 8008800:	10624dd3 	.word	0x10624dd3

08008804 <VL53L1_StopMeasurement>:

VL53L1_Error VL53L1_StopMeasurement(VL53L1_DEV Dev)
{
 8008804:	b510      	push	{r4, lr}
 8008806:	4604      	mov	r4, r0
	VL53L1_Error Status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	Status = VL53L1_stop_range(Dev);
 8008808:	f000 fd40 	bl	800928c <VL53L1_stop_range>

	/* Set PAL State to Idle */
	if (Status == VL53L1_ERROR_NONE)
 800880c:	b910      	cbnz	r0, 8008814 <VL53L1_StopMeasurement+0x10>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 800880e:	2303      	movs	r3, #3
 8008810:	f884 3378 	strb.w	r3, [r4, #888]	; 0x378

	LOG_FUNCTION_END(Status);
	return Status;
}
 8008814:	bd10      	pop	{r4, pc}
 8008816:	bf00      	nop

08008818 <VL53L1_ClearInterruptAndStartMeasurement>:
//		Status = ChangePresetMode(Dev);
//	else
//		Status = VL53L1_clear_interrupt_and_enable_next_range(
//						Dev,
//						DeviceMeasurementMode);
	Status = VL53L1_clear_interrupt_and_enable_next_range(
 8008818:	7881      	ldrb	r1, [r0, #2]
 800881a:	f000 bd5b 	b.w	80092d4 <VL53L1_clear_interrupt_and_enable_next_range>
 800881e:	bf00      	nop

08008820 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 8008820:	b5f0      	push	{r4, r5, r6, r7, lr}

	//LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 8008822:	f04f 33ff 	mov.w	r3, #4294967295
{
 8008826:	b0a3      	sub	sp, #140	; 0x8c
 8008828:	460c      	mov	r4, r1
	memset(pRangingMeasurementData, 0xFF,
 800882a:	600b      	str	r3, [r1, #0]
 800882c:	604b      	str	r3, [r1, #4]
 800882e:	608b      	str	r3, [r1, #8]
 8008830:	60cb      	str	r3, [r1, #12]
 8008832:	610b      	str	r3, [r1, #16]
 8008834:	614b      	str	r3, [r1, #20]
 8008836:	618b      	str	r3, [r1, #24]
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 8008838:	aa01      	add	r2, sp, #4
 800883a:	2102      	movs	r1, #2
{
 800883c:	4605      	mov	r5, r0
	Status = VL53L1_get_device_results(
 800883e:	f000 feb1 	bl	80095a4 <VL53L1_get_device_results>
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 8008842:	b108      	cbz	r0, 8008848 <VL53L1_GetRangingMeasurementData+0x28>
				pRangingMeasurementData);
	}

	//LOG_FUNCTION_END(Status);
	return Status;
}
 8008844:	b023      	add	sp, #140	; 0x8c
 8008846:	bdf0      	pop	{r4, r5, r6, r7, pc}
	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8008848:	f89d 6046 	ldrb.w	r6, [sp, #70]	; 0x46
		pRangingMeasurementData->StreamCount = presults->stream_count;
 800884c:	f89d 2006 	ldrb.w	r2, [sp, #6]
	pRangeData->TimeStamp = presults_data->time_stamp;
 8008850:	9b03      	ldr	r3, [sp, #12]
		pRangingMeasurementData->StreamCount = presults->stream_count;
 8008852:	7122      	strb	r2, [r4, #4]
	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8008854:	f006 061f 	and.w	r6, r6, #31
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 8008858:	2e07      	cmp	r6, #7
	pRangeData->TimeStamp = presults_data->time_stamp;
 800885a:	6023      	str	r3, [r4, #0]
		Status = SetSimpleData(Dev, 1,
 800885c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8008860:	f9bd 7044 	ldrsh.w	r7, [sp, #68]	; 0x44
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 8008864:	f000 8094 	beq.w	8008990 <VL53L1_GetRangingMeasurementData+0x170>
		if (presults_data->median_range_mm < SRL)
 8008868:	f5b7 7f96 	cmp.w	r7, #300	; 0x12c
 800886c:	f2c0 8082 	blt.w	8008974 <VL53L1_GetRangingMeasurementData+0x154>
			RAS = LRAP * presults_data->median_range_mm;
 8008870:	f641 129a 	movw	r2, #6554	; 0x199a
 8008874:	fb17 fe02 	smulbb	lr, r7, r2
 8008878:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
			partial = (GGm * presults_data->sigma_mm);
 800887c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8008880:	4a56      	ldr	r2, [pc, #344]	; (80089dc <VL53L1_GetRangingMeasurementData+0x1bc>)
			if (partial <= GI)
 8008882:	4857      	ldr	r0, [pc, #348]	; (80089e0 <VL53L1_GetRangingMeasurementData+0x1c0>)
			partial = partial + (RAS >> 1);
 8008884:	fb02 c203 	mla	r2, r2, r3, ip
			partial = partial / RAS;
 8008888:	fbb2 f2fe 	udiv	r2, r2, lr
			partial = partial * 65536;
 800888c:	0412      	lsls	r2, r2, #16
			if (partial <= GI)
 800888e:	4282      	cmp	r2, r0
 8008890:	d806      	bhi.n	80088a0 <VL53L1_GetRangingMeasurementData+0x80>
				SRQL = GI - partial;
 8008892:	1a82      	subs	r2, r0, r2
		finalvalue = (uint8_t)(SRQL >> 16);
 8008894:	0c12      	lsrs	r2, r2, #16
		returnvalue = MAX(50, MIN(100, finalvalue));
 8008896:	2a32      	cmp	r2, #50	; 0x32
		finalvalue = (uint8_t)(SRQL >> 16);
 8008898:	fa5f fe82 	uxtb.w	lr, r2
		returnvalue = MAX(50, MIN(100, finalvalue));
 800889c:	f200 8097 	bhi.w	80089ce <VL53L1_GetRangingMeasurementData+0x1ae>
 80088a0:	f04f 0e32 	mov.w	lr, #50	; 0x32
	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80088a4:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80088a8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 80088ac:	8327      	strh	r7, [r4, #24]
	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80088ae:	0240      	lsls	r0, r0, #9
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80088b0:	025b      	lsls	r3, r3, #9
	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80088b2:	0252      	lsls	r2, r2, #9
	pRangeData->EffectiveSpadRtnCount =
 80088b4:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 80088b8:	60e0      	str	r0, [r4, #12]
	switch (device_status) {
 80088ba:	3901      	subs	r1, #1
	pRangeData->RangeFractionalPart = 0;
 80088bc:	2000      	movs	r0, #0
	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 80088be:	f884 e005 	strb.w	lr, [r4, #5]
	pRangeData->SigmaMilliMeter = TempFix1616;
 80088c2:	6163      	str	r3, [r4, #20]
		= SignalRate;
 80088c4:	60a2      	str	r2, [r4, #8]
	pRangeData->EffectiveSpadRtnCount =
 80088c6:	8227      	strh	r7, [r4, #16]
	pRangeData->RangeFractionalPart = 0;
 80088c8:	76a0      	strb	r0, [r4, #26]
	switch (device_status) {
 80088ca:	2910      	cmp	r1, #16
 80088cc:	d857      	bhi.n	800897e <VL53L1_GetRangingMeasurementData+0x15e>
 80088ce:	e8df f001 	tbb	[pc, r1]
 80088d2:	4e4e      	.short	0x4e4e
 80088d4:	5656564e 	.word	0x5656564e
 80088d8:	56565656 	.word	0x56565656
 80088dc:	56095656 	.word	0x56095656
 80088e0:	5656      	.short	0x5656
 80088e2:	4e          	.byte	0x4e
 80088e3:	00          	.byte	0x00
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 80088e4:	210d      	movs	r1, #13
 80088e6:	76e1      	strb	r1, [r4, #27]
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80088e8:	f8c5 3390 	str.w	r3, [r5, #912]	; 0x390
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80088ec:	f8c5 2394 	str.w	r2, [r5, #916]	; 0x394
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 80088f0:	f10d 0102 	add.w	r1, sp, #2
 80088f4:	4628      	mov	r0, r5
 80088f6:	f000 fbc3 	bl	8009080 <VL53L1_get_lite_sigma_threshold>
	if (Status == VL53L1_ERROR_NONE) {
 80088fa:	2800      	cmp	r0, #0
 80088fc:	d15a      	bne.n	80089b4 <VL53L1_GetRangingMeasurementData+0x194>
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 80088fe:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		if (TempFix1616 == 0) {
 8008902:	0393      	lsls	r3, r2, #14
 8008904:	2a00      	cmp	r2, #0
 8008906:	d05f      	beq.n	80089c8 <VL53L1_GetRangingMeasurementData+0x1a8>
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008908:	2201      	movs	r2, #1
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800890a:	f8c5 3388 	str.w	r3, [r5, #904]	; 0x388
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800890e:	f885 2384 	strb.w	r2, [r5, #900]	; 0x384
 8008912:	f1a6 0306 	sub.w	r3, r6, #6
 8008916:	fab3 f383 	clz	r3, r3
 800891a:	095b      	lsrs	r3, r3, #5
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800891c:	f885 3386 	strb.w	r3, [r5, #902]	; 0x386
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 8008920:	f10d 0102 	add.w	r1, sp, #2
 8008924:	4628      	mov	r0, r5
 8008926:	f000 fbb5 	bl	8009094 <VL53L1_get_lite_min_count_rate>
	if (Status == VL53L1_ERROR_NONE) {
 800892a:	2800      	cmp	r0, #0
 800892c:	d135      	bne.n	800899a <VL53L1_GetRangingMeasurementData+0x17a>
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 800892e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		if (TempFix1616 == 0) {
 8008932:	0253      	lsls	r3, r2, #9
 8008934:	2a00      	cmp	r2, #0
 8008936:	d043      	beq.n	80089c0 <VL53L1_GetRangingMeasurementData+0x1a0>
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008938:	2201      	movs	r2, #1
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800893a:	f8c5 338c 	str.w	r3, [r5, #908]	; 0x38c
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800893e:	f885 2385 	strb.w	r2, [r5, #901]	; 0x385
 8008942:	f1a6 0604 	sub.w	r6, r6, #4
 8008946:	fab6 f686 	clz	r6, r6
 800894a:	0976      	lsrs	r6, r6, #5
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800894c:	f885 6387 	strb.w	r6, [r5, #903]	; 0x387
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8008950:	7ee0      	ldrb	r0, [r4, #27]
 8008952:	bb60      	cbnz	r0, 80089ae <VL53L1_GetRangingMeasurementData+0x18e>
	Range = pRangeData->RangeMilliMeter;
 8008954:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8008958:	2b00      	cmp	r3, #0
 800895a:	f6bf af73 	bge.w	8008844 <VL53L1_GetRangingMeasurementData+0x24>
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 800895e:	4a21      	ldr	r2, [pc, #132]	; (80089e4 <VL53L1_GetRangingMeasurementData+0x1c4>)
 8008960:	6852      	ldr	r2, [r2, #4]
 8008962:	4293      	cmp	r3, r2
			pRangeData->RangeStatus =
 8008964:	bfba      	itte	lt
 8008966:	230e      	movlt	r3, #14
 8008968:	76e3      	strblt	r3, [r4, #27]
			pRangeData->RangeMilliMeter = 0;
 800896a:	8320      	strhge	r0, [r4, #24]
 800896c:	e76a      	b.n	8008844 <VL53L1_GetRangingMeasurementData+0x24>
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 800896e:	2105      	movs	r1, #5
 8008970:	76e1      	strb	r1, [r4, #27]
 8008972:	e7b9      	b.n	80088e8 <VL53L1_GetRangingMeasurementData+0xc8>
		if (presults_data->median_range_mm < SRL)
 8008974:	f44f 2c70 	mov.w	ip, #983040	; 0xf0000
			RAS = SRAS * 65536;
 8008978:	f44f 1ef0 	mov.w	lr, #1966080	; 0x1e0000
 800897c:	e77e      	b.n	800887c <VL53L1_GetRangingMeasurementData+0x5c>
 800897e:	1f31      	subs	r1, r6, #4
 8008980:	b2c9      	uxtb	r1, r1
 8008982:	290f      	cmp	r1, #15
 8008984:	bf96      	itet	ls
 8008986:	4818      	ldrls	r0, [pc, #96]	; (80089e8 <VL53L1_GetRangingMeasurementData+0x1c8>)
 8008988:	21ff      	movhi	r1, #255	; 0xff
 800898a:	5c41      	ldrbls	r1, [r0, r1]
			pRangeData->RangeStatus =
 800898c:	76e1      	strb	r1, [r4, #27]
 800898e:	e7ab      	b.n	80088e8 <VL53L1_GetRangingMeasurementData+0xc8>
 8008990:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
		returnvalue = 50;
 8008994:	f04f 0e32 	mov.w	lr, #50	; 0x32
 8008998:	e784      	b.n	80088a4 <VL53L1_GetRangingMeasurementData+0x84>
 800899a:	f895 3385 	ldrb.w	r3, [r5, #901]	; 0x385
	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d0cf      	beq.n	8008942 <VL53L1_GetRangingMeasurementData+0x122>
 80089a2:	2600      	movs	r6, #0
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80089a4:	f885 6387 	strb.w	r6, [r5, #903]	; 0x387
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 80089a8:	7ee0      	ldrb	r0, [r4, #27]
 80089aa:	2800      	cmp	r0, #0
 80089ac:	d0d2      	beq.n	8008954 <VL53L1_GetRangingMeasurementData+0x134>
		Status = SetSimpleData(Dev, 1,
 80089ae:	2000      	movs	r0, #0
}
 80089b0:	b023      	add	sp, #140	; 0x8c
 80089b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089b4:	f895 3384 	ldrb.w	r3, [r5, #900]	; 0x384
	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d0aa      	beq.n	8008912 <VL53L1_GetRangingMeasurementData+0xf2>
 80089bc:	2300      	movs	r3, #0
 80089be:	e7ad      	b.n	800891c <VL53L1_GetRangingMeasurementData+0xfc>
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80089c0:	f885 3385 	strb.w	r3, [r5, #901]	; 0x385
 80089c4:	461e      	mov	r6, r3
 80089c6:	e7c1      	b.n	800894c <VL53L1_GetRangingMeasurementData+0x12c>
 80089c8:	f885 3384 	strb.w	r3, [r5, #900]	; 0x384
 80089cc:	e7a6      	b.n	800891c <VL53L1_GetRangingMeasurementData+0xfc>
		returnvalue = MAX(50, MIN(100, finalvalue));
 80089ce:	f1be 0f64 	cmp.w	lr, #100	; 0x64
 80089d2:	bf28      	it	cs
 80089d4:	f04f 0e64 	movcs.w	lr, #100	; 0x64
 80089d8:	e764      	b.n	80088a4 <VL53L1_GetRangingMeasurementData+0x84>
 80089da:	bf00      	nop
 80089dc:	0030cccd 	.word	0x0030cccd
 80089e0:	0075b333 	.word	0x0075b333
 80089e4:	20000000 	.word	0x20000000
 80089e8:	08017174 	.word	0x08017174

080089ec <VL53L1_read_p2p_data>:
}


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 80089ec:	b570      	push	{r4, r5, r6, lr}
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
		status = VL53L1_get_static_nvm_managed(
 80089ee:	f500 71ac 	add.w	r1, r0, #344	; 0x158
{
 80089f2:	b082      	sub	sp, #8
 80089f4:	4604      	mov	r4, r0
		status = VL53L1_get_static_nvm_managed(
 80089f6:	f002 fc4b 	bl	800b290 <VL53L1_get_static_nvm_managed>
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 80089fa:	4605      	mov	r5, r0
 80089fc:	b1a0      	cbz	r0, 8008a28 <VL53L1_read_p2p_data+0x3c>

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 80089fe:	f8b4 315e 	ldrh.w	r3, [r4, #350]	; 0x15e
 8008a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a06:	d331      	bcc.n	8008a6c <VL53L1_read_p2p_data+0x80>

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 8008a08:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
 8008a0c:	b94b      	cbnz	r3, 8008a22 <VL53L1_read_p2p_data+0x36>
		pdev->optical_centre.y_centre == 0) {
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8008a0e:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8008a12:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
				pdev->mm_roi.x_centre << 4;
 8008a16:	0112      	lsls	r2, r2, #4
				pdev->mm_roi.y_centre << 4;
 8008a18:	011b      	lsls	r3, r3, #4
		pdev->optical_centre.x_centre =
 8008a1a:	f884 20a2 	strb.w	r2, [r4, #162]	; 0xa2
		pdev->optical_centre.y_centre =
 8008a1e:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8008a22:	4628      	mov	r0, r5
 8008a24:	b002      	add	sp, #8
 8008a26:	bd70      	pop	{r4, r5, r6, pc}
		status = VL53L1_get_customer_nvm_managed(
 8008a28:	f104 0142 	add.w	r1, r4, #66	; 0x42
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	f002 fcbb 	bl	800b3a8 <VL53L1_get_customer_nvm_managed>
	if (status == VL53L1_ERROR_NONE) {
 8008a32:	4605      	mov	r5, r0
 8008a34:	2800      	cmp	r0, #0
 8008a36:	d1e2      	bne.n	80089fe <VL53L1_read_p2p_data+0x12>
		status = VL53L1_get_nvm_copy_data(
 8008a38:	f504 76fd 	add.w	r6, r4, #506	; 0x1fa
 8008a3c:	4631      	mov	r1, r6
 8008a3e:	4620      	mov	r0, r4
 8008a40:	f003 f828 	bl	800ba94 <VL53L1_get_nvm_copy_data>
		if (status == VL53L1_ERROR_NONE)
 8008a44:	4605      	mov	r5, r0
 8008a46:	2800      	cmp	r0, #0
 8008a48:	d1d9      	bne.n	80089fe <VL53L1_read_p2p_data+0x12>
			VL53L1_copy_rtn_good_spads_to_buffer(
 8008a4a:	4630      	mov	r0, r6
 8008a4c:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
 8008a50:	f002 f95e 	bl	800ad10 <VL53L1_copy_rtn_good_spads_to_buffer>
		status =
 8008a54:	f504 722d 	add.w	r2, r4, #692	; 0x2b4
 8008a58:	21de      	movs	r1, #222	; 0xde
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f009 f91a 	bl	8011c94 <VL53L1_RdWord>
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8008a60:	f8b4 315e 	ldrh.w	r3, [r4, #350]	; 0x15e
 8008a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
		status =
 8008a68:	4605      	mov	r5, r0
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8008a6a:	d203      	bcs.n	8008a74 <VL53L1_read_p2p_data+0x88>
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8008a6c:	f64b 43cc 	movw	r3, #48332	; 0xbccc
 8008a70:	f8a4 315e 	strh.w	r3, [r4, #350]	; 0x15e
	if (status == VL53L1_ERROR_NONE)
 8008a74:	2d00      	cmp	r5, #0
 8008a76:	d1c7      	bne.n	8008a08 <VL53L1_read_p2p_data+0x1c>
	uint8_t  xy_size = 0;

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 8008a78:	f10d 0206 	add.w	r2, sp, #6
 8008a7c:	f10d 0107 	add.w	r1, sp, #7
 8008a80:	f894 022a 	ldrb.w	r0, [r4, #554]	; 0x22a
	uint8_t  x       = 0;
 8008a84:	f88d 5006 	strb.w	r5, [sp, #6]
	uint8_t  y       = 0;
 8008a88:	f88d 5007 	strb.w	r5, [sp, #7]
	VL53L1_decode_row_col(
 8008a8c:	f002 fbbe 	bl	800b20c <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8008a90:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8008a94:	f89d 1007 	ldrb.w	r1, [sp, #7]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8008a98:	f894 222b 	ldrb.w	r2, [r4, #555]	; 0x22b
	pmm_roi->x_centre = x;
 8008a9c:	462b      	mov	r3, r5
 8008a9e:	f360 0307 	bfi	r3, r0, #0, #8
 8008aa2:	f361 230f 	bfi	r3, r1, #8, #8

	pmm_roi->height = xy_size >> 4;
	pmm_roi->width  = xy_size & 0x0F;
 8008aa6:	f002 010f 	and.w	r1, r2, #15
	pmm_roi->x_centre = x;
 8008aaa:	f361 4317 	bfi	r3, r1, #16, #8
	pmm_roi->height = xy_size >> 4;
 8008aae:	0912      	lsrs	r2, r2, #4
	pmm_roi->x_centre = x;
 8008ab0:	f362 631f 	bfi	r3, r2, #24, #8
 8008ab4:	f8c4 309e 	str.w	r3, [r4, #158]	; 0x9e
 8008ab8:	e7a6      	b.n	8008a08 <VL53L1_read_p2p_data+0x1c>
 8008aba:	bf00      	nop

08008abc <VL53L1_data_init>:
{
 8008abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac0:	4604      	mov	r4, r0
 8008ac2:	b087      	sub	sp, #28
 8008ac4:	460d      	mov	r5, r1
	VL53L1_init_ll_driver_state(
 8008ac6:	2162      	movs	r1, #98	; 0x62
 8008ac8:	f002 f85c 	bl	800ab84 <VL53L1_init_ll_driver_state>
	pdev->phasecal_config_timeout_us  =  1000;
 8008acc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	pdev->mm_config_timeout_us        =  2000;
 8008ad0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8008ad4:	f44f 6020 	mov.w	r0, #2560	; 0xa00
	pdev->range_config_timeout_us     = 13000;
 8008ad8:	f243 27c8 	movw	r7, #13000	; 0x32c8
	pdev->inter_measurement_period_ms =   100;
 8008adc:	2664      	movs	r6, #100	; 0x64
	pdev->gain_cal.standard_ranging_gain_factor =
 8008ade:	f240 71db 	movw	r1, #2011	; 0x7db
	pdev->phasecal_config_timeout_us  =  1000;
 8008ae2:	60a2      	str	r2, [r4, #8]
	pdev->mm_config_timeout_us        =  2000;
 8008ae4:	60e3      	str	r3, [r4, #12]
	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8008ae6:	2200      	movs	r2, #0
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8008ae8:	2301      	movs	r3, #1
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8008aea:	8320      	strh	r0, [r4, #24]
	pdev->range_config_timeout_us     = 13000;
 8008aec:	6127      	str	r7, [r4, #16]
	pdev->inter_measurement_period_ms =   100;
 8008aee:	6166      	str	r6, [r4, #20]
	pdev->gain_cal.standard_ranging_gain_factor =
 8008af0:	f8a4 109c 	strh.w	r1, [r4, #156]	; 0x9c
	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8008af4:	7022      	strb	r2, [r4, #0]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8008af6:	70a2      	strb	r2, [r4, #2]
	pdev->debug_mode                  =  0x00;
 8008af8:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8008afc:	7063      	strb	r3, [r4, #1]
	pdev->offset_calibration_mode =
 8008afe:	70e3      	strb	r3, [r4, #3]
	pdev->offset_correction_mode  =
 8008b00:	7123      	strb	r3, [r4, #4]
	VL53L1_init_version(Dev);
 8008b02:	4620      	mov	r0, r4
 8008b04:	f002 f82e 	bl	800ab64 <VL53L1_init_version>
	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8008b08:	b115      	cbz	r5, 8008b10 <VL53L1_data_init+0x54>
			status = VL53L1_read_p2p_data(Dev);
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	f7ff ff6e 	bl	80089ec <VL53L1_read_p2p_data>
	status =
 8008b10:	f504 7088 	add.w	r0, r4, #272	; 0x110
 8008b14:	f000 ff48 	bl	80099a8 <VL53L1_init_refspadchar_config_struct>
	status =
 8008b18:	f504 7090 	add.w	r0, r4, #288	; 0x120
 8008b1c:	f000 ff58 	bl	80099d0 <VL53L1_init_ssc_config_struct>
	status =
 8008b20:	f504 7196 	add.w	r1, r4, #300	; 0x12c
 8008b24:	f104 0042 	add.w	r0, r4, #66	; 0x42
 8008b28:	f000 ff5e 	bl	80099e8 <VL53L1_init_xtalk_config_struct>
		VL53L1_init_tuning_parm_storage_struct(
 8008b2c:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
	status =
 8008b30:	f504 70a2 	add.w	r0, r4, #324	; 0x144
 8008b34:	f000 ff7a 	bl	8009a2c <VL53L1_init_offset_cal_config_struct>
	status =
 8008b38:	4628      	mov	r0, r5
 8008b3a:	f000 ff8b 	bl	8009a54 <VL53L1_init_tuning_parm_storage_struct>
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8008b3e:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
		status = VL53L1_set_preset_mode(
 8008b42:	7866      	ldrb	r6, [r4, #1]
 8008b44:	68a2      	ldr	r2, [r4, #8]
 8008b46:	9205      	str	r2, [sp, #20]
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8008b48:	f003 0303 	and.w	r3, r3, #3
 8008b4c:	3b80      	subs	r3, #128	; 0x80
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8008b4e:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
	VL53L1_init_ll_driver_state(
 8008b52:	2103      	movs	r1, #3
 8008b54:	4620      	mov	r0, r4
		status = VL53L1_set_preset_mode(
 8008b56:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 8008b5a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8008b5e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008b62:	f8d4 9014 	ldr.w	r9, [r4, #20]
	VL53L1_init_ll_driver_state(
 8008b66:	f002 f80d 	bl	800ab84 <VL53L1_init_ll_driver_state>
	switch (device_preset_mode) {
 8008b6a:	1e72      	subs	r2, r6, #1
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8008b6c:	f504 70b2 	add.w	r0, r4, #356	; 0x164
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8008b70:	f504 76c2 	add.w	r6, r4, #388	; 0x184
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8008b74:	f504 77ce 	add.w	r7, r4, #412	; 0x19c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8008b78:	f504 73da 	add.w	r3, r4, #436	; 0x1b4
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8008b7c:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
	VL53L1_low_power_auto_data_t  *plpadata      =
 8008b80:	f504 7e39 	add.w	lr, r4, #740	; 0x2e4
	switch (device_preset_mode) {
 8008b84:	2a25      	cmp	r2, #37	; 0x25
 8008b86:	f200 80ad 	bhi.w	8008ce4 <VL53L1_data_init+0x228>
 8008b8a:	e8df f002 	tbb	[pc, r2]
 8008b8e:	4a42      	.short	0x4a42
 8008b90:	6a625a52 	.word	0x6a625a52
 8008b94:	abab7a72 	.word	0xabab7a72
 8008b98:	abababab 	.word	0xabababab
 8008b9c:	8a82abab 	.word	0x8a82abab
 8008ba0:	abababab 	.word	0xabababab
 8008ba4:	abababab 	.word	0xabababab
 8008ba8:	abababab 	.word	0xabababab
 8008bac:	abababab 	.word	0xabababab
 8008bb0:	139a92ab 	.word	0x139a92ab
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 8008bb4:	e88d 4022 	stmia.w	sp, {r1, r5, lr}
 8008bb8:	463a      	mov	r2, r7
 8008bba:	4631      	mov	r1, r6
 8008bbc:	f001 fdec 	bl	800a798 <VL53L1_preset_mode_low_power_auto_long_ranging>
 8008bc0:	4605      	mov	r5, r0
	if (status == VL53L1_ERROR_NONE) {
 8008bc2:	b9fd      	cbnz	r5, 8008c04 <VL53L1_data_init+0x148>
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8008bc4:	f8b4 315e 	ldrh.w	r3, [r4, #350]	; 0x15e
		pstatic->dss_config__target_total_rate_mcps =
 8008bc8:	f8a4 8164 	strh.w	r8, [r4, #356]	; 0x164
		pdev->dss_config__target_total_rate_mcps    =
 8008bcc:	f8a4 8018 	strh.w	r8, [r4, #24]
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d07e      	beq.n	8008cd2 <VL53L1_data_init+0x216>
		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8008bd4:	9805      	ldr	r0, [sp, #20]
 8008bd6:	60a0      	str	r0, [r4, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8008bd8:	f8c4 a00c 	str.w	sl, [r4, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8008bdc:	f8c4 b010 	str.w	fp, [r4, #16]
		status =
 8008be0:	465a      	mov	r2, fp
 8008be2:	e88d 00c0 	stmia.w	sp, {r6, r7}
 8008be6:	4651      	mov	r1, sl
 8008be8:	f002 f9a2 	bl	800af30 <VL53L1_calc_timeout_register_values>
	if (status == VL53L1_ERROR_NONE)
 8008bec:	4605      	mov	r5, r0
 8008bee:	b948      	cbnz	r0, 8008c04 <VL53L1_data_init+0x148>
	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8008bf0:	f8b4 32b4 	ldrh.w	r3, [r4, #692]	; 0x2b4
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d06c      	beq.n	8008cd2 <VL53L1_data_init+0x216>
			inter_measurement_period_ms *
 8008bf8:	fb09 f303 	mul.w	r3, r9, r3
		pdev->tim_cfg.system__intermeasurement_period = \
 8008bfc:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8008c00:	f8c4 9014 	str.w	r9, [r4, #20]
	VL53L1_low_power_auto_data_init(
 8008c04:	4620      	mov	r0, r4
 8008c06:	f002 fa5d 	bl	800b0c4 <VL53L1_low_power_auto_data_init>
}
 8008c0a:	4628      	mov	r0, r5
 8008c0c:	b007      	add	sp, #28
 8008c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		status = VL53L1_preset_mode_standard_ranging(
 8008c12:	e88d 0022 	stmia.w	sp, {r1, r5}
 8008c16:	463a      	mov	r2, r7
 8008c18:	4631      	mov	r1, r6
 8008c1a:	f000 ff6b 	bl	8009af4 <VL53L1_preset_mode_standard_ranging>
 8008c1e:	4605      	mov	r5, r0
 8008c20:	e7cf      	b.n	8008bc2 <VL53L1_data_init+0x106>
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8008c22:	e88d 0022 	stmia.w	sp, {r1, r5}
 8008c26:	463a      	mov	r2, r7
 8008c28:	4631      	mov	r1, r6
 8008c2a:	f001 f801 	bl	8009c30 <VL53L1_preset_mode_standard_ranging_short_range>
 8008c2e:	4605      	mov	r5, r0
 8008c30:	e7c7      	b.n	8008bc2 <VL53L1_data_init+0x106>
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8008c32:	e88d 0022 	stmia.w	sp, {r1, r5}
 8008c36:	463a      	mov	r2, r7
 8008c38:	4631      	mov	r1, r6
 8008c3a:	f001 f893 	bl	8009d64 <VL53L1_preset_mode_standard_ranging_long_range>
 8008c3e:	4605      	mov	r5, r0
 8008c40:	e7bf      	b.n	8008bc2 <VL53L1_data_init+0x106>
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8008c42:	e88d 0022 	stmia.w	sp, {r1, r5}
 8008c46:	463a      	mov	r2, r7
 8008c48:	4631      	mov	r1, r6
 8008c4a:	f001 f927 	bl	8009e9c <VL53L1_preset_mode_standard_ranging_mm1_cal>
 8008c4e:	4605      	mov	r5, r0
 8008c50:	e7b7      	b.n	8008bc2 <VL53L1_data_init+0x106>
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 8008c52:	e88d 0022 	stmia.w	sp, {r1, r5}
 8008c56:	463a      	mov	r2, r7
 8008c58:	4631      	mov	r1, r6
 8008c5a:	f001 f9c3 	bl	8009fe4 <VL53L1_preset_mode_standard_ranging_mm2_cal>
 8008c5e:	4605      	mov	r5, r0
 8008c60:	e7af      	b.n	8008bc2 <VL53L1_data_init+0x106>
		status = VL53L1_preset_mode_timed_ranging(
 8008c62:	e88d 0022 	stmia.w	sp, {r1, r5}
 8008c66:	463a      	mov	r2, r7
 8008c68:	4631      	mov	r1, r6
 8008c6a:	f001 fa5f 	bl	800a12c <VL53L1_preset_mode_timed_ranging>
 8008c6e:	4605      	mov	r5, r0
 8008c70:	e7a7      	b.n	8008bc2 <VL53L1_data_init+0x106>
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8008c72:	e88d 0022 	stmia.w	sp, {r1, r5}
 8008c76:	463a      	mov	r2, r7
 8008c78:	4631      	mov	r1, r6
 8008c7a:	f001 faf9 	bl	800a270 <VL53L1_preset_mode_timed_ranging_short_range>
 8008c7e:	4605      	mov	r5, r0
 8008c80:	e79f      	b.n	8008bc2 <VL53L1_data_init+0x106>
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8008c82:	e88d 0022 	stmia.w	sp, {r1, r5}
 8008c86:	463a      	mov	r2, r7
 8008c88:	4631      	mov	r1, r6
 8008c8a:	f001 fb91 	bl	800a3b0 <VL53L1_preset_mode_timed_ranging_long_range>
 8008c8e:	4605      	mov	r5, r0
 8008c90:	e797      	b.n	8008bc2 <VL53L1_data_init+0x106>
		status = VL53L1_preset_mode_olt(
 8008c92:	e88d 0022 	stmia.w	sp, {r1, r5}
 8008c96:	463a      	mov	r2, r7
 8008c98:	4631      	mov	r1, r6
 8008c9a:	f001 fec5 	bl	800aa28 <VL53L1_preset_mode_olt>
 8008c9e:	4605      	mov	r5, r0
 8008ca0:	e78f      	b.n	8008bc2 <VL53L1_data_init+0x106>
		status = VL53L1_preset_mode_singleshot_ranging(
 8008ca2:	e88d 0022 	stmia.w	sp, {r1, r5}
 8008ca6:	463a      	mov	r2, r7
 8008ca8:	4631      	mov	r1, r6
 8008caa:	f001 fe1f 	bl	800a8ec <VL53L1_preset_mode_singleshot_ranging>
 8008cae:	4605      	mov	r5, r0
 8008cb0:	e787      	b.n	8008bc2 <VL53L1_data_init+0x106>
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 8008cb2:	e88d 4022 	stmia.w	sp, {r1, r5, lr}
 8008cb6:	463a      	mov	r2, r7
 8008cb8:	4631      	mov	r1, r6
 8008cba:	f001 fcc1 	bl	800a640 <VL53L1_preset_mode_low_power_auto_short_ranging>
 8008cbe:	4605      	mov	r5, r0
 8008cc0:	e77f      	b.n	8008bc2 <VL53L1_data_init+0x106>
		status = VL53L1_preset_mode_low_power_auto_ranging(
 8008cc2:	e88d 4022 	stmia.w	sp, {r1, r5, lr}
 8008cc6:	463a      	mov	r2, r7
 8008cc8:	4631      	mov	r1, r6
 8008cca:	f001 fc0f 	bl	800a4ec <VL53L1_preset_mode_low_power_auto_ranging>
 8008cce:	4605      	mov	r5, r0
 8008cd0:	e777      	b.n	8008bc2 <VL53L1_data_init+0x106>
	VL53L1_low_power_auto_data_init(
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	f002 f9f6 	bl	800b0c4 <VL53L1_low_power_auto_data_init>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8008cd8:	f06f 050e 	mvn.w	r5, #14
}
 8008cdc:	4628      	mov	r0, r5
 8008cde:	b007      	add	sp, #28
 8008ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		status = VL53L1_ERROR_INVALID_PARAMS;
 8008ce4:	f06f 0503 	mvn.w	r5, #3
 8008ce8:	e78c      	b.n	8008c04 <VL53L1_data_init+0x148>
 8008cea:	bf00      	nop

08008cec <VL53L1_set_inter_measurement_period_ms>:
	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8008cec:	f8b0 32b4 	ldrh.w	r3, [r0, #692]	; 0x2b4
 8008cf0:	b133      	cbz	r3, 8008d00 <VL53L1_set_inter_measurement_period_ms+0x14>
			inter_measurement_period_ms *
 8008cf2:	fb01 f303 	mul.w	r3, r1, r3
		pdev->tim_cfg.system__intermeasurement_period = \
 8008cf6:	f8c0 31ac 	str.w	r3, [r0, #428]	; 0x1ac
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8008cfa:	6141      	str	r1, [r0, #20]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008cfc:	2000      	movs	r0, #0
}
 8008cfe:	4770      	bx	lr
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8008d00:	f06f 000e 	mvn.w	r0, #14
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop

08008d08 <VL53L1_get_inter_measurement_period_ms>:
	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8008d08:	f8b0 22b4 	ldrh.w	r2, [r0, #692]	; 0x2b4
 8008d0c:	b132      	cbz	r2, 8008d1c <VL53L1_get_inter_measurement_period_ms+0x14>
			pdev->tim_cfg.system__intermeasurement_period /
 8008d0e:	f8d0 31ac 	ldr.w	r3, [r0, #428]	; 0x1ac
 8008d12:	fbb3 f3f2 	udiv	r3, r3, r2
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008d16:	2000      	movs	r0, #0
		*pinter_measurement_period_ms = \
 8008d18:	600b      	str	r3, [r1, #0]
}
 8008d1a:	4770      	bx	lr
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8008d1c:	f06f 000e 	mvn.w	r0, #14
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop

08008d24 <VL53L1_set_timeouts_us>:
{
 8008d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8008d28:	f8b0 e15e 	ldrh.w	lr, [r0, #350]	; 0x15e
{
 8008d2c:	b082      	sub	sp, #8
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8008d2e:	f1be 0f00 	cmp.w	lr, #0
 8008d32:	d104      	bne.n	8008d3e <VL53L1_set_timeouts_us+0x1a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8008d34:	f06f 000e 	mvn.w	r0, #14
}
 8008d38:	b002      	add	sp, #8
 8008d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d3e:	4604      	mov	r4, r0
			VL53L1_calc_timeout_register_values(
 8008d40:	f500 7cc2 	add.w	ip, r0, #388	; 0x184
 8008d44:	461f      	mov	r7, r3
 8008d46:	4616      	mov	r6, r2
 8008d48:	460d      	mov	r5, r1
 8008d4a:	f500 78ce 	add.w	r8, r0, #412	; 0x19c
		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8008d4e:	60a1      	str	r1, [r4, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8008d50:	60e2      	str	r2, [r4, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8008d52:	6123      	str	r3, [r4, #16]
		status =
 8008d54:	463a      	mov	r2, r7
 8008d56:	4673      	mov	r3, lr
 8008d58:	4631      	mov	r1, r6
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	f8cd 8004 	str.w	r8, [sp, #4]
 8008d60:	f8cd c000 	str.w	ip, [sp]
 8008d64:	f002 f8e4 	bl	800af30 <VL53L1_calc_timeout_register_values>
}
 8008d68:	b002      	add	sp, #8
 8008d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d6e:	bf00      	nop

08008d70 <VL53L1_get_timeouts_us>:
{
 8008d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d74:	4604      	mov	r4, r0
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8008d76:	f8b0 015e 	ldrh.w	r0, [r0, #350]	; 0x15e
 8008d7a:	b360      	cbz	r0, 8008dd6 <VL53L1_get_timeouts_us+0x66>
 8008d7c:	460f      	mov	r7, r1
		macro_period_us =
 8008d7e:	f894 11a2 	ldrb.w	r1, [r4, #418]	; 0x1a2
 8008d82:	4616      	mov	r6, r2
 8008d84:	461d      	mov	r5, r3
 8008d86:	f002 f87d 	bl	800ae84 <VL53L1_calc_macro_period_us>
 8008d8a:	4680      	mov	r8, r0
			VL53L1_calc_timeout_us(
 8008d8c:	4601      	mov	r1, r0
 8008d8e:	f894 018b 	ldrb.w	r0, [r4, #395]	; 0x18b
 8008d92:	f002 f8b5 	bl	800af00 <VL53L1_calc_timeout_us>
		*pphasecal_config_timeout_us =
 8008d96:	6038      	str	r0, [r7, #0]
		timeout_encoded =
 8008d98:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8008d9c:	f894 019d 	ldrb.w	r0, [r4, #413]	; 0x19d
		timeout_encoded = (timeout_encoded << 8) +
 8008da0:	eb00 2003 	add.w	r0, r0, r3, lsl #8
			VL53L1_calc_decoded_timeout_us(
 8008da4:	4641      	mov	r1, r8
 8008da6:	b280      	uxth	r0, r0
 8008da8:	f002 f8b4 	bl	800af14 <VL53L1_calc_decoded_timeout_us>
		*pmm_config_timeout_us =
 8008dac:	6030      	str	r0, [r6, #0]
		timeout_encoded =
 8008dae:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8008db2:	f894 01a1 	ldrb.w	r0, [r4, #417]	; 0x1a1
		timeout_encoded = (timeout_encoded << 8) +
 8008db6:	eb00 2003 	add.w	r0, r0, r3, lsl #8
			VL53L1_calc_decoded_timeout_us(
 8008dba:	4641      	mov	r1, r8
 8008dbc:	b280      	uxth	r0, r0
 8008dbe:	f002 f8a9 	bl	800af14 <VL53L1_calc_decoded_timeout_us>
		*prange_config_timeout_us =
 8008dc2:	6028      	str	r0, [r5, #0]
		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	60a3      	str	r3, [r4, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8008dc8:	6833      	ldr	r3, [r6, #0]
 8008dca:	60e3      	str	r3, [r4, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8008dcc:	682b      	ldr	r3, [r5, #0]
 8008dce:	6123      	str	r3, [r4, #16]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008dd0:	2000      	movs	r0, #0
}
 8008dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8008dd6:	f06f 000e 	mvn.w	r0, #14
 8008dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dde:	bf00      	nop

08008de0 <VL53L1_get_sequence_config_bit>:
	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8008de0:	2907      	cmp	r1, #7
 8008de2:	d80f      	bhi.n	8008e04 <VL53L1_get_sequence_config_bit+0x24>
		*pvalue =
 8008de4:	f890 31c5 	ldrb.w	r3, [r0, #453]	; 0x1c5
		if (bit_id > 0) {
 8008de8:	b139      	cbz	r1, 8008dfa <VL53L1_get_sequence_config_bit+0x1a>
			bit_mask  = 0x01 << bit_id;
 8008dea:	2001      	movs	r0, #1
 8008dec:	4088      	lsls	r0, r1
			*pvalue  = *pvalue >> bit_id;
 8008dee:	4018      	ands	r0, r3
 8008df0:	fa40 f101 	asr.w	r1, r0, r1
 8008df4:	7011      	strb	r1, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008df6:	2000      	movs	r0, #0
 8008df8:	4770      	bx	lr
		*pvalue =
 8008dfa:	f003 0301 	and.w	r3, r3, #1
 8008dfe:	7013      	strb	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008e00:	4608      	mov	r0, r1
}
 8008e02:	4770      	bx	lr
		status = VL53L1_ERROR_INVALID_PARAMS;
 8008e04:	f06f 0003 	mvn.w	r0, #3
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop

08008e0c <VL53L1_set_user_zone>:
{
 8008e0c:	b538      	push	{r3, r4, r5, lr}
 8008e0e:	460c      	mov	r4, r1
 8008e10:	4605      	mov	r5, r0
	VL53L1_encode_row_col(
 8008e12:	f200 12c3 	addw	r2, r0, #451	; 0x1c3
 8008e16:	7809      	ldrb	r1, [r1, #0]
 8008e18:	7860      	ldrb	r0, [r4, #1]
 8008e1a:	f002 f93d 	bl	800b098 <VL53L1_encode_row_col>
	VL53L1_encode_zone_size(
 8008e1e:	78a0      	ldrb	r0, [r4, #2]
 8008e20:	78e1      	ldrb	r1, [r4, #3]
 8008e22:	f505 72e2 	add.w	r2, r5, #452	; 0x1c4
 8008e26:	f002 f949 	bl	800b0bc <VL53L1_encode_zone_size>
}
 8008e2a:	2000      	movs	r0, #0
 8008e2c:	bd38      	pop	{r3, r4, r5, pc}
 8008e2e:	bf00      	nop

08008e30 <VL53L1_get_user_zone>:
{
 8008e30:	b538      	push	{r3, r4, r5, lr}
 8008e32:	4605      	mov	r5, r0
 8008e34:	460c      	mov	r4, r1
	VL53L1_decode_row_col(
 8008e36:	460a      	mov	r2, r1
 8008e38:	f890 01c3 	ldrb.w	r0, [r0, #451]	; 0x1c3
 8008e3c:	3101      	adds	r1, #1
 8008e3e:	f002 f9e5 	bl	800b20c <VL53L1_decode_row_col>
	VL53L1_decode_zone_size(
 8008e42:	f895 01c4 	ldrb.w	r0, [r5, #452]	; 0x1c4
 8008e46:	1ce2      	adds	r2, r4, #3
 8008e48:	1ca1      	adds	r1, r4, #2
 8008e4a:	f002 f931 	bl	800b0b0 <VL53L1_decode_zone_size>
}
 8008e4e:	2000      	movs	r0, #0
 8008e50:	bd38      	pop	{r3, r4, r5, pc}
 8008e52:	bf00      	nop

08008e54 <VL53L1_get_preset_mode_timing_cfg>:
	switch (device_preset_mode) {
 8008e54:	3901      	subs	r1, #1
{
 8008e56:	b410      	push	{r4}
	switch (device_preset_mode) {
 8008e58:	2925      	cmp	r1, #37	; 0x25
 8008e5a:	d84a      	bhi.n	8008ef2 <VL53L1_get_preset_mode_timing_cfg+0x9e>
 8008e5c:	e8df f001 	tbb	[pc, r1]
 8008e60:	37373737 	.word	0x37373737
 8008e64:	25252537 	.word	0x25252537
 8008e68:	49494949 	.word	0x49494949
 8008e6c:	49494949 	.word	0x49494949
 8008e70:	49492537 	.word	0x49492537
 8008e74:	49494949 	.word	0x49494949
 8008e78:	49494949 	.word	0x49494949
 8008e7c:	49494949 	.word	0x49494949
 8008e80:	13494949 	.word	0x13494949
 8008e84:	1313      	.short	0x1313
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8008e86:	f8b0 40cc 	ldrh.w	r4, [r0, #204]	; 0xcc
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8008e8a:	f8d0 10d4 	ldr.w	r1, [r0, #212]	; 0xd4
		*pdss_config__target_total_rate_mcps =
 8008e8e:	8014      	strh	r4, [r2, #0]
		*pphasecal_config_timeout_us =
 8008e90:	6019      	str	r1, [r3, #0]
		*pmm_config_timeout_us =
 8008e92:	9a01      	ldr	r2, [sp, #4]
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8008e94:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
		*pmm_config_timeout_us =
 8008e98:	6013      	str	r3, [r2, #0]
		*prange_config_timeout_us =
 8008e9a:	9a02      	ldr	r2, [sp, #8]
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 8008e9c:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
		*prange_config_timeout_us =
 8008ea0:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008ea2:	2000      	movs	r0, #0
}
 8008ea4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ea8:	4770      	bx	lr
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8008eaa:	f8b0 40cc 	ldrh.w	r4, [r0, #204]	; 0xcc
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8008eae:	f8d0 10d4 	ldr.w	r1, [r0, #212]	; 0xd4
		*pdss_config__target_total_rate_mcps =
 8008eb2:	8014      	strh	r4, [r2, #0]
		*pphasecal_config_timeout_us =
 8008eb4:	6019      	str	r1, [r3, #0]
		*pmm_config_timeout_us =
 8008eb6:	9a01      	ldr	r2, [sp, #4]
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 8008eb8:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
		*pmm_config_timeout_us =
 8008ebc:	6013      	str	r3, [r2, #0]
		*prange_config_timeout_us =
 8008ebe:	9a02      	ldr	r2, [sp, #8]
				pdev->tuning_parms.tp_range_timeout_timed_us;
 8008ec0:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
		*prange_config_timeout_us =
 8008ec4:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008ec6:	2000      	movs	r0, #0
}
 8008ec8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ecc:	4770      	bx	lr
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 8008ece:	f8b0 40ca 	ldrh.w	r4, [r0, #202]	; 0xca
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8008ed2:	f8d0 10d0 	ldr.w	r1, [r0, #208]	; 0xd0
		*pdss_config__target_total_rate_mcps =
 8008ed6:	8014      	strh	r4, [r2, #0]
		*pphasecal_config_timeout_us =
 8008ed8:	6019      	str	r1, [r3, #0]
		*pmm_config_timeout_us =
 8008eda:	9a01      	ldr	r2, [sp, #4]
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 8008edc:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
		*pmm_config_timeout_us =
 8008ee0:	6013      	str	r3, [r2, #0]
		*prange_config_timeout_us =
 8008ee2:	9a02      	ldr	r2, [sp, #8]
				pdev->tuning_parms.tp_range_timeout_lite_us;
 8008ee4:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
		*prange_config_timeout_us =
 8008ee8:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008eea:	2000      	movs	r0, #0
}
 8008eec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ef0:	4770      	bx	lr
		status = VL53L1_ERROR_INVALID_PARAMS;
 8008ef2:	f06f 0003 	mvn.w	r0, #3
}
 8008ef6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <VL53L1_set_preset_mode>:
{
 8008efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f00:	b085      	sub	sp, #20
 8008f02:	460d      	mov	r5, r1
	pdev->preset_mode                 = device_preset_mode;
 8008f04:	7041      	strb	r1, [r0, #1]
{
 8008f06:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8008f08:	990e      	ldr	r1, [sp, #56]	; 0x38
{
 8008f0a:	9e10      	ldr	r6, [sp, #64]	; 0x40
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8008f0c:	60c1      	str	r1, [r0, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8008f0e:	6107      	str	r7, [r0, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8008f10:	6146      	str	r6, [r0, #20]
	VL53L1_init_ll_driver_state(
 8008f12:	2103      	movs	r1, #3
{
 8008f14:	4604      	mov	r4, r0
 8008f16:	4691      	mov	r9, r2
 8008f18:	469a      	mov	sl, r3
	VL53L1_init_ll_driver_state(
 8008f1a:	f001 fe33 	bl	800ab84 <VL53L1_init_ll_driver_state>
	switch (device_preset_mode) {
 8008f1e:	1e6a      	subs	r2, r5, #1
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8008f20:	f504 70b2 	add.w	r0, r4, #356	; 0x164
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8008f24:	f504 75c2 	add.w	r5, r4, #388	; 0x184
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8008f28:	f504 7bce 	add.w	fp, r4, #412	; 0x19c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8008f2c:	f504 73da 	add.w	r3, r4, #436	; 0x1b4
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8008f30:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8008f34:	f104 0ea4 	add.w	lr, r4, #164	; 0xa4
	VL53L1_low_power_auto_data_t  *plpadata      =
 8008f38:	f504 7c39 	add.w	ip, r4, #740	; 0x2e4
	switch (device_preset_mode) {
 8008f3c:	2a25      	cmp	r2, #37	; 0x25
 8008f3e:	f200 809c 	bhi.w	800907a <VL53L1_set_preset_mode+0x17e>
 8008f42:	e8df f002 	tbb	[pc, r2]
 8008f46:	443d      	.short	0x443d
 8008f48:	6059524b 	.word	0x6059524b
 8008f4c:	9a9a6e67 	.word	0x9a9a6e67
 8008f50:	9a9a9a9a 	.word	0x9a9a9a9a
 8008f54:	7c759a9a 	.word	0x7c759a9a
 8008f58:	9a9a9a9a 	.word	0x9a9a9a9a
 8008f5c:	9a9a9a9a 	.word	0x9a9a9a9a
 8008f60:	9a9a9a9a 	.word	0x9a9a9a9a
 8008f64:	9a9a9a9a 	.word	0x9a9a9a9a
 8008f68:	138c839a 	.word	0x138c839a
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 8008f6c:	e88d 4002 	stmia.w	sp, {r1, lr}
 8008f70:	f8cd c008 	str.w	ip, [sp, #8]
 8008f74:	465a      	mov	r2, fp
 8008f76:	4629      	mov	r1, r5
 8008f78:	f001 fc0e 	bl	800a798 <VL53L1_preset_mode_low_power_auto_long_ranging>
	if (status == VL53L1_ERROR_NONE) {
 8008f7c:	b9e8      	cbnz	r0, 8008fba <VL53L1_set_preset_mode+0xbe>
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8008f7e:	f8b4 315e 	ldrh.w	r3, [r4, #350]	; 0x15e
		pstatic->dss_config__target_total_rate_mcps =
 8008f82:	f8a4 9164 	strh.w	r9, [r4, #356]	; 0x164
		pdev->dss_config__target_total_rate_mcps    =
 8008f86:	f8a4 9018 	strh.w	r9, [r4, #24]
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d070      	beq.n	8009070 <VL53L1_set_preset_mode+0x174>
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8008f8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f90:	60e2      	str	r2, [r4, #12]
		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8008f92:	f8c4 a008 	str.w	sl, [r4, #8]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8008f96:	6127      	str	r7, [r4, #16]
		status =
 8008f98:	463a      	mov	r2, r7
 8008f9a:	e88d 0820 	stmia.w	sp, {r5, fp}
 8008f9e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008fa0:	4650      	mov	r0, sl
 8008fa2:	f001 ffc5 	bl	800af30 <VL53L1_calc_timeout_register_values>
	if (status == VL53L1_ERROR_NONE)
 8008fa6:	b940      	cbnz	r0, 8008fba <VL53L1_set_preset_mode+0xbe>
	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8008fa8:	f8b4 32b4 	ldrh.w	r3, [r4, #692]	; 0x2b4
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d05f      	beq.n	8009070 <VL53L1_set_preset_mode+0x174>
			inter_measurement_period_ms *
 8008fb0:	fb06 f303 	mul.w	r3, r6, r3
		pdev->tim_cfg.system__intermeasurement_period = \
 8008fb4:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8008fb8:	6166      	str	r6, [r4, #20]
}
 8008fba:	b005      	add	sp, #20
 8008fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		status = VL53L1_preset_mode_standard_ranging(
 8008fc0:	e88d 4002 	stmia.w	sp, {r1, lr}
 8008fc4:	465a      	mov	r2, fp
 8008fc6:	4629      	mov	r1, r5
 8008fc8:	f000 fd94 	bl	8009af4 <VL53L1_preset_mode_standard_ranging>
		break;
 8008fcc:	e7d6      	b.n	8008f7c <VL53L1_set_preset_mode+0x80>
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8008fce:	e88d 4002 	stmia.w	sp, {r1, lr}
 8008fd2:	465a      	mov	r2, fp
 8008fd4:	4629      	mov	r1, r5
 8008fd6:	f000 fe2b 	bl	8009c30 <VL53L1_preset_mode_standard_ranging_short_range>
		break;
 8008fda:	e7cf      	b.n	8008f7c <VL53L1_set_preset_mode+0x80>
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8008fdc:	e88d 4002 	stmia.w	sp, {r1, lr}
 8008fe0:	465a      	mov	r2, fp
 8008fe2:	4629      	mov	r1, r5
 8008fe4:	f000 febe 	bl	8009d64 <VL53L1_preset_mode_standard_ranging_long_range>
		break;
 8008fe8:	e7c8      	b.n	8008f7c <VL53L1_set_preset_mode+0x80>
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8008fea:	e88d 4002 	stmia.w	sp, {r1, lr}
 8008fee:	465a      	mov	r2, fp
 8008ff0:	4629      	mov	r1, r5
 8008ff2:	f000 ff53 	bl	8009e9c <VL53L1_preset_mode_standard_ranging_mm1_cal>
		break;
 8008ff6:	e7c1      	b.n	8008f7c <VL53L1_set_preset_mode+0x80>
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 8008ff8:	e88d 4002 	stmia.w	sp, {r1, lr}
 8008ffc:	465a      	mov	r2, fp
 8008ffe:	4629      	mov	r1, r5
 8009000:	f000 fff0 	bl	8009fe4 <VL53L1_preset_mode_standard_ranging_mm2_cal>
		break;
 8009004:	e7ba      	b.n	8008f7c <VL53L1_set_preset_mode+0x80>
		status = VL53L1_preset_mode_timed_ranging(
 8009006:	e88d 4002 	stmia.w	sp, {r1, lr}
 800900a:	465a      	mov	r2, fp
 800900c:	4629      	mov	r1, r5
 800900e:	f001 f88d 	bl	800a12c <VL53L1_preset_mode_timed_ranging>
		break;
 8009012:	e7b3      	b.n	8008f7c <VL53L1_set_preset_mode+0x80>
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8009014:	e88d 4002 	stmia.w	sp, {r1, lr}
 8009018:	465a      	mov	r2, fp
 800901a:	4629      	mov	r1, r5
 800901c:	f001 f928 	bl	800a270 <VL53L1_preset_mode_timed_ranging_short_range>
		break;
 8009020:	e7ac      	b.n	8008f7c <VL53L1_set_preset_mode+0x80>
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8009022:	e88d 4002 	stmia.w	sp, {r1, lr}
 8009026:	465a      	mov	r2, fp
 8009028:	4629      	mov	r1, r5
 800902a:	f001 f9c1 	bl	800a3b0 <VL53L1_preset_mode_timed_ranging_long_range>
		break;
 800902e:	e7a5      	b.n	8008f7c <VL53L1_set_preset_mode+0x80>
		status = VL53L1_preset_mode_olt(
 8009030:	e88d 4002 	stmia.w	sp, {r1, lr}
 8009034:	465a      	mov	r2, fp
 8009036:	4629      	mov	r1, r5
 8009038:	f001 fcf6 	bl	800aa28 <VL53L1_preset_mode_olt>
		break;
 800903c:	e79e      	b.n	8008f7c <VL53L1_set_preset_mode+0x80>
		status = VL53L1_preset_mode_singleshot_ranging(
 800903e:	e88d 4002 	stmia.w	sp, {r1, lr}
 8009042:	465a      	mov	r2, fp
 8009044:	4629      	mov	r1, r5
 8009046:	f001 fc51 	bl	800a8ec <VL53L1_preset_mode_singleshot_ranging>
		break;
 800904a:	e797      	b.n	8008f7c <VL53L1_set_preset_mode+0x80>
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 800904c:	e88d 4002 	stmia.w	sp, {r1, lr}
 8009050:	f8cd c008 	str.w	ip, [sp, #8]
 8009054:	465a      	mov	r2, fp
 8009056:	4629      	mov	r1, r5
 8009058:	f001 faf2 	bl	800a640 <VL53L1_preset_mode_low_power_auto_short_ranging>
		break;
 800905c:	e78e      	b.n	8008f7c <VL53L1_set_preset_mode+0x80>
		status = VL53L1_preset_mode_low_power_auto_ranging(
 800905e:	e88d 4002 	stmia.w	sp, {r1, lr}
 8009062:	f8cd c008 	str.w	ip, [sp, #8]
 8009066:	465a      	mov	r2, fp
 8009068:	4629      	mov	r1, r5
 800906a:	f001 fa3f 	bl	800a4ec <VL53L1_preset_mode_low_power_auto_ranging>
		break;
 800906e:	e785      	b.n	8008f7c <VL53L1_set_preset_mode+0x80>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8009070:	f06f 000e 	mvn.w	r0, #14
}
 8009074:	b005      	add	sp, #20
 8009076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		status = VL53L1_ERROR_INVALID_PARAMS;
 800907a:	f06f 0003 	mvn.w	r0, #3
 800907e:	e79c      	b.n	8008fba <VL53L1_set_preset_mode+0xbe>

08009080 <VL53L1_get_lite_sigma_threshold>:
			pdev->tim_cfg.range_config__sigma_thresh;
 8009080:	f8b0 31a6 	ldrh.w	r3, [r0, #422]	; 0x1a6
	*plite_sigma =
 8009084:	800b      	strh	r3, [r1, #0]
}
 8009086:	2000      	movs	r0, #0
 8009088:	4770      	bx	lr
 800908a:	bf00      	nop

0800908c <VL53L1_set_lite_sigma_threshold>:
	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 800908c:	f8a0 11a6 	strh.w	r1, [r0, #422]	; 0x1a6
}
 8009090:	2000      	movs	r0, #0
 8009092:	4770      	bx	lr

08009094 <VL53L1_get_lite_min_count_rate>:
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 8009094:	f8b0 31a8 	ldrh.w	r3, [r0, #424]	; 0x1a8
	*plite_mincountrate =
 8009098:	800b      	strh	r3, [r1, #0]
}
 800909a:	2000      	movs	r0, #0
 800909c:	4770      	bx	lr
 800909e:	bf00      	nop

080090a0 <VL53L1_set_lite_min_count_rate>:
	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 80090a0:	f8a0 11a8 	strh.w	r1, [r0, #424]	; 0x1a8
}
 80090a4:	2000      	movs	r0, #0
 80090a6:	4770      	bx	lr

080090a8 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 80090a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090ac:	4604      	mov	r4, r0
	pdev->measurement_mode = measurement_mode;

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 80090ae:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 80090b2:	f890 02e6 	ldrb.w	r0, [r0, #742]	; 0x2e6
	pdev->measurement_mode = measurement_mode;
 80090b6:	70a1      	strb	r1, [r4, #2]
		(psystem->system__mode_start &
 80090b8:	f003 030f 	and.w	r3, r3, #15
	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 80090bc:	28ff      	cmp	r0, #255	; 0xff
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 80090be:	ea41 0103 	orr.w	r1, r1, r3
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 80090c2:	bf04      	itt	eq
 80090c4:	2300      	moveq	r3, #0
 80090c6:	f884 32e6 	strbeq.w	r3, [r4, #742]	; 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80090ca:	f8d4 32e4 	ldr.w	r3, [r4, #740]	; 0x2e4
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 80090ce:	f8b4 6142 	ldrh.w	r6, [r4, #322]	; 0x142
	psystem->system__mode_start =
 80090d2:	f884 11cc 	strb.w	r1, [r4, #460]	; 0x1cc
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80090d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80090da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80090de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
{
 80090e2:	b0c0      	sub	sp, #256	; 0x100
 80090e4:	4615      	mov	r5, r2
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 80090e6:	f8a4 617c 	strh.w	r6, [r4, #380]	; 0x17c
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80090ea:	f000 8090 	beq.w	800920e <VL53L1_init_and_start_range+0x166>
			device_config_level =
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80090ee:	4a65      	ldr	r2, [pc, #404]	; (8009284 <VL53L1_init_and_start_range+0x1dc>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	f000 80ae 	beq.w	8009252 <VL53L1_init_and_start_range+0x1aa>
 80090f6:	1e6b      	subs	r3, r5, #1
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	2b05      	cmp	r3, #5
 80090fc:	f240 80b6 	bls.w	800926c <VL53L1_init_and_start_range+0x1c4>
		break;
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 8009100:	2605      	movs	r6, #5
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8009102:	2783      	movs	r7, #131	; 0x83

	/* Initialize buffer */

	pbuffer = &buffer[0];
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
		*pbuffer++ = 0;
 8009104:	1e72      	subs	r2, r6, #1
 8009106:	b292      	uxth	r2, r2
 8009108:	2e00      	cmp	r6, #0
 800910a:	f102 0201 	add.w	r2, r2, #1
 800910e:	4668      	mov	r0, sp
 8009110:	bf08      	it	eq
 8009112:	2201      	moveq	r2, #1
 8009114:	2100      	movs	r1, #0
 8009116:	46e8      	mov	r8, sp
 8009118:	f00c f9c3 	bl	80154a2 <memset>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 800911c:	2d05      	cmp	r5, #5
 800911e:	d823      	bhi.n	8009168 <VL53L1_init_and_start_range+0xc0>
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8009120:	d02d      	beq.n	800917e <VL53L1_init_and_start_range+0xd6>
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8009122:	2d04      	cmp	r5, #4
 8009124:	d036      	beq.n	8009194 <VL53L1_init_and_start_range+0xec>
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8009126:	2d03      	cmp	r5, #3
 8009128:	d03f      	beq.n	80091aa <VL53L1_init_and_start_range+0x102>
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 800912a:	2d02      	cmp	r5, #2
 800912c:	d048      	beq.n	80091c0 <VL53L1_init_and_start_range+0x118>
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 800912e:	2d00      	cmp	r5, #0
 8009130:	d151      	bne.n	80091d6 <VL53L1_init_and_start_range+0x12e>
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8009132:	f1c7 0283 	rsb	r2, r7, #131	; 0x83
				VL53L1_SYSTEM_CONTROL_I2C_INDEX - i2c_index;

		status =
 8009136:	fa18 f282 	uxtah	r2, r8, r2
 800913a:	2105      	movs	r1, #5
 800913c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
 8009140:	f002 fac8 	bl	800b6d4 <VL53L1_i2c_encode_system_control>
				&buffer[i2c_buffer_offset_bytes]);
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 8009144:	b968      	cbnz	r0, 8009162 <VL53L1_init_and_start_range+0xba>
		status =
 8009146:	4633      	mov	r3, r6
 8009148:	4642      	mov	r2, r8
 800914a:	4639      	mov	r1, r7
 800914c:	4620      	mov	r0, r4
 800914e:	f008 fd47 	bl	8011be0 <VL53L1_WriteMulti>
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 8009152:	b930      	cbnz	r0, 8009162 <VL53L1_init_and_start_range+0xba>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 8009154:	4620      	mov	r0, r4
 8009156:	f001 fd29 	bl	800abac <VL53L1_update_ll_driver_rd_state>

	if (status == VL53L1_ERROR_NONE)
 800915a:	b910      	cbnz	r0, 8009162 <VL53L1_init_and_start_range+0xba>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 800915c:	4620      	mov	r0, r4
 800915e:	f001 fda1 	bl	800aca4 <VL53L1_update_ll_driver_cfg_state>

	LOG_FUNCTION_END(status);

	return status;
}
 8009162:	b040      	add	sp, #256	; 0x100
 8009164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		i2c_buffer_offset_bytes = \
 8009168:	f1c7 0201 	rsb	r2, r7, #1
		status =
 800916c:	fa18 f282 	uxtah	r2, r8, r2
 8009170:	210b      	movs	r1, #11
 8009172:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 8009176:	f002 f85d 	bl	800b234 <VL53L1_i2c_encode_static_nvm_managed>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 800917a:	2800      	cmp	r0, #0
 800917c:	d1f1      	bne.n	8009162 <VL53L1_init_and_start_range+0xba>
		i2c_buffer_offset_bytes = \
 800917e:	f1c7 020d 	rsb	r2, r7, #13
		status =
 8009182:	fa18 f282 	uxtah	r2, r8, r2
 8009186:	2117      	movs	r1, #23
 8009188:	f104 0042 	add.w	r0, r4, #66	; 0x42
 800918c:	f002 f8ba 	bl	800b304 <VL53L1_i2c_encode_customer_nvm_managed>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8009190:	2800      	cmp	r0, #0
 8009192:	d1e6      	bne.n	8009162 <VL53L1_init_and_start_range+0xba>
		i2c_buffer_offset_bytes = \
 8009194:	f1c7 0224 	rsb	r2, r7, #36	; 0x24
		status =
 8009198:	fa18 f282 	uxtah	r2, r8, r2
 800919c:	2120      	movs	r1, #32
 800919e:	f504 70b2 	add.w	r0, r4, #356	; 0x164
 80091a2:	f002 f95d 	bl	800b460 <VL53L1_i2c_encode_static_config>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 80091a6:	2800      	cmp	r0, #0
 80091a8:	d1db      	bne.n	8009162 <VL53L1_init_and_start_range+0xba>
		i2c_buffer_offset_bytes =
 80091aa:	f1c7 0244 	rsb	r2, r7, #68	; 0x44
		status =
 80091ae:	fa18 f282 	uxtah	r2, r8, r2
 80091b2:	2116      	movs	r1, #22
 80091b4:	f504 70c2 	add.w	r0, r4, #388	; 0x184
 80091b8:	f002 f9c0 	bl	800b53c <VL53L1_i2c_encode_general_config>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 80091bc:	2800      	cmp	r0, #0
 80091be:	d1d0      	bne.n	8009162 <VL53L1_init_and_start_range+0xba>
		i2c_buffer_offset_bytes = \
 80091c0:	f1c7 025a 	rsb	r2, r7, #90	; 0x5a
		status =
 80091c4:	fa18 f282 	uxtah	r2, r8, r2
 80091c8:	2117      	movs	r1, #23
 80091ca:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
 80091ce:	f002 f9fb 	bl	800b5c8 <VL53L1_i2c_encode_timing_config>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 80091d2:	2800      	cmp	r0, #0
 80091d4:	d1c5      	bne.n	8009162 <VL53L1_init_and_start_range+0xba>
		if ((psystem->system__mode_start &
 80091d6:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
		i2c_buffer_offset_bytes = \
 80091da:	f1c7 0271 	rsb	r2, r7, #113	; 0x71
		if ((psystem->system__mode_start &
 80091de:	069b      	lsls	r3, r3, #26
		i2c_buffer_offset_bytes = \
 80091e0:	b292      	uxth	r2, r2
		if ((psystem->system__mode_start &
 80091e2:	d509      	bpl.n	80091f8 <VL53L1_init_and_start_range+0x150>
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 80091e4:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 80091e8:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 80091ec:	f043 0301 	orr.w	r3, r3, #1
 80091f0:	f884 31b4 	strb.w	r3, [r4, #436]	; 0x1b4
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 80091f4:	f884 31c0 	strb.w	r3, [r4, #448]	; 0x1c0
		status =
 80091f8:	4442      	add	r2, r8
 80091fa:	2112      	movs	r1, #18
 80091fc:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
 8009200:	f002 fa26 	bl	800b650 <VL53L1_i2c_encode_dynamic_config>
	if (status == VL53L1_ERROR_NONE) {
 8009204:	2800      	cmp	r0, #0
 8009206:	d094      	beq.n	8009132 <VL53L1_init_and_start_range+0x8a>
}
 8009208:	b040      	add	sp, #256	; 0x100
 800920a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((pdev->dyn_cfg.system__sequence_config & (
 800920e:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
			pdev->gen_cfg.system__interrupt_config_gpio;
 8009212:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 8009216:	f884 22e7 	strb.w	r2, [r4, #743]	; 0x2e7
		if ((pdev->dyn_cfg.system__sequence_config & (
 800921a:	f013 0f60 	tst.w	r3, #96	; 0x60
				pdev->customer.mm_config__outer_offset_mm * 4;
 800921e:	bf03      	ittte	eq
 8009220:	f8b4 3058 	ldrheq.w	r3, [r4, #88]	; 0x58
 8009224:	009b      	lsleq	r3, r3, #2
 8009226:	b29b      	uxtheq	r3, r3
 8009228:	2300      	movne	r3, #0
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 800922a:	2120      	movs	r1, #32
		if (device_config_level <
 800922c:	2d04      	cmp	r5, #4
 800922e:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8009232:	f884 1186 	strb.w	r1, [r4, #390]	; 0x186
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8009236:	f8d4 32e4 	ldr.w	r3, [r4, #740]	; 0x2e4
		if (device_config_level <
 800923a:	d812      	bhi.n	8009262 <VL53L1_init_and_start_range+0x1ba>
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800923c:	4911      	ldr	r1, [pc, #68]	; (8009284 <VL53L1_init_and_start_range+0x1dc>)
 800923e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009242:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009246:	428b      	cmp	r3, r1
 8009248:	d005      	beq.n	8009256 <VL53L1_init_and_start_range+0x1ae>
 800924a:	267b      	movs	r6, #123	; 0x7b
 800924c:	270d      	movs	r7, #13
			device_config_level =
 800924e:	2505      	movs	r5, #5
 8009250:	e758      	b.n	8009104 <VL53L1_init_and_start_range+0x5c>
 8009252:	f894 22e7 	ldrb.w	r2, [r4, #743]	; 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 8009256:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
 800925a:	2687      	movs	r6, #135	; 0x87
 800925c:	2701      	movs	r7, #1
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 800925e:	2506      	movs	r5, #6
 8009260:	e750      	b.n	8009104 <VL53L1_init_and_start_range+0x5c>
 8009262:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009266:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800926a:	e740      	b.n	80090ee <VL53L1_init_and_start_range+0x46>
 800926c:	4a06      	ldr	r2, [pc, #24]	; (8009288 <VL53L1_init_and_start_range+0x1e0>)
 800926e:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
 8009272:	f1c7 0688 	rsb	r6, r7, #136	; 0x88
 8009276:	b2b6      	uxth	r6, r6
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 8009278:	2e00      	cmp	r6, #0
 800927a:	f47f af43 	bne.w	8009104 <VL53L1_init_and_start_range+0x5c>
 800927e:	46e8      	mov	r8, sp
 8009280:	e74c      	b.n	800911c <VL53L1_init_and_start_range+0x74>
 8009282:	bf00      	nop
 8009284:	00010100 	.word	0x00010100
 8009288:	08017184 	.word	0x08017184

0800928c <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 800928c:	b538      	push	{r3, r4, r5, lr}
			VL53L1DevStructGetLLDriverHandle(Dev);

	/* Merge ABORT mode with mode_start */

	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800928e:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
 8009292:	f003 030f 	and.w	r3, r3, #15
{
 8009296:	4604      	mov	r4, r0
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8009298:	f063 037f 	orn	r3, r3, #127	; 0x7f
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 800929c:	f500 71e4 	add.w	r1, r0, #456	; 0x1c8
	pdev->sys_ctrl.system__mode_start =
 80092a0:	f880 31cc 	strb.w	r3, [r0, #460]	; 0x1cc
	status = VL53L1_set_system_control(
 80092a4:	f002 fa30 	bl	800b708 <VL53L1_set_system_control>
				Dev,
				&pdev->sys_ctrl);

	/* Abort bit is auto clear so clear register group structure to match */
	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);
 80092a8:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
 80092ac:	f003 030f 	and.w	r3, r3, #15
	pdev->sys_ctrl.system__mode_start =
 80092b0:	f884 31cc 	strb.w	r3, [r4, #460]	; 0x1cc
	status = VL53L1_set_system_control(
 80092b4:	4605      	mov	r5, r0

	/* reset zone dynamic info */
	VL53L1_init_ll_driver_state(
 80092b6:	2103      	movs	r1, #3
 80092b8:	4620      	mov	r0, r4
 80092ba:	f001 fc63 	bl	800ab84 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* reset low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 80092be:	f894 32e5 	ldrb.w	r3, [r4, #741]	; 0x2e5
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d001      	beq.n	80092ca <VL53L1_stop_range+0x3e>
		VL53L1_low_power_auto_data_stop_range(Dev);

	return status;
}
 80092c6:	4628      	mov	r0, r5
 80092c8:	bd38      	pop	{r3, r4, r5, pc}
		VL53L1_low_power_auto_data_stop_range(Dev);
 80092ca:	4620      	mov	r0, r4
 80092cc:	f001 ff10 	bl	800b0f0 <VL53L1_low_power_auto_data_stop_range>
}
 80092d0:	4628      	mov	r0, r5
 80092d2:	bd38      	pop	{r3, r4, r5, pc}

080092d4 <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 80092d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 80092d8:	f890 22e6 	ldrb.w	r2, [r0, #742]	; 0x2e6
		(psystem->system__mode_start &
 80092dc:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
{
 80092e0:	4604      	mov	r4, r0
		(psystem->system__mode_start &
 80092e2:	f003 030f 	and.w	r3, r3, #15
	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 80092e6:	2aff      	cmp	r2, #255	; 0xff
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 80092e8:	f8b0 0142 	ldrh.w	r0, [r0, #322]	; 0x142
	pdev->measurement_mode = measurement_mode;
 80092ec:	70a1      	strb	r1, [r4, #2]
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 80092ee:	ea41 0103 	orr.w	r1, r1, r3
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 80092f2:	bf04      	itt	eq
 80092f4:	2300      	moveq	r3, #0
 80092f6:	f884 32e6 	strbeq.w	r3, [r4, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80092fa:	f8d4 32e4 	ldr.w	r3, [r4, #740]	; 0x2e4
 80092fe:	4a67      	ldr	r2, [pc, #412]	; (800949c <VL53L1_clear_interrupt_and_enable_next_range+0x1c8>)
	psystem->system__mode_start =
 8009300:	f884 11cc 	strb.w	r1, [r4, #460]	; 0x1cc
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8009304:	4013      	ands	r3, r2
 8009306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
{
 800930a:	b0c1      	sub	sp, #260	; 0x104
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800930c:	f8a4 017c 	strh.w	r0, [r4, #380]	; 0x17c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8009310:	f504 76da 	add.w	r6, r4, #436	; 0x1b4
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8009314:	d071      	beq.n	80093fa <VL53L1_clear_interrupt_and_enable_next_range+0x126>
 8009316:	2744      	movs	r7, #68	; 0x44
 8009318:	46b8      	mov	r8, r7
 800931a:	f04f 0903 	mov.w	r9, #3
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800931e:	4a60      	ldr	r2, [pc, #384]	; (80094a0 <VL53L1_clear_interrupt_and_enable_next_range+0x1cc>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d115      	bne.n	8009350 <VL53L1_clear_interrupt_and_enable_next_range+0x7c>
		pdev->gen_cfg.system__interrupt_config_gpio =
 8009324:	f894 32e7 	ldrb.w	r3, [r4, #743]	; 0x2e7
 8009328:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
 800932c:	2287      	movs	r2, #135	; 0x87
 800932e:	2100      	movs	r1, #0
 8009330:	4668      	mov	r0, sp
 8009332:	f00c f8b6 	bl	80154a2 <memset>
		status =
 8009336:	466a      	mov	r2, sp
 8009338:	210b      	movs	r1, #11
 800933a:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 800933e:	466d      	mov	r5, sp
 8009340:	f001 ff78 	bl	800b234 <VL53L1_i2c_encode_static_nvm_managed>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8009344:	2800      	cmp	r0, #0
 8009346:	f000 808a 	beq.w	800945e <VL53L1_clear_interrupt_and_enable_next_range+0x18a>
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
}
 800934a:	b041      	add	sp, #260	; 0x104
 800934c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*pbuffer++ = 0;
 8009350:	1e7a      	subs	r2, r7, #1
 8009352:	2f00      	cmp	r7, #0
 8009354:	b292      	uxth	r2, r2
 8009356:	f102 0201 	add.w	r2, r2, #1
 800935a:	4668      	mov	r0, sp
 800935c:	bf08      	it	eq
 800935e:	2201      	moveq	r2, #1
 8009360:	2100      	movs	r1, #0
 8009362:	f00c f89e 	bl	80154a2 <memset>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8009366:	f1b9 0f05 	cmp.w	r9, #5
 800936a:	466d      	mov	r5, sp
 800936c:	d07a      	beq.n	8009464 <VL53L1_clear_interrupt_and_enable_next_range+0x190>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 800936e:	f1b9 0f03 	cmp.w	r9, #3
 8009372:	f040 8083 	bne.w	800947c <VL53L1_clear_interrupt_and_enable_next_range+0x1a8>
		i2c_buffer_offset_bytes =
 8009376:	f1c8 0244 	rsb	r2, r8, #68	; 0x44
		status =
 800937a:	fa15 f282 	uxtah	r2, r5, r2
 800937e:	2116      	movs	r1, #22
 8009380:	f504 70c2 	add.w	r0, r4, #388	; 0x184
 8009384:	f002 f8da 	bl	800b53c <VL53L1_i2c_encode_general_config>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8009388:	2800      	cmp	r0, #0
 800938a:	d1de      	bne.n	800934a <VL53L1_clear_interrupt_and_enable_next_range+0x76>
		i2c_buffer_offset_bytes = \
 800938c:	f1c8 025a 	rsb	r2, r8, #90	; 0x5a
		status =
 8009390:	fa15 f282 	uxtah	r2, r5, r2
 8009394:	2117      	movs	r1, #23
 8009396:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
 800939a:	f002 f915 	bl	800b5c8 <VL53L1_i2c_encode_timing_config>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 800939e:	2800      	cmp	r0, #0
 80093a0:	d1d3      	bne.n	800934a <VL53L1_clear_interrupt_and_enable_next_range+0x76>
		if ((psystem->system__mode_start &
 80093a2:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
		i2c_buffer_offset_bytes = \
 80093a6:	f1c8 0271 	rsb	r2, r8, #113	; 0x71
		if ((psystem->system__mode_start &
 80093aa:	069b      	lsls	r3, r3, #26
		i2c_buffer_offset_bytes = \
 80093ac:	b292      	uxth	r2, r2
		if ((psystem->system__mode_start &
 80093ae:	d44b      	bmi.n	8009448 <VL53L1_clear_interrupt_and_enable_next_range+0x174>
		status =
 80093b0:	442a      	add	r2, r5
 80093b2:	4630      	mov	r0, r6
 80093b4:	2112      	movs	r1, #18
 80093b6:	f002 f94b 	bl	800b650 <VL53L1_i2c_encode_dynamic_config>
	if (status == VL53L1_ERROR_NONE) {
 80093ba:	2800      	cmp	r0, #0
 80093bc:	d1c5      	bne.n	800934a <VL53L1_clear_interrupt_and_enable_next_range+0x76>
		i2c_buffer_offset_bytes = \
 80093be:	f1c8 0283 	rsb	r2, r8, #131	; 0x83
		status =
 80093c2:	fa15 f282 	uxtah	r2, r5, r2
 80093c6:	2105      	movs	r1, #5
 80093c8:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
 80093cc:	f002 f982 	bl	800b6d4 <VL53L1_i2c_encode_system_control>
	if (status == VL53L1_ERROR_NONE) {
 80093d0:	2800      	cmp	r0, #0
 80093d2:	d1ba      	bne.n	800934a <VL53L1_clear_interrupt_and_enable_next_range+0x76>
		status =
 80093d4:	463b      	mov	r3, r7
 80093d6:	462a      	mov	r2, r5
 80093d8:	4641      	mov	r1, r8
 80093da:	4620      	mov	r0, r4
 80093dc:	f008 fc00 	bl	8011be0 <VL53L1_WriteMulti>
	if (status == VL53L1_ERROR_NONE)
 80093e0:	2800      	cmp	r0, #0
 80093e2:	d1b2      	bne.n	800934a <VL53L1_clear_interrupt_and_enable_next_range+0x76>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 80093e4:	4620      	mov	r0, r4
 80093e6:	f001 fbe1 	bl	800abac <VL53L1_update_ll_driver_rd_state>
	if (status == VL53L1_ERROR_NONE)
 80093ea:	2800      	cmp	r0, #0
 80093ec:	d1ad      	bne.n	800934a <VL53L1_clear_interrupt_and_enable_next_range+0x76>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 80093ee:	4620      	mov	r0, r4
 80093f0:	f001 fc58 	bl	800aca4 <VL53L1_update_ll_driver_cfg_state>
}
 80093f4:	b041      	add	sp, #260	; 0x104
 80093f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if ((pdev->dyn_cfg.system__sequence_config & (
 80093fa:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
		pdev->low_power_auto_data.saved_interrupt_config =
 80093fe:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
 8009402:	f884 12e7 	strb.w	r1, [r4, #743]	; 0x2e7
		if ((pdev->dyn_cfg.system__sequence_config & (
 8009406:	f013 0f60 	tst.w	r3, #96	; 0x60
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 800940a:	f04f 0120 	mov.w	r1, #32
 800940e:	f884 1186 	strb.w	r1, [r4, #390]	; 0x186
		if ((pdev->dyn_cfg.system__sequence_config & (
 8009412:	d10d      	bne.n	8009430 <VL53L1_clear_interrupt_and_enable_next_range+0x15c>
				pdev->customer.mm_config__outer_offset_mm * 4;
 8009414:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8009418:	f8d4 32e4 	ldr.w	r3, [r4, #740]	; 0x2e4
 800941c:	0089      	lsls	r1, r1, #2
			pdev->customer.algo__part_to_part_range_offset_mm =
 800941e:	f8a4 1054 	strh.w	r1, [r4, #84]	; 0x54
 8009422:	4013      	ands	r3, r2
 8009424:	277b      	movs	r7, #123	; 0x7b
 8009426:	f04f 080d 	mov.w	r8, #13
			device_config_level =
 800942a:	f04f 0905 	mov.w	r9, #5
 800942e:	e776      	b.n	800931e <VL53L1_clear_interrupt_and_enable_next_range+0x4a>
 8009430:	f8d4 32e4 	ldr.w	r3, [r4, #740]	; 0x2e4
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 8009434:	2100      	movs	r1, #0
 8009436:	4013      	ands	r3, r2
 8009438:	f8a4 1054 	strh.w	r1, [r4, #84]	; 0x54
 800943c:	277b      	movs	r7, #123	; 0x7b
 800943e:	f04f 080d 	mov.w	r8, #13
			device_config_level =
 8009442:	f04f 0905 	mov.w	r9, #5
 8009446:	e76a      	b.n	800931e <VL53L1_clear_interrupt_and_enable_next_range+0x4a>
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 8009448:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 800944c:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 8009450:	f043 0301 	orr.w	r3, r3, #1
 8009454:	f884 31b4 	strb.w	r3, [r4, #436]	; 0x1b4
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 8009458:	f884 31c0 	strb.w	r3, [r4, #448]	; 0x1c0
 800945c:	e7a8      	b.n	80093b0 <VL53L1_clear_interrupt_and_enable_next_range+0xdc>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 800945e:	f04f 0801 	mov.w	r8, #1
	i2c_buffer_size_bytes = \
 8009462:	2787      	movs	r7, #135	; 0x87
		i2c_buffer_offset_bytes = \
 8009464:	f1c8 020d 	rsb	r2, r8, #13
		status =
 8009468:	fa15 f282 	uxtah	r2, r5, r2
 800946c:	2117      	movs	r1, #23
 800946e:	f104 0042 	add.w	r0, r4, #66	; 0x42
 8009472:	f001 ff47 	bl	800b304 <VL53L1_i2c_encode_customer_nvm_managed>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8009476:	2800      	cmp	r0, #0
 8009478:	f47f af67 	bne.w	800934a <VL53L1_clear_interrupt_and_enable_next_range+0x76>
		i2c_buffer_offset_bytes = \
 800947c:	f1c8 0224 	rsb	r2, r8, #36	; 0x24
		status =
 8009480:	fa15 f282 	uxtah	r2, r5, r2
 8009484:	2120      	movs	r1, #32
 8009486:	f504 70b2 	add.w	r0, r4, #356	; 0x164
 800948a:	f001 ffe9 	bl	800b460 <VL53L1_i2c_encode_static_config>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 800948e:	2800      	cmp	r0, #0
 8009490:	f43f af71 	beq.w	8009376 <VL53L1_clear_interrupt_and_enable_next_range+0xa2>
}
 8009494:	b041      	add	sp, #260	; 0x104
 8009496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800949a:	bf00      	nop
 800949c:	00ffff00 	.word	0x00ffff00
 80094a0:	00010100 	.word	0x00010100

080094a4 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 80094a4:	b5f0      	push	{r4, r5, r6, r7, lr}

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 80094a6:	78ce      	ldrb	r6, [r1, #3]
 80094a8:	709e      	strb	r6, [r3, #2]
 80094aa:	784c      	ldrb	r4, [r1, #1]

	pdata = &(presults->data[0]);

	for (i = 0 ; i < 2 ; i++) {

		pdata->range_id     = i;
 80094ac:	2500      	movs	r5, #0
 80094ae:	f004 041f 	and.w	r4, r4, #31
 80094b2:	711d      	strb	r5, [r3, #4]
		pdata->time_stamp   = 0;
 80094b4:	609d      	str	r5, [r3, #8]

		if ((psys->result__stream_count == 0) &&
 80094b6:	2e00      	cmp	r6, #0
 80094b8:	d163      	bne.n	8009582 <VL53L1_copy_sys_and_core_results_to_range_results+0xde>
 80094ba:	2c09      	cmp	r4, #9
 80094bc:	bf14      	ite	ne
 80094be:	4625      	movne	r5, r4
 80094c0:	2513      	moveq	r5, #19
 80094c2:	f883 5042 	strb.w	r5, [r3, #66]	; 0x42

		switch (i) {

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 80094c6:	788d      	ldrb	r5, [r1, #2]
 80094c8:	2d07      	cmp	r5, #7
 80094ca:	d060      	beq.n	800958e <VL53L1_copy_sys_and_core_results_to_range_results+0xea>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 80094cc:	2d08      	cmp	r5, #8
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
			else
				pdata->actual_effective_spads =
 80094ce:	bf14      	ite	ne
 80094d0:	888d      	ldrhne	r5, [r1, #4]
				pdata->actual_effective_spads =
 80094d2:	8a8d      	ldrheq	r5, [r1, #20]
 80094d4:	829d      	strh	r5, [r3, #20]
				psys->result__ambient_count_rate_mcps_sd0;

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 80094d6:	894d      	ldrh	r5, [r1, #10]
			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;

			range_mm =
 80094d8:	89cf      	ldrh	r7, [r1, #14]
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 80094da:	016d      	lsls	r5, r5, #5
			pdata->sigma_mm = (uint16_t)tmpu32;
 80094dc:	f64f 7eff 	movw	lr, #65535	; 0xffff
 80094e0:	4575      	cmp	r5, lr
 80094e2:	bf28      	it	cs
 80094e4:	4675      	movcs	r5, lr
			pdata->peak_signal_count_rate_mcps =
 80094e6:	f8b1 e010 	ldrh.w	lr, [r1, #16]
 80094ea:	f8a3 e030 	strh.w	lr, [r3, #48]	; 0x30
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;

			/* apply correction gain */
			range_mm *= gain_factor;
 80094ee:	fb07 f000 	mul.w	r0, r7, r0
			pdata->avg_signal_count_rate_mcps =
 80094f2:	f8b1 e016 	ldrh.w	lr, [r1, #22]
			pdata->median_phase =
 80094f6:	898f      	ldrh	r7, [r1, #12]
			pdata->avg_signal_count_rate_mcps =
 80094f8:	f8a3 e032 	strh.w	lr, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps =
 80094fc:	f8b1 e008 	ldrh.w	lr, [r1, #8]
			pdata->sigma_mm = (uint16_t)tmpu32;
 8009500:	879d      	strh	r5, [r3, #60]	; 0x3c
			range_mm += 0x0400;
			range_mm /= 0x0800;
 8009502:	f510 6580 	adds.w	r5, r0, #1024	; 0x400
 8009506:	bf48      	it	mi
 8009508:	f600 35ff 	addwmi	r5, r0, #3071	; 0xbff
 800950c:	12ed      	asrs	r5, r5, #11

			pdata->median_range_mm = (int16_t)range_mm;

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
			pdata->signal_total_events =
 800950e:	6890      	ldr	r0, [r2, #8]
			pdata->median_phase =
 8009510:	87df      	strh	r7, [r3, #62]	; 0x3e
			pdata->ranging_total_events =
 8009512:	6857      	ldr	r7, [r2, #4]
			pdata->median_range_mm = (int16_t)range_mm;
 8009514:	f8a3 5040 	strh.w	r5, [r3, #64]	; 0x40
				pcore->result_core__signal_total_events_sd0;
			pdata->total_periods_elapsed =
 8009518:	68d5      	ldr	r5, [r2, #12]
				pcore->result_core__total_periods_elapsed_sd0;
			pdata->ambient_window_events =
 800951a:	6812      	ldr	r2, [r2, #0]
			pdata->ranging_total_events =
 800951c:	629f      	str	r7, [r3, #40]	; 0x28
			pdata->signal_total_events =
 800951e:	62d8      	str	r0, [r3, #44]	; 0x2c
		pdata->range_id     = i;
 8009520:	2701      	movs	r7, #1
		pdata->time_stamp   = 0;
 8009522:	2000      	movs	r0, #0
			pdata->ambient_count_rate_mcps =
 8009524:	f8a3 e034 	strh.w	lr, [r3, #52]	; 0x34
			pdata->total_periods_elapsed =
 8009528:	619d      	str	r5, [r3, #24]
			pdata->ambient_window_events =
 800952a:	625a      	str	r2, [r3, #36]	; 0x24
		pdata->range_id     = i;
 800952c:	f883 7044 	strb.w	r7, [r3, #68]	; 0x44
		pdata->time_stamp   = 0;
 8009530:	6498      	str	r0, [r3, #72]	; 0x48
		if ((psys->result__stream_count == 0) &&
 8009532:	b37e      	cbz	r6, 8009594 <VL53L1_copy_sys_and_core_results_to_range_results+0xf0>
 8009534:	4622      	mov	r2, r4
 8009536:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
				psys->result__ambient_count_rate_mcps_sd1;

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800953a:	8bca      	ldrh	r2, [r1, #30]
			pdata->actual_effective_spads =
 800953c:	8b08      	ldrh	r0, [r1, #24]
			pdata->peak_signal_count_rate_mcps =
 800953e:	8b4f      	ldrh	r7, [r1, #26]
			pdata->actual_effective_spads =
 8009540:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8009544:	0152      	lsls	r2, r2, #5
			pdata->avg_signal_count_rate_mcps =
 8009546:	f64f 70ff 	movw	r0, #65535	; 0xffff
			if (tmpu32 > 0xFFFF) {
				tmpu32 = 0xFFFF;
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800954a:	4282      	cmp	r2, r0
			pdata->ambient_count_rate_mcps =
 800954c:	8b8e      	ldrh	r6, [r1, #28]

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
 800954e:	8c0d      	ldrh	r5, [r1, #32]
 8009550:	f8a3 507e 	strh.w	r5, [r3, #126]	; 0x7e
			pdata->sigma_mm = (uint16_t)tmpu32;
 8009554:	bf28      	it	cs
 8009556:	4602      	movcs	r2, r0

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8009558:	2100      	movs	r1, #0
 800955a:	2c11      	cmp	r4, #17
			pdata->peak_signal_count_rate_mcps =
 800955c:	f8a3 7070 	strh.w	r7, [r3, #112]	; 0x70
			pdata->avg_signal_count_rate_mcps =
 8009560:	f8a3 0072 	strh.w	r0, [r3, #114]	; 0x72
			pdata->sigma_mm = (uint16_t)tmpu32;
 8009564:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
			pdata->ambient_count_rate_mcps =
 8009568:	f8a3 6074 	strh.w	r6, [r3, #116]	; 0x74
	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 800956c:	70d9      	strb	r1, [r3, #3]
 800956e:	d807      	bhi.n	8009580 <VL53L1_copy_sys_and_core_results_to_range_results+0xdc>
 8009570:	2201      	movs	r2, #1
 8009572:	480b      	ldr	r0, [pc, #44]	; (80095a0 <VL53L1_copy_sys_and_core_results_to_range_results+0xfc>)
 8009574:	40a2      	lsls	r2, r4
 8009576:	4202      	tst	r2, r0
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8009578:	bf1c      	itt	ne
 800957a:	70dc      	strbne	r4, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 800957c:	f883 1042 	strbne.w	r1, [r3, #66]	; 0x42
 8009580:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((psys->result__stream_count == 0) &&
 8009582:	4625      	mov	r5, r4
 8009584:	f883 5042 	strb.w	r5, [r3, #66]	; 0x42
			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 8009588:	788d      	ldrb	r5, [r1, #2]
 800958a:	2d07      	cmp	r5, #7
 800958c:	d19e      	bne.n	80094cc <VL53L1_copy_sys_and_core_results_to_range_results+0x28>
				pdata->actual_effective_spads =
 800958e:	8a4d      	ldrh	r5, [r1, #18]
 8009590:	829d      	strh	r5, [r3, #20]
 8009592:	e7a0      	b.n	80094d6 <VL53L1_copy_sys_and_core_results_to_range_results+0x32>
		if ((psys->result__stream_count == 0) &&
 8009594:	2c09      	cmp	r4, #9
 8009596:	bf14      	ite	ne
 8009598:	4622      	movne	r2, r4
 800959a:	2213      	moveq	r2, #19
 800959c:	e7cb      	b.n	8009536 <VL53L1_copy_sys_and_core_results_to_range_results+0x92>
 800959e:	bf00      	nop
 80095a0:	0002200e 	.word	0x0002200e

080095a4 <VL53L1_get_device_results>:
{
 80095a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	switch (device_results_level) {
 80095a8:	2901      	cmp	r1, #1
{
 80095aa:	b0c0      	sub	sp, #256	; 0x100
 80095ac:	4604      	mov	r4, r0
 80095ae:	4691      	mov	r9, r2
	VL53L1_range_results_t   *presults = &(pres->range_results);
 80095b0:	f500 783d 	add.w	r8, r0, #756	; 0x2f4
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 80095b4:	f500 7a22 	add.w	sl, r0, #648	; 0x288
	switch (device_results_level) {
 80095b8:	d050      	beq.n	800965c <VL53L1_get_device_results+0xb8>
 80095ba:	2902      	cmp	r1, #2
 80095bc:	460e      	mov	r6, r1
		status =
 80095be:	466f      	mov	r7, sp
 80095c0:	466a      	mov	r2, sp
	switch (device_results_level) {
 80095c2:	d117      	bne.n	80095f4 <VL53L1_get_device_results+0x50>
		status =
 80095c4:	2386      	movs	r3, #134	; 0x86
 80095c6:	2188      	movs	r1, #136	; 0x88
 80095c8:	f008 fb32 	bl	8011c30 <VL53L1_ReadMulti>
 80095cc:	4605      	mov	r5, r0
	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 80095ce:	2d00      	cmp	r5, #0
 80095d0:	d054      	beq.n	800967c <VL53L1_get_device_results+0xd8>
	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 80095d2:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 80095d6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 80095da:	f884 22f4 	strb.w	r2, [r4, #756]	; 0x2f4
	memcpy(
 80095de:	4641      	mov	r1, r8
 80095e0:	4648      	mov	r0, r9
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 80095e2:	f884 32f5 	strb.w	r3, [r4, #757]	; 0x2f5
	memcpy(
 80095e6:	2284      	movs	r2, #132	; 0x84
 80095e8:	f00b ff50 	bl	801548c <memcpy>
}
 80095ec:	4628      	mov	r0, r5
 80095ee:	b040      	add	sp, #256	; 0x100
 80095f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		status =
 80095f4:	232c      	movs	r3, #44	; 0x2c
 80095f6:	2188      	movs	r1, #136	; 0x88
 80095f8:	f008 fb1a 	bl	8011c30 <VL53L1_ReadMulti>
	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 80095fc:	2e01      	cmp	r6, #1
		status =
 80095fe:	4605      	mov	r5, r0
	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 8009600:	d8e5      	bhi.n	80095ce <VL53L1_get_device_results+0x2a>
	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 8009602:	bb96      	cbnz	r6, 800966a <VL53L1_get_device_results+0xc6>
	if (status == VL53L1_ERROR_NONE) {
 8009604:	2d00      	cmp	r5, #0
 8009606:	d1e4      	bne.n	80095d2 <VL53L1_get_device_results+0x2e>
	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 8009608:	f504 76e7 	add.w	r6, r4, #462	; 0x1ce
		status =
 800960c:	4639      	mov	r1, r7
 800960e:	4632      	mov	r2, r6
 8009610:	202c      	movs	r0, #44	; 0x2c
 8009612:	f002 f899 	bl	800b748 <VL53L1_i2c_decode_system_results>
	if (status == VL53L1_ERROR_NONE)
 8009616:	4605      	mov	r5, r0
 8009618:	2800      	cmp	r0, #0
 800961a:	d1da      	bne.n	80095d2 <VL53L1_get_device_results+0x2e>
		VL53L1_copy_sys_and_core_results_to_range_results(
 800961c:	4652      	mov	r2, sl
 800961e:	4631      	mov	r1, r6
 8009620:	4643      	mov	r3, r8
 8009622:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
 8009626:	f7ff ff3d 	bl	80094a4 <VL53L1_copy_sys_and_core_results_to_range_results>
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 800962a:	f894 52e5 	ldrb.w	r5, [r4, #741]	; 0x2e5
 800962e:	2d01      	cmp	r5, #1
 8009630:	d02d      	beq.n	800968e <VL53L1_get_device_results+0xea>
	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8009632:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8009636:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 800963a:	f884 22f4 	strb.w	r2, [r4, #756]	; 0x2f4
	memcpy(
 800963e:	4641      	mov	r1, r8
 8009640:	4648      	mov	r0, r9
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8009642:	f884 32f5 	strb.w	r3, [r4, #757]	; 0x2f5
	memcpy(
 8009646:	2284      	movs	r2, #132	; 0x84
 8009648:	f00b ff20 	bl	801548c <memcpy>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 800964c:	4620      	mov	r0, r4
 800964e:	f001 fafb 	bl	800ac48 <VL53L1_check_ll_driver_rd_state>
 8009652:	4605      	mov	r5, r0
}
 8009654:	4628      	mov	r0, r5
 8009656:	b040      	add	sp, #256	; 0x100
 8009658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		status =
 800965c:	466a      	mov	r2, sp
 800965e:	234d      	movs	r3, #77	; 0x4d
 8009660:	2188      	movs	r1, #136	; 0x88
 8009662:	f008 fae5 	bl	8011c30 <VL53L1_ReadMulti>
 8009666:	466f      	mov	r7, sp
 8009668:	4605      	mov	r5, r0
	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 800966a:	2d00      	cmp	r5, #0
 800966c:	d1b1      	bne.n	80095d2 <VL53L1_get_device_results+0x2e>
		status =
 800966e:	4652      	mov	r2, sl
 8009670:	a90b      	add	r1, sp, #44	; 0x2c
 8009672:	2021      	movs	r0, #33	; 0x21
 8009674:	f002 f8f8 	bl	800b868 <VL53L1_i2c_decode_core_results>
 8009678:	4605      	mov	r5, r0
 800967a:	e7c3      	b.n	8009604 <VL53L1_get_device_results+0x60>
		status =
 800967c:	f504 722b 	add.w	r2, r4, #684	; 0x2ac
 8009680:	f10d 014e 	add.w	r1, sp, #78	; 0x4e
 8009684:	2038      	movs	r0, #56	; 0x38
 8009686:	f002 f92b 	bl	800b8e0 <VL53L1_i2c_decode_debug_results>
 800968a:	4605      	mov	r5, r0
 800968c:	e7ed      	b.n	800966a <VL53L1_get_device_results+0xc6>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800968e:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 8009692:	b1bb      	cbz	r3, 80096c4 <VL53L1_get_device_results+0x120>
		} else if ((status == VL53L1_ERROR_NONE) &&
 8009694:	2b01      	cmp	r3, #1
 8009696:	d01f      	beq.n	80096d8 <VL53L1_get_device_results+0x134>
		if ((pdev->low_power_auto_data.low_power_auto_range_count != 0xFF) &&
 8009698:	2bff      	cmp	r3, #255	; 0xff
 800969a:	d0ca      	beq.n	8009632 <VL53L1_get_device_results+0x8e>
			status = VL53L1_low_power_auto_update_DSS(
 800969c:	4620      	mov	r0, r4
 800969e:	f001 fd73 	bl	800b188 <VL53L1_low_power_auto_update_DSS>
	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 80096a2:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 80096a6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 80096aa:	f884 22f4 	strb.w	r2, [r4, #756]	; 0x2f4
			status = VL53L1_low_power_auto_update_DSS(
 80096ae:	4605      	mov	r5, r0
	memcpy(
 80096b0:	4641      	mov	r1, r8
 80096b2:	4648      	mov	r0, r9
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 80096b4:	f884 32f5 	strb.w	r3, [r4, #757]	; 0x2f5
	memcpy(
 80096b8:	2284      	movs	r2, #132	; 0x84
 80096ba:	f00b fee7 	bl	801548c <memcpy>
	if (status == VL53L1_ERROR_NONE)
 80096be:	2d00      	cmp	r5, #0
 80096c0:	d0c4      	beq.n	800964c <VL53L1_get_device_results+0xa8>
 80096c2:	e793      	b.n	80095ec <VL53L1_get_device_results+0x48>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 80096c4:	4620      	mov	r0, r4
 80096c6:	f001 fd3d 	bl	800b144 <VL53L1_low_power_auto_setup_manual_calibration>
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 80096ca:	f884 52e6 	strb.w	r5, [r4, #742]	; 0x2e6
		if ((pdev->low_power_auto_data.low_power_auto_range_count != 0xFF) &&
 80096ce:	4605      	mov	r5, r0
 80096d0:	2800      	cmp	r0, #0
 80096d2:	f47f af7e 	bne.w	80095d2 <VL53L1_get_device_results+0x2e>
 80096d6:	e7e1      	b.n	800969c <VL53L1_get_device_results+0xf8>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 80096d8:	2302      	movs	r3, #2
 80096da:	f884 32e6 	strb.w	r3, [r4, #742]	; 0x2e6
 80096de:	e7dd      	b.n	800969c <VL53L1_get_device_results+0xf8>

080096e0 <VL53L1_get_tuning_parm>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 80096e0:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 80096e4:	2938      	cmp	r1, #56	; 0x38
 80096e6:	f200 8158 	bhi.w	800999a <VL53L1_get_tuning_parm+0x2ba>
 80096ea:	e8df f011 	tbh	[pc, r1, lsl #1]
 80096ee:	0151      	.short	0x0151
 80096f0:	0147014c 	.word	0x0147014c
 80096f4:	013d0142 	.word	0x013d0142
 80096f8:	01330138 	.word	0x01330138
 80096fc:	0129012e 	.word	0x0129012e
 8009700:	011f0124 	.word	0x011f0124
 8009704:	0115011a 	.word	0x0115011a
 8009708:	010b0110 	.word	0x010b0110
 800970c:	01010106 	.word	0x01010106
 8009710:	00f700fc 	.word	0x00f700fc
 8009714:	00ed00f2 	.word	0x00ed00f2
 8009718:	00e300e8 	.word	0x00e300e8
 800971c:	00d900de 	.word	0x00d900de
 8009720:	00cf00d4 	.word	0x00cf00d4
 8009724:	00c500ca 	.word	0x00c500ca
 8009728:	00bb00c0 	.word	0x00bb00c0
 800972c:	00b100b6 	.word	0x00b100b6
 8009730:	00a700ac 	.word	0x00a700ac
 8009734:	009d00a2 	.word	0x009d00a2
 8009738:	00930098 	.word	0x00930098
 800973c:	0089008e 	.word	0x0089008e
 8009740:	007f0084 	.word	0x007f0084
 8009744:	0075007a 	.word	0x0075007a
 8009748:	006b0070 	.word	0x006b0070
 800974c:	00610066 	.word	0x00610066
 8009750:	0057005c 	.word	0x0057005c
 8009754:	004d0052 	.word	0x004d0052
 8009758:	00430048 	.word	0x00430048
 800975c:	0039003e 	.word	0x0039003e
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
	break;
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8009760:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8009764:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009766:	2000      	movs	r0, #0
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
	break;
 8009768:	4770      	bx	lr
		*ptuning_parm_value =
 800976a:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 800976e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009770:	2000      	movs	r0, #0
	break;
 8009772:	4770      	bx	lr
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8009774:	f890 32e4 	ldrb.w	r3, [r0, #740]	; 0x2e4
 8009778:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800977a:	2000      	movs	r0, #0
	break;
 800977c:	4770      	bx	lr
		*ptuning_parm_value =
 800977e:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
 8009782:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009784:	2000      	movs	r0, #0
	break;
 8009786:	4770      	bx	lr
		*ptuning_parm_value =
 8009788:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
 800978c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800978e:	2000      	movs	r0, #0
	break;
 8009790:	4770      	bx	lr
		*ptuning_parm_value =
 8009792:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8009796:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009798:	2000      	movs	r0, #0
	break;
 800979a:	4770      	bx	lr
		*ptuning_parm_value =
 800979c:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 80097a0:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80097a2:	2000      	movs	r0, #0
	break;
 80097a4:	4770      	bx	lr
		*ptuning_parm_value =
 80097a6:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
 80097aa:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80097ac:	2000      	movs	r0, #0
	break;
 80097ae:	4770      	bx	lr
		*ptuning_parm_value =
 80097b0:	f8d0 30d0 	ldr.w	r3, [r0, #208]	; 0xd0
 80097b4:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80097b6:	2000      	movs	r0, #0
	break;
 80097b8:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 80097ba:	f8b0 30cc 	ldrh.w	r3, [r0, #204]	; 0xcc
 80097be:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80097c0:	2000      	movs	r0, #0
	break;
 80097c2:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 80097c4:	f8b0 30ca 	ldrh.w	r3, [r0, #202]	; 0xca
 80097c8:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80097ca:	2000      	movs	r0, #0
	break;
 80097cc:	4770      	bx	lr
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 80097ce:	f8b0 3128 	ldrh.w	r3, [r0, #296]	; 0x128
 80097d2:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80097d4:	2000      	movs	r0, #0
	break;
 80097d6:	4770      	bx	lr
				(int32_t)pdev->ssc_cfg.vcsel_start;
 80097d8:	f890 3122 	ldrb.w	r3, [r0, #290]	; 0x122
 80097dc:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80097de:	2000      	movs	r0, #0
	break;
 80097e0:	4770      	bx	lr
				(int32_t)pdev->ssc_cfg.vcsel_period;
 80097e2:	f890 3121 	ldrb.w	r3, [r0, #289]	; 0x121
 80097e6:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80097e8:	2000      	movs	r0, #0
	break;
 80097ea:	4770      	bx	lr
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 80097ec:	f890 3156 	ldrb.w	r3, [r0, #342]	; 0x156
 80097f0:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80097f2:	2000      	movs	r0, #0
	break;
 80097f4:	4770      	bx	lr
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 80097f6:	f890 3155 	ldrb.w	r3, [r0, #341]	; 0x155
 80097fa:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80097fc:	2000      	movs	r0, #0
	break;
 80097fe:	4770      	bx	lr
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8009800:	f890 3154 	ldrb.w	r3, [r0, #340]	; 0x154
 8009804:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009806:	2000      	movs	r0, #0
	break;
 8009808:	4770      	bx	lr
		*ptuning_parm_value =
 800980a:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 800980e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009810:	2000      	movs	r0, #0
	break;
 8009812:	4770      	bx	lr
		*ptuning_parm_value =
 8009814:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
 8009818:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800981a:	2000      	movs	r0, #0
	break;
 800981c:	4770      	bx	lr
		*ptuning_parm_value =
 800981e:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
 8009822:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009824:	2000      	movs	r0, #0
	break;
 8009826:	4770      	bx	lr
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 8009828:	f8b0 3144 	ldrh.w	r3, [r0, #324]	; 0x144
 800982c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800982e:	2000      	movs	r0, #0
	break;
 8009830:	4770      	bx	lr
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8009832:	f8b0 311c 	ldrh.w	r3, [r0, #284]	; 0x11c
 8009836:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009838:	2000      	movs	r0, #0
	break;
 800983a:	4770      	bx	lr
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 800983c:	f8b0 311a 	ldrh.w	r3, [r0, #282]	; 0x11a
 8009840:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009842:	2000      	movs	r0, #0
	break;
 8009844:	4770      	bx	lr
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8009846:	f8b0 3118 	ldrh.w	r3, [r0, #280]	; 0x118
 800984a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800984c:	2000      	movs	r0, #0
	break;
 800984e:	4770      	bx	lr
		*ptuning_parm_value =
 8009850:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8009854:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009856:	2000      	movs	r0, #0
	break;
 8009858:	4770      	bx	lr
				(int32_t)pdev->refspadchar.vcsel_period;
 800985a:	f890 3111 	ldrb.w	r3, [r0, #273]	; 0x111
 800985e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009860:	2000      	movs	r0, #0
	break;
 8009862:	4770      	bx	lr
				(int32_t)pdev->refspadchar.device_test_mode;
 8009864:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
 8009868:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800986a:	2000      	movs	r0, #0
	break;
 800986c:	4770      	bx	lr
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800986e:	f890 3160 	ldrb.w	r3, [r0, #352]	; 0x160
 8009872:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009874:	2000      	movs	r0, #0
	break;
 8009876:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8009878:	f890 30c6 	ldrb.w	r3, [r0, #198]	; 0xc6
 800987c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800987e:	2000      	movs	r0, #0
	break;
 8009880:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8009882:	f890 30af 	ldrb.w	r3, [r0, #175]	; 0xaf
 8009886:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009888:	2000      	movs	r0, #0
	break;
 800988a:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 800988c:	f890 30ae 	ldrb.w	r3, [r0, #174]	; 0xae
 8009890:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009892:	2000      	movs	r0, #0
	break;
 8009894:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8009896:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
 800989a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800989c:	2000      	movs	r0, #0
	break;
 800989e:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 80098a0:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 80098a4:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80098a6:	2000      	movs	r0, #0
	break;
 80098a8:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 80098aa:	f890 30ab 	ldrb.w	r3, [r0, #171]	; 0xab
 80098ae:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80098b0:	2000      	movs	r0, #0
	break;
 80098b2:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 80098b4:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
 80098b8:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80098ba:	2000      	movs	r0, #0
	break;
 80098bc:	4770      	bx	lr
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 80098be:	f9b0 313e 	ldrsh.w	r3, [r0, #318]	; 0x13e
 80098c2:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80098c4:	2000      	movs	r0, #0
	break;
 80098c6:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 80098c8:	f890 30c8 	ldrb.w	r3, [r0, #200]	; 0xc8
 80098cc:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80098ce:	2000      	movs	r0, #0
	break;
 80098d0:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 80098d2:	f890 30c7 	ldrb.w	r3, [r0, #199]	; 0xc7
 80098d6:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80098d8:	2000      	movs	r0, #0
	break;
 80098da:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 80098dc:	f890 30c5 	ldrb.w	r3, [r0, #197]	; 0xc5
 80098e0:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80098e2:	2000      	movs	r0, #0
	break;
 80098e4:	4770      	bx	lr
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 80098e6:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 80098ea:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80098ec:	2000      	movs	r0, #0
	break;
 80098ee:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 80098f0:	f890 30c4 	ldrb.w	r3, [r0, #196]	; 0xc4
 80098f4:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80098f6:	2000      	movs	r0, #0
	break;
 80098f8:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 80098fa:	f890 30c3 	ldrb.w	r3, [r0, #195]	; 0xc3
 80098fe:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009900:	2000      	movs	r0, #0
	break;
 8009902:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8009904:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
 8009908:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800990a:	2000      	movs	r0, #0
	break;
 800990c:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 800990e:	f8b0 30c0 	ldrh.w	r3, [r0, #192]	; 0xc0
 8009912:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009914:	2000      	movs	r0, #0
	break;
 8009916:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8009918:	f8b0 30be 	ldrh.w	r3, [r0, #190]	; 0xbe
 800991c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800991e:	2000      	movs	r0, #0
	break;
 8009920:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 8009922:	f8b0 30bc 	ldrh.w	r3, [r0, #188]	; 0xbc
 8009926:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009928:	2000      	movs	r0, #0
	break;
 800992a:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 800992c:	f8b0 30ba 	ldrh.w	r3, [r0, #186]	; 0xba
 8009930:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009932:	2000      	movs	r0, #0
	break;
 8009934:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8009936:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
 800993a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800993c:	2000      	movs	r0, #0
	break;
 800993e:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8009940:	f8b0 30b6 	ldrh.w	r3, [r0, #182]	; 0xb6
 8009944:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009946:	2000      	movs	r0, #0
	break;
 8009948:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 800994a:	f890 30b4 	ldrb.w	r3, [r0, #180]	; 0xb4
 800994e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009950:	2000      	movs	r0, #0
	break;
 8009952:	4770      	bx	lr
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8009954:	f8b0 309c 	ldrh.w	r3, [r0, #156]	; 0x9c
 8009958:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800995a:	2000      	movs	r0, #0
	break;
 800995c:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 800995e:	f8b0 30b2 	ldrh.w	r3, [r0, #178]	; 0xb2
 8009962:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009964:	2000      	movs	r0, #0
	break;
 8009966:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8009968:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
 800996c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800996e:	2000      	movs	r0, #0
	break;
 8009970:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8009972:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 8009976:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009978:	2000      	movs	r0, #0
	break;
 800997a:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 800997c:	f8b0 30a8 	ldrh.w	r3, [r0, #168]	; 0xa8
 8009980:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009982:	2000      	movs	r0, #0
	break;
 8009984:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8009986:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 800998a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800998c:	2000      	movs	r0, #0
	break;
 800998e:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8009990:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
 8009994:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009996:	2000      	movs	r0, #0
	break;
 8009998:	4770      	bx	lr


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 800999a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800999e:	6013      	str	r3, [r2, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 80099a0:	f06f 0003 	mvn.w	r0, #3
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80099a4:	4770      	bx	lr
 80099a6:	bf00      	nop

080099a8 <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 80099a8:	b470      	push	{r4, r5, r6}
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 80099aa:	2608      	movs	r6, #8
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 80099ac:	250b      	movs	r5, #11
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 80099ae:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	pdata->device_test_mode =
 80099b2:	7006      	strb	r6, [r0, #0]
	pdata->vcsel_period              =
 80099b4:	7045      	strb	r5, [r0, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 80099b6:	f44f 6120 	mov.w	r1, #2560	; 0xa00
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 80099ba:	f44f 62a0 	mov.w	r2, #1280	; 0x500
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 80099be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
	pdata->timeout_us                =
 80099c2:	6044      	str	r4, [r0, #4]
	pdata->target_count_rate_mcps    =
 80099c4:	8101      	strh	r1, [r0, #8]
	pdata->min_count_rate_limit_mcps =
 80099c6:	8142      	strh	r2, [r0, #10]
	pdata->max_count_rate_limit_mcps =
 80099c8:	8183      	strh	r3, [r0, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 80099ca:	bc70      	pop	{r4, r5, r6}
 80099cc:	2000      	movs	r0, #0
 80099ce:	4770      	bx	lr

080099d0 <VL53L1_init_ssc_config_struct>:
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 80099d0:	4b04      	ldr	r3, [pc, #16]	; (80099e4 <VL53L1_init_ssc_config_struct+0x14>)
 80099d2:	6003      	str	r3, [r0, #0]

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 80099d4:	f648 42a0 	movw	r2, #36000	; 0x8ca0

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 80099d8:	230c      	movs	r3, #12
	pdata->timeout_us   = 36000;
 80099da:	6042      	str	r2, [r0, #4]
	pdata->rate_limit_mcps =
 80099dc:	8103      	strh	r3, [r0, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 80099de:	2000      	movs	r0, #0
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop
 80099e4:	020f1200 	.word	0x020f1200

080099e8 <VL53L1_init_xtalk_config_struct>:
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 80099e8:	8943      	ldrh	r3, [r0, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80099ea:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
{
 80099ee:	b570      	push	{r4, r5, r6, lr}
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80099f0:	f9b0 500c 	ldrsh.w	r5, [r0, #12]
 80099f4:	68c4      	ldr	r4, [r0, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 80099f6:	604c      	str	r4, [r1, #4]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;

	pdata->lite_mode_crosstalk_margin_kcps                     =
 80099f8:	2600      	movs	r6, #0
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 80099fa:	2040      	movs	r0, #64	; 0x40
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 80099fc:	600b      	str	r3, [r1, #0]
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 80099fe:	608b      	str	r3, [r1, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 8009a00:	818d      	strh	r5, [r1, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8009a02:	81ca      	strh	r2, [r1, #14]
	pdata->lite_mode_crosstalk_margin_kcps                     =
 8009a04:	824e      	strh	r6, [r1, #18]
	pdata->crosstalk_range_ignore_threshold_mult =
 8009a06:	7508      	strb	r0, [r1, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8009a08:	b923      	cbnz	r3, 8009a14 <VL53L1_init_xtalk_config_struct+0x2c>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 8009a0a:	b91c      	cbnz	r4, 8009a14 <VL53L1_init_xtalk_config_struct+0x2c>
 8009a0c:	740c      	strb	r4, [r1, #16]
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8009a0e:	82cc      	strh	r4, [r1, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8009a10:	2000      	movs	r0, #0
 8009a12:	bd70      	pop	{r4, r5, r6, pc}
 8009a14:	460c      	mov	r4, r1
 8009a16:	2601      	movs	r6, #1
			VL53L1_calc_range_ignore_threshold(
 8009a18:	4629      	mov	r1, r5
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	7426      	strb	r6, [r4, #16]
 8009a1e:	2340      	movs	r3, #64	; 0x40
 8009a20:	f001 fa40 	bl	800aea4 <VL53L1_calc_range_ignore_threshold>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8009a24:	82e0      	strh	r0, [r4, #22]
}
 8009a26:	2000      	movs	r0, #0
 8009a28:	bd70      	pop	{r4, r5, r6, pc}
 8009a2a:	bf00      	nop

08009a2c <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 8009a2c:	b470      	push	{r4, r5, r6}

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 8009a2e:	2128      	movs	r1, #40	; 0x28
	pdata->pre_num_of_samples                          =
 8009a30:	2408      	movs	r4, #8
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8009a32:	2209      	movs	r2, #9
	pdata->dss_config__target_total_rate_mcps          =
 8009a34:	f44f 6620 	mov.w	r6, #2560	; 0xa00
	pdata->phasecal_config_timeout_us                  =
 8009a38:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	pdata->range_config_timeout_us                     =
 8009a3c:	f243 23c8 	movw	r3, #13000	; 0x32c8
	pdata->pre_num_of_samples                          =
 8009a40:	7404      	strb	r4, [r0, #16]
	pdata->mm1_num_of_samples                          =
 8009a42:	7441      	strb	r1, [r0, #17]
	pdata->mm2_num_of_samples                          =
 8009a44:	7482      	strb	r2, [r0, #18]
	pdata->dss_config__target_total_rate_mcps          =
 8009a46:	8006      	strh	r6, [r0, #0]
	pdata->phasecal_config_timeout_us                  =
 8009a48:	6045      	str	r5, [r0, #4]
	pdata->range_config_timeout_us                     =
 8009a4a:	6083      	str	r3, [r0, #8]
	pdata->mm_config_timeout_us                        =
 8009a4c:	60c3      	str	r3, [r0, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8009a4e:	bc70      	pop	{r4, r5, r6}
 8009a50:	2000      	movs	r0, #0
 8009a52:	4770      	bx	lr

08009a54 <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 8009a54:	b4f0      	push	{r4, r5, r6, r7}
 8009a56:	4603      	mov	r3, r0
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 8009a58:	4a22      	ldr	r2, [pc, #136]	; (8009ae4 <VL53L1_init_tuning_parm_storage_struct+0x90>)
 8009a5a:	4c23      	ldr	r4, [pc, #140]	; (8009ae8 <VL53L1_init_tuning_parm_storage_struct+0x94>)
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8009a5c:	4923      	ldr	r1, [pc, #140]	; (8009aec <VL53L1_init_tuning_parm_storage_struct+0x98>)
	pdata->tp_init_phase_rtn_lite_long         =
 8009a5e:	f8c3 2006 	str.w	r2, [r3, #6]
	pdata->tp_tuning_parm_lld_version          =
 8009a62:	f248 0041 	movw	r0, #32833	; 0x8041
	pdata->tp_tuning_parm_version              =
 8009a66:	f248 0603 	movw	r6, #32771	; 0x8003
	pdata->tp_tuning_parm_key_table_version    =
 8009a6a:	f248 0501 	movw	r5, #32769	; 0x8001
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 8009a6e:	f04f 220a 	mov.w	r2, #167774720	; 0xa000a00
	pdata->tp_init_phase_rtn_lite_long         =
 8009a72:	f8c3 400a 	str.w	r4, [r3, #10]
	pdata->tp_tuning_parm_lld_version          =
 8009a76:	8098      	strh	r0, [r3, #4]
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8009a78:	f248 0430 	movw	r4, #32816	; 0x8030
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8009a7c:	2010      	movs	r0, #16
	pdata->tp_lite_long_sigma_thresh_mm        =
 8009a7e:	4f1c      	ldr	r7, [pc, #112]	; (8009af0 <VL53L1_init_tuning_parm_storage_struct+0x9c>)
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8009a80:	77d8      	strb	r0, [r3, #31]
	pdata->tp_tuning_parm_version              =
 8009a82:	801e      	strh	r6, [r3, #0]
	pdata->tp_cal_repeat_rate                  =
 8009a84:	2000      	movs	r0, #0
	pdata->tp_lite_long_sigma_thresh_mm        =
 8009a86:	f04f 16c0 	mov.w	r6, #12583104	; 0xc000c0
	pdata->tp_tuning_parm_key_table_version    =
 8009a8a:	805d      	strh	r5, [r3, #2]
	pdata->tp_lite_long_sigma_thresh_mm        =
 8009a8c:	f8c3 1012 	str.w	r1, [r3, #18]
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8009a90:	2508      	movs	r5, #8
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 8009a92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	pdata->tp_dss_target_lite_mcps               =
 8009a96:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
	pdata->tp_phasecal_timeout_lite_us           =
 8009a9a:	62dc      	str	r4, [r3, #44]	; 0x2c
	pdata->tp_lite_sigma_ref_mm                  =
 8009a9c:	2201      	movs	r2, #1
	pdata->tp_lite_seed_cfg                      =
 8009a9e:	2402      	movs	r4, #2
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8009aa0:	779d      	strb	r5, [r3, #30]
	pdata->tp_lite_long_sigma_thresh_mm        =
 8009aa2:	f8c3 7016 	str.w	r7, [r3, #22]

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8009aa6:	f44f 55fa 	mov.w	r5, #8000	; 0x1f40
	pdata->tp_range_timeout_lite_us              =
 8009aaa:	f24f 6718 	movw	r7, #63000	; 0xf618
	pdata->tp_lite_long_sigma_thresh_mm        =
 8009aae:	f8c3 601a 	str.w	r6, [r3, #26]
	pdata->tp_phasecal_timeout_timed_us          =
 8009ab2:	6319      	str	r1, [r3, #48]	; 0x30
	pdata->tp_range_timeout_timed_us             =
 8009ab4:	f243 26c8 	movw	r6, #13000	; 0x32c8
	pdata->tp_mm_timeout_lite_us                 =
 8009ab8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
	pdata->tp_lite_min_clip                    =
 8009abc:	7418      	strb	r0, [r3, #16]
	pdata->tp_lite_first_order_select            =
 8009abe:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
	pdata->tp_lite_sigma_ref_mm                  =
 8009ac2:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->tp_timed_seed_cfg                     =
 8009ac6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	pdata->tp_lite_seed_cfg                      =
 8009aca:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
	pdata->tp_lite_quantifier                    =
 8009ace:	f883 4023 	strb.w	r4, [r3, #35]	; 0x23
	pdata->tp_range_timeout_lite_us              =
 8009ad2:	641f      	str	r7, [r3, #64]	; 0x40
	pdata->tp_range_timeout_timed_us             =
 8009ad4:	645e      	str	r6, [r3, #68]	; 0x44
	pdata->tp_range_timeout_lpa_us =
 8009ad6:	649d      	str	r5, [r3, #72]	; 0x48
	pdata->tp_cal_repeat_rate                  =
 8009ad8:	81d8      	strh	r0, [r3, #14]
	pdata->tp_mm_timeout_lpa_us =
 8009ada:	63da      	str	r2, [r3, #60]	; 0x3c
	pdata->tp_mm_timeout_lite_us                 =
 8009adc:	6359      	str	r1, [r3, #52]	; 0x34
	pdata->tp_mm_timeout_timed_us                =
 8009ade:	6399      	str	r1, [r3, #56]	; 0x38


	LOG_FUNCTION_END(status);

	return status;
}
 8009ae0:	bcf0      	pop	{r4, r5, r6, r7}
 8009ae2:	4770      	bx	lr
 8009ae4:	0e060a0e 	.word	0x0e060a0e
 8009ae8:	2102060a 	.word	0x2102060a
 8009aec:	01680168 	.word	0x01680168
 8009af0:	00c00168 	.word	0x00c00168

08009af4 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8009af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af8:	9e0a      	ldr	r6, [sp, #40]	; 0x28

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
	pstatic->debug__ctrl                                      = 0x00;
 8009afa:	2400      	movs	r4, #0
	 */
	pstatic->gpio_hv_mux__ctrl  = \
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 8009afc:	f04f 0e02 	mov.w	lr, #2
	pstatic->gpio__fio_hv_status                              = 0x00;
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8009b00:	f04f 0808 	mov.w	r8, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8009b04:	f44f 6720 	mov.w	r7, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 8009b08:	2511      	movs	r5, #17
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8009b0a:	8007      	strh	r7, [r0, #0]
	pstatic->debug__ctrl                                      = 0x00;
 8009b0c:	7084      	strb	r4, [r0, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 8009b0e:	70c4      	strb	r4, [r0, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 8009b10:	7104      	strb	r4, [r0, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 8009b12:	7144      	strb	r4, [r0, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 8009b14:	7184      	strb	r4, [r0, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 8009b16:	71c4      	strb	r4, [r0, #7]
	pstatic->host_if__status                                  = 0x00;
 8009b18:	7204      	strb	r4, [r0, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 8009b1a:	7244      	strb	r4, [r0, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 8009b1c:	7284      	strb	r4, [r0, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 8009b1e:	72c4      	strb	r4, [r0, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 8009b20:	7384      	strb	r4, [r0, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 8009b22:	7444      	strb	r4, [r0, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 8009b24:	f880 e00d 	strb.w	lr, [r0, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 8009b28:	f880 e00f 	strb.w	lr, [r0, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8009b2c:	f880 8010 	strb.w	r8, [r0, #16]
	pstatic->gpio_hv_mux__ctrl  = \
 8009b30:	7305      	strb	r5, [r0, #12]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8009b32:	7fb5      	ldrb	r5, [r6, #30]
 8009b34:	7485      	strb	r5, [r0, #18]
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8009b36:	7ff5      	ldrb	r5, [r6, #31]
 8009b38:	74c5      	strb	r5, [r0, #19]
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8009b3a:	f896 5020 	ldrb.w	r5, [r6, #32]
 8009b3e:	7505      	strb	r5, [r0, #20]
			ptuning_parms->tp_lite_sigma_ref_mm;
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8009b40:	2701      	movs	r7, #1
	pstatic->spare_host_config__static_config_spare_1         = 0x00;

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8009b42:	f04f 0cff 	mov.w	ip, #255	; 0xff
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 8009b46:	7584      	strb	r4, [r0, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 8009b48:	75c4      	strb	r4, [r0, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 8009b4a:	8304      	strh	r4, [r0, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8009b4c:	7547      	strb	r7, [r0, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8009b4e:	f880 c01a 	strb.w	ip, [r0, #26]
	pstatic->algo__range_min_clip                             =
 8009b52:	7c35      	ldrb	r5, [r6, #16]
 8009b54:	76c5      	strb	r5, [r0, #27]
{
 8009b56:	9d09      	ldr	r5, [sp, #36]	; 0x24
	/*
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
 8009b58:	f896 900c 	ldrb.w	r9, [r6, #12]
 8009b5c:	f880 901c 	strb.w	r9, [r0, #28]
			ptuning_parms->tp_consistency_lite_phase_tolerance;
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
	pstatic->sd_config__reset_stages_msb                      = 0x00;
	pstatic->sd_config__reset_stages_lsb                      = 0x00;

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8009b60:	f04f 6932 	mov.w	r9, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 8009b64:	7744      	strb	r4, [r0, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 8009b66:	7784      	strb	r4, [r0, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 8009b68:	77c4      	strb	r4, [r0, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8009b6a:	f8c1 9000 	str.w	r9, [r1]
	 * Set VHV / Phase Cal repeat rate to 1 every
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
 8009b6e:	89f0      	ldrh	r0, [r6, #14]
 8009b70:	8088      	strh	r0, [r1, #4]
			ptuning_parms->tp_cal_repeat_rate;
	pgeneral->global_config__vcsel_width                      = 0x02;
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 8009b72:	200d      	movs	r0, #13
	pgeneral->global_config__vcsel_width                      = 0x02;
 8009b74:	f881 e006 	strb.w	lr, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 8009b78:	71c8      	strb	r0, [r1, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
 8009b7a:	f896 900d 	ldrb.w	r9, [r6, #13]
 8009b7e:	f881 9008 	strb.w	r9, [r1, #8]
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
	pgeneral->system__thresh_rate_low                         = 0x0000;
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8009b82:	4829      	ldr	r0, [pc, #164]	; (8009c28 <VL53L1_preset_mode_standard_ranging+0x134>)
	pgeneral->phasecal_config__override                       = 0x00;
 8009b84:	724c      	strb	r4, [r1, #9]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 8009b86:	f44f 490c 	mov.w	r9, #35840	; 0x8c00

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8009b8a:	f04f 0a1a 	mov.w	sl, #26
	pgeneral->dss_config__roi_mode_control =
 8009b8e:	728f      	strb	r7, [r1, #10]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8009b90:	f8c1 0012 	str.w	r0, [r1, #18]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 8009b94:	818c      	strh	r4, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 8009b96:	81cc      	strh	r4, [r1, #14]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 8009b98:	f8a1 9010 	strh.w	r9, [r1, #16]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8009b9c:	f04f 0b20 	mov.w	fp, #32
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8009ba0:	f882 a001 	strb.w	sl, [r2, #1]
	ptiming->range_config__vcsel_period_a                     = 0x0B;
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 8009ba4:	2109      	movs	r1, #9
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 8009ba6:	f04f 0a0b 	mov.w	sl, #11
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 8009baa:	f04f 09cc 	mov.w	r9, #204	; 0xcc
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8009bae:	20f5      	movs	r0, #245	; 0xf5
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 8009bb0:	7014      	strb	r4, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 8009bb2:	7094      	strb	r4, [r2, #2]
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8009bb4:	7117      	strb	r7, [r2, #4]
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8009bb6:	71d7      	strb	r7, [r2, #7]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8009bb8:	f882 b003 	strb.w	fp, [r2, #3]
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 8009bbc:	f882 a006 	strb.w	sl, [r2, #6]
	ptiming->range_config__vcsel_period_b                     = 0x09;
 8009bc0:	7251      	strb	r1, [r2, #9]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 8009bc2:	f882 9005 	strb.w	r9, [r2, #5]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8009bc6:	7210      	strb	r0, [r2, #8]
	 * Sigma thresh register - format 14.2
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
 8009bc8:	8ab0      	ldrh	r0, [r6, #20]
	/*
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8009bca:	f8b6 901a 	ldrh.w	r9, [r6, #26]
	ptiming->range_config__sigma_thresh                       =
 8009bce:	8150      	strh	r0, [r2, #10]
	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
	ptiming->range_config__valid_phase_high                   = 0x78;
 8009bd0:	2078      	movs	r0, #120	; 0x78
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8009bd2:	f8a2 900c 	strh.w	r9, [r2, #12]
	ptiming->range_config__valid_phase_high                   = 0x78;
 8009bd6:	73d0      	strb	r0, [r2, #15]
	ptiming->range_config__valid_phase_low                    = 0x08;
 8009bd8:	f882 800e 	strb.w	r8, [r2, #14]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 8009bdc:	6114      	str	r4, [r2, #16]
	ptiming->system__fractional_enable                        = 0x00;
 8009bde:	7514      	strb	r4, [r2, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 8009be0:	701f      	strb	r7, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 8009be2:	f8c3 4002 	str.w	r4, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 8009be6:	719c      	strb	r4, [r3, #6]
	pdynamic->system__seed_config =
 8009be8:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
 8009bec:	71da      	strb	r2, [r3, #7]
			ptuning_parms->tp_lite_seed_cfg;

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 8009bee:	f883 a008 	strb.w	sl, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 8009bf2:	7259      	strb	r1, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
 8009bf4:	79f2      	ldrb	r2, [r6, #7]
 8009bf6:	729a      	strb	r2, [r3, #10]
			ptuning_parms->tp_init_phase_rtn_lite_med;
	pdynamic->sd_config__initial_phase_sd1                     =
 8009bf8:	7ab2      	ldrb	r2, [r6, #10]
 8009bfa:	72da      	strb	r2, [r3, #11]
			ptuning_parms->tp_init_phase_ref_lite_med;;

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 8009bfc:	731f      	strb	r7, [r3, #12]
	 *        3  -> 4095
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
 8009bfe:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
 8009c02:	735a      	strb	r2, [r3, #13]
			ptuning_parms->tp_lite_first_order_select;
	pdynamic->sd_config__quantifier         =
 8009c04:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
 8009c08:	7399      	strb	r1, [r3, #14]
	pdynamic->system__grouped_parameter_hold                   = 0x02;

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 8009c0a:	4a08      	ldr	r2, [pc, #32]	; (8009c2c <VL53L1_preset_mode_standard_ranging+0x138>)
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8009c0c:	f883 c010 	strb.w	ip, [r3, #16]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8009c10:	26c7      	movs	r6, #199	; 0xc7
	pdynamic->system__sequence_config                          = \
 8009c12:	21db      	movs	r1, #219	; 0xdb
	pdynamic->system__grouped_parameter_hold                   = 0x02;
 8009c14:	f883 e012 	strb.w	lr, [r3, #18]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8009c18:	73de      	strb	r6, [r3, #15]
	pdynamic->system__sequence_config                          = \
 8009c1a:	7459      	strb	r1, [r3, #17]
	psystem->system__stream_count_ctrl                         = 0x00;
 8009c1c:	f8c5 2001 	str.w	r2, [r5, #1]
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
}
 8009c20:	4620      	mov	r0, r4
 8009c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c26:	bf00      	nop
 8009c28:	01ff3800 	.word	0x01ff3800
 8009c2c:	21010100 	.word	0x21010100

08009c30 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8009c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c34:	9d09      	ldr	r5, [sp, #36]	; 0x24
	pstatic->debug__ctrl                                      = 0x00;
 8009c36:	2400      	movs	r4, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 8009c38:	f04f 0e02 	mov.w	lr, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8009c3c:	f04f 0c08 	mov.w	ip, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8009c40:	f44f 6720 	mov.w	r7, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 8009c44:	2611      	movs	r6, #17
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8009c46:	8007      	strh	r7, [r0, #0]
	pstatic->debug__ctrl                                      = 0x00;
 8009c48:	7084      	strb	r4, [r0, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 8009c4a:	70c4      	strb	r4, [r0, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 8009c4c:	7104      	strb	r4, [r0, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 8009c4e:	7144      	strb	r4, [r0, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 8009c50:	7184      	strb	r4, [r0, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 8009c52:	71c4      	strb	r4, [r0, #7]
	pstatic->host_if__status                                  = 0x00;
 8009c54:	7204      	strb	r4, [r0, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 8009c56:	7244      	strb	r4, [r0, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 8009c58:	7284      	strb	r4, [r0, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 8009c5a:	72c4      	strb	r4, [r0, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 8009c5c:	7384      	strb	r4, [r0, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 8009c5e:	7444      	strb	r4, [r0, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 8009c60:	f880 e00d 	strb.w	lr, [r0, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 8009c64:	f880 e00f 	strb.w	lr, [r0, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8009c68:	f880 c010 	strb.w	ip, [r0, #16]
	pstatic->gpio_hv_mux__ctrl  = \
 8009c6c:	7306      	strb	r6, [r0, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8009c6e:	7fae      	ldrb	r6, [r5, #30]
 8009c70:	7486      	strb	r6, [r0, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8009c72:	7fee      	ldrb	r6, [r5, #31]
 8009c74:	74c6      	strb	r6, [r0, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8009c76:	f895 6020 	ldrb.w	r6, [r5, #32]
 8009c7a:	7506      	strb	r6, [r0, #20]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8009c7c:	2701      	movs	r7, #1
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8009c7e:	f04f 08ff 	mov.w	r8, #255	; 0xff
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 8009c82:	7584      	strb	r4, [r0, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 8009c84:	75c4      	strb	r4, [r0, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 8009c86:	8304      	strh	r4, [r0, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8009c88:	7547      	strb	r7, [r0, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8009c8a:	f880 801a 	strb.w	r8, [r0, #26]
	pstatic->algo__range_min_clip                             =
 8009c8e:	7c2e      	ldrb	r6, [r5, #16]
 8009c90:	76c6      	strb	r6, [r0, #27]
{
 8009c92:	9e08      	ldr	r6, [sp, #32]
	pstatic->algo__consistency_check__tolerance               =
 8009c94:	f895 900c 	ldrb.w	r9, [r5, #12]
 8009c98:	f880 901c 	strb.w	r9, [r0, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8009c9c:	f04f 6932 	mov.w	r9, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 8009ca0:	7744      	strb	r4, [r0, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 8009ca2:	7784      	strb	r4, [r0, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 8009ca4:	77c4      	strb	r4, [r0, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8009ca6:	f8c1 9000 	str.w	r9, [r1]
	pgeneral->cal_config__repeat_rate                         =
 8009caa:	89e8      	ldrh	r0, [r5, #14]
 8009cac:	8088      	strh	r0, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 8009cae:	200d      	movs	r0, #13
	pgeneral->global_config__vcsel_width                      = 0x02;
 8009cb0:	f881 e006 	strb.w	lr, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 8009cb4:	71c8      	strb	r0, [r1, #7]
	pgeneral->phasecal_config__target                         =
 8009cb6:	f895 900d 	ldrb.w	r9, [r5, #13]
 8009cba:	f881 9008 	strb.w	r9, [r1, #8]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8009cbe:	4827      	ldr	r0, [pc, #156]	; (8009d5c <VL53L1_preset_mode_standard_ranging_short_range+0x12c>)
	pgeneral->phasecal_config__override                       = 0x00;
 8009cc0:	724c      	strb	r4, [r1, #9]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 8009cc2:	f44f 490c 	mov.w	r9, #35840	; 0x8c00
	pgeneral->dss_config__roi_mode_control =
 8009cc6:	728f      	strb	r7, [r1, #10]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 8009cc8:	818c      	strh	r4, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 8009cca:	81cc      	strh	r4, [r1, #14]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 8009ccc:	f8a1 9010 	strh.w	r9, [r1, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8009cd0:	f8c1 0012 	str.w	r0, [r1, #18]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8009cd4:	f04f 0a1a 	mov.w	sl, #26
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8009cd8:	f04f 0920 	mov.w	r9, #32
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 8009cdc:	20cc      	movs	r0, #204	; 0xcc
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8009cde:	21f5      	movs	r1, #245	; 0xf5
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 8009ce0:	7014      	strb	r4, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 8009ce2:	7094      	strb	r4, [r2, #2]
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8009ce4:	7117      	strb	r7, [r2, #4]
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8009ce6:	71d7      	strb	r7, [r2, #7]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 8009ce8:	6114      	str	r4, [r2, #16]
	ptiming->system__fractional_enable                        = 0x00;
 8009cea:	7514      	strb	r4, [r2, #20]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8009cec:	f882 a001 	strb.w	sl, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8009cf0:	f882 9003 	strb.w	r9, [r2, #3]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 8009cf4:	7150      	strb	r0, [r2, #5]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8009cf6:	7211      	strb	r1, [r2, #8]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 8009cf8:	701f      	strb	r7, [r3, #0]
	pdynamic->system__thresh_high                              = 0x0000;
 8009cfa:	f8c3 4002 	str.w	r4, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 8009cfe:	719c      	strb	r4, [r3, #6]
	pdynamic->system__seed_config =
 8009d00:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 8009d04:	71d9      	strb	r1, [r3, #7]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 8009d06:	731f      	strb	r7, [r3, #12]
	pdynamic->sd_config__first_order_select =
 8009d08:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
 8009d0c:	7359      	strb	r1, [r3, #13]
	pdynamic->sd_config__quantifier         =
 8009d0e:	f895 1023 	ldrb.w	r1, [r5, #35]	; 0x23
 8009d12:	7399      	strb	r1, [r3, #14]
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 8009d14:	2007      	movs	r0, #7
		ptiming->range_config__vcsel_period_b                = 0x05;
 8009d16:	2105      	movs	r1, #5
	psystem->system__stream_count_ctrl                         = 0x00;
 8009d18:	4f11      	ldr	r7, [pc, #68]	; (8009d60 <VL53L1_preset_mode_standard_ranging_short_range+0x130>)
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8009d1a:	f883 8010 	strb.w	r8, [r3, #16]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8009d1e:	f04f 0ac7 	mov.w	sl, #199	; 0xc7
	pdynamic->system__sequence_config                          = \
 8009d22:	f04f 09db 	mov.w	r9, #219	; 0xdb
	pdynamic->system__grouped_parameter_hold                   = 0x02;
 8009d26:	f883 e012 	strb.w	lr, [r3, #18]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8009d2a:	f883 a00f 	strb.w	sl, [r3, #15]
	pdynamic->system__sequence_config                          = \
 8009d2e:	f883 9011 	strb.w	r9, [r3, #17]
	psystem->system__stream_count_ctrl                         = 0x00;
 8009d32:	f8c6 7001 	str.w	r7, [r6, #1]
		ptiming->range_config__vcsel_period_a                = 0x07;
 8009d36:	7190      	strb	r0, [r2, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 8009d38:	7251      	strb	r1, [r2, #9]
		ptiming->range_config__sigma_thresh                  =
 8009d3a:	8aee      	ldrh	r6, [r5, #22]
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8009d3c:	8baf      	ldrh	r7, [r5, #28]
		ptiming->range_config__sigma_thresh                  =
 8009d3e:	8156      	strh	r6, [r2, #10]
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
		ptiming->range_config__valid_phase_low               = 0x08;
		ptiming->range_config__valid_phase_high              = 0x38;
 8009d40:	2638      	movs	r6, #56	; 0x38
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8009d42:	8197      	strh	r7, [r2, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 8009d44:	f882 c00e 	strb.w	ip, [r2, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 8009d48:	73d6      	strb	r6, [r2, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 8009d4a:	7218      	strb	r0, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 8009d4c:	7259      	strb	r1, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
 8009d4e:	7a2a      	ldrb	r2, [r5, #8]
 8009d50:	729a      	strb	r2, [r3, #10]
				ptuning_parms->tp_init_phase_rtn_lite_short;
		pdynamic->sd_config__initial_phase_sd1               =
 8009d52:	7aea      	ldrb	r2, [r5, #11]
 8009d54:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8009d56:	4620      	mov	r0, r4
 8009d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d5c:	01ff3800 	.word	0x01ff3800
 8009d60:	21010100 	.word	0x21010100

08009d64 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8009d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d68:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pstatic->debug__ctrl                                      = 0x00;
 8009d6a:	2400      	movs	r4, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 8009d6c:	f04f 0e02 	mov.w	lr, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8009d70:	f04f 0c08 	mov.w	ip, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8009d74:	f44f 6720 	mov.w	r7, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 8009d78:	2611      	movs	r6, #17
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8009d7a:	8007      	strh	r7, [r0, #0]
	pstatic->debug__ctrl                                      = 0x00;
 8009d7c:	7084      	strb	r4, [r0, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 8009d7e:	70c4      	strb	r4, [r0, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 8009d80:	7104      	strb	r4, [r0, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 8009d82:	7144      	strb	r4, [r0, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 8009d84:	7184      	strb	r4, [r0, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 8009d86:	71c4      	strb	r4, [r0, #7]
	pstatic->host_if__status                                  = 0x00;
 8009d88:	7204      	strb	r4, [r0, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 8009d8a:	7244      	strb	r4, [r0, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 8009d8c:	7284      	strb	r4, [r0, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 8009d8e:	72c4      	strb	r4, [r0, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 8009d90:	7384      	strb	r4, [r0, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 8009d92:	7444      	strb	r4, [r0, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 8009d94:	f880 e00d 	strb.w	lr, [r0, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 8009d98:	f880 e00f 	strb.w	lr, [r0, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8009d9c:	f880 c010 	strb.w	ip, [r0, #16]
	pstatic->gpio_hv_mux__ctrl  = \
 8009da0:	7306      	strb	r6, [r0, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8009da2:	7fae      	ldrb	r6, [r5, #30]
 8009da4:	7486      	strb	r6, [r0, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8009da6:	7fee      	ldrb	r6, [r5, #31]
 8009da8:	74c6      	strb	r6, [r0, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8009daa:	f895 6020 	ldrb.w	r6, [r5, #32]
 8009dae:	7506      	strb	r6, [r0, #20]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8009db0:	2701      	movs	r7, #1
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8009db2:	f04f 08ff 	mov.w	r8, #255	; 0xff
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 8009db6:	7584      	strb	r4, [r0, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 8009db8:	75c4      	strb	r4, [r0, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 8009dba:	8304      	strh	r4, [r0, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8009dbc:	7547      	strb	r7, [r0, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8009dbe:	f880 801a 	strb.w	r8, [r0, #26]
	pstatic->algo__range_min_clip                             =
 8009dc2:	7c2e      	ldrb	r6, [r5, #16]
 8009dc4:	76c6      	strb	r6, [r0, #27]
	pstatic->algo__consistency_check__tolerance               =
 8009dc6:	f895 900c 	ldrb.w	r9, [r5, #12]
 8009dca:	f880 901c 	strb.w	r9, [r0, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8009dce:	f04f 6932 	mov.w	r9, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 8009dd2:	7744      	strb	r4, [r0, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 8009dd4:	7784      	strb	r4, [r0, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 8009dd6:	77c4      	strb	r4, [r0, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8009dd8:	f8c1 9000 	str.w	r9, [r1]
	pgeneral->cal_config__repeat_rate                         =
 8009ddc:	89e8      	ldrh	r0, [r5, #14]
 8009dde:	8088      	strh	r0, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 8009de0:	200d      	movs	r0, #13
	pgeneral->global_config__vcsel_width                      = 0x02;
 8009de2:	f881 e006 	strb.w	lr, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 8009de6:	71c8      	strb	r0, [r1, #7]
	pgeneral->phasecal_config__target                         =
 8009de8:	f895 a00d 	ldrb.w	sl, [r5, #13]
 8009dec:	f881 a008 	strb.w	sl, [r1, #8]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8009df0:	4e28      	ldr	r6, [pc, #160]	; (8009e94 <VL53L1_preset_mode_standard_ranging_long_range+0x130>)
	pgeneral->phasecal_config__override                       = 0x00;
 8009df2:	724c      	strb	r4, [r1, #9]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 8009df4:	f44f 4a0c 	mov.w	sl, #35840	; 0x8c00
	pgeneral->dss_config__roi_mode_control =
 8009df8:	728f      	strb	r7, [r1, #10]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 8009dfa:	818c      	strh	r4, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 8009dfc:	81cc      	strh	r4, [r1, #14]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 8009dfe:	f8a1 a010 	strh.w	sl, [r1, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8009e02:	f8c1 6012 	str.w	r6, [r1, #18]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8009e06:	f04f 0b1a 	mov.w	fp, #26
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8009e0a:	f04f 0a20 	mov.w	sl, #32
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 8009e0e:	f04f 09cc 	mov.w	r9, #204	; 0xcc
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8009e12:	21f5      	movs	r1, #245	; 0xf5
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 8009e14:	7014      	strb	r4, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 8009e16:	7094      	strb	r4, [r2, #2]
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8009e18:	7117      	strb	r7, [r2, #4]
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8009e1a:	71d7      	strb	r7, [r2, #7]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 8009e1c:	6114      	str	r4, [r2, #16]
	ptiming->system__fractional_enable                        = 0x00;
 8009e1e:	7514      	strb	r4, [r2, #20]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8009e20:	f882 b001 	strb.w	fp, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8009e24:	f882 a003 	strb.w	sl, [r2, #3]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 8009e28:	f882 9005 	strb.w	r9, [r2, #5]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8009e2c:	7211      	strb	r1, [r2, #8]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 8009e2e:	701f      	strb	r7, [r3, #0]
	pdynamic->system__thresh_high                              = 0x0000;
 8009e30:	f8c3 4002 	str.w	r4, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 8009e34:	719c      	strb	r4, [r3, #6]
	pdynamic->system__seed_config =
 8009e36:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 8009e3a:	71d9      	strb	r1, [r3, #7]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 8009e3c:	731f      	strb	r7, [r3, #12]
	pdynamic->sd_config__first_order_select =
 8009e3e:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
 8009e42:	7359      	strb	r1, [r3, #13]
	pdynamic->sd_config__quantifier         =
 8009e44:	f895 1023 	ldrb.w	r1, [r5, #35]	; 0x23
	psystem->system__stream_count_ctrl                         = 0x00;
 8009e48:	9e09      	ldr	r6, [sp, #36]	; 0x24
	pdynamic->sd_config__quantifier         =
 8009e4a:	7399      	strb	r1, [r3, #14]
	psystem->system__stream_count_ctrl                         = 0x00;
 8009e4c:	4f12      	ldr	r7, [pc, #72]	; (8009e98 <VL53L1_preset_mode_standard_ranging_long_range+0x134>)
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8009e4e:	f883 8010 	strb.w	r8, [r3, #16]
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 8009e52:	210f      	movs	r1, #15
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8009e54:	f04f 0ac7 	mov.w	sl, #199	; 0xc7
	pdynamic->system__sequence_config                          = \
 8009e58:	f04f 09db 	mov.w	r9, #219	; 0xdb
	pdynamic->system__grouped_parameter_hold                   = 0x02;
 8009e5c:	f883 e012 	strb.w	lr, [r3, #18]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8009e60:	f883 a00f 	strb.w	sl, [r3, #15]
	pdynamic->system__sequence_config                          = \
 8009e64:	f883 9011 	strb.w	r9, [r3, #17]
	psystem->system__stream_count_ctrl                         = 0x00;
 8009e68:	f8c6 7001 	str.w	r7, [r6, #1]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 8009e6c:	7250      	strb	r0, [r2, #9]
		ptiming->range_config__vcsel_period_a                = 0x0F;
 8009e6e:	7191      	strb	r1, [r2, #6]
		ptiming->range_config__sigma_thresh                  =
 8009e70:	8a6e      	ldrh	r6, [r5, #18]
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8009e72:	8b2f      	ldrh	r7, [r5, #24]
		ptiming->range_config__sigma_thresh                  =
 8009e74:	8156      	strh	r6, [r2, #10]
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
		ptiming->range_config__valid_phase_low               = 0x08;
		ptiming->range_config__valid_phase_high              = 0xB8;
 8009e76:	26b8      	movs	r6, #184	; 0xb8
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8009e78:	8197      	strh	r7, [r2, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 8009e7a:	f882 c00e 	strb.w	ip, [r2, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 8009e7e:	73d6      	strb	r6, [r2, #15]
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 8009e80:	7258      	strb	r0, [r3, #9]
		pdynamic->sd_config__woi_sd0                         = 0x0F;
 8009e82:	7219      	strb	r1, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 8009e84:	79aa      	ldrb	r2, [r5, #6]
 8009e86:	729a      	strb	r2, [r3, #10]
				ptuning_parms->tp_init_phase_rtn_lite_long;
		pdynamic->sd_config__initial_phase_sd1               =
 8009e88:	7a6a      	ldrb	r2, [r5, #9]
 8009e8a:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e92:	bf00      	nop
 8009e94:	01ff3800 	.word	0x01ff3800
 8009e98:	21010100 	.word	0x21010100

08009e9c <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8009e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pstatic->debug__ctrl                                      = 0x00;
 8009ea2:	2400      	movs	r4, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 8009ea4:	2702      	movs	r7, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8009ea6:	f04f 0808 	mov.w	r8, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8009eaa:	f44f 6e20 	mov.w	lr, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 8009eae:	2611      	movs	r6, #17
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8009eb0:	f8a0 e000 	strh.w	lr, [r0]
	pstatic->debug__ctrl                                      = 0x00;
 8009eb4:	7084      	strb	r4, [r0, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 8009eb6:	70c4      	strb	r4, [r0, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 8009eb8:	7104      	strb	r4, [r0, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 8009eba:	7144      	strb	r4, [r0, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 8009ebc:	7184      	strb	r4, [r0, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 8009ebe:	71c4      	strb	r4, [r0, #7]
	pstatic->host_if__status                                  = 0x00;
 8009ec0:	7204      	strb	r4, [r0, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 8009ec2:	7244      	strb	r4, [r0, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 8009ec4:	7284      	strb	r4, [r0, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 8009ec6:	72c4      	strb	r4, [r0, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 8009ec8:	7384      	strb	r4, [r0, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 8009eca:	7444      	strb	r4, [r0, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 8009ecc:	7347      	strb	r7, [r0, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 8009ece:	73c7      	strb	r7, [r0, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8009ed0:	f880 8010 	strb.w	r8, [r0, #16]
	pstatic->gpio_hv_mux__ctrl  = \
 8009ed4:	7306      	strb	r6, [r0, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8009ed6:	7fae      	ldrb	r6, [r5, #30]
 8009ed8:	7486      	strb	r6, [r0, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8009eda:	7fee      	ldrb	r6, [r5, #31]
 8009edc:	74c6      	strb	r6, [r0, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8009ede:	f895 6020 	ldrb.w	r6, [r5, #32]
 8009ee2:	7506      	strb	r6, [r0, #20]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8009ee4:	f04f 0e01 	mov.w	lr, #1
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8009ee8:	f04f 0cff 	mov.w	ip, #255	; 0xff
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 8009eec:	7584      	strb	r4, [r0, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 8009eee:	75c4      	strb	r4, [r0, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 8009ef0:	8304      	strh	r4, [r0, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8009ef2:	f880 e015 	strb.w	lr, [r0, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8009ef6:	f880 c01a 	strb.w	ip, [r0, #26]
	pstatic->algo__range_min_clip                             =
 8009efa:	7c2e      	ldrb	r6, [r5, #16]
 8009efc:	76c6      	strb	r6, [r0, #27]
	pstatic->algo__consistency_check__tolerance               =
 8009efe:	f895 900c 	ldrb.w	r9, [r5, #12]
 8009f02:	f880 901c 	strb.w	r9, [r0, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8009f06:	f04f 6932 	mov.w	r9, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 8009f0a:	7744      	strb	r4, [r0, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 8009f0c:	7784      	strb	r4, [r0, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 8009f0e:	77c4      	strb	r4, [r0, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8009f10:	f8c1 9000 	str.w	r9, [r1]
	pgeneral->cal_config__repeat_rate                         =
 8009f14:	89e8      	ldrh	r0, [r5, #14]
 8009f16:	8088      	strh	r0, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 8009f18:	200d      	movs	r0, #13
	pgeneral->global_config__vcsel_width                      = 0x02;
 8009f1a:	718f      	strb	r7, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 8009f1c:	71c8      	strb	r0, [r1, #7]
	pgeneral->phasecal_config__target                         =
 8009f1e:	7b68      	ldrb	r0, [r5, #13]
 8009f20:	7208      	strb	r0, [r1, #8]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8009f22:	4e2e      	ldr	r6, [pc, #184]	; (8009fdc <VL53L1_preset_mode_standard_ranging_mm1_cal+0x140>)
	pgeneral->phasecal_config__override                       = 0x00;
 8009f24:	724c      	strb	r4, [r1, #9]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 8009f26:	f44f 4b0c 	mov.w	fp, #35840	; 0x8c00
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8009f2a:	f04f 091a 	mov.w	r9, #26
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8009f2e:	2020      	movs	r0, #32
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8009f30:	f8c1 6012 	str.w	r6, [r1, #18]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 8009f34:	818c      	strh	r4, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 8009f36:	81cc      	strh	r4, [r1, #14]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 8009f38:	f8a1 b010 	strh.w	fp, [r1, #16]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8009f3c:	f04f 0af5 	mov.w	sl, #245	; 0xf5
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8009f40:	f882 9001 	strb.w	r9, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8009f44:	70d0      	strb	r0, [r2, #3]
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 8009f46:	f04f 090b 	mov.w	r9, #11
	ptiming->range_config__vcsel_period_b                     = 0x09;
 8009f4a:	2009      	movs	r0, #9
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 8009f4c:	f04f 0bcc 	mov.w	fp, #204	; 0xcc
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 8009f50:	7014      	strb	r4, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 8009f52:	7094      	strb	r4, [r2, #2]
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8009f54:	f882 e004 	strb.w	lr, [r2, #4]
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8009f58:	f882 e007 	strb.w	lr, [r2, #7]
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 8009f5c:	f882 9006 	strb.w	r9, [r2, #6]
	ptiming->range_config__vcsel_period_b                     = 0x09;
 8009f60:	7250      	strb	r0, [r2, #9]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 8009f62:	f882 b005 	strb.w	fp, [r2, #5]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8009f66:	f882 a008 	strb.w	sl, [r2, #8]
	ptiming->range_config__sigma_thresh                       =
 8009f6a:	f8b5 a014 	ldrh.w	sl, [r5, #20]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8009f6e:	f8b5 b01a 	ldrh.w	fp, [r5, #26]
	ptiming->range_config__sigma_thresh                       =
 8009f72:	f8a2 a00a 	strh.w	sl, [r2, #10]
	ptiming->range_config__valid_phase_high                   = 0x78;
 8009f76:	f04f 0a78 	mov.w	sl, #120	; 0x78
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8009f7a:	f8a2 b00c 	strh.w	fp, [r2, #12]
	ptiming->range_config__valid_phase_low                    = 0x08;
 8009f7e:	f882 800e 	strb.w	r8, [r2, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 8009f82:	f882 a00f 	strb.w	sl, [r2, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 8009f86:	6114      	str	r4, [r2, #16]
	ptiming->system__fractional_enable                        = 0x00;
 8009f88:	7514      	strb	r4, [r2, #20]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 8009f8a:	f883 e000 	strb.w	lr, [r3]
	pdynamic->system__thresh_high                              = 0x0000;
 8009f8e:	f8c3 4002 	str.w	r4, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 8009f92:	719c      	strb	r4, [r3, #6]
	pdynamic->system__seed_config =
 8009f94:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
 8009f98:	71da      	strb	r2, [r3, #7]
	pdynamic->sd_config__woi_sd1                               = 0x09;
 8009f9a:	7258      	strb	r0, [r3, #9]
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 8009f9c:	f883 9008 	strb.w	r9, [r3, #8]
	pdynamic->sd_config__initial_phase_sd0                     =
 8009fa0:	79ea      	ldrb	r2, [r5, #7]
 8009fa2:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8009fa4:	7aaa      	ldrb	r2, [r5, #10]
 8009fa6:	72da      	strb	r2, [r3, #11]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 8009fa8:	f883 e00c 	strb.w	lr, [r3, #12]
	pdynamic->sd_config__first_order_select =
 8009fac:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
 8009fb0:	735a      	strb	r2, [r3, #13]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8009fb2:	4620      	mov	r0, r4
	psystem->system__stream_count_ctrl                         = 0x00;
 8009fb4:	9c09      	ldr	r4, [sp, #36]	; 0x24
	pdynamic->sd_config__quantifier         =
 8009fb6:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
	psystem->system__stream_count_ctrl                         = 0x00;
 8009fba:	4d09      	ldr	r5, [pc, #36]	; (8009fe0 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x144>)
	pdynamic->sd_config__quantifier         =
 8009fbc:	739a      	strb	r2, [r3, #14]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8009fbe:	f04f 0ec7 	mov.w	lr, #199	; 0xc7
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8009fc2:	f883 c010 	strb.w	ip, [r3, #16]
	pdynamic->system__grouped_parameter_hold                   = 0x02;
 8009fc6:	749f      	strb	r7, [r3, #18]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8009fc8:	f883 e00f 	strb.w	lr, [r3, #15]
		pdynamic->system__sequence_config  = \
 8009fcc:	223b      	movs	r2, #59	; 0x3b
	psystem->system__stream_count_ctrl                         = 0x00;
 8009fce:	f8c4 5001 	str.w	r5, [r4, #1]
		pgeneral->dss_config__roi_mode_control =
 8009fd2:	728f      	strb	r7, [r1, #10]
		pdynamic->system__sequence_config  = \
 8009fd4:	745a      	strb	r2, [r3, #17]
}
 8009fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fda:	bf00      	nop
 8009fdc:	01ff3800 	.word	0x01ff3800
 8009fe0:	21010100 	.word	0x21010100

08009fe4 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8009fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pstatic->debug__ctrl                                      = 0x00;
 8009fea:	2400      	movs	r4, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 8009fec:	2702      	movs	r7, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8009fee:	f04f 0808 	mov.w	r8, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8009ff2:	f44f 6e20 	mov.w	lr, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 8009ff6:	2611      	movs	r6, #17
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8009ff8:	f8a0 e000 	strh.w	lr, [r0]
	pstatic->debug__ctrl                                      = 0x00;
 8009ffc:	7084      	strb	r4, [r0, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 8009ffe:	70c4      	strb	r4, [r0, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800a000:	7104      	strb	r4, [r0, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800a002:	7144      	strb	r4, [r0, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800a004:	7184      	strb	r4, [r0, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800a006:	71c4      	strb	r4, [r0, #7]
	pstatic->host_if__status                                  = 0x00;
 800a008:	7204      	strb	r4, [r0, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800a00a:	7244      	strb	r4, [r0, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800a00c:	7284      	strb	r4, [r0, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800a00e:	72c4      	strb	r4, [r0, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800a010:	7384      	strb	r4, [r0, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800a012:	7444      	strb	r4, [r0, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a014:	7347      	strb	r7, [r0, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800a016:	73c7      	strb	r7, [r0, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a018:	f880 8010 	strb.w	r8, [r0, #16]
	pstatic->gpio_hv_mux__ctrl  = \
 800a01c:	7306      	strb	r6, [r0, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800a01e:	7fae      	ldrb	r6, [r5, #30]
 800a020:	7486      	strb	r6, [r0, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800a022:	7fee      	ldrb	r6, [r5, #31]
 800a024:	74c6      	strb	r6, [r0, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800a026:	f895 6020 	ldrb.w	r6, [r5, #32]
 800a02a:	7506      	strb	r6, [r0, #20]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a02c:	f04f 0e01 	mov.w	lr, #1
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a030:	f04f 0cff 	mov.w	ip, #255	; 0xff
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800a034:	7584      	strb	r4, [r0, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800a036:	75c4      	strb	r4, [r0, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800a038:	8304      	strh	r4, [r0, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a03a:	f880 e015 	strb.w	lr, [r0, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a03e:	f880 c01a 	strb.w	ip, [r0, #26]
	pstatic->algo__range_min_clip                             =
 800a042:	7c2e      	ldrb	r6, [r5, #16]
 800a044:	76c6      	strb	r6, [r0, #27]
	pstatic->algo__consistency_check__tolerance               =
 800a046:	f895 900c 	ldrb.w	r9, [r5, #12]
 800a04a:	f880 901c 	strb.w	r9, [r0, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a04e:	f04f 6932 	mov.w	r9, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800a052:	7744      	strb	r4, [r0, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800a054:	7784      	strb	r4, [r0, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800a056:	77c4      	strb	r4, [r0, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a058:	f8c1 9000 	str.w	r9, [r1]
	pgeneral->cal_config__repeat_rate                         =
 800a05c:	89e8      	ldrh	r0, [r5, #14]
 800a05e:	8088      	strh	r0, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a060:	200d      	movs	r0, #13
	pgeneral->global_config__vcsel_width                      = 0x02;
 800a062:	718f      	strb	r7, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a064:	71c8      	strb	r0, [r1, #7]
	pgeneral->phasecal_config__target                         =
 800a066:	7b68      	ldrb	r0, [r5, #13]
 800a068:	7208      	strb	r0, [r1, #8]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a06a:	4e2e      	ldr	r6, [pc, #184]	; (800a124 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x140>)
	pgeneral->phasecal_config__override                       = 0x00;
 800a06c:	724c      	strb	r4, [r1, #9]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a06e:	f44f 4b0c 	mov.w	fp, #35840	; 0x8c00
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a072:	f04f 091a 	mov.w	r9, #26
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a076:	2020      	movs	r0, #32
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a078:	f8c1 6012 	str.w	r6, [r1, #18]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800a07c:	818c      	strh	r4, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800a07e:	81cc      	strh	r4, [r1, #14]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a080:	f8a1 b010 	strh.w	fp, [r1, #16]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800a084:	f04f 0af5 	mov.w	sl, #245	; 0xf5
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a088:	f882 9001 	strb.w	r9, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a08c:	70d0      	strb	r0, [r2, #3]
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800a08e:	f04f 090b 	mov.w	r9, #11
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800a092:	2009      	movs	r0, #9
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800a094:	f04f 0bcc 	mov.w	fp, #204	; 0xcc
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800a098:	7014      	strb	r4, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800a09a:	7094      	strb	r4, [r2, #2]
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800a09c:	f882 e004 	strb.w	lr, [r2, #4]
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800a0a0:	f882 e007 	strb.w	lr, [r2, #7]
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800a0a4:	f882 9006 	strb.w	r9, [r2, #6]
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800a0a8:	7250      	strb	r0, [r2, #9]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800a0aa:	f882 b005 	strb.w	fp, [r2, #5]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800a0ae:	f882 a008 	strb.w	sl, [r2, #8]
	ptiming->range_config__sigma_thresh                       =
 800a0b2:	f8b5 a014 	ldrh.w	sl, [r5, #20]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800a0b6:	f8b5 b01a 	ldrh.w	fp, [r5, #26]
	ptiming->range_config__sigma_thresh                       =
 800a0ba:	f8a2 a00a 	strh.w	sl, [r2, #10]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800a0be:	f04f 0a78 	mov.w	sl, #120	; 0x78
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800a0c2:	f8a2 b00c 	strh.w	fp, [r2, #12]
	ptiming->range_config__valid_phase_low                    = 0x08;
 800a0c6:	f882 800e 	strb.w	r8, [r2, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800a0ca:	f882 a00f 	strb.w	sl, [r2, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800a0ce:	6114      	str	r4, [r2, #16]
	ptiming->system__fractional_enable                        = 0x00;
 800a0d0:	7514      	strb	r4, [r2, #20]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800a0d2:	f883 e000 	strb.w	lr, [r3]
	pdynamic->system__thresh_high                              = 0x0000;
 800a0d6:	f8c3 4002 	str.w	r4, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800a0da:	719c      	strb	r4, [r3, #6]
	pdynamic->system__seed_config =
 800a0dc:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
 800a0e0:	71da      	strb	r2, [r3, #7]
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800a0e2:	7258      	strb	r0, [r3, #9]
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800a0e4:	f883 9008 	strb.w	r9, [r3, #8]
	pdynamic->sd_config__initial_phase_sd0                     =
 800a0e8:	79ea      	ldrb	r2, [r5, #7]
 800a0ea:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800a0ec:	7aaa      	ldrb	r2, [r5, #10]
 800a0ee:	72da      	strb	r2, [r3, #11]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800a0f0:	f883 e00c 	strb.w	lr, [r3, #12]
	pdynamic->sd_config__first_order_select =
 800a0f4:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
 800a0f8:	735a      	strb	r2, [r3, #13]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800a0fa:	4620      	mov	r0, r4
	psystem->system__stream_count_ctrl                         = 0x00;
 800a0fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
	pdynamic->sd_config__quantifier         =
 800a0fe:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
	psystem->system__stream_count_ctrl                         = 0x00;
 800a102:	4d09      	ldr	r5, [pc, #36]	; (800a128 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x144>)
	pdynamic->sd_config__quantifier         =
 800a104:	739a      	strb	r2, [r3, #14]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a106:	f04f 0ec7 	mov.w	lr, #199	; 0xc7
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800a10a:	f883 c010 	strb.w	ip, [r3, #16]
	pdynamic->system__grouped_parameter_hold                   = 0x02;
 800a10e:	749f      	strb	r7, [r3, #18]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a110:	f883 e00f 	strb.w	lr, [r3, #15]
		pdynamic->system__sequence_config  = \
 800a114:	225b      	movs	r2, #91	; 0x5b
	psystem->system__stream_count_ctrl                         = 0x00;
 800a116:	f8c4 5001 	str.w	r5, [r4, #1]
		pgeneral->dss_config__roi_mode_control =
 800a11a:	728f      	strb	r7, [r1, #10]
		pdynamic->system__sequence_config  = \
 800a11c:	745a      	strb	r2, [r3, #17]
}
 800a11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a122:	bf00      	nop
 800a124:	01ff3800 	.word	0x01ff3800
 800a128:	21010100 	.word	0x21010100

0800a12c <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800a12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a130:	4604      	mov	r4, r0
 800a132:	9d09      	ldr	r5, [sp, #36]	; 0x24
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a134:	f8df a134 	ldr.w	sl, [pc, #308]	; 800a26c <VL53L1_preset_mode_timed_ranging+0x140>
	pstatic->debug__ctrl                                      = 0x00;
 800a138:	2000      	movs	r0, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a13a:	f04f 0e02 	mov.w	lr, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a13e:	f04f 0808 	mov.w	r8, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a142:	f44f 6720 	mov.w	r7, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 800a146:	2611      	movs	r6, #17
	pstatic->debug__ctrl                                      = 0x00;
 800a148:	70a0      	strb	r0, [r4, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800a14a:	70e0      	strb	r0, [r4, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800a14c:	7120      	strb	r0, [r4, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800a14e:	7160      	strb	r0, [r4, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800a150:	71a0      	strb	r0, [r4, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800a152:	71e0      	strb	r0, [r4, #7]
	pstatic->host_if__status                                  = 0x00;
 800a154:	7220      	strb	r0, [r4, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800a156:	7260      	strb	r0, [r4, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800a158:	72a0      	strb	r0, [r4, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800a15a:	72e0      	strb	r0, [r4, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800a15c:	73a0      	strb	r0, [r4, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800a15e:	7460      	strb	r0, [r4, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a160:	f884 e00d 	strb.w	lr, [r4, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800a164:	f884 e00f 	strb.w	lr, [r4, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a168:	f884 8010 	strb.w	r8, [r4, #16]
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a16c:	8027      	strh	r7, [r4, #0]
	pstatic->gpio_hv_mux__ctrl  = \
 800a16e:	7326      	strb	r6, [r4, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800a170:	7fae      	ldrb	r6, [r5, #30]
 800a172:	74a6      	strb	r6, [r4, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800a174:	7fee      	ldrb	r6, [r5, #31]
 800a176:	74e6      	strb	r6, [r4, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800a178:	f895 6020 	ldrb.w	r6, [r5, #32]
 800a17c:	7526      	strb	r6, [r4, #20]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a17e:	f04f 0cff 	mov.w	ip, #255	; 0xff
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a182:	2601      	movs	r6, #1
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800a184:	75a0      	strb	r0, [r4, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800a186:	75e0      	strb	r0, [r4, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800a188:	8320      	strh	r0, [r4, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a18a:	7566      	strb	r6, [r4, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a18c:	f884 c01a 	strb.w	ip, [r4, #26]
	pstatic->algo__range_min_clip                             =
 800a190:	7c2f      	ldrb	r7, [r5, #16]
 800a192:	76e7      	strb	r7, [r4, #27]
{
 800a194:	9f08      	ldr	r7, [sp, #32]
	pstatic->algo__consistency_check__tolerance               =
 800a196:	f895 900c 	ldrb.w	r9, [r5, #12]
 800a19a:	f884 901c 	strb.w	r9, [r4, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a19e:	f04f 6932 	mov.w	r9, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800a1a2:	7760      	strb	r0, [r4, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800a1a4:	77a0      	strb	r0, [r4, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800a1a6:	77e0      	strb	r0, [r4, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a1a8:	f8c1 9000 	str.w	r9, [r1]
	pgeneral->cal_config__repeat_rate                         =
 800a1ac:	89ec      	ldrh	r4, [r5, #14]
 800a1ae:	808c      	strh	r4, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a1b0:	240d      	movs	r4, #13
	pgeneral->global_config__vcsel_width                      = 0x02;
 800a1b2:	f881 e006 	strb.w	lr, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a1b6:	71cc      	strb	r4, [r1, #7]
	pgeneral->phasecal_config__target                         =
 800a1b8:	7b6c      	ldrb	r4, [r5, #13]
 800a1ba:	720c      	strb	r4, [r1, #8]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a1bc:	f44f 440c 	mov.w	r4, #35840	; 0x8c00
	pgeneral->phasecal_config__override                       = 0x00;
 800a1c0:	7248      	strb	r0, [r1, #9]
	pgeneral->dss_config__roi_mode_control =
 800a1c2:	728e      	strb	r6, [r1, #10]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a1c4:	f8c1 a012 	str.w	sl, [r1, #18]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800a1c8:	8188      	strh	r0, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800a1ca:	81c8      	strh	r0, [r1, #14]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a1cc:	820c      	strh	r4, [r1, #16]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a1ce:	f04f 091a 	mov.w	r9, #26
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800a1d2:	240b      	movs	r4, #11
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800a1d4:	2109      	movs	r1, #9
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a1d6:	f04f 0e20 	mov.w	lr, #32
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800a1da:	7010      	strb	r0, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800a1dc:	7090      	strb	r0, [r2, #2]
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800a1de:	7194      	strb	r4, [r2, #6]
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800a1e0:	7251      	strb	r1, [r2, #9]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a1e2:	f882 9001 	strb.w	r9, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a1e6:	f882 e003 	strb.w	lr, [r2, #3]
	ptiming->range_config__sigma_thresh                       =
 800a1ea:	f8b5 e014 	ldrh.w	lr, [r5, #20]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800a1ee:	f8b5 901a 	ldrh.w	r9, [r5, #26]
	ptiming->range_config__sigma_thresh                       =
 800a1f2:	f8a2 e00a 	strh.w	lr, [r2, #10]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800a1f6:	f04f 0e78 	mov.w	lr, #120	; 0x78
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800a1fa:	f8a2 900c 	strh.w	r9, [r2, #12]
	ptiming->range_config__valid_phase_low                    = 0x08;
 800a1fe:	f882 800e 	strb.w	r8, [r2, #14]
	ptiming->system__fractional_enable                        = 0x00;
 800a202:	7510      	strb	r0, [r2, #20]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800a204:	f882 e00f 	strb.w	lr, [r2, #15]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800a208:	701e      	strb	r6, [r3, #0]
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800a20a:	721c      	strb	r4, [r3, #8]
	pdynamic->system__thresh_high                              = 0x0000;
 800a20c:	f8c3 0002 	str.w	r0, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800a210:	7198      	strb	r0, [r3, #6]
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800a212:	7259      	strb	r1, [r3, #9]
	pdynamic->sd_config__initial_phase_sd0                     =
 800a214:	79e9      	ldrb	r1, [r5, #7]
 800a216:	7299      	strb	r1, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800a218:	7aa9      	ldrb	r1, [r5, #10]
 800a21a:	72d9      	strb	r1, [r3, #11]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800a21c:	731e      	strb	r6, [r3, #12]
	pdynamic->sd_config__first_order_select =
 800a21e:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
 800a222:	7359      	strb	r1, [r3, #13]
	pdynamic->sd_config__quantifier         =
 800a224:	f895 1023 	ldrb.w	r1, [r5, #35]	; 0x23
 800a228:	7399      	strb	r1, [r3, #14]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a22a:	f04f 09c7 	mov.w	r9, #199	; 0xc7
	pdynamic->system__sequence_config                          = \
 800a22e:	f04f 08db 	mov.w	r8, #219	; 0xdb
		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800a232:	f04f 0eb1 	mov.w	lr, #177	; 0xb1
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800a236:	24d4      	movs	r4, #212	; 0xd4

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 800a238:	f44f 61c0 	mov.w	r1, #1536	; 0x600
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800a23c:	f883 c010 	strb.w	ip, [r3, #16]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a240:	f883 900f 	strb.w	r9, [r3, #15]
	pdynamic->system__sequence_config                          = \
 800a244:	f883 8011 	strb.w	r8, [r3, #17]
	psystem->system__stream_count_ctrl                         = 0x00;
 800a248:	7078      	strb	r0, [r7, #1]
	psystem->firmware__enable                                  = 0x01;
 800a24a:	70be      	strb	r6, [r7, #2]
	psystem->system__interrupt_clear                           = \
 800a24c:	70fe      	strb	r6, [r7, #3]
		pdynamic->system__grouped_parameter_hold = 0x00;
 800a24e:	7498      	strb	r0, [r3, #18]
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800a250:	7110      	strb	r0, [r2, #4]
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800a252:	71d0      	strb	r0, [r2, #7]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800a254:	f882 e005 	strb.w	lr, [r2, #5]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800a258:	7214      	strb	r4, [r2, #8]
		ptiming->system__intermeasurement_period = 0x00000600;
 800a25a:	6111      	str	r1, [r2, #16]
		pdynamic->system__seed_config =
 800a25c:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
 800a260:	71da      	strb	r2, [r3, #7]
				ptuning_parms->tp_timed_seed_cfg;

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800a262:	2340      	movs	r3, #64	; 0x40
 800a264:	713b      	strb	r3, [r7, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800a266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a26a:	bf00      	nop
 800a26c:	01ff3800 	.word	0x01ff3800

0800a270 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800a270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a274:	9d09      	ldr	r5, [sp, #36]	; 0x24
	pstatic->debug__ctrl                                      = 0x00;
 800a276:	2400      	movs	r4, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a278:	f04f 0e02 	mov.w	lr, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a27c:	f04f 0c08 	mov.w	ip, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a280:	f44f 6720 	mov.w	r7, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 800a284:	2611      	movs	r6, #17
	pstatic->debug__ctrl                                      = 0x00;
 800a286:	7084      	strb	r4, [r0, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800a288:	70c4      	strb	r4, [r0, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800a28a:	7104      	strb	r4, [r0, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800a28c:	7144      	strb	r4, [r0, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800a28e:	7184      	strb	r4, [r0, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800a290:	71c4      	strb	r4, [r0, #7]
	pstatic->host_if__status                                  = 0x00;
 800a292:	7204      	strb	r4, [r0, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800a294:	7244      	strb	r4, [r0, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800a296:	7284      	strb	r4, [r0, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800a298:	72c4      	strb	r4, [r0, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800a29a:	7384      	strb	r4, [r0, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800a29c:	7444      	strb	r4, [r0, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a29e:	f880 e00d 	strb.w	lr, [r0, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800a2a2:	f880 e00f 	strb.w	lr, [r0, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a2a6:	f880 c010 	strb.w	ip, [r0, #16]
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a2aa:	8007      	strh	r7, [r0, #0]
	pstatic->gpio_hv_mux__ctrl  = \
 800a2ac:	7306      	strb	r6, [r0, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800a2ae:	7fae      	ldrb	r6, [r5, #30]
 800a2b0:	7486      	strb	r6, [r0, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800a2b2:	7fee      	ldrb	r6, [r5, #31]
 800a2b4:	74c6      	strb	r6, [r0, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800a2b6:	f895 6020 	ldrb.w	r6, [r5, #32]
 800a2ba:	7506      	strb	r6, [r0, #20]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a2bc:	f04f 08ff 	mov.w	r8, #255	; 0xff
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a2c0:	2601      	movs	r6, #1
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800a2c2:	7584      	strb	r4, [r0, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800a2c4:	75c4      	strb	r4, [r0, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800a2c6:	8304      	strh	r4, [r0, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a2c8:	7546      	strb	r6, [r0, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a2ca:	f880 801a 	strb.w	r8, [r0, #26]
	pstatic->algo__range_min_clip                             =
 800a2ce:	7c2f      	ldrb	r7, [r5, #16]
 800a2d0:	76c7      	strb	r7, [r0, #27]
{
 800a2d2:	9f08      	ldr	r7, [sp, #32]
	pstatic->algo__consistency_check__tolerance               =
 800a2d4:	f895 900c 	ldrb.w	r9, [r5, #12]
 800a2d8:	f880 901c 	strb.w	r9, [r0, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a2dc:	f04f 6932 	mov.w	r9, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800a2e0:	7744      	strb	r4, [r0, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800a2e2:	7784      	strb	r4, [r0, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800a2e4:	77c4      	strb	r4, [r0, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a2e6:	f8c1 9000 	str.w	r9, [r1]
	pgeneral->cal_config__repeat_rate                         =
 800a2ea:	89e8      	ldrh	r0, [r5, #14]
 800a2ec:	8088      	strh	r0, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a2ee:	200d      	movs	r0, #13
	pgeneral->global_config__vcsel_width                      = 0x02;
 800a2f0:	f881 e006 	strb.w	lr, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a2f4:	71c8      	strb	r0, [r1, #7]
	pgeneral->phasecal_config__target                         =
 800a2f6:	7b68      	ldrb	r0, [r5, #13]
 800a2f8:	7208      	strb	r0, [r1, #8]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a2fa:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800a3ac <VL53L1_preset_mode_timed_ranging_short_range+0x13c>
	pgeneral->phasecal_config__override                       = 0x00;
 800a2fe:	724c      	strb	r4, [r1, #9]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a300:	f44f 4a0c 	mov.w	sl, #35840	; 0x8c00
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a304:	f04f 0e1a 	mov.w	lr, #26
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a308:	2020      	movs	r0, #32
	pgeneral->dss_config__roi_mode_control =
 800a30a:	728e      	strb	r6, [r1, #10]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800a30c:	818c      	strh	r4, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800a30e:	81cc      	strh	r4, [r1, #14]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a310:	f8a1 a010 	strh.w	sl, [r1, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a314:	f8c1 9012 	str.w	r9, [r1, #18]
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800a318:	7014      	strb	r4, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800a31a:	7094      	strb	r4, [r2, #2]
	ptiming->system__fractional_enable                        = 0x00;
 800a31c:	7514      	strb	r4, [r2, #20]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a31e:	f882 e001 	strb.w	lr, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a322:	70d0      	strb	r0, [r2, #3]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800a324:	701e      	strb	r6, [r3, #0]
	pdynamic->system__thresh_high                              = 0x0000;
 800a326:	f8c3 4002 	str.w	r4, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800a32a:	719c      	strb	r4, [r3, #6]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800a32c:	731e      	strb	r6, [r3, #12]
	pdynamic->sd_config__first_order_select =
 800a32e:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
 800a332:	7359      	strb	r1, [r3, #13]
	pdynamic->sd_config__quantifier         =
 800a334:	f895 1023 	ldrb.w	r1, [r5, #35]	; 0x23
 800a338:	7399      	strb	r1, [r3, #14]
		ptiming->range_config__vcsel_period_a                = 0x07;
 800a33a:	2007      	movs	r0, #7
		ptiming->range_config__vcsel_period_b                = 0x05;
 800a33c:	2105      	movs	r1, #5
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a33e:	f04f 09c7 	mov.w	r9, #199	; 0xc7
	pdynamic->system__sequence_config                          = \
 800a342:	f04f 0edb 	mov.w	lr, #219	; 0xdb
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a346:	f883 900f 	strb.w	r9, [r3, #15]
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800a34a:	f883 8010 	strb.w	r8, [r3, #16]
	pdynamic->system__sequence_config                          = \
 800a34e:	f883 e011 	strb.w	lr, [r3, #17]
	psystem->system__stream_count_ctrl                         = 0x00;
 800a352:	707c      	strb	r4, [r7, #1]
	psystem->firmware__enable                                  = 0x01;
 800a354:	70be      	strb	r6, [r7, #2]
	psystem->system__interrupt_clear                           = \
 800a356:	70fe      	strb	r6, [r7, #3]
		ptiming->range_config__vcsel_period_a                = 0x07;
 800a358:	7190      	strb	r0, [r2, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 800a35a:	7251      	strb	r1, [r2, #9]
		ptiming->range_config__sigma_thresh                  =
 800a35c:	f8b5 e016 	ldrh.w	lr, [r5, #22]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a360:	f8b5 801c 	ldrh.w	r8, [r5, #28]
		ptiming->range_config__sigma_thresh                  =
 800a364:	f8a2 e00a 	strh.w	lr, [r2, #10]
		ptiming->range_config__valid_phase_high              = 0x38;
 800a368:	f04f 0e38 	mov.w	lr, #56	; 0x38
 800a36c:	f882 e00f 	strb.w	lr, [r2, #15]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a370:	f8a2 800c 	strh.w	r8, [r2, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800a374:	f882 c00e 	strb.w	ip, [r2, #14]
		pdynamic->sd_config__woi_sd0                         = 0x07;
 800a378:	7218      	strb	r0, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 800a37a:	7259      	strb	r1, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
 800a37c:	7a29      	ldrb	r1, [r5, #8]
 800a37e:	7299      	strb	r1, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
 800a380:	7ae9      	ldrb	r1, [r5, #11]
 800a382:	72d9      	strb	r1, [r3, #11]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800a384:	f04f 0e84 	mov.w	lr, #132	; 0x84
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800a388:	20b1      	movs	r0, #177	; 0xb1

		ptiming->system__intermeasurement_period = 0x00000600;
 800a38a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
		pdynamic->system__grouped_parameter_hold = 0x00;
 800a38e:	749c      	strb	r4, [r3, #18]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800a390:	7210      	strb	r0, [r2, #8]
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800a392:	7116      	strb	r6, [r2, #4]
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800a394:	71d6      	strb	r6, [r2, #7]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800a396:	f882 e005 	strb.w	lr, [r2, #5]
		ptiming->system__intermeasurement_period = 0x00000600;
 800a39a:	6111      	str	r1, [r2, #16]
		pdynamic->system__seed_config =
 800a39c:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
 800a3a0:	71da      	strb	r2, [r3, #7]
				ptuning_parms->tp_timed_seed_cfg;

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800a3a2:	2340      	movs	r3, #64	; 0x40
 800a3a4:	713b      	strb	r3, [r7, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ac:	01ff3800 	.word	0x01ff3800

0800a3b0 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800a3b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3b4:	4604      	mov	r4, r0
 800a3b6:	9d09      	ldr	r5, [sp, #36]	; 0x24
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a3b8:	f8df a12c 	ldr.w	sl, [pc, #300]	; 800a4e8 <VL53L1_preset_mode_timed_ranging_long_range+0x138>
	pstatic->debug__ctrl                                      = 0x00;
 800a3bc:	2000      	movs	r0, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a3be:	f04f 0e02 	mov.w	lr, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a3c2:	f04f 0c08 	mov.w	ip, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a3c6:	f44f 6720 	mov.w	r7, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 800a3ca:	2611      	movs	r6, #17
	pstatic->debug__ctrl                                      = 0x00;
 800a3cc:	70a0      	strb	r0, [r4, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800a3ce:	70e0      	strb	r0, [r4, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800a3d0:	7120      	strb	r0, [r4, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800a3d2:	7160      	strb	r0, [r4, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800a3d4:	71a0      	strb	r0, [r4, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800a3d6:	71e0      	strb	r0, [r4, #7]
	pstatic->host_if__status                                  = 0x00;
 800a3d8:	7220      	strb	r0, [r4, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800a3da:	7260      	strb	r0, [r4, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800a3dc:	72a0      	strb	r0, [r4, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800a3de:	72e0      	strb	r0, [r4, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800a3e0:	73a0      	strb	r0, [r4, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800a3e2:	7460      	strb	r0, [r4, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a3e4:	f884 e00d 	strb.w	lr, [r4, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800a3e8:	f884 e00f 	strb.w	lr, [r4, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a3ec:	f884 c010 	strb.w	ip, [r4, #16]
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a3f0:	8027      	strh	r7, [r4, #0]
	pstatic->gpio_hv_mux__ctrl  = \
 800a3f2:	7326      	strb	r6, [r4, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800a3f4:	7fae      	ldrb	r6, [r5, #30]
 800a3f6:	74a6      	strb	r6, [r4, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800a3f8:	7fee      	ldrb	r6, [r5, #31]
 800a3fa:	74e6      	strb	r6, [r4, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800a3fc:	f895 6020 	ldrb.w	r6, [r5, #32]
 800a400:	7526      	strb	r6, [r4, #20]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a402:	f04f 08ff 	mov.w	r8, #255	; 0xff
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a406:	2601      	movs	r6, #1
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800a408:	75a0      	strb	r0, [r4, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800a40a:	75e0      	strb	r0, [r4, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800a40c:	8320      	strh	r0, [r4, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a40e:	7566      	strb	r6, [r4, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a410:	f884 801a 	strb.w	r8, [r4, #26]
	pstatic->algo__range_min_clip                             =
 800a414:	7c2f      	ldrb	r7, [r5, #16]
 800a416:	76e7      	strb	r7, [r4, #27]
{
 800a418:	9f08      	ldr	r7, [sp, #32]
	pstatic->algo__consistency_check__tolerance               =
 800a41a:	f895 900c 	ldrb.w	r9, [r5, #12]
 800a41e:	f884 901c 	strb.w	r9, [r4, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a422:	f04f 6932 	mov.w	r9, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800a426:	7760      	strb	r0, [r4, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800a428:	77a0      	strb	r0, [r4, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800a42a:	77e0      	strb	r0, [r4, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a42c:	f8c1 9000 	str.w	r9, [r1]
	pgeneral->cal_config__repeat_rate                         =
 800a430:	89ec      	ldrh	r4, [r5, #14]
 800a432:	808c      	strh	r4, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a434:	240d      	movs	r4, #13
 800a436:	71cc      	strb	r4, [r1, #7]
	pgeneral->global_config__vcsel_width                      = 0x02;
 800a438:	f881 e006 	strb.w	lr, [r1, #6]
	pgeneral->phasecal_config__target                         =
 800a43c:	f895 e00d 	ldrb.w	lr, [r5, #13]
 800a440:	f881 e008 	strb.w	lr, [r1, #8]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a444:	f44f 4e0c 	mov.w	lr, #35840	; 0x8c00
 800a448:	f8a1 e010 	strh.w	lr, [r1, #16]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a44c:	f04f 091a 	mov.w	r9, #26
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a450:	f04f 0e20 	mov.w	lr, #32
	pgeneral->phasecal_config__override                       = 0x00;
 800a454:	7248      	strb	r0, [r1, #9]
	pgeneral->dss_config__roi_mode_control =
 800a456:	728e      	strb	r6, [r1, #10]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800a458:	8188      	strh	r0, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800a45a:	81c8      	strh	r0, [r1, #14]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a45c:	f8c1 a012 	str.w	sl, [r1, #18]
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800a460:	7010      	strb	r0, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800a462:	7090      	strb	r0, [r2, #2]
	ptiming->system__fractional_enable                        = 0x00;
 800a464:	7510      	strb	r0, [r2, #20]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a466:	f882 9001 	strb.w	r9, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a46a:	f882 e003 	strb.w	lr, [r2, #3]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800a46e:	701e      	strb	r6, [r3, #0]
	pdynamic->system__thresh_high                              = 0x0000;
 800a470:	f8c3 0002 	str.w	r0, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800a474:	7198      	strb	r0, [r3, #6]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800a476:	731e      	strb	r6, [r3, #12]
	pdynamic->sd_config__first_order_select =
 800a478:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
 800a47c:	7359      	strb	r1, [r3, #13]
	pdynamic->sd_config__quantifier         =
 800a47e:	f895 1023 	ldrb.w	r1, [r5, #35]	; 0x23
 800a482:	7399      	strb	r1, [r3, #14]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a484:	f04f 09c7 	mov.w	r9, #199	; 0xc7
		ptiming->range_config__vcsel_period_a                = 0x0F;
 800a488:	210f      	movs	r1, #15
	pdynamic->system__sequence_config                          = \
 800a48a:	f04f 0edb 	mov.w	lr, #219	; 0xdb
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a48e:	f883 900f 	strb.w	r9, [r3, #15]
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800a492:	f883 8010 	strb.w	r8, [r3, #16]
	pdynamic->system__sequence_config                          = \
 800a496:	f883 e011 	strb.w	lr, [r3, #17]
	psystem->system__stream_count_ctrl                         = 0x00;
 800a49a:	7078      	strb	r0, [r7, #1]
	psystem->firmware__enable                                  = 0x01;
 800a49c:	70be      	strb	r6, [r7, #2]
	psystem->system__interrupt_clear                           = \
 800a49e:	70fe      	strb	r6, [r7, #3]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 800a4a0:	7254      	strb	r4, [r2, #9]
		ptiming->range_config__vcsel_period_a                = 0x0F;
 800a4a2:	7191      	strb	r1, [r2, #6]
		ptiming->range_config__sigma_thresh                  =
 800a4a4:	8a6e      	ldrh	r6, [r5, #18]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a4a6:	f8b5 e018 	ldrh.w	lr, [r5, #24]
		ptiming->range_config__sigma_thresh                  =
 800a4aa:	8156      	strh	r6, [r2, #10]
		ptiming->range_config__valid_phase_high              = 0xB8;
 800a4ac:	26b8      	movs	r6, #184	; 0xb8
 800a4ae:	73d6      	strb	r6, [r2, #15]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a4b0:	f8a2 e00c 	strh.w	lr, [r2, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800a4b4:	f882 c00e 	strb.w	ip, [r2, #14]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 800a4b8:	725c      	strb	r4, [r3, #9]
		pdynamic->sd_config__woi_sd0                         = 0x0F;
 800a4ba:	7219      	strb	r1, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 800a4bc:	79a9      	ldrb	r1, [r5, #6]
 800a4be:	7299      	strb	r1, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
 800a4c0:	7a69      	ldrb	r1, [r5, #9]
 800a4c2:	72d9      	strb	r1, [r3, #11]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800a4c4:	2697      	movs	r6, #151	; 0x97
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800a4c6:	24b1      	movs	r4, #177	; 0xb1

		ptiming->system__intermeasurement_period = 0x00000600;
 800a4c8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
		pdynamic->system__grouped_parameter_hold = 0x00;
 800a4cc:	7498      	strb	r0, [r3, #18]
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800a4ce:	7110      	strb	r0, [r2, #4]
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800a4d0:	71d0      	strb	r0, [r2, #7]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800a4d2:	7156      	strb	r6, [r2, #5]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800a4d4:	7214      	strb	r4, [r2, #8]
		ptiming->system__intermeasurement_period = 0x00000600;
 800a4d6:	6111      	str	r1, [r2, #16]
		pdynamic->system__seed_config =
 800a4d8:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
 800a4dc:	71da      	strb	r2, [r3, #7]
				ptuning_parms->tp_timed_seed_cfg;

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800a4de:	2340      	movs	r3, #64	; 0x40
 800a4e0:	713b      	strb	r3, [r7, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800a4e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4e6:	bf00      	nop
 800a4e8:	01ff3800 	.word	0x01ff3800

0800a4ec <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800a4ec:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a4f0:	9d09      	ldr	r5, [sp, #36]	; 0x24
	pstatic->debug__ctrl                                      = 0x00;
 800a4f2:	2400      	movs	r4, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a4f4:	f04f 0902 	mov.w	r9, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a4f8:	f04f 0808 	mov.w	r8, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a4fc:	f44f 6720 	mov.w	r7, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 800a500:	2611      	movs	r6, #17
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a502:	8007      	strh	r7, [r0, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800a504:	7084      	strb	r4, [r0, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800a506:	70c4      	strb	r4, [r0, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800a508:	7104      	strb	r4, [r0, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800a50a:	7144      	strb	r4, [r0, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800a50c:	7184      	strb	r4, [r0, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800a50e:	71c4      	strb	r4, [r0, #7]
	pstatic->host_if__status                                  = 0x00;
 800a510:	7204      	strb	r4, [r0, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800a512:	7244      	strb	r4, [r0, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800a514:	7284      	strb	r4, [r0, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800a516:	72c4      	strb	r4, [r0, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800a518:	7384      	strb	r4, [r0, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800a51a:	7444      	strb	r4, [r0, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a51c:	f880 900d 	strb.w	r9, [r0, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800a520:	f880 900f 	strb.w	r9, [r0, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a524:	f880 8010 	strb.w	r8, [r0, #16]
	pstatic->gpio_hv_mux__ctrl  = \
 800a528:	7306      	strb	r6, [r0, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800a52a:	7fae      	ldrb	r6, [r5, #30]
 800a52c:	7486      	strb	r6, [r0, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800a52e:	7fee      	ldrb	r6, [r5, #31]
 800a530:	74c6      	strb	r6, [r0, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800a532:	f895 6020 	ldrb.w	r6, [r5, #32]
 800a536:	7506      	strb	r6, [r0, #20]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a538:	2701      	movs	r7, #1
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a53a:	f04f 0cff 	mov.w	ip, #255	; 0xff
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800a53e:	7584      	strb	r4, [r0, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800a540:	75c4      	strb	r4, [r0, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800a542:	8304      	strh	r4, [r0, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a544:	7547      	strb	r7, [r0, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a546:	f880 c01a 	strb.w	ip, [r0, #26]
	pstatic->algo__range_min_clip                             =
 800a54a:	f895 a010 	ldrb.w	sl, [r5, #16]
{
 800a54e:	9e08      	ldr	r6, [sp, #32]
	pstatic->algo__range_min_clip                             =
 800a550:	f880 a01b 	strb.w	sl, [r0, #27]
	pstatic->algo__consistency_check__tolerance               =
 800a554:	f895 a00c 	ldrb.w	sl, [r5, #12]
 800a558:	f880 a01c 	strb.w	sl, [r0, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a55c:	f04f 6a32 	mov.w	sl, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800a560:	7744      	strb	r4, [r0, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800a562:	7784      	strb	r4, [r0, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800a564:	77c4      	strb	r4, [r0, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a566:	f8c1 a000 	str.w	sl, [r1]
	pgeneral->cal_config__repeat_rate                         =
 800a56a:	89e8      	ldrh	r0, [r5, #14]
 800a56c:	8088      	strh	r0, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a56e:	200d      	movs	r0, #13
	pgeneral->global_config__vcsel_width                      = 0x02;
 800a570:	f881 9006 	strb.w	r9, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a574:	71c8      	strb	r0, [r1, #7]
	pgeneral->phasecal_config__target                         =
 800a576:	7b68      	ldrb	r0, [r5, #13]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a578:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 800a63c <VL53L1_preset_mode_low_power_auto_ranging+0x150>
	pgeneral->phasecal_config__target                         =
 800a57c:	7208      	strb	r0, [r1, #8]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a57e:	f44f 4b0c 	mov.w	fp, #35840	; 0x8c00
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a582:	f8c1 a012 	str.w	sl, [r1, #18]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a586:	f8a1 b010 	strh.w	fp, [r1, #16]
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800a58a:	f04f 0a09 	mov.w	sl, #9
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800a58e:	f04f 0b0b 	mov.w	fp, #11
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a592:	f04f 091a 	mov.w	r9, #26
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a596:	2020      	movs	r0, #32
	pgeneral->phasecal_config__override                       = 0x00;
 800a598:	724c      	strb	r4, [r1, #9]
	pgeneral->dss_config__roi_mode_control =
 800a59a:	728f      	strb	r7, [r1, #10]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800a59c:	818c      	strh	r4, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800a59e:	81cc      	strh	r4, [r1, #14]
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800a5a0:	7014      	strb	r4, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800a5a2:	7094      	strb	r4, [r2, #2]
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800a5a4:	f882 b006 	strb.w	fp, [r2, #6]
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800a5a8:	f882 a009 	strb.w	sl, [r2, #9]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a5ac:	f882 9001 	strb.w	r9, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a5b0:	70d0      	strb	r0, [r2, #3]
	ptiming->range_config__sigma_thresh                       =
 800a5b2:	8aa8      	ldrh	r0, [r5, #20]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800a5b4:	f8b5 901a 	ldrh.w	r9, [r5, #26]
	ptiming->range_config__sigma_thresh                       =
 800a5b8:	8150      	strh	r0, [r2, #10]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800a5ba:	2078      	movs	r0, #120	; 0x78
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800a5bc:	f8a2 900c 	strh.w	r9, [r2, #12]
	ptiming->range_config__valid_phase_low                    = 0x08;
 800a5c0:	f882 800e 	strb.w	r8, [r2, #14]
	ptiming->system__fractional_enable                        = 0x00;
 800a5c4:	7514      	strb	r4, [r2, #20]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800a5c6:	73d0      	strb	r0, [r2, #15]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800a5c8:	701f      	strb	r7, [r3, #0]
	pdynamic->system__thresh_high                              = 0x0000;
 800a5ca:	f8c3 4002 	str.w	r4, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800a5ce:	719c      	strb	r4, [r3, #6]
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800a5d0:	f883 b008 	strb.w	fp, [r3, #8]
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800a5d4:	f883 a009 	strb.w	sl, [r3, #9]
	pdynamic->sd_config__initial_phase_sd0                     =
 800a5d8:	79e8      	ldrb	r0, [r5, #7]
 800a5da:	7298      	strb	r0, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800a5dc:	7aa8      	ldrb	r0, [r5, #10]
 800a5de:	72d8      	strb	r0, [r3, #11]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800a5e0:	731f      	strb	r7, [r3, #12]
	pdynamic->sd_config__first_order_select =
 800a5e2:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
 800a5e6:	7358      	strb	r0, [r3, #13]
	pdynamic->sd_config__quantifier         =
 800a5e8:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
 800a5ec:	7398      	strb	r0, [r3, #14]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a5ee:	f04f 0bc7 	mov.w	fp, #199	; 0xc7
	pdynamic->system__sequence_config                          = \
 800a5f2:	f04f 0adb 	mov.w	sl, #219	; 0xdb
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800a5f6:	f04f 09b1 	mov.w	r9, #177	; 0xb1
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800a5fa:	f04f 08d4 	mov.w	r8, #212	; 0xd4
		ptiming->system__intermeasurement_period = 0x00000600;
 800a5fe:	f44f 60c0 	mov.w	r0, #1536	; 0x600
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800a602:	f883 c010 	strb.w	ip, [r3, #16]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a606:	f883 b00f 	strb.w	fp, [r3, #15]
	pdynamic->system__sequence_config                          = \
 800a60a:	f883 a011 	strb.w	sl, [r3, #17]
	psystem->system__stream_count_ctrl                         = 0x00;
 800a60e:	7074      	strb	r4, [r6, #1]
	psystem->firmware__enable                                  = 0x01;
 800a610:	70b7      	strb	r7, [r6, #2]
	psystem->system__interrupt_clear                           = \
 800a612:	70f7      	strb	r7, [r6, #3]
		pdynamic->system__grouped_parameter_hold = 0x00;
 800a614:	749c      	strb	r4, [r3, #18]
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800a616:	7114      	strb	r4, [r2, #4]
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800a618:	71d4      	strb	r4, [r2, #7]
		ptiming->system__intermeasurement_period = 0x00000600;
 800a61a:	6110      	str	r0, [r2, #16]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800a61c:	f882 9005 	strb.w	r9, [r2, #5]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800a620:	f882 8008 	strb.w	r8, [r2, #8]
		pdynamic->system__seed_config =
 800a624:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
 800a628:	71da      	strb	r2, [r3, #7]
		psystem->system__mode_start =
 800a62a:	2440      	movs	r4, #64	; 0x40
 800a62c:	7134      	strb	r4, [r6, #4]
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
		status = VL53L1_config_low_power_auto_mode(
 800a62e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a630:	4608      	mov	r0, r1
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800a632:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
		status = VL53L1_config_low_power_auto_mode(
 800a636:	4619      	mov	r1, r3
 800a638:	f000 bd74 	b.w	800b124 <VL53L1_config_low_power_auto_mode>
 800a63c:	01ff3800 	.word	0x01ff3800

0800a640 <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800a640:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a644:	9d09      	ldr	r5, [sp, #36]	; 0x24
	pstatic->debug__ctrl                                      = 0x00;
 800a646:	2400      	movs	r4, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a648:	f04f 0c02 	mov.w	ip, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a64c:	f04f 0808 	mov.w	r8, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a650:	f44f 6720 	mov.w	r7, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 800a654:	2611      	movs	r6, #17
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a656:	8007      	strh	r7, [r0, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800a658:	7084      	strb	r4, [r0, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800a65a:	70c4      	strb	r4, [r0, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800a65c:	7104      	strb	r4, [r0, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800a65e:	7144      	strb	r4, [r0, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800a660:	7184      	strb	r4, [r0, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800a662:	71c4      	strb	r4, [r0, #7]
	pstatic->host_if__status                                  = 0x00;
 800a664:	7204      	strb	r4, [r0, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800a666:	7244      	strb	r4, [r0, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800a668:	7284      	strb	r4, [r0, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800a66a:	72c4      	strb	r4, [r0, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800a66c:	7384      	strb	r4, [r0, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800a66e:	7444      	strb	r4, [r0, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a670:	f880 c00d 	strb.w	ip, [r0, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800a674:	f880 c00f 	strb.w	ip, [r0, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a678:	f880 8010 	strb.w	r8, [r0, #16]
	pstatic->gpio_hv_mux__ctrl  = \
 800a67c:	7306      	strb	r6, [r0, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800a67e:	7fae      	ldrb	r6, [r5, #30]
 800a680:	7486      	strb	r6, [r0, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800a682:	7fee      	ldrb	r6, [r5, #31]
 800a684:	74c6      	strb	r6, [r0, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800a686:	f895 6020 	ldrb.w	r6, [r5, #32]
 800a68a:	7506      	strb	r6, [r0, #20]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a68c:	2701      	movs	r7, #1
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a68e:	f04f 09ff 	mov.w	r9, #255	; 0xff
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800a692:	7584      	strb	r4, [r0, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800a694:	75c4      	strb	r4, [r0, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800a696:	8304      	strh	r4, [r0, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a698:	7547      	strb	r7, [r0, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a69a:	f880 901a 	strb.w	r9, [r0, #26]
	pstatic->algo__range_min_clip                             =
 800a69e:	f895 a010 	ldrb.w	sl, [r5, #16]
{
 800a6a2:	9e08      	ldr	r6, [sp, #32]
	pstatic->algo__range_min_clip                             =
 800a6a4:	f880 a01b 	strb.w	sl, [r0, #27]
	pstatic->algo__consistency_check__tolerance               =
 800a6a8:	f895 a00c 	ldrb.w	sl, [r5, #12]
 800a6ac:	f880 a01c 	strb.w	sl, [r0, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a6b0:	f04f 6a32 	mov.w	sl, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800a6b4:	7744      	strb	r4, [r0, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800a6b6:	7784      	strb	r4, [r0, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800a6b8:	77c4      	strb	r4, [r0, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a6ba:	f8c1 a000 	str.w	sl, [r1]
	pgeneral->cal_config__repeat_rate                         =
 800a6be:	89e8      	ldrh	r0, [r5, #14]
 800a6c0:	8088      	strh	r0, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a6c2:	200d      	movs	r0, #13
	pgeneral->global_config__vcsel_width                      = 0x02;
 800a6c4:	f881 c006 	strb.w	ip, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a6c8:	71c8      	strb	r0, [r1, #7]
	pgeneral->phasecal_config__target                         =
 800a6ca:	7b68      	ldrb	r0, [r5, #13]
 800a6cc:	7208      	strb	r0, [r1, #8]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a6ce:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a794 <VL53L1_preset_mode_low_power_auto_short_ranging+0x154>
	pgeneral->phasecal_config__override                       = 0x00;
 800a6d2:	724c      	strb	r4, [r1, #9]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a6d4:	f44f 4b0c 	mov.w	fp, #35840	; 0x8c00
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a6d8:	f04f 0c1a 	mov.w	ip, #26
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a6dc:	2020      	movs	r0, #32
	pgeneral->dss_config__roi_mode_control =
 800a6de:	728f      	strb	r7, [r1, #10]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800a6e0:	818c      	strh	r4, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800a6e2:	81cc      	strh	r4, [r1, #14]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a6e4:	f8a1 b010 	strh.w	fp, [r1, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a6e8:	f8c1 a012 	str.w	sl, [r1, #18]
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800a6ec:	7014      	strb	r4, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800a6ee:	7094      	strb	r4, [r2, #2]
	ptiming->system__fractional_enable                        = 0x00;
 800a6f0:	7514      	strb	r4, [r2, #20]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a6f2:	f882 c001 	strb.w	ip, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a6f6:	70d0      	strb	r0, [r2, #3]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800a6f8:	701f      	strb	r7, [r3, #0]
	pdynamic->system__thresh_high                              = 0x0000;
 800a6fa:	f8c3 4002 	str.w	r4, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800a6fe:	719c      	strb	r4, [r3, #6]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800a700:	731f      	strb	r7, [r3, #12]
	pdynamic->sd_config__first_order_select =
 800a702:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
 800a706:	7358      	strb	r0, [r3, #13]
	pdynamic->sd_config__quantifier         =
 800a708:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
 800a70c:	7398      	strb	r0, [r3, #14]
		ptiming->range_config__vcsel_period_a                = 0x07;
 800a70e:	f04f 0c07 	mov.w	ip, #7
		ptiming->range_config__vcsel_period_b                = 0x05;
 800a712:	2005      	movs	r0, #5
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a714:	f04f 0bc7 	mov.w	fp, #199	; 0xc7
	pdynamic->system__sequence_config                          = \
 800a718:	f04f 0adb 	mov.w	sl, #219	; 0xdb
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a71c:	f883 b00f 	strb.w	fp, [r3, #15]
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800a720:	f883 9010 	strb.w	r9, [r3, #16]
	pdynamic->system__sequence_config                          = \
 800a724:	f883 a011 	strb.w	sl, [r3, #17]
	psystem->system__stream_count_ctrl                         = 0x00;
 800a728:	7074      	strb	r4, [r6, #1]
	psystem->firmware__enable                                  = 0x01;
 800a72a:	70b7      	strb	r7, [r6, #2]
	psystem->system__interrupt_clear                           = \
 800a72c:	70f7      	strb	r7, [r6, #3]
		ptiming->range_config__vcsel_period_a                = 0x07;
 800a72e:	f882 c006 	strb.w	ip, [r2, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 800a732:	7250      	strb	r0, [r2, #9]
		ptiming->range_config__sigma_thresh                  =
 800a734:	f8b5 9016 	ldrh.w	r9, [r5, #22]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a738:	f8b5 a01c 	ldrh.w	sl, [r5, #28]
		ptiming->range_config__sigma_thresh                  =
 800a73c:	f8a2 900a 	strh.w	r9, [r2, #10]
		ptiming->range_config__valid_phase_high              = 0x38;
 800a740:	f04f 0938 	mov.w	r9, #56	; 0x38
		ptiming->range_config__valid_phase_low               = 0x08;
 800a744:	f882 800e 	strb.w	r8, [r2, #14]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a748:	f8a2 a00c 	strh.w	sl, [r2, #12]
		ptiming->range_config__valid_phase_high              = 0x38;
 800a74c:	f882 900f 	strb.w	r9, [r2, #15]
		pdynamic->sd_config__woi_sd0                         = 0x07;
 800a750:	f883 c008 	strb.w	ip, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 800a754:	7258      	strb	r0, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
 800a756:	7a28      	ldrb	r0, [r5, #8]
 800a758:	7298      	strb	r0, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
 800a75a:	7ae8      	ldrb	r0, [r5, #11]
 800a75c:	72d8      	strb	r0, [r3, #11]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800a75e:	f04f 0884 	mov.w	r8, #132	; 0x84
		ptiming->system__intermeasurement_period = 0x00000600;
 800a762:	f44f 60c0 	mov.w	r0, #1536	; 0x600
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800a766:	f04f 0cb1 	mov.w	ip, #177	; 0xb1
		pdynamic->system__grouped_parameter_hold = 0x00;
 800a76a:	749c      	strb	r4, [r3, #18]
		ptiming->system__intermeasurement_period = 0x00000600;
 800a76c:	6110      	str	r0, [r2, #16]
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800a76e:	7117      	strb	r7, [r2, #4]
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800a770:	71d7      	strb	r7, [r2, #7]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800a772:	f882 8005 	strb.w	r8, [r2, #5]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800a776:	f882 c008 	strb.w	ip, [r2, #8]
		pdynamic->system__seed_config =
 800a77a:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
 800a77e:	71da      	strb	r2, [r3, #7]
		psystem->system__mode_start =
 800a780:	2440      	movs	r4, #64	; 0x40
 800a782:	7134      	strb	r4, [r6, #4]
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
		status = VL53L1_config_low_power_auto_mode(
 800a784:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a786:	4608      	mov	r0, r1
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800a788:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
		status = VL53L1_config_low_power_auto_mode(
 800a78c:	4619      	mov	r1, r3
 800a78e:	f000 bcc9 	b.w	800b124 <VL53L1_config_low_power_auto_mode>
 800a792:	bf00      	nop
 800a794:	01ff3800 	.word	0x01ff3800

0800a798 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800a798:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a79c:	9d09      	ldr	r5, [sp, #36]	; 0x24
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a79e:	f8df b148 	ldr.w	fp, [pc, #328]	; 800a8e8 <VL53L1_preset_mode_low_power_auto_long_ranging+0x150>
	pstatic->debug__ctrl                                      = 0x00;
 800a7a2:	2400      	movs	r4, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a7a4:	f04f 0c02 	mov.w	ip, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a7a8:	f04f 0808 	mov.w	r8, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a7ac:	f44f 6720 	mov.w	r7, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 800a7b0:	2611      	movs	r6, #17
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a7b2:	8007      	strh	r7, [r0, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800a7b4:	7084      	strb	r4, [r0, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800a7b6:	70c4      	strb	r4, [r0, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800a7b8:	7104      	strb	r4, [r0, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800a7ba:	7144      	strb	r4, [r0, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800a7bc:	7184      	strb	r4, [r0, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800a7be:	71c4      	strb	r4, [r0, #7]
	pstatic->host_if__status                                  = 0x00;
 800a7c0:	7204      	strb	r4, [r0, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800a7c2:	7244      	strb	r4, [r0, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800a7c4:	7284      	strb	r4, [r0, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800a7c6:	72c4      	strb	r4, [r0, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800a7c8:	7384      	strb	r4, [r0, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800a7ca:	7444      	strb	r4, [r0, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a7cc:	f880 c00d 	strb.w	ip, [r0, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800a7d0:	f880 c00f 	strb.w	ip, [r0, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a7d4:	f880 8010 	strb.w	r8, [r0, #16]
	pstatic->gpio_hv_mux__ctrl  = \
 800a7d8:	7306      	strb	r6, [r0, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800a7da:	7fae      	ldrb	r6, [r5, #30]
 800a7dc:	7486      	strb	r6, [r0, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800a7de:	7fee      	ldrb	r6, [r5, #31]
 800a7e0:	74c6      	strb	r6, [r0, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800a7e2:	f895 6020 	ldrb.w	r6, [r5, #32]
 800a7e6:	7506      	strb	r6, [r0, #20]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a7e8:	2701      	movs	r7, #1
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a7ea:	f04f 09ff 	mov.w	r9, #255	; 0xff
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800a7ee:	7584      	strb	r4, [r0, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800a7f0:	75c4      	strb	r4, [r0, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800a7f2:	8304      	strh	r4, [r0, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a7f4:	7547      	strb	r7, [r0, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a7f6:	f880 901a 	strb.w	r9, [r0, #26]
	pstatic->algo__range_min_clip                             =
 800a7fa:	f895 a010 	ldrb.w	sl, [r5, #16]
{
 800a7fe:	9e08      	ldr	r6, [sp, #32]
	pstatic->algo__range_min_clip                             =
 800a800:	f880 a01b 	strb.w	sl, [r0, #27]
	pstatic->algo__consistency_check__tolerance               =
 800a804:	f895 a00c 	ldrb.w	sl, [r5, #12]
 800a808:	f880 a01c 	strb.w	sl, [r0, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a80c:	f04f 6a32 	mov.w	sl, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800a810:	7744      	strb	r4, [r0, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800a812:	7784      	strb	r4, [r0, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800a814:	77c4      	strb	r4, [r0, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a816:	f8c1 a000 	str.w	sl, [r1]
	pgeneral->cal_config__repeat_rate                         =
 800a81a:	89e8      	ldrh	r0, [r5, #14]
 800a81c:	8088      	strh	r0, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a81e:	200d      	movs	r0, #13
 800a820:	71c8      	strb	r0, [r1, #7]
	pgeneral->global_config__vcsel_width                      = 0x02;
 800a822:	f881 c006 	strb.w	ip, [r1, #6]
	pgeneral->phasecal_config__target                         =
 800a826:	f895 c00d 	ldrb.w	ip, [r5, #13]
 800a82a:	f881 c008 	strb.w	ip, [r1, #8]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a82e:	f44f 4c0c 	mov.w	ip, #35840	; 0x8c00
 800a832:	f8a1 c010 	strh.w	ip, [r1, #16]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a836:	f04f 0a1a 	mov.w	sl, #26
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a83a:	f04f 0c20 	mov.w	ip, #32
	pgeneral->phasecal_config__override                       = 0x00;
 800a83e:	724c      	strb	r4, [r1, #9]
	pgeneral->dss_config__roi_mode_control =
 800a840:	728f      	strb	r7, [r1, #10]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800a842:	818c      	strh	r4, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800a844:	81cc      	strh	r4, [r1, #14]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a846:	f8c1 b012 	str.w	fp, [r1, #18]
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800a84a:	7014      	strb	r4, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800a84c:	7094      	strb	r4, [r2, #2]
	ptiming->system__fractional_enable                        = 0x00;
 800a84e:	7514      	strb	r4, [r2, #20]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a850:	f882 a001 	strb.w	sl, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a854:	f882 c003 	strb.w	ip, [r2, #3]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800a858:	701f      	strb	r7, [r3, #0]
	pdynamic->system__thresh_high                              = 0x0000;
 800a85a:	f8c3 4002 	str.w	r4, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800a85e:	719c      	strb	r4, [r3, #6]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800a860:	731f      	strb	r7, [r3, #12]
	pdynamic->sd_config__first_order_select =
 800a862:	f895 c024 	ldrb.w	ip, [r5, #36]	; 0x24
 800a866:	f883 c00d 	strb.w	ip, [r3, #13]
	pdynamic->sd_config__quantifier         =
 800a86a:	f895 c023 	ldrb.w	ip, [r5, #35]	; 0x23
 800a86e:	f883 c00e 	strb.w	ip, [r3, #14]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a872:	f04f 0bc7 	mov.w	fp, #199	; 0xc7
		ptiming->range_config__vcsel_period_a                = 0x0F;
 800a876:	f04f 0c0f 	mov.w	ip, #15
	pdynamic->system__sequence_config                          = \
 800a87a:	f04f 0adb 	mov.w	sl, #219	; 0xdb
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a87e:	f883 b00f 	strb.w	fp, [r3, #15]
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800a882:	f883 9010 	strb.w	r9, [r3, #16]
	pdynamic->system__sequence_config                          = \
 800a886:	f883 a011 	strb.w	sl, [r3, #17]
	psystem->system__stream_count_ctrl                         = 0x00;
 800a88a:	7074      	strb	r4, [r6, #1]
	psystem->firmware__enable                                  = 0x01;
 800a88c:	70b7      	strb	r7, [r6, #2]
	psystem->system__interrupt_clear                           = \
 800a88e:	70f7      	strb	r7, [r6, #3]
		ptiming->range_config__vcsel_period_a                = 0x0F;
 800a890:	f882 c006 	strb.w	ip, [r2, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 800a894:	7250      	strb	r0, [r2, #9]
		ptiming->range_config__sigma_thresh                  =
 800a896:	8a6f      	ldrh	r7, [r5, #18]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a898:	f8b5 9018 	ldrh.w	r9, [r5, #24]
		ptiming->range_config__sigma_thresh                  =
 800a89c:	8157      	strh	r7, [r2, #10]
		ptiming->range_config__valid_phase_high              = 0xB8;
 800a89e:	27b8      	movs	r7, #184	; 0xb8
 800a8a0:	73d7      	strb	r7, [r2, #15]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a8a2:	f8a2 900c 	strh.w	r9, [r2, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800a8a6:	f882 800e 	strb.w	r8, [r2, #14]
		pdynamic->sd_config__woi_sd0                         = 0x0F;
 800a8aa:	f883 c008 	strb.w	ip, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 800a8ae:	7258      	strb	r0, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
 800a8b0:	79a8      	ldrb	r0, [r5, #6]
 800a8b2:	7298      	strb	r0, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
 800a8b4:	7a68      	ldrb	r0, [r5, #9]
 800a8b6:	72d8      	strb	r0, [r3, #11]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800a8b8:	27b1      	movs	r7, #177	; 0xb1
		ptiming->system__intermeasurement_period = 0x00000600;
 800a8ba:	f44f 60c0 	mov.w	r0, #1536	; 0x600
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800a8be:	f04f 0c97 	mov.w	ip, #151	; 0x97
		pdynamic->system__grouped_parameter_hold = 0x00;
 800a8c2:	749c      	strb	r4, [r3, #18]
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800a8c4:	7114      	strb	r4, [r2, #4]
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800a8c6:	71d4      	strb	r4, [r2, #7]
		ptiming->system__intermeasurement_period = 0x00000600;
 800a8c8:	6110      	str	r0, [r2, #16]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800a8ca:	f882 c005 	strb.w	ip, [r2, #5]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800a8ce:	7217      	strb	r7, [r2, #8]
		pdynamic->system__seed_config =
 800a8d0:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
 800a8d4:	71da      	strb	r2, [r3, #7]
		psystem->system__mode_start =
 800a8d6:	2440      	movs	r4, #64	; 0x40
 800a8d8:	7134      	strb	r4, [r6, #4]
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
		status = VL53L1_config_low_power_auto_mode(
 800a8da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8dc:	4608      	mov	r0, r1
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800a8de:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
		status = VL53L1_config_low_power_auto_mode(
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	f000 bc1e 	b.w	800b124 <VL53L1_config_low_power_auto_mode>
 800a8e8:	01ff3800 	.word	0x01ff3800

0800a8ec <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800a8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8f0:	4604      	mov	r4, r0
 800a8f2:	9d09      	ldr	r5, [sp, #36]	; 0x24
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a8f4:	f8df a12c 	ldr.w	sl, [pc, #300]	; 800aa24 <VL53L1_preset_mode_singleshot_ranging+0x138>
	pstatic->debug__ctrl                                      = 0x00;
 800a8f8:	2000      	movs	r0, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a8fa:	f04f 0e02 	mov.w	lr, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a8fe:	f04f 0808 	mov.w	r8, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a902:	f44f 6720 	mov.w	r7, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 800a906:	2611      	movs	r6, #17
	pstatic->debug__ctrl                                      = 0x00;
 800a908:	70a0      	strb	r0, [r4, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800a90a:	70e0      	strb	r0, [r4, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800a90c:	7120      	strb	r0, [r4, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800a90e:	7160      	strb	r0, [r4, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800a910:	71a0      	strb	r0, [r4, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800a912:	71e0      	strb	r0, [r4, #7]
	pstatic->host_if__status                                  = 0x00;
 800a914:	7220      	strb	r0, [r4, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800a916:	7260      	strb	r0, [r4, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800a918:	72a0      	strb	r0, [r4, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800a91a:	72e0      	strb	r0, [r4, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800a91c:	73a0      	strb	r0, [r4, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800a91e:	7460      	strb	r0, [r4, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a920:	f884 e00d 	strb.w	lr, [r4, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800a924:	f884 e00f 	strb.w	lr, [r4, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a928:	f884 8010 	strb.w	r8, [r4, #16]
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a92c:	8027      	strh	r7, [r4, #0]
	pstatic->gpio_hv_mux__ctrl  = \
 800a92e:	7326      	strb	r6, [r4, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800a930:	7fae      	ldrb	r6, [r5, #30]
 800a932:	74a6      	strb	r6, [r4, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800a934:	7fee      	ldrb	r6, [r5, #31]
 800a936:	74e6      	strb	r6, [r4, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800a938:	f895 6020 	ldrb.w	r6, [r5, #32]
 800a93c:	7526      	strb	r6, [r4, #20]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a93e:	f04f 0cff 	mov.w	ip, #255	; 0xff
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a942:	2601      	movs	r6, #1
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800a944:	75a0      	strb	r0, [r4, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800a946:	75e0      	strb	r0, [r4, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800a948:	8320      	strh	r0, [r4, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a94a:	7566      	strb	r6, [r4, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a94c:	f884 c01a 	strb.w	ip, [r4, #26]
	pstatic->algo__range_min_clip                             =
 800a950:	7c2f      	ldrb	r7, [r5, #16]
 800a952:	76e7      	strb	r7, [r4, #27]
{
 800a954:	9f08      	ldr	r7, [sp, #32]
	pstatic->algo__consistency_check__tolerance               =
 800a956:	f895 900c 	ldrb.w	r9, [r5, #12]
 800a95a:	f884 901c 	strb.w	r9, [r4, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a95e:	f04f 6932 	mov.w	r9, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800a962:	7760      	strb	r0, [r4, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800a964:	77a0      	strb	r0, [r4, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800a966:	77e0      	strb	r0, [r4, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a968:	f8c1 9000 	str.w	r9, [r1]
	pgeneral->cal_config__repeat_rate                         =
 800a96c:	89ec      	ldrh	r4, [r5, #14]
 800a96e:	808c      	strh	r4, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a970:	240d      	movs	r4, #13
	pgeneral->global_config__vcsel_width                      = 0x02;
 800a972:	f881 e006 	strb.w	lr, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a976:	71cc      	strb	r4, [r1, #7]
	pgeneral->phasecal_config__target                         =
 800a978:	7b6c      	ldrb	r4, [r5, #13]
 800a97a:	720c      	strb	r4, [r1, #8]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a97c:	f44f 440c 	mov.w	r4, #35840	; 0x8c00
	pgeneral->phasecal_config__override                       = 0x00;
 800a980:	7248      	strb	r0, [r1, #9]
	pgeneral->dss_config__roi_mode_control =
 800a982:	728e      	strb	r6, [r1, #10]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a984:	f8c1 a012 	str.w	sl, [r1, #18]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800a988:	8188      	strh	r0, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800a98a:	81c8      	strh	r0, [r1, #14]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a98c:	820c      	strh	r4, [r1, #16]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a98e:	f04f 091a 	mov.w	r9, #26
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800a992:	240b      	movs	r4, #11
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800a994:	2109      	movs	r1, #9
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a996:	f04f 0e20 	mov.w	lr, #32
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800a99a:	7010      	strb	r0, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800a99c:	7090      	strb	r0, [r2, #2]
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800a99e:	7194      	strb	r4, [r2, #6]
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800a9a0:	7251      	strb	r1, [r2, #9]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a9a2:	f882 9001 	strb.w	r9, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a9a6:	f882 e003 	strb.w	lr, [r2, #3]
	ptiming->range_config__sigma_thresh                       =
 800a9aa:	f8b5 e014 	ldrh.w	lr, [r5, #20]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800a9ae:	f8b5 901a 	ldrh.w	r9, [r5, #26]
	ptiming->range_config__sigma_thresh                       =
 800a9b2:	f8a2 e00a 	strh.w	lr, [r2, #10]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800a9b6:	f04f 0e78 	mov.w	lr, #120	; 0x78
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800a9ba:	f8a2 900c 	strh.w	r9, [r2, #12]
	ptiming->range_config__valid_phase_low                    = 0x08;
 800a9be:	f882 800e 	strb.w	r8, [r2, #14]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800a9c2:	6110      	str	r0, [r2, #16]
	ptiming->system__fractional_enable                        = 0x00;
 800a9c4:	7510      	strb	r0, [r2, #20]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800a9c6:	f882 e00f 	strb.w	lr, [r2, #15]
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800a9ca:	721c      	strb	r4, [r3, #8]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800a9cc:	701e      	strb	r6, [r3, #0]
	pdynamic->system__thresh_high                              = 0x0000;
 800a9ce:	f8c3 0002 	str.w	r0, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800a9d2:	7198      	strb	r0, [r3, #6]
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800a9d4:	7259      	strb	r1, [r3, #9]
	pdynamic->sd_config__initial_phase_sd0                     =
 800a9d6:	79e9      	ldrb	r1, [r5, #7]
 800a9d8:	7299      	strb	r1, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800a9da:	7aa9      	ldrb	r1, [r5, #10]
 800a9dc:	72d9      	strb	r1, [r3, #11]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800a9de:	731e      	strb	r6, [r3, #12]
	pdynamic->sd_config__first_order_select =
 800a9e0:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
 800a9e4:	7359      	strb	r1, [r3, #13]
	pdynamic->sd_config__quantifier         =
 800a9e6:	f895 1023 	ldrb.w	r1, [r5, #35]	; 0x23
 800a9ea:	7399      	strb	r1, [r3, #14]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a9ec:	f04f 08c7 	mov.w	r8, #199	; 0xc7
	pdynamic->system__sequence_config                          = \
 800a9f0:	f04f 0edb 	mov.w	lr, #219	; 0xdb

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800a9f4:	24b1      	movs	r4, #177	; 0xb1
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800a9f6:	21d4      	movs	r1, #212	; 0xd4
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800a9f8:	f883 c010 	strb.w	ip, [r3, #16]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a9fc:	f883 800f 	strb.w	r8, [r3, #15]
	pdynamic->system__sequence_config                          = \
 800aa00:	f883 e011 	strb.w	lr, [r3, #17]
	psystem->system__stream_count_ctrl                         = 0x00;
 800aa04:	7078      	strb	r0, [r7, #1]
	psystem->firmware__enable                                  = 0x01;
 800aa06:	70be      	strb	r6, [r7, #2]
	psystem->system__interrupt_clear                           = \
 800aa08:	70fe      	strb	r6, [r7, #3]
		pdynamic->system__grouped_parameter_hold = 0x00;
 800aa0a:	7498      	strb	r0, [r3, #18]
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800aa0c:	7110      	strb	r0, [r2, #4]
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800aa0e:	71d0      	strb	r0, [r2, #7]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800aa10:	7154      	strb	r4, [r2, #5]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800aa12:	7211      	strb	r1, [r2, #8]

		pdynamic->system__seed_config =
 800aa14:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
 800aa18:	71da      	strb	r2, [r3, #7]
				ptuning_parms->tp_timed_seed_cfg;

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 800aa1a:	2310      	movs	r3, #16
 800aa1c:	713b      	strb	r3, [r7, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800aa1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa22:	bf00      	nop
 800aa24:	01ff3800 	.word	0x01ff3800

0800aa28 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800aa28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa2c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	pstatic->debug__ctrl                                      = 0x00;
 800aa2e:	2400      	movs	r4, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 800aa30:	f04f 0e02 	mov.w	lr, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800aa34:	f04f 0808 	mov.w	r8, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800aa38:	f44f 6720 	mov.w	r7, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 800aa3c:	2511      	movs	r5, #17
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800aa3e:	8007      	strh	r7, [r0, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800aa40:	7084      	strb	r4, [r0, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800aa42:	70c4      	strb	r4, [r0, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800aa44:	7104      	strb	r4, [r0, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800aa46:	7144      	strb	r4, [r0, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800aa48:	7184      	strb	r4, [r0, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800aa4a:	71c4      	strb	r4, [r0, #7]
	pstatic->host_if__status                                  = 0x00;
 800aa4c:	7204      	strb	r4, [r0, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800aa4e:	7244      	strb	r4, [r0, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800aa50:	7284      	strb	r4, [r0, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800aa52:	72c4      	strb	r4, [r0, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800aa54:	7384      	strb	r4, [r0, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800aa56:	7444      	strb	r4, [r0, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 800aa58:	f880 e00d 	strb.w	lr, [r0, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800aa5c:	f880 e00f 	strb.w	lr, [r0, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800aa60:	f880 8010 	strb.w	r8, [r0, #16]
	pstatic->gpio_hv_mux__ctrl  = \
 800aa64:	7305      	strb	r5, [r0, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800aa66:	7fb5      	ldrb	r5, [r6, #30]
 800aa68:	7485      	strb	r5, [r0, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800aa6a:	7ff5      	ldrb	r5, [r6, #31]
 800aa6c:	74c5      	strb	r5, [r0, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800aa6e:	f896 5020 	ldrb.w	r5, [r6, #32]
 800aa72:	7505      	strb	r5, [r0, #20]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800aa74:	2701      	movs	r7, #1
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800aa76:	f04f 0cff 	mov.w	ip, #255	; 0xff
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800aa7a:	7584      	strb	r4, [r0, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800aa7c:	75c4      	strb	r4, [r0, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800aa7e:	8304      	strh	r4, [r0, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800aa80:	7547      	strb	r7, [r0, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800aa82:	f880 c01a 	strb.w	ip, [r0, #26]
	pstatic->algo__range_min_clip                             =
 800aa86:	7c35      	ldrb	r5, [r6, #16]
 800aa88:	76c5      	strb	r5, [r0, #27]
{
 800aa8a:	9d09      	ldr	r5, [sp, #36]	; 0x24
	pstatic->algo__consistency_check__tolerance               =
 800aa8c:	f896 900c 	ldrb.w	r9, [r6, #12]
 800aa90:	f880 901c 	strb.w	r9, [r0, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800aa94:	f04f 6932 	mov.w	r9, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800aa98:	7744      	strb	r4, [r0, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800aa9a:	7784      	strb	r4, [r0, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800aa9c:	77c4      	strb	r4, [r0, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800aa9e:	f8c1 9000 	str.w	r9, [r1]
	pgeneral->cal_config__repeat_rate                         =
 800aaa2:	89f0      	ldrh	r0, [r6, #14]
 800aaa4:	8088      	strh	r0, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800aaa6:	200d      	movs	r0, #13
	pgeneral->global_config__vcsel_width                      = 0x02;
 800aaa8:	f881 e006 	strb.w	lr, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800aaac:	71c8      	strb	r0, [r1, #7]
	pgeneral->phasecal_config__target                         =
 800aaae:	f896 900d 	ldrb.w	r9, [r6, #13]
 800aab2:	f881 9008 	strb.w	r9, [r1, #8]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800aab6:	4829      	ldr	r0, [pc, #164]	; (800ab5c <VL53L1_preset_mode_olt+0x134>)
	pgeneral->phasecal_config__override                       = 0x00;
 800aab8:	724c      	strb	r4, [r1, #9]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800aaba:	f44f 490c 	mov.w	r9, #35840	; 0x8c00
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800aabe:	f04f 0a1a 	mov.w	sl, #26
	pgeneral->dss_config__roi_mode_control =
 800aac2:	728f      	strb	r7, [r1, #10]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800aac4:	f8c1 0012 	str.w	r0, [r1, #18]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800aac8:	818c      	strh	r4, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800aaca:	81cc      	strh	r4, [r1, #14]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800aacc:	f8a1 9010 	strh.w	r9, [r1, #16]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800aad0:	f04f 0b20 	mov.w	fp, #32
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800aad4:	f882 a001 	strb.w	sl, [r2, #1]
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800aad8:	2109      	movs	r1, #9
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800aada:	f04f 0a0b 	mov.w	sl, #11
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800aade:	f04f 09cc 	mov.w	r9, #204	; 0xcc
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800aae2:	20f5      	movs	r0, #245	; 0xf5
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800aae4:	7014      	strb	r4, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800aae6:	7094      	strb	r4, [r2, #2]
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800aae8:	7117      	strb	r7, [r2, #4]
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800aaea:	71d7      	strb	r7, [r2, #7]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800aaec:	f882 b003 	strb.w	fp, [r2, #3]
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800aaf0:	f882 a006 	strb.w	sl, [r2, #6]
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800aaf4:	7251      	strb	r1, [r2, #9]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800aaf6:	f882 9005 	strb.w	r9, [r2, #5]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800aafa:	7210      	strb	r0, [r2, #8]
	ptiming->range_config__sigma_thresh                       =
 800aafc:	8ab0      	ldrh	r0, [r6, #20]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800aafe:	f8b6 901a 	ldrh.w	r9, [r6, #26]
	ptiming->range_config__sigma_thresh                       =
 800ab02:	8150      	strh	r0, [r2, #10]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800ab04:	2078      	movs	r0, #120	; 0x78
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800ab06:	f8a2 900c 	strh.w	r9, [r2, #12]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800ab0a:	73d0      	strb	r0, [r2, #15]
	ptiming->range_config__valid_phase_low                    = 0x08;
 800ab0c:	f882 800e 	strb.w	r8, [r2, #14]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800ab10:	6114      	str	r4, [r2, #16]
	ptiming->system__fractional_enable                        = 0x00;
 800ab12:	7514      	strb	r4, [r2, #20]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800ab14:	701f      	strb	r7, [r3, #0]
	pdynamic->system__thresh_high                              = 0x0000;
 800ab16:	f8c3 4002 	str.w	r4, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800ab1a:	719c      	strb	r4, [r3, #6]
	pdynamic->system__seed_config =
 800ab1c:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
 800ab20:	71da      	strb	r2, [r3, #7]
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800ab22:	f883 a008 	strb.w	sl, [r3, #8]
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800ab26:	7259      	strb	r1, [r3, #9]
	pdynamic->sd_config__initial_phase_sd0                     =
 800ab28:	79f2      	ldrb	r2, [r6, #7]
 800ab2a:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800ab2c:	7ab2      	ldrb	r2, [r6, #10]
 800ab2e:	72da      	strb	r2, [r3, #11]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800ab30:	731f      	strb	r7, [r3, #12]
	pdynamic->sd_config__first_order_select =
 800ab32:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
 800ab36:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
 800ab38:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
 800ab3c:	7399      	strb	r1, [r3, #14]
	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 800ab3e:	4a08      	ldr	r2, [pc, #32]	; (800ab60 <VL53L1_preset_mode_olt+0x138>)
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800ab40:	f883 c010 	strb.w	ip, [r3, #16]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800ab44:	26c7      	movs	r6, #199	; 0xc7
	pdynamic->system__sequence_config                          = \
 800ab46:	21db      	movs	r1, #219	; 0xdb
	pdynamic->system__grouped_parameter_hold                   = 0x02;
 800ab48:	f883 e012 	strb.w	lr, [r3, #18]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800ab4c:	73de      	strb	r6, [r3, #15]
	pdynamic->system__sequence_config                          = \
 800ab4e:	7459      	strb	r1, [r3, #17]
		psystem->system__stream_count_ctrl  = 0x01;
 800ab50:	f8c5 2001 	str.w	r2, [r5, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800ab54:	4620      	mov	r0, r4
 800ab56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab5a:	bf00      	nop
 800ab5c:	01ff3800 	.word	0x01ff3800
 800ab60:	21010101 	.word	0x21010101

0800ab64 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800ab64:	b410      	push	{r4}
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800ab66:	2102      	movs	r1, #2
	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800ab68:	2401      	movs	r4, #1
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800ab6a:	220a      	movs	r2, #10
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800ab6c:	f44f 63e6 	mov.w	r3, #1840	; 0x730
	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800ab70:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800ab74:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800ab78:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800ab7c:	6243      	str	r3, [r0, #36]	; 0x24
}
 800ab7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab82:	4770      	bx	lr

0800ab84 <VL53L1_init_ll_driver_state>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);

	pstate->cfg_device_state  = device_state;
	pstate->cfg_stream_count  = 0;
 800ab84:	2300      	movs	r3, #0
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ab86:	2202      	movs	r2, #2
	pstate->cfg_device_state  = device_state;
 800ab88:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
	pstate->cfg_timing_status = 0;

	pstate->rd_device_state   = device_state;
 800ab8c:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
	pstate->cfg_stream_count  = 0;
 800ab90:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	pstate->cfg_timing_status = 0;
 800ab94:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
	pstate->rd_stream_count   = 0;
 800ab98:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
	pstate->rd_timing_status  = 0;
 800ab9c:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800aba0:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800aba4:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
 800aba8:	4770      	bx	lr
 800abaa:	bf00      	nop

0800abac <VL53L1_update_ll_driver_rd_state>:

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 800abac:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
 800abb0:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800abb4:	d018      	beq.n	800abe8 <VL53L1_update_ll_driver_rd_state+0x3c>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 800abb6:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800abba:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 800abbe:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
		if (pstate->rd_stream_count == 0xFF) {
 800abc2:	2bff      	cmp	r3, #255	; 0xff
			pstate->rd_stream_count++;
 800abc4:	bf1a      	itte	ne
 800abc6:	3301      	addne	r3, #1
 800abc8:	b2db      	uxtbne	r3, r3
			pstate->rd_stream_count = 0x80;
 800abca:	2380      	moveq	r3, #128	; 0x80
 800abcc:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800abd0:	f081 0102 	eor.w	r1, r1, #2
		switch (pstate->rd_device_state) {
 800abd4:	1ed3      	subs	r3, r2, #3
		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800abd6:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
		switch (pstate->rd_device_state) {
 800abda:	2b05      	cmp	r3, #5
 800abdc:	d804      	bhi.n	800abe8 <VL53L1_update_ll_driver_rd_state+0x3c>
 800abde:	e8df f003 	tbb	[pc, r3]
 800abe2:	0312      	.short	0x0312
 800abe4:	072c2403 	.word	0x072c2403

		break;

		default:

			pstate->rd_device_state  =
 800abe8:	4b16      	ldr	r3, [pc, #88]	; (800ac44 <VL53L1_update_ll_driver_rd_state+0x98>)
 800abea:	6303      	str	r3, [r0, #48]	; 0x30
#endif

	LOG_FUNCTION_END(status);

	return status;
}
 800abec:	2000      	movs	r0, #0
 800abee:	4770      	bx	lr
			pstate->rd_timing_status ^= 0x01;
 800abf0:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
			pstate->rd_device_state =
 800abf4:	2208      	movs	r2, #8
			pstate->rd_timing_status ^= 0x01;
 800abf6:	f083 0301 	eor.w	r3, r3, #1
 800abfa:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
			pstate->rd_device_state =
 800abfe:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
}
 800ac02:	2000      	movs	r0, #0
 800ac04:	4770      	bx	lr
			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800ac06:	f890 31c6 	ldrb.w	r3, [r0, #454]	; 0x1c6
 800ac0a:	f013 0f02 	tst.w	r3, #2
				pstate->rd_device_state =
 800ac0e:	bf18      	it	ne
 800ac10:	2206      	movne	r2, #6
			pstate->rd_stream_count  = 0;
 800ac12:	f04f 0300 	mov.w	r3, #0
				pstate->rd_device_state =
 800ac16:	bf08      	it	eq
 800ac18:	2208      	moveq	r2, #8
 800ac1a:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
			pstate->rd_stream_count  = 0;
 800ac1e:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
			pstate->rd_timing_status = 0;
 800ac22:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
}
 800ac26:	2000      	movs	r0, #0
 800ac28:	4770      	bx	lr
			pstate->rd_stream_count = 0;
 800ac2a:	2200      	movs	r2, #0
			pstate->rd_device_state =
 800ac2c:	2308      	movs	r3, #8
			pstate->rd_stream_count = 0;
 800ac2e:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
			pstate->rd_device_state =
 800ac32:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
}
 800ac36:	2000      	movs	r0, #0
 800ac38:	4770      	bx	lr
			pstate->rd_device_state =
 800ac3a:	2308      	movs	r3, #8
 800ac3c:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
}
 800ac40:	2000      	movs	r0, #0
 800ac42:	4770      	bx	lr
 800ac44:	00020003 	.word	0x00020003

0800ac48 <VL53L1_check_ll_driver_rd_state>:
	device_gph_id = (psys_results->result__interrupt_status &
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 800ac48:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
 800ac4c:	f013 0320 	ands.w	r3, r3, #32
 800ac50:	d01d      	beq.n	800ac8e <VL53L1_check_ll_driver_rd_state+0x46>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 800ac52:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
			psys_results->result__range_status &
 800ac56:	f890 21cf 	ldrb.w	r2, [r0, #463]	; 0x1cf
		if (pstate->rd_device_state ==
 800ac5a:	2b06      	cmp	r3, #6
 800ac5c:	d019      	beq.n	800ac92 <VL53L1_check_ll_driver_rd_state+0x4a>
{
 800ac5e:	b410      	push	{r4}
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800ac60:	f890 31ce 	ldrb.w	r3, [r0, #462]	; 0x1ce
			if (device_range_status !=
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 800ac64:	f890 41d1 	ldrb.w	r4, [r0, #465]	; 0x1d1
 800ac68:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 800ac6c:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800ac70:	111b      	asrs	r3, r3, #4
			if (pstate->rd_stream_count != device_stream_count) {
 800ac72:	428c      	cmp	r4, r1
		if (pstate->rd_gph_id != device_gph_id) {
 800ac74:	f003 0302 	and.w	r3, r3, #2
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800ac78:	bf14      	ite	ne
 800ac7a:	f06f 0011 	mvnne.w	r0, #17
 800ac7e:	2000      	moveq	r0, #0
		if (pstate->rd_gph_id != device_gph_id) {
 800ac80:	429a      	cmp	r2, r3
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800ac82:	bf18      	it	ne
 800ac84:	f06f 0012 	mvnne.w	r0, #18
	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
}
 800ac88:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac8c:	4770      	bx	lr
	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800ac8e:	4618      	mov	r0, r3
 800ac90:	4770      	bx	lr
			if (device_range_status !=
 800ac92:	f002 021f 	and.w	r2, r2, #31
 800ac96:	2a12      	cmp	r2, #18
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 800ac98:	bf0c      	ite	eq
 800ac9a:	2000      	moveq	r0, #0
 800ac9c:	f06f 0010 	mvnne.w	r0, #16
 800aca0:	4770      	bx	lr
 800aca2:	bf00      	nop

0800aca4 <VL53L1_update_ll_driver_cfg_state>:
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 800aca4:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
 800aca8:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800acac:	d01c      	beq.n	800ace8 <VL53L1_update_ll_driver_cfg_state+0x44>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 800acae:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800acb2:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 800acb6:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
		if (pstate->cfg_stream_count == 0xFF) {
 800acba:	2bff      	cmp	r3, #255	; 0xff
			pstate->cfg_stream_count++;
 800acbc:	bf1a      	itte	ne
 800acbe:	3301      	addne	r3, #1
 800acc0:	b2db      	uxtbne	r3, r3
			pstate->cfg_stream_count = 0x80;
 800acc2:	2380      	moveq	r3, #128	; 0x80
 800acc4:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
		switch (pstate->cfg_device_state) {
 800acc8:	2903      	cmp	r1, #3
		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800acca:	f082 0302 	eor.w	r3, r2, #2
 800acce:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
		switch (pstate->cfg_device_state) {
 800acd2:	d00d      	beq.n	800acf0 <VL53L1_update_ll_driver_cfg_state+0x4c>
 800acd4:	2904      	cmp	r1, #4
 800acd6:	d107      	bne.n	800ace8 <VL53L1_update_ll_driver_cfg_state+0x44>
			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
		break;

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 800acd8:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800acdc:	f083 0301 	eor.w	r3, r3, #1
 800ace0:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
#endif

	LOG_FUNCTION_END(status);

	return status;
}
 800ace4:	2000      	movs	r0, #0
 800ace6:	4770      	bx	lr
			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800ace8:	4b08      	ldr	r3, [pc, #32]	; (800ad0c <VL53L1_update_ll_driver_cfg_state+0x68>)
 800acea:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 800acec:	2000      	movs	r0, #0
 800acee:	4770      	bx	lr
			pstate->cfg_timing_status ^= 0x01;
 800acf0:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
			pstate->cfg_stream_count = 1;
 800acf4:	2101      	movs	r1, #1
			pstate->cfg_timing_status ^= 0x01;
 800acf6:	404b      	eors	r3, r1
			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 800acf8:	2204      	movs	r2, #4
			pstate->cfg_timing_status ^= 0x01;
 800acfa:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
			pstate->cfg_stream_count = 1;
 800acfe:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 800ad02:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
}
 800ad06:	2000      	movs	r0, #0
 800ad08:	4770      	bx	lr
 800ad0a:	bf00      	nop
 800ad0c:	00020003 	.word	0x00020003

0800ad10 <VL53L1_copy_rtn_good_spads_to_buffer>:
{
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800ad10:	7c03      	ldrb	r3, [r0, #16]
 800ad12:	700b      	strb	r3, [r1, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800ad14:	7c43      	ldrb	r3, [r0, #17]
 800ad16:	704b      	strb	r3, [r1, #1]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800ad18:	7c83      	ldrb	r3, [r0, #18]
 800ad1a:	708b      	strb	r3, [r1, #2]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800ad1c:	7cc3      	ldrb	r3, [r0, #19]
 800ad1e:	70cb      	strb	r3, [r1, #3]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800ad20:	7d03      	ldrb	r3, [r0, #20]
 800ad22:	710b      	strb	r3, [r1, #4]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800ad24:	7d43      	ldrb	r3, [r0, #21]
 800ad26:	714b      	strb	r3, [r1, #5]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800ad28:	7d83      	ldrb	r3, [r0, #22]
 800ad2a:	718b      	strb	r3, [r1, #6]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800ad2c:	7dc3      	ldrb	r3, [r0, #23]
 800ad2e:	71cb      	strb	r3, [r1, #7]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800ad30:	7e03      	ldrb	r3, [r0, #24]
 800ad32:	720b      	strb	r3, [r1, #8]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800ad34:	7e43      	ldrb	r3, [r0, #25]
 800ad36:	724b      	strb	r3, [r1, #9]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800ad38:	7e83      	ldrb	r3, [r0, #26]
 800ad3a:	728b      	strb	r3, [r1, #10]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800ad3c:	7ec3      	ldrb	r3, [r0, #27]
 800ad3e:	72cb      	strb	r3, [r1, #11]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800ad40:	7f03      	ldrb	r3, [r0, #28]
 800ad42:	730b      	strb	r3, [r1, #12]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800ad44:	7f43      	ldrb	r3, [r0, #29]
 800ad46:	734b      	strb	r3, [r1, #13]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800ad48:	7f83      	ldrb	r3, [r0, #30]
 800ad4a:	738b      	strb	r3, [r1, #14]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800ad4c:	7fc3      	ldrb	r3, [r0, #31]
 800ad4e:	73cb      	strb	r3, [r1, #15]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800ad50:	f890 3020 	ldrb.w	r3, [r0, #32]
 800ad54:	740b      	strb	r3, [r1, #16]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800ad56:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800ad5a:	744b      	strb	r3, [r1, #17]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800ad5c:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800ad60:	748b      	strb	r3, [r1, #18]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800ad62:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 800ad66:	74cb      	strb	r3, [r1, #19]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800ad68:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800ad6c:	750b      	strb	r3, [r1, #20]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800ad6e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800ad72:	754b      	strb	r3, [r1, #21]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800ad74:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 800ad78:	758b      	strb	r3, [r1, #22]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800ad7a:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 800ad7e:	75cb      	strb	r3, [r1, #23]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800ad80:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800ad84:	760b      	strb	r3, [r1, #24]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800ad86:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800ad8a:	764b      	strb	r3, [r1, #25]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800ad8c:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 800ad90:	768b      	strb	r3, [r1, #26]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800ad92:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 800ad96:	76cb      	strb	r3, [r1, #27]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800ad98:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800ad9c:	770b      	strb	r3, [r1, #28]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800ad9e:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800ada2:	774b      	strb	r3, [r1, #29]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800ada4:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 800ada8:	778b      	strb	r3, [r1, #30]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800adaa:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800adae:	77cb      	strb	r3, [r1, #31]
 800adb0:	4770      	bx	lr
 800adb2:	bf00      	nop

0800adb4 <VL53L1_i2c_encode_uint16_t>:
	uint16_t   i    = 0;
	uint16_t   data = 0;

	data =  ip_value;

	for (i = 0; i < count ; i++) {
 800adb4:	b151      	cbz	r1, 800adcc <VL53L1_i2c_encode_uint16_t+0x18>
 800adb6:	1e4b      	subs	r3, r1, #1
 800adb8:	0c1b      	lsrs	r3, r3, #16
 800adba:	041b      	lsls	r3, r3, #16
 800adbc:	4413      	add	r3, r2
 800adbe:	440a      	add	r2, r1
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800adc0:	f802 0d01 	strb.w	r0, [r2, #-1]!
	for (i = 0; i < count ; i++) {
 800adc4:	4293      	cmp	r3, r2
		data = data >> 8;
 800adc6:	ea4f 2010 	mov.w	r0, r0, lsr #8
	for (i = 0; i < count ; i++) {
 800adca:	d1f9      	bne.n	800adc0 <VL53L1_i2c_encode_uint16_t+0xc>
 800adcc:	4770      	bx	lr
 800adce:	bf00      	nop

0800add0 <VL53L1_i2c_decode_uint16_t>:
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;

	while (count-- > 0) {
 800add0:	1e42      	subs	r2, r0, #1
 800add2:	b292      	uxth	r2, r2
 800add4:	b148      	cbz	r0, 800adea <VL53L1_i2c_decode_uint16_t+0x1a>
 800add6:	440a      	add	r2, r1
 800add8:	2000      	movs	r0, #0
 800adda:	3901      	subs	r1, #1
		value = (value << 8) | (uint16_t)*pbuffer++;
 800addc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ade0:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
	while (count-- > 0) {
 800ade4:	428a      	cmp	r2, r1
		value = (value << 8) | (uint16_t)*pbuffer++;
 800ade6:	b280      	uxth	r0, r0
	while (count-- > 0) {
 800ade8:	d1f8      	bne.n	800addc <VL53L1_i2c_decode_uint16_t+0xc>
	}

	return value;
}
 800adea:	4770      	bx	lr

0800adec <VL53L1_i2c_encode_int16_t>:
	uint16_t   i    = 0;
	int16_t    data = 0;

	data =  ip_value;

	for (i = 0; i < count ; i++) {
 800adec:	b151      	cbz	r1, 800ae04 <VL53L1_i2c_encode_int16_t+0x18>
 800adee:	1e4b      	subs	r3, r1, #1
 800adf0:	0c1b      	lsrs	r3, r3, #16
 800adf2:	041b      	lsls	r3, r3, #16
 800adf4:	4413      	add	r3, r2
 800adf6:	440a      	add	r2, r1
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800adf8:	f802 0d01 	strb.w	r0, [r2, #-1]!
	for (i = 0; i < count ; i++) {
 800adfc:	4293      	cmp	r3, r2
		data = data >> 8;
 800adfe:	ea4f 2020 	mov.w	r0, r0, asr #8
	for (i = 0; i < count ; i++) {
 800ae02:	d1f9      	bne.n	800adf8 <VL53L1_i2c_encode_int16_t+0xc>
 800ae04:	4770      	bx	lr
 800ae06:	bf00      	nop

0800ae08 <VL53L1_i2c_decode_int16_t>:
	 */

	int16_t    value = 0x00;

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800ae08:	f991 3000 	ldrsb.w	r3, [r1]
		value = 0xFFFF;
	}

	while (count-- > 0) {
 800ae0c:	1e42      	subs	r2, r0, #1
	if (*pbuffer >= 0x80) {
 800ae0e:	17db      	asrs	r3, r3, #31
	while (count-- > 0) {
 800ae10:	b292      	uxth	r2, r2
 800ae12:	b140      	cbz	r0, 800ae26 <VL53L1_i2c_decode_int16_t+0x1e>
 800ae14:	1888      	adds	r0, r1, r2
 800ae16:	3901      	subs	r1, #1
		value = (value << 8) | (int16_t)*pbuffer++;
 800ae18:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ae1c:	b25b      	sxtb	r3, r3
	while (count-- > 0) {
 800ae1e:	4288      	cmp	r0, r1
		value = (value << 8) | (int16_t)*pbuffer++;
 800ae20:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	while (count-- > 0) {
 800ae24:	d1f8      	bne.n	800ae18 <VL53L1_i2c_decode_int16_t+0x10>
	}

	return value;
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	4770      	bx	lr
 800ae2a:	bf00      	nop

0800ae2c <VL53L1_i2c_encode_uint32_t>:
	uint16_t   i    = 0;
	uint32_t   data = 0;

	data =  ip_value;

	for (i = 0; i < count ; i++) {
 800ae2c:	b151      	cbz	r1, 800ae44 <VL53L1_i2c_encode_uint32_t+0x18>
 800ae2e:	1e4b      	subs	r3, r1, #1
 800ae30:	0c1b      	lsrs	r3, r3, #16
 800ae32:	041b      	lsls	r3, r3, #16
 800ae34:	4413      	add	r3, r2
 800ae36:	440a      	add	r2, r1
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800ae38:	f802 0d01 	strb.w	r0, [r2, #-1]!
	for (i = 0; i < count ; i++) {
 800ae3c:	4293      	cmp	r3, r2
		data = data >> 8;
 800ae3e:	ea4f 2010 	mov.w	r0, r0, lsr #8
	for (i = 0; i < count ; i++) {
 800ae42:	d1f9      	bne.n	800ae38 <VL53L1_i2c_encode_uint32_t+0xc>
 800ae44:	4770      	bx	lr
 800ae46:	bf00      	nop

0800ae48 <VL53L1_i2c_decode_uint32_t>:
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;

	while (count-- > 0) {
 800ae48:	1e42      	subs	r2, r0, #1
 800ae4a:	b292      	uxth	r2, r2
 800ae4c:	b140      	cbz	r0, 800ae60 <VL53L1_i2c_decode_uint32_t+0x18>
 800ae4e:	440a      	add	r2, r1
 800ae50:	2000      	movs	r0, #0
 800ae52:	3901      	subs	r1, #1
		value = (value << 8) | (uint32_t)*pbuffer++;
 800ae54:	f811 3f01 	ldrb.w	r3, [r1, #1]!
	while (count-- > 0) {
 800ae58:	4291      	cmp	r1, r2
		value = (value << 8) | (uint32_t)*pbuffer++;
 800ae5a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
	while (count-- > 0) {
 800ae5e:	d1f9      	bne.n	800ae54 <VL53L1_i2c_decode_uint32_t+0xc>
	}

	return value;
}
 800ae60:	4770      	bx	lr
 800ae62:	bf00      	nop

0800ae64 <VL53L1_i2c_decode_int32_t>:
	 */

	int32_t    value = 0x00;

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800ae64:	f991 3000 	ldrsb.w	r3, [r1]
		value = 0xFFFFFFFF;
	}

	while (count-- > 0) {
 800ae68:	1e42      	subs	r2, r0, #1
	if (*pbuffer >= 0x80) {
 800ae6a:	17db      	asrs	r3, r3, #31
	while (count-- > 0) {
 800ae6c:	b292      	uxth	r2, r2
 800ae6e:	b138      	cbz	r0, 800ae80 <VL53L1_i2c_decode_int32_t+0x1c>
 800ae70:	1888      	adds	r0, r1, r2
 800ae72:	3901      	subs	r1, #1
		value = (value << 8) | (int32_t)*pbuffer++;
 800ae74:	f811 2f01 	ldrb.w	r2, [r1, #1]!
	while (count-- > 0) {
 800ae78:	4288      	cmp	r0, r1
		value = (value << 8) | (int32_t)*pbuffer++;
 800ae7a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	while (count-- > 0) {
 800ae7e:	d1f9      	bne.n	800ae74 <VL53L1_i2c_decode_int32_t+0x10>
	}

	return value;
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	4770      	bx	lr

0800ae84 <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 800ae84:	b538      	push	{r3, r4, r5, lr}
 800ae86:	460d      	mov	r5, r1

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800ae88:	f000 f9b4 	bl	800b1f4 <VL53L1_calc_pll_period_us>
 800ae8c:	4604      	mov	r4, r0

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 800ae8e:	4628      	mov	r0, r5
 800ae90:	f000 f9b6 	bl	800b200 <VL53L1_decode_vcsel_period>
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 800ae94:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 800ae98:	0224      	lsls	r4, r4, #8
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800ae9a:	09a4      	lsrs	r4, r4, #6

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 800ae9c:	fb04 f000 	mul.w	r0, r4, r0
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
}
 800aea0:	0980      	lsrs	r0, r0, #6
 800aea2:	bd38      	pop	{r3, r4, r5, pc}

0800aea4 <VL53L1_calc_range_ignore_threshold>:

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);

	if (x_gradient < 0) {
 800aea4:	2900      	cmp	r1, #0
		x_gradient_int = x_gradient * -1;
 800aea6:	bfba      	itte	lt
 800aea8:	4249      	neglt	r1, r1
 800aeaa:	b209      	sxthlt	r1, r1
 800aeac:	2100      	movge	r1, #0
	}

	if (y_gradient < 0) {
 800aeae:	2a00      	cmp	r2, #0
		y_gradient_int = y_gradient * -1;
 800aeb0:	bfb8      	it	lt
 800aeb2:	4252      	neglt	r2, r2
{
 800aeb4:	b510      	push	{r4, lr}
 800aeb6:	bfb4      	ite	lt
 800aeb8:	b212      	sxthlt	r2, r2
 800aeba:	2200      	movge	r2, #0
	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800aebc:	4c0f      	ldr	r4, [pc, #60]	; (800aefc <VL53L1_calc_range_ignore_threshold+0x58>)
 800aebe:	0100      	lsls	r0, r0, #4

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 800aec0:	440a      	add	r2, r1

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800aec2:	490e      	ldr	r1, [pc, #56]	; (800aefc <VL53L1_calc_range_ignore_threshold+0x58>)
	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800aec4:	fb84 e400 	smull	lr, r4, r4, r0
	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 800aec8:	0152      	lsls	r2, r2, #5
	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800aeca:	17c0      	asrs	r0, r0, #31
 800aecc:	ebc0 10a4 	rsb	r0, r0, r4, asr #6
	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800aed0:	fb81 4102 	smull	r4, r1, r1, r2
 800aed4:	17d2      	asrs	r2, r2, #31
 800aed6:	ebc2 12a1 	rsb	r2, r2, r1, asr #6

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800aeda:	4402      	add	r2, r0

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800aedc:	fb02 f303 	mul.w	r3, r2, r3

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800aee0:	f113 0010 	adds.w	r0, r3, #16
 800aee4:	bf48      	it	mi
 800aee6:	f103 002f 	addmi.w	r0, r3, #47	; 0x2f
 800aeea:	1140      	asrs	r0, r0, #5
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800aeec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aef0:	4298      	cmp	r0, r3
 800aef2:	bfa8      	it	ge
 800aef4:	4618      	movge	r0, r3
}
 800aef6:	b280      	uxth	r0, r0
 800aef8:	bd10      	pop	{r4, pc}
 800aefa:	bf00      	nop
 800aefc:	10624dd3 	.word	0x10624dd3

0800af00 <VL53L1_calc_timeout_us>:
	uint64_t tmp            = 0;

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
	tmp += 0x00800;
 800af00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af04:	2300      	movs	r3, #0
 800af06:	fbe1 2300 	umlal	r2, r3, r1, r0
	tmp  = tmp >> 12;
 800af0a:	0b10      	lsrs	r0, r2, #12
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
}
 800af0c:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800af10:	4770      	bx	lr
 800af12:	bf00      	nop

0800af14 <VL53L1_calc_decoded_timeout_us>:
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800af14:	b2c3      	uxtb	r3, r0
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800af16:	0a00      	lsrs	r0, r0, #8
 800af18:	fa03 f000 	lsl.w	r0, r3, r0
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800af1c:	3001      	adds	r0, #1
	tmp += 0x00800;
 800af1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af22:	2300      	movs	r3, #0
 800af24:	fbe0 2301 	umlal	r2, r3, r0, r1
	tmp  = tmp >> 12;
 800af28:	0b10      	lsrs	r0, r2, #12
}
 800af2a:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800af2e:	4770      	bx	lr

0800af30 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800af30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af34:	9e09      	ldr	r6, [sp, #36]	; 0x24
	uint32_t timeout_mclks      = 0;
	uint16_t timeout_encoded    = 0;

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800af36:	2b00      	cmp	r3, #0
 800af38:	f000 80aa 	beq.w	800b090 <VL53L1_calc_timeout_register_values+0x160>
 800af3c:	4681      	mov	r9, r0
	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800af3e:	4618      	mov	r0, r3
 800af40:	4698      	mov	r8, r3
 800af42:	4617      	mov	r7, r2
 800af44:	460c      	mov	r4, r1
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800af46:	f896 a006 	ldrb.w	sl, [r6, #6]
	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800af4a:	f000 f953 	bl	800b1f4 <VL53L1_calc_pll_period_us>
 800af4e:	4605      	mov	r5, r0
	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 800af50:	4650      	mov	r0, sl
 800af52:	f000 f955 	bl	800b200 <VL53L1_decode_vcsel_period>
	macro_period_us =
 800af56:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 800af5a:	022d      	lsls	r5, r5, #8
	macro_period_us = macro_period_us >> 6;
 800af5c:	09ad      	lsrs	r5, r5, #6
	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 800af5e:	fb05 f000 	mul.w	r0, r5, r0
			((timeout_us << 12) + (macro_period_us>>1)) /
 800af62:	09c5      	lsrs	r5, r0, #7
 800af64:	eb05 3309 	add.w	r3, r5, r9, lsl #12
	macro_period_us = macro_period_us >> 6;
 800af68:	0980      	lsrs	r0, r0, #6
		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
			timeout_mclks = 0xFF;

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800af6a:	9a08      	ldr	r2, [sp, #32]
	timeout_mclks   =
 800af6c:	fbb3 f3f0 	udiv	r3, r3, r0
				(uint8_t)timeout_mclks;
 800af70:	2bff      	cmp	r3, #255	; 0xff
 800af72:	bf28      	it	cs
 800af74:	23ff      	movcs	r3, #255	; 0xff
			((timeout_us << 12) + (macro_period_us>>1)) /
 800af76:	0324      	lsls	r4, r4, #12
				(uint8_t)timeout_mclks;
 800af78:	71d3      	strb	r3, [r2, #7]
			((timeout_us << 12) + (macro_period_us>>1)) /
 800af7a:	192b      	adds	r3, r5, r4
	timeout_mclks   =
 800af7c:	fbb3 f3f0 	udiv	r3, r3, r0
	if (timeout_mclks > 0) {
 800af80:	bb7b      	cbnz	r3, 800afe2 <VL53L1_calc_timeout_register_values+0xb2>
 800af82:	461a      	mov	r2, r3
			((timeout_us << 12) + (macro_period_us>>1)) /
 800af84:	033f      	lsls	r7, r7, #12
 800af86:	443d      	add	r5, r7
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
 800af88:	7032      	strb	r2, [r6, #0]
	timeout_mclks   =
 800af8a:	fbb5 f5f0 	udiv	r5, r5, r0
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
		ptiming->mm_config__timeout_macrop_a_lo =
 800af8e:	7073      	strb	r3, [r6, #1]
	if (timeout_mclks > 0) {
 800af90:	2d00      	cmp	r5, #0
 800af92:	d140      	bne.n	800b016 <VL53L1_calc_timeout_register_values+0xe6>
 800af94:	462b      	mov	r3, r5
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
 800af96:	7133      	strb	r3, [r6, #4]
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
		ptiming->range_config__timeout_macrop_a_lo =
 800af98:	7175      	strb	r5, [r6, #5]
	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800af9a:	4640      	mov	r0, r8
				(uint8_t) (timeout_encoded & 0x00FF);

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800af9c:	f896 8009 	ldrb.w	r8, [r6, #9]
	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800afa0:	f000 f928 	bl	800b1f4 <VL53L1_calc_pll_period_us>
 800afa4:	4605      	mov	r5, r0
	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 800afa6:	4640      	mov	r0, r8
 800afa8:	f000 f92a 	bl	800b200 <VL53L1_decode_vcsel_period>
	macro_period_us =
 800afac:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 800afb0:	022d      	lsls	r5, r5, #8
	macro_period_us = macro_period_us >> 6;
 800afb2:	09ad      	lsrs	r5, r5, #6
	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 800afb4:	fb05 f000 	mul.w	r0, r5, r0
			((timeout_us << 12) + (macro_period_us>>1)) /
 800afb8:	09c2      	lsrs	r2, r0, #7
 800afba:	4414      	add	r4, r2
	macro_period_us = macro_period_us >> 6;
 800afbc:	0980      	lsrs	r0, r0, #6
	timeout_mclks   =
 800afbe:	fbb4 f4f0 	udiv	r4, r4, r0
	if (timeout_mclks > 0) {
 800afc2:	2c00      	cmp	r4, #0
 800afc4:	d151      	bne.n	800b06a <VL53L1_calc_timeout_register_values+0x13a>
 800afc6:	4623      	mov	r3, r4
			((timeout_us << 12) + (macro_period_us>>1)) /
 800afc8:	4417      	add	r7, r2
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
 800afca:	70b3      	strb	r3, [r6, #2]
	timeout_mclks   =
 800afcc:	fbb7 f7f0 	udiv	r7, r7, r0
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
		ptiming->mm_config__timeout_macrop_b_lo =
 800afd0:	70f4      	strb	r4, [r6, #3]
	if (timeout_mclks > 0) {
 800afd2:	2f00      	cmp	r7, #0
 800afd4:	d132      	bne.n	800b03c <VL53L1_calc_timeout_register_values+0x10c>
 800afd6:	463b      	mov	r3, r7
		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
 800afd8:	71f3      	strb	r3, [r6, #7]
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
		ptiming->range_config__timeout_macrop_b_lo =
 800afda:	7237      	strb	r7, [r6, #8]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800afdc:	2000      	movs	r0, #0
 800afde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ls_byte = timeout_mclks - 1;
 800afe2:	1e5a      	subs	r2, r3, #1
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800afe4:	f032 03ff 	bics.w	r3, r2, #255	; 0xff
 800afe8:	d009      	beq.n	800affe <VL53L1_calc_timeout_register_values+0xce>
 800afea:	2300      	movs	r3, #0
			ls_byte = ls_byte >> 1;
 800afec:	0852      	lsrs	r2, r2, #1
			ms_byte++;
 800afee:	3301      	adds	r3, #1
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800aff0:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
			ms_byte++;
 800aff4:	b29b      	uxth	r3, r3
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800aff6:	2900      	cmp	r1, #0
 800aff8:	d1f8      	bne.n	800afec <VL53L1_calc_timeout_register_values+0xbc>
 800affa:	021b      	lsls	r3, r3, #8
 800affc:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800affe:	4413      	add	r3, r2
 800b000:	b29b      	uxth	r3, r3
 800b002:	0a1a      	lsrs	r2, r3, #8
			((timeout_us << 12) + (macro_period_us>>1)) /
 800b004:	033f      	lsls	r7, r7, #12
 800b006:	b2db      	uxtb	r3, r3
 800b008:	443d      	add	r5, r7
		ptiming->mm_config__timeout_macrop_a_hi =
 800b00a:	7032      	strb	r2, [r6, #0]
	timeout_mclks   =
 800b00c:	fbb5 f5f0 	udiv	r5, r5, r0
		ptiming->mm_config__timeout_macrop_a_lo =
 800b010:	7073      	strb	r3, [r6, #1]
	if (timeout_mclks > 0) {
 800b012:	2d00      	cmp	r5, #0
 800b014:	d0be      	beq.n	800af94 <VL53L1_calc_timeout_register_values+0x64>
		ls_byte = timeout_mclks - 1;
 800b016:	1e68      	subs	r0, r5, #1
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b018:	f030 05ff 	bics.w	r5, r0, #255	; 0xff
 800b01c:	d009      	beq.n	800b032 <VL53L1_calc_timeout_register_values+0x102>
 800b01e:	2100      	movs	r1, #0
			ls_byte = ls_byte >> 1;
 800b020:	0840      	lsrs	r0, r0, #1
			ms_byte++;
 800b022:	3101      	adds	r1, #1
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b024:	f020 03ff 	bic.w	r3, r0, #255	; 0xff
			ms_byte++;
 800b028:	b289      	uxth	r1, r1
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d1f8      	bne.n	800b020 <VL53L1_calc_timeout_register_values+0xf0>
 800b02e:	020d      	lsls	r5, r1, #8
 800b030:	b2ad      	uxth	r5, r5
		encoded_timeout = (ms_byte << 8)
 800b032:	4405      	add	r5, r0
 800b034:	b2ad      	uxth	r5, r5
 800b036:	0a2b      	lsrs	r3, r5, #8
 800b038:	b2ed      	uxtb	r5, r5
 800b03a:	e7ac      	b.n	800af96 <VL53L1_calc_timeout_register_values+0x66>
		ls_byte = timeout_mclks - 1;
 800b03c:	1e78      	subs	r0, r7, #1
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b03e:	f030 07ff 	bics.w	r7, r0, #255	; 0xff
 800b042:	d009      	beq.n	800b058 <VL53L1_calc_timeout_register_values+0x128>
 800b044:	2300      	movs	r3, #0
			ls_byte = ls_byte >> 1;
 800b046:	0840      	lsrs	r0, r0, #1
			ms_byte++;
 800b048:	3301      	adds	r3, #1
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b04a:	f020 02ff 	bic.w	r2, r0, #255	; 0xff
			ms_byte++;
 800b04e:	b29b      	uxth	r3, r3
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b050:	2a00      	cmp	r2, #0
 800b052:	d1f8      	bne.n	800b046 <VL53L1_calc_timeout_register_values+0x116>
 800b054:	021f      	lsls	r7, r3, #8
 800b056:	b2bf      	uxth	r7, r7
		encoded_timeout = (ms_byte << 8)
 800b058:	4407      	add	r7, r0
 800b05a:	b2bf      	uxth	r7, r7
 800b05c:	0a3b      	lsrs	r3, r7, #8
 800b05e:	b2ff      	uxtb	r7, r7
		ptiming->range_config__timeout_macrop_b_hi =
 800b060:	71f3      	strb	r3, [r6, #7]
		ptiming->range_config__timeout_macrop_b_lo =
 800b062:	7237      	strb	r7, [r6, #8]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b064:	2000      	movs	r0, #0
 800b066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ls_byte = timeout_mclks - 1;
 800b06a:	1e61      	subs	r1, r4, #1
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b06c:	f031 04ff 	bics.w	r4, r1, #255	; 0xff
 800b070:	d009      	beq.n	800b086 <VL53L1_calc_timeout_register_values+0x156>
 800b072:	2300      	movs	r3, #0
			ls_byte = ls_byte >> 1;
 800b074:	0849      	lsrs	r1, r1, #1
			ms_byte++;
 800b076:	3301      	adds	r3, #1
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b078:	f021 04ff 	bic.w	r4, r1, #255	; 0xff
			ms_byte++;
 800b07c:	b29b      	uxth	r3, r3
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b07e:	2c00      	cmp	r4, #0
 800b080:	d1f8      	bne.n	800b074 <VL53L1_calc_timeout_register_values+0x144>
 800b082:	021c      	lsls	r4, r3, #8
 800b084:	b2a4      	uxth	r4, r4
		encoded_timeout = (ms_byte << 8)
 800b086:	440c      	add	r4, r1
 800b088:	b2a4      	uxth	r4, r4
 800b08a:	0a23      	lsrs	r3, r4, #8
 800b08c:	b2e4      	uxtb	r4, r4
 800b08e:	e79b      	b.n	800afc8 <VL53L1_calc_timeout_register_values+0x98>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800b090:	f06f 000e 	mvn.w	r0, #14

	LOG_FUNCTION_END(0);

	return status;

}
 800b094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b098 <VL53L1_encode_row_col>:
{
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 800b098:	2807      	cmp	r0, #7
		*pspad_number = 128 + (col << 3) + (15-row);
 800b09a:	bf8b      	itete	hi
 800b09c:	ebc0 00c1 	rsbhi	r0, r0, r1, lsl #3
	} else {
		*pspad_number = ((15-col) << 3) + row;
 800b0a0:	f1c1 010f 	rsbls	r1, r1, #15
		*pspad_number = 128 + (col << 3) + (15-row);
 800b0a4:	3871      	subhi	r0, #113	; 0x71
		*pspad_number = ((15-col) << 3) + row;
 800b0a6:	eb00 00c1 	addls.w	r0, r0, r1, lsl #3
 800b0aa:	b2c0      	uxtb	r0, r0
 800b0ac:	7010      	strb	r0, [r2, #0]
 800b0ae:	4770      	bx	lr

0800b0b0 <VL53L1_decode_zone_size>:
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 800b0b0:	0903      	lsrs	r3, r0, #4
	*pwidth  = encoded_xy_size & 0x0F;
 800b0b2:	f000 000f 	and.w	r0, r0, #15
	*pheight = encoded_xy_size >> 4;
 800b0b6:	7013      	strb	r3, [r2, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800b0b8:	7008      	strb	r0, [r1, #0]
 800b0ba:	4770      	bx	lr

0800b0bc <VL53L1_encode_zone_size>:
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 800b0bc:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800b0c0:	7011      	strb	r1, [r2, #0]
 800b0c2:	4770      	bx	lr

0800b0c4 <VL53L1_low_power_auto_data_init>:

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800b0c4:	2300      	movs	r3, #0
	pdev->low_power_auto_data.vhv_loop_bound =
 800b0c6:	2203      	movs	r2, #3
 800b0c8:	f880 22e4 	strb.w	r2, [r0, #740]	; 0x2e4
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800b0cc:	f880 32e5 	strb.w	r3, [r0, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800b0d0:	f880 32e6 	strb.w	r3, [r0, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800b0d4:	f880 32e7 	strb.w	r3, [r0, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800b0d8:	f880 32e8 	strb.w	r3, [r0, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800b0dc:	f880 32e9 	strb.w	r3, [r0, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800b0e0:	f880 32ea 	strb.w	r3, [r0, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800b0e4:	f8c0 32ec 	str.w	r3, [r0, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 800b0e8:	f8a0 32f0 	strh.w	r3, [r0, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	4770      	bx	lr

0800b0f0 <VL53L1_low_power_auto_data_stop_range>:
	LOG_FUNCTION_START("");

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800b0f0:	22ff      	movs	r2, #255	; 0xff
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
	pdev->low_power_auto_data.dss__required_spads = 0;

	/* restore vhv configs */
	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800b0f2:	f890 12e8 	ldrb.w	r1, [r0, #744]	; 0x2e8
	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800b0f6:	f880 22e6 	strb.w	r2, [r0, #742]	; 0x2e6
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800b0fa:	2200      	movs	r2, #0
{
 800b0fc:	4603      	mov	r3, r0
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800b0fe:	f880 22ea 	strb.w	r2, [r0, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800b102:	f8c0 22ec 	str.w	r2, [r0, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 800b106:	f8a0 22f0 	strh.w	r2, [r0, #752]	; 0x2f0
	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800b10a:	b109      	cbz	r1, 800b110 <VL53L1_low_power_auto_data_stop_range+0x20>
		pdev->stat_nvm.vhv_config__init =
 800b10c:	f880 1163 	strb.w	r1, [r0, #355]	; 0x163
			pdev->low_power_auto_data.saved_vhv_init;
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800b110:	f893 22e9 	ldrb.w	r2, [r3, #745]	; 0x2e9
 800b114:	b10a      	cbz	r2, 800b11a <VL53L1_low_power_auto_data_stop_range+0x2a>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800b116:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
			pdev->low_power_auto_data.saved_vhv_timeout;

	/* remove phasecal override */
	pdev->gen_cfg.phasecal_config__override = 0x00;
 800b11a:	2000      	movs	r0, #0
 800b11c:	f883 018d 	strb.w	r0, [r3, #397]	; 0x18d

	LOG_FUNCTION_END(status);

	return status;
}
 800b120:	4770      	bx	lr
 800b122:	bf00      	nop

0800b124 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 800b124:	b4f0      	push	{r4, r5, r6, r7}
 800b126:	4603      	mov	r3, r0
	VL53L1_Error  status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 800b128:	2701      	movs	r7, #1

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 800b12a:	2000      	movs	r0, #0

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 800b12c:	268b      	movs	r6, #139	; 0x8b
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	/* Set DSS to manual/expected SPADs */
	pgeneral->dss_config__manual_effective_spads_select = 200 << 8;
	pgeneral->dss_config__roi_mode_control =
 800b12e:	2402      	movs	r4, #2
	plpadata->is_low_power_auto_mode = 1;
 800b130:	7057      	strb	r7, [r2, #1]
	plpadata->low_power_auto_range_count = 0;
 800b132:	7090      	strb	r0, [r2, #2]
	pgeneral->dss_config__manual_effective_spads_select = 200 << 8;
 800b134:	f44f 4548 	mov.w	r5, #51200	; 0xc800
	pdynamic->system__sequence_config = \
 800b138:	744e      	strb	r6, [r1, #17]
	pgeneral->dss_config__roi_mode_control =
 800b13a:	729c      	strb	r4, [r3, #10]
	pgeneral->dss_config__manual_effective_spads_select = 200 << 8;
 800b13c:	821d      	strh	r5, [r3, #16]
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

	LOG_FUNCTION_END(status);

	return status;
}
 800b13e:	bcf0      	pop	{r4, r5, r6, r7}
 800b140:	4770      	bx	lr
 800b142:	bf00      	nop

0800b144 <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800b144:	b470      	push	{r4, r5, r6}

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800b146:	f890 4160 	ldrb.w	r4, [r0, #352]	; 0x160
		pdev->stat_nvm.vhv_config__init;
 800b14a:	f890 3163 	ldrb.w	r3, [r0, #355]	; 0x163
	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800b14e:	f890 62e4 	ldrb.w	r6, [r0, #740]	; 0x2e4
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800b152:	f890 12ae 	ldrb.w	r1, [r0, #686]	; 0x2ae
	pdev->low_power_auto_data.saved_vhv_init =
 800b156:	f880 32e8 	strb.w	r3, [r0, #744]	; 0x2e8
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800b15a:	f004 0203 	and.w	r2, r4, #3
	pdev->gen_cfg.phasecal_config__override = 0x01;
 800b15e:	2501      	movs	r5, #1
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800b160:	eb02 0286 	add.w	r2, r2, r6, lsl #2
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800b164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b168:	f880 3163 	strb.w	r3, [r0, #355]	; 0x163
	pdev->low_power_auto_data.saved_vhv_timeout =
 800b16c:	f880 42e9 	strb.w	r4, [r0, #745]	; 0x2e9
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800b170:	f880 2160 	strb.w	r2, [r0, #352]	; 0x160
	pdev->gen_cfg.phasecal_config__override = 0x01;
 800b174:	f880 518d 	strb.w	r5, [r0, #397]	; 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
 800b178:	f880 12ea 	strb.w	r1, [r0, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 800b17c:	f880 1187 	strb.w	r1, [r0, #391]	; 0x187
		pdev->low_power_auto_data.first_run_phasecal_result;

	LOG_FUNCTION_END(status);

	return status;
}
 800b180:	bc70      	pop	{r4, r5, r6}
 800b182:	2000      	movs	r0, #0
 800b184:	4770      	bx	lr
 800b186:	bf00      	nop

0800b188 <VL53L1_low_power_auto_update_DSS>:
	/* shift up to take advantage of 32 bits */
	/* 9.23 format */
	utemp32a = utemp32a << 16;

	/* check SPAD count */
	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 800b188:	f8b0 21d2 	ldrh.w	r2, [r0, #466]	; 0x1d2
{
 800b18c:	b410      	push	{r4}
	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 800b18e:	b17a      	cbz	r2, 800b1b0 <VL53L1_low_power_auto_update_DSS+0x28>
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 800b190:	f8b0 31de 	ldrh.w	r3, [r0, #478]	; 0x1de
		pdev->sys_results.result__ambient_count_rate_mcps_sd0;
 800b194:	f8b0 41d6 	ldrh.w	r4, [r0, #470]	; 0x1d6
 800b198:	f64f 71ff 	movw	r1, #65535	; 0xffff
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 800b19c:	4423      	add	r3, r4
 800b19e:	428b      	cmp	r3, r1
 800b1a0:	bfa8      	it	ge
 800b1a2:	460b      	movge	r3, r1
	utemp32a = utemp32a << 16;
 800b1a4:	041b      	lsls	r3, r3, #16
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
	else {
		/* format 17.15 */
		utemp32a = utemp32a /
 800b1a6:	fbb3 f3f2 	udiv	r3, r3, r2
			pdev->sys_results.result__dss_actual_effective_spads_sd0;
		/* save intermediate result */
		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 800b1aa:	f8c0 32ec 	str.w	r3, [r0, #748]	; 0x2ec
		 * format 9.23 */
		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
			16;

		/* check for divide by zero */
		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps == 0)
 800b1ae:	b963      	cbnz	r3, 800b1ca <VL53L1_low_power_auto_update_DSS+0x42>
		pdev->low_power_auto_data.dss__required_spads = 0x8000;

		/* override DSS config */
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
		pdev->low_power_auto_data.dss__required_spads;
		pdev->gen_cfg.dss_config__roi_mode_control =
 800b1b0:	2202      	movs	r2, #2
		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 800b1b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
		pdev->gen_cfg.dss_config__roi_mode_control =
 800b1b6:	f880 218e 	strb.w	r2, [r0, #398]	; 0x18e
		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 800b1ba:	f8a0 32f0 	strh.w	r3, [r0, #752]	; 0x2f0
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800b1be:	f8a0 3194 	strh.w	r3, [r0, #404]	; 0x194
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800b1c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1c6:	2000      	movs	r0, #0
 800b1c8:	4770      	bx	lr
		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 800b1ca:	f8b0 2164 	ldrh.w	r2, [r0, #356]	; 0x164
 800b1ce:	0412      	lsls	r2, r2, #16
			utemp32a = utemp32a /
 800b1d0:	fbb2 f3f3 	udiv	r3, r2, r3
				(uint16_t)utemp32a;
 800b1d4:	428b      	cmp	r3, r1
 800b1d6:	bf28      	it	cs
 800b1d8:	460b      	movcs	r3, r1
			pdev->gen_cfg.dss_config__roi_mode_control =
 800b1da:	2202      	movs	r2, #2
				(uint16_t)utemp32a;
 800b1dc:	b29b      	uxth	r3, r3
			pdev->gen_cfg.dss_config__roi_mode_control =
 800b1de:	f880 218e 	strb.w	r2, [r0, #398]	; 0x18e
			pdev->low_power_auto_data.dss__required_spads =
 800b1e2:	f8a0 32f0 	strh.w	r3, [r0, #752]	; 0x2f0
			pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800b1e6:	f8a0 3194 	strh.w	r3, [r0, #404]	; 0x194
}
 800b1ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1ee:	2000      	movs	r0, #0
 800b1f0:	4770      	bx	lr
 800b1f2:	bf00      	nop

0800b1f4 <VL53L1_calc_pll_period_us>:

	uint32_t  pll_period_us        = 0;

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800b1f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
}
 800b1f8:	fb93 f0f0 	sdiv	r0, r3, r0
 800b1fc:	4770      	bx	lr
 800b1fe:	bf00      	nop

0800b200 <VL53L1_decode_vcsel_period>:
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800b200:	3001      	adds	r0, #1
 800b202:	0040      	lsls	r0, r0, #1

	return vcsel_period_pclks;
}
 800b204:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 800b208:	4770      	bx	lr
 800b20a:	bf00      	nop

0800b20c <VL53L1_decode_row_col>:
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 800b20c:	0603      	lsls	r3, r0, #24
 800b20e:	d407      	bmi.n	800b220 <VL53L1_decode_row_col+0x14>
		*prow = 8 + ((255-spad_number) & 0x07);
		*pcol = (spad_number-128) >> 3;
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
 800b210:	f1c0 037f 	rsb	r3, r0, #127	; 0x7f
 800b214:	10db      	asrs	r3, r3, #3
		*prow = spad_number & 0x07;
 800b216:	f000 0007 	and.w	r0, r0, #7
 800b21a:	7008      	strb	r0, [r1, #0]
		*pcol = (127-spad_number) >> 3;
 800b21c:	7013      	strb	r3, [r2, #0]
 800b21e:	4770      	bx	lr
		*prow = 8 + ((255-spad_number) & 0x07);
 800b220:	43c3      	mvns	r3, r0
 800b222:	f003 0307 	and.w	r3, r3, #7
		*pcol = (spad_number-128) >> 3;
 800b226:	3880      	subs	r0, #128	; 0x80
		*prow = 8 + ((255-spad_number) & 0x07);
 800b228:	3308      	adds	r3, #8
		*pcol = (spad_number-128) >> 3;
 800b22a:	10c0      	asrs	r0, r0, #3
		*prow = 8 + ((255-spad_number) & 0x07);
 800b22c:	700b      	strb	r3, [r1, #0]
		*pcol = (spad_number-128) >> 3;
 800b22e:	7010      	strb	r0, [r2, #0]
 800b230:	4770      	bx	lr
 800b232:	bf00      	nop

0800b234 <VL53L1_i2c_encode_static_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800b234:	290a      	cmp	r1, #10
 800b236:	d927      	bls.n	800b288 <VL53L1_i2c_encode_static_nvm_managed+0x54>
{
 800b238:	b538      	push	{r3, r4, r5, lr}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800b23a:	7803      	ldrb	r3, [r0, #0]
 800b23c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   0) =
 800b240:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800b242:	7843      	ldrb	r3, [r0, #1]
 800b244:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   1) =
 800b248:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800b24a:	7883      	ldrb	r3, [r0, #2]
 800b24c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   2) =
 800b250:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800b252:	78c3      	ldrb	r3, [r0, #3]
 800b254:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   3) =
 800b258:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800b25a:	7903      	ldrb	r3, [r0, #4]
 800b25c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b260:	4605      	mov	r5, r0
	*(pbuffer +   4) =
 800b262:	7113      	strb	r3, [r2, #4]
 800b264:	4614      	mov	r4, r2
	VL53L1_i2c_encode_uint16_t(
 800b266:	88c0      	ldrh	r0, [r0, #6]
 800b268:	3205      	adds	r2, #5
 800b26a:	2102      	movs	r1, #2
 800b26c:	f7ff fda2 	bl	800adb4 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
		pdata->vhv_config__timeout_macrop_loop_bound;
 800b270:	7a2b      	ldrb	r3, [r5, #8]
	*(pbuffer +   7) =
 800b272:	71e3      	strb	r3, [r4, #7]
	*(pbuffer +   8) =
		pdata->vhv_config__count_thresh;
 800b274:	7a6b      	ldrb	r3, [r5, #9]
	*(pbuffer +   8) =
 800b276:	7223      	strb	r3, [r4, #8]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800b278:	7aab      	ldrb	r3, [r5, #10]
 800b27a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer +   9) =
 800b27e:	7263      	strb	r3, [r4, #9]
	*(pbuffer +  10) =
		pdata->vhv_config__init;
 800b280:	7aeb      	ldrb	r3, [r5, #11]
	*(pbuffer +  10) =
 800b282:	72a3      	strb	r3, [r4, #10]
	LOG_FUNCTION_END(status);


	return status;
 800b284:	2000      	movs	r0, #0
 800b286:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800b288:	f06f 0009 	mvn.w	r0, #9
 800b28c:	4770      	bx	lr
 800b28e:	bf00      	nop

0800b290 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800b290:	b570      	push	{r4, r5, r6, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_ReadMulti(
 800b296:	230b      	movs	r3, #11
 800b298:	aa01      	add	r2, sp, #4
 800b29a:	2101      	movs	r1, #1
 800b29c:	f006 fcc8 	bl	8011c30 <VL53L1_ReadMulti>
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800b2a0:	4605      	mov	r5, r0
 800b2a2:	bb60      	cbnz	r0, 800b2fe <VL53L1_get_static_nvm_managed+0x6e>
		(*(pbuffer +   0)) & 0x7F;
 800b2a4:	f89d 6004 	ldrb.w	r6, [sp, #4]
		(*(pbuffer +   1)) & 0xF;
 800b2a8:	f89d 0005 	ldrb.w	r0, [sp, #5]
		(*(pbuffer +   2)) & 0x7F;
 800b2ac:	f89d 1006 	ldrb.w	r1, [sp, #6]
		(*(pbuffer +   3)) & 0x3;
 800b2b0:	f89d 2007 	ldrb.w	r2, [sp, #7]
		(*(pbuffer +   4)) & 0x7F;
 800b2b4:	f89d 3008 	ldrb.w	r3, [sp, #8]
		(*(pbuffer +   3)) & 0x3;
 800b2b8:	f002 0203 	and.w	r2, r2, #3
		(*(pbuffer +   4)) & 0x7F;
 800b2bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		(*(pbuffer +   0)) & 0x7F;
 800b2c0:	f006 067f 	and.w	r6, r6, #127	; 0x7f
		(*(pbuffer +   1)) & 0xF;
 800b2c4:	f000 000f 	and.w	r0, r0, #15
		(*(pbuffer +   2)) & 0x7F;
 800b2c8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	pdata->i2c_slave__device_address =
 800b2cc:	7026      	strb	r6, [r4, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
 800b2ce:	7060      	strb	r0, [r4, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
 800b2d0:	70a1      	strb	r1, [r4, #2]
	pdata->ana_config__reg_avdd1v2_sel =
 800b2d2:	70e2      	strb	r2, [r4, #3]
	pdata->ana_config__fast_osc__trim =
 800b2d4:	7123      	strb	r3, [r4, #4]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 800b2d6:	f10d 0109 	add.w	r1, sp, #9
 800b2da:	2002      	movs	r0, #2
 800b2dc:	f7ff fd78 	bl	800add0 <VL53L1_i2c_decode_uint16_t>
		(*(pbuffer +   9)) & 0x3F;
 800b2e0:	f89d 300d 	ldrb.w	r3, [sp, #13]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800b2e4:	f89d 600b 	ldrb.w	r6, [sp, #11]
	pdata->vhv_config__count_thresh =
 800b2e8:	f89d 100c 	ldrb.w	r1, [sp, #12]
	pdata->vhv_config__init =
 800b2ec:	f89d 200e 	ldrb.w	r2, [sp, #14]
	pdata->osc_measured__fast_osc__frequency =
 800b2f0:	80e0      	strh	r0, [r4, #6]
		(*(pbuffer +   9)) & 0x3F;
 800b2f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_config__offset =
 800b2f6:	72a3      	strb	r3, [r4, #10]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800b2f8:	7226      	strb	r6, [r4, #8]
	pdata->vhv_config__count_thresh =
 800b2fa:	7261      	strb	r1, [r4, #9]
	pdata->vhv_config__init =
 800b2fc:	72e2      	strb	r2, [r4, #11]
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 800b2fe:	4628      	mov	r0, r5
 800b300:	b004      	add	sp, #16
 800b302:	bd70      	pop	{r4, r5, r6, pc}

0800b304 <VL53L1_i2c_encode_customer_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800b304:	2916      	cmp	r1, #22
 800b306:	d94b      	bls.n	800b3a0 <VL53L1_i2c_encode_customer_nvm_managed+0x9c>
{
 800b308:	b538      	push	{r3, r4, r5, lr}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800b30a:	7803      	ldrb	r3, [r0, #0]
	*(pbuffer +   0) =
 800b30c:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->global_config__spad_enables_ref_1;
 800b30e:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer +   1) =
 800b310:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->global_config__spad_enables_ref_2;
 800b312:	7883      	ldrb	r3, [r0, #2]
	*(pbuffer +   2) =
 800b314:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->global_config__spad_enables_ref_3;
 800b316:	78c3      	ldrb	r3, [r0, #3]
	*(pbuffer +   3) =
 800b318:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->global_config__spad_enables_ref_4;
 800b31a:	7903      	ldrb	r3, [r0, #4]
	*(pbuffer +   4) =
 800b31c:	7113      	strb	r3, [r2, #4]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800b31e:	7943      	ldrb	r3, [r0, #5]
 800b320:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   5) =
 800b324:	7153      	strb	r3, [r2, #5]
	*(pbuffer +   6) =
		pdata->global_config__ref_en_start_select;
 800b326:	7983      	ldrb	r3, [r0, #6]
	*(pbuffer +   6) =
 800b328:	7193      	strb	r3, [r2, #6]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800b32a:	79c3      	ldrb	r3, [r0, #7]
 800b32c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer +   7) =
 800b330:	71d3      	strb	r3, [r2, #7]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800b332:	7a03      	ldrb	r3, [r0, #8]
 800b334:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   8) =
 800b338:	7213      	strb	r3, [r2, #8]
 800b33a:	4604      	mov	r4, r0
 800b33c:	4615      	mov	r5, r2
	VL53L1_i2c_encode_uint16_t(
 800b33e:	8940      	ldrh	r0, [r0, #10]
 800b340:	3209      	adds	r2, #9
 800b342:	2102      	movs	r1, #2
 800b344:	f7ff fd36 	bl	800adb4 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 800b348:	f105 020b 	add.w	r2, r5, #11
 800b34c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800b350:	2102      	movs	r1, #2
 800b352:	f7ff fd4b 	bl	800adec <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 800b356:	f105 020d 	add.w	r2, r5, #13
 800b35a:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800b35e:	2102      	movs	r1, #2
 800b360:	f7ff fd44 	bl	800adec <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 800b364:	f105 020f 	add.w	r2, r5, #15
 800b368:	8a20      	ldrh	r0, [r4, #16]
 800b36a:	2102      	movs	r1, #2
 800b36c:	f7ff fd22 	bl	800adb4 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
 800b370:	8a60      	ldrh	r0, [r4, #18]
 800b372:	f105 0211 	add.w	r2, r5, #17
 800b376:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800b37a:	2102      	movs	r1, #2
 800b37c:	f7ff fd36 	bl	800adec <VL53L1_i2c_encode_int16_t>
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 800b380:	f105 0213 	add.w	r2, r5, #19
 800b384:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 800b388:	2102      	movs	r1, #2
 800b38a:	f7ff fd2f 	bl	800adec <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 800b38e:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 800b392:	f105 0215 	add.w	r2, r5, #21
 800b396:	2102      	movs	r1, #2
 800b398:	f7ff fd28 	bl	800adec <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800b39c:	2000      	movs	r0, #0
 800b39e:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800b3a0:	f06f 0009 	mvn.w	r0, #9
 800b3a4:	4770      	bx	lr
 800b3a6:	bf00      	nop

0800b3a8 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800b3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3aa:	b087      	sub	sp, #28
 800b3ac:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_ReadMulti(
 800b3ae:	2317      	movs	r3, #23
 800b3b0:	466a      	mov	r2, sp
 800b3b2:	210d      	movs	r1, #13
 800b3b4:	f006 fc3c 	bl	8011c30 <VL53L1_ReadMulti>
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800b3b8:	4605      	mov	r5, r0
 800b3ba:	2800      	cmp	r0, #0
 800b3bc:	d14c      	bne.n	800b458 <VL53L1_get_customer_nvm_managed+0xb0>
		(*(pbuffer +   5)) & 0xF;
 800b3be:	f89d 1005 	ldrb.w	r1, [sp, #5]
		(*(pbuffer +   7)) & 0x3F;
 800b3c2:	f89d 2007 	ldrb.w	r2, [sp, #7]
		(*(pbuffer +   8)) & 0x3;
 800b3c6:	f89d 3008 	ldrb.w	r3, [sp, #8]
	pdata->global_config__spad_enables_ref_0 =
 800b3ca:	f89d 0000 	ldrb.w	r0, [sp]
	pdata->global_config__spad_enables_ref_1 =
 800b3ce:	f89d 7001 	ldrb.w	r7, [sp, #1]
	pdata->global_config__spad_enables_ref_2 =
 800b3d2:	f89d 6002 	ldrb.w	r6, [sp, #2]
	pdata->global_config__spad_enables_ref_0 =
 800b3d6:	7020      	strb	r0, [r4, #0]
		(*(pbuffer +   5)) & 0xF;
 800b3d8:	f001 010f 	and.w	r1, r1, #15
		(*(pbuffer +   7)) & 0x3F;
 800b3dc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
		(*(pbuffer +   8)) & 0x3;
 800b3e0:	f003 0303 	and.w	r3, r3, #3
	pdata->global_config__spad_enables_ref_3 =
 800b3e4:	f89d 0003 	ldrb.w	r0, [sp, #3]
	pdata->global_config__spad_enables_ref_5 =
 800b3e8:	7161      	strb	r1, [r4, #5]
	pdata->ref_spad_man__num_requested_ref_spads =
 800b3ea:	71e2      	strb	r2, [r4, #7]
	pdata->global_config__spad_enables_ref_4 =
 800b3ec:	f89d 1004 	ldrb.w	r1, [sp, #4]
	pdata->global_config__ref_en_start_select =
 800b3f0:	f89d 2006 	ldrb.w	r2, [sp, #6]
	pdata->ref_spad_man__ref_location =
 800b3f4:	7223      	strb	r3, [r4, #8]
	pdata->global_config__ref_en_start_select =
 800b3f6:	71a2      	strb	r2, [r4, #6]
	pdata->global_config__spad_enables_ref_3 =
 800b3f8:	70e0      	strb	r0, [r4, #3]
	pdata->global_config__spad_enables_ref_4 =
 800b3fa:	7121      	strb	r1, [r4, #4]
	pdata->global_config__spad_enables_ref_1 =
 800b3fc:	7067      	strb	r7, [r4, #1]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 800b3fe:	f10d 0109 	add.w	r1, sp, #9
	pdata->global_config__spad_enables_ref_2 =
 800b402:	70a6      	strb	r6, [r4, #2]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 800b404:	2002      	movs	r0, #2
 800b406:	f7ff fce3 	bl	800add0 <VL53L1_i2c_decode_uint16_t>
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 800b40a:	f10d 010b 	add.w	r1, sp, #11
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800b40e:	8160      	strh	r0, [r4, #10]
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 800b410:	2002      	movs	r0, #2
 800b412:	f7ff fcf9 	bl	800ae08 <VL53L1_i2c_decode_int16_t>
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 800b416:	f10d 010d 	add.w	r1, sp, #13
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800b41a:	81a0      	strh	r0, [r4, #12]
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 800b41c:	2002      	movs	r0, #2
 800b41e:	f7ff fcf3 	bl	800ae08 <VL53L1_i2c_decode_int16_t>
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 800b422:	f10d 010f 	add.w	r1, sp, #15
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800b426:	81e0      	strh	r0, [r4, #14]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 800b428:	2002      	movs	r0, #2
 800b42a:	f7ff fcd1 	bl	800add0 <VL53L1_i2c_decode_uint16_t>
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800b42e:	f10d 0111 	add.w	r1, sp, #17
	pdata->ref_spad_char__total_rate_target_mcps =
 800b432:	8220      	strh	r0, [r4, #16]
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800b434:	2002      	movs	r0, #2
 800b436:	f7ff fce7 	bl	800ae08 <VL53L1_i2c_decode_int16_t>
 800b43a:	f3c0 000c 	ubfx	r0, r0, #0, #13
	pdata->algo__part_to_part_range_offset_mm =
 800b43e:	8260      	strh	r0, [r4, #18]
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 800b440:	f10d 0113 	add.w	r1, sp, #19
 800b444:	2002      	movs	r0, #2
 800b446:	f7ff fcdf 	bl	800ae08 <VL53L1_i2c_decode_int16_t>
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 800b44a:	f10d 0115 	add.w	r1, sp, #21
	pdata->mm_config__inner_offset_mm =
 800b44e:	82a0      	strh	r0, [r4, #20]
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 800b450:	2002      	movs	r0, #2
 800b452:	f7ff fcd9 	bl	800ae08 <VL53L1_i2c_decode_int16_t>
	pdata->mm_config__outer_offset_mm =
 800b456:	82e0      	strh	r0, [r4, #22]
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 800b458:	4628      	mov	r0, r5
 800b45a:	b007      	add	sp, #28
 800b45c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b45e:	bf00      	nop

0800b460 <VL53L1_i2c_encode_static_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800b460:	291f      	cmp	r1, #31
 800b462:	d968      	bls.n	800b536 <VL53L1_i2c_encode_static_config+0xd6>
{
 800b464:	b538      	push	{r3, r4, r5, lr}
 800b466:	4604      	mov	r4, r0
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	VL53L1_i2c_encode_uint16_t(
 800b468:	2102      	movs	r1, #2
 800b46a:	8800      	ldrh	r0, [r0, #0]
 800b46c:	4615      	mov	r5, r2
 800b46e:	f7ff fca1 	bl	800adb4 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800b472:	78a3      	ldrb	r3, [r4, #2]
 800b474:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   2) =
 800b478:	70ab      	strb	r3, [r5, #2]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800b47a:	78e3      	ldrb	r3, [r4, #3]
 800b47c:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   3) =
 800b480:	70eb      	strb	r3, [r5, #3]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800b482:	7923      	ldrb	r3, [r4, #4]
 800b484:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   4) =
 800b488:	712b      	strb	r3, [r5, #4]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800b48a:	7963      	ldrb	r3, [r4, #5]
 800b48c:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer +   5) =
 800b490:	716b      	strb	r3, [r5, #5]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800b492:	79a3      	ldrb	r3, [r4, #6]
 800b494:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   6) =
 800b498:	71ab      	strb	r3, [r5, #6]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800b49a:	79e3      	ldrb	r3, [r4, #7]
 800b49c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   7) =
 800b4a0:	71eb      	strb	r3, [r5, #7]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800b4a2:	7a23      	ldrb	r3, [r4, #8]
 800b4a4:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   8) =
 800b4a8:	722b      	strb	r3, [r5, #8]
	*(pbuffer +   9) =
		pdata->pad_i2c_hv__config;
 800b4aa:	7a63      	ldrb	r3, [r4, #9]
	*(pbuffer +   9) =
 800b4ac:	726b      	strb	r3, [r5, #9]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800b4ae:	7aa3      	ldrb	r3, [r4, #10]
 800b4b0:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +  10) =
 800b4b4:	72ab      	strb	r3, [r5, #10]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800b4b6:	7ae3      	ldrb	r3, [r4, #11]
 800b4b8:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  11) =
 800b4bc:	72eb      	strb	r3, [r5, #11]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800b4be:	7b23      	ldrb	r3, [r4, #12]
 800b4c0:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer +  12) =
 800b4c4:	732b      	strb	r3, [r5, #12]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800b4c6:	7b63      	ldrb	r3, [r4, #13]
 800b4c8:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  13) =
 800b4cc:	736b      	strb	r3, [r5, #13]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800b4ce:	7ba3      	ldrb	r3, [r4, #14]
 800b4d0:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  14) =
 800b4d4:	73ab      	strb	r3, [r5, #14]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800b4d6:	7be3      	ldrb	r3, [r4, #15]
 800b4d8:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer +  15) =
 800b4dc:	73eb      	strb	r3, [r5, #15]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800b4de:	7c23      	ldrb	r3, [r4, #16]
 800b4e0:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer +  16) =
 800b4e4:	742b      	strb	r3, [r5, #16]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800b4e6:	7c63      	ldrb	r3, [r4, #17]
 800b4e8:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +  17) =
 800b4ec:	746b      	strb	r3, [r5, #17]
	*(pbuffer +  18) =
		pdata->sigma_estimator__effective_pulse_width_ns;
 800b4ee:	7ca3      	ldrb	r3, [r4, #18]
	*(pbuffer +  18) =
 800b4f0:	74ab      	strb	r3, [r5, #18]
	*(pbuffer +  19) =
		pdata->sigma_estimator__effective_ambient_width_ns;
 800b4f2:	7ce3      	ldrb	r3, [r4, #19]
	*(pbuffer +  19) =
 800b4f4:	74eb      	strb	r3, [r5, #19]
	*(pbuffer +  20) =
		pdata->sigma_estimator__sigma_ref_mm;
 800b4f6:	7d23      	ldrb	r3, [r4, #20]
	*(pbuffer +  20) =
 800b4f8:	752b      	strb	r3, [r5, #20]
	*(pbuffer +  21) =
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800b4fa:	7d63      	ldrb	r3, [r4, #21]
	*(pbuffer +  21) =
 800b4fc:	756b      	strb	r3, [r5, #21]
	*(pbuffer +  22) =
		pdata->spare_host_config__static_config_spare_0;
 800b4fe:	7da3      	ldrb	r3, [r4, #22]
	*(pbuffer +  22) =
 800b500:	75ab      	strb	r3, [r5, #22]
	*(pbuffer +  23) =
		pdata->spare_host_config__static_config_spare_1;
 800b502:	7de3      	ldrb	r3, [r4, #23]
	*(pbuffer +  23) =
 800b504:	75eb      	strb	r3, [r5, #23]
	VL53L1_i2c_encode_uint16_t(
 800b506:	8b20      	ldrh	r0, [r4, #24]
 800b508:	f105 0218 	add.w	r2, r5, #24
 800b50c:	2102      	movs	r1, #2
 800b50e:	f7ff fc51 	bl	800adb4 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
		pdata->algo__range_ignore_valid_height_mm;
 800b512:	7ea3      	ldrb	r3, [r4, #26]
	*(pbuffer +  26) =
 800b514:	76ab      	strb	r3, [r5, #26]
	*(pbuffer +  27) =
		pdata->algo__range_min_clip;
 800b516:	7ee3      	ldrb	r3, [r4, #27]
	*(pbuffer +  27) =
 800b518:	76eb      	strb	r3, [r5, #27]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800b51a:	7f23      	ldrb	r3, [r4, #28]
 800b51c:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +  28) =
 800b520:	772b      	strb	r3, [r5, #28]
	*(pbuffer +  29) =
		pdata->spare_host_config__static_config_spare_2;
 800b522:	7f63      	ldrb	r3, [r4, #29]
	*(pbuffer +  29) =
 800b524:	776b      	strb	r3, [r5, #29]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800b526:	7fa3      	ldrb	r3, [r4, #30]
 800b528:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +  30) =
 800b52c:	77ab      	strb	r3, [r5, #30]
	*(pbuffer +  31) =
		pdata->sd_config__reset_stages_lsb;
 800b52e:	7fe3      	ldrb	r3, [r4, #31]
	*(pbuffer +  31) =
 800b530:	77eb      	strb	r3, [r5, #31]
	LOG_FUNCTION_END(status);


	return status;
 800b532:	2000      	movs	r0, #0
 800b534:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800b536:	f06f 0009 	mvn.w	r0, #9
 800b53a:	4770      	bx	lr

0800b53c <VL53L1_i2c_encode_general_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 800b53c:	2915      	cmp	r1, #21
 800b53e:	d93f      	bls.n	800b5c0 <VL53L1_i2c_encode_general_config+0x84>
{
 800b540:	b538      	push	{r3, r4, r5, lr}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800b542:	7803      	ldrb	r3, [r0, #0]
	*(pbuffer +   0) =
 800b544:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->global_config__stream_divider;
 800b546:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer +   1) =
 800b548:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->system__interrupt_config_gpio;
 800b54a:	7883      	ldrb	r3, [r0, #2]
	*(pbuffer +   2) =
 800b54c:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800b54e:	78c3      	ldrb	r3, [r0, #3]
 800b550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   3) =
 800b554:	70d3      	strb	r3, [r2, #3]
 800b556:	4605      	mov	r5, r0
	VL53L1_i2c_encode_uint16_t(
 800b558:	8880      	ldrh	r0, [r0, #4]
 800b55a:	4614      	mov	r4, r2
 800b55c:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800b560:	3204      	adds	r2, #4
 800b562:	2102      	movs	r1, #2
 800b564:	f7ff fc26 	bl	800adb4 <VL53L1_i2c_encode_uint16_t>
		pdata->cal_config__repeat_rate & 0xFFF,
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800b568:	79ab      	ldrb	r3, [r5, #6]
 800b56a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   6) =
 800b56e:	71a3      	strb	r3, [r4, #6]
	*(pbuffer +   7) =
		pdata->phasecal_config__timeout_macrop;
 800b570:	79eb      	ldrb	r3, [r5, #7]
	*(pbuffer +   7) =
 800b572:	71e3      	strb	r3, [r4, #7]
	*(pbuffer +   8) =
		pdata->phasecal_config__target;
 800b574:	7a2b      	ldrb	r3, [r5, #8]
	*(pbuffer +   8) =
 800b576:	7223      	strb	r3, [r4, #8]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800b578:	7a6b      	ldrb	r3, [r5, #9]
 800b57a:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   9) =
 800b57e:	7263      	strb	r3, [r4, #9]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800b580:	7aab      	ldrb	r3, [r5, #10]
 800b582:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer +  11) =
 800b586:	72e3      	strb	r3, [r4, #11]
	VL53L1_i2c_encode_uint16_t(
 800b588:	89a8      	ldrh	r0, [r5, #12]
 800b58a:	f104 020c 	add.w	r2, r4, #12
 800b58e:	2102      	movs	r1, #2
 800b590:	f7ff fc10 	bl	800adb4 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 800b594:	f104 020e 	add.w	r2, r4, #14
 800b598:	89e8      	ldrh	r0, [r5, #14]
 800b59a:	2102      	movs	r1, #2
 800b59c:	f7ff fc0a 	bl	800adb4 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 800b5a0:	8a28      	ldrh	r0, [r5, #16]
 800b5a2:	f104 0210 	add.w	r2, r4, #16
 800b5a6:	2102      	movs	r1, #2
 800b5a8:	f7ff fc04 	bl	800adb4 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
		pdata->dss_config__manual_block_select;
 800b5ac:	7cab      	ldrb	r3, [r5, #18]
	*(pbuffer +  18) =
 800b5ae:	74a3      	strb	r3, [r4, #18]
	*(pbuffer +  19) =
		pdata->dss_config__aperture_attenuation;
 800b5b0:	7ceb      	ldrb	r3, [r5, #19]
	*(pbuffer +  19) =
 800b5b2:	74e3      	strb	r3, [r4, #19]
	*(pbuffer +  20) =
		pdata->dss_config__max_spads_limit;
 800b5b4:	7d2b      	ldrb	r3, [r5, #20]
	*(pbuffer +  20) =
 800b5b6:	7523      	strb	r3, [r4, #20]
	*(pbuffer +  21) =
		pdata->dss_config__min_spads_limit;
 800b5b8:	7d6b      	ldrb	r3, [r5, #21]
	*(pbuffer +  21) =
 800b5ba:	7563      	strb	r3, [r4, #21]
	LOG_FUNCTION_END(status);


	return status;
 800b5bc:	2000      	movs	r0, #0
 800b5be:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800b5c0:	f06f 0009 	mvn.w	r0, #9
 800b5c4:	4770      	bx	lr
 800b5c6:	bf00      	nop

0800b5c8 <VL53L1_i2c_encode_timing_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 800b5c8:	2916      	cmp	r1, #22
 800b5ca:	d93d      	bls.n	800b648 <VL53L1_i2c_encode_timing_config+0x80>
{
 800b5cc:	b538      	push	{r3, r4, r5, lr}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800b5ce:	7803      	ldrb	r3, [r0, #0]
 800b5d0:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   0) =
 800b5d4:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->mm_config__timeout_macrop_a_lo;
 800b5d6:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer +   1) =
 800b5d8:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800b5da:	7883      	ldrb	r3, [r0, #2]
 800b5dc:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   2) =
 800b5e0:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->mm_config__timeout_macrop_b_lo;
 800b5e2:	78c3      	ldrb	r3, [r0, #3]
	*(pbuffer +   3) =
 800b5e4:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800b5e6:	7903      	ldrb	r3, [r0, #4]
 800b5e8:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   4) =
 800b5ec:	7113      	strb	r3, [r2, #4]
	*(pbuffer +   5) =
		pdata->range_config__timeout_macrop_a_lo;
 800b5ee:	7943      	ldrb	r3, [r0, #5]
	*(pbuffer +   5) =
 800b5f0:	7153      	strb	r3, [r2, #5]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800b5f2:	7983      	ldrb	r3, [r0, #6]
 800b5f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer +   6) =
 800b5f8:	7193      	strb	r3, [r2, #6]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800b5fa:	79c3      	ldrb	r3, [r0, #7]
 800b5fc:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   7) =
 800b600:	71d3      	strb	r3, [r2, #7]
	*(pbuffer +   8) =
		pdata->range_config__timeout_macrop_b_lo;
 800b602:	7a03      	ldrb	r3, [r0, #8]
	*(pbuffer +   8) =
 800b604:	7213      	strb	r3, [r2, #8]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800b606:	7a43      	ldrb	r3, [r0, #9]
 800b608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b60c:	4605      	mov	r5, r0
	*(pbuffer +   9) =
 800b60e:	7253      	strb	r3, [r2, #9]
 800b610:	4614      	mov	r4, r2
	VL53L1_i2c_encode_uint16_t(
 800b612:	8940      	ldrh	r0, [r0, #10]
 800b614:	320a      	adds	r2, #10
 800b616:	2102      	movs	r1, #2
 800b618:	f7ff fbcc 	bl	800adb4 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 800b61c:	f104 020c 	add.w	r2, r4, #12
 800b620:	89a8      	ldrh	r0, [r5, #12]
 800b622:	2102      	movs	r1, #2
 800b624:	f7ff fbc6 	bl	800adb4 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
		pdata->range_config__valid_phase_low;
 800b628:	7bab      	ldrb	r3, [r5, #14]
	*(pbuffer +  14) =
 800b62a:	73a3      	strb	r3, [r4, #14]
	*(pbuffer +  15) =
		pdata->range_config__valid_phase_high;
 800b62c:	7beb      	ldrb	r3, [r5, #15]
	*(pbuffer +  15) =
 800b62e:	73e3      	strb	r3, [r4, #15]
	VL53L1_i2c_encode_uint32_t(
 800b630:	6928      	ldr	r0, [r5, #16]
 800b632:	f104 0212 	add.w	r2, r4, #18
 800b636:	2104      	movs	r1, #4
 800b638:	f7ff fbf8 	bl	800ae2c <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800b63c:	7d2b      	ldrb	r3, [r5, #20]
 800b63e:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +  22) =
 800b642:	75a3      	strb	r3, [r4, #22]
	LOG_FUNCTION_END(status);


	return status;
 800b644:	2000      	movs	r0, #0
 800b646:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800b648:	f06f 0009 	mvn.w	r0, #9
 800b64c:	4770      	bx	lr
 800b64e:	bf00      	nop

0800b650 <VL53L1_i2c_encode_dynamic_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800b650:	2911      	cmp	r1, #17
 800b652:	d93c      	bls.n	800b6ce <VL53L1_i2c_encode_dynamic_config+0x7e>
{
 800b654:	b538      	push	{r3, r4, r5, lr}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800b656:	7803      	ldrb	r3, [r0, #0]
 800b658:	f003 0303 	and.w	r3, r3, #3
 800b65c:	4615      	mov	r5, r2
	*(pbuffer +   0) =
 800b65e:	f802 3b01 	strb.w	r3, [r2], #1
 800b662:	4604      	mov	r4, r0
	VL53L1_i2c_encode_uint16_t(
 800b664:	2102      	movs	r1, #2
 800b666:	8840      	ldrh	r0, [r0, #2]
 800b668:	f7ff fba4 	bl	800adb4 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 800b66c:	88a0      	ldrh	r0, [r4, #4]
 800b66e:	1cea      	adds	r2, r5, #3
 800b670:	2102      	movs	r1, #2
 800b672:	f7ff fb9f 	bl	800adb4 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800b676:	79a3      	ldrb	r3, [r4, #6]
 800b678:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   5) =
 800b67c:	716b      	strb	r3, [r5, #5]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800b67e:	79e3      	ldrb	r3, [r4, #7]
 800b680:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer +   6) =
 800b684:	71ab      	strb	r3, [r5, #6]
	*(pbuffer +   7) =
		pdata->sd_config__woi_sd0;
 800b686:	7a23      	ldrb	r3, [r4, #8]
	*(pbuffer +   7) =
 800b688:	71eb      	strb	r3, [r5, #7]
	*(pbuffer +   8) =
		pdata->sd_config__woi_sd1;
 800b68a:	7a63      	ldrb	r3, [r4, #9]
	*(pbuffer +   8) =
 800b68c:	722b      	strb	r3, [r5, #8]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800b68e:	7aa3      	ldrb	r3, [r4, #10]
 800b690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   9) =
 800b694:	726b      	strb	r3, [r5, #9]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800b696:	7ae3      	ldrb	r3, [r4, #11]
 800b698:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +  10) =
 800b69c:	72ab      	strb	r3, [r5, #10]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800b69e:	7b23      	ldrb	r3, [r4, #12]
 800b6a0:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  11) =
 800b6a4:	72eb      	strb	r3, [r5, #11]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 800b6a6:	7b63      	ldrb	r3, [r4, #13]
 800b6a8:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  12) =
 800b6ac:	732b      	strb	r3, [r5, #12]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 800b6ae:	7ba3      	ldrb	r3, [r4, #14]
 800b6b0:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +  13) =
 800b6b4:	736b      	strb	r3, [r5, #13]
	*(pbuffer +  14) =
		pdata->roi_config__user_roi_centre_spad;
 800b6b6:	7be3      	ldrb	r3, [r4, #15]
	*(pbuffer +  14) =
 800b6b8:	73ab      	strb	r3, [r5, #14]
	*(pbuffer +  15) =
		pdata->roi_config__user_roi_requested_global_xy_size;
 800b6ba:	7c23      	ldrb	r3, [r4, #16]
	*(pbuffer +  15) =
 800b6bc:	73eb      	strb	r3, [r5, #15]
	*(pbuffer +  16) =
		pdata->system__sequence_config;
 800b6be:	7c63      	ldrb	r3, [r4, #17]
	*(pbuffer +  16) =
 800b6c0:	742b      	strb	r3, [r5, #16]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 800b6c2:	7ca3      	ldrb	r3, [r4, #18]
 800b6c4:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  17) =
 800b6c8:	746b      	strb	r3, [r5, #17]
	LOG_FUNCTION_END(status);


	return status;
 800b6ca:	2000      	movs	r0, #0
 800b6cc:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800b6ce:	f06f 0009 	mvn.w	r0, #9
 800b6d2:	4770      	bx	lr

0800b6d4 <VL53L1_i2c_encode_system_control>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 800b6d4:	2904      	cmp	r1, #4
 800b6d6:	d913      	bls.n	800b700 <VL53L1_i2c_encode_system_control+0x2c>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800b6d8:	7803      	ldrb	r3, [r0, #0]
 800b6da:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   0) =
 800b6de:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800b6e0:	7843      	ldrb	r3, [r0, #1]
 800b6e2:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   1) =
 800b6e6:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800b6e8:	7883      	ldrb	r3, [r0, #2]
 800b6ea:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   2) =
 800b6ee:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800b6f0:	78c3      	ldrb	r3, [r0, #3]
 800b6f2:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   3) =
 800b6f6:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->system__mode_start;
 800b6f8:	7903      	ldrb	r3, [r0, #4]
	*(pbuffer +   4) =
 800b6fa:	7113      	strb	r3, [r2, #4]
	LOG_FUNCTION_END(status);


	return status;
 800b6fc:	2000      	movs	r0, #0
 800b6fe:	4770      	bx	lr
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800b700:	f06f 0009 	mvn.w	r0, #9
}
 800b704:	4770      	bx	lr
 800b706:	bf00      	nop

0800b708 <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 800b708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b70a:	b083      	sub	sp, #12
		pdata->power_management__go1_power_force & 0x1;
 800b70c:	780f      	ldrb	r7, [r1, #0]
		pdata->system__stream_count_ctrl & 0x1;
 800b70e:	784e      	ldrb	r6, [r1, #1]
		pdata->firmware__enable & 0x1;
 800b710:	788d      	ldrb	r5, [r1, #2]
		pdata->system__interrupt_clear & 0x3;
 800b712:	78cc      	ldrb	r4, [r1, #3]
	*(pbuffer +   4) =
 800b714:	790a      	ldrb	r2, [r1, #4]
 800b716:	f88d 2004 	strb.w	r2, [sp, #4]
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
		status = VL53L1_WriteMulti(
 800b71a:	2305      	movs	r3, #5
		pdata->power_management__go1_power_force & 0x1;
 800b71c:	f007 0701 	and.w	r7, r7, #1
		pdata->system__stream_count_ctrl & 0x1;
 800b720:	f006 0601 	and.w	r6, r6, #1
		pdata->firmware__enable & 0x1;
 800b724:	f005 0501 	and.w	r5, r5, #1
		pdata->system__interrupt_clear & 0x3;
 800b728:	f004 0403 	and.w	r4, r4, #3
		status = VL53L1_WriteMulti(
 800b72c:	466a      	mov	r2, sp
 800b72e:	2183      	movs	r1, #131	; 0x83
	*(pbuffer +   0) =
 800b730:	f88d 7000 	strb.w	r7, [sp]
	*(pbuffer +   1) =
 800b734:	f88d 6001 	strb.w	r6, [sp, #1]
	*(pbuffer +   2) =
 800b738:	f88d 5002 	strb.w	r5, [sp, #2]
	*(pbuffer +   3) =
 800b73c:	f88d 4003 	strb.w	r4, [sp, #3]
		status = VL53L1_WriteMulti(
 800b740:	f006 fa4e 	bl	8011be0 <VL53L1_WriteMulti>
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
}
 800b744:	b003      	add	sp, #12
 800b746:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b748 <VL53L1_i2c_decode_system_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 800b748:	282b      	cmp	r0, #43	; 0x2b
 800b74a:	f240 8089 	bls.w	800b860 <VL53L1_i2c_decode_system_results+0x118>
{
 800b74e:	b538      	push	{r3, r4, r5, lr}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800b750:	780b      	ldrb	r3, [r1, #0]
 800b752:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->result__interrupt_status =
 800b756:	7013      	strb	r3, [r2, #0]
	pdata->result__range_status =
 800b758:	784b      	ldrb	r3, [r1, #1]
 800b75a:	7053      	strb	r3, [r2, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800b75c:	788b      	ldrb	r3, [r1, #2]
 800b75e:	f003 030f 	and.w	r3, r3, #15
	pdata->result__report_status =
 800b762:	7093      	strb	r3, [r2, #2]
	pdata->result__stream_count =
 800b764:	78cb      	ldrb	r3, [r1, #3]
 800b766:	70d3      	strb	r3, [r2, #3]
 800b768:	460d      	mov	r5, r1
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 800b76a:	2002      	movs	r0, #2
 800b76c:	3104      	adds	r1, #4
 800b76e:	4614      	mov	r4, r2
 800b770:	f7ff fb2e 	bl	800add0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 800b774:	1da9      	adds	r1, r5, #6
	pdata->result__dss_actual_effective_spads_sd0 =
 800b776:	80a0      	strh	r0, [r4, #4]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 800b778:	2002      	movs	r0, #2
 800b77a:	f7ff fb29 	bl	800add0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 800b77e:	f105 0108 	add.w	r1, r5, #8
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800b782:	80e0      	strh	r0, [r4, #6]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 800b784:	2002      	movs	r0, #2
 800b786:	f7ff fb23 	bl	800add0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 800b78a:	f105 010a 	add.w	r1, r5, #10
	pdata->result__ambient_count_rate_mcps_sd0 =
 800b78e:	8120      	strh	r0, [r4, #8]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 800b790:	2002      	movs	r0, #2
 800b792:	f7ff fb1d 	bl	800add0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 800b796:	f105 010c 	add.w	r1, r5, #12
	pdata->result__sigma_sd0 =
 800b79a:	8160      	strh	r0, [r4, #10]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 800b79c:	2002      	movs	r0, #2
 800b79e:	f7ff fb17 	bl	800add0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 800b7a2:	f105 010e 	add.w	r1, r5, #14
	pdata->result__phase_sd0 =
 800b7a6:	81a0      	strh	r0, [r4, #12]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 800b7a8:	2002      	movs	r0, #2
 800b7aa:	f7ff fb11 	bl	800add0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 800b7ae:	f105 0110 	add.w	r1, r5, #16
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800b7b2:	81e0      	strh	r0, [r4, #14]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 800b7b4:	2002      	movs	r0, #2
 800b7b6:	f7ff fb0b 	bl	800add0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 800b7ba:	f105 0112 	add.w	r1, r5, #18
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800b7be:	8220      	strh	r0, [r4, #16]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 800b7c0:	2002      	movs	r0, #2
 800b7c2:	f7ff fb05 	bl	800add0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 800b7c6:	f105 0114 	add.w	r1, r5, #20
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800b7ca:	8260      	strh	r0, [r4, #18]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 800b7cc:	2002      	movs	r0, #2
 800b7ce:	f7ff faff 	bl	800add0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800b7d2:	f105 0116 	add.w	r1, r5, #22
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800b7d6:	82a0      	strh	r0, [r4, #20]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800b7d8:	2002      	movs	r0, #2
 800b7da:	f7ff faf9 	bl	800add0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800b7de:	f105 0118 	add.w	r1, r5, #24
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800b7e2:	82e0      	strh	r0, [r4, #22]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800b7e4:	2002      	movs	r0, #2
 800b7e6:	f7ff faf3 	bl	800add0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 800b7ea:	f105 011a 	add.w	r1, r5, #26
	pdata->result__dss_actual_effective_spads_sd1 =
 800b7ee:	8320      	strh	r0, [r4, #24]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 800b7f0:	2002      	movs	r0, #2
 800b7f2:	f7ff faed 	bl	800add0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 800b7f6:	f105 011c 	add.w	r1, r5, #28
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800b7fa:	8360      	strh	r0, [r4, #26]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 800b7fc:	2002      	movs	r0, #2
 800b7fe:	f7ff fae7 	bl	800add0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 800b802:	f105 011e 	add.w	r1, r5, #30
	pdata->result__ambient_count_rate_mcps_sd1 =
 800b806:	83a0      	strh	r0, [r4, #28]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 800b808:	2002      	movs	r0, #2
 800b80a:	f7ff fae1 	bl	800add0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 800b80e:	f105 0120 	add.w	r1, r5, #32
	pdata->result__sigma_sd1 =
 800b812:	83e0      	strh	r0, [r4, #30]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 800b814:	2002      	movs	r0, #2
 800b816:	f7ff fadb 	bl	800add0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 800b81a:	f105 0122 	add.w	r1, r5, #34	; 0x22
	pdata->result__phase_sd1 =
 800b81e:	8420      	strh	r0, [r4, #32]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 800b820:	2002      	movs	r0, #2
 800b822:	f7ff fad5 	bl	800add0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 800b826:	f105 0124 	add.w	r1, r5, #36	; 0x24
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800b82a:	8460      	strh	r0, [r4, #34]	; 0x22
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 800b82c:	2002      	movs	r0, #2
 800b82e:	f7ff facf 	bl	800add0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 800b832:	f105 0126 	add.w	r1, r5, #38	; 0x26
	pdata->result__spare_0_sd1 =
 800b836:	84a0      	strh	r0, [r4, #36]	; 0x24
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 800b838:	2002      	movs	r0, #2
 800b83a:	f7ff fac9 	bl	800add0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 800b83e:	f105 0128 	add.w	r1, r5, #40	; 0x28
	pdata->result__spare_1_sd1 =
 800b842:	84e0      	strh	r0, [r4, #38]	; 0x26
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 800b844:	2002      	movs	r0, #2
 800b846:	f7ff fac3 	bl	800add0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_2_sd1 =
 800b84a:	8520      	strh	r0, [r4, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 800b84c:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 800b850:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800b854:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800b858:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800b85c:	2000      	movs	r0, #0
 800b85e:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800b860:	f06f 0009 	mvn.w	r0, #9
 800b864:	4770      	bx	lr
 800b866:	bf00      	nop

0800b868 <VL53L1_i2c_decode_core_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 800b868:	2820      	cmp	r0, #32
 800b86a:	d935      	bls.n	800b8d8 <VL53L1_i2c_decode_core_results+0x70>
{
 800b86c:	b538      	push	{r3, r4, r5, lr}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 800b86e:	2004      	movs	r0, #4
 800b870:	4614      	mov	r4, r2
 800b872:	460d      	mov	r5, r1
 800b874:	f7ff fae8 	bl	800ae48 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 800b878:	1d29      	adds	r1, r5, #4
	pdata->result_core__ambient_window_events_sd0 =
 800b87a:	6020      	str	r0, [r4, #0]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 800b87c:	2004      	movs	r0, #4
 800b87e:	f7ff fae3 	bl	800ae48 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 800b882:	f105 0108 	add.w	r1, r5, #8
	pdata->result_core__ranging_total_events_sd0 =
 800b886:	6060      	str	r0, [r4, #4]
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 800b888:	2004      	movs	r0, #4
 800b88a:	f7ff faeb 	bl	800ae64 <VL53L1_i2c_decode_int32_t>
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 800b88e:	f105 010c 	add.w	r1, r5, #12
	pdata->result_core__signal_total_events_sd0 =
 800b892:	60a0      	str	r0, [r4, #8]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 800b894:	2004      	movs	r0, #4
 800b896:	f7ff fad7 	bl	800ae48 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 800b89a:	f105 0110 	add.w	r1, r5, #16
	pdata->result_core__total_periods_elapsed_sd0 =
 800b89e:	60e0      	str	r0, [r4, #12]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 800b8a0:	2004      	movs	r0, #4
 800b8a2:	f7ff fad1 	bl	800ae48 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 800b8a6:	f105 0114 	add.w	r1, r5, #20
	pdata->result_core__ambient_window_events_sd1 =
 800b8aa:	6120      	str	r0, [r4, #16]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 800b8ac:	2004      	movs	r0, #4
 800b8ae:	f7ff facb 	bl	800ae48 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 800b8b2:	f105 0118 	add.w	r1, r5, #24
	pdata->result_core__ranging_total_events_sd1 =
 800b8b6:	6160      	str	r0, [r4, #20]
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 800b8b8:	2004      	movs	r0, #4
 800b8ba:	f7ff fad3 	bl	800ae64 <VL53L1_i2c_decode_int32_t>
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 800b8be:	f105 011c 	add.w	r1, r5, #28
	pdata->result_core__signal_total_events_sd1 =
 800b8c2:	61a0      	str	r0, [r4, #24]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 800b8c4:	2004      	movs	r0, #4
 800b8c6:	f7ff fabf 	bl	800ae48 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__total_periods_elapsed_sd1 =
 800b8ca:	61e0      	str	r0, [r4, #28]
	pdata->result_core__spare_0 =
 800b8cc:	f895 3020 	ldrb.w	r3, [r5, #32]
 800b8d0:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800b8d4:	2000      	movs	r0, #0
 800b8d6:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800b8d8:	f06f 0009 	mvn.w	r0, #9
 800b8dc:	4770      	bx	lr
 800b8de:	bf00      	nop

0800b8e0 <VL53L1_i2c_decode_debug_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 800b8e0:	2837      	cmp	r0, #55	; 0x37
 800b8e2:	f240 80d3 	bls.w	800ba8c <VL53L1_i2c_decode_debug_results+0x1ac>
{
 800b8e6:	b538      	push	{r3, r4, r5, lr}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 800b8e8:	2002      	movs	r0, #2
 800b8ea:	4614      	mov	r4, r2
 800b8ec:	460d      	mov	r5, r1
 800b8ee:	f7ff fa6f 	bl	800add0 <VL53L1_i2c_decode_uint16_t>
	pdata->phasecal_result__reference_phase =
 800b8f2:	8020      	strh	r0, [r4, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800b8f4:	78ab      	ldrb	r3, [r5, #2]
 800b8f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->phasecal_result__vcsel_start =
 800b8fa:	70a3      	strb	r3, [r4, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800b8fc:	78eb      	ldrb	r3, [r5, #3]
 800b8fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800b902:	70e3      	strb	r3, [r4, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800b904:	792b      	ldrb	r3, [r5, #4]
 800b906:	f003 0303 	and.w	r3, r3, #3
	pdata->ref_spad_char_result__ref_location =
 800b90a:	7123      	strb	r3, [r4, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 800b90c:	796b      	ldrb	r3, [r5, #5]
 800b90e:	f003 0301 	and.w	r3, r3, #1
	pdata->vhv_result__coldboot_status =
 800b912:	7163      	strb	r3, [r4, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 800b914:	79ab      	ldrb	r3, [r5, #6]
 800b916:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_result__search_result =
 800b91a:	71a3      	strb	r3, [r4, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 800b91c:	79eb      	ldrb	r3, [r5, #7]
 800b91e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_result__latest_setting =
 800b922:	71e3      	strb	r3, [r4, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 800b924:	f105 0108 	add.w	r1, r5, #8
 800b928:	2002      	movs	r0, #2
 800b92a:	f7ff fa51 	bl	800add0 <VL53L1_i2c_decode_uint16_t>
 800b92e:	f3c0 0009 	ubfx	r0, r0, #0, #10
	pdata->result__osc_calibrate_val =
 800b932:	8120      	strh	r0, [r4, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 800b934:	7aab      	ldrb	r3, [r5, #10]
 800b936:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__powerdown_go1 =
 800b93a:	72a3      	strb	r3, [r4, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 800b93c:	7aeb      	ldrb	r3, [r5, #11]
 800b93e:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__ref_bg_ctrl =
 800b942:	72e3      	strb	r3, [r4, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 800b944:	7b2b      	ldrb	r3, [r5, #12]
 800b946:	f003 030f 	and.w	r3, r3, #15
	pdata->ana_config__regdvdd1v2_ctrl =
 800b94a:	7323      	strb	r3, [r4, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 800b94c:	7b6b      	ldrb	r3, [r5, #13]
 800b94e:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__osc_slow_ctrl =
 800b952:	7363      	strb	r3, [r4, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 800b954:	7bab      	ldrb	r3, [r5, #14]
 800b956:	f003 0301 	and.w	r3, r3, #1
	pdata->test_mode__status =
 800b95a:	73a3      	strb	r3, [r4, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 800b95c:	7beb      	ldrb	r3, [r5, #15]
 800b95e:	f003 0303 	and.w	r3, r3, #3
	pdata->firmware__system_status =
 800b962:	73e3      	strb	r3, [r4, #15]
	pdata->firmware__mode_status =
 800b964:	7c2b      	ldrb	r3, [r5, #16]
 800b966:	7423      	strb	r3, [r4, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 800b968:	7c6b      	ldrb	r3, [r5, #17]
 800b96a:	7463      	strb	r3, [r4, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 800b96c:	f105 0112 	add.w	r1, r5, #18
 800b970:	2002      	movs	r0, #2
 800b972:	f7ff fa2d 	bl	800add0 <VL53L1_i2c_decode_uint16_t>
 800b976:	f3c0 000b 	ubfx	r0, r0, #0, #12
	pdata->firmware__cal_repeat_rate_counter =
 800b97a:	8260      	strh	r0, [r4, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800b97c:	f105 0116 	add.w	r1, r5, #22
 800b980:	2002      	movs	r0, #2
 800b982:	f7ff fa25 	bl	800add0 <VL53L1_i2c_decode_uint16_t>
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800b986:	f105 0118 	add.w	r1, r5, #24
	pdata->gph__system__thresh_high =
 800b98a:	82a0      	strh	r0, [r4, #20]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800b98c:	2002      	movs	r0, #2
 800b98e:	f7ff fa1f 	bl	800add0 <VL53L1_i2c_decode_uint16_t>
	pdata->gph__system__thresh_low =
 800b992:	82e0      	strh	r0, [r4, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 800b994:	7eab      	ldrb	r3, [r5, #26]
 800b996:	f003 0301 	and.w	r3, r3, #1
	pdata->gph__system__enable_xtalk_per_quadrant =
 800b99a:	7623      	strb	r3, [r4, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 800b99c:	7eeb      	ldrb	r3, [r5, #27]
 800b99e:	f003 0307 	and.w	r3, r3, #7
	pdata->gph__spare_0 =
 800b9a2:	7663      	strb	r3, [r4, #25]
	pdata->gph__sd_config__woi_sd0 =
 800b9a4:	7f2b      	ldrb	r3, [r5, #28]
 800b9a6:	76a3      	strb	r3, [r4, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 800b9a8:	7f6b      	ldrb	r3, [r5, #29]
 800b9aa:	76e3      	strb	r3, [r4, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 800b9ac:	7fab      	ldrb	r3, [r5, #30]
 800b9ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->gph__sd_config__initial_phase_sd0 =
 800b9b2:	7723      	strb	r3, [r4, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800b9b4:	7feb      	ldrb	r3, [r5, #31]
 800b9b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->gph__sd_config__initial_phase_sd1 =
 800b9ba:	7763      	strb	r3, [r4, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 800b9bc:	f895 3020 	ldrb.w	r3, [r5, #32]
 800b9c0:	f003 0303 	and.w	r3, r3, #3
	pdata->gph__sd_config__first_order_select =
 800b9c4:	77a3      	strb	r3, [r4, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 800b9c6:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800b9ca:	f003 030f 	and.w	r3, r3, #15
	pdata->gph__sd_config__quantifier =
 800b9ce:	77e3      	strb	r3, [r4, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 800b9d0:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800b9d4:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 800b9d8:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 800b9dc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 800b9e0:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800b9e4:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 800b9e8:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 800b9ec:	f003 0301 	and.w	r3, r3, #1
	pdata->gph__gph_id =
 800b9f0:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 800b9f4:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 800b9f8:	f003 0303 	and.w	r3, r3, #3
	pdata->system__interrupt_set =
 800b9fc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 800ba00:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
 800ba04:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__enables =
 800ba08:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 800ba0c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800ba10:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__clear =
 800ba14:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 800ba18:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 800ba1c:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__status =
 800ba20:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 800ba24:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 800ba28:	f003 0301 	and.w	r3, r3, #1
	pdata->mcu_to_host_bank__wr_access_en =
 800ba2c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 800ba30:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800ba34:	f003 0301 	and.w	r3, r3, #1
	pdata->power_management__go1_reset_status =
 800ba38:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 800ba3c:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800ba40:	f003 0303 	and.w	r3, r3, #3
	pdata->pad_startup_mode__value_ro =
 800ba44:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 800ba48:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800ba4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->pad_startup_mode__value_ctrl =
 800ba50:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 800ba54:	f105 012e 	add.w	r1, r5, #46	; 0x2e
 800ba58:	2004      	movs	r0, #4
 800ba5a:	f7ff f9f5 	bl	800ae48 <VL53L1_i2c_decode_uint32_t>
 800ba5e:	f3c0 0011 	ubfx	r0, r0, #0, #18
	pdata->pll_period_us =
 800ba62:	62e0      	str	r0, [r4, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 800ba64:	f105 0132 	add.w	r1, r5, #50	; 0x32
 800ba68:	2004      	movs	r0, #4
 800ba6a:	f7ff f9ed 	bl	800ae48 <VL53L1_i2c_decode_uint32_t>
	pdata->interrupt_scheduler__data_out =
 800ba6e:	6320      	str	r0, [r4, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 800ba70:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
 800ba74:	f003 0301 	and.w	r3, r3, #1
	pdata->nvm_bist__complete =
 800ba78:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 800ba7c:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
 800ba80:	f003 0301 	and.w	r3, r3, #1
	pdata->nvm_bist__status =
 800ba84:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 800ba88:	2000      	movs	r0, #0
 800ba8a:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ba8c:	f06f 0009 	mvn.w	r0, #9
 800ba90:	4770      	bx	lr
 800ba92:	bf00      	nop

0800ba94 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800ba94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba98:	b08e      	sub	sp, #56	; 0x38
 800ba9a:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_ReadMulti(
 800ba9c:	2331      	movs	r3, #49	; 0x31
 800ba9e:	aa01      	add	r2, sp, #4
 800baa0:	f240 110f 	movw	r1, #271	; 0x10f
 800baa4:	f006 f8c4 	bl	8011c30 <VL53L1_ReadMulti>
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800baa8:	4605      	mov	r5, r0
 800baaa:	2800      	cmp	r0, #0
 800baac:	d16c      	bne.n	800bb88 <VL53L1_get_nvm_copy_data+0xf4>
	pdata->identification__model_id =
 800baae:	f89d 1004 	ldrb.w	r1, [sp, #4]
	pdata->identification__module_type =
 800bab2:	f89d 2005 	ldrb.w	r2, [sp, #5]
	pdata->identification__revision_id =
 800bab6:	f89d 3006 	ldrb.w	r3, [sp, #6]
	pdata->identification__model_id =
 800baba:	7021      	strb	r1, [r4, #0]
	pdata->identification__module_type =
 800babc:	7062      	strb	r2, [r4, #1]
	pdata->identification__revision_id =
 800babe:	70a3      	strb	r3, [r4, #2]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 800bac0:	f10d 0107 	add.w	r1, sp, #7
 800bac4:	2002      	movs	r0, #2
 800bac6:	f7ff f983 	bl	800add0 <VL53L1_i2c_decode_uint16_t>
		(*(pbuffer +   6)) & 0x7;
 800baca:	f89d 800a 	ldrb.w	r8, [sp, #10]
		(*(pbuffer +   7)) & 0x7;
 800bace:	f89d c00b 	ldrb.w	ip, [sp, #11]
		(*(pbuffer +   5)) & 0x7F;
 800bad2:	f89d 9009 	ldrb.w	r9, [sp, #9]
		(*(pbuffer +   8)) & 0x3F;
 800bad6:	f89d e00c 	ldrb.w	lr, [sp, #12]
		(*(pbuffer +   9)) & 0x3F;
 800bada:	f89d 700d 	ldrb.w	r7, [sp, #13]
		(*(pbuffer +  10)) & 0x1;
 800bade:	f89d 600e 	ldrb.w	r6, [sp, #14]
		(*(pbuffer +  11)) & 0x7F;
 800bae2:	f89d a00f 	ldrb.w	sl, [sp, #15]
		(*(pbuffer +  12)) & 0x1;
 800bae6:	f89d 1010 	ldrb.w	r1, [sp, #16]
		(*(pbuffer +  13)) & 0x3F;
 800baea:	f89d 2011 	ldrb.w	r2, [sp, #17]
		(*(pbuffer +  14)) & 0x3F;
 800baee:	f89d 3012 	ldrb.w	r3, [sp, #18]
	pdata->identification__module_id =
 800baf2:	80a0      	strh	r0, [r4, #4]
		(*(pbuffer +   6)) & 0x7;
 800baf4:	f008 0807 	and.w	r8, r8, #7
		(*(pbuffer +   7)) & 0x7;
 800baf8:	f00c 0c07 	and.w	ip, ip, #7
		(*(pbuffer +   8)) & 0x3F;
 800bafc:	f00e 0e3f 	and.w	lr, lr, #63	; 0x3f
		(*(pbuffer +   9)) & 0x3F;
 800bb00:	f007 073f 	and.w	r7, r7, #63	; 0x3f
		(*(pbuffer +  10)) & 0x1;
 800bb04:	f006 0601 	and.w	r6, r6, #1
		(*(pbuffer +  11)) & 0x7F;
 800bb08:	f00a 007f 	and.w	r0, sl, #127	; 0x7f
		(*(pbuffer +  12)) & 0x1;
 800bb0c:	f001 0101 	and.w	r1, r1, #1
		(*(pbuffer +  13)) & 0x3F;
 800bb10:	f002 023f 	and.w	r2, r2, #63	; 0x3f
		(*(pbuffer +  14)) & 0x3F;
 800bb14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ana_config__fast_osc__freq_set =
 800bb18:	f884 8007 	strb.w	r8, [r4, #7]
	pdata->ana_config__vcsel_trim =
 800bb1c:	f884 c008 	strb.w	ip, [r4, #8]
	pdata->global_config__spad_enables_rtn_0 =
 800bb20:	f89d 8013 	ldrb.w	r8, [sp, #19]
	pdata->global_config__spad_enables_rtn_1 =
 800bb24:	f89d c014 	ldrb.w	ip, [sp, #20]
	pdata->ana_config__vcsel_selion =
 800bb28:	f884 e009 	strb.w	lr, [r4, #9]
		(*(pbuffer +   5)) & 0x7F;
 800bb2c:	f009 097f 	and.w	r9, r9, #127	; 0x7f
	pdata->ana_config__vcsel_selion_max =
 800bb30:	72a7      	strb	r7, [r4, #10]
	pdata->protected_laser_safety__lock_bit =
 800bb32:	72e6      	strb	r6, [r4, #11]
	pdata->laser_safety__key =
 800bb34:	7320      	strb	r0, [r4, #12]
	pdata->laser_safety__key_ro =
 800bb36:	7361      	strb	r1, [r4, #13]
	pdata->laser_safety__clip =
 800bb38:	73a2      	strb	r2, [r4, #14]
	pdata->laser_safety__mult =
 800bb3a:	73e3      	strb	r3, [r4, #15]
	pdata->global_config__spad_enables_rtn_2 =
 800bb3c:	f8dd e019 	ldr.w	lr, [sp, #25]
 800bb40:	f8dd 701d 	ldr.w	r7, [sp, #29]
 800bb44:	f8dd 6021 	ldr.w	r6, [sp, #33]	; 0x21
 800bb48:	f8dd 0025 	ldr.w	r0, [sp, #37]	; 0x25
 800bb4c:	f8dd 1029 	ldr.w	r1, [sp, #41]	; 0x29
 800bb50:	f8dd 202d 	ldr.w	r2, [sp, #45]	; 0x2d
 800bb54:	f8dd 3031 	ldr.w	r3, [sp, #49]	; 0x31
	pdata->ana_config__fast_osc__trim_max =
 800bb58:	f884 9006 	strb.w	r9, [r4, #6]
	pdata->global_config__spad_enables_rtn_0 =
 800bb5c:	f884 8010 	strb.w	r8, [r4, #16]
	pdata->global_config__spad_enables_rtn_1 =
 800bb60:	f884 c011 	strb.w	ip, [r4, #17]
	pdata->global_config__spad_enables_rtn_2 =
 800bb64:	f8dd c015 	ldr.w	ip, [sp, #21]
 800bb68:	f8c4 c012 	str.w	ip, [r4, #18]
 800bb6c:	f8c4 e016 	str.w	lr, [r4, #22]
 800bb70:	f8c4 701a 	str.w	r7, [r4, #26]
 800bb74:	f8c4 601e 	str.w	r6, [r4, #30]
 800bb78:	f8c4 0022 	str.w	r0, [r4, #34]	; 0x22
 800bb7c:	f8c4 1026 	str.w	r1, [r4, #38]	; 0x26
 800bb80:	f8c4 202a 	str.w	r2, [r4, #42]	; 0x2a
 800bb84:	f8c4 302e 	str.w	r3, [r4, #46]	; 0x2e
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 800bb88:	4628      	mov	r0, r5
 800bb8a:	b00e      	add	sp, #56	; 0x38
 800bb8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800bb90 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 800bb90:	b570      	push	{r4, r5, r6, lr}
 800bb92:	460e      	mov	r6, r1
 800bb94:	b082      	sub	sp, #8
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 800bb96:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
{
 800bb9a:	4605      	mov	r5, r0
	status = VL53L1_WaitUs(
 800bb9c:	f006 f8ae 	bl	8011cfc <VL53L1_WaitUs>
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 800bba0:	4604      	mov	r4, r0
 800bba2:	b110      	cbz	r0, 800bbaa <VL53L1_poll_for_boot_completion+0x1a>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);

	LOG_FUNCTION_END(status);

	return status;
}
 800bba4:	4620      	mov	r0, r4
 800bba6:	b002      	add	sp, #8
 800bba8:	bd70      	pop	{r4, r5, r6, pc}
		status =
 800bbaa:	2301      	movs	r3, #1
 800bbac:	4631      	mov	r1, r6
 800bbae:	9301      	str	r3, [sp, #4]
 800bbb0:	9300      	str	r3, [sp, #0]
 800bbb2:	22e5      	movs	r2, #229	; 0xe5
 800bbb4:	4628      	mov	r0, r5
 800bbb6:	f006 f8af 	bl	8011d18 <VL53L1_WaitValueMaskEx>
	if (status == VL53L1_ERROR_NONE)
 800bbba:	4604      	mov	r4, r0
 800bbbc:	2800      	cmp	r0, #0
 800bbbe:	d1f1      	bne.n	800bba4 <VL53L1_poll_for_boot_completion+0x14>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 800bbc0:	4628      	mov	r0, r5
 800bbc2:	2103      	movs	r1, #3
 800bbc4:	f7fe ffde 	bl	800ab84 <VL53L1_init_ll_driver_state>
}
 800bbc8:	4620      	mov	r0, r4
 800bbca:	b002      	add	sp, #8
 800bbcc:	bd70      	pop	{r4, r5, r6, pc}
 800bbce:	bf00      	nop

0800bbd0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bbd0:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800bbd2:	f001 fd95 	bl	800d700 <vTaskStartScheduler>
  
  return osOK;
}
 800bbd6:	2000      	movs	r0, #0
 800bbd8:	bd08      	pop	{r3, pc}
 800bbda:	bf00      	nop

0800bbdc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bbdc:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bbde:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 800bbe2:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 800bbe4:	2c84      	cmp	r4, #132	; 0x84
{
 800bbe6:	4602      	mov	r2, r0
    fpriority += (priority - osPriorityIdle);
 800bbe8:	bf14      	ite	ne
 800bbea:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bbec:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bbee:	ad03      	add	r5, sp, #12
{
 800bbf0:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bbf2:	6840      	ldr	r0, [r0, #4]
 800bbf4:	6811      	ldr	r1, [r2, #0]
 800bbf6:	8a12      	ldrh	r2, [r2, #16]
 800bbf8:	e88d 0030 	stmia.w	sp, {r4, r5}
 800bbfc:	f001 fc90 	bl	800d520 <xTaskCreate>
 800bc00:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bc02:	bf0c      	ite	eq
 800bc04:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 800bc06:	2000      	movne	r0, #0
}
 800bc08:	b005      	add	sp, #20
 800bc0a:	bd30      	pop	{r4, r5, pc}

0800bc0c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bc0c:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	bf08      	it	eq
 800bc12:	2001      	moveq	r0, #1
 800bc14:	f001 fefc 	bl	800da10 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bc18:	2000      	movs	r0, #0
 800bc1a:	bd08      	pop	{r3, pc}

0800bc1c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800bc1c:	b500      	push	{lr}
 800bc1e:	b083      	sub	sp, #12
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
                      (StaticTimer_t *)timer_def->controlblock);  
#else
  return xTimerCreate((const char *)"",
 800bc20:	6803      	ldr	r3, [r0, #0]
 800bc22:	9300      	str	r3, [sp, #0]
 800bc24:	4613      	mov	r3, r2
 800bc26:	f1a1 0201 	sub.w	r2, r1, #1
 800bc2a:	fab2 f282 	clz	r2, r2
 800bc2e:	0952      	lsrs	r2, r2, #5
 800bc30:	2101      	movs	r1, #1
 800bc32:	4803      	ldr	r0, [pc, #12]	; (800bc40 <osTimerCreate+0x24>)
 800bc34:	f002 fa68 	bl	800e108 <xTimerCreate>
#endif

#else 
	return NULL;
#endif
}
 800bc38:	b003      	add	sp, #12
 800bc3a:	f85d fb04 	ldr.w	pc, [sp], #4
 800bc3e:	bf00      	nop
 800bc40:	08017194 	.word	0x08017194

0800bc44 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 800bc44:	b510      	push	{r4, lr}
 800bc46:	b084      	sub	sp, #16
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800bc48:	2400      	movs	r4, #0
  TickType_t ticks = millisec / portTICK_PERIOD_MS;

  if (ticks == 0)
    ticks = 1;
 800bc4a:	42a1      	cmp	r1, r4
 800bc4c:	bf14      	ite	ne
 800bc4e:	460a      	movne	r2, r1
 800bc50:	2201      	moveq	r2, #1
  portBASE_TYPE taskWoken = pdFALSE;
 800bc52:	9403      	str	r4, [sp, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc54:	f3ef 8305 	mrs	r3, IPSR
    
  if (inHandlerMode()) 
 800bc58:	b14b      	cbz	r3, 800bc6e <osTimerStart+0x2a>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800bc5a:	9400      	str	r4, [sp, #0]
 800bc5c:	ab03      	add	r3, sp, #12
 800bc5e:	2109      	movs	r1, #9
 800bc60:	f002 faaa 	bl	800e1b8 <xTimerGenericCommand>
 800bc64:	2801      	cmp	r0, #1
 800bc66:	d00b      	beq.n	800bc80 <osTimerStart+0x3c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
      result = osErrorOS;
 800bc68:	20ff      	movs	r0, #255	; 0xff

#else 
  result = osErrorOS;
#endif
  return result;
}
 800bc6a:	b004      	add	sp, #16
 800bc6c:	bd10      	pop	{r4, pc}
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800bc6e:	9300      	str	r3, [sp, #0]
 800bc70:	2104      	movs	r1, #4
 800bc72:	f002 faa1 	bl	800e1b8 <xTimerGenericCommand>
 800bc76:	2801      	cmp	r0, #1
 800bc78:	d1f6      	bne.n	800bc68 <osTimerStart+0x24>
  osStatus result = osOK;
 800bc7a:	2000      	movs	r0, #0
}
 800bc7c:	b004      	add	sp, #16
 800bc7e:	bd10      	pop	{r4, pc}
      portEND_SWITCHING_ISR(taskWoken);     
 800bc80:	9b03      	ldr	r3, [sp, #12]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d0f9      	beq.n	800bc7a <osTimerStart+0x36>
 800bc86:	4b05      	ldr	r3, [pc, #20]	; (800bc9c <osTimerStart+0x58>)
 800bc88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc8c:	601a      	str	r2, [r3, #0]
 800bc8e:	f3bf 8f4f 	dsb	sy
 800bc92:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 800bc96:	4620      	mov	r0, r4
 800bc98:	e7e7      	b.n	800bc6a <osTimerStart+0x26>
 800bc9a:	bf00      	nop
 800bc9c:	e000ed04 	.word	0xe000ed04

0800bca0 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 800bca0:	b510      	push	{r4, lr}
 800bca2:	b084      	sub	sp, #16
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800bca4:	2400      	movs	r4, #0
 800bca6:	9403      	str	r4, [sp, #12]
 800bca8:	f3ef 8305 	mrs	r3, IPSR

  if (inHandlerMode()) {
 800bcac:	b153      	cbz	r3, 800bcc4 <osTimerStop+0x24>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 800bcae:	9400      	str	r4, [sp, #0]
 800bcb0:	ab03      	add	r3, sp, #12
 800bcb2:	4622      	mov	r2, r4
 800bcb4:	2108      	movs	r1, #8
 800bcb6:	f002 fa7f 	bl	800e1b8 <xTimerGenericCommand>
 800bcba:	2801      	cmp	r0, #1
 800bcbc:	d00c      	beq.n	800bcd8 <osTimerStop+0x38>
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
      result = osErrorOS;
 800bcbe:	20ff      	movs	r0, #255	; 0xff
  }
#else 
  result = osErrorOS;
#endif 
  return result;
}
 800bcc0:	b004      	add	sp, #16
 800bcc2:	bd10      	pop	{r4, pc}
    if (xTimerStop(timer_id, 0) != pdPASS) {
 800bcc4:	9300      	str	r3, [sp, #0]
 800bcc6:	461a      	mov	r2, r3
 800bcc8:	2103      	movs	r1, #3
 800bcca:	f002 fa75 	bl	800e1b8 <xTimerGenericCommand>
 800bcce:	2801      	cmp	r0, #1
 800bcd0:	d1f5      	bne.n	800bcbe <osTimerStop+0x1e>
  osStatus result = osOK;
 800bcd2:	2000      	movs	r0, #0
}
 800bcd4:	b004      	add	sp, #16
 800bcd6:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800bcd8:	9b03      	ldr	r3, [sp, #12]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d0f9      	beq.n	800bcd2 <osTimerStop+0x32>
 800bcde:	4b05      	ldr	r3, [pc, #20]	; (800bcf4 <osTimerStop+0x54>)
 800bce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bce4:	601a      	str	r2, [r3, #0]
 800bce6:	f3bf 8f4f 	dsb	sy
 800bcea:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 800bcee:	4620      	mov	r0, r4
 800bcf0:	e7e6      	b.n	800bcc0 <osTimerStop+0x20>
 800bcf2:	bf00      	nop
 800bcf4:	e000ed04 	.word	0xe000ed04

0800bcf8 <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800bcf8:	2001      	movs	r0, #1
 800bcfa:	f000 bc55 	b.w	800c5a8 <xQueueCreateMutex>
 800bcfe:	bf00      	nop

0800bd00 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800bd00:	b510      	push	{r4, lr}
 800bd02:	b082      	sub	sp, #8
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800bd04:	2400      	movs	r4, #0
 800bd06:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 800bd08:	b1d8      	cbz	r0, 800bd42 <osMutexWait+0x42>
 800bd0a:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800bd0e:	b933      	cbnz	r3, 800bd1e <osMutexWait+0x1e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800bd10:	f001 f94c 	bl	800cfac <xQueueSemaphoreTake>
 800bd14:	2801      	cmp	r0, #1
 800bd16:	d017      	beq.n	800bd48 <osMutexWait+0x48>
      return osErrorOS;
 800bd18:	20ff      	movs	r0, #255	; 0xff
    return osErrorOS;
  }
  
  return osOK;
}
 800bd1a:	b002      	add	sp, #8
 800bd1c:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800bd1e:	aa01      	add	r2, sp, #4
 800bd20:	4621      	mov	r1, r4
 800bd22:	f001 fa9f 	bl	800d264 <xQueueReceiveFromISR>
 800bd26:	2801      	cmp	r0, #1
 800bd28:	d1f6      	bne.n	800bd18 <osMutexWait+0x18>
	portEND_SWITCHING_ISR(taskWoken);
 800bd2a:	9b01      	ldr	r3, [sp, #4]
 800bd2c:	b163      	cbz	r3, 800bd48 <osMutexWait+0x48>
 800bd2e:	4b07      	ldr	r3, [pc, #28]	; (800bd4c <osMutexWait+0x4c>)
 800bd30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd34:	601a      	str	r2, [r3, #0]
 800bd36:	f3bf 8f4f 	dsb	sy
 800bd3a:	f3bf 8f6f 	isb	sy
  return osOK;
 800bd3e:	4620      	mov	r0, r4
 800bd40:	e7eb      	b.n	800bd1a <osMutexWait+0x1a>
    return osErrorParameter;
 800bd42:	2080      	movs	r0, #128	; 0x80
}
 800bd44:	b002      	add	sp, #8
 800bd46:	bd10      	pop	{r4, pc}
  return osOK;
 800bd48:	2000      	movs	r0, #0
 800bd4a:	e7e6      	b.n	800bd1a <osMutexWait+0x1a>
 800bd4c:	e000ed04 	.word	0xe000ed04

0800bd50 <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800bd50:	2901      	cmp	r1, #1
{ 
 800bd52:	4608      	mov	r0, r1
  if (count == 1) {
 800bd54:	d001      	beq.n	800bd5a <osSemaphoreCreate+0xa>
    vSemaphoreCreateBinary(sema);
    return sema;
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 800bd56:	f000 bd75 	b.w	800c844 <xQueueCreateCountingSemaphore>
{ 
 800bd5a:	b510      	push	{r4, lr}
    vSemaphoreCreateBinary(sema);
 800bd5c:	2203      	movs	r2, #3
 800bd5e:	2100      	movs	r1, #0
 800bd60:	f000 fbe6 	bl	800c530 <xQueueGenericCreate>
 800bd64:	4604      	mov	r4, r0
 800bd66:	b120      	cbz	r0, 800bd72 <osSemaphoreCreate+0x22>
 800bd68:	2300      	movs	r3, #0
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	4619      	mov	r1, r3
 800bd6e:	f000 fd87 	bl	800c880 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 800bd72:	4620      	mov	r0, r4
 800bd74:	bd10      	pop	{r4, pc}
 800bd76:	bf00      	nop

0800bd78 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800bd78:	b510      	push	{r4, lr}
 800bd7a:	b082      	sub	sp, #8
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800bd7c:	2400      	movs	r4, #0
 800bd7e:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800bd80:	b1d8      	cbz	r0, 800bdba <osSemaphoreWait+0x42>
 800bd82:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800bd86:	b933      	cbnz	r3, 800bd96 <osSemaphoreWait+0x1e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800bd88:	f001 f910 	bl	800cfac <xQueueSemaphoreTake>
 800bd8c:	2801      	cmp	r0, #1
 800bd8e:	d017      	beq.n	800bdc0 <osSemaphoreWait+0x48>
      return osErrorOS;
 800bd90:	20ff      	movs	r0, #255	; 0xff
    return osErrorOS;
  }
  
  return osOK;
}
 800bd92:	b002      	add	sp, #8
 800bd94:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bd96:	aa01      	add	r2, sp, #4
 800bd98:	4621      	mov	r1, r4
 800bd9a:	f001 fa63 	bl	800d264 <xQueueReceiveFromISR>
 800bd9e:	2801      	cmp	r0, #1
 800bda0:	d1f6      	bne.n	800bd90 <osSemaphoreWait+0x18>
	portEND_SWITCHING_ISR(taskWoken);
 800bda2:	9b01      	ldr	r3, [sp, #4]
 800bda4:	b163      	cbz	r3, 800bdc0 <osSemaphoreWait+0x48>
 800bda6:	4b07      	ldr	r3, [pc, #28]	; (800bdc4 <osSemaphoreWait+0x4c>)
 800bda8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdac:	601a      	str	r2, [r3, #0]
 800bdae:	f3bf 8f4f 	dsb	sy
 800bdb2:	f3bf 8f6f 	isb	sy
  return osOK;
 800bdb6:	4620      	mov	r0, r4
 800bdb8:	e7eb      	b.n	800bd92 <osSemaphoreWait+0x1a>
    return osErrorParameter;
 800bdba:	2080      	movs	r0, #128	; 0x80
}
 800bdbc:	b002      	add	sp, #8
 800bdbe:	bd10      	pop	{r4, pc}
  return osOK;
 800bdc0:	2000      	movs	r0, #0
 800bdc2:	e7e6      	b.n	800bd92 <osSemaphoreWait+0x1a>
 800bdc4:	e000ed04 	.word	0xe000ed04

0800bdc8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800bdc8:	b510      	push	{r4, lr}
 800bdca:	b082      	sub	sp, #8
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800bdcc:	2400      	movs	r4, #0
 800bdce:	9401      	str	r4, [sp, #4]
 800bdd0:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 800bdd4:	b13b      	cbz	r3, 800bde6 <osSemaphoreRelease+0x1e>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bdd6:	a901      	add	r1, sp, #4
 800bdd8:	f000 ff0c 	bl	800cbf4 <xQueueGiveFromISR>
 800bddc:	2801      	cmp	r0, #1
 800bdde:	d00b      	beq.n	800bdf8 <osSemaphoreRelease+0x30>
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
      result = osErrorOS;
 800bde0:	20ff      	movs	r0, #255	; 0xff
    }
  }
  
  return result;
}
 800bde2:	b002      	add	sp, #8
 800bde4:	bd10      	pop	{r4, pc}
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800bde6:	461a      	mov	r2, r3
 800bde8:	4619      	mov	r1, r3
 800bdea:	f000 fd49 	bl	800c880 <xQueueGenericSend>
 800bdee:	2801      	cmp	r0, #1
 800bdf0:	d1f6      	bne.n	800bde0 <osSemaphoreRelease+0x18>
  osStatus result = osOK;
 800bdf2:	2000      	movs	r0, #0
}
 800bdf4:	b002      	add	sp, #8
 800bdf6:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800bdf8:	9b01      	ldr	r3, [sp, #4]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d0f9      	beq.n	800bdf2 <osSemaphoreRelease+0x2a>
 800bdfe:	4b05      	ldr	r3, [pc, #20]	; (800be14 <osSemaphoreRelease+0x4c>)
 800be00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be04:	601a      	str	r2, [r3, #0]
 800be06:	f3bf 8f4f 	dsb	sy
 800be0a:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 800be0e:	4620      	mov	r0, r4
 800be10:	e7e7      	b.n	800bde2 <osSemaphoreRelease+0x1a>
 800be12:	bf00      	nop
 800be14:	e000ed04 	.word	0xe000ed04

0800be18 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be18:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800be1c:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800be20:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800be22:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800be24:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be26:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be28:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be2a:	6103      	str	r3, [r0, #16]
 800be2c:	4770      	bx	lr
 800be2e:	bf00      	nop

0800be30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800be30:	2300      	movs	r3, #0
 800be32:	6103      	str	r3, [r0, #16]
 800be34:	4770      	bx	lr
 800be36:	bf00      	nop

0800be38 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800be38:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800be3a:	6802      	ldr	r2, [r0, #0]
{
 800be3c:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800be3e:	689c      	ldr	r4, [r3, #8]
 800be40:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800be42:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800be44:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800be46:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800be48:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800be4a:	6099      	str	r1, [r3, #8]
}
 800be4c:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pvContainer = ( void * ) pxList;
 800be50:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800be52:	6002      	str	r2, [r0, #0]
}
 800be54:	4770      	bx	lr
 800be56:	bf00      	nop

0800be58 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800be58:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800be5a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800be5c:	1c6b      	adds	r3, r5, #1
 800be5e:	d011      	beq.n	800be84 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be60:	f100 0208 	add.w	r2, r0, #8
 800be64:	e000      	b.n	800be68 <vListInsert+0x10>
 800be66:	461a      	mov	r2, r3
 800be68:	6853      	ldr	r3, [r2, #4]
 800be6a:	681c      	ldr	r4, [r3, #0]
 800be6c:	42a5      	cmp	r5, r4
 800be6e:	d2fa      	bcs.n	800be66 <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800be70:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800be72:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800be74:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800be76:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800be78:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800be7a:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800be7c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800be7e:	6004      	str	r4, [r0, #0]
}
 800be80:	bc30      	pop	{r4, r5}
 800be82:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800be84:	6902      	ldr	r2, [r0, #16]
 800be86:	6853      	ldr	r3, [r2, #4]
 800be88:	e7f2      	b.n	800be70 <vListInsert+0x18>
 800be8a:	bf00      	nop

0800be8c <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800be8c:	6842      	ldr	r2, [r0, #4]
 800be8e:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800be90:	6903      	ldr	r3, [r0, #16]
{
 800be92:	b410      	push	{r4}
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800be94:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800be96:	6881      	ldr	r1, [r0, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800be98:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800be9a:	604a      	str	r2, [r1, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 800be9c:	681a      	ldr	r2, [r3, #0]
	if( pxList->pxIndex == pxItemToRemove )
 800be9e:	42a0      	cmp	r0, r4
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bea0:	bf08      	it	eq
 800bea2:	6059      	streq	r1, [r3, #4]
	( pxList->uxNumberOfItems )--;
 800bea4:	3a01      	subs	r2, #1
	pxItemToRemove->pvContainer = NULL;
 800bea6:	2100      	movs	r1, #0
 800bea8:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800beaa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800beac:	6818      	ldr	r0, [r3, #0]
}
 800beae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800beb2:	4770      	bx	lr

0800beb4 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800beb4:	4b0e      	ldr	r3, [pc, #56]	; (800bef0 <prvTaskExitError+0x3c>)
 800beb6:	681b      	ldr	r3, [r3, #0]
{
 800beb8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800beba:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 800bebc:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 800bebe:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800bec0:	d008      	beq.n	800bed4 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec6:	f383 8811 	msr	BASEPRI, r3
 800beca:	f3bf 8f6f 	isb	sy
 800bece:	f3bf 8f4f 	dsb	sy
 800bed2:	e7fe      	b.n	800bed2 <prvTaskExitError+0x1e>
 800bed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed8:	f383 8811 	msr	BASEPRI, r3
 800bedc:	f3bf 8f6f 	isb	sy
 800bee0:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bee4:	9b01      	ldr	r3, [sp, #4]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d0fc      	beq.n	800bee4 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800beea:	b002      	add	sp, #8
 800beec:	4770      	bx	lr
 800beee:	bf00      	nop
 800bef0:	20000020 	.word	0x20000020

0800bef4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bef4:	4808      	ldr	r0, [pc, #32]	; (800bf18 <prvPortStartFirstTask+0x24>)
 800bef6:	6800      	ldr	r0, [r0, #0]
 800bef8:	6800      	ldr	r0, [r0, #0]
 800befa:	f380 8808 	msr	MSP, r0
 800befe:	f04f 0000 	mov.w	r0, #0
 800bf02:	f380 8814 	msr	CONTROL, r0
 800bf06:	b662      	cpsie	i
 800bf08:	b661      	cpsie	f
 800bf0a:	f3bf 8f4f 	dsb	sy
 800bf0e:	f3bf 8f6f 	isb	sy
 800bf12:	df00      	svc	0
 800bf14:	bf00      	nop
 800bf16:	0000      	.short	0x0000
 800bf18:	e000ed08 	.word	0xe000ed08

0800bf1c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bf1c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bf2c <vPortEnableVFP+0x10>
 800bf20:	6801      	ldr	r1, [r0, #0]
 800bf22:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bf26:	6001      	str	r1, [r0, #0]
 800bf28:	4770      	bx	lr
 800bf2a:	0000      	.short	0x0000
 800bf2c:	e000ed88 	.word	0xe000ed88

0800bf30 <pxPortInitialiseStack>:
{
 800bf30:	b430      	push	{r4, r5}
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bf32:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bf36:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bf3a:	4c07      	ldr	r4, [pc, #28]	; (800bf58 <pxPortInitialiseStack+0x28>)
 800bf3c:	f840 4c0c 	str.w	r4, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bf40:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bf44:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bf48:	e900 0022 	stmdb	r0, {r1, r5}
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bf4c:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800bf50:	bc30      	pop	{r4, r5}
 800bf52:	3844      	subs	r0, #68	; 0x44
 800bf54:	4770      	bx	lr
 800bf56:	bf00      	nop
 800bf58:	0800beb5 	.word	0x0800beb5
 800bf5c:	00000000 	.word	0x00000000

0800bf60 <SVC_Handler>:
	__asm volatile (
 800bf60:	4b07      	ldr	r3, [pc, #28]	; (800bf80 <pxCurrentTCBConst2>)
 800bf62:	6819      	ldr	r1, [r3, #0]
 800bf64:	6808      	ldr	r0, [r1, #0]
 800bf66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf6a:	f380 8809 	msr	PSP, r0
 800bf6e:	f3bf 8f6f 	isb	sy
 800bf72:	f04f 0000 	mov.w	r0, #0
 800bf76:	f380 8811 	msr	BASEPRI, r0
 800bf7a:	4770      	bx	lr
 800bf7c:	f3af 8000 	nop.w

0800bf80 <pxCurrentTCBConst2>:
 800bf80:	20004f24 	.word	0x20004f24

0800bf84 <vPortEnterCritical>:
 800bf84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf88:	f383 8811 	msr	BASEPRI, r3
 800bf8c:	f3bf 8f6f 	isb	sy
 800bf90:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800bf94:	4a0a      	ldr	r2, [pc, #40]	; (800bfc0 <vPortEnterCritical+0x3c>)
 800bf96:	6813      	ldr	r3, [r2, #0]
 800bf98:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800bf9a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800bf9c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800bf9e:	d000      	beq.n	800bfa2 <vPortEnterCritical+0x1e>
 800bfa0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bfa2:	4b08      	ldr	r3, [pc, #32]	; (800bfc4 <vPortEnterCritical+0x40>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bfaa:	d0f9      	beq.n	800bfa0 <vPortEnterCritical+0x1c>
 800bfac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb0:	f383 8811 	msr	BASEPRI, r3
 800bfb4:	f3bf 8f6f 	isb	sy
 800bfb8:	f3bf 8f4f 	dsb	sy
 800bfbc:	e7fe      	b.n	800bfbc <vPortEnterCritical+0x38>
 800bfbe:	bf00      	nop
 800bfc0:	20000020 	.word	0x20000020
 800bfc4:	e000ed04 	.word	0xe000ed04

0800bfc8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800bfc8:	4a08      	ldr	r2, [pc, #32]	; (800bfec <vPortExitCritical+0x24>)
 800bfca:	6813      	ldr	r3, [r2, #0]
 800bfcc:	b943      	cbnz	r3, 800bfe0 <vPortExitCritical+0x18>
 800bfce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd2:	f383 8811 	msr	BASEPRI, r3
 800bfd6:	f3bf 8f6f 	isb	sy
 800bfda:	f3bf 8f4f 	dsb	sy
 800bfde:	e7fe      	b.n	800bfde <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800bfe0:	3b01      	subs	r3, #1
 800bfe2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bfe4:	b90b      	cbnz	r3, 800bfea <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bfe6:	f383 8811 	msr	BASEPRI, r3
 800bfea:	4770      	bx	lr
 800bfec:	20000020 	.word	0x20000020

0800bff0 <PendSV_Handler>:
	__asm volatile
 800bff0:	f3ef 8009 	mrs	r0, PSP
 800bff4:	f3bf 8f6f 	isb	sy
 800bff8:	4b15      	ldr	r3, [pc, #84]	; (800c050 <pxCurrentTCBConst>)
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	f01e 0f10 	tst.w	lr, #16
 800c000:	bf08      	it	eq
 800c002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c00a:	6010      	str	r0, [r2, #0]
 800c00c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c010:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c014:	f380 8811 	msr	BASEPRI, r0
 800c018:	f3bf 8f4f 	dsb	sy
 800c01c:	f3bf 8f6f 	isb	sy
 800c020:	f001 fd1c 	bl	800da5c <vTaskSwitchContext>
 800c024:	f04f 0000 	mov.w	r0, #0
 800c028:	f380 8811 	msr	BASEPRI, r0
 800c02c:	bc09      	pop	{r0, r3}
 800c02e:	6819      	ldr	r1, [r3, #0]
 800c030:	6808      	ldr	r0, [r1, #0]
 800c032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c036:	f01e 0f10 	tst.w	lr, #16
 800c03a:	bf08      	it	eq
 800c03c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c040:	f380 8809 	msr	PSP, r0
 800c044:	f3bf 8f6f 	isb	sy
 800c048:	4770      	bx	lr
 800c04a:	bf00      	nop
 800c04c:	f3af 8000 	nop.w

0800c050 <pxCurrentTCBConst>:
 800c050:	20004f24 	.word	0x20004f24

0800c054 <SysTick_Handler>:
{
 800c054:	b508      	push	{r3, lr}
	__asm volatile
 800c056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c05a:	f383 8811 	msr	BASEPRI, r3
 800c05e:	f3bf 8f6f 	isb	sy
 800c062:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800c066:	f001 fb99 	bl	800d79c <xTaskIncrementTick>
 800c06a:	b118      	cbz	r0, 800c074 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c06c:	4b03      	ldr	r3, [pc, #12]	; (800c07c <SysTick_Handler+0x28>)
 800c06e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c072:	601a      	str	r2, [r3, #0]
	__asm volatile
 800c074:	2300      	movs	r3, #0
 800c076:	f383 8811 	msr	BASEPRI, r3
 800c07a:	bd08      	pop	{r3, pc}
 800c07c:	e000ed04 	.word	0xe000ed04

0800c080 <vPortSetupTimerInterrupt>:
{
 800c080:	b430      	push	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c082:	4a09      	ldr	r2, [pc, #36]	; (800c0a8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c084:	4d09      	ldr	r5, [pc, #36]	; (800c0ac <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c086:	4b0a      	ldr	r3, [pc, #40]	; (800c0b0 <vPortSetupTimerInterrupt+0x30>)
 800c088:	4c0a      	ldr	r4, [pc, #40]	; (800c0b4 <vPortSetupTimerInterrupt+0x34>)
 800c08a:	480b      	ldr	r0, [pc, #44]	; (800c0b8 <vPortSetupTimerInterrupt+0x38>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c08c:	2100      	movs	r1, #0
 800c08e:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c090:	6029      	str	r1, [r5, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	fba4 1303 	umull	r1, r3, r4, r3
 800c098:	099b      	lsrs	r3, r3, #6
 800c09a:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c09c:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c09e:	6003      	str	r3, [r0, #0]
}
 800c0a0:	bc30      	pop	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c0a2:	6011      	str	r1, [r2, #0]
}
 800c0a4:	4770      	bx	lr
 800c0a6:	bf00      	nop
 800c0a8:	e000e010 	.word	0xe000e010
 800c0ac:	e000e018 	.word	0xe000e018
 800c0b0:	20000050 	.word	0x20000050
 800c0b4:	10624dd3 	.word	0x10624dd3
 800c0b8:	e000e014 	.word	0xe000e014

0800c0bc <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c0bc:	4b3a      	ldr	r3, [pc, #232]	; (800c1a8 <xPortStartScheduler+0xec>)
 800c0be:	4a3b      	ldr	r2, [pc, #236]	; (800c1ac <xPortStartScheduler+0xf0>)
 800c0c0:	6819      	ldr	r1, [r3, #0]
 800c0c2:	4291      	cmp	r1, r2
 800c0c4:	d038      	beq.n	800c138 <xPortStartScheduler+0x7c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c0c6:	681a      	ldr	r2, [r3, #0]
 800c0c8:	4b39      	ldr	r3, [pc, #228]	; (800c1b0 <xPortStartScheduler+0xf4>)
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	d03d      	beq.n	800c14a <xPortStartScheduler+0x8e>
{
 800c0ce:	b510      	push	{r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c0d0:	4b38      	ldr	r3, [pc, #224]	; (800c1b4 <xPortStartScheduler+0xf8>)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c0d2:	4839      	ldr	r0, [pc, #228]	; (800c1b8 <xPortStartScheduler+0xfc>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c0d4:	781a      	ldrb	r2, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c0d6:	4c39      	ldr	r4, [pc, #228]	; (800c1bc <xPortStartScheduler+0x100>)
{
 800c0d8:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c0da:	b2d2      	uxtb	r2, r2
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c0dc:	21ff      	movs	r1, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c0de:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c0e0:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	b2db      	uxtb	r3, r3
 800c0e6:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c0ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c0ee:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c0f2:	2107      	movs	r1, #7
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c0f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c0f8:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c0fa:	0611      	lsls	r1, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c0fc:	7023      	strb	r3, [r4, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c0fe:	bf48      	it	mi
 800c100:	2306      	movmi	r3, #6
 800c102:	d401      	bmi.n	800c108 <xPortStartScheduler+0x4c>
 800c104:	e00f      	b.n	800c126 <xPortStartScheduler+0x6a>
 800c106:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c108:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c10c:	0052      	lsls	r2, r2, #1
 800c10e:	b2d2      	uxtb	r2, r2
 800c110:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c114:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c118:	0612      	lsls	r2, r2, #24
 800c11a:	f103 31ff 	add.w	r1, r3, #4294967295
 800c11e:	d4f2      	bmi.n	800c106 <xPortStartScheduler+0x4a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c120:	2b03      	cmp	r3, #3
 800c122:	6003      	str	r3, [r0, #0]
 800c124:	d01a      	beq.n	800c15c <xPortStartScheduler+0xa0>
	__asm volatile
 800c126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c12a:	f383 8811 	msr	BASEPRI, r3
 800c12e:	f3bf 8f6f 	isb	sy
 800c132:	f3bf 8f4f 	dsb	sy
 800c136:	e7fe      	b.n	800c136 <xPortStartScheduler+0x7a>
 800c138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c13c:	f383 8811 	msr	BASEPRI, r3
 800c140:	f3bf 8f6f 	isb	sy
 800c144:	f3bf 8f4f 	dsb	sy
 800c148:	e7fe      	b.n	800c148 <xPortStartScheduler+0x8c>
 800c14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c14e:	f383 8811 	msr	BASEPRI, r3
 800c152:	f3bf 8f6f 	isb	sy
 800c156:	f3bf 8f4f 	dsb	sy
 800c15a:	e7fe      	b.n	800c15a <xPortStartScheduler+0x9e>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c15c:	9901      	ldr	r1, [sp, #4]
 800c15e:	4c15      	ldr	r4, [pc, #84]	; (800c1b4 <xPortStartScheduler+0xf8>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c160:	4a17      	ldr	r2, [pc, #92]	; (800c1c0 <xPortStartScheduler+0x104>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c162:	021b      	lsls	r3, r3, #8
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c164:	b2c9      	uxtb	r1, r1
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c166:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c16a:	6003      	str	r3, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c16c:	7021      	strb	r1, [r4, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c16e:	6813      	ldr	r3, [r2, #0]
 800c170:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c174:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c176:	6813      	ldr	r3, [r2, #0]
 800c178:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c17c:	6013      	str	r3, [r2, #0]
	vPortSetupTimerInterrupt();
 800c17e:	f7ff ff7f 	bl	800c080 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800c182:	4b10      	ldr	r3, [pc, #64]	; (800c1c4 <xPortStartScheduler+0x108>)
 800c184:	2400      	movs	r4, #0
 800c186:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800c188:	f7ff fec8 	bl	800bf1c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c18c:	4a0e      	ldr	r2, [pc, #56]	; (800c1c8 <xPortStartScheduler+0x10c>)
 800c18e:	6813      	ldr	r3, [r2, #0]
 800c190:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c194:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800c196:	f7ff fead 	bl	800bef4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800c19a:	f001 fc5f 	bl	800da5c <vTaskSwitchContext>
	prvTaskExitError();
 800c19e:	f7ff fe89 	bl	800beb4 <prvTaskExitError>
}
 800c1a2:	4620      	mov	r0, r4
 800c1a4:	b002      	add	sp, #8
 800c1a6:	bd10      	pop	{r4, pc}
 800c1a8:	e000ed00 	.word	0xe000ed00
 800c1ac:	410fc271 	.word	0x410fc271
 800c1b0:	410fc270 	.word	0x410fc270
 800c1b4:	e000e400 	.word	0xe000e400
 800c1b8:	200000e8 	.word	0x200000e8
 800c1bc:	200000e4 	.word	0x200000e4
 800c1c0:	e000ed20 	.word	0xe000ed20
 800c1c4:	20000020 	.word	0x20000020
 800c1c8:	e000ef34 	.word	0xe000ef34

0800c1cc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c1cc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c1d0:	2b0f      	cmp	r3, #15
 800c1d2:	d90e      	bls.n	800c1f2 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c1d4:	4910      	ldr	r1, [pc, #64]	; (800c218 <vPortValidateInterruptPriority+0x4c>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c1d6:	4a11      	ldr	r2, [pc, #68]	; (800c21c <vPortValidateInterruptPriority+0x50>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c1d8:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c1da:	7812      	ldrb	r2, [r2, #0]
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	d908      	bls.n	800c1f2 <vPortValidateInterruptPriority+0x26>
 800c1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e4:	f383 8811 	msr	BASEPRI, r3
 800c1e8:	f3bf 8f6f 	isb	sy
 800c1ec:	f3bf 8f4f 	dsb	sy
 800c1f0:	e7fe      	b.n	800c1f0 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c1f2:	4b0b      	ldr	r3, [pc, #44]	; (800c220 <vPortValidateInterruptPriority+0x54>)
 800c1f4:	4a0b      	ldr	r2, [pc, #44]	; (800c224 <vPortValidateInterruptPriority+0x58>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	6812      	ldr	r2, [r2, #0]
 800c1fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d908      	bls.n	800c214 <vPortValidateInterruptPriority+0x48>
 800c202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c206:	f383 8811 	msr	BASEPRI, r3
 800c20a:	f3bf 8f6f 	isb	sy
 800c20e:	f3bf 8f4f 	dsb	sy
 800c212:	e7fe      	b.n	800c212 <vPortValidateInterruptPriority+0x46>
 800c214:	4770      	bx	lr
 800c216:	bf00      	nop
 800c218:	e000e3f0 	.word	0xe000e3f0
 800c21c:	200000e4 	.word	0x200000e4
 800c220:	e000ed0c 	.word	0xe000ed0c
 800c224:	200000e8 	.word	0x200000e8

0800c228 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c228:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c22a:	4b11      	ldr	r3, [pc, #68]	; (800c270 <prvInsertBlockIntoFreeList+0x48>)
 800c22c:	681a      	ldr	r2, [r3, #0]
 800c22e:	4282      	cmp	r2, r0
 800c230:	d201      	bcs.n	800c236 <prvInsertBlockIntoFreeList+0xe>
 800c232:	4613      	mov	r3, r2
 800c234:	e7fa      	b.n	800c22c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c236:	685c      	ldr	r4, [r3, #4]
 800c238:	1919      	adds	r1, r3, r4
 800c23a:	4288      	cmp	r0, r1
 800c23c:	d103      	bne.n	800c246 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c23e:	6841      	ldr	r1, [r0, #4]
 800c240:	4421      	add	r1, r4
 800c242:	6059      	str	r1, [r3, #4]
 800c244:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c246:	6844      	ldr	r4, [r0, #4]
 800c248:	1901      	adds	r1, r0, r4
 800c24a:	428a      	cmp	r2, r1
 800c24c:	d109      	bne.n	800c262 <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c24e:	4909      	ldr	r1, [pc, #36]	; (800c274 <prvInsertBlockIntoFreeList+0x4c>)
 800c250:	6809      	ldr	r1, [r1, #0]
 800c252:	428a      	cmp	r2, r1
 800c254:	d005      	beq.n	800c262 <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c256:	6851      	ldr	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c258:	6812      	ldr	r2, [r2, #0]
 800c25a:	6002      	str	r2, [r0, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c25c:	4421      	add	r1, r4
 800c25e:	6041      	str	r1, [r0, #4]
 800c260:	e000      	b.n	800c264 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c262:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c264:	4298      	cmp	r0, r3
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c266:	bf18      	it	ne
 800c268:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c26a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c26e:	4770      	bx	lr
 800c270:	20004f1c 	.word	0x20004f1c
 800c274:	200000ec 	.word	0x200000ec

0800c278 <pvPortMalloc>:
{
 800c278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c27a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800c27c:	f001 fa80 	bl	800d780 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800c280:	4a3e      	ldr	r2, [pc, #248]	; (800c37c <pvPortMalloc+0x104>)
 800c282:	6813      	ldr	r3, [r2, #0]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d056      	beq.n	800c336 <pvPortMalloc+0xbe>
 800c288:	4a3d      	ldr	r2, [pc, #244]	; (800c380 <pvPortMalloc+0x108>)
 800c28a:	6815      	ldr	r5, [r2, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c28c:	422c      	tst	r4, r5
 800c28e:	d14d      	bne.n	800c32c <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 800c290:	2c00      	cmp	r4, #0
 800c292:	d04b      	beq.n	800c32c <pvPortMalloc+0xb4>
				xWantedSize += xHeapStructSize;
 800c294:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c298:	0750      	lsls	r0, r2, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c29a:	bf1c      	itt	ne
 800c29c:	f022 0207 	bicne.w	r2, r2, #7
 800c2a0:	3208      	addne	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c2a2:	2a00      	cmp	r2, #0
 800c2a4:	d042      	beq.n	800c32c <pvPortMalloc+0xb4>
 800c2a6:	4f37      	ldr	r7, [pc, #220]	; (800c384 <pvPortMalloc+0x10c>)
 800c2a8:	683e      	ldr	r6, [r7, #0]
 800c2aa:	42b2      	cmp	r2, r6
 800c2ac:	d83e      	bhi.n	800c32c <pvPortMalloc+0xb4>
				pxBlock = xStart.pxNextFreeBlock;
 800c2ae:	4836      	ldr	r0, [pc, #216]	; (800c388 <pvPortMalloc+0x110>)
 800c2b0:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2b2:	e006      	b.n	800c2c2 <pvPortMalloc+0x4a>
 800c2b4:	f8d4 e000 	ldr.w	lr, [r4]
 800c2b8:	f1be 0f00 	cmp.w	lr, #0
 800c2bc:	d004      	beq.n	800c2c8 <pvPortMalloc+0x50>
 800c2be:	4620      	mov	r0, r4
 800c2c0:	4674      	mov	r4, lr
 800c2c2:	6861      	ldr	r1, [r4, #4]
 800c2c4:	428a      	cmp	r2, r1
 800c2c6:	d8f5      	bhi.n	800c2b4 <pvPortMalloc+0x3c>
				if( pxBlock != pxEnd )
 800c2c8:	429c      	cmp	r4, r3
 800c2ca:	d02f      	beq.n	800c32c <pvPortMalloc+0xb4>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c2cc:	6823      	ldr	r3, [r4, #0]
 800c2ce:	6003      	str	r3, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c2d0:	1a8b      	subs	r3, r1, r2
 800c2d2:	2b10      	cmp	r3, #16
 800c2d4:	d910      	bls.n	800c2f8 <pvPortMalloc+0x80>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c2d6:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c2d8:	0741      	lsls	r1, r0, #29
 800c2da:	d008      	beq.n	800c2ee <pvPortMalloc+0x76>
 800c2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e0:	f383 8811 	msr	BASEPRI, r3
 800c2e4:	f3bf 8f6f 	isb	sy
 800c2e8:	f3bf 8f4f 	dsb	sy
 800c2ec:	e7fe      	b.n	800c2ec <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c2ee:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c2f0:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c2f2:	f7ff ff99 	bl	800c228 <prvInsertBlockIntoFreeList>
 800c2f6:	6861      	ldr	r1, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c2f8:	4a24      	ldr	r2, [pc, #144]	; (800c38c <pvPortMalloc+0x114>)
 800c2fa:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c2fc:	1a76      	subs	r6, r6, r1
					pxBlock->pxNextFreeBlock = NULL;
 800c2fe:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c300:	4329      	orrs	r1, r5
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c302:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c304:	6061      	str	r1, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c306:	6023      	str	r3, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c308:	f104 0408 	add.w	r4, r4, #8
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c30c:	bf38      	it	cc
 800c30e:	6016      	strcc	r6, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c310:	603e      	str	r6, [r7, #0]
	( void ) xTaskResumeAll();
 800c312:	f001 faf1 	bl	800d8f8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c316:	0763      	lsls	r3, r4, #29
 800c318:	d00b      	beq.n	800c332 <pvPortMalloc+0xba>
 800c31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c31e:	f383 8811 	msr	BASEPRI, r3
 800c322:	f3bf 8f6f 	isb	sy
 800c326:	f3bf 8f4f 	dsb	sy
 800c32a:	e7fe      	b.n	800c32a <pvPortMalloc+0xb2>
	( void ) xTaskResumeAll();
 800c32c:	f001 fae4 	bl	800d8f8 <xTaskResumeAll>
 800c330:	2400      	movs	r4, #0
}
 800c332:	4620      	mov	r0, r4
 800c334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uxAddress = ( size_t ) ucHeap;
 800c336:	4916      	ldr	r1, [pc, #88]	; (800c390 <pvPortMalloc+0x118>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c338:	074d      	lsls	r5, r1, #29
 800c33a:	d01b      	beq.n	800c374 <pvPortMalloc+0xfc>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c33c:	3107      	adds	r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c33e:	4b15      	ldr	r3, [pc, #84]	; (800c394 <pvPortMalloc+0x11c>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c340:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c344:	1a5b      	subs	r3, r3, r1
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c346:	440b      	add	r3, r1
	uxAddress -= xHeapStructSize;
 800c348:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c34a:	f023 0307 	bic.w	r3, r3, #7
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c34e:	480f      	ldr	r0, [pc, #60]	; (800c38c <pvPortMalloc+0x114>)
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c350:	4d0c      	ldr	r5, [pc, #48]	; (800c384 <pvPortMalloc+0x10c>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c352:	4e0d      	ldr	r6, [pc, #52]	; (800c388 <pvPortMalloc+0x110>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c354:	4f0a      	ldr	r7, [pc, #40]	; (800c380 <pvPortMalloc+0x108>)
	pxEnd = ( void * ) uxAddress;
 800c356:	6013      	str	r3, [r2, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c358:	1a5a      	subs	r2, r3, r1
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c35a:	6002      	str	r2, [r0, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c35c:	602a      	str	r2, [r5, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c35e:	2000      	movs	r0, #0
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c360:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
	xStart.xBlockSize = ( size_t ) 0;
 800c364:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c366:	6031      	str	r1, [r6, #0]
	pxEnd->xBlockSize = 0;
 800c368:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c36a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c36c:	603d      	str	r5, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c36e:	604a      	str	r2, [r1, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c370:	600b      	str	r3, [r1, #0]
 800c372:	e78b      	b.n	800c28c <pvPortMalloc+0x14>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c374:	f644 6320 	movw	r3, #20000	; 0x4e20
 800c378:	e7e5      	b.n	800c346 <pvPortMalloc+0xce>
 800c37a:	bf00      	nop
 800c37c:	200000ec 	.word	0x200000ec
 800c380:	20004f10 	.word	0x20004f10
 800c384:	20004f14 	.word	0x20004f14
 800c388:	20004f1c 	.word	0x20004f1c
 800c38c:	20004f18 	.word	0x20004f18
 800c390:	200000f0 	.word	0x200000f0
 800c394:	20004f10 	.word	0x20004f10

0800c398 <vPortFree>:
	if( pv != NULL )
 800c398:	b1d0      	cbz	r0, 800c3d0 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c39a:	4a19      	ldr	r2, [pc, #100]	; (800c400 <vPortFree+0x68>)
 800c39c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800c3a0:	6812      	ldr	r2, [r2, #0]
 800c3a2:	4213      	tst	r3, r2
 800c3a4:	d108      	bne.n	800c3b8 <vPortFree+0x20>
 800c3a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3aa:	f383 8811 	msr	BASEPRI, r3
 800c3ae:	f3bf 8f6f 	isb	sy
 800c3b2:	f3bf 8f4f 	dsb	sy
 800c3b6:	e7fe      	b.n	800c3b6 <vPortFree+0x1e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c3b8:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800c3bc:	b149      	cbz	r1, 800c3d2 <vPortFree+0x3a>
 800c3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c2:	f383 8811 	msr	BASEPRI, r3
 800c3c6:	f3bf 8f6f 	isb	sy
 800c3ca:	f3bf 8f4f 	dsb	sy
 800c3ce:	e7fe      	b.n	800c3ce <vPortFree+0x36>
 800c3d0:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c3d2:	ea23 0302 	bic.w	r3, r3, r2
{
 800c3d6:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c3d8:	f840 3c04 	str.w	r3, [r0, #-4]
 800c3dc:	4604      	mov	r4, r0
				vTaskSuspendAll();
 800c3de:	f001 f9cf 	bl	800d780 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c3e2:	4a08      	ldr	r2, [pc, #32]	; (800c404 <vPortFree+0x6c>)
 800c3e4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c3e8:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c3ea:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c3ee:	440b      	add	r3, r1
 800c3f0:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c3f2:	f7ff ff19 	bl	800c228 <prvInsertBlockIntoFreeList>
}
 800c3f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800c3fa:	f001 ba7d 	b.w	800d8f8 <xTaskResumeAll>
 800c3fe:	bf00      	nop
 800c400:	20004f10 	.word	0x20004f10
 800c404:	20004f14 	.word	0x20004f14

0800c408 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c408:	b570      	push	{r4, r5, r6, lr}
 800c40a:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c40c:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c40e:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 800c410:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c412:	b932      	cbnz	r2, 800c422 <prvCopyDataToQueue+0x1a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c414:	6805      	ldr	r5, [r0, #0]
 800c416:	bb3d      	cbnz	r5, 800c468 <prvCopyDataToQueue+0x60>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800c418:	6840      	ldr	r0, [r0, #4]
 800c41a:	f001 fd13 	bl	800de44 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800c41e:	6065      	str	r5, [r4, #4]
 800c420:	e025      	b.n	800c46e <prvCopyDataToQueue+0x66>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c422:	b96d      	cbnz	r5, 800c440 <prvCopyDataToQueue+0x38>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800c424:	6880      	ldr	r0, [r0, #8]
 800c426:	f009 f831 	bl	801548c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c42a:	68a3      	ldr	r3, [r4, #8]
 800c42c:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c42e:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c430:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c432:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c434:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c436:	d317      	bcc.n	800c468 <prvCopyDataToQueue+0x60>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c438:	6823      	ldr	r3, [r4, #0]
 800c43a:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800c43c:	4628      	mov	r0, r5
 800c43e:	e016      	b.n	800c46e <prvCopyDataToQueue+0x66>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c440:	68c0      	ldr	r0, [r0, #12]
 800c442:	f009 f823 	bl	801548c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c446:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c448:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c44a:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c44c:	425b      	negs	r3, r3
 800c44e:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c450:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c452:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c454:	d202      	bcs.n	800c45c <prvCopyDataToQueue+0x54>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800c456:	6862      	ldr	r2, [r4, #4]
 800c458:	4413      	add	r3, r2
 800c45a:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c45c:	2d02      	cmp	r5, #2
 800c45e:	d103      	bne.n	800c468 <prvCopyDataToQueue+0x60>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c460:	b126      	cbz	r6, 800c46c <prvCopyDataToQueue+0x64>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c462:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800c464:	2000      	movs	r0, #0
 800c466:	e002      	b.n	800c46e <prvCopyDataToQueue+0x66>
 800c468:	2000      	movs	r0, #0
 800c46a:	e000      	b.n	800c46e <prvCopyDataToQueue+0x66>
 800c46c:	4630      	mov	r0, r6
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c46e:	3601      	adds	r6, #1
 800c470:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 800c472:	bd70      	pop	{r4, r5, r6, pc}

0800c474 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c474:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800c476:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c478:	b172      	cbz	r2, 800c498 <prvCopyDataFromQueue+0x24>
{
 800c47a:	b410      	push	{r4}
 800c47c:	4608      	mov	r0, r1
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800c47e:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c480:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800c482:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c484:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800c486:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800c488:	bf24      	itt	cs
 800c48a:	6819      	ldrcs	r1, [r3, #0]
 800c48c:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800c48e:	68d9      	ldr	r1, [r3, #12]
	}
}
 800c490:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800c494:	f008 bffa 	b.w	801548c <memcpy>
 800c498:	4770      	bx	lr
	...

0800c49c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c49c:	b570      	push	{r4, r5, r6, lr}
 800c49e:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c4a0:	f7ff fd70 	bl	800bf84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c4a4:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800c4a8:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c4aa:	2c00      	cmp	r4, #0
 800c4ac:	dd16      	ble.n	800c4dc <prvUnlockQueue+0x40>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c4ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c4b0:	b1a3      	cbz	r3, 800c4dc <prvUnlockQueue+0x40>
 800c4b2:	f105 0624 	add.w	r6, r5, #36	; 0x24
 800c4b6:	e005      	b.n	800c4c4 <prvUnlockQueue+0x28>
 800c4b8:	3c01      	subs	r4, #1
 800c4ba:	b2e3      	uxtb	r3, r4
 800c4bc:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c4be:	b16b      	cbz	r3, 800c4dc <prvUnlockQueue+0x40>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c4c0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c4c2:	b15b      	cbz	r3, 800c4dc <prvUnlockQueue+0x40>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c4c4:	4630      	mov	r0, r6
 800c4c6:	f001 fbb3 	bl	800dc30 <xTaskRemoveFromEventList>
 800c4ca:	2800      	cmp	r0, #0
 800c4cc:	d0f4      	beq.n	800c4b8 <prvUnlockQueue+0x1c>
 800c4ce:	3c01      	subs	r4, #1
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c4d0:	f001 fc4a 	bl	800dd68 <vTaskMissedYield>
 800c4d4:	b2e3      	uxtb	r3, r4
 800c4d6:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d1f1      	bne.n	800c4c0 <prvUnlockQueue+0x24>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c4dc:	23ff      	movs	r3, #255	; 0xff
 800c4de:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c4e2:	f7ff fd71 	bl	800bfc8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c4e6:	f7ff fd4d 	bl	800bf84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c4ea:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800c4ee:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c4f0:	2c00      	cmp	r4, #0
 800c4f2:	dd16      	ble.n	800c522 <prvUnlockQueue+0x86>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c4f4:	692b      	ldr	r3, [r5, #16]
 800c4f6:	b1a3      	cbz	r3, 800c522 <prvUnlockQueue+0x86>
 800c4f8:	f105 0610 	add.w	r6, r5, #16
 800c4fc:	e005      	b.n	800c50a <prvUnlockQueue+0x6e>
 800c4fe:	3c01      	subs	r4, #1
 800c500:	b2e3      	uxtb	r3, r4
 800c502:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c504:	b16b      	cbz	r3, 800c522 <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c506:	692b      	ldr	r3, [r5, #16]
 800c508:	b15b      	cbz	r3, 800c522 <prvUnlockQueue+0x86>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c50a:	4630      	mov	r0, r6
 800c50c:	f001 fb90 	bl	800dc30 <xTaskRemoveFromEventList>
 800c510:	2800      	cmp	r0, #0
 800c512:	d0f4      	beq.n	800c4fe <prvUnlockQueue+0x62>
 800c514:	3c01      	subs	r4, #1
				{
					vTaskMissedYield();
 800c516:	f001 fc27 	bl	800dd68 <vTaskMissedYield>
 800c51a:	b2e3      	uxtb	r3, r4
 800c51c:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d1f1      	bne.n	800c506 <prvUnlockQueue+0x6a>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c522:	23ff      	movs	r3, #255	; 0xff
 800c524:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 800c528:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800c52c:	f7ff bd4c 	b.w	800bfc8 <vPortExitCritical>

0800c530 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c530:	b940      	cbnz	r0, 800c544 <xQueueGenericCreate+0x14>
 800c532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c536:	f383 8811 	msr	BASEPRI, r3
 800c53a:	f3bf 8f6f 	isb	sy
 800c53e:	f3bf 8f4f 	dsb	sy
 800c542:	e7fe      	b.n	800c542 <xQueueGenericCreate+0x12>
	{
 800c544:	b570      	push	{r4, r5, r6, lr}
 800c546:	4606      	mov	r6, r0
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c548:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800c54c:	3048      	adds	r0, #72	; 0x48
 800c54e:	460d      	mov	r5, r1
 800c550:	f7ff fe92 	bl	800c278 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800c554:	4604      	mov	r4, r0
 800c556:	b318      	cbz	r0, 800c5a0 <xQueueGenericCreate+0x70>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800c558:	b325      	cbz	r5, 800c5a4 <xQueueGenericCreate+0x74>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800c55a:	f100 0348 	add.w	r3, r0, #72	; 0x48
 800c55e:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800c560:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c562:	6425      	str	r5, [r4, #64]	; 0x40
	taskENTER_CRITICAL();
 800c564:	f7ff fd0e 	bl	800bf84 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c568:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c56a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c56c:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c56e:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c570:	fb01 f103 	mul.w	r1, r1, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800c574:	1acb      	subs	r3, r1, r3
 800c576:	4413      	add	r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c578:	2000      	movs	r0, #0
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c57a:	440a      	add	r2, r1
		pxQueue->cRxLock = queueUNLOCKED;
 800c57c:	21ff      	movs	r1, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c57e:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800c580:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c582:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c586:	6062      	str	r2, [r4, #4]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c588:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800c58c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c590:	f7ff fc42 	bl	800be18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c594:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c598:	f7ff fc3e 	bl	800be18 <vListInitialise>
	taskEXIT_CRITICAL();
 800c59c:	f7ff fd14 	bl	800bfc8 <vPortExitCritical>
	}
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	bd70      	pop	{r4, r5, r6, pc}
	if( uxItemSize == ( UBaseType_t ) 0 )
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	e7da      	b.n	800c55e <xQueueGenericCreate+0x2e>

0800c5a8 <xQueueCreateMutex>:
	{
 800c5a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800c5ac:	2048      	movs	r0, #72	; 0x48
	{
 800c5ae:	b085      	sub	sp, #20
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800c5b0:	f7ff fe62 	bl	800c278 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800c5b4:	4604      	mov	r4, r0
 800c5b6:	2800      	cmp	r0, #0
 800c5b8:	f000 80c7 	beq.w	800c74a <xQueueCreateMutex+0x1a2>
	pxNewQueue->uxItemSize = uxItemSize;
 800c5bc:	f04f 0800 	mov.w	r8, #0
	pxNewQueue->uxLength = uxQueueLength;
 800c5c0:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c5c2:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800c5c4:	63c3      	str	r3, [r0, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c5c6:	f8c0 8040 	str.w	r8, [r0, #64]	; 0x40
	taskENTER_CRITICAL();
 800c5ca:	f7ff fcdb 	bl	800bf84 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c5ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c5d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c5d2:	6821      	ldr	r1, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c5d4:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c5d8:	fb03 f302 	mul.w	r3, r3, r2
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800c5dc:	1a9a      	subs	r2, r3, r2
 800c5de:	440a      	add	r2, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c5e0:	440b      	add	r3, r1
		pxQueue->cRxLock = queueUNLOCKED;
 800c5e2:	25ff      	movs	r5, #255	; 0xff
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c5e4:	f104 0610 	add.w	r6, r4, #16
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800c5e8:	60e2      	str	r2, [r4, #12]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c5ea:	6063      	str	r3, [r4, #4]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c5ec:	60a1      	str	r1, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 800c5ee:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c5f2:	4630      	mov	r0, r6
		pxQueue->cTxLock = queueUNLOCKED;
 800c5f4:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c5f8:	f104 0724 	add.w	r7, r4, #36	; 0x24
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c5fc:	f7ff fc0c 	bl	800be18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c600:	4638      	mov	r0, r7
 800c602:	f7ff fc09 	bl	800be18 <vListInitialise>
	taskEXIT_CRITICAL();
 800c606:	f7ff fcdf 	bl	800bfc8 <vPortExitCritical>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c60a:	6c25      	ldr	r5, [r4, #64]	; 0x40
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c60c:	f8c4 8000 	str.w	r8, [r4]
			pxNewQueue->pxMutexHolder = NULL;
 800c610:	f8c4 8004 	str.w	r8, [r4, #4]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800c614:	f8c4 800c 	str.w	r8, [r4, #12]
 800c618:	f8cd 8004 	str.w	r8, [sp, #4]
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c61c:	2d00      	cmp	r5, #0
 800c61e:	f040 80a5 	bne.w	800c76c <xQueueCreateMutex+0x1c4>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c622:	f001 fba7 	bl	800dd74 <xTaskGetSchedulerState>
 800c626:	2800      	cmp	r0, #0
 800c628:	f000 8093 	beq.w	800c752 <xQueueCreateMutex+0x1aa>
		taskENTER_CRITICAL();
 800c62c:	f7ff fcaa 	bl	800bf84 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c630:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c632:	6be3      	ldr	r3, [r4, #60]	; 0x3c
					portYIELD_WITHIN_API();
 800c634:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800c840 <xQueueCreateMutex+0x298>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c638:	429a      	cmp	r2, r3
		prvLockQueue( pxQueue );
 800c63a:	f04f 0800 	mov.w	r8, #0
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c63e:	d371      	bcc.n	800c724 <xQueueCreateMutex+0x17c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c640:	9b01      	ldr	r3, [sp, #4]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d07f      	beq.n	800c746 <xQueueCreateMutex+0x19e>
				else if( xEntryTimeSet == pdFALSE )
 800c646:	b915      	cbnz	r5, 800c64e <xQueueCreateMutex+0xa6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c648:	a802      	add	r0, sp, #8
 800c64a:	f001 fb35 	bl	800dcb8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800c64e:	f7ff fcbb 	bl	800bfc8 <vPortExitCritical>
		vTaskSuspendAll();
 800c652:	f001 f895 	bl	800d780 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c656:	f7ff fc95 	bl	800bf84 <vPortEnterCritical>
 800c65a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c65e:	2bff      	cmp	r3, #255	; 0xff
 800c660:	bf08      	it	eq
 800c662:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 800c666:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c66a:	2bff      	cmp	r3, #255	; 0xff
 800c66c:	bf08      	it	eq
 800c66e:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 800c672:	f7ff fca9 	bl	800bfc8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c676:	a901      	add	r1, sp, #4
 800c678:	a802      	add	r0, sp, #8
 800c67a:	f001 fb29 	bl	800dcd0 <xTaskCheckForTimeOut>
 800c67e:	2800      	cmp	r0, #0
 800c680:	f040 80d4 	bne.w	800c82c <xQueueCreateMutex+0x284>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c684:	f7ff fc7e 	bl	800bf84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c688:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c68a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d076      	beq.n	800c77e <xQueueCreateMutex+0x1d6>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800c690:	f7ff fc9a 	bl	800bfc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c694:	f7ff fc76 	bl	800bf84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800c698:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800c69c:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c69e:	2d00      	cmp	r5, #0
 800c6a0:	dc04      	bgt.n	800c6ac <xQueueCreateMutex+0x104>
 800c6a2:	e011      	b.n	800c6c8 <xQueueCreateMutex+0x120>
 800c6a4:	3d01      	subs	r5, #1
 800c6a6:	b2eb      	uxtb	r3, r5
 800c6a8:	b25d      	sxtb	r5, r3
 800c6aa:	b16b      	cbz	r3, 800c6c8 <xQueueCreateMutex+0x120>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c6ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6ae:	b15b      	cbz	r3, 800c6c8 <xQueueCreateMutex+0x120>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c6b0:	4638      	mov	r0, r7
 800c6b2:	f001 fabd 	bl	800dc30 <xTaskRemoveFromEventList>
 800c6b6:	2800      	cmp	r0, #0
 800c6b8:	d0f4      	beq.n	800c6a4 <xQueueCreateMutex+0xfc>
 800c6ba:	3d01      	subs	r5, #1
						vTaskMissedYield();
 800c6bc:	f001 fb54 	bl	800dd68 <vTaskMissedYield>
 800c6c0:	b2eb      	uxtb	r3, r5
 800c6c2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d1f1      	bne.n	800c6ac <xQueueCreateMutex+0x104>
		pxQueue->cTxLock = queueUNLOCKED;
 800c6c8:	23ff      	movs	r3, #255	; 0xff
 800c6ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800c6ce:	f7ff fc7b 	bl	800bfc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c6d2:	f7ff fc57 	bl	800bf84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800c6d6:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800c6da:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c6dc:	2d00      	cmp	r5, #0
 800c6de:	dc04      	bgt.n	800c6ea <xQueueCreateMutex+0x142>
 800c6e0:	e011      	b.n	800c706 <xQueueCreateMutex+0x15e>
 800c6e2:	3d01      	subs	r5, #1
 800c6e4:	b2eb      	uxtb	r3, r5
 800c6e6:	b25d      	sxtb	r5, r3
 800c6e8:	b16b      	cbz	r3, 800c706 <xQueueCreateMutex+0x15e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6ea:	6923      	ldr	r3, [r4, #16]
 800c6ec:	b15b      	cbz	r3, 800c706 <xQueueCreateMutex+0x15e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6ee:	4630      	mov	r0, r6
 800c6f0:	f001 fa9e 	bl	800dc30 <xTaskRemoveFromEventList>
 800c6f4:	2800      	cmp	r0, #0
 800c6f6:	d0f4      	beq.n	800c6e2 <xQueueCreateMutex+0x13a>
 800c6f8:	3d01      	subs	r5, #1
					vTaskMissedYield();
 800c6fa:	f001 fb35 	bl	800dd68 <vTaskMissedYield>
 800c6fe:	b2eb      	uxtb	r3, r5
 800c700:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c702:	2b00      	cmp	r3, #0
 800c704:	d1f1      	bne.n	800c6ea <xQueueCreateMutex+0x142>
		pxQueue->cRxLock = queueUNLOCKED;
 800c706:	23ff      	movs	r3, #255	; 0xff
 800c708:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800c70c:	f7ff fc5c 	bl	800bfc8 <vPortExitCritical>
				( void ) xTaskResumeAll();
 800c710:	f001 f8f2 	bl	800d8f8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800c714:	f7ff fc36 	bl	800bf84 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c718:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c71a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c71c:	429a      	cmp	r2, r3
 800c71e:	f04f 0501 	mov.w	r5, #1
 800c722:	d28d      	bcs.n	800c640 <xQueueCreateMutex+0x98>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c724:	2200      	movs	r2, #0
 800c726:	4611      	mov	r1, r2
 800c728:	4620      	mov	r0, r4
 800c72a:	f7ff fe6d 	bl	800c408 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c72e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c730:	2b00      	cmp	r3, #0
 800c732:	d175      	bne.n	800c820 <xQueueCreateMutex+0x278>
					else if( xYieldRequired != pdFALSE )
 800c734:	b138      	cbz	r0, 800c746 <xQueueCreateMutex+0x19e>
						queueYIELD_IF_USING_PREEMPTION();
 800c736:	4b42      	ldr	r3, [pc, #264]	; (800c840 <xQueueCreateMutex+0x298>)
 800c738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c73c:	601a      	str	r2, [r3, #0]
 800c73e:	f3bf 8f4f 	dsb	sy
 800c742:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800c746:	f7ff fc3f 	bl	800bfc8 <vPortExitCritical>
	}
 800c74a:	4620      	mov	r0, r4
 800c74c:	b005      	add	sp, #20
 800c74e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c752:	9d01      	ldr	r5, [sp, #4]
 800c754:	2d00      	cmp	r5, #0
 800c756:	f43f af69 	beq.w	800c62c <xQueueCreateMutex+0x84>
 800c75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c75e:	f383 8811 	msr	BASEPRI, r3
 800c762:	f3bf 8f6f 	isb	sy
 800c766:	f3bf 8f4f 	dsb	sy
 800c76a:	e7fe      	b.n	800c76a <xQueueCreateMutex+0x1c2>
 800c76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c770:	f383 8811 	msr	BASEPRI, r3
 800c774:	f3bf 8f6f 	isb	sy
 800c778:	f3bf 8f4f 	dsb	sy
 800c77c:	e7fe      	b.n	800c77c <xQueueCreateMutex+0x1d4>
	taskEXIT_CRITICAL();
 800c77e:	f7ff fc23 	bl	800bfc8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c782:	9901      	ldr	r1, [sp, #4]
 800c784:	4630      	mov	r0, r6
 800c786:	f001 f9a1 	bl	800dacc <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 800c78a:	f7ff fbfb 	bl	800bf84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800c78e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800c792:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c794:	2d00      	cmp	r5, #0
 800c796:	dc04      	bgt.n	800c7a2 <xQueueCreateMutex+0x1fa>
 800c798:	e011      	b.n	800c7be <xQueueCreateMutex+0x216>
 800c79a:	3d01      	subs	r5, #1
 800c79c:	b2eb      	uxtb	r3, r5
 800c79e:	b25d      	sxtb	r5, r3
 800c7a0:	b16b      	cbz	r3, 800c7be <xQueueCreateMutex+0x216>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7a4:	b15b      	cbz	r3, 800c7be <xQueueCreateMutex+0x216>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c7a6:	4638      	mov	r0, r7
 800c7a8:	f001 fa42 	bl	800dc30 <xTaskRemoveFromEventList>
 800c7ac:	2800      	cmp	r0, #0
 800c7ae:	d0f4      	beq.n	800c79a <xQueueCreateMutex+0x1f2>
 800c7b0:	3d01      	subs	r5, #1
						vTaskMissedYield();
 800c7b2:	f001 fad9 	bl	800dd68 <vTaskMissedYield>
 800c7b6:	b2eb      	uxtb	r3, r5
 800c7b8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d1f1      	bne.n	800c7a2 <xQueueCreateMutex+0x1fa>
		pxQueue->cTxLock = queueUNLOCKED;
 800c7be:	23ff      	movs	r3, #255	; 0xff
 800c7c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800c7c4:	f7ff fc00 	bl	800bfc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c7c8:	f7ff fbdc 	bl	800bf84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800c7cc:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800c7d0:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c7d2:	2d00      	cmp	r5, #0
 800c7d4:	dc04      	bgt.n	800c7e0 <xQueueCreateMutex+0x238>
 800c7d6:	e011      	b.n	800c7fc <xQueueCreateMutex+0x254>
 800c7d8:	3d01      	subs	r5, #1
 800c7da:	b2eb      	uxtb	r3, r5
 800c7dc:	b25d      	sxtb	r5, r3
 800c7de:	b16b      	cbz	r3, 800c7fc <xQueueCreateMutex+0x254>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7e0:	6923      	ldr	r3, [r4, #16]
 800c7e2:	b15b      	cbz	r3, 800c7fc <xQueueCreateMutex+0x254>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7e4:	4630      	mov	r0, r6
 800c7e6:	f001 fa23 	bl	800dc30 <xTaskRemoveFromEventList>
 800c7ea:	2800      	cmp	r0, #0
 800c7ec:	d0f4      	beq.n	800c7d8 <xQueueCreateMutex+0x230>
 800c7ee:	3d01      	subs	r5, #1
					vTaskMissedYield();
 800c7f0:	f001 faba 	bl	800dd68 <vTaskMissedYield>
 800c7f4:	b2eb      	uxtb	r3, r5
 800c7f6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d1f1      	bne.n	800c7e0 <xQueueCreateMutex+0x238>
		pxQueue->cRxLock = queueUNLOCKED;
 800c7fc:	23ff      	movs	r3, #255	; 0xff
 800c7fe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800c802:	f7ff fbe1 	bl	800bfc8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 800c806:	f001 f877 	bl	800d8f8 <xTaskResumeAll>
 800c80a:	2800      	cmp	r0, #0
 800c80c:	d182      	bne.n	800c714 <xQueueCreateMutex+0x16c>
					portYIELD_WITHIN_API();
 800c80e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c812:	f8c9 3000 	str.w	r3, [r9]
 800c816:	f3bf 8f4f 	dsb	sy
 800c81a:	f3bf 8f6f 	isb	sy
 800c81e:	e779      	b.n	800c714 <xQueueCreateMutex+0x16c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c820:	4638      	mov	r0, r7
 800c822:	f001 fa05 	bl	800dc30 <xTaskRemoveFromEventList>
 800c826:	2800      	cmp	r0, #0
 800c828:	d185      	bne.n	800c736 <xQueueCreateMutex+0x18e>
 800c82a:	e78c      	b.n	800c746 <xQueueCreateMutex+0x19e>
			prvUnlockQueue( pxQueue );
 800c82c:	4620      	mov	r0, r4
 800c82e:	f7ff fe35 	bl	800c49c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c832:	f001 f861 	bl	800d8f8 <xTaskResumeAll>
	}
 800c836:	4620      	mov	r0, r4
 800c838:	b005      	add	sp, #20
 800c83a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c83e:	bf00      	nop
 800c840:	e000ed04 	.word	0xe000ed04

0800c844 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 800c844:	b940      	cbnz	r0, 800c858 <xQueueCreateCountingSemaphore+0x14>
 800c846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c84a:	f383 8811 	msr	BASEPRI, r3
 800c84e:	f3bf 8f6f 	isb	sy
 800c852:	f3bf 8f4f 	dsb	sy
 800c856:	e7fe      	b.n	800c856 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c858:	4288      	cmp	r0, r1
 800c85a:	d208      	bcs.n	800c86e <xQueueCreateCountingSemaphore+0x2a>
 800c85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c860:	f383 8811 	msr	BASEPRI, r3
 800c864:	f3bf 8f6f 	isb	sy
 800c868:	f3bf 8f4f 	dsb	sy
 800c86c:	e7fe      	b.n	800c86c <xQueueCreateCountingSemaphore+0x28>
	{
 800c86e:	b510      	push	{r4, lr}
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c870:	2202      	movs	r2, #2
 800c872:	460c      	mov	r4, r1
 800c874:	2100      	movs	r1, #0
 800c876:	f7ff fe5b 	bl	800c530 <xQueueGenericCreate>
		if( xHandle != NULL )
 800c87a:	b100      	cbz	r0, 800c87e <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c87c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800c87e:	bd10      	pop	{r4, pc}

0800c880 <xQueueGenericSend>:
{
 800c880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c884:	b085      	sub	sp, #20
 800c886:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800c888:	2800      	cmp	r0, #0
 800c88a:	f000 8107 	beq.w	800ca9c <xQueueGenericSend+0x21c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c88e:	2900      	cmp	r1, #0
 800c890:	f000 813c 	beq.w	800cb0c <xQueueGenericSend+0x28c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c894:	2b02      	cmp	r3, #2
 800c896:	f000 812c 	beq.w	800caf2 <xQueueGenericSend+0x272>
 800c89a:	4604      	mov	r4, r0
 800c89c:	461e      	mov	r6, r3
 800c89e:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c8a0:	f001 fa68 	bl	800dd74 <xTaskGetSchedulerState>
 800c8a4:	b928      	cbnz	r0, 800c8b2 <xQueueGenericSend+0x32>
 800c8a6:	9b01      	ldr	r3, [sp, #4]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	f040 8119 	bne.w	800cae0 <xQueueGenericSend+0x260>
 800c8ae:	4699      	mov	r9, r3
 800c8b0:	e001      	b.n	800c8b6 <xQueueGenericSend+0x36>
 800c8b2:	f04f 0900 	mov.w	r9, #0
		taskENTER_CRITICAL();
 800c8b6:	f7ff fb65 	bl	800bf84 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c8ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c8bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
					portYIELD_WITHIN_API();
 800c8be:	f8df a268 	ldr.w	sl, [pc, #616]	; 800cb28 <xQueueGenericSend+0x2a8>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c8c2:	429a      	cmp	r2, r3
		prvLockQueue( pxQueue );
 800c8c4:	f04f 0800 	mov.w	r8, #0
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c8c8:	d37c      	bcc.n	800c9c4 <xQueueGenericSend+0x144>
 800c8ca:	2e02      	cmp	r6, #2
 800c8cc:	d07a      	beq.n	800c9c4 <xQueueGenericSend+0x144>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c8ce:	9d01      	ldr	r5, [sp, #4]
 800c8d0:	2d00      	cmp	r5, #0
 800c8d2:	f000 80f9 	beq.w	800cac8 <xQueueGenericSend+0x248>
				else if( xEntryTimeSet == pdFALSE )
 800c8d6:	f1b9 0f00 	cmp.w	r9, #0
 800c8da:	f000 80f1 	beq.w	800cac0 <xQueueGenericSend+0x240>
		taskEXIT_CRITICAL();
 800c8de:	f7ff fb73 	bl	800bfc8 <vPortExitCritical>
		vTaskSuspendAll();
 800c8e2:	f000 ff4d 	bl	800d780 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c8e6:	f7ff fb4d 	bl	800bf84 <vPortEnterCritical>
 800c8ea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c8ee:	2bff      	cmp	r3, #255	; 0xff
 800c8f0:	bf08      	it	eq
 800c8f2:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 800c8f6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c8fa:	2bff      	cmp	r3, #255	; 0xff
 800c8fc:	bf08      	it	eq
 800c8fe:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 800c902:	f7ff fb61 	bl	800bfc8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c906:	a901      	add	r1, sp, #4
 800c908:	a802      	add	r0, sp, #8
 800c90a:	f001 f9e1 	bl	800dcd0 <xTaskCheckForTimeOut>
 800c90e:	2800      	cmp	r0, #0
 800c910:	f040 80cd 	bne.w	800caae <xQueueGenericSend+0x22e>
	taskENTER_CRITICAL();
 800c914:	f7ff fb36 	bl	800bf84 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c918:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c91a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d066      	beq.n	800c9ee <xQueueGenericSend+0x16e>
	taskEXIT_CRITICAL();
 800c920:	f7ff fb52 	bl	800bfc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c924:	f7ff fb2e 	bl	800bf84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800c928:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800c92c:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c92e:	2d00      	cmp	r5, #0
 800c930:	dd16      	ble.n	800c960 <xQueueGenericSend+0xe0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c932:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c934:	b1a3      	cbz	r3, 800c960 <xQueueGenericSend+0xe0>
 800c936:	f104 0924 	add.w	r9, r4, #36	; 0x24
 800c93a:	e005      	b.n	800c948 <xQueueGenericSend+0xc8>
 800c93c:	3d01      	subs	r5, #1
 800c93e:	b2eb      	uxtb	r3, r5
 800c940:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c942:	b16b      	cbz	r3, 800c960 <xQueueGenericSend+0xe0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c944:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c946:	b15b      	cbz	r3, 800c960 <xQueueGenericSend+0xe0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c948:	4648      	mov	r0, r9
 800c94a:	f001 f971 	bl	800dc30 <xTaskRemoveFromEventList>
 800c94e:	2800      	cmp	r0, #0
 800c950:	d0f4      	beq.n	800c93c <xQueueGenericSend+0xbc>
 800c952:	3d01      	subs	r5, #1
						vTaskMissedYield();
 800c954:	f001 fa08 	bl	800dd68 <vTaskMissedYield>
 800c958:	b2eb      	uxtb	r3, r5
 800c95a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d1f1      	bne.n	800c944 <xQueueGenericSend+0xc4>
		pxQueue->cTxLock = queueUNLOCKED;
 800c960:	23ff      	movs	r3, #255	; 0xff
 800c962:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800c966:	f7ff fb2f 	bl	800bfc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c96a:	f7ff fb0b 	bl	800bf84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800c96e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800c972:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c974:	2d00      	cmp	r5, #0
 800c976:	dd16      	ble.n	800c9a6 <xQueueGenericSend+0x126>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c978:	6923      	ldr	r3, [r4, #16]
 800c97a:	b1a3      	cbz	r3, 800c9a6 <xQueueGenericSend+0x126>
 800c97c:	f104 0910 	add.w	r9, r4, #16
 800c980:	e005      	b.n	800c98e <xQueueGenericSend+0x10e>
 800c982:	3d01      	subs	r5, #1
 800c984:	b2eb      	uxtb	r3, r5
 800c986:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c988:	b16b      	cbz	r3, 800c9a6 <xQueueGenericSend+0x126>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c98a:	6923      	ldr	r3, [r4, #16]
 800c98c:	b15b      	cbz	r3, 800c9a6 <xQueueGenericSend+0x126>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c98e:	4648      	mov	r0, r9
 800c990:	f001 f94e 	bl	800dc30 <xTaskRemoveFromEventList>
 800c994:	2800      	cmp	r0, #0
 800c996:	d0f4      	beq.n	800c982 <xQueueGenericSend+0x102>
 800c998:	3d01      	subs	r5, #1
					vTaskMissedYield();
 800c99a:	f001 f9e5 	bl	800dd68 <vTaskMissedYield>
 800c99e:	b2eb      	uxtb	r3, r5
 800c9a0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d1f1      	bne.n	800c98a <xQueueGenericSend+0x10a>
		pxQueue->cRxLock = queueUNLOCKED;
 800c9a6:	23ff      	movs	r3, #255	; 0xff
 800c9a8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800c9ac:	f7ff fb0c 	bl	800bfc8 <vPortExitCritical>
				( void ) xTaskResumeAll();
 800c9b0:	f000 ffa2 	bl	800d8f8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800c9b4:	f7ff fae6 	bl	800bf84 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c9b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c9ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	f04f 0901 	mov.w	r9, #1
 800c9c2:	d282      	bcs.n	800c8ca <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c9c4:	4632      	mov	r2, r6
 800c9c6:	4639      	mov	r1, r7
 800c9c8:	4620      	mov	r0, r4
 800c9ca:	f7ff fd1d 	bl	800c408 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c9ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d17d      	bne.n	800cad0 <xQueueGenericSend+0x250>
					else if( xYieldRequired != pdFALSE )
 800c9d4:	b138      	cbz	r0, 800c9e6 <xQueueGenericSend+0x166>
						queueYIELD_IF_USING_PREEMPTION();
 800c9d6:	4b54      	ldr	r3, [pc, #336]	; (800cb28 <xQueueGenericSend+0x2a8>)
 800c9d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9dc:	601a      	str	r2, [r3, #0]
 800c9de:	f3bf 8f4f 	dsb	sy
 800c9e2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800c9e6:	f7ff faef 	bl	800bfc8 <vPortExitCritical>
				return pdPASS;
 800c9ea:	2001      	movs	r0, #1
 800c9ec:	e065      	b.n	800caba <xQueueGenericSend+0x23a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c9ee:	f104 0910 	add.w	r9, r4, #16
	taskEXIT_CRITICAL();
 800c9f2:	f7ff fae9 	bl	800bfc8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c9f6:	4648      	mov	r0, r9
 800c9f8:	9901      	ldr	r1, [sp, #4]
 800c9fa:	f001 f867 	bl	800dacc <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 800c9fe:	f7ff fac1 	bl	800bf84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800ca02:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800ca06:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca08:	2d00      	cmp	r5, #0
 800ca0a:	dd16      	ble.n	800ca3a <xQueueGenericSend+0x1ba>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca0e:	b1a3      	cbz	r3, 800ca3a <xQueueGenericSend+0x1ba>
 800ca10:	f104 0b24 	add.w	fp, r4, #36	; 0x24
 800ca14:	e005      	b.n	800ca22 <xQueueGenericSend+0x1a2>
 800ca16:	3d01      	subs	r5, #1
 800ca18:	b2eb      	uxtb	r3, r5
 800ca1a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca1c:	b16b      	cbz	r3, 800ca3a <xQueueGenericSend+0x1ba>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca20:	b15b      	cbz	r3, 800ca3a <xQueueGenericSend+0x1ba>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca22:	4658      	mov	r0, fp
 800ca24:	f001 f904 	bl	800dc30 <xTaskRemoveFromEventList>
 800ca28:	2800      	cmp	r0, #0
 800ca2a:	d0f4      	beq.n	800ca16 <xQueueGenericSend+0x196>
 800ca2c:	3d01      	subs	r5, #1
						vTaskMissedYield();
 800ca2e:	f001 f99b 	bl	800dd68 <vTaskMissedYield>
 800ca32:	b2eb      	uxtb	r3, r5
 800ca34:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d1f1      	bne.n	800ca1e <xQueueGenericSend+0x19e>
		pxQueue->cTxLock = queueUNLOCKED;
 800ca3a:	23ff      	movs	r3, #255	; 0xff
 800ca3c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800ca40:	f7ff fac2 	bl	800bfc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800ca44:	f7ff fa9e 	bl	800bf84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800ca48:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800ca4c:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca4e:	2d00      	cmp	r5, #0
 800ca50:	dc04      	bgt.n	800ca5c <xQueueGenericSend+0x1dc>
 800ca52:	e011      	b.n	800ca78 <xQueueGenericSend+0x1f8>
 800ca54:	3d01      	subs	r5, #1
 800ca56:	b2eb      	uxtb	r3, r5
 800ca58:	b25d      	sxtb	r5, r3
 800ca5a:	b16b      	cbz	r3, 800ca78 <xQueueGenericSend+0x1f8>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca5c:	6923      	ldr	r3, [r4, #16]
 800ca5e:	b15b      	cbz	r3, 800ca78 <xQueueGenericSend+0x1f8>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca60:	4648      	mov	r0, r9
 800ca62:	f001 f8e5 	bl	800dc30 <xTaskRemoveFromEventList>
 800ca66:	2800      	cmp	r0, #0
 800ca68:	d0f4      	beq.n	800ca54 <xQueueGenericSend+0x1d4>
 800ca6a:	3d01      	subs	r5, #1
					vTaskMissedYield();
 800ca6c:	f001 f97c 	bl	800dd68 <vTaskMissedYield>
 800ca70:	b2eb      	uxtb	r3, r5
 800ca72:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d1f1      	bne.n	800ca5c <xQueueGenericSend+0x1dc>
		pxQueue->cRxLock = queueUNLOCKED;
 800ca78:	23ff      	movs	r3, #255	; 0xff
 800ca7a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800ca7e:	f7ff faa3 	bl	800bfc8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 800ca82:	f000 ff39 	bl	800d8f8 <xTaskResumeAll>
 800ca86:	2800      	cmp	r0, #0
 800ca88:	d194      	bne.n	800c9b4 <xQueueGenericSend+0x134>
					portYIELD_WITHIN_API();
 800ca8a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ca8e:	f8ca 3000 	str.w	r3, [sl]
 800ca92:	f3bf 8f4f 	dsb	sy
 800ca96:	f3bf 8f6f 	isb	sy
 800ca9a:	e78b      	b.n	800c9b4 <xQueueGenericSend+0x134>
 800ca9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa0:	f383 8811 	msr	BASEPRI, r3
 800caa4:	f3bf 8f6f 	isb	sy
 800caa8:	f3bf 8f4f 	dsb	sy
 800caac:	e7fe      	b.n	800caac <xQueueGenericSend+0x22c>
			prvUnlockQueue( pxQueue );
 800caae:	4620      	mov	r0, r4
 800cab0:	f7ff fcf4 	bl	800c49c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cab4:	f000 ff20 	bl	800d8f8 <xTaskResumeAll>
			return errQUEUE_FULL;
 800cab8:	2000      	movs	r0, #0
}
 800caba:	b005      	add	sp, #20
 800cabc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cac0:	a802      	add	r0, sp, #8
 800cac2:	f001 f8f9 	bl	800dcb8 <vTaskInternalSetTimeOutState>
 800cac6:	e70a      	b.n	800c8de <xQueueGenericSend+0x5e>
					taskEXIT_CRITICAL();
 800cac8:	f7ff fa7e 	bl	800bfc8 <vPortExitCritical>
					return errQUEUE_FULL;
 800cacc:	4628      	mov	r0, r5
 800cace:	e7f4      	b.n	800caba <xQueueGenericSend+0x23a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cad0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800cad4:	f001 f8ac 	bl	800dc30 <xTaskRemoveFromEventList>
 800cad8:	2800      	cmp	r0, #0
 800cada:	f47f af7c 	bne.w	800c9d6 <xQueueGenericSend+0x156>
 800cade:	e782      	b.n	800c9e6 <xQueueGenericSend+0x166>
 800cae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae4:	f383 8811 	msr	BASEPRI, r3
 800cae8:	f3bf 8f6f 	isb	sy
 800caec:	f3bf 8f4f 	dsb	sy
 800caf0:	e7fe      	b.n	800caf0 <xQueueGenericSend+0x270>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800caf2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800caf4:	2a01      	cmp	r2, #1
 800caf6:	f43f aed0 	beq.w	800c89a <xQueueGenericSend+0x1a>
 800cafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cafe:	f383 8811 	msr	BASEPRI, r3
 800cb02:	f3bf 8f6f 	isb	sy
 800cb06:	f3bf 8f4f 	dsb	sy
 800cb0a:	e7fe      	b.n	800cb0a <xQueueGenericSend+0x28a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb0c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800cb0e:	2a00      	cmp	r2, #0
 800cb10:	f43f aec0 	beq.w	800c894 <xQueueGenericSend+0x14>
 800cb14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb18:	f383 8811 	msr	BASEPRI, r3
 800cb1c:	f3bf 8f6f 	isb	sy
 800cb20:	f3bf 8f4f 	dsb	sy
 800cb24:	e7fe      	b.n	800cb24 <xQueueGenericSend+0x2a4>
 800cb26:	bf00      	nop
 800cb28:	e000ed04 	.word	0xe000ed04

0800cb2c <xQueueGenericSendFromISR>:
{
 800cb2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800cb30:	b1f0      	cbz	r0, 800cb70 <xQueueGenericSendFromISR+0x44>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb32:	2900      	cmp	r1, #0
 800cb34:	d041      	beq.n	800cbba <xQueueGenericSendFromISR+0x8e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cb36:	2b02      	cmp	r3, #2
 800cb38:	d033      	beq.n	800cba2 <xQueueGenericSendFromISR+0x76>
 800cb3a:	4604      	mov	r4, r0
 800cb3c:	461f      	mov	r7, r3
 800cb3e:	4690      	mov	r8, r2
 800cb40:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cb42:	f7ff fb43 	bl	800c1cc <vPortValidateInterruptPriority>
	__asm volatile
 800cb46:	f3ef 8611 	mrs	r6, BASEPRI
 800cb4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb4e:	f383 8811 	msr	BASEPRI, r3
 800cb52:	f3bf 8f6f 	isb	sy
 800cb56:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cb5a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800cb5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d30f      	bcc.n	800cb82 <xQueueGenericSendFromISR+0x56>
 800cb62:	2f02      	cmp	r7, #2
 800cb64:	d00d      	beq.n	800cb82 <xQueueGenericSendFromISR+0x56>
			xReturn = errQUEUE_FULL;
 800cb66:	2000      	movs	r0, #0
	__asm volatile
 800cb68:	f386 8811 	msr	BASEPRI, r6
}
 800cb6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800cb70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb74:	f383 8811 	msr	BASEPRI, r3
 800cb78:	f3bf 8f6f 	isb	sy
 800cb7c:	f3bf 8f4f 	dsb	sy
 800cb80:	e7fe      	b.n	800cb80 <xQueueGenericSendFromISR+0x54>
			const int8_t cTxLock = pxQueue->cTxLock;
 800cb82:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cb86:	463a      	mov	r2, r7
 800cb88:	4649      	mov	r1, r9
			const int8_t cTxLock = pxQueue->cTxLock;
 800cb8a:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cb8c:	4620      	mov	r0, r4
 800cb8e:	f7ff fc3b 	bl	800c408 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800cb92:	1c6b      	adds	r3, r5, #1
 800cb94:	d01d      	beq.n	800cbd2 <xQueueGenericSendFromISR+0xa6>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cb96:	1c6b      	adds	r3, r5, #1
 800cb98:	b25b      	sxtb	r3, r3
 800cb9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 800cb9e:	2001      	movs	r0, #1
 800cba0:	e7e2      	b.n	800cb68 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cba2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800cba4:	2c01      	cmp	r4, #1
 800cba6:	d0c8      	beq.n	800cb3a <xQueueGenericSendFromISR+0xe>
 800cba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbac:	f383 8811 	msr	BASEPRI, r3
 800cbb0:	f3bf 8f6f 	isb	sy
 800cbb4:	f3bf 8f4f 	dsb	sy
 800cbb8:	e7fe      	b.n	800cbb8 <xQueueGenericSendFromISR+0x8c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cbba:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800cbbc:	2c00      	cmp	r4, #0
 800cbbe:	d0ba      	beq.n	800cb36 <xQueueGenericSendFromISR+0xa>
 800cbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc4:	f383 8811 	msr	BASEPRI, r3
 800cbc8:	f3bf 8f6f 	isb	sy
 800cbcc:	f3bf 8f4f 	dsb	sy
 800cbd0:	e7fe      	b.n	800cbd0 <xQueueGenericSendFromISR+0xa4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cbd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d0e2      	beq.n	800cb9e <xQueueGenericSendFromISR+0x72>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cbd8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800cbdc:	f001 f828 	bl	800dc30 <xTaskRemoveFromEventList>
 800cbe0:	2800      	cmp	r0, #0
 800cbe2:	d0dc      	beq.n	800cb9e <xQueueGenericSendFromISR+0x72>
							if( pxHigherPriorityTaskWoken != NULL )
 800cbe4:	f1b8 0f00 	cmp.w	r8, #0
 800cbe8:	d0d9      	beq.n	800cb9e <xQueueGenericSendFromISR+0x72>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cbea:	2001      	movs	r0, #1
 800cbec:	f8c8 0000 	str.w	r0, [r8]
 800cbf0:	e7ba      	b.n	800cb68 <xQueueGenericSendFromISR+0x3c>
 800cbf2:	bf00      	nop

0800cbf4 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 800cbf4:	b378      	cbz	r0, 800cc56 <xQueueGiveFromISR+0x62>
	configASSERT( pxQueue->uxItemSize == 0 );
 800cbf6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800cbf8:	b143      	cbz	r3, 800cc0c <xQueueGiveFromISR+0x18>
 800cbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbfe:	f383 8811 	msr	BASEPRI, r3
 800cc02:	f3bf 8f6f 	isb	sy
 800cc06:	f3bf 8f4f 	dsb	sy
 800cc0a:	e7fe      	b.n	800cc0a <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800cc0c:	6803      	ldr	r3, [r0, #0]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d03a      	beq.n	800cc88 <xQueueGiveFromISR+0x94>
{
 800cc12:	b570      	push	{r4, r5, r6, lr}
 800cc14:	4604      	mov	r4, r0
 800cc16:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cc18:	f7ff fad8 	bl	800c1cc <vPortValidateInterruptPriority>
	__asm volatile
 800cc1c:	f3ef 8611 	mrs	r6, BASEPRI
 800cc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc24:	f383 8811 	msr	BASEPRI, r3
 800cc28:	f3bf 8f6f 	isb	sy
 800cc2c:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc30:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cc32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cc34:	429a      	cmp	r2, r3
 800cc36:	d225      	bcs.n	800cc84 <xQueueGiveFromISR+0x90>
			const int8_t cTxLock = pxQueue->cTxLock;
 800cc38:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cc3c:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 800cc3e:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cc40:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800cc42:	1c5a      	adds	r2, r3, #1
 800cc44:	d010      	beq.n	800cc68 <xQueueGiveFromISR+0x74>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cc46:	3301      	adds	r3, #1
 800cc48:	b25b      	sxtb	r3, r3
 800cc4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 800cc4e:	2001      	movs	r0, #1
	__asm volatile
 800cc50:	f386 8811 	msr	BASEPRI, r6
}
 800cc54:	bd70      	pop	{r4, r5, r6, pc}
	__asm volatile
 800cc56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc5a:	f383 8811 	msr	BASEPRI, r3
 800cc5e:	f3bf 8f6f 	isb	sy
 800cc62:	f3bf 8f4f 	dsb	sy
 800cc66:	e7fe      	b.n	800cc66 <xQueueGiveFromISR+0x72>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d0ef      	beq.n	800cc4e <xQueueGiveFromISR+0x5a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc6e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800cc72:	f000 ffdd 	bl	800dc30 <xTaskRemoveFromEventList>
 800cc76:	2800      	cmp	r0, #0
 800cc78:	d0e9      	beq.n	800cc4e <xQueueGiveFromISR+0x5a>
							if( pxHigherPriorityTaskWoken != NULL )
 800cc7a:	2d00      	cmp	r5, #0
 800cc7c:	d0e7      	beq.n	800cc4e <xQueueGiveFromISR+0x5a>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cc7e:	2001      	movs	r0, #1
 800cc80:	6028      	str	r0, [r5, #0]
 800cc82:	e7e5      	b.n	800cc50 <xQueueGiveFromISR+0x5c>
			xReturn = errQUEUE_FULL;
 800cc84:	2000      	movs	r0, #0
 800cc86:	e7e3      	b.n	800cc50 <xQueueGiveFromISR+0x5c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800cc88:	6843      	ldr	r3, [r0, #4]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d0c1      	beq.n	800cc12 <xQueueGiveFromISR+0x1e>
 800cc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc92:	f383 8811 	msr	BASEPRI, r3
 800cc96:	f3bf 8f6f 	isb	sy
 800cc9a:	f3bf 8f4f 	dsb	sy
 800cc9e:	e7fe      	b.n	800cc9e <xQueueGiveFromISR+0xaa>

0800cca0 <xQueueReceive>:
{
 800cca0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cca4:	b085      	sub	sp, #20
 800cca6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800cca8:	2800      	cmp	r0, #0
 800ccaa:	f000 8150 	beq.w	800cf4e <xQueueReceive+0x2ae>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ccae:	2900      	cmp	r1, #0
 800ccb0:	f000 815c 	beq.w	800cf6c <xQueueReceive+0x2cc>
 800ccb4:	4604      	mov	r4, r0
 800ccb6:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ccb8:	f001 f85c 	bl	800dd74 <xTaskGetSchedulerState>
 800ccbc:	b950      	cbnz	r0, 800ccd4 <xQueueReceive+0x34>
 800ccbe:	9d01      	ldr	r5, [sp, #4]
 800ccc0:	b14d      	cbz	r5, 800ccd6 <xQueueReceive+0x36>
 800ccc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc6:	f383 8811 	msr	BASEPRI, r3
 800ccca:	f3bf 8f6f 	isb	sy
 800ccce:	f3bf 8f4f 	dsb	sy
 800ccd2:	e7fe      	b.n	800ccd2 <xQueueReceive+0x32>
 800ccd4:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
 800ccd6:	f7ff f955 	bl	800bf84 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ccda:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
					portYIELD_WITHIN_API();
 800ccde:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 800cfa8 <xQueueReceive+0x308>
		prvLockQueue( pxQueue );
 800cce2:	2700      	movs	r7, #0
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cce4:	f1b9 0f00 	cmp.w	r9, #0
 800cce8:	f040 8086 	bne.w	800cdf8 <xQueueReceive+0x158>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ccec:	9b01      	ldr	r3, [sp, #4]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	f000 8136 	beq.w	800cf60 <xQueueReceive+0x2c0>
				else if( xEntryTimeSet == pdFALSE )
 800ccf4:	b915      	cbnz	r5, 800ccfc <xQueueReceive+0x5c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ccf6:	a802      	add	r0, sp, #8
 800ccf8:	f000 ffde 	bl	800dcb8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800ccfc:	f7ff f964 	bl	800bfc8 <vPortExitCritical>
		vTaskSuspendAll();
 800cd00:	f000 fd3e 	bl	800d780 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cd04:	f7ff f93e 	bl	800bf84 <vPortEnterCritical>
 800cd08:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cd0c:	2bff      	cmp	r3, #255	; 0xff
 800cd0e:	bf08      	it	eq
 800cd10:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 800cd14:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cd18:	2bff      	cmp	r3, #255	; 0xff
 800cd1a:	bf08      	it	eq
 800cd1c:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 800cd20:	f7ff f952 	bl	800bfc8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cd24:	a901      	add	r1, sp, #4
 800cd26:	a802      	add	r0, sp, #8
 800cd28:	f000 ffd2 	bl	800dcd0 <xTaskCheckForTimeOut>
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	f040 80be 	bne.w	800ceae <xQueueReceive+0x20e>
	taskENTER_CRITICAL();
 800cd32:	f7ff f927 	bl	800bf84 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cd36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d16c      	bne.n	800ce16 <xQueueReceive+0x176>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cd3c:	f104 0924 	add.w	r9, r4, #36	; 0x24
	taskEXIT_CRITICAL();
 800cd40:	f7ff f942 	bl	800bfc8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cd44:	4648      	mov	r0, r9
 800cd46:	9901      	ldr	r1, [sp, #4]
 800cd48:	f000 fec0 	bl	800dacc <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 800cd4c:	f7ff f91a 	bl	800bf84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800cd50:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800cd54:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cd56:	2d00      	cmp	r5, #0
 800cd58:	dc04      	bgt.n	800cd64 <xQueueReceive+0xc4>
 800cd5a:	e011      	b.n	800cd80 <xQueueReceive+0xe0>
 800cd5c:	3d01      	subs	r5, #1
 800cd5e:	b2eb      	uxtb	r3, r5
 800cd60:	b25d      	sxtb	r5, r3
 800cd62:	b16b      	cbz	r3, 800cd80 <xQueueReceive+0xe0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd66:	b15b      	cbz	r3, 800cd80 <xQueueReceive+0xe0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd68:	4648      	mov	r0, r9
 800cd6a:	f000 ff61 	bl	800dc30 <xTaskRemoveFromEventList>
 800cd6e:	2800      	cmp	r0, #0
 800cd70:	d0f4      	beq.n	800cd5c <xQueueReceive+0xbc>
 800cd72:	3d01      	subs	r5, #1
						vTaskMissedYield();
 800cd74:	f000 fff8 	bl	800dd68 <vTaskMissedYield>
 800cd78:	b2eb      	uxtb	r3, r5
 800cd7a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d1f1      	bne.n	800cd64 <xQueueReceive+0xc4>
		pxQueue->cTxLock = queueUNLOCKED;
 800cd80:	23ff      	movs	r3, #255	; 0xff
 800cd82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800cd86:	f7ff f91f 	bl	800bfc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800cd8a:	f7ff f8fb 	bl	800bf84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800cd8e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800cd92:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cd94:	2d00      	cmp	r5, #0
 800cd96:	dd16      	ble.n	800cdc6 <xQueueReceive+0x126>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd98:	6923      	ldr	r3, [r4, #16]
 800cd9a:	b1a3      	cbz	r3, 800cdc6 <xQueueReceive+0x126>
 800cd9c:	f104 0910 	add.w	r9, r4, #16
 800cda0:	e005      	b.n	800cdae <xQueueReceive+0x10e>
 800cda2:	3d01      	subs	r5, #1
 800cda4:	b2eb      	uxtb	r3, r5
 800cda6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cda8:	b16b      	cbz	r3, 800cdc6 <xQueueReceive+0x126>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cdaa:	6923      	ldr	r3, [r4, #16]
 800cdac:	b15b      	cbz	r3, 800cdc6 <xQueueReceive+0x126>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cdae:	4648      	mov	r0, r9
 800cdb0:	f000 ff3e 	bl	800dc30 <xTaskRemoveFromEventList>
 800cdb4:	2800      	cmp	r0, #0
 800cdb6:	d0f4      	beq.n	800cda2 <xQueueReceive+0x102>
 800cdb8:	3d01      	subs	r5, #1
					vTaskMissedYield();
 800cdba:	f000 ffd5 	bl	800dd68 <vTaskMissedYield>
 800cdbe:	b2eb      	uxtb	r3, r5
 800cdc0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d1f1      	bne.n	800cdaa <xQueueReceive+0x10a>
		pxQueue->cRxLock = queueUNLOCKED;
 800cdc6:	23ff      	movs	r3, #255	; 0xff
 800cdc8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800cdcc:	f7ff f8fc 	bl	800bfc8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 800cdd0:	f000 fd92 	bl	800d8f8 <xTaskResumeAll>
 800cdd4:	b938      	cbnz	r0, 800cde6 <xQueueReceive+0x146>
					portYIELD_WITHIN_API();
 800cdd6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cdda:	f8c8 3000 	str.w	r3, [r8]
 800cdde:	f3bf 8f4f 	dsb	sy
 800cde2:	f3bf 8f6f 	isb	sy
 800cde6:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800cde8:	f7ff f8cc 	bl	800bf84 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cdec:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cdf0:	f1b9 0f00 	cmp.w	r9, #0
 800cdf4:	f43f af7a 	beq.w	800ccec <xQueueReceive+0x4c>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cdf8:	4631      	mov	r1, r6
 800cdfa:	4620      	mov	r0, r4
 800cdfc:	f7ff fb3a 	bl	800c474 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ce00:	f109 33ff 	add.w	r3, r9, #4294967295
 800ce04:	63a3      	str	r3, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce06:	6923      	ldr	r3, [r4, #16]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	f040 80bc 	bne.w	800cf86 <xQueueReceive+0x2e6>
				taskEXIT_CRITICAL();
 800ce0e:	f7ff f8db 	bl	800bfc8 <vPortExitCritical>
				return pdPASS;
 800ce12:	2001      	movs	r0, #1
 800ce14:	e0a7      	b.n	800cf66 <xQueueReceive+0x2c6>
	taskEXIT_CRITICAL();
 800ce16:	f7ff f8d7 	bl	800bfc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800ce1a:	f7ff f8b3 	bl	800bf84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800ce1e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800ce22:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ce24:	2d00      	cmp	r5, #0
 800ce26:	dd16      	ble.n	800ce56 <xQueueReceive+0x1b6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce2a:	b1a3      	cbz	r3, 800ce56 <xQueueReceive+0x1b6>
 800ce2c:	f104 0924 	add.w	r9, r4, #36	; 0x24
 800ce30:	e005      	b.n	800ce3e <xQueueReceive+0x19e>
 800ce32:	3d01      	subs	r5, #1
 800ce34:	b2eb      	uxtb	r3, r5
 800ce36:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ce38:	b16b      	cbz	r3, 800ce56 <xQueueReceive+0x1b6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce3c:	b15b      	cbz	r3, 800ce56 <xQueueReceive+0x1b6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce3e:	4648      	mov	r0, r9
 800ce40:	f000 fef6 	bl	800dc30 <xTaskRemoveFromEventList>
 800ce44:	2800      	cmp	r0, #0
 800ce46:	d0f4      	beq.n	800ce32 <xQueueReceive+0x192>
 800ce48:	3d01      	subs	r5, #1
						vTaskMissedYield();
 800ce4a:	f000 ff8d 	bl	800dd68 <vTaskMissedYield>
 800ce4e:	b2eb      	uxtb	r3, r5
 800ce50:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d1f1      	bne.n	800ce3a <xQueueReceive+0x19a>
		pxQueue->cTxLock = queueUNLOCKED;
 800ce56:	23ff      	movs	r3, #255	; 0xff
 800ce58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800ce5c:	f7ff f8b4 	bl	800bfc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800ce60:	f7ff f890 	bl	800bf84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800ce64:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800ce68:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ce6a:	2d00      	cmp	r5, #0
 800ce6c:	dd16      	ble.n	800ce9c <xQueueReceive+0x1fc>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce6e:	6923      	ldr	r3, [r4, #16]
 800ce70:	b1a3      	cbz	r3, 800ce9c <xQueueReceive+0x1fc>
 800ce72:	f104 0910 	add.w	r9, r4, #16
 800ce76:	e005      	b.n	800ce84 <xQueueReceive+0x1e4>
 800ce78:	3d01      	subs	r5, #1
 800ce7a:	b2eb      	uxtb	r3, r5
 800ce7c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ce7e:	b16b      	cbz	r3, 800ce9c <xQueueReceive+0x1fc>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce80:	6923      	ldr	r3, [r4, #16]
 800ce82:	b15b      	cbz	r3, 800ce9c <xQueueReceive+0x1fc>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce84:	4648      	mov	r0, r9
 800ce86:	f000 fed3 	bl	800dc30 <xTaskRemoveFromEventList>
 800ce8a:	2800      	cmp	r0, #0
 800ce8c:	d0f4      	beq.n	800ce78 <xQueueReceive+0x1d8>
 800ce8e:	3d01      	subs	r5, #1
					vTaskMissedYield();
 800ce90:	f000 ff6a 	bl	800dd68 <vTaskMissedYield>
 800ce94:	b2eb      	uxtb	r3, r5
 800ce96:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d1f1      	bne.n	800ce80 <xQueueReceive+0x1e0>
		pxQueue->cRxLock = queueUNLOCKED;
 800ce9c:	23ff      	movs	r3, #255	; 0xff
 800ce9e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800cea2:	f7ff f891 	bl	800bfc8 <vPortExitCritical>
 800cea6:	2501      	movs	r5, #1
				( void ) xTaskResumeAll();
 800cea8:	f000 fd26 	bl	800d8f8 <xTaskResumeAll>
 800ceac:	e79c      	b.n	800cde8 <xQueueReceive+0x148>
	taskENTER_CRITICAL();
 800ceae:	f7ff f869 	bl	800bf84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800ceb2:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800ceb6:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ceb8:	2d00      	cmp	r5, #0
 800ceba:	dd16      	ble.n	800ceea <xQueueReceive+0x24a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cebc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cebe:	b1a3      	cbz	r3, 800ceea <xQueueReceive+0x24a>
 800cec0:	f104 0924 	add.w	r9, r4, #36	; 0x24
 800cec4:	e005      	b.n	800ced2 <xQueueReceive+0x232>
 800cec6:	3d01      	subs	r5, #1
 800cec8:	b2eb      	uxtb	r3, r5
 800ceca:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cecc:	b16b      	cbz	r3, 800ceea <xQueueReceive+0x24a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cece:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ced0:	b15b      	cbz	r3, 800ceea <xQueueReceive+0x24a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ced2:	4648      	mov	r0, r9
 800ced4:	f000 feac 	bl	800dc30 <xTaskRemoveFromEventList>
 800ced8:	2800      	cmp	r0, #0
 800ceda:	d0f4      	beq.n	800cec6 <xQueueReceive+0x226>
 800cedc:	3d01      	subs	r5, #1
						vTaskMissedYield();
 800cede:	f000 ff43 	bl	800dd68 <vTaskMissedYield>
 800cee2:	b2eb      	uxtb	r3, r5
 800cee4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d1f1      	bne.n	800cece <xQueueReceive+0x22e>
		pxQueue->cTxLock = queueUNLOCKED;
 800ceea:	23ff      	movs	r3, #255	; 0xff
 800ceec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800cef0:	f7ff f86a 	bl	800bfc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800cef4:	f7ff f846 	bl	800bf84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800cef8:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800cefc:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cefe:	2d00      	cmp	r5, #0
 800cf00:	dd16      	ble.n	800cf30 <xQueueReceive+0x290>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf02:	6923      	ldr	r3, [r4, #16]
 800cf04:	b1a3      	cbz	r3, 800cf30 <xQueueReceive+0x290>
 800cf06:	f104 0910 	add.w	r9, r4, #16
 800cf0a:	e005      	b.n	800cf18 <xQueueReceive+0x278>
 800cf0c:	3d01      	subs	r5, #1
 800cf0e:	b2eb      	uxtb	r3, r5
 800cf10:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cf12:	b16b      	cbz	r3, 800cf30 <xQueueReceive+0x290>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf14:	6923      	ldr	r3, [r4, #16]
 800cf16:	b15b      	cbz	r3, 800cf30 <xQueueReceive+0x290>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf18:	4648      	mov	r0, r9
 800cf1a:	f000 fe89 	bl	800dc30 <xTaskRemoveFromEventList>
 800cf1e:	2800      	cmp	r0, #0
 800cf20:	d0f4      	beq.n	800cf0c <xQueueReceive+0x26c>
 800cf22:	3d01      	subs	r5, #1
					vTaskMissedYield();
 800cf24:	f000 ff20 	bl	800dd68 <vTaskMissedYield>
 800cf28:	b2eb      	uxtb	r3, r5
 800cf2a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d1f1      	bne.n	800cf14 <xQueueReceive+0x274>
		pxQueue->cRxLock = queueUNLOCKED;
 800cf30:	23ff      	movs	r3, #255	; 0xff
 800cf32:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800cf36:	f7ff f847 	bl	800bfc8 <vPortExitCritical>
			( void ) xTaskResumeAll();
 800cf3a:	f000 fcdd 	bl	800d8f8 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800cf3e:	f7ff f821 	bl	800bf84 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cf42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cf44:	b163      	cbz	r3, 800cf60 <xQueueReceive+0x2c0>
	taskEXIT_CRITICAL();
 800cf46:	f7ff f83f 	bl	800bfc8 <vPortExitCritical>
 800cf4a:	2501      	movs	r5, #1
 800cf4c:	e74c      	b.n	800cde8 <xQueueReceive+0x148>
 800cf4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf52:	f383 8811 	msr	BASEPRI, r3
 800cf56:	f3bf 8f6f 	isb	sy
 800cf5a:	f3bf 8f4f 	dsb	sy
 800cf5e:	e7fe      	b.n	800cf5e <xQueueReceive+0x2be>
					taskEXIT_CRITICAL();
 800cf60:	f7ff f832 	bl	800bfc8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800cf64:	2000      	movs	r0, #0
}
 800cf66:	b005      	add	sp, #20
 800cf68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf6c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	f43f aea0 	beq.w	800ccb4 <xQueueReceive+0x14>
 800cf74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf78:	f383 8811 	msr	BASEPRI, r3
 800cf7c:	f3bf 8f6f 	isb	sy
 800cf80:	f3bf 8f4f 	dsb	sy
 800cf84:	e7fe      	b.n	800cf84 <xQueueReceive+0x2e4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf86:	f104 0010 	add.w	r0, r4, #16
 800cf8a:	f000 fe51 	bl	800dc30 <xTaskRemoveFromEventList>
 800cf8e:	2800      	cmp	r0, #0
 800cf90:	f43f af3d 	beq.w	800ce0e <xQueueReceive+0x16e>
						queueYIELD_IF_USING_PREEMPTION();
 800cf94:	4b04      	ldr	r3, [pc, #16]	; (800cfa8 <xQueueReceive+0x308>)
 800cf96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf9a:	601a      	str	r2, [r3, #0]
 800cf9c:	f3bf 8f4f 	dsb	sy
 800cfa0:	f3bf 8f6f 	isb	sy
 800cfa4:	e733      	b.n	800ce0e <xQueueReceive+0x16e>
 800cfa6:	bf00      	nop
 800cfa8:	e000ed04 	.word	0xe000ed04

0800cfac <xQueueSemaphoreTake>:
{
 800cfac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cfb0:	b085      	sub	sp, #20
 800cfb2:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800cfb4:	b150      	cbz	r0, 800cfcc <xQueueSemaphoreTake+0x20>
	configASSERT( pxQueue->uxItemSize == 0 );
 800cfb6:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800cfb8:	b18d      	cbz	r5, 800cfde <xQueueSemaphoreTake+0x32>
 800cfba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfbe:	f383 8811 	msr	BASEPRI, r3
 800cfc2:	f3bf 8f6f 	isb	sy
 800cfc6:	f3bf 8f4f 	dsb	sy
 800cfca:	e7fe      	b.n	800cfca <xQueueSemaphoreTake+0x1e>
 800cfcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd0:	f383 8811 	msr	BASEPRI, r3
 800cfd4:	f3bf 8f6f 	isb	sy
 800cfd8:	f3bf 8f4f 	dsb	sy
 800cfdc:	e7fe      	b.n	800cfdc <xQueueSemaphoreTake+0x30>
 800cfde:	4604      	mov	r4, r0
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cfe0:	f000 fec8 	bl	800dd74 <xTaskGetSchedulerState>
 800cfe4:	b918      	cbnz	r0, 800cfee <xQueueSemaphoreTake+0x42>
 800cfe6:	9d01      	ldr	r5, [sp, #4]
 800cfe8:	2d00      	cmp	r5, #0
 800cfea:	f040 8102 	bne.w	800d1f2 <xQueueSemaphoreTake+0x246>
		taskENTER_CRITICAL();
 800cfee:	f7fe ffc9 	bl	800bf84 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cff2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
					portYIELD_WITHIN_API();
 800cff4:	f8df 8268 	ldr.w	r8, [pc, #616]	; 800d260 <xQueueSemaphoreTake+0x2b4>
 800cff8:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800cffa:	2700      	movs	r7, #0
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	f040 8087 	bne.w	800d110 <xQueueSemaphoreTake+0x164>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d002:	9b01      	ldr	r3, [sp, #4]
 800d004:	2b00      	cmp	r3, #0
 800d006:	f000 810c 	beq.w	800d222 <xQueueSemaphoreTake+0x276>
				else if( xEntryTimeSet == pdFALSE )
 800d00a:	b916      	cbnz	r6, 800d012 <xQueueSemaphoreTake+0x66>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d00c:	a802      	add	r0, sp, #8
 800d00e:	f000 fe53 	bl	800dcb8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800d012:	f7fe ffd9 	bl	800bfc8 <vPortExitCritical>
		vTaskSuspendAll();
 800d016:	f000 fbb3 	bl	800d780 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d01a:	f7fe ffb3 	bl	800bf84 <vPortEnterCritical>
 800d01e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d022:	2bff      	cmp	r3, #255	; 0xff
 800d024:	bf08      	it	eq
 800d026:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 800d02a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d02e:	2bff      	cmp	r3, #255	; 0xff
 800d030:	bf08      	it	eq
 800d032:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 800d036:	f7fe ffc7 	bl	800bfc8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d03a:	a901      	add	r1, sp, #4
 800d03c:	a802      	add	r0, sp, #8
 800d03e:	f000 fe47 	bl	800dcd0 <xTaskCheckForTimeOut>
 800d042:	2800      	cmp	r0, #0
 800d044:	d17d      	bne.n	800d142 <xQueueSemaphoreTake+0x196>
	taskENTER_CRITICAL();
 800d046:	f7fe ff9d 	bl	800bf84 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d04a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d170      	bne.n	800d132 <xQueueSemaphoreTake+0x186>
	taskEXIT_CRITICAL();
 800d050:	f7fe ffba 	bl	800bfc8 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d054:	6823      	ldr	r3, [r4, #0]
 800d056:	2b00      	cmp	r3, #0
 800d058:	f000 80c2 	beq.w	800d1e0 <xQueueSemaphoreTake+0x234>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d05c:	f104 0924 	add.w	r9, r4, #36	; 0x24
 800d060:	4648      	mov	r0, r9
 800d062:	9901      	ldr	r1, [sp, #4]
 800d064:	f000 fd32 	bl	800dacc <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 800d068:	f7fe ff8c 	bl	800bf84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800d06c:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
 800d070:	b276      	sxtb	r6, r6
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d072:	2e00      	cmp	r6, #0
 800d074:	dc04      	bgt.n	800d080 <xQueueSemaphoreTake+0xd4>
 800d076:	e011      	b.n	800d09c <xQueueSemaphoreTake+0xf0>
 800d078:	3e01      	subs	r6, #1
 800d07a:	b2f3      	uxtb	r3, r6
 800d07c:	b25e      	sxtb	r6, r3
 800d07e:	b16b      	cbz	r3, 800d09c <xQueueSemaphoreTake+0xf0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d080:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d082:	b15b      	cbz	r3, 800d09c <xQueueSemaphoreTake+0xf0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d084:	4648      	mov	r0, r9
 800d086:	f000 fdd3 	bl	800dc30 <xTaskRemoveFromEventList>
 800d08a:	2800      	cmp	r0, #0
 800d08c:	d0f4      	beq.n	800d078 <xQueueSemaphoreTake+0xcc>
 800d08e:	3e01      	subs	r6, #1
						vTaskMissedYield();
 800d090:	f000 fe6a 	bl	800dd68 <vTaskMissedYield>
 800d094:	b2f3      	uxtb	r3, r6
 800d096:	b25e      	sxtb	r6, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d1f1      	bne.n	800d080 <xQueueSemaphoreTake+0xd4>
		pxQueue->cTxLock = queueUNLOCKED;
 800d09c:	23ff      	movs	r3, #255	; 0xff
 800d09e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800d0a2:	f7fe ff91 	bl	800bfc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800d0a6:	f7fe ff6d 	bl	800bf84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800d0aa:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 800d0ae:	b276      	sxtb	r6, r6
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d0b0:	2e00      	cmp	r6, #0
 800d0b2:	dd16      	ble.n	800d0e2 <xQueueSemaphoreTake+0x136>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0b4:	6923      	ldr	r3, [r4, #16]
 800d0b6:	b1a3      	cbz	r3, 800d0e2 <xQueueSemaphoreTake+0x136>
 800d0b8:	f104 0910 	add.w	r9, r4, #16
 800d0bc:	e005      	b.n	800d0ca <xQueueSemaphoreTake+0x11e>
 800d0be:	3e01      	subs	r6, #1
 800d0c0:	b2f3      	uxtb	r3, r6
 800d0c2:	b25e      	sxtb	r6, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d0c4:	b16b      	cbz	r3, 800d0e2 <xQueueSemaphoreTake+0x136>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0c6:	6923      	ldr	r3, [r4, #16]
 800d0c8:	b15b      	cbz	r3, 800d0e2 <xQueueSemaphoreTake+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d0ca:	4648      	mov	r0, r9
 800d0cc:	f000 fdb0 	bl	800dc30 <xTaskRemoveFromEventList>
 800d0d0:	2800      	cmp	r0, #0
 800d0d2:	d0f4      	beq.n	800d0be <xQueueSemaphoreTake+0x112>
 800d0d4:	3e01      	subs	r6, #1
					vTaskMissedYield();
 800d0d6:	f000 fe47 	bl	800dd68 <vTaskMissedYield>
 800d0da:	b2f3      	uxtb	r3, r6
 800d0dc:	b25e      	sxtb	r6, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d1f1      	bne.n	800d0c6 <xQueueSemaphoreTake+0x11a>
		pxQueue->cRxLock = queueUNLOCKED;
 800d0e2:	23ff      	movs	r3, #255	; 0xff
 800d0e4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800d0e8:	f7fe ff6e 	bl	800bfc8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 800d0ec:	f000 fc04 	bl	800d8f8 <xTaskResumeAll>
 800d0f0:	b938      	cbnz	r0, 800d102 <xQueueSemaphoreTake+0x156>
					portYIELD_WITHIN_API();
 800d0f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d0f6:	f8c8 3000 	str.w	r3, [r8]
 800d0fa:	f3bf 8f4f 	dsb	sy
 800d0fe:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 800d102:	f7fe ff3f 	bl	800bf84 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d106:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d108:	2601      	movs	r6, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	f43f af79 	beq.w	800d002 <xQueueSemaphoreTake+0x56>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d110:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d112:	3b01      	subs	r3, #1
 800d114:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d116:	b912      	cbnz	r2, 800d11e <xQueueSemaphoreTake+0x172>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800d118:	f000 ff50 	bl	800dfbc <pvTaskIncrementMutexHeldCount>
 800d11c:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d11e:	6923      	ldr	r3, [r4, #16]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d16f      	bne.n	800d204 <xQueueSemaphoreTake+0x258>
				taskEXIT_CRITICAL();
 800d124:	f7fe ff50 	bl	800bfc8 <vPortExitCritical>
				return pdPASS;
 800d128:	2501      	movs	r5, #1
}
 800d12a:	4628      	mov	r0, r5
 800d12c:	b005      	add	sp, #20
 800d12e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 800d132:	f7fe ff49 	bl	800bfc8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800d136:	4620      	mov	r0, r4
 800d138:	f7ff f9b0 	bl	800c49c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d13c:	f000 fbdc 	bl	800d8f8 <xTaskResumeAll>
 800d140:	e7df      	b.n	800d102 <xQueueSemaphoreTake+0x156>
	taskENTER_CRITICAL();
 800d142:	f7fe ff1f 	bl	800bf84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800d146:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
 800d14a:	b276      	sxtb	r6, r6
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d14c:	2e00      	cmp	r6, #0
 800d14e:	dd16      	ble.n	800d17e <xQueueSemaphoreTake+0x1d2>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d150:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d152:	b1a3      	cbz	r3, 800d17e <xQueueSemaphoreTake+0x1d2>
 800d154:	f104 0924 	add.w	r9, r4, #36	; 0x24
 800d158:	e005      	b.n	800d166 <xQueueSemaphoreTake+0x1ba>
 800d15a:	3e01      	subs	r6, #1
 800d15c:	b2f3      	uxtb	r3, r6
 800d15e:	b25e      	sxtb	r6, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d160:	b16b      	cbz	r3, 800d17e <xQueueSemaphoreTake+0x1d2>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d162:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d164:	b15b      	cbz	r3, 800d17e <xQueueSemaphoreTake+0x1d2>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d166:	4648      	mov	r0, r9
 800d168:	f000 fd62 	bl	800dc30 <xTaskRemoveFromEventList>
 800d16c:	2800      	cmp	r0, #0
 800d16e:	d0f4      	beq.n	800d15a <xQueueSemaphoreTake+0x1ae>
 800d170:	3e01      	subs	r6, #1
						vTaskMissedYield();
 800d172:	f000 fdf9 	bl	800dd68 <vTaskMissedYield>
 800d176:	b2f3      	uxtb	r3, r6
 800d178:	b25e      	sxtb	r6, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d1f1      	bne.n	800d162 <xQueueSemaphoreTake+0x1b6>
		pxQueue->cTxLock = queueUNLOCKED;
 800d17e:	23ff      	movs	r3, #255	; 0xff
 800d180:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800d184:	f7fe ff20 	bl	800bfc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800d188:	f7fe fefc 	bl	800bf84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800d18c:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 800d190:	b276      	sxtb	r6, r6
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d192:	2e00      	cmp	r6, #0
 800d194:	dd16      	ble.n	800d1c4 <xQueueSemaphoreTake+0x218>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d196:	6923      	ldr	r3, [r4, #16]
 800d198:	b1a3      	cbz	r3, 800d1c4 <xQueueSemaphoreTake+0x218>
 800d19a:	f104 0910 	add.w	r9, r4, #16
 800d19e:	e005      	b.n	800d1ac <xQueueSemaphoreTake+0x200>
 800d1a0:	3e01      	subs	r6, #1
 800d1a2:	b2f3      	uxtb	r3, r6
 800d1a4:	b25e      	sxtb	r6, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d1a6:	b16b      	cbz	r3, 800d1c4 <xQueueSemaphoreTake+0x218>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1a8:	6923      	ldr	r3, [r4, #16]
 800d1aa:	b15b      	cbz	r3, 800d1c4 <xQueueSemaphoreTake+0x218>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1ac:	4648      	mov	r0, r9
 800d1ae:	f000 fd3f 	bl	800dc30 <xTaskRemoveFromEventList>
 800d1b2:	2800      	cmp	r0, #0
 800d1b4:	d0f4      	beq.n	800d1a0 <xQueueSemaphoreTake+0x1f4>
 800d1b6:	3e01      	subs	r6, #1
					vTaskMissedYield();
 800d1b8:	f000 fdd6 	bl	800dd68 <vTaskMissedYield>
 800d1bc:	b2f3      	uxtb	r3, r6
 800d1be:	b25e      	sxtb	r6, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d1f1      	bne.n	800d1a8 <xQueueSemaphoreTake+0x1fc>
		pxQueue->cRxLock = queueUNLOCKED;
 800d1c4:	23ff      	movs	r3, #255	; 0xff
 800d1c6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800d1ca:	f7fe fefd 	bl	800bfc8 <vPortExitCritical>
			( void ) xTaskResumeAll();
 800d1ce:	f000 fb93 	bl	800d8f8 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800d1d2:	f7fe fed7 	bl	800bf84 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d1d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d1d8:	b36b      	cbz	r3, 800d236 <xQueueSemaphoreTake+0x28a>
	taskEXIT_CRITICAL();
 800d1da:	f7fe fef5 	bl	800bfc8 <vPortExitCritical>
 800d1de:	e790      	b.n	800d102 <xQueueSemaphoreTake+0x156>
						taskENTER_CRITICAL();
 800d1e0:	f7fe fed0 	bl	800bf84 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800d1e4:	6860      	ldr	r0, [r4, #4]
 800d1e6:	f000 fdd5 	bl	800dd94 <xTaskPriorityInherit>
 800d1ea:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800d1ec:	f7fe feec 	bl	800bfc8 <vPortExitCritical>
 800d1f0:	e734      	b.n	800d05c <xQueueSemaphoreTake+0xb0>
 800d1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1f6:	f383 8811 	msr	BASEPRI, r3
 800d1fa:	f3bf 8f6f 	isb	sy
 800d1fe:	f3bf 8f4f 	dsb	sy
 800d202:	e7fe      	b.n	800d202 <xQueueSemaphoreTake+0x256>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d204:	f104 0010 	add.w	r0, r4, #16
 800d208:	f000 fd12 	bl	800dc30 <xTaskRemoveFromEventList>
 800d20c:	2800      	cmp	r0, #0
 800d20e:	d089      	beq.n	800d124 <xQueueSemaphoreTake+0x178>
						queueYIELD_IF_USING_PREEMPTION();
 800d210:	4b13      	ldr	r3, [pc, #76]	; (800d260 <xQueueSemaphoreTake+0x2b4>)
 800d212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d216:	601a      	str	r2, [r3, #0]
 800d218:	f3bf 8f4f 	dsb	sy
 800d21c:	f3bf 8f6f 	isb	sy
 800d220:	e780      	b.n	800d124 <xQueueSemaphoreTake+0x178>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d222:	b1cd      	cbz	r5, 800d258 <xQueueSemaphoreTake+0x2ac>
 800d224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d228:	f383 8811 	msr	BASEPRI, r3
 800d22c:	f3bf 8f6f 	isb	sy
 800d230:	f3bf 8f4f 	dsb	sy
 800d234:	e7fe      	b.n	800d234 <xQueueSemaphoreTake+0x288>
	taskEXIT_CRITICAL();
 800d236:	f7fe fec7 	bl	800bfc8 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 800d23a:	2d00      	cmp	r5, #0
 800d23c:	f43f af75 	beq.w	800d12a <xQueueSemaphoreTake+0x17e>
						taskENTER_CRITICAL();
 800d240:	f7fe fea0 	bl	800bf84 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800d244:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d246:	b119      	cbz	r1, 800d250 <xQueueSemaphoreTake+0x2a4>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d248:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d24a:	6819      	ldr	r1, [r3, #0]
 800d24c:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800d250:	6860      	ldr	r0, [r4, #4]
 800d252:	f000 fe51 	bl	800def8 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 800d256:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 800d258:	f7fe feb6 	bl	800bfc8 <vPortExitCritical>
 800d25c:	e765      	b.n	800d12a <xQueueSemaphoreTake+0x17e>
 800d25e:	bf00      	nop
 800d260:	e000ed04 	.word	0xe000ed04

0800d264 <xQueueReceiveFromISR>:
{
 800d264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800d268:	b1b0      	cbz	r0, 800d298 <xQueueReceiveFromISR+0x34>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d26a:	b379      	cbz	r1, 800d2cc <xQueueReceiveFromISR+0x68>
 800d26c:	4605      	mov	r5, r0
 800d26e:	4690      	mov	r8, r2
 800d270:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d272:	f7fe ffab 	bl	800c1cc <vPortValidateInterruptPriority>
	__asm volatile
 800d276:	f3ef 8711 	mrs	r7, BASEPRI
 800d27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d27e:	f383 8811 	msr	BASEPRI, r3
 800d282:	f3bf 8f6f 	isb	sy
 800d286:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d28a:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d28c:	b96c      	cbnz	r4, 800d2aa <xQueueReceiveFromISR+0x46>
			xReturn = pdFAIL;
 800d28e:	4620      	mov	r0, r4
	__asm volatile
 800d290:	f387 8811 	msr	BASEPRI, r7
}
 800d294:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800d298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d29c:	f383 8811 	msr	BASEPRI, r3
 800d2a0:	f3bf 8f6f 	isb	sy
 800d2a4:	f3bf 8f4f 	dsb	sy
 800d2a8:	e7fe      	b.n	800d2a8 <xQueueReceiveFromISR+0x44>
			const int8_t cRxLock = pxQueue->cRxLock;
 800d2aa:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d2ae:	4649      	mov	r1, r9
 800d2b0:	4628      	mov	r0, r5
			const int8_t cRxLock = pxQueue->cRxLock;
 800d2b2:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d2b4:	f7ff f8de 	bl	800c474 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d2b8:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 800d2ba:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d2bc:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800d2be:	d011      	beq.n	800d2e4 <xQueueReceiveFromISR+0x80>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d2c0:	1c73      	adds	r3, r6, #1
 800d2c2:	b25b      	sxtb	r3, r3
 800d2c4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
			xReturn = pdPASS;
 800d2c8:	2001      	movs	r0, #1
 800d2ca:	e7e1      	b.n	800d290 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d2cc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d0cc      	beq.n	800d26c <xQueueReceiveFromISR+0x8>
 800d2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d6:	f383 8811 	msr	BASEPRI, r3
 800d2da:	f3bf 8f6f 	isb	sy
 800d2de:	f3bf 8f4f 	dsb	sy
 800d2e2:	e7fe      	b.n	800d2e2 <xQueueReceiveFromISR+0x7e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d2e4:	692b      	ldr	r3, [r5, #16]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d0ee      	beq.n	800d2c8 <xQueueReceiveFromISR+0x64>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d2ea:	f105 0010 	add.w	r0, r5, #16
 800d2ee:	f000 fc9f 	bl	800dc30 <xTaskRemoveFromEventList>
 800d2f2:	2800      	cmp	r0, #0
 800d2f4:	d0e8      	beq.n	800d2c8 <xQueueReceiveFromISR+0x64>
						if( pxHigherPriorityTaskWoken != NULL )
 800d2f6:	f1b8 0f00 	cmp.w	r8, #0
 800d2fa:	d0e5      	beq.n	800d2c8 <xQueueReceiveFromISR+0x64>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d2fc:	2001      	movs	r0, #1
 800d2fe:	f8c8 0000 	str.w	r0, [r8]
 800d302:	e7c5      	b.n	800d290 <xQueueReceiveFromISR+0x2c>

0800d304 <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d304:	4b13      	ldr	r3, [pc, #76]	; (800d354 <vQueueAddToRegistry+0x50>)
 800d306:	681a      	ldr	r2, [r3, #0]
 800d308:	b17a      	cbz	r2, 800d32a <vQueueAddToRegistry+0x26>
 800d30a:	689a      	ldr	r2, [r3, #8]
 800d30c:	b1b2      	cbz	r2, 800d33c <vQueueAddToRegistry+0x38>
 800d30e:	691a      	ldr	r2, [r3, #16]
 800d310:	b1b2      	cbz	r2, 800d340 <vQueueAddToRegistry+0x3c>
 800d312:	699a      	ldr	r2, [r3, #24]
 800d314:	b1b2      	cbz	r2, 800d344 <vQueueAddToRegistry+0x40>
 800d316:	6a1a      	ldr	r2, [r3, #32]
 800d318:	b1b2      	cbz	r2, 800d348 <vQueueAddToRegistry+0x44>
 800d31a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d31c:	b1b2      	cbz	r2, 800d34c <vQueueAddToRegistry+0x48>
 800d31e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d320:	b112      	cbz	r2, 800d328 <vQueueAddToRegistry+0x24>
 800d322:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d324:	b1a2      	cbz	r2, 800d350 <vQueueAddToRegistry+0x4c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d326:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d328:	2206      	movs	r2, #6
	{
 800d32a:	b410      	push	{r4}
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d32c:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d330:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d334:	6060      	str	r0, [r4, #4]
	}
 800d336:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d33a:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d33c:	2201      	movs	r2, #1
 800d33e:	e7f4      	b.n	800d32a <vQueueAddToRegistry+0x26>
 800d340:	2202      	movs	r2, #2
 800d342:	e7f2      	b.n	800d32a <vQueueAddToRegistry+0x26>
 800d344:	2203      	movs	r2, #3
 800d346:	e7f0      	b.n	800d32a <vQueueAddToRegistry+0x26>
 800d348:	2204      	movs	r2, #4
 800d34a:	e7ee      	b.n	800d32a <vQueueAddToRegistry+0x26>
 800d34c:	2205      	movs	r2, #5
 800d34e:	e7ec      	b.n	800d32a <vQueueAddToRegistry+0x26>
 800d350:	2207      	movs	r2, #7
 800d352:	e7ea      	b.n	800d32a <vQueueAddToRegistry+0x26>
 800d354:	2000540c 	.word	0x2000540c

0800d358 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d358:	b570      	push	{r4, r5, r6, lr}
 800d35a:	4605      	mov	r5, r0
 800d35c:	460c      	mov	r4, r1
 800d35e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d360:	f7fe fe10 	bl	800bf84 <vPortEnterCritical>
 800d364:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 800d368:	2bff      	cmp	r3, #255	; 0xff
 800d36a:	bf04      	itt	eq
 800d36c:	2300      	moveq	r3, #0
 800d36e:	f885 3044 	strbeq.w	r3, [r5, #68]	; 0x44
 800d372:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 800d376:	2bff      	cmp	r3, #255	; 0xff
 800d378:	bf04      	itt	eq
 800d37a:	2300      	moveq	r3, #0
 800d37c:	f885 3045 	strbeq.w	r3, [r5, #69]	; 0x45
 800d380:	f7fe fe22 	bl	800bfc8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d384:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800d386:	b92b      	cbnz	r3, 800d394 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d388:	4632      	mov	r2, r6
 800d38a:	4621      	mov	r1, r4
 800d38c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800d390:	f000 fbee 	bl	800db70 <vTaskPlaceOnEventListRestricted>
	taskENTER_CRITICAL();
 800d394:	f7fe fdf6 	bl	800bf84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800d398:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800d39c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d39e:	2c00      	cmp	r4, #0
 800d3a0:	dd16      	ble.n	800d3d0 <vQueueWaitForMessageRestricted+0x78>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d3a4:	b1a3      	cbz	r3, 800d3d0 <vQueueWaitForMessageRestricted+0x78>
 800d3a6:	f105 0624 	add.w	r6, r5, #36	; 0x24
 800d3aa:	e005      	b.n	800d3b8 <vQueueWaitForMessageRestricted+0x60>
 800d3ac:	3c01      	subs	r4, #1
 800d3ae:	b2e3      	uxtb	r3, r4
 800d3b0:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d3b2:	b16b      	cbz	r3, 800d3d0 <vQueueWaitForMessageRestricted+0x78>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3b4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d3b6:	b15b      	cbz	r3, 800d3d0 <vQueueWaitForMessageRestricted+0x78>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d3b8:	4630      	mov	r0, r6
 800d3ba:	f000 fc39 	bl	800dc30 <xTaskRemoveFromEventList>
 800d3be:	2800      	cmp	r0, #0
 800d3c0:	d0f4      	beq.n	800d3ac <vQueueWaitForMessageRestricted+0x54>
 800d3c2:	3c01      	subs	r4, #1
						vTaskMissedYield();
 800d3c4:	f000 fcd0 	bl	800dd68 <vTaskMissedYield>
 800d3c8:	b2e3      	uxtb	r3, r4
 800d3ca:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d1f1      	bne.n	800d3b4 <vQueueWaitForMessageRestricted+0x5c>
		pxQueue->cTxLock = queueUNLOCKED;
 800d3d0:	23ff      	movs	r3, #255	; 0xff
 800d3d2:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 800d3d6:	f7fe fdf7 	bl	800bfc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800d3da:	f7fe fdd3 	bl	800bf84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800d3de:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800d3e2:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d3e4:	2c00      	cmp	r4, #0
 800d3e6:	dd16      	ble.n	800d416 <vQueueWaitForMessageRestricted+0xbe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d3e8:	692b      	ldr	r3, [r5, #16]
 800d3ea:	b1a3      	cbz	r3, 800d416 <vQueueWaitForMessageRestricted+0xbe>
 800d3ec:	f105 0610 	add.w	r6, r5, #16
 800d3f0:	e005      	b.n	800d3fe <vQueueWaitForMessageRestricted+0xa6>
 800d3f2:	3c01      	subs	r4, #1
 800d3f4:	b2e3      	uxtb	r3, r4
 800d3f6:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d3f8:	b16b      	cbz	r3, 800d416 <vQueueWaitForMessageRestricted+0xbe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d3fa:	692b      	ldr	r3, [r5, #16]
 800d3fc:	b15b      	cbz	r3, 800d416 <vQueueWaitForMessageRestricted+0xbe>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d3fe:	4630      	mov	r0, r6
 800d400:	f000 fc16 	bl	800dc30 <xTaskRemoveFromEventList>
 800d404:	2800      	cmp	r0, #0
 800d406:	d0f4      	beq.n	800d3f2 <vQueueWaitForMessageRestricted+0x9a>
 800d408:	3c01      	subs	r4, #1
					vTaskMissedYield();
 800d40a:	f000 fcad 	bl	800dd68 <vTaskMissedYield>
 800d40e:	b2e3      	uxtb	r3, r4
 800d410:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d412:	2b00      	cmp	r3, #0
 800d414:	d1f1      	bne.n	800d3fa <vQueueWaitForMessageRestricted+0xa2>
		pxQueue->cRxLock = queueUNLOCKED;
 800d416:	23ff      	movs	r3, #255	; 0xff
 800d418:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 800d41c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800d420:	f7fe bdd2 	b.w	800bfc8 <vPortExitCritical>

0800d424 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d424:	b580      	push	{r7, lr}
 800d426:	4d16      	ldr	r5, [pc, #88]	; (800d480 <prvIdleTask+0x5c>)
 800d428:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800d48c <prvIdleTask+0x68>
 800d42c:	4f15      	ldr	r7, [pc, #84]	; (800d484 <prvIdleTask+0x60>)
 800d42e:	4e16      	ldr	r6, [pc, #88]	; (800d488 <prvIdleTask+0x64>)
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
			{
				taskYIELD();
 800d430:	f8df a05c 	ldr.w	sl, [pc, #92]	; 800d490 <prvIdleTask+0x6c>
 800d434:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
 800d438:	e014      	b.n	800d464 <prvIdleTask+0x40>

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			taskENTER_CRITICAL();
 800d43a:	f7fe fda3 	bl	800bf84 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d442:	1d20      	adds	r0, r4, #4
 800d444:	f7fe fd22 	bl	800be8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d448:	6833      	ldr	r3, [r6, #0]
 800d44a:	3b01      	subs	r3, #1
 800d44c:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d44e:	682b      	ldr	r3, [r5, #0]
 800d450:	3b01      	subs	r3, #1
 800d452:	602b      	str	r3, [r5, #0]
			}
			taskEXIT_CRITICAL();
 800d454:	f7fe fdb8 	bl	800bfc8 <vPortExitCritical>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800d458:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800d45a:	f7fe ff9d 	bl	800c398 <vPortFree>
			vPortFree( pxTCB );
 800d45e:	4620      	mov	r0, r4
 800d460:	f7fe ff9a 	bl	800c398 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d464:	682b      	ldr	r3, [r5, #0]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d1e7      	bne.n	800d43a <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d46a:	f8d8 3000 	ldr.w	r3, [r8]
 800d46e:	2b01      	cmp	r3, #1
 800d470:	d9f8      	bls.n	800d464 <prvIdleTask+0x40>
				taskYIELD();
 800d472:	f8ca 9000 	str.w	r9, [sl]
 800d476:	f3bf 8f4f 	dsb	sy
 800d47a:	f3bf 8f6f 	isb	sy
 800d47e:	e7f1      	b.n	800d464 <prvIdleTask+0x40>
 800d480:	20004fc0 	.word	0x20004fc0
 800d484:	20005034 	.word	0x20005034
 800d488:	20004fbc 	.word	0x20004fbc
 800d48c:	20004f30 	.word	0x20004f30
 800d490:	e000ed04 	.word	0xe000ed04

0800d494 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d496:	4b1b      	ldr	r3, [pc, #108]	; (800d504 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d498:	4d1b      	ldr	r5, [pc, #108]	; (800d508 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800d49a:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d49c:	682b      	ldr	r3, [r5, #0]
{
 800d49e:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d4a0:	1d18      	adds	r0, r3, #4
{
 800d4a2:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d4a4:	f7fe fcf2 	bl	800be8c <uxListRemove>
 800d4a8:	b940      	cbnz	r0, 800d4bc <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800d4aa:	682b      	ldr	r3, [r5, #0]
 800d4ac:	4917      	ldr	r1, [pc, #92]	; (800d50c <prvAddCurrentTaskToDelayedList+0x78>)
 800d4ae:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800d4b0:	680b      	ldr	r3, [r1, #0]
 800d4b2:	2201      	movs	r2, #1
 800d4b4:	4082      	lsls	r2, r0
 800d4b6:	ea23 0302 	bic.w	r3, r3, r2
 800d4ba:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d4bc:	1c63      	adds	r3, r4, #1
 800d4be:	d018      	beq.n	800d4f2 <prvAddCurrentTaskToDelayedList+0x5e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d4c0:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d4c2:	682b      	ldr	r3, [r5, #0]

			if( xTimeToWake < xConstTickCount )
 800d4c4:	42a6      	cmp	r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d4c6:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d4c8:	d80b      	bhi.n	800d4e2 <prvAddCurrentTaskToDelayedList+0x4e>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d4ca:	4b11      	ldr	r3, [pc, #68]	; (800d510 <prvAddCurrentTaskToDelayedList+0x7c>)
 800d4cc:	6818      	ldr	r0, [r3, #0]
 800d4ce:	6829      	ldr	r1, [r5, #0]
 800d4d0:	3104      	adds	r1, #4
 800d4d2:	f7fe fcc1 	bl	800be58 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800d4d6:	4b0f      	ldr	r3, [pc, #60]	; (800d514 <prvAddCurrentTaskToDelayedList+0x80>)
 800d4d8:	681a      	ldr	r2, [r3, #0]
 800d4da:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 800d4dc:	bf38      	it	cc
 800d4de:	601c      	strcc	r4, [r3, #0]
 800d4e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d4e2:	4b0d      	ldr	r3, [pc, #52]	; (800d518 <prvAddCurrentTaskToDelayedList+0x84>)
 800d4e4:	6818      	ldr	r0, [r3, #0]
 800d4e6:	6829      	ldr	r1, [r5, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d4e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d4ec:	3104      	adds	r1, #4
 800d4ee:	f7fe bcb3 	b.w	800be58 <vListInsert>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d4f2:	2f00      	cmp	r7, #0
 800d4f4:	d0e4      	beq.n	800d4c0 <prvAddCurrentTaskToDelayedList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d4f6:	6829      	ldr	r1, [r5, #0]
 800d4f8:	4808      	ldr	r0, [pc, #32]	; (800d51c <prvAddCurrentTaskToDelayedList+0x88>)
 800d4fa:	3104      	adds	r1, #4
}
 800d4fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d500:	f7fe bc9a 	b.w	800be38 <vListInsertEnd>
 800d504:	20005048 	.word	0x20005048
 800d508:	20004f24 	.word	0x20004f24
 800d50c:	20004fd0 	.word	0x20004fd0
 800d510:	20004f28 	.word	0x20004f28
 800d514:	20005000 	.word	0x20005000
 800d518:	20004f2c 	.word	0x20004f2c
 800d51c:	20005020 	.word	0x20005020

0800d520 <xTaskCreate>:
	{
 800d520:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d524:	ea4f 0882 	mov.w	r8, r2, lsl #2
	{
 800d528:	4606      	mov	r6, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d52a:	4640      	mov	r0, r8
	{
 800d52c:	4689      	mov	r9, r1
 800d52e:	461f      	mov	r7, r3
 800d530:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d532:	f7fe fea1 	bl	800c278 <pvPortMalloc>
			if( pxStack != NULL )
 800d536:	2800      	cmp	r0, #0
 800d538:	f000 808c 	beq.w	800d654 <xTaskCreate+0x134>
 800d53c:	4682      	mov	sl, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800d53e:	2060      	movs	r0, #96	; 0x60
 800d540:	f7fe fe9a 	bl	800c278 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800d544:	4604      	mov	r4, r0
 800d546:	2800      	cmp	r0, #0
 800d548:	f000 8091 	beq.w	800d66e <xTaskCreate+0x14e>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800d54c:	f1a8 0804 	sub.w	r8, r8, #4
 800d550:	44d0      	add	r8, sl
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800d552:	f028 0807 	bic.w	r8, r8, #7
					pxNewTCB->pxStack = pxStack;
 800d556:	f8c0 a030 	str.w	sl, [r0, #48]	; 0x30
 800d55a:	f109 33ff 	add.w	r3, r9, #4294967295
 800d55e:	f109 0118 	add.w	r1, r9, #24
 800d562:	f100 0233 	add.w	r2, r0, #51	; 0x33
 800d566:	e001      	b.n	800d56c <xTaskCreate+0x4c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d568:	428b      	cmp	r3, r1
 800d56a:	d006      	beq.n	800d57a <xTaskCreate+0x5a>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d56c:	7858      	ldrb	r0, [r3, #1]
 800d56e:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 800d572:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800d576:	2800      	cmp	r0, #0
 800d578:	d1f6      	bne.n	800d568 <xTaskCreate+0x48>
 800d57a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d57c:	2b06      	cmp	r3, #6
 800d57e:	bf28      	it	cs
 800d580:	2306      	movcs	r3, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d582:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d586:	f104 0a04 	add.w	sl, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800d58a:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800d58c:	6523      	str	r3, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d58e:	4650      	mov	r0, sl
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d590:	f884 b04c 	strb.w	fp, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d594:	f8c4 b054 	str.w	fp, [r4, #84]	; 0x54
 800d598:	4699      	mov	r9, r3
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d59a:	f7fe fc49 	bl	800be30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d59e:	f104 0018 	add.w	r0, r4, #24
 800d5a2:	f7fe fc45 	bl	800be30 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5a6:	f1c9 0307 	rsb	r3, r9, #7
		pxNewTCB->ulNotifiedValue = 0;
 800d5aa:	f8c4 b058 	str.w	fp, [r4, #88]	; 0x58
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5ae:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d5b0:	6124      	str	r4, [r4, #16]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d5b2:	f884 b05c 	strb.w	fp, [r4, #92]	; 0x5c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d5b6:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d5b8:	463a      	mov	r2, r7
 800d5ba:	4631      	mov	r1, r6
 800d5bc:	4640      	mov	r0, r8
 800d5be:	f7fe fcb7 	bl	800bf30 <pxPortInitialiseStack>
 800d5c2:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800d5c4:	b105      	cbz	r5, 800d5c8 <xTaskCreate+0xa8>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d5c6:	602c      	str	r4, [r5, #0]
	taskENTER_CRITICAL();
 800d5c8:	f7fe fcdc 	bl	800bf84 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800d5cc:	4a3e      	ldr	r2, [pc, #248]	; (800d6c8 <xTaskCreate+0x1a8>)
		if( pxCurrentTCB == NULL )
 800d5ce:	4e3f      	ldr	r6, [pc, #252]	; (800d6cc <xTaskCreate+0x1ac>)
		uxCurrentNumberOfTasks++;
 800d5d0:	6813      	ldr	r3, [r2, #0]
 800d5d2:	3301      	adds	r3, #1
 800d5d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d5d6:	6833      	ldr	r3, [r6, #0]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d03f      	beq.n	800d65c <xTaskCreate+0x13c>
			if( xSchedulerRunning == pdFALSE )
 800d5dc:	4f3c      	ldr	r7, [pc, #240]	; (800d6d0 <xTaskCreate+0x1b0>)
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	b363      	cbz	r3, 800d63c <xTaskCreate+0x11c>
 800d5e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d5e4:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800d6f4 <xTaskCreate+0x1d4>
		uxTaskNumber++;
 800d5e8:	4a3a      	ldr	r2, [pc, #232]	; (800d6d4 <xTaskCreate+0x1b4>)
		prvAddTaskToReadyList( pxNewTCB );
 800d5ea:	f8df e10c 	ldr.w	lr, [pc, #268]	; 800d6f8 <xTaskCreate+0x1d8>
		uxTaskNumber++;
 800d5ee:	6810      	ldr	r0, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800d5f0:	f8de c000 	ldr.w	ip, [lr]
 800d5f4:	2501      	movs	r5, #1
		uxTaskNumber++;
 800d5f6:	4428      	add	r0, r5
 800d5f8:	6010      	str	r0, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800d5fa:	fa05 f203 	lsl.w	r2, r5, r3
 800d5fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d602:	ea42 020c 	orr.w	r2, r2, ip
 800d606:	eb08 0083 	add.w	r0, r8, r3, lsl #2
 800d60a:	4651      	mov	r1, sl
 800d60c:	f8ce 2000 	str.w	r2, [lr]
 800d610:	f7fe fc12 	bl	800be38 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800d614:	f7fe fcd8 	bl	800bfc8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	b1c3      	cbz	r3, 800d64e <xTaskCreate+0x12e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d61c:	6832      	ldr	r2, [r6, #0]
 800d61e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d620:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d622:	429a      	cmp	r2, r3
 800d624:	d213      	bcs.n	800d64e <xTaskCreate+0x12e>
			taskYIELD_IF_USING_PREEMPTION();
 800d626:	4b2c      	ldr	r3, [pc, #176]	; (800d6d8 <xTaskCreate+0x1b8>)
 800d628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d62c:	601a      	str	r2, [r3, #0]
 800d62e:	f3bf 8f4f 	dsb	sy
 800d632:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 800d636:	4628      	mov	r0, r5
 800d638:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d63c:	6832      	ldr	r2, [r6, #0]
 800d63e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d640:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d642:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800d6f4 <xTaskCreate+0x1d4>
 800d646:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 800d648:	bf98      	it	ls
 800d64a:	6034      	strls	r4, [r6, #0]
 800d64c:	e7cc      	b.n	800d5e8 <xTaskCreate+0xc8>
			xReturn = pdPASS;
 800d64e:	4628      	mov	r0, r5
	}
 800d650:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d654:	f04f 30ff 	mov.w	r0, #4294967295
 800d658:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pxCurrentTCB = pxNewTCB;
 800d65c:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d65e:	6813      	ldr	r3, [r2, #0]
 800d660:	2b01      	cmp	r3, #1
 800d662:	d00b      	beq.n	800d67c <xTaskCreate+0x15c>
 800d664:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d666:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800d6f4 <xTaskCreate+0x1d4>
 800d66a:	4f19      	ldr	r7, [pc, #100]	; (800d6d0 <xTaskCreate+0x1b0>)
 800d66c:	e7bc      	b.n	800d5e8 <xTaskCreate+0xc8>
					vPortFree( pxStack );
 800d66e:	4650      	mov	r0, sl
 800d670:	f7fe fe92 	bl	800c398 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d674:	f04f 30ff 	mov.w	r0, #4294967295
 800d678:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d67c:	f8df 8074 	ldr.w	r8, [pc, #116]	; 800d6f4 <xTaskCreate+0x1d4>
 800d680:	4645      	mov	r5, r8
 800d682:	f108 078c 	add.w	r7, r8, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d686:	4628      	mov	r0, r5
 800d688:	3514      	adds	r5, #20
 800d68a:	f7fe fbc5 	bl	800be18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d68e:	42af      	cmp	r7, r5
 800d690:	d1f9      	bne.n	800d686 <xTaskCreate+0x166>
	vListInitialise( &xDelayedTaskList1 );
 800d692:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800d6fc <xTaskCreate+0x1dc>
	vListInitialise( &xDelayedTaskList2 );
 800d696:	4d11      	ldr	r5, [pc, #68]	; (800d6dc <xTaskCreate+0x1bc>)
 800d698:	4f0d      	ldr	r7, [pc, #52]	; (800d6d0 <xTaskCreate+0x1b0>)
	vListInitialise( &xDelayedTaskList1 );
 800d69a:	4648      	mov	r0, r9
 800d69c:	f7fe fbbc 	bl	800be18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d6a0:	4628      	mov	r0, r5
 800d6a2:	f7fe fbb9 	bl	800be18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d6a6:	480e      	ldr	r0, [pc, #56]	; (800d6e0 <xTaskCreate+0x1c0>)
 800d6a8:	f7fe fbb6 	bl	800be18 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800d6ac:	480d      	ldr	r0, [pc, #52]	; (800d6e4 <xTaskCreate+0x1c4>)
 800d6ae:	f7fe fbb3 	bl	800be18 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800d6b2:	480d      	ldr	r0, [pc, #52]	; (800d6e8 <xTaskCreate+0x1c8>)
 800d6b4:	f7fe fbb0 	bl	800be18 <vListInitialise>
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d6b8:	4b0c      	ldr	r3, [pc, #48]	; (800d6ec <xTaskCreate+0x1cc>)
	pxDelayedTaskList = &xDelayedTaskList1;
 800d6ba:	4a0d      	ldr	r2, [pc, #52]	; (800d6f0 <xTaskCreate+0x1d0>)
 800d6bc:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d6c0:	601d      	str	r5, [r3, #0]
 800d6c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d6c4:	e790      	b.n	800d5e8 <xTaskCreate+0xc8>
 800d6c6:	bf00      	nop
 800d6c8:	20004fbc 	.word	0x20004fbc
 800d6cc:	20004f24 	.word	0x20004f24
 800d6d0:	2000501c 	.word	0x2000501c
 800d6d4:	20004fcc 	.word	0x20004fcc
 800d6d8:	e000ed04 	.word	0xe000ed04
 800d6dc:	20004fe8 	.word	0x20004fe8
 800d6e0:	20005008 	.word	0x20005008
 800d6e4:	20005034 	.word	0x20005034
 800d6e8:	20005020 	.word	0x20005020
 800d6ec:	20004f2c 	.word	0x20004f2c
 800d6f0:	20004f28 	.word	0x20004f28
 800d6f4:	20004f30 	.word	0x20004f30
 800d6f8:	20004fd0 	.word	0x20004fd0
 800d6fc:	20004fd4 	.word	0x20004fd4

0800d700 <vTaskStartScheduler>:
{
 800d700:	b530      	push	{r4, r5, lr}
 800d702:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 800d704:	4b18      	ldr	r3, [pc, #96]	; (800d768 <vTaskStartScheduler+0x68>)
 800d706:	9301      	str	r3, [sp, #4]
 800d708:	2400      	movs	r4, #0
 800d70a:	9400      	str	r4, [sp, #0]
 800d70c:	4623      	mov	r3, r4
 800d70e:	2280      	movs	r2, #128	; 0x80
 800d710:	4916      	ldr	r1, [pc, #88]	; (800d76c <vTaskStartScheduler+0x6c>)
 800d712:	4817      	ldr	r0, [pc, #92]	; (800d770 <vTaskStartScheduler+0x70>)
 800d714:	f7ff ff04 	bl	800d520 <xTaskCreate>
		if( xReturn == pdPASS )
 800d718:	2801      	cmp	r0, #1
 800d71a:	d00c      	beq.n	800d736 <vTaskStartScheduler+0x36>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d71c:	3001      	adds	r0, #1
 800d71e:	d001      	beq.n	800d724 <vTaskStartScheduler+0x24>
}
 800d720:	b003      	add	sp, #12
 800d722:	bd30      	pop	{r4, r5, pc}
 800d724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d728:	f383 8811 	msr	BASEPRI, r3
 800d72c:	f3bf 8f6f 	isb	sy
 800d730:	f3bf 8f4f 	dsb	sy
 800d734:	e7fe      	b.n	800d734 <vTaskStartScheduler+0x34>
			xReturn = xTimerCreateTimerTask();
 800d736:	f000 fc9b 	bl	800e070 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800d73a:	2801      	cmp	r0, #1
 800d73c:	d1ee      	bne.n	800d71c <vTaskStartScheduler+0x1c>
 800d73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d742:	f383 8811 	msr	BASEPRI, r3
 800d746:	f3bf 8f6f 	isb	sy
 800d74a:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800d74e:	4909      	ldr	r1, [pc, #36]	; (800d774 <vTaskStartScheduler+0x74>)
		xSchedulerRunning = pdTRUE;
 800d750:	4a09      	ldr	r2, [pc, #36]	; (800d778 <vTaskStartScheduler+0x78>)
		xTickCount = ( TickType_t ) 0U;
 800d752:	4b0a      	ldr	r3, [pc, #40]	; (800d77c <vTaskStartScheduler+0x7c>)
		xNextTaskUnblockTime = portMAX_DELAY;
 800d754:	f04f 35ff 	mov.w	r5, #4294967295
 800d758:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 800d75a:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) 0U;
 800d75c:	601c      	str	r4, [r3, #0]
}
 800d75e:	b003      	add	sp, #12
 800d760:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 800d764:	f7fe bcaa 	b.w	800c0bc <xPortStartScheduler>
 800d768:	20004ffc 	.word	0x20004ffc
 800d76c:	08017190 	.word	0x08017190
 800d770:	0800d425 	.word	0x0800d425
 800d774:	20005000 	.word	0x20005000
 800d778:	2000501c 	.word	0x2000501c
 800d77c:	20005048 	.word	0x20005048

0800d780 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800d780:	4a02      	ldr	r2, [pc, #8]	; (800d78c <vTaskSuspendAll+0xc>)
 800d782:	6813      	ldr	r3, [r2, #0]
 800d784:	3301      	adds	r3, #1
 800d786:	6013      	str	r3, [r2, #0]
 800d788:	4770      	bx	lr
 800d78a:	bf00      	nop
 800d78c:	20004fc8 	.word	0x20004fc8

0800d790 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800d790:	4b01      	ldr	r3, [pc, #4]	; (800d798 <xTaskGetTickCount+0x8>)
 800d792:	6818      	ldr	r0, [r3, #0]
}
 800d794:	4770      	bx	lr
 800d796:	bf00      	nop
 800d798:	20005048 	.word	0x20005048

0800d79c <xTaskIncrementTick>:
{
 800d79c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7a0:	4b4a      	ldr	r3, [pc, #296]	; (800d8cc <xTaskIncrementTick+0x130>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d153      	bne.n	800d850 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d7a8:	4b49      	ldr	r3, [pc, #292]	; (800d8d0 <xTaskIncrementTick+0x134>)
 800d7aa:	681e      	ldr	r6, [r3, #0]
 800d7ac:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 800d7ae:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d7b0:	2e00      	cmp	r6, #0
 800d7b2:	d05a      	beq.n	800d86a <xTaskIncrementTick+0xce>
 800d7b4:	f8df b138 	ldr.w	fp, [pc, #312]	; 800d8f0 <xTaskIncrementTick+0x154>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d7b8:	f8db 2000 	ldr.w	r2, [fp]
 800d7bc:	4296      	cmp	r6, r2
 800d7be:	d361      	bcc.n	800d884 <xTaskIncrementTick+0xe8>
 800d7c0:	4d44      	ldr	r5, [pc, #272]	; (800d8d4 <xTaskIncrementTick+0x138>)
 800d7c2:	4f45      	ldr	r7, [pc, #276]	; (800d8d8 <xTaskIncrementTick+0x13c>)
 800d7c4:	f8df 812c 	ldr.w	r8, [pc, #300]	; 800d8f4 <xTaskIncrementTick+0x158>
 800d7c8:	2400      	movs	r4, #0
 800d7ca:	e02e      	b.n	800d82a <xTaskIncrementTick+0x8e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d7cc:	682a      	ldr	r2, [r5, #0]
 800d7ce:	68d2      	ldr	r2, [r2, #12]
 800d7d0:	f8d2 900c 	ldr.w	r9, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d7d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d7d8:	f109 0a04 	add.w	sl, r9, #4
					if( xConstTickCount < xItemValue )
 800d7dc:	428e      	cmp	r6, r1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d7de:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 800d7e0:	d36a      	bcc.n	800d8b8 <xTaskIncrementTick+0x11c>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d7e2:	f7fe fb53 	bl	800be8c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d7e6:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d7ea:	f109 0018 	add.w	r0, r9, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d7ee:	b109      	cbz	r1, 800d7f4 <xTaskIncrementTick+0x58>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d7f0:	f7fe fb4c 	bl	800be8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d7f4:	4b39      	ldr	r3, [pc, #228]	; (800d8dc <xTaskIncrementTick+0x140>)
 800d7f6:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	2201      	movs	r2, #1
 800d7fe:	fa02 fe00 	lsl.w	lr, r2, r0
 800d802:	ea4e 0e03 	orr.w	lr, lr, r3
 800d806:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d80a:	4b34      	ldr	r3, [pc, #208]	; (800d8dc <xTaskIncrementTick+0x140>)
 800d80c:	4651      	mov	r1, sl
 800d80e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800d812:	f8c3 e000 	str.w	lr, [r3]
 800d816:	f7fe fb0f 	bl	800be38 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d81a:	f8d8 0000 	ldr.w	r0, [r8]
 800d81e:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 800d822:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800d824:	4291      	cmp	r1, r2
 800d826:	bf28      	it	cs
 800d828:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d82a:	682a      	ldr	r2, [r5, #0]
 800d82c:	6812      	ldr	r2, [r2, #0]
 800d82e:	2a00      	cmp	r2, #0
 800d830:	d1cc      	bne.n	800d7cc <xTaskIncrementTick+0x30>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d832:	f04f 32ff 	mov.w	r2, #4294967295
 800d836:	f8cb 2000 	str.w	r2, [fp]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d83a:	f8d8 3000 	ldr.w	r3, [r8]
 800d83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d840:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d844:	009b      	lsls	r3, r3, #2
 800d846:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 800d848:	2b02      	cmp	r3, #2
 800d84a:	bf28      	it	cs
 800d84c:	2401      	movcs	r4, #1
 800d84e:	e004      	b.n	800d85a <xTaskIncrementTick+0xbe>
		++uxPendedTicks;
 800d850:	4a23      	ldr	r2, [pc, #140]	; (800d8e0 <xTaskIncrementTick+0x144>)
 800d852:	6813      	ldr	r3, [r2, #0]
 800d854:	3301      	adds	r3, #1
 800d856:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800d858:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800d85a:	4b22      	ldr	r3, [pc, #136]	; (800d8e4 <xTaskIncrementTick+0x148>)
 800d85c:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 800d85e:	2b00      	cmp	r3, #0
 800d860:	bf18      	it	ne
 800d862:	2401      	movne	r4, #1
}
 800d864:	4620      	mov	r0, r4
 800d866:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 800d86a:	4d1a      	ldr	r5, [pc, #104]	; (800d8d4 <xTaskIncrementTick+0x138>)
 800d86c:	682b      	ldr	r3, [r5, #0]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	b16b      	cbz	r3, 800d88e <xTaskIncrementTick+0xf2>
 800d872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d876:	f383 8811 	msr	BASEPRI, r3
 800d87a:	f3bf 8f6f 	isb	sy
 800d87e:	f3bf 8f4f 	dsb	sy
 800d882:	e7fe      	b.n	800d882 <xTaskIncrementTick+0xe6>
 800d884:	4f14      	ldr	r7, [pc, #80]	; (800d8d8 <xTaskIncrementTick+0x13c>)
 800d886:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800d8f4 <xTaskIncrementTick+0x158>
BaseType_t xSwitchRequired = pdFALSE;
 800d88a:	2400      	movs	r4, #0
 800d88c:	e7d5      	b.n	800d83a <xTaskIncrementTick+0x9e>
			taskSWITCH_DELAYED_LISTS();
 800d88e:	4b16      	ldr	r3, [pc, #88]	; (800d8e8 <xTaskIncrementTick+0x14c>)
 800d890:	6829      	ldr	r1, [r5, #0]
 800d892:	4a16      	ldr	r2, [pc, #88]	; (800d8ec <xTaskIncrementTick+0x150>)
 800d894:	6818      	ldr	r0, [r3, #0]
 800d896:	6028      	str	r0, [r5, #0]
 800d898:	6019      	str	r1, [r3, #0]
 800d89a:	6813      	ldr	r3, [r2, #0]
 800d89c:	3301      	adds	r3, #1
 800d89e:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d8a0:	682b      	ldr	r3, [r5, #0]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	b15b      	cbz	r3, 800d8be <xTaskIncrementTick+0x122>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d8a6:	682a      	ldr	r2, [r5, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d8a8:	f8df b044 	ldr.w	fp, [pc, #68]	; 800d8f0 <xTaskIncrementTick+0x154>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d8ac:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d8ae:	68d2      	ldr	r2, [r2, #12]
 800d8b0:	6852      	ldr	r2, [r2, #4]
 800d8b2:	f8cb 2000 	str.w	r2, [fp]
 800d8b6:	e77f      	b.n	800d7b8 <xTaskIncrementTick+0x1c>
						xNextTaskUnblockTime = xItemValue;
 800d8b8:	f8cb 1000 	str.w	r1, [fp]
						break;
 800d8bc:	e7bd      	b.n	800d83a <xTaskIncrementTick+0x9e>
		xNextTaskUnblockTime = portMAX_DELAY;
 800d8be:	f8df b030 	ldr.w	fp, [pc, #48]	; 800d8f0 <xTaskIncrementTick+0x154>
 800d8c2:	f04f 32ff 	mov.w	r2, #4294967295
 800d8c6:	f8cb 2000 	str.w	r2, [fp]
 800d8ca:	e775      	b.n	800d7b8 <xTaskIncrementTick+0x1c>
 800d8cc:	20004fc8 	.word	0x20004fc8
 800d8d0:	20005048 	.word	0x20005048
 800d8d4:	20004f28 	.word	0x20004f28
 800d8d8:	20004f30 	.word	0x20004f30
 800d8dc:	20004fd0 	.word	0x20004fd0
 800d8e0:	20004fc4 	.word	0x20004fc4
 800d8e4:	2000504c 	.word	0x2000504c
 800d8e8:	20004f2c 	.word	0x20004f2c
 800d8ec:	20005004 	.word	0x20005004
 800d8f0:	20005000 	.word	0x20005000
 800d8f4:	20004f24 	.word	0x20004f24

0800d8f8 <xTaskResumeAll>:
{
 800d8f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 800d8fc:	4c39      	ldr	r4, [pc, #228]	; (800d9e4 <xTaskResumeAll+0xec>)
 800d8fe:	6823      	ldr	r3, [r4, #0]
 800d900:	b943      	cbnz	r3, 800d914 <xTaskResumeAll+0x1c>
 800d902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d906:	f383 8811 	msr	BASEPRI, r3
 800d90a:	f3bf 8f6f 	isb	sy
 800d90e:	f3bf 8f4f 	dsb	sy
 800d912:	e7fe      	b.n	800d912 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800d914:	f7fe fb36 	bl	800bf84 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800d918:	6823      	ldr	r3, [r4, #0]
 800d91a:	3b01      	subs	r3, #1
 800d91c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d91e:	6824      	ldr	r4, [r4, #0]
 800d920:	2c00      	cmp	r4, #0
 800d922:	d151      	bne.n	800d9c8 <xTaskResumeAll+0xd0>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d924:	4b30      	ldr	r3, [pc, #192]	; (800d9e8 <xTaskResumeAll+0xf0>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d04d      	beq.n	800d9c8 <xTaskResumeAll+0xd0>
 800d92c:	4d2f      	ldr	r5, [pc, #188]	; (800d9ec <xTaskResumeAll+0xf4>)
 800d92e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800da04 <xTaskResumeAll+0x10c>
					prvAddTaskToReadyList( pxTCB );
 800d932:	4e2f      	ldr	r6, [pc, #188]	; (800d9f0 <xTaskResumeAll+0xf8>)
 800d934:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 800da08 <xTaskResumeAll+0x110>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d938:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 800da0c <xTaskResumeAll+0x114>
 800d93c:	e01f      	b.n	800d97e <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800d93e:	f8da 300c 	ldr.w	r3, [sl, #12]
 800d942:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d944:	f104 0804 	add.w	r8, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d948:	f104 0018 	add.w	r0, r4, #24
 800d94c:	f7fe fa9e 	bl	800be8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d950:	4640      	mov	r0, r8
 800d952:	f7fe fa9b 	bl	800be8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d956:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d958:	6832      	ldr	r2, [r6, #0]
 800d95a:	fa07 f300 	lsl.w	r3, r7, r0
 800d95e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d962:	4313      	orrs	r3, r2
 800d964:	4641      	mov	r1, r8
 800d966:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800d96a:	6033      	str	r3, [r6, #0]
 800d96c:	f7fe fa64 	bl	800be38 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d970:	f8db 3000 	ldr.w	r3, [fp]
 800d974:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d978:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 800d97a:	bf28      	it	cs
 800d97c:	602f      	strcs	r7, [r5, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d97e:	f8da 3000 	ldr.w	r3, [sl]
					prvAddTaskToReadyList( pxTCB );
 800d982:	2701      	movs	r7, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d984:	2b00      	cmp	r3, #0
 800d986:	d1da      	bne.n	800d93e <xTaskResumeAll+0x46>
				if( pxTCB != NULL )
 800d988:	b13c      	cbz	r4, 800d99a <xTaskResumeAll+0xa2>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d98a:	4b1a      	ldr	r3, [pc, #104]	; (800d9f4 <xTaskResumeAll+0xfc>)
 800d98c:	681a      	ldr	r2, [r3, #0]
 800d98e:	6812      	ldr	r2, [r2, #0]
 800d990:	bb02      	cbnz	r2, 800d9d4 <xTaskResumeAll+0xdc>
		xNextTaskUnblockTime = portMAX_DELAY;
 800d992:	4b19      	ldr	r3, [pc, #100]	; (800d9f8 <xTaskResumeAll+0x100>)
 800d994:	f04f 32ff 	mov.w	r2, #4294967295
 800d998:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d99a:	4e18      	ldr	r6, [pc, #96]	; (800d9fc <xTaskResumeAll+0x104>)
 800d99c:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d99e:	b13c      	cbz	r4, 800d9b0 <xTaskResumeAll+0xb8>
								xYieldPending = pdTRUE;
 800d9a0:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800d9a2:	f7ff fefb 	bl	800d79c <xTaskIncrementTick>
 800d9a6:	b100      	cbz	r0, 800d9aa <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 800d9a8:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d9aa:	3c01      	subs	r4, #1
 800d9ac:	d1f9      	bne.n	800d9a2 <xTaskResumeAll+0xaa>
						uxPendedTicks = 0;
 800d9ae:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 800d9b0:	682b      	ldr	r3, [r5, #0]
 800d9b2:	b14b      	cbz	r3, 800d9c8 <xTaskResumeAll+0xd0>
					taskYIELD_IF_USING_PREEMPTION();
 800d9b4:	4b12      	ldr	r3, [pc, #72]	; (800da00 <xTaskResumeAll+0x108>)
 800d9b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9ba:	601a      	str	r2, [r3, #0]
 800d9bc:	f3bf 8f4f 	dsb	sy
 800d9c0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800d9c4:	2401      	movs	r4, #1
 800d9c6:	e000      	b.n	800d9ca <xTaskResumeAll+0xd2>
BaseType_t xAlreadyYielded = pdFALSE;
 800d9c8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800d9ca:	f7fe fafd 	bl	800bfc8 <vPortExitCritical>
}
 800d9ce:	4620      	mov	r0, r4
 800d9d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d9d4:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d9d6:	4b08      	ldr	r3, [pc, #32]	; (800d9f8 <xTaskResumeAll+0x100>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d9d8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d9da:	68d2      	ldr	r2, [r2, #12]
 800d9dc:	6852      	ldr	r2, [r2, #4]
 800d9de:	601a      	str	r2, [r3, #0]
 800d9e0:	e7db      	b.n	800d99a <xTaskResumeAll+0xa2>
 800d9e2:	bf00      	nop
 800d9e4:	20004fc8 	.word	0x20004fc8
 800d9e8:	20004fbc 	.word	0x20004fbc
 800d9ec:	2000504c 	.word	0x2000504c
 800d9f0:	20004fd0 	.word	0x20004fd0
 800d9f4:	20004f28 	.word	0x20004f28
 800d9f8:	20005000 	.word	0x20005000
 800d9fc:	20004fc4 	.word	0x20004fc4
 800da00:	e000ed04 	.word	0xe000ed04
 800da04:	20005008 	.word	0x20005008
 800da08:	20004f30 	.word	0x20004f30
 800da0c:	20004f24 	.word	0x20004f24

0800da10 <vTaskDelay>:
	{
 800da10:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800da12:	b158      	cbz	r0, 800da2c <vTaskDelay+0x1c>
			configASSERT( uxSchedulerSuspended == 0 );
 800da14:	4b0f      	ldr	r3, [pc, #60]	; (800da54 <vTaskDelay+0x44>)
 800da16:	6819      	ldr	r1, [r3, #0]
 800da18:	b189      	cbz	r1, 800da3e <vTaskDelay+0x2e>
 800da1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da1e:	f383 8811 	msr	BASEPRI, r3
 800da22:	f3bf 8f6f 	isb	sy
 800da26:	f3bf 8f4f 	dsb	sy
 800da2a:	e7fe      	b.n	800da2a <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800da2c:	4b0a      	ldr	r3, [pc, #40]	; (800da58 <vTaskDelay+0x48>)
 800da2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da32:	601a      	str	r2, [r3, #0]
 800da34:	f3bf 8f4f 	dsb	sy
 800da38:	f3bf 8f6f 	isb	sy
 800da3c:	bd08      	pop	{r3, pc}
	++uxSchedulerSuspended;
 800da3e:	681a      	ldr	r2, [r3, #0]
 800da40:	3201      	adds	r2, #1
 800da42:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800da44:	f7ff fd26 	bl	800d494 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800da48:	f7ff ff56 	bl	800d8f8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800da4c:	2800      	cmp	r0, #0
 800da4e:	d0ed      	beq.n	800da2c <vTaskDelay+0x1c>
 800da50:	bd08      	pop	{r3, pc}
 800da52:	bf00      	nop
 800da54:	20004fc8 	.word	0x20004fc8
 800da58:	e000ed04 	.word	0xe000ed04

0800da5c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800da5c:	4b16      	ldr	r3, [pc, #88]	; (800dab8 <vTaskSwitchContext+0x5c>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	bb33      	cbnz	r3, 800dab0 <vTaskSwitchContext+0x54>
		xYieldPending = pdFALSE;
 800da62:	4916      	ldr	r1, [pc, #88]	; (800dabc <vTaskSwitchContext+0x60>)
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800da64:	4a16      	ldr	r2, [pc, #88]	; (800dac0 <vTaskSwitchContext+0x64>)
		xYieldPending = pdFALSE;
 800da66:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800da68:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800da6a:	fab3 f383 	clz	r3, r3
 800da6e:	b2db      	uxtb	r3, r3
 800da70:	f1c3 031f 	rsb	r3, r3, #31
 800da74:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800da78:	009b      	lsls	r3, r3, #2
 800da7a:	4912      	ldr	r1, [pc, #72]	; (800dac4 <vTaskSwitchContext+0x68>)
 800da7c:	58ca      	ldr	r2, [r1, r3]
 800da7e:	18c8      	adds	r0, r1, r3
 800da80:	b942      	cbnz	r2, 800da94 <vTaskSwitchContext+0x38>
	__asm volatile
 800da82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da86:	f383 8811 	msr	BASEPRI, r3
 800da8a:	f3bf 8f6f 	isb	sy
 800da8e:	f3bf 8f4f 	dsb	sy
 800da92:	e7fe      	b.n	800da92 <vTaskSwitchContext+0x36>
 800da94:	6842      	ldr	r2, [r0, #4]
 800da96:	3308      	adds	r3, #8
 800da98:	6852      	ldr	r2, [r2, #4]
 800da9a:	6042      	str	r2, [r0, #4]
 800da9c:	440b      	add	r3, r1
 800da9e:	429a      	cmp	r2, r3
 800daa0:	bf08      	it	eq
 800daa2:	6852      	ldreq	r2, [r2, #4]
 800daa4:	4b08      	ldr	r3, [pc, #32]	; (800dac8 <vTaskSwitchContext+0x6c>)
 800daa6:	bf08      	it	eq
 800daa8:	6042      	streq	r2, [r0, #4]
 800daaa:	68d2      	ldr	r2, [r2, #12]
 800daac:	601a      	str	r2, [r3, #0]
 800daae:	4770      	bx	lr
		xYieldPending = pdTRUE;
 800dab0:	4b02      	ldr	r3, [pc, #8]	; (800dabc <vTaskSwitchContext+0x60>)
 800dab2:	2201      	movs	r2, #1
 800dab4:	601a      	str	r2, [r3, #0]
 800dab6:	4770      	bx	lr
 800dab8:	20004fc8 	.word	0x20004fc8
 800dabc:	2000504c 	.word	0x2000504c
 800dac0:	20004fd0 	.word	0x20004fd0
 800dac4:	20004f30 	.word	0x20004f30
 800dac8:	20004f24 	.word	0x20004f24

0800dacc <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800dacc:	b348      	cbz	r0, 800db22 <vTaskPlaceOnEventList+0x56>
{
 800dace:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dad0:	4d20      	ldr	r5, [pc, #128]	; (800db54 <vTaskPlaceOnEventList+0x88>)
 800dad2:	460c      	mov	r4, r1
 800dad4:	6829      	ldr	r1, [r5, #0]
 800dad6:	3118      	adds	r1, #24
 800dad8:	f7fe f9be 	bl	800be58 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 800dadc:	4b1e      	ldr	r3, [pc, #120]	; (800db58 <vTaskPlaceOnEventList+0x8c>)
 800dade:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dae0:	6828      	ldr	r0, [r5, #0]
 800dae2:	3004      	adds	r0, #4
 800dae4:	f7fe f9d2 	bl	800be8c <uxListRemove>
 800dae8:	b940      	cbnz	r0, 800dafc <vTaskPlaceOnEventList+0x30>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800daea:	682b      	ldr	r3, [r5, #0]
 800daec:	491b      	ldr	r1, [pc, #108]	; (800db5c <vTaskPlaceOnEventList+0x90>)
 800daee:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800daf0:	680b      	ldr	r3, [r1, #0]
 800daf2:	2201      	movs	r2, #1
 800daf4:	4082      	lsls	r2, r0
 800daf6:	ea23 0302 	bic.w	r3, r3, r2
 800dafa:	600b      	str	r3, [r1, #0]
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dafc:	1c63      	adds	r3, r4, #1
 800dafe:	d019      	beq.n	800db34 <vTaskPlaceOnEventList+0x68>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800db00:	4434      	add	r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800db02:	682b      	ldr	r3, [r5, #0]
			if( xTimeToWake < xConstTickCount )
 800db04:	42a6      	cmp	r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800db06:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800db08:	d81b      	bhi.n	800db42 <vTaskPlaceOnEventList+0x76>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db0a:	4b15      	ldr	r3, [pc, #84]	; (800db60 <vTaskPlaceOnEventList+0x94>)
 800db0c:	6818      	ldr	r0, [r3, #0]
 800db0e:	6829      	ldr	r1, [r5, #0]
 800db10:	3104      	adds	r1, #4
 800db12:	f7fe f9a1 	bl	800be58 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800db16:	4b13      	ldr	r3, [pc, #76]	; (800db64 <vTaskPlaceOnEventList+0x98>)
 800db18:	681a      	ldr	r2, [r3, #0]
 800db1a:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800db1c:	bf38      	it	cc
 800db1e:	601c      	strcc	r4, [r3, #0]
 800db20:	bd70      	pop	{r4, r5, r6, pc}
 800db22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db26:	f383 8811 	msr	BASEPRI, r3
 800db2a:	f3bf 8f6f 	isb	sy
 800db2e:	f3bf 8f4f 	dsb	sy
 800db32:	e7fe      	b.n	800db32 <vTaskPlaceOnEventList+0x66>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db34:	6829      	ldr	r1, [r5, #0]
 800db36:	480c      	ldr	r0, [pc, #48]	; (800db68 <vTaskPlaceOnEventList+0x9c>)
 800db38:	3104      	adds	r1, #4
}
 800db3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db3e:	f7fe b97b 	b.w	800be38 <vListInsertEnd>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db42:	4b0a      	ldr	r3, [pc, #40]	; (800db6c <vTaskPlaceOnEventList+0xa0>)
 800db44:	6818      	ldr	r0, [r3, #0]
 800db46:	6829      	ldr	r1, [r5, #0]
}
 800db48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db4c:	3104      	adds	r1, #4
 800db4e:	f7fe b983 	b.w	800be58 <vListInsert>
 800db52:	bf00      	nop
 800db54:	20004f24 	.word	0x20004f24
 800db58:	20005048 	.word	0x20005048
 800db5c:	20004fd0 	.word	0x20004fd0
 800db60:	20004f28 	.word	0x20004f28
 800db64:	20005000 	.word	0x20005000
 800db68:	20005020 	.word	0x20005020
 800db6c:	20004f2c 	.word	0x20004f2c

0800db70 <vTaskPlaceOnEventListRestricted>:
	{
 800db70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxEventList );
 800db72:	2800      	cmp	r0, #0
 800db74:	d02e      	beq.n	800dbd4 <vTaskPlaceOnEventListRestricted+0x64>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800db76:	4c27      	ldr	r4, [pc, #156]	; (800dc14 <vTaskPlaceOnEventListRestricted+0xa4>)
 800db78:	460d      	mov	r5, r1
 800db7a:	6821      	ldr	r1, [r4, #0]
 800db7c:	3118      	adds	r1, #24
 800db7e:	4617      	mov	r7, r2
 800db80:	f7fe f95a 	bl	800be38 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 800db84:	4b24      	ldr	r3, [pc, #144]	; (800dc18 <vTaskPlaceOnEventListRestricted+0xa8>)
 800db86:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db88:	6820      	ldr	r0, [r4, #0]
 800db8a:	3004      	adds	r0, #4
		if( xWaitIndefinitely != pdFALSE )
 800db8c:	2f00      	cmp	r7, #0
 800db8e:	d03b      	beq.n	800dc08 <vTaskPlaceOnEventListRestricted+0x98>
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db90:	f7fe f97c 	bl	800be8c <uxListRemove>
 800db94:	2800      	cmp	r0, #0
 800db96:	d130      	bne.n	800dbfa <vTaskPlaceOnEventListRestricted+0x8a>
			xTicksToWait = portMAX_DELAY;
 800db98:	f04f 35ff 	mov.w	r5, #4294967295
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800db9c:	6823      	ldr	r3, [r4, #0]
 800db9e:	491f      	ldr	r1, [pc, #124]	; (800dc1c <vTaskPlaceOnEventListRestricted+0xac>)
 800dba0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800dba2:	680b      	ldr	r3, [r1, #0]
 800dba4:	2201      	movs	r2, #1
 800dba6:	4082      	lsls	r2, r0
 800dba8:	ea23 0302 	bic.w	r3, r3, r2
 800dbac:	600b      	str	r3, [r1, #0]
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dbae:	1c6b      	adds	r3, r5, #1
 800dbb0:	d021      	beq.n	800dbf6 <vTaskPlaceOnEventListRestricted+0x86>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dbb2:	4435      	add	r5, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dbb4:	6823      	ldr	r3, [r4, #0]
			if( xTimeToWake < xConstTickCount )
 800dbb6:	42b5      	cmp	r5, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dbb8:	605d      	str	r5, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dbba:	d314      	bcc.n	800dbe6 <vTaskPlaceOnEventListRestricted+0x76>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbbc:	4b18      	ldr	r3, [pc, #96]	; (800dc20 <vTaskPlaceOnEventListRestricted+0xb0>)
 800dbbe:	6818      	ldr	r0, [r3, #0]
 800dbc0:	6821      	ldr	r1, [r4, #0]
 800dbc2:	3104      	adds	r1, #4
 800dbc4:	f7fe f948 	bl	800be58 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dbc8:	4b16      	ldr	r3, [pc, #88]	; (800dc24 <vTaskPlaceOnEventListRestricted+0xb4>)
 800dbca:	681a      	ldr	r2, [r3, #0]
 800dbcc:	4295      	cmp	r5, r2
 800dbce:	d220      	bcs.n	800dc12 <vTaskPlaceOnEventListRestricted+0xa2>
					xNextTaskUnblockTime = xTimeToWake;
 800dbd0:	601d      	str	r5, [r3, #0]
	}
 800dbd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd8:	f383 8811 	msr	BASEPRI, r3
 800dbdc:	f3bf 8f6f 	isb	sy
 800dbe0:	f3bf 8f4f 	dsb	sy
 800dbe4:	e7fe      	b.n	800dbe4 <vTaskPlaceOnEventListRestricted+0x74>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbe6:	4b10      	ldr	r3, [pc, #64]	; (800dc28 <vTaskPlaceOnEventListRestricted+0xb8>)
 800dbe8:	6818      	ldr	r0, [r3, #0]
 800dbea:	6821      	ldr	r1, [r4, #0]
	}
 800dbec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbf0:	3104      	adds	r1, #4
 800dbf2:	f7fe b931 	b.w	800be58 <vListInsert>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dbf6:	2f00      	cmp	r7, #0
 800dbf8:	d0db      	beq.n	800dbb2 <vTaskPlaceOnEventListRestricted+0x42>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbfa:	6821      	ldr	r1, [r4, #0]
 800dbfc:	480b      	ldr	r0, [pc, #44]	; (800dc2c <vTaskPlaceOnEventListRestricted+0xbc>)
 800dbfe:	3104      	adds	r1, #4
	}
 800dc00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc04:	f7fe b918 	b.w	800be38 <vListInsertEnd>
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc08:	f7fe f940 	bl	800be8c <uxListRemove>
 800dc0c:	2800      	cmp	r0, #0
 800dc0e:	d1ce      	bne.n	800dbae <vTaskPlaceOnEventListRestricted+0x3e>
 800dc10:	e7c4      	b.n	800db9c <vTaskPlaceOnEventListRestricted+0x2c>
 800dc12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc14:	20004f24 	.word	0x20004f24
 800dc18:	20005048 	.word	0x20005048
 800dc1c:	20004fd0 	.word	0x20004fd0
 800dc20:	20004f28 	.word	0x20004f28
 800dc24:	20005000 	.word	0x20005000
 800dc28:	20004f2c 	.word	0x20004f2c
 800dc2c:	20005020 	.word	0x20005020

0800dc30 <xTaskRemoveFromEventList>:
{
 800dc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800dc32:	68c3      	ldr	r3, [r0, #12]
 800dc34:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800dc36:	b32c      	cbz	r4, 800dc84 <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dc38:	f104 0518 	add.w	r5, r4, #24
 800dc3c:	4628      	mov	r0, r5
 800dc3e:	f7fe f925 	bl	800be8c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc42:	4b17      	ldr	r3, [pc, #92]	; (800dca0 <xTaskRemoveFromEventList+0x70>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	bb33      	cbnz	r3, 800dc96 <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dc48:	1d26      	adds	r6, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dc4a:	4d16      	ldr	r5, [pc, #88]	; (800dca4 <xTaskRemoveFromEventList+0x74>)
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dc4c:	4630      	mov	r0, r6
 800dc4e:	f7fe f91d 	bl	800be8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dc52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800dc54:	682f      	ldr	r7, [r5, #0]
 800dc56:	4814      	ldr	r0, [pc, #80]	; (800dca8 <xTaskRemoveFromEventList+0x78>)
 800dc58:	2301      	movs	r3, #1
 800dc5a:	4093      	lsls	r3, r2
 800dc5c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800dc60:	433b      	orrs	r3, r7
 800dc62:	4631      	mov	r1, r6
 800dc64:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800dc68:	602b      	str	r3, [r5, #0]
 800dc6a:	f7fe f8e5 	bl	800be38 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dc6e:	4b0f      	ldr	r3, [pc, #60]	; (800dcac <xTaskRemoveFromEventList+0x7c>)
 800dc70:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc76:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800dc78:	bf83      	ittte	hi
 800dc7a:	4b0d      	ldrhi	r3, [pc, #52]	; (800dcb0 <xTaskRemoveFromEventList+0x80>)
 800dc7c:	2001      	movhi	r0, #1
 800dc7e:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 800dc80:	2000      	movls	r0, #0
}
 800dc82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc88:	f383 8811 	msr	BASEPRI, r3
 800dc8c:	f3bf 8f6f 	isb	sy
 800dc90:	f3bf 8f4f 	dsb	sy
 800dc94:	e7fe      	b.n	800dc94 <xTaskRemoveFromEventList+0x64>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dc96:	4629      	mov	r1, r5
 800dc98:	4806      	ldr	r0, [pc, #24]	; (800dcb4 <xTaskRemoveFromEventList+0x84>)
 800dc9a:	f7fe f8cd 	bl	800be38 <vListInsertEnd>
 800dc9e:	e7e6      	b.n	800dc6e <xTaskRemoveFromEventList+0x3e>
 800dca0:	20004fc8 	.word	0x20004fc8
 800dca4:	20004fd0 	.word	0x20004fd0
 800dca8:	20004f30 	.word	0x20004f30
 800dcac:	20004f24 	.word	0x20004f24
 800dcb0:	2000504c 	.word	0x2000504c
 800dcb4:	20005008 	.word	0x20005008

0800dcb8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dcb8:	4a03      	ldr	r2, [pc, #12]	; (800dcc8 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dcba:	4b04      	ldr	r3, [pc, #16]	; (800dccc <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dcbc:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	e880 000c 	stmia.w	r0, {r2, r3}
 800dcc4:	4770      	bx	lr
 800dcc6:	bf00      	nop
 800dcc8:	20005004 	.word	0x20005004
 800dccc:	20005048 	.word	0x20005048

0800dcd0 <xTaskCheckForTimeOut>:
{
 800dcd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800dcd2:	b358      	cbz	r0, 800dd2c <xTaskCheckForTimeOut+0x5c>
	configASSERT( pxTicksToWait );
 800dcd4:	b309      	cbz	r1, 800dd1a <xTaskCheckForTimeOut+0x4a>
 800dcd6:	460d      	mov	r5, r1
 800dcd8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800dcda:	f7fe f953 	bl	800bf84 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 800dcde:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 800dce0:	f8df e080 	ldr.w	lr, [pc, #128]	; 800dd64 <xTaskCheckForTimeOut+0x94>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dce4:	6866      	ldr	r6, [r4, #4]
		const TickType_t xConstTickCount = xTickCount;
 800dce6:	f8de 2000 	ldr.w	r2, [lr]
			if( *pxTicksToWait == portMAX_DELAY )
 800dcea:	1c59      	adds	r1, r3, #1
 800dcec:	d033      	beq.n	800dd56 <xTaskCheckForTimeOut+0x86>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dcee:	481c      	ldr	r0, [pc, #112]	; (800dd60 <xTaskCheckForTimeOut+0x90>)
 800dcf0:	6821      	ldr	r1, [r4, #0]
 800dcf2:	6807      	ldr	r7, [r0, #0]
 800dcf4:	42b9      	cmp	r1, r7
 800dcf6:	d006      	beq.n	800dd06 <xTaskCheckForTimeOut+0x36>
 800dcf8:	42b2      	cmp	r2, r6
 800dcfa:	d304      	bcc.n	800dd06 <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
 800dcfc:	2501      	movs	r5, #1
	taskEXIT_CRITICAL();
 800dcfe:	f7fe f963 	bl	800bfc8 <vPortExitCritical>
}
 800dd02:	4628      	mov	r0, r5
 800dd04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dd06:	1b92      	subs	r2, r2, r6
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dd08:	429a      	cmp	r2, r3
 800dd0a:	d318      	bcc.n	800dd3e <xTaskCheckForTimeOut+0x6e>
			*pxTicksToWait = 0;
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 800dd10:	2501      	movs	r5, #1
	taskEXIT_CRITICAL();
 800dd12:	f7fe f959 	bl	800bfc8 <vPortExitCritical>
}
 800dd16:	4628      	mov	r0, r5
 800dd18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd1e:	f383 8811 	msr	BASEPRI, r3
 800dd22:	f3bf 8f6f 	isb	sy
 800dd26:	f3bf 8f4f 	dsb	sy
 800dd2a:	e7fe      	b.n	800dd2a <xTaskCheckForTimeOut+0x5a>
 800dd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd30:	f383 8811 	msr	BASEPRI, r3
 800dd34:	f3bf 8f6f 	isb	sy
 800dd38:	f3bf 8f4f 	dsb	sy
 800dd3c:	e7fe      	b.n	800dd3c <xTaskCheckForTimeOut+0x6c>
			*pxTicksToWait -= xElapsedTime;
 800dd3e:	1a9b      	subs	r3, r3, r2
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dd40:	6800      	ldr	r0, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dd42:	f8de 2000 	ldr.w	r2, [lr]
			*pxTicksToWait -= xElapsedTime;
 800dd46:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dd48:	e884 0005 	stmia.w	r4, {r0, r2}
			xReturn = pdFALSE;
 800dd4c:	2500      	movs	r5, #0
	taskEXIT_CRITICAL();
 800dd4e:	f7fe f93b 	bl	800bfc8 <vPortExitCritical>
}
 800dd52:	4628      	mov	r0, r5
 800dd54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 800dd56:	2500      	movs	r5, #0
	taskEXIT_CRITICAL();
 800dd58:	f7fe f936 	bl	800bfc8 <vPortExitCritical>
}
 800dd5c:	4628      	mov	r0, r5
 800dd5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd60:	20005004 	.word	0x20005004
 800dd64:	20005048 	.word	0x20005048

0800dd68 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800dd68:	4b01      	ldr	r3, [pc, #4]	; (800dd70 <vTaskMissedYield+0x8>)
 800dd6a:	2201      	movs	r2, #1
 800dd6c:	601a      	str	r2, [r3, #0]
 800dd6e:	4770      	bx	lr
 800dd70:	2000504c 	.word	0x2000504c

0800dd74 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800dd74:	4b05      	ldr	r3, [pc, #20]	; (800dd8c <xTaskGetSchedulerState+0x18>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	b133      	cbz	r3, 800dd88 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd7a:	4b05      	ldr	r3, [pc, #20]	; (800dd90 <xTaskGetSchedulerState+0x1c>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800dd80:	bf0c      	ite	eq
 800dd82:	2002      	moveq	r0, #2
 800dd84:	2000      	movne	r0, #0
 800dd86:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dd88:	2001      	movs	r0, #1
	}
 800dd8a:	4770      	bx	lr
 800dd8c:	2000501c 	.word	0x2000501c
 800dd90:	20004fc8 	.word	0x20004fc8

0800dd94 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800dd94:	2800      	cmp	r0, #0
 800dd96:	d04b      	beq.n	800de30 <xTaskPriorityInherit+0x9c>
	{
 800dd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dd9a:	4c27      	ldr	r4, [pc, #156]	; (800de38 <xTaskPriorityInherit+0xa4>)
 800dd9c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800dd9e:	6822      	ldr	r2, [r4, #0]
 800dda0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800dda2:	4293      	cmp	r3, r2
 800dda4:	d214      	bcs.n	800ddd0 <xTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dda6:	6982      	ldr	r2, [r0, #24]
 800dda8:	2a00      	cmp	r2, #0
 800ddaa:	db04      	blt.n	800ddb6 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ddac:	6822      	ldr	r2, [r4, #0]
 800ddae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ddb0:	f1c2 0207 	rsb	r2, r2, #7
 800ddb4:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ddb6:	4d21      	ldr	r5, [pc, #132]	; (800de3c <xTaskPriorityInherit+0xa8>)
 800ddb8:	6942      	ldr	r2, [r0, #20]
 800ddba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ddbe:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800ddc2:	429a      	cmp	r2, r3
 800ddc4:	d00c      	beq.n	800dde0 <xTaskPriorityInherit+0x4c>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ddc6:	6823      	ldr	r3, [r4, #0]
 800ddc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddca:	62c3      	str	r3, [r0, #44]	; 0x2c
				xReturn = pdTRUE;
 800ddcc:	2001      	movs	r0, #1
	}
 800ddce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ddd0:	6823      	ldr	r3, [r4, #0]
 800ddd2:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800ddd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddd6:	4298      	cmp	r0, r3
 800ddd8:	bf2c      	ite	cs
 800ddda:	2000      	movcs	r0, #0
 800dddc:	2001      	movcc	r0, #1
 800ddde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dde0:	1d07      	adds	r7, r0, #4
 800dde2:	4606      	mov	r6, r0
 800dde4:	4638      	mov	r0, r7
 800dde6:	f7fe f851 	bl	800be8c <uxListRemove>
 800ddea:	bb10      	cbnz	r0, 800de32 <xTaskPriorityInherit+0x9e>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800ddec:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800ddee:	4a14      	ldr	r2, [pc, #80]	; (800de40 <xTaskPriorityInherit+0xac>)
 800ddf0:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800ddf4:	009b      	lsls	r3, r3, #2
 800ddf6:	58eb      	ldr	r3, [r5, r3]
 800ddf8:	b933      	cbnz	r3, 800de08 <xTaskPriorityInherit+0x74>
 800ddfa:	6813      	ldr	r3, [r2, #0]
 800ddfc:	2001      	movs	r0, #1
 800ddfe:	fa00 f101 	lsl.w	r1, r0, r1
 800de02:	ea23 0101 	bic.w	r1, r3, r1
 800de06:	6011      	str	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800de08:	6823      	ldr	r3, [r4, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800de0a:	f8d2 e000 	ldr.w	lr, [r2]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800de0e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800de10:	62f0      	str	r0, [r6, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800de12:	2401      	movs	r4, #1
 800de14:	fa04 f300 	lsl.w	r3, r4, r0
 800de18:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800de1c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800de20:	ea43 030e 	orr.w	r3, r3, lr
 800de24:	4639      	mov	r1, r7
 800de26:	6013      	str	r3, [r2, #0]
 800de28:	f7fe f806 	bl	800be38 <vListInsertEnd>
				xReturn = pdTRUE;
 800de2c:	4620      	mov	r0, r4
 800de2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
 800de30:	4770      	bx	lr
 800de32:	4a03      	ldr	r2, [pc, #12]	; (800de40 <xTaskPriorityInherit+0xac>)
 800de34:	e7e8      	b.n	800de08 <xTaskPriorityInherit+0x74>
 800de36:	bf00      	nop
 800de38:	20004f24 	.word	0x20004f24
 800de3c:	20004f30 	.word	0x20004f30
 800de40:	20004fd0 	.word	0x20004fd0

0800de44 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800de44:	b308      	cbz	r0, 800de8a <xTaskPriorityDisinherit+0x46>
	{
 800de46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 800de48:	4b28      	ldr	r3, [pc, #160]	; (800deec <xTaskPriorityDisinherit+0xa8>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	4298      	cmp	r0, r3
 800de4e:	d008      	beq.n	800de62 <xTaskPriorityDisinherit+0x1e>
 800de50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de54:	f383 8811 	msr	BASEPRI, r3
 800de58:	f3bf 8f6f 	isb	sy
 800de5c:	f3bf 8f4f 	dsb	sy
 800de60:	e7fe      	b.n	800de60 <xTaskPriorityDisinherit+0x1c>
			configASSERT( pxTCB->uxMutexesHeld );
 800de62:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800de64:	b943      	cbnz	r3, 800de78 <xTaskPriorityDisinherit+0x34>
 800de66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de6a:	f383 8811 	msr	BASEPRI, r3
 800de6e:	f3bf 8f6f 	isb	sy
 800de72:	f3bf 8f4f 	dsb	sy
 800de76:	e7fe      	b.n	800de76 <xTaskPriorityDisinherit+0x32>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800de78:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800de7a:	6d02      	ldr	r2, [r0, #80]	; 0x50
			( pxTCB->uxMutexesHeld )--;
 800de7c:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800de7e:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800de80:	6543      	str	r3, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800de82:	d000      	beq.n	800de86 <xTaskPriorityDisinherit+0x42>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800de84:	b11b      	cbz	r3, 800de8e <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800de86:	2000      	movs	r0, #0
 800de88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de8a:	2000      	movs	r0, #0
	}
 800de8c:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de8e:	1d07      	adds	r7, r0, #4
 800de90:	4604      	mov	r4, r0
 800de92:	4638      	mov	r0, r7
 800de94:	f7fd fffa 	bl	800be8c <uxListRemove>
 800de98:	b1c0      	cbz	r0, 800decc <xTaskPriorityDisinherit+0x88>
 800de9a:	4815      	ldr	r0, [pc, #84]	; (800def0 <xTaskPriorityDisinherit+0xac>)
 800de9c:	4a15      	ldr	r2, [pc, #84]	; (800def4 <xTaskPriorityDisinherit+0xb0>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800de9e:	6d23      	ldr	r3, [r4, #80]	; 0x50
					prvAddTaskToReadyList( pxTCB );
 800dea0:	f8d2 c000 	ldr.w	ip, [r2]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dea4:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800dea6:	2501      	movs	r5, #1
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dea8:	f1c3 0e07 	rsb	lr, r3, #7
					prvAddTaskToReadyList( pxTCB );
 800deac:	fa05 f603 	lsl.w	r6, r5, r3
 800deb0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800deb4:	ea46 060c 	orr.w	r6, r6, ip
 800deb8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800debc:	4639      	mov	r1, r7
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800debe:	f8c4 e018 	str.w	lr, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800dec2:	6016      	str	r6, [r2, #0]
 800dec4:	f7fd ffb8 	bl	800be38 <vListInsertEnd>
					xReturn = pdTRUE;
 800dec8:	4628      	mov	r0, r5
	}
 800deca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800decc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800dece:	4808      	ldr	r0, [pc, #32]	; (800def0 <xTaskPriorityDisinherit+0xac>)
 800ded0:	4a08      	ldr	r2, [pc, #32]	; (800def4 <xTaskPriorityDisinherit+0xb0>)
 800ded2:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800ded6:	009b      	lsls	r3, r3, #2
 800ded8:	58c3      	ldr	r3, [r0, r3]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d1df      	bne.n	800de9e <xTaskPriorityDisinherit+0x5a>
 800dede:	6813      	ldr	r3, [r2, #0]
 800dee0:	2501      	movs	r5, #1
 800dee2:	408d      	lsls	r5, r1
 800dee4:	ea23 0305 	bic.w	r3, r3, r5
 800dee8:	6013      	str	r3, [r2, #0]
 800deea:	e7d8      	b.n	800de9e <xTaskPriorityDisinherit+0x5a>
 800deec:	20004f24 	.word	0x20004f24
 800def0:	20004f30 	.word	0x20004f30
 800def4:	20004fd0 	.word	0x20004fd0

0800def8 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800def8:	b1a8      	cbz	r0, 800df26 <vTaskPriorityDisinheritAfterTimeout+0x2e>
	{
 800defa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB->uxMutexesHeld );
 800defc:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800defe:	b944      	cbnz	r4, 800df12 <vTaskPriorityDisinheritAfterTimeout+0x1a>
 800df00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df04:	f383 8811 	msr	BASEPRI, r3
 800df08:	f3bf 8f6f 	isb	sy
 800df0c:	f3bf 8f4f 	dsb	sy
 800df10:	e7fe      	b.n	800df10 <vTaskPriorityDisinheritAfterTimeout+0x18>
 800df12:	6d02      	ldr	r2, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != uxPriorityToUse )
 800df14:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800df16:	428a      	cmp	r2, r1
 800df18:	bf38      	it	cc
 800df1a:	460a      	movcc	r2, r1
 800df1c:	4293      	cmp	r3, r2
 800df1e:	d001      	beq.n	800df24 <vTaskPriorityDisinheritAfterTimeout+0x2c>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800df20:	2c01      	cmp	r4, #1
 800df22:	d001      	beq.n	800df28 <vTaskPriorityDisinheritAfterTimeout+0x30>
 800df24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df26:	4770      	bx	lr
					configASSERT( pxTCB != pxCurrentTCB );
 800df28:	4921      	ldr	r1, [pc, #132]	; (800dfb0 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 800df2a:	6809      	ldr	r1, [r1, #0]
 800df2c:	4288      	cmp	r0, r1
 800df2e:	d025      	beq.n	800df7c <vTaskPriorityDisinheritAfterTimeout+0x84>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800df30:	6981      	ldr	r1, [r0, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 800df32:	62c2      	str	r2, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800df34:	2900      	cmp	r1, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df36:	bfa8      	it	ge
 800df38:	f1c2 0207 	rsbge	r2, r2, #7
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800df3c:	4d1d      	ldr	r5, [pc, #116]	; (800dfb4 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df3e:	bfa8      	it	ge
 800df40:	6182      	strge	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800df42:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800df46:	6942      	ldr	r2, [r0, #20]
 800df48:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800df4c:	429a      	cmp	r2, r3
 800df4e:	d1e9      	bne.n	800df24 <vTaskPriorityDisinheritAfterTimeout+0x2c>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df50:	1d06      	adds	r6, r0, #4
 800df52:	4604      	mov	r4, r0
 800df54:	4630      	mov	r0, r6
 800df56:	f7fd ff99 	bl	800be8c <uxListRemove>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800df5a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df5c:	b1b8      	cbz	r0, 800df8e <vTaskPriorityDisinheritAfterTimeout+0x96>
 800df5e:	2301      	movs	r3, #1
 800df60:	4c15      	ldr	r4, [pc, #84]	; (800dfb8 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 800df62:	4093      	lsls	r3, r2
 800df64:	0090      	lsls	r0, r2, #2
						prvAddTaskToReadyList( pxTCB );
 800df66:	6827      	ldr	r7, [r4, #0]
 800df68:	4410      	add	r0, r2
 800df6a:	433b      	orrs	r3, r7
 800df6c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800df70:	4631      	mov	r1, r6
 800df72:	6023      	str	r3, [r4, #0]
	}
 800df74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 800df78:	f7fd bf5e 	b.w	800be38 <vListInsertEnd>
 800df7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df80:	f383 8811 	msr	BASEPRI, r3
 800df84:	f3bf 8f6f 	isb	sy
 800df88:	f3bf 8f4f 	dsb	sy
 800df8c:	e7fe      	b.n	800df8c <vTaskPriorityDisinheritAfterTimeout+0x94>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800df8e:	0090      	lsls	r0, r2, #2
 800df90:	1883      	adds	r3, r0, r2
 800df92:	009b      	lsls	r3, r3, #2
 800df94:	58eb      	ldr	r3, [r5, r3]
 800df96:	b11b      	cbz	r3, 800dfa0 <vTaskPriorityDisinheritAfterTimeout+0xa8>
 800df98:	2301      	movs	r3, #1
 800df9a:	4093      	lsls	r3, r2
 800df9c:	4c06      	ldr	r4, [pc, #24]	; (800dfb8 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 800df9e:	e7e2      	b.n	800df66 <vTaskPriorityDisinheritAfterTimeout+0x6e>
 800dfa0:	4c05      	ldr	r4, [pc, #20]	; (800dfb8 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	6821      	ldr	r1, [r4, #0]
 800dfa6:	4093      	lsls	r3, r2
 800dfa8:	ea21 0103 	bic.w	r1, r1, r3
 800dfac:	6021      	str	r1, [r4, #0]
 800dfae:	e7da      	b.n	800df66 <vTaskPriorityDisinheritAfterTimeout+0x6e>
 800dfb0:	20004f24 	.word	0x20004f24
 800dfb4:	20004f30 	.word	0x20004f30
 800dfb8:	20004fd0 	.word	0x20004fd0

0800dfbc <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800dfbc:	4b04      	ldr	r3, [pc, #16]	; (800dfd0 <pvTaskIncrementMutexHeldCount+0x14>)
 800dfbe:	681a      	ldr	r2, [r3, #0]
 800dfc0:	b11a      	cbz	r2, 800dfca <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800dfc2:	6819      	ldr	r1, [r3, #0]
 800dfc4:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800dfc6:	3201      	adds	r2, #1
 800dfc8:	654a      	str	r2, [r1, #84]	; 0x54
		return pxCurrentTCB;
 800dfca:	6818      	ldr	r0, [r3, #0]
	}
 800dfcc:	4770      	bx	lr
 800dfce:	bf00      	nop
 800dfd0:	20004f24 	.word	0x20004f24

0800dfd4 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dfd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dfd8:	4e22      	ldr	r6, [pc, #136]	; (800e064 <prvSwitchTimerLists+0x90>)
	if( xTimerQueue != NULL )
 800dfda:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800e06c <prvSwitchTimerLists+0x98>
{
 800dfde:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 800dfe0:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dfe4:	e00c      	b.n	800e000 <prvSwitchTimerLists+0x2c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dfe6:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dfe8:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dfea:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dfec:	1d25      	adds	r5, r4, #4
 800dfee:	4628      	mov	r0, r5
 800dff0:	f7fd ff4c 	bl	800be8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dff4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dff6:	4620      	mov	r0, r4
 800dff8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800dffa:	69e3      	ldr	r3, [r4, #28]
 800dffc:	2b01      	cmp	r3, #1
 800dffe:	d00a      	beq.n	800e016 <prvSwitchTimerLists+0x42>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e000:	6833      	ldr	r3, [r6, #0]
 800e002:	681a      	ldr	r2, [r3, #0]
 800e004:	2a00      	cmp	r2, #0
 800e006:	d1ee      	bne.n	800dfe6 <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 800e008:	4a17      	ldr	r2, [pc, #92]	; (800e068 <prvSwitchTimerLists+0x94>)
 800e00a:	6811      	ldr	r1, [r2, #0]
 800e00c:	6031      	str	r1, [r6, #0]
	pxOverflowTimerList = pxTemp;
 800e00e:	6013      	str	r3, [r2, #0]
}
 800e010:	b005      	add	sp, #20
 800e012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e016:	69a3      	ldr	r3, [r4, #24]
 800e018:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 800e01a:	429f      	cmp	r7, r3
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e01c:	4629      	mov	r1, r5
			if( xReloadTime > xNextExpireTime )
 800e01e:	d31a      	bcc.n	800e056 <prvSwitchTimerLists+0x82>
	if( xTimerQueue != NULL )
 800e020:	f8d9 3000 	ldr.w	r3, [r9]
 800e024:	b173      	cbz	r3, 800e044 <prvSwitchTimerLists+0x70>
		xMessage.xMessageID = xCommandID;
 800e026:	f8cd 8004 	str.w	r8, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e02a:	9702      	str	r7, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800e02c:	9403      	str	r4, [sp, #12]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e02e:	f7ff fea1 	bl	800dd74 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e032:	2300      	movs	r3, #0
 800e034:	461a      	mov	r2, r3
 800e036:	a901      	add	r1, sp, #4
 800e038:	f8d9 0000 	ldr.w	r0, [r9]
 800e03c:	f7fe fc20 	bl	800c880 <xQueueGenericSend>
				configASSERT( xResult );
 800e040:	2800      	cmp	r0, #0
 800e042:	d1dd      	bne.n	800e000 <prvSwitchTimerLists+0x2c>
 800e044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e048:	f383 8811 	msr	BASEPRI, r3
 800e04c:	f3bf 8f6f 	isb	sy
 800e050:	f3bf 8f4f 	dsb	sy
 800e054:	e7fe      	b.n	800e054 <prvSwitchTimerLists+0x80>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e056:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e058:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e05a:	6830      	ldr	r0, [r6, #0]
 800e05c:	f7fd fefc 	bl	800be58 <vListInsert>
 800e060:	e7ce      	b.n	800e000 <prvSwitchTimerLists+0x2c>
 800e062:	bf00      	nop
 800e064:	20005050 	.word	0x20005050
 800e068:	20005054 	.word	0x20005054
 800e06c:	20005084 	.word	0x20005084

0800e070 <xTimerCreateTimerTask>:
{
 800e070:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800e072:	4c1c      	ldr	r4, [pc, #112]	; (800e0e4 <xTimerCreateTimerTask+0x74>)
{
 800e074:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 800e076:	f7fd ff85 	bl	800bf84 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800e07a:	6826      	ldr	r6, [r4, #0]
 800e07c:	b1d6      	cbz	r6, 800e0b4 <xTimerCreateTimerTask+0x44>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e07e:	f7fd ffa3 	bl	800bfc8 <vPortExitCritical>
	if( xTimerQueue != NULL )
 800e082:	6823      	ldr	r3, [r4, #0]
 800e084:	b16b      	cbz	r3, 800e0a2 <xTimerCreateTimerTask+0x32>
			xReturn = xTaskCreate(	prvTimerTask,
 800e086:	4b18      	ldr	r3, [pc, #96]	; (800e0e8 <xTimerCreateTimerTask+0x78>)
 800e088:	9301      	str	r3, [sp, #4]
 800e08a:	2302      	movs	r3, #2
 800e08c:	9300      	str	r3, [sp, #0]
 800e08e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e092:	2300      	movs	r3, #0
 800e094:	4915      	ldr	r1, [pc, #84]	; (800e0ec <xTimerCreateTimerTask+0x7c>)
 800e096:	4816      	ldr	r0, [pc, #88]	; (800e0f0 <xTimerCreateTimerTask+0x80>)
 800e098:	f7ff fa42 	bl	800d520 <xTaskCreate>
	configASSERT( xReturn );
 800e09c:	b108      	cbz	r0, 800e0a2 <xTimerCreateTimerTask+0x32>
}
 800e09e:	b003      	add	sp, #12
 800e0a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0a6:	f383 8811 	msr	BASEPRI, r3
 800e0aa:	f3bf 8f6f 	isb	sy
 800e0ae:	f3bf 8f4f 	dsb	sy
 800e0b2:	e7fe      	b.n	800e0b2 <xTimerCreateTimerTask+0x42>
			vListInitialise( &xActiveTimerList1 );
 800e0b4:	4f0f      	ldr	r7, [pc, #60]	; (800e0f4 <xTimerCreateTimerTask+0x84>)
			vListInitialise( &xActiveTimerList2 );
 800e0b6:	4d10      	ldr	r5, [pc, #64]	; (800e0f8 <xTimerCreateTimerTask+0x88>)
			vListInitialise( &xActiveTimerList1 );
 800e0b8:	4638      	mov	r0, r7
 800e0ba:	f7fd fead 	bl	800be18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e0be:	4628      	mov	r0, r5
 800e0c0:	f7fd feaa 	bl	800be18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e0c4:	4a0d      	ldr	r2, [pc, #52]	; (800e0fc <xTimerCreateTimerTask+0x8c>)
			pxOverflowTimerList = &xActiveTimerList2;
 800e0c6:	4b0e      	ldr	r3, [pc, #56]	; (800e100 <xTimerCreateTimerTask+0x90>)
			pxCurrentTimerList = &xActiveTimerList1;
 800e0c8:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800e0ca:	210c      	movs	r1, #12
 800e0cc:	4632      	mov	r2, r6
 800e0ce:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800e0d0:	601d      	str	r5, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800e0d2:	f7fe fa2d 	bl	800c530 <xQueueGenericCreate>
 800e0d6:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 800e0d8:	2800      	cmp	r0, #0
 800e0da:	d0d0      	beq.n	800e07e <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e0dc:	4909      	ldr	r1, [pc, #36]	; (800e104 <xTimerCreateTimerTask+0x94>)
 800e0de:	f7ff f911 	bl	800d304 <vQueueAddToRegistry>
 800e0e2:	e7cc      	b.n	800e07e <xTimerCreateTimerTask+0xe>
 800e0e4:	20005084 	.word	0x20005084
 800e0e8:	20005088 	.word	0x20005088
 800e0ec:	080171a0 	.word	0x080171a0
 800e0f0:	0800e221 	.word	0x0800e221
 800e0f4:	20005058 	.word	0x20005058
 800e0f8:	2000506c 	.word	0x2000506c
 800e0fc:	20005050 	.word	0x20005050
 800e100:	20005054 	.word	0x20005054
 800e104:	08017198 	.word	0x08017198

0800e108 <xTimerCreate>:
	{
 800e108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e10c:	4682      	mov	sl, r0
 800e10e:	b083      	sub	sp, #12
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800e110:	2028      	movs	r0, #40	; 0x28
	{
 800e112:	460d      	mov	r5, r1
 800e114:	4691      	mov	r9, r2
 800e116:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800e118:	f7fe f8ae 	bl	800c278 <pvPortMalloc>
		if( pxNewTimer != NULL )
 800e11c:	4604      	mov	r4, r0
 800e11e:	b1f0      	cbz	r0, 800e15e <xTimerCreate+0x56>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800e120:	b945      	cbnz	r5, 800e134 <xTimerCreate+0x2c>
 800e122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e126:	f383 8811 	msr	BASEPRI, r3
 800e12a:	f3bf 8f6f 	isb	sy
 800e12e:	f3bf 8f4f 	dsb	sy
 800e132:	e7fe      	b.n	800e132 <xTimerCreate+0x2a>
		if( xTimerQueue == NULL )
 800e134:	4f1a      	ldr	r7, [pc, #104]	; (800e1a0 <xTimerCreate+0x98>)
	taskENTER_CRITICAL();
 800e136:	f7fd ff25 	bl	800bf84 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800e13a:	f8d7 8000 	ldr.w	r8, [r7]
 800e13e:	f1b8 0f00 	cmp.w	r8, #0
 800e142:	d010      	beq.n	800e166 <xTimerCreate+0x5e>
	taskEXIT_CRITICAL();
 800e144:	f7fd ff40 	bl	800bfc8 <vPortExitCritical>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800e148:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		pxNewTimer->pcTimerName = pcTimerName;
 800e14a:	f8c4 a000 	str.w	sl, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800e14e:	61a5      	str	r5, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800e150:	f8c4 901c 	str.w	r9, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800e154:	6226      	str	r6, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800e156:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800e158:	1d20      	adds	r0, r4, #4
 800e15a:	f7fd fe69 	bl	800be30 <vListInitialiseItem>
	}
 800e15e:	4620      	mov	r0, r4
 800e160:	b003      	add	sp, #12
 800e162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			vListInitialise( &xActiveTimerList1 );
 800e166:	4b0f      	ldr	r3, [pc, #60]	; (800e1a4 <xTimerCreate+0x9c>)
			vListInitialise( &xActiveTimerList2 );
 800e168:	f8df b044 	ldr.w	fp, [pc, #68]	; 800e1b0 <xTimerCreate+0xa8>
			vListInitialise( &xActiveTimerList1 );
 800e16c:	9301      	str	r3, [sp, #4]
 800e16e:	4618      	mov	r0, r3
 800e170:	f7fd fe52 	bl	800be18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e174:	4658      	mov	r0, fp
 800e176:	f7fd fe4f 	bl	800be18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e17a:	490b      	ldr	r1, [pc, #44]	; (800e1a8 <xTimerCreate+0xa0>)
			pxOverflowTimerList = &xActiveTimerList2;
 800e17c:	f8df e034 	ldr.w	lr, [pc, #52]	; 800e1b4 <xTimerCreate+0xac>
			pxCurrentTimerList = &xActiveTimerList1;
 800e180:	9b01      	ldr	r3, [sp, #4]
 800e182:	600b      	str	r3, [r1, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800e184:	4642      	mov	r2, r8
 800e186:	210c      	movs	r1, #12
 800e188:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800e18a:	f8ce b000 	str.w	fp, [lr]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800e18e:	f7fe f9cf 	bl	800c530 <xQueueGenericCreate>
 800e192:	6038      	str	r0, [r7, #0]
				if( xTimerQueue != NULL )
 800e194:	2800      	cmp	r0, #0
 800e196:	d0d5      	beq.n	800e144 <xTimerCreate+0x3c>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e198:	4904      	ldr	r1, [pc, #16]	; (800e1ac <xTimerCreate+0xa4>)
 800e19a:	f7ff f8b3 	bl	800d304 <vQueueAddToRegistry>
 800e19e:	e7d1      	b.n	800e144 <xTimerCreate+0x3c>
 800e1a0:	20005084 	.word	0x20005084
 800e1a4:	20005058 	.word	0x20005058
 800e1a8:	20005050 	.word	0x20005050
 800e1ac:	08017198 	.word	0x08017198
 800e1b0:	2000506c 	.word	0x2000506c
 800e1b4:	20005054 	.word	0x20005054

0800e1b8 <xTimerGenericCommand>:
	configASSERT( xTimer );
 800e1b8:	b330      	cbz	r0, 800e208 <xTimerGenericCommand+0x50>
{
 800e1ba:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 800e1bc:	4d17      	ldr	r5, [pc, #92]	; (800e21c <xTimerGenericCommand+0x64>)
 800e1be:	4604      	mov	r4, r0
 800e1c0:	6828      	ldr	r0, [r5, #0]
{
 800e1c2:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 800e1c4:	b180      	cbz	r0, 800e1e8 <xTimerGenericCommand+0x30>
 800e1c6:	4616      	mov	r6, r2
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e1c8:	2905      	cmp	r1, #5
 800e1ca:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
 800e1cc:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e1ce:	9602      	str	r6, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800e1d0:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e1d2:	dc0b      	bgt.n	800e1ec <xTimerGenericCommand+0x34>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e1d4:	f7ff fdce 	bl	800dd74 <xTaskGetSchedulerState>
 800e1d8:	2802      	cmp	r0, #2
 800e1da:	d00d      	beq.n	800e1f8 <xTimerGenericCommand+0x40>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e1dc:	2300      	movs	r3, #0
 800e1de:	6828      	ldr	r0, [r5, #0]
 800e1e0:	461a      	mov	r2, r3
 800e1e2:	a901      	add	r1, sp, #4
 800e1e4:	f7fe fb4c 	bl	800c880 <xQueueGenericSend>
}
 800e1e8:	b004      	add	sp, #16
 800e1ea:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	a901      	add	r1, sp, #4
 800e1f0:	f7fe fc9c 	bl	800cb2c <xQueueGenericSendFromISR>
}
 800e1f4:	b004      	add	sp, #16
 800e1f6:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e1f8:	6828      	ldr	r0, [r5, #0]
 800e1fa:	9a08      	ldr	r2, [sp, #32]
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	a901      	add	r1, sp, #4
 800e200:	f7fe fb3e 	bl	800c880 <xQueueGenericSend>
}
 800e204:	b004      	add	sp, #16
 800e206:	bd70      	pop	{r4, r5, r6, pc}
 800e208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e20c:	f383 8811 	msr	BASEPRI, r3
 800e210:	f3bf 8f6f 	isb	sy
 800e214:	f3bf 8f4f 	dsb	sy
 800e218:	e7fe      	b.n	800e218 <xTimerGenericCommand+0x60>
 800e21a:	bf00      	nop
 800e21c:	20005084 	.word	0x20005084

0800e220 <prvTimerTask>:
{
 800e220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e224:	4f87      	ldr	r7, [pc, #540]	; (800e444 <prvTimerTask+0x224>)
 800e226:	4e88      	ldr	r6, [pc, #544]	; (800e448 <prvTimerTask+0x228>)
 800e228:	f8df 8228 	ldr.w	r8, [pc, #552]	; 800e454 <prvTimerTask+0x234>
 800e22c:	4c87      	ldr	r4, [pc, #540]	; (800e44c <prvTimerTask+0x22c>)
 800e22e:	b089      	sub	sp, #36	; 0x24
 800e230:	f04f 0901 	mov.w	r9, #1
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	681d      	ldr	r5, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e238:	2d00      	cmp	r5, #0
 800e23a:	d04a      	beq.n	800e2d2 <prvTimerTask+0xb2>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e23c:	68db      	ldr	r3, [r3, #12]
 800e23e:	f8d3 a000 	ldr.w	sl, [r3]
	vTaskSuspendAll();
 800e242:	f7ff fa9d 	bl	800d780 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800e246:	f7ff faa3 	bl	800d790 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800e24a:	6833      	ldr	r3, [r6, #0]
 800e24c:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 800e24e:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 800e250:	d851      	bhi.n	800e2f6 <prvTimerTask+0xd6>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e252:	4582      	cmp	sl, r0
	xLastTime = xTimeNow;
 800e254:	6030      	str	r0, [r6, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e256:	d95a      	bls.n	800e30e <prvTimerTask+0xee>
 800e258:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e25a:	ebaa 010b 	sub.w	r1, sl, fp
 800e25e:	6820      	ldr	r0, [r4, #0]
 800e260:	f7ff f87a 	bl	800d358 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e264:	f7ff fb48 	bl	800d8f8 <xTaskResumeAll>
 800e268:	b938      	cbnz	r0, 800e27a <prvTimerTask+0x5a>
					portYIELD_WITHIN_API();
 800e26a:	4a79      	ldr	r2, [pc, #484]	; (800e450 <prvTimerTask+0x230>)
 800e26c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e270:	6013      	str	r3, [r2, #0]
 800e272:	f3bf 8f4f 	dsb	sy
 800e276:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e27a:	2500      	movs	r5, #0
 800e27c:	2200      	movs	r2, #0
 800e27e:	a905      	add	r1, sp, #20
 800e280:	6820      	ldr	r0, [r4, #0]
 800e282:	f7fe fd0d 	bl	800cca0 <xQueueReceive>
 800e286:	2800      	cmp	r0, #0
 800e288:	d0d4      	beq.n	800e234 <prvTimerTask+0x14>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e28a:	9b05      	ldr	r3, [sp, #20]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	dbf5      	blt.n	800e27c <prvTimerTask+0x5c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e290:	f8dd b01c 	ldr.w	fp, [sp, #28]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e294:	f8db 3014 	ldr.w	r3, [fp, #20]
 800e298:	b11b      	cbz	r3, 800e2a2 <prvTimerTask+0x82>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e29a:	f10b 0004 	add.w	r0, fp, #4
 800e29e:	f7fd fdf5 	bl	800be8c <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800e2a2:	f7ff fa75 	bl	800d790 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800e2a6:	6833      	ldr	r3, [r6, #0]
 800e2a8:	4298      	cmp	r0, r3
 800e2aa:	d32b      	bcc.n	800e304 <prvTimerTask+0xe4>
 800e2ac:	9b05      	ldr	r3, [sp, #20]
	xLastTime = xTimeNow;
 800e2ae:	6030      	str	r0, [r6, #0]
 800e2b0:	2b09      	cmp	r3, #9
 800e2b2:	d8e3      	bhi.n	800e27c <prvTimerTask+0x5c>
 800e2b4:	fa09 f303 	lsl.w	r3, r9, r3
 800e2b8:	f413 7f04 	tst.w	r3, #528	; 0x210
 800e2bc:	f040 8090 	bne.w	800e3e0 <prvTimerTask+0x1c0>
 800e2c0:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 800e2c4:	d160      	bne.n	800e388 <prvTimerTask+0x168>
 800e2c6:	069b      	lsls	r3, r3, #26
 800e2c8:	d5d8      	bpl.n	800e27c <prvTimerTask+0x5c>
						vPortFree( pxTimer );
 800e2ca:	4658      	mov	r0, fp
 800e2cc:	f7fe f864 	bl	800c398 <vPortFree>
 800e2d0:	e7d4      	b.n	800e27c <prvTimerTask+0x5c>
	vTaskSuspendAll();
 800e2d2:	f7ff fa55 	bl	800d780 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800e2d6:	f7ff fa5b 	bl	800d790 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800e2da:	6833      	ldr	r3, [r6, #0]
 800e2dc:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 800e2de:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 800e2e0:	d309      	bcc.n	800e2f6 <prvTimerTask+0xd6>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e2e2:	f8d8 3000 	ldr.w	r3, [r8]
	xLastTime = xTimeNow;
 800e2e6:	f8c6 b000 	str.w	fp, [r6]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e2ea:	681a      	ldr	r2, [r3, #0]
 800e2ec:	fab2 f282 	clz	r2, r2
		xNextExpireTime = ( TickType_t ) 0U;
 800e2f0:	46aa      	mov	sl, r5
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e2f2:	0952      	lsrs	r2, r2, #5
 800e2f4:	e7b1      	b.n	800e25a <prvTimerTask+0x3a>
		prvSwitchTimerLists();
 800e2f6:	f7ff fe6d 	bl	800dfd4 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800e2fa:	f8c6 b000 	str.w	fp, [r6]
			( void ) xTaskResumeAll();
 800e2fe:	f7ff fafb 	bl	800d8f8 <xTaskResumeAll>
 800e302:	e7ba      	b.n	800e27a <prvTimerTask+0x5a>
 800e304:	9003      	str	r0, [sp, #12]
		prvSwitchTimerLists();
 800e306:	f7ff fe65 	bl	800dfd4 <prvSwitchTimerLists>
 800e30a:	9803      	ldr	r0, [sp, #12]
 800e30c:	e7ce      	b.n	800e2ac <prvTimerTask+0x8c>
				( void ) xTaskResumeAll();
 800e30e:	f7ff faf3 	bl	800d8f8 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	68db      	ldr	r3, [r3, #12]
 800e316:	68dd      	ldr	r5, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e318:	1d29      	adds	r1, r5, #4
 800e31a:	4608      	mov	r0, r1
 800e31c:	9103      	str	r1, [sp, #12]
 800e31e:	f7fd fdb5 	bl	800be8c <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e322:	69ea      	ldr	r2, [r5, #28]
 800e324:	9903      	ldr	r1, [sp, #12]
 800e326:	2a01      	cmp	r2, #1
 800e328:	d003      	beq.n	800e332 <prvTimerTask+0x112>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e32a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e32c:	4628      	mov	r0, r5
 800e32e:	4798      	blx	r3
 800e330:	e7a3      	b.n	800e27a <prvTimerTask+0x5a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e332:	69aa      	ldr	r2, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e334:	612d      	str	r5, [r5, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e336:	eb0a 0002 	add.w	r0, sl, r2
	if( xNextExpiryTime <= xTimeNow )
 800e33a:	4558      	cmp	r0, fp
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e33c:	6068      	str	r0, [r5, #4]
	if( xNextExpiryTime <= xTimeNow )
 800e33e:	d81f      	bhi.n	800e380 <prvTimerTask+0x160>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e340:	ebab 0b0a 	sub.w	fp, fp, sl
 800e344:	455a      	cmp	r2, fp
 800e346:	d85e      	bhi.n	800e406 <prvTimerTask+0x1e6>
	if( xTimerQueue != NULL )
 800e348:	6823      	ldr	r3, [r4, #0]
 800e34a:	b183      	cbz	r3, 800e36e <prvTimerTask+0x14e>
		xMessage.xMessageID = xCommandID;
 800e34c:	f04f 0b00 	mov.w	fp, #0
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e350:	f8cd a018 	str.w	sl, [sp, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800e354:	9507      	str	r5, [sp, #28]
		xMessage.xMessageID = xCommandID;
 800e356:	f8cd b014 	str.w	fp, [sp, #20]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e35a:	f7ff fd0b 	bl	800dd74 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e35e:	465b      	mov	r3, fp
 800e360:	465a      	mov	r2, fp
 800e362:	a905      	add	r1, sp, #20
 800e364:	6820      	ldr	r0, [r4, #0]
 800e366:	f7fe fa8b 	bl	800c880 <xQueueGenericSend>
			configASSERT( xResult );
 800e36a:	2800      	cmp	r0, #0
 800e36c:	d1dd      	bne.n	800e32a <prvTimerTask+0x10a>
 800e36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e372:	f383 8811 	msr	BASEPRI, r3
 800e376:	f3bf 8f6f 	isb	sy
 800e37a:	f3bf 8f4f 	dsb	sy
 800e37e:	e7fe      	b.n	800e37e <prvTimerTask+0x15e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e380:	6838      	ldr	r0, [r7, #0]
 800e382:	f7fd fd69 	bl	800be58 <vListInsert>
 800e386:	e7d0      	b.n	800e32a <prvTimerTask+0x10a>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e388:	9b06      	ldr	r3, [sp, #24]
 800e38a:	f8db 1018 	ldr.w	r1, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e38e:	f8cb b010 	str.w	fp, [fp, #16]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e392:	185a      	adds	r2, r3, r1
	if( xNextExpiryTime <= xTimeNow )
 800e394:	4282      	cmp	r2, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e396:	f8cb 2004 	str.w	r2, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 800e39a:	d839      	bhi.n	800e410 <prvTimerTask+0x1f0>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e39c:	1ac3      	subs	r3, r0, r3
 800e39e:	4299      	cmp	r1, r3
 800e3a0:	d840      	bhi.n	800e424 <prvTimerTask+0x204>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e3a2:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 800e3a6:	4658      	mov	r0, fp
 800e3a8:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e3aa:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e3ae:	2b01      	cmp	r3, #1
 800e3b0:	f47f af64 	bne.w	800e27c <prvTimerTask+0x5c>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e3b4:	9906      	ldr	r1, [sp, #24]
 800e3b6:	f8db 2018 	ldr.w	r2, [fp, #24]
 800e3ba:	9500      	str	r5, [sp, #0]
 800e3bc:	2300      	movs	r3, #0
 800e3be:	440a      	add	r2, r1
 800e3c0:	4658      	mov	r0, fp
 800e3c2:	4619      	mov	r1, r3
 800e3c4:	f7ff fef8 	bl	800e1b8 <xTimerGenericCommand>
							configASSERT( xResult );
 800e3c8:	2800      	cmp	r0, #0
 800e3ca:	f47f af57 	bne.w	800e27c <prvTimerTask+0x5c>
 800e3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d2:	f383 8811 	msr	BASEPRI, r3
 800e3d6:	f3bf 8f6f 	isb	sy
 800e3da:	f3bf 8f4f 	dsb	sy
 800e3de:	e7fe      	b.n	800e3de <prvTimerTask+0x1be>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e3e0:	9b06      	ldr	r3, [sp, #24]
 800e3e2:	f8cb 3018 	str.w	r3, [fp, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e3e6:	b323      	cbz	r3, 800e432 <prvTimerTask+0x212>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e3e8:	4403      	add	r3, r0
	if( xNextExpiryTime <= xTimeNow )
 800e3ea:	4283      	cmp	r3, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e3ec:	f8cb 3004 	str.w	r3, [fp, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e3f0:	f8cb b010 	str.w	fp, [fp, #16]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e3f4:	f10b 0104 	add.w	r1, fp, #4
 800e3f8:	bf94      	ite	ls
 800e3fa:	f8d8 0000 	ldrls.w	r0, [r8]
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e3fe:	6838      	ldrhi	r0, [r7, #0]
 800e400:	f7fd fd2a 	bl	800be58 <vListInsert>
 800e404:	e73a      	b.n	800e27c <prvTimerTask+0x5c>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e406:	f8d8 0000 	ldr.w	r0, [r8]
 800e40a:	f7fd fd25 	bl	800be58 <vListInsert>
 800e40e:	e78c      	b.n	800e32a <prvTimerTask+0x10a>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e410:	4283      	cmp	r3, r0
 800e412:	d901      	bls.n	800e418 <prvTimerTask+0x1f8>
 800e414:	4293      	cmp	r3, r2
 800e416:	d9c4      	bls.n	800e3a2 <prvTimerTask+0x182>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e418:	f10b 0104 	add.w	r1, fp, #4
 800e41c:	6838      	ldr	r0, [r7, #0]
 800e41e:	f7fd fd1b 	bl	800be58 <vListInsert>
 800e422:	e72b      	b.n	800e27c <prvTimerTask+0x5c>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e424:	f10b 0104 	add.w	r1, fp, #4
 800e428:	f8d8 0000 	ldr.w	r0, [r8]
 800e42c:	f7fd fd14 	bl	800be58 <vListInsert>
 800e430:	e724      	b.n	800e27c <prvTimerTask+0x5c>
 800e432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e436:	f383 8811 	msr	BASEPRI, r3
 800e43a:	f3bf 8f6f 	isb	sy
 800e43e:	f3bf 8f4f 	dsb	sy
 800e442:	e7fe      	b.n	800e442 <prvTimerTask+0x222>
 800e444:	20005050 	.word	0x20005050
 800e448:	20005080 	.word	0x20005080
 800e44c:	20005084 	.word	0x20005084
 800e450:	e000ed04 	.word	0xe000ed04
 800e454:	20005054 	.word	0x20005054

0800e458 <accGiveSemaphore>:
//  Wire.send(x);
//  #endif
//}

void accGiveSemaphore(void){
	osSemaphoreRelease (accSampleSemaphoreHandle);
 800e458:	4b01      	ldr	r3, [pc, #4]	; (800e460 <accGiveSemaphore+0x8>)
 800e45a:	6818      	ldr	r0, [r3, #0]
 800e45c:	f7fd bcb4 	b.w	800bdc8 <osSemaphoreRelease>
 800e460:	20005458 	.word	0x20005458

0800e464 <MMA8451_begin>:
/**************************************************************************/
/*!
    @brief  Setups the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
bool MMA8451_begin(void) {
 800e464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  _i2caddr = MMA8451_DEFAULT_ADDRESS;
 800e468:	4d55      	ldr	r5, [pc, #340]	; (800e5c0 <MMA8451_begin+0x15c>)
    HAL_I2C_Mem_Read(&hi2c2, _i2caddr<<1, reg, 1, &sample, 1, 2);
 800e46a:	4f56      	ldr	r7, [pc, #344]	; (800e5c4 <MMA8451_begin+0x160>)
    return samplePacket;
 800e46c:	f8df 815c 	ldr.w	r8, [pc, #348]	; 800e5cc <MMA8451_begin+0x168>
bool MMA8451_begin(void) {
 800e470:	b087      	sub	sp, #28
    HAL_I2C_Mem_Read(&hi2c2, _i2caddr<<1, reg, 1, &sample, 1, 2);
 800e472:	2401      	movs	r4, #1
  _i2caddr = MMA8451_DEFAULT_ADDRESS;
 800e474:	201c      	movs	r0, #28
    HAL_I2C_Mem_Read(&hi2c2, _i2caddr<<1, reg, 1, &sample, 1, 2);
 800e476:	2602      	movs	r6, #2
 800e478:	4623      	mov	r3, r4
  _i2caddr = MMA8451_DEFAULT_ADDRESS;
 800e47a:	7028      	strb	r0, [r5, #0]
    HAL_I2C_Mem_Read(&hi2c2, _i2caddr<<1, reg, 1, &sample, 1, 2);
 800e47c:	9700      	str	r7, [sp, #0]
 800e47e:	9602      	str	r6, [sp, #8]
 800e480:	9401      	str	r4, [sp, #4]
 800e482:	220d      	movs	r2, #13
 800e484:	2138      	movs	r1, #56	; 0x38
 800e486:	4850      	ldr	r0, [pc, #320]	; (800e5c8 <MMA8451_begin+0x164>)
 800e488:	f7f4 fb0c 	bl	8002aa4 <HAL_I2C_Mem_Read>

  /* Check connection */
  uint8_t deviceid = MMA8451_readRegister8(MMA8451_REG_WHOAMI);
  //HAL_Delay(4000);

  if (deviceid != 0x1A)
 800e48c:	f898 3000 	ldrb.w	r3, [r8]
 800e490:	2b1a      	cmp	r3, #26
 800e492:	d003      	beq.n	800e49c <MMA8451_begin+0x38>
  {
    /* No MMA8451 detected ... return false */
    //Serial.println(deviceid, HEX);
    return false;
 800e494:	2000      	movs	r0, #0
    Serial.println(MMA8451_readRegister8(i), HEX);
  }
  */

  return true;
}
 800e496:	b007      	add	sp, #28
 800e498:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e49c:	ab06      	add	r3, sp, #24
 800e49e:	2240      	movs	r2, #64	; 0x40
	HAL_I2C_Mem_Write(&hi2c2, _i2caddr<<1, reg, 1, &value, 1, 1);
 800e4a0:	f995 1000 	ldrsb.w	r1, [r5]
 800e4a4:	9402      	str	r4, [sp, #8]
 800e4a6:	f803 2d01 	strb.w	r2, [r3, #-1]!
 800e4aa:	40a1      	lsls	r1, r4
 800e4ac:	4846      	ldr	r0, [pc, #280]	; (800e5c8 <MMA8451_begin+0x164>)
 800e4ae:	e88d 0018 	stmia.w	sp, {r3, r4}
 800e4b2:	b289      	uxth	r1, r1
 800e4b4:	4623      	mov	r3, r4
 800e4b6:	222b      	movs	r2, #43	; 0x2b
    HAL_I2C_Mem_Read(&hi2c2, _i2caddr<<1, reg, 1, &sample, 1, 2);
 800e4b8:	4681      	mov	r9, r0
	HAL_I2C_Mem_Write(&hi2c2, _i2caddr<<1, reg, 1, &value, 1, 1);
 800e4ba:	f7f4 f9cf 	bl	800285c <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Read(&hi2c2, _i2caddr<<1, reg, 1, &sample, 1, 2);
 800e4be:	f995 1000 	ldrsb.w	r1, [r5]
 800e4c2:	9602      	str	r6, [sp, #8]
 800e4c4:	0049      	lsls	r1, r1, #1
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	b289      	uxth	r1, r1
 800e4ca:	9401      	str	r4, [sp, #4]
 800e4cc:	9700      	str	r7, [sp, #0]
 800e4ce:	222b      	movs	r2, #43	; 0x2b
 800e4d0:	4648      	mov	r0, r9
 800e4d2:	f7f4 fae7 	bl	8002aa4 <HAL_I2C_Mem_Read>
  while (MMA8451_readRegister8(MMA8451_REG_CTRL_REG2) & 0x40);
 800e4d6:	f898 3000 	ldrb.w	r3, [r8]
 800e4da:	065b      	lsls	r3, r3, #25
 800e4dc:	d4ef      	bmi.n	800e4be <MMA8451_begin+0x5a>
 800e4de:	ab06      	add	r3, sp, #24
	HAL_I2C_Mem_Write(&hi2c2, _i2caddr<<1, reg, 1, &value, 1, 1);
 800e4e0:	f995 1000 	ldrsb.w	r1, [r5]
 800e4e4:	9402      	str	r4, [sp, #8]
 800e4e6:	f803 4d08 	strb.w	r4, [r3, #-8]!
 800e4ea:	0049      	lsls	r1, r1, #1
 800e4ec:	e88d 0018 	stmia.w	sp, {r3, r4}
 800e4f0:	b289      	uxth	r1, r1
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	220e      	movs	r2, #14
 800e4f6:	4834      	ldr	r0, [pc, #208]	; (800e5c8 <MMA8451_begin+0x164>)
 800e4f8:	f7f4 f9b0 	bl	800285c <HAL_I2C_Mem_Write>
 800e4fc:	ab06      	add	r3, sp, #24
 800e4fe:	f995 1000 	ldrsb.w	r1, [r5]
 800e502:	9402      	str	r4, [sp, #8]
 800e504:	2203      	movs	r2, #3
 800e506:	f803 2d07 	strb.w	r2, [r3, #-7]!
 800e50a:	0049      	lsls	r1, r1, #1
 800e50c:	e88d 0018 	stmia.w	sp, {r3, r4}
 800e510:	b289      	uxth	r1, r1
 800e512:	2301      	movs	r3, #1
 800e514:	220f      	movs	r2, #15
 800e516:	482c      	ldr	r0, [pc, #176]	; (800e5c8 <MMA8451_begin+0x164>)
 800e518:	f7f4 f9a0 	bl	800285c <HAL_I2C_Mem_Write>
 800e51c:	ab06      	add	r3, sp, #24
 800e51e:	f995 1000 	ldrsb.w	r1, [r5]
 800e522:	f803 6d06 	strb.w	r6, [r3, #-6]!
 800e526:	0049      	lsls	r1, r1, #1
 800e528:	e88d 0018 	stmia.w	sp, {r3, r4}
 800e52c:	b289      	uxth	r1, r1
 800e52e:	9402      	str	r4, [sp, #8]
 800e530:	2301      	movs	r3, #1
 800e532:	222b      	movs	r2, #43	; 0x2b
 800e534:	4824      	ldr	r0, [pc, #144]	; (800e5c8 <MMA8451_begin+0x164>)
 800e536:	f7f4 f991 	bl	800285c <HAL_I2C_Mem_Write>
 800e53a:	ab06      	add	r3, sp, #24
 800e53c:	f995 1000 	ldrsb.w	r1, [r5]
 800e540:	f803 4d05 	strb.w	r4, [r3, #-5]!
 800e544:	0049      	lsls	r1, r1, #1
 800e546:	e88d 0018 	stmia.w	sp, {r3, r4}
 800e54a:	b289      	uxth	r1, r1
 800e54c:	9402      	str	r4, [sp, #8]
 800e54e:	2301      	movs	r3, #1
 800e550:	222d      	movs	r2, #45	; 0x2d
 800e552:	481d      	ldr	r0, [pc, #116]	; (800e5c8 <MMA8451_begin+0x164>)
 800e554:	f7f4 f982 	bl	800285c <HAL_I2C_Mem_Write>
 800e558:	ab06      	add	r3, sp, #24
 800e55a:	f995 1000 	ldrsb.w	r1, [r5]
 800e55e:	f803 4d04 	strb.w	r4, [r3, #-4]!
 800e562:	0049      	lsls	r1, r1, #1
 800e564:	e88d 0018 	stmia.w	sp, {r3, r4}
 800e568:	b289      	uxth	r1, r1
 800e56a:	9402      	str	r4, [sp, #8]
 800e56c:	2301      	movs	r3, #1
 800e56e:	222e      	movs	r2, #46	; 0x2e
 800e570:	4815      	ldr	r0, [pc, #84]	; (800e5c8 <MMA8451_begin+0x164>)
 800e572:	f7f4 f973 	bl	800285c <HAL_I2C_Mem_Write>
 800e576:	ab06      	add	r3, sp, #24
 800e578:	f995 1000 	ldrsb.w	r1, [r5]
 800e57c:	9402      	str	r4, [sp, #8]
 800e57e:	2240      	movs	r2, #64	; 0x40
 800e580:	f803 2d03 	strb.w	r2, [r3, #-3]!
 800e584:	0049      	lsls	r1, r1, #1
 800e586:	e88d 0018 	stmia.w	sp, {r3, r4}
 800e58a:	b289      	uxth	r1, r1
 800e58c:	2301      	movs	r3, #1
 800e58e:	2211      	movs	r2, #17
 800e590:	480d      	ldr	r0, [pc, #52]	; (800e5c8 <MMA8451_begin+0x164>)
 800e592:	f7f4 f963 	bl	800285c <HAL_I2C_Mem_Write>
 800e596:	ab06      	add	r3, sp, #24
 800e598:	f995 1000 	ldrsb.w	r1, [r5]
 800e59c:	9402      	str	r4, [sp, #8]
 800e59e:	2205      	movs	r2, #5
 800e5a0:	f803 2d02 	strb.w	r2, [r3, #-2]!
 800e5a4:	0049      	lsls	r1, r1, #1
 800e5a6:	e88d 0018 	stmia.w	sp, {r3, r4}
 800e5aa:	b289      	uxth	r1, r1
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	222a      	movs	r2, #42	; 0x2a
 800e5b0:	4805      	ldr	r0, [pc, #20]	; (800e5c8 <MMA8451_begin+0x164>)
 800e5b2:	f7f4 f953 	bl	800285c <HAL_I2C_Mem_Write>
 800e5b6:	2001      	movs	r0, #1
}
 800e5b8:	b007      	add	sp, #28
 800e5ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e5be:	bf00      	nop
 800e5c0:	2000545c 	.word	0x2000545c
 800e5c4:	2000549c 	.word	0x2000549c
 800e5c8:	20005aa8 	.word	0x20005aa8
 800e5cc:	20005478 	.word	0x20005478

0800e5d0 <MMA8451_setRange>:
/*!
    @brief  Sets the g range for the accelerometer
*/
/**************************************************************************/
void MMA8451_setRange(mma8451_range_t range)
{
 800e5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_I2C_Mem_Read(&hi2c2, _i2caddr<<1, reg, 1, &sample, 1, 2);
 800e5d4:	4e24      	ldr	r6, [pc, #144]	; (800e668 <MMA8451_setRange+0x98>)
 800e5d6:	4d25      	ldr	r5, [pc, #148]	; (800e66c <MMA8451_setRange+0x9c>)
 800e5d8:	f996 1000 	ldrsb.w	r1, [r6]
 800e5dc:	4b24      	ldr	r3, [pc, #144]	; (800e670 <MMA8451_setRange+0xa0>)
    return samplePacket;
 800e5de:	4f25      	ldr	r7, [pc, #148]	; (800e674 <MMA8451_setRange+0xa4>)
{
 800e5e0:	b086      	sub	sp, #24
    HAL_I2C_Mem_Read(&hi2c2, _i2caddr<<1, reg, 1, &sample, 1, 2);
 800e5e2:	2401      	movs	r4, #1
 800e5e4:	9300      	str	r3, [sp, #0]
 800e5e6:	0049      	lsls	r1, r1, #1
 800e5e8:	2302      	movs	r3, #2
 800e5ea:	9302      	str	r3, [sp, #8]
 800e5ec:	b289      	uxth	r1, r1
 800e5ee:	4623      	mov	r3, r4
{
 800e5f0:	4680      	mov	r8, r0
    HAL_I2C_Mem_Read(&hi2c2, _i2caddr<<1, reg, 1, &sample, 1, 2);
 800e5f2:	9401      	str	r4, [sp, #4]
 800e5f4:	4628      	mov	r0, r5
 800e5f6:	222a      	movs	r2, #42	; 0x2a
 800e5f8:	f7f4 fa54 	bl	8002aa4 <HAL_I2C_Mem_Read>
 800e5fc:	ab06      	add	r3, sp, #24
 800e5fe:	2200      	movs	r2, #0
	HAL_I2C_Mem_Write(&hi2c2, _i2caddr<<1, reg, 1, &value, 1, 1);
 800e600:	9402      	str	r4, [sp, #8]
 800e602:	f803 2d01 	strb.w	r2, [r3, #-1]!
 800e606:	f996 1000 	ldrsb.w	r1, [r6]
 800e60a:	e88d 0018 	stmia.w	sp, {r3, r4}
 800e60e:	40a1      	lsls	r1, r4
 800e610:	4623      	mov	r3, r4
 800e612:	b289      	uxth	r1, r1
 800e614:	4628      	mov	r0, r5
 800e616:	222a      	movs	r2, #42	; 0x2a
    return samplePacket;
 800e618:	783f      	ldrb	r7, [r7, #0]
	HAL_I2C_Mem_Write(&hi2c2, _i2caddr<<1, reg, 1, &value, 1, 1);
 800e61a:	f7f4 f91f 	bl	800285c <HAL_I2C_Mem_Write>
 800e61e:	ab06      	add	r3, sp, #24
 800e620:	f996 1000 	ldrsb.w	r1, [r6]
 800e624:	9402      	str	r4, [sp, #8]
  uint8_t reg1 = MMA8451_readRegister8(MMA8451_REG_CTRL_REG1);
  MMA8451_writeRegister8(MMA8451_REG_CTRL_REG1, 0x00);            // deactivate
  MMA8451_writeRegister8(MMA8451_REG_XYZ_DATA_CFG, (range & 0x3));  // | 0x10
 800e626:	f008 0803 	and.w	r8, r8, #3
 800e62a:	f803 8d02 	strb.w	r8, [r3, #-2]!
	HAL_I2C_Mem_Write(&hi2c2, _i2caddr<<1, reg, 1, &value, 1, 1);
 800e62e:	40a1      	lsls	r1, r4
 800e630:	e88d 0018 	stmia.w	sp, {r3, r4}
 800e634:	b289      	uxth	r1, r1
 800e636:	4623      	mov	r3, r4
 800e638:	4628      	mov	r0, r5
 800e63a:	220e      	movs	r2, #14
 800e63c:	f7f4 f90e 	bl	800285c <HAL_I2C_Mem_Write>
 800e640:	aa06      	add	r2, sp, #24
 800e642:	f996 1000 	ldrsb.w	r1, [r6]
 800e646:	9402      	str	r4, [sp, #8]
  MMA8451_writeRegister8(MMA8451_REG_CTRL_REG1, reg1 | 0x01);     // activate
 800e648:	4327      	orrs	r7, r4
 800e64a:	f802 7d03 	strb.w	r7, [r2, #-3]!
	HAL_I2C_Mem_Write(&hi2c2, _i2caddr<<1, reg, 1, &value, 1, 1);
 800e64e:	40a1      	lsls	r1, r4
 800e650:	9200      	str	r2, [sp, #0]
 800e652:	b289      	uxth	r1, r1
 800e654:	9401      	str	r4, [sp, #4]
 800e656:	4623      	mov	r3, r4
 800e658:	4628      	mov	r0, r5
 800e65a:	222a      	movs	r2, #42	; 0x2a
 800e65c:	f7f4 f8fe 	bl	800285c <HAL_I2C_Mem_Write>
}
 800e660:	b006      	add	sp, #24
 800e662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e666:	bf00      	nop
 800e668:	2000545c 	.word	0x2000545c
 800e66c:	20005aa8 	.word	0x20005aa8
 800e670:	2000549c 	.word	0x2000549c
 800e674:	20005478 	.word	0x20005478

0800e678 <accelerometerThread>:
void accelerometerThread(void){
 800e678:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800e67c:	b08b      	sub	sp, #44	; 0x2c
	  MMA8451_begin();
 800e67e:	f7ff fef1 	bl	800e464 <MMA8451_begin>
	  MMA8451_setRange(MMA8451_RANGE_4_G);
 800e682:	2001      	movs	r0, #1
 800e684:	f7ff ffa4 	bl	800e5d0 <MMA8451_setRange>
 800e688:	4f58      	ldr	r7, [pc, #352]	; (800e7ec <accelerometerThread+0x174>)
 800e68a:	4e59      	ldr	r6, [pc, #356]	; (800e7f0 <accelerometerThread+0x178>)
 800e68c:	4d59      	ldr	r5, [pc, #356]	; (800e7f4 <accelerometerThread+0x17c>)
 800e68e:	4c5a      	ldr	r4, [pc, #360]	; (800e7f8 <accelerometerThread+0x180>)
 800e690:	f8df b180 	ldr.w	fp, [pc, #384]	; 800e814 <accelerometerThread+0x19c>
 800e694:	f8df a180 	ldr.w	sl, [pc, #384]	; 800e818 <accelerometerThread+0x1a0>
 800e698:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800e81c <accelerometerThread+0x1a4>
 800e69c:	f8df 8180 	ldr.w	r8, [pc, #384]	; 800e820 <accelerometerThread+0x1a8>
  x_g = (float)x / 2048;
 800e6a0:	eddf 9a56 	vldr	s19, [pc, #344]	; 800e7fc <accelerometerThread+0x184>
	  osSemaphoreWait (accSampleSemaphoreHandle, osWaitForever);
 800e6a4:	4b56      	ldr	r3, [pc, #344]	; (800e800 <accelerometerThread+0x188>)
 800e6a6:	f04f 31ff 	mov.w	r1, #4294967295
 800e6aa:	6818      	ldr	r0, [r3, #0]
 800e6ac:	f7fd fb64 	bl	800bd78 <osSemaphoreWait>
	  HAL_I2C_Mem_Read_IT(&hi2c2, _i2caddr<<1, MMA8451_REG_OUT_X_MSB, 1, sample, 6);
 800e6b0:	4b54      	ldr	r3, [pc, #336]	; (800e804 <accelerometerThread+0x18c>)
 800e6b2:	4855      	ldr	r0, [pc, #340]	; (800e808 <accelerometerThread+0x190>)
 800e6b4:	f993 1000 	ldrsb.w	r1, [r3]
 800e6b8:	9700      	str	r7, [sp, #0]
 800e6ba:	2301      	movs	r3, #1
 800e6bc:	2206      	movs	r2, #6
 800e6be:	0049      	lsls	r1, r1, #1
 800e6c0:	b289      	uxth	r1, r1
 800e6c2:	9201      	str	r2, [sp, #4]
 800e6c4:	461a      	mov	r2, r3
 800e6c6:	f7f4 fbd1 	bl	8002e6c <HAL_I2C_Mem_Read_IT>
	  osDelay(10);
 800e6ca:	200a      	movs	r0, #10
 800e6cc:	f7fd fa9e 	bl	800bc0c <osDelay>
  x = sample[0]; x <<= 8; x |= sample[1]; x >>= 2;
 800e6d0:	783b      	ldrb	r3, [r7, #0]
 800e6d2:	8033      	strh	r3, [r6, #0]
 800e6d4:	8833      	ldrh	r3, [r6, #0]
 800e6d6:	7878      	ldrb	r0, [r7, #1]
  y = sample[2]; y <<= 8; y |= sample[3]; y >>= 2;
 800e6d8:	78b9      	ldrb	r1, [r7, #2]
 800e6da:	f897 e003 	ldrb.w	lr, [r7, #3]
  z = sample[4]; z <<= 8; z |= sample[5]; z >>= 2;
 800e6de:	793a      	ldrb	r2, [r7, #4]
  x = sample[0]; x <<= 8; x |= sample[1]; x >>= 2;
 800e6e0:	b25b      	sxtb	r3, r3
 800e6e2:	021b      	lsls	r3, r3, #8
 800e6e4:	8033      	strh	r3, [r6, #0]
 800e6e6:	8833      	ldrh	r3, [r6, #0]
 800e6e8:	b21b      	sxth	r3, r3
 800e6ea:	4303      	orrs	r3, r0
 800e6ec:	8033      	strh	r3, [r6, #0]
 800e6ee:	8833      	ldrh	r3, [r6, #0]
  z = sample[4]; z <<= 8; z |= sample[5]; z >>= 2;
 800e6f0:	7978      	ldrb	r0, [r7, #5]
  x = sample[0]; x <<= 8; x |= sample[1]; x >>= 2;
 800e6f2:	f343 038d 	sbfx	r3, r3, #2, #14
 800e6f6:	8033      	strh	r3, [r6, #0]
  y = sample[2]; y <<= 8; y |= sample[3]; y >>= 2;
 800e6f8:	8029      	strh	r1, [r5, #0]
 800e6fa:	882b      	ldrh	r3, [r5, #0]


float calculateAngle(float x_g, float y_g, float z_g){
	float accVector[] = {x_g, y_g, z_g};

	arm_dot_prod_f32(accVector,gravityVector,3,&dotProd);
 800e6fc:	4943      	ldr	r1, [pc, #268]	; (800e80c <accelerometerThread+0x194>)
  y = sample[2]; y <<= 8; y |= sample[3]; y >>= 2;
 800e6fe:	b25b      	sxtb	r3, r3
 800e700:	021b      	lsls	r3, r3, #8
 800e702:	802b      	strh	r3, [r5, #0]
 800e704:	882b      	ldrh	r3, [r5, #0]
 800e706:	b21b      	sxth	r3, r3
 800e708:	ea43 030e 	orr.w	r3, r3, lr
 800e70c:	802b      	strh	r3, [r5, #0]
 800e70e:	882b      	ldrh	r3, [r5, #0]
 800e710:	f343 038d 	sbfx	r3, r3, #2, #14
 800e714:	802b      	strh	r3, [r5, #0]
  z = sample[4]; z <<= 8; z |= sample[5]; z >>= 2;
 800e716:	8022      	strh	r2, [r4, #0]
 800e718:	8822      	ldrh	r2, [r4, #0]
 800e71a:	b252      	sxtb	r2, r2
 800e71c:	0212      	lsls	r2, r2, #8
 800e71e:	8022      	strh	r2, [r4, #0]
 800e720:	8823      	ldrh	r3, [r4, #0]
 800e722:	b21b      	sxth	r3, r3
 800e724:	4303      	orrs	r3, r0
 800e726:	8023      	strh	r3, [r4, #0]
 800e728:	8823      	ldrh	r3, [r4, #0]
 800e72a:	f343 038d 	sbfx	r3, r3, #2, #14
 800e72e:	8023      	strh	r3, [r4, #0]
  x_g = (float)x / 2048;
 800e730:	8833      	ldrh	r3, [r6, #0]
 800e732:	b21b      	sxth	r3, r3
 800e734:	ee07 3a90 	vmov	s15, r3
 800e738:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	arm_dot_prod_f32(accVector,gravityVector,3,&dotProd);
 800e73c:	2203      	movs	r2, #3
  x_g = (float)x / 2048;
 800e73e:	ee67 7aa9 	vmul.f32	s15, s15, s19
	arm_dot_prod_f32(accVector,gravityVector,3,&dotProd);
 800e742:	4b33      	ldr	r3, [pc, #204]	; (800e810 <accelerometerThread+0x198>)
  x_g = (float)x / 2048;
 800e744:	edcb 7a00 	vstr	s15, [fp]
  y_g = (float)y / 2048;
 800e748:	8828      	ldrh	r0, [r5, #0]
 800e74a:	b200      	sxth	r0, r0
 800e74c:	ee07 0a90 	vmov	s15, r0
 800e750:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	arm_dot_prod_f32(accVector,gravityVector,3,&dotProd);
 800e754:	a807      	add	r0, sp, #28
  y_g = (float)y / 2048;
 800e756:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800e75a:	edca 7a00 	vstr	s15, [sl]
  z_g = (float)z / 2048;
 800e75e:	f8b4 e000 	ldrh.w	lr, [r4]
 800e762:	fa0f fe8e 	sxth.w	lr, lr
 800e766:	ee07 ea90 	vmov	s15, lr
 800e76a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e76e:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800e772:	edc9 7a00 	vstr	s15, [r9]
	  angle = calculateAngle(x_g, y_g, z_g);
 800e776:	ed9b 9a00 	vldr	s18, [fp]
 800e77a:	ed9a 8a00 	vldr	s16, [sl]
 800e77e:	edd9 8a00 	vldr	s17, [r9]
	float accVector[] = {x_g, y_g, z_g};
 800e782:	ed8d 8a08 	vstr	s16, [sp, #32]

	return (float) acos(dotProd/ ( sqrt(x_g*x_g + y_g*y_g + z_g*z_g)));
 800e786:	ee28 8a08 	vmul.f32	s16, s16, s16
	float accVector[] = {x_g, y_g, z_g};
 800e78a:	ed8d 9a07 	vstr	s18, [sp, #28]
	return (float) acos(dotProd/ ( sqrt(x_g*x_g + y_g*y_g + z_g*z_g)));
 800e78e:	eea9 8a09 	vfma.f32	s16, s18, s18
	float accVector[] = {x_g, y_g, z_g};
 800e792:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
	return (float) acos(dotProd/ ( sqrt(x_g*x_g + y_g*y_g + z_g*z_g)));
 800e796:	eea8 8aa8 	vfma.f32	s16, s17, s17
	arm_dot_prod_f32(accVector,gravityVector,3,&dotProd);
 800e79a:	f006 fe0d 	bl	80153b8 <arm_dot_prod_f32>
	return (float) acos(dotProd/ ( sqrt(x_g*x_g + y_g*y_g + z_g*z_g)));
 800e79e:	4b1c      	ldr	r3, [pc, #112]	; (800e810 <accelerometerThread+0x198>)
 800e7a0:	ee18 0a10 	vmov	r0, s16
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	9305      	str	r3, [sp, #20]
 800e7a8:	f7f1 fe8e 	bl	80004c8 <__aeabi_f2d>
 800e7ac:	ec41 0b10 	vmov	d0, r0, r1
 800e7b0:	f006 ffc2 	bl	8015738 <sqrt>
 800e7b4:	9b05      	ldr	r3, [sp, #20]
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e7bc:	f7f1 fe84 	bl	80004c8 <__aeabi_f2d>
 800e7c0:	ed9d 0b02 	vldr	d0, [sp, #8]
 800e7c4:	ec53 2b10 	vmov	r2, r3, d0
 800e7c8:	f7f1 fffc 	bl	80007c4 <__aeabi_ddiv>
 800e7cc:	ec41 0b10 	vmov	d0, r0, r1
 800e7d0:	f006 ff5a 	bl	8015688 <acos>
 800e7d4:	ec51 0b10 	vmov	r0, r1, d0
 800e7d8:	f7f2 f9c2 	bl	8000b60 <__aeabi_d2f>
	  angle = calculateAngle(x_g, y_g, z_g);
 800e7dc:	f8c8 0000 	str.w	r0, [r8]
	  setCutoffFreq(angle);
 800e7e0:	ed98 0a00 	vldr	s0, [r8]
 800e7e4:	f000 fc88 	bl	800f0f8 <setCutoffFreq>
 800e7e8:	e75c      	b.n	800e6a4 <accelerometerThread+0x2c>
 800e7ea:	bf00      	nop
 800e7ec:	2000549c 	.word	0x2000549c
 800e7f0:	2000544c 	.word	0x2000544c
 800e7f4:	20005480 	.word	0x20005480
 800e7f8:	20005464 	.word	0x20005464
 800e7fc:	3a000000 	.word	0x3a000000
 800e800:	20005458 	.word	0x20005458
 800e804:	2000545c 	.word	0x2000545c
 800e808:	20005aa8 	.word	0x20005aa8
 800e80c:	080171a8 	.word	0x080171a8
 800e810:	20005460 	.word	0x20005460
 800e814:	20005484 	.word	0x20005484
 800e818:	200054a4 	.word	0x200054a4
 800e81c:	20005494 	.word	0x20005494
 800e820:	20005470 	.word	0x20005470

0800e824 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800e824:	b530      	push	{r4, r5, lr}
  ADC_ChannelConfTypeDef sConfig = {0};

  /**Common config 
  */
  hadc1.Instance = ADC1;
 800e826:	4a1c      	ldr	r2, [pc, #112]	; (800e898 <MX_ADC1_Init+0x74>)
 800e828:	4b1c      	ldr	r3, [pc, #112]	; (800e89c <MX_ADC1_Init+0x78>)
 800e82a:	6013      	str	r3, [r2, #0]
{
 800e82c:	b087      	sub	sp, #28
  ADC_ChannelConfTypeDef sConfig = {0};
 800e82e:	2300      	movs	r3, #0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e830:	2404      	movs	r4, #4
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
 800e832:	2101      	movs	r1, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.OversamplingMode = DISABLE;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800e834:	4610      	mov	r0, r2
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e836:	6154      	str	r4, [r2, #20]
  hadc1.Init.NbrOfConversion = 1;
 800e838:	61d1      	str	r1, [r2, #28]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800e83a:	6053      	str	r3, [r2, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 800e83c:	9300      	str	r3, [sp, #0]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800e83e:	6093      	str	r3, [r2, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e840:	60d3      	str	r3, [r2, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800e842:	6113      	str	r3, [r2, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800e844:	7613      	strb	r3, [r2, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800e846:	7653      	strb	r3, [r2, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800e848:	f882 3020 	strb.w	r3, [r2, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800e84c:	6293      	str	r3, [r2, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800e84e:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800e850:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800e854:	6353      	str	r3, [r2, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800e856:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
  ADC_ChannelConfTypeDef sConfig = {0};
 800e85a:	9301      	str	r3, [sp, #4]
 800e85c:	9302      	str	r3, [sp, #8]
 800e85e:	9303      	str	r3, [sp, #12]
 800e860:	9304      	str	r3, [sp, #16]
 800e862:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800e864:	f7f2 fb84 	bl	8000f70 <HAL_ADC_Init>
 800e868:	b998      	cbnz	r0, 800e892 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
  }
  /**Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800e86a:	4b0d      	ldr	r3, [pc, #52]	; (800e8a0 <MX_ADC1_Init+0x7c>)
 800e86c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800e86e:	2506      	movs	r5, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800e870:	2300      	movs	r3, #0
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800e872:	247f      	movs	r4, #127	; 0x7f
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800e874:	2204      	movs	r2, #4
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e876:	4669      	mov	r1, sp
 800e878:	4807      	ldr	r0, [pc, #28]	; (800e898 <MX_ADC1_Init+0x74>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800e87a:	9501      	str	r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800e87c:	9302      	str	r3, [sp, #8]
  sConfig.Offset = 0;
 800e87e:	9305      	str	r3, [sp, #20]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800e880:	9403      	str	r4, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800e882:	9204      	str	r2, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e884:	f7f2 fc52 	bl	800112c <HAL_ADC_ConfigChannel>
 800e888:	b108      	cbz	r0, 800e88e <MX_ADC1_Init+0x6a>
  {
    Error_Handler();
 800e88a:	f002 f955 	bl	8010b38 <Error_Handler>
  }

}
 800e88e:	b007      	add	sp, #28
 800e890:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 800e892:	f002 f951 	bl	8010b38 <Error_Handler>
 800e896:	e7e8      	b.n	800e86a <MX_ADC1_Init+0x46>
 800e898:	200054a8 	.word	0x200054a8
 800e89c:	50040000 	.word	0x50040000
 800e8a0:	0c900008 	.word	0x0c900008

0800e8a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800e8a4:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 800e8a6:	6801      	ldr	r1, [r0, #0]
 800e8a8:	4a15      	ldr	r2, [pc, #84]	; (800e900 <HAL_ADC_MspInit+0x5c>)
{
 800e8aa:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e8ac:	2300      	movs	r3, #0
  if(adcHandle->Instance==ADC1)
 800e8ae:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e8b0:	9304      	str	r3, [sp, #16]
 800e8b2:	9303      	str	r3, [sp, #12]
 800e8b4:	9305      	str	r3, [sp, #20]
 800e8b6:	9306      	str	r3, [sp, #24]
 800e8b8:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 800e8ba:	d001      	beq.n	800e8c0 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800e8bc:	b008      	add	sp, #32
 800e8be:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 800e8c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e8c4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(HALL_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 800e8c8:	480e      	ldr	r0, [pc, #56]	; (800e904 <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC_CLK_ENABLE();
 800e8ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e8cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e8d0:	64da      	str	r2, [r3, #76]	; 0x4c
 800e8d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e8d4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800e8d8:	9201      	str	r2, [sp, #4]
 800e8da:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e8dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e8de:	f042 0204 	orr.w	r2, r2, #4
 800e8e2:	64da      	str	r2, [r3, #76]	; 0x4c
 800e8e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e8e6:	f003 0304 	and.w	r3, r3, #4
 800e8ea:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = HALL_OUTPUT_Pin;
 800e8ec:	2204      	movs	r2, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e8ee:	2303      	movs	r3, #3
    HAL_GPIO_Init(HALL_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 800e8f0:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e8f2:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Pin = HALL_OUTPUT_Pin;
 800e8f4:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e8f6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(HALL_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 800e8f8:	f7f3 fb6c 	bl	8001fd4 <HAL_GPIO_Init>
}
 800e8fc:	b008      	add	sp, #32
 800e8fe:	bd10      	pop	{r4, pc}
 800e900:	50040000 	.word	0x50040000
 800e904:	48000800 	.word	0x48000800

0800e908 <Setup_Cap_Touch>:

uint8_t packet;
const uint8_t packet_null = 0x00;

/**************** functions ***************************/
void Setup_Cap_Touch(void){
 800e908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}


	// ungroup all CAP sensors to work individually
	packet = 0x02;
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, CNFG_REG_4, 1, &packet, 1, 100);
 800e90c:	4e21      	ldr	r6, [pc, #132]	; (800e994 <Setup_Cap_Touch+0x8c>)
	packet = 0x02;
 800e90e:	4c22      	ldr	r4, [pc, #136]	; (800e998 <Setup_Cap_Touch+0x90>)
void Setup_Cap_Touch(void){
 800e910:	b084      	sub	sp, #16
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, CNFG_REG_4, 1, &packet, 1, 100);
 800e912:	2501      	movs	r5, #1
 800e914:	2764      	movs	r7, #100	; 0x64
	packet = 0x02;
 800e916:	f04f 0e02 	mov.w	lr, #2
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, CNFG_REG_4, 1, &packet, 1, 100);
 800e91a:	462b      	mov	r3, r5
 800e91c:	9400      	str	r4, [sp, #0]
 800e91e:	4630      	mov	r0, r6
 800e920:	9702      	str	r7, [sp, #8]
 800e922:	9501      	str	r5, [sp, #4]
 800e924:	2240      	movs	r2, #64	; 0x40
 800e926:	2150      	movs	r1, #80	; 0x50
	packet = 0x02;
 800e928:	f884 e000 	strb.w	lr, [r4]
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, CNFG_REG_4, 1, &packet, 1, 100);
 800e92c:	f7f3 ff96 	bl	800285c <HAL_I2C_Mem_Write>

	// device will not block multiple touches
	packet = 0x04;
 800e930:	f04f 0e04 	mov.w	lr, #4
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, MULT_TOUCH_REG, 1, &packet, 1, 100);
 800e934:	462b      	mov	r3, r5
 800e936:	e88d 00b0 	stmia.w	sp, {r4, r5, r7}
 800e93a:	4630      	mov	r0, r6
 800e93c:	222a      	movs	r2, #42	; 0x2a
 800e93e:	2150      	movs	r1, #80	; 0x50
	packet = 0x04;
 800e940:	f884 e000 	strb.w	lr, [r4]

	// disable auto-calibration
	packet = 0x00;
 800e944:	f04f 0800 	mov.w	r8, #0
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, MULT_TOUCH_REG, 1, &packet, 1, 100);
 800e948:	f7f3 ff88 	bl	800285c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, CALIBRATION_REG, 1, &packet, 1, 100);
 800e94c:	462b      	mov	r3, r5
 800e94e:	e88d 00b0 	stmia.w	sp, {r4, r5, r7}
 800e952:	4630      	mov	r0, r6
 800e954:	2225      	movs	r2, #37	; 0x25
 800e956:	2150      	movs	r1, #80	; 0x50
	packet = 0x00;
 800e958:	f884 8000 	strb.w	r8, [r4]
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, CALIBRATION_REG, 1, &packet, 1, 100);
 800e95c:	f7f3 ff7e 	bl	800285c <HAL_I2C_Mem_Write>

	// sensitivity control
	packet = 0x7F & 0xFF;
 800e960:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, DATA_SENS_REG, 1, &packet, 1, 100);
 800e964:	462b      	mov	r3, r5
 800e966:	e88d 00b0 	stmia.w	sp, {r4, r5, r7}
 800e96a:	4630      	mov	r0, r6
 800e96c:	221f      	movs	r2, #31
 800e96e:	2150      	movs	r1, #80	; 0x50
	packet = 0x7F & 0xFF;
 800e970:	f884 e000 	strb.w	lr, [r4]
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, DATA_SENS_REG, 1, &packet, 1, 100);
 800e974:	f7f3 ff72 	bl	800285c <HAL_I2C_Mem_Write>
	// setting button 1 threshold sets all
//	packet = 0x93 | 0x40;
//	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, RECAL_REG, 1, &packet, 1, 100);

	packet = 0x00;
    HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, MAIN_STATUS, 1, &packet, 1, 100);
 800e978:	e88d 00b0 	stmia.w	sp, {r4, r5, r7}
 800e97c:	462b      	mov	r3, r5
 800e97e:	4630      	mov	r0, r6
 800e980:	4642      	mov	r2, r8
 800e982:	2150      	movs	r1, #80	; 0x50
	packet = 0x00;
 800e984:	f884 8000 	strb.w	r8, [r4]
    HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, MAIN_STATUS, 1, &packet, 1, 100);
 800e988:	f7f3 ff68 	bl	800285c <HAL_I2C_Mem_Write>
//		packet = 0x00;
//		HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, 0x00, 1, &packet, 1, 1);
//
//		HAL_I2C_Mem_Read(&hi2c1, CAP1214_ADDR<<1, SENSOR_1_DELTA_CNT, 1, &temp, 14, 1);
//	}
}
 800e98c:	b004      	add	sp, #16
 800e98e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e992:	bf00      	nop
 800e994:	20005a5c 	.word	0x20005a5c
 800e998:	20005512 	.word	0x20005512

0800e99c <capGiveSemaphore>:
void Reset_Cap_INT(void){
	HAL_I2C_Mem_Write_IT(&hi2c1, CAP1214_ADDR<<1, 0x00, 1, &packet_null, 1);
}

void capGiveSemaphore(void){
  osSemaphoreRelease (capSampleSemaphoreHandle);
 800e99c:	4b01      	ldr	r3, [pc, #4]	; (800e9a4 <capGiveSemaphore+0x8>)
 800e99e:	6818      	ldr	r0, [r3, #0]
 800e9a0:	f7fd ba12 	b.w	800bdc8 <osSemaphoreRelease>
 800e9a4:	20005534 	.word	0x20005534

0800e9a8 <Sample_Cap_Touch>:
}

//// reads cap touch sense binary values from CAP1214 IC and
////    turns on corresponding LEDs
void Sample_Cap_Touch(void){
 800e9a8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
//  uint8_t start_DMA = 0;
//  uint8_t start_DMA_2 = 0;

  //Reset_Cap_INT();

  switchOctave(4);
 800e9ac:	2004      	movs	r0, #4
void Sample_Cap_Touch(void){
 800e9ae:	b083      	sub	sp, #12
  switchOctave(4);
 800e9b0:	f003 ff22 	bl	80127f8 <switchOctave>
 800e9b4:	f8df 936c 	ldr.w	r9, [pc, #876]	; 800ed24 <Sample_Cap_Touch+0x37c>
 800e9b8:	f8df 836c 	ldr.w	r8, [pc, #876]	; 800ed28 <Sample_Cap_Touch+0x380>
 800e9bc:	4dd6      	ldr	r5, [pc, #856]	; (800ed18 <Sample_Cap_Touch+0x370>)
 800e9be:	f8df a36c 	ldr.w	sl, [pc, #876]	; 800ed2c <Sample_Cap_Touch+0x384>
	HAL_I2C_Mem_Write_IT(&hi2c1, CAP1214_ADDR<<1, 0x00, 1, &packet_null, 1);
 800e9c2:	4ed6      	ldr	r6, [pc, #856]	; (800ed1c <Sample_Cap_Touch+0x374>)
 800e9c4:	2701      	movs	r7, #1
 800e9c6:	2301      	movs	r3, #1
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	2150      	movs	r1, #80	; 0x50
 800e9cc:	9701      	str	r7, [sp, #4]
 800e9ce:	f8cd 9000 	str.w	r9, [sp]
 800e9d2:	4630      	mov	r0, r6
 800e9d4:	f7f4 f99c 	bl	8002d10 <HAL_I2C_Mem_Write_IT>
	HAL_I2C_Mem_Read_IT(&hi2c1, CAP1214_ADDR<<1, 0x03, 1, cap_read, 2);
 800e9d8:	2402      	movs	r4, #2
#endif
    Reset_Cap_INT();
#ifdef DEBUG_PRINT
  HAL_UART_Transmit(&huart3, " passed\n\r", sizeof(" passed\n\r"), 100);
#endif
    osSemaphoreWait (capSampleSemaphoreHandle, osWaitForever);
 800e9da:	f04f 31ff 	mov.w	r1, #4294967295
 800e9de:	f8d8 0000 	ldr.w	r0, [r8]
 800e9e2:	f7fd f9c9 	bl	800bd78 <osSemaphoreWait>
	HAL_I2C_Mem_Read_IT(&hi2c1, CAP1214_ADDR<<1, 0x03, 1, cap_read, 2);
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	2203      	movs	r2, #3
 800e9ea:	2150      	movs	r1, #80	; 0x50
 800e9ec:	9500      	str	r5, [sp, #0]
 800e9ee:	9401      	str	r4, [sp, #4]
 800e9f0:	4630      	mov	r0, r6
 800e9f2:	f7f4 fa3b 	bl	8002e6c <HAL_I2C_Mem_Read_IT>
#ifdef DEBUG_PRINT
  HAL_UART_Transmit(&huart3, "start_cap\n\r", sizeof("start_cap\n\r"), 100);
#endif
    //taskENTER_CRITICAL();
    Read_Cap_Touch();
    osDelay(2);
 800e9f6:	4620      	mov	r0, r4
 800e9f8:	f7fd f908 	bl	800bc0c <osDelay>
#ifdef DEBUG_PRINT
  HAL_UART_Transmit(&huart3, "i2c sample passed\n\r", sizeof("i2c sample passed\n\r"), 100);
#endif

    if(isButtonEnabled() == 1){
 800e9fc:	f002 fbee 	bl	80111dc <isButtonEnabled>
 800ea00:	2801      	cmp	r0, #1
 800ea02:	4683      	mov	fp, r0
 800ea04:	d1df      	bne.n	800e9c6 <Sample_Cap_Touch+0x1e>
//	      if(LED_State(CAP_12_LED_PORT, CAP_12_LED_PIN)){
//		      Set_LED(CAP_12_LED_PORT, CAP_12_LED_PIN, 0);
//	      }
//      }

      if( (cap_read[KEY_1_PORT] & KEY_1_PIN) == KEY_1_PIN){
 800ea06:	782c      	ldrb	r4, [r5, #0]
 800ea08:	f014 0402 	ands.w	r4, r4, #2
	  if( LED_State(CAP_1_LED_PORT, CAP_1_LED_PIN) != 1 ){
 800ea0c:	f04f 0120 	mov.w	r1, #32
 800ea10:	f04f 0003 	mov.w	r0, #3
      if( (cap_read[KEY_1_PORT] & KEY_1_PIN) == KEY_1_PIN){
 800ea14:	f000 81c4 	beq.w	800eda0 <Sample_Cap_Touch+0x3f8>
	  if( LED_State(CAP_1_LED_PORT, CAP_1_LED_PIN) != 1 ){
 800ea18:	f001 fe4c 	bl	80106b4 <LED_State>
 800ea1c:	2801      	cmp	r0, #1
 800ea1e:	d007      	beq.n	800ea30 <Sample_Cap_Touch+0x88>
	      nullTracker(1);
 800ea20:	4658      	mov	r0, fp
 800ea22:	f006 fa9d 	bl	8014f60 <nullTracker>
	      Set_LED_Setting(CAP_1_LED_PORT, CAP_1_LED_PIN, 1);
 800ea26:	465a      	mov	r2, fp
 800ea28:	2120      	movs	r1, #32
 800ea2a:	2003      	movs	r0, #3
 800ea2c:	f001 fe32 	bl	8010694 <Set_LED_Setting>
		  resetFrequencyInd(1);
		  Set_LED_Setting(CAP_1_LED_PORT, CAP_1_LED_PIN, 0);
	      }
      }

      if( (cap_read[KEY_2_PORT] & KEY_2_PIN) == KEY_2_PIN){
 800ea30:	782a      	ldrb	r2, [r5, #0]
 800ea32:	f012 0404 	ands.w	r4, r2, #4
	  if( LED_State(CAP_2_LED_PORT, CAP_2_LED_PIN) != 1 ){
 800ea36:	f04f 0110 	mov.w	r1, #16
 800ea3a:	f04f 0003 	mov.w	r0, #3
      if( (cap_read[KEY_2_PORT] & KEY_2_PIN) == KEY_2_PIN){
 800ea3e:	f000 81a1 	beq.w	800ed84 <Sample_Cap_Touch+0x3dc>
	  if( LED_State(CAP_2_LED_PORT, CAP_2_LED_PIN) != 1 ){
 800ea42:	f001 fe37 	bl	80106b4 <LED_State>
 800ea46:	2801      	cmp	r0, #1
 800ea48:	d007      	beq.n	800ea5a <Sample_Cap_Touch+0xb2>
	  nullTracker(2);
 800ea4a:	2002      	movs	r0, #2
 800ea4c:	f006 fa88 	bl	8014f60 <nullTracker>
	  Set_LED_Setting(CAP_2_LED_PORT, CAP_2_LED_PIN, 1);
 800ea50:	2201      	movs	r2, #1
 800ea52:	2110      	movs	r1, #16
 800ea54:	2003      	movs	r0, #3
 800ea56:	f001 fe1d 	bl	8010694 <Set_LED_Setting>
		  resetFrequencyInd(2);
		  Set_LED_Setting(CAP_2_LED_PORT, CAP_2_LED_PIN, 0);
	      }
      }

      if( (cap_read[KEY_3_PORT] & KEY_3_PIN) == KEY_3_PIN){
 800ea5a:	782a      	ldrb	r2, [r5, #0]
 800ea5c:	f012 0408 	ands.w	r4, r2, #8
	  if( LED_State(CAP_3_LED_PORT, CAP_3_LED_PIN) != 1 ){
 800ea60:	f04f 0108 	mov.w	r1, #8
 800ea64:	f04f 0003 	mov.w	r0, #3
      if( (cap_read[KEY_3_PORT] & KEY_3_PIN) == KEY_3_PIN){
 800ea68:	f000 817e 	beq.w	800ed68 <Sample_Cap_Touch+0x3c0>
	  if( LED_State(CAP_3_LED_PORT, CAP_3_LED_PIN) != 1 ){
 800ea6c:	f001 fe22 	bl	80106b4 <LED_State>
 800ea70:	2801      	cmp	r0, #1
 800ea72:	d007      	beq.n	800ea84 <Sample_Cap_Touch+0xdc>
	  	  nullTracker(3);
 800ea74:	2003      	movs	r0, #3
 800ea76:	f006 fa73 	bl	8014f60 <nullTracker>
	  Set_LED_Setting(CAP_3_LED_PORT, CAP_3_LED_PIN, 1);
 800ea7a:	2201      	movs	r2, #1
 800ea7c:	2108      	movs	r1, #8
 800ea7e:	2003      	movs	r0, #3
 800ea80:	f001 fe08 	bl	8010694 <Set_LED_Setting>
		  resetFrequencyInd(3);
		  Set_LED_Setting(CAP_3_LED_PORT, CAP_3_LED_PIN, 0);
	      }
      }

      if( (cap_read[KEY_4_PORT] & KEY_4_PIN) == KEY_4_PIN){
 800ea84:	782a      	ldrb	r2, [r5, #0]
 800ea86:	f012 0410 	ands.w	r4, r2, #16
	  if( LED_State(CAP_4_LED_PORT, CAP_4_LED_PIN) != 1 ){
 800ea8a:	f04f 0104 	mov.w	r1, #4
 800ea8e:	f04f 0003 	mov.w	r0, #3
      if( (cap_read[KEY_4_PORT] & KEY_4_PIN) == KEY_4_PIN){
 800ea92:	f000 815b 	beq.w	800ed4c <Sample_Cap_Touch+0x3a4>
	  if( LED_State(CAP_4_LED_PORT, CAP_4_LED_PIN) != 1 ){
 800ea96:	f001 fe0d 	bl	80106b4 <LED_State>
 800ea9a:	2801      	cmp	r0, #1
 800ea9c:	d007      	beq.n	800eaae <Sample_Cap_Touch+0x106>
	  	  nullTracker(4);
 800ea9e:	2004      	movs	r0, #4
 800eaa0:	f006 fa5e 	bl	8014f60 <nullTracker>
	  Set_LED_Setting(CAP_4_LED_PORT, CAP_4_LED_PIN, 1);
 800eaa4:	2201      	movs	r2, #1
 800eaa6:	2104      	movs	r1, #4
 800eaa8:	2003      	movs	r0, #3
 800eaaa:	f001 fdf3 	bl	8010694 <Set_LED_Setting>
		  resetFrequencyInd(4);
		  Set_LED_Setting(CAP_4_LED_PORT, CAP_4_LED_PIN, 0);
	      }
      }

      if( (cap_read[KEY_5_PORT] & KEY_5_PIN) == KEY_5_PIN){
 800eaae:	782a      	ldrb	r2, [r5, #0]
 800eab0:	f012 0420 	ands.w	r4, r2, #32
	  if( LED_State(CAP_5_LED_PORT, CAP_5_LED_PIN) != 1 ){
 800eab4:	f04f 0102 	mov.w	r1, #2
 800eab8:	f04f 0003 	mov.w	r0, #3
      if( (cap_read[KEY_5_PORT] & KEY_5_PIN) == KEY_5_PIN){
 800eabc:	f000 8138 	beq.w	800ed30 <Sample_Cap_Touch+0x388>
	  if( LED_State(CAP_5_LED_PORT, CAP_5_LED_PIN) != 1 ){
 800eac0:	f001 fdf8 	bl	80106b4 <LED_State>
 800eac4:	2801      	cmp	r0, #1
 800eac6:	d007      	beq.n	800ead8 <Sample_Cap_Touch+0x130>
	  	  nullTracker(5);
 800eac8:	2005      	movs	r0, #5
 800eaca:	f006 fa49 	bl	8014f60 <nullTracker>
	  Set_LED_Setting(CAP_5_LED_PORT, CAP_5_LED_PIN, 1);
 800eace:	2201      	movs	r2, #1
 800ead0:	2102      	movs	r1, #2
 800ead2:	2003      	movs	r0, #3
 800ead4:	f001 fdde 	bl	8010694 <Set_LED_Setting>
		  resetFrequencyInd(5);
		  Set_LED_Setting(CAP_5_LED_PORT, CAP_5_LED_PIN, 0);
	      }
      }

      if( (cap_read[KEY_6_PORT] & KEY_6_PIN) == KEY_6_PIN){
 800ead8:	786a      	ldrb	r2, [r5, #1]
 800eada:	f012 0401 	ands.w	r4, r2, #1
	  if( LED_State(CAP_6_LED_PORT, CAP_6_LED_PIN) != 1 ){
 800eade:	f04f 0101 	mov.w	r1, #1
 800eae2:	f04f 0003 	mov.w	r0, #3
      if( (cap_read[KEY_6_PORT] & KEY_6_PIN) == KEY_6_PIN){
 800eae6:	f000 8109 	beq.w	800ecfc <Sample_Cap_Touch+0x354>
	  if( LED_State(CAP_6_LED_PORT, CAP_6_LED_PIN) != 1 ){
 800eaea:	f001 fde3 	bl	80106b4 <LED_State>
 800eaee:	2801      	cmp	r0, #1
 800eaf0:	d007      	beq.n	800eb02 <Sample_Cap_Touch+0x15a>
	  	  nullTracker(6);
 800eaf2:	2006      	movs	r0, #6
 800eaf4:	f006 fa34 	bl	8014f60 <nullTracker>
	  Set_LED_Setting(CAP_6_LED_PORT, CAP_6_LED_PIN, 1);
 800eaf8:	2201      	movs	r2, #1
 800eafa:	4611      	mov	r1, r2
 800eafc:	2003      	movs	r0, #3
 800eafe:	f001 fdc9 	bl	8010694 <Set_LED_Setting>
		  resetFrequencyInd(6);
		  Set_LED_Setting(CAP_6_LED_PORT, CAP_6_LED_PIN, 0);
	      }
      }

      if( (cap_read[KEY_7_PORT] & KEY_7_PIN) == KEY_7_PIN){
 800eb02:	786a      	ldrb	r2, [r5, #1]
 800eb04:	f012 0402 	ands.w	r4, r2, #2
	  if( LED_State(CAP_7_LED_PORT, CAP_7_LED_PIN) != 1 ){
 800eb08:	f04f 0180 	mov.w	r1, #128	; 0x80
 800eb0c:	f04f 0002 	mov.w	r0, #2
      if( (cap_read[KEY_7_PORT] & KEY_7_PIN) == KEY_7_PIN){
 800eb10:	f000 80e6 	beq.w	800ece0 <Sample_Cap_Touch+0x338>
	  if( LED_State(CAP_7_LED_PORT, CAP_7_LED_PIN) != 1 ){
 800eb14:	f001 fdce 	bl	80106b4 <LED_State>
 800eb18:	2801      	cmp	r0, #1
 800eb1a:	d007      	beq.n	800eb2c <Sample_Cap_Touch+0x184>
	  	  nullTracker(7);
 800eb1c:	2007      	movs	r0, #7
 800eb1e:	f006 fa1f 	bl	8014f60 <nullTracker>
	  Set_LED_Setting(CAP_7_LED_PORT, CAP_7_LED_PIN, 1);
 800eb22:	2201      	movs	r2, #1
 800eb24:	2180      	movs	r1, #128	; 0x80
 800eb26:	2002      	movs	r0, #2
 800eb28:	f001 fdb4 	bl	8010694 <Set_LED_Setting>
		  resetFrequencyInd(7);
		  Set_LED_Setting(CAP_7_LED_PORT, CAP_7_LED_PIN, 0);
	      }
      }

      if( (cap_read[KEY_8_PORT] & KEY_8_PIN) == KEY_8_PIN){
 800eb2c:	786a      	ldrb	r2, [r5, #1]
 800eb2e:	f012 0404 	ands.w	r4, r2, #4
	  if( LED_State(CAP_8_LED_PORT, CAP_8_LED_PIN) != 1 ){
 800eb32:	f04f 0140 	mov.w	r1, #64	; 0x40
 800eb36:	f04f 0002 	mov.w	r0, #2
      if( (cap_read[KEY_8_PORT] & KEY_8_PIN) == KEY_8_PIN){
 800eb3a:	f000 80c3 	beq.w	800ecc4 <Sample_Cap_Touch+0x31c>
	  if( LED_State(CAP_8_LED_PORT, CAP_8_LED_PIN) != 1 ){
 800eb3e:	f001 fdb9 	bl	80106b4 <LED_State>
 800eb42:	2801      	cmp	r0, #1
 800eb44:	d007      	beq.n	800eb56 <Sample_Cap_Touch+0x1ae>
	  	  nullTracker(8);
 800eb46:	2008      	movs	r0, #8
 800eb48:	f006 fa0a 	bl	8014f60 <nullTracker>
	  Set_LED_Setting(CAP_8_LED_PORT, CAP_8_LED_PIN, 1);
 800eb4c:	2201      	movs	r2, #1
 800eb4e:	2140      	movs	r1, #64	; 0x40
 800eb50:	2002      	movs	r0, #2
 800eb52:	f001 fd9f 	bl	8010694 <Set_LED_Setting>
		  resetFrequencyInd(8);
		  Set_LED_Setting(CAP_8_LED_PORT, CAP_8_LED_PIN, 0);
	      }
      }

      if( (cap_read[KEY_9_PORT] & KEY_9_PIN) == KEY_9_PIN){
 800eb56:	786a      	ldrb	r2, [r5, #1]
 800eb58:	f012 0408 	ands.w	r4, r2, #8
	  if( LED_State(CAP_9_LED_PORT, CAP_9_LED_PIN) != 1 ){
 800eb5c:	f04f 0120 	mov.w	r1, #32
 800eb60:	f04f 0002 	mov.w	r0, #2
      if( (cap_read[KEY_9_PORT] & KEY_9_PIN) == KEY_9_PIN){
 800eb64:	f000 8093 	beq.w	800ec8e <Sample_Cap_Touch+0x2e6>
	  if( LED_State(CAP_9_LED_PORT, CAP_9_LED_PIN) != 1 ){
 800eb68:	f001 fda4 	bl	80106b4 <LED_State>
 800eb6c:	2801      	cmp	r0, #1
 800eb6e:	d007      	beq.n	800eb80 <Sample_Cap_Touch+0x1d8>
	  	  nullTracker(9);
 800eb70:	2009      	movs	r0, #9
 800eb72:	f006 f9f5 	bl	8014f60 <nullTracker>
	  Set_LED_Setting(CAP_9_LED_PORT, CAP_9_LED_PIN, 1);
 800eb76:	2201      	movs	r2, #1
 800eb78:	2120      	movs	r1, #32
 800eb7a:	2002      	movs	r0, #2
 800eb7c:	f001 fd8a 	bl	8010694 <Set_LED_Setting>
		  resetFrequencyInd(9);
		  Set_LED_Setting(CAP_9_LED_PORT, CAP_9_LED_PIN, 0);
	      }
      }

      if( (cap_read[KEY_10_PORT] & KEY_10_PIN) == KEY_10_PIN){
 800eb80:	786a      	ldrb	r2, [r5, #1]
 800eb82:	f012 0410 	ands.w	r4, r2, #16
	  if( LED_State(CAP_10_LED_PORT, CAP_10_LED_PIN) != 1 ){
 800eb86:	f04f 0110 	mov.w	r1, #16
 800eb8a:	f04f 0002 	mov.w	r0, #2
      if( (cap_read[KEY_10_PORT] & KEY_10_PIN) == KEY_10_PIN){
 800eb8e:	d071      	beq.n	800ec74 <Sample_Cap_Touch+0x2cc>
	  if( LED_State(CAP_10_LED_PORT, CAP_10_LED_PIN) != 1 ){
 800eb90:	f001 fd90 	bl	80106b4 <LED_State>
 800eb94:	2801      	cmp	r0, #1
 800eb96:	d007      	beq.n	800eba8 <Sample_Cap_Touch+0x200>
	  	  nullTracker(10);
 800eb98:	200a      	movs	r0, #10
 800eb9a:	f006 f9e1 	bl	8014f60 <nullTracker>
	  Set_LED_Setting(CAP_10_LED_PORT, CAP_10_LED_PIN, 1);
 800eb9e:	2201      	movs	r2, #1
 800eba0:	2110      	movs	r1, #16
 800eba2:	2002      	movs	r0, #2
 800eba4:	f001 fd76 	bl	8010694 <Set_LED_Setting>
		  resetFrequencyInd(10);
		  Set_LED_Setting(CAP_10_LED_PORT, CAP_10_LED_PIN, 0);
	      }
      }

      if( (cap_read[KEY_11_PORT] & KEY_11_PIN) == KEY_11_PIN){
 800eba8:	786a      	ldrb	r2, [r5, #1]
 800ebaa:	f012 0420 	ands.w	r4, r2, #32
	  if( LED_State(CAP_11_LED_PORT, CAP_11_LED_PIN) != 1 ){
 800ebae:	f04f 0108 	mov.w	r1, #8
 800ebb2:	f04f 0002 	mov.w	r0, #2
      if( (cap_read[KEY_11_PORT] & KEY_11_PIN) == KEY_11_PIN){
 800ebb6:	d078      	beq.n	800ecaa <Sample_Cap_Touch+0x302>
	  if( LED_State(CAP_11_LED_PORT, CAP_11_LED_PIN) != 1 ){
 800ebb8:	f001 fd7c 	bl	80106b4 <LED_State>
 800ebbc:	2801      	cmp	r0, #1
 800ebbe:	d007      	beq.n	800ebd0 <Sample_Cap_Touch+0x228>
	  	  nullTracker(11);
 800ebc0:	200b      	movs	r0, #11
 800ebc2:	f006 f9cd 	bl	8014f60 <nullTracker>
	  Set_LED_Setting(CAP_11_LED_PORT, CAP_11_LED_PIN, 1);
 800ebc6:	2201      	movs	r2, #1
 800ebc8:	2108      	movs	r1, #8
 800ebca:	2002      	movs	r0, #2
 800ebcc:	f001 fd62 	bl	8010694 <Set_LED_Setting>
		  resetFrequencyInd(11);
		  Set_LED_Setting(CAP_11_LED_PORT, CAP_11_LED_PIN, 0);
	      }
      }

      if( (cap_read[KEY_12_PORT] & KEY_12_PIN) == KEY_12_PIN){
 800ebd0:	786a      	ldrb	r2, [r5, #1]
 800ebd2:	f012 0440 	ands.w	r4, r2, #64	; 0x40
	  if( LED_State(CAP_12_LED_PORT, CAP_12_LED_PIN) != 1 ){
 800ebd6:	f04f 0104 	mov.w	r1, #4
 800ebda:	f04f 0002 	mov.w	r0, #2
      if( (cap_read[KEY_12_PORT] & KEY_12_PIN) == KEY_12_PIN){
 800ebde:	d023      	beq.n	800ec28 <Sample_Cap_Touch+0x280>
	  if( LED_State(CAP_12_LED_PORT, CAP_12_LED_PIN) != 1 ){
 800ebe0:	f001 fd68 	bl	80106b4 <LED_State>
 800ebe4:	2801      	cmp	r0, #1
 800ebe6:	d007      	beq.n	800ebf8 <Sample_Cap_Touch+0x250>
	  	  nullTracker(12);
 800ebe8:	200c      	movs	r0, #12
 800ebea:	f006 f9b9 	bl	8014f60 <nullTracker>
	  Set_LED_Setting(CAP_12_LED_PORT, CAP_12_LED_PIN, 1);
 800ebee:	2201      	movs	r2, #1
 800ebf0:	2104      	movs	r1, #4
 800ebf2:	2002      	movs	r0, #2
 800ebf4:	f001 fd4e 	bl	8010694 <Set_LED_Setting>
		  resetFrequencyInd(12);
		  Set_LED_Setting(CAP_12_LED_PORT, CAP_12_LED_PIN, 0);
	      }
      }

      transmitToBuffer();
 800ebf8:	f001 fc6e 	bl	80104d8 <transmitToBuffer>
      //taskEXIT_CRITICAL();

      if( (cap_read[LEFT_BUTTON_PORT] & LEFT_BUTTON_PIN) == LEFT_BUTTON_PIN){
 800ebfc:	782b      	ldrb	r3, [r5, #0]
 800ebfe:	f013 0301 	ands.w	r3, r3, #1
 800ec02:	d023      	beq.n	800ec4c <Sample_Cap_Touch+0x2a4>
	      if(leftTouchDebounce == 0){
 800ec04:	4b46      	ldr	r3, [pc, #280]	; (800ed20 <Sample_Cap_Touch+0x378>)
 800ec06:	781b      	ldrb	r3, [r3, #0]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	f000 80d7 	beq.w	800edbc <Sample_Cap_Touch+0x414>
	      if(leftTouchDebounce){
		      leftTouchDebounce = 0;
	      }
      }

      if( (cap_read[RIGHT_BUTTON_PORT] & RIGHT_BUTTON_PIN) == RIGHT_BUTTON_PIN){
 800ec0e:	786b      	ldrb	r3, [r5, #1]
 800ec10:	f013 0f80 	tst.w	r3, #128	; 0x80
	      if(rightTouchDebounce == 0){
 800ec14:	f89a 3000 	ldrb.w	r3, [sl]
      if( (cap_read[RIGHT_BUTTON_PORT] & RIGHT_BUTTON_PIN) == RIGHT_BUTTON_PIN){
 800ec18:	d124      	bne.n	800ec64 <Sample_Cap_Touch+0x2bc>
		      incrementOctave();
		      rightTouchDebounce = 1;
	      }
      }
      else{
	      if(rightTouchDebounce){
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	f43f aed3 	beq.w	800e9c6 <Sample_Cap_Touch+0x1e>
		      rightTouchDebounce = 0;
 800ec20:	2300      	movs	r3, #0
 800ec22:	f88a 3000 	strb.w	r3, [sl]
 800ec26:	e6ce      	b.n	800e9c6 <Sample_Cap_Touch+0x1e>
	      if(LED_State(CAP_12_LED_PORT, CAP_12_LED_PIN)){
 800ec28:	f001 fd44 	bl	80106b4 <LED_State>
 800ec2c:	2800      	cmp	r0, #0
 800ec2e:	d0e3      	beq.n	800ebf8 <Sample_Cap_Touch+0x250>
		  resetFrequencyInd(12);
 800ec30:	200c      	movs	r0, #12
 800ec32:	f006 fa3f 	bl	80150b4 <resetFrequencyInd>
		  Set_LED_Setting(CAP_12_LED_PORT, CAP_12_LED_PIN, 0);
 800ec36:	4622      	mov	r2, r4
 800ec38:	2104      	movs	r1, #4
 800ec3a:	2002      	movs	r0, #2
 800ec3c:	f001 fd2a 	bl	8010694 <Set_LED_Setting>
      transmitToBuffer();
 800ec40:	f001 fc4a 	bl	80104d8 <transmitToBuffer>
      if( (cap_read[LEFT_BUTTON_PORT] & LEFT_BUTTON_PIN) == LEFT_BUTTON_PIN){
 800ec44:	782b      	ldrb	r3, [r5, #0]
 800ec46:	f013 0301 	ands.w	r3, r3, #1
 800ec4a:	d1db      	bne.n	800ec04 <Sample_Cap_Touch+0x25c>
	      if(leftTouchDebounce){
 800ec4c:	4a34      	ldr	r2, [pc, #208]	; (800ed20 <Sample_Cap_Touch+0x378>)
 800ec4e:	7812      	ldrb	r2, [r2, #0]
 800ec50:	2a00      	cmp	r2, #0
 800ec52:	d0dc      	beq.n	800ec0e <Sample_Cap_Touch+0x266>
		      leftTouchDebounce = 0;
 800ec54:	4a32      	ldr	r2, [pc, #200]	; (800ed20 <Sample_Cap_Touch+0x378>)
 800ec56:	7013      	strb	r3, [r2, #0]
      if( (cap_read[RIGHT_BUTTON_PORT] & RIGHT_BUTTON_PIN) == RIGHT_BUTTON_PIN){
 800ec58:	786b      	ldrb	r3, [r5, #1]
 800ec5a:	f013 0f80 	tst.w	r3, #128	; 0x80
	      if(rightTouchDebounce == 0){
 800ec5e:	f89a 3000 	ldrb.w	r3, [sl]
      if( (cap_read[RIGHT_BUTTON_PORT] & RIGHT_BUTTON_PIN) == RIGHT_BUTTON_PIN){
 800ec62:	d0da      	beq.n	800ec1a <Sample_Cap_Touch+0x272>
	      if(rightTouchDebounce == 0){
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	f47f aeae 	bne.w	800e9c6 <Sample_Cap_Touch+0x1e>
		      incrementOctave();
 800ec6a:	f005 f835 	bl	8013cd8 <incrementOctave>
		      rightTouchDebounce = 1;
 800ec6e:	f88a 7000 	strb.w	r7, [sl]
 800ec72:	e6a8      	b.n	800e9c6 <Sample_Cap_Touch+0x1e>
	      if(LED_State(CAP_10_LED_PORT, CAP_10_LED_PIN)){
 800ec74:	f001 fd1e 	bl	80106b4 <LED_State>
 800ec78:	2800      	cmp	r0, #0
 800ec7a:	d095      	beq.n	800eba8 <Sample_Cap_Touch+0x200>
		  resetFrequencyInd(10);
 800ec7c:	200a      	movs	r0, #10
 800ec7e:	f006 fa19 	bl	80150b4 <resetFrequencyInd>
		  Set_LED_Setting(CAP_10_LED_PORT, CAP_10_LED_PIN, 0);
 800ec82:	4622      	mov	r2, r4
 800ec84:	2110      	movs	r1, #16
 800ec86:	2002      	movs	r0, #2
 800ec88:	f001 fd04 	bl	8010694 <Set_LED_Setting>
 800ec8c:	e78c      	b.n	800eba8 <Sample_Cap_Touch+0x200>
	      if(LED_State(CAP_9_LED_PORT, CAP_9_LED_PIN)){
 800ec8e:	f001 fd11 	bl	80106b4 <LED_State>
 800ec92:	2800      	cmp	r0, #0
 800ec94:	f43f af74 	beq.w	800eb80 <Sample_Cap_Touch+0x1d8>
		  resetFrequencyInd(9);
 800ec98:	2009      	movs	r0, #9
 800ec9a:	f006 fa0b 	bl	80150b4 <resetFrequencyInd>
		  Set_LED_Setting(CAP_9_LED_PORT, CAP_9_LED_PIN, 0);
 800ec9e:	4622      	mov	r2, r4
 800eca0:	2120      	movs	r1, #32
 800eca2:	2002      	movs	r0, #2
 800eca4:	f001 fcf6 	bl	8010694 <Set_LED_Setting>
 800eca8:	e76a      	b.n	800eb80 <Sample_Cap_Touch+0x1d8>
	      if(LED_State(CAP_11_LED_PORT, CAP_11_LED_PIN)){
 800ecaa:	f001 fd03 	bl	80106b4 <LED_State>
 800ecae:	2800      	cmp	r0, #0
 800ecb0:	d08e      	beq.n	800ebd0 <Sample_Cap_Touch+0x228>
		  resetFrequencyInd(11);
 800ecb2:	200b      	movs	r0, #11
 800ecb4:	f006 f9fe 	bl	80150b4 <resetFrequencyInd>
		  Set_LED_Setting(CAP_11_LED_PORT, CAP_11_LED_PIN, 0);
 800ecb8:	4622      	mov	r2, r4
 800ecba:	2108      	movs	r1, #8
 800ecbc:	2002      	movs	r0, #2
 800ecbe:	f001 fce9 	bl	8010694 <Set_LED_Setting>
 800ecc2:	e785      	b.n	800ebd0 <Sample_Cap_Touch+0x228>
	      if(LED_State(CAP_8_LED_PORT, CAP_8_LED_PIN)){
 800ecc4:	f001 fcf6 	bl	80106b4 <LED_State>
 800ecc8:	2800      	cmp	r0, #0
 800ecca:	f43f af44 	beq.w	800eb56 <Sample_Cap_Touch+0x1ae>
		  resetFrequencyInd(8);
 800ecce:	2008      	movs	r0, #8
 800ecd0:	f006 f9f0 	bl	80150b4 <resetFrequencyInd>
		  Set_LED_Setting(CAP_8_LED_PORT, CAP_8_LED_PIN, 0);
 800ecd4:	4622      	mov	r2, r4
 800ecd6:	2140      	movs	r1, #64	; 0x40
 800ecd8:	2002      	movs	r0, #2
 800ecda:	f001 fcdb 	bl	8010694 <Set_LED_Setting>
 800ecde:	e73a      	b.n	800eb56 <Sample_Cap_Touch+0x1ae>
	      if(LED_State(CAP_7_LED_PORT, CAP_7_LED_PIN)){
 800ece0:	f001 fce8 	bl	80106b4 <LED_State>
 800ece4:	2800      	cmp	r0, #0
 800ece6:	f43f af21 	beq.w	800eb2c <Sample_Cap_Touch+0x184>
		  resetFrequencyInd(7);
 800ecea:	2007      	movs	r0, #7
 800ecec:	f006 f9e2 	bl	80150b4 <resetFrequencyInd>
		  Set_LED_Setting(CAP_7_LED_PORT, CAP_7_LED_PIN, 0);
 800ecf0:	4622      	mov	r2, r4
 800ecf2:	2180      	movs	r1, #128	; 0x80
 800ecf4:	2002      	movs	r0, #2
 800ecf6:	f001 fccd 	bl	8010694 <Set_LED_Setting>
 800ecfa:	e717      	b.n	800eb2c <Sample_Cap_Touch+0x184>
	      if(LED_State(CAP_6_LED_PORT, CAP_6_LED_PIN)){
 800ecfc:	f001 fcda 	bl	80106b4 <LED_State>
 800ed00:	2800      	cmp	r0, #0
 800ed02:	f43f aefe 	beq.w	800eb02 <Sample_Cap_Touch+0x15a>
		  resetFrequencyInd(6);
 800ed06:	2006      	movs	r0, #6
 800ed08:	f006 f9d4 	bl	80150b4 <resetFrequencyInd>
		  Set_LED_Setting(CAP_6_LED_PORT, CAP_6_LED_PIN, 0);
 800ed0c:	4622      	mov	r2, r4
 800ed0e:	2101      	movs	r1, #1
 800ed10:	2003      	movs	r0, #3
 800ed12:	f001 fcbf 	bl	8010694 <Set_LED_Setting>
 800ed16:	e6f4      	b.n	800eb02 <Sample_Cap_Touch+0x15a>
 800ed18:	20005510 	.word	0x20005510
 800ed1c:	20005a5c 	.word	0x20005a5c
 800ed20:	2000508c 	.word	0x2000508c
 800ed24:	080171b4 	.word	0x080171b4
 800ed28:	20005534 	.word	0x20005534
 800ed2c:	2000508d 	.word	0x2000508d
	      if(LED_State(CAP_5_LED_PORT, CAP_5_LED_PIN)){
 800ed30:	f001 fcc0 	bl	80106b4 <LED_State>
 800ed34:	2800      	cmp	r0, #0
 800ed36:	f43f aecf 	beq.w	800ead8 <Sample_Cap_Touch+0x130>
		  resetFrequencyInd(5);
 800ed3a:	2005      	movs	r0, #5
 800ed3c:	f006 f9ba 	bl	80150b4 <resetFrequencyInd>
		  Set_LED_Setting(CAP_5_LED_PORT, CAP_5_LED_PIN, 0);
 800ed40:	4622      	mov	r2, r4
 800ed42:	2102      	movs	r1, #2
 800ed44:	2003      	movs	r0, #3
 800ed46:	f001 fca5 	bl	8010694 <Set_LED_Setting>
 800ed4a:	e6c5      	b.n	800ead8 <Sample_Cap_Touch+0x130>
	      if(LED_State(CAP_4_LED_PORT, CAP_4_LED_PIN)){
 800ed4c:	f001 fcb2 	bl	80106b4 <LED_State>
 800ed50:	2800      	cmp	r0, #0
 800ed52:	f43f aeac 	beq.w	800eaae <Sample_Cap_Touch+0x106>
		  resetFrequencyInd(4);
 800ed56:	2004      	movs	r0, #4
 800ed58:	f006 f9ac 	bl	80150b4 <resetFrequencyInd>
		  Set_LED_Setting(CAP_4_LED_PORT, CAP_4_LED_PIN, 0);
 800ed5c:	4622      	mov	r2, r4
 800ed5e:	2104      	movs	r1, #4
 800ed60:	2003      	movs	r0, #3
 800ed62:	f001 fc97 	bl	8010694 <Set_LED_Setting>
 800ed66:	e6a2      	b.n	800eaae <Sample_Cap_Touch+0x106>
	      if(LED_State(CAP_3_LED_PORT, CAP_3_LED_PIN)){
 800ed68:	f001 fca4 	bl	80106b4 <LED_State>
 800ed6c:	2800      	cmp	r0, #0
 800ed6e:	f43f ae89 	beq.w	800ea84 <Sample_Cap_Touch+0xdc>
		  resetFrequencyInd(3);
 800ed72:	2003      	movs	r0, #3
 800ed74:	f006 f99e 	bl	80150b4 <resetFrequencyInd>
		  Set_LED_Setting(CAP_3_LED_PORT, CAP_3_LED_PIN, 0);
 800ed78:	4622      	mov	r2, r4
 800ed7a:	2108      	movs	r1, #8
 800ed7c:	2003      	movs	r0, #3
 800ed7e:	f001 fc89 	bl	8010694 <Set_LED_Setting>
 800ed82:	e67f      	b.n	800ea84 <Sample_Cap_Touch+0xdc>
	      if(LED_State(CAP_2_LED_PORT, CAP_2_LED_PIN)){
 800ed84:	f001 fc96 	bl	80106b4 <LED_State>
 800ed88:	2800      	cmp	r0, #0
 800ed8a:	f43f ae66 	beq.w	800ea5a <Sample_Cap_Touch+0xb2>
		  resetFrequencyInd(2);
 800ed8e:	2002      	movs	r0, #2
 800ed90:	f006 f990 	bl	80150b4 <resetFrequencyInd>
		  Set_LED_Setting(CAP_2_LED_PORT, CAP_2_LED_PIN, 0);
 800ed94:	4622      	mov	r2, r4
 800ed96:	2110      	movs	r1, #16
 800ed98:	2003      	movs	r0, #3
 800ed9a:	f001 fc7b 	bl	8010694 <Set_LED_Setting>
 800ed9e:	e65c      	b.n	800ea5a <Sample_Cap_Touch+0xb2>
	      if(LED_State(CAP_1_LED_PORT, CAP_1_LED_PIN)){
 800eda0:	f001 fc88 	bl	80106b4 <LED_State>
 800eda4:	2800      	cmp	r0, #0
 800eda6:	f43f ae43 	beq.w	800ea30 <Sample_Cap_Touch+0x88>
		  resetFrequencyInd(1);
 800edaa:	4658      	mov	r0, fp
 800edac:	f006 f982 	bl	80150b4 <resetFrequencyInd>
		  Set_LED_Setting(CAP_1_LED_PORT, CAP_1_LED_PIN, 0);
 800edb0:	4622      	mov	r2, r4
 800edb2:	2120      	movs	r1, #32
 800edb4:	2003      	movs	r0, #3
 800edb6:	f001 fc6d 	bl	8010694 <Set_LED_Setting>
 800edba:	e639      	b.n	800ea30 <Sample_Cap_Touch+0x88>
		      decrementOctave();
 800edbc:	f005 fc2c 	bl	8014618 <decrementOctave>
		      leftTouchDebounce = 1;
 800edc0:	4b01      	ldr	r3, [pc, #4]	; (800edc8 <Sample_Cap_Touch+0x420>)
 800edc2:	701f      	strb	r7, [r3, #0]
 800edc4:	e723      	b.n	800ec0e <Sample_Cap_Touch+0x266>
 800edc6:	bf00      	nop
 800edc8:	2000508c 	.word	0x2000508c

0800edcc <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 800edcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  hcomp1.Instance = COMP1;
 800edce:	4b0d      	ldr	r3, [pc, #52]	; (800ee04 <MX_COMP1_Init+0x38>)
 800edd0:	4a0d      	ldr	r2, [pc, #52]	; (800ee08 <MX_COMP1_Init+0x3c>)
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_3_4VREFINT;
 800edd2:	4f0e      	ldr	r7, [pc, #56]	; (800ee0c <MX_COMP1_Init+0x40>)
  hcomp1.Instance = COMP1;
 800edd4:	601a      	str	r2, [r3, #0]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 800edd6:	2680      	movs	r6, #128	; 0x80
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800edd8:	2200      	movs	r2, #0
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_HIGH;
 800edda:	f44f 3540 	mov.w	r5, #196608	; 0x30000
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
  hcomp1.Init.Mode = COMP_POWERMODE_ULTRALOWPOWER;
 800edde:	240c      	movs	r4, #12
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_FALLING;
 800ede0:	2121      	movs	r1, #33	; 0x21
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800ede2:	4618      	mov	r0, r3
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_3_4VREFINT;
 800ede4:	611f      	str	r7, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 800ede6:	60de      	str	r6, [r3, #12]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_HIGH;
 800ede8:	615d      	str	r5, [r3, #20]
  hcomp1.Init.Mode = COMP_POWERMODE_ULTRALOWPOWER;
 800edea:	609c      	str	r4, [r3, #8]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_FALLING;
 800edec:	6219      	str	r1, [r3, #32]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800edee:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800edf0:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800edf2:	605a      	str	r2, [r3, #4]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800edf4:	f7f2 fbde 	bl	80015b4 <HAL_COMP_Init>
 800edf8:	b900      	cbnz	r0, 800edfc <MX_COMP1_Init+0x30>
 800edfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    Error_Handler();
  }

}
 800edfc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Error_Handler();
 800ee00:	f001 be9a 	b.w	8010b38 <Error_Handler>
 800ee04:	20005538 	.word	0x20005538
 800ee08:	40010200 	.word	0x40010200
 800ee0c:	00c00020 	.word	0x00c00020

0800ee10 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 800ee10:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(compHandle->Instance==COMP1)
 800ee12:	6802      	ldr	r2, [r0, #0]
 800ee14:	4b14      	ldr	r3, [pc, #80]	; (800ee68 <HAL_COMP_MspInit+0x58>)
{
 800ee16:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ee18:	2400      	movs	r4, #0
  if(compHandle->Instance==COMP1)
 800ee1a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ee1c:	9402      	str	r4, [sp, #8]
 800ee1e:	9401      	str	r4, [sp, #4]
 800ee20:	9403      	str	r4, [sp, #12]
 800ee22:	9404      	str	r4, [sp, #16]
 800ee24:	9405      	str	r4, [sp, #20]
  if(compHandle->Instance==COMP1)
 800ee26:	d001      	beq.n	800ee2c <HAL_COMP_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 800ee28:	b007      	add	sp, #28
 800ee2a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ee2c:	f503 3387 	add.w	r3, r3, #69120	; 0x10e00
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ee30:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ee32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ee34:	480d      	ldr	r0, [pc, #52]	; (800ee6c <HAL_COMP_MspInit+0x5c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ee36:	f042 0202 	orr.w	r2, r2, #2
 800ee3a:	64da      	str	r2, [r3, #76]	; 0x4c
 800ee3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ee3e:	f003 0302 	and.w	r3, r3, #2
 800ee42:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800ee44:	2204      	movs	r2, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ee46:	2303      	movs	r3, #3
 800ee48:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800ee4a:	9201      	str	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ee4c:	9d00      	ldr	r5, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ee4e:	f7f3 f8c1 	bl	8001fd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(COMP_IRQn, 5, 0);
 800ee52:	4622      	mov	r2, r4
 800ee54:	2105      	movs	r1, #5
 800ee56:	2040      	movs	r0, #64	; 0x40
 800ee58:	f7f2 fcca 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 800ee5c:	2040      	movs	r0, #64	; 0x40
 800ee5e:	f7f2 fcfd 	bl	800185c <HAL_NVIC_EnableIRQ>
}
 800ee62:	b007      	add	sp, #28
 800ee64:	bd30      	pop	{r4, r5, pc}
 800ee66:	bf00      	nop
 800ee68:	40010200 	.word	0x40010200
 800ee6c:	48000400 	.word	0x48000400

0800ee70 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800ee70:	b530      	push	{r4, r5, lr}
 800ee72:	b08b      	sub	sp, #44	; 0x2c
  DAC_ChannelConfTypeDef sConfig = {0};
 800ee74:	4668      	mov	r0, sp
 800ee76:	2228      	movs	r2, #40	; 0x28
 800ee78:	2100      	movs	r1, #0
 800ee7a:	f006 fb12 	bl	80154a2 <memset>

  /**DAC Initialization 
  */
  hdac1.Instance = DAC1;
 800ee7e:	4813      	ldr	r0, [pc, #76]	; (800eecc <MX_DAC1_Init+0x5c>)
 800ee80:	4b13      	ldr	r3, [pc, #76]	; (800eed0 <MX_DAC1_Init+0x60>)
 800ee82:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800ee84:	f7f2 fcf6 	bl	8001874 <HAL_DAC_Init>
 800ee88:	b9e8      	cbnz	r0, 800eec6 <MX_DAC1_Init+0x56>
  {
    Error_Handler();
  }
  /**DAC channel OUT1 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800ee8a:	2300      	movs	r3, #0
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800ee8c:	2516      	movs	r5, #22
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800ee8e:	2402      	movs	r4, #2
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800ee90:	461a      	mov	r2, r3
 800ee92:	4669      	mov	r1, sp
 800ee94:	480d      	ldr	r0, [pc, #52]	; (800eecc <MX_DAC1_Init+0x5c>)
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800ee96:	9301      	str	r3, [sp, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800ee98:	9303      	str	r3, [sp, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800ee9a:	9304      	str	r3, [sp, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800ee9c:	9305      	str	r3, [sp, #20]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800ee9e:	9502      	str	r5, [sp, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800eea0:	9400      	str	r4, [sp, #0]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800eea2:	f7f2 fe23 	bl	8001aec <HAL_DAC_ConfigChannel>
 800eea6:	b958      	cbnz	r0, 800eec0 <MX_DAC1_Init+0x50>
  {
    Error_Handler();
  }
  /**DAC channel OUT2 config 
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800eea8:	2300      	movs	r3, #0
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800eeaa:	4669      	mov	r1, sp
 800eeac:	2210      	movs	r2, #16
 800eeae:	4807      	ldr	r0, [pc, #28]	; (800eecc <MX_DAC1_Init+0x5c>)
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800eeb0:	9304      	str	r3, [sp, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800eeb2:	f7f2 fe1b 	bl	8001aec <HAL_DAC_ConfigChannel>
 800eeb6:	b108      	cbz	r0, 800eebc <MX_DAC1_Init+0x4c>
  {
    Error_Handler();
 800eeb8:	f001 fe3e 	bl	8010b38 <Error_Handler>
  }

}
 800eebc:	b00b      	add	sp, #44	; 0x2c
 800eebe:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 800eec0:	f001 fe3a 	bl	8010b38 <Error_Handler>
 800eec4:	e7f0      	b.n	800eea8 <MX_DAC1_Init+0x38>
    Error_Handler();
 800eec6:	f001 fe37 	bl	8010b38 <Error_Handler>
 800eeca:	e7de      	b.n	800ee8a <MX_DAC1_Init+0x1a>
 800eecc:	20005564 	.word	0x20005564
 800eed0:	40007400 	.word	0x40007400

0800eed4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800eed4:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(dacHandle->Instance==DAC1)
 800eed6:	6802      	ldr	r2, [r0, #0]
 800eed8:	4b29      	ldr	r3, [pc, #164]	; (800ef80 <HAL_DAC_MspInit+0xac>)
{
 800eeda:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eedc:	2400      	movs	r4, #0
  if(dacHandle->Instance==DAC1)
 800eede:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eee0:	9404      	str	r4, [sp, #16]
 800eee2:	9403      	str	r4, [sp, #12]
 800eee4:	9405      	str	r4, [sp, #20]
 800eee6:	9406      	str	r4, [sp, #24]
 800eee8:	9407      	str	r4, [sp, #28]
  if(dacHandle->Instance==DAC1)
 800eeea:	d001      	beq.n	800eef0 <HAL_DAC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800eeec:	b009      	add	sp, #36	; 0x24
 800eeee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_DAC1_CLK_ENABLE();
 800eef0:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 800eef4:	4e23      	ldr	r6, [pc, #140]	; (800ef84 <HAL_DAC_MspInit+0xb0>)
    __HAL_RCC_DAC1_CLK_ENABLE();
 800eef6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eef8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800eefc:	659a      	str	r2, [r3, #88]	; 0x58
 800eefe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ef00:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800ef04:	9201      	str	r2, [sp, #4]
 800ef06:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ef08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ef0a:	f042 0201 	orr.w	r2, r2, #1
 800ef0e:	64da      	str	r2, [r3, #76]	; 0x4c
 800ef10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef12:	f003 0301 	and.w	r3, r3, #1
 800ef16:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800ef18:	2230      	movs	r2, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ef1a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ef1c:	a903      	add	r1, sp, #12
 800ef1e:	4605      	mov	r5, r0
 800ef20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ef24:	9f02      	ldr	r7, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800ef26:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ef28:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ef2a:	f7f3 f853 	bl	8001fd4 <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 800ef2e:	4b16      	ldr	r3, [pc, #88]	; (800ef88 <HAL_DAC_MspInit+0xb4>)
 800ef30:	6033      	str	r3, [r6, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 800ef32:	2006      	movs	r0, #6
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ef34:	f04f 0e10 	mov.w	lr, #16
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800ef38:	2780      	movs	r7, #128	; 0x80
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ef3a:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ef3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800ef42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 800ef46:	6070      	str	r0, [r6, #4]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800ef48:	4630      	mov	r0, r6
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800ef4a:	60f4      	str	r4, [r6, #12]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 800ef4c:	61f4      	str	r4, [r6, #28]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ef4e:	f8c6 e008 	str.w	lr, [r6, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800ef52:	6137      	str	r7, [r6, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ef54:	6171      	str	r1, [r6, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ef56:	61b2      	str	r2, [r6, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800ef58:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800ef5a:	f7f2 fe91 	bl	8001c80 <HAL_DMA_Init>
 800ef5e:	b958      	cbnz	r0, 800ef78 <HAL_DAC_MspInit+0xa4>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 800ef60:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800ef62:	2200      	movs	r2, #0
 800ef64:	2105      	movs	r1, #5
 800ef66:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 800ef68:	62b5      	str	r5, [r6, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800ef6a:	f7f2 fc41 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800ef6e:	2036      	movs	r0, #54	; 0x36
 800ef70:	f7f2 fc74 	bl	800185c <HAL_NVIC_EnableIRQ>
}
 800ef74:	b009      	add	sp, #36	; 0x24
 800ef76:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 800ef78:	f001 fdde 	bl	8010b38 <Error_Handler>
 800ef7c:	e7f0      	b.n	800ef60 <HAL_DAC_MspInit+0x8c>
 800ef7e:	bf00      	nop
 800ef80:	40007400 	.word	0x40007400
 800ef84:	20005578 	.word	0x20005578
 800ef88:	40020008 	.word	0x40020008

0800ef8c <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800ef8c:	4b0f      	ldr	r3, [pc, #60]	; (800efcc <MX_DMA_Init+0x40>)
{
 800ef8e:	b500      	push	{lr}
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800ef90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ef92:	f042 0204 	orr.w	r2, r2, #4
 800ef96:	649a      	str	r2, [r3, #72]	; 0x48
 800ef98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
{
 800ef9a:	b083      	sub	sp, #12
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800ef9c:	f002 0204 	and.w	r2, r2, #4
 800efa0:	9200      	str	r2, [sp, #0]
 800efa2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800efa4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800efa6:	f042 0201 	orr.w	r2, r2, #1
 800efaa:	649a      	str	r2, [r3, #72]	; 0x48
 800efac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800efae:	f003 0301 	and.w	r3, r3, #1
 800efb2:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 7, 0);
 800efb4:	2200      	movs	r2, #0
 800efb6:	2107      	movs	r1, #7
 800efb8:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800efba:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 7, 0);
 800efbc:	f7f2 fc18 	bl	80017f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800efc0:	200b      	movs	r0, #11
 800efc2:	f7f2 fc4b 	bl	800185c <HAL_NVIC_EnableIRQ>

}
 800efc6:	b003      	add	sp, #12
 800efc8:	f85d fb04 	ldr.w	pc, [sp], #4
 800efcc:	40021000 	.word	0x40021000

0800efd0 <applyCustomFilter>:
q15_t temp_buffer[512];
q15_t tempVal;

void applyCustomFilter(q15_t* input_buffer, q15_t* output_buffer, uint16_t size){
//  startT = DWT->CYCCNT;
  for(uint16_t i = 0; i < size; i++){
 800efd0:	2a00      	cmp	r2, #0
 800efd2:	d066      	beq.n	800f0a2 <applyCustomFilter+0xd2>
void applyCustomFilter(q15_t* input_buffer, q15_t* output_buffer, uint16_t size){
 800efd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efd8:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800f0b8 <applyCustomFilter+0xe8>
 800efdc:	4e31      	ldr	r6, [pc, #196]	; (800f0a4 <applyCustomFilter+0xd4>)
 800efde:	4b32      	ldr	r3, [pc, #200]	; (800f0a8 <applyCustomFilter+0xd8>)
 800efe0:	4d32      	ldr	r5, [pc, #200]	; (800f0ac <applyCustomFilter+0xdc>)
 800efe2:	4c33      	ldr	r4, [pc, #204]	; (800f0b0 <applyCustomFilter+0xe0>)
 800efe4:	f8df e0d4 	ldr.w	lr, [pc, #212]	; 800f0bc <applyCustomFilter+0xec>
 800efe8:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 800f0c0 <applyCustomFilter+0xf0>
 800efec:	4f31      	ldr	r7, [pc, #196]	; (800f0b4 <applyCustomFilter+0xe4>)
 800efee:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800f0c4 <applyCustomFilter+0xf4>
 800eff2:	eddc 5a00 	vldr	s11, [ip]
 800eff6:	edd6 3a00 	vldr	s7, [r6]
 800effa:	ed93 4a00 	vldr	s8, [r3]
 800effe:	edd5 4a00 	vldr	s9, [r5]
 800f002:	ed94 5a00 	vldr	s10, [r4]
 800f006:	f8be 6000 	ldrh.w	r6, [lr]
 800f00a:	f8b9 3000 	ldrh.w	r3, [r9]
 800f00e:	883d      	ldrh	r5, [r7, #0]
 800f010:	f8b8 4000 	ldrh.w	r4, [r8]
 800f014:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 800f0c8 <applyCustomFilter+0xf8>
 800f018:	f102 3cff 	add.w	ip, r2, #4294967295
 800f01c:	fa1f fc8c 	uxth.w	ip, ip
 800f020:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
 800f024:	b082      	sub	sp, #8
 800f026:	3802      	subs	r0, #2
 800f028:	3902      	subs	r1, #2
      output_buffer[i] = b_0 * input_buffer[i]
		      + b_1 * x_1
		      + b_2 * x_2
 800f02a:	ee07 3a90 	vmov	s15, r3
		      + b_1 * x_1
 800f02e:	ee07 6a10 	vmov	s14, r6
		      + b_2 * x_2
 800f032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		      + b_1 * x_1
 800f036:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		      + b_2 * x_2
 800f03a:	ee67 7aa4 	vmul.f32	s15, s15, s9
		      - a_1 * y_1
 800f03e:	ee06 5a90 	vmov	s13, r5
		      - a_2 * y_2;
 800f042:	eee7 7a04 	vfma.f32	s15, s14, s8
      output_buffer[i] = b_0 * input_buffer[i]
 800f046:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
		      - a_1 * y_1
 800f04a:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
		      - a_2 * y_2;
 800f04e:	ee06 4a90 	vmov	s13, r4
 800f052:	eee6 7a45 	vfms.f32	s15, s12, s10
 800f056:	eef8 6ae6 	vcvt.f32.s32	s13, s13
      output_buffer[i] = b_0 * input_buffer[i]
 800f05a:	ee07 3a10 	vmov	s14, r3
		      - a_2 * y_2;
 800f05e:	eee6 7ae5 	vfms.f32	s15, s13, s11
      output_buffer[i] = b_0 * input_buffer[i]
 800f062:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		      - a_2 * y_2;
 800f066:	eee7 7a23 	vfma.f32	s15, s14, s7
      output_buffer[i] = b_0 * input_buffer[i]
 800f06a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f06e:	edcd 7a01 	vstr	s15, [sp, #4]
 800f072:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 800f076:	804a      	strh	r2, [r1, #2]
      //output_buffer[i] = output_buffer[i] - (1/3) * (output_buffer[i]*output_buffer[i]*output_buffer[i]);
      output_buffer[i] = ((double) 1024.0*(2.0/PI))*atan(( ( (double) output_buffer[i])-1024.0)/700.0) + 1024.0;

#endif

      x_2 = x_1;
 800f078:	f8be 3000 	ldrh.w	r3, [lr]
      tempVal = output_buffer[i];
 800f07c:	f8aa 2000 	strh.w	r2, [sl]
      x_2 = x_1;
 800f080:	f8a9 3000 	strh.w	r3, [r9]
      x_1 = input_buffer[i];
 800f084:	f830 6f02 	ldrh.w	r6, [r0, #2]!
      y_2 = y_1;
 800f088:	883c      	ldrh	r4, [r7, #0]
      x_1 = input_buffer[i];
 800f08a:	f8ae 6000 	strh.w	r6, [lr]
      y_2 = y_1;
 800f08e:	f8a8 4000 	strh.w	r4, [r8]
      y_1 = output_buffer[i];
 800f092:	f831 5f02 	ldrh.w	r5, [r1, #2]!
 800f096:	803d      	strh	r5, [r7, #0]
  for(uint16_t i = 0; i < size; i++){
 800f098:	4584      	cmp	ip, r0
 800f09a:	d1c6      	bne.n	800f02a <applyCustomFilter+0x5a>


  }
//  totalT = DWT->CYCCNT - startT;
//  startT = DWT->CYCCNT - totalT;
}
 800f09c:	b002      	add	sp, #8
 800f09e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0a2:	4770      	bx	lr
 800f0a4:	200050a8 	.word	0x200050a8
 800f0a8:	200050ac 	.word	0x200050ac
 800f0ac:	200050b0 	.word	0x200050b0
 800f0b0:	20005094 	.word	0x20005094
 800f0b4:	200050c8 	.word	0x200050c8
 800f0b8:	20005098 	.word	0x20005098
 800f0bc:	200050c4 	.word	0x200050c4
 800f0c0:	200050c6 	.word	0x200050c6
 800f0c4:	200050ca 	.word	0x200050ca
 800f0c8:	200055e0 	.word	0x200055e0

0800f0cc <resetFilterHistory>:

void resetFilterHistory(void){
 800f0cc:	b410      	push	{r4}
  x_2 = 0;
  x_1 = 0;
 800f0ce:	4806      	ldr	r0, [pc, #24]	; (800f0e8 <resetFilterHistory+0x1c>)
  x_2 = 0;
 800f0d0:	4c06      	ldr	r4, [pc, #24]	; (800f0ec <resetFilterHistory+0x20>)
  y_2 = 0;
 800f0d2:	4907      	ldr	r1, [pc, #28]	; (800f0f0 <resetFilterHistory+0x24>)
  y_1 = 0;
 800f0d4:	4a07      	ldr	r2, [pc, #28]	; (800f0f4 <resetFilterHistory+0x28>)
  x_2 = 0;
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	8023      	strh	r3, [r4, #0]
  x_1 = 0;
 800f0da:	8003      	strh	r3, [r0, #0]
  y_2 = 0;
 800f0dc:	800b      	strh	r3, [r1, #0]
  y_1 = 0;
 800f0de:	8013      	strh	r3, [r2, #0]
}
 800f0e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f0e4:	4770      	bx	lr
 800f0e6:	bf00      	nop
 800f0e8:	200050c4 	.word	0x200050c4
 800f0ec:	200050c6 	.word	0x200050c6
 800f0f0:	200050ca 	.word	0x200050ca
 800f0f4:	200050c8 	.word	0x200050c8

0800f0f8 <setCutoffFreq>:
//
//	inputVal = round(scaledAngle);


	// dont change if already set
	if(pastVal == inputAngle) return;
 800f0f8:	4b6d      	ldr	r3, [pc, #436]	; (800f2b0 <setCutoffFreq+0x1b8>)
 800f0fa:	edd3 7a00 	vldr	s15, [r3]
 800f0fe:	eef4 7a40 	vcmp.f32	s15, s0
 800f102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f106:	f000 80cb 	beq.w	800f2a0 <setCutoffFreq+0x1a8>
void setCutoffFreq(float inputAngle){
 800f10a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f10e:	ed2d 8b02 	vpush	{d8}
 800f112:	ee10 0a10 	vmov	r0, s0
 800f116:	b083      	sub	sp, #12

	pastVal = inputAngle;
 800f118:	ed83 0a00 	vstr	s0, [r3]
}

double angleToCutoffFreq(float inputAngle){
  //return 16000 * expf(-1.01966 * inputAngle); //650-16000

  return 16000 * expf(-1.51966  * inputAngle); //135-16000
 800f11c:	f7f1 f9d4 	bl	80004c8 <__aeabi_f2d>
 800f120:	a361      	add	r3, pc, #388	; (adr r3, 800f2a8 <setCutoffFreq+0x1b0>)
 800f122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f126:	f7f1 fa23 	bl	8000570 <__aeabi_dmul>
 800f12a:	f7f1 fd19 	bl	8000b60 <__aeabi_d2f>
 800f12e:	ee00 0a10 	vmov	s0, r0
 800f132:	f006 fb5b 	bl	80157ec <expf>
 800f136:	eddf 8a5f 	vldr	s17, [pc, #380]	; 800f2b4 <setCutoffFreq+0x1bc>
	new_cutoff = angleToCutoffFreq(inputAngle);
 800f13a:	4c5f      	ldr	r4, [pc, #380]	; (800f2b8 <setCutoffFreq+0x1c0>)
  return 16000 * expf(-1.51966  * inputAngle); //135-16000
 800f13c:	ee20 8a28 	vmul.f32	s16, s0, s17
 800f140:	ee18 0a10 	vmov	r0, s16
 800f144:	f7f1 f9c0 	bl	80004c8 <__aeabi_f2d>
  if(desired_cutoff == current_cutoff){
 800f148:	4b5c      	ldr	r3, [pc, #368]	; (800f2bc <setCutoffFreq+0x1c4>)
 800f14a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f14e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f152:	edd3 7a00 	vldr	s15, [r3]
 800f156:	bf88      	it	hi
 800f158:	eeb0 8a68 	vmovhi.f32	s16, s17
 800f15c:	eef4 7a48 	vcmp.f32	s15, s16
 800f160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  return 16000 * expf(-1.51966  * inputAngle); //135-16000
 800f164:	e9c4 0100 	strd	r0, r1, [r4]
  if(desired_cutoff == current_cutoff){
 800f168:	f000 8095 	beq.w	800f296 <setCutoffFreq+0x19e>
  omega = 2 * PI * current_cutoff / ((float) SAMPLING_FREQ);
 800f16c:	eddf 7a54 	vldr	s15, [pc, #336]	; 800f2c0 <setCutoffFreq+0x1c8>
      current_cutoff = desired_cutoff;
 800f170:	ed83 8a00 	vstr	s16, [r3]
  omega = 2 * PI * current_cutoff / ((float) SAMPLING_FREQ);
 800f174:	ee68 7a27 	vmul.f32	s15, s16, s15
  alpha = sin_omega/ (2.0*Q);
 800f178:	4c52      	ldr	r4, [pc, #328]	; (800f2c4 <setCutoffFreq+0x1cc>)
  omega = 2 * PI * current_cutoff / ((float) SAMPLING_FREQ);
 800f17a:	ee17 0a90 	vmov	r0, s15
 800f17e:	f7f1 f9a3 	bl	80004c8 <__aeabi_f2d>
 800f182:	4b51      	ldr	r3, [pc, #324]	; (800f2c8 <setCutoffFreq+0x1d0>)
  cos_omega = cos(omega);
 800f184:	ec41 0b10 	vmov	d0, r0, r1
  omega = 2 * PI * current_cutoff / ((float) SAMPLING_FREQ);
 800f188:	e9c3 0100 	strd	r0, r1, [r3]
 800f18c:	ec41 0b18 	vmov	d8, r0, r1
  cos_omega = cos(omega);
 800f190:	f006 f9a6 	bl	80154e0 <cos>
 800f194:	ec51 0b10 	vmov	r0, r1, d0
 800f198:	f7f1 fce2 	bl	8000b60 <__aeabi_d2f>
  sin_omega = sin(omega);
 800f19c:	eeb0 0a48 	vmov.f32	s0, s16
 800f1a0:	eef0 0a68 	vmov.f32	s1, s17
  cos_omega = cos(omega);
 800f1a4:	4b49      	ldr	r3, [pc, #292]	; (800f2cc <setCutoffFreq+0x1d4>)
 800f1a6:	4605      	mov	r5, r0
 800f1a8:	6018      	str	r0, [r3, #0]
  sin_omega = sin(omega);
 800f1aa:	f006 fa25 	bl	80155f8 <sin>
 800f1ae:	ec51 0b10 	vmov	r0, r1, d0
 800f1b2:	f7f1 fcd5 	bl	8000b60 <__aeabi_d2f>
 800f1b6:	4b46      	ldr	r3, [pc, #280]	; (800f2d0 <setCutoffFreq+0x1d8>)
 800f1b8:	6018      	str	r0, [r3, #0]
  alpha = sin_omega/ (2.0*Q);
 800f1ba:	f7f1 f985 	bl	80004c8 <__aeabi_f2d>
 800f1be:	4b45      	ldr	r3, [pc, #276]	; (800f2d4 <setCutoffFreq+0x1dc>)
 800f1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1c4:	4606      	mov	r6, r0
 800f1c6:	460f      	mov	r7, r1
 800f1c8:	4610      	mov	r0, r2
 800f1ca:	4619      	mov	r1, r3
 800f1cc:	f7f1 f81e 	bl	800020c <__adddf3>
 800f1d0:	4602      	mov	r2, r0
 800f1d2:	460b      	mov	r3, r1
 800f1d4:	4630      	mov	r0, r6
 800f1d6:	4639      	mov	r1, r7
 800f1d8:	f7f1 faf4 	bl	80007c4 <__aeabi_ddiv>
 800f1dc:	4682      	mov	sl, r0
 800f1de:	468b      	mov	fp, r1
  a_0 = 1 + alpha;
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	4b3d      	ldr	r3, [pc, #244]	; (800f2d8 <setCutoffFreq+0x1e0>)
  a_1 = (-2.0 * cos_omega) / a_0;
 800f1e4:	4f3d      	ldr	r7, [pc, #244]	; (800f2dc <setCutoffFreq+0x1e4>)
  alpha = sin_omega/ (2.0*Q);
 800f1e6:	e9c4 ab00 	strd	sl, fp, [r4]
  a_0 = 1 + alpha;
 800f1ea:	f7f1 f80f 	bl	800020c <__adddf3>
 800f1ee:	f7f1 fcb7 	bl	8000b60 <__aeabi_d2f>
 800f1f2:	4b3b      	ldr	r3, [pc, #236]	; (800f2e0 <setCutoffFreq+0x1e8>)
 800f1f4:	4604      	mov	r4, r0
 800f1f6:	601c      	str	r4, [r3, #0]
  b_0 = ((1.0 - cos_omega) / 2.0) / a_0;
 800f1f8:	4628      	mov	r0, r5
 800f1fa:	f7f1 f965 	bl	80004c8 <__aeabi_f2d>
 800f1fe:	4602      	mov	r2, r0
 800f200:	460b      	mov	r3, r1
 800f202:	e9cd 0100 	strd	r0, r1, [sp]
 800f206:	2000      	movs	r0, #0
 800f208:	4933      	ldr	r1, [pc, #204]	; (800f2d8 <setCutoffFreq+0x1e0>)
 800f20a:	f7f0 fffd 	bl	8000208 <__aeabi_dsub>
 800f20e:	4680      	mov	r8, r0
 800f210:	4620      	mov	r0, r4
 800f212:	4689      	mov	r9, r1
 800f214:	f7f1 f958 	bl	80004c8 <__aeabi_f2d>
 800f218:	4602      	mov	r2, r0
 800f21a:	460b      	mov	r3, r1
 800f21c:	2000      	movs	r0, #0
 800f21e:	492e      	ldr	r1, [pc, #184]	; (800f2d8 <setCutoffFreq+0x1e0>)
 800f220:	f7f1 fad0 	bl	80007c4 <__aeabi_ddiv>
 800f224:	2200      	movs	r2, #0
 800f226:	4604      	mov	r4, r0
 800f228:	460d      	mov	r5, r1
 800f22a:	4b2e      	ldr	r3, [pc, #184]	; (800f2e4 <setCutoffFreq+0x1ec>)
 800f22c:	4640      	mov	r0, r8
 800f22e:	4649      	mov	r1, r9
 800f230:	f7f1 f99e 	bl	8000570 <__aeabi_dmul>
 800f234:	4622      	mov	r2, r4
 800f236:	462b      	mov	r3, r5
 800f238:	f7f1 f99a 	bl	8000570 <__aeabi_dmul>
 800f23c:	f7f1 fc90 	bl	8000b60 <__aeabi_d2f>
 800f240:	4b29      	ldr	r3, [pc, #164]	; (800f2e8 <setCutoffFreq+0x1f0>)
  b_1 = (1.0 - cos_omega) / a_0;
 800f242:	4642      	mov	r2, r8
  b_0 = ((1.0 - cos_omega) / 2.0) / a_0;
 800f244:	6018      	str	r0, [r3, #0]
 800f246:	4606      	mov	r6, r0
  b_1 = (1.0 - cos_omega) / a_0;
 800f248:	464b      	mov	r3, r9
 800f24a:	4620      	mov	r0, r4
 800f24c:	4629      	mov	r1, r5
 800f24e:	f7f1 f98f 	bl	8000570 <__aeabi_dmul>
 800f252:	f7f1 fc85 	bl	8000b60 <__aeabi_d2f>
  b_2 = b_0;
 800f256:	4b25      	ldr	r3, [pc, #148]	; (800f2ec <setCutoffFreq+0x1f4>)
  b_1 = (1.0 - cos_omega) / a_0;
 800f258:	4a25      	ldr	r2, [pc, #148]	; (800f2f0 <setCutoffFreq+0x1f8>)
  b_2 = b_0;
 800f25a:	601e      	str	r6, [r3, #0]
  b_1 = (1.0 - cos_omega) / a_0;
 800f25c:	6010      	str	r0, [r2, #0]
  a_1 = (-2.0 * cos_omega) / a_0;
 800f25e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800f262:	2200      	movs	r2, #0
 800f264:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f268:	f7f1 f982 	bl	8000570 <__aeabi_dmul>
 800f26c:	4622      	mov	r2, r4
 800f26e:	462b      	mov	r3, r5
 800f270:	f7f1 f97e 	bl	8000570 <__aeabi_dmul>
 800f274:	f7f1 fc74 	bl	8000b60 <__aeabi_d2f>
  a_2 = (1.0 - alpha) / a_0;
 800f278:	4652      	mov	r2, sl
 800f27a:	465b      	mov	r3, fp
  a_1 = (-2.0 * cos_omega) / a_0;
 800f27c:	6038      	str	r0, [r7, #0]
  a_2 = (1.0 - alpha) / a_0;
 800f27e:	4916      	ldr	r1, [pc, #88]	; (800f2d8 <setCutoffFreq+0x1e0>)
 800f280:	2000      	movs	r0, #0
 800f282:	f7f0 ffc1 	bl	8000208 <__aeabi_dsub>
 800f286:	462b      	mov	r3, r5
 800f288:	4622      	mov	r2, r4
 800f28a:	f7f1 f971 	bl	8000570 <__aeabi_dmul>
 800f28e:	f7f1 fc67 	bl	8000b60 <__aeabi_d2f>
 800f292:	4b18      	ldr	r3, [pc, #96]	; (800f2f4 <setCutoffFreq+0x1fc>)
 800f294:	6018      	str	r0, [r3, #0]
}
 800f296:	b003      	add	sp, #12
 800f298:	ecbd 8b02 	vpop	{d8}
 800f29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2a0:	4770      	bx	lr
 800f2a2:	bf00      	nop
 800f2a4:	f3af 8000 	nop.w
 800f2a8:	0110a138 	.word	0x0110a138
 800f2ac:	bff85087 	.word	0xbff85087
 800f2b0:	20000040 	.word	0x20000040
 800f2b4:	467a0000 	.word	0x467a0000
 800f2b8:	20000038 	.word	0x20000038
 800f2bc:	20000030 	.word	0x20000030
 800f2c0:	3924b5be 	.word	0x3924b5be
 800f2c4:	200050a0 	.word	0x200050a0
 800f2c8:	200050b8 	.word	0x200050b8
 800f2cc:	200050b4 	.word	0x200050b4
 800f2d0:	200050c0 	.word	0x200050c0
 800f2d4:	20000028 	.word	0x20000028
 800f2d8:	3ff00000 	.word	0x3ff00000
 800f2dc:	20005094 	.word	0x20005094
 800f2e0:	20005090 	.word	0x20005090
 800f2e4:	3fe00000 	.word	0x3fe00000
 800f2e8:	200050a8 	.word	0x200050a8
 800f2ec:	200050b0 	.word	0x200050b0
 800f2f0:	200050ac 	.word	0x200050ac
 800f2f4:	20005098 	.word	0x20005098

0800f2f8 <changeQ>:
  if(desired_cutoff == current_cutoff){
 800f2f8:	4a55      	ldr	r2, [pc, #340]	; (800f450 <changeQ+0x158>)

}

void changeQ(double new_Q){
  Q = new_Q;
 800f2fa:	4b56      	ldr	r3, [pc, #344]	; (800f454 <changeQ+0x15c>)
  if(desired_cutoff == current_cutoff){
 800f2fc:	edd2 7a00 	vldr	s15, [r2]
 800f300:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f304:	eef4 7a47 	vcmp.f32	s15, s14
 800f308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  Q = new_Q;
 800f30c:	ed83 0b00 	vstr	d0, [r3]
  if(desired_cutoff == current_cutoff){
 800f310:	d100      	bne.n	800f314 <changeQ+0x1c>
 800f312:	4770      	bx	lr
void changeQ(double new_Q){
 800f314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  omega = 2 * PI * current_cutoff / ((float) SAMPLING_FREQ);
 800f318:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800f458 <changeQ+0x160>
  alpha = sin_omega/ (2.0*Q);
 800f31c:	4c4f      	ldr	r4, [pc, #316]	; (800f45c <changeQ+0x164>)
void changeQ(double new_Q){
 800f31e:	ed2d 8b02 	vpush	{d8}
  omega = 2 * PI * current_cutoff / ((float) SAMPLING_FREQ);
 800f322:	ee67 7a87 	vmul.f32	s15, s15, s14
void changeQ(double new_Q){
 800f326:	b083      	sub	sp, #12
  omega = 2 * PI * current_cutoff / ((float) SAMPLING_FREQ);
 800f328:	ee17 0a90 	vmov	r0, s15
 800f32c:	ec59 8b10 	vmov	r8, r9, d0
 800f330:	f7f1 f8ca 	bl	80004c8 <__aeabi_f2d>
 800f334:	4b4a      	ldr	r3, [pc, #296]	; (800f460 <changeQ+0x168>)
  cos_omega = cos(omega);
 800f336:	ec41 0b10 	vmov	d0, r0, r1
  omega = 2 * PI * current_cutoff / ((float) SAMPLING_FREQ);
 800f33a:	ec41 0b18 	vmov	d8, r0, r1
 800f33e:	e9c3 0100 	strd	r0, r1, [r3]
  cos_omega = cos(omega);
 800f342:	f006 f8cd 	bl	80154e0 <cos>
 800f346:	ec51 0b10 	vmov	r0, r1, d0
 800f34a:	f7f1 fc09 	bl	8000b60 <__aeabi_d2f>
  sin_omega = sin(omega);
 800f34e:	eeb0 0a48 	vmov.f32	s0, s16
 800f352:	eef0 0a68 	vmov.f32	s1, s17
  cos_omega = cos(omega);
 800f356:	4b43      	ldr	r3, [pc, #268]	; (800f464 <changeQ+0x16c>)
 800f358:	4605      	mov	r5, r0
 800f35a:	6018      	str	r0, [r3, #0]
  sin_omega = sin(omega);
 800f35c:	f006 f94c 	bl	80155f8 <sin>
 800f360:	ec51 0b10 	vmov	r0, r1, d0
 800f364:	f7f1 fbfc 	bl	8000b60 <__aeabi_d2f>
 800f368:	4b3f      	ldr	r3, [pc, #252]	; (800f468 <changeQ+0x170>)
 800f36a:	6018      	str	r0, [r3, #0]
  alpha = sin_omega/ (2.0*Q);
 800f36c:	f7f1 f8ac 	bl	80004c8 <__aeabi_f2d>
 800f370:	4642      	mov	r2, r8
 800f372:	4606      	mov	r6, r0
 800f374:	460f      	mov	r7, r1
 800f376:	464b      	mov	r3, r9
 800f378:	4640      	mov	r0, r8
 800f37a:	4649      	mov	r1, r9
 800f37c:	f7f0 ff46 	bl	800020c <__adddf3>
 800f380:	4602      	mov	r2, r0
 800f382:	460b      	mov	r3, r1
 800f384:	4630      	mov	r0, r6
 800f386:	4639      	mov	r1, r7
 800f388:	f7f1 fa1c 	bl	80007c4 <__aeabi_ddiv>
 800f38c:	4682      	mov	sl, r0
 800f38e:	468b      	mov	fp, r1
  a_0 = 1 + alpha;
 800f390:	2200      	movs	r2, #0
 800f392:	4b36      	ldr	r3, [pc, #216]	; (800f46c <changeQ+0x174>)
  a_1 = (-2.0 * cos_omega) / a_0;
 800f394:	4f36      	ldr	r7, [pc, #216]	; (800f470 <changeQ+0x178>)
  alpha = sin_omega/ (2.0*Q);
 800f396:	e9c4 ab00 	strd	sl, fp, [r4]
  a_0 = 1 + alpha;
 800f39a:	f7f0 ff37 	bl	800020c <__adddf3>
 800f39e:	f7f1 fbdf 	bl	8000b60 <__aeabi_d2f>
 800f3a2:	4b34      	ldr	r3, [pc, #208]	; (800f474 <changeQ+0x17c>)
 800f3a4:	4604      	mov	r4, r0
 800f3a6:	601c      	str	r4, [r3, #0]
  b_0 = ((1.0 - cos_omega) / 2.0) / a_0;
 800f3a8:	4628      	mov	r0, r5
 800f3aa:	f7f1 f88d 	bl	80004c8 <__aeabi_f2d>
 800f3ae:	e9cd 0100 	strd	r0, r1, [sp]
 800f3b2:	4602      	mov	r2, r0
 800f3b4:	460b      	mov	r3, r1
 800f3b6:	2000      	movs	r0, #0
 800f3b8:	492c      	ldr	r1, [pc, #176]	; (800f46c <changeQ+0x174>)
 800f3ba:	f7f0 ff25 	bl	8000208 <__aeabi_dsub>
 800f3be:	4680      	mov	r8, r0
 800f3c0:	4620      	mov	r0, r4
 800f3c2:	4689      	mov	r9, r1
 800f3c4:	f7f1 f880 	bl	80004c8 <__aeabi_f2d>
 800f3c8:	4602      	mov	r2, r0
 800f3ca:	460b      	mov	r3, r1
 800f3cc:	2000      	movs	r0, #0
 800f3ce:	4927      	ldr	r1, [pc, #156]	; (800f46c <changeQ+0x174>)
 800f3d0:	f7f1 f9f8 	bl	80007c4 <__aeabi_ddiv>
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	4604      	mov	r4, r0
 800f3d8:	460d      	mov	r5, r1
 800f3da:	4b27      	ldr	r3, [pc, #156]	; (800f478 <changeQ+0x180>)
 800f3dc:	4640      	mov	r0, r8
 800f3de:	4649      	mov	r1, r9
 800f3e0:	f7f1 f8c6 	bl	8000570 <__aeabi_dmul>
 800f3e4:	4622      	mov	r2, r4
 800f3e6:	462b      	mov	r3, r5
 800f3e8:	f7f1 f8c2 	bl	8000570 <__aeabi_dmul>
 800f3ec:	f7f1 fbb8 	bl	8000b60 <__aeabi_d2f>
 800f3f0:	4b22      	ldr	r3, [pc, #136]	; (800f47c <changeQ+0x184>)
  b_1 = (1.0 - cos_omega) / a_0;
 800f3f2:	4642      	mov	r2, r8
  b_0 = ((1.0 - cos_omega) / 2.0) / a_0;
 800f3f4:	4606      	mov	r6, r0
 800f3f6:	6018      	str	r0, [r3, #0]
  b_1 = (1.0 - cos_omega) / a_0;
 800f3f8:	4629      	mov	r1, r5
 800f3fa:	464b      	mov	r3, r9
 800f3fc:	4620      	mov	r0, r4
 800f3fe:	f7f1 f8b7 	bl	8000570 <__aeabi_dmul>
 800f402:	f7f1 fbad 	bl	8000b60 <__aeabi_d2f>
  b_2 = b_0;
 800f406:	4b1e      	ldr	r3, [pc, #120]	; (800f480 <changeQ+0x188>)
  b_1 = (1.0 - cos_omega) / a_0;
 800f408:	4a1e      	ldr	r2, [pc, #120]	; (800f484 <changeQ+0x18c>)
  b_2 = b_0;
 800f40a:	601e      	str	r6, [r3, #0]
  b_1 = (1.0 - cos_omega) / a_0;
 800f40c:	6010      	str	r0, [r2, #0]
  a_1 = (-2.0 * cos_omega) / a_0;
 800f40e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800f412:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f416:	2200      	movs	r2, #0
 800f418:	f7f1 f8aa 	bl	8000570 <__aeabi_dmul>
 800f41c:	4622      	mov	r2, r4
 800f41e:	462b      	mov	r3, r5
 800f420:	f7f1 f8a6 	bl	8000570 <__aeabi_dmul>
 800f424:	f7f1 fb9c 	bl	8000b60 <__aeabi_d2f>
  a_2 = (1.0 - alpha) / a_0;
 800f428:	4652      	mov	r2, sl
 800f42a:	465b      	mov	r3, fp
  a_1 = (-2.0 * cos_omega) / a_0;
 800f42c:	6038      	str	r0, [r7, #0]
  a_2 = (1.0 - alpha) / a_0;
 800f42e:	490f      	ldr	r1, [pc, #60]	; (800f46c <changeQ+0x174>)
 800f430:	2000      	movs	r0, #0
 800f432:	f7f0 fee9 	bl	8000208 <__aeabi_dsub>
 800f436:	462b      	mov	r3, r5
 800f438:	4622      	mov	r2, r4
 800f43a:	f7f1 f899 	bl	8000570 <__aeabi_dmul>
 800f43e:	f7f1 fb8f 	bl	8000b60 <__aeabi_d2f>
 800f442:	4b11      	ldr	r3, [pc, #68]	; (800f488 <changeQ+0x190>)
 800f444:	6018      	str	r0, [r3, #0]
  adjustFilterCutoff(-1);
}
 800f446:	b003      	add	sp, #12
 800f448:	ecbd 8b02 	vpop	{d8}
 800f44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f450:	20000030 	.word	0x20000030
 800f454:	20000028 	.word	0x20000028
 800f458:	3924b5be 	.word	0x3924b5be
 800f45c:	200050a0 	.word	0x200050a0
 800f460:	200050b8 	.word	0x200050b8
 800f464:	200050b4 	.word	0x200050b4
 800f468:	200050c0 	.word	0x200050c0
 800f46c:	3ff00000 	.word	0x3ff00000
 800f470:	20005094 	.word	0x20005094
 800f474:	20005090 	.word	0x20005090
 800f478:	3fe00000 	.word	0x3fe00000
 800f47c:	200050a8 	.word	0x200050a8
 800f480:	200050b0 	.word	0x200050b0
 800f484:	200050ac 	.word	0x200050ac
 800f488:	20005098 	.word	0x20005098

0800f48c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b0a4      	sub	sp, #144	; 0x90

  /* USER CODE BEGIN StartDefaultTask */
  osMutexDef (LED_mutex);    // Declare mutex
 800f490:	a824      	add	r0, sp, #144	; 0x90
 800f492:	2500      	movs	r5, #0
 800f494:	f840 5d90 	str.w	r5, [r0, #-144]!
  LED_mutex_id = osMutexCreate(osMutex(LED_mutex));
 800f498:	f7fc fc2e 	bl	800bcf8 <osMutexCreate>

  osMutexDef (I2C3_mutex);    // Declare mutex
 800f49c:	ab24      	add	r3, sp, #144	; 0x90
  LED_mutex_id = osMutexCreate(osMutex(LED_mutex));
 800f49e:	4a75      	ldr	r2, [pc, #468]	; (800f674 <StartDefaultTask+0x1e8>)
  osMutexDef (I2C3_mutex);    // Declare mutex
 800f4a0:	f843 5d8c 	str.w	r5, [r3, #-140]!
  LED_mutex_id = osMutexCreate(osMutex(LED_mutex));
 800f4a4:	6010      	str	r0, [r2, #0]
  I2C3_mutex_id = osMutexCreate(osMutex(I2C3_mutex));
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	f7fc fc26 	bl	800bcf8 <osMutexCreate>
 800f4ac:	4b72      	ldr	r3, [pc, #456]	; (800f678 <StartDefaultTask+0x1ec>)
  osMutexWait(I2C3_mutex_id, 5);

  osSemaphoreDef(capSampleSemaphore);
  capSampleSemaphoreHandle = osSemaphoreCreate (osSemaphore(capSampleSemaphore), 4);
 800f4ae:	4c73      	ldr	r4, [pc, #460]	; (800f67c <StartDefaultTask+0x1f0>)
  I2C3_mutex_id = osMutexCreate(osMutex(I2C3_mutex));
 800f4b0:	6018      	str	r0, [r3, #0]
  osMutexWait(I2C3_mutex_id, 5);
 800f4b2:	2105      	movs	r1, #5
 800f4b4:	f7fc fc24 	bl	800bd00 <osMutexWait>
  osSemaphoreDef(capSampleSemaphore);
 800f4b8:	a824      	add	r0, sp, #144	; 0x90
  capSampleSemaphoreHandle = osSemaphoreCreate (osSemaphore(capSampleSemaphore), 4);
 800f4ba:	2104      	movs	r1, #4
  osSemaphoreDef(capSampleSemaphore);
 800f4bc:	f840 5d88 	str.w	r5, [r0, #-136]!
  capSampleSemaphoreHandle = osSemaphoreCreate (osSemaphore(capSampleSemaphore), 4);
 800f4c0:	f7fc fc46 	bl	800bd50 <osSemaphoreCreate>
  osSemaphoreWait( capSampleSemaphoreHandle, 1);
 800f4c4:	2101      	movs	r1, #1
  capSampleSemaphoreHandle = osSemaphoreCreate (osSemaphore(capSampleSemaphore), 4);
 800f4c6:	6020      	str	r0, [r4, #0]
  osSemaphoreWait( capSampleSemaphoreHandle, 1);
 800f4c8:	f7fc fc56 	bl	800bd78 <osSemaphoreWait>
  osSemaphoreWait( capSampleSemaphoreHandle, 1);
 800f4cc:	6820      	ldr	r0, [r4, #0]
  osSemaphoreWait( capSampleSemaphoreHandle, 1);
  osSemaphoreWait( capSampleSemaphoreHandle, 1);

  osSemaphoreDef(lidarSampleReadySemaphore);
  lidarSampleReadySemaphoreHandle = osSemaphoreCreate (osSemaphore(lidarSampleReadySemaphore), 3);
 800f4ce:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 800f6c0 <StartDefaultTask+0x234>
  osSemaphoreWait( lidarSampleReadySemaphoreHandle, 1);
  osSemaphoreWait( lidarSampleReadySemaphoreHandle, 1);


  osSemaphoreDef(accSampleSemaphore);
  accSampleSemaphoreHandle = osSemaphoreCreate (osSemaphore(accSampleSemaphore), 2);
 800f4d2:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 800f6c4 <StartDefaultTask+0x238>
  osSemaphoreWait( accSampleSemaphoreHandle, 1);
  osSemaphoreWait( accSampleSemaphoreHandle, 1);

  osSemaphoreDef(transmitLED_bufferSemaphore);
  transmitLED_bufferSemaphoreHandle = osSemaphoreCreate (osSemaphore(transmitLED_bufferSemaphore), 5);
 800f4d6:	4e6a      	ldr	r6, [pc, #424]	; (800f680 <StartDefaultTask+0x1f4>)
  osTimerDef(resSampleTimer, ResistiveTouchSampler);
  resSampleTimerHandle = osTimerCreate(osTimer(resSampleTimer), osTimerPeriodic, (void *)0);
  osTimerStart(resSampleTimerHandle,100);

  osSemaphoreDef(bufferFillSemaphore);
  bufferFillSemaphoreHandle = osSemaphoreCreate (osSemaphore(bufferFillSemaphore), 4);
 800f4d8:	4f6a      	ldr	r7, [pc, #424]	; (800f684 <StartDefaultTask+0x1f8>)
  osSemaphoreWait( capSampleSemaphoreHandle, 1);
 800f4da:	2101      	movs	r1, #1
 800f4dc:	f7fc fc4c 	bl	800bd78 <osSemaphoreWait>
  osSemaphoreWait( capSampleSemaphoreHandle, 1);
 800f4e0:	6820      	ldr	r0, [r4, #0]
 800f4e2:	2101      	movs	r1, #1
 800f4e4:	f7fc fc48 	bl	800bd78 <osSemaphoreWait>
  osSemaphoreWait( capSampleSemaphoreHandle, 1);
 800f4e8:	6820      	ldr	r0, [r4, #0]
  osSemaphoreWait( bufferFillSemaphoreHandle, 1);
  osSemaphoreWait( bufferFillSemaphoreHandle, 1);
  osSemaphoreWait( bufferFillSemaphoreHandle, 1);

  osThreadDef(ledTransmitTask, bufferTransmitThread, osPriorityNormal, 0, 256);
 800f4ea:	4c67      	ldr	r4, [pc, #412]	; (800f688 <StartDefaultTask+0x1fc>)
  osSemaphoreWait( capSampleSemaphoreHandle, 1);
 800f4ec:	2101      	movs	r1, #1
 800f4ee:	f7fc fc43 	bl	800bd78 <osSemaphoreWait>
  osSemaphoreDef(lidarSampleReadySemaphore);
 800f4f2:	a824      	add	r0, sp, #144	; 0x90
  lidarSampleReadySemaphoreHandle = osSemaphoreCreate (osSemaphore(lidarSampleReadySemaphore), 3);
 800f4f4:	2103      	movs	r1, #3
  osSemaphoreDef(lidarSampleReadySemaphore);
 800f4f6:	f840 5d84 	str.w	r5, [r0, #-132]!
  lidarSampleReadySemaphoreHandle = osSemaphoreCreate (osSemaphore(lidarSampleReadySemaphore), 3);
 800f4fa:	f7fc fc29 	bl	800bd50 <osSemaphoreCreate>
  osSemaphoreWait( lidarSampleReadySemaphoreHandle, 1);
 800f4fe:	2101      	movs	r1, #1
  lidarSampleReadySemaphoreHandle = osSemaphoreCreate (osSemaphore(lidarSampleReadySemaphore), 3);
 800f500:	f8c8 0000 	str.w	r0, [r8]
  osSemaphoreWait( lidarSampleReadySemaphoreHandle, 1);
 800f504:	f7fc fc38 	bl	800bd78 <osSemaphoreWait>
  osSemaphoreWait( lidarSampleReadySemaphoreHandle, 1);
 800f508:	2101      	movs	r1, #1
 800f50a:	f8d8 0000 	ldr.w	r0, [r8]
 800f50e:	f7fc fc33 	bl	800bd78 <osSemaphoreWait>
  osSemaphoreWait( lidarSampleReadySemaphoreHandle, 1);
 800f512:	2101      	movs	r1, #1
 800f514:	f8d8 0000 	ldr.w	r0, [r8]
 800f518:	f7fc fc2e 	bl	800bd78 <osSemaphoreWait>
  osSemaphoreDef(accSampleSemaphore);
 800f51c:	a824      	add	r0, sp, #144	; 0x90
  accSampleSemaphoreHandle = osSemaphoreCreate (osSemaphore(accSampleSemaphore), 2);
 800f51e:	2102      	movs	r1, #2
  osSemaphoreDef(accSampleSemaphore);
 800f520:	f840 5d80 	str.w	r5, [r0, #-128]!
  accSampleSemaphoreHandle = osSemaphoreCreate (osSemaphore(accSampleSemaphore), 2);
 800f524:	f7fc fc14 	bl	800bd50 <osSemaphoreCreate>
  osSemaphoreWait( accSampleSemaphoreHandle, 1);
 800f528:	2101      	movs	r1, #1
  accSampleSemaphoreHandle = osSemaphoreCreate (osSemaphore(accSampleSemaphore), 2);
 800f52a:	f8c9 0000 	str.w	r0, [r9]
  osSemaphoreWait( accSampleSemaphoreHandle, 1);
 800f52e:	f7fc fc23 	bl	800bd78 <osSemaphoreWait>
  osSemaphoreWait( accSampleSemaphoreHandle, 1);
 800f532:	2101      	movs	r1, #1
 800f534:	f8d9 0000 	ldr.w	r0, [r9]
 800f538:	f7fc fc1e 	bl	800bd78 <osSemaphoreWait>
  osSemaphoreDef(transmitLED_bufferSemaphore);
 800f53c:	a824      	add	r0, sp, #144	; 0x90
  transmitLED_bufferSemaphoreHandle = osSemaphoreCreate (osSemaphore(transmitLED_bufferSemaphore), 5);
 800f53e:	2105      	movs	r1, #5
  osSemaphoreDef(transmitLED_bufferSemaphore);
 800f540:	f840 5d7c 	str.w	r5, [r0, #-124]!
  transmitLED_bufferSemaphoreHandle = osSemaphoreCreate (osSemaphore(transmitLED_bufferSemaphore), 5);
 800f544:	f7fc fc04 	bl	800bd50 <osSemaphoreCreate>
  osSemaphoreWait( transmitLED_bufferSemaphoreHandle, 1);
 800f548:	2101      	movs	r1, #1
  transmitLED_bufferSemaphoreHandle = osSemaphoreCreate (osSemaphore(transmitLED_bufferSemaphore), 5);
 800f54a:	6030      	str	r0, [r6, #0]
  osSemaphoreWait( transmitLED_bufferSemaphoreHandle, 1);
 800f54c:	f7fc fc14 	bl	800bd78 <osSemaphoreWait>
  osSemaphoreWait( transmitLED_bufferSemaphoreHandle, 1);
 800f550:	6830      	ldr	r0, [r6, #0]
 800f552:	2101      	movs	r1, #1
 800f554:	f7fc fc10 	bl	800bd78 <osSemaphoreWait>
  osSemaphoreWait( transmitLED_bufferSemaphoreHandle, 1);
 800f558:	6830      	ldr	r0, [r6, #0]
 800f55a:	2101      	movs	r1, #1
 800f55c:	f7fc fc0c 	bl	800bd78 <osSemaphoreWait>
  osSemaphoreWait( transmitLED_bufferSemaphoreHandle, 1);
 800f560:	6830      	ldr	r0, [r6, #0]
 800f562:	2101      	movs	r1, #1
 800f564:	f7fc fc08 	bl	800bd78 <osSemaphoreWait>
  osSemaphoreWait( transmitLED_bufferSemaphoreHandle, 1);
 800f568:	6830      	ldr	r0, [r6, #0]
 800f56a:	2101      	movs	r1, #1
 800f56c:	f7fc fc04 	bl	800bd78 <osSemaphoreWait>
  osTimerDef(accSampleTimer, accGiveSemaphore);
 800f570:	a824      	add	r0, sp, #144	; 0x90
 800f572:	4b46      	ldr	r3, [pc, #280]	; (800f68c <StartDefaultTask+0x200>)
 800f574:	f840 3d78 	str.w	r3, [r0, #-120]!
  accSampleTimerHandle = osTimerCreate(osTimer(accSampleTimer), osTimerPeriodic, (void *)0);
 800f578:	462a      	mov	r2, r5
 800f57a:	2101      	movs	r1, #1
 800f57c:	f7fc fb4e 	bl	800bc1c <osTimerCreate>
  osTimerDef(povExitTimer, enable_buttons);
 800f580:	ab24      	add	r3, sp, #144	; 0x90
 800f582:	4943      	ldr	r1, [pc, #268]	; (800f690 <StartDefaultTask+0x204>)
 800f584:	f843 1d74 	str.w	r1, [r3, #-116]!
  accSampleTimerHandle = osTimerCreate(osTimer(accSampleTimer), osTimerPeriodic, (void *)0);
 800f588:	4a42      	ldr	r2, [pc, #264]	; (800f694 <StartDefaultTask+0x208>)
  povExitTimerHandle = osTimerCreate(osTimer(povExitTimer), osTimerOnce, (void *)0);
 800f58a:	4629      	mov	r1, r5
  accSampleTimerHandle = osTimerCreate(osTimer(accSampleTimer), osTimerPeriodic, (void *)0);
 800f58c:	6010      	str	r0, [r2, #0]
  povExitTimerHandle = osTimerCreate(osTimer(povExitTimer), osTimerOnce, (void *)0);
 800f58e:	462a      	mov	r2, r5
 800f590:	4618      	mov	r0, r3
 800f592:	f7fc fb43 	bl	800bc1c <osTimerCreate>
  osTimerDef(capSampleTimer, capGiveSemaphore);
 800f596:	ab24      	add	r3, sp, #144	; 0x90
 800f598:	493f      	ldr	r1, [pc, #252]	; (800f698 <StartDefaultTask+0x20c>)
 800f59a:	f843 1d70 	str.w	r1, [r3, #-112]!
  povExitTimerHandle = osTimerCreate(osTimer(povExitTimer), osTimerOnce, (void *)0);
 800f59e:	4a3f      	ldr	r2, [pc, #252]	; (800f69c <StartDefaultTask+0x210>)
  capSampleTimerHandle = osTimerCreate(osTimer(capSampleTimer), osTimerPeriodic, (void *)0);
 800f5a0:	2101      	movs	r1, #1
  povExitTimerHandle = osTimerCreate(osTimer(povExitTimer), osTimerOnce, (void *)0);
 800f5a2:	6010      	str	r0, [r2, #0]
  capSampleTimerHandle = osTimerCreate(osTimer(capSampleTimer), osTimerPeriodic, (void *)0);
 800f5a4:	462a      	mov	r2, r5
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	f7fc fb38 	bl	800bc1c <osTimerCreate>
  osTimerDef(resSampleTimer, ResistiveTouchSampler);
 800f5ac:	ab24      	add	r3, sp, #144	; 0x90
 800f5ae:	493c      	ldr	r1, [pc, #240]	; (800f6a0 <StartDefaultTask+0x214>)
 800f5b0:	f843 1d6c 	str.w	r1, [r3, #-108]!
  capSampleTimerHandle = osTimerCreate(osTimer(capSampleTimer), osTimerPeriodic, (void *)0);
 800f5b4:	4a3b      	ldr	r2, [pc, #236]	; (800f6a4 <StartDefaultTask+0x218>)
  resSampleTimerHandle = osTimerCreate(osTimer(resSampleTimer), osTimerPeriodic, (void *)0);
 800f5b6:	2101      	movs	r1, #1
  capSampleTimerHandle = osTimerCreate(osTimer(capSampleTimer), osTimerPeriodic, (void *)0);
 800f5b8:	6010      	str	r0, [r2, #0]
  resSampleTimerHandle = osTimerCreate(osTimer(resSampleTimer), osTimerPeriodic, (void *)0);
 800f5ba:	462a      	mov	r2, r5
 800f5bc:	4618      	mov	r0, r3
 800f5be:	f7fc fb2d 	bl	800bc1c <osTimerCreate>
 800f5c2:	4b39      	ldr	r3, [pc, #228]	; (800f6a8 <StartDefaultTask+0x21c>)
  osTimerStart(resSampleTimerHandle,100);
 800f5c4:	2164      	movs	r1, #100	; 0x64
  resSampleTimerHandle = osTimerCreate(osTimer(resSampleTimer), osTimerPeriodic, (void *)0);
 800f5c6:	6018      	str	r0, [r3, #0]
  osTimerStart(resSampleTimerHandle,100);
 800f5c8:	f7fc fb3c 	bl	800bc44 <osTimerStart>
  osSemaphoreDef(bufferFillSemaphore);
 800f5cc:	a824      	add	r0, sp, #144	; 0x90
  bufferFillSemaphoreHandle = osSemaphoreCreate (osSemaphore(bufferFillSemaphore), 4);
 800f5ce:	2104      	movs	r1, #4
  osSemaphoreDef(bufferFillSemaphore);
 800f5d0:	f840 5d68 	str.w	r5, [r0, #-104]!
  bufferFillSemaphoreHandle = osSemaphoreCreate (osSemaphore(bufferFillSemaphore), 4);
 800f5d4:	f7fc fbbc 	bl	800bd50 <osSemaphoreCreate>
  osSemaphoreWait( bufferFillSemaphoreHandle, 1);
 800f5d8:	2101      	movs	r1, #1
  bufferFillSemaphoreHandle = osSemaphoreCreate (osSemaphore(bufferFillSemaphore), 4);
 800f5da:	6038      	str	r0, [r7, #0]
  osSemaphoreWait( bufferFillSemaphoreHandle, 1);
 800f5dc:	f7fc fbcc 	bl	800bd78 <osSemaphoreWait>
  osSemaphoreWait( bufferFillSemaphoreHandle, 1);
 800f5e0:	6838      	ldr	r0, [r7, #0]
 800f5e2:	2101      	movs	r1, #1
 800f5e4:	f7fc fbc8 	bl	800bd78 <osSemaphoreWait>
  osSemaphoreWait( bufferFillSemaphoreHandle, 1);
 800f5e8:	6838      	ldr	r0, [r7, #0]
 800f5ea:	2101      	movs	r1, #1
 800f5ec:	f7fc fbc4 	bl	800bd78 <osSemaphoreWait>
  osThreadDef(ledTransmitTask, bufferTransmitThread, osPriorityNormal, 0, 256);
 800f5f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f5f2:	af0b      	add	r7, sp, #44	; 0x2c
 800f5f4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f5f6:	4626      	mov	r6, r4
  ledTransmitHandle = osThreadCreate(osThread(ledTransmitTask), NULL);
 800f5f8:	4629      	mov	r1, r5
  osThreadDef(ledTransmitTask, bufferTransmitThread, osPriorityNormal, 0, 256);
 800f5fa:	f856 3b04 	ldr.w	r3, [r6], #4
 800f5fe:	603b      	str	r3, [r7, #0]
  ledTransmitHandle = osThreadCreate(osThread(ledTransmitTask), NULL);
 800f600:	a80b      	add	r0, sp, #44	; 0x2c
 800f602:	f7fc faeb 	bl	800bbdc <osThreadCreate>
 800f606:	4b29      	ldr	r3, [pc, #164]	; (800f6ac <StartDefaultTask+0x220>)
 800f608:	6018      	str	r0, [r3, #0]

  osThreadDef(bufferFillTask, prepBuffer, osPriorityNormal, 0, 1024);
 800f60a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f60c:	af10      	add	r7, sp, #64	; 0x40
 800f60e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f610:	6833      	ldr	r3, [r6, #0]
 800f612:	603b      	str	r3, [r7, #0]
  bufferFillHandle = osThreadCreate(osThread(bufferFillTask), NULL);
 800f614:	4629      	mov	r1, r5
 800f616:	a810      	add	r0, sp, #64	; 0x40
 800f618:	f7fc fae0 	bl	800bbdc <osThreadCreate>
 800f61c:	4b24      	ldr	r3, [pc, #144]	; (800f6b0 <StartDefaultTask+0x224>)

  osThreadDef(lidarMeasurementTask, LidarMeasurement, osPriorityLow, 0, 256);
 800f61e:	f104 0718 	add.w	r7, r4, #24
  bufferFillHandle = osThreadCreate(osThread(bufferFillTask), NULL);
 800f622:	6018      	str	r0, [r3, #0]
  osThreadDef(lidarMeasurementTask, LidarMeasurement, osPriorityLow, 0, 256);
 800f624:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f626:	ae15      	add	r6, sp, #84	; 0x54
 800f628:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	6033      	str	r3, [r6, #0]
  lidarMeasurementHandle = osThreadCreate(osThread(lidarMeasurementTask), NULL);
 800f62e:	4629      	mov	r1, r5
 800f630:	a815      	add	r0, sp, #84	; 0x54
 800f632:	f7fc fad3 	bl	800bbdc <osThreadCreate>
 800f636:	4b1f      	ldr	r3, [pc, #124]	; (800f6b4 <StartDefaultTask+0x228>)

  osThreadDef(capSampleTask, Sample_Cap_Touch, osPriorityLow, 0, 256);
 800f638:	f104 072c 	add.w	r7, r4, #44	; 0x2c
  lidarMeasurementHandle = osThreadCreate(osThread(lidarMeasurementTask), NULL);
 800f63c:	6018      	str	r0, [r3, #0]
  osThreadDef(capSampleTask, Sample_Cap_Touch, osPriorityLow, 0, 256);
 800f63e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f640:	ae1a      	add	r6, sp, #104	; 0x68
 800f642:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	6033      	str	r3, [r6, #0]
  capSampleHandle = osThreadCreate(osThread(capSampleTask), NULL);
 800f648:	4629      	mov	r1, r5
 800f64a:	a81a      	add	r0, sp, #104	; 0x68
 800f64c:	f7fc fac6 	bl	800bbdc <osThreadCreate>
 800f650:	4b19      	ldr	r3, [pc, #100]	; (800f6b8 <StartDefaultTask+0x22c>)

  osThreadDef(accSampleTask, accelerometerThread, osPriorityLow, 0, 256);
 800f652:	3440      	adds	r4, #64	; 0x40
  capSampleHandle = osThreadCreate(osThread(capSampleTask), NULL);
 800f654:	6018      	str	r0, [r3, #0]
  osThreadDef(accSampleTask, accelerometerThread, osPriorityLow, 0, 256);
 800f656:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f658:	ae1f      	add	r6, sp, #124	; 0x7c
 800f65a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f65c:	6823      	ldr	r3, [r4, #0]
 800f65e:	6033      	str	r3, [r6, #0]
  accSampleHandle = osThreadCreate(osThread(accSampleTask), NULL);
 800f660:	4629      	mov	r1, r5
 800f662:	a81f      	add	r0, sp, #124	; 0x7c
 800f664:	f7fc faba 	bl	800bbdc <osThreadCreate>
 800f668:	4b14      	ldr	r3, [pc, #80]	; (800f6bc <StartDefaultTask+0x230>)
 800f66a:	6018      	str	r0, [r3, #0]

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800f66c:	2001      	movs	r0, #1
 800f66e:	f7fc facd 	bl	800bc0c <osDelay>
 800f672:	e7fb      	b.n	800f66c <StartDefaultTask+0x1e0>
 800f674:	2000547c 	.word	0x2000547c
 800f678:	20005450 	.word	0x20005450
 800f67c:	20005534 	.word	0x20005534
 800f680:	20005468 	.word	0x20005468
 800f684:	20005498 	.word	0x20005498
 800f688:	080170e8 	.word	0x080170e8
 800f68c:	0800e459 	.word	0x0800e459
 800f690:	080111a5 	.word	0x080111a5
 800f694:	20005474 	.word	0x20005474
 800f698:	0800e99d 	.word	0x0800e99d
 800f69c:	20005530 	.word	0x20005530
 800f6a0:	08010bf1 	.word	0x08010bf1
 800f6a4:	20005524 	.word	0x20005524
 800f6a8:	20005528 	.word	0x20005528
 800f6ac:	20005a04 	.word	0x20005a04
 800f6b0:	200059f4 	.word	0x200059f4
 800f6b4:	20005a0c 	.word	0x20005a0c
 800f6b8:	20005a00 	.word	0x20005a00
 800f6bc:	200059fc 	.word	0x200059fc
 800f6c0:	20005a08 	.word	0x20005a08
 800f6c4:	20005458 	.word	0x20005458

0800f6c8 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 800f6c8:	b530      	push	{r4, r5, lr}
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800f6ca:	4d07      	ldr	r5, [pc, #28]	; (800f6e8 <MX_FREERTOS_Init+0x20>)
 800f6cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void MX_FREERTOS_Init(void) {
 800f6ce:	b087      	sub	sp, #28
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800f6d0:	ac01      	add	r4, sp, #4
 800f6d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f6d4:	682b      	ldr	r3, [r5, #0]
 800f6d6:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800f6d8:	2100      	movs	r1, #0
 800f6da:	a801      	add	r0, sp, #4
 800f6dc:	f7fc fa7e 	bl	800bbdc <osThreadCreate>
 800f6e0:	4b02      	ldr	r3, [pc, #8]	; (800f6ec <MX_FREERTOS_Init+0x24>)
 800f6e2:	6018      	str	r0, [r3, #0]
}
 800f6e4:	b007      	add	sp, #28
 800f6e6:	bd30      	pop	{r4, r5, pc}
 800f6e8:	0801714c 	.word	0x0801714c
 800f6ec:	200059f8 	.word	0x200059f8

0800f6f0 <MX_GPIO_Init>:
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
     PC2   ------> SharedAnalog_PC2
*/
void MX_GPIO_Init(void)
{
 800f6f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6f4:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f6f6:	2400      	movs	r4, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800f6f8:	4b7a      	ldr	r3, [pc, #488]	; (800f8e4 <MX_GPIO_Init+0x1f4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f6fa:	9408      	str	r4, [sp, #32]
 800f6fc:	9407      	str	r4, [sp, #28]
 800f6fe:	9409      	str	r4, [sp, #36]	; 0x24
 800f700:	940a      	str	r4, [sp, #40]	; 0x28
 800f702:	940b      	str	r4, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800f704:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, POWER_SWITCH_Pin|LED_SS_Pin|BT_EN_Pin, GPIO_PIN_RESET);
 800f706:	4f78      	ldr	r7, [pc, #480]	; (800f8e8 <MX_GPIO_Init+0x1f8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_LAT_GPIO_Port, LED_LAT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BT_CMD_GPIO_Port, BT_CMD_Pin, GPIO_PIN_SET);
 800f708:	4e78      	ldr	r6, [pc, #480]	; (800f8ec <MX_GPIO_Init+0x1fc>)

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin|BUTTON_9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f70a:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 800f8fc <MX_GPIO_Init+0x20c>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8 
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f70e:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 800f900 <MX_GPIO_Init+0x210>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800f712:	f042 0210 	orr.w	r2, r2, #16
 800f716:	64da      	str	r2, [r3, #76]	; 0x4c
 800f718:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f71a:	f002 0210 	and.w	r2, r2, #16
 800f71e:	9201      	str	r2, [sp, #4]
 800f720:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800f722:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f724:	f042 0204 	orr.w	r2, r2, #4
 800f728:	64da      	str	r2, [r3, #76]	; 0x4c
 800f72a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f72c:	f002 0204 	and.w	r2, r2, #4
 800f730:	9202      	str	r2, [sp, #8]
 800f732:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800f734:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f736:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f73a:	64da      	str	r2, [r3, #76]	; 0x4c
 800f73c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f73e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800f742:	9203      	str	r2, [sp, #12]
 800f744:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800f746:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f748:	f042 0201 	orr.w	r2, r2, #1
 800f74c:	64da      	str	r2, [r3, #76]	; 0x4c
 800f74e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f750:	f002 0201 	and.w	r2, r2, #1
 800f754:	9204      	str	r2, [sp, #16]
 800f756:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800f758:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f75a:	f042 0202 	orr.w	r2, r2, #2
 800f75e:	64da      	str	r2, [r3, #76]	; 0x4c
 800f760:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f762:	f002 0202 	and.w	r2, r2, #2
 800f766:	9205      	str	r2, [sp, #20]
 800f768:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800f76a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f76c:	f042 0208 	orr.w	r2, r2, #8
 800f770:	64da      	str	r2, [r3, #76]	; 0x4c
 800f772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f774:	f003 0308 	and.w	r3, r3, #8
 800f778:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, POWER_SWITCH_Pin|LED_SS_Pin|BT_EN_Pin, GPIO_PIN_RESET);
 800f77a:	4622      	mov	r2, r4
 800f77c:	4638      	mov	r0, r7
 800f77e:	f240 1111 	movw	r1, #273	; 0x111
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800f782:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, POWER_SWITCH_Pin|LED_SS_Pin|BT_EN_Pin, GPIO_PIN_RESET);
 800f784:	f7f2 fd42 	bl	800220c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_LAT_GPIO_Port, LED_LAT_Pin, GPIO_PIN_RESET);
 800f788:	4622      	mov	r2, r4
 800f78a:	2104      	movs	r1, #4
 800f78c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800f790:	f7f2 fd3c 	bl	800220c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BT_CMD_GPIO_Port, BT_CMD_Pin, GPIO_PIN_SET);
 800f794:	4630      	mov	r0, r6
 800f796:	2201      	movs	r2, #1
 800f798:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f79c:	f7f2 fd36 	bl	800220c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, VL_XSHUT_Pin|HALL_CNTRL_Pin|SD_CARD_EN_Pin, GPIO_PIN_RESET);
 800f7a0:	4622      	mov	r2, r4
 800f7a2:	4630      	mov	r0, r6
 800f7a4:	f248 01c0 	movw	r1, #32960	; 0x80c0
 800f7a8:	f7f2 fd30 	bl	800220c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800f7ac:	a907      	add	r1, sp, #28
 800f7ae:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = BUTTON_3_Pin|BUTTON_8_Pin;
 800f7b0:	230c      	movs	r3, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f7b2:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Pin = BUTTON_3_Pin|BUTTON_8_Pin;
 800f7b6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f7b8:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f7ba:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800f7bc:	f7f2 fc0a 	bl	8001fd4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800f7c0:	a907      	add	r1, sp, #28
 800f7c2:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = POWER_SWITCH_Pin|LED_SS_Pin|BT_EN_Pin;
 800f7c4:	f240 1311 	movw	r3, #273	; 0x111
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f7c8:	2503      	movs	r5, #3
  GPIO_InitStruct.Pin = POWER_SWITCH_Pin|LED_SS_Pin|BT_EN_Pin;
 800f7ca:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f7cc:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f7ce:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f7d0:	f8cd 8020 	str.w	r8, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800f7d4:	f7f2 fbfe 	bl	8001fd4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800f7d8:	4638      	mov	r0, r7
 800f7da:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10 
 800f7dc:	f64f 43e2 	movw	r3, #64738	; 0xfce2
 800f7e0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f7e2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f7e4:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800f7e6:	f7f2 fbf5 	bl	8001fd4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f7ea:	a907      	add	r1, sp, #28
 800f7ec:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = BUTTON_2_Pin|BUTTON_9_Pin;
 800f7ee:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 800f7f2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f7f4:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f7f6:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f7f8:	f7f2 fbec 	bl	8001fd4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = HALL_OUTPUT_Pin|GPIO_PIN_6;
 800f7fc:	2344      	movs	r3, #68	; 0x44
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f7fe:	4650      	mov	r0, sl
 800f800:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = HALL_OUTPUT_Pin|GPIO_PIN_6;
 800f802:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f804:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f806:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f808:	f7f2 fbe4 	bl	8001fd4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f80c:	a907      	add	r1, sp, #28
 800f80e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800f812:	2702      	movs	r7, #2
  GPIO_InitStruct.Pin = BUTTON_7_Pin|BUTTON_1_Pin;
 800f814:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f816:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f818:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f81a:	f7f2 fbdb 	bl	8001fd4 <HAL_GPIO_Init>
  HAL_GPIO_Init(LED_LAT_GPIO_Port, &GPIO_InitStruct);
 800f81e:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = LED_LAT_Pin;
 800f820:	2304      	movs	r3, #4
  HAL_GPIO_Init(LED_LAT_GPIO_Port, &GPIO_InitStruct);
 800f822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LED_LAT_Pin;
 800f826:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f828:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f82c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800f82e:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(LED_LAT_GPIO_Port, &GPIO_InitStruct);
 800f830:	f7f2 fbd0 	bl	8001fd4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f834:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11 
 800f836:	f649 03c8 	movw	r3, #39112	; 0x98c8
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f83a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11 
 800f83e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f840:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f842:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f844:	f7f2 fbc6 	bl	8001fd4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f848:	a907      	add	r1, sp, #28
 800f84a:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_14 
 800f84c:	f24d 331b 	movw	r3, #54043	; 0xd31b
 800f850:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f852:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f854:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f856:	f7f2 fbbd 	bl	8001fd4 <HAL_GPIO_Init>
                           PD3 PD4 PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1 
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f85a:	a907      	add	r1, sp, #28
 800f85c:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1 
 800f85e:	f242 133b 	movw	r3, #8507	; 0x213b
 800f862:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f864:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f866:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f868:	f7f2 fbb4 	bl	8001fd4 <HAL_GPIO_Init>
  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BT_CMD_Pin|VL_XSHUT_Pin|HALL_CNTRL_Pin|SD_CARD_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f86c:	a907      	add	r1, sp, #28
 800f86e:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = BT_CMD_Pin|VL_XSHUT_Pin|HALL_CNTRL_Pin|SD_CARD_EN_Pin;
 800f870:	f248 23c0 	movw	r3, #33472	; 0x82c0
 800f874:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f876:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f87a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f87c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f87e:	f7f2 fba9 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BUTTON_6_Pin|BUTTON_10_Pin|BUTTON_5_Pin|BUTTON_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f882:	4630      	mov	r0, r6
 800f884:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = BUTTON_6_Pin|BUTTON_10_Pin|BUTTON_5_Pin|BUTTON_4_Pin;
 800f886:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800f88a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f88c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f88e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f890:	f7f2 fba0 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VL_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(VL_INT_GPIO_Port, &GPIO_InitStruct);
 800f894:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = VL_INT_Pin;
 800f896:	f44f 7280 	mov.w	r2, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800f89a:	4b15      	ldr	r3, [pc, #84]	; (800f8f0 <MX_GPIO_Init+0x200>)
  GPIO_InitStruct.Pin = VL_INT_Pin;
 800f89c:	9207      	str	r2, [sp, #28]
  HAL_GPIO_Init(VL_INT_GPIO_Port, &GPIO_InitStruct);
 800f89e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800f8a2:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8a4:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(VL_INT_GPIO_Port, &GPIO_InitStruct);
 800f8a6:	f7f2 fb95 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAP_ALERT_Pin;
 800f8aa:	2220      	movs	r2, #32
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(CAP_ALERT_GPIO_Port, &GPIO_InitStruct);
 800f8ac:	4648      	mov	r0, r9
 800f8ae:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800f8b0:	4b10      	ldr	r3, [pc, #64]	; (800f8f4 <MX_GPIO_Init+0x204>)
  GPIO_InitStruct.Pin = CAP_ALERT_Pin;
 800f8b2:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800f8b4:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800f8b6:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(CAP_ALERT_GPIO_Port, &GPIO_InitStruct);
 800f8b8:	f7f2 fb8c 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800f8bc:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800f8be:	a907      	add	r1, sp, #28
 800f8c0:	480d      	ldr	r0, [pc, #52]	; (800f8f8 <MX_GPIO_Init+0x208>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800f8c2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f8c4:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8c6:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800f8c8:	f7f2 fb84 	bl	8001fd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800f8cc:	4622      	mov	r2, r4
 800f8ce:	2105      	movs	r1, #5
 800f8d0:	2017      	movs	r0, #23
 800f8d2:	f7f1 ff8d 	bl	80017f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800f8d6:	2017      	movs	r0, #23
 800f8d8:	f7f1 ffc0 	bl	800185c <HAL_NVIC_EnableIRQ>

}
 800f8dc:	b00c      	add	sp, #48	; 0x30
 800f8de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8e2:	bf00      	nop
 800f8e4:	40021000 	.word	0x40021000
 800f8e8:	48001000 	.word	0x48001000
 800f8ec:	48000c00 	.word	0x48000c00
 800f8f0:	10210000 	.word	0x10210000
 800f8f4:	10110000 	.word	0x10110000
 800f8f8:	48001c00 	.word	0x48001c00
 800f8fc:	48000800 	.word	0x48000800
 800f900:	48000400 	.word	0x48000400

0800f904 <HALL_Handler>:

void resetIntTracker(void){
	POV_intTracker = 0;
}

void HALL_Handler(void){
 800f904:	b510      	push	{r4, lr}
//	itoa(rounds, temp_buf2, 10);
//	HAL_UART_Transmit(&huart3, (uint8_t*) temp_buf2, sizeof(temp_buf2), 10);
//	char str[5] = "\n\r";
//	HAL_UART_Transmit(&huart3, (uint8_t*) str, sizeof(str), 10);

	if(countUp){
 800f906:	4922      	ldr	r1, [pc, #136]	; (800f990 <HALL_Handler+0x8c>)
 800f908:	780b      	ldrb	r3, [r1, #0]
 800f90a:	b1cb      	cbz	r3, 800f940 <HALL_Handler+0x3c>
		intTracker++;
 800f90c:	4b21      	ldr	r3, [pc, #132]	; (800f994 <HALL_Handler+0x90>)
 800f90e:	781a      	ldrb	r2, [r3, #0]
 800f910:	3201      	adds	r2, #1
 800f912:	b252      	sxtb	r2, r2
 800f914:	701a      	strb	r2, [r3, #0]
	}
	else if(countDown){ //can remove this "if check" once confident code works properly
		intTracker--;
	}

	if(intTracker >= (ROTATION_STEPS-1)){
 800f916:	781a      	ldrb	r2, [r3, #0]
 800f918:	b252      	sxtb	r2, r2
 800f91a:	2a04      	cmp	r2, #4
 800f91c:	dd1c      	ble.n	800f958 <HALL_Handler+0x54>
		countDown 	= 1;
 800f91e:	4a1e      	ldr	r2, [pc, #120]	; (800f998 <HALL_Handler+0x94>)
 800f920:	2001      	movs	r0, #1
		countUp 	= 0;
 800f922:	2300      	movs	r3, #0
		countDown 	= 1;
 800f924:	7010      	strb	r0, [r2, #0]
		countUp 	= 0;
 800f926:	700b      	strb	r3, [r1, #0]
	else if(intTracker <= 0){
		countDown 	= 0;
		countUp 	= 1;
	}

	setWavetableAmplitude(&intTracker);
 800f928:	481a      	ldr	r0, [pc, #104]	; (800f994 <HALL_Handler+0x90>)
 800f92a:	f002 fa6b 	bl	8011e04 <setWavetableAmplitude>

	POV_intTracker++;
 800f92e:	4a1b      	ldr	r2, [pc, #108]	; (800f99c <HALL_Handler+0x98>)
 800f930:	7813      	ldrb	r3, [r2, #0]
 800f932:	3301      	adds	r3, #1
 800f934:	b2db      	uxtb	r3, r3
 800f936:	7013      	strb	r3, [r2, #0]
//	if(POV_intTracker == TICK_THRESH){
//		RPR = 2*(DWT->CYCCNT);
//		DWT->CYCCNT = 0; // reset the counter
//	}

	if(POV_intTracker == HALF_MAGNET_CNT){
 800f938:	7813      	ldrb	r3, [r2, #0]
 800f93a:	2b03      	cmp	r3, #3
 800f93c:	d018      	beq.n	800f970 <HALL_Handler+0x6c>
 800f93e:	bd10      	pop	{r4, pc}
	else if(countDown){ //can remove this "if check" once confident code works properly
 800f940:	4b15      	ldr	r3, [pc, #84]	; (800f998 <HALL_Handler+0x94>)
 800f942:	781b      	ldrb	r3, [r3, #0]
 800f944:	b193      	cbz	r3, 800f96c <HALL_Handler+0x68>
		intTracker--;
 800f946:	4b13      	ldr	r3, [pc, #76]	; (800f994 <HALL_Handler+0x90>)
 800f948:	781a      	ldrb	r2, [r3, #0]
 800f94a:	3a01      	subs	r2, #1
 800f94c:	b252      	sxtb	r2, r2
 800f94e:	701a      	strb	r2, [r3, #0]
	if(intTracker >= (ROTATION_STEPS-1)){
 800f950:	781a      	ldrb	r2, [r3, #0]
 800f952:	b252      	sxtb	r2, r2
 800f954:	2a04      	cmp	r2, #4
 800f956:	dce2      	bgt.n	800f91e <HALL_Handler+0x1a>
	else if(intTracker <= 0){
 800f958:	781b      	ldrb	r3, [r3, #0]
 800f95a:	b25b      	sxtb	r3, r3
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	dce3      	bgt.n	800f928 <HALL_Handler+0x24>
		countDown 	= 0;
 800f960:	4a0d      	ldr	r2, [pc, #52]	; (800f998 <HALL_Handler+0x94>)
 800f962:	2000      	movs	r0, #0
		countUp 	= 1;
 800f964:	2301      	movs	r3, #1
		countDown 	= 0;
 800f966:	7010      	strb	r0, [r2, #0]
		countUp 	= 1;
 800f968:	700b      	strb	r3, [r1, #0]
 800f96a:	e7dd      	b.n	800f928 <HALL_Handler+0x24>
 800f96c:	4b09      	ldr	r3, [pc, #36]	; (800f994 <HALL_Handler+0x90>)
 800f96e:	e7d2      	b.n	800f916 <HALL_Handler+0x12>
		RPR = (DWT->CYCCNT);
 800f970:	4c0b      	ldr	r4, [pc, #44]	; (800f9a0 <HALL_Handler+0x9c>)
 800f972:	4b0c      	ldr	r3, [pc, #48]	; (800f9a4 <HALL_Handler+0xa0>)
 800f974:	6860      	ldr	r0, [r4, #4]
 800f976:	2100      	movs	r1, #0
 800f978:	e9c3 0100 	strd	r0, r1, [r3]
		DWT->CYCCNT = 0; // reset the counter
 800f97c:	2000      	movs	r0, #0

		POV_intTracker = 1;
 800f97e:	2101      	movs	r1, #1
		DWT->CYCCNT = 0; // reset the counter
 800f980:	6060      	str	r0, [r4, #4]
		POV_intTracker = 1;
 800f982:	7011      	strb	r1, [r2, #0]
		POV_handler(RPR);
 800f984:	e9d3 0100 	ldrd	r0, r1, [r3]
	}
}
 800f988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		POV_handler(RPR);
 800f98c:	f000 bd54 	b.w	8010438 <POV_handler>
 800f990:	20000044 	.word	0x20000044
 800f994:	200050d9 	.word	0x200050d9
 800f998:	200050d8 	.word	0x200050d8
 800f99c:	200050cc 	.word	0x200050cc
 800f9a0:	e0001000 	.word	0xe0001000
 800f9a4:	200050d0 	.word	0x200050d0

0800f9a8 <MX_I2C1_Init>:

/* I2C1 init function */
void MX_I2C1_Init(void)
{

  hi2c1.Instance = I2C1;
 800f9a8:	4b13      	ldr	r3, [pc, #76]	; (800f9f8 <MX_I2C1_Init+0x50>)
 800f9aa:	4a14      	ldr	r2, [pc, #80]	; (800f9fc <MX_I2C1_Init+0x54>)
{
 800f9ac:	b510      	push	{r4, lr}
  hi2c1.Init.Timing = 0x10909CEC;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800f9ae:	2101      	movs	r1, #1
  hi2c1.Init.Timing = 0x10909CEC;
 800f9b0:	4c13      	ldr	r4, [pc, #76]	; (800fa00 <MX_I2C1_Init+0x58>)
  hi2c1.Instance = I2C1;
 800f9b2:	601a      	str	r2, [r3, #0]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800f9b4:	4618      	mov	r0, r3
  hi2c1.Init.OwnAddress1 = 0;
 800f9b6:	2200      	movs	r2, #0
  hi2c1.Init.Timing = 0x10909CEC;
 800f9b8:	605c      	str	r4, [r3, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800f9ba:	60d9      	str	r1, [r3, #12]
  hi2c1.Init.OwnAddress1 = 0;
 800f9bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800f9be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800f9c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800f9c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800f9c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800f9c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800f9c8:	f7f2 fd5a 	bl	8002480 <HAL_I2C_Init>
 800f9cc:	b988      	cbnz	r0, 800f9f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800f9ce:	2100      	movs	r1, #0
 800f9d0:	4809      	ldr	r0, [pc, #36]	; (800f9f8 <MX_I2C1_Init+0x50>)
 800f9d2:	f7f4 fa3d 	bl	8003e50 <HAL_I2CEx_ConfigAnalogFilter>
 800f9d6:	b948      	cbnz	r0, 800f9ec <MX_I2C1_Init+0x44>
  {
    Error_Handler();
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800f9d8:	2100      	movs	r1, #0
 800f9da:	4807      	ldr	r0, [pc, #28]	; (800f9f8 <MX_I2C1_Init+0x50>)
 800f9dc:	f7f4 fa62 	bl	8003ea4 <HAL_I2CEx_ConfigDigitalFilter>
 800f9e0:	b900      	cbnz	r0, 800f9e4 <MX_I2C1_Init+0x3c>
 800f9e2:	bd10      	pop	{r4, pc}
  {
    Error_Handler();
  }

}
 800f9e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800f9e8:	f001 b8a6 	b.w	8010b38 <Error_Handler>
    Error_Handler();
 800f9ec:	f001 f8a4 	bl	8010b38 <Error_Handler>
 800f9f0:	e7f2      	b.n	800f9d8 <MX_I2C1_Init+0x30>
    Error_Handler();
 800f9f2:	f001 f8a1 	bl	8010b38 <Error_Handler>
 800f9f6:	e7ea      	b.n	800f9ce <MX_I2C1_Init+0x26>
 800f9f8:	20005a5c 	.word	0x20005a5c
 800f9fc:	40005400 	.word	0x40005400
 800fa00:	10909cec 	.word	0x10909cec

0800fa04 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{

  hi2c2.Instance = I2C2;
 800fa04:	4b13      	ldr	r3, [pc, #76]	; (800fa54 <MX_I2C2_Init+0x50>)
 800fa06:	4a14      	ldr	r2, [pc, #80]	; (800fa58 <MX_I2C2_Init+0x54>)
{
 800fa08:	b510      	push	{r4, lr}
  hi2c2.Init.Timing = 0x00702991;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800fa0a:	2101      	movs	r1, #1
  hi2c2.Init.Timing = 0x00702991;
 800fa0c:	4c13      	ldr	r4, [pc, #76]	; (800fa5c <MX_I2C2_Init+0x58>)
  hi2c2.Instance = I2C2;
 800fa0e:	601a      	str	r2, [r3, #0]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800fa10:	4618      	mov	r0, r3
  hi2c2.Init.OwnAddress1 = 0;
 800fa12:	2200      	movs	r2, #0
  hi2c2.Init.Timing = 0x00702991;
 800fa14:	605c      	str	r4, [r3, #4]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800fa16:	60d9      	str	r1, [r3, #12]
  hi2c2.Init.OwnAddress1 = 0;
 800fa18:	609a      	str	r2, [r3, #8]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800fa1a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800fa1c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800fa1e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800fa20:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800fa22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800fa24:	f7f2 fd2c 	bl	8002480 <HAL_I2C_Init>
 800fa28:	b988      	cbnz	r0, 800fa4e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800fa2a:	2100      	movs	r1, #0
 800fa2c:	4809      	ldr	r0, [pc, #36]	; (800fa54 <MX_I2C2_Init+0x50>)
 800fa2e:	f7f4 fa0f 	bl	8003e50 <HAL_I2CEx_ConfigAnalogFilter>
 800fa32:	b948      	cbnz	r0, 800fa48 <MX_I2C2_Init+0x44>
  {
    Error_Handler();
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800fa34:	2100      	movs	r1, #0
 800fa36:	4807      	ldr	r0, [pc, #28]	; (800fa54 <MX_I2C2_Init+0x50>)
 800fa38:	f7f4 fa34 	bl	8003ea4 <HAL_I2CEx_ConfigDigitalFilter>
 800fa3c:	b900      	cbnz	r0, 800fa40 <MX_I2C2_Init+0x3c>
 800fa3e:	bd10      	pop	{r4, pc}
  {
    Error_Handler();
  }

}
 800fa40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800fa44:	f001 b878 	b.w	8010b38 <Error_Handler>
    Error_Handler();
 800fa48:	f001 f876 	bl	8010b38 <Error_Handler>
 800fa4c:	e7f2      	b.n	800fa34 <MX_I2C2_Init+0x30>
    Error_Handler();
 800fa4e:	f001 f873 	bl	8010b38 <Error_Handler>
 800fa52:	e7ea      	b.n	800fa2a <MX_I2C2_Init+0x26>
 800fa54:	20005aa8 	.word	0x20005aa8
 800fa58:	40005800 	.word	0x40005800
 800fa5c:	00702991 	.word	0x00702991

0800fa60 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{

  hi2c3.Instance = I2C3;
 800fa60:	4b13      	ldr	r3, [pc, #76]	; (800fab0 <MX_I2C3_Init+0x50>)
 800fa62:	4a14      	ldr	r2, [pc, #80]	; (800fab4 <MX_I2C3_Init+0x54>)
{
 800fa64:	b510      	push	{r4, lr}
  hi2c3.Init.Timing = 0x00702991;
  hi2c3.Init.OwnAddress1 = 0;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800fa66:	2101      	movs	r1, #1
  hi2c3.Init.Timing = 0x00702991;
 800fa68:	4c13      	ldr	r4, [pc, #76]	; (800fab8 <MX_I2C3_Init+0x58>)
  hi2c3.Instance = I2C3;
 800fa6a:	601a      	str	r2, [r3, #0]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c3.Init.OwnAddress2 = 0;
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800fa6c:	4618      	mov	r0, r3
  hi2c3.Init.OwnAddress1 = 0;
 800fa6e:	2200      	movs	r2, #0
  hi2c3.Init.Timing = 0x00702991;
 800fa70:	605c      	str	r4, [r3, #4]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800fa72:	60d9      	str	r1, [r3, #12]
  hi2c3.Init.OwnAddress1 = 0;
 800fa74:	609a      	str	r2, [r3, #8]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800fa76:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800fa78:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800fa7a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800fa7c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800fa7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800fa80:	f7f2 fcfe 	bl	8002480 <HAL_I2C_Init>
 800fa84:	b988      	cbnz	r0, 800faaa <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800fa86:	2100      	movs	r1, #0
 800fa88:	4809      	ldr	r0, [pc, #36]	; (800fab0 <MX_I2C3_Init+0x50>)
 800fa8a:	f7f4 f9e1 	bl	8003e50 <HAL_I2CEx_ConfigAnalogFilter>
 800fa8e:	b948      	cbnz	r0, 800faa4 <MX_I2C3_Init+0x44>
  {
    Error_Handler();
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800fa90:	2100      	movs	r1, #0
 800fa92:	4807      	ldr	r0, [pc, #28]	; (800fab0 <MX_I2C3_Init+0x50>)
 800fa94:	f7f4 fa06 	bl	8003ea4 <HAL_I2CEx_ConfigDigitalFilter>
 800fa98:	b900      	cbnz	r0, 800fa9c <MX_I2C3_Init+0x3c>
 800fa9a:	bd10      	pop	{r4, pc}
  {
    Error_Handler();
  }

}
 800fa9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800faa0:	f001 b84a 	b.w	8010b38 <Error_Handler>
    Error_Handler();
 800faa4:	f001 f848 	bl	8010b38 <Error_Handler>
 800faa8:	e7f2      	b.n	800fa90 <MX_I2C3_Init+0x30>
    Error_Handler();
 800faaa:	f001 f845 	bl	8010b38 <Error_Handler>
 800faae:	e7ea      	b.n	800fa86 <MX_I2C3_Init+0x26>
 800fab0:	20005a10 	.word	0x20005a10
 800fab4:	40005c00 	.word	0x40005c00
 800fab8:	00702991 	.word	0x00702991

0800fabc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800fabc:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C1)
 800fabe:	6803      	ldr	r3, [r0, #0]
 800fac0:	4a49      	ldr	r2, [pc, #292]	; (800fbe8 <HAL_I2C_MspInit+0x12c>)
{
 800fac2:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fac4:	2400      	movs	r4, #0
  if(i2cHandle->Instance==I2C1)
 800fac6:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fac8:	9408      	str	r4, [sp, #32]
 800faca:	9407      	str	r4, [sp, #28]
 800facc:	9409      	str	r4, [sp, #36]	; 0x24
 800face:	940a      	str	r4, [sp, #40]	; 0x28
 800fad0:	940b      	str	r4, [sp, #44]	; 0x2c
  if(i2cHandle->Instance==I2C1)
 800fad2:	d031      	beq.n	800fb38 <HAL_I2C_MspInit+0x7c>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
 800fad4:	4a45      	ldr	r2, [pc, #276]	; (800fbec <HAL_I2C_MspInit+0x130>)
 800fad6:	4293      	cmp	r3, r2
 800fad8:	d059      	beq.n	800fb8e <HAL_I2C_MspInit+0xd2>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C3)
 800fada:	4a45      	ldr	r2, [pc, #276]	; (800fbf0 <HAL_I2C_MspInit+0x134>)
 800fadc:	4293      	cmp	r3, r2
 800fade:	d001      	beq.n	800fae4 <HAL_I2C_MspInit+0x28>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800fae0:	b00d      	add	sp, #52	; 0x34
 800fae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800fae4:	4d43      	ldr	r5, [pc, #268]	; (800fbf4 <HAL_I2C_MspInit+0x138>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fae6:	4844      	ldr	r0, [pc, #272]	; (800fbf8 <HAL_I2C_MspInit+0x13c>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800fae8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800faea:	f043 0304 	orr.w	r3, r3, #4
 800faee:	64eb      	str	r3, [r5, #76]	; 0x4c
 800faf0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800faf2:	f003 0304 	and.w	r3, r3, #4
 800faf6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800faf8:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800fafa:	2303      	movs	r3, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800fafc:	2204      	movs	r2, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800fafe:	2712      	movs	r7, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800fb00:	2601      	movs	r6, #1
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800fb02:	f8dd e014 	ldr.w	lr, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800fb06:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fb08:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800fb0a:	920b      	str	r2, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800fb0c:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800fb0e:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fb10:	f7f2 fa60 	bl	8001fd4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800fb14:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800fb16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800fb1a:	65ab      	str	r3, [r5, #88]	; 0x58
 800fb1c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800fb1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fb22:	9306      	str	r3, [sp, #24]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 800fb24:	4622      	mov	r2, r4
 800fb26:	2105      	movs	r1, #5
 800fb28:	2048      	movs	r0, #72	; 0x48
    __HAL_RCC_I2C3_CLK_ENABLE();
 800fb2a:	9b06      	ldr	r3, [sp, #24]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 800fb2c:	f7f1 fe60 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800fb30:	2048      	movs	r0, #72	; 0x48
 800fb32:	f7f1 fe93 	bl	800185c <HAL_NVIC_EnableIRQ>
}
 800fb36:	e7d3      	b.n	800fae0 <HAL_I2C_MspInit+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800fb38:	4d2e      	ldr	r5, [pc, #184]	; (800fbf4 <HAL_I2C_MspInit+0x138>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fb3a:	4830      	ldr	r0, [pc, #192]	; (800fbfc <HAL_I2C_MspInit+0x140>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800fb3c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800fb3e:	f043 0302 	orr.w	r3, r3, #2
 800fb42:	64eb      	str	r3, [r5, #76]	; 0x4c
 800fb44:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800fb46:	f003 0302 	and.w	r3, r3, #2
 800fb4a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800fb4c:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fb4e:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fb50:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800fb52:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800fb54:	2712      	movs	r7, #18
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800fb56:	2304      	movs	r3, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800fb58:	2601      	movs	r6, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800fb5a:	f8dd e004 	ldr.w	lr, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fb5e:	920a      	str	r2, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800fb60:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800fb62:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800fb64:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fb66:	f7f2 fa35 	bl	8001fd4 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800fb6a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800fb6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fb70:	65ab      	str	r3, [r5, #88]	; 0x58
 800fb72:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800fb74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fb78:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800fb7a:	4622      	mov	r2, r4
 800fb7c:	2105      	movs	r1, #5
 800fb7e:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 800fb80:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800fb82:	f7f1 fe35 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800fb86:	201f      	movs	r0, #31
 800fb88:	f7f1 fe68 	bl	800185c <HAL_NVIC_EnableIRQ>
 800fb8c:	e7a8      	b.n	800fae0 <HAL_I2C_MspInit+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800fb8e:	4d19      	ldr	r5, [pc, #100]	; (800fbf4 <HAL_I2C_MspInit+0x138>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fb90:	481a      	ldr	r0, [pc, #104]	; (800fbfc <HAL_I2C_MspInit+0x140>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800fb92:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800fb94:	f043 0302 	orr.w	r3, r3, #2
 800fb98:	64eb      	str	r3, [r5, #76]	; 0x4c
 800fb9a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800fb9c:	f003 0302 	and.w	r3, r3, #2
 800fba0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800fba2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fba6:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fba8:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800fbaa:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800fbac:	2712      	movs	r7, #18
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800fbae:	2304      	movs	r3, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800fbb0:	2601      	movs	r6, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800fbb2:	f8dd e00c 	ldr.w	lr, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fbb6:	920a      	str	r2, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800fbb8:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800fbba:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800fbbc:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fbbe:	f7f2 fa09 	bl	8001fd4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800fbc2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800fbc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800fbc8:	65ab      	str	r3, [r5, #88]	; 0x58
 800fbca:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800fbcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fbd0:	9304      	str	r3, [sp, #16]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 800fbd2:	4622      	mov	r2, r4
 800fbd4:	2105      	movs	r1, #5
 800fbd6:	2021      	movs	r0, #33	; 0x21
    __HAL_RCC_I2C2_CLK_ENABLE();
 800fbd8:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 800fbda:	f7f1 fe09 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800fbde:	2021      	movs	r0, #33	; 0x21
 800fbe0:	f7f1 fe3c 	bl	800185c <HAL_NVIC_EnableIRQ>
 800fbe4:	e77c      	b.n	800fae0 <HAL_I2C_MspInit+0x24>
 800fbe6:	bf00      	nop
 800fbe8:	40005400 	.word	0x40005400
 800fbec:	40005800 	.word	0x40005800
 800fbf0:	40005c00 	.word	0x40005c00
 800fbf4:	40021000 	.word	0x40021000
 800fbf8:	48000800 	.word	0x48000800
 800fbfc:	48000400 	.word	0x48000400

0800fc00 <runPOV_step>:
}

void runPOV_step(uint8_t* red, uint8_t* green, uint8_t step) {
  memset(LED_SETTINGS, 255, sizeof LED_SETTINGS);

  if (global_visNum == 1) {
 800fc00:	4acf      	ldr	r2, [pc, #828]	; (800ff40 <runPOV_step+0x340>)
  memset(LED_SETTINGS, 255, sizeof LED_SETTINGS);
 800fc02:	4bd0      	ldr	r3, [pc, #832]	; (800ff44 <runPOV_step+0x344>)
void runPOV_step(uint8_t* red, uint8_t* green, uint8_t step) {
 800fc04:	b410      	push	{r4}
  if (global_visNum == 1) {
 800fc06:	8814      	ldrh	r4, [r2, #0]
  memset(LED_SETTINGS, 255, sizeof LED_SETTINGS);
 800fc08:	f04f 32ff 	mov.w	r2, #4294967295
  if (global_visNum == 1) {
 800fc0c:	2c01      	cmp	r4, #1
  memset(LED_SETTINGS, 255, sizeof LED_SETTINGS);
 800fc0e:	601a      	str	r2, [r3, #0]
 800fc10:	809a      	strh	r2, [r3, #4]
  if (global_visNum == 1) {
 800fc12:	f000 8095 	beq.w	800fd40 <runPOV_step+0x140>
      POV_right(red, 1);
    } else {
      POV_left(red, 1);
      POV_right(green, 0);
    }
  } else if (global_visNum == 2) {
 800fc16:	2c02      	cmp	r4, #2
 800fc18:	d002      	beq.n	800fc20 <runPOV_step+0x20>
      POV_left(red + 15 * MESSAGE_WIDTH, 1);
      POV_right(green, 0);
      POV_right(red, 1);
    }
  }
}
 800fc1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc1e:	4770      	bx	lr
    if ((timerPOVstate % 2) == 1) {
 800fc20:	4ac9      	ldr	r2, [pc, #804]	; (800ff48 <runPOV_step+0x348>)
 800fc22:	6812      	ldr	r2, [r2, #0]
 800fc24:	07d2      	lsls	r2, r2, #31
 800fc26:	f100 80ec 	bmi.w	800fe02 <runPOV_step+0x202>
    if (colorMap[0] == 1) {
 800fc2a:	f891 2069 	ldrb.w	r2, [r1, #105]	; 0x69
 800fc2e:	2a01      	cmp	r2, #1
 800fc30:	f000 81e1 	beq.w	800fff6 <runPOV_step+0x3f6>
    if (colorMap[1] == 1) {
 800fc34:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
 800fc38:	2a01      	cmp	r2, #1
 800fc3a:	f000 81d7 	beq.w	800ffec <runPOV_step+0x3ec>
    if (colorMap[2] == 1) {
 800fc3e:	f891 206b 	ldrb.w	r2, [r1, #107]	; 0x6b
 800fc42:	2a01      	cmp	r2, #1
 800fc44:	f000 81cd 	beq.w	800ffe2 <runPOV_step+0x3e2>
    if (colorMap[3] == 1) {
 800fc48:	f891 206c 	ldrb.w	r2, [r1, #108]	; 0x6c
 800fc4c:	2a01      	cmp	r2, #1
 800fc4e:	f000 81c3 	beq.w	800ffd8 <runPOV_step+0x3d8>
    if (colorMap[4] == 1) {
 800fc52:	f891 206d 	ldrb.w	r2, [r1, #109]	; 0x6d
 800fc56:	2a01      	cmp	r2, #1
 800fc58:	f000 81b9 	beq.w	800ffce <runPOV_step+0x3ce>
    if (colorMap[5] == 1) {
 800fc5c:	f891 206e 	ldrb.w	r2, [r1, #110]	; 0x6e
 800fc60:	2a01      	cmp	r2, #1
 800fc62:	f000 81af 	beq.w	800ffc4 <runPOV_step+0x3c4>
    if (colorMap[6] == 1) {
 800fc66:	f891 206f 	ldrb.w	r2, [r1, #111]	; 0x6f
 800fc6a:	2a01      	cmp	r2, #1
 800fc6c:	d103      	bne.n	800fc76 <runPOV_step+0x76>
      LED_SETTINGS[POV_1_G_REG] &= ~POV_1_G_PIN;
 800fc6e:	795a      	ldrb	r2, [r3, #5]
 800fc70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800fc74:	715a      	strb	r2, [r3, #5]
    if (colorMap[0] == 1) {
 800fc76:	f890 2069 	ldrb.w	r2, [r0, #105]	; 0x69
 800fc7a:	2a01      	cmp	r2, #1
 800fc7c:	f000 819d 	beq.w	800ffba <runPOV_step+0x3ba>
    if (colorMap[1] == 1) {
 800fc80:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
 800fc84:	2a01      	cmp	r2, #1
 800fc86:	f000 8193 	beq.w	800ffb0 <runPOV_step+0x3b0>
    if (colorMap[2] == 1) {
 800fc8a:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
 800fc8e:	2a01      	cmp	r2, #1
 800fc90:	f000 8189 	beq.w	800ffa6 <runPOV_step+0x3a6>
    if (colorMap[3] == 1) {
 800fc94:	f890 206c 	ldrb.w	r2, [r0, #108]	; 0x6c
 800fc98:	2a01      	cmp	r2, #1
 800fc9a:	f000 817f 	beq.w	800ff9c <runPOV_step+0x39c>
    if (colorMap[4] == 1) {
 800fc9e:	f890 206d 	ldrb.w	r2, [r0, #109]	; 0x6d
 800fca2:	2a01      	cmp	r2, #1
 800fca4:	f000 8175 	beq.w	800ff92 <runPOV_step+0x392>
    if (colorMap[5] == 1) {
 800fca8:	f890 206e 	ldrb.w	r2, [r0, #110]	; 0x6e
 800fcac:	2a01      	cmp	r2, #1
 800fcae:	f000 816b 	beq.w	800ff88 <runPOV_step+0x388>
    if (colorMap[6] == 1) {
 800fcb2:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
 800fcb6:	2a01      	cmp	r2, #1
 800fcb8:	f000 8161 	beq.w	800ff7e <runPOV_step+0x37e>
    if (colorMap[0] == 1) {
 800fcbc:	780a      	ldrb	r2, [r1, #0]
 800fcbe:	2a01      	cmp	r2, #1
 800fcc0:	f000 8158 	beq.w	800ff74 <runPOV_step+0x374>
    if (colorMap[1] == 1) {
 800fcc4:	784a      	ldrb	r2, [r1, #1]
 800fcc6:	2a01      	cmp	r2, #1
 800fcc8:	f000 814f 	beq.w	800ff6a <runPOV_step+0x36a>
    if (colorMap[2] == 1) {
 800fccc:	788a      	ldrb	r2, [r1, #2]
 800fcce:	2a01      	cmp	r2, #1
 800fcd0:	f000 8146 	beq.w	800ff60 <runPOV_step+0x360>
    if (colorMap[3] == 1) {
 800fcd4:	78ca      	ldrb	r2, [r1, #3]
 800fcd6:	2a01      	cmp	r2, #1
 800fcd8:	f000 8197 	beq.w	801000a <runPOV_step+0x40a>
    if (colorMap[4] == 1) {
 800fcdc:	790a      	ldrb	r2, [r1, #4]
 800fcde:	2a01      	cmp	r2, #1
 800fce0:	f000 818e 	beq.w	8010000 <runPOV_step+0x400>
    if (colorMap[5] == 1) {
 800fce4:	794a      	ldrb	r2, [r1, #5]
 800fce6:	2a01      	cmp	r2, #1
 800fce8:	f000 8135 	beq.w	800ff56 <runPOV_step+0x356>
    if (colorMap[6] == 1) {
 800fcec:	798a      	ldrb	r2, [r1, #6]
 800fcee:	2a01      	cmp	r2, #1
 800fcf0:	d103      	bne.n	800fcfa <runPOV_step+0xfa>
      LED_SETTINGS[POV_8_G_REG] &= ~POV_8_G_PIN;
 800fcf2:	781a      	ldrb	r2, [r3, #0]
 800fcf4:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800fcf8:	701a      	strb	r2, [r3, #0]
    if (colorMap[0] == 1) {
 800fcfa:	7802      	ldrb	r2, [r0, #0]
 800fcfc:	2a01      	cmp	r2, #1
 800fcfe:	f000 8125 	beq.w	800ff4c <runPOV_step+0x34c>
    if (colorMap[1] == 1) {
 800fd02:	7842      	ldrb	r2, [r0, #1]
 800fd04:	2a01      	cmp	r2, #1
 800fd06:	f000 8115 	beq.w	800ff34 <runPOV_step+0x334>
    if (colorMap[2] == 1) {
 800fd0a:	7882      	ldrb	r2, [r0, #2]
 800fd0c:	2a01      	cmp	r2, #1
 800fd0e:	f000 810c 	beq.w	800ff2a <runPOV_step+0x32a>
    if (colorMap[3] == 1) {
 800fd12:	78c2      	ldrb	r2, [r0, #3]
 800fd14:	2a01      	cmp	r2, #1
 800fd16:	f000 8103 	beq.w	800ff20 <runPOV_step+0x320>
    if (colorMap[4] == 1) {
 800fd1a:	7902      	ldrb	r2, [r0, #4]
 800fd1c:	2a01      	cmp	r2, #1
 800fd1e:	f000 80fa 	beq.w	800ff16 <runPOV_step+0x316>
    if (colorMap[5] == 1) {
 800fd22:	7942      	ldrb	r2, [r0, #5]
 800fd24:	2a01      	cmp	r2, #1
 800fd26:	f000 80f1 	beq.w	800ff0c <runPOV_step+0x30c>
    if (colorMap[6] == 1) {
 800fd2a:	7982      	ldrb	r2, [r0, #6]
 800fd2c:	2a01      	cmp	r2, #1
 800fd2e:	f47f af74 	bne.w	800fc1a <runPOV_step+0x1a>
      LED_SETTINGS[POV_8_R_REG] &= ~POV_8_R_PIN;
 800fd32:	781a      	ldrb	r2, [r3, #0]
 800fd34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800fd38:	701a      	strb	r2, [r3, #0]
}
 800fd3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd3e:	4770      	bx	lr
    if ((timerPOVstate % 2) == 1) {
 800fd40:	4a81      	ldr	r2, [pc, #516]	; (800ff48 <runPOV_step+0x348>)
 800fd42:	6812      	ldr	r2, [r2, #0]
 800fd44:	07d4      	lsls	r4, r2, #31
 800fd46:	d43c      	bmi.n	800fdc2 <runPOV_step+0x1c2>
    if (colorMap[0] == 1) {
 800fd48:	7802      	ldrb	r2, [r0, #0]
 800fd4a:	2a01      	cmp	r2, #1
 800fd4c:	f000 8176 	beq.w	801003c <runPOV_step+0x43c>
    if (colorMap[1] == 1) {
 800fd50:	7842      	ldrb	r2, [r0, #1]
 800fd52:	2a01      	cmp	r2, #1
 800fd54:	f000 816d 	beq.w	8010032 <runPOV_step+0x432>
    if (colorMap[2] == 1) {
 800fd58:	7882      	ldrb	r2, [r0, #2]
 800fd5a:	2a01      	cmp	r2, #1
 800fd5c:	f000 8164 	beq.w	8010028 <runPOV_step+0x428>
    if (colorMap[3] == 1) {
 800fd60:	78c2      	ldrb	r2, [r0, #3]
 800fd62:	2a01      	cmp	r2, #1
 800fd64:	f000 815b 	beq.w	801001e <runPOV_step+0x41e>
    if (colorMap[4] == 1) {
 800fd68:	7902      	ldrb	r2, [r0, #4]
 800fd6a:	2a01      	cmp	r2, #1
 800fd6c:	f000 8152 	beq.w	8010014 <runPOV_step+0x414>
    if (colorMap[5] == 1) {
 800fd70:	7942      	ldrb	r2, [r0, #5]
 800fd72:	2a01      	cmp	r2, #1
 800fd74:	f000 818a 	beq.w	801008c <runPOV_step+0x48c>
    if (colorMap[6] == 1) {
 800fd78:	7982      	ldrb	r2, [r0, #6]
 800fd7a:	2a01      	cmp	r2, #1
 800fd7c:	f000 8181 	beq.w	8010082 <runPOV_step+0x482>
    if (colorMap[0] == 1) {
 800fd80:	780a      	ldrb	r2, [r1, #0]
 800fd82:	2a01      	cmp	r2, #1
 800fd84:	f000 8178 	beq.w	8010078 <runPOV_step+0x478>
    if (colorMap[1] == 1) {
 800fd88:	784a      	ldrb	r2, [r1, #1]
 800fd8a:	2a01      	cmp	r2, #1
 800fd8c:	f000 816f 	beq.w	801006e <runPOV_step+0x46e>
    if (colorMap[2] == 1) {
 800fd90:	788a      	ldrb	r2, [r1, #2]
 800fd92:	2a01      	cmp	r2, #1
 800fd94:	f000 8166 	beq.w	8010064 <runPOV_step+0x464>
    if (colorMap[3] == 1) {
 800fd98:	78ca      	ldrb	r2, [r1, #3]
 800fd9a:	2a01      	cmp	r2, #1
 800fd9c:	f000 815d 	beq.w	801005a <runPOV_step+0x45a>
    if (colorMap[4] == 1) {
 800fda0:	790a      	ldrb	r2, [r1, #4]
 800fda2:	2a01      	cmp	r2, #1
 800fda4:	f000 8154 	beq.w	8010050 <runPOV_step+0x450>
    if (colorMap[5] == 1) {
 800fda8:	794a      	ldrb	r2, [r1, #5]
 800fdaa:	2a01      	cmp	r2, #1
 800fdac:	f000 814b 	beq.w	8010046 <runPOV_step+0x446>
    if (colorMap[6] == 1) {
 800fdb0:	798a      	ldrb	r2, [r1, #6]
 800fdb2:	2a01      	cmp	r2, #1
 800fdb4:	f47f af31 	bne.w	800fc1a <runPOV_step+0x1a>
      LED_SETTINGS[POV_8_G_REG] &= ~POV_8_G_PIN;
 800fdb8:	781a      	ldrb	r2, [r3, #0]
 800fdba:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800fdbe:	701a      	strb	r2, [r3, #0]
 800fdc0:	e72b      	b.n	800fc1a <runPOV_step+0x1a>
    if (colorMap[0] == 1) {
 800fdc2:	780a      	ldrb	r2, [r1, #0]
 800fdc4:	2a01      	cmp	r2, #1
 800fdc6:	f000 817f 	beq.w	80100c8 <runPOV_step+0x4c8>
    if (colorMap[1] == 1) {
 800fdca:	784a      	ldrb	r2, [r1, #1]
 800fdcc:	2a01      	cmp	r2, #1
 800fdce:	f000 8176 	beq.w	80100be <runPOV_step+0x4be>
    if (colorMap[2] == 1) {
 800fdd2:	788a      	ldrb	r2, [r1, #2]
 800fdd4:	2a01      	cmp	r2, #1
 800fdd6:	f000 816d 	beq.w	80100b4 <runPOV_step+0x4b4>
    if (colorMap[3] == 1) {
 800fdda:	78ca      	ldrb	r2, [r1, #3]
 800fddc:	2a01      	cmp	r2, #1
 800fdde:	f000 8164 	beq.w	80100aa <runPOV_step+0x4aa>
    if (colorMap[4] == 1) {
 800fde2:	790a      	ldrb	r2, [r1, #4]
 800fde4:	2a01      	cmp	r2, #1
 800fde6:	f000 815b 	beq.w	80100a0 <runPOV_step+0x4a0>
    if (colorMap[5] == 1) {
 800fdea:	794a      	ldrb	r2, [r1, #5]
 800fdec:	2a01      	cmp	r2, #1
 800fdee:	f000 8152 	beq.w	8010096 <runPOV_step+0x496>
    if (colorMap[6] == 1) {
 800fdf2:	798a      	ldrb	r2, [r1, #6]
 800fdf4:	2a01      	cmp	r2, #1
 800fdf6:	d180      	bne.n	800fcfa <runPOV_step+0xfa>
      LED_SETTINGS[POV_1_G_REG] &= ~POV_1_G_PIN;
 800fdf8:	795a      	ldrb	r2, [r3, #5]
 800fdfa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800fdfe:	715a      	strb	r2, [r3, #5]
 800fe00:	e77b      	b.n	800fcfa <runPOV_step+0xfa>
    if (colorMap[0] == 1) {
 800fe02:	780a      	ldrb	r2, [r1, #0]
 800fe04:	2a01      	cmp	r2, #1
 800fe06:	f000 81b4 	beq.w	8010172 <runPOV_step+0x572>
    if (colorMap[1] == 1) {
 800fe0a:	784a      	ldrb	r2, [r1, #1]
 800fe0c:	2a01      	cmp	r2, #1
 800fe0e:	f000 81ab 	beq.w	8010168 <runPOV_step+0x568>
    if (colorMap[2] == 1) {
 800fe12:	788a      	ldrb	r2, [r1, #2]
 800fe14:	2a01      	cmp	r2, #1
 800fe16:	f000 81d4 	beq.w	80101c2 <runPOV_step+0x5c2>
    if (colorMap[3] == 1) {
 800fe1a:	78ca      	ldrb	r2, [r1, #3]
 800fe1c:	2a01      	cmp	r2, #1
 800fe1e:	f000 81cb 	beq.w	80101b8 <runPOV_step+0x5b8>
    if (colorMap[4] == 1) {
 800fe22:	790a      	ldrb	r2, [r1, #4]
 800fe24:	2a01      	cmp	r2, #1
 800fe26:	f000 81c2 	beq.w	80101ae <runPOV_step+0x5ae>
    if (colorMap[5] == 1) {
 800fe2a:	794a      	ldrb	r2, [r1, #5]
 800fe2c:	2a01      	cmp	r2, #1
 800fe2e:	f000 81b9 	beq.w	80101a4 <runPOV_step+0x5a4>
    if (colorMap[6] == 1) {
 800fe32:	798a      	ldrb	r2, [r1, #6]
 800fe34:	2a01      	cmp	r2, #1
 800fe36:	d103      	bne.n	800fe40 <runPOV_step+0x240>
      LED_SETTINGS[POV_1_G_REG] &= ~POV_1_G_PIN;
 800fe38:	795a      	ldrb	r2, [r3, #5]
 800fe3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800fe3e:	715a      	strb	r2, [r3, #5]
    if (colorMap[0] == 1) {
 800fe40:	7802      	ldrb	r2, [r0, #0]
 800fe42:	2a01      	cmp	r2, #1
 800fe44:	f000 81a9 	beq.w	801019a <runPOV_step+0x59a>
    if (colorMap[1] == 1) {
 800fe48:	7842      	ldrb	r2, [r0, #1]
 800fe4a:	2a01      	cmp	r2, #1
 800fe4c:	f000 81a0 	beq.w	8010190 <runPOV_step+0x590>
    if (colorMap[2] == 1) {
 800fe50:	7882      	ldrb	r2, [r0, #2]
 800fe52:	2a01      	cmp	r2, #1
 800fe54:	f000 8197 	beq.w	8010186 <runPOV_step+0x586>
    if (colorMap[3] == 1) {
 800fe58:	78c2      	ldrb	r2, [r0, #3]
 800fe5a:	2a01      	cmp	r2, #1
 800fe5c:	f000 818e 	beq.w	801017c <runPOV_step+0x57c>
    if (colorMap[4] == 1) {
 800fe60:	7902      	ldrb	r2, [r0, #4]
 800fe62:	2a01      	cmp	r2, #1
 800fe64:	f000 815d 	beq.w	8010122 <runPOV_step+0x522>
    if (colorMap[5] == 1) {
 800fe68:	7942      	ldrb	r2, [r0, #5]
 800fe6a:	2a01      	cmp	r2, #1
 800fe6c:	f000 8154 	beq.w	8010118 <runPOV_step+0x518>
    if (colorMap[6] == 1) {
 800fe70:	7982      	ldrb	r2, [r0, #6]
 800fe72:	2a01      	cmp	r2, #1
 800fe74:	f000 814b 	beq.w	801010e <runPOV_step+0x50e>
    if (colorMap[0] == 1) {
 800fe78:	f891 2069 	ldrb.w	r2, [r1, #105]	; 0x69
 800fe7c:	2a01      	cmp	r2, #1
 800fe7e:	f000 8141 	beq.w	8010104 <runPOV_step+0x504>
    if (colorMap[1] == 1) {
 800fe82:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
 800fe86:	2a01      	cmp	r2, #1
 800fe88:	f000 8137 	beq.w	80100fa <runPOV_step+0x4fa>
    if (colorMap[2] == 1) {
 800fe8c:	f891 206b 	ldrb.w	r2, [r1, #107]	; 0x6b
 800fe90:	2a01      	cmp	r2, #1
 800fe92:	f000 812d 	beq.w	80100f0 <runPOV_step+0x4f0>
    if (colorMap[3] == 1) {
 800fe96:	f891 206c 	ldrb.w	r2, [r1, #108]	; 0x6c
 800fe9a:	2a01      	cmp	r2, #1
 800fe9c:	f000 8123 	beq.w	80100e6 <runPOV_step+0x4e6>
    if (colorMap[4] == 1) {
 800fea0:	f891 206d 	ldrb.w	r2, [r1, #109]	; 0x6d
 800fea4:	2a01      	cmp	r2, #1
 800fea6:	f000 8119 	beq.w	80100dc <runPOV_step+0x4dc>
    if (colorMap[5] == 1) {
 800feaa:	f891 206e 	ldrb.w	r2, [r1, #110]	; 0x6e
 800feae:	2a01      	cmp	r2, #1
 800feb0:	f000 810f 	beq.w	80100d2 <runPOV_step+0x4d2>
    if (colorMap[6] == 1) {
 800feb4:	f891 206f 	ldrb.w	r2, [r1, #111]	; 0x6f
 800feb8:	2a01      	cmp	r2, #1
 800feba:	d103      	bne.n	800fec4 <runPOV_step+0x2c4>
      LED_SETTINGS[POV_8_G_REG] &= ~POV_8_G_PIN;
 800febc:	781a      	ldrb	r2, [r3, #0]
 800febe:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800fec2:	701a      	strb	r2, [r3, #0]
    if (colorMap[0] == 1) {
 800fec4:	f890 2069 	ldrb.w	r2, [r0, #105]	; 0x69
 800fec8:	2a01      	cmp	r2, #1
 800feca:	f000 813e 	beq.w	801014a <runPOV_step+0x54a>
    if (colorMap[1] == 1) {
 800fece:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
 800fed2:	2a01      	cmp	r2, #1
 800fed4:	f000 8134 	beq.w	8010140 <runPOV_step+0x540>
    if (colorMap[2] == 1) {
 800fed8:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
 800fedc:	2a01      	cmp	r2, #1
 800fede:	f000 812a 	beq.w	8010136 <runPOV_step+0x536>
    if (colorMap[3] == 1) {
 800fee2:	f890 206c 	ldrb.w	r2, [r0, #108]	; 0x6c
 800fee6:	2a01      	cmp	r2, #1
 800fee8:	f000 8120 	beq.w	801012c <runPOV_step+0x52c>
    if (colorMap[4] == 1) {
 800feec:	f890 206d 	ldrb.w	r2, [r0, #109]	; 0x6d
 800fef0:	2a01      	cmp	r2, #1
 800fef2:	f000 8134 	beq.w	801015e <runPOV_step+0x55e>
    if (colorMap[5] == 1) {
 800fef6:	f890 206e 	ldrb.w	r2, [r0, #110]	; 0x6e
 800fefa:	2a01      	cmp	r2, #1
 800fefc:	f000 812a 	beq.w	8010154 <runPOV_step+0x554>
    if (colorMap[6] == 1) {
 800ff00:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
 800ff04:	2a01      	cmp	r2, #1
 800ff06:	f47f ae88 	bne.w	800fc1a <runPOV_step+0x1a>
 800ff0a:	e712      	b.n	800fd32 <runPOV_step+0x132>
      LED_SETTINGS[BUTTON_6_R_REG] &= ~BUTTON_6_R_PIN;
 800ff0c:	781a      	ldrb	r2, [r3, #0]
 800ff0e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 800ff12:	701a      	strb	r2, [r3, #0]
 800ff14:	e709      	b.n	800fd2a <runPOV_step+0x12a>
      LED_SETTINGS[POV_7_R_REG] &= ~POV_7_R_PIN;
 800ff16:	781a      	ldrb	r2, [r3, #0]
 800ff18:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 800ff1c:	701a      	strb	r2, [r3, #0]
 800ff1e:	e700      	b.n	800fd22 <runPOV_step+0x122>
      LED_SETTINGS[BUTTON_5_R_REG] &= ~BUTTON_5_R_PIN;
 800ff20:	781a      	ldrb	r2, [r3, #0]
 800ff22:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
 800ff26:	701a      	strb	r2, [r3, #0]
 800ff28:	e6f7      	b.n	800fd1a <runPOV_step+0x11a>
      LED_SETTINGS[POV_6_R_REG] &= ~POV_6_R_PIN;
 800ff2a:	785a      	ldrb	r2, [r3, #1]
 800ff2c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 800ff30:	705a      	strb	r2, [r3, #1]
 800ff32:	e6ee      	b.n	800fd12 <runPOV_step+0x112>
      LED_SETTINGS[BUTTON_4_R_REG] &= ~BUTTON_4_R_PIN;
 800ff34:	785a      	ldrb	r2, [r3, #1]
 800ff36:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 800ff3a:	705a      	strb	r2, [r3, #1]
 800ff3c:	e6e5      	b.n	800fd0a <runPOV_step+0x10a>
 800ff3e:	bf00      	nop
 800ff40:	200050dc 	.word	0x200050dc
 800ff44:	2000548c 	.word	0x2000548c
 800ff48:	200052ac 	.word	0x200052ac
      LED_SETTINGS[POV_5_R_REG] &= ~POV_5_R_PIN;
 800ff4c:	785a      	ldrb	r2, [r3, #1]
 800ff4e:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
 800ff52:	705a      	strb	r2, [r3, #1]
 800ff54:	e6d5      	b.n	800fd02 <runPOV_step+0x102>
      LED_SETTINGS[BUTTON_6_G_REG] &= ~BUTTON_6_G_PIN;
 800ff56:	781a      	ldrb	r2, [r3, #0]
 800ff58:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 800ff5c:	701a      	strb	r2, [r3, #0]
 800ff5e:	e6c5      	b.n	800fcec <runPOV_step+0xec>
      LED_SETTINGS[POV_6_G_REG] &= ~POV_6_G_PIN;
 800ff60:	785a      	ldrb	r2, [r3, #1]
 800ff62:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 800ff66:	705a      	strb	r2, [r3, #1]
 800ff68:	e6b4      	b.n	800fcd4 <runPOV_step+0xd4>
      LED_SETTINGS[BUTTON_4_G_REG] &= ~BUTTON_4_G_PIN;
 800ff6a:	785a      	ldrb	r2, [r3, #1]
 800ff6c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ff70:	705a      	strb	r2, [r3, #1]
 800ff72:	e6ab      	b.n	800fccc <runPOV_step+0xcc>
      LED_SETTINGS[POV_5_G_REG] &= ~POV_5_G_PIN;
 800ff74:	785a      	ldrb	r2, [r3, #1]
 800ff76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ff7a:	705a      	strb	r2, [r3, #1]
 800ff7c:	e6a2      	b.n	800fcc4 <runPOV_step+0xc4>
      LED_SETTINGS[POV_1_R_REG] &= ~POV_1_R_PIN;
 800ff7e:	795a      	ldrb	r2, [r3, #5]
 800ff80:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
 800ff84:	715a      	strb	r2, [r3, #5]
 800ff86:	e699      	b.n	800fcbc <runPOV_step+0xbc>
      LED_SETTINGS[BUTTON_1_R_REG] &= ~BUTTON_1_R_PIN;
 800ff88:	795a      	ldrb	r2, [r3, #5]
 800ff8a:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 800ff8e:	715a      	strb	r2, [r3, #5]
 800ff90:	e68f      	b.n	800fcb2 <runPOV_step+0xb2>
      LED_SETTINGS[POV_2_R_REG] &= ~POV_2_R_PIN;
 800ff92:	795a      	ldrb	r2, [r3, #5]
 800ff94:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 800ff98:	715a      	strb	r2, [r3, #5]
 800ff9a:	e685      	b.n	800fca8 <runPOV_step+0xa8>
      LED_SETTINGS[BUTTON_2_R_REG] &= ~BUTTON_2_R_PIN;
 800ff9c:	795a      	ldrb	r2, [r3, #5]
 800ff9e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ffa2:	715a      	strb	r2, [r3, #5]
 800ffa4:	e67b      	b.n	800fc9e <runPOV_step+0x9e>
      LED_SETTINGS[POV_3_R_REG] &= ~POV_3_R_PIN;
 800ffa6:	791a      	ldrb	r2, [r3, #4]
 800ffa8:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 800ffac:	711a      	strb	r2, [r3, #4]
 800ffae:	e671      	b.n	800fc94 <runPOV_step+0x94>
      LED_SETTINGS[BUTTON_3_R_REG] &= ~BUTTON_3_R_PIN;
 800ffb0:	791a      	ldrb	r2, [r3, #4]
 800ffb2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 800ffb6:	711a      	strb	r2, [r3, #4]
 800ffb8:	e667      	b.n	800fc8a <runPOV_step+0x8a>
      LED_SETTINGS[POV_4_R_REG] &= ~POV_4_R_PIN;
 800ffba:	791a      	ldrb	r2, [r3, #4]
 800ffbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ffc0:	711a      	strb	r2, [r3, #4]
 800ffc2:	e65d      	b.n	800fc80 <runPOV_step+0x80>
      LED_SETTINGS[BUTTON_1_G_REG] &= ~BUTTON_1_G_PIN;
 800ffc4:	795a      	ldrb	r2, [r3, #5]
 800ffc6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ffca:	715a      	strb	r2, [r3, #5]
 800ffcc:	e64b      	b.n	800fc66 <runPOV_step+0x66>
      LED_SETTINGS[POV_2_G_REG] &= ~POV_2_G_PIN;
 800ffce:	795a      	ldrb	r2, [r3, #5]
 800ffd0:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 800ffd4:	715a      	strb	r2, [r3, #5]
 800ffd6:	e641      	b.n	800fc5c <runPOV_step+0x5c>
      LED_SETTINGS[BUTTON_2_G_REG] &= ~BUTTON_2_G_PIN;
 800ffd8:	795a      	ldrb	r2, [r3, #5]
 800ffda:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800ffde:	715a      	strb	r2, [r3, #5]
 800ffe0:	e637      	b.n	800fc52 <runPOV_step+0x52>
      LED_SETTINGS[POV_3_G_REG] &= ~POV_3_G_PIN;
 800ffe2:	791a      	ldrb	r2, [r3, #4]
 800ffe4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ffe8:	711a      	strb	r2, [r3, #4]
 800ffea:	e62d      	b.n	800fc48 <runPOV_step+0x48>
      LED_SETTINGS[BUTTON_3_G_REG] &= ~BUTTON_3_G_PIN;
 800ffec:	791a      	ldrb	r2, [r3, #4]
 800ffee:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 800fff2:	711a      	strb	r2, [r3, #4]
 800fff4:	e623      	b.n	800fc3e <runPOV_step+0x3e>
      LED_SETTINGS[POV_4_G_REG] &= ~POV_4_G_PIN;
 800fff6:	791a      	ldrb	r2, [r3, #4]
 800fff8:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800fffc:	711a      	strb	r2, [r3, #4]
 800fffe:	e619      	b.n	800fc34 <runPOV_step+0x34>
      LED_SETTINGS[POV_7_G_REG] &= ~POV_7_G_PIN;
 8010000:	781a      	ldrb	r2, [r3, #0]
 8010002:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8010006:	701a      	strb	r2, [r3, #0]
 8010008:	e66c      	b.n	800fce4 <runPOV_step+0xe4>
      LED_SETTINGS[BUTTON_5_G_REG] &= ~BUTTON_5_G_PIN;
 801000a:	781a      	ldrb	r2, [r3, #0]
 801000c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010010:	701a      	strb	r2, [r3, #0]
 8010012:	e663      	b.n	800fcdc <runPOV_step+0xdc>
      LED_SETTINGS[POV_2_R_REG] &= ~POV_2_R_PIN;
 8010014:	795a      	ldrb	r2, [r3, #5]
 8010016:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 801001a:	715a      	strb	r2, [r3, #5]
 801001c:	e6a8      	b.n	800fd70 <runPOV_step+0x170>
      LED_SETTINGS[BUTTON_2_R_REG] &= ~BUTTON_2_R_PIN;
 801001e:	795a      	ldrb	r2, [r3, #5]
 8010020:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8010024:	715a      	strb	r2, [r3, #5]
 8010026:	e69f      	b.n	800fd68 <runPOV_step+0x168>
      LED_SETTINGS[POV_3_R_REG] &= ~POV_3_R_PIN;
 8010028:	791a      	ldrb	r2, [r3, #4]
 801002a:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 801002e:	711a      	strb	r2, [r3, #4]
 8010030:	e696      	b.n	800fd60 <runPOV_step+0x160>
      LED_SETTINGS[BUTTON_3_R_REG] &= ~BUTTON_3_R_PIN;
 8010032:	791a      	ldrb	r2, [r3, #4]
 8010034:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 8010038:	711a      	strb	r2, [r3, #4]
 801003a:	e68d      	b.n	800fd58 <runPOV_step+0x158>
      LED_SETTINGS[POV_4_R_REG] &= ~POV_4_R_PIN;
 801003c:	791a      	ldrb	r2, [r3, #4]
 801003e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8010042:	711a      	strb	r2, [r3, #4]
 8010044:	e684      	b.n	800fd50 <runPOV_step+0x150>
      LED_SETTINGS[BUTTON_6_G_REG] &= ~BUTTON_6_G_PIN;
 8010046:	781a      	ldrb	r2, [r3, #0]
 8010048:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 801004c:	701a      	strb	r2, [r3, #0]
 801004e:	e6af      	b.n	800fdb0 <runPOV_step+0x1b0>
      LED_SETTINGS[POV_7_G_REG] &= ~POV_7_G_PIN;
 8010050:	781a      	ldrb	r2, [r3, #0]
 8010052:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8010056:	701a      	strb	r2, [r3, #0]
 8010058:	e6a6      	b.n	800fda8 <runPOV_step+0x1a8>
      LED_SETTINGS[BUTTON_5_G_REG] &= ~BUTTON_5_G_PIN;
 801005a:	781a      	ldrb	r2, [r3, #0]
 801005c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010060:	701a      	strb	r2, [r3, #0]
 8010062:	e69d      	b.n	800fda0 <runPOV_step+0x1a0>
      LED_SETTINGS[POV_6_G_REG] &= ~POV_6_G_PIN;
 8010064:	785a      	ldrb	r2, [r3, #1]
 8010066:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 801006a:	705a      	strb	r2, [r3, #1]
 801006c:	e694      	b.n	800fd98 <runPOV_step+0x198>
      LED_SETTINGS[BUTTON_4_G_REG] &= ~BUTTON_4_G_PIN;
 801006e:	785a      	ldrb	r2, [r3, #1]
 8010070:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8010074:	705a      	strb	r2, [r3, #1]
 8010076:	e68b      	b.n	800fd90 <runPOV_step+0x190>
      LED_SETTINGS[POV_5_G_REG] &= ~POV_5_G_PIN;
 8010078:	785a      	ldrb	r2, [r3, #1]
 801007a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801007e:	705a      	strb	r2, [r3, #1]
 8010080:	e682      	b.n	800fd88 <runPOV_step+0x188>
      LED_SETTINGS[POV_1_R_REG] &= ~POV_1_R_PIN;
 8010082:	795a      	ldrb	r2, [r3, #5]
 8010084:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
 8010088:	715a      	strb	r2, [r3, #5]
 801008a:	e679      	b.n	800fd80 <runPOV_step+0x180>
      LED_SETTINGS[BUTTON_1_R_REG] &= ~BUTTON_1_R_PIN;
 801008c:	795a      	ldrb	r2, [r3, #5]
 801008e:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 8010092:	715a      	strb	r2, [r3, #5]
 8010094:	e670      	b.n	800fd78 <runPOV_step+0x178>
      LED_SETTINGS[BUTTON_1_G_REG] &= ~BUTTON_1_G_PIN;
 8010096:	795a      	ldrb	r2, [r3, #5]
 8010098:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801009c:	715a      	strb	r2, [r3, #5]
 801009e:	e6a8      	b.n	800fdf2 <runPOV_step+0x1f2>
      LED_SETTINGS[POV_2_G_REG] &= ~POV_2_G_PIN;
 80100a0:	795a      	ldrb	r2, [r3, #5]
 80100a2:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 80100a6:	715a      	strb	r2, [r3, #5]
 80100a8:	e69f      	b.n	800fdea <runPOV_step+0x1ea>
      LED_SETTINGS[BUTTON_2_G_REG] &= ~BUTTON_2_G_PIN;
 80100aa:	795a      	ldrb	r2, [r3, #5]
 80100ac:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 80100b0:	715a      	strb	r2, [r3, #5]
 80100b2:	e696      	b.n	800fde2 <runPOV_step+0x1e2>
      LED_SETTINGS[POV_3_G_REG] &= ~POV_3_G_PIN;
 80100b4:	791a      	ldrb	r2, [r3, #4]
 80100b6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80100ba:	711a      	strb	r2, [r3, #4]
 80100bc:	e68d      	b.n	800fdda <runPOV_step+0x1da>
      LED_SETTINGS[BUTTON_3_G_REG] &= ~BUTTON_3_G_PIN;
 80100be:	791a      	ldrb	r2, [r3, #4]
 80100c0:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 80100c4:	711a      	strb	r2, [r3, #4]
 80100c6:	e684      	b.n	800fdd2 <runPOV_step+0x1d2>
      LED_SETTINGS[POV_4_G_REG] &= ~POV_4_G_PIN;
 80100c8:	791a      	ldrb	r2, [r3, #4]
 80100ca:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 80100ce:	711a      	strb	r2, [r3, #4]
 80100d0:	e67b      	b.n	800fdca <runPOV_step+0x1ca>
      LED_SETTINGS[BUTTON_6_G_REG] &= ~BUTTON_6_G_PIN;
 80100d2:	781a      	ldrb	r2, [r3, #0]
 80100d4:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 80100d8:	701a      	strb	r2, [r3, #0]
 80100da:	e6eb      	b.n	800feb4 <runPOV_step+0x2b4>
      LED_SETTINGS[POV_7_G_REG] &= ~POV_7_G_PIN;
 80100dc:	781a      	ldrb	r2, [r3, #0]
 80100de:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80100e2:	701a      	strb	r2, [r3, #0]
 80100e4:	e6e1      	b.n	800feaa <runPOV_step+0x2aa>
      LED_SETTINGS[BUTTON_5_G_REG] &= ~BUTTON_5_G_PIN;
 80100e6:	781a      	ldrb	r2, [r3, #0]
 80100e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80100ec:	701a      	strb	r2, [r3, #0]
 80100ee:	e6d7      	b.n	800fea0 <runPOV_step+0x2a0>
      LED_SETTINGS[POV_6_G_REG] &= ~POV_6_G_PIN;
 80100f0:	785a      	ldrb	r2, [r3, #1]
 80100f2:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 80100f6:	705a      	strb	r2, [r3, #1]
 80100f8:	e6cd      	b.n	800fe96 <runPOV_step+0x296>
      LED_SETTINGS[BUTTON_4_G_REG] &= ~BUTTON_4_G_PIN;
 80100fa:	785a      	ldrb	r2, [r3, #1]
 80100fc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8010100:	705a      	strb	r2, [r3, #1]
 8010102:	e6c3      	b.n	800fe8c <runPOV_step+0x28c>
      LED_SETTINGS[POV_5_G_REG] &= ~POV_5_G_PIN;
 8010104:	785a      	ldrb	r2, [r3, #1]
 8010106:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801010a:	705a      	strb	r2, [r3, #1]
 801010c:	e6b9      	b.n	800fe82 <runPOV_step+0x282>
      LED_SETTINGS[POV_1_R_REG] &= ~POV_1_R_PIN;
 801010e:	795a      	ldrb	r2, [r3, #5]
 8010110:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
 8010114:	715a      	strb	r2, [r3, #5]
 8010116:	e6af      	b.n	800fe78 <runPOV_step+0x278>
      LED_SETTINGS[BUTTON_1_R_REG] &= ~BUTTON_1_R_PIN;
 8010118:	795a      	ldrb	r2, [r3, #5]
 801011a:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 801011e:	715a      	strb	r2, [r3, #5]
 8010120:	e6a6      	b.n	800fe70 <runPOV_step+0x270>
      LED_SETTINGS[POV_2_R_REG] &= ~POV_2_R_PIN;
 8010122:	795a      	ldrb	r2, [r3, #5]
 8010124:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 8010128:	715a      	strb	r2, [r3, #5]
 801012a:	e69d      	b.n	800fe68 <runPOV_step+0x268>
      LED_SETTINGS[BUTTON_5_R_REG] &= ~BUTTON_5_R_PIN;
 801012c:	781a      	ldrb	r2, [r3, #0]
 801012e:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
 8010132:	701a      	strb	r2, [r3, #0]
 8010134:	e6da      	b.n	800feec <runPOV_step+0x2ec>
      LED_SETTINGS[POV_6_R_REG] &= ~POV_6_R_PIN;
 8010136:	785a      	ldrb	r2, [r3, #1]
 8010138:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 801013c:	705a      	strb	r2, [r3, #1]
 801013e:	e6d0      	b.n	800fee2 <runPOV_step+0x2e2>
      LED_SETTINGS[BUTTON_4_R_REG] &= ~BUTTON_4_R_PIN;
 8010140:	785a      	ldrb	r2, [r3, #1]
 8010142:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 8010146:	705a      	strb	r2, [r3, #1]
 8010148:	e6c6      	b.n	800fed8 <runPOV_step+0x2d8>
      LED_SETTINGS[POV_5_R_REG] &= ~POV_5_R_PIN;
 801014a:	785a      	ldrb	r2, [r3, #1]
 801014c:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
 8010150:	705a      	strb	r2, [r3, #1]
 8010152:	e6bc      	b.n	800fece <runPOV_step+0x2ce>
      LED_SETTINGS[BUTTON_6_R_REG] &= ~BUTTON_6_R_PIN;
 8010154:	781a      	ldrb	r2, [r3, #0]
 8010156:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 801015a:	701a      	strb	r2, [r3, #0]
 801015c:	e6d0      	b.n	800ff00 <runPOV_step+0x300>
      LED_SETTINGS[POV_7_R_REG] &= ~POV_7_R_PIN;
 801015e:	781a      	ldrb	r2, [r3, #0]
 8010160:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 8010164:	701a      	strb	r2, [r3, #0]
 8010166:	e6c6      	b.n	800fef6 <runPOV_step+0x2f6>
      LED_SETTINGS[BUTTON_3_G_REG] &= ~BUTTON_3_G_PIN;
 8010168:	791a      	ldrb	r2, [r3, #4]
 801016a:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 801016e:	711a      	strb	r2, [r3, #4]
 8010170:	e64f      	b.n	800fe12 <runPOV_step+0x212>
      LED_SETTINGS[POV_4_G_REG] &= ~POV_4_G_PIN;
 8010172:	791a      	ldrb	r2, [r3, #4]
 8010174:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 8010178:	711a      	strb	r2, [r3, #4]
 801017a:	e646      	b.n	800fe0a <runPOV_step+0x20a>
      LED_SETTINGS[BUTTON_2_R_REG] &= ~BUTTON_2_R_PIN;
 801017c:	795a      	ldrb	r2, [r3, #5]
 801017e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8010182:	715a      	strb	r2, [r3, #5]
 8010184:	e66c      	b.n	800fe60 <runPOV_step+0x260>
      LED_SETTINGS[POV_3_R_REG] &= ~POV_3_R_PIN;
 8010186:	791a      	ldrb	r2, [r3, #4]
 8010188:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 801018c:	711a      	strb	r2, [r3, #4]
 801018e:	e663      	b.n	800fe58 <runPOV_step+0x258>
      LED_SETTINGS[BUTTON_3_R_REG] &= ~BUTTON_3_R_PIN;
 8010190:	791a      	ldrb	r2, [r3, #4]
 8010192:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 8010196:	711a      	strb	r2, [r3, #4]
 8010198:	e65a      	b.n	800fe50 <runPOV_step+0x250>
      LED_SETTINGS[POV_4_R_REG] &= ~POV_4_R_PIN;
 801019a:	791a      	ldrb	r2, [r3, #4]
 801019c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80101a0:	711a      	strb	r2, [r3, #4]
 80101a2:	e651      	b.n	800fe48 <runPOV_step+0x248>
      LED_SETTINGS[BUTTON_1_G_REG] &= ~BUTTON_1_G_PIN;
 80101a4:	795a      	ldrb	r2, [r3, #5]
 80101a6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80101aa:	715a      	strb	r2, [r3, #5]
 80101ac:	e641      	b.n	800fe32 <runPOV_step+0x232>
      LED_SETTINGS[POV_2_G_REG] &= ~POV_2_G_PIN;
 80101ae:	795a      	ldrb	r2, [r3, #5]
 80101b0:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 80101b4:	715a      	strb	r2, [r3, #5]
 80101b6:	e638      	b.n	800fe2a <runPOV_step+0x22a>
      LED_SETTINGS[BUTTON_2_G_REG] &= ~BUTTON_2_G_PIN;
 80101b8:	795a      	ldrb	r2, [r3, #5]
 80101ba:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 80101be:	715a      	strb	r2, [r3, #5]
 80101c0:	e62f      	b.n	800fe22 <runPOV_step+0x222>
      LED_SETTINGS[POV_3_G_REG] &= ~POV_3_G_PIN;
 80101c2:	791a      	ldrb	r2, [r3, #4]
 80101c4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80101c8:	711a      	strb	r2, [r3, #4]
 80101ca:	e626      	b.n	800fe1a <runPOV_step+0x21a>

080101cc <POV_Update>:
void POV_Update(void) {
 80101cc:	b538      	push	{r3, r4, r5, lr}
  if (firstRun) {
 80101ce:	4d38      	ldr	r5, [pc, #224]	; (80102b0 <POV_Update+0xe4>)
 80101d0:	782b      	ldrb	r3, [r5, #0]
 80101d2:	b183      	cbz	r3, 80101f6 <POV_Update+0x2a>
    if (global_visNum == 1) {
 80101d4:	4b37      	ldr	r3, [pc, #220]	; (80102b4 <POV_Update+0xe8>)
      runPOV_step(&message_resenv_red[indexTracker + HALF_LENGTH][0],
 80101d6:	4c38      	ldr	r4, [pc, #224]	; (80102b8 <POV_Update+0xec>)
    if (global_visNum == 1) {
 80101d8:	881b      	ldrh	r3, [r3, #0]
    firstRun = 0;
 80101da:	2200      	movs	r2, #0
    if (global_visNum == 1) {
 80101dc:	2b01      	cmp	r3, #1
    firstRun = 0;
 80101de:	702a      	strb	r2, [r5, #0]
    if (global_visNum == 1) {
 80101e0:	d031      	beq.n	8010246 <POV_Update+0x7a>
    } else if (global_visNum == 2) {
 80101e2:	2b02      	cmp	r3, #2
 80101e4:	d03c      	beq.n	8010260 <POV_Update+0x94>
  }
}

void transmitToBuffer(void) {

  osSemaphoreRelease (transmitLED_bufferSemaphoreHandle);
 80101e6:	4b35      	ldr	r3, [pc, #212]	; (80102bc <POV_Update+0xf0>)
 80101e8:	6818      	ldr	r0, [r3, #0]
 80101ea:	f7fb fded 	bl	800bdc8 <osSemaphoreRelease>
    indexTracker++;
 80101ee:	6823      	ldr	r3, [r4, #0]
 80101f0:	3301      	adds	r3, #1
 80101f2:	6023      	str	r3, [r4, #0]
 80101f4:	bd38      	pop	{r3, r4, r5, pc}
  if (indexTracker >= (HALF_LENGTH - 1)) {
 80101f6:	4c30      	ldr	r4, [pc, #192]	; (80102b8 <POV_Update+0xec>)
 80101f8:	6822      	ldr	r2, [r4, #0]
 80101fa:	2a0e      	cmp	r2, #14
 80101fc:	d80f      	bhi.n	801021e <POV_Update+0x52>
    if (global_visNum == 1) {
 80101fe:	4b2d      	ldr	r3, [pc, #180]	; (80102b4 <POV_Update+0xe8>)
 8010200:	881b      	ldrh	r3, [r3, #0]
 8010202:	2b01      	cmp	r3, #1
 8010204:	d037      	beq.n	8010276 <POV_Update+0xaa>
    } else if (global_visNum == 2) {
 8010206:	2b02      	cmp	r3, #2
 8010208:	d1ed      	bne.n	80101e6 <POV_Update+0x1a>
      runPOV_step(&lidar_red[indexTracker][0], &lidar_green[indexTracker][0],
 801020a:	492d      	ldr	r1, [pc, #180]	; (80102c0 <POV_Update+0xf4>)
 801020c:	482d      	ldr	r0, [pc, #180]	; (80102c4 <POV_Update+0xf8>)
 801020e:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8010212:	4419      	add	r1, r3
 8010214:	b2d2      	uxtb	r2, r2
 8010216:	4418      	add	r0, r3
 8010218:	f7ff fcf2 	bl	800fc00 <runPOV_step>
 801021c:	e7e3      	b.n	80101e6 <POV_Update+0x1a>
    HAL_TIM_Base_Stop_IT(&htim3);
 801021e:	482a      	ldr	r0, [pc, #168]	; (80102c8 <POV_Update+0xfc>)
 8010220:	f7f5 ff70 	bl	8006104 <HAL_TIM_Base_Stop_IT>
    if (global_visNum == 1) {
 8010224:	4b23      	ldr	r3, [pc, #140]	; (80102b4 <POV_Update+0xe8>)
 8010226:	881b      	ldrh	r3, [r3, #0]
 8010228:	2b01      	cmp	r3, #1
 801022a:	d034      	beq.n	8010296 <POV_Update+0xca>
    } else if (global_visNum == 2) {
 801022c:	2b02      	cmp	r3, #2
 801022e:	d027      	beq.n	8010280 <POV_Update+0xb4>
  osSemaphoreRelease (transmitLED_bufferSemaphoreHandle);
 8010230:	4b22      	ldr	r3, [pc, #136]	; (80102bc <POV_Update+0xf0>)
 8010232:	6818      	ldr	r0, [r3, #0]
 8010234:	f7fb fdc8 	bl	800bdc8 <osSemaphoreRelease>
    POV_timerActive = 0;
 8010238:	4924      	ldr	r1, [pc, #144]	; (80102cc <POV_Update+0x100>)
    indexTracker = 0;
 801023a:	2300      	movs	r3, #0
    firstRun = 1;
 801023c:	2201      	movs	r2, #1
    POV_timerActive = 0;
 801023e:	700b      	strb	r3, [r1, #0]
    firstRun = 1;
 8010240:	702a      	strb	r2, [r5, #0]
    indexTracker = 0;
 8010242:	6023      	str	r3, [r4, #0]
 8010244:	bd38      	pop	{r3, r4, r5, pc}
      runPOV_step(&message_resenv_red[indexTracker + HALF_LENGTH][0],
 8010246:	6822      	ldr	r2, [r4, #0]
                  &message_resenv_green[indexTracker][0], indexTracker);
 8010248:	4921      	ldr	r1, [pc, #132]	; (80102d0 <POV_Update+0x104>)
      runPOV_step(&message_resenv_red[indexTracker + HALF_LENGTH][0],
 801024a:	4822      	ldr	r0, [pc, #136]	; (80102d4 <POV_Update+0x108>)
 801024c:	f102 0310 	add.w	r3, r2, #16
 8010250:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
      runPOV_step(&message_resenv_red[indexTracker + HALF_LENGTH][0],
 8010254:	b2d2      	uxtb	r2, r2
 8010256:	4419      	add	r1, r3
 8010258:	4418      	add	r0, r3
 801025a:	f7ff fcd1 	bl	800fc00 <runPOV_step>
 801025e:	e7c2      	b.n	80101e6 <POV_Update+0x1a>
      runPOV_step(&lidar_red[indexTracker][0], &lidar_green[indexTracker][0],
 8010260:	6822      	ldr	r2, [r4, #0]
 8010262:	4917      	ldr	r1, [pc, #92]	; (80102c0 <POV_Update+0xf4>)
 8010264:	4817      	ldr	r0, [pc, #92]	; (80102c4 <POV_Update+0xf8>)
 8010266:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 801026a:	4419      	add	r1, r3
 801026c:	b2d2      	uxtb	r2, r2
 801026e:	4418      	add	r0, r3
 8010270:	f7ff fcc6 	bl	800fc00 <runPOV_step>
 8010274:	e7b7      	b.n	80101e6 <POV_Update+0x1a>
      runPOV_step(&message_resenv_red[indexTracker + HALF_LENGTH][0],
 8010276:	f102 0310 	add.w	r3, r2, #16
                  &message_resenv_green[indexTracker][0], indexTracker);
 801027a:	4915      	ldr	r1, [pc, #84]	; (80102d0 <POV_Update+0x104>)
      runPOV_step(&message_resenv_red[indexTracker + HALF_LENGTH][0],
 801027c:	4815      	ldr	r0, [pc, #84]	; (80102d4 <POV_Update+0x108>)
 801027e:	e7e7      	b.n	8010250 <POV_Update+0x84>
      runPOV_step(&lidar_red[indexTracker][0], &lidar_green[indexTracker][0],
 8010280:	6822      	ldr	r2, [r4, #0]
 8010282:	490f      	ldr	r1, [pc, #60]	; (80102c0 <POV_Update+0xf4>)
 8010284:	480f      	ldr	r0, [pc, #60]	; (80102c4 <POV_Update+0xf8>)
 8010286:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 801028a:	4419      	add	r1, r3
 801028c:	b2d2      	uxtb	r2, r2
 801028e:	4418      	add	r0, r3
 8010290:	f7ff fcb6 	bl	800fc00 <runPOV_step>
 8010294:	e7cc      	b.n	8010230 <POV_Update+0x64>
      runPOV_step(&message_resenv_red[indexTracker + HALF_LENGTH][0],
 8010296:	6822      	ldr	r2, [r4, #0]
                  &message_resenv_green[indexTracker][0], indexTracker);
 8010298:	490d      	ldr	r1, [pc, #52]	; (80102d0 <POV_Update+0x104>)
      runPOV_step(&message_resenv_red[indexTracker + HALF_LENGTH][0],
 801029a:	480e      	ldr	r0, [pc, #56]	; (80102d4 <POV_Update+0x108>)
 801029c:	f102 0310 	add.w	r3, r2, #16
 80102a0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80102a4:	b2d2      	uxtb	r2, r2
 80102a6:	4419      	add	r1, r3
 80102a8:	4418      	add	r0, r3
 80102aa:	f7ff fca9 	bl	800fc00 <runPOV_step>
 80102ae:	e7bf      	b.n	8010230 <POV_Update+0x64>
 80102b0:	20000045 	.word	0x20000045
 80102b4:	200050dc 	.word	0x200050dc
 80102b8:	200050e0 	.word	0x200050e0
 80102bc:	20005468 	.word	0x20005468
 80102c0:	200050e8 	.word	0x200050e8
 80102c4:	200051c8 	.word	0x200051c8
 80102c8:	2000606c 	.word	0x2000606c
 80102cc:	200050da 	.word	0x200050da
 80102d0:	080171ac 	.word	0x080171ac
 80102d4:	080172fc 	.word	0x080172fc

080102d8 <run_message>:
                 uint32_t cyclePerHalfTurn) {
 80102d8:	b570      	push	{r4, r5, r6, lr}
      round(((cyclePerHalfTurn) / ((double)TICK_POV_MICROSEC_10_DIVIDER)) /
 80102da:	4610      	mov	r0, r2
 80102dc:	f7f0 f8d2 	bl	8000484 <__aeabi_ui2d>
 80102e0:	a353      	add	r3, pc, #332	; (adr r3, 8010430 <run_message+0x158>)
 80102e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102e6:	f7f0 f943 	bl	8000570 <__aeabi_dmul>
  if (POV_timerActive == 0) {
 80102ea:	4c45      	ldr	r4, [pc, #276]	; (8010400 <run_message+0x128>)
      round(((cyclePerHalfTurn) / ((double)TICK_POV_MICROSEC_10_DIVIDER)) /
 80102ec:	ec41 0b10 	vmov	d0, r0, r1
 80102f0:	f005 f93a 	bl	8015568 <round>
  if (POV_timerActive == 0) {
 80102f4:	7825      	ldrb	r5, [r4, #0]
 80102f6:	b105      	cbz	r5, 80102fa <run_message+0x22>
 80102f8:	bd70      	pop	{r4, r5, r6, pc}
    timerPOVstate = switchPOV;
 80102fa:	4a42      	ldr	r2, [pc, #264]	; (8010404 <run_message+0x12c>)
 80102fc:	4b42      	ldr	r3, [pc, #264]	; (8010408 <run_message+0x130>)
 80102fe:	6812      	ldr	r2, [r2, #0]
 8010300:	601a      	str	r2, [r3, #0]
    POV_timerActive = 1;
 8010302:	2301      	movs	r3, #1
 8010304:	7023      	strb	r3, [r4, #0]
  uint32_t uS_10_needed =
 8010306:	ec51 0b10 	vmov	r0, r1, d0
 801030a:	f7f0 fc09 	bl	8000b20 <__aeabi_d2uiz>
  if (firstRun) {
 801030e:	4e3f      	ldr	r6, [pc, #252]	; (801040c <run_message+0x134>)
    htim3.Instance->ARR = (uint16_t)uS_10_needed;
 8010310:	4b3f      	ldr	r3, [pc, #252]	; (8010410 <run_message+0x138>)
  if (firstRun) {
 8010312:	7832      	ldrb	r2, [r6, #0]
    htim3.Instance->ARR = (uint16_t)uS_10_needed;
 8010314:	6819      	ldr	r1, [r3, #0]
 8010316:	b280      	uxth	r0, r0
 8010318:	62c8      	str	r0, [r1, #44]	; 0x2c
  if (firstRun) {
 801031a:	b9aa      	cbnz	r2, 8010348 <run_message+0x70>
  if (indexTracker >= (HALF_LENGTH - 1)) {
 801031c:	4d3d      	ldr	r5, [pc, #244]	; (8010414 <run_message+0x13c>)
 801031e:	682a      	ldr	r2, [r5, #0]
 8010320:	2a0e      	cmp	r2, #14
 8010322:	d824      	bhi.n	801036e <run_message+0x96>
    if (global_visNum == 1) {
 8010324:	4b3c      	ldr	r3, [pc, #240]	; (8010418 <run_message+0x140>)
 8010326:	881b      	ldrh	r3, [r3, #0]
 8010328:	2b01      	cmp	r3, #1
 801032a:	d04d      	beq.n	80103c8 <run_message+0xf0>
    } else if (global_visNum == 2) {
 801032c:	2b02      	cmp	r3, #2
 801032e:	d050      	beq.n	80103d2 <run_message+0xfa>
  osSemaphoreRelease (transmitLED_bufferSemaphoreHandle);
 8010330:	4b3a      	ldr	r3, [pc, #232]	; (801041c <run_message+0x144>)
 8010332:	6818      	ldr	r0, [r3, #0]
 8010334:	f7fb fd48 	bl	800bdc8 <osSemaphoreRelease>
    indexTracker++;
 8010338:	682b      	ldr	r3, [r5, #0]
 801033a:	3301      	adds	r3, #1
 801033c:	602b      	str	r3, [r5, #0]
    HAL_TIM_Base_Start_IT(&htim3);
 801033e:	4834      	ldr	r0, [pc, #208]	; (8010410 <run_message+0x138>)
}
 8010340:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_TIM_Base_Start_IT(&htim3);
 8010344:	f7f5 bec6 	b.w	80060d4 <HAL_TIM_Base_Start_IT>
    if (global_visNum == 1) {
 8010348:	4b33      	ldr	r3, [pc, #204]	; (8010418 <run_message+0x140>)
    firstRun = 0;
 801034a:	7035      	strb	r5, [r6, #0]
    if (global_visNum == 1) {
 801034c:	881b      	ldrh	r3, [r3, #0]
      runPOV_step(&message_resenv_red[indexTracker + HALF_LENGTH][0],
 801034e:	4d31      	ldr	r5, [pc, #196]	; (8010414 <run_message+0x13c>)
    if (global_visNum == 1) {
 8010350:	2b01      	cmp	r3, #1
 8010352:	d02c      	beq.n	80103ae <run_message+0xd6>
    } else if (global_visNum == 2) {
 8010354:	2b02      	cmp	r3, #2
 8010356:	d1eb      	bne.n	8010330 <run_message+0x58>
      runPOV_step(&lidar_red[indexTracker][0], &lidar_green[indexTracker][0],
 8010358:	682a      	ldr	r2, [r5, #0]
 801035a:	4931      	ldr	r1, [pc, #196]	; (8010420 <run_message+0x148>)
 801035c:	4831      	ldr	r0, [pc, #196]	; (8010424 <run_message+0x14c>)
 801035e:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8010362:	4419      	add	r1, r3
 8010364:	b2d2      	uxtb	r2, r2
 8010366:	4418      	add	r0, r3
 8010368:	f7ff fc4a 	bl	800fc00 <runPOV_step>
 801036c:	e7e0      	b.n	8010330 <run_message+0x58>
    HAL_TIM_Base_Stop_IT(&htim3);
 801036e:	4618      	mov	r0, r3
 8010370:	f7f5 fec8 	bl	8006104 <HAL_TIM_Base_Stop_IT>
    if (global_visNum == 1) {
 8010374:	4b28      	ldr	r3, [pc, #160]	; (8010418 <run_message+0x140>)
 8010376:	881b      	ldrh	r3, [r3, #0]
 8010378:	2b01      	cmp	r3, #1
 801037a:	d00b      	beq.n	8010394 <run_message+0xbc>
    } else if (global_visNum == 2) {
 801037c:	2b02      	cmp	r3, #2
 801037e:	d032      	beq.n	80103e6 <run_message+0x10e>
  osSemaphoreRelease (transmitLED_bufferSemaphoreHandle);
 8010380:	4b26      	ldr	r3, [pc, #152]	; (801041c <run_message+0x144>)
 8010382:	6818      	ldr	r0, [r3, #0]
 8010384:	f7fb fd20 	bl	800bdc8 <osSemaphoreRelease>
    indexTracker = 0;
 8010388:	2300      	movs	r3, #0
    firstRun = 1;
 801038a:	2201      	movs	r2, #1
    indexTracker = 0;
 801038c:	602b      	str	r3, [r5, #0]
    POV_timerActive = 0;
 801038e:	7023      	strb	r3, [r4, #0]
    firstRun = 1;
 8010390:	7032      	strb	r2, [r6, #0]
 8010392:	e7d4      	b.n	801033e <run_message+0x66>
      runPOV_step(&message_resenv_red[indexTracker + HALF_LENGTH][0],
 8010394:	682a      	ldr	r2, [r5, #0]
                  &message_resenv_green[indexTracker][0], indexTracker);
 8010396:	4924      	ldr	r1, [pc, #144]	; (8010428 <run_message+0x150>)
      runPOV_step(&message_resenv_red[indexTracker + HALF_LENGTH][0],
 8010398:	4824      	ldr	r0, [pc, #144]	; (801042c <run_message+0x154>)
 801039a:	f102 0310 	add.w	r3, r2, #16
 801039e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80103a2:	b2d2      	uxtb	r2, r2
 80103a4:	4419      	add	r1, r3
 80103a6:	4418      	add	r0, r3
 80103a8:	f7ff fc2a 	bl	800fc00 <runPOV_step>
 80103ac:	e7e8      	b.n	8010380 <run_message+0xa8>
      runPOV_step(&message_resenv_red[indexTracker + HALF_LENGTH][0],
 80103ae:	682a      	ldr	r2, [r5, #0]
                  &message_resenv_green[indexTracker][0], indexTracker);
 80103b0:	491d      	ldr	r1, [pc, #116]	; (8010428 <run_message+0x150>)
      runPOV_step(&message_resenv_red[indexTracker + HALF_LENGTH][0],
 80103b2:	481e      	ldr	r0, [pc, #120]	; (801042c <run_message+0x154>)
 80103b4:	f102 0310 	add.w	r3, r2, #16
 80103b8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
      runPOV_step(&message_resenv_red[indexTracker + HALF_LENGTH][0],
 80103bc:	b2d2      	uxtb	r2, r2
 80103be:	4419      	add	r1, r3
 80103c0:	4418      	add	r0, r3
 80103c2:	f7ff fc1d 	bl	800fc00 <runPOV_step>
 80103c6:	e7b3      	b.n	8010330 <run_message+0x58>
 80103c8:	f102 0310 	add.w	r3, r2, #16
                  &message_resenv_green[indexTracker][0], indexTracker);
 80103cc:	4916      	ldr	r1, [pc, #88]	; (8010428 <run_message+0x150>)
      runPOV_step(&message_resenv_red[indexTracker + HALF_LENGTH][0],
 80103ce:	4817      	ldr	r0, [pc, #92]	; (801042c <run_message+0x154>)
 80103d0:	e7f2      	b.n	80103b8 <run_message+0xe0>
      runPOV_step(&lidar_red[indexTracker][0], &lidar_green[indexTracker][0],
 80103d2:	4913      	ldr	r1, [pc, #76]	; (8010420 <run_message+0x148>)
 80103d4:	4813      	ldr	r0, [pc, #76]	; (8010424 <run_message+0x14c>)
 80103d6:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 80103da:	4419      	add	r1, r3
 80103dc:	b2d2      	uxtb	r2, r2
 80103de:	4418      	add	r0, r3
 80103e0:	f7ff fc0e 	bl	800fc00 <runPOV_step>
 80103e4:	e7a4      	b.n	8010330 <run_message+0x58>
      runPOV_step(&lidar_red[indexTracker][0], &lidar_green[indexTracker][0],
 80103e6:	682a      	ldr	r2, [r5, #0]
 80103e8:	490d      	ldr	r1, [pc, #52]	; (8010420 <run_message+0x148>)
 80103ea:	480e      	ldr	r0, [pc, #56]	; (8010424 <run_message+0x14c>)
 80103ec:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 80103f0:	4419      	add	r1, r3
 80103f2:	b2d2      	uxtb	r2, r2
 80103f4:	4418      	add	r0, r3
 80103f6:	f7ff fc03 	bl	800fc00 <runPOV_step>
 80103fa:	e7c1      	b.n	8010380 <run_message+0xa8>
 80103fc:	f3af 8000 	nop.w
 8010400:	200050da 	.word	0x200050da
 8010404:	200052a8 	.word	0x200052a8
 8010408:	200052ac 	.word	0x200052ac
 801040c:	20000045 	.word	0x20000045
 8010410:	2000606c 	.word	0x2000606c
 8010414:	200050e0 	.word	0x200050e0
 8010418:	200050dc 	.word	0x200050dc
 801041c:	20005468 	.word	0x20005468
 8010420:	200050e8 	.word	0x200050e8
 8010424:	200051c8 	.word	0x200051c8
 8010428:	080171ac 	.word	0x080171ac
 801042c:	080172fc 	.word	0x080172fc
 8010430:	47ae147b 	.word	0x47ae147b
 8010434:	3f147ae1 	.word	0x3f147ae1

08010438 <POV_handler>:
void POV_handler(uint64_t RPR) {
 8010438:	b5d0      	push	{r4, r6, r7, lr}
  switchPOV++;
 801043a:	4c21      	ldr	r4, [pc, #132]	; (80104c0 <POV_handler+0x88>)
  if ((RPR) <= ((uint32_t)TICK_POV_THRESH)) {
 801043c:	a71e      	add	r7, pc, #120	; (adr r7, 80104b8 <POV_handler+0x80>)
 801043e:	e9d7 6700 	ldrd	r6, r7, [r7]
  switchPOV++;
 8010442:	6823      	ldr	r3, [r4, #0]
  if ((RPR) <= ((uint32_t)TICK_POV_THRESH)) {
 8010444:	428f      	cmp	r7, r1
  switchPOV++;
 8010446:	f103 0301 	add.w	r3, r3, #1
  if ((RPR) <= ((uint32_t)TICK_POV_THRESH)) {
 801044a:	bf08      	it	eq
 801044c:	4286      	cmpeq	r6, r0
  switchPOV++;
 801044e:	6023      	str	r3, [r4, #0]
  if ((RPR) <= ((uint32_t)TICK_POV_THRESH)) {
 8010450:	d200      	bcs.n	8010454 <POV_handler+0x1c>
 8010452:	bdd0      	pop	{r4, r6, r7, pc}
 8010454:	4606      	mov	r6, r0
    disable_buttons();
 8010456:	f000 fe73 	bl	8011140 <disable_buttons>
    usTickTracker = (uint32_t)RPR;
 801045a:	4b1a      	ldr	r3, [pc, #104]	; (80104c4 <POV_handler+0x8c>)
 801045c:	601e      	str	r6, [r3, #0]
    lidarPOV_Map = get_lidar_POV_map();
 801045e:	f000 f93b 	bl	80106d8 <get_lidar_POV_map>
 8010462:	4b19      	ldr	r3, [pc, #100]	; (80104c8 <POV_handler+0x90>)
 8010464:	4604      	mov	r4, r0
  memset(lidar_green, 0,
 8010466:	22e0      	movs	r2, #224	; 0xe0
 8010468:	2100      	movs	r1, #0
 801046a:	4818      	ldr	r0, [pc, #96]	; (80104cc <POV_handler+0x94>)
    lidarPOV_Map = get_lidar_POV_map();
 801046c:	601c      	str	r4, [r3, #0]
  memset(lidar_green, 0,
 801046e:	f005 f818 	bl	80154a2 <memset>
  memset(lidar_red, 0,
 8010472:	22e0      	movs	r2, #224	; 0xe0
 8010474:	2100      	movs	r1, #0
 8010476:	4816      	ldr	r0, [pc, #88]	; (80104d0 <POV_handler+0x98>)
 8010478:	f005 f813 	bl	80154a2 <memset>
  if (lidarPOV_Map >= (MESSAGE_LENGTH)) {
 801047c:	2c1f      	cmp	r4, #31
 801047e:	d810      	bhi.n	80104a2 <POV_handler+0x6a>
    setMatrix(lidar_green,
 8010480:	1c62      	adds	r2, r4, #1
    memset(matrix, 1, size);
 8010482:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8010486:	2101      	movs	r1, #1
 8010488:	4810      	ldr	r0, [pc, #64]	; (80104cc <POV_handler+0x94>)
 801048a:	f005 f80a 	bl	80154a2 <memset>
    global_visNum = 2;
 801048e:	4b11      	ldr	r3, [pc, #68]	; (80104d4 <POV_handler+0x9c>)
    run_message(lidar_green, lidar_red, cyclePerHalfTurn);
 8010490:	490f      	ldr	r1, [pc, #60]	; (80104d0 <POV_handler+0x98>)
 8010492:	480e      	ldr	r0, [pc, #56]	; (80104cc <POV_handler+0x94>)
    global_visNum = 2;
 8010494:	2402      	movs	r4, #2
    run_message(lidar_green, lidar_red, cyclePerHalfTurn);
 8010496:	4632      	mov	r2, r6
    global_visNum = 2;
 8010498:	801c      	strh	r4, [r3, #0]
}
 801049a:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
    run_message(lidar_green, lidar_red, cyclePerHalfTurn);
 801049e:	f7ff bf1b 	b.w	80102d8 <run_message>
    setMatrix(lidar_red,
 80104a2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    memset(matrix, 1, size);
 80104a6:	f1a4 02d9 	sub.w	r2, r4, #217	; 0xd9
 80104aa:	2101      	movs	r1, #1
 80104ac:	4808      	ldr	r0, [pc, #32]	; (80104d0 <POV_handler+0x98>)
 80104ae:	f004 fff8 	bl	80154a2 <memset>
 80104b2:	e7ec      	b.n	801048e <POV_handler+0x56>
 80104b4:	f3af 8000 	nop.w
 80104b8:	01c9c380 	.word	0x01c9c380
 80104bc:	00000000 	.word	0x00000000
 80104c0:	200052a8 	.word	0x200052a8
 80104c4:	200052b0 	.word	0x200052b0
 80104c8:	200050e4 	.word	0x200050e4
 80104cc:	200050e8 	.word	0x200050e8
 80104d0:	200051c8 	.word	0x200051c8
 80104d4:	200050dc 	.word	0x200050dc

080104d8 <transmitToBuffer>:
  osSemaphoreRelease (transmitLED_bufferSemaphoreHandle);
 80104d8:	4b01      	ldr	r3, [pc, #4]	; (80104e0 <transmitToBuffer+0x8>)
 80104da:	6818      	ldr	r0, [r3, #0]
 80104dc:	f7fb bc74 	b.w	800bdc8 <osSemaphoreRelease>
 80104e0:	20005468 	.word	0x20005468

080104e4 <POV_LEDs>:
    {MAP_POV_1_R}, {MAP_POV_1_G}, {MAP_POV_1_R}, {MAP_POV_1_G}, {MAP_POV_1_R},
    {MAP_POV_1_G}, {MAP_POV_1_R}, {MAP_POV_1_G}, {MAP_POV_1_R}, {MAP_POV_1_G}};

void POV_LEDs(uint16_t led_map) {
  if ((led_map & MAP_POV_1_R) == MAP_POV_1_R) {
    LED_SETTINGS[POV_1_R_REG] &= ~POV_1_R_PIN;
 80104e4:	4b42      	ldr	r3, [pc, #264]	; (80105f0 <POV_LEDs+0x10c>)
 80104e6:	795a      	ldrb	r2, [r3, #5]
  if ((led_map & MAP_POV_1_R) == MAP_POV_1_R) {
 80104e8:	07c1      	lsls	r1, r0, #31
    LED_SETTINGS[POV_1_R_REG] &= ~POV_1_R_PIN;
 80104ea:	bf4c      	ite	mi
 80104ec:	f002 02bf 	andmi.w	r2, r2, #191	; 0xbf
  } else {
    LED_SETTINGS[POV_1_R_REG] |= POV_1_R_PIN;
 80104f0:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80104f4:	715a      	strb	r2, [r3, #5]
  }

  if ((led_map & MAP_POV_2_R) == MAP_POV_2_R) {
    LED_SETTINGS[POV_2_R_REG] &= ~POV_2_R_PIN;
 80104f6:	795a      	ldrb	r2, [r3, #5]
  if ((led_map & MAP_POV_2_R) == MAP_POV_2_R) {
 80104f8:	0781      	lsls	r1, r0, #30
    LED_SETTINGS[POV_2_R_REG] &= ~POV_2_R_PIN;
 80104fa:	bf4c      	ite	mi
 80104fc:	f002 02fb 	andmi.w	r2, r2, #251	; 0xfb
  } else {
    LED_SETTINGS[POV_2_R_REG] |= POV_2_R_PIN;
 8010500:	f042 0204 	orrpl.w	r2, r2, #4
 8010504:	715a      	strb	r2, [r3, #5]
  }

  if ((led_map & MAP_POV_3_R) == MAP_POV_3_R) {
    LED_SETTINGS[POV_3_R_REG] &= ~POV_3_R_PIN;
 8010506:	791a      	ldrb	r2, [r3, #4]
  if ((led_map & MAP_POV_3_R) == MAP_POV_3_R) {
 8010508:	0741      	lsls	r1, r0, #29
    LED_SETTINGS[POV_3_R_REG] &= ~POV_3_R_PIN;
 801050a:	bf4c      	ite	mi
 801050c:	f002 02ef 	andmi.w	r2, r2, #239	; 0xef
  } else {
    LED_SETTINGS[POV_3_R_REG] |= POV_3_R_PIN;
 8010510:	f042 0210 	orrpl.w	r2, r2, #16
 8010514:	711a      	strb	r2, [r3, #4]
  }

  if ((led_map & MAP_POV_4_R) == MAP_POV_4_R) {
    LED_SETTINGS[POV_4_R_REG] &= ~POV_4_R_PIN;
 8010516:	791a      	ldrb	r2, [r3, #4]
  if ((led_map & MAP_POV_4_R) == MAP_POV_4_R) {
 8010518:	0701      	lsls	r1, r0, #28
    LED_SETTINGS[POV_4_R_REG] &= ~POV_4_R_PIN;
 801051a:	bf4c      	ite	mi
 801051c:	f002 02fe 	andmi.w	r2, r2, #254	; 0xfe
  } else {
    LED_SETTINGS[POV_4_R_REG] |= POV_4_R_PIN;
 8010520:	f042 0201 	orrpl.w	r2, r2, #1
 8010524:	711a      	strb	r2, [r3, #4]
  }

  if ((led_map & MAP_POV_5_R) == MAP_POV_5_R) {
    LED_SETTINGS[POV_5_R_REG] &= ~POV_5_R_PIN;
 8010526:	785a      	ldrb	r2, [r3, #1]
  if ((led_map & MAP_POV_5_R) == MAP_POV_5_R) {
 8010528:	06c1      	lsls	r1, r0, #27
    LED_SETTINGS[POV_5_R_REG] &= ~POV_5_R_PIN;
 801052a:	bf4c      	ite	mi
 801052c:	f002 02bf 	andmi.w	r2, r2, #191	; 0xbf
  } else {
    LED_SETTINGS[POV_5_R_REG] |= POV_5_R_PIN;
 8010530:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8010534:	705a      	strb	r2, [r3, #1]
  }

  if ((led_map & MAP_POV_6_R) == MAP_POV_6_R) {
    LED_SETTINGS[POV_6_R_REG] &= ~POV_6_R_PIN;
 8010536:	785a      	ldrb	r2, [r3, #1]
  if ((led_map & MAP_POV_6_R) == MAP_POV_6_R) {
 8010538:	0681      	lsls	r1, r0, #26
    LED_SETTINGS[POV_6_R_REG] &= ~POV_6_R_PIN;
 801053a:	bf4c      	ite	mi
 801053c:	f002 02fb 	andmi.w	r2, r2, #251	; 0xfb
  } else {
    LED_SETTINGS[POV_6_R_REG] |= POV_6_R_PIN;
 8010540:	f042 0204 	orrpl.w	r2, r2, #4
 8010544:	705a      	strb	r2, [r3, #1]
  }

  if ((led_map & MAP_POV_7_R) == MAP_POV_7_R) {
    LED_SETTINGS[POV_7_R_REG] &= ~POV_7_R_PIN;
 8010546:	781a      	ldrb	r2, [r3, #0]
  if ((led_map & MAP_POV_7_R) == MAP_POV_7_R) {
 8010548:	0641      	lsls	r1, r0, #25
    LED_SETTINGS[POV_7_R_REG] &= ~POV_7_R_PIN;
 801054a:	bf4c      	ite	mi
 801054c:	f002 02ef 	andmi.w	r2, r2, #239	; 0xef
  } else {
    LED_SETTINGS[POV_7_R_REG] |= POV_7_R_PIN;
 8010550:	f042 0210 	orrpl.w	r2, r2, #16
 8010554:	701a      	strb	r2, [r3, #0]
  }

  if ((led_map & MAP_POV_8_R) == MAP_POV_8_R) {
    LED_SETTINGS[POV_8_R_REG] &= ~POV_8_R_PIN;
 8010556:	781a      	ldrb	r2, [r3, #0]
  if ((led_map & MAP_POV_8_R) == MAP_POV_8_R) {
 8010558:	0601      	lsls	r1, r0, #24
    LED_SETTINGS[POV_8_R_REG] &= ~POV_8_R_PIN;
 801055a:	bf4c      	ite	mi
 801055c:	f002 02fe 	andmi.w	r2, r2, #254	; 0xfe
  } else {
    LED_SETTINGS[POV_8_R_REG] |= POV_8_R_PIN;
 8010560:	f042 0201 	orrpl.w	r2, r2, #1
 8010564:	701a      	strb	r2, [r3, #0]
  }

  if ((led_map & MAP_POV_1_G) == MAP_POV_1_G) {
    LED_SETTINGS[POV_1_G_REG] &= ~POV_1_G_PIN;
 8010566:	795a      	ldrb	r2, [r3, #5]
  if ((led_map & MAP_POV_1_G) == MAP_POV_1_G) {
 8010568:	05c1      	lsls	r1, r0, #23
    LED_SETTINGS[POV_1_G_REG] &= ~POV_1_G_PIN;
 801056a:	bf4c      	ite	mi
 801056c:	f002 027f 	andmi.w	r2, r2, #127	; 0x7f
  } else {
    LED_SETTINGS[POV_1_G_REG] |= POV_1_G_PIN;
 8010570:	f042 0280 	orrpl.w	r2, r2, #128	; 0x80
 8010574:	715a      	strb	r2, [r3, #5]
  }

  if ((led_map & MAP_POV_2_G) == MAP_POV_2_G) {
    LED_SETTINGS[POV_2_G_REG] &= ~POV_2_G_PIN;
 8010576:	795a      	ldrb	r2, [r3, #5]
  if ((led_map & MAP_POV_2_G) == MAP_POV_2_G) {
 8010578:	0581      	lsls	r1, r0, #22
    LED_SETTINGS[POV_2_G_REG] &= ~POV_2_G_PIN;
 801057a:	bf4c      	ite	mi
 801057c:	f002 02f7 	andmi.w	r2, r2, #247	; 0xf7
  } else {
    LED_SETTINGS[POV_2_G_REG] |= POV_2_G_PIN;
 8010580:	f042 0208 	orrpl.w	r2, r2, #8
 8010584:	715a      	strb	r2, [r3, #5]
  }

  if ((led_map & MAP_POV_3_G) == MAP_POV_3_G) {
    LED_SETTINGS[POV_3_G_REG] &= ~POV_3_G_PIN;
 8010586:	791a      	ldrb	r2, [r3, #4]
  if ((led_map & MAP_POV_3_G) == MAP_POV_3_G) {
 8010588:	0541      	lsls	r1, r0, #21
    LED_SETTINGS[POV_3_G_REG] &= ~POV_3_G_PIN;
 801058a:	bf4c      	ite	mi
 801058c:	f002 02df 	andmi.w	r2, r2, #223	; 0xdf
  } else {
    LED_SETTINGS[POV_3_G_REG] |= POV_3_G_PIN;
 8010590:	f042 0220 	orrpl.w	r2, r2, #32
 8010594:	711a      	strb	r2, [r3, #4]
  }

  if ((led_map & MAP_POV_4_G) == MAP_POV_4_G) {
    LED_SETTINGS[POV_4_G_REG] &= ~POV_4_G_PIN;
 8010596:	791a      	ldrb	r2, [r3, #4]
  if ((led_map & MAP_POV_4_G) == MAP_POV_4_G) {
 8010598:	0501      	lsls	r1, r0, #20
    LED_SETTINGS[POV_4_G_REG] &= ~POV_4_G_PIN;
 801059a:	bf4c      	ite	mi
 801059c:	f002 02fd 	andmi.w	r2, r2, #253	; 0xfd
  } else {
    LED_SETTINGS[POV_4_G_REG] |= POV_4_G_PIN;
 80105a0:	f042 0202 	orrpl.w	r2, r2, #2
 80105a4:	711a      	strb	r2, [r3, #4]
  }

  if ((led_map & MAP_POV_5_G) == MAP_POV_5_G) {
    LED_SETTINGS[POV_5_G_REG] &= ~POV_5_G_PIN;
 80105a6:	785a      	ldrb	r2, [r3, #1]
  if ((led_map & MAP_POV_5_G) == MAP_POV_5_G) {
 80105a8:	04c1      	lsls	r1, r0, #19
    LED_SETTINGS[POV_5_G_REG] &= ~POV_5_G_PIN;
 80105aa:	bf4c      	ite	mi
 80105ac:	f002 027f 	andmi.w	r2, r2, #127	; 0x7f
  } else {
    LED_SETTINGS[POV_5_G_REG] |= POV_5_G_PIN;
 80105b0:	f042 0280 	orrpl.w	r2, r2, #128	; 0x80
 80105b4:	705a      	strb	r2, [r3, #1]
  }

  if ((led_map & MAP_POV_6_G) == MAP_POV_6_G) {
    LED_SETTINGS[POV_6_G_REG] &= ~POV_6_G_PIN;
 80105b6:	785a      	ldrb	r2, [r3, #1]
  if ((led_map & MAP_POV_6_G) == MAP_POV_6_G) {
 80105b8:	0481      	lsls	r1, r0, #18
    LED_SETTINGS[POV_6_G_REG] &= ~POV_6_G_PIN;
 80105ba:	bf4c      	ite	mi
 80105bc:	f002 02f7 	andmi.w	r2, r2, #247	; 0xf7
  } else {
    LED_SETTINGS[POV_6_G_REG] |= POV_6_G_PIN;
 80105c0:	f042 0208 	orrpl.w	r2, r2, #8
 80105c4:	705a      	strb	r2, [r3, #1]
  }

  if ((led_map & MAP_POV_7_G) == MAP_POV_7_G) {
    LED_SETTINGS[POV_7_G_REG] &= ~POV_7_G_PIN;
 80105c6:	781a      	ldrb	r2, [r3, #0]
  if ((led_map & MAP_POV_7_G) == MAP_POV_7_G) {
 80105c8:	0441      	lsls	r1, r0, #17
    LED_SETTINGS[POV_7_G_REG] &= ~POV_7_G_PIN;
 80105ca:	bf4c      	ite	mi
 80105cc:	f002 02df 	andmi.w	r2, r2, #223	; 0xdf
  } else {
    LED_SETTINGS[POV_7_G_REG] |= POV_7_G_PIN;
 80105d0:	f042 0220 	orrpl.w	r2, r2, #32
 80105d4:	701a      	strb	r2, [r3, #0]
  }

  if ((led_map & MAP_POV_8_G) == MAP_POV_8_G) {
    LED_SETTINGS[POV_8_G_REG] &= ~POV_8_G_PIN;
 80105d6:	781a      	ldrb	r2, [r3, #0]
  if ((led_map & MAP_POV_8_G) == MAP_POV_8_G) {
 80105d8:	0401      	lsls	r1, r0, #16
    LED_SETTINGS[POV_8_G_REG] &= ~POV_8_G_PIN;
 80105da:	bf4c      	ite	mi
 80105dc:	f002 02fd 	andmi.w	r2, r2, #253	; 0xfd
  } else {
    LED_SETTINGS[POV_8_G_REG] |= POV_8_G_PIN;
 80105e0:	f042 0202 	orrpl.w	r2, r2, #2
 80105e4:	701a      	strb	r2, [r3, #0]
  osSemaphoreRelease (transmitLED_bufferSemaphoreHandle);
 80105e6:	4b03      	ldr	r3, [pc, #12]	; (80105f4 <POV_LEDs+0x110>)
 80105e8:	6818      	ldr	r0, [r3, #0]
 80105ea:	f7fb bbed 	b.w	800bdc8 <osSemaphoreRelease>
 80105ee:	bf00      	nop
 80105f0:	2000548c 	.word	0x2000548c
 80105f4:	20005468 	.word	0x20005468

080105f8 <Flush_LEDS>:
 80105f8:	4a05      	ldr	r2, [pc, #20]	; (8010610 <Flush_LEDS+0x18>)

  transmitToBuffer();
}

void Flush_LEDS(void) {
  LED_SETTINGS[0] = 255;
 80105fa:	4b06      	ldr	r3, [pc, #24]	; (8010614 <Flush_LEDS+0x1c>)
  osSemaphoreRelease (transmitLED_bufferSemaphoreHandle);
 80105fc:	6810      	ldr	r0, [r2, #0]
  LED_SETTINGS[0] = 255;
 80105fe:	22ff      	movs	r2, #255	; 0xff
 8010600:	701a      	strb	r2, [r3, #0]
  LED_SETTINGS[1] = 255;
 8010602:	705a      	strb	r2, [r3, #1]
  LED_SETTINGS[2] = 255;
 8010604:	709a      	strb	r2, [r3, #2]
  LED_SETTINGS[3] = 255;
 8010606:	70da      	strb	r2, [r3, #3]
  LED_SETTINGS[4] = 255;
 8010608:	711a      	strb	r2, [r3, #4]
  LED_SETTINGS[5] = 255;
 801060a:	715a      	strb	r2, [r3, #5]
  osSemaphoreRelease (transmitLED_bufferSemaphoreHandle);
 801060c:	f7fb bbdc 	b.w	800bdc8 <osSemaphoreRelease>
 8010610:	20005468 	.word	0x20005468
 8010614:	2000548c 	.word	0x2000548c

08010618 <bufferTransmitThread>:
void bufferTransmitThread(void){
 8010618:	b508      	push	{r3, lr}
  Flush_LEDS();
 801061a:	f7ff ffed 	bl	80105f8 <Flush_LEDS>
 801061e:	4d0d      	ldr	r5, [pc, #52]	; (8010654 <bufferTransmitThread+0x3c>)
      HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_RESET);
 8010620:	4c0d      	ldr	r4, [pc, #52]	; (8010658 <bufferTransmitThread+0x40>)
      osSemaphoreWait (transmitLED_bufferSemaphoreHandle, 500);
 8010622:	6828      	ldr	r0, [r5, #0]
 8010624:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8010628:	f7fb fba6 	bl	800bd78 <osSemaphoreWait>
      HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_RESET);
 801062c:	4620      	mov	r0, r4
 801062e:	2200      	movs	r2, #0
 8010630:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010634:	f7f1 fdea 	bl	800220c <HAL_GPIO_WritePin>
      HAL_SPI_Transmit(&hspi2, LED_SETTINGS, 6, 1);
 8010638:	2301      	movs	r3, #1
 801063a:	2206      	movs	r2, #6
 801063c:	4907      	ldr	r1, [pc, #28]	; (801065c <bufferTransmitThread+0x44>)
 801063e:	4808      	ldr	r0, [pc, #32]	; (8010660 <bufferTransmitThread+0x48>)
 8010640:	f7f5 faea 	bl	8005c18 <HAL_SPI_Transmit>
       HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_SET);
 8010644:	2201      	movs	r2, #1
 8010646:	f44f 7180 	mov.w	r1, #256	; 0x100
 801064a:	4620      	mov	r0, r4
 801064c:	f7f1 fdde 	bl	800220c <HAL_GPIO_WritePin>
 8010650:	e7e7      	b.n	8010622 <bufferTransmitThread+0xa>
 8010652:	bf00      	nop
 8010654:	20005468 	.word	0x20005468
 8010658:	48001000 	.word	0x48001000
 801065c:	2000548c 	.word	0x2000548c
 8010660:	20005f48 	.word	0x20005f48

08010664 <Set_LED>:
  transmitToBuffer();
}

void Set_LED(uint8_t reg, uint8_t pin, uint8_t state) {
  // turn on LED
  if (state == 1) {
 8010664:	2a01      	cmp	r2, #1
 8010666:	d008      	beq.n	801067a <Set_LED+0x16>
    LED_SETTINGS[reg] &= ~pin;
  }
  // turn off LED
  else if (state == 0) {
 8010668:	b91a      	cbnz	r2, 8010672 <Set_LED+0xe>
    LED_SETTINGS[reg] |= pin;
 801066a:	4b08      	ldr	r3, [pc, #32]	; (801068c <Set_LED+0x28>)
 801066c:	5c1a      	ldrb	r2, [r3, r0]
 801066e:	4311      	orrs	r1, r2
 8010670:	5419      	strb	r1, [r3, r0]
  osSemaphoreRelease (transmitLED_bufferSemaphoreHandle);
 8010672:	4b07      	ldr	r3, [pc, #28]	; (8010690 <Set_LED+0x2c>)
 8010674:	6818      	ldr	r0, [r3, #0]
 8010676:	f7fb bba7 	b.w	800bdc8 <osSemaphoreRelease>
    LED_SETTINGS[reg] &= ~pin;
 801067a:	4a04      	ldr	r2, [pc, #16]	; (801068c <Set_LED+0x28>)
 801067c:	5c13      	ldrb	r3, [r2, r0]
 801067e:	ea23 0101 	bic.w	r1, r3, r1
  osSemaphoreRelease (transmitLED_bufferSemaphoreHandle);
 8010682:	4b03      	ldr	r3, [pc, #12]	; (8010690 <Set_LED+0x2c>)
    LED_SETTINGS[reg] &= ~pin;
 8010684:	5411      	strb	r1, [r2, r0]
  osSemaphoreRelease (transmitLED_bufferSemaphoreHandle);
 8010686:	6818      	ldr	r0, [r3, #0]
 8010688:	f7fb bb9e 	b.w	800bdc8 <osSemaphoreRelease>
 801068c:	2000548c 	.word	0x2000548c
 8010690:	20005468 	.word	0x20005468

08010694 <Set_LED_Setting>:
  transmitToBuffer();
}

void Set_LED_Setting(uint8_t reg, uint8_t pin, uint8_t state) {
  // turn on LED
  if (state == 1) {
 8010694:	2a01      	cmp	r2, #1
 8010696:	d005      	beq.n	80106a4 <Set_LED_Setting+0x10>
    LED_SETTINGS[reg] &= ~pin;
  }
  // turn off LED
  else if (state == 0) {
 8010698:	b91a      	cbnz	r2, 80106a2 <Set_LED_Setting+0xe>
    LED_SETTINGS[reg] |= pin;
 801069a:	4b05      	ldr	r3, [pc, #20]	; (80106b0 <Set_LED_Setting+0x1c>)
 801069c:	5c1a      	ldrb	r2, [r3, r0]
 801069e:	4311      	orrs	r1, r2
 80106a0:	5419      	strb	r1, [r3, r0]
 80106a2:	4770      	bx	lr
    LED_SETTINGS[reg] &= ~pin;
 80106a4:	4a02      	ldr	r2, [pc, #8]	; (80106b0 <Set_LED_Setting+0x1c>)
 80106a6:	5c13      	ldrb	r3, [r2, r0]
 80106a8:	ea23 0101 	bic.w	r1, r3, r1
 80106ac:	5411      	strb	r1, [r2, r0]
 80106ae:	4770      	bx	lr
 80106b0:	2000548c 	.word	0x2000548c

080106b4 <LED_State>:
}

// returns 1 if LED is on, 0 otherwise
// LED is on if the bit in LED_SETTINGS is zero (because its a sink circuit)
uint8_t LED_State(uint8_t reg, uint8_t pin) {
  if ((LED_SETTINGS[reg] & pin) != 0) {
 80106b4:	4b03      	ldr	r3, [pc, #12]	; (80106c4 <LED_State+0x10>)
 80106b6:	5c1b      	ldrb	r3, [r3, r0]
 80106b8:	420b      	tst	r3, r1
    return 0;  // LED is OFF
  } else {
    return 1;  // LED is ON
  }
}
 80106ba:	bf0c      	ite	eq
 80106bc:	2001      	moveq	r0, #1
 80106be:	2000      	movne	r0, #0
 80106c0:	4770      	bx	lr
 80106c2:	bf00      	nop
 80106c4:	2000548c 	.word	0x2000548c

080106c8 <activateLidar>:
	LED_Lidar_Active = 0;
}

//turn on LIDAR (only works if 3.3V Power Switch is set (enabled) )
void activateLidar(void){
    HAL_GPIO_WritePin(VL_XSHUT_GPIO_Port, VL_XSHUT_Pin, GPIO_PIN_SET);
 80106c8:	2201      	movs	r2, #1
 80106ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80106ce:	4801      	ldr	r0, [pc, #4]	; (80106d4 <activateLidar+0xc>)
 80106d0:	f7f1 bd9c 	b.w	800220c <HAL_GPIO_WritePin>
 80106d4:	48000c00 	.word	0x48000c00

080106d8 <get_lidar_POV_map>:
void genPOV_Map(int16_t* measurement){
	POV_map = ( ((uint16_t) (*measurement / ((float) MEASUREMENT_POV_DIVISOR)) ) % 64);
}

uint32_t get_lidar_POV_map(void){
	return POV_map;
 80106d8:	4b01      	ldr	r3, [pc, #4]	; (80106e0 <get_lidar_POV_map+0x8>)
}
 80106da:	6818      	ldr	r0, [r3, #0]
 80106dc:	4770      	bx	lr
 80106de:	bf00      	nop
 80106e0:	200052b4 	.word	0x200052b4
 80106e4:	00000000 	.word	0x00000000

080106e8 <LidarMeasurement>:


}

void LidarMeasurement(void)
{
 80106e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106ec:	ed2d 8b02 	vpush	{d8}
    HAL_GPIO_WritePin(VL_XSHUT_GPIO_Port, VL_XSHUT_Pin, GPIO_PIN_SET);
 80106f0:	2201      	movs	r2, #1
{
 80106f2:	b083      	sub	sp, #12
    HAL_GPIO_WritePin(VL_XSHUT_GPIO_Port, VL_XSHUT_Pin, GPIO_PIN_SET);
 80106f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80106f8:	4869      	ldr	r0, [pc, #420]	; (80108a0 <LidarMeasurement+0x1b8>)
  //int IntCount;

  activateLidar();
  HAL_Delay(500);
  osDelay(5);
  Dev->I2cHandle = &hi2c3;
 80106fa:	4d6a      	ldr	r5, [pc, #424]	; (80108a4 <LidarMeasurement+0x1bc>)
 80106fc:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80108c8 <LidarMeasurement+0x1e0>
 8010700:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 80108cc <LidarMeasurement+0x1e4>
 8010704:	4f68      	ldr	r7, [pc, #416]	; (80108a8 <LidarMeasurement+0x1c0>)
 8010706:	4e69      	ldr	r6, [pc, #420]	; (80108ac <LidarMeasurement+0x1c4>)
	POV_map = ( ((uint16_t) (*measurement / ((float) MEASUREMENT_POV_DIVISOR)) ) % 64);
 8010708:	ed9f 8a69 	vldr	s16, [pc, #420]	; 80108b0 <LidarMeasurement+0x1c8>
	lidar_map = 0x0001 << ( ((uint16_t) (*measurement / ((float) MEASUREMENT_DIVISOR)) ) % 16);
 801070c:	eddf 8a69 	vldr	s17, [pc, #420]	; 80108b4 <LidarMeasurement+0x1cc>
    HAL_GPIO_WritePin(VL_XSHUT_GPIO_Port, VL_XSHUT_Pin, GPIO_PIN_SET);
 8010710:	f7f1 fd7c 	bl	800220c <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8010714:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8010718:	f7f0 fc1c 	bl	8000f54 <HAL_Delay>
  osDelay(5);
 801071c:	2005      	movs	r0, #5
 801071e:	f7fb fa75 	bl	800bc0c <osDelay>
  Dev->I2cHandle = &hi2c3;
 8010722:	6828      	ldr	r0, [r5, #0]
 8010724:	4b64      	ldr	r3, [pc, #400]	; (80108b8 <LidarMeasurement+0x1d0>)
 8010726:	f8c0 33a0 	str.w	r3, [r0, #928]	; 0x3a0
  Dev->I2cDevAddr = 0x52;
 801072a:	2352      	movs	r3, #82	; 0x52
 801072c:	f880 3398 	strb.w	r3, [r0, #920]	; 0x398
  static VL53L1_RangingMeasurementData_t RangingData;
  //printf("Autonomous Ranging Test\n");
  status = VL53L1_WaitDeviceBooted(Dev);
 8010730:	f7f7 fdf4 	bl	800831c <VL53L1_WaitDeviceBooted>
  status = VL53L1_DataInit(Dev);
 8010734:	6828      	ldr	r0, [r5, #0]
 8010736:	f7f7 fdad 	bl	8008294 <VL53L1_DataInit>
  status = VL53L1_StaticInit(Dev);
 801073a:	6828      	ldr	r0, [r5, #0]
 801073c:	f7f7 ff66 	bl	800860c <VL53L1_StaticInit>
  status = VL53L1_SetDistanceMode(Dev, VL53L1_DISTANCEMODE_SHORT);
 8010740:	2101      	movs	r1, #1
 8010742:	6828      	ldr	r0, [r5, #0]
 8010744:	f7f7 fdee 	bl	8008324 <VL53L1_SetDistanceMode>
  status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(Dev, 20000);
 8010748:	f644 6120 	movw	r1, #20000	; 0x4e20
 801074c:	6828      	ldr	r0, [r5, #0]
 801074e:	f7f7 fed9 	bl	8008504 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
  status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev, 22);
 8010752:	2116      	movs	r1, #22
 8010754:	6828      	ldr	r0, [r5, #0]
 8010756:	f7f8 f80d 	bl	8008774 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
  status = VL53L1_StartMeasurement(Dev);
 801075a:	6828      	ldr	r0, [r5, #0]
 801075c:	f7f8 f814 	bl	8008788 <VL53L1_StartMeasurement>
  status = VL53L1_ClearInterruptAndStartMeasurement(Dev);
 8010760:	6828      	ldr	r0, [r5, #0]
 8010762:	f7f8 f859 	bl	8008818 <VL53L1_ClearInterruptAndStartMeasurement>
  while(1){
	  	osSemaphoreWait( lidarSampleReadySemaphoreHandle, osWaitForever);
#ifdef DEBUG_PRINT
  HAL_UART_Transmit(&huart3, "start_lidar\n\r", sizeof("start_lidar\n\r"), 100);
#endif
		status = VL53L1_GetRangingMeasurementData(Dev, &RangingData);
 8010766:	46c3      	mov	fp, r8
	calcLidarFreq(measurement);
 8010768:	f8df 9140 	ldr.w	r9, [pc, #320]	; 80108ac <LidarMeasurement+0x1c4>
 801076c:	e027      	b.n	80107be <LidarMeasurement+0xd6>
	    if(isCapModeActive() == 0){
 801076e:	f001 fb6b 	bl	8011e48 <isCapModeActive>
 8010772:	2800      	cmp	r0, #0
 8010774:	f000 8089 	beq.w	801088a <LidarMeasurement+0x1a2>
		*measurement = MAX_LIDAR_MEASUREMENT;
 8010778:	f240 5314 	movw	r3, #1300	; 0x514
	calcLidarFreq(measurement);
 801077c:	4648      	mov	r0, r9
		*measurement = MAX_LIDAR_MEASUREMENT;
 801077e:	8033      	strh	r3, [r6, #0]
	calcLidarFreq(measurement);
 8010780:	f001 fbbe 	bl	8011f00 <calcLidarFreq>
	if(isButtonEnabled() == 1){
 8010784:	f000 fd2a 	bl	80111dc <isButtonEnabled>
 8010788:	2801      	cmp	r0, #1
 801078a:	d062      	beq.n	8010852 <LidarMeasurement+0x16a>
	POV_map = ( ((uint16_t) (*measurement / ((float) MEASUREMENT_POV_DIVISOR)) ) % 64);
 801078c:	f9b6 3000 	ldrsh.w	r3, [r6]
 8010790:	4a4a      	ldr	r2, [pc, #296]	; (80108bc <LidarMeasurement+0x1d4>)
 8010792:	ee07 3a90 	vmov	s15, r3
 8010796:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801079a:	ee67 7a88 	vmul.f32	s15, s15, s16
 801079e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80107a2:	ee17 3a90 	vmov	r3, s15
 80107a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80107aa:	6013      	str	r3, [r2, #0]
			    LidarMeasurementHandler(&oldLidarMeasurement);
			}


		}
		    taskEXIT_CRITICAL();
 80107ac:	f7fb fc0c 	bl	800bfc8 <vPortExitCritical>

//#ifdef DEBUG_PRINT
//  HAL_UART_Transmit(&huart3, "lidar_clear\n\r", sizeof("lidar_clear\n\r"), 100);
//#endif
		status = VL53L1_ClearInterruptAndStartMeasurement(Dev);
 80107b0:	6828      	ldr	r0, [r5, #0]
 80107b2:	f7f8 f831 	bl	8008818 <VL53L1_ClearInterruptAndStartMeasurement>
		//VL53L1_clear_int_and_enable_range();
		if(isLidarModeActive() == 0) lidarStop();
 80107b6:	f001 fb3f 	bl	8011e38 <isLidarModeActive>
 80107ba:	2800      	cmp	r0, #0
 80107bc:	d05f      	beq.n	801087e <LidarMeasurement+0x196>
	  	osSemaphoreWait( lidarSampleReadySemaphoreHandle, osWaitForever);
 80107be:	f04f 31ff 	mov.w	r1, #4294967295
 80107c2:	f8da 0000 	ldr.w	r0, [sl]
 80107c6:	f7fb fad7 	bl	800bd78 <osSemaphoreWait>
		status = VL53L1_GetRangingMeasurementData(Dev, &RangingData);
 80107ca:	4659      	mov	r1, fp
 80107cc:	6828      	ldr	r0, [r5, #0]
 80107ce:	f7f8 f827 	bl	8008820 <VL53L1_GetRangingMeasurementData>
 80107d2:	4604      	mov	r4, r0
		    taskENTER_CRITICAL();
 80107d4:	f7fb fbd6 	bl	800bf84 <vPortEnterCritical>
		if(status == VL53L1_RANGESTATUS_RANGE_VALID){
 80107d8:	2c00      	cmp	r4, #0
 80107da:	d1e7      	bne.n	80107ac <LidarMeasurement+0xc4>
			if(measurement_hist == -1){
 80107dc:	f9b7 0000 	ldrsh.w	r0, [r7]
				measurement_hist = RangingData.RangeMilliMeter;
 80107e0:	f9b8 4018 	ldrsh.w	r4, [r8, #24]
			if(measurement_hist == -1){
 80107e4:	1c43      	adds	r3, r0, #1
 80107e6:	d01f      	beq.n	8010828 <LidarMeasurement+0x140>
			else if(abs(measurement_hist-RangingData.RangeMilliMeter) > THRESH_MEAS){
 80107e8:	1b03      	subs	r3, r0, r4
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	bfb8      	it	lt
 80107ee:	425b      	neglt	r3, r3
 80107f0:	2b03      	cmp	r3, #3
 80107f2:	dc19      	bgt.n	8010828 <LidarMeasurement+0x140>
				measurement_hist = measurement_hist * ALPHA_MEAS + RangingData.RangeMilliMeter * BETA_MEAS;
 80107f4:	f7ef fe56 	bl	80004a4 <__aeabi_i2d>
 80107f8:	a325      	add	r3, pc, #148	; (adr r3, 8010890 <LidarMeasurement+0x1a8>)
 80107fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107fe:	f7ef feb7 	bl	8000570 <__aeabi_dmul>
 8010802:	e9cd 0100 	strd	r0, r1, [sp]
 8010806:	4620      	mov	r0, r4
 8010808:	f7ef fe4c 	bl	80004a4 <__aeabi_i2d>
 801080c:	a322      	add	r3, pc, #136	; (adr r3, 8010898 <LidarMeasurement+0x1b0>)
 801080e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010812:	f7ef fead 	bl	8000570 <__aeabi_dmul>
 8010816:	4602      	mov	r2, r0
 8010818:	460b      	mov	r3, r1
 801081a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801081e:	f7ef fcf5 	bl	800020c <__adddf3>
 8010822:	f7f0 f955 	bl	8000ad0 <__aeabi_d2iz>
 8010826:	b204      	sxth	r4, r0
			if( oldLidarMeasurement != measurement_hist){
 8010828:	f9b6 3000 	ldrsh.w	r3, [r6]
				measurement_hist = measurement_hist * ALPHA_MEAS + RangingData.RangeMilliMeter * BETA_MEAS;
 801082c:	803c      	strh	r4, [r7, #0]
			if( oldLidarMeasurement != measurement_hist){
 801082e:	42a3      	cmp	r3, r4
 8010830:	d0bc      	beq.n	80107ac <LidarMeasurement+0xc4>
			    oldLidarMeasurement = measurement_hist;
 8010832:	8034      	strh	r4, [r6, #0]
	if(*measurement > MAX_LIDAR_MEASUREMENT){
 8010834:	8833      	ldrh	r3, [r6, #0]
 8010836:	f240 5214 	movw	r2, #1300	; 0x514
 801083a:	b21b      	sxth	r3, r3
 801083c:	4293      	cmp	r3, r2
 801083e:	dc96      	bgt.n	801076e <LidarMeasurement+0x86>
	    turnSoundOn();
 8010840:	f001 fb10 	bl	8011e64 <turnSoundOn>
	calcLidarFreq(measurement);
 8010844:	4648      	mov	r0, r9
 8010846:	f001 fb5b 	bl	8011f00 <calcLidarFreq>
	if(isButtonEnabled() == 1){
 801084a:	f000 fcc7 	bl	80111dc <isButtonEnabled>
 801084e:	2801      	cmp	r0, #1
 8010850:	d19c      	bne.n	801078c <LidarMeasurement+0xa4>
	lidar_map = 0x0001 << ( ((uint16_t) (*measurement / ((float) MEASUREMENT_DIVISOR)) ) % 16);
 8010852:	f9b6 3000 	ldrsh.w	r3, [r6]
 8010856:	4a1a      	ldr	r2, [pc, #104]	; (80108c0 <LidarMeasurement+0x1d8>)
 8010858:	ee07 3a90 	vmov	s15, r3
 801085c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010860:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8010864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010868:	ee17 3a90 	vmov	r3, s15
 801086c:	f003 030f 	and.w	r3, r3, #15
 8010870:	4098      	lsls	r0, r3
 8010872:	b283      	uxth	r3, r0
		POV_LEDs(lidar_map);
 8010874:	4618      	mov	r0, r3
	lidar_map = 0x0001 << ( ((uint16_t) (*measurement / ((float) MEASUREMENT_DIVISOR)) ) % 16);
 8010876:	8013      	strh	r3, [r2, #0]
		POV_LEDs(lidar_map);
 8010878:	f7ff fe34 	bl	80104e4 <POV_LEDs>
 801087c:	e786      	b.n	801078c <LidarMeasurement+0xa4>
	lidar_measurement  = ((uint16_t)packet[13]) << 8; // high byte
	lidar_measurement |= packet[14];      // low byte
}

void lidarStop(void){
	status = VL53L1_StopMeasurement(Dev);
 801087e:	6828      	ldr	r0, [r5, #0]
 8010880:	f7f7 ffc0 	bl	8008804 <VL53L1_StopMeasurement>
 8010884:	4b0f      	ldr	r3, [pc, #60]	; (80108c4 <LidarMeasurement+0x1dc>)
 8010886:	6018      	str	r0, [r3, #0]
 8010888:	e76e      	b.n	8010768 <LidarMeasurement+0x80>
		    turnSoundOff();
 801088a:	f001 fae5 	bl	8011e58 <turnSoundOff>
 801088e:	e773      	b.n	8010778 <LidarMeasurement+0x90>
 8010890:	cccccccd 	.word	0xcccccccd
 8010894:	3feccccc 	.word	0x3feccccc
 8010898:	9999999a 	.word	0x9999999a
 801089c:	3fb99999 	.word	0x3fb99999
 80108a0:	48000c00 	.word	0x48000c00
 80108a4:	20000048 	.word	0x20000048
 80108a8:	2000004c 	.word	0x2000004c
 80108ac:	200052d6 	.word	0x200052d6
 80108b0:	3dcccccd 	.word	0x3dcccccd
 80108b4:	3d4ccccd 	.word	0x3d4ccccd
 80108b8:	20005a10 	.word	0x20005a10
 80108bc:	200052b4 	.word	0x200052b4
 80108c0:	200052d4 	.word	0x200052d4
 80108c4:	20005ea0 	.word	0x20005ea0
 80108c8:	200052b8 	.word	0x200052b8
 80108cc:	20005a08 	.word	0x20005a08

080108d0 <lidarStop>:
void lidarStop(void){
 80108d0:	b508      	push	{r3, lr}
	status = VL53L1_StopMeasurement(Dev);
 80108d2:	4b03      	ldr	r3, [pc, #12]	; (80108e0 <lidarStop+0x10>)
 80108d4:	6818      	ldr	r0, [r3, #0]
 80108d6:	f7f7 ff95 	bl	8008804 <VL53L1_StopMeasurement>
 80108da:	4b02      	ldr	r3, [pc, #8]	; (80108e4 <lidarStop+0x14>)
 80108dc:	6018      	str	r0, [r3, #0]
 80108de:	bd08      	pop	{r3, pc}
 80108e0:	20000048 	.word	0x20000048
 80108e4:	20005ea0 	.word	0x20005ea0

080108e8 <lidarStart>:
}

void lidarStart(void){
 80108e8:	b510      	push	{r4, lr}
	status = VL53L1_StartMeasurement(Dev);
 80108ea:	4c06      	ldr	r4, [pc, #24]	; (8010904 <lidarStart+0x1c>)
 80108ec:	6820      	ldr	r0, [r4, #0]
 80108ee:	f7f7 ff4b 	bl	8008788 <VL53L1_StartMeasurement>
 80108f2:	4b05      	ldr	r3, [pc, #20]	; (8010908 <lidarStart+0x20>)
 80108f4:	4602      	mov	r2, r0
	VL53L1_ClearInterruptAndStartMeasurement(Dev);
 80108f6:	6820      	ldr	r0, [r4, #0]
	status = VL53L1_StartMeasurement(Dev);
 80108f8:	601a      	str	r2, [r3, #0]
}
 80108fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	VL53L1_ClearInterruptAndStartMeasurement(Dev);
 80108fe:	f7f7 bf8b 	b.w	8008818 <VL53L1_ClearInterruptAndStartMeasurement>
 8010902:	bf00      	nop
 8010904:	20000048 	.word	0x20000048
 8010908:	20005ea0 	.word	0x20005ea0

0801090c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 801090c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8010910:	2100      	movs	r1, #0
{
 8010912:	b0bc      	sub	sp, #240	; 0xf0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8010914:	460c      	mov	r4, r1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8010916:	a805      	add	r0, sp, #20
 8010918:	2244      	movs	r2, #68	; 0x44
 801091a:	f004 fdc2 	bl	80154a2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801091e:	4621      	mov	r1, r4
 8010920:	2298      	movs	r2, #152	; 0x98
 8010922:	a816      	add	r0, sp, #88	; 0x58
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8010924:	9401      	str	r4, [sp, #4]
 8010926:	9400      	str	r4, [sp, #0]
 8010928:	9402      	str	r4, [sp, #8]
 801092a:	9403      	str	r4, [sp, #12]
 801092c:	9404      	str	r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801092e:	f004 fdb8 	bl	80154a2 <memset>

  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8010932:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010936:	f7f3 faf7 	bl	8003f28 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
  /**Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 801093a:	f7f3 fadb 	bl	8003ef4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 801093e:	4a25      	ldr	r2, [pc, #148]	; (80109d4 <SystemClock_Config+0xc8>)

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8010940:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80109d8 <SystemClock_Config+0xcc>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8010944:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8010948:	f023 0318 	bic.w	r3, r3, #24
 801094c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8010950:	2205      	movs	r2, #5
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8010952:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8010956:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8010958:	2603      	movs	r6, #3
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 801095a:	2701      	movs	r7, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 801095c:	9205      	str	r2, [sp, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801095e:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLN = 20;
 8010960:	2214      	movs	r2, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8010962:	2304      	movs	r3, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010964:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLN = 20;
 8010966:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8010968:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 801096a:	9707      	str	r7, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 1;
 801096c:	9711      	str	r7, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801096e:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8010970:	9514      	str	r5, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8010972:	9515      	str	r5, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8010974:	9610      	str	r6, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010976:	f7f3 fbb7 	bl	80040e8 <HAL_RCC_OscConfig>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 801097a:	4631      	mov	r1, r6
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801097c:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 801097e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010980:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8010982:	9601      	str	r6, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8010984:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8010986:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8010988:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 801098a:	f7f3 feed 	bl	8004768 <HAL_RCC_ClockConfig>
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 801098e:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8010992:	f44f 7e80 	mov.w	lr, #256	; 0x100
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8010996:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 801099a:	2208      	movs	r2, #8
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 801099c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80109a0:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80109a2:	9425      	str	r4, [sp, #148]	; 0x94
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80109a4:	9427      	str	r4, [sp, #156]	; 0x9c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80109a6:	942b      	str	r4, [sp, #172]	; 0xac
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80109a8:	942c      	str	r4, [sp, #176]	; 0xb0
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80109aa:	942d      	str	r4, [sp, #180]	; 0xb4
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80109ac:	9617      	str	r6, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80109ae:	9718      	str	r7, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80109b0:	951a      	str	r5, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80109b2:	951b      	str	r5, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80109b4:	951c      	str	r5, [sp, #112]	; 0x70
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 80109b6:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80109ba:	f8cd c0d8 	str.w	ip, [sp, #216]	; 0xd8
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80109be:	f8cd e0ec 	str.w	lr, [sp, #236]	; 0xec
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 80109c2:	9134      	str	r1, [sp, #208]	; 0xd0
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80109c4:	9219      	str	r2, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80109c6:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80109c8:	f7f4 f962 	bl	8004c90 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80109cc:	b03c      	add	sp, #240	; 0xf0
 80109ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109d2:	bf00      	nop
 80109d4:	40021000 	.word	0x40021000
 80109d8:	000a41c5 	.word	0x000a41c5

080109dc <main>:
   {
 80109dc:	b508      	push	{r3, lr}
  HAL_Init();
 80109de:	f7f0 fa97 	bl	8000f10 <HAL_Init>
  SystemClock_Config();
 80109e2:	f7ff ff93 	bl	801090c <SystemClock_Config>
  MX_GPIO_Init();
 80109e6:	f7fe fe83 	bl	800f6f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80109ea:	f7fe facf 	bl	800ef8c <MX_DMA_Init>
  MX_TIM6_Init();
 80109ee:	f000 ff09 	bl	8011804 <MX_TIM6_Init>
  MX_DAC1_Init();
 80109f2:	f7fe fa3d 	bl	800ee70 <MX_DAC1_Init>
  MX_SPI2_Init();
 80109f6:	f000 fc8d 	bl	8011314 <MX_SPI2_Init>
  MX_TIM1_Init();
 80109fa:	f000 fdf1 	bl	80115e0 <MX_TIM1_Init>
  MX_TIM16_Init();
 80109fe:	f000 ff4f 	bl	80118a0 <MX_TIM16_Init>
  MX_TIM17_Init();
 8010a02:	f000 ff67 	bl	80118d4 <MX_TIM17_Init>
  MX_I2C1_Init();
 8010a06:	f7fe ffcf 	bl	800f9a8 <MX_I2C1_Init>
  MX_I2C3_Init();
 8010a0a:	f7ff f829 	bl	800fa60 <MX_I2C3_Init>
  MX_USART3_UART_Init();
 8010a0e:	f001 f845 	bl	8011a9c <MX_USART3_UART_Init>
  MX_SDMMC1_SD_Init();
 8010a12:	f000 fc17 	bl	8011244 <MX_SDMMC1_SD_Init>
  MX_RTC_Init();
 8010a16:	f000 fbe7 	bl	80111e8 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8010a1a:	f001 f809 	bl	8011a30 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8010a1e:	f7fd ff01 	bl	800e824 <MX_ADC1_Init>
  MX_TIM7_Init();
 8010a22:	f000 ff17 	bl	8011854 <MX_TIM7_Init>
  MX_I2C2_Init();
 8010a26:	f7fe ffed 	bl	800fa04 <MX_I2C2_Init>
  MX_TIM3_Init();
 8010a2a:	f000 fe7b 	bl	8011724 <MX_TIM3_Init>
  MX_TIM4_Init();
 8010a2e:	f000 feb1 	bl	8011794 <MX_TIM4_Init>
  MX_COMP1_Init();
 8010a32:	f7fe f9cb 	bl	800edcc <MX_COMP1_Init>
  HAL_GPIO_WritePin(POWER_SWITCH_GPIO_Port, POWER_SWITCH_Pin, GPIO_PIN_SET);
 8010a36:	2201      	movs	r2, #1
 8010a38:	2110      	movs	r1, #16
 8010a3a:	481b      	ldr	r0, [pc, #108]	; (8010aa8 <main+0xcc>)
 8010a3c:	f7f1 fbe6 	bl	800220c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BT_EN_GPIO_Port, BT_EN_Pin, GPIO_PIN_SET);
 8010a40:	2201      	movs	r2, #1
 8010a42:	4611      	mov	r1, r2
 8010a44:	4818      	ldr	r0, [pc, #96]	; (8010aa8 <main+0xcc>)
 8010a46:	f7f1 fbe1 	bl	800220c <HAL_GPIO_WritePin>
  activateLidar();
 8010a4a:	f7ff fe3d 	bl	80106c8 <activateLidar>
  HAL_Delay(100);
 8010a4e:	2064      	movs	r0, #100	; 0x64
 8010a50:	f7f0 fa80 	bl	8000f54 <HAL_Delay>
  HAL_TIM_Base_Start(&htim1);
 8010a54:	4815      	ldr	r0, [pc, #84]	; (8010aac <main+0xd0>)
 8010a56:	f7f5 fb23 	bl	80060a0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8010a5a:	2100      	movs	r1, #0
 8010a5c:	4813      	ldr	r0, [pc, #76]	; (8010aac <main+0xd0>)
 8010a5e:	f7f5 fc03 	bl	8006268 <HAL_TIM_PWM_Start>
  Setup_Cap_Touch();
 8010a62:	f7fd ff51 	bl	800e908 <Setup_Cap_Touch>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8010a66:	4912      	ldr	r1, [pc, #72]	; (8010ab0 <main+0xd4>)
  DWT->CYCCNT = 0; // reset the counter
 8010a68:	4b12      	ldr	r3, [pc, #72]	; (8010ab4 <main+0xd8>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8010a6a:	68ca      	ldr	r2, [r1, #12]
  HAL_TIM_Base_Start(&htim6);
 8010a6c:	4812      	ldr	r0, [pc, #72]	; (8010ab8 <main+0xdc>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8010a6e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  DWT->CYCCNT = 0; // reset the counter
 8010a72:	2400      	movs	r4, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8010a74:	60ca      	str	r2, [r1, #12]
  DWT->CYCCNT = 0; // reset the counter
 8010a76:	605c      	str	r4, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // enable the counter
 8010a78:	681a      	ldr	r2, [r3, #0]
 8010a7a:	f042 0201 	orr.w	r2, r2, #1
 8010a7e:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start(&htim6);
 8010a80:	f7f5 fb0e 	bl	80060a0 <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8010a84:	4621      	mov	r1, r4
 8010a86:	480d      	ldr	r0, [pc, #52]	; (8010abc <main+0xe0>)
 8010a88:	f7f0 ff0a 	bl	80018a0 <HAL_DAC_Start>
  HAL_GPIO_WritePin(HALL_CNTRL_GPIO_Port, HALL_CNTRL_Pin, GPIO_PIN_SET);
 8010a8c:	2201      	movs	r2, #1
 8010a8e:	2140      	movs	r1, #64	; 0x40
 8010a90:	480b      	ldr	r0, [pc, #44]	; (8010ac0 <main+0xe4>)
 8010a92:	f7f1 fbbb 	bl	800220c <HAL_GPIO_WritePin>
  HAL_COMP_Start(&hcomp1);
 8010a96:	480b      	ldr	r0, [pc, #44]	; (8010ac4 <main+0xe8>)
 8010a98:	f7f0 fe40 	bl	800171c <HAL_COMP_Start>
  MX_FREERTOS_Init();
 8010a9c:	f7fe fe14 	bl	800f6c8 <MX_FREERTOS_Init>
  osKernelStart();
 8010aa0:	f7fb f896 	bl	800bbd0 <osKernelStart>
 8010aa4:	e7fe      	b.n	8010aa4 <main+0xc8>
 8010aa6:	bf00      	nop
 8010aa8:	48001000 	.word	0x48001000
 8010aac:	200060ec 	.word	0x200060ec
 8010ab0:	e000edf0 	.word	0xe000edf0
 8010ab4:	e0001000 	.word	0xe0001000
 8010ab8:	200060ac 	.word	0x200060ac
 8010abc:	20005564 	.word	0x20005564
 8010ac0:	48000c00 	.word	0x48000c00
 8010ac4:	20005538 	.word	0x20005538

08010ac8 <HAL_COMP_TriggerCallback>:

/* USER CODE BEGIN 4 */
void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp){
	HALL_Handler();
 8010ac8:	f7fe bf1c 	b.w	800f904 <HALL_Handler>

08010acc <HAL_GPIO_EXTI_Callback>:
//volatile uint8_t LED_state = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if(GPIO_Pin == CAP_ALERT_Pin){
 8010acc:	2820      	cmp	r0, #32
{
 8010ace:	b508      	push	{r3, lr}
  if(GPIO_Pin == CAP_ALERT_Pin){
 8010ad0:	d00d      	beq.n	8010aee <HAL_GPIO_EXTI_Callback+0x22>
	  //
	  if (isCapModeActive()) osSemaphoreRelease (capSampleSemaphoreHandle);
	  //if (isCapModeActive()) Sample_Cap_Touch();
	  //Sample_Cap_Touch();
  }
  else if(GPIO_Pin == VL_INT_Pin){
 8010ad2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8010ad6:	d000      	beq.n	8010ada <HAL_GPIO_EXTI_Callback+0xe>
 8010ad8:	bd08      	pop	{r3, pc}
	  if(isLidarModeActive()) osSemaphoreRelease (lidarSampleReadySemaphoreHandle);
 8010ada:	f001 f9ad 	bl	8011e38 <isLidarModeActive>
 8010ade:	2800      	cmp	r0, #0
 8010ae0:	d0fa      	beq.n	8010ad8 <HAL_GPIO_EXTI_Callback+0xc>
 8010ae2:	4b08      	ldr	r3, [pc, #32]	; (8010b04 <HAL_GPIO_EXTI_Callback+0x38>)
 8010ae4:	6818      	ldr	r0, [r3, #0]
  }
}
 8010ae6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  if(isLidarModeActive()) osSemaphoreRelease (lidarSampleReadySemaphoreHandle);
 8010aea:	f7fb b96d 	b.w	800bdc8 <osSemaphoreRelease>
	  if (isCapModeActive()) osSemaphoreRelease (capSampleSemaphoreHandle);
 8010aee:	f001 f9ab 	bl	8011e48 <isCapModeActive>
 8010af2:	2800      	cmp	r0, #0
 8010af4:	d0f0      	beq.n	8010ad8 <HAL_GPIO_EXTI_Callback+0xc>
 8010af6:	4b04      	ldr	r3, [pc, #16]	; (8010b08 <HAL_GPIO_EXTI_Callback+0x3c>)
 8010af8:	6818      	ldr	r0, [r3, #0]
}
 8010afa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  if (isCapModeActive()) osSemaphoreRelease (capSampleSemaphoreHandle);
 8010afe:	f7fb b963 	b.w	800bdc8 <osSemaphoreRelease>
 8010b02:	bf00      	nop
 8010b04:	20005a08 	.word	0x20005a08
 8010b08:	20005534 	.word	0x20005534

08010b0c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8010b0c:	6803      	ldr	r3, [r0, #0]
 8010b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010b12:	d008      	beq.n	8010b26 <HAL_TIM_PeriodElapsedCallback+0x1a>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */
  else if (htim->Instance == TIM3) {
 8010b14:	4a06      	ldr	r2, [pc, #24]	; (8010b30 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8010b16:	4293      	cmp	r3, r2
 8010b18:	d007      	beq.n	8010b2a <HAL_TIM_PeriodElapsedCallback+0x1e>
    POV_Update();
  }
  else if (htim->Instance == TIM4) {
 8010b1a:	4a06      	ldr	r2, [pc, #24]	; (8010b34 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8010b1c:	4293      	cmp	r3, r2
 8010b1e:	d000      	beq.n	8010b22 <HAL_TIM_PeriodElapsedCallback+0x16>
 8010b20:	4770      	bx	lr
    enable_buttons();
 8010b22:	f000 bb3f 	b.w	80111a4 <enable_buttons>
    HAL_IncTick();
 8010b26:	f7f0 ba07 	b.w	8000f38 <HAL_IncTick>
    POV_Update();
 8010b2a:	f7ff bb4f 	b.w	80101cc <POV_Update>
 8010b2e:	bf00      	nop
 8010b30:	40000400 	.word	0x40000400
 8010b34:	40000800 	.word	0x40000800

08010b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8010b38:	4770      	bx	lr
 8010b3a:	bf00      	nop

08010b3c <getBitCrush>:

	}
}

uint8_t getBitCrush(void){
  return bit_crush;
 8010b3c:	4b01      	ldr	r3, [pc, #4]	; (8010b44 <getBitCrush+0x8>)
}
 8010b3e:	7818      	ldrb	r0, [r3, #0]
 8010b40:	4770      	bx	lr
 8010b42:	bf00      	nop
 8010b44:	200052d9 	.word	0x200052d9

08010b48 <buttonStateMachine>:

void buttonStateMachine(void){
 8010b48:	b538      	push	{r3, r4, r5, lr}
	// if accelerometer is enabled, start FreeRTOS Thread Timer
	if( (LED_State(BUTTON_4_G_REG, BUTTON_4_G_PIN) == LED_ON) && (accTimer == 0)){
 8010b4a:	2120      	movs	r1, #32
 8010b4c:	2001      	movs	r0, #1
 8010b4e:	f7ff fdb1 	bl	80106b4 <LED_State>
 8010b52:	2801      	cmp	r0, #1
 8010b54:	d023      	beq.n	8010b9e <buttonStateMachine+0x56>
		osTimerStart(accSampleTimerHandle, 20);
		accTimer = 1;
	}else if ( (LED_State(BUTTON_4_G_REG, BUTTON_4_G_PIN) == LED_OFF) && (accTimer == 1) ){
 8010b56:	2120      	movs	r1, #32
 8010b58:	2001      	movs	r0, #1
 8010b5a:	f7ff fdab 	bl	80106b4 <LED_State>
 8010b5e:	4604      	mov	r4, r0
 8010b60:	b198      	cbz	r0, 8010b8a <buttonStateMachine+0x42>
		osTimerStop(accSampleTimerHandle);
		accTimer = 0;

	}

	if(LED_State(BUTTON_5_G_REG, BUTTON_5_G_PIN) == LED_ON){
 8010b62:	2180      	movs	r1, #128	; 0x80
 8010b64:	2000      	movs	r0, #0
 8010b66:	f7ff fda5 	bl	80106b4 <LED_State>
 8010b6a:	2801      	cmp	r0, #1
 8010b6c:	d028      	beq.n	8010bc0 <buttonStateMachine+0x78>
		turnOnLidarSounds();
		osTimerStop(capSampleTimerHandle);
	}
	else if(LED_State(BUTTON_6_G_REG, BUTTON_6_G_PIN) == LED_ON){
 8010b6e:	2108      	movs	r1, #8
 8010b70:	2000      	movs	r0, #0
 8010b72:	f7ff fd9f 	bl	80106b4 <LED_State>
 8010b76:	2801      	cmp	r0, #1
 8010b78:	d02a      	beq.n	8010bd0 <buttonStateMachine+0x88>
		turnOnCapSounds();
		osTimerStart(capSampleTimerHandle, 20);

	}else{
		turnOffSounds();
 8010b7a:	f001 f9af 	bl	8011edc <turnOffSounds>
		osTimerStop(capSampleTimerHandle);
 8010b7e:	4b19      	ldr	r3, [pc, #100]	; (8010be4 <buttonStateMachine+0x9c>)
 8010b80:	6818      	ldr	r0, [r3, #0]
	}
}
 8010b82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		osTimerStop(capSampleTimerHandle);
 8010b86:	f7fb b88b 	b.w	800bca0 <osTimerStop>
	}else if ( (LED_State(BUTTON_4_G_REG, BUTTON_4_G_PIN) == LED_OFF) && (accTimer == 1) ){
 8010b8a:	4d17      	ldr	r5, [pc, #92]	; (8010be8 <buttonStateMachine+0xa0>)
 8010b8c:	782b      	ldrb	r3, [r5, #0]
 8010b8e:	2b01      	cmp	r3, #1
 8010b90:	d1e7      	bne.n	8010b62 <buttonStateMachine+0x1a>
		osTimerStop(accSampleTimerHandle);
 8010b92:	4b16      	ldr	r3, [pc, #88]	; (8010bec <buttonStateMachine+0xa4>)
 8010b94:	6818      	ldr	r0, [r3, #0]
 8010b96:	f7fb f883 	bl	800bca0 <osTimerStop>
		accTimer = 0;
 8010b9a:	702c      	strb	r4, [r5, #0]
 8010b9c:	e7e1      	b.n	8010b62 <buttonStateMachine+0x1a>
	if( (LED_State(BUTTON_4_G_REG, BUTTON_4_G_PIN) == LED_ON) && (accTimer == 0)){
 8010b9e:	4d12      	ldr	r5, [pc, #72]	; (8010be8 <buttonStateMachine+0xa0>)
 8010ba0:	782b      	ldrb	r3, [r5, #0]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d1d7      	bne.n	8010b56 <buttonStateMachine+0xe>
		osTimerStart(accSampleTimerHandle, 20);
 8010ba6:	4b11      	ldr	r3, [pc, #68]	; (8010bec <buttonStateMachine+0xa4>)
 8010ba8:	4604      	mov	r4, r0
 8010baa:	2114      	movs	r1, #20
 8010bac:	6818      	ldr	r0, [r3, #0]
 8010bae:	f7fb f849 	bl	800bc44 <osTimerStart>
	if(LED_State(BUTTON_5_G_REG, BUTTON_5_G_PIN) == LED_ON){
 8010bb2:	2180      	movs	r1, #128	; 0x80
 8010bb4:	2000      	movs	r0, #0
		accTimer = 1;
 8010bb6:	702c      	strb	r4, [r5, #0]
	if(LED_State(BUTTON_5_G_REG, BUTTON_5_G_PIN) == LED_ON){
 8010bb8:	f7ff fd7c 	bl	80106b4 <LED_State>
 8010bbc:	2801      	cmp	r0, #1
 8010bbe:	d1d6      	bne.n	8010b6e <buttonStateMachine+0x26>
		turnOnLidarSounds();
 8010bc0:	f001 f956 	bl	8011e70 <turnOnLidarSounds>
		osTimerStop(capSampleTimerHandle);
 8010bc4:	4b07      	ldr	r3, [pc, #28]	; (8010be4 <buttonStateMachine+0x9c>)
 8010bc6:	6818      	ldr	r0, [r3, #0]
}
 8010bc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		osTimerStop(capSampleTimerHandle);
 8010bcc:	f7fb b868 	b.w	800bca0 <osTimerStop>
		turnOnCapSounds();
 8010bd0:	f001 f964 	bl	8011e9c <turnOnCapSounds>
		osTimerStart(capSampleTimerHandle, 20);
 8010bd4:	4b03      	ldr	r3, [pc, #12]	; (8010be4 <buttonStateMachine+0x9c>)
 8010bd6:	2114      	movs	r1, #20
 8010bd8:	6818      	ldr	r0, [r3, #0]
}
 8010bda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		osTimerStart(capSampleTimerHandle, 20);
 8010bde:	f7fb b831 	b.w	800bc44 <osTimerStart>
 8010be2:	bf00      	nop
 8010be4:	20005524 	.word	0x20005524
 8010be8:	200052d8 	.word	0x200052d8
 8010bec:	20005474 	.word	0x20005474

08010bf0 <ResistiveTouchSampler>:
void ResistiveTouchSampler(void){
 8010bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	button_state = 1;
	//taskEXIT_CRITICAL();
}

uint8_t isButtonEnabled(void){
	return button_state;
 8010bf2:	4bcf      	ldr	r3, [pc, #828]	; (8010f30 <ResistiveTouchSampler+0x340>)
	if(isButtonEnabled() == 1){
 8010bf4:	781b      	ldrb	r3, [r3, #0]
 8010bf6:	2b01      	cmp	r3, #1
 8010bf8:	d000      	beq.n	8010bfc <ResistiveTouchSampler+0xc>
 8010bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin) == GPIO_PIN_SET){
 8010bfc:	2102      	movs	r1, #2
 8010bfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010c02:	f7f1 fafd 	bl	8002200 <HAL_GPIO_ReadPin>
 8010c06:	2801      	cmp	r0, #1
 8010c08:	4604      	mov	r4, r0
 8010c0a:	d055      	beq.n	8010cb8 <ResistiveTouchSampler+0xc8>
		else if(HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin) == GPIO_PIN_SET){
 8010c0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010c10:	48c8      	ldr	r0, [pc, #800]	; (8010f34 <ResistiveTouchSampler+0x344>)
 8010c12:	f7f1 faf5 	bl	8002200 <HAL_GPIO_ReadPin>
 8010c16:	2801      	cmp	r0, #1
 8010c18:	4604      	mov	r4, r0
 8010c1a:	d072      	beq.n	8010d02 <ResistiveTouchSampler+0x112>
		else if(HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin) == GPIO_PIN_SET){
 8010c1c:	2104      	movs	r1, #4
 8010c1e:	48c6      	ldr	r0, [pc, #792]	; (8010f38 <ResistiveTouchSampler+0x348>)
 8010c20:	f7f1 faee 	bl	8002200 <HAL_GPIO_ReadPin>
 8010c24:	2801      	cmp	r0, #1
 8010c26:	4604      	mov	r4, r0
 8010c28:	f000 81c3 	beq.w	8010fb2 <ResistiveTouchSampler+0x3c2>
		if(HAL_GPIO_ReadPin(BUTTON_4_GPIO_Port, BUTTON_4_Pin) == GPIO_PIN_SET){
 8010c2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8010c30:	48c2      	ldr	r0, [pc, #776]	; (8010f3c <ResistiveTouchSampler+0x34c>)
 8010c32:	f7f1 fae5 	bl	8002200 <HAL_GPIO_ReadPin>
 8010c36:	2801      	cmp	r0, #1
 8010c38:	4604      	mov	r4, r0
 8010c3a:	f000 80d1 	beq.w	8010de0 <ResistiveTouchSampler+0x1f0>
		if(HAL_GPIO_ReadPin(BUTTON_5_GPIO_Port, BUTTON_5_Pin) == GPIO_PIN_SET){
 8010c3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8010c42:	48be      	ldr	r0, [pc, #760]	; (8010f3c <ResistiveTouchSampler+0x34c>)
 8010c44:	f7f1 fadc 	bl	8002200 <HAL_GPIO_ReadPin>
 8010c48:	2801      	cmp	r0, #1
 8010c4a:	4604      	mov	r4, r0
 8010c4c:	f000 80aa 	beq.w	8010da4 <ResistiveTouchSampler+0x1b4>
		if(HAL_GPIO_ReadPin(BUTTON_6_GPIO_Port, BUTTON_6_Pin) == GPIO_PIN_SET){
 8010c50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010c54:	48b9      	ldr	r0, [pc, #740]	; (8010f3c <ResistiveTouchSampler+0x34c>)
 8010c56:	f7f1 fad3 	bl	8002200 <HAL_GPIO_ReadPin>
 8010c5a:	2801      	cmp	r0, #1
 8010c5c:	4604      	mov	r4, r0
 8010c5e:	f000 8189 	beq.w	8010f74 <ResistiveTouchSampler+0x384>
		if(HAL_GPIO_ReadPin(BUTTON_7_GPIO_Port, BUTTON_7_Pin) == GPIO_PIN_SET){
 8010c62:	2101      	movs	r1, #1
 8010c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010c68:	f7f1 faca 	bl	8002200 <HAL_GPIO_ReadPin>
 8010c6c:	2801      	cmp	r0, #1
 8010c6e:	4604      	mov	r4, r0
 8010c70:	f000 8100 	beq.w	8010e74 <ResistiveTouchSampler+0x284>
		if(HAL_GPIO_ReadPin(BUTTON_8_GPIO_Port, BUTTON_8_Pin) == GPIO_PIN_SET){
 8010c74:	2108      	movs	r1, #8
 8010c76:	48b0      	ldr	r0, [pc, #704]	; (8010f38 <ResistiveTouchSampler+0x348>)
 8010c78:	f7f1 fac2 	bl	8002200 <HAL_GPIO_ReadPin>
 8010c7c:	2801      	cmp	r0, #1
 8010c7e:	4604      	mov	r4, r0
 8010c80:	f000 8124 	beq.w	8010ecc <ResistiveTouchSampler+0x2dc>
		if(HAL_GPIO_ReadPin(BUTTON_9_GPIO_Port, BUTTON_9_Pin) == GPIO_PIN_SET){
 8010c84:	2180      	movs	r1, #128	; 0x80
 8010c86:	48ab      	ldr	r0, [pc, #684]	; (8010f34 <ResistiveTouchSampler+0x344>)
 8010c88:	f7f1 faba 	bl	8002200 <HAL_GPIO_ReadPin>
 8010c8c:	2801      	cmp	r0, #1
 8010c8e:	4604      	mov	r4, r0
 8010c90:	f000 80c2 	beq.w	8010e18 <ResistiveTouchSampler+0x228>
		if(HAL_GPIO_ReadPin(BUTTON_10_GPIO_Port, BUTTON_10_Pin) == GPIO_PIN_SET){
 8010c94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010c98:	48a8      	ldr	r0, [pc, #672]	; (8010f3c <ResistiveTouchSampler+0x34c>)
 8010c9a:	f7f1 fab1 	bl	8002200 <HAL_GPIO_ReadPin>
 8010c9e:	2801      	cmp	r0, #1
 8010ca0:	4604      	mov	r4, r0
 8010ca2:	d053      	beq.n	8010d4c <ResistiveTouchSampler+0x15c>
		transmitToBuffer();
 8010ca4:	f7ff fc18 	bl	80104d8 <transmitToBuffer>
		    taskENTER_CRITICAL();
 8010ca8:	f7fb f96c 	bl	800bf84 <vPortEnterCritical>
		buttonStateMachine();
 8010cac:	f7ff ff4c 	bl	8010b48 <buttonStateMachine>
}
 8010cb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		    taskEXIT_CRITICAL();
 8010cb4:	f7fb b988 	b.w	800bfc8 <vPortExitCritical>
			if(LED_State(BUTTON_1_G_REG, BUTTON_1_G_PIN) == LED_OFF){
 8010cb8:	2120      	movs	r1, #32
 8010cba:	2005      	movs	r0, #5
 8010cbc:	f7ff fcfa 	bl	80106b4 <LED_State>
 8010cc0:	4605      	mov	r5, r0
 8010cc2:	2800      	cmp	r0, #0
 8010cc4:	d1b2      	bne.n	8010c2c <ResistiveTouchSampler+0x3c>
				if ( (HAL_GetTick() - button_1_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 8010cc6:	4e9e      	ldr	r6, [pc, #632]	; (8010f40 <ResistiveTouchSampler+0x350>)
 8010cc8:	f7f0 f93e 	bl	8000f48 <HAL_GetTick>
 8010ccc:	6833      	ldr	r3, [r6, #0]
 8010cce:	1ac0      	subs	r0, r0, r3
 8010cd0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8010cd4:	d9aa      	bls.n	8010c2c <ResistiveTouchSampler+0x3c>
					button_1_timeout = HAL_GetTick();
 8010cd6:	f7f0 f937 	bl	8000f48 <HAL_GetTick>
					Set_LED_Setting(BUTTON_1_G_REG, BUTTON_1_G_PIN, 1);
 8010cda:	4622      	mov	r2, r4
					button_1_timeout = HAL_GetTick();
 8010cdc:	6030      	str	r0, [r6, #0]
					Set_LED_Setting(BUTTON_1_G_REG, BUTTON_1_G_PIN, 1);
 8010cde:	2120      	movs	r1, #32
 8010ce0:	2005      	movs	r0, #5
 8010ce2:	f7ff fcd7 	bl	8010694 <Set_LED_Setting>
					Set_LED_Setting(BUTTON_2_G_REG, BUTTON_2_G_PIN, 0);
 8010ce6:	462a      	mov	r2, r5
 8010ce8:	2102      	movs	r1, #2
 8010cea:	2005      	movs	r0, #5
 8010cec:	f7ff fcd2 	bl	8010694 <Set_LED_Setting>
					Set_LED_Setting(BUTTON_3_G_REG, BUTTON_3_G_PIN, 0);
 8010cf0:	462a      	mov	r2, r5
 8010cf2:	2108      	movs	r1, #8
 8010cf4:	2004      	movs	r0, #4
 8010cf6:	f7ff fccd 	bl	8010694 <Set_LED_Setting>
					setTable('S');
 8010cfa:	2053      	movs	r0, #83	; 0x53
 8010cfc:	f002 fa16 	bl	801312c <setTable>
 8010d00:	e794      	b.n	8010c2c <ResistiveTouchSampler+0x3c>
			if(LED_State(BUTTON_2_G_REG, BUTTON_2_G_PIN) == LED_OFF){
 8010d02:	2102      	movs	r1, #2
 8010d04:	2005      	movs	r0, #5
 8010d06:	f7ff fcd5 	bl	80106b4 <LED_State>
 8010d0a:	4605      	mov	r5, r0
 8010d0c:	2800      	cmp	r0, #0
 8010d0e:	d18d      	bne.n	8010c2c <ResistiveTouchSampler+0x3c>
				if ( (HAL_GetTick() - button_2_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 8010d10:	4e8c      	ldr	r6, [pc, #560]	; (8010f44 <ResistiveTouchSampler+0x354>)
 8010d12:	f7f0 f919 	bl	8000f48 <HAL_GetTick>
 8010d16:	6833      	ldr	r3, [r6, #0]
 8010d18:	1ac3      	subs	r3, r0, r3
 8010d1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010d1e:	d985      	bls.n	8010c2c <ResistiveTouchSampler+0x3c>
					button_2_timeout = HAL_GetTick();
 8010d20:	f7f0 f912 	bl	8000f48 <HAL_GetTick>
					Set_LED_Setting(BUTTON_1_G_REG, BUTTON_1_G_PIN, 0);
 8010d24:	462a      	mov	r2, r5
					button_2_timeout = HAL_GetTick();
 8010d26:	6030      	str	r0, [r6, #0]
					Set_LED_Setting(BUTTON_1_G_REG, BUTTON_1_G_PIN, 0);
 8010d28:	2120      	movs	r1, #32
 8010d2a:	2005      	movs	r0, #5
 8010d2c:	f7ff fcb2 	bl	8010694 <Set_LED_Setting>
					Set_LED_Setting(BUTTON_2_G_REG, BUTTON_2_G_PIN, 1);
 8010d30:	4622      	mov	r2, r4
 8010d32:	2102      	movs	r1, #2
 8010d34:	2005      	movs	r0, #5
 8010d36:	f7ff fcad 	bl	8010694 <Set_LED_Setting>
					Set_LED_Setting(BUTTON_3_G_REG, BUTTON_3_G_PIN, 0);
 8010d3a:	462a      	mov	r2, r5
 8010d3c:	2108      	movs	r1, #8
 8010d3e:	2004      	movs	r0, #4
 8010d40:	f7ff fca8 	bl	8010694 <Set_LED_Setting>
					setTable('W');
 8010d44:	2057      	movs	r0, #87	; 0x57
 8010d46:	f002 f9f1 	bl	801312c <setTable>
 8010d4a:	e76f      	b.n	8010c2c <ResistiveTouchSampler+0x3c>
		  if ( (HAL_GetTick() - button_10_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 8010d4c:	4d7e      	ldr	r5, [pc, #504]	; (8010f48 <ResistiveTouchSampler+0x358>)
 8010d4e:	f7f0 f8fb 	bl	8000f48 <HAL_GetTick>
 8010d52:	682b      	ldr	r3, [r5, #0]
 8010d54:	1ac0      	subs	r0, r0, r3
 8010d56:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8010d5a:	d9a3      	bls.n	8010ca4 <ResistiveTouchSampler+0xb4>
		    button_10_state++;
 8010d5c:	4e7b      	ldr	r6, [pc, #492]	; (8010f4c <ResistiveTouchSampler+0x35c>)
		    button_10_timeout = HAL_GetTick();
 8010d5e:	f7f0 f8f3 	bl	8000f48 <HAL_GetTick>
		    button_10_state++;
 8010d62:	7833      	ldrb	r3, [r6, #0]
		    button_10_timeout = HAL_GetTick();
 8010d64:	6028      	str	r0, [r5, #0]
		    button_10_state++;
 8010d66:	3301      	adds	r3, #1
 8010d68:	b2dd      	uxtb	r5, r3
		    if(button_10_state == 1){
 8010d6a:	2d01      	cmp	r5, #1
		    button_10_state++;
 8010d6c:	7035      	strb	r5, [r6, #0]
		    if(button_10_state == 1){
 8010d6e:	f000 8178 	beq.w	8011062 <ResistiveTouchSampler+0x472>
		    else if(button_10_state == 2){
 8010d72:	2d02      	cmp	r5, #2
 8010d74:	f000 817f 	beq.w	8011076 <ResistiveTouchSampler+0x486>
		    else if(button_10_state == 3){
 8010d78:	2d03      	cmp	r5, #3
 8010d7a:	f000 81b5 	beq.w	80110e8 <ResistiveTouchSampler+0x4f8>
		    else if(button_10_state == 4){
 8010d7e:	2d04      	cmp	r5, #4
 8010d80:	d190      	bne.n	8010ca4 <ResistiveTouchSampler+0xb4>
		      Set_LED_Setting(BUTTON_10_G_REG, BUTTON_10_G_PIN, 0);
 8010d82:	2102      	movs	r1, #2
 8010d84:	4608      	mov	r0, r1
 8010d86:	2200      	movs	r2, #0
 8010d88:	f7ff fc84 	bl	8010694 <Set_LED_Setting>
		      Set_LED_Setting(BUTTON_10_R_REG, BUTTON_10_R_PIN, 0);
 8010d8c:	4621      	mov	r1, r4
 8010d8e:	2200      	movs	r2, #0
 8010d90:	2002      	movs	r0, #2
 8010d92:	f7ff fc7f 	bl	8010694 <Set_LED_Setting>
		      changeQ(3);
 8010d96:	ed9f 0b64 	vldr	d0, [pc, #400]	; 8010f28 <ResistiveTouchSampler+0x338>
 8010d9a:	f7fe faad 	bl	800f2f8 <changeQ>
		      button_10_state = 0;
 8010d9e:	2300      	movs	r3, #0
 8010da0:	7033      	strb	r3, [r6, #0]
 8010da2:	e77f      	b.n	8010ca4 <ResistiveTouchSampler+0xb4>
			if ( (HAL_GetTick() - button_5_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 8010da4:	4d6a      	ldr	r5, [pc, #424]	; (8010f50 <ResistiveTouchSampler+0x360>)
 8010da6:	f7f0 f8cf 	bl	8000f48 <HAL_GetTick>
 8010daa:	682b      	ldr	r3, [r5, #0]
 8010dac:	1ac0      	subs	r0, r0, r3
 8010dae:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8010db2:	f67f af4d 	bls.w	8010c50 <ResistiveTouchSampler+0x60>
				button_5_timeout = HAL_GetTick();
 8010db6:	f7f0 f8c7 	bl	8000f48 <HAL_GetTick>
				if(LED_State(BUTTON_5_G_REG, BUTTON_5_G_PIN) == LED_OFF){
 8010dba:	2180      	movs	r1, #128	; 0x80
				button_5_timeout = HAL_GetTick();
 8010dbc:	6028      	str	r0, [r5, #0]
				if(LED_State(BUTTON_5_G_REG, BUTTON_5_G_PIN) == LED_OFF){
 8010dbe:	2000      	movs	r0, #0
 8010dc0:	f7ff fc78 	bl	80106b4 <LED_State>
 8010dc4:	4605      	mov	r5, r0
 8010dc6:	2800      	cmp	r0, #0
 8010dc8:	f47f af42 	bne.w	8010c50 <ResistiveTouchSampler+0x60>
					Set_LED_Setting(BUTTON_5_G_REG, BUTTON_5_G_PIN, 1);
 8010dcc:	4622      	mov	r2, r4
 8010dce:	2180      	movs	r1, #128	; 0x80
 8010dd0:	f7ff fc60 	bl	8010694 <Set_LED_Setting>
					Set_LED_Setting(BUTTON_6_G_REG, BUTTON_6_G_PIN, 0);
 8010dd4:	462a      	mov	r2, r5
 8010dd6:	4628      	mov	r0, r5
 8010dd8:	2108      	movs	r1, #8
 8010dda:	f7ff fc5b 	bl	8010694 <Set_LED_Setting>
 8010dde:	e737      	b.n	8010c50 <ResistiveTouchSampler+0x60>
			if ( (HAL_GetTick() - button_4_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 8010de0:	4d5c      	ldr	r5, [pc, #368]	; (8010f54 <ResistiveTouchSampler+0x364>)
 8010de2:	f7f0 f8b1 	bl	8000f48 <HAL_GetTick>
 8010de6:	682b      	ldr	r3, [r5, #0]
 8010de8:	1ac0      	subs	r0, r0, r3
 8010dea:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8010dee:	f67f af26 	bls.w	8010c3e <ResistiveTouchSampler+0x4e>
				button_4_timeout = HAL_GetTick();
 8010df2:	f7f0 f8a9 	bl	8000f48 <HAL_GetTick>
				if(LED_State(BUTTON_4_G_REG, BUTTON_4_G_PIN) == LED_OFF){
 8010df6:	2120      	movs	r1, #32
				button_4_timeout = HAL_GetTick();
 8010df8:	6028      	str	r0, [r5, #0]
				if(LED_State(BUTTON_4_G_REG, BUTTON_4_G_PIN) == LED_OFF){
 8010dfa:	4620      	mov	r0, r4
 8010dfc:	f7ff fc5a 	bl	80106b4 <LED_State>
 8010e00:	2800      	cmp	r0, #0
 8010e02:	f040 80fd 	bne.w	8011000 <ResistiveTouchSampler+0x410>
						Set_LED_Setting(BUTTON_4_G_REG, BUTTON_4_G_PIN, 1);
 8010e06:	4620      	mov	r0, r4
 8010e08:	4622      	mov	r2, r4
 8010e0a:	2120      	movs	r1, #32
 8010e0c:	f7ff fc42 	bl	8010694 <Set_LED_Setting>
						activateLowpassFilter(1);
 8010e10:	4620      	mov	r0, r4
 8010e12:	f001 f809 	bl	8011e28 <activateLowpassFilter>
 8010e16:	e712      	b.n	8010c3e <ResistiveTouchSampler+0x4e>
		  if ( (HAL_GetTick() - button_9_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 8010e18:	4d4f      	ldr	r5, [pc, #316]	; (8010f58 <ResistiveTouchSampler+0x368>)
 8010e1a:	f7f0 f895 	bl	8000f48 <HAL_GetTick>
 8010e1e:	682b      	ldr	r3, [r5, #0]
 8010e20:	1ac0      	subs	r0, r0, r3
 8010e22:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8010e26:	f67f af35 	bls.w	8010c94 <ResistiveTouchSampler+0xa4>
		    button_9_state++;
 8010e2a:	4f4c      	ldr	r7, [pc, #304]	; (8010f5c <ResistiveTouchSampler+0x36c>)
		    bit_crush++;
 8010e2c:	4e4c      	ldr	r6, [pc, #304]	; (8010f60 <ResistiveTouchSampler+0x370>)
		    button_9_timeout = HAL_GetTick();
 8010e2e:	f7f0 f88b 	bl	8000f48 <HAL_GetTick>
		    button_9_state++;
 8010e32:	783b      	ldrb	r3, [r7, #0]
		    bit_crush++;
 8010e34:	7831      	ldrb	r1, [r6, #0]
		    button_9_timeout = HAL_GetTick();
 8010e36:	6028      	str	r0, [r5, #0]
		    button_9_state++;
 8010e38:	3301      	adds	r3, #1
 8010e3a:	b2da      	uxtb	r2, r3
		    bit_crush++;
 8010e3c:	3101      	adds	r1, #1
		    if(button_9_state == 1){
 8010e3e:	2a01      	cmp	r2, #1
		    button_9_state++;
 8010e40:	703a      	strb	r2, [r7, #0]
		    bit_crush++;
 8010e42:	7031      	strb	r1, [r6, #0]
		    if(button_9_state == 1){
 8010e44:	f000 8106 	beq.w	8011054 <ResistiveTouchSampler+0x464>
		    else if(button_9_state == 2){
 8010e48:	2a02      	cmp	r2, #2
 8010e4a:	f000 8130 	beq.w	80110ae <ResistiveTouchSampler+0x4be>
		    else if(button_9_state == 3){
 8010e4e:	2a03      	cmp	r2, #3
		      Set_LED_Setting(BUTTON_9_G_REG, BUTTON_9_G_PIN, 0);
 8010e50:	f04f 0102 	mov.w	r1, #2
 8010e54:	f04f 0200 	mov.w	r2, #0
 8010e58:	4620      	mov	r0, r4
		    else if(button_9_state == 3){
 8010e5a:	f000 80e0 	beq.w	801101e <ResistiveTouchSampler+0x42e>
		      Set_LED_Setting(BUTTON_9_G_REG, BUTTON_9_G_PIN, 0);
 8010e5e:	f7ff fc19 	bl	8010694 <Set_LED_Setting>
		      Set_LED_Setting(BUTTON_9_R_REG, BUTTON_9_R_PIN, 0);
 8010e62:	2200      	movs	r2, #0
 8010e64:	4621      	mov	r1, r4
 8010e66:	4620      	mov	r0, r4
 8010e68:	f7ff fc14 	bl	8010694 <Set_LED_Setting>
		      bit_crush = 0;
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	7033      	strb	r3, [r6, #0]
		      button_9_state = 0;
 8010e70:	703b      	strb	r3, [r7, #0]
 8010e72:	e70f      	b.n	8010c94 <ResistiveTouchSampler+0xa4>
		  if ( (HAL_GetTick() - button_7_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 8010e74:	4d3b      	ldr	r5, [pc, #236]	; (8010f64 <ResistiveTouchSampler+0x374>)
 8010e76:	f7f0 f867 	bl	8000f48 <HAL_GetTick>
 8010e7a:	682b      	ldr	r3, [r5, #0]
 8010e7c:	1ac0      	subs	r0, r0, r3
 8010e7e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8010e82:	f67f aef7 	bls.w	8010c74 <ResistiveTouchSampler+0x84>
		    button_7_state++;
 8010e86:	4e38      	ldr	r6, [pc, #224]	; (8010f68 <ResistiveTouchSampler+0x378>)
		    button_7_timeout = HAL_GetTick();
 8010e88:	f7f0 f85e 	bl	8000f48 <HAL_GetTick>
		    button_7_state++;
 8010e8c:	7833      	ldrb	r3, [r6, #0]
		    button_7_timeout = HAL_GetTick();
 8010e8e:	6028      	str	r0, [r5, #0]
		    button_7_state++;
 8010e90:	3301      	adds	r3, #1
 8010e92:	b2dd      	uxtb	r5, r3
		    if(button_7_state == 1){
 8010e94:	2d01      	cmp	r5, #1
		    button_7_state++;
 8010e96:	7035      	strb	r5, [r6, #0]
		    if(button_7_state == 1){
 8010e98:	f000 80d4 	beq.w	8011044 <ResistiveTouchSampler+0x454>
		    else if(button_7_state == 2){
 8010e9c:	2d02      	cmp	r5, #2
 8010e9e:	f000 80f9 	beq.w	8011094 <ResistiveTouchSampler+0x4a4>
		    else if(button_7_state == 3){
 8010ea2:	2d03      	cmp	r5, #3
 8010ea4:	f000 812f 	beq.w	8011106 <ResistiveTouchSampler+0x516>
		    else if(button_7_state == 4){
 8010ea8:	2d04      	cmp	r5, #4
 8010eaa:	f47f aee3 	bne.w	8010c74 <ResistiveTouchSampler+0x84>
		      Set_LED_Setting(BUTTON_7_G_REG, BUTTON_7_G_PIN, 0);
 8010eae:	2200      	movs	r2, #0
 8010eb0:	2180      	movs	r1, #128	; 0x80
 8010eb2:	2003      	movs	r0, #3
 8010eb4:	f7ff fbee 	bl	8010694 <Set_LED_Setting>
		      Set_LED_Setting(BUTTON_7_R_REG, BUTTON_7_R_PIN, 0);
 8010eb8:	2200      	movs	r2, #0
 8010eba:	2140      	movs	r1, #64	; 0x40
 8010ebc:	2003      	movs	r0, #3
 8010ebe:	f7ff fbe9 	bl	8010694 <Set_LED_Setting>
		      stopPlayback();
 8010ec2:	f004 f96b 	bl	801519c <stopPlayback>
		      button_7_state = 0;
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	7033      	strb	r3, [r6, #0]
 8010eca:	e6d3      	b.n	8010c74 <ResistiveTouchSampler+0x84>
		  if ( (HAL_GetTick() - button_8_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 8010ecc:	4d27      	ldr	r5, [pc, #156]	; (8010f6c <ResistiveTouchSampler+0x37c>)
 8010ece:	f7f0 f83b 	bl	8000f48 <HAL_GetTick>
 8010ed2:	682b      	ldr	r3, [r5, #0]
 8010ed4:	1ac0      	subs	r0, r0, r3
 8010ed6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8010eda:	f67f aed3 	bls.w	8010c84 <ResistiveTouchSampler+0x94>
		    button_8_state++;
 8010ede:	4e24      	ldr	r6, [pc, #144]	; (8010f70 <ResistiveTouchSampler+0x380>)
		    button_8_timeout = HAL_GetTick();
 8010ee0:	f7f0 f832 	bl	8000f48 <HAL_GetTick>
		    button_8_state++;
 8010ee4:	7833      	ldrb	r3, [r6, #0]
		    button_8_timeout = HAL_GetTick();
 8010ee6:	6028      	str	r0, [r5, #0]
		    button_8_state++;
 8010ee8:	3301      	adds	r3, #1
 8010eea:	b2dd      	uxtb	r5, r3
		    if(button_8_state == 1){
 8010eec:	2d01      	cmp	r5, #1
		    button_8_state++;
 8010eee:	7035      	strb	r5, [r6, #0]
		    if(button_8_state == 1){
 8010ef0:	f000 809f 	beq.w	8011032 <ResistiveTouchSampler+0x442>
		    else if(button_8_state == 2){
 8010ef4:	2d02      	cmp	r5, #2
 8010ef6:	f000 80e7 	beq.w	80110c8 <ResistiveTouchSampler+0x4d8>
		    else if(button_8_state == 3){
 8010efa:	2d03      	cmp	r5, #3
 8010efc:	f000 80f2 	beq.w	80110e4 <ResistiveTouchSampler+0x4f4>
		    else if(button_8_state == 4){
 8010f00:	2d04      	cmp	r5, #4
 8010f02:	f47f aebf 	bne.w	8010c84 <ResistiveTouchSampler+0x94>
		      Set_LED_Setting(BUTTON_8_G_REG, BUTTON_8_G_PIN, 0);
 8010f06:	2200      	movs	r2, #0
 8010f08:	2180      	movs	r1, #128	; 0x80
 8010f0a:	4628      	mov	r0, r5
 8010f0c:	f7ff fbc2 	bl	8010694 <Set_LED_Setting>
		      Set_LED_Setting(BUTTON_8_R_REG, BUTTON_8_R_PIN, 0);
 8010f10:	4628      	mov	r0, r5
 8010f12:	2200      	movs	r2, #0
 8010f14:	2140      	movs	r1, #64	; 0x40
 8010f16:	f7ff fbbd 	bl	8010694 <Set_LED_Setting>
		      setPostWave(0);
 8010f1a:	2000      	movs	r0, #0
 8010f1c:	f004 f81a 	bl	8014f54 <setPostWave>
		      button_8_state = 0;
 8010f20:	2300      	movs	r3, #0
 8010f22:	7033      	strb	r3, [r6, #0]
 8010f24:	e6ae      	b.n	8010c84 <ResistiveTouchSampler+0x94>
 8010f26:	bf00      	nop
 8010f28:	00000000 	.word	0x00000000
 8010f2c:	40080000 	.word	0x40080000
 8010f30:	2000004e 	.word	0x2000004e
 8010f34:	48000800 	.word	0x48000800
 8010f38:	48001000 	.word	0x48001000
 8010f3c:	48000c00 	.word	0x48000c00
 8010f40:	200052e0 	.word	0x200052e0
 8010f44:	200052e4 	.word	0x200052e4
 8010f48:	200052dc 	.word	0x200052dc
 8010f4c:	200052da 	.word	0x200052da
 8010f50:	200052f0 	.word	0x200052f0
 8010f54:	200052ec 	.word	0x200052ec
 8010f58:	2000530c 	.word	0x2000530c
 8010f5c:	20005308 	.word	0x20005308
 8010f60:	200052d9 	.word	0x200052d9
 8010f64:	200052fc 	.word	0x200052fc
 8010f68:	200052f8 	.word	0x200052f8
 8010f6c:	20005304 	.word	0x20005304
 8010f70:	20005300 	.word	0x20005300
			if(LED_State(BUTTON_6_G_REG, BUTTON_6_G_PIN) == LED_OFF){
 8010f74:	2108      	movs	r1, #8
 8010f76:	2000      	movs	r0, #0
 8010f78:	f7ff fb9c 	bl	80106b4 <LED_State>
 8010f7c:	4605      	mov	r5, r0
 8010f7e:	2800      	cmp	r0, #0
 8010f80:	f47f ae6f 	bne.w	8010c62 <ResistiveTouchSampler+0x72>
				if ( (HAL_GetTick() - button_6_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 8010f84:	4e6c      	ldr	r6, [pc, #432]	; (8011138 <ResistiveTouchSampler+0x548>)
 8010f86:	f7ef ffdf 	bl	8000f48 <HAL_GetTick>
 8010f8a:	6833      	ldr	r3, [r6, #0]
 8010f8c:	1ac3      	subs	r3, r0, r3
 8010f8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010f92:	f67f ae66 	bls.w	8010c62 <ResistiveTouchSampler+0x72>
					button_6_timeout = HAL_GetTick();
 8010f96:	f7ef ffd7 	bl	8000f48 <HAL_GetTick>
					Set_LED_Setting(BUTTON_6_G_REG, BUTTON_6_G_PIN, 1);
 8010f9a:	4622      	mov	r2, r4
					button_6_timeout = HAL_GetTick();
 8010f9c:	6030      	str	r0, [r6, #0]
					Set_LED_Setting(BUTTON_6_G_REG, BUTTON_6_G_PIN, 1);
 8010f9e:	2108      	movs	r1, #8
 8010fa0:	4628      	mov	r0, r5
 8010fa2:	f7ff fb77 	bl	8010694 <Set_LED_Setting>
					Set_LED_Setting(BUTTON_5_G_REG, BUTTON_5_G_PIN, 0);
 8010fa6:	462a      	mov	r2, r5
 8010fa8:	4628      	mov	r0, r5
 8010faa:	2180      	movs	r1, #128	; 0x80
 8010fac:	f7ff fb72 	bl	8010694 <Set_LED_Setting>
 8010fb0:	e657      	b.n	8010c62 <ResistiveTouchSampler+0x72>
			if(LED_State(BUTTON_3_G_REG, BUTTON_3_G_PIN) == LED_OFF){
 8010fb2:	2108      	movs	r1, #8
 8010fb4:	2004      	movs	r0, #4
 8010fb6:	f7ff fb7d 	bl	80106b4 <LED_State>
 8010fba:	4605      	mov	r5, r0
 8010fbc:	2800      	cmp	r0, #0
 8010fbe:	f47f ae35 	bne.w	8010c2c <ResistiveTouchSampler+0x3c>
				if ( (HAL_GetTick() - button_3_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 8010fc2:	4e5e      	ldr	r6, [pc, #376]	; (801113c <ResistiveTouchSampler+0x54c>)
 8010fc4:	f7ef ffc0 	bl	8000f48 <HAL_GetTick>
 8010fc8:	6833      	ldr	r3, [r6, #0]
 8010fca:	1ac3      	subs	r3, r0, r3
 8010fcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010fd0:	f67f ae2c 	bls.w	8010c2c <ResistiveTouchSampler+0x3c>
					button_3_timeout = HAL_GetTick();
 8010fd4:	f7ef ffb8 	bl	8000f48 <HAL_GetTick>
					Set_LED_Setting(BUTTON_1_G_REG, BUTTON_1_G_PIN, 0);
 8010fd8:	462a      	mov	r2, r5
					button_3_timeout = HAL_GetTick();
 8010fda:	6030      	str	r0, [r6, #0]
					Set_LED_Setting(BUTTON_1_G_REG, BUTTON_1_G_PIN, 0);
 8010fdc:	2120      	movs	r1, #32
 8010fde:	2005      	movs	r0, #5
 8010fe0:	f7ff fb58 	bl	8010694 <Set_LED_Setting>
					Set_LED_Setting(BUTTON_2_G_REG, BUTTON_2_G_PIN, 0);
 8010fe4:	462a      	mov	r2, r5
 8010fe6:	2102      	movs	r1, #2
 8010fe8:	2005      	movs	r0, #5
 8010fea:	f7ff fb53 	bl	8010694 <Set_LED_Setting>
					Set_LED_Setting(BUTTON_3_G_REG, BUTTON_3_G_PIN, 1);
 8010fee:	4622      	mov	r2, r4
 8010ff0:	2108      	movs	r1, #8
 8010ff2:	2004      	movs	r0, #4
 8010ff4:	f7ff fb4e 	bl	8010694 <Set_LED_Setting>
					setTable('Q');
 8010ff8:	2051      	movs	r0, #81	; 0x51
 8010ffa:	f002 f897 	bl	801312c <setTable>
 8010ffe:	e615      	b.n	8010c2c <ResistiveTouchSampler+0x3c>
				else if(LED_State(BUTTON_4_G_REG, BUTTON_4_G_PIN) == LED_ON){
 8011000:	4620      	mov	r0, r4
 8011002:	2120      	movs	r1, #32
 8011004:	f7ff fb56 	bl	80106b4 <LED_State>
 8011008:	2801      	cmp	r0, #1
 801100a:	f47f ae18 	bne.w	8010c3e <ResistiveTouchSampler+0x4e>
						Set_LED_Setting(BUTTON_4_G_REG, BUTTON_4_G_PIN, 0);
 801100e:	2200      	movs	r2, #0
 8011010:	2120      	movs	r1, #32
 8011012:	f7ff fb3f 	bl	8010694 <Set_LED_Setting>
						activateLowpassFilter(0);
 8011016:	2000      	movs	r0, #0
 8011018:	f000 ff06 	bl	8011e28 <activateLowpassFilter>
 801101c:	e60f      	b.n	8010c3e <ResistiveTouchSampler+0x4e>
		      Set_LED_Setting(BUTTON_9_G_REG, BUTTON_9_G_PIN, 0);
 801101e:	f7ff fb39 	bl	8010694 <Set_LED_Setting>
		      Set_LED_Setting(BUTTON_9_R_REG, BUTTON_9_R_PIN, 1);
 8011022:	4622      	mov	r2, r4
 8011024:	4621      	mov	r1, r4
 8011026:	4620      	mov	r0, r4
 8011028:	f7ff fb34 	bl	8010694 <Set_LED_Setting>
		      bit_crush = 8;
 801102c:	2308      	movs	r3, #8
 801102e:	7033      	strb	r3, [r6, #0]
 8011030:	e630      	b.n	8010c94 <ResistiveTouchSampler+0xa4>
		      Set_LED_Setting(BUTTON_8_G_REG, BUTTON_8_G_PIN, 1);
 8011032:	462a      	mov	r2, r5
 8011034:	2180      	movs	r1, #128	; 0x80
 8011036:	2004      	movs	r0, #4
 8011038:	f7ff fb2c 	bl	8010694 <Set_LED_Setting>
		      setPostWave(1);
 801103c:	4628      	mov	r0, r5
 801103e:	f003 ff89 	bl	8014f54 <setPostWave>
 8011042:	e61f      	b.n	8010c84 <ResistiveTouchSampler+0x94>
		      Set_LED_Setting(BUTTON_7_G_REG, BUTTON_7_G_PIN, 1);
 8011044:	462a      	mov	r2, r5
 8011046:	2180      	movs	r1, #128	; 0x80
 8011048:	2003      	movs	r0, #3
 801104a:	f7ff fb23 	bl	8010694 <Set_LED_Setting>
		      startRecording();
 801104e:	f004 f885 	bl	801515c <startRecording>
 8011052:	e60f      	b.n	8010c74 <ResistiveTouchSampler+0x84>
		      Set_LED_Setting(BUTTON_9_G_REG, BUTTON_9_G_PIN, 1);
 8011054:	4610      	mov	r0, r2
 8011056:	2102      	movs	r1, #2
 8011058:	f7ff fb1c 	bl	8010694 <Set_LED_Setting>
		      bit_crush = 4;
 801105c:	2304      	movs	r3, #4
 801105e:	7033      	strb	r3, [r6, #0]
 8011060:	e618      	b.n	8010c94 <ResistiveTouchSampler+0xa4>
		      Set_LED_Setting(BUTTON_10_G_REG, BUTTON_10_G_PIN, 1);
 8011062:	2102      	movs	r1, #2
 8011064:	462a      	mov	r2, r5
 8011066:	4608      	mov	r0, r1
 8011068:	f7ff fb14 	bl	8010694 <Set_LED_Setting>
		      changeQ(1);
 801106c:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8011120 <ResistiveTouchSampler+0x530>
 8011070:	f7fe f942 	bl	800f2f8 <changeQ>
 8011074:	e616      	b.n	8010ca4 <ResistiveTouchSampler+0xb4>
		      Set_LED_Setting(BUTTON_10_G_REG, BUTTON_10_G_PIN, 1);
 8011076:	4622      	mov	r2, r4
 8011078:	4629      	mov	r1, r5
 801107a:	4628      	mov	r0, r5
 801107c:	f7ff fb0a 	bl	8010694 <Set_LED_Setting>
		      Set_LED_Setting(BUTTON_10_R_REG, BUTTON_10_R_PIN, 1);
 8011080:	4622      	mov	r2, r4
 8011082:	4621      	mov	r1, r4
 8011084:	4628      	mov	r0, r5
 8011086:	f7ff fb05 	bl	8010694 <Set_LED_Setting>
		      changeQ(1.5);
 801108a:	ed9f 0b27 	vldr	d0, [pc, #156]	; 8011128 <ResistiveTouchSampler+0x538>
 801108e:	f7fe f933 	bl	800f2f8 <changeQ>
 8011092:	e607      	b.n	8010ca4 <ResistiveTouchSampler+0xb4>
		      Set_LED_Setting(BUTTON_7_G_REG, BUTTON_7_G_PIN, 0);
 8011094:	2200      	movs	r2, #0
 8011096:	2180      	movs	r1, #128	; 0x80
 8011098:	2003      	movs	r0, #3
 801109a:	f7ff fafb 	bl	8010694 <Set_LED_Setting>
		      Set_LED_Setting(BUTTON_7_R_REG, BUTTON_7_R_PIN, 1);
 801109e:	4622      	mov	r2, r4
 80110a0:	2140      	movs	r1, #64	; 0x40
 80110a2:	2003      	movs	r0, #3
 80110a4:	f7ff faf6 	bl	8010694 <Set_LED_Setting>
		      stopRecording();
 80110a8:	f004 f872 	bl	8015190 <stopRecording>
 80110ac:	e5e2      	b.n	8010c74 <ResistiveTouchSampler+0x84>
		      Set_LED_Setting(BUTTON_9_G_REG, BUTTON_9_G_PIN, 1);
 80110ae:	4611      	mov	r1, r2
 80110b0:	4620      	mov	r0, r4
 80110b2:	4622      	mov	r2, r4
 80110b4:	f7ff faee 	bl	8010694 <Set_LED_Setting>
		      Set_LED_Setting(BUTTON_9_R_REG, BUTTON_9_R_PIN, 1);
 80110b8:	4622      	mov	r2, r4
 80110ba:	4621      	mov	r1, r4
 80110bc:	4620      	mov	r0, r4
 80110be:	f7ff fae9 	bl	8010694 <Set_LED_Setting>
		      bit_crush = 6;
 80110c2:	2306      	movs	r3, #6
 80110c4:	7033      	strb	r3, [r6, #0]
 80110c6:	e5e5      	b.n	8010c94 <ResistiveTouchSampler+0xa4>
		      Set_LED_Setting(BUTTON_8_G_REG, BUTTON_8_G_PIN, 1);
 80110c8:	4622      	mov	r2, r4
		      Set_LED_Setting(BUTTON_8_G_REG, BUTTON_8_G_PIN, 0);
 80110ca:	2180      	movs	r1, #128	; 0x80
 80110cc:	2004      	movs	r0, #4
 80110ce:	f7ff fae1 	bl	8010694 <Set_LED_Setting>
		      Set_LED_Setting(BUTTON_8_R_REG, BUTTON_8_R_PIN, 1);
 80110d2:	4622      	mov	r2, r4
 80110d4:	2140      	movs	r1, #64	; 0x40
 80110d6:	2004      	movs	r0, #4
 80110d8:	f7ff fadc 	bl	8010694 <Set_LED_Setting>
		      setPostWave(3);
 80110dc:	4628      	mov	r0, r5
 80110de:	f003 ff39 	bl	8014f54 <setPostWave>
 80110e2:	e5cf      	b.n	8010c84 <ResistiveTouchSampler+0x94>
		      Set_LED_Setting(BUTTON_8_G_REG, BUTTON_8_G_PIN, 0);
 80110e4:	2200      	movs	r2, #0
 80110e6:	e7f0      	b.n	80110ca <ResistiveTouchSampler+0x4da>
		      Set_LED_Setting(BUTTON_10_G_REG, BUTTON_10_G_PIN, 0);
 80110e8:	2102      	movs	r1, #2
 80110ea:	4608      	mov	r0, r1
 80110ec:	2200      	movs	r2, #0
 80110ee:	f7ff fad1 	bl	8010694 <Set_LED_Setting>
		      Set_LED_Setting(BUTTON_10_R_REG, BUTTON_10_R_PIN, 1);
 80110f2:	4622      	mov	r2, r4
 80110f4:	4621      	mov	r1, r4
 80110f6:	2002      	movs	r0, #2
 80110f8:	f7ff facc 	bl	8010694 <Set_LED_Setting>
		      changeQ(2);
 80110fc:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8011130 <ResistiveTouchSampler+0x540>
 8011100:	f7fe f8fa 	bl	800f2f8 <changeQ>
 8011104:	e5ce      	b.n	8010ca4 <ResistiveTouchSampler+0xb4>
		      Set_LED_Setting(BUTTON_7_G_REG, BUTTON_7_G_PIN, 1);
 8011106:	4622      	mov	r2, r4
 8011108:	4628      	mov	r0, r5
 801110a:	2180      	movs	r1, #128	; 0x80
 801110c:	f7ff fac2 	bl	8010694 <Set_LED_Setting>
		      Set_LED_Setting(BUTTON_7_R_REG, BUTTON_7_R_PIN, 1);
 8011110:	4622      	mov	r2, r4
 8011112:	4628      	mov	r0, r5
 8011114:	2140      	movs	r1, #64	; 0x40
 8011116:	f7ff fabd 	bl	8010694 <Set_LED_Setting>
		      startPlayback();
 801111a:	f004 f895 	bl	8015248 <startPlayback>
 801111e:	e5a9      	b.n	8010c74 <ResistiveTouchSampler+0x84>
 8011120:	00000000 	.word	0x00000000
 8011124:	3ff00000 	.word	0x3ff00000
 8011128:	00000000 	.word	0x00000000
 801112c:	3ff80000 	.word	0x3ff80000
 8011130:	00000000 	.word	0x00000000
 8011134:	40000000 	.word	0x40000000
 8011138:	200052f4 	.word	0x200052f4
 801113c:	200052e8 	.word	0x200052e8

08011140 <disable_buttons>:
void disable_buttons(void){
 8011140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return button_state;
 8011142:	4b14      	ldr	r3, [pc, #80]	; (8011194 <disable_buttons+0x54>)
	if(isButtonEnabled() == 1){
 8011144:	781a      	ldrb	r2, [r3, #0]
 8011146:	2a01      	cmp	r2, #1
 8011148:	d00a      	beq.n	8011160 <disable_buttons+0x20>
	    osTimerStop(povExitTimerHandle);
 801114a:	4c13      	ldr	r4, [pc, #76]	; (8011198 <disable_buttons+0x58>)
 801114c:	6820      	ldr	r0, [r4, #0]
 801114e:	f7fa fda7 	bl	800bca0 <osTimerStop>
	    osTimerStart(povExitTimerHandle, 400);
 8011152:	6820      	ldr	r0, [r4, #0]
 8011154:	f44f 71c8 	mov.w	r1, #400	; 0x190
}
 8011158:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	    osTimerStart(povExitTimerHandle, 400);
 801115c:	f7fa bd72 	b.w	800bc44 <osTimerStart>
		temp_buffer[0] = LED_SETTINGS[0];
 8011160:	490e      	ldr	r1, [pc, #56]	; (801119c <disable_buttons+0x5c>)
 8011162:	4a0f      	ldr	r2, [pc, #60]	; (80111a0 <disable_buttons+0x60>)
 8011164:	780d      	ldrb	r5, [r1, #0]
		temp_buffer[1] = LED_SETTINGS[1];
 8011166:	784c      	ldrb	r4, [r1, #1]
		temp_buffer[0] = LED_SETTINGS[0];
 8011168:	7015      	strb	r5, [r2, #0]
		temp_buffer[2] = LED_SETTINGS[2];
 801116a:	f891 e002 	ldrb.w	lr, [r1, #2]
		temp_buffer[1] = LED_SETTINGS[1];
 801116e:	7054      	strb	r4, [r2, #1]
		temp_buffer[3] = LED_SETTINGS[3];
 8011170:	78cf      	ldrb	r7, [r1, #3]
		osTimerStart(povExitTimerHandle, 400);
 8011172:	4809      	ldr	r0, [pc, #36]	; (8011198 <disable_buttons+0x58>)
		temp_buffer[4] = LED_SETTINGS[4];
 8011174:	790e      	ldrb	r6, [r1, #4]
		temp_buffer[5] = LED_SETTINGS[5];
 8011176:	794d      	ldrb	r5, [r1, #5]
		temp_buffer[2] = LED_SETTINGS[2];
 8011178:	f882 e002 	strb.w	lr, [r2, #2]
		button_state = 0;
 801117c:	2400      	movs	r4, #0
		temp_buffer[3] = LED_SETTINGS[3];
 801117e:	70d7      	strb	r7, [r2, #3]
		temp_buffer[4] = LED_SETTINGS[4];
 8011180:	7116      	strb	r6, [r2, #4]
		temp_buffer[5] = LED_SETTINGS[5];
 8011182:	7155      	strb	r5, [r2, #5]
		button_state = 0;
 8011184:	701c      	strb	r4, [r3, #0]
		osTimerStart(povExitTimerHandle, 400);
 8011186:	6800      	ldr	r0, [r0, #0]
 8011188:	f44f 71c8 	mov.w	r1, #400	; 0x190
}
 801118c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		osTimerStart(povExitTimerHandle, 400);
 8011190:	f7fa bd58 	b.w	800bc44 <osTimerStart>
 8011194:	2000004e 	.word	0x2000004e
 8011198:	20005530 	.word	0x20005530
 801119c:	2000548c 	.word	0x2000548c
 80111a0:	200055e4 	.word	0x200055e4

080111a4 <enable_buttons>:
void enable_buttons(void){
 80111a4:	b570      	push	{r4, r5, r6, lr}
	LED_SETTINGS[0] = temp_buffer[0];
 80111a6:	4a0a      	ldr	r2, [pc, #40]	; (80111d0 <enable_buttons+0x2c>)
 80111a8:	4b0a      	ldr	r3, [pc, #40]	; (80111d4 <enable_buttons+0x30>)
 80111aa:	7816      	ldrb	r6, [r2, #0]
	LED_SETTINGS[1] = temp_buffer[1];
 80111ac:	7855      	ldrb	r5, [r2, #1]
	LED_SETTINGS[2] = temp_buffer[2];
 80111ae:	7894      	ldrb	r4, [r2, #2]
	LED_SETTINGS[3] = temp_buffer[3];
 80111b0:	78d0      	ldrb	r0, [r2, #3]
	LED_SETTINGS[4] = temp_buffer[4];
 80111b2:	7911      	ldrb	r1, [r2, #4]
	LED_SETTINGS[5] = temp_buffer[5];
 80111b4:	7952      	ldrb	r2, [r2, #5]
	LED_SETTINGS[0] = temp_buffer[0];
 80111b6:	701e      	strb	r6, [r3, #0]
	LED_SETTINGS[1] = temp_buffer[1];
 80111b8:	705d      	strb	r5, [r3, #1]
	LED_SETTINGS[2] = temp_buffer[2];
 80111ba:	709c      	strb	r4, [r3, #2]
	LED_SETTINGS[3] = temp_buffer[3];
 80111bc:	70d8      	strb	r0, [r3, #3]
	LED_SETTINGS[4] = temp_buffer[4];
 80111be:	7119      	strb	r1, [r3, #4]
	LED_SETTINGS[5] = temp_buffer[5];
 80111c0:	715a      	strb	r2, [r3, #5]
	transmitToBuffer();
 80111c2:	f7ff f989 	bl	80104d8 <transmitToBuffer>
	button_state = 1;
 80111c6:	4b04      	ldr	r3, [pc, #16]	; (80111d8 <enable_buttons+0x34>)
 80111c8:	2201      	movs	r2, #1
 80111ca:	701a      	strb	r2, [r3, #0]
 80111cc:	bd70      	pop	{r4, r5, r6, pc}
 80111ce:	bf00      	nop
 80111d0:	200055e4 	.word	0x200055e4
 80111d4:	2000548c 	.word	0x2000548c
 80111d8:	2000004e 	.word	0x2000004e

080111dc <isButtonEnabled>:
	return button_state;
 80111dc:	4b01      	ldr	r3, [pc, #4]	; (80111e4 <isButtonEnabled+0x8>)
}
 80111de:	7818      	ldrb	r0, [r3, #0]
 80111e0:	4770      	bx	lr
 80111e2:	bf00      	nop
 80111e4:	2000004e 	.word	0x2000004e

080111e8 <MX_RTC_Init>:
void MX_RTC_Init(void)
{

  /**Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80111e8:	4b0b      	ldr	r3, [pc, #44]	; (8011218 <MX_RTC_Init+0x30>)
 80111ea:	4a0c      	ldr	r2, [pc, #48]	; (801121c <MX_RTC_Init+0x34>)
{
 80111ec:	b510      	push	{r4, lr}
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
 80111ee:	21ff      	movs	r1, #255	; 0xff
  hrtc.Instance = RTC;
 80111f0:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = 127;
 80111f2:	247f      	movs	r4, #127	; 0x7f
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80111f4:	2200      	movs	r2, #0
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80111f6:	4618      	mov	r0, r3
  hrtc.Init.AsynchPrediv = 127;
 80111f8:	609c      	str	r4, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80111fa:	60d9      	str	r1, [r3, #12]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80111fc:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80111fe:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8011200:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8011202:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8011204:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8011206:	f7f3 ffc5 	bl	8005194 <HAL_RTC_Init>
 801120a:	b900      	cbnz	r0, 801120e <MX_RTC_Init+0x26>
 801120c:	bd10      	pop	{r4, pc}
  {
    Error_Handler();
  }

}
 801120e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8011212:	f7ff bc91 	b.w	8010b38 <Error_Handler>
 8011216:	bf00      	nop
 8011218:	20005ea4 	.word	0x20005ea4
 801121c:	40002800 	.word	0x40002800

08011220 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8011220:	6802      	ldr	r2, [r0, #0]
 8011222:	4b06      	ldr	r3, [pc, #24]	; (801123c <HAL_RTC_MspInit+0x1c>)
 8011224:	429a      	cmp	r2, r3
 8011226:	d000      	beq.n	801122a <HAL_RTC_MspInit+0xa>
 8011228:	4770      	bx	lr
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 801122a:	4a05      	ldr	r2, [pc, #20]	; (8011240 <HAL_RTC_MspInit+0x20>)
 801122c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8011230:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8011238:	4770      	bx	lr
 801123a:	bf00      	nop
 801123c:	40002800 	.word	0x40002800
 8011240:	40021000 	.word	0x40021000

08011244 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8011244:	b508      	push	{r3, lr}

  hsd1.Instance = SDMMC1;
 8011246:	4b0a      	ldr	r3, [pc, #40]	; (8011270 <MX_SDMMC1_SD_Init+0x2c>)
 8011248:	4a0a      	ldr	r2, [pc, #40]	; (8011274 <MX_SDMMC1_SD_Init+0x30>)
 801124a:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 801124c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8011250:	2200      	movs	r2, #0
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 0;
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8011252:	4618      	mov	r0, r3
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8011254:	60d9      	str	r1, [r3, #12]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8011256:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8011258:	609a      	str	r2, [r3, #8]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 801125a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 801125c:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 801125e:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8011260:	f7f4 f9c4 	bl	80055ec <HAL_SD_Init>
 8011264:	b900      	cbnz	r0, 8011268 <MX_SDMMC1_SD_Init+0x24>
 8011266:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
  }

}
 8011268:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 801126c:	f7ff bc64 	b.w	8010b38 <Error_Handler>
 8011270:	20005ec8 	.word	0x20005ec8
 8011274:	50062400 	.word	0x50062400

08011278 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8011278:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
 801127a:	6802      	ldr	r2, [r0, #0]
 801127c:	4b21      	ldr	r3, [pc, #132]	; (8011304 <HAL_SD_MspInit+0x8c>)
{
 801127e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011280:	2400      	movs	r4, #0
  if(sdHandle->Instance==SDMMC1)
 8011282:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011284:	9404      	str	r4, [sp, #16]
 8011286:	9403      	str	r4, [sp, #12]
 8011288:	9405      	str	r4, [sp, #20]
 801128a:	9406      	str	r4, [sp, #24]
 801128c:	9407      	str	r4, [sp, #28]
  if(sdHandle->Instance==SDMMC1)
 801128e:	d001      	beq.n	8011294 <HAL_SD_MspInit+0x1c>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8011290:	b009      	add	sp, #36	; 0x24
 8011292:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8011294:	4b1c      	ldr	r3, [pc, #112]	; (8011308 <HAL_SD_MspInit+0x90>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011296:	481d      	ldr	r0, [pc, #116]	; (801130c <HAL_SD_MspInit+0x94>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8011298:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801129a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 801129e:	64da      	str	r2, [r3, #76]	; 0x4c
 80112a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80112a2:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80112a6:	9200      	str	r2, [sp, #0]
 80112a8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80112aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80112ac:	f042 0204 	orr.w	r2, r2, #4
 80112b0:	64da      	str	r2, [r3, #76]	; 0x4c
 80112b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80112b4:	f002 0204 	and.w	r2, r2, #4
 80112b8:	9201      	str	r2, [sp, #4]
 80112ba:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80112bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80112be:	f042 0208 	orr.w	r2, r2, #8
 80112c2:	64da      	str	r2, [r3, #76]	; 0x4c
 80112c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80112c6:	250c      	movs	r5, #12
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80112c8:	f003 0308 	and.w	r3, r3, #8
 80112cc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80112ce:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80112d0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80112d4:	2603      	movs	r6, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80112d6:	eb0d 0105 	add.w	r1, sp, r5
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80112da:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80112dc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80112de:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80112e0:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80112e2:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80112e4:	f7f0 fe76 	bl	8001fd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80112e8:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80112ea:	eb0d 0105 	add.w	r1, sp, r5
 80112ee:	4808      	ldr	r0, [pc, #32]	; (8011310 <HAL_SD_MspInit+0x98>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80112f0:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80112f2:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80112f4:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80112f6:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80112f8:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80112fa:	f7f0 fe6b 	bl	8001fd4 <HAL_GPIO_Init>
}
 80112fe:	b009      	add	sp, #36	; 0x24
 8011300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011302:	bf00      	nop
 8011304:	50062400 	.word	0x50062400
 8011308:	40021000 	.word	0x40021000
 801130c:	48000800 	.word	0x48000800
 8011310:	48000c00 	.word	0x48000c00

08011314 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8011314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  hspi2.Instance = SPI2;
 8011316:	4b12      	ldr	r3, [pc, #72]	; (8011360 <MX_SPI2_Init+0x4c>)
 8011318:	4a12      	ldr	r2, [pc, #72]	; (8011364 <MX_SPI2_Init+0x50>)
 801131a:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 801131c:	f44f 7082 	mov.w	r0, #260	; 0x104
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8011320:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8011324:	2702      	movs	r7, #2
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8011326:	2601      	movs	r6, #1
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8011328:	f44f 7500 	mov.w	r5, #512	; 0x200
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 801132c:	2428      	movs	r4, #40	; 0x28
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
 801132e:	2107      	movs	r1, #7
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8011330:	6058      	str	r0, [r3, #4]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8011332:	60da      	str	r2, [r3, #12]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8011334:	4618      	mov	r0, r3
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8011336:	2200      	movs	r2, #0
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8011338:	611f      	str	r7, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 801133a:	615e      	str	r6, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 801133c:	619d      	str	r5, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 801133e:	61dc      	str	r4, [r3, #28]
  hspi2.Init.CRCPolynomial = 7;
 8011340:	62d9      	str	r1, [r3, #44]	; 0x2c
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8011342:	609a      	str	r2, [r3, #8]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011344:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8011346:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011348:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 801134a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 801134c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 801134e:	f7f4 fbf5 	bl	8005b3c <HAL_SPI_Init>
 8011352:	b900      	cbnz	r0, 8011356 <MX_SPI2_Init+0x42>
 8011354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    Error_Handler();
  }

}
 8011356:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Error_Handler();
 801135a:	f7ff bbed 	b.w	8010b38 <Error_Handler>
 801135e:	bf00      	nop
 8011360:	20005f48 	.word	0x20005f48
 8011364:	40003800 	.word	0x40003800

08011368 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8011368:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI2)
 801136a:	6802      	ldr	r2, [r0, #0]
 801136c:	4b24      	ldr	r3, [pc, #144]	; (8011400 <HAL_SPI_MspInit+0x98>)
{
 801136e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011370:	2400      	movs	r4, #0
  if(spiHandle->Instance==SPI2)
 8011372:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011374:	9404      	str	r4, [sp, #16]
 8011376:	9403      	str	r4, [sp, #12]
 8011378:	9405      	str	r4, [sp, #20]
 801137a:	9406      	str	r4, [sp, #24]
 801137c:	9407      	str	r4, [sp, #28]
  if(spiHandle->Instance==SPI2)
 801137e:	d001      	beq.n	8011384 <HAL_SPI_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8011380:	b009      	add	sp, #36	; 0x24
 8011382:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8011384:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8011388:	2505      	movs	r5, #5
    __HAL_RCC_SPI2_CLK_ENABLE();
 801138a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(LED_MOSI_GPIO_Port, &GPIO_InitStruct);
 801138c:	481d      	ldr	r0, [pc, #116]	; (8011404 <HAL_SPI_MspInit+0x9c>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 801138e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011392:	659a      	str	r2, [r3, #88]	; 0x58
 8011394:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011396:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 801139a:	9200      	str	r2, [sp, #0]
 801139c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801139e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80113a0:	f042 0204 	orr.w	r2, r2, #4
 80113a4:	64da      	str	r2, [r3, #76]	; 0x4c
 80113a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80113a8:	f002 0204 	and.w	r2, r2, #4
 80113ac:	9201      	str	r2, [sp, #4]
 80113ae:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80113b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80113b2:	f042 0202 	orr.w	r2, r2, #2
 80113b6:	64da      	str	r2, [r3, #76]	; 0x4c
 80113b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80113ba:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80113bc:	f003 0302 	and.w	r3, r3, #2
 80113c0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80113c2:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = LED_MOSI_Pin;
 80113c4:	2308      	movs	r3, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80113c6:	2603      	movs	r6, #3
    HAL_GPIO_Init(LED_MOSI_GPIO_Port, &GPIO_InitStruct);
 80113c8:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80113ca:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = LED_MOSI_Pin;
 80113cc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80113ce:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80113d0:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(LED_MOSI_GPIO_Port, &GPIO_InitStruct);
 80113d2:	f7f0 fdff 	bl	8001fd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED_SCK_Pin;
 80113d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(LED_SCK_GPIO_Port, &GPIO_InitStruct);
 80113da:	a903      	add	r1, sp, #12
 80113dc:	480a      	ldr	r0, [pc, #40]	; (8011408 <HAL_SPI_MspInit+0xa0>)
    GPIO_InitStruct.Pin = LED_SCK_Pin;
 80113de:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80113e0:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80113e2:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80113e4:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80113e6:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(LED_SCK_GPIO_Port, &GPIO_InitStruct);
 80113e8:	f7f0 fdf4 	bl	8001fd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80113ec:	4622      	mov	r2, r4
 80113ee:	4629      	mov	r1, r5
 80113f0:	2024      	movs	r0, #36	; 0x24
 80113f2:	f7f0 f9fd 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80113f6:	2024      	movs	r0, #36	; 0x24
 80113f8:	f7f0 fa30 	bl	800185c <HAL_NVIC_EnableIRQ>
}
 80113fc:	b009      	add	sp, #36	; 0x24
 80113fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011400:	40003800 	.word	0x40003800
 8011404:	48000800 	.word	0x48000800
 8011408:	48000400 	.word	0x48000400

0801140c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801140c:	4b0e      	ldr	r3, [pc, #56]	; (8011448 <HAL_MspInit+0x3c>)
{
 801140e:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011410:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8011412:	f042 0201 	orr.w	r2, r2, #1
 8011416:	661a      	str	r2, [r3, #96]	; 0x60
 8011418:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 801141a:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801141c:	f002 0201 	and.w	r2, r2, #1
 8011420:	9200      	str	r2, [sp, #0]
 8011422:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8011424:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011426:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 801142a:	659a      	str	r2, [r3, #88]	; 0x58
 801142c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801142e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011432:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8011434:	2200      	movs	r2, #0
 8011436:	210f      	movs	r1, #15
 8011438:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 801143c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 801143e:	f7f0 f9d7 	bl	80017f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8011442:	b003      	add	sp, #12
 8011444:	f85d fb04 	ldr.w	pc, [sp], #4
 8011448:	40021000 	.word	0x40021000

0801144c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801144c:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 801144e:	4601      	mov	r1, r0
{
 8011450:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8011452:	2200      	movs	r2, #0
 8011454:	201c      	movs	r0, #28
 8011456:	f7f0 f9cb 	bl	80017f0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 801145a:	201c      	movs	r0, #28
 801145c:	f7f0 f9fe 	bl	800185c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8011460:	4b15      	ldr	r3, [pc, #84]	; (80114b8 <HAL_InitTick+0x6c>)
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8011462:	4c16      	ldr	r4, [pc, #88]	; (80114bc <HAL_InitTick+0x70>)
  __HAL_RCC_TIM2_CLK_ENABLE();
 8011464:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011466:	f042 0201 	orr.w	r2, r2, #1
 801146a:	659a      	str	r2, [r3, #88]	; 0x58
 801146c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801146e:	f003 0301 	and.w	r3, r3, #1
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8011472:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM2_CLK_ENABLE();
 8011474:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8011476:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 8011478:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801147a:	f7f3 fac3 	bl	8004a04 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 801147e:	f7f3 fa9d 	bl	80049bc <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8011482:	4b0f      	ldr	r3, [pc, #60]	; (80114c0 <HAL_InitTick+0x74>)
 8011484:	fba3 2300 	umull	r2, r3, r3, r0
 8011488:	0c9b      	lsrs	r3, r3, #18
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
  htim2.Init.Prescaler = uwPrescalerValue;
  htim2.Init.ClockDivision = 0;
 801148a:	2200      	movs	r2, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 801148c:	3b01      	subs	r3, #1
  htim2.Instance = TIM2;
 801148e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  htim2.Init.Period = (1000000 / 1000) - 1;
 8011492:	f240 31e7 	movw	r1, #999	; 0x3e7
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8011496:	4620      	mov	r0, r4
  htim2.Init.Prescaler = uwPrescalerValue;
 8011498:	6063      	str	r3, [r4, #4]
  htim2.Instance = TIM2;
 801149a:	6025      	str	r5, [r4, #0]
  htim2.Init.Period = (1000000 / 1000) - 1;
 801149c:	60e1      	str	r1, [r4, #12]
  htim2.Init.ClockDivision = 0;
 801149e:	6122      	str	r2, [r4, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80114a0:	60a2      	str	r2, [r4, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80114a2:	f7f4 fd63 	bl	8005f6c <HAL_TIM_Base_Init>
 80114a6:	b110      	cbz	r0, 80114ae <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
  }
  
  /* Return function status */
  return HAL_ERROR;
 80114a8:	2001      	movs	r0, #1
}
 80114aa:	b009      	add	sp, #36	; 0x24
 80114ac:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim2);
 80114ae:	4620      	mov	r0, r4
 80114b0:	f7f4 fe10 	bl	80060d4 <HAL_TIM_Base_Start_IT>
}
 80114b4:	b009      	add	sp, #36	; 0x24
 80114b6:	bd30      	pop	{r4, r5, pc}
 80114b8:	40021000 	.word	0x40021000
 80114bc:	20005fac 	.word	0x20005fac
 80114c0:	431bde83 	.word	0x431bde83

080114c4 <NMI_Handler>:
 80114c4:	4770      	bx	lr
 80114c6:	bf00      	nop

080114c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80114c8:	e7fe      	b.n	80114c8 <HardFault_Handler>
 80114ca:	bf00      	nop

080114cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80114cc:	e7fe      	b.n	80114cc <MemManage_Handler>
 80114ce:	bf00      	nop

080114d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80114d0:	e7fe      	b.n	80114d0 <BusFault_Handler>
 80114d2:	bf00      	nop

080114d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80114d4:	e7fe      	b.n	80114d4 <UsageFault_Handler>
 80114d6:	bf00      	nop

080114d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80114d8:	4770      	bx	lr
 80114da:	bf00      	nop

080114dc <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80114dc:	4801      	ldr	r0, [pc, #4]	; (80114e4 <DMA1_Channel1_IRQHandler+0x8>)
 80114de:	f7f0 bd2b 	b.w	8001f38 <HAL_DMA_IRQHandler>
 80114e2:	bf00      	nop
 80114e4:	20005578 	.word	0x20005578

080114e8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80114e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80114ea:	2020      	movs	r0, #32
 80114ec:	f7f0 fe94 	bl	8002218 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80114f0:	f44f 7080 	mov.w	r0, #256	; 0x100
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80114f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80114f8:	f7f0 be8e 	b.w	8002218 <HAL_GPIO_EXTI_IRQHandler>

080114fc <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80114fc:	4801      	ldr	r0, [pc, #4]	; (8011504 <TIM2_IRQHandler+0x8>)
 80114fe:	f7f5 b991 	b.w	8006824 <HAL_TIM_IRQHandler>
 8011502:	bf00      	nop
 8011504:	20005fac 	.word	0x20005fac

08011508 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8011508:	4801      	ldr	r0, [pc, #4]	; (8011510 <TIM3_IRQHandler+0x8>)
 801150a:	f7f5 b98b 	b.w	8006824 <HAL_TIM_IRQHandler>
 801150e:	bf00      	nop
 8011510:	2000606c 	.word	0x2000606c

08011514 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8011514:	4801      	ldr	r0, [pc, #4]	; (801151c <TIM4_IRQHandler+0x8>)
 8011516:	f7f5 b985 	b.w	8006824 <HAL_TIM_IRQHandler>
 801151a:	bf00      	nop
 801151c:	20005fec 	.word	0x20005fec

08011520 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8011520:	4801      	ldr	r0, [pc, #4]	; (8011528 <I2C1_EV_IRQHandler+0x8>)
 8011522:	f7f1 bd55 	b.w	8002fd0 <HAL_I2C_EV_IRQHandler>
 8011526:	bf00      	nop
 8011528:	20005a5c 	.word	0x20005a5c

0801152c <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 801152c:	4801      	ldr	r0, [pc, #4]	; (8011534 <I2C2_EV_IRQHandler+0x8>)
 801152e:	f7f1 bd4f 	b.w	8002fd0 <HAL_I2C_EV_IRQHandler>
 8011532:	bf00      	nop
 8011534:	20005aa8 	.word	0x20005aa8

08011538 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8011538:	4801      	ldr	r0, [pc, #4]	; (8011540 <SPI2_IRQHandler+0x8>)
 801153a:	f7f4 bc8f 	b.w	8005e5c <HAL_SPI_IRQHandler>
 801153e:	bf00      	nop
 8011540:	20005f48 	.word	0x20005f48

08011544 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8011544:	4801      	ldr	r0, [pc, #4]	; (801154c <USART1_IRQHandler+0x8>)
 8011546:	f7f5 baa5 	b.w	8006a94 <HAL_UART_IRQHandler>
 801154a:	bf00      	nop
 801154c:	20006230 	.word	0x20006230

08011550 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8011550:	4801      	ldr	r0, [pc, #4]	; (8011558 <USART3_IRQHandler+0x8>)
 8011552:	f7f5 ba9f 	b.w	8006a94 <HAL_UART_IRQHandler>
 8011556:	bf00      	nop
 8011558:	200061ac 	.word	0x200061ac

0801155c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 801155c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 801155e:	4804      	ldr	r0, [pc, #16]	; (8011570 <TIM6_DAC_IRQHandler+0x14>)
 8011560:	f7f5 f960 	bl	8006824 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8011564:	4803      	ldr	r0, [pc, #12]	; (8011574 <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8011566:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DAC_IRQHandler(&hdac1);
 801156a:	f7f0 ba8b 	b.w	8001a84 <HAL_DAC_IRQHandler>
 801156e:	bf00      	nop
 8011570:	200060ac 	.word	0x200060ac
 8011574:	20005564 	.word	0x20005564

08011578 <COMP_IRQHandler>:
void COMP_IRQHandler(void)
{
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8011578:	4801      	ldr	r0, [pc, #4]	; (8011580 <COMP_IRQHandler+0x8>)
 801157a:	f7f0 b903 	b.w	8001784 <HAL_COMP_IRQHandler>
 801157e:	bf00      	nop
 8011580:	20005538 	.word	0x20005538

08011584 <I2C3_EV_IRQHandler>:
void I2C3_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8011584:	4801      	ldr	r0, [pc, #4]	; (801158c <I2C3_EV_IRQHandler+0x8>)
 8011586:	f7f1 bd23 	b.w	8002fd0 <HAL_I2C_EV_IRQHandler>
 801158a:	bf00      	nop
 801158c:	20005a10 	.word	0x20005a10

08011590 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8011590:	4911      	ldr	r1, [pc, #68]	; (80115d8 <SystemInit+0x48>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8011592:	4b12      	ldr	r3, [pc, #72]	; (80115dc <SystemInit+0x4c>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8011594:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8011598:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 801159c:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801159e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_MSION;
 80115a2:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80115a4:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80115a6:	f042 0201 	orr.w	r2, r2, #1
 80115aa:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80115ac:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80115ae:	681a      	ldr	r2, [r3, #0]
 80115b0:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80115b4:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80115b8:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  RCC->CR &= 0xEAF6FFFFU;
 80115bc:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x00001000U;
 80115be:	60dc      	str	r4, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80115c0:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80115c2:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= 0xFFFBFFFFU;
 80115c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80115ca:	601a      	str	r2, [r3, #0]
  RCC->CIER = 0x00000000U;
 80115cc:	6198      	str	r0, [r3, #24]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80115ce:	608c      	str	r4, [r1, #8]
#endif
}
 80115d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80115d4:	4770      	bx	lr
 80115d6:	bf00      	nop
 80115d8:	e000ed00 	.word	0xe000ed00
 80115dc:	40021000 	.word	0x40021000

080115e0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80115e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80115e2:	2400      	movs	r4, #0
{
 80115e4:	b0a1      	sub	sp, #132	; 0x84
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  htim1.Instance = TIM1;
 80115e6:	4d4c      	ldr	r5, [pc, #304]	; (8011718 <MX_TIM1_Init+0x138>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80115e8:	9406      	str	r4, [sp, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80115ea:	4621      	mov	r1, r4
 80115ec:	222c      	movs	r2, #44	; 0x2c
 80115ee:	a815      	add	r0, sp, #84	; 0x54
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80115f0:	9405      	str	r4, [sp, #20]
 80115f2:	9407      	str	r4, [sp, #28]
 80115f4:	9408      	str	r4, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80115f6:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80115f8:	940e      	str	r4, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80115fa:	9403      	str	r4, [sp, #12]
 80115fc:	9404      	str	r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80115fe:	940f      	str	r4, [sp, #60]	; 0x3c
 8011600:	9410      	str	r4, [sp, #64]	; 0x40
 8011602:	9411      	str	r4, [sp, #68]	; 0x44
 8011604:	9412      	str	r4, [sp, #72]	; 0x48
 8011606:	9413      	str	r4, [sp, #76]	; 0x4c
 8011608:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 801160a:	f003 ff4a 	bl	80154a2 <memset>
  htim1.Instance = TIM1;
 801160e:	4943      	ldr	r1, [pc, #268]	; (801171c <MX_TIM1_Init+0x13c>)
  htim1.Init.Prescaler = 7;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011610:	60ac      	str	r4, [r5, #8]
  htim1.Init.Prescaler = 7;
 8011612:	2207      	movs	r2, #7
  htim1.Init.Period = 99;
 8011614:	2363      	movs	r3, #99	; 0x63
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8011616:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011618:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 801161a:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801161c:	61ac      	str	r4, [r5, #24]
  htim1.Init.Prescaler = 7;
 801161e:	e885 0006 	stmia.w	r5, {r1, r2}
  htim1.Init.Period = 99;
 8011622:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8011624:	f7f4 fca2 	bl	8005f6c <HAL_TIM_Base_Init>
 8011628:	2800      	cmp	r0, #0
 801162a:	d157      	bne.n	80116dc <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801162c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8011630:	a905      	add	r1, sp, #20
 8011632:	4839      	ldr	r0, [pc, #228]	; (8011718 <MX_TIM1_Init+0x138>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8011634:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8011636:	f7f5 f837 	bl	80066a8 <HAL_TIM_ConfigClockSource>
 801163a:	2800      	cmp	r0, #0
 801163c:	d14b      	bne.n	80116d6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 801163e:	4836      	ldr	r0, [pc, #216]	; (8011718 <MX_TIM1_Init+0x138>)
 8011640:	f7f4 fd78 	bl	8006134 <HAL_TIM_PWM_Init>
 8011644:	2800      	cmp	r0, #0
 8011646:	d143      	bne.n	80116d0 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011648:	2300      	movs	r3, #0
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 801164a:	a902      	add	r1, sp, #8
 801164c:	4832      	ldr	r0, [pc, #200]	; (8011718 <MX_TIM1_Init+0x138>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801164e:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8011650:	9303      	str	r3, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011652:	9304      	str	r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8011654:	f7f5 f99e 	bl	8006994 <HAL_TIMEx_MasterConfigSynchronization>
 8011658:	2800      	cmp	r0, #0
 801165a:	d136      	bne.n	80116ca <MX_TIM1_Init+0xea>
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 10;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 801165c:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801165e:	2760      	movs	r7, #96	; 0x60
  sConfigOC.Pulse = 10;
 8011660:	260a      	movs	r6, #10
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8011662:	2402      	movs	r4, #2
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8011664:	a90e      	add	r1, sp, #56	; 0x38
 8011666:	461a      	mov	r2, r3
 8011668:	482b      	ldr	r0, [pc, #172]	; (8011718 <MX_TIM1_Init+0x138>)
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 801166a:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801166c:	9312      	str	r3, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801166e:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8011670:	9314      	str	r3, [sp, #80]	; 0x50
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8011672:	970e      	str	r7, [sp, #56]	; 0x38
  sConfigOC.Pulse = 10;
 8011674:	960f      	str	r6, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8011676:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8011678:	f7f4 fe34 	bl	80062e4 <HAL_TIM_PWM_ConfigChannel>
 801167c:	bb10      	cbnz	r0, 80116c4 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 801167e:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8011680:	f44f 5400 	mov.w	r4, #8192	; 0x2000
  sBreakDeadTimeConfig.BreakFilter = 0;
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8011684:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  sBreakDeadTimeConfig.Break2Filter = 0;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8011688:	a915      	add	r1, sp, #84	; 0x54
 801168a:	4823      	ldr	r0, [pc, #140]	; (8011718 <MX_TIM1_Init+0x138>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 801168c:	9315      	str	r3, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 801168e:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8011690:	9317      	str	r3, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.DeadTime = 0;
 8011692:	9318      	str	r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8011694:	9319      	str	r3, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.BreakFilter = 0;
 8011696:	931b      	str	r3, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8011698:	931c      	str	r3, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.Break2Filter = 0;
 801169a:	931e      	str	r3, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 801169c:	931f      	str	r3, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801169e:	941a      	str	r4, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80116a0:	921d      	str	r2, [sp, #116]	; 0x74
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80116a2:	f7f5 f9a7 	bl	80069f4 <HAL_TIMEx_ConfigBreakDeadTime>
 80116a6:	b108      	cbz	r0, 80116ac <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80116a8:	f7ff fa46 	bl	8010b38 <Error_Handler>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 80116ac:	6829      	ldr	r1, [r5, #0]
 80116ae:	4a1b      	ldr	r2, [pc, #108]	; (801171c <MX_TIM1_Init+0x13c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80116b0:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM1)
 80116b2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80116b4:	930a      	str	r3, [sp, #40]	; 0x28
 80116b6:	9309      	str	r3, [sp, #36]	; 0x24
 80116b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80116ba:	930c      	str	r3, [sp, #48]	; 0x30
 80116bc:	930d      	str	r3, [sp, #52]	; 0x34
  if(timHandle->Instance==TIM1)
 80116be:	d010      	beq.n	80116e2 <MX_TIM1_Init+0x102>
}
 80116c0:	b021      	add	sp, #132	; 0x84
 80116c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 80116c4:	f7ff fa38 	bl	8010b38 <Error_Handler>
 80116c8:	e7d9      	b.n	801167e <MX_TIM1_Init+0x9e>
    Error_Handler();
 80116ca:	f7ff fa35 	bl	8010b38 <Error_Handler>
 80116ce:	e7c5      	b.n	801165c <MX_TIM1_Init+0x7c>
    Error_Handler();
 80116d0:	f7ff fa32 	bl	8010b38 <Error_Handler>
 80116d4:	e7b8      	b.n	8011648 <MX_TIM1_Init+0x68>
    Error_Handler();
 80116d6:	f7ff fa2f 	bl	8010b38 <Error_Handler>
 80116da:	e7b0      	b.n	801163e <MX_TIM1_Init+0x5e>
    Error_Handler();
 80116dc:	f7ff fa2c 	bl	8010b38 <Error_Handler>
 80116e0:	e7a4      	b.n	801162c <MX_TIM1_Init+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80116e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80116e6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = LED_PWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 80116ea:	480d      	ldr	r0, [pc, #52]	; (8011720 <MX_TIM1_Init+0x140>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80116ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80116ee:	f042 0210 	orr.w	r2, r2, #16
 80116f2:	64da      	str	r2, [r3, #76]	; 0x4c
 80116f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80116f6:	f003 0310 	and.w	r3, r3, #16
 80116fa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80116fc:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80116fe:	2301      	movs	r3, #1
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 8011700:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 8011702:	f44f 7400 	mov.w	r4, #512	; 0x200
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8011706:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 8011708:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801170a:	920a      	str	r2, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 801170c:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 801170e:	f7f0 fc61 	bl	8001fd4 <HAL_GPIO_Init>
}
 8011712:	b021      	add	sp, #132	; 0x84
 8011714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011716:	bf00      	nop
 8011718:	200060ec 	.word	0x200060ec
 801171c:	40012c00 	.word	0x40012c00
 8011720:	48001000 	.word	0x48001000

08011724 <MX_TIM3_Init>:
{
 8011724:	b510      	push	{r4, lr}
  htim3.Instance = TIM3;
 8011726:	4a19      	ldr	r2, [pc, #100]	; (801178c <MX_TIM3_Init+0x68>)
 8011728:	4b19      	ldr	r3, [pc, #100]	; (8011790 <MX_TIM3_Init+0x6c>)
 801172a:	6013      	str	r3, [r2, #0]
{
 801172c:	b088      	sub	sp, #32
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801172e:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 799;
 8011730:	f240 341f 	movw	r4, #799	; 0x31f
  htim3.Init.Period = 9;
 8011734:	2109      	movs	r1, #9
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8011736:	4610      	mov	r0, r2
  htim3.Init.Prescaler = 799;
 8011738:	6054      	str	r4, [r2, #4]
  htim3.Init.Period = 9;
 801173a:	60d1      	str	r1, [r2, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 801173c:	6093      	str	r3, [r2, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801173e:	9304      	str	r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011740:	9301      	str	r3, [sp, #4]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011742:	6113      	str	r3, [r2, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011744:	6193      	str	r3, [r2, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8011746:	9305      	str	r3, [sp, #20]
 8011748:	9306      	str	r3, [sp, #24]
 801174a:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801174c:	9302      	str	r3, [sp, #8]
 801174e:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8011750:	f7f4 fc0c 	bl	8005f6c <HAL_TIM_Base_Init>
 8011754:	b9b0      	cbnz	r0, 8011784 <MX_TIM3_Init+0x60>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8011756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 801175a:	a904      	add	r1, sp, #16
 801175c:	480b      	ldr	r0, [pc, #44]	; (801178c <MX_TIM3_Init+0x68>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801175e:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8011760:	f7f4 ffa2 	bl	80066a8 <HAL_TIM_ConfigClockSource>
 8011764:	b958      	cbnz	r0, 801177e <MX_TIM3_Init+0x5a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011766:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8011768:	a901      	add	r1, sp, #4
 801176a:	4808      	ldr	r0, [pc, #32]	; (801178c <MX_TIM3_Init+0x68>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801176c:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801176e:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8011770:	f7f5 f910 	bl	8006994 <HAL_TIMEx_MasterConfigSynchronization>
 8011774:	b108      	cbz	r0, 801177a <MX_TIM3_Init+0x56>
    Error_Handler();
 8011776:	f7ff f9df 	bl	8010b38 <Error_Handler>
}
 801177a:	b008      	add	sp, #32
 801177c:	bd10      	pop	{r4, pc}
    Error_Handler();
 801177e:	f7ff f9db 	bl	8010b38 <Error_Handler>
 8011782:	e7f0      	b.n	8011766 <MX_TIM3_Init+0x42>
    Error_Handler();
 8011784:	f7ff f9d8 	bl	8010b38 <Error_Handler>
 8011788:	e7e5      	b.n	8011756 <MX_TIM3_Init+0x32>
 801178a:	bf00      	nop
 801178c:	2000606c 	.word	0x2000606c
 8011790:	40000400 	.word	0x40000400

08011794 <MX_TIM4_Init>:
{
 8011794:	b510      	push	{r4, lr}
  htim4.Instance = TIM4;
 8011796:	4a19      	ldr	r2, [pc, #100]	; (80117fc <MX_TIM4_Init+0x68>)
 8011798:	4b19      	ldr	r3, [pc, #100]	; (8011800 <MX_TIM4_Init+0x6c>)
 801179a:	6013      	str	r3, [r2, #0]
{
 801179c:	b088      	sub	sp, #32
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801179e:	2300      	movs	r3, #0
  htim4.Init.Prescaler = 7999;
 80117a0:	f641 743f 	movw	r4, #7999	; 0x1f3f
  htim4.Init.Period = 6000;
 80117a4:	f241 7170 	movw	r1, #6000	; 0x1770
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80117a8:	4610      	mov	r0, r2
  htim4.Init.Prescaler = 7999;
 80117aa:	6054      	str	r4, [r2, #4]
  htim4.Init.Period = 6000;
 80117ac:	60d1      	str	r1, [r2, #12]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80117ae:	6093      	str	r3, [r2, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80117b0:	9304      	str	r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80117b2:	9301      	str	r3, [sp, #4]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80117b4:	6113      	str	r3, [r2, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80117b6:	6193      	str	r3, [r2, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80117b8:	9305      	str	r3, [sp, #20]
 80117ba:	9306      	str	r3, [sp, #24]
 80117bc:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80117be:	9302      	str	r3, [sp, #8]
 80117c0:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80117c2:	f7f4 fbd3 	bl	8005f6c <HAL_TIM_Base_Init>
 80117c6:	b9b0      	cbnz	r0, 80117f6 <MX_TIM4_Init+0x62>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80117c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80117cc:	a904      	add	r1, sp, #16
 80117ce:	480b      	ldr	r0, [pc, #44]	; (80117fc <MX_TIM4_Init+0x68>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80117d0:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80117d2:	f7f4 ff69 	bl	80066a8 <HAL_TIM_ConfigClockSource>
 80117d6:	b958      	cbnz	r0, 80117f0 <MX_TIM4_Init+0x5c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80117d8:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80117da:	a901      	add	r1, sp, #4
 80117dc:	4807      	ldr	r0, [pc, #28]	; (80117fc <MX_TIM4_Init+0x68>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80117de:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80117e0:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80117e2:	f7f5 f8d7 	bl	8006994 <HAL_TIMEx_MasterConfigSynchronization>
 80117e6:	b108      	cbz	r0, 80117ec <MX_TIM4_Init+0x58>
    Error_Handler();
 80117e8:	f7ff f9a6 	bl	8010b38 <Error_Handler>
}
 80117ec:	b008      	add	sp, #32
 80117ee:	bd10      	pop	{r4, pc}
    Error_Handler();
 80117f0:	f7ff f9a2 	bl	8010b38 <Error_Handler>
 80117f4:	e7f0      	b.n	80117d8 <MX_TIM4_Init+0x44>
    Error_Handler();
 80117f6:	f7ff f99f 	bl	8010b38 <Error_Handler>
 80117fa:	e7e5      	b.n	80117c8 <MX_TIM4_Init+0x34>
 80117fc:	20005fec 	.word	0x20005fec
 8011800:	40000800 	.word	0x40000800

08011804 <MX_TIM6_Init>:
{
 8011804:	b510      	push	{r4, lr}
  htim6.Instance = TIM6;
 8011806:	4b11      	ldr	r3, [pc, #68]	; (801184c <MX_TIM6_Init+0x48>)
 8011808:	4a11      	ldr	r2, [pc, #68]	; (8011850 <MX_TIM6_Init+0x4c>)
 801180a:	601a      	str	r2, [r3, #0]
{
 801180c:	b084      	sub	sp, #16
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801180e:	2200      	movs	r2, #0
  htim6.Init.Prescaler = 9;
 8011810:	2409      	movs	r4, #9
  htim6.Init.Period = 199;
 8011812:	21c7      	movs	r1, #199	; 0xc7
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8011814:	4618      	mov	r0, r3
  htim6.Init.Prescaler = 9;
 8011816:	605c      	str	r4, [r3, #4]
  htim6.Init.Period = 199;
 8011818:	60d9      	str	r1, [r3, #12]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 801181a:	609a      	str	r2, [r3, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801181c:	9201      	str	r2, [sp, #4]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801181e:	619a      	str	r2, [r3, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011820:	9202      	str	r2, [sp, #8]
 8011822:	9203      	str	r2, [sp, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8011824:	f7f4 fba2 	bl	8005f6c <HAL_TIM_Base_Init>
 8011828:	b960      	cbnz	r0, 8011844 <MX_TIM6_Init+0x40>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801182a:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801182c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 801182e:	a901      	add	r1, sp, #4
 8011830:	4806      	ldr	r0, [pc, #24]	; (801184c <MX_TIM6_Init+0x48>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8011832:	9201      	str	r2, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011834:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8011836:	f7f5 f8ad 	bl	8006994 <HAL_TIMEx_MasterConfigSynchronization>
 801183a:	b108      	cbz	r0, 8011840 <MX_TIM6_Init+0x3c>
    Error_Handler();
 801183c:	f7ff f97c 	bl	8010b38 <Error_Handler>
}
 8011840:	b004      	add	sp, #16
 8011842:	bd10      	pop	{r4, pc}
    Error_Handler();
 8011844:	f7ff f978 	bl	8010b38 <Error_Handler>
 8011848:	e7ef      	b.n	801182a <MX_TIM6_Init+0x26>
 801184a:	bf00      	nop
 801184c:	200060ac 	.word	0x200060ac
 8011850:	40001000 	.word	0x40001000

08011854 <MX_TIM7_Init>:
{
 8011854:	b500      	push	{lr}
  htim7.Instance = TIM7;
 8011856:	4a10      	ldr	r2, [pc, #64]	; (8011898 <MX_TIM7_Init+0x44>)
 8011858:	4b10      	ldr	r3, [pc, #64]	; (801189c <MX_TIM7_Init+0x48>)
 801185a:	6013      	str	r3, [r2, #0]
{
 801185c:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801185e:	2300      	movs	r3, #0
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8011860:	4610      	mov	r0, r2
  htim7.Init.Prescaler = 0;
 8011862:	6053      	str	r3, [r2, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011864:	9301      	str	r3, [sp, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011866:	6093      	str	r3, [r2, #8]
  htim7.Init.Period = 0;
 8011868:	60d3      	str	r3, [r2, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801186a:	6193      	str	r3, [r2, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801186c:	9302      	str	r3, [sp, #8]
 801186e:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8011870:	f7f4 fb7c 	bl	8005f6c <HAL_TIM_Base_Init>
 8011874:	b960      	cbnz	r0, 8011890 <MX_TIM7_Init+0x3c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011876:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8011878:	a901      	add	r1, sp, #4
 801187a:	4807      	ldr	r0, [pc, #28]	; (8011898 <MX_TIM7_Init+0x44>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801187c:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801187e:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8011880:	f7f5 f888 	bl	8006994 <HAL_TIMEx_MasterConfigSynchronization>
 8011884:	b108      	cbz	r0, 801188a <MX_TIM7_Init+0x36>
    Error_Handler();
 8011886:	f7ff f957 	bl	8010b38 <Error_Handler>
}
 801188a:	b005      	add	sp, #20
 801188c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8011890:	f7ff f952 	bl	8010b38 <Error_Handler>
 8011894:	e7ef      	b.n	8011876 <MX_TIM7_Init+0x22>
 8011896:	bf00      	nop
 8011898:	2000616c 	.word	0x2000616c
 801189c:	40001400 	.word	0x40001400

080118a0 <MX_TIM16_Init>:
  htim16.Instance = TIM16;
 80118a0:	4b0a      	ldr	r3, [pc, #40]	; (80118cc <MX_TIM16_Init+0x2c>)
 80118a2:	4a0b      	ldr	r2, [pc, #44]	; (80118d0 <MX_TIM16_Init+0x30>)
{
 80118a4:	b510      	push	{r4, lr}
  htim16.Init.Period = 49;
 80118a6:	2131      	movs	r1, #49	; 0x31
  htim16.Instance = TIM16;
 80118a8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7;
 80118aa:	2407      	movs	r4, #7
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80118ac:	2200      	movs	r2, #0
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80118ae:	4618      	mov	r0, r3
  htim16.Init.Prescaler = 7;
 80118b0:	605c      	str	r4, [r3, #4]
  htim16.Init.Period = 49;
 80118b2:	60d9      	str	r1, [r3, #12]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80118b4:	609a      	str	r2, [r3, #8]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80118b6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80118b8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80118ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80118bc:	f7f4 fb56 	bl	8005f6c <HAL_TIM_Base_Init>
 80118c0:	b900      	cbnz	r0, 80118c4 <MX_TIM16_Init+0x24>
 80118c2:	bd10      	pop	{r4, pc}
}
 80118c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80118c8:	f7ff b936 	b.w	8010b38 <Error_Handler>
 80118cc:	2000612c 	.word	0x2000612c
 80118d0:	40014400 	.word	0x40014400

080118d4 <MX_TIM17_Init>:
  htim17.Instance = TIM17;
 80118d4:	4b0a      	ldr	r3, [pc, #40]	; (8011900 <MX_TIM17_Init+0x2c>)
 80118d6:	4a0b      	ldr	r2, [pc, #44]	; (8011904 <MX_TIM17_Init+0x30>)
{
 80118d8:	b510      	push	{r4, lr}
  htim17.Init.Period = 49;
 80118da:	2131      	movs	r1, #49	; 0x31
  htim17.Instance = TIM17;
 80118dc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 79;
 80118de:	244f      	movs	r4, #79	; 0x4f
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80118e0:	2200      	movs	r2, #0
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80118e2:	4618      	mov	r0, r3
  htim17.Init.Prescaler = 79;
 80118e4:	605c      	str	r4, [r3, #4]
  htim17.Init.Period = 49;
 80118e6:	60d9      	str	r1, [r3, #12]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80118e8:	609a      	str	r2, [r3, #8]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80118ea:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80118ec:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80118ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80118f0:	f7f4 fb3c 	bl	8005f6c <HAL_TIM_Base_Init>
 80118f4:	b900      	cbnz	r0, 80118f8 <MX_TIM17_Init+0x24>
 80118f6:	bd10      	pop	{r4, pc}
}
 80118f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80118fc:	f7ff b91c 	b.w	8010b38 <Error_Handler>
 8011900:	2000602c 	.word	0x2000602c
 8011904:	40014800 	.word	0x40014800

08011908 <HAL_TIM_Base_MspInit>:
{
 8011908:	b500      	push	{lr}
  if(tim_baseHandle->Instance==TIM1)
 801190a:	6803      	ldr	r3, [r0, #0]
 801190c:	4a40      	ldr	r2, [pc, #256]	; (8011a10 <HAL_TIM_Base_MspInit+0x108>)
 801190e:	4293      	cmp	r3, r2
{
 8011910:	b089      	sub	sp, #36	; 0x24
  if(tim_baseHandle->Instance==TIM1)
 8011912:	d021      	beq.n	8011958 <HAL_TIM_Base_MspInit+0x50>
  else if(tim_baseHandle->Instance==TIM3)
 8011914:	4a3f      	ldr	r2, [pc, #252]	; (8011a14 <HAL_TIM_Base_MspInit+0x10c>)
 8011916:	4293      	cmp	r3, r2
 8011918:	d041      	beq.n	801199e <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM4)
 801191a:	4a3f      	ldr	r2, [pc, #252]	; (8011a18 <HAL_TIM_Base_MspInit+0x110>)
 801191c:	4293      	cmp	r3, r2
 801191e:	d051      	beq.n	80119c4 <HAL_TIM_Base_MspInit+0xbc>
  else if(tim_baseHandle->Instance==TIM6)
 8011920:	4a3e      	ldr	r2, [pc, #248]	; (8011a1c <HAL_TIM_Base_MspInit+0x114>)
 8011922:	4293      	cmp	r3, r2
 8011924:	d061      	beq.n	80119ea <HAL_TIM_Base_MspInit+0xe2>
  else if(tim_baseHandle->Instance==TIM7)
 8011926:	4a3e      	ldr	r2, [pc, #248]	; (8011a20 <HAL_TIM_Base_MspInit+0x118>)
 8011928:	4293      	cmp	r3, r2
 801192a:	d022      	beq.n	8011972 <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM16)
 801192c:	4a3d      	ldr	r2, [pc, #244]	; (8011a24 <HAL_TIM_Base_MspInit+0x11c>)
 801192e:	4293      	cmp	r3, r2
 8011930:	d02a      	beq.n	8011988 <HAL_TIM_Base_MspInit+0x80>
  else if(tim_baseHandle->Instance==TIM17)
 8011932:	4a3d      	ldr	r2, [pc, #244]	; (8011a28 <HAL_TIM_Base_MspInit+0x120>)
 8011934:	4293      	cmp	r3, r2
 8011936:	d002      	beq.n	801193e <HAL_TIM_Base_MspInit+0x36>
}
 8011938:	b009      	add	sp, #36	; 0x24
 801193a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM17_CLK_ENABLE();
 801193e:	4b3b      	ldr	r3, [pc, #236]	; (8011a2c <HAL_TIM_Base_MspInit+0x124>)
 8011940:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8011942:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8011946:	661a      	str	r2, [r3, #96]	; 0x60
 8011948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801194a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801194e:	9307      	str	r3, [sp, #28]
 8011950:	9b07      	ldr	r3, [sp, #28]
}
 8011952:	b009      	add	sp, #36	; 0x24
 8011954:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8011958:	4b34      	ldr	r3, [pc, #208]	; (8011a2c <HAL_TIM_Base_MspInit+0x124>)
 801195a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801195c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011960:	661a      	str	r2, [r3, #96]	; 0x60
 8011962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011968:	9301      	str	r3, [sp, #4]
 801196a:	9b01      	ldr	r3, [sp, #4]
}
 801196c:	b009      	add	sp, #36	; 0x24
 801196e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM7_CLK_ENABLE();
 8011972:	4b2e      	ldr	r3, [pc, #184]	; (8011a2c <HAL_TIM_Base_MspInit+0x124>)
 8011974:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011976:	f042 0220 	orr.w	r2, r2, #32
 801197a:	659a      	str	r2, [r3, #88]	; 0x58
 801197c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801197e:	f003 0320 	and.w	r3, r3, #32
 8011982:	9305      	str	r3, [sp, #20]
 8011984:	9b05      	ldr	r3, [sp, #20]
 8011986:	e7d7      	b.n	8011938 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8011988:	4b28      	ldr	r3, [pc, #160]	; (8011a2c <HAL_TIM_Base_MspInit+0x124>)
 801198a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801198c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8011990:	661a      	str	r2, [r3, #96]	; 0x60
 8011992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011998:	9306      	str	r3, [sp, #24]
 801199a:	9b06      	ldr	r3, [sp, #24]
 801199c:	e7cc      	b.n	8011938 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM3_CLK_ENABLE();
 801199e:	4b23      	ldr	r3, [pc, #140]	; (8011a2c <HAL_TIM_Base_MspInit+0x124>)
 80119a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80119a2:	f042 0202 	orr.w	r2, r2, #2
 80119a6:	659a      	str	r2, [r3, #88]	; 0x58
 80119a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80119aa:	f003 0302 	and.w	r3, r3, #2
 80119ae:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80119b0:	2200      	movs	r2, #0
 80119b2:	2105      	movs	r1, #5
 80119b4:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 80119b6:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80119b8:	f7ef ff1a 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80119bc:	201d      	movs	r0, #29
 80119be:	f7ef ff4d 	bl	800185c <HAL_NVIC_EnableIRQ>
 80119c2:	e7b9      	b.n	8011938 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80119c4:	4b19      	ldr	r3, [pc, #100]	; (8011a2c <HAL_TIM_Base_MspInit+0x124>)
 80119c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80119c8:	f042 0204 	orr.w	r2, r2, #4
 80119cc:	659a      	str	r2, [r3, #88]	; 0x58
 80119ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80119d0:	f003 0304 	and.w	r3, r3, #4
 80119d4:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80119d6:	2200      	movs	r2, #0
 80119d8:	2105      	movs	r1, #5
 80119da:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 80119dc:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80119de:	f7ef ff07 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80119e2:	201e      	movs	r0, #30
 80119e4:	f7ef ff3a 	bl	800185c <HAL_NVIC_EnableIRQ>
 80119e8:	e7a6      	b.n	8011938 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80119ea:	4b10      	ldr	r3, [pc, #64]	; (8011a2c <HAL_TIM_Base_MspInit+0x124>)
 80119ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80119ee:	f042 0210 	orr.w	r2, r2, #16
 80119f2:	659a      	str	r2, [r3, #88]	; 0x58
 80119f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80119f6:	f003 0310 	and.w	r3, r3, #16
 80119fa:	9304      	str	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80119fc:	2200      	movs	r2, #0
 80119fe:	2105      	movs	r1, #5
 8011a00:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 8011a02:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8011a04:	f7ef fef4 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8011a08:	2036      	movs	r0, #54	; 0x36
 8011a0a:	f7ef ff27 	bl	800185c <HAL_NVIC_EnableIRQ>
 8011a0e:	e793      	b.n	8011938 <HAL_TIM_Base_MspInit+0x30>
 8011a10:	40012c00 	.word	0x40012c00
 8011a14:	40000400 	.word	0x40000400
 8011a18:	40000800 	.word	0x40000800
 8011a1c:	40001000 	.word	0x40001000
 8011a20:	40001400 	.word	0x40001400
 8011a24:	40014400 	.word	0x40014400
 8011a28:	40014800 	.word	0x40014800
 8011a2c:	40021000 	.word	0x40021000

08011a30 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8011a30:	4b18      	ldr	r3, [pc, #96]	; (8011a94 <MX_USART1_UART_Init+0x64>)
 8011a32:	4a19      	ldr	r2, [pc, #100]	; (8011a98 <MX_USART1_UART_Init+0x68>)
{
 8011a34:	b510      	push	{r4, lr}
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8011a36:	210c      	movs	r1, #12
  huart1.Instance = USART1;
 8011a38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8011a3a:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8011a3e:	2200      	movs	r2, #0
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8011a40:	4618      	mov	r0, r3
  huart1.Init.BaudRate = 115200;
 8011a42:	605c      	str	r4, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8011a44:	6159      	str	r1, [r3, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8011a46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8011a48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8011a4a:	611a      	str	r2, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011a4c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8011a4e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8011a50:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8011a52:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8011a54:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8011a56:	f7f5 f963 	bl	8006d20 <HAL_UART_Init>
 8011a5a:	b9c0      	cbnz	r0, 8011a8e <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8011a5c:	2100      	movs	r1, #0
 8011a5e:	480d      	ldr	r0, [pc, #52]	; (8011a94 <MX_USART1_UART_Init+0x64>)
 8011a60:	f7f5 ff66 	bl	8007930 <HAL_UARTEx_SetTxFifoThreshold>
 8011a64:	b980      	cbnz	r0, 8011a88 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8011a66:	2100      	movs	r1, #0
 8011a68:	480a      	ldr	r0, [pc, #40]	; (8011a94 <MX_USART1_UART_Init+0x64>)
 8011a6a:	f7f5 ffc3 	bl	80079f4 <HAL_UARTEx_SetRxFifoThreshold>
 8011a6e:	b940      	cbnz	r0, 8011a82 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8011a70:	4808      	ldr	r0, [pc, #32]	; (8011a94 <MX_USART1_UART_Init+0x64>)
 8011a72:	f7f5 ff3f 	bl	80078f4 <HAL_UARTEx_DisableFifoMode>
 8011a76:	b900      	cbnz	r0, 8011a7a <MX_USART1_UART_Init+0x4a>
 8011a78:	bd10      	pop	{r4, pc}
  {
    Error_Handler();
  }

}
 8011a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8011a7e:	f7ff b85b 	b.w	8010b38 <Error_Handler>
    Error_Handler();
 8011a82:	f7ff f859 	bl	8010b38 <Error_Handler>
 8011a86:	e7f3      	b.n	8011a70 <MX_USART1_UART_Init+0x40>
    Error_Handler();
 8011a88:	f7ff f856 	bl	8010b38 <Error_Handler>
 8011a8c:	e7eb      	b.n	8011a66 <MX_USART1_UART_Init+0x36>
    Error_Handler();
 8011a8e:	f7ff f853 	bl	8010b38 <Error_Handler>
 8011a92:	e7e3      	b.n	8011a5c <MX_USART1_UART_Init+0x2c>
 8011a94:	20006230 	.word	0x20006230
 8011a98:	40013800 	.word	0x40013800

08011a9c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{

  huart3.Instance = USART3;
 8011a9c:	4b18      	ldr	r3, [pc, #96]	; (8011b00 <MX_USART3_UART_Init+0x64>)
 8011a9e:	4a19      	ldr	r2, [pc, #100]	; (8011b04 <MX_USART3_UART_Init+0x68>)
{
 8011aa0:	b510      	push	{r4, lr}
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8011aa2:	210c      	movs	r1, #12
  huart3.Instance = USART3;
 8011aa4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8011aa6:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8011aaa:	2200      	movs	r2, #0
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8011aac:	4618      	mov	r0, r3
  huart3.Init.BaudRate = 115200;
 8011aae:	605c      	str	r4, [r3, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8011ab0:	6159      	str	r1, [r3, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8011ab2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8011ab4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8011ab6:	611a      	str	r2, [r3, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011ab8:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8011aba:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8011abc:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8011abe:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8011ac0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8011ac2:	f7f5 f92d 	bl	8006d20 <HAL_UART_Init>
 8011ac6:	b9c0      	cbnz	r0, 8011afa <MX_USART3_UART_Init+0x5e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8011ac8:	2100      	movs	r1, #0
 8011aca:	480d      	ldr	r0, [pc, #52]	; (8011b00 <MX_USART3_UART_Init+0x64>)
 8011acc:	f7f5 ff30 	bl	8007930 <HAL_UARTEx_SetTxFifoThreshold>
 8011ad0:	b980      	cbnz	r0, 8011af4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8011ad2:	2100      	movs	r1, #0
 8011ad4:	480a      	ldr	r0, [pc, #40]	; (8011b00 <MX_USART3_UART_Init+0x64>)
 8011ad6:	f7f5 ff8d 	bl	80079f4 <HAL_UARTEx_SetRxFifoThreshold>
 8011ada:	b940      	cbnz	r0, 8011aee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8011adc:	4808      	ldr	r0, [pc, #32]	; (8011b00 <MX_USART3_UART_Init+0x64>)
 8011ade:	f7f5 ff09 	bl	80078f4 <HAL_UARTEx_DisableFifoMode>
 8011ae2:	b900      	cbnz	r0, 8011ae6 <MX_USART3_UART_Init+0x4a>
 8011ae4:	bd10      	pop	{r4, pc}
  {
    Error_Handler();
  }

}
 8011ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8011aea:	f7ff b825 	b.w	8010b38 <Error_Handler>
    Error_Handler();
 8011aee:	f7ff f823 	bl	8010b38 <Error_Handler>
 8011af2:	e7f3      	b.n	8011adc <MX_USART3_UART_Init+0x40>
    Error_Handler();
 8011af4:	f7ff f820 	bl	8010b38 <Error_Handler>
 8011af8:	e7eb      	b.n	8011ad2 <MX_USART3_UART_Init+0x36>
    Error_Handler();
 8011afa:	f7ff f81d 	bl	8010b38 <Error_Handler>
 8011afe:	e7e3      	b.n	8011ac8 <MX_USART3_UART_Init+0x2c>
 8011b00:	200061ac 	.word	0x200061ac
 8011b04:	40004800 	.word	0x40004800

08011b08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8011b08:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART1)
 8011b0a:	6803      	ldr	r3, [r0, #0]
 8011b0c:	4a30      	ldr	r2, [pc, #192]	; (8011bd0 <HAL_UART_MspInit+0xc8>)
{
 8011b0e:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011b10:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART1)
 8011b12:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011b14:	9406      	str	r4, [sp, #24]
 8011b16:	9405      	str	r4, [sp, #20]
 8011b18:	9407      	str	r4, [sp, #28]
 8011b1a:	9408      	str	r4, [sp, #32]
 8011b1c:	9409      	str	r4, [sp, #36]	; 0x24
  if(uartHandle->Instance==USART1)
 8011b1e:	d02c      	beq.n	8011b7a <HAL_UART_MspInit+0x72>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8011b20:	4a2c      	ldr	r2, [pc, #176]	; (8011bd4 <HAL_UART_MspInit+0xcc>)
 8011b22:	4293      	cmp	r3, r2
 8011b24:	d001      	beq.n	8011b2a <HAL_UART_MspInit+0x22>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8011b26:	b00b      	add	sp, #44	; 0x2c
 8011b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 8011b2a:	4b2b      	ldr	r3, [pc, #172]	; (8011bd8 <HAL_UART_MspInit+0xd0>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011b2c:	482b      	ldr	r0, [pc, #172]	; (8011bdc <HAL_UART_MspInit+0xd4>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8011b2e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011b30:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8011b34:	659a      	str	r2, [r3, #88]	; 0x58
 8011b36:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011b38:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8011b3c:	9203      	str	r2, [sp, #12]
 8011b3e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011b40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011b42:	f042 0204 	orr.w	r2, r2, #4
 8011b46:	64da      	str	r2, [r3, #76]	; 0x4c
 8011b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b4a:	f003 0304 	and.w	r3, r3, #4
 8011b4e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011b50:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8011b52:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011b54:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8011b56:	2630      	movs	r6, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011b58:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011b5a:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8011b5c:	9309      	str	r3, [sp, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011b5e:	9f04      	ldr	r7, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8011b60:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011b62:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011b64:	f7f0 fa36 	bl	8001fd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8011b68:	4622      	mov	r2, r4
 8011b6a:	2105      	movs	r1, #5
 8011b6c:	2027      	movs	r0, #39	; 0x27
 8011b6e:	f7ef fe3f 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8011b72:	2027      	movs	r0, #39	; 0x27
 8011b74:	f7ef fe72 	bl	800185c <HAL_NVIC_EnableIRQ>
}
 8011b78:	e7d5      	b.n	8011b26 <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8011b7a:	4b17      	ldr	r3, [pc, #92]	; (8011bd8 <HAL_UART_MspInit+0xd0>)
 8011b7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8011b7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011b82:	661a      	str	r2, [r3, #96]	; 0x60
 8011b84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8011b86:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8011b8a:	9201      	str	r2, [sp, #4]
 8011b8c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011b8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011b90:	f042 0201 	orr.w	r2, r2, #1
 8011b94:	64da      	str	r2, [r3, #76]	; 0x4c
 8011b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b98:	f003 0301 	and.w	r3, r3, #1
 8011b9c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011b9e:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8011ba0:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011ba2:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8011ba4:	f44f 66c0 	mov.w	r6, #1536	; 0x600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011ba8:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011baa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011bae:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8011bb0:	9309      	str	r3, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011bb2:	9f02      	ldr	r7, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8011bb4:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011bb6:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011bb8:	f7f0 fa0c 	bl	8001fd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8011bbc:	4622      	mov	r2, r4
 8011bbe:	2105      	movs	r1, #5
 8011bc0:	2025      	movs	r0, #37	; 0x25
 8011bc2:	f7ef fe15 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8011bc6:	2025      	movs	r0, #37	; 0x25
 8011bc8:	f7ef fe48 	bl	800185c <HAL_NVIC_EnableIRQ>
 8011bcc:	e7ab      	b.n	8011b26 <HAL_UART_MspInit+0x1e>
 8011bce:	bf00      	nop
 8011bd0:	40013800 	.word	0x40013800
 8011bd4:	40004800 	.word	0x40004800
 8011bd8:	40021000 	.word	0x40021000
 8011bdc:	48000800 	.word	0x48000800

08011be0 <VL53L1_WriteMulti>:
}

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    if (count > sizeof(_I2CBuffer) - 1) {
 8011be0:	2bff      	cmp	r3, #255	; 0xff
 8011be2:	d81f      	bhi.n	8011c24 <VL53L1_WriteMulti+0x44>
VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8011be4:	b5f0      	push	{r4, r5, r6, r7, lr}
        return VL53L1_ERROR_INVALID_PARAMS;
    }
    _I2CBuffer[0] = index>>8;
 8011be6:	4f11      	ldr	r7, [pc, #68]	; (8011c2c <VL53L1_WriteMulti+0x4c>)
 8011be8:	460e      	mov	r6, r1
 8011bea:	461c      	mov	r4, r3
VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8011bec:	b083      	sub	sp, #12
 8011bee:	4605      	mov	r5, r0
    _I2CBuffer[0] = index>>8;
 8011bf0:	0a33      	lsrs	r3, r6, #8
 8011bf2:	4611      	mov	r1, r2
    _I2CBuffer[1] = index&0xFF;
    memcpy(&_I2CBuffer[2], pdata, count);
 8011bf4:	1cb8      	adds	r0, r7, #2
 8011bf6:	4622      	mov	r2, r4
    _I2CBuffer[0] = index>>8;
 8011bf8:	703b      	strb	r3, [r7, #0]
    _I2CBuffer[1] = index&0xFF;
 8011bfa:	707e      	strb	r6, [r7, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 8011bfc:	f003 fc46 	bl	801548c <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 8011c00:	1ca3      	adds	r3, r4, #2
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8011c02:	340c      	adds	r4, #12
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011c04:	f895 1398 	ldrb.w	r1, [r5, #920]	; 0x398
 8011c08:	f8d5 03a0 	ldr.w	r0, [r5, #928]	; 0x3a0
 8011c0c:	9400      	str	r4, [sp, #0]
 8011c0e:	463a      	mov	r2, r7
 8011c10:	b29b      	uxth	r3, r3
 8011c12:	f7f0 fc8b 	bl	800252c <HAL_I2C_Master_Transmit>
    if (status_int != 0) {
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8011c16:	2800      	cmp	r0, #0
 8011c18:	bf0c      	ite	eq
 8011c1a:	2000      	moveq	r0, #0
 8011c1c:	f06f 000c 	mvnne.w	r0, #12
    }
    VL53L1_PutI2cBus();
    return Status;
}
 8011c20:	b003      	add	sp, #12
 8011c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return VL53L1_ERROR_INVALID_PARAMS;
 8011c24:	f06f 0003 	mvn.w	r0, #3
 8011c28:	4770      	bx	lr
 8011c2a:	bf00      	nop
 8011c2c:	200062b4 	.word	0x200062b4

08011c30 <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8011c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8011c34:	4d16      	ldr	r5, [pc, #88]	; (8011c90 <VL53L1_ReadMulti+0x60>)
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011c36:	f890 c398 	ldrb.w	ip, [r0, #920]	; 0x398
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8011c3a:	460e      	mov	r6, r1
 8011c3c:	b082      	sub	sp, #8
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011c3e:	f04f 0e0c 	mov.w	lr, #12
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8011c42:	461f      	mov	r7, r3
    _I2CBuffer[0] = index>>8;
 8011c44:	0a33      	lsrs	r3, r6, #8
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8011c46:	4604      	mov	r4, r0
 8011c48:	4690      	mov	r8, r2
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011c4a:	f8d0 03a0 	ldr.w	r0, [r0, #928]	; 0x3a0
    _I2CBuffer[0] = index>>8;
 8011c4e:	702b      	strb	r3, [r5, #0]
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011c50:	4661      	mov	r1, ip
 8011c52:	f8cd e000 	str.w	lr, [sp]
 8011c56:	462a      	mov	r2, r5
 8011c58:	2302      	movs	r3, #2
    _I2CBuffer[1] = index&0xFF;
 8011c5a:	706e      	strb	r6, [r5, #1]
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011c5c:	f7f0 fc66 	bl	800252c <HAL_I2C_Master_Transmit>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
    if (status_int != 0) {
 8011c60:	b980      	cbnz	r0, 8011c84 <VL53L1_ReadMulti+0x54>
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8011c62:	f894 1398 	ldrb.w	r1, [r4, #920]	; 0x398
 8011c66:	f8d4 03a0 	ldr.w	r0, [r4, #928]	; 0x3a0
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8011c6a:	f107 030a 	add.w	r3, r7, #10
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8011c6e:	9300      	str	r3, [sp, #0]
 8011c70:	4642      	mov	r2, r8
 8011c72:	f041 0101 	orr.w	r1, r1, #1
 8011c76:	b2bb      	uxth	r3, r7
 8011c78:	f7f0 fd24 	bl	80026c4 <HAL_I2C_Master_Receive>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    status_int = _I2CRead(Dev, pdata, count);
    if (status_int != 0) {
 8011c7c:	b910      	cbnz	r0, 8011c84 <VL53L1_ReadMulti+0x54>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
    }
done:
    VL53L1_PutI2cBus();
    return Status;
}
 8011c7e:	b002      	add	sp, #8
 8011c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8011c84:	f06f 000c 	mvn.w	r0, #12
}
 8011c88:	b002      	add	sp, #8
 8011c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c8e:	bf00      	nop
 8011c90:	200062b4 	.word	0x200062b4

08011c94 <VL53L1_RdWord>:
done:
    VL53L1_PutI2cBus();
    return Status;
}

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 8011c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011c98:	f890 3398 	ldrb.w	r3, [r0, #920]	; 0x398
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8011c9c:	4c16      	ldr	r4, [pc, #88]	; (8011cf8 <VL53L1_RdWord+0x64>)
VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 8011c9e:	460e      	mov	r6, r1
 8011ca0:	b082      	sub	sp, #8
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011ca2:	f04f 080c 	mov.w	r8, #12
 8011ca6:	4619      	mov	r1, r3
    _I2CBuffer[0] = index>>8;
 8011ca8:	0a33      	lsrs	r3, r6, #8
VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 8011caa:	4605      	mov	r5, r0
 8011cac:	4617      	mov	r7, r2
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011cae:	f8d0 03a0 	ldr.w	r0, [r0, #928]	; 0x3a0
    _I2CBuffer[0] = index>>8;
 8011cb2:	7023      	strb	r3, [r4, #0]
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011cb4:	f8cd 8000 	str.w	r8, [sp]
 8011cb8:	4622      	mov	r2, r4
 8011cba:	2302      	movs	r3, #2
	_I2CBuffer[1] = index&0xFF;
 8011cbc:	7066      	strb	r6, [r4, #1]
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011cbe:	f7f0 fc35 	bl	800252c <HAL_I2C_Master_Transmit>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);

    if( status_int ){
 8011cc2:	b9a0      	cbnz	r0, 8011cee <VL53L1_RdWord+0x5a>
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8011cc4:	f895 1398 	ldrb.w	r1, [r5, #920]	; 0x398
 8011cc8:	f8d5 03a0 	ldr.w	r0, [r5, #928]	; 0x3a0
 8011ccc:	f8cd 8000 	str.w	r8, [sp]
 8011cd0:	f041 0101 	orr.w	r1, r1, #1
 8011cd4:	2302      	movs	r3, #2
 8011cd6:	4622      	mov	r2, r4
 8011cd8:	f7f0 fcf4 	bl	80026c4 <HAL_I2C_Master_Receive>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
    if (status_int != 0) {
 8011cdc:	b938      	cbnz	r0, 8011cee <VL53L1_RdWord+0x5a>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
        goto done;
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8011cde:	7822      	ldrb	r2, [r4, #0]
 8011ce0:	7863      	ldrb	r3, [r4, #1]
 8011ce2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011ce6:	803b      	strh	r3, [r7, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
}
 8011ce8:	b002      	add	sp, #8
 8011cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8011cee:	f06f 000c 	mvn.w	r0, #12
}
 8011cf2:	b002      	add	sp, #8
 8011cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cf8:	200062b4 	.word	0x200062b4

08011cfc <VL53L1_WaitUs>:
	(void)pdev;
	HAL_Delay(wait_ms);
    return VL53L1_ERROR_NONE;
}

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 8011cfc:	b508      	push	{r3, lr}
	(void)pdev;
	HAL_Delay(wait_us/1000);
 8011cfe:	4805      	ldr	r0, [pc, #20]	; (8011d14 <VL53L1_WaitUs+0x18>)
 8011d00:	fb80 3001 	smull	r3, r0, r0, r1
 8011d04:	17c9      	asrs	r1, r1, #31
 8011d06:	ebc1 10a0 	rsb	r0, r1, r0, asr #6
 8011d0a:	f7ef f923 	bl	8000f54 <HAL_Delay>
    return VL53L1_ERROR_NONE;
}
 8011d0e:	2000      	movs	r0, #0
 8011d10:	bd08      	pop	{r3, pc}
 8011d12:	bf00      	nop
 8011d14:	10624dd3 	.word	0x10624dd3

08011d18 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8011d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d1c:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 8011d20:	4604      	mov	r4, r0

	VL53L1_Error status         = VL53L1_ERROR_NONE;
	uint32_t     start_time_ms = 0;
	uint32_t     current_time_ms = 0;
	uint32_t     polling_time_ms = 0;
	uint8_t      byte_value      = 0;
 8011d22:	2000      	movs	r0, #0
{
 8011d24:	460d      	mov	r5, r1
 8011d26:	4616      	mov	r6, r2
	uint8_t      byte_value      = 0;
 8011d28:	f88d 000f 	strb.w	r0, [sp, #15]
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 8011d2c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011d30:	4932      	ldr	r1, [pc, #200]	; (8011dfc <VL53L1_WaitValueMaskEx+0xe4>)
{
 8011d32:	f89d 9238 	ldrb.w	r9, [sp, #568]	; 0x238
	VL53L1_COPYSTRING(register_name, "");
 8011d36:	a804      	add	r0, sp, #16
{
 8011d38:	4698      	mov	r8, r3
	VL53L1_COPYSTRING(register_name, "");
 8011d3a:	f003 fbba 	bl	80154b2 <strncpy>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 8011d3e:	2d00      	cmp	r5, #0
 8011d40:	d058      	beq.n	8011df4 <VL53L1_WaitValueMaskEx+0xdc>
 8011d42:	4d2f      	ldr	r5, [pc, #188]	; (8011e00 <VL53L1_WaitValueMaskEx+0xe8>)
 8011d44:	9b8f      	ldr	r3, [sp, #572]	; 0x23c
 8011d46:	0a37      	lsrs	r7, r6, #8
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011d48:	f04f 0b0c 	mov.w	fp, #12
 8011d4c:	b2f6      	uxtb	r6, r6
 8011d4e:	46aa      	mov	sl, r5
 8011d50:	bb2b      	cbnz	r3, 8011d9e <VL53L1_WaitValueMaskEx+0x86>
 8011d52:	f894 1398 	ldrb.w	r1, [r4, #920]	; 0x398
 8011d56:	f8d4 03a0 	ldr.w	r0, [r4, #928]	; 0x3a0
 8011d5a:	f8cd b000 	str.w	fp, [sp]
 8011d5e:	2302      	movs	r3, #2
 8011d60:	4652      	mov	r2, sl
	_I2CBuffer[0] = index>>8;
 8011d62:	702f      	strb	r7, [r5, #0]
	_I2CBuffer[1] = index&0xFF;
 8011d64:	706e      	strb	r6, [r5, #1]
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011d66:	f7f0 fbe1 	bl	800252c <HAL_I2C_Master_Transmit>
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8011d6a:	210b      	movs	r1, #11
 8011d6c:	2301      	movs	r3, #1
 8011d6e:	f10d 020f 	add.w	r2, sp, #15
    if( status_int ){
 8011d72:	bbc8      	cbnz	r0, 8011de8 <VL53L1_WaitValueMaskEx+0xd0>
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8011d74:	f894 e398 	ldrb.w	lr, [r4, #920]	; 0x398
 8011d78:	f8d4 03a0 	ldr.w	r0, [r4, #928]	; 0x3a0
 8011d7c:	9100      	str	r1, [sp, #0]
 8011d7e:	ea4e 0103 	orr.w	r1, lr, r3
 8011d82:	f7f0 fc9f 	bl	80026c4 <HAL_I2C_Master_Receive>
    if (status_int != 0) {
 8011d86:	bb78      	cbnz	r0, 8011de8 <VL53L1_WaitValueMaskEx+0xd0>
			status = VL53L1_RdByte(
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8011d88:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8011d8c:	ea09 0303 	and.w	r3, r9, r3
 8011d90:	4598      	cmp	r8, r3
 8011d92:	d1de      	bne.n	8011d52 <VL53L1_WaitValueMaskEx+0x3a>
 8011d94:	2000      	movs	r0, #0

	if (found == 0 && status == VL53L1_ERROR_NONE)
		status = VL53L1_ERROR_TIME_OUT;

	return status;
}
 8011d96:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 8011d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011d9e:	f894 1398 	ldrb.w	r1, [r4, #920]	; 0x398
 8011da2:	f8d4 03a0 	ldr.w	r0, [r4, #928]	; 0x3a0
 8011da6:	f8cd b000 	str.w	fp, [sp]
 8011daa:	2302      	movs	r3, #2
 8011dac:	4652      	mov	r2, sl
	_I2CBuffer[0] = index>>8;
 8011dae:	702f      	strb	r7, [r5, #0]
	_I2CBuffer[1] = index&0xFF;
 8011db0:	706e      	strb	r6, [r5, #1]
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011db2:	f7f0 fbbb 	bl	800252c <HAL_I2C_Master_Transmit>
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8011db6:	210b      	movs	r1, #11
 8011db8:	2301      	movs	r3, #1
 8011dba:	f10d 020f 	add.w	r2, sp, #15
    if( status_int ){
 8011dbe:	b998      	cbnz	r0, 8011de8 <VL53L1_WaitValueMaskEx+0xd0>
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8011dc0:	f894 e398 	ldrb.w	lr, [r4, #920]	; 0x398
 8011dc4:	f8d4 03a0 	ldr.w	r0, [r4, #928]	; 0x3a0
 8011dc8:	9100      	str	r1, [sp, #0]
 8011dca:	f04e 0101 	orr.w	r1, lr, #1
 8011dce:	f7f0 fc79 	bl	80026c4 <HAL_I2C_Master_Receive>
    if (status_int != 0) {
 8011dd2:	b948      	cbnz	r0, 8011de8 <VL53L1_WaitValueMaskEx+0xd0>
		if ((byte_value & mask) == value)
 8011dd4:	f89d 300f 	ldrb.w	r3, [sp, #15]
	HAL_Delay(wait_ms);
 8011dd8:	988f      	ldr	r0, [sp, #572]	; 0x23c
		if ((byte_value & mask) == value)
 8011dda:	ea09 0303 	and.w	r3, r9, r3
 8011dde:	4598      	cmp	r8, r3
 8011de0:	d0d8      	beq.n	8011d94 <VL53L1_WaitValueMaskEx+0x7c>
	HAL_Delay(wait_ms);
 8011de2:	f7ef f8b7 	bl	8000f54 <HAL_Delay>
 8011de6:	e7da      	b.n	8011d9e <VL53L1_WaitValueMaskEx+0x86>
 8011de8:	f06f 000c 	mvn.w	r0, #12
}
 8011dec:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 8011df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		status = VL53L1_ERROR_TIME_OUT;
 8011df4:	f06f 0006 	mvn.w	r0, #6
	return status;
 8011df8:	e7f8      	b.n	8011dec <VL53L1_WaitValueMaskEx+0xd4>
 8011dfa:	bf00      	nop
 8011dfc:	08017194 	.word	0x08017194
 8011e00:	200062b4 	.word	0x200062b4

08011e04 <setWavetableAmplitude>:


}

void setWavetableAmplitude(uint8_t* intTracker) {
  ampltiude_multiplier = (*intTracker) / ((float)ROTATION_STEPS - 1);
 8011e04:	7803      	ldrb	r3, [r0, #0]
 8011e06:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8011e20 <setWavetableAmplitude+0x1c>
 8011e0a:	ee07 3a90 	vmov	s15, r3
 8011e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011e12:	4b04      	ldr	r3, [pc, #16]	; (8011e24 <setWavetableAmplitude+0x20>)
 8011e14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011e18:	edc3 7a00 	vstr	s15, [r3]
 8011e1c:	4770      	bx	lr
 8011e1e:	bf00      	nop
 8011e20:	3e4ccccd 	.word	0x3e4ccccd
 8011e24:	20005310 	.word	0x20005310

08011e28 <activateLowpassFilter>:
  // ampltiude_multiplier = 1;
}

void activateLowpassFilter(uint8_t activate){
  lowPassFilter_state = activate;
 8011e28:	4b02      	ldr	r3, [pc, #8]	; (8011e34 <activateLowpassFilter+0xc>)
 8011e2a:	7018      	strb	r0, [r3, #0]
  if(activate > 0){
 8011e2c:	b900      	cbnz	r0, 8011e30 <activateLowpassFilter+0x8>
 8011e2e:	4770      	bx	lr
      resetFilterHistory();
 8011e30:	f7fd b94c 	b.w	800f0cc <resetFilterHistory>
 8011e34:	200053f5 	.word	0x200053f5

08011e38 <isLidarModeActive>:
    filter_active = 0;
  }
}

uint8_t isLidarModeActive(void) {
  if (lidarModeActive) return 1;
 8011e38:	4b02      	ldr	r3, [pc, #8]	; (8011e44 <isLidarModeActive+0xc>)
 8011e3a:	7818      	ldrb	r0, [r3, #0]
  return 0;
}
 8011e3c:	3000      	adds	r0, #0
 8011e3e:	bf18      	it	ne
 8011e40:	2001      	movne	r0, #1
 8011e42:	4770      	bx	lr
 8011e44:	200053f4 	.word	0x200053f4

08011e48 <isCapModeActive>:
uint8_t isCapModeActive(void) {
  if (capModeActive) return 1;
 8011e48:	4b02      	ldr	r3, [pc, #8]	; (8011e54 <isCapModeActive+0xc>)
 8011e4a:	7818      	ldrb	r0, [r3, #0]
  return 0;
}
 8011e4c:	3000      	adds	r0, #0
 8011e4e:	bf18      	it	ne
 8011e50:	2001      	movne	r0, #1
 8011e52:	4770      	bx	lr
 8011e54:	20005315 	.word	0x20005315

08011e58 <turnSoundOff>:

void turnSoundOff(void){
  signal_on = 0;
 8011e58:	4b01      	ldr	r3, [pc, #4]	; (8011e60 <turnSoundOff+0x8>)
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	701a      	strb	r2, [r3, #0]
 8011e5e:	4770      	bx	lr
 8011e60:	2000005d 	.word	0x2000005d

08011e64 <turnSoundOn>:
}

void turnSoundOn(void){
  signal_on = 1;
 8011e64:	4b01      	ldr	r3, [pc, #4]	; (8011e6c <turnSoundOn+0x8>)
 8011e66:	2201      	movs	r2, #1
 8011e68:	701a      	strb	r2, [r3, #0]
 8011e6a:	4770      	bx	lr
 8011e6c:	2000005d 	.word	0x2000005d

08011e70 <turnOnLidarSounds>:
  if (setFilterIndex >= FILTER_CNT) setFilterIndex = 0;
  setFilter(setFilterIndex);
}

// uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
void turnOnLidarSounds(void) {
 8011e70:	b508      	push	{r3, lr}
  if (lidarModeActive == 0) {
 8011e72:	4b07      	ldr	r3, [pc, #28]	; (8011e90 <turnOnLidarSounds+0x20>)
 8011e74:	781a      	ldrb	r2, [r3, #0]
 8011e76:	b93a      	cbnz	r2, 8011e88 <turnOnLidarSounds+0x18>
    lidarModeActive = 1;
 8011e78:	2201      	movs	r2, #1
 8011e7a:	701a      	strb	r2, [r3, #0]
    lidarStart();
 8011e7c:	f7fe fd34 	bl	80108e8 <lidarStart>
    osSemaphoreRelease(lidarSampleReadySemaphoreHandle);
 8011e80:	4b04      	ldr	r3, [pc, #16]	; (8011e94 <turnOnLidarSounds+0x24>)
 8011e82:	6818      	ldr	r0, [r3, #0]
 8011e84:	f7f9 ffa0 	bl	800bdc8 <osSemaphoreRelease>
    // LidarMeasurement();
  }
  capModeActive = 0;
 8011e88:	4b03      	ldr	r3, [pc, #12]	; (8011e98 <turnOnLidarSounds+0x28>)
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	701a      	strb	r2, [r3, #0]
 8011e8e:	bd08      	pop	{r3, pc}
 8011e90:	200053f4 	.word	0x200053f4
 8011e94:	20005a08 	.word	0x20005a08
 8011e98:	20005315 	.word	0x20005315

08011e9c <turnOnCapSounds>:
}

void turnOnCapSounds(void) {
 8011e9c:	b538      	push	{r3, r4, r5, lr}
  if (lidarModeActive) lidarStop();
 8011e9e:	4c0b      	ldr	r4, [pc, #44]	; (8011ecc <turnOnCapSounds+0x30>)
 8011ea0:	7823      	ldrb	r3, [r4, #0]
 8011ea2:	b983      	cbnz	r3, 8011ec6 <turnOnCapSounds+0x2a>
  if (capModeActive != 1) {
 8011ea4:	4b0a      	ldr	r3, [pc, #40]	; (8011ed0 <turnOnCapSounds+0x34>)
 8011ea6:	781a      	ldrb	r2, [r3, #0]
 8011ea8:	2a01      	cmp	r2, #1
 8011eaa:	d00b      	beq.n	8011ec4 <turnOnCapSounds+0x28>
    lidarModeActive = 0;
    capModeActive = 1;
    turnSoundOn();
    osSemaphoreRelease(capSampleSemaphoreHandle);
 8011eac:	4a09      	ldr	r2, [pc, #36]	; (8011ed4 <turnOnCapSounds+0x38>)
  signal_on = 1;
 8011eae:	4d0a      	ldr	r5, [pc, #40]	; (8011ed8 <turnOnCapSounds+0x3c>)
    osSemaphoreRelease(capSampleSemaphoreHandle);
 8011eb0:	6810      	ldr	r0, [r2, #0]
    lidarModeActive = 0;
 8011eb2:	2100      	movs	r1, #0
    capModeActive = 1;
 8011eb4:	2201      	movs	r2, #1
  signal_on = 1;
 8011eb6:	702a      	strb	r2, [r5, #0]
    capModeActive = 1;
 8011eb8:	701a      	strb	r2, [r3, #0]
    lidarModeActive = 0;
 8011eba:	7021      	strb	r1, [r4, #0]
  }
  // Sample_Cap_Touch();
}
 8011ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    osSemaphoreRelease(capSampleSemaphoreHandle);
 8011ec0:	f7f9 bf82 	b.w	800bdc8 <osSemaphoreRelease>
 8011ec4:	bd38      	pop	{r3, r4, r5, pc}
  if (lidarModeActive) lidarStop();
 8011ec6:	f7fe fd03 	bl	80108d0 <lidarStop>
 8011eca:	e7eb      	b.n	8011ea4 <turnOnCapSounds+0x8>
 8011ecc:	200053f4 	.word	0x200053f4
 8011ed0:	20005315 	.word	0x20005315
 8011ed4:	20005534 	.word	0x20005534
 8011ed8:	2000005d 	.word	0x2000005d

08011edc <turnOffSounds>:

void turnOffSounds(void) {
 8011edc:	b510      	push	{r4, lr}
  if (lidarModeActive) lidarStop();
 8011ede:	4c05      	ldr	r4, [pc, #20]	; (8011ef4 <turnOffSounds+0x18>)
 8011ee0:	7823      	ldrb	r3, [r4, #0]
 8011ee2:	b10b      	cbz	r3, 8011ee8 <turnOffSounds+0xc>
 8011ee4:	f7fe fcf4 	bl	80108d0 <lidarStop>
  lidarModeActive = 0;
  capModeActive = 0;
 8011ee8:	4a03      	ldr	r2, [pc, #12]	; (8011ef8 <turnOffSounds+0x1c>)
  lidarModeActive = 0;
 8011eea:	2300      	movs	r3, #0
  capModeActive = 0;
 8011eec:	7013      	strb	r3, [r2, #0]
  lidarModeActive = 0;
 8011eee:	7023      	strb	r3, [r4, #0]
 8011ef0:	bd10      	pop	{r4, pc}
 8011ef2:	bf00      	nop
 8011ef4:	200053f4 	.word	0x200053f4
 8011ef8:	20005315 	.word	0x20005315
 8011efc:	00000000 	.word	0x00000000

08011f00 <calcLidarFreq>:
}

void calcLidarFreq(int16_t* measurement) {
 8011f00:	b510      	push	{r4, lr}
//  prevlidarSampleTime = lidarSampleTime;
//  lidarSampleTime = HAL_GetTick();
//  time_delta = lidarSampleTime - prevlidarSampleTime;

  freq_lidar = freq_lidar_new;
  freq_lidar_new = 123.471 * expf(0.00288811 * ((float)*measurement));
 8011f02:	f9b0 0000 	ldrsh.w	r0, [r0]
  freq_lidar = freq_lidar_new;
 8011f06:	4c2c      	ldr	r4, [pc, #176]	; (8011fb8 <calcLidarFreq+0xb8>)
 8011f08:	4b2c      	ldr	r3, [pc, #176]	; (8011fbc <calcLidarFreq+0xbc>)
  freq_lidar_new = 123.471 * expf(0.00288811 * ((float)*measurement));
 8011f0a:	ee07 0a90 	vmov	s15, r0
void calcLidarFreq(int16_t* measurement) {
 8011f0e:	ed2d 8b02 	vpush	{d8}
  freq_lidar_new = 123.471 * expf(0.00288811 * ((float)*measurement));
 8011f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  freq_lidar = freq_lidar_new;
 8011f16:	ed94 8a00 	vldr	s16, [r4]
  freq_lidar_new = 123.471 * expf(0.00288811 * ((float)*measurement));
 8011f1a:	ee17 0a90 	vmov	r0, s15
  freq_lidar = freq_lidar_new;
 8011f1e:	ed83 8a00 	vstr	s16, [r3]
  freq_lidar_new = 123.471 * expf(0.00288811 * ((float)*measurement));
 8011f22:	f7ee fad1 	bl	80004c8 <__aeabi_f2d>
 8011f26:	a320      	add	r3, pc, #128	; (adr r3, 8011fa8 <calcLidarFreq+0xa8>)
 8011f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f2c:	f7ee fb20 	bl	8000570 <__aeabi_dmul>
 8011f30:	f7ee fe16 	bl	8000b60 <__aeabi_d2f>
 8011f34:	ee00 0a10 	vmov	s0, r0
 8011f38:	f003 fc58 	bl	80157ec <expf>
 8011f3c:	ee10 0a10 	vmov	r0, s0
 8011f40:	f7ee fac2 	bl	80004c8 <__aeabi_f2d>
 8011f44:	a31a      	add	r3, pc, #104	; (adr r3, 8011fb0 <calcLidarFreq+0xb0>)
 8011f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f4a:	f7ee fb11 	bl	8000570 <__aeabi_dmul>
 8011f4e:	f7ee fe07 	bl	8000b60 <__aeabi_d2f>

  //freq_lidar_new = 2391.02 * log(0.401853 * ((float)*measurement));

  if (freq_lidar_new > 18000) freq_lidar_new = 18000;
 8011f52:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8011fc0 <calcLidarFreq+0xc0>
  freq_lidar_new = 123.471 * expf(0.00288811 * ((float)*measurement));
 8011f56:	ee07 0a90 	vmov	s15, r0
  if (freq_lidar_new > 18000) freq_lidar_new = 18000;
 8011f5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f62:	bfc8      	it	gt
 8011f64:	eef0 7a47 	vmovgt.f32	s15, s14

  if (freq_lidar_new == freq_lidar){
 8011f68:	eeb4 8a67 	vcmp.f32	s16, s15
  freq_lidar_new = 123.471 * expf(0.00288811 * ((float)*measurement));
 8011f6c:	bfd4      	ite	le
 8011f6e:	edc4 7a00 	vstrle	s15, [r4]
  if (freq_lidar_new > 18000) freq_lidar_new = 18000;
 8011f72:	ed84 7a00 	vstrgt	s14, [r4]
  if (freq_lidar_new == freq_lidar){
 8011f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f7a:	d102      	bne.n	8011f82 <calcLidarFreq+0x82>
    freq_lidar_step = 0;
 8011f7c:	4b11      	ldr	r3, [pc, #68]	; (8011fc4 <calcLidarFreq+0xc4>)
 8011f7e:	2200      	movs	r2, #0
 8011f80:	601a      	str	r2, [r3, #0]
//
////    freq_lidar_step = ((freq_lidar_new - freq_lidar) /
////                           (((time_delta / 40000))));
//  }

  freq_lidar_inc = (freq_lidar / ((float)DAC_FREQ)) * max_table_index;
 8011f82:	4b11      	ldr	r3, [pc, #68]	; (8011fc8 <calcLidarFreq+0xc8>)
 8011f84:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8011fcc <calcLidarFreq+0xcc>
 8011f88:	edd3 7a00 	vldr	s15, [r3]
 8011f8c:	4b10      	ldr	r3, [pc, #64]	; (8011fd0 <calcLidarFreq+0xd0>)
 8011f8e:	ee28 8a07 	vmul.f32	s16, s16, s14
 8011f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011f96:	ee67 7a88 	vmul.f32	s15, s15, s16
}
 8011f9a:	ecbd 8b02 	vpop	{d8}
  freq_lidar_inc = (freq_lidar / ((float)DAC_FREQ)) * max_table_index;
 8011f9e:	edc3 7a00 	vstr	s15, [r3]
}
 8011fa2:	bd10      	pop	{r4, pc}
 8011fa4:	f3af 8000 	nop.w
 8011fa8:	3fe97a02 	.word	0x3fe97a02
 8011fac:	3f67a8ce 	.word	0x3f67a8ce
 8011fb0:	dd2f1aa0 	.word	0xdd2f1aa0
 8011fb4:	405ede24 	.word	0x405ede24
 8011fb8:	200053e8 	.word	0x200053e8
 8011fbc:	20000054 	.word	0x20000054
 8011fc0:	468ca000 	.word	0x468ca000
 8011fc4:	200053f0 	.word	0x200053f0
 8011fc8:	20000058 	.word	0x20000058
 8011fcc:	37d1b717 	.word	0x37d1b717
 8011fd0:	20006fbc 	.word	0x20006fbc

08011fd4 <HAL_DAC_ConvCpltCallbackCh1>:
  //prepBuffer(hdac);
#ifdef DEBUG_PRINT
  startTime = DWT->CYCCNT;
  //HAL_UART_Transmit(&huart3, "DMA\n\r", sizeof("DMA\n\r"), 100);
#endif
  osSemaphoreRelease (bufferFillSemaphoreHandle);
 8011fd4:	4b01      	ldr	r3, [pc, #4]	; (8011fdc <HAL_DAC_ConvCpltCallbackCh1+0x8>)
 8011fd6:	6818      	ldr	r0, [r3, #0]
 8011fd8:	f7f9 bef6 	b.w	800bdc8 <osSemaphoreRelease>
 8011fdc:	20005498 	.word	0x20005498

08011fe0 <releaseHandler>:
		}
    }
  }
}

void releaseHandler(q15_t* buffer, float* freq_inc, float* freq_ind, uint32_t* freq_sample_tracker, double* freq_multiplier){
 8011fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if( (*freq_sample_tracker) >= RELEASE_SAMPLES || (*freq_sample_tracker) == 0){
 8011fe4:	681c      	ldr	r4, [r3, #0]
 8011fe6:	4d4e      	ldr	r5, [pc, #312]	; (8012120 <releaseHandler+0x140>)
 8011fe8:	1e67      	subs	r7, r4, #1
 8011fea:	42af      	cmp	r7, r5
void releaseHandler(q15_t* buffer, float* freq_inc, float* freq_ind, uint32_t* freq_sample_tracker, double* freq_multiplier){
 8011fec:	b087      	sub	sp, #28
  if( (*freq_sample_tracker) >= RELEASE_SAMPLES || (*freq_sample_tracker) == 0){
 8011fee:	f200 8086 	bhi.w	80120fe <releaseHandler+0x11e>
 8011ff2:	4616      	mov	r6, r2
 8011ff4:	4a4b      	ldr	r2, [pc, #300]	; (8012124 <releaseHandler+0x144>)
 8011ff6:	9302      	str	r3, [sp, #8]
 8011ff8:	4294      	cmp	r4, r2
 8011ffa:	4b4b      	ldr	r3, [pc, #300]	; (8012128 <releaseHandler+0x148>)
      //(*freq_multiplier) = (RELEASE_ALPHA) * (RELEASE_THRESH - (*freq_multiplier)) + (*freq_multiplier);
      (*freq_multiplier) = ADSR_table[*freq_sample_tracker];

    // if above if statements are not valid, the multiplier remains fixed (i.e. sustain)

      table_val = waveTable[incrementIndex(freq_inc, freq_ind)];
 8011ffc:	4f4b      	ldr	r7, [pc, #300]	; (801212c <releaseHandler+0x14c>)

      if(preWaveshape > 0){
 8011ffe:	4d4c      	ldr	r5, [pc, #304]	; (8012130 <releaseHandler+0x150>)
      table_val = waveTable[incrementIndex(freq_inc, freq_ind)];
 8012000:	683f      	ldr	r7, [r7, #0]
 8012002:	9703      	str	r7, [sp, #12]
 8012004:	468a      	mov	sl, r1
 8012006:	bf38      	it	cc
 8012008:	4614      	movcc	r4, r2
	  if(preWaveshape == 1) table_val = CHEBYSHEV_4TH_256_DATA[table_val+127];
	  else if(preWaveshape == 2) table_val = WAVESHAPE_SIGMOID_DATA[table_val+127];
	  else if(preWaveshape == 3) table_val = WAVESHAPE_TANH_DATA[table_val+127];
      }

      buffer[i] += ( ( (int32_t) (ampltiude_multiplier * (table_val * SCALE_OUTPUT) ) )) * signal_on * (*freq_multiplier);
 801200a:	494a      	ldr	r1, [pc, #296]	; (8012134 <releaseHandler+0x154>)
      if(preWaveshape > 0){
 801200c:	782f      	ldrb	r7, [r5, #0]
      buffer[i] += ( ( (int32_t) (ampltiude_multiplier * (table_val * SCALE_OUTPUT) ) )) * signal_on * (*freq_multiplier);
 801200e:	7809      	ldrb	r1, [r1, #0]
 8012010:	9104      	str	r1, [sp, #16]
 8012012:	3401      	adds	r4, #1
 8012014:	eb03 0b84 	add.w	fp, r3, r4, lsl #2
 8012018:	f200 33fe 	addw	r3, r0, #1022	; 0x3fe
 801201c:	1e85      	subs	r5, r0, #2
 801201e:	9305      	str	r3, [sp, #20]
 8012020:	e02e      	b.n	8012080 <releaseHandler+0xa0>
	  else if(preWaveshape == 2) table_val = WAVESHAPE_SIGMOID_DATA[table_val+127];
 8012022:	2f02      	cmp	r7, #2
 8012024:	d06e      	beq.n	8012104 <releaseHandler+0x124>
	  else if(preWaveshape == 3) table_val = WAVESHAPE_TANH_DATA[table_val+127];
 8012026:	2f03      	cmp	r7, #3
 8012028:	d073      	beq.n	8012112 <releaseHandler+0x132>
      buffer[i] += ( ( (int32_t) (ampltiude_multiplier * (table_val * SCALE_OUTPUT) ) )) * signal_on * (*freq_multiplier);
 801202a:	005b      	lsls	r3, r3, #1
 801202c:	ee07 3a90 	vmov	s15, r3
 8012030:	4b41      	ldr	r3, [pc, #260]	; (8012138 <releaseHandler+0x158>)
 8012032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012036:	ed93 7a00 	vldr	s14, [r3]
 801203a:	9b04      	ldr	r3, [sp, #16]
 801203c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012040:	3401      	adds	r4, #1
 8012042:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012046:	ee17 0a90 	vmov	r0, s15
 801204a:	fb03 f000 	mul.w	r0, r3, r0
 801204e:	f7ee fa29 	bl	80004a4 <__aeabi_i2d>
 8012052:	4642      	mov	r2, r8
 8012054:	464b      	mov	r3, r9
 8012056:	f7ee fa8b 	bl	8000570 <__aeabi_dmul>
 801205a:	4680      	mov	r8, r0
 801205c:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
 8012060:	4689      	mov	r9, r1
 8012062:	f7ee fa1f 	bl	80004a4 <__aeabi_i2d>
 8012066:	460b      	mov	r3, r1
 8012068:	4602      	mov	r2, r0
 801206a:	4649      	mov	r1, r9
 801206c:	4640      	mov	r0, r8
 801206e:	f7ee f8cd 	bl	800020c <__adddf3>
 8012072:	f7ee fd2d 	bl	8000ad0 <__aeabi_d2iz>
  for (int i = 0; i < BUFFER_SIZE; i++) {
 8012076:	9b05      	ldr	r3, [sp, #20]
      buffer[i] += ( ( (int32_t) (ampltiude_multiplier * (table_val * SCALE_OUTPUT) ) )) * signal_on * (*freq_multiplier);
 8012078:	f825 0f02 	strh.w	r0, [r5, #2]!
  for (int i = 0; i < BUFFER_SIZE; i++) {
 801207c:	42ab      	cmp	r3, r5
 801207e:	d03e      	beq.n	80120fe <releaseHandler+0x11e>
      (*freq_sample_tracker)++;
 8012080:	9b02      	ldr	r3, [sp, #8]
 8012082:	601c      	str	r4, [r3, #0]
      if( (*freq_sample_tracker) >= RELEASE_SAMPLES){
 8012084:	4b2d      	ldr	r3, [pc, #180]	; (801213c <releaseHandler+0x15c>)
 8012086:	429c      	cmp	r4, r3
 8012088:	d036      	beq.n	80120f8 <releaseHandler+0x118>
      (*freq_multiplier) = ADSR_table[*freq_sample_tracker];
 801208a:	f85b 0b04 	ldr.w	r0, [fp], #4
 801208e:	f7ee fa1b 	bl	80004c8 <__aeabi_f2d>
  return (q15_t)filter_product;
}

uint16_t incrementIndex(float* freq_inc, float* freq_ind) {
  *freq_ind += (*freq_inc);
  if ((*freq_ind) >= max_table_index) {
 8012092:	4b2b      	ldr	r3, [pc, #172]	; (8012140 <releaseHandler+0x160>)
  *freq_ind += (*freq_inc);
 8012094:	ed96 7a00 	vldr	s14, [r6]
  if ((*freq_ind) >= max_table_index) {
 8012098:	681b      	ldr	r3, [r3, #0]
  *freq_ind += (*freq_inc);
 801209a:	edda 7a00 	vldr	s15, [sl]
  if ((*freq_ind) >= max_table_index) {
 801209e:	9301      	str	r3, [sp, #4]
  *freq_ind += (*freq_inc);
 80120a0:	ee77 7a27 	vadd.f32	s15, s14, s15
  if ((*freq_ind) >= max_table_index) {
 80120a4:	ee07 3a10 	vmov	s14, r3
 80120a8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
      (*freq_multiplier) = ADSR_table[*freq_sample_tracker];
 80120ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
      table_val = waveTable[incrementIndex(freq_inc, freq_ind)];
 80120ae:	9a03      	ldr	r2, [sp, #12]
  if ((*freq_ind) >= max_table_index) {
 80120b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80120b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      (*freq_multiplier) = ADSR_table[*freq_sample_tracker];
 80120b8:	4680      	mov	r8, r0
 80120ba:	4689      	mov	r9, r1
 80120bc:	e9c3 8900 	strd	r8, r9, [r3]
  *freq_ind += (*freq_inc);
 80120c0:	edc6 7a00 	vstr	s15, [r6]
    (*freq_ind) -= max_table_index;
 80120c4:	bfa4      	itt	ge
 80120c6:	ee77 7ac7 	vsubge.f32	s15, s15, s14
 80120ca:	edc6 7a00 	vstrge	s15, [r6]
  }

  return (uint16_t)(*freq_ind);
 80120ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80120d2:	edcd 7a01 	vstr	s15, [sp, #4]
      table_val = waveTable[incrementIndex(freq_inc, freq_ind)];
 80120d6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80120da:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80120de:	4a19      	ldr	r2, [pc, #100]	; (8012144 <releaseHandler+0x164>)
 80120e0:	8013      	strh	r3, [r2, #0]
      if(preWaveshape > 0){
 80120e2:	2f00      	cmp	r7, #0
 80120e4:	d0a1      	beq.n	801202a <releaseHandler+0x4a>
	  if(preWaveshape == 1) table_val = CHEBYSHEV_4TH_256_DATA[table_val+127];
 80120e6:	2f01      	cmp	r7, #1
 80120e8:	d19b      	bne.n	8012022 <releaseHandler+0x42>
 80120ea:	4a17      	ldr	r2, [pc, #92]	; (8012148 <releaseHandler+0x168>)
 80120ec:	337f      	adds	r3, #127	; 0x7f
 80120ee:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80120f2:	4a14      	ldr	r2, [pc, #80]	; (8012144 <releaseHandler+0x164>)
 80120f4:	8013      	strh	r3, [r2, #0]
 80120f6:	e798      	b.n	801202a <releaseHandler+0x4a>
	  (*freq_sample_tracker) = 0;
 80120f8:	9a02      	ldr	r2, [sp, #8]
 80120fa:	2300      	movs	r3, #0
 80120fc:	6013      	str	r3, [r2, #0]
}
 80120fe:	b007      	add	sp, #28
 8012100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  else if(preWaveshape == 2) table_val = WAVESHAPE_SIGMOID_DATA[table_val+127];
 8012104:	4a11      	ldr	r2, [pc, #68]	; (801214c <releaseHandler+0x16c>)
 8012106:	337f      	adds	r3, #127	; 0x7f
 8012108:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801210c:	4a0d      	ldr	r2, [pc, #52]	; (8012144 <releaseHandler+0x164>)
 801210e:	8013      	strh	r3, [r2, #0]
 8012110:	e78b      	b.n	801202a <releaseHandler+0x4a>
	  else if(preWaveshape == 3) table_val = WAVESHAPE_TANH_DATA[table_val+127];
 8012112:	4a0f      	ldr	r2, [pc, #60]	; (8012150 <releaseHandler+0x170>)
 8012114:	337f      	adds	r3, #127	; 0x7f
 8012116:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801211a:	4a0a      	ldr	r2, [pc, #40]	; (8012144 <releaseHandler+0x164>)
 801211c:	8013      	strh	r3, [r2, #0]
 801211e:	e784      	b.n	801202a <releaseHandler+0x4a>
 8012120:	00015f8e 	.word	0x00015f8e
 8012124:	00011170 	.word	0x00011170
 8012128:	08017424 	.word	0x08017424
 801212c:	2007db0c 	.word	0x2007db0c
 8012130:	200053fe 	.word	0x200053fe
 8012134:	2000005d 	.word	0x2000005d
 8012138:	20005310 	.word	0x20005310
 801213c:	00015f90 	.word	0x00015f90
 8012140:	20000058 	.word	0x20000058
 8012144:	200077dc 	.word	0x200077dc
 8012148:	08082ae4 	.word	0x08082ae4
 801214c:	080836e4 	.word	0x080836e4
 8012150:	080838e4 	.word	0x080838e4
 8012154:	00000000 	.word	0x00000000

08012158 <addTableToBuffer>:
void addTableToBuffer(q15_t* buffer, float* freq_inc, float* freq_ind, uint32_t* freq_sample_tracker ,double* freq_multiplier) {
 8012158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801215c:	ed2d 8b04 	vpush	{d8-d9}
    if (lidarModeActive) {
 8012160:	4c9b      	ldr	r4, [pc, #620]	; (80123d0 <addTableToBuffer+0x278>)
void addTableToBuffer(q15_t* buffer, float* freq_inc, float* freq_ind, uint32_t* freq_sample_tracker ,double* freq_multiplier) {
 8012162:	b089      	sub	sp, #36	; 0x24
    if (lidarModeActive) {
 8012164:	7825      	ldrb	r5, [r4, #0]
void addTableToBuffer(q15_t* buffer, float* freq_inc, float* freq_ind, uint32_t* freq_sample_tracker ,double* freq_multiplier) {
 8012166:	9304      	str	r3, [sp, #16]
 8012168:	460f      	mov	r7, r1
 801216a:	4614      	mov	r4, r2
    if (lidarModeActive) {
 801216c:	2d00      	cmp	r5, #0
 801216e:	f000 809a 	beq.w	80122a6 <addTableToBuffer+0x14e>
 8012172:	4b98      	ldr	r3, [pc, #608]	; (80123d4 <addTableToBuffer+0x27c>)
 8012174:	4a98      	ldr	r2, [pc, #608]	; (80123d8 <addTableToBuffer+0x280>)
 8012176:	edd3 8a00 	vldr	s17, [r3]
 801217a:	4b98      	ldr	r3, [pc, #608]	; (80123dc <addTableToBuffer+0x284>)
 801217c:	4998      	ldr	r1, [pc, #608]	; (80123e0 <addTableToBuffer+0x288>)
 801217e:	f893 9000 	ldrb.w	r9, [r3]
 8012182:	ed9f 9a98 	vldr	s18, [pc, #608]	; 80123e4 <addTableToBuffer+0x28c>
 8012186:	4b98      	ldr	r3, [pc, #608]	; (80123e8 <addTableToBuffer+0x290>)
 8012188:	6809      	ldr	r1, [r1, #0]
 801218a:	7816      	ldrb	r6, [r2, #0]
 801218c:	f8cd 9014 	str.w	r9, [sp, #20]
 8012190:	eef8 8a68 	vcvt.f32.u32	s17, s17
 8012194:	f200 32fe 	addw	r2, r0, #1022	; 0x3fe
 8012198:	9103      	str	r1, [sp, #12]
 801219a:	f8df a268 	ldr.w	sl, [pc, #616]	; 8012404 <addTableToBuffer+0x2ac>
 801219e:	f8df 8268 	ldr.w	r8, [pc, #616]	; 8012408 <addTableToBuffer+0x2b0>
 80121a2:	f8df b268 	ldr.w	fp, [pc, #616]	; 801240c <addTableToBuffer+0x2b4>
 80121a6:	9204      	str	r2, [sp, #16]
 80121a8:	ee28 9a89 	vmul.f32	s18, s17, s18
 80121ac:	1e85      	subs	r5, r0, #2
 80121ae:	4699      	mov	r9, r3
 80121b0:	e01b      	b.n	80121ea <addTableToBuffer+0x92>
            else if(preWaveshape == 2) table_val = WAVESHAPE_SIGMOID_DATA[table_val+127];
 80121b2:	2e02      	cmp	r6, #2
 80121b4:	d064      	beq.n	8012280 <addTableToBuffer+0x128>
            else if(preWaveshape == 3) table_val = WAVESHAPE_TANH_DATA[table_val+127];
 80121b6:	2e03      	cmp	r6, #3
 80121b8:	d069      	beq.n	801228e <addTableToBuffer+0x136>
        buffer[i] += ( ( (int32_t) (ampltiude_multiplier * (table_val * SCALE_OUTPUT) ) )) * signal_on;
 80121ba:	005b      	lsls	r3, r3, #1
 80121bc:	ee07 3a90 	vmov	s15, r3
 80121c0:	ed9b 7a00 	vldr	s14, [fp]
 80121c4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80121c8:	886a      	ldrh	r2, [r5, #2]
 80121ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80121ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80121d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80121d6:	ee17 3a90 	vmov	r3, s15
 80121da:	fb13 f301 	smulbb	r3, r3, r1
 80121de:	4413      	add	r3, r2
 80121e0:	f825 3f02 	strh.w	r3, [r5, #2]!
      for (int i = 0; i < BUFFER_SIZE; i++) {
 80121e4:	9b04      	ldr	r3, [sp, #16]
 80121e6:	42ab      	cmp	r3, r5
 80121e8:	d058      	beq.n	801229c <addTableToBuffer+0x144>
  freq_lidar += ALPHA_DELTA_FREQ * (freq_lidar_new - freq_lidar);
 80121ea:	ed9a 8a00 	vldr	s16, [sl]
 80121ee:	edd8 7a00 	vldr	s15, [r8]
 80121f2:	ee77 7ac8 	vsub.f32	s15, s15, s16
 80121f6:	ee17 0a90 	vmov	r0, s15
 80121fa:	f7ee f965 	bl	80004c8 <__aeabi_f2d>
 80121fe:	a372      	add	r3, pc, #456	; (adr r3, 80123c8 <addTableToBuffer+0x270>)
 8012200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012204:	f7ee f9b4 	bl	8000570 <__aeabi_dmul>
 8012208:	e9cd 0100 	strd	r0, r1, [sp]
 801220c:	ee18 0a10 	vmov	r0, s16
 8012210:	f7ee f95a 	bl	80004c8 <__aeabi_f2d>
 8012214:	4602      	mov	r2, r0
 8012216:	460b      	mov	r3, r1
 8012218:	e9dd 0100 	ldrd	r0, r1, [sp]
 801221c:	f7ed fff6 	bl	800020c <__adddf3>
 8012220:	f7ee fc9e 	bl	8000b60 <__aeabi_d2f>
 8012224:	ee07 0a90 	vmov	s15, r0
  freq_lidar_inc = (freq_lidar / ((float)DAC_FREQ)) * max_table_index;
 8012228:	4b70      	ldr	r3, [pc, #448]	; (80123ec <addTableToBuffer+0x294>)
  freq_lidar += ALPHA_DELTA_FREQ * (freq_lidar_new - freq_lidar);
 801222a:	f8ca 0000 	str.w	r0, [sl]
  freq_lidar_inc = (freq_lidar / ((float)DAC_FREQ)) * max_table_index;
 801222e:	ee27 7a89 	vmul.f32	s14, s15, s18
        table_val = waveTable[incrementIndex(freq_inc, freq_ind)];
 8012232:	9a03      	ldr	r2, [sp, #12]
  freq_lidar_inc = (freq_lidar / ((float)DAC_FREQ)) * max_table_index;
 8012234:	ed83 7a00 	vstr	s14, [r3]
  *freq_ind += (*freq_inc);
 8012238:	ed94 7a00 	vldr	s14, [r4]
 801223c:	edd7 7a00 	vldr	s15, [r7]
 8012240:	ee77 7a27 	vadd.f32	s15, s14, s15
  if ((*freq_ind) >= max_table_index) {
 8012244:	eef4 7ae8 	vcmpe.f32	s15, s17
 8012248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    (*freq_ind) -= max_table_index;
 801224c:	bfa8      	it	ge
 801224e:	ee77 7ae8 	vsubge.f32	s15, s15, s17
 8012252:	edc4 7a00 	vstr	s15, [r4]
  return (uint16_t)(*freq_ind);
 8012256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801225a:	edcd 7a00 	vstr	s15, [sp]
        table_val = waveTable[incrementIndex(freq_inc, freq_ind)];
 801225e:	f8bd 3000 	ldrh.w	r3, [sp]
 8012262:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012266:	f8a9 3000 	strh.w	r3, [r9]
        if(preWaveshape > 0){
 801226a:	2e00      	cmp	r6, #0
 801226c:	d0a5      	beq.n	80121ba <addTableToBuffer+0x62>
            if(preWaveshape == 1) table_val = CHEBYSHEV_4TH_256_DATA[table_val+127];
 801226e:	2e01      	cmp	r6, #1
 8012270:	d19f      	bne.n	80121b2 <addTableToBuffer+0x5a>
 8012272:	337f      	adds	r3, #127	; 0x7f
 8012274:	4a5e      	ldr	r2, [pc, #376]	; (80123f0 <addTableToBuffer+0x298>)
 8012276:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801227a:	f8a9 3000 	strh.w	r3, [r9]
 801227e:	e79c      	b.n	80121ba <addTableToBuffer+0x62>
            else if(preWaveshape == 2) table_val = WAVESHAPE_SIGMOID_DATA[table_val+127];
 8012280:	337f      	adds	r3, #127	; 0x7f
 8012282:	4a5c      	ldr	r2, [pc, #368]	; (80123f4 <addTableToBuffer+0x29c>)
 8012284:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012288:	f8a9 3000 	strh.w	r3, [r9]
 801228c:	e795      	b.n	80121ba <addTableToBuffer+0x62>
            else if(preWaveshape == 3) table_val = WAVESHAPE_TANH_DATA[table_val+127];
 801228e:	337f      	adds	r3, #127	; 0x7f
 8012290:	4a59      	ldr	r2, [pc, #356]	; (80123f8 <addTableToBuffer+0x2a0>)
 8012292:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012296:	f8a9 3000 	strh.w	r3, [r9]
 801229a:	e78e      	b.n	80121ba <addTableToBuffer+0x62>
}
 801229c:	b009      	add	sp, #36	; 0x24
 801229e:	ecbd 8b04 	vpop	{d8-d9}
 80122a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buffer[i] += ( ( (int32_t) (ampltiude_multiplier * (table_val * SCALE_OUTPUT) ) )) * signal_on * (*freq_multiplier);
 80122a6:	4b4d      	ldr	r3, [pc, #308]	; (80123dc <addTableToBuffer+0x284>)
        table_val = waveTable[incrementIndex(freq_inc, freq_ind)];
 80122a8:	494d      	ldr	r1, [pc, #308]	; (80123e0 <addTableToBuffer+0x288>)
        buffer[i] += ( ( (int32_t) (ampltiude_multiplier * (table_val * SCALE_OUTPUT) ) )) * signal_on * (*freq_multiplier);
 80122aa:	781b      	ldrb	r3, [r3, #0]
        if(preWaveshape > 0){
 80122ac:	4a4a      	ldr	r2, [pc, #296]	; (80123d8 <addTableToBuffer+0x280>)
        buffer[i] += ( ( (int32_t) (ampltiude_multiplier * (table_val * SCALE_OUTPUT) ) )) * signal_on * (*freq_multiplier);
 80122ae:	9306      	str	r3, [sp, #24]
 80122b0:	4b4d      	ldr	r3, [pc, #308]	; (80123e8 <addTableToBuffer+0x290>)
        table_val = waveTable[incrementIndex(freq_inc, freq_ind)];
 80122b2:	6809      	ldr	r1, [r1, #0]
 80122b4:	9303      	str	r3, [sp, #12]
 80122b6:	f200 33fe 	addw	r3, r0, #1022	; 0x3fe
 80122ba:	9105      	str	r1, [sp, #20]
        if(preWaveshape > 0){
 80122bc:	7816      	ldrb	r6, [r2, #0]
 80122be:	f8df a114 	ldr.w	sl, [pc, #276]	; 80123d4 <addTableToBuffer+0x27c>
 80122c2:	f8df b148 	ldr.w	fp, [pc, #328]	; 801240c <addTableToBuffer+0x2b4>
 80122c6:	9307      	str	r3, [sp, #28]
 80122c8:	1e85      	subs	r5, r0, #2
 80122ca:	e05c      	b.n	8012386 <addTableToBuffer+0x22e>
	    (*freq_multiplier) = ADSR_table[*freq_sample_tracker];
 80122cc:	4a4b      	ldr	r2, [pc, #300]	; (80123fc <addTableToBuffer+0x2a4>)
	    (*freq_sample_tracker)++;
 80122ce:	3301      	adds	r3, #1
	    (*freq_multiplier) = ADSR_table[*freq_sample_tracker];
 80122d0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	    (*freq_sample_tracker)++;
 80122d4:	600b      	str	r3, [r1, #0]
	    (*freq_multiplier) = ADSR_table[*freq_sample_tracker];
 80122d6:	6810      	ldr	r0, [r2, #0]
	    (*freq_multiplier) = ADSR_table[*freq_sample_tracker];
 80122d8:	f7ee f8f6 	bl	80004c8 <__aeabi_f2d>
  *freq_ind += (*freq_inc);
 80122dc:	ed94 7a00 	vldr	s14, [r4]
 80122e0:	edd7 7a00 	vldr	s15, [r7]
	    (*freq_multiplier) = ADSR_table[*freq_sample_tracker];
 80122e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
        table_val = waveTable[incrementIndex(freq_inc, freq_ind)];
 80122e6:	9a05      	ldr	r2, [sp, #20]
  *freq_ind += (*freq_inc);
 80122e8:	ee77 7a27 	vadd.f32	s15, s14, s15
  if ((*freq_ind) >= max_table_index) {
 80122ec:	ed9a 7a00 	vldr	s14, [sl]
 80122f0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	    (*freq_multiplier) = ADSR_table[*freq_sample_tracker];
 80122f4:	4680      	mov	r8, r0
  if ((*freq_ind) >= max_table_index) {
 80122f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80122fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	    (*freq_multiplier) = ADSR_table[*freq_sample_tracker];
 80122fe:	4689      	mov	r9, r1
 8012300:	e9c3 8900 	strd	r8, r9, [r3]
  *freq_ind += (*freq_inc);
 8012304:	edc4 7a00 	vstr	s15, [r4]
    (*freq_ind) -= max_table_index;
 8012308:	bfa4      	itt	ge
 801230a:	ee77 7ac7 	vsubge.f32	s15, s15, s14
 801230e:	edc4 7a00 	vstrge	s15, [r4]
  return (uint16_t)(*freq_ind);
 8012312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012316:	edcd 7a00 	vstr	s15, [sp]
        table_val = waveTable[incrementIndex(freq_inc, freq_ind)];
 801231a:	f8bd 3000 	ldrh.w	r3, [sp]
 801231e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012322:	9a03      	ldr	r2, [sp, #12]
 8012324:	8013      	strh	r3, [r2, #0]
        if(preWaveshape > 0){
 8012326:	b12e      	cbz	r6, 8012334 <addTableToBuffer+0x1dc>
            if(preWaveshape == 1) table_val = CHEBYSHEV_4TH_256_DATA[table_val+127];
 8012328:	2e01      	cmp	r6, #1
 801232a:	d036      	beq.n	801239a <addTableToBuffer+0x242>
            else if(preWaveshape == 2) table_val = WAVESHAPE_SIGMOID_DATA[table_val+127];
 801232c:	2e02      	cmp	r6, #2
 801232e:	d03b      	beq.n	80123a8 <addTableToBuffer+0x250>
            else if(preWaveshape == 3) table_val = WAVESHAPE_TANH_DATA[table_val+127];
 8012330:	2e03      	cmp	r6, #3
 8012332:	d040      	beq.n	80123b6 <addTableToBuffer+0x25e>
        buffer[i] += ( ( (int32_t) (ampltiude_multiplier * (table_val * SCALE_OUTPUT) ) )) * signal_on * (*freq_multiplier);
 8012334:	005b      	lsls	r3, r3, #1
 8012336:	ee07 3a90 	vmov	s15, r3
 801233a:	ed9b 7a00 	vldr	s14, [fp]
 801233e:	9b06      	ldr	r3, [sp, #24]
 8012340:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012344:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012348:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801234c:	ee17 0a90 	vmov	r0, s15
 8012350:	fb03 f000 	mul.w	r0, r3, r0
 8012354:	f7ee f8a6 	bl	80004a4 <__aeabi_i2d>
 8012358:	4642      	mov	r2, r8
 801235a:	464b      	mov	r3, r9
 801235c:	f7ee f908 	bl	8000570 <__aeabi_dmul>
 8012360:	4680      	mov	r8, r0
 8012362:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
 8012366:	4689      	mov	r9, r1
 8012368:	f7ee f89c 	bl	80004a4 <__aeabi_i2d>
 801236c:	460b      	mov	r3, r1
 801236e:	4602      	mov	r2, r0
 8012370:	4649      	mov	r1, r9
 8012372:	4640      	mov	r0, r8
 8012374:	f7ed ff4a 	bl	800020c <__adddf3>
 8012378:	f7ee fbaa 	bl	8000ad0 <__aeabi_d2iz>
      for (int i = 0; i < BUFFER_SIZE; i++) {
 801237c:	9b07      	ldr	r3, [sp, #28]
        buffer[i] += ( ( (int32_t) (ampltiude_multiplier * (table_val * SCALE_OUTPUT) ) )) * signal_on * (*freq_multiplier);
 801237e:	f825 0f02 	strh.w	r0, [r5, #2]!
      for (int i = 0; i < BUFFER_SIZE; i++) {
 8012382:	42ab      	cmp	r3, r5
 8012384:	d08a      	beq.n	801229c <addTableToBuffer+0x144>
	if( (*freq_sample_tracker) < DELAY_SAMPLES){
 8012386:	9904      	ldr	r1, [sp, #16]
 8012388:	4a1d      	ldr	r2, [pc, #116]	; (8012400 <addTableToBuffer+0x2a8>)
 801238a:	680b      	ldr	r3, [r1, #0]
 801238c:	4293      	cmp	r3, r2
 801238e:	d99d      	bls.n	80122cc <addTableToBuffer+0x174>
	    (*freq_multiplier) = ADSR_table[*freq_sample_tracker];
 8012390:	4a1a      	ldr	r2, [pc, #104]	; (80123fc <addTableToBuffer+0x2a4>)
 8012392:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012396:	6818      	ldr	r0, [r3, #0]
 8012398:	e79e      	b.n	80122d8 <addTableToBuffer+0x180>
            if(preWaveshape == 1) table_val = CHEBYSHEV_4TH_256_DATA[table_val+127];
 801239a:	4a15      	ldr	r2, [pc, #84]	; (80123f0 <addTableToBuffer+0x298>)
 801239c:	337f      	adds	r3, #127	; 0x7f
 801239e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80123a2:	9a03      	ldr	r2, [sp, #12]
 80123a4:	8013      	strh	r3, [r2, #0]
 80123a6:	e7c5      	b.n	8012334 <addTableToBuffer+0x1dc>
            else if(preWaveshape == 2) table_val = WAVESHAPE_SIGMOID_DATA[table_val+127];
 80123a8:	4a12      	ldr	r2, [pc, #72]	; (80123f4 <addTableToBuffer+0x29c>)
 80123aa:	337f      	adds	r3, #127	; 0x7f
 80123ac:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80123b0:	9a03      	ldr	r2, [sp, #12]
 80123b2:	8013      	strh	r3, [r2, #0]
 80123b4:	e7be      	b.n	8012334 <addTableToBuffer+0x1dc>
            else if(preWaveshape == 3) table_val = WAVESHAPE_TANH_DATA[table_val+127];
 80123b6:	4a10      	ldr	r2, [pc, #64]	; (80123f8 <addTableToBuffer+0x2a0>)
 80123b8:	337f      	adds	r3, #127	; 0x7f
 80123ba:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80123be:	9a03      	ldr	r2, [sp, #12]
 80123c0:	8013      	strh	r3, [r2, #0]
 80123c2:	e7b7      	b.n	8012334 <addTableToBuffer+0x1dc>
 80123c4:	f3af 8000 	nop.w
 80123c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80123cc:	3f50624d 	.word	0x3f50624d
 80123d0:	200053f4 	.word	0x200053f4
 80123d4:	20000058 	.word	0x20000058
 80123d8:	200053fe 	.word	0x200053fe
 80123dc:	2000005d 	.word	0x2000005d
 80123e0:	2007db0c 	.word	0x2007db0c
 80123e4:	37d1b717 	.word	0x37d1b717
 80123e8:	200077dc 	.word	0x200077dc
 80123ec:	20006fbc 	.word	0x20006fbc
 80123f0:	08082ae4 	.word	0x08082ae4
 80123f4:	080836e4 	.word	0x080836e4
 80123f8:	080838e4 	.word	0x080838e4
 80123fc:	08017424 	.word	0x08017424
 8012400:	0001116f 	.word	0x0001116f
 8012404:	20000054 	.word	0x20000054
 8012408:	200053e8 	.word	0x200053e8
 801240c:	20005310 	.word	0x20005310

08012410 <fillBuffer.part.2>:
void fillBuffer(q15_t* buffer) {
 8012410:	b510      	push	{r4, lr}
    if (LED_State(CAP_1_LED_PORT, CAP_1_LED_PIN)) {
 8012412:	2120      	movs	r1, #32
void fillBuffer(q15_t* buffer) {
 8012414:	b082      	sub	sp, #8
 8012416:	4604      	mov	r4, r0
    if (LED_State(CAP_1_LED_PORT, CAP_1_LED_PIN)) {
 8012418:	2003      	movs	r0, #3
 801241a:	f7fe f94b 	bl	80106b4 <LED_State>
 801241e:	2800      	cmp	r0, #0
 8012420:	f040 810d 	bne.w	801263e <fillBuffer.part.2+0x22e>
	if( (freq_1_sample_tracker != 0) && (freq_1_sample_tracker < RELEASE_SAMPLES) ){
 8012424:	4ba6      	ldr	r3, [pc, #664]	; (80126c0 <fillBuffer.part.2+0x2b0>)
 8012426:	49a7      	ldr	r1, [pc, #668]	; (80126c4 <fillBuffer.part.2+0x2b4>)
 8012428:	681a      	ldr	r2, [r3, #0]
 801242a:	3a01      	subs	r2, #1
 801242c:	428a      	cmp	r2, r1
 801242e:	f240 812f 	bls.w	8012690 <fillBuffer.part.2+0x280>
    if (LED_State(CAP_2_LED_PORT, CAP_2_LED_PIN)) {
 8012432:	2110      	movs	r1, #16
 8012434:	2003      	movs	r0, #3
 8012436:	f7fe f93d 	bl	80106b4 <LED_State>
 801243a:	2800      	cmp	r0, #0
 801243c:	f040 80f6 	bne.w	801262c <fillBuffer.part.2+0x21c>
	if( (freq_2_sample_tracker != 0) && (freq_2_sample_tracker < RELEASE_SAMPLES) ){
 8012440:	4ba1      	ldr	r3, [pc, #644]	; (80126c8 <fillBuffer.part.2+0x2b8>)
 8012442:	49a0      	ldr	r1, [pc, #640]	; (80126c4 <fillBuffer.part.2+0x2b4>)
 8012444:	681a      	ldr	r2, [r3, #0]
 8012446:	3a01      	subs	r2, #1
 8012448:	428a      	cmp	r2, r1
 801244a:	f240 8119 	bls.w	8012680 <fillBuffer.part.2+0x270>
    if (LED_State(CAP_3_LED_PORT, CAP_3_LED_PIN)) {
 801244e:	2108      	movs	r1, #8
 8012450:	2003      	movs	r0, #3
 8012452:	f7fe f92f 	bl	80106b4 <LED_State>
 8012456:	2800      	cmp	r0, #0
 8012458:	f040 80df 	bne.w	801261a <fillBuffer.part.2+0x20a>
	if( (freq_3_sample_tracker != 0) && (freq_3_sample_tracker < RELEASE_SAMPLES) ){
 801245c:	4b9b      	ldr	r3, [pc, #620]	; (80126cc <fillBuffer.part.2+0x2bc>)
 801245e:	4999      	ldr	r1, [pc, #612]	; (80126c4 <fillBuffer.part.2+0x2b4>)
 8012460:	681a      	ldr	r2, [r3, #0]
 8012462:	3a01      	subs	r2, #1
 8012464:	428a      	cmp	r2, r1
 8012466:	f240 8123 	bls.w	80126b0 <fillBuffer.part.2+0x2a0>
    if (LED_State(CAP_4_LED_PORT, CAP_4_LED_PIN)) {
 801246a:	2104      	movs	r1, #4
 801246c:	2003      	movs	r0, #3
 801246e:	f7fe f921 	bl	80106b4 <LED_State>
 8012472:	2800      	cmp	r0, #0
 8012474:	f040 80c8 	bne.w	8012608 <fillBuffer.part.2+0x1f8>
	if( (freq_4_sample_tracker != 0) && (freq_4_sample_tracker < RELEASE_SAMPLES) ){
 8012478:	4b95      	ldr	r3, [pc, #596]	; (80126d0 <fillBuffer.part.2+0x2c0>)
 801247a:	4992      	ldr	r1, [pc, #584]	; (80126c4 <fillBuffer.part.2+0x2b4>)
 801247c:	681a      	ldr	r2, [r3, #0]
 801247e:	3a01      	subs	r2, #1
 8012480:	428a      	cmp	r2, r1
 8012482:	f240 810d 	bls.w	80126a0 <fillBuffer.part.2+0x290>
    if (LED_State(CAP_5_LED_PORT, CAP_5_LED_PIN)) {
 8012486:	2102      	movs	r1, #2
 8012488:	2003      	movs	r0, #3
 801248a:	f7fe f913 	bl	80106b4 <LED_State>
 801248e:	2800      	cmp	r0, #0
 8012490:	f040 80b1 	bne.w	80125f6 <fillBuffer.part.2+0x1e6>
	if( (freq_5_sample_tracker != 0) && (freq_5_sample_tracker < RELEASE_SAMPLES) ){
 8012494:	4b8f      	ldr	r3, [pc, #572]	; (80126d4 <fillBuffer.part.2+0x2c4>)
 8012496:	498b      	ldr	r1, [pc, #556]	; (80126c4 <fillBuffer.part.2+0x2b4>)
 8012498:	681a      	ldr	r2, [r3, #0]
 801249a:	3a01      	subs	r2, #1
 801249c:	428a      	cmp	r2, r1
 801249e:	f240 8179 	bls.w	8012794 <fillBuffer.part.2+0x384>
    if (LED_State(CAP_6_LED_PORT, CAP_6_LED_PIN)) {
 80124a2:	2101      	movs	r1, #1
 80124a4:	2003      	movs	r0, #3
 80124a6:	f7fe f905 	bl	80106b4 <LED_State>
 80124aa:	2800      	cmp	r0, #0
 80124ac:	f040 809a 	bne.w	80125e4 <fillBuffer.part.2+0x1d4>
	if( (freq_6_sample_tracker != 0) && (freq_6_sample_tracker < RELEASE_SAMPLES) ){
 80124b0:	4b89      	ldr	r3, [pc, #548]	; (80126d8 <fillBuffer.part.2+0x2c8>)
 80124b2:	4984      	ldr	r1, [pc, #528]	; (80126c4 <fillBuffer.part.2+0x2b4>)
 80124b4:	681a      	ldr	r2, [r3, #0]
 80124b6:	3a01      	subs	r2, #1
 80124b8:	428a      	cmp	r2, r1
 80124ba:	f240 8163 	bls.w	8012784 <fillBuffer.part.2+0x374>
    if (LED_State(CAP_7_LED_PORT, CAP_7_LED_PIN)) {
 80124be:	2180      	movs	r1, #128	; 0x80
 80124c0:	2002      	movs	r0, #2
 80124c2:	f7fe f8f7 	bl	80106b4 <LED_State>
 80124c6:	2800      	cmp	r0, #0
 80124c8:	f040 8083 	bne.w	80125d2 <fillBuffer.part.2+0x1c2>
	if( (freq_7_sample_tracker != 0) && (freq_7_sample_tracker < RELEASE_SAMPLES) ){
 80124cc:	4b83      	ldr	r3, [pc, #524]	; (80126dc <fillBuffer.part.2+0x2cc>)
 80124ce:	497d      	ldr	r1, [pc, #500]	; (80126c4 <fillBuffer.part.2+0x2b4>)
 80124d0:	681a      	ldr	r2, [r3, #0]
 80124d2:	3a01      	subs	r2, #1
 80124d4:	428a      	cmp	r2, r1
 80124d6:	f240 816d 	bls.w	80127b4 <fillBuffer.part.2+0x3a4>
    if (LED_State(CAP_8_LED_PORT, CAP_8_LED_PIN)) {
 80124da:	2140      	movs	r1, #64	; 0x40
 80124dc:	2002      	movs	r0, #2
 80124de:	f7fe f8e9 	bl	80106b4 <LED_State>
 80124e2:	2800      	cmp	r0, #0
 80124e4:	d16c      	bne.n	80125c0 <fillBuffer.part.2+0x1b0>
	if( (freq_8_sample_tracker != 0) && (freq_8_sample_tracker < RELEASE_SAMPLES) ){
 80124e6:	4b7e      	ldr	r3, [pc, #504]	; (80126e0 <fillBuffer.part.2+0x2d0>)
 80124e8:	4976      	ldr	r1, [pc, #472]	; (80126c4 <fillBuffer.part.2+0x2b4>)
 80124ea:	681a      	ldr	r2, [r3, #0]
 80124ec:	3a01      	subs	r2, #1
 80124ee:	428a      	cmp	r2, r1
 80124f0:	f240 8158 	bls.w	80127a4 <fillBuffer.part.2+0x394>
    if (LED_State(CAP_9_LED_PORT, CAP_9_LED_PIN)) {
 80124f4:	2120      	movs	r1, #32
 80124f6:	2002      	movs	r0, #2
 80124f8:	f7fe f8dc 	bl	80106b4 <LED_State>
 80124fc:	2800      	cmp	r0, #0
 80124fe:	d156      	bne.n	80125ae <fillBuffer.part.2+0x19e>
	if( (freq_9_sample_tracker != 0) && (freq_9_sample_tracker < RELEASE_SAMPLES) ){
 8012500:	4b78      	ldr	r3, [pc, #480]	; (80126e4 <fillBuffer.part.2+0x2d4>)
 8012502:	4970      	ldr	r1, [pc, #448]	; (80126c4 <fillBuffer.part.2+0x2b4>)
 8012504:	681a      	ldr	r2, [r3, #0]
 8012506:	3a01      	subs	r2, #1
 8012508:	428a      	cmp	r2, r1
 801250a:	f240 80b1 	bls.w	8012670 <fillBuffer.part.2+0x260>
    if (LED_State(CAP_10_LED_PORT, CAP_10_LED_PIN)) {
 801250e:	2110      	movs	r1, #16
 8012510:	2002      	movs	r0, #2
 8012512:	f7fe f8cf 	bl	80106b4 <LED_State>
 8012516:	2800      	cmp	r0, #0
 8012518:	d140      	bne.n	801259c <fillBuffer.part.2+0x18c>
      if( (freq_10_sample_tracker != 0) && (freq_10_sample_tracker < RELEASE_SAMPLES) ){
 801251a:	4b73      	ldr	r3, [pc, #460]	; (80126e8 <fillBuffer.part.2+0x2d8>)
 801251c:	4969      	ldr	r1, [pc, #420]	; (80126c4 <fillBuffer.part.2+0x2b4>)
 801251e:	681a      	ldr	r2, [r3, #0]
 8012520:	3a01      	subs	r2, #1
 8012522:	428a      	cmp	r2, r1
 8012524:	f240 809c 	bls.w	8012660 <fillBuffer.part.2+0x250>
    if (LED_State(CAP_11_LED_PORT, CAP_11_LED_PIN)) {
 8012528:	2108      	movs	r1, #8
 801252a:	2002      	movs	r0, #2
 801252c:	f7fe f8c2 	bl	80106b4 <LED_State>
 8012530:	b9e0      	cbnz	r0, 801256c <fillBuffer.part.2+0x15c>
	if( (freq_11_sample_tracker != 0) && (freq_11_sample_tracker < RELEASE_SAMPLES) ){
 8012532:	4b6e      	ldr	r3, [pc, #440]	; (80126ec <fillBuffer.part.2+0x2dc>)
 8012534:	4963      	ldr	r1, [pc, #396]	; (80126c4 <fillBuffer.part.2+0x2b4>)
 8012536:	681a      	ldr	r2, [r3, #0]
 8012538:	3a01      	subs	r2, #1
 801253a:	428a      	cmp	r2, r1
 801253c:	f240 8088 	bls.w	8012650 <fillBuffer.part.2+0x240>
    if (LED_State(CAP_12_LED_PORT, CAP_12_LED_PIN)) {
 8012540:	2104      	movs	r1, #4
 8012542:	2002      	movs	r0, #2
 8012544:	f7fe f8b6 	bl	80106b4 <LED_State>
 8012548:	b9f0      	cbnz	r0, 8012588 <fillBuffer.part.2+0x178>
	if( (freq_12_sample_tracker != 0) && (freq_12_sample_tracker < RELEASE_SAMPLES) ){
 801254a:	4b69      	ldr	r3, [pc, #420]	; (80126f0 <fillBuffer.part.2+0x2e0>)
 801254c:	495d      	ldr	r1, [pc, #372]	; (80126c4 <fillBuffer.part.2+0x2b4>)
 801254e:	681a      	ldr	r2, [r3, #0]
 8012550:	3a01      	subs	r2, #1
 8012552:	428a      	cmp	r2, r1
 8012554:	d901      	bls.n	801255a <fillBuffer.part.2+0x14a>
}
 8012556:	b002      	add	sp, #8
 8012558:	bd10      	pop	{r4, pc}
		    releaseHandler(buffer, &freq_12_inc, &freq_12_ind, &freq_12_sample_tracker, &freq_12_multiplier);
 801255a:	4a66      	ldr	r2, [pc, #408]	; (80126f4 <fillBuffer.part.2+0x2e4>)
 801255c:	9200      	str	r2, [sp, #0]
 801255e:	4620      	mov	r0, r4
 8012560:	4a65      	ldr	r2, [pc, #404]	; (80126f8 <fillBuffer.part.2+0x2e8>)
 8012562:	4966      	ldr	r1, [pc, #408]	; (80126fc <fillBuffer.part.2+0x2ec>)
 8012564:	f7ff fd3c 	bl	8011fe0 <releaseHandler>
}
 8012568:	b002      	add	sp, #8
 801256a:	bd10      	pop	{r4, pc}
      addTableToBuffer(buffer, &freq_11_inc, &freq_11_ind, &freq_11_sample_tracker, &freq_11_multiplier);
 801256c:	4b64      	ldr	r3, [pc, #400]	; (8012700 <fillBuffer.part.2+0x2f0>)
 801256e:	9300      	str	r3, [sp, #0]
 8012570:	4964      	ldr	r1, [pc, #400]	; (8012704 <fillBuffer.part.2+0x2f4>)
 8012572:	4b5e      	ldr	r3, [pc, #376]	; (80126ec <fillBuffer.part.2+0x2dc>)
 8012574:	4a64      	ldr	r2, [pc, #400]	; (8012708 <fillBuffer.part.2+0x2f8>)
 8012576:	4620      	mov	r0, r4
 8012578:	f7ff fdee 	bl	8012158 <addTableToBuffer>
    if (LED_State(CAP_12_LED_PORT, CAP_12_LED_PIN)) {
 801257c:	2104      	movs	r1, #4
 801257e:	2002      	movs	r0, #2
 8012580:	f7fe f898 	bl	80106b4 <LED_State>
 8012584:	2800      	cmp	r0, #0
 8012586:	d0e0      	beq.n	801254a <fillBuffer.part.2+0x13a>
      addTableToBuffer(buffer, &freq_12_inc, &freq_12_ind, &freq_12_sample_tracker, &freq_12_multiplier);
 8012588:	4b5a      	ldr	r3, [pc, #360]	; (80126f4 <fillBuffer.part.2+0x2e4>)
 801258a:	9300      	str	r3, [sp, #0]
 801258c:	4620      	mov	r0, r4
 801258e:	4b58      	ldr	r3, [pc, #352]	; (80126f0 <fillBuffer.part.2+0x2e0>)
 8012590:	4a59      	ldr	r2, [pc, #356]	; (80126f8 <fillBuffer.part.2+0x2e8>)
 8012592:	495a      	ldr	r1, [pc, #360]	; (80126fc <fillBuffer.part.2+0x2ec>)
 8012594:	f7ff fde0 	bl	8012158 <addTableToBuffer>
}
 8012598:	b002      	add	sp, #8
 801259a:	bd10      	pop	{r4, pc}
      addTableToBuffer(buffer, &freq_10_inc, &freq_10_ind, &freq_10_sample_tracker, &freq_10_multiplier);
 801259c:	4b5b      	ldr	r3, [pc, #364]	; (801270c <fillBuffer.part.2+0x2fc>)
 801259e:	9300      	str	r3, [sp, #0]
 80125a0:	4a5b      	ldr	r2, [pc, #364]	; (8012710 <fillBuffer.part.2+0x300>)
 80125a2:	4b51      	ldr	r3, [pc, #324]	; (80126e8 <fillBuffer.part.2+0x2d8>)
 80125a4:	495b      	ldr	r1, [pc, #364]	; (8012714 <fillBuffer.part.2+0x304>)
 80125a6:	4620      	mov	r0, r4
 80125a8:	f7ff fdd6 	bl	8012158 <addTableToBuffer>
 80125ac:	e7bc      	b.n	8012528 <fillBuffer.part.2+0x118>
      addTableToBuffer(buffer, &freq_9_inc, &freq_9_ind, &freq_9_sample_tracker, &freq_9_multiplier);
 80125ae:	4b5a      	ldr	r3, [pc, #360]	; (8012718 <fillBuffer.part.2+0x308>)
 80125b0:	9300      	str	r3, [sp, #0]
 80125b2:	4a5a      	ldr	r2, [pc, #360]	; (801271c <fillBuffer.part.2+0x30c>)
 80125b4:	4b4b      	ldr	r3, [pc, #300]	; (80126e4 <fillBuffer.part.2+0x2d4>)
 80125b6:	495a      	ldr	r1, [pc, #360]	; (8012720 <fillBuffer.part.2+0x310>)
 80125b8:	4620      	mov	r0, r4
 80125ba:	f7ff fdcd 	bl	8012158 <addTableToBuffer>
 80125be:	e7a6      	b.n	801250e <fillBuffer.part.2+0xfe>
      addTableToBuffer(buffer, &freq_8_inc, &freq_8_ind, &freq_8_sample_tracker, &freq_8_multiplier);
 80125c0:	4b58      	ldr	r3, [pc, #352]	; (8012724 <fillBuffer.part.2+0x314>)
 80125c2:	9300      	str	r3, [sp, #0]
 80125c4:	4a58      	ldr	r2, [pc, #352]	; (8012728 <fillBuffer.part.2+0x318>)
 80125c6:	4b46      	ldr	r3, [pc, #280]	; (80126e0 <fillBuffer.part.2+0x2d0>)
 80125c8:	4958      	ldr	r1, [pc, #352]	; (801272c <fillBuffer.part.2+0x31c>)
 80125ca:	4620      	mov	r0, r4
 80125cc:	f7ff fdc4 	bl	8012158 <addTableToBuffer>
 80125d0:	e790      	b.n	80124f4 <fillBuffer.part.2+0xe4>
      addTableToBuffer(buffer, &freq_7_inc, &freq_7_ind, &freq_7_sample_tracker, &freq_7_multiplier);
 80125d2:	4b57      	ldr	r3, [pc, #348]	; (8012730 <fillBuffer.part.2+0x320>)
 80125d4:	9300      	str	r3, [sp, #0]
 80125d6:	4a57      	ldr	r2, [pc, #348]	; (8012734 <fillBuffer.part.2+0x324>)
 80125d8:	4b40      	ldr	r3, [pc, #256]	; (80126dc <fillBuffer.part.2+0x2cc>)
 80125da:	4957      	ldr	r1, [pc, #348]	; (8012738 <fillBuffer.part.2+0x328>)
 80125dc:	4620      	mov	r0, r4
 80125de:	f7ff fdbb 	bl	8012158 <addTableToBuffer>
 80125e2:	e77a      	b.n	80124da <fillBuffer.part.2+0xca>
      addTableToBuffer(buffer, &freq_6_inc, &freq_6_ind, &freq_6_sample_tracker, &freq_6_multiplier);
 80125e4:	4b55      	ldr	r3, [pc, #340]	; (801273c <fillBuffer.part.2+0x32c>)
 80125e6:	9300      	str	r3, [sp, #0]
 80125e8:	4a55      	ldr	r2, [pc, #340]	; (8012740 <fillBuffer.part.2+0x330>)
 80125ea:	4b3b      	ldr	r3, [pc, #236]	; (80126d8 <fillBuffer.part.2+0x2c8>)
 80125ec:	4955      	ldr	r1, [pc, #340]	; (8012744 <fillBuffer.part.2+0x334>)
 80125ee:	4620      	mov	r0, r4
 80125f0:	f7ff fdb2 	bl	8012158 <addTableToBuffer>
 80125f4:	e763      	b.n	80124be <fillBuffer.part.2+0xae>
      addTableToBuffer(buffer, &freq_5_inc, &freq_5_ind, &freq_5_sample_tracker, &freq_5_multiplier);
 80125f6:	4b54      	ldr	r3, [pc, #336]	; (8012748 <fillBuffer.part.2+0x338>)
 80125f8:	9300      	str	r3, [sp, #0]
 80125fa:	4a54      	ldr	r2, [pc, #336]	; (801274c <fillBuffer.part.2+0x33c>)
 80125fc:	4b35      	ldr	r3, [pc, #212]	; (80126d4 <fillBuffer.part.2+0x2c4>)
 80125fe:	4954      	ldr	r1, [pc, #336]	; (8012750 <fillBuffer.part.2+0x340>)
 8012600:	4620      	mov	r0, r4
 8012602:	f7ff fda9 	bl	8012158 <addTableToBuffer>
 8012606:	e74c      	b.n	80124a2 <fillBuffer.part.2+0x92>
      addTableToBuffer(buffer, &freq_4_inc, &freq_4_ind, &freq_4_sample_tracker, &freq_4_multiplier);
 8012608:	4b52      	ldr	r3, [pc, #328]	; (8012754 <fillBuffer.part.2+0x344>)
 801260a:	9300      	str	r3, [sp, #0]
 801260c:	4a52      	ldr	r2, [pc, #328]	; (8012758 <fillBuffer.part.2+0x348>)
 801260e:	4b30      	ldr	r3, [pc, #192]	; (80126d0 <fillBuffer.part.2+0x2c0>)
 8012610:	4952      	ldr	r1, [pc, #328]	; (801275c <fillBuffer.part.2+0x34c>)
 8012612:	4620      	mov	r0, r4
 8012614:	f7ff fda0 	bl	8012158 <addTableToBuffer>
 8012618:	e735      	b.n	8012486 <fillBuffer.part.2+0x76>
      addTableToBuffer(buffer, &freq_3_inc, &freq_3_ind, &freq_3_sample_tracker, &freq_3_multiplier);
 801261a:	4b51      	ldr	r3, [pc, #324]	; (8012760 <fillBuffer.part.2+0x350>)
 801261c:	9300      	str	r3, [sp, #0]
 801261e:	4a51      	ldr	r2, [pc, #324]	; (8012764 <fillBuffer.part.2+0x354>)
 8012620:	4b2a      	ldr	r3, [pc, #168]	; (80126cc <fillBuffer.part.2+0x2bc>)
 8012622:	4951      	ldr	r1, [pc, #324]	; (8012768 <fillBuffer.part.2+0x358>)
 8012624:	4620      	mov	r0, r4
 8012626:	f7ff fd97 	bl	8012158 <addTableToBuffer>
 801262a:	e71e      	b.n	801246a <fillBuffer.part.2+0x5a>
      addTableToBuffer(buffer, &freq_2_inc, &freq_2_ind, &freq_2_sample_tracker, &freq_2_multiplier);
 801262c:	4b4f      	ldr	r3, [pc, #316]	; (801276c <fillBuffer.part.2+0x35c>)
 801262e:	9300      	str	r3, [sp, #0]
 8012630:	4a4f      	ldr	r2, [pc, #316]	; (8012770 <fillBuffer.part.2+0x360>)
 8012632:	4b25      	ldr	r3, [pc, #148]	; (80126c8 <fillBuffer.part.2+0x2b8>)
 8012634:	494f      	ldr	r1, [pc, #316]	; (8012774 <fillBuffer.part.2+0x364>)
 8012636:	4620      	mov	r0, r4
 8012638:	f7ff fd8e 	bl	8012158 <addTableToBuffer>
 801263c:	e707      	b.n	801244e <fillBuffer.part.2+0x3e>
      addTableToBuffer(buffer, &freq_1_inc, &freq_1_ind, &freq_1_sample_tracker, &freq_1_multiplier);
 801263e:	4b4e      	ldr	r3, [pc, #312]	; (8012778 <fillBuffer.part.2+0x368>)
 8012640:	9300      	str	r3, [sp, #0]
 8012642:	4a4e      	ldr	r2, [pc, #312]	; (801277c <fillBuffer.part.2+0x36c>)
 8012644:	4b1e      	ldr	r3, [pc, #120]	; (80126c0 <fillBuffer.part.2+0x2b0>)
 8012646:	494e      	ldr	r1, [pc, #312]	; (8012780 <fillBuffer.part.2+0x370>)
 8012648:	4620      	mov	r0, r4
 801264a:	f7ff fd85 	bl	8012158 <addTableToBuffer>
 801264e:	e6f0      	b.n	8012432 <fillBuffer.part.2+0x22>
		    releaseHandler(buffer, &freq_11_inc, &freq_11_ind, &freq_11_sample_tracker, &freq_11_multiplier);
 8012650:	4a2b      	ldr	r2, [pc, #172]	; (8012700 <fillBuffer.part.2+0x2f0>)
 8012652:	9200      	str	r2, [sp, #0]
 8012654:	492b      	ldr	r1, [pc, #172]	; (8012704 <fillBuffer.part.2+0x2f4>)
 8012656:	4a2c      	ldr	r2, [pc, #176]	; (8012708 <fillBuffer.part.2+0x2f8>)
 8012658:	4620      	mov	r0, r4
 801265a:	f7ff fcc1 	bl	8011fe0 <releaseHandler>
 801265e:	e76f      	b.n	8012540 <fillBuffer.part.2+0x130>
	    releaseHandler(buffer, &freq_10_inc, &freq_10_ind, &freq_10_sample_tracker, &freq_10_multiplier);
 8012660:	4a2a      	ldr	r2, [pc, #168]	; (801270c <fillBuffer.part.2+0x2fc>)
 8012662:	9200      	str	r2, [sp, #0]
 8012664:	492b      	ldr	r1, [pc, #172]	; (8012714 <fillBuffer.part.2+0x304>)
 8012666:	4a2a      	ldr	r2, [pc, #168]	; (8012710 <fillBuffer.part.2+0x300>)
 8012668:	4620      	mov	r0, r4
 801266a:	f7ff fcb9 	bl	8011fe0 <releaseHandler>
 801266e:	e75b      	b.n	8012528 <fillBuffer.part.2+0x118>
		    releaseHandler(buffer, &freq_9_inc, &freq_9_ind, &freq_9_sample_tracker, &freq_9_multiplier);
 8012670:	4a29      	ldr	r2, [pc, #164]	; (8012718 <fillBuffer.part.2+0x308>)
 8012672:	9200      	str	r2, [sp, #0]
 8012674:	492a      	ldr	r1, [pc, #168]	; (8012720 <fillBuffer.part.2+0x310>)
 8012676:	4a29      	ldr	r2, [pc, #164]	; (801271c <fillBuffer.part.2+0x30c>)
 8012678:	4620      	mov	r0, r4
 801267a:	f7ff fcb1 	bl	8011fe0 <releaseHandler>
 801267e:	e746      	b.n	801250e <fillBuffer.part.2+0xfe>
		    releaseHandler(buffer, &freq_2_inc, &freq_2_ind, &freq_2_sample_tracker, &freq_2_multiplier);
 8012680:	4a3a      	ldr	r2, [pc, #232]	; (801276c <fillBuffer.part.2+0x35c>)
 8012682:	9200      	str	r2, [sp, #0]
 8012684:	493b      	ldr	r1, [pc, #236]	; (8012774 <fillBuffer.part.2+0x364>)
 8012686:	4a3a      	ldr	r2, [pc, #232]	; (8012770 <fillBuffer.part.2+0x360>)
 8012688:	4620      	mov	r0, r4
 801268a:	f7ff fca9 	bl	8011fe0 <releaseHandler>
 801268e:	e6de      	b.n	801244e <fillBuffer.part.2+0x3e>
	    releaseHandler(buffer, &freq_1_inc, &freq_1_ind, &freq_1_sample_tracker, &freq_1_multiplier);
 8012690:	4a39      	ldr	r2, [pc, #228]	; (8012778 <fillBuffer.part.2+0x368>)
 8012692:	9200      	str	r2, [sp, #0]
 8012694:	493a      	ldr	r1, [pc, #232]	; (8012780 <fillBuffer.part.2+0x370>)
 8012696:	4a39      	ldr	r2, [pc, #228]	; (801277c <fillBuffer.part.2+0x36c>)
 8012698:	4620      	mov	r0, r4
 801269a:	f7ff fca1 	bl	8011fe0 <releaseHandler>
 801269e:	e6c8      	b.n	8012432 <fillBuffer.part.2+0x22>
		    releaseHandler(buffer, &freq_4_inc, &freq_4_ind, &freq_4_sample_tracker, &freq_4_multiplier);
 80126a0:	4a2c      	ldr	r2, [pc, #176]	; (8012754 <fillBuffer.part.2+0x344>)
 80126a2:	9200      	str	r2, [sp, #0]
 80126a4:	492d      	ldr	r1, [pc, #180]	; (801275c <fillBuffer.part.2+0x34c>)
 80126a6:	4a2c      	ldr	r2, [pc, #176]	; (8012758 <fillBuffer.part.2+0x348>)
 80126a8:	4620      	mov	r0, r4
 80126aa:	f7ff fc99 	bl	8011fe0 <releaseHandler>
 80126ae:	e6ea      	b.n	8012486 <fillBuffer.part.2+0x76>
		    releaseHandler(buffer, &freq_3_inc, &freq_3_ind, &freq_3_sample_tracker, &freq_3_multiplier);
 80126b0:	4a2b      	ldr	r2, [pc, #172]	; (8012760 <fillBuffer.part.2+0x350>)
 80126b2:	9200      	str	r2, [sp, #0]
 80126b4:	492c      	ldr	r1, [pc, #176]	; (8012768 <fillBuffer.part.2+0x358>)
 80126b6:	4a2b      	ldr	r2, [pc, #172]	; (8012764 <fillBuffer.part.2+0x354>)
 80126b8:	4620      	mov	r0, r4
 80126ba:	f7ff fc91 	bl	8011fe0 <releaseHandler>
 80126be:	e6d4      	b.n	801246a <fillBuffer.part.2+0x5a>
 80126c0:	20005358 	.word	0x20005358
 80126c4:	00015f8e 	.word	0x00015f8e
 80126c8:	20005368 	.word	0x20005368
 80126cc:	20005378 	.word	0x20005378
 80126d0:	20005388 	.word	0x20005388
 80126d4:	20005398 	.word	0x20005398
 80126d8:	200053a8 	.word	0x200053a8
 80126dc:	200053b8 	.word	0x200053b8
 80126e0:	200053c8 	.word	0x200053c8
 80126e4:	200053d8 	.word	0x200053d8
 80126e8:	20005328 	.word	0x20005328
 80126ec:	20005338 	.word	0x20005338
 80126f0:	20005348 	.word	0x20005348
 80126f4:	20005340 	.word	0x20005340
 80126f8:	2000533c 	.word	0x2000533c
 80126fc:	2007d304 	.word	0x2007d304
 8012700:	20005330 	.word	0x20005330
 8012704:	200077e0 	.word	0x200077e0
 8012708:	2000532c 	.word	0x2000532c
 801270c:	20005320 	.word	0x20005320
 8012710:	20005318 	.word	0x20005318
 8012714:	2007d708 	.word	0x2007d708
 8012718:	200053d0 	.word	0x200053d0
 801271c:	200053cc 	.word	0x200053cc
 8012720:	200077d0 	.word	0x200077d0
 8012724:	200053c0 	.word	0x200053c0
 8012728:	200053bc 	.word	0x200053bc
 801272c:	2007db18 	.word	0x2007db18
 8012730:	200053b0 	.word	0x200053b0
 8012734:	200053ac 	.word	0x200053ac
 8012738:	20006fc0 	.word	0x20006fc0
 801273c:	200053a0 	.word	0x200053a0
 8012740:	2000539c 	.word	0x2000539c
 8012744:	200077cc 	.word	0x200077cc
 8012748:	20005390 	.word	0x20005390
 801274c:	2000538c 	.word	0x2000538c
 8012750:	200077d4 	.word	0x200077d4
 8012754:	20005380 	.word	0x20005380
 8012758:	2000537c 	.word	0x2000537c
 801275c:	200077d8 	.word	0x200077d8
 8012760:	20005370 	.word	0x20005370
 8012764:	2000536c 	.word	0x2000536c
 8012768:	20006fc8 	.word	0x20006fc8
 801276c:	20005360 	.word	0x20005360
 8012770:	2000535c 	.word	0x2000535c
 8012774:	20007bf4 	.word	0x20007bf4
 8012778:	20005350 	.word	0x20005350
 801277c:	2000534c 	.word	0x2000534c
 8012780:	200063b4 	.word	0x200063b4
		    releaseHandler(buffer, &freq_6_inc, &freq_6_ind, &freq_6_sample_tracker, &freq_6_multiplier);
 8012784:	4a0f      	ldr	r2, [pc, #60]	; (80127c4 <fillBuffer.part.2+0x3b4>)
 8012786:	9200      	str	r2, [sp, #0]
 8012788:	490f      	ldr	r1, [pc, #60]	; (80127c8 <fillBuffer.part.2+0x3b8>)
 801278a:	4a10      	ldr	r2, [pc, #64]	; (80127cc <fillBuffer.part.2+0x3bc>)
 801278c:	4620      	mov	r0, r4
 801278e:	f7ff fc27 	bl	8011fe0 <releaseHandler>
 8012792:	e694      	b.n	80124be <fillBuffer.part.2+0xae>
		    releaseHandler(buffer, &freq_5_inc, &freq_5_ind, &freq_5_sample_tracker, &freq_5_multiplier);
 8012794:	4a0e      	ldr	r2, [pc, #56]	; (80127d0 <fillBuffer.part.2+0x3c0>)
 8012796:	9200      	str	r2, [sp, #0]
 8012798:	490e      	ldr	r1, [pc, #56]	; (80127d4 <fillBuffer.part.2+0x3c4>)
 801279a:	4a0f      	ldr	r2, [pc, #60]	; (80127d8 <fillBuffer.part.2+0x3c8>)
 801279c:	4620      	mov	r0, r4
 801279e:	f7ff fc1f 	bl	8011fe0 <releaseHandler>
 80127a2:	e67e      	b.n	80124a2 <fillBuffer.part.2+0x92>
		    releaseHandler(buffer, &freq_8_inc, &freq_8_ind, &freq_8_sample_tracker, &freq_8_multiplier);
 80127a4:	4a0d      	ldr	r2, [pc, #52]	; (80127dc <fillBuffer.part.2+0x3cc>)
 80127a6:	9200      	str	r2, [sp, #0]
 80127a8:	490d      	ldr	r1, [pc, #52]	; (80127e0 <fillBuffer.part.2+0x3d0>)
 80127aa:	4a0e      	ldr	r2, [pc, #56]	; (80127e4 <fillBuffer.part.2+0x3d4>)
 80127ac:	4620      	mov	r0, r4
 80127ae:	f7ff fc17 	bl	8011fe0 <releaseHandler>
 80127b2:	e69f      	b.n	80124f4 <fillBuffer.part.2+0xe4>
		    releaseHandler(buffer, &freq_7_inc, &freq_7_ind, &freq_7_sample_tracker, &freq_7_multiplier);
 80127b4:	4a0c      	ldr	r2, [pc, #48]	; (80127e8 <fillBuffer.part.2+0x3d8>)
 80127b6:	9200      	str	r2, [sp, #0]
 80127b8:	490c      	ldr	r1, [pc, #48]	; (80127ec <fillBuffer.part.2+0x3dc>)
 80127ba:	4a0d      	ldr	r2, [pc, #52]	; (80127f0 <fillBuffer.part.2+0x3e0>)
 80127bc:	4620      	mov	r0, r4
 80127be:	f7ff fc0f 	bl	8011fe0 <releaseHandler>
 80127c2:	e68a      	b.n	80124da <fillBuffer.part.2+0xca>
 80127c4:	200053a0 	.word	0x200053a0
 80127c8:	200077cc 	.word	0x200077cc
 80127cc:	2000539c 	.word	0x2000539c
 80127d0:	20005390 	.word	0x20005390
 80127d4:	200077d4 	.word	0x200077d4
 80127d8:	2000538c 	.word	0x2000538c
 80127dc:	200053c0 	.word	0x200053c0
 80127e0:	2007db18 	.word	0x2007db18
 80127e4:	200053bc 	.word	0x200053bc
 80127e8:	200053b0 	.word	0x200053b0
 80127ec:	20006fc0 	.word	0x20006fc0
 80127f0:	200053ac 	.word	0x200053ac
 80127f4:	00000000 	.word	0x00000000

080127f8 <switchOctave>:
  }

  return (uint16_t)(*freq_ind);
}

void switchOctave(uint8_t des_octave) {
 80127f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  octave = des_octave;

  if(playbackStatus == 1){
 80127fa:	4bb9      	ldr	r3, [pc, #740]	; (8012ae0 <switchOctave+0x2e8>)
  octave = des_octave;
 80127fc:	4ab9      	ldr	r2, [pc, #740]	; (8012ae4 <switchOctave+0x2ec>)
  if(playbackStatus == 1){
 80127fe:	781b      	ldrb	r3, [r3, #0]
  octave = des_octave;
 8012800:	7010      	strb	r0, [r2, #0]
  if(playbackStatus == 1){
 8012802:	2b01      	cmp	r3, #1
 8012804:	f000 8089 	beq.w	801291a <switchOctave+0x122>
          freq_11_inc = ((((float) NOTE_A3S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
          freq_12_inc = ((((float) NOTE_B3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
        }
  }
  else{
      if (des_octave == 4) {
 8012808:	2804      	cmp	r0, #4
 801280a:	f000 8210 	beq.w	8012c2e <switchOctave+0x436>
          freq_8_inc = (((float) NOTE_G4 )/ DAC_FREQ) * max_table_index;
          freq_9_inc = (((float) NOTE_G4S )/ DAC_FREQ) * max_table_index;
          freq_10_inc = (((float) NOTE_A4 )/ DAC_FREQ) * max_table_index;
          freq_11_inc = (((float) NOTE_A4S )/ DAC_FREQ) * max_table_index;
          freq_12_inc = (((float) NOTE_B4) / DAC_FREQ) * max_table_index;
        } else if (des_octave == 5) {
 801280e:	2805      	cmp	r0, #5
 8012810:	f000 8184 	beq.w	8012b1c <switchOctave+0x324>
          freq_8_inc = (((float) NOTE_G5) / DAC_FREQ) * max_table_index;
          freq_9_inc = (((float) NOTE_G5S )/ DAC_FREQ) * max_table_index;
          freq_10_inc = (((float) NOTE_A5) / DAC_FREQ) * max_table_index;
          freq_11_inc = (((float) NOTE_A5S) / DAC_FREQ) * max_table_index;
          freq_12_inc = (((float) NOTE_B5 )/ DAC_FREQ) * max_table_index;
        } else if (des_octave == 3) {
 8012814:	2803      	cmp	r0, #3
 8012816:	d17f      	bne.n	8012918 <switchOctave+0x120>
          freq_1_inc = (((float) NOTE_C3 )/ DAC_FREQ) * max_table_index;
 8012818:	4bb3      	ldr	r3, [pc, #716]	; (8012ae8 <switchOctave+0x2f0>)
 801281a:	4fb4      	ldr	r7, [pc, #720]	; (8012aec <switchOctave+0x2f4>)
 801281c:	6818      	ldr	r0, [r3, #0]
          freq_2_inc = (((float) NOTE_C3S) / DAC_FREQ) * max_table_index;
 801281e:	4eb4      	ldr	r6, [pc, #720]	; (8012af0 <switchOctave+0x2f8>)
          freq_1_inc = (((float) NOTE_C3 )/ DAC_FREQ) * max_table_index;
 8012820:	f7ed fe30 	bl	8000484 <__aeabi_ui2d>
 8012824:	a382      	add	r3, pc, #520	; (adr r3, 8012a30 <switchOctave+0x238>)
 8012826:	e9d3 2300 	ldrd	r2, r3, [r3]
 801282a:	4604      	mov	r4, r0
 801282c:	460d      	mov	r5, r1
 801282e:	f7ed fe9f 	bl	8000570 <__aeabi_dmul>
 8012832:	f7ee f995 	bl	8000b60 <__aeabi_d2f>
          freq_2_inc = (((float) NOTE_C3S) / DAC_FREQ) * max_table_index;
 8012836:	a380      	add	r3, pc, #512	; (adr r3, 8012a38 <switchOctave+0x240>)
 8012838:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_1_inc = (((float) NOTE_C3 )/ DAC_FREQ) * max_table_index;
 801283c:	6038      	str	r0, [r7, #0]
          freq_2_inc = (((float) NOTE_C3S) / DAC_FREQ) * max_table_index;
 801283e:	4629      	mov	r1, r5
 8012840:	4620      	mov	r0, r4
 8012842:	f7ed fe95 	bl	8000570 <__aeabi_dmul>
 8012846:	f7ee f98b 	bl	8000b60 <__aeabi_d2f>
          freq_3_inc = (((float) NOTE_D3 )/ DAC_FREQ) * max_table_index;
 801284a:	a37d      	add	r3, pc, #500	; (adr r3, 8012a40 <switchOctave+0x248>)
 801284c:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_2_inc = (((float) NOTE_C3S) / DAC_FREQ) * max_table_index;
 8012850:	6030      	str	r0, [r6, #0]
          freq_3_inc = (((float) NOTE_D3 )/ DAC_FREQ) * max_table_index;
 8012852:	4629      	mov	r1, r5
 8012854:	4620      	mov	r0, r4
 8012856:	f7ed fe8b 	bl	8000570 <__aeabi_dmul>
 801285a:	f7ee f981 	bl	8000b60 <__aeabi_d2f>
 801285e:	4ba5      	ldr	r3, [pc, #660]	; (8012af4 <switchOctave+0x2fc>)
          freq_4_inc = (((float) NOTE_D3S )/ DAC_FREQ) * max_table_index;
 8012860:	4ea5      	ldr	r6, [pc, #660]	; (8012af8 <switchOctave+0x300>)
          freq_3_inc = (((float) NOTE_D3 )/ DAC_FREQ) * max_table_index;
 8012862:	6018      	str	r0, [r3, #0]
          freq_4_inc = (((float) NOTE_D3S )/ DAC_FREQ) * max_table_index;
 8012864:	4629      	mov	r1, r5
 8012866:	a378      	add	r3, pc, #480	; (adr r3, 8012a48 <switchOctave+0x250>)
 8012868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801286c:	4620      	mov	r0, r4
 801286e:	f7ed fe7f 	bl	8000570 <__aeabi_dmul>
 8012872:	f7ee f975 	bl	8000b60 <__aeabi_d2f>
          freq_5_inc = (((float) NOTE_E3 )/ DAC_FREQ) * max_table_index;
 8012876:	a376      	add	r3, pc, #472	; (adr r3, 8012a50 <switchOctave+0x258>)
 8012878:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_4_inc = (((float) NOTE_D3S )/ DAC_FREQ) * max_table_index;
 801287c:	6030      	str	r0, [r6, #0]
          freq_5_inc = (((float) NOTE_E3 )/ DAC_FREQ) * max_table_index;
 801287e:	4629      	mov	r1, r5
 8012880:	4620      	mov	r0, r4
 8012882:	f7ed fe75 	bl	8000570 <__aeabi_dmul>
 8012886:	f7ee f96b 	bl	8000b60 <__aeabi_d2f>
 801288a:	4b9c      	ldr	r3, [pc, #624]	; (8012afc <switchOctave+0x304>)
          freq_6_inc = (((float) NOTE_F3 )/ DAC_FREQ) * max_table_index;
 801288c:	4e9c      	ldr	r6, [pc, #624]	; (8012b00 <switchOctave+0x308>)
          freq_5_inc = (((float) NOTE_E3 )/ DAC_FREQ) * max_table_index;
 801288e:	6018      	str	r0, [r3, #0]
          freq_6_inc = (((float) NOTE_F3 )/ DAC_FREQ) * max_table_index;
 8012890:	4629      	mov	r1, r5
 8012892:	a371      	add	r3, pc, #452	; (adr r3, 8012a58 <switchOctave+0x260>)
 8012894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012898:	4620      	mov	r0, r4
 801289a:	f7ed fe69 	bl	8000570 <__aeabi_dmul>
 801289e:	f7ee f95f 	bl	8000b60 <__aeabi_d2f>
          freq_7_inc = (((float) NOTE_F3S )/ DAC_FREQ) * max_table_index;
 80128a2:	a36f      	add	r3, pc, #444	; (adr r3, 8012a60 <switchOctave+0x268>)
 80128a4:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_6_inc = (((float) NOTE_F3 )/ DAC_FREQ) * max_table_index;
 80128a8:	6030      	str	r0, [r6, #0]
          freq_7_inc = (((float) NOTE_F3S )/ DAC_FREQ) * max_table_index;
 80128aa:	4629      	mov	r1, r5
 80128ac:	4620      	mov	r0, r4
 80128ae:	f7ed fe5f 	bl	8000570 <__aeabi_dmul>
 80128b2:	f7ee f955 	bl	8000b60 <__aeabi_d2f>
 80128b6:	4b93      	ldr	r3, [pc, #588]	; (8012b04 <switchOctave+0x30c>)
          freq_8_inc = (((float) NOTE_G3 )/ DAC_FREQ) * max_table_index;
 80128b8:	4e93      	ldr	r6, [pc, #588]	; (8012b08 <switchOctave+0x310>)
          freq_7_inc = (((float) NOTE_F3S )/ DAC_FREQ) * max_table_index;
 80128ba:	6018      	str	r0, [r3, #0]
          freq_8_inc = (((float) NOTE_G3 )/ DAC_FREQ) * max_table_index;
 80128bc:	4629      	mov	r1, r5
 80128be:	a36a      	add	r3, pc, #424	; (adr r3, 8012a68 <switchOctave+0x270>)
 80128c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128c4:	4620      	mov	r0, r4
 80128c6:	f7ed fe53 	bl	8000570 <__aeabi_dmul>
 80128ca:	f7ee f949 	bl	8000b60 <__aeabi_d2f>
          freq_9_inc = (((float) NOTE_G3S) / DAC_FREQ) * max_table_index;
 80128ce:	a368      	add	r3, pc, #416	; (adr r3, 8012a70 <switchOctave+0x278>)
 80128d0:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_8_inc = (((float) NOTE_G3 )/ DAC_FREQ) * max_table_index;
 80128d4:	6030      	str	r0, [r6, #0]
          freq_9_inc = (((float) NOTE_G3S) / DAC_FREQ) * max_table_index;
 80128d6:	4629      	mov	r1, r5
 80128d8:	4620      	mov	r0, r4
 80128da:	f7ed fe49 	bl	8000570 <__aeabi_dmul>
 80128de:	f7ee f93f 	bl	8000b60 <__aeabi_d2f>
 80128e2:	4b8a      	ldr	r3, [pc, #552]	; (8012b0c <switchOctave+0x314>)
          freq_10_inc = (((float) NOTE_A3 )/ DAC_FREQ) * max_table_index;
 80128e4:	4f8a      	ldr	r7, [pc, #552]	; (8012b10 <switchOctave+0x318>)
          freq_9_inc = (((float) NOTE_G3S) / DAC_FREQ) * max_table_index;
 80128e6:	6018      	str	r0, [r3, #0]
 80128e8:	4606      	mov	r6, r0
          freq_10_inc = (((float) NOTE_A3 )/ DAC_FREQ) * max_table_index;
 80128ea:	a363      	add	r3, pc, #396	; (adr r3, 8012a78 <switchOctave+0x280>)
 80128ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128f0:	4620      	mov	r0, r4
 80128f2:	4629      	mov	r1, r5
 80128f4:	f7ed fe3c 	bl	8000570 <__aeabi_dmul>
 80128f8:	f7ee f932 	bl	8000b60 <__aeabi_d2f>
          freq_11_inc = (((float) NOTE_A3S )/ DAC_FREQ) * max_table_index;
 80128fc:	4b85      	ldr	r3, [pc, #532]	; (8012b14 <switchOctave+0x31c>)
          freq_10_inc = (((float) NOTE_A3 )/ DAC_FREQ) * max_table_index;
 80128fe:	6038      	str	r0, [r7, #0]
          freq_11_inc = (((float) NOTE_A3S )/ DAC_FREQ) * max_table_index;
 8012900:	601e      	str	r6, [r3, #0]
          freq_12_inc = (((float) NOTE_B3 )/ DAC_FREQ) * max_table_index;
 8012902:	4620      	mov	r0, r4
 8012904:	a35e      	add	r3, pc, #376	; (adr r3, 8012a80 <switchOctave+0x288>)
 8012906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801290a:	4629      	mov	r1, r5
 801290c:	f7ed fe30 	bl	8000570 <__aeabi_dmul>
 8012910:	f7ee f926 	bl	8000b60 <__aeabi_d2f>
 8012914:	4b80      	ldr	r3, [pc, #512]	; (8012b18 <switchOctave+0x320>)
 8012916:	6018      	str	r0, [r3, #0]
 8012918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (des_octave == 4) {
 801291a:	2804      	cmp	r0, #4
 801291c:	f000 8286 	beq.w	8012e2c <switchOctave+0x634>
        } else if (des_octave == 5) {
 8012920:	2805      	cmp	r0, #5
 8012922:	f000 8305 	beq.w	8012f30 <switchOctave+0x738>
        } else if (des_octave == 3) {
 8012926:	2803      	cmp	r0, #3
 8012928:	d1f6      	bne.n	8012918 <switchOctave+0x120>
          freq_1_inc = ((((float) NOTE_C3) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801292a:	4b6f      	ldr	r3, [pc, #444]	; (8012ae8 <switchOctave+0x2f0>)
 801292c:	4f6f      	ldr	r7, [pc, #444]	; (8012aec <switchOctave+0x2f4>)
 801292e:	6818      	ldr	r0, [r3, #0]
          freq_2_inc = ((((float) NOTE_C3S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012930:	4e6f      	ldr	r6, [pc, #444]	; (8012af0 <switchOctave+0x2f8>)
          freq_1_inc = ((((float) NOTE_C3) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012932:	f7ed fda7 	bl	8000484 <__aeabi_ui2d>
 8012936:	a354      	add	r3, pc, #336	; (adr r3, 8012a88 <switchOctave+0x290>)
 8012938:	e9d3 2300 	ldrd	r2, r3, [r3]
 801293c:	4604      	mov	r4, r0
 801293e:	460d      	mov	r5, r1
 8012940:	f7ed fe16 	bl	8000570 <__aeabi_dmul>
 8012944:	f7ee f90c 	bl	8000b60 <__aeabi_d2f>
          freq_2_inc = ((((float) NOTE_C3S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012948:	a351      	add	r3, pc, #324	; (adr r3, 8012a90 <switchOctave+0x298>)
 801294a:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_1_inc = ((((float) NOTE_C3) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801294e:	6038      	str	r0, [r7, #0]
          freq_2_inc = ((((float) NOTE_C3S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012950:	4629      	mov	r1, r5
 8012952:	4620      	mov	r0, r4
 8012954:	f7ed fe0c 	bl	8000570 <__aeabi_dmul>
 8012958:	f7ee f902 	bl	8000b60 <__aeabi_d2f>
          freq_3_inc = ((((float) NOTE_D3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801295c:	a34e      	add	r3, pc, #312	; (adr r3, 8012a98 <switchOctave+0x2a0>)
 801295e:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_2_inc = ((((float) NOTE_C3S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012962:	6030      	str	r0, [r6, #0]
          freq_3_inc = ((((float) NOTE_D3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012964:	4629      	mov	r1, r5
 8012966:	4620      	mov	r0, r4
 8012968:	f7ed fe02 	bl	8000570 <__aeabi_dmul>
 801296c:	f7ee f8f8 	bl	8000b60 <__aeabi_d2f>
 8012970:	4b60      	ldr	r3, [pc, #384]	; (8012af4 <switchOctave+0x2fc>)
          freq_4_inc = ((((float) NOTE_D3S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012972:	4e61      	ldr	r6, [pc, #388]	; (8012af8 <switchOctave+0x300>)
          freq_3_inc = ((((float) NOTE_D3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012974:	6018      	str	r0, [r3, #0]
          freq_4_inc = ((((float) NOTE_D3S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012976:	4629      	mov	r1, r5
 8012978:	a349      	add	r3, pc, #292	; (adr r3, 8012aa0 <switchOctave+0x2a8>)
 801297a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801297e:	4620      	mov	r0, r4
 8012980:	f7ed fdf6 	bl	8000570 <__aeabi_dmul>
 8012984:	f7ee f8ec 	bl	8000b60 <__aeabi_d2f>
          freq_5_inc = ((((float) NOTE_E3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012988:	a347      	add	r3, pc, #284	; (adr r3, 8012aa8 <switchOctave+0x2b0>)
 801298a:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_4_inc = ((((float) NOTE_D3S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801298e:	6030      	str	r0, [r6, #0]
          freq_5_inc = ((((float) NOTE_E3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012990:	4629      	mov	r1, r5
 8012992:	4620      	mov	r0, r4
 8012994:	f7ed fdec 	bl	8000570 <__aeabi_dmul>
 8012998:	f7ee f8e2 	bl	8000b60 <__aeabi_d2f>
 801299c:	4b57      	ldr	r3, [pc, #348]	; (8012afc <switchOctave+0x304>)
          freq_6_inc = ((((float) NOTE_F3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801299e:	4e58      	ldr	r6, [pc, #352]	; (8012b00 <switchOctave+0x308>)
          freq_5_inc = ((((float) NOTE_E3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80129a0:	6018      	str	r0, [r3, #0]
          freq_6_inc = ((((float) NOTE_F3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80129a2:	4629      	mov	r1, r5
 80129a4:	a342      	add	r3, pc, #264	; (adr r3, 8012ab0 <switchOctave+0x2b8>)
 80129a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129aa:	4620      	mov	r0, r4
 80129ac:	f7ed fde0 	bl	8000570 <__aeabi_dmul>
 80129b0:	f7ee f8d6 	bl	8000b60 <__aeabi_d2f>
          freq_7_inc = ((((float) NOTE_F3S)/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80129b4:	a340      	add	r3, pc, #256	; (adr r3, 8012ab8 <switchOctave+0x2c0>)
 80129b6:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_6_inc = ((((float) NOTE_F3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80129ba:	6030      	str	r0, [r6, #0]
          freq_7_inc = ((((float) NOTE_F3S)/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80129bc:	4629      	mov	r1, r5
 80129be:	4620      	mov	r0, r4
 80129c0:	f7ed fdd6 	bl	8000570 <__aeabi_dmul>
 80129c4:	f7ee f8cc 	bl	8000b60 <__aeabi_d2f>
 80129c8:	4b4e      	ldr	r3, [pc, #312]	; (8012b04 <switchOctave+0x30c>)
          freq_8_inc = ((((float) NOTE_G3) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80129ca:	4e4f      	ldr	r6, [pc, #316]	; (8012b08 <switchOctave+0x310>)
          freq_7_inc = ((((float) NOTE_F3S)/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80129cc:	6018      	str	r0, [r3, #0]
          freq_8_inc = ((((float) NOTE_G3) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80129ce:	4629      	mov	r1, r5
 80129d0:	a33b      	add	r3, pc, #236	; (adr r3, 8012ac0 <switchOctave+0x2c8>)
 80129d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129d6:	4620      	mov	r0, r4
 80129d8:	f7ed fdca 	bl	8000570 <__aeabi_dmul>
 80129dc:	f7ee f8c0 	bl	8000b60 <__aeabi_d2f>
          freq_9_inc = ((((float) NOTE_G3S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80129e0:	a339      	add	r3, pc, #228	; (adr r3, 8012ac8 <switchOctave+0x2d0>)
 80129e2:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_8_inc = ((((float) NOTE_G3) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80129e6:	6030      	str	r0, [r6, #0]
          freq_9_inc = ((((float) NOTE_G3S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80129e8:	4629      	mov	r1, r5
 80129ea:	4620      	mov	r0, r4
 80129ec:	f7ed fdc0 	bl	8000570 <__aeabi_dmul>
 80129f0:	f7ee f8b6 	bl	8000b60 <__aeabi_d2f>
 80129f4:	4b45      	ldr	r3, [pc, #276]	; (8012b0c <switchOctave+0x314>)
          freq_10_inc = ((((float) NOTE_A3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80129f6:	4f46      	ldr	r7, [pc, #280]	; (8012b10 <switchOctave+0x318>)
          freq_9_inc = ((((float) NOTE_G3S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80129f8:	6018      	str	r0, [r3, #0]
 80129fa:	4606      	mov	r6, r0
          freq_10_inc = ((((float) NOTE_A3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80129fc:	a334      	add	r3, pc, #208	; (adr r3, 8012ad0 <switchOctave+0x2d8>)
 80129fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a02:	4620      	mov	r0, r4
 8012a04:	4629      	mov	r1, r5
 8012a06:	f7ed fdb3 	bl	8000570 <__aeabi_dmul>
 8012a0a:	f7ee f8a9 	bl	8000b60 <__aeabi_d2f>
          freq_11_inc = ((((float) NOTE_A3S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012a0e:	4b41      	ldr	r3, [pc, #260]	; (8012b14 <switchOctave+0x31c>)
          freq_10_inc = ((((float) NOTE_A3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012a10:	6038      	str	r0, [r7, #0]
          freq_11_inc = ((((float) NOTE_A3S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012a12:	601e      	str	r6, [r3, #0]
          freq_12_inc = ((((float) NOTE_B3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012a14:	4620      	mov	r0, r4
 8012a16:	a330      	add	r3, pc, #192	; (adr r3, 8012ad8 <switchOctave+0x2e0>)
 8012a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a1c:	4629      	mov	r1, r5
 8012a1e:	f7ed fda7 	bl	8000570 <__aeabi_dmul>
 8012a22:	f7ee f89d 	bl	8000b60 <__aeabi_d2f>
 8012a26:	4b3c      	ldr	r3, [pc, #240]	; (8012b18 <switchOctave+0x320>)
 8012a28:	6018      	str	r0, [r3, #0]
 8012a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a2c:	f3af 8000 	nop.w
 8012a30:	69ad42c4 	.word	0x69ad42c4
 8012a34:	3f6aca5e 	.word	0x3f6aca5e
 8012a38:	f5c28f5c 	.word	0xf5c28f5c
 8012a3c:	3f6c6228 	.word	0x3f6c6228
 8012a40:	c0ebedfa 	.word	0xc0ebedfa
 8012a44:	3f6e1239 	.word	0x3f6e1239
 8012a48:	4a2339c1 	.word	0x4a2339c1
 8012a4c:	3f6fdbfb 	.word	0x3f6fdbfb
 8012a50:	00000000 	.word	0x00000000
 8012a54:	3f70e080 	.word	0x3f70e080
 8012a58:	b50b0f28 	.word	0xb50b0f28
 8012a5c:	3f71e166 	.word	0x3f71e166
 8012a60:	cfaacd9f 	.word	0xcfaacd9f
 8012a64:	3f72f195 	.word	0x3f72f195
 8012a68:	51eb851f 	.word	0x51eb851f
 8012a6c:	3f7411f8 	.word	0x3f7411f8
 8012a70:	ef34d6a1 	.word	0xef34d6a1
 8012a74:	3f754378 	.word	0x3f754378
 8012a78:	020c49ba 	.word	0x020c49ba
 8012a7c:	3f76872b 	.word	0x3f76872b
 8012a80:	b7e90ff9 	.word	0xb7e90ff9
 8012a84:	3f79496f 	.word	0x3f79496f
 8012a88:	3b0fa087 	.word	0x3b0fa087
 8012a8c:	3ecb6ef8 	.word	0x3ecb6ef8
 8012a90:	3f3e0371 	.word	0x3f3e0371
 8012a94:	3ecd108c 	.word	0x3ecd108c
 8012a98:	a6d4eb7f 	.word	0xa6d4eb7f
 8012a9c:	3ececafb 	.word	0x3ececafb
 8012aa0:	d1fd8e36 	.word	0xd1fd8e36
 8012aa4:	3ed04fdc 	.word	0x3ed04fdc
 8012aa8:	26e978d5 	.word	0x26e978d5
 8012aac:	3ed14831 	.word	0x3ed14831
 8012ab0:	429aaf44 	.word	0x429aaf44
 8012ab4:	3ed24f42 	.word	0x3ed24f42
 8012ab8:	a9a4a999 	.word	0xa9a4a999
 8012abc:	3ed365f9 	.word	0x3ed365f9
 8012ac0:	01f75105 	.word	0x01f75105
 8012ac4:	3ed48d48 	.word	0x3ed48d48
 8012ac8:	a0fab6eb 	.word	0xa0fab6eb
 8012acc:	3ed5c61d 	.word	0x3ed5c61d
 8012ad0:	7cfa26a2 	.word	0x7cfa26a2
 8012ad4:	3ed71194 	.word	0x3ed71194
 8012ad8:	82faf1a3 	.word	0x82faf1a3
 8012adc:	3ed9e4cc 	.word	0x3ed9e4cc
 8012ae0:	200053fc 	.word	0x200053fc
 8012ae4:	2000005c 	.word	0x2000005c
 8012ae8:	20000058 	.word	0x20000058
 8012aec:	200063b4 	.word	0x200063b4
 8012af0:	20007bf4 	.word	0x20007bf4
 8012af4:	20006fc8 	.word	0x20006fc8
 8012af8:	200077d8 	.word	0x200077d8
 8012afc:	200077d4 	.word	0x200077d4
 8012b00:	200077cc 	.word	0x200077cc
 8012b04:	20006fc0 	.word	0x20006fc0
 8012b08:	2007db18 	.word	0x2007db18
 8012b0c:	200077d0 	.word	0x200077d0
 8012b10:	2007d708 	.word	0x2007d708
 8012b14:	200077e0 	.word	0x200077e0
 8012b18:	2007d304 	.word	0x2007d304
          freq_1_inc = (((float) NOTE_C5 )/ DAC_FREQ) * max_table_index;
 8012b1c:	4bb6      	ldr	r3, [pc, #728]	; (8012df8 <switchOctave+0x600>)
 8012b1e:	4fb7      	ldr	r7, [pc, #732]	; (8012dfc <switchOctave+0x604>)
 8012b20:	6818      	ldr	r0, [r3, #0]
          freq_2_inc = (((float) NOTE_C5S )/ DAC_FREQ) * max_table_index;
 8012b22:	4eb7      	ldr	r6, [pc, #732]	; (8012e00 <switchOctave+0x608>)
          freq_1_inc = (((float) NOTE_C5 )/ DAC_FREQ) * max_table_index;
 8012b24:	f7ed fcae 	bl	8000484 <__aeabi_ui2d>
 8012b28:	a383      	add	r3, pc, #524	; (adr r3, 8012d38 <switchOctave+0x540>)
 8012b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b2e:	4604      	mov	r4, r0
 8012b30:	460d      	mov	r5, r1
 8012b32:	f7ed fd1d 	bl	8000570 <__aeabi_dmul>
 8012b36:	f7ee f813 	bl	8000b60 <__aeabi_d2f>
          freq_2_inc = (((float) NOTE_C5S )/ DAC_FREQ) * max_table_index;
 8012b3a:	a381      	add	r3, pc, #516	; (adr r3, 8012d40 <switchOctave+0x548>)
 8012b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_1_inc = (((float) NOTE_C5 )/ DAC_FREQ) * max_table_index;
 8012b40:	6038      	str	r0, [r7, #0]
          freq_2_inc = (((float) NOTE_C5S )/ DAC_FREQ) * max_table_index;
 8012b42:	4629      	mov	r1, r5
 8012b44:	4620      	mov	r0, r4
 8012b46:	f7ed fd13 	bl	8000570 <__aeabi_dmul>
 8012b4a:	f7ee f809 	bl	8000b60 <__aeabi_d2f>
          freq_3_inc = (((float) NOTE_D5 )/ DAC_FREQ) * max_table_index;
 8012b4e:	a37e      	add	r3, pc, #504	; (adr r3, 8012d48 <switchOctave+0x550>)
 8012b50:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_2_inc = (((float) NOTE_C5S )/ DAC_FREQ) * max_table_index;
 8012b54:	6030      	str	r0, [r6, #0]
          freq_3_inc = (((float) NOTE_D5 )/ DAC_FREQ) * max_table_index;
 8012b56:	4629      	mov	r1, r5
 8012b58:	4620      	mov	r0, r4
 8012b5a:	f7ed fd09 	bl	8000570 <__aeabi_dmul>
 8012b5e:	f7ed ffff 	bl	8000b60 <__aeabi_d2f>
 8012b62:	4ba8      	ldr	r3, [pc, #672]	; (8012e04 <switchOctave+0x60c>)
          freq_4_inc = (((float) NOTE_D5S )/ DAC_FREQ) * max_table_index;
 8012b64:	4ea8      	ldr	r6, [pc, #672]	; (8012e08 <switchOctave+0x610>)
          freq_3_inc = (((float) NOTE_D5 )/ DAC_FREQ) * max_table_index;
 8012b66:	6018      	str	r0, [r3, #0]
          freq_4_inc = (((float) NOTE_D5S )/ DAC_FREQ) * max_table_index;
 8012b68:	4629      	mov	r1, r5
 8012b6a:	a379      	add	r3, pc, #484	; (adr r3, 8012d50 <switchOctave+0x558>)
 8012b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b70:	4620      	mov	r0, r4
 8012b72:	f7ed fcfd 	bl	8000570 <__aeabi_dmul>
 8012b76:	f7ed fff3 	bl	8000b60 <__aeabi_d2f>
          freq_5_inc = (((float) NOTE_E5) / DAC_FREQ) * max_table_index;
 8012b7a:	a377      	add	r3, pc, #476	; (adr r3, 8012d58 <switchOctave+0x560>)
 8012b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_4_inc = (((float) NOTE_D5S )/ DAC_FREQ) * max_table_index;
 8012b80:	6030      	str	r0, [r6, #0]
          freq_5_inc = (((float) NOTE_E5) / DAC_FREQ) * max_table_index;
 8012b82:	4629      	mov	r1, r5
 8012b84:	4620      	mov	r0, r4
 8012b86:	f7ed fcf3 	bl	8000570 <__aeabi_dmul>
 8012b8a:	f7ed ffe9 	bl	8000b60 <__aeabi_d2f>
 8012b8e:	4b9f      	ldr	r3, [pc, #636]	; (8012e0c <switchOctave+0x614>)
          freq_6_inc = (((float) NOTE_F5 )/ DAC_FREQ) * max_table_index;
 8012b90:	4e9f      	ldr	r6, [pc, #636]	; (8012e10 <switchOctave+0x618>)
          freq_5_inc = (((float) NOTE_E5) / DAC_FREQ) * max_table_index;
 8012b92:	6018      	str	r0, [r3, #0]
          freq_6_inc = (((float) NOTE_F5 )/ DAC_FREQ) * max_table_index;
 8012b94:	4629      	mov	r1, r5
 8012b96:	a372      	add	r3, pc, #456	; (adr r3, 8012d60 <switchOctave+0x568>)
 8012b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b9c:	4620      	mov	r0, r4
 8012b9e:	f7ed fce7 	bl	8000570 <__aeabi_dmul>
 8012ba2:	f7ed ffdd 	bl	8000b60 <__aeabi_d2f>
          freq_7_inc = (((float) NOTE_F5S )/ DAC_FREQ) * max_table_index;
 8012ba6:	a370      	add	r3, pc, #448	; (adr r3, 8012d68 <switchOctave+0x570>)
 8012ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_6_inc = (((float) NOTE_F5 )/ DAC_FREQ) * max_table_index;
 8012bac:	6030      	str	r0, [r6, #0]
          freq_7_inc = (((float) NOTE_F5S )/ DAC_FREQ) * max_table_index;
 8012bae:	4629      	mov	r1, r5
 8012bb0:	4620      	mov	r0, r4
 8012bb2:	f7ed fcdd 	bl	8000570 <__aeabi_dmul>
 8012bb6:	f7ed ffd3 	bl	8000b60 <__aeabi_d2f>
 8012bba:	4b96      	ldr	r3, [pc, #600]	; (8012e14 <switchOctave+0x61c>)
          freq_8_inc = (((float) NOTE_G5) / DAC_FREQ) * max_table_index;
 8012bbc:	4e96      	ldr	r6, [pc, #600]	; (8012e18 <switchOctave+0x620>)
          freq_7_inc = (((float) NOTE_F5S )/ DAC_FREQ) * max_table_index;
 8012bbe:	6018      	str	r0, [r3, #0]
          freq_8_inc = (((float) NOTE_G5) / DAC_FREQ) * max_table_index;
 8012bc0:	4629      	mov	r1, r5
 8012bc2:	a36b      	add	r3, pc, #428	; (adr r3, 8012d70 <switchOctave+0x578>)
 8012bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bc8:	4620      	mov	r0, r4
 8012bca:	f7ed fcd1 	bl	8000570 <__aeabi_dmul>
 8012bce:	f7ed ffc7 	bl	8000b60 <__aeabi_d2f>
          freq_9_inc = (((float) NOTE_G5S )/ DAC_FREQ) * max_table_index;
 8012bd2:	a369      	add	r3, pc, #420	; (adr r3, 8012d78 <switchOctave+0x580>)
 8012bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_8_inc = (((float) NOTE_G5) / DAC_FREQ) * max_table_index;
 8012bd8:	6030      	str	r0, [r6, #0]
          freq_9_inc = (((float) NOTE_G5S )/ DAC_FREQ) * max_table_index;
 8012bda:	4629      	mov	r1, r5
 8012bdc:	4620      	mov	r0, r4
 8012bde:	f7ed fcc7 	bl	8000570 <__aeabi_dmul>
 8012be2:	f7ed ffbd 	bl	8000b60 <__aeabi_d2f>
 8012be6:	4b8d      	ldr	r3, [pc, #564]	; (8012e1c <switchOctave+0x624>)
          freq_10_inc = (((float) NOTE_A5) / DAC_FREQ) * max_table_index;
 8012be8:	4e8d      	ldr	r6, [pc, #564]	; (8012e20 <switchOctave+0x628>)
          freq_9_inc = (((float) NOTE_G5S )/ DAC_FREQ) * max_table_index;
 8012bea:	6018      	str	r0, [r3, #0]
          freq_10_inc = (((float) NOTE_A5) / DAC_FREQ) * max_table_index;
 8012bec:	4629      	mov	r1, r5
 8012bee:	a364      	add	r3, pc, #400	; (adr r3, 8012d80 <switchOctave+0x588>)
 8012bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bf4:	4620      	mov	r0, r4
 8012bf6:	f7ed fcbb 	bl	8000570 <__aeabi_dmul>
 8012bfa:	f7ed ffb1 	bl	8000b60 <__aeabi_d2f>
          freq_11_inc = (((float) NOTE_A5S) / DAC_FREQ) * max_table_index;
 8012bfe:	a362      	add	r3, pc, #392	; (adr r3, 8012d88 <switchOctave+0x590>)
 8012c00:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_10_inc = (((float) NOTE_A5) / DAC_FREQ) * max_table_index;
 8012c04:	6030      	str	r0, [r6, #0]
          freq_11_inc = (((float) NOTE_A5S) / DAC_FREQ) * max_table_index;
 8012c06:	4629      	mov	r1, r5
 8012c08:	4620      	mov	r0, r4
 8012c0a:	f7ed fcb1 	bl	8000570 <__aeabi_dmul>
 8012c0e:	f7ed ffa7 	bl	8000b60 <__aeabi_d2f>
 8012c12:	4b84      	ldr	r3, [pc, #528]	; (8012e24 <switchOctave+0x62c>)
          freq_12_inc = (((float) NOTE_B5 )/ DAC_FREQ) * max_table_index;
 8012c14:	4e84      	ldr	r6, [pc, #528]	; (8012e28 <switchOctave+0x630>)
          freq_11_inc = (((float) NOTE_A5S) / DAC_FREQ) * max_table_index;
 8012c16:	6018      	str	r0, [r3, #0]
          freq_12_inc = (((float) NOTE_B5 )/ DAC_FREQ) * max_table_index;
 8012c18:	a35d      	add	r3, pc, #372	; (adr r3, 8012d90 <switchOctave+0x598>)
 8012c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_12_inc = ((((float) NOTE_B5 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012c1e:	4620      	mov	r0, r4
 8012c20:	4629      	mov	r1, r5
 8012c22:	f7ed fca5 	bl	8000570 <__aeabi_dmul>
 8012c26:	f7ed ff9b 	bl	8000b60 <__aeabi_d2f>
 8012c2a:	6030      	str	r0, [r6, #0]
 8012c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          freq_1_inc = (((float) NOTE_C4) / DAC_FREQ) * max_table_index;
 8012c2e:	4b72      	ldr	r3, [pc, #456]	; (8012df8 <switchOctave+0x600>)
 8012c30:	4f72      	ldr	r7, [pc, #456]	; (8012dfc <switchOctave+0x604>)
 8012c32:	6818      	ldr	r0, [r3, #0]
          freq_2_inc = (((float) NOTE_C4S) / DAC_FREQ) * max_table_index;
 8012c34:	4e72      	ldr	r6, [pc, #456]	; (8012e00 <switchOctave+0x608>)
          freq_1_inc = (((float) NOTE_C4) / DAC_FREQ) * max_table_index;
 8012c36:	f7ed fc25 	bl	8000484 <__aeabi_ui2d>
 8012c3a:	a357      	add	r3, pc, #348	; (adr r3, 8012d98 <switchOctave+0x5a0>)
 8012c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c40:	4604      	mov	r4, r0
 8012c42:	460d      	mov	r5, r1
 8012c44:	f7ed fc94 	bl	8000570 <__aeabi_dmul>
 8012c48:	f7ed ff8a 	bl	8000b60 <__aeabi_d2f>
          freq_2_inc = (((float) NOTE_C4S) / DAC_FREQ) * max_table_index;
 8012c4c:	a354      	add	r3, pc, #336	; (adr r3, 8012da0 <switchOctave+0x5a8>)
 8012c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_1_inc = (((float) NOTE_C4) / DAC_FREQ) * max_table_index;
 8012c52:	6038      	str	r0, [r7, #0]
          freq_2_inc = (((float) NOTE_C4S) / DAC_FREQ) * max_table_index;
 8012c54:	4629      	mov	r1, r5
 8012c56:	4620      	mov	r0, r4
 8012c58:	f7ed fc8a 	bl	8000570 <__aeabi_dmul>
 8012c5c:	f7ed ff80 	bl	8000b60 <__aeabi_d2f>
          freq_3_inc = (((float) NOTE_D4) / DAC_FREQ) * max_table_index;
 8012c60:	a351      	add	r3, pc, #324	; (adr r3, 8012da8 <switchOctave+0x5b0>)
 8012c62:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_2_inc = (((float) NOTE_C4S) / DAC_FREQ) * max_table_index;
 8012c66:	6030      	str	r0, [r6, #0]
          freq_3_inc = (((float) NOTE_D4) / DAC_FREQ) * max_table_index;
 8012c68:	4629      	mov	r1, r5
 8012c6a:	4620      	mov	r0, r4
 8012c6c:	f7ed fc80 	bl	8000570 <__aeabi_dmul>
 8012c70:	f7ed ff76 	bl	8000b60 <__aeabi_d2f>
 8012c74:	4b63      	ldr	r3, [pc, #396]	; (8012e04 <switchOctave+0x60c>)
          freq_4_inc = (((float) NOTE_D4S) / DAC_FREQ) * max_table_index;
 8012c76:	4e64      	ldr	r6, [pc, #400]	; (8012e08 <switchOctave+0x610>)
          freq_3_inc = (((float) NOTE_D4) / DAC_FREQ) * max_table_index;
 8012c78:	6018      	str	r0, [r3, #0]
          freq_4_inc = (((float) NOTE_D4S) / DAC_FREQ) * max_table_index;
 8012c7a:	4629      	mov	r1, r5
 8012c7c:	a34c      	add	r3, pc, #304	; (adr r3, 8012db0 <switchOctave+0x5b8>)
 8012c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c82:	4620      	mov	r0, r4
 8012c84:	f7ed fc74 	bl	8000570 <__aeabi_dmul>
 8012c88:	f7ed ff6a 	bl	8000b60 <__aeabi_d2f>
          freq_5_inc = (((float) NOTE_E4) / DAC_FREQ) * max_table_index;
 8012c8c:	a34a      	add	r3, pc, #296	; (adr r3, 8012db8 <switchOctave+0x5c0>)
 8012c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_4_inc = (((float) NOTE_D4S) / DAC_FREQ) * max_table_index;
 8012c92:	6030      	str	r0, [r6, #0]
          freq_5_inc = (((float) NOTE_E4) / DAC_FREQ) * max_table_index;
 8012c94:	4629      	mov	r1, r5
 8012c96:	4620      	mov	r0, r4
 8012c98:	f7ed fc6a 	bl	8000570 <__aeabi_dmul>
 8012c9c:	f7ed ff60 	bl	8000b60 <__aeabi_d2f>
 8012ca0:	4b5a      	ldr	r3, [pc, #360]	; (8012e0c <switchOctave+0x614>)
          freq_6_inc = (((float) NOTE_F4 )/ DAC_FREQ) * max_table_index;
 8012ca2:	4e5b      	ldr	r6, [pc, #364]	; (8012e10 <switchOctave+0x618>)
          freq_5_inc = (((float) NOTE_E4) / DAC_FREQ) * max_table_index;
 8012ca4:	6018      	str	r0, [r3, #0]
          freq_6_inc = (((float) NOTE_F4 )/ DAC_FREQ) * max_table_index;
 8012ca6:	4629      	mov	r1, r5
 8012ca8:	a345      	add	r3, pc, #276	; (adr r3, 8012dc0 <switchOctave+0x5c8>)
 8012caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cae:	4620      	mov	r0, r4
 8012cb0:	f7ed fc5e 	bl	8000570 <__aeabi_dmul>
 8012cb4:	f7ed ff54 	bl	8000b60 <__aeabi_d2f>
          freq_7_inc = (((float) NOTE_F4S )/ DAC_FREQ) * max_table_index;
 8012cb8:	a343      	add	r3, pc, #268	; (adr r3, 8012dc8 <switchOctave+0x5d0>)
 8012cba:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_6_inc = (((float) NOTE_F4 )/ DAC_FREQ) * max_table_index;
 8012cbe:	6030      	str	r0, [r6, #0]
          freq_7_inc = (((float) NOTE_F4S )/ DAC_FREQ) * max_table_index;
 8012cc0:	4629      	mov	r1, r5
 8012cc2:	4620      	mov	r0, r4
 8012cc4:	f7ed fc54 	bl	8000570 <__aeabi_dmul>
 8012cc8:	f7ed ff4a 	bl	8000b60 <__aeabi_d2f>
 8012ccc:	4b51      	ldr	r3, [pc, #324]	; (8012e14 <switchOctave+0x61c>)
          freq_8_inc = (((float) NOTE_G4 )/ DAC_FREQ) * max_table_index;
 8012cce:	4e52      	ldr	r6, [pc, #328]	; (8012e18 <switchOctave+0x620>)
          freq_7_inc = (((float) NOTE_F4S )/ DAC_FREQ) * max_table_index;
 8012cd0:	6018      	str	r0, [r3, #0]
          freq_8_inc = (((float) NOTE_G4 )/ DAC_FREQ) * max_table_index;
 8012cd2:	4629      	mov	r1, r5
 8012cd4:	a33e      	add	r3, pc, #248	; (adr r3, 8012dd0 <switchOctave+0x5d8>)
 8012cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cda:	4620      	mov	r0, r4
 8012cdc:	f7ed fc48 	bl	8000570 <__aeabi_dmul>
 8012ce0:	f7ed ff3e 	bl	8000b60 <__aeabi_d2f>
          freq_9_inc = (((float) NOTE_G4S )/ DAC_FREQ) * max_table_index;
 8012ce4:	a33c      	add	r3, pc, #240	; (adr r3, 8012dd8 <switchOctave+0x5e0>)
 8012ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_8_inc = (((float) NOTE_G4 )/ DAC_FREQ) * max_table_index;
 8012cea:	6030      	str	r0, [r6, #0]
          freq_9_inc = (((float) NOTE_G4S )/ DAC_FREQ) * max_table_index;
 8012cec:	4629      	mov	r1, r5
 8012cee:	4620      	mov	r0, r4
 8012cf0:	f7ed fc3e 	bl	8000570 <__aeabi_dmul>
 8012cf4:	f7ed ff34 	bl	8000b60 <__aeabi_d2f>
 8012cf8:	4b48      	ldr	r3, [pc, #288]	; (8012e1c <switchOctave+0x624>)
          freq_10_inc = (((float) NOTE_A4 )/ DAC_FREQ) * max_table_index;
 8012cfa:	4e49      	ldr	r6, [pc, #292]	; (8012e20 <switchOctave+0x628>)
          freq_9_inc = (((float) NOTE_G4S )/ DAC_FREQ) * max_table_index;
 8012cfc:	6018      	str	r0, [r3, #0]
          freq_10_inc = (((float) NOTE_A4 )/ DAC_FREQ) * max_table_index;
 8012cfe:	4629      	mov	r1, r5
 8012d00:	a337      	add	r3, pc, #220	; (adr r3, 8012de0 <switchOctave+0x5e8>)
 8012d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d06:	4620      	mov	r0, r4
 8012d08:	f7ed fc32 	bl	8000570 <__aeabi_dmul>
 8012d0c:	f7ed ff28 	bl	8000b60 <__aeabi_d2f>
          freq_11_inc = (((float) NOTE_A4S )/ DAC_FREQ) * max_table_index;
 8012d10:	a335      	add	r3, pc, #212	; (adr r3, 8012de8 <switchOctave+0x5f0>)
 8012d12:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_10_inc = (((float) NOTE_A4 )/ DAC_FREQ) * max_table_index;
 8012d16:	6030      	str	r0, [r6, #0]
          freq_11_inc = (((float) NOTE_A4S )/ DAC_FREQ) * max_table_index;
 8012d18:	4629      	mov	r1, r5
 8012d1a:	4620      	mov	r0, r4
 8012d1c:	f7ed fc28 	bl	8000570 <__aeabi_dmul>
 8012d20:	f7ed ff1e 	bl	8000b60 <__aeabi_d2f>
 8012d24:	4b3f      	ldr	r3, [pc, #252]	; (8012e24 <switchOctave+0x62c>)
          freq_12_inc = (((float) NOTE_B4) / DAC_FREQ) * max_table_index;
 8012d26:	4e40      	ldr	r6, [pc, #256]	; (8012e28 <switchOctave+0x630>)
          freq_11_inc = (((float) NOTE_A4S )/ DAC_FREQ) * max_table_index;
 8012d28:	6018      	str	r0, [r3, #0]
          freq_12_inc = (((float) NOTE_B4) / DAC_FREQ) * max_table_index;
 8012d2a:	a331      	add	r3, pc, #196	; (adr r3, 8012df0 <switchOctave+0x5f8>)
 8012d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d30:	e775      	b.n	8012c1e <switchOctave+0x426>
 8012d32:	bf00      	nop
 8012d34:	f3af 8000 	nop.w
 8012d38:	ee631f8a 	.word	0xee631f8a
 8012d3c:	3f8aca5a 	.word	0x3f8aca5a
 8012d40:	3c9eecc0 	.word	0x3c9eecc0
 8012d44:	3f8c622c 	.word	0x3f8c622c
 8012d48:	83126e98 	.word	0x83126e98
 8012d4c:	3f8e1240 	.word	0x3f8e1240
 8012d50:	0c49ba5e 	.word	0x0c49ba5e
 8012d54:	3f8fdc02 	.word	0x3f8fdc02
 8012d58:	5c91d14e 	.word	0x5c91d14e
 8012d5c:	3f90e07e 	.word	0x3f90e07e
 8012d60:	b50b0f28 	.word	0xb50b0f28
 8012d64:	3f91e166 	.word	0x3f91e166
 8012d68:	8d4fdf3b 	.word	0x8d4fdf3b
 8012d6c:	3f92f197 	.word	0x3f92f197
 8012d70:	ae7d566d 	.word	0xae7d566d
 8012d74:	3f9411f6 	.word	0x3f9411f6
 8012d78:	acd9e83e 	.word	0xacd9e83e
 8012d7c:	3f95437a 	.word	0x3f95437a
 8012d80:	020c49ba 	.word	0x020c49ba
 8012d84:	3f96872b 	.word	0x3f96872b
 8012d88:	d42c3c9f 	.word	0xd42c3c9f
 8012d8c:	3f97de1a 	.word	0x3f97de1a
 8012d90:	147ae148 	.word	0x147ae148
 8012d94:	3f99496e 	.word	0x3f99496e
 8012d98:	69ad42c4 	.word	0x69ad42c4
 8012d9c:	3f7aca5e 	.word	0x3f7aca5e
 8012da0:	b7e90ff9 	.word	0xb7e90ff9
 8012da4:	3f7c622f 	.word	0x3f7c622f
 8012da8:	83126e98 	.word	0x83126e98
 8012dac:	3f7e1240 	.word	0x3f7e1240
 8012db0:	0c49ba5e 	.word	0x0c49ba5e
 8012db4:	3f7fdc02 	.word	0x3f7fdc02
 8012db8:	00000000 	.word	0x00000000
 8012dbc:	3f80e080 	.word	0x3f80e080
 8012dc0:	b50b0f28 	.word	0xb50b0f28
 8012dc4:	3f81e166 	.word	0x3f81e166
 8012dc8:	cfaacd9f 	.word	0xcfaacd9f
 8012dcc:	3f82f195 	.word	0x3f82f195
 8012dd0:	f0d844d0 	.word	0xf0d844d0
 8012dd4:	3f8411f4 	.word	0x3f8411f4
 8012dd8:	504816f0 	.word	0x504816f0
 8012ddc:	3f85437c 	.word	0x3f85437c
 8012de0:	020c49ba 	.word	0x020c49ba
 8012de4:	3f86872b 	.word	0x3f86872b
 8012de8:	d42c3c9f 	.word	0xd42c3c9f
 8012dec:	3f87de1a 	.word	0x3f87de1a
 8012df0:	56d5cfab 	.word	0x56d5cfab
 8012df4:	3f89496c 	.word	0x3f89496c
 8012df8:	20000058 	.word	0x20000058
 8012dfc:	200063b4 	.word	0x200063b4
 8012e00:	20007bf4 	.word	0x20007bf4
 8012e04:	20006fc8 	.word	0x20006fc8
 8012e08:	200077d8 	.word	0x200077d8
 8012e0c:	200077d4 	.word	0x200077d4
 8012e10:	200077cc 	.word	0x200077cc
 8012e14:	20006fc0 	.word	0x20006fc0
 8012e18:	2007db18 	.word	0x2007db18
 8012e1c:	200077d0 	.word	0x200077d0
 8012e20:	2007d708 	.word	0x2007d708
 8012e24:	200077e0 	.word	0x200077e0
 8012e28:	2007d304 	.word	0x2007d304
          freq_1_inc = ( ( ((float) NOTE_C4) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012e2c:	4bb2      	ldr	r3, [pc, #712]	; (80130f8 <switchOctave+0x900>)
 8012e2e:	4fb3      	ldr	r7, [pc, #716]	; (80130fc <switchOctave+0x904>)
 8012e30:	6818      	ldr	r0, [r3, #0]
          freq_2_inc = ((((float) NOTE_C4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012e32:	4eb3      	ldr	r6, [pc, #716]	; (8013100 <switchOctave+0x908>)
          freq_1_inc = ( ( ((float) NOTE_C4) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012e34:	f7ed fb26 	bl	8000484 <__aeabi_ui2d>
 8012e38:	a37f      	add	r3, pc, #508	; (adr r3, 8013038 <switchOctave+0x840>)
 8012e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e3e:	4604      	mov	r4, r0
 8012e40:	460d      	mov	r5, r1
 8012e42:	f7ed fb95 	bl	8000570 <__aeabi_dmul>
 8012e46:	f7ed fe8b 	bl	8000b60 <__aeabi_d2f>
          freq_2_inc = ((((float) NOTE_C4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012e4a:	a37d      	add	r3, pc, #500	; (adr r3, 8013040 <switchOctave+0x848>)
 8012e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_1_inc = ( ( ((float) NOTE_C4) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012e50:	6038      	str	r0, [r7, #0]
          freq_2_inc = ((((float) NOTE_C4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012e52:	4629      	mov	r1, r5
 8012e54:	4620      	mov	r0, r4
 8012e56:	f7ed fb8b 	bl	8000570 <__aeabi_dmul>
 8012e5a:	f7ed fe81 	bl	8000b60 <__aeabi_d2f>
          freq_3_inc = ((((float) NOTE_D4) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012e5e:	a37a      	add	r3, pc, #488	; (adr r3, 8013048 <switchOctave+0x850>)
 8012e60:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_2_inc = ((((float) NOTE_C4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012e64:	6030      	str	r0, [r6, #0]
          freq_3_inc = ((((float) NOTE_D4) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012e66:	4629      	mov	r1, r5
 8012e68:	4620      	mov	r0, r4
 8012e6a:	f7ed fb81 	bl	8000570 <__aeabi_dmul>
 8012e6e:	f7ed fe77 	bl	8000b60 <__aeabi_d2f>
 8012e72:	4ba4      	ldr	r3, [pc, #656]	; (8013104 <switchOctave+0x90c>)
          freq_4_inc = ((((float) NOTE_D4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012e74:	4ea4      	ldr	r6, [pc, #656]	; (8013108 <switchOctave+0x910>)
          freq_3_inc = ((((float) NOTE_D4) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012e76:	6018      	str	r0, [r3, #0]
          freq_4_inc = ((((float) NOTE_D4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012e78:	4629      	mov	r1, r5
 8012e7a:	a375      	add	r3, pc, #468	; (adr r3, 8013050 <switchOctave+0x858>)
 8012e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e80:	4620      	mov	r0, r4
 8012e82:	f7ed fb75 	bl	8000570 <__aeabi_dmul>
 8012e86:	f7ed fe6b 	bl	8000b60 <__aeabi_d2f>
          freq_5_inc = ((((float) NOTE_E4) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012e8a:	a373      	add	r3, pc, #460	; (adr r3, 8013058 <switchOctave+0x860>)
 8012e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_4_inc = ((((float) NOTE_D4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012e90:	6030      	str	r0, [r6, #0]
          freq_5_inc = ((((float) NOTE_E4) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012e92:	4629      	mov	r1, r5
 8012e94:	4620      	mov	r0, r4
 8012e96:	f7ed fb6b 	bl	8000570 <__aeabi_dmul>
 8012e9a:	f7ed fe61 	bl	8000b60 <__aeabi_d2f>
 8012e9e:	4b9b      	ldr	r3, [pc, #620]	; (801310c <switchOctave+0x914>)
          freq_6_inc = ((((float) NOTE_F4 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012ea0:	4e9b      	ldr	r6, [pc, #620]	; (8013110 <switchOctave+0x918>)
          freq_5_inc = ((((float) NOTE_E4) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012ea2:	6018      	str	r0, [r3, #0]
          freq_6_inc = ((((float) NOTE_F4 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012ea4:	4629      	mov	r1, r5
 8012ea6:	a36e      	add	r3, pc, #440	; (adr r3, 8013060 <switchOctave+0x868>)
 8012ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eac:	4620      	mov	r0, r4
 8012eae:	f7ed fb5f 	bl	8000570 <__aeabi_dmul>
 8012eb2:	f7ed fe55 	bl	8000b60 <__aeabi_d2f>
          freq_7_inc = ((((float) NOTE_F4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012eb6:	a36c      	add	r3, pc, #432	; (adr r3, 8013068 <switchOctave+0x870>)
 8012eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_6_inc = ((((float) NOTE_F4 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012ebc:	6030      	str	r0, [r6, #0]
          freq_7_inc = ((((float) NOTE_F4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012ebe:	4629      	mov	r1, r5
 8012ec0:	4620      	mov	r0, r4
 8012ec2:	f7ed fb55 	bl	8000570 <__aeabi_dmul>
 8012ec6:	f7ed fe4b 	bl	8000b60 <__aeabi_d2f>
 8012eca:	4b92      	ldr	r3, [pc, #584]	; (8013114 <switchOctave+0x91c>)
          freq_8_inc = ((((float) NOTE_G4 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012ecc:	4e92      	ldr	r6, [pc, #584]	; (8013118 <switchOctave+0x920>)
          freq_7_inc = ((((float) NOTE_F4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012ece:	6018      	str	r0, [r3, #0]
          freq_8_inc = ((((float) NOTE_G4 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012ed0:	4629      	mov	r1, r5
 8012ed2:	a367      	add	r3, pc, #412	; (adr r3, 8013070 <switchOctave+0x878>)
 8012ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ed8:	4620      	mov	r0, r4
 8012eda:	f7ed fb49 	bl	8000570 <__aeabi_dmul>
 8012ede:	f7ed fe3f 	bl	8000b60 <__aeabi_d2f>
          freq_9_inc = ((((float) NOTE_G4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012ee2:	a365      	add	r3, pc, #404	; (adr r3, 8013078 <switchOctave+0x880>)
 8012ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_8_inc = ((((float) NOTE_G4 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012ee8:	6030      	str	r0, [r6, #0]
          freq_9_inc = ((((float) NOTE_G4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012eea:	4629      	mov	r1, r5
 8012eec:	4620      	mov	r0, r4
 8012eee:	f7ed fb3f 	bl	8000570 <__aeabi_dmul>
 8012ef2:	f7ed fe35 	bl	8000b60 <__aeabi_d2f>
 8012ef6:	4b89      	ldr	r3, [pc, #548]	; (801311c <switchOctave+0x924>)
          freq_10_inc = ((((float) NOTE_A4 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012ef8:	4e89      	ldr	r6, [pc, #548]	; (8013120 <switchOctave+0x928>)
          freq_9_inc = ((((float) NOTE_G4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012efa:	6018      	str	r0, [r3, #0]
          freq_10_inc = ((((float) NOTE_A4 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012efc:	4629      	mov	r1, r5
 8012efe:	a360      	add	r3, pc, #384	; (adr r3, 8013080 <switchOctave+0x888>)
 8012f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f04:	4620      	mov	r0, r4
 8012f06:	f7ed fb33 	bl	8000570 <__aeabi_dmul>
 8012f0a:	f7ed fe29 	bl	8000b60 <__aeabi_d2f>
          freq_11_inc = ((((float) NOTE_A4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012f0e:	a35e      	add	r3, pc, #376	; (adr r3, 8013088 <switchOctave+0x890>)
 8012f10:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_10_inc = ((((float) NOTE_A4 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012f14:	6030      	str	r0, [r6, #0]
          freq_11_inc = ((((float) NOTE_A4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012f16:	4629      	mov	r1, r5
 8012f18:	4620      	mov	r0, r4
 8012f1a:	f7ed fb29 	bl	8000570 <__aeabi_dmul>
 8012f1e:	f7ed fe1f 	bl	8000b60 <__aeabi_d2f>
 8012f22:	4b80      	ldr	r3, [pc, #512]	; (8013124 <switchOctave+0x92c>)
          freq_12_inc = ((((float) NOTE_B4) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012f24:	4e80      	ldr	r6, [pc, #512]	; (8013128 <switchOctave+0x930>)
          freq_11_inc = ((((float) NOTE_A4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012f26:	6018      	str	r0, [r3, #0]
          freq_12_inc = ((((float) NOTE_B4) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012f28:	a359      	add	r3, pc, #356	; (adr r3, 8013090 <switchOctave+0x898>)
 8012f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f2e:	e676      	b.n	8012c1e <switchOctave+0x426>
          freq_1_inc = ((((float) NOTE_C5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012f30:	4b71      	ldr	r3, [pc, #452]	; (80130f8 <switchOctave+0x900>)
 8012f32:	4f72      	ldr	r7, [pc, #456]	; (80130fc <switchOctave+0x904>)
 8012f34:	6818      	ldr	r0, [r3, #0]
          freq_2_inc = ((((float) NOTE_C5S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012f36:	4e72      	ldr	r6, [pc, #456]	; (8013100 <switchOctave+0x908>)
          freq_1_inc = ((((float) NOTE_C5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012f38:	f7ed faa4 	bl	8000484 <__aeabi_ui2d>
 8012f3c:	a356      	add	r3, pc, #344	; (adr r3, 8013098 <switchOctave+0x8a0>)
 8012f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f42:	4604      	mov	r4, r0
 8012f44:	460d      	mov	r5, r1
 8012f46:	f7ed fb13 	bl	8000570 <__aeabi_dmul>
 8012f4a:	f7ed fe09 	bl	8000b60 <__aeabi_d2f>
          freq_2_inc = ((((float) NOTE_C5S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012f4e:	a354      	add	r3, pc, #336	; (adr r3, 80130a0 <switchOctave+0x8a8>)
 8012f50:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_1_inc = ((((float) NOTE_C5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012f54:	6038      	str	r0, [r7, #0]
          freq_2_inc = ((((float) NOTE_C5S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012f56:	4629      	mov	r1, r5
 8012f58:	4620      	mov	r0, r4
 8012f5a:	f7ed fb09 	bl	8000570 <__aeabi_dmul>
 8012f5e:	f7ed fdff 	bl	8000b60 <__aeabi_d2f>
          freq_3_inc = ((((float) NOTE_D5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012f62:	a351      	add	r3, pc, #324	; (adr r3, 80130a8 <switchOctave+0x8b0>)
 8012f64:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_2_inc = ((((float) NOTE_C5S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012f68:	6030      	str	r0, [r6, #0]
          freq_3_inc = ((((float) NOTE_D5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012f6a:	4629      	mov	r1, r5
 8012f6c:	4620      	mov	r0, r4
 8012f6e:	f7ed faff 	bl	8000570 <__aeabi_dmul>
 8012f72:	f7ed fdf5 	bl	8000b60 <__aeabi_d2f>
 8012f76:	4b63      	ldr	r3, [pc, #396]	; (8013104 <switchOctave+0x90c>)
          freq_4_inc = ((((float) NOTE_D5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012f78:	4e63      	ldr	r6, [pc, #396]	; (8013108 <switchOctave+0x910>)
          freq_3_inc = ((((float) NOTE_D5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012f7a:	6018      	str	r0, [r3, #0]
          freq_4_inc = ((((float) NOTE_D5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012f7c:	4629      	mov	r1, r5
 8012f7e:	a34c      	add	r3, pc, #304	; (adr r3, 80130b0 <switchOctave+0x8b8>)
 8012f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f84:	4620      	mov	r0, r4
 8012f86:	f7ed faf3 	bl	8000570 <__aeabi_dmul>
 8012f8a:	f7ed fde9 	bl	8000b60 <__aeabi_d2f>
          freq_5_inc = ((((float) NOTE_E5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012f8e:	a34a      	add	r3, pc, #296	; (adr r3, 80130b8 <switchOctave+0x8c0>)
 8012f90:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_4_inc = ((((float) NOTE_D5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012f94:	6030      	str	r0, [r6, #0]
          freq_5_inc = ((((float) NOTE_E5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012f96:	4629      	mov	r1, r5
 8012f98:	4620      	mov	r0, r4
 8012f9a:	f7ed fae9 	bl	8000570 <__aeabi_dmul>
 8012f9e:	f7ed fddf 	bl	8000b60 <__aeabi_d2f>
 8012fa2:	4b5a      	ldr	r3, [pc, #360]	; (801310c <switchOctave+0x914>)
          freq_6_inc = ((((float) NOTE_F5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012fa4:	4e5a      	ldr	r6, [pc, #360]	; (8013110 <switchOctave+0x918>)
          freq_5_inc = ((((float) NOTE_E5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012fa6:	6018      	str	r0, [r3, #0]
          freq_6_inc = ((((float) NOTE_F5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012fa8:	4629      	mov	r1, r5
 8012faa:	a345      	add	r3, pc, #276	; (adr r3, 80130c0 <switchOctave+0x8c8>)
 8012fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fb0:	4620      	mov	r0, r4
 8012fb2:	f7ed fadd 	bl	8000570 <__aeabi_dmul>
 8012fb6:	f7ed fdd3 	bl	8000b60 <__aeabi_d2f>
          freq_7_inc = ((((float) NOTE_F5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012fba:	a343      	add	r3, pc, #268	; (adr r3, 80130c8 <switchOctave+0x8d0>)
 8012fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_6_inc = ((((float) NOTE_F5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012fc0:	6030      	str	r0, [r6, #0]
          freq_7_inc = ((((float) NOTE_F5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012fc2:	4629      	mov	r1, r5
 8012fc4:	4620      	mov	r0, r4
 8012fc6:	f7ed fad3 	bl	8000570 <__aeabi_dmul>
 8012fca:	f7ed fdc9 	bl	8000b60 <__aeabi_d2f>
 8012fce:	4b51      	ldr	r3, [pc, #324]	; (8013114 <switchOctave+0x91c>)
          freq_8_inc = ((((float) NOTE_G5 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012fd0:	4e51      	ldr	r6, [pc, #324]	; (8013118 <switchOctave+0x920>)
          freq_7_inc = ((((float) NOTE_F5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012fd2:	6018      	str	r0, [r3, #0]
          freq_8_inc = ((((float) NOTE_G5 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012fd4:	4629      	mov	r1, r5
 8012fd6:	a33e      	add	r3, pc, #248	; (adr r3, 80130d0 <switchOctave+0x8d8>)
 8012fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fdc:	4620      	mov	r0, r4
 8012fde:	f7ed fac7 	bl	8000570 <__aeabi_dmul>
 8012fe2:	f7ed fdbd 	bl	8000b60 <__aeabi_d2f>
          freq_9_inc = ((((float) NOTE_G5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012fe6:	a33c      	add	r3, pc, #240	; (adr r3, 80130d8 <switchOctave+0x8e0>)
 8012fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_8_inc = ((((float) NOTE_G5 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012fec:	6030      	str	r0, [r6, #0]
          freq_9_inc = ((((float) NOTE_G5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012fee:	4629      	mov	r1, r5
 8012ff0:	4620      	mov	r0, r4
 8012ff2:	f7ed fabd 	bl	8000570 <__aeabi_dmul>
 8012ff6:	f7ed fdb3 	bl	8000b60 <__aeabi_d2f>
 8012ffa:	4b48      	ldr	r3, [pc, #288]	; (801311c <switchOctave+0x924>)
          freq_10_inc = ((((float) NOTE_A5 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012ffc:	4e48      	ldr	r6, [pc, #288]	; (8013120 <switchOctave+0x928>)
          freq_9_inc = ((((float) NOTE_G5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8012ffe:	6018      	str	r0, [r3, #0]
          freq_10_inc = ((((float) NOTE_A5 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013000:	4629      	mov	r1, r5
 8013002:	a337      	add	r3, pc, #220	; (adr r3, 80130e0 <switchOctave+0x8e8>)
 8013004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013008:	4620      	mov	r0, r4
 801300a:	f7ed fab1 	bl	8000570 <__aeabi_dmul>
 801300e:	f7ed fda7 	bl	8000b60 <__aeabi_d2f>
          freq_11_inc = ((((float) NOTE_A5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013012:	a335      	add	r3, pc, #212	; (adr r3, 80130e8 <switchOctave+0x8f0>)
 8013014:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_10_inc = ((((float) NOTE_A5 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013018:	6030      	str	r0, [r6, #0]
          freq_11_inc = ((((float) NOTE_A5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801301a:	4629      	mov	r1, r5
 801301c:	4620      	mov	r0, r4
 801301e:	f7ed faa7 	bl	8000570 <__aeabi_dmul>
 8013022:	f7ed fd9d 	bl	8000b60 <__aeabi_d2f>
 8013026:	4b3f      	ldr	r3, [pc, #252]	; (8013124 <switchOctave+0x92c>)
          freq_12_inc = ((((float) NOTE_B5 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013028:	4e3f      	ldr	r6, [pc, #252]	; (8013128 <switchOctave+0x930>)
          freq_11_inc = ((((float) NOTE_A5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801302a:	6018      	str	r0, [r3, #0]
          freq_12_inc = ((((float) NOTE_B5 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801302c:	a330      	add	r3, pc, #192	; (adr r3, 80130f0 <switchOctave+0x8f8>)
 801302e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013032:	e5f4      	b.n	8012c1e <switchOctave+0x426>
 8013034:	f3af 8000 	nop.w
 8013038:	3b0fa087 	.word	0x3b0fa087
 801303c:	3edb6ef8 	.word	0x3edb6ef8
 8013040:	2aea8f55 	.word	0x2aea8f55
 8013044:	3edd1093 	.word	0x3edd1093
 8013048:	92817765 	.word	0x92817765
 801304c:	3edecb02 	.word	0x3edecb02
 8013050:	47d3d428 	.word	0x47d3d428
 8013054:	3ee04fe0 	.word	0x3ee04fe0
 8013058:	26e978d5 	.word	0x26e978d5
 801305c:	3ee14831 	.word	0x3ee14831
 8013060:	429aaf44 	.word	0x429aaf44
 8013064:	3ee24f42 	.word	0x3ee24f42
 8013068:	a9a4a999 	.word	0xa9a4a999
 801306c:	3ee365f9 	.word	0x3ee365f9
 8013070:	8c210b13 	.word	0x8c210b13
 8013074:	3ee48d44 	.word	0x3ee48d44
 8013078:	16d0fcdd 	.word	0x16d0fcdd
 801307c:	3ee5c621 	.word	0x3ee5c621
 8013080:	7cfa26a2 	.word	0x7cfa26a2
 8013084:	3ee71194 	.word	0x3ee71194
 8013088:	500c87ce 	.word	0x500c87ce
 801308c:	3ee870bf 	.word	0x3ee870bf
 8013090:	0d24abb1 	.word	0x0d24abb1
 8013094:	3ee9e4c9 	.word	0x3ee9e4c9
 8013098:	aa6167fa 	.word	0xaa6167fa
 801309c:	3eeb6ef4 	.word	0x3eeb6ef4
 80130a0:	9a3c56c9 	.word	0x9a3c56c9
 80130a4:	3eed108f 	.word	0x3eed108f
 80130a8:	92817765 	.word	0x92817765
 80130ac:	3eeecb02 	.word	0x3eeecb02
 80130b0:	47d3d428 	.word	0x47d3d428
 80130b4:	3ef04fe0 	.word	0x3ef04fe0
 80130b8:	796a4f29 	.word	0x796a4f29
 80130bc:	3ef1482f 	.word	0x3ef1482f
 80130c0:	429aaf44 	.word	0x429aaf44
 80130c4:	3ef24f42 	.word	0x3ef24f42
 80130c8:	71fbc5de 	.word	0x71fbc5de
 80130cc:	3ef365fb 	.word	0x3ef365fb
 80130d0:	54782759 	.word	0x54782759
 80130d4:	3ef48d46 	.word	0x3ef48d46
 80130d8:	6951d331 	.word	0x6951d331
 80130dc:	3ef5c61f 	.word	0x3ef5c61f
 80130e0:	7cfa26a2 	.word	0x7cfa26a2
 80130e4:	3ef71194 	.word	0x3ef71194
 80130e8:	500c87ce 	.word	0x500c87ce
 80130ec:	3ef870bf 	.word	0x3ef870bf
 80130f0:	d57bc7f8 	.word	0xd57bc7f8
 80130f4:	3ef9e4ca 	.word	0x3ef9e4ca
 80130f8:	20000058 	.word	0x20000058
 80130fc:	200063b4 	.word	0x200063b4
 8013100:	20007bf4 	.word	0x20007bf4
 8013104:	20006fc8 	.word	0x20006fc8
 8013108:	200077d8 	.word	0x200077d8
 801310c:	200077d4 	.word	0x200077d4
 8013110:	200077cc 	.word	0x200077cc
 8013114:	20006fc0 	.word	0x20006fc0
 8013118:	2007db18 	.word	0x2007db18
 801311c:	200077d0 	.word	0x200077d0
 8013120:	2007d708 	.word	0x2007d708
 8013124:	200077e0 	.word	0x200077e0
 8013128:	2007d304 	.word	0x2007d304

0801312c <setTable>:
  if(playbackStatus == 0){
 801312c:	4b20      	ldr	r3, [pc, #128]	; (80131b0 <setTable+0x84>)
  currentTable = table;
 801312e:	4a21      	ldr	r2, [pc, #132]	; (80131b4 <setTable+0x88>)
  if(playbackStatus == 0){
 8013130:	781b      	ldrb	r3, [r3, #0]
  currentTable = table;
 8013132:	7010      	strb	r0, [r2, #0]
  if(playbackStatus == 0){
 8013134:	b99b      	cbnz	r3, 801315e <setTable+0x32>
    switch (table) {
 8013136:	3851      	subs	r0, #81	; 0x51
  switchOctave(octave);
 8013138:	491f      	ldr	r1, [pc, #124]	; (80131b8 <setTable+0x8c>)
    switch (table) {
 801313a:	2806      	cmp	r0, #6
 801313c:	d805      	bhi.n	801314a <setTable+0x1e>
 801313e:	e8df f000 	tbb	[pc, r0]
 8013142:	2319      	.short	0x2319
 8013144:	04040f04 	.word	0x04040f04
 8013148:	2d          	.byte	0x2d
 8013149:	00          	.byte	0x00
  waveTable = desired_table;
 801314a:	4a1c      	ldr	r2, [pc, #112]	; (80131bc <setTable+0x90>)
  max_table_index = size;
 801314c:	4b1c      	ldr	r3, [pc, #112]	; (80131c0 <setTable+0x94>)
  switchOctave(octave);
 801314e:	7808      	ldrb	r0, [r1, #0]
  waveTable = desired_table;
 8013150:	491c      	ldr	r1, [pc, #112]	; (80131c4 <setTable+0x98>)
 8013152:	6011      	str	r1, [r2, #0]
  max_table_index = size;
 8013154:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013158:	601a      	str	r2, [r3, #0]
  switchOctave(octave);
 801315a:	f7ff bb4d 	b.w	80127f8 <switchOctave>
 801315e:	4770      	bx	lr
  waveTable = desired_table;
 8013160:	4a16      	ldr	r2, [pc, #88]	; (80131bc <setTable+0x90>)
  max_table_index = size;
 8013162:	4b17      	ldr	r3, [pc, #92]	; (80131c0 <setTable+0x94>)
  switchOctave(octave);
 8013164:	7808      	ldrb	r0, [r1, #0]
  waveTable = desired_table;
 8013166:	4918      	ldr	r1, [pc, #96]	; (80131c8 <setTable+0x9c>)
 8013168:	6011      	str	r1, [r2, #0]
  max_table_index = size;
 801316a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801316e:	601a      	str	r2, [r3, #0]
  switchOctave(octave);
 8013170:	f7ff bb42 	b.w	80127f8 <switchOctave>
  waveTable = desired_table;
 8013174:	4a11      	ldr	r2, [pc, #68]	; (80131bc <setTable+0x90>)
  max_table_index = size;
 8013176:	4b12      	ldr	r3, [pc, #72]	; (80131c0 <setTable+0x94>)
  switchOctave(octave);
 8013178:	7808      	ldrb	r0, [r1, #0]
  waveTable = desired_table;
 801317a:	4914      	ldr	r1, [pc, #80]	; (80131cc <setTable+0xa0>)
 801317c:	6011      	str	r1, [r2, #0]
  max_table_index = size;
 801317e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013182:	601a      	str	r2, [r3, #0]
  switchOctave(octave);
 8013184:	f7ff bb38 	b.w	80127f8 <switchOctave>
  waveTable = desired_table;
 8013188:	4a0c      	ldr	r2, [pc, #48]	; (80131bc <setTable+0x90>)
  max_table_index = size;
 801318a:	4b0d      	ldr	r3, [pc, #52]	; (80131c0 <setTable+0x94>)
  switchOctave(octave);
 801318c:	7808      	ldrb	r0, [r1, #0]
  waveTable = desired_table;
 801318e:	4910      	ldr	r1, [pc, #64]	; (80131d0 <setTable+0xa4>)
 8013190:	6011      	str	r1, [r2, #0]
  max_table_index = size;
 8013192:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013196:	601a      	str	r2, [r3, #0]
  switchOctave(octave);
 8013198:	f7ff bb2e 	b.w	80127f8 <switchOctave>
  waveTable = desired_table;
 801319c:	4a07      	ldr	r2, [pc, #28]	; (80131bc <setTable+0x90>)
  max_table_index = size;
 801319e:	4b08      	ldr	r3, [pc, #32]	; (80131c0 <setTable+0x94>)
  switchOctave(octave);
 80131a0:	7808      	ldrb	r0, [r1, #0]
  waveTable = desired_table;
 80131a2:	490c      	ldr	r1, [pc, #48]	; (80131d4 <setTable+0xa8>)
 80131a4:	6011      	str	r1, [r2, #0]
  max_table_index = size;
 80131a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80131aa:	601a      	str	r2, [r3, #0]
  switchOctave(octave);
 80131ac:	f7ff bb24 	b.w	80127f8 <switchOctave>
 80131b0:	200053fc 	.word	0x200053fc
 80131b4:	2007db14 	.word	0x2007db14
 80131b8:	2000005c 	.word	0x2000005c
 80131bc:	2007db0c 	.word	0x2007db0c
 80131c0:	20000058 	.word	0x20000058
 80131c4:	080830e4 	.word	0x080830e4
 80131c8:	080834e4 	.word	0x080834e4
 80131cc:	080832e4 	.word	0x080832e4
 80131d0:	08082ce4 	.word	0x08082ce4
 80131d4:	08082ee4 	.word	0x08082ee4

080131d8 <prepBuffer>:
void prepBuffer(void) {
 80131d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131dc:	ed2d 8b02 	vpush	{d8}
  switchOctave(octave);
 80131e0:	49a9      	ldr	r1, [pc, #676]	; (8013488 <prepBuffer+0x2b0>)
  waveTable = desired_table;
 80131e2:	4aaa      	ldr	r2, [pc, #680]	; (801348c <prepBuffer+0x2b4>)
  switchOctave(octave);
 80131e4:	7808      	ldrb	r0, [r1, #0]
  waveTable = desired_table;
 80131e6:	49aa      	ldr	r1, [pc, #680]	; (8013490 <prepBuffer+0x2b8>)
 80131e8:	6011      	str	r1, [r2, #0]
 80131ea:	4aaa      	ldr	r2, [pc, #680]	; (8013494 <prepBuffer+0x2bc>)
  max_table_index = size;
 80131ec:	4baa      	ldr	r3, [pc, #680]	; (8013498 <prepBuffer+0x2c0>)
void prepBuffer(void) {
 80131ee:	b091      	sub	sp, #68	; 0x44
 80131f0:	f3c2 0240 	ubfx	r2, r2, #1, #1
  max_table_index = size;
 80131f4:	f44f 7480 	mov.w	r4, #256	; 0x100
 80131f8:	4615      	mov	r5, r2
 80131fa:	9203      	str	r2, [sp, #12]
 80131fc:	601c      	str	r4, [r3, #0]
  switchOctave(octave);
 80131fe:	f7ff fafb 	bl	80127f8 <switchOctave>
 8013202:	2d00      	cmp	r5, #0
 8013204:	f000 80c4 	beq.w	8013390 <prepBuffer+0x1b8>
    buffer[i] = BUFFER_OFFSET;
 8013208:	4aa2      	ldr	r2, [pc, #648]	; (8013494 <prepBuffer+0x2bc>)
 801320a:	9903      	ldr	r1, [sp, #12]
 801320c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013210:	8013      	strh	r3, [r2, #0]
 8013212:	24ff      	movs	r4, #255	; 0xff
 8013214:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8013218:	f240 10ff 	movw	r0, #511	; 0x1ff
  for (int i = 0; i < BUFFER_SIZE; i++) {
 801321c:	2301      	movs	r3, #1
 801321e:	004e      	lsls	r6, r1, #1
 8013220:	499c      	ldr	r1, [pc, #624]	; (8013494 <prepBuffer+0x2bc>)
    buffer[i] = BUFFER_OFFSET;
 8013222:	f04f 2704 	mov.w	r7, #67109888	; 0x4000400
 8013226:	198d      	adds	r5, r1, r6
  for (int i = 0; i < BUFFER_SIZE; i++) {
 8013228:	2100      	movs	r1, #0
 801322a:	3101      	adds	r1, #1
 801322c:	428c      	cmp	r4, r1
    buffer[i] = BUFFER_OFFSET;
 801322e:	f845 7b04 	str.w	r7, [r5], #4
 8013232:	d8fa      	bhi.n	801322a <prepBuffer+0x52>
 8013234:	4282      	cmp	r2, r0
 8013236:	4413      	add	r3, r2
 8013238:	d004      	beq.n	8013244 <prepBuffer+0x6c>
 801323a:	4996      	ldr	r1, [pc, #600]	; (8013494 <prepBuffer+0x2bc>)
 801323c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013240:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8013244:	4b95      	ldr	r3, [pc, #596]	; (801349c <prepBuffer+0x2c4>)
  setCutoffFreq(.9);
 8013246:	ed9f 0a96 	vldr	s0, [pc, #600]	; 80134a0 <prepBuffer+0x2c8>
 801324a:	4d96      	ldr	r5, [pc, #600]	; (80134a4 <prepBuffer+0x2cc>)
 801324c:	ed9f 8a96 	vldr	s16, [pc, #600]	; 80134a8 <prepBuffer+0x2d0>
 8013250:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8013254:	461c      	mov	r4, r3
 8013256:	9307      	str	r3, [sp, #28]
 8013258:	4b94      	ldr	r3, [pc, #592]	; (80134ac <prepBuffer+0x2d4>)
 801325a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801325e:	461f      	mov	r7, r3
 8013260:	9302      	str	r3, [sp, #8]
 8013262:	f7fb ff49 	bl	800f0f8 <setCutoffFreq>
 8013266:	4621      	mov	r1, r4
 8013268:	f5c4 72ff 	rsb	r2, r4, #510	; 0x1fe
 801326c:	9c03      	ldr	r4, [sp, #12]
 801326e:	f5c7 79ff 	rsb	r9, r7, #510	; 0x1fe
 8013272:	f5c4 73ff 	rsb	r3, r4, #510	; 0x1fe
 8013276:	0852      	lsrs	r2, r2, #1
 8013278:	3201      	adds	r2, #1
 801327a:	ea4f 0959 	mov.w	r9, r9, lsr #1
 801327e:	085b      	lsrs	r3, r3, #1
 8013280:	3301      	adds	r3, #1
 8013282:	920d      	str	r2, [sp, #52]	; 0x34
 8013284:	f109 0901 	add.w	r9, r9, #1
 8013288:	0052      	lsls	r2, r2, #1
 801328a:	9309      	str	r3, [sp, #36]	; 0x24
 801328c:	920e      	str	r2, [sp, #56]	; 0x38
 801328e:	005b      	lsls	r3, r3, #1
 8013290:	ea4f 0249 	mov.w	r2, r9, lsl #1
 8013294:	9205      	str	r2, [sp, #20]
 8013296:	930a      	str	r3, [sp, #40]	; 0x28
 8013298:	460a      	mov	r2, r1
 801329a:	f5c1 7300 	rsb	r3, r1, #512	; 0x200
 801329e:	497f      	ldr	r1, [pc, #508]	; (801349c <prepBuffer+0x2c4>)
 80132a0:	930c      	str	r3, [sp, #48]	; 0x30
 80132a2:	4638      	mov	r0, r7
 80132a4:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 80132a8:	4980      	ldr	r1, [pc, #512]	; (80134ac <prepBuffer+0x2d4>)
 80132aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80132ac:	f5c0 7300 	rsb	r3, r0, #512	; 0x200
 80132b0:	9304      	str	r3, [sp, #16]
 80132b2:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 80132b6:	4f77      	ldr	r7, [pc, #476]	; (8013494 <prepBuffer+0x2bc>)
 80132b8:	9306      	str	r3, [sp, #24]
 80132ba:	4b7d      	ldr	r3, [pc, #500]	; (80134b0 <prepBuffer+0x2d8>)
 80132bc:	19be      	adds	r6, r7, r6
 80132be:	f1a3 0802 	sub.w	r8, r3, #2
 80132c2:	f5c4 7300 	rsb	r3, r4, #512	; 0x200
 80132c6:	960b      	str	r6, [sp, #44]	; 0x2c
 80132c8:	9308      	str	r3, [sp, #32]
    osSemaphoreWait (bufferFillSemaphoreHandle, 40);
 80132ca:	4b7a      	ldr	r3, [pc, #488]	; (80134b4 <prepBuffer+0x2dc>)
 80132cc:	2128      	movs	r1, #40	; 0x28
 80132ce:	6818      	ldr	r0, [r3, #0]
 80132d0:	f7f8 fd52 	bl	800bd78 <osSemaphoreWait>
  taskENTER_CRITICAL();
 80132d4:	f7f8 fe56 	bl	800bf84 <vPortEnterCritical>
    if (buff_toggle == 0) {
 80132d8:	4b77      	ldr	r3, [pc, #476]	; (80134b8 <prepBuffer+0x2e0>)
 80132da:	781c      	ldrb	r4, [r3, #0]
 80132dc:	2c00      	cmp	r4, #0
 80132de:	d15d      	bne.n	801339c <prepBuffer+0x1c4>
  if(HAL_OK != HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)buffer, 512,
 80132e0:	9400      	str	r4, [sp, #0]
 80132e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80132e6:	4a75      	ldr	r2, [pc, #468]	; (80134bc <prepBuffer+0x2e4>)
 80132e8:	4875      	ldr	r0, [pc, #468]	; (80134c0 <prepBuffer+0x2e8>)
 80132ea:	4621      	mov	r1, r4
 80132ec:	f7ee fb06 	bl	80018fc <HAL_DAC_Start_DMA>
 80132f0:	2800      	cmp	r0, #0
 80132f2:	f040 80fd 	bne.w	80134f0 <prepBuffer+0x318>
      buff_toggle = 1;
 80132f6:	4a70      	ldr	r2, [pc, #448]	; (80134b8 <prepBuffer+0x2e0>)
 80132f8:	2301      	movs	r3, #1
 80132fa:	7013      	strb	r3, [r2, #0]
 80132fc:	9a02      	ldr	r2, [sp, #8]
 80132fe:	2a00      	cmp	r2, #0
 8013300:	f000 810d 	beq.w	801351e <prepBuffer+0x346>
  for (int i = 0; i < BUFFER_SIZE; i++) {
 8013304:	4618      	mov	r0, r3
    buffer[i] = BUFFER_OFFSET;
 8013306:	4b69      	ldr	r3, [pc, #420]	; (80134ac <prepBuffer+0x2d4>)
 8013308:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801330c:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < BUFFER_SIZE; i++) {
 801330e:	9a06      	ldr	r2, [sp, #24]
 8013310:	2300      	movs	r3, #0
    buffer[i] = BUFFER_OFFSET;
 8013312:	f04f 2104 	mov.w	r1, #67109888	; 0x4000400
 8013316:	3301      	adds	r3, #1
 8013318:	4599      	cmp	r9, r3
 801331a:	f842 1b04 	str.w	r1, [r2], #4
 801331e:	d8fa      	bhi.n	8013316 <prepBuffer+0x13e>
 8013320:	9a05      	ldr	r2, [sp, #20]
 8013322:	9904      	ldr	r1, [sp, #16]
 8013324:	4613      	mov	r3, r2
 8013326:	4291      	cmp	r1, r2
 8013328:	4403      	add	r3, r0
 801332a:	d004      	beq.n	8013336 <prepBuffer+0x15e>
 801332c:	495f      	ldr	r1, [pc, #380]	; (80134ac <prepBuffer+0x2d4>)
 801332e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013332:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  if (lidarModeActive) {
 8013336:	4b63      	ldr	r3, [pc, #396]	; (80134c4 <prepBuffer+0x2ec>)
 8013338:	781b      	ldrb	r3, [r3, #0]
 801333a:	2b00      	cmp	r3, #0
 801333c:	f040 8202 	bne.w	8013744 <prepBuffer+0x56c>
  } else if (capModeActive) {
 8013340:	4b61      	ldr	r3, [pc, #388]	; (80134c8 <prepBuffer+0x2f0>)
 8013342:	781b      	ldrb	r3, [r3, #0]
 8013344:	b113      	cbz	r3, 801334c <prepBuffer+0x174>
 8013346:	4859      	ldr	r0, [pc, #356]	; (80134ac <prepBuffer+0x2d4>)
 8013348:	f7ff f862 	bl	8012410 <fillBuffer.part.2>
	if(getBitCrush() > 0){
 801334c:	f7fd fbf6 	bl	8010b3c <getBitCrush>
 8013350:	2800      	cmp	r0, #0
 8013352:	f040 8103 	bne.w	801355c <prepBuffer+0x384>
	if(lowPassFilter_state == 1){
 8013356:	4b5d      	ldr	r3, [pc, #372]	; (80134cc <prepBuffer+0x2f4>)
 8013358:	781b      	ldrb	r3, [r3, #0]
 801335a:	2b01      	cmp	r3, #1
 801335c:	f000 8115 	beq.w	801358a <prepBuffer+0x3b2>
	    memcpy(filtered_buffer_2, buffer_2, sizeof(filtered_buffer_2) );
 8013360:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013364:	4951      	ldr	r1, [pc, #324]	; (80134ac <prepBuffer+0x2d4>)
 8013366:	485a      	ldr	r0, [pc, #360]	; (80134d0 <prepBuffer+0x2f8>)
 8013368:	f002 f890 	bl	801548c <memcpy>
	if(postWaveshape > 0){
 801336c:	4b59      	ldr	r3, [pc, #356]	; (80134d4 <prepBuffer+0x2fc>)
 801336e:	781b      	ldrb	r3, [r3, #0]
 8013370:	2b00      	cmp	r3, #0
 8013372:	f040 80d6 	bne.w	8013522 <prepBuffer+0x34a>
	if(playbackStatus == 1){
 8013376:	4b58      	ldr	r3, [pc, #352]	; (80134d8 <prepBuffer+0x300>)
 8013378:	781b      	ldrb	r3, [r3, #0]
 801337a:	2b01      	cmp	r3, #1
 801337c:	f000 810c 	beq.w	8013598 <prepBuffer+0x3c0>
	else if(recordingStatus == 1){
 8013380:	4b56      	ldr	r3, [pc, #344]	; (80134dc <prepBuffer+0x304>)
 8013382:	781b      	ldrb	r3, [r3, #0]
 8013384:	2b01      	cmp	r3, #1
 8013386:	f000 8264 	beq.w	8013852 <prepBuffer+0x67a>
	taskEXIT_CRITICAL();
 801338a:	f7f8 fe1d 	bl	800bfc8 <vPortExitCritical>
    osSemaphoreWait (bufferFillSemaphoreHandle, 40);
 801338e:	e79c      	b.n	80132ca <prepBuffer+0xf2>
  for (int i = 0; i < BUFFER_SIZE; i++) {
 8013390:	9b03      	ldr	r3, [sp, #12]
  switchOctave(octave);
 8013392:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013396:	4610      	mov	r0, r2
 8013398:	4619      	mov	r1, r3
 801339a:	e740      	b.n	801321e <prepBuffer+0x46>
    } else if (buff_toggle == 1) {
 801339c:	2c01      	cmp	r4, #1
  if(HAL_OK != HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)buffer, 512,
 801339e:	f04f 0400 	mov.w	r4, #0
 80133a2:	9400      	str	r4, [sp, #0]
 80133a4:	4621      	mov	r1, r4
 80133a6:	f44f 7300 	mov.w	r3, #512	; 0x200
    } else if (buff_toggle == 1) {
 80133aa:	f000 8132 	beq.w	8013612 <prepBuffer+0x43a>
  if(HAL_OK != HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)buffer, 512,
 80133ae:	4a4c      	ldr	r2, [pc, #304]	; (80134e0 <prepBuffer+0x308>)
 80133b0:	4843      	ldr	r0, [pc, #268]	; (80134c0 <prepBuffer+0x2e8>)
 80133b2:	f7ee faa3 	bl	80018fc <HAL_DAC_Start_DMA>
 80133b6:	2800      	cmp	r0, #0
 80133b8:	f040 8113 	bne.w	80135e2 <prepBuffer+0x40a>
      buff_toggle = 0;
 80133bc:	4a3e      	ldr	r2, [pc, #248]	; (80134b8 <prepBuffer+0x2e0>)
 80133be:	2300      	movs	r3, #0
 80133c0:	7013      	strb	r3, [r2, #0]
 80133c2:	9b03      	ldr	r3, [sp, #12]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	f000 8122 	beq.w	801360e <prepBuffer+0x436>
    buffer[i] = BUFFER_OFFSET;
 80133ca:	4a32      	ldr	r2, [pc, #200]	; (8013494 <prepBuffer+0x2bc>)
 80133cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80133d0:	8013      	strh	r3, [r2, #0]
  for (int i = 0; i < BUFFER_SIZE; i++) {
 80133d2:	2001      	movs	r0, #1
 80133d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80133d6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80133d8:	2300      	movs	r3, #0
    buffer[i] = BUFFER_OFFSET;
 80133da:	f04f 2104 	mov.w	r1, #67109888	; 0x4000400
 80133de:	3301      	adds	r3, #1
 80133e0:	429c      	cmp	r4, r3
 80133e2:	f842 1b04 	str.w	r1, [r2], #4
 80133e6:	d8fa      	bhi.n	80133de <prepBuffer+0x206>
 80133e8:	9b08      	ldr	r3, [sp, #32]
 80133ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80133ec:	4619      	mov	r1, r3
 80133ee:	4291      	cmp	r1, r2
 80133f0:	4410      	add	r0, r2
 80133f2:	d004      	beq.n	80133fe <prepBuffer+0x226>
 80133f4:	4a27      	ldr	r2, [pc, #156]	; (8013494 <prepBuffer+0x2bc>)
 80133f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80133fa:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
  if (lidarModeActive) {
 80133fe:	4b31      	ldr	r3, [pc, #196]	; (80134c4 <prepBuffer+0x2ec>)
 8013400:	781b      	ldrb	r3, [r3, #0]
 8013402:	2b00      	cmp	r3, #0
 8013404:	f040 81cf 	bne.w	80137a6 <prepBuffer+0x5ce>
  } else if (capModeActive) {
 8013408:	4b2f      	ldr	r3, [pc, #188]	; (80134c8 <prepBuffer+0x2f0>)
 801340a:	781b      	ldrb	r3, [r3, #0]
 801340c:	b113      	cbz	r3, 8013414 <prepBuffer+0x23c>
 801340e:	4821      	ldr	r0, [pc, #132]	; (8013494 <prepBuffer+0x2bc>)
 8013410:	f7fe fffe 	bl	8012410 <fillBuffer.part.2>
	if(getBitCrush() > 0){
 8013414:	f7fd fb92 	bl	8010b3c <getBitCrush>
 8013418:	2800      	cmp	r0, #0
 801341a:	f040 8175 	bne.w	8013708 <prepBuffer+0x530>
	if(lowPassFilter_state == 1){
 801341e:	4b2b      	ldr	r3, [pc, #172]	; (80134cc <prepBuffer+0x2f4>)
 8013420:	781b      	ldrb	r3, [r3, #0]
 8013422:	2b01      	cmp	r3, #1
 8013424:	f000 8187 	beq.w	8013736 <prepBuffer+0x55e>
	    memcpy(filtered_buffer_3, buffer_3, sizeof(filtered_buffer_3));
 8013428:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801342c:	4919      	ldr	r1, [pc, #100]	; (8013494 <prepBuffer+0x2bc>)
 801342e:	4823      	ldr	r0, [pc, #140]	; (80134bc <prepBuffer+0x2e4>)
 8013430:	f002 f82c 	bl	801548c <memcpy>
	if(postWaveshape > 0){
 8013434:	4b27      	ldr	r3, [pc, #156]	; (80134d4 <prepBuffer+0x2fc>)
 8013436:	781b      	ldrb	r3, [r3, #0]
 8013438:	2b00      	cmp	r3, #0
 801343a:	f040 8148 	bne.w	80136ce <prepBuffer+0x4f6>
	if(playbackStatus == 1){
 801343e:	4b26      	ldr	r3, [pc, #152]	; (80134d8 <prepBuffer+0x300>)
 8013440:	781b      	ldrb	r3, [r3, #0]
 8013442:	2b01      	cmp	r3, #1
 8013444:	f000 8187 	beq.w	8013756 <prepBuffer+0x57e>
	else if(recordingStatus == 1){
 8013448:	4b24      	ldr	r3, [pc, #144]	; (80134dc <prepBuffer+0x304>)
 801344a:	781b      	ldrb	r3, [r3, #0]
 801344c:	2b01      	cmp	r3, #1
 801344e:	d19c      	bne.n	801338a <prepBuffer+0x1b2>
void stopRecording(void){
  recordingStatus = 0;
}

void recordBuffer(q15_t* buffer, uint32_t size){
  if((offset+size) >= (2*MAX_RECORDING_SIZE)){
 8013450:	4b24      	ldr	r3, [pc, #144]	; (80134e4 <prepBuffer+0x30c>)
 8013452:	4a25      	ldr	r2, [pc, #148]	; (80134e8 <prepBuffer+0x310>)
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801345a:	4293      	cmp	r3, r2
 801345c:	f200 8204 	bhi.w	8013868 <prepBuffer+0x690>
      Set_LED(BUTTON_7_G_REG, BUTTON_7_G_PIN, 0);
      Set_LED(BUTTON_7_R_REG, BUTTON_7_R_PIN, 1);
      return;
  }

  memcpy(recordingOffsetPointer, buffer, size);
 8013460:	4916      	ldr	r1, [pc, #88]	; (80134bc <prepBuffer+0x2e4>)
 8013462:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013466:	4b21      	ldr	r3, [pc, #132]	; (80134ec <prepBuffer+0x314>)
 8013468:	6818      	ldr	r0, [r3, #0]
 801346a:	f002 f80f 	bl	801548c <memcpy>

  recordingOffsetPointer += size >> 1;
 801346e:	4b1f      	ldr	r3, [pc, #124]	; (80134ec <prepBuffer+0x314>)
 8013470:	491e      	ldr	r1, [pc, #120]	; (80134ec <prepBuffer+0x314>)
 8013472:	681a      	ldr	r2, [r3, #0]
  offset += size;
 8013474:	4b1b      	ldr	r3, [pc, #108]	; (80134e4 <prepBuffer+0x30c>)
  recordingOffsetPointer += size >> 1;
 8013476:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  offset += size;
 801347a:	681b      	ldr	r3, [r3, #0]
  recordingOffsetPointer += size >> 1;
 801347c:	600a      	str	r2, [r1, #0]
  offset += size;
 801347e:	4a19      	ldr	r2, [pc, #100]	; (80134e4 <prepBuffer+0x30c>)
 8013480:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013484:	6013      	str	r3, [r2, #0]
 8013486:	e780      	b.n	801338a <prepBuffer+0x1b2>
 8013488:	2000005c 	.word	0x2000005c
 801348c:	2007db0c 	.word	0x2007db0c
 8013490:	080830e4 	.word	0x080830e4
 8013494:	2007cefc 	.word	0x2007cefc
 8013498:	20000058 	.word	0x20000058
 801349c:	200077e8 	.word	0x200077e8
 80134a0:	3f666666 	.word	0x3f666666
 80134a4:	20007bf8 	.word	0x20007bf8
 80134a8:	3a000000 	.word	0x3a000000
 80134ac:	20006bb8 	.word	0x20006bb8
 80134b0:	200067b8 	.word	0x200067b8
 80134b4:	20005498 	.word	0x20005498
 80134b8:	20005314 	.word	0x20005314
 80134bc:	2007d70c 	.word	0x2007d70c
 80134c0:	20005564 	.word	0x20005564
 80134c4:	200053f4 	.word	0x200053f4
 80134c8:	20005315 	.word	0x20005315
 80134cc:	200053f5 	.word	0x200053f5
 80134d0:	200063b8 	.word	0x200063b8
 80134d4:	200053fd 	.word	0x200053fd
 80134d8:	200053fc 	.word	0x200053fc
 80134dc:	20005404 	.word	0x20005404
 80134e0:	200073cc 	.word	0x200073cc
 80134e4:	200053f8 	.word	0x200053f8
 80134e8:	000752ff 	.word	0x000752ff
 80134ec:	2007d300 	.word	0x2007d300
      HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80134f0:	4621      	mov	r1, r4
 80134f2:	48b1      	ldr	r0, [pc, #708]	; (80137b8 <prepBuffer+0x5e0>)
      while(HAL_OK != HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)buffer, 512,
 80134f4:	4fb1      	ldr	r7, [pc, #708]	; (80137bc <prepBuffer+0x5e4>)
 80134f6:	4eb0      	ldr	r6, [pc, #704]	; (80137b8 <prepBuffer+0x5e0>)
      HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80134f8:	f7ee fa78 	bl	80019ec <HAL_DAC_Stop_DMA>
      while(HAL_OK != HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)buffer, 512,
 80134fc:	9400      	str	r4, [sp, #0]
 80134fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013502:	463a      	mov	r2, r7
 8013504:	2100      	movs	r1, #0
 8013506:	4630      	mov	r0, r6
 8013508:	f7ee f9f8 	bl	80018fc <HAL_DAC_Start_DMA>
 801350c:	2800      	cmp	r0, #0
 801350e:	d1f5      	bne.n	80134fc <prepBuffer+0x324>
      buff_toggle = 1;
 8013510:	4aab      	ldr	r2, [pc, #684]	; (80137c0 <prepBuffer+0x5e8>)
 8013512:	2301      	movs	r3, #1
 8013514:	7013      	strb	r3, [r2, #0]
 8013516:	9a02      	ldr	r2, [sp, #8]
 8013518:	2a00      	cmp	r2, #0
 801351a:	f47f aef3 	bne.w	8013304 <prepBuffer+0x12c>
 801351e:	4610      	mov	r0, r2
 8013520:	e6f5      	b.n	801330e <prepBuffer+0x136>
 8013522:	2b03      	cmp	r3, #3
 8013524:	f000 8245 	beq.w	80139b2 <prepBuffer+0x7da>
 8013528:	2b01      	cmp	r3, #1
 801352a:	f000 820e 	beq.w	801394a <prepBuffer+0x772>
 801352e:	2b02      	cmp	r3, #2
 8013530:	f000 8295 	beq.w	8013a5e <prepBuffer+0x886>
 8013534:	4ba3      	ldr	r3, [pc, #652]	; (80137c4 <prepBuffer+0x5ec>)
    else if (buffer[i] < LOWER_BOUND) buffer[i] = LOWER_BOUND;
 8013536:	2000      	movs	r0, #0
    if(buffer[i] > UPPER_BOUND) buffer[i] = UPPER_BOUND;
 8013538:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801353c:	e005      	b.n	801354a <prepBuffer+0x372>
 801353e:	8019      	strh	r1, [r3, #0]
  for(uint16_t i = 0; i<size; i++){
 8013540:	4aa1      	ldr	r2, [pc, #644]	; (80137c8 <prepBuffer+0x5f0>)
 8013542:	3302      	adds	r3, #2
 8013544:	4293      	cmp	r3, r2
 8013546:	f43f af16 	beq.w	8013376 <prepBuffer+0x19e>
    if(buffer[i] > UPPER_BOUND) buffer[i] = UPPER_BOUND;
 801354a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801354e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8013552:	dcf4      	bgt.n	801353e <prepBuffer+0x366>
    else if (buffer[i] < LOWER_BOUND) buffer[i] = LOWER_BOUND;
 8013554:	2a00      	cmp	r2, #0
 8013556:	bfb8      	it	lt
 8013558:	8018      	strhlt	r0, [r3, #0]
 801355a:	e7f1      	b.n	8013540 <prepBuffer+0x368>
  uint32_t bitCrush = getBitCrush();
 801355c:	f7fd faee 	bl	8010b3c <getBitCrush>
  arm_shift_q15(buffer, -bitCrush, buffer, size);
 8013560:	4a9a      	ldr	r2, [pc, #616]	; (80137cc <prepBuffer+0x5f4>)
 8013562:	4241      	negs	r1, r0
  uint32_t bitCrush = getBitCrush();
 8013564:	4604      	mov	r4, r0
  arm_shift_q15(buffer, -bitCrush, buffer, size);
 8013566:	b249      	sxtb	r1, r1
 8013568:	4610      	mov	r0, r2
 801356a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801356e:	f001 fe9b 	bl	80152a8 <arm_shift_q15>
  arm_shift_q15(buffer, bitCrush, buffer, size);
 8013572:	4a96      	ldr	r2, [pc, #600]	; (80137cc <prepBuffer+0x5f4>)
 8013574:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013578:	b261      	sxtb	r1, r4
 801357a:	4610      	mov	r0, r2
 801357c:	f001 fe94 	bl	80152a8 <arm_shift_q15>
	if(lowPassFilter_state == 1){
 8013580:	4b93      	ldr	r3, [pc, #588]	; (80137d0 <prepBuffer+0x5f8>)
 8013582:	781b      	ldrb	r3, [r3, #0]
 8013584:	2b01      	cmp	r3, #1
 8013586:	f47f aeeb 	bne.w	8013360 <prepBuffer+0x188>
	 applyCustomFilter(buffer_2, filtered_buffer_2, BUFFER_SIZE);
 801358a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801358e:	498d      	ldr	r1, [pc, #564]	; (80137c4 <prepBuffer+0x5ec>)
 8013590:	488e      	ldr	r0, [pc, #568]	; (80137cc <prepBuffer+0x5f4>)
 8013592:	f7fb fd1d 	bl	800efd0 <applyCustomFilter>
 8013596:	e6e9      	b.n	801336c <prepBuffer+0x194>
 8013598:	4b8e      	ldr	r3, [pc, #568]	; (80137d4 <prepBuffer+0x5fc>)
 801359a:	4e8f      	ldr	r6, [pc, #572]	; (80137d8 <prepBuffer+0x600>)
 801359c:	681f      	ldr	r7, [r3, #0]
 801359e:	4b8f      	ldr	r3, [pc, #572]	; (80137dc <prepBuffer+0x604>)
 80135a0:	681c      	ldr	r4, [r3, #0]
 80135a2:	087f      	lsrs	r7, r7, #1
  //switchTable(recording, offset >> 1);
}

q15_t addPlayback(void){

  recordingIndex++;
 80135a4:	3401      	adds	r4, #1
 80135a6:	42bc      	cmp	r4, r7
 80135a8:	bf28      	it	cs
 80135aa:	2400      	movcs	r4, #0
			filtered_buffer_2[i] += (addPlayback() - ((int16_t)BUFFER_OFFSET)) * PLAYBACK_SCALE;
 80135ac:	f935 0014 	ldrsh.w	r0, [r5, r4, lsl #1]
 80135b0:	f5a0 6080 	sub.w	r0, r0, #1024	; 0x400
 80135b4:	f7ec ff76 	bl	80004a4 <__aeabi_i2d>
 80135b8:	4682      	mov	sl, r0
 80135ba:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 80135be:	468b      	mov	fp, r1
 80135c0:	f7ec ff70 	bl	80004a4 <__aeabi_i2d>
 80135c4:	4602      	mov	r2, r0
 80135c6:	460b      	mov	r3, r1
 80135c8:	4650      	mov	r0, sl
 80135ca:	4659      	mov	r1, fp
 80135cc:	f7ec fe1e 	bl	800020c <__adddf3>
 80135d0:	f7ed fa7e 	bl	8000ad0 <__aeabi_d2iz>
 80135d4:	f826 0f02 	strh.w	r0, [r6, #2]!
		    for(int i = 0; i < BUFFER_SIZE; i++){
 80135d8:	45b0      	cmp	r8, r6
 80135da:	d1e3      	bne.n	80135a4 <prepBuffer+0x3cc>
 80135dc:	4b7f      	ldr	r3, [pc, #508]	; (80137dc <prepBuffer+0x604>)
 80135de:	601c      	str	r4, [r3, #0]
 80135e0:	e6d3      	b.n	801338a <prepBuffer+0x1b2>
      HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80135e2:	4875      	ldr	r0, [pc, #468]	; (80137b8 <prepBuffer+0x5e0>)
 80135e4:	4621      	mov	r1, r4
      while(HAL_OK != HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)buffer, 512,
 80135e6:	4606      	mov	r6, r0
      HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80135e8:	f7ee fa00 	bl	80019ec <HAL_DAC_Stop_DMA>
      while(HAL_OK != HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)buffer, 512,
 80135ec:	9400      	str	r4, [sp, #0]
 80135ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80135f2:	4a7b      	ldr	r2, [pc, #492]	; (80137e0 <prepBuffer+0x608>)
 80135f4:	2100      	movs	r1, #0
 80135f6:	4630      	mov	r0, r6
 80135f8:	f7ee f980 	bl	80018fc <HAL_DAC_Start_DMA>
 80135fc:	2800      	cmp	r0, #0
 80135fe:	d1f5      	bne.n	80135ec <prepBuffer+0x414>
      buff_toggle = 0;
 8013600:	4a6f      	ldr	r2, [pc, #444]	; (80137c0 <prepBuffer+0x5e8>)
 8013602:	2300      	movs	r3, #0
 8013604:	7013      	strb	r3, [r2, #0]
 8013606:	9b03      	ldr	r3, [sp, #12]
 8013608:	2b00      	cmp	r3, #0
 801360a:	f47f aede 	bne.w	80133ca <prepBuffer+0x1f2>
 801360e:	4618      	mov	r0, r3
 8013610:	e6e0      	b.n	80133d4 <prepBuffer+0x1fc>
  if(HAL_OK != HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)buffer, 512,
 8013612:	4a6c      	ldr	r2, [pc, #432]	; (80137c4 <prepBuffer+0x5ec>)
 8013614:	4868      	ldr	r0, [pc, #416]	; (80137b8 <prepBuffer+0x5e0>)
 8013616:	f7ee f971 	bl	80018fc <HAL_DAC_Start_DMA>
 801361a:	2800      	cmp	r0, #0
 801361c:	f040 8100 	bne.w	8013820 <prepBuffer+0x648>
      buff_toggle = 2;
 8013620:	4a67      	ldr	r2, [pc, #412]	; (80137c0 <prepBuffer+0x5e8>)
 8013622:	2302      	movs	r3, #2
 8013624:	7013      	strb	r3, [r2, #0]
 8013626:	9b07      	ldr	r3, [sp, #28]
 8013628:	2b00      	cmp	r3, #0
 801362a:	f000 8110 	beq.w	801384e <prepBuffer+0x676>
    buffer[i] = BUFFER_OFFSET;
 801362e:	4a6d      	ldr	r2, [pc, #436]	; (80137e4 <prepBuffer+0x60c>)
 8013630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013634:	8013      	strh	r3, [r2, #0]
  for (int i = 0; i < BUFFER_SIZE; i++) {
 8013636:	2001      	movs	r0, #1
 8013638:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801363a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801363c:	2300      	movs	r3, #0
    buffer[i] = BUFFER_OFFSET;
 801363e:	f04f 2104 	mov.w	r1, #67109888	; 0x4000400
 8013642:	3301      	adds	r3, #1
 8013644:	42a3      	cmp	r3, r4
 8013646:	f842 1b04 	str.w	r1, [r2], #4
 801364a:	d3fa      	bcc.n	8013642 <prepBuffer+0x46a>
 801364c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801364e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013650:	4619      	mov	r1, r3
 8013652:	4291      	cmp	r1, r2
 8013654:	4410      	add	r0, r2
 8013656:	d004      	beq.n	8013662 <prepBuffer+0x48a>
 8013658:	4a62      	ldr	r2, [pc, #392]	; (80137e4 <prepBuffer+0x60c>)
 801365a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801365e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
  if (lidarModeActive) {
 8013662:	4b61      	ldr	r3, [pc, #388]	; (80137e8 <prepBuffer+0x610>)
 8013664:	781b      	ldrb	r3, [r3, #0]
 8013666:	2b00      	cmp	r3, #0
 8013668:	f040 819a 	bne.w	80139a0 <prepBuffer+0x7c8>
  } else if (capModeActive) {
 801366c:	4b5f      	ldr	r3, [pc, #380]	; (80137ec <prepBuffer+0x614>)
 801366e:	781b      	ldrb	r3, [r3, #0]
 8013670:	b113      	cbz	r3, 8013678 <prepBuffer+0x4a0>
 8013672:	485c      	ldr	r0, [pc, #368]	; (80137e4 <prepBuffer+0x60c>)
 8013674:	f7fe fecc 	bl	8012410 <fillBuffer.part.2>
	if(getBitCrush() > 0){
 8013678:	f7fd fa60 	bl	8010b3c <getBitCrush>
 801367c:	2800      	cmp	r0, #0
 801367e:	f040 8146 	bne.w	801390e <prepBuffer+0x736>
	if(lowPassFilter_state == 1){
 8013682:	4b53      	ldr	r3, [pc, #332]	; (80137d0 <prepBuffer+0x5f8>)
 8013684:	781b      	ldrb	r3, [r3, #0]
 8013686:	2b01      	cmp	r3, #1
 8013688:	f000 8158 	beq.w	801393c <prepBuffer+0x764>
	    memcpy(filtered_buffer_1, buffer_1, sizeof(filtered_buffer_1));
 801368c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013690:	4954      	ldr	r1, [pc, #336]	; (80137e4 <prepBuffer+0x60c>)
 8013692:	4853      	ldr	r0, [pc, #332]	; (80137e0 <prepBuffer+0x608>)
 8013694:	f001 fefa 	bl	801548c <memcpy>
	if(postWaveshape > 0){
 8013698:	4b55      	ldr	r3, [pc, #340]	; (80137f0 <prepBuffer+0x618>)
 801369a:	781b      	ldrb	r3, [r3, #0]
 801369c:	2b00      	cmp	r3, #0
 801369e:	f040 8119 	bne.w	80138d4 <prepBuffer+0x6fc>
	if(playbackStatus == 1){
 80136a2:	4b54      	ldr	r3, [pc, #336]	; (80137f4 <prepBuffer+0x61c>)
 80136a4:	781b      	ldrb	r3, [r3, #0]
 80136a6:	2b01      	cmp	r3, #1
 80136a8:	f000 80ec 	beq.w	8013884 <prepBuffer+0x6ac>
	else if(recordingStatus == 1){
 80136ac:	4b52      	ldr	r3, [pc, #328]	; (80137f8 <prepBuffer+0x620>)
 80136ae:	781b      	ldrb	r3, [r3, #0]
 80136b0:	2b01      	cmp	r3, #1
 80136b2:	f47f ae6a 	bne.w	801338a <prepBuffer+0x1b2>
  if((offset+size) >= (2*MAX_RECORDING_SIZE)){
 80136b6:	4b47      	ldr	r3, [pc, #284]	; (80137d4 <prepBuffer+0x5fc>)
 80136b8:	4a50      	ldr	r2, [pc, #320]	; (80137fc <prepBuffer+0x624>)
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80136c0:	4293      	cmp	r3, r2
 80136c2:	f200 80d1 	bhi.w	8013868 <prepBuffer+0x690>
  memcpy(recordingOffsetPointer, buffer, size);
 80136c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80136ca:	4945      	ldr	r1, [pc, #276]	; (80137e0 <prepBuffer+0x608>)
 80136cc:	e6cb      	b.n	8013466 <prepBuffer+0x28e>
 80136ce:	2b03      	cmp	r3, #3
 80136d0:	f000 821b 	beq.w	8013b0a <prepBuffer+0x932>
 80136d4:	2b01      	cmp	r3, #1
 80136d6:	f000 8197 	beq.w	8013a08 <prepBuffer+0x830>
 80136da:	2b02      	cmp	r3, #2
 80136dc:	f000 81ea 	beq.w	8013ab4 <prepBuffer+0x8dc>
 80136e0:	4b36      	ldr	r3, [pc, #216]	; (80137bc <prepBuffer+0x5e4>)
    else if (buffer[i] < LOWER_BOUND) buffer[i] = LOWER_BOUND;
 80136e2:	2000      	movs	r0, #0
    if(buffer[i] > UPPER_BOUND) buffer[i] = UPPER_BOUND;
 80136e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80136e8:	e005      	b.n	80136f6 <prepBuffer+0x51e>
 80136ea:	8019      	strh	r1, [r3, #0]
  for(uint16_t i = 0; i<size; i++){
 80136ec:	4a44      	ldr	r2, [pc, #272]	; (8013800 <prepBuffer+0x628>)
 80136ee:	3302      	adds	r3, #2
 80136f0:	4293      	cmp	r3, r2
 80136f2:	f43f aea4 	beq.w	801343e <prepBuffer+0x266>
    if(buffer[i] > UPPER_BOUND) buffer[i] = UPPER_BOUND;
 80136f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80136fa:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80136fe:	dcf4      	bgt.n	80136ea <prepBuffer+0x512>
    else if (buffer[i] < LOWER_BOUND) buffer[i] = LOWER_BOUND;
 8013700:	2a00      	cmp	r2, #0
 8013702:	bfb8      	it	lt
 8013704:	8018      	strhlt	r0, [r3, #0]
 8013706:	e7f1      	b.n	80136ec <prepBuffer+0x514>
  uint32_t bitCrush = getBitCrush();
 8013708:	f7fd fa18 	bl	8010b3c <getBitCrush>
  arm_shift_q15(buffer, -bitCrush, buffer, size);
 801370c:	4a3d      	ldr	r2, [pc, #244]	; (8013804 <prepBuffer+0x62c>)
 801370e:	4241      	negs	r1, r0
  uint32_t bitCrush = getBitCrush();
 8013710:	4604      	mov	r4, r0
  arm_shift_q15(buffer, -bitCrush, buffer, size);
 8013712:	b249      	sxtb	r1, r1
 8013714:	4610      	mov	r0, r2
 8013716:	f44f 7300 	mov.w	r3, #512	; 0x200
 801371a:	f001 fdc5 	bl	80152a8 <arm_shift_q15>
  arm_shift_q15(buffer, bitCrush, buffer, size);
 801371e:	4a39      	ldr	r2, [pc, #228]	; (8013804 <prepBuffer+0x62c>)
 8013720:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013724:	b261      	sxtb	r1, r4
 8013726:	4610      	mov	r0, r2
 8013728:	f001 fdbe 	bl	80152a8 <arm_shift_q15>
	if(lowPassFilter_state == 1){
 801372c:	4b28      	ldr	r3, [pc, #160]	; (80137d0 <prepBuffer+0x5f8>)
 801372e:	781b      	ldrb	r3, [r3, #0]
 8013730:	2b01      	cmp	r3, #1
 8013732:	f47f ae79 	bne.w	8013428 <prepBuffer+0x250>
	   applyCustomFilter(buffer_3, filtered_buffer_3, BUFFER_SIZE);
 8013736:	f44f 7200 	mov.w	r2, #512	; 0x200
 801373a:	4920      	ldr	r1, [pc, #128]	; (80137bc <prepBuffer+0x5e4>)
 801373c:	4831      	ldr	r0, [pc, #196]	; (8013804 <prepBuffer+0x62c>)
 801373e:	f7fb fc47 	bl	800efd0 <applyCustomFilter>
 8013742:	e677      	b.n	8013434 <prepBuffer+0x25c>
    addTableToBuffer(buffer, &freq_lidar_inc, &freq_lidar_ind, &freq_lidar_sample_tracker, &freq_lidar_multiplier);
 8013744:	4b30      	ldr	r3, [pc, #192]	; (8013808 <prepBuffer+0x630>)
 8013746:	9300      	str	r3, [sp, #0]
 8013748:	4a30      	ldr	r2, [pc, #192]	; (801380c <prepBuffer+0x634>)
 801374a:	4b31      	ldr	r3, [pc, #196]	; (8013810 <prepBuffer+0x638>)
 801374c:	4931      	ldr	r1, [pc, #196]	; (8013814 <prepBuffer+0x63c>)
 801374e:	481f      	ldr	r0, [pc, #124]	; (80137cc <prepBuffer+0x5f4>)
 8013750:	f7fe fd02 	bl	8012158 <addTableToBuffer>
 8013754:	e5fa      	b.n	801334c <prepBuffer+0x174>
 8013756:	4b1f      	ldr	r3, [pc, #124]	; (80137d4 <prepBuffer+0x5fc>)
 8013758:	4a20      	ldr	r2, [pc, #128]	; (80137dc <prepBuffer+0x604>)
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	6814      	ldr	r4, [r2, #0]
 801375e:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 801381c <prepBuffer+0x644>
 8013762:	ea4f 0b53 	mov.w	fp, r3, lsr #1
  recordingIndex++;
 8013766:	3401      	adds	r4, #1
 8013768:	455c      	cmp	r4, fp
 801376a:	bf28      	it	cs
 801376c:	2400      	movcs	r4, #0
			filtered_buffer_3[i] += (addPlayback() - ((int16_t)BUFFER_OFFSET)) * PLAYBACK_SCALE;
 801376e:	f935 0014 	ldrsh.w	r0, [r5, r4, lsl #1]
 8013772:	f5a0 6080 	sub.w	r0, r0, #1024	; 0x400
 8013776:	f7ec fe95 	bl	80004a4 <__aeabi_i2d>
 801377a:	4606      	mov	r6, r0
 801377c:	f9ba 0002 	ldrsh.w	r0, [sl, #2]
 8013780:	460f      	mov	r7, r1
 8013782:	f7ec fe8f 	bl	80004a4 <__aeabi_i2d>
 8013786:	460b      	mov	r3, r1
 8013788:	4602      	mov	r2, r0
 801378a:	4639      	mov	r1, r7
 801378c:	4630      	mov	r0, r6
 801378e:	f7ec fd3d 	bl	800020c <__adddf3>
 8013792:	f7ed f99d 	bl	8000ad0 <__aeabi_d2iz>
		    for(int i = 0; i < BUFFER_SIZE; i++){
 8013796:	4b20      	ldr	r3, [pc, #128]	; (8013818 <prepBuffer+0x640>)
			filtered_buffer_3[i] += (addPlayback() - ((int16_t)BUFFER_OFFSET)) * PLAYBACK_SCALE;
 8013798:	f82a 0f02 	strh.w	r0, [sl, #2]!
		    for(int i = 0; i < BUFFER_SIZE; i++){
 801379c:	4553      	cmp	r3, sl
 801379e:	d1e2      	bne.n	8013766 <prepBuffer+0x58e>
 80137a0:	4b0e      	ldr	r3, [pc, #56]	; (80137dc <prepBuffer+0x604>)
 80137a2:	601c      	str	r4, [r3, #0]
 80137a4:	e5f1      	b.n	801338a <prepBuffer+0x1b2>
    addTableToBuffer(buffer, &freq_lidar_inc, &freq_lidar_ind, &freq_lidar_sample_tracker, &freq_lidar_multiplier);
 80137a6:	4b18      	ldr	r3, [pc, #96]	; (8013808 <prepBuffer+0x630>)
 80137a8:	9300      	str	r3, [sp, #0]
 80137aa:	4a18      	ldr	r2, [pc, #96]	; (801380c <prepBuffer+0x634>)
 80137ac:	4b18      	ldr	r3, [pc, #96]	; (8013810 <prepBuffer+0x638>)
 80137ae:	4919      	ldr	r1, [pc, #100]	; (8013814 <prepBuffer+0x63c>)
 80137b0:	4814      	ldr	r0, [pc, #80]	; (8013804 <prepBuffer+0x62c>)
 80137b2:	f7fe fcd1 	bl	8012158 <addTableToBuffer>
 80137b6:	e62d      	b.n	8013414 <prepBuffer+0x23c>
 80137b8:	20005564 	.word	0x20005564
 80137bc:	2007d70c 	.word	0x2007d70c
 80137c0:	20005314 	.word	0x20005314
 80137c4:	200063b8 	.word	0x200063b8
 80137c8:	200067b8 	.word	0x200067b8
 80137cc:	20006bb8 	.word	0x20006bb8
 80137d0:	200053f5 	.word	0x200053f5
 80137d4:	200053f8 	.word	0x200053f8
 80137d8:	200063b6 	.word	0x200063b6
 80137dc:	20005400 	.word	0x20005400
 80137e0:	200073cc 	.word	0x200073cc
 80137e4:	200077e8 	.word	0x200077e8
 80137e8:	200053f4 	.word	0x200053f4
 80137ec:	20005315 	.word	0x20005315
 80137f0:	200053fd 	.word	0x200053fd
 80137f4:	200053fc 	.word	0x200053fc
 80137f8:	20005404 	.word	0x20005404
 80137fc:	000752ff 	.word	0x000752ff
 8013800:	2007db0c 	.word	0x2007db0c
 8013804:	2007cefc 	.word	0x2007cefc
 8013808:	200053e0 	.word	0x200053e0
 801380c:	200053dc 	.word	0x200053dc
 8013810:	200053ec 	.word	0x200053ec
 8013814:	20006fbc 	.word	0x20006fbc
 8013818:	2007db0a 	.word	0x2007db0a
 801381c:	2007d70a 	.word	0x2007d70a
      HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8013820:	4621      	mov	r1, r4
 8013822:	48bb      	ldr	r0, [pc, #748]	; (8013b10 <prepBuffer+0x938>)
      while(HAL_OK != HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)buffer, 512,
 8013824:	4fbb      	ldr	r7, [pc, #748]	; (8013b14 <prepBuffer+0x93c>)
 8013826:	4eba      	ldr	r6, [pc, #744]	; (8013b10 <prepBuffer+0x938>)
      HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8013828:	f7ee f8e0 	bl	80019ec <HAL_DAC_Stop_DMA>
      while(HAL_OK != HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)buffer, 512,
 801382c:	9400      	str	r4, [sp, #0]
 801382e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013832:	463a      	mov	r2, r7
 8013834:	2100      	movs	r1, #0
 8013836:	4630      	mov	r0, r6
 8013838:	f7ee f860 	bl	80018fc <HAL_DAC_Start_DMA>
 801383c:	2800      	cmp	r0, #0
 801383e:	d1f5      	bne.n	801382c <prepBuffer+0x654>
      buff_toggle = 2;
 8013840:	4ab5      	ldr	r2, [pc, #724]	; (8013b18 <prepBuffer+0x940>)
 8013842:	2302      	movs	r3, #2
 8013844:	7013      	strb	r3, [r2, #0]
 8013846:	9b07      	ldr	r3, [sp, #28]
 8013848:	2b00      	cmp	r3, #0
 801384a:	f47f aef0 	bne.w	801362e <prepBuffer+0x456>
 801384e:	4618      	mov	r0, r3
 8013850:	e6f2      	b.n	8013638 <prepBuffer+0x460>
  if((offset+size) >= (2*MAX_RECORDING_SIZE)){
 8013852:	4bb2      	ldr	r3, [pc, #712]	; (8013b1c <prepBuffer+0x944>)
 8013854:	4ab2      	ldr	r2, [pc, #712]	; (8013b20 <prepBuffer+0x948>)
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801385c:	4293      	cmp	r3, r2
 801385e:	d803      	bhi.n	8013868 <prepBuffer+0x690>
  memcpy(recordingOffsetPointer, buffer, size);
 8013860:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013864:	49ab      	ldr	r1, [pc, #684]	; (8013b14 <prepBuffer+0x93c>)
 8013866:	e5fe      	b.n	8013466 <prepBuffer+0x28e>
  recordingStatus = 0;
 8013868:	2300      	movs	r3, #0
 801386a:	4cae      	ldr	r4, [pc, #696]	; (8013b24 <prepBuffer+0x94c>)
      Set_LED(BUTTON_7_G_REG, BUTTON_7_G_PIN, 0);
 801386c:	461a      	mov	r2, r3
 801386e:	2180      	movs	r1, #128	; 0x80
 8013870:	2003      	movs	r0, #3
  recordingStatus = 0;
 8013872:	7023      	strb	r3, [r4, #0]
      Set_LED(BUTTON_7_G_REG, BUTTON_7_G_PIN, 0);
 8013874:	f7fc fef6 	bl	8010664 <Set_LED>
      Set_LED(BUTTON_7_R_REG, BUTTON_7_R_PIN, 1);
 8013878:	2201      	movs	r2, #1
 801387a:	2140      	movs	r1, #64	; 0x40
 801387c:	2003      	movs	r0, #3
 801387e:	f7fc fef1 	bl	8010664 <Set_LED>
 8013882:	e582      	b.n	801338a <prepBuffer+0x1b2>
 8013884:	4ba5      	ldr	r3, [pc, #660]	; (8013b1c <prepBuffer+0x944>)
 8013886:	4aa8      	ldr	r2, [pc, #672]	; (8013b28 <prepBuffer+0x950>)
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	6814      	ldr	r4, [r2, #0]
 801388c:	f8df a2d8 	ldr.w	sl, [pc, #728]	; 8013b68 <prepBuffer+0x990>
 8013890:	ea4f 0b53 	mov.w	fp, r3, lsr #1
  recordingIndex++;
 8013894:	3401      	adds	r4, #1
 8013896:	455c      	cmp	r4, fp
 8013898:	bf28      	it	cs
 801389a:	2400      	movcs	r4, #0
		filtered_buffer_1[i] += (addPlayback() - ((int16_t)BUFFER_OFFSET) ) * PLAYBACK_SCALE;
 801389c:	f935 0014 	ldrsh.w	r0, [r5, r4, lsl #1]
 80138a0:	f5a0 6080 	sub.w	r0, r0, #1024	; 0x400
 80138a4:	f7ec fdfe 	bl	80004a4 <__aeabi_i2d>
 80138a8:	4606      	mov	r6, r0
 80138aa:	f9ba 0002 	ldrsh.w	r0, [sl, #2]
 80138ae:	460f      	mov	r7, r1
 80138b0:	f7ec fdf8 	bl	80004a4 <__aeabi_i2d>
 80138b4:	460b      	mov	r3, r1
 80138b6:	4602      	mov	r2, r0
 80138b8:	4639      	mov	r1, r7
 80138ba:	4630      	mov	r0, r6
 80138bc:	f7ec fca6 	bl	800020c <__adddf3>
 80138c0:	f7ed f906 	bl	8000ad0 <__aeabi_d2iz>
	    for(int i = 0; i < BUFFER_SIZE; i++){
 80138c4:	4b99      	ldr	r3, [pc, #612]	; (8013b2c <prepBuffer+0x954>)
		filtered_buffer_1[i] += (addPlayback() - ((int16_t)BUFFER_OFFSET) ) * PLAYBACK_SCALE;
 80138c6:	f82a 0f02 	strh.w	r0, [sl, #2]!
	    for(int i = 0; i < BUFFER_SIZE; i++){
 80138ca:	4553      	cmp	r3, sl
 80138cc:	d1e2      	bne.n	8013894 <prepBuffer+0x6bc>
 80138ce:	4b96      	ldr	r3, [pc, #600]	; (8013b28 <prepBuffer+0x950>)
 80138d0:	601c      	str	r4, [r3, #0]
 80138d2:	e55a      	b.n	801338a <prepBuffer+0x1b2>
 80138d4:	2b03      	cmp	r3, #3
 80138d6:	f000 819d 	beq.w	8013c14 <prepBuffer+0xa3c>
 80138da:	2b01      	cmp	r3, #1
 80138dc:	f000 816f 	beq.w	8013bbe <prepBuffer+0x9e6>
 80138e0:	2b02      	cmp	r3, #2
 80138e2:	f000 81c2 	beq.w	8013c6a <prepBuffer+0xa92>
 80138e6:	4b92      	ldr	r3, [pc, #584]	; (8013b30 <prepBuffer+0x958>)
    else if (buffer[i] < LOWER_BOUND) buffer[i] = LOWER_BOUND;
 80138e8:	2000      	movs	r0, #0
    if(buffer[i] > UPPER_BOUND) buffer[i] = UPPER_BOUND;
 80138ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80138ee:	e005      	b.n	80138fc <prepBuffer+0x724>
 80138f0:	8019      	strh	r1, [r3, #0]
  for(uint16_t i = 0; i<size; i++){
 80138f2:	4a90      	ldr	r2, [pc, #576]	; (8013b34 <prepBuffer+0x95c>)
 80138f4:	3302      	adds	r3, #2
 80138f6:	429a      	cmp	r2, r3
 80138f8:	f43f aed3 	beq.w	80136a2 <prepBuffer+0x4ca>
    if(buffer[i] > UPPER_BOUND) buffer[i] = UPPER_BOUND;
 80138fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013900:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8013904:	dcf4      	bgt.n	80138f0 <prepBuffer+0x718>
    else if (buffer[i] < LOWER_BOUND) buffer[i] = LOWER_BOUND;
 8013906:	2a00      	cmp	r2, #0
 8013908:	bfb8      	it	lt
 801390a:	8018      	strhlt	r0, [r3, #0]
 801390c:	e7f1      	b.n	80138f2 <prepBuffer+0x71a>
  uint32_t bitCrush = getBitCrush();
 801390e:	f7fd f915 	bl	8010b3c <getBitCrush>
  arm_shift_q15(buffer, -bitCrush, buffer, size);
 8013912:	4a89      	ldr	r2, [pc, #548]	; (8013b38 <prepBuffer+0x960>)
 8013914:	4241      	negs	r1, r0
  uint32_t bitCrush = getBitCrush();
 8013916:	4604      	mov	r4, r0
  arm_shift_q15(buffer, -bitCrush, buffer, size);
 8013918:	b249      	sxtb	r1, r1
 801391a:	4610      	mov	r0, r2
 801391c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013920:	f001 fcc2 	bl	80152a8 <arm_shift_q15>
  arm_shift_q15(buffer, bitCrush, buffer, size);
 8013924:	4a84      	ldr	r2, [pc, #528]	; (8013b38 <prepBuffer+0x960>)
 8013926:	f44f 7300 	mov.w	r3, #512	; 0x200
 801392a:	b261      	sxtb	r1, r4
 801392c:	4610      	mov	r0, r2
 801392e:	f001 fcbb 	bl	80152a8 <arm_shift_q15>
	if(lowPassFilter_state == 1){
 8013932:	4b82      	ldr	r3, [pc, #520]	; (8013b3c <prepBuffer+0x964>)
 8013934:	781b      	ldrb	r3, [r3, #0]
 8013936:	2b01      	cmp	r3, #1
 8013938:	f47f aea8 	bne.w	801368c <prepBuffer+0x4b4>
	   applyCustomFilter(buffer_1, filtered_buffer_1, BUFFER_SIZE);
 801393c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013940:	497b      	ldr	r1, [pc, #492]	; (8013b30 <prepBuffer+0x958>)
 8013942:	487d      	ldr	r0, [pc, #500]	; (8013b38 <prepBuffer+0x960>)
 8013944:	f7fb fb44 	bl	800efd0 <applyCustomFilter>
 8013948:	e6a6      	b.n	8013698 <prepBuffer+0x4c0>
 801394a:	4c72      	ldr	r4, [pc, #456]	; (8013b14 <prepBuffer+0x93c>)
 801394c:	e01f      	b.n	801398e <prepBuffer+0x7b6>
 801394e:	ebc3 2203 	rsb	r2, r3, r3, lsl #8
 8013952:	ee07 2a90 	vmov	s15, r2
 8013956:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    else if (buffer[i] < LOWER_BOUND) buffer[i] = LOWER_BOUND;
 801395a:	2b00      	cmp	r3, #0
 801395c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013960:	ee17 0a90 	vmov	r0, s15
 8013964:	db1a      	blt.n	801399c <prepBuffer+0x7c4>
 8013966:	f7ec fdaf 	bl	80004c8 <__aeabi_f2d>
 801396a:	ec41 0b10 	vmov	d0, r0, r1
 801396e:	f001 fdfb 	bl	8015568 <round>
 8013972:	ec51 0b10 	vmov	r0, r1, d0
 8013976:	f7ed f8d3 	bl	8000b20 <__aeabi_d2uiz>
 801397a:	b2c0      	uxtb	r0, r0
    if(postWaveshape == 1) buffer[i] = CHEBYSHEV_4TH_256_DATA[index];
 801397c:	4b70      	ldr	r3, [pc, #448]	; (8013b40 <prepBuffer+0x968>)
 801397e:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8013982:	f824 3b02 	strh.w	r3, [r4], #2
  for(uint16_t i = 0; i<size; i++){
 8013986:	4b6f      	ldr	r3, [pc, #444]	; (8013b44 <prepBuffer+0x96c>)
 8013988:	429c      	cmp	r4, r3
 801398a:	f43f acf4 	beq.w	8013376 <prepBuffer+0x19e>
    if(buffer[i] > UPPER_BOUND) buffer[i] = UPPER_BOUND;
 801398e:	f9b4 3000 	ldrsh.w	r3, [r4]
 8013992:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013996:	ddda      	ble.n	801394e <prepBuffer+0x776>
 8013998:	20ff      	movs	r0, #255	; 0xff
 801399a:	e7ef      	b.n	801397c <prepBuffer+0x7a4>
    else if (buffer[i] < LOWER_BOUND) buffer[i] = LOWER_BOUND;
 801399c:	2000      	movs	r0, #0
 801399e:	e7ed      	b.n	801397c <prepBuffer+0x7a4>
    addTableToBuffer(buffer, &freq_lidar_inc, &freq_lidar_ind, &freq_lidar_sample_tracker, &freq_lidar_multiplier);
 80139a0:	4b69      	ldr	r3, [pc, #420]	; (8013b48 <prepBuffer+0x970>)
 80139a2:	9300      	str	r3, [sp, #0]
 80139a4:	4a69      	ldr	r2, [pc, #420]	; (8013b4c <prepBuffer+0x974>)
 80139a6:	4b6a      	ldr	r3, [pc, #424]	; (8013b50 <prepBuffer+0x978>)
 80139a8:	496a      	ldr	r1, [pc, #424]	; (8013b54 <prepBuffer+0x97c>)
 80139aa:	4863      	ldr	r0, [pc, #396]	; (8013b38 <prepBuffer+0x960>)
 80139ac:	f7fe fbd4 	bl	8012158 <addTableToBuffer>
 80139b0:	e662      	b.n	8013678 <prepBuffer+0x4a0>
 80139b2:	4c58      	ldr	r4, [pc, #352]	; (8013b14 <prepBuffer+0x93c>)
 80139b4:	e01f      	b.n	80139f6 <prepBuffer+0x81e>
 80139b6:	ebc3 2203 	rsb	r2, r3, r3, lsl #8
 80139ba:	ee07 2a90 	vmov	s15, r2
 80139be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    else if (buffer[i] < LOWER_BOUND) buffer[i] = LOWER_BOUND;
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	ee67 7a88 	vmul.f32	s15, s15, s16
 80139c8:	ee17 0a90 	vmov	r0, s15
 80139cc:	db1a      	blt.n	8013a04 <prepBuffer+0x82c>
 80139ce:	f7ec fd7b 	bl	80004c8 <__aeabi_f2d>
 80139d2:	ec41 0b10 	vmov	d0, r0, r1
 80139d6:	f001 fdc7 	bl	8015568 <round>
 80139da:	ec51 0b10 	vmov	r0, r1, d0
 80139de:	f7ed f89f 	bl	8000b20 <__aeabi_d2uiz>
 80139e2:	b2c0      	uxtb	r0, r0
    else if(postWaveshape == 3) buffer[i] = WAVESHAPE_TANH_DATA[index];
 80139e4:	4b5c      	ldr	r3, [pc, #368]	; (8013b58 <prepBuffer+0x980>)
 80139e6:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 80139ea:	f824 3b02 	strh.w	r3, [r4], #2
  for(uint16_t i = 0; i<size; i++){
 80139ee:	4b55      	ldr	r3, [pc, #340]	; (8013b44 <prepBuffer+0x96c>)
 80139f0:	429c      	cmp	r4, r3
 80139f2:	f43f acc0 	beq.w	8013376 <prepBuffer+0x19e>
    if(buffer[i] > UPPER_BOUND) buffer[i] = UPPER_BOUND;
 80139f6:	f9b4 3000 	ldrsh.w	r3, [r4]
 80139fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80139fe:	ddda      	ble.n	80139b6 <prepBuffer+0x7de>
 8013a00:	20ff      	movs	r0, #255	; 0xff
 8013a02:	e7ef      	b.n	80139e4 <prepBuffer+0x80c>
    else if (buffer[i] < LOWER_BOUND) buffer[i] = LOWER_BOUND;
 8013a04:	2000      	movs	r0, #0
 8013a06:	e7ed      	b.n	80139e4 <prepBuffer+0x80c>
 8013a08:	4c54      	ldr	r4, [pc, #336]	; (8013b5c <prepBuffer+0x984>)
 8013a0a:	e01f      	b.n	8013a4c <prepBuffer+0x874>
 8013a0c:	ebc3 2203 	rsb	r2, r3, r3, lsl #8
 8013a10:	ee07 2a90 	vmov	s15, r2
 8013a14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013a1e:	ee17 0a90 	vmov	r0, s15
 8013a22:	db1a      	blt.n	8013a5a <prepBuffer+0x882>
 8013a24:	f7ec fd50 	bl	80004c8 <__aeabi_f2d>
 8013a28:	ec41 0b10 	vmov	d0, r0, r1
 8013a2c:	f001 fd9c 	bl	8015568 <round>
 8013a30:	ec51 0b10 	vmov	r0, r1, d0
 8013a34:	f7ed f874 	bl	8000b20 <__aeabi_d2uiz>
 8013a38:	b2c0      	uxtb	r0, r0
    if(postWaveshape == 1) buffer[i] = CHEBYSHEV_4TH_256_DATA[index];
 8013a3a:	4b41      	ldr	r3, [pc, #260]	; (8013b40 <prepBuffer+0x968>)
 8013a3c:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8013a40:	f824 3b02 	strh.w	r3, [r4], #2
  for(uint16_t i = 0; i<size; i++){
 8013a44:	4b46      	ldr	r3, [pc, #280]	; (8013b60 <prepBuffer+0x988>)
 8013a46:	429c      	cmp	r4, r3
 8013a48:	f43f acf9 	beq.w	801343e <prepBuffer+0x266>
    if(buffer[i] > UPPER_BOUND) buffer[i] = UPPER_BOUND;
 8013a4c:	f9b4 3000 	ldrsh.w	r3, [r4]
 8013a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013a54:	ddda      	ble.n	8013a0c <prepBuffer+0x834>
 8013a56:	20ff      	movs	r0, #255	; 0xff
 8013a58:	e7ef      	b.n	8013a3a <prepBuffer+0x862>
    else if (buffer[i] < LOWER_BOUND) buffer[i] = LOWER_BOUND;
 8013a5a:	2000      	movs	r0, #0
 8013a5c:	e7ed      	b.n	8013a3a <prepBuffer+0x862>
 8013a5e:	4c2d      	ldr	r4, [pc, #180]	; (8013b14 <prepBuffer+0x93c>)
 8013a60:	e01f      	b.n	8013aa2 <prepBuffer+0x8ca>
 8013a62:	ebc3 2203 	rsb	r2, r3, r3, lsl #8
 8013a66:	ee07 2a90 	vmov	s15, r2
 8013a6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013a74:	ee17 0a90 	vmov	r0, s15
 8013a78:	db1a      	blt.n	8013ab0 <prepBuffer+0x8d8>
 8013a7a:	f7ec fd25 	bl	80004c8 <__aeabi_f2d>
 8013a7e:	ec41 0b10 	vmov	d0, r0, r1
 8013a82:	f001 fd71 	bl	8015568 <round>
 8013a86:	ec51 0b10 	vmov	r0, r1, d0
 8013a8a:	f7ed f849 	bl	8000b20 <__aeabi_d2uiz>
 8013a8e:	b2c0      	uxtb	r0, r0
    else if(postWaveshape == 2) buffer[i] = WAVESHAPE_SIGMOID_DATA[index];
 8013a90:	4b34      	ldr	r3, [pc, #208]	; (8013b64 <prepBuffer+0x98c>)
 8013a92:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8013a96:	f824 3b02 	strh.w	r3, [r4], #2
  for(uint16_t i = 0; i<size; i++){
 8013a9a:	4b2a      	ldr	r3, [pc, #168]	; (8013b44 <prepBuffer+0x96c>)
 8013a9c:	42a3      	cmp	r3, r4
 8013a9e:	f43f ac6a 	beq.w	8013376 <prepBuffer+0x19e>
    if(buffer[i] > UPPER_BOUND) buffer[i] = UPPER_BOUND;
 8013aa2:	f9b4 3000 	ldrsh.w	r3, [r4]
 8013aa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013aaa:	ddda      	ble.n	8013a62 <prepBuffer+0x88a>
 8013aac:	20ff      	movs	r0, #255	; 0xff
 8013aae:	e7ef      	b.n	8013a90 <prepBuffer+0x8b8>
    else if (buffer[i] < LOWER_BOUND) buffer[i] = LOWER_BOUND;
 8013ab0:	2000      	movs	r0, #0
 8013ab2:	e7ed      	b.n	8013a90 <prepBuffer+0x8b8>
 8013ab4:	4c29      	ldr	r4, [pc, #164]	; (8013b5c <prepBuffer+0x984>)
 8013ab6:	e01f      	b.n	8013af8 <prepBuffer+0x920>
 8013ab8:	ebc3 2203 	rsb	r2, r3, r3, lsl #8
 8013abc:	ee07 2a90 	vmov	s15, r2
 8013ac0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013aca:	ee17 0a90 	vmov	r0, s15
 8013ace:	db1a      	blt.n	8013b06 <prepBuffer+0x92e>
 8013ad0:	f7ec fcfa 	bl	80004c8 <__aeabi_f2d>
 8013ad4:	ec41 0b10 	vmov	d0, r0, r1
 8013ad8:	f001 fd46 	bl	8015568 <round>
 8013adc:	ec51 0b10 	vmov	r0, r1, d0
 8013ae0:	f7ed f81e 	bl	8000b20 <__aeabi_d2uiz>
 8013ae4:	b2c0      	uxtb	r0, r0
    else if(postWaveshape == 2) buffer[i] = WAVESHAPE_SIGMOID_DATA[index];
 8013ae6:	4b1f      	ldr	r3, [pc, #124]	; (8013b64 <prepBuffer+0x98c>)
 8013ae8:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8013aec:	f824 3b02 	strh.w	r3, [r4], #2
  for(uint16_t i = 0; i<size; i++){
 8013af0:	4b1b      	ldr	r3, [pc, #108]	; (8013b60 <prepBuffer+0x988>)
 8013af2:	42a3      	cmp	r3, r4
 8013af4:	f43f aca3 	beq.w	801343e <prepBuffer+0x266>
    if(buffer[i] > UPPER_BOUND) buffer[i] = UPPER_BOUND;
 8013af8:	f9b4 3000 	ldrsh.w	r3, [r4]
 8013afc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013b00:	ddda      	ble.n	8013ab8 <prepBuffer+0x8e0>
 8013b02:	20ff      	movs	r0, #255	; 0xff
 8013b04:	e7ef      	b.n	8013ae6 <prepBuffer+0x90e>
    else if (buffer[i] < LOWER_BOUND) buffer[i] = LOWER_BOUND;
 8013b06:	2000      	movs	r0, #0
 8013b08:	e7ed      	b.n	8013ae6 <prepBuffer+0x90e>
 8013b0a:	4c14      	ldr	r4, [pc, #80]	; (8013b5c <prepBuffer+0x984>)
 8013b0c:	e04e      	b.n	8013bac <prepBuffer+0x9d4>
 8013b0e:	bf00      	nop
 8013b10:	20005564 	.word	0x20005564
 8013b14:	200063b8 	.word	0x200063b8
 8013b18:	20005314 	.word	0x20005314
 8013b1c:	200053f8 	.word	0x200053f8
 8013b20:	000752ff 	.word	0x000752ff
 8013b24:	20005404 	.word	0x20005404
 8013b28:	20005400 	.word	0x20005400
 8013b2c:	200077ca 	.word	0x200077ca
 8013b30:	200073cc 	.word	0x200073cc
 8013b34:	200077cc 	.word	0x200077cc
 8013b38:	200077e8 	.word	0x200077e8
 8013b3c:	200053f5 	.word	0x200053f5
 8013b40:	08082ae4 	.word	0x08082ae4
 8013b44:	200067b8 	.word	0x200067b8
 8013b48:	200053e0 	.word	0x200053e0
 8013b4c:	200053dc 	.word	0x200053dc
 8013b50:	200053ec 	.word	0x200053ec
 8013b54:	20006fbc 	.word	0x20006fbc
 8013b58:	080838e4 	.word	0x080838e4
 8013b5c:	2007d70c 	.word	0x2007d70c
 8013b60:	2007db0c 	.word	0x2007db0c
 8013b64:	080836e4 	.word	0x080836e4
 8013b68:	200073ca 	.word	0x200073ca
 8013b6c:	ebc3 2203 	rsb	r2, r3, r3, lsl #8
 8013b70:	ee07 2a90 	vmov	s15, r2
 8013b74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013b7e:	ee17 0a90 	vmov	r0, s15
 8013b82:	db1a      	blt.n	8013bba <prepBuffer+0x9e2>
 8013b84:	f7ec fca0 	bl	80004c8 <__aeabi_f2d>
 8013b88:	ec41 0b10 	vmov	d0, r0, r1
 8013b8c:	f001 fcec 	bl	8015568 <round>
 8013b90:	ec51 0b10 	vmov	r0, r1, d0
 8013b94:	f7ec ffc4 	bl	8000b20 <__aeabi_d2uiz>
 8013b98:	b2c0      	uxtb	r0, r0
    else if(postWaveshape == 3) buffer[i] = WAVESHAPE_TANH_DATA[index];
 8013b9a:	4b49      	ldr	r3, [pc, #292]	; (8013cc0 <prepBuffer+0xae8>)
 8013b9c:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8013ba0:	f824 3b02 	strh.w	r3, [r4], #2
  for(uint16_t i = 0; i<size; i++){
 8013ba4:	4b47      	ldr	r3, [pc, #284]	; (8013cc4 <prepBuffer+0xaec>)
 8013ba6:	429c      	cmp	r4, r3
 8013ba8:	f43f ac49 	beq.w	801343e <prepBuffer+0x266>
    if(buffer[i] > UPPER_BOUND) buffer[i] = UPPER_BOUND;
 8013bac:	f9b4 3000 	ldrsh.w	r3, [r4]
 8013bb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013bb4:	ddda      	ble.n	8013b6c <prepBuffer+0x994>
 8013bb6:	20ff      	movs	r0, #255	; 0xff
 8013bb8:	e7ef      	b.n	8013b9a <prepBuffer+0x9c2>
    else if (buffer[i] < LOWER_BOUND) buffer[i] = LOWER_BOUND;
 8013bba:	2000      	movs	r0, #0
 8013bbc:	e7ed      	b.n	8013b9a <prepBuffer+0x9c2>
 8013bbe:	4c42      	ldr	r4, [pc, #264]	; (8013cc8 <prepBuffer+0xaf0>)
 8013bc0:	e01f      	b.n	8013c02 <prepBuffer+0xa2a>
 8013bc2:	ebc3 2203 	rsb	r2, r3, r3, lsl #8
 8013bc6:	ee07 2a90 	vmov	s15, r2
 8013bca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013bd4:	ee17 0a90 	vmov	r0, s15
 8013bd8:	db1a      	blt.n	8013c10 <prepBuffer+0xa38>
 8013bda:	f7ec fc75 	bl	80004c8 <__aeabi_f2d>
 8013bde:	ec41 0b10 	vmov	d0, r0, r1
 8013be2:	f001 fcc1 	bl	8015568 <round>
 8013be6:	ec51 0b10 	vmov	r0, r1, d0
 8013bea:	f7ec ff99 	bl	8000b20 <__aeabi_d2uiz>
 8013bee:	b2c0      	uxtb	r0, r0
    if(postWaveshape == 1) buffer[i] = CHEBYSHEV_4TH_256_DATA[index];
 8013bf0:	4b36      	ldr	r3, [pc, #216]	; (8013ccc <prepBuffer+0xaf4>)
 8013bf2:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8013bf6:	f824 3b02 	strh.w	r3, [r4], #2
  for(uint16_t i = 0; i<size; i++){
 8013bfa:	4b35      	ldr	r3, [pc, #212]	; (8013cd0 <prepBuffer+0xaf8>)
 8013bfc:	42a3      	cmp	r3, r4
 8013bfe:	f43f ad50 	beq.w	80136a2 <prepBuffer+0x4ca>
    if(buffer[i] > UPPER_BOUND) buffer[i] = UPPER_BOUND;
 8013c02:	f9b4 3000 	ldrsh.w	r3, [r4]
 8013c06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013c0a:	ddda      	ble.n	8013bc2 <prepBuffer+0x9ea>
 8013c0c:	20ff      	movs	r0, #255	; 0xff
 8013c0e:	e7ef      	b.n	8013bf0 <prepBuffer+0xa18>
    else if (buffer[i] < LOWER_BOUND) buffer[i] = LOWER_BOUND;
 8013c10:	2000      	movs	r0, #0
 8013c12:	e7ed      	b.n	8013bf0 <prepBuffer+0xa18>
 8013c14:	4c2c      	ldr	r4, [pc, #176]	; (8013cc8 <prepBuffer+0xaf0>)
 8013c16:	e01f      	b.n	8013c58 <prepBuffer+0xa80>
 8013c18:	ebc3 2203 	rsb	r2, r3, r3, lsl #8
 8013c1c:	ee07 2a90 	vmov	s15, r2
 8013c20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013c2a:	ee17 0a90 	vmov	r0, s15
 8013c2e:	db1a      	blt.n	8013c66 <prepBuffer+0xa8e>
 8013c30:	f7ec fc4a 	bl	80004c8 <__aeabi_f2d>
 8013c34:	ec41 0b10 	vmov	d0, r0, r1
 8013c38:	f001 fc96 	bl	8015568 <round>
 8013c3c:	ec51 0b10 	vmov	r0, r1, d0
 8013c40:	f7ec ff6e 	bl	8000b20 <__aeabi_d2uiz>
 8013c44:	b2c0      	uxtb	r0, r0
    else if(postWaveshape == 3) buffer[i] = WAVESHAPE_TANH_DATA[index];
 8013c46:	4b1e      	ldr	r3, [pc, #120]	; (8013cc0 <prepBuffer+0xae8>)
 8013c48:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8013c4c:	f824 3b02 	strh.w	r3, [r4], #2
  for(uint16_t i = 0; i<size; i++){
 8013c50:	4b1f      	ldr	r3, [pc, #124]	; (8013cd0 <prepBuffer+0xaf8>)
 8013c52:	42a3      	cmp	r3, r4
 8013c54:	f43f ad25 	beq.w	80136a2 <prepBuffer+0x4ca>
    if(buffer[i] > UPPER_BOUND) buffer[i] = UPPER_BOUND;
 8013c58:	f9b4 3000 	ldrsh.w	r3, [r4]
 8013c5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013c60:	ddda      	ble.n	8013c18 <prepBuffer+0xa40>
 8013c62:	20ff      	movs	r0, #255	; 0xff
 8013c64:	e7ef      	b.n	8013c46 <prepBuffer+0xa6e>
    else if (buffer[i] < LOWER_BOUND) buffer[i] = LOWER_BOUND;
 8013c66:	2000      	movs	r0, #0
 8013c68:	e7ed      	b.n	8013c46 <prepBuffer+0xa6e>
 8013c6a:	4c17      	ldr	r4, [pc, #92]	; (8013cc8 <prepBuffer+0xaf0>)
 8013c6c:	e01f      	b.n	8013cae <prepBuffer+0xad6>
 8013c6e:	ebc3 2203 	rsb	r2, r3, r3, lsl #8
 8013c72:	ee07 2a90 	vmov	s15, r2
 8013c76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013c80:	ee17 0a90 	vmov	r0, s15
 8013c84:	db1a      	blt.n	8013cbc <prepBuffer+0xae4>
 8013c86:	f7ec fc1f 	bl	80004c8 <__aeabi_f2d>
 8013c8a:	ec41 0b10 	vmov	d0, r0, r1
 8013c8e:	f001 fc6b 	bl	8015568 <round>
 8013c92:	ec51 0b10 	vmov	r0, r1, d0
 8013c96:	f7ec ff43 	bl	8000b20 <__aeabi_d2uiz>
 8013c9a:	b2c0      	uxtb	r0, r0
    else if(postWaveshape == 2) buffer[i] = WAVESHAPE_SIGMOID_DATA[index];
 8013c9c:	4b0d      	ldr	r3, [pc, #52]	; (8013cd4 <prepBuffer+0xafc>)
 8013c9e:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8013ca2:	f824 3b02 	strh.w	r3, [r4], #2
  for(uint16_t i = 0; i<size; i++){
 8013ca6:	4b0a      	ldr	r3, [pc, #40]	; (8013cd0 <prepBuffer+0xaf8>)
 8013ca8:	42a3      	cmp	r3, r4
 8013caa:	f43f acfa 	beq.w	80136a2 <prepBuffer+0x4ca>
    if(buffer[i] > UPPER_BOUND) buffer[i] = UPPER_BOUND;
 8013cae:	f9b4 3000 	ldrsh.w	r3, [r4]
 8013cb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013cb6:	ddda      	ble.n	8013c6e <prepBuffer+0xa96>
 8013cb8:	20ff      	movs	r0, #255	; 0xff
 8013cba:	e7ef      	b.n	8013c9c <prepBuffer+0xac4>
    else if (buffer[i] < LOWER_BOUND) buffer[i] = LOWER_BOUND;
 8013cbc:	2000      	movs	r0, #0
 8013cbe:	e7ed      	b.n	8013c9c <prepBuffer+0xac4>
 8013cc0:	080838e4 	.word	0x080838e4
 8013cc4:	2007db0c 	.word	0x2007db0c
 8013cc8:	200073cc 	.word	0x200073cc
 8013ccc:	08082ae4 	.word	0x08082ae4
 8013cd0:	200077cc 	.word	0x200077cc
 8013cd4:	080836e4 	.word	0x080836e4

08013cd8 <incrementOctave>:
void incrementOctave(void) {
 8013cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (octave == MAX_OCTAVE)
 8013cda:	4abb      	ldr	r2, [pc, #748]	; (8013fc8 <incrementOctave+0x2f0>)
 8013cdc:	7813      	ldrb	r3, [r2, #0]
 8013cde:	2b05      	cmp	r3, #5
 8013ce0:	d00f      	beq.n	8013d02 <incrementOctave+0x2a>
  if(playbackStatus == 1){
 8013ce2:	49ba      	ldr	r1, [pc, #744]	; (8013fcc <incrementOctave+0x2f4>)
 8013ce4:	7809      	ldrb	r1, [r1, #0]
    octave++;
 8013ce6:	3301      	adds	r3, #1
 8013ce8:	b2db      	uxtb	r3, r3
  if(playbackStatus == 1){
 8013cea:	2901      	cmp	r1, #1
    octave++;
 8013cec:	7013      	strb	r3, [r2, #0]
  if(playbackStatus == 1){
 8013cee:	d009      	beq.n	8013d04 <incrementOctave+0x2c>
      if (des_octave == 4) {
 8013cf0:	2b04      	cmp	r3, #4
 8013cf2:	f000 8187 	beq.w	8014004 <incrementOctave+0x32c>
        } else if (des_octave == 5) {
 8013cf6:	2b05      	cmp	r3, #5
 8013cf8:	f000 820d 	beq.w	8014116 <incrementOctave+0x43e>
        } else if (des_octave == 3) {
 8013cfc:	2b03      	cmp	r3, #3
 8013cfe:	f000 808a 	beq.w	8013e16 <incrementOctave+0x13e>
 8013d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (des_octave == 4) {
 8013d04:	2b04      	cmp	r3, #4
 8013d06:	f000 8305 	beq.w	8014314 <incrementOctave+0x63c>
        } else if (des_octave == 5) {
 8013d0a:	2b05      	cmp	r3, #5
 8013d0c:	f000 8384 	beq.w	8014418 <incrementOctave+0x740>
        } else if (des_octave == 3) {
 8013d10:	2b03      	cmp	r3, #3
 8013d12:	d1f6      	bne.n	8013d02 <incrementOctave+0x2a>
          freq_1_inc = ((((float) NOTE_C3) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013d14:	4bae      	ldr	r3, [pc, #696]	; (8013fd0 <incrementOctave+0x2f8>)
 8013d16:	4faf      	ldr	r7, [pc, #700]	; (8013fd4 <incrementOctave+0x2fc>)
 8013d18:	6818      	ldr	r0, [r3, #0]
          freq_2_inc = ((((float) NOTE_C3S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013d1a:	4eaf      	ldr	r6, [pc, #700]	; (8013fd8 <incrementOctave+0x300>)
          freq_1_inc = ((((float) NOTE_C3) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013d1c:	f7ec fbb2 	bl	8000484 <__aeabi_ui2d>
 8013d20:	a37d      	add	r3, pc, #500	; (adr r3, 8013f18 <incrementOctave+0x240>)
 8013d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d26:	4604      	mov	r4, r0
 8013d28:	460d      	mov	r5, r1
 8013d2a:	f7ec fc21 	bl	8000570 <__aeabi_dmul>
 8013d2e:	f7ec ff17 	bl	8000b60 <__aeabi_d2f>
          freq_2_inc = ((((float) NOTE_C3S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013d32:	a37b      	add	r3, pc, #492	; (adr r3, 8013f20 <incrementOctave+0x248>)
 8013d34:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_1_inc = ((((float) NOTE_C3) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013d38:	6038      	str	r0, [r7, #0]
          freq_2_inc = ((((float) NOTE_C3S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013d3a:	4629      	mov	r1, r5
 8013d3c:	4620      	mov	r0, r4
 8013d3e:	f7ec fc17 	bl	8000570 <__aeabi_dmul>
 8013d42:	f7ec ff0d 	bl	8000b60 <__aeabi_d2f>
          freq_3_inc = ((((float) NOTE_D3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013d46:	a378      	add	r3, pc, #480	; (adr r3, 8013f28 <incrementOctave+0x250>)
 8013d48:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_2_inc = ((((float) NOTE_C3S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013d4c:	6030      	str	r0, [r6, #0]
          freq_3_inc = ((((float) NOTE_D3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013d4e:	4629      	mov	r1, r5
 8013d50:	4620      	mov	r0, r4
 8013d52:	f7ec fc0d 	bl	8000570 <__aeabi_dmul>
 8013d56:	f7ec ff03 	bl	8000b60 <__aeabi_d2f>
 8013d5a:	4ba0      	ldr	r3, [pc, #640]	; (8013fdc <incrementOctave+0x304>)
          freq_4_inc = ((((float) NOTE_D3S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013d5c:	4ea0      	ldr	r6, [pc, #640]	; (8013fe0 <incrementOctave+0x308>)
          freq_3_inc = ((((float) NOTE_D3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013d5e:	6018      	str	r0, [r3, #0]
          freq_4_inc = ((((float) NOTE_D3S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013d60:	4629      	mov	r1, r5
 8013d62:	a373      	add	r3, pc, #460	; (adr r3, 8013f30 <incrementOctave+0x258>)
 8013d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d68:	4620      	mov	r0, r4
 8013d6a:	f7ec fc01 	bl	8000570 <__aeabi_dmul>
 8013d6e:	f7ec fef7 	bl	8000b60 <__aeabi_d2f>
          freq_5_inc = ((((float) NOTE_E3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013d72:	a371      	add	r3, pc, #452	; (adr r3, 8013f38 <incrementOctave+0x260>)
 8013d74:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_4_inc = ((((float) NOTE_D3S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013d78:	6030      	str	r0, [r6, #0]
          freq_5_inc = ((((float) NOTE_E3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013d7a:	4629      	mov	r1, r5
 8013d7c:	4620      	mov	r0, r4
 8013d7e:	f7ec fbf7 	bl	8000570 <__aeabi_dmul>
 8013d82:	f7ec feed 	bl	8000b60 <__aeabi_d2f>
 8013d86:	4b97      	ldr	r3, [pc, #604]	; (8013fe4 <incrementOctave+0x30c>)
          freq_6_inc = ((((float) NOTE_F3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013d88:	4e97      	ldr	r6, [pc, #604]	; (8013fe8 <incrementOctave+0x310>)
          freq_5_inc = ((((float) NOTE_E3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013d8a:	6018      	str	r0, [r3, #0]
          freq_6_inc = ((((float) NOTE_F3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013d8c:	4629      	mov	r1, r5
 8013d8e:	a36c      	add	r3, pc, #432	; (adr r3, 8013f40 <incrementOctave+0x268>)
 8013d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d94:	4620      	mov	r0, r4
 8013d96:	f7ec fbeb 	bl	8000570 <__aeabi_dmul>
 8013d9a:	f7ec fee1 	bl	8000b60 <__aeabi_d2f>
          freq_7_inc = ((((float) NOTE_F3S)/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013d9e:	a36a      	add	r3, pc, #424	; (adr r3, 8013f48 <incrementOctave+0x270>)
 8013da0:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_6_inc = ((((float) NOTE_F3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013da4:	6030      	str	r0, [r6, #0]
          freq_7_inc = ((((float) NOTE_F3S)/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013da6:	4629      	mov	r1, r5
 8013da8:	4620      	mov	r0, r4
 8013daa:	f7ec fbe1 	bl	8000570 <__aeabi_dmul>
 8013dae:	f7ec fed7 	bl	8000b60 <__aeabi_d2f>
 8013db2:	4b8e      	ldr	r3, [pc, #568]	; (8013fec <incrementOctave+0x314>)
          freq_8_inc = ((((float) NOTE_G3) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013db4:	4e8e      	ldr	r6, [pc, #568]	; (8013ff0 <incrementOctave+0x318>)
          freq_7_inc = ((((float) NOTE_F3S)/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013db6:	6018      	str	r0, [r3, #0]
          freq_8_inc = ((((float) NOTE_G3) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013db8:	4629      	mov	r1, r5
 8013dba:	a365      	add	r3, pc, #404	; (adr r3, 8013f50 <incrementOctave+0x278>)
 8013dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dc0:	4620      	mov	r0, r4
 8013dc2:	f7ec fbd5 	bl	8000570 <__aeabi_dmul>
 8013dc6:	f7ec fecb 	bl	8000b60 <__aeabi_d2f>
          freq_9_inc = ((((float) NOTE_G3S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013dca:	a363      	add	r3, pc, #396	; (adr r3, 8013f58 <incrementOctave+0x280>)
 8013dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_8_inc = ((((float) NOTE_G3) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013dd0:	6030      	str	r0, [r6, #0]
          freq_9_inc = ((((float) NOTE_G3S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013dd2:	4629      	mov	r1, r5
 8013dd4:	4620      	mov	r0, r4
 8013dd6:	f7ec fbcb 	bl	8000570 <__aeabi_dmul>
 8013dda:	f7ec fec1 	bl	8000b60 <__aeabi_d2f>
 8013dde:	4b85      	ldr	r3, [pc, #532]	; (8013ff4 <incrementOctave+0x31c>)
          freq_10_inc = ((((float) NOTE_A3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013de0:	4f85      	ldr	r7, [pc, #532]	; (8013ff8 <incrementOctave+0x320>)
          freq_9_inc = ((((float) NOTE_G3S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013de2:	6018      	str	r0, [r3, #0]
 8013de4:	4606      	mov	r6, r0
          freq_10_inc = ((((float) NOTE_A3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013de6:	a35e      	add	r3, pc, #376	; (adr r3, 8013f60 <incrementOctave+0x288>)
 8013de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dec:	4620      	mov	r0, r4
 8013dee:	4629      	mov	r1, r5
 8013df0:	f7ec fbbe 	bl	8000570 <__aeabi_dmul>
 8013df4:	f7ec feb4 	bl	8000b60 <__aeabi_d2f>
          freq_11_inc = ((((float) NOTE_A3S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013df8:	4b80      	ldr	r3, [pc, #512]	; (8013ffc <incrementOctave+0x324>)
          freq_10_inc = ((((float) NOTE_A3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013dfa:	6038      	str	r0, [r7, #0]
          freq_11_inc = ((((float) NOTE_A3S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013dfc:	601e      	str	r6, [r3, #0]
          freq_12_inc = ((((float) NOTE_B3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8013dfe:	4620      	mov	r0, r4
 8013e00:	a359      	add	r3, pc, #356	; (adr r3, 8013f68 <incrementOctave+0x290>)
 8013e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e06:	4629      	mov	r1, r5
 8013e08:	f7ec fbb2 	bl	8000570 <__aeabi_dmul>
 8013e0c:	f7ec fea8 	bl	8000b60 <__aeabi_d2f>
 8013e10:	4b7b      	ldr	r3, [pc, #492]	; (8014000 <incrementOctave+0x328>)
 8013e12:	6018      	str	r0, [r3, #0]
 8013e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          freq_1_inc = (((float) NOTE_C3 )/ DAC_FREQ) * max_table_index;
 8013e16:	4b6e      	ldr	r3, [pc, #440]	; (8013fd0 <incrementOctave+0x2f8>)
 8013e18:	4f6e      	ldr	r7, [pc, #440]	; (8013fd4 <incrementOctave+0x2fc>)
 8013e1a:	6818      	ldr	r0, [r3, #0]
          freq_2_inc = (((float) NOTE_C3S) / DAC_FREQ) * max_table_index;
 8013e1c:	4e6e      	ldr	r6, [pc, #440]	; (8013fd8 <incrementOctave+0x300>)
          freq_1_inc = (((float) NOTE_C3 )/ DAC_FREQ) * max_table_index;
 8013e1e:	f7ec fb31 	bl	8000484 <__aeabi_ui2d>
 8013e22:	a353      	add	r3, pc, #332	; (adr r3, 8013f70 <incrementOctave+0x298>)
 8013e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e28:	4604      	mov	r4, r0
 8013e2a:	460d      	mov	r5, r1
 8013e2c:	f7ec fba0 	bl	8000570 <__aeabi_dmul>
 8013e30:	f7ec fe96 	bl	8000b60 <__aeabi_d2f>
          freq_2_inc = (((float) NOTE_C3S) / DAC_FREQ) * max_table_index;
 8013e34:	a350      	add	r3, pc, #320	; (adr r3, 8013f78 <incrementOctave+0x2a0>)
 8013e36:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_1_inc = (((float) NOTE_C3 )/ DAC_FREQ) * max_table_index;
 8013e3a:	6038      	str	r0, [r7, #0]
          freq_2_inc = (((float) NOTE_C3S) / DAC_FREQ) * max_table_index;
 8013e3c:	4629      	mov	r1, r5
 8013e3e:	4620      	mov	r0, r4
 8013e40:	f7ec fb96 	bl	8000570 <__aeabi_dmul>
 8013e44:	f7ec fe8c 	bl	8000b60 <__aeabi_d2f>
          freq_3_inc = (((float) NOTE_D3 )/ DAC_FREQ) * max_table_index;
 8013e48:	a34d      	add	r3, pc, #308	; (adr r3, 8013f80 <incrementOctave+0x2a8>)
 8013e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_2_inc = (((float) NOTE_C3S) / DAC_FREQ) * max_table_index;
 8013e4e:	6030      	str	r0, [r6, #0]
          freq_3_inc = (((float) NOTE_D3 )/ DAC_FREQ) * max_table_index;
 8013e50:	4629      	mov	r1, r5
 8013e52:	4620      	mov	r0, r4
 8013e54:	f7ec fb8c 	bl	8000570 <__aeabi_dmul>
 8013e58:	f7ec fe82 	bl	8000b60 <__aeabi_d2f>
 8013e5c:	4b5f      	ldr	r3, [pc, #380]	; (8013fdc <incrementOctave+0x304>)
          freq_4_inc = (((float) NOTE_D3S )/ DAC_FREQ) * max_table_index;
 8013e5e:	4e60      	ldr	r6, [pc, #384]	; (8013fe0 <incrementOctave+0x308>)
          freq_3_inc = (((float) NOTE_D3 )/ DAC_FREQ) * max_table_index;
 8013e60:	6018      	str	r0, [r3, #0]
          freq_4_inc = (((float) NOTE_D3S )/ DAC_FREQ) * max_table_index;
 8013e62:	4629      	mov	r1, r5
 8013e64:	a348      	add	r3, pc, #288	; (adr r3, 8013f88 <incrementOctave+0x2b0>)
 8013e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e6a:	4620      	mov	r0, r4
 8013e6c:	f7ec fb80 	bl	8000570 <__aeabi_dmul>
 8013e70:	f7ec fe76 	bl	8000b60 <__aeabi_d2f>
          freq_5_inc = (((float) NOTE_E3 )/ DAC_FREQ) * max_table_index;
 8013e74:	a346      	add	r3, pc, #280	; (adr r3, 8013f90 <incrementOctave+0x2b8>)
 8013e76:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_4_inc = (((float) NOTE_D3S )/ DAC_FREQ) * max_table_index;
 8013e7a:	6030      	str	r0, [r6, #0]
          freq_5_inc = (((float) NOTE_E3 )/ DAC_FREQ) * max_table_index;
 8013e7c:	4629      	mov	r1, r5
 8013e7e:	4620      	mov	r0, r4
 8013e80:	f7ec fb76 	bl	8000570 <__aeabi_dmul>
 8013e84:	f7ec fe6c 	bl	8000b60 <__aeabi_d2f>
 8013e88:	4b56      	ldr	r3, [pc, #344]	; (8013fe4 <incrementOctave+0x30c>)
          freq_6_inc = (((float) NOTE_F3 )/ DAC_FREQ) * max_table_index;
 8013e8a:	4e57      	ldr	r6, [pc, #348]	; (8013fe8 <incrementOctave+0x310>)
          freq_5_inc = (((float) NOTE_E3 )/ DAC_FREQ) * max_table_index;
 8013e8c:	6018      	str	r0, [r3, #0]
          freq_6_inc = (((float) NOTE_F3 )/ DAC_FREQ) * max_table_index;
 8013e8e:	4629      	mov	r1, r5
 8013e90:	a341      	add	r3, pc, #260	; (adr r3, 8013f98 <incrementOctave+0x2c0>)
 8013e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e96:	4620      	mov	r0, r4
 8013e98:	f7ec fb6a 	bl	8000570 <__aeabi_dmul>
 8013e9c:	f7ec fe60 	bl	8000b60 <__aeabi_d2f>
          freq_7_inc = (((float) NOTE_F3S )/ DAC_FREQ) * max_table_index;
 8013ea0:	a33f      	add	r3, pc, #252	; (adr r3, 8013fa0 <incrementOctave+0x2c8>)
 8013ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_6_inc = (((float) NOTE_F3 )/ DAC_FREQ) * max_table_index;
 8013ea6:	6030      	str	r0, [r6, #0]
          freq_7_inc = (((float) NOTE_F3S )/ DAC_FREQ) * max_table_index;
 8013ea8:	4629      	mov	r1, r5
 8013eaa:	4620      	mov	r0, r4
 8013eac:	f7ec fb60 	bl	8000570 <__aeabi_dmul>
 8013eb0:	f7ec fe56 	bl	8000b60 <__aeabi_d2f>
 8013eb4:	4b4d      	ldr	r3, [pc, #308]	; (8013fec <incrementOctave+0x314>)
          freq_8_inc = (((float) NOTE_G3 )/ DAC_FREQ) * max_table_index;
 8013eb6:	4e4e      	ldr	r6, [pc, #312]	; (8013ff0 <incrementOctave+0x318>)
          freq_7_inc = (((float) NOTE_F3S )/ DAC_FREQ) * max_table_index;
 8013eb8:	6018      	str	r0, [r3, #0]
          freq_8_inc = (((float) NOTE_G3 )/ DAC_FREQ) * max_table_index;
 8013eba:	4629      	mov	r1, r5
 8013ebc:	a33a      	add	r3, pc, #232	; (adr r3, 8013fa8 <incrementOctave+0x2d0>)
 8013ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ec2:	4620      	mov	r0, r4
 8013ec4:	f7ec fb54 	bl	8000570 <__aeabi_dmul>
 8013ec8:	f7ec fe4a 	bl	8000b60 <__aeabi_d2f>
          freq_9_inc = (((float) NOTE_G3S) / DAC_FREQ) * max_table_index;
 8013ecc:	a338      	add	r3, pc, #224	; (adr r3, 8013fb0 <incrementOctave+0x2d8>)
 8013ece:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_8_inc = (((float) NOTE_G3 )/ DAC_FREQ) * max_table_index;
 8013ed2:	6030      	str	r0, [r6, #0]
          freq_9_inc = (((float) NOTE_G3S) / DAC_FREQ) * max_table_index;
 8013ed4:	4629      	mov	r1, r5
 8013ed6:	4620      	mov	r0, r4
 8013ed8:	f7ec fb4a 	bl	8000570 <__aeabi_dmul>
 8013edc:	f7ec fe40 	bl	8000b60 <__aeabi_d2f>
 8013ee0:	4b44      	ldr	r3, [pc, #272]	; (8013ff4 <incrementOctave+0x31c>)
          freq_10_inc = (((float) NOTE_A3 )/ DAC_FREQ) * max_table_index;
 8013ee2:	4f45      	ldr	r7, [pc, #276]	; (8013ff8 <incrementOctave+0x320>)
          freq_9_inc = (((float) NOTE_G3S) / DAC_FREQ) * max_table_index;
 8013ee4:	6018      	str	r0, [r3, #0]
 8013ee6:	4606      	mov	r6, r0
          freq_10_inc = (((float) NOTE_A3 )/ DAC_FREQ) * max_table_index;
 8013ee8:	a333      	add	r3, pc, #204	; (adr r3, 8013fb8 <incrementOctave+0x2e0>)
 8013eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eee:	4620      	mov	r0, r4
 8013ef0:	4629      	mov	r1, r5
 8013ef2:	f7ec fb3d 	bl	8000570 <__aeabi_dmul>
 8013ef6:	f7ec fe33 	bl	8000b60 <__aeabi_d2f>
          freq_11_inc = (((float) NOTE_A3S )/ DAC_FREQ) * max_table_index;
 8013efa:	4b40      	ldr	r3, [pc, #256]	; (8013ffc <incrementOctave+0x324>)
          freq_10_inc = (((float) NOTE_A3 )/ DAC_FREQ) * max_table_index;
 8013efc:	6038      	str	r0, [r7, #0]
          freq_11_inc = (((float) NOTE_A3S )/ DAC_FREQ) * max_table_index;
 8013efe:	601e      	str	r6, [r3, #0]
          freq_12_inc = (((float) NOTE_B3 )/ DAC_FREQ) * max_table_index;
 8013f00:	4620      	mov	r0, r4
 8013f02:	a32f      	add	r3, pc, #188	; (adr r3, 8013fc0 <incrementOctave+0x2e8>)
 8013f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f08:	4629      	mov	r1, r5
 8013f0a:	f7ec fb31 	bl	8000570 <__aeabi_dmul>
 8013f0e:	f7ec fe27 	bl	8000b60 <__aeabi_d2f>
 8013f12:	4b3b      	ldr	r3, [pc, #236]	; (8014000 <incrementOctave+0x328>)
 8013f14:	6018      	str	r0, [r3, #0]
 8013f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f18:	3b0fa087 	.word	0x3b0fa087
 8013f1c:	3ecb6ef8 	.word	0x3ecb6ef8
 8013f20:	3f3e0371 	.word	0x3f3e0371
 8013f24:	3ecd108c 	.word	0x3ecd108c
 8013f28:	a6d4eb7f 	.word	0xa6d4eb7f
 8013f2c:	3ececafb 	.word	0x3ececafb
 8013f30:	d1fd8e36 	.word	0xd1fd8e36
 8013f34:	3ed04fdc 	.word	0x3ed04fdc
 8013f38:	26e978d5 	.word	0x26e978d5
 8013f3c:	3ed14831 	.word	0x3ed14831
 8013f40:	429aaf44 	.word	0x429aaf44
 8013f44:	3ed24f42 	.word	0x3ed24f42
 8013f48:	a9a4a999 	.word	0xa9a4a999
 8013f4c:	3ed365f9 	.word	0x3ed365f9
 8013f50:	01f75105 	.word	0x01f75105
 8013f54:	3ed48d48 	.word	0x3ed48d48
 8013f58:	a0fab6eb 	.word	0xa0fab6eb
 8013f5c:	3ed5c61d 	.word	0x3ed5c61d
 8013f60:	7cfa26a2 	.word	0x7cfa26a2
 8013f64:	3ed71194 	.word	0x3ed71194
 8013f68:	82faf1a3 	.word	0x82faf1a3
 8013f6c:	3ed9e4cc 	.word	0x3ed9e4cc
 8013f70:	69ad42c4 	.word	0x69ad42c4
 8013f74:	3f6aca5e 	.word	0x3f6aca5e
 8013f78:	f5c28f5c 	.word	0xf5c28f5c
 8013f7c:	3f6c6228 	.word	0x3f6c6228
 8013f80:	c0ebedfa 	.word	0xc0ebedfa
 8013f84:	3f6e1239 	.word	0x3f6e1239
 8013f88:	4a2339c1 	.word	0x4a2339c1
 8013f8c:	3f6fdbfb 	.word	0x3f6fdbfb
 8013f90:	00000000 	.word	0x00000000
 8013f94:	3f70e080 	.word	0x3f70e080
 8013f98:	b50b0f28 	.word	0xb50b0f28
 8013f9c:	3f71e166 	.word	0x3f71e166
 8013fa0:	cfaacd9f 	.word	0xcfaacd9f
 8013fa4:	3f72f195 	.word	0x3f72f195
 8013fa8:	51eb851f 	.word	0x51eb851f
 8013fac:	3f7411f8 	.word	0x3f7411f8
 8013fb0:	ef34d6a1 	.word	0xef34d6a1
 8013fb4:	3f754378 	.word	0x3f754378
 8013fb8:	020c49ba 	.word	0x020c49ba
 8013fbc:	3f76872b 	.word	0x3f76872b
 8013fc0:	b7e90ff9 	.word	0xb7e90ff9
 8013fc4:	3f79496f 	.word	0x3f79496f
 8013fc8:	2000005c 	.word	0x2000005c
 8013fcc:	200053fc 	.word	0x200053fc
 8013fd0:	20000058 	.word	0x20000058
 8013fd4:	200063b4 	.word	0x200063b4
 8013fd8:	20007bf4 	.word	0x20007bf4
 8013fdc:	20006fc8 	.word	0x20006fc8
 8013fe0:	200077d8 	.word	0x200077d8
 8013fe4:	200077d4 	.word	0x200077d4
 8013fe8:	200077cc 	.word	0x200077cc
 8013fec:	20006fc0 	.word	0x20006fc0
 8013ff0:	2007db18 	.word	0x2007db18
 8013ff4:	200077d0 	.word	0x200077d0
 8013ff8:	2007d708 	.word	0x2007d708
 8013ffc:	200077e0 	.word	0x200077e0
 8014000:	2007d304 	.word	0x2007d304
          freq_1_inc = (((float) NOTE_C4) / DAC_FREQ) * max_table_index;
 8014004:	4bb6      	ldr	r3, [pc, #728]	; (80142e0 <incrementOctave+0x608>)
 8014006:	4fb7      	ldr	r7, [pc, #732]	; (80142e4 <incrementOctave+0x60c>)
 8014008:	6818      	ldr	r0, [r3, #0]
          freq_2_inc = (((float) NOTE_C4S) / DAC_FREQ) * max_table_index;
 801400a:	4eb7      	ldr	r6, [pc, #732]	; (80142e8 <incrementOctave+0x610>)
          freq_1_inc = (((float) NOTE_C4) / DAC_FREQ) * max_table_index;
 801400c:	f7ec fa3a 	bl	8000484 <__aeabi_ui2d>
 8014010:	a383      	add	r3, pc, #524	; (adr r3, 8014220 <incrementOctave+0x548>)
 8014012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014016:	4604      	mov	r4, r0
 8014018:	460d      	mov	r5, r1
 801401a:	f7ec faa9 	bl	8000570 <__aeabi_dmul>
 801401e:	f7ec fd9f 	bl	8000b60 <__aeabi_d2f>
          freq_2_inc = (((float) NOTE_C4S) / DAC_FREQ) * max_table_index;
 8014022:	a381      	add	r3, pc, #516	; (adr r3, 8014228 <incrementOctave+0x550>)
 8014024:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_1_inc = (((float) NOTE_C4) / DAC_FREQ) * max_table_index;
 8014028:	6038      	str	r0, [r7, #0]
          freq_2_inc = (((float) NOTE_C4S) / DAC_FREQ) * max_table_index;
 801402a:	4629      	mov	r1, r5
 801402c:	4620      	mov	r0, r4
 801402e:	f7ec fa9f 	bl	8000570 <__aeabi_dmul>
 8014032:	f7ec fd95 	bl	8000b60 <__aeabi_d2f>
          freq_3_inc = (((float) NOTE_D4) / DAC_FREQ) * max_table_index;
 8014036:	a37e      	add	r3, pc, #504	; (adr r3, 8014230 <incrementOctave+0x558>)
 8014038:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_2_inc = (((float) NOTE_C4S) / DAC_FREQ) * max_table_index;
 801403c:	6030      	str	r0, [r6, #0]
          freq_3_inc = (((float) NOTE_D4) / DAC_FREQ) * max_table_index;
 801403e:	4629      	mov	r1, r5
 8014040:	4620      	mov	r0, r4
 8014042:	f7ec fa95 	bl	8000570 <__aeabi_dmul>
 8014046:	f7ec fd8b 	bl	8000b60 <__aeabi_d2f>
 801404a:	4ba8      	ldr	r3, [pc, #672]	; (80142ec <incrementOctave+0x614>)
          freq_4_inc = (((float) NOTE_D4S) / DAC_FREQ) * max_table_index;
 801404c:	4ea8      	ldr	r6, [pc, #672]	; (80142f0 <incrementOctave+0x618>)
          freq_3_inc = (((float) NOTE_D4) / DAC_FREQ) * max_table_index;
 801404e:	6018      	str	r0, [r3, #0]
          freq_4_inc = (((float) NOTE_D4S) / DAC_FREQ) * max_table_index;
 8014050:	4629      	mov	r1, r5
 8014052:	a379      	add	r3, pc, #484	; (adr r3, 8014238 <incrementOctave+0x560>)
 8014054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014058:	4620      	mov	r0, r4
 801405a:	f7ec fa89 	bl	8000570 <__aeabi_dmul>
 801405e:	f7ec fd7f 	bl	8000b60 <__aeabi_d2f>
          freq_5_inc = (((float) NOTE_E4) / DAC_FREQ) * max_table_index;
 8014062:	a377      	add	r3, pc, #476	; (adr r3, 8014240 <incrementOctave+0x568>)
 8014064:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_4_inc = (((float) NOTE_D4S) / DAC_FREQ) * max_table_index;
 8014068:	6030      	str	r0, [r6, #0]
          freq_5_inc = (((float) NOTE_E4) / DAC_FREQ) * max_table_index;
 801406a:	4629      	mov	r1, r5
 801406c:	4620      	mov	r0, r4
 801406e:	f7ec fa7f 	bl	8000570 <__aeabi_dmul>
 8014072:	f7ec fd75 	bl	8000b60 <__aeabi_d2f>
 8014076:	4b9f      	ldr	r3, [pc, #636]	; (80142f4 <incrementOctave+0x61c>)
          freq_6_inc = (((float) NOTE_F4 )/ DAC_FREQ) * max_table_index;
 8014078:	4e9f      	ldr	r6, [pc, #636]	; (80142f8 <incrementOctave+0x620>)
          freq_5_inc = (((float) NOTE_E4) / DAC_FREQ) * max_table_index;
 801407a:	6018      	str	r0, [r3, #0]
          freq_6_inc = (((float) NOTE_F4 )/ DAC_FREQ) * max_table_index;
 801407c:	4629      	mov	r1, r5
 801407e:	a372      	add	r3, pc, #456	; (adr r3, 8014248 <incrementOctave+0x570>)
 8014080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014084:	4620      	mov	r0, r4
 8014086:	f7ec fa73 	bl	8000570 <__aeabi_dmul>
 801408a:	f7ec fd69 	bl	8000b60 <__aeabi_d2f>
          freq_7_inc = (((float) NOTE_F4S )/ DAC_FREQ) * max_table_index;
 801408e:	a370      	add	r3, pc, #448	; (adr r3, 8014250 <incrementOctave+0x578>)
 8014090:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_6_inc = (((float) NOTE_F4 )/ DAC_FREQ) * max_table_index;
 8014094:	6030      	str	r0, [r6, #0]
          freq_7_inc = (((float) NOTE_F4S )/ DAC_FREQ) * max_table_index;
 8014096:	4629      	mov	r1, r5
 8014098:	4620      	mov	r0, r4
 801409a:	f7ec fa69 	bl	8000570 <__aeabi_dmul>
 801409e:	f7ec fd5f 	bl	8000b60 <__aeabi_d2f>
 80140a2:	4b96      	ldr	r3, [pc, #600]	; (80142fc <incrementOctave+0x624>)
          freq_8_inc = (((float) NOTE_G4 )/ DAC_FREQ) * max_table_index;
 80140a4:	4e96      	ldr	r6, [pc, #600]	; (8014300 <incrementOctave+0x628>)
          freq_7_inc = (((float) NOTE_F4S )/ DAC_FREQ) * max_table_index;
 80140a6:	6018      	str	r0, [r3, #0]
          freq_8_inc = (((float) NOTE_G4 )/ DAC_FREQ) * max_table_index;
 80140a8:	4629      	mov	r1, r5
 80140aa:	a36b      	add	r3, pc, #428	; (adr r3, 8014258 <incrementOctave+0x580>)
 80140ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140b0:	4620      	mov	r0, r4
 80140b2:	f7ec fa5d 	bl	8000570 <__aeabi_dmul>
 80140b6:	f7ec fd53 	bl	8000b60 <__aeabi_d2f>
          freq_9_inc = (((float) NOTE_G4S )/ DAC_FREQ) * max_table_index;
 80140ba:	a369      	add	r3, pc, #420	; (adr r3, 8014260 <incrementOctave+0x588>)
 80140bc:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_8_inc = (((float) NOTE_G4 )/ DAC_FREQ) * max_table_index;
 80140c0:	6030      	str	r0, [r6, #0]
          freq_9_inc = (((float) NOTE_G4S )/ DAC_FREQ) * max_table_index;
 80140c2:	4629      	mov	r1, r5
 80140c4:	4620      	mov	r0, r4
 80140c6:	f7ec fa53 	bl	8000570 <__aeabi_dmul>
 80140ca:	f7ec fd49 	bl	8000b60 <__aeabi_d2f>
 80140ce:	4b8d      	ldr	r3, [pc, #564]	; (8014304 <incrementOctave+0x62c>)
          freq_10_inc = (((float) NOTE_A4 )/ DAC_FREQ) * max_table_index;
 80140d0:	4e8d      	ldr	r6, [pc, #564]	; (8014308 <incrementOctave+0x630>)
          freq_9_inc = (((float) NOTE_G4S )/ DAC_FREQ) * max_table_index;
 80140d2:	6018      	str	r0, [r3, #0]
          freq_10_inc = (((float) NOTE_A4 )/ DAC_FREQ) * max_table_index;
 80140d4:	4629      	mov	r1, r5
 80140d6:	a364      	add	r3, pc, #400	; (adr r3, 8014268 <incrementOctave+0x590>)
 80140d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140dc:	4620      	mov	r0, r4
 80140de:	f7ec fa47 	bl	8000570 <__aeabi_dmul>
 80140e2:	f7ec fd3d 	bl	8000b60 <__aeabi_d2f>
          freq_11_inc = (((float) NOTE_A4S )/ DAC_FREQ) * max_table_index;
 80140e6:	a362      	add	r3, pc, #392	; (adr r3, 8014270 <incrementOctave+0x598>)
 80140e8:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_10_inc = (((float) NOTE_A4 )/ DAC_FREQ) * max_table_index;
 80140ec:	6030      	str	r0, [r6, #0]
          freq_11_inc = (((float) NOTE_A4S )/ DAC_FREQ) * max_table_index;
 80140ee:	4629      	mov	r1, r5
 80140f0:	4620      	mov	r0, r4
 80140f2:	f7ec fa3d 	bl	8000570 <__aeabi_dmul>
 80140f6:	f7ec fd33 	bl	8000b60 <__aeabi_d2f>
 80140fa:	4b84      	ldr	r3, [pc, #528]	; (801430c <incrementOctave+0x634>)
          freq_12_inc = (((float) NOTE_B4) / DAC_FREQ) * max_table_index;
 80140fc:	4e84      	ldr	r6, [pc, #528]	; (8014310 <incrementOctave+0x638>)
          freq_11_inc = (((float) NOTE_A4S )/ DAC_FREQ) * max_table_index;
 80140fe:	6018      	str	r0, [r3, #0]
          freq_12_inc = (((float) NOTE_B4) / DAC_FREQ) * max_table_index;
 8014100:	a35d      	add	r3, pc, #372	; (adr r3, 8014278 <incrementOctave+0x5a0>)
 8014102:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_12_inc = ((((float) NOTE_B5 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014106:	4620      	mov	r0, r4
 8014108:	4629      	mov	r1, r5
 801410a:	f7ec fa31 	bl	8000570 <__aeabi_dmul>
 801410e:	f7ec fd27 	bl	8000b60 <__aeabi_d2f>
 8014112:	6030      	str	r0, [r6, #0]
 8014114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          freq_1_inc = (((float) NOTE_C5 )/ DAC_FREQ) * max_table_index;
 8014116:	4b72      	ldr	r3, [pc, #456]	; (80142e0 <incrementOctave+0x608>)
 8014118:	4f72      	ldr	r7, [pc, #456]	; (80142e4 <incrementOctave+0x60c>)
 801411a:	6818      	ldr	r0, [r3, #0]
          freq_2_inc = (((float) NOTE_C5S )/ DAC_FREQ) * max_table_index;
 801411c:	4e72      	ldr	r6, [pc, #456]	; (80142e8 <incrementOctave+0x610>)
          freq_1_inc = (((float) NOTE_C5 )/ DAC_FREQ) * max_table_index;
 801411e:	f7ec f9b1 	bl	8000484 <__aeabi_ui2d>
 8014122:	a357      	add	r3, pc, #348	; (adr r3, 8014280 <incrementOctave+0x5a8>)
 8014124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014128:	4604      	mov	r4, r0
 801412a:	460d      	mov	r5, r1
 801412c:	f7ec fa20 	bl	8000570 <__aeabi_dmul>
 8014130:	f7ec fd16 	bl	8000b60 <__aeabi_d2f>
          freq_2_inc = (((float) NOTE_C5S )/ DAC_FREQ) * max_table_index;
 8014134:	a354      	add	r3, pc, #336	; (adr r3, 8014288 <incrementOctave+0x5b0>)
 8014136:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_1_inc = (((float) NOTE_C5 )/ DAC_FREQ) * max_table_index;
 801413a:	6038      	str	r0, [r7, #0]
          freq_2_inc = (((float) NOTE_C5S )/ DAC_FREQ) * max_table_index;
 801413c:	4629      	mov	r1, r5
 801413e:	4620      	mov	r0, r4
 8014140:	f7ec fa16 	bl	8000570 <__aeabi_dmul>
 8014144:	f7ec fd0c 	bl	8000b60 <__aeabi_d2f>
          freq_3_inc = (((float) NOTE_D5 )/ DAC_FREQ) * max_table_index;
 8014148:	a351      	add	r3, pc, #324	; (adr r3, 8014290 <incrementOctave+0x5b8>)
 801414a:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_2_inc = (((float) NOTE_C5S )/ DAC_FREQ) * max_table_index;
 801414e:	6030      	str	r0, [r6, #0]
          freq_3_inc = (((float) NOTE_D5 )/ DAC_FREQ) * max_table_index;
 8014150:	4629      	mov	r1, r5
 8014152:	4620      	mov	r0, r4
 8014154:	f7ec fa0c 	bl	8000570 <__aeabi_dmul>
 8014158:	f7ec fd02 	bl	8000b60 <__aeabi_d2f>
 801415c:	4b63      	ldr	r3, [pc, #396]	; (80142ec <incrementOctave+0x614>)
          freq_4_inc = (((float) NOTE_D5S )/ DAC_FREQ) * max_table_index;
 801415e:	4e64      	ldr	r6, [pc, #400]	; (80142f0 <incrementOctave+0x618>)
          freq_3_inc = (((float) NOTE_D5 )/ DAC_FREQ) * max_table_index;
 8014160:	6018      	str	r0, [r3, #0]
          freq_4_inc = (((float) NOTE_D5S )/ DAC_FREQ) * max_table_index;
 8014162:	4629      	mov	r1, r5
 8014164:	a34c      	add	r3, pc, #304	; (adr r3, 8014298 <incrementOctave+0x5c0>)
 8014166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801416a:	4620      	mov	r0, r4
 801416c:	f7ec fa00 	bl	8000570 <__aeabi_dmul>
 8014170:	f7ec fcf6 	bl	8000b60 <__aeabi_d2f>
          freq_5_inc = (((float) NOTE_E5) / DAC_FREQ) * max_table_index;
 8014174:	a34a      	add	r3, pc, #296	; (adr r3, 80142a0 <incrementOctave+0x5c8>)
 8014176:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_4_inc = (((float) NOTE_D5S )/ DAC_FREQ) * max_table_index;
 801417a:	6030      	str	r0, [r6, #0]
          freq_5_inc = (((float) NOTE_E5) / DAC_FREQ) * max_table_index;
 801417c:	4629      	mov	r1, r5
 801417e:	4620      	mov	r0, r4
 8014180:	f7ec f9f6 	bl	8000570 <__aeabi_dmul>
 8014184:	f7ec fcec 	bl	8000b60 <__aeabi_d2f>
 8014188:	4b5a      	ldr	r3, [pc, #360]	; (80142f4 <incrementOctave+0x61c>)
          freq_6_inc = (((float) NOTE_F5 )/ DAC_FREQ) * max_table_index;
 801418a:	4e5b      	ldr	r6, [pc, #364]	; (80142f8 <incrementOctave+0x620>)
          freq_5_inc = (((float) NOTE_E5) / DAC_FREQ) * max_table_index;
 801418c:	6018      	str	r0, [r3, #0]
          freq_6_inc = (((float) NOTE_F5 )/ DAC_FREQ) * max_table_index;
 801418e:	4629      	mov	r1, r5
 8014190:	a345      	add	r3, pc, #276	; (adr r3, 80142a8 <incrementOctave+0x5d0>)
 8014192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014196:	4620      	mov	r0, r4
 8014198:	f7ec f9ea 	bl	8000570 <__aeabi_dmul>
 801419c:	f7ec fce0 	bl	8000b60 <__aeabi_d2f>
          freq_7_inc = (((float) NOTE_F5S )/ DAC_FREQ) * max_table_index;
 80141a0:	a343      	add	r3, pc, #268	; (adr r3, 80142b0 <incrementOctave+0x5d8>)
 80141a2:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_6_inc = (((float) NOTE_F5 )/ DAC_FREQ) * max_table_index;
 80141a6:	6030      	str	r0, [r6, #0]
          freq_7_inc = (((float) NOTE_F5S )/ DAC_FREQ) * max_table_index;
 80141a8:	4629      	mov	r1, r5
 80141aa:	4620      	mov	r0, r4
 80141ac:	f7ec f9e0 	bl	8000570 <__aeabi_dmul>
 80141b0:	f7ec fcd6 	bl	8000b60 <__aeabi_d2f>
 80141b4:	4b51      	ldr	r3, [pc, #324]	; (80142fc <incrementOctave+0x624>)
          freq_8_inc = (((float) NOTE_G5) / DAC_FREQ) * max_table_index;
 80141b6:	4e52      	ldr	r6, [pc, #328]	; (8014300 <incrementOctave+0x628>)
          freq_7_inc = (((float) NOTE_F5S )/ DAC_FREQ) * max_table_index;
 80141b8:	6018      	str	r0, [r3, #0]
          freq_8_inc = (((float) NOTE_G5) / DAC_FREQ) * max_table_index;
 80141ba:	4629      	mov	r1, r5
 80141bc:	a33e      	add	r3, pc, #248	; (adr r3, 80142b8 <incrementOctave+0x5e0>)
 80141be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141c2:	4620      	mov	r0, r4
 80141c4:	f7ec f9d4 	bl	8000570 <__aeabi_dmul>
 80141c8:	f7ec fcca 	bl	8000b60 <__aeabi_d2f>
          freq_9_inc = (((float) NOTE_G5S )/ DAC_FREQ) * max_table_index;
 80141cc:	a33c      	add	r3, pc, #240	; (adr r3, 80142c0 <incrementOctave+0x5e8>)
 80141ce:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_8_inc = (((float) NOTE_G5) / DAC_FREQ) * max_table_index;
 80141d2:	6030      	str	r0, [r6, #0]
          freq_9_inc = (((float) NOTE_G5S )/ DAC_FREQ) * max_table_index;
 80141d4:	4629      	mov	r1, r5
 80141d6:	4620      	mov	r0, r4
 80141d8:	f7ec f9ca 	bl	8000570 <__aeabi_dmul>
 80141dc:	f7ec fcc0 	bl	8000b60 <__aeabi_d2f>
 80141e0:	4b48      	ldr	r3, [pc, #288]	; (8014304 <incrementOctave+0x62c>)
          freq_10_inc = (((float) NOTE_A5) / DAC_FREQ) * max_table_index;
 80141e2:	4e49      	ldr	r6, [pc, #292]	; (8014308 <incrementOctave+0x630>)
          freq_9_inc = (((float) NOTE_G5S )/ DAC_FREQ) * max_table_index;
 80141e4:	6018      	str	r0, [r3, #0]
          freq_10_inc = (((float) NOTE_A5) / DAC_FREQ) * max_table_index;
 80141e6:	4629      	mov	r1, r5
 80141e8:	a337      	add	r3, pc, #220	; (adr r3, 80142c8 <incrementOctave+0x5f0>)
 80141ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141ee:	4620      	mov	r0, r4
 80141f0:	f7ec f9be 	bl	8000570 <__aeabi_dmul>
 80141f4:	f7ec fcb4 	bl	8000b60 <__aeabi_d2f>
          freq_11_inc = (((float) NOTE_A5S) / DAC_FREQ) * max_table_index;
 80141f8:	a335      	add	r3, pc, #212	; (adr r3, 80142d0 <incrementOctave+0x5f8>)
 80141fa:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_10_inc = (((float) NOTE_A5) / DAC_FREQ) * max_table_index;
 80141fe:	6030      	str	r0, [r6, #0]
          freq_11_inc = (((float) NOTE_A5S) / DAC_FREQ) * max_table_index;
 8014200:	4629      	mov	r1, r5
 8014202:	4620      	mov	r0, r4
 8014204:	f7ec f9b4 	bl	8000570 <__aeabi_dmul>
 8014208:	f7ec fcaa 	bl	8000b60 <__aeabi_d2f>
 801420c:	4b3f      	ldr	r3, [pc, #252]	; (801430c <incrementOctave+0x634>)
          freq_12_inc = (((float) NOTE_B5 )/ DAC_FREQ) * max_table_index;
 801420e:	4e40      	ldr	r6, [pc, #256]	; (8014310 <incrementOctave+0x638>)
          freq_11_inc = (((float) NOTE_A5S) / DAC_FREQ) * max_table_index;
 8014210:	6018      	str	r0, [r3, #0]
          freq_12_inc = (((float) NOTE_B5 )/ DAC_FREQ) * max_table_index;
 8014212:	a331      	add	r3, pc, #196	; (adr r3, 80142d8 <incrementOctave+0x600>)
 8014214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014218:	e775      	b.n	8014106 <incrementOctave+0x42e>
 801421a:	bf00      	nop
 801421c:	f3af 8000 	nop.w
 8014220:	69ad42c4 	.word	0x69ad42c4
 8014224:	3f7aca5e 	.word	0x3f7aca5e
 8014228:	b7e90ff9 	.word	0xb7e90ff9
 801422c:	3f7c622f 	.word	0x3f7c622f
 8014230:	83126e98 	.word	0x83126e98
 8014234:	3f7e1240 	.word	0x3f7e1240
 8014238:	0c49ba5e 	.word	0x0c49ba5e
 801423c:	3f7fdc02 	.word	0x3f7fdc02
 8014240:	00000000 	.word	0x00000000
 8014244:	3f80e080 	.word	0x3f80e080
 8014248:	b50b0f28 	.word	0xb50b0f28
 801424c:	3f81e166 	.word	0x3f81e166
 8014250:	cfaacd9f 	.word	0xcfaacd9f
 8014254:	3f82f195 	.word	0x3f82f195
 8014258:	f0d844d0 	.word	0xf0d844d0
 801425c:	3f8411f4 	.word	0x3f8411f4
 8014260:	504816f0 	.word	0x504816f0
 8014264:	3f85437c 	.word	0x3f85437c
 8014268:	020c49ba 	.word	0x020c49ba
 801426c:	3f86872b 	.word	0x3f86872b
 8014270:	d42c3c9f 	.word	0xd42c3c9f
 8014274:	3f87de1a 	.word	0x3f87de1a
 8014278:	56d5cfab 	.word	0x56d5cfab
 801427c:	3f89496c 	.word	0x3f89496c
 8014280:	ee631f8a 	.word	0xee631f8a
 8014284:	3f8aca5a 	.word	0x3f8aca5a
 8014288:	3c9eecc0 	.word	0x3c9eecc0
 801428c:	3f8c622c 	.word	0x3f8c622c
 8014290:	83126e98 	.word	0x83126e98
 8014294:	3f8e1240 	.word	0x3f8e1240
 8014298:	0c49ba5e 	.word	0x0c49ba5e
 801429c:	3f8fdc02 	.word	0x3f8fdc02
 80142a0:	5c91d14e 	.word	0x5c91d14e
 80142a4:	3f90e07e 	.word	0x3f90e07e
 80142a8:	b50b0f28 	.word	0xb50b0f28
 80142ac:	3f91e166 	.word	0x3f91e166
 80142b0:	8d4fdf3b 	.word	0x8d4fdf3b
 80142b4:	3f92f197 	.word	0x3f92f197
 80142b8:	ae7d566d 	.word	0xae7d566d
 80142bc:	3f9411f6 	.word	0x3f9411f6
 80142c0:	acd9e83e 	.word	0xacd9e83e
 80142c4:	3f95437a 	.word	0x3f95437a
 80142c8:	020c49ba 	.word	0x020c49ba
 80142cc:	3f96872b 	.word	0x3f96872b
 80142d0:	d42c3c9f 	.word	0xd42c3c9f
 80142d4:	3f97de1a 	.word	0x3f97de1a
 80142d8:	147ae148 	.word	0x147ae148
 80142dc:	3f99496e 	.word	0x3f99496e
 80142e0:	20000058 	.word	0x20000058
 80142e4:	200063b4 	.word	0x200063b4
 80142e8:	20007bf4 	.word	0x20007bf4
 80142ec:	20006fc8 	.word	0x20006fc8
 80142f0:	200077d8 	.word	0x200077d8
 80142f4:	200077d4 	.word	0x200077d4
 80142f8:	200077cc 	.word	0x200077cc
 80142fc:	20006fc0 	.word	0x20006fc0
 8014300:	2007db18 	.word	0x2007db18
 8014304:	200077d0 	.word	0x200077d0
 8014308:	2007d708 	.word	0x2007d708
 801430c:	200077e0 	.word	0x200077e0
 8014310:	2007d304 	.word	0x2007d304
          freq_1_inc = ( ( ((float) NOTE_C4) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014314:	4bb2      	ldr	r3, [pc, #712]	; (80145e0 <incrementOctave+0x908>)
 8014316:	4fb3      	ldr	r7, [pc, #716]	; (80145e4 <incrementOctave+0x90c>)
 8014318:	6818      	ldr	r0, [r3, #0]
          freq_2_inc = ((((float) NOTE_C4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801431a:	4eb3      	ldr	r6, [pc, #716]	; (80145e8 <incrementOctave+0x910>)
          freq_1_inc = ( ( ((float) NOTE_C4) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801431c:	f7ec f8b2 	bl	8000484 <__aeabi_ui2d>
 8014320:	a37f      	add	r3, pc, #508	; (adr r3, 8014520 <incrementOctave+0x848>)
 8014322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014326:	4604      	mov	r4, r0
 8014328:	460d      	mov	r5, r1
 801432a:	f7ec f921 	bl	8000570 <__aeabi_dmul>
 801432e:	f7ec fc17 	bl	8000b60 <__aeabi_d2f>
          freq_2_inc = ((((float) NOTE_C4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014332:	a37d      	add	r3, pc, #500	; (adr r3, 8014528 <incrementOctave+0x850>)
 8014334:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_1_inc = ( ( ((float) NOTE_C4) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014338:	6038      	str	r0, [r7, #0]
          freq_2_inc = ((((float) NOTE_C4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801433a:	4629      	mov	r1, r5
 801433c:	4620      	mov	r0, r4
 801433e:	f7ec f917 	bl	8000570 <__aeabi_dmul>
 8014342:	f7ec fc0d 	bl	8000b60 <__aeabi_d2f>
          freq_3_inc = ((((float) NOTE_D4) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014346:	a37a      	add	r3, pc, #488	; (adr r3, 8014530 <incrementOctave+0x858>)
 8014348:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_2_inc = ((((float) NOTE_C4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801434c:	6030      	str	r0, [r6, #0]
          freq_3_inc = ((((float) NOTE_D4) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801434e:	4629      	mov	r1, r5
 8014350:	4620      	mov	r0, r4
 8014352:	f7ec f90d 	bl	8000570 <__aeabi_dmul>
 8014356:	f7ec fc03 	bl	8000b60 <__aeabi_d2f>
 801435a:	4ba4      	ldr	r3, [pc, #656]	; (80145ec <incrementOctave+0x914>)
          freq_4_inc = ((((float) NOTE_D4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801435c:	4ea4      	ldr	r6, [pc, #656]	; (80145f0 <incrementOctave+0x918>)
          freq_3_inc = ((((float) NOTE_D4) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801435e:	6018      	str	r0, [r3, #0]
          freq_4_inc = ((((float) NOTE_D4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014360:	4629      	mov	r1, r5
 8014362:	a375      	add	r3, pc, #468	; (adr r3, 8014538 <incrementOctave+0x860>)
 8014364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014368:	4620      	mov	r0, r4
 801436a:	f7ec f901 	bl	8000570 <__aeabi_dmul>
 801436e:	f7ec fbf7 	bl	8000b60 <__aeabi_d2f>
          freq_5_inc = ((((float) NOTE_E4) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014372:	a373      	add	r3, pc, #460	; (adr r3, 8014540 <incrementOctave+0x868>)
 8014374:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_4_inc = ((((float) NOTE_D4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014378:	6030      	str	r0, [r6, #0]
          freq_5_inc = ((((float) NOTE_E4) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801437a:	4629      	mov	r1, r5
 801437c:	4620      	mov	r0, r4
 801437e:	f7ec f8f7 	bl	8000570 <__aeabi_dmul>
 8014382:	f7ec fbed 	bl	8000b60 <__aeabi_d2f>
 8014386:	4b9b      	ldr	r3, [pc, #620]	; (80145f4 <incrementOctave+0x91c>)
          freq_6_inc = ((((float) NOTE_F4 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014388:	4e9b      	ldr	r6, [pc, #620]	; (80145f8 <incrementOctave+0x920>)
          freq_5_inc = ((((float) NOTE_E4) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801438a:	6018      	str	r0, [r3, #0]
          freq_6_inc = ((((float) NOTE_F4 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801438c:	4629      	mov	r1, r5
 801438e:	a36e      	add	r3, pc, #440	; (adr r3, 8014548 <incrementOctave+0x870>)
 8014390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014394:	4620      	mov	r0, r4
 8014396:	f7ec f8eb 	bl	8000570 <__aeabi_dmul>
 801439a:	f7ec fbe1 	bl	8000b60 <__aeabi_d2f>
          freq_7_inc = ((((float) NOTE_F4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801439e:	a36c      	add	r3, pc, #432	; (adr r3, 8014550 <incrementOctave+0x878>)
 80143a0:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_6_inc = ((((float) NOTE_F4 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80143a4:	6030      	str	r0, [r6, #0]
          freq_7_inc = ((((float) NOTE_F4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80143a6:	4629      	mov	r1, r5
 80143a8:	4620      	mov	r0, r4
 80143aa:	f7ec f8e1 	bl	8000570 <__aeabi_dmul>
 80143ae:	f7ec fbd7 	bl	8000b60 <__aeabi_d2f>
 80143b2:	4b92      	ldr	r3, [pc, #584]	; (80145fc <incrementOctave+0x924>)
          freq_8_inc = ((((float) NOTE_G4 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80143b4:	4e92      	ldr	r6, [pc, #584]	; (8014600 <incrementOctave+0x928>)
          freq_7_inc = ((((float) NOTE_F4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80143b6:	6018      	str	r0, [r3, #0]
          freq_8_inc = ((((float) NOTE_G4 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80143b8:	4629      	mov	r1, r5
 80143ba:	a367      	add	r3, pc, #412	; (adr r3, 8014558 <incrementOctave+0x880>)
 80143bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143c0:	4620      	mov	r0, r4
 80143c2:	f7ec f8d5 	bl	8000570 <__aeabi_dmul>
 80143c6:	f7ec fbcb 	bl	8000b60 <__aeabi_d2f>
          freq_9_inc = ((((float) NOTE_G4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80143ca:	a365      	add	r3, pc, #404	; (adr r3, 8014560 <incrementOctave+0x888>)
 80143cc:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_8_inc = ((((float) NOTE_G4 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80143d0:	6030      	str	r0, [r6, #0]
          freq_9_inc = ((((float) NOTE_G4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80143d2:	4629      	mov	r1, r5
 80143d4:	4620      	mov	r0, r4
 80143d6:	f7ec f8cb 	bl	8000570 <__aeabi_dmul>
 80143da:	f7ec fbc1 	bl	8000b60 <__aeabi_d2f>
 80143de:	4b89      	ldr	r3, [pc, #548]	; (8014604 <incrementOctave+0x92c>)
          freq_10_inc = ((((float) NOTE_A4 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80143e0:	4e89      	ldr	r6, [pc, #548]	; (8014608 <incrementOctave+0x930>)
          freq_9_inc = ((((float) NOTE_G4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80143e2:	6018      	str	r0, [r3, #0]
          freq_10_inc = ((((float) NOTE_A4 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80143e4:	4629      	mov	r1, r5
 80143e6:	a360      	add	r3, pc, #384	; (adr r3, 8014568 <incrementOctave+0x890>)
 80143e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143ec:	4620      	mov	r0, r4
 80143ee:	f7ec f8bf 	bl	8000570 <__aeabi_dmul>
 80143f2:	f7ec fbb5 	bl	8000b60 <__aeabi_d2f>
          freq_11_inc = ((((float) NOTE_A4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80143f6:	a35e      	add	r3, pc, #376	; (adr r3, 8014570 <incrementOctave+0x898>)
 80143f8:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_10_inc = ((((float) NOTE_A4 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80143fc:	6030      	str	r0, [r6, #0]
          freq_11_inc = ((((float) NOTE_A4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80143fe:	4629      	mov	r1, r5
 8014400:	4620      	mov	r0, r4
 8014402:	f7ec f8b5 	bl	8000570 <__aeabi_dmul>
 8014406:	f7ec fbab 	bl	8000b60 <__aeabi_d2f>
 801440a:	4b80      	ldr	r3, [pc, #512]	; (801460c <incrementOctave+0x934>)
          freq_12_inc = ((((float) NOTE_B4) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801440c:	4e80      	ldr	r6, [pc, #512]	; (8014610 <incrementOctave+0x938>)
          freq_11_inc = ((((float) NOTE_A4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801440e:	6018      	str	r0, [r3, #0]
          freq_12_inc = ((((float) NOTE_B4) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014410:	a359      	add	r3, pc, #356	; (adr r3, 8014578 <incrementOctave+0x8a0>)
 8014412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014416:	e676      	b.n	8014106 <incrementOctave+0x42e>
          freq_1_inc = ((((float) NOTE_C5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014418:	4b71      	ldr	r3, [pc, #452]	; (80145e0 <incrementOctave+0x908>)
 801441a:	4f72      	ldr	r7, [pc, #456]	; (80145e4 <incrementOctave+0x90c>)
 801441c:	6818      	ldr	r0, [r3, #0]
          freq_2_inc = ((((float) NOTE_C5S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801441e:	4e72      	ldr	r6, [pc, #456]	; (80145e8 <incrementOctave+0x910>)
          freq_1_inc = ((((float) NOTE_C5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014420:	f7ec f830 	bl	8000484 <__aeabi_ui2d>
 8014424:	a356      	add	r3, pc, #344	; (adr r3, 8014580 <incrementOctave+0x8a8>)
 8014426:	e9d3 2300 	ldrd	r2, r3, [r3]
 801442a:	4604      	mov	r4, r0
 801442c:	460d      	mov	r5, r1
 801442e:	f7ec f89f 	bl	8000570 <__aeabi_dmul>
 8014432:	f7ec fb95 	bl	8000b60 <__aeabi_d2f>
          freq_2_inc = ((((float) NOTE_C5S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014436:	a354      	add	r3, pc, #336	; (adr r3, 8014588 <incrementOctave+0x8b0>)
 8014438:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_1_inc = ((((float) NOTE_C5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801443c:	6038      	str	r0, [r7, #0]
          freq_2_inc = ((((float) NOTE_C5S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801443e:	4629      	mov	r1, r5
 8014440:	4620      	mov	r0, r4
 8014442:	f7ec f895 	bl	8000570 <__aeabi_dmul>
 8014446:	f7ec fb8b 	bl	8000b60 <__aeabi_d2f>
          freq_3_inc = ((((float) NOTE_D5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801444a:	a351      	add	r3, pc, #324	; (adr r3, 8014590 <incrementOctave+0x8b8>)
 801444c:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_2_inc = ((((float) NOTE_C5S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014450:	6030      	str	r0, [r6, #0]
          freq_3_inc = ((((float) NOTE_D5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014452:	4629      	mov	r1, r5
 8014454:	4620      	mov	r0, r4
 8014456:	f7ec f88b 	bl	8000570 <__aeabi_dmul>
 801445a:	f7ec fb81 	bl	8000b60 <__aeabi_d2f>
 801445e:	4b63      	ldr	r3, [pc, #396]	; (80145ec <incrementOctave+0x914>)
          freq_4_inc = ((((float) NOTE_D5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014460:	4e63      	ldr	r6, [pc, #396]	; (80145f0 <incrementOctave+0x918>)
          freq_3_inc = ((((float) NOTE_D5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014462:	6018      	str	r0, [r3, #0]
          freq_4_inc = ((((float) NOTE_D5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014464:	4629      	mov	r1, r5
 8014466:	a34c      	add	r3, pc, #304	; (adr r3, 8014598 <incrementOctave+0x8c0>)
 8014468:	e9d3 2300 	ldrd	r2, r3, [r3]
 801446c:	4620      	mov	r0, r4
 801446e:	f7ec f87f 	bl	8000570 <__aeabi_dmul>
 8014472:	f7ec fb75 	bl	8000b60 <__aeabi_d2f>
          freq_5_inc = ((((float) NOTE_E5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014476:	a34a      	add	r3, pc, #296	; (adr r3, 80145a0 <incrementOctave+0x8c8>)
 8014478:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_4_inc = ((((float) NOTE_D5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801447c:	6030      	str	r0, [r6, #0]
          freq_5_inc = ((((float) NOTE_E5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801447e:	4629      	mov	r1, r5
 8014480:	4620      	mov	r0, r4
 8014482:	f7ec f875 	bl	8000570 <__aeabi_dmul>
 8014486:	f7ec fb6b 	bl	8000b60 <__aeabi_d2f>
 801448a:	4b5a      	ldr	r3, [pc, #360]	; (80145f4 <incrementOctave+0x91c>)
          freq_6_inc = ((((float) NOTE_F5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801448c:	4e5a      	ldr	r6, [pc, #360]	; (80145f8 <incrementOctave+0x920>)
          freq_5_inc = ((((float) NOTE_E5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801448e:	6018      	str	r0, [r3, #0]
          freq_6_inc = ((((float) NOTE_F5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014490:	4629      	mov	r1, r5
 8014492:	a345      	add	r3, pc, #276	; (adr r3, 80145a8 <incrementOctave+0x8d0>)
 8014494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014498:	4620      	mov	r0, r4
 801449a:	f7ec f869 	bl	8000570 <__aeabi_dmul>
 801449e:	f7ec fb5f 	bl	8000b60 <__aeabi_d2f>
          freq_7_inc = ((((float) NOTE_F5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80144a2:	a343      	add	r3, pc, #268	; (adr r3, 80145b0 <incrementOctave+0x8d8>)
 80144a4:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_6_inc = ((((float) NOTE_F5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80144a8:	6030      	str	r0, [r6, #0]
          freq_7_inc = ((((float) NOTE_F5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80144aa:	4629      	mov	r1, r5
 80144ac:	4620      	mov	r0, r4
 80144ae:	f7ec f85f 	bl	8000570 <__aeabi_dmul>
 80144b2:	f7ec fb55 	bl	8000b60 <__aeabi_d2f>
 80144b6:	4b51      	ldr	r3, [pc, #324]	; (80145fc <incrementOctave+0x924>)
          freq_8_inc = ((((float) NOTE_G5 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80144b8:	4e51      	ldr	r6, [pc, #324]	; (8014600 <incrementOctave+0x928>)
          freq_7_inc = ((((float) NOTE_F5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80144ba:	6018      	str	r0, [r3, #0]
          freq_8_inc = ((((float) NOTE_G5 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80144bc:	4629      	mov	r1, r5
 80144be:	a33e      	add	r3, pc, #248	; (adr r3, 80145b8 <incrementOctave+0x8e0>)
 80144c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144c4:	4620      	mov	r0, r4
 80144c6:	f7ec f853 	bl	8000570 <__aeabi_dmul>
 80144ca:	f7ec fb49 	bl	8000b60 <__aeabi_d2f>
          freq_9_inc = ((((float) NOTE_G5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80144ce:	a33c      	add	r3, pc, #240	; (adr r3, 80145c0 <incrementOctave+0x8e8>)
 80144d0:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_8_inc = ((((float) NOTE_G5 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80144d4:	6030      	str	r0, [r6, #0]
          freq_9_inc = ((((float) NOTE_G5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80144d6:	4629      	mov	r1, r5
 80144d8:	4620      	mov	r0, r4
 80144da:	f7ec f849 	bl	8000570 <__aeabi_dmul>
 80144de:	f7ec fb3f 	bl	8000b60 <__aeabi_d2f>
 80144e2:	4b48      	ldr	r3, [pc, #288]	; (8014604 <incrementOctave+0x92c>)
          freq_10_inc = ((((float) NOTE_A5 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80144e4:	4e48      	ldr	r6, [pc, #288]	; (8014608 <incrementOctave+0x930>)
          freq_9_inc = ((((float) NOTE_G5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80144e6:	6018      	str	r0, [r3, #0]
          freq_10_inc = ((((float) NOTE_A5 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80144e8:	4629      	mov	r1, r5
 80144ea:	a337      	add	r3, pc, #220	; (adr r3, 80145c8 <incrementOctave+0x8f0>)
 80144ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144f0:	4620      	mov	r0, r4
 80144f2:	f7ec f83d 	bl	8000570 <__aeabi_dmul>
 80144f6:	f7ec fb33 	bl	8000b60 <__aeabi_d2f>
          freq_11_inc = ((((float) NOTE_A5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80144fa:	a335      	add	r3, pc, #212	; (adr r3, 80145d0 <incrementOctave+0x8f8>)
 80144fc:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_10_inc = ((((float) NOTE_A5 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014500:	6030      	str	r0, [r6, #0]
          freq_11_inc = ((((float) NOTE_A5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014502:	4629      	mov	r1, r5
 8014504:	4620      	mov	r0, r4
 8014506:	f7ec f833 	bl	8000570 <__aeabi_dmul>
 801450a:	f7ec fb29 	bl	8000b60 <__aeabi_d2f>
 801450e:	4b3f      	ldr	r3, [pc, #252]	; (801460c <incrementOctave+0x934>)
          freq_12_inc = ((((float) NOTE_B5 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014510:	4e3f      	ldr	r6, [pc, #252]	; (8014610 <incrementOctave+0x938>)
          freq_11_inc = ((((float) NOTE_A5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014512:	6018      	str	r0, [r3, #0]
          freq_12_inc = ((((float) NOTE_B5 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014514:	a330      	add	r3, pc, #192	; (adr r3, 80145d8 <incrementOctave+0x900>)
 8014516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801451a:	e5f4      	b.n	8014106 <incrementOctave+0x42e>
 801451c:	f3af 8000 	nop.w
 8014520:	3b0fa087 	.word	0x3b0fa087
 8014524:	3edb6ef8 	.word	0x3edb6ef8
 8014528:	2aea8f55 	.word	0x2aea8f55
 801452c:	3edd1093 	.word	0x3edd1093
 8014530:	92817765 	.word	0x92817765
 8014534:	3edecb02 	.word	0x3edecb02
 8014538:	47d3d428 	.word	0x47d3d428
 801453c:	3ee04fe0 	.word	0x3ee04fe0
 8014540:	26e978d5 	.word	0x26e978d5
 8014544:	3ee14831 	.word	0x3ee14831
 8014548:	429aaf44 	.word	0x429aaf44
 801454c:	3ee24f42 	.word	0x3ee24f42
 8014550:	a9a4a999 	.word	0xa9a4a999
 8014554:	3ee365f9 	.word	0x3ee365f9
 8014558:	8c210b13 	.word	0x8c210b13
 801455c:	3ee48d44 	.word	0x3ee48d44
 8014560:	16d0fcdd 	.word	0x16d0fcdd
 8014564:	3ee5c621 	.word	0x3ee5c621
 8014568:	7cfa26a2 	.word	0x7cfa26a2
 801456c:	3ee71194 	.word	0x3ee71194
 8014570:	500c87ce 	.word	0x500c87ce
 8014574:	3ee870bf 	.word	0x3ee870bf
 8014578:	0d24abb1 	.word	0x0d24abb1
 801457c:	3ee9e4c9 	.word	0x3ee9e4c9
 8014580:	aa6167fa 	.word	0xaa6167fa
 8014584:	3eeb6ef4 	.word	0x3eeb6ef4
 8014588:	9a3c56c9 	.word	0x9a3c56c9
 801458c:	3eed108f 	.word	0x3eed108f
 8014590:	92817765 	.word	0x92817765
 8014594:	3eeecb02 	.word	0x3eeecb02
 8014598:	47d3d428 	.word	0x47d3d428
 801459c:	3ef04fe0 	.word	0x3ef04fe0
 80145a0:	796a4f29 	.word	0x796a4f29
 80145a4:	3ef1482f 	.word	0x3ef1482f
 80145a8:	429aaf44 	.word	0x429aaf44
 80145ac:	3ef24f42 	.word	0x3ef24f42
 80145b0:	71fbc5de 	.word	0x71fbc5de
 80145b4:	3ef365fb 	.word	0x3ef365fb
 80145b8:	54782759 	.word	0x54782759
 80145bc:	3ef48d46 	.word	0x3ef48d46
 80145c0:	6951d331 	.word	0x6951d331
 80145c4:	3ef5c61f 	.word	0x3ef5c61f
 80145c8:	7cfa26a2 	.word	0x7cfa26a2
 80145cc:	3ef71194 	.word	0x3ef71194
 80145d0:	500c87ce 	.word	0x500c87ce
 80145d4:	3ef870bf 	.word	0x3ef870bf
 80145d8:	d57bc7f8 	.word	0xd57bc7f8
 80145dc:	3ef9e4ca 	.word	0x3ef9e4ca
 80145e0:	20000058 	.word	0x20000058
 80145e4:	200063b4 	.word	0x200063b4
 80145e8:	20007bf4 	.word	0x20007bf4
 80145ec:	20006fc8 	.word	0x20006fc8
 80145f0:	200077d8 	.word	0x200077d8
 80145f4:	200077d4 	.word	0x200077d4
 80145f8:	200077cc 	.word	0x200077cc
 80145fc:	20006fc0 	.word	0x20006fc0
 8014600:	2007db18 	.word	0x2007db18
 8014604:	200077d0 	.word	0x200077d0
 8014608:	2007d708 	.word	0x2007d708
 801460c:	200077e0 	.word	0x200077e0
 8014610:	2007d304 	.word	0x2007d304
 8014614:	00000000 	.word	0x00000000

08014618 <decrementOctave>:
void decrementOctave(void) {
 8014618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (octave == MIN_OCTAVE)
 801461a:	4abb      	ldr	r2, [pc, #748]	; (8014908 <decrementOctave+0x2f0>)
 801461c:	7813      	ldrb	r3, [r2, #0]
 801461e:	2b03      	cmp	r3, #3
 8014620:	d00f      	beq.n	8014642 <decrementOctave+0x2a>
  if(playbackStatus == 1){
 8014622:	49ba      	ldr	r1, [pc, #744]	; (801490c <decrementOctave+0x2f4>)
 8014624:	7809      	ldrb	r1, [r1, #0]
    octave--;
 8014626:	3b01      	subs	r3, #1
 8014628:	b2db      	uxtb	r3, r3
  if(playbackStatus == 1){
 801462a:	2901      	cmp	r1, #1
    octave--;
 801462c:	7013      	strb	r3, [r2, #0]
  if(playbackStatus == 1){
 801462e:	d009      	beq.n	8014644 <decrementOctave+0x2c>
      if (des_octave == 4) {
 8014630:	2b04      	cmp	r3, #4
 8014632:	f000 8187 	beq.w	8014944 <decrementOctave+0x32c>
        } else if (des_octave == 5) {
 8014636:	2b05      	cmp	r3, #5
 8014638:	f000 820d 	beq.w	8014a56 <decrementOctave+0x43e>
        } else if (des_octave == 3) {
 801463c:	2b03      	cmp	r3, #3
 801463e:	f000 808a 	beq.w	8014756 <decrementOctave+0x13e>
 8014642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (des_octave == 4) {
 8014644:	2b04      	cmp	r3, #4
 8014646:	f000 8305 	beq.w	8014c54 <decrementOctave+0x63c>
        } else if (des_octave == 5) {
 801464a:	2b05      	cmp	r3, #5
 801464c:	f000 8384 	beq.w	8014d58 <decrementOctave+0x740>
        } else if (des_octave == 3) {
 8014650:	2b03      	cmp	r3, #3
 8014652:	d1f6      	bne.n	8014642 <decrementOctave+0x2a>
          freq_1_inc = ((((float) NOTE_C3) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014654:	4bae      	ldr	r3, [pc, #696]	; (8014910 <decrementOctave+0x2f8>)
 8014656:	4faf      	ldr	r7, [pc, #700]	; (8014914 <decrementOctave+0x2fc>)
 8014658:	6818      	ldr	r0, [r3, #0]
          freq_2_inc = ((((float) NOTE_C3S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801465a:	4eaf      	ldr	r6, [pc, #700]	; (8014918 <decrementOctave+0x300>)
          freq_1_inc = ((((float) NOTE_C3) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801465c:	f7eb ff12 	bl	8000484 <__aeabi_ui2d>
 8014660:	a37d      	add	r3, pc, #500	; (adr r3, 8014858 <decrementOctave+0x240>)
 8014662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014666:	4604      	mov	r4, r0
 8014668:	460d      	mov	r5, r1
 801466a:	f7eb ff81 	bl	8000570 <__aeabi_dmul>
 801466e:	f7ec fa77 	bl	8000b60 <__aeabi_d2f>
          freq_2_inc = ((((float) NOTE_C3S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014672:	a37b      	add	r3, pc, #492	; (adr r3, 8014860 <decrementOctave+0x248>)
 8014674:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_1_inc = ((((float) NOTE_C3) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014678:	6038      	str	r0, [r7, #0]
          freq_2_inc = ((((float) NOTE_C3S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801467a:	4629      	mov	r1, r5
 801467c:	4620      	mov	r0, r4
 801467e:	f7eb ff77 	bl	8000570 <__aeabi_dmul>
 8014682:	f7ec fa6d 	bl	8000b60 <__aeabi_d2f>
          freq_3_inc = ((((float) NOTE_D3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014686:	a378      	add	r3, pc, #480	; (adr r3, 8014868 <decrementOctave+0x250>)
 8014688:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_2_inc = ((((float) NOTE_C3S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801468c:	6030      	str	r0, [r6, #0]
          freq_3_inc = ((((float) NOTE_D3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801468e:	4629      	mov	r1, r5
 8014690:	4620      	mov	r0, r4
 8014692:	f7eb ff6d 	bl	8000570 <__aeabi_dmul>
 8014696:	f7ec fa63 	bl	8000b60 <__aeabi_d2f>
 801469a:	4ba0      	ldr	r3, [pc, #640]	; (801491c <decrementOctave+0x304>)
          freq_4_inc = ((((float) NOTE_D3S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801469c:	4ea0      	ldr	r6, [pc, #640]	; (8014920 <decrementOctave+0x308>)
          freq_3_inc = ((((float) NOTE_D3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801469e:	6018      	str	r0, [r3, #0]
          freq_4_inc = ((((float) NOTE_D3S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80146a0:	4629      	mov	r1, r5
 80146a2:	a373      	add	r3, pc, #460	; (adr r3, 8014870 <decrementOctave+0x258>)
 80146a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146a8:	4620      	mov	r0, r4
 80146aa:	f7eb ff61 	bl	8000570 <__aeabi_dmul>
 80146ae:	f7ec fa57 	bl	8000b60 <__aeabi_d2f>
          freq_5_inc = ((((float) NOTE_E3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80146b2:	a371      	add	r3, pc, #452	; (adr r3, 8014878 <decrementOctave+0x260>)
 80146b4:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_4_inc = ((((float) NOTE_D3S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80146b8:	6030      	str	r0, [r6, #0]
          freq_5_inc = ((((float) NOTE_E3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80146ba:	4629      	mov	r1, r5
 80146bc:	4620      	mov	r0, r4
 80146be:	f7eb ff57 	bl	8000570 <__aeabi_dmul>
 80146c2:	f7ec fa4d 	bl	8000b60 <__aeabi_d2f>
 80146c6:	4b97      	ldr	r3, [pc, #604]	; (8014924 <decrementOctave+0x30c>)
          freq_6_inc = ((((float) NOTE_F3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80146c8:	4e97      	ldr	r6, [pc, #604]	; (8014928 <decrementOctave+0x310>)
          freq_5_inc = ((((float) NOTE_E3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80146ca:	6018      	str	r0, [r3, #0]
          freq_6_inc = ((((float) NOTE_F3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80146cc:	4629      	mov	r1, r5
 80146ce:	a36c      	add	r3, pc, #432	; (adr r3, 8014880 <decrementOctave+0x268>)
 80146d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146d4:	4620      	mov	r0, r4
 80146d6:	f7eb ff4b 	bl	8000570 <__aeabi_dmul>
 80146da:	f7ec fa41 	bl	8000b60 <__aeabi_d2f>
          freq_7_inc = ((((float) NOTE_F3S)/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80146de:	a36a      	add	r3, pc, #424	; (adr r3, 8014888 <decrementOctave+0x270>)
 80146e0:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_6_inc = ((((float) NOTE_F3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80146e4:	6030      	str	r0, [r6, #0]
          freq_7_inc = ((((float) NOTE_F3S)/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80146e6:	4629      	mov	r1, r5
 80146e8:	4620      	mov	r0, r4
 80146ea:	f7eb ff41 	bl	8000570 <__aeabi_dmul>
 80146ee:	f7ec fa37 	bl	8000b60 <__aeabi_d2f>
 80146f2:	4b8e      	ldr	r3, [pc, #568]	; (801492c <decrementOctave+0x314>)
          freq_8_inc = ((((float) NOTE_G3) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80146f4:	4e8e      	ldr	r6, [pc, #568]	; (8014930 <decrementOctave+0x318>)
          freq_7_inc = ((((float) NOTE_F3S)/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80146f6:	6018      	str	r0, [r3, #0]
          freq_8_inc = ((((float) NOTE_G3) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 80146f8:	4629      	mov	r1, r5
 80146fa:	a365      	add	r3, pc, #404	; (adr r3, 8014890 <decrementOctave+0x278>)
 80146fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014700:	4620      	mov	r0, r4
 8014702:	f7eb ff35 	bl	8000570 <__aeabi_dmul>
 8014706:	f7ec fa2b 	bl	8000b60 <__aeabi_d2f>
          freq_9_inc = ((((float) NOTE_G3S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801470a:	a363      	add	r3, pc, #396	; (adr r3, 8014898 <decrementOctave+0x280>)
 801470c:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_8_inc = ((((float) NOTE_G3) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014710:	6030      	str	r0, [r6, #0]
          freq_9_inc = ((((float) NOTE_G3S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014712:	4629      	mov	r1, r5
 8014714:	4620      	mov	r0, r4
 8014716:	f7eb ff2b 	bl	8000570 <__aeabi_dmul>
 801471a:	f7ec fa21 	bl	8000b60 <__aeabi_d2f>
 801471e:	4b85      	ldr	r3, [pc, #532]	; (8014934 <decrementOctave+0x31c>)
          freq_10_inc = ((((float) NOTE_A3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014720:	4f85      	ldr	r7, [pc, #532]	; (8014938 <decrementOctave+0x320>)
          freq_9_inc = ((((float) NOTE_G3S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014722:	6018      	str	r0, [r3, #0]
 8014724:	4606      	mov	r6, r0
          freq_10_inc = ((((float) NOTE_A3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014726:	a35e      	add	r3, pc, #376	; (adr r3, 80148a0 <decrementOctave+0x288>)
 8014728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801472c:	4620      	mov	r0, r4
 801472e:	4629      	mov	r1, r5
 8014730:	f7eb ff1e 	bl	8000570 <__aeabi_dmul>
 8014734:	f7ec fa14 	bl	8000b60 <__aeabi_d2f>
          freq_11_inc = ((((float) NOTE_A3S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014738:	4b80      	ldr	r3, [pc, #512]	; (801493c <decrementOctave+0x324>)
          freq_10_inc = ((((float) NOTE_A3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801473a:	6038      	str	r0, [r7, #0]
          freq_11_inc = ((((float) NOTE_A3S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801473c:	601e      	str	r6, [r3, #0]
          freq_12_inc = ((((float) NOTE_B3 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 801473e:	4620      	mov	r0, r4
 8014740:	a359      	add	r3, pc, #356	; (adr r3, 80148a8 <decrementOctave+0x290>)
 8014742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014746:	4629      	mov	r1, r5
 8014748:	f7eb ff12 	bl	8000570 <__aeabi_dmul>
 801474c:	f7ec fa08 	bl	8000b60 <__aeabi_d2f>
 8014750:	4b7b      	ldr	r3, [pc, #492]	; (8014940 <decrementOctave+0x328>)
 8014752:	6018      	str	r0, [r3, #0]
 8014754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          freq_1_inc = (((float) NOTE_C3 )/ DAC_FREQ) * max_table_index;
 8014756:	4b6e      	ldr	r3, [pc, #440]	; (8014910 <decrementOctave+0x2f8>)
 8014758:	4f6e      	ldr	r7, [pc, #440]	; (8014914 <decrementOctave+0x2fc>)
 801475a:	6818      	ldr	r0, [r3, #0]
          freq_2_inc = (((float) NOTE_C3S) / DAC_FREQ) * max_table_index;
 801475c:	4e6e      	ldr	r6, [pc, #440]	; (8014918 <decrementOctave+0x300>)
          freq_1_inc = (((float) NOTE_C3 )/ DAC_FREQ) * max_table_index;
 801475e:	f7eb fe91 	bl	8000484 <__aeabi_ui2d>
 8014762:	a353      	add	r3, pc, #332	; (adr r3, 80148b0 <decrementOctave+0x298>)
 8014764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014768:	4604      	mov	r4, r0
 801476a:	460d      	mov	r5, r1
 801476c:	f7eb ff00 	bl	8000570 <__aeabi_dmul>
 8014770:	f7ec f9f6 	bl	8000b60 <__aeabi_d2f>
          freq_2_inc = (((float) NOTE_C3S) / DAC_FREQ) * max_table_index;
 8014774:	a350      	add	r3, pc, #320	; (adr r3, 80148b8 <decrementOctave+0x2a0>)
 8014776:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_1_inc = (((float) NOTE_C3 )/ DAC_FREQ) * max_table_index;
 801477a:	6038      	str	r0, [r7, #0]
          freq_2_inc = (((float) NOTE_C3S) / DAC_FREQ) * max_table_index;
 801477c:	4629      	mov	r1, r5
 801477e:	4620      	mov	r0, r4
 8014780:	f7eb fef6 	bl	8000570 <__aeabi_dmul>
 8014784:	f7ec f9ec 	bl	8000b60 <__aeabi_d2f>
          freq_3_inc = (((float) NOTE_D3 )/ DAC_FREQ) * max_table_index;
 8014788:	a34d      	add	r3, pc, #308	; (adr r3, 80148c0 <decrementOctave+0x2a8>)
 801478a:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_2_inc = (((float) NOTE_C3S) / DAC_FREQ) * max_table_index;
 801478e:	6030      	str	r0, [r6, #0]
          freq_3_inc = (((float) NOTE_D3 )/ DAC_FREQ) * max_table_index;
 8014790:	4629      	mov	r1, r5
 8014792:	4620      	mov	r0, r4
 8014794:	f7eb feec 	bl	8000570 <__aeabi_dmul>
 8014798:	f7ec f9e2 	bl	8000b60 <__aeabi_d2f>
 801479c:	4b5f      	ldr	r3, [pc, #380]	; (801491c <decrementOctave+0x304>)
          freq_4_inc = (((float) NOTE_D3S )/ DAC_FREQ) * max_table_index;
 801479e:	4e60      	ldr	r6, [pc, #384]	; (8014920 <decrementOctave+0x308>)
          freq_3_inc = (((float) NOTE_D3 )/ DAC_FREQ) * max_table_index;
 80147a0:	6018      	str	r0, [r3, #0]
          freq_4_inc = (((float) NOTE_D3S )/ DAC_FREQ) * max_table_index;
 80147a2:	4629      	mov	r1, r5
 80147a4:	a348      	add	r3, pc, #288	; (adr r3, 80148c8 <decrementOctave+0x2b0>)
 80147a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147aa:	4620      	mov	r0, r4
 80147ac:	f7eb fee0 	bl	8000570 <__aeabi_dmul>
 80147b0:	f7ec f9d6 	bl	8000b60 <__aeabi_d2f>
          freq_5_inc = (((float) NOTE_E3 )/ DAC_FREQ) * max_table_index;
 80147b4:	a346      	add	r3, pc, #280	; (adr r3, 80148d0 <decrementOctave+0x2b8>)
 80147b6:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_4_inc = (((float) NOTE_D3S )/ DAC_FREQ) * max_table_index;
 80147ba:	6030      	str	r0, [r6, #0]
          freq_5_inc = (((float) NOTE_E3 )/ DAC_FREQ) * max_table_index;
 80147bc:	4629      	mov	r1, r5
 80147be:	4620      	mov	r0, r4
 80147c0:	f7eb fed6 	bl	8000570 <__aeabi_dmul>
 80147c4:	f7ec f9cc 	bl	8000b60 <__aeabi_d2f>
 80147c8:	4b56      	ldr	r3, [pc, #344]	; (8014924 <decrementOctave+0x30c>)
          freq_6_inc = (((float) NOTE_F3 )/ DAC_FREQ) * max_table_index;
 80147ca:	4e57      	ldr	r6, [pc, #348]	; (8014928 <decrementOctave+0x310>)
          freq_5_inc = (((float) NOTE_E3 )/ DAC_FREQ) * max_table_index;
 80147cc:	6018      	str	r0, [r3, #0]
          freq_6_inc = (((float) NOTE_F3 )/ DAC_FREQ) * max_table_index;
 80147ce:	4629      	mov	r1, r5
 80147d0:	a341      	add	r3, pc, #260	; (adr r3, 80148d8 <decrementOctave+0x2c0>)
 80147d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147d6:	4620      	mov	r0, r4
 80147d8:	f7eb feca 	bl	8000570 <__aeabi_dmul>
 80147dc:	f7ec f9c0 	bl	8000b60 <__aeabi_d2f>
          freq_7_inc = (((float) NOTE_F3S )/ DAC_FREQ) * max_table_index;
 80147e0:	a33f      	add	r3, pc, #252	; (adr r3, 80148e0 <decrementOctave+0x2c8>)
 80147e2:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_6_inc = (((float) NOTE_F3 )/ DAC_FREQ) * max_table_index;
 80147e6:	6030      	str	r0, [r6, #0]
          freq_7_inc = (((float) NOTE_F3S )/ DAC_FREQ) * max_table_index;
 80147e8:	4629      	mov	r1, r5
 80147ea:	4620      	mov	r0, r4
 80147ec:	f7eb fec0 	bl	8000570 <__aeabi_dmul>
 80147f0:	f7ec f9b6 	bl	8000b60 <__aeabi_d2f>
 80147f4:	4b4d      	ldr	r3, [pc, #308]	; (801492c <decrementOctave+0x314>)
          freq_8_inc = (((float) NOTE_G3 )/ DAC_FREQ) * max_table_index;
 80147f6:	4e4e      	ldr	r6, [pc, #312]	; (8014930 <decrementOctave+0x318>)
          freq_7_inc = (((float) NOTE_F3S )/ DAC_FREQ) * max_table_index;
 80147f8:	6018      	str	r0, [r3, #0]
          freq_8_inc = (((float) NOTE_G3 )/ DAC_FREQ) * max_table_index;
 80147fa:	4629      	mov	r1, r5
 80147fc:	a33a      	add	r3, pc, #232	; (adr r3, 80148e8 <decrementOctave+0x2d0>)
 80147fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014802:	4620      	mov	r0, r4
 8014804:	f7eb feb4 	bl	8000570 <__aeabi_dmul>
 8014808:	f7ec f9aa 	bl	8000b60 <__aeabi_d2f>
          freq_9_inc = (((float) NOTE_G3S) / DAC_FREQ) * max_table_index;
 801480c:	a338      	add	r3, pc, #224	; (adr r3, 80148f0 <decrementOctave+0x2d8>)
 801480e:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_8_inc = (((float) NOTE_G3 )/ DAC_FREQ) * max_table_index;
 8014812:	6030      	str	r0, [r6, #0]
          freq_9_inc = (((float) NOTE_G3S) / DAC_FREQ) * max_table_index;
 8014814:	4629      	mov	r1, r5
 8014816:	4620      	mov	r0, r4
 8014818:	f7eb feaa 	bl	8000570 <__aeabi_dmul>
 801481c:	f7ec f9a0 	bl	8000b60 <__aeabi_d2f>
 8014820:	4b44      	ldr	r3, [pc, #272]	; (8014934 <decrementOctave+0x31c>)
          freq_10_inc = (((float) NOTE_A3 )/ DAC_FREQ) * max_table_index;
 8014822:	4f45      	ldr	r7, [pc, #276]	; (8014938 <decrementOctave+0x320>)
          freq_9_inc = (((float) NOTE_G3S) / DAC_FREQ) * max_table_index;
 8014824:	6018      	str	r0, [r3, #0]
 8014826:	4606      	mov	r6, r0
          freq_10_inc = (((float) NOTE_A3 )/ DAC_FREQ) * max_table_index;
 8014828:	a333      	add	r3, pc, #204	; (adr r3, 80148f8 <decrementOctave+0x2e0>)
 801482a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801482e:	4620      	mov	r0, r4
 8014830:	4629      	mov	r1, r5
 8014832:	f7eb fe9d 	bl	8000570 <__aeabi_dmul>
 8014836:	f7ec f993 	bl	8000b60 <__aeabi_d2f>
          freq_11_inc = (((float) NOTE_A3S )/ DAC_FREQ) * max_table_index;
 801483a:	4b40      	ldr	r3, [pc, #256]	; (801493c <decrementOctave+0x324>)
          freq_10_inc = (((float) NOTE_A3 )/ DAC_FREQ) * max_table_index;
 801483c:	6038      	str	r0, [r7, #0]
          freq_11_inc = (((float) NOTE_A3S )/ DAC_FREQ) * max_table_index;
 801483e:	601e      	str	r6, [r3, #0]
          freq_12_inc = (((float) NOTE_B3 )/ DAC_FREQ) * max_table_index;
 8014840:	4620      	mov	r0, r4
 8014842:	a32f      	add	r3, pc, #188	; (adr r3, 8014900 <decrementOctave+0x2e8>)
 8014844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014848:	4629      	mov	r1, r5
 801484a:	f7eb fe91 	bl	8000570 <__aeabi_dmul>
 801484e:	f7ec f987 	bl	8000b60 <__aeabi_d2f>
 8014852:	4b3b      	ldr	r3, [pc, #236]	; (8014940 <decrementOctave+0x328>)
 8014854:	6018      	str	r0, [r3, #0]
 8014856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014858:	3b0fa087 	.word	0x3b0fa087
 801485c:	3ecb6ef8 	.word	0x3ecb6ef8
 8014860:	3f3e0371 	.word	0x3f3e0371
 8014864:	3ecd108c 	.word	0x3ecd108c
 8014868:	a6d4eb7f 	.word	0xa6d4eb7f
 801486c:	3ececafb 	.word	0x3ececafb
 8014870:	d1fd8e36 	.word	0xd1fd8e36
 8014874:	3ed04fdc 	.word	0x3ed04fdc
 8014878:	26e978d5 	.word	0x26e978d5
 801487c:	3ed14831 	.word	0x3ed14831
 8014880:	429aaf44 	.word	0x429aaf44
 8014884:	3ed24f42 	.word	0x3ed24f42
 8014888:	a9a4a999 	.word	0xa9a4a999
 801488c:	3ed365f9 	.word	0x3ed365f9
 8014890:	01f75105 	.word	0x01f75105
 8014894:	3ed48d48 	.word	0x3ed48d48
 8014898:	a0fab6eb 	.word	0xa0fab6eb
 801489c:	3ed5c61d 	.word	0x3ed5c61d
 80148a0:	7cfa26a2 	.word	0x7cfa26a2
 80148a4:	3ed71194 	.word	0x3ed71194
 80148a8:	82faf1a3 	.word	0x82faf1a3
 80148ac:	3ed9e4cc 	.word	0x3ed9e4cc
 80148b0:	69ad42c4 	.word	0x69ad42c4
 80148b4:	3f6aca5e 	.word	0x3f6aca5e
 80148b8:	f5c28f5c 	.word	0xf5c28f5c
 80148bc:	3f6c6228 	.word	0x3f6c6228
 80148c0:	c0ebedfa 	.word	0xc0ebedfa
 80148c4:	3f6e1239 	.word	0x3f6e1239
 80148c8:	4a2339c1 	.word	0x4a2339c1
 80148cc:	3f6fdbfb 	.word	0x3f6fdbfb
 80148d0:	00000000 	.word	0x00000000
 80148d4:	3f70e080 	.word	0x3f70e080
 80148d8:	b50b0f28 	.word	0xb50b0f28
 80148dc:	3f71e166 	.word	0x3f71e166
 80148e0:	cfaacd9f 	.word	0xcfaacd9f
 80148e4:	3f72f195 	.word	0x3f72f195
 80148e8:	51eb851f 	.word	0x51eb851f
 80148ec:	3f7411f8 	.word	0x3f7411f8
 80148f0:	ef34d6a1 	.word	0xef34d6a1
 80148f4:	3f754378 	.word	0x3f754378
 80148f8:	020c49ba 	.word	0x020c49ba
 80148fc:	3f76872b 	.word	0x3f76872b
 8014900:	b7e90ff9 	.word	0xb7e90ff9
 8014904:	3f79496f 	.word	0x3f79496f
 8014908:	2000005c 	.word	0x2000005c
 801490c:	200053fc 	.word	0x200053fc
 8014910:	20000058 	.word	0x20000058
 8014914:	200063b4 	.word	0x200063b4
 8014918:	20007bf4 	.word	0x20007bf4
 801491c:	20006fc8 	.word	0x20006fc8
 8014920:	200077d8 	.word	0x200077d8
 8014924:	200077d4 	.word	0x200077d4
 8014928:	200077cc 	.word	0x200077cc
 801492c:	20006fc0 	.word	0x20006fc0
 8014930:	2007db18 	.word	0x2007db18
 8014934:	200077d0 	.word	0x200077d0
 8014938:	2007d708 	.word	0x2007d708
 801493c:	200077e0 	.word	0x200077e0
 8014940:	2007d304 	.word	0x2007d304
          freq_1_inc = (((float) NOTE_C4) / DAC_FREQ) * max_table_index;
 8014944:	4bb6      	ldr	r3, [pc, #728]	; (8014c20 <decrementOctave+0x608>)
 8014946:	4fb7      	ldr	r7, [pc, #732]	; (8014c24 <decrementOctave+0x60c>)
 8014948:	6818      	ldr	r0, [r3, #0]
          freq_2_inc = (((float) NOTE_C4S) / DAC_FREQ) * max_table_index;
 801494a:	4eb7      	ldr	r6, [pc, #732]	; (8014c28 <decrementOctave+0x610>)
          freq_1_inc = (((float) NOTE_C4) / DAC_FREQ) * max_table_index;
 801494c:	f7eb fd9a 	bl	8000484 <__aeabi_ui2d>
 8014950:	a383      	add	r3, pc, #524	; (adr r3, 8014b60 <decrementOctave+0x548>)
 8014952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014956:	4604      	mov	r4, r0
 8014958:	460d      	mov	r5, r1
 801495a:	f7eb fe09 	bl	8000570 <__aeabi_dmul>
 801495e:	f7ec f8ff 	bl	8000b60 <__aeabi_d2f>
          freq_2_inc = (((float) NOTE_C4S) / DAC_FREQ) * max_table_index;
 8014962:	a381      	add	r3, pc, #516	; (adr r3, 8014b68 <decrementOctave+0x550>)
 8014964:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_1_inc = (((float) NOTE_C4) / DAC_FREQ) * max_table_index;
 8014968:	6038      	str	r0, [r7, #0]
          freq_2_inc = (((float) NOTE_C4S) / DAC_FREQ) * max_table_index;
 801496a:	4629      	mov	r1, r5
 801496c:	4620      	mov	r0, r4
 801496e:	f7eb fdff 	bl	8000570 <__aeabi_dmul>
 8014972:	f7ec f8f5 	bl	8000b60 <__aeabi_d2f>
          freq_3_inc = (((float) NOTE_D4) / DAC_FREQ) * max_table_index;
 8014976:	a37e      	add	r3, pc, #504	; (adr r3, 8014b70 <decrementOctave+0x558>)
 8014978:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_2_inc = (((float) NOTE_C4S) / DAC_FREQ) * max_table_index;
 801497c:	6030      	str	r0, [r6, #0]
          freq_3_inc = (((float) NOTE_D4) / DAC_FREQ) * max_table_index;
 801497e:	4629      	mov	r1, r5
 8014980:	4620      	mov	r0, r4
 8014982:	f7eb fdf5 	bl	8000570 <__aeabi_dmul>
 8014986:	f7ec f8eb 	bl	8000b60 <__aeabi_d2f>
 801498a:	4ba8      	ldr	r3, [pc, #672]	; (8014c2c <decrementOctave+0x614>)
          freq_4_inc = (((float) NOTE_D4S) / DAC_FREQ) * max_table_index;
 801498c:	4ea8      	ldr	r6, [pc, #672]	; (8014c30 <decrementOctave+0x618>)
          freq_3_inc = (((float) NOTE_D4) / DAC_FREQ) * max_table_index;
 801498e:	6018      	str	r0, [r3, #0]
          freq_4_inc = (((float) NOTE_D4S) / DAC_FREQ) * max_table_index;
 8014990:	4629      	mov	r1, r5
 8014992:	a379      	add	r3, pc, #484	; (adr r3, 8014b78 <decrementOctave+0x560>)
 8014994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014998:	4620      	mov	r0, r4
 801499a:	f7eb fde9 	bl	8000570 <__aeabi_dmul>
 801499e:	f7ec f8df 	bl	8000b60 <__aeabi_d2f>
          freq_5_inc = (((float) NOTE_E4) / DAC_FREQ) * max_table_index;
 80149a2:	a377      	add	r3, pc, #476	; (adr r3, 8014b80 <decrementOctave+0x568>)
 80149a4:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_4_inc = (((float) NOTE_D4S) / DAC_FREQ) * max_table_index;
 80149a8:	6030      	str	r0, [r6, #0]
          freq_5_inc = (((float) NOTE_E4) / DAC_FREQ) * max_table_index;
 80149aa:	4629      	mov	r1, r5
 80149ac:	4620      	mov	r0, r4
 80149ae:	f7eb fddf 	bl	8000570 <__aeabi_dmul>
 80149b2:	f7ec f8d5 	bl	8000b60 <__aeabi_d2f>
 80149b6:	4b9f      	ldr	r3, [pc, #636]	; (8014c34 <decrementOctave+0x61c>)
          freq_6_inc = (((float) NOTE_F4 )/ DAC_FREQ) * max_table_index;
 80149b8:	4e9f      	ldr	r6, [pc, #636]	; (8014c38 <decrementOctave+0x620>)
          freq_5_inc = (((float) NOTE_E4) / DAC_FREQ) * max_table_index;
 80149ba:	6018      	str	r0, [r3, #0]
          freq_6_inc = (((float) NOTE_F4 )/ DAC_FREQ) * max_table_index;
 80149bc:	4629      	mov	r1, r5
 80149be:	a372      	add	r3, pc, #456	; (adr r3, 8014b88 <decrementOctave+0x570>)
 80149c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149c4:	4620      	mov	r0, r4
 80149c6:	f7eb fdd3 	bl	8000570 <__aeabi_dmul>
 80149ca:	f7ec f8c9 	bl	8000b60 <__aeabi_d2f>
          freq_7_inc = (((float) NOTE_F4S )/ DAC_FREQ) * max_table_index;
 80149ce:	a370      	add	r3, pc, #448	; (adr r3, 8014b90 <decrementOctave+0x578>)
 80149d0:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_6_inc = (((float) NOTE_F4 )/ DAC_FREQ) * max_table_index;
 80149d4:	6030      	str	r0, [r6, #0]
          freq_7_inc = (((float) NOTE_F4S )/ DAC_FREQ) * max_table_index;
 80149d6:	4629      	mov	r1, r5
 80149d8:	4620      	mov	r0, r4
 80149da:	f7eb fdc9 	bl	8000570 <__aeabi_dmul>
 80149de:	f7ec f8bf 	bl	8000b60 <__aeabi_d2f>
 80149e2:	4b96      	ldr	r3, [pc, #600]	; (8014c3c <decrementOctave+0x624>)
          freq_8_inc = (((float) NOTE_G4 )/ DAC_FREQ) * max_table_index;
 80149e4:	4e96      	ldr	r6, [pc, #600]	; (8014c40 <decrementOctave+0x628>)
          freq_7_inc = (((float) NOTE_F4S )/ DAC_FREQ) * max_table_index;
 80149e6:	6018      	str	r0, [r3, #0]
          freq_8_inc = (((float) NOTE_G4 )/ DAC_FREQ) * max_table_index;
 80149e8:	4629      	mov	r1, r5
 80149ea:	a36b      	add	r3, pc, #428	; (adr r3, 8014b98 <decrementOctave+0x580>)
 80149ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149f0:	4620      	mov	r0, r4
 80149f2:	f7eb fdbd 	bl	8000570 <__aeabi_dmul>
 80149f6:	f7ec f8b3 	bl	8000b60 <__aeabi_d2f>
          freq_9_inc = (((float) NOTE_G4S )/ DAC_FREQ) * max_table_index;
 80149fa:	a369      	add	r3, pc, #420	; (adr r3, 8014ba0 <decrementOctave+0x588>)
 80149fc:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_8_inc = (((float) NOTE_G4 )/ DAC_FREQ) * max_table_index;
 8014a00:	6030      	str	r0, [r6, #0]
          freq_9_inc = (((float) NOTE_G4S )/ DAC_FREQ) * max_table_index;
 8014a02:	4629      	mov	r1, r5
 8014a04:	4620      	mov	r0, r4
 8014a06:	f7eb fdb3 	bl	8000570 <__aeabi_dmul>
 8014a0a:	f7ec f8a9 	bl	8000b60 <__aeabi_d2f>
 8014a0e:	4b8d      	ldr	r3, [pc, #564]	; (8014c44 <decrementOctave+0x62c>)
          freq_10_inc = (((float) NOTE_A4 )/ DAC_FREQ) * max_table_index;
 8014a10:	4e8d      	ldr	r6, [pc, #564]	; (8014c48 <decrementOctave+0x630>)
          freq_9_inc = (((float) NOTE_G4S )/ DAC_FREQ) * max_table_index;
 8014a12:	6018      	str	r0, [r3, #0]
          freq_10_inc = (((float) NOTE_A4 )/ DAC_FREQ) * max_table_index;
 8014a14:	4629      	mov	r1, r5
 8014a16:	a364      	add	r3, pc, #400	; (adr r3, 8014ba8 <decrementOctave+0x590>)
 8014a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a1c:	4620      	mov	r0, r4
 8014a1e:	f7eb fda7 	bl	8000570 <__aeabi_dmul>
 8014a22:	f7ec f89d 	bl	8000b60 <__aeabi_d2f>
          freq_11_inc = (((float) NOTE_A4S )/ DAC_FREQ) * max_table_index;
 8014a26:	a362      	add	r3, pc, #392	; (adr r3, 8014bb0 <decrementOctave+0x598>)
 8014a28:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_10_inc = (((float) NOTE_A4 )/ DAC_FREQ) * max_table_index;
 8014a2c:	6030      	str	r0, [r6, #0]
          freq_11_inc = (((float) NOTE_A4S )/ DAC_FREQ) * max_table_index;
 8014a2e:	4629      	mov	r1, r5
 8014a30:	4620      	mov	r0, r4
 8014a32:	f7eb fd9d 	bl	8000570 <__aeabi_dmul>
 8014a36:	f7ec f893 	bl	8000b60 <__aeabi_d2f>
 8014a3a:	4b84      	ldr	r3, [pc, #528]	; (8014c4c <decrementOctave+0x634>)
          freq_12_inc = (((float) NOTE_B4) / DAC_FREQ) * max_table_index;
 8014a3c:	4e84      	ldr	r6, [pc, #528]	; (8014c50 <decrementOctave+0x638>)
          freq_11_inc = (((float) NOTE_A4S )/ DAC_FREQ) * max_table_index;
 8014a3e:	6018      	str	r0, [r3, #0]
          freq_12_inc = (((float) NOTE_B4) / DAC_FREQ) * max_table_index;
 8014a40:	a35d      	add	r3, pc, #372	; (adr r3, 8014bb8 <decrementOctave+0x5a0>)
 8014a42:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_12_inc = ((((float) NOTE_B5 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014a46:	4620      	mov	r0, r4
 8014a48:	4629      	mov	r1, r5
 8014a4a:	f7eb fd91 	bl	8000570 <__aeabi_dmul>
 8014a4e:	f7ec f887 	bl	8000b60 <__aeabi_d2f>
 8014a52:	6030      	str	r0, [r6, #0]
 8014a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          freq_1_inc = (((float) NOTE_C5 )/ DAC_FREQ) * max_table_index;
 8014a56:	4b72      	ldr	r3, [pc, #456]	; (8014c20 <decrementOctave+0x608>)
 8014a58:	4f72      	ldr	r7, [pc, #456]	; (8014c24 <decrementOctave+0x60c>)
 8014a5a:	6818      	ldr	r0, [r3, #0]
          freq_2_inc = (((float) NOTE_C5S )/ DAC_FREQ) * max_table_index;
 8014a5c:	4e72      	ldr	r6, [pc, #456]	; (8014c28 <decrementOctave+0x610>)
          freq_1_inc = (((float) NOTE_C5 )/ DAC_FREQ) * max_table_index;
 8014a5e:	f7eb fd11 	bl	8000484 <__aeabi_ui2d>
 8014a62:	a357      	add	r3, pc, #348	; (adr r3, 8014bc0 <decrementOctave+0x5a8>)
 8014a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a68:	4604      	mov	r4, r0
 8014a6a:	460d      	mov	r5, r1
 8014a6c:	f7eb fd80 	bl	8000570 <__aeabi_dmul>
 8014a70:	f7ec f876 	bl	8000b60 <__aeabi_d2f>
          freq_2_inc = (((float) NOTE_C5S )/ DAC_FREQ) * max_table_index;
 8014a74:	a354      	add	r3, pc, #336	; (adr r3, 8014bc8 <decrementOctave+0x5b0>)
 8014a76:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_1_inc = (((float) NOTE_C5 )/ DAC_FREQ) * max_table_index;
 8014a7a:	6038      	str	r0, [r7, #0]
          freq_2_inc = (((float) NOTE_C5S )/ DAC_FREQ) * max_table_index;
 8014a7c:	4629      	mov	r1, r5
 8014a7e:	4620      	mov	r0, r4
 8014a80:	f7eb fd76 	bl	8000570 <__aeabi_dmul>
 8014a84:	f7ec f86c 	bl	8000b60 <__aeabi_d2f>
          freq_3_inc = (((float) NOTE_D5 )/ DAC_FREQ) * max_table_index;
 8014a88:	a351      	add	r3, pc, #324	; (adr r3, 8014bd0 <decrementOctave+0x5b8>)
 8014a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_2_inc = (((float) NOTE_C5S )/ DAC_FREQ) * max_table_index;
 8014a8e:	6030      	str	r0, [r6, #0]
          freq_3_inc = (((float) NOTE_D5 )/ DAC_FREQ) * max_table_index;
 8014a90:	4629      	mov	r1, r5
 8014a92:	4620      	mov	r0, r4
 8014a94:	f7eb fd6c 	bl	8000570 <__aeabi_dmul>
 8014a98:	f7ec f862 	bl	8000b60 <__aeabi_d2f>
 8014a9c:	4b63      	ldr	r3, [pc, #396]	; (8014c2c <decrementOctave+0x614>)
          freq_4_inc = (((float) NOTE_D5S )/ DAC_FREQ) * max_table_index;
 8014a9e:	4e64      	ldr	r6, [pc, #400]	; (8014c30 <decrementOctave+0x618>)
          freq_3_inc = (((float) NOTE_D5 )/ DAC_FREQ) * max_table_index;
 8014aa0:	6018      	str	r0, [r3, #0]
          freq_4_inc = (((float) NOTE_D5S )/ DAC_FREQ) * max_table_index;
 8014aa2:	4629      	mov	r1, r5
 8014aa4:	a34c      	add	r3, pc, #304	; (adr r3, 8014bd8 <decrementOctave+0x5c0>)
 8014aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aaa:	4620      	mov	r0, r4
 8014aac:	f7eb fd60 	bl	8000570 <__aeabi_dmul>
 8014ab0:	f7ec f856 	bl	8000b60 <__aeabi_d2f>
          freq_5_inc = (((float) NOTE_E5) / DAC_FREQ) * max_table_index;
 8014ab4:	a34a      	add	r3, pc, #296	; (adr r3, 8014be0 <decrementOctave+0x5c8>)
 8014ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_4_inc = (((float) NOTE_D5S )/ DAC_FREQ) * max_table_index;
 8014aba:	6030      	str	r0, [r6, #0]
          freq_5_inc = (((float) NOTE_E5) / DAC_FREQ) * max_table_index;
 8014abc:	4629      	mov	r1, r5
 8014abe:	4620      	mov	r0, r4
 8014ac0:	f7eb fd56 	bl	8000570 <__aeabi_dmul>
 8014ac4:	f7ec f84c 	bl	8000b60 <__aeabi_d2f>
 8014ac8:	4b5a      	ldr	r3, [pc, #360]	; (8014c34 <decrementOctave+0x61c>)
          freq_6_inc = (((float) NOTE_F5 )/ DAC_FREQ) * max_table_index;
 8014aca:	4e5b      	ldr	r6, [pc, #364]	; (8014c38 <decrementOctave+0x620>)
          freq_5_inc = (((float) NOTE_E5) / DAC_FREQ) * max_table_index;
 8014acc:	6018      	str	r0, [r3, #0]
          freq_6_inc = (((float) NOTE_F5 )/ DAC_FREQ) * max_table_index;
 8014ace:	4629      	mov	r1, r5
 8014ad0:	a345      	add	r3, pc, #276	; (adr r3, 8014be8 <decrementOctave+0x5d0>)
 8014ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ad6:	4620      	mov	r0, r4
 8014ad8:	f7eb fd4a 	bl	8000570 <__aeabi_dmul>
 8014adc:	f7ec f840 	bl	8000b60 <__aeabi_d2f>
          freq_7_inc = (((float) NOTE_F5S )/ DAC_FREQ) * max_table_index;
 8014ae0:	a343      	add	r3, pc, #268	; (adr r3, 8014bf0 <decrementOctave+0x5d8>)
 8014ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_6_inc = (((float) NOTE_F5 )/ DAC_FREQ) * max_table_index;
 8014ae6:	6030      	str	r0, [r6, #0]
          freq_7_inc = (((float) NOTE_F5S )/ DAC_FREQ) * max_table_index;
 8014ae8:	4629      	mov	r1, r5
 8014aea:	4620      	mov	r0, r4
 8014aec:	f7eb fd40 	bl	8000570 <__aeabi_dmul>
 8014af0:	f7ec f836 	bl	8000b60 <__aeabi_d2f>
 8014af4:	4b51      	ldr	r3, [pc, #324]	; (8014c3c <decrementOctave+0x624>)
          freq_8_inc = (((float) NOTE_G5) / DAC_FREQ) * max_table_index;
 8014af6:	4e52      	ldr	r6, [pc, #328]	; (8014c40 <decrementOctave+0x628>)
          freq_7_inc = (((float) NOTE_F5S )/ DAC_FREQ) * max_table_index;
 8014af8:	6018      	str	r0, [r3, #0]
          freq_8_inc = (((float) NOTE_G5) / DAC_FREQ) * max_table_index;
 8014afa:	4629      	mov	r1, r5
 8014afc:	a33e      	add	r3, pc, #248	; (adr r3, 8014bf8 <decrementOctave+0x5e0>)
 8014afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b02:	4620      	mov	r0, r4
 8014b04:	f7eb fd34 	bl	8000570 <__aeabi_dmul>
 8014b08:	f7ec f82a 	bl	8000b60 <__aeabi_d2f>
          freq_9_inc = (((float) NOTE_G5S )/ DAC_FREQ) * max_table_index;
 8014b0c:	a33c      	add	r3, pc, #240	; (adr r3, 8014c00 <decrementOctave+0x5e8>)
 8014b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_8_inc = (((float) NOTE_G5) / DAC_FREQ) * max_table_index;
 8014b12:	6030      	str	r0, [r6, #0]
          freq_9_inc = (((float) NOTE_G5S )/ DAC_FREQ) * max_table_index;
 8014b14:	4629      	mov	r1, r5
 8014b16:	4620      	mov	r0, r4
 8014b18:	f7eb fd2a 	bl	8000570 <__aeabi_dmul>
 8014b1c:	f7ec f820 	bl	8000b60 <__aeabi_d2f>
 8014b20:	4b48      	ldr	r3, [pc, #288]	; (8014c44 <decrementOctave+0x62c>)
          freq_10_inc = (((float) NOTE_A5) / DAC_FREQ) * max_table_index;
 8014b22:	4e49      	ldr	r6, [pc, #292]	; (8014c48 <decrementOctave+0x630>)
          freq_9_inc = (((float) NOTE_G5S )/ DAC_FREQ) * max_table_index;
 8014b24:	6018      	str	r0, [r3, #0]
          freq_10_inc = (((float) NOTE_A5) / DAC_FREQ) * max_table_index;
 8014b26:	4629      	mov	r1, r5
 8014b28:	a337      	add	r3, pc, #220	; (adr r3, 8014c08 <decrementOctave+0x5f0>)
 8014b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b2e:	4620      	mov	r0, r4
 8014b30:	f7eb fd1e 	bl	8000570 <__aeabi_dmul>
 8014b34:	f7ec f814 	bl	8000b60 <__aeabi_d2f>
          freq_11_inc = (((float) NOTE_A5S) / DAC_FREQ) * max_table_index;
 8014b38:	a335      	add	r3, pc, #212	; (adr r3, 8014c10 <decrementOctave+0x5f8>)
 8014b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_10_inc = (((float) NOTE_A5) / DAC_FREQ) * max_table_index;
 8014b3e:	6030      	str	r0, [r6, #0]
          freq_11_inc = (((float) NOTE_A5S) / DAC_FREQ) * max_table_index;
 8014b40:	4629      	mov	r1, r5
 8014b42:	4620      	mov	r0, r4
 8014b44:	f7eb fd14 	bl	8000570 <__aeabi_dmul>
 8014b48:	f7ec f80a 	bl	8000b60 <__aeabi_d2f>
 8014b4c:	4b3f      	ldr	r3, [pc, #252]	; (8014c4c <decrementOctave+0x634>)
          freq_12_inc = (((float) NOTE_B5 )/ DAC_FREQ) * max_table_index;
 8014b4e:	4e40      	ldr	r6, [pc, #256]	; (8014c50 <decrementOctave+0x638>)
          freq_11_inc = (((float) NOTE_A5S) / DAC_FREQ) * max_table_index;
 8014b50:	6018      	str	r0, [r3, #0]
          freq_12_inc = (((float) NOTE_B5 )/ DAC_FREQ) * max_table_index;
 8014b52:	a331      	add	r3, pc, #196	; (adr r3, 8014c18 <decrementOctave+0x600>)
 8014b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b58:	e775      	b.n	8014a46 <decrementOctave+0x42e>
 8014b5a:	bf00      	nop
 8014b5c:	f3af 8000 	nop.w
 8014b60:	69ad42c4 	.word	0x69ad42c4
 8014b64:	3f7aca5e 	.word	0x3f7aca5e
 8014b68:	b7e90ff9 	.word	0xb7e90ff9
 8014b6c:	3f7c622f 	.word	0x3f7c622f
 8014b70:	83126e98 	.word	0x83126e98
 8014b74:	3f7e1240 	.word	0x3f7e1240
 8014b78:	0c49ba5e 	.word	0x0c49ba5e
 8014b7c:	3f7fdc02 	.word	0x3f7fdc02
 8014b80:	00000000 	.word	0x00000000
 8014b84:	3f80e080 	.word	0x3f80e080
 8014b88:	b50b0f28 	.word	0xb50b0f28
 8014b8c:	3f81e166 	.word	0x3f81e166
 8014b90:	cfaacd9f 	.word	0xcfaacd9f
 8014b94:	3f82f195 	.word	0x3f82f195
 8014b98:	f0d844d0 	.word	0xf0d844d0
 8014b9c:	3f8411f4 	.word	0x3f8411f4
 8014ba0:	504816f0 	.word	0x504816f0
 8014ba4:	3f85437c 	.word	0x3f85437c
 8014ba8:	020c49ba 	.word	0x020c49ba
 8014bac:	3f86872b 	.word	0x3f86872b
 8014bb0:	d42c3c9f 	.word	0xd42c3c9f
 8014bb4:	3f87de1a 	.word	0x3f87de1a
 8014bb8:	56d5cfab 	.word	0x56d5cfab
 8014bbc:	3f89496c 	.word	0x3f89496c
 8014bc0:	ee631f8a 	.word	0xee631f8a
 8014bc4:	3f8aca5a 	.word	0x3f8aca5a
 8014bc8:	3c9eecc0 	.word	0x3c9eecc0
 8014bcc:	3f8c622c 	.word	0x3f8c622c
 8014bd0:	83126e98 	.word	0x83126e98
 8014bd4:	3f8e1240 	.word	0x3f8e1240
 8014bd8:	0c49ba5e 	.word	0x0c49ba5e
 8014bdc:	3f8fdc02 	.word	0x3f8fdc02
 8014be0:	5c91d14e 	.word	0x5c91d14e
 8014be4:	3f90e07e 	.word	0x3f90e07e
 8014be8:	b50b0f28 	.word	0xb50b0f28
 8014bec:	3f91e166 	.word	0x3f91e166
 8014bf0:	8d4fdf3b 	.word	0x8d4fdf3b
 8014bf4:	3f92f197 	.word	0x3f92f197
 8014bf8:	ae7d566d 	.word	0xae7d566d
 8014bfc:	3f9411f6 	.word	0x3f9411f6
 8014c00:	acd9e83e 	.word	0xacd9e83e
 8014c04:	3f95437a 	.word	0x3f95437a
 8014c08:	020c49ba 	.word	0x020c49ba
 8014c0c:	3f96872b 	.word	0x3f96872b
 8014c10:	d42c3c9f 	.word	0xd42c3c9f
 8014c14:	3f97de1a 	.word	0x3f97de1a
 8014c18:	147ae148 	.word	0x147ae148
 8014c1c:	3f99496e 	.word	0x3f99496e
 8014c20:	20000058 	.word	0x20000058
 8014c24:	200063b4 	.word	0x200063b4
 8014c28:	20007bf4 	.word	0x20007bf4
 8014c2c:	20006fc8 	.word	0x20006fc8
 8014c30:	200077d8 	.word	0x200077d8
 8014c34:	200077d4 	.word	0x200077d4
 8014c38:	200077cc 	.word	0x200077cc
 8014c3c:	20006fc0 	.word	0x20006fc0
 8014c40:	2007db18 	.word	0x2007db18
 8014c44:	200077d0 	.word	0x200077d0
 8014c48:	2007d708 	.word	0x2007d708
 8014c4c:	200077e0 	.word	0x200077e0
 8014c50:	2007d304 	.word	0x2007d304
          freq_1_inc = ( ( ((float) NOTE_C4) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014c54:	4bb2      	ldr	r3, [pc, #712]	; (8014f20 <decrementOctave+0x908>)
 8014c56:	4fb3      	ldr	r7, [pc, #716]	; (8014f24 <decrementOctave+0x90c>)
 8014c58:	6818      	ldr	r0, [r3, #0]
          freq_2_inc = ((((float) NOTE_C4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014c5a:	4eb3      	ldr	r6, [pc, #716]	; (8014f28 <decrementOctave+0x910>)
          freq_1_inc = ( ( ((float) NOTE_C4) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014c5c:	f7eb fc12 	bl	8000484 <__aeabi_ui2d>
 8014c60:	a37f      	add	r3, pc, #508	; (adr r3, 8014e60 <decrementOctave+0x848>)
 8014c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c66:	4604      	mov	r4, r0
 8014c68:	460d      	mov	r5, r1
 8014c6a:	f7eb fc81 	bl	8000570 <__aeabi_dmul>
 8014c6e:	f7eb ff77 	bl	8000b60 <__aeabi_d2f>
          freq_2_inc = ((((float) NOTE_C4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014c72:	a37d      	add	r3, pc, #500	; (adr r3, 8014e68 <decrementOctave+0x850>)
 8014c74:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_1_inc = ( ( ((float) NOTE_C4) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014c78:	6038      	str	r0, [r7, #0]
          freq_2_inc = ((((float) NOTE_C4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014c7a:	4629      	mov	r1, r5
 8014c7c:	4620      	mov	r0, r4
 8014c7e:	f7eb fc77 	bl	8000570 <__aeabi_dmul>
 8014c82:	f7eb ff6d 	bl	8000b60 <__aeabi_d2f>
          freq_3_inc = ((((float) NOTE_D4) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014c86:	a37a      	add	r3, pc, #488	; (adr r3, 8014e70 <decrementOctave+0x858>)
 8014c88:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_2_inc = ((((float) NOTE_C4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014c8c:	6030      	str	r0, [r6, #0]
          freq_3_inc = ((((float) NOTE_D4) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014c8e:	4629      	mov	r1, r5
 8014c90:	4620      	mov	r0, r4
 8014c92:	f7eb fc6d 	bl	8000570 <__aeabi_dmul>
 8014c96:	f7eb ff63 	bl	8000b60 <__aeabi_d2f>
 8014c9a:	4ba4      	ldr	r3, [pc, #656]	; (8014f2c <decrementOctave+0x914>)
          freq_4_inc = ((((float) NOTE_D4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014c9c:	4ea4      	ldr	r6, [pc, #656]	; (8014f30 <decrementOctave+0x918>)
          freq_3_inc = ((((float) NOTE_D4) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014c9e:	6018      	str	r0, [r3, #0]
          freq_4_inc = ((((float) NOTE_D4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014ca0:	4629      	mov	r1, r5
 8014ca2:	a375      	add	r3, pc, #468	; (adr r3, 8014e78 <decrementOctave+0x860>)
 8014ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ca8:	4620      	mov	r0, r4
 8014caa:	f7eb fc61 	bl	8000570 <__aeabi_dmul>
 8014cae:	f7eb ff57 	bl	8000b60 <__aeabi_d2f>
          freq_5_inc = ((((float) NOTE_E4) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014cb2:	a373      	add	r3, pc, #460	; (adr r3, 8014e80 <decrementOctave+0x868>)
 8014cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_4_inc = ((((float) NOTE_D4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014cb8:	6030      	str	r0, [r6, #0]
          freq_5_inc = ((((float) NOTE_E4) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014cba:	4629      	mov	r1, r5
 8014cbc:	4620      	mov	r0, r4
 8014cbe:	f7eb fc57 	bl	8000570 <__aeabi_dmul>
 8014cc2:	f7eb ff4d 	bl	8000b60 <__aeabi_d2f>
 8014cc6:	4b9b      	ldr	r3, [pc, #620]	; (8014f34 <decrementOctave+0x91c>)
          freq_6_inc = ((((float) NOTE_F4 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014cc8:	4e9b      	ldr	r6, [pc, #620]	; (8014f38 <decrementOctave+0x920>)
          freq_5_inc = ((((float) NOTE_E4) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014cca:	6018      	str	r0, [r3, #0]
          freq_6_inc = ((((float) NOTE_F4 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014ccc:	4629      	mov	r1, r5
 8014cce:	a36e      	add	r3, pc, #440	; (adr r3, 8014e88 <decrementOctave+0x870>)
 8014cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cd4:	4620      	mov	r0, r4
 8014cd6:	f7eb fc4b 	bl	8000570 <__aeabi_dmul>
 8014cda:	f7eb ff41 	bl	8000b60 <__aeabi_d2f>
          freq_7_inc = ((((float) NOTE_F4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014cde:	a36c      	add	r3, pc, #432	; (adr r3, 8014e90 <decrementOctave+0x878>)
 8014ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_6_inc = ((((float) NOTE_F4 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014ce4:	6030      	str	r0, [r6, #0]
          freq_7_inc = ((((float) NOTE_F4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014ce6:	4629      	mov	r1, r5
 8014ce8:	4620      	mov	r0, r4
 8014cea:	f7eb fc41 	bl	8000570 <__aeabi_dmul>
 8014cee:	f7eb ff37 	bl	8000b60 <__aeabi_d2f>
 8014cf2:	4b92      	ldr	r3, [pc, #584]	; (8014f3c <decrementOctave+0x924>)
          freq_8_inc = ((((float) NOTE_G4 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014cf4:	4e92      	ldr	r6, [pc, #584]	; (8014f40 <decrementOctave+0x928>)
          freq_7_inc = ((((float) NOTE_F4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014cf6:	6018      	str	r0, [r3, #0]
          freq_8_inc = ((((float) NOTE_G4 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014cf8:	4629      	mov	r1, r5
 8014cfa:	a367      	add	r3, pc, #412	; (adr r3, 8014e98 <decrementOctave+0x880>)
 8014cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d00:	4620      	mov	r0, r4
 8014d02:	f7eb fc35 	bl	8000570 <__aeabi_dmul>
 8014d06:	f7eb ff2b 	bl	8000b60 <__aeabi_d2f>
          freq_9_inc = ((((float) NOTE_G4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014d0a:	a365      	add	r3, pc, #404	; (adr r3, 8014ea0 <decrementOctave+0x888>)
 8014d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_8_inc = ((((float) NOTE_G4 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014d10:	6030      	str	r0, [r6, #0]
          freq_9_inc = ((((float) NOTE_G4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014d12:	4629      	mov	r1, r5
 8014d14:	4620      	mov	r0, r4
 8014d16:	f7eb fc2b 	bl	8000570 <__aeabi_dmul>
 8014d1a:	f7eb ff21 	bl	8000b60 <__aeabi_d2f>
 8014d1e:	4b89      	ldr	r3, [pc, #548]	; (8014f44 <decrementOctave+0x92c>)
          freq_10_inc = ((((float) NOTE_A4 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014d20:	4e89      	ldr	r6, [pc, #548]	; (8014f48 <decrementOctave+0x930>)
          freq_9_inc = ((((float) NOTE_G4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014d22:	6018      	str	r0, [r3, #0]
          freq_10_inc = ((((float) NOTE_A4 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014d24:	4629      	mov	r1, r5
 8014d26:	a360      	add	r3, pc, #384	; (adr r3, 8014ea8 <decrementOctave+0x890>)
 8014d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d2c:	4620      	mov	r0, r4
 8014d2e:	f7eb fc1f 	bl	8000570 <__aeabi_dmul>
 8014d32:	f7eb ff15 	bl	8000b60 <__aeabi_d2f>
          freq_11_inc = ((((float) NOTE_A4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014d36:	a35e      	add	r3, pc, #376	; (adr r3, 8014eb0 <decrementOctave+0x898>)
 8014d38:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_10_inc = ((((float) NOTE_A4 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014d3c:	6030      	str	r0, [r6, #0]
          freq_11_inc = ((((float) NOTE_A4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014d3e:	4629      	mov	r1, r5
 8014d40:	4620      	mov	r0, r4
 8014d42:	f7eb fc15 	bl	8000570 <__aeabi_dmul>
 8014d46:	f7eb ff0b 	bl	8000b60 <__aeabi_d2f>
 8014d4a:	4b80      	ldr	r3, [pc, #512]	; (8014f4c <decrementOctave+0x934>)
          freq_12_inc = ((((float) NOTE_B4) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014d4c:	4e80      	ldr	r6, [pc, #512]	; (8014f50 <decrementOctave+0x938>)
          freq_11_inc = ((((float) NOTE_A4S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014d4e:	6018      	str	r0, [r3, #0]
          freq_12_inc = ((((float) NOTE_B4) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014d50:	a359      	add	r3, pc, #356	; (adr r3, 8014eb8 <decrementOctave+0x8a0>)
 8014d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d56:	e676      	b.n	8014a46 <decrementOctave+0x42e>
          freq_1_inc = ((((float) NOTE_C5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014d58:	4b71      	ldr	r3, [pc, #452]	; (8014f20 <decrementOctave+0x908>)
 8014d5a:	4f72      	ldr	r7, [pc, #456]	; (8014f24 <decrementOctave+0x90c>)
 8014d5c:	6818      	ldr	r0, [r3, #0]
          freq_2_inc = ((((float) NOTE_C5S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014d5e:	4e72      	ldr	r6, [pc, #456]	; (8014f28 <decrementOctave+0x910>)
          freq_1_inc = ((((float) NOTE_C5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014d60:	f7eb fb90 	bl	8000484 <__aeabi_ui2d>
 8014d64:	a356      	add	r3, pc, #344	; (adr r3, 8014ec0 <decrementOctave+0x8a8>)
 8014d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d6a:	4604      	mov	r4, r0
 8014d6c:	460d      	mov	r5, r1
 8014d6e:	f7eb fbff 	bl	8000570 <__aeabi_dmul>
 8014d72:	f7eb fef5 	bl	8000b60 <__aeabi_d2f>
          freq_2_inc = ((((float) NOTE_C5S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014d76:	a354      	add	r3, pc, #336	; (adr r3, 8014ec8 <decrementOctave+0x8b0>)
 8014d78:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_1_inc = ((((float) NOTE_C5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014d7c:	6038      	str	r0, [r7, #0]
          freq_2_inc = ((((float) NOTE_C5S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014d7e:	4629      	mov	r1, r5
 8014d80:	4620      	mov	r0, r4
 8014d82:	f7eb fbf5 	bl	8000570 <__aeabi_dmul>
 8014d86:	f7eb feeb 	bl	8000b60 <__aeabi_d2f>
          freq_3_inc = ((((float) NOTE_D5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014d8a:	a351      	add	r3, pc, #324	; (adr r3, 8014ed0 <decrementOctave+0x8b8>)
 8014d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_2_inc = ((((float) NOTE_C5S) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014d90:	6030      	str	r0, [r6, #0]
          freq_3_inc = ((((float) NOTE_D5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014d92:	4629      	mov	r1, r5
 8014d94:	4620      	mov	r0, r4
 8014d96:	f7eb fbeb 	bl	8000570 <__aeabi_dmul>
 8014d9a:	f7eb fee1 	bl	8000b60 <__aeabi_d2f>
 8014d9e:	4b63      	ldr	r3, [pc, #396]	; (8014f2c <decrementOctave+0x914>)
          freq_4_inc = ((((float) NOTE_D5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014da0:	4e63      	ldr	r6, [pc, #396]	; (8014f30 <decrementOctave+0x918>)
          freq_3_inc = ((((float) NOTE_D5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014da2:	6018      	str	r0, [r3, #0]
          freq_4_inc = ((((float) NOTE_D5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014da4:	4629      	mov	r1, r5
 8014da6:	a34c      	add	r3, pc, #304	; (adr r3, 8014ed8 <decrementOctave+0x8c0>)
 8014da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dac:	4620      	mov	r0, r4
 8014dae:	f7eb fbdf 	bl	8000570 <__aeabi_dmul>
 8014db2:	f7eb fed5 	bl	8000b60 <__aeabi_d2f>
          freq_5_inc = ((((float) NOTE_E5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014db6:	a34a      	add	r3, pc, #296	; (adr r3, 8014ee0 <decrementOctave+0x8c8>)
 8014db8:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_4_inc = ((((float) NOTE_D5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014dbc:	6030      	str	r0, [r6, #0]
          freq_5_inc = ((((float) NOTE_E5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014dbe:	4629      	mov	r1, r5
 8014dc0:	4620      	mov	r0, r4
 8014dc2:	f7eb fbd5 	bl	8000570 <__aeabi_dmul>
 8014dc6:	f7eb fecb 	bl	8000b60 <__aeabi_d2f>
 8014dca:	4b5a      	ldr	r3, [pc, #360]	; (8014f34 <decrementOctave+0x91c>)
          freq_6_inc = ((((float) NOTE_F5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014dcc:	4e5a      	ldr	r6, [pc, #360]	; (8014f38 <decrementOctave+0x920>)
          freq_5_inc = ((((float) NOTE_E5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014dce:	6018      	str	r0, [r3, #0]
          freq_6_inc = ((((float) NOTE_F5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014dd0:	4629      	mov	r1, r5
 8014dd2:	a345      	add	r3, pc, #276	; (adr r3, 8014ee8 <decrementOctave+0x8d0>)
 8014dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dd8:	4620      	mov	r0, r4
 8014dda:	f7eb fbc9 	bl	8000570 <__aeabi_dmul>
 8014dde:	f7eb febf 	bl	8000b60 <__aeabi_d2f>
          freq_7_inc = ((((float) NOTE_F5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014de2:	a343      	add	r3, pc, #268	; (adr r3, 8014ef0 <decrementOctave+0x8d8>)
 8014de4:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_6_inc = ((((float) NOTE_F5) / DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014de8:	6030      	str	r0, [r6, #0]
          freq_7_inc = ((((float) NOTE_F5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014dea:	4629      	mov	r1, r5
 8014dec:	4620      	mov	r0, r4
 8014dee:	f7eb fbbf 	bl	8000570 <__aeabi_dmul>
 8014df2:	f7eb feb5 	bl	8000b60 <__aeabi_d2f>
 8014df6:	4b51      	ldr	r3, [pc, #324]	; (8014f3c <decrementOctave+0x924>)
          freq_8_inc = ((((float) NOTE_G5 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014df8:	4e51      	ldr	r6, [pc, #324]	; (8014f40 <decrementOctave+0x928>)
          freq_7_inc = ((((float) NOTE_F5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014dfa:	6018      	str	r0, [r3, #0]
          freq_8_inc = ((((float) NOTE_G5 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014dfc:	4629      	mov	r1, r5
 8014dfe:	a33e      	add	r3, pc, #248	; (adr r3, 8014ef8 <decrementOctave+0x8e0>)
 8014e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e04:	4620      	mov	r0, r4
 8014e06:	f7eb fbb3 	bl	8000570 <__aeabi_dmul>
 8014e0a:	f7eb fea9 	bl	8000b60 <__aeabi_d2f>
          freq_9_inc = ((((float) NOTE_G5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014e0e:	a33c      	add	r3, pc, #240	; (adr r3, 8014f00 <decrementOctave+0x8e8>)
 8014e10:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_8_inc = ((((float) NOTE_G5 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014e14:	6030      	str	r0, [r6, #0]
          freq_9_inc = ((((float) NOTE_G5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014e16:	4629      	mov	r1, r5
 8014e18:	4620      	mov	r0, r4
 8014e1a:	f7eb fba9 	bl	8000570 <__aeabi_dmul>
 8014e1e:	f7eb fe9f 	bl	8000b60 <__aeabi_d2f>
 8014e22:	4b48      	ldr	r3, [pc, #288]	; (8014f44 <decrementOctave+0x92c>)
          freq_10_inc = ((((float) NOTE_A5 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014e24:	4e48      	ldr	r6, [pc, #288]	; (8014f48 <decrementOctave+0x930>)
          freq_9_inc = ((((float) NOTE_G5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014e26:	6018      	str	r0, [r3, #0]
          freq_10_inc = ((((float) NOTE_A5 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014e28:	4629      	mov	r1, r5
 8014e2a:	a337      	add	r3, pc, #220	; (adr r3, 8014f08 <decrementOctave+0x8f0>)
 8014e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e30:	4620      	mov	r0, r4
 8014e32:	f7eb fb9d 	bl	8000570 <__aeabi_dmul>
 8014e36:	f7eb fe93 	bl	8000b60 <__aeabi_d2f>
          freq_11_inc = ((((float) NOTE_A5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014e3a:	a335      	add	r3, pc, #212	; (adr r3, 8014f10 <decrementOctave+0x8f8>)
 8014e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
          freq_10_inc = ((((float) NOTE_A5 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014e40:	6030      	str	r0, [r6, #0]
          freq_11_inc = ((((float) NOTE_A5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014e42:	4629      	mov	r1, r5
 8014e44:	4620      	mov	r0, r4
 8014e46:	f7eb fb93 	bl	8000570 <__aeabi_dmul>
 8014e4a:	f7eb fe89 	bl	8000b60 <__aeabi_d2f>
 8014e4e:	4b3f      	ldr	r3, [pc, #252]	; (8014f4c <decrementOctave+0x934>)
          freq_12_inc = ((((float) NOTE_B5 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014e50:	4e3f      	ldr	r6, [pc, #252]	; (8014f50 <decrementOctave+0x938>)
          freq_11_inc = ((((float) NOTE_A5S )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014e52:	6018      	str	r0, [r3, #0]
          freq_12_inc = ((((float) NOTE_B5 )/ DAC_FREQ) * max_table_index) / PLAYBACK_DIV;
 8014e54:	a330      	add	r3, pc, #192	; (adr r3, 8014f18 <decrementOctave+0x900>)
 8014e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e5a:	e5f4      	b.n	8014a46 <decrementOctave+0x42e>
 8014e5c:	f3af 8000 	nop.w
 8014e60:	3b0fa087 	.word	0x3b0fa087
 8014e64:	3edb6ef8 	.word	0x3edb6ef8
 8014e68:	2aea8f55 	.word	0x2aea8f55
 8014e6c:	3edd1093 	.word	0x3edd1093
 8014e70:	92817765 	.word	0x92817765
 8014e74:	3edecb02 	.word	0x3edecb02
 8014e78:	47d3d428 	.word	0x47d3d428
 8014e7c:	3ee04fe0 	.word	0x3ee04fe0
 8014e80:	26e978d5 	.word	0x26e978d5
 8014e84:	3ee14831 	.word	0x3ee14831
 8014e88:	429aaf44 	.word	0x429aaf44
 8014e8c:	3ee24f42 	.word	0x3ee24f42
 8014e90:	a9a4a999 	.word	0xa9a4a999
 8014e94:	3ee365f9 	.word	0x3ee365f9
 8014e98:	8c210b13 	.word	0x8c210b13
 8014e9c:	3ee48d44 	.word	0x3ee48d44
 8014ea0:	16d0fcdd 	.word	0x16d0fcdd
 8014ea4:	3ee5c621 	.word	0x3ee5c621
 8014ea8:	7cfa26a2 	.word	0x7cfa26a2
 8014eac:	3ee71194 	.word	0x3ee71194
 8014eb0:	500c87ce 	.word	0x500c87ce
 8014eb4:	3ee870bf 	.word	0x3ee870bf
 8014eb8:	0d24abb1 	.word	0x0d24abb1
 8014ebc:	3ee9e4c9 	.word	0x3ee9e4c9
 8014ec0:	aa6167fa 	.word	0xaa6167fa
 8014ec4:	3eeb6ef4 	.word	0x3eeb6ef4
 8014ec8:	9a3c56c9 	.word	0x9a3c56c9
 8014ecc:	3eed108f 	.word	0x3eed108f
 8014ed0:	92817765 	.word	0x92817765
 8014ed4:	3eeecb02 	.word	0x3eeecb02
 8014ed8:	47d3d428 	.word	0x47d3d428
 8014edc:	3ef04fe0 	.word	0x3ef04fe0
 8014ee0:	796a4f29 	.word	0x796a4f29
 8014ee4:	3ef1482f 	.word	0x3ef1482f
 8014ee8:	429aaf44 	.word	0x429aaf44
 8014eec:	3ef24f42 	.word	0x3ef24f42
 8014ef0:	71fbc5de 	.word	0x71fbc5de
 8014ef4:	3ef365fb 	.word	0x3ef365fb
 8014ef8:	54782759 	.word	0x54782759
 8014efc:	3ef48d46 	.word	0x3ef48d46
 8014f00:	6951d331 	.word	0x6951d331
 8014f04:	3ef5c61f 	.word	0x3ef5c61f
 8014f08:	7cfa26a2 	.word	0x7cfa26a2
 8014f0c:	3ef71194 	.word	0x3ef71194
 8014f10:	500c87ce 	.word	0x500c87ce
 8014f14:	3ef870bf 	.word	0x3ef870bf
 8014f18:	d57bc7f8 	.word	0xd57bc7f8
 8014f1c:	3ef9e4ca 	.word	0x3ef9e4ca
 8014f20:	20000058 	.word	0x20000058
 8014f24:	200063b4 	.word	0x200063b4
 8014f28:	20007bf4 	.word	0x20007bf4
 8014f2c:	20006fc8 	.word	0x20006fc8
 8014f30:	200077d8 	.word	0x200077d8
 8014f34:	200077d4 	.word	0x200077d4
 8014f38:	200077cc 	.word	0x200077cc
 8014f3c:	20006fc0 	.word	0x20006fc0
 8014f40:	2007db18 	.word	0x2007db18
 8014f44:	200077d0 	.word	0x200077d0
 8014f48:	2007d708 	.word	0x2007d708
 8014f4c:	200077e0 	.word	0x200077e0
 8014f50:	2007d304 	.word	0x2007d304

08014f54 <setPostWave>:
  preWaveshape = desWave;
 8014f54:	4b01      	ldr	r3, [pc, #4]	; (8014f5c <setPostWave+0x8>)
 8014f56:	7018      	strb	r0, [r3, #0]
 8014f58:	4770      	bx	lr
 8014f5a:	bf00      	nop
 8014f5c:	200053fe 	.word	0x200053fe

08014f60 <nullTracker>:
  switch(key){
 8014f60:	3801      	subs	r0, #1
void nullTracker(uint8_t key){
 8014f62:	b430      	push	{r4, r5}
  switch(key){
 8014f64:	280b      	cmp	r0, #11
 8014f66:	d80f      	bhi.n	8014f88 <nullTracker+0x28>
 8014f68:	e8df f000 	tbb	[pc, r0]
 8014f6c:	2b221910 	.word	0x2b221910
 8014f70:	4f463d34 	.word	0x4f463d34
 8014f74:	066a6158 	.word	0x066a6158
	  	freq_12_multiplier = 0;
 8014f78:	4a36      	ldr	r2, [pc, #216]	; (8015054 <nullTracker+0xf4>)
	freq_12_sample_tracker = 0;
 8014f7a:	4b37      	ldr	r3, [pc, #220]	; (8015058 <nullTracker+0xf8>)
	  	freq_12_multiplier = 0;
 8014f7c:	2000      	movs	r0, #0
 8014f7e:	2100      	movs	r1, #0
 8014f80:	e9c2 0100 	strd	r0, r1, [r2]
	freq_12_sample_tracker = 0;
 8014f84:	2200      	movs	r2, #0
 8014f86:	601a      	str	r2, [r3, #0]
}
 8014f88:	bc30      	pop	{r4, r5}
 8014f8a:	4770      	bx	lr
  	freq_1_multiplier = 0;
 8014f8c:	4933      	ldr	r1, [pc, #204]	; (801505c <nullTracker+0xfc>)
  	freq_1_sample_tracker = 0;
 8014f8e:	4b34      	ldr	r3, [pc, #208]	; (8015060 <nullTracker+0x100>)
  	freq_1_multiplier = 0;
 8014f90:	2400      	movs	r4, #0
 8014f92:	2500      	movs	r5, #0
  	freq_1_sample_tracker = 0;
 8014f94:	2200      	movs	r2, #0
  	freq_1_multiplier = 0;
 8014f96:	e9c1 4500 	strd	r4, r5, [r1]
  	freq_1_sample_tracker = 0;
 8014f9a:	601a      	str	r2, [r3, #0]
            break;
 8014f9c:	e7f4      	b.n	8014f88 <nullTracker+0x28>
	  	freq_2_multiplier = 0;
 8014f9e:	4931      	ldr	r1, [pc, #196]	; (8015064 <nullTracker+0x104>)
	freq_2_sample_tracker = 0;
 8014fa0:	4b31      	ldr	r3, [pc, #196]	; (8015068 <nullTracker+0x108>)
	  	freq_2_multiplier = 0;
 8014fa2:	2400      	movs	r4, #0
 8014fa4:	2500      	movs	r5, #0
	freq_2_sample_tracker = 0;
 8014fa6:	2200      	movs	r2, #0
	  	freq_2_multiplier = 0;
 8014fa8:	e9c1 4500 	strd	r4, r5, [r1]
	freq_2_sample_tracker = 0;
 8014fac:	601a      	str	r2, [r3, #0]
            break;
 8014fae:	e7eb      	b.n	8014f88 <nullTracker+0x28>
	  	freq_3_multiplier = 0;
 8014fb0:	492e      	ldr	r1, [pc, #184]	; (801506c <nullTracker+0x10c>)
	freq_3_sample_tracker = 0;
 8014fb2:	4b2f      	ldr	r3, [pc, #188]	; (8015070 <nullTracker+0x110>)
	  	freq_3_multiplier = 0;
 8014fb4:	2400      	movs	r4, #0
 8014fb6:	2500      	movs	r5, #0
	freq_3_sample_tracker = 0;
 8014fb8:	2200      	movs	r2, #0
	  	freq_3_multiplier = 0;
 8014fba:	e9c1 4500 	strd	r4, r5, [r1]
	freq_3_sample_tracker = 0;
 8014fbe:	601a      	str	r2, [r3, #0]
            break;
 8014fc0:	e7e2      	b.n	8014f88 <nullTracker+0x28>
	  	freq_4_multiplier = 0;
 8014fc2:	492c      	ldr	r1, [pc, #176]	; (8015074 <nullTracker+0x114>)
	freq_4_sample_tracker = 0;
 8014fc4:	4b2c      	ldr	r3, [pc, #176]	; (8015078 <nullTracker+0x118>)
	  	freq_4_multiplier = 0;
 8014fc6:	2400      	movs	r4, #0
 8014fc8:	2500      	movs	r5, #0
	freq_4_sample_tracker = 0;
 8014fca:	2200      	movs	r2, #0
	  	freq_4_multiplier = 0;
 8014fcc:	e9c1 4500 	strd	r4, r5, [r1]
	freq_4_sample_tracker = 0;
 8014fd0:	601a      	str	r2, [r3, #0]
            break;
 8014fd2:	e7d9      	b.n	8014f88 <nullTracker+0x28>
	  	freq_5_multiplier = 0;
 8014fd4:	4929      	ldr	r1, [pc, #164]	; (801507c <nullTracker+0x11c>)
	freq_5_sample_tracker = 0;
 8014fd6:	4b2a      	ldr	r3, [pc, #168]	; (8015080 <nullTracker+0x120>)
	  	freq_5_multiplier = 0;
 8014fd8:	2400      	movs	r4, #0
 8014fda:	2500      	movs	r5, #0
	freq_5_sample_tracker = 0;
 8014fdc:	2200      	movs	r2, #0
	  	freq_5_multiplier = 0;
 8014fde:	e9c1 4500 	strd	r4, r5, [r1]
	freq_5_sample_tracker = 0;
 8014fe2:	601a      	str	r2, [r3, #0]
            break;
 8014fe4:	e7d0      	b.n	8014f88 <nullTracker+0x28>
	  	freq_6_multiplier = 0;
 8014fe6:	4927      	ldr	r1, [pc, #156]	; (8015084 <nullTracker+0x124>)
	freq_6_sample_tracker = 0;
 8014fe8:	4b27      	ldr	r3, [pc, #156]	; (8015088 <nullTracker+0x128>)
	  	freq_6_multiplier = 0;
 8014fea:	2400      	movs	r4, #0
 8014fec:	2500      	movs	r5, #0
	freq_6_sample_tracker = 0;
 8014fee:	2200      	movs	r2, #0
	  	freq_6_multiplier = 0;
 8014ff0:	e9c1 4500 	strd	r4, r5, [r1]
	freq_6_sample_tracker = 0;
 8014ff4:	601a      	str	r2, [r3, #0]
            break;
 8014ff6:	e7c7      	b.n	8014f88 <nullTracker+0x28>
	  	freq_7_multiplier = 0;
 8014ff8:	4924      	ldr	r1, [pc, #144]	; (801508c <nullTracker+0x12c>)
	freq_7_sample_tracker = 0;
 8014ffa:	4b25      	ldr	r3, [pc, #148]	; (8015090 <nullTracker+0x130>)
	  	freq_7_multiplier = 0;
 8014ffc:	2400      	movs	r4, #0
 8014ffe:	2500      	movs	r5, #0
	freq_7_sample_tracker = 0;
 8015000:	2200      	movs	r2, #0
	  	freq_7_multiplier = 0;
 8015002:	e9c1 4500 	strd	r4, r5, [r1]
	freq_7_sample_tracker = 0;
 8015006:	601a      	str	r2, [r3, #0]
            break;
 8015008:	e7be      	b.n	8014f88 <nullTracker+0x28>
	  	freq_8_multiplier = 0;
 801500a:	4922      	ldr	r1, [pc, #136]	; (8015094 <nullTracker+0x134>)
	freq_8_sample_tracker = 0;
 801500c:	4b22      	ldr	r3, [pc, #136]	; (8015098 <nullTracker+0x138>)
	  	freq_8_multiplier = 0;
 801500e:	2400      	movs	r4, #0
 8015010:	2500      	movs	r5, #0
	freq_8_sample_tracker = 0;
 8015012:	2200      	movs	r2, #0
	  	freq_8_multiplier = 0;
 8015014:	e9c1 4500 	strd	r4, r5, [r1]
	freq_8_sample_tracker = 0;
 8015018:	601a      	str	r2, [r3, #0]
            break;
 801501a:	e7b5      	b.n	8014f88 <nullTracker+0x28>
	  	freq_9_multiplier = 0;
 801501c:	491f      	ldr	r1, [pc, #124]	; (801509c <nullTracker+0x13c>)
	freq_9_sample_tracker = 0;
 801501e:	4b20      	ldr	r3, [pc, #128]	; (80150a0 <nullTracker+0x140>)
	  	freq_9_multiplier = 0;
 8015020:	2400      	movs	r4, #0
 8015022:	2500      	movs	r5, #0
	freq_9_sample_tracker = 0;
 8015024:	2200      	movs	r2, #0
	  	freq_9_multiplier = 0;
 8015026:	e9c1 4500 	strd	r4, r5, [r1]
	freq_9_sample_tracker = 0;
 801502a:	601a      	str	r2, [r3, #0]
            break;
 801502c:	e7ac      	b.n	8014f88 <nullTracker+0x28>
	  	freq_10_multiplier = 0;
 801502e:	491d      	ldr	r1, [pc, #116]	; (80150a4 <nullTracker+0x144>)
	freq_10_sample_tracker = 0;
 8015030:	4b1d      	ldr	r3, [pc, #116]	; (80150a8 <nullTracker+0x148>)
	  	freq_10_multiplier = 0;
 8015032:	2400      	movs	r4, #0
 8015034:	2500      	movs	r5, #0
	freq_10_sample_tracker = 0;
 8015036:	2200      	movs	r2, #0
	  	freq_10_multiplier = 0;
 8015038:	e9c1 4500 	strd	r4, r5, [r1]
	freq_10_sample_tracker = 0;
 801503c:	601a      	str	r2, [r3, #0]
            break;
 801503e:	e7a3      	b.n	8014f88 <nullTracker+0x28>
	  	freq_11_multiplier = 0;
 8015040:	491a      	ldr	r1, [pc, #104]	; (80150ac <nullTracker+0x14c>)
	freq_11_sample_tracker = 0;
 8015042:	4b1b      	ldr	r3, [pc, #108]	; (80150b0 <nullTracker+0x150>)
	  	freq_11_multiplier = 0;
 8015044:	2400      	movs	r4, #0
 8015046:	2500      	movs	r5, #0
	freq_11_sample_tracker = 0;
 8015048:	2200      	movs	r2, #0
	  	freq_11_multiplier = 0;
 801504a:	e9c1 4500 	strd	r4, r5, [r1]
	freq_11_sample_tracker = 0;
 801504e:	601a      	str	r2, [r3, #0]
            break;
 8015050:	e79a      	b.n	8014f88 <nullTracker+0x28>
 8015052:	bf00      	nop
 8015054:	20005340 	.word	0x20005340
 8015058:	20005348 	.word	0x20005348
 801505c:	20005350 	.word	0x20005350
 8015060:	20005358 	.word	0x20005358
 8015064:	20005360 	.word	0x20005360
 8015068:	20005368 	.word	0x20005368
 801506c:	20005370 	.word	0x20005370
 8015070:	20005378 	.word	0x20005378
 8015074:	20005380 	.word	0x20005380
 8015078:	20005388 	.word	0x20005388
 801507c:	20005390 	.word	0x20005390
 8015080:	20005398 	.word	0x20005398
 8015084:	200053a0 	.word	0x200053a0
 8015088:	200053a8 	.word	0x200053a8
 801508c:	200053b0 	.word	0x200053b0
 8015090:	200053b8 	.word	0x200053b8
 8015094:	200053c0 	.word	0x200053c0
 8015098:	200053c8 	.word	0x200053c8
 801509c:	200053d0 	.word	0x200053d0
 80150a0:	200053d8 	.word	0x200053d8
 80150a4:	20005320 	.word	0x20005320
 80150a8:	20005328 	.word	0x20005328
 80150ac:	20005330 	.word	0x20005330
 80150b0:	20005338 	.word	0x20005338

080150b4 <resetFrequencyInd>:
  switch(key){
 80150b4:	3801      	subs	r0, #1
 80150b6:	280b      	cmp	r0, #11
 80150b8:	d80a      	bhi.n	80150d0 <resetFrequencyInd+0x1c>
 80150ba:	e8df f000 	tbb	[pc, r0]
 80150be:	0e0a      	.short	0x0e0a
 80150c0:	1e1a1612 	.word	0x1e1a1612
 80150c4:	2e2a2622 	.word	0x2e2a2622
 80150c8:	0632      	.short	0x0632
          freq_12_ind = 0;
 80150ca:	4b18      	ldr	r3, [pc, #96]	; (801512c <resetFrequencyInd+0x78>)
 80150cc:	2200      	movs	r2, #0
 80150ce:	601a      	str	r2, [r3, #0]
 80150d0:	4770      	bx	lr
          freq_1_ind = 0;
 80150d2:	4b17      	ldr	r3, [pc, #92]	; (8015130 <resetFrequencyInd+0x7c>)
 80150d4:	2200      	movs	r2, #0
 80150d6:	601a      	str	r2, [r3, #0]
          break;
 80150d8:	4770      	bx	lr
          freq_2_ind = 0;
 80150da:	4b16      	ldr	r3, [pc, #88]	; (8015134 <resetFrequencyInd+0x80>)
 80150dc:	2200      	movs	r2, #0
 80150de:	601a      	str	r2, [r3, #0]
          break;
 80150e0:	4770      	bx	lr
          freq_3_ind = 0;
 80150e2:	4b15      	ldr	r3, [pc, #84]	; (8015138 <resetFrequencyInd+0x84>)
 80150e4:	2200      	movs	r2, #0
 80150e6:	601a      	str	r2, [r3, #0]
          break;
 80150e8:	4770      	bx	lr
          freq_4_ind = 0;
 80150ea:	4b14      	ldr	r3, [pc, #80]	; (801513c <resetFrequencyInd+0x88>)
 80150ec:	2200      	movs	r2, #0
 80150ee:	601a      	str	r2, [r3, #0]
          break;
 80150f0:	4770      	bx	lr
          freq_5_ind = 0;
 80150f2:	4b13      	ldr	r3, [pc, #76]	; (8015140 <resetFrequencyInd+0x8c>)
 80150f4:	2200      	movs	r2, #0
 80150f6:	601a      	str	r2, [r3, #0]
          break;
 80150f8:	4770      	bx	lr
          freq_6_ind = 0;
 80150fa:	4b12      	ldr	r3, [pc, #72]	; (8015144 <resetFrequencyInd+0x90>)
 80150fc:	2200      	movs	r2, #0
 80150fe:	601a      	str	r2, [r3, #0]
          break;
 8015100:	4770      	bx	lr
          freq_7_ind = 0;
 8015102:	4b11      	ldr	r3, [pc, #68]	; (8015148 <resetFrequencyInd+0x94>)
 8015104:	2200      	movs	r2, #0
 8015106:	601a      	str	r2, [r3, #0]
          break;
 8015108:	4770      	bx	lr
          freq_8_ind = 0;
 801510a:	4b10      	ldr	r3, [pc, #64]	; (801514c <resetFrequencyInd+0x98>)
 801510c:	2200      	movs	r2, #0
 801510e:	601a      	str	r2, [r3, #0]
          break;
 8015110:	4770      	bx	lr
          freq_9_ind = 0;
 8015112:	4b0f      	ldr	r3, [pc, #60]	; (8015150 <resetFrequencyInd+0x9c>)
 8015114:	2200      	movs	r2, #0
 8015116:	601a      	str	r2, [r3, #0]
          break;
 8015118:	4770      	bx	lr
          freq_10_ind = 0;
 801511a:	4b0e      	ldr	r3, [pc, #56]	; (8015154 <resetFrequencyInd+0xa0>)
 801511c:	2200      	movs	r2, #0
 801511e:	601a      	str	r2, [r3, #0]
          break;
 8015120:	4770      	bx	lr
          freq_11_ind = 0;
 8015122:	4b0d      	ldr	r3, [pc, #52]	; (8015158 <resetFrequencyInd+0xa4>)
 8015124:	2200      	movs	r2, #0
 8015126:	601a      	str	r2, [r3, #0]
          break;
 8015128:	4770      	bx	lr
 801512a:	bf00      	nop
 801512c:	2000533c 	.word	0x2000533c
 8015130:	2000534c 	.word	0x2000534c
 8015134:	2000535c 	.word	0x2000535c
 8015138:	2000536c 	.word	0x2000536c
 801513c:	2000537c 	.word	0x2000537c
 8015140:	2000538c 	.word	0x2000538c
 8015144:	2000539c 	.word	0x2000539c
 8015148:	200053ac 	.word	0x200053ac
 801514c:	200053bc 	.word	0x200053bc
 8015150:	200053cc 	.word	0x200053cc
 8015154:	20005318 	.word	0x20005318
 8015158:	2000532c 	.word	0x2000532c

0801515c <startRecording>:
  recordingOffsetPointer = recording;
 801515c:	4b07      	ldr	r3, [pc, #28]	; (801517c <startRecording+0x20>)
  recordingStatus = 1;
 801515e:	4808      	ldr	r0, [pc, #32]	; (8015180 <startRecording+0x24>)
  offset = 0;
 8015160:	4908      	ldr	r1, [pc, #32]	; (8015184 <startRecording+0x28>)
  recordingIndex = 0;
 8015162:	4a09      	ldr	r2, [pc, #36]	; (8015188 <startRecording+0x2c>)
void startRecording(void){
 8015164:	b410      	push	{r4}
  recordingOffsetPointer = recording;
 8015166:	4c09      	ldr	r4, [pc, #36]	; (801518c <startRecording+0x30>)
 8015168:	601c      	str	r4, [r3, #0]
  recordingStatus = 1;
 801516a:	2401      	movs	r4, #1
  offset = 0;
 801516c:	2300      	movs	r3, #0
  recordingStatus = 1;
 801516e:	7004      	strb	r4, [r0, #0]
  offset = 0;
 8015170:	600b      	str	r3, [r1, #0]
  recordingIndex = 0;
 8015172:	6013      	str	r3, [r2, #0]
}
 8015174:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015178:	4770      	bx	lr
 801517a:	bf00      	nop
 801517c:	2007d300 	.word	0x2007d300
 8015180:	20005404 	.word	0x20005404
 8015184:	200053f8 	.word	0x200053f8
 8015188:	20005400 	.word	0x20005400
 801518c:	20007bf8 	.word	0x20007bf8

08015190 <stopRecording>:
  recordingStatus = 0;
 8015190:	4b01      	ldr	r3, [pc, #4]	; (8015198 <stopRecording+0x8>)
 8015192:	2200      	movs	r2, #0
 8015194:	701a      	strb	r2, [r3, #0]
 8015196:	4770      	bx	lr
 8015198:	20005404 	.word	0x20005404

0801519c <stopPlayback>:
  setTable(currentTable);
 801519c:	4b20      	ldr	r3, [pc, #128]	; (8015220 <stopPlayback+0x84>)
  playbackStatus = 0;
 801519e:	4a21      	ldr	r2, [pc, #132]	; (8015224 <stopPlayback+0x88>)
    switch (table) {
 80151a0:	781b      	ldrb	r3, [r3, #0]
  playbackStatus = 0;
 80151a2:	2100      	movs	r1, #0
    switch (table) {
 80151a4:	3b51      	subs	r3, #81	; 0x51
  playbackStatus = 0;
 80151a6:	7011      	strb	r1, [r2, #0]
  switchOctave(octave);
 80151a8:	491f      	ldr	r1, [pc, #124]	; (8015228 <stopPlayback+0x8c>)
    switch (table) {
 80151aa:	2b06      	cmp	r3, #6
 80151ac:	d805      	bhi.n	80151ba <stopPlayback+0x1e>
 80151ae:	e8df f003 	tbb	[pc, r3]
 80151b2:	2218      	.short	0x2218
 80151b4:	04040e04 	.word	0x04040e04
 80151b8:	2c          	.byte	0x2c
 80151b9:	00          	.byte	0x00
  waveTable = desired_table;
 80151ba:	4a1c      	ldr	r2, [pc, #112]	; (801522c <stopPlayback+0x90>)
  max_table_index = size;
 80151bc:	4b1c      	ldr	r3, [pc, #112]	; (8015230 <stopPlayback+0x94>)
  switchOctave(octave);
 80151be:	7808      	ldrb	r0, [r1, #0]
  waveTable = desired_table;
 80151c0:	491c      	ldr	r1, [pc, #112]	; (8015234 <stopPlayback+0x98>)
 80151c2:	6011      	str	r1, [r2, #0]
  max_table_index = size;
 80151c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80151c8:	601a      	str	r2, [r3, #0]
  switchOctave(octave);
 80151ca:	f7fd bb15 	b.w	80127f8 <switchOctave>
  waveTable = desired_table;
 80151ce:	4a17      	ldr	r2, [pc, #92]	; (801522c <stopPlayback+0x90>)
  max_table_index = size;
 80151d0:	4b17      	ldr	r3, [pc, #92]	; (8015230 <stopPlayback+0x94>)
  switchOctave(octave);
 80151d2:	7808      	ldrb	r0, [r1, #0]
  waveTable = desired_table;
 80151d4:	4918      	ldr	r1, [pc, #96]	; (8015238 <stopPlayback+0x9c>)
 80151d6:	6011      	str	r1, [r2, #0]
  max_table_index = size;
 80151d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80151dc:	601a      	str	r2, [r3, #0]
  switchOctave(octave);
 80151de:	f7fd bb0b 	b.w	80127f8 <switchOctave>
  waveTable = desired_table;
 80151e2:	4a12      	ldr	r2, [pc, #72]	; (801522c <stopPlayback+0x90>)
  max_table_index = size;
 80151e4:	4b12      	ldr	r3, [pc, #72]	; (8015230 <stopPlayback+0x94>)
  switchOctave(octave);
 80151e6:	7808      	ldrb	r0, [r1, #0]
  waveTable = desired_table;
 80151e8:	4914      	ldr	r1, [pc, #80]	; (801523c <stopPlayback+0xa0>)
 80151ea:	6011      	str	r1, [r2, #0]
  max_table_index = size;
 80151ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80151f0:	601a      	str	r2, [r3, #0]
  switchOctave(octave);
 80151f2:	f7fd bb01 	b.w	80127f8 <switchOctave>
  waveTable = desired_table;
 80151f6:	4a0d      	ldr	r2, [pc, #52]	; (801522c <stopPlayback+0x90>)
  max_table_index = size;
 80151f8:	4b0d      	ldr	r3, [pc, #52]	; (8015230 <stopPlayback+0x94>)
  switchOctave(octave);
 80151fa:	7808      	ldrb	r0, [r1, #0]
  waveTable = desired_table;
 80151fc:	4910      	ldr	r1, [pc, #64]	; (8015240 <stopPlayback+0xa4>)
 80151fe:	6011      	str	r1, [r2, #0]
  max_table_index = size;
 8015200:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015204:	601a      	str	r2, [r3, #0]
  switchOctave(octave);
 8015206:	f7fd baf7 	b.w	80127f8 <switchOctave>
  waveTable = desired_table;
 801520a:	4a08      	ldr	r2, [pc, #32]	; (801522c <stopPlayback+0x90>)
  max_table_index = size;
 801520c:	4b08      	ldr	r3, [pc, #32]	; (8015230 <stopPlayback+0x94>)
  switchOctave(octave);
 801520e:	7808      	ldrb	r0, [r1, #0]
  waveTable = desired_table;
 8015210:	490c      	ldr	r1, [pc, #48]	; (8015244 <stopPlayback+0xa8>)
 8015212:	6011      	str	r1, [r2, #0]
  max_table_index = size;
 8015214:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015218:	601a      	str	r2, [r3, #0]
  switchOctave(octave);
 801521a:	f7fd baed 	b.w	80127f8 <switchOctave>
 801521e:	bf00      	nop
 8015220:	2007db14 	.word	0x2007db14
 8015224:	200053fc 	.word	0x200053fc
 8015228:	2000005c 	.word	0x2000005c
 801522c:	2007db0c 	.word	0x2007db0c
 8015230:	20000058 	.word	0x20000058
 8015234:	080830e4 	.word	0x080830e4
 8015238:	080834e4 	.word	0x080834e4
 801523c:	080832e4 	.word	0x080832e4
 8015240:	08082ce4 	.word	0x08082ce4
 8015244:	08082ee4 	.word	0x08082ee4

08015248 <startPlayback>:
  playbackStatus = 1;
 8015248:	4b01      	ldr	r3, [pc, #4]	; (8015250 <startPlayback+0x8>)
 801524a:	2201      	movs	r2, #1
 801524c:	701a      	strb	r2, [r3, #0]
 801524e:	4770      	bx	lr
 8015250:	200053fc 	.word	0x200053fc

08015254 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8015254:	f8df d034 	ldr.w	sp, [pc, #52]	; 801528c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8015258:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 801525a:	e003      	b.n	8015264 <LoopCopyDataInit>

0801525c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 801525c:	4b0c      	ldr	r3, [pc, #48]	; (8015290 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 801525e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8015260:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8015262:	3104      	adds	r1, #4

08015264 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8015264:	480b      	ldr	r0, [pc, #44]	; (8015294 <LoopForever+0xa>)
	ldr	r3, =_edata
 8015266:	4b0c      	ldr	r3, [pc, #48]	; (8015298 <LoopForever+0xe>)
	adds	r2, r0, r1
 8015268:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 801526a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 801526c:	d3f6      	bcc.n	801525c <CopyDataInit>
	ldr	r2, =_sbss
 801526e:	4a0b      	ldr	r2, [pc, #44]	; (801529c <LoopForever+0x12>)
	b	LoopFillZerobss
 8015270:	e002      	b.n	8015278 <LoopFillZerobss>

08015272 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8015272:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8015274:	f842 3b04 	str.w	r3, [r2], #4

08015278 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8015278:	4b09      	ldr	r3, [pc, #36]	; (80152a0 <LoopForever+0x16>)
	cmp	r2, r3
 801527a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 801527c:	d3f9      	bcc.n	8015272 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 801527e:	f7fc f987 	bl	8011590 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8015282:	f000 f8df 	bl	8015444 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8015286:	f7fb fba9 	bl	80109dc <main>

0801528a <LoopForever>:

LoopForever:
    b LoopForever
 801528a:	e7fe      	b.n	801528a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 801528c:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8015290:	08083cf8 	.word	0x08083cf8
	ldr	r0, =_sdata
 8015294:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8015298:	200000c4 	.word	0x200000c4
	ldr	r2, =_sbss
 801529c:	200000c8 	.word	0x200000c8
	ldr	r3, = _ebss
 80152a0:	2007db20 	.word	0x2007db20

080152a4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80152a4:	e7fe      	b.n	80152a4 <ADC1_IRQHandler>
	...

080152a8 <arm_shift_q15>:
 80152a8:	2900      	cmp	r1, #0
 80152aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152ae:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 80152b2:	da3d      	bge.n	8015330 <arm_shift_q15+0x88>
 80152b4:	f1be 0f00 	cmp.w	lr, #0
 80152b8:	d02b      	beq.n	8015312 <arm_shift_q15+0x6a>
 80152ba:	f1c1 0c00 	rsb	ip, r1, #0
 80152be:	f100 0608 	add.w	r6, r0, #8
 80152c2:	f102 0708 	add.w	r7, r2, #8
 80152c6:	46f0      	mov	r8, lr
 80152c8:	f936 5c08 	ldrsh.w	r5, [r6, #-8]
 80152cc:	f936 4c06 	ldrsh.w	r4, [r6, #-6]
 80152d0:	fa45 f50c 	asr.w	r5, r5, ip
 80152d4:	b2ad      	uxth	r5, r5
 80152d6:	fa44 f40c 	asr.w	r4, r4, ip
 80152da:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80152de:	f847 4c08 	str.w	r4, [r7, #-8]
 80152e2:	f936 5c04 	ldrsh.w	r5, [r6, #-4]
 80152e6:	f936 4c02 	ldrsh.w	r4, [r6, #-2]
 80152ea:	fa45 f50c 	asr.w	r5, r5, ip
 80152ee:	b2ad      	uxth	r5, r5
 80152f0:	fa44 f40c 	asr.w	r4, r4, ip
 80152f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80152f8:	f1b8 0801 	subs.w	r8, r8, #1
 80152fc:	f847 4c04 	str.w	r4, [r7, #-4]
 8015300:	f106 0608 	add.w	r6, r6, #8
 8015304:	f107 0708 	add.w	r7, r7, #8
 8015308:	d1de      	bne.n	80152c8 <arm_shift_q15+0x20>
 801530a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801530e:	4470      	add	r0, lr
 8015310:	4472      	add	r2, lr
 8015312:	f013 0303 	ands.w	r3, r3, #3
 8015316:	d009      	beq.n	801532c <arm_shift_q15+0x84>
 8015318:	4249      	negs	r1, r1
 801531a:	3a02      	subs	r2, #2
 801531c:	f930 4b02 	ldrsh.w	r4, [r0], #2
 8015320:	3b01      	subs	r3, #1
 8015322:	fa44 f401 	asr.w	r4, r4, r1
 8015326:	f822 4f02 	strh.w	r4, [r2, #2]!
 801532a:	d1f7      	bne.n	801531c <arm_shift_q15+0x74>
 801532c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015330:	f1be 0f00 	cmp.w	lr, #0
 8015334:	d02f      	beq.n	8015396 <arm_shift_q15+0xee>
 8015336:	f100 0608 	add.w	r6, r0, #8
 801533a:	f102 0708 	add.w	r7, r2, #8
 801533e:	46f4      	mov	ip, lr
 8015340:	f936 4c08 	ldrsh.w	r4, [r6, #-8]
 8015344:	f936 8c06 	ldrsh.w	r8, [r6, #-6]
 8015348:	408c      	lsls	r4, r1
 801534a:	f304 040f 	ssat	r4, #16, r4
 801534e:	b2a5      	uxth	r5, r4
 8015350:	fa08 f401 	lsl.w	r4, r8, r1
 8015354:	f304 040f 	ssat	r4, #16, r4
 8015358:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 801535c:	f847 4c08 	str.w	r4, [r7, #-8]
 8015360:	f936 4c04 	ldrsh.w	r4, [r6, #-4]
 8015364:	f936 8c02 	ldrsh.w	r8, [r6, #-2]
 8015368:	408c      	lsls	r4, r1
 801536a:	f304 040f 	ssat	r4, #16, r4
 801536e:	b2a5      	uxth	r5, r4
 8015370:	f1bc 0c01 	subs.w	ip, ip, #1
 8015374:	fa08 f401 	lsl.w	r4, r8, r1
 8015378:	f304 040f 	ssat	r4, #16, r4
 801537c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8015380:	f847 4c04 	str.w	r4, [r7, #-4]
 8015384:	f106 0608 	add.w	r6, r6, #8
 8015388:	f107 0708 	add.w	r7, r7, #8
 801538c:	d1d8      	bne.n	8015340 <arm_shift_q15+0x98>
 801538e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8015392:	4470      	add	r0, lr
 8015394:	4472      	add	r2, lr
 8015396:	f013 0303 	ands.w	r3, r3, #3
 801539a:	d0c7      	beq.n	801532c <arm_shift_q15+0x84>
 801539c:	3a02      	subs	r2, #2
 801539e:	f930 4b02 	ldrsh.w	r4, [r0], #2
 80153a2:	3b01      	subs	r3, #1
 80153a4:	fa04 f401 	lsl.w	r4, r4, r1
 80153a8:	f304 040f 	ssat	r4, #16, r4
 80153ac:	f822 4f02 	strh.w	r4, [r2, #2]!
 80153b0:	d1f5      	bne.n	801539e <arm_shift_q15+0xf6>
 80153b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153b6:	bf00      	nop

080153b8 <arm_dot_prod_f32>:
 80153b8:	b4f0      	push	{r4, r5, r6, r7}
 80153ba:	0897      	lsrs	r7, r2, #2
 80153bc:	eddf 5a20 	vldr	s11, [pc, #128]	; 8015440 <arm_dot_prod_f32+0x88>
 80153c0:	d02d      	beq.n	801541e <arm_dot_prod_f32+0x66>
 80153c2:	f100 0510 	add.w	r5, r0, #16
 80153c6:	f101 0410 	add.w	r4, r1, #16
 80153ca:	463e      	mov	r6, r7
 80153cc:	ed54 7a04 	vldr	s15, [r4, #-16]
 80153d0:	ed15 6a04 	vldr	s12, [r5, #-16]
 80153d4:	ed55 6a03 	vldr	s13, [r5, #-12]
 80153d8:	ed54 3a03 	vldr	s7, [r4, #-12]
 80153dc:	ed15 7a02 	vldr	s14, [r5, #-8]
 80153e0:	ed14 4a02 	vldr	s8, [r4, #-8]
 80153e4:	ed15 5a01 	vldr	s10, [r5, #-4]
 80153e8:	ed54 4a01 	vldr	s9, [r4, #-4]
 80153ec:	ee26 6a27 	vmul.f32	s12, s12, s15
 80153f0:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80153f4:	ee76 7a25 	vadd.f32	s15, s12, s11
 80153f8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80153fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015400:	ee65 5a24 	vmul.f32	s11, s10, s9
 8015404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015408:	3e01      	subs	r6, #1
 801540a:	f105 0510 	add.w	r5, r5, #16
 801540e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8015412:	f104 0410 	add.w	r4, r4, #16
 8015416:	d1d9      	bne.n	80153cc <arm_dot_prod_f32+0x14>
 8015418:	013f      	lsls	r7, r7, #4
 801541a:	4438      	add	r0, r7
 801541c:	4439      	add	r1, r7
 801541e:	f012 0203 	ands.w	r2, r2, #3
 8015422:	d009      	beq.n	8015438 <arm_dot_prod_f32+0x80>
 8015424:	ecf0 7a01 	vldmia	r0!, {s15}
 8015428:	ecb1 7a01 	vldmia	r1!, {s14}
 801542c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015430:	3a01      	subs	r2, #1
 8015432:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8015436:	d1f5      	bne.n	8015424 <arm_dot_prod_f32+0x6c>
 8015438:	edc3 5a00 	vstr	s11, [r3]
 801543c:	bcf0      	pop	{r4, r5, r6, r7}
 801543e:	4770      	bx	lr
 8015440:	00000000 	.word	0x00000000

08015444 <__libc_init_array>:
 8015444:	b570      	push	{r4, r5, r6, lr}
 8015446:	4e0d      	ldr	r6, [pc, #52]	; (801547c <__libc_init_array+0x38>)
 8015448:	4c0d      	ldr	r4, [pc, #52]	; (8015480 <__libc_init_array+0x3c>)
 801544a:	1ba4      	subs	r4, r4, r6
 801544c:	10a4      	asrs	r4, r4, #2
 801544e:	2500      	movs	r5, #0
 8015450:	42a5      	cmp	r5, r4
 8015452:	d109      	bne.n	8015468 <__libc_init_array+0x24>
 8015454:	4e0b      	ldr	r6, [pc, #44]	; (8015484 <__libc_init_array+0x40>)
 8015456:	4c0c      	ldr	r4, [pc, #48]	; (8015488 <__libc_init_array+0x44>)
 8015458:	f001 fe3a 	bl	80170d0 <_init>
 801545c:	1ba4      	subs	r4, r4, r6
 801545e:	10a4      	asrs	r4, r4, #2
 8015460:	2500      	movs	r5, #0
 8015462:	42a5      	cmp	r5, r4
 8015464:	d105      	bne.n	8015472 <__libc_init_array+0x2e>
 8015466:	bd70      	pop	{r4, r5, r6, pc}
 8015468:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801546c:	4798      	blx	r3
 801546e:	3501      	adds	r5, #1
 8015470:	e7ee      	b.n	8015450 <__libc_init_array+0xc>
 8015472:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015476:	4798      	blx	r3
 8015478:	3501      	adds	r5, #1
 801547a:	e7f2      	b.n	8015462 <__libc_init_array+0x1e>
 801547c:	08083cf0 	.word	0x08083cf0
 8015480:	08083cf0 	.word	0x08083cf0
 8015484:	08083cf0 	.word	0x08083cf0
 8015488:	08083cf4 	.word	0x08083cf4

0801548c <memcpy>:
 801548c:	b510      	push	{r4, lr}
 801548e:	1e43      	subs	r3, r0, #1
 8015490:	440a      	add	r2, r1
 8015492:	4291      	cmp	r1, r2
 8015494:	d100      	bne.n	8015498 <memcpy+0xc>
 8015496:	bd10      	pop	{r4, pc}
 8015498:	f811 4b01 	ldrb.w	r4, [r1], #1
 801549c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80154a0:	e7f7      	b.n	8015492 <memcpy+0x6>

080154a2 <memset>:
 80154a2:	4402      	add	r2, r0
 80154a4:	4603      	mov	r3, r0
 80154a6:	4293      	cmp	r3, r2
 80154a8:	d100      	bne.n	80154ac <memset+0xa>
 80154aa:	4770      	bx	lr
 80154ac:	f803 1b01 	strb.w	r1, [r3], #1
 80154b0:	e7f9      	b.n	80154a6 <memset+0x4>

080154b2 <strncpy>:
 80154b2:	b570      	push	{r4, r5, r6, lr}
 80154b4:	4604      	mov	r4, r0
 80154b6:	b902      	cbnz	r2, 80154ba <strncpy+0x8>
 80154b8:	bd70      	pop	{r4, r5, r6, pc}
 80154ba:	4623      	mov	r3, r4
 80154bc:	f811 5b01 	ldrb.w	r5, [r1], #1
 80154c0:	f803 5b01 	strb.w	r5, [r3], #1
 80154c4:	1e56      	subs	r6, r2, #1
 80154c6:	b91d      	cbnz	r5, 80154d0 <strncpy+0x1e>
 80154c8:	4414      	add	r4, r2
 80154ca:	42a3      	cmp	r3, r4
 80154cc:	d103      	bne.n	80154d6 <strncpy+0x24>
 80154ce:	bd70      	pop	{r4, r5, r6, pc}
 80154d0:	461c      	mov	r4, r3
 80154d2:	4632      	mov	r2, r6
 80154d4:	e7ef      	b.n	80154b6 <strncpy+0x4>
 80154d6:	f803 5b01 	strb.w	r5, [r3], #1
 80154da:	e7f6      	b.n	80154ca <strncpy+0x18>
 80154dc:	0000      	movs	r0, r0
	...

080154e0 <cos>:
 80154e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80154e2:	ec51 0b10 	vmov	r0, r1, d0
 80154e6:	4a1e      	ldr	r2, [pc, #120]	; (8015560 <cos+0x80>)
 80154e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80154ec:	4293      	cmp	r3, r2
 80154ee:	dc06      	bgt.n	80154fe <cos+0x1e>
 80154f0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8015558 <cos+0x78>
 80154f4:	f000 ffc8 	bl	8016488 <__kernel_cos>
 80154f8:	ec51 0b10 	vmov	r0, r1, d0
 80154fc:	e007      	b.n	801550e <cos+0x2e>
 80154fe:	4a19      	ldr	r2, [pc, #100]	; (8015564 <cos+0x84>)
 8015500:	4293      	cmp	r3, r2
 8015502:	dd09      	ble.n	8015518 <cos+0x38>
 8015504:	ee10 2a10 	vmov	r2, s0
 8015508:	460b      	mov	r3, r1
 801550a:	f7ea fe7d 	bl	8000208 <__aeabi_dsub>
 801550e:	ec41 0b10 	vmov	d0, r0, r1
 8015512:	b005      	add	sp, #20
 8015514:	f85d fb04 	ldr.w	pc, [sp], #4
 8015518:	4668      	mov	r0, sp
 801551a:	f000 fc3d 	bl	8015d98 <__ieee754_rem_pio2>
 801551e:	f000 0003 	and.w	r0, r0, #3
 8015522:	2801      	cmp	r0, #1
 8015524:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015528:	ed9d 0b00 	vldr	d0, [sp]
 801552c:	d007      	beq.n	801553e <cos+0x5e>
 801552e:	2802      	cmp	r0, #2
 8015530:	d00e      	beq.n	8015550 <cos+0x70>
 8015532:	2800      	cmp	r0, #0
 8015534:	d0de      	beq.n	80154f4 <cos+0x14>
 8015536:	2001      	movs	r0, #1
 8015538:	f001 fbde 	bl	8016cf8 <__kernel_sin>
 801553c:	e7dc      	b.n	80154f8 <cos+0x18>
 801553e:	f001 fbdb 	bl	8016cf8 <__kernel_sin>
 8015542:	ec53 2b10 	vmov	r2, r3, d0
 8015546:	ee10 0a10 	vmov	r0, s0
 801554a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801554e:	e7de      	b.n	801550e <cos+0x2e>
 8015550:	f000 ff9a 	bl	8016488 <__kernel_cos>
 8015554:	e7f5      	b.n	8015542 <cos+0x62>
 8015556:	bf00      	nop
	...
 8015560:	3fe921fb 	.word	0x3fe921fb
 8015564:	7fefffff 	.word	0x7fefffff

08015568 <round>:
 8015568:	ec51 0b10 	vmov	r0, r1, d0
 801556c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801556e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8015572:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8015576:	2c13      	cmp	r4, #19
 8015578:	460b      	mov	r3, r1
 801557a:	460f      	mov	r7, r1
 801557c:	dc17      	bgt.n	80155ae <round+0x46>
 801557e:	2c00      	cmp	r4, #0
 8015580:	da09      	bge.n	8015596 <round+0x2e>
 8015582:	3401      	adds	r4, #1
 8015584:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8015588:	d103      	bne.n	8015592 <round+0x2a>
 801558a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801558e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015592:	2100      	movs	r1, #0
 8015594:	e028      	b.n	80155e8 <round+0x80>
 8015596:	4a16      	ldr	r2, [pc, #88]	; (80155f0 <round+0x88>)
 8015598:	4122      	asrs	r2, r4
 801559a:	4211      	tst	r1, r2
 801559c:	d100      	bne.n	80155a0 <round+0x38>
 801559e:	b180      	cbz	r0, 80155c2 <round+0x5a>
 80155a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80155a4:	4123      	asrs	r3, r4
 80155a6:	443b      	add	r3, r7
 80155a8:	ea23 0302 	bic.w	r3, r3, r2
 80155ac:	e7f1      	b.n	8015592 <round+0x2a>
 80155ae:	2c33      	cmp	r4, #51	; 0x33
 80155b0:	dd0a      	ble.n	80155c8 <round+0x60>
 80155b2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80155b6:	d104      	bne.n	80155c2 <round+0x5a>
 80155b8:	ee10 2a10 	vmov	r2, s0
 80155bc:	460b      	mov	r3, r1
 80155be:	f7ea fe25 	bl	800020c <__adddf3>
 80155c2:	ec41 0b10 	vmov	d0, r0, r1
 80155c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155c8:	f2a5 4213 	subw	r2, r5, #1043	; 0x413
 80155cc:	f04f 35ff 	mov.w	r5, #4294967295
 80155d0:	40d5      	lsrs	r5, r2
 80155d2:	4228      	tst	r0, r5
 80155d4:	d0f5      	beq.n	80155c2 <round+0x5a>
 80155d6:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80155da:	2201      	movs	r2, #1
 80155dc:	40a2      	lsls	r2, r4
 80155de:	1812      	adds	r2, r2, r0
 80155e0:	bf28      	it	cs
 80155e2:	3301      	addcs	r3, #1
 80155e4:	ea22 0105 	bic.w	r1, r2, r5
 80155e8:	4608      	mov	r0, r1
 80155ea:	4619      	mov	r1, r3
 80155ec:	e7e9      	b.n	80155c2 <round+0x5a>
 80155ee:	bf00      	nop
 80155f0:	000fffff 	.word	0x000fffff
 80155f4:	00000000 	.word	0x00000000

080155f8 <sin>:
 80155f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80155fa:	ec51 0b10 	vmov	r0, r1, d0
 80155fe:	4a20      	ldr	r2, [pc, #128]	; (8015680 <sin+0x88>)
 8015600:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015604:	4293      	cmp	r3, r2
 8015606:	dc07      	bgt.n	8015618 <sin+0x20>
 8015608:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8015678 <sin+0x80>
 801560c:	2000      	movs	r0, #0
 801560e:	f001 fb73 	bl	8016cf8 <__kernel_sin>
 8015612:	ec51 0b10 	vmov	r0, r1, d0
 8015616:	e007      	b.n	8015628 <sin+0x30>
 8015618:	4a1a      	ldr	r2, [pc, #104]	; (8015684 <sin+0x8c>)
 801561a:	4293      	cmp	r3, r2
 801561c:	dd09      	ble.n	8015632 <sin+0x3a>
 801561e:	ee10 2a10 	vmov	r2, s0
 8015622:	460b      	mov	r3, r1
 8015624:	f7ea fdf0 	bl	8000208 <__aeabi_dsub>
 8015628:	ec41 0b10 	vmov	d0, r0, r1
 801562c:	b005      	add	sp, #20
 801562e:	f85d fb04 	ldr.w	pc, [sp], #4
 8015632:	4668      	mov	r0, sp
 8015634:	f000 fbb0 	bl	8015d98 <__ieee754_rem_pio2>
 8015638:	f000 0003 	and.w	r0, r0, #3
 801563c:	2801      	cmp	r0, #1
 801563e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015642:	ed9d 0b00 	vldr	d0, [sp]
 8015646:	d004      	beq.n	8015652 <sin+0x5a>
 8015648:	2802      	cmp	r0, #2
 801564a:	d005      	beq.n	8015658 <sin+0x60>
 801564c:	b970      	cbnz	r0, 801566c <sin+0x74>
 801564e:	2001      	movs	r0, #1
 8015650:	e7dd      	b.n	801560e <sin+0x16>
 8015652:	f000 ff19 	bl	8016488 <__kernel_cos>
 8015656:	e7dc      	b.n	8015612 <sin+0x1a>
 8015658:	2001      	movs	r0, #1
 801565a:	f001 fb4d 	bl	8016cf8 <__kernel_sin>
 801565e:	ec53 2b10 	vmov	r2, r3, d0
 8015662:	ee10 0a10 	vmov	r0, s0
 8015666:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801566a:	e7dd      	b.n	8015628 <sin+0x30>
 801566c:	f000 ff0c 	bl	8016488 <__kernel_cos>
 8015670:	e7f5      	b.n	801565e <sin+0x66>
 8015672:	bf00      	nop
 8015674:	f3af 8000 	nop.w
	...
 8015680:	3fe921fb 	.word	0x3fe921fb
 8015684:	7fefffff 	.word	0x7fefffff

08015688 <acos>:
 8015688:	b5f0      	push	{r4, r5, r6, r7, lr}
 801568a:	ed2d 8b02 	vpush	{d8}
 801568e:	4e26      	ldr	r6, [pc, #152]	; (8015728 <acos+0xa0>)
 8015690:	b08b      	sub	sp, #44	; 0x2c
 8015692:	ec55 4b10 	vmov	r4, r5, d0
 8015696:	f000 f923 	bl	80158e0 <__ieee754_acos>
 801569a:	f996 3000 	ldrsb.w	r3, [r6]
 801569e:	eeb0 8a40 	vmov.f32	s16, s0
 80156a2:	eef0 8a60 	vmov.f32	s17, s1
 80156a6:	3301      	adds	r3, #1
 80156a8:	d036      	beq.n	8015718 <acos+0x90>
 80156aa:	4622      	mov	r2, r4
 80156ac:	462b      	mov	r3, r5
 80156ae:	4620      	mov	r0, r4
 80156b0:	4629      	mov	r1, r5
 80156b2:	f7eb f9f7 	bl	8000aa4 <__aeabi_dcmpun>
 80156b6:	4607      	mov	r7, r0
 80156b8:	bb70      	cbnz	r0, 8015718 <acos+0x90>
 80156ba:	ec45 4b10 	vmov	d0, r4, r5
 80156be:	f001 fbd5 	bl	8016e6c <fabs>
 80156c2:	2200      	movs	r2, #0
 80156c4:	4b19      	ldr	r3, [pc, #100]	; (801572c <acos+0xa4>)
 80156c6:	ec51 0b10 	vmov	r0, r1, d0
 80156ca:	f7eb f9e1 	bl	8000a90 <__aeabi_dcmpgt>
 80156ce:	b318      	cbz	r0, 8015718 <acos+0x90>
 80156d0:	2301      	movs	r3, #1
 80156d2:	9300      	str	r3, [sp, #0]
 80156d4:	4816      	ldr	r0, [pc, #88]	; (8015730 <acos+0xa8>)
 80156d6:	4b17      	ldr	r3, [pc, #92]	; (8015734 <acos+0xac>)
 80156d8:	9301      	str	r3, [sp, #4]
 80156da:	9708      	str	r7, [sp, #32]
 80156dc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80156e0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80156e4:	f001 fc54 	bl	8016f90 <nan>
 80156e8:	f996 3000 	ldrsb.w	r3, [r6]
 80156ec:	2b02      	cmp	r3, #2
 80156ee:	ed8d 0b06 	vstr	d0, [sp, #24]
 80156f2:	d104      	bne.n	80156fe <acos+0x76>
 80156f4:	f001 fce6 	bl	80170c4 <__errno>
 80156f8:	2321      	movs	r3, #33	; 0x21
 80156fa:	6003      	str	r3, [r0, #0]
 80156fc:	e004      	b.n	8015708 <acos+0x80>
 80156fe:	4668      	mov	r0, sp
 8015700:	f001 fc42 	bl	8016f88 <matherr>
 8015704:	2800      	cmp	r0, #0
 8015706:	d0f5      	beq.n	80156f4 <acos+0x6c>
 8015708:	9b08      	ldr	r3, [sp, #32]
 801570a:	b11b      	cbz	r3, 8015714 <acos+0x8c>
 801570c:	f001 fcda 	bl	80170c4 <__errno>
 8015710:	9b08      	ldr	r3, [sp, #32]
 8015712:	6003      	str	r3, [r0, #0]
 8015714:	ed9d 8b06 	vldr	d8, [sp, #24]
 8015718:	eeb0 0a48 	vmov.f32	s0, s16
 801571c:	eef0 0a68 	vmov.f32	s1, s17
 8015720:	b00b      	add	sp, #44	; 0x2c
 8015722:	ecbd 8b02 	vpop	{d8}
 8015726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015728:	2000005e 	.word	0x2000005e
 801572c:	3ff00000 	.word	0x3ff00000
 8015730:	08083af0 	.word	0x08083af0
 8015734:	08083ae2 	.word	0x08083ae2

08015738 <sqrt>:
 8015738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801573c:	ed2d 8b02 	vpush	{d8}
 8015740:	b08b      	sub	sp, #44	; 0x2c
 8015742:	ec55 4b10 	vmov	r4, r5, d0
 8015746:	f000 fd19 	bl	801617c <__ieee754_sqrt>
 801574a:	4b26      	ldr	r3, [pc, #152]	; (80157e4 <sqrt+0xac>)
 801574c:	eeb0 8a40 	vmov.f32	s16, s0
 8015750:	eef0 8a60 	vmov.f32	s17, s1
 8015754:	f993 6000 	ldrsb.w	r6, [r3]
 8015758:	1c73      	adds	r3, r6, #1
 801575a:	d02a      	beq.n	80157b2 <sqrt+0x7a>
 801575c:	4622      	mov	r2, r4
 801575e:	462b      	mov	r3, r5
 8015760:	4620      	mov	r0, r4
 8015762:	4629      	mov	r1, r5
 8015764:	f7eb f99e 	bl	8000aa4 <__aeabi_dcmpun>
 8015768:	4607      	mov	r7, r0
 801576a:	bb10      	cbnz	r0, 80157b2 <sqrt+0x7a>
 801576c:	f04f 0800 	mov.w	r8, #0
 8015770:	f04f 0900 	mov.w	r9, #0
 8015774:	4642      	mov	r2, r8
 8015776:	464b      	mov	r3, r9
 8015778:	4620      	mov	r0, r4
 801577a:	4629      	mov	r1, r5
 801577c:	f7eb f96a 	bl	8000a54 <__aeabi_dcmplt>
 8015780:	b1b8      	cbz	r0, 80157b2 <sqrt+0x7a>
 8015782:	2301      	movs	r3, #1
 8015784:	9300      	str	r3, [sp, #0]
 8015786:	4b18      	ldr	r3, [pc, #96]	; (80157e8 <sqrt+0xb0>)
 8015788:	9301      	str	r3, [sp, #4]
 801578a:	9708      	str	r7, [sp, #32]
 801578c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8015790:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8015794:	b9b6      	cbnz	r6, 80157c4 <sqrt+0x8c>
 8015796:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801579a:	4668      	mov	r0, sp
 801579c:	f001 fbf4 	bl	8016f88 <matherr>
 80157a0:	b1d0      	cbz	r0, 80157d8 <sqrt+0xa0>
 80157a2:	9b08      	ldr	r3, [sp, #32]
 80157a4:	b11b      	cbz	r3, 80157ae <sqrt+0x76>
 80157a6:	f001 fc8d 	bl	80170c4 <__errno>
 80157aa:	9b08      	ldr	r3, [sp, #32]
 80157ac:	6003      	str	r3, [r0, #0]
 80157ae:	ed9d 8b06 	vldr	d8, [sp, #24]
 80157b2:	eeb0 0a48 	vmov.f32	s0, s16
 80157b6:	eef0 0a68 	vmov.f32	s1, s17
 80157ba:	b00b      	add	sp, #44	; 0x2c
 80157bc:	ecbd 8b02 	vpop	{d8}
 80157c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80157c4:	4642      	mov	r2, r8
 80157c6:	464b      	mov	r3, r9
 80157c8:	4640      	mov	r0, r8
 80157ca:	4649      	mov	r1, r9
 80157cc:	f7ea fffa 	bl	80007c4 <__aeabi_ddiv>
 80157d0:	2e02      	cmp	r6, #2
 80157d2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80157d6:	d1e0      	bne.n	801579a <sqrt+0x62>
 80157d8:	f001 fc74 	bl	80170c4 <__errno>
 80157dc:	2321      	movs	r3, #33	; 0x21
 80157de:	6003      	str	r3, [r0, #0]
 80157e0:	e7df      	b.n	80157a2 <sqrt+0x6a>
 80157e2:	bf00      	nop
 80157e4:	2000005e 	.word	0x2000005e
 80157e8:	08083ae7 	.word	0x08083ae7

080157ec <expf>:
 80157ec:	b530      	push	{r4, r5, lr}
 80157ee:	ed2d 8b02 	vpush	{d8}
 80157f2:	4d35      	ldr	r5, [pc, #212]	; (80158c8 <expf+0xdc>)
 80157f4:	b08b      	sub	sp, #44	; 0x2c
 80157f6:	eeb0 8a40 	vmov.f32	s16, s0
 80157fa:	f000 fd6f 	bl	80162dc <__ieee754_expf>
 80157fe:	f995 3000 	ldrsb.w	r3, [r5]
 8015802:	3301      	adds	r3, #1
 8015804:	ee10 4a10 	vmov	r4, s0
 8015808:	d030      	beq.n	801586c <expf+0x80>
 801580a:	eeb0 0a48 	vmov.f32	s0, s16
 801580e:	f001 fc41 	bl	8017094 <finitef>
 8015812:	b358      	cbz	r0, 801586c <expf+0x80>
 8015814:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80158cc <expf+0xe0>
 8015818:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801581c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015820:	dd35      	ble.n	801588e <expf+0xa2>
 8015822:	2303      	movs	r3, #3
 8015824:	9300      	str	r3, [sp, #0]
 8015826:	4b2a      	ldr	r3, [pc, #168]	; (80158d0 <expf+0xe4>)
 8015828:	9301      	str	r3, [sp, #4]
 801582a:	ee18 0a10 	vmov	r0, s16
 801582e:	2300      	movs	r3, #0
 8015830:	9308      	str	r3, [sp, #32]
 8015832:	f7ea fe49 	bl	80004c8 <__aeabi_f2d>
 8015836:	f995 3000 	ldrsb.w	r3, [r5]
 801583a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801583e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015842:	b9cb      	cbnz	r3, 8015878 <expf+0x8c>
 8015844:	4b23      	ldr	r3, [pc, #140]	; (80158d4 <expf+0xe8>)
 8015846:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801584a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801584e:	4668      	mov	r0, sp
 8015850:	f001 fb9a 	bl	8016f88 <matherr>
 8015854:	b1b0      	cbz	r0, 8015884 <expf+0x98>
 8015856:	9b08      	ldr	r3, [sp, #32]
 8015858:	b11b      	cbz	r3, 8015862 <expf+0x76>
 801585a:	f001 fc33 	bl	80170c4 <__errno>
 801585e:	9b08      	ldr	r3, [sp, #32]
 8015860:	6003      	str	r3, [r0, #0]
 8015862:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015866:	f7eb f97b 	bl	8000b60 <__aeabi_d2f>
 801586a:	4604      	mov	r4, r0
 801586c:	ee00 4a10 	vmov	s0, r4
 8015870:	b00b      	add	sp, #44	; 0x2c
 8015872:	ecbd 8b02 	vpop	{d8}
 8015876:	bd30      	pop	{r4, r5, pc}
 8015878:	4917      	ldr	r1, [pc, #92]	; (80158d8 <expf+0xec>)
 801587a:	2000      	movs	r0, #0
 801587c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015880:	2b02      	cmp	r3, #2
 8015882:	d1e4      	bne.n	801584e <expf+0x62>
 8015884:	f001 fc1e 	bl	80170c4 <__errno>
 8015888:	2322      	movs	r3, #34	; 0x22
 801588a:	6003      	str	r3, [r0, #0]
 801588c:	e7e3      	b.n	8015856 <expf+0x6a>
 801588e:	eddf 7a13 	vldr	s15, [pc, #76]	; 80158dc <expf+0xf0>
 8015892:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8015896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801589a:	d5e7      	bpl.n	801586c <expf+0x80>
 801589c:	2304      	movs	r3, #4
 801589e:	9300      	str	r3, [sp, #0]
 80158a0:	4b0b      	ldr	r3, [pc, #44]	; (80158d0 <expf+0xe4>)
 80158a2:	9301      	str	r3, [sp, #4]
 80158a4:	ee18 0a10 	vmov	r0, s16
 80158a8:	2300      	movs	r3, #0
 80158aa:	9308      	str	r3, [sp, #32]
 80158ac:	f7ea fe0c 	bl	80004c8 <__aeabi_f2d>
 80158b0:	2300      	movs	r3, #0
 80158b2:	2200      	movs	r2, #0
 80158b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80158b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80158bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80158c0:	f995 3000 	ldrsb.w	r3, [r5]
 80158c4:	e7dc      	b.n	8015880 <expf+0x94>
 80158c6:	bf00      	nop
 80158c8:	2000005e 	.word	0x2000005e
 80158cc:	42b17180 	.word	0x42b17180
 80158d0:	08083aec 	.word	0x08083aec
 80158d4:	47efffff 	.word	0x47efffff
 80158d8:	7ff00000 	.word	0x7ff00000
 80158dc:	c2cff1b5 	.word	0xc2cff1b5

080158e0 <__ieee754_acos>:
 80158e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158e4:	ec55 4b10 	vmov	r4, r5, d0
 80158e8:	49b7      	ldr	r1, [pc, #732]	; (8015bc8 <__ieee754_acos+0x2e8>)
 80158ea:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80158ee:	428b      	cmp	r3, r1
 80158f0:	dd1b      	ble.n	801592a <__ieee754_acos+0x4a>
 80158f2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 80158f6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80158fa:	4323      	orrs	r3, r4
 80158fc:	d109      	bne.n	8015912 <__ieee754_acos+0x32>
 80158fe:	2d00      	cmp	r5, #0
 8015900:	f300 8211 	bgt.w	8015d26 <__ieee754_acos+0x446>
 8015904:	a196      	add	r1, pc, #600	; (adr r1, 8015b60 <__ieee754_acos+0x280>)
 8015906:	e9d1 0100 	ldrd	r0, r1, [r1]
 801590a:	ec41 0b10 	vmov	d0, r0, r1
 801590e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015912:	ee10 2a10 	vmov	r2, s0
 8015916:	462b      	mov	r3, r5
 8015918:	4620      	mov	r0, r4
 801591a:	4629      	mov	r1, r5
 801591c:	f7ea fc74 	bl	8000208 <__aeabi_dsub>
 8015920:	4602      	mov	r2, r0
 8015922:	460b      	mov	r3, r1
 8015924:	f7ea ff4e 	bl	80007c4 <__aeabi_ddiv>
 8015928:	e7ef      	b.n	801590a <__ieee754_acos+0x2a>
 801592a:	49a8      	ldr	r1, [pc, #672]	; (8015bcc <__ieee754_acos+0x2ec>)
 801592c:	428b      	cmp	r3, r1
 801592e:	f300 8087 	bgt.w	8015a40 <__ieee754_acos+0x160>
 8015932:	4aa7      	ldr	r2, [pc, #668]	; (8015bd0 <__ieee754_acos+0x2f0>)
 8015934:	4293      	cmp	r3, r2
 8015936:	f340 81f9 	ble.w	8015d2c <__ieee754_acos+0x44c>
 801593a:	ee10 2a10 	vmov	r2, s0
 801593e:	ee10 0a10 	vmov	r0, s0
 8015942:	462b      	mov	r3, r5
 8015944:	4629      	mov	r1, r5
 8015946:	f7ea fe13 	bl	8000570 <__aeabi_dmul>
 801594a:	a387      	add	r3, pc, #540	; (adr r3, 8015b68 <__ieee754_acos+0x288>)
 801594c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015950:	4606      	mov	r6, r0
 8015952:	460f      	mov	r7, r1
 8015954:	f7ea fe0c 	bl	8000570 <__aeabi_dmul>
 8015958:	a385      	add	r3, pc, #532	; (adr r3, 8015b70 <__ieee754_acos+0x290>)
 801595a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801595e:	f7ea fc55 	bl	800020c <__adddf3>
 8015962:	4632      	mov	r2, r6
 8015964:	463b      	mov	r3, r7
 8015966:	f7ea fe03 	bl	8000570 <__aeabi_dmul>
 801596a:	a383      	add	r3, pc, #524	; (adr r3, 8015b78 <__ieee754_acos+0x298>)
 801596c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015970:	f7ea fc4a 	bl	8000208 <__aeabi_dsub>
 8015974:	4632      	mov	r2, r6
 8015976:	463b      	mov	r3, r7
 8015978:	f7ea fdfa 	bl	8000570 <__aeabi_dmul>
 801597c:	a380      	add	r3, pc, #512	; (adr r3, 8015b80 <__ieee754_acos+0x2a0>)
 801597e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015982:	f7ea fc43 	bl	800020c <__adddf3>
 8015986:	4632      	mov	r2, r6
 8015988:	463b      	mov	r3, r7
 801598a:	f7ea fdf1 	bl	8000570 <__aeabi_dmul>
 801598e:	a37e      	add	r3, pc, #504	; (adr r3, 8015b88 <__ieee754_acos+0x2a8>)
 8015990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015994:	f7ea fc38 	bl	8000208 <__aeabi_dsub>
 8015998:	4632      	mov	r2, r6
 801599a:	463b      	mov	r3, r7
 801599c:	f7ea fde8 	bl	8000570 <__aeabi_dmul>
 80159a0:	a37b      	add	r3, pc, #492	; (adr r3, 8015b90 <__ieee754_acos+0x2b0>)
 80159a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159a6:	f7ea fc31 	bl	800020c <__adddf3>
 80159aa:	4632      	mov	r2, r6
 80159ac:	463b      	mov	r3, r7
 80159ae:	f7ea fddf 	bl	8000570 <__aeabi_dmul>
 80159b2:	a379      	add	r3, pc, #484	; (adr r3, 8015b98 <__ieee754_acos+0x2b8>)
 80159b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159b8:	4680      	mov	r8, r0
 80159ba:	4689      	mov	r9, r1
 80159bc:	4630      	mov	r0, r6
 80159be:	4639      	mov	r1, r7
 80159c0:	f7ea fdd6 	bl	8000570 <__aeabi_dmul>
 80159c4:	a376      	add	r3, pc, #472	; (adr r3, 8015ba0 <__ieee754_acos+0x2c0>)
 80159c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159ca:	f7ea fc1d 	bl	8000208 <__aeabi_dsub>
 80159ce:	4632      	mov	r2, r6
 80159d0:	463b      	mov	r3, r7
 80159d2:	f7ea fdcd 	bl	8000570 <__aeabi_dmul>
 80159d6:	a374      	add	r3, pc, #464	; (adr r3, 8015ba8 <__ieee754_acos+0x2c8>)
 80159d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159dc:	f7ea fc16 	bl	800020c <__adddf3>
 80159e0:	4632      	mov	r2, r6
 80159e2:	463b      	mov	r3, r7
 80159e4:	f7ea fdc4 	bl	8000570 <__aeabi_dmul>
 80159e8:	a371      	add	r3, pc, #452	; (adr r3, 8015bb0 <__ieee754_acos+0x2d0>)
 80159ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159ee:	f7ea fc0b 	bl	8000208 <__aeabi_dsub>
 80159f2:	4632      	mov	r2, r6
 80159f4:	463b      	mov	r3, r7
 80159f6:	f7ea fdbb 	bl	8000570 <__aeabi_dmul>
 80159fa:	2200      	movs	r2, #0
 80159fc:	4b75      	ldr	r3, [pc, #468]	; (8015bd4 <__ieee754_acos+0x2f4>)
 80159fe:	f7ea fc05 	bl	800020c <__adddf3>
 8015a02:	4602      	mov	r2, r0
 8015a04:	460b      	mov	r3, r1
 8015a06:	4640      	mov	r0, r8
 8015a08:	4649      	mov	r1, r9
 8015a0a:	f7ea fedb 	bl	80007c4 <__aeabi_ddiv>
 8015a0e:	4622      	mov	r2, r4
 8015a10:	462b      	mov	r3, r5
 8015a12:	f7ea fdad 	bl	8000570 <__aeabi_dmul>
 8015a16:	4602      	mov	r2, r0
 8015a18:	460b      	mov	r3, r1
 8015a1a:	a167      	add	r1, pc, #412	; (adr r1, 8015bb8 <__ieee754_acos+0x2d8>)
 8015a1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015a20:	f7ea fbf2 	bl	8000208 <__aeabi_dsub>
 8015a24:	4602      	mov	r2, r0
 8015a26:	460b      	mov	r3, r1
 8015a28:	4620      	mov	r0, r4
 8015a2a:	4629      	mov	r1, r5
 8015a2c:	f7ea fbec 	bl	8000208 <__aeabi_dsub>
 8015a30:	4602      	mov	r2, r0
 8015a32:	460b      	mov	r3, r1
 8015a34:	a162      	add	r1, pc, #392	; (adr r1, 8015bc0 <__ieee754_acos+0x2e0>)
 8015a36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015a3a:	f7ea fbe5 	bl	8000208 <__aeabi_dsub>
 8015a3e:	e764      	b.n	801590a <__ieee754_acos+0x2a>
 8015a40:	2d00      	cmp	r5, #0
 8015a42:	f280 80cb 	bge.w	8015bdc <__ieee754_acos+0x2fc>
 8015a46:	ee10 0a10 	vmov	r0, s0
 8015a4a:	2200      	movs	r2, #0
 8015a4c:	4b61      	ldr	r3, [pc, #388]	; (8015bd4 <__ieee754_acos+0x2f4>)
 8015a4e:	4629      	mov	r1, r5
 8015a50:	f7ea fbdc 	bl	800020c <__adddf3>
 8015a54:	2200      	movs	r2, #0
 8015a56:	4b60      	ldr	r3, [pc, #384]	; (8015bd8 <__ieee754_acos+0x2f8>)
 8015a58:	f7ea fd8a 	bl	8000570 <__aeabi_dmul>
 8015a5c:	a342      	add	r3, pc, #264	; (adr r3, 8015b68 <__ieee754_acos+0x288>)
 8015a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a62:	4604      	mov	r4, r0
 8015a64:	460d      	mov	r5, r1
 8015a66:	f7ea fd83 	bl	8000570 <__aeabi_dmul>
 8015a6a:	a341      	add	r3, pc, #260	; (adr r3, 8015b70 <__ieee754_acos+0x290>)
 8015a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a70:	f7ea fbcc 	bl	800020c <__adddf3>
 8015a74:	4622      	mov	r2, r4
 8015a76:	462b      	mov	r3, r5
 8015a78:	f7ea fd7a 	bl	8000570 <__aeabi_dmul>
 8015a7c:	a33e      	add	r3, pc, #248	; (adr r3, 8015b78 <__ieee754_acos+0x298>)
 8015a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a82:	f7ea fbc1 	bl	8000208 <__aeabi_dsub>
 8015a86:	4622      	mov	r2, r4
 8015a88:	462b      	mov	r3, r5
 8015a8a:	f7ea fd71 	bl	8000570 <__aeabi_dmul>
 8015a8e:	a33c      	add	r3, pc, #240	; (adr r3, 8015b80 <__ieee754_acos+0x2a0>)
 8015a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a94:	f7ea fbba 	bl	800020c <__adddf3>
 8015a98:	4622      	mov	r2, r4
 8015a9a:	462b      	mov	r3, r5
 8015a9c:	f7ea fd68 	bl	8000570 <__aeabi_dmul>
 8015aa0:	a339      	add	r3, pc, #228	; (adr r3, 8015b88 <__ieee754_acos+0x2a8>)
 8015aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aa6:	f7ea fbaf 	bl	8000208 <__aeabi_dsub>
 8015aaa:	4622      	mov	r2, r4
 8015aac:	462b      	mov	r3, r5
 8015aae:	f7ea fd5f 	bl	8000570 <__aeabi_dmul>
 8015ab2:	a337      	add	r3, pc, #220	; (adr r3, 8015b90 <__ieee754_acos+0x2b0>)
 8015ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ab8:	f7ea fba8 	bl	800020c <__adddf3>
 8015abc:	4622      	mov	r2, r4
 8015abe:	462b      	mov	r3, r5
 8015ac0:	f7ea fd56 	bl	8000570 <__aeabi_dmul>
 8015ac4:	ec45 4b10 	vmov	d0, r4, r5
 8015ac8:	4680      	mov	r8, r0
 8015aca:	4689      	mov	r9, r1
 8015acc:	f000 fb56 	bl	801617c <__ieee754_sqrt>
 8015ad0:	a331      	add	r3, pc, #196	; (adr r3, 8015b98 <__ieee754_acos+0x2b8>)
 8015ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ad6:	4620      	mov	r0, r4
 8015ad8:	4629      	mov	r1, r5
 8015ada:	ec57 6b10 	vmov	r6, r7, d0
 8015ade:	f7ea fd47 	bl	8000570 <__aeabi_dmul>
 8015ae2:	a32f      	add	r3, pc, #188	; (adr r3, 8015ba0 <__ieee754_acos+0x2c0>)
 8015ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ae8:	f7ea fb8e 	bl	8000208 <__aeabi_dsub>
 8015aec:	4622      	mov	r2, r4
 8015aee:	462b      	mov	r3, r5
 8015af0:	f7ea fd3e 	bl	8000570 <__aeabi_dmul>
 8015af4:	a32c      	add	r3, pc, #176	; (adr r3, 8015ba8 <__ieee754_acos+0x2c8>)
 8015af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015afa:	f7ea fb87 	bl	800020c <__adddf3>
 8015afe:	4622      	mov	r2, r4
 8015b00:	462b      	mov	r3, r5
 8015b02:	f7ea fd35 	bl	8000570 <__aeabi_dmul>
 8015b06:	a32a      	add	r3, pc, #168	; (adr r3, 8015bb0 <__ieee754_acos+0x2d0>)
 8015b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b0c:	f7ea fb7c 	bl	8000208 <__aeabi_dsub>
 8015b10:	4622      	mov	r2, r4
 8015b12:	462b      	mov	r3, r5
 8015b14:	f7ea fd2c 	bl	8000570 <__aeabi_dmul>
 8015b18:	2200      	movs	r2, #0
 8015b1a:	4b2e      	ldr	r3, [pc, #184]	; (8015bd4 <__ieee754_acos+0x2f4>)
 8015b1c:	f7ea fb76 	bl	800020c <__adddf3>
 8015b20:	4602      	mov	r2, r0
 8015b22:	460b      	mov	r3, r1
 8015b24:	4640      	mov	r0, r8
 8015b26:	4649      	mov	r1, r9
 8015b28:	f7ea fe4c 	bl	80007c4 <__aeabi_ddiv>
 8015b2c:	4632      	mov	r2, r6
 8015b2e:	463b      	mov	r3, r7
 8015b30:	f7ea fd1e 	bl	8000570 <__aeabi_dmul>
 8015b34:	a320      	add	r3, pc, #128	; (adr r3, 8015bb8 <__ieee754_acos+0x2d8>)
 8015b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b3a:	f7ea fb65 	bl	8000208 <__aeabi_dsub>
 8015b3e:	4632      	mov	r2, r6
 8015b40:	463b      	mov	r3, r7
 8015b42:	f7ea fb63 	bl	800020c <__adddf3>
 8015b46:	4602      	mov	r2, r0
 8015b48:	460b      	mov	r3, r1
 8015b4a:	f7ea fb5f 	bl	800020c <__adddf3>
 8015b4e:	4602      	mov	r2, r0
 8015b50:	460b      	mov	r3, r1
 8015b52:	a103      	add	r1, pc, #12	; (adr r1, 8015b60 <__ieee754_acos+0x280>)
 8015b54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015b58:	e76f      	b.n	8015a3a <__ieee754_acos+0x15a>
 8015b5a:	bf00      	nop
 8015b5c:	f3af 8000 	nop.w
 8015b60:	54442d18 	.word	0x54442d18
 8015b64:	400921fb 	.word	0x400921fb
 8015b68:	0dfdf709 	.word	0x0dfdf709
 8015b6c:	3f023de1 	.word	0x3f023de1
 8015b70:	7501b288 	.word	0x7501b288
 8015b74:	3f49efe0 	.word	0x3f49efe0
 8015b78:	b5688f3b 	.word	0xb5688f3b
 8015b7c:	3fa48228 	.word	0x3fa48228
 8015b80:	0e884455 	.word	0x0e884455
 8015b84:	3fc9c155 	.word	0x3fc9c155
 8015b88:	03eb6f7d 	.word	0x03eb6f7d
 8015b8c:	3fd4d612 	.word	0x3fd4d612
 8015b90:	55555555 	.word	0x55555555
 8015b94:	3fc55555 	.word	0x3fc55555
 8015b98:	b12e9282 	.word	0xb12e9282
 8015b9c:	3fb3b8c5 	.word	0x3fb3b8c5
 8015ba0:	1b8d0159 	.word	0x1b8d0159
 8015ba4:	3fe6066c 	.word	0x3fe6066c
 8015ba8:	9c598ac8 	.word	0x9c598ac8
 8015bac:	40002ae5 	.word	0x40002ae5
 8015bb0:	1c8a2d4b 	.word	0x1c8a2d4b
 8015bb4:	40033a27 	.word	0x40033a27
 8015bb8:	33145c07 	.word	0x33145c07
 8015bbc:	3c91a626 	.word	0x3c91a626
 8015bc0:	54442d18 	.word	0x54442d18
 8015bc4:	3ff921fb 	.word	0x3ff921fb
 8015bc8:	3fefffff 	.word	0x3fefffff
 8015bcc:	3fdfffff 	.word	0x3fdfffff
 8015bd0:	3c600000 	.word	0x3c600000
 8015bd4:	3ff00000 	.word	0x3ff00000
 8015bd8:	3fe00000 	.word	0x3fe00000
 8015bdc:	ee10 2a10 	vmov	r2, s0
 8015be0:	462b      	mov	r3, r5
 8015be2:	2000      	movs	r0, #0
 8015be4:	496a      	ldr	r1, [pc, #424]	; (8015d90 <__ieee754_acos+0x4b0>)
 8015be6:	f7ea fb0f 	bl	8000208 <__aeabi_dsub>
 8015bea:	2200      	movs	r2, #0
 8015bec:	4b69      	ldr	r3, [pc, #420]	; (8015d94 <__ieee754_acos+0x4b4>)
 8015bee:	f7ea fcbf 	bl	8000570 <__aeabi_dmul>
 8015bf2:	4604      	mov	r4, r0
 8015bf4:	460d      	mov	r5, r1
 8015bf6:	ec45 4b10 	vmov	d0, r4, r5
 8015bfa:	f000 fabf 	bl	801617c <__ieee754_sqrt>
 8015bfe:	a34e      	add	r3, pc, #312	; (adr r3, 8015d38 <__ieee754_acos+0x458>)
 8015c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c04:	4620      	mov	r0, r4
 8015c06:	4629      	mov	r1, r5
 8015c08:	ec59 8b10 	vmov	r8, r9, d0
 8015c0c:	f7ea fcb0 	bl	8000570 <__aeabi_dmul>
 8015c10:	a34b      	add	r3, pc, #300	; (adr r3, 8015d40 <__ieee754_acos+0x460>)
 8015c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c16:	f7ea faf9 	bl	800020c <__adddf3>
 8015c1a:	4622      	mov	r2, r4
 8015c1c:	462b      	mov	r3, r5
 8015c1e:	f7ea fca7 	bl	8000570 <__aeabi_dmul>
 8015c22:	a349      	add	r3, pc, #292	; (adr r3, 8015d48 <__ieee754_acos+0x468>)
 8015c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c28:	f7ea faee 	bl	8000208 <__aeabi_dsub>
 8015c2c:	4622      	mov	r2, r4
 8015c2e:	462b      	mov	r3, r5
 8015c30:	f7ea fc9e 	bl	8000570 <__aeabi_dmul>
 8015c34:	a346      	add	r3, pc, #280	; (adr r3, 8015d50 <__ieee754_acos+0x470>)
 8015c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c3a:	f7ea fae7 	bl	800020c <__adddf3>
 8015c3e:	4622      	mov	r2, r4
 8015c40:	462b      	mov	r3, r5
 8015c42:	f7ea fc95 	bl	8000570 <__aeabi_dmul>
 8015c46:	a344      	add	r3, pc, #272	; (adr r3, 8015d58 <__ieee754_acos+0x478>)
 8015c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c4c:	f7ea fadc 	bl	8000208 <__aeabi_dsub>
 8015c50:	4622      	mov	r2, r4
 8015c52:	462b      	mov	r3, r5
 8015c54:	f7ea fc8c 	bl	8000570 <__aeabi_dmul>
 8015c58:	a341      	add	r3, pc, #260	; (adr r3, 8015d60 <__ieee754_acos+0x480>)
 8015c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c5e:	f7ea fad5 	bl	800020c <__adddf3>
 8015c62:	4622      	mov	r2, r4
 8015c64:	462b      	mov	r3, r5
 8015c66:	f7ea fc83 	bl	8000570 <__aeabi_dmul>
 8015c6a:	a33f      	add	r3, pc, #252	; (adr r3, 8015d68 <__ieee754_acos+0x488>)
 8015c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c70:	4682      	mov	sl, r0
 8015c72:	468b      	mov	fp, r1
 8015c74:	4620      	mov	r0, r4
 8015c76:	4629      	mov	r1, r5
 8015c78:	f7ea fc7a 	bl	8000570 <__aeabi_dmul>
 8015c7c:	a33c      	add	r3, pc, #240	; (adr r3, 8015d70 <__ieee754_acos+0x490>)
 8015c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c82:	f7ea fac1 	bl	8000208 <__aeabi_dsub>
 8015c86:	4622      	mov	r2, r4
 8015c88:	462b      	mov	r3, r5
 8015c8a:	f7ea fc71 	bl	8000570 <__aeabi_dmul>
 8015c8e:	a33a      	add	r3, pc, #232	; (adr r3, 8015d78 <__ieee754_acos+0x498>)
 8015c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c94:	f7ea faba 	bl	800020c <__adddf3>
 8015c98:	4622      	mov	r2, r4
 8015c9a:	462b      	mov	r3, r5
 8015c9c:	f7ea fc68 	bl	8000570 <__aeabi_dmul>
 8015ca0:	a337      	add	r3, pc, #220	; (adr r3, 8015d80 <__ieee754_acos+0x4a0>)
 8015ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ca6:	f7ea faaf 	bl	8000208 <__aeabi_dsub>
 8015caa:	4622      	mov	r2, r4
 8015cac:	462b      	mov	r3, r5
 8015cae:	f7ea fc5f 	bl	8000570 <__aeabi_dmul>
 8015cb2:	2200      	movs	r2, #0
 8015cb4:	4b36      	ldr	r3, [pc, #216]	; (8015d90 <__ieee754_acos+0x4b0>)
 8015cb6:	f7ea faa9 	bl	800020c <__adddf3>
 8015cba:	4602      	mov	r2, r0
 8015cbc:	460b      	mov	r3, r1
 8015cbe:	4650      	mov	r0, sl
 8015cc0:	4659      	mov	r1, fp
 8015cc2:	f7ea fd7f 	bl	80007c4 <__aeabi_ddiv>
 8015cc6:	4642      	mov	r2, r8
 8015cc8:	464b      	mov	r3, r9
 8015cca:	f7ea fc51 	bl	8000570 <__aeabi_dmul>
 8015cce:	2600      	movs	r6, #0
 8015cd0:	4682      	mov	sl, r0
 8015cd2:	468b      	mov	fp, r1
 8015cd4:	4632      	mov	r2, r6
 8015cd6:	464b      	mov	r3, r9
 8015cd8:	4630      	mov	r0, r6
 8015cda:	4649      	mov	r1, r9
 8015cdc:	f7ea fc48 	bl	8000570 <__aeabi_dmul>
 8015ce0:	4602      	mov	r2, r0
 8015ce2:	460b      	mov	r3, r1
 8015ce4:	4620      	mov	r0, r4
 8015ce6:	4629      	mov	r1, r5
 8015ce8:	f7ea fa8e 	bl	8000208 <__aeabi_dsub>
 8015cec:	4632      	mov	r2, r6
 8015cee:	4604      	mov	r4, r0
 8015cf0:	460d      	mov	r5, r1
 8015cf2:	464b      	mov	r3, r9
 8015cf4:	4640      	mov	r0, r8
 8015cf6:	4649      	mov	r1, r9
 8015cf8:	f7ea fa88 	bl	800020c <__adddf3>
 8015cfc:	4602      	mov	r2, r0
 8015cfe:	460b      	mov	r3, r1
 8015d00:	4620      	mov	r0, r4
 8015d02:	4629      	mov	r1, r5
 8015d04:	f7ea fd5e 	bl	80007c4 <__aeabi_ddiv>
 8015d08:	4602      	mov	r2, r0
 8015d0a:	460b      	mov	r3, r1
 8015d0c:	4650      	mov	r0, sl
 8015d0e:	4659      	mov	r1, fp
 8015d10:	f7ea fa7c 	bl	800020c <__adddf3>
 8015d14:	4632      	mov	r2, r6
 8015d16:	464b      	mov	r3, r9
 8015d18:	f7ea fa78 	bl	800020c <__adddf3>
 8015d1c:	4602      	mov	r2, r0
 8015d1e:	460b      	mov	r3, r1
 8015d20:	f7ea fa74 	bl	800020c <__adddf3>
 8015d24:	e5f1      	b.n	801590a <__ieee754_acos+0x2a>
 8015d26:	2000      	movs	r0, #0
 8015d28:	2100      	movs	r1, #0
 8015d2a:	e5ee      	b.n	801590a <__ieee754_acos+0x2a>
 8015d2c:	a116      	add	r1, pc, #88	; (adr r1, 8015d88 <__ieee754_acos+0x4a8>)
 8015d2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015d32:	e5ea      	b.n	801590a <__ieee754_acos+0x2a>
 8015d34:	f3af 8000 	nop.w
 8015d38:	0dfdf709 	.word	0x0dfdf709
 8015d3c:	3f023de1 	.word	0x3f023de1
 8015d40:	7501b288 	.word	0x7501b288
 8015d44:	3f49efe0 	.word	0x3f49efe0
 8015d48:	b5688f3b 	.word	0xb5688f3b
 8015d4c:	3fa48228 	.word	0x3fa48228
 8015d50:	0e884455 	.word	0x0e884455
 8015d54:	3fc9c155 	.word	0x3fc9c155
 8015d58:	03eb6f7d 	.word	0x03eb6f7d
 8015d5c:	3fd4d612 	.word	0x3fd4d612
 8015d60:	55555555 	.word	0x55555555
 8015d64:	3fc55555 	.word	0x3fc55555
 8015d68:	b12e9282 	.word	0xb12e9282
 8015d6c:	3fb3b8c5 	.word	0x3fb3b8c5
 8015d70:	1b8d0159 	.word	0x1b8d0159
 8015d74:	3fe6066c 	.word	0x3fe6066c
 8015d78:	9c598ac8 	.word	0x9c598ac8
 8015d7c:	40002ae5 	.word	0x40002ae5
 8015d80:	1c8a2d4b 	.word	0x1c8a2d4b
 8015d84:	40033a27 	.word	0x40033a27
 8015d88:	54442d18 	.word	0x54442d18
 8015d8c:	3ff921fb 	.word	0x3ff921fb
 8015d90:	3ff00000 	.word	0x3ff00000
 8015d94:	3fe00000 	.word	0x3fe00000

08015d98 <__ieee754_rem_pio2>:
 8015d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d9c:	ec57 6b10 	vmov	r6, r7, d0
 8015da0:	4bc3      	ldr	r3, [pc, #780]	; (80160b0 <__ieee754_rem_pio2+0x318>)
 8015da2:	b08d      	sub	sp, #52	; 0x34
 8015da4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8015da8:	4598      	cmp	r8, r3
 8015daa:	4604      	mov	r4, r0
 8015dac:	9704      	str	r7, [sp, #16]
 8015dae:	dc07      	bgt.n	8015dc0 <__ieee754_rem_pio2+0x28>
 8015db0:	2200      	movs	r2, #0
 8015db2:	2300      	movs	r3, #0
 8015db4:	ed84 0b00 	vstr	d0, [r4]
 8015db8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8015dbc:	2500      	movs	r5, #0
 8015dbe:	e027      	b.n	8015e10 <__ieee754_rem_pio2+0x78>
 8015dc0:	4bbc      	ldr	r3, [pc, #752]	; (80160b4 <__ieee754_rem_pio2+0x31c>)
 8015dc2:	4598      	cmp	r8, r3
 8015dc4:	dc75      	bgt.n	8015eb2 <__ieee754_rem_pio2+0x11a>
 8015dc6:	9b04      	ldr	r3, [sp, #16]
 8015dc8:	4dbb      	ldr	r5, [pc, #748]	; (80160b8 <__ieee754_rem_pio2+0x320>)
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	ee10 0a10 	vmov	r0, s0
 8015dd0:	a3a9      	add	r3, pc, #676	; (adr r3, 8016078 <__ieee754_rem_pio2+0x2e0>)
 8015dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dd6:	4639      	mov	r1, r7
 8015dd8:	dd36      	ble.n	8015e48 <__ieee754_rem_pio2+0xb0>
 8015dda:	f7ea fa15 	bl	8000208 <__aeabi_dsub>
 8015dde:	45a8      	cmp	r8, r5
 8015de0:	4606      	mov	r6, r0
 8015de2:	460f      	mov	r7, r1
 8015de4:	d018      	beq.n	8015e18 <__ieee754_rem_pio2+0x80>
 8015de6:	a3a6      	add	r3, pc, #664	; (adr r3, 8016080 <__ieee754_rem_pio2+0x2e8>)
 8015de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dec:	f7ea fa0c 	bl	8000208 <__aeabi_dsub>
 8015df0:	4602      	mov	r2, r0
 8015df2:	460b      	mov	r3, r1
 8015df4:	e9c4 2300 	strd	r2, r3, [r4]
 8015df8:	4630      	mov	r0, r6
 8015dfa:	4639      	mov	r1, r7
 8015dfc:	f7ea fa04 	bl	8000208 <__aeabi_dsub>
 8015e00:	a39f      	add	r3, pc, #636	; (adr r3, 8016080 <__ieee754_rem_pio2+0x2e8>)
 8015e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e06:	f7ea f9ff 	bl	8000208 <__aeabi_dsub>
 8015e0a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8015e0e:	2501      	movs	r5, #1
 8015e10:	4628      	mov	r0, r5
 8015e12:	b00d      	add	sp, #52	; 0x34
 8015e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e18:	a39b      	add	r3, pc, #620	; (adr r3, 8016088 <__ieee754_rem_pio2+0x2f0>)
 8015e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e1e:	f7ea f9f3 	bl	8000208 <__aeabi_dsub>
 8015e22:	a39b      	add	r3, pc, #620	; (adr r3, 8016090 <__ieee754_rem_pio2+0x2f8>)
 8015e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e28:	4606      	mov	r6, r0
 8015e2a:	460f      	mov	r7, r1
 8015e2c:	f7ea f9ec 	bl	8000208 <__aeabi_dsub>
 8015e30:	4602      	mov	r2, r0
 8015e32:	460b      	mov	r3, r1
 8015e34:	e9c4 2300 	strd	r2, r3, [r4]
 8015e38:	4630      	mov	r0, r6
 8015e3a:	4639      	mov	r1, r7
 8015e3c:	f7ea f9e4 	bl	8000208 <__aeabi_dsub>
 8015e40:	a393      	add	r3, pc, #588	; (adr r3, 8016090 <__ieee754_rem_pio2+0x2f8>)
 8015e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e46:	e7de      	b.n	8015e06 <__ieee754_rem_pio2+0x6e>
 8015e48:	f7ea f9e0 	bl	800020c <__adddf3>
 8015e4c:	45a8      	cmp	r8, r5
 8015e4e:	4606      	mov	r6, r0
 8015e50:	460f      	mov	r7, r1
 8015e52:	d016      	beq.n	8015e82 <__ieee754_rem_pio2+0xea>
 8015e54:	a38a      	add	r3, pc, #552	; (adr r3, 8016080 <__ieee754_rem_pio2+0x2e8>)
 8015e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e5a:	f7ea f9d7 	bl	800020c <__adddf3>
 8015e5e:	4602      	mov	r2, r0
 8015e60:	460b      	mov	r3, r1
 8015e62:	e9c4 2300 	strd	r2, r3, [r4]
 8015e66:	4630      	mov	r0, r6
 8015e68:	4639      	mov	r1, r7
 8015e6a:	f7ea f9cd 	bl	8000208 <__aeabi_dsub>
 8015e6e:	a384      	add	r3, pc, #528	; (adr r3, 8016080 <__ieee754_rem_pio2+0x2e8>)
 8015e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e74:	f7ea f9ca 	bl	800020c <__adddf3>
 8015e78:	f04f 35ff 	mov.w	r5, #4294967295
 8015e7c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8015e80:	e7c6      	b.n	8015e10 <__ieee754_rem_pio2+0x78>
 8015e82:	a381      	add	r3, pc, #516	; (adr r3, 8016088 <__ieee754_rem_pio2+0x2f0>)
 8015e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e88:	f7ea f9c0 	bl	800020c <__adddf3>
 8015e8c:	a380      	add	r3, pc, #512	; (adr r3, 8016090 <__ieee754_rem_pio2+0x2f8>)
 8015e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e92:	4606      	mov	r6, r0
 8015e94:	460f      	mov	r7, r1
 8015e96:	f7ea f9b9 	bl	800020c <__adddf3>
 8015e9a:	4602      	mov	r2, r0
 8015e9c:	460b      	mov	r3, r1
 8015e9e:	e9c4 2300 	strd	r2, r3, [r4]
 8015ea2:	4630      	mov	r0, r6
 8015ea4:	4639      	mov	r1, r7
 8015ea6:	f7ea f9af 	bl	8000208 <__aeabi_dsub>
 8015eaa:	a379      	add	r3, pc, #484	; (adr r3, 8016090 <__ieee754_rem_pio2+0x2f8>)
 8015eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015eb0:	e7e0      	b.n	8015e74 <__ieee754_rem_pio2+0xdc>
 8015eb2:	4b82      	ldr	r3, [pc, #520]	; (80160bc <__ieee754_rem_pio2+0x324>)
 8015eb4:	4598      	cmp	r8, r3
 8015eb6:	f300 80d0 	bgt.w	801605a <__ieee754_rem_pio2+0x2c2>
 8015eba:	f000 ffd7 	bl	8016e6c <fabs>
 8015ebe:	ec57 6b10 	vmov	r6, r7, d0
 8015ec2:	ee10 0a10 	vmov	r0, s0
 8015ec6:	a374      	add	r3, pc, #464	; (adr r3, 8016098 <__ieee754_rem_pio2+0x300>)
 8015ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ecc:	4639      	mov	r1, r7
 8015ece:	f7ea fb4f 	bl	8000570 <__aeabi_dmul>
 8015ed2:	2200      	movs	r2, #0
 8015ed4:	4b7a      	ldr	r3, [pc, #488]	; (80160c0 <__ieee754_rem_pio2+0x328>)
 8015ed6:	f7ea f999 	bl	800020c <__adddf3>
 8015eda:	f7ea fdf9 	bl	8000ad0 <__aeabi_d2iz>
 8015ede:	4605      	mov	r5, r0
 8015ee0:	f7ea fae0 	bl	80004a4 <__aeabi_i2d>
 8015ee4:	a364      	add	r3, pc, #400	; (adr r3, 8016078 <__ieee754_rem_pio2+0x2e0>)
 8015ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015eea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015eee:	f7ea fb3f 	bl	8000570 <__aeabi_dmul>
 8015ef2:	4602      	mov	r2, r0
 8015ef4:	460b      	mov	r3, r1
 8015ef6:	4630      	mov	r0, r6
 8015ef8:	4639      	mov	r1, r7
 8015efa:	f7ea f985 	bl	8000208 <__aeabi_dsub>
 8015efe:	a360      	add	r3, pc, #384	; (adr r3, 8016080 <__ieee754_rem_pio2+0x2e8>)
 8015f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f04:	4682      	mov	sl, r0
 8015f06:	468b      	mov	fp, r1
 8015f08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015f0c:	f7ea fb30 	bl	8000570 <__aeabi_dmul>
 8015f10:	2d1f      	cmp	r5, #31
 8015f12:	4606      	mov	r6, r0
 8015f14:	460f      	mov	r7, r1
 8015f16:	dc2a      	bgt.n	8015f6e <__ieee754_rem_pio2+0x1d6>
 8015f18:	1e6a      	subs	r2, r5, #1
 8015f1a:	4b6a      	ldr	r3, [pc, #424]	; (80160c4 <__ieee754_rem_pio2+0x32c>)
 8015f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f20:	4598      	cmp	r8, r3
 8015f22:	d024      	beq.n	8015f6e <__ieee754_rem_pio2+0x1d6>
 8015f24:	4632      	mov	r2, r6
 8015f26:	463b      	mov	r3, r7
 8015f28:	4650      	mov	r0, sl
 8015f2a:	4659      	mov	r1, fp
 8015f2c:	f7ea f96c 	bl	8000208 <__aeabi_dsub>
 8015f30:	e9c4 0100 	strd	r0, r1, [r4]
 8015f34:	e9d4 8900 	ldrd	r8, r9, [r4]
 8015f38:	4650      	mov	r0, sl
 8015f3a:	4642      	mov	r2, r8
 8015f3c:	464b      	mov	r3, r9
 8015f3e:	4659      	mov	r1, fp
 8015f40:	f7ea f962 	bl	8000208 <__aeabi_dsub>
 8015f44:	463b      	mov	r3, r7
 8015f46:	4632      	mov	r2, r6
 8015f48:	f7ea f95e 	bl	8000208 <__aeabi_dsub>
 8015f4c:	9b04      	ldr	r3, [sp, #16]
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8015f54:	f6bf af5c 	bge.w	8015e10 <__ieee754_rem_pio2+0x78>
 8015f58:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8015f5c:	6063      	str	r3, [r4, #4]
 8015f5e:	f8c4 8000 	str.w	r8, [r4]
 8015f62:	60a0      	str	r0, [r4, #8]
 8015f64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015f68:	60e3      	str	r3, [r4, #12]
 8015f6a:	426d      	negs	r5, r5
 8015f6c:	e750      	b.n	8015e10 <__ieee754_rem_pio2+0x78>
 8015f6e:	4632      	mov	r2, r6
 8015f70:	463b      	mov	r3, r7
 8015f72:	4650      	mov	r0, sl
 8015f74:	4659      	mov	r1, fp
 8015f76:	f7ea f947 	bl	8000208 <__aeabi_dsub>
 8015f7a:	ea4f 5228 	mov.w	r2, r8, asr #20
 8015f7e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8015f82:	1ad3      	subs	r3, r2, r3
 8015f84:	2b10      	cmp	r3, #16
 8015f86:	e9c4 0100 	strd	r0, r1, [r4]
 8015f8a:	9205      	str	r2, [sp, #20]
 8015f8c:	ddd2      	ble.n	8015f34 <__ieee754_rem_pio2+0x19c>
 8015f8e:	a33e      	add	r3, pc, #248	; (adr r3, 8016088 <__ieee754_rem_pio2+0x2f0>)
 8015f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015f98:	f7ea faea 	bl	8000570 <__aeabi_dmul>
 8015f9c:	4606      	mov	r6, r0
 8015f9e:	460f      	mov	r7, r1
 8015fa0:	4602      	mov	r2, r0
 8015fa2:	460b      	mov	r3, r1
 8015fa4:	4650      	mov	r0, sl
 8015fa6:	4659      	mov	r1, fp
 8015fa8:	f7ea f92e 	bl	8000208 <__aeabi_dsub>
 8015fac:	4602      	mov	r2, r0
 8015fae:	460b      	mov	r3, r1
 8015fb0:	4680      	mov	r8, r0
 8015fb2:	4689      	mov	r9, r1
 8015fb4:	4650      	mov	r0, sl
 8015fb6:	4659      	mov	r1, fp
 8015fb8:	f7ea f926 	bl	8000208 <__aeabi_dsub>
 8015fbc:	4632      	mov	r2, r6
 8015fbe:	463b      	mov	r3, r7
 8015fc0:	f7ea f922 	bl	8000208 <__aeabi_dsub>
 8015fc4:	a332      	add	r3, pc, #200	; (adr r3, 8016090 <__ieee754_rem_pio2+0x2f8>)
 8015fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fca:	4606      	mov	r6, r0
 8015fcc:	460f      	mov	r7, r1
 8015fce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015fd2:	f7ea facd 	bl	8000570 <__aeabi_dmul>
 8015fd6:	4632      	mov	r2, r6
 8015fd8:	463b      	mov	r3, r7
 8015fda:	f7ea f915 	bl	8000208 <__aeabi_dsub>
 8015fde:	4602      	mov	r2, r0
 8015fe0:	460b      	mov	r3, r1
 8015fe2:	4606      	mov	r6, r0
 8015fe4:	460f      	mov	r7, r1
 8015fe6:	4640      	mov	r0, r8
 8015fe8:	4649      	mov	r1, r9
 8015fea:	f7ea f90d 	bl	8000208 <__aeabi_dsub>
 8015fee:	9a05      	ldr	r2, [sp, #20]
 8015ff0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8015ff4:	1ad3      	subs	r3, r2, r3
 8015ff6:	2b31      	cmp	r3, #49	; 0x31
 8015ff8:	e9c4 0100 	strd	r0, r1, [r4]
 8015ffc:	dd2a      	ble.n	8016054 <__ieee754_rem_pio2+0x2bc>
 8015ffe:	a328      	add	r3, pc, #160	; (adr r3, 80160a0 <__ieee754_rem_pio2+0x308>)
 8016000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016004:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016008:	f7ea fab2 	bl	8000570 <__aeabi_dmul>
 801600c:	4606      	mov	r6, r0
 801600e:	460f      	mov	r7, r1
 8016010:	4602      	mov	r2, r0
 8016012:	460b      	mov	r3, r1
 8016014:	4640      	mov	r0, r8
 8016016:	4649      	mov	r1, r9
 8016018:	f7ea f8f6 	bl	8000208 <__aeabi_dsub>
 801601c:	4602      	mov	r2, r0
 801601e:	460b      	mov	r3, r1
 8016020:	4682      	mov	sl, r0
 8016022:	468b      	mov	fp, r1
 8016024:	4640      	mov	r0, r8
 8016026:	4649      	mov	r1, r9
 8016028:	f7ea f8ee 	bl	8000208 <__aeabi_dsub>
 801602c:	4632      	mov	r2, r6
 801602e:	463b      	mov	r3, r7
 8016030:	f7ea f8ea 	bl	8000208 <__aeabi_dsub>
 8016034:	a31c      	add	r3, pc, #112	; (adr r3, 80160a8 <__ieee754_rem_pio2+0x310>)
 8016036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801603a:	4606      	mov	r6, r0
 801603c:	460f      	mov	r7, r1
 801603e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016042:	f7ea fa95 	bl	8000570 <__aeabi_dmul>
 8016046:	4632      	mov	r2, r6
 8016048:	463b      	mov	r3, r7
 801604a:	f7ea f8dd 	bl	8000208 <__aeabi_dsub>
 801604e:	4606      	mov	r6, r0
 8016050:	460f      	mov	r7, r1
 8016052:	e767      	b.n	8015f24 <__ieee754_rem_pio2+0x18c>
 8016054:	46c2      	mov	sl, r8
 8016056:	46cb      	mov	fp, r9
 8016058:	e76c      	b.n	8015f34 <__ieee754_rem_pio2+0x19c>
 801605a:	4b1b      	ldr	r3, [pc, #108]	; (80160c8 <__ieee754_rem_pio2+0x330>)
 801605c:	4598      	cmp	r8, r3
 801605e:	dd35      	ble.n	80160cc <__ieee754_rem_pio2+0x334>
 8016060:	ee10 2a10 	vmov	r2, s0
 8016064:	463b      	mov	r3, r7
 8016066:	4630      	mov	r0, r6
 8016068:	4639      	mov	r1, r7
 801606a:	f7ea f8cd 	bl	8000208 <__aeabi_dsub>
 801606e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016072:	e9c4 0100 	strd	r0, r1, [r4]
 8016076:	e6a1      	b.n	8015dbc <__ieee754_rem_pio2+0x24>
 8016078:	54400000 	.word	0x54400000
 801607c:	3ff921fb 	.word	0x3ff921fb
 8016080:	1a626331 	.word	0x1a626331
 8016084:	3dd0b461 	.word	0x3dd0b461
 8016088:	1a600000 	.word	0x1a600000
 801608c:	3dd0b461 	.word	0x3dd0b461
 8016090:	2e037073 	.word	0x2e037073
 8016094:	3ba3198a 	.word	0x3ba3198a
 8016098:	6dc9c883 	.word	0x6dc9c883
 801609c:	3fe45f30 	.word	0x3fe45f30
 80160a0:	2e000000 	.word	0x2e000000
 80160a4:	3ba3198a 	.word	0x3ba3198a
 80160a8:	252049c1 	.word	0x252049c1
 80160ac:	397b839a 	.word	0x397b839a
 80160b0:	3fe921fb 	.word	0x3fe921fb
 80160b4:	4002d97b 	.word	0x4002d97b
 80160b8:	3ff921fb 	.word	0x3ff921fb
 80160bc:	413921fb 	.word	0x413921fb
 80160c0:	3fe00000 	.word	0x3fe00000
 80160c4:	08083af4 	.word	0x08083af4
 80160c8:	7fefffff 	.word	0x7fefffff
 80160cc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80160d0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80160d4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80160d8:	4630      	mov	r0, r6
 80160da:	460f      	mov	r7, r1
 80160dc:	f7ea fcf8 	bl	8000ad0 <__aeabi_d2iz>
 80160e0:	f7ea f9e0 	bl	80004a4 <__aeabi_i2d>
 80160e4:	4602      	mov	r2, r0
 80160e6:	460b      	mov	r3, r1
 80160e8:	4630      	mov	r0, r6
 80160ea:	4639      	mov	r1, r7
 80160ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80160f0:	f7ea f88a 	bl	8000208 <__aeabi_dsub>
 80160f4:	2200      	movs	r2, #0
 80160f6:	4b1f      	ldr	r3, [pc, #124]	; (8016174 <__ieee754_rem_pio2+0x3dc>)
 80160f8:	f7ea fa3a 	bl	8000570 <__aeabi_dmul>
 80160fc:	460f      	mov	r7, r1
 80160fe:	4606      	mov	r6, r0
 8016100:	f7ea fce6 	bl	8000ad0 <__aeabi_d2iz>
 8016104:	f7ea f9ce 	bl	80004a4 <__aeabi_i2d>
 8016108:	4602      	mov	r2, r0
 801610a:	460b      	mov	r3, r1
 801610c:	4630      	mov	r0, r6
 801610e:	4639      	mov	r1, r7
 8016110:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016114:	f7ea f878 	bl	8000208 <__aeabi_dsub>
 8016118:	2200      	movs	r2, #0
 801611a:	4b16      	ldr	r3, [pc, #88]	; (8016174 <__ieee754_rem_pio2+0x3dc>)
 801611c:	f7ea fa28 	bl	8000570 <__aeabi_dmul>
 8016120:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016124:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8016128:	f04f 0803 	mov.w	r8, #3
 801612c:	2600      	movs	r6, #0
 801612e:	2700      	movs	r7, #0
 8016130:	4632      	mov	r2, r6
 8016132:	463b      	mov	r3, r7
 8016134:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8016138:	f108 3aff 	add.w	sl, r8, #4294967295
 801613c:	f7ea fc80 	bl	8000a40 <__aeabi_dcmpeq>
 8016140:	b9b0      	cbnz	r0, 8016170 <__ieee754_rem_pio2+0x3d8>
 8016142:	4b0d      	ldr	r3, [pc, #52]	; (8016178 <__ieee754_rem_pio2+0x3e0>)
 8016144:	9301      	str	r3, [sp, #4]
 8016146:	2302      	movs	r3, #2
 8016148:	9300      	str	r3, [sp, #0]
 801614a:	462a      	mov	r2, r5
 801614c:	4643      	mov	r3, r8
 801614e:	4621      	mov	r1, r4
 8016150:	a806      	add	r0, sp, #24
 8016152:	f000 fa81 	bl	8016658 <__kernel_rem_pio2>
 8016156:	9b04      	ldr	r3, [sp, #16]
 8016158:	2b00      	cmp	r3, #0
 801615a:	4605      	mov	r5, r0
 801615c:	f6bf ae58 	bge.w	8015e10 <__ieee754_rem_pio2+0x78>
 8016160:	6863      	ldr	r3, [r4, #4]
 8016162:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016166:	6063      	str	r3, [r4, #4]
 8016168:	68e3      	ldr	r3, [r4, #12]
 801616a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801616e:	e6fb      	b.n	8015f68 <__ieee754_rem_pio2+0x1d0>
 8016170:	46d0      	mov	r8, sl
 8016172:	e7dd      	b.n	8016130 <__ieee754_rem_pio2+0x398>
 8016174:	41700000 	.word	0x41700000
 8016178:	08083b74 	.word	0x08083b74

0801617c <__ieee754_sqrt>:
 801617c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016180:	ec55 4b10 	vmov	r4, r5, d0
 8016184:	4e54      	ldr	r6, [pc, #336]	; (80162d8 <__ieee754_sqrt+0x15c>)
 8016186:	43ae      	bics	r6, r5
 8016188:	ee10 0a10 	vmov	r0, s0
 801618c:	462b      	mov	r3, r5
 801618e:	462a      	mov	r2, r5
 8016190:	4621      	mov	r1, r4
 8016192:	d113      	bne.n	80161bc <__ieee754_sqrt+0x40>
 8016194:	ee10 2a10 	vmov	r2, s0
 8016198:	462b      	mov	r3, r5
 801619a:	ee10 0a10 	vmov	r0, s0
 801619e:	4629      	mov	r1, r5
 80161a0:	f7ea f9e6 	bl	8000570 <__aeabi_dmul>
 80161a4:	4602      	mov	r2, r0
 80161a6:	460b      	mov	r3, r1
 80161a8:	4620      	mov	r0, r4
 80161aa:	4629      	mov	r1, r5
 80161ac:	f7ea f82e 	bl	800020c <__adddf3>
 80161b0:	4604      	mov	r4, r0
 80161b2:	460d      	mov	r5, r1
 80161b4:	ec45 4b10 	vmov	d0, r4, r5
 80161b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161bc:	2d00      	cmp	r5, #0
 80161be:	dc10      	bgt.n	80161e2 <__ieee754_sqrt+0x66>
 80161c0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80161c4:	4330      	orrs	r0, r6
 80161c6:	d0f5      	beq.n	80161b4 <__ieee754_sqrt+0x38>
 80161c8:	b15d      	cbz	r5, 80161e2 <__ieee754_sqrt+0x66>
 80161ca:	ee10 2a10 	vmov	r2, s0
 80161ce:	462b      	mov	r3, r5
 80161d0:	4620      	mov	r0, r4
 80161d2:	4629      	mov	r1, r5
 80161d4:	f7ea f818 	bl	8000208 <__aeabi_dsub>
 80161d8:	4602      	mov	r2, r0
 80161da:	460b      	mov	r3, r1
 80161dc:	f7ea faf2 	bl	80007c4 <__aeabi_ddiv>
 80161e0:	e7e6      	b.n	80161b0 <__ieee754_sqrt+0x34>
 80161e2:	151b      	asrs	r3, r3, #20
 80161e4:	d10c      	bne.n	8016200 <__ieee754_sqrt+0x84>
 80161e6:	2a00      	cmp	r2, #0
 80161e8:	d06d      	beq.n	80162c6 <__ieee754_sqrt+0x14a>
 80161ea:	2000      	movs	r0, #0
 80161ec:	02d6      	lsls	r6, r2, #11
 80161ee:	d56e      	bpl.n	80162ce <__ieee754_sqrt+0x152>
 80161f0:	1e44      	subs	r4, r0, #1
 80161f2:	1b1b      	subs	r3, r3, r4
 80161f4:	f1c0 0420 	rsb	r4, r0, #32
 80161f8:	fa21 f404 	lsr.w	r4, r1, r4
 80161fc:	4322      	orrs	r2, r4
 80161fe:	4081      	lsls	r1, r0
 8016200:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016204:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8016208:	07dd      	lsls	r5, r3, #31
 801620a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801620e:	bf42      	ittt	mi
 8016210:	0052      	lslmi	r2, r2, #1
 8016212:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8016216:	0049      	lslmi	r1, r1, #1
 8016218:	1058      	asrs	r0, r3, #1
 801621a:	2500      	movs	r5, #0
 801621c:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8016220:	441a      	add	r2, r3
 8016222:	0049      	lsls	r1, r1, #1
 8016224:	2316      	movs	r3, #22
 8016226:	462c      	mov	r4, r5
 8016228:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801622c:	19a7      	adds	r7, r4, r6
 801622e:	4297      	cmp	r7, r2
 8016230:	bfde      	ittt	le
 8016232:	1bd2      	suble	r2, r2, r7
 8016234:	19bc      	addle	r4, r7, r6
 8016236:	19ad      	addle	r5, r5, r6
 8016238:	0052      	lsls	r2, r2, #1
 801623a:	3b01      	subs	r3, #1
 801623c:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8016240:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016244:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016248:	d1f0      	bne.n	801622c <__ieee754_sqrt+0xb0>
 801624a:	f04f 0e20 	mov.w	lr, #32
 801624e:	469c      	mov	ip, r3
 8016250:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8016254:	42a2      	cmp	r2, r4
 8016256:	eb06 070c 	add.w	r7, r6, ip
 801625a:	dc02      	bgt.n	8016262 <__ieee754_sqrt+0xe6>
 801625c:	d112      	bne.n	8016284 <__ieee754_sqrt+0x108>
 801625e:	428f      	cmp	r7, r1
 8016260:	d810      	bhi.n	8016284 <__ieee754_sqrt+0x108>
 8016262:	2f00      	cmp	r7, #0
 8016264:	eb07 0c06 	add.w	ip, r7, r6
 8016268:	da34      	bge.n	80162d4 <__ieee754_sqrt+0x158>
 801626a:	f1bc 0f00 	cmp.w	ip, #0
 801626e:	db31      	blt.n	80162d4 <__ieee754_sqrt+0x158>
 8016270:	f104 0801 	add.w	r8, r4, #1
 8016274:	1b12      	subs	r2, r2, r4
 8016276:	428f      	cmp	r7, r1
 8016278:	bf88      	it	hi
 801627a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801627e:	1bc9      	subs	r1, r1, r7
 8016280:	4433      	add	r3, r6
 8016282:	4644      	mov	r4, r8
 8016284:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8016288:	f1be 0e01 	subs.w	lr, lr, #1
 801628c:	443a      	add	r2, r7
 801628e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016292:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016296:	d1dd      	bne.n	8016254 <__ieee754_sqrt+0xd8>
 8016298:	430a      	orrs	r2, r1
 801629a:	d006      	beq.n	80162aa <__ieee754_sqrt+0x12e>
 801629c:	1c5c      	adds	r4, r3, #1
 801629e:	bf13      	iteet	ne
 80162a0:	3301      	addne	r3, #1
 80162a2:	3501      	addeq	r5, #1
 80162a4:	4673      	moveq	r3, lr
 80162a6:	f023 0301 	bicne.w	r3, r3, #1
 80162aa:	106a      	asrs	r2, r5, #1
 80162ac:	085b      	lsrs	r3, r3, #1
 80162ae:	07e9      	lsls	r1, r5, #31
 80162b0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80162b4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80162b8:	bf48      	it	mi
 80162ba:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80162be:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80162c2:	461c      	mov	r4, r3
 80162c4:	e776      	b.n	80161b4 <__ieee754_sqrt+0x38>
 80162c6:	0aca      	lsrs	r2, r1, #11
 80162c8:	3b15      	subs	r3, #21
 80162ca:	0549      	lsls	r1, r1, #21
 80162cc:	e78b      	b.n	80161e6 <__ieee754_sqrt+0x6a>
 80162ce:	0052      	lsls	r2, r2, #1
 80162d0:	3001      	adds	r0, #1
 80162d2:	e78b      	b.n	80161ec <__ieee754_sqrt+0x70>
 80162d4:	46a0      	mov	r8, r4
 80162d6:	e7cd      	b.n	8016274 <__ieee754_sqrt+0xf8>
 80162d8:	7ff00000 	.word	0x7ff00000

080162dc <__ieee754_expf>:
 80162dc:	ee10 2a10 	vmov	r2, s0
 80162e0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80162e4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80162e8:	d902      	bls.n	80162f0 <__ieee754_expf+0x14>
 80162ea:	ee30 0a00 	vadd.f32	s0, s0, s0
 80162ee:	4770      	bx	lr
 80162f0:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 80162f4:	d106      	bne.n	8016304 <__ieee754_expf+0x28>
 80162f6:	eddf 7a51 	vldr	s15, [pc, #324]	; 801643c <__ieee754_expf+0x160>
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	bf18      	it	ne
 80162fe:	eeb0 0a67 	vmovne.f32	s0, s15
 8016302:	4770      	bx	lr
 8016304:	484e      	ldr	r0, [pc, #312]	; (8016440 <__ieee754_expf+0x164>)
 8016306:	4282      	cmp	r2, r0
 8016308:	dd04      	ble.n	8016314 <__ieee754_expf+0x38>
 801630a:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8016444 <__ieee754_expf+0x168>
 801630e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8016312:	4770      	bx	lr
 8016314:	2a00      	cmp	r2, #0
 8016316:	da03      	bge.n	8016320 <__ieee754_expf+0x44>
 8016318:	4a4b      	ldr	r2, [pc, #300]	; (8016448 <__ieee754_expf+0x16c>)
 801631a:	4291      	cmp	r1, r2
 801631c:	f200 808a 	bhi.w	8016434 <__ieee754_expf+0x158>
 8016320:	4a4a      	ldr	r2, [pc, #296]	; (801644c <__ieee754_expf+0x170>)
 8016322:	4291      	cmp	r1, r2
 8016324:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8016328:	d954      	bls.n	80163d4 <__ieee754_expf+0xf8>
 801632a:	4a49      	ldr	r2, [pc, #292]	; (8016450 <__ieee754_expf+0x174>)
 801632c:	4291      	cmp	r1, r2
 801632e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8016332:	d836      	bhi.n	80163a2 <__ieee754_expf+0xc6>
 8016334:	4947      	ldr	r1, [pc, #284]	; (8016454 <__ieee754_expf+0x178>)
 8016336:	4411      	add	r1, r2
 8016338:	ed91 7a00 	vldr	s14, [r1]
 801633c:	4946      	ldr	r1, [pc, #280]	; (8016458 <__ieee754_expf+0x17c>)
 801633e:	440a      	add	r2, r1
 8016340:	edd2 7a00 	vldr	s15, [r2]
 8016344:	ee30 7a47 	vsub.f32	s14, s0, s14
 8016348:	f1c3 0201 	rsb	r2, r3, #1
 801634c:	1ad2      	subs	r2, r2, r3
 801634e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8016352:	ee60 6a00 	vmul.f32	s13, s0, s0
 8016356:	eddf 5a41 	vldr	s11, [pc, #260]	; 801645c <__ieee754_expf+0x180>
 801635a:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8016460 <__ieee754_expf+0x184>
 801635e:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8016362:	eddf 5a40 	vldr	s11, [pc, #256]	; 8016464 <__ieee754_expf+0x188>
 8016366:	eee6 5a85 	vfma.f32	s11, s13, s10
 801636a:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8016468 <__ieee754_expf+0x18c>
 801636e:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8016372:	eddf 5a3e 	vldr	s11, [pc, #248]	; 801646c <__ieee754_expf+0x190>
 8016376:	eee6 5a85 	vfma.f32	s11, s13, s10
 801637a:	eeb0 5a40 	vmov.f32	s10, s0
 801637e:	eea6 5ae5 	vfms.f32	s10, s13, s11
 8016382:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8016386:	eef0 6a45 	vmov.f32	s13, s10
 801638a:	ee20 5a05 	vmul.f32	s10, s0, s10
 801638e:	bb92      	cbnz	r2, 80163f6 <__ieee754_expf+0x11a>
 8016390:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8016394:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8016398:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801639c:	ee36 0a40 	vsub.f32	s0, s12, s0
 80163a0:	4770      	bx	lr
 80163a2:	4b33      	ldr	r3, [pc, #204]	; (8016470 <__ieee754_expf+0x194>)
 80163a4:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8016474 <__ieee754_expf+0x198>
 80163a8:	4413      	add	r3, r2
 80163aa:	edd3 7a00 	vldr	s15, [r3]
 80163ae:	eee0 7a07 	vfma.f32	s15, s0, s14
 80163b2:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8016478 <__ieee754_expf+0x19c>
 80163b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80163ba:	ee17 2a90 	vmov	r2, s15
 80163be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80163c2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80163c6:	eeb0 7a40 	vmov.f32	s14, s0
 80163ca:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 801647c <__ieee754_expf+0x1a0>
 80163ce:	ee67 7a80 	vmul.f32	s15, s15, s0
 80163d2:	e7bc      	b.n	801634e <__ieee754_expf+0x72>
 80163d4:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 80163d8:	d20b      	bcs.n	80163f2 <__ieee754_expf+0x116>
 80163da:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8016444 <__ieee754_expf+0x168>
 80163de:	ee70 6a26 	vadd.f32	s13, s0, s13
 80163e2:	eef4 6ac6 	vcmpe.f32	s13, s12
 80163e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163ea:	dd02      	ble.n	80163f2 <__ieee754_expf+0x116>
 80163ec:	ee30 0a06 	vadd.f32	s0, s0, s12
 80163f0:	4770      	bx	lr
 80163f2:	2200      	movs	r2, #0
 80163f4:	e7ad      	b.n	8016352 <__ieee754_expf+0x76>
 80163f6:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80163fa:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80163fe:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8016402:	bfb8      	it	lt
 8016404:	3264      	addlt	r2, #100	; 0x64
 8016406:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801640a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801640e:	ee76 7a40 	vsub.f32	s15, s12, s0
 8016412:	ee17 3a90 	vmov	r3, s15
 8016416:	bfab      	itete	ge
 8016418:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801641c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8016420:	ee00 3a10 	vmovge	s0, r3
 8016424:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8016480 <__ieee754_expf+0x1a4>
 8016428:	bfbc      	itt	lt
 801642a:	ee00 3a10 	vmovlt	s0, r3
 801642e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8016432:	4770      	bx	lr
 8016434:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801643c <__ieee754_expf+0x160>
 8016438:	4770      	bx	lr
 801643a:	bf00      	nop
 801643c:	00000000 	.word	0x00000000
 8016440:	42b17217 	.word	0x42b17217
 8016444:	7149f2ca 	.word	0x7149f2ca
 8016448:	42cff1b5 	.word	0x42cff1b5
 801644c:	3eb17218 	.word	0x3eb17218
 8016450:	3f851591 	.word	0x3f851591
 8016454:	08083c84 	.word	0x08083c84
 8016458:	08083c8c 	.word	0x08083c8c
 801645c:	3331bb4c 	.word	0x3331bb4c
 8016460:	b5ddea0e 	.word	0xb5ddea0e
 8016464:	388ab355 	.word	0x388ab355
 8016468:	bb360b61 	.word	0xbb360b61
 801646c:	3e2aaaab 	.word	0x3e2aaaab
 8016470:	08083c7c 	.word	0x08083c7c
 8016474:	3fb8aa3b 	.word	0x3fb8aa3b
 8016478:	3f317180 	.word	0x3f317180
 801647c:	3717f7d1 	.word	0x3717f7d1
 8016480:	0d800000 	.word	0x0d800000
 8016484:	00000000 	.word	0x00000000

08016488 <__kernel_cos>:
 8016488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801648c:	ec59 8b10 	vmov	r8, r9, d0
 8016490:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 8016494:	b085      	sub	sp, #20
 8016496:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 801649a:	ed8d 1b00 	vstr	d1, [sp]
 801649e:	da07      	bge.n	80164b0 <__kernel_cos+0x28>
 80164a0:	ee10 0a10 	vmov	r0, s0
 80164a4:	4649      	mov	r1, r9
 80164a6:	f7ea fb13 	bl	8000ad0 <__aeabi_d2iz>
 80164aa:	2800      	cmp	r0, #0
 80164ac:	f000 80aa 	beq.w	8016604 <__kernel_cos+0x17c>
 80164b0:	4642      	mov	r2, r8
 80164b2:	464b      	mov	r3, r9
 80164b4:	4640      	mov	r0, r8
 80164b6:	4649      	mov	r1, r9
 80164b8:	f7ea f85a 	bl	8000570 <__aeabi_dmul>
 80164bc:	a359      	add	r3, pc, #356	; (adr r3, 8016624 <__kernel_cos+0x19c>)
 80164be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164c2:	4604      	mov	r4, r0
 80164c4:	460d      	mov	r5, r1
 80164c6:	f7ea f853 	bl	8000570 <__aeabi_dmul>
 80164ca:	a358      	add	r3, pc, #352	; (adr r3, 801662c <__kernel_cos+0x1a4>)
 80164cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164d0:	f7e9 fe9c 	bl	800020c <__adddf3>
 80164d4:	4622      	mov	r2, r4
 80164d6:	462b      	mov	r3, r5
 80164d8:	f7ea f84a 	bl	8000570 <__aeabi_dmul>
 80164dc:	a355      	add	r3, pc, #340	; (adr r3, 8016634 <__kernel_cos+0x1ac>)
 80164de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164e2:	f7e9 fe91 	bl	8000208 <__aeabi_dsub>
 80164e6:	4622      	mov	r2, r4
 80164e8:	462b      	mov	r3, r5
 80164ea:	f7ea f841 	bl	8000570 <__aeabi_dmul>
 80164ee:	a353      	add	r3, pc, #332	; (adr r3, 801663c <__kernel_cos+0x1b4>)
 80164f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164f4:	f7e9 fe8a 	bl	800020c <__adddf3>
 80164f8:	4622      	mov	r2, r4
 80164fa:	462b      	mov	r3, r5
 80164fc:	f7ea f838 	bl	8000570 <__aeabi_dmul>
 8016500:	a350      	add	r3, pc, #320	; (adr r3, 8016644 <__kernel_cos+0x1bc>)
 8016502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016506:	f7e9 fe7f 	bl	8000208 <__aeabi_dsub>
 801650a:	4622      	mov	r2, r4
 801650c:	462b      	mov	r3, r5
 801650e:	f7ea f82f 	bl	8000570 <__aeabi_dmul>
 8016512:	a34e      	add	r3, pc, #312	; (adr r3, 801664c <__kernel_cos+0x1c4>)
 8016514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016518:	f7e9 fe78 	bl	800020c <__adddf3>
 801651c:	462b      	mov	r3, r5
 801651e:	4622      	mov	r2, r4
 8016520:	f7ea f826 	bl	8000570 <__aeabi_dmul>
 8016524:	4b3a      	ldr	r3, [pc, #232]	; (8016610 <__kernel_cos+0x188>)
 8016526:	429f      	cmp	r7, r3
 8016528:	4682      	mov	sl, r0
 801652a:	468b      	mov	fp, r1
 801652c:	dc2c      	bgt.n	8016588 <__kernel_cos+0x100>
 801652e:	2200      	movs	r2, #0
 8016530:	4b38      	ldr	r3, [pc, #224]	; (8016614 <__kernel_cos+0x18c>)
 8016532:	4620      	mov	r0, r4
 8016534:	4629      	mov	r1, r5
 8016536:	f7ea f81b 	bl	8000570 <__aeabi_dmul>
 801653a:	4652      	mov	r2, sl
 801653c:	4606      	mov	r6, r0
 801653e:	460f      	mov	r7, r1
 8016540:	465b      	mov	r3, fp
 8016542:	4620      	mov	r0, r4
 8016544:	4629      	mov	r1, r5
 8016546:	f7ea f813 	bl	8000570 <__aeabi_dmul>
 801654a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801654e:	4604      	mov	r4, r0
 8016550:	460d      	mov	r5, r1
 8016552:	4640      	mov	r0, r8
 8016554:	4649      	mov	r1, r9
 8016556:	f7ea f80b 	bl	8000570 <__aeabi_dmul>
 801655a:	4602      	mov	r2, r0
 801655c:	460b      	mov	r3, r1
 801655e:	4620      	mov	r0, r4
 8016560:	4629      	mov	r1, r5
 8016562:	f7e9 fe51 	bl	8000208 <__aeabi_dsub>
 8016566:	4602      	mov	r2, r0
 8016568:	460b      	mov	r3, r1
 801656a:	4630      	mov	r0, r6
 801656c:	4639      	mov	r1, r7
 801656e:	f7e9 fe4b 	bl	8000208 <__aeabi_dsub>
 8016572:	460b      	mov	r3, r1
 8016574:	4928      	ldr	r1, [pc, #160]	; (8016618 <__kernel_cos+0x190>)
 8016576:	4602      	mov	r2, r0
 8016578:	2000      	movs	r0, #0
 801657a:	f7e9 fe45 	bl	8000208 <__aeabi_dsub>
 801657e:	ec41 0b10 	vmov	d0, r0, r1
 8016582:	b005      	add	sp, #20
 8016584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016588:	4b24      	ldr	r3, [pc, #144]	; (801661c <__kernel_cos+0x194>)
 801658a:	4923      	ldr	r1, [pc, #140]	; (8016618 <__kernel_cos+0x190>)
 801658c:	429f      	cmp	r7, r3
 801658e:	bfd7      	itett	le
 8016590:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 8016594:	4f22      	ldrgt	r7, [pc, #136]	; (8016620 <__kernel_cos+0x198>)
 8016596:	2200      	movle	r2, #0
 8016598:	4616      	movle	r6, r2
 801659a:	bfd4      	ite	le
 801659c:	461f      	movle	r7, r3
 801659e:	2600      	movgt	r6, #0
 80165a0:	4632      	mov	r2, r6
 80165a2:	463b      	mov	r3, r7
 80165a4:	2000      	movs	r0, #0
 80165a6:	f7e9 fe2f 	bl	8000208 <__aeabi_dsub>
 80165aa:	2200      	movs	r2, #0
 80165ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80165b0:	4b18      	ldr	r3, [pc, #96]	; (8016614 <__kernel_cos+0x18c>)
 80165b2:	4620      	mov	r0, r4
 80165b4:	4629      	mov	r1, r5
 80165b6:	f7e9 ffdb 	bl	8000570 <__aeabi_dmul>
 80165ba:	4632      	mov	r2, r6
 80165bc:	463b      	mov	r3, r7
 80165be:	f7e9 fe23 	bl	8000208 <__aeabi_dsub>
 80165c2:	4652      	mov	r2, sl
 80165c4:	4606      	mov	r6, r0
 80165c6:	460f      	mov	r7, r1
 80165c8:	465b      	mov	r3, fp
 80165ca:	4620      	mov	r0, r4
 80165cc:	4629      	mov	r1, r5
 80165ce:	f7e9 ffcf 	bl	8000570 <__aeabi_dmul>
 80165d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80165d6:	4604      	mov	r4, r0
 80165d8:	460d      	mov	r5, r1
 80165da:	4640      	mov	r0, r8
 80165dc:	4649      	mov	r1, r9
 80165de:	f7e9 ffc7 	bl	8000570 <__aeabi_dmul>
 80165e2:	4602      	mov	r2, r0
 80165e4:	460b      	mov	r3, r1
 80165e6:	4620      	mov	r0, r4
 80165e8:	4629      	mov	r1, r5
 80165ea:	f7e9 fe0d 	bl	8000208 <__aeabi_dsub>
 80165ee:	4602      	mov	r2, r0
 80165f0:	460b      	mov	r3, r1
 80165f2:	4630      	mov	r0, r6
 80165f4:	4639      	mov	r1, r7
 80165f6:	f7e9 fe07 	bl	8000208 <__aeabi_dsub>
 80165fa:	4602      	mov	r2, r0
 80165fc:	460b      	mov	r3, r1
 80165fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016602:	e7ba      	b.n	801657a <__kernel_cos+0xf2>
 8016604:	2000      	movs	r0, #0
 8016606:	4904      	ldr	r1, [pc, #16]	; (8016618 <__kernel_cos+0x190>)
 8016608:	e7b9      	b.n	801657e <__kernel_cos+0xf6>
 801660a:	bf00      	nop
 801660c:	f3af 8000 	nop.w
 8016610:	3fd33332 	.word	0x3fd33332
 8016614:	3fe00000 	.word	0x3fe00000
 8016618:	3ff00000 	.word	0x3ff00000
 801661c:	3fe90000 	.word	0x3fe90000
 8016620:	3fd20000 	.word	0x3fd20000
 8016624:	be8838d4 	.word	0xbe8838d4
 8016628:	bda8fae9 	.word	0xbda8fae9
 801662c:	bdb4b1c4 	.word	0xbdb4b1c4
 8016630:	3e21ee9e 	.word	0x3e21ee9e
 8016634:	809c52ad 	.word	0x809c52ad
 8016638:	3e927e4f 	.word	0x3e927e4f
 801663c:	19cb1590 	.word	0x19cb1590
 8016640:	3efa01a0 	.word	0x3efa01a0
 8016644:	16c15177 	.word	0x16c15177
 8016648:	3f56c16c 	.word	0x3f56c16c
 801664c:	5555554c 	.word	0x5555554c
 8016650:	3fa55555 	.word	0x3fa55555
 8016654:	00000000 	.word	0x00000000

08016658 <__kernel_rem_pio2>:
 8016658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801665c:	ed2d 8b02 	vpush	{d8}
 8016660:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8016664:	1ed4      	subs	r4, r2, #3
 8016666:	9306      	str	r3, [sp, #24]
 8016668:	9102      	str	r1, [sp, #8]
 801666a:	4bc3      	ldr	r3, [pc, #780]	; (8016978 <__kernel_rem_pio2+0x320>)
 801666c:	99a4      	ldr	r1, [sp, #656]	; 0x290
 801666e:	9009      	str	r0, [sp, #36]	; 0x24
 8016670:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016674:	9300      	str	r3, [sp, #0]
 8016676:	9b06      	ldr	r3, [sp, #24]
 8016678:	3b01      	subs	r3, #1
 801667a:	9304      	str	r3, [sp, #16]
 801667c:	2318      	movs	r3, #24
 801667e:	fb94 f4f3 	sdiv	r4, r4, r3
 8016682:	f06f 0317 	mvn.w	r3, #23
 8016686:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801668a:	fb04 3303 	mla	r3, r4, r3, r3
 801668e:	eb03 0a02 	add.w	sl, r3, r2
 8016692:	9b00      	ldr	r3, [sp, #0]
 8016694:	9a04      	ldr	r2, [sp, #16]
 8016696:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8016968 <__kernel_rem_pio2+0x310>
 801669a:	eb03 0802 	add.w	r8, r3, r2
 801669e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80166a0:	1aa7      	subs	r7, r4, r2
 80166a2:	ae20      	add	r6, sp, #128	; 0x80
 80166a4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80166a8:	2500      	movs	r5, #0
 80166aa:	4545      	cmp	r5, r8
 80166ac:	dd13      	ble.n	80166d6 <__kernel_rem_pio2+0x7e>
 80166ae:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8016968 <__kernel_rem_pio2+0x310>
 80166b2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80166b6:	2600      	movs	r6, #0
 80166b8:	9b00      	ldr	r3, [sp, #0]
 80166ba:	429e      	cmp	r6, r3
 80166bc:	dc32      	bgt.n	8016724 <__kernel_rem_pio2+0xcc>
 80166be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166c0:	9303      	str	r3, [sp, #12]
 80166c2:	9b06      	ldr	r3, [sp, #24]
 80166c4:	199d      	adds	r5, r3, r6
 80166c6:	ab20      	add	r3, sp, #128	; 0x80
 80166c8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80166cc:	9308      	str	r3, [sp, #32]
 80166ce:	ec59 8b18 	vmov	r8, r9, d8
 80166d2:	2700      	movs	r7, #0
 80166d4:	e01f      	b.n	8016716 <__kernel_rem_pio2+0xbe>
 80166d6:	42ef      	cmn	r7, r5
 80166d8:	d407      	bmi.n	80166ea <__kernel_rem_pio2+0x92>
 80166da:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80166de:	f7e9 fee1 	bl	80004a4 <__aeabi_i2d>
 80166e2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80166e6:	3501      	adds	r5, #1
 80166e8:	e7df      	b.n	80166aa <__kernel_rem_pio2+0x52>
 80166ea:	ec51 0b18 	vmov	r0, r1, d8
 80166ee:	e7f8      	b.n	80166e2 <__kernel_rem_pio2+0x8a>
 80166f0:	9908      	ldr	r1, [sp, #32]
 80166f2:	9d03      	ldr	r5, [sp, #12]
 80166f4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80166f8:	9108      	str	r1, [sp, #32]
 80166fa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80166fe:	9503      	str	r5, [sp, #12]
 8016700:	f7e9 ff36 	bl	8000570 <__aeabi_dmul>
 8016704:	4602      	mov	r2, r0
 8016706:	460b      	mov	r3, r1
 8016708:	4640      	mov	r0, r8
 801670a:	4649      	mov	r1, r9
 801670c:	f7e9 fd7e 	bl	800020c <__adddf3>
 8016710:	3701      	adds	r7, #1
 8016712:	4680      	mov	r8, r0
 8016714:	4689      	mov	r9, r1
 8016716:	9b04      	ldr	r3, [sp, #16]
 8016718:	429f      	cmp	r7, r3
 801671a:	dde9      	ble.n	80166f0 <__kernel_rem_pio2+0x98>
 801671c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8016720:	3601      	adds	r6, #1
 8016722:	e7c9      	b.n	80166b8 <__kernel_rem_pio2+0x60>
 8016724:	9b00      	ldr	r3, [sp, #0]
 8016726:	9f00      	ldr	r7, [sp, #0]
 8016728:	aa0c      	add	r2, sp, #48	; 0x30
 801672a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801672e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016730:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8016732:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8016736:	930a      	str	r3, [sp, #40]	; 0x28
 8016738:	ab98      	add	r3, sp, #608	; 0x260
 801673a:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 801673e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8016742:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016746:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801674a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801674e:	9308      	str	r3, [sp, #32]
 8016750:	9a08      	ldr	r2, [sp, #32]
 8016752:	ab98      	add	r3, sp, #608	; 0x260
 8016754:	4413      	add	r3, r2
 8016756:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 801675a:	2600      	movs	r6, #0
 801675c:	1bbb      	subs	r3, r7, r6
 801675e:	2b00      	cmp	r3, #0
 8016760:	dc77      	bgt.n	8016852 <__kernel_rem_pio2+0x1fa>
 8016762:	ec49 8b10 	vmov	d0, r8, r9
 8016766:	4650      	mov	r0, sl
 8016768:	f000 fc1a 	bl	8016fa0 <scalbn>
 801676c:	ec55 4b10 	vmov	r4, r5, d0
 8016770:	2200      	movs	r2, #0
 8016772:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8016776:	ee10 0a10 	vmov	r0, s0
 801677a:	4629      	mov	r1, r5
 801677c:	f7e9 fef8 	bl	8000570 <__aeabi_dmul>
 8016780:	ec41 0b10 	vmov	d0, r0, r1
 8016784:	f000 fb7c 	bl	8016e80 <floor>
 8016788:	2200      	movs	r2, #0
 801678a:	ec51 0b10 	vmov	r0, r1, d0
 801678e:	4b7b      	ldr	r3, [pc, #492]	; (801697c <__kernel_rem_pio2+0x324>)
 8016790:	f7e9 feee 	bl	8000570 <__aeabi_dmul>
 8016794:	4602      	mov	r2, r0
 8016796:	460b      	mov	r3, r1
 8016798:	4620      	mov	r0, r4
 801679a:	4629      	mov	r1, r5
 801679c:	f7e9 fd34 	bl	8000208 <__aeabi_dsub>
 80167a0:	460d      	mov	r5, r1
 80167a2:	4604      	mov	r4, r0
 80167a4:	f7ea f994 	bl	8000ad0 <__aeabi_d2iz>
 80167a8:	9003      	str	r0, [sp, #12]
 80167aa:	f7e9 fe7b 	bl	80004a4 <__aeabi_i2d>
 80167ae:	4602      	mov	r2, r0
 80167b0:	460b      	mov	r3, r1
 80167b2:	4620      	mov	r0, r4
 80167b4:	4629      	mov	r1, r5
 80167b6:	f7e9 fd27 	bl	8000208 <__aeabi_dsub>
 80167ba:	f1ba 0f00 	cmp.w	sl, #0
 80167be:	4680      	mov	r8, r0
 80167c0:	4689      	mov	r9, r1
 80167c2:	dd6b      	ble.n	801689c <__kernel_rem_pio2+0x244>
 80167c4:	1e7a      	subs	r2, r7, #1
 80167c6:	ab0c      	add	r3, sp, #48	; 0x30
 80167c8:	f1ca 0118 	rsb	r1, sl, #24
 80167cc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80167d0:	9c03      	ldr	r4, [sp, #12]
 80167d2:	fa40 f301 	asr.w	r3, r0, r1
 80167d6:	441c      	add	r4, r3
 80167d8:	408b      	lsls	r3, r1
 80167da:	1ac0      	subs	r0, r0, r3
 80167dc:	ab0c      	add	r3, sp, #48	; 0x30
 80167de:	9403      	str	r4, [sp, #12]
 80167e0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80167e4:	f1ca 0317 	rsb	r3, sl, #23
 80167e8:	fa40 fb03 	asr.w	fp, r0, r3
 80167ec:	f1bb 0f00 	cmp.w	fp, #0
 80167f0:	dd62      	ble.n	80168b8 <__kernel_rem_pio2+0x260>
 80167f2:	9b03      	ldr	r3, [sp, #12]
 80167f4:	2200      	movs	r2, #0
 80167f6:	3301      	adds	r3, #1
 80167f8:	9303      	str	r3, [sp, #12]
 80167fa:	4614      	mov	r4, r2
 80167fc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8016800:	4297      	cmp	r7, r2
 8016802:	f300 8089 	bgt.w	8016918 <__kernel_rem_pio2+0x2c0>
 8016806:	f1ba 0f00 	cmp.w	sl, #0
 801680a:	dd07      	ble.n	801681c <__kernel_rem_pio2+0x1c4>
 801680c:	f1ba 0f01 	cmp.w	sl, #1
 8016810:	f000 8096 	beq.w	8016940 <__kernel_rem_pio2+0x2e8>
 8016814:	f1ba 0f02 	cmp.w	sl, #2
 8016818:	f000 809c 	beq.w	8016954 <__kernel_rem_pio2+0x2fc>
 801681c:	f1bb 0f02 	cmp.w	fp, #2
 8016820:	d14a      	bne.n	80168b8 <__kernel_rem_pio2+0x260>
 8016822:	4642      	mov	r2, r8
 8016824:	464b      	mov	r3, r9
 8016826:	2000      	movs	r0, #0
 8016828:	4955      	ldr	r1, [pc, #340]	; (8016980 <__kernel_rem_pio2+0x328>)
 801682a:	f7e9 fced 	bl	8000208 <__aeabi_dsub>
 801682e:	4680      	mov	r8, r0
 8016830:	4689      	mov	r9, r1
 8016832:	2c00      	cmp	r4, #0
 8016834:	d040      	beq.n	80168b8 <__kernel_rem_pio2+0x260>
 8016836:	4650      	mov	r0, sl
 8016838:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8016970 <__kernel_rem_pio2+0x318>
 801683c:	f000 fbb0 	bl	8016fa0 <scalbn>
 8016840:	4640      	mov	r0, r8
 8016842:	4649      	mov	r1, r9
 8016844:	ec53 2b10 	vmov	r2, r3, d0
 8016848:	f7e9 fcde 	bl	8000208 <__aeabi_dsub>
 801684c:	4680      	mov	r8, r0
 801684e:	4689      	mov	r9, r1
 8016850:	e032      	b.n	80168b8 <__kernel_rem_pio2+0x260>
 8016852:	2200      	movs	r2, #0
 8016854:	4b4b      	ldr	r3, [pc, #300]	; (8016984 <__kernel_rem_pio2+0x32c>)
 8016856:	4640      	mov	r0, r8
 8016858:	4649      	mov	r1, r9
 801685a:	f7e9 fe89 	bl	8000570 <__aeabi_dmul>
 801685e:	f7ea f937 	bl	8000ad0 <__aeabi_d2iz>
 8016862:	f7e9 fe1f 	bl	80004a4 <__aeabi_i2d>
 8016866:	2200      	movs	r2, #0
 8016868:	4b47      	ldr	r3, [pc, #284]	; (8016988 <__kernel_rem_pio2+0x330>)
 801686a:	4604      	mov	r4, r0
 801686c:	460d      	mov	r5, r1
 801686e:	f7e9 fe7f 	bl	8000570 <__aeabi_dmul>
 8016872:	4602      	mov	r2, r0
 8016874:	460b      	mov	r3, r1
 8016876:	4640      	mov	r0, r8
 8016878:	4649      	mov	r1, r9
 801687a:	f7e9 fcc5 	bl	8000208 <__aeabi_dsub>
 801687e:	f7ea f927 	bl	8000ad0 <__aeabi_d2iz>
 8016882:	ab0c      	add	r3, sp, #48	; 0x30
 8016884:	4629      	mov	r1, r5
 8016886:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 801688a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801688e:	4620      	mov	r0, r4
 8016890:	f7e9 fcbc 	bl	800020c <__adddf3>
 8016894:	3601      	adds	r6, #1
 8016896:	4680      	mov	r8, r0
 8016898:	4689      	mov	r9, r1
 801689a:	e75f      	b.n	801675c <__kernel_rem_pio2+0x104>
 801689c:	d106      	bne.n	80168ac <__kernel_rem_pio2+0x254>
 801689e:	1e7b      	subs	r3, r7, #1
 80168a0:	aa0c      	add	r2, sp, #48	; 0x30
 80168a2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80168a6:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80168aa:	e79f      	b.n	80167ec <__kernel_rem_pio2+0x194>
 80168ac:	2200      	movs	r2, #0
 80168ae:	4b37      	ldr	r3, [pc, #220]	; (801698c <__kernel_rem_pio2+0x334>)
 80168b0:	f7ea f8e4 	bl	8000a7c <__aeabi_dcmpge>
 80168b4:	bb68      	cbnz	r0, 8016912 <__kernel_rem_pio2+0x2ba>
 80168b6:	4683      	mov	fp, r0
 80168b8:	2200      	movs	r2, #0
 80168ba:	2300      	movs	r3, #0
 80168bc:	4640      	mov	r0, r8
 80168be:	4649      	mov	r1, r9
 80168c0:	f7ea f8be 	bl	8000a40 <__aeabi_dcmpeq>
 80168c4:	2800      	cmp	r0, #0
 80168c6:	f000 80c1 	beq.w	8016a4c <__kernel_rem_pio2+0x3f4>
 80168ca:	1e7c      	subs	r4, r7, #1
 80168cc:	4623      	mov	r3, r4
 80168ce:	2200      	movs	r2, #0
 80168d0:	9900      	ldr	r1, [sp, #0]
 80168d2:	428b      	cmp	r3, r1
 80168d4:	da5c      	bge.n	8016990 <__kernel_rem_pio2+0x338>
 80168d6:	2a00      	cmp	r2, #0
 80168d8:	f040 808b 	bne.w	80169f2 <__kernel_rem_pio2+0x39a>
 80168dc:	2401      	movs	r4, #1
 80168de:	f06f 0203 	mvn.w	r2, #3
 80168e2:	fb02 f304 	mul.w	r3, r2, r4
 80168e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80168e8:	58cb      	ldr	r3, [r1, r3]
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d056      	beq.n	801699c <__kernel_rem_pio2+0x344>
 80168ee:	9b08      	ldr	r3, [sp, #32]
 80168f0:	aa98      	add	r2, sp, #608	; 0x260
 80168f2:	4413      	add	r3, r2
 80168f4:	f1a3 0b90 	sub.w	fp, r3, #144	; 0x90
 80168f8:	9b06      	ldr	r3, [sp, #24]
 80168fa:	19dd      	adds	r5, r3, r7
 80168fc:	ab20      	add	r3, sp, #128	; 0x80
 80168fe:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016902:	19e3      	adds	r3, r4, r7
 8016904:	1c7e      	adds	r6, r7, #1
 8016906:	9303      	str	r3, [sp, #12]
 8016908:	9b03      	ldr	r3, [sp, #12]
 801690a:	429e      	cmp	r6, r3
 801690c:	dd48      	ble.n	80169a0 <__kernel_rem_pio2+0x348>
 801690e:	461f      	mov	r7, r3
 8016910:	e712      	b.n	8016738 <__kernel_rem_pio2+0xe0>
 8016912:	f04f 0b02 	mov.w	fp, #2
 8016916:	e76c      	b.n	80167f2 <__kernel_rem_pio2+0x19a>
 8016918:	ab0c      	add	r3, sp, #48	; 0x30
 801691a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801691e:	b94c      	cbnz	r4, 8016934 <__kernel_rem_pio2+0x2dc>
 8016920:	b12b      	cbz	r3, 801692e <__kernel_rem_pio2+0x2d6>
 8016922:	a80c      	add	r0, sp, #48	; 0x30
 8016924:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8016928:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801692c:	2301      	movs	r3, #1
 801692e:	3201      	adds	r2, #1
 8016930:	461c      	mov	r4, r3
 8016932:	e765      	b.n	8016800 <__kernel_rem_pio2+0x1a8>
 8016934:	a80c      	add	r0, sp, #48	; 0x30
 8016936:	1acb      	subs	r3, r1, r3
 8016938:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801693c:	4623      	mov	r3, r4
 801693e:	e7f6      	b.n	801692e <__kernel_rem_pio2+0x2d6>
 8016940:	1e7a      	subs	r2, r7, #1
 8016942:	ab0c      	add	r3, sp, #48	; 0x30
 8016944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016948:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801694c:	a90c      	add	r1, sp, #48	; 0x30
 801694e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8016952:	e763      	b.n	801681c <__kernel_rem_pio2+0x1c4>
 8016954:	1e7a      	subs	r2, r7, #1
 8016956:	ab0c      	add	r3, sp, #48	; 0x30
 8016958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801695c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8016960:	e7f4      	b.n	801694c <__kernel_rem_pio2+0x2f4>
 8016962:	bf00      	nop
 8016964:	f3af 8000 	nop.w
	...
 8016974:	3ff00000 	.word	0x3ff00000
 8016978:	08083cd8 	.word	0x08083cd8
 801697c:	40200000 	.word	0x40200000
 8016980:	3ff00000 	.word	0x3ff00000
 8016984:	3e700000 	.word	0x3e700000
 8016988:	41700000 	.word	0x41700000
 801698c:	3fe00000 	.word	0x3fe00000
 8016990:	a90c      	add	r1, sp, #48	; 0x30
 8016992:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8016996:	3b01      	subs	r3, #1
 8016998:	430a      	orrs	r2, r1
 801699a:	e799      	b.n	80168d0 <__kernel_rem_pio2+0x278>
 801699c:	3401      	adds	r4, #1
 801699e:	e7a0      	b.n	80168e2 <__kernel_rem_pio2+0x28a>
 80169a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80169a2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80169a6:	f7e9 fd7d 	bl	80004a4 <__aeabi_i2d>
 80169aa:	e8e5 0102 	strd	r0, r1, [r5], #8
 80169ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169b0:	9508      	str	r5, [sp, #32]
 80169b2:	461c      	mov	r4, r3
 80169b4:	2700      	movs	r7, #0
 80169b6:	f04f 0800 	mov.w	r8, #0
 80169ba:	f04f 0900 	mov.w	r9, #0
 80169be:	9b04      	ldr	r3, [sp, #16]
 80169c0:	429f      	cmp	r7, r3
 80169c2:	dd03      	ble.n	80169cc <__kernel_rem_pio2+0x374>
 80169c4:	e8eb 8902 	strd	r8, r9, [fp], #8
 80169c8:	3601      	adds	r6, #1
 80169ca:	e79d      	b.n	8016908 <__kernel_rem_pio2+0x2b0>
 80169cc:	9908      	ldr	r1, [sp, #32]
 80169ce:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80169d2:	9108      	str	r1, [sp, #32]
 80169d4:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80169d8:	f7e9 fdca 	bl	8000570 <__aeabi_dmul>
 80169dc:	4602      	mov	r2, r0
 80169de:	460b      	mov	r3, r1
 80169e0:	4640      	mov	r0, r8
 80169e2:	4649      	mov	r1, r9
 80169e4:	f7e9 fc12 	bl	800020c <__adddf3>
 80169e8:	3701      	adds	r7, #1
 80169ea:	4680      	mov	r8, r0
 80169ec:	4689      	mov	r9, r1
 80169ee:	e7e6      	b.n	80169be <__kernel_rem_pio2+0x366>
 80169f0:	3c01      	subs	r4, #1
 80169f2:	ab0c      	add	r3, sp, #48	; 0x30
 80169f4:	f1aa 0a18 	sub.w	sl, sl, #24
 80169f8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d0f7      	beq.n	80169f0 <__kernel_rem_pio2+0x398>
 8016a00:	4650      	mov	r0, sl
 8016a02:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 8016cd8 <__kernel_rem_pio2+0x680>
 8016a06:	f000 facb 	bl	8016fa0 <scalbn>
 8016a0a:	00e5      	lsls	r5, r4, #3
 8016a0c:	ab98      	add	r3, sp, #608	; 0x260
 8016a0e:	eb03 0905 	add.w	r9, r3, r5
 8016a12:	ec57 6b10 	vmov	r6, r7, d0
 8016a16:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 8016a1a:	46a0      	mov	r8, r4
 8016a1c:	f1b8 0f00 	cmp.w	r8, #0
 8016a20:	da4d      	bge.n	8016abe <__kernel_rem_pio2+0x466>
 8016a22:	ed9f 8baf 	vldr	d8, [pc, #700]	; 8016ce0 <__kernel_rem_pio2+0x688>
 8016a26:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 8016a2a:	2300      	movs	r3, #0
 8016a2c:	9304      	str	r3, [sp, #16]
 8016a2e:	4657      	mov	r7, sl
 8016a30:	9b04      	ldr	r3, [sp, #16]
 8016a32:	ebb4 0903 	subs.w	r9, r4, r3
 8016a36:	d476      	bmi.n	8016b26 <__kernel_rem_pio2+0x4ce>
 8016a38:	4bab      	ldr	r3, [pc, #684]	; (8016ce8 <__kernel_rem_pio2+0x690>)
 8016a3a:	461e      	mov	r6, r3
 8016a3c:	ab70      	add	r3, sp, #448	; 0x1c0
 8016a3e:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8016a42:	ed8d 8b06 	vstr	d8, [sp, #24]
 8016a46:	f04f 0800 	mov.w	r8, #0
 8016a4a:	e05e      	b.n	8016b0a <__kernel_rem_pio2+0x4b2>
 8016a4c:	f1ca 0000 	rsb	r0, sl, #0
 8016a50:	ec49 8b10 	vmov	d0, r8, r9
 8016a54:	f000 faa4 	bl	8016fa0 <scalbn>
 8016a58:	ec55 4b10 	vmov	r4, r5, d0
 8016a5c:	2200      	movs	r2, #0
 8016a5e:	4ba3      	ldr	r3, [pc, #652]	; (8016cec <__kernel_rem_pio2+0x694>)
 8016a60:	ee10 0a10 	vmov	r0, s0
 8016a64:	4629      	mov	r1, r5
 8016a66:	f7ea f809 	bl	8000a7c <__aeabi_dcmpge>
 8016a6a:	b1f8      	cbz	r0, 8016aac <__kernel_rem_pio2+0x454>
 8016a6c:	2200      	movs	r2, #0
 8016a6e:	4ba0      	ldr	r3, [pc, #640]	; (8016cf0 <__kernel_rem_pio2+0x698>)
 8016a70:	4620      	mov	r0, r4
 8016a72:	4629      	mov	r1, r5
 8016a74:	f7e9 fd7c 	bl	8000570 <__aeabi_dmul>
 8016a78:	f7ea f82a 	bl	8000ad0 <__aeabi_d2iz>
 8016a7c:	4606      	mov	r6, r0
 8016a7e:	f7e9 fd11 	bl	80004a4 <__aeabi_i2d>
 8016a82:	2200      	movs	r2, #0
 8016a84:	4b99      	ldr	r3, [pc, #612]	; (8016cec <__kernel_rem_pio2+0x694>)
 8016a86:	f7e9 fd73 	bl	8000570 <__aeabi_dmul>
 8016a8a:	460b      	mov	r3, r1
 8016a8c:	4602      	mov	r2, r0
 8016a8e:	4629      	mov	r1, r5
 8016a90:	4620      	mov	r0, r4
 8016a92:	f7e9 fbb9 	bl	8000208 <__aeabi_dsub>
 8016a96:	f7ea f81b 	bl	8000ad0 <__aeabi_d2iz>
 8016a9a:	1c7c      	adds	r4, r7, #1
 8016a9c:	ab0c      	add	r3, sp, #48	; 0x30
 8016a9e:	f10a 0a18 	add.w	sl, sl, #24
 8016aa2:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8016aa6:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8016aaa:	e7a9      	b.n	8016a00 <__kernel_rem_pio2+0x3a8>
 8016aac:	4620      	mov	r0, r4
 8016aae:	4629      	mov	r1, r5
 8016ab0:	f7ea f80e 	bl	8000ad0 <__aeabi_d2iz>
 8016ab4:	ab0c      	add	r3, sp, #48	; 0x30
 8016ab6:	463c      	mov	r4, r7
 8016ab8:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8016abc:	e7a0      	b.n	8016a00 <__kernel_rem_pio2+0x3a8>
 8016abe:	ab0c      	add	r3, sp, #48	; 0x30
 8016ac0:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8016ac4:	f7e9 fcee 	bl	80004a4 <__aeabi_i2d>
 8016ac8:	4632      	mov	r2, r6
 8016aca:	463b      	mov	r3, r7
 8016acc:	f7e9 fd50 	bl	8000570 <__aeabi_dmul>
 8016ad0:	2200      	movs	r2, #0
 8016ad2:	e969 0102 	strd	r0, r1, [r9, #-8]!
 8016ad6:	4b86      	ldr	r3, [pc, #536]	; (8016cf0 <__kernel_rem_pio2+0x698>)
 8016ad8:	4630      	mov	r0, r6
 8016ada:	4639      	mov	r1, r7
 8016adc:	f7e9 fd48 	bl	8000570 <__aeabi_dmul>
 8016ae0:	f108 38ff 	add.w	r8, r8, #4294967295
 8016ae4:	4606      	mov	r6, r0
 8016ae6:	460f      	mov	r7, r1
 8016ae8:	e798      	b.n	8016a1c <__kernel_rem_pio2+0x3c4>
 8016aea:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8016aee:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8016af2:	f7e9 fd3d 	bl	8000570 <__aeabi_dmul>
 8016af6:	4602      	mov	r2, r0
 8016af8:	460b      	mov	r3, r1
 8016afa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016afe:	f7e9 fb85 	bl	800020c <__adddf3>
 8016b02:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016b06:	f108 0801 	add.w	r8, r8, #1
 8016b0a:	9b00      	ldr	r3, [sp, #0]
 8016b0c:	4598      	cmp	r8, r3
 8016b0e:	dc02      	bgt.n	8016b16 <__kernel_rem_pio2+0x4be>
 8016b10:	9b04      	ldr	r3, [sp, #16]
 8016b12:	4598      	cmp	r8, r3
 8016b14:	dde9      	ble.n	8016aea <__kernel_rem_pio2+0x492>
 8016b16:	9b04      	ldr	r3, [sp, #16]
 8016b18:	ed9d 7b06 	vldr	d7, [sp, #24]
 8016b1c:	3301      	adds	r3, #1
 8016b1e:	ecaa 7b02 	vstmia	sl!, {d7}
 8016b22:	9304      	str	r3, [sp, #16]
 8016b24:	e784      	b.n	8016a30 <__kernel_rem_pio2+0x3d8>
 8016b26:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8016b28:	2b03      	cmp	r3, #3
 8016b2a:	d85d      	bhi.n	8016be8 <__kernel_rem_pio2+0x590>
 8016b2c:	e8df f003 	tbb	[pc, r3]
 8016b30:	0226264b 	.word	0x0226264b
 8016b34:	ab98      	add	r3, sp, #608	; 0x260
 8016b36:	441d      	add	r5, r3
 8016b38:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8016b3c:	462e      	mov	r6, r5
 8016b3e:	46a2      	mov	sl, r4
 8016b40:	f1ba 0f00 	cmp.w	sl, #0
 8016b44:	dc6e      	bgt.n	8016c24 <__kernel_rem_pio2+0x5cc>
 8016b46:	462e      	mov	r6, r5
 8016b48:	46a2      	mov	sl, r4
 8016b4a:	f1ba 0f01 	cmp.w	sl, #1
 8016b4e:	f300 808a 	bgt.w	8016c66 <__kernel_rem_pio2+0x60e>
 8016b52:	2000      	movs	r0, #0
 8016b54:	2100      	movs	r1, #0
 8016b56:	2c01      	cmp	r4, #1
 8016b58:	f300 80a6 	bgt.w	8016ca8 <__kernel_rem_pio2+0x650>
 8016b5c:	f1bb 0f00 	cmp.w	fp, #0
 8016b60:	f040 80a8 	bne.w	8016cb4 <__kernel_rem_pio2+0x65c>
 8016b64:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 8016b68:	9c02      	ldr	r4, [sp, #8]
 8016b6a:	e9c4 2300 	strd	r2, r3, [r4]
 8016b6e:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 8016b72:	e9c4 0104 	strd	r0, r1, [r4, #16]
 8016b76:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8016b7a:	e035      	b.n	8016be8 <__kernel_rem_pio2+0x590>
 8016b7c:	3508      	adds	r5, #8
 8016b7e:	ab48      	add	r3, sp, #288	; 0x120
 8016b80:	441d      	add	r5, r3
 8016b82:	4626      	mov	r6, r4
 8016b84:	2000      	movs	r0, #0
 8016b86:	2100      	movs	r1, #0
 8016b88:	2e00      	cmp	r6, #0
 8016b8a:	da3c      	bge.n	8016c06 <__kernel_rem_pio2+0x5ae>
 8016b8c:	f1bb 0f00 	cmp.w	fp, #0
 8016b90:	d03f      	beq.n	8016c12 <__kernel_rem_pio2+0x5ba>
 8016b92:	4602      	mov	r2, r0
 8016b94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016b98:	9d02      	ldr	r5, [sp, #8]
 8016b9a:	e9c5 2300 	strd	r2, r3, [r5]
 8016b9e:	4602      	mov	r2, r0
 8016ba0:	460b      	mov	r3, r1
 8016ba2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8016ba6:	f7e9 fb2f 	bl	8000208 <__aeabi_dsub>
 8016baa:	ae4a      	add	r6, sp, #296	; 0x128
 8016bac:	2501      	movs	r5, #1
 8016bae:	42ac      	cmp	r4, r5
 8016bb0:	da32      	bge.n	8016c18 <__kernel_rem_pio2+0x5c0>
 8016bb2:	f1bb 0f00 	cmp.w	fp, #0
 8016bb6:	d002      	beq.n	8016bbe <__kernel_rem_pio2+0x566>
 8016bb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016bbc:	4619      	mov	r1, r3
 8016bbe:	9b02      	ldr	r3, [sp, #8]
 8016bc0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8016bc4:	e010      	b.n	8016be8 <__kernel_rem_pio2+0x590>
 8016bc6:	ab98      	add	r3, sp, #608	; 0x260
 8016bc8:	441d      	add	r5, r3
 8016bca:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8016bce:	2000      	movs	r0, #0
 8016bd0:	2100      	movs	r1, #0
 8016bd2:	2c00      	cmp	r4, #0
 8016bd4:	da11      	bge.n	8016bfa <__kernel_rem_pio2+0x5a2>
 8016bd6:	f1bb 0f00 	cmp.w	fp, #0
 8016bda:	d002      	beq.n	8016be2 <__kernel_rem_pio2+0x58a>
 8016bdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016be0:	4619      	mov	r1, r3
 8016be2:	9b02      	ldr	r3, [sp, #8]
 8016be4:	e9c3 0100 	strd	r0, r1, [r3]
 8016be8:	9b03      	ldr	r3, [sp, #12]
 8016bea:	f003 0007 	and.w	r0, r3, #7
 8016bee:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8016bf2:	ecbd 8b02 	vpop	{d8}
 8016bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bfa:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8016bfe:	f7e9 fb05 	bl	800020c <__adddf3>
 8016c02:	3c01      	subs	r4, #1
 8016c04:	e7e5      	b.n	8016bd2 <__kernel_rem_pio2+0x57a>
 8016c06:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8016c0a:	f7e9 faff 	bl	800020c <__adddf3>
 8016c0e:	3e01      	subs	r6, #1
 8016c10:	e7ba      	b.n	8016b88 <__kernel_rem_pio2+0x530>
 8016c12:	4602      	mov	r2, r0
 8016c14:	460b      	mov	r3, r1
 8016c16:	e7bf      	b.n	8016b98 <__kernel_rem_pio2+0x540>
 8016c18:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8016c1c:	f7e9 faf6 	bl	800020c <__adddf3>
 8016c20:	3501      	adds	r5, #1
 8016c22:	e7c4      	b.n	8016bae <__kernel_rem_pio2+0x556>
 8016c24:	ed16 7b02 	vldr	d7, [r6, #-8]
 8016c28:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8016c2c:	ec53 2b17 	vmov	r2, r3, d7
 8016c30:	4640      	mov	r0, r8
 8016c32:	4649      	mov	r1, r9
 8016c34:	ed8d 7b00 	vstr	d7, [sp]
 8016c38:	f7e9 fae8 	bl	800020c <__adddf3>
 8016c3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016c40:	4602      	mov	r2, r0
 8016c42:	460b      	mov	r3, r1
 8016c44:	4640      	mov	r0, r8
 8016c46:	4649      	mov	r1, r9
 8016c48:	f7e9 fade 	bl	8000208 <__aeabi_dsub>
 8016c4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016c50:	f7e9 fadc 	bl	800020c <__adddf3>
 8016c54:	ed9d 7b04 	vldr	d7, [sp, #16]
 8016c58:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8016c5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016c60:	ed06 7b02 	vstr	d7, [r6, #-8]
 8016c64:	e76c      	b.n	8016b40 <__kernel_rem_pio2+0x4e8>
 8016c66:	ed16 7b02 	vldr	d7, [r6, #-8]
 8016c6a:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8016c6e:	ec53 2b17 	vmov	r2, r3, d7
 8016c72:	4640      	mov	r0, r8
 8016c74:	4649      	mov	r1, r9
 8016c76:	ed8d 7b00 	vstr	d7, [sp]
 8016c7a:	f7e9 fac7 	bl	800020c <__adddf3>
 8016c7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016c82:	4602      	mov	r2, r0
 8016c84:	460b      	mov	r3, r1
 8016c86:	4640      	mov	r0, r8
 8016c88:	4649      	mov	r1, r9
 8016c8a:	f7e9 fabd 	bl	8000208 <__aeabi_dsub>
 8016c8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016c92:	f7e9 fabb 	bl	800020c <__adddf3>
 8016c96:	ed9d 7b04 	vldr	d7, [sp, #16]
 8016c9a:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8016c9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016ca2:	ed06 7b02 	vstr	d7, [r6, #-8]
 8016ca6:	e750      	b.n	8016b4a <__kernel_rem_pio2+0x4f2>
 8016ca8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8016cac:	f7e9 faae 	bl	800020c <__adddf3>
 8016cb0:	3c01      	subs	r4, #1
 8016cb2:	e750      	b.n	8016b56 <__kernel_rem_pio2+0x4fe>
 8016cb4:	9a02      	ldr	r2, [sp, #8]
 8016cb6:	683b      	ldr	r3, [r7, #0]
 8016cb8:	6013      	str	r3, [r2, #0]
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	6110      	str	r0, [r2, #16]
 8016cbe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016cc2:	6053      	str	r3, [r2, #4]
 8016cc4:	68bb      	ldr	r3, [r7, #8]
 8016cc6:	6093      	str	r3, [r2, #8]
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016cce:	60d3      	str	r3, [r2, #12]
 8016cd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016cd4:	6153      	str	r3, [r2, #20]
 8016cd6:	e787      	b.n	8016be8 <__kernel_rem_pio2+0x590>
 8016cd8:	00000000 	.word	0x00000000
 8016cdc:	3ff00000 	.word	0x3ff00000
	...
 8016ce8:	08083c98 	.word	0x08083c98
 8016cec:	41700000 	.word	0x41700000
 8016cf0:	3e700000 	.word	0x3e700000
 8016cf4:	00000000 	.word	0x00000000

08016cf8 <__kernel_sin>:
 8016cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cfc:	ec55 4b10 	vmov	r4, r5, d0
 8016d00:	b085      	sub	sp, #20
 8016d02:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8016d06:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8016d0a:	ed8d 1b00 	vstr	d1, [sp]
 8016d0e:	9002      	str	r0, [sp, #8]
 8016d10:	da06      	bge.n	8016d20 <__kernel_sin+0x28>
 8016d12:	ee10 0a10 	vmov	r0, s0
 8016d16:	4629      	mov	r1, r5
 8016d18:	f7e9 feda 	bl	8000ad0 <__aeabi_d2iz>
 8016d1c:	2800      	cmp	r0, #0
 8016d1e:	d051      	beq.n	8016dc4 <__kernel_sin+0xcc>
 8016d20:	4622      	mov	r2, r4
 8016d22:	462b      	mov	r3, r5
 8016d24:	4620      	mov	r0, r4
 8016d26:	4629      	mov	r1, r5
 8016d28:	f7e9 fc22 	bl	8000570 <__aeabi_dmul>
 8016d2c:	4682      	mov	sl, r0
 8016d2e:	468b      	mov	fp, r1
 8016d30:	4602      	mov	r2, r0
 8016d32:	460b      	mov	r3, r1
 8016d34:	4620      	mov	r0, r4
 8016d36:	4629      	mov	r1, r5
 8016d38:	f7e9 fc1a 	bl	8000570 <__aeabi_dmul>
 8016d3c:	a341      	add	r3, pc, #260	; (adr r3, 8016e44 <__kernel_sin+0x14c>)
 8016d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d42:	4680      	mov	r8, r0
 8016d44:	4689      	mov	r9, r1
 8016d46:	4650      	mov	r0, sl
 8016d48:	4659      	mov	r1, fp
 8016d4a:	f7e9 fc11 	bl	8000570 <__aeabi_dmul>
 8016d4e:	a33f      	add	r3, pc, #252	; (adr r3, 8016e4c <__kernel_sin+0x154>)
 8016d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d54:	f7e9 fa58 	bl	8000208 <__aeabi_dsub>
 8016d58:	4652      	mov	r2, sl
 8016d5a:	465b      	mov	r3, fp
 8016d5c:	f7e9 fc08 	bl	8000570 <__aeabi_dmul>
 8016d60:	a33c      	add	r3, pc, #240	; (adr r3, 8016e54 <__kernel_sin+0x15c>)
 8016d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d66:	f7e9 fa51 	bl	800020c <__adddf3>
 8016d6a:	4652      	mov	r2, sl
 8016d6c:	465b      	mov	r3, fp
 8016d6e:	f7e9 fbff 	bl	8000570 <__aeabi_dmul>
 8016d72:	a33a      	add	r3, pc, #232	; (adr r3, 8016e5c <__kernel_sin+0x164>)
 8016d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d78:	f7e9 fa46 	bl	8000208 <__aeabi_dsub>
 8016d7c:	4652      	mov	r2, sl
 8016d7e:	465b      	mov	r3, fp
 8016d80:	f7e9 fbf6 	bl	8000570 <__aeabi_dmul>
 8016d84:	a337      	add	r3, pc, #220	; (adr r3, 8016e64 <__kernel_sin+0x16c>)
 8016d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d8a:	f7e9 fa3f 	bl	800020c <__adddf3>
 8016d8e:	9b02      	ldr	r3, [sp, #8]
 8016d90:	4606      	mov	r6, r0
 8016d92:	460f      	mov	r7, r1
 8016d94:	b9db      	cbnz	r3, 8016dce <__kernel_sin+0xd6>
 8016d96:	4602      	mov	r2, r0
 8016d98:	460b      	mov	r3, r1
 8016d9a:	4650      	mov	r0, sl
 8016d9c:	4659      	mov	r1, fp
 8016d9e:	f7e9 fbe7 	bl	8000570 <__aeabi_dmul>
 8016da2:	a325      	add	r3, pc, #148	; (adr r3, 8016e38 <__kernel_sin+0x140>)
 8016da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016da8:	f7e9 fa2e 	bl	8000208 <__aeabi_dsub>
 8016dac:	4642      	mov	r2, r8
 8016dae:	464b      	mov	r3, r9
 8016db0:	f7e9 fbde 	bl	8000570 <__aeabi_dmul>
 8016db4:	4602      	mov	r2, r0
 8016db6:	460b      	mov	r3, r1
 8016db8:	4620      	mov	r0, r4
 8016dba:	4629      	mov	r1, r5
 8016dbc:	f7e9 fa26 	bl	800020c <__adddf3>
 8016dc0:	4604      	mov	r4, r0
 8016dc2:	460d      	mov	r5, r1
 8016dc4:	ec45 4b10 	vmov	d0, r4, r5
 8016dc8:	b005      	add	sp, #20
 8016dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dce:	2200      	movs	r2, #0
 8016dd0:	4b1b      	ldr	r3, [pc, #108]	; (8016e40 <__kernel_sin+0x148>)
 8016dd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016dd6:	f7e9 fbcb 	bl	8000570 <__aeabi_dmul>
 8016dda:	4632      	mov	r2, r6
 8016ddc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016de0:	463b      	mov	r3, r7
 8016de2:	4640      	mov	r0, r8
 8016de4:	4649      	mov	r1, r9
 8016de6:	f7e9 fbc3 	bl	8000570 <__aeabi_dmul>
 8016dea:	4602      	mov	r2, r0
 8016dec:	460b      	mov	r3, r1
 8016dee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016df2:	f7e9 fa09 	bl	8000208 <__aeabi_dsub>
 8016df6:	4652      	mov	r2, sl
 8016df8:	465b      	mov	r3, fp
 8016dfa:	f7e9 fbb9 	bl	8000570 <__aeabi_dmul>
 8016dfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016e02:	f7e9 fa01 	bl	8000208 <__aeabi_dsub>
 8016e06:	a30c      	add	r3, pc, #48	; (adr r3, 8016e38 <__kernel_sin+0x140>)
 8016e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e0c:	4606      	mov	r6, r0
 8016e0e:	460f      	mov	r7, r1
 8016e10:	4640      	mov	r0, r8
 8016e12:	4649      	mov	r1, r9
 8016e14:	f7e9 fbac 	bl	8000570 <__aeabi_dmul>
 8016e18:	4602      	mov	r2, r0
 8016e1a:	460b      	mov	r3, r1
 8016e1c:	4630      	mov	r0, r6
 8016e1e:	4639      	mov	r1, r7
 8016e20:	f7e9 f9f4 	bl	800020c <__adddf3>
 8016e24:	4602      	mov	r2, r0
 8016e26:	460b      	mov	r3, r1
 8016e28:	4620      	mov	r0, r4
 8016e2a:	4629      	mov	r1, r5
 8016e2c:	f7e9 f9ec 	bl	8000208 <__aeabi_dsub>
 8016e30:	e7c6      	b.n	8016dc0 <__kernel_sin+0xc8>
 8016e32:	bf00      	nop
 8016e34:	f3af 8000 	nop.w
 8016e38:	55555549 	.word	0x55555549
 8016e3c:	3fc55555 	.word	0x3fc55555
 8016e40:	3fe00000 	.word	0x3fe00000
 8016e44:	5acfd57c 	.word	0x5acfd57c
 8016e48:	3de5d93a 	.word	0x3de5d93a
 8016e4c:	8a2b9ceb 	.word	0x8a2b9ceb
 8016e50:	3e5ae5e6 	.word	0x3e5ae5e6
 8016e54:	57b1fe7d 	.word	0x57b1fe7d
 8016e58:	3ec71de3 	.word	0x3ec71de3
 8016e5c:	19c161d5 	.word	0x19c161d5
 8016e60:	3f2a01a0 	.word	0x3f2a01a0
 8016e64:	1110f8a6 	.word	0x1110f8a6
 8016e68:	3f811111 	.word	0x3f811111

08016e6c <fabs>:
 8016e6c:	ec53 2b10 	vmov	r2, r3, d0
 8016e70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016e74:	ec43 2b10 	vmov	d0, r2, r3
 8016e78:	4770      	bx	lr
 8016e7a:	0000      	movs	r0, r0
 8016e7c:	0000      	movs	r0, r0
	...

08016e80 <floor>:
 8016e80:	ec51 0b10 	vmov	r0, r1, d0
 8016e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e88:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8016e8c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8016e90:	2e13      	cmp	r6, #19
 8016e92:	ee10 8a10 	vmov	r8, s0
 8016e96:	460c      	mov	r4, r1
 8016e98:	ee10 5a10 	vmov	r5, s0
 8016e9c:	dc35      	bgt.n	8016f0a <floor+0x8a>
 8016e9e:	2e00      	cmp	r6, #0
 8016ea0:	da17      	bge.n	8016ed2 <floor+0x52>
 8016ea2:	a335      	add	r3, pc, #212	; (adr r3, 8016f78 <floor+0xf8>)
 8016ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ea8:	f7e9 f9b0 	bl	800020c <__adddf3>
 8016eac:	2200      	movs	r2, #0
 8016eae:	2300      	movs	r3, #0
 8016eb0:	f7e9 fdee 	bl	8000a90 <__aeabi_dcmpgt>
 8016eb4:	b150      	cbz	r0, 8016ecc <floor+0x4c>
 8016eb6:	2c00      	cmp	r4, #0
 8016eb8:	da5a      	bge.n	8016f70 <floor+0xf0>
 8016eba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8016ebe:	ea53 0308 	orrs.w	r3, r3, r8
 8016ec2:	4b2f      	ldr	r3, [pc, #188]	; (8016f80 <floor+0x100>)
 8016ec4:	f04f 0500 	mov.w	r5, #0
 8016ec8:	bf18      	it	ne
 8016eca:	461c      	movne	r4, r3
 8016ecc:	4621      	mov	r1, r4
 8016ece:	4628      	mov	r0, r5
 8016ed0:	e025      	b.n	8016f1e <floor+0x9e>
 8016ed2:	4f2c      	ldr	r7, [pc, #176]	; (8016f84 <floor+0x104>)
 8016ed4:	4137      	asrs	r7, r6
 8016ed6:	ea01 0307 	and.w	r3, r1, r7
 8016eda:	4303      	orrs	r3, r0
 8016edc:	d01f      	beq.n	8016f1e <floor+0x9e>
 8016ede:	a326      	add	r3, pc, #152	; (adr r3, 8016f78 <floor+0xf8>)
 8016ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ee4:	f7e9 f992 	bl	800020c <__adddf3>
 8016ee8:	2200      	movs	r2, #0
 8016eea:	2300      	movs	r3, #0
 8016eec:	f7e9 fdd0 	bl	8000a90 <__aeabi_dcmpgt>
 8016ef0:	2800      	cmp	r0, #0
 8016ef2:	d0eb      	beq.n	8016ecc <floor+0x4c>
 8016ef4:	2c00      	cmp	r4, #0
 8016ef6:	bfbe      	ittt	lt
 8016ef8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8016efc:	fa43 f606 	asrlt.w	r6, r3, r6
 8016f00:	19a4      	addlt	r4, r4, r6
 8016f02:	ea24 0407 	bic.w	r4, r4, r7
 8016f06:	2500      	movs	r5, #0
 8016f08:	e7e0      	b.n	8016ecc <floor+0x4c>
 8016f0a:	2e33      	cmp	r6, #51	; 0x33
 8016f0c:	dd0b      	ble.n	8016f26 <floor+0xa6>
 8016f0e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8016f12:	d104      	bne.n	8016f1e <floor+0x9e>
 8016f14:	ee10 2a10 	vmov	r2, s0
 8016f18:	460b      	mov	r3, r1
 8016f1a:	f7e9 f977 	bl	800020c <__adddf3>
 8016f1e:	ec41 0b10 	vmov	d0, r0, r1
 8016f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f26:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8016f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8016f2e:	fa23 f707 	lsr.w	r7, r3, r7
 8016f32:	4238      	tst	r0, r7
 8016f34:	d0f3      	beq.n	8016f1e <floor+0x9e>
 8016f36:	a310      	add	r3, pc, #64	; (adr r3, 8016f78 <floor+0xf8>)
 8016f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f3c:	f7e9 f966 	bl	800020c <__adddf3>
 8016f40:	2200      	movs	r2, #0
 8016f42:	2300      	movs	r3, #0
 8016f44:	f7e9 fda4 	bl	8000a90 <__aeabi_dcmpgt>
 8016f48:	2800      	cmp	r0, #0
 8016f4a:	d0bf      	beq.n	8016ecc <floor+0x4c>
 8016f4c:	2c00      	cmp	r4, #0
 8016f4e:	da02      	bge.n	8016f56 <floor+0xd6>
 8016f50:	2e14      	cmp	r6, #20
 8016f52:	d103      	bne.n	8016f5c <floor+0xdc>
 8016f54:	3401      	adds	r4, #1
 8016f56:	ea25 0507 	bic.w	r5, r5, r7
 8016f5a:	e7b7      	b.n	8016ecc <floor+0x4c>
 8016f5c:	2301      	movs	r3, #1
 8016f5e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8016f62:	fa03 f606 	lsl.w	r6, r3, r6
 8016f66:	4435      	add	r5, r6
 8016f68:	45a8      	cmp	r8, r5
 8016f6a:	bf88      	it	hi
 8016f6c:	18e4      	addhi	r4, r4, r3
 8016f6e:	e7f2      	b.n	8016f56 <floor+0xd6>
 8016f70:	2500      	movs	r5, #0
 8016f72:	462c      	mov	r4, r5
 8016f74:	e7aa      	b.n	8016ecc <floor+0x4c>
 8016f76:	bf00      	nop
 8016f78:	8800759c 	.word	0x8800759c
 8016f7c:	7e37e43c 	.word	0x7e37e43c
 8016f80:	bff00000 	.word	0xbff00000
 8016f84:	000fffff 	.word	0x000fffff

08016f88 <matherr>:
 8016f88:	2000      	movs	r0, #0
 8016f8a:	4770      	bx	lr
 8016f8c:	0000      	movs	r0, r0
	...

08016f90 <nan>:
 8016f90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016f98 <nan+0x8>
 8016f94:	4770      	bx	lr
 8016f96:	bf00      	nop
 8016f98:	00000000 	.word	0x00000000
 8016f9c:	7ff80000 	.word	0x7ff80000

08016fa0 <scalbn>:
 8016fa0:	b570      	push	{r4, r5, r6, lr}
 8016fa2:	ec55 4b10 	vmov	r4, r5, d0
 8016fa6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8016faa:	4606      	mov	r6, r0
 8016fac:	462b      	mov	r3, r5
 8016fae:	b9b2      	cbnz	r2, 8016fde <scalbn+0x3e>
 8016fb0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8016fb4:	4323      	orrs	r3, r4
 8016fb6:	d03c      	beq.n	8017032 <scalbn+0x92>
 8016fb8:	2200      	movs	r2, #0
 8016fba:	4b33      	ldr	r3, [pc, #204]	; (8017088 <scalbn+0xe8>)
 8016fbc:	4629      	mov	r1, r5
 8016fbe:	ee10 0a10 	vmov	r0, s0
 8016fc2:	f7e9 fad5 	bl	8000570 <__aeabi_dmul>
 8016fc6:	4a31      	ldr	r2, [pc, #196]	; (801708c <scalbn+0xec>)
 8016fc8:	4296      	cmp	r6, r2
 8016fca:	4604      	mov	r4, r0
 8016fcc:	460d      	mov	r5, r1
 8016fce:	460b      	mov	r3, r1
 8016fd0:	da13      	bge.n	8016ffa <scalbn+0x5a>
 8016fd2:	a329      	add	r3, pc, #164	; (adr r3, 8017078 <scalbn+0xd8>)
 8016fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fd8:	f7e9 faca 	bl	8000570 <__aeabi_dmul>
 8016fdc:	e00a      	b.n	8016ff4 <scalbn+0x54>
 8016fde:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8016fe2:	428a      	cmp	r2, r1
 8016fe4:	d10c      	bne.n	8017000 <scalbn+0x60>
 8016fe6:	ee10 2a10 	vmov	r2, s0
 8016fea:	462b      	mov	r3, r5
 8016fec:	4620      	mov	r0, r4
 8016fee:	4629      	mov	r1, r5
 8016ff0:	f7e9 f90c 	bl	800020c <__adddf3>
 8016ff4:	4604      	mov	r4, r0
 8016ff6:	460d      	mov	r5, r1
 8016ff8:	e01b      	b.n	8017032 <scalbn+0x92>
 8016ffa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016ffe:	3a36      	subs	r2, #54	; 0x36
 8017000:	4432      	add	r2, r6
 8017002:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8017006:	428a      	cmp	r2, r1
 8017008:	dd0b      	ble.n	8017022 <scalbn+0x82>
 801700a:	ec45 4b11 	vmov	d1, r4, r5
 801700e:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8017080 <scalbn+0xe0>
 8017012:	f000 f849 	bl	80170a8 <copysign>
 8017016:	a31a      	add	r3, pc, #104	; (adr r3, 8017080 <scalbn+0xe0>)
 8017018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801701c:	ec51 0b10 	vmov	r0, r1, d0
 8017020:	e7da      	b.n	8016fd8 <scalbn+0x38>
 8017022:	2a00      	cmp	r2, #0
 8017024:	dd08      	ble.n	8017038 <scalbn+0x98>
 8017026:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801702a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801702e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017032:	ec45 4b10 	vmov	d0, r4, r5
 8017036:	bd70      	pop	{r4, r5, r6, pc}
 8017038:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801703c:	da0d      	bge.n	801705a <scalbn+0xba>
 801703e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017042:	429e      	cmp	r6, r3
 8017044:	ec45 4b11 	vmov	d1, r4, r5
 8017048:	dce1      	bgt.n	801700e <scalbn+0x6e>
 801704a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8017078 <scalbn+0xd8>
 801704e:	f000 f82b 	bl	80170a8 <copysign>
 8017052:	a309      	add	r3, pc, #36	; (adr r3, 8017078 <scalbn+0xd8>)
 8017054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017058:	e7e0      	b.n	801701c <scalbn+0x7c>
 801705a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801705e:	3236      	adds	r2, #54	; 0x36
 8017060:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017064:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017068:	4620      	mov	r0, r4
 801706a:	4629      	mov	r1, r5
 801706c:	2200      	movs	r2, #0
 801706e:	4b08      	ldr	r3, [pc, #32]	; (8017090 <scalbn+0xf0>)
 8017070:	e7b2      	b.n	8016fd8 <scalbn+0x38>
 8017072:	bf00      	nop
 8017074:	f3af 8000 	nop.w
 8017078:	c2f8f359 	.word	0xc2f8f359
 801707c:	01a56e1f 	.word	0x01a56e1f
 8017080:	8800759c 	.word	0x8800759c
 8017084:	7e37e43c 	.word	0x7e37e43c
 8017088:	43500000 	.word	0x43500000
 801708c:	ffff3cb0 	.word	0xffff3cb0
 8017090:	3c900000 	.word	0x3c900000

08017094 <finitef>:
 8017094:	ee10 3a10 	vmov	r3, s0
 8017098:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 801709c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80170a0:	bfac      	ite	ge
 80170a2:	2000      	movge	r0, #0
 80170a4:	2001      	movlt	r0, #1
 80170a6:	4770      	bx	lr

080170a8 <copysign>:
 80170a8:	ec53 2b10 	vmov	r2, r3, d0
 80170ac:	ee11 0a90 	vmov	r0, s3
 80170b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80170b4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80170b8:	ea41 0300 	orr.w	r3, r1, r0
 80170bc:	ec43 2b10 	vmov	d0, r2, r3
 80170c0:	4770      	bx	lr
	...

080170c4 <__errno>:
 80170c4:	4b01      	ldr	r3, [pc, #4]	; (80170cc <__errno+0x8>)
 80170c6:	6818      	ldr	r0, [r3, #0]
 80170c8:	4770      	bx	lr
 80170ca:	bf00      	nop
 80170cc:	20000060 	.word	0x20000060

080170d0 <_init>:
 80170d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170d2:	bf00      	nop
 80170d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80170d6:	bc08      	pop	{r3}
 80170d8:	469e      	mov	lr, r3
 80170da:	4770      	bx	lr

080170dc <_fini>:
 80170dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170de:	bf00      	nop
 80170e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80170e2:	bc08      	pop	{r3}
 80170e4:	469e      	mov	lr, r3
 80170e6:	4770      	bx	lr
