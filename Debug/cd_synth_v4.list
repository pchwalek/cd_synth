
cd_synth_v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000139a4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003658  08013b64  08013b64  00023b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080171bc  080171bc  000271bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080171c4  080171c4  000271c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080171c8  080171c8  000271c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b8  20000000  080171cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00008634  200000b8  08017284  000300b8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  200086ec  08017284  000386ec  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00072b1d  00000000  00000000  000300e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000aff7  00000000  00000000  000a2c05  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0003cb69  00000000  00000000  000adbfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000029e8  00000000  00000000  000ea768  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00008d00  00000000  00000000  000ed150  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002143a  00000000  00000000  000f5e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000129f2  00000000  00000000  0011728a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000ea  00000000  00000000  00129c7c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008fe0  00000000  00000000  00129d68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000b8 	.word	0x200000b8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08013b4c 	.word	0x08013b4c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000bc 	.word	0x200000bc
 80001fc:	08013b4c 	.word	0x08013b4c

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033e:	f1a4 0401 	sub.w	r4, r4, #1
 8000342:	d1e9      	bne.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f092 0f00 	teq	r2, #0
 80004ea:	bf14      	ite	ne
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000500:	e720      	b.n	8000344 <__adddf3+0x138>
 8000502:	bf00      	nop

08000504 <__aeabi_ul2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	e00a      	b.n	800052a <__aeabi_l2d+0x16>

08000514 <__aeabi_l2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000522:	d502      	bpl.n	800052a <__aeabi_l2d+0x16>
 8000524:	4240      	negs	r0, r0
 8000526:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800052e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000532:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000536:	f43f aedc 	beq.w	80002f2 <__adddf3+0xe6>
 800053a:	f04f 0203 	mov.w	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000552:	f1c2 0320 	rsb	r3, r2, #32
 8000556:	fa00 fc03 	lsl.w	ip, r0, r3
 800055a:	fa20 f002 	lsr.w	r0, r0, r2
 800055e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000562:	ea40 000e 	orr.w	r0, r0, lr
 8000566:	fa21 f102 	lsr.w	r1, r1, r2
 800056a:	4414      	add	r4, r2
 800056c:	e6c1      	b.n	80002f2 <__adddf3+0xe6>
 800056e:	bf00      	nop

08000570 <__aeabi_dmul>:
 8000570:	b570      	push	{r4, r5, r6, lr}
 8000572:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000576:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800057a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800057e:	bf1d      	ittte	ne
 8000580:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000584:	ea94 0f0c 	teqne	r4, ip
 8000588:	ea95 0f0c 	teqne	r5, ip
 800058c:	f000 f8de 	bleq	800074c <__aeabi_dmul+0x1dc>
 8000590:	442c      	add	r4, r5
 8000592:	ea81 0603 	eor.w	r6, r1, r3
 8000596:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800059a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800059e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005a2:	bf18      	it	ne
 80005a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b0:	d038      	beq.n	8000624 <__aeabi_dmul+0xb4>
 80005b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005c6:	f04f 0600 	mov.w	r6, #0
 80005ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ce:	f09c 0f00 	teq	ip, #0
 80005d2:	bf18      	it	ne
 80005d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e4:	d204      	bcs.n	80005f0 <__aeabi_dmul+0x80>
 80005e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ea:	416d      	adcs	r5, r5
 80005ec:	eb46 0606 	adc.w	r6, r6, r6
 80005f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000600:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000604:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000608:	bf88      	it	hi
 800060a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800060e:	d81e      	bhi.n	800064e <__aeabi_dmul+0xde>
 8000610:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000614:	bf08      	it	eq
 8000616:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800061a:	f150 0000 	adcs.w	r0, r0, #0
 800061e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000628:	ea46 0101 	orr.w	r1, r6, r1
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	ea81 0103 	eor.w	r1, r1, r3
 8000634:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000638:	bfc2      	ittt	gt
 800063a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800063e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000642:	bd70      	popgt	{r4, r5, r6, pc}
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f04f 0e00 	mov.w	lr, #0
 800064c:	3c01      	subs	r4, #1
 800064e:	f300 80ab 	bgt.w	80007a8 <__aeabi_dmul+0x238>
 8000652:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000656:	bfde      	ittt	le
 8000658:	2000      	movle	r0, #0
 800065a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800065e:	bd70      	pople	{r4, r5, r6, pc}
 8000660:	f1c4 0400 	rsb	r4, r4, #0
 8000664:	3c20      	subs	r4, #32
 8000666:	da35      	bge.n	80006d4 <__aeabi_dmul+0x164>
 8000668:	340c      	adds	r4, #12
 800066a:	dc1b      	bgt.n	80006a4 <__aeabi_dmul+0x134>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f305 	lsl.w	r3, r0, r5
 8000678:	fa20 f004 	lsr.w	r0, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000688:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800068c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000690:	fa21 f604 	lsr.w	r6, r1, r4
 8000694:	eb42 0106 	adc.w	r1, r2, r6
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 040c 	rsb	r4, r4, #12
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f304 	lsl.w	r3, r0, r4
 80006b0:	fa20 f005 	lsr.w	r0, r0, r5
 80006b4:	fa01 f204 	lsl.w	r2, r1, r4
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c4:	f141 0100 	adc.w	r1, r1, #0
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 0520 	rsb	r5, r4, #32
 80006d8:	fa00 f205 	lsl.w	r2, r0, r5
 80006dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e0:	fa20 f304 	lsr.w	r3, r0, r4
 80006e4:	fa01 f205 	lsl.w	r2, r1, r5
 80006e8:	ea43 0302 	orr.w	r3, r3, r2
 80006ec:	fa21 f004 	lsr.w	r0, r1, r4
 80006f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f4:	fa21 f204 	lsr.w	r2, r1, r4
 80006f8:	ea20 0002 	bic.w	r0, r0, r2
 80006fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f094 0f00 	teq	r4, #0
 8000710:	d10f      	bne.n	8000732 <__aeabi_dmul+0x1c2>
 8000712:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000716:	0040      	lsls	r0, r0, #1
 8000718:	eb41 0101 	adc.w	r1, r1, r1
 800071c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3c01      	subeq	r4, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1a6>
 8000726:	ea41 0106 	orr.w	r1, r1, r6
 800072a:	f095 0f00 	teq	r5, #0
 800072e:	bf18      	it	ne
 8000730:	4770      	bxne	lr
 8000732:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000736:	0052      	lsls	r2, r2, #1
 8000738:	eb43 0303 	adc.w	r3, r3, r3
 800073c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3d01      	subeq	r5, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1c6>
 8000746:	ea43 0306 	orr.w	r3, r3, r6
 800074a:	4770      	bx	lr
 800074c:	ea94 0f0c 	teq	r4, ip
 8000750:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000754:	bf18      	it	ne
 8000756:	ea95 0f0c 	teqne	r5, ip
 800075a:	d00c      	beq.n	8000776 <__aeabi_dmul+0x206>
 800075c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000760:	bf18      	it	ne
 8000762:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000766:	d1d1      	bne.n	800070c <__aeabi_dmul+0x19c>
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000770:	f04f 0000 	mov.w	r0, #0
 8000774:	bd70      	pop	{r4, r5, r6, pc}
 8000776:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077a:	bf06      	itte	eq
 800077c:	4610      	moveq	r0, r2
 800077e:	4619      	moveq	r1, r3
 8000780:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000784:	d019      	beq.n	80007ba <__aeabi_dmul+0x24a>
 8000786:	ea94 0f0c 	teq	r4, ip
 800078a:	d102      	bne.n	8000792 <__aeabi_dmul+0x222>
 800078c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000790:	d113      	bne.n	80007ba <__aeabi_dmul+0x24a>
 8000792:	ea95 0f0c 	teq	r5, ip
 8000796:	d105      	bne.n	80007a4 <__aeabi_dmul+0x234>
 8000798:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800079c:	bf1c      	itt	ne
 800079e:	4610      	movne	r0, r2
 80007a0:	4619      	movne	r1, r3
 80007a2:	d10a      	bne.n	80007ba <__aeabi_dmul+0x24a>
 80007a4:	ea81 0103 	eor.w	r1, r1, r3
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b4:	f04f 0000 	mov.w	r0, #0
 80007b8:	bd70      	pop	{r4, r5, r6, pc}
 80007ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007c2:	bd70      	pop	{r4, r5, r6, pc}

080007c4 <__aeabi_ddiv>:
 80007c4:	b570      	push	{r4, r5, r6, lr}
 80007c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007d2:	bf1d      	ittte	ne
 80007d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d8:	ea94 0f0c 	teqne	r4, ip
 80007dc:	ea95 0f0c 	teqne	r5, ip
 80007e0:	f000 f8a7 	bleq	8000932 <__aeabi_ddiv+0x16e>
 80007e4:	eba4 0405 	sub.w	r4, r4, r5
 80007e8:	ea81 0e03 	eor.w	lr, r1, r3
 80007ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f4:	f000 8088 	beq.w	8000908 <__aeabi_ddiv+0x144>
 80007f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000800:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000804:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000808:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800080c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000810:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000814:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000818:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800081c:	429d      	cmp	r5, r3
 800081e:	bf08      	it	eq
 8000820:	4296      	cmpeq	r6, r2
 8000822:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000826:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800082a:	d202      	bcs.n	8000832 <__aeabi_ddiv+0x6e>
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	1ab6      	subs	r6, r6, r2
 8000834:	eb65 0503 	sbc.w	r5, r5, r3
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000842:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 000c 	orrcs.w	r0, r0, ip
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a4:	d018      	beq.n	80008d8 <__aeabi_ddiv+0x114>
 80008a6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008aa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008b2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008b6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008be:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008c2:	d1c0      	bne.n	8000846 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	d10b      	bne.n	80008e2 <__aeabi_ddiv+0x11e>
 80008ca:	ea41 0100 	orr.w	r1, r1, r0
 80008ce:	f04f 0000 	mov.w	r0, #0
 80008d2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008d6:	e7b6      	b.n	8000846 <__aeabi_ddiv+0x82>
 80008d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008dc:	bf04      	itt	eq
 80008de:	4301      	orreq	r1, r0
 80008e0:	2000      	moveq	r0, #0
 80008e2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008e6:	bf88      	it	hi
 80008e8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008ec:	f63f aeaf 	bhi.w	800064e <__aeabi_dmul+0xde>
 80008f0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f4:	bf04      	itt	eq
 80008f6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008fe:	f150 0000 	adcs.w	r0, r0, #0
 8000902:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000906:	bd70      	pop	{r4, r5, r6, pc}
 8000908:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800090c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000910:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000914:	bfc2      	ittt	gt
 8000916:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800091e:	bd70      	popgt	{r4, r5, r6, pc}
 8000920:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000924:	f04f 0e00 	mov.w	lr, #0
 8000928:	3c01      	subs	r4, #1
 800092a:	e690      	b.n	800064e <__aeabi_dmul+0xde>
 800092c:	ea45 0e06 	orr.w	lr, r5, r6
 8000930:	e68d      	b.n	800064e <__aeabi_dmul+0xde>
 8000932:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000936:	ea94 0f0c 	teq	r4, ip
 800093a:	bf08      	it	eq
 800093c:	ea95 0f0c 	teqeq	r5, ip
 8000940:	f43f af3b 	beq.w	80007ba <__aeabi_dmul+0x24a>
 8000944:	ea94 0f0c 	teq	r4, ip
 8000948:	d10a      	bne.n	8000960 <__aeabi_ddiv+0x19c>
 800094a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800094e:	f47f af34 	bne.w	80007ba <__aeabi_dmul+0x24a>
 8000952:	ea95 0f0c 	teq	r5, ip
 8000956:	f47f af25 	bne.w	80007a4 <__aeabi_dmul+0x234>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e72c      	b.n	80007ba <__aeabi_dmul+0x24a>
 8000960:	ea95 0f0c 	teq	r5, ip
 8000964:	d106      	bne.n	8000974 <__aeabi_ddiv+0x1b0>
 8000966:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096a:	f43f aefd 	beq.w	8000768 <__aeabi_dmul+0x1f8>
 800096e:	4610      	mov	r0, r2
 8000970:	4619      	mov	r1, r3
 8000972:	e722      	b.n	80007ba <__aeabi_dmul+0x24a>
 8000974:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000978:	bf18      	it	ne
 800097a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800097e:	f47f aec5 	bne.w	800070c <__aeabi_dmul+0x19c>
 8000982:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000986:	f47f af0d 	bne.w	80007a4 <__aeabi_dmul+0x234>
 800098a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800098e:	f47f aeeb 	bne.w	8000768 <__aeabi_dmul+0x1f8>
 8000992:	e712      	b.n	80007ba <__aeabi_dmul+0x24a>

08000994 <__gedf2>:
 8000994:	f04f 3cff 	mov.w	ip, #4294967295
 8000998:	e006      	b.n	80009a8 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__ledf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	e002      	b.n	80009a8 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__cmpdf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009be:	d01b      	beq.n	80009f8 <__cmpdf2+0x54>
 80009c0:	b001      	add	sp, #4
 80009c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009c6:	bf0c      	ite	eq
 80009c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009cc:	ea91 0f03 	teqne	r1, r3
 80009d0:	bf02      	ittt	eq
 80009d2:	ea90 0f02 	teqeq	r0, r2
 80009d6:	2000      	moveq	r0, #0
 80009d8:	4770      	bxeq	lr
 80009da:	f110 0f00 	cmn.w	r0, #0
 80009de:	ea91 0f03 	teq	r1, r3
 80009e2:	bf58      	it	pl
 80009e4:	4299      	cmppl	r1, r3
 80009e6:	bf08      	it	eq
 80009e8:	4290      	cmpeq	r0, r2
 80009ea:	bf2c      	ite	cs
 80009ec:	17d8      	asrcs	r0, r3, #31
 80009ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009f2:	f040 0001 	orr.w	r0, r0, #1
 80009f6:	4770      	bx	lr
 80009f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d102      	bne.n	8000a08 <__cmpdf2+0x64>
 8000a02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a06:	d107      	bne.n	8000a18 <__cmpdf2+0x74>
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d1d6      	bne.n	80009c0 <__cmpdf2+0x1c>
 8000a12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a16:	d0d3      	beq.n	80009c0 <__cmpdf2+0x1c>
 8000a18:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdrcmple>:
 8000a20:	4684      	mov	ip, r0
 8000a22:	4610      	mov	r0, r2
 8000a24:	4662      	mov	r2, ip
 8000a26:	468c      	mov	ip, r1
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4663      	mov	r3, ip
 8000a2c:	e000      	b.n	8000a30 <__aeabi_cdcmpeq>
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdcmpeq>:
 8000a30:	b501      	push	{r0, lr}
 8000a32:	f7ff ffb7 	bl	80009a4 <__cmpdf2>
 8000a36:	2800      	cmp	r0, #0
 8000a38:	bf48      	it	mi
 8000a3a:	f110 0f00 	cmnmi.w	r0, #0
 8000a3e:	bd01      	pop	{r0, pc}

08000a40 <__aeabi_dcmpeq>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff fff4 	bl	8000a30 <__aeabi_cdcmpeq>
 8000a48:	bf0c      	ite	eq
 8000a4a:	2001      	moveq	r0, #1
 8000a4c:	2000      	movne	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmplt>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffea 	bl	8000a30 <__aeabi_cdcmpeq>
 8000a5c:	bf34      	ite	cc
 8000a5e:	2001      	movcc	r0, #1
 8000a60:	2000      	movcs	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmple>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffe0 	bl	8000a30 <__aeabi_cdcmpeq>
 8000a70:	bf94      	ite	ls
 8000a72:	2001      	movls	r0, #1
 8000a74:	2000      	movhi	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpge>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffce 	bl	8000a20 <__aeabi_cdrcmple>
 8000a84:	bf94      	ite	ls
 8000a86:	2001      	movls	r0, #1
 8000a88:	2000      	movhi	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmpgt>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffc4 	bl	8000a20 <__aeabi_cdrcmple>
 8000a98:	bf34      	ite	cc
 8000a9a:	2001      	movcc	r0, #1
 8000a9c:	2000      	movcs	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpun>:
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x10>
 8000aae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab2:	d10a      	bne.n	8000aca <__aeabi_dcmpun+0x26>
 8000ab4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x20>
 8000abe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac2:	d102      	bne.n	8000aca <__aeabi_dcmpun+0x26>
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	f04f 0001 	mov.w	r0, #1
 8000ace:	4770      	bx	lr

08000ad0 <__aeabi_d2iz>:
 8000ad0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad8:	d215      	bcs.n	8000b06 <__aeabi_d2iz+0x36>
 8000ada:	d511      	bpl.n	8000b00 <__aeabi_d2iz+0x30>
 8000adc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae4:	d912      	bls.n	8000b0c <__aeabi_d2iz+0x3c>
 8000ae6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	bf18      	it	ne
 8000afc:	4240      	negne	r0, r0
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0a:	d105      	bne.n	8000b18 <__aeabi_d2iz+0x48>
 8000b0c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b10:	bf08      	it	eq
 8000b12:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop

08000b20 <__aeabi_d2uiz>:
 8000b20:	004a      	lsls	r2, r1, #1
 8000b22:	d211      	bcs.n	8000b48 <__aeabi_d2uiz+0x28>
 8000b24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b28:	d211      	bcs.n	8000b4e <__aeabi_d2uiz+0x2e>
 8000b2a:	d50d      	bpl.n	8000b48 <__aeabi_d2uiz+0x28>
 8000b2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b34:	d40e      	bmi.n	8000b54 <__aeabi_d2uiz+0x34>
 8000b36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_d2uiz+0x3a>
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0000 	mov.w	r0, #0
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2f>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b68:	bf24      	itt	cs
 8000b6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b72:	d90d      	bls.n	8000b90 <__aeabi_d2f+0x30>
 8000b74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b88:	bf08      	it	eq
 8000b8a:	f020 0001 	biceq.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b94:	d121      	bne.n	8000bda <__aeabi_d2f+0x7a>
 8000b96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b9a:	bfbc      	itt	lt
 8000b9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	4770      	bxlt	lr
 8000ba2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000baa:	f1c2 0218 	rsb	r2, r2, #24
 8000bae:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bba:	bf18      	it	ne
 8000bbc:	f040 0001 	orrne.w	r0, r0, #1
 8000bc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bcc:	ea40 000c 	orr.w	r0, r0, ip
 8000bd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd8:	e7cc      	b.n	8000b74 <__aeabi_d2f+0x14>
 8000bda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bde:	d107      	bne.n	8000bf0 <__aeabi_d2f+0x90>
 8000be0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be4:	bf1e      	ittt	ne
 8000be6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bee:	4770      	bxne	lr
 8000bf0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__aeabi_uldivmod>:
 8000c00:	b953      	cbnz	r3, 8000c18 <__aeabi_uldivmod+0x18>
 8000c02:	b94a      	cbnz	r2, 8000c18 <__aeabi_uldivmod+0x18>
 8000c04:	2900      	cmp	r1, #0
 8000c06:	bf08      	it	eq
 8000c08:	2800      	cmpeq	r0, #0
 8000c0a:	bf1c      	itt	ne
 8000c0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c10:	f04f 30ff 	movne.w	r0, #4294967295
 8000c14:	f000 b97a 	b.w	8000f0c <__aeabi_idiv0>
 8000c18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c20:	f000 f806 	bl	8000c30 <__udivmoddi4>
 8000c24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c2c:	b004      	add	sp, #16
 8000c2e:	4770      	bx	lr

08000c30 <__udivmoddi4>:
 8000c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c34:	468c      	mov	ip, r1
 8000c36:	460d      	mov	r5, r1
 8000c38:	4604      	mov	r4, r0
 8000c3a:	9e08      	ldr	r6, [sp, #32]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d151      	bne.n	8000ce4 <__udivmoddi4+0xb4>
 8000c40:	428a      	cmp	r2, r1
 8000c42:	4617      	mov	r7, r2
 8000c44:	d96d      	bls.n	8000d22 <__udivmoddi4+0xf2>
 8000c46:	fab2 fe82 	clz	lr, r2
 8000c4a:	f1be 0f00 	cmp.w	lr, #0
 8000c4e:	d00b      	beq.n	8000c68 <__udivmoddi4+0x38>
 8000c50:	f1ce 0c20 	rsb	ip, lr, #32
 8000c54:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c58:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c5c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c60:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c64:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c68:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c6c:	0c25      	lsrs	r5, r4, #16
 8000c6e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c72:	fa1f f987 	uxth.w	r9, r7
 8000c76:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c7a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c7e:	fb08 f309 	mul.w	r3, r8, r9
 8000c82:	42ab      	cmp	r3, r5
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x6c>
 8000c86:	19ed      	adds	r5, r5, r7
 8000c88:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c8c:	f080 8123 	bcs.w	8000ed6 <__udivmoddi4+0x2a6>
 8000c90:	42ab      	cmp	r3, r5
 8000c92:	f240 8120 	bls.w	8000ed6 <__udivmoddi4+0x2a6>
 8000c96:	f1a8 0802 	sub.w	r8, r8, #2
 8000c9a:	443d      	add	r5, r7
 8000c9c:	1aed      	subs	r5, r5, r3
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ca4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000ca8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cac:	fb00 f909 	mul.w	r9, r0, r9
 8000cb0:	45a1      	cmp	r9, r4
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x98>
 8000cb4:	19e4      	adds	r4, r4, r7
 8000cb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cba:	f080 810a 	bcs.w	8000ed2 <__udivmoddi4+0x2a2>
 8000cbe:	45a1      	cmp	r9, r4
 8000cc0:	f240 8107 	bls.w	8000ed2 <__udivmoddi4+0x2a2>
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	443c      	add	r4, r7
 8000cc8:	eba4 0409 	sub.w	r4, r4, r9
 8000ccc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d061      	beq.n	8000d9a <__udivmoddi4+0x16a>
 8000cd6:	fa24 f40e 	lsr.w	r4, r4, lr
 8000cda:	2300      	movs	r3, #0
 8000cdc:	6034      	str	r4, [r6, #0]
 8000cde:	6073      	str	r3, [r6, #4]
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	d907      	bls.n	8000cf8 <__udivmoddi4+0xc8>
 8000ce8:	2e00      	cmp	r6, #0
 8000cea:	d054      	beq.n	8000d96 <__udivmoddi4+0x166>
 8000cec:	2100      	movs	r1, #0
 8000cee:	e886 0021 	stmia.w	r6, {r0, r5}
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf8:	fab3 f183 	clz	r1, r3
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	f040 808e 	bne.w	8000e1e <__udivmoddi4+0x1ee>
 8000d02:	42ab      	cmp	r3, r5
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xdc>
 8000d06:	4282      	cmp	r2, r0
 8000d08:	f200 80fa 	bhi.w	8000f00 <__udivmoddi4+0x2d0>
 8000d0c:	1a84      	subs	r4, r0, r2
 8000d0e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	46ac      	mov	ip, r5
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	d03f      	beq.n	8000d9a <__udivmoddi4+0x16a>
 8000d1a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	b912      	cbnz	r2, 8000d2a <__udivmoddi4+0xfa>
 8000d24:	2701      	movs	r7, #1
 8000d26:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d2a:	fab7 fe87 	clz	lr, r7
 8000d2e:	f1be 0f00 	cmp.w	lr, #0
 8000d32:	d134      	bne.n	8000d9e <__udivmoddi4+0x16e>
 8000d34:	1beb      	subs	r3, r5, r7
 8000d36:	0c3a      	lsrs	r2, r7, #16
 8000d38:	fa1f fc87 	uxth.w	ip, r7
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d42:	0c25      	lsrs	r5, r4, #16
 8000d44:	fb02 3318 	mls	r3, r2, r8, r3
 8000d48:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d4c:	fb0c f308 	mul.w	r3, ip, r8
 8000d50:	42ab      	cmp	r3, r5
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x134>
 8000d54:	19ed      	adds	r5, r5, r7
 8000d56:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x132>
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	f200 80d1 	bhi.w	8000f04 <__udivmoddi4+0x2d4>
 8000d62:	4680      	mov	r8, r0
 8000d64:	1aed      	subs	r5, r5, r3
 8000d66:	b2a3      	uxth	r3, r4
 8000d68:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d6c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d70:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d74:	fb0c fc00 	mul.w	ip, ip, r0
 8000d78:	45a4      	cmp	ip, r4
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x15c>
 8000d7c:	19e4      	adds	r4, r4, r7
 8000d7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x15a>
 8000d84:	45a4      	cmp	ip, r4
 8000d86:	f200 80b8 	bhi.w	8000efa <__udivmoddi4+0x2ca>
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	eba4 040c 	sub.w	r4, r4, ip
 8000d90:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d94:	e79d      	b.n	8000cd2 <__udivmoddi4+0xa2>
 8000d96:	4631      	mov	r1, r6
 8000d98:	4630      	mov	r0, r6
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	f1ce 0420 	rsb	r4, lr, #32
 8000da2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000da6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000daa:	fa20 f804 	lsr.w	r8, r0, r4
 8000dae:	0c3a      	lsrs	r2, r7, #16
 8000db0:	fa25 f404 	lsr.w	r4, r5, r4
 8000db4:	ea48 0803 	orr.w	r8, r8, r3
 8000db8:	fbb4 f1f2 	udiv	r1, r4, r2
 8000dbc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000dc0:	fb02 4411 	mls	r4, r2, r1, r4
 8000dc4:	fa1f fc87 	uxth.w	ip, r7
 8000dc8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000dcc:	fb01 f30c 	mul.w	r3, r1, ip
 8000dd0:	42ab      	cmp	r3, r5
 8000dd2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000dd6:	d909      	bls.n	8000dec <__udivmoddi4+0x1bc>
 8000dd8:	19ed      	adds	r5, r5, r7
 8000dda:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dde:	f080 808a 	bcs.w	8000ef6 <__udivmoddi4+0x2c6>
 8000de2:	42ab      	cmp	r3, r5
 8000de4:	f240 8087 	bls.w	8000ef6 <__udivmoddi4+0x2c6>
 8000de8:	3902      	subs	r1, #2
 8000dea:	443d      	add	r5, r7
 8000dec:	1aeb      	subs	r3, r5, r3
 8000dee:	fa1f f588 	uxth.w	r5, r8
 8000df2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000df6:	fb02 3310 	mls	r3, r2, r0, r3
 8000dfa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dfe:	fb00 f30c 	mul.w	r3, r0, ip
 8000e02:	42ab      	cmp	r3, r5
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x1e6>
 8000e06:	19ed      	adds	r5, r5, r7
 8000e08:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e0c:	d26f      	bcs.n	8000eee <__udivmoddi4+0x2be>
 8000e0e:	42ab      	cmp	r3, r5
 8000e10:	d96d      	bls.n	8000eee <__udivmoddi4+0x2be>
 8000e12:	3802      	subs	r0, #2
 8000e14:	443d      	add	r5, r7
 8000e16:	1aeb      	subs	r3, r5, r3
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	e78f      	b.n	8000d3e <__udivmoddi4+0x10e>
 8000e1e:	f1c1 0720 	rsb	r7, r1, #32
 8000e22:	fa22 f807 	lsr.w	r8, r2, r7
 8000e26:	408b      	lsls	r3, r1
 8000e28:	fa05 f401 	lsl.w	r4, r5, r1
 8000e2c:	ea48 0303 	orr.w	r3, r8, r3
 8000e30:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e34:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e38:	40fd      	lsrs	r5, r7
 8000e3a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e3e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e42:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e46:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e4a:	fa1f f883 	uxth.w	r8, r3
 8000e4e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e52:	fb09 f408 	mul.w	r4, r9, r8
 8000e56:	42ac      	cmp	r4, r5
 8000e58:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x244>
 8000e62:	18ed      	adds	r5, r5, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	d243      	bcs.n	8000ef2 <__udivmoddi4+0x2c2>
 8000e6a:	42ac      	cmp	r4, r5
 8000e6c:	d941      	bls.n	8000ef2 <__udivmoddi4+0x2c2>
 8000e6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e72:	441d      	add	r5, r3
 8000e74:	1b2d      	subs	r5, r5, r4
 8000e76:	fa1f fe8e 	uxth.w	lr, lr
 8000e7a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e7e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e82:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e86:	fb00 f808 	mul.w	r8, r0, r8
 8000e8a:	45a0      	cmp	r8, r4
 8000e8c:	d907      	bls.n	8000e9e <__udivmoddi4+0x26e>
 8000e8e:	18e4      	adds	r4, r4, r3
 8000e90:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e94:	d229      	bcs.n	8000eea <__udivmoddi4+0x2ba>
 8000e96:	45a0      	cmp	r8, r4
 8000e98:	d927      	bls.n	8000eea <__udivmoddi4+0x2ba>
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	441c      	add	r4, r3
 8000e9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea2:	eba4 0408 	sub.w	r4, r4, r8
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	454c      	cmp	r4, r9
 8000eac:	46c6      	mov	lr, r8
 8000eae:	464d      	mov	r5, r9
 8000eb0:	d315      	bcc.n	8000ede <__udivmoddi4+0x2ae>
 8000eb2:	d012      	beq.n	8000eda <__udivmoddi4+0x2aa>
 8000eb4:	b156      	cbz	r6, 8000ecc <__udivmoddi4+0x29c>
 8000eb6:	ebba 030e 	subs.w	r3, sl, lr
 8000eba:	eb64 0405 	sbc.w	r4, r4, r5
 8000ebe:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec2:	40cb      	lsrs	r3, r1
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	40cc      	lsrs	r4, r1
 8000ec8:	6037      	str	r7, [r6, #0]
 8000eca:	6074      	str	r4, [r6, #4]
 8000ecc:	2100      	movs	r1, #0
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	e6f8      	b.n	8000cc8 <__udivmoddi4+0x98>
 8000ed6:	4690      	mov	r8, r2
 8000ed8:	e6e0      	b.n	8000c9c <__udivmoddi4+0x6c>
 8000eda:	45c2      	cmp	sl, r8
 8000edc:	d2ea      	bcs.n	8000eb4 <__udivmoddi4+0x284>
 8000ede:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ee2:	eb69 0503 	sbc.w	r5, r9, r3
 8000ee6:	3801      	subs	r0, #1
 8000ee8:	e7e4      	b.n	8000eb4 <__udivmoddi4+0x284>
 8000eea:	4628      	mov	r0, r5
 8000eec:	e7d7      	b.n	8000e9e <__udivmoddi4+0x26e>
 8000eee:	4640      	mov	r0, r8
 8000ef0:	e791      	b.n	8000e16 <__udivmoddi4+0x1e6>
 8000ef2:	4681      	mov	r9, r0
 8000ef4:	e7be      	b.n	8000e74 <__udivmoddi4+0x244>
 8000ef6:	4601      	mov	r1, r0
 8000ef8:	e778      	b.n	8000dec <__udivmoddi4+0x1bc>
 8000efa:	3802      	subs	r0, #2
 8000efc:	443c      	add	r4, r7
 8000efe:	e745      	b.n	8000d8c <__udivmoddi4+0x15c>
 8000f00:	4608      	mov	r0, r1
 8000f02:	e708      	b.n	8000d16 <__udivmoddi4+0xe6>
 8000f04:	f1a8 0802 	sub.w	r8, r8, #2
 8000f08:	443d      	add	r5, r7
 8000f0a:	e72b      	b.n	8000d64 <__udivmoddi4+0x134>

08000f0c <__aeabi_idiv0>:
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f10:	b500      	push	{lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f12:	2003      	movs	r0, #3
{
 8000f14:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f16:	f000 fc59 	bl	80017cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f00f fe8c 	bl	8010c38 <HAL_InitTick>
 8000f20:	b118      	cbz	r0, 8000f2a <HAL_Init+0x1a>
  {
    status = HAL_ERROR;
 8000f22:	2001      	movs	r0, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8000f24:	b003      	add	sp, #12
 8000f26:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f2a:	9001      	str	r0, [sp, #4]
    HAL_MspInit();
 8000f2c:	f00f fe64 	bl	8010bf8 <HAL_MspInit>
 8000f30:	9801      	ldr	r0, [sp, #4]
}
 8000f32:	b003      	add	sp, #12
 8000f34:	f85d fb04 	ldr.w	pc, [sp], #4

08000f38 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000f38:	4a02      	ldr	r2, [pc, #8]	; (8000f44 <HAL_IncTick+0xc>)
 8000f3a:	6813      	ldr	r3, [r2, #0]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	2000531c 	.word	0x2000531c

08000f48 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f48:	4b01      	ldr	r3, [pc, #4]	; (8000f50 <HAL_GetTick+0x8>)
 8000f4a:	6818      	ldr	r0, [r3, #0]
}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	2000531c 	.word	0x2000531c

08000f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f54:	b538      	push	{r3, r4, r5, lr}
 8000f56:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f58:	f7ff fff6 	bl	8000f48 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000f5e:	4605      	mov	r5, r0
  {
    wait++;
 8000f60:	bf18      	it	ne
 8000f62:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f64:	f7ff fff0 	bl	8000f48 <HAL_GetTick>
 8000f68:	1b40      	subs	r0, r0, r5
 8000f6a:	4284      	cmp	r4, r0
 8000f6c:	d8fa      	bhi.n	8000f64 <HAL_Delay+0x10>
  {
  }
}
 8000f6e:	bd38      	pop	{r3, r4, r5, pc}

08000f70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f72:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f78:	2800      	cmp	r0, #0
 8000f7a:	f000 80b8 	beq.w	80010ee <HAL_ADC_Init+0x17e>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f7e:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8000f80:	4604      	mov	r4, r0
 8000f82:	2d00      	cmp	r5, #0
 8000f84:	f000 80a0 	beq.w	80010c8 <HAL_ADC_Init+0x158>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000f88:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f8a:	6893      	ldr	r3, [r2, #8]
 8000f8c:	0098      	lsls	r0, r3, #2
 8000f8e:	d505      	bpl.n	8000f9c <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f90:	6893      	ldr	r3, [r2, #8]
 8000f92:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000f96:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f9a:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f9c:	6893      	ldr	r3, [r2, #8]
 8000f9e:	00d9      	lsls	r1, r3, #3
 8000fa0:	d417      	bmi.n	8000fd2 <HAL_ADC_Init+0x62>
    LL_ADC_EnableInternalRegulator(hadc->Instance);
    
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000fa2:	4b5d      	ldr	r3, [pc, #372]	; (8001118 <HAL_ADC_Init+0x1a8>)
  MODIFY_REG(ADCx->CR,
 8000fa4:	6891      	ldr	r1, [r2, #8]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	485c      	ldr	r0, [pc, #368]	; (800111c <HAL_ADC_Init+0x1ac>)
 8000faa:	099b      	lsrs	r3, r3, #6
 8000fac:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8000fb0:	fba0 0303 	umull	r0, r3, r0, r3
 8000fb4:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8000fb8:	099b      	lsrs	r3, r3, #6
 8000fba:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000fbe:	6091      	str	r1, [r2, #8]
 8000fc0:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8000fc2:	9b01      	ldr	r3, [sp, #4]
 8000fc4:	b12b      	cbz	r3, 8000fd2 <HAL_ADC_Init+0x62>
    {
      wait_loop_index--;
 8000fc6:	9b01      	ldr	r3, [sp, #4]
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8000fcc:	9b01      	ldr	r3, [sp, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1f9      	bne.n	8000fc6 <HAL_ADC_Init+0x56>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fd2:	6893      	ldr	r3, [r2, #8]
 8000fd4:	00db      	lsls	r3, r3, #3
 8000fd6:	d414      	bmi.n	8001002 <HAL_ADC_Init+0x92>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000fda:	f043 0310 	orr.w	r3, r3, #16
 8000fde:	65a3      	str	r3, [r4, #88]	; 0x58
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fe0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	65e3      	str	r3, [r4, #92]	; 0x5c
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000fe8:	6893      	ldr	r3, [r2, #8]
 8000fea:	075f      	lsls	r7, r3, #29
    
    tmp_hal_status = HAL_ERROR;
 8000fec:	f04f 0001 	mov.w	r0, #1
 8000ff0:	d50c      	bpl.n	800100c <HAL_ADC_Init+0x9c>
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000ff2:	6da3      	ldr	r3, [r4, #88]	; 0x58
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ff4:	6da3      	ldr	r3, [r4, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8000ff6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ff8:	f043 0310 	orr.w	r3, r3, #16
 8000ffc:	65a3      	str	r3, [r4, #88]	; 0x58
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8000ffe:	b003      	add	sp, #12
 8001000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001002:	6893      	ldr	r3, [r2, #8]
 8001004:	075f      	lsls	r7, r3, #29
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	d4f2      	bmi.n	8000ff2 <HAL_ADC_Init+0x82>
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800100c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800100e:	06d9      	lsls	r1, r3, #27
 8001010:	d4f0      	bmi.n	8000ff4 <HAL_ADC_Init+0x84>
    ADC_STATE_CLR_SET(hadc->State,
 8001012:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001014:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800101e:	6893      	ldr	r3, [r2, #8]
 8001020:	07de      	lsls	r6, r3, #31
 8001022:	d40a      	bmi.n	800103a <HAL_ADC_Init+0xca>
 8001024:	4b3e      	ldr	r3, [pc, #248]	; (8001120 <HAL_ADC_Init+0x1b0>)
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	07db      	lsls	r3, r3, #31
 800102a:	d406      	bmi.n	800103a <HAL_ADC_Init+0xca>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800102c:	493d      	ldr	r1, [pc, #244]	; (8001124 <HAL_ADC_Init+0x1b4>)
 800102e:	6865      	ldr	r5, [r4, #4]
 8001030:	688b      	ldr	r3, [r1, #8]
 8001032:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001036:	432b      	orrs	r3, r5
 8001038:	608b      	str	r3, [r1, #8]
                hadc->Init.DataAlign                                                   |
 800103a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800103c:	68e7      	ldr	r7, [r4, #12]
 800103e:	68a6      	ldr	r6, [r4, #8]
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode)  );
 8001040:	f894 1020 	ldrb.w	r1, [r4, #32]
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001044:	7e65      	ldrb	r5, [r4, #25]
                hadc->Init.DataAlign                                                   |
 8001046:	433b      	orrs	r3, r7
 8001048:	4333      	orrs	r3, r6
 800104a:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800104e:	2901      	cmp	r1, #1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001050:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001054:	d046      	beq.n	80010e4 <HAL_ADC_Init+0x174>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001056:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001058:	b121      	cbz	r1, 8001064 <HAL_ADC_Init+0xf4>
                  | hadc->Init.ExternalTrigConvEdge
 800105a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800105c:	f401 7170 	and.w	r1, r1, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001060:	4329      	orrs	r1, r5
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001062:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 8001064:	68d5      	ldr	r5, [r2, #12]
 8001066:	4930      	ldr	r1, [pc, #192]	; (8001128 <HAL_ADC_Init+0x1b8>)
 8001068:	4029      	ands	r1, r5
 800106a:	430b      	orrs	r3, r1
 800106c:	60d3      	str	r3, [r2, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800106e:	6893      	ldr	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001070:	6891      	ldr	r1, [r2, #8]
 8001072:	070d      	lsls	r5, r1, #28
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001074:	f003 0304 	and.w	r3, r3, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001078:	d417      	bmi.n	80010aa <HAL_ADC_Init+0x13a>
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 800107a:	b9b3      	cbnz	r3, 80010aa <HAL_ADC_Init+0x13a>
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800107c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001080:	7e27      	ldrb	r7, [r4, #24]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001082:	68d1      	ldr	r1, [r2, #12]
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                            |
 8001084:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
      if (hadc->Init.OversamplingMode == ENABLE)
 8001086:	f894 6038 	ldrb.w	r6, [r4, #56]	; 0x38
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800108a:	005b      	lsls	r3, r3, #1
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                            |
 800108c:	ea43 3387 	orr.w	r3, r3, r7, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001090:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                            |
 8001094:	432b      	orrs	r3, r5
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001096:	f021 0106 	bic.w	r1, r1, #6
 800109a:	430b      	orrs	r3, r1
      if (hadc->Init.OversamplingMode == ENABLE)
 800109c:	2e01      	cmp	r6, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800109e:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80010a0:	d028      	beq.n	80010f4 <HAL_ADC_Init+0x184>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80010a2:	6913      	ldr	r3, [r2, #16]
 80010a4:	f023 0301 	bic.w	r3, r3, #1
 80010a8:	6113      	str	r3, [r2, #16]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010aa:	6923      	ldr	r3, [r4, #16]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d011      	beq.n	80010d4 <HAL_ADC_Init+0x164>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80010b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80010b2:	f023 030f 	bic.w	r3, r3, #15
 80010b6:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80010b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80010ba:	f023 0303 	bic.w	r3, r3, #3
 80010be:	f043 0301 	orr.w	r3, r3, #1
 80010c2:	65a3      	str	r3, [r4, #88]	; 0x58
}
 80010c4:	b003      	add	sp, #12
 80010c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 80010c8:	f00d faaa 	bl	800e620 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80010cc:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 80010ce:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
 80010d2:	e759      	b.n	8000f88 <HAL_ADC_Init+0x18>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80010d4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80010d6:	69e3      	ldr	r3, [r4, #28]
 80010d8:	f021 010f 	bic.w	r1, r1, #15
 80010dc:	3b01      	subs	r3, #1
 80010de:	430b      	orrs	r3, r1
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	e7e9      	b.n	80010b8 <HAL_ADC_Init+0x148>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80010e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80010e6:	3901      	subs	r1, #1
 80010e8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80010ec:	e7b3      	b.n	8001056 <HAL_ADC_Init+0xe6>
    return HAL_ERROR;
 80010ee:	2001      	movs	r0, #1
}
 80010f0:	b003      	add	sp, #12
 80010f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MODIFY_REG(hadc->Instance->CFGR2,
 80010f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80010f6:	6c27      	ldr	r7, [r4, #64]	; 0x40
 80010f8:	6c66      	ldr	r6, [r4, #68]	; 0x44
 80010fa:	6915      	ldr	r5, [r2, #16]
 80010fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80010fe:	433b      	orrs	r3, r7
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	4333      	orrs	r3, r6
 8001106:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 800110a:	430b      	orrs	r3, r1
 800110c:	f025 0504 	bic.w	r5, r5, #4
 8001110:	432b      	orrs	r3, r5
 8001112:	6113      	str	r3, [r2, #16]
 8001114:	e7c9      	b.n	80010aa <HAL_ADC_Init+0x13a>
 8001116:	bf00      	nop
 8001118:	2000003c 	.word	0x2000003c
 800111c:	053e2d63 	.word	0x053e2d63
 8001120:	50040000 	.word	0x50040000
 8001124:	50040300 	.word	0x50040300
 8001128:	fff0c007 	.word	0xfff0c007

0800112c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800112c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800112e:	4603      	mov	r3, r0
 8001130:	b083      	sub	sp, #12
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001132:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
  __IO uint32_t wait_loop_index = 0;
 8001136:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8001138:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0;
 800113a:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 800113c:	f000 8084 	beq.w	8001248 <HAL_ADC_ConfigChannel+0x11c>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001140:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001142:	6894      	ldr	r4, [r2, #8]
  __HAL_LOCK(hadc);
 8001144:	2001      	movs	r0, #1
 8001146:	f014 0404 	ands.w	r4, r4, #4
 800114a:	f883 0054 	strb.w	r0, [r3, #84]	; 0x54
 800114e:	d008      	beq.n	8001162 <HAL_ADC_ConfigChannel+0x36>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001150:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001152:	f042 0220 	orr.w	r2, r2, #32
 8001156:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001158:	2200      	movs	r2, #0
 800115a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  
  /* Return function status */
  return tmp_hal_status;
}
 800115e:	b003      	add	sp, #12
 8001160:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank <= 5U)
 8001162:	684d      	ldr	r5, [r1, #4]
 8001164:	2d05      	cmp	r5, #5
 8001166:	d972      	bls.n	800124e <HAL_ADC_ConfigChannel+0x122>
 8001168:	f005 071f 	and.w	r7, r5, #31
 800116c:	261f      	movs	r6, #31
 800116e:	09ac      	lsrs	r4, r5, #6
 8001170:	fa06 f507 	lsl.w	r5, r6, r7
 8001174:	f004 040c 	and.w	r4, r4, #12
 8001178:	43ed      	mvns	r5, r5
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800117a:	f102 0e30 	add.w	lr, r2, #48	; 0x30
  MODIFY_REG(*preg,
 800117e:	6808      	ldr	r0, [r1, #0]
 8001180:	f85e 6004 	ldr.w	r6, [lr, r4]
 8001184:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8001188:	4035      	ands	r5, r6
 800118a:	40b8      	lsls	r0, r7
 800118c:	4328      	orrs	r0, r5
 800118e:	f84e 0004 	str.w	r0, [lr, r4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001192:	6890      	ldr	r0, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001194:	6894      	ldr	r4, [r2, #8]
 8001196:	0725      	lsls	r5, r4, #28
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001198:	f000 0004 	and.w	r0, r0, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800119c:	f100 809f 	bmi.w	80012de <HAL_ADC_ConfigChannel+0x1b2>
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 80011a0:	2800      	cmp	r0, #0
 80011a2:	f040 809c 	bne.w	80012de <HAL_ADC_ConfigChannel+0x1b2>
      if(sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80011a6:	688d      	ldr	r5, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80011a8:	680c      	ldr	r4, [r1, #0]
      if(sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80011aa:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 80011ae:	f000 815e 	beq.w	800146e <HAL_ADC_ConfigChannel+0x342>
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80011b2:	0de6      	lsrs	r6, r4, #23
 80011b4:	f006 0604 	and.w	r6, r6, #4
 80011b8:	f102 0e14 	add.w	lr, r2, #20
  MODIFY_REG(*preg,
 80011bc:	f3c4 5404 	ubfx	r4, r4, #20, #5
 80011c0:	f856 000e 	ldr.w	r0, [r6, lr]
 80011c4:	2707      	movs	r7, #7
 80011c6:	40a7      	lsls	r7, r4
 80011c8:	ea20 0007 	bic.w	r0, r0, r7
 80011cc:	fa05 f404 	lsl.w	r4, r5, r4
 80011d0:	4320      	orrs	r0, r4
 80011d2:	f846 000e 	str.w	r0, [r6, lr]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80011d6:	6950      	ldr	r0, [r2, #20]
 80011d8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80011dc:	6150      	str	r0, [r2, #20]
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80011de:	690e      	ldr	r6, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80011e0:	68d4      	ldr	r4, [r2, #12]
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80011e2:	2e04      	cmp	r6, #4
 80011e4:	d03b      	beq.n	800125e <HAL_ADC_ConfigChannel+0x132>
  MODIFY_REG(*preg,
 80011e6:	680d      	ldr	r5, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80011e8:	6948      	ldr	r0, [r1, #20]
 80011ea:	f8df e330 	ldr.w	lr, [pc, #816]	; 800151c <HAL_ADC_ConfigChannel+0x3f0>
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011ee:	f102 0760 	add.w	r7, r2, #96	; 0x60
 80011f2:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 80011f6:	0064      	lsls	r4, r4, #1
 80011f8:	40a0      	lsls	r0, r4
  MODIFY_REG(*preg,
 80011fa:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80011fe:	f857 4026 	ldr.w	r4, [r7, r6, lsl #2]
 8001202:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001206:	4328      	orrs	r0, r5
 8001208:	ea04 0e0e 	and.w	lr, r4, lr
 800120c:	ea40 000e 	orr.w	r0, r0, lr
 8001210:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
 8001214:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001216:	6894      	ldr	r4, [r2, #8]
 8001218:	07e4      	lsls	r4, r4, #31
 800121a:	d564      	bpl.n	80012e6 <HAL_ADC_ConfigChannel+0x1ba>
 800121c:	4604      	mov	r4, r0
    if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800121e:	49b6      	ldr	r1, [pc, #728]	; (80014f8 <HAL_ADC_ConfigChannel+0x3cc>)
 8001220:	420c      	tst	r4, r1
 8001222:	d00f      	beq.n	8001244 <HAL_ADC_ConfigChannel+0x118>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001224:	49b5      	ldr	r1, [pc, #724]	; (80014fc <HAL_ADC_ConfigChannel+0x3d0>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001226:	4db6      	ldr	r5, [pc, #728]	; (8001500 <HAL_ADC_ConfigChannel+0x3d4>)
 8001228:	6888      	ldr	r0, [r1, #8]
 800122a:	42ac      	cmp	r4, r5
 800122c:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8001230:	f000 80bd 	beq.w	80013ae <HAL_ADC_ConfigChannel+0x282>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001234:	4db3      	ldr	r5, [pc, #716]	; (8001504 <HAL_ADC_ConfigChannel+0x3d8>)
 8001236:	42ac      	cmp	r4, r5
 8001238:	f000 80dd 	beq.w	80013f6 <HAL_ADC_ConfigChannel+0x2ca>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800123c:	4db2      	ldr	r5, [pc, #712]	; (8001508 <HAL_ADC_ConfigChannel+0x3dc>)
 800123e:	42ac      	cmp	r4, r5
 8001240:	f000 80a5 	beq.w	800138e <HAL_ADC_ConfigChannel+0x262>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001244:	2000      	movs	r0, #0
 8001246:	e787      	b.n	8001158 <HAL_ADC_ConfigChannel+0x2c>
  __HAL_LOCK(hadc);
 8001248:	2002      	movs	r0, #2
}
 800124a:	b003      	add	sp, #12
 800124c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      switch (sConfig->Rank)
 800124e:	3d02      	subs	r5, #2
 8001250:	2d03      	cmp	r5, #3
 8001252:	f200 80e0 	bhi.w	8001416 <HAL_ADC_ConfigChannel+0x2ea>
 8001256:	e8df f005 	tbb	[pc, r5]
 800125a:	9095      	.short	0x9095
 800125c:	838b      	.short	0x838b
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800125e:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001260:	6e16      	ldr	r6, [r2, #96]	; 0x60
 8001262:	f3c0 0412 	ubfx	r4, r0, #0, #19
 8001266:	f3c6 6784 	ubfx	r7, r6, #26, #5
 800126a:	2c00      	cmp	r4, #0
 800126c:	f040 815a 	bne.w	8001524 <HAL_ADC_ConfigChannel+0x3f8>
 8001270:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8001274:	42af      	cmp	r7, r5
 8001276:	f040 8191 	bne.w	800159c <HAL_ADC_ConfigChannel+0x470>
  MODIFY_REG(*preg,
 800127a:	4614      	mov	r4, r2
 800127c:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 8001280:	f844 6f60 	str.w	r6, [r4, #96]!
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001284:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001286:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8001288:	f3c0 0512 	ubfx	r5, r0, #0, #19
 800128c:	f3c6 6784 	ubfx	r7, r6, #26, #5
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001290:	f102 0e64 	add.w	lr, r2, #100	; 0x64
 8001294:	2d00      	cmp	r5, #0
 8001296:	f040 8153 	bne.w	8001540 <HAL_ADC_ConfigChannel+0x414>
 800129a:	f3c0 6584 	ubfx	r5, r0, #26, #5
 800129e:	42af      	cmp	r7, r5
 80012a0:	f000 8154 	beq.w	800154c <HAL_ADC_ConfigChannel+0x420>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012a4:	68a6      	ldr	r6, [r4, #8]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012a6:	f104 0e08 	add.w	lr, r4, #8
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012aa:	f3c6 6784 	ubfx	r7, r6, #26, #5
 80012ae:	42af      	cmp	r7, r5
 80012b0:	f040 816f 	bne.w	8001592 <HAL_ADC_ConfigChannel+0x466>
  MODIFY_REG(*preg,
 80012b4:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 80012b8:	f8ce 6000 	str.w	r6, [lr]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012bc:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012be:	68e6      	ldr	r6, [r4, #12]
 80012c0:	f3c0 0512 	ubfx	r5, r0, #0, #19
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012c4:	340c      	adds	r4, #12
 80012c6:	f3c6 6784 	ubfx	r7, r6, #26, #5
 80012ca:	2d00      	cmp	r5, #0
 80012cc:	f040 8156 	bne.w	800157c <HAL_ADC_ConfigChannel+0x450>
 80012d0:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80012d4:	42bd      	cmp	r5, r7
 80012d6:	d19e      	bne.n	8001216 <HAL_ADC_ConfigChannel+0xea>
  MODIFY_REG(*preg,
 80012d8:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 80012dc:	6026      	str	r6, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012de:	6894      	ldr	r4, [r2, #8]
 80012e0:	6808      	ldr	r0, [r1, #0]
 80012e2:	07e4      	lsls	r4, r4, #31
 80012e4:	d49a      	bmi.n	800121c <HAL_ADC_ConfigChannel+0xf0>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80012e6:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80012e8:	4c88      	ldr	r4, [pc, #544]	; (800150c <HAL_ADC_ConfigChannel+0x3e0>)
 80012ea:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80012ee:	f8df e230 	ldr.w	lr, [pc, #560]	; 8001520 <HAL_ADC_ConfigChannel+0x3f4>
 80012f2:	f006 0718 	and.w	r7, r6, #24
 80012f6:	40fc      	lsrs	r4, r7
 80012f8:	f3c0 0712 	ubfx	r7, r0, #0, #19
 80012fc:	4004      	ands	r4, r0
 80012fe:	ea25 0507 	bic.w	r5, r5, r7
 8001302:	432c      	orrs	r4, r5
 8001304:	4576      	cmp	r6, lr
 8001306:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800130a:	4604      	mov	r4, r0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800130c:	d187      	bne.n	800121e <HAL_ADC_ConfigChannel+0xf2>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1UL) & 0x1FUL), sConfig->SamplingTime);
 800130e:	2f00      	cmp	r7, #0
 8001310:	f040 8086 	bne.w	8001420 <HAL_ADC_ConfigChannel+0x2f4>
 8001314:	0e80      	lsrs	r0, r0, #26
 8001316:	1c44      	adds	r4, r0, #1
 8001318:	f004 061f 	and.w	r6, r4, #31
 800131c:	2e09      	cmp	r6, #9
 800131e:	f200 80b9 	bhi.w	8001494 <HAL_ADC_ConfigChannel+0x368>
 8001322:	06a4      	lsls	r4, r4, #26
 8001324:	2501      	movs	r5, #1
 8001326:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 800132a:	40b5      	lsls	r5, r6
 800132c:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8001330:	432c      	orrs	r4, r5
 8001332:	0500      	lsls	r0, r0, #20
 8001334:	4320      	orrs	r0, r4
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001336:	0dc5      	lsrs	r5, r0, #23
 8001338:	f005 0504 	and.w	r5, r5, #4
 800133c:	f102 0e14 	add.w	lr, r2, #20
  MODIFY_REG(*preg,
 8001340:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8001344:	f855 400e 	ldr.w	r4, [r5, lr]
 8001348:	688e      	ldr	r6, [r1, #8]
 800134a:	2707      	movs	r7, #7
 800134c:	4087      	lsls	r7, r0
 800134e:	ea24 0407 	bic.w	r4, r4, r7
 8001352:	fa06 f000 	lsl.w	r0, r6, r0
 8001356:	4320      	orrs	r0, r4
 8001358:	f845 000e 	str.w	r0, [r5, lr]
 800135c:	680c      	ldr	r4, [r1, #0]
 800135e:	e75e      	b.n	800121e <HAL_ADC_ConfigChannel+0xf2>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8001360:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001364:	6048      	str	r0, [r1, #4]
 8001366:	2700      	movs	r7, #0
 8001368:	f06f 051f 	mvn.w	r5, #31
 800136c:	2404      	movs	r4, #4
 800136e:	e704      	b.n	800117a <HAL_ADC_ConfigChannel+0x4e>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8001370:	2718      	movs	r7, #24
 8001372:	604f      	str	r7, [r1, #4]
 8001374:	f06f 55f8 	mvn.w	r5, #520093696	; 0x1f000000
 8001378:	e6ff      	b.n	800117a <HAL_ADC_ConfigChannel+0x4e>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 800137a:	2712      	movs	r7, #18
 800137c:	604f      	str	r7, [r1, #4]
 800137e:	f46f 05f8 	mvn.w	r5, #8126464	; 0x7c0000
 8001382:	e6fa      	b.n	800117a <HAL_ADC_ConfigChannel+0x4e>
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8001384:	270c      	movs	r7, #12
 8001386:	604f      	str	r7, [r1, #4]
 8001388:	f46f 35f8 	mvn.w	r5, #126976	; 0x1f000
 800138c:	e6f5      	b.n	800117a <HAL_ADC_ConfigChannel+0x4e>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800138e:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8001392:	f47f af57 	bne.w	8001244 <HAL_ADC_ConfigChannel+0x118>
        if (ADC_VREFINT_INSTANCE(hadc))
 8001396:	4c5e      	ldr	r4, [pc, #376]	; (8001510 <HAL_ADC_ConfigChannel+0x3e4>)
 8001398:	42a2      	cmp	r2, r4
 800139a:	f47f af53 	bne.w	8001244 <HAL_ADC_ConfigChannel+0x118>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800139e:	688a      	ldr	r2, [r1, #8]
 80013a0:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80013a4:	4332      	orrs	r2, r6
 80013a6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80013aa:	608a      	str	r2, [r1, #8]
 80013ac:	e6d4      	b.n	8001158 <HAL_ADC_ConfigChannel+0x2c>
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80013ae:	0200      	lsls	r0, r0, #8
 80013b0:	f53f af48 	bmi.w	8001244 <HAL_ADC_ConfigChannel+0x118>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 80013b4:	4856      	ldr	r0, [pc, #344]	; (8001510 <HAL_ADC_ConfigChannel+0x3e4>)
 80013b6:	4282      	cmp	r2, r0
 80013b8:	f47f af44 	bne.w	8001244 <HAL_ADC_ConfigChannel+0x118>
 80013bc:	688a      	ldr	r2, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80013be:	4c55      	ldr	r4, [pc, #340]	; (8001514 <HAL_ADC_ConfigChannel+0x3e8>)
 80013c0:	4855      	ldr	r0, [pc, #340]	; (8001518 <HAL_ADC_ConfigChannel+0x3ec>)
 80013c2:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80013c6:	4332      	orrs	r2, r6
 80013c8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80013cc:	608a      	str	r2, [r1, #8]
 80013ce:	6822      	ldr	r2, [r4, #0]
 80013d0:	0992      	lsrs	r2, r2, #6
 80013d2:	fba0 1202 	umull	r1, r2, r0, r2
 80013d6:	0992      	lsrs	r2, r2, #6
 80013d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80013dc:	0092      	lsls	r2, r2, #2
 80013de:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0UL)
 80013e0:	9a01      	ldr	r2, [sp, #4]
 80013e2:	2a00      	cmp	r2, #0
 80013e4:	f43f af2e 	beq.w	8001244 <HAL_ADC_ConfigChannel+0x118>
            wait_loop_index--;
 80013e8:	9a01      	ldr	r2, [sp, #4]
 80013ea:	3a01      	subs	r2, #1
 80013ec:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0UL)
 80013ee:	9a01      	ldr	r2, [sp, #4]
 80013f0:	2a00      	cmp	r2, #0
 80013f2:	d1f9      	bne.n	80013e8 <HAL_ADC_ConfigChannel+0x2bc>
 80013f4:	e726      	b.n	8001244 <HAL_ADC_ConfigChannel+0x118>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80013f6:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80013fa:	f47f af23 	bne.w	8001244 <HAL_ADC_ConfigChannel+0x118>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80013fe:	4c44      	ldr	r4, [pc, #272]	; (8001510 <HAL_ADC_ConfigChannel+0x3e4>)
 8001400:	42a2      	cmp	r2, r4
 8001402:	f47f af1f 	bne.w	8001244 <HAL_ADC_ConfigChannel+0x118>
 8001406:	688a      	ldr	r2, [r1, #8]
 8001408:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800140c:	4332      	orrs	r2, r6
 800140e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001412:	608a      	str	r2, [r1, #8]
 8001414:	e6a0      	b.n	8001158 <HAL_ADC_ConfigChannel+0x2c>
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8001416:	2706      	movs	r7, #6
 8001418:	604f      	str	r7, [r1, #4]
 800141a:	f46f 65f8 	mvn.w	r5, #1984	; 0x7c0
 800141e:	e6ac      	b.n	800117a <HAL_ADC_ConfigChannel+0x4e>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001420:	fa90 f4a0 	rbit	r4, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1UL) & 0x1FUL), sConfig->SamplingTime);
 8001424:	fab4 f484 	clz	r4, r4
 8001428:	3401      	adds	r4, #1
 800142a:	f004 041f 	and.w	r4, r4, #31
 800142e:	2c09      	cmp	r4, #9
 8001430:	d83f      	bhi.n	80014b2 <HAL_ADC_ConfigChannel+0x386>
 8001432:	fa90 f4a0 	rbit	r4, r0
 8001436:	fab4 f484 	clz	r4, r4
 800143a:	fa90 f5a0 	rbit	r5, r0
 800143e:	fab5 f585 	clz	r5, r5
 8001442:	3501      	adds	r5, #1
 8001444:	3401      	adds	r4, #1
 8001446:	2601      	movs	r6, #1
 8001448:	f005 051f 	and.w	r5, r5, #31
 800144c:	06a4      	lsls	r4, r4, #26
 800144e:	fa06 f505 	lsl.w	r5, r6, r5
 8001452:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8001456:	432c      	orrs	r4, r5
 8001458:	fa90 f0a0 	rbit	r0, r0
 800145c:	fab0 f080 	clz	r0, r0
 8001460:	4430      	add	r0, r6
 8001462:	f000 001f 	and.w	r0, r0, #31
 8001466:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800146a:	0500      	lsls	r0, r0, #20
 800146c:	e762      	b.n	8001334 <HAL_ADC_ConfigChannel+0x208>
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800146e:	0de0      	lsrs	r0, r4, #23
 8001470:	f000 0004 	and.w	r0, r0, #4
 8001474:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 8001478:	f3c4 5404 	ubfx	r4, r4, #20, #5
 800147c:	59c5      	ldr	r5, [r0, r7]
 800147e:	2607      	movs	r6, #7
 8001480:	fa06 f404 	lsl.w	r4, r6, r4
 8001484:	ea25 0504 	bic.w	r5, r5, r4
 8001488:	51c5      	str	r5, [r0, r7]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800148a:	6950      	ldr	r0, [r2, #20]
 800148c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8001490:	6150      	str	r0, [r2, #20]
 8001492:	e6a4      	b.n	80011de <HAL_ADC_ConfigChannel+0xb2>
 8001494:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8001498:	06a5      	lsls	r5, r4, #26
 800149a:	381e      	subs	r0, #30
 800149c:	2401      	movs	r4, #1
 800149e:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80014a2:	fa04 f606 	lsl.w	r6, r4, r6
 80014a6:	0500      	lsls	r0, r0, #20
 80014a8:	4335      	orrs	r5, r6
 80014aa:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 80014ae:	4328      	orrs	r0, r5
 80014b0:	e741      	b.n	8001336 <HAL_ADC_ConfigChannel+0x20a>
 80014b2:	fa90 f5a0 	rbit	r5, r0
 80014b6:	fab5 f585 	clz	r5, r5
 80014ba:	fa90 f4a0 	rbit	r4, r0
 80014be:	fab4 f484 	clz	r4, r4
 80014c2:	3401      	adds	r4, #1
 80014c4:	3501      	adds	r5, #1
 80014c6:	2601      	movs	r6, #1
 80014c8:	f004 041f 	and.w	r4, r4, #31
 80014cc:	06ad      	lsls	r5, r5, #26
 80014ce:	fa06 f404 	lsl.w	r4, r6, r4
 80014d2:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80014d6:	4325      	orrs	r5, r4
 80014d8:	fa90 f4a0 	rbit	r4, r0
 80014dc:	fab4 f484 	clz	r4, r4
 80014e0:	4434      	add	r4, r6
 80014e2:	f004 041f 	and.w	r4, r4, #31
 80014e6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80014ea:	f1a4 001e 	sub.w	r0, r4, #30
 80014ee:	0500      	lsls	r0, r0, #20
 80014f0:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 80014f4:	e7db      	b.n	80014ae <HAL_ADC_ConfigChannel+0x382>
 80014f6:	bf00      	nop
 80014f8:	80080000 	.word	0x80080000
 80014fc:	50040300 	.word	0x50040300
 8001500:	c7520000 	.word	0xc7520000
 8001504:	cb840000 	.word	0xcb840000
 8001508:	80000001 	.word	0x80000001
 800150c:	0007ffff 	.word	0x0007ffff
 8001510:	50040000 	.word	0x50040000
 8001514:	2000003c 	.word	0x2000003c
 8001518:	053e2d63 	.word	0x053e2d63
 800151c:	03fff000 	.word	0x03fff000
 8001520:	407f0000 	.word	0x407f0000
 8001524:	fa90 f4a0 	rbit	r4, r0
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001528:	fab4 f484 	clz	r4, r4
 800152c:	42a7      	cmp	r7, r4
 800152e:	f43f aea4 	beq.w	800127a <HAL_ADC_ConfigChannel+0x14e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001532:	6e56      	ldr	r6, [r2, #100]	; 0x64
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001534:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001538:	f3c6 6784 	ubfx	r7, r6, #26, #5
 800153c:	f102 0e64 	add.w	lr, r2, #100	; 0x64
 8001540:	fa90 f5a0 	rbit	r5, r0
 8001544:	fab5 f585 	clz	r5, r5
 8001548:	42bd      	cmp	r5, r7
 800154a:	d11c      	bne.n	8001586 <HAL_ADC_ConfigChannel+0x45a>
  MODIFY_REG(*preg,
 800154c:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 8001550:	f8ce 6000 	str.w	r6, [lr]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001554:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001556:	68a6      	ldr	r6, [r4, #8]
 8001558:	f3c0 0512 	ubfx	r5, r0, #0, #19
 800155c:	f3c6 6784 	ubfx	r7, r6, #26, #5
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001560:	f104 0e08 	add.w	lr, r4, #8
 8001564:	b315      	cbz	r5, 80015ac <HAL_ADC_ConfigChannel+0x480>
 8001566:	fa90 f5a0 	rbit	r5, r0
 800156a:	fab5 f585 	clz	r5, r5
 800156e:	42bd      	cmp	r5, r7
 8001570:	f43f aea0 	beq.w	80012b4 <HAL_ADC_ConfigChannel+0x188>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001574:	68e6      	ldr	r6, [r4, #12]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001576:	340c      	adds	r4, #12
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001578:	f3c6 6784 	ubfx	r7, r6, #26, #5
 800157c:	fa90 f5a0 	rbit	r5, r0
 8001580:	fab5 f585 	clz	r5, r5
 8001584:	e6a6      	b.n	80012d4 <HAL_ADC_ConfigChannel+0x1a8>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001586:	68a6      	ldr	r6, [r4, #8]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001588:	f104 0e08 	add.w	lr, r4, #8
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800158c:	f3c6 6784 	ubfx	r7, r6, #26, #5
 8001590:	e7e9      	b.n	8001566 <HAL_ADC_ConfigChannel+0x43a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001592:	68e6      	ldr	r6, [r4, #12]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001594:	340c      	adds	r4, #12
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001596:	f3c6 6784 	ubfx	r7, r6, #26, #5
 800159a:	e69b      	b.n	80012d4 <HAL_ADC_ConfigChannel+0x1a8>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800159c:	6e56      	ldr	r6, [r2, #100]	; 0x64
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800159e:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80015a2:	f3c6 6784 	ubfx	r7, r6, #26, #5
 80015a6:	f102 0e64 	add.w	lr, r2, #100	; 0x64
 80015aa:	e678      	b.n	800129e <HAL_ADC_ConfigChannel+0x172>
 80015ac:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80015b0:	e67d      	b.n	80012ae <HAL_ADC_ConfigChannel+0x182>
 80015b2:	bf00      	nop

080015b4 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80015b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015b6:	b083      	sub	sp, #12
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	9300      	str	r3, [sp, #0]
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80015bc:	2800      	cmp	r0, #0
 80015be:	f000 8085 	beq.w	80016cc <HAL_COMP_Init+0x118>
  {
    status = HAL_ERROR;
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80015c2:	6802      	ldr	r2, [r0, #0]
 80015c4:	6813      	ldr	r3, [r2, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	4604      	mov	r4, r0
 80015ca:	db7f      	blt.n	80016cc <HAL_COMP_Init+0x118>
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif
    
    if(hcomp->State == HAL_COMP_STATE_RESET)
 80015cc:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80015d0:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d07c      	beq.n	80016d2 <HAL_COMP_Init+0x11e>
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
    
    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.NonInvertingInput
               | hcomp->Init.InvertingInput
 80015d8:	6927      	ldr	r7, [r4, #16]
 80015da:	68e3      	ldr	r3, [r4, #12]
               | hcomp->Init.BlankingSrce
 80015dc:	69e6      	ldr	r6, [r4, #28]
               | hcomp->Init.Hysteresis
 80015de:	6965      	ldr	r5, [r4, #20]
               | hcomp->Init.OutputPol
 80015e0:	69a0      	ldr	r0, [r4, #24]
    tmp_csr = (  hcomp->Init.NonInvertingInput
 80015e2:	68a1      	ldr	r1, [r4, #8]
               | hcomp->Init.InvertingInput
 80015e4:	433b      	orrs	r3, r7
               | hcomp->Init.BlankingSrce
 80015e6:	4333      	orrs	r3, r6
               | hcomp->Init.Hysteresis
 80015e8:	432b      	orrs	r3, r5
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80015ea:	6816      	ldr	r6, [r2, #0]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif
#else
    MODIFY_REG(hcomp->Instance->CSR,
 80015ec:	4d45      	ldr	r5, [pc, #276]	; (8001704 <HAL_COMP_Init+0x150>)
 80015ee:	6817      	ldr	r7, [r2, #0]
               | hcomp->Init.OutputPol
 80015f0:	4303      	orrs	r3, r0
    tmp_csr = (  hcomp->Init.NonInvertingInput
 80015f2:	430b      	orrs	r3, r1
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80015f4:	6861      	ldr	r1, [r4, #4]
    MODIFY_REG(hcomp->Instance->CSR,
 80015f6:	403d      	ands	r5, r7
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80015f8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    MODIFY_REG(hcomp->Instance->CSR,
 80015fc:	ea43 0305 	orr.w	r3, r3, r5
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8001600:	4941      	ldr	r1, [pc, #260]	; (8001708 <HAL_COMP_Init+0x154>)
    MODIFY_REG(hcomp->Instance->CSR,
 8001602:	6013      	str	r3, [r2, #0]
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8001604:	680b      	ldr	r3, [r1, #0]
 8001606:	bf0c      	ite	eq
 8001608:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 800160c:	f423 7300 	bicne.w	r3, r3, #512	; 0x200
 8001610:	600b      	str	r3, [r1, #0]
    }
#endif /* COMP2 */
    
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8001612:	6813      	ldr	r3, [r2, #0]
 8001614:	021d      	lsls	r5, r3, #8
 8001616:	d514      	bpl.n	8001642 <HAL_COMP_Init+0x8e>
 8001618:	0237      	lsls	r7, r6, #8
 800161a:	d412      	bmi.n	8001642 <HAL_COMP_Init+0x8e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800161c:	4b3b      	ldr	r3, [pc, #236]	; (800170c <HAL_COMP_Init+0x158>)
 800161e:	493c      	ldr	r1, [pc, #240]	; (8001710 <HAL_COMP_Init+0x15c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	099b      	lsrs	r3, r3, #6
 8001624:	fba1 1303 	umull	r1, r3, r1, r3
 8001628:	099b      	lsrs	r3, r3, #6
 800162a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	9300      	str	r3, [sp, #0]
      while(wait_loop_index != 0UL)
 8001632:	9b00      	ldr	r3, [sp, #0]
 8001634:	b12b      	cbz	r3, 8001642 <HAL_COMP_Init+0x8e>
      {
        wait_loop_index--;
 8001636:	9b00      	ldr	r3, [sp, #0]
 8001638:	3b01      	subs	r3, #1
 800163a:	9300      	str	r3, [sp, #0]
      while(wait_loop_index != 0UL)
 800163c:	9b00      	ldr	r3, [sp, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f9      	bne.n	8001636 <HAL_COMP_Init+0x82>
      }
    }
    
    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8001642:	4934      	ldr	r1, [pc, #208]	; (8001714 <HAL_COMP_Init+0x160>)
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8001644:	6a23      	ldr	r3, [r4, #32]
 8001646:	428a      	cmp	r2, r1
 8001648:	bf0b      	itete	eq
 800164a:	f46f 1200 	mvneq.w	r2, #2097152	; 0x200000
 800164e:	f46f 0280 	mvnne.w	r2, #4194304	; 0x400000
 8001652:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
 8001656:	f44f 0180 	movne.w	r1, #4194304	; 0x400000
 800165a:	0798      	lsls	r0, r3, #30
 800165c:	d111      	bne.n	8001682 <HAL_COMP_Init+0xce>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800165e:	4b2e      	ldr	r3, [pc, #184]	; (8001718 <HAL_COMP_Init+0x164>)
 8001660:	6859      	ldr	r1, [r3, #4]
 8001662:	4011      	ands	r1, r2
 8001664:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001666:	6819      	ldr	r1, [r3, #0]
 8001668:	400a      	ands	r2, r1
 800166a:	601a      	str	r2, [r3, #0]
    }
    
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800166c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8001670:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8001674:	2b00      	cmp	r3, #0
 8001676:	d126      	bne.n	80016c6 <HAL_COMP_Init+0x112>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8001678:	2301      	movs	r3, #1
 800167a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    }
  }
  
  return status;
}
 800167e:	b003      	add	sp, #12
 8001680:	bdf0      	pop	{r4, r5, r6, r7, pc}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001682:	4d25      	ldr	r5, [pc, #148]	; (8001718 <HAL_COMP_Init+0x164>)
 8001684:	68a8      	ldr	r0, [r5, #8]
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8001686:	06de      	lsls	r6, r3, #27
 8001688:	bf4c      	ite	mi
 800168a:	4308      	orrmi	r0, r1
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800168c:	4010      	andpl	r0, r2
 800168e:	60a8      	str	r0, [r5, #8]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001690:	4d21      	ldr	r5, [pc, #132]	; (8001718 <HAL_COMP_Init+0x164>)
 8001692:	68e8      	ldr	r0, [r5, #12]
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8001694:	069f      	lsls	r7, r3, #26
 8001696:	bf4c      	ite	mi
 8001698:	4308      	orrmi	r0, r1
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800169a:	4010      	andpl	r0, r2
 800169c:	60e8      	str	r0, [r5, #12]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 800169e:	481e      	ldr	r0, [pc, #120]	; (8001718 <HAL_COMP_Init+0x164>)
 80016a0:	6141      	str	r1, [r0, #20]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80016a2:	6845      	ldr	r5, [r0, #4]
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80016a4:	079e      	lsls	r6, r3, #30
 80016a6:	bf4c      	ite	mi
 80016a8:	430d      	orrmi	r5, r1
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80016aa:	4015      	andpl	r5, r2
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80016ac:	07db      	lsls	r3, r3, #31
 80016ae:	6045      	str	r5, [r0, #4]
 80016b0:	d523      	bpl.n	80016fa <HAL_COMP_Init+0x146>
  SET_BIT(EXTI->IMR1, ExtiLine);
 80016b2:	4b19      	ldr	r3, [pc, #100]	; (8001718 <HAL_COMP_Init+0x164>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	4311      	orrs	r1, r2
 80016b8:	6019      	str	r1, [r3, #0]
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80016ba:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80016be:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0d8      	beq.n	8001678 <HAL_COMP_Init+0xc4>
  HAL_StatusTypeDef status = HAL_OK;
 80016c6:	2000      	movs	r0, #0
}
 80016c8:	b003      	add	sp, #12
 80016ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_ERROR;
 80016cc:	2001      	movs	r0, #1
}
 80016ce:	b003      	add	sp, #12
 80016d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016d6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
      COMP_CLEAR_ERRORCODE(hcomp);
 80016da:	6281      	str	r1, [r0, #40]	; 0x28
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
      hcomp->Lock = HAL_UNLOCKED;
 80016de:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e2:	f042 0201 	orr.w	r2, r2, #1
 80016e6:	661a      	str	r2, [r3, #96]	; 0x60
 80016e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	9b01      	ldr	r3, [sp, #4]
      HAL_COMP_MspInit(hcomp);
 80016f2:	f00d fa13 	bl	800eb1c <HAL_COMP_MspInit>
 80016f6:	6822      	ldr	r2, [r4, #0]
 80016f8:	e76e      	b.n	80015d8 <HAL_COMP_Init+0x24>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80016fa:	4907      	ldr	r1, [pc, #28]	; (8001718 <HAL_COMP_Init+0x164>)
 80016fc:	680b      	ldr	r3, [r1, #0]
 80016fe:	401a      	ands	r2, r3
 8001700:	600a      	str	r2, [r1, #0]
 8001702:	e7b3      	b.n	800166c <HAL_COMP_Init+0xb8>
 8001704:	ff207d03 	.word	0xff207d03
 8001708:	40010204 	.word	0x40010204
 800170c:	2000003c 	.word	0x2000003c
 8001710:	053e2d63 	.word	0x053e2d63
 8001714:	40010200 	.word	0x40010200
 8001718:	40010400 	.word	0x40010400

0800171c <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 800171c:	b410      	push	{r4}
 800171e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8001720:	2300      	movs	r3, #0
 8001722:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8001724:	b138      	cbz	r0, 8001736 <HAL_COMP_Start+0x1a>
  {
    status = HAL_ERROR;
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8001726:	6802      	ldr	r2, [r0, #0]
 8001728:	6813      	ldr	r3, [r2, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	db03      	blt.n	8001736 <HAL_COMP_Start+0x1a>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 800172e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001732:	2b01      	cmp	r3, #1
 8001734:	d004      	beq.n	8001740 <HAL_COMP_Start+0x24>
    status = HAL_ERROR;
 8001736:	2001      	movs	r0, #1
      status = HAL_ERROR;
    }
  }

  return status;
}
 8001738:	b003      	add	sp, #12
 800173a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800173e:	4770      	bx	lr
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8001740:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <HAL_COMP_Start+0x60>)
 8001744:	4c0e      	ldr	r4, [pc, #56]	; (8001780 <HAL_COMP_Start+0x64>)
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8001746:	f041 0101 	orr.w	r1, r1, #1
 800174a:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	099b      	lsrs	r3, r3, #6
 8001750:	fba4 2303 	umull	r2, r3, r4, r3
 8001754:	099b      	lsrs	r3, r3, #6
 8001756:	00db      	lsls	r3, r3, #3
      hcomp->State = HAL_COMP_STATE_BUSY;
 8001758:	2202      	movs	r2, #2
 800175a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800175e:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 8001760:	9b01      	ldr	r3, [sp, #4]
 8001762:	b12b      	cbz	r3, 8001770 <HAL_COMP_Start+0x54>
        wait_loop_index--;
 8001764:	9b01      	ldr	r3, [sp, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 800176a:	9b01      	ldr	r3, [sp, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1f9      	bne.n	8001764 <HAL_COMP_Start+0x48>
  HAL_StatusTypeDef status = HAL_OK;
 8001770:	2000      	movs	r0, #0
}
 8001772:	b003      	add	sp, #12
 8001774:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	2000003c 	.word	0x2000003c
 8001780:	053e2d63 	.word	0x053e2d63

08001784 <HAL_COMP_IRQHandler>:
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001784:	4a0e      	ldr	r2, [pc, #56]	; (80017c0 <HAL_COMP_IRQHandler+0x3c>)
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8001786:	6803      	ldr	r3, [r0, #0]
 8001788:	6951      	ldr	r1, [r2, #20]
{
 800178a:	b510      	push	{r4, lr}
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800178c:	4c0d      	ldr	r4, [pc, #52]	; (80017c4 <HAL_COMP_IRQHandler+0x40>)
 800178e:	42a3      	cmp	r3, r4
 8001790:	bf0c      	ite	eq
 8001792:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001796:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 800179a:	ea33 0101 	bics.w	r1, r3, r1
 800179e:	d000      	beq.n	80017a2 <HAL_COMP_IRQHandler+0x1e>
 80017a0:	bd10      	pop	{r4, pc}
  /* Check COMP EXTI flag */
  if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
  {
#if defined(COMP2)
    /* Check whether comparator is in independent or window mode */
    if(READ_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE) != RESET)
 80017a2:	4909      	ldr	r1, [pc, #36]	; (80017c8 <HAL_COMP_IRQHandler+0x44>)
 80017a4:	6809      	ldr	r1, [r1, #0]
 80017a6:	0589      	lsls	r1, r1, #22
 80017a8:	d403      	bmi.n	80017b2 <HAL_COMP_IRQHandler+0x2e>
  WRITE_REG(EXTI->PR1, ExtiLine);
 80017aa:	6153      	str	r3, [r2, #20]
    
    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 80017ac:	f00e fde2 	bl	8010374 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 80017b0:	bd10      	pop	{r4, pc}
 80017b2:	f44f 03c0 	mov.w	r3, #6291456	; 0x600000
 80017b6:	6153      	str	r3, [r2, #20]
    HAL_COMP_TriggerCallback(hcomp);
 80017b8:	f00e fddc 	bl	8010374 <HAL_COMP_TriggerCallback>
}
 80017bc:	bd10      	pop	{r4, pc}
 80017be:	bf00      	nop
 80017c0:	40010400 	.word	0x40010400
 80017c4:	40010200 	.word	0x40010200
 80017c8:	40010204 	.word	0x40010204

080017cc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017cc:	4a07      	ldr	r2, [pc, #28]	; (80017ec <HAL_NVIC_SetPriorityGrouping+0x20>)
 80017ce:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017d0:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 80017d4:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80017d6:	0200      	lsls	r0, r0, #8
 80017d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017dc:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80017e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80017e4:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80017e6:	60d3      	str	r3, [r2, #12]
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f0:	4b18      	ldr	r3, [pc, #96]	; (8001854 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f2:	b470      	push	{r4, r5, r6}
 80017f4:	68dc      	ldr	r4, [r3, #12]
 80017f6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017fa:	f1c4 0607 	rsb	r6, r4, #7
 80017fe:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001800:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001804:	bf28      	it	cs
 8001806:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001808:	2b06      	cmp	r3, #6
 800180a:	d917      	bls.n	800183c <HAL_NVIC_SetPriority+0x4c>
 800180c:	3c03      	subs	r4, #3
 800180e:	2501      	movs	r5, #1
 8001810:	40a5      	lsls	r5, r4
 8001812:	3d01      	subs	r5, #1
 8001814:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001816:	2301      	movs	r3, #1
 8001818:	40b3      	lsls	r3, r6
 800181a:	3b01      	subs	r3, #1
 800181c:	4019      	ands	r1, r3
 800181e:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 8001820:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001822:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 8001826:	db0c      	blt.n	8001842 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001828:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800182c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001830:	0109      	lsls	r1, r1, #4
 8001832:	b2c9      	uxtb	r1, r1
 8001834:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001838:	bc70      	pop	{r4, r5, r6}
 800183a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800183c:	2200      	movs	r2, #0
 800183e:	4614      	mov	r4, r2
 8001840:	e7e9      	b.n	8001816 <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001842:	4b05      	ldr	r3, [pc, #20]	; (8001858 <HAL_NVIC_SetPriority+0x68>)
 8001844:	f000 000f 	and.w	r0, r0, #15
 8001848:	0109      	lsls	r1, r1, #4
 800184a:	4403      	add	r3, r0
 800184c:	b2c9      	uxtb	r1, r1
 800184e:	7619      	strb	r1, [r3, #24]
 8001850:	bc70      	pop	{r4, r5, r6}
 8001852:	4770      	bx	lr
 8001854:	e000ed00 	.word	0xe000ed00
 8001858:	e000ecfc 	.word	0xe000ecfc

0800185c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800185c:	f000 011f 	and.w	r1, r0, #31
 8001860:	2301      	movs	r3, #1
 8001862:	0940      	lsrs	r0, r0, #5
 8001864:	4a02      	ldr	r2, [pc, #8]	; (8001870 <HAL_NVIC_EnableIRQ+0x14>)
 8001866:	408b      	lsls	r3, r1
 8001868:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100

08001874 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
  /* Check DAC handle */
  if(hdac == NULL)
 8001874:	b188      	cbz	r0, 800189a <HAL_DAC_Init+0x26>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8001876:	7903      	ldrb	r3, [r0, #4]
{
 8001878:	b510      	push	{r4, lr}
  if(hdac->State == HAL_DAC_STATE_RESET)
 800187a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800187e:	4604      	mov	r4, r0
 8001880:	b13b      	cbz	r3, 8001892 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001882:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8001884:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001886:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8001888:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 800188a:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800188c:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800188e:	7122      	strb	r2, [r4, #4]
  return HAL_OK;
 8001890:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8001892:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8001894:	f00d f9a4 	bl	800ebe0 <HAL_DAC_MspInit>
 8001898:	e7f3      	b.n	8001882 <HAL_DAC_Init+0xe>
     return HAL_ERROR;
 800189a:	2001      	movs	r0, #1
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop

080018a0 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80018a0:	7943      	ldrb	r3, [r0, #5]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d022      	beq.n	80018ec <HAL_DAC_Start+0x4c>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80018a6:	6802      	ldr	r2, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 80018a8:	2302      	movs	r3, #2
{
 80018aa:	b430      	push	{r4, r5}
  hdac->State = HAL_DAC_STATE_BUSY;
 80018ac:	7103      	strb	r3, [r0, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 80018ae:	6815      	ldr	r5, [r2, #0]
  __HAL_LOCK(hdac);
 80018b0:	2401      	movs	r4, #1
  __HAL_DAC_ENABLE(hdac, Channel);
 80018b2:	f001 0310 	and.w	r3, r1, #16
 80018b6:	fa04 f303 	lsl.w	r3, r4, r3
 80018ba:	432b      	orrs	r3, r5
  __HAL_LOCK(hdac);
 80018bc:	7144      	strb	r4, [r0, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 80018be:	6013      	str	r3, [r2, #0]

#if defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if(((DAC_CR_TEN1 & ~(DAC_CR_TSEL1)) == (hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1))))
 80018c0:	6813      	ldr	r3, [r2, #0]
  if(Channel == DAC_CHANNEL_1)
 80018c2:	b159      	cbz	r1, 80018dc <HAL_DAC_Start+0x3c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if(((DAC_CR_TEN2 & ~(DAC_CR_TSEL2)) == (hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2))))
 80018c4:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
 80018c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80018cc:	d010      	beq.n	80018f0 <HAL_DAC_Start+0x50>
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80018ce:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_READY;
 80018d0:	2201      	movs	r2, #1
 80018d2:	7102      	strb	r2, [r0, #4]
  __HAL_UNLOCK(hdac);
 80018d4:	7143      	strb	r3, [r0, #5]

  /* Return function status */
  return HAL_OK;
}
 80018d6:	bc30      	pop	{r4, r5}
  return HAL_OK;
 80018d8:	4618      	mov	r0, r3
}
 80018da:	4770      	bx	lr
    if(((DAC_CR_TEN1 & ~(DAC_CR_TSEL1)) == (hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1))))
 80018dc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d1f4      	bne.n	80018ce <HAL_DAC_Start+0x2e>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80018e4:	6853      	ldr	r3, [r2, #4]
 80018e6:	4323      	orrs	r3, r4
 80018e8:	6053      	str	r3, [r2, #4]
 80018ea:	e7f0      	b.n	80018ce <HAL_DAC_Start+0x2e>
  __HAL_LOCK(hdac);
 80018ec:	2002      	movs	r0, #2
 80018ee:	4770      	bx	lr
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80018f0:	6853      	ldr	r3, [r2, #4]
 80018f2:	f043 0302 	orr.w	r3, r3, #2
 80018f6:	6053      	str	r3, [r2, #4]
 80018f8:	e7e9      	b.n	80018ce <HAL_DAC_Start+0x2e>
 80018fa:	bf00      	nop

080018fc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 80018fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80018fe:	7944      	ldrb	r4, [r0, #5]
{
 8001900:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdac);
 8001902:	2c01      	cmp	r4, #1
 8001904:	d052      	beq.n	80019ac <HAL_DAC_Start_DMA+0xb0>
 8001906:	4696      	mov	lr, r2
 8001908:	460f      	mov	r7, r1

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800190a:	2202      	movs	r2, #2
  __HAL_LOCK(hdac);
 800190c:	2101      	movs	r1, #1
 800190e:	4604      	mov	r4, r0
 8001910:	7141      	strb	r1, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8001912:	7102      	strb	r2, [r0, #4]

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001914:	6806      	ldr	r6, [r0, #0]
  if(Channel == DAC_CHANNEL_1)
 8001916:	bb17      	cbnz	r7, 800195e <HAL_DAC_Start_DMA+0x62>
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001918:	6832      	ldr	r2, [r6, #0]
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800191a:	6880      	ldr	r0, [r0, #8]
 800191c:	492d      	ldr	r1, [pc, #180]	; (80019d4 <HAL_DAC_Start_DMA+0xd8>)
 800191e:	62c1      	str	r1, [r0, #44]	; 0x2c
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001920:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 80019e4 <HAL_DAC_Start_DMA+0xe8>
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001924:	492c      	ldr	r1, [pc, #176]	; (80019d8 <HAL_DAC_Start_DMA+0xdc>)
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001926:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800192a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000

    /* Case of use of channel 1 */
    switch(Alignment)
 800192e:	2d04      	cmp	r5, #4
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001930:	6341      	str	r1, [r0, #52]	; 0x34
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001932:	6032      	str	r2, [r6, #0]
    switch(Alignment)
 8001934:	d048      	beq.n	80019c8 <HAL_DAC_Start_DMA+0xcc>
 8001936:	2d08      	cmp	r5, #8
 8001938:	d03a      	beq.n	80019b0 <HAL_DAC_Start_DMA+0xb4>
 800193a:	2d00      	cmp	r5, #0
 800193c:	d041      	beq.n	80019c2 <HAL_DAC_Start_DMA+0xc6>
  uint32_t tmpreg = 0U;
 800193e:	463a      	mov	r2, r7

  /* Enable the DMA channel */
  if(Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001940:	6835      	ldr	r5, [r6, #0]
 8001942:	f445 5500 	orr.w	r5, r5, #8192	; 0x2000

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001946:	4671      	mov	r1, lr
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001948:	6035      	str	r5, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800194a:	f000 fa05 	bl	8001d58 <HAL_DMA_Start_IT>
    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800194e:	2300      	movs	r3, #0
 8001950:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8001952:	b310      	cbz	r0, 800199a <HAL_DAC_Start_DMA+0x9e>
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001954:	6923      	ldr	r3, [r4, #16]
 8001956:	f043 0304 	orr.w	r3, r3, #4
 800195a:	6123      	str	r3, [r4, #16]
 800195c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800195e:	6832      	ldr	r2, [r6, #0]
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001960:	68c0      	ldr	r0, [r0, #12]
 8001962:	491e      	ldr	r1, [pc, #120]	; (80019dc <HAL_DAC_Start_DMA+0xe0>)
 8001964:	62c1      	str	r1, [r0, #44]	; 0x2c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001966:	f8df c080 	ldr.w	ip, [pc, #128]	; 80019e8 <HAL_DAC_Start_DMA+0xec>
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800196a:	491d      	ldr	r1, [pc, #116]	; (80019e0 <HAL_DAC_Start_DMA+0xe4>)
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800196c:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001970:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    switch(Alignment)
 8001974:	2d04      	cmp	r5, #4
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001976:	6341      	str	r1, [r0, #52]	; 0x34
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001978:	6032      	str	r2, [r6, #0]
    switch(Alignment)
 800197a:	d01f      	beq.n	80019bc <HAL_DAC_Start_DMA+0xc0>
 800197c:	2d08      	cmp	r5, #8
 800197e:	d01a      	beq.n	80019b6 <HAL_DAC_Start_DMA+0xba>
 8001980:	b32d      	cbz	r5, 80019ce <HAL_DAC_Start_DMA+0xd2>
  uint32_t tmpreg = 0U;
 8001982:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001984:	6835      	ldr	r5, [r6, #0]
 8001986:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800198a:	4671      	mov	r1, lr
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800198c:	6035      	str	r5, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800198e:	f000 f9e3 	bl	8001d58 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8001992:	2300      	movs	r3, #0
 8001994:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 8001996:	2800      	cmp	r0, #0
 8001998:	d1dc      	bne.n	8001954 <HAL_DAC_Start_DMA+0x58>
    __HAL_DAC_ENABLE(hdac, Channel);
 800199a:	6823      	ldr	r3, [r4, #0]
 800199c:	f007 0710 	and.w	r7, r7, #16
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	2101      	movs	r1, #1
 80019a4:	40b9      	lsls	r1, r7
 80019a6:	4311      	orrs	r1, r2
 80019a8:	6019      	str	r1, [r3, #0]
 80019aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hdac);
 80019ac:	2002      	movs	r0, #2
 80019ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80019b0:	f106 0210 	add.w	r2, r6, #16
        break;
 80019b4:	e7c4      	b.n	8001940 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80019b6:	f106 021c 	add.w	r2, r6, #28
        break;
 80019ba:	e7e3      	b.n	8001984 <HAL_DAC_Start_DMA+0x88>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80019bc:	f106 0218 	add.w	r2, r6, #24
        break;
 80019c0:	e7e0      	b.n	8001984 <HAL_DAC_Start_DMA+0x88>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80019c2:	f106 0208 	add.w	r2, r6, #8
        break;
 80019c6:	e7bb      	b.n	8001940 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80019c8:	f106 020c 	add.w	r2, r6, #12
        break;
 80019cc:	e7b8      	b.n	8001940 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80019ce:	f106 0214 	add.w	r2, r6, #20
        break;
 80019d2:	e7d7      	b.n	8001984 <HAL_DAC_Start_DMA+0x88>
 80019d4:	080019ed 	.word	0x080019ed
 80019d8:	08001a11 	.word	0x08001a11
 80019dc:	08001bf5 	.word	0x08001bf5
 80019e0:	08001c11 	.word	0x08001c11
 80019e4:	08001a01 	.word	0x08001a01
 80019e8:	08001c05 	.word	0x08001c05

080019ec <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80019ec:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019ee:	6a84      	ldr	r4, [r0, #40]	; 0x28

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80019f0:	4620      	mov	r0, r4
 80019f2:	f010 ff31 	bl	8012858 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80019f6:	2301      	movs	r3, #1
 80019f8:	7123      	strb	r3, [r4, #4]
 80019fa:	bd10      	pop	{r4, pc}

080019fc <HAL_DAC_ConvHalfCpltCallbackCh1>:
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop

08001a00 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001a00:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001a02:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001a04:	f7ff fffa 	bl	80019fc <HAL_DAC_ConvHalfCpltCallbackCh1>
 8001a08:	bd08      	pop	{r3, pc}
 8001a0a:	bf00      	nop

08001a0c <HAL_DAC_ErrorCallbackCh1>:
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop

08001a10 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001a10:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a12:	6a84      	ldr	r4, [r0, #40]	; 0x28

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001a14:	6923      	ldr	r3, [r4, #16]
 8001a16:	f043 0304 	orr.w	r3, r3, #4
 8001a1a:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	f7ff fff5 	bl	8001a0c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001a22:	2301      	movs	r3, #1
 8001a24:	7123      	strb	r3, [r4, #4]
 8001a26:	bd10      	pop	{r4, pc}

08001a28 <HAL_DAC_DMAUnderrunCallbackCh1>:
{
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop

08001a2c <HAL_DAC_IRQHandler>:
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001a2c:	6803      	ldr	r3, [r0, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	0491      	lsls	r1, r2, #18
{
 8001a32:	b510      	push	{r4, lr}
 8001a34:	4604      	mov	r4, r0
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001a36:	d502      	bpl.n	8001a3e <HAL_DAC_IRQHandler+0x12>
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001a38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a3a:	0492      	lsls	r2, r2, #18
 8001a3c:	d418      	bmi.n	8001a70 <HAL_DAC_IRQHandler+0x44>
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	0091      	lsls	r1, r2, #2
 8001a42:	d502      	bpl.n	8001a4a <HAL_DAC_IRQHandler+0x1e>
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001a44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a46:	0092      	lsls	r2, r2, #2
 8001a48:	d400      	bmi.n	8001a4c <HAL_DAC_IRQHandler+0x20>
 8001a4a:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001a50:	6922      	ldr	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8001a52:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001a56:	f042 0202 	orr.w	r2, r2, #2
 8001a5a:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8001a5c:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001a64:	4620      	mov	r0, r4
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001a66:	601a      	str	r2, [r3, #0]
}
 8001a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001a6c:	f000 b8c0 	b.w	8001bf0 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8001a70:	2204      	movs	r2, #4
 8001a72:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001a74:	6902      	ldr	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8001a76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001a7a:	f042 0201 	orr.w	r2, r2, #1
 8001a7e:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8001a80:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a88:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001a8a:	f7ff ffcd 	bl	8001a28 <HAL_DAC_DMAUnderrunCallbackCh1>
 8001a8e:	6823      	ldr	r3, [r4, #0]
 8001a90:	e7d5      	b.n	8001a3e <HAL_DAC_IRQHandler+0x12>
 8001a92:	bf00      	nop

08001a94 <HAL_DAC_ConfigChannel>:
{
 8001a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdac);
 8001a96:	7943      	ldrb	r3, [r0, #5]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d042      	beq.n	8001b22 <HAL_DAC_ConfigChannel+0x8e>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8001a9c:	684f      	ldr	r7, [r1, #4]
 8001a9e:	4615      	mov	r5, r2
  hdac->State = HAL_DAC_STATE_BUSY;
 8001aa0:	2302      	movs	r3, #2
  __HAL_LOCK(hdac);
 8001aa2:	2201      	movs	r2, #1
  if(sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001aa4:	2f04      	cmp	r7, #4
 8001aa6:	460e      	mov	r6, r1
 8001aa8:	4604      	mov	r4, r0
  __HAL_LOCK(hdac);
 8001aaa:	7142      	strb	r2, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8001aac:	7103      	strb	r3, [r0, #4]
  if(sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001aae:	d03a      	beq.n	8001b26 <HAL_DAC_ConfigChannel+0x92>
 8001ab0:	6803      	ldr	r3, [r0, #0]
 8001ab2:	f005 0510 	and.w	r5, r5, #16
  if(sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001ab6:	6972      	ldr	r2, [r6, #20]
 8001ab8:	2a01      	cmp	r2, #1
 8001aba:	d05f      	beq.n	8001b7c <HAL_DAC_ConfigChannel+0xe8>
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001abc:	6930      	ldr	r0, [r6, #16]
 8001abe:	68f2      	ldr	r2, [r6, #12]
  tmpreg1 = hdac->Instance->MCR;
 8001ac0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001ac2:	4302      	orrs	r2, r0
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001ac4:	2007      	movs	r0, #7
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001ac6:	433a      	orrs	r2, r7
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001ac8:	40a8      	lsls	r0, r5
 8001aca:	ea21 0100 	bic.w	r1, r1, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001ace:	40aa      	lsls	r2, r5
 8001ad0:	430a      	orrs	r2, r1
  hdac->Instance->MCR = tmpreg1;
 8001ad2:	63da      	str	r2, [r3, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001ad4:	6819      	ldr	r1, [r3, #0]
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001ad6:	68b2      	ldr	r2, [r6, #8]
  if(DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8001ad8:	6837      	ldr	r7, [r6, #0]
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001ada:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001ade:	40a8      	lsls	r0, r5
 8001ae0:	ea21 0100 	bic.w	r1, r1, r0
 8001ae4:	6019      	str	r1, [r3, #0]
  tmpreg1 = hdac->Instance->CR;
 8001ae6:	681e      	ldr	r6, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001ae8:	f640 71fe 	movw	r1, #4094	; 0xffe
 8001aec:	40a9      	lsls	r1, r5
 8001aee:	ea26 0601 	bic.w	r6, r6, r1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001af2:	40aa      	lsls	r2, r5
  if(DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8001af4:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001af8:	ea46 0602 	orr.w	r6, r6, r2
  if(DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8001afc:	d03b      	beq.n	8001b76 <HAL_DAC_ConfigChannel+0xe2>
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8001afe:	2f00      	cmp	r7, #0
 8001b00:	d146      	bne.n	8001b90 <HAL_DAC_ConfigChannel+0xfc>
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8001b02:	f426 4600 	bic.w	r6, r6, #32768	; 0x8000
  hdac->Instance->CR = tmpreg1;
 8001b06:	601e      	str	r6, [r3, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001b08:	6819      	ldr	r1, [r3, #0]
 8001b0a:	22c0      	movs	r2, #192	; 0xc0
 8001b0c:	fa02 f505 	lsl.w	r5, r2, r5
 8001b10:	ea21 0505 	bic.w	r5, r1, r5
  __HAL_UNLOCK(hdac);
 8001b14:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8001b16:	2101      	movs	r1, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001b18:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 8001b1a:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 8001b1c:	7121      	strb	r1, [r4, #4]
  __HAL_UNLOCK(hdac);
 8001b1e:	7162      	strb	r2, [r4, #5]
  return HAL_OK;
 8001b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hdac);
 8001b22:	2002      	movs	r0, #2
}
 8001b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Channel == DAC_CHANNEL_1)
 8001b26:	b925      	cbnz	r5, 8001b32 <HAL_DAC_ConfigChannel+0x9e>
 8001b28:	e045      	b.n	8001bb6 <HAL_DAC_ConfigChannel+0x122>
        if((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001b2a:	f7ff fa0d 	bl	8000f48 <HAL_GetTick>
 8001b2e:	2801      	cmp	r0, #1
 8001b30:	d837      	bhi.n	8001ba2 <HAL_DAC_ConfigChannel+0x10e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001b32:	6823      	ldr	r3, [r4, #0]
 8001b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	dbf7      	blt.n	8001b2a <HAL_DAC_ConfigChannel+0x96>
      HAL_Delay(1);
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	f7ff fa0a 	bl	8000f54 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001b40:	6823      	ldr	r3, [r4, #0]
 8001b42:	69f2      	ldr	r2, [r6, #28]
 8001b44:	645a      	str	r2, [r3, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001b46:	f005 0510 	and.w	r5, r5, #16
 8001b4a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001b4c:	6a32      	ldr	r2, [r6, #32]
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001b4e:	6a70      	ldr	r0, [r6, #36]	; 0x24
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001b50:	f240 37ff 	movw	r7, #1023	; 0x3ff
 8001b54:	40af      	lsls	r7, r5
 8001b56:	ea21 0107 	bic.w	r1, r1, r7
 8001b5a:	40aa      	lsls	r2, r5
 8001b5c:	4311      	orrs	r1, r2
 8001b5e:	6499      	str	r1, [r3, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001b60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b62:	6877      	ldr	r7, [r6, #4]
 8001b64:	21ff      	movs	r1, #255	; 0xff
 8001b66:	40a9      	lsls	r1, r5
 8001b68:	ea22 0201 	bic.w	r2, r2, r1
 8001b6c:	fa00 f105 	lsl.w	r1, r0, r5
 8001b70:	430a      	orrs	r2, r1
 8001b72:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b74:	e79f      	b.n	8001ab6 <HAL_DAC_ConfigChannel+0x22>
    tmpreg1 |= DAC_CR_HFSEL;
 8001b76:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
 8001b7a:	e7c4      	b.n	8001b06 <HAL_DAC_ConfigChannel+0x72>
  tmpreg1 = hdac->Instance->CCR;
 8001b7c:	6b99      	ldr	r1, [r3, #56]	; 0x38
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b7e:	69b2      	ldr	r2, [r6, #24]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001b80:	201f      	movs	r0, #31
 8001b82:	40a8      	lsls	r0, r5
 8001b84:	ea21 0100 	bic.w	r1, r1, r0
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b88:	40aa      	lsls	r2, r5
 8001b8a:	430a      	orrs	r2, r1
  hdac->Instance->CCR = tmpreg1;
 8001b8c:	639a      	str	r2, [r3, #56]	; 0x38
 8001b8e:	e795      	b.n	8001abc <HAL_DAC_ConfigChannel+0x28>
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8001b90:	f002 fe08 	bl	80047a4 <HAL_RCC_GetHCLKFreq>
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001b94:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <HAL_DAC_ConfigChannel+0x14c>)
 8001b96:	4298      	cmp	r0, r3
 8001b98:	d90b      	bls.n	8001bb2 <HAL_DAC_ConfigChannel+0x11e>
         tmpreg1 |= DAC_CR_HFSEL;
 8001b9a:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
 8001b9e:	6823      	ldr	r3, [r4, #0]
 8001ba0:	e7b1      	b.n	8001b06 <HAL_DAC_ConfigChannel+0x72>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001ba2:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001ba4:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001ba6:	f043 0308 	orr.w	r3, r3, #8
 8001baa:	6123      	str	r3, [r4, #16]
          return HAL_TIMEOUT;
 8001bac:	4610      	mov	r0, r2
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001bae:	7122      	strb	r2, [r4, #4]
          return HAL_TIMEOUT;
 8001bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bb2:	6823      	ldr	r3, [r4, #0]
 8001bb4:	e7a5      	b.n	8001b02 <HAL_DAC_ConfigChannel+0x6e>
      tickstart = HAL_GetTick();
 8001bb6:	f7ff f9c7 	bl	8000f48 <HAL_GetTick>
 8001bba:	4607      	mov	r7, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001bbc:	e004      	b.n	8001bc8 <HAL_DAC_ConfigChannel+0x134>
        if((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001bbe:	f7ff f9c3 	bl	8000f48 <HAL_GetTick>
 8001bc2:	1bc0      	subs	r0, r0, r7
 8001bc4:	2801      	cmp	r0, #1
 8001bc6:	d8ec      	bhi.n	8001ba2 <HAL_DAC_ConfigChannel+0x10e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001bc8:	6823      	ldr	r3, [r4, #0]
 8001bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bcc:	041b      	lsls	r3, r3, #16
 8001bce:	d4f6      	bmi.n	8001bbe <HAL_DAC_ConfigChannel+0x12a>
      HAL_Delay(1);
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	f7ff f9bf 	bl	8000f54 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001bd6:	6823      	ldr	r3, [r4, #0]
 8001bd8:	69f2      	ldr	r2, [r6, #28]
 8001bda:	641a      	str	r2, [r3, #64]	; 0x40
 8001bdc:	e7b3      	b.n	8001b46 <HAL_DAC_ConfigChannel+0xb2>
 8001bde:	bf00      	nop
 8001be0:	04c4b400 	.word	0x04c4b400

08001be4 <HAL_DACEx_ConvCpltCallbackCh2>:
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop

08001be8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop

08001bec <HAL_DACEx_ErrorCallbackCh2>:
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop

08001bf0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop

08001bf4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001bf4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bf6:	6a84      	ldr	r4, [r0, #40]	; 0x28

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001bf8:	4620      	mov	r0, r4
 8001bfa:	f7ff fff3 	bl	8001be4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State= HAL_DAC_STATE_READY;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	7123      	strb	r3, [r4, #4]
 8001c02:	bd10      	pop	{r4, pc}

08001c04 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001c04:	b508      	push	{r3, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001c06:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001c08:	f7ff ffee 	bl	8001be8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
 8001c0c:	bd08      	pop	{r3, pc}
 8001c0e:	bf00      	nop

08001c10 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001c10:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c12:	6a84      	ldr	r4, [r0, #40]	; 0x28

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001c14:	6923      	ldr	r3, [r4, #16]
 8001c16:	f043 0304 	orr.w	r3, r3, #4
 8001c1a:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001c1c:	4620      	mov	r0, r4
 8001c1e:	f7ff ffe5 	bl	8001bec <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State= HAL_DAC_STATE_READY;
 8001c22:	2301      	movs	r3, #1
 8001c24:	7123      	strb	r3, [r4, #4]
 8001c26:	bd10      	pop	{r4, pc}

08001c28 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001c28:	2800      	cmp	r0, #0
 8001c2a:	d07d      	beq.n	8001d28 <HAL_DMA_Init+0x100>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001c2c:	6801      	ldr	r1, [r0, #0]
 8001c2e:	4a3f      	ldr	r2, [pc, #252]	; (8001d2c <HAL_DMA_Init+0x104>)
 8001c30:	4291      	cmp	r1, r2
{
 8001c32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c36:	4603      	mov	r3, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001c38:	d963      	bls.n	8001d02 <HAL_DMA_Init+0xda>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001c3a:	4f3d      	ldr	r7, [pc, #244]	; (8001d30 <HAL_DMA_Init+0x108>)
 8001c3c:	4a3d      	ldr	r2, [pc, #244]	; (8001d34 <HAL_DMA_Init+0x10c>)
    hdma->DmaBaseAddress = DMA2;
 8001c3e:	483e      	ldr	r0, [pc, #248]	; (8001d38 <HAL_DMA_Init+0x110>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001c40:	440f      	add	r7, r1
 8001c42:	fba2 2707 	umull	r2, r7, r2, r7
 8001c46:	093f      	lsrs	r7, r7, #4
 8001c48:	00bf      	lsls	r7, r7, #2
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c4a:	f103 020c 	add.w	r2, r3, #12
 8001c4e:	ca34      	ldmia	r2, {r2, r4, r5}
  tmp |=  hdma->Init.Direction        |
 8001c50:	689e      	ldr	r6, [r3, #8]
 8001c52:	6418      	str	r0, [r3, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c54:	f04f 0e02 	mov.w	lr, #2
  tmp |=  hdma->Init.Direction        |
 8001c58:	4332      	orrs	r2, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c5a:	6998      	ldr	r0, [r3, #24]
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c5c:	f883 e025 	strb.w	lr, [r3, #37]	; 0x25
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c60:	4322      	orrs	r2, r4
  else
  {
    /* DMA2 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
  }
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001c62:	fa5f fe81 	uxtb.w	lr, r1
 8001c66:	4c33      	ldr	r4, [pc, #204]	; (8001d34 <HAL_DMA_Init+0x10c>)
  tmp = hdma->Instance->CCR;
 8001c68:	f8d1 8000 	ldr.w	r8, [r1]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001c6c:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 8001d2c <HAL_DMA_Init+0x104>
 8001c70:	645f      	str	r7, [r3, #68]	; 0x44
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c72:	432a      	orrs	r2, r5
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001c74:	f1ae 0508 	sub.w	r5, lr, #8
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c78:	4302      	orrs	r2, r0
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001c7a:	fba4 0505 	umull	r0, r5, r4, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c7e:	69d8      	ldr	r0, [r3, #28]
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c80:	6a1c      	ldr	r4, [r3, #32]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001c82:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 8001d54 <HAL_DMA_Init+0x12c>
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c86:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c88:	4322      	orrs	r2, r4
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001c8a:	4c2c      	ldr	r4, [pc, #176]	; (8001d3c <HAL_DMA_Init+0x114>)
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001c8c:	0928      	lsrs	r0, r5, #4
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001c8e:	f428 48ff 	bic.w	r8, r8, #32640	; 0x7f80
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001c92:	4561      	cmp	r1, ip
 8001c94:	bf98      	it	ls
 8001c96:	46a6      	movls	lr, r4
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_ChannelBase + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001c98:	08bf      	lsrs	r7, r7, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001c9a:	f028 0870 	bic.w	r8, r8, #112	; 0x70
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001c9e:	f000 001c 	and.w	r0, r0, #28
 8001ca2:	2401      	movs	r4, #1
  tmp |=  hdma->Init.Direction        |
 8001ca4:	ea42 0208 	orr.w	r2, r2, r8
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001ca8:	fa04 f000 	lsl.w	r0, r4, r0
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_ChannelBase + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001cac:	eb0e 0c87 	add.w	ip, lr, r7, lsl #2
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001cb0:	4d23      	ldr	r5, [pc, #140]	; (8001d40 <HAL_DMA_Init+0x118>)
  hdma->Instance->CCR = tmp;
 8001cb2:	600a      	str	r2, [r1, #0]
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001cb4:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001cb8:	6518      	str	r0, [r3, #80]	; 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_ChannelBase + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001cba:	f8c3 c048 	str.w	ip, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001cbe:	64dd      	str	r5, [r3, #76]	; 0x4c
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001cc0:	d028      	beq.n	8001d14 <HAL_DMA_Init+0xec>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001cc2:	6859      	ldr	r1, [r3, #4]
 8001cc4:	b2ca      	uxtb	r2, r1
  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001cc6:	3901      	subs	r1, #1
 8001cc8:	2903      	cmp	r1, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001cca:	f84e 2027 	str.w	r2, [lr, r7, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cce:	6068      	str	r0, [r5, #4]
  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001cd0:	d825      	bhi.n	8001d1e <HAL_DMA_Init+0xf6>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001cd2:	491c      	ldr	r1, [pc, #112]	; (8001d44 <HAL_DMA_Init+0x11c>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001cd4:	481c      	ldr	r0, [pc, #112]	; (8001d48 <HAL_DMA_Init+0x120>)
 8001cd6:	6598      	str	r0, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001cd8:	4411      	add	r1, r2

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001cda:	3a01      	subs	r2, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001cdc:	0089      	lsls	r1, r1, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001cde:	f002 0203 	and.w	r2, r2, #3
 8001ce2:	fa04 f202 	lsl.w	r2, r4, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ce6:	2400      	movs	r4, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001ce8:	6559      	str	r1, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001cea:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001cec:	600c      	str	r4, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cee:	6042      	str	r2, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cf0:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8001cf2:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cf4:	63d8      	str	r0, [r3, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8001cf6:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8001cfa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return HAL_OK;
 8001cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d02:	4f12      	ldr	r7, [pc, #72]	; (8001d4c <HAL_DMA_Init+0x124>)
 8001d04:	4a0b      	ldr	r2, [pc, #44]	; (8001d34 <HAL_DMA_Init+0x10c>)
    hdma->DmaBaseAddress = DMA1;
 8001d06:	4812      	ldr	r0, [pc, #72]	; (8001d50 <HAL_DMA_Init+0x128>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d08:	440f      	add	r7, r1
 8001d0a:	fba2 2707 	umull	r2, r7, r2, r7
 8001d0e:	093f      	lsrs	r7, r7, #4
 8001d10:	00bf      	lsls	r7, r7, #2
 8001d12:	e79a      	b.n	8001c4a <HAL_DMA_Init+0x22>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d14:	2200      	movs	r2, #0
 8001d16:	605a      	str	r2, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d18:	f84e 2027 	str.w	r2, [lr, r7, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d1c:	6068      	str	r0, [r5, #4]
    hdma->DMAmuxRequestGen = 0U;
 8001d1e:	2200      	movs	r2, #0
 8001d20:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001d22:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d24:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d26:	e7e3      	b.n	8001cf0 <HAL_DMA_Init+0xc8>
    return HAL_ERROR;
 8001d28:	2001      	movs	r0, #1
 8001d2a:	4770      	bx	lr
 8001d2c:	40020407 	.word	0x40020407
 8001d30:	bffdfbf8 	.word	0xbffdfbf8
 8001d34:	cccccccd 	.word	0xcccccccd
 8001d38:	40020400 	.word	0x40020400
 8001d3c:	40020800 	.word	0x40020800
 8001d40:	40020880 	.word	0x40020880
 8001d44:	1000823f 	.word	0x1000823f
 8001d48:	40020940 	.word	0x40020940
 8001d4c:	bffdfff8 	.word	0xbffdfff8
 8001d50:	40020000 	.word	0x40020000
 8001d54:	4002081c 	.word	0x4002081c

08001d58 <HAL_DMA_Start_IT>:
{
 8001d58:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8001d5a:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8001d5e:	2c01      	cmp	r4, #1
 8001d60:	d00b      	beq.n	8001d7a <HAL_DMA_Start_IT+0x22>
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d62:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 8001d66:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d68:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 8001d6a:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d6e:	d006      	beq.n	8001d7e <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 8001d70:	2300      	movs	r3, #0
 8001d72:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    status = HAL_BUSY;
 8001d76:	2002      	movs	r0, #2
 8001d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 8001d7a:	2002      	movs	r0, #2
}
 8001d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE(hdma);
 8001d7e:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d80:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
 8001d82:	f8d0 e050 	ldr.w	lr, [r0, #80]	; 0x50
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d86:	2602      	movs	r6, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d88:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d8a:	f880 6025 	strb.w	r6, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d8e:	63c5      	str	r5, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001d90:	6826      	ldr	r6, [r4, #0]
  if(hdma->DMAmuxRequestGen != 0U)
 8001d92:	6d45      	ldr	r5, [r0, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8001d94:	f026 0601 	bic.w	r6, r6, #1
 8001d98:	6026      	str	r6, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d9a:	f8c7 e004 	str.w	lr, [r7, #4]
  if(hdma->DMAmuxRequestGen != 0U)
 8001d9e:	b115      	cbz	r5, 8001da6 <HAL_DMA_Start_IT+0x4e>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001da0:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8001da2:	6dc7      	ldr	r7, [r0, #92]	; 0x5c
 8001da4:	6077      	str	r7, [r6, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001da6:	6c46      	ldr	r6, [r0, #68]	; 0x44
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001da8:	6887      	ldr	r7, [r0, #8]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001daa:	f006 0e1c 	and.w	lr, r6, #28
 8001dae:	2601      	movs	r6, #1
 8001db0:	fa06 fe0e 	lsl.w	lr, r6, lr
 8001db4:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8001db6:	f8c6 e004 	str.w	lr, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8001dba:	6063      	str	r3, [r4, #4]
    if(NULL != hdma->XferHalfCpltCallback )
 8001dbc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dbe:	2f10      	cmp	r7, #16
    hdma->Instance->CPAR = DstAddress;
 8001dc0:	bf0b      	itete	eq
 8001dc2:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8001dc4:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001dc6:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8001dc8:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001dca:	b1bb      	cbz	r3, 8001dfc <HAL_DMA_Start_IT+0xa4>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dcc:	6823      	ldr	r3, [r4, #0]
 8001dce:	f043 030e 	orr.w	r3, r3, #14
 8001dd2:	6023      	str	r3, [r4, #0]
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001dd4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	03d2      	lsls	r2, r2, #15
 8001dda:	d40a      	bmi.n	8001df2 <HAL_DMA_Start_IT+0x9a>
    if(hdma->DMAmuxRequestGen != 0U)
 8001ddc:	b11d      	cbz	r5, 8001de6 <HAL_DMA_Start_IT+0x8e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001dde:	682b      	ldr	r3, [r5, #0]
 8001de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de4:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8001de6:	6823      	ldr	r3, [r4, #0]
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dee:	2000      	movs	r0, #0
 8001df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	e7ef      	b.n	8001ddc <HAL_DMA_Start_IT+0x84>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001dfc:	6823      	ldr	r3, [r4, #0]
 8001dfe:	f023 0304 	bic.w	r3, r3, #4
 8001e02:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e04:	6823      	ldr	r3, [r4, #0]
 8001e06:	f043 030a 	orr.w	r3, r3, #10
 8001e0a:	6023      	str	r3, [r4, #0]
 8001e0c:	e7e2      	b.n	8001dd4 <HAL_DMA_Start_IT+0x7c>
 8001e0e:	bf00      	nop

08001e10 <HAL_DMA_Abort_IT>:
{
 8001e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e12:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d003      	beq.n	8001e22 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8001e1e:	2001      	movs	r0, #1
 8001e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e22:	6803      	ldr	r3, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e24:	6c87      	ldr	r7, [r0, #72]	; 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e26:	6819      	ldr	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001e2a:	6c06      	ldr	r6, [r0, #64]	; 0x40
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e2c:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
    if(hdma->DMAmuxRequestGen != 0U)
 8001e2e:	6d44      	ldr	r4, [r0, #84]	; 0x54
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e30:	f021 010e 	bic.w	r1, r1, #14
 8001e34:	6019      	str	r1, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001e36:	6819      	ldr	r1, [r3, #0]
 8001e38:	f021 0101 	bic.w	r1, r1, #1
 8001e3c:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e3e:	683b      	ldr	r3, [r7, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e40:	6d01      	ldr	r1, [r0, #80]	; 0x50
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e46:	603b      	str	r3, [r7, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e48:	f002 021c 	and.w	r2, r2, #28
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	4093      	lsls	r3, r2
 8001e50:	6073      	str	r3, [r6, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e52:	6069      	str	r1, [r5, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8001e54:	b134      	cbz	r4, 8001e64 <HAL_DMA_Abort_IT+0x54>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e56:	6823      	ldr	r3, [r4, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e58:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8001e5a:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e60:	6023      	str	r3, [r4, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e62:	6051      	str	r1, [r2, #4]
    if(hdma->XferAbortCallback != NULL)
 8001e64:	6b83      	ldr	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001e66:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 8001e68:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8001e6a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001e6e:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8001e72:	b113      	cbz	r3, 8001e7a <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 8001e74:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001e76:	4620      	mov	r0, r4
 8001e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e7a:	4618      	mov	r0, r3
}
 8001e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e7e:	bf00      	nop

08001e80 <HAL_DMA_IRQHandler>:
{
 8001e80:	b4f0      	push	{r4, r5, r6, r7}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001e82:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e84:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8001e86:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e88:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001e8a:	682c      	ldr	r4, [r5, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001e8c:	2204      	movs	r2, #4
 8001e8e:	f003 031c 	and.w	r3, r3, #28
 8001e92:	409a      	lsls	r2, r3
 8001e94:	4211      	tst	r1, r2
 8001e96:	d00d      	beq.n	8001eb4 <HAL_DMA_IRQHandler+0x34>
 8001e98:	0767      	lsls	r7, r4, #29
 8001e9a:	d50b      	bpl.n	8001eb4 <HAL_DMA_IRQHandler+0x34>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e9c:	682b      	ldr	r3, [r5, #0]
 8001e9e:	069b      	lsls	r3, r3, #26
 8001ea0:	d403      	bmi.n	8001eaa <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ea2:	682b      	ldr	r3, [r5, #0]
 8001ea4:	f023 0304 	bic.w	r3, r3, #4
 8001ea8:	602b      	str	r3, [r5, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8001eaa:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001eac:	6072      	str	r2, [r6, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8001eae:	b1c3      	cbz	r3, 8001ee2 <HAL_DMA_IRQHandler+0x62>
}
 8001eb0:	bcf0      	pop	{r4, r5, r6, r7}
      hdma->XferErrorCallback(hdma);
 8001eb2:	4718      	bx	r3
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	409a      	lsls	r2, r3
 8001eb8:	4211      	tst	r1, r2
 8001eba:	d014      	beq.n	8001ee6 <HAL_DMA_IRQHandler+0x66>
 8001ebc:	07a7      	lsls	r7, r4, #30
 8001ebe:	d512      	bpl.n	8001ee6 <HAL_DMA_IRQHandler+0x66>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ec0:	682b      	ldr	r3, [r5, #0]
 8001ec2:	0699      	lsls	r1, r3, #26
 8001ec4:	d406      	bmi.n	8001ed4 <HAL_DMA_IRQHandler+0x54>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ec6:	682b      	ldr	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001ec8:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001eca:	f023 030a 	bic.w	r3, r3, #10
 8001ece:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001ed0:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    if(hdma->XferCpltCallback != NULL)
 8001ed4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001ed6:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1e6      	bne.n	8001eb0 <HAL_DMA_IRQHandler+0x30>
}
 8001ee2:	bcf0      	pop	{r4, r5, r6, r7}
 8001ee4:	4770      	bx	lr
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001ee6:	2208      	movs	r2, #8
 8001ee8:	409a      	lsls	r2, r3
 8001eea:	420a      	tst	r2, r1
 8001eec:	d0f9      	beq.n	8001ee2 <HAL_DMA_IRQHandler+0x62>
 8001eee:	0722      	lsls	r2, r4, #28
 8001ef0:	d5f7      	bpl.n	8001ee2 <HAL_DMA_IRQHandler+0x62>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ef2:	6829      	ldr	r1, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8001ef4:	6b44      	ldr	r4, [r0, #52]	; 0x34
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001ef6:	2201      	movs	r2, #1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ef8:	f021 010e 	bic.w	r1, r1, #14
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 8001f00:	2700      	movs	r7, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f02:	6029      	str	r1, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001f04:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f06:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8001f08:	f880 7024 	strb.w	r7, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8001f0c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 8001f10:	2c00      	cmp	r4, #0
 8001f12:	d0e6      	beq.n	8001ee2 <HAL_DMA_IRQHandler+0x62>
      hdma->XferErrorCallback(hdma);
 8001f14:	4623      	mov	r3, r4
}
 8001f16:	bcf0      	pop	{r4, r5, r6, r7}
      hdma->XferErrorCallback(hdma);
 8001f18:	4718      	bx	r3
 8001f1a:	bf00      	nop

08001f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f1c:	468c      	mov	ip, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f1e:	6809      	ldr	r1, [r1, #0]
 8001f20:	2900      	cmp	r1, #0
 8001f22:	f000 80fe 	beq.w	8002122 <HAL_GPIO_Init+0x206>
{
 8001f26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2a:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8002140 <HAL_GPIO_Init+0x224>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f2e:	f8df e214 	ldr.w	lr, [pc, #532]	; 8002144 <HAL_GPIO_Init+0x228>
{
 8001f32:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f34:	2500      	movs	r5, #0
 8001f36:	e088      	b.n	800204a <HAL_GPIO_Init+0x12e>
 8001f38:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f3c:	2203      	movs	r2, #3
      temp = GPIOx->MODER;
 8001f3e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f42:	fa02 f209 	lsl.w	r2, r2, r9
 8001f46:	43d2      	mvns	r2, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f48:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f4c:	ea0b 0b02 	and.w	fp, fp, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f50:	fa06 f609 	lsl.w	r6, r6, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f54:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f58:	ea46 060b 	orr.w	r6, r6, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f5c:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8001f60:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f62:	f240 80a7 	bls.w	80020b4 <HAL_GPIO_Init+0x198>
      temp = GPIOx->PUPDR;
 8001f66:	68c6      	ldr	r6, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f68:	f8dc 3008 	ldr.w	r3, [ip, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f6c:	4032      	ands	r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f6e:	fa03 f309 	lsl.w	r3, r3, r9
 8001f72:	4313      	orrs	r3, r2
      GPIOx->PUPDR = temp;
 8001f74:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f76:	00e3      	lsls	r3, r4, #3
 8001f78:	d563      	bpl.n	8002042 <HAL_GPIO_Init+0x126>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7a:	f8d8 3060 	ldr.w	r3, [r8, #96]	; 0x60
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	f8c8 3060 	str.w	r3, [r8, #96]	; 0x60
 8001f86:	f8d8 3060 	ldr.w	r3, [r8, #96]	; 0x60
 8001f8a:	f025 0603 	bic.w	r6, r5, #3
 8001f8e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8001f9a:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f9c:	f005 0303 	and.w	r3, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa0:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001fa2:	f8d6 9008 	ldr.w	r9, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	220f      	movs	r2, #15
 8001faa:	409a      	lsls	r2, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fac:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fb0:	ea29 0a02 	bic.w	sl, r9, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fb4:	f000 8095 	beq.w	80020e2 <HAL_GPIO_Init+0x1c6>
 8001fb8:	4a5a      	ldr	r2, [pc, #360]	; (8002124 <HAL_GPIO_Init+0x208>)
 8001fba:	4290      	cmp	r0, r2
 8001fbc:	f000 8093 	beq.w	80020e6 <HAL_GPIO_Init+0x1ca>
 8001fc0:	4a59      	ldr	r2, [pc, #356]	; (8002128 <HAL_GPIO_Init+0x20c>)
 8001fc2:	4290      	cmp	r0, r2
 8001fc4:	f000 8094 	beq.w	80020f0 <HAL_GPIO_Init+0x1d4>
 8001fc8:	4a58      	ldr	r2, [pc, #352]	; (800212c <HAL_GPIO_Init+0x210>)
 8001fca:	4290      	cmp	r0, r2
 8001fcc:	f000 8095 	beq.w	80020fa <HAL_GPIO_Init+0x1de>
 8001fd0:	4a57      	ldr	r2, [pc, #348]	; (8002130 <HAL_GPIO_Init+0x214>)
 8001fd2:	4290      	cmp	r0, r2
 8001fd4:	f000 8096 	beq.w	8002104 <HAL_GPIO_Init+0x1e8>
 8001fd8:	4a56      	ldr	r2, [pc, #344]	; (8002134 <HAL_GPIO_Init+0x218>)
 8001fda:	4290      	cmp	r0, r2
 8001fdc:	f000 8097 	beq.w	800210e <HAL_GPIO_Init+0x1f2>
 8001fe0:	4a55      	ldr	r2, [pc, #340]	; (8002138 <HAL_GPIO_Init+0x21c>)
 8001fe2:	4290      	cmp	r0, r2
 8001fe4:	f000 8098 	beq.w	8002118 <HAL_GPIO_Init+0x1fc>
 8001fe8:	4a54      	ldr	r2, [pc, #336]	; (800213c <HAL_GPIO_Init+0x220>)
 8001fea:	4290      	cmp	r0, r2
 8001fec:	bf0c      	ite	eq
 8001fee:	f04f 0907 	moveq.w	r9, #7
 8001ff2:	f04f 0908 	movne.w	r9, #8
 8001ff6:	fa09 f303 	lsl.w	r3, r9, r3
 8001ffa:	ea43 030a 	orr.w	r3, r3, sl
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ffe:	60b3      	str	r3, [r6, #8]
        temp = EXTI->IMR1;
 8002000:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~(iocurrent);
 8002004:	43fa      	mvns	r2, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002006:	03e6      	lsls	r6, r4, #15
        temp &= ~(iocurrent);
 8002008:	bf54      	ite	pl
 800200a:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800200c:	433b      	orrmi	r3, r7
        }
        EXTI->IMR1 = temp;
 800200e:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR1;
 8002012:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002016:	03a6      	lsls	r6, r4, #14
        temp &= ~(iocurrent);
 8002018:	bf54      	ite	pl
 800201a:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800201c:	433b      	orrmi	r3, r7
        }
        EXTI->EMR1 = temp;
 800201e:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002022:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002026:	02e6      	lsls	r6, r4, #11
        temp &= ~(iocurrent);
 8002028:	bf54      	ite	pl
 800202a:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800202c:	433b      	orrmi	r3, r7
        }
        EXTI->RTSR1 = temp;
 800202e:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR1;
 8002032:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002036:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8002038:	bf54      	ite	pl
 800203a:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800203c:	433b      	orrmi	r3, r7
        }
        EXTI->FTSR1 = temp;
 800203e:	f8ce 300c 	str.w	r3, [lr, #12]
      }
    }

    position++;
 8002042:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002044:	fa31 f305 	lsrs.w	r3, r1, r5
 8002048:	d048      	beq.n	80020dc <HAL_GPIO_Init+0x1c0>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800204a:	2301      	movs	r3, #1
 800204c:	40ab      	lsls	r3, r5
    if (iocurrent != 0x00u)
 800204e:	ea13 0701 	ands.w	r7, r3, r1
 8002052:	d0f6      	beq.n	8002042 <HAL_GPIO_Init+0x126>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002054:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8002058:	f024 0a10 	bic.w	sl, r4, #16
 800205c:	f1ba 0f02 	cmp.w	sl, #2
 8002060:	f47f af6a 	bne.w	8001f38 <HAL_GPIO_Init+0x1c>
        temp = GPIOx->AFR[position >> 3u];
 8002064:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 8002068:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800206c:	f005 0207 	and.w	r2, r5, #7
        temp = GPIOx->AFR[position >> 3u];
 8002070:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002074:	0092      	lsls	r2, r2, #2
 8002076:	f04f 0b0f 	mov.w	fp, #15
 800207a:	fa0b fb02 	lsl.w	fp, fp, r2
 800207e:	ea26 0a0b 	bic.w	sl, r6, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002082:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8002086:	fa06 f202 	lsl.w	r2, r6, r2
 800208a:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->AFR[position >> 3u] = temp;
 800208e:	f8c9 2020 	str.w	r2, [r9, #32]
 8002092:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002096:	2203      	movs	r2, #3
      temp = GPIOx->MODER;
 8002098:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800209c:	fa02 f209 	lsl.w	r2, r2, r9
 80020a0:	43d2      	mvns	r2, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020a2:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020a6:	ea02 0a0a 	and.w	sl, r2, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020aa:	fa06 f609 	lsl.w	r6, r6, r9
 80020ae:	ea46 060a 	orr.w	r6, r6, sl
      GPIOx->MODER = temp;
 80020b2:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR;
 80020b4:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020b6:	ea06 0a02 	and.w	sl, r6, r2
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020ba:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80020be:	fa06 f609 	lsl.w	r6, r6, r9
 80020c2:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 80020c6:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80020c8:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80020cc:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020d0:	ea2a 0303 	bic.w	r3, sl, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80020d4:	40ae      	lsls	r6, r5
 80020d6:	431e      	orrs	r6, r3
        GPIOx->OTYPER = temp;
 80020d8:	6046      	str	r6, [r0, #4]
 80020da:	e744      	b.n	8001f66 <HAL_GPIO_Init+0x4a>
  }
}
 80020dc:	b003      	add	sp, #12
 80020de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020e2:	2300      	movs	r3, #0
 80020e4:	e789      	b.n	8001ffa <HAL_GPIO_Init+0xde>
 80020e6:	f04f 0901 	mov.w	r9, #1
 80020ea:	fa09 f303 	lsl.w	r3, r9, r3
 80020ee:	e784      	b.n	8001ffa <HAL_GPIO_Init+0xde>
 80020f0:	f04f 0902 	mov.w	r9, #2
 80020f4:	fa09 f303 	lsl.w	r3, r9, r3
 80020f8:	e77f      	b.n	8001ffa <HAL_GPIO_Init+0xde>
 80020fa:	f04f 0903 	mov.w	r9, #3
 80020fe:	fa09 f303 	lsl.w	r3, r9, r3
 8002102:	e77a      	b.n	8001ffa <HAL_GPIO_Init+0xde>
 8002104:	f04f 0904 	mov.w	r9, #4
 8002108:	fa09 f303 	lsl.w	r3, r9, r3
 800210c:	e775      	b.n	8001ffa <HAL_GPIO_Init+0xde>
 800210e:	f04f 0905 	mov.w	r9, #5
 8002112:	fa09 f303 	lsl.w	r3, r9, r3
 8002116:	e770      	b.n	8001ffa <HAL_GPIO_Init+0xde>
 8002118:	f04f 0906 	mov.w	r9, #6
 800211c:	fa09 f303 	lsl.w	r3, r9, r3
 8002120:	e76b      	b.n	8001ffa <HAL_GPIO_Init+0xde>
 8002122:	4770      	bx	lr
 8002124:	48000400 	.word	0x48000400
 8002128:	48000800 	.word	0x48000800
 800212c:	48000c00 	.word	0x48000c00
 8002130:	48001000 	.word	0x48001000
 8002134:	48001400 	.word	0x48001400
 8002138:	48001800 	.word	0x48001800
 800213c:	48001c00 	.word	0x48001c00
 8002140:	40021000 	.word	0x40021000
 8002144:	40010400 	.word	0x40010400

08002148 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002148:	6903      	ldr	r3, [r0, #16]
 800214a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800214c:	bf14      	ite	ne
 800214e:	2001      	movne	r0, #1
 8002150:	2000      	moveq	r0, #0
 8002152:	4770      	bx	lr

08002154 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002154:	b90a      	cbnz	r2, 800215a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002156:	6281      	str	r1, [r0, #40]	; 0x28
 8002158:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800215a:	6181      	str	r1, [r0, #24]
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop

08002160 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002160:	6943      	ldr	r3, [r0, #20]
 8002162:	4059      	eors	r1, r3
 8002164:	6141      	str	r1, [r0, #20]
 8002166:	4770      	bx	lr

08002168 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002168:	4a04      	ldr	r2, [pc, #16]	; (800217c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800216a:	6951      	ldr	r1, [r2, #20]
 800216c:	4201      	tst	r1, r0
 800216e:	d100      	bne.n	8002172 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002170:	4770      	bx	lr
{
 8002172:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002174:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002176:	f00e f8ff 	bl	8010378 <HAL_GPIO_EXTI_Callback>
 800217a:	bd08      	pop	{r3, pc}
 800217c:	40010400 	.word	0x40010400

08002180 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002180:	b570      	push	{r4, r5, r6, lr}
 8002182:	4604      	mov	r4, r0
 8002184:	4616      	mov	r6, r2
 8002186:	460d      	mov	r5, r1
 8002188:	b941      	cbnz	r1, 800219c <I2C_WaitOnRXNEFlagUntilTimeout+0x1c>
 800218a:	e041      	b.n	8002210 <I2C_WaitOnRXNEFlagUntilTimeout+0x90>
    {
      return HAL_ERROR;
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800218c:	699a      	ldr	r2, [r3, #24]
 800218e:	0691      	lsls	r1, r2, #26
 8002190:	d457      	bmi.n	8002242 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
        return HAL_ERROR;
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002192:	f7fe fed9 	bl	8000f48 <HAL_GetTick>
 8002196:	1b80      	subs	r0, r0, r6
 8002198:	4285      	cmp	r5, r0
 800219a:	d345      	bcc.n	8002228 <I2C_WaitOnRXNEFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800219c:	6823      	ldr	r3, [r4, #0]
 800219e:	699a      	ldr	r2, [r3, #24]
 80021a0:	0752      	lsls	r2, r2, #29
 80021a2:	d44c      	bmi.n	800223e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021a4:	699a      	ldr	r2, [r3, #24]
 80021a6:	06d0      	lsls	r0, r2, #27
 80021a8:	d5f0      	bpl.n	800218c <I2C_WaitOnRXNEFlagUntilTimeout+0xc>
 80021aa:	1c68      	adds	r0, r5, #1
 80021ac:	d124      	bne.n	80021f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x78>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021ae:	699a      	ldr	r2, [r3, #24]
 80021b0:	0691      	lsls	r1, r2, #26
 80021b2:	d5fc      	bpl.n	80021ae <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021b4:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021b6:	2110      	movs	r1, #16
 80021b8:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021ba:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021bc:	699a      	ldr	r2, [r3, #24]
 80021be:	0796      	lsls	r6, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 80021c0:	bf44      	itt	mi
 80021c2:	2200      	movmi	r2, #0
 80021c4:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021c6:	699a      	ldr	r2, [r3, #24]
 80021c8:	07d5      	lsls	r5, r2, #31
 80021ca:	d403      	bmi.n	80021d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021cc:	699a      	ldr	r2, [r3, #24]
 80021ce:	f042 0201 	orr.w	r2, r2, #1
 80021d2:	619a      	str	r2, [r3, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	4928      	ldr	r1, [pc, #160]	; (8002278 <I2C_WaitOnRXNEFlagUntilTimeout+0xf8>)
 80021d8:	400a      	ands	r2, r1
 80021da:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80021dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80021de:	2120      	movs	r1, #32
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80021e0:	f043 0304 	orr.w	r3, r3, #4
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e4:	2200      	movs	r2, #0
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80021e6:	6463      	str	r3, [r4, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80021ec:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      return HAL_ERROR;
 80021f0:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f2:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80021f6:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021f8:	699a      	ldr	r2, [r3, #24]
 80021fa:	0692      	lsls	r2, r2, #26
 80021fc:	d4da      	bmi.n	80021b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021fe:	f7fe fea3 	bl	8000f48 <HAL_GetTick>
 8002202:	1b80      	subs	r0, r0, r6
 8002204:	4285      	cmp	r5, r0
 8002206:	d332      	bcc.n	800226e <I2C_WaitOnRXNEFlagUntilTimeout+0xee>
 8002208:	2d00      	cmp	r5, #0
 800220a:	d030      	beq.n	800226e <I2C_WaitOnRXNEFlagUntilTimeout+0xee>
 800220c:	6823      	ldr	r3, [r4, #0]
 800220e:	e7cc      	b.n	80021aa <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002210:	6803      	ldr	r3, [r0, #0]
 8002212:	699a      	ldr	r2, [r3, #24]
 8002214:	0751      	lsls	r1, r2, #29
 8002216:	d412      	bmi.n	800223e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002218:	699a      	ldr	r2, [r3, #24]
 800221a:	06d2      	lsls	r2, r2, #27
 800221c:	d4c5      	bmi.n	80021aa <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800221e:	699a      	ldr	r2, [r3, #24]
 8002220:	0692      	lsls	r2, r2, #26
 8002222:	d40e      	bmi.n	8002242 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002224:	f7fe fe90 	bl	8000f48 <HAL_GetTick>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002228:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800222a:	2220      	movs	r2, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800222c:	4313      	orrs	r3, r2
      __HAL_UNLOCK(hi2c);
 800222e:	2100      	movs	r1, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002230:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8002232:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 8002236:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      return HAL_ERROR;
 800223a:	2001      	movs	r0, #1
 800223c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_OK;
 800223e:	2000      	movs	r0, #0
 8002240:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002242:	699a      	ldr	r2, [r3, #24]
 8002244:	0750      	lsls	r0, r2, #29
 8002246:	d502      	bpl.n	800224e <I2C_WaitOnRXNEFlagUntilTimeout+0xce>
 8002248:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800224a:	2a00      	cmp	r2, #0
 800224c:	d1f7      	bne.n	800223e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800224e:	2520      	movs	r5, #32
 8002250:	61dd      	str	r5, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8002252:	6859      	ldr	r1, [r3, #4]
 8002254:	4808      	ldr	r0, [pc, #32]	; (8002278 <I2C_WaitOnRXNEFlagUntilTimeout+0xf8>)
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002256:	2200      	movs	r2, #0
        I2C_RESET_CR2(hi2c);
 8002258:	4001      	ands	r1, r0
 800225a:	6059      	str	r1, [r3, #4]
        return HAL_ERROR;
 800225c:	2001      	movs	r0, #1
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800225e:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8002260:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8002264:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002268:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        return HAL_ERROR;
 800226c:	bd70      	pop	{r4, r5, r6, pc}
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800226e:	6c63      	ldr	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002270:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002272:	430b      	orrs	r3, r1
 8002274:	e7b6      	b.n	80021e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x64>
 8002276:	bf00      	nop
 8002278:	fe00e800 	.word	0xfe00e800

0800227c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800227c:	b570      	push	{r4, r5, r6, lr}
 800227e:	4604      	mov	r4, r0
 8002280:	460d      	mov	r5, r1
 8002282:	4616      	mov	r6, r2
 8002284:	1c6b      	adds	r3, r5, #1
 8002286:	6822      	ldr	r2, [r4, #0]
 8002288:	d12a      	bne.n	80022e0 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800228a:	6993      	ldr	r3, [r2, #24]
 800228c:	0798      	lsls	r0, r3, #30
 800228e:	d42a      	bmi.n	80022e6 <I2C_WaitOnTXISFlagUntilTimeout+0x6a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002290:	6993      	ldr	r3, [r2, #24]
 8002292:	06d9      	lsls	r1, r3, #27
 8002294:	d5f9      	bpl.n	800228a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002296:	6993      	ldr	r3, [r2, #24]
 8002298:	069d      	lsls	r5, r3, #26
 800229a:	d5fc      	bpl.n	8002296 <I2C_WaitOnTXISFlagUntilTimeout+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800229c:	2110      	movs	r1, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800229e:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022a0:	61d1      	str	r1, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022a2:	61d3      	str	r3, [r2, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80022a4:	6993      	ldr	r3, [r2, #24]
 80022a6:	0798      	lsls	r0, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 80022a8:	bf44      	itt	mi
 80022aa:	2300      	movmi	r3, #0
 80022ac:	6293      	strmi	r3, [r2, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022ae:	6993      	ldr	r3, [r2, #24]
 80022b0:	07d9      	lsls	r1, r3, #31
 80022b2:	d403      	bmi.n	80022bc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80022b4:	6993      	ldr	r3, [r2, #24]
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	6193      	str	r3, [r2, #24]
    I2C_RESET_CR2(hi2c);
 80022bc:	6853      	ldr	r3, [r2, #4]
 80022be:	4918      	ldr	r1, [pc, #96]	; (8002320 <I2C_WaitOnTXISFlagUntilTimeout+0xa4>)
 80022c0:	400b      	ands	r3, r1
 80022c2:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80022c6:	2120      	movs	r1, #32
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022c8:	f043 0304 	orr.w	r3, r3, #4
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022cc:	2200      	movs	r2, #0
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022ce:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 80022d0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80022d4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      return HAL_ERROR;
 80022d8:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022da:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80022de:	bd70      	pop	{r4, r5, r6, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022e0:	6993      	ldr	r3, [r2, #24]
 80022e2:	079b      	lsls	r3, r3, #30
 80022e4:	d501      	bpl.n	80022ea <I2C_WaitOnTXISFlagUntilTimeout+0x6e>
  return HAL_OK;
 80022e6:	2000      	movs	r0, #0
}
 80022e8:	bd70      	pop	{r4, r5, r6, pc}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022ea:	6993      	ldr	r3, [r2, #24]
 80022ec:	06d9      	lsls	r1, r3, #27
 80022ee:	d412      	bmi.n	8002316 <I2C_WaitOnTXISFlagUntilTimeout+0x9a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022f0:	f7fe fe2a 	bl	8000f48 <HAL_GetTick>
 80022f4:	1b80      	subs	r0, r0, r6
 80022f6:	4285      	cmp	r5, r0
 80022f8:	d301      	bcc.n	80022fe <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 80022fa:	2d00      	cmp	r5, #0
 80022fc:	d1c2      	bne.n	8002284 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002300:	2120      	movs	r1, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002302:	430b      	orrs	r3, r1
 8002304:	e7e2      	b.n	80022cc <I2C_WaitOnTXISFlagUntilTimeout+0x50>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002306:	f7fe fe1f 	bl	8000f48 <HAL_GetTick>
 800230a:	1b80      	subs	r0, r0, r6
 800230c:	4285      	cmp	r5, r0
 800230e:	d3f6      	bcc.n	80022fe <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 8002310:	2d00      	cmp	r5, #0
 8002312:	d0f4      	beq.n	80022fe <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 8002314:	6822      	ldr	r2, [r4, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002316:	6993      	ldr	r3, [r2, #24]
 8002318:	069b      	lsls	r3, r3, #26
 800231a:	d5f4      	bpl.n	8002306 <I2C_WaitOnTXISFlagUntilTimeout+0x8a>
 800231c:	e7be      	b.n	800229c <I2C_WaitOnTXISFlagUntilTimeout+0x20>
 800231e:	bf00      	nop
 8002320:	fe00e800 	.word	0xfe00e800

08002324 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002324:	b570      	push	{r4, r5, r6, lr}
 8002326:	4604      	mov	r4, r0
 8002328:	4616      	mov	r6, r2
 800232a:	460d      	mov	r5, r1
 800232c:	b929      	cbnz	r1, 800233a <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
 800232e:	e03d      	b.n	80023ac <I2C_WaitOnSTOPFlagUntilTimeout+0x88>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002330:	f7fe fe0a 	bl	8000f48 <HAL_GetTick>
 8002334:	1b80      	subs	r0, r0, r6
 8002336:	4285      	cmp	r5, r0
 8002338:	d341      	bcc.n	80023be <I2C_WaitOnSTOPFlagUntilTimeout+0x9a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800233a:	6822      	ldr	r2, [r4, #0]
 800233c:	6993      	ldr	r3, [r2, #24]
 800233e:	0698      	lsls	r0, r3, #26
 8002340:	d441      	bmi.n	80023c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xa2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002342:	6993      	ldr	r3, [r2, #24]
 8002344:	06d9      	lsls	r1, r3, #27
 8002346:	d5f3      	bpl.n	8002330 <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
 8002348:	1c68      	adds	r0, r5, #1
 800234a:	d124      	bne.n	8002396 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800234c:	6993      	ldr	r3, [r2, #24]
 800234e:	0699      	lsls	r1, r3, #26
 8002350:	d5fc      	bpl.n	800234c <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002352:	2110      	movs	r1, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002354:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002356:	61d1      	str	r1, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002358:	61d3      	str	r3, [r2, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800235a:	6993      	ldr	r3, [r2, #24]
 800235c:	0798      	lsls	r0, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 800235e:	bf44      	itt	mi
 8002360:	2300      	movmi	r3, #0
 8002362:	6293      	strmi	r3, [r2, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002364:	6993      	ldr	r3, [r2, #24]
 8002366:	07d9      	lsls	r1, r3, #31
 8002368:	d403      	bmi.n	8002372 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800236a:	6993      	ldr	r3, [r2, #24]
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	6193      	str	r3, [r2, #24]
    I2C_RESET_CR2(hi2c);
 8002372:	6853      	ldr	r3, [r2, #4]
 8002374:	4915      	ldr	r1, [pc, #84]	; (80023cc <I2C_WaitOnSTOPFlagUntilTimeout+0xa8>)
 8002376:	400b      	ands	r3, r1
 8002378:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800237a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800237c:	2120      	movs	r1, #32
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800237e:	f043 0304 	orr.w	r3, r3, #4
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002382:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002384:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8002386:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 800238a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 800238e:	2001      	movs	r0, #1
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002390:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002394:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002396:	6993      	ldr	r3, [r2, #24]
 8002398:	069b      	lsls	r3, r3, #26
 800239a:	d4da      	bmi.n	8002352 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800239c:	f7fe fdd4 	bl	8000f48 <HAL_GetTick>
 80023a0:	1b80      	subs	r0, r0, r6
 80023a2:	4285      	cmp	r5, r0
 80023a4:	d30b      	bcc.n	80023be <I2C_WaitOnSTOPFlagUntilTimeout+0x9a>
 80023a6:	b155      	cbz	r5, 80023be <I2C_WaitOnSTOPFlagUntilTimeout+0x9a>
 80023a8:	6822      	ldr	r2, [r4, #0]
 80023aa:	e7cd      	b.n	8002348 <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023ac:	6802      	ldr	r2, [r0, #0]
 80023ae:	6993      	ldr	r3, [r2, #24]
 80023b0:	069b      	lsls	r3, r3, #26
 80023b2:	d408      	bmi.n	80023c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xa2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023b4:	6993      	ldr	r3, [r2, #24]
 80023b6:	06db      	lsls	r3, r3, #27
 80023b8:	d4c6      	bmi.n	8002348 <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ba:	f7fe fdc5 	bl	8000f48 <HAL_GetTick>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023be:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80023c0:	2120      	movs	r1, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023c2:	430b      	orrs	r3, r1
 80023c4:	e7dd      	b.n	8002382 <I2C_WaitOnSTOPFlagUntilTimeout+0x5e>
  return HAL_OK;
 80023c6:	2000      	movs	r0, #0
 80023c8:	bd70      	pop	{r4, r5, r6, pc}
 80023ca:	bf00      	nop
 80023cc:	fe00e800 	.word	0xfe00e800

080023d0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80023d0:	2800      	cmp	r0, #0
 80023d2:	d051      	beq.n	8002478 <HAL_I2C_Init+0xa8>
{
 80023d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023d6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80023da:	4604      	mov	r4, r0
 80023dc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d040      	beq.n	8002466 <HAL_I2C_Init+0x96>
  __HAL_I2C_DISABLE(hi2c);
 80023e4:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023e6:	68e0      	ldr	r0, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80023e8:	2224      	movs	r2, #36	; 0x24
 80023ea:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80023ee:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023f0:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 80023f2:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 80023fa:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023fc:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023fe:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002400:	2801      	cmp	r0, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002402:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002406:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002408:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800240a:	d031      	beq.n	8002470 <HAL_I2C_Init+0xa0>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800240c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002410:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002412:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002414:	bf04      	itt	eq
 8002416:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800241a:	605a      	streq	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800241c:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800241e:	6922      	ldr	r2, [r4, #16]
 8002420:	f8d4 e014 	ldr.w	lr, [r4, #20]
 8002424:	69a7      	ldr	r7, [r4, #24]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002426:	69e0      	ldr	r0, [r4, #28]
 8002428:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800242a:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800242e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8002432:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002434:	68dd      	ldr	r5, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002436:	ea42 020e 	orr.w	r2, r2, lr
 800243a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800243e:	4330      	orrs	r0, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002440:	f425 4500 	bic.w	r5, r5, #32768	; 0x8000
 8002444:	60dd      	str	r5, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002446:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002448:	6018      	str	r0, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800244a:	6819      	ldr	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800244c:	2200      	movs	r2, #0
  __HAL_I2C_ENABLE(hi2c);
 800244e:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8002452:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 8002454:	6019      	str	r1, [r3, #0]
  return HAL_OK;
 8002456:	4610      	mov	r0, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002458:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800245a:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800245e:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002460:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  return HAL_OK;
 8002464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002466:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800246a:	f00c ff93 	bl	800f394 <HAL_I2C_MspInit>
 800246e:	e7b9      	b.n	80023e4 <HAL_I2C_Init+0x14>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002470:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002474:	609a      	str	r2, [r3, #8]
 8002476:	e7d1      	b.n	800241c <HAL_I2C_Init+0x4c>
    return HAL_ERROR;
 8002478:	2001      	movs	r0, #1
 800247a:	4770      	bx	lr

0800247c <HAL_I2C_Master_Transmit>:
{
 800247c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002480:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8002484:	2c20      	cmp	r4, #32
 8002486:	d002      	beq.n	800248e <HAL_I2C_Master_Transmit+0x12>
    return HAL_BUSY;
 8002488:	2002      	movs	r0, #2
 800248a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hi2c);
 800248e:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8002492:	2c01      	cmp	r4, #1
 8002494:	d0f8      	beq.n	8002488 <HAL_I2C_Master_Transmit+0xc>
 8002496:	4698      	mov	r8, r3
 8002498:	2301      	movs	r3, #1
 800249a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800249e:	4617      	mov	r7, r2
 80024a0:	460e      	mov	r6, r1
 80024a2:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 80024a4:	f7fe fd50 	bl	8000f48 <HAL_GetTick>
 80024a8:	4605      	mov	r5, r0
 80024aa:	e004      	b.n	80024b6 <HAL_I2C_Master_Transmit+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ac:	f7fe fd4c 	bl	8000f48 <HAL_GetTick>
 80024b0:	1b40      	subs	r0, r0, r5
 80024b2:	2819      	cmp	r0, #25
 80024b4:	d86f      	bhi.n	8002596 <HAL_I2C_Master_Transmit+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024b6:	6823      	ldr	r3, [r4, #0]
 80024b8:	6998      	ldr	r0, [r3, #24]
 80024ba:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 80024be:	d1f5      	bne.n	80024ac <HAL_I2C_Master_Transmit+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024c0:	2221      	movs	r2, #33	; 0x21
 80024c2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024c6:	2210      	movs	r2, #16
 80024c8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024cc:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 80024ce:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024d2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 80024d4:	6267      	str	r7, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024d6:	b292      	uxth	r2, r2
 80024d8:	2aff      	cmp	r2, #255	; 0xff
    hi2c->XferISR   = NULL;
 80024da:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024dc:	d96c      	bls.n	80025b8 <HAL_I2C_Master_Transmit+0x13c>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	4948      	ldr	r1, [pc, #288]	; (8002604 <HAL_I2C_Master_Transmit+0x188>)
 80024e2:	4849      	ldr	r0, [pc, #292]	; (8002608 <HAL_I2C_Master_Transmit+0x18c>)
 80024e4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80024e8:	4331      	orrs	r1, r6
 80024ea:	4002      	ands	r2, r0
 80024ec:	430a      	orrs	r2, r1
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024ee:	21ff      	movs	r1, #255	; 0xff
 80024f0:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80024f2:	605a      	str	r2, [r3, #4]
 80024f4:	f046 77ff 	orr.w	r7, r6, #33423360	; 0x1fe0000
 80024f8:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8002610 <HAL_I2C_Master_Transmit+0x194>
 80024fc:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
    while (hi2c->XferCount > 0U)
 8002500:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002502:	9906      	ldr	r1, [sp, #24]
    while (hi2c->XferCount > 0U)
 8002504:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002506:	462a      	mov	r2, r5
 8002508:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800250a:	2b00      	cmp	r3, #0
 800250c:	d066      	beq.n	80025dc <HAL_I2C_Master_Transmit+0x160>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800250e:	f7ff feb5 	bl	800227c <I2C_WaitOnTXISFlagUntilTimeout>
 8002512:	2800      	cmp	r0, #0
 8002514:	d14d      	bne.n	80025b2 <HAL_I2C_Master_Transmit+0x136>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002516:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002518:	6822      	ldr	r2, [r4, #0]
 800251a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800251e:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8002520:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8002522:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002524:	3b01      	subs	r3, #1
 8002526:	b29b      	uxth	r3, r3
 8002528:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800252a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800252c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800252e:	3b01      	subs	r3, #1
 8002530:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002532:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 8002534:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002536:	2900      	cmp	r1, #0
 8002538:	d0e2      	beq.n	8002500 <HAL_I2C_Master_Transmit+0x84>
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1e0      	bne.n	8002500 <HAL_I2C_Master_Transmit+0x84>
 800253e:	9b06      	ldr	r3, [sp, #24]
 8002540:	3301      	adds	r3, #1
 8002542:	d10e      	bne.n	8002562 <HAL_I2C_Master_Transmit+0xe6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002544:	6993      	ldr	r3, [r2, #24]
 8002546:	0619      	lsls	r1, r3, #24
 8002548:	d5fc      	bpl.n	8002544 <HAL_I2C_Master_Transmit+0xc8>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800254a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800254c:	b29b      	uxth	r3, r3
 800254e:	2bff      	cmp	r3, #255	; 0xff
 8002550:	d913      	bls.n	800257a <HAL_I2C_Master_Transmit+0xfe>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002552:	6853      	ldr	r3, [r2, #4]
 8002554:	ea03 0308 	and.w	r3, r3, r8
 8002558:	433b      	orrs	r3, r7
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800255a:	21ff      	movs	r1, #255	; 0xff
 800255c:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800255e:	6053      	str	r3, [r2, #4]
 8002560:	e7ce      	b.n	8002500 <HAL_I2C_Master_Transmit+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002562:	6993      	ldr	r3, [r2, #24]
 8002564:	061b      	lsls	r3, r3, #24
 8002566:	d4f0      	bmi.n	800254a <HAL_I2C_Master_Transmit+0xce>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002568:	f7fe fcee 	bl	8000f48 <HAL_GetTick>
 800256c:	9b06      	ldr	r3, [sp, #24]
 800256e:	1b40      	subs	r0, r0, r5
 8002570:	4283      	cmp	r3, r0
 8002572:	d310      	bcc.n	8002596 <HAL_I2C_Master_Transmit+0x11a>
 8002574:	b17b      	cbz	r3, 8002596 <HAL_I2C_Master_Transmit+0x11a>
 8002576:	6822      	ldr	r2, [r4, #0]
 8002578:	e7e2      	b.n	8002540 <HAL_I2C_Master_Transmit+0xc4>
          hi2c->XferSize = hi2c->XferCount;
 800257a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800257c:	6850      	ldr	r0, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 800257e:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002580:	b2cb      	uxtb	r3, r1
 8002582:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 8002586:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800258a:	ea00 0008 	and.w	r0, r0, r8
 800258e:	4303      	orrs	r3, r0
          hi2c->XferSize = hi2c->XferCount;
 8002590:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002592:	6053      	str	r3, [r2, #4]
 8002594:	e7b4      	b.n	8002500 <HAL_I2C_Master_Transmit+0x84>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002596:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002598:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800259a:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800259c:	430b      	orrs	r3, r1
 800259e:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80025a0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 80025a4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          return HAL_ERROR;
 80025a8:	2001      	movs	r0, #1
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025aa:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80025ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 80025b2:	2001      	movs	r0, #1
 80025b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hi2c->XferSize = hi2c->XferCount;
 80025b8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80025ba:	4f13      	ldr	r7, [pc, #76]	; (8002608 <HAL_I2C_Master_Transmit+0x18c>)
 80025bc:	6858      	ldr	r0, [r3, #4]
 80025be:	f3c6 0609 	ubfx	r6, r6, #0, #10
      hi2c->XferSize = hi2c->XferCount;
 80025c2:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80025c4:	f046 4202 	orr.w	r2, r6, #2181038080	; 0x82000000
 80025c8:	4038      	ands	r0, r7
 80025ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025ce:	b2cf      	uxtb	r7, r1
 80025d0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80025d4:	4302      	orrs	r2, r0
      hi2c->XferSize = hi2c->XferCount;
 80025d6:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80025d8:	605a      	str	r2, [r3, #4]
 80025da:	e78b      	b.n	80024f4 <HAL_I2C_Master_Transmit+0x78>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025dc:	f7ff fea2 	bl	8002324 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025e0:	2800      	cmp	r0, #0
 80025e2:	d1e6      	bne.n	80025b2 <HAL_I2C_Master_Transmit+0x136>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025e4:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80025e6:	4d09      	ldr	r5, [pc, #36]	; (800260c <HAL_I2C_Master_Transmit+0x190>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025e8:	2120      	movs	r1, #32
 80025ea:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	402a      	ands	r2, r5
 80025f0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80025f2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80025f6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025fa:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80025fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002602:	bf00      	nop
 8002604:	81ff2000 	.word	0x81ff2000
 8002608:	fc009800 	.word	0xfc009800
 800260c:	fe00e800 	.word	0xfe00e800
 8002610:	fc009c00 	.word	0xfc009c00

08002614 <HAL_I2C_Master_Receive>:
{
 8002614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002618:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 800261c:	2c20      	cmp	r4, #32
 800261e:	d002      	beq.n	8002626 <HAL_I2C_Master_Receive+0x12>
    return HAL_BUSY;
 8002620:	2002      	movs	r0, #2
 8002622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hi2c);
 8002626:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 800262a:	2c01      	cmp	r4, #1
 800262c:	d0f8      	beq.n	8002620 <HAL_I2C_Master_Receive+0xc>
 800262e:	4698      	mov	r8, r3
 8002630:	2301      	movs	r3, #1
 8002632:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8002636:	4617      	mov	r7, r2
 8002638:	460e      	mov	r6, r1
 800263a:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 800263c:	f7fe fc84 	bl	8000f48 <HAL_GetTick>
 8002640:	4605      	mov	r5, r0
 8002642:	e004      	b.n	800264e <HAL_I2C_Master_Receive+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002644:	f7fe fc80 	bl	8000f48 <HAL_GetTick>
 8002648:	1b40      	subs	r0, r0, r5
 800264a:	2819      	cmp	r0, #25
 800264c:	d862      	bhi.n	8002714 <HAL_I2C_Master_Receive+0x100>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800264e:	6823      	ldr	r3, [r4, #0]
 8002650:	6998      	ldr	r0, [r3, #24]
 8002652:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8002656:	d1f5      	bne.n	8002644 <HAL_I2C_Master_Receive+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002658:	2222      	movs	r2, #34	; 0x22
 800265a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800265e:	2210      	movs	r2, #16
 8002660:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002664:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8002666:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800266a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 800266c:	6267      	str	r7, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800266e:	b292      	uxth	r2, r2
 8002670:	2aff      	cmp	r2, #255	; 0xff
    hi2c->XferISR   = NULL;
 8002672:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002674:	d96d      	bls.n	8002752 <HAL_I2C_Master_Receive+0x13e>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	4948      	ldr	r1, [pc, #288]	; (800279c <HAL_I2C_Master_Receive+0x188>)
 800267a:	4849      	ldr	r0, [pc, #292]	; (80027a0 <HAL_I2C_Master_Receive+0x18c>)
 800267c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8002680:	4331      	orrs	r1, r6
 8002682:	4002      	ands	r2, r0
 8002684:	430a      	orrs	r2, r1
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002686:	21ff      	movs	r1, #255	; 0xff
 8002688:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800268a:	605a      	str	r2, [r3, #4]
 800268c:	f046 77ff 	orr.w	r7, r6, #33423360	; 0x1fe0000
 8002690:	f8df 8114 	ldr.w	r8, [pc, #276]	; 80027a8 <HAL_I2C_Master_Receive+0x194>
 8002694:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
    while (hi2c->XferCount > 0U)
 8002698:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800269a:	9906      	ldr	r1, [sp, #24]
    while (hi2c->XferCount > 0U)
 800269c:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800269e:	462a      	mov	r2, r5
 80026a0:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d067      	beq.n	8002776 <HAL_I2C_Master_Receive+0x162>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026a6:	f7ff fd6b 	bl	8002180 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026aa:	2800      	cmp	r0, #0
 80026ac:	d14e      	bne.n	800274c <HAL_I2C_Master_Receive+0x138>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026ae:	6822      	ldr	r2, [r4, #0]
 80026b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026b4:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 80026b6:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80026b8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80026ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80026bc:	3901      	subs	r1, #1
 80026be:	b289      	uxth	r1, r1
 80026c0:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026c2:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80026c4:	3b01      	subs	r3, #1
 80026c6:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 80026c8:	3201      	adds	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026ca:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 80026cc:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80026ce:	6262      	str	r2, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026d0:	2900      	cmp	r1, #0
 80026d2:	d0e1      	beq.n	8002698 <HAL_I2C_Master_Receive+0x84>
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1df      	bne.n	8002698 <HAL_I2C_Master_Receive+0x84>
 80026d8:	9b06      	ldr	r3, [sp, #24]
 80026da:	6822      	ldr	r2, [r4, #0]
 80026dc:	3301      	adds	r3, #1
 80026de:	d10e      	bne.n	80026fe <HAL_I2C_Master_Receive+0xea>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026e0:	6993      	ldr	r3, [r2, #24]
 80026e2:	0619      	lsls	r1, r3, #24
 80026e4:	d5fc      	bpl.n	80026e0 <HAL_I2C_Master_Receive+0xcc>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2bff      	cmp	r3, #255	; 0xff
 80026ec:	d920      	bls.n	8002730 <HAL_I2C_Master_Receive+0x11c>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80026ee:	6853      	ldr	r3, [r2, #4]
 80026f0:	ea03 0308 	and.w	r3, r3, r8
 80026f4:	433b      	orrs	r3, r7
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026f6:	21ff      	movs	r1, #255	; 0xff
 80026f8:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80026fa:	6053      	str	r3, [r2, #4]
 80026fc:	e7cc      	b.n	8002698 <HAL_I2C_Master_Receive+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026fe:	6993      	ldr	r3, [r2, #24]
 8002700:	061b      	lsls	r3, r3, #24
 8002702:	d4f0      	bmi.n	80026e6 <HAL_I2C_Master_Receive+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002704:	f7fe fc20 	bl	8000f48 <HAL_GetTick>
 8002708:	9b06      	ldr	r3, [sp, #24]
 800270a:	1b40      	subs	r0, r0, r5
 800270c:	4283      	cmp	r3, r0
 800270e:	d301      	bcc.n	8002714 <HAL_I2C_Master_Receive+0x100>
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1e2      	bne.n	80026da <HAL_I2C_Master_Receive+0xc6>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002714:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002716:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002718:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800271a:	430b      	orrs	r3, r1
 800271c:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800271e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 8002722:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          return HAL_ERROR;
 8002726:	2001      	movs	r0, #1
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002728:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800272c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          hi2c->XferSize = hi2c->XferCount;
 8002730:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002732:	6850      	ldr	r0, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8002734:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002736:	b2cb      	uxtb	r3, r1
 8002738:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 800273c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002740:	ea00 0008 	and.w	r0, r0, r8
 8002744:	4303      	orrs	r3, r0
          hi2c->XferSize = hi2c->XferCount;
 8002746:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002748:	6053      	str	r3, [r2, #4]
 800274a:	e7a5      	b.n	8002698 <HAL_I2C_Master_Receive+0x84>
        return HAL_ERROR;
 800274c:	2001      	movs	r0, #1
 800274e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hi2c->XferSize = hi2c->XferCount;
 8002752:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002754:	4f12      	ldr	r7, [pc, #72]	; (80027a0 <HAL_I2C_Master_Receive+0x18c>)
 8002756:	6858      	ldr	r0, [r3, #4]
 8002758:	f3c6 0609 	ubfx	r6, r6, #0, #10
      hi2c->XferSize = hi2c->XferCount;
 800275c:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800275e:	f046 4202 	orr.w	r2, r6, #2181038080	; 0x82000000
 8002762:	4038      	ands	r0, r7
 8002764:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8002768:	b2cf      	uxtb	r7, r1
 800276a:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800276e:	4302      	orrs	r2, r0
      hi2c->XferSize = hi2c->XferCount;
 8002770:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002772:	605a      	str	r2, [r3, #4]
 8002774:	e78a      	b.n	800268c <HAL_I2C_Master_Receive+0x78>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002776:	f7ff fdd5 	bl	8002324 <I2C_WaitOnSTOPFlagUntilTimeout>
 800277a:	2800      	cmp	r0, #0
 800277c:	d1e6      	bne.n	800274c <HAL_I2C_Master_Receive+0x138>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800277e:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002780:	4d08      	ldr	r5, [pc, #32]	; (80027a4 <HAL_I2C_Master_Receive+0x190>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002782:	2120      	movs	r1, #32
 8002784:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	402a      	ands	r2, r5
 800278a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800278c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002790:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002794:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800279c:	81ff2400 	.word	0x81ff2400
 80027a0:	fc009800 	.word	0xfc009800
 80027a4:	fe00e800 	.word	0xfe00e800
 80027a8:	fc009c00 	.word	0xfc009c00

080027ac <HAL_I2C_Mem_Write>:
{
 80027ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b0:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 80027b4:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b8:	2c20      	cmp	r4, #32
 80027ba:	d002      	beq.n	80027c2 <HAL_I2C_Mem_Write+0x16>
    return HAL_BUSY;
 80027bc:	2002      	movs	r0, #2
 80027be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((pData == NULL) || (Size == 0U))
 80027c2:	9c08      	ldr	r4, [sp, #32]
 80027c4:	2c00      	cmp	r4, #0
 80027c6:	f000 809e 	beq.w	8002906 <HAL_I2C_Mem_Write+0x15a>
 80027ca:	2d00      	cmp	r5, #0
 80027cc:	f000 809b 	beq.w	8002906 <HAL_I2C_Mem_Write+0x15a>
    __HAL_LOCK(hi2c);
 80027d0:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80027d4:	2c01      	cmp	r4, #1
 80027d6:	d0f1      	beq.n	80027bc <HAL_I2C_Mem_Write+0x10>
 80027d8:	461e      	mov	r6, r3
 80027da:	2301      	movs	r3, #1
 80027dc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80027e0:	4617      	mov	r7, r2
 80027e2:	4688      	mov	r8, r1
 80027e4:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 80027e6:	f7fe fbaf 	bl	8000f48 <HAL_GetTick>
 80027ea:	4681      	mov	r9, r0
 80027ec:	e006      	b.n	80027fc <HAL_I2C_Mem_Write+0x50>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ee:	f7fe fbab 	bl	8000f48 <HAL_GetTick>
 80027f2:	eba0 0009 	sub.w	r0, r0, r9
 80027f6:	2819      	cmp	r0, #25
 80027f8:	f200 8098 	bhi.w	800292c <HAL_I2C_Mem_Write+0x180>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027fc:	6823      	ldr	r3, [r4, #0]
 80027fe:	6998      	ldr	r0, [r3, #24]
 8002800:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8002804:	d1f3      	bne.n	80027ee <HAL_I2C_Mem_Write+0x42>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002806:	2121      	movs	r1, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002808:	2240      	movs	r2, #64	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800280a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800280e:	f3c8 0809 	ubfx	r8, r8, #0, #10
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002812:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002816:	6460      	str	r0, [r4, #68]	; 0x44
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002818:	b2f2      	uxtb	r2, r6
    hi2c->XferCount = Size;
 800281a:	8565      	strh	r5, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800281c:	6859      	ldr	r1, [r3, #4]
 800281e:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 80029f0 <HAL_I2C_Mem_Write+0x244>
    hi2c->pBuffPtr  = pData;
 8002822:	9d08      	ldr	r5, [sp, #32]
    hi2c->XferISR   = NULL;
 8002824:	6360      	str	r0, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002826:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 800282a:	f042 4201 	orr.w	r2, r2, #2164260864	; 0x81000000
 800282e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002832:	ea01 010e 	and.w	r1, r1, lr
 8002836:	4311      	orrs	r1, r2
    hi2c->pBuffPtr  = pData;
 8002838:	6265      	str	r5, [r4, #36]	; 0x24
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800283a:	464a      	mov	r2, r9
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800283c:	6059      	str	r1, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800283e:	4620      	mov	r0, r4
 8002840:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002842:	f7ff fd1b 	bl	800227c <I2C_WaitOnTXISFlagUntilTimeout>
 8002846:	2800      	cmp	r0, #0
 8002848:	f040 80a4 	bne.w	8002994 <HAL_I2C_Mem_Write+0x1e8>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800284c:	2e01      	cmp	r6, #1
 800284e:	d00a      	beq.n	8002866 <HAL_I2C_Mem_Write+0xba>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002850:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002852:	990a      	ldr	r1, [sp, #40]	; 0x28
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002854:	0a3a      	lsrs	r2, r7, #8
 8002856:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002858:	4620      	mov	r0, r4
 800285a:	464a      	mov	r2, r9
 800285c:	f7ff fd0e 	bl	800227c <I2C_WaitOnTXISFlagUntilTimeout>
 8002860:	2800      	cmp	r0, #0
 8002862:	f040 8097 	bne.w	8002994 <HAL_I2C_Mem_Write+0x1e8>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002866:	6822      	ldr	r2, [r4, #0]
 8002868:	b2ff      	uxtb	r7, r7
 800286a:	6297      	str	r7, [r2, #40]	; 0x28
 800286c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800286e:	3301      	adds	r3, #1
 8002870:	d177      	bne.n	8002962 <HAL_I2C_Mem_Write+0x1b6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002872:	6993      	ldr	r3, [r2, #24]
 8002874:	061d      	lsls	r5, r3, #24
 8002876:	d5fc      	bpl.n	8002872 <HAL_I2C_Mem_Write+0xc6>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002878:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800287a:	b29b      	uxth	r3, r3
 800287c:	2bff      	cmp	r3, #255	; 0xff
 800287e:	f240 808f 	bls.w	80029a0 <HAL_I2C_Mem_Write+0x1f4>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002882:	6853      	ldr	r3, [r2, #4]
 8002884:	4858      	ldr	r0, [pc, #352]	; (80029e8 <HAL_I2C_Mem_Write+0x23c>)
 8002886:	f048 71ff 	orr.w	r1, r8, #33423360	; 0x1fe0000
 800288a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800288e:	4003      	ands	r3, r0
 8002890:	430b      	orrs	r3, r1
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002892:	21ff      	movs	r1, #255	; 0xff
 8002894:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002896:	6053      	str	r3, [r2, #4]
 8002898:	f048 75ff 	orr.w	r5, r8, #33423360	; 0x1fe0000
 800289c:	4e52      	ldr	r6, [pc, #328]	; (80029e8 <HAL_I2C_Mem_Write+0x23c>)
 800289e:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
 80028a2:	e004      	b.n	80028ae <HAL_I2C_Mem_Write+0x102>
    while (hi2c->XferCount > 0U);
 80028a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 8087 	beq.w	80029bc <HAL_I2C_Mem_Write+0x210>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ae:	464a      	mov	r2, r9
 80028b0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80028b2:	4620      	mov	r0, r4
 80028b4:	f7ff fce2 	bl	800227c <I2C_WaitOnTXISFlagUntilTimeout>
 80028b8:	2800      	cmp	r0, #0
 80028ba:	d15f      	bne.n	800297c <HAL_I2C_Mem_Write+0x1d0>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80028be:	6822      	ldr	r2, [r4, #0]
 80028c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028c4:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 80028c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80028c8:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80028ca:	3b01      	subs	r3, #1
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80028d0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028d2:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80028d4:	3b01      	subs	r3, #1
 80028d6:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028d8:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 80028da:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028dc:	2900      	cmp	r1, #0
 80028de:	d0e1      	beq.n	80028a4 <HAL_I2C_Mem_Write+0xf8>
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1df      	bne.n	80028a4 <HAL_I2C_Mem_Write+0xf8>
 80028e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80028e6:	3301      	adds	r3, #1
 80028e8:	d113      	bne.n	8002912 <HAL_I2C_Mem_Write+0x166>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028ea:	6993      	ldr	r3, [r2, #24]
 80028ec:	0619      	lsls	r1, r3, #24
 80028ee:	d5fc      	bpl.n	80028ea <HAL_I2C_Mem_Write+0x13e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	2bff      	cmp	r3, #255	; 0xff
 80028f6:	d927      	bls.n	8002948 <HAL_I2C_Mem_Write+0x19c>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80028f8:	6853      	ldr	r3, [r2, #4]
 80028fa:	4033      	ands	r3, r6
 80028fc:	432b      	orrs	r3, r5
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028fe:	21ff      	movs	r1, #255	; 0xff
 8002900:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002902:	6053      	str	r3, [r2, #4]
 8002904:	e7ce      	b.n	80028a4 <HAL_I2C_Mem_Write+0xf8>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002906:	f44f 7300 	mov.w	r3, #512	; 0x200
 800290a:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 800290c:	2001      	movs	r0, #1
 800290e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002912:	6993      	ldr	r3, [r2, #24]
 8002914:	061b      	lsls	r3, r3, #24
 8002916:	d4eb      	bmi.n	80028f0 <HAL_I2C_Mem_Write+0x144>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002918:	f7fe fb16 	bl	8000f48 <HAL_GetTick>
 800291c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800291e:	eba0 0009 	sub.w	r0, r0, r9
 8002922:	4283      	cmp	r3, r0
 8002924:	d302      	bcc.n	800292c <HAL_I2C_Mem_Write+0x180>
 8002926:	b10b      	cbz	r3, 800292c <HAL_I2C_Mem_Write+0x180>
 8002928:	6822      	ldr	r2, [r4, #0]
 800292a:	e7dc      	b.n	80028e6 <HAL_I2C_Mem_Write+0x13a>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800292c:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800292e:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002930:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002932:	430b      	orrs	r3, r1
 8002934:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8002936:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 800293a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          return HAL_ERROR;
 800293e:	2001      	movs	r0, #1
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002940:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          hi2c->XferSize = hi2c->XferCount;
 8002948:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800294a:	6850      	ldr	r0, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 800294c:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800294e:	b2cf      	uxtb	r7, r1
 8002950:	f048 7300 	orr.w	r3, r8, #33554432	; 0x2000000
 8002954:	4030      	ands	r0, r6
 8002956:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800295a:	4303      	orrs	r3, r0
          hi2c->XferSize = hi2c->XferCount;
 800295c:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800295e:	6053      	str	r3, [r2, #4]
 8002960:	e7a0      	b.n	80028a4 <HAL_I2C_Mem_Write+0xf8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002962:	6993      	ldr	r3, [r2, #24]
 8002964:	0618      	lsls	r0, r3, #24
 8002966:	d487      	bmi.n	8002878 <HAL_I2C_Mem_Write+0xcc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002968:	f7fe faee 	bl	8000f48 <HAL_GetTick>
 800296c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800296e:	eba0 0009 	sub.w	r0, r0, r9
 8002972:	4283      	cmp	r3, r0
 8002974:	d305      	bcc.n	8002982 <HAL_I2C_Mem_Write+0x1d6>
 8002976:	b123      	cbz	r3, 8002982 <HAL_I2C_Mem_Write+0x1d6>
 8002978:	6822      	ldr	r2, [r4, #0]
 800297a:	e778      	b.n	800286e <HAL_I2C_Mem_Write+0xc2>
        return HAL_ERROR;
 800297c:	2001      	movs	r0, #1
 800297e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002982:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002984:	2120      	movs	r1, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002986:	430b      	orrs	r3, r1
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002988:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800298a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800298c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002990:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002994:	2300      	movs	r3, #0
 8002996:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800299a:	2001      	movs	r0, #1
 800299c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hi2c->XferSize = hi2c->XferCount;
 80029a0:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80029a2:	4811      	ldr	r0, [pc, #68]	; (80029e8 <HAL_I2C_Mem_Write+0x23c>)
 80029a4:	6853      	ldr	r3, [r2, #4]
      hi2c->XferSize = hi2c->XferCount;
 80029a6:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80029a8:	4018      	ands	r0, r3
 80029aa:	b2cd      	uxtb	r5, r1
 80029ac:	f048 7300 	orr.w	r3, r8, #33554432	; 0x2000000
 80029b0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80029b4:	4303      	orrs	r3, r0
      hi2c->XferSize = hi2c->XferCount;
 80029b6:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80029b8:	6053      	str	r3, [r2, #4]
 80029ba:	e76d      	b.n	8002898 <HAL_I2C_Mem_Write+0xec>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029bc:	464a      	mov	r2, r9
 80029be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80029c0:	4620      	mov	r0, r4
 80029c2:	f7ff fcaf 	bl	8002324 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029c6:	2800      	cmp	r0, #0
 80029c8:	d1d8      	bne.n	800297c <HAL_I2C_Mem_Write+0x1d0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029ca:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80029cc:	4d07      	ldr	r5, [pc, #28]	; (80029ec <HAL_I2C_Mem_Write+0x240>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029ce:	2120      	movs	r1, #32
 80029d0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	402a      	ands	r2, r5
 80029d6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80029d8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80029dc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029e0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80029e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029e8:	fc009c00 	.word	0xfc009c00
 80029ec:	fe00e800 	.word	0xfe00e800
 80029f0:	fc009800 	.word	0xfc009800

080029f4 <HAL_I2C_Mem_Read>:
{
 80029f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f8:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 80029fc:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a00:	2c20      	cmp	r4, #32
 8002a02:	d002      	beq.n	8002a0a <HAL_I2C_Mem_Read+0x16>
    return HAL_BUSY;
 8002a04:	2002      	movs	r0, #2
 8002a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((pData == NULL) || (Size == 0U))
 8002a0a:	9c08      	ldr	r4, [sp, #32]
 8002a0c:	2c00      	cmp	r4, #0
 8002a0e:	f000 808d 	beq.w	8002b2c <HAL_I2C_Mem_Read+0x138>
 8002a12:	2d00      	cmp	r5, #0
 8002a14:	f000 808a 	beq.w	8002b2c <HAL_I2C_Mem_Read+0x138>
    __HAL_LOCK(hi2c);
 8002a18:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8002a1c:	2c01      	cmp	r4, #1
 8002a1e:	d0f1      	beq.n	8002a04 <HAL_I2C_Mem_Read+0x10>
 8002a20:	4699      	mov	r9, r3
 8002a22:	2301      	movs	r3, #1
 8002a24:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8002a28:	4617      	mov	r7, r2
 8002a2a:	460e      	mov	r6, r1
 8002a2c:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8002a2e:	f7fe fa8b 	bl	8000f48 <HAL_GetTick>
 8002a32:	4680      	mov	r8, r0
 8002a34:	e006      	b.n	8002a44 <HAL_I2C_Mem_Read+0x50>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a36:	f7fe fa87 	bl	8000f48 <HAL_GetTick>
 8002a3a:	eba0 0008 	sub.w	r0, r0, r8
 8002a3e:	2819      	cmp	r0, #25
 8002a40:	f200 8092 	bhi.w	8002b68 <HAL_I2C_Mem_Read+0x174>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a44:	6823      	ldr	r3, [r4, #0]
 8002a46:	6998      	ldr	r0, [r3, #24]
 8002a48:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8002a4c:	d1f3      	bne.n	8002a36 <HAL_I2C_Mem_Read+0x42>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a4e:	2122      	movs	r1, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a50:	2240      	movs	r2, #64	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a52:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002a56:	f3c6 0609 	ubfx	r6, r6, #0, #10
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a5a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a5e:	6460      	str	r0, [r4, #68]	; 0x44
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002a60:	fa5f f289 	uxtb.w	r2, r9
    hi2c->XferCount = Size;
 8002a64:	8565      	strh	r5, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002a66:	6859      	ldr	r1, [r3, #4]
 8002a68:	f8df e1e4 	ldr.w	lr, [pc, #484]	; 8002c50 <HAL_I2C_Mem_Read+0x25c>
    hi2c->pBuffPtr  = pData;
 8002a6c:	9d08      	ldr	r5, [sp, #32]
    hi2c->XferISR   = NULL;
 8002a6e:	6360      	str	r0, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002a70:	ea46 4202 	orr.w	r2, r6, r2, lsl #16
 8002a74:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a7c:	ea01 010e 	and.w	r1, r1, lr
 8002a80:	4311      	orrs	r1, r2
    hi2c->pBuffPtr  = pData;
 8002a82:	6265      	str	r5, [r4, #36]	; 0x24
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a84:	4642      	mov	r2, r8
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002a86:	6059      	str	r1, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a88:	4620      	mov	r0, r4
 8002a8a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002a8c:	f7ff fbf6 	bl	800227c <I2C_WaitOnTXISFlagUntilTimeout>
 8002a90:	2800      	cmp	r0, #0
 8002a92:	f040 80ae 	bne.w	8002bf2 <HAL_I2C_Mem_Read+0x1fe>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a96:	f1b9 0f01 	cmp.w	r9, #1
 8002a9a:	d00a      	beq.n	8002ab2 <HAL_I2C_Mem_Read+0xbe>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a9c:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a9e:	990a      	ldr	r1, [sp, #40]	; 0x28
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002aa0:	0a3a      	lsrs	r2, r7, #8
 8002aa2:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aa4:	4620      	mov	r0, r4
 8002aa6:	4642      	mov	r2, r8
 8002aa8:	f7ff fbe8 	bl	800227c <I2C_WaitOnTXISFlagUntilTimeout>
 8002aac:	2800      	cmp	r0, #0
 8002aae:	f040 80a0 	bne.w	8002bf2 <HAL_I2C_Mem_Read+0x1fe>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ab2:	6821      	ldr	r1, [r4, #0]
 8002ab4:	b2ff      	uxtb	r7, r7
 8002ab6:	628f      	str	r7, [r1, #40]	; 0x28
 8002ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002aba:	3301      	adds	r3, #1
 8002abc:	f040 8082 	bne.w	8002bc4 <HAL_I2C_Mem_Read+0x1d0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ac0:	698b      	ldr	r3, [r1, #24]
 8002ac2:	0658      	lsls	r0, r3, #25
 8002ac4:	d5fc      	bpl.n	8002ac0 <HAL_I2C_Mem_Read+0xcc>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ac6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	2bff      	cmp	r3, #255	; 0xff
 8002acc:	f240 8097 	bls.w	8002bfe <HAL_I2C_Mem_Read+0x20a>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002ad0:	684b      	ldr	r3, [r1, #4]
 8002ad2:	485f      	ldr	r0, [pc, #380]	; (8002c50 <HAL_I2C_Mem_Read+0x25c>)
 8002ad4:	4a5f      	ldr	r2, [pc, #380]	; (8002c54 <HAL_I2C_Mem_Read+0x260>)
 8002ad6:	4003      	ands	r3, r0
 8002ad8:	4332      	orrs	r2, r6
 8002ada:	4313      	orrs	r3, r2
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002adc:	22ff      	movs	r2, #255	; 0xff
 8002ade:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002ae0:	604b      	str	r3, [r1, #4]
 8002ae2:	f046 75ff 	orr.w	r5, r6, #33423360	; 0x1fe0000
 8002ae6:	4f5c      	ldr	r7, [pc, #368]	; (8002c58 <HAL_I2C_Mem_Read+0x264>)
 8002ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002aea:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
 8002aee:	3301      	adds	r3, #1
 8002af0:	d122      	bne.n	8002b38 <HAL_I2C_Mem_Read+0x144>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002af2:	698b      	ldr	r3, [r1, #24]
 8002af4:	075b      	lsls	r3, r3, #29
 8002af6:	d5fc      	bpl.n	8002af2 <HAL_I2C_Mem_Read+0xfe>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002af8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002afa:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8002afc:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8002afe:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002b00:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002b02:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002b04:	3901      	subs	r1, #1
 8002b06:	b289      	uxth	r1, r1
 8002b08:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b0a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8002b10:	3201      	adds	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b12:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 8002b14:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002b16:	6262      	str	r2, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b18:	b109      	cbz	r1, 8002b1e <HAL_I2C_Mem_Read+0x12a>
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d032      	beq.n	8002b84 <HAL_I2C_Mem_Read+0x190>
    while (hi2c->XferCount > 0U);
 8002b1e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d07b      	beq.n	8002c1e <HAL_I2C_Mem_Read+0x22a>
 8002b26:	6821      	ldr	r1, [r4, #0]
 8002b28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b2a:	e7e0      	b.n	8002aee <HAL_I2C_Mem_Read+0xfa>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b30:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8002b32:	2001      	movs	r0, #1
 8002b34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b38:	698b      	ldr	r3, [r1, #24]
 8002b3a:	0758      	lsls	r0, r3, #29
 8002b3c:	d4dc      	bmi.n	8002af8 <HAL_I2C_Mem_Read+0x104>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b3e:	f7fe fa03 	bl	8000f48 <HAL_GetTick>
 8002b42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b44:	eba0 0008 	sub.w	r0, r0, r8
 8002b48:	4283      	cmp	r3, r0
 8002b4a:	d30d      	bcc.n	8002b68 <HAL_I2C_Mem_Read+0x174>
 8002b4c:	b163      	cbz	r3, 8002b68 <HAL_I2C_Mem_Read+0x174>
 8002b4e:	6821      	ldr	r1, [r4, #0]
 8002b50:	e7cd      	b.n	8002aee <HAL_I2C_Mem_Read+0xfa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b52:	6993      	ldr	r3, [r2, #24]
 8002b54:	061b      	lsls	r3, r3, #24
 8002b56:	d41c      	bmi.n	8002b92 <HAL_I2C_Mem_Read+0x19e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b58:	f7fe f9f6 	bl	8000f48 <HAL_GetTick>
 8002b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b5e:	eba0 0008 	sub.w	r0, r0, r8
 8002b62:	4283      	cmp	r3, r0
 8002b64:	d300      	bcc.n	8002b68 <HAL_I2C_Mem_Read+0x174>
 8002b66:	b973      	cbnz	r3, 8002b86 <HAL_I2C_Mem_Read+0x192>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b68:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b6a:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b6c:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b6e:	430b      	orrs	r3, r1
 8002b70:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8002b72:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 8002b76:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          return HAL_ERROR;
 8002b7a:	2001      	movs	r0, #1
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b7c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002b80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b86:	6822      	ldr	r2, [r4, #0]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	d1e2      	bne.n	8002b52 <HAL_I2C_Mem_Read+0x15e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b8c:	6993      	ldr	r3, [r2, #24]
 8002b8e:	0619      	lsls	r1, r3, #24
 8002b90:	d5fc      	bpl.n	8002b8c <HAL_I2C_Mem_Read+0x198>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	2bff      	cmp	r3, #255	; 0xff
 8002b98:	d906      	bls.n	8002ba8 <HAL_I2C_Mem_Read+0x1b4>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002b9a:	6853      	ldr	r3, [r2, #4]
 8002b9c:	403b      	ands	r3, r7
 8002b9e:	432b      	orrs	r3, r5
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ba0:	21ff      	movs	r1, #255	; 0xff
 8002ba2:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002ba4:	6053      	str	r3, [r2, #4]
 8002ba6:	e7ba      	b.n	8002b1e <HAL_I2C_Mem_Read+0x12a>
          hi2c->XferSize = hi2c->XferCount;
 8002ba8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002baa:	6850      	ldr	r0, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8002bac:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002bae:	fa5f fe81 	uxtb.w	lr, r1
 8002bb2:	f046 7300 	orr.w	r3, r6, #33554432	; 0x2000000
 8002bb6:	4038      	ands	r0, r7
 8002bb8:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8002bbc:	4303      	orrs	r3, r0
          hi2c->XferSize = hi2c->XferCount;
 8002bbe:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002bc0:	6053      	str	r3, [r2, #4]
 8002bc2:	e7ac      	b.n	8002b1e <HAL_I2C_Mem_Read+0x12a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bc4:	698b      	ldr	r3, [r1, #24]
 8002bc6:	065a      	lsls	r2, r3, #25
 8002bc8:	f53f af7d 	bmi.w	8002ac6 <HAL_I2C_Mem_Read+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bcc:	f7fe f9bc 	bl	8000f48 <HAL_GetTick>
 8002bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002bd2:	eba0 0008 	sub.w	r0, r0, r8
 8002bd6:	4283      	cmp	r3, r0
 8002bd8:	d302      	bcc.n	8002be0 <HAL_I2C_Mem_Read+0x1ec>
 8002bda:	b10b      	cbz	r3, 8002be0 <HAL_I2C_Mem_Read+0x1ec>
 8002bdc:	6821      	ldr	r1, [r4, #0]
 8002bde:	e76c      	b.n	8002aba <HAL_I2C_Mem_Read+0xc6>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002be0:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002be2:	2120      	movs	r1, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002be4:	430b      	orrs	r3, r1
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be6:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002be8:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002bea:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bee:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hi2c->XferSize = hi2c->XferCount;
 8002bfe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002c00:	4d13      	ldr	r5, [pc, #76]	; (8002c50 <HAL_I2C_Mem_Read+0x25c>)
 8002c02:	6848      	ldr	r0, [r1, #4]
      hi2c->XferSize = hi2c->XferCount;
 8002c04:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002c06:	f046 4302 	orr.w	r3, r6, #2181038080	; 0x82000000
 8002c0a:	4028      	ands	r0, r5
 8002c0c:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8002c10:	b2d5      	uxtb	r5, r2
 8002c12:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8002c16:	4303      	orrs	r3, r0
      hi2c->XferSize = hi2c->XferCount;
 8002c18:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002c1a:	604b      	str	r3, [r1, #4]
 8002c1c:	e761      	b.n	8002ae2 <HAL_I2C_Mem_Read+0xee>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c1e:	4642      	mov	r2, r8
 8002c20:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002c22:	4620      	mov	r0, r4
 8002c24:	f7ff fb7e 	bl	8002324 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c28:	b970      	cbnz	r0, 8002c48 <HAL_I2C_Mem_Read+0x254>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c2a:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002c2c:	4d0b      	ldr	r5, [pc, #44]	; (8002c5c <HAL_I2C_Mem_Read+0x268>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c2e:	2120      	movs	r1, #32
 8002c30:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	402a      	ands	r2, r5
 8002c36:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002c38:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002c3c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c40:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002c44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_ERROR;
 8002c48:	2001      	movs	r0, #1
 8002c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c4e:	bf00      	nop
 8002c50:	fc009800 	.word	0xfc009800
 8002c54:	81ff2400 	.word	0x81ff2400
 8002c58:	fc009c00 	.word	0xfc009c00
 8002c5c:	fe00e800 	.word	0xfe00e800

08002c60 <HAL_I2C_Mem_Read_IT>:
{
 8002c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c64:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 8002c68:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c6c:	2c20      	cmp	r4, #32
 8002c6e:	d003      	beq.n	8002c78 <HAL_I2C_Mem_Read_IT+0x18>
    return HAL_BUSY;
 8002c70:	2502      	movs	r5, #2
}
 8002c72:	4628      	mov	r0, r5
 8002c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((pData == NULL) || (Size == 0U))
 8002c78:	9c08      	ldr	r4, [sp, #32]
 8002c7a:	2c00      	cmp	r4, #0
 8002c7c:	f000 8081 	beq.w	8002d82 <HAL_I2C_Mem_Read_IT+0x122>
 8002c80:	2d00      	cmp	r5, #0
 8002c82:	d07e      	beq.n	8002d82 <HAL_I2C_Mem_Read_IT+0x122>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002c84:	6804      	ldr	r4, [r0, #0]
 8002c86:	69a4      	ldr	r4, [r4, #24]
 8002c88:	f414 4a00 	ands.w	sl, r4, #32768	; 0x8000
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_I2C_Mem_Read_IT+0x10>
    __HAL_LOCK(hi2c);
 8002c8e:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8002c92:	2c01      	cmp	r4, #1
 8002c94:	d0ec      	beq.n	8002c70 <HAL_I2C_Mem_Read_IT+0x10>
 8002c96:	4698      	mov	r8, r3
 8002c98:	2301      	movs	r3, #1
 8002c9a:	4604      	mov	r4, r0
 8002c9c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8002ca0:	4617      	mov	r7, r2
 8002ca2:	460e      	mov	r6, r1
    tickstart = HAL_GetTick();
 8002ca4:	f7fe f950 	bl	8000f48 <HAL_GetTick>
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002ca8:	2322      	movs	r3, #34	; 0x22
 8002caa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002cae:	2240      	movs	r2, #64	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cb0:	4b3f      	ldr	r3, [pc, #252]	; (8002db0 <HAL_I2C_Mem_Read_IT+0x150>)
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002cb2:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002cb6:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
 8002cba:	8565      	strh	r5, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cbc:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cbe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8002cc0:	4a3c      	ldr	r2, [pc, #240]	; (8002db4 <HAL_I2C_Mem_Read_IT+0x154>)
    hi2c->pBuffPtr    = pData;
 8002cc2:	9908      	ldr	r1, [sp, #32]
 8002cc4:	6261      	str	r1, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	2bff      	cmp	r3, #255	; 0xff
    tickstart = HAL_GetTick();
 8002cca:	4681      	mov	r9, r0
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8002ccc:	6362      	str	r2, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cce:	d85d      	bhi.n	8002d8c <HAL_I2C_Mem_Read_IT+0x12c>
      hi2c->XferSize = hi2c->XferCount;
 8002cd0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      xfermode = I2C_AUTOEND_MODE;
 8002cd2:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8002cd6:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002cd8:	6821      	ldr	r1, [r4, #0]
 8002cda:	4837      	ldr	r0, [pc, #220]	; (8002db8 <HAL_I2C_Mem_Read_IT+0x158>)
 8002cdc:	684a      	ldr	r2, [r1, #4]
 8002cde:	8523      	strh	r3, [r4, #40]	; 0x28
 8002ce0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8002ce4:	fa5f f388 	uxtb.w	r3, r8
 8002ce8:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 8002cec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cf0:	4002      	ands	r2, r0
 8002cf2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	604b      	str	r3, [r1, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cfa:	464a      	mov	r2, r9
 8002cfc:	2119      	movs	r1, #25
 8002cfe:	4620      	mov	r0, r4
 8002d00:	f7ff fabc 	bl	800227c <I2C_WaitOnTXISFlagUntilTimeout>
 8002d04:	4605      	mov	r5, r0
 8002d06:	2800      	cmp	r0, #0
 8002d08:	d14c      	bne.n	8002da4 <HAL_I2C_Mem_Read_IT+0x144>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d0a:	f1b8 0f01 	cmp.w	r8, #1
 8002d0e:	d009      	beq.n	8002d24 <HAL_I2C_Mem_Read_IT+0xc4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d10:	6823      	ldr	r3, [r4, #0]
 8002d12:	0a3a      	lsrs	r2, r7, #8
 8002d14:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d16:	2119      	movs	r1, #25
 8002d18:	464a      	mov	r2, r9
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	f7ff faae 	bl	800227c <I2C_WaitOnTXISFlagUntilTimeout>
 8002d20:	2800      	cmp	r0, #0
 8002d22:	d13f      	bne.n	8002da4 <HAL_I2C_Mem_Read_IT+0x144>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d24:	6822      	ldr	r2, [r4, #0]
 8002d26:	b2ff      	uxtb	r7, r7
 8002d28:	6297      	str	r7, [r2, #40]	; 0x28
 8002d2a:	e006      	b.n	8002d3a <HAL_I2C_Mem_Read_IT+0xda>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d2c:	f7fe f90c 	bl	8000f48 <HAL_GetTick>
 8002d30:	eba0 0009 	sub.w	r0, r0, r9
 8002d34:	2819      	cmp	r0, #25
 8002d36:	d82d      	bhi.n	8002d94 <HAL_I2C_Mem_Read_IT+0x134>
 8002d38:	6822      	ldr	r2, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d3a:	6997      	ldr	r7, [r2, #24]
 8002d3c:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 8002d40:	d0f4      	beq.n	8002d2c <HAL_I2C_Mem_Read_IT+0xcc>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002d42:	6851      	ldr	r1, [r2, #4]
 8002d44:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8002d48:	481b      	ldr	r0, [pc, #108]	; (8002db8 <HAL_I2C_Mem_Read_IT+0x158>)
 8002d4a:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 8002d4e:	f446 5610 	orr.w	r6, r6, #9216	; 0x2400
 8002d52:	4001      	ands	r1, r0
 8002d54:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002d58:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002d5a:	4e18      	ldr	r6, [pc, #96]	; (8002dbc <HAL_I2C_Mem_Read_IT+0x15c>)
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002d5c:	ea43 030a 	orr.w	r3, r3, sl
 8002d60:	430b      	orrs	r3, r1
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002d62:	42b0      	cmp	r0, r6
    __HAL_UNLOCK(hi2c);
 8002d64:	f04f 0100 	mov.w	r1, #0
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002d68:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hi2c);
 8002d6a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002d6e:	d004      	beq.n	8002d7a <HAL_I2C_Mem_Read_IT+0x11a>
 8002d70:	4913      	ldr	r1, [pc, #76]	; (8002dc0 <HAL_I2C_Mem_Read_IT+0x160>)
 8002d72:	4288      	cmp	r0, r1
 8002d74:	bf14      	ite	ne
 8002d76:	21f4      	movne	r1, #244	; 0xf4
 8002d78:	2100      	moveq	r1, #0
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002d7a:	6813      	ldr	r3, [r2, #0]
 8002d7c:	4319      	orrs	r1, r3
 8002d7e:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 8002d80:	e777      	b.n	8002c72 <HAL_I2C_Mem_Read_IT+0x12>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d86:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8002d88:	2501      	movs	r5, #1
 8002d8a:	e772      	b.n	8002c72 <HAL_I2C_Mem_Read_IT+0x12>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d8c:	23ff      	movs	r3, #255	; 0xff
      xfermode = I2C_RELOAD_MODE;
 8002d8e:	f04f 7a80 	mov.w	sl, #16777216	; 0x1000000
 8002d92:	e7a1      	b.n	8002cd8 <HAL_I2C_Mem_Read_IT+0x78>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d94:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002d96:	2220      	movs	r2, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002d9c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002da4:	2300      	movs	r3, #0
 8002da6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002daa:	2501      	movs	r5, #1
 8002dac:	e761      	b.n	8002c72 <HAL_I2C_Mem_Read_IT+0x12>
 8002dae:	bf00      	nop
 8002db0:	ffff0000 	.word	0xffff0000
 8002db4:	080037e5 	.word	0x080037e5
 8002db8:	fc009800 	.word	0xfc009800
 8002dbc:	08003a21 	.word	0x08003a21
 8002dc0:	080033fd 	.word	0x080033fd

08002dc4 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002dc4:	6803      	ldr	r3, [r0, #0]
{
 8002dc6:	b410      	push	{r4}
  if (hi2c->XferISR != NULL)
 8002dc8:	6b44      	ldr	r4, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002dca:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002dcc:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8002dce:	b11c      	cbz	r4, 8002dd8 <HAL_I2C_EV_IRQHandler+0x14>
    hi2c->XferISR(hi2c, itflags, itsources);
 8002dd0:	4623      	mov	r3, r4
}
 8002dd2:	f85d 4b04 	ldr.w	r4, [sp], #4
    hi2c->XferISR(hi2c, itflags, itsources);
 8002dd6:	4718      	bx	r3
}
 8002dd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop

08002de0 <HAL_I2C_MasterTxCpltCallback>:
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop

08002de4 <HAL_I2C_MasterRxCpltCallback>:
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop

08002de8 <HAL_I2C_SlaveTxCpltCallback>:
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop

08002dec <HAL_I2C_SlaveRxCpltCallback>:
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop

08002df0 <HAL_I2C_AddrCallback>:
{
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop

08002df4 <I2C_ITAddrCplt.isra.8.part.9>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8002df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    transferdirection = I2C_GET_DIR(hi2c);
 8002df6:	6804      	ldr	r4, [r0, #0]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002df8:	68c3      	ldr	r3, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8002dfa:	69a1      	ldr	r1, [r4, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002dfc:	69a2      	ldr	r2, [r4, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002dfe:	68a6      	ldr	r6, [r4, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002e00:	68e7      	ldr	r7, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002e02:	0c12      	lsrs	r2, r2, #16
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e04:	2b02      	cmp	r3, #2
    transferdirection = I2C_GET_DIR(hi2c);
 8002e06:	f3c1 4100 	ubfx	r1, r1, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002e0a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e0e:	d10d      	bne.n	8002e2c <I2C_ITAddrCplt.isra.8.part.9+0x38>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002e10:	f3c6 0609 	ubfx	r6, r6, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8002e14:	ea82 12d6 	eor.w	r2, r2, r6, lsr #7
 8002e18:	f012 0306 	ands.w	r3, r2, #6
 8002e1c:	d110      	bne.n	8002e40 <I2C_ITAddrCplt.isra.8.part.9+0x4c>
        hi2c->AddrEventCount++;
 8002e1e:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8002e20:	3201      	adds	r2, #1
 8002e22:	6482      	str	r2, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002e24:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8002e26:	2a02      	cmp	r2, #2
 8002e28:	d016      	beq.n	8002e58 <I2C_ITAddrCplt.isra.8.part.9+0x64>
 8002e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002e2c:	6823      	ldr	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
 8002e2e:	2600      	movs	r6, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002e30:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
 8002e34:	6023      	str	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
 8002e36:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e3a:	f7ff ffd9 	bl	8002df0 <HAL_I2C_AddrCallback>
 8002e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002e40:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);
 8002e42:	2600      	movs	r6, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002e44:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
 8002e48:	6023      	str	r3, [r4, #0]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e4a:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
        __HAL_UNLOCK(hi2c);
 8002e4e:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e52:	f7ff ffcd 	bl	8002df0 <HAL_I2C_AddrCallback>
 8002e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e58:	2708      	movs	r7, #8
          hi2c->AddrEventCount = 0U;
 8002e5a:	6483      	str	r3, [r0, #72]	; 0x48
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e5c:	4632      	mov	r2, r6
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e5e:	61e7      	str	r7, [r4, #28]
          __HAL_UNLOCK(hi2c);
 8002e60:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e64:	f7ff ffc4 	bl	8002df0 <HAL_I2C_AddrCallback>
 8002e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e6a:	bf00      	nop

08002e6c <HAL_I2C_ListenCpltCallback>:
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop

08002e70 <HAL_I2C_MemTxCpltCallback>:
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop

08002e74 <HAL_I2C_MemRxCpltCallback>:
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop

08002e78 <HAL_I2C_ErrorCallback>:
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop

08002e7c <HAL_I2C_AbortCpltCallback>:
{
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop

08002e80 <I2C_ITError>:
{
 8002e80:	b570      	push	{r4, r5, r6, lr}
 8002e82:	4604      	mov	r4, r0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002e84:	4a40      	ldr	r2, [pc, #256]	; (8002f88 <I2C_ITError+0x108>)
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002e86:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002e90:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002e92:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8002e94:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002e96:	3b28      	subs	r3, #40	; 0x28
  hi2c->ErrorCode |= ErrorCode;
 8002e98:	4311      	orrs	r1, r2
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002e9a:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
 8002e9c:	6461      	str	r1, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002e9e:	d83d      	bhi.n	8002f1c <I2C_ITError+0x9c>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ea0:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ea4:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002ea8:	6823      	ldr	r3, [r4, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002eaa:	4e38      	ldr	r6, [pc, #224]	; (8002f8c <I2C_ITError+0x10c>)
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002eac:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002eae:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8002eb2:	2928      	cmp	r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002eb4:	f005 0528 	and.w	r5, r5, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002eb8:	bf14      	ite	ne
 8002eba:	f06f 01f6 	mvnne.w	r1, #246	; 0xf6
 8002ebe:	f06f 0146 	mvneq.w	r1, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ec2:	2d28      	cmp	r5, #40	; 0x28
 8002ec4:	bf18      	it	ne
 8002ec6:	f06f 01f6 	mvnne.w	r1, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002eca:	400a      	ands	r2, r1
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ecc:	2128      	movs	r1, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002ece:	601a      	str	r2, [r3, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ed0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002ed4:	6366      	str	r6, [r4, #52]	; 0x34
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ed6:	6320      	str	r0, [r4, #48]	; 0x30
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	f412 4280 	ands.w	r2, r2, #16384	; 0x4000
 8002ede:	d00f      	beq.n	8002f00 <I2C_ITError+0x80>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002ee0:	681a      	ldr	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8002ee2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002ee4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ee8:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8002eea:	b140      	cbz	r0, 8002efe <I2C_ITError+0x7e>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002eec:	4b28      	ldr	r3, [pc, #160]	; (8002f90 <I2C_ITError+0x110>)
 8002eee:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002ef6:	f7fe ff8b 	bl	8001e10 <HAL_DMA_Abort_IT>
 8002efa:	2800      	cmp	r0, #0
 8002efc:	d136      	bne.n	8002f6c <I2C_ITError+0xec>
 8002efe:	bd70      	pop	{r4, r5, r6, pc}
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002f00:	6819      	ldr	r1, [r3, #0]
 8002f02:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
 8002f06:	d11d      	bne.n	8002f44 <I2C_ITError+0xc4>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002f08:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002f0c:	2b60      	cmp	r3, #96	; 0x60
 8002f0e:	d032      	beq.n	8002f76 <I2C_ITError+0xf6>
    __HAL_UNLOCK(hi2c);
 8002f10:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002f14:	4620      	mov	r0, r4
 8002f16:	f7ff ffaf 	bl	8002e78 <HAL_I2C_ErrorCallback>
 8002f1a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002f1c:	6823      	ldr	r3, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f1e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f22:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
 8002f2c:	601a      	str	r2, [r3, #0]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002f2e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8002f32:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 8002f34:	bf1c      	itt	ne
 8002f36:	2220      	movne	r2, #32
 8002f38:	f884 2041 	strbne.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002f40:	6362      	str	r2, [r4, #52]	; 0x34
 8002f42:	e7c9      	b.n	8002ed8 <I2C_ITError+0x58>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f44:	6819      	ldr	r1, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8002f46:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f48:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8002f4c:	6019      	str	r1, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8002f4e:	2800      	cmp	r0, #0
 8002f50:	d0d5      	beq.n	8002efe <I2C_ITError+0x7e>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002f52:	4b0f      	ldr	r3, [pc, #60]	; (8002f90 <I2C_ITError+0x110>)
 8002f54:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8002f56:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002f5a:	f7fe ff59 	bl	8001e10 <HAL_DMA_Abort_IT>
 8002f5e:	2800      	cmp	r0, #0
 8002f60:	d0cd      	beq.n	8002efe <I2C_ITError+0x7e>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002f62:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8002f64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002f68:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002f6a:	4718      	bx	r3
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f6c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 8002f6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f72:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002f74:	4718      	bx	r3
    hi2c->State = HAL_I2C_STATE_READY;
 8002f76:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8002f78:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002f7c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8002f80:	4620      	mov	r0, r4
 8002f82:	f7ff ff7b 	bl	8002e7c <HAL_I2C_AbortCpltCallback>
 8002f86:	bd70      	pop	{r4, r5, r6, pc}
 8002f88:	ffff0000 	.word	0xffff0000
 8002f8c:	080030ed 	.word	0x080030ed
 8002f90:	080035bd 	.word	0x080035bd

08002f94 <I2C_ITSlaveCplt>:
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002f94:	6803      	ldr	r3, [r0, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f96:	2220      	movs	r2, #32
{
 8002f98:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002f9a:	681d      	ldr	r5, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f9c:	61da      	str	r2, [r3, #28]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f9e:	2208      	movs	r2, #8
 8002fa0:	61da      	str	r2, [r3, #28]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002fa2:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002fa6:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  I2C_RESET_CR2(hi2c);
 8002faa:	4e4e      	ldr	r6, [pc, #312]	; (80030e4 <I2C_ITSlaveCplt+0x150>)
{
 8002fac:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002fae:	6818      	ldr	r0, [r3, #0]
 8002fb0:	f020 00fe 	bic.w	r0, r0, #254	; 0xfe
 8002fb4:	6018      	str	r0, [r3, #0]
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002fb6:	6858      	ldr	r0, [r3, #4]
 8002fb8:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8002fbc:	6058      	str	r0, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	4032      	ands	r2, r6
 8002fc2:	605a      	str	r2, [r3, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	0792      	lsls	r2, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8002fc8:	bf44      	itt	mi
 8002fca:	2200      	movmi	r2, #0
 8002fcc:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fce:	699a      	ldr	r2, [r3, #24]
 8002fd0:	07d6      	lsls	r6, r2, #31
 8002fd2:	d403      	bmi.n	8002fdc <I2C_ITSlaveCplt+0x48>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002fd4:	699a      	ldr	r2, [r3, #24]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002fdc:	0468      	lsls	r0, r5, #17
 8002fde:	d530      	bpl.n	8003042 <I2C_ITSlaveCplt+0xae>
    if (hi2c->hdmatx != NULL)
 8002fe0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002fe2:	b11a      	cbz	r2, 8002fec <I2C_ITSlaveCplt+0x58>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002fe4:	6812      	ldr	r2, [r2, #0]
 8002fe6:	6852      	ldr	r2, [r2, #4]
 8002fe8:	b292      	uxth	r2, r2
 8002fea:	8562      	strh	r2, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002fec:	f011 0604 	ands.w	r6, r1, #4
 8002ff0:	d007      	beq.n	8003002 <I2C_ITSlaveCplt+0x6e>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ff2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 8002ff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8002ffa:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8003000:	bb7a      	cbnz	r2, 8003062 <I2C_ITSlaveCplt+0xce>
  if (hi2c->XferCount != 0U)
 8003002:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003004:	b29b      	uxth	r3, r3
 8003006:	b11b      	cbz	r3, 8003010 <I2C_ITSlaveCplt+0x7c>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003008:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800300a:	f043 0304 	orr.w	r3, r3, #4
 800300e:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 8003010:	2500      	movs	r5, #0
 8003012:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003014:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003018:	6c63      	ldr	r3, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 800301a:	6365      	str	r5, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800301c:	bb43      	cbnz	r3, 8003070 <I2C_ITSlaveCplt+0xdc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800301e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003020:	4931      	ldr	r1, [pc, #196]	; (80030e8 <I2C_ITSlaveCplt+0x154>)
 8003022:	428a      	cmp	r2, r1
 8003024:	d113      	bne.n	800304e <I2C_ITSlaveCplt+0xba>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003026:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800302a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800302e:	2a22      	cmp	r2, #34	; 0x22
    hi2c->State = HAL_I2C_STATE_READY;
 8003030:	f04f 0220 	mov.w	r2, #32
 8003034:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003038:	4620      	mov	r0, r4
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800303a:	d050      	beq.n	80030de <I2C_ITSlaveCplt+0x14a>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800303c:	f7ff fed4 	bl	8002de8 <HAL_I2C_SlaveTxCpltCallback>
 8003040:	bd70      	pop	{r4, r5, r6, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003042:	042a      	lsls	r2, r5, #16
 8003044:	d5d2      	bpl.n	8002fec <I2C_ITSlaveCplt+0x58>
    if (hi2c->hdmarx != NULL)
 8003046:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003048:	2a00      	cmp	r2, #0
 800304a:	d1cb      	bne.n	8002fe4 <I2C_ITSlaveCplt+0x50>
 800304c:	e7ce      	b.n	8002fec <I2C_ITSlaveCplt+0x58>
    hi2c->State = HAL_I2C_STATE_READY;
 800304e:	2220      	movs	r2, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003050:	62e1      	str	r1, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hi2c);
 8003052:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003056:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    HAL_I2C_ListenCpltCallback(hi2c);
 800305a:	4620      	mov	r0, r4
 800305c:	f7ff ff06 	bl	8002e6c <HAL_I2C_ListenCpltCallback>
 8003060:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->XferCount--;
 8003062:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003064:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8003066:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8003068:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800306a:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800306c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800306e:	e7c8      	b.n	8003002 <I2C_ITSlaveCplt+0x6e>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003070:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003072:	4620      	mov	r0, r4
 8003074:	f7ff ff04 	bl	8002e80 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003078:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800307c:	2b28      	cmp	r3, #40	; 0x28
 800307e:	d1df      	bne.n	8003040 <I2C_ITSlaveCplt+0xac>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003080:	4a19      	ldr	r2, [pc, #100]	; (80030e8 <I2C_ITSlaveCplt+0x154>)
 8003082:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 8003084:	2320      	movs	r3, #32
  hi2c->PreviousState = I2C_STATE_NONE;
 8003086:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->XferISR = NULL;
 8003088:	6365      	str	r5, [r4, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 800308a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800308e:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003092:	b196      	cbz	r6, 80030ba <I2C_ITSlaveCplt+0x126>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003094:	6822      	ldr	r2, [r4, #0]
 8003096:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003098:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800309a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800309c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800309e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 80030a0:	3301      	adds	r3, #1
 80030a2:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80030a4:	b14a      	cbz	r2, 80030ba <I2C_ITSlaveCplt+0x126>
      hi2c->XferCount--;
 80030a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->XferSize--;
 80030b0:	3a01      	subs	r2, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030b2:	f043 0304 	orr.w	r3, r3, #4
      hi2c->XferSize--;
 80030b6:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030b8:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80030ba:	6823      	ldr	r3, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80030bc:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80030c0:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80030c4:	681a      	ldr	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030c6:	2510      	movs	r5, #16
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80030c8:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
  __HAL_UNLOCK(hi2c);
 80030cc:	2100      	movs	r1, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80030ce:	601a      	str	r2, [r3, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 80030d0:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030d2:	61dd      	str	r5, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80030d4:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 80030d8:	f7ff fec8 	bl	8002e6c <HAL_I2C_ListenCpltCallback>
 80030dc:	bd70      	pop	{r4, r5, r6, pc}
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80030de:	f7ff fe85 	bl	8002dec <HAL_I2C_SlaveRxCpltCallback>
 80030e2:	bd70      	pop	{r4, r5, r6, pc}
 80030e4:	fe00e800 	.word	0xfe00e800
 80030e8:	ffff0000 	.word	0xffff0000

080030ec <I2C_Slave_ISR_IT>:
{
 80030ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 80030ee:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 80030f2:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	f000 80d9 	beq.w	80032ac <I2C_Slave_ISR_IT+0x1c0>
 80030fa:	4616      	mov	r6, r2
 80030fc:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80030fe:	06ca      	lsls	r2, r1, #27
 8003100:	4604      	mov	r4, r0
 8003102:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 8003104:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003108:	d448      	bmi.n	800319c <I2C_Slave_ISR_IT+0xb0>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800310a:	0768      	lsls	r0, r5, #29
 800310c:	f140 808d 	bpl.w	800322a <I2C_Slave_ISR_IT+0x13e>
 8003110:	0771      	lsls	r1, r6, #29
 8003112:	f140 808a 	bpl.w	800322a <I2C_Slave_ISR_IT+0x13e>
    if (hi2c->XferCount > 0U)
 8003116:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003118:	b29b      	uxth	r3, r3
 800311a:	b16b      	cbz	r3, 8003138 <I2C_Slave_ISR_IT+0x4c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800311c:	6822      	ldr	r2, [r4, #0]
 800311e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003120:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003122:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8003124:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003126:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003128:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800312a:	3b01      	subs	r3, #1
 800312c:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 800312e:	3101      	adds	r1, #1
      hi2c->XferSize--;
 8003130:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8003132:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003134:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003136:	8522      	strh	r2, [r4, #40]	; 0x28
    if ((hi2c->XferCount == 0U) && \
 8003138:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800313a:	b29b      	uxth	r3, r3
 800313c:	bb2b      	cbnz	r3, 800318a <I2C_Slave_ISR_IT+0x9e>
 800313e:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8003142:	d022      	beq.n	800318a <I2C_Slave_ISR_IT+0x9e>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003144:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003148:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800314c:	2a29      	cmp	r2, #41	; 0x29
 800314e:	f000 8109 	beq.w	8003364 <I2C_Slave_ISR_IT+0x278>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003152:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8003156:	2a2a      	cmp	r2, #42	; 0x2a
 8003158:	d117      	bne.n	800318a <I2C_Slave_ISR_IT+0x9e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800315a:	2128      	movs	r1, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800315c:	2222      	movs	r2, #34	; 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800315e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003162:	6322      	str	r2, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003164:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003168:	6821      	ldr	r1, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800316a:	f002 0228 	and.w	r2, r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800316e:	6808      	ldr	r0, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003170:	2a28      	cmp	r2, #40	; 0x28
 8003172:	bf14      	ite	ne
 8003174:	f06f 02f4 	mvnne.w	r2, #244	; 0xf4
 8003178:	f06f 0244 	mvneq.w	r2, #68	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800317c:	4002      	ands	r2, r0
 800317e:	600a      	str	r2, [r1, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003180:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8003182:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003186:	f7ff fe31 	bl	8002dec <HAL_I2C_SlaveRxCpltCallback>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800318a:	06aa      	lsls	r2, r5, #26
 800318c:	d502      	bpl.n	8003194 <I2C_Slave_ISR_IT+0xa8>
 800318e:	06b3      	lsls	r3, r6, #26
 8003190:	f100 808e 	bmi.w	80032b0 <I2C_Slave_ISR_IT+0x1c4>
  __HAL_UNLOCK(hi2c);
 8003194:	2000      	movs	r0, #0
 8003196:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return HAL_OK;
 800319a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800319c:	06f3      	lsls	r3, r6, #27
 800319e:	d5b4      	bpl.n	800310a <I2C_Slave_ISR_IT+0x1e>
    if (hi2c->XferCount == 0U)
 80031a0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f040 8088 	bne.w	80032ba <I2C_Slave_ISR_IT+0x1ce>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80031aa:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80031ae:	2a28      	cmp	r2, #40	; 0x28
 80031b0:	f000 80a0 	beq.w	80032f4 <I2C_Slave_ISR_IT+0x208>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80031b4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80031b8:	2b29      	cmp	r3, #41	; 0x29
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031ba:	6823      	ldr	r3, [r4, #0]
 80031bc:	f04f 0210 	mov.w	r2, #16
 80031c0:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80031c2:	d1e2      	bne.n	800318a <I2C_Slave_ISR_IT+0x9e>
 80031c4:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 80031c8:	d0df      	beq.n	800318a <I2C_Slave_ISR_IT+0x9e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031ca:	699a      	ldr	r2, [r3, #24]
 80031cc:	0792      	lsls	r2, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 80031ce:	bf44      	itt	mi
 80031d0:	2200      	movmi	r2, #0
 80031d2:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031d4:	699a      	ldr	r2, [r3, #24]
 80031d6:	07d7      	lsls	r7, r2, #31
 80031d8:	d403      	bmi.n	80031e2 <I2C_Slave_ISR_IT+0xf6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80031da:	699a      	ldr	r2, [r3, #24]
 80031dc:	f042 0201 	orr.w	r2, r2, #1
 80031e0:	619a      	str	r2, [r3, #24]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e2:	2200      	movs	r2, #0
 80031e4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80031e8:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 80031ec:	2929      	cmp	r1, #41	; 0x29
 80031ee:	f000 80eb 	beq.w	80033c8 <I2C_Slave_ISR_IT+0x2dc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80031f2:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 80031f6:	292a      	cmp	r1, #42	; 0x2a
 80031f8:	d1c7      	bne.n	800318a <I2C_Slave_ISR_IT+0x9e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80031fa:	2028      	movs	r0, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80031fc:	2122      	movs	r1, #34	; 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80031fe:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003202:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003204:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003208:	6818      	ldr	r0, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800320a:	f001 0128 	and.w	r1, r1, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800320e:	2928      	cmp	r1, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003210:	bf14      	ite	ne
 8003212:	f06f 01f4 	mvnne.w	r1, #244	; 0xf4
 8003216:	f06f 0144 	mvneq.w	r1, #68	; 0x44
 800321a:	4001      	ands	r1, r0
 800321c:	6019      	str	r1, [r3, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800321e:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8003220:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003224:	f7ff fde2 	bl	8002dec <HAL_I2C_SlaveRxCpltCallback>
 8003228:	e7af      	b.n	800318a <I2C_Slave_ISR_IT+0x9e>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800322a:	072a      	lsls	r2, r5, #28
 800322c:	d50f      	bpl.n	800324e <I2C_Slave_ISR_IT+0x162>
 800322e:	0733      	lsls	r3, r6, #28
 8003230:	d50d      	bpl.n	800324e <I2C_Slave_ISR_IT+0x162>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003232:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003236:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800323a:	2b28      	cmp	r3, #40	; 0x28
 800323c:	f000 808e 	beq.w	800335c <I2C_Slave_ISR_IT+0x270>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003240:	6822      	ldr	r2, [r4, #0]
 8003242:	2108      	movs	r1, #8
    __HAL_UNLOCK(hi2c);
 8003244:	2300      	movs	r3, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003246:	61d1      	str	r1, [r2, #28]
    __HAL_UNLOCK(hi2c);
 8003248:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800324c:	e79d      	b.n	800318a <I2C_Slave_ISR_IT+0x9e>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800324e:	07a8      	lsls	r0, r5, #30
 8003250:	d59b      	bpl.n	800318a <I2C_Slave_ISR_IT+0x9e>
 8003252:	07b1      	lsls	r1, r6, #30
 8003254:	d599      	bpl.n	800318a <I2C_Slave_ISR_IT+0x9e>
    if (hi2c->XferCount > 0U)
 8003256:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003258:	b29b      	uxth	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d13c      	bne.n	80032d8 <I2C_Slave_ISR_IT+0x1ec>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800325e:	f037 7780 	bics.w	r7, r7, #16777216	; 0x1000000
 8003262:	d192      	bne.n	800318a <I2C_Slave_ISR_IT+0x9e>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003264:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003268:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800326c:	2b29      	cmp	r3, #41	; 0x29
 800326e:	f000 8092 	beq.w	8003396 <I2C_Slave_ISR_IT+0x2aa>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003272:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003276:	2b2a      	cmp	r3, #42	; 0x2a
 8003278:	d187      	bne.n	800318a <I2C_Slave_ISR_IT+0x9e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800327a:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800327c:	2322      	movs	r3, #34	; 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800327e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003282:	6323      	str	r3, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003284:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003288:	6822      	ldr	r2, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800328a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800328e:	2b28      	cmp	r3, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003290:	6811      	ldr	r1, [r2, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003292:	bf14      	ite	ne
 8003294:	f06f 03f4 	mvnne.w	r3, #244	; 0xf4
 8003298:	f06f 0344 	mvneq.w	r3, #68	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800329c:	400b      	ands	r3, r1
 800329e:	6013      	str	r3, [r2, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80032a0:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80032a2:	f884 7040 	strb.w	r7, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80032a6:	f7ff fda1 	bl	8002dec <HAL_I2C_SlaveRxCpltCallback>
 80032aa:	e76e      	b.n	800318a <I2C_Slave_ISR_IT+0x9e>
  __HAL_LOCK(hi2c);
 80032ac:	2002      	movs	r0, #2
}
 80032ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80032b0:	4629      	mov	r1, r5
 80032b2:	4620      	mov	r0, r4
 80032b4:	f7ff fe6e 	bl	8002f94 <I2C_ITSlaveCplt>
 80032b8:	e76c      	b.n	8003194 <I2C_Slave_ISR_IT+0xa8>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ba:	6803      	ldr	r3, [r0, #0]
 80032bc:	2210      	movs	r2, #16
 80032be:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032c0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80032c2:	f043 0304 	orr.w	r3, r3, #4
 80032c6:	6443      	str	r3, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80032c8:	f037 7380 	bics.w	r3, r7, #16777216	; 0x1000000
 80032cc:	f47f af5d 	bne.w	800318a <I2C_Slave_ISR_IT+0x9e>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80032d0:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80032d2:	f7ff fdd5 	bl	8002e80 <I2C_ITError>
 80032d6:	e758      	b.n	800318a <I2C_Slave_ISR_IT+0x9e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80032da:	6823      	ldr	r3, [r4, #0]
 80032dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80032e0:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80032e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80032e4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80032e6:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80032e8:	3b01      	subs	r3, #1
 80032ea:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80032ec:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80032ee:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80032f0:	8522      	strh	r2, [r4, #40]	; 0x28
 80032f2:	e74a      	b.n	800318a <I2C_Slave_ISR_IT+0x9e>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80032f4:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 80032f8:	f47f af5c 	bne.w	80031b4 <I2C_Slave_ISR_IT+0xc8>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032fc:	493e      	ldr	r1, [pc, #248]	; (80033f8 <I2C_Slave_ISR_IT+0x30c>)
 80032fe:	62c1      	str	r1, [r0, #44]	; 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 8003300:	2220      	movs	r2, #32
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003302:	0769      	lsls	r1, r5, #29
  hi2c->PreviousState = I2C_STATE_NONE;
 8003304:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR = NULL;
 8003306:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 8003308:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800330c:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003310:	d512      	bpl.n	8003338 <I2C_Slave_ISR_IT+0x24c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003312:	6802      	ldr	r2, [r0, #0]
 8003314:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003316:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003318:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800331a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800331c:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    hi2c->pBuffPtr++;
 800331e:	3301      	adds	r3, #1
 8003320:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8003322:	b14a      	cbz	r2, 8003338 <I2C_Slave_ISR_IT+0x24c>
      hi2c->XferCount--;
 8003324:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003326:	3b01      	subs	r3, #1
 8003328:	b29b      	uxth	r3, r3
 800332a:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800332c:	6c43      	ldr	r3, [r0, #68]	; 0x44
      hi2c->XferSize--;
 800332e:	3a01      	subs	r2, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003330:	f043 0304 	orr.w	r3, r3, #4
      hi2c->XferSize--;
 8003334:	8502      	strh	r2, [r0, #40]	; 0x28
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003336:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003338:	6823      	ldr	r3, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800333a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800333e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003342:	681a      	ldr	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003344:	2710      	movs	r7, #16
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003346:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
  __HAL_UNLOCK(hi2c);
 800334a:	2100      	movs	r1, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800334c:	601a      	str	r2, [r3, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 800334e:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003350:	61df      	str	r7, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8003352:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8003356:	f7ff fd89 	bl	8002e6c <HAL_I2C_ListenCpltCallback>
 800335a:	e716      	b.n	800318a <I2C_Slave_ISR_IT+0x9e>
 800335c:	4620      	mov	r0, r4
 800335e:	f7ff fd49 	bl	8002df4 <I2C_ITAddrCplt.isra.8.part.9>
 8003362:	e712      	b.n	800318a <I2C_Slave_ISR_IT+0x9e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003364:	2128      	movs	r1, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003366:	2221      	movs	r2, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003368:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800336c:	6322      	str	r2, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800336e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003372:	6821      	ldr	r1, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003374:	f002 0228 	and.w	r2, r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003378:	6808      	ldr	r0, [r1, #0]
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800337a:	2a28      	cmp	r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800337c:	bf14      	ite	ne
 800337e:	f06f 02f2 	mvnne.w	r2, #242	; 0xf2
 8003382:	f06f 0242 	mvneq.w	r2, #66	; 0x42
 8003386:	4002      	ands	r2, r0
 8003388:	600a      	str	r2, [r1, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800338a:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 800338c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003390:	f7ff fd2a 	bl	8002de8 <HAL_I2C_SlaveTxCpltCallback>
 8003394:	e6f9      	b.n	800318a <I2C_Slave_ISR_IT+0x9e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003396:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003398:	2321      	movs	r3, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800339a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800339e:	6323      	str	r3, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80033a0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80033a4:	6822      	ldr	r2, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80033a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80033aa:	2b28      	cmp	r3, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80033ac:	6811      	ldr	r1, [r2, #0]
 80033ae:	bf14      	ite	ne
 80033b0:	f06f 03f2 	mvnne.w	r3, #242	; 0xf2
 80033b4:	f06f 0342 	mvneq.w	r3, #66	; 0x42
 80033b8:	400b      	ands	r3, r1
 80033ba:	6013      	str	r3, [r2, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80033bc:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80033be:	f884 7040 	strb.w	r7, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80033c2:	f7ff fd11 	bl	8002de8 <HAL_I2C_SlaveTxCpltCallback>
 80033c6:	e6e0      	b.n	800318a <I2C_Slave_ISR_IT+0x9e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80033c8:	2028      	movs	r0, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80033ca:	2121      	movs	r1, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80033cc:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80033d0:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80033d2:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80033d6:	6818      	ldr	r0, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80033d8:	f001 0128 	and.w	r1, r1, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80033dc:	2928      	cmp	r1, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80033de:	bf14      	ite	ne
 80033e0:	f06f 01f2 	mvnne.w	r1, #242	; 0xf2
 80033e4:	f06f 0142 	mvneq.w	r1, #66	; 0x42
 80033e8:	4001      	ands	r1, r0
 80033ea:	6019      	str	r1, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80033ec:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80033ee:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80033f2:	f7ff fcf9 	bl	8002de8 <HAL_I2C_SlaveTxCpltCallback>
 80033f6:	e6c8      	b.n	800318a <I2C_Slave_ISR_IT+0x9e>
 80033f8:	ffff0000 	.word	0xffff0000

080033fc <I2C_Slave_ISR_DMA>:
{
 80033fc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hi2c);
 80033fe:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 8003402:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8003404:	2b01      	cmp	r3, #1
 8003406:	d06c      	beq.n	80034e2 <I2C_Slave_ISR_DMA+0xe6>
 8003408:	2301      	movs	r3, #1
 800340a:	4604      	mov	r4, r0
 800340c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003410:	06c8      	lsls	r0, r1, #27
 8003412:	d410      	bmi.n	8003436 <I2C_Slave_ISR_DMA+0x3a>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003414:	070b      	lsls	r3, r1, #28
 8003416:	d55c      	bpl.n	80034d2 <I2C_Slave_ISR_DMA+0xd6>
 8003418:	0715      	lsls	r5, r2, #28
 800341a:	d55a      	bpl.n	80034d2 <I2C_Slave_ISR_DMA+0xd6>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800341c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003420:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003424:	2b28      	cmp	r3, #40	; 0x28
 8003426:	d077      	beq.n	8003518 <I2C_Slave_ISR_DMA+0x11c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003428:	6823      	ldr	r3, [r4, #0]
 800342a:	2208      	movs	r2, #8
 800342c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800342e:	2000      	movs	r0, #0
 8003430:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8003434:	bd38      	pop	{r3, r4, r5, pc}
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003436:	06d3      	lsls	r3, r2, #27
 8003438:	d5ec      	bpl.n	8003414 <I2C_Slave_ISR_DMA+0x18>
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800343a:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 800343e:	d052      	beq.n	80034e6 <I2C_Slave_ISR_DMA+0xea>
      if (hi2c->hdmarx != NULL)
 8003440:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003442:	2b00      	cmp	r3, #0
 8003444:	d053      	beq.n	80034ee <I2C_Slave_ISR_DMA+0xf2>
        if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d14f      	bne.n	80034ee <I2C_Slave_ISR_DMA+0xf2>
      if (hi2c->hdmatx != NULL)
 800344e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003450:	b10b      	cbz	r3, 8003456 <I2C_Slave_ISR_DMA+0x5a>
        if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003456:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800345a:	2b28      	cmp	r3, #40	; 0x28
 800345c:	d060      	beq.n	8003520 <I2C_Slave_ISR_DMA+0x124>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800345e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003462:	2b29      	cmp	r3, #41	; 0x29
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003464:	6823      	ldr	r3, [r4, #0]
 8003466:	f04f 0210 	mov.w	r2, #16
 800346a:	61da      	str	r2, [r3, #28]
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800346c:	d1df      	bne.n	800342e <I2C_Slave_ISR_DMA+0x32>
 800346e:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 8003472:	d0dc      	beq.n	800342e <I2C_Slave_ISR_DMA+0x32>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003474:	699a      	ldr	r2, [r3, #24]
 8003476:	0791      	lsls	r1, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8003478:	bf44      	itt	mi
 800347a:	2200      	movmi	r2, #0
 800347c:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800347e:	699a      	ldr	r2, [r3, #24]
 8003480:	07d2      	lsls	r2, r2, #31
 8003482:	d403      	bmi.n	800348c <I2C_Slave_ISR_DMA+0x90>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003484:	699a      	ldr	r2, [r3, #24]
 8003486:	f042 0201 	orr.w	r2, r2, #1
 800348a:	619a      	str	r2, [r3, #24]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800348c:	2200      	movs	r2, #0
 800348e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003492:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8003496:	2929      	cmp	r1, #41	; 0x29
 8003498:	d076      	beq.n	8003588 <I2C_Slave_ISR_DMA+0x18c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800349a:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 800349e:	292a      	cmp	r1, #42	; 0x2a
 80034a0:	d1c5      	bne.n	800342e <I2C_Slave_ISR_DMA+0x32>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80034a2:	2028      	movs	r0, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80034a4:	2122      	movs	r1, #34	; 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80034a6:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80034aa:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80034ac:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80034b0:	6818      	ldr	r0, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80034b2:	f001 0128 	and.w	r1, r1, #40	; 0x28
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80034b6:	2928      	cmp	r1, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80034b8:	bf14      	ite	ne
 80034ba:	f06f 01f4 	mvnne.w	r1, #244	; 0xf4
 80034be:	f06f 0144 	mvneq.w	r1, #68	; 0x44
 80034c2:	4001      	ands	r1, r0
 80034c4:	6019      	str	r1, [r3, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80034c6:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80034c8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80034cc:	f7ff fc8e 	bl	8002dec <HAL_I2C_SlaveRxCpltCallback>
 80034d0:	e7ad      	b.n	800342e <I2C_Slave_ISR_DMA+0x32>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80034d2:	0688      	lsls	r0, r1, #26
 80034d4:	d5ab      	bpl.n	800342e <I2C_Slave_ISR_DMA+0x32>
 80034d6:	0693      	lsls	r3, r2, #26
 80034d8:	d5a9      	bpl.n	800342e <I2C_Slave_ISR_DMA+0x32>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80034da:	4620      	mov	r0, r4
 80034dc:	f7ff fd5a 	bl	8002f94 <I2C_ITSlaveCplt>
 80034e0:	e7a5      	b.n	800342e <I2C_Slave_ISR_DMA+0x32>
  __HAL_LOCK(hi2c);
 80034e2:	2002      	movs	r0, #2
 80034e4:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034e6:	6823      	ldr	r3, [r4, #0]
 80034e8:	2210      	movs	r2, #16
 80034ea:	61da      	str	r2, [r3, #28]
 80034ec:	e79f      	b.n	800342e <I2C_Slave_ISR_DMA+0x32>
      if (hi2c->hdmatx != NULL)
 80034ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80034f0:	b11b      	cbz	r3, 80034fa <I2C_Slave_ISR_DMA+0xfe>
        if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0ad      	beq.n	8003456 <I2C_Slave_ISR_DMA+0x5a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034fa:	6823      	ldr	r3, [r4, #0]
 80034fc:	2210      	movs	r2, #16
 80034fe:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003500:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003502:	f043 0304 	orr.w	r3, r3, #4
 8003506:	6463      	str	r3, [r4, #68]	; 0x44
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003508:	f035 7380 	bics.w	r3, r5, #16777216	; 0x1000000
 800350c:	d18f      	bne.n	800342e <I2C_Slave_ISR_DMA+0x32>
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800350e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003510:	4620      	mov	r0, r4
 8003512:	f7ff fcb5 	bl	8002e80 <I2C_ITError>
 8003516:	e78a      	b.n	800342e <I2C_Slave_ISR_DMA+0x32>
 8003518:	4620      	mov	r0, r4
 800351a:	f7ff fc6b 	bl	8002df4 <I2C_ITAddrCplt.isra.8.part.9>
 800351e:	e786      	b.n	800342e <I2C_Slave_ISR_DMA+0x32>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003520:	f1b5 7f00 	cmp.w	r5, #33554432	; 0x2000000
 8003524:	d19b      	bne.n	800345e <I2C_Slave_ISR_DMA+0x62>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003526:	4b24      	ldr	r3, [pc, #144]	; (80035b8 <I2C_Slave_ISR_DMA+0x1bc>)
 8003528:	62e3      	str	r3, [r4, #44]	; 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 800352a:	2220      	movs	r2, #32
  hi2c->PreviousState = I2C_STATE_NONE;
 800352c:	2300      	movs	r3, #0
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800352e:	0748      	lsls	r0, r1, #29
  hi2c->PreviousState = I2C_STATE_NONE;
 8003530:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->XferISR = NULL;
 8003532:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 8003534:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003538:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800353c:	d512      	bpl.n	8003564 <I2C_Slave_ISR_DMA+0x168>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800353e:	6822      	ldr	r2, [r4, #0]
 8003540:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003542:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003544:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003546:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8003548:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 800354a:	3301      	adds	r3, #1
 800354c:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800354e:	b14a      	cbz	r2, 8003564 <I2C_Slave_ISR_DMA+0x168>
      hi2c->XferCount--;
 8003550:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003552:	3b01      	subs	r3, #1
 8003554:	b29b      	uxth	r3, r3
 8003556:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003558:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->XferSize--;
 800355a:	3a01      	subs	r2, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800355c:	f043 0304 	orr.w	r3, r3, #4
      hi2c->XferSize--;
 8003560:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003562:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003564:	6823      	ldr	r3, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003566:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800356a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800356e:	681a      	ldr	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003570:	2510      	movs	r5, #16
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003572:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
  __HAL_UNLOCK(hi2c);
 8003576:	2100      	movs	r1, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003578:	601a      	str	r2, [r3, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 800357a:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800357c:	61dd      	str	r5, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800357e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8003582:	f7ff fc73 	bl	8002e6c <HAL_I2C_ListenCpltCallback>
 8003586:	e752      	b.n	800342e <I2C_Slave_ISR_DMA+0x32>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003588:	2028      	movs	r0, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800358a:	2121      	movs	r1, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800358c:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003590:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003592:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003596:	6818      	ldr	r0, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003598:	f001 0128 	and.w	r1, r1, #40	; 0x28
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800359c:	2928      	cmp	r1, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800359e:	bf14      	ite	ne
 80035a0:	f06f 01f2 	mvnne.w	r1, #242	; 0xf2
 80035a4:	f06f 0142 	mvneq.w	r1, #66	; 0x42
 80035a8:	4001      	ands	r1, r0
 80035aa:	6019      	str	r1, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80035ac:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80035ae:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80035b2:	f7ff fc19 	bl	8002de8 <HAL_I2C_SlaveTxCpltCallback>
 80035b6:	e73a      	b.n	800342e <I2C_Slave_ISR_DMA+0x32>
 80035b8:	ffff0000 	.word	0xffff0000

080035bc <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80035bc:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80035be:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  hi2c->hdmarx->XferAbortCallback = NULL;
 80035c2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
{
 80035c4:	b510      	push	{r4, lr}
  hi2c->hdmatx->XferAbortCallback = NULL;
 80035c6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80035c8:	2300      	movs	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80035ca:	2a60      	cmp	r2, #96	; 0x60
  hi2c->hdmatx->XferAbortCallback = NULL;
 80035cc:	63a3      	str	r3, [r4, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 80035ce:	638b      	str	r3, [r1, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80035d0:	d002      	beq.n	80035d8 <I2C_DMAAbort+0x1c>
    HAL_I2C_ErrorCallback(hi2c);
 80035d2:	f7ff fc51 	bl	8002e78 <HAL_I2C_ErrorCallback>
 80035d6:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80035d8:	2320      	movs	r3, #32
 80035da:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 80035de:	f7ff fc4d 	bl	8002e7c <HAL_I2C_AbortCpltCallback>
 80035e2:	bd10      	pop	{r4, pc}

080035e4 <I2C_ITMasterCplt>:
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035e4:	6803      	ldr	r3, [r0, #0]
 80035e6:	2220      	movs	r2, #32
{
 80035e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035ec:	61da      	str	r2, [r3, #28]
  I2C_RESET_CR2(hi2c);
 80035ee:	685a      	ldr	r2, [r3, #4]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80035f0:	4d78      	ldr	r5, [pc, #480]	; (80037d4 <I2C_ITMasterCplt+0x1f0>)
{
 80035f2:	4604      	mov	r4, r0
  I2C_RESET_CR2(hi2c);
 80035f4:	4878      	ldr	r0, [pc, #480]	; (80037d8 <I2C_ITMasterCplt+0x1f4>)
 80035f6:	4002      	ands	r2, r0
  hi2c->PreviousState = I2C_STATE_NONE;
 80035f8:	2000      	movs	r0, #0
  I2C_RESET_CR2(hi2c);
 80035fa:	605a      	str	r2, [r3, #4]
  hi2c->PreviousState = I2C_STATE_NONE;
 80035fc:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->XferISR       = NULL;
 80035fe:	6360      	str	r0, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 8003600:	06c8      	lsls	r0, r1, #27
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003602:	62e5      	str	r5, [r4, #44]	; 0x2c
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 8003604:	d505      	bpl.n	8003612 <I2C_ITMasterCplt+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003606:	2210      	movs	r2, #16
 8003608:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800360a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800360c:	f042 0204 	orr.w	r2, r2, #4
 8003610:	6462      	str	r2, [r4, #68]	; 0x44
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003612:	699a      	ldr	r2, [r3, #24]
 8003614:	0791      	lsls	r1, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8003616:	bf44      	itt	mi
 8003618:	2200      	movmi	r2, #0
 800361a:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800361c:	699a      	ldr	r2, [r3, #24]
 800361e:	07d2      	lsls	r2, r2, #31
 8003620:	d403      	bmi.n	800362a <I2C_ITMasterCplt+0x46>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003622:	699a      	ldr	r2, [r3, #24]
 8003624:	f042 0201 	orr.w	r2, r2, #1
 8003628:	619a      	str	r2, [r3, #24]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800362a:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800362e:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003632:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003634:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8003638:	2928      	cmp	r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800363a:	f000 0028 	and.w	r0, r0, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800363e:	bf14      	ite	ne
 8003640:	f06f 01f6 	mvnne.w	r1, #246	; 0xf6
 8003644:	f06f 0146 	mvneq.w	r1, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003648:	2828      	cmp	r0, #40	; 0x28
 800364a:	bf18      	it	ne
 800364c:	f06f 01f6 	mvnne.w	r1, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003650:	400a      	ands	r2, r1
 8003652:	601a      	str	r2, [r3, #0]
  tmperror = hi2c->ErrorCode;
 8003654:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003656:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 800365a:	2960      	cmp	r1, #96	; 0x60
 800365c:	d00b      	beq.n	8003676 <I2C_ITMasterCplt+0x92>
 800365e:	b952      	cbnz	r2, 8003676 <I2C_ITMasterCplt+0x92>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003660:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003664:	2b21      	cmp	r3, #33	; 0x21
 8003666:	d077      	beq.n	8003758 <I2C_ITMasterCplt+0x174>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003668:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800366c:	2b22      	cmp	r3, #34	; 0x22
 800366e:	f000 808e 	beq.w	800378e <I2C_ITMasterCplt+0x1aa>
 8003672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003676:	2000      	movs	r0, #0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003678:	4d56      	ldr	r5, [pc, #344]	; (80037d4 <I2C_ITMasterCplt+0x1f0>)
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800367a:	6c61      	ldr	r1, [r4, #68]	; 0x44
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800367c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003680:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003684:	62e5      	str	r5, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003686:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8003688:	6c65      	ldr	r5, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800368a:	3a28      	subs	r2, #40	; 0x28
  hi2c->ErrorCode |= ErrorCode;
 800368c:	4329      	orrs	r1, r5
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800368e:	2a02      	cmp	r2, #2
  hi2c->ErrorCode |= ErrorCode;
 8003690:	6461      	str	r1, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003692:	d833      	bhi.n	80036fc <I2C_ITMasterCplt+0x118>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003694:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003698:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800369c:	681f      	ldr	r7, [r3, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800369e:	4e4f      	ldr	r6, [pc, #316]	; (80037dc <I2C_ITMasterCplt+0x1f8>)
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80036a0:	f005 0528 	and.w	r5, r5, #40	; 0x28
 80036a4:	2d28      	cmp	r5, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80036a6:	f001 0128 	and.w	r1, r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80036aa:	bf14      	ite	ne
 80036ac:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
 80036b0:	f06f 0246 	mvneq.w	r2, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80036b4:	2928      	cmp	r1, #40	; 0x28
 80036b6:	bf18      	it	ne
 80036b8:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80036bc:	403a      	ands	r2, r7
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80036be:	2128      	movs	r1, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80036c0:	601a      	str	r2, [r3, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80036c2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80036c6:	6320      	str	r0, [r4, #48]	; 0x30
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80036c8:	681a      	ldr	r2, [r3, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80036ca:	6366      	str	r6, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80036cc:	f412 4280 	ands.w	r2, r2, #16384	; 0x4000
 80036d0:	d02a      	beq.n	8003728 <I2C_ITMasterCplt+0x144>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80036d2:	681a      	ldr	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 80036d4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80036d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036da:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 80036dc:	2800      	cmp	r0, #0
 80036de:	d0c8      	beq.n	8003672 <I2C_ITMasterCplt+0x8e>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80036e0:	4b3f      	ldr	r3, [pc, #252]	; (80037e0 <I2C_ITMasterCplt+0x1fc>)
 80036e2:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 80036e4:	2300      	movs	r3, #0
 80036e6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80036ea:	f7fe fb91 	bl	8001e10 <HAL_DMA_Abort_IT>
 80036ee:	2800      	cmp	r0, #0
 80036f0:	d0bf      	beq.n	8003672 <I2C_ITMasterCplt+0x8e>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80036f2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 80036f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80036f8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80036fa:	4718      	bx	r3
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80036fc:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003700:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
 800370a:	601a      	str	r2, [r3, #0]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800370c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8003710:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 8003712:	bf1c      	itt	ne
 8003714:	2220      	movne	r2, #32
 8003716:	f884 2041 	strbne.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800371a:	2200      	movs	r2, #0
 800371c:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800371e:	6362      	str	r2, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	f412 4280 	ands.w	r2, r2, #16384	; 0x4000
 8003726:	d1d4      	bne.n	80036d2 <I2C_ITMasterCplt+0xee>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003728:	6819      	ldr	r1, [r3, #0]
 800372a:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
 800372e:	d023      	beq.n	8003778 <I2C_ITMasterCplt+0x194>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003730:	6819      	ldr	r1, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8003732:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003734:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8003738:	6019      	str	r1, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800373a:	2800      	cmp	r0, #0
 800373c:	d099      	beq.n	8003672 <I2C_ITMasterCplt+0x8e>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800373e:	4b28      	ldr	r3, [pc, #160]	; (80037e0 <I2C_ITMasterCplt+0x1fc>)
 8003740:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8003742:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003746:	f7fe fb63 	bl	8001e10 <HAL_DMA_Abort_IT>
 800374a:	2800      	cmp	r0, #0
 800374c:	d091      	beq.n	8003672 <I2C_ITMasterCplt+0x8e>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800374e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8003750:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003754:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003756:	4718      	bx	r3
    hi2c->State = HAL_I2C_STATE_READY;
 8003758:	2320      	movs	r3, #32
 800375a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800375e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003762:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003766:	2b40      	cmp	r3, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003768:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      HAL_I2C_MemTxCpltCallback(hi2c);
 800376c:	4620      	mov	r0, r4
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800376e:	d01e      	beq.n	80037ae <I2C_ITMasterCplt+0x1ca>
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003770:	f7ff fb36 	bl	8002de0 <HAL_I2C_MasterTxCpltCallback>
 8003774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003778:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800377c:	2b60      	cmp	r3, #96	; 0x60
 800377e:	d01e      	beq.n	80037be <I2C_ITMasterCplt+0x1da>
    __HAL_UNLOCK(hi2c);
 8003780:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003784:	4620      	mov	r0, r4
 8003786:	f7ff fb77 	bl	8002e78 <HAL_I2C_ErrorCallback>
 800378a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800378e:	2320      	movs	r3, #32
 8003790:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003794:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003798:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800379c:	2b40      	cmp	r3, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800379e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      HAL_I2C_MemRxCpltCallback(hi2c);
 80037a2:	4620      	mov	r0, r4
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037a4:	d007      	beq.n	80037b6 <I2C_ITMasterCplt+0x1d2>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80037a6:	f7ff fb1d 	bl	8002de4 <HAL_I2C_MasterRxCpltCallback>
 80037aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      HAL_I2C_MemTxCpltCallback(hi2c);
 80037ae:	f7ff fb5f 	bl	8002e70 <HAL_I2C_MemTxCpltCallback>
 80037b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      HAL_I2C_MemRxCpltCallback(hi2c);
 80037b6:	f7ff fb5d 	bl	8002e74 <HAL_I2C_MemRxCpltCallback>
 80037ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80037be:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 80037c0:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80037c4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 80037c8:	4620      	mov	r0, r4
 80037ca:	f7ff fb57 	bl	8002e7c <HAL_I2C_AbortCpltCallback>
 80037ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037d2:	bf00      	nop
 80037d4:	ffff0000 	.word	0xffff0000
 80037d8:	fe00e800 	.word	0xfe00e800
 80037dc:	080030ed 	.word	0x080030ed
 80037e0:	080035bd 	.word	0x080035bd

080037e4 <I2C_Master_ISR_IT>:
{
 80037e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 80037e6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d068      	beq.n	80038c0 <I2C_Master_ISR_IT+0xdc>
 80037ee:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80037f0:	06cf      	lsls	r7, r1, #27
 80037f2:	4616      	mov	r6, r2
 80037f4:	460d      	mov	r5, r1
 80037f6:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 80037f8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80037fc:	d412      	bmi.n	8003824 <I2C_Master_ISR_IT+0x40>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80037fe:	076f      	lsls	r7, r5, #29
 8003800:	d526      	bpl.n	8003850 <I2C_Master_ISR_IT+0x6c>
 8003802:	0770      	lsls	r0, r6, #29
 8003804:	d524      	bpl.n	8003850 <I2C_Master_ISR_IT+0x6c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003806:	6822      	ldr	r2, [r4, #0]
 8003808:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800380a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800380c:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 800380e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003810:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hi2c->XferSize--;
 8003812:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->XferCount--;
 8003814:	3b01      	subs	r3, #1
 8003816:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8003818:	3101      	adds	r1, #1
    hi2c->XferSize--;
 800381a:	3a01      	subs	r2, #1
    hi2c->XferCount--;
 800381c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 800381e:	6261      	str	r1, [r4, #36]	; 0x24
    hi2c->XferSize--;
 8003820:	8522      	strh	r2, [r4, #40]	; 0x28
 8003822:	e026      	b.n	8003872 <I2C_Master_ISR_IT+0x8e>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003824:	06d0      	lsls	r0, r2, #27
 8003826:	d5ea      	bpl.n	80037fe <I2C_Master_ISR_IT+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003828:	6823      	ldr	r3, [r4, #0]
 800382a:	2210      	movs	r2, #16
 800382c:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800382e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003830:	f042 0204 	orr.w	r2, r2, #4
 8003834:	6462      	str	r2, [r4, #68]	; 0x44
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003836:	699a      	ldr	r2, [r3, #24]
 8003838:	0791      	lsls	r1, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 800383a:	bf44      	itt	mi
 800383c:	2200      	movmi	r2, #0
 800383e:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003840:	699a      	ldr	r2, [r3, #24]
 8003842:	07d2      	lsls	r2, r2, #31
 8003844:	d415      	bmi.n	8003872 <I2C_Master_ISR_IT+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003846:	699a      	ldr	r2, [r3, #24]
 8003848:	f042 0201 	orr.w	r2, r2, #1
 800384c:	619a      	str	r2, [r3, #24]
 800384e:	e010      	b.n	8003872 <I2C_Master_ISR_IT+0x8e>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003850:	07a9      	lsls	r1, r5, #30
 8003852:	d516      	bpl.n	8003882 <I2C_Master_ISR_IT+0x9e>
 8003854:	07b2      	lsls	r2, r6, #30
 8003856:	d514      	bpl.n	8003882 <I2C_Master_ISR_IT+0x9e>
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003858:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800385a:	6823      	ldr	r3, [r4, #0]
 800385c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003860:	629a      	str	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8003862:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize--;
 8003864:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 8003866:	6261      	str	r1, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003868:	3b01      	subs	r3, #1
 800386a:	b29b      	uxth	r3, r3
    hi2c->XferSize--;
 800386c:	3a01      	subs	r2, #1
    hi2c->XferCount--;
 800386e:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize--;
 8003870:	8522      	strh	r2, [r4, #40]	; 0x28
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003872:	06aa      	lsls	r2, r5, #26
 8003874:	d501      	bpl.n	800387a <I2C_Master_ISR_IT+0x96>
 8003876:	06b3      	lsls	r3, r6, #26
 8003878:	d43a      	bmi.n	80038f0 <I2C_Master_ISR_IT+0x10c>
  __HAL_UNLOCK(hi2c);
 800387a:	2000      	movs	r0, #0
 800387c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
 8003880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003882:	062b      	lsls	r3, r5, #24
 8003884:	d51e      	bpl.n	80038c4 <I2C_Master_ISR_IT+0xe0>
 8003886:	0677      	lsls	r7, r6, #25
 8003888:	d5f3      	bpl.n	8003872 <I2C_Master_ISR_IT+0x8e>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800388a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800388c:	b29b      	uxth	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d033      	beq.n	80038fa <I2C_Master_ISR_IT+0x116>
 8003892:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003894:	2b00      	cmp	r3, #0
 8003896:	d130      	bne.n	80038fa <I2C_Master_ISR_IT+0x116>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003898:	6822      	ldr	r2, [r4, #0]
 800389a:	6851      	ldr	r1, [r2, #4]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800389c:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800389e:	b280      	uxth	r0, r0
 80038a0:	28ff      	cmp	r0, #255	; 0xff
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80038a2:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038a6:	d972      	bls.n	800398e <I2C_Master_ISR_IT+0x1aa>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80038a8:	6853      	ldr	r3, [r2, #4]
 80038aa:	485c      	ldr	r0, [pc, #368]	; (8003a1c <I2C_Master_ISR_IT+0x238>)
 80038ac:	4003      	ands	r3, r0
 80038ae:	f043 73ff 	orr.w	r3, r3, #33423360	; 0x1fe0000
 80038b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b6:	430b      	orrs	r3, r1
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80038b8:	21ff      	movs	r1, #255	; 0xff
 80038ba:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80038bc:	6053      	str	r3, [r2, #4]
 80038be:	e7d8      	b.n	8003872 <I2C_Master_ISR_IT+0x8e>
  __HAL_LOCK(hi2c);
 80038c0:	2002      	movs	r0, #2
}
 80038c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80038c4:	0668      	lsls	r0, r5, #25
 80038c6:	d5d4      	bpl.n	8003872 <I2C_Master_ISR_IT+0x8e>
 80038c8:	0671      	lsls	r1, r6, #25
 80038ca:	d5d2      	bpl.n	8003872 <I2C_Master_ISR_IT+0x8e>
    if (hi2c->XferCount == 0U)
 80038cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d137      	bne.n	8003944 <I2C_Master_ISR_IT+0x160>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80038d4:	6822      	ldr	r2, [r4, #0]
 80038d6:	6853      	ldr	r3, [r2, #4]
 80038d8:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 80038dc:	d1c9      	bne.n	8003872 <I2C_Master_ISR_IT+0x8e>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80038de:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80038e0:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80038e4:	d133      	bne.n	800394e <I2C_Master_ISR_IT+0x16a>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038e6:	6853      	ldr	r3, [r2, #4]
 80038e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038ec:	6053      	str	r3, [r2, #4]
 80038ee:	e7c0      	b.n	8003872 <I2C_Master_ISR_IT+0x8e>
    I2C_ITMasterCplt(hi2c, ITFlags);
 80038f0:	4629      	mov	r1, r5
 80038f2:	4620      	mov	r0, r4
 80038f4:	f7ff fe76 	bl	80035e4 <I2C_ITMasterCplt>
 80038f8:	e7bf      	b.n	800387a <I2C_Master_ISR_IT+0x96>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80038fa:	6822      	ldr	r2, [r4, #0]
 80038fc:	6853      	ldr	r3, [r2, #4]
 80038fe:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8003902:	d11f      	bne.n	8003944 <I2C_Master_ISR_IT+0x160>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003904:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003908:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 800390c:	2921      	cmp	r1, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_READY;
 800390e:	f04f 0020 	mov.w	r0, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003912:	d050      	beq.n	80039b6 <I2C_Master_ISR_IT+0x1d2>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003914:	2112      	movs	r1, #18
    hi2c->State         = HAL_I2C_STATE_READY;
 8003916:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800391a:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800391c:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003920:	6817      	ldr	r7, [r2, #0]
    hi2c->XferISR       = NULL;
 8003922:	6363      	str	r3, [r4, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003924:	f000 0028 	and.w	r0, r0, #40	; 0x28
 8003928:	2828      	cmp	r0, #40	; 0x28
 800392a:	bf14      	ite	ne
 800392c:	f06f 01f4 	mvnne.w	r1, #244	; 0xf4
 8003930:	f06f 0144 	mvneq.w	r1, #68	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003934:	4039      	ands	r1, r7
 8003936:	6011      	str	r1, [r2, #0]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003938:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 800393a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800393e:	f7ff fa51 	bl	8002de4 <HAL_I2C_MasterRxCpltCallback>
 8003942:	e796      	b.n	8003872 <I2C_Master_ISR_IT+0x8e>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003944:	2140      	movs	r1, #64	; 0x40
 8003946:	4620      	mov	r0, r4
 8003948:	f7ff fa9a 	bl	8002e80 <I2C_ITError>
 800394c:	e791      	b.n	8003872 <I2C_Master_ISR_IT+0x8e>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800394e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003952:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8003956:	2921      	cmp	r1, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_READY;
 8003958:	f04f 0020 	mov.w	r0, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800395c:	d04f      	beq.n	80039fe <I2C_Master_ISR_IT+0x21a>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800395e:	2112      	movs	r1, #18
    hi2c->State         = HAL_I2C_STATE_READY;
 8003960:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003964:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003966:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800396a:	6810      	ldr	r0, [r2, #0]
    hi2c->XferISR       = NULL;
 800396c:	6363      	str	r3, [r4, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800396e:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8003972:	2928      	cmp	r1, #40	; 0x28
 8003974:	bf14      	ite	ne
 8003976:	f06f 01f4 	mvnne.w	r1, #244	; 0xf4
 800397a:	f06f 0144 	mvneq.w	r1, #68	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800397e:	4001      	ands	r1, r0
 8003980:	6011      	str	r1, [r2, #0]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003982:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8003984:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003988:	f7ff fa2c 	bl	8002de4 <HAL_I2C_MasterRxCpltCallback>
 800398c:	e771      	b.n	8003872 <I2C_Master_ISR_IT+0x8e>
        hi2c->XferSize = hi2c->XferCount;
 800398e:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003990:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
 8003992:	b280      	uxth	r0, r0
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003994:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
        hi2c->XferSize = hi2c->XferCount;
 8003998:	8520      	strh	r0, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800399a:	d025      	beq.n	80039e8 <I2C_Master_ISR_IT+0x204>
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 800399c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800399e:	f8df e07c 	ldr.w	lr, [pc, #124]	; 8003a1c <I2C_Master_ISR_IT+0x238>
 80039a2:	6853      	ldr	r3, [r2, #4]
 80039a4:	ea03 030e 	and.w	r3, r3, lr
 80039a8:	433b      	orrs	r3, r7
 80039aa:	b2c0      	uxtb	r0, r0
 80039ac:	430b      	orrs	r3, r1
 80039ae:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80039b2:	6053      	str	r3, [r2, #4]
 80039b4:	e75d      	b.n	8003872 <I2C_Master_ISR_IT+0x8e>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80039b6:	2111      	movs	r1, #17
    hi2c->State         = HAL_I2C_STATE_READY;
 80039b8:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80039bc:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80039be:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80039c2:	6810      	ldr	r0, [r2, #0]
    hi2c->XferISR       = NULL;
 80039c4:	6363      	str	r3, [r4, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80039c6:	f001 0128 	and.w	r1, r1, #40	; 0x28
 80039ca:	2928      	cmp	r1, #40	; 0x28
 80039cc:	bf18      	it	ne
 80039ce:	f06f 01f2 	mvnne.w	r1, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80039d2:	bf08      	it	eq
 80039d4:	f06f 0142 	mvneq.w	r1, #66	; 0x42
 80039d8:	4001      	ands	r1, r0
 80039da:	6011      	str	r1, [r2, #0]
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80039dc:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80039de:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80039e2:	f7ff f9fd 	bl	8002de0 <HAL_I2C_MasterTxCpltCallback>
 80039e6:	e744      	b.n	8003872 <I2C_Master_ISR_IT+0x8e>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80039e8:	6853      	ldr	r3, [r2, #4]
 80039ea:	4f0c      	ldr	r7, [pc, #48]	; (8003a1c <I2C_Master_ISR_IT+0x238>)
 80039ec:	403b      	ands	r3, r7
 80039ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039f2:	b2c0      	uxtb	r0, r0
 80039f4:	430b      	orrs	r3, r1
 80039f6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80039fa:	6050      	str	r0, [r2, #4]
 80039fc:	e739      	b.n	8003872 <I2C_Master_ISR_IT+0x8e>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80039fe:	2111      	movs	r1, #17
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a00:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a04:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a06:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003a0a:	6810      	ldr	r0, [r2, #0]
    hi2c->XferISR       = NULL;
 8003a0c:	6363      	str	r3, [r4, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a0e:	f001 0128 	and.w	r1, r1, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003a12:	2928      	cmp	r1, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003a14:	bf18      	it	ne
 8003a16:	f06f 01f2 	mvnne.w	r1, #242	; 0xf2
 8003a1a:	e7da      	b.n	80039d2 <I2C_Master_ISR_IT+0x1ee>
 8003a1c:	fc009c00 	.word	0xfc009c00

08003a20 <I2C_Master_ISR_DMA>:
{
 8003a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8003a22:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d06d      	beq.n	8003b06 <I2C_Master_ISR_DMA+0xe6>
 8003a2a:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003a2c:	06cd      	lsls	r5, r1, #27
 8003a2e:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 8003a30:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003a34:	d43b      	bmi.n	8003aae <I2C_Master_ISR_DMA+0x8e>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003a36:	060f      	lsls	r7, r1, #24
 8003a38:	d55b      	bpl.n	8003af2 <I2C_Master_ISR_DMA+0xd2>
 8003a3a:	0656      	lsls	r6, r2, #25
 8003a3c:	d55b      	bpl.n	8003af6 <I2C_Master_ISR_DMA+0xd6>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003a3e:	6823      	ldr	r3, [r4, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a46:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003a48:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003a4a:	b292      	uxth	r2, r2
 8003a4c:	2a00      	cmp	r2, #0
 8003a4e:	d06f      	beq.n	8003b30 <I2C_Master_ISR_DMA+0x110>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003a50:	685d      	ldr	r5, [r3, #4]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a52:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8003a54:	b289      	uxth	r1, r1
 8003a56:	29ff      	cmp	r1, #255	; 0xff
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003a58:	f3c5 0509 	ubfx	r5, r5, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a5c:	f200 8091 	bhi.w	8003b82 <I2C_Master_ISR_DMA+0x162>
        hi2c->XferSize = hi2c->XferCount;
 8003a60:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003a62:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
 8003a64:	b290      	uxth	r0, r2
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003a66:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
          xfermode = hi2c->XferOptions;
 8003a6a:	bf18      	it	ne
 8003a6c:	6ae7      	ldrne	r7, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
 8003a6e:	8520      	strh	r0, [r4, #40]	; 0x28
 8003a70:	b2c1      	uxtb	r1, r0
 8003a72:	bf06      	itte	eq
 8003a74:	0409      	lsleq	r1, r1, #16
          xfermode = I2C_AUTOEND_MODE;
 8003a76:	f04f 7700 	moveq.w	r7, #33554432	; 0x2000000
 8003a7a:	0409      	lslne	r1, r1, #16
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	4e6e      	ldr	r6, [pc, #440]	; (8003c38 <I2C_Master_ISR_DMA+0x218>)
 8003a80:	4032      	ands	r2, r6
 8003a82:	432a      	orrs	r2, r5
 8003a84:	433a      	orrs	r2, r7
 8003a86:	430a      	orrs	r2, r1
 8003a88:	605a      	str	r2, [r3, #4]
      hi2c->XferCount -= hi2c->XferSize;
 8003a8a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003a8c:	1a12      	subs	r2, r2, r0
 8003a8e:	b292      	uxth	r2, r2
 8003a90:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a92:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8003a96:	2a22      	cmp	r2, #34	; 0x22
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	bf0c      	ite	eq
 8003a9c:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003aa0:	f442 4280 	orrne.w	r2, r2, #16384	; 0x4000
 8003aa4:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hi2c);
 8003aa6:	2000      	movs	r0, #0
 8003aa8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
 8003aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003aae:	06d0      	lsls	r0, r2, #27
 8003ab0:	d5c1      	bpl.n	8003a36 <I2C_Master_ISR_DMA+0x16>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ab2:	6823      	ldr	r3, [r4, #0]
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003ab4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003ab6:	4861      	ldr	r0, [pc, #388]	; (8003c3c <I2C_Master_ISR_DMA+0x21c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ab8:	2110      	movs	r1, #16
 8003aba:	61d9      	str	r1, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003abc:	6c61      	ldr	r1, [r4, #68]	; 0x44
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003abe:	4282      	cmp	r2, r0
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ac0:	f041 0104 	orr.w	r1, r1, #4
 8003ac4:	6461      	str	r1, [r4, #68]	; 0x44
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003ac6:	d064      	beq.n	8003b92 <I2C_Master_ISR_DMA+0x172>
 8003ac8:	495d      	ldr	r1, [pc, #372]	; (8003c40 <I2C_Master_ISR_DMA+0x220>)
      tmpisr |= I2C_IT_TCI;
 8003aca:	428a      	cmp	r2, r1
 8003acc:	bf14      	ite	ne
 8003ace:	22f4      	movne	r2, #244	; 0xf4
 8003ad0:	2260      	moveq	r2, #96	; 0x60
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003ad2:	6819      	ldr	r1, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	601a      	str	r2, [r3, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ad8:	699a      	ldr	r2, [r3, #24]
 8003ada:	0791      	lsls	r1, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8003adc:	bf44      	itt	mi
 8003ade:	2200      	movmi	r2, #0
 8003ae0:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ae2:	699a      	ldr	r2, [r3, #24]
 8003ae4:	07d2      	lsls	r2, r2, #31
 8003ae6:	d4de      	bmi.n	8003aa6 <I2C_Master_ISR_DMA+0x86>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ae8:	699a      	ldr	r2, [r3, #24]
 8003aea:	f042 0201 	orr.w	r2, r2, #1
 8003aee:	619a      	str	r2, [r3, #24]
 8003af0:	e7d9      	b.n	8003aa6 <I2C_Master_ISR_DMA+0x86>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003af2:	064d      	lsls	r5, r1, #25
 8003af4:	d409      	bmi.n	8003b0a <I2C_Master_ISR_DMA+0xea>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003af6:	068b      	lsls	r3, r1, #26
 8003af8:	d5d5      	bpl.n	8003aa6 <I2C_Master_ISR_DMA+0x86>
 8003afa:	0692      	lsls	r2, r2, #26
 8003afc:	d5d3      	bpl.n	8003aa6 <I2C_Master_ISR_DMA+0x86>
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003afe:	4620      	mov	r0, r4
 8003b00:	f7ff fd70 	bl	80035e4 <I2C_ITMasterCplt>
 8003b04:	e7cf      	b.n	8003aa6 <I2C_Master_ISR_DMA+0x86>
  __HAL_LOCK(hi2c);
 8003b06:	2002      	movs	r0, #2
 8003b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003b0a:	0650      	lsls	r0, r2, #25
 8003b0c:	d5f3      	bpl.n	8003af6 <I2C_Master_ISR_DMA+0xd6>
    if (hi2c->XferCount == 0U)
 8003b0e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	bb8b      	cbnz	r3, 8003b78 <I2C_Master_ISR_DMA+0x158>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003b14:	6822      	ldr	r2, [r4, #0]
 8003b16:	6853      	ldr	r3, [r2, #4]
 8003b18:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8003b1c:	d1c3      	bne.n	8003aa6 <I2C_Master_ISR_DMA+0x86>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003b1e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003b20:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8003b24:	d137      	bne.n	8003b96 <I2C_Master_ISR_DMA+0x176>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b26:	6853      	ldr	r3, [r2, #4]
 8003b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b2c:	6053      	str	r3, [r2, #4]
 8003b2e:	e7ba      	b.n	8003aa6 <I2C_Master_ISR_DMA+0x86>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	f012 7200 	ands.w	r2, r2, #33554432	; 0x2000000
 8003b36:	d11f      	bne.n	8003b78 <I2C_Master_ISR_DMA+0x158>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b38:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b3c:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8003b40:	2921      	cmp	r1, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b42:	f04f 0020 	mov.w	r0, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b46:	d046      	beq.n	8003bd6 <I2C_Master_ISR_DMA+0x1b6>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b48:	2112      	movs	r1, #18
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b4a:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b4e:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b50:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003b54:	6819      	ldr	r1, [r3, #0]
    hi2c->XferISR       = NULL;
 8003b56:	6362      	str	r2, [r4, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b58:	f000 0028 	and.w	r0, r0, #40	; 0x28
 8003b5c:	2828      	cmp	r0, #40	; 0x28
 8003b5e:	bf14      	ite	ne
 8003b60:	f06f 00f4 	mvnne.w	r0, #244	; 0xf4
 8003b64:	f06f 0044 	mvneq.w	r0, #68	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003b68:	4001      	ands	r1, r0
 8003b6a:	6019      	str	r1, [r3, #0]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b6c:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8003b6e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b72:	f7ff f937 	bl	8002de4 <HAL_I2C_MasterRxCpltCallback>
 8003b76:	e796      	b.n	8003aa6 <I2C_Master_ISR_DMA+0x86>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003b78:	2140      	movs	r1, #64	; 0x40
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	f7ff f980 	bl	8002e80 <I2C_ITError>
 8003b80:	e791      	b.n	8003aa6 <I2C_Master_ISR_DMA+0x86>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b82:	22ff      	movs	r2, #255	; 0xff
 8003b84:	8522      	strh	r2, [r4, #40]	; 0x28
 8003b86:	4610      	mov	r0, r2
 8003b88:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
        xfermode = I2C_RELOAD_MODE;
 8003b8c:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 8003b90:	e774      	b.n	8003a7c <I2C_Master_ISR_DMA+0x5c>
      tmpisr |= I2C_IT_TCI;
 8003b92:	2260      	movs	r2, #96	; 0x60
 8003b94:	e79d      	b.n	8003ad2 <I2C_Master_ISR_DMA+0xb2>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b9a:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8003b9e:	2921      	cmp	r1, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ba0:	f04f 0020 	mov.w	r0, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ba4:	d02f      	beq.n	8003c06 <I2C_Master_ISR_DMA+0x1e6>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ba6:	2112      	movs	r1, #18
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ba8:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003bac:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003bae:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003bb2:	6810      	ldr	r0, [r2, #0]
    hi2c->XferISR       = NULL;
 8003bb4:	6363      	str	r3, [r4, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003bb6:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8003bba:	2928      	cmp	r1, #40	; 0x28
 8003bbc:	bf14      	ite	ne
 8003bbe:	f06f 01f4 	mvnne.w	r1, #244	; 0xf4
 8003bc2:	f06f 0144 	mvneq.w	r1, #68	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003bc6:	4001      	ands	r1, r0
 8003bc8:	6011      	str	r1, [r2, #0]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003bca:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8003bcc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003bd0:	f7ff f908 	bl	8002de4 <HAL_I2C_MasterRxCpltCallback>
 8003bd4:	e767      	b.n	8003aa6 <I2C_Master_ISR_DMA+0x86>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003bd6:	2111      	movs	r1, #17
    hi2c->State         = HAL_I2C_STATE_READY;
 8003bd8:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003bdc:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003bde:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003be2:	6819      	ldr	r1, [r3, #0]
    hi2c->XferISR       = NULL;
 8003be4:	6362      	str	r2, [r4, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003be6:	f000 0028 	and.w	r0, r0, #40	; 0x28
 8003bea:	2828      	cmp	r0, #40	; 0x28
 8003bec:	bf14      	ite	ne
 8003bee:	f06f 00f2 	mvnne.w	r0, #242	; 0xf2
 8003bf2:	f06f 0042 	mvneq.w	r0, #66	; 0x42
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003bf6:	4001      	ands	r1, r0
 8003bf8:	6019      	str	r1, [r3, #0]
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003bfa:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8003bfc:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c00:	f7ff f8ee 	bl	8002de0 <HAL_I2C_MasterTxCpltCallback>
 8003c04:	e74f      	b.n	8003aa6 <I2C_Master_ISR_DMA+0x86>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c06:	2111      	movs	r1, #17
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c08:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c0c:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c0e:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003c12:	6810      	ldr	r0, [r2, #0]
    hi2c->XferISR       = NULL;
 8003c14:	6363      	str	r3, [r4, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c16:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8003c1a:	2928      	cmp	r1, #40	; 0x28
 8003c1c:	bf14      	ite	ne
 8003c1e:	f06f 01f2 	mvnne.w	r1, #242	; 0xf2
 8003c22:	f06f 0142 	mvneq.w	r1, #66	; 0x42
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003c26:	4001      	ands	r1, r0
 8003c28:	6011      	str	r1, [r2, #0]
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c2a:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8003c2c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c30:	f7ff f8d6 	bl	8002de0 <HAL_I2C_MasterTxCpltCallback>
 8003c34:	e737      	b.n	8003aa6 <I2C_Master_ISR_DMA+0x86>
 8003c36:	bf00      	nop
 8003c38:	fc009c00 	.word	0xfc009c00
 8003c3c:	08003a21 	.word	0x08003a21
 8003c40:	080033fd 	.word	0x080033fd

08003c44 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c44:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b20      	cmp	r3, #32
 8003c4c:	d001      	beq.n	8003c52 <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003c4e:	2002      	movs	r0, #2
 8003c50:	4770      	bx	lr
 8003c52:	4602      	mov	r2, r0
    __HAL_LOCK(hi2c);
 8003c54:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8003c58:	2801      	cmp	r0, #1
 8003c5a:	d0f8      	beq.n	8003c4e <HAL_I2CEx_ConfigAnalogFilter+0xa>
{
 8003c5c:	b410      	push	{r4}
    __HAL_I2C_DISABLE(hi2c);
 8003c5e:	6810      	ldr	r0, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c60:	2424      	movs	r4, #36	; 0x24
 8003c62:	f882 4041 	strb.w	r4, [r2, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8003c66:	6804      	ldr	r4, [r0, #0]
 8003c68:	f024 0401 	bic.w	r4, r4, #1
 8003c6c:	6004      	str	r4, [r0, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c6e:	6804      	ldr	r4, [r0, #0]
 8003c70:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8003c74:	6004      	str	r4, [r0, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c76:	6804      	ldr	r4, [r0, #0]
 8003c78:	4321      	orrs	r1, r4
 8003c7a:	6001      	str	r1, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003c7c:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 8003c7e:	2400      	movs	r4, #0
    __HAL_I2C_ENABLE(hi2c);
 8003c80:	f041 0101 	orr.w	r1, r1, #1
 8003c84:	6001      	str	r1, [r0, #0]
    return HAL_OK;
 8003c86:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8003c88:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003c8c:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  }
}
 8003c90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop

08003c98 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c98:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b20      	cmp	r3, #32
 8003ca0:	d001      	beq.n	8003ca6 <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003ca2:	2002      	movs	r0, #2
 8003ca4:	4770      	bx	lr
 8003ca6:	4602      	mov	r2, r0
    __HAL_LOCK(hi2c);
 8003ca8:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8003cac:	2801      	cmp	r0, #1
 8003cae:	d0f8      	beq.n	8003ca2 <HAL_I2CEx_ConfigDigitalFilter+0xa>
{
 8003cb0:	b410      	push	{r4}
    __HAL_I2C_DISABLE(hi2c);
 8003cb2:	6810      	ldr	r0, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cb4:	2424      	movs	r4, #36	; 0x24
 8003cb6:	f882 4041 	strb.w	r4, [r2, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8003cba:	6804      	ldr	r4, [r0, #0]
 8003cbc:	f024 0401 	bic.w	r4, r4, #1
 8003cc0:	6004      	str	r4, [r0, #0]
    tmpreg = hi2c->Instance->CR1;
 8003cc2:	6804      	ldr	r4, [r0, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8003cc4:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8003cc8:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8003ccc:	6001      	str	r1, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003cce:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 8003cd0:	2400      	movs	r4, #0
    __HAL_I2C_ENABLE(hi2c);
 8003cd2:	f041 0101 	orr.w	r1, r1, #1
 8003cd6:	6001      	str	r1, [r0, #0]
    return HAL_OK;
 8003cd8:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8003cda:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003cde:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  }
}
 8003ce2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ce8:	4a02      	ldr	r2, [pc, #8]	; (8003cf4 <HAL_PWR_EnableBkUpAccess+0xc>)
 8003cea:	6813      	ldr	r3, [r2, #0]
 8003cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf0:	6013      	str	r3, [r2, #0]
 8003cf2:	4770      	bx	lr
 8003cf4:	40007000 	.word	0x40007000

08003cf8 <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cf8:	4b07      	ldr	r3, [pc, #28]	; (8003d18 <HAL_PWREx_GetVoltageRange+0x20>)
 8003cfa:	6818      	ldr	r0, [r3, #0]
 8003cfc:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003d00:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003d04:	d007      	beq.n	8003d16 <HAL_PWREx_GetVoltageRange+0x1e>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d0a:	f413 7f80 	tst.w	r3, #256	; 0x100
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003d0e:	bf14      	ite	ne
 8003d10:	f44f 7000 	movne.w	r0, #512	; 0x200
 8003d14:	2000      	moveq	r0, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003d16:	4770      	bx	lr
 8003d18:	40007000 	.word	0x40007000

08003d1c <HAL_PWREx_ControlVoltageScaling>:

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d1c:	4a3b      	ldr	r2, [pc, #236]	; (8003e0c <HAL_PWREx_ControlVoltageScaling+0xf0>)
{
 8003d1e:	b410      	push	{r4}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d20:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d22:	b968      	cbnz	r0, 8003d40 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d2c:	d014      	beq.n	8003d58 <HAL_PWREx_ControlVoltageScaling+0x3c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d2e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    }
  }
#endif

  return HAL_OK;
}
 8003d32:	f85d 4b04 	ldr.w	r4, [sp], #4
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d3a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8003d3e:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d40:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003d44:	d031      	beq.n	8003daa <HAL_PWREx_ControlVoltageScaling+0x8e>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d4e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003d50:	2000      	movs	r0, #0
}
 8003d52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d56:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d58:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003d5c:	4b2c      	ldr	r3, [pc, #176]	; (8003e10 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003d5e:	482d      	ldr	r0, [pc, #180]	; (8003e14 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d60:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003d64:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d68:	6811      	ldr	r1, [r2, #0]
 8003d6a:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8003d6e:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003d72:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003d74:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d76:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003d78:	2332      	movs	r3, #50	; 0x32
 8003d7a:	fb03 f304 	mul.w	r3, r3, r4
 8003d7e:	fba0 0303 	umull	r0, r3, r0, r3
 8003d82:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d84:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003d86:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d8a:	d506      	bpl.n	8003d9a <HAL_PWREx_ControlVoltageScaling+0x7e>
 8003d8c:	e000      	b.n	8003d90 <HAL_PWREx_ControlVoltageScaling+0x74>
 8003d8e:	b123      	cbz	r3, 8003d9a <HAL_PWREx_ControlVoltageScaling+0x7e>
 8003d90:	6951      	ldr	r1, [r2, #20]
 8003d92:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8003d94:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d98:	d4f9      	bmi.n	8003d8e <HAL_PWREx_ControlVoltageScaling+0x72>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d9a:	4b1c      	ldr	r3, [pc, #112]	; (8003e0c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	055c      	lsls	r4, r3, #21
 8003da0:	d5d6      	bpl.n	8003d50 <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 8003da2:	2003      	movs	r0, #3
}
 8003da4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003da8:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003daa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db2:	d007      	beq.n	8003dc4 <HAL_PWREx_ControlVoltageScaling+0xa8>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003db4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8003db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 8003dc0:	2000      	movs	r0, #0
 8003dc2:	e7c6      	b.n	8003d52 <HAL_PWREx_ControlVoltageScaling+0x36>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dc4:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003dc8:	4b11      	ldr	r3, [pc, #68]	; (8003e10 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003dca:	4812      	ldr	r0, [pc, #72]	; (8003e14 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dcc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003dd0:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dd4:	6811      	ldr	r1, [r2, #0]
 8003dd6:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8003dda:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003dde:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003de0:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003de2:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003de4:	2332      	movs	r3, #50	; 0x32
 8003de6:	fb03 f304 	mul.w	r3, r3, r4
 8003dea:	fba0 0303 	umull	r0, r3, r0, r3
 8003dee:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003df0:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003df2:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003df6:	d5d0      	bpl.n	8003d9a <HAL_PWREx_ControlVoltageScaling+0x7e>
 8003df8:	e001      	b.n	8003dfe <HAL_PWREx_ControlVoltageScaling+0xe2>
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0cd      	beq.n	8003d9a <HAL_PWREx_ControlVoltageScaling+0x7e>
 8003dfe:	6951      	ldr	r1, [r2, #20]
 8003e00:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8003e02:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e06:	d5c8      	bpl.n	8003d9a <HAL_PWREx_ControlVoltageScaling+0x7e>
 8003e08:	e7f7      	b.n	8003dfa <HAL_PWREx_ControlVoltageScaling+0xde>
 8003e0a:	bf00      	nop
 8003e0c:	40007000 	.word	0x40007000
 8003e10:	2000003c 	.word	0x2000003c
 8003e14:	431bde83 	.word	0x431bde83

08003e18 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t msirange = 0U, sysclockfreq = 0U;
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e18:	4a2c      	ldr	r2, [pc, #176]	; (8003ecc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e1a:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e1c:	68d2      	ldr	r2, [r2, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e1e:	f013 030c 	ands.w	r3, r3, #12
 8003e22:	d008      	beq.n	8003e36 <HAL_RCC_GetSysClockFreq+0x1e>
 8003e24:	2b0c      	cmp	r3, #12
 8003e26:	d037      	beq.n	8003e98 <HAL_RCC_GetSysClockFreq+0x80>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d033      	beq.n	8003e94 <HAL_RCC_GetSysClockFreq+0x7c>
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	4828      	ldr	r0, [pc, #160]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e30:	bf18      	it	ne
 8003e32:	2000      	movne	r0, #0
 8003e34:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e36:	4a25      	ldr	r2, [pc, #148]	; (8003ecc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e38:	6811      	ldr	r1, [r2, #0]
 8003e3a:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e3c:	bf54      	ite	pl
 8003e3e:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e42:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 8003e44:	4923      	ldr	r1, [pc, #140]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0xbc>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e46:	bf54      	ite	pl
 8003e48:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e4c:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8003e50:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e54:	b1fb      	cbz	r3, 8003e96 <HAL_RCC_GetSysClockFreq+0x7e>
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e56:	2b0c      	cmp	r3, #12
 8003e58:	d136      	bne.n	8003ec8 <HAL_RCC_GetSysClockFreq+0xb0>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e5a:	491c      	ldr	r1, [pc, #112]	; (8003ecc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e5c:	68ca      	ldr	r2, [r1, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e5e:	68cb      	ldr	r3, [r1, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e60:	f002 0203 	and.w	r2, r2, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e64:	f3c3 1303 	ubfx	r3, r3, #4, #4

    switch (pllsource)
 8003e68:	2a02      	cmp	r2, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e6a:	f103 0301 	add.w	r3, r3, #1
    switch (pllsource)
 8003e6e:	d022      	beq.n	8003eb6 <HAL_RCC_GetSysClockFreq+0x9e>
 8003e70:	2a03      	cmp	r2, #3
 8003e72:	d017      	beq.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x8c>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      break;

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e74:	fbb0 f0f3 	udiv	r0, r0, r3
 8003e78:	68ca      	ldr	r2, [r1, #12]
 8003e7a:	f3c2 2306 	ubfx	r3, r2, #8, #7
 8003e7e:	fb00 f003 	mul.w	r0, r0, r3
      break;
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e82:	4b12      	ldr	r3, [pc, #72]	; (8003ecc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8003e8e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003e92:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8003e94:	4810      	ldr	r0, [pc, #64]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0xc0>)
  }

  return sysclockfreq;
}
 8003e96:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e98:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e9c:	2a01      	cmp	r2, #1
 8003e9e:	d0ca      	beq.n	8003e36 <HAL_RCC_GetSysClockFreq+0x1e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ea0:	2000      	movs	r0, #0
 8003ea2:	e7da      	b.n	8003e5a <HAL_RCC_GetSysClockFreq+0x42>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ea4:	68ca      	ldr	r2, [r1, #12]
 8003ea6:	480a      	ldr	r0, [pc, #40]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ea8:	fbb0 f0f3 	udiv	r0, r0, r3
 8003eac:	f3c2 2306 	ubfx	r3, r2, #8, #7
 8003eb0:	fb00 f003 	mul.w	r0, r0, r3
      break;
 8003eb4:	e7e5      	b.n	8003e82 <HAL_RCC_GetSysClockFreq+0x6a>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003eb6:	68ca      	ldr	r2, [r1, #12]
 8003eb8:	4807      	ldr	r0, [pc, #28]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003eba:	fbb0 f0f3 	udiv	r0, r0, r3
 8003ebe:	f3c2 2306 	ubfx	r3, r2, #8, #7
 8003ec2:	fb00 f003 	mul.w	r0, r0, r3
      break;
 8003ec6:	e7dc      	b.n	8003e82 <HAL_RCC_GetSysClockFreq+0x6a>
 8003ec8:	2000      	movs	r0, #0
  return sysclockfreq;
 8003eca:	4770      	bx	lr
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	007a1200 	.word	0x007a1200
 8003ed4:	0801474c 	.word	0x0801474c
 8003ed8:	00f42400 	.word	0x00f42400

08003edc <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8003edc:	2800      	cmp	r0, #0
 8003ede:	f000 82e7 	beq.w	80044b0 <HAL_RCC_OscConfig+0x5d4>
{
 8003ee2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ee6:	4a99      	ldr	r2, [pc, #612]	; (800414c <HAL_RCC_OscConfig+0x270>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ee8:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eea:	6895      	ldr	r5, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003eec:	68d6      	ldr	r6, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003eee:	06da      	lsls	r2, r3, #27
{
 8003ef0:	b085      	sub	sp, #20
 8003ef2:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ef4:	f005 050c 	and.w	r5, r5, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ef8:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003efc:	d52e      	bpl.n	8003f5c <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003efe:	2d00      	cmp	r5, #0
 8003f00:	f000 812b 	beq.w	800415a <HAL_RCC_OscConfig+0x27e>
 8003f04:	2d0c      	cmp	r5, #12
 8003f06:	f000 8125 	beq.w	8004154 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f0a:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 8003f0c:	4f8f      	ldr	r7, [pc, #572]	; (800414c <HAL_RCC_OscConfig+0x270>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 8181 	beq.w	8004216 <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_MSI_ENABLE();
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	f043 0301 	orr.w	r3, r3, #1
 8003f1a:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8003f1c:	f7fd f814 	bl	8000f48 <HAL_GetTick>
 8003f20:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f22:	e006      	b.n	8003f32 <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f24:	f7fd f810 	bl	8000f48 <HAL_GetTick>
 8003f28:	eba0 0008 	sub.w	r0, r0, r8
 8003f2c:	2802      	cmp	r0, #2
 8003f2e:	f200 81e1 	bhi.w	80042f4 <HAL_RCC_OscConfig+0x418>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	079b      	lsls	r3, r3, #30
 8003f36:	d5f5      	bpl.n	8003f24 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	f043 0308 	orr.w	r3, r3, #8
 8003f3e:	603b      	str	r3, [r7, #0]
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	6a22      	ldr	r2, [r4, #32]
 8003f44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	69e2      	ldr	r2, [r4, #28]
 8003f50:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003f58:	607b      	str	r3, [r7, #4]
 8003f5a:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f5c:	07d9      	lsls	r1, r3, #31
 8003f5e:	d529      	bpl.n	8003fb4 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f60:	2d08      	cmp	r5, #8
 8003f62:	f000 8198 	beq.w	8004296 <HAL_RCC_OscConfig+0x3ba>
 8003f66:	2d0c      	cmp	r5, #12
 8003f68:	f000 8192 	beq.w	8004290 <HAL_RCC_OscConfig+0x3b4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f6c:	6863      	ldr	r3, [r4, #4]
 8003f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f72:	f000 819a 	beq.w	80042aa <HAL_RCC_OscConfig+0x3ce>
 8003f76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f7a:	f000 8280 	beq.w	800447e <HAL_RCC_OscConfig+0x5a2>
 8003f7e:	4f73      	ldr	r7, [pc, #460]	; (800414c <HAL_RCC_OscConfig+0x270>)
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003f86:	603a      	str	r2, [r7, #0]
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f8e:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f040 818f 	bne.w	80042b4 <HAL_RCC_OscConfig+0x3d8>
        tickstart = HAL_GetTick();
 8003f96:	f7fc ffd7 	bl	8000f48 <HAL_GetTick>
 8003f9a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f9c:	e006      	b.n	8003fac <HAL_RCC_OscConfig+0xd0>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f9e:	f7fc ffd3 	bl	8000f48 <HAL_GetTick>
 8003fa2:	eba0 0008 	sub.w	r0, r0, r8
 8003fa6:	2864      	cmp	r0, #100	; 0x64
 8003fa8:	f200 81a4 	bhi.w	80042f4 <HAL_RCC_OscConfig+0x418>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	0398      	lsls	r0, r3, #14
 8003fb0:	d4f5      	bmi.n	8003f9e <HAL_RCC_OscConfig+0xc2>
 8003fb2:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fb4:	0799      	lsls	r1, r3, #30
 8003fb6:	f100 80a3 	bmi.w	8004100 <HAL_RCC_OscConfig+0x224>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fba:	0719      	lsls	r1, r3, #28
 8003fbc:	d519      	bpl.n	8003ff2 <HAL_RCC_OscConfig+0x116>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fbe:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8003fc0:	4e62      	ldr	r6, [pc, #392]	; (800414c <HAL_RCC_OscConfig+0x270>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 813d 	beq.w	8004242 <HAL_RCC_OscConfig+0x366>
      __HAL_RCC_LSI_ENABLE();
 8003fc8:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8003fcc:	f043 0301 	orr.w	r3, r3, #1
 8003fd0:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003fd4:	f7fc ffb8 	bl	8000f48 <HAL_GetTick>
 8003fd8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fda:	e005      	b.n	8003fe8 <HAL_RCC_OscConfig+0x10c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fdc:	f7fc ffb4 	bl	8000f48 <HAL_GetTick>
 8003fe0:	1bc0      	subs	r0, r0, r7
 8003fe2:	2802      	cmp	r0, #2
 8003fe4:	f200 8186 	bhi.w	80042f4 <HAL_RCC_OscConfig+0x418>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fe8:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8003fec:	079a      	lsls	r2, r3, #30
 8003fee:	d5f5      	bpl.n	8003fdc <HAL_RCC_OscConfig+0x100>
 8003ff0:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ff2:	0758      	lsls	r0, r3, #29
 8003ff4:	d53f      	bpl.n	8004076 <HAL_RCC_OscConfig+0x19a>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ff6:	4b55      	ldr	r3, [pc, #340]	; (800414c <HAL_RCC_OscConfig+0x270>)
 8003ff8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003ffa:	00d1      	lsls	r1, r2, #3
 8003ffc:	f100 81ec 	bmi.w	80043d8 <HAL_RCC_OscConfig+0x4fc>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004000:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004002:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004006:	659a      	str	r2, [r3, #88]	; 0x58
 8004008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400e:	9301      	str	r3, [sp, #4]
 8004010:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004012:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004014:	4e4e      	ldr	r6, [pc, #312]	; (8004150 <HAL_RCC_OscConfig+0x274>)
 8004016:	6833      	ldr	r3, [r6, #0]
 8004018:	05da      	lsls	r2, r3, #23
 800401a:	f140 815a 	bpl.w	80042d2 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800401e:	68a3      	ldr	r3, [r4, #8]
 8004020:	2b01      	cmp	r3, #1
 8004022:	f000 8239 	beq.w	8004498 <HAL_RCC_OscConfig+0x5bc>
 8004026:	2b05      	cmp	r3, #5
 8004028:	f000 81d8 	beq.w	80043dc <HAL_RCC_OscConfig+0x500>
 800402c:	4e47      	ldr	r6, [pc, #284]	; (800414c <HAL_RCC_OscConfig+0x270>)
 800402e:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8004032:	f022 0201 	bic.w	r2, r2, #1
 8004036:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 800403a:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800403e:	f022 0204 	bic.w	r2, r2, #4
 8004042:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004046:	2b00      	cmp	r3, #0
 8004048:	f040 81d5 	bne.w	80043f6 <HAL_RCC_OscConfig+0x51a>
      tickstart = HAL_GetTick();
 800404c:	f7fc ff7c 	bl	8000f48 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004050:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004054:	4681      	mov	r9, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004056:	e006      	b.n	8004066 <HAL_RCC_OscConfig+0x18a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004058:	f7fc ff76 	bl	8000f48 <HAL_GetTick>
 800405c:	eba0 0009 	sub.w	r0, r0, r9
 8004060:	4540      	cmp	r0, r8
 8004062:	f200 8147 	bhi.w	80042f4 <HAL_RCC_OscConfig+0x418>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004066:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800406a:	0799      	lsls	r1, r3, #30
 800406c:	d4f4      	bmi.n	8004058 <HAL_RCC_OscConfig+0x17c>
    if(pwrclkchanged == SET)
 800406e:	2f00      	cmp	r7, #0
 8004070:	f040 81ff 	bne.w	8004472 <HAL_RCC_OscConfig+0x596>
 8004074:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004076:	069a      	lsls	r2, r3, #26
 8004078:	d518      	bpl.n	80040ac <HAL_RCC_OscConfig+0x1d0>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800407a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_RCC_HSI48_ENABLE();
 800407c:	4e33      	ldr	r6, [pc, #204]	; (800414c <HAL_RCC_OscConfig+0x270>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 81cf 	beq.w	8004422 <HAL_RCC_OscConfig+0x546>
      __HAL_RCC_HSI48_ENABLE();
 8004084:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8004088:	f043 0301 	orr.w	r3, r3, #1
 800408c:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004090:	f7fc ff5a 	bl	8000f48 <HAL_GetTick>
 8004094:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004096:	e005      	b.n	80040a4 <HAL_RCC_OscConfig+0x1c8>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004098:	f7fc ff56 	bl	8000f48 <HAL_GetTick>
 800409c:	1bc0      	subs	r0, r0, r7
 800409e:	2802      	cmp	r0, #2
 80040a0:	f200 8128 	bhi.w	80042f4 <HAL_RCC_OscConfig+0x418>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040a4:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 80040a8:	079b      	lsls	r3, r3, #30
 80040aa:	d5f5      	bpl.n	8004098 <HAL_RCC_OscConfig+0x1bc>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80040ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80040ae:	b31b      	cbz	r3, 80040f8 <HAL_RCC_OscConfig+0x21c>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040b0:	2d0c      	cmp	r5, #12
 80040b2:	f000 80ac 	beq.w	800420e <HAL_RCC_OscConfig+0x332>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	f000 820e 	beq.w	80044d8 <HAL_RCC_OscConfig+0x5fc>
        __HAL_RCC_PLL_DISABLE();
 80040bc:	4b23      	ldr	r3, [pc, #140]	; (800414c <HAL_RCC_OscConfig+0x270>)
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80040c4:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	f012 5f20 	tst.w	r2, #671088640	; 0x28000000
 80040cc:	f000 81cc 	beq.w	8004468 <HAL_RCC_OscConfig+0x58c>
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80040d0:	4c1e      	ldr	r4, [pc, #120]	; (800414c <HAL_RCC_OscConfig+0x270>)
 80040d2:	68e3      	ldr	r3, [r4, #12]
 80040d4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80040d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040dc:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80040de:	f7fc ff33 	bl	8000f48 <HAL_GetTick>
 80040e2:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040e4:	e005      	b.n	80040f2 <HAL_RCC_OscConfig+0x216>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e6:	f7fc ff2f 	bl	8000f48 <HAL_GetTick>
 80040ea:	1b40      	subs	r0, r0, r5
 80040ec:	2802      	cmp	r0, #2
 80040ee:	f200 8101 	bhi.w	80042f4 <HAL_RCC_OscConfig+0x418>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040f2:	6823      	ldr	r3, [r4, #0]
 80040f4:	019b      	lsls	r3, r3, #6
 80040f6:	d4f6      	bmi.n	80040e6 <HAL_RCC_OscConfig+0x20a>
  return HAL_OK;
 80040f8:	2000      	movs	r0, #0
}
 80040fa:	b005      	add	sp, #20
 80040fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004100:	2d04      	cmp	r5, #4
 8004102:	f000 80b5 	beq.w	8004270 <HAL_RCC_OscConfig+0x394>
 8004106:	2d0c      	cmp	r5, #12
 8004108:	f000 80af 	beq.w	800426a <HAL_RCC_OscConfig+0x38e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800410c:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 800410e:	4e0f      	ldr	r6, [pc, #60]	; (800414c <HAL_RCC_OscConfig+0x270>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 814f 	beq.w	80043b4 <HAL_RCC_OscConfig+0x4d8>
        __HAL_RCC_HSI_ENABLE();
 8004116:	6833      	ldr	r3, [r6, #0]
 8004118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800411c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800411e:	f7fc ff13 	bl	8000f48 <HAL_GetTick>
 8004122:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004124:	e005      	b.n	8004132 <HAL_RCC_OscConfig+0x256>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004126:	f7fc ff0f 	bl	8000f48 <HAL_GetTick>
 800412a:	1bc0      	subs	r0, r0, r7
 800412c:	2802      	cmp	r0, #2
 800412e:	f200 80e1 	bhi.w	80042f4 <HAL_RCC_OscConfig+0x418>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004132:	6833      	ldr	r3, [r6, #0]
 8004134:	055b      	lsls	r3, r3, #21
 8004136:	d5f6      	bpl.n	8004126 <HAL_RCC_OscConfig+0x24a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004138:	6873      	ldr	r3, [r6, #4]
 800413a:	6922      	ldr	r2, [r4, #16]
 800413c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004140:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004144:	6073      	str	r3, [r6, #4]
 8004146:	6823      	ldr	r3, [r4, #0]
 8004148:	e737      	b.n	8003fba <HAL_RCC_OscConfig+0xde>
 800414a:	bf00      	nop
 800414c:	40021000 	.word	0x40021000
 8004150:	40007000 	.word	0x40007000
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004154:	2e01      	cmp	r6, #1
 8004156:	f47f aed8 	bne.w	8003f0a <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800415a:	4bbf      	ldr	r3, [pc, #764]	; (8004458 <HAL_RCC_OscConfig+0x57c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	079f      	lsls	r7, r3, #30
 8004160:	d452      	bmi.n	8004208 <HAL_RCC_OscConfig+0x32c>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004162:	4bbd      	ldr	r3, [pc, #756]	; (8004458 <HAL_RCC_OscConfig+0x57c>)
 8004164:	6a27      	ldr	r7, [r4, #32]
 8004166:	681a      	ldr	r2, [r3, #0]
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004168:	f8df 82ec 	ldr.w	r8, [pc, #748]	; 8004458 <HAL_RCC_OscConfig+0x57c>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800416c:	0710      	lsls	r0, r2, #28
 800416e:	bf56      	itet	pl
 8004170:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 8004174:	681b      	ldrmi	r3, [r3, #0]
 8004176:	091b      	lsrpl	r3, r3, #4
 8004178:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800417c:	42bb      	cmp	r3, r7
 800417e:	f080 80bd 	bcs.w	80042fc <HAL_RCC_OscConfig+0x420>
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004182:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 8004186:	00d9      	lsls	r1, r3, #3
 8004188:	f100 8163 	bmi.w	8004452 <HAL_RCC_OscConfig+0x576>
  {
    vos = HAL_PWREx_GetVoltageRange();
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800418c:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 8004190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004194:	f8c8 3058 	str.w	r3, [r8, #88]	; 0x58
 8004198:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 800419c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a0:	9302      	str	r3, [sp, #8]
 80041a2:	9b02      	ldr	r3, [sp, #8]
    vos = HAL_PWREx_GetVoltageRange();
 80041a4:	f7ff fda8 	bl	8003cf8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80041a8:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 80041ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041b0:	f8c8 3058 	str.w	r3, [r8, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041b4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80041b8:	f000 8183 	beq.w	80044c2 <HAL_RCC_OscConfig+0x5e6>
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80041bc:	2f7f      	cmp	r7, #127	; 0x7f
 80041be:	f200 8173 	bhi.w	80044a8 <HAL_RCC_OscConfig+0x5cc>
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80041c2:	f1a7 0770 	sub.w	r7, r7, #112	; 0x70
 80041c6:	fab7 f787 	clz	r7, r7
 80041ca:	097f      	lsrs	r7, r7, #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80041cc:	4aa3      	ldr	r2, [pc, #652]	; (800445c <HAL_RCC_OscConfig+0x580>)
 80041ce:	6813      	ldr	r3, [r2, #0]
 80041d0:	f023 030f 	bic.w	r3, r3, #15
 80041d4:	433b      	orrs	r3, r7
 80041d6:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80041d8:	6813      	ldr	r3, [r2, #0]
 80041da:	f003 030f 	and.w	r3, r3, #15
 80041de:	429f      	cmp	r7, r3
 80041e0:	d115      	bne.n	800420e <HAL_RCC_OscConfig+0x332>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041e2:	4b9d      	ldr	r3, [pc, #628]	; (8004458 <HAL_RCC_OscConfig+0x57c>)
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	f042 0208 	orr.w	r2, r2, #8
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	6a21      	ldr	r1, [r4, #32]
 80041f0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80041f4:	430a      	orrs	r2, r1
 80041f6:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	69e1      	ldr	r1, [r4, #28]
 80041fc:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004200:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004204:	605a      	str	r2, [r3, #4]
 8004206:	e0c0      	b.n	800438a <HAL_RCC_OscConfig+0x4ae>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004208:	69a3      	ldr	r3, [r4, #24]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1a9      	bne.n	8004162 <HAL_RCC_OscConfig+0x286>
      return HAL_ERROR;
 800420e:	2001      	movs	r0, #1
}
 8004210:	b005      	add	sp, #20
 8004212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        __HAL_RCC_MSI_DISABLE();
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	f023 0301 	bic.w	r3, r3, #1
 800421c:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800421e:	f7fc fe93 	bl	8000f48 <HAL_GetTick>
 8004222:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004224:	e005      	b.n	8004232 <HAL_RCC_OscConfig+0x356>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004226:	f7fc fe8f 	bl	8000f48 <HAL_GetTick>
 800422a:	eba0 0008 	sub.w	r0, r0, r8
 800422e:	2802      	cmp	r0, #2
 8004230:	d860      	bhi.n	80042f4 <HAL_RCC_OscConfig+0x418>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	0798      	lsls	r0, r3, #30
 8004236:	d4f6      	bmi.n	8004226 <HAL_RCC_OscConfig+0x34a>
 8004238:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800423a:	07d9      	lsls	r1, r3, #31
 800423c:	f57f aeba 	bpl.w	8003fb4 <HAL_RCC_OscConfig+0xd8>
 8004240:	e68e      	b.n	8003f60 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8004242:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8004246:	f023 0301 	bic.w	r3, r3, #1
 800424a:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 800424e:	f7fc fe7b 	bl	8000f48 <HAL_GetTick>
 8004252:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004254:	e004      	b.n	8004260 <HAL_RCC_OscConfig+0x384>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004256:	f7fc fe77 	bl	8000f48 <HAL_GetTick>
 800425a:	1bc0      	subs	r0, r0, r7
 800425c:	2802      	cmp	r0, #2
 800425e:	d849      	bhi.n	80042f4 <HAL_RCC_OscConfig+0x418>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004260:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8004264:	079b      	lsls	r3, r3, #30
 8004266:	d4f6      	bmi.n	8004256 <HAL_RCC_OscConfig+0x37a>
 8004268:	e6c2      	b.n	8003ff0 <HAL_RCC_OscConfig+0x114>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 800426a:	2e02      	cmp	r6, #2
 800426c:	f47f af4e 	bne.w	800410c <HAL_RCC_OscConfig+0x230>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004270:	4a79      	ldr	r2, [pc, #484]	; (8004458 <HAL_RCC_OscConfig+0x57c>)
 8004272:	6812      	ldr	r2, [r2, #0]
 8004274:	0552      	lsls	r2, r2, #21
 8004276:	d502      	bpl.n	800427e <HAL_RCC_OscConfig+0x3a2>
 8004278:	68e2      	ldr	r2, [r4, #12]
 800427a:	2a00      	cmp	r2, #0
 800427c:	d0c7      	beq.n	800420e <HAL_RCC_OscConfig+0x332>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800427e:	4976      	ldr	r1, [pc, #472]	; (8004458 <HAL_RCC_OscConfig+0x57c>)
 8004280:	6920      	ldr	r0, [r4, #16]
 8004282:	684a      	ldr	r2, [r1, #4]
 8004284:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 8004288:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800428c:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800428e:	e694      	b.n	8003fba <HAL_RCC_OscConfig+0xde>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8004290:	2e03      	cmp	r6, #3
 8004292:	f47f ae6b 	bne.w	8003f6c <HAL_RCC_OscConfig+0x90>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004296:	4a70      	ldr	r2, [pc, #448]	; (8004458 <HAL_RCC_OscConfig+0x57c>)
 8004298:	6812      	ldr	r2, [r2, #0]
 800429a:	0392      	lsls	r2, r2, #14
 800429c:	f57f ae8a 	bpl.w	8003fb4 <HAL_RCC_OscConfig+0xd8>
 80042a0:	6862      	ldr	r2, [r4, #4]
 80042a2:	2a00      	cmp	r2, #0
 80042a4:	f47f ae86 	bne.w	8003fb4 <HAL_RCC_OscConfig+0xd8>
 80042a8:	e7b1      	b.n	800420e <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042aa:	4a6b      	ldr	r2, [pc, #428]	; (8004458 <HAL_RCC_OscConfig+0x57c>)
 80042ac:	6813      	ldr	r3, [r2, #0]
 80042ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80042b4:	f7fc fe48 	bl	8000f48 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042b8:	4f67      	ldr	r7, [pc, #412]	; (8004458 <HAL_RCC_OscConfig+0x57c>)
        tickstart = HAL_GetTick();
 80042ba:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042bc:	e005      	b.n	80042ca <HAL_RCC_OscConfig+0x3ee>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042be:	f7fc fe43 	bl	8000f48 <HAL_GetTick>
 80042c2:	eba0 0008 	sub.w	r0, r0, r8
 80042c6:	2864      	cmp	r0, #100	; 0x64
 80042c8:	d814      	bhi.n	80042f4 <HAL_RCC_OscConfig+0x418>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	039b      	lsls	r3, r3, #14
 80042ce:	d5f6      	bpl.n	80042be <HAL_RCC_OscConfig+0x3e2>
 80042d0:	e66f      	b.n	8003fb2 <HAL_RCC_OscConfig+0xd6>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042d2:	6833      	ldr	r3, [r6, #0]
 80042d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042d8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80042da:	f7fc fe35 	bl	8000f48 <HAL_GetTick>
 80042de:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042e0:	6833      	ldr	r3, [r6, #0]
 80042e2:	05db      	lsls	r3, r3, #23
 80042e4:	f53f ae9b 	bmi.w	800401e <HAL_RCC_OscConfig+0x142>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042e8:	f7fc fe2e 	bl	8000f48 <HAL_GetTick>
 80042ec:	eba0 0008 	sub.w	r0, r0, r8
 80042f0:	2802      	cmp	r0, #2
 80042f2:	d9f5      	bls.n	80042e0 <HAL_RCC_OscConfig+0x404>
            return HAL_TIMEOUT;
 80042f4:	2003      	movs	r0, #3
}
 80042f6:	b005      	add	sp, #20
 80042f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042fc:	f8d8 3000 	ldr.w	r3, [r8]
 8004300:	f043 0308 	orr.w	r3, r3, #8
 8004304:	f8c8 3000 	str.w	r3, [r8]
 8004308:	f8d8 3000 	ldr.w	r3, [r8]
 800430c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004310:	433b      	orrs	r3, r7
 8004312:	f8c8 3000 	str.w	r3, [r8]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004316:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800431a:	69e2      	ldr	r2, [r4, #28]
 800431c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004320:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004324:	f8c8 3004 	str.w	r3, [r8, #4]
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004328:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 800432c:	00da      	lsls	r2, r3, #3
 800432e:	f100 808d 	bmi.w	800444c <HAL_RCC_OscConfig+0x570>
    __HAL_RCC_PWR_CLK_ENABLE();
 8004332:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 8004336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800433a:	f8c8 3058 	str.w	r3, [r8, #88]	; 0x58
 800433e:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 8004342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004346:	9303      	str	r3, [sp, #12]
 8004348:	9b03      	ldr	r3, [sp, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800434a:	f7ff fcd5 	bl	8003cf8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800434e:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 8004352:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004356:	f8c8 3058 	str.w	r3, [r8, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800435a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800435e:	f000 80a9 	beq.w	80044b4 <HAL_RCC_OscConfig+0x5d8>
    if(msirange >= RCC_MSIRANGE_8)
 8004362:	2f7f      	cmp	r7, #127	; 0x7f
 8004364:	f200 80a2 	bhi.w	80044ac <HAL_RCC_OscConfig+0x5d0>
      if(msirange == RCC_MSIRANGE_7)
 8004368:	f1a7 0770 	sub.w	r7, r7, #112	; 0x70
 800436c:	fab7 f787 	clz	r7, r7
 8004370:	097f      	lsrs	r7, r7, #5
  __HAL_FLASH_SET_LATENCY(latency);
 8004372:	4a3a      	ldr	r2, [pc, #232]	; (800445c <HAL_RCC_OscConfig+0x580>)
 8004374:	6813      	ldr	r3, [r2, #0]
 8004376:	f023 030f 	bic.w	r3, r3, #15
 800437a:	433b      	orrs	r3, r7
 800437c:	6013      	str	r3, [r2, #0]
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800437e:	6813      	ldr	r3, [r2, #0]
 8004380:	f003 030f 	and.w	r3, r3, #15
 8004384:	429f      	cmp	r7, r3
 8004386:	f47f af42 	bne.w	800420e <HAL_RCC_OscConfig+0x332>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800438a:	f7ff fd45 	bl	8003e18 <HAL_RCC_GetSysClockFreq>
 800438e:	4b32      	ldr	r3, [pc, #200]	; (8004458 <HAL_RCC_OscConfig+0x57c>)
 8004390:	4933      	ldr	r1, [pc, #204]	; (8004460 <HAL_RCC_OscConfig+0x584>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	4a33      	ldr	r2, [pc, #204]	; (8004464 <HAL_RCC_OscConfig+0x588>)
 8004396:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800439a:	5ccb      	ldrb	r3, [r1, r3]
 800439c:	f003 031f 	and.w	r3, r3, #31
 80043a0:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80043a4:	2000      	movs	r0, #0
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043a6:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80043a8:	f00c fc46 	bl	8010c38 <HAL_InitTick>
        if(status != HAL_OK)
 80043ac:	2800      	cmp	r0, #0
 80043ae:	f43f af43 	beq.w	8004238 <HAL_RCC_OscConfig+0x35c>
 80043b2:	e72d      	b.n	8004210 <HAL_RCC_OscConfig+0x334>
        __HAL_RCC_HSI_DISABLE();
 80043b4:	6833      	ldr	r3, [r6, #0]
 80043b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043ba:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80043bc:	f7fc fdc4 	bl	8000f48 <HAL_GetTick>
 80043c0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043c2:	e004      	b.n	80043ce <HAL_RCC_OscConfig+0x4f2>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c4:	f7fc fdc0 	bl	8000f48 <HAL_GetTick>
 80043c8:	1bc0      	subs	r0, r0, r7
 80043ca:	2802      	cmp	r0, #2
 80043cc:	d892      	bhi.n	80042f4 <HAL_RCC_OscConfig+0x418>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043ce:	6833      	ldr	r3, [r6, #0]
 80043d0:	0558      	lsls	r0, r3, #21
 80043d2:	d4f7      	bmi.n	80043c4 <HAL_RCC_OscConfig+0x4e8>
 80043d4:	6823      	ldr	r3, [r4, #0]
 80043d6:	e5f0      	b.n	8003fba <HAL_RCC_OscConfig+0xde>
    FlagStatus       pwrclkchanged = RESET;
 80043d8:	2700      	movs	r7, #0
 80043da:	e61b      	b.n	8004014 <HAL_RCC_OscConfig+0x138>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043dc:	4b1e      	ldr	r3, [pc, #120]	; (8004458 <HAL_RCC_OscConfig+0x57c>)
 80043de:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80043e2:	f042 0204 	orr.w	r2, r2, #4
 80043e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80043ea:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80043ee:	f042 0201 	orr.w	r2, r2, #1
 80043f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      tickstart = HAL_GetTick();
 80043f6:	f7fc fda7 	bl	8000f48 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043fa:	4e17      	ldr	r6, [pc, #92]	; (8004458 <HAL_RCC_OscConfig+0x57c>)
      tickstart = HAL_GetTick();
 80043fc:	4681      	mov	r9, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043fe:	f241 3888 	movw	r8, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004402:	e006      	b.n	8004412 <HAL_RCC_OscConfig+0x536>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004404:	f7fc fda0 	bl	8000f48 <HAL_GetTick>
 8004408:	eba0 0009 	sub.w	r0, r0, r9
 800440c:	4540      	cmp	r0, r8
 800440e:	f63f af71 	bhi.w	80042f4 <HAL_RCC_OscConfig+0x418>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004412:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8004416:	0798      	lsls	r0, r3, #30
 8004418:	d5f4      	bpl.n	8004404 <HAL_RCC_OscConfig+0x528>
    if(pwrclkchanged == SET)
 800441a:	2f00      	cmp	r7, #0
 800441c:	f43f ae2a 	beq.w	8004074 <HAL_RCC_OscConfig+0x198>
 8004420:	e027      	b.n	8004472 <HAL_RCC_OscConfig+0x596>
      __HAL_RCC_HSI48_DISABLE();
 8004422:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8004426:	f023 0301 	bic.w	r3, r3, #1
 800442a:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
      tickstart = HAL_GetTick();
 800442e:	f7fc fd8b 	bl	8000f48 <HAL_GetTick>
 8004432:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004434:	e005      	b.n	8004442 <HAL_RCC_OscConfig+0x566>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004436:	f7fc fd87 	bl	8000f48 <HAL_GetTick>
 800443a:	1bc0      	subs	r0, r0, r7
 800443c:	2802      	cmp	r0, #2
 800443e:	f63f af59 	bhi.w	80042f4 <HAL_RCC_OscConfig+0x418>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004442:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8004446:	0798      	lsls	r0, r3, #30
 8004448:	d4f5      	bmi.n	8004436 <HAL_RCC_OscConfig+0x55a>
 800444a:	e62f      	b.n	80040ac <HAL_RCC_OscConfig+0x1d0>
    vos = HAL_PWREx_GetVoltageRange();
 800444c:	f7ff fc54 	bl	8003cf8 <HAL_PWREx_GetVoltageRange>
 8004450:	e783      	b.n	800435a <HAL_RCC_OscConfig+0x47e>
 8004452:	f7ff fc51 	bl	8003cf8 <HAL_PWREx_GetVoltageRange>
 8004456:	e6ad      	b.n	80041b4 <HAL_RCC_OscConfig+0x2d8>
 8004458:	40021000 	.word	0x40021000
 800445c:	40022000 	.word	0x40022000
 8004460:	08014734 	.word	0x08014734
 8004464:	2000003c 	.word	0x2000003c
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	f022 0203 	bic.w	r2, r2, #3
 800446e:	60da      	str	r2, [r3, #12]
 8004470:	e62e      	b.n	80040d0 <HAL_RCC_OscConfig+0x1f4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004472:	4a39      	ldr	r2, [pc, #228]	; (8004558 <HAL_RCC_OscConfig+0x67c>)
 8004474:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004476:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800447a:	6593      	str	r3, [r2, #88]	; 0x58
 800447c:	e5fa      	b.n	8004074 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800447e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004482:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	e70d      	b.n	80042b4 <HAL_RCC_OscConfig+0x3d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004498:	4a2f      	ldr	r2, [pc, #188]	; (8004558 <HAL_RCC_OscConfig+0x67c>)
 800449a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800449e:	f043 0301 	orr.w	r3, r3, #1
 80044a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044a6:	e7a6      	b.n	80043f6 <HAL_RCC_OscConfig+0x51a>
        latency = FLASH_LATENCY_2; /* 2WS */
 80044a8:	2702      	movs	r7, #2
 80044aa:	e68f      	b.n	80041cc <HAL_RCC_OscConfig+0x2f0>
 80044ac:	2702      	movs	r7, #2
 80044ae:	e760      	b.n	8004372 <HAL_RCC_OscConfig+0x496>
    return HAL_ERROR;
 80044b0:	2001      	movs	r0, #1
}
 80044b2:	4770      	bx	lr
    if(msirange > RCC_MSIRANGE_8)
 80044b4:	2f80      	cmp	r7, #128	; 0x80
 80044b6:	d90b      	bls.n	80044d0 <HAL_RCC_OscConfig+0x5f4>
        latency = FLASH_LATENCY_2; /* 2WS */
 80044b8:	2fa1      	cmp	r7, #161	; 0xa1
 80044ba:	bf34      	ite	cc
 80044bc:	2701      	movcc	r7, #1
 80044be:	2702      	movcs	r7, #2
 80044c0:	e757      	b.n	8004372 <HAL_RCC_OscConfig+0x496>
    if(msirange > RCC_MSIRANGE_8)
 80044c2:	2f80      	cmp	r7, #128	; 0x80
 80044c4:	d906      	bls.n	80044d4 <HAL_RCC_OscConfig+0x5f8>
        latency = FLASH_LATENCY_2; /* 2WS */
 80044c6:	2fa1      	cmp	r7, #161	; 0xa1
 80044c8:	bf34      	ite	cc
 80044ca:	2701      	movcc	r7, #1
 80044cc:	2702      	movcs	r7, #2
 80044ce:	e67d      	b.n	80041cc <HAL_RCC_OscConfig+0x2f0>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044d0:	2700      	movs	r7, #0
 80044d2:	e74e      	b.n	8004372 <HAL_RCC_OscConfig+0x496>
 80044d4:	2700      	movs	r7, #0
 80044d6:	e679      	b.n	80041cc <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_PLL_DISABLE();
 80044d8:	4d1f      	ldr	r5, [pc, #124]	; (8004558 <HAL_RCC_OscConfig+0x67c>)
 80044da:	682b      	ldr	r3, [r5, #0]
 80044dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044e0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80044e2:	f7fc fd31 	bl	8000f48 <HAL_GetTick>
 80044e6:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044e8:	e005      	b.n	80044f6 <HAL_RCC_OscConfig+0x61a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ea:	f7fc fd2d 	bl	8000f48 <HAL_GetTick>
 80044ee:	1b80      	subs	r0, r0, r6
 80044f0:	2802      	cmp	r0, #2
 80044f2:	f63f aeff 	bhi.w	80042f4 <HAL_RCC_OscConfig+0x418>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044f6:	682b      	ldr	r3, [r5, #0]
 80044f8:	0199      	lsls	r1, r3, #6
 80044fa:	d4f6      	bmi.n	80044ea <HAL_RCC_OscConfig+0x60e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80044fe:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8004500:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004502:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004504:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004506:	6c22      	ldr	r2, [r4, #64]	; 0x40
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004508:	4c13      	ldr	r4, [pc, #76]	; (8004558 <HAL_RCC_OscConfig+0x67c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800450a:	06db      	lsls	r3, r3, #27
 800450c:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8004510:	3801      	subs	r0, #1
 8004512:	4333      	orrs	r3, r6
 8004514:	0849      	lsrs	r1, r1, #1
 8004516:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800451a:	3901      	subs	r1, #1
 800451c:	0852      	lsrs	r2, r2, #1
 800451e:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8004522:	3a01      	subs	r2, #1
 8004524:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004528:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800452a:	682b      	ldr	r3, [r5, #0]
 800452c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004530:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004532:	68eb      	ldr	r3, [r5, #12]
 8004534:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004538:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800453a:	f7fc fd05 	bl	8000f48 <HAL_GetTick>
 800453e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004540:	e005      	b.n	800454e <HAL_RCC_OscConfig+0x672>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004542:	f7fc fd01 	bl	8000f48 <HAL_GetTick>
 8004546:	1b40      	subs	r0, r0, r5
 8004548:	2802      	cmp	r0, #2
 800454a:	f63f aed3 	bhi.w	80042f4 <HAL_RCC_OscConfig+0x418>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	019a      	lsls	r2, r3, #6
 8004552:	d5f6      	bpl.n	8004542 <HAL_RCC_OscConfig+0x666>
 8004554:	e5d0      	b.n	80040f8 <HAL_RCC_OscConfig+0x21c>
 8004556:	bf00      	nop
 8004558:	40021000 	.word	0x40021000

0800455c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800455c:	2800      	cmp	r0, #0
 800455e:	f000 80ec 	beq.w	800473a <HAL_RCC_ClockConfig+0x1de>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004562:	4a88      	ldr	r2, [pc, #544]	; (8004784 <HAL_RCC_ClockConfig+0x228>)
{
 8004564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004568:	6813      	ldr	r3, [r2, #0]
 800456a:	f003 030f 	and.w	r3, r3, #15
 800456e:	428b      	cmp	r3, r1
 8004570:	d20c      	bcs.n	800458c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004572:	6813      	ldr	r3, [r2, #0]
 8004574:	f023 030f 	bic.w	r3, r3, #15
 8004578:	430b      	orrs	r3, r1
 800457a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800457c:	6813      	ldr	r3, [r2, #0]
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	4299      	cmp	r1, r3
 8004584:	d002      	beq.n	800458c <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8004586:	2001      	movs	r0, #1
 8004588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800458c:	6803      	ldr	r3, [r0, #0]
 800458e:	07df      	lsls	r7, r3, #31
 8004590:	4604      	mov	r4, r0
 8004592:	460d      	mov	r5, r1
 8004594:	d56e      	bpl.n	8004674 <HAL_RCC_ClockConfig+0x118>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004596:	6842      	ldr	r2, [r0, #4]
 8004598:	2a03      	cmp	r2, #3
 800459a:	d07e      	beq.n	800469a <HAL_RCC_ClockConfig+0x13e>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800459c:	4b7a      	ldr	r3, [pc, #488]	; (8004788 <HAL_RCC_ClockConfig+0x22c>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800459e:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045a0:	681b      	ldr	r3, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045a2:	d077      	beq.n	8004694 <HAL_RCC_ClockConfig+0x138>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045a4:	2a00      	cmp	r2, #0
 80045a6:	f040 80b9 	bne.w	800471c <HAL_RCC_ClockConfig+0x1c0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045aa:	079a      	lsls	r2, r3, #30
 80045ac:	d5eb      	bpl.n	8004586 <HAL_RCC_ClockConfig+0x2a>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80045ae:	f7ff fc33 	bl	8003e18 <HAL_RCC_GetSysClockFreq>
 80045b2:	4b76      	ldr	r3, [pc, #472]	; (800478c <HAL_RCC_ClockConfig+0x230>)
 80045b4:	4298      	cmp	r0, r3
 80045b6:	f200 80b5 	bhi.w	8004724 <HAL_RCC_ClockConfig+0x1c8>
 80045ba:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80045bc:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045c0:	4e71      	ldr	r6, [pc, #452]	; (8004788 <HAL_RCC_ClockConfig+0x22c>)
 80045c2:	68b3      	ldr	r3, [r6, #8]
 80045c4:	f023 0303 	bic.w	r3, r3, #3
 80045c8:	431a      	orrs	r2, r3
 80045ca:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 80045cc:	f7fc fcbc 	bl	8000f48 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045d0:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80045d4:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d6:	e006      	b.n	80045e6 <HAL_RCC_ClockConfig+0x8a>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045d8:	f7fc fcb6 	bl	8000f48 <HAL_GetTick>
 80045dc:	eba0 0008 	sub.w	r0, r0, r8
 80045e0:	42b8      	cmp	r0, r7
 80045e2:	f200 8098 	bhi.w	8004716 <HAL_RCC_ClockConfig+0x1ba>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045e6:	68b3      	ldr	r3, [r6, #8]
 80045e8:	6862      	ldr	r2, [r4, #4]
 80045ea:	f003 030c 	and.w	r3, r3, #12
 80045ee:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80045f2:	d1f1      	bne.n	80045d8 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045f4:	6823      	ldr	r3, [r4, #0]
 80045f6:	079f      	lsls	r7, r3, #30
 80045f8:	d43e      	bmi.n	8004678 <HAL_RCC_ClockConfig+0x11c>
    if(hpre == RCC_SYSCLK_DIV2)
 80045fa:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 80045fe:	d103      	bne.n	8004608 <HAL_RCC_ClockConfig+0xac>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004600:	68b2      	ldr	r2, [r6, #8]
 8004602:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004606:	60b2      	str	r2, [r6, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004608:	495e      	ldr	r1, [pc, #376]	; (8004784 <HAL_RCC_ClockConfig+0x228>)
 800460a:	680a      	ldr	r2, [r1, #0]
 800460c:	f002 020f 	and.w	r2, r2, #15
 8004610:	4295      	cmp	r5, r2
 8004612:	d209      	bcs.n	8004628 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004614:	680a      	ldr	r2, [r1, #0]
 8004616:	f022 020f 	bic.w	r2, r2, #15
 800461a:	432a      	orrs	r2, r5
 800461c:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800461e:	680a      	ldr	r2, [r1, #0]
 8004620:	f002 020f 	and.w	r2, r2, #15
 8004624:	4295      	cmp	r5, r2
 8004626:	d1ae      	bne.n	8004586 <HAL_RCC_ClockConfig+0x2a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004628:	0758      	lsls	r0, r3, #29
 800462a:	d506      	bpl.n	800463a <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800462c:	4956      	ldr	r1, [pc, #344]	; (8004788 <HAL_RCC_ClockConfig+0x22c>)
 800462e:	68e0      	ldr	r0, [r4, #12]
 8004630:	688a      	ldr	r2, [r1, #8]
 8004632:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004636:	4302      	orrs	r2, r0
 8004638:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800463a:	0719      	lsls	r1, r3, #28
 800463c:	d507      	bpl.n	800464e <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800463e:	4a52      	ldr	r2, [pc, #328]	; (8004788 <HAL_RCC_ClockConfig+0x22c>)
 8004640:	6921      	ldr	r1, [r4, #16]
 8004642:	6893      	ldr	r3, [r2, #8]
 8004644:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004648:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800464c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800464e:	f7ff fbe3 	bl	8003e18 <HAL_RCC_GetSysClockFreq>
 8004652:	4b4d      	ldr	r3, [pc, #308]	; (8004788 <HAL_RCC_ClockConfig+0x22c>)
 8004654:	494e      	ldr	r1, [pc, #312]	; (8004790 <HAL_RCC_ClockConfig+0x234>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	4a4e      	ldr	r2, [pc, #312]	; (8004794 <HAL_RCC_ClockConfig+0x238>)
 800465a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800465e:	5ccb      	ldrb	r3, [r1, r3]
 8004660:	f003 031f 	and.w	r3, r3, #31
 8004664:	fa20 f303 	lsr.w	r3, r0, r3
 8004668:	6013      	str	r3, [r2, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 800466a:	2000      	movs	r0, #0
}
 800466c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8004670:	f00c bae2 	b.w	8010c38 <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004674:	079a      	lsls	r2, r3, #30
 8004676:	d5c7      	bpl.n	8004608 <HAL_RCC_ClockConfig+0xac>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004678:	4943      	ldr	r1, [pc, #268]	; (8004788 <HAL_RCC_ClockConfig+0x22c>)
 800467a:	68a0      	ldr	r0, [r4, #8]
 800467c:	688a      	ldr	r2, [r1, #8]
 800467e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004682:	4302      	orrs	r2, r0
 8004684:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004686:	493f      	ldr	r1, [pc, #252]	; (8004784 <HAL_RCC_ClockConfig+0x228>)
 8004688:	680a      	ldr	r2, [r1, #0]
 800468a:	f002 020f 	and.w	r2, r2, #15
 800468e:	4295      	cmp	r5, r2
 8004690:	d3c0      	bcc.n	8004614 <HAL_RCC_ClockConfig+0xb8>
 8004692:	e7c9      	b.n	8004628 <HAL_RCC_ClockConfig+0xcc>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004694:	0399      	lsls	r1, r3, #14
 8004696:	d48a      	bmi.n	80045ae <HAL_RCC_ClockConfig+0x52>
 8004698:	e775      	b.n	8004586 <HAL_RCC_ClockConfig+0x2a>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800469a:	493b      	ldr	r1, [pc, #236]	; (8004788 <HAL_RCC_ClockConfig+0x22c>)
 800469c:	6808      	ldr	r0, [r1, #0]
 800469e:	0186      	lsls	r6, r0, #6
 80046a0:	f57f af71 	bpl.w	8004586 <HAL_RCC_ClockConfig+0x2a>
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
  uint32_t msirange = 0U;
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80046a4:	68c8      	ldr	r0, [r1, #12]
 80046a6:	f000 0003 	and.w	r0, r0, #3
 80046aa:	2801      	cmp	r0, #1
 80046ac:	d05b      	beq.n	8004766 <HAL_RCC_ClockConfig+0x20a>
  uint32_t msirange = 0U;
 80046ae:	2100      	movs	r1, #0
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046b0:	4f35      	ldr	r7, [pc, #212]	; (8004788 <HAL_RCC_ClockConfig+0x22c>)
 80046b2:	68fe      	ldr	r6, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046b4:	68f8      	ldr	r0, [r7, #12]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046b6:	f006 0603 	and.w	r6, r6, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046ba:	f3c0 1003 	ubfx	r0, r0, #4, #4

  switch (pllsource)
 80046be:	2e02      	cmp	r6, #2
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046c0:	f100 0001 	add.w	r0, r0, #1
  switch (pllsource)
 80046c4:	d046      	beq.n	8004754 <HAL_RCC_ClockConfig+0x1f8>
 80046c6:	2e03      	cmp	r6, #3
 80046c8:	d13c      	bne.n	8004744 <HAL_RCC_ClockConfig+0x1e8>
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046ca:	68fe      	ldr	r6, [r7, #12]
 80046cc:	4932      	ldr	r1, [pc, #200]	; (8004798 <HAL_RCC_ClockConfig+0x23c>)
 80046ce:	fbb1 f1f0 	udiv	r1, r1, r0
 80046d2:	f3c6 2006 	ubfx	r0, r6, #8, #7
 80046d6:	fb01 f100 	mul.w	r1, r1, r0
  default:
    pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046da:	4e2b      	ldr	r6, [pc, #172]	; (8004788 <HAL_RCC_ClockConfig+0x22c>)
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80046dc:	4f2b      	ldr	r7, [pc, #172]	; (800478c <HAL_RCC_ClockConfig+0x230>)
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046de:	68f0      	ldr	r0, [r6, #12]
 80046e0:	f3c0 6041 	ubfx	r0, r0, #25, #2
 80046e4:	3001      	adds	r0, #1
 80046e6:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 80046e8:	fbb1 f1f0 	udiv	r1, r1, r0
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80046ec:	42b9      	cmp	r1, r7
 80046ee:	d926      	bls.n	800473e <HAL_RCC_ClockConfig+0x1e2>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80046f0:	68b1      	ldr	r1, [r6, #8]
 80046f2:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 80046f6:	d005      	beq.n	8004704 <HAL_RCC_ClockConfig+0x1a8>
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80046f8:	f013 0902 	ands.w	r9, r3, #2
 80046fc:	f43f af60 	beq.w	80045c0 <HAL_RCC_ClockConfig+0x64>
 8004700:	68a3      	ldr	r3, [r4, #8]
 8004702:	b9e3      	cbnz	r3, 800473e <HAL_RCC_ClockConfig+0x1e2>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004704:	68b3      	ldr	r3, [r6, #8]
 8004706:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800470a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800470e:	60b3      	str	r3, [r6, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004710:	f04f 0980 	mov.w	r9, #128	; 0x80
 8004714:	e754      	b.n	80045c0 <HAL_RCC_ClockConfig+0x64>
        return HAL_TIMEOUT;
 8004716:	2003      	movs	r0, #3
 8004718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800471c:	055b      	lsls	r3, r3, #21
 800471e:	f57f af32 	bpl.w	8004586 <HAL_RCC_ClockConfig+0x2a>
 8004722:	e744      	b.n	80045ae <HAL_RCC_ClockConfig+0x52>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004724:	4a18      	ldr	r2, [pc, #96]	; (8004788 <HAL_RCC_ClockConfig+0x22c>)
 8004726:	6893      	ldr	r3, [r2, #8]
 8004728:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800472c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004730:	6093      	str	r3, [r2, #8]
 8004732:	6862      	ldr	r2, [r4, #4]
        hpre = RCC_SYSCLK_DIV2;
 8004734:	f04f 0980 	mov.w	r9, #128	; 0x80
 8004738:	e742      	b.n	80045c0 <HAL_RCC_ClockConfig+0x64>
    return HAL_ERROR;
 800473a:	2001      	movs	r0, #1
}
 800473c:	4770      	bx	lr
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800473e:	f04f 0900 	mov.w	r9, #0
 8004742:	e73d      	b.n	80045c0 <HAL_RCC_ClockConfig+0x64>
    pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004744:	68fe      	ldr	r6, [r7, #12]
 8004746:	fbb1 f1f0 	udiv	r1, r1, r0
 800474a:	f3c6 2006 	ubfx	r0, r6, #8, #7
 800474e:	fb01 f100 	mul.w	r1, r1, r0
 8004752:	e7c2      	b.n	80046da <HAL_RCC_ClockConfig+0x17e>
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004754:	68fe      	ldr	r6, [r7, #12]
 8004756:	4911      	ldr	r1, [pc, #68]	; (800479c <HAL_RCC_ClockConfig+0x240>)
 8004758:	fbb1 f1f0 	udiv	r1, r1, r0
 800475c:	f3c6 2006 	ubfx	r0, r6, #8, #7
 8004760:	fb01 f100 	mul.w	r1, r1, r0
 8004764:	e7b9      	b.n	80046da <HAL_RCC_ClockConfig+0x17e>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004766:	6808      	ldr	r0, [r1, #0]
 8004768:	0700      	lsls	r0, r0, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800476a:	bf54      	ite	pl
 800476c:	f8d1 1094 	ldrpl.w	r1, [r1, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004770:	6809      	ldrmi	r1, [r1, #0]
    msirange = MSIRangeTable[msirange];
 8004772:	480b      	ldr	r0, [pc, #44]	; (80047a0 <HAL_RCC_ClockConfig+0x244>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004774:	bf54      	ite	pl
 8004776:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800477a:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 800477e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8004782:	e795      	b.n	80046b0 <HAL_RCC_ClockConfig+0x154>
 8004784:	40022000 	.word	0x40022000
 8004788:	40021000 	.word	0x40021000
 800478c:	04c4b400 	.word	0x04c4b400
 8004790:	08014734 	.word	0x08014734
 8004794:	2000003c 	.word	0x2000003c
 8004798:	007a1200 	.word	0x007a1200
 800479c:	00f42400 	.word	0x00f42400
 80047a0:	0801474c 	.word	0x0801474c

080047a4 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 80047a4:	4b01      	ldr	r3, [pc, #4]	; (80047ac <HAL_RCC_GetHCLKFreq+0x8>)
}
 80047a6:	6818      	ldr	r0, [r3, #0]
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	2000003c 	.word	0x2000003c

080047b0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80047b0:	4b05      	ldr	r3, [pc, #20]	; (80047c8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80047b2:	4a06      	ldr	r2, [pc, #24]	; (80047cc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80047b4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80047b6:	4906      	ldr	r1, [pc, #24]	; (80047d0 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80047b8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80047bc:	6808      	ldr	r0, [r1, #0]
 80047be:	5cd3      	ldrb	r3, [r2, r3]
 80047c0:	f003 031f 	and.w	r3, r3, #31
}
 80047c4:	40d8      	lsrs	r0, r3
 80047c6:	4770      	bx	lr
 80047c8:	40021000 	.word	0x40021000
 80047cc:	08014744 	.word	0x08014744
 80047d0:	2000003c 	.word	0x2000003c

080047d4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80047d4:	4b05      	ldr	r3, [pc, #20]	; (80047ec <HAL_RCC_GetPCLK2Freq+0x18>)
 80047d6:	4a06      	ldr	r2, [pc, #24]	; (80047f0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80047d8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80047da:	4906      	ldr	r1, [pc, #24]	; (80047f4 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80047dc:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80047e0:	6808      	ldr	r0, [r1, #0]
 80047e2:	5cd3      	ldrb	r3, [r2, r3]
 80047e4:	f003 031f 	and.w	r3, r3, #31
}
 80047e8:	40d8      	lsrs	r0, r3
 80047ea:	4770      	bx	lr
 80047ec:	40021000 	.word	0x40021000
 80047f0:	08014744 	.word	0x08014744
 80047f4:	2000003c 	.word	0x2000003c

080047f8 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80047f8:	4b0e      	ldr	r3, [pc, #56]	; (8004834 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80047fa:	220f      	movs	r2, #15
 80047fc:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	f002 0203 	and.w	r2, r2, #3
 8004804:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800480c:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004814:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	08db      	lsrs	r3, r3, #3
{
 800481a:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800481c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004820:	4c05      	ldr	r4, [pc, #20]	; (8004838 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004822:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004824:	6823      	ldr	r3, [r4, #0]
}
 8004826:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	600b      	str	r3, [r1, #0]
}
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	40021000 	.word	0x40021000
 8004838:	40022000 	.word	0x40022000

0800483c <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800483c:	4a44      	ldr	r2, [pc, #272]	; (8004950 <RCCEx_PLLSAI1_Config+0x114>)
{
 800483e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004840:	68d3      	ldr	r3, [r2, #12]
 8004842:	079b      	lsls	r3, r3, #30
 8004844:	d007      	beq.n	8004856 <RCCEx_PLLSAI1_Config+0x1a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004846:	68d3      	ldr	r3, [r2, #12]
 8004848:	6802      	ldr	r2, [r0, #0]
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	4293      	cmp	r3, r2
 8004850:	d00c      	beq.n	800486c <RCCEx_PLLSAI1_Config+0x30>
 8004852:	2001      	movs	r0, #1
 8004854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004856:	6803      	ldr	r3, [r0, #0]
 8004858:	2b02      	cmp	r3, #2
 800485a:	d043      	beq.n	80048e4 <RCCEx_PLLSAI1_Config+0xa8>
 800485c:	2b03      	cmp	r3, #3
 800485e:	d04d      	beq.n	80048fc <RCCEx_PLLSAI1_Config+0xc0>
 8004860:	2b01      	cmp	r3, #1
 8004862:	d1f6      	bne.n	8004852 <RCCEx_PLLSAI1_Config+0x16>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004864:	6812      	ldr	r2, [r2, #0]
 8004866:	0797      	lsls	r7, r2, #30
 8004868:	d5f3      	bpl.n	8004852 <RCCEx_PLLSAI1_Config+0x16>
 800486a:	e03e      	b.n	80048ea <RCCEx_PLLSAI1_Config+0xae>
       ||
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0f0      	beq.n	8004852 <RCCEx_PLLSAI1_Config+0x16>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004870:	4c37      	ldr	r4, [pc, #220]	; (8004950 <RCCEx_PLLSAI1_Config+0x114>)
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004878:	6023      	str	r3, [r4, #0]
 800487a:	460f      	mov	r7, r1
 800487c:	4606      	mov	r6, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800487e:	f7fc fb63 	bl	8000f48 <HAL_GetTick>
 8004882:	4605      	mov	r5, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004884:	e004      	b.n	8004890 <RCCEx_PLLSAI1_Config+0x54>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004886:	f7fc fb5f 	bl	8000f48 <HAL_GetTick>
 800488a:	1b40      	subs	r0, r0, r5
 800488c:	2802      	cmp	r0, #2
 800488e:	d833      	bhi.n	80048f8 <RCCEx_PLLSAI1_Config+0xbc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004890:	6823      	ldr	r3, [r4, #0]
 8004892:	011a      	lsls	r2, r3, #4
 8004894:	d4f7      	bmi.n	8004886 <RCCEx_PLLSAI1_Config+0x4a>
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004896:	2f00      	cmp	r7, #0
 8004898:	d137      	bne.n	800490a <RCCEx_PLLSAI1_Config+0xce>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800489a:	68f3      	ldr	r3, [r6, #12]
 800489c:	68b5      	ldr	r5, [r6, #8]
 800489e:	6920      	ldr	r0, [r4, #16]
 80048a0:	492c      	ldr	r1, [pc, #176]	; (8004954 <RCCEx_PLLSAI1_Config+0x118>)
 80048a2:	6872      	ldr	r2, [r6, #4]
 80048a4:	06db      	lsls	r3, r3, #27
 80048a6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80048aa:	4001      	ands	r1, r0
 80048ac:	430b      	orrs	r3, r1
 80048ae:	3a01      	subs	r2, #1
 80048b0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80048b4:	6123      	str	r3, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80048b6:	4c26      	ldr	r4, [pc, #152]	; (8004950 <RCCEx_PLLSAI1_Config+0x114>)
 80048b8:	6823      	ldr	r3, [r4, #0]
 80048ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048be:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c0:	f7fc fb42 	bl	8000f48 <HAL_GetTick>
 80048c4:	4605      	mov	r5, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048c6:	e004      	b.n	80048d2 <RCCEx_PLLSAI1_Config+0x96>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048c8:	f7fc fb3e 	bl	8000f48 <HAL_GetTick>
 80048cc:	1b40      	subs	r0, r0, r5
 80048ce:	2802      	cmp	r0, #2
 80048d0:	d812      	bhi.n	80048f8 <RCCEx_PLLSAI1_Config+0xbc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048d2:	6823      	ldr	r3, [r4, #0]
 80048d4:	011b      	lsls	r3, r3, #4
 80048d6:	d5f7      	bpl.n	80048c8 <RCCEx_PLLSAI1_Config+0x8c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048d8:	69b2      	ldr	r2, [r6, #24]
 80048da:	6923      	ldr	r3, [r4, #16]
 80048dc:	4313      	orrs	r3, r2
 80048de:	6123      	str	r3, [r4, #16]
 80048e0:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80048e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048e4:	6812      	ldr	r2, [r2, #0]
 80048e6:	0556      	lsls	r6, r2, #21
 80048e8:	d5b3      	bpl.n	8004852 <RCCEx_PLLSAI1_Config+0x16>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80048ea:	4c19      	ldr	r4, [pc, #100]	; (8004950 <RCCEx_PLLSAI1_Config+0x114>)
 80048ec:	68e2      	ldr	r2, [r4, #12]
 80048ee:	f022 0203 	bic.w	r2, r2, #3
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60e3      	str	r3, [r4, #12]
 80048f6:	e7bb      	b.n	8004870 <RCCEx_PLLSAI1_Config+0x34>
        status = HAL_TIMEOUT;
 80048f8:	2003      	movs	r0, #3
 80048fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048fc:	6814      	ldr	r4, [r2, #0]
 80048fe:	03a5      	lsls	r5, r4, #14
 8004900:	d4f3      	bmi.n	80048ea <RCCEx_PLLSAI1_Config+0xae>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004902:	6812      	ldr	r2, [r2, #0]
 8004904:	0354      	lsls	r4, r2, #13
 8004906:	d5a4      	bpl.n	8004852 <RCCEx_PLLSAI1_Config+0x16>
 8004908:	e7ef      	b.n	80048ea <RCCEx_PLLSAI1_Config+0xae>
      else if(Divider == DIVIDER_Q_UPDATE)
 800490a:	2f01      	cmp	r7, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800490c:	6925      	ldr	r5, [r4, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 800490e:	d00f      	beq.n	8004930 <RCCEx_PLLSAI1_Config+0xf4>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004910:	4b11      	ldr	r3, [pc, #68]	; (8004958 <RCCEx_PLLSAI1_Config+0x11c>)
 8004912:	68b0      	ldr	r0, [r6, #8]
 8004914:	6871      	ldr	r1, [r6, #4]
 8004916:	6972      	ldr	r2, [r6, #20]
 8004918:	402b      	ands	r3, r5
 800491a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800491e:	3901      	subs	r1, #1
 8004920:	0852      	lsrs	r2, r2, #1
 8004922:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004926:	3a01      	subs	r2, #1
 8004928:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800492c:	6123      	str	r3, [r4, #16]
 800492e:	e7c2      	b.n	80048b6 <RCCEx_PLLSAI1_Config+0x7a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004930:	4b0a      	ldr	r3, [pc, #40]	; (800495c <RCCEx_PLLSAI1_Config+0x120>)
 8004932:	68b0      	ldr	r0, [r6, #8]
 8004934:	6871      	ldr	r1, [r6, #4]
 8004936:	6932      	ldr	r2, [r6, #16]
 8004938:	402b      	ands	r3, r5
 800493a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800493e:	3901      	subs	r1, #1
 8004940:	0852      	lsrs	r2, r2, #1
 8004942:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004946:	3a01      	subs	r2, #1
 8004948:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800494c:	6123      	str	r3, [r4, #16]
 800494e:	e7b2      	b.n	80048b6 <RCCEx_PLLSAI1_Config+0x7a>
 8004950:	40021000 	.word	0x40021000
 8004954:	07ff800f 	.word	0x07ff800f
 8004958:	f9ff800f 	.word	0xf9ff800f
 800495c:	ff9f800f 	.word	0xff9f800f

08004960 <RCCEx_PLLSAI2_Config>:
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004960:	4a44      	ldr	r2, [pc, #272]	; (8004a74 <RCCEx_PLLSAI2_Config+0x114>)
{
 8004962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004964:	68d3      	ldr	r3, [r2, #12]
 8004966:	079b      	lsls	r3, r3, #30
 8004968:	d007      	beq.n	800497a <RCCEx_PLLSAI2_Config+0x1a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800496a:	68d3      	ldr	r3, [r2, #12]
 800496c:	6802      	ldr	r2, [r0, #0]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	4293      	cmp	r3, r2
 8004974:	d00c      	beq.n	8004990 <RCCEx_PLLSAI2_Config+0x30>
 8004976:	2001      	movs	r0, #1
 8004978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800497a:	6803      	ldr	r3, [r0, #0]
 800497c:	2b02      	cmp	r3, #2
 800497e:	d043      	beq.n	8004a08 <RCCEx_PLLSAI2_Config+0xa8>
 8004980:	2b03      	cmp	r3, #3
 8004982:	d04d      	beq.n	8004a20 <RCCEx_PLLSAI2_Config+0xc0>
 8004984:	2b01      	cmp	r3, #1
 8004986:	d1f6      	bne.n	8004976 <RCCEx_PLLSAI2_Config+0x16>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004988:	6812      	ldr	r2, [r2, #0]
 800498a:	0797      	lsls	r7, r2, #30
 800498c:	d5f3      	bpl.n	8004976 <RCCEx_PLLSAI2_Config+0x16>
 800498e:	e03e      	b.n	8004a0e <RCCEx_PLLSAI2_Config+0xae>
       ||
 8004990:	2b00      	cmp	r3, #0
 8004992:	d0f0      	beq.n	8004976 <RCCEx_PLLSAI2_Config+0x16>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004994:	4c37      	ldr	r4, [pc, #220]	; (8004a74 <RCCEx_PLLSAI2_Config+0x114>)
 8004996:	6823      	ldr	r3, [r4, #0]
 8004998:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800499c:	6023      	str	r3, [r4, #0]
 800499e:	460f      	mov	r7, r1
 80049a0:	4606      	mov	r6, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049a2:	f7fc fad1 	bl	8000f48 <HAL_GetTick>
 80049a6:	4605      	mov	r5, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049a8:	e004      	b.n	80049b4 <RCCEx_PLLSAI2_Config+0x54>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049aa:	f7fc facd 	bl	8000f48 <HAL_GetTick>
 80049ae:	1b40      	subs	r0, r0, r5
 80049b0:	2802      	cmp	r0, #2
 80049b2:	d833      	bhi.n	8004a1c <RCCEx_PLLSAI2_Config+0xbc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049b4:	6823      	ldr	r3, [r4, #0]
 80049b6:	009a      	lsls	r2, r3, #2
 80049b8:	d4f7      	bmi.n	80049aa <RCCEx_PLLSAI2_Config+0x4a>
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049ba:	2f00      	cmp	r7, #0
 80049bc:	d137      	bne.n	8004a2e <RCCEx_PLLSAI2_Config+0xce>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049be:	68f3      	ldr	r3, [r6, #12]
 80049c0:	68b5      	ldr	r5, [r6, #8]
 80049c2:	6960      	ldr	r0, [r4, #20]
 80049c4:	492c      	ldr	r1, [pc, #176]	; (8004a78 <RCCEx_PLLSAI2_Config+0x118>)
 80049c6:	6872      	ldr	r2, [r6, #4]
 80049c8:	06db      	lsls	r3, r3, #27
 80049ca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80049ce:	4001      	ands	r1, r0
 80049d0:	430b      	orrs	r3, r1
 80049d2:	3a01      	subs	r2, #1
 80049d4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80049d8:	6163      	str	r3, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80049da:	4c26      	ldr	r4, [pc, #152]	; (8004a74 <RCCEx_PLLSAI2_Config+0x114>)
 80049dc:	6823      	ldr	r3, [r4, #0]
 80049de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049e2:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e4:	f7fc fab0 	bl	8000f48 <HAL_GetTick>
 80049e8:	4605      	mov	r5, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049ea:	e004      	b.n	80049f6 <RCCEx_PLLSAI2_Config+0x96>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049ec:	f7fc faac 	bl	8000f48 <HAL_GetTick>
 80049f0:	1b40      	subs	r0, r0, r5
 80049f2:	2802      	cmp	r0, #2
 80049f4:	d812      	bhi.n	8004a1c <RCCEx_PLLSAI2_Config+0xbc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049f6:	6823      	ldr	r3, [r4, #0]
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	d5f7      	bpl.n	80049ec <RCCEx_PLLSAI2_Config+0x8c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80049fc:	69b2      	ldr	r2, [r6, #24]
 80049fe:	6963      	ldr	r3, [r4, #20]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	6163      	str	r3, [r4, #20]
 8004a04:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8004a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a08:	6812      	ldr	r2, [r2, #0]
 8004a0a:	0556      	lsls	r6, r2, #21
 8004a0c:	d5b3      	bpl.n	8004976 <RCCEx_PLLSAI2_Config+0x16>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004a0e:	4c19      	ldr	r4, [pc, #100]	; (8004a74 <RCCEx_PLLSAI2_Config+0x114>)
 8004a10:	68e2      	ldr	r2, [r4, #12]
 8004a12:	f022 0203 	bic.w	r2, r2, #3
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60e3      	str	r3, [r4, #12]
 8004a1a:	e7bb      	b.n	8004994 <RCCEx_PLLSAI2_Config+0x34>
        status = HAL_TIMEOUT;
 8004a1c:	2003      	movs	r0, #3
 8004a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a20:	6814      	ldr	r4, [r2, #0]
 8004a22:	03a5      	lsls	r5, r4, #14
 8004a24:	d4f3      	bmi.n	8004a0e <RCCEx_PLLSAI2_Config+0xae>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a26:	6812      	ldr	r2, [r2, #0]
 8004a28:	0354      	lsls	r4, r2, #13
 8004a2a:	d5a4      	bpl.n	8004976 <RCCEx_PLLSAI2_Config+0x16>
 8004a2c:	e7ef      	b.n	8004a0e <RCCEx_PLLSAI2_Config+0xae>
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a2e:	2f01      	cmp	r7, #1
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a30:	6965      	ldr	r5, [r4, #20]
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a32:	d00f      	beq.n	8004a54 <RCCEx_PLLSAI2_Config+0xf4>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a34:	4b11      	ldr	r3, [pc, #68]	; (8004a7c <RCCEx_PLLSAI2_Config+0x11c>)
 8004a36:	68b0      	ldr	r0, [r6, #8]
 8004a38:	6871      	ldr	r1, [r6, #4]
 8004a3a:	6972      	ldr	r2, [r6, #20]
 8004a3c:	402b      	ands	r3, r5
 8004a3e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004a42:	3901      	subs	r1, #1
 8004a44:	0852      	lsrs	r2, r2, #1
 8004a46:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004a4a:	3a01      	subs	r2, #1
 8004a4c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004a50:	6163      	str	r3, [r4, #20]
 8004a52:	e7c2      	b.n	80049da <RCCEx_PLLSAI2_Config+0x7a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a54:	4b0a      	ldr	r3, [pc, #40]	; (8004a80 <RCCEx_PLLSAI2_Config+0x120>)
 8004a56:	68b0      	ldr	r0, [r6, #8]
 8004a58:	6871      	ldr	r1, [r6, #4]
 8004a5a:	6932      	ldr	r2, [r6, #16]
 8004a5c:	402b      	ands	r3, r5
 8004a5e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004a62:	3901      	subs	r1, #1
 8004a64:	0852      	lsrs	r2, r2, #1
 8004a66:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004a6a:	3a01      	subs	r2, #1
 8004a6c:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8004a70:	6163      	str	r3, [r4, #20]
 8004a72:	e7b2      	b.n	80049da <RCCEx_PLLSAI2_Config+0x7a>
 8004a74:	40021000 	.word	0x40021000
 8004a78:	07ff800f 	.word	0x07ff800f
 8004a7c:	f9ff800f 	.word	0xf9ff800f
 8004a80:	ff9f800f 	.word	0xff9f800f

08004a84 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a88:	6803      	ldr	r3, [r0, #0]
 8004a8a:	f413 6600 	ands.w	r6, r3, #2048	; 0x800
{
 8004a8e:	b082      	sub	sp, #8
 8004a90:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a92:	d014      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x3a>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004a94:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8004a96:	2940      	cmp	r1, #64	; 0x40
 8004a98:	f000 8215 	beq.w	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004a9c:	f200 8234 	bhi.w	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004aa0:	2900      	cmp	r1, #0
 8004aa2:	f000 8201 	beq.w	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004aa6:	2920      	cmp	r1, #32
 8004aa8:	f040 8232 	bne.w	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004aac:	2100      	movs	r1, #0
 8004aae:	3020      	adds	r0, #32
 8004ab0:	f7ff ff56 	bl	8004960 <RCCEx_PLLSAI2_Config>
 8004ab4:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004ab6:	2e00      	cmp	r6, #0
 8004ab8:	f000 8239 	beq.w	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8004abc:	6823      	ldr	r3, [r4, #0]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004abe:	04df      	lsls	r7, r3, #19
 8004ac0:	f140 8132 	bpl.w	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004ac4:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8004ac6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004aca:	f000 820b 	beq.w	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8004ace:	f200 8122 	bhi.w	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004ad2:	2900      	cmp	r1, #0
 8004ad4:	f000 81ed 	beq.w	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004ad8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004adc:	f040 8123 	bne.w	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	f104 0020 	add.w	r0, r4, #32
 8004ae6:	f7ff ff3b 	bl	8004960 <RCCEx_PLLSAI2_Config>
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	4607      	mov	r7, r0
    if(ret == HAL_OK)
 8004aee:	2f00      	cmp	r7, #0
 8004af0:	f040 81e7 	bne.w	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004af4:	49c2      	ldr	r1, [pc, #776]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004af6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004af8:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8004afc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b00:	4302      	orrs	r2, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b02:	039d      	lsls	r5, r3, #14
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b04:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b08:	f100 8112 	bmi.w	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b0c:	07dd      	lsls	r5, r3, #31
 8004b0e:	d508      	bpl.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b10:	49bb      	ldr	r1, [pc, #748]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004b12:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004b14:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004b18:	f022 0203 	bic.w	r2, r2, #3
 8004b1c:	4302      	orrs	r2, r0
 8004b1e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b22:	0798      	lsls	r0, r3, #30
 8004b24:	d508      	bpl.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b26:	49b6      	ldr	r1, [pc, #728]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004b28:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004b2a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004b2e:	f022 020c 	bic.w	r2, r2, #12
 8004b32:	4302      	orrs	r2, r0
 8004b34:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b38:	0759      	lsls	r1, r3, #29
 8004b3a:	d508      	bpl.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xca>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b3c:	49b0      	ldr	r1, [pc, #704]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004b3e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004b40:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004b44:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8004b48:	4302      	orrs	r2, r0
 8004b4a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b4e:	071a      	lsls	r2, r3, #28
 8004b50:	d508      	bpl.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b52:	49ab      	ldr	r1, [pc, #684]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004b54:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004b56:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004b5a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004b5e:	4302      	orrs	r2, r0
 8004b60:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b64:	06dd      	lsls	r5, r3, #27
 8004b66:	d508      	bpl.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0xf6>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b68:	49a5      	ldr	r1, [pc, #660]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004b6a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004b6c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004b70:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004b74:	4302      	orrs	r2, r0
 8004b76:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b7a:	0698      	lsls	r0, r3, #26
 8004b7c:	d508      	bpl.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b7e:	49a0      	ldr	r1, [pc, #640]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004b80:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004b82:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004b86:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004b8a:	4302      	orrs	r2, r0
 8004b8c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b90:	0599      	lsls	r1, r3, #22
 8004b92:	d508      	bpl.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b94:	499a      	ldr	r1, [pc, #616]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004b96:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004b98:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004b9c:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8004ba0:	4302      	orrs	r2, r0
 8004ba2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ba6:	055a      	lsls	r2, r3, #21
 8004ba8:	d508      	bpl.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x138>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004baa:	4995      	ldr	r1, [pc, #596]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004bac:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004bae:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004bb2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004bb6:	4302      	orrs	r2, r0
 8004bb8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bbc:	065d      	lsls	r5, r3, #25
 8004bbe:	d508      	bpl.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bc0:	498f      	ldr	r1, [pc, #572]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004bc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004bc4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004bc8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004bcc:	4302      	orrs	r2, r0
 8004bce:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bd2:	0618      	lsls	r0, r3, #24
 8004bd4:	d508      	bpl.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x164>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bd6:	498a      	ldr	r1, [pc, #552]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004bd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bda:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004bde:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004be2:	4302      	orrs	r2, r0
 8004be4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004be8:	05d9      	lsls	r1, r3, #23
 8004bea:	d508      	bpl.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x17a>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bec:	4984      	ldr	r1, [pc, #528]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004bee:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004bf0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004bf4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004bf8:	4302      	orrs	r2, r0
 8004bfa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bfe:	02da      	lsls	r2, r3, #11
 8004c00:	d508      	bpl.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x190>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c02:	497f      	ldr	r1, [pc, #508]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004c04:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004c06:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8004c0a:	f022 0203 	bic.w	r2, r2, #3
 8004c0e:	4302      	orrs	r2, r0
 8004c10:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c14:	049d      	lsls	r5, r3, #18
 8004c16:	d510      	bpl.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c18:	4879      	ldr	r0, [pc, #484]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004c1a:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004c1c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004c20:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004c24:	430a      	orrs	r2, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c26:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c2a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c2e:	f000 812a 	beq.w	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x402>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c32:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004c36:	f000 817d 	beq.w	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c3a:	0318      	lsls	r0, r3, #12
 8004c3c:	d51a      	bpl.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c3e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8004c40:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8004c44:	f000 8124 	beq.w	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8004c48:	496d      	ldr	r1, [pc, #436]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004c4a:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8004c4e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c52:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
 8004c56:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004c5a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004c5e:	4302      	orrs	r2, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c60:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c64:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c68:	f000 8159 	beq.w	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x49a>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c6c:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8004c70:	f000 8176 	beq.w	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c74:	0359      	lsls	r1, r3, #13
 8004c76:	d510      	bpl.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x216>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c78:	4861      	ldr	r0, [pc, #388]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004c7a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004c7c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004c80:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004c84:	430a      	orrs	r2, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c86:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c8a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c8e:	f000 80f5 	beq.w	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004c92:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004c96:	f000 8158 	beq.w	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c9a:	045a      	lsls	r2, r3, #17
 8004c9c:	d50d      	bpl.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c9e:	4858      	ldr	r0, [pc, #352]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004ca0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8004ca4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004ca8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004cac:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004cae:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cb2:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004cb6:	f000 811c 	beq.w	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004cba:	03dd      	lsls	r5, r3, #15
 8004cbc:	d509      	bpl.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x24e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004cbe:	4950      	ldr	r1, [pc, #320]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004cc0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004cc4:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8004cc8:	f022 0204 	bic.w	r2, r2, #4
 8004ccc:	4302      	orrs	r2, r0
 8004cce:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004cd2:	0298      	lsls	r0, r3, #10
 8004cd4:	d509      	bpl.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x266>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004cd6:	494a      	ldr	r1, [pc, #296]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004cd8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8004cdc:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8004ce0:	f022 0218 	bic.w	r2, r2, #24
 8004ce4:	4302      	orrs	r2, r0
 8004ce6:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004cea:	0259      	lsls	r1, r3, #9
 8004cec:	f100 8094 	bmi.w	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x394>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004cf0:	01db      	lsls	r3, r3, #7
 8004cf2:	d50c      	bpl.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004cf4:	4a42      	ldr	r2, [pc, #264]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004cf6:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8004cfa:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004cfe:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004d02:	430b      	orrs	r3, r1
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004d04:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004d08:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004d0c:	d07c      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x384>
}
 8004d0e:	4630      	mov	r0, r6
 8004d10:	b002      	add	sp, #8
 8004d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch(PeriphClkInit->Sai2ClockSelection)
 8004d16:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8004d1a:	f000 80fb 	beq.w	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x490>
 8004d1e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004d22:	f000 80f7 	beq.w	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x490>
      ret = HAL_ERROR;
 8004d26:	2601      	movs	r6, #1
 8004d28:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d2a:	039d      	lsls	r5, r3, #14
 8004d2c:	f57f aeee 	bpl.w	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x88>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d30:	4b33      	ldr	r3, [pc, #204]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004d32:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004d34:	00d0      	lsls	r0, r2, #3
 8004d36:	d556      	bpl.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    FlagStatus       pwrclkchanged = RESET;
 8004d38:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d3c:	4d31      	ldr	r5, [pc, #196]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x380>)
 8004d3e:	682b      	ldr	r3, [r5, #0]
 8004d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d44:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004d46:	f7fc f8ff 	bl	8000f48 <HAL_GetTick>
 8004d4a:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d4c:	e006      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d4e:	f7fc f8fb 	bl	8000f48 <HAL_GetTick>
 8004d52:	eba0 0009 	sub.w	r0, r0, r9
 8004d56:	2802      	cmp	r0, #2
 8004d58:	f200 8085 	bhi.w	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d5c:	682b      	ldr	r3, [r5, #0]
 8004d5e:	05d9      	lsls	r1, r3, #23
 8004d60:	d5f5      	bpl.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    if(ret == HAL_OK)
 8004d62:	2f00      	cmp	r7, #0
 8004d64:	f040 8109 	bne.w	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d68:	4a25      	ldr	r2, [pc, #148]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d6a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d6e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d72:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004d76:	d029      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004d78:	428b      	cmp	r3, r1
 8004d7a:	f000 80fc 	beq.w	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d7e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d82:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 8004d86:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8004d8a:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d8e:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d96:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8004d9a:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8004d9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004da2:	07da      	lsls	r2, r3, #31
 8004da4:	d512      	bpl.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x348>
        tickstart = HAL_GetTick();
 8004da6:	f7fc f8cf 	bl	8000f48 <HAL_GetTick>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004daa:	4d15      	ldr	r5, [pc, #84]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
        tickstart = HAL_GetTick();
 8004dac:	4682      	mov	sl, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dae:	f241 3988 	movw	r9, #5000	; 0x1388
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004db2:	e005      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004db4:	f7fc f8c8 	bl	8000f48 <HAL_GetTick>
 8004db8:	eba0 000a 	sub.w	r0, r0, sl
 8004dbc:	4548      	cmp	r0, r9
 8004dbe:	d852      	bhi.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dc0:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8004dc4:	079b      	lsls	r3, r3, #30
 8004dc6:	d5f5      	bpl.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004dc8:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dcc:	4a0c      	ldr	r2, [pc, #48]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004dce:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dd6:	430b      	orrs	r3, r1
 8004dd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if(pwrclkchanged == SET)
 8004ddc:	f1b8 0f00 	cmp.w	r8, #0
 8004de0:	d146      	bne.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	e692      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x88>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004de6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004de8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004dec:	659a      	str	r2, [r3, #88]	; 0x58
 8004dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df4:	9301      	str	r3, [sp, #4]
 8004df6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004df8:	f04f 0801 	mov.w	r8, #1
 8004dfc:	e79e      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004dfe:	bf00      	nop
 8004e00:	40021000 	.word	0x40021000
 8004e04:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e08:	68d3      	ldr	r3, [r2, #12]
}
 8004e0a:	4630      	mov	r0, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e10:	60d3      	str	r3, [r2, #12]
}
 8004e12:	b002      	add	sp, #8
 8004e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e18:	4d5a      	ldr	r5, [pc, #360]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x500>)
 8004e1a:	682b      	ldr	r3, [r5, #0]
 8004e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e20:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004e22:	f7fc f891 	bl	8000f48 <HAL_GetTick>
 8004e26:	4680      	mov	r8, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e28:	e005      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e2a:	f7fc f88d 	bl	8000f48 <HAL_GetTick>
 8004e2e:	eba0 0008 	sub.w	r0, r0, r8
 8004e32:	2802      	cmp	r0, #2
 8004e34:	d870      	bhi.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x494>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e36:	682b      	ldr	r3, [r5, #0]
 8004e38:	009a      	lsls	r2, r3, #2
 8004e3a:	d4f6      	bmi.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    if(ret == HAL_OK)
 8004e3c:	2f00      	cmp	r7, #0
 8004e3e:	d173      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004e40:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8004e44:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004e48:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004e52:	2102      	movs	r1, #2
 8004e54:	f104 0020 	add.w	r0, r4, #32
 8004e58:	f7ff fd82 	bl	8004960 <RCCEx_PLLSAI2_Config>
    if(ret != HAL_OK)
 8004e5c:	2800      	cmp	r0, #0
 8004e5e:	f040 808e 	bne.w	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004e62:	6823      	ldr	r3, [r4, #0]
 8004e64:	e744      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
        ret = HAL_TIMEOUT;
 8004e66:	2603      	movs	r6, #3
 8004e68:	4637      	mov	r7, r6
    if(pwrclkchanged == SET)
 8004e6a:	f1b8 0f00 	cmp.w	r8, #0
 8004e6e:	d0b8      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e70:	4a44      	ldr	r2, [pc, #272]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x500>)
 8004e72:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e78:	6593      	str	r3, [r2, #88]	; 0x58
 8004e7a:	e7b2      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e7c:	68c2      	ldr	r2, [r0, #12]
 8004e7e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004e82:	60c2      	str	r2, [r0, #12]
 8004e84:	e709      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x216>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e86:	68c2      	ldr	r2, [r0, #12]
 8004e88:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004e8c:	60c2      	str	r2, [r0, #12]
 8004e8e:	e6d4      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e90:	4a3c      	ldr	r2, [pc, #240]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x500>)
 8004e92:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
 8004e96:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8004e9a:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e9e:	68d1      	ldr	r1, [r2, #12]
 8004ea0:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004ea4:	60d1      	str	r1, [r2, #12]
 8004ea6:	e6e5      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ea8:	3004      	adds	r0, #4
 8004eaa:	f7ff fcc7 	bl	800483c <RCCEx_PLLSAI1_Config>
 8004eae:	4606      	mov	r6, r0
      break;
 8004eb0:	e601      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x32>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004eb2:	1d20      	adds	r0, r4, #4
 8004eb4:	f7ff fcc2 	bl	800483c <RCCEx_PLLSAI1_Config>
 8004eb8:	4607      	mov	r7, r0
 8004eba:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004ebc:	2f00      	cmp	r7, #0
 8004ebe:	f43f ae19 	beq.w	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004ec2:	463e      	mov	r6, r7
 8004ec4:	e731      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ec6:	482f      	ldr	r0, [pc, #188]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x500>)
 8004ec8:	68c2      	ldr	r2, [r0, #12]
 8004eca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004ece:	60c2      	str	r2, [r0, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ed0:	482c      	ldr	r0, [pc, #176]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x500>)
 8004ed2:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 8004ed6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004eda:	4311      	orrs	r1, r2
 8004edc:	f8c0 109c 	str.w	r1, [r0, #156]	; 0x9c
 8004ee0:	2600      	movs	r6, #0
 8004ee2:	e5ec      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ee4:	4927      	ldr	r1, [pc, #156]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x500>)
 8004ee6:	68ca      	ldr	r2, [r1, #12]
 8004ee8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004eec:	60ca      	str	r2, [r1, #12]
      break;
 8004eee:	4637      	mov	r7, r6
 8004ef0:	e5fd      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x6a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ef2:	2102      	movs	r1, #2
 8004ef4:	1d20      	adds	r0, r4, #4
 8004ef6:	f7ff fca1 	bl	800483c <RCCEx_PLLSAI1_Config>
 8004efa:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8004efc:	4607      	mov	r7, r0
 8004efe:	2800      	cmp	r0, #0
 8004f00:	f43f aedb 	beq.w	8004cba <HAL_RCCEx_PeriphCLKConfig+0x236>
 8004f04:	4606      	mov	r6, r0
 8004f06:	e6d8      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x236>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004f08:	2960      	cmp	r1, #96	; 0x60
 8004f0a:	d0e1      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 8004f0c:	2980      	cmp	r1, #128	; 0x80
 8004f0e:	d0df      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x44c>
      ret = HAL_ERROR;
 8004f10:	2601      	movs	r6, #1
 8004f12:	e5d4      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x3a>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004f14:	4637      	mov	r7, r6
 8004f16:	e5ea      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004f18:	6823      	ldr	r3, [r4, #0]
        ret = HAL_TIMEOUT;
 8004f1a:	2603      	movs	r6, #3
 8004f1c:	e6e8      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f1e:	68ca      	ldr	r2, [r1, #12]
 8004f20:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004f24:	60ca      	str	r2, [r1, #12]
 8004f26:	e6a5      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    if(ret == HAL_OK)
 8004f28:	463e      	mov	r6, r7
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	e6e0      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004f2e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8004f30:	6823      	ldr	r3, [r4, #0]
 8004f32:	e7cd      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x44c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f34:	2101      	movs	r1, #1
 8004f36:	1d20      	adds	r0, r4, #4
 8004f38:	f7ff fc80 	bl	800483c <RCCEx_PLLSAI1_Config>
 8004f3c:	6823      	ldr	r3, [r4, #0]
        if(ret != HAL_OK)
 8004f3e:	4607      	mov	r7, r0
 8004f40:	2800      	cmp	r0, #0
 8004f42:	f43f ae7a 	beq.w	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004f46:	4606      	mov	r6, r0
 8004f48:	e677      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	1d20      	adds	r0, r4, #4
 8004f4e:	f7ff fc75 	bl	800483c <RCCEx_PLLSAI1_Config>
 8004f52:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8004f54:	4607      	mov	r7, r0
 8004f56:	2800      	cmp	r0, #0
 8004f58:	f43f ae9f 	beq.w	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x216>
 8004f5c:	4606      	mov	r6, r0
 8004f5e:	e69c      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x216>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f60:	2101      	movs	r1, #1
 8004f62:	1d20      	adds	r0, r4, #4
 8004f64:	f7ff fc6a 	bl	800483c <RCCEx_PLLSAI1_Config>
 8004f68:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8004f6a:	4607      	mov	r7, r0
 8004f6c:	2800      	cmp	r0, #0
 8004f6e:	f43f ae81 	beq.w	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8004f72:	4606      	mov	r6, r0
 8004f74:	e67e      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8004f76:	460b      	mov	r3, r1
 8004f78:	e713      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
 8004f7a:	463e      	mov	r6, r7
 8004f7c:	e72e      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x358>
    if(ret != HAL_OK)
 8004f7e:	4606      	mov	r6, r0
 8004f80:	6823      	ldr	r3, [r4, #0]
 8004f82:	e6b5      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004f84:	40021000 	.word	0x40021000

08004f88 <HAL_RTC_Init>:
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_ERROR;

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004f88:	2800      	cmp	r0, #0
 8004f8a:	d06e      	beq.n	800506a <HAL_RTC_Init+0xe2>
{
 8004f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004f8e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8004f92:	4604      	mov	r4, r0
 8004f94:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d04f      	beq.n	800503c <HAL_RTC_Init+0xb4>
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f9c:	6823      	ldr	r3, [r4, #0]
 8004f9e:	2253      	movs	r2, #83	; 0x53
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004fa0:	2002      	movs	r0, #2
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fa2:	21ca      	movs	r1, #202	; 0xca
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004fa4:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fa8:	6259      	str	r1, [r3, #36]	; 0x24
 8004faa:	625a      	str	r2, [r3, #36]	; 0x24
        return HAL_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	0655      	lsls	r5, r2, #25
 8004fb0:	d52c      	bpl.n	800500c <HAL_RTC_Init+0x84>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004fb2:	6899      	ldr	r1, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004fb4:	6862      	ldr	r2, [r4, #4]
 8004fb6:	6927      	ldr	r7, [r4, #16]
 8004fb8:	69a6      	ldr	r6, [r4, #24]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004fba:	68a0      	ldr	r0, [r4, #8]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004fbc:	68e5      	ldr	r5, [r4, #12]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004fbe:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8004fc2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8004fc6:	6099      	str	r1, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004fc8:	6899      	ldr	r1, [r3, #8]
 8004fca:	433a      	orrs	r2, r7
 8004fcc:	4332      	orrs	r2, r6
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004fd2:	611d      	str	r5, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004fd4:	691a      	ldr	r2, [r3, #16]
 8004fd6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004fda:	611a      	str	r2, [r3, #16]
      CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004fdc:	68da      	ldr	r2, [r3, #12]
 8004fde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fe2:	60da      	str	r2, [r3, #12]
      if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004fe4:	689a      	ldr	r2, [r3, #8]
 8004fe6:	0692      	lsls	r2, r2, #26
 8004fe8:	d52d      	bpl.n	8005046 <HAL_RTC_Init+0xbe>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004fea:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004fec:	6960      	ldr	r0, [r4, #20]
 8004fee:	69e2      	ldr	r2, [r4, #28]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004ff0:	f021 0103 	bic.w	r1, r1, #3
 8004ff4:	64d9      	str	r1, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004ff6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004ff8:	4302      	orrs	r2, r0
 8004ffa:	430a      	orrs	r2, r1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ffc:	25ff      	movs	r5, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_READY;
 8004ffe:	2101      	movs	r1, #1
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005000:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->State = HAL_RTC_STATE_READY;
 8005002:	2000      	movs	r0, #0
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005004:	625d      	str	r5, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_READY;
 8005006:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
 800500a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800500c:	f04f 32ff 	mov.w	r2, #4294967295
 8005010:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005012:	f7fb ff99 	bl	8000f48 <HAL_GetTick>
 8005016:	4605      	mov	r5, r0
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005018:	6823      	ldr	r3, [r4, #0]
 800501a:	68da      	ldr	r2, [r3, #12]
 800501c:	0650      	lsls	r0, r2, #25
 800501e:	d4c8      	bmi.n	8004fb2 <HAL_RTC_Init+0x2a>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005020:	f7fb ff92 	bl	8000f48 <HAL_GetTick>
 8005024:	1b40      	subs	r0, r0, r5
 8005026:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800502a:	d9f5      	bls.n	8005018 <HAL_RTC_Init+0x90>
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800502c:	6822      	ldr	r2, [r4, #0]
 800502e:	21ff      	movs	r1, #255	; 0xff
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005030:	2304      	movs	r3, #4
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005032:	6251      	str	r1, [r2, #36]	; 0x24
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005034:	2001      	movs	r0, #1
 8005036:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800503a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hrtc->Lock = HAL_UNLOCKED;
 800503c:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 8005040:	f00b fce4 	bl	8010a0c <HAL_RTC_MspInit>
 8005044:	e7aa      	b.n	8004f9c <HAL_RTC_Init+0x14>
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005046:	68da      	ldr	r2, [r3, #12]
 8005048:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800504c:	60da      	str	r2, [r3, #12]
  tickstart = HAL_GetTick();
 800504e:	f7fb ff7b 	bl	8000f48 <HAL_GetTick>
 8005052:	4605      	mov	r5, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005054:	6823      	ldr	r3, [r4, #0]
 8005056:	68da      	ldr	r2, [r3, #12]
 8005058:	0691      	lsls	r1, r2, #26
 800505a:	d4c6      	bmi.n	8004fea <HAL_RTC_Init+0x62>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800505c:	f7fb ff74 	bl	8000f48 <HAL_GetTick>
 8005060:	1b40      	subs	r0, r0, r5
 8005062:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005066:	d9f5      	bls.n	8005054 <HAL_RTC_Init+0xcc>
 8005068:	e7e0      	b.n	800502c <HAL_RTC_Init+0xa4>
  HAL_StatusTypeDef status = HAL_ERROR;
 800506a:	2001      	movs	r0, #1
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop

08005070 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005074:	b087      	sub	sp, #28
 8005076:	4605      	mov	r5, r0
 8005078:	4688      	mov	r8, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800507a:	f7fb ff65 	bl	8000f48 <HAL_GetTick>
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
  uint32_t *scr = pSCR;
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 800507e:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 8005080:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8005082:	6828      	ldr	r0, [r5, #0]
 8005084:	f002 fc58 	bl	8007938 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005088:	4604      	mov	r4, r0
 800508a:	b118      	cbz	r0, 8005094 <SD_FindSCR+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
    
  }

  return HAL_SD_ERROR_NONE;
}
 800508c:	4620      	mov	r0, r4
 800508e:	b007      	add	sp, #28
 8005090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8005094:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8005096:	6828      	ldr	r0, [r5, #0]
 8005098:	0409      	lsls	r1, r1, #16
 800509a:	f002 fd41 	bl	8007b20 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800509e:	4604      	mov	r4, r0
 80050a0:	2800      	cmp	r0, #0
 80050a2:	d1f3      	bne.n	800508c <SD_FindSCR+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80050a4:	f04f 31ff 	mov.w	r1, #4294967295
  config.DataLength    = 8;
 80050a8:	2008      	movs	r0, #8
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80050aa:	2202      	movs	r2, #2
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80050ac:	2301      	movs	r3, #1
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80050ae:	9100      	str	r1, [sp, #0]
  config.DataLength    = 8;
 80050b0:	9001      	str	r0, [sp, #4]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80050b2:	4669      	mov	r1, sp
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80050b4:	2730      	movs	r7, #48	; 0x30
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80050b6:	6828      	ldr	r0, [r5, #0]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80050b8:	9404      	str	r4, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80050ba:	9203      	str	r2, [sp, #12]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80050bc:	9305      	str	r3, [sp, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80050be:	9702      	str	r7, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80050c0:	f002 fc26 	bl	8007910 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80050c4:	6828      	ldr	r0, [r5, #0]
 80050c6:	f002 fde5 	bl	8007c94 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80050ca:	4604      	mov	r4, r0
 80050cc:	2800      	cmp	r0, #0
 80050ce:	d1dd      	bne.n	800508c <SD_FindSCR+0x1c>
 80050d0:	4683      	mov	fp, r0
 80050d2:	4682      	mov	sl, r0
 80050d4:	4681      	mov	r9, r0
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80050d6:	f240 572a 	movw	r7, #1322	; 0x52a
 80050da:	e004      	b.n	80050e6 <SD_FindSCR+0x76>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80050dc:	f7fb ff34 	bl	8000f48 <HAL_GetTick>
 80050e0:	1b80      	subs	r0, r0, r6
 80050e2:	3001      	adds	r0, #1
 80050e4:	d018      	beq.n	8005118 <SD_FindSCR+0xa8>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80050e6:	6828      	ldr	r0, [r5, #0]
 80050e8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80050ea:	423b      	tst	r3, r7
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80050ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80050ee:	d10e      	bne.n	800510e <SD_FindSCR+0x9e>
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80050f0:	031b      	lsls	r3, r3, #12
 80050f2:	d4f3      	bmi.n	80050dc <SD_FindSCR+0x6c>
 80050f4:	f1b9 0f00 	cmp.w	r9, #0
 80050f8:	d1f0      	bne.n	80050dc <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80050fa:	f002 fbf5 	bl	80078e8 <SDMMC_ReadFIFO>
 80050fe:	4682      	mov	sl, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8005100:	6828      	ldr	r0, [r5, #0]
 8005102:	f002 fbf1 	bl	80078e8 <SDMMC_ReadFIFO>
      index++;
 8005106:	f04f 0901 	mov.w	r9, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800510a:	4683      	mov	fp, r0
 800510c:	e7e6      	b.n	80050dc <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800510e:	0719      	lsls	r1, r3, #28
 8005110:	d505      	bpl.n	800511e <SD_FindSCR+0xae>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005112:	2408      	movs	r4, #8
 8005114:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005116:	e7b9      	b.n	800508c <SD_FindSCR+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 8005118:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800511c:	e7b6      	b.n	800508c <SD_FindSCR+0x1c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800511e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005120:	079a      	lsls	r2, r3, #30
 8005122:	d502      	bpl.n	800512a <SD_FindSCR+0xba>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005124:	2402      	movs	r4, #2
 8005126:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005128:	e7b0      	b.n	800508c <SD_FindSCR+0x1c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800512a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800512c:	069b      	lsls	r3, r3, #26
 800512e:	d502      	bpl.n	8005136 <SD_FindSCR+0xc6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005130:	2420      	movs	r4, #32
 8005132:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8005134:	e7aa      	b.n	800508c <SD_FindSCR+0x1c>
 8005136:	fa9b f28b 	rev.w	r2, fp
 800513a:	fa9a f38a 	rev.w	r3, sl
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800513e:	4902      	ldr	r1, [pc, #8]	; (8005148 <SD_FindSCR+0xd8>)
 8005140:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005142:	e888 000c 	stmia.w	r8, {r2, r3}
  return HAL_SD_ERROR_NONE;
 8005146:	e7a1      	b.n	800508c <SD_FindSCR+0x1c>
 8005148:	18000f3a 	.word	0x18000f3a

0800514c <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800514c:	6e02      	ldr	r2, [r0, #96]	; 0x60
{
 800514e:	b4f0      	push	{r4, r5, r6, r7}
 8005150:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005152:	0f97      	lsrs	r7, r2, #30
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005154:	f3c2 6683 	ubfx	r6, r2, #26, #4
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005158:	f3c2 6501 	ubfx	r5, r2, #24, #2
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800515c:	f3c2 4407 	ubfx	r4, r2, #16, #8
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005160:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005164:	b2d2      	uxtb	r2, r2
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005166:	700f      	strb	r7, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005168:	704e      	strb	r6, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800516a:	708d      	strb	r5, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800516c:	70cc      	strb	r4, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800516e:	7108      	strb	r0, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005170:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005172:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005174:	0d15      	lsrs	r5, r2, #20
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005176:	f3c2 4403 	ubfx	r4, r2, #16, #4
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800517a:	80cd      	strh	r5, [r1, #6]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800517c:	2000      	movs	r0, #0
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800517e:	720c      	strb	r4, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005180:	f3c2 37c0 	ubfx	r7, r2, #15, #1
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005184:	f3c2 3680 	ubfx	r6, r2, #14, #1
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005188:	f3c2 3540 	ubfx	r5, r2, #13, #1
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800518c:	f3c2 3400 	ubfx	r4, r2, #12, #1
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005190:	724f      	strb	r7, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005192:	728e      	strb	r6, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005194:	72cd      	strb	r5, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005196:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005198:	7348      	strb	r0, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 800519a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800519c:	2800      	cmp	r0, #0
 800519e:	d16c      	bne.n	800527a <HAL_SD_GetCardCSD+0x12e>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80051a0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80051a2:	f640 74fc 	movw	r4, #4092	; 0xffc
 80051a6:	ea04 0282 	and.w	r2, r4, r2, lsl #2
 80051aa:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 80051ae:	610a      	str	r2, [r1, #16]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80051b0:	f3c0 5542 	ubfx	r5, r0, #21, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80051b4:	f3c0 4482 	ubfx	r4, r0, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80051b8:	f3c0 32c2 	ubfx	r2, r0, #15, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80051bc:	f3c0 67c2 	ubfx	r7, r0, #27, #3
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80051c0:	f3c0 6602 	ubfx	r6, r0, #24, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80051c4:	750f      	strb	r7, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80051c6:	754e      	strb	r6, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80051c8:	758d      	strb	r5, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80051ca:	75cc      	strb	r4, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80051cc:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80051ce:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80051d0:	7e0c      	ldrb	r4, [r1, #24]
 80051d2:	f004 0407 	and.w	r4, r4, #7
 80051d6:	3402      	adds	r4, #2
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80051d8:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80051da:	40a2      	lsls	r2, r4
 80051dc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80051de:	7a0d      	ldrb	r5, [r1, #8]
 80051e0:	2401      	movs	r4, #1
 80051e2:	f005 050f 	and.w	r5, r5, #15
 80051e6:	40ac      	lsls	r4, r5
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 80051e8:	0a65      	lsrs	r5, r4, #9
 80051ea:	fb02 f205 	mul.w	r2, r2, r5
    hsd->SdCard.LogBlockSize = 512U;
 80051ee:	f44f 7500 	mov.w	r5, #512	; 0x200
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80051f2:	651c      	str	r4, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 80051f4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 80051f6:	659d      	str	r5, [r3, #88]	; 0x58
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80051f8:	f3c0 3480 	ubfx	r4, r0, #14, #1
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80051fc:	f3c0 12c6 	ubfx	r2, r0, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005200:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005204:	764c      	strb	r4, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005206:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005208:	76c8      	strb	r0, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800520a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800520c:	0fdd      	lsrs	r5, r3, #31
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800520e:	f3c3 7441 	ubfx	r4, r3, #29, #2
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005212:	f3c3 6282 	ubfx	r2, r3, #26, #3
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005216:	770d      	strb	r5, [r1, #28]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005218:	f3c3 5783 	ubfx	r7, r3, #22, #4
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800521c:	774c      	strb	r4, [r1, #29]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800521e:	f3c3 5640 	ubfx	r6, r3, #21, #1
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005222:	778a      	strb	r2, [r1, #30]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005224:	f3c3 4500 	ubfx	r5, r3, #16, #1
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005228:	f3c3 34c0 	ubfx	r4, r3, #15, #1
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800522c:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->Reserved3 = 0;
 8005230:	2000      	movs	r0, #0
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005232:	77cf      	strb	r7, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005234:	f881 6020 	strb.w	r6, [r1, #32]
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005238:	f3c3 3740 	ubfx	r7, r3, #13, #1
  pCSD->Reserved3 = 0;
 800523c:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005240:	f3c3 3600 	ubfx	r6, r3, #12, #1
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005244:	f881 5022 	strb.w	r5, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005248:	f881 4023 	strb.w	r4, [r1, #35]	; 0x23
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800524c:	f3c3 2581 	ubfx	r5, r3, #10, #2
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005250:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005254:	f3c3 2401 	ubfx	r4, r3, #8, #2
  pCSD->Reserved4 = 1;
 8005258:	2201      	movs	r2, #1
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800525a:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800525e:	f881 7025 	strb.w	r7, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005262:	f881 6026 	strb.w	r6, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005266:	f881 5027 	strb.w	r5, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800526a:	f881 4028 	strb.w	r4, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800526e:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8005272:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
}
 8005276:	bcf0      	pop	{r4, r5, r6, r7}
 8005278:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800527a:	2801      	cmp	r0, #1
 800527c:	d00c      	beq.n	8005298 <HAL_SD_GetCardCSD+0x14c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	490e      	ldr	r1, [pc, #56]	; (80052bc <HAL_SD_GetCardCSD+0x170>)
 8005282:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005284:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005286:	2101      	movs	r1, #1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005288:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800528c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800528e:	4608      	mov	r0, r1
    hsd->State = HAL_SD_STATE_READY;
 8005290:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 8005294:	bcf0      	pop	{r4, r5, r6, r7}
 8005296:	4770      	bx	lr
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005298:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800529a:	0412      	lsls	r2, r2, #16
 800529c:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 80052a0:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
 80052a4:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80052a6:	690a      	ldr	r2, [r1, #16]
 80052a8:	3201      	adds	r2, #1
 80052aa:	0292      	lsls	r2, r2, #10
    hsd->SdCard.BlockSize = 512U;
 80052ac:	f44f 7400 	mov.w	r4, #512	; 0x200
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80052b0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80052b2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80052b4:	651c      	str	r4, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80052b6:	659c      	str	r4, [r3, #88]	; 0x58
 80052b8:	e79e      	b.n	80051f8 <HAL_SD_GetCardCSD+0xac>
 80052ba:	bf00      	nop
 80052bc:	1fe00fff 	.word	0x1fe00fff

080052c0 <HAL_SD_ConfigWideBusOperation>:
{
 80052c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80052c2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  hsd->State = HAL_SD_STATE_BUSY;
 80052c4:	2203      	movs	r2, #3
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80052c6:	4293      	cmp	r3, r2
{
 80052c8:	b08b      	sub	sp, #44	; 0x2c
 80052ca:	4604      	mov	r4, r0
  hsd->State = HAL_SD_STATE_BUSY;
 80052cc:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
{
 80052d0:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80052d2:	d015      	beq.n	8005300 <HAL_SD_ConfigWideBusOperation+0x40>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80052d4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80052d8:	d012      	beq.n	8005300 <HAL_SD_ConfigWideBusOperation+0x40>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80052da:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80052de:	d030      	beq.n	8005342 <HAL_SD_ConfigWideBusOperation+0x82>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80052e0:	2900      	cmp	r1, #0
 80052e2:	d03d      	beq.n	8005360 <HAL_SD_ConfigWideBusOperation+0xa0>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80052e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80052e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052ea:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80052ec:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80052ee:	b175      	cbz	r5, 800530e <HAL_SD_ConfigWideBusOperation+0x4e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	4a3a      	ldr	r2, [pc, #232]	; (80053dc <HAL_SD_ConfigWideBusOperation+0x11c>)
 80052f4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80052f6:	2001      	movs	r0, #1
 80052f8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 80052fc:	b00b      	add	sp, #44	; 0x2c
 80052fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005300:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005306:	63a3      	str	r3, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005308:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800530a:	2d00      	cmp	r5, #0
 800530c:	d1f0      	bne.n	80052f0 <HAL_SD_ConfigWideBusOperation+0x30>
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800530e:	6922      	ldr	r2, [r4, #16]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005310:	6963      	ldr	r3, [r4, #20]
 8005312:	9308      	str	r3, [sp, #32]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005314:	9207      	str	r2, [sp, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8005316:	ab0a      	add	r3, sp, #40	; 0x28
 8005318:	e913 0007 	ldmdb	r3, {r0, r1, r2}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800531c:	6867      	ldr	r7, [r4, #4]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800531e:	68a3      	ldr	r3, [r4, #8]
    Init.BusWide             = WideMode;
 8005320:	9606      	str	r6, [sp, #24]
    (void)SDMMC_Init(hsd->Instance, Init);
 8005322:	6826      	ldr	r6, [r4, #0]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005324:	9305      	str	r3, [sp, #20]
    (void)SDMMC_Init(hsd->Instance, Init);
 8005326:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800532a:	9704      	str	r7, [sp, #16]
    (void)SDMMC_Init(hsd->Instance, Init);
 800532c:	ab04      	add	r3, sp, #16
 800532e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005330:	4630      	mov	r0, r6
 8005332:	f002 fabf 	bl	80078b4 <SDMMC_Init>
  hsd->State = HAL_SD_STATE_READY;
 8005336:	2301      	movs	r3, #1
  return HAL_OK;
 8005338:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800533a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800533e:	b00b      	add	sp, #44	; 0x2c
 8005340:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t scr[2] = {0, 0};
 8005342:	2300      	movs	r3, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005344:	4619      	mov	r1, r3
 8005346:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 8005348:	9304      	str	r3, [sp, #16]
 800534a:	9305      	str	r3, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800534c:	f002 fadc 	bl	8007908 <SDMMC_GetResponse>
 8005350:	0180      	lsls	r0, r0, #6
 8005352:	d51e      	bpl.n	8005392 <HAL_SD_ConfigWideBusOperation+0xd2>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005354:	f44f 6000 	mov.w	r0, #2048	; 0x800
      hsd->ErrorCode |= errorstate;
 8005358:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800535a:	4318      	orrs	r0, r3
 800535c:	63a0      	str	r0, [r4, #56]	; 0x38
 800535e:	e7c5      	b.n	80052ec <HAL_SD_ConfigWideBusOperation+0x2c>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005360:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 8005362:	9104      	str	r1, [sp, #16]
 8005364:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005366:	f002 facf 	bl	8007908 <SDMMC_GetResponse>
 800536a:	0182      	lsls	r2, r0, #6
 800536c:	d505      	bpl.n	800537a <HAL_SD_ConfigWideBusOperation+0xba>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800536e:	f44f 6000 	mov.w	r0, #2048	; 0x800
      hsd->ErrorCode |= errorstate;
 8005372:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005374:	4308      	orrs	r0, r1
 8005376:	63a0      	str	r0, [r4, #56]	; 0x38
 8005378:	e7b8      	b.n	80052ec <HAL_SD_ConfigWideBusOperation+0x2c>
  errorstate = SD_FindSCR(hsd, scr);
 800537a:	a904      	add	r1, sp, #16
 800537c:	4620      	mov	r0, r4
 800537e:	f7ff fe77 	bl	8005070 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005382:	2800      	cmp	r0, #0
 8005384:	d1f5      	bne.n	8005372 <HAL_SD_ConfigWideBusOperation+0xb2>
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005386:	9b05      	ldr	r3, [sp, #20]
 8005388:	03db      	lsls	r3, r3, #15
 800538a:	d40e      	bmi.n	80053aa <HAL_SD_ConfigWideBusOperation+0xea>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800538c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005390:	e7ef      	b.n	8005372 <HAL_SD_ConfigWideBusOperation+0xb2>
  errorstate = SD_FindSCR(hsd, scr);
 8005392:	a904      	add	r1, sp, #16
 8005394:	4620      	mov	r0, r4
 8005396:	f7ff fe6b 	bl	8005070 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800539a:	2800      	cmp	r0, #0
 800539c:	d1dc      	bne.n	8005358 <HAL_SD_ConfigWideBusOperation+0x98>
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800539e:	9b05      	ldr	r3, [sp, #20]
 80053a0:	0359      	lsls	r1, r3, #13
 80053a2:	d40e      	bmi.n	80053c2 <HAL_SD_ConfigWideBusOperation+0x102>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80053a4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80053a8:	e7d6      	b.n	8005358 <HAL_SD_ConfigWideBusOperation+0x98>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80053aa:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80053ac:	6820      	ldr	r0, [r4, #0]
 80053ae:	0409      	lsls	r1, r1, #16
 80053b0:	f002 fbb6 	bl	8007b20 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80053b4:	2800      	cmp	r0, #0
 80053b6:	d1dc      	bne.n	8005372 <HAL_SD_ConfigWideBusOperation+0xb2>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 80053b8:	4601      	mov	r1, r0
 80053ba:	6820      	ldr	r0, [r4, #0]
 80053bc:	f002 fc28 	bl	8007c10 <SDMMC_CmdBusWidth>
 80053c0:	e7d7      	b.n	8005372 <HAL_SD_ConfigWideBusOperation+0xb2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80053c2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80053c4:	6820      	ldr	r0, [r4, #0]
 80053c6:	0409      	lsls	r1, r1, #16
 80053c8:	f002 fbaa 	bl	8007b20 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80053cc:	2800      	cmp	r0, #0
 80053ce:	d1c3      	bne.n	8005358 <HAL_SD_ConfigWideBusOperation+0x98>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 80053d0:	2102      	movs	r1, #2
 80053d2:	6820      	ldr	r0, [r4, #0]
 80053d4:	f002 fc1c 	bl	8007c10 <SDMMC_CmdBusWidth>
 80053d8:	e7be      	b.n	8005358 <HAL_SD_ConfigWideBusOperation+0x98>
 80053da:	bf00      	nop
 80053dc:	1fe00fff 	.word	0x1fe00fff

080053e0 <HAL_SD_Init>:
{ 
 80053e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053e4:	b098      	sub	sp, #96	; 0x60
  if(hsd == NULL)
 80053e6:	b1f8      	cbz	r0, 8005428 <HAL_SD_Init+0x48>
  if(hsd->State == HAL_SD_STATE_RESET)
 80053e8:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80053ec:	4604      	mov	r4, r0
 80053ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d036      	beq.n	8005464 <HAL_SD_Init+0x84>
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80053f6:	69a2      	ldr	r2, [r4, #24]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80053f8:	6825      	ldr	r5, [r4, #0]
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80053fa:	2300      	movs	r3, #0
  hsd->State = HAL_SD_STATE_BUSY;
 80053fc:	2003      	movs	r0, #3
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80053fe:	213c      	movs	r1, #60	; 0x3c
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8005400:	2a01      	cmp	r2, #1
  hsd->State = HAL_SD_STATE_BUSY;
 8005402:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005406:	9307      	str	r3, [sp, #28]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005408:	9308      	str	r3, [sp, #32]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800540a:	9309      	str	r3, [sp, #36]	; 0x24
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800540c:	930a      	str	r3, [sp, #40]	; 0x28
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800540e:	910b      	str	r1, [sp, #44]	; 0x2c
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8005410:	d02c      	beq.n	800546c <HAL_SD_Init+0x8c>
  status = SDMMC_Init(hsd->Instance, Init);
 8005412:	ab0a      	add	r3, sp, #40	; 0x28
 8005414:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005418:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800541c:	ab07      	add	r3, sp, #28
 800541e:	4628      	mov	r0, r5
 8005420:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005422:	f002 fa47 	bl	80078b4 <SDMMC_Init>
  if(status != HAL_OK)
 8005426:	b120      	cbz	r0, 8005432 <HAL_SD_Init+0x52>
    return HAL_ERROR;
 8005428:	2501      	movs	r5, #1
}
 800542a:	4628      	mov	r0, r5
 800542c:	b018      	add	sp, #96	; 0x60
 800542e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  status = SDMMC_PowerState_ON(hsd->Instance);
 8005432:	6820      	ldr	r0, [r4, #0]
 8005434:	f002 fa5c 	bl	80078f0 <SDMMC_PowerState_ON>
  if(status != HAL_OK)
 8005438:	4605      	mov	r5, r0
 800543a:	2800      	cmp	r0, #0
 800543c:	d1f4      	bne.n	8005428 <HAL_SD_Init+0x48>
  HAL_Delay(2U);
 800543e:	2002      	movs	r0, #2
 8005440:	f7fb fd88 	bl	8000f54 <HAL_Delay>
  __IO uint32_t count = 0;
 8005444:	9506      	str	r5, [sp, #24]
  uint32_t tickstart = HAL_GetTick();
 8005446:	f7fb fd7f 	bl	8000f48 <HAL_GetTick>
 800544a:	4680      	mov	r8, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800544c:	6820      	ldr	r0, [r4, #0]
 800544e:	f002 faf7 	bl	8007a40 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005452:	4605      	mov	r5, r0
 8005454:	b178      	cbz	r0, 8005476 <HAL_SD_Init+0x96>
    hsd->State = HAL_SD_STATE_READY;
 8005456:	2301      	movs	r3, #1
 8005458:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800545c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800545e:	431d      	orrs	r5, r3
 8005460:	63a5      	str	r5, [r4, #56]	; 0x38
 8005462:	e7e1      	b.n	8005428 <HAL_SD_Init+0x48>
    hsd->Lock = HAL_UNLOCKED;
 8005464:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8005466:	f00b fafd 	bl	8010a64 <HAL_SD_MspInit>
 800546a:	e7c4      	b.n	80053f6 <HAL_SD_Init+0x16>
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800546c:	682b      	ldr	r3, [r5, #0]
 800546e:	f043 0304 	orr.w	r3, r3, #4
 8005472:	602b      	str	r3, [r5, #0]
 8005474:	e7cd      	b.n	8005412 <HAL_SD_Init+0x32>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005476:	6820      	ldr	r0, [r4, #0]
 8005478:	f002 fb10 	bl	8007a9c <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800547c:	fab0 f080 	clz	r0, r0
 8005480:	0940      	lsrs	r0, r0, #5
 8005482:	6420      	str	r0, [r4, #64]	; 0x40
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005484:	4629      	mov	r1, r5
 8005486:	6820      	ldr	r0, [r4, #0]
 8005488:	f002 fb4a 	bl	8007b20 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800548c:	b110      	cbz	r0, 8005494 <HAL_SD_Init+0xb4>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800548e:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8005492:	e7e0      	b.n	8005456 <HAL_SD_Init+0x76>
    while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005494:	9b06      	ldr	r3, [sp, #24]
 8005496:	f64f 77fe 	movw	r7, #65534	; 0xfffe
 800549a:	42bb      	cmp	r3, r7
 800549c:	f200 8101 	bhi.w	80056a2 <HAL_SD_Init+0x2c2>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80054a0:	4e84      	ldr	r6, [pc, #528]	; (80056b4 <HAL_SD_Init+0x2d4>)
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80054a2:	6820      	ldr	r0, [r4, #0]
 80054a4:	2100      	movs	r1, #0
 80054a6:	f002 fb3b 	bl	8007b20 <SDMMC_CmdAppCommand>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80054aa:	4631      	mov	r1, r6
      if(errorstate != HAL_SD_ERROR_NONE)
 80054ac:	4605      	mov	r5, r0
 80054ae:	2800      	cmp	r0, #0
 80054b0:	d1d1      	bne.n	8005456 <HAL_SD_Init+0x76>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80054b2:	6820      	ldr	r0, [r4, #0]
 80054b4:	f002 fb76 	bl	8007ba4 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80054b8:	4601      	mov	r1, r0
 80054ba:	2800      	cmp	r0, #0
 80054bc:	d1e7      	bne.n	800548e <HAL_SD_Init+0xae>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80054be:	6820      	ldr	r0, [r4, #0]
 80054c0:	f002 fa22 	bl	8007908 <SDMMC_GetResponse>
      count++;
 80054c4:	9b06      	ldr	r3, [sp, #24]
 80054c6:	3301      	adds	r3, #1
 80054c8:	9306      	str	r3, [sp, #24]
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80054ca:	2800      	cmp	r0, #0
    while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80054cc:	9b06      	ldr	r3, [sp, #24]
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80054ce:	db01      	blt.n	80054d4 <HAL_SD_Init+0xf4>
    while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80054d0:	42bb      	cmp	r3, r7
 80054d2:	d9e6      	bls.n	80054a2 <HAL_SD_Init+0xc2>
    if(count >= SDMMC_MAX_VOLT_TRIAL)
 80054d4:	9a06      	ldr	r2, [sp, #24]
 80054d6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80054da:	429a      	cmp	r2, r3
 80054dc:	d902      	bls.n	80054e4 <HAL_SD_Init+0x104>
      return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80054de:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 80054e2:	e7b8      	b.n	8005456 <HAL_SD_Init+0x76>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80054e4:	0046      	lsls	r6, r0, #1
 80054e6:	d505      	bpl.n	80054f4 <HAL_SD_Init+0x114>
      if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80054e8:	69a3      	ldr	r3, [r4, #24]
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80054ea:	2201      	movs	r2, #1
      if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80054ec:	4293      	cmp	r3, r2
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80054ee:	63e2      	str	r2, [r4, #60]	; 0x3c
      if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80054f0:	f000 8095 	beq.w	800561e <HAL_SD_Init+0x23e>
 80054f4:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1;
 80054f6:	2301      	movs	r3, #1
 80054f8:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U) 
 80054fc:	f002 fa00 	bl	8007900 <SDMMC_GetPowerState>
 8005500:	b940      	cbnz	r0, 8005514 <HAL_SD_Init+0x134>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005502:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 8005506:	2301      	movs	r3, #1
 8005508:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800550c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800550e:	4303      	orrs	r3, r0
 8005510:	63a3      	str	r3, [r4, #56]	; 0x38
 8005512:	e789      	b.n	8005428 <HAL_SD_Init+0x48>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005514:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005516:	2b03      	cmp	r3, #3
 8005518:	d10f      	bne.n	800553a <HAL_SD_Init+0x15a>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 800551a:	2104      	movs	r1, #4
 800551c:	6820      	ldr	r0, [r4, #0]
 800551e:	f002 f9f3 	bl	8007908 <SDMMC_GetResponse>
 8005522:	0d00      	lsrs	r0, r0, #20
 8005524:	6460      	str	r0, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005526:	a90d      	add	r1, sp, #52	; 0x34
 8005528:	4620      	mov	r0, r4
 800552a:	f7ff fe0f 	bl	800514c <HAL_SD_GetCardCSD>
 800552e:	4603      	mov	r3, r0
 8005530:	2800      	cmp	r0, #0
 8005532:	d046      	beq.n	80055c2 <HAL_SD_Init+0x1e2>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005534:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005538:	e7e5      	b.n	8005506 <HAL_SD_Init+0x126>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800553a:	6820      	ldr	r0, [r4, #0]
 800553c:	f002 fbec 	bl	8007d18 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005540:	2800      	cmp	r0, #0
 8005542:	d1e0      	bne.n	8005506 <HAL_SD_Init+0x126>
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005544:	4601      	mov	r1, r0
 8005546:	6820      	ldr	r0, [r4, #0]
 8005548:	f002 f9de 	bl	8007908 <SDMMC_GetResponse>
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800554c:	2104      	movs	r1, #4
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800554e:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005550:	6820      	ldr	r0, [r4, #0]
 8005552:	f002 f9d9 	bl	8007908 <SDMMC_GetResponse>
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005556:	2108      	movs	r1, #8
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005558:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800555a:	6820      	ldr	r0, [r4, #0]
 800555c:	f002 f9d4 	bl	8007908 <SDMMC_GetResponse>
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005560:	210c      	movs	r1, #12
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005562:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005564:	6820      	ldr	r0, [r4, #0]
 8005566:	f002 f9cf 	bl	8007908 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800556a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800556c:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800556e:	2b03      	cmp	r3, #3
 8005570:	d0d3      	beq.n	800551a <HAL_SD_Init+0x13a>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005572:	f10d 0116 	add.w	r1, sp, #22
 8005576:	6820      	ldr	r0, [r4, #0]
 8005578:	f002 fc4c 	bl	8007e14 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800557c:	2800      	cmp	r0, #0
 800557e:	d1c2      	bne.n	8005506 <HAL_SD_Init+0x126>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005580:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005582:	2b03      	cmp	r3, #3
 8005584:	d0c9      	beq.n	800551a <HAL_SD_Init+0x13a>
    hsd->SdCard.RelCardAdd = sd_rca;
 8005586:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800558a:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800558c:	6820      	ldr	r0, [r4, #0]
 800558e:	0409      	lsls	r1, r1, #16
 8005590:	f002 fc02 	bl	8007d98 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005594:	2800      	cmp	r0, #0
 8005596:	d1b6      	bne.n	8005506 <HAL_SD_Init+0x126>
      hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005598:	4601      	mov	r1, r0
 800559a:	6820      	ldr	r0, [r4, #0]
 800559c:	f002 f9b4 	bl	8007908 <SDMMC_GetResponse>
      hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80055a0:	2104      	movs	r1, #4
      hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80055a2:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80055a4:	6820      	ldr	r0, [r4, #0]
 80055a6:	f002 f9af 	bl	8007908 <SDMMC_GetResponse>
      hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80055aa:	2108      	movs	r1, #8
      hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80055ac:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80055ae:	6820      	ldr	r0, [r4, #0]
 80055b0:	f002 f9aa 	bl	8007908 <SDMMC_GetResponse>
      hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80055b4:	210c      	movs	r1, #12
      hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80055b6:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80055b8:	6820      	ldr	r0, [r4, #0]
 80055ba:	f002 f9a5 	bl	8007908 <SDMMC_GetResponse>
 80055be:	66e0      	str	r0, [r4, #108]	; 0x6c
 80055c0:	e7ab      	b.n	800551a <HAL_SD_Init+0x13a>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 80055c2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80055c4:	6820      	ldr	r0, [r4, #0]
 80055c6:	0412      	lsls	r2, r2, #16
 80055c8:	f002 f9f8 	bl	80079bc <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80055cc:	2800      	cmp	r0, #0
 80055ce:	d19a      	bne.n	8005506 <HAL_SD_Init+0x126>
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80055d0:	68e1      	ldr	r1, [r4, #12]
 80055d2:	4620      	mov	r0, r4
 80055d4:	f7ff fe74 	bl	80052c0 <HAL_SD_ConfigWideBusOperation>
 80055d8:	4605      	mov	r5, r0
 80055da:	2800      	cmp	r0, #0
 80055dc:	f47f af24 	bne.w	8005428 <HAL_SD_Init+0x48>
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80055e0:	69a3      	ldr	r3, [r4, #24]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d009      	beq.n	80055fa <HAL_SD_Init+0x21a>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80055e6:	2300      	movs	r3, #0
  hsd->State = HAL_SD_STATE_READY;
 80055e8:	2201      	movs	r2, #1
}
 80055ea:	4628      	mov	r0, r5
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80055ec:	63a3      	str	r3, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 80055ee:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 80055f0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 80055f4:	b018      	add	sp, #96	; 0x60
 80055f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) || 
 80055fa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80055fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005600:	d002      	beq.n	8005608 <HAL_SD_Init+0x228>
 8005602:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005604:	2b01      	cmp	r3, #1
 8005606:	d1ee      	bne.n	80055e6 <HAL_SD_Init+0x206>
      hsd->Instance->CLKCR |= 0x00100000U;
 8005608:	6822      	ldr	r2, [r4, #0]
 800560a:	6853      	ldr	r3, [r2, #4]
 800560c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005610:	6053      	str	r3, [r2, #4]
      if(HAL_SDEx_HighSpeed(hsd) != HAL_SD_ERROR_NONE)
 8005612:	4620      	mov	r0, r4
 8005614:	f000 f852 	bl	80056bc <HAL_SDEx_HighSpeed>
 8005618:	2800      	cmp	r0, #0
 800561a:	d0e4      	beq.n	80055e6 <HAL_SD_Init+0x206>
 800561c:	e704      	b.n	8005428 <HAL_SD_Init+0x48>
        if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800561e:	01c5      	lsls	r5, r0, #7
 8005620:	f57f af68 	bpl.w	80054f4 <HAL_SD_Init+0x114>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8005624:	6823      	ldr	r3, [r4, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
           hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005628:	f44f 7100 	mov.w	r1, #512	; 0x200
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800562c:	f042 0203 	orr.w	r2, r2, #3
           hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005630:	65e1      	str	r1, [r4, #92]	; 0x5c
          errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8005632:	4618      	mov	r0, r3
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8005634:	601a      	str	r2, [r3, #0]
          errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8005636:	f002 fc83 	bl	8007f40 <SDMMC_CmdVoltageSwitch>
          if(errorstate != HAL_SD_ERROR_NONE)
 800563a:	4605      	mov	r5, r0
 800563c:	b130      	cbz	r0, 800564c <HAL_SD_Init+0x26c>
 800563e:	e70a      	b.n	8005456 <HAL_SD_Init+0x76>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005640:	f7fb fc82 	bl	8000f48 <HAL_GetTick>
 8005644:	eba0 0008 	sub.w	r0, r0, r8
 8005648:	3001      	adds	r0, #1
 800564a:	d02f      	beq.n	80056ac <HAL_SD_Init+0x2cc>
          while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800564c:	6823      	ldr	r3, [r4, #0]
 800564e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005650:	0150      	lsls	r0, r2, #5
 8005652:	d5f5      	bpl.n	8005640 <HAL_SD_Init+0x260>
          hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8005654:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005658:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800565a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800565c:	02d9      	lsls	r1, r3, #11
 800565e:	f57f af16 	bpl.w	800548e <HAL_SD_Init+0xae>
            HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8005662:	2001      	movs	r0, #1
 8005664:	f000 f828 	bl	80056b8 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
            hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8005668:	6820      	ldr	r0, [r4, #0]
 800566a:	6803      	ldr	r3, [r0, #0]
 800566c:	f043 0302 	orr.w	r3, r3, #2
 8005670:	6003      	str	r3, [r0, #0]
 8005672:	e006      	b.n	8005682 <HAL_SD_Init+0x2a2>
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005674:	f7fb fc68 	bl	8000f48 <HAL_GetTick>
 8005678:	eba0 0008 	sub.w	r0, r0, r8
 800567c:	3001      	adds	r0, #1
 800567e:	d015      	beq.n	80056ac <HAL_SD_Init+0x2cc>
 8005680:	6820      	ldr	r0, [r4, #0]
            while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8005682:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005684:	019a      	lsls	r2, r3, #6
 8005686:	d5f5      	bpl.n	8005674 <HAL_SD_Init+0x294>
            hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8005688:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800568c:	6383      	str	r3, [r0, #56]	; 0x38
            if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800568e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005690:	02db      	lsls	r3, r3, #11
 8005692:	f53f af24 	bmi.w	80054de <HAL_SD_Init+0xfe>
            hsd->Instance->POWER = 0x13U; 
 8005696:	2213      	movs	r2, #19
            hsd->Instance->ICR = 0xFFFFFFFFU;
 8005698:	f04f 33ff 	mov.w	r3, #4294967295
            hsd->Instance->POWER = 0x13U; 
 800569c:	6002      	str	r2, [r0, #0]
            hsd->Instance->ICR = 0xFFFFFFFFU;
 800569e:	6383      	str	r3, [r0, #56]	; 0x38
 80056a0:	e729      	b.n	80054f6 <HAL_SD_Init+0x116>
    if(count >= SDMMC_MAX_VOLT_TRIAL)
 80056a2:	9b06      	ldr	r3, [sp, #24]
 80056a4:	42bb      	cmp	r3, r7
 80056a6:	f63f af1a 	bhi.w	80054de <HAL_SD_Init+0xfe>
 80056aa:	e723      	b.n	80054f4 <HAL_SD_Init+0x114>
              return HAL_SD_ERROR_TIMEOUT;
 80056ac:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 80056b0:	e6d1      	b.n	8005456 <HAL_SD_Init+0x76>
 80056b2:	bf00      	nop
 80056b4:	c1100000 	.word	0xc1100000

080056b8 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop

080056bc <HAL_SDEx_HighSpeed>:
{
 80056bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056c0:	4604      	mov	r4, r0
 80056c2:	b096      	sub	sp, #88	; 0x58
  uint8_t SD_hs[64]  = {0};
 80056c4:	2540      	movs	r5, #64	; 0x40
 80056c6:	462a      	mov	r2, r5
 80056c8:	2100      	movs	r1, #0
 80056ca:	a806      	add	r0, sp, #24
 80056cc:	f00d ff71 	bl	80135b2 <memset>
  uint32_t Timeout = HAL_GetTick();
 80056d0:	f7fb fc3a 	bl	8000f48 <HAL_GetTick>
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 80056d4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80056d6:	b92b      	cbnz	r3, 80056e4 <HAL_SDEx_HighSpeed+0x28>
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE; 
 80056d8:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
}
 80056dc:	4630      	mov	r0, r6
 80056de:	b016      	add	sp, #88	; 0x58
 80056e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if((hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED) &&
 80056e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056e8:	d004      	beq.n	80056f4 <HAL_SDEx_HighSpeed+0x38>
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80056ea:	2600      	movs	r6, #0
}
 80056ec:	4630      	mov	r0, r6
 80056ee:	b016      	add	sp, #88	; 0x58
 80056f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if((hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED) &&
 80056f4:	69a7      	ldr	r7, [r4, #24]
 80056f6:	2f01      	cmp	r7, #1
 80056f8:	d1f7      	bne.n	80056ea <HAL_SDEx_HighSpeed+0x2e>
 80056fa:	4680      	mov	r8, r0
    hsd->Instance->DCTRL = 0;
 80056fc:	6820      	ldr	r0, [r4, #0]
 80056fe:	2300      	movs	r3, #0
 8005700:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64);
 8005702:	4629      	mov	r1, r5
 8005704:	f002 f918 	bl	8007938 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_SD_ERROR_NONE)
 8005708:	4606      	mov	r6, r0
 800570a:	2800      	cmp	r0, #0
 800570c:	d1e6      	bne.n	80056dc <HAL_SDEx_HighSpeed+0x20>
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 800570e:	f04f 3eff 	mov.w	lr, #4294967295
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 8005712:	2260      	movs	r2, #96	; 0x60
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005714:	2302      	movs	r3, #2
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005716:	9004      	str	r0, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 8005718:	4669      	mov	r1, sp
 800571a:	6820      	ldr	r0, [r4, #0]
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 800571c:	f8cd e000 	str.w	lr, [sp]
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 8005720:	9202      	str	r2, [sp, #8]
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005722:	9303      	str	r3, [sp, #12]
    sdmmc_datainitstructure.DataLength    = 64;
 8005724:	9501      	str	r5, [sp, #4]
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8005726:	9705      	str	r7, [sp, #20]
    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 8005728:	f002 f8f2 	bl	8007910 <SDMMC_ConfigData>
    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_SDR25_SWITCH_PATTERN);
 800572c:	4930      	ldr	r1, [pc, #192]	; (80057f0 <HAL_SDEx_HighSpeed+0x134>)
 800572e:	6820      	ldr	r0, [r4, #0]
 8005730:	f002 fbc4 	bl	8007ebc <SDMMC_CmdSwitch>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005734:	4606      	mov	r6, r0
 8005736:	2800      	cmp	r0, #0
 8005738:	d1d0      	bne.n	80056dc <HAL_SDEx_HighSpeed+0x20>
 800573a:	ad06      	add	r5, sp, #24
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 800573c:	f240 5a2a 	movw	sl, #1322	; 0x52a
 8005740:	6820      	ldr	r0, [r4, #0]
 8005742:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005744:	ea13 0f0a 	tst.w	r3, sl
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005748:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 800574a:	d124      	bne.n	8005796 <HAL_SDEx_HighSpeed+0xda>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800574c:	041f      	lsls	r7, r3, #16
 800574e:	d515      	bpl.n	800577c <HAL_SDEx_HighSpeed+0xc0>
 8005750:	1d2f      	adds	r7, r5, #4
 8005752:	f105 0924 	add.w	r9, r5, #36	; 0x24
 8005756:	e000      	b.n	800575a <HAL_SDEx_HighSpeed+0x9e>
 8005758:	6820      	ldr	r0, [r4, #0]
          data = SDMMC_ReadFIFO(hsd->Instance);
 800575a:	f002 f8c5 	bl	80078e8 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 800575e:	f807 0c04 	strb.w	r0, [r7, #-4]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005762:	0a02      	lsrs	r2, r0, #8
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005764:	0c03      	lsrs	r3, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005766:	0e00      	lsrs	r0, r0, #24
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005768:	f807 2c03 	strb.w	r2, [r7, #-3]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800576c:	f807 3c02 	strb.w	r3, [r7, #-2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005770:	f807 0c01 	strb.w	r0, [r7, #-1]
 8005774:	3704      	adds	r7, #4
        for (count = 0U; count < 8U; count++)
 8005776:	454f      	cmp	r7, r9
 8005778:	d1ee      	bne.n	8005758 <HAL_SDEx_HighSpeed+0x9c>
 800577a:	3520      	adds	r5, #32
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 800577c:	f7fb fbe4 	bl	8000f48 <HAL_GetTick>
 8005780:	eba0 0008 	sub.w	r0, r0, r8
 8005784:	3001      	adds	r0, #1
 8005786:	d1db      	bne.n	8005740 <HAL_SDEx_HighSpeed+0x84>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005788:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
        hsd->State= HAL_SD_STATE_READY;
 800578c:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800578e:	63a6      	str	r6, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005790:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_SD_ERROR_TIMEOUT;
 8005794:	e7a2      	b.n	80056dc <HAL_SDEx_HighSpeed+0x20>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005796:	071d      	lsls	r5, r3, #28
 8005798:	d405      	bmi.n	80057a6 <HAL_SDEx_HighSpeed+0xea>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800579a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800579c:	0799      	lsls	r1, r3, #30
 800579e:	d505      	bpl.n	80057ac <HAL_SDEx_HighSpeed+0xf0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80057a0:	2602      	movs	r6, #2
 80057a2:	6386      	str	r6, [r0, #56]	; 0x38
      return errorstate;
 80057a4:	e79a      	b.n	80056dc <HAL_SDEx_HighSpeed+0x20>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80057a6:	2308      	movs	r3, #8
 80057a8:	6383      	str	r3, [r0, #56]	; 0x38
      return errorstate;
 80057aa:	e797      	b.n	80056dc <HAL_SDEx_HighSpeed+0x20>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80057ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80057ae:	069a      	lsls	r2, r3, #26
 80057b0:	d502      	bpl.n	80057b8 <HAL_SDEx_HighSpeed+0xfc>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80057b2:	2620      	movs	r6, #32
 80057b4:	6386      	str	r6, [r0, #56]	; 0x38
      return errorstate;
 80057b6:	e791      	b.n	80056dc <HAL_SDEx_HighSpeed+0x20>
    if ((SD_hs[13U] & 2U) == 0U)
 80057b8:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80057bc:	4a0d      	ldr	r2, [pc, #52]	; (80057f4 <HAL_SDEx_HighSpeed+0x138>)
 80057be:	6382      	str	r2, [r0, #56]	; 0x38
    if ((SD_hs[13U] & 2U) == 0U)
 80057c0:	079b      	lsls	r3, r3, #30
 80057c2:	d402      	bmi.n	80057ca <HAL_SDEx_HighSpeed+0x10e>
      return errorstate;
 80057c4:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 80057c8:	e788      	b.n	80056dc <HAL_SDEx_HighSpeed+0x20>
      HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 80057ca:	2001      	movs	r0, #1
 80057cc:	f7ff ff74 	bl	80056b8 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80057d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80057d4:	6820      	ldr	r0, [r4, #0]
 80057d6:	f002 f8af 	bl	8007938 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 80057da:	4606      	mov	r6, r0
 80057dc:	2800      	cmp	r0, #0
 80057de:	f43f af7d 	beq.w	80056dc <HAL_SDEx_HighSpeed+0x20>
      hsd->State = HAL_SD_STATE_READY;
 80057e2:	2301      	movs	r3, #1
 80057e4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->ErrorCode |= errorstate;
 80057e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80057ea:	4303      	orrs	r3, r0
 80057ec:	63a3      	str	r3, [r4, #56]	; 0x38
      return errorstate;
 80057ee:	e775      	b.n	80056dc <HAL_SDEx_HighSpeed+0x20>
 80057f0:	80ffff01 	.word	0x80ffff01
 80057f4:	18000f3a 	.word	0x18000f3a

080057f8 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057f8:	6803      	ldr	r3, [r0, #0]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057fa:	6841      	ldr	r1, [r0, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057fc:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057fe:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005802:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005806:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005808:	d013      	beq.n	8005832 <SPI_WaitFifoStateUntilTimeout.part.1+0x3a>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800580a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800580c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005810:	d107      	bne.n	8005822 <SPI_WaitFifoStateUntilTimeout.part.1+0x2a>
        {
          SPI_RESET_CRC(hspi);
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005820:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005822:	2201      	movs	r2, #1

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005824:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8005826:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800582a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 800582e:	2003      	movs	r0, #3
 8005830:	4770      	bx	lr
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005832:	6882      	ldr	r2, [r0, #8]
 8005834:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005838:	d002      	beq.n	8005840 <SPI_WaitFifoStateUntilTimeout.part.1+0x48>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800583a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800583e:	d1e4      	bne.n	800580a <SPI_WaitFifoStateUntilTimeout.part.1+0x12>
          __HAL_SPI_DISABLE(hspi);
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005846:	601a      	str	r2, [r3, #0]
 8005848:	e7df      	b.n	800580a <SPI_WaitFifoStateUntilTimeout.part.1+0x12>
 800584a:	bf00      	nop

0800584c <SPI_EndRxTxTransaction.constprop.11>:
  * @param  hspi SPI handle
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
 800584c:	b538      	push	{r3, r4, r5, lr}
 800584e:	4604      	mov	r4, r0
 8005850:	460d      	mov	r5, r1
 8005852:	e004      	b.n	800585e <SPI_EndRxTxTransaction.constprop.11+0x12>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005854:	f7fb fb78 	bl	8000f48 <HAL_GetTick>
 8005858:	1b40      	subs	r0, r0, r5
 800585a:	2863      	cmp	r0, #99	; 0x63
 800585c:	d81f      	bhi.n	800589e <SPI_EndRxTxTransaction.constprop.11+0x52>
  while ((hspi->Instance->SR & Fifo) != State)
 800585e:	6823      	ldr	r3, [r4, #0]
 8005860:	689a      	ldr	r2, [r3, #8]
 8005862:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 8005866:	d1f5      	bne.n	8005854 <SPI_EndRxTxTransaction.constprop.11+0x8>
 8005868:	e005      	b.n	8005876 <SPI_EndRxTxTransaction.constprop.11+0x2a>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800586a:	f7fb fb6d 	bl	8000f48 <HAL_GetTick>
 800586e:	1b40      	subs	r0, r0, r5
 8005870:	2863      	cmp	r0, #99	; 0x63
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005872:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005874:	d814      	bhi.n	80058a0 <SPI_EndRxTxTransaction.constprop.11+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005876:	689a      	ldr	r2, [r3, #8]
 8005878:	0612      	lsls	r2, r2, #24
 800587a:	d4f6      	bmi.n	800586a <SPI_EndRxTxTransaction.constprop.11+0x1e>
  while ((hspi->Instance->SR & Fifo) != State)
 800587c:	689a      	ldr	r2, [r3, #8]
 800587e:	f412 6fc0 	tst.w	r2, #1536	; 0x600
 8005882:	d00a      	beq.n	800589a <SPI_EndRxTxTransaction.constprop.11+0x4e>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005884:	7b1b      	ldrb	r3, [r3, #12]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005886:	f7fb fb5f 	bl	8000f48 <HAL_GetTick>
 800588a:	1b40      	subs	r0, r0, r5
 800588c:	2863      	cmp	r0, #99	; 0x63
 800588e:	d833      	bhi.n	80058f8 <SPI_EndRxTxTransaction.constprop.11+0xac>
 8005890:	6823      	ldr	r3, [r4, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005892:	689a      	ldr	r2, [r3, #8]
 8005894:	f412 6fc0 	tst.w	r2, #1536	; 0x600
 8005898:	d1f4      	bne.n	8005884 <SPI_EndRxTxTransaction.constprop.11+0x38>
  return HAL_OK;
 800589a:	2000      	movs	r0, #0
 800589c:	bd38      	pop	{r3, r4, r5, pc}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800589e:	6823      	ldr	r3, [r4, #0]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058a0:	6861      	ldr	r1, [r4, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058a2:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058a4:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058ac:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058ae:	d017      	beq.n	80058e0 <SPI_EndRxTxTransaction.constprop.11+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058b0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80058b2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80058b6:	d107      	bne.n	80058c8 <SPI_EndRxTxTransaction.constprop.11+0x7c>
          SPI_RESET_CRC(hspi);
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058c6:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80058c8:	2301      	movs	r3, #1
 80058ca:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058ce:	6e23      	ldr	r3, [r4, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 80058d0:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058d2:	f043 0320 	orr.w	r3, r3, #32
 80058d6:	6623      	str	r3, [r4, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 80058d8:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    return HAL_TIMEOUT;
 80058dc:	2003      	movs	r0, #3
 80058de:	bd38      	pop	{r3, r4, r5, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058e0:	68a2      	ldr	r2, [r4, #8]
 80058e2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80058e6:	d002      	beq.n	80058ee <SPI_EndRxTxTransaction.constprop.11+0xa2>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058e8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80058ec:	d1e0      	bne.n	80058b0 <SPI_EndRxTxTransaction.constprop.11+0x64>
          __HAL_SPI_DISABLE(hspi);
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058f4:	601a      	str	r2, [r3, #0]
 80058f6:	e7db      	b.n	80058b0 <SPI_EndRxTxTransaction.constprop.11+0x64>
 80058f8:	4620      	mov	r0, r4
 80058fa:	f7ff ff7d 	bl	80057f8 <SPI_WaitFifoStateUntilTimeout.part.1>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80058fe:	2800      	cmp	r0, #0
 8005900:	d0cb      	beq.n	800589a <SPI_EndRxTxTransaction.constprop.11+0x4e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005902:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005904:	f043 0320 	orr.w	r3, r3, #32
 8005908:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 800590a:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800590c:	bd38      	pop	{r3, r4, r5, pc}
 800590e:	bf00      	nop

08005910 <HAL_SPI_Init>:
  if (hspi == NULL)
 8005910:	2800      	cmp	r0, #0
 8005912:	d068      	beq.n	80059e6 <HAL_SPI_Init+0xd6>
{
 8005914:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005916:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800591a:	2200      	movs	r2, #0
{
 800591c:	b083      	sub	sp, #12
 800591e:	4604      	mov	r4, r0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005920:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005924:	6282      	str	r2, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005926:	2b00      	cmp	r3, #0
 8005928:	d04d      	beq.n	80059c6 <HAL_SPI_Init+0xb6>
  hspi->State = HAL_SPI_STATE_BUSY;
 800592a:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800592c:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800592e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8005932:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005934:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8005936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800593a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800593e:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005940:	d90b      	bls.n	800595a <HAL_SPI_Init+0x4a>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005942:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8005946:	d146      	bne.n	80059d6 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005948:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800594a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800594c:	2b00      	cmp	r3, #0
 800594e:	d13f      	bne.n	80059d0 <HAL_SPI_Init+0xc0>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005950:	2302      	movs	r3, #2
 8005952:	6323      	str	r3, [r4, #48]	; 0x30
 8005954:	f04f 0e00 	mov.w	lr, #0
 8005958:	e00f      	b.n	800597a <HAL_SPI_Init+0x6a>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800595a:	d007      	beq.n	800596c <HAL_SPI_Init+0x5c>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800595c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800595e:	2300      	movs	r3, #0
 8005960:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005962:	b130      	cbz	r0, 8005972 <HAL_SPI_Init+0x62>
 8005964:	4618      	mov	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005966:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
 800596a:	e006      	b.n	800597a <HAL_SPI_Init+0x6a>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800596c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800596e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005970:	b90b      	cbnz	r3, 8005976 <HAL_SPI_Init+0x66>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005972:	2301      	movs	r3, #1
 8005974:	6323      	str	r3, [r4, #48]	; 0x30
 8005976:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800597a:	68a5      	ldr	r5, [r4, #8]
 800597c:	6863      	ldr	r3, [r4, #4]
 800597e:	6927      	ldr	r7, [r4, #16]
 8005980:	6966      	ldr	r6, [r4, #20]
 8005982:	432b      	orrs	r3, r5
 8005984:	433b      	orrs	r3, r7
 8005986:	69e5      	ldr	r5, [r4, #28]
 8005988:	69a7      	ldr	r7, [r4, #24]
 800598a:	4333      	orrs	r3, r6
 800598c:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800598e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8005990:	9501      	str	r5, [sp, #4]
 8005992:	6a65      	ldr	r5, [r4, #36]	; 0x24
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005994:	6a26      	ldr	r6, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005996:	432a      	orrs	r2, r5
 8005998:	9d01      	ldr	r5, [sp, #4]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800599a:	4333      	orrs	r3, r6
 800599c:	f407 7600 	and.w	r6, r7, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80059a0:	0c3f      	lsrs	r7, r7, #16
 80059a2:	f007 0704 	and.w	r7, r7, #4
 80059a6:	4315      	orrs	r5, r2
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80059a8:	4333      	orrs	r3, r6
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059aa:	2200      	movs	r2, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80059ac:	433d      	orrs	r5, r7
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80059ae:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80059b0:	ea45 050e 	orr.w	r5, r5, lr
  hspi->State     = HAL_SPI_STATE_READY;
 80059b4:	2601      	movs	r6, #1
  return HAL_OK;
 80059b6:	4610      	mov	r0, r2
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80059b8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80059ba:	604d      	str	r5, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059bc:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80059be:	f884 605d 	strb.w	r6, [r4, #93]	; 0x5d
}
 80059c2:	b003      	add	sp, #12
 80059c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hspi->Lock = HAL_UNLOCKED;
 80059c6:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80059ca:	f00b f8c3 	bl	8010b54 <HAL_SPI_MspInit>
 80059ce:	e7ac      	b.n	800592a <HAL_SPI_Init+0x1a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80059d0:	f04f 0e00 	mov.w	lr, #0
 80059d4:	e7d1      	b.n	800597a <HAL_SPI_Init+0x6a>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80059d6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059d8:	2300      	movs	r3, #0
 80059da:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80059dc:	2800      	cmp	r0, #0
 80059de:	d0b7      	beq.n	8005950 <HAL_SPI_Init+0x40>
 80059e0:	4618      	mov	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80059e2:	469e      	mov	lr, r3
 80059e4:	e7c9      	b.n	800597a <HAL_SPI_Init+0x6a>
    return HAL_ERROR;
 80059e6:	2001      	movs	r0, #1
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop

080059ec <HAL_SPI_Transmit_IT>:
{
 80059ec:	4603      	mov	r3, r0
  __HAL_LOCK(hspi);
 80059ee:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 80059f2:	2801      	cmp	r0, #1
 80059f4:	d00d      	beq.n	8005a12 <HAL_SPI_Transmit_IT+0x26>
 80059f6:	2001      	movs	r0, #1
 80059f8:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
  if ((pData == NULL) || (Size == 0U))
 80059fc:	b129      	cbz	r1, 8005a0a <HAL_SPI_Transmit_IT+0x1e>
 80059fe:	b122      	cbz	r2, 8005a0a <HAL_SPI_Transmit_IT+0x1e>
  if (hspi->State != HAL_SPI_STATE_READY)
 8005a00:	f893 005d 	ldrb.w	r0, [r3, #93]	; 0x5d
 8005a04:	2801      	cmp	r0, #1
 8005a06:	d006      	beq.n	8005a16 <HAL_SPI_Transmit_IT+0x2a>
    errorcode = HAL_BUSY;
 8005a08:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
}
 8005a10:	4770      	bx	lr
  __HAL_LOCK(hspi);
 8005a12:	2002      	movs	r0, #2
 8005a14:	4770      	bx	lr
{
 8005a16:	b4f0      	push	{r4, r5, r6, r7}
    hspi->TxISR = SPI_TxISR_16BIT;
 8005a18:	4819      	ldr	r0, [pc, #100]	; (8005a80 <HAL_SPI_Transmit_IT+0x94>)
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a1a:	68df      	ldr	r7, [r3, #12]
    hspi->TxISR = SPI_TxISR_16BIT;
 8005a1c:	4e19      	ldr	r6, [pc, #100]	; (8005a84 <HAL_SPI_Transmit_IT+0x98>)
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a1e:	689c      	ldr	r4, [r3, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a20:	6399      	str	r1, [r3, #56]	; 0x38
    hspi->TxISR = SPI_TxISR_16BIT;
 8005a22:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
 8005a26:	bf88      	it	hi
 8005a28:	4630      	movhi	r0, r6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a2a:	2100      	movs	r1, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a2c:	2503      	movs	r5, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a2e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a32:	f883 505d 	strb.w	r5, [r3, #93]	; 0x5d
  hspi->TxXferSize  = Size;
 8005a36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a38:	6619      	str	r1, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a3a:	6419      	str	r1, [r3, #64]	; 0x40
  hspi->TxXferCount = Size;
 8005a3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8005a3e:	f8a3 1044 	strh.w	r1, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005a42:	64d9      	str	r1, [r3, #76]	; 0x4c
 8005a44:	6518      	str	r0, [r3, #80]	; 0x50
  hspi->RxXferCount = 0U;
 8005a46:	f8a3 1046 	strh.w	r1, [r3, #70]	; 0x46
    SPI_1LINE_TX(hspi);
 8005a4a:	681a      	ldr	r2, [r3, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a4c:	d012      	beq.n	8005a74 <HAL_SPI_Transmit_IT+0x88>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005a4e:	6851      	ldr	r1, [r2, #4]
 8005a50:	f041 01a0 	orr.w	r1, r1, #160	; 0xa0
 8005a54:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a56:	6810      	ldr	r0, [r2, #0]
 8005a58:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8005a5c:	d005      	beq.n	8005a6a <HAL_SPI_Transmit_IT+0x7e>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a5e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hspi);
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
}
 8005a66:	bcf0      	pop	{r4, r5, r6, r7}
 8005a68:	4770      	bx	lr
    __HAL_SPI_ENABLE(hspi);
 8005a6a:	6811      	ldr	r1, [r2, #0]
 8005a6c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005a70:	6011      	str	r1, [r2, #0]
 8005a72:	e7f5      	b.n	8005a60 <HAL_SPI_Transmit_IT+0x74>
    SPI_1LINE_TX(hspi);
 8005a74:	6811      	ldr	r1, [r2, #0]
 8005a76:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8005a7a:	6011      	str	r1, [r2, #0]
 8005a7c:	e7e7      	b.n	8005a4e <HAL_SPI_Transmit_IT+0x62>
 8005a7e:	bf00      	nop
 8005a80:	08005a8d 	.word	0x08005a8d
 8005a84:	08005c1d 	.word	0x08005c1d

08005a88 <HAL_SPI_ErrorCallback>:
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop

08005a8c <SPI_TxISR_8BIT>:
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a8c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005a8e:	6803      	ldr	r3, [r0, #0]
 8005a90:	7812      	ldrb	r2, [r2, #0]
 8005a92:	731a      	strb	r2, [r3, #12]
  hspi->TxXferCount--;
 8005a94:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
  hspi->pTxBuffPtr++;
 8005a96:	6b82      	ldr	r2, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8005a9e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
  hspi->pTxBuffPtr++;
 8005aa0:	3201      	adds	r2, #1
  if (hspi->TxXferCount == 0U)
 8005aa2:	b29b      	uxth	r3, r3
  hspi->pTxBuffPtr++;
 8005aa4:	6382      	str	r2, [r0, #56]	; 0x38
  if (hspi->TxXferCount == 0U)
 8005aa6:	b103      	cbz	r3, 8005aaa <SPI_TxISR_8BIT+0x1e>
 8005aa8:	4770      	bx	lr
{
 8005aaa:	b510      	push	{r4, lr}
 8005aac:	4604      	mov	r4, r0
 8005aae:	b082      	sub	sp, #8
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ab0:	f7fb fa4a 	bl	8000f48 <HAL_GetTick>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005ab4:	6822      	ldr	r2, [r4, #0]
 8005ab6:	6853      	ldr	r3, [r2, #4]
 8005ab8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005abc:	4601      	mov	r1, r0
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005abe:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	f7ff fec3 	bl	800584c <SPI_EndRxTxTransaction.constprop.11>
 8005ac6:	b118      	cbz	r0, 8005ad0 <SPI_TxISR_8BIT+0x44>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ac8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005aca:	f043 0320 	orr.w	r3, r3, #32
 8005ace:	6623      	str	r3, [r4, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ad0:	68a3      	ldr	r3, [r4, #8]
 8005ad2:	b14b      	cbz	r3, 8005ae8 <SPI_TxISR_8BIT+0x5c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ada:	6e23      	ldr	r3, [r4, #96]	; 0x60
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8005adc:	4620      	mov	r0, r4
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ade:	b98b      	cbnz	r3, 8005b04 <SPI_TxISR_8BIT+0x78>
  {
    /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
 8005ae0:	f00a fc70 	bl	80103c4 <HAL_SPI_TxCpltCallback>
}
 8005ae4:	b002      	add	sp, #8
 8005ae6:	bd10      	pop	{r4, pc}
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ae8:	6822      	ldr	r2, [r4, #0]
 8005aea:	9301      	str	r3, [sp, #4]
 8005aec:	68d3      	ldr	r3, [r2, #12]
 8005aee:	9301      	str	r3, [sp, #4]
 8005af0:	6893      	ldr	r3, [r2, #8]
 8005af2:	9301      	str	r3, [sp, #4]
 8005af4:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8005af6:	2301      	movs	r3, #1
 8005af8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005afc:	6e23      	ldr	r3, [r4, #96]	; 0x60
    HAL_SPI_ErrorCallback(hspi);
 8005afe:	4620      	mov	r0, r4
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d0ed      	beq.n	8005ae0 <SPI_TxISR_8BIT+0x54>
    HAL_SPI_ErrorCallback(hspi);
 8005b04:	f7ff ffc0 	bl	8005a88 <HAL_SPI_ErrorCallback>
}
 8005b08:	b002      	add	sp, #8
 8005b0a:	bd10      	pop	{r4, pc}

08005b0c <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 8005b0c:	6802      	ldr	r2, [r0, #0]
{
 8005b0e:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8005b10:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8005b12:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005b14:	f003 0541 	and.w	r5, r3, #65	; 0x41
 8005b18:	2d01      	cmp	r5, #1
{
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005b1e:	d05a      	beq.n	8005bd6 <HAL_SPI_IRQHandler+0xca>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005b20:	079d      	lsls	r5, r3, #30
 8005b22:	d452      	bmi.n	8005bca <HAL_SPI_IRQHandler+0xbe>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005b24:	f413 7fb0 	tst.w	r3, #352	; 0x160
 8005b28:	d04d      	beq.n	8005bc6 <HAL_SPI_IRQHandler+0xba>
 8005b2a:	068d      	lsls	r5, r1, #26
 8005b2c:	d54b      	bpl.n	8005bc6 <HAL_SPI_IRQHandler+0xba>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005b2e:	0658      	lsls	r0, r3, #25
 8005b30:	d50e      	bpl.n	8005b50 <HAL_SPI_IRQHandler+0x44>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005b32:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8005b36:	2803      	cmp	r0, #3
 8005b38:	d05b      	beq.n	8005bf2 <HAL_SPI_IRQHandler+0xe6>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005b3a:	6e20      	ldr	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b3c:	2500      	movs	r5, #0
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005b3e:	f040 0004 	orr.w	r0, r0, #4
 8005b42:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b44:	9500      	str	r5, [sp, #0]
 8005b46:	68d0      	ldr	r0, [r2, #12]
 8005b48:	9000      	str	r0, [sp, #0]
 8005b4a:	6890      	ldr	r0, [r2, #8]
 8005b4c:	9000      	str	r0, [sp, #0]
 8005b4e:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005b50:	069d      	lsls	r5, r3, #26
 8005b52:	d50c      	bpl.n	8005b6e <HAL_SPI_IRQHandler+0x62>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005b54:	6e20      	ldr	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005b56:	2500      	movs	r5, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005b58:	f040 0001 	orr.w	r0, r0, #1
 8005b5c:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005b5e:	9502      	str	r5, [sp, #8]
 8005b60:	6890      	ldr	r0, [r2, #8]
 8005b62:	9002      	str	r0, [sp, #8]
 8005b64:	6810      	ldr	r0, [r2, #0]
 8005b66:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8005b6a:	6010      	str	r0, [r2, #0]
 8005b6c:	9802      	ldr	r0, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005b6e:	05d8      	lsls	r0, r3, #23
 8005b70:	d508      	bpl.n	8005b84 <HAL_SPI_IRQHandler+0x78>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005b72:	6e23      	ldr	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005b74:	2000      	movs	r0, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005b76:	f043 0308 	orr.w	r3, r3, #8
 8005b7a:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005b7c:	9003      	str	r0, [sp, #12]
 8005b7e:	6893      	ldr	r3, [r2, #8]
 8005b80:	9303      	str	r3, [sp, #12]
 8005b82:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b84:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005b86:	b1f3      	cbz	r3, 8005bc6 <HAL_SPI_IRQHandler+0xba>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005b88:	6853      	ldr	r3, [r2, #4]
 8005b8a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8005b8e:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8005b90:	2001      	movs	r0, #1
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005b92:	078b      	lsls	r3, r1, #30
      hspi->State = HAL_SPI_STATE_READY;
 8005b94:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005b98:	d022      	beq.n	8005be0 <HAL_SPI_IRQHandler+0xd4>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005b9a:	6853      	ldr	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8005b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005b9e:	f023 0303 	bic.w	r3, r3, #3
 8005ba2:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8005ba4:	b120      	cbz	r0, 8005bb0 <HAL_SPI_IRQHandler+0xa4>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005ba6:	4b17      	ldr	r3, [pc, #92]	; (8005c04 <HAL_SPI_IRQHandler+0xf8>)
 8005ba8:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005baa:	f7fc f931 	bl	8001e10 <HAL_DMA_Abort_IT>
 8005bae:	b9d8      	cbnz	r0, 8005be8 <HAL_SPI_IRQHandler+0xdc>
        if (hspi->hdmatx != NULL)
 8005bb0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005bb2:	b140      	cbz	r0, 8005bc6 <HAL_SPI_IRQHandler+0xba>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005bb4:	4b13      	ldr	r3, [pc, #76]	; (8005c04 <HAL_SPI_IRQHandler+0xf8>)
 8005bb6:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005bb8:	f7fc f92a 	bl	8001e10 <HAL_DMA_Abort_IT>
 8005bbc:	b118      	cbz	r0, 8005bc6 <HAL_SPI_IRQHandler+0xba>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005bbe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bc4:	6623      	str	r3, [r4, #96]	; 0x60
}
 8005bc6:	b005      	add	sp, #20
 8005bc8:	bd30      	pop	{r4, r5, pc}
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005bca:	0608      	lsls	r0, r1, #24
 8005bcc:	d5aa      	bpl.n	8005b24 <HAL_SPI_IRQHandler+0x18>
    hspi->TxISR(hspi);
 8005bce:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	4798      	blx	r3
    return;
 8005bd4:	e7f7      	b.n	8005bc6 <HAL_SPI_IRQHandler+0xba>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005bd6:	064d      	lsls	r5, r1, #25
 8005bd8:	d5a2      	bpl.n	8005b20 <HAL_SPI_IRQHandler+0x14>
    hspi->RxISR(hspi);
 8005bda:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005bdc:	4798      	blx	r3
    return;
 8005bde:	e7f2      	b.n	8005bc6 <HAL_SPI_IRQHandler+0xba>
        HAL_SPI_ErrorCallback(hspi);
 8005be0:	4620      	mov	r0, r4
 8005be2:	f7ff ff51 	bl	8005a88 <HAL_SPI_ErrorCallback>
 8005be6:	e7ee      	b.n	8005bc6 <HAL_SPI_IRQHandler+0xba>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005be8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bee:	6623      	str	r3, [r4, #96]	; 0x60
 8005bf0:	e7de      	b.n	8005bb0 <HAL_SPI_IRQHandler+0xa4>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	9301      	str	r3, [sp, #4]
 8005bf6:	68d3      	ldr	r3, [r2, #12]
 8005bf8:	9301      	str	r3, [sp, #4]
 8005bfa:	6893      	ldr	r3, [r2, #8]
 8005bfc:	9301      	str	r3, [sp, #4]
 8005bfe:	9b01      	ldr	r3, [sp, #4]
        return;
 8005c00:	e7e1      	b.n	8005bc6 <HAL_SPI_IRQHandler+0xba>
 8005c02:	bf00      	nop
 8005c04:	08005c09 	.word	0x08005c09

08005c08 <SPI_DMAAbortOnError>:
{
 8005c08:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005c0a:	6a83      	ldr	r3, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  HAL_SPI_ErrorCallback(hspi);
 8005c12:	4618      	mov	r0, r3
  hspi->TxXferCount = 0U;
 8005c14:	87da      	strh	r2, [r3, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8005c16:	f7ff ff37 	bl	8005a88 <HAL_SPI_ErrorCallback>
 8005c1a:	bd08      	pop	{r3, pc}

08005c1c <SPI_TxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c1c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005c1e:	6803      	ldr	r3, [r0, #0]
 8005c20:	f832 1b02 	ldrh.w	r1, [r2], #2
 8005c24:	60d9      	str	r1, [r3, #12]
  hspi->TxXferCount--;
 8005c26:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c28:	6382      	str	r2, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8005c30:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	b103      	cbz	r3, 8005c38 <SPI_TxISR_16BIT+0x1c>
 8005c36:	4770      	bx	lr
{
 8005c38:	b510      	push	{r4, lr}
 8005c3a:	4604      	mov	r4, r0
 8005c3c:	b082      	sub	sp, #8
  tickstart = HAL_GetTick();
 8005c3e:	f7fb f983 	bl	8000f48 <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005c42:	6822      	ldr	r2, [r4, #0]
 8005c44:	6853      	ldr	r3, [r2, #4]
 8005c46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005c4a:	4601      	mov	r1, r0
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005c4c:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005c4e:	4620      	mov	r0, r4
 8005c50:	f7ff fdfc 	bl	800584c <SPI_EndRxTxTransaction.constprop.11>
 8005c54:	b118      	cbz	r0, 8005c5e <SPI_TxISR_16BIT+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c56:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005c58:	f043 0320 	orr.w	r3, r3, #32
 8005c5c:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c5e:	68a3      	ldr	r3, [r4, #8]
 8005c60:	b14b      	cbz	r3, 8005c76 <SPI_TxISR_16BIT+0x5a>
  hspi->State = HAL_SPI_STATE_READY;
 8005c62:	2301      	movs	r3, #1
 8005c64:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c68:	6e23      	ldr	r3, [r4, #96]	; 0x60
    HAL_SPI_ErrorCallback(hspi);
 8005c6a:	4620      	mov	r0, r4
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c6c:	b98b      	cbnz	r3, 8005c92 <SPI_TxISR_16BIT+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8005c6e:	f00a fba9 	bl	80103c4 <HAL_SPI_TxCpltCallback>
}
 8005c72:	b002      	add	sp, #8
 8005c74:	bd10      	pop	{r4, pc}
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c76:	6822      	ldr	r2, [r4, #0]
 8005c78:	9301      	str	r3, [sp, #4]
 8005c7a:	68d3      	ldr	r3, [r2, #12]
 8005c7c:	9301      	str	r3, [sp, #4]
 8005c7e:	6893      	ldr	r3, [r2, #8]
 8005c80:	9301      	str	r3, [sp, #4]
 8005c82:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8005c84:	2301      	movs	r3, #1
 8005c86:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c8a:	6e23      	ldr	r3, [r4, #96]	; 0x60
    HAL_SPI_ErrorCallback(hspi);
 8005c8c:	4620      	mov	r0, r4
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d0ed      	beq.n	8005c6e <SPI_TxISR_16BIT+0x52>
    HAL_SPI_ErrorCallback(hspi);
 8005c92:	f7ff fef9 	bl	8005a88 <HAL_SPI_ErrorCallback>
}
 8005c96:	b002      	add	sp, #8
 8005c98:	bd10      	pop	{r4, pc}
 8005c9a:	bf00      	nop

08005c9c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	f000 808e 	beq.w	8005dbe <HAL_TIM_Base_Init+0x122>
{
 8005ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ca4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005ca8:	4604      	mov	r4, r0
 8005caa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d057      	beq.n	8005d62 <HAL_TIM_Base_Init+0xc6>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cb2:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cb4:	4943      	ldr	r1, [pc, #268]	; (8005dc4 <HAL_TIM_Base_Init+0x128>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cbc:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8005cbe:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cc0:	d054      	beq.n	8005d6c <HAL_TIM_Base_Init+0xd0>
 8005cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc6:	d068      	beq.n	8005d9a <HAL_TIM_Base_Init+0xfe>
 8005cc8:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8005ccc:	428b      	cmp	r3, r1
 8005cce:	d026      	beq.n	8005d1e <HAL_TIM_Base_Init+0x82>
 8005cd0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005cd4:	428b      	cmp	r3, r1
 8005cd6:	d022      	beq.n	8005d1e <HAL_TIM_Base_Init+0x82>
 8005cd8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005cdc:	428b      	cmp	r3, r1
 8005cde:	d01e      	beq.n	8005d1e <HAL_TIM_Base_Init+0x82>
 8005ce0:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 8005ce4:	428b      	cmp	r3, r1
 8005ce6:	d01a      	beq.n	8005d1e <HAL_TIM_Base_Init+0x82>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ce8:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8005cec:	428b      	cmp	r3, r1
 8005cee:	d051      	beq.n	8005d94 <HAL_TIM_Base_Init+0xf8>
 8005cf0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005cf4:	428b      	cmp	r3, r1
 8005cf6:	d04d      	beq.n	8005d94 <HAL_TIM_Base_Init+0xf8>
 8005cf8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005cfc:	428b      	cmp	r3, r1
 8005cfe:	d049      	beq.n	8005d94 <HAL_TIM_Base_Init+0xf8>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d00:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d02:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d04:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d0a:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8005d0c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d0e:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005d10:	6299      	str	r1, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d12:	2201      	movs	r2, #1
 8005d14:	615a      	str	r2, [r3, #20]
  return HAL_OK;
 8005d16:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005d18:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  return HAL_OK;
 8005d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8005d1e:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d20:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d22:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d24:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8005d26:	6865      	ldr	r5, [r4, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d28:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005d2c:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d2e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d32:	4925      	ldr	r1, [pc, #148]	; (8005dc8 <HAL_TIM_Base_Init+0x12c>)
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d34:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d3a:	4302      	orrs	r2, r0
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d3c:	428b      	cmp	r3, r1
  TIMx->CR1 = tmpcr1;
 8005d3e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d40:	62df      	str	r7, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005d42:	629d      	str	r5, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d44:	d00a      	beq.n	8005d5c <HAL_TIM_Base_Init+0xc0>
 8005d46:	4a21      	ldr	r2, [pc, #132]	; (8005dcc <HAL_TIM_Base_Init+0x130>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d007      	beq.n	8005d5c <HAL_TIM_Base_Init+0xc0>
 8005d4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d003      	beq.n	8005d5c <HAL_TIM_Base_Init+0xc0>
 8005d54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d1da      	bne.n	8005d12 <HAL_TIM_Base_Init+0x76>
    TIMx->RCR = Structure->RepetitionCounter;
 8005d5c:	6962      	ldr	r2, [r4, #20]
 8005d5e:	631a      	str	r2, [r3, #48]	; 0x30
 8005d60:	e7d7      	b.n	8005d12 <HAL_TIM_Base_Init+0x76>
    htim->Lock = HAL_UNLOCKED;
 8005d62:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005d66:	f00b f9f5 	bl	8011154 <HAL_TIM_Base_MspInit>
 8005d6a:	e7a2      	b.n	8005cb2 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= Structure->CounterMode;
 8005d6c:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d6e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d70:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d72:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005d76:	432a      	orrs	r2, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d78:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d7c:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d82:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8005d84:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d86:	68e2      	ldr	r2, [r4, #12]
 8005d88:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005d8a:	6862      	ldr	r2, [r4, #4]
 8005d8c:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005d8e:	6962      	ldr	r2, [r4, #20]
 8005d90:	631a      	str	r2, [r3, #48]	; 0x30
 8005d92:	e7be      	b.n	8005d12 <HAL_TIM_Base_Init+0x76>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d94:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d96:	69a1      	ldr	r1, [r4, #24]
 8005d98:	e7ee      	b.n	8005d78 <HAL_TIM_Base_Init+0xdc>
    tmpcr1 |= Structure->CounterMode;
 8005d9a:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d9c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d9e:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005da0:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8005da2:	6865      	ldr	r5, [r4, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005da4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005da8:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8005daa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dae:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005db0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005db4:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8005db6:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005db8:	62df      	str	r7, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005dba:	629d      	str	r5, [r3, #40]	; 0x28
 8005dbc:	e7c3      	b.n	8005d46 <HAL_TIM_Base_Init+0xaa>
    return HAL_ERROR;
 8005dbe:	2001      	movs	r0, #1
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	40012c00 	.word	0x40012c00
 8005dc8:	40013400 	.word	0x40013400
 8005dcc:	40014000 	.word	0x40014000

08005dd0 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd0:	2202      	movs	r2, #2
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005dd2:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005dd8:	689a      	ldr	r2, [r3, #8]
 8005dda:	4909      	ldr	r1, [pc, #36]	; (8005e00 <HAL_TIM_Base_Start+0x30>)
 8005ddc:	400a      	ands	r2, r1
 8005dde:	2a06      	cmp	r2, #6
 8005de0:	d008      	beq.n	8005df4 <HAL_TIM_Base_Start+0x24>
 8005de2:	689a      	ldr	r2, [r3, #8]
 8005de4:	400a      	ands	r2, r1
 8005de6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005dea:	d003      	beq.n	8005df4 <HAL_TIM_Base_Start+0x24>
    __HAL_TIM_ENABLE(htim);
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	f042 0201 	orr.w	r2, r2, #1
 8005df2:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005df4:	2301      	movs	r3, #1
 8005df6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8005dfa:	2000      	movs	r0, #0
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	00010007 	.word	0x00010007

08005e04 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e04:	6803      	ldr	r3, [r0, #0]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005e06:	490a      	ldr	r1, [pc, #40]	; (8005e30 <HAL_TIM_Base_Start_IT+0x2c>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	f042 0201 	orr.w	r2, r2, #1
 8005e0e:	60da      	str	r2, [r3, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005e10:	689a      	ldr	r2, [r3, #8]
 8005e12:	400a      	ands	r2, r1
 8005e14:	2a06      	cmp	r2, #6
 8005e16:	d008      	beq.n	8005e2a <HAL_TIM_Base_Start_IT+0x26>
 8005e18:	689a      	ldr	r2, [r3, #8]
 8005e1a:	400a      	ands	r2, r1
 8005e1c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005e20:	d003      	beq.n	8005e2a <HAL_TIM_Base_Start_IT+0x26>
    __HAL_TIM_ENABLE(htim);
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	f042 0201 	orr.w	r2, r2, #1
 8005e28:	601a      	str	r2, [r3, #0]
}
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	00010007 	.word	0x00010007

08005e34 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005e34:	6803      	ldr	r3, [r0, #0]
 8005e36:	68da      	ldr	r2, [r3, #12]
 8005e38:	f022 0201 	bic.w	r2, r2, #1
 8005e3c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8005e3e:	6a19      	ldr	r1, [r3, #32]
 8005e40:	f241 1211 	movw	r2, #4369	; 0x1111
 8005e44:	4211      	tst	r1, r2
 8005e46:	d108      	bne.n	8005e5a <HAL_TIM_Base_Stop_IT+0x26>
 8005e48:	6a19      	ldr	r1, [r3, #32]
 8005e4a:	f240 4244 	movw	r2, #1092	; 0x444
 8005e4e:	4211      	tst	r1, r2
 8005e50:	d103      	bne.n	8005e5a <HAL_TIM_Base_Stop_IT+0x26>
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	f022 0201 	bic.w	r2, r2, #1
 8005e58:	601a      	str	r2, [r3, #0]
}
 8005e5a:	2000      	movs	r0, #0
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop

08005e60 <HAL_TIM_PWM_MspInit>:
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop

08005e64 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005e64:	2800      	cmp	r0, #0
 8005e66:	f000 808e 	beq.w	8005f86 <HAL_TIM_PWM_Init+0x122>
{
 8005e6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005e6c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005e70:	4604      	mov	r4, r0
 8005e72:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d057      	beq.n	8005f2a <HAL_TIM_PWM_Init+0xc6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e7a:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e7c:	4943      	ldr	r1, [pc, #268]	; (8005f8c <HAL_TIM_PWM_Init+0x128>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005e7e:	2202      	movs	r2, #2
 8005e80:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e84:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8005e86:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e88:	d054      	beq.n	8005f34 <HAL_TIM_PWM_Init+0xd0>
 8005e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e8e:	d068      	beq.n	8005f62 <HAL_TIM_PWM_Init+0xfe>
 8005e90:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8005e94:	428b      	cmp	r3, r1
 8005e96:	d026      	beq.n	8005ee6 <HAL_TIM_PWM_Init+0x82>
 8005e98:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005e9c:	428b      	cmp	r3, r1
 8005e9e:	d022      	beq.n	8005ee6 <HAL_TIM_PWM_Init+0x82>
 8005ea0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005ea4:	428b      	cmp	r3, r1
 8005ea6:	d01e      	beq.n	8005ee6 <HAL_TIM_PWM_Init+0x82>
 8005ea8:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 8005eac:	428b      	cmp	r3, r1
 8005eae:	d01a      	beq.n	8005ee6 <HAL_TIM_PWM_Init+0x82>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005eb0:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8005eb4:	428b      	cmp	r3, r1
 8005eb6:	d051      	beq.n	8005f5c <HAL_TIM_PWM_Init+0xf8>
 8005eb8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005ebc:	428b      	cmp	r3, r1
 8005ebe:	d04d      	beq.n	8005f5c <HAL_TIM_PWM_Init+0xf8>
 8005ec0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005ec4:	428b      	cmp	r3, r1
 8005ec6:	d049      	beq.n	8005f5c <HAL_TIM_PWM_Init+0xf8>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ec8:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005eca:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8005ecc:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ece:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ed2:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8005ed4:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ed6:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005ed8:	6299      	str	r1, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005eda:	2201      	movs	r2, #1
 8005edc:	615a      	str	r2, [r3, #20]
  return HAL_OK;
 8005ede:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005ee0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  return HAL_OK;
 8005ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8005ee6:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ee8:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005eea:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005eec:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8005eee:	6865      	ldr	r5, [r4, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ef0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005ef4:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ef6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005efa:	4925      	ldr	r1, [pc, #148]	; (8005f90 <HAL_TIM_PWM_Init+0x12c>)
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005efc:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005efe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f02:	4302      	orrs	r2, r0
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f04:	428b      	cmp	r3, r1
  TIMx->CR1 = tmpcr1;
 8005f06:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f08:	62df      	str	r7, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005f0a:	629d      	str	r5, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f0c:	d00a      	beq.n	8005f24 <HAL_TIM_PWM_Init+0xc0>
 8005f0e:	4a21      	ldr	r2, [pc, #132]	; (8005f94 <HAL_TIM_PWM_Init+0x130>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d007      	beq.n	8005f24 <HAL_TIM_PWM_Init+0xc0>
 8005f14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d003      	beq.n	8005f24 <HAL_TIM_PWM_Init+0xc0>
 8005f1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d1da      	bne.n	8005eda <HAL_TIM_PWM_Init+0x76>
    TIMx->RCR = Structure->RepetitionCounter;
 8005f24:	6962      	ldr	r2, [r4, #20]
 8005f26:	631a      	str	r2, [r3, #48]	; 0x30
 8005f28:	e7d7      	b.n	8005eda <HAL_TIM_PWM_Init+0x76>
    htim->Lock = HAL_UNLOCKED;
 8005f2a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005f2e:	f7ff ff97 	bl	8005e60 <HAL_TIM_PWM_MspInit>
 8005f32:	e7a2      	b.n	8005e7a <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= Structure->CounterMode;
 8005f34:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f36:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f38:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f3a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005f3e:	432a      	orrs	r2, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f40:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f44:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f4a:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8005f4c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f4e:	68e2      	ldr	r2, [r4, #12]
 8005f50:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005f52:	6862      	ldr	r2, [r4, #4]
 8005f54:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005f56:	6962      	ldr	r2, [r4, #20]
 8005f58:	631a      	str	r2, [r3, #48]	; 0x30
 8005f5a:	e7be      	b.n	8005eda <HAL_TIM_PWM_Init+0x76>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f5c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f5e:	69a1      	ldr	r1, [r4, #24]
 8005f60:	e7ee      	b.n	8005f40 <HAL_TIM_PWM_Init+0xdc>
    tmpcr1 |= Structure->CounterMode;
 8005f62:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f64:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f66:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f68:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8005f6a:	6865      	ldr	r5, [r4, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f6c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005f70:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f72:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f76:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f7c:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8005f7e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f80:	62df      	str	r7, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005f82:	629d      	str	r5, [r3, #40]	; 0x28
 8005f84:	e7c3      	b.n	8005f0e <HAL_TIM_PWM_Init+0xaa>
    return HAL_ERROR;
 8005f86:	2001      	movs	r0, #1
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	40012c00 	.word	0x40012c00
 8005f90:	40013400 	.word	0x40013400
 8005f94:	40014000 	.word	0x40014000

08005f98 <HAL_TIM_PWM_Start>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f98:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f9a:	2201      	movs	r2, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f9c:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f9e:	f001 011f 	and.w	r1, r1, #31
 8005fa2:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 8005fa6:	ea20 0001 	bic.w	r0, r0, r1
{
 8005faa:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 8005fac:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fae:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fb0:	4c15      	ldr	r4, [pc, #84]	; (8006008 <HAL_TIM_PWM_Start+0x70>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fb2:	4311      	orrs	r1, r2
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fb4:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fb6:	6219      	str	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fb8:	d020      	beq.n	8005ffc <HAL_TIM_PWM_Start+0x64>
 8005fba:	4a14      	ldr	r2, [pc, #80]	; (800600c <HAL_TIM_PWM_Start+0x74>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d01d      	beq.n	8005ffc <HAL_TIM_PWM_Start+0x64>
 8005fc0:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d019      	beq.n	8005ffc <HAL_TIM_PWM_Start+0x64>
 8005fc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d015      	beq.n	8005ffc <HAL_TIM_PWM_Start+0x64>
 8005fd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d011      	beq.n	8005ffc <HAL_TIM_PWM_Start+0x64>
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005fd8:	689a      	ldr	r2, [r3, #8]
 8005fda:	490d      	ldr	r1, [pc, #52]	; (8006010 <HAL_TIM_PWM_Start+0x78>)
 8005fdc:	400a      	ands	r2, r1
 8005fde:	2a06      	cmp	r2, #6
 8005fe0:	d008      	beq.n	8005ff4 <HAL_TIM_PWM_Start+0x5c>
 8005fe2:	689a      	ldr	r2, [r3, #8]
 8005fe4:	400a      	ands	r2, r1
 8005fe6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005fea:	d003      	beq.n	8005ff4 <HAL_TIM_PWM_Start+0x5c>
    __HAL_TIM_ENABLE(htim);
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	f042 0201 	orr.w	r2, r2, #1
 8005ff2:	601a      	str	r2, [r3, #0]
}
 8005ff4:	2000      	movs	r0, #0
 8005ff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ffa:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 8005ffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ffe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006002:	645a      	str	r2, [r3, #68]	; 0x44
 8006004:	e7e8      	b.n	8005fd8 <HAL_TIM_PWM_Start+0x40>
 8006006:	bf00      	nop
 8006008:	40012c00 	.word	0x40012c00
 800600c:	40013400 	.word	0x40013400
 8006010:	00010007 	.word	0x00010007

08006014 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8006014:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006018:	2b01      	cmp	r3, #1
 800601a:	d066      	beq.n	80060ea <HAL_TIM_PWM_ConfigChannel+0xd6>
{
 800601c:	b5f0      	push	{r4, r5, r6, r7, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 800601e:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8006020:	2401      	movs	r4, #1
 8006022:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006026:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 800602a:	2a14      	cmp	r2, #20
 800602c:	d855      	bhi.n	80060da <HAL_TIM_PWM_ConfigChannel+0xc6>
 800602e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006032:	009e      	.short	0x009e
 8006034:	00540054 	.word	0x00540054
 8006038:	00dd0054 	.word	0x00dd0054
 800603c:	00540054 	.word	0x00540054
 8006040:	011d0054 	.word	0x011d0054
 8006044:	00540054 	.word	0x00540054
 8006048:	00150054 	.word	0x00150054
 800604c:	00540054 	.word	0x00540054
 8006050:	01590054 	.word	0x01590054
 8006054:	00540054 	.word	0x00540054
 8006058:	005e0054 	.word	0x005e0054
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800605c:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800605e:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006062:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006064:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006066:	4e9e      	ldr	r6, [pc, #632]	; (80062e0 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006068:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 800606c:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800606e:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006070:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8006072:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006074:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 8006078:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800607c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006080:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006082:	ea44 340e 	orr.w	r4, r4, lr, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006086:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800608a:	f000 8171 	beq.w	8006370 <HAL_TIM_PWM_ConfigChannel+0x35c>
 800608e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006092:	42b3      	cmp	r3, r6
 8006094:	f000 816c 	beq.w	8006370 <HAL_TIM_PWM_ConfigChannel+0x35c>
 8006098:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800609c:	42b3      	cmp	r3, r6
 800609e:	f000 8167 	beq.w	8006370 <HAL_TIM_PWM_ConfigChannel+0x35c>
 80060a2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80060a6:	42b3      	cmp	r3, r6
 80060a8:	f000 8162 	beq.w	8006370 <HAL_TIM_PWM_ConfigChannel+0x35c>
 80060ac:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80060b0:	42b3      	cmp	r3, r6
 80060b2:	f000 815d 	beq.w	8006370 <HAL_TIM_PWM_ConfigChannel+0x35c>
  TIMx->CCR4 = OC_Config->Pulse;
 80060b6:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80060b8:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80060ba:	61da      	str	r2, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80060bc:	641e      	str	r6, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80060be:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060c0:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060c2:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060c4:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 80060c8:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060ca:	69d9      	ldr	r1, [r3, #28]
 80060cc:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80060d0:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060d2:	69da      	ldr	r2, [r3, #28]
 80060d4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80060d8:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80060da:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80060dc:	2201      	movs	r2, #1
 80060de:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80060e2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80060e6:	4618      	mov	r0, r3
 80060e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 80060ea:	2002      	movs	r0, #2
 80060ec:	4770      	bx	lr
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80060ee:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80060f0:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80060f4:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060f6:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060f8:	4e79      	ldr	r6, [pc, #484]	; (80062e0 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80060fa:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
 80060fe:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8006100:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006102:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8006104:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006106:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800610a:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800610e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006112:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006114:	ea44 540e 	orr.w	r4, r4, lr, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006118:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800611c:	f000 811c 	beq.w	8006358 <HAL_TIM_PWM_ConfigChannel+0x344>
 8006120:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006124:	42b3      	cmp	r3, r6
 8006126:	f000 8117 	beq.w	8006358 <HAL_TIM_PWM_ConfigChannel+0x344>
 800612a:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800612e:	42b3      	cmp	r3, r6
 8006130:	f000 8112 	beq.w	8006358 <HAL_TIM_PWM_ConfigChannel+0x344>
 8006134:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006138:	42b3      	cmp	r3, r6
 800613a:	f000 810d 	beq.w	8006358 <HAL_TIM_PWM_ConfigChannel+0x344>
 800613e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006142:	42b3      	cmp	r3, r6
 8006144:	f000 8108 	beq.w	8006358 <HAL_TIM_PWM_ConfigChannel+0x344>
  TIMx->CCR6 = OC_Config->Pulse;
 8006148:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800614a:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800614c:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800614e:	65de      	str	r6, [r3, #92]	; 0x5c
  TIMx->CCER = tmpccer;
 8006150:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006152:	6d5c      	ldr	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006154:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006156:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 800615a:	655c      	str	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800615c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800615e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006162:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006164:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006166:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800616a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800616c:	e7b5      	b.n	80060da <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800616e:	6803      	ldr	r3, [r0, #0]
  tmpccer |= OC_Config->OCPolarity;
 8006170:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006174:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8006176:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006178:	4e59      	ldr	r6, [pc, #356]	; (80062e0 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800617a:	f025 0501 	bic.w	r5, r5, #1
 800617e:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8006180:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006182:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8006184:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006186:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 800618a:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800618e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006192:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 8006194:	ea42 020e 	orr.w	r2, r2, lr
  tmpccmrx |= OC_Config->OCMode;
 8006198:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800619c:	f000 810c 	beq.w	80063b8 <HAL_TIM_PWM_ConfigChannel+0x3a4>
 80061a0:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80061a4:	42b3      	cmp	r3, r6
 80061a6:	f000 8107 	beq.w	80063b8 <HAL_TIM_PWM_ConfigChannel+0x3a4>
 80061aa:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80061ae:	42b3      	cmp	r3, r6
 80061b0:	f000 8102 	beq.w	80063b8 <HAL_TIM_PWM_ConfigChannel+0x3a4>
 80061b4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80061b8:	42b3      	cmp	r3, r6
 80061ba:	f000 80fd 	beq.w	80063b8 <HAL_TIM_PWM_ConfigChannel+0x3a4>
 80061be:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80061c2:	42b3      	cmp	r3, r6
 80061c4:	f000 80f8 	beq.w	80063b8 <HAL_TIM_PWM_ConfigChannel+0x3a4>
  TIMx->CCR1 = OC_Config->Pulse;
 80061c8:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80061ca:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80061cc:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80061ce:	635e      	str	r6, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80061d0:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061d2:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061d4:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061d6:	f044 0408 	orr.w	r4, r4, #8
 80061da:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061dc:	6999      	ldr	r1, [r3, #24]
 80061de:	f021 0104 	bic.w	r1, r1, #4
 80061e2:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061e4:	699a      	ldr	r2, [r3, #24]
 80061e6:	432a      	orrs	r2, r5
 80061e8:	619a      	str	r2, [r3, #24]
      break;
 80061ea:	e776      	b.n	80060da <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061ec:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061ee:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061f2:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061f4:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061f6:	4e3a      	ldr	r6, [pc, #232]	; (80062e0 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061f8:	f025 0510 	bic.w	r5, r5, #16
 80061fc:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80061fe:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006200:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8006202:	699a      	ldr	r2, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006204:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 8006208:	f024 0420 	bic.w	r4, r4, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800620c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006210:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006212:	ea44 140e 	orr.w	r4, r4, lr, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006216:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800621a:	f000 80be 	beq.w	800639a <HAL_TIM_PWM_ConfigChannel+0x386>
 800621e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006222:	42b3      	cmp	r3, r6
 8006224:	f000 80b9 	beq.w	800639a <HAL_TIM_PWM_ConfigChannel+0x386>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006228:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800622c:	42b3      	cmp	r3, r6
 800622e:	f000 80bb 	beq.w	80063a8 <HAL_TIM_PWM_ConfigChannel+0x394>
 8006232:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006236:	42b3      	cmp	r3, r6
 8006238:	f000 80b6 	beq.w	80063a8 <HAL_TIM_PWM_ConfigChannel+0x394>
 800623c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006240:	42b3      	cmp	r3, r6
 8006242:	f000 80b1 	beq.w	80063a8 <HAL_TIM_PWM_ConfigChannel+0x394>
  TIMx->CCR2 = OC_Config->Pulse;
 8006246:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006248:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800624a:	619a      	str	r2, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800624c:	639e      	str	r6, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800624e:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006250:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006252:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006254:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8006258:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800625a:	6999      	ldr	r1, [r3, #24]
 800625c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006260:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006262:	699a      	ldr	r2, [r3, #24]
 8006264:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8006268:	619a      	str	r2, [r3, #24]
      break;
 800626a:	e736      	b.n	80060da <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800626c:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800626e:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006272:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8006274:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006276:	4e1a      	ldr	r6, [pc, #104]	; (80062e0 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006278:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 800627c:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800627e:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006280:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8006282:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006284:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 8006288:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800628c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006290:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006292:	ea44 240e 	orr.w	r4, r4, lr, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8006296:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800629a:	d06f      	beq.n	800637c <HAL_TIM_PWM_ConfigChannel+0x368>
 800629c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80062a0:	42b3      	cmp	r3, r6
 80062a2:	d06b      	beq.n	800637c <HAL_TIM_PWM_ConfigChannel+0x368>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062a4:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80062a8:	42b3      	cmp	r3, r6
 80062aa:	d06e      	beq.n	800638a <HAL_TIM_PWM_ConfigChannel+0x376>
 80062ac:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80062b0:	42b3      	cmp	r3, r6
 80062b2:	d06a      	beq.n	800638a <HAL_TIM_PWM_ConfigChannel+0x376>
 80062b4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80062b8:	42b3      	cmp	r3, r6
 80062ba:	d066      	beq.n	800638a <HAL_TIM_PWM_ConfigChannel+0x376>
  TIMx->CCR3 = OC_Config->Pulse;
 80062bc:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80062be:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80062c0:	61da      	str	r2, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80062c2:	63de      	str	r6, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80062c4:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062c6:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062c8:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062ca:	f044 0408 	orr.w	r4, r4, #8
 80062ce:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062d0:	69d9      	ldr	r1, [r3, #28]
 80062d2:	f021 0104 	bic.w	r1, r1, #4
 80062d6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062d8:	69da      	ldr	r2, [r3, #28]
 80062da:	432a      	orrs	r2, r5
 80062dc:	61da      	str	r2, [r3, #28]
      break;
 80062de:	e6fc      	b.n	80060da <HAL_TIM_PWM_ConfigChannel+0xc6>
 80062e0:	40012c00 	.word	0x40012c00
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80062e4:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80062e6:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80062ea:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 80062ec:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ee:	4e39      	ldr	r6, [pc, #228]	; (80063d4 <HAL_TIM_PWM_ConfigChannel+0x3c0>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80062f0:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
 80062f4:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80062f6:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80062f8:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80062fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80062fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 8006300:	f424 3400 	bic.w	r4, r4, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006304:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006308:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800630a:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 800630e:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006312:	d027      	beq.n	8006364 <HAL_TIM_PWM_ConfigChannel+0x350>
 8006314:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006318:	42b3      	cmp	r3, r6
 800631a:	d023      	beq.n	8006364 <HAL_TIM_PWM_ConfigChannel+0x350>
 800631c:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006320:	42b3      	cmp	r3, r6
 8006322:	d01f      	beq.n	8006364 <HAL_TIM_PWM_ConfigChannel+0x350>
 8006324:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006328:	42b3      	cmp	r3, r6
 800632a:	d01b      	beq.n	8006364 <HAL_TIM_PWM_ConfigChannel+0x350>
 800632c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006330:	42b3      	cmp	r3, r6
 8006332:	d017      	beq.n	8006364 <HAL_TIM_PWM_ConfigChannel+0x350>
  TIMx->CCR5 = OC_Config->Pulse;
 8006334:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006336:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006338:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800633a:	659e      	str	r6, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 800633c:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800633e:	6d5c      	ldr	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006340:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006342:	f044 0408 	orr.w	r4, r4, #8
 8006346:	655c      	str	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006348:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800634a:	f021 0104 	bic.w	r1, r1, #4
 800634e:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006350:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006352:	432a      	orrs	r2, r5
 8006354:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006356:	e6c0      	b.n	80060da <HAL_TIM_PWM_ConfigChannel+0xc6>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006358:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 800635a:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800635e:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
 8006362:	e6f1      	b.n	8006148 <HAL_TIM_PWM_ConfigChannel+0x134>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006364:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006366:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800636a:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 800636e:	e7e1      	b.n	8006334 <HAL_TIM_PWM_ConfigChannel+0x320>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006370:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006372:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006376:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 800637a:	e69c      	b.n	80060b6 <HAL_TIM_PWM_ConfigChannel+0xa2>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800637c:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800637e:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006382:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8006386:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800638a:	694e      	ldr	r6, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800638c:	698f      	ldr	r7, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800638e:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006392:	433e      	orrs	r6, r7
 8006394:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 8006398:	e790      	b.n	80062bc <HAL_TIM_PWM_ConfigChannel+0x2a8>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800639a:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800639c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063a0:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80063a4:	f024 0440 	bic.w	r4, r4, #64	; 0x40
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80063a8:	694e      	ldr	r6, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80063aa:	698f      	ldr	r7, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80063ac:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80063b0:	433e      	orrs	r6, r7
 80063b2:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
 80063b6:	e746      	b.n	8006246 <HAL_TIM_PWM_ConfigChannel+0x232>
    tmpccer |= OC_Config->OCNPolarity;
 80063b8:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 80063ba:	698f      	ldr	r7, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 80063bc:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 80063c0:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 80063c2:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063c4:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80063c8:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 80063ca:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80063ce:	4335      	orrs	r5, r6
 80063d0:	e6fa      	b.n	80061c8 <HAL_TIM_PWM_ConfigChannel+0x1b4>
 80063d2:	bf00      	nop
 80063d4:	40012c00 	.word	0x40012c00

080063d8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80063d8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d03a      	beq.n	8006456 <HAL_TIM_ConfigClockSource+0x7e>
  htim->State = HAL_TIM_STATE_BUSY;
 80063e0:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 80063e2:	6803      	ldr	r3, [r0, #0]
{
 80063e4:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 80063e6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80063ea:	689d      	ldr	r5, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80063ec:	680a      	ldr	r2, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063ee:	4c54      	ldr	r4, [pc, #336]	; (8006540 <HAL_TIM_ConfigClockSource+0x168>)
  switch (sClockSourceConfig->ClockSource)
 80063f0:	2a40      	cmp	r2, #64	; 0x40
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063f2:	ea04 0405 	and.w	r4, r4, r5
  __HAL_LOCK(htim);
 80063f6:	f04f 0501 	mov.w	r5, #1
 80063fa:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 80063fe:	609c      	str	r4, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8006400:	d041      	beq.n	8006486 <HAL_TIM_ConfigClockSource+0xae>
 8006402:	d958      	bls.n	80064b6 <HAL_TIM_ConfigClockSource+0xde>
 8006404:	2a70      	cmp	r2, #112	; 0x70
 8006406:	f000 8084 	beq.w	8006512 <HAL_TIM_ConfigClockSource+0x13a>
 800640a:	d826      	bhi.n	800645a <HAL_TIM_ConfigClockSource+0x82>
 800640c:	2a50      	cmp	r2, #80	; 0x50
 800640e:	d068      	beq.n	80064e2 <HAL_TIM_ConfigClockSource+0x10a>
 8006410:	2a60      	cmp	r2, #96	; 0x60
 8006412:	d117      	bne.n	8006444 <HAL_TIM_ConfigClockSource+0x6c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006414:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006416:	684d      	ldr	r5, [r1, #4]
 8006418:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800641a:	f024 0410 	bic.w	r4, r4, #16
 800641e:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006420:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8006422:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006424:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006428:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800642c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006430:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8006434:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8006436:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8006438:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800643a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800643e:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8006442:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8006444:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8006446:	2201      	movs	r2, #1
 8006448:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800644c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8006450:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8006452:	4618      	mov	r0, r3
}
 8006454:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006456:	2002      	movs	r0, #2
 8006458:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800645a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800645e:	d039      	beq.n	80064d4 <HAL_TIM_ConfigClockSource+0xfc>
 8006460:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006464:	d1ee      	bne.n	8006444 <HAL_TIM_ConfigClockSource+0x6c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006466:	688a      	ldr	r2, [r1, #8]
 8006468:	684d      	ldr	r5, [r1, #4]
 800646a:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 800646c:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800646e:	432a      	orrs	r2, r5
 8006470:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006474:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006478:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800647a:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800647c:	689a      	ldr	r2, [r3, #8]
 800647e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006482:	609a      	str	r2, [r3, #8]
      break;
 8006484:	e7de      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x6c>
  tmpccer = TIMx->CCER;
 8006486:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006488:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800648a:	684c      	ldr	r4, [r1, #4]
 800648c:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800648e:	f026 0601 	bic.w	r6, r6, #1
 8006492:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006494:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006496:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800649a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800649e:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80064a2:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80064a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064a6:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80064a8:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80064aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064ae:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80064b2:	609a      	str	r2, [r3, #8]
 80064b4:	e7c6      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x6c>
  switch (sClockSourceConfig->ClockSource)
 80064b6:	2a10      	cmp	r2, #16
 80064b8:	d004      	beq.n	80064c4 <HAL_TIM_ConfigClockSource+0xec>
 80064ba:	d93e      	bls.n	800653a <HAL_TIM_ConfigClockSource+0x162>
 80064bc:	2a20      	cmp	r2, #32
 80064be:	d001      	beq.n	80064c4 <HAL_TIM_ConfigClockSource+0xec>
 80064c0:	2a30      	cmp	r2, #48	; 0x30
 80064c2:	d1bf      	bne.n	8006444 <HAL_TIM_ConfigClockSource+0x6c>
  tmpsmcr = TIMx->SMCR;
 80064c4:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064c6:	f042 0207 	orr.w	r2, r2, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80064ca:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064ce:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 80064d0:	609a      	str	r2, [r3, #8]
 80064d2:	e7b7      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x6c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80064da:	f022 0207 	bic.w	r2, r2, #7
 80064de:	609a      	str	r2, [r3, #8]
      break;
 80064e0:	e7b0      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x6c>
  tmpccer = TIMx->CCER;
 80064e2:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064e4:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064e6:	684c      	ldr	r4, [r1, #4]
 80064e8:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064ea:	f026 0601 	bic.w	r6, r6, #1
 80064ee:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064f0:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064f2:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064f6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064fa:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80064fe:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8006500:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006502:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8006504:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006506:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800650a:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800650e:	609a      	str	r2, [r3, #8]
 8006510:	e798      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x6c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006512:	688a      	ldr	r2, [r1, #8]
 8006514:	684d      	ldr	r5, [r1, #4]
 8006516:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8006518:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800651a:	432a      	orrs	r2, r5
 800651c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006520:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006524:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8006526:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8006528:	689a      	ldr	r2, [r3, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800652a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800652e:	f022 0277 	bic.w	r2, r2, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006532:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8006536:	609a      	str	r2, [r3, #8]
      break;
 8006538:	e784      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x6c>
  switch (sClockSourceConfig->ClockSource)
 800653a:	2a00      	cmp	r2, #0
 800653c:	d0c2      	beq.n	80064c4 <HAL_TIM_ConfigClockSource+0xec>
 800653e:	e781      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x6c>
 8006540:	fffe0088 	.word	0xfffe0088

08006544 <HAL_TIM_OC_DelayElapsedCallback>:
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop

08006548 <HAL_TIM_IC_CaptureCallback>:
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop

0800654c <HAL_TIM_PWM_PulseFinishedCallback>:
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop

08006550 <HAL_TIM_TriggerCallback>:
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop

08006554 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006554:	6803      	ldr	r3, [r0, #0]
 8006556:	691a      	ldr	r2, [r3, #16]
 8006558:	0791      	lsls	r1, r2, #30
{
 800655a:	b510      	push	{r4, lr}
 800655c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800655e:	d502      	bpl.n	8006566 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006560:	68da      	ldr	r2, [r3, #12]
 8006562:	0792      	lsls	r2, r2, #30
 8006564:	d465      	bmi.n	8006632 <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006566:	691a      	ldr	r2, [r3, #16]
 8006568:	0752      	lsls	r2, r2, #29
 800656a:	d502      	bpl.n	8006572 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800656c:	68da      	ldr	r2, [r3, #12]
 800656e:	0750      	lsls	r0, r2, #29
 8006570:	d44c      	bmi.n	800660c <HAL_TIM_IRQHandler+0xb8>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006572:	691a      	ldr	r2, [r3, #16]
 8006574:	0711      	lsls	r1, r2, #28
 8006576:	d502      	bpl.n	800657e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006578:	68da      	ldr	r2, [r3, #12]
 800657a:	0712      	lsls	r2, r2, #28
 800657c:	d434      	bmi.n	80065e8 <HAL_TIM_IRQHandler+0x94>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800657e:	691a      	ldr	r2, [r3, #16]
 8006580:	06d0      	lsls	r0, r2, #27
 8006582:	d502      	bpl.n	800658a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006584:	68da      	ldr	r2, [r3, #12]
 8006586:	06d1      	lsls	r1, r2, #27
 8006588:	d41e      	bmi.n	80065c8 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800658a:	691a      	ldr	r2, [r3, #16]
 800658c:	07d2      	lsls	r2, r2, #31
 800658e:	d502      	bpl.n	8006596 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006590:	68da      	ldr	r2, [r3, #12]
 8006592:	07d0      	lsls	r0, r2, #31
 8006594:	d46b      	bmi.n	800666e <HAL_TIM_IRQHandler+0x11a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006596:	691a      	ldr	r2, [r3, #16]
 8006598:	0611      	lsls	r1, r2, #24
 800659a:	d502      	bpl.n	80065a2 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800659c:	68da      	ldr	r2, [r3, #12]
 800659e:	0612      	lsls	r2, r2, #24
 80065a0:	d46d      	bmi.n	800667e <HAL_TIM_IRQHandler+0x12a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80065a2:	691a      	ldr	r2, [r3, #16]
 80065a4:	05d0      	lsls	r0, r2, #23
 80065a6:	d502      	bpl.n	80065ae <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065a8:	68da      	ldr	r2, [r3, #12]
 80065aa:	0611      	lsls	r1, r2, #24
 80065ac:	d46f      	bmi.n	800668e <HAL_TIM_IRQHandler+0x13a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065ae:	691a      	ldr	r2, [r3, #16]
 80065b0:	0652      	lsls	r2, r2, #25
 80065b2:	d502      	bpl.n	80065ba <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065b4:	68da      	ldr	r2, [r3, #12]
 80065b6:	0650      	lsls	r0, r2, #25
 80065b8:	d451      	bmi.n	800665e <HAL_TIM_IRQHandler+0x10a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065ba:	691a      	ldr	r2, [r3, #16]
 80065bc:	0691      	lsls	r1, r2, #26
 80065be:	d502      	bpl.n	80065c6 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065c0:	68da      	ldr	r2, [r3, #12]
 80065c2:	0692      	lsls	r2, r2, #26
 80065c4:	d443      	bmi.n	800664e <HAL_TIM_IRQHandler+0xfa>
 80065c6:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065c8:	f06f 0210 	mvn.w	r2, #16
 80065cc:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065ce:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065d0:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065d2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065d6:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80065d8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065da:	d06c      	beq.n	80066b6 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_IC_CaptureCallback(htim);
 80065dc:	f7ff ffb4 	bl	8006548 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065e0:	2200      	movs	r2, #0
 80065e2:	6823      	ldr	r3, [r4, #0]
 80065e4:	7722      	strb	r2, [r4, #28]
 80065e6:	e7d0      	b.n	800658a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065e8:	f06f 0208 	mvn.w	r2, #8
 80065ec:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065ee:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065f0:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065f2:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065f4:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80065f6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065f8:	d15a      	bne.n	80066b0 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065fa:	f7ff ffa3 	bl	8006544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065fe:	4620      	mov	r0, r4
 8006600:	f7ff ffa4 	bl	800654c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006604:	2200      	movs	r2, #0
 8006606:	6823      	ldr	r3, [r4, #0]
 8006608:	7722      	strb	r2, [r4, #28]
 800660a:	e7b8      	b.n	800657e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800660c:	f06f 0204 	mvn.w	r2, #4
 8006610:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006612:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006614:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006616:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800661a:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800661c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800661e:	d144      	bne.n	80066aa <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006620:	f7ff ff90 	bl	8006544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006624:	4620      	mov	r0, r4
 8006626:	f7ff ff91 	bl	800654c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800662a:	2200      	movs	r2, #0
 800662c:	6823      	ldr	r3, [r4, #0]
 800662e:	7722      	strb	r2, [r4, #28]
 8006630:	e79f      	b.n	8006572 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006632:	f06f 0202 	mvn.w	r2, #2
 8006636:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006638:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800663a:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800663c:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800663e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006640:	d02d      	beq.n	800669e <HAL_TIM_IRQHandler+0x14a>
          HAL_TIM_IC_CaptureCallback(htim);
 8006642:	f7ff ff81 	bl	8006548 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006646:	2200      	movs	r2, #0
 8006648:	6823      	ldr	r3, [r4, #0]
 800664a:	7722      	strb	r2, [r4, #28]
 800664c:	e78b      	b.n	8006566 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800664e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8006652:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006654:	611a      	str	r2, [r3, #16]
}
 8006656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 800665a:	f000 b8a9 	b.w	80067b0 <HAL_TIMEx_CommutationCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800665e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006662:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006664:	4620      	mov	r0, r4
 8006666:	f7ff ff73 	bl	8006550 <HAL_TIM_TriggerCallback>
 800666a:	6823      	ldr	r3, [r4, #0]
 800666c:	e7a5      	b.n	80065ba <HAL_TIM_IRQHandler+0x66>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800666e:	f06f 0201 	mvn.w	r2, #1
 8006672:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006674:	4620      	mov	r0, r4
 8006676:	f009 feb9 	bl	80103ec <HAL_TIM_PeriodElapsedCallback>
 800667a:	6823      	ldr	r3, [r4, #0]
 800667c:	e78b      	b.n	8006596 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800667e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006682:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006684:	4620      	mov	r0, r4
 8006686:	f000 f895 	bl	80067b4 <HAL_TIMEx_BreakCallback>
 800668a:	6823      	ldr	r3, [r4, #0]
 800668c:	e789      	b.n	80065a2 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800668e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006692:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8006694:	4620      	mov	r0, r4
 8006696:	f000 f88f 	bl	80067b8 <HAL_TIMEx_Break2Callback>
 800669a:	6823      	ldr	r3, [r4, #0]
 800669c:	e787      	b.n	80065ae <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800669e:	f7ff ff51 	bl	8006544 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066a2:	4620      	mov	r0, r4
 80066a4:	f7ff ff52 	bl	800654c <HAL_TIM_PWM_PulseFinishedCallback>
 80066a8:	e7cd      	b.n	8006646 <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 80066aa:	f7ff ff4d 	bl	8006548 <HAL_TIM_IC_CaptureCallback>
 80066ae:	e7bc      	b.n	800662a <HAL_TIM_IRQHandler+0xd6>
        HAL_TIM_IC_CaptureCallback(htim);
 80066b0:	f7ff ff4a 	bl	8006548 <HAL_TIM_IC_CaptureCallback>
 80066b4:	e7a6      	b.n	8006604 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066b6:	f7ff ff45 	bl	8006544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066ba:	4620      	mov	r0, r4
 80066bc:	f7ff ff46 	bl	800654c <HAL_TIM_PWM_PulseFinishedCallback>
 80066c0:	e78e      	b.n	80065e0 <HAL_TIM_IRQHandler+0x8c>
 80066c2:	bf00      	nop

080066c4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066c4:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80066c8:	2a01      	cmp	r2, #1
 80066ca:	d021      	beq.n	8006710 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
{
 80066cc:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066ce:	6804      	ldr	r4, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066d0:	4d13      	ldr	r5, [pc, #76]	; (8006720 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80066d2:	2202      	movs	r2, #2
 80066d4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066d8:	42ac      	cmp	r4, r5
 80066da:	4603      	mov	r3, r0
  tmpcr2 = htim->Instance->CR2;
 80066dc:	6862      	ldr	r2, [r4, #4]
  tmpsmcr = htim->Instance->SMCR;
 80066de:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066e0:	d018      	beq.n	8006714 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 80066e2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80066e6:	42ac      	cmp	r4, r5
 80066e8:	d014      	beq.n	8006714 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066ea:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066ec:	688d      	ldr	r5, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80066ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 80066f2:	f020 0180 	bic.w	r1, r0, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066f6:	4332      	orrs	r2, r6
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066f8:	4329      	orrs	r1, r5

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066fa:	2601      	movs	r6, #1

  __HAL_UNLOCK(htim);
 80066fc:	2500      	movs	r5, #0
  htim->Instance->CR2 = tmpcr2;
 80066fe:	6062      	str	r2, [r4, #4]

  return HAL_OK;
 8006700:	4628      	mov	r0, r5
  htim->Instance->SMCR = tmpsmcr;
 8006702:	60a1      	str	r1, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8006704:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006708:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
}
 800670c:	bc70      	pop	{r4, r5, r6}
 800670e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006710:	2002      	movs	r0, #2
 8006712:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006714:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006716:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800671a:	432a      	orrs	r2, r5
 800671c:	e7e5      	b.n	80066ea <HAL_TIMEx_MasterConfigSynchronization+0x26>
 800671e:	bf00      	nop
 8006720:	40012c00 	.word	0x40012c00

08006724 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006724:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006728:	2b01      	cmp	r3, #1
 800672a:	d02c      	beq.n	8006786 <HAL_TIMEx_ConfigBreakDeadTime+0x62>
{
 800672c:	b4f0      	push	{r4, r5, r6, r7}

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800672e:	e891 00e0 	ldmia.w	r1, {r5, r6, r7}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006732:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006734:	690c      	ldr	r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800673a:	433b      	orrs	r3, r7
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800673c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006740:	4333      	orrs	r3, r6
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006742:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006746:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006748:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800674c:	4602      	mov	r2, r0
 800674e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006750:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006752:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006754:	4d14      	ldr	r5, [pc, #80]	; (80067a8 <HAL_TIMEx_ConfigBreakDeadTime+0x84>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006756:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006758:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800675c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800675e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006762:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006764:	4333      	orrs	r3, r6
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006766:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800676a:	42a8      	cmp	r0, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800676c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006770:	d00b      	beq.n	800678a <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8006772:	4c0e      	ldr	r4, [pc, #56]	; (80067ac <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 8006774:	42a0      	cmp	r0, r4
 8006776:	d008      	beq.n	800678a <HAL_TIMEx_ConfigBreakDeadTime+0x66>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8006778:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 800677a:	6443      	str	r3, [r0, #68]	; 0x44

  return HAL_OK;
}
 800677c:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 800677e:	4608      	mov	r0, r1
  __HAL_UNLOCK(htim);
 8006780:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
}
 8006784:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006786:	2002      	movs	r0, #2
 8006788:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800678a:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800678c:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800678e:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006790:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006794:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006798:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800679c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800679e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80067a2:	430b      	orrs	r3, r1
 80067a4:	e7e8      	b.n	8006778 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 80067a6:	bf00      	nop
 80067a8:	40012c00 	.word	0x40012c00
 80067ac:	40013400 	.word	0x40013400

080067b0 <HAL_TIMEx_CommutationCallback>:
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop

080067b4 <HAL_TIMEx_BreakCallback>:
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop

080067b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop

080067bc <HAL_UART_TxCpltCallback>:
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop

080067c0 <HAL_UART_ErrorCallback>:
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop

080067c4 <HAL_UART_IRQHandler>:
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80067c4:	6803      	ldr	r3, [r0, #0]
 80067c6:	69da      	ldr	r2, [r3, #28]
{
 80067c8:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
  if (errorflags == RESET)
 80067ca:	0716      	lsls	r6, r2, #28
{
 80067cc:	4604      	mov	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067ce:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067d0:	6899      	ldr	r1, [r3, #8]
  if (errorflags == RESET)
 80067d2:	d05d      	beq.n	8006890 <HAL_UART_IRQHandler+0xcc>
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != RESET)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)
 80067d4:	4d6a      	ldr	r5, [pc, #424]	; (8006980 <HAL_UART_IRQHandler+0x1bc>)
 80067d6:	400d      	ands	r5, r1
 80067d8:	d07e      	beq.n	80068d8 <HAL_UART_IRQHandler+0x114>
      && (((cr3its & USART_CR3_EIE) != RESET)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
#endif
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067da:	07d6      	lsls	r6, r2, #31
 80067dc:	d509      	bpl.n	80067f2 <HAL_UART_IRQHandler+0x2e>
 80067de:	05c6      	lsls	r6, r0, #23
 80067e0:	d507      	bpl.n	80067f2 <HAL_UART_IRQHandler+0x2e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80067e2:	2601      	movs	r6, #1
 80067e4:	621e      	str	r6, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067e6:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 80067ea:	f046 0601 	orr.w	r6, r6, #1
 80067ee:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067f2:	0796      	lsls	r6, r2, #30
 80067f4:	f140 8089 	bpl.w	800690a <HAL_UART_IRQHandler+0x146>
 80067f8:	07ce      	lsls	r6, r1, #31
 80067fa:	d50a      	bpl.n	8006812 <HAL_UART_IRQHandler+0x4e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80067fc:	2602      	movs	r6, #2
 80067fe:	621e      	str	r6, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006800:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 8006804:	f046 0604 	orr.w	r6, r6, #4
 8006808:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800680c:	0756      	lsls	r6, r2, #29
 800680e:	f100 8081 	bmi.w	8006914 <HAL_UART_IRQHandler+0x150>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != RESET)
 8006812:	0716      	lsls	r6, r2, #28
 8006814:	d505      	bpl.n	8006822 <HAL_UART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET) ||
 8006816:	0686      	lsls	r6, r0, #26
 8006818:	f100 8085 	bmi.w	8006926 <HAL_UART_IRQHandler+0x162>
 800681c:	2d00      	cmp	r5, #0
 800681e:	f040 8082 	bne.w	8006926 <HAL_UART_IRQHandler+0x162>

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006822:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8006826:	2d00      	cmp	r5, #0
 8006828:	d031      	beq.n	800688e <HAL_UART_IRQHandler+0xca>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != RESET)
 800682a:	0695      	lsls	r5, r2, #26
 800682c:	d507      	bpl.n	800683e <HAL_UART_IRQHandler+0x7a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
 800682e:	0680      	lsls	r0, r0, #26
 8006830:	f140 8082 	bpl.w	8006938 <HAL_UART_IRQHandler+0x174>
#else
      if (((isrflags & USART_ISR_RXNE) != RESET)
          && ((cr1its & USART_CR1_RXNEIE) != RESET))
#endif
      {
        if (huart->RxISR != NULL)
 8006834:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8006836:	b112      	cbz	r2, 800683e <HAL_UART_IRQHandler+0x7a>
        {
          huart->RxISR(huart);
 8006838:	4620      	mov	r0, r4
 800683a:	4790      	blx	r2
 800683c:	6823      	ldr	r3, [r4, #0]
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800683e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8006842:	0712      	lsls	r2, r2, #28
 8006844:	d404      	bmi.n	8006850 <HAL_UART_IRQHandler+0x8c>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8006846:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8006848:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800684c:	f000 8092 	beq.w	8006974 <HAL_UART_IRQHandler+0x1b0>
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006856:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006858:	689a      	ldr	r2, [r3, #8]
 800685a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800685e:	f022 0201 	bic.w	r2, r2, #1
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006862:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006864:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8006866:	f884 107e 	strb.w	r1, [r4, #126]	; 0x7e
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800686a:	689a      	ldr	r2, [r3, #8]

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800686c:	2100      	movs	r1, #0
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800686e:	0656      	lsls	r6, r2, #25
  huart->RxISR = NULL;
 8006870:	66e1      	str	r1, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006872:	d57b      	bpl.n	800696c <HAL_UART_IRQHandler+0x1a8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006874:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8006876:	6fa0      	ldr	r0, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006878:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800687c:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800687e:	2800      	cmp	r0, #0
 8006880:	d074      	beq.n	800696c <HAL_UART_IRQHandler+0x1a8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006882:	4b40      	ldr	r3, [pc, #256]	; (8006984 <HAL_UART_IRQHandler+0x1c0>)
 8006884:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006886:	f7fb fac3 	bl	8001e10 <HAL_DMA_Abort_IT>
 800688a:	2800      	cmp	r0, #0
 800688c:	d157      	bne.n	800693e <HAL_UART_IRQHandler+0x17a>
 800688e:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_RXNE_RXFNE) != RESET)
 8006890:	0695      	lsls	r5, r2, #26
 8006892:	d50a      	bpl.n	80068aa <HAL_UART_IRQHandler+0xe6>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
 8006894:	0686      	lsls	r6, r0, #26
 8006896:	d506      	bpl.n	80068a6 <HAL_UART_IRQHandler+0xe2>
      if (huart->RxISR != NULL)
 8006898:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800689a:	2b00      	cmp	r3, #0
 800689c:	d0f7      	beq.n	800688e <HAL_UART_IRQHandler+0xca>
      huart->TxISR(huart);
 800689e:	4620      	mov	r0, r4
}
 80068a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 80068a4:	4718      	bx	r3
            || ((cr3its & USART_CR3_RXFTIE) != RESET)))
 80068a6:	00cd      	lsls	r5, r1, #3
 80068a8:	d4f6      	bmi.n	8006898 <HAL_UART_IRQHandler+0xd4>
  if (((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80068aa:	02d5      	lsls	r5, r2, #11
 80068ac:	d40a      	bmi.n	80068c4 <HAL_UART_IRQHandler+0x100>
  if (((isrflags & USART_ISR_TXE_TXFNF) != RESET)
 80068ae:	0615      	lsls	r5, r2, #24
 80068b0:	d51a      	bpl.n	80068e8 <HAL_UART_IRQHandler+0x124>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != RESET)
 80068b2:	0606      	lsls	r6, r0, #24
 80068b4:	d516      	bpl.n	80068e4 <HAL_UART_IRQHandler+0x120>
    if (huart->TxISR != NULL)
 80068b6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d0e8      	beq.n	800688e <HAL_UART_IRQHandler+0xca>
      huart->TxISR(huart);
 80068bc:	4620      	mov	r0, r4
}
 80068be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 80068c2:	4718      	bx	r3
  if (((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80068c4:	024e      	lsls	r6, r1, #9
 80068c6:	d5f2      	bpl.n	80068ae <HAL_UART_IRQHandler+0xea>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80068c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 80068cc:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80068ce:	621a      	str	r2, [r3, #32]
}
 80068d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80068d4:	f000 bea0 	b.w	8007618 <HAL_UARTEx_WakeupCallback>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != RESET))))
 80068d8:	f410 7f90 	tst.w	r0, #288	; 0x120
 80068dc:	d0e5      	beq.n	80068aa <HAL_UART_IRQHandler+0xe6>
    if (((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80068de:	07d6      	lsls	r6, r2, #31
 80068e0:	d587      	bpl.n	80067f2 <HAL_UART_IRQHandler+0x2e>
 80068e2:	e77c      	b.n	80067de <HAL_UART_IRQHandler+0x1a>
          || ((cr3its & USART_CR3_TXFTIE) != RESET)))
 80068e4:	020d      	lsls	r5, r1, #8
 80068e6:	d4e6      	bmi.n	80068b6 <HAL_UART_IRQHandler+0xf2>
  if (((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80068e8:	0651      	lsls	r1, r2, #25
 80068ea:	d501      	bpl.n	80068f0 <HAL_UART_IRQHandler+0x12c>
 80068ec:	0646      	lsls	r6, r0, #25
 80068ee:	d42b      	bmi.n	8006948 <HAL_UART_IRQHandler+0x184>
  if (((isrflags & USART_ISR_TXFE) != RESET) && ((cr1its & USART_CR1_TXFEIE) != RESET))
 80068f0:	0215      	lsls	r5, r2, #8
 80068f2:	d501      	bpl.n	80068f8 <HAL_UART_IRQHandler+0x134>
 80068f4:	0041      	lsls	r1, r0, #1
 80068f6:	d434      	bmi.n	8006962 <HAL_UART_IRQHandler+0x19e>
  if (((isrflags & USART_ISR_RXFF) != RESET) && ((cr1its & USART_CR1_RXFFIE) != RESET))
 80068f8:	01d3      	lsls	r3, r2, #7
 80068fa:	d5c8      	bpl.n	800688e <HAL_UART_IRQHandler+0xca>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	dac6      	bge.n	800688e <HAL_UART_IRQHandler+0xca>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006900:	4620      	mov	r0, r4
}
 8006902:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006906:	f000 be89 	b.w	800761c <HAL_UARTEx_RxFifoFullCallback>
    if (((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800690a:	0756      	lsls	r6, r2, #29
 800690c:	d581      	bpl.n	8006812 <HAL_UART_IRQHandler+0x4e>
 800690e:	07ce      	lsls	r6, r1, #31
 8006910:	f57f af7f 	bpl.w	8006812 <HAL_UART_IRQHandler+0x4e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006914:	2604      	movs	r6, #4
 8006916:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006918:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 800691c:	f046 0602 	orr.w	r6, r6, #2
 8006920:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 8006924:	e775      	b.n	8006812 <HAL_UART_IRQHandler+0x4e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006926:	2508      	movs	r5, #8
 8006928:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800692a:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 800692e:	f045 0508 	orr.w	r5, r5, #8
 8006932:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8006936:	e774      	b.n	8006822 <HAL_UART_IRQHandler+0x5e>
              || ((cr3its & USART_CR3_RXFTIE) != RESET)))
 8006938:	00c9      	lsls	r1, r1, #3
 800693a:	d580      	bpl.n	800683e <HAL_UART_IRQHandler+0x7a>
 800693c:	e77a      	b.n	8006834 <HAL_UART_IRQHandler+0x70>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800693e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
}
 8006940:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006944:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006946:	4718      	bx	r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006948:	681a      	ldr	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800694a:	2520      	movs	r5, #32
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800694c:	f022 0240 	bic.w	r2, r2, #64	; 0x40

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006950:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006952:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006954:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8006956:	f884 507d 	strb.w	r5, [r4, #125]	; 0x7d
  huart->TxISR = NULL;
 800695a:	6721      	str	r1, [r4, #112]	; 0x70
  HAL_UART_TxCpltCallback(huart);
 800695c:	f7ff ff2e 	bl	80067bc <HAL_UART_TxCpltCallback>
 8006960:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006962:	4620      	mov	r0, r4
}
 8006964:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006968:	f000 be5a 	b.w	8007620 <HAL_UARTEx_TxFifoEmptyCallback>
            HAL_UART_ErrorCallback(huart);
 800696c:	4620      	mov	r0, r4
 800696e:	f7ff ff27 	bl	80067c0 <HAL_UART_ErrorCallback>
 8006972:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8006974:	4620      	mov	r0, r4
 8006976:	f7ff ff23 	bl	80067c0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800697a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 800697e:	bd70      	pop	{r4, r5, r6, pc}
 8006980:	10000001 	.word	0x10000001
 8006984:	08006989 	.word	0x08006989

08006988 <UART_DMAAbortOnError>:
{
 8006988:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800698a:	6a83      	ldr	r3, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800698c:	2200      	movs	r2, #0
 800698e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  HAL_UART_ErrorCallback(huart);
 8006992:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 8006994:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8006998:	f7ff ff12 	bl	80067c0 <HAL_UART_ErrorCallback>
 800699c:	bd08      	pop	{r3, pc}
 800699e:	bf00      	nop

080069a0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80069a2:	07da      	lsls	r2, r3, #31
{
 80069a4:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069a6:	d506      	bpl.n	80069b6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069a8:	6801      	ldr	r1, [r0, #0]
 80069aa:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80069ac:	684a      	ldr	r2, [r1, #4]
 80069ae:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80069b2:	4322      	orrs	r2, r4
 80069b4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069b6:	079c      	lsls	r4, r3, #30
 80069b8:	d506      	bpl.n	80069c8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069ba:	6801      	ldr	r1, [r0, #0]
 80069bc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80069be:	684a      	ldr	r2, [r1, #4]
 80069c0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80069c4:	4322      	orrs	r2, r4
 80069c6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069c8:	0759      	lsls	r1, r3, #29
 80069ca:	d506      	bpl.n	80069da <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069cc:	6801      	ldr	r1, [r0, #0]
 80069ce:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80069d0:	684a      	ldr	r2, [r1, #4]
 80069d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80069d6:	4322      	orrs	r2, r4
 80069d8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069da:	071a      	lsls	r2, r3, #28
 80069dc:	d506      	bpl.n	80069ec <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069de:	6801      	ldr	r1, [r0, #0]
 80069e0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80069e2:	684a      	ldr	r2, [r1, #4]
 80069e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069e8:	4322      	orrs	r2, r4
 80069ea:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069ec:	06dc      	lsls	r4, r3, #27
 80069ee:	d506      	bpl.n	80069fe <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069f0:	6801      	ldr	r1, [r0, #0]
 80069f2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80069f4:	688a      	ldr	r2, [r1, #8]
 80069f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80069fa:	4322      	orrs	r2, r4
 80069fc:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069fe:	0699      	lsls	r1, r3, #26
 8006a00:	d506      	bpl.n	8006a10 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a02:	6801      	ldr	r1, [r0, #0]
 8006a04:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006a06:	688a      	ldr	r2, [r1, #8]
 8006a08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a0c:	4322      	orrs	r2, r4
 8006a0e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a10:	065a      	lsls	r2, r3, #25
 8006a12:	d509      	bpl.n	8006a28 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a14:	6801      	ldr	r1, [r0, #0]
 8006a16:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006a18:	684a      	ldr	r2, [r1, #4]
 8006a1a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006a1e:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a20:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a24:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a26:	d00b      	beq.n	8006a40 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a28:	061b      	lsls	r3, r3, #24
 8006a2a:	d506      	bpl.n	8006a3a <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a2c:	6802      	ldr	r2, [r0, #0]
 8006a2e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006a30:	6853      	ldr	r3, [r2, #4]
 8006a32:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006a36:	430b      	orrs	r3, r1
 8006a38:	6053      	str	r3, [r2, #4]
}
 8006a3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a3e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a40:	684a      	ldr	r2, [r1, #4]
 8006a42:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8006a44:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8006a48:	4322      	orrs	r2, r4
 8006a4a:	604a      	str	r2, [r1, #4]
 8006a4c:	e7ec      	b.n	8006a28 <UART_AdvFeatureConfig+0x88>
 8006a4e:	bf00      	nop

08006a50 <HAL_UART_Init>:
  if (huart == NULL)
 8006a50:	2800      	cmp	r0, #0
 8006a52:	f000 821d 	beq.w	8006e90 <HAL_UART_Init+0x440>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006a56:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
{
 8006a5a:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8006a5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006a62:	4604      	mov	r4, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d06e      	beq.n	8006b46 <HAL_UART_Init+0xf6>
  __HAL_UART_DISABLE(huart);
 8006a68:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a6a:	6926      	ldr	r6, [r4, #16]
 8006a6c:	6967      	ldr	r7, [r4, #20]
 8006a6e:	69e1      	ldr	r1, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a70:	48c6      	ldr	r0, [pc, #792]	; (8006d8c <HAL_UART_Init+0x33c>)
  huart->gState = HAL_UART_STATE_BUSY;
 8006a72:	2224      	movs	r2, #36	; 0x24
 8006a74:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
  __HAL_UART_DISABLE(huart);
 8006a78:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a7a:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8006a7c:	f025 0501 	bic.w	r5, r5, #1
 8006a80:	601d      	str	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a82:	4332      	orrs	r2, r6
  tmpreg |= (uint32_t)huart->FifoMode;
 8006a84:	6e65      	ldr	r5, [r4, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a86:	681e      	ldr	r6, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a88:	433a      	orrs	r2, r7
 8006a8a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a8c:	4030      	ands	r0, r6
  tmpreg |= (uint32_t)huart->FifoMode;
 8006a8e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a90:	4302      	orrs	r2, r0
 8006a92:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a94:	685a      	ldr	r2, [r3, #4]
 8006a96:	68e5      	ldr	r5, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a98:	48bd      	ldr	r0, [pc, #756]	; (8006d90 <HAL_UART_Init+0x340>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a9a:	69a6      	ldr	r6, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a9c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006aa0:	432a      	orrs	r2, r5
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006aa2:	4283      	cmp	r3, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006aa4:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006aa6:	f000 819b 	beq.w	8006de0 <HAL_UART_Init+0x390>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006aaa:	6898      	ldr	r0, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8006aac:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006aae:	6a65      	ldr	r5, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ab0:	4fb8      	ldr	r7, [pc, #736]	; (8006d94 <HAL_UART_Init+0x344>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ab2:	f020 406e 	bic.w	r0, r0, #3992977408	; 0xee000000
 8006ab6:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8006aba:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006abc:	4302      	orrs	r2, r0
 8006abe:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac2:	f022 020f 	bic.w	r2, r2, #15
 8006ac6:	432a      	orrs	r2, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ac8:	42bb      	cmp	r3, r7
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006aca:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006acc:	f000 81d0 	beq.w	8006e70 <HAL_UART_Init+0x420>
 8006ad0:	4ab1      	ldr	r2, [pc, #708]	; (8006d98 <HAL_UART_Init+0x348>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	f000 81d4 	beq.w	8006e80 <HAL_UART_Init+0x430>
 8006ad8:	4ab0      	ldr	r2, [pc, #704]	; (8006d9c <HAL_UART_Init+0x34c>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d07f      	beq.n	8006bde <HAL_UART_Init+0x18e>
 8006ade:	4ab0      	ldr	r2, [pc, #704]	; (8006da0 <HAL_UART_Init+0x350>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	f000 80b3 	beq.w	8006c4c <HAL_UART_Init+0x1fc>
 8006ae6:	4aaf      	ldr	r2, [pc, #700]	; (8006da4 <HAL_UART_Init+0x354>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d011      	beq.n	8006b10 <HAL_UART_Init+0xc0>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8006aec:	2310      	movs	r3, #16
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006aee:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006af2:	f000 815d 	beq.w	8006db0 <HAL_UART_Init+0x360>
    switch (clocksource)
 8006af6:	2b08      	cmp	r3, #8
 8006af8:	d81c      	bhi.n	8006b34 <HAL_UART_Init+0xe4>
 8006afa:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006afe:	00b7      	.short	0x00b7
 8006b00:	00f00029 	.word	0x00f00029
 8006b04:	00e5001b 	.word	0x00e5001b
 8006b08:	001b001b 	.word	0x001b001b
 8006b0c:	0080001b 	.word	0x0080001b
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b10:	4ba5      	ldr	r3, [pc, #660]	; (8006da8 <HAL_UART_Init+0x358>)
 8006b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b1e:	f000 80cf 	beq.w	8006cc0 <HAL_UART_Init+0x270>
 8006b22:	f240 809c 	bls.w	8006c5e <HAL_UART_Init+0x20e>
 8006b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b2a:	f000 80d4 	beq.w	8006cd6 <HAL_UART_Init+0x286>
 8006b2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b32:	d060      	beq.n	8006bf6 <HAL_UART_Init+0x1a6>
  huart->RxISR = NULL;
 8006b34:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8006b36:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8006b3a:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8006b3c:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 8006b3e:	6723      	str	r3, [r4, #112]	; 0x70
    return HAL_ERROR;
 8006b40:	2001      	movs	r0, #1
 8006b42:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
    huart->Lock = HAL_UNLOCKED;
 8006b46:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 8006b4a:	f00a fc03 	bl	8011354 <HAL_UART_MspInit>
 8006b4e:	e78b      	b.n	8006a68 <HAL_UART_Init+0x18>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b50:	f7fd fe40 	bl	80047d4 <HAL_RCC_GetPCLK2Freq>
 8006b54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f040 808e 	bne.w	8006c78 <HAL_UART_Init+0x228>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	6862      	ldr	r2, [r4, #4]
 8006b60:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b64:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8006b68:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b6c:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b6e:	f1a3 0110 	sub.w	r1, r3, #16
 8006b72:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006b76:	4291      	cmp	r1, r2
 8006b78:	d8dc      	bhi.n	8006b34 <HAL_UART_Init+0xe4>
      huart->Instance->BRR = usartdiv;
 8006b7a:	6822      	ldr	r2, [r4, #0]
 8006b7c:	60d3      	str	r3, [r2, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b7e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  huart->RxISR = NULL;
 8006b80:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8006b82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b86:	66a1      	str	r1, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8006b88:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 8006b8a:	6723      	str	r3, [r4, #112]	; 0x70
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b8c:	2a00      	cmp	r2, #0
 8006b8e:	f040 80f9 	bne.w	8006d84 <HAL_UART_Init+0x334>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b92:	6823      	ldr	r3, [r4, #0]
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b9c:	689a      	ldr	r2, [r3, #8]
 8006b9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ba2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006ba4:	681a      	ldr	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ba6:	2100      	movs	r1, #0
  __HAL_UART_ENABLE(huart);
 8006ba8:	f042 0201 	orr.w	r2, r2, #1
 8006bac:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bae:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  tickstart = HAL_GetTick();
 8006bb2:	f7fa f9c9 	bl	8000f48 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8006bbc:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bbe:	f100 80b6 	bmi.w	8006d2e <HAL_UART_Init+0x2de>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	0752      	lsls	r2, r2, #29
 8006bc6:	f100 80d0 	bmi.w	8006d6a <HAL_UART_Init+0x31a>
  huart->gState = HAL_UART_STATE_READY;
 8006bca:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8006bcc:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8006bce:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(huart);
 8006bd2:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006bd6:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
 8006bda:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bde:	4b72      	ldr	r3, [pc, #456]	; (8006da8 <HAL_UART_Init+0x358>)
 8006be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006be4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006be8:	2b10      	cmp	r3, #16
 8006bea:	d069      	beq.n	8006cc0 <HAL_UART_Init+0x270>
 8006bec:	d937      	bls.n	8006c5e <HAL_UART_Init+0x20e>
 8006bee:	2b20      	cmp	r3, #32
 8006bf0:	d071      	beq.n	8006cd6 <HAL_UART_Init+0x286>
 8006bf2:	2b30      	cmp	r3, #48	; 0x30
 8006bf4:	d19e      	bne.n	8006b34 <HAL_UART_Init+0xe4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bf6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006bfa:	f000 81a3 	beq.w	8006f44 <HAL_UART_Init+0x4f4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bfe:	2d00      	cmp	r5, #0
 8006c00:	f000 8150 	beq.w	8006ea4 <HAL_UART_Init+0x454>
 8006c04:	2d01      	cmp	r5, #1
 8006c06:	f000 8368 	beq.w	80072da <HAL_UART_Init+0x88a>
 8006c0a:	2d02      	cmp	r5, #2
 8006c0c:	f000 836e 	beq.w	80072ec <HAL_UART_Init+0x89c>
 8006c10:	2d03      	cmp	r5, #3
 8006c12:	f000 8372 	beq.w	80072fa <HAL_UART_Init+0x8aa>
 8006c16:	2d04      	cmp	r5, #4
 8006c18:	f000 837d 	beq.w	8007316 <HAL_UART_Init+0x8c6>
 8006c1c:	2d05      	cmp	r5, #5
 8006c1e:	f000 8393 	beq.w	8007348 <HAL_UART_Init+0x8f8>
 8006c22:	2d06      	cmp	r5, #6
 8006c24:	f000 83a8 	beq.w	8007378 <HAL_UART_Init+0x928>
 8006c28:	2d07      	cmp	r5, #7
 8006c2a:	f000 83c7 	beq.w	80073bc <HAL_UART_Init+0x96c>
 8006c2e:	2d08      	cmp	r5, #8
 8006c30:	f000 83e8 	beq.w	8007404 <HAL_UART_Init+0x9b4>
 8006c34:	2d09      	cmp	r5, #9
 8006c36:	f000 840a 	beq.w	800744e <HAL_UART_Init+0x9fe>
 8006c3a:	2d0a      	cmp	r5, #10
 8006c3c:	f000 841c 	beq.w	8007478 <HAL_UART_Init+0xa28>
 8006c40:	2d0b      	cmp	r5, #11
 8006c42:	bf14      	ite	ne
 8006c44:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 8006c48:	2380      	moveq	r3, #128	; 0x80
 8006c4a:	e124      	b.n	8006e96 <HAL_UART_Init+0x446>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c4c:	4b56      	ldr	r3, [pc, #344]	; (8006da8 <HAL_UART_Init+0x358>)
 8006c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c52:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c56:	2b40      	cmp	r3, #64	; 0x40
 8006c58:	d032      	beq.n	8006cc0 <HAL_UART_Init+0x270>
 8006c5a:	f200 8126 	bhi.w	8006eaa <HAL_UART_Init+0x45a>
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f47f af68 	bne.w	8006b34 <HAL_UART_Init+0xe4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c64:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006c68:	f000 81a1 	beq.w	8006fae <HAL_UART_Init+0x55e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c6c:	f7fd fda0 	bl	80047b0 <HAL_RCC_GetPCLK1Freq>
 8006c70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f43f af72 	beq.w	8006b5c <HAL_UART_Init+0x10c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	f000 8284 	beq.w	8007186 <HAL_UART_Init+0x736>
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	f000 8283 	beq.w	800718a <HAL_UART_Init+0x73a>
 8006c84:	2b03      	cmp	r3, #3
 8006c86:	f000 828f 	beq.w	80071a8 <HAL_UART_Init+0x758>
 8006c8a:	2b04      	cmp	r3, #4
 8006c8c:	f000 81bc 	beq.w	8007008 <HAL_UART_Init+0x5b8>
 8006c90:	2b05      	cmp	r3, #5
 8006c92:	f000 8327 	beq.w	80072e4 <HAL_UART_Init+0x894>
 8006c96:	2b06      	cmp	r3, #6
 8006c98:	f000 832d 	beq.w	80072f6 <HAL_UART_Init+0x8a6>
 8006c9c:	2b07      	cmp	r3, #7
 8006c9e:	f000 8331 	beq.w	8007304 <HAL_UART_Init+0x8b4>
 8006ca2:	2b08      	cmp	r3, #8
 8006ca4:	f000 834e 	beq.w	8007344 <HAL_UART_Init+0x8f4>
 8006ca8:	2b09      	cmp	r3, #9
 8006caa:	f000 836a 	beq.w	8007382 <HAL_UART_Init+0x932>
 8006cae:	2b0a      	cmp	r3, #10
 8006cb0:	f000 8377 	beq.w	80073a2 <HAL_UART_Init+0x952>
 8006cb4:	2b0b      	cmp	r3, #11
 8006cb6:	bf14      	ite	ne
 8006cb8:	2301      	movne	r3, #1
 8006cba:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8006cbe:	e74e      	b.n	8006b5e <HAL_UART_Init+0x10e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cc0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006cc4:	f000 816c 	beq.w	8006fa0 <HAL_UART_Init+0x550>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cc8:	f7fd f8a6 	bl	8003e18 <HAL_RCC_GetSysClockFreq>
 8006ccc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f43f af44 	beq.w	8006b5c <HAL_UART_Init+0x10c>
 8006cd4:	e7d0      	b.n	8006c78 <HAL_UART_Init+0x228>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cd6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006cda:	f000 816e 	beq.w	8006fba <HAL_UART_Init+0x56a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cde:	2d00      	cmp	r5, #0
 8006ce0:	f000 80d8 	beq.w	8006e94 <HAL_UART_Init+0x444>
 8006ce4:	2d01      	cmp	r5, #1
 8006ce6:	f000 82f6 	beq.w	80072d6 <HAL_UART_Init+0x886>
 8006cea:	2d02      	cmp	r5, #2
 8006cec:	f000 82fc 	beq.w	80072e8 <HAL_UART_Init+0x898>
 8006cf0:	2d03      	cmp	r5, #3
 8006cf2:	f000 8305 	beq.w	8007300 <HAL_UART_Init+0x8b0>
 8006cf6:	2d04      	cmp	r5, #4
 8006cf8:	f000 8310 	beq.w	800731c <HAL_UART_Init+0x8cc>
 8006cfc:	2d05      	cmp	r5, #5
 8006cfe:	f000 8326 	beq.w	800734e <HAL_UART_Init+0x8fe>
 8006d02:	2d06      	cmp	r5, #6
 8006d04:	f000 833b 	beq.w	800737e <HAL_UART_Init+0x92e>
 8006d08:	2d07      	cmp	r5, #7
 8006d0a:	f000 8355 	beq.w	80073b8 <HAL_UART_Init+0x968>
 8006d0e:	2d08      	cmp	r5, #8
 8006d10:	f000 8376 	beq.w	8007400 <HAL_UART_Init+0x9b0>
 8006d14:	2d09      	cmp	r5, #9
 8006d16:	f000 839d 	beq.w	8007454 <HAL_UART_Init+0xa04>
 8006d1a:	2d0a      	cmp	r5, #10
 8006d1c:	f000 83af 	beq.w	800747e <HAL_UART_Init+0xa2e>
 8006d20:	4b22      	ldr	r3, [pc, #136]	; (8006dac <HAL_UART_Init+0x35c>)
 8006d22:	f24f 4224 	movw	r2, #62500	; 0xf424
 8006d26:	2d0b      	cmp	r5, #11
 8006d28:	bf08      	it	eq
 8006d2a:	4613      	moveq	r3, r2
 8006d2c:	e0b3      	b.n	8006e96 <HAL_UART_Init+0x446>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d2e:	69dd      	ldr	r5, [r3, #28]
 8006d30:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 8006d34:	f47f af45 	bne.w	8006bc2 <HAL_UART_Init+0x172>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d38:	f7fa f906 	bl	8000f48 <HAL_GetTick>
 8006d3c:	1b80      	subs	r0, r0, r6
 8006d3e:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006d42:	6823      	ldr	r3, [r4, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d44:	d3f3      	bcc.n	8006d2e <HAL_UART_Init+0x2de>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d4c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d4e:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8006d50:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d52:	f022 0201 	bic.w	r2, r2, #1
 8006d56:	609a      	str	r2, [r3, #8]
      return HAL_TIMEOUT;
 8006d58:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8006d5a:	f884 107d 	strb.w	r1, [r4, #125]	; 0x7d
        __HAL_UNLOCK(huart);
 8006d5e:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006d62:	f884 107e 	strb.w	r1, [r4, #126]	; 0x7e
 8006d66:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d6a:	69dd      	ldr	r5, [r3, #28]
 8006d6c:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 8006d70:	f47f af2b 	bne.w	8006bca <HAL_UART_Init+0x17a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d74:	f7fa f8e8 	bl	8000f48 <HAL_GetTick>
 8006d78:	1b80      	subs	r0, r0, r6
 8006d7a:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006d7e:	6823      	ldr	r3, [r4, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d80:	d3f3      	bcc.n	8006d6a <HAL_UART_Init+0x31a>
 8006d82:	e7e0      	b.n	8006d46 <HAL_UART_Init+0x2f6>
    UART_AdvFeatureConfig(huart);
 8006d84:	4620      	mov	r0, r4
 8006d86:	f7ff fe0b 	bl	80069a0 <UART_AdvFeatureConfig>
 8006d8a:	e702      	b.n	8006b92 <HAL_UART_Init+0x142>
 8006d8c:	cfff69f3 	.word	0xcfff69f3
 8006d90:	40008000 	.word	0x40008000
 8006d94:	40013800 	.word	0x40013800
 8006d98:	40004400 	.word	0x40004400
 8006d9c:	40004800 	.word	0x40004800
 8006da0:	40004c00 	.word	0x40004c00
 8006da4:	40005000 	.word	0x40005000
 8006da8:	40021000 	.word	0x40021000
 8006dac:	00f42400 	.word	0x00f42400
    switch (clocksource)
 8006db0:	2b08      	cmp	r3, #8
 8006db2:	f63f aebf 	bhi.w	8006b34 <HAL_UART_Init+0xe4>
 8006db6:	a201      	add	r2, pc, #4	; (adr r2, 8006dbc <HAL_UART_Init+0x36c>)
 8006db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dbc:	08006faf 	.word	0x08006faf
 8006dc0:	08006eb9 	.word	0x08006eb9
 8006dc4:	08006fbb 	.word	0x08006fbb
 8006dc8:	08006b35 	.word	0x08006b35
 8006dcc:	08006fa1 	.word	0x08006fa1
 8006dd0:	08006b35 	.word	0x08006b35
 8006dd4:	08006b35 	.word	0x08006b35
 8006dd8:	08006b35 	.word	0x08006b35
 8006ddc:	08006f45 	.word	0x08006f45
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006de0:	689a      	ldr	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006de2:	48c5      	ldr	r0, [pc, #788]	; (80070f8 <HAL_UART_Init+0x6a8>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006de4:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8006de8:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8006dec:	4332      	orrs	r2, r6
 8006dee:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006df4:	f022 020f 	bic.w	r2, r2, #15
 8006df8:	430a      	orrs	r2, r1
 8006dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006dfc:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8006e00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e08:	f000 81c1 	beq.w	800718e <HAL_UART_Init+0x73e>
 8006e0c:	f240 81ab 	bls.w	8007166 <HAL_UART_Init+0x716>
 8006e10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e14:	f000 8090 	beq.w	8006f38 <HAL_UART_Init+0x4e8>
 8006e18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e1c:	f47f ae8a 	bne.w	8006b34 <HAL_UART_Init+0xe4>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006e20:	2900      	cmp	r1, #0
 8006e22:	f040 8214 	bne.w	800724e <HAL_UART_Init+0x7fe>
 8006e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e2a:	2108      	movs	r1, #8
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8006e2c:	6862      	ldr	r2, [r4, #4]
 8006e2e:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 8006e32:	4298      	cmp	r0, r3
 8006e34:	f63f ae7e 	bhi.w	8006b34 <HAL_UART_Init+0xe4>
 8006e38:	ebb3 3f02 	cmp.w	r3, r2, lsl #12
 8006e3c:	f63f ae7a 	bhi.w	8006b34 <HAL_UART_Init+0xe4>
        switch (clocksource)
 8006e40:	2908      	cmp	r1, #8
 8006e42:	f63f ae77 	bhi.w	8006b34 <HAL_UART_Init+0xe4>
 8006e46:	a301      	add	r3, pc, #4	; (adr r3, 8006e4c <HAL_UART_Init+0x3fc>)
 8006e48:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8006e4c:	080070eb 	.word	0x080070eb
 8006e50:	08006b35 	.word	0x08006b35
 8006e54:	08007091 	.word	0x08007091
 8006e58:	08006b35 	.word	0x08006b35
 8006e5c:	0800700d 	.word	0x0800700d
 8006e60:	08006b35 	.word	0x08006b35
 8006e64:	08006b35 	.word	0x08006b35
 8006e68:	08006b35 	.word	0x08006b35
 8006e6c:	08007119 	.word	0x08007119
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e70:	4ba1      	ldr	r3, [pc, #644]	; (80070f8 <HAL_UART_Init+0x6a8>)
 8006e72:	4aa2      	ldr	r2, [pc, #648]	; (80070fc <HAL_UART_Init+0x6ac>)
 8006e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e78:	f003 0303 	and.w	r3, r3, #3
 8006e7c:	5cd3      	ldrb	r3, [r2, r3]
 8006e7e:	e636      	b.n	8006aee <HAL_UART_Init+0x9e>
 8006e80:	4b9d      	ldr	r3, [pc, #628]	; (80070f8 <HAL_UART_Init+0x6a8>)
 8006e82:	4a9f      	ldr	r2, [pc, #636]	; (8007100 <HAL_UART_Init+0x6b0>)
 8006e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e88:	f003 030c 	and.w	r3, r3, #12
 8006e8c:	5cd3      	ldrb	r3, [r2, r3]
 8006e8e:	e62e      	b.n	8006aee <HAL_UART_Init+0x9e>
    return HAL_ERROR;
 8006e90:	2001      	movs	r0, #1
 8006e92:	4770      	bx	lr
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e94:	4b9b      	ldr	r3, [pc, #620]	; (8007104 <HAL_UART_Init+0x6b4>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e96:	6862      	ldr	r2, [r4, #4]
 8006e98:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8006e9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	e664      	b.n	8006b6e <HAL_UART_Init+0x11e>
 8006ea4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ea8:	e7f5      	b.n	8006e96 <HAL_UART_Init+0x446>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006eaa:	2b80      	cmp	r3, #128	; 0x80
 8006eac:	f43f af13 	beq.w	8006cd6 <HAL_UART_Init+0x286>
 8006eb0:	2bc0      	cmp	r3, #192	; 0xc0
 8006eb2:	f43f aea0 	beq.w	8006bf6 <HAL_UART_Init+0x1a6>
 8006eb6:	e63d      	b.n	8006b34 <HAL_UART_Init+0xe4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006eb8:	f7fd fc8c 	bl	80047d4 <HAL_RCC_GetPCLK2Freq>
 8006ebc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d073      	beq.n	8006faa <HAL_UART_Init+0x55a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	f000 8177 	beq.w	80071b6 <HAL_UART_Init+0x766>
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	f000 8209 	beq.w	80072e0 <HAL_UART_Init+0x890>
 8006ece:	2b03      	cmp	r3, #3
 8006ed0:	f000 820f 	beq.w	80072f2 <HAL_UART_Init+0x8a2>
 8006ed4:	2b04      	cmp	r3, #4
 8006ed6:	f000 821c 	beq.w	8007312 <HAL_UART_Init+0x8c2>
 8006eda:	2b05      	cmp	r3, #5
 8006edc:	f000 8220 	beq.w	8007320 <HAL_UART_Init+0x8d0>
 8006ee0:	2b06      	cmp	r3, #6
 8006ee2:	f000 8245 	beq.w	8007370 <HAL_UART_Init+0x920>
 8006ee6:	2b07      	cmp	r3, #7
 8006ee8:	f000 8240 	beq.w	800736c <HAL_UART_Init+0x91c>
 8006eec:	2b08      	cmp	r3, #8
 8006eee:	f000 825b 	beq.w	80073a8 <HAL_UART_Init+0x958>
 8006ef2:	2b09      	cmp	r3, #9
 8006ef4:	f000 82a9 	beq.w	800744a <HAL_UART_Init+0x9fa>
 8006ef8:	2b0a      	cmp	r3, #10
 8006efa:	f000 828a 	beq.w	8007412 <HAL_UART_Init+0x9c2>
 8006efe:	2b0b      	cmp	r3, #11
 8006f00:	bf14      	ite	ne
 8006f02:	2301      	movne	r3, #1
 8006f04:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8006f08:	6861      	ldr	r1, [r4, #4]
 8006f0a:	fbb0 f2f3 	udiv	r2, r0, r3
 8006f0e:	084b      	lsrs	r3, r1, #1
 8006f10:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8006f14:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f18:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f1a:	f1a3 0110 	sub.w	r1, r3, #16
 8006f1e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006f22:	4291      	cmp	r1, r2
 8006f24:	f63f ae06 	bhi.w	8006b34 <HAL_UART_Init+0xe4>
      brrtemp = usartdiv & 0xFFF0U;
 8006f28:	f023 020f 	bic.w	r2, r3, #15
      huart->Instance->BRR = brrtemp;
 8006f2c:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f2e:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8006f32:	4313      	orrs	r3, r2
 8006f34:	60cb      	str	r3, [r1, #12]
 8006f36:	e622      	b.n	8006b7e <HAL_UART_Init+0x12e>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006f38:	2900      	cmp	r1, #0
 8006f3a:	f040 813e 	bne.w	80071ba <HAL_UART_Init+0x76a>
 8006f3e:	4b71      	ldr	r3, [pc, #452]	; (8007104 <HAL_UART_Init+0x6b4>)
 8006f40:	2102      	movs	r1, #2
 8006f42:	e773      	b.n	8006e2c <HAL_UART_Init+0x3dc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f44:	2d00      	cmp	r5, #0
 8006f46:	f000 8131 	beq.w	80071ac <HAL_UART_Init+0x75c>
 8006f4a:	2d01      	cmp	r5, #1
 8006f4c:	f000 81dc 	beq.w	8007308 <HAL_UART_Init+0x8b8>
 8006f50:	2d02      	cmp	r5, #2
 8006f52:	f000 81e9 	beq.w	8007328 <HAL_UART_Init+0x8d8>
 8006f56:	2d03      	cmp	r5, #3
 8006f58:	f000 8205 	beq.w	8007366 <HAL_UART_Init+0x916>
 8006f5c:	2d04      	cmp	r5, #4
 8006f5e:	f000 8228 	beq.w	80073b2 <HAL_UART_Init+0x962>
 8006f62:	2d05      	cmp	r5, #5
 8006f64:	f000 8233 	beq.w	80073ce <HAL_UART_Init+0x97e>
 8006f68:	2d06      	cmp	r5, #6
 8006f6a:	f000 8261 	beq.w	8007430 <HAL_UART_Init+0x9e0>
 8006f6e:	2d07      	cmp	r5, #7
 8006f70:	f000 825b 	beq.w	800742a <HAL_UART_Init+0x9da>
 8006f74:	2d08      	cmp	r5, #8
 8006f76:	f000 826f 	beq.w	8007458 <HAL_UART_Init+0xa08>
 8006f7a:	2d09      	cmp	r5, #9
 8006f7c:	f000 82f7 	beq.w	800756e <HAL_UART_Init+0xb1e>
 8006f80:	2d0a      	cmp	r5, #10
 8006f82:	f000 82f9 	beq.w	8007578 <HAL_UART_Init+0xb28>
 8006f86:	2d0b      	cmp	r5, #11
 8006f88:	bf14      	ite	ne
 8006f8a:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8006f8e:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8006f92:	6862      	ldr	r2, [r4, #4]
 8006f94:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8006f98:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	e7bc      	b.n	8006f1a <HAL_UART_Init+0x4ca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fa0:	f7fc ff3a 	bl	8003e18 <HAL_RCC_GetSysClockFreq>
 8006fa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d18b      	bne.n	8006ec2 <HAL_UART_Init+0x472>
 8006faa:	2301      	movs	r3, #1
 8006fac:	e7ac      	b.n	8006f08 <HAL_UART_Init+0x4b8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fae:	f7fd fbff 	bl	80047b0 <HAL_RCC_GetPCLK1Freq>
 8006fb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d0f8      	beq.n	8006faa <HAL_UART_Init+0x55a>
 8006fb8:	e783      	b.n	8006ec2 <HAL_UART_Init+0x472>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fba:	2d00      	cmp	r5, #0
 8006fbc:	f000 80f9 	beq.w	80071b2 <HAL_UART_Init+0x762>
 8006fc0:	2d01      	cmp	r5, #1
 8006fc2:	f000 81a4 	beq.w	800730e <HAL_UART_Init+0x8be>
 8006fc6:	2d02      	cmp	r5, #2
 8006fc8:	f000 81ac 	beq.w	8007324 <HAL_UART_Init+0x8d4>
 8006fcc:	2d03      	cmp	r5, #3
 8006fce:	f000 81d1 	beq.w	8007374 <HAL_UART_Init+0x924>
 8006fd2:	2d04      	cmp	r5, #4
 8006fd4:	f000 81e3 	beq.w	800739e <HAL_UART_Init+0x94e>
 8006fd8:	2d05      	cmp	r5, #5
 8006fda:	f000 81f6 	beq.w	80073ca <HAL_UART_Init+0x97a>
 8006fde:	2d06      	cmp	r5, #6
 8006fe0:	f000 8221 	beq.w	8007426 <HAL_UART_Init+0x9d6>
 8006fe4:	2d07      	cmp	r5, #7
 8006fe6:	f000 821c 	beq.w	8007422 <HAL_UART_Init+0x9d2>
 8006fea:	2d08      	cmp	r5, #8
 8006fec:	f000 8242 	beq.w	8007474 <HAL_UART_Init+0xa24>
 8006ff0:	2d09      	cmp	r5, #9
 8006ff2:	f000 829f 	beq.w	8007534 <HAL_UART_Init+0xae4>
 8006ff6:	2d0a      	cmp	r5, #10
 8006ff8:	f000 82b3 	beq.w	8007562 <HAL_UART_Init+0xb12>
 8006ffc:	4b42      	ldr	r3, [pc, #264]	; (8007108 <HAL_UART_Init+0x6b8>)
 8006ffe:	4a43      	ldr	r2, [pc, #268]	; (800710c <HAL_UART_Init+0x6bc>)
 8007000:	2d0b      	cmp	r5, #11
 8007002:	bf08      	it	eq
 8007004:	4613      	moveq	r3, r2
 8007006:	e7c4      	b.n	8006f92 <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007008:	2308      	movs	r3, #8
 800700a:	e5a8      	b.n	8006b5e <HAL_UART_Init+0x10e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800700c:	f7fc ff04 	bl	8003e18 <HAL_RCC_GetSysClockFreq>
 8007010:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007012:	b303      	cbz	r3, 8007056 <HAL_UART_Init+0x606>
 8007014:	2b01      	cmp	r3, #1
 8007016:	f000 81c9 	beq.w	80073ac <HAL_UART_Init+0x95c>
 800701a:	2b02      	cmp	r3, #2
 800701c:	f000 81e4 	beq.w	80073e8 <HAL_UART_Init+0x998>
 8007020:	2b03      	cmp	r3, #3
 8007022:	f000 81ea 	beq.w	80073fa <HAL_UART_Init+0x9aa>
 8007026:	2b04      	cmp	r3, #4
 8007028:	f000 822e 	beq.w	8007488 <HAL_UART_Init+0xa38>
 800702c:	2b05      	cmp	r3, #5
 800702e:	f000 821e 	beq.w	800746e <HAL_UART_Init+0xa1e>
 8007032:	2b06      	cmp	r3, #6
 8007034:	f000 8218 	beq.w	8007468 <HAL_UART_Init+0xa18>
 8007038:	2b07      	cmp	r3, #7
 800703a:	f000 8212 	beq.w	8007462 <HAL_UART_Init+0xa12>
 800703e:	2b08      	cmp	r3, #8
 8007040:	f000 82ab 	beq.w	800759a <HAL_UART_Init+0xb4a>
 8007044:	2b09      	cmp	r3, #9
 8007046:	f000 82a5 	beq.w	8007594 <HAL_UART_Init+0xb44>
 800704a:	2b0a      	cmp	r3, #10
 800704c:	f000 829f 	beq.w	800758e <HAL_UART_Init+0xb3e>
 8007050:	2b0b      	cmp	r3, #11
 8007052:	f000 82b0 	beq.w	80075b6 <HAL_UART_Init+0xb66>
 8007056:	2201      	movs	r2, #1
 8007058:	2300      	movs	r3, #0
 800705a:	2100      	movs	r1, #0
 800705c:	f7f9 fdd0 	bl	8000c00 <__aeabi_uldivmod>
 8007060:	6862      	ldr	r2, [r4, #4]
 8007062:	020f      	lsls	r7, r1, #8
 8007064:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8007068:	0206      	lsls	r6, r0, #8
 800706a:	0850      	lsrs	r0, r2, #1
 800706c:	eb16 0b00 	adds.w	fp, r6, r0
 8007070:	f147 0c00 	adc.w	ip, r7, #0
 8007074:	4658      	mov	r0, fp
 8007076:	4661      	mov	r1, ip
 8007078:	2300      	movs	r3, #0
 800707a:	f7f9 fdc1 	bl	8000c00 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800707e:	4b24      	ldr	r3, [pc, #144]	; (8007110 <HAL_UART_Init+0x6c0>)
 8007080:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8007084:	429a      	cmp	r2, r3
 8007086:	f63f ad55 	bhi.w	8006b34 <HAL_UART_Init+0xe4>
          huart->Instance->BRR = usartdiv;
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	60d8      	str	r0, [r3, #12]
 800708e:	e576      	b.n	8006b7e <HAL_UART_Init+0x12e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007090:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007092:	b303      	cbz	r3, 80070d6 <HAL_UART_Init+0x686>
 8007094:	2b01      	cmp	r3, #1
 8007096:	f000 81ce 	beq.w	8007436 <HAL_UART_Init+0x9e6>
 800709a:	2b02      	cmp	r3, #2
 800709c:	f000 821a 	beq.w	80074d4 <HAL_UART_Init+0xa84>
 80070a0:	2b03      	cmp	r3, #3
 80070a2:	f000 8223 	beq.w	80074ec <HAL_UART_Init+0xa9c>
 80070a6:	2b04      	cmp	r3, #4
 80070a8:	f000 8230 	beq.w	800750c <HAL_UART_Init+0xabc>
 80070ac:	2b05      	cmp	r3, #5
 80070ae:	f000 823e 	beq.w	800752e <HAL_UART_Init+0xade>
 80070b2:	2b06      	cmp	r3, #6
 80070b4:	f000 8237 	beq.w	8007526 <HAL_UART_Init+0xad6>
 80070b8:	2b07      	cmp	r3, #7
 80070ba:	f000 8231 	beq.w	8007520 <HAL_UART_Init+0xad0>
 80070be:	2b08      	cmp	r3, #8
 80070c0:	f000 8276 	beq.w	80075b0 <HAL_UART_Init+0xb60>
 80070c4:	2b09      	cmp	r3, #9
 80070c6:	f000 8280 	beq.w	80075ca <HAL_UART_Init+0xb7a>
 80070ca:	2b0a      	cmp	r3, #10
 80070cc:	f000 827a 	beq.w	80075c4 <HAL_UART_Init+0xb74>
 80070d0:	2b0b      	cmp	r3, #11
 80070d2:	f000 8274 	beq.w	80075be <HAL_UART_Init+0xb6e>
 80070d6:	480f      	ldr	r0, [pc, #60]	; (8007114 <HAL_UART_Init+0x6c4>)
 80070d8:	2100      	movs	r1, #0
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070da:	0853      	lsrs	r3, r2, #1
 80070dc:	18c0      	adds	r0, r0, r3
 80070de:	f141 0100 	adc.w	r1, r1, #0
 80070e2:	2300      	movs	r3, #0
 80070e4:	f7f9 fd8c 	bl	8000c00 <__aeabi_uldivmod>
 80070e8:	e7c9      	b.n	800707e <HAL_UART_Init+0x62e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070ea:	f7fd fb61 	bl	80047b0 <HAL_RCC_GetPCLK1Freq>
 80070ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d0b0      	beq.n	8007056 <HAL_UART_Init+0x606>
 80070f4:	e78e      	b.n	8007014 <HAL_UART_Init+0x5c4>
 80070f6:	bf00      	nop
 80070f8:	40021000 	.word	0x40021000
 80070fc:	08013bb4 	.word	0x08013bb4
 8007100:	08013bb8 	.word	0x08013bb8
 8007104:	00f42400 	.word	0x00f42400
 8007108:	01e84800 	.word	0x01e84800
 800710c:	0001e848 	.word	0x0001e848
 8007110:	000ffcff 	.word	0x000ffcff
 8007114:	f4240000 	.word	0xf4240000
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007118:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800711a:	b303      	cbz	r3, 800715e <HAL_UART_Init+0x70e>
 800711c:	2b01      	cmp	r3, #1
 800711e:	f000 818d 	beq.w	800743c <HAL_UART_Init+0x9ec>
 8007122:	2b02      	cmp	r3, #2
 8007124:	f000 81d9 	beq.w	80074da <HAL_UART_Init+0xa8a>
 8007128:	2b03      	cmp	r3, #3
 800712a:	f000 81da 	beq.w	80074e2 <HAL_UART_Init+0xa92>
 800712e:	2b04      	cmp	r3, #4
 8007130:	f000 81f2 	beq.w	8007518 <HAL_UART_Init+0xac8>
 8007134:	2b05      	cmp	r3, #5
 8007136:	f000 81e4 	beq.w	8007502 <HAL_UART_Init+0xab2>
 800713a:	2b06      	cmp	r3, #6
 800713c:	f000 81de 	beq.w	80074fc <HAL_UART_Init+0xaac>
 8007140:	2b07      	cmp	r3, #7
 8007142:	f000 81d7 	beq.w	80074f4 <HAL_UART_Init+0xaa4>
 8007146:	2b08      	cmp	r3, #8
 8007148:	f000 822e 	beq.w	80075a8 <HAL_UART_Init+0xb58>
 800714c:	2b09      	cmp	r3, #9
 800714e:	f000 821a 	beq.w	8007586 <HAL_UART_Init+0xb36>
 8007152:	2b0a      	cmp	r3, #10
 8007154:	f000 8213 	beq.w	800757e <HAL_UART_Init+0xb2e>
 8007158:	2b0b      	cmp	r3, #11
 800715a:	f000 8221 	beq.w	80075a0 <HAL_UART_Init+0xb50>
 800715e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8007162:	2100      	movs	r1, #0
 8007164:	e7b9      	b.n	80070da <HAL_UART_Init+0x68a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007166:	2b00      	cmp	r3, #0
 8007168:	f47f ace4 	bne.w	8006b34 <HAL_UART_Init+0xe4>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800716c:	f7fd fb20 	bl	80047b0 <HAL_RCC_GetPCLK1Freq>
 8007170:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007172:	2b00      	cmp	r3, #0
 8007174:	d147      	bne.n	8007206 <HAL_UART_Init+0x7b6>
 8007176:	2301      	movs	r3, #1
 8007178:	fbb0 f3f3 	udiv	r3, r0, r3
 800717c:	2100      	movs	r1, #0
    if (lpuart_ker_ck_pres != 0U)
 800717e:	2b00      	cmp	r3, #0
 8007180:	f47f ae54 	bne.w	8006e2c <HAL_UART_Init+0x3dc>
 8007184:	e4fb      	b.n	8006b7e <HAL_UART_Init+0x12e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007186:	2302      	movs	r3, #2
 8007188:	e4e9      	b.n	8006b5e <HAL_UART_Init+0x10e>
 800718a:	2304      	movs	r3, #4
 800718c:	e4e7      	b.n	8006b5e <HAL_UART_Init+0x10e>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800718e:	f7fc fe43 	bl	8003e18 <HAL_RCC_GetSysClockFreq>
 8007192:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007194:	2b00      	cmp	r3, #0
 8007196:	d17d      	bne.n	8007294 <HAL_UART_Init+0x844>
 8007198:	2301      	movs	r3, #1
 800719a:	fbb0 f3f3 	udiv	r3, r0, r3
 800719e:	2104      	movs	r1, #4
    if (lpuart_ker_ck_pres != 0U)
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f47f ae43 	bne.w	8006e2c <HAL_UART_Init+0x3dc>
 80071a6:	e4ea      	b.n	8006b7e <HAL_UART_Init+0x12e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071a8:	2306      	movs	r3, #6
 80071aa:	e4d8      	b.n	8006b5e <HAL_UART_Init+0x10e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80071b0:	e6ef      	b.n	8006f92 <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071b2:	4bb9      	ldr	r3, [pc, #740]	; (8007498 <HAL_UART_Init+0xa48>)
 80071b4:	e6ed      	b.n	8006f92 <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071b6:	2302      	movs	r3, #2
 80071b8:	e6a6      	b.n	8006f08 <HAL_UART_Init+0x4b8>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80071ba:	2901      	cmp	r1, #1
 80071bc:	f000 80b7 	beq.w	800732e <HAL_UART_Init+0x8de>
 80071c0:	2902      	cmp	r1, #2
 80071c2:	f000 80ca 	beq.w	800735a <HAL_UART_Init+0x90a>
 80071c6:	2903      	cmp	r1, #3
 80071c8:	f000 80e0 	beq.w	800738c <HAL_UART_Init+0x93c>
 80071cc:	2904      	cmp	r1, #4
 80071ce:	f000 8103 	beq.w	80073d8 <HAL_UART_Init+0x988>
 80071d2:	2905      	cmp	r1, #5
 80071d4:	f000 8105 	beq.w	80073e2 <HAL_UART_Init+0x992>
 80071d8:	2906      	cmp	r1, #6
 80071da:	f000 8133 	beq.w	8007444 <HAL_UART_Init+0x9f4>
 80071de:	2907      	cmp	r1, #7
 80071e0:	f000 814f 	beq.w	8007482 <HAL_UART_Init+0xa32>
 80071e4:	2908      	cmp	r1, #8
 80071e6:	f000 81b9 	beq.w	800755c <HAL_UART_Init+0xb0c>
 80071ea:	2909      	cmp	r1, #9
 80071ec:	f000 81b3 	beq.w	8007556 <HAL_UART_Init+0xb06>
 80071f0:	290a      	cmp	r1, #10
 80071f2:	f000 81ad 	beq.w	8007550 <HAL_UART_Init+0xb00>
 80071f6:	4ba9      	ldr	r3, [pc, #676]	; (800749c <HAL_UART_Init+0xa4c>)
 80071f8:	f24f 4224 	movw	r2, #62500	; 0xf424
 80071fc:	290b      	cmp	r1, #11
 80071fe:	bf08      	it	eq
 8007200:	4613      	moveq	r3, r2
 8007202:	2102      	movs	r1, #2
 8007204:	e612      	b.n	8006e2c <HAL_UART_Init+0x3dc>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007206:	2b01      	cmp	r3, #1
 8007208:	f000 8096 	beq.w	8007338 <HAL_UART_Init+0x8e8>
 800720c:	2b02      	cmp	r3, #2
 800720e:	f000 80a8 	beq.w	8007362 <HAL_UART_Init+0x912>
 8007212:	2b03      	cmp	r3, #3
 8007214:	f000 80b8 	beq.w	8007388 <HAL_UART_Init+0x938>
 8007218:	2b04      	cmp	r3, #4
 800721a:	f000 80db 	beq.w	80073d4 <HAL_UART_Init+0x984>
 800721e:	2b05      	cmp	r3, #5
 8007220:	f000 80f3 	beq.w	800740a <HAL_UART_Init+0x9ba>
 8007224:	2b06      	cmp	r3, #6
 8007226:	f000 80f2 	beq.w	800740e <HAL_UART_Init+0x9be>
 800722a:	2b07      	cmp	r3, #7
 800722c:	f000 8117 	beq.w	800745e <HAL_UART_Init+0xa0e>
 8007230:	2b08      	cmp	r3, #8
 8007232:	f000 819f 	beq.w	8007574 <HAL_UART_Init+0xb24>
 8007236:	2b09      	cmp	r3, #9
 8007238:	f000 8180 	beq.w	800753c <HAL_UART_Init+0xaec>
 800723c:	2b0a      	cmp	r3, #10
 800723e:	f000 817b 	beq.w	8007538 <HAL_UART_Init+0xae8>
 8007242:	2b0b      	cmp	r3, #11
 8007244:	bf14      	ite	ne
 8007246:	2301      	movne	r3, #1
 8007248:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800724c:	e794      	b.n	8007178 <HAL_UART_Init+0x728>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800724e:	2901      	cmp	r1, #1
 8007250:	d074      	beq.n	800733c <HAL_UART_Init+0x8ec>
 8007252:	2902      	cmp	r1, #2
 8007254:	d07d      	beq.n	8007352 <HAL_UART_Init+0x902>
 8007256:	2903      	cmp	r1, #3
 8007258:	f000 809d 	beq.w	8007396 <HAL_UART_Init+0x946>
 800725c:	2904      	cmp	r1, #4
 800725e:	f000 80b0 	beq.w	80073c2 <HAL_UART_Init+0x972>
 8007262:	2905      	cmp	r1, #5
 8007264:	f000 80c3 	beq.w	80073ee <HAL_UART_Init+0x99e>
 8007268:	2906      	cmp	r1, #6
 800726a:	f000 80d4 	beq.w	8007416 <HAL_UART_Init+0x9c6>
 800726e:	2907      	cmp	r1, #7
 8007270:	f000 810d 	beq.w	800748e <HAL_UART_Init+0xa3e>
 8007274:	2908      	cmp	r1, #8
 8007276:	f000 814c 	beq.w	8007512 <HAL_UART_Init+0xac2>
 800727a:	2909      	cmp	r1, #9
 800727c:	f000 8164 	beq.w	8007548 <HAL_UART_Init+0xaf8>
 8007280:	290a      	cmp	r1, #10
 8007282:	f000 815d 	beq.w	8007540 <HAL_UART_Init+0xaf0>
 8007286:	290b      	cmp	r1, #11
 8007288:	bf14      	ite	ne
 800728a:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 800728e:	2380      	moveq	r3, #128	; 0x80
 8007290:	2108      	movs	r1, #8
 8007292:	e5cb      	b.n	8006e2c <HAL_UART_Init+0x3dc>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007294:	2b01      	cmp	r3, #1
 8007296:	d04d      	beq.n	8007334 <HAL_UART_Init+0x8e4>
 8007298:	2b02      	cmp	r3, #2
 800729a:	d060      	beq.n	800735e <HAL_UART_Init+0x90e>
 800729c:	2b03      	cmp	r3, #3
 800729e:	d078      	beq.n	8007392 <HAL_UART_Init+0x942>
 80072a0:	2b04      	cmp	r3, #4
 80072a2:	f000 809c 	beq.w	80073de <HAL_UART_Init+0x98e>
 80072a6:	2b05      	cmp	r3, #5
 80072a8:	f000 80a5 	beq.w	80073f6 <HAL_UART_Init+0x9a6>
 80072ac:	2b06      	cmp	r3, #6
 80072ae:	f000 80b6 	beq.w	800741e <HAL_UART_Init+0x9ce>
 80072b2:	2b07      	cmp	r3, #7
 80072b4:	f000 8118 	beq.w	80074e8 <HAL_UART_Init+0xa98>
 80072b8:	2b08      	cmp	r3, #8
 80072ba:	f000 8125 	beq.w	8007508 <HAL_UART_Init+0xab8>
 80072be:	2b09      	cmp	r3, #9
 80072c0:	f000 8153 	beq.w	800756a <HAL_UART_Init+0xb1a>
 80072c4:	2b0a      	cmp	r3, #10
 80072c6:	f000 814e 	beq.w	8007566 <HAL_UART_Init+0xb16>
 80072ca:	2b0b      	cmp	r3, #11
 80072cc:	bf14      	ite	ne
 80072ce:	2301      	movne	r3, #1
 80072d0:	f44f 7380 	moveq.w	r3, #256	; 0x100
 80072d4:	e761      	b.n	800719a <HAL_UART_Init+0x74a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072d6:	4b72      	ldr	r3, [pc, #456]	; (80074a0 <HAL_UART_Init+0xa50>)
 80072d8:	e5dd      	b.n	8006e96 <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80072de:	e5da      	b.n	8006e96 <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072e0:	2304      	movs	r3, #4
 80072e2:	e611      	b.n	8006f08 <HAL_UART_Init+0x4b8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072e4:	230a      	movs	r3, #10
 80072e6:	e43a      	b.n	8006b5e <HAL_UART_Init+0x10e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072e8:	4b6e      	ldr	r3, [pc, #440]	; (80074a4 <HAL_UART_Init+0xa54>)
 80072ea:	e5d4      	b.n	8006e96 <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80072f0:	e5d1      	b.n	8006e96 <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072f2:	2306      	movs	r3, #6
 80072f4:	e608      	b.n	8006f08 <HAL_UART_Init+0x4b8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072f6:	230c      	movs	r3, #12
 80072f8:	e431      	b.n	8006b5e <HAL_UART_Init+0x10e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072fa:	f241 5355 	movw	r3, #5461	; 0x1555
 80072fe:	e5ca      	b.n	8006e96 <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007300:	4b69      	ldr	r3, [pc, #420]	; (80074a8 <HAL_UART_Init+0xa58>)
 8007302:	e5c8      	b.n	8006e96 <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007304:	2310      	movs	r3, #16
 8007306:	e42a      	b.n	8006b5e <HAL_UART_Init+0x10e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007308:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800730c:	e641      	b.n	8006f92 <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800730e:	4b63      	ldr	r3, [pc, #396]	; (800749c <HAL_UART_Init+0xa4c>)
 8007310:	e63f      	b.n	8006f92 <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007312:	2308      	movs	r3, #8
 8007314:	e5f8      	b.n	8006f08 <HAL_UART_Init+0x4b8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800731a:	e5bc      	b.n	8006e96 <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800731c:	4b63      	ldr	r3, [pc, #396]	; (80074ac <HAL_UART_Init+0xa5c>)
 800731e:	e5ba      	b.n	8006e96 <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007320:	230a      	movs	r3, #10
 8007322:	e5f1      	b.n	8006f08 <HAL_UART_Init+0x4b8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007324:	4b5e      	ldr	r3, [pc, #376]	; (80074a0 <HAL_UART_Init+0xa50>)
 8007326:	e634      	b.n	8006f92 <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007328:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800732c:	e631      	b.n	8006f92 <HAL_UART_Init+0x542>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800732e:	4b5c      	ldr	r3, [pc, #368]	; (80074a0 <HAL_UART_Init+0xa50>)
 8007330:	2102      	movs	r1, #2
 8007332:	e57b      	b.n	8006e2c <HAL_UART_Init+0x3dc>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007334:	2302      	movs	r3, #2
 8007336:	e730      	b.n	800719a <HAL_UART_Init+0x74a>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007338:	2302      	movs	r3, #2
 800733a:	e71d      	b.n	8007178 <HAL_UART_Init+0x728>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800733c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007340:	2108      	movs	r1, #8
 8007342:	e573      	b.n	8006e2c <HAL_UART_Init+0x3dc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007344:	2320      	movs	r3, #32
 8007346:	e40a      	b.n	8006b5e <HAL_UART_Init+0x10e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007348:	f640 43cc 	movw	r3, #3276	; 0xccc
 800734c:	e5a3      	b.n	8006e96 <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800734e:	4b58      	ldr	r3, [pc, #352]	; (80074b0 <HAL_UART_Init+0xa60>)
 8007350:	e5a1      	b.n	8006e96 <HAL_UART_Init+0x446>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007352:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007356:	2108      	movs	r1, #8
 8007358:	e568      	b.n	8006e2c <HAL_UART_Init+0x3dc>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800735a:	4b52      	ldr	r3, [pc, #328]	; (80074a4 <HAL_UART_Init+0xa54>)
 800735c:	e566      	b.n	8006e2c <HAL_UART_Init+0x3dc>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800735e:	2304      	movs	r3, #4
 8007360:	e71b      	b.n	800719a <HAL_UART_Init+0x74a>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007362:	2304      	movs	r3, #4
 8007364:	e708      	b.n	8007178 <HAL_UART_Init+0x728>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007366:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800736a:	e612      	b.n	8006f92 <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800736c:	2310      	movs	r3, #16
 800736e:	e5cb      	b.n	8006f08 <HAL_UART_Init+0x4b8>
 8007370:	230c      	movs	r3, #12
 8007372:	e5c9      	b.n	8006f08 <HAL_UART_Init+0x4b8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007374:	4b4f      	ldr	r3, [pc, #316]	; (80074b4 <HAL_UART_Init+0xa64>)
 8007376:	e60c      	b.n	8006f92 <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007378:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800737c:	e58b      	b.n	8006e96 <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800737e:	4b4e      	ldr	r3, [pc, #312]	; (80074b8 <HAL_UART_Init+0xa68>)
 8007380:	e589      	b.n	8006e96 <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007382:	2340      	movs	r3, #64	; 0x40
 8007384:	f7ff bbeb 	b.w	8006b5e <HAL_UART_Init+0x10e>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007388:	2306      	movs	r3, #6
 800738a:	e6f5      	b.n	8007178 <HAL_UART_Init+0x728>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800738c:	4b46      	ldr	r3, [pc, #280]	; (80074a8 <HAL_UART_Init+0xa58>)
 800738e:	2102      	movs	r1, #2
 8007390:	e54c      	b.n	8006e2c <HAL_UART_Init+0x3dc>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007392:	2306      	movs	r3, #6
 8007394:	e701      	b.n	800719a <HAL_UART_Init+0x74a>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007396:	f241 5355 	movw	r3, #5461	; 0x1555
 800739a:	2108      	movs	r1, #8
 800739c:	e546      	b.n	8006e2c <HAL_UART_Init+0x3dc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800739e:	4b41      	ldr	r3, [pc, #260]	; (80074a4 <HAL_UART_Init+0xa54>)
 80073a0:	e5f7      	b.n	8006f92 <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073a2:	2380      	movs	r3, #128	; 0x80
 80073a4:	f7ff bbdb 	b.w	8006b5e <HAL_UART_Init+0x10e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073a8:	2320      	movs	r3, #32
 80073aa:	e5ad      	b.n	8006f08 <HAL_UART_Init+0x4b8>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073ac:	2202      	movs	r2, #2
 80073ae:	2300      	movs	r3, #0
 80073b0:	e653      	b.n	800705a <HAL_UART_Init+0x60a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80073b6:	e5ec      	b.n	8006f92 <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073b8:	4b40      	ldr	r3, [pc, #256]	; (80074bc <HAL_UART_Init+0xa6c>)
 80073ba:	e56c      	b.n	8006e96 <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80073c0:	e569      	b.n	8006e96 <HAL_UART_Init+0x446>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80073c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073c6:	2108      	movs	r1, #8
 80073c8:	e530      	b.n	8006e2c <HAL_UART_Init+0x3dc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073ca:	4b3d      	ldr	r3, [pc, #244]	; (80074c0 <HAL_UART_Init+0xa70>)
 80073cc:	e5e1      	b.n	8006f92 <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073ce:	f641 1398 	movw	r3, #6552	; 0x1998
 80073d2:	e5de      	b.n	8006f92 <HAL_UART_Init+0x542>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80073d4:	2308      	movs	r3, #8
 80073d6:	e6cf      	b.n	8007178 <HAL_UART_Init+0x728>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80073d8:	4b34      	ldr	r3, [pc, #208]	; (80074ac <HAL_UART_Init+0xa5c>)
 80073da:	2102      	movs	r1, #2
 80073dc:	e526      	b.n	8006e2c <HAL_UART_Init+0x3dc>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80073de:	2308      	movs	r3, #8
 80073e0:	e6db      	b.n	800719a <HAL_UART_Init+0x74a>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80073e2:	4b33      	ldr	r3, [pc, #204]	; (80074b0 <HAL_UART_Init+0xa60>)
 80073e4:	2102      	movs	r1, #2
 80073e6:	e521      	b.n	8006e2c <HAL_UART_Init+0x3dc>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073e8:	2204      	movs	r2, #4
 80073ea:	2300      	movs	r3, #0
 80073ec:	e635      	b.n	800705a <HAL_UART_Init+0x60a>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80073ee:	f640 43cc 	movw	r3, #3276	; 0xccc
 80073f2:	2108      	movs	r1, #8
 80073f4:	e51a      	b.n	8006e2c <HAL_UART_Init+0x3dc>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80073f6:	230a      	movs	r3, #10
 80073f8:	e6cf      	b.n	800719a <HAL_UART_Init+0x74a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073fa:	2206      	movs	r2, #6
 80073fc:	2300      	movs	r3, #0
 80073fe:	e62c      	b.n	800705a <HAL_UART_Init+0x60a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007400:	4b30      	ldr	r3, [pc, #192]	; (80074c4 <HAL_UART_Init+0xa74>)
 8007402:	e548      	b.n	8006e96 <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007408:	e545      	b.n	8006e96 <HAL_UART_Init+0x446>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800740a:	230a      	movs	r3, #10
 800740c:	e6b4      	b.n	8007178 <HAL_UART_Init+0x728>
 800740e:	230c      	movs	r3, #12
 8007410:	e6b2      	b.n	8007178 <HAL_UART_Init+0x728>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007412:	2380      	movs	r3, #128	; 0x80
 8007414:	e578      	b.n	8006f08 <HAL_UART_Init+0x4b8>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007416:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800741a:	2108      	movs	r1, #8
 800741c:	e506      	b.n	8006e2c <HAL_UART_Init+0x3dc>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800741e:	230c      	movs	r3, #12
 8007420:	e6bb      	b.n	800719a <HAL_UART_Init+0x74a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007422:	4b22      	ldr	r3, [pc, #136]	; (80074ac <HAL_UART_Init+0xa5c>)
 8007424:	e5b5      	b.n	8006f92 <HAL_UART_Init+0x542>
 8007426:	4b20      	ldr	r3, [pc, #128]	; (80074a8 <HAL_UART_Init+0xa58>)
 8007428:	e5b3      	b.n	8006f92 <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800742a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800742e:	e5b0      	b.n	8006f92 <HAL_UART_Init+0x542>
 8007430:	f241 5354 	movw	r3, #5460	; 0x1554
 8007434:	e5ad      	b.n	8006f92 <HAL_UART_Init+0x542>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007436:	4824      	ldr	r0, [pc, #144]	; (80074c8 <HAL_UART_Init+0xa78>)
 8007438:	2100      	movs	r1, #0
 800743a:	e64e      	b.n	80070da <HAL_UART_Init+0x68a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800743c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8007440:	2100      	movs	r1, #0
 8007442:	e64a      	b.n	80070da <HAL_UART_Init+0x68a>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007444:	4b1c      	ldr	r3, [pc, #112]	; (80074b8 <HAL_UART_Init+0xa68>)
 8007446:	2102      	movs	r1, #2
 8007448:	e4f0      	b.n	8006e2c <HAL_UART_Init+0x3dc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800744a:	2340      	movs	r3, #64	; 0x40
 800744c:	e55c      	b.n	8006f08 <HAL_UART_Init+0x4b8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800744e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007452:	e520      	b.n	8006e96 <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007454:	4b1d      	ldr	r3, [pc, #116]	; (80074cc <HAL_UART_Init+0xa7c>)
 8007456:	e51e      	b.n	8006e96 <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007458:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800745c:	e599      	b.n	8006f92 <HAL_UART_Init+0x542>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800745e:	2310      	movs	r3, #16
 8007460:	e68a      	b.n	8007178 <HAL_UART_Init+0x728>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007462:	2210      	movs	r2, #16
 8007464:	2300      	movs	r3, #0
 8007466:	e5f8      	b.n	800705a <HAL_UART_Init+0x60a>
 8007468:	220c      	movs	r2, #12
 800746a:	2300      	movs	r3, #0
 800746c:	e5f5      	b.n	800705a <HAL_UART_Init+0x60a>
 800746e:	220a      	movs	r2, #10
 8007470:	2300      	movs	r3, #0
 8007472:	e5f2      	b.n	800705a <HAL_UART_Init+0x60a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007474:	4b11      	ldr	r3, [pc, #68]	; (80074bc <HAL_UART_Init+0xa6c>)
 8007476:	e58c      	b.n	8006f92 <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007478:	f44f 7380 	mov.w	r3, #256	; 0x100
 800747c:	e50b      	b.n	8006e96 <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800747e:	4b14      	ldr	r3, [pc, #80]	; (80074d0 <HAL_UART_Init+0xa80>)
 8007480:	e509      	b.n	8006e96 <HAL_UART_Init+0x446>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007482:	4b0e      	ldr	r3, [pc, #56]	; (80074bc <HAL_UART_Init+0xa6c>)
 8007484:	2102      	movs	r1, #2
 8007486:	e4d1      	b.n	8006e2c <HAL_UART_Init+0x3dc>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007488:	2208      	movs	r2, #8
 800748a:	2300      	movs	r3, #0
 800748c:	e5e5      	b.n	800705a <HAL_UART_Init+0x60a>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800748e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007492:	2108      	movs	r1, #8
 8007494:	e4ca      	b.n	8006e2c <HAL_UART_Init+0x3dc>
 8007496:	bf00      	nop
 8007498:	01e84800 	.word	0x01e84800
 800749c:	00f42400 	.word	0x00f42400
 80074a0:	007a1200 	.word	0x007a1200
 80074a4:	003d0900 	.word	0x003d0900
 80074a8:	0028b0aa 	.word	0x0028b0aa
 80074ac:	001e8480 	.word	0x001e8480
 80074b0:	00186a00 	.word	0x00186a00
 80074b4:	00516154 	.word	0x00516154
 80074b8:	00145855 	.word	0x00145855
 80074bc:	000f4240 	.word	0x000f4240
 80074c0:	0030d400 	.word	0x0030d400
 80074c4:	0007a120 	.word	0x0007a120
 80074c8:	7a120000 	.word	0x7a120000
 80074cc:	0003d090 	.word	0x0003d090
 80074d0:	0001e848 	.word	0x0001e848
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074d4:	4842      	ldr	r0, [pc, #264]	; (80075e0 <HAL_UART_Init+0xb90>)
 80074d6:	2100      	movs	r1, #0
 80074d8:	e5ff      	b.n	80070da <HAL_UART_Init+0x68a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074da:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80074de:	2100      	movs	r1, #0
 80074e0:	e5fb      	b.n	80070da <HAL_UART_Init+0x68a>
 80074e2:	4840      	ldr	r0, [pc, #256]	; (80075e4 <HAL_UART_Init+0xb94>)
 80074e4:	2100      	movs	r1, #0
 80074e6:	e5f8      	b.n	80070da <HAL_UART_Init+0x68a>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80074e8:	2310      	movs	r3, #16
 80074ea:	e656      	b.n	800719a <HAL_UART_Init+0x74a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074ec:	a138      	add	r1, pc, #224	; (adr r1, 80075d0 <HAL_UART_Init+0xb80>)
 80074ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074f2:	e5f2      	b.n	80070da <HAL_UART_Init+0x68a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074f4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80074f8:	2100      	movs	r1, #0
 80074fa:	e5ee      	b.n	80070da <HAL_UART_Init+0x68a>
 80074fc:	483a      	ldr	r0, [pc, #232]	; (80075e8 <HAL_UART_Init+0xb98>)
 80074fe:	2100      	movs	r1, #0
 8007500:	e5eb      	b.n	80070da <HAL_UART_Init+0x68a>
 8007502:	483a      	ldr	r0, [pc, #232]	; (80075ec <HAL_UART_Init+0xb9c>)
 8007504:	2100      	movs	r1, #0
 8007506:	e5e8      	b.n	80070da <HAL_UART_Init+0x68a>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007508:	2320      	movs	r3, #32
 800750a:	e646      	b.n	800719a <HAL_UART_Init+0x74a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800750c:	4838      	ldr	r0, [pc, #224]	; (80075f0 <HAL_UART_Init+0xba0>)
 800750e:	2100      	movs	r1, #0
 8007510:	e5e3      	b.n	80070da <HAL_UART_Init+0x68a>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007516:	e489      	b.n	8006e2c <HAL_UART_Init+0x3dc>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007518:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800751c:	2100      	movs	r1, #0
 800751e:	e5dc      	b.n	80070da <HAL_UART_Init+0x68a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007520:	4834      	ldr	r0, [pc, #208]	; (80075f4 <HAL_UART_Init+0xba4>)
 8007522:	2100      	movs	r1, #0
 8007524:	e5d9      	b.n	80070da <HAL_UART_Init+0x68a>
 8007526:	a12c      	add	r1, pc, #176	; (adr r1, 80075d8 <HAL_UART_Init+0xb88>)
 8007528:	e9d1 0100 	ldrd	r0, r1, [r1]
 800752c:	e5d5      	b.n	80070da <HAL_UART_Init+0x68a>
 800752e:	4832      	ldr	r0, [pc, #200]	; (80075f8 <HAL_UART_Init+0xba8>)
 8007530:	2100      	movs	r1, #0
 8007532:	e5d2      	b.n	80070da <HAL_UART_Init+0x68a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007534:	4b31      	ldr	r3, [pc, #196]	; (80075fc <HAL_UART_Init+0xbac>)
 8007536:	e52c      	b.n	8006f92 <HAL_UART_Init+0x542>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007538:	2380      	movs	r3, #128	; 0x80
 800753a:	e61d      	b.n	8007178 <HAL_UART_Init+0x728>
 800753c:	2340      	movs	r3, #64	; 0x40
 800753e:	e61b      	b.n	8007178 <HAL_UART_Init+0x728>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007540:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007544:	2108      	movs	r1, #8
 8007546:	e471      	b.n	8006e2c <HAL_UART_Init+0x3dc>
 8007548:	f44f 7300 	mov.w	r3, #512	; 0x200
 800754c:	2108      	movs	r1, #8
 800754e:	e46d      	b.n	8006e2c <HAL_UART_Init+0x3dc>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007550:	4b2b      	ldr	r3, [pc, #172]	; (8007600 <HAL_UART_Init+0xbb0>)
 8007552:	2102      	movs	r1, #2
 8007554:	e46a      	b.n	8006e2c <HAL_UART_Init+0x3dc>
 8007556:	4b2b      	ldr	r3, [pc, #172]	; (8007604 <HAL_UART_Init+0xbb4>)
 8007558:	2102      	movs	r1, #2
 800755a:	e467      	b.n	8006e2c <HAL_UART_Init+0x3dc>
 800755c:	4b27      	ldr	r3, [pc, #156]	; (80075fc <HAL_UART_Init+0xbac>)
 800755e:	2102      	movs	r1, #2
 8007560:	e464      	b.n	8006e2c <HAL_UART_Init+0x3dc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007562:	4b28      	ldr	r3, [pc, #160]	; (8007604 <HAL_UART_Init+0xbb4>)
 8007564:	e515      	b.n	8006f92 <HAL_UART_Init+0x542>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007566:	2380      	movs	r3, #128	; 0x80
 8007568:	e617      	b.n	800719a <HAL_UART_Init+0x74a>
 800756a:	2340      	movs	r3, #64	; 0x40
 800756c:	e615      	b.n	800719a <HAL_UART_Init+0x74a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800756e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007572:	e50e      	b.n	8006f92 <HAL_UART_Init+0x542>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007574:	2320      	movs	r3, #32
 8007576:	e5ff      	b.n	8007178 <HAL_UART_Init+0x728>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007578:	f44f 7300 	mov.w	r3, #512	; 0x200
 800757c:	e509      	b.n	8006f92 <HAL_UART_Init+0x542>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800757e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007582:	2100      	movs	r1, #0
 8007584:	e5a9      	b.n	80070da <HAL_UART_Init+0x68a>
 8007586:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800758a:	2100      	movs	r1, #0
 800758c:	e5a5      	b.n	80070da <HAL_UART_Init+0x68a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800758e:	2280      	movs	r2, #128	; 0x80
 8007590:	2300      	movs	r3, #0
 8007592:	e562      	b.n	800705a <HAL_UART_Init+0x60a>
 8007594:	2240      	movs	r2, #64	; 0x40
 8007596:	2300      	movs	r3, #0
 8007598:	e55f      	b.n	800705a <HAL_UART_Init+0x60a>
 800759a:	2220      	movs	r2, #32
 800759c:	2300      	movs	r3, #0
 800759e:	e55c      	b.n	800705a <HAL_UART_Init+0x60a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075a0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80075a4:	2100      	movs	r1, #0
 80075a6:	e598      	b.n	80070da <HAL_UART_Init+0x68a>
 80075a8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80075ac:	2100      	movs	r1, #0
 80075ae:	e594      	b.n	80070da <HAL_UART_Init+0x68a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075b0:	4815      	ldr	r0, [pc, #84]	; (8007608 <HAL_UART_Init+0xbb8>)
 80075b2:	2100      	movs	r1, #0
 80075b4:	e591      	b.n	80070da <HAL_UART_Init+0x68a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075ba:	2300      	movs	r3, #0
 80075bc:	e54d      	b.n	800705a <HAL_UART_Init+0x60a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075be:	4813      	ldr	r0, [pc, #76]	; (800760c <HAL_UART_Init+0xbbc>)
 80075c0:	2100      	movs	r1, #0
 80075c2:	e58a      	b.n	80070da <HAL_UART_Init+0x68a>
 80075c4:	4812      	ldr	r0, [pc, #72]	; (8007610 <HAL_UART_Init+0xbc0>)
 80075c6:	2100      	movs	r1, #0
 80075c8:	e587      	b.n	80070da <HAL_UART_Init+0x68a>
 80075ca:	4812      	ldr	r0, [pc, #72]	; (8007614 <HAL_UART_Init+0xbc4>)
 80075cc:	2100      	movs	r1, #0
 80075ce:	e584      	b.n	80070da <HAL_UART_Init+0x68a>
 80075d0:	28b0aa00 	.word	0x28b0aa00
 80075d4:	00000000 	.word	0x00000000
 80075d8:	14585500 	.word	0x14585500
 80075dc:	00000000 	.word	0x00000000
 80075e0:	3d090000 	.word	0x3d090000
 80075e4:	00155500 	.word	0x00155500
 80075e8:	000aaa00 	.word	0x000aaa00
 80075ec:	000ccc00 	.word	0x000ccc00
 80075f0:	1e848000 	.word	0x1e848000
 80075f4:	0f424000 	.word	0x0f424000
 80075f8:	186a0000 	.word	0x186a0000
 80075fc:	0007a120 	.word	0x0007a120
 8007600:	0001e848 	.word	0x0001e848
 8007604:	0003d090 	.word	0x0003d090
 8007608:	07a12000 	.word	0x07a12000
 800760c:	00f42400 	.word	0x00f42400
 8007610:	01e84800 	.word	0x01e84800
 8007614:	03d09000 	.word	0x03d09000

08007618 <HAL_UARTEx_WakeupCallback>:
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop

0800761c <HAL_UARTEx_RxFifoFullCallback>:
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop

08007620 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop

08007624 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007624:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8007628:	2a01      	cmp	r2, #1
 800762a:	d017      	beq.n	800765c <HAL_UARTEx_DisableFifoMode+0x38>
{
 800762c:	b430      	push	{r4, r5}

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800762e:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007630:	2124      	movs	r1, #36	; 0x24
 8007632:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007636:	6814      	ldr	r4, [r2, #0]
 8007638:	4603      	mov	r3, r0

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800763a:	6810      	ldr	r0, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800763c:	2100      	movs	r1, #0
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800763e:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8007642:	f020 0001 	bic.w	r0, r0, #1

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8007646:	2520      	movs	r5, #32
  __HAL_UART_DISABLE(huart);
 8007648:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 800764a:	4608      	mov	r0, r1
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800764c:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800764e:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007650:	f883 507d 	strb.w	r5, [r3, #125]	; 0x7d
  __HAL_UNLOCK(huart);
 8007654:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 8007658:	bc30      	pop	{r4, r5}
 800765a:	4770      	bx	lr
  __HAL_LOCK(huart);
 800765c:	2002      	movs	r0, #2
 800765e:	4770      	bx	lr

08007660 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007660:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8007664:	2a01      	cmp	r2, #1
 8007666:	d101      	bne.n	800766c <HAL_UARTEx_SetTxFifoThreshold+0xc>
 8007668:	2002      	movs	r0, #2
 800766a:	4770      	bx	lr
{
 800766c:	b5f0      	push	{r4, r5, r6, r7, lr}

  huart->gState = HAL_UART_STATE_BUSY;
 800766e:	2224      	movs	r2, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007670:	6804      	ldr	r4, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007672:	f880 207d 	strb.w	r2, [r0, #125]	; 0x7d
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007676:	6825      	ldr	r5, [r4, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007678:	6822      	ldr	r2, [r4, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U};
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800767a:	6e46      	ldr	r6, [r0, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 800767c:	f022 0201 	bic.w	r2, r2, #1
 8007680:	6022      	str	r2, [r4, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007682:	68a2      	ldr	r2, [r4, #8]
{
 8007684:	b085      	sub	sp, #20
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007686:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800768a:	4311      	orrs	r1, r2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U};
 800768c:	2707      	movs	r7, #7
 800768e:	2201      	movs	r2, #1
 8007690:	4603      	mov	r3, r0
 8007692:	f04f 0e03 	mov.w	lr, #3
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U};
 8007696:	2008      	movs	r0, #8
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007698:	60a1      	str	r1, [r4, #8]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U};
 800769a:	f88d 7004 	strb.w	r7, [sp, #4]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U};
 800769e:	2104      	movs	r1, #4
 80076a0:	2702      	movs	r7, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U};
 80076a2:	f88d 2000 	strb.w	r2, [sp]
 80076a6:	f88d 2001 	strb.w	r2, [sp, #1]
 80076aa:	f88d 2002 	strb.w	r2, [sp, #2]
 80076ae:	f88d 2005 	strb.w	r2, [sp, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U};
 80076b2:	f88d 200d 	strb.w	r2, [sp, #13]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U};
 80076b6:	f88d e003 	strb.w	lr, [sp, #3]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U};
 80076ba:	f88d 0008 	strb.w	r0, [sp, #8]
 80076be:	f88d 000c 	strb.w	r0, [sp, #12]
 80076c2:	f88d 1009 	strb.w	r1, [sp, #9]
 80076c6:	f88d 100b 	strb.w	r1, [sp, #11]
 80076ca:	f88d 700a 	strb.w	r7, [sp, #10]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80076ce:	b33e      	cbz	r6, 8007720 <HAL_UARTEx_SetTxFifoThreshold+0xc0>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80076d0:	68a0      	ldr	r0, [r4, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80076d2:	68a6      	ldr	r6, [r4, #8]
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 80076d4:	aa04      	add	r2, sp, #16
 80076d6:	f3c0 6042 	ubfx	r0, r0, #25, #3
 80076da:	4410      	add	r0, r2
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 80076dc:	eb02 7656 	add.w	r6, r2, r6, lsr #29
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 80076e0:	f810 2c10 	ldrb.w	r2, [r0, #-16]
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 80076e4:	f816 1c10 	ldrb.w	r1, [r6, #-16]
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 80076e8:	f810 7c08 	ldrb.w	r7, [r0, #-8]
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 80076ec:	f816 0c08 	ldrb.w	r0, [r6, #-8]
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 80076f0:	fa02 f20e 	lsl.w	r2, r2, lr
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 80076f4:	fa01 f10e 	lsl.w	r1, r1, lr
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 80076f8:	b2d2      	uxtb	r2, r2
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 80076fa:	b2c9      	uxtb	r1, r1
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 80076fc:	fbb2 f2f7 	udiv	r2, r2, r7
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 8007700:	fbb1 f1f0 	udiv	r1, r1, r0
  __HAL_UNLOCK(huart);
 8007704:	2600      	movs	r6, #0
  huart->gState = HAL_UART_STATE_READY;
 8007706:	2720      	movs	r7, #32
  return HAL_OK;
 8007708:	4630      	mov	r0, r6
 800770a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800770e:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007712:	6025      	str	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007714:	f883 707d 	strb.w	r7, [r3, #125]	; 0x7d
  __HAL_UNLOCK(huart);
 8007718:	f883 607c 	strb.w	r6, [r3, #124]	; 0x7c
}
 800771c:	b005      	add	sp, #20
 800771e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    huart->NbTxDataToProcess = 1U;
 8007720:	4611      	mov	r1, r2
 8007722:	e7ef      	b.n	8007704 <HAL_UARTEx_SetTxFifoThreshold+0xa4>

08007724 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8007724:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8007728:	2a01      	cmp	r2, #1
 800772a:	d101      	bne.n	8007730 <HAL_UARTEx_SetRxFifoThreshold+0xc>
 800772c:	2002      	movs	r0, #2
 800772e:	4770      	bx	lr
{
 8007730:	b5f0      	push	{r4, r5, r6, r7, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8007732:	2224      	movs	r2, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007734:	6804      	ldr	r4, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007736:	f880 207d 	strb.w	r2, [r0, #125]	; 0x7d
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800773a:	6825      	ldr	r5, [r4, #0]
  __HAL_UART_DISABLE(huart);
 800773c:	6822      	ldr	r2, [r4, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800773e:	6e46      	ldr	r6, [r0, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8007740:	f022 0201 	bic.w	r2, r2, #1
 8007744:	6022      	str	r2, [r4, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007746:	68a2      	ldr	r2, [r4, #8]
{
 8007748:	b085      	sub	sp, #20
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800774a:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 800774e:	4311      	orrs	r1, r2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U};
 8007750:	2707      	movs	r7, #7
 8007752:	2201      	movs	r2, #1
 8007754:	4603      	mov	r3, r0
 8007756:	f04f 0e03 	mov.w	lr, #3
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U};
 800775a:	2008      	movs	r0, #8
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800775c:	60a1      	str	r1, [r4, #8]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U};
 800775e:	f88d 7004 	strb.w	r7, [sp, #4]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U};
 8007762:	2104      	movs	r1, #4
 8007764:	2702      	movs	r7, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U};
 8007766:	f88d 2000 	strb.w	r2, [sp]
 800776a:	f88d 2001 	strb.w	r2, [sp, #1]
 800776e:	f88d 2002 	strb.w	r2, [sp, #2]
 8007772:	f88d 2005 	strb.w	r2, [sp, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U};
 8007776:	f88d 200d 	strb.w	r2, [sp, #13]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U};
 800777a:	f88d e003 	strb.w	lr, [sp, #3]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U};
 800777e:	f88d 0008 	strb.w	r0, [sp, #8]
 8007782:	f88d 000c 	strb.w	r0, [sp, #12]
 8007786:	f88d 1009 	strb.w	r1, [sp, #9]
 800778a:	f88d 100b 	strb.w	r1, [sp, #11]
 800778e:	f88d 700a 	strb.w	r7, [sp, #10]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007792:	b33e      	cbz	r6, 80077e4 <HAL_UARTEx_SetRxFifoThreshold+0xc0>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007794:	68a0      	ldr	r0, [r4, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007796:	68a6      	ldr	r6, [r4, #8]
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 8007798:	aa04      	add	r2, sp, #16
 800779a:	f3c0 6042 	ubfx	r0, r0, #25, #3
 800779e:	4410      	add	r0, r2
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 80077a0:	eb02 7656 	add.w	r6, r2, r6, lsr #29
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 80077a4:	f810 2c10 	ldrb.w	r2, [r0, #-16]
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 80077a8:	f816 1c10 	ldrb.w	r1, [r6, #-16]
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 80077ac:	f810 7c08 	ldrb.w	r7, [r0, #-8]
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 80077b0:	f816 0c08 	ldrb.w	r0, [r6, #-8]
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 80077b4:	fa02 f20e 	lsl.w	r2, r2, lr
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 80077b8:	fa01 f10e 	lsl.w	r1, r1, lr
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 80077bc:	b2d2      	uxtb	r2, r2
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 80077be:	b2c9      	uxtb	r1, r1
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 80077c0:	fbb2 f2f7 	udiv	r2, r2, r7
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 80077c4:	fbb1 f1f0 	udiv	r1, r1, r0
  __HAL_UNLOCK(huart);
 80077c8:	2600      	movs	r6, #0
  huart->gState = HAL_UART_STATE_READY;
 80077ca:	2720      	movs	r7, #32
  return HAL_OK;
 80077cc:	4630      	mov	r0, r6
 80077ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80077d2:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077d6:	6025      	str	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_READY;
 80077d8:	f883 707d 	strb.w	r7, [r3, #125]	; 0x7d
  __HAL_UNLOCK(huart);
 80077dc:	f883 607c 	strb.w	r6, [r3, #124]	; 0x7c
}
 80077e0:	b005      	add	sp, #20
 80077e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    huart->NbTxDataToProcess = 1U;
 80077e4:	4611      	mov	r1, r2
 80077e6:	e7ef      	b.n	80077c8 <HAL_UARTEx_SetRxFifoThreshold+0xa4>

080077e8 <SDMMC_GetCmdResp1.part.2>:
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80077e8:	4b30      	ldr	r3, [pc, #192]	; (80078ac <SDMMC_GetCmdResp1.part.2+0xc4>)
 80077ea:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 80077ec:	6943      	ldr	r3, [r0, #20]
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80077ee:	4830      	ldr	r0, [pc, #192]	; (80078b0 <SDMMC_GetCmdResp1.part.2+0xc8>)
 80077f0:	4018      	ands	r0, r3
 80077f2:	b148      	cbz	r0, 8007808 <SDMMC_GetCmdResp1.part.2+0x20>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	db08      	blt.n	800780a <SDMMC_GetCmdResp1.part.2+0x22>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80077f8:	0059      	lsls	r1, r3, #1
 80077fa:	d509      	bpl.n	8007810 <SDMMC_GetCmdResp1.part.2+0x28>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80077fc:	2040      	movs	r0, #64	; 0x40
 80077fe:	4770      	bx	lr
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007800:	049a      	lsls	r2, r3, #18
 8007802:	d54a      	bpl.n	800789a <SDMMC_GetCmdResp1.part.2+0xb2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007804:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
  }
}
 8007808:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800780a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800780e:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007810:	009a      	lsls	r2, r3, #2
 8007812:	d501      	bpl.n	8007818 <SDMMC_GetCmdResp1.part.2+0x30>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007814:	2080      	movs	r0, #128	; 0x80
 8007816:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007818:	00d9      	lsls	r1, r3, #3
 800781a:	d502      	bpl.n	8007822 <SDMMC_GetCmdResp1.part.2+0x3a>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800781c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007820:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007822:	011a      	lsls	r2, r3, #4
 8007824:	d502      	bpl.n	800782c <SDMMC_GetCmdResp1.part.2+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007826:	f44f 7000 	mov.w	r0, #512	; 0x200
 800782a:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800782c:	0159      	lsls	r1, r3, #5
 800782e:	d502      	bpl.n	8007836 <SDMMC_GetCmdResp1.part.2+0x4e>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007830:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007834:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007836:	01da      	lsls	r2, r3, #7
 8007838:	d502      	bpl.n	8007840 <SDMMC_GetCmdResp1.part.2+0x58>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800783a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800783e:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007840:	0219      	lsls	r1, r3, #8
 8007842:	d502      	bpl.n	800784a <SDMMC_GetCmdResp1.part.2+0x62>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007844:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007848:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800784a:	025a      	lsls	r2, r3, #9
 800784c:	d502      	bpl.n	8007854 <SDMMC_GetCmdResp1.part.2+0x6c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800784e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007852:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007854:	0299      	lsls	r1, r3, #10
 8007856:	d502      	bpl.n	800785e <SDMMC_GetCmdResp1.part.2+0x76>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007858:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800785c:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800785e:	02da      	lsls	r2, r3, #11
 8007860:	d502      	bpl.n	8007868 <SDMMC_GetCmdResp1.part.2+0x80>
    return SDMMC_ERROR_CC_ERR;
 8007862:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007866:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007868:	0359      	lsls	r1, r3, #13
 800786a:	d502      	bpl.n	8007872 <SDMMC_GetCmdResp1.part.2+0x8a>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800786c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8007870:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007872:	039a      	lsls	r2, r3, #14
 8007874:	d502      	bpl.n	800787c <SDMMC_GetCmdResp1.part.2+0x94>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007876:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800787a:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800787c:	03d9      	lsls	r1, r3, #15
 800787e:	d502      	bpl.n	8007886 <SDMMC_GetCmdResp1.part.2+0x9e>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007880:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007884:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007886:	041a      	lsls	r2, r3, #16
 8007888:	d502      	bpl.n	8007890 <SDMMC_GetCmdResp1.part.2+0xa8>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800788a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800788e:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007890:	0459      	lsls	r1, r3, #17
 8007892:	d5b5      	bpl.n	8007800 <SDMMC_GetCmdResp1.part.2+0x18>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007894:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8007898:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800789a:	f013 0f08 	tst.w	r3, #8
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800789e:	bf14      	ite	ne
 80078a0:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 80078a4:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	002000c5 	.word	0x002000c5
 80078b0:	fdffe008 	.word	0xfdffe008

080078b4 <SDMMC_Init>:
{
 80078b4:	b084      	sub	sp, #16
 80078b6:	b470      	push	{r4, r5, r6}
 80078b8:	ac04      	add	r4, sp, #16
 80078ba:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 80078be:	9e05      	ldr	r6, [sp, #20]
 80078c0:	9d06      	ldr	r5, [sp, #24]
 80078c2:	9c07      	ldr	r4, [sp, #28]
 80078c4:	4a07      	ldr	r2, [pc, #28]	; (80078e4 <SDMMC_Init+0x30>)
 80078c6:	460b      	mov	r3, r1
 80078c8:	4333      	orrs	r3, r6
 80078ca:	432b      	orrs	r3, r5
 80078cc:	6845      	ldr	r5, [r0, #4]
 80078ce:	9908      	ldr	r1, [sp, #32]
 80078d0:	4323      	orrs	r3, r4
 80078d2:	402a      	ands	r2, r5
}
 80078d4:	bc70      	pop	{r4, r5, r6}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 80078d6:	430b      	orrs	r3, r1
 80078d8:	4313      	orrs	r3, r2
 80078da:	6043      	str	r3, [r0, #4]
}
 80078dc:	b004      	add	sp, #16
 80078de:	2000      	movs	r0, #0
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	fffc2c00 	.word	0xfffc2c00

080078e8 <SDMMC_ReadFIFO>:
 80078e8:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop

080078f0 <SDMMC_PowerState_ON>:
{  
 80078f0:	4602      	mov	r2, r0
}
 80078f2:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80078f4:	6813      	ldr	r3, [r2, #0]
 80078f6:	f043 0303 	orr.w	r3, r3, #3
 80078fa:	6013      	str	r3, [r2, #0]
}
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop

08007900 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007900:	6800      	ldr	r0, [r0, #0]
}
 8007902:	f000 0003 	and.w	r0, r0, #3
 8007906:	4770      	bx	lr

08007908 <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007908:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 800790a:	5840      	ldr	r0, [r0, r1]
}  
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop

08007910 <SDMMC_ConfigData>:
  SDMMCx->DLEN = Data->DataLength;
 8007910:	e891 000c 	ldmia.w	r1, {r2, r3}
{
 8007914:	b470      	push	{r4, r5, r6}
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007916:	6242      	str	r2, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 8007918:	6283      	str	r3, [r0, #40]	; 0x28
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, Data->DataBlockSize |\
 800791a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800791c:	688e      	ldr	r6, [r1, #8]
 800791e:	68cd      	ldr	r5, [r1, #12]
 8007920:	690c      	ldr	r4, [r1, #16]
 8007922:	694a      	ldr	r2, [r1, #20]
 8007924:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007928:	4333      	orrs	r3, r6
 800792a:	432b      	orrs	r3, r5
 800792c:	4323      	orrs	r3, r4
 800792e:	4313      	orrs	r3, r2
 8007930:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8007932:	bc70      	pop	{r4, r5, r6}
 8007934:	2000      	movs	r0, #0
 8007936:	4770      	bx	lr

08007938 <SDMMC_CmdBlockLength>:
{
 8007938:	b410      	push	{r4}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800793a:	4b1d      	ldr	r3, [pc, #116]	; (80079b0 <SDMMC_CmdBlockLength+0x78>)
  SDMMCx->ARG = Command->Argument;
 800793c:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800793e:	68c4      	ldr	r4, [r0, #12]
 8007940:	4a1c      	ldr	r2, [pc, #112]	; (80079b4 <SDMMC_CmdBlockLength+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007942:	491d      	ldr	r1, [pc, #116]	; (80079b8 <SDMMC_CmdBlockLength+0x80>)
 8007944:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007946:	4022      	ands	r2, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007948:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800794c:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007950:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007952:	f042 0210 	orr.w	r2, r2, #16
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007956:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800795a:	60c2      	str	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800795c:	fb03 f301 	mul.w	r3, r3, r1
 8007960:	e003      	b.n	800796a <SDMMC_CmdBlockLength+0x32>
  }while(!__SDMMC_GET_FLAG(SDMMCx, flags));
 8007962:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007964:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007968:	d107      	bne.n	800797a <SDMMC_CmdBlockLength+0x42>
    if (count-- == 0U)
 800796a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800796e:	d2f8      	bcs.n	8007962 <SDMMC_CmdBlockLength+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8007970:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007974:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007978:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800797a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800797c:	075a      	lsls	r2, r3, #29
 800797e:	d505      	bpl.n	800798c <SDMMC_CmdBlockLength+0x54>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007980:	2304      	movs	r3, #4
 8007982:	6383      	str	r3, [r0, #56]	; 0x38
}
 8007984:	f85d 4b04 	ldr.w	r4, [sp], #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007988:	4618      	mov	r0, r3
}
 800798a:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800798c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800798e:	07db      	lsls	r3, r3, #31
 8007990:	d405      	bmi.n	800799e <SDMMC_CmdBlockLength+0x66>
  return (uint8_t)(SDMMCx->RESPCMD);
 8007992:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b10      	cmp	r3, #16
 8007998:	d005      	beq.n	80079a6 <SDMMC_CmdBlockLength+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800799a:	2001      	movs	r0, #1
  return errorstate;
 800799c:	e7ea      	b.n	8007974 <SDMMC_CmdBlockLength+0x3c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800799e:	2301      	movs	r3, #1
 80079a0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80079a2:	4618      	mov	r0, r3
 80079a4:	e7e6      	b.n	8007974 <SDMMC_CmdBlockLength+0x3c>
}
 80079a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079aa:	f7ff bf1d 	b.w	80077e8 <SDMMC_GetCmdResp1.part.2>
 80079ae:	bf00      	nop
 80079b0:	2000003c 	.word	0x2000003c
 80079b4:	fffee0c0 	.word	0xfffee0c0
 80079b8:	10624dd3 	.word	0x10624dd3

080079bc <SDMMC_CmdSelDesel>:
{
 80079bc:	b410      	push	{r4}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80079be:	4b1d      	ldr	r3, [pc, #116]	; (8007a34 <SDMMC_CmdSelDesel+0x78>)
  SDMMCx->ARG = Command->Argument;
 80079c0:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 80079c2:	68c4      	ldr	r4, [r0, #12]
 80079c4:	4a1c      	ldr	r2, [pc, #112]	; (8007a38 <SDMMC_CmdSelDesel+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80079c6:	491d      	ldr	r1, [pc, #116]	; (8007a3c <SDMMC_CmdSelDesel+0x80>)
 80079c8:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 80079ca:	4022      	ands	r2, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80079cc:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 80079d0:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80079d4:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 80079d6:	f042 0207 	orr.w	r2, r2, #7
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80079da:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 80079de:	60c2      	str	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80079e0:	fb03 f301 	mul.w	r3, r3, r1
 80079e4:	e003      	b.n	80079ee <SDMMC_CmdSelDesel+0x32>
  }while(!__SDMMC_GET_FLAG(SDMMCx, flags));
 80079e6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80079e8:	f012 0f45 	tst.w	r2, #69	; 0x45
 80079ec:	d107      	bne.n	80079fe <SDMMC_CmdSelDesel+0x42>
    if (count-- == 0U)
 80079ee:	f113 33ff 	adds.w	r3, r3, #4294967295
 80079f2:	d2f8      	bcs.n	80079e6 <SDMMC_CmdSelDesel+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 80079f4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80079f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079fc:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80079fe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007a00:	075a      	lsls	r2, r3, #29
 8007a02:	d505      	bpl.n	8007a10 <SDMMC_CmdSelDesel+0x54>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007a04:	2304      	movs	r3, #4
 8007a06:	6383      	str	r3, [r0, #56]	; 0x38
}
 8007a08:	f85d 4b04 	ldr.w	r4, [sp], #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007a0c:	4618      	mov	r0, r3
}
 8007a0e:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007a10:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007a12:	07db      	lsls	r3, r3, #31
 8007a14:	d405      	bmi.n	8007a22 <SDMMC_CmdSelDesel+0x66>
  return (uint8_t)(SDMMCx->RESPCMD);
 8007a16:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	2b07      	cmp	r3, #7
 8007a1c:	d005      	beq.n	8007a2a <SDMMC_CmdSelDesel+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a1e:	2001      	movs	r0, #1
  return errorstate;
 8007a20:	e7ea      	b.n	80079f8 <SDMMC_CmdSelDesel+0x3c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007a22:	2301      	movs	r3, #1
 8007a24:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a26:	4618      	mov	r0, r3
 8007a28:	e7e6      	b.n	80079f8 <SDMMC_CmdSelDesel+0x3c>
}
 8007a2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a2e:	f7ff bedb 	b.w	80077e8 <SDMMC_GetCmdResp1.part.2>
 8007a32:	bf00      	nop
 8007a34:	2000003c 	.word	0x2000003c
 8007a38:	fffee0c0 	.word	0xfffee0c0
 8007a3c:	10624dd3 	.word	0x10624dd3

08007a40 <SDMMC_CmdGoIdleState>:
  SDMMCx->ARG = Command->Argument;
 8007a40:	2200      	movs	r2, #0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a42:	4b12      	ldr	r3, [pc, #72]	; (8007a8c <SDMMC_CmdGoIdleState+0x4c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007a44:	4912      	ldr	r1, [pc, #72]	; (8007a90 <SDMMC_CmdGoIdleState+0x50>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a46:	681b      	ldr	r3, [r3, #0]
{
 8007a48:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 8007a4a:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007a4c:	68c4      	ldr	r4, [r0, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a4e:	4a11      	ldr	r2, [pc, #68]	; (8007a94 <SDMMC_CmdGoIdleState+0x54>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007a50:	4021      	ands	r1, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a52:	fba2 2303 	umull	r2, r3, r2, r3
 8007a56:	0a5a      	lsrs	r2, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007a58:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a5c:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007a60:	60c1      	str	r1, [r0, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a62:	fb03 f302 	mul.w	r3, r3, r2
 8007a66:	e002      	b.n	8007a6e <SDMMC_CmdGoIdleState+0x2e>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007a68:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007a6a:	0612      	lsls	r2, r2, #24
 8007a6c:	d407      	bmi.n	8007a7e <SDMMC_CmdGoIdleState+0x3e>
    if (count-- == 0U)
 8007a6e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007a72:	d2f9      	bcs.n	8007a68 <SDMMC_CmdGoIdleState+0x28>
      return SDMMC_ERROR_TIMEOUT;
 8007a74:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007a78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a7c:	4770      	bx	lr
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007a7e:	4b06      	ldr	r3, [pc, #24]	; (8007a98 <SDMMC_CmdGoIdleState+0x58>)
 8007a80:	6383      	str	r3, [r0, #56]	; 0x38
}
 8007a82:	f85d 4b04 	ldr.w	r4, [sp], #4
  return SDMMC_ERROR_NONE;
 8007a86:	2000      	movs	r0, #0
}
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	2000003c 	.word	0x2000003c
 8007a90:	fffee0c0 	.word	0xfffee0c0
 8007a94:	10624dd3 	.word	0x10624dd3
 8007a98:	002000c5 	.word	0x002000c5

08007a9c <SDMMC_CmdOperCond>:
  SDMMCx->ARG = Command->Argument;
 8007a9c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
{
 8007aa0:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 8007aa2:	6083      	str	r3, [r0, #8]
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007aa4:	4b1b      	ldr	r3, [pc, #108]	; (8007b14 <SDMMC_CmdOperCond+0x78>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007aa6:	68c4      	ldr	r4, [r0, #12]
 8007aa8:	4a1b      	ldr	r2, [pc, #108]	; (8007b18 <SDMMC_CmdOperCond+0x7c>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007aaa:	681b      	ldr	r3, [r3, #0]
{
 8007aac:	4601      	mov	r1, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007aae:	481b      	ldr	r0, [pc, #108]	; (8007b1c <SDMMC_CmdOperCond+0x80>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007ab0:	4022      	ands	r2, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007ab2:	fba0 0303 	umull	r0, r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007ab6:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007aba:	0a58      	lsrs	r0, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007abc:	f042 0208 	orr.w	r2, r2, #8
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007ac0:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007ac4:	60ca      	str	r2, [r1, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007ac6:	fb03 f300 	mul.w	r3, r3, r0
 8007aca:	e003      	b.n	8007ad4 <SDMMC_CmdOperCond+0x38>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007acc:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8007ace:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007ad2:	d107      	bne.n	8007ae4 <SDMMC_CmdOperCond+0x48>
    if (count-- == 0U)
 8007ad4:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007ad8:	d2f8      	bcs.n	8007acc <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8007ada:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007ade:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ae2:	4770      	bx	lr

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007ae4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8007ae6:	075b      	lsls	r3, r3, #29
 8007ae8:	d504      	bpl.n	8007af4 <SDMMC_CmdOperCond+0x58>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007aea:	2004      	movs	r0, #4
 8007aec:	6388      	str	r0, [r1, #56]	; 0x38
}
 8007aee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007af2:	4770      	bx	lr
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007af4:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8007af6:	f010 0001 	ands.w	r0, r0, #1
 8007afa:	d106      	bne.n	8007b0a <SDMMC_CmdOperCond+0x6e>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007afc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8007afe:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8007b02:	d005      	beq.n	8007b10 <SDMMC_CmdOperCond+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007b04:	2340      	movs	r3, #64	; 0x40
 8007b06:	638b      	str	r3, [r1, #56]	; 0x38
 8007b08:	e7e9      	b.n	8007ade <SDMMC_CmdOperCond+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007b0a:	2001      	movs	r0, #1
 8007b0c:	6388      	str	r0, [r1, #56]	; 0x38
 8007b0e:	e7e6      	b.n	8007ade <SDMMC_CmdOperCond+0x42>
  }
  
  return SDMMC_ERROR_NONE;
 8007b10:	4618      	mov	r0, r3
  return errorstate;
 8007b12:	e7e4      	b.n	8007ade <SDMMC_CmdOperCond+0x42>
 8007b14:	2000003c 	.word	0x2000003c
 8007b18:	fffee0c0 	.word	0xfffee0c0
 8007b1c:	10624dd3 	.word	0x10624dd3

08007b20 <SDMMC_CmdAppCommand>:
{
 8007b20:	b410      	push	{r4}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007b22:	4b1d      	ldr	r3, [pc, #116]	; (8007b98 <SDMMC_CmdAppCommand+0x78>)
  SDMMCx->ARG = Command->Argument;
 8007b24:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007b26:	68c4      	ldr	r4, [r0, #12]
 8007b28:	4a1c      	ldr	r2, [pc, #112]	; (8007b9c <SDMMC_CmdAppCommand+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007b2a:	491d      	ldr	r1, [pc, #116]	; (8007ba0 <SDMMC_CmdAppCommand+0x80>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007b2e:	4022      	ands	r2, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007b30:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007b34:	f442 5289 	orr.w	r2, r2, #4384	; 0x1120
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007b38:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007b3a:	f042 0217 	orr.w	r2, r2, #23
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007b3e:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007b42:	60c2      	str	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007b44:	fb03 f301 	mul.w	r3, r3, r1
 8007b48:	e003      	b.n	8007b52 <SDMMC_CmdAppCommand+0x32>
  }while(!__SDMMC_GET_FLAG(SDMMCx, flags));
 8007b4a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007b4c:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007b50:	d107      	bne.n	8007b62 <SDMMC_CmdAppCommand+0x42>
    if (count-- == 0U)
 8007b52:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007b56:	d2f8      	bcs.n	8007b4a <SDMMC_CmdAppCommand+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8007b58:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007b5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b60:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007b62:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007b64:	075a      	lsls	r2, r3, #29
 8007b66:	d505      	bpl.n	8007b74 <SDMMC_CmdAppCommand+0x54>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007b68:	2304      	movs	r3, #4
 8007b6a:	6383      	str	r3, [r0, #56]	; 0x38
}
 8007b6c:	f85d 4b04 	ldr.w	r4, [sp], #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007b70:	4618      	mov	r0, r3
}
 8007b72:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007b74:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007b76:	07db      	lsls	r3, r3, #31
 8007b78:	d405      	bmi.n	8007b86 <SDMMC_CmdAppCommand+0x66>
  return (uint8_t)(SDMMCx->RESPCMD);
 8007b7a:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	2b37      	cmp	r3, #55	; 0x37
 8007b80:	d005      	beq.n	8007b8e <SDMMC_CmdAppCommand+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b82:	2001      	movs	r0, #1
  return errorstate;
 8007b84:	e7ea      	b.n	8007b5c <SDMMC_CmdAppCommand+0x3c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007b86:	2301      	movs	r3, #1
 8007b88:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	e7e6      	b.n	8007b5c <SDMMC_CmdAppCommand+0x3c>
}
 8007b8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b92:	f7ff be29 	b.w	80077e8 <SDMMC_GetCmdResp1.part.2>
 8007b96:	bf00      	nop
 8007b98:	2000003c 	.word	0x2000003c
 8007b9c:	fffee0c0 	.word	0xfffee0c0
 8007ba0:	10624dd3 	.word	0x10624dd3

08007ba4 <SDMMC_CmdAppOperCommand>:
{
 8007ba4:	b410      	push	{r4}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007ba6:	4b16      	ldr	r3, [pc, #88]	; (8007c00 <SDMMC_CmdAppOperCommand+0x5c>)
  SDMMCx->ARG = Command->Argument;
 8007ba8:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007baa:	68c4      	ldr	r4, [r0, #12]
 8007bac:	4a15      	ldr	r2, [pc, #84]	; (8007c04 <SDMMC_CmdAppOperCommand+0x60>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007bae:	4916      	ldr	r1, [pc, #88]	; (8007c08 <SDMMC_CmdAppOperCommand+0x64>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007bb2:	4022      	ands	r2, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007bb4:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007bb8:	f442 5289 	orr.w	r2, r2, #4384	; 0x1120
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007bbc:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007bbe:	f042 0209 	orr.w	r2, r2, #9
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007bc2:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007bc6:	60c2      	str	r2, [r0, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007bc8:	fb03 f301 	mul.w	r3, r3, r1
 8007bcc:	e003      	b.n	8007bd6 <SDMMC_CmdAppOperCommand+0x32>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007bce:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007bd0:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007bd4:	d107      	bne.n	8007be6 <SDMMC_CmdAppOperCommand+0x42>
    if (count-- == 0U)
 8007bd6:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007bda:	d2f8      	bcs.n	8007bce <SDMMC_CmdAppOperCommand+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8007bdc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007be0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007be4:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007be6:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8007be8:	f85d 4b04 	ldr.w	r4, [sp], #4
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007bec:	f013 0304 	ands.w	r3, r3, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007bf0:	bf15      	itete	ne
 8007bf2:	2304      	movne	r3, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007bf4:	4a05      	ldreq	r2, [pc, #20]	; (8007c0c <SDMMC_CmdAppOperCommand+0x68>)
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007bf6:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007bf8:	6382      	streq	r2, [r0, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8007bfa:	4618      	mov	r0, r3
}
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	2000003c 	.word	0x2000003c
 8007c04:	fffee0c0 	.word	0xfffee0c0
 8007c08:	10624dd3 	.word	0x10624dd3
 8007c0c:	002000c5 	.word	0x002000c5

08007c10 <SDMMC_CmdBusWidth>:
 8007c10:	b410      	push	{r4}
 8007c12:	4b1d      	ldr	r3, [pc, #116]	; (8007c88 <SDMMC_CmdBusWidth+0x78>)
 8007c14:	6081      	str	r1, [r0, #8]
 8007c16:	68c4      	ldr	r4, [r0, #12]
 8007c18:	4a1c      	ldr	r2, [pc, #112]	; (8007c8c <SDMMC_CmdBusWidth+0x7c>)
 8007c1a:	491d      	ldr	r1, [pc, #116]	; (8007c90 <SDMMC_CmdBusWidth+0x80>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4022      	ands	r2, r4
 8007c20:	fba1 1303 	umull	r1, r3, r1, r3
 8007c24:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 8007c28:	0a59      	lsrs	r1, r3, #9
 8007c2a:	f042 0206 	orr.w	r2, r2, #6
 8007c2e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c32:	60c2      	str	r2, [r0, #12]
 8007c34:	fb03 f301 	mul.w	r3, r3, r1
 8007c38:	e003      	b.n	8007c42 <SDMMC_CmdBusWidth+0x32>
 8007c3a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007c3c:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007c40:	d107      	bne.n	8007c52 <SDMMC_CmdBusWidth+0x42>
 8007c42:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007c46:	d2f8      	bcs.n	8007c3a <SDMMC_CmdBusWidth+0x2a>
 8007c48:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8007c4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c50:	4770      	bx	lr
 8007c52:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007c54:	075a      	lsls	r2, r3, #29
 8007c56:	d505      	bpl.n	8007c64 <SDMMC_CmdBusWidth+0x54>
 8007c58:	2304      	movs	r3, #4
 8007c5a:	6383      	str	r3, [r0, #56]	; 0x38
 8007c5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c60:	4618      	mov	r0, r3
 8007c62:	4770      	bx	lr
 8007c64:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007c66:	07db      	lsls	r3, r3, #31
 8007c68:	d405      	bmi.n	8007c76 <SDMMC_CmdBusWidth+0x66>
 8007c6a:	6903      	ldr	r3, [r0, #16]
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	2b06      	cmp	r3, #6
 8007c70:	d005      	beq.n	8007c7e <SDMMC_CmdBusWidth+0x6e>
 8007c72:	2001      	movs	r0, #1
 8007c74:	e7ea      	b.n	8007c4c <SDMMC_CmdBusWidth+0x3c>
 8007c76:	2301      	movs	r3, #1
 8007c78:	6383      	str	r3, [r0, #56]	; 0x38
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	e7e6      	b.n	8007c4c <SDMMC_CmdBusWidth+0x3c>
 8007c7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c82:	f7ff bdb1 	b.w	80077e8 <SDMMC_GetCmdResp1.part.2>
 8007c86:	bf00      	nop
 8007c88:	2000003c 	.word	0x2000003c
 8007c8c:	fffee0c0 	.word	0xfffee0c0
 8007c90:	10624dd3 	.word	0x10624dd3

08007c94 <SDMMC_CmdSendSCR>:
  SDMMCx->ARG = Command->Argument;
 8007c94:	2300      	movs	r3, #0
{
 8007c96:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 8007c98:	6083      	str	r3, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007c9a:	4b1c      	ldr	r3, [pc, #112]	; (8007d0c <SDMMC_CmdSendSCR+0x78>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007c9c:	68c4      	ldr	r4, [r0, #12]
 8007c9e:	4a1c      	ldr	r2, [pc, #112]	; (8007d10 <SDMMC_CmdSendSCR+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007ca0:	491c      	ldr	r1, [pc, #112]	; (8007d14 <SDMMC_CmdSendSCR+0x80>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007ca4:	4022      	ands	r2, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007ca6:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007caa:	f442 5289 	orr.w	r2, r2, #4384	; 0x1120
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007cae:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007cb0:	f042 0213 	orr.w	r2, r2, #19
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007cb4:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007cb8:	60c2      	str	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007cba:	fb03 f301 	mul.w	r3, r3, r1
 8007cbe:	e003      	b.n	8007cc8 <SDMMC_CmdSendSCR+0x34>
  }while(!__SDMMC_GET_FLAG(SDMMCx, flags));
 8007cc0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007cc2:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007cc6:	d107      	bne.n	8007cd8 <SDMMC_CmdSendSCR+0x44>
    if (count-- == 0U)
 8007cc8:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007ccc:	d2f8      	bcs.n	8007cc0 <SDMMC_CmdSendSCR+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8007cce:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007cd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cd6:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007cd8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007cda:	075a      	lsls	r2, r3, #29
 8007cdc:	d505      	bpl.n	8007cea <SDMMC_CmdSendSCR+0x56>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007cde:	2304      	movs	r3, #4
 8007ce0:	6383      	str	r3, [r0, #56]	; 0x38
}
 8007ce2:	f85d 4b04 	ldr.w	r4, [sp], #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007ce6:	4618      	mov	r0, r3
}
 8007ce8:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007cea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007cec:	07db      	lsls	r3, r3, #31
 8007cee:	d405      	bmi.n	8007cfc <SDMMC_CmdSendSCR+0x68>
  return (uint8_t)(SDMMCx->RESPCMD);
 8007cf0:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	2b33      	cmp	r3, #51	; 0x33
 8007cf6:	d005      	beq.n	8007d04 <SDMMC_CmdSendSCR+0x70>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007cf8:	2001      	movs	r0, #1
  return errorstate;
 8007cfa:	e7ea      	b.n	8007cd2 <SDMMC_CmdSendSCR+0x3e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007d00:	4618      	mov	r0, r3
 8007d02:	e7e6      	b.n	8007cd2 <SDMMC_CmdSendSCR+0x3e>
}
 8007d04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d08:	f7ff bd6e 	b.w	80077e8 <SDMMC_GetCmdResp1.part.2>
 8007d0c:	2000003c 	.word	0x2000003c
 8007d10:	fffee0c0 	.word	0xfffee0c0
 8007d14:	10624dd3 	.word	0x10624dd3

08007d18 <SDMMC_CmdSendCID>:
  SDMMCx->ARG = Command->Argument;
 8007d18:	2300      	movs	r3, #0
{
 8007d1a:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 8007d1c:	6083      	str	r3, [r0, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d1e:	4b1a      	ldr	r3, [pc, #104]	; (8007d88 <SDMMC_CmdSendCID+0x70>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007d20:	68c4      	ldr	r4, [r0, #12]
 8007d22:	4a1a      	ldr	r2, [pc, #104]	; (8007d8c <SDMMC_CmdSendCID+0x74>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d24:	491a      	ldr	r1, [pc, #104]	; (8007d90 <SDMMC_CmdSendCID+0x78>)
 8007d26:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007d28:	4022      	ands	r2, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d2a:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007d2e:	f442 5298 	orr.w	r2, r2, #4864	; 0x1300
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d32:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007d34:	f042 0202 	orr.w	r2, r2, #2
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d38:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007d3c:	60c2      	str	r2, [r0, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d3e:	fb03 f301 	mul.w	r3, r3, r1
 8007d42:	e003      	b.n	8007d4c <SDMMC_CmdSendCID+0x34>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007d44:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007d46:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007d4a:	d107      	bne.n	8007d5c <SDMMC_CmdSendCID+0x44>
    if (count-- == 0U)
 8007d4c:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007d50:	d2f8      	bcs.n	8007d44 <SDMMC_CmdSendCID+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8007d52:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007d56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d5a:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007d5c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007d5e:	075b      	lsls	r3, r3, #29
 8007d60:	d505      	bpl.n	8007d6e <SDMMC_CmdSendCID+0x56>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007d62:	2304      	movs	r3, #4
 8007d64:	6383      	str	r3, [r0, #56]	; 0x38
}
 8007d66:	f85d 4b04 	ldr.w	r4, [sp], #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007d6a:	4618      	mov	r0, r3
}
 8007d6c:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007d6e:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8007d70:	f85d 4b04 	ldr.w	r4, [sp], #4
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007d74:	f013 0301 	ands.w	r3, r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007d78:	bf15      	itete	ne
 8007d7a:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007d7c:	4a05      	ldreq	r2, [pc, #20]	; (8007d94 <SDMMC_CmdSendCID+0x7c>)
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007d7e:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007d80:	6382      	streq	r2, [r0, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8007d82:	4618      	mov	r0, r3
}
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop
 8007d88:	2000003c 	.word	0x2000003c
 8007d8c:	fffee0c0 	.word	0xfffee0c0
 8007d90:	10624dd3 	.word	0x10624dd3
 8007d94:	002000c5 	.word	0x002000c5

08007d98 <SDMMC_CmdSendCSD>:
{
 8007d98:	b410      	push	{r4}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d9a:	4b1a      	ldr	r3, [pc, #104]	; (8007e04 <SDMMC_CmdSendCSD+0x6c>)
  SDMMCx->ARG = Command->Argument;
 8007d9c:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007d9e:	68c4      	ldr	r4, [r0, #12]
 8007da0:	4a19      	ldr	r2, [pc, #100]	; (8007e08 <SDMMC_CmdSendCSD+0x70>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007da2:	491a      	ldr	r1, [pc, #104]	; (8007e0c <SDMMC_CmdSendCSD+0x74>)
 8007da4:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007da6:	4022      	ands	r2, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007da8:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007dac:	f442 5298 	orr.w	r2, r2, #4864	; 0x1300
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007db0:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007db2:	f042 0209 	orr.w	r2, r2, #9
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007db6:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007dba:	60c2      	str	r2, [r0, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007dbc:	fb03 f301 	mul.w	r3, r3, r1
 8007dc0:	e003      	b.n	8007dca <SDMMC_CmdSendCSD+0x32>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007dc2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007dc4:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007dc8:	d107      	bne.n	8007dda <SDMMC_CmdSendCSD+0x42>
    if (count-- == 0U)
 8007dca:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007dce:	d2f8      	bcs.n	8007dc2 <SDMMC_CmdSendCSD+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8007dd0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007dd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dd8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007dda:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007ddc:	075b      	lsls	r3, r3, #29
 8007dde:	d505      	bpl.n	8007dec <SDMMC_CmdSendCSD+0x54>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007de0:	2304      	movs	r3, #4
 8007de2:	6383      	str	r3, [r0, #56]	; 0x38
}
 8007de4:	f85d 4b04 	ldr.w	r4, [sp], #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007de8:	4618      	mov	r0, r3
}
 8007dea:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007dec:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8007dee:	f85d 4b04 	ldr.w	r4, [sp], #4
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007df2:	f013 0301 	ands.w	r3, r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007df6:	bf15      	itete	ne
 8007df8:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007dfa:	4a05      	ldreq	r2, [pc, #20]	; (8007e10 <SDMMC_CmdSendCSD+0x78>)
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007dfc:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007dfe:	6382      	streq	r2, [r0, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8007e00:	4618      	mov	r0, r3
}
 8007e02:	4770      	bx	lr
 8007e04:	2000003c 	.word	0x2000003c
 8007e08:	fffee0c0 	.word	0xfffee0c0
 8007e0c:	10624dd3 	.word	0x10624dd3
 8007e10:	002000c5 	.word	0x002000c5

08007e14 <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
 8007e14:	2300      	movs	r3, #0
{
 8007e16:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8007e18:	6083      	str	r3, [r0, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e1a:	4b24      	ldr	r3, [pc, #144]	; (8007eac <SDMMC_CmdSetRelAdd+0x98>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007e1c:	68c5      	ldr	r5, [r0, #12]
 8007e1e:	4a24      	ldr	r2, [pc, #144]	; (8007eb0 <SDMMC_CmdSetRelAdd+0x9c>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e20:	4c24      	ldr	r4, [pc, #144]	; (8007eb4 <SDMMC_CmdSetRelAdd+0xa0>)
 8007e22:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007e24:	402a      	ands	r2, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e26:	fba4 4303 	umull	r4, r3, r4, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007e2a:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e2e:	0a5c      	lsrs	r4, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007e30:	f042 0203 	orr.w	r2, r2, #3
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e34:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007e38:	60c2      	str	r2, [r0, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e3a:	fb03 f304 	mul.w	r3, r3, r4
 8007e3e:	e003      	b.n	8007e48 <SDMMC_CmdSetRelAdd+0x34>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007e40:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007e42:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007e46:	d106      	bne.n	8007e56 <SDMMC_CmdSetRelAdd+0x42>
    if (count-- == 0U)
 8007e48:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007e4c:	d2f8      	bcs.n	8007e40 <SDMMC_CmdSetRelAdd+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8007e4e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007e52:	bc30      	pop	{r4, r5}
 8007e54:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007e56:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007e58:	075d      	lsls	r5, r3, #29
 8007e5a:	d504      	bpl.n	8007e66 <SDMMC_CmdSetRelAdd+0x52>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007e5c:	2304      	movs	r3, #4
 8007e5e:	6383      	str	r3, [r0, #56]	; 0x38
}
 8007e60:	bc30      	pop	{r4, r5}
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007e62:	4618      	mov	r0, r3
}
 8007e64:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007e66:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007e68:	07dc      	lsls	r4, r3, #31
 8007e6a:	d405      	bmi.n	8007e78 <SDMMC_CmdSetRelAdd+0x64>
  return (uint8_t)(SDMMCx->RESPCMD);
 8007e6c:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	2b03      	cmp	r3, #3
 8007e72:	d005      	beq.n	8007e80 <SDMMC_CmdSetRelAdd+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e74:	2001      	movs	r0, #1
 8007e76:	e7ec      	b.n	8007e52 <SDMMC_CmdSetRelAdd+0x3e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007e78:	2301      	movs	r3, #1
 8007e7a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	e7e8      	b.n	8007e52 <SDMMC_CmdSetRelAdd+0x3e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007e80:	4b0d      	ldr	r3, [pc, #52]	; (8007eb8 <SDMMC_CmdSetRelAdd+0xa4>)
 8007e82:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8007e84:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007e86:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8007e8a:	d004      	beq.n	8007e96 <SDMMC_CmdSetRelAdd+0x82>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007e8c:	045a      	lsls	r2, r3, #17
 8007e8e:	d505      	bpl.n	8007e9c <SDMMC_CmdSetRelAdd+0x88>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007e90:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007e94:	e7dd      	b.n	8007e52 <SDMMC_CmdSetRelAdd+0x3e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007e96:	0c1b      	lsrs	r3, r3, #16
 8007e98:	800b      	strh	r3, [r1, #0]
 8007e9a:	e7da      	b.n	8007e52 <SDMMC_CmdSetRelAdd+0x3e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007e9c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8007ea0:	bf14      	ite	ne
 8007ea2:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8007ea6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8007eaa:	e7d2      	b.n	8007e52 <SDMMC_CmdSetRelAdd+0x3e>
 8007eac:	2000003c 	.word	0x2000003c
 8007eb0:	fffee0c0 	.word	0xfffee0c0
 8007eb4:	10624dd3 	.word	0x10624dd3
 8007eb8:	002000c5 	.word	0x002000c5

08007ebc <SDMMC_CmdSwitch>:
{
 8007ebc:	b410      	push	{r4}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007ebe:	4b1d      	ldr	r3, [pc, #116]	; (8007f34 <SDMMC_CmdSwitch+0x78>)
  SDMMCx->ARG = Command->Argument;
 8007ec0:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007ec2:	68c4      	ldr	r4, [r0, #12]
 8007ec4:	4a1c      	ldr	r2, [pc, #112]	; (8007f38 <SDMMC_CmdSwitch+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007ec6:	491d      	ldr	r1, [pc, #116]	; (8007f3c <SDMMC_CmdSwitch+0x80>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007eca:	4022      	ands	r2, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007ecc:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007ed0:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007ed4:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007ed6:	f042 0206 	orr.w	r2, r2, #6
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007eda:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007ede:	60c2      	str	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007ee0:	fb03 f301 	mul.w	r3, r3, r1
 8007ee4:	e003      	b.n	8007eee <SDMMC_CmdSwitch+0x32>
  }while(!__SDMMC_GET_FLAG(SDMMCx, flags));
 8007ee6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007ee8:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007eec:	d107      	bne.n	8007efe <SDMMC_CmdSwitch+0x42>
    if (count-- == 0U)
 8007eee:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007ef2:	d2f8      	bcs.n	8007ee6 <SDMMC_CmdSwitch+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8007ef4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007efc:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007efe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007f00:	075a      	lsls	r2, r3, #29
 8007f02:	d505      	bpl.n	8007f10 <SDMMC_CmdSwitch+0x54>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007f04:	2304      	movs	r3, #4
 8007f06:	6383      	str	r3, [r0, #56]	; 0x38
}
 8007f08:	f85d 4b04 	ldr.w	r4, [sp], #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007f0c:	4618      	mov	r0, r3
}
 8007f0e:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007f10:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007f12:	07db      	lsls	r3, r3, #31
 8007f14:	d405      	bmi.n	8007f22 <SDMMC_CmdSwitch+0x66>
  return (uint8_t)(SDMMCx->RESPCMD);
 8007f16:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	2b06      	cmp	r3, #6
 8007f1c:	d005      	beq.n	8007f2a <SDMMC_CmdSwitch+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f1e:	2001      	movs	r0, #1
  return errorstate;
 8007f20:	e7ea      	b.n	8007ef8 <SDMMC_CmdSwitch+0x3c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007f22:	2301      	movs	r3, #1
 8007f24:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f26:	4618      	mov	r0, r3
 8007f28:	e7e6      	b.n	8007ef8 <SDMMC_CmdSwitch+0x3c>
}
 8007f2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f2e:	f7ff bc5b 	b.w	80077e8 <SDMMC_GetCmdResp1.part.2>
 8007f32:	bf00      	nop
 8007f34:	2000003c 	.word	0x2000003c
 8007f38:	fffee0c0 	.word	0xfffee0c0
 8007f3c:	10624dd3 	.word	0x10624dd3

08007f40 <SDMMC_CmdVoltageSwitch>:
  SDMMCx->ARG = Command->Argument;
 8007f40:	2300      	movs	r3, #0
{
 8007f42:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 8007f44:	6083      	str	r3, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007f46:	4b1c      	ldr	r3, [pc, #112]	; (8007fb8 <SDMMC_CmdVoltageSwitch+0x78>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007f48:	68c4      	ldr	r4, [r0, #12]
 8007f4a:	4a1c      	ldr	r2, [pc, #112]	; (8007fbc <SDMMC_CmdVoltageSwitch+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007f4c:	491c      	ldr	r1, [pc, #112]	; (8007fc0 <SDMMC_CmdVoltageSwitch+0x80>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007f50:	4022      	ands	r2, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007f52:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007f56:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007f5a:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007f5c:	f042 020b 	orr.w	r2, r2, #11
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007f60:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007f64:	60c2      	str	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007f66:	fb03 f301 	mul.w	r3, r3, r1
 8007f6a:	e003      	b.n	8007f74 <SDMMC_CmdVoltageSwitch+0x34>
  }while(!__SDMMC_GET_FLAG(SDMMCx, flags));
 8007f6c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007f6e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007f72:	d107      	bne.n	8007f84 <SDMMC_CmdVoltageSwitch+0x44>
    if (count-- == 0U)
 8007f74:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007f78:	d2f8      	bcs.n	8007f6c <SDMMC_CmdVoltageSwitch+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8007f7a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007f7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f82:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007f84:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007f86:	075a      	lsls	r2, r3, #29
 8007f88:	d505      	bpl.n	8007f96 <SDMMC_CmdVoltageSwitch+0x56>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007f8a:	2304      	movs	r3, #4
 8007f8c:	6383      	str	r3, [r0, #56]	; 0x38
}
 8007f8e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007f92:	4618      	mov	r0, r3
}
 8007f94:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007f96:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007f98:	07db      	lsls	r3, r3, #31
 8007f9a:	d405      	bmi.n	8007fa8 <SDMMC_CmdVoltageSwitch+0x68>
  return (uint8_t)(SDMMCx->RESPCMD);
 8007f9c:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	2b0b      	cmp	r3, #11
 8007fa2:	d005      	beq.n	8007fb0 <SDMMC_CmdVoltageSwitch+0x70>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007fa4:	2001      	movs	r0, #1
  return errorstate;
 8007fa6:	e7ea      	b.n	8007f7e <SDMMC_CmdVoltageSwitch+0x3e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007fa8:	2301      	movs	r3, #1
 8007faa:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007fac:	4618      	mov	r0, r3
 8007fae:	e7e6      	b.n	8007f7e <SDMMC_CmdVoltageSwitch+0x3e>
}
 8007fb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fb4:	f7ff bc18 	b.w	80077e8 <SDMMC_GetCmdResp1.part.2>
 8007fb8:	2000003c 	.word	0x2000003c
 8007fbc:	fffee0c0 	.word	0xfffee0c0
 8007fc0:	10624dd3 	.word	0x10624dd3

08007fc4 <VL53L1_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 8007fc4:	b570      	push	{r4, r5, r6, lr}
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
		Status = VL53L1_data_init(Dev, 1);
 8007fc6:	2101      	movs	r1, #1
{
 8007fc8:	4604      	mov	r4, r0
		Status = VL53L1_data_init(Dev, 1);
 8007fca:	f000 fc0f 	bl	80087ec <VL53L1_data_init>

	if (Status == VL53L1_ERROR_NONE) {
 8007fce:	4606      	mov	r6, r0
 8007fd0:	bb38      	cbnz	r0, 8008022 <VL53L1_DataInit+0x5e>

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 8007fd2:	f8d4 1388 	ldr.w	r1, [r4, #904]	; 0x388
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 8007fd6:	2308      	movs	r3, #8
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8007fd8:	2501      	movs	r5, #1
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 8007fda:	f884 337c 	strb.w	r3, [r4, #892]	; 0x37c
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8007fde:	f3c1 318f 	ubfx	r1, r1, #14, #16
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8007fe2:	f884 5378 	strb.w	r5, [r4, #888]	; 0x378
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f000 fee8 	bl	8008dbc <VL53L1_set_lite_sigma_threshold>
		break;
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 8007fec:	f8d4 138c 	ldr.w	r1, [r4, #908]	; 0x38c

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
	}

	if (Status == VL53L1_ERROR_NONE)
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8007ff0:	f884 5384 	strb.w	r5, [r4, #900]	; 0x384
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 8007ff4:	f3c1 214f 	ubfx	r1, r1, #9, #16
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	f000 fee9 	bl	8008dd0 <VL53L1_set_lite_min_count_rate>

		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
				LimitCheckId,
				LimitChecksEnable);

		if (LimitChecksEnable == 0) {
 8007ffe:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008002:	f884 5385 	strb.w	r5, [r4, #901]	; 0x385
		if (LimitChecksEnable == 0) {
 8008006:	b973      	cbnz	r3, 8008026 <VL53L1_DataInit+0x62>
			/* disabled write only internal value */
			VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008008:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800800c:	f8c4 3388 	str.w	r3, [r4, #904]	; 0x388
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 8008010:	2120      	movs	r1, #32
 8008012:	4620      	mov	r0, r4
 8008014:	f000 fedc 	bl	8008dd0 <VL53L1_set_lite_min_count_rate>

			Status = SetLimitValue(Dev, LimitCheckId,
					LimitCheckValue);

			if (Status == VL53L1_ERROR_NONE) {
				VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008018:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800801c:	f8c4 338c 	str.w	r3, [r4, #908]	; 0x38c
			Status = SetLimitValue(Dev, LimitCheckId,
 8008020:	2600      	movs	r6, #0
}
 8008022:	4630      	mov	r0, r6
 8008024:	bd70      	pop	{r4, r5, r6, pc}
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8008026:	2148      	movs	r1, #72	; 0x48
 8008028:	4620      	mov	r0, r4
 800802a:	f000 fec7 	bl	8008dbc <VL53L1_set_lite_sigma_threshold>
		if (LimitChecksEnable == 0) {
 800802e:	f894 3385 	ldrb.w	r3, [r4, #901]	; 0x385
				VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008032:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8008036:	f8c4 2388 	str.w	r2, [r4, #904]	; 0x388
		if (LimitChecksEnable == 0) {
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1e8      	bne.n	8008010 <VL53L1_DataInit+0x4c>
			VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800803e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008042:	f8c4 338c 	str.w	r3, [r4, #908]	; 0x38c
}
 8008046:	4630      	mov	r0, r6
 8008048:	bd70      	pop	{r4, r5, r6, pc}
 800804a:	bf00      	nop

0800804c <VL53L1_WaitDeviceBooted>:
	Status = VL53L1_poll_for_boot_completion(Dev,
 800804c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008050:	f003 bc36 	b.w	800b8c0 <VL53L1_poll_for_boot_completion>

08008054 <VL53L1_SetDistanceMode>:
{
 8008054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8008058:	1e4b      	subs	r3, r1, #1
 800805a:	b2db      	uxtb	r3, r3
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 800805c:	2b02      	cmp	r3, #2
{
 800805e:	b08c      	sub	sp, #48	; 0x30
	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8008060:	f890 637c 	ldrb.w	r6, [r0, #892]	; 0x37c
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 8008064:	f200 80e3 	bhi.w	800822e <VL53L1_SetDistanceMode+0x1da>
		if ((DistanceMode == VL53L1_DISTANCEMODE_SHORT) ||
 8008068:	bf18      	it	ne
 800806a:	460f      	movne	r7, r1
 800806c:	460d      	mov	r5, r1
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 800806e:	a908      	add	r1, sp, #32
			InternalDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8008070:	bf08      	it	eq
 8008072:	2703      	moveq	r7, #3
 8008074:	4604      	mov	r4, r0
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 8008076:	f000 fd73 	bl	8008b60 <VL53L1_get_user_zone>
	if (Status == VL53L1_ERROR_NONE)
 800807a:	b110      	cbz	r0, 8008082 <VL53L1_SetDistanceMode+0x2e>
}
 800807c:	b00c      	add	sp, #48	; 0x30
 800807e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8008082:	ab05      	add	r3, sp, #20
 8008084:	aa06      	add	r2, sp, #24
 8008086:	a907      	add	r1, sp, #28
 8008088:	4620      	mov	r0, r4
	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 800808a:	f8d4 8014 	ldr.w	r8, [r4, #20]
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 800808e:	f000 fd07 	bl	8008aa0 <VL53L1_get_timeouts_us>
	if (Status == VL53L1_ERROR_NONE)
 8008092:	2800      	cmp	r0, #0
 8008094:	d1f2      	bne.n	800807c <VL53L1_SetDistanceMode+0x28>
	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8008096:	2e03      	cmp	r6, #3
	VL53L1_DevicePresetModes LightModes[3] = {
 8008098:	f04f 0102 	mov.w	r1, #2
	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800809c:	f000 808d 	beq.w	80081ba <VL53L1_SetDistanceMode+0x166>
 80080a0:	2e08      	cmp	r6, #8
	VL53L1_DevicePresetModes LightModes[3] = {
 80080a2:	f04f 0301 	mov.w	r3, #1
 80080a6:	f04f 0203 	mov.w	r2, #3
	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 80080aa:	d02e      	beq.n	800810a <VL53L1_SetDistanceMode+0xb6>
	VL53L1_DevicePresetModes LightModes[3] = {
 80080ac:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80080b0:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
	VL53L1_DevicePresetModes TimedModes[3] = {
 80080b4:	2107      	movs	r1, #7
 80080b6:	2206      	movs	r2, #6
 80080b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080bc:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
 80080c0:	2108      	movs	r1, #8
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 80080c2:	2224      	movs	r2, #36	; 0x24
	VL53L1_DevicePresetModes TimedModes[3] = {
 80080c4:	f88d 102a 	strb.w	r1, [sp, #42]	; 0x2a
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 80080c8:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 80080cc:	2125      	movs	r1, #37	; 0x25
 80080ce:	2226      	movs	r2, #38	; 0x26
	switch (DistanceMode) {
 80080d0:	429f      	cmp	r7, r3
	VL53L1_DevicePresetModes LightModes[3] = {
 80080d2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 80080d6:	f88d 102d 	strb.w	r1, [sp, #45]	; 0x2d
 80080da:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
	switch (DistanceMode) {
 80080de:	f000 809e 	beq.w	800821e <VL53L1_SetDistanceMode+0x1ca>
 80080e2:	2f02      	cmp	r7, #2
 80080e4:	f000 808a 	beq.w	80081fc <VL53L1_SetDistanceMode+0x1a8>
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 80080e8:	f04f 0920 	mov.w	r9, #32
 80080ec:	2302      	movs	r3, #2
	switch (PresetMode) {
 80080ee:	2e04      	cmp	r6, #4
 80080f0:	f000 808b 	beq.w	800820a <VL53L1_SetDistanceMode+0x1b6>
 80080f4:	2e08      	cmp	r6, #8
 80080f6:	f000 808d 	beq.w	8008214 <VL53L1_SetDistanceMode+0x1c0>
 80080fa:	2e03      	cmp	r6, #3
 80080fc:	f000 8092 	beq.w	8008224 <VL53L1_SetDistanceMode+0x1d0>
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8008100:	f06f 0007 	mvn.w	r0, #7
}
 8008104:	b00c      	add	sp, #48	; 0x30
 8008106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	VL53L1_DevicePresetModes LightModes[3] = {
 800810a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	VL53L1_DevicePresetModes TimedModes[3] = {
 800810e:	2306      	movs	r3, #6
	VL53L1_DevicePresetModes LightModes[3] = {
 8008110:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8008114:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
	VL53L1_DevicePresetModes TimedModes[3] = {
 8008118:	2107      	movs	r1, #7
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 800811a:	2224      	movs	r2, #36	; 0x24
 800811c:	f04f 0a25 	mov.w	sl, #37	; 0x25
	VL53L1_DevicePresetModes TimedModes[3] = {
 8008120:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
	switch (DistanceMode) {
 8008124:	2f01      	cmp	r7, #1
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8008126:	f04f 0326 	mov.w	r3, #38	; 0x26
	VL53L1_DevicePresetModes TimedModes[3] = {
 800812a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800812e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8008132:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8008136:	f88d a02d 	strb.w	sl, [sp, #45]	; 0x2d
 800813a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	switch (DistanceMode) {
 800813e:	d060      	beq.n	8008202 <VL53L1_SetDistanceMode+0x1ae>
 8008140:	2f02      	cmp	r7, #2
 8008142:	d158      	bne.n	80081f6 <VL53L1_SetDistanceMode+0x1a2>
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8008144:	f04f 0940 	mov.w	r9, #64	; 0x40
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8008148:	aa0b      	add	r2, sp, #44	; 0x2c
 800814a:	ab0a      	add	r3, sp, #40	; 0x28
 800814c:	9201      	str	r2, [sp, #4]
 800814e:	9300      	str	r3, [sp, #0]
 8008150:	f10d 0212 	add.w	r2, sp, #18
 8008154:	ab09      	add	r3, sp, #36	; 0x24
 8008156:	4651      	mov	r1, sl
 8008158:	4620      	mov	r0, r4
 800815a:	f000 fd13 	bl	8008b84 <VL53L1_get_preset_mode_timing_cfg>
	if (Status == VL53L1_ERROR_NONE)
 800815e:	2800      	cmp	r0, #0
 8008160:	d18c      	bne.n	800807c <VL53L1_SetDistanceMode+0x28>
		Status = VL53L1_set_preset_mode(
 8008162:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008164:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008166:	9101      	str	r1, [sp, #4]
 8008168:	9000      	str	r0, [sp, #0]
 800816a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800816c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8008170:	f8cd 8008 	str.w	r8, [sp, #8]
 8008174:	4651      	mov	r1, sl
 8008176:	4620      	mov	r0, r4
 8008178:	f000 fd58 	bl	8008c2c <VL53L1_set_preset_mode>
	if (Status == VL53L1_ERROR_NONE)
 800817c:	2800      	cmp	r0, #0
 800817e:	f47f af7d 	bne.w	800807c <VL53L1_SetDistanceMode+0x28>
		VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8008182:	f884 9002 	strb.w	r9, [r4, #2]
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8008186:	f884 637c 	strb.w	r6, [r4, #892]	; 0x37c
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 800818a:	f884 737e 	strb.w	r7, [r4, #894]	; 0x37e
		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 800818e:	f884 737f 	strb.w	r7, [r4, #895]	; 0x37f
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8008192:	f884 537d 	strb.w	r5, [r4, #893]	; 0x37d
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8008196:	9b05      	ldr	r3, [sp, #20]
 8008198:	9a06      	ldr	r2, [sp, #24]
 800819a:	9907      	ldr	r1, [sp, #28]
 800819c:	4620      	mov	r0, r4
 800819e:	f000 fc59 	bl	8008a54 <VL53L1_set_timeouts_us>
		if (Status == VL53L1_ERROR_NONE)
 80081a2:	2800      	cmp	r0, #0
 80081a4:	f47f af6a 	bne.w	800807c <VL53L1_SetDistanceMode+0x28>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 80081a8:	9b05      	ldr	r3, [sp, #20]
 80081aa:	6123      	str	r3, [r4, #16]
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 80081ac:	a908      	add	r1, sp, #32
 80081ae:	4620      	mov	r0, r4
 80081b0:	f000 fcc4 	bl	8008b3c <VL53L1_set_user_zone>
}
 80081b4:	b00c      	add	sp, #48	; 0x30
 80081b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	VL53L1_DevicePresetModes LightModes[3] = {
 80081ba:	2201      	movs	r2, #1
	VL53L1_DevicePresetModes TimedModes[3] = {
 80081bc:	2307      	movs	r3, #7
	VL53L1_DevicePresetModes LightModes[3] = {
 80081be:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
	VL53L1_DevicePresetModes TimedModes[3] = {
 80081c2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80081c6:	2208      	movs	r2, #8
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 80081c8:	2324      	movs	r3, #36	; 0x24
	VL53L1_DevicePresetModes TimedModes[3] = {
 80081ca:	f04f 0a06 	mov.w	sl, #6
 80081ce:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 80081d2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80081d6:	2225      	movs	r2, #37	; 0x25
 80081d8:	2326      	movs	r3, #38	; 0x26
	switch (DistanceMode) {
 80081da:	2f01      	cmp	r7, #1
	VL53L1_DevicePresetModes LightModes[3] = {
 80081dc:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
 80081e0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
	VL53L1_DevicePresetModes TimedModes[3] = {
 80081e4:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 80081e8:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
 80081ec:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	switch (DistanceMode) {
 80081f0:	d007      	beq.n	8008202 <VL53L1_SetDistanceMode+0x1ae>
 80081f2:	428f      	cmp	r7, r1
 80081f4:	d0a6      	beq.n	8008144 <VL53L1_SetDistanceMode+0xf0>
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 80081f6:	f04f 0940 	mov.w	r9, #64	; 0x40
 80081fa:	e777      	b.n	80080ec <VL53L1_SetDistanceMode+0x98>
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 80081fc:	f04f 0920 	mov.w	r9, #32
 8008200:	e775      	b.n	80080ee <VL53L1_SetDistanceMode+0x9a>
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8008202:	f04f 0940 	mov.w	r9, #64	; 0x40
 8008206:	2300      	movs	r3, #0
 8008208:	e771      	b.n	80080ee <VL53L1_SetDistanceMode+0x9a>
		*pDevicePresetMode = LightModes[DistIdx];
 800820a:	aa0c      	add	r2, sp, #48	; 0x30
 800820c:	4413      	add	r3, r2
 800820e:	f813 ac0c 	ldrb.w	sl, [r3, #-12]
 8008212:	e799      	b.n	8008148 <VL53L1_SetDistanceMode+0xf4>
 8008214:	aa0c      	add	r2, sp, #48	; 0x30
 8008216:	4413      	add	r3, r2
 8008218:	f813 ac04 	ldrb.w	sl, [r3, #-4]
 800821c:	e794      	b.n	8008148 <VL53L1_SetDistanceMode+0xf4>
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 800821e:	f04f 0920 	mov.w	r9, #32
 8008222:	e7f0      	b.n	8008206 <VL53L1_SetDistanceMode+0x1b2>
 8008224:	aa0c      	add	r2, sp, #48	; 0x30
 8008226:	4413      	add	r3, r2
 8008228:	f813 ac08 	ldrb.w	sl, [r3, #-8]
 800822c:	e78c      	b.n	8008148 <VL53L1_SetDistanceMode+0xf4>
		return VL53L1_ERROR_INVALID_PARAMS;
 800822e:	f06f 0003 	mvn.w	r0, #3
 8008232:	e723      	b.n	800807c <VL53L1_SetDistanceMode+0x28>

08008234 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8008234:	4b3e      	ldr	r3, [pc, #248]	; (8008330 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>)
 8008236:	4299      	cmp	r1, r3
 8008238:	d902      	bls.n	8008240 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xc>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800823a:	f06f 0003 	mvn.w	r0, #3
}
 800823e:	4770      	bx	lr
{
 8008240:	b530      	push	{r4, r5, lr}
 8008242:	b087      	sub	sp, #28
 8008244:	460d      	mov	r5, r1
{
	VL53L1_Error Status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 8008246:	f10d 0206 	add.w	r2, sp, #6
 800824a:	2105      	movs	r1, #5
 800824c:	4604      	mov	r4, r0
 800824e:	f000 fc5f 	bl	8008b10 <VL53L1_get_sequence_config_bit>
	if (Status == VL53L1_ERROR_NONE) {
 8008252:	b9c0      	cbnz	r0, 8008286 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
	Status = VL53L1_get_sequence_config_bit(Dev,
 8008254:	f10d 0207 	add.w	r2, sp, #7
 8008258:	2106      	movs	r1, #6
 800825a:	4620      	mov	r0, r4
 800825c:	f000 fc58 	bl	8008b10 <VL53L1_get_sequence_config_bit>
	if (Status == VL53L1_ERROR_NONE)
 8008260:	b988      	cbnz	r0, 8008286 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_get_timeouts_us(Dev,
 8008262:	ab02      	add	r3, sp, #8
 8008264:	aa03      	add	r2, sp, #12
 8008266:	a904      	add	r1, sp, #16
 8008268:	4620      	mov	r0, r4
 800826a:	f000 fc19 	bl	8008aa0 <VL53L1_get_timeouts_us>
	if (Status == VL53L1_ERROR_NONE) {
 800826e:	b950      	cbnz	r0, 8008286 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		switch (PresetMode) {
 8008270:	f894 337c 	ldrb.w	r3, [r4, #892]	; 0x37c
 8008274:	2b04      	cmp	r3, #4
 8008276:	d032      	beq.n	80082de <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xaa>
 8008278:	2b08      	cmp	r3, #8
 800827a:	d01e      	beq.n	80082ba <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x86>
 800827c:	2b03      	cmp	r3, #3
 800827e:	d004      	beq.n	800828a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x56>
		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8008280:	b1bd      	cbz	r5, 80082b2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7e>
 8008282:	f06f 0007 	mvn.w	r0, #7
}
 8008286:	b007      	add	sp, #28
 8008288:	bd30      	pop	{r4, r5, pc}
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800828a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800828e:	2b01      	cmp	r3, #1
 8008290:	d045      	beq.n	800831e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xea>
 8008292:	f89d 0007 	ldrb.w	r0, [sp, #7]
			FDAMaxTimingBudgetUs *= 2;
 8008296:	4927      	ldr	r1, [pc, #156]	; (8008334 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x100>)
 8008298:	f246 73e8 	movw	r3, #26600	; 0x67e8
 800829c:	f245 4260 	movw	r2, #21600	; 0x5460
 80082a0:	2801      	cmp	r0, #1
 80082a2:	bf08      	it	eq
 80082a4:	461a      	moveq	r2, r3
 80082a6:	2302      	movs	r3, #2
		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 80082a8:	4295      	cmp	r5, r2
 80082aa:	d902      	bls.n	80082b2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7e>
					- TimingGuard);
 80082ac:	1aaa      	subs	r2, r5, r2
			if (TimingBudget > FDAMaxTimingBudgetUs)
 80082ae:	428a      	cmp	r2, r1
 80082b0:	d925      	bls.n	80082fe <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xca>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80082b2:	f06f 0003 	mvn.w	r0, #3
}
 80082b6:	b007      	add	sp, #28
 80082b8:	bd30      	pop	{r4, r5, pc}
			VL53L1_get_tuning_parm(Dev,
 80082ba:	aa05      	add	r2, sp, #20
 80082bc:	f248 0136 	movw	r1, #32822	; 0x8036
 80082c0:	4620      	mov	r0, r4
 80082c2:	f001 f8a5 	bl	8009410 <VL53L1_get_tuning_parm>
			if (vhv_loops > 0) {
 80082c6:	9b05      	ldr	r3, [sp, #20]
			FDAMaxTimingBudgetUs *= 2;
 80082c8:	491a      	ldr	r1, [pc, #104]	; (8008334 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x100>)
			if (vhv_loops > 0) {
 80082ca:	2b00      	cmp	r3, #0
				vhv += vhv_loops *
 80082cc:	bfc3      	ittte	gt
 80082ce:	22f5      	movgt	r2, #245	; 0xf5
 80082d0:	435a      	mulgt	r2, r3
 80082d2:	f602 62d1 	addwgt	r2, r2, #3793	; 0xed1
 80082d6:	f640 62d1 	movwle	r2, #3793	; 0xed1
			divisor = 2;
 80082da:	2302      	movs	r3, #2
		break;
 80082dc:	e7e4      	b.n	80082a8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x74>
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80082de:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d020      	beq.n	8008328 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf4>
 80082e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 80082ea:	4913      	ldr	r1, [pc, #76]	; (8008338 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x104>)
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80082f2:	f04f 0301 	mov.w	r3, #1
 80082f6:	bf18      	it	ne
 80082f8:	f44f 727a 	movne.w	r2, #1000	; 0x3e8
 80082fc:	e7d4      	b.n	80082a8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x74>
				TimingBudget /= divisor;
 80082fe:	fbb2 f3f3 	udiv	r3, r2, r3
				Status = VL53L1_set_timeouts_us(
 8008302:	9904      	ldr	r1, [sp, #16]
 8008304:	9a03      	ldr	r2, [sp, #12]
				TimingBudget /= divisor;
 8008306:	9302      	str	r3, [sp, #8]
				Status = VL53L1_set_timeouts_us(
 8008308:	4620      	mov	r0, r4
 800830a:	f000 fba3 	bl	8008a54 <VL53L1_set_timeouts_us>
			if (Status == VL53L1_ERROR_NONE)
 800830e:	2800      	cmp	r0, #0
 8008310:	d1b9      	bne.n	8008286 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
				VL53L1DevDataSet(Dev,
 8008312:	9b02      	ldr	r3, [sp, #8]
		VL53L1DevDataSet(Dev,
 8008314:	f8c4 5380 	str.w	r5, [r4, #896]	; 0x380
				VL53L1DevDataSet(Dev,
 8008318:	6123      	str	r3, [r4, #16]
}
 800831a:	b007      	add	sp, #28
 800831c:	bd30      	pop	{r4, r5, pc}
			FDAMaxTimingBudgetUs *= 2;
 800831e:	4905      	ldr	r1, [pc, #20]	; (8008334 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x100>)
			divisor = 2;
 8008320:	2302      	movs	r3, #2
				TimingGuard = 26600;
 8008322:	f246 72e8 	movw	r2, #26600	; 0x67e8
 8008326:	e7bf      	b.n	80082a8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x74>
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8008328:	4903      	ldr	r1, [pc, #12]	; (8008338 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x104>)
				TimingGuard = 5000;
 800832a:	f241 3288 	movw	r2, #5000	; 0x1388
 800832e:	e7bb      	b.n	80082a8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x74>
 8008330:	00989680 	.word	0x00989680
 8008334:	0010c8e0 	.word	0x0010c8e0
 8008338:	00086470 	.word	0x00086470

0800833c <VL53L1_StaticInit>:
{
 800833c:	b530      	push	{r4, r5, lr}
 800833e:	b089      	sub	sp, #36	; 0x24
	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8008340:	2503      	movs	r5, #3
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8008342:	2120      	movs	r1, #32
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8008344:	aa07      	add	r2, sp, #28
 8008346:	ab06      	add	r3, sp, #24
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8008348:	7081      	strb	r1, [r0, #2]
	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 800834a:	f880 5378 	strb.w	r5, [r0, #888]	; 0x378
	VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 800834e:	f880 537f 	strb.w	r5, [r0, #895]	; 0x37f
	VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8008352:	f880 537e 	strb.w	r5, [r0, #894]	; 0x37e
	VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8008356:	f880 537d 	strb.w	r5, [r0, #893]	; 0x37d
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 800835a:	2126      	movs	r1, #38	; 0x26
 800835c:	9201      	str	r2, [sp, #4]
 800835e:	9300      	str	r3, [sp, #0]
 8008360:	f10d 0212 	add.w	r2, sp, #18
 8008364:	ab05      	add	r3, sp, #20
{
 8008366:	4604      	mov	r4, r0
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8008368:	f000 fc0c 	bl	8008b84 <VL53L1_get_preset_mode_timing_cfg>
	if (Status == VL53L1_ERROR_NONE)
 800836c:	b108      	cbz	r0, 8008372 <VL53L1_StaticInit+0x36>
}
 800836e:	b009      	add	sp, #36	; 0x24
 8008370:	bd30      	pop	{r4, r5, pc}
		Status = VL53L1_set_preset_mode(
 8008372:	9807      	ldr	r0, [sp, #28]
 8008374:	9906      	ldr	r1, [sp, #24]
 8008376:	9001      	str	r0, [sp, #4]
 8008378:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800837c:	9002      	str	r0, [sp, #8]
 800837e:	9100      	str	r1, [sp, #0]
 8008380:	9b05      	ldr	r3, [sp, #20]
 8008382:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8008386:	2126      	movs	r1, #38	; 0x26
 8008388:	4620      	mov	r0, r4
 800838a:	f000 fc4f 	bl	8008c2c <VL53L1_set_preset_mode>
	if (Status == VL53L1_ERROR_NONE)
 800838e:	2800      	cmp	r0, #0
 8008390:	d1ed      	bne.n	800836e <VL53L1_StaticInit+0x32>
		VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8008392:	2240      	movs	r2, #64	; 0x40
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8008394:	2308      	movs	r3, #8
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8008396:	f884 537e 	strb.w	r5, [r4, #894]	; 0x37e
		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 800839a:	f884 537f 	strb.w	r5, [r4, #895]	; 0x37f
		VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 800839e:	70a2      	strb	r2, [r4, #2]
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 80083a0:	f884 337c 	strb.w	r3, [r4, #892]	; 0x37c
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 80083a4:	f24a 0128 	movw	r1, #41000	; 0xa028
 80083a8:	4620      	mov	r0, r4
 80083aa:	f7ff ff43 	bl	8008234 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
	if (Status == VL53L1_ERROR_NONE) {
 80083ae:	2800      	cmp	r0, #0
 80083b0:	d1dd      	bne.n	800836e <VL53L1_StaticInit+0x32>
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 80083b2:	4620      	mov	r0, r4
 80083b4:	f44f 6185 	mov.w	r1, #1064	; 0x428
 80083b8:	f000 fb30 	bl	8008a1c <VL53L1_set_inter_measurement_period_ms>
}
 80083bc:	b009      	add	sp, #36	; 0x24
 80083be:	bd30      	pop	{r4, r5, pc}

080083c0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:
{
 80083c0:	b570      	push	{r4, r5, r6, lr}
	uint8_t Mm1Enabled = 0;
 80083c2:	2300      	movs	r3, #0
{
 80083c4:	b086      	sub	sp, #24
	*pMeasurementTimingBudgetMicroSeconds = 0;
 80083c6:	600b      	str	r3, [r1, #0]
{
 80083c8:	460d      	mov	r5, r1
	Status = VL53L1_get_sequence_config_bit(Dev,
 80083ca:	f10d 0206 	add.w	r2, sp, #6
 80083ce:	2105      	movs	r1, #5
	uint8_t Mm1Enabled = 0;
 80083d0:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t Mm2Enabled = 0;
 80083d4:	f88d 3007 	strb.w	r3, [sp, #7]
	uint32_t  MmTimeoutUs = 0;
 80083d8:	9302      	str	r3, [sp, #8]
	uint32_t  RangeTimeoutUs = 0;
 80083da:	9303      	str	r3, [sp, #12]
	uint32_t PhaseCalTimeoutUs = 0;
 80083dc:	9304      	str	r3, [sp, #16]
{
 80083de:	4606      	mov	r6, r0
	Status = VL53L1_get_sequence_config_bit(Dev,
 80083e0:	f000 fb96 	bl	8008b10 <VL53L1_get_sequence_config_bit>
	if (Status == VL53L1_ERROR_NONE)
 80083e4:	4604      	mov	r4, r0
 80083e6:	b110      	cbz	r0, 80083ee <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x2e>
}
 80083e8:	4620      	mov	r0, r4
 80083ea:	b006      	add	sp, #24
 80083ec:	bd70      	pop	{r4, r5, r6, pc}
	Status = VL53L1_get_sequence_config_bit(Dev,
 80083ee:	f10d 0207 	add.w	r2, sp, #7
 80083f2:	2106      	movs	r1, #6
 80083f4:	4630      	mov	r0, r6
 80083f6:	f000 fb8b 	bl	8008b10 <VL53L1_get_sequence_config_bit>
	if (Status == VL53L1_ERROR_NONE)
 80083fa:	4604      	mov	r4, r0
 80083fc:	2800      	cmp	r0, #0
 80083fe:	d1f3      	bne.n	80083e8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x28>
		Status = VL53L1_get_timeouts_us(Dev,
 8008400:	ab03      	add	r3, sp, #12
 8008402:	aa02      	add	r2, sp, #8
 8008404:	a904      	add	r1, sp, #16
 8008406:	4630      	mov	r0, r6
 8008408:	f000 fb4a 	bl	8008aa0 <VL53L1_get_timeouts_us>
	if (Status == VL53L1_ERROR_NONE) {
 800840c:	4604      	mov	r4, r0
 800840e:	2800      	cmp	r0, #0
 8008410:	d1ea      	bne.n	80083e8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x28>
		switch (PresetMode) {
 8008412:	f896 337c 	ldrb.w	r3, [r6, #892]	; 0x37c
 8008416:	2b04      	cmp	r3, #4
 8008418:	d02c      	beq.n	8008474 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xb4>
 800841a:	2b08      	cmp	r3, #8
 800841c:	d017      	beq.n	800844e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x8e>
 800841e:	2b03      	cmp	r3, #3
 8008420:	d004      	beq.n	800842c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x6c>
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8008422:	f06f 0407 	mvn.w	r4, #7
}
 8008426:	4620      	mov	r0, r4
 8008428:	b006      	add	sp, #24
 800842a:	bd70      	pop	{r4, r5, r6, pc}
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800842c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008430:	2b01      	cmp	r3, #1
 8008432:	d02b      	beq.n	800848c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xcc>
 8008434:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008438:	2b01      	cmp	r3, #1
 800843a:	d027      	beq.n	800848c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xcc>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 800843c:	9b03      	ldr	r3, [sp, #12]
 800843e:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8008442:	3330      	adds	r3, #48	; 0x30
 8008444:	005b      	lsls	r3, r3, #1
}
 8008446:	4620      	mov	r0, r4
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 8008448:	602b      	str	r3, [r5, #0]
}
 800844a:	b006      	add	sp, #24
 800844c:	bd70      	pop	{r4, r5, r6, pc}
			VL53L1_get_tuning_parm(Dev,
 800844e:	aa05      	add	r2, sp, #20
 8008450:	4630      	mov	r0, r6
 8008452:	f248 0136 	movw	r1, #32822	; 0x8036
 8008456:	f000 ffdb 	bl	8009410 <VL53L1_get_tuning_parm>
			if (vhv_loops > 0) {
 800845a:	9a05      	ldr	r2, [sp, #20]
				vhv += vhv_loops *
 800845c:	23f5      	movs	r3, #245	; 0xf5
			if (vhv_loops > 0) {
 800845e:	2a00      	cmp	r2, #0
				vhv += vhv_loops *
 8008460:	bfc8      	it	gt
 8008462:	4353      	mulgt	r3, r2
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8008464:	9a03      	ldr	r2, [sp, #12]
				vhv += vhv_loops *
 8008466:	bfc8      	it	gt
 8008468:	33f5      	addgt	r3, #245	; 0xf5
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 800846a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800846e:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
		break;
 8008472:	e7e8      	b.n	8008446 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8008474:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008478:	2b01      	cmp	r3, #1
 800847a:	d00d      	beq.n	8008498 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xd8>
 800847c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008480:	2b01      	cmp	r3, #1
 8008482:	d009      	beq.n	8008498 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xd8>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 8008484:	9b03      	ldr	r3, [sp, #12]
 8008486:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800848a:	e7dc      	b.n	8008446 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 800848c:	9b03      	ldr	r3, [sp, #12]
 800848e:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 8008492:	3334      	adds	r3, #52	; 0x34
 8008494:	005b      	lsls	r3, r3, #1
 8008496:	e7d6      	b.n	8008446 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8008498:	9b03      	ldr	r3, [sp, #12]
 800849a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800849e:	3308      	adds	r3, #8
 80084a0:	e7d1      	b.n	8008446 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
 80084a2:	bf00      	nop

080084a4 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:
	adjustedIMP += (adjustedIMP * 64) / 1000;
 80084a4:	4a03      	ldr	r2, [pc, #12]	; (80084b4 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x10>)
 80084a6:	018b      	lsls	r3, r1, #6
 80084a8:	fba2 2303 	umull	r2, r3, r2, r3
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 80084ac:	eb01 1193 	add.w	r1, r1, r3, lsr #6
 80084b0:	f000 bab4 	b.w	8008a1c <VL53L1_set_inter_measurement_period_ms>
 80084b4:	10624dd3 	.word	0x10624dd3

080084b8 <VL53L1_StartMeasurement>:
	uint32_t MTBus, IMPms;

	LOG_FUNCTION_START("");

	CurrPalState = VL53L1DevDataGet(Dev, PalState);
	switch (CurrPalState) {
 80084b8:	f890 3378 	ldrb.w	r3, [r0, #888]	; 0x378
 80084bc:	2b05      	cmp	r3, #5
 80084be:	d814      	bhi.n	80084ea <VL53L1_StartMeasurement+0x32>
 80084c0:	2b04      	cmp	r3, #4
 80084c2:	d215      	bcs.n	80084f0 <VL53L1_StartMeasurement+0x38>
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	d913      	bls.n	80084f0 <VL53L1_StartMeasurement+0x38>
{
 80084c8:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		Status = VL53L1_ERROR_UNDEFINED;
	}

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 80084ca:	7885      	ldrb	r5, [r0, #2]

	/* Check timing configuration between timing budget and
	* inter measurement period */
	if ((Status == VL53L1_ERROR_NONE) &&
 80084cc:	2d40      	cmp	r5, #64	; 0x40
{
 80084ce:	b082      	sub	sp, #8
 80084d0:	4604      	mov	r4, r0
	if ((Status == VL53L1_ERROR_NONE) &&
 80084d2:	d013      	beq.n	80084fc <VL53L1_StartMeasurement+0x44>
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
			Status = VL53L1_ERROR_INVALID_PARAMS;
	}

	if (Status == VL53L1_ERROR_NONE)
		Status = VL53L1_init_and_start_range(
 80084d4:	4629      	mov	r1, r5
 80084d6:	2206      	movs	r2, #6
 80084d8:	4620      	mov	r0, r4
 80084da:	f000 fc7d 	bl	8008dd8 <VL53L1_init_and_start_range>
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 80084de:	b910      	cbnz	r0, 80084e6 <VL53L1_StartMeasurement+0x2e>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 80084e0:	2304      	movs	r3, #4
 80084e2:	f884 3378 	strb.w	r3, [r4, #888]	; 0x378


	LOG_FUNCTION_END(Status);
	return Status;
}
 80084e6:	b002      	add	sp, #8
 80084e8:	bd70      	pop	{r4, r5, r6, pc}
	switch (CurrPalState) {
 80084ea:	3b62      	subs	r3, #98	; 0x62
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d802      	bhi.n	80084f6 <VL53L1_StartMeasurement+0x3e>
		Status = VL53L1_ERROR_INVALID_COMMAND;
 80084f0:	f06f 000d 	mvn.w	r0, #13
 80084f4:	4770      	bx	lr
		Status = VL53L1_ERROR_UNDEFINED;
 80084f6:	f06f 0002 	mvn.w	r0, #2
 80084fa:	4770      	bx	lr
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80084fc:	4669      	mov	r1, sp
 80084fe:	f7ff ff5f 	bl	80083c0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
		MTBus /= 1000;
 8008502:	4e0b      	ldr	r6, [pc, #44]	; (8008530 <VL53L1_StartMeasurement+0x78>)
 8008504:	9b00      	ldr	r3, [sp, #0]
 8008506:	fba6 2303 	umull	r2, r3, r6, r3
 800850a:	099b      	lsrs	r3, r3, #6
	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 800850c:	a901      	add	r1, sp, #4
 800850e:	4620      	mov	r0, r4
		MTBus /= 1000;
 8008510:	9300      	str	r3, [sp, #0]
	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 8008512:	f000 fa91 	bl	8008a38 <VL53L1_get_inter_measurement_period_ms>
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 8008516:	e89d 000c 	ldmia.w	sp, {r2, r3}
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 800851a:	0199      	lsls	r1, r3, #6
 800851c:	fba6 0101 	umull	r0, r1, r6, r1
 8008520:	eba3 1391 	sub.w	r3, r3, r1, lsr #6
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 8008524:	3204      	adds	r2, #4
 8008526:	429a      	cmp	r2, r3
 8008528:	d9d4      	bls.n	80084d4 <VL53L1_StartMeasurement+0x1c>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 800852a:	f06f 0003 	mvn.w	r0, #3
	return Status;
 800852e:	e7da      	b.n	80084e6 <VL53L1_StartMeasurement+0x2e>
 8008530:	10624dd3 	.word	0x10624dd3

08008534 <VL53L1_StopMeasurement>:

VL53L1_Error VL53L1_StopMeasurement(VL53L1_DEV Dev)
{
 8008534:	b510      	push	{r4, lr}
 8008536:	4604      	mov	r4, r0
	VL53L1_Error Status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	Status = VL53L1_stop_range(Dev);
 8008538:	f000 fd40 	bl	8008fbc <VL53L1_stop_range>

	/* Set PAL State to Idle */
	if (Status == VL53L1_ERROR_NONE)
 800853c:	b910      	cbnz	r0, 8008544 <VL53L1_StopMeasurement+0x10>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 800853e:	2303      	movs	r3, #3
 8008540:	f884 3378 	strb.w	r3, [r4, #888]	; 0x378

	LOG_FUNCTION_END(Status);
	return Status;
}
 8008544:	bd10      	pop	{r4, pc}
 8008546:	bf00      	nop

08008548 <VL53L1_ClearInterruptAndStartMeasurement>:
//		Status = ChangePresetMode(Dev);
//	else
//		Status = VL53L1_clear_interrupt_and_enable_next_range(
//						Dev,
//						DeviceMeasurementMode);
	Status = VL53L1_clear_interrupt_and_enable_next_range(
 8008548:	7881      	ldrb	r1, [r0, #2]
 800854a:	f000 bd5b 	b.w	8009004 <VL53L1_clear_interrupt_and_enable_next_range>
 800854e:	bf00      	nop

08008550 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 8008550:	b5f0      	push	{r4, r5, r6, r7, lr}

	//LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 8008552:	f04f 33ff 	mov.w	r3, #4294967295
{
 8008556:	b0a3      	sub	sp, #140	; 0x8c
 8008558:	460c      	mov	r4, r1
	memset(pRangingMeasurementData, 0xFF,
 800855a:	600b      	str	r3, [r1, #0]
 800855c:	604b      	str	r3, [r1, #4]
 800855e:	608b      	str	r3, [r1, #8]
 8008560:	60cb      	str	r3, [r1, #12]
 8008562:	610b      	str	r3, [r1, #16]
 8008564:	614b      	str	r3, [r1, #20]
 8008566:	618b      	str	r3, [r1, #24]
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 8008568:	aa01      	add	r2, sp, #4
 800856a:	2102      	movs	r1, #2
{
 800856c:	4605      	mov	r5, r0
	Status = VL53L1_get_device_results(
 800856e:	f000 feb1 	bl	80092d4 <VL53L1_get_device_results>
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 8008572:	b108      	cbz	r0, 8008578 <VL53L1_GetRangingMeasurementData+0x28>
				pRangingMeasurementData);
	}

	//LOG_FUNCTION_END(Status);
	return Status;
}
 8008574:	b023      	add	sp, #140	; 0x8c
 8008576:	bdf0      	pop	{r4, r5, r6, r7, pc}
	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8008578:	f89d 6046 	ldrb.w	r6, [sp, #70]	; 0x46
		pRangingMeasurementData->StreamCount = presults->stream_count;
 800857c:	f89d 2006 	ldrb.w	r2, [sp, #6]
	pRangeData->TimeStamp = presults_data->time_stamp;
 8008580:	9b03      	ldr	r3, [sp, #12]
		pRangingMeasurementData->StreamCount = presults->stream_count;
 8008582:	7122      	strb	r2, [r4, #4]
	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8008584:	f006 061f 	and.w	r6, r6, #31
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 8008588:	2e07      	cmp	r6, #7
	pRangeData->TimeStamp = presults_data->time_stamp;
 800858a:	6023      	str	r3, [r4, #0]
		Status = SetSimpleData(Dev, 1,
 800858c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8008590:	f9bd 7044 	ldrsh.w	r7, [sp, #68]	; 0x44
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 8008594:	f000 8094 	beq.w	80086c0 <VL53L1_GetRangingMeasurementData+0x170>
		if (presults_data->median_range_mm < SRL)
 8008598:	f5b7 7f96 	cmp.w	r7, #300	; 0x12c
 800859c:	f2c0 8082 	blt.w	80086a4 <VL53L1_GetRangingMeasurementData+0x154>
			RAS = LRAP * presults_data->median_range_mm;
 80085a0:	f641 129a 	movw	r2, #6554	; 0x199a
 80085a4:	fb17 fe02 	smulbb	lr, r7, r2
 80085a8:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
			partial = (GGm * presults_data->sigma_mm);
 80085ac:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80085b0:	4a56      	ldr	r2, [pc, #344]	; (800870c <VL53L1_GetRangingMeasurementData+0x1bc>)
			if (partial <= GI)
 80085b2:	4857      	ldr	r0, [pc, #348]	; (8008710 <VL53L1_GetRangingMeasurementData+0x1c0>)
			partial = partial + (RAS >> 1);
 80085b4:	fb02 c203 	mla	r2, r2, r3, ip
			partial = partial / RAS;
 80085b8:	fbb2 f2fe 	udiv	r2, r2, lr
			partial = partial * 65536;
 80085bc:	0412      	lsls	r2, r2, #16
			if (partial <= GI)
 80085be:	4282      	cmp	r2, r0
 80085c0:	d806      	bhi.n	80085d0 <VL53L1_GetRangingMeasurementData+0x80>
				SRQL = GI - partial;
 80085c2:	1a82      	subs	r2, r0, r2
		finalvalue = (uint8_t)(SRQL >> 16);
 80085c4:	0c12      	lsrs	r2, r2, #16
		returnvalue = MAX(50, MIN(100, finalvalue));
 80085c6:	2a32      	cmp	r2, #50	; 0x32
		finalvalue = (uint8_t)(SRQL >> 16);
 80085c8:	fa5f fe82 	uxtb.w	lr, r2
		returnvalue = MAX(50, MIN(100, finalvalue));
 80085cc:	f200 8097 	bhi.w	80086fe <VL53L1_GetRangingMeasurementData+0x1ae>
 80085d0:	f04f 0e32 	mov.w	lr, #50	; 0x32
	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80085d4:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80085d8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 80085dc:	8327      	strh	r7, [r4, #24]
	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80085de:	0240      	lsls	r0, r0, #9
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80085e0:	025b      	lsls	r3, r3, #9
	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80085e2:	0252      	lsls	r2, r2, #9
	pRangeData->EffectiveSpadRtnCount =
 80085e4:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 80085e8:	60e0      	str	r0, [r4, #12]
	switch (device_status) {
 80085ea:	3901      	subs	r1, #1
	pRangeData->RangeFractionalPart = 0;
 80085ec:	2000      	movs	r0, #0
	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 80085ee:	f884 e005 	strb.w	lr, [r4, #5]
	pRangeData->SigmaMilliMeter = TempFix1616;
 80085f2:	6163      	str	r3, [r4, #20]
		= SignalRate;
 80085f4:	60a2      	str	r2, [r4, #8]
	pRangeData->EffectiveSpadRtnCount =
 80085f6:	8227      	strh	r7, [r4, #16]
	pRangeData->RangeFractionalPart = 0;
 80085f8:	76a0      	strb	r0, [r4, #26]
	switch (device_status) {
 80085fa:	2910      	cmp	r1, #16
 80085fc:	d857      	bhi.n	80086ae <VL53L1_GetRangingMeasurementData+0x15e>
 80085fe:	e8df f001 	tbb	[pc, r1]
 8008602:	4e4e      	.short	0x4e4e
 8008604:	5656564e 	.word	0x5656564e
 8008608:	56565656 	.word	0x56565656
 800860c:	56095656 	.word	0x56095656
 8008610:	5656      	.short	0x5656
 8008612:	4e          	.byte	0x4e
 8008613:	00          	.byte	0x00
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 8008614:	210d      	movs	r1, #13
 8008616:	76e1      	strb	r1, [r4, #27]
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008618:	f8c5 3390 	str.w	r3, [r5, #912]	; 0x390
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800861c:	f8c5 2394 	str.w	r2, [r5, #916]	; 0x394
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 8008620:	f10d 0102 	add.w	r1, sp, #2
 8008624:	4628      	mov	r0, r5
 8008626:	f000 fbc3 	bl	8008db0 <VL53L1_get_lite_sigma_threshold>
	if (Status == VL53L1_ERROR_NONE) {
 800862a:	2800      	cmp	r0, #0
 800862c:	d15a      	bne.n	80086e4 <VL53L1_GetRangingMeasurementData+0x194>
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 800862e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		if (TempFix1616 == 0) {
 8008632:	0393      	lsls	r3, r2, #14
 8008634:	2a00      	cmp	r2, #0
 8008636:	d05f      	beq.n	80086f8 <VL53L1_GetRangingMeasurementData+0x1a8>
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008638:	2201      	movs	r2, #1
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800863a:	f8c5 3388 	str.w	r3, [r5, #904]	; 0x388
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800863e:	f885 2384 	strb.w	r2, [r5, #900]	; 0x384
 8008642:	f1a6 0306 	sub.w	r3, r6, #6
 8008646:	fab3 f383 	clz	r3, r3
 800864a:	095b      	lsrs	r3, r3, #5
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800864c:	f885 3386 	strb.w	r3, [r5, #902]	; 0x386
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 8008650:	f10d 0102 	add.w	r1, sp, #2
 8008654:	4628      	mov	r0, r5
 8008656:	f000 fbb5 	bl	8008dc4 <VL53L1_get_lite_min_count_rate>
	if (Status == VL53L1_ERROR_NONE) {
 800865a:	2800      	cmp	r0, #0
 800865c:	d135      	bne.n	80086ca <VL53L1_GetRangingMeasurementData+0x17a>
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 800865e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		if (TempFix1616 == 0) {
 8008662:	0253      	lsls	r3, r2, #9
 8008664:	2a00      	cmp	r2, #0
 8008666:	d043      	beq.n	80086f0 <VL53L1_GetRangingMeasurementData+0x1a0>
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008668:	2201      	movs	r2, #1
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800866a:	f8c5 338c 	str.w	r3, [r5, #908]	; 0x38c
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800866e:	f885 2385 	strb.w	r2, [r5, #901]	; 0x385
 8008672:	f1a6 0604 	sub.w	r6, r6, #4
 8008676:	fab6 f686 	clz	r6, r6
 800867a:	0976      	lsrs	r6, r6, #5
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800867c:	f885 6387 	strb.w	r6, [r5, #903]	; 0x387
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8008680:	7ee0      	ldrb	r0, [r4, #27]
 8008682:	bb60      	cbnz	r0, 80086de <VL53L1_GetRangingMeasurementData+0x18e>
	Range = pRangeData->RangeMilliMeter;
 8008684:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8008688:	2b00      	cmp	r3, #0
 800868a:	f6bf af73 	bge.w	8008574 <VL53L1_GetRangingMeasurementData+0x24>
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 800868e:	4a21      	ldr	r2, [pc, #132]	; (8008714 <VL53L1_GetRangingMeasurementData+0x1c4>)
 8008690:	6852      	ldr	r2, [r2, #4]
 8008692:	4293      	cmp	r3, r2
			pRangeData->RangeStatus =
 8008694:	bfba      	itte	lt
 8008696:	230e      	movlt	r3, #14
 8008698:	76e3      	strblt	r3, [r4, #27]
			pRangeData->RangeMilliMeter = 0;
 800869a:	8320      	strhge	r0, [r4, #24]
 800869c:	e76a      	b.n	8008574 <VL53L1_GetRangingMeasurementData+0x24>
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 800869e:	2105      	movs	r1, #5
 80086a0:	76e1      	strb	r1, [r4, #27]
 80086a2:	e7b9      	b.n	8008618 <VL53L1_GetRangingMeasurementData+0xc8>
		if (presults_data->median_range_mm < SRL)
 80086a4:	f44f 2c70 	mov.w	ip, #983040	; 0xf0000
			RAS = SRAS * 65536;
 80086a8:	f44f 1ef0 	mov.w	lr, #1966080	; 0x1e0000
 80086ac:	e77e      	b.n	80085ac <VL53L1_GetRangingMeasurementData+0x5c>
 80086ae:	1f31      	subs	r1, r6, #4
 80086b0:	b2c9      	uxtb	r1, r1
 80086b2:	290f      	cmp	r1, #15
 80086b4:	bf96      	itet	ls
 80086b6:	4818      	ldrls	r0, [pc, #96]	; (8008718 <VL53L1_GetRangingMeasurementData+0x1c8>)
 80086b8:	21ff      	movhi	r1, #255	; 0xff
 80086ba:	5c41      	ldrbls	r1, [r0, r1]
			pRangeData->RangeStatus =
 80086bc:	76e1      	strb	r1, [r4, #27]
 80086be:	e7ab      	b.n	8008618 <VL53L1_GetRangingMeasurementData+0xc8>
 80086c0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
		returnvalue = 50;
 80086c4:	f04f 0e32 	mov.w	lr, #50	; 0x32
 80086c8:	e784      	b.n	80085d4 <VL53L1_GetRangingMeasurementData+0x84>
 80086ca:	f895 3385 	ldrb.w	r3, [r5, #901]	; 0x385
	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d0cf      	beq.n	8008672 <VL53L1_GetRangingMeasurementData+0x122>
 80086d2:	2600      	movs	r6, #0
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80086d4:	f885 6387 	strb.w	r6, [r5, #903]	; 0x387
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 80086d8:	7ee0      	ldrb	r0, [r4, #27]
 80086da:	2800      	cmp	r0, #0
 80086dc:	d0d2      	beq.n	8008684 <VL53L1_GetRangingMeasurementData+0x134>
		Status = SetSimpleData(Dev, 1,
 80086de:	2000      	movs	r0, #0
}
 80086e0:	b023      	add	sp, #140	; 0x8c
 80086e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086e4:	f895 3384 	ldrb.w	r3, [r5, #900]	; 0x384
	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d0aa      	beq.n	8008642 <VL53L1_GetRangingMeasurementData+0xf2>
 80086ec:	2300      	movs	r3, #0
 80086ee:	e7ad      	b.n	800864c <VL53L1_GetRangingMeasurementData+0xfc>
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80086f0:	f885 3385 	strb.w	r3, [r5, #901]	; 0x385
 80086f4:	461e      	mov	r6, r3
 80086f6:	e7c1      	b.n	800867c <VL53L1_GetRangingMeasurementData+0x12c>
 80086f8:	f885 3384 	strb.w	r3, [r5, #900]	; 0x384
 80086fc:	e7a6      	b.n	800864c <VL53L1_GetRangingMeasurementData+0xfc>
		returnvalue = MAX(50, MIN(100, finalvalue));
 80086fe:	f1be 0f64 	cmp.w	lr, #100	; 0x64
 8008702:	bf28      	it	cs
 8008704:	f04f 0e64 	movcs.w	lr, #100	; 0x64
 8008708:	e764      	b.n	80085d4 <VL53L1_GetRangingMeasurementData+0x84>
 800870a:	bf00      	nop
 800870c:	0030cccd 	.word	0x0030cccd
 8008710:	0075b333 	.word	0x0075b333
 8008714:	20000000 	.word	0x20000000
 8008718:	08013bc8 	.word	0x08013bc8

0800871c <VL53L1_read_p2p_data>:
}


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 800871c:	b570      	push	{r4, r5, r6, lr}
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
		status = VL53L1_get_static_nvm_managed(
 800871e:	f500 71ac 	add.w	r1, r0, #344	; 0x158
{
 8008722:	b082      	sub	sp, #8
 8008724:	4604      	mov	r4, r0
		status = VL53L1_get_static_nvm_managed(
 8008726:	f002 fc4b 	bl	800afc0 <VL53L1_get_static_nvm_managed>
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 800872a:	4605      	mov	r5, r0
 800872c:	b1a0      	cbz	r0, 8008758 <VL53L1_read_p2p_data+0x3c>

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 800872e:	f8b4 315e 	ldrh.w	r3, [r4, #350]	; 0x15e
 8008732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008736:	d331      	bcc.n	800879c <VL53L1_read_p2p_data+0x80>

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 8008738:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
 800873c:	b94b      	cbnz	r3, 8008752 <VL53L1_read_p2p_data+0x36>
		pdev->optical_centre.y_centre == 0) {
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 800873e:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8008742:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
				pdev->mm_roi.x_centre << 4;
 8008746:	0112      	lsls	r2, r2, #4
				pdev->mm_roi.y_centre << 4;
 8008748:	011b      	lsls	r3, r3, #4
		pdev->optical_centre.x_centre =
 800874a:	f884 20a2 	strb.w	r2, [r4, #162]	; 0xa2
		pdev->optical_centre.y_centre =
 800874e:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8008752:	4628      	mov	r0, r5
 8008754:	b002      	add	sp, #8
 8008756:	bd70      	pop	{r4, r5, r6, pc}
		status = VL53L1_get_customer_nvm_managed(
 8008758:	f104 0142 	add.w	r1, r4, #66	; 0x42
 800875c:	4620      	mov	r0, r4
 800875e:	f002 fcbb 	bl	800b0d8 <VL53L1_get_customer_nvm_managed>
	if (status == VL53L1_ERROR_NONE) {
 8008762:	4605      	mov	r5, r0
 8008764:	2800      	cmp	r0, #0
 8008766:	d1e2      	bne.n	800872e <VL53L1_read_p2p_data+0x12>
		status = VL53L1_get_nvm_copy_data(
 8008768:	f504 76fd 	add.w	r6, r4, #506	; 0x1fa
 800876c:	4631      	mov	r1, r6
 800876e:	4620      	mov	r0, r4
 8008770:	f003 f828 	bl	800b7c4 <VL53L1_get_nvm_copy_data>
		if (status == VL53L1_ERROR_NONE)
 8008774:	4605      	mov	r5, r0
 8008776:	2800      	cmp	r0, #0
 8008778:	d1d9      	bne.n	800872e <VL53L1_read_p2p_data+0x12>
			VL53L1_copy_rtn_good_spads_to_buffer(
 800877a:	4630      	mov	r0, r6
 800877c:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
 8008780:	f002 f95e 	bl	800aa40 <VL53L1_copy_rtn_good_spads_to_buffer>
		status =
 8008784:	f504 722d 	add.w	r2, r4, #692	; 0x2b4
 8008788:	21de      	movs	r1, #222	; 0xde
 800878a:	4620      	mov	r0, r4
 800878c:	f008 fea8 	bl	80114e0 <VL53L1_RdWord>
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8008790:	f8b4 315e 	ldrh.w	r3, [r4, #350]	; 0x15e
 8008794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
		status =
 8008798:	4605      	mov	r5, r0
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 800879a:	d203      	bcs.n	80087a4 <VL53L1_read_p2p_data+0x88>
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 800879c:	f64b 43cc 	movw	r3, #48332	; 0xbccc
 80087a0:	f8a4 315e 	strh.w	r3, [r4, #350]	; 0x15e
	if (status == VL53L1_ERROR_NONE)
 80087a4:	2d00      	cmp	r5, #0
 80087a6:	d1c7      	bne.n	8008738 <VL53L1_read_p2p_data+0x1c>
	uint8_t  xy_size = 0;

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 80087a8:	f10d 0206 	add.w	r2, sp, #6
 80087ac:	f10d 0107 	add.w	r1, sp, #7
 80087b0:	f894 022a 	ldrb.w	r0, [r4, #554]	; 0x22a
	uint8_t  x       = 0;
 80087b4:	f88d 5006 	strb.w	r5, [sp, #6]
	uint8_t  y       = 0;
 80087b8:	f88d 5007 	strb.w	r5, [sp, #7]
	VL53L1_decode_row_col(
 80087bc:	f002 fbbe 	bl	800af3c <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 80087c0:	f89d 0006 	ldrb.w	r0, [sp, #6]
 80087c4:	f89d 1007 	ldrb.w	r1, [sp, #7]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 80087c8:	f894 222b 	ldrb.w	r2, [r4, #555]	; 0x22b
	pmm_roi->x_centre = x;
 80087cc:	462b      	mov	r3, r5
 80087ce:	f360 0307 	bfi	r3, r0, #0, #8
 80087d2:	f361 230f 	bfi	r3, r1, #8, #8

	pmm_roi->height = xy_size >> 4;
	pmm_roi->width  = xy_size & 0x0F;
 80087d6:	f002 010f 	and.w	r1, r2, #15
	pmm_roi->x_centre = x;
 80087da:	f361 4317 	bfi	r3, r1, #16, #8
	pmm_roi->height = xy_size >> 4;
 80087de:	0912      	lsrs	r2, r2, #4
	pmm_roi->x_centre = x;
 80087e0:	f362 631f 	bfi	r3, r2, #24, #8
 80087e4:	f8c4 309e 	str.w	r3, [r4, #158]	; 0x9e
 80087e8:	e7a6      	b.n	8008738 <VL53L1_read_p2p_data+0x1c>
 80087ea:	bf00      	nop

080087ec <VL53L1_data_init>:
{
 80087ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087f0:	4604      	mov	r4, r0
 80087f2:	b087      	sub	sp, #28
 80087f4:	460d      	mov	r5, r1
	VL53L1_init_ll_driver_state(
 80087f6:	2162      	movs	r1, #98	; 0x62
 80087f8:	f002 f85c 	bl	800a8b4 <VL53L1_init_ll_driver_state>
	pdev->phasecal_config_timeout_us  =  1000;
 80087fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	pdev->mm_config_timeout_us        =  2000;
 8008800:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8008804:	f44f 6020 	mov.w	r0, #2560	; 0xa00
	pdev->range_config_timeout_us     = 13000;
 8008808:	f243 27c8 	movw	r7, #13000	; 0x32c8
	pdev->inter_measurement_period_ms =   100;
 800880c:	2664      	movs	r6, #100	; 0x64
	pdev->gain_cal.standard_ranging_gain_factor =
 800880e:	f240 71db 	movw	r1, #2011	; 0x7db
	pdev->phasecal_config_timeout_us  =  1000;
 8008812:	60a2      	str	r2, [r4, #8]
	pdev->mm_config_timeout_us        =  2000;
 8008814:	60e3      	str	r3, [r4, #12]
	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8008816:	2200      	movs	r2, #0
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8008818:	2301      	movs	r3, #1
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 800881a:	8320      	strh	r0, [r4, #24]
	pdev->range_config_timeout_us     = 13000;
 800881c:	6127      	str	r7, [r4, #16]
	pdev->inter_measurement_period_ms =   100;
 800881e:	6166      	str	r6, [r4, #20]
	pdev->gain_cal.standard_ranging_gain_factor =
 8008820:	f8a4 109c 	strh.w	r1, [r4, #156]	; 0x9c
	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8008824:	7022      	strb	r2, [r4, #0]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8008826:	70a2      	strb	r2, [r4, #2]
	pdev->debug_mode                  =  0x00;
 8008828:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800882c:	7063      	strb	r3, [r4, #1]
	pdev->offset_calibration_mode =
 800882e:	70e3      	strb	r3, [r4, #3]
	pdev->offset_correction_mode  =
 8008830:	7123      	strb	r3, [r4, #4]
	VL53L1_init_version(Dev);
 8008832:	4620      	mov	r0, r4
 8008834:	f002 f82e 	bl	800a894 <VL53L1_init_version>
	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8008838:	b115      	cbz	r5, 8008840 <VL53L1_data_init+0x54>
			status = VL53L1_read_p2p_data(Dev);
 800883a:	4620      	mov	r0, r4
 800883c:	f7ff ff6e 	bl	800871c <VL53L1_read_p2p_data>
	status =
 8008840:	f504 7088 	add.w	r0, r4, #272	; 0x110
 8008844:	f000 ff48 	bl	80096d8 <VL53L1_init_refspadchar_config_struct>
	status =
 8008848:	f504 7090 	add.w	r0, r4, #288	; 0x120
 800884c:	f000 ff58 	bl	8009700 <VL53L1_init_ssc_config_struct>
	status =
 8008850:	f504 7196 	add.w	r1, r4, #300	; 0x12c
 8008854:	f104 0042 	add.w	r0, r4, #66	; 0x42
 8008858:	f000 ff5e 	bl	8009718 <VL53L1_init_xtalk_config_struct>
		VL53L1_init_tuning_parm_storage_struct(
 800885c:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
	status =
 8008860:	f504 70a2 	add.w	r0, r4, #324	; 0x144
 8008864:	f000 ff7a 	bl	800975c <VL53L1_init_offset_cal_config_struct>
	status =
 8008868:	4628      	mov	r0, r5
 800886a:	f000 ff8b 	bl	8009784 <VL53L1_init_tuning_parm_storage_struct>
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800886e:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
		status = VL53L1_set_preset_mode(
 8008872:	7866      	ldrb	r6, [r4, #1]
 8008874:	68a2      	ldr	r2, [r4, #8]
 8008876:	9205      	str	r2, [sp, #20]
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8008878:	f003 0303 	and.w	r3, r3, #3
 800887c:	3b80      	subs	r3, #128	; 0x80
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800887e:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
	VL53L1_init_ll_driver_state(
 8008882:	2103      	movs	r1, #3
 8008884:	4620      	mov	r0, r4
		status = VL53L1_set_preset_mode(
 8008886:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 800888a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800888e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008892:	f8d4 9014 	ldr.w	r9, [r4, #20]
	VL53L1_init_ll_driver_state(
 8008896:	f002 f80d 	bl	800a8b4 <VL53L1_init_ll_driver_state>
	switch (device_preset_mode) {
 800889a:	1e72      	subs	r2, r6, #1
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800889c:	f504 70b2 	add.w	r0, r4, #356	; 0x164
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 80088a0:	f504 76c2 	add.w	r6, r4, #388	; 0x184
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 80088a4:	f504 77ce 	add.w	r7, r4, #412	; 0x19c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 80088a8:	f504 73da 	add.w	r3, r4, #436	; 0x1b4
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 80088ac:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
	VL53L1_low_power_auto_data_t  *plpadata      =
 80088b0:	f504 7e39 	add.w	lr, r4, #740	; 0x2e4
	switch (device_preset_mode) {
 80088b4:	2a25      	cmp	r2, #37	; 0x25
 80088b6:	f200 80ad 	bhi.w	8008a14 <VL53L1_data_init+0x228>
 80088ba:	e8df f002 	tbb	[pc, r2]
 80088be:	4a42      	.short	0x4a42
 80088c0:	6a625a52 	.word	0x6a625a52
 80088c4:	abab7a72 	.word	0xabab7a72
 80088c8:	abababab 	.word	0xabababab
 80088cc:	8a82abab 	.word	0x8a82abab
 80088d0:	abababab 	.word	0xabababab
 80088d4:	abababab 	.word	0xabababab
 80088d8:	abababab 	.word	0xabababab
 80088dc:	abababab 	.word	0xabababab
 80088e0:	139a92ab 	.word	0x139a92ab
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 80088e4:	e88d 4022 	stmia.w	sp, {r1, r5, lr}
 80088e8:	463a      	mov	r2, r7
 80088ea:	4631      	mov	r1, r6
 80088ec:	f001 fdec 	bl	800a4c8 <VL53L1_preset_mode_low_power_auto_long_ranging>
 80088f0:	4605      	mov	r5, r0
	if (status == VL53L1_ERROR_NONE) {
 80088f2:	b9fd      	cbnz	r5, 8008934 <VL53L1_data_init+0x148>
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 80088f4:	f8b4 315e 	ldrh.w	r3, [r4, #350]	; 0x15e
		pstatic->dss_config__target_total_rate_mcps =
 80088f8:	f8a4 8164 	strh.w	r8, [r4, #356]	; 0x164
		pdev->dss_config__target_total_rate_mcps    =
 80088fc:	f8a4 8018 	strh.w	r8, [r4, #24]
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8008900:	2b00      	cmp	r3, #0
 8008902:	d07e      	beq.n	8008a02 <VL53L1_data_init+0x216>
		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8008904:	9805      	ldr	r0, [sp, #20]
 8008906:	60a0      	str	r0, [r4, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8008908:	f8c4 a00c 	str.w	sl, [r4, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 800890c:	f8c4 b010 	str.w	fp, [r4, #16]
		status =
 8008910:	465a      	mov	r2, fp
 8008912:	e88d 00c0 	stmia.w	sp, {r6, r7}
 8008916:	4651      	mov	r1, sl
 8008918:	f002 f9a2 	bl	800ac60 <VL53L1_calc_timeout_register_values>
	if (status == VL53L1_ERROR_NONE)
 800891c:	4605      	mov	r5, r0
 800891e:	b948      	cbnz	r0, 8008934 <VL53L1_data_init+0x148>
	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8008920:	f8b4 32b4 	ldrh.w	r3, [r4, #692]	; 0x2b4
 8008924:	2b00      	cmp	r3, #0
 8008926:	d06c      	beq.n	8008a02 <VL53L1_data_init+0x216>
			inter_measurement_period_ms *
 8008928:	fb09 f303 	mul.w	r3, r9, r3
		pdev->tim_cfg.system__intermeasurement_period = \
 800892c:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8008930:	f8c4 9014 	str.w	r9, [r4, #20]
	VL53L1_low_power_auto_data_init(
 8008934:	4620      	mov	r0, r4
 8008936:	f002 fa5d 	bl	800adf4 <VL53L1_low_power_auto_data_init>
}
 800893a:	4628      	mov	r0, r5
 800893c:	b007      	add	sp, #28
 800893e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		status = VL53L1_preset_mode_standard_ranging(
 8008942:	e88d 0022 	stmia.w	sp, {r1, r5}
 8008946:	463a      	mov	r2, r7
 8008948:	4631      	mov	r1, r6
 800894a:	f000 ff6b 	bl	8009824 <VL53L1_preset_mode_standard_ranging>
 800894e:	4605      	mov	r5, r0
 8008950:	e7cf      	b.n	80088f2 <VL53L1_data_init+0x106>
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8008952:	e88d 0022 	stmia.w	sp, {r1, r5}
 8008956:	463a      	mov	r2, r7
 8008958:	4631      	mov	r1, r6
 800895a:	f001 f801 	bl	8009960 <VL53L1_preset_mode_standard_ranging_short_range>
 800895e:	4605      	mov	r5, r0
 8008960:	e7c7      	b.n	80088f2 <VL53L1_data_init+0x106>
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8008962:	e88d 0022 	stmia.w	sp, {r1, r5}
 8008966:	463a      	mov	r2, r7
 8008968:	4631      	mov	r1, r6
 800896a:	f001 f893 	bl	8009a94 <VL53L1_preset_mode_standard_ranging_long_range>
 800896e:	4605      	mov	r5, r0
 8008970:	e7bf      	b.n	80088f2 <VL53L1_data_init+0x106>
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8008972:	e88d 0022 	stmia.w	sp, {r1, r5}
 8008976:	463a      	mov	r2, r7
 8008978:	4631      	mov	r1, r6
 800897a:	f001 f927 	bl	8009bcc <VL53L1_preset_mode_standard_ranging_mm1_cal>
 800897e:	4605      	mov	r5, r0
 8008980:	e7b7      	b.n	80088f2 <VL53L1_data_init+0x106>
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 8008982:	e88d 0022 	stmia.w	sp, {r1, r5}
 8008986:	463a      	mov	r2, r7
 8008988:	4631      	mov	r1, r6
 800898a:	f001 f9c3 	bl	8009d14 <VL53L1_preset_mode_standard_ranging_mm2_cal>
 800898e:	4605      	mov	r5, r0
 8008990:	e7af      	b.n	80088f2 <VL53L1_data_init+0x106>
		status = VL53L1_preset_mode_timed_ranging(
 8008992:	e88d 0022 	stmia.w	sp, {r1, r5}
 8008996:	463a      	mov	r2, r7
 8008998:	4631      	mov	r1, r6
 800899a:	f001 fa5f 	bl	8009e5c <VL53L1_preset_mode_timed_ranging>
 800899e:	4605      	mov	r5, r0
 80089a0:	e7a7      	b.n	80088f2 <VL53L1_data_init+0x106>
		status = VL53L1_preset_mode_timed_ranging_short_range(
 80089a2:	e88d 0022 	stmia.w	sp, {r1, r5}
 80089a6:	463a      	mov	r2, r7
 80089a8:	4631      	mov	r1, r6
 80089aa:	f001 faf9 	bl	8009fa0 <VL53L1_preset_mode_timed_ranging_short_range>
 80089ae:	4605      	mov	r5, r0
 80089b0:	e79f      	b.n	80088f2 <VL53L1_data_init+0x106>
		status = VL53L1_preset_mode_timed_ranging_long_range(
 80089b2:	e88d 0022 	stmia.w	sp, {r1, r5}
 80089b6:	463a      	mov	r2, r7
 80089b8:	4631      	mov	r1, r6
 80089ba:	f001 fb91 	bl	800a0e0 <VL53L1_preset_mode_timed_ranging_long_range>
 80089be:	4605      	mov	r5, r0
 80089c0:	e797      	b.n	80088f2 <VL53L1_data_init+0x106>
		status = VL53L1_preset_mode_olt(
 80089c2:	e88d 0022 	stmia.w	sp, {r1, r5}
 80089c6:	463a      	mov	r2, r7
 80089c8:	4631      	mov	r1, r6
 80089ca:	f001 fec5 	bl	800a758 <VL53L1_preset_mode_olt>
 80089ce:	4605      	mov	r5, r0
 80089d0:	e78f      	b.n	80088f2 <VL53L1_data_init+0x106>
		status = VL53L1_preset_mode_singleshot_ranging(
 80089d2:	e88d 0022 	stmia.w	sp, {r1, r5}
 80089d6:	463a      	mov	r2, r7
 80089d8:	4631      	mov	r1, r6
 80089da:	f001 fe1f 	bl	800a61c <VL53L1_preset_mode_singleshot_ranging>
 80089de:	4605      	mov	r5, r0
 80089e0:	e787      	b.n	80088f2 <VL53L1_data_init+0x106>
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 80089e2:	e88d 4022 	stmia.w	sp, {r1, r5, lr}
 80089e6:	463a      	mov	r2, r7
 80089e8:	4631      	mov	r1, r6
 80089ea:	f001 fcc1 	bl	800a370 <VL53L1_preset_mode_low_power_auto_short_ranging>
 80089ee:	4605      	mov	r5, r0
 80089f0:	e77f      	b.n	80088f2 <VL53L1_data_init+0x106>
		status = VL53L1_preset_mode_low_power_auto_ranging(
 80089f2:	e88d 4022 	stmia.w	sp, {r1, r5, lr}
 80089f6:	463a      	mov	r2, r7
 80089f8:	4631      	mov	r1, r6
 80089fa:	f001 fc0f 	bl	800a21c <VL53L1_preset_mode_low_power_auto_ranging>
 80089fe:	4605      	mov	r5, r0
 8008a00:	e777      	b.n	80088f2 <VL53L1_data_init+0x106>
	VL53L1_low_power_auto_data_init(
 8008a02:	4620      	mov	r0, r4
 8008a04:	f002 f9f6 	bl	800adf4 <VL53L1_low_power_auto_data_init>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8008a08:	f06f 050e 	mvn.w	r5, #14
}
 8008a0c:	4628      	mov	r0, r5
 8008a0e:	b007      	add	sp, #28
 8008a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		status = VL53L1_ERROR_INVALID_PARAMS;
 8008a14:	f06f 0503 	mvn.w	r5, #3
 8008a18:	e78c      	b.n	8008934 <VL53L1_data_init+0x148>
 8008a1a:	bf00      	nop

08008a1c <VL53L1_set_inter_measurement_period_ms>:
	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8008a1c:	f8b0 32b4 	ldrh.w	r3, [r0, #692]	; 0x2b4
 8008a20:	b133      	cbz	r3, 8008a30 <VL53L1_set_inter_measurement_period_ms+0x14>
			inter_measurement_period_ms *
 8008a22:	fb01 f303 	mul.w	r3, r1, r3
		pdev->tim_cfg.system__intermeasurement_period = \
 8008a26:	f8c0 31ac 	str.w	r3, [r0, #428]	; 0x1ac
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8008a2a:	6141      	str	r1, [r0, #20]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008a2c:	2000      	movs	r0, #0
}
 8008a2e:	4770      	bx	lr
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8008a30:	f06f 000e 	mvn.w	r0, #14
 8008a34:	4770      	bx	lr
 8008a36:	bf00      	nop

08008a38 <VL53L1_get_inter_measurement_period_ms>:
	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8008a38:	f8b0 22b4 	ldrh.w	r2, [r0, #692]	; 0x2b4
 8008a3c:	b132      	cbz	r2, 8008a4c <VL53L1_get_inter_measurement_period_ms+0x14>
			pdev->tim_cfg.system__intermeasurement_period /
 8008a3e:	f8d0 31ac 	ldr.w	r3, [r0, #428]	; 0x1ac
 8008a42:	fbb3 f3f2 	udiv	r3, r3, r2
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008a46:	2000      	movs	r0, #0
		*pinter_measurement_period_ms = \
 8008a48:	600b      	str	r3, [r1, #0]
}
 8008a4a:	4770      	bx	lr
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8008a4c:	f06f 000e 	mvn.w	r0, #14
 8008a50:	4770      	bx	lr
 8008a52:	bf00      	nop

08008a54 <VL53L1_set_timeouts_us>:
{
 8008a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8008a58:	f8b0 e15e 	ldrh.w	lr, [r0, #350]	; 0x15e
{
 8008a5c:	b082      	sub	sp, #8
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8008a5e:	f1be 0f00 	cmp.w	lr, #0
 8008a62:	d104      	bne.n	8008a6e <VL53L1_set_timeouts_us+0x1a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8008a64:	f06f 000e 	mvn.w	r0, #14
}
 8008a68:	b002      	add	sp, #8
 8008a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a6e:	4604      	mov	r4, r0
			VL53L1_calc_timeout_register_values(
 8008a70:	f500 7cc2 	add.w	ip, r0, #388	; 0x184
 8008a74:	461f      	mov	r7, r3
 8008a76:	4616      	mov	r6, r2
 8008a78:	460d      	mov	r5, r1
 8008a7a:	f500 78ce 	add.w	r8, r0, #412	; 0x19c
		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8008a7e:	60a1      	str	r1, [r4, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8008a80:	60e2      	str	r2, [r4, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8008a82:	6123      	str	r3, [r4, #16]
		status =
 8008a84:	463a      	mov	r2, r7
 8008a86:	4673      	mov	r3, lr
 8008a88:	4631      	mov	r1, r6
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	f8cd 8004 	str.w	r8, [sp, #4]
 8008a90:	f8cd c000 	str.w	ip, [sp]
 8008a94:	f002 f8e4 	bl	800ac60 <VL53L1_calc_timeout_register_values>
}
 8008a98:	b002      	add	sp, #8
 8008a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a9e:	bf00      	nop

08008aa0 <VL53L1_get_timeouts_us>:
{
 8008aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aa4:	4604      	mov	r4, r0
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8008aa6:	f8b0 015e 	ldrh.w	r0, [r0, #350]	; 0x15e
 8008aaa:	b360      	cbz	r0, 8008b06 <VL53L1_get_timeouts_us+0x66>
 8008aac:	460f      	mov	r7, r1
		macro_period_us =
 8008aae:	f894 11a2 	ldrb.w	r1, [r4, #418]	; 0x1a2
 8008ab2:	4616      	mov	r6, r2
 8008ab4:	461d      	mov	r5, r3
 8008ab6:	f002 f87d 	bl	800abb4 <VL53L1_calc_macro_period_us>
 8008aba:	4680      	mov	r8, r0
			VL53L1_calc_timeout_us(
 8008abc:	4601      	mov	r1, r0
 8008abe:	f894 018b 	ldrb.w	r0, [r4, #395]	; 0x18b
 8008ac2:	f002 f8b5 	bl	800ac30 <VL53L1_calc_timeout_us>
		*pphasecal_config_timeout_us =
 8008ac6:	6038      	str	r0, [r7, #0]
		timeout_encoded =
 8008ac8:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8008acc:	f894 019d 	ldrb.w	r0, [r4, #413]	; 0x19d
		timeout_encoded = (timeout_encoded << 8) +
 8008ad0:	eb00 2003 	add.w	r0, r0, r3, lsl #8
			VL53L1_calc_decoded_timeout_us(
 8008ad4:	4641      	mov	r1, r8
 8008ad6:	b280      	uxth	r0, r0
 8008ad8:	f002 f8b4 	bl	800ac44 <VL53L1_calc_decoded_timeout_us>
		*pmm_config_timeout_us =
 8008adc:	6030      	str	r0, [r6, #0]
		timeout_encoded =
 8008ade:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8008ae2:	f894 01a1 	ldrb.w	r0, [r4, #417]	; 0x1a1
		timeout_encoded = (timeout_encoded << 8) +
 8008ae6:	eb00 2003 	add.w	r0, r0, r3, lsl #8
			VL53L1_calc_decoded_timeout_us(
 8008aea:	4641      	mov	r1, r8
 8008aec:	b280      	uxth	r0, r0
 8008aee:	f002 f8a9 	bl	800ac44 <VL53L1_calc_decoded_timeout_us>
		*prange_config_timeout_us =
 8008af2:	6028      	str	r0, [r5, #0]
		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	60a3      	str	r3, [r4, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8008af8:	6833      	ldr	r3, [r6, #0]
 8008afa:	60e3      	str	r3, [r4, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8008afc:	682b      	ldr	r3, [r5, #0]
 8008afe:	6123      	str	r3, [r4, #16]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008b00:	2000      	movs	r0, #0
}
 8008b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8008b06:	f06f 000e 	mvn.w	r0, #14
 8008b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b0e:	bf00      	nop

08008b10 <VL53L1_get_sequence_config_bit>:
	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8008b10:	2907      	cmp	r1, #7
 8008b12:	d80f      	bhi.n	8008b34 <VL53L1_get_sequence_config_bit+0x24>
		*pvalue =
 8008b14:	f890 31c5 	ldrb.w	r3, [r0, #453]	; 0x1c5
		if (bit_id > 0) {
 8008b18:	b139      	cbz	r1, 8008b2a <VL53L1_get_sequence_config_bit+0x1a>
			bit_mask  = 0x01 << bit_id;
 8008b1a:	2001      	movs	r0, #1
 8008b1c:	4088      	lsls	r0, r1
			*pvalue  = *pvalue >> bit_id;
 8008b1e:	4018      	ands	r0, r3
 8008b20:	fa40 f101 	asr.w	r1, r0, r1
 8008b24:	7011      	strb	r1, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008b26:	2000      	movs	r0, #0
 8008b28:	4770      	bx	lr
		*pvalue =
 8008b2a:	f003 0301 	and.w	r3, r3, #1
 8008b2e:	7013      	strb	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008b30:	4608      	mov	r0, r1
}
 8008b32:	4770      	bx	lr
		status = VL53L1_ERROR_INVALID_PARAMS;
 8008b34:	f06f 0003 	mvn.w	r0, #3
 8008b38:	4770      	bx	lr
 8008b3a:	bf00      	nop

08008b3c <VL53L1_set_user_zone>:
{
 8008b3c:	b538      	push	{r3, r4, r5, lr}
 8008b3e:	460c      	mov	r4, r1
 8008b40:	4605      	mov	r5, r0
	VL53L1_encode_row_col(
 8008b42:	f200 12c3 	addw	r2, r0, #451	; 0x1c3
 8008b46:	7809      	ldrb	r1, [r1, #0]
 8008b48:	7860      	ldrb	r0, [r4, #1]
 8008b4a:	f002 f93d 	bl	800adc8 <VL53L1_encode_row_col>
	VL53L1_encode_zone_size(
 8008b4e:	78a0      	ldrb	r0, [r4, #2]
 8008b50:	78e1      	ldrb	r1, [r4, #3]
 8008b52:	f505 72e2 	add.w	r2, r5, #452	; 0x1c4
 8008b56:	f002 f949 	bl	800adec <VL53L1_encode_zone_size>
}
 8008b5a:	2000      	movs	r0, #0
 8008b5c:	bd38      	pop	{r3, r4, r5, pc}
 8008b5e:	bf00      	nop

08008b60 <VL53L1_get_user_zone>:
{
 8008b60:	b538      	push	{r3, r4, r5, lr}
 8008b62:	4605      	mov	r5, r0
 8008b64:	460c      	mov	r4, r1
	VL53L1_decode_row_col(
 8008b66:	460a      	mov	r2, r1
 8008b68:	f890 01c3 	ldrb.w	r0, [r0, #451]	; 0x1c3
 8008b6c:	3101      	adds	r1, #1
 8008b6e:	f002 f9e5 	bl	800af3c <VL53L1_decode_row_col>
	VL53L1_decode_zone_size(
 8008b72:	f895 01c4 	ldrb.w	r0, [r5, #452]	; 0x1c4
 8008b76:	1ce2      	adds	r2, r4, #3
 8008b78:	1ca1      	adds	r1, r4, #2
 8008b7a:	f002 f931 	bl	800ade0 <VL53L1_decode_zone_size>
}
 8008b7e:	2000      	movs	r0, #0
 8008b80:	bd38      	pop	{r3, r4, r5, pc}
 8008b82:	bf00      	nop

08008b84 <VL53L1_get_preset_mode_timing_cfg>:
	switch (device_preset_mode) {
 8008b84:	3901      	subs	r1, #1
{
 8008b86:	b410      	push	{r4}
	switch (device_preset_mode) {
 8008b88:	2925      	cmp	r1, #37	; 0x25
 8008b8a:	d84a      	bhi.n	8008c22 <VL53L1_get_preset_mode_timing_cfg+0x9e>
 8008b8c:	e8df f001 	tbb	[pc, r1]
 8008b90:	37373737 	.word	0x37373737
 8008b94:	25252537 	.word	0x25252537
 8008b98:	49494949 	.word	0x49494949
 8008b9c:	49494949 	.word	0x49494949
 8008ba0:	49492537 	.word	0x49492537
 8008ba4:	49494949 	.word	0x49494949
 8008ba8:	49494949 	.word	0x49494949
 8008bac:	49494949 	.word	0x49494949
 8008bb0:	13494949 	.word	0x13494949
 8008bb4:	1313      	.short	0x1313
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8008bb6:	f8b0 40cc 	ldrh.w	r4, [r0, #204]	; 0xcc
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8008bba:	f8d0 10d4 	ldr.w	r1, [r0, #212]	; 0xd4
		*pdss_config__target_total_rate_mcps =
 8008bbe:	8014      	strh	r4, [r2, #0]
		*pphasecal_config_timeout_us =
 8008bc0:	6019      	str	r1, [r3, #0]
		*pmm_config_timeout_us =
 8008bc2:	9a01      	ldr	r2, [sp, #4]
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8008bc4:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
		*pmm_config_timeout_us =
 8008bc8:	6013      	str	r3, [r2, #0]
		*prange_config_timeout_us =
 8008bca:	9a02      	ldr	r2, [sp, #8]
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 8008bcc:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
		*prange_config_timeout_us =
 8008bd0:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008bd2:	2000      	movs	r0, #0
}
 8008bd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bd8:	4770      	bx	lr
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8008bda:	f8b0 40cc 	ldrh.w	r4, [r0, #204]	; 0xcc
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8008bde:	f8d0 10d4 	ldr.w	r1, [r0, #212]	; 0xd4
		*pdss_config__target_total_rate_mcps =
 8008be2:	8014      	strh	r4, [r2, #0]
		*pphasecal_config_timeout_us =
 8008be4:	6019      	str	r1, [r3, #0]
		*pmm_config_timeout_us =
 8008be6:	9a01      	ldr	r2, [sp, #4]
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 8008be8:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
		*pmm_config_timeout_us =
 8008bec:	6013      	str	r3, [r2, #0]
		*prange_config_timeout_us =
 8008bee:	9a02      	ldr	r2, [sp, #8]
				pdev->tuning_parms.tp_range_timeout_timed_us;
 8008bf0:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
		*prange_config_timeout_us =
 8008bf4:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008bf6:	2000      	movs	r0, #0
}
 8008bf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bfc:	4770      	bx	lr
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 8008bfe:	f8b0 40ca 	ldrh.w	r4, [r0, #202]	; 0xca
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8008c02:	f8d0 10d0 	ldr.w	r1, [r0, #208]	; 0xd0
		*pdss_config__target_total_rate_mcps =
 8008c06:	8014      	strh	r4, [r2, #0]
		*pphasecal_config_timeout_us =
 8008c08:	6019      	str	r1, [r3, #0]
		*pmm_config_timeout_us =
 8008c0a:	9a01      	ldr	r2, [sp, #4]
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 8008c0c:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
		*pmm_config_timeout_us =
 8008c10:	6013      	str	r3, [r2, #0]
		*prange_config_timeout_us =
 8008c12:	9a02      	ldr	r2, [sp, #8]
				pdev->tuning_parms.tp_range_timeout_lite_us;
 8008c14:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
		*prange_config_timeout_us =
 8008c18:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008c1a:	2000      	movs	r0, #0
}
 8008c1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c20:	4770      	bx	lr
		status = VL53L1_ERROR_INVALID_PARAMS;
 8008c22:	f06f 0003 	mvn.w	r0, #3
}
 8008c26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <VL53L1_set_preset_mode>:
{
 8008c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c30:	b085      	sub	sp, #20
 8008c32:	460d      	mov	r5, r1
	pdev->preset_mode                 = device_preset_mode;
 8008c34:	7041      	strb	r1, [r0, #1]
{
 8008c36:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8008c38:	990e      	ldr	r1, [sp, #56]	; 0x38
{
 8008c3a:	9e10      	ldr	r6, [sp, #64]	; 0x40
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8008c3c:	60c1      	str	r1, [r0, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8008c3e:	6107      	str	r7, [r0, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8008c40:	6146      	str	r6, [r0, #20]
	VL53L1_init_ll_driver_state(
 8008c42:	2103      	movs	r1, #3
{
 8008c44:	4604      	mov	r4, r0
 8008c46:	4691      	mov	r9, r2
 8008c48:	469a      	mov	sl, r3
	VL53L1_init_ll_driver_state(
 8008c4a:	f001 fe33 	bl	800a8b4 <VL53L1_init_ll_driver_state>
	switch (device_preset_mode) {
 8008c4e:	1e6a      	subs	r2, r5, #1
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8008c50:	f504 70b2 	add.w	r0, r4, #356	; 0x164
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8008c54:	f504 75c2 	add.w	r5, r4, #388	; 0x184
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8008c58:	f504 7bce 	add.w	fp, r4, #412	; 0x19c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8008c5c:	f504 73da 	add.w	r3, r4, #436	; 0x1b4
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8008c60:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8008c64:	f104 0ea4 	add.w	lr, r4, #164	; 0xa4
	VL53L1_low_power_auto_data_t  *plpadata      =
 8008c68:	f504 7c39 	add.w	ip, r4, #740	; 0x2e4
	switch (device_preset_mode) {
 8008c6c:	2a25      	cmp	r2, #37	; 0x25
 8008c6e:	f200 809c 	bhi.w	8008daa <VL53L1_set_preset_mode+0x17e>
 8008c72:	e8df f002 	tbb	[pc, r2]
 8008c76:	443d      	.short	0x443d
 8008c78:	6059524b 	.word	0x6059524b
 8008c7c:	9a9a6e67 	.word	0x9a9a6e67
 8008c80:	9a9a9a9a 	.word	0x9a9a9a9a
 8008c84:	7c759a9a 	.word	0x7c759a9a
 8008c88:	9a9a9a9a 	.word	0x9a9a9a9a
 8008c8c:	9a9a9a9a 	.word	0x9a9a9a9a
 8008c90:	9a9a9a9a 	.word	0x9a9a9a9a
 8008c94:	9a9a9a9a 	.word	0x9a9a9a9a
 8008c98:	138c839a 	.word	0x138c839a
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 8008c9c:	e88d 4002 	stmia.w	sp, {r1, lr}
 8008ca0:	f8cd c008 	str.w	ip, [sp, #8]
 8008ca4:	465a      	mov	r2, fp
 8008ca6:	4629      	mov	r1, r5
 8008ca8:	f001 fc0e 	bl	800a4c8 <VL53L1_preset_mode_low_power_auto_long_ranging>
	if (status == VL53L1_ERROR_NONE) {
 8008cac:	b9e8      	cbnz	r0, 8008cea <VL53L1_set_preset_mode+0xbe>
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8008cae:	f8b4 315e 	ldrh.w	r3, [r4, #350]	; 0x15e
		pstatic->dss_config__target_total_rate_mcps =
 8008cb2:	f8a4 9164 	strh.w	r9, [r4, #356]	; 0x164
		pdev->dss_config__target_total_rate_mcps    =
 8008cb6:	f8a4 9018 	strh.w	r9, [r4, #24]
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d070      	beq.n	8008da0 <VL53L1_set_preset_mode+0x174>
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8008cbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cc0:	60e2      	str	r2, [r4, #12]
		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8008cc2:	f8c4 a008 	str.w	sl, [r4, #8]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8008cc6:	6127      	str	r7, [r4, #16]
		status =
 8008cc8:	463a      	mov	r2, r7
 8008cca:	e88d 0820 	stmia.w	sp, {r5, fp}
 8008cce:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008cd0:	4650      	mov	r0, sl
 8008cd2:	f001 ffc5 	bl	800ac60 <VL53L1_calc_timeout_register_values>
	if (status == VL53L1_ERROR_NONE)
 8008cd6:	b940      	cbnz	r0, 8008cea <VL53L1_set_preset_mode+0xbe>
	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8008cd8:	f8b4 32b4 	ldrh.w	r3, [r4, #692]	; 0x2b4
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d05f      	beq.n	8008da0 <VL53L1_set_preset_mode+0x174>
			inter_measurement_period_ms *
 8008ce0:	fb06 f303 	mul.w	r3, r6, r3
		pdev->tim_cfg.system__intermeasurement_period = \
 8008ce4:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8008ce8:	6166      	str	r6, [r4, #20]
}
 8008cea:	b005      	add	sp, #20
 8008cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		status = VL53L1_preset_mode_standard_ranging(
 8008cf0:	e88d 4002 	stmia.w	sp, {r1, lr}
 8008cf4:	465a      	mov	r2, fp
 8008cf6:	4629      	mov	r1, r5
 8008cf8:	f000 fd94 	bl	8009824 <VL53L1_preset_mode_standard_ranging>
		break;
 8008cfc:	e7d6      	b.n	8008cac <VL53L1_set_preset_mode+0x80>
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8008cfe:	e88d 4002 	stmia.w	sp, {r1, lr}
 8008d02:	465a      	mov	r2, fp
 8008d04:	4629      	mov	r1, r5
 8008d06:	f000 fe2b 	bl	8009960 <VL53L1_preset_mode_standard_ranging_short_range>
		break;
 8008d0a:	e7cf      	b.n	8008cac <VL53L1_set_preset_mode+0x80>
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8008d0c:	e88d 4002 	stmia.w	sp, {r1, lr}
 8008d10:	465a      	mov	r2, fp
 8008d12:	4629      	mov	r1, r5
 8008d14:	f000 febe 	bl	8009a94 <VL53L1_preset_mode_standard_ranging_long_range>
		break;
 8008d18:	e7c8      	b.n	8008cac <VL53L1_set_preset_mode+0x80>
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8008d1a:	e88d 4002 	stmia.w	sp, {r1, lr}
 8008d1e:	465a      	mov	r2, fp
 8008d20:	4629      	mov	r1, r5
 8008d22:	f000 ff53 	bl	8009bcc <VL53L1_preset_mode_standard_ranging_mm1_cal>
		break;
 8008d26:	e7c1      	b.n	8008cac <VL53L1_set_preset_mode+0x80>
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 8008d28:	e88d 4002 	stmia.w	sp, {r1, lr}
 8008d2c:	465a      	mov	r2, fp
 8008d2e:	4629      	mov	r1, r5
 8008d30:	f000 fff0 	bl	8009d14 <VL53L1_preset_mode_standard_ranging_mm2_cal>
		break;
 8008d34:	e7ba      	b.n	8008cac <VL53L1_set_preset_mode+0x80>
		status = VL53L1_preset_mode_timed_ranging(
 8008d36:	e88d 4002 	stmia.w	sp, {r1, lr}
 8008d3a:	465a      	mov	r2, fp
 8008d3c:	4629      	mov	r1, r5
 8008d3e:	f001 f88d 	bl	8009e5c <VL53L1_preset_mode_timed_ranging>
		break;
 8008d42:	e7b3      	b.n	8008cac <VL53L1_set_preset_mode+0x80>
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8008d44:	e88d 4002 	stmia.w	sp, {r1, lr}
 8008d48:	465a      	mov	r2, fp
 8008d4a:	4629      	mov	r1, r5
 8008d4c:	f001 f928 	bl	8009fa0 <VL53L1_preset_mode_timed_ranging_short_range>
		break;
 8008d50:	e7ac      	b.n	8008cac <VL53L1_set_preset_mode+0x80>
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8008d52:	e88d 4002 	stmia.w	sp, {r1, lr}
 8008d56:	465a      	mov	r2, fp
 8008d58:	4629      	mov	r1, r5
 8008d5a:	f001 f9c1 	bl	800a0e0 <VL53L1_preset_mode_timed_ranging_long_range>
		break;
 8008d5e:	e7a5      	b.n	8008cac <VL53L1_set_preset_mode+0x80>
		status = VL53L1_preset_mode_olt(
 8008d60:	e88d 4002 	stmia.w	sp, {r1, lr}
 8008d64:	465a      	mov	r2, fp
 8008d66:	4629      	mov	r1, r5
 8008d68:	f001 fcf6 	bl	800a758 <VL53L1_preset_mode_olt>
		break;
 8008d6c:	e79e      	b.n	8008cac <VL53L1_set_preset_mode+0x80>
		status = VL53L1_preset_mode_singleshot_ranging(
 8008d6e:	e88d 4002 	stmia.w	sp, {r1, lr}
 8008d72:	465a      	mov	r2, fp
 8008d74:	4629      	mov	r1, r5
 8008d76:	f001 fc51 	bl	800a61c <VL53L1_preset_mode_singleshot_ranging>
		break;
 8008d7a:	e797      	b.n	8008cac <VL53L1_set_preset_mode+0x80>
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 8008d7c:	e88d 4002 	stmia.w	sp, {r1, lr}
 8008d80:	f8cd c008 	str.w	ip, [sp, #8]
 8008d84:	465a      	mov	r2, fp
 8008d86:	4629      	mov	r1, r5
 8008d88:	f001 faf2 	bl	800a370 <VL53L1_preset_mode_low_power_auto_short_ranging>
		break;
 8008d8c:	e78e      	b.n	8008cac <VL53L1_set_preset_mode+0x80>
		status = VL53L1_preset_mode_low_power_auto_ranging(
 8008d8e:	e88d 4002 	stmia.w	sp, {r1, lr}
 8008d92:	f8cd c008 	str.w	ip, [sp, #8]
 8008d96:	465a      	mov	r2, fp
 8008d98:	4629      	mov	r1, r5
 8008d9a:	f001 fa3f 	bl	800a21c <VL53L1_preset_mode_low_power_auto_ranging>
		break;
 8008d9e:	e785      	b.n	8008cac <VL53L1_set_preset_mode+0x80>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8008da0:	f06f 000e 	mvn.w	r0, #14
}
 8008da4:	b005      	add	sp, #20
 8008da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		status = VL53L1_ERROR_INVALID_PARAMS;
 8008daa:	f06f 0003 	mvn.w	r0, #3
 8008dae:	e79c      	b.n	8008cea <VL53L1_set_preset_mode+0xbe>

08008db0 <VL53L1_get_lite_sigma_threshold>:
			pdev->tim_cfg.range_config__sigma_thresh;
 8008db0:	f8b0 31a6 	ldrh.w	r3, [r0, #422]	; 0x1a6
	*plite_sigma =
 8008db4:	800b      	strh	r3, [r1, #0]
}
 8008db6:	2000      	movs	r0, #0
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop

08008dbc <VL53L1_set_lite_sigma_threshold>:
	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 8008dbc:	f8a0 11a6 	strh.w	r1, [r0, #422]	; 0x1a6
}
 8008dc0:	2000      	movs	r0, #0
 8008dc2:	4770      	bx	lr

08008dc4 <VL53L1_get_lite_min_count_rate>:
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 8008dc4:	f8b0 31a8 	ldrh.w	r3, [r0, #424]	; 0x1a8
	*plite_mincountrate =
 8008dc8:	800b      	strh	r3, [r1, #0]
}
 8008dca:	2000      	movs	r0, #0
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop

08008dd0 <VL53L1_set_lite_min_count_rate>:
	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 8008dd0:	f8a0 11a8 	strh.w	r1, [r0, #424]	; 0x1a8
}
 8008dd4:	2000      	movs	r0, #0
 8008dd6:	4770      	bx	lr

08008dd8 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 8008dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ddc:	4604      	mov	r4, r0
	pdev->measurement_mode = measurement_mode;

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 8008dde:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 8008de2:	f890 02e6 	ldrb.w	r0, [r0, #742]	; 0x2e6
	pdev->measurement_mode = measurement_mode;
 8008de6:	70a1      	strb	r1, [r4, #2]
		(psystem->system__mode_start &
 8008de8:	f003 030f 	and.w	r3, r3, #15
	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 8008dec:	28ff      	cmp	r0, #255	; 0xff
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8008dee:	ea41 0103 	orr.w	r1, r1, r3
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8008df2:	bf04      	itt	eq
 8008df4:	2300      	moveq	r3, #0
 8008df6:	f884 32e6 	strbeq.w	r3, [r4, #742]	; 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8008dfa:	f8d4 32e4 	ldr.w	r3, [r4, #740]	; 0x2e4
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8008dfe:	f8b4 6142 	ldrh.w	r6, [r4, #322]	; 0x142
	psystem->system__mode_start =
 8008e02:	f884 11cc 	strb.w	r1, [r4, #460]	; 0x1cc
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8008e06:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008e0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
{
 8008e12:	b0c0      	sub	sp, #256	; 0x100
 8008e14:	4615      	mov	r5, r2
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8008e16:	f8a4 617c 	strh.w	r6, [r4, #380]	; 0x17c
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8008e1a:	f000 8090 	beq.w	8008f3e <VL53L1_init_and_start_range+0x166>
			device_config_level =
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8008e1e:	4a65      	ldr	r2, [pc, #404]	; (8008fb4 <VL53L1_init_and_start_range+0x1dc>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	f000 80ae 	beq.w	8008f82 <VL53L1_init_and_start_range+0x1aa>
 8008e26:	1e6b      	subs	r3, r5, #1
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	2b05      	cmp	r3, #5
 8008e2c:	f240 80b6 	bls.w	8008f9c <VL53L1_init_and_start_range+0x1c4>
		break;
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 8008e30:	2605      	movs	r6, #5
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8008e32:	2783      	movs	r7, #131	; 0x83

	/* Initialize buffer */

	pbuffer = &buffer[0];
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
		*pbuffer++ = 0;
 8008e34:	1e72      	subs	r2, r6, #1
 8008e36:	b292      	uxth	r2, r2
 8008e38:	2e00      	cmp	r6, #0
 8008e3a:	f102 0201 	add.w	r2, r2, #1
 8008e3e:	4668      	mov	r0, sp
 8008e40:	bf08      	it	eq
 8008e42:	2201      	moveq	r2, #1
 8008e44:	2100      	movs	r1, #0
 8008e46:	46e8      	mov	r8, sp
 8008e48:	f00a fbb3 	bl	80135b2 <memset>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 8008e4c:	2d05      	cmp	r5, #5
 8008e4e:	d823      	bhi.n	8008e98 <VL53L1_init_and_start_range+0xc0>
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8008e50:	d02d      	beq.n	8008eae <VL53L1_init_and_start_range+0xd6>
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8008e52:	2d04      	cmp	r5, #4
 8008e54:	d036      	beq.n	8008ec4 <VL53L1_init_and_start_range+0xec>
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8008e56:	2d03      	cmp	r5, #3
 8008e58:	d03f      	beq.n	8008eda <VL53L1_init_and_start_range+0x102>
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8008e5a:	2d02      	cmp	r5, #2
 8008e5c:	d048      	beq.n	8008ef0 <VL53L1_init_and_start_range+0x118>
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8008e5e:	2d00      	cmp	r5, #0
 8008e60:	d151      	bne.n	8008f06 <VL53L1_init_and_start_range+0x12e>
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8008e62:	f1c7 0283 	rsb	r2, r7, #131	; 0x83
				VL53L1_SYSTEM_CONTROL_I2C_INDEX - i2c_index;

		status =
 8008e66:	fa18 f282 	uxtah	r2, r8, r2
 8008e6a:	2105      	movs	r1, #5
 8008e6c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
 8008e70:	f002 fac8 	bl	800b404 <VL53L1_i2c_encode_system_control>
				&buffer[i2c_buffer_offset_bytes]);
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 8008e74:	b968      	cbnz	r0, 8008e92 <VL53L1_init_and_start_range+0xba>
		status =
 8008e76:	4633      	mov	r3, r6
 8008e78:	4642      	mov	r2, r8
 8008e7a:	4639      	mov	r1, r7
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	f008 fad5 	bl	801142c <VL53L1_WriteMulti>
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 8008e82:	b930      	cbnz	r0, 8008e92 <VL53L1_init_and_start_range+0xba>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 8008e84:	4620      	mov	r0, r4
 8008e86:	f001 fd29 	bl	800a8dc <VL53L1_update_ll_driver_rd_state>

	if (status == VL53L1_ERROR_NONE)
 8008e8a:	b910      	cbnz	r0, 8008e92 <VL53L1_init_and_start_range+0xba>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	f001 fda1 	bl	800a9d4 <VL53L1_update_ll_driver_cfg_state>

	LOG_FUNCTION_END(status);

	return status;
}
 8008e92:	b040      	add	sp, #256	; 0x100
 8008e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		i2c_buffer_offset_bytes = \
 8008e98:	f1c7 0201 	rsb	r2, r7, #1
		status =
 8008e9c:	fa18 f282 	uxtah	r2, r8, r2
 8008ea0:	210b      	movs	r1, #11
 8008ea2:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 8008ea6:	f002 f85d 	bl	800af64 <VL53L1_i2c_encode_static_nvm_managed>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8008eaa:	2800      	cmp	r0, #0
 8008eac:	d1f1      	bne.n	8008e92 <VL53L1_init_and_start_range+0xba>
		i2c_buffer_offset_bytes = \
 8008eae:	f1c7 020d 	rsb	r2, r7, #13
		status =
 8008eb2:	fa18 f282 	uxtah	r2, r8, r2
 8008eb6:	2117      	movs	r1, #23
 8008eb8:	f104 0042 	add.w	r0, r4, #66	; 0x42
 8008ebc:	f002 f8ba 	bl	800b034 <VL53L1_i2c_encode_customer_nvm_managed>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	d1e6      	bne.n	8008e92 <VL53L1_init_and_start_range+0xba>
		i2c_buffer_offset_bytes = \
 8008ec4:	f1c7 0224 	rsb	r2, r7, #36	; 0x24
		status =
 8008ec8:	fa18 f282 	uxtah	r2, r8, r2
 8008ecc:	2120      	movs	r1, #32
 8008ece:	f504 70b2 	add.w	r0, r4, #356	; 0x164
 8008ed2:	f002 f95d 	bl	800b190 <VL53L1_i2c_encode_static_config>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	d1db      	bne.n	8008e92 <VL53L1_init_and_start_range+0xba>
		i2c_buffer_offset_bytes =
 8008eda:	f1c7 0244 	rsb	r2, r7, #68	; 0x44
		status =
 8008ede:	fa18 f282 	uxtah	r2, r8, r2
 8008ee2:	2116      	movs	r1, #22
 8008ee4:	f504 70c2 	add.w	r0, r4, #388	; 0x184
 8008ee8:	f002 f9c0 	bl	800b26c <VL53L1_i2c_encode_general_config>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8008eec:	2800      	cmp	r0, #0
 8008eee:	d1d0      	bne.n	8008e92 <VL53L1_init_and_start_range+0xba>
		i2c_buffer_offset_bytes = \
 8008ef0:	f1c7 025a 	rsb	r2, r7, #90	; 0x5a
		status =
 8008ef4:	fa18 f282 	uxtah	r2, r8, r2
 8008ef8:	2117      	movs	r1, #23
 8008efa:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
 8008efe:	f002 f9fb 	bl	800b2f8 <VL53L1_i2c_encode_timing_config>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8008f02:	2800      	cmp	r0, #0
 8008f04:	d1c5      	bne.n	8008e92 <VL53L1_init_and_start_range+0xba>
		if ((psystem->system__mode_start &
 8008f06:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
		i2c_buffer_offset_bytes = \
 8008f0a:	f1c7 0271 	rsb	r2, r7, #113	; 0x71
		if ((psystem->system__mode_start &
 8008f0e:	069b      	lsls	r3, r3, #26
		i2c_buffer_offset_bytes = \
 8008f10:	b292      	uxth	r2, r2
		if ((psystem->system__mode_start &
 8008f12:	d509      	bpl.n	8008f28 <VL53L1_init_and_start_range+0x150>
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 8008f14:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 8008f18:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 8008f1c:	f043 0301 	orr.w	r3, r3, #1
 8008f20:	f884 31b4 	strb.w	r3, [r4, #436]	; 0x1b4
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 8008f24:	f884 31c0 	strb.w	r3, [r4, #448]	; 0x1c0
		status =
 8008f28:	4442      	add	r2, r8
 8008f2a:	2112      	movs	r1, #18
 8008f2c:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
 8008f30:	f002 fa26 	bl	800b380 <VL53L1_i2c_encode_dynamic_config>
	if (status == VL53L1_ERROR_NONE) {
 8008f34:	2800      	cmp	r0, #0
 8008f36:	d094      	beq.n	8008e62 <VL53L1_init_and_start_range+0x8a>
}
 8008f38:	b040      	add	sp, #256	; 0x100
 8008f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((pdev->dyn_cfg.system__sequence_config & (
 8008f3e:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
			pdev->gen_cfg.system__interrupt_config_gpio;
 8008f42:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 8008f46:	f884 22e7 	strb.w	r2, [r4, #743]	; 0x2e7
		if ((pdev->dyn_cfg.system__sequence_config & (
 8008f4a:	f013 0f60 	tst.w	r3, #96	; 0x60
				pdev->customer.mm_config__outer_offset_mm * 4;
 8008f4e:	bf03      	ittte	eq
 8008f50:	f8b4 3058 	ldrheq.w	r3, [r4, #88]	; 0x58
 8008f54:	009b      	lsleq	r3, r3, #2
 8008f56:	b29b      	uxtheq	r3, r3
 8008f58:	2300      	movne	r3, #0
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8008f5a:	2120      	movs	r1, #32
		if (device_config_level <
 8008f5c:	2d04      	cmp	r5, #4
 8008f5e:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8008f62:	f884 1186 	strb.w	r1, [r4, #390]	; 0x186
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8008f66:	f8d4 32e4 	ldr.w	r3, [r4, #740]	; 0x2e4
		if (device_config_level <
 8008f6a:	d812      	bhi.n	8008f92 <VL53L1_init_and_start_range+0x1ba>
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8008f6c:	4911      	ldr	r1, [pc, #68]	; (8008fb4 <VL53L1_init_and_start_range+0x1dc>)
 8008f6e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008f72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008f76:	428b      	cmp	r3, r1
 8008f78:	d005      	beq.n	8008f86 <VL53L1_init_and_start_range+0x1ae>
 8008f7a:	267b      	movs	r6, #123	; 0x7b
 8008f7c:	270d      	movs	r7, #13
			device_config_level =
 8008f7e:	2505      	movs	r5, #5
 8008f80:	e758      	b.n	8008e34 <VL53L1_init_and_start_range+0x5c>
 8008f82:	f894 22e7 	ldrb.w	r2, [r4, #743]	; 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 8008f86:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
 8008f8a:	2687      	movs	r6, #135	; 0x87
 8008f8c:	2701      	movs	r7, #1
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8008f8e:	2506      	movs	r5, #6
 8008f90:	e750      	b.n	8008e34 <VL53L1_init_and_start_range+0x5c>
 8008f92:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008f96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008f9a:	e740      	b.n	8008e1e <VL53L1_init_and_start_range+0x46>
 8008f9c:	4a06      	ldr	r2, [pc, #24]	; (8008fb8 <VL53L1_init_and_start_range+0x1e0>)
 8008f9e:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
 8008fa2:	f1c7 0688 	rsb	r6, r7, #136	; 0x88
 8008fa6:	b2b6      	uxth	r6, r6
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 8008fa8:	2e00      	cmp	r6, #0
 8008faa:	f47f af43 	bne.w	8008e34 <VL53L1_init_and_start_range+0x5c>
 8008fae:	46e8      	mov	r8, sp
 8008fb0:	e74c      	b.n	8008e4c <VL53L1_init_and_start_range+0x74>
 8008fb2:	bf00      	nop
 8008fb4:	00010100 	.word	0x00010100
 8008fb8:	08013bd8 	.word	0x08013bd8

08008fbc <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 8008fbc:	b538      	push	{r3, r4, r5, lr}
			VL53L1DevStructGetLLDriverHandle(Dev);

	/* Merge ABORT mode with mode_start */

	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8008fbe:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
 8008fc2:	f003 030f 	and.w	r3, r3, #15
{
 8008fc6:	4604      	mov	r4, r0
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8008fc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 8008fcc:	f500 71e4 	add.w	r1, r0, #456	; 0x1c8
	pdev->sys_ctrl.system__mode_start =
 8008fd0:	f880 31cc 	strb.w	r3, [r0, #460]	; 0x1cc
	status = VL53L1_set_system_control(
 8008fd4:	f002 fa30 	bl	800b438 <VL53L1_set_system_control>
				Dev,
				&pdev->sys_ctrl);

	/* Abort bit is auto clear so clear register group structure to match */
	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);
 8008fd8:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
 8008fdc:	f003 030f 	and.w	r3, r3, #15
	pdev->sys_ctrl.system__mode_start =
 8008fe0:	f884 31cc 	strb.w	r3, [r4, #460]	; 0x1cc
	status = VL53L1_set_system_control(
 8008fe4:	4605      	mov	r5, r0

	/* reset zone dynamic info */
	VL53L1_init_ll_driver_state(
 8008fe6:	2103      	movs	r1, #3
 8008fe8:	4620      	mov	r0, r4
 8008fea:	f001 fc63 	bl	800a8b4 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* reset low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 8008fee:	f894 32e5 	ldrb.w	r3, [r4, #741]	; 0x2e5
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d001      	beq.n	8008ffa <VL53L1_stop_range+0x3e>
		VL53L1_low_power_auto_data_stop_range(Dev);

	return status;
}
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	bd38      	pop	{r3, r4, r5, pc}
		VL53L1_low_power_auto_data_stop_range(Dev);
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	f001 ff10 	bl	800ae20 <VL53L1_low_power_auto_data_stop_range>
}
 8009000:	4628      	mov	r0, r5
 8009002:	bd38      	pop	{r3, r4, r5, pc}

08009004 <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 8009004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 8009008:	f890 22e6 	ldrb.w	r2, [r0, #742]	; 0x2e6
		(psystem->system__mode_start &
 800900c:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
{
 8009010:	4604      	mov	r4, r0
		(psystem->system__mode_start &
 8009012:	f003 030f 	and.w	r3, r3, #15
	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 8009016:	2aff      	cmp	r2, #255	; 0xff
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8009018:	f8b0 0142 	ldrh.w	r0, [r0, #322]	; 0x142
	pdev->measurement_mode = measurement_mode;
 800901c:	70a1      	strb	r1, [r4, #2]
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800901e:	ea41 0103 	orr.w	r1, r1, r3
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8009022:	bf04      	itt	eq
 8009024:	2300      	moveq	r3, #0
 8009026:	f884 32e6 	strbeq.w	r3, [r4, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800902a:	f8d4 32e4 	ldr.w	r3, [r4, #740]	; 0x2e4
 800902e:	4a67      	ldr	r2, [pc, #412]	; (80091cc <VL53L1_clear_interrupt_and_enable_next_range+0x1c8>)
	psystem->system__mode_start =
 8009030:	f884 11cc 	strb.w	r1, [r4, #460]	; 0x1cc
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8009034:	4013      	ands	r3, r2
 8009036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
{
 800903a:	b0c1      	sub	sp, #260	; 0x104
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800903c:	f8a4 017c 	strh.w	r0, [r4, #380]	; 0x17c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8009040:	f504 76da 	add.w	r6, r4, #436	; 0x1b4
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8009044:	d071      	beq.n	800912a <VL53L1_clear_interrupt_and_enable_next_range+0x126>
 8009046:	2744      	movs	r7, #68	; 0x44
 8009048:	46b8      	mov	r8, r7
 800904a:	f04f 0903 	mov.w	r9, #3
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800904e:	4a60      	ldr	r2, [pc, #384]	; (80091d0 <VL53L1_clear_interrupt_and_enable_next_range+0x1cc>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d115      	bne.n	8009080 <VL53L1_clear_interrupt_and_enable_next_range+0x7c>
		pdev->gen_cfg.system__interrupt_config_gpio =
 8009054:	f894 32e7 	ldrb.w	r3, [r4, #743]	; 0x2e7
 8009058:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
 800905c:	2287      	movs	r2, #135	; 0x87
 800905e:	2100      	movs	r1, #0
 8009060:	4668      	mov	r0, sp
 8009062:	f00a faa6 	bl	80135b2 <memset>
		status =
 8009066:	466a      	mov	r2, sp
 8009068:	210b      	movs	r1, #11
 800906a:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 800906e:	466d      	mov	r5, sp
 8009070:	f001 ff78 	bl	800af64 <VL53L1_i2c_encode_static_nvm_managed>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8009074:	2800      	cmp	r0, #0
 8009076:	f000 808a 	beq.w	800918e <VL53L1_clear_interrupt_and_enable_next_range+0x18a>
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
}
 800907a:	b041      	add	sp, #260	; 0x104
 800907c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*pbuffer++ = 0;
 8009080:	1e7a      	subs	r2, r7, #1
 8009082:	2f00      	cmp	r7, #0
 8009084:	b292      	uxth	r2, r2
 8009086:	f102 0201 	add.w	r2, r2, #1
 800908a:	4668      	mov	r0, sp
 800908c:	bf08      	it	eq
 800908e:	2201      	moveq	r2, #1
 8009090:	2100      	movs	r1, #0
 8009092:	f00a fa8e 	bl	80135b2 <memset>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8009096:	f1b9 0f05 	cmp.w	r9, #5
 800909a:	466d      	mov	r5, sp
 800909c:	d07a      	beq.n	8009194 <VL53L1_clear_interrupt_and_enable_next_range+0x190>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 800909e:	f1b9 0f03 	cmp.w	r9, #3
 80090a2:	f040 8083 	bne.w	80091ac <VL53L1_clear_interrupt_and_enable_next_range+0x1a8>
		i2c_buffer_offset_bytes =
 80090a6:	f1c8 0244 	rsb	r2, r8, #68	; 0x44
		status =
 80090aa:	fa15 f282 	uxtah	r2, r5, r2
 80090ae:	2116      	movs	r1, #22
 80090b0:	f504 70c2 	add.w	r0, r4, #388	; 0x184
 80090b4:	f002 f8da 	bl	800b26c <VL53L1_i2c_encode_general_config>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 80090b8:	2800      	cmp	r0, #0
 80090ba:	d1de      	bne.n	800907a <VL53L1_clear_interrupt_and_enable_next_range+0x76>
		i2c_buffer_offset_bytes = \
 80090bc:	f1c8 025a 	rsb	r2, r8, #90	; 0x5a
		status =
 80090c0:	fa15 f282 	uxtah	r2, r5, r2
 80090c4:	2117      	movs	r1, #23
 80090c6:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
 80090ca:	f002 f915 	bl	800b2f8 <VL53L1_i2c_encode_timing_config>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 80090ce:	2800      	cmp	r0, #0
 80090d0:	d1d3      	bne.n	800907a <VL53L1_clear_interrupt_and_enable_next_range+0x76>
		if ((psystem->system__mode_start &
 80090d2:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
		i2c_buffer_offset_bytes = \
 80090d6:	f1c8 0271 	rsb	r2, r8, #113	; 0x71
		if ((psystem->system__mode_start &
 80090da:	069b      	lsls	r3, r3, #26
		i2c_buffer_offset_bytes = \
 80090dc:	b292      	uxth	r2, r2
		if ((psystem->system__mode_start &
 80090de:	d44b      	bmi.n	8009178 <VL53L1_clear_interrupt_and_enable_next_range+0x174>
		status =
 80090e0:	442a      	add	r2, r5
 80090e2:	4630      	mov	r0, r6
 80090e4:	2112      	movs	r1, #18
 80090e6:	f002 f94b 	bl	800b380 <VL53L1_i2c_encode_dynamic_config>
	if (status == VL53L1_ERROR_NONE) {
 80090ea:	2800      	cmp	r0, #0
 80090ec:	d1c5      	bne.n	800907a <VL53L1_clear_interrupt_and_enable_next_range+0x76>
		i2c_buffer_offset_bytes = \
 80090ee:	f1c8 0283 	rsb	r2, r8, #131	; 0x83
		status =
 80090f2:	fa15 f282 	uxtah	r2, r5, r2
 80090f6:	2105      	movs	r1, #5
 80090f8:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
 80090fc:	f002 f982 	bl	800b404 <VL53L1_i2c_encode_system_control>
	if (status == VL53L1_ERROR_NONE) {
 8009100:	2800      	cmp	r0, #0
 8009102:	d1ba      	bne.n	800907a <VL53L1_clear_interrupt_and_enable_next_range+0x76>
		status =
 8009104:	463b      	mov	r3, r7
 8009106:	462a      	mov	r2, r5
 8009108:	4641      	mov	r1, r8
 800910a:	4620      	mov	r0, r4
 800910c:	f008 f98e 	bl	801142c <VL53L1_WriteMulti>
	if (status == VL53L1_ERROR_NONE)
 8009110:	2800      	cmp	r0, #0
 8009112:	d1b2      	bne.n	800907a <VL53L1_clear_interrupt_and_enable_next_range+0x76>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 8009114:	4620      	mov	r0, r4
 8009116:	f001 fbe1 	bl	800a8dc <VL53L1_update_ll_driver_rd_state>
	if (status == VL53L1_ERROR_NONE)
 800911a:	2800      	cmp	r0, #0
 800911c:	d1ad      	bne.n	800907a <VL53L1_clear_interrupt_and_enable_next_range+0x76>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 800911e:	4620      	mov	r0, r4
 8009120:	f001 fc58 	bl	800a9d4 <VL53L1_update_ll_driver_cfg_state>
}
 8009124:	b041      	add	sp, #260	; 0x104
 8009126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if ((pdev->dyn_cfg.system__sequence_config & (
 800912a:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
		pdev->low_power_auto_data.saved_interrupt_config =
 800912e:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
 8009132:	f884 12e7 	strb.w	r1, [r4, #743]	; 0x2e7
		if ((pdev->dyn_cfg.system__sequence_config & (
 8009136:	f013 0f60 	tst.w	r3, #96	; 0x60
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 800913a:	f04f 0120 	mov.w	r1, #32
 800913e:	f884 1186 	strb.w	r1, [r4, #390]	; 0x186
		if ((pdev->dyn_cfg.system__sequence_config & (
 8009142:	d10d      	bne.n	8009160 <VL53L1_clear_interrupt_and_enable_next_range+0x15c>
				pdev->customer.mm_config__outer_offset_mm * 4;
 8009144:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8009148:	f8d4 32e4 	ldr.w	r3, [r4, #740]	; 0x2e4
 800914c:	0089      	lsls	r1, r1, #2
			pdev->customer.algo__part_to_part_range_offset_mm =
 800914e:	f8a4 1054 	strh.w	r1, [r4, #84]	; 0x54
 8009152:	4013      	ands	r3, r2
 8009154:	277b      	movs	r7, #123	; 0x7b
 8009156:	f04f 080d 	mov.w	r8, #13
			device_config_level =
 800915a:	f04f 0905 	mov.w	r9, #5
 800915e:	e776      	b.n	800904e <VL53L1_clear_interrupt_and_enable_next_range+0x4a>
 8009160:	f8d4 32e4 	ldr.w	r3, [r4, #740]	; 0x2e4
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 8009164:	2100      	movs	r1, #0
 8009166:	4013      	ands	r3, r2
 8009168:	f8a4 1054 	strh.w	r1, [r4, #84]	; 0x54
 800916c:	277b      	movs	r7, #123	; 0x7b
 800916e:	f04f 080d 	mov.w	r8, #13
			device_config_level =
 8009172:	f04f 0905 	mov.w	r9, #5
 8009176:	e76a      	b.n	800904e <VL53L1_clear_interrupt_and_enable_next_range+0x4a>
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 8009178:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 800917c:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 8009180:	f043 0301 	orr.w	r3, r3, #1
 8009184:	f884 31b4 	strb.w	r3, [r4, #436]	; 0x1b4
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 8009188:	f884 31c0 	strb.w	r3, [r4, #448]	; 0x1c0
 800918c:	e7a8      	b.n	80090e0 <VL53L1_clear_interrupt_and_enable_next_range+0xdc>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 800918e:	f04f 0801 	mov.w	r8, #1
	i2c_buffer_size_bytes = \
 8009192:	2787      	movs	r7, #135	; 0x87
		i2c_buffer_offset_bytes = \
 8009194:	f1c8 020d 	rsb	r2, r8, #13
		status =
 8009198:	fa15 f282 	uxtah	r2, r5, r2
 800919c:	2117      	movs	r1, #23
 800919e:	f104 0042 	add.w	r0, r4, #66	; 0x42
 80091a2:	f001 ff47 	bl	800b034 <VL53L1_i2c_encode_customer_nvm_managed>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 80091a6:	2800      	cmp	r0, #0
 80091a8:	f47f af67 	bne.w	800907a <VL53L1_clear_interrupt_and_enable_next_range+0x76>
		i2c_buffer_offset_bytes = \
 80091ac:	f1c8 0224 	rsb	r2, r8, #36	; 0x24
		status =
 80091b0:	fa15 f282 	uxtah	r2, r5, r2
 80091b4:	2120      	movs	r1, #32
 80091b6:	f504 70b2 	add.w	r0, r4, #356	; 0x164
 80091ba:	f001 ffe9 	bl	800b190 <VL53L1_i2c_encode_static_config>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 80091be:	2800      	cmp	r0, #0
 80091c0:	f43f af71 	beq.w	80090a6 <VL53L1_clear_interrupt_and_enable_next_range+0xa2>
}
 80091c4:	b041      	add	sp, #260	; 0x104
 80091c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091ca:	bf00      	nop
 80091cc:	00ffff00 	.word	0x00ffff00
 80091d0:	00010100 	.word	0x00010100

080091d4 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 80091d4:	b5f0      	push	{r4, r5, r6, r7, lr}

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 80091d6:	78ce      	ldrb	r6, [r1, #3]
 80091d8:	709e      	strb	r6, [r3, #2]
 80091da:	784c      	ldrb	r4, [r1, #1]

	pdata = &(presults->data[0]);

	for (i = 0 ; i < 2 ; i++) {

		pdata->range_id     = i;
 80091dc:	2500      	movs	r5, #0
 80091de:	f004 041f 	and.w	r4, r4, #31
 80091e2:	711d      	strb	r5, [r3, #4]
		pdata->time_stamp   = 0;
 80091e4:	609d      	str	r5, [r3, #8]

		if ((psys->result__stream_count == 0) &&
 80091e6:	2e00      	cmp	r6, #0
 80091e8:	d163      	bne.n	80092b2 <VL53L1_copy_sys_and_core_results_to_range_results+0xde>
 80091ea:	2c09      	cmp	r4, #9
 80091ec:	bf14      	ite	ne
 80091ee:	4625      	movne	r5, r4
 80091f0:	2513      	moveq	r5, #19
 80091f2:	f883 5042 	strb.w	r5, [r3, #66]	; 0x42

		switch (i) {

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 80091f6:	788d      	ldrb	r5, [r1, #2]
 80091f8:	2d07      	cmp	r5, #7
 80091fa:	d060      	beq.n	80092be <VL53L1_copy_sys_and_core_results_to_range_results+0xea>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 80091fc:	2d08      	cmp	r5, #8
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
			else
				pdata->actual_effective_spads =
 80091fe:	bf14      	ite	ne
 8009200:	888d      	ldrhne	r5, [r1, #4]
				pdata->actual_effective_spads =
 8009202:	8a8d      	ldrheq	r5, [r1, #20]
 8009204:	829d      	strh	r5, [r3, #20]
				psys->result__ambient_count_rate_mcps_sd0;

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8009206:	894d      	ldrh	r5, [r1, #10]
			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;

			range_mm =
 8009208:	89cf      	ldrh	r7, [r1, #14]
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 800920a:	016d      	lsls	r5, r5, #5
			pdata->sigma_mm = (uint16_t)tmpu32;
 800920c:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8009210:	4575      	cmp	r5, lr
 8009212:	bf28      	it	cs
 8009214:	4675      	movcs	r5, lr
			pdata->peak_signal_count_rate_mcps =
 8009216:	f8b1 e010 	ldrh.w	lr, [r1, #16]
 800921a:	f8a3 e030 	strh.w	lr, [r3, #48]	; 0x30
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;

			/* apply correction gain */
			range_mm *= gain_factor;
 800921e:	fb07 f000 	mul.w	r0, r7, r0
			pdata->avg_signal_count_rate_mcps =
 8009222:	f8b1 e016 	ldrh.w	lr, [r1, #22]
			pdata->median_phase =
 8009226:	898f      	ldrh	r7, [r1, #12]
			pdata->avg_signal_count_rate_mcps =
 8009228:	f8a3 e032 	strh.w	lr, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps =
 800922c:	f8b1 e008 	ldrh.w	lr, [r1, #8]
			pdata->sigma_mm = (uint16_t)tmpu32;
 8009230:	879d      	strh	r5, [r3, #60]	; 0x3c
			range_mm += 0x0400;
			range_mm /= 0x0800;
 8009232:	f510 6580 	adds.w	r5, r0, #1024	; 0x400
 8009236:	bf48      	it	mi
 8009238:	f600 35ff 	addwmi	r5, r0, #3071	; 0xbff
 800923c:	12ed      	asrs	r5, r5, #11

			pdata->median_range_mm = (int16_t)range_mm;

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
			pdata->signal_total_events =
 800923e:	6890      	ldr	r0, [r2, #8]
			pdata->median_phase =
 8009240:	87df      	strh	r7, [r3, #62]	; 0x3e
			pdata->ranging_total_events =
 8009242:	6857      	ldr	r7, [r2, #4]
			pdata->median_range_mm = (int16_t)range_mm;
 8009244:	f8a3 5040 	strh.w	r5, [r3, #64]	; 0x40
				pcore->result_core__signal_total_events_sd0;
			pdata->total_periods_elapsed =
 8009248:	68d5      	ldr	r5, [r2, #12]
				pcore->result_core__total_periods_elapsed_sd0;
			pdata->ambient_window_events =
 800924a:	6812      	ldr	r2, [r2, #0]
			pdata->ranging_total_events =
 800924c:	629f      	str	r7, [r3, #40]	; 0x28
			pdata->signal_total_events =
 800924e:	62d8      	str	r0, [r3, #44]	; 0x2c
		pdata->range_id     = i;
 8009250:	2701      	movs	r7, #1
		pdata->time_stamp   = 0;
 8009252:	2000      	movs	r0, #0
			pdata->ambient_count_rate_mcps =
 8009254:	f8a3 e034 	strh.w	lr, [r3, #52]	; 0x34
			pdata->total_periods_elapsed =
 8009258:	619d      	str	r5, [r3, #24]
			pdata->ambient_window_events =
 800925a:	625a      	str	r2, [r3, #36]	; 0x24
		pdata->range_id     = i;
 800925c:	f883 7044 	strb.w	r7, [r3, #68]	; 0x44
		pdata->time_stamp   = 0;
 8009260:	6498      	str	r0, [r3, #72]	; 0x48
		if ((psys->result__stream_count == 0) &&
 8009262:	b37e      	cbz	r6, 80092c4 <VL53L1_copy_sys_and_core_results_to_range_results+0xf0>
 8009264:	4622      	mov	r2, r4
 8009266:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
				psys->result__ambient_count_rate_mcps_sd1;

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800926a:	8bca      	ldrh	r2, [r1, #30]
			pdata->actual_effective_spads =
 800926c:	8b08      	ldrh	r0, [r1, #24]
			pdata->peak_signal_count_rate_mcps =
 800926e:	8b4f      	ldrh	r7, [r1, #26]
			pdata->actual_effective_spads =
 8009270:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8009274:	0152      	lsls	r2, r2, #5
			pdata->avg_signal_count_rate_mcps =
 8009276:	f64f 70ff 	movw	r0, #65535	; 0xffff
			if (tmpu32 > 0xFFFF) {
				tmpu32 = 0xFFFF;
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800927a:	4282      	cmp	r2, r0
			pdata->ambient_count_rate_mcps =
 800927c:	8b8e      	ldrh	r6, [r1, #28]

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
 800927e:	8c0d      	ldrh	r5, [r1, #32]
 8009280:	f8a3 507e 	strh.w	r5, [r3, #126]	; 0x7e
			pdata->sigma_mm = (uint16_t)tmpu32;
 8009284:	bf28      	it	cs
 8009286:	4602      	movcs	r2, r0

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8009288:	2100      	movs	r1, #0
 800928a:	2c11      	cmp	r4, #17
			pdata->peak_signal_count_rate_mcps =
 800928c:	f8a3 7070 	strh.w	r7, [r3, #112]	; 0x70
			pdata->avg_signal_count_rate_mcps =
 8009290:	f8a3 0072 	strh.w	r0, [r3, #114]	; 0x72
			pdata->sigma_mm = (uint16_t)tmpu32;
 8009294:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
			pdata->ambient_count_rate_mcps =
 8009298:	f8a3 6074 	strh.w	r6, [r3, #116]	; 0x74
	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 800929c:	70d9      	strb	r1, [r3, #3]
 800929e:	d807      	bhi.n	80092b0 <VL53L1_copy_sys_and_core_results_to_range_results+0xdc>
 80092a0:	2201      	movs	r2, #1
 80092a2:	480b      	ldr	r0, [pc, #44]	; (80092d0 <VL53L1_copy_sys_and_core_results_to_range_results+0xfc>)
 80092a4:	40a2      	lsls	r2, r4
 80092a6:	4202      	tst	r2, r0
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 80092a8:	bf1c      	itt	ne
 80092aa:	70dc      	strbne	r4, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 80092ac:	f883 1042 	strbne.w	r1, [r3, #66]	; 0x42
 80092b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((psys->result__stream_count == 0) &&
 80092b2:	4625      	mov	r5, r4
 80092b4:	f883 5042 	strb.w	r5, [r3, #66]	; 0x42
			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 80092b8:	788d      	ldrb	r5, [r1, #2]
 80092ba:	2d07      	cmp	r5, #7
 80092bc:	d19e      	bne.n	80091fc <VL53L1_copy_sys_and_core_results_to_range_results+0x28>
				pdata->actual_effective_spads =
 80092be:	8a4d      	ldrh	r5, [r1, #18]
 80092c0:	829d      	strh	r5, [r3, #20]
 80092c2:	e7a0      	b.n	8009206 <VL53L1_copy_sys_and_core_results_to_range_results+0x32>
		if ((psys->result__stream_count == 0) &&
 80092c4:	2c09      	cmp	r4, #9
 80092c6:	bf14      	ite	ne
 80092c8:	4622      	movne	r2, r4
 80092ca:	2213      	moveq	r2, #19
 80092cc:	e7cb      	b.n	8009266 <VL53L1_copy_sys_and_core_results_to_range_results+0x92>
 80092ce:	bf00      	nop
 80092d0:	0002200e 	.word	0x0002200e

080092d4 <VL53L1_get_device_results>:
{
 80092d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	switch (device_results_level) {
 80092d8:	2901      	cmp	r1, #1
{
 80092da:	b0c0      	sub	sp, #256	; 0x100
 80092dc:	4604      	mov	r4, r0
 80092de:	4691      	mov	r9, r2
	VL53L1_range_results_t   *presults = &(pres->range_results);
 80092e0:	f500 783d 	add.w	r8, r0, #756	; 0x2f4
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 80092e4:	f500 7a22 	add.w	sl, r0, #648	; 0x288
	switch (device_results_level) {
 80092e8:	d050      	beq.n	800938c <VL53L1_get_device_results+0xb8>
 80092ea:	2902      	cmp	r1, #2
 80092ec:	460e      	mov	r6, r1
		status =
 80092ee:	466f      	mov	r7, sp
 80092f0:	466a      	mov	r2, sp
	switch (device_results_level) {
 80092f2:	d117      	bne.n	8009324 <VL53L1_get_device_results+0x50>
		status =
 80092f4:	2386      	movs	r3, #134	; 0x86
 80092f6:	2188      	movs	r1, #136	; 0x88
 80092f8:	f008 f8c0 	bl	801147c <VL53L1_ReadMulti>
 80092fc:	4605      	mov	r5, r0
	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 80092fe:	2d00      	cmp	r5, #0
 8009300:	d054      	beq.n	80093ac <VL53L1_get_device_results+0xd8>
	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8009302:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8009306:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 800930a:	f884 22f4 	strb.w	r2, [r4, #756]	; 0x2f4
	memcpy(
 800930e:	4641      	mov	r1, r8
 8009310:	4648      	mov	r0, r9
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8009312:	f884 32f5 	strb.w	r3, [r4, #757]	; 0x2f5
	memcpy(
 8009316:	2284      	movs	r2, #132	; 0x84
 8009318:	f00a f940 	bl	801359c <memcpy>
}
 800931c:	4628      	mov	r0, r5
 800931e:	b040      	add	sp, #256	; 0x100
 8009320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		status =
 8009324:	232c      	movs	r3, #44	; 0x2c
 8009326:	2188      	movs	r1, #136	; 0x88
 8009328:	f008 f8a8 	bl	801147c <VL53L1_ReadMulti>
	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 800932c:	2e01      	cmp	r6, #1
		status =
 800932e:	4605      	mov	r5, r0
	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 8009330:	d8e5      	bhi.n	80092fe <VL53L1_get_device_results+0x2a>
	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 8009332:	bb96      	cbnz	r6, 800939a <VL53L1_get_device_results+0xc6>
	if (status == VL53L1_ERROR_NONE) {
 8009334:	2d00      	cmp	r5, #0
 8009336:	d1e4      	bne.n	8009302 <VL53L1_get_device_results+0x2e>
	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 8009338:	f504 76e7 	add.w	r6, r4, #462	; 0x1ce
		status =
 800933c:	4639      	mov	r1, r7
 800933e:	4632      	mov	r2, r6
 8009340:	202c      	movs	r0, #44	; 0x2c
 8009342:	f002 f899 	bl	800b478 <VL53L1_i2c_decode_system_results>
	if (status == VL53L1_ERROR_NONE)
 8009346:	4605      	mov	r5, r0
 8009348:	2800      	cmp	r0, #0
 800934a:	d1da      	bne.n	8009302 <VL53L1_get_device_results+0x2e>
		VL53L1_copy_sys_and_core_results_to_range_results(
 800934c:	4652      	mov	r2, sl
 800934e:	4631      	mov	r1, r6
 8009350:	4643      	mov	r3, r8
 8009352:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
 8009356:	f7ff ff3d 	bl	80091d4 <VL53L1_copy_sys_and_core_results_to_range_results>
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 800935a:	f894 52e5 	ldrb.w	r5, [r4, #741]	; 0x2e5
 800935e:	2d01      	cmp	r5, #1
 8009360:	d02d      	beq.n	80093be <VL53L1_get_device_results+0xea>
	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8009362:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8009366:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 800936a:	f884 22f4 	strb.w	r2, [r4, #756]	; 0x2f4
	memcpy(
 800936e:	4641      	mov	r1, r8
 8009370:	4648      	mov	r0, r9
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8009372:	f884 32f5 	strb.w	r3, [r4, #757]	; 0x2f5
	memcpy(
 8009376:	2284      	movs	r2, #132	; 0x84
 8009378:	f00a f910 	bl	801359c <memcpy>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 800937c:	4620      	mov	r0, r4
 800937e:	f001 fafb 	bl	800a978 <VL53L1_check_ll_driver_rd_state>
 8009382:	4605      	mov	r5, r0
}
 8009384:	4628      	mov	r0, r5
 8009386:	b040      	add	sp, #256	; 0x100
 8009388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		status =
 800938c:	466a      	mov	r2, sp
 800938e:	234d      	movs	r3, #77	; 0x4d
 8009390:	2188      	movs	r1, #136	; 0x88
 8009392:	f008 f873 	bl	801147c <VL53L1_ReadMulti>
 8009396:	466f      	mov	r7, sp
 8009398:	4605      	mov	r5, r0
	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 800939a:	2d00      	cmp	r5, #0
 800939c:	d1b1      	bne.n	8009302 <VL53L1_get_device_results+0x2e>
		status =
 800939e:	4652      	mov	r2, sl
 80093a0:	a90b      	add	r1, sp, #44	; 0x2c
 80093a2:	2021      	movs	r0, #33	; 0x21
 80093a4:	f002 f8f8 	bl	800b598 <VL53L1_i2c_decode_core_results>
 80093a8:	4605      	mov	r5, r0
 80093aa:	e7c3      	b.n	8009334 <VL53L1_get_device_results+0x60>
		status =
 80093ac:	f504 722b 	add.w	r2, r4, #684	; 0x2ac
 80093b0:	f10d 014e 	add.w	r1, sp, #78	; 0x4e
 80093b4:	2038      	movs	r0, #56	; 0x38
 80093b6:	f002 f92b 	bl	800b610 <VL53L1_i2c_decode_debug_results>
 80093ba:	4605      	mov	r5, r0
 80093bc:	e7ed      	b.n	800939a <VL53L1_get_device_results+0xc6>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 80093be:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 80093c2:	b1bb      	cbz	r3, 80093f4 <VL53L1_get_device_results+0x120>
		} else if ((status == VL53L1_ERROR_NONE) &&
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d01f      	beq.n	8009408 <VL53L1_get_device_results+0x134>
		if ((pdev->low_power_auto_data.low_power_auto_range_count != 0xFF) &&
 80093c8:	2bff      	cmp	r3, #255	; 0xff
 80093ca:	d0ca      	beq.n	8009362 <VL53L1_get_device_results+0x8e>
			status = VL53L1_low_power_auto_update_DSS(
 80093cc:	4620      	mov	r0, r4
 80093ce:	f001 fd73 	bl	800aeb8 <VL53L1_low_power_auto_update_DSS>
	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 80093d2:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 80093d6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 80093da:	f884 22f4 	strb.w	r2, [r4, #756]	; 0x2f4
			status = VL53L1_low_power_auto_update_DSS(
 80093de:	4605      	mov	r5, r0
	memcpy(
 80093e0:	4641      	mov	r1, r8
 80093e2:	4648      	mov	r0, r9
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 80093e4:	f884 32f5 	strb.w	r3, [r4, #757]	; 0x2f5
	memcpy(
 80093e8:	2284      	movs	r2, #132	; 0x84
 80093ea:	f00a f8d7 	bl	801359c <memcpy>
	if (status == VL53L1_ERROR_NONE)
 80093ee:	2d00      	cmp	r5, #0
 80093f0:	d0c4      	beq.n	800937c <VL53L1_get_device_results+0xa8>
 80093f2:	e793      	b.n	800931c <VL53L1_get_device_results+0x48>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 80093f4:	4620      	mov	r0, r4
 80093f6:	f001 fd3d 	bl	800ae74 <VL53L1_low_power_auto_setup_manual_calibration>
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 80093fa:	f884 52e6 	strb.w	r5, [r4, #742]	; 0x2e6
		if ((pdev->low_power_auto_data.low_power_auto_range_count != 0xFF) &&
 80093fe:	4605      	mov	r5, r0
 8009400:	2800      	cmp	r0, #0
 8009402:	f47f af7e 	bne.w	8009302 <VL53L1_get_device_results+0x2e>
 8009406:	e7e1      	b.n	80093cc <VL53L1_get_device_results+0xf8>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 8009408:	2302      	movs	r3, #2
 800940a:	f884 32e6 	strb.w	r3, [r4, #742]	; 0x2e6
 800940e:	e7dd      	b.n	80093cc <VL53L1_get_device_results+0xf8>

08009410 <VL53L1_get_tuning_parm>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 8009410:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 8009414:	2938      	cmp	r1, #56	; 0x38
 8009416:	f200 8158 	bhi.w	80096ca <VL53L1_get_tuning_parm+0x2ba>
 800941a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800941e:	0151      	.short	0x0151
 8009420:	0147014c 	.word	0x0147014c
 8009424:	013d0142 	.word	0x013d0142
 8009428:	01330138 	.word	0x01330138
 800942c:	0129012e 	.word	0x0129012e
 8009430:	011f0124 	.word	0x011f0124
 8009434:	0115011a 	.word	0x0115011a
 8009438:	010b0110 	.word	0x010b0110
 800943c:	01010106 	.word	0x01010106
 8009440:	00f700fc 	.word	0x00f700fc
 8009444:	00ed00f2 	.word	0x00ed00f2
 8009448:	00e300e8 	.word	0x00e300e8
 800944c:	00d900de 	.word	0x00d900de
 8009450:	00cf00d4 	.word	0x00cf00d4
 8009454:	00c500ca 	.word	0x00c500ca
 8009458:	00bb00c0 	.word	0x00bb00c0
 800945c:	00b100b6 	.word	0x00b100b6
 8009460:	00a700ac 	.word	0x00a700ac
 8009464:	009d00a2 	.word	0x009d00a2
 8009468:	00930098 	.word	0x00930098
 800946c:	0089008e 	.word	0x0089008e
 8009470:	007f0084 	.word	0x007f0084
 8009474:	0075007a 	.word	0x0075007a
 8009478:	006b0070 	.word	0x006b0070
 800947c:	00610066 	.word	0x00610066
 8009480:	0057005c 	.word	0x0057005c
 8009484:	004d0052 	.word	0x004d0052
 8009488:	00430048 	.word	0x00430048
 800948c:	0039003e 	.word	0x0039003e
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
	break;
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8009490:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8009494:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009496:	2000      	movs	r0, #0
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
	break;
 8009498:	4770      	bx	lr
		*ptuning_parm_value =
 800949a:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 800949e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80094a0:	2000      	movs	r0, #0
	break;
 80094a2:	4770      	bx	lr
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 80094a4:	f890 32e4 	ldrb.w	r3, [r0, #740]	; 0x2e4
 80094a8:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80094aa:	2000      	movs	r0, #0
	break;
 80094ac:	4770      	bx	lr
		*ptuning_parm_value =
 80094ae:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
 80094b2:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80094b4:	2000      	movs	r0, #0
	break;
 80094b6:	4770      	bx	lr
		*ptuning_parm_value =
 80094b8:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
 80094bc:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80094be:	2000      	movs	r0, #0
	break;
 80094c0:	4770      	bx	lr
		*ptuning_parm_value =
 80094c2:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 80094c6:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80094c8:	2000      	movs	r0, #0
	break;
 80094ca:	4770      	bx	lr
		*ptuning_parm_value =
 80094cc:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 80094d0:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80094d2:	2000      	movs	r0, #0
	break;
 80094d4:	4770      	bx	lr
		*ptuning_parm_value =
 80094d6:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
 80094da:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80094dc:	2000      	movs	r0, #0
	break;
 80094de:	4770      	bx	lr
		*ptuning_parm_value =
 80094e0:	f8d0 30d0 	ldr.w	r3, [r0, #208]	; 0xd0
 80094e4:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80094e6:	2000      	movs	r0, #0
	break;
 80094e8:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 80094ea:	f8b0 30cc 	ldrh.w	r3, [r0, #204]	; 0xcc
 80094ee:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80094f0:	2000      	movs	r0, #0
	break;
 80094f2:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 80094f4:	f8b0 30ca 	ldrh.w	r3, [r0, #202]	; 0xca
 80094f8:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80094fa:	2000      	movs	r0, #0
	break;
 80094fc:	4770      	bx	lr
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 80094fe:	f8b0 3128 	ldrh.w	r3, [r0, #296]	; 0x128
 8009502:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009504:	2000      	movs	r0, #0
	break;
 8009506:	4770      	bx	lr
				(int32_t)pdev->ssc_cfg.vcsel_start;
 8009508:	f890 3122 	ldrb.w	r3, [r0, #290]	; 0x122
 800950c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800950e:	2000      	movs	r0, #0
	break;
 8009510:	4770      	bx	lr
				(int32_t)pdev->ssc_cfg.vcsel_period;
 8009512:	f890 3121 	ldrb.w	r3, [r0, #289]	; 0x121
 8009516:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009518:	2000      	movs	r0, #0
	break;
 800951a:	4770      	bx	lr
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 800951c:	f890 3156 	ldrb.w	r3, [r0, #342]	; 0x156
 8009520:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009522:	2000      	movs	r0, #0
	break;
 8009524:	4770      	bx	lr
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8009526:	f890 3155 	ldrb.w	r3, [r0, #341]	; 0x155
 800952a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800952c:	2000      	movs	r0, #0
	break;
 800952e:	4770      	bx	lr
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8009530:	f890 3154 	ldrb.w	r3, [r0, #340]	; 0x154
 8009534:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009536:	2000      	movs	r0, #0
	break;
 8009538:	4770      	bx	lr
		*ptuning_parm_value =
 800953a:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 800953e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009540:	2000      	movs	r0, #0
	break;
 8009542:	4770      	bx	lr
		*ptuning_parm_value =
 8009544:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
 8009548:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800954a:	2000      	movs	r0, #0
	break;
 800954c:	4770      	bx	lr
		*ptuning_parm_value =
 800954e:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
 8009552:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009554:	2000      	movs	r0, #0
	break;
 8009556:	4770      	bx	lr
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 8009558:	f8b0 3144 	ldrh.w	r3, [r0, #324]	; 0x144
 800955c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800955e:	2000      	movs	r0, #0
	break;
 8009560:	4770      	bx	lr
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8009562:	f8b0 311c 	ldrh.w	r3, [r0, #284]	; 0x11c
 8009566:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009568:	2000      	movs	r0, #0
	break;
 800956a:	4770      	bx	lr
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 800956c:	f8b0 311a 	ldrh.w	r3, [r0, #282]	; 0x11a
 8009570:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009572:	2000      	movs	r0, #0
	break;
 8009574:	4770      	bx	lr
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8009576:	f8b0 3118 	ldrh.w	r3, [r0, #280]	; 0x118
 800957a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800957c:	2000      	movs	r0, #0
	break;
 800957e:	4770      	bx	lr
		*ptuning_parm_value =
 8009580:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8009584:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009586:	2000      	movs	r0, #0
	break;
 8009588:	4770      	bx	lr
				(int32_t)pdev->refspadchar.vcsel_period;
 800958a:	f890 3111 	ldrb.w	r3, [r0, #273]	; 0x111
 800958e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009590:	2000      	movs	r0, #0
	break;
 8009592:	4770      	bx	lr
				(int32_t)pdev->refspadchar.device_test_mode;
 8009594:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
 8009598:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800959a:	2000      	movs	r0, #0
	break;
 800959c:	4770      	bx	lr
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800959e:	f890 3160 	ldrb.w	r3, [r0, #352]	; 0x160
 80095a2:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80095a4:	2000      	movs	r0, #0
	break;
 80095a6:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 80095a8:	f890 30c6 	ldrb.w	r3, [r0, #198]	; 0xc6
 80095ac:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80095ae:	2000      	movs	r0, #0
	break;
 80095b0:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 80095b2:	f890 30af 	ldrb.w	r3, [r0, #175]	; 0xaf
 80095b6:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80095b8:	2000      	movs	r0, #0
	break;
 80095ba:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 80095bc:	f890 30ae 	ldrb.w	r3, [r0, #174]	; 0xae
 80095c0:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80095c2:	2000      	movs	r0, #0
	break;
 80095c4:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 80095c6:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
 80095ca:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80095cc:	2000      	movs	r0, #0
	break;
 80095ce:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 80095d0:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 80095d4:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80095d6:	2000      	movs	r0, #0
	break;
 80095d8:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 80095da:	f890 30ab 	ldrb.w	r3, [r0, #171]	; 0xab
 80095de:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80095e0:	2000      	movs	r0, #0
	break;
 80095e2:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 80095e4:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
 80095e8:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80095ea:	2000      	movs	r0, #0
	break;
 80095ec:	4770      	bx	lr
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 80095ee:	f9b0 313e 	ldrsh.w	r3, [r0, #318]	; 0x13e
 80095f2:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80095f4:	2000      	movs	r0, #0
	break;
 80095f6:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 80095f8:	f890 30c8 	ldrb.w	r3, [r0, #200]	; 0xc8
 80095fc:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80095fe:	2000      	movs	r0, #0
	break;
 8009600:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8009602:	f890 30c7 	ldrb.w	r3, [r0, #199]	; 0xc7
 8009606:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009608:	2000      	movs	r0, #0
	break;
 800960a:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 800960c:	f890 30c5 	ldrb.w	r3, [r0, #197]	; 0xc5
 8009610:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009612:	2000      	movs	r0, #0
	break;
 8009614:	4770      	bx	lr
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8009616:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 800961a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800961c:	2000      	movs	r0, #0
	break;
 800961e:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8009620:	f890 30c4 	ldrb.w	r3, [r0, #196]	; 0xc4
 8009624:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009626:	2000      	movs	r0, #0
	break;
 8009628:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 800962a:	f890 30c3 	ldrb.w	r3, [r0, #195]	; 0xc3
 800962e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009630:	2000      	movs	r0, #0
	break;
 8009632:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8009634:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
 8009638:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800963a:	2000      	movs	r0, #0
	break;
 800963c:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 800963e:	f8b0 30c0 	ldrh.w	r3, [r0, #192]	; 0xc0
 8009642:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009644:	2000      	movs	r0, #0
	break;
 8009646:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8009648:	f8b0 30be 	ldrh.w	r3, [r0, #190]	; 0xbe
 800964c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800964e:	2000      	movs	r0, #0
	break;
 8009650:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 8009652:	f8b0 30bc 	ldrh.w	r3, [r0, #188]	; 0xbc
 8009656:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009658:	2000      	movs	r0, #0
	break;
 800965a:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 800965c:	f8b0 30ba 	ldrh.w	r3, [r0, #186]	; 0xba
 8009660:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009662:	2000      	movs	r0, #0
	break;
 8009664:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8009666:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
 800966a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800966c:	2000      	movs	r0, #0
	break;
 800966e:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8009670:	f8b0 30b6 	ldrh.w	r3, [r0, #182]	; 0xb6
 8009674:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009676:	2000      	movs	r0, #0
	break;
 8009678:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 800967a:	f890 30b4 	ldrb.w	r3, [r0, #180]	; 0xb4
 800967e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009680:	2000      	movs	r0, #0
	break;
 8009682:	4770      	bx	lr
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8009684:	f8b0 309c 	ldrh.w	r3, [r0, #156]	; 0x9c
 8009688:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800968a:	2000      	movs	r0, #0
	break;
 800968c:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 800968e:	f8b0 30b2 	ldrh.w	r3, [r0, #178]	; 0xb2
 8009692:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009694:	2000      	movs	r0, #0
	break;
 8009696:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8009698:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
 800969c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800969e:	2000      	movs	r0, #0
	break;
 80096a0:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 80096a2:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 80096a6:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80096a8:	2000      	movs	r0, #0
	break;
 80096aa:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 80096ac:	f8b0 30a8 	ldrh.w	r3, [r0, #168]	; 0xa8
 80096b0:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80096b2:	2000      	movs	r0, #0
	break;
 80096b4:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 80096b6:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 80096ba:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80096bc:	2000      	movs	r0, #0
	break;
 80096be:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 80096c0:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
 80096c4:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80096c6:	2000      	movs	r0, #0
	break;
 80096c8:	4770      	bx	lr


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 80096ca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80096ce:	6013      	str	r3, [r2, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 80096d0:	f06f 0003 	mvn.w	r0, #3
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop

080096d8 <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 80096d8:	b470      	push	{r4, r5, r6}
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 80096da:	2608      	movs	r6, #8
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 80096dc:	250b      	movs	r5, #11
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 80096de:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	pdata->device_test_mode =
 80096e2:	7006      	strb	r6, [r0, #0]
	pdata->vcsel_period              =
 80096e4:	7045      	strb	r5, [r0, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 80096e6:	f44f 6120 	mov.w	r1, #2560	; 0xa00
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 80096ea:	f44f 62a0 	mov.w	r2, #1280	; 0x500
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 80096ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
	pdata->timeout_us                =
 80096f2:	6044      	str	r4, [r0, #4]
	pdata->target_count_rate_mcps    =
 80096f4:	8101      	strh	r1, [r0, #8]
	pdata->min_count_rate_limit_mcps =
 80096f6:	8142      	strh	r2, [r0, #10]
	pdata->max_count_rate_limit_mcps =
 80096f8:	8183      	strh	r3, [r0, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 80096fa:	bc70      	pop	{r4, r5, r6}
 80096fc:	2000      	movs	r0, #0
 80096fe:	4770      	bx	lr

08009700 <VL53L1_init_ssc_config_struct>:
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 8009700:	4b04      	ldr	r3, [pc, #16]	; (8009714 <VL53L1_init_ssc_config_struct+0x14>)
 8009702:	6003      	str	r3, [r0, #0]

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 8009704:	f648 42a0 	movw	r2, #36000	; 0x8ca0

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 8009708:	230c      	movs	r3, #12
	pdata->timeout_us   = 36000;
 800970a:	6042      	str	r2, [r0, #4]
	pdata->rate_limit_mcps =
 800970c:	8103      	strh	r3, [r0, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 800970e:	2000      	movs	r0, #0
 8009710:	4770      	bx	lr
 8009712:	bf00      	nop
 8009714:	020f1200 	.word	0x020f1200

08009718 <VL53L1_init_xtalk_config_struct>:
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8009718:	8943      	ldrh	r3, [r0, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800971a:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
{
 800971e:	b570      	push	{r4, r5, r6, lr}
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8009720:	f9b0 500c 	ldrsh.w	r5, [r0, #12]
 8009724:	68c4      	ldr	r4, [r0, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8009726:	604c      	str	r4, [r1, #4]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;

	pdata->lite_mode_crosstalk_margin_kcps                     =
 8009728:	2600      	movs	r6, #0
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 800972a:	2040      	movs	r0, #64	; 0x40
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800972c:	600b      	str	r3, [r1, #0]
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 800972e:	608b      	str	r3, [r1, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 8009730:	818d      	strh	r5, [r1, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8009732:	81ca      	strh	r2, [r1, #14]
	pdata->lite_mode_crosstalk_margin_kcps                     =
 8009734:	824e      	strh	r6, [r1, #18]
	pdata->crosstalk_range_ignore_threshold_mult =
 8009736:	7508      	strb	r0, [r1, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8009738:	b923      	cbnz	r3, 8009744 <VL53L1_init_xtalk_config_struct+0x2c>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 800973a:	b91c      	cbnz	r4, 8009744 <VL53L1_init_xtalk_config_struct+0x2c>
 800973c:	740c      	strb	r4, [r1, #16]
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 800973e:	82cc      	strh	r4, [r1, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8009740:	2000      	movs	r0, #0
 8009742:	bd70      	pop	{r4, r5, r6, pc}
 8009744:	460c      	mov	r4, r1
 8009746:	2601      	movs	r6, #1
			VL53L1_calc_range_ignore_threshold(
 8009748:	4629      	mov	r1, r5
 800974a:	4618      	mov	r0, r3
 800974c:	7426      	strb	r6, [r4, #16]
 800974e:	2340      	movs	r3, #64	; 0x40
 8009750:	f001 fa40 	bl	800abd4 <VL53L1_calc_range_ignore_threshold>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8009754:	82e0      	strh	r0, [r4, #22]
}
 8009756:	2000      	movs	r0, #0
 8009758:	bd70      	pop	{r4, r5, r6, pc}
 800975a:	bf00      	nop

0800975c <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 800975c:	b470      	push	{r4, r5, r6}

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800975e:	2128      	movs	r1, #40	; 0x28
	pdata->pre_num_of_samples                          =
 8009760:	2408      	movs	r4, #8
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8009762:	2209      	movs	r2, #9
	pdata->dss_config__target_total_rate_mcps          =
 8009764:	f44f 6620 	mov.w	r6, #2560	; 0xa00
	pdata->phasecal_config_timeout_us                  =
 8009768:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	pdata->range_config_timeout_us                     =
 800976c:	f243 23c8 	movw	r3, #13000	; 0x32c8
	pdata->pre_num_of_samples                          =
 8009770:	7404      	strb	r4, [r0, #16]
	pdata->mm1_num_of_samples                          =
 8009772:	7441      	strb	r1, [r0, #17]
	pdata->mm2_num_of_samples                          =
 8009774:	7482      	strb	r2, [r0, #18]
	pdata->dss_config__target_total_rate_mcps          =
 8009776:	8006      	strh	r6, [r0, #0]
	pdata->phasecal_config_timeout_us                  =
 8009778:	6045      	str	r5, [r0, #4]
	pdata->range_config_timeout_us                     =
 800977a:	6083      	str	r3, [r0, #8]
	pdata->mm_config_timeout_us                        =
 800977c:	60c3      	str	r3, [r0, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 800977e:	bc70      	pop	{r4, r5, r6}
 8009780:	2000      	movs	r0, #0
 8009782:	4770      	bx	lr

08009784 <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 8009784:	b4f0      	push	{r4, r5, r6, r7}
 8009786:	4603      	mov	r3, r0
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 8009788:	4a22      	ldr	r2, [pc, #136]	; (8009814 <VL53L1_init_tuning_parm_storage_struct+0x90>)
 800978a:	4c23      	ldr	r4, [pc, #140]	; (8009818 <VL53L1_init_tuning_parm_storage_struct+0x94>)
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 800978c:	4923      	ldr	r1, [pc, #140]	; (800981c <VL53L1_init_tuning_parm_storage_struct+0x98>)
	pdata->tp_init_phase_rtn_lite_long         =
 800978e:	f8c3 2006 	str.w	r2, [r3, #6]
	pdata->tp_tuning_parm_lld_version          =
 8009792:	f248 0041 	movw	r0, #32833	; 0x8041
	pdata->tp_tuning_parm_version              =
 8009796:	f248 0603 	movw	r6, #32771	; 0x8003
	pdata->tp_tuning_parm_key_table_version    =
 800979a:	f248 0501 	movw	r5, #32769	; 0x8001
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 800979e:	f04f 220a 	mov.w	r2, #167774720	; 0xa000a00
	pdata->tp_init_phase_rtn_lite_long         =
 80097a2:	f8c3 400a 	str.w	r4, [r3, #10]
	pdata->tp_tuning_parm_lld_version          =
 80097a6:	8098      	strh	r0, [r3, #4]
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 80097a8:	f248 0430 	movw	r4, #32816	; 0x8030
	pdata->tp_lite_sigma_est_amb_width_ns        =
 80097ac:	2010      	movs	r0, #16
	pdata->tp_lite_long_sigma_thresh_mm        =
 80097ae:	4f1c      	ldr	r7, [pc, #112]	; (8009820 <VL53L1_init_tuning_parm_storage_struct+0x9c>)
	pdata->tp_lite_sigma_est_amb_width_ns        =
 80097b0:	77d8      	strb	r0, [r3, #31]
	pdata->tp_tuning_parm_version              =
 80097b2:	801e      	strh	r6, [r3, #0]
	pdata->tp_cal_repeat_rate                  =
 80097b4:	2000      	movs	r0, #0
	pdata->tp_lite_long_sigma_thresh_mm        =
 80097b6:	f04f 16c0 	mov.w	r6, #12583104	; 0xc000c0
	pdata->tp_tuning_parm_key_table_version    =
 80097ba:	805d      	strh	r5, [r3, #2]
	pdata->tp_lite_long_sigma_thresh_mm        =
 80097bc:	f8c3 1012 	str.w	r1, [r3, #18]
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 80097c0:	2508      	movs	r5, #8
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 80097c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	pdata->tp_dss_target_lite_mcps               =
 80097c6:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
	pdata->tp_phasecal_timeout_lite_us           =
 80097ca:	62dc      	str	r4, [r3, #44]	; 0x2c
	pdata->tp_lite_sigma_ref_mm                  =
 80097cc:	2201      	movs	r2, #1
	pdata->tp_lite_seed_cfg                      =
 80097ce:	2402      	movs	r4, #2
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 80097d0:	779d      	strb	r5, [r3, #30]
	pdata->tp_lite_long_sigma_thresh_mm        =
 80097d2:	f8c3 7016 	str.w	r7, [r3, #22]

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 80097d6:	f44f 55fa 	mov.w	r5, #8000	; 0x1f40
	pdata->tp_range_timeout_lite_us              =
 80097da:	f24f 6718 	movw	r7, #63000	; 0xf618
	pdata->tp_lite_long_sigma_thresh_mm        =
 80097de:	f8c3 601a 	str.w	r6, [r3, #26]
	pdata->tp_phasecal_timeout_timed_us          =
 80097e2:	6319      	str	r1, [r3, #48]	; 0x30
	pdata->tp_range_timeout_timed_us             =
 80097e4:	f243 26c8 	movw	r6, #13000	; 0x32c8
	pdata->tp_mm_timeout_lite_us                 =
 80097e8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
	pdata->tp_lite_min_clip                    =
 80097ec:	7418      	strb	r0, [r3, #16]
	pdata->tp_lite_first_order_select            =
 80097ee:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
	pdata->tp_lite_sigma_ref_mm                  =
 80097f2:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->tp_timed_seed_cfg                     =
 80097f6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	pdata->tp_lite_seed_cfg                      =
 80097fa:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
	pdata->tp_lite_quantifier                    =
 80097fe:	f883 4023 	strb.w	r4, [r3, #35]	; 0x23
	pdata->tp_range_timeout_lite_us              =
 8009802:	641f      	str	r7, [r3, #64]	; 0x40
	pdata->tp_range_timeout_timed_us             =
 8009804:	645e      	str	r6, [r3, #68]	; 0x44
	pdata->tp_range_timeout_lpa_us =
 8009806:	649d      	str	r5, [r3, #72]	; 0x48
	pdata->tp_cal_repeat_rate                  =
 8009808:	81d8      	strh	r0, [r3, #14]
	pdata->tp_mm_timeout_lpa_us =
 800980a:	63da      	str	r2, [r3, #60]	; 0x3c
	pdata->tp_mm_timeout_lite_us                 =
 800980c:	6359      	str	r1, [r3, #52]	; 0x34
	pdata->tp_mm_timeout_timed_us                =
 800980e:	6399      	str	r1, [r3, #56]	; 0x38


	LOG_FUNCTION_END(status);

	return status;
}
 8009810:	bcf0      	pop	{r4, r5, r6, r7}
 8009812:	4770      	bx	lr
 8009814:	0e060a0e 	.word	0x0e060a0e
 8009818:	2102060a 	.word	0x2102060a
 800981c:	01680168 	.word	0x01680168
 8009820:	00c00168 	.word	0x00c00168

08009824 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8009824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009828:	9e0a      	ldr	r6, [sp, #40]	; 0x28

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
	pstatic->debug__ctrl                                      = 0x00;
 800982a:	2400      	movs	r4, #0
	 */
	pstatic->gpio_hv_mux__ctrl  = \
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 800982c:	f04f 0e02 	mov.w	lr, #2
	pstatic->gpio__fio_hv_status                              = 0x00;
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8009830:	f04f 0808 	mov.w	r8, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8009834:	f44f 6720 	mov.w	r7, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 8009838:	2511      	movs	r5, #17
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800983a:	8007      	strh	r7, [r0, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800983c:	7084      	strb	r4, [r0, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800983e:	70c4      	strb	r4, [r0, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 8009840:	7104      	strb	r4, [r0, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 8009842:	7144      	strb	r4, [r0, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 8009844:	7184      	strb	r4, [r0, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 8009846:	71c4      	strb	r4, [r0, #7]
	pstatic->host_if__status                                  = 0x00;
 8009848:	7204      	strb	r4, [r0, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800984a:	7244      	strb	r4, [r0, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800984c:	7284      	strb	r4, [r0, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800984e:	72c4      	strb	r4, [r0, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 8009850:	7384      	strb	r4, [r0, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 8009852:	7444      	strb	r4, [r0, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 8009854:	f880 e00d 	strb.w	lr, [r0, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 8009858:	f880 e00f 	strb.w	lr, [r0, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800985c:	f880 8010 	strb.w	r8, [r0, #16]
	pstatic->gpio_hv_mux__ctrl  = \
 8009860:	7305      	strb	r5, [r0, #12]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8009862:	7fb5      	ldrb	r5, [r6, #30]
 8009864:	7485      	strb	r5, [r0, #18]
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8009866:	7ff5      	ldrb	r5, [r6, #31]
 8009868:	74c5      	strb	r5, [r0, #19]
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800986a:	f896 5020 	ldrb.w	r5, [r6, #32]
 800986e:	7505      	strb	r5, [r0, #20]
			ptuning_parms->tp_lite_sigma_ref_mm;
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8009870:	2701      	movs	r7, #1
	pstatic->spare_host_config__static_config_spare_1         = 0x00;

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8009872:	f04f 0cff 	mov.w	ip, #255	; 0xff
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 8009876:	7584      	strb	r4, [r0, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 8009878:	75c4      	strb	r4, [r0, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800987a:	8304      	strh	r4, [r0, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800987c:	7547      	strb	r7, [r0, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800987e:	f880 c01a 	strb.w	ip, [r0, #26]
	pstatic->algo__range_min_clip                             =
 8009882:	7c35      	ldrb	r5, [r6, #16]
 8009884:	76c5      	strb	r5, [r0, #27]
{
 8009886:	9d09      	ldr	r5, [sp, #36]	; 0x24
	/*
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
 8009888:	f896 900c 	ldrb.w	r9, [r6, #12]
 800988c:	f880 901c 	strb.w	r9, [r0, #28]
			ptuning_parms->tp_consistency_lite_phase_tolerance;
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
	pstatic->sd_config__reset_stages_msb                      = 0x00;
	pstatic->sd_config__reset_stages_lsb                      = 0x00;

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8009890:	f04f 6932 	mov.w	r9, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 8009894:	7744      	strb	r4, [r0, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 8009896:	7784      	strb	r4, [r0, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 8009898:	77c4      	strb	r4, [r0, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800989a:	f8c1 9000 	str.w	r9, [r1]
	 * Set VHV / Phase Cal repeat rate to 1 every
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
 800989e:	89f0      	ldrh	r0, [r6, #14]
 80098a0:	8088      	strh	r0, [r1, #4]
			ptuning_parms->tp_cal_repeat_rate;
	pgeneral->global_config__vcsel_width                      = 0x02;
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 80098a2:	200d      	movs	r0, #13
	pgeneral->global_config__vcsel_width                      = 0x02;
 80098a4:	f881 e006 	strb.w	lr, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 80098a8:	71c8      	strb	r0, [r1, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
 80098aa:	f896 900d 	ldrb.w	r9, [r6, #13]
 80098ae:	f881 9008 	strb.w	r9, [r1, #8]
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
	pgeneral->system__thresh_rate_low                         = 0x0000;
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
	pgeneral->dss_config__manual_block_select                 = 0x00;
 80098b2:	4829      	ldr	r0, [pc, #164]	; (8009958 <VL53L1_preset_mode_standard_ranging+0x134>)
	pgeneral->phasecal_config__override                       = 0x00;
 80098b4:	724c      	strb	r4, [r1, #9]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 80098b6:	f44f 490c 	mov.w	r9, #35840	; 0x8c00

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 80098ba:	f04f 0a1a 	mov.w	sl, #26
	pgeneral->dss_config__roi_mode_control =
 80098be:	728f      	strb	r7, [r1, #10]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 80098c0:	f8c1 0012 	str.w	r0, [r1, #18]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 80098c4:	818c      	strh	r4, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 80098c6:	81cc      	strh	r4, [r1, #14]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 80098c8:	f8a1 9010 	strh.w	r9, [r1, #16]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 80098cc:	f04f 0b20 	mov.w	fp, #32
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 80098d0:	f882 a001 	strb.w	sl, [r2, #1]
	ptiming->range_config__vcsel_period_a                     = 0x0B;
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 80098d4:	2109      	movs	r1, #9
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 80098d6:	f04f 0a0b 	mov.w	sl, #11
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 80098da:	f04f 09cc 	mov.w	r9, #204	; 0xcc
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 80098de:	20f5      	movs	r0, #245	; 0xf5
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 80098e0:	7014      	strb	r4, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 80098e2:	7094      	strb	r4, [r2, #2]
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 80098e4:	7117      	strb	r7, [r2, #4]
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 80098e6:	71d7      	strb	r7, [r2, #7]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 80098e8:	f882 b003 	strb.w	fp, [r2, #3]
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 80098ec:	f882 a006 	strb.w	sl, [r2, #6]
	ptiming->range_config__vcsel_period_b                     = 0x09;
 80098f0:	7251      	strb	r1, [r2, #9]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 80098f2:	f882 9005 	strb.w	r9, [r2, #5]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 80098f6:	7210      	strb	r0, [r2, #8]
	 * Sigma thresh register - format 14.2
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
 80098f8:	8ab0      	ldrh	r0, [r6, #20]
	/*
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 80098fa:	f8b6 901a 	ldrh.w	r9, [r6, #26]
	ptiming->range_config__sigma_thresh                       =
 80098fe:	8150      	strh	r0, [r2, #10]
	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
	ptiming->range_config__valid_phase_high                   = 0x78;
 8009900:	2078      	movs	r0, #120	; 0x78
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8009902:	f8a2 900c 	strh.w	r9, [r2, #12]
	ptiming->range_config__valid_phase_high                   = 0x78;
 8009906:	73d0      	strb	r0, [r2, #15]
	ptiming->range_config__valid_phase_low                    = 0x08;
 8009908:	f882 800e 	strb.w	r8, [r2, #14]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800990c:	6114      	str	r4, [r2, #16]
	ptiming->system__fractional_enable                        = 0x00;
 800990e:	7514      	strb	r4, [r2, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 8009910:	701f      	strb	r7, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 8009912:	f8c3 4002 	str.w	r4, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 8009916:	719c      	strb	r4, [r3, #6]
	pdynamic->system__seed_config =
 8009918:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
 800991c:	71da      	strb	r2, [r3, #7]
			ptuning_parms->tp_lite_seed_cfg;

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800991e:	f883 a008 	strb.w	sl, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 8009922:	7259      	strb	r1, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
 8009924:	79f2      	ldrb	r2, [r6, #7]
 8009926:	729a      	strb	r2, [r3, #10]
			ptuning_parms->tp_init_phase_rtn_lite_med;
	pdynamic->sd_config__initial_phase_sd1                     =
 8009928:	7ab2      	ldrb	r2, [r6, #10]
 800992a:	72da      	strb	r2, [r3, #11]
			ptuning_parms->tp_init_phase_ref_lite_med;;

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800992c:	731f      	strb	r7, [r3, #12]
	 *        3  -> 4095
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
 800992e:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
 8009932:	735a      	strb	r2, [r3, #13]
			ptuning_parms->tp_lite_first_order_select;
	pdynamic->sd_config__quantifier         =
 8009934:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
 8009938:	7399      	strb	r1, [r3, #14]
	pdynamic->system__grouped_parameter_hold                   = 0x02;

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 800993a:	4a08      	ldr	r2, [pc, #32]	; (800995c <VL53L1_preset_mode_standard_ranging+0x138>)
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800993c:	f883 c010 	strb.w	ip, [r3, #16]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8009940:	26c7      	movs	r6, #199	; 0xc7
	pdynamic->system__sequence_config                          = \
 8009942:	21db      	movs	r1, #219	; 0xdb
	pdynamic->system__grouped_parameter_hold                   = 0x02;
 8009944:	f883 e012 	strb.w	lr, [r3, #18]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8009948:	73de      	strb	r6, [r3, #15]
	pdynamic->system__sequence_config                          = \
 800994a:	7459      	strb	r1, [r3, #17]
	psystem->system__stream_count_ctrl                         = 0x00;
 800994c:	f8c5 2001 	str.w	r2, [r5, #1]
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
}
 8009950:	4620      	mov	r0, r4
 8009952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009956:	bf00      	nop
 8009958:	01ff3800 	.word	0x01ff3800
 800995c:	21010100 	.word	0x21010100

08009960 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8009960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009964:	9d09      	ldr	r5, [sp, #36]	; 0x24
	pstatic->debug__ctrl                                      = 0x00;
 8009966:	2400      	movs	r4, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 8009968:	f04f 0e02 	mov.w	lr, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800996c:	f04f 0c08 	mov.w	ip, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8009970:	f44f 6720 	mov.w	r7, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 8009974:	2611      	movs	r6, #17
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8009976:	8007      	strh	r7, [r0, #0]
	pstatic->debug__ctrl                                      = 0x00;
 8009978:	7084      	strb	r4, [r0, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800997a:	70c4      	strb	r4, [r0, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800997c:	7104      	strb	r4, [r0, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800997e:	7144      	strb	r4, [r0, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 8009980:	7184      	strb	r4, [r0, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 8009982:	71c4      	strb	r4, [r0, #7]
	pstatic->host_if__status                                  = 0x00;
 8009984:	7204      	strb	r4, [r0, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 8009986:	7244      	strb	r4, [r0, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 8009988:	7284      	strb	r4, [r0, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800998a:	72c4      	strb	r4, [r0, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800998c:	7384      	strb	r4, [r0, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800998e:	7444      	strb	r4, [r0, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 8009990:	f880 e00d 	strb.w	lr, [r0, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 8009994:	f880 e00f 	strb.w	lr, [r0, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8009998:	f880 c010 	strb.w	ip, [r0, #16]
	pstatic->gpio_hv_mux__ctrl  = \
 800999c:	7306      	strb	r6, [r0, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800999e:	7fae      	ldrb	r6, [r5, #30]
 80099a0:	7486      	strb	r6, [r0, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 80099a2:	7fee      	ldrb	r6, [r5, #31]
 80099a4:	74c6      	strb	r6, [r0, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 80099a6:	f895 6020 	ldrb.w	r6, [r5, #32]
 80099aa:	7506      	strb	r6, [r0, #20]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 80099ac:	2701      	movs	r7, #1
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 80099ae:	f04f 08ff 	mov.w	r8, #255	; 0xff
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 80099b2:	7584      	strb	r4, [r0, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 80099b4:	75c4      	strb	r4, [r0, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 80099b6:	8304      	strh	r4, [r0, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 80099b8:	7547      	strb	r7, [r0, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 80099ba:	f880 801a 	strb.w	r8, [r0, #26]
	pstatic->algo__range_min_clip                             =
 80099be:	7c2e      	ldrb	r6, [r5, #16]
 80099c0:	76c6      	strb	r6, [r0, #27]
{
 80099c2:	9e08      	ldr	r6, [sp, #32]
	pstatic->algo__consistency_check__tolerance               =
 80099c4:	f895 900c 	ldrb.w	r9, [r5, #12]
 80099c8:	f880 901c 	strb.w	r9, [r0, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 80099cc:	f04f 6932 	mov.w	r9, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 80099d0:	7744      	strb	r4, [r0, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 80099d2:	7784      	strb	r4, [r0, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 80099d4:	77c4      	strb	r4, [r0, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 80099d6:	f8c1 9000 	str.w	r9, [r1]
	pgeneral->cal_config__repeat_rate                         =
 80099da:	89e8      	ldrh	r0, [r5, #14]
 80099dc:	8088      	strh	r0, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 80099de:	200d      	movs	r0, #13
	pgeneral->global_config__vcsel_width                      = 0x02;
 80099e0:	f881 e006 	strb.w	lr, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 80099e4:	71c8      	strb	r0, [r1, #7]
	pgeneral->phasecal_config__target                         =
 80099e6:	f895 900d 	ldrb.w	r9, [r5, #13]
 80099ea:	f881 9008 	strb.w	r9, [r1, #8]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 80099ee:	4827      	ldr	r0, [pc, #156]	; (8009a8c <VL53L1_preset_mode_standard_ranging_short_range+0x12c>)
	pgeneral->phasecal_config__override                       = 0x00;
 80099f0:	724c      	strb	r4, [r1, #9]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 80099f2:	f44f 490c 	mov.w	r9, #35840	; 0x8c00
	pgeneral->dss_config__roi_mode_control =
 80099f6:	728f      	strb	r7, [r1, #10]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 80099f8:	818c      	strh	r4, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 80099fa:	81cc      	strh	r4, [r1, #14]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 80099fc:	f8a1 9010 	strh.w	r9, [r1, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8009a00:	f8c1 0012 	str.w	r0, [r1, #18]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8009a04:	f04f 0a1a 	mov.w	sl, #26
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8009a08:	f04f 0920 	mov.w	r9, #32
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 8009a0c:	20cc      	movs	r0, #204	; 0xcc
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8009a0e:	21f5      	movs	r1, #245	; 0xf5
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 8009a10:	7014      	strb	r4, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 8009a12:	7094      	strb	r4, [r2, #2]
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8009a14:	7117      	strb	r7, [r2, #4]
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8009a16:	71d7      	strb	r7, [r2, #7]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 8009a18:	6114      	str	r4, [r2, #16]
	ptiming->system__fractional_enable                        = 0x00;
 8009a1a:	7514      	strb	r4, [r2, #20]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8009a1c:	f882 a001 	strb.w	sl, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8009a20:	f882 9003 	strb.w	r9, [r2, #3]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 8009a24:	7150      	strb	r0, [r2, #5]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8009a26:	7211      	strb	r1, [r2, #8]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 8009a28:	701f      	strb	r7, [r3, #0]
	pdynamic->system__thresh_high                              = 0x0000;
 8009a2a:	f8c3 4002 	str.w	r4, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 8009a2e:	719c      	strb	r4, [r3, #6]
	pdynamic->system__seed_config =
 8009a30:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 8009a34:	71d9      	strb	r1, [r3, #7]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 8009a36:	731f      	strb	r7, [r3, #12]
	pdynamic->sd_config__first_order_select =
 8009a38:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
 8009a3c:	7359      	strb	r1, [r3, #13]
	pdynamic->sd_config__quantifier         =
 8009a3e:	f895 1023 	ldrb.w	r1, [r5, #35]	; 0x23
 8009a42:	7399      	strb	r1, [r3, #14]
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 8009a44:	2007      	movs	r0, #7
		ptiming->range_config__vcsel_period_b                = 0x05;
 8009a46:	2105      	movs	r1, #5
	psystem->system__stream_count_ctrl                         = 0x00;
 8009a48:	4f11      	ldr	r7, [pc, #68]	; (8009a90 <VL53L1_preset_mode_standard_ranging_short_range+0x130>)
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8009a4a:	f883 8010 	strb.w	r8, [r3, #16]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8009a4e:	f04f 0ac7 	mov.w	sl, #199	; 0xc7
	pdynamic->system__sequence_config                          = \
 8009a52:	f04f 09db 	mov.w	r9, #219	; 0xdb
	pdynamic->system__grouped_parameter_hold                   = 0x02;
 8009a56:	f883 e012 	strb.w	lr, [r3, #18]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8009a5a:	f883 a00f 	strb.w	sl, [r3, #15]
	pdynamic->system__sequence_config                          = \
 8009a5e:	f883 9011 	strb.w	r9, [r3, #17]
	psystem->system__stream_count_ctrl                         = 0x00;
 8009a62:	f8c6 7001 	str.w	r7, [r6, #1]
		ptiming->range_config__vcsel_period_a                = 0x07;
 8009a66:	7190      	strb	r0, [r2, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 8009a68:	7251      	strb	r1, [r2, #9]
		ptiming->range_config__sigma_thresh                  =
 8009a6a:	8aee      	ldrh	r6, [r5, #22]
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8009a6c:	8baf      	ldrh	r7, [r5, #28]
		ptiming->range_config__sigma_thresh                  =
 8009a6e:	8156      	strh	r6, [r2, #10]
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
		ptiming->range_config__valid_phase_low               = 0x08;
		ptiming->range_config__valid_phase_high              = 0x38;
 8009a70:	2638      	movs	r6, #56	; 0x38
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8009a72:	8197      	strh	r7, [r2, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 8009a74:	f882 c00e 	strb.w	ip, [r2, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 8009a78:	73d6      	strb	r6, [r2, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 8009a7a:	7218      	strb	r0, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 8009a7c:	7259      	strb	r1, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
 8009a7e:	7a2a      	ldrb	r2, [r5, #8]
 8009a80:	729a      	strb	r2, [r3, #10]
				ptuning_parms->tp_init_phase_rtn_lite_short;
		pdynamic->sd_config__initial_phase_sd1               =
 8009a82:	7aea      	ldrb	r2, [r5, #11]
 8009a84:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8009a86:	4620      	mov	r0, r4
 8009a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a8c:	01ff3800 	.word	0x01ff3800
 8009a90:	21010100 	.word	0x21010100

08009a94 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8009a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a98:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pstatic->debug__ctrl                                      = 0x00;
 8009a9a:	2400      	movs	r4, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 8009a9c:	f04f 0e02 	mov.w	lr, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8009aa0:	f04f 0c08 	mov.w	ip, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8009aa4:	f44f 6720 	mov.w	r7, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 8009aa8:	2611      	movs	r6, #17
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8009aaa:	8007      	strh	r7, [r0, #0]
	pstatic->debug__ctrl                                      = 0x00;
 8009aac:	7084      	strb	r4, [r0, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 8009aae:	70c4      	strb	r4, [r0, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 8009ab0:	7104      	strb	r4, [r0, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 8009ab2:	7144      	strb	r4, [r0, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 8009ab4:	7184      	strb	r4, [r0, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 8009ab6:	71c4      	strb	r4, [r0, #7]
	pstatic->host_if__status                                  = 0x00;
 8009ab8:	7204      	strb	r4, [r0, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 8009aba:	7244      	strb	r4, [r0, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 8009abc:	7284      	strb	r4, [r0, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 8009abe:	72c4      	strb	r4, [r0, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 8009ac0:	7384      	strb	r4, [r0, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 8009ac2:	7444      	strb	r4, [r0, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 8009ac4:	f880 e00d 	strb.w	lr, [r0, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 8009ac8:	f880 e00f 	strb.w	lr, [r0, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8009acc:	f880 c010 	strb.w	ip, [r0, #16]
	pstatic->gpio_hv_mux__ctrl  = \
 8009ad0:	7306      	strb	r6, [r0, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8009ad2:	7fae      	ldrb	r6, [r5, #30]
 8009ad4:	7486      	strb	r6, [r0, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8009ad6:	7fee      	ldrb	r6, [r5, #31]
 8009ad8:	74c6      	strb	r6, [r0, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8009ada:	f895 6020 	ldrb.w	r6, [r5, #32]
 8009ade:	7506      	strb	r6, [r0, #20]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8009ae0:	2701      	movs	r7, #1
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8009ae2:	f04f 08ff 	mov.w	r8, #255	; 0xff
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 8009ae6:	7584      	strb	r4, [r0, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 8009ae8:	75c4      	strb	r4, [r0, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 8009aea:	8304      	strh	r4, [r0, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8009aec:	7547      	strb	r7, [r0, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8009aee:	f880 801a 	strb.w	r8, [r0, #26]
	pstatic->algo__range_min_clip                             =
 8009af2:	7c2e      	ldrb	r6, [r5, #16]
 8009af4:	76c6      	strb	r6, [r0, #27]
	pstatic->algo__consistency_check__tolerance               =
 8009af6:	f895 900c 	ldrb.w	r9, [r5, #12]
 8009afa:	f880 901c 	strb.w	r9, [r0, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8009afe:	f04f 6932 	mov.w	r9, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 8009b02:	7744      	strb	r4, [r0, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 8009b04:	7784      	strb	r4, [r0, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 8009b06:	77c4      	strb	r4, [r0, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8009b08:	f8c1 9000 	str.w	r9, [r1]
	pgeneral->cal_config__repeat_rate                         =
 8009b0c:	89e8      	ldrh	r0, [r5, #14]
 8009b0e:	8088      	strh	r0, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 8009b10:	200d      	movs	r0, #13
	pgeneral->global_config__vcsel_width                      = 0x02;
 8009b12:	f881 e006 	strb.w	lr, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 8009b16:	71c8      	strb	r0, [r1, #7]
	pgeneral->phasecal_config__target                         =
 8009b18:	f895 a00d 	ldrb.w	sl, [r5, #13]
 8009b1c:	f881 a008 	strb.w	sl, [r1, #8]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8009b20:	4e28      	ldr	r6, [pc, #160]	; (8009bc4 <VL53L1_preset_mode_standard_ranging_long_range+0x130>)
	pgeneral->phasecal_config__override                       = 0x00;
 8009b22:	724c      	strb	r4, [r1, #9]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 8009b24:	f44f 4a0c 	mov.w	sl, #35840	; 0x8c00
	pgeneral->dss_config__roi_mode_control =
 8009b28:	728f      	strb	r7, [r1, #10]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 8009b2a:	818c      	strh	r4, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 8009b2c:	81cc      	strh	r4, [r1, #14]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 8009b2e:	f8a1 a010 	strh.w	sl, [r1, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8009b32:	f8c1 6012 	str.w	r6, [r1, #18]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8009b36:	f04f 0b1a 	mov.w	fp, #26
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8009b3a:	f04f 0a20 	mov.w	sl, #32
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 8009b3e:	f04f 09cc 	mov.w	r9, #204	; 0xcc
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8009b42:	21f5      	movs	r1, #245	; 0xf5
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 8009b44:	7014      	strb	r4, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 8009b46:	7094      	strb	r4, [r2, #2]
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8009b48:	7117      	strb	r7, [r2, #4]
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8009b4a:	71d7      	strb	r7, [r2, #7]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 8009b4c:	6114      	str	r4, [r2, #16]
	ptiming->system__fractional_enable                        = 0x00;
 8009b4e:	7514      	strb	r4, [r2, #20]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8009b50:	f882 b001 	strb.w	fp, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8009b54:	f882 a003 	strb.w	sl, [r2, #3]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 8009b58:	f882 9005 	strb.w	r9, [r2, #5]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8009b5c:	7211      	strb	r1, [r2, #8]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 8009b5e:	701f      	strb	r7, [r3, #0]
	pdynamic->system__thresh_high                              = 0x0000;
 8009b60:	f8c3 4002 	str.w	r4, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 8009b64:	719c      	strb	r4, [r3, #6]
	pdynamic->system__seed_config =
 8009b66:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 8009b6a:	71d9      	strb	r1, [r3, #7]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 8009b6c:	731f      	strb	r7, [r3, #12]
	pdynamic->sd_config__first_order_select =
 8009b6e:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
 8009b72:	7359      	strb	r1, [r3, #13]
	pdynamic->sd_config__quantifier         =
 8009b74:	f895 1023 	ldrb.w	r1, [r5, #35]	; 0x23
	psystem->system__stream_count_ctrl                         = 0x00;
 8009b78:	9e09      	ldr	r6, [sp, #36]	; 0x24
	pdynamic->sd_config__quantifier         =
 8009b7a:	7399      	strb	r1, [r3, #14]
	psystem->system__stream_count_ctrl                         = 0x00;
 8009b7c:	4f12      	ldr	r7, [pc, #72]	; (8009bc8 <VL53L1_preset_mode_standard_ranging_long_range+0x134>)
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8009b7e:	f883 8010 	strb.w	r8, [r3, #16]
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 8009b82:	210f      	movs	r1, #15
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8009b84:	f04f 0ac7 	mov.w	sl, #199	; 0xc7
	pdynamic->system__sequence_config                          = \
 8009b88:	f04f 09db 	mov.w	r9, #219	; 0xdb
	pdynamic->system__grouped_parameter_hold                   = 0x02;
 8009b8c:	f883 e012 	strb.w	lr, [r3, #18]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8009b90:	f883 a00f 	strb.w	sl, [r3, #15]
	pdynamic->system__sequence_config                          = \
 8009b94:	f883 9011 	strb.w	r9, [r3, #17]
	psystem->system__stream_count_ctrl                         = 0x00;
 8009b98:	f8c6 7001 	str.w	r7, [r6, #1]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 8009b9c:	7250      	strb	r0, [r2, #9]
		ptiming->range_config__vcsel_period_a                = 0x0F;
 8009b9e:	7191      	strb	r1, [r2, #6]
		ptiming->range_config__sigma_thresh                  =
 8009ba0:	8a6e      	ldrh	r6, [r5, #18]
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8009ba2:	8b2f      	ldrh	r7, [r5, #24]
		ptiming->range_config__sigma_thresh                  =
 8009ba4:	8156      	strh	r6, [r2, #10]
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
		ptiming->range_config__valid_phase_low               = 0x08;
		ptiming->range_config__valid_phase_high              = 0xB8;
 8009ba6:	26b8      	movs	r6, #184	; 0xb8
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8009ba8:	8197      	strh	r7, [r2, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 8009baa:	f882 c00e 	strb.w	ip, [r2, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 8009bae:	73d6      	strb	r6, [r2, #15]
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 8009bb0:	7258      	strb	r0, [r3, #9]
		pdynamic->sd_config__woi_sd0                         = 0x0F;
 8009bb2:	7219      	strb	r1, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 8009bb4:	79aa      	ldrb	r2, [r5, #6]
 8009bb6:	729a      	strb	r2, [r3, #10]
				ptuning_parms->tp_init_phase_rtn_lite_long;
		pdynamic->sd_config__initial_phase_sd1               =
 8009bb8:	7a6a      	ldrb	r2, [r5, #9]
 8009bba:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8009bbc:	4620      	mov	r0, r4
 8009bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bc2:	bf00      	nop
 8009bc4:	01ff3800 	.word	0x01ff3800
 8009bc8:	21010100 	.word	0x21010100

08009bcc <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8009bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bd0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pstatic->debug__ctrl                                      = 0x00;
 8009bd2:	2400      	movs	r4, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 8009bd4:	2702      	movs	r7, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8009bd6:	f04f 0808 	mov.w	r8, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8009bda:	f44f 6e20 	mov.w	lr, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 8009bde:	2611      	movs	r6, #17
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8009be0:	f8a0 e000 	strh.w	lr, [r0]
	pstatic->debug__ctrl                                      = 0x00;
 8009be4:	7084      	strb	r4, [r0, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 8009be6:	70c4      	strb	r4, [r0, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 8009be8:	7104      	strb	r4, [r0, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 8009bea:	7144      	strb	r4, [r0, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 8009bec:	7184      	strb	r4, [r0, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 8009bee:	71c4      	strb	r4, [r0, #7]
	pstatic->host_if__status                                  = 0x00;
 8009bf0:	7204      	strb	r4, [r0, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 8009bf2:	7244      	strb	r4, [r0, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 8009bf4:	7284      	strb	r4, [r0, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 8009bf6:	72c4      	strb	r4, [r0, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 8009bf8:	7384      	strb	r4, [r0, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 8009bfa:	7444      	strb	r4, [r0, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 8009bfc:	7347      	strb	r7, [r0, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 8009bfe:	73c7      	strb	r7, [r0, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8009c00:	f880 8010 	strb.w	r8, [r0, #16]
	pstatic->gpio_hv_mux__ctrl  = \
 8009c04:	7306      	strb	r6, [r0, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8009c06:	7fae      	ldrb	r6, [r5, #30]
 8009c08:	7486      	strb	r6, [r0, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8009c0a:	7fee      	ldrb	r6, [r5, #31]
 8009c0c:	74c6      	strb	r6, [r0, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8009c0e:	f895 6020 	ldrb.w	r6, [r5, #32]
 8009c12:	7506      	strb	r6, [r0, #20]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8009c14:	f04f 0e01 	mov.w	lr, #1
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8009c18:	f04f 0cff 	mov.w	ip, #255	; 0xff
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 8009c1c:	7584      	strb	r4, [r0, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 8009c1e:	75c4      	strb	r4, [r0, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 8009c20:	8304      	strh	r4, [r0, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8009c22:	f880 e015 	strb.w	lr, [r0, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8009c26:	f880 c01a 	strb.w	ip, [r0, #26]
	pstatic->algo__range_min_clip                             =
 8009c2a:	7c2e      	ldrb	r6, [r5, #16]
 8009c2c:	76c6      	strb	r6, [r0, #27]
	pstatic->algo__consistency_check__tolerance               =
 8009c2e:	f895 900c 	ldrb.w	r9, [r5, #12]
 8009c32:	f880 901c 	strb.w	r9, [r0, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8009c36:	f04f 6932 	mov.w	r9, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 8009c3a:	7744      	strb	r4, [r0, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 8009c3c:	7784      	strb	r4, [r0, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 8009c3e:	77c4      	strb	r4, [r0, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8009c40:	f8c1 9000 	str.w	r9, [r1]
	pgeneral->cal_config__repeat_rate                         =
 8009c44:	89e8      	ldrh	r0, [r5, #14]
 8009c46:	8088      	strh	r0, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 8009c48:	200d      	movs	r0, #13
	pgeneral->global_config__vcsel_width                      = 0x02;
 8009c4a:	718f      	strb	r7, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 8009c4c:	71c8      	strb	r0, [r1, #7]
	pgeneral->phasecal_config__target                         =
 8009c4e:	7b68      	ldrb	r0, [r5, #13]
 8009c50:	7208      	strb	r0, [r1, #8]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8009c52:	4e2e      	ldr	r6, [pc, #184]	; (8009d0c <VL53L1_preset_mode_standard_ranging_mm1_cal+0x140>)
	pgeneral->phasecal_config__override                       = 0x00;
 8009c54:	724c      	strb	r4, [r1, #9]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 8009c56:	f44f 4b0c 	mov.w	fp, #35840	; 0x8c00
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8009c5a:	f04f 091a 	mov.w	r9, #26
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8009c5e:	2020      	movs	r0, #32
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8009c60:	f8c1 6012 	str.w	r6, [r1, #18]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 8009c64:	818c      	strh	r4, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 8009c66:	81cc      	strh	r4, [r1, #14]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 8009c68:	f8a1 b010 	strh.w	fp, [r1, #16]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8009c6c:	f04f 0af5 	mov.w	sl, #245	; 0xf5
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8009c70:	f882 9001 	strb.w	r9, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8009c74:	70d0      	strb	r0, [r2, #3]
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 8009c76:	f04f 090b 	mov.w	r9, #11
	ptiming->range_config__vcsel_period_b                     = 0x09;
 8009c7a:	2009      	movs	r0, #9
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 8009c7c:	f04f 0bcc 	mov.w	fp, #204	; 0xcc
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 8009c80:	7014      	strb	r4, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 8009c82:	7094      	strb	r4, [r2, #2]
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8009c84:	f882 e004 	strb.w	lr, [r2, #4]
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8009c88:	f882 e007 	strb.w	lr, [r2, #7]
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 8009c8c:	f882 9006 	strb.w	r9, [r2, #6]
	ptiming->range_config__vcsel_period_b                     = 0x09;
 8009c90:	7250      	strb	r0, [r2, #9]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 8009c92:	f882 b005 	strb.w	fp, [r2, #5]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8009c96:	f882 a008 	strb.w	sl, [r2, #8]
	ptiming->range_config__sigma_thresh                       =
 8009c9a:	f8b5 a014 	ldrh.w	sl, [r5, #20]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8009c9e:	f8b5 b01a 	ldrh.w	fp, [r5, #26]
	ptiming->range_config__sigma_thresh                       =
 8009ca2:	f8a2 a00a 	strh.w	sl, [r2, #10]
	ptiming->range_config__valid_phase_high                   = 0x78;
 8009ca6:	f04f 0a78 	mov.w	sl, #120	; 0x78
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8009caa:	f8a2 b00c 	strh.w	fp, [r2, #12]
	ptiming->range_config__valid_phase_low                    = 0x08;
 8009cae:	f882 800e 	strb.w	r8, [r2, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 8009cb2:	f882 a00f 	strb.w	sl, [r2, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 8009cb6:	6114      	str	r4, [r2, #16]
	ptiming->system__fractional_enable                        = 0x00;
 8009cb8:	7514      	strb	r4, [r2, #20]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 8009cba:	f883 e000 	strb.w	lr, [r3]
	pdynamic->system__thresh_high                              = 0x0000;
 8009cbe:	f8c3 4002 	str.w	r4, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 8009cc2:	719c      	strb	r4, [r3, #6]
	pdynamic->system__seed_config =
 8009cc4:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
 8009cc8:	71da      	strb	r2, [r3, #7]
	pdynamic->sd_config__woi_sd1                               = 0x09;
 8009cca:	7258      	strb	r0, [r3, #9]
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 8009ccc:	f883 9008 	strb.w	r9, [r3, #8]
	pdynamic->sd_config__initial_phase_sd0                     =
 8009cd0:	79ea      	ldrb	r2, [r5, #7]
 8009cd2:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8009cd4:	7aaa      	ldrb	r2, [r5, #10]
 8009cd6:	72da      	strb	r2, [r3, #11]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 8009cd8:	f883 e00c 	strb.w	lr, [r3, #12]
	pdynamic->sd_config__first_order_select =
 8009cdc:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
 8009ce0:	735a      	strb	r2, [r3, #13]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8009ce2:	4620      	mov	r0, r4
	psystem->system__stream_count_ctrl                         = 0x00;
 8009ce4:	9c09      	ldr	r4, [sp, #36]	; 0x24
	pdynamic->sd_config__quantifier         =
 8009ce6:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
	psystem->system__stream_count_ctrl                         = 0x00;
 8009cea:	4d09      	ldr	r5, [pc, #36]	; (8009d10 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x144>)
	pdynamic->sd_config__quantifier         =
 8009cec:	739a      	strb	r2, [r3, #14]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8009cee:	f04f 0ec7 	mov.w	lr, #199	; 0xc7
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8009cf2:	f883 c010 	strb.w	ip, [r3, #16]
	pdynamic->system__grouped_parameter_hold                   = 0x02;
 8009cf6:	749f      	strb	r7, [r3, #18]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8009cf8:	f883 e00f 	strb.w	lr, [r3, #15]
		pdynamic->system__sequence_config  = \
 8009cfc:	223b      	movs	r2, #59	; 0x3b
	psystem->system__stream_count_ctrl                         = 0x00;
 8009cfe:	f8c4 5001 	str.w	r5, [r4, #1]
		pgeneral->dss_config__roi_mode_control =
 8009d02:	728f      	strb	r7, [r1, #10]
		pdynamic->system__sequence_config  = \
 8009d04:	745a      	strb	r2, [r3, #17]
}
 8009d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d0a:	bf00      	nop
 8009d0c:	01ff3800 	.word	0x01ff3800
 8009d10:	21010100 	.word	0x21010100

08009d14 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8009d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d18:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pstatic->debug__ctrl                                      = 0x00;
 8009d1a:	2400      	movs	r4, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 8009d1c:	2702      	movs	r7, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8009d1e:	f04f 0808 	mov.w	r8, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8009d22:	f44f 6e20 	mov.w	lr, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 8009d26:	2611      	movs	r6, #17
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8009d28:	f8a0 e000 	strh.w	lr, [r0]
	pstatic->debug__ctrl                                      = 0x00;
 8009d2c:	7084      	strb	r4, [r0, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 8009d2e:	70c4      	strb	r4, [r0, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 8009d30:	7104      	strb	r4, [r0, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 8009d32:	7144      	strb	r4, [r0, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 8009d34:	7184      	strb	r4, [r0, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 8009d36:	71c4      	strb	r4, [r0, #7]
	pstatic->host_if__status                                  = 0x00;
 8009d38:	7204      	strb	r4, [r0, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 8009d3a:	7244      	strb	r4, [r0, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 8009d3c:	7284      	strb	r4, [r0, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 8009d3e:	72c4      	strb	r4, [r0, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 8009d40:	7384      	strb	r4, [r0, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 8009d42:	7444      	strb	r4, [r0, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 8009d44:	7347      	strb	r7, [r0, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 8009d46:	73c7      	strb	r7, [r0, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8009d48:	f880 8010 	strb.w	r8, [r0, #16]
	pstatic->gpio_hv_mux__ctrl  = \
 8009d4c:	7306      	strb	r6, [r0, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8009d4e:	7fae      	ldrb	r6, [r5, #30]
 8009d50:	7486      	strb	r6, [r0, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8009d52:	7fee      	ldrb	r6, [r5, #31]
 8009d54:	74c6      	strb	r6, [r0, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8009d56:	f895 6020 	ldrb.w	r6, [r5, #32]
 8009d5a:	7506      	strb	r6, [r0, #20]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8009d5c:	f04f 0e01 	mov.w	lr, #1
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8009d60:	f04f 0cff 	mov.w	ip, #255	; 0xff
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 8009d64:	7584      	strb	r4, [r0, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 8009d66:	75c4      	strb	r4, [r0, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 8009d68:	8304      	strh	r4, [r0, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8009d6a:	f880 e015 	strb.w	lr, [r0, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8009d6e:	f880 c01a 	strb.w	ip, [r0, #26]
	pstatic->algo__range_min_clip                             =
 8009d72:	7c2e      	ldrb	r6, [r5, #16]
 8009d74:	76c6      	strb	r6, [r0, #27]
	pstatic->algo__consistency_check__tolerance               =
 8009d76:	f895 900c 	ldrb.w	r9, [r5, #12]
 8009d7a:	f880 901c 	strb.w	r9, [r0, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8009d7e:	f04f 6932 	mov.w	r9, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 8009d82:	7744      	strb	r4, [r0, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 8009d84:	7784      	strb	r4, [r0, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 8009d86:	77c4      	strb	r4, [r0, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8009d88:	f8c1 9000 	str.w	r9, [r1]
	pgeneral->cal_config__repeat_rate                         =
 8009d8c:	89e8      	ldrh	r0, [r5, #14]
 8009d8e:	8088      	strh	r0, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 8009d90:	200d      	movs	r0, #13
	pgeneral->global_config__vcsel_width                      = 0x02;
 8009d92:	718f      	strb	r7, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 8009d94:	71c8      	strb	r0, [r1, #7]
	pgeneral->phasecal_config__target                         =
 8009d96:	7b68      	ldrb	r0, [r5, #13]
 8009d98:	7208      	strb	r0, [r1, #8]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8009d9a:	4e2e      	ldr	r6, [pc, #184]	; (8009e54 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x140>)
	pgeneral->phasecal_config__override                       = 0x00;
 8009d9c:	724c      	strb	r4, [r1, #9]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 8009d9e:	f44f 4b0c 	mov.w	fp, #35840	; 0x8c00
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8009da2:	f04f 091a 	mov.w	r9, #26
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8009da6:	2020      	movs	r0, #32
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8009da8:	f8c1 6012 	str.w	r6, [r1, #18]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 8009dac:	818c      	strh	r4, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 8009dae:	81cc      	strh	r4, [r1, #14]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 8009db0:	f8a1 b010 	strh.w	fp, [r1, #16]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8009db4:	f04f 0af5 	mov.w	sl, #245	; 0xf5
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8009db8:	f882 9001 	strb.w	r9, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8009dbc:	70d0      	strb	r0, [r2, #3]
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 8009dbe:	f04f 090b 	mov.w	r9, #11
	ptiming->range_config__vcsel_period_b                     = 0x09;
 8009dc2:	2009      	movs	r0, #9
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 8009dc4:	f04f 0bcc 	mov.w	fp, #204	; 0xcc
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 8009dc8:	7014      	strb	r4, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 8009dca:	7094      	strb	r4, [r2, #2]
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8009dcc:	f882 e004 	strb.w	lr, [r2, #4]
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8009dd0:	f882 e007 	strb.w	lr, [r2, #7]
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 8009dd4:	f882 9006 	strb.w	r9, [r2, #6]
	ptiming->range_config__vcsel_period_b                     = 0x09;
 8009dd8:	7250      	strb	r0, [r2, #9]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 8009dda:	f882 b005 	strb.w	fp, [r2, #5]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8009dde:	f882 a008 	strb.w	sl, [r2, #8]
	ptiming->range_config__sigma_thresh                       =
 8009de2:	f8b5 a014 	ldrh.w	sl, [r5, #20]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8009de6:	f8b5 b01a 	ldrh.w	fp, [r5, #26]
	ptiming->range_config__sigma_thresh                       =
 8009dea:	f8a2 a00a 	strh.w	sl, [r2, #10]
	ptiming->range_config__valid_phase_high                   = 0x78;
 8009dee:	f04f 0a78 	mov.w	sl, #120	; 0x78
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8009df2:	f8a2 b00c 	strh.w	fp, [r2, #12]
	ptiming->range_config__valid_phase_low                    = 0x08;
 8009df6:	f882 800e 	strb.w	r8, [r2, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 8009dfa:	f882 a00f 	strb.w	sl, [r2, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 8009dfe:	6114      	str	r4, [r2, #16]
	ptiming->system__fractional_enable                        = 0x00;
 8009e00:	7514      	strb	r4, [r2, #20]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 8009e02:	f883 e000 	strb.w	lr, [r3]
	pdynamic->system__thresh_high                              = 0x0000;
 8009e06:	f8c3 4002 	str.w	r4, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 8009e0a:	719c      	strb	r4, [r3, #6]
	pdynamic->system__seed_config =
 8009e0c:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
 8009e10:	71da      	strb	r2, [r3, #7]
	pdynamic->sd_config__woi_sd1                               = 0x09;
 8009e12:	7258      	strb	r0, [r3, #9]
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 8009e14:	f883 9008 	strb.w	r9, [r3, #8]
	pdynamic->sd_config__initial_phase_sd0                     =
 8009e18:	79ea      	ldrb	r2, [r5, #7]
 8009e1a:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8009e1c:	7aaa      	ldrb	r2, [r5, #10]
 8009e1e:	72da      	strb	r2, [r3, #11]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 8009e20:	f883 e00c 	strb.w	lr, [r3, #12]
	pdynamic->sd_config__first_order_select =
 8009e24:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
 8009e28:	735a      	strb	r2, [r3, #13]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8009e2a:	4620      	mov	r0, r4
	psystem->system__stream_count_ctrl                         = 0x00;
 8009e2c:	9c09      	ldr	r4, [sp, #36]	; 0x24
	pdynamic->sd_config__quantifier         =
 8009e2e:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
	psystem->system__stream_count_ctrl                         = 0x00;
 8009e32:	4d09      	ldr	r5, [pc, #36]	; (8009e58 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x144>)
	pdynamic->sd_config__quantifier         =
 8009e34:	739a      	strb	r2, [r3, #14]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8009e36:	f04f 0ec7 	mov.w	lr, #199	; 0xc7
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8009e3a:	f883 c010 	strb.w	ip, [r3, #16]
	pdynamic->system__grouped_parameter_hold                   = 0x02;
 8009e3e:	749f      	strb	r7, [r3, #18]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8009e40:	f883 e00f 	strb.w	lr, [r3, #15]
		pdynamic->system__sequence_config  = \
 8009e44:	225b      	movs	r2, #91	; 0x5b
	psystem->system__stream_count_ctrl                         = 0x00;
 8009e46:	f8c4 5001 	str.w	r5, [r4, #1]
		pgeneral->dss_config__roi_mode_control =
 8009e4a:	728f      	strb	r7, [r1, #10]
		pdynamic->system__sequence_config  = \
 8009e4c:	745a      	strb	r2, [r3, #17]
}
 8009e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e52:	bf00      	nop
 8009e54:	01ff3800 	.word	0x01ff3800
 8009e58:	21010100 	.word	0x21010100

08009e5c <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8009e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e60:	4604      	mov	r4, r0
 8009e62:	9d09      	ldr	r5, [sp, #36]	; 0x24
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8009e64:	f8df a134 	ldr.w	sl, [pc, #308]	; 8009f9c <VL53L1_preset_mode_timed_ranging+0x140>
	pstatic->debug__ctrl                                      = 0x00;
 8009e68:	2000      	movs	r0, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 8009e6a:	f04f 0e02 	mov.w	lr, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8009e6e:	f04f 0808 	mov.w	r8, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8009e72:	f44f 6720 	mov.w	r7, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 8009e76:	2611      	movs	r6, #17
	pstatic->debug__ctrl                                      = 0x00;
 8009e78:	70a0      	strb	r0, [r4, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 8009e7a:	70e0      	strb	r0, [r4, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 8009e7c:	7120      	strb	r0, [r4, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 8009e7e:	7160      	strb	r0, [r4, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 8009e80:	71a0      	strb	r0, [r4, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 8009e82:	71e0      	strb	r0, [r4, #7]
	pstatic->host_if__status                                  = 0x00;
 8009e84:	7220      	strb	r0, [r4, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 8009e86:	7260      	strb	r0, [r4, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 8009e88:	72a0      	strb	r0, [r4, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 8009e8a:	72e0      	strb	r0, [r4, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 8009e8c:	73a0      	strb	r0, [r4, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 8009e8e:	7460      	strb	r0, [r4, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 8009e90:	f884 e00d 	strb.w	lr, [r4, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 8009e94:	f884 e00f 	strb.w	lr, [r4, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8009e98:	f884 8010 	strb.w	r8, [r4, #16]
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8009e9c:	8027      	strh	r7, [r4, #0]
	pstatic->gpio_hv_mux__ctrl  = \
 8009e9e:	7326      	strb	r6, [r4, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8009ea0:	7fae      	ldrb	r6, [r5, #30]
 8009ea2:	74a6      	strb	r6, [r4, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8009ea4:	7fee      	ldrb	r6, [r5, #31]
 8009ea6:	74e6      	strb	r6, [r4, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8009ea8:	f895 6020 	ldrb.w	r6, [r5, #32]
 8009eac:	7526      	strb	r6, [r4, #20]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8009eae:	f04f 0cff 	mov.w	ip, #255	; 0xff
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8009eb2:	2601      	movs	r6, #1
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 8009eb4:	75a0      	strb	r0, [r4, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 8009eb6:	75e0      	strb	r0, [r4, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 8009eb8:	8320      	strh	r0, [r4, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8009eba:	7566      	strb	r6, [r4, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8009ebc:	f884 c01a 	strb.w	ip, [r4, #26]
	pstatic->algo__range_min_clip                             =
 8009ec0:	7c2f      	ldrb	r7, [r5, #16]
 8009ec2:	76e7      	strb	r7, [r4, #27]
{
 8009ec4:	9f08      	ldr	r7, [sp, #32]
	pstatic->algo__consistency_check__tolerance               =
 8009ec6:	f895 900c 	ldrb.w	r9, [r5, #12]
 8009eca:	f884 901c 	strb.w	r9, [r4, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8009ece:	f04f 6932 	mov.w	r9, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 8009ed2:	7760      	strb	r0, [r4, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 8009ed4:	77a0      	strb	r0, [r4, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 8009ed6:	77e0      	strb	r0, [r4, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8009ed8:	f8c1 9000 	str.w	r9, [r1]
	pgeneral->cal_config__repeat_rate                         =
 8009edc:	89ec      	ldrh	r4, [r5, #14]
 8009ede:	808c      	strh	r4, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 8009ee0:	240d      	movs	r4, #13
	pgeneral->global_config__vcsel_width                      = 0x02;
 8009ee2:	f881 e006 	strb.w	lr, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 8009ee6:	71cc      	strb	r4, [r1, #7]
	pgeneral->phasecal_config__target                         =
 8009ee8:	7b6c      	ldrb	r4, [r5, #13]
 8009eea:	720c      	strb	r4, [r1, #8]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 8009eec:	f44f 440c 	mov.w	r4, #35840	; 0x8c00
	pgeneral->phasecal_config__override                       = 0x00;
 8009ef0:	7248      	strb	r0, [r1, #9]
	pgeneral->dss_config__roi_mode_control =
 8009ef2:	728e      	strb	r6, [r1, #10]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8009ef4:	f8c1 a012 	str.w	sl, [r1, #18]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 8009ef8:	8188      	strh	r0, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 8009efa:	81c8      	strh	r0, [r1, #14]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 8009efc:	820c      	strh	r4, [r1, #16]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8009efe:	f04f 091a 	mov.w	r9, #26
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 8009f02:	240b      	movs	r4, #11
	ptiming->range_config__vcsel_period_b                     = 0x09;
 8009f04:	2109      	movs	r1, #9
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8009f06:	f04f 0e20 	mov.w	lr, #32
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 8009f0a:	7010      	strb	r0, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 8009f0c:	7090      	strb	r0, [r2, #2]
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 8009f0e:	7194      	strb	r4, [r2, #6]
	ptiming->range_config__vcsel_period_b                     = 0x09;
 8009f10:	7251      	strb	r1, [r2, #9]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8009f12:	f882 9001 	strb.w	r9, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8009f16:	f882 e003 	strb.w	lr, [r2, #3]
	ptiming->range_config__sigma_thresh                       =
 8009f1a:	f8b5 e014 	ldrh.w	lr, [r5, #20]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8009f1e:	f8b5 901a 	ldrh.w	r9, [r5, #26]
	ptiming->range_config__sigma_thresh                       =
 8009f22:	f8a2 e00a 	strh.w	lr, [r2, #10]
	ptiming->range_config__valid_phase_high                   = 0x78;
 8009f26:	f04f 0e78 	mov.w	lr, #120	; 0x78
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8009f2a:	f8a2 900c 	strh.w	r9, [r2, #12]
	ptiming->range_config__valid_phase_low                    = 0x08;
 8009f2e:	f882 800e 	strb.w	r8, [r2, #14]
	ptiming->system__fractional_enable                        = 0x00;
 8009f32:	7510      	strb	r0, [r2, #20]
	ptiming->range_config__valid_phase_high                   = 0x78;
 8009f34:	f882 e00f 	strb.w	lr, [r2, #15]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 8009f38:	701e      	strb	r6, [r3, #0]
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 8009f3a:	721c      	strb	r4, [r3, #8]
	pdynamic->system__thresh_high                              = 0x0000;
 8009f3c:	f8c3 0002 	str.w	r0, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 8009f40:	7198      	strb	r0, [r3, #6]
	pdynamic->sd_config__woi_sd1                               = 0x09;
 8009f42:	7259      	strb	r1, [r3, #9]
	pdynamic->sd_config__initial_phase_sd0                     =
 8009f44:	79e9      	ldrb	r1, [r5, #7]
 8009f46:	7299      	strb	r1, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8009f48:	7aa9      	ldrb	r1, [r5, #10]
 8009f4a:	72d9      	strb	r1, [r3, #11]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 8009f4c:	731e      	strb	r6, [r3, #12]
	pdynamic->sd_config__first_order_select =
 8009f4e:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
 8009f52:	7359      	strb	r1, [r3, #13]
	pdynamic->sd_config__quantifier         =
 8009f54:	f895 1023 	ldrb.w	r1, [r5, #35]	; 0x23
 8009f58:	7399      	strb	r1, [r3, #14]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8009f5a:	f04f 09c7 	mov.w	r9, #199	; 0xc7
	pdynamic->system__sequence_config                          = \
 8009f5e:	f04f 08db 	mov.w	r8, #219	; 0xdb
		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 8009f62:	f04f 0eb1 	mov.w	lr, #177	; 0xb1
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 8009f66:	24d4      	movs	r4, #212	; 0xd4

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 8009f68:	f44f 61c0 	mov.w	r1, #1536	; 0x600
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8009f6c:	f883 c010 	strb.w	ip, [r3, #16]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8009f70:	f883 900f 	strb.w	r9, [r3, #15]
	pdynamic->system__sequence_config                          = \
 8009f74:	f883 8011 	strb.w	r8, [r3, #17]
	psystem->system__stream_count_ctrl                         = 0x00;
 8009f78:	7078      	strb	r0, [r7, #1]
	psystem->firmware__enable                                  = 0x01;
 8009f7a:	70be      	strb	r6, [r7, #2]
	psystem->system__interrupt_clear                           = \
 8009f7c:	70fe      	strb	r6, [r7, #3]
		pdynamic->system__grouped_parameter_hold = 0x00;
 8009f7e:	7498      	strb	r0, [r3, #18]
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8009f80:	7110      	strb	r0, [r2, #4]
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8009f82:	71d0      	strb	r0, [r2, #7]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 8009f84:	f882 e005 	strb.w	lr, [r2, #5]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 8009f88:	7214      	strb	r4, [r2, #8]
		ptiming->system__intermeasurement_period = 0x00000600;
 8009f8a:	6111      	str	r1, [r2, #16]
		pdynamic->system__seed_config =
 8009f8c:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
 8009f90:	71da      	strb	r2, [r3, #7]
				ptuning_parms->tp_timed_seed_cfg;

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8009f92:	2340      	movs	r3, #64	; 0x40
 8009f94:	713b      	strb	r3, [r7, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8009f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f9a:	bf00      	nop
 8009f9c:	01ff3800 	.word	0x01ff3800

08009fa0 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8009fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fa4:	9d09      	ldr	r5, [sp, #36]	; 0x24
	pstatic->debug__ctrl                                      = 0x00;
 8009fa6:	2400      	movs	r4, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 8009fa8:	f04f 0e02 	mov.w	lr, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8009fac:	f04f 0c08 	mov.w	ip, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8009fb0:	f44f 6720 	mov.w	r7, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 8009fb4:	2611      	movs	r6, #17
	pstatic->debug__ctrl                                      = 0x00;
 8009fb6:	7084      	strb	r4, [r0, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 8009fb8:	70c4      	strb	r4, [r0, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 8009fba:	7104      	strb	r4, [r0, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 8009fbc:	7144      	strb	r4, [r0, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 8009fbe:	7184      	strb	r4, [r0, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 8009fc0:	71c4      	strb	r4, [r0, #7]
	pstatic->host_if__status                                  = 0x00;
 8009fc2:	7204      	strb	r4, [r0, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 8009fc4:	7244      	strb	r4, [r0, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 8009fc6:	7284      	strb	r4, [r0, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 8009fc8:	72c4      	strb	r4, [r0, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 8009fca:	7384      	strb	r4, [r0, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 8009fcc:	7444      	strb	r4, [r0, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 8009fce:	f880 e00d 	strb.w	lr, [r0, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 8009fd2:	f880 e00f 	strb.w	lr, [r0, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8009fd6:	f880 c010 	strb.w	ip, [r0, #16]
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8009fda:	8007      	strh	r7, [r0, #0]
	pstatic->gpio_hv_mux__ctrl  = \
 8009fdc:	7306      	strb	r6, [r0, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8009fde:	7fae      	ldrb	r6, [r5, #30]
 8009fe0:	7486      	strb	r6, [r0, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8009fe2:	7fee      	ldrb	r6, [r5, #31]
 8009fe4:	74c6      	strb	r6, [r0, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8009fe6:	f895 6020 	ldrb.w	r6, [r5, #32]
 8009fea:	7506      	strb	r6, [r0, #20]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8009fec:	f04f 08ff 	mov.w	r8, #255	; 0xff
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8009ff0:	2601      	movs	r6, #1
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 8009ff2:	7584      	strb	r4, [r0, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 8009ff4:	75c4      	strb	r4, [r0, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 8009ff6:	8304      	strh	r4, [r0, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8009ff8:	7546      	strb	r6, [r0, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8009ffa:	f880 801a 	strb.w	r8, [r0, #26]
	pstatic->algo__range_min_clip                             =
 8009ffe:	7c2f      	ldrb	r7, [r5, #16]
 800a000:	76c7      	strb	r7, [r0, #27]
{
 800a002:	9f08      	ldr	r7, [sp, #32]
	pstatic->algo__consistency_check__tolerance               =
 800a004:	f895 900c 	ldrb.w	r9, [r5, #12]
 800a008:	f880 901c 	strb.w	r9, [r0, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a00c:	f04f 6932 	mov.w	r9, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800a010:	7744      	strb	r4, [r0, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800a012:	7784      	strb	r4, [r0, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800a014:	77c4      	strb	r4, [r0, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a016:	f8c1 9000 	str.w	r9, [r1]
	pgeneral->cal_config__repeat_rate                         =
 800a01a:	89e8      	ldrh	r0, [r5, #14]
 800a01c:	8088      	strh	r0, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a01e:	200d      	movs	r0, #13
	pgeneral->global_config__vcsel_width                      = 0x02;
 800a020:	f881 e006 	strb.w	lr, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a024:	71c8      	strb	r0, [r1, #7]
	pgeneral->phasecal_config__target                         =
 800a026:	7b68      	ldrb	r0, [r5, #13]
 800a028:	7208      	strb	r0, [r1, #8]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a02a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800a0dc <VL53L1_preset_mode_timed_ranging_short_range+0x13c>
	pgeneral->phasecal_config__override                       = 0x00;
 800a02e:	724c      	strb	r4, [r1, #9]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a030:	f44f 4a0c 	mov.w	sl, #35840	; 0x8c00
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a034:	f04f 0e1a 	mov.w	lr, #26
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a038:	2020      	movs	r0, #32
	pgeneral->dss_config__roi_mode_control =
 800a03a:	728e      	strb	r6, [r1, #10]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800a03c:	818c      	strh	r4, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800a03e:	81cc      	strh	r4, [r1, #14]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a040:	f8a1 a010 	strh.w	sl, [r1, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a044:	f8c1 9012 	str.w	r9, [r1, #18]
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800a048:	7014      	strb	r4, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800a04a:	7094      	strb	r4, [r2, #2]
	ptiming->system__fractional_enable                        = 0x00;
 800a04c:	7514      	strb	r4, [r2, #20]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a04e:	f882 e001 	strb.w	lr, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a052:	70d0      	strb	r0, [r2, #3]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800a054:	701e      	strb	r6, [r3, #0]
	pdynamic->system__thresh_high                              = 0x0000;
 800a056:	f8c3 4002 	str.w	r4, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800a05a:	719c      	strb	r4, [r3, #6]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800a05c:	731e      	strb	r6, [r3, #12]
	pdynamic->sd_config__first_order_select =
 800a05e:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
 800a062:	7359      	strb	r1, [r3, #13]
	pdynamic->sd_config__quantifier         =
 800a064:	f895 1023 	ldrb.w	r1, [r5, #35]	; 0x23
 800a068:	7399      	strb	r1, [r3, #14]
		ptiming->range_config__vcsel_period_a                = 0x07;
 800a06a:	2007      	movs	r0, #7
		ptiming->range_config__vcsel_period_b                = 0x05;
 800a06c:	2105      	movs	r1, #5
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a06e:	f04f 09c7 	mov.w	r9, #199	; 0xc7
	pdynamic->system__sequence_config                          = \
 800a072:	f04f 0edb 	mov.w	lr, #219	; 0xdb
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a076:	f883 900f 	strb.w	r9, [r3, #15]
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800a07a:	f883 8010 	strb.w	r8, [r3, #16]
	pdynamic->system__sequence_config                          = \
 800a07e:	f883 e011 	strb.w	lr, [r3, #17]
	psystem->system__stream_count_ctrl                         = 0x00;
 800a082:	707c      	strb	r4, [r7, #1]
	psystem->firmware__enable                                  = 0x01;
 800a084:	70be      	strb	r6, [r7, #2]
	psystem->system__interrupt_clear                           = \
 800a086:	70fe      	strb	r6, [r7, #3]
		ptiming->range_config__vcsel_period_a                = 0x07;
 800a088:	7190      	strb	r0, [r2, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 800a08a:	7251      	strb	r1, [r2, #9]
		ptiming->range_config__sigma_thresh                  =
 800a08c:	f8b5 e016 	ldrh.w	lr, [r5, #22]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a090:	f8b5 801c 	ldrh.w	r8, [r5, #28]
		ptiming->range_config__sigma_thresh                  =
 800a094:	f8a2 e00a 	strh.w	lr, [r2, #10]
		ptiming->range_config__valid_phase_high              = 0x38;
 800a098:	f04f 0e38 	mov.w	lr, #56	; 0x38
 800a09c:	f882 e00f 	strb.w	lr, [r2, #15]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a0a0:	f8a2 800c 	strh.w	r8, [r2, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800a0a4:	f882 c00e 	strb.w	ip, [r2, #14]
		pdynamic->sd_config__woi_sd0                         = 0x07;
 800a0a8:	7218      	strb	r0, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 800a0aa:	7259      	strb	r1, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
 800a0ac:	7a29      	ldrb	r1, [r5, #8]
 800a0ae:	7299      	strb	r1, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
 800a0b0:	7ae9      	ldrb	r1, [r5, #11]
 800a0b2:	72d9      	strb	r1, [r3, #11]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800a0b4:	f04f 0e84 	mov.w	lr, #132	; 0x84
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800a0b8:	20b1      	movs	r0, #177	; 0xb1

		ptiming->system__intermeasurement_period = 0x00000600;
 800a0ba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
		pdynamic->system__grouped_parameter_hold = 0x00;
 800a0be:	749c      	strb	r4, [r3, #18]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800a0c0:	7210      	strb	r0, [r2, #8]
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800a0c2:	7116      	strb	r6, [r2, #4]
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800a0c4:	71d6      	strb	r6, [r2, #7]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800a0c6:	f882 e005 	strb.w	lr, [r2, #5]
		ptiming->system__intermeasurement_period = 0x00000600;
 800a0ca:	6111      	str	r1, [r2, #16]
		pdynamic->system__seed_config =
 800a0cc:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
 800a0d0:	71da      	strb	r2, [r3, #7]
				ptuning_parms->tp_timed_seed_cfg;

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800a0d2:	2340      	movs	r3, #64	; 0x40
 800a0d4:	713b      	strb	r3, [r7, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0dc:	01ff3800 	.word	0x01ff3800

0800a0e0 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800a0e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0e4:	4604      	mov	r4, r0
 800a0e6:	9d09      	ldr	r5, [sp, #36]	; 0x24
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a0e8:	f8df a12c 	ldr.w	sl, [pc, #300]	; 800a218 <VL53L1_preset_mode_timed_ranging_long_range+0x138>
	pstatic->debug__ctrl                                      = 0x00;
 800a0ec:	2000      	movs	r0, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a0ee:	f04f 0e02 	mov.w	lr, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a0f2:	f04f 0c08 	mov.w	ip, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a0f6:	f44f 6720 	mov.w	r7, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 800a0fa:	2611      	movs	r6, #17
	pstatic->debug__ctrl                                      = 0x00;
 800a0fc:	70a0      	strb	r0, [r4, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800a0fe:	70e0      	strb	r0, [r4, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800a100:	7120      	strb	r0, [r4, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800a102:	7160      	strb	r0, [r4, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800a104:	71a0      	strb	r0, [r4, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800a106:	71e0      	strb	r0, [r4, #7]
	pstatic->host_if__status                                  = 0x00;
 800a108:	7220      	strb	r0, [r4, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800a10a:	7260      	strb	r0, [r4, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800a10c:	72a0      	strb	r0, [r4, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800a10e:	72e0      	strb	r0, [r4, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800a110:	73a0      	strb	r0, [r4, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800a112:	7460      	strb	r0, [r4, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a114:	f884 e00d 	strb.w	lr, [r4, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800a118:	f884 e00f 	strb.w	lr, [r4, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a11c:	f884 c010 	strb.w	ip, [r4, #16]
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a120:	8027      	strh	r7, [r4, #0]
	pstatic->gpio_hv_mux__ctrl  = \
 800a122:	7326      	strb	r6, [r4, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800a124:	7fae      	ldrb	r6, [r5, #30]
 800a126:	74a6      	strb	r6, [r4, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800a128:	7fee      	ldrb	r6, [r5, #31]
 800a12a:	74e6      	strb	r6, [r4, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800a12c:	f895 6020 	ldrb.w	r6, [r5, #32]
 800a130:	7526      	strb	r6, [r4, #20]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a132:	f04f 08ff 	mov.w	r8, #255	; 0xff
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a136:	2601      	movs	r6, #1
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800a138:	75a0      	strb	r0, [r4, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800a13a:	75e0      	strb	r0, [r4, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800a13c:	8320      	strh	r0, [r4, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a13e:	7566      	strb	r6, [r4, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a140:	f884 801a 	strb.w	r8, [r4, #26]
	pstatic->algo__range_min_clip                             =
 800a144:	7c2f      	ldrb	r7, [r5, #16]
 800a146:	76e7      	strb	r7, [r4, #27]
{
 800a148:	9f08      	ldr	r7, [sp, #32]
	pstatic->algo__consistency_check__tolerance               =
 800a14a:	f895 900c 	ldrb.w	r9, [r5, #12]
 800a14e:	f884 901c 	strb.w	r9, [r4, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a152:	f04f 6932 	mov.w	r9, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800a156:	7760      	strb	r0, [r4, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800a158:	77a0      	strb	r0, [r4, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800a15a:	77e0      	strb	r0, [r4, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a15c:	f8c1 9000 	str.w	r9, [r1]
	pgeneral->cal_config__repeat_rate                         =
 800a160:	89ec      	ldrh	r4, [r5, #14]
 800a162:	808c      	strh	r4, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a164:	240d      	movs	r4, #13
 800a166:	71cc      	strb	r4, [r1, #7]
	pgeneral->global_config__vcsel_width                      = 0x02;
 800a168:	f881 e006 	strb.w	lr, [r1, #6]
	pgeneral->phasecal_config__target                         =
 800a16c:	f895 e00d 	ldrb.w	lr, [r5, #13]
 800a170:	f881 e008 	strb.w	lr, [r1, #8]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a174:	f44f 4e0c 	mov.w	lr, #35840	; 0x8c00
 800a178:	f8a1 e010 	strh.w	lr, [r1, #16]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a17c:	f04f 091a 	mov.w	r9, #26
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a180:	f04f 0e20 	mov.w	lr, #32
	pgeneral->phasecal_config__override                       = 0x00;
 800a184:	7248      	strb	r0, [r1, #9]
	pgeneral->dss_config__roi_mode_control =
 800a186:	728e      	strb	r6, [r1, #10]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800a188:	8188      	strh	r0, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800a18a:	81c8      	strh	r0, [r1, #14]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a18c:	f8c1 a012 	str.w	sl, [r1, #18]
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800a190:	7010      	strb	r0, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800a192:	7090      	strb	r0, [r2, #2]
	ptiming->system__fractional_enable                        = 0x00;
 800a194:	7510      	strb	r0, [r2, #20]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a196:	f882 9001 	strb.w	r9, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a19a:	f882 e003 	strb.w	lr, [r2, #3]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800a19e:	701e      	strb	r6, [r3, #0]
	pdynamic->system__thresh_high                              = 0x0000;
 800a1a0:	f8c3 0002 	str.w	r0, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800a1a4:	7198      	strb	r0, [r3, #6]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800a1a6:	731e      	strb	r6, [r3, #12]
	pdynamic->sd_config__first_order_select =
 800a1a8:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
 800a1ac:	7359      	strb	r1, [r3, #13]
	pdynamic->sd_config__quantifier         =
 800a1ae:	f895 1023 	ldrb.w	r1, [r5, #35]	; 0x23
 800a1b2:	7399      	strb	r1, [r3, #14]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a1b4:	f04f 09c7 	mov.w	r9, #199	; 0xc7
		ptiming->range_config__vcsel_period_a                = 0x0F;
 800a1b8:	210f      	movs	r1, #15
	pdynamic->system__sequence_config                          = \
 800a1ba:	f04f 0edb 	mov.w	lr, #219	; 0xdb
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a1be:	f883 900f 	strb.w	r9, [r3, #15]
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800a1c2:	f883 8010 	strb.w	r8, [r3, #16]
	pdynamic->system__sequence_config                          = \
 800a1c6:	f883 e011 	strb.w	lr, [r3, #17]
	psystem->system__stream_count_ctrl                         = 0x00;
 800a1ca:	7078      	strb	r0, [r7, #1]
	psystem->firmware__enable                                  = 0x01;
 800a1cc:	70be      	strb	r6, [r7, #2]
	psystem->system__interrupt_clear                           = \
 800a1ce:	70fe      	strb	r6, [r7, #3]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 800a1d0:	7254      	strb	r4, [r2, #9]
		ptiming->range_config__vcsel_period_a                = 0x0F;
 800a1d2:	7191      	strb	r1, [r2, #6]
		ptiming->range_config__sigma_thresh                  =
 800a1d4:	8a6e      	ldrh	r6, [r5, #18]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a1d6:	f8b5 e018 	ldrh.w	lr, [r5, #24]
		ptiming->range_config__sigma_thresh                  =
 800a1da:	8156      	strh	r6, [r2, #10]
		ptiming->range_config__valid_phase_high              = 0xB8;
 800a1dc:	26b8      	movs	r6, #184	; 0xb8
 800a1de:	73d6      	strb	r6, [r2, #15]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a1e0:	f8a2 e00c 	strh.w	lr, [r2, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800a1e4:	f882 c00e 	strb.w	ip, [r2, #14]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 800a1e8:	725c      	strb	r4, [r3, #9]
		pdynamic->sd_config__woi_sd0                         = 0x0F;
 800a1ea:	7219      	strb	r1, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 800a1ec:	79a9      	ldrb	r1, [r5, #6]
 800a1ee:	7299      	strb	r1, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
 800a1f0:	7a69      	ldrb	r1, [r5, #9]
 800a1f2:	72d9      	strb	r1, [r3, #11]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800a1f4:	2697      	movs	r6, #151	; 0x97
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800a1f6:	24b1      	movs	r4, #177	; 0xb1

		ptiming->system__intermeasurement_period = 0x00000600;
 800a1f8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
		pdynamic->system__grouped_parameter_hold = 0x00;
 800a1fc:	7498      	strb	r0, [r3, #18]
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800a1fe:	7110      	strb	r0, [r2, #4]
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800a200:	71d0      	strb	r0, [r2, #7]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800a202:	7156      	strb	r6, [r2, #5]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800a204:	7214      	strb	r4, [r2, #8]
		ptiming->system__intermeasurement_period = 0x00000600;
 800a206:	6111      	str	r1, [r2, #16]
		pdynamic->system__seed_config =
 800a208:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
 800a20c:	71da      	strb	r2, [r3, #7]
				ptuning_parms->tp_timed_seed_cfg;

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800a20e:	2340      	movs	r3, #64	; 0x40
 800a210:	713b      	strb	r3, [r7, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800a212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a216:	bf00      	nop
 800a218:	01ff3800 	.word	0x01ff3800

0800a21c <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800a21c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a220:	9d09      	ldr	r5, [sp, #36]	; 0x24
	pstatic->debug__ctrl                                      = 0x00;
 800a222:	2400      	movs	r4, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a224:	f04f 0902 	mov.w	r9, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a228:	f04f 0808 	mov.w	r8, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a22c:	f44f 6720 	mov.w	r7, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 800a230:	2611      	movs	r6, #17
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a232:	8007      	strh	r7, [r0, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800a234:	7084      	strb	r4, [r0, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800a236:	70c4      	strb	r4, [r0, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800a238:	7104      	strb	r4, [r0, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800a23a:	7144      	strb	r4, [r0, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800a23c:	7184      	strb	r4, [r0, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800a23e:	71c4      	strb	r4, [r0, #7]
	pstatic->host_if__status                                  = 0x00;
 800a240:	7204      	strb	r4, [r0, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800a242:	7244      	strb	r4, [r0, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800a244:	7284      	strb	r4, [r0, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800a246:	72c4      	strb	r4, [r0, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800a248:	7384      	strb	r4, [r0, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800a24a:	7444      	strb	r4, [r0, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a24c:	f880 900d 	strb.w	r9, [r0, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800a250:	f880 900f 	strb.w	r9, [r0, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a254:	f880 8010 	strb.w	r8, [r0, #16]
	pstatic->gpio_hv_mux__ctrl  = \
 800a258:	7306      	strb	r6, [r0, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800a25a:	7fae      	ldrb	r6, [r5, #30]
 800a25c:	7486      	strb	r6, [r0, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800a25e:	7fee      	ldrb	r6, [r5, #31]
 800a260:	74c6      	strb	r6, [r0, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800a262:	f895 6020 	ldrb.w	r6, [r5, #32]
 800a266:	7506      	strb	r6, [r0, #20]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a268:	2701      	movs	r7, #1
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a26a:	f04f 0cff 	mov.w	ip, #255	; 0xff
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800a26e:	7584      	strb	r4, [r0, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800a270:	75c4      	strb	r4, [r0, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800a272:	8304      	strh	r4, [r0, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a274:	7547      	strb	r7, [r0, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a276:	f880 c01a 	strb.w	ip, [r0, #26]
	pstatic->algo__range_min_clip                             =
 800a27a:	f895 a010 	ldrb.w	sl, [r5, #16]
{
 800a27e:	9e08      	ldr	r6, [sp, #32]
	pstatic->algo__range_min_clip                             =
 800a280:	f880 a01b 	strb.w	sl, [r0, #27]
	pstatic->algo__consistency_check__tolerance               =
 800a284:	f895 a00c 	ldrb.w	sl, [r5, #12]
 800a288:	f880 a01c 	strb.w	sl, [r0, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a28c:	f04f 6a32 	mov.w	sl, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800a290:	7744      	strb	r4, [r0, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800a292:	7784      	strb	r4, [r0, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800a294:	77c4      	strb	r4, [r0, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a296:	f8c1 a000 	str.w	sl, [r1]
	pgeneral->cal_config__repeat_rate                         =
 800a29a:	89e8      	ldrh	r0, [r5, #14]
 800a29c:	8088      	strh	r0, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a29e:	200d      	movs	r0, #13
	pgeneral->global_config__vcsel_width                      = 0x02;
 800a2a0:	f881 9006 	strb.w	r9, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a2a4:	71c8      	strb	r0, [r1, #7]
	pgeneral->phasecal_config__target                         =
 800a2a6:	7b68      	ldrb	r0, [r5, #13]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a2a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 800a36c <VL53L1_preset_mode_low_power_auto_ranging+0x150>
	pgeneral->phasecal_config__target                         =
 800a2ac:	7208      	strb	r0, [r1, #8]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a2ae:	f44f 4b0c 	mov.w	fp, #35840	; 0x8c00
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a2b2:	f8c1 a012 	str.w	sl, [r1, #18]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a2b6:	f8a1 b010 	strh.w	fp, [r1, #16]
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800a2ba:	f04f 0a09 	mov.w	sl, #9
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800a2be:	f04f 0b0b 	mov.w	fp, #11
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a2c2:	f04f 091a 	mov.w	r9, #26
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a2c6:	2020      	movs	r0, #32
	pgeneral->phasecal_config__override                       = 0x00;
 800a2c8:	724c      	strb	r4, [r1, #9]
	pgeneral->dss_config__roi_mode_control =
 800a2ca:	728f      	strb	r7, [r1, #10]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800a2cc:	818c      	strh	r4, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800a2ce:	81cc      	strh	r4, [r1, #14]
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800a2d0:	7014      	strb	r4, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800a2d2:	7094      	strb	r4, [r2, #2]
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800a2d4:	f882 b006 	strb.w	fp, [r2, #6]
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800a2d8:	f882 a009 	strb.w	sl, [r2, #9]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a2dc:	f882 9001 	strb.w	r9, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a2e0:	70d0      	strb	r0, [r2, #3]
	ptiming->range_config__sigma_thresh                       =
 800a2e2:	8aa8      	ldrh	r0, [r5, #20]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800a2e4:	f8b5 901a 	ldrh.w	r9, [r5, #26]
	ptiming->range_config__sigma_thresh                       =
 800a2e8:	8150      	strh	r0, [r2, #10]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800a2ea:	2078      	movs	r0, #120	; 0x78
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800a2ec:	f8a2 900c 	strh.w	r9, [r2, #12]
	ptiming->range_config__valid_phase_low                    = 0x08;
 800a2f0:	f882 800e 	strb.w	r8, [r2, #14]
	ptiming->system__fractional_enable                        = 0x00;
 800a2f4:	7514      	strb	r4, [r2, #20]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800a2f6:	73d0      	strb	r0, [r2, #15]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800a2f8:	701f      	strb	r7, [r3, #0]
	pdynamic->system__thresh_high                              = 0x0000;
 800a2fa:	f8c3 4002 	str.w	r4, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800a2fe:	719c      	strb	r4, [r3, #6]
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800a300:	f883 b008 	strb.w	fp, [r3, #8]
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800a304:	f883 a009 	strb.w	sl, [r3, #9]
	pdynamic->sd_config__initial_phase_sd0                     =
 800a308:	79e8      	ldrb	r0, [r5, #7]
 800a30a:	7298      	strb	r0, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800a30c:	7aa8      	ldrb	r0, [r5, #10]
 800a30e:	72d8      	strb	r0, [r3, #11]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800a310:	731f      	strb	r7, [r3, #12]
	pdynamic->sd_config__first_order_select =
 800a312:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
 800a316:	7358      	strb	r0, [r3, #13]
	pdynamic->sd_config__quantifier         =
 800a318:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
 800a31c:	7398      	strb	r0, [r3, #14]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a31e:	f04f 0bc7 	mov.w	fp, #199	; 0xc7
	pdynamic->system__sequence_config                          = \
 800a322:	f04f 0adb 	mov.w	sl, #219	; 0xdb
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800a326:	f04f 09b1 	mov.w	r9, #177	; 0xb1
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800a32a:	f04f 08d4 	mov.w	r8, #212	; 0xd4
		ptiming->system__intermeasurement_period = 0x00000600;
 800a32e:	f44f 60c0 	mov.w	r0, #1536	; 0x600
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800a332:	f883 c010 	strb.w	ip, [r3, #16]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a336:	f883 b00f 	strb.w	fp, [r3, #15]
	pdynamic->system__sequence_config                          = \
 800a33a:	f883 a011 	strb.w	sl, [r3, #17]
	psystem->system__stream_count_ctrl                         = 0x00;
 800a33e:	7074      	strb	r4, [r6, #1]
	psystem->firmware__enable                                  = 0x01;
 800a340:	70b7      	strb	r7, [r6, #2]
	psystem->system__interrupt_clear                           = \
 800a342:	70f7      	strb	r7, [r6, #3]
		pdynamic->system__grouped_parameter_hold = 0x00;
 800a344:	749c      	strb	r4, [r3, #18]
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800a346:	7114      	strb	r4, [r2, #4]
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800a348:	71d4      	strb	r4, [r2, #7]
		ptiming->system__intermeasurement_period = 0x00000600;
 800a34a:	6110      	str	r0, [r2, #16]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800a34c:	f882 9005 	strb.w	r9, [r2, #5]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800a350:	f882 8008 	strb.w	r8, [r2, #8]
		pdynamic->system__seed_config =
 800a354:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
 800a358:	71da      	strb	r2, [r3, #7]
		psystem->system__mode_start =
 800a35a:	2440      	movs	r4, #64	; 0x40
 800a35c:	7134      	strb	r4, [r6, #4]
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
		status = VL53L1_config_low_power_auto_mode(
 800a35e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a360:	4608      	mov	r0, r1
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800a362:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
		status = VL53L1_config_low_power_auto_mode(
 800a366:	4619      	mov	r1, r3
 800a368:	f000 bd74 	b.w	800ae54 <VL53L1_config_low_power_auto_mode>
 800a36c:	01ff3800 	.word	0x01ff3800

0800a370 <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800a370:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a374:	9d09      	ldr	r5, [sp, #36]	; 0x24
	pstatic->debug__ctrl                                      = 0x00;
 800a376:	2400      	movs	r4, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a378:	f04f 0c02 	mov.w	ip, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a37c:	f04f 0808 	mov.w	r8, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a380:	f44f 6720 	mov.w	r7, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 800a384:	2611      	movs	r6, #17
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a386:	8007      	strh	r7, [r0, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800a388:	7084      	strb	r4, [r0, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800a38a:	70c4      	strb	r4, [r0, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800a38c:	7104      	strb	r4, [r0, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800a38e:	7144      	strb	r4, [r0, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800a390:	7184      	strb	r4, [r0, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800a392:	71c4      	strb	r4, [r0, #7]
	pstatic->host_if__status                                  = 0x00;
 800a394:	7204      	strb	r4, [r0, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800a396:	7244      	strb	r4, [r0, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800a398:	7284      	strb	r4, [r0, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800a39a:	72c4      	strb	r4, [r0, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800a39c:	7384      	strb	r4, [r0, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800a39e:	7444      	strb	r4, [r0, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a3a0:	f880 c00d 	strb.w	ip, [r0, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800a3a4:	f880 c00f 	strb.w	ip, [r0, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a3a8:	f880 8010 	strb.w	r8, [r0, #16]
	pstatic->gpio_hv_mux__ctrl  = \
 800a3ac:	7306      	strb	r6, [r0, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800a3ae:	7fae      	ldrb	r6, [r5, #30]
 800a3b0:	7486      	strb	r6, [r0, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800a3b2:	7fee      	ldrb	r6, [r5, #31]
 800a3b4:	74c6      	strb	r6, [r0, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800a3b6:	f895 6020 	ldrb.w	r6, [r5, #32]
 800a3ba:	7506      	strb	r6, [r0, #20]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a3bc:	2701      	movs	r7, #1
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a3be:	f04f 09ff 	mov.w	r9, #255	; 0xff
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800a3c2:	7584      	strb	r4, [r0, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800a3c4:	75c4      	strb	r4, [r0, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800a3c6:	8304      	strh	r4, [r0, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a3c8:	7547      	strb	r7, [r0, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a3ca:	f880 901a 	strb.w	r9, [r0, #26]
	pstatic->algo__range_min_clip                             =
 800a3ce:	f895 a010 	ldrb.w	sl, [r5, #16]
{
 800a3d2:	9e08      	ldr	r6, [sp, #32]
	pstatic->algo__range_min_clip                             =
 800a3d4:	f880 a01b 	strb.w	sl, [r0, #27]
	pstatic->algo__consistency_check__tolerance               =
 800a3d8:	f895 a00c 	ldrb.w	sl, [r5, #12]
 800a3dc:	f880 a01c 	strb.w	sl, [r0, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a3e0:	f04f 6a32 	mov.w	sl, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800a3e4:	7744      	strb	r4, [r0, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800a3e6:	7784      	strb	r4, [r0, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800a3e8:	77c4      	strb	r4, [r0, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a3ea:	f8c1 a000 	str.w	sl, [r1]
	pgeneral->cal_config__repeat_rate                         =
 800a3ee:	89e8      	ldrh	r0, [r5, #14]
 800a3f0:	8088      	strh	r0, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a3f2:	200d      	movs	r0, #13
	pgeneral->global_config__vcsel_width                      = 0x02;
 800a3f4:	f881 c006 	strb.w	ip, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a3f8:	71c8      	strb	r0, [r1, #7]
	pgeneral->phasecal_config__target                         =
 800a3fa:	7b68      	ldrb	r0, [r5, #13]
 800a3fc:	7208      	strb	r0, [r1, #8]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a3fe:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a4c4 <VL53L1_preset_mode_low_power_auto_short_ranging+0x154>
	pgeneral->phasecal_config__override                       = 0x00;
 800a402:	724c      	strb	r4, [r1, #9]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a404:	f44f 4b0c 	mov.w	fp, #35840	; 0x8c00
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a408:	f04f 0c1a 	mov.w	ip, #26
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a40c:	2020      	movs	r0, #32
	pgeneral->dss_config__roi_mode_control =
 800a40e:	728f      	strb	r7, [r1, #10]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800a410:	818c      	strh	r4, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800a412:	81cc      	strh	r4, [r1, #14]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a414:	f8a1 b010 	strh.w	fp, [r1, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a418:	f8c1 a012 	str.w	sl, [r1, #18]
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800a41c:	7014      	strb	r4, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800a41e:	7094      	strb	r4, [r2, #2]
	ptiming->system__fractional_enable                        = 0x00;
 800a420:	7514      	strb	r4, [r2, #20]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a422:	f882 c001 	strb.w	ip, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a426:	70d0      	strb	r0, [r2, #3]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800a428:	701f      	strb	r7, [r3, #0]
	pdynamic->system__thresh_high                              = 0x0000;
 800a42a:	f8c3 4002 	str.w	r4, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800a42e:	719c      	strb	r4, [r3, #6]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800a430:	731f      	strb	r7, [r3, #12]
	pdynamic->sd_config__first_order_select =
 800a432:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
 800a436:	7358      	strb	r0, [r3, #13]
	pdynamic->sd_config__quantifier         =
 800a438:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
 800a43c:	7398      	strb	r0, [r3, #14]
		ptiming->range_config__vcsel_period_a                = 0x07;
 800a43e:	f04f 0c07 	mov.w	ip, #7
		ptiming->range_config__vcsel_period_b                = 0x05;
 800a442:	2005      	movs	r0, #5
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a444:	f04f 0bc7 	mov.w	fp, #199	; 0xc7
	pdynamic->system__sequence_config                          = \
 800a448:	f04f 0adb 	mov.w	sl, #219	; 0xdb
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a44c:	f883 b00f 	strb.w	fp, [r3, #15]
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800a450:	f883 9010 	strb.w	r9, [r3, #16]
	pdynamic->system__sequence_config                          = \
 800a454:	f883 a011 	strb.w	sl, [r3, #17]
	psystem->system__stream_count_ctrl                         = 0x00;
 800a458:	7074      	strb	r4, [r6, #1]
	psystem->firmware__enable                                  = 0x01;
 800a45a:	70b7      	strb	r7, [r6, #2]
	psystem->system__interrupt_clear                           = \
 800a45c:	70f7      	strb	r7, [r6, #3]
		ptiming->range_config__vcsel_period_a                = 0x07;
 800a45e:	f882 c006 	strb.w	ip, [r2, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 800a462:	7250      	strb	r0, [r2, #9]
		ptiming->range_config__sigma_thresh                  =
 800a464:	f8b5 9016 	ldrh.w	r9, [r5, #22]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a468:	f8b5 a01c 	ldrh.w	sl, [r5, #28]
		ptiming->range_config__sigma_thresh                  =
 800a46c:	f8a2 900a 	strh.w	r9, [r2, #10]
		ptiming->range_config__valid_phase_high              = 0x38;
 800a470:	f04f 0938 	mov.w	r9, #56	; 0x38
		ptiming->range_config__valid_phase_low               = 0x08;
 800a474:	f882 800e 	strb.w	r8, [r2, #14]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a478:	f8a2 a00c 	strh.w	sl, [r2, #12]
		ptiming->range_config__valid_phase_high              = 0x38;
 800a47c:	f882 900f 	strb.w	r9, [r2, #15]
		pdynamic->sd_config__woi_sd0                         = 0x07;
 800a480:	f883 c008 	strb.w	ip, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 800a484:	7258      	strb	r0, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
 800a486:	7a28      	ldrb	r0, [r5, #8]
 800a488:	7298      	strb	r0, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
 800a48a:	7ae8      	ldrb	r0, [r5, #11]
 800a48c:	72d8      	strb	r0, [r3, #11]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800a48e:	f04f 0884 	mov.w	r8, #132	; 0x84
		ptiming->system__intermeasurement_period = 0x00000600;
 800a492:	f44f 60c0 	mov.w	r0, #1536	; 0x600
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800a496:	f04f 0cb1 	mov.w	ip, #177	; 0xb1
		pdynamic->system__grouped_parameter_hold = 0x00;
 800a49a:	749c      	strb	r4, [r3, #18]
		ptiming->system__intermeasurement_period = 0x00000600;
 800a49c:	6110      	str	r0, [r2, #16]
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800a49e:	7117      	strb	r7, [r2, #4]
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800a4a0:	71d7      	strb	r7, [r2, #7]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800a4a2:	f882 8005 	strb.w	r8, [r2, #5]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800a4a6:	f882 c008 	strb.w	ip, [r2, #8]
		pdynamic->system__seed_config =
 800a4aa:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
 800a4ae:	71da      	strb	r2, [r3, #7]
		psystem->system__mode_start =
 800a4b0:	2440      	movs	r4, #64	; 0x40
 800a4b2:	7134      	strb	r4, [r6, #4]
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
		status = VL53L1_config_low_power_auto_mode(
 800a4b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4b6:	4608      	mov	r0, r1
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800a4b8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
		status = VL53L1_config_low_power_auto_mode(
 800a4bc:	4619      	mov	r1, r3
 800a4be:	f000 bcc9 	b.w	800ae54 <VL53L1_config_low_power_auto_mode>
 800a4c2:	bf00      	nop
 800a4c4:	01ff3800 	.word	0x01ff3800

0800a4c8 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800a4c8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a4cc:	9d09      	ldr	r5, [sp, #36]	; 0x24
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a4ce:	f8df b148 	ldr.w	fp, [pc, #328]	; 800a618 <VL53L1_preset_mode_low_power_auto_long_ranging+0x150>
	pstatic->debug__ctrl                                      = 0x00;
 800a4d2:	2400      	movs	r4, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a4d4:	f04f 0c02 	mov.w	ip, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a4d8:	f04f 0808 	mov.w	r8, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a4dc:	f44f 6720 	mov.w	r7, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 800a4e0:	2611      	movs	r6, #17
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a4e2:	8007      	strh	r7, [r0, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800a4e4:	7084      	strb	r4, [r0, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800a4e6:	70c4      	strb	r4, [r0, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800a4e8:	7104      	strb	r4, [r0, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800a4ea:	7144      	strb	r4, [r0, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800a4ec:	7184      	strb	r4, [r0, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800a4ee:	71c4      	strb	r4, [r0, #7]
	pstatic->host_if__status                                  = 0x00;
 800a4f0:	7204      	strb	r4, [r0, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800a4f2:	7244      	strb	r4, [r0, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800a4f4:	7284      	strb	r4, [r0, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800a4f6:	72c4      	strb	r4, [r0, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800a4f8:	7384      	strb	r4, [r0, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800a4fa:	7444      	strb	r4, [r0, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a4fc:	f880 c00d 	strb.w	ip, [r0, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800a500:	f880 c00f 	strb.w	ip, [r0, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a504:	f880 8010 	strb.w	r8, [r0, #16]
	pstatic->gpio_hv_mux__ctrl  = \
 800a508:	7306      	strb	r6, [r0, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800a50a:	7fae      	ldrb	r6, [r5, #30]
 800a50c:	7486      	strb	r6, [r0, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800a50e:	7fee      	ldrb	r6, [r5, #31]
 800a510:	74c6      	strb	r6, [r0, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800a512:	f895 6020 	ldrb.w	r6, [r5, #32]
 800a516:	7506      	strb	r6, [r0, #20]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a518:	2701      	movs	r7, #1
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a51a:	f04f 09ff 	mov.w	r9, #255	; 0xff
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800a51e:	7584      	strb	r4, [r0, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800a520:	75c4      	strb	r4, [r0, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800a522:	8304      	strh	r4, [r0, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a524:	7547      	strb	r7, [r0, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a526:	f880 901a 	strb.w	r9, [r0, #26]
	pstatic->algo__range_min_clip                             =
 800a52a:	f895 a010 	ldrb.w	sl, [r5, #16]
{
 800a52e:	9e08      	ldr	r6, [sp, #32]
	pstatic->algo__range_min_clip                             =
 800a530:	f880 a01b 	strb.w	sl, [r0, #27]
	pstatic->algo__consistency_check__tolerance               =
 800a534:	f895 a00c 	ldrb.w	sl, [r5, #12]
 800a538:	f880 a01c 	strb.w	sl, [r0, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a53c:	f04f 6a32 	mov.w	sl, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800a540:	7744      	strb	r4, [r0, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800a542:	7784      	strb	r4, [r0, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800a544:	77c4      	strb	r4, [r0, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a546:	f8c1 a000 	str.w	sl, [r1]
	pgeneral->cal_config__repeat_rate                         =
 800a54a:	89e8      	ldrh	r0, [r5, #14]
 800a54c:	8088      	strh	r0, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a54e:	200d      	movs	r0, #13
 800a550:	71c8      	strb	r0, [r1, #7]
	pgeneral->global_config__vcsel_width                      = 0x02;
 800a552:	f881 c006 	strb.w	ip, [r1, #6]
	pgeneral->phasecal_config__target                         =
 800a556:	f895 c00d 	ldrb.w	ip, [r5, #13]
 800a55a:	f881 c008 	strb.w	ip, [r1, #8]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a55e:	f44f 4c0c 	mov.w	ip, #35840	; 0x8c00
 800a562:	f8a1 c010 	strh.w	ip, [r1, #16]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a566:	f04f 0a1a 	mov.w	sl, #26
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a56a:	f04f 0c20 	mov.w	ip, #32
	pgeneral->phasecal_config__override                       = 0x00;
 800a56e:	724c      	strb	r4, [r1, #9]
	pgeneral->dss_config__roi_mode_control =
 800a570:	728f      	strb	r7, [r1, #10]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800a572:	818c      	strh	r4, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800a574:	81cc      	strh	r4, [r1, #14]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a576:	f8c1 b012 	str.w	fp, [r1, #18]
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800a57a:	7014      	strb	r4, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800a57c:	7094      	strb	r4, [r2, #2]
	ptiming->system__fractional_enable                        = 0x00;
 800a57e:	7514      	strb	r4, [r2, #20]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a580:	f882 a001 	strb.w	sl, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a584:	f882 c003 	strb.w	ip, [r2, #3]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800a588:	701f      	strb	r7, [r3, #0]
	pdynamic->system__thresh_high                              = 0x0000;
 800a58a:	f8c3 4002 	str.w	r4, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800a58e:	719c      	strb	r4, [r3, #6]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800a590:	731f      	strb	r7, [r3, #12]
	pdynamic->sd_config__first_order_select =
 800a592:	f895 c024 	ldrb.w	ip, [r5, #36]	; 0x24
 800a596:	f883 c00d 	strb.w	ip, [r3, #13]
	pdynamic->sd_config__quantifier         =
 800a59a:	f895 c023 	ldrb.w	ip, [r5, #35]	; 0x23
 800a59e:	f883 c00e 	strb.w	ip, [r3, #14]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a5a2:	f04f 0bc7 	mov.w	fp, #199	; 0xc7
		ptiming->range_config__vcsel_period_a                = 0x0F;
 800a5a6:	f04f 0c0f 	mov.w	ip, #15
	pdynamic->system__sequence_config                          = \
 800a5aa:	f04f 0adb 	mov.w	sl, #219	; 0xdb
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a5ae:	f883 b00f 	strb.w	fp, [r3, #15]
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800a5b2:	f883 9010 	strb.w	r9, [r3, #16]
	pdynamic->system__sequence_config                          = \
 800a5b6:	f883 a011 	strb.w	sl, [r3, #17]
	psystem->system__stream_count_ctrl                         = 0x00;
 800a5ba:	7074      	strb	r4, [r6, #1]
	psystem->firmware__enable                                  = 0x01;
 800a5bc:	70b7      	strb	r7, [r6, #2]
	psystem->system__interrupt_clear                           = \
 800a5be:	70f7      	strb	r7, [r6, #3]
		ptiming->range_config__vcsel_period_a                = 0x0F;
 800a5c0:	f882 c006 	strb.w	ip, [r2, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 800a5c4:	7250      	strb	r0, [r2, #9]
		ptiming->range_config__sigma_thresh                  =
 800a5c6:	8a6f      	ldrh	r7, [r5, #18]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a5c8:	f8b5 9018 	ldrh.w	r9, [r5, #24]
		ptiming->range_config__sigma_thresh                  =
 800a5cc:	8157      	strh	r7, [r2, #10]
		ptiming->range_config__valid_phase_high              = 0xB8;
 800a5ce:	27b8      	movs	r7, #184	; 0xb8
 800a5d0:	73d7      	strb	r7, [r2, #15]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a5d2:	f8a2 900c 	strh.w	r9, [r2, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800a5d6:	f882 800e 	strb.w	r8, [r2, #14]
		pdynamic->sd_config__woi_sd0                         = 0x0F;
 800a5da:	f883 c008 	strb.w	ip, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 800a5de:	7258      	strb	r0, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
 800a5e0:	79a8      	ldrb	r0, [r5, #6]
 800a5e2:	7298      	strb	r0, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
 800a5e4:	7a68      	ldrb	r0, [r5, #9]
 800a5e6:	72d8      	strb	r0, [r3, #11]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800a5e8:	27b1      	movs	r7, #177	; 0xb1
		ptiming->system__intermeasurement_period = 0x00000600;
 800a5ea:	f44f 60c0 	mov.w	r0, #1536	; 0x600
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800a5ee:	f04f 0c97 	mov.w	ip, #151	; 0x97
		pdynamic->system__grouped_parameter_hold = 0x00;
 800a5f2:	749c      	strb	r4, [r3, #18]
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800a5f4:	7114      	strb	r4, [r2, #4]
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800a5f6:	71d4      	strb	r4, [r2, #7]
		ptiming->system__intermeasurement_period = 0x00000600;
 800a5f8:	6110      	str	r0, [r2, #16]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800a5fa:	f882 c005 	strb.w	ip, [r2, #5]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800a5fe:	7217      	strb	r7, [r2, #8]
		pdynamic->system__seed_config =
 800a600:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
 800a604:	71da      	strb	r2, [r3, #7]
		psystem->system__mode_start =
 800a606:	2440      	movs	r4, #64	; 0x40
 800a608:	7134      	strb	r4, [r6, #4]
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
		status = VL53L1_config_low_power_auto_mode(
 800a60a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a60c:	4608      	mov	r0, r1
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800a60e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
		status = VL53L1_config_low_power_auto_mode(
 800a612:	4619      	mov	r1, r3
 800a614:	f000 bc1e 	b.w	800ae54 <VL53L1_config_low_power_auto_mode>
 800a618:	01ff3800 	.word	0x01ff3800

0800a61c <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800a61c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a620:	4604      	mov	r4, r0
 800a622:	9d09      	ldr	r5, [sp, #36]	; 0x24
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a624:	f8df a12c 	ldr.w	sl, [pc, #300]	; 800a754 <VL53L1_preset_mode_singleshot_ranging+0x138>
	pstatic->debug__ctrl                                      = 0x00;
 800a628:	2000      	movs	r0, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a62a:	f04f 0e02 	mov.w	lr, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a62e:	f04f 0808 	mov.w	r8, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a632:	f44f 6720 	mov.w	r7, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 800a636:	2611      	movs	r6, #17
	pstatic->debug__ctrl                                      = 0x00;
 800a638:	70a0      	strb	r0, [r4, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800a63a:	70e0      	strb	r0, [r4, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800a63c:	7120      	strb	r0, [r4, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800a63e:	7160      	strb	r0, [r4, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800a640:	71a0      	strb	r0, [r4, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800a642:	71e0      	strb	r0, [r4, #7]
	pstatic->host_if__status                                  = 0x00;
 800a644:	7220      	strb	r0, [r4, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800a646:	7260      	strb	r0, [r4, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800a648:	72a0      	strb	r0, [r4, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800a64a:	72e0      	strb	r0, [r4, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800a64c:	73a0      	strb	r0, [r4, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800a64e:	7460      	strb	r0, [r4, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a650:	f884 e00d 	strb.w	lr, [r4, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800a654:	f884 e00f 	strb.w	lr, [r4, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a658:	f884 8010 	strb.w	r8, [r4, #16]
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a65c:	8027      	strh	r7, [r4, #0]
	pstatic->gpio_hv_mux__ctrl  = \
 800a65e:	7326      	strb	r6, [r4, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800a660:	7fae      	ldrb	r6, [r5, #30]
 800a662:	74a6      	strb	r6, [r4, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800a664:	7fee      	ldrb	r6, [r5, #31]
 800a666:	74e6      	strb	r6, [r4, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800a668:	f895 6020 	ldrb.w	r6, [r5, #32]
 800a66c:	7526      	strb	r6, [r4, #20]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a66e:	f04f 0cff 	mov.w	ip, #255	; 0xff
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a672:	2601      	movs	r6, #1
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800a674:	75a0      	strb	r0, [r4, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800a676:	75e0      	strb	r0, [r4, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800a678:	8320      	strh	r0, [r4, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a67a:	7566      	strb	r6, [r4, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a67c:	f884 c01a 	strb.w	ip, [r4, #26]
	pstatic->algo__range_min_clip                             =
 800a680:	7c2f      	ldrb	r7, [r5, #16]
 800a682:	76e7      	strb	r7, [r4, #27]
{
 800a684:	9f08      	ldr	r7, [sp, #32]
	pstatic->algo__consistency_check__tolerance               =
 800a686:	f895 900c 	ldrb.w	r9, [r5, #12]
 800a68a:	f884 901c 	strb.w	r9, [r4, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a68e:	f04f 6932 	mov.w	r9, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800a692:	7760      	strb	r0, [r4, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800a694:	77a0      	strb	r0, [r4, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800a696:	77e0      	strb	r0, [r4, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a698:	f8c1 9000 	str.w	r9, [r1]
	pgeneral->cal_config__repeat_rate                         =
 800a69c:	89ec      	ldrh	r4, [r5, #14]
 800a69e:	808c      	strh	r4, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a6a0:	240d      	movs	r4, #13
	pgeneral->global_config__vcsel_width                      = 0x02;
 800a6a2:	f881 e006 	strb.w	lr, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a6a6:	71cc      	strb	r4, [r1, #7]
	pgeneral->phasecal_config__target                         =
 800a6a8:	7b6c      	ldrb	r4, [r5, #13]
 800a6aa:	720c      	strb	r4, [r1, #8]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a6ac:	f44f 440c 	mov.w	r4, #35840	; 0x8c00
	pgeneral->phasecal_config__override                       = 0x00;
 800a6b0:	7248      	strb	r0, [r1, #9]
	pgeneral->dss_config__roi_mode_control =
 800a6b2:	728e      	strb	r6, [r1, #10]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a6b4:	f8c1 a012 	str.w	sl, [r1, #18]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800a6b8:	8188      	strh	r0, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800a6ba:	81c8      	strh	r0, [r1, #14]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a6bc:	820c      	strh	r4, [r1, #16]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a6be:	f04f 091a 	mov.w	r9, #26
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800a6c2:	240b      	movs	r4, #11
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800a6c4:	2109      	movs	r1, #9
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a6c6:	f04f 0e20 	mov.w	lr, #32
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800a6ca:	7010      	strb	r0, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800a6cc:	7090      	strb	r0, [r2, #2]
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800a6ce:	7194      	strb	r4, [r2, #6]
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800a6d0:	7251      	strb	r1, [r2, #9]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a6d2:	f882 9001 	strb.w	r9, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a6d6:	f882 e003 	strb.w	lr, [r2, #3]
	ptiming->range_config__sigma_thresh                       =
 800a6da:	f8b5 e014 	ldrh.w	lr, [r5, #20]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800a6de:	f8b5 901a 	ldrh.w	r9, [r5, #26]
	ptiming->range_config__sigma_thresh                       =
 800a6e2:	f8a2 e00a 	strh.w	lr, [r2, #10]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800a6e6:	f04f 0e78 	mov.w	lr, #120	; 0x78
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800a6ea:	f8a2 900c 	strh.w	r9, [r2, #12]
	ptiming->range_config__valid_phase_low                    = 0x08;
 800a6ee:	f882 800e 	strb.w	r8, [r2, #14]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800a6f2:	6110      	str	r0, [r2, #16]
	ptiming->system__fractional_enable                        = 0x00;
 800a6f4:	7510      	strb	r0, [r2, #20]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800a6f6:	f882 e00f 	strb.w	lr, [r2, #15]
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800a6fa:	721c      	strb	r4, [r3, #8]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800a6fc:	701e      	strb	r6, [r3, #0]
	pdynamic->system__thresh_high                              = 0x0000;
 800a6fe:	f8c3 0002 	str.w	r0, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800a702:	7198      	strb	r0, [r3, #6]
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800a704:	7259      	strb	r1, [r3, #9]
	pdynamic->sd_config__initial_phase_sd0                     =
 800a706:	79e9      	ldrb	r1, [r5, #7]
 800a708:	7299      	strb	r1, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800a70a:	7aa9      	ldrb	r1, [r5, #10]
 800a70c:	72d9      	strb	r1, [r3, #11]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800a70e:	731e      	strb	r6, [r3, #12]
	pdynamic->sd_config__first_order_select =
 800a710:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
 800a714:	7359      	strb	r1, [r3, #13]
	pdynamic->sd_config__quantifier         =
 800a716:	f895 1023 	ldrb.w	r1, [r5, #35]	; 0x23
 800a71a:	7399      	strb	r1, [r3, #14]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a71c:	f04f 08c7 	mov.w	r8, #199	; 0xc7
	pdynamic->system__sequence_config                          = \
 800a720:	f04f 0edb 	mov.w	lr, #219	; 0xdb

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800a724:	24b1      	movs	r4, #177	; 0xb1
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800a726:	21d4      	movs	r1, #212	; 0xd4
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800a728:	f883 c010 	strb.w	ip, [r3, #16]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a72c:	f883 800f 	strb.w	r8, [r3, #15]
	pdynamic->system__sequence_config                          = \
 800a730:	f883 e011 	strb.w	lr, [r3, #17]
	psystem->system__stream_count_ctrl                         = 0x00;
 800a734:	7078      	strb	r0, [r7, #1]
	psystem->firmware__enable                                  = 0x01;
 800a736:	70be      	strb	r6, [r7, #2]
	psystem->system__interrupt_clear                           = \
 800a738:	70fe      	strb	r6, [r7, #3]
		pdynamic->system__grouped_parameter_hold = 0x00;
 800a73a:	7498      	strb	r0, [r3, #18]
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800a73c:	7110      	strb	r0, [r2, #4]
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800a73e:	71d0      	strb	r0, [r2, #7]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800a740:	7154      	strb	r4, [r2, #5]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800a742:	7211      	strb	r1, [r2, #8]

		pdynamic->system__seed_config =
 800a744:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
 800a748:	71da      	strb	r2, [r3, #7]
				ptuning_parms->tp_timed_seed_cfg;

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 800a74a:	2310      	movs	r3, #16
 800a74c:	713b      	strb	r3, [r7, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800a74e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a752:	bf00      	nop
 800a754:	01ff3800 	.word	0x01ff3800

0800a758 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800a758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a75c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	pstatic->debug__ctrl                                      = 0x00;
 800a75e:	2400      	movs	r4, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a760:	f04f 0e02 	mov.w	lr, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a764:	f04f 0808 	mov.w	r8, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a768:	f44f 6720 	mov.w	r7, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 800a76c:	2511      	movs	r5, #17
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a76e:	8007      	strh	r7, [r0, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800a770:	7084      	strb	r4, [r0, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800a772:	70c4      	strb	r4, [r0, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800a774:	7104      	strb	r4, [r0, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800a776:	7144      	strb	r4, [r0, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800a778:	7184      	strb	r4, [r0, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800a77a:	71c4      	strb	r4, [r0, #7]
	pstatic->host_if__status                                  = 0x00;
 800a77c:	7204      	strb	r4, [r0, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800a77e:	7244      	strb	r4, [r0, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800a780:	7284      	strb	r4, [r0, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800a782:	72c4      	strb	r4, [r0, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800a784:	7384      	strb	r4, [r0, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800a786:	7444      	strb	r4, [r0, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a788:	f880 e00d 	strb.w	lr, [r0, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800a78c:	f880 e00f 	strb.w	lr, [r0, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a790:	f880 8010 	strb.w	r8, [r0, #16]
	pstatic->gpio_hv_mux__ctrl  = \
 800a794:	7305      	strb	r5, [r0, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800a796:	7fb5      	ldrb	r5, [r6, #30]
 800a798:	7485      	strb	r5, [r0, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800a79a:	7ff5      	ldrb	r5, [r6, #31]
 800a79c:	74c5      	strb	r5, [r0, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800a79e:	f896 5020 	ldrb.w	r5, [r6, #32]
 800a7a2:	7505      	strb	r5, [r0, #20]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a7a4:	2701      	movs	r7, #1
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a7a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800a7aa:	7584      	strb	r4, [r0, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800a7ac:	75c4      	strb	r4, [r0, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800a7ae:	8304      	strh	r4, [r0, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a7b0:	7547      	strb	r7, [r0, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a7b2:	f880 c01a 	strb.w	ip, [r0, #26]
	pstatic->algo__range_min_clip                             =
 800a7b6:	7c35      	ldrb	r5, [r6, #16]
 800a7b8:	76c5      	strb	r5, [r0, #27]
{
 800a7ba:	9d09      	ldr	r5, [sp, #36]	; 0x24
	pstatic->algo__consistency_check__tolerance               =
 800a7bc:	f896 900c 	ldrb.w	r9, [r6, #12]
 800a7c0:	f880 901c 	strb.w	r9, [r0, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a7c4:	f04f 6932 	mov.w	r9, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800a7c8:	7744      	strb	r4, [r0, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800a7ca:	7784      	strb	r4, [r0, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800a7cc:	77c4      	strb	r4, [r0, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a7ce:	f8c1 9000 	str.w	r9, [r1]
	pgeneral->cal_config__repeat_rate                         =
 800a7d2:	89f0      	ldrh	r0, [r6, #14]
 800a7d4:	8088      	strh	r0, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a7d6:	200d      	movs	r0, #13
	pgeneral->global_config__vcsel_width                      = 0x02;
 800a7d8:	f881 e006 	strb.w	lr, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a7dc:	71c8      	strb	r0, [r1, #7]
	pgeneral->phasecal_config__target                         =
 800a7de:	f896 900d 	ldrb.w	r9, [r6, #13]
 800a7e2:	f881 9008 	strb.w	r9, [r1, #8]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a7e6:	4829      	ldr	r0, [pc, #164]	; (800a88c <VL53L1_preset_mode_olt+0x134>)
	pgeneral->phasecal_config__override                       = 0x00;
 800a7e8:	724c      	strb	r4, [r1, #9]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a7ea:	f44f 490c 	mov.w	r9, #35840	; 0x8c00
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a7ee:	f04f 0a1a 	mov.w	sl, #26
	pgeneral->dss_config__roi_mode_control =
 800a7f2:	728f      	strb	r7, [r1, #10]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a7f4:	f8c1 0012 	str.w	r0, [r1, #18]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800a7f8:	818c      	strh	r4, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800a7fa:	81cc      	strh	r4, [r1, #14]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a7fc:	f8a1 9010 	strh.w	r9, [r1, #16]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a800:	f04f 0b20 	mov.w	fp, #32
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a804:	f882 a001 	strb.w	sl, [r2, #1]
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800a808:	2109      	movs	r1, #9
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800a80a:	f04f 0a0b 	mov.w	sl, #11
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800a80e:	f04f 09cc 	mov.w	r9, #204	; 0xcc
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800a812:	20f5      	movs	r0, #245	; 0xf5
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800a814:	7014      	strb	r4, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800a816:	7094      	strb	r4, [r2, #2]
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800a818:	7117      	strb	r7, [r2, #4]
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800a81a:	71d7      	strb	r7, [r2, #7]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a81c:	f882 b003 	strb.w	fp, [r2, #3]
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800a820:	f882 a006 	strb.w	sl, [r2, #6]
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800a824:	7251      	strb	r1, [r2, #9]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800a826:	f882 9005 	strb.w	r9, [r2, #5]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800a82a:	7210      	strb	r0, [r2, #8]
	ptiming->range_config__sigma_thresh                       =
 800a82c:	8ab0      	ldrh	r0, [r6, #20]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800a82e:	f8b6 901a 	ldrh.w	r9, [r6, #26]
	ptiming->range_config__sigma_thresh                       =
 800a832:	8150      	strh	r0, [r2, #10]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800a834:	2078      	movs	r0, #120	; 0x78
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800a836:	f8a2 900c 	strh.w	r9, [r2, #12]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800a83a:	73d0      	strb	r0, [r2, #15]
	ptiming->range_config__valid_phase_low                    = 0x08;
 800a83c:	f882 800e 	strb.w	r8, [r2, #14]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800a840:	6114      	str	r4, [r2, #16]
	ptiming->system__fractional_enable                        = 0x00;
 800a842:	7514      	strb	r4, [r2, #20]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800a844:	701f      	strb	r7, [r3, #0]
	pdynamic->system__thresh_high                              = 0x0000;
 800a846:	f8c3 4002 	str.w	r4, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800a84a:	719c      	strb	r4, [r3, #6]
	pdynamic->system__seed_config =
 800a84c:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
 800a850:	71da      	strb	r2, [r3, #7]
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800a852:	f883 a008 	strb.w	sl, [r3, #8]
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800a856:	7259      	strb	r1, [r3, #9]
	pdynamic->sd_config__initial_phase_sd0                     =
 800a858:	79f2      	ldrb	r2, [r6, #7]
 800a85a:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800a85c:	7ab2      	ldrb	r2, [r6, #10]
 800a85e:	72da      	strb	r2, [r3, #11]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800a860:	731f      	strb	r7, [r3, #12]
	pdynamic->sd_config__first_order_select =
 800a862:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
 800a866:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
 800a868:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
 800a86c:	7399      	strb	r1, [r3, #14]
	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 800a86e:	4a08      	ldr	r2, [pc, #32]	; (800a890 <VL53L1_preset_mode_olt+0x138>)
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800a870:	f883 c010 	strb.w	ip, [r3, #16]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a874:	26c7      	movs	r6, #199	; 0xc7
	pdynamic->system__sequence_config                          = \
 800a876:	21db      	movs	r1, #219	; 0xdb
	pdynamic->system__grouped_parameter_hold                   = 0x02;
 800a878:	f883 e012 	strb.w	lr, [r3, #18]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a87c:	73de      	strb	r6, [r3, #15]
	pdynamic->system__sequence_config                          = \
 800a87e:	7459      	strb	r1, [r3, #17]
		psystem->system__stream_count_ctrl  = 0x01;
 800a880:	f8c5 2001 	str.w	r2, [r5, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800a884:	4620      	mov	r0, r4
 800a886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a88a:	bf00      	nop
 800a88c:	01ff3800 	.word	0x01ff3800
 800a890:	21010101 	.word	0x21010101

0800a894 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800a894:	b410      	push	{r4}
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800a896:	2102      	movs	r1, #2
	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800a898:	2401      	movs	r4, #1
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800a89a:	220a      	movs	r2, #10
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800a89c:	f44f 63e6 	mov.w	r3, #1840	; 0x730
	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800a8a0:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800a8a4:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800a8a8:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800a8ac:	6243      	str	r3, [r0, #36]	; 0x24
}
 800a8ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8b2:	4770      	bx	lr

0800a8b4 <VL53L1_init_ll_driver_state>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);

	pstate->cfg_device_state  = device_state;
	pstate->cfg_stream_count  = 0;
 800a8b4:	2300      	movs	r3, #0
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a8b6:	2202      	movs	r2, #2
	pstate->cfg_device_state  = device_state;
 800a8b8:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
	pstate->cfg_timing_status = 0;

	pstate->rd_device_state   = device_state;
 800a8bc:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
	pstate->cfg_stream_count  = 0;
 800a8c0:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	pstate->cfg_timing_status = 0;
 800a8c4:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
	pstate->rd_stream_count   = 0;
 800a8c8:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
	pstate->rd_timing_status  = 0;
 800a8cc:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a8d0:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a8d4:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
 800a8d8:	4770      	bx	lr
 800a8da:	bf00      	nop

0800a8dc <VL53L1_update_ll_driver_rd_state>:

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 800a8dc:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
 800a8e0:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800a8e4:	d018      	beq.n	800a918 <VL53L1_update_ll_driver_rd_state+0x3c>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 800a8e6:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a8ea:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 800a8ee:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
		if (pstate->rd_stream_count == 0xFF) {
 800a8f2:	2bff      	cmp	r3, #255	; 0xff
			pstate->rd_stream_count++;
 800a8f4:	bf1a      	itte	ne
 800a8f6:	3301      	addne	r3, #1
 800a8f8:	b2db      	uxtbne	r3, r3
			pstate->rd_stream_count = 0x80;
 800a8fa:	2380      	moveq	r3, #128	; 0x80
 800a8fc:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a900:	f081 0102 	eor.w	r1, r1, #2
		switch (pstate->rd_device_state) {
 800a904:	1ed3      	subs	r3, r2, #3
		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a906:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
		switch (pstate->rd_device_state) {
 800a90a:	2b05      	cmp	r3, #5
 800a90c:	d804      	bhi.n	800a918 <VL53L1_update_ll_driver_rd_state+0x3c>
 800a90e:	e8df f003 	tbb	[pc, r3]
 800a912:	0312      	.short	0x0312
 800a914:	072c2403 	.word	0x072c2403

		break;

		default:

			pstate->rd_device_state  =
 800a918:	4b16      	ldr	r3, [pc, #88]	; (800a974 <VL53L1_update_ll_driver_rd_state+0x98>)
 800a91a:	6303      	str	r3, [r0, #48]	; 0x30
#endif

	LOG_FUNCTION_END(status);

	return status;
}
 800a91c:	2000      	movs	r0, #0
 800a91e:	4770      	bx	lr
			pstate->rd_timing_status ^= 0x01;
 800a920:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
			pstate->rd_device_state =
 800a924:	2208      	movs	r2, #8
			pstate->rd_timing_status ^= 0x01;
 800a926:	f083 0301 	eor.w	r3, r3, #1
 800a92a:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
			pstate->rd_device_state =
 800a92e:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
}
 800a932:	2000      	movs	r0, #0
 800a934:	4770      	bx	lr
			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800a936:	f890 31c6 	ldrb.w	r3, [r0, #454]	; 0x1c6
 800a93a:	f013 0f02 	tst.w	r3, #2
				pstate->rd_device_state =
 800a93e:	bf18      	it	ne
 800a940:	2206      	movne	r2, #6
			pstate->rd_stream_count  = 0;
 800a942:	f04f 0300 	mov.w	r3, #0
				pstate->rd_device_state =
 800a946:	bf08      	it	eq
 800a948:	2208      	moveq	r2, #8
 800a94a:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
			pstate->rd_stream_count  = 0;
 800a94e:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
			pstate->rd_timing_status = 0;
 800a952:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
}
 800a956:	2000      	movs	r0, #0
 800a958:	4770      	bx	lr
			pstate->rd_stream_count = 0;
 800a95a:	2200      	movs	r2, #0
			pstate->rd_device_state =
 800a95c:	2308      	movs	r3, #8
			pstate->rd_stream_count = 0;
 800a95e:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
			pstate->rd_device_state =
 800a962:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
}
 800a966:	2000      	movs	r0, #0
 800a968:	4770      	bx	lr
			pstate->rd_device_state =
 800a96a:	2308      	movs	r3, #8
 800a96c:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
}
 800a970:	2000      	movs	r0, #0
 800a972:	4770      	bx	lr
 800a974:	00020003 	.word	0x00020003

0800a978 <VL53L1_check_ll_driver_rd_state>:
	device_gph_id = (psys_results->result__interrupt_status &
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 800a978:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
 800a97c:	f013 0320 	ands.w	r3, r3, #32
 800a980:	d01d      	beq.n	800a9be <VL53L1_check_ll_driver_rd_state+0x46>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 800a982:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
			psys_results->result__range_status &
 800a986:	f890 21cf 	ldrb.w	r2, [r0, #463]	; 0x1cf
		if (pstate->rd_device_state ==
 800a98a:	2b06      	cmp	r3, #6
 800a98c:	d019      	beq.n	800a9c2 <VL53L1_check_ll_driver_rd_state+0x4a>
{
 800a98e:	b410      	push	{r4}
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800a990:	f890 31ce 	ldrb.w	r3, [r0, #462]	; 0x1ce
			if (device_range_status !=
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 800a994:	f890 41d1 	ldrb.w	r4, [r0, #465]	; 0x1d1
 800a998:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 800a99c:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800a9a0:	111b      	asrs	r3, r3, #4
			if (pstate->rd_stream_count != device_stream_count) {
 800a9a2:	428c      	cmp	r4, r1
		if (pstate->rd_gph_id != device_gph_id) {
 800a9a4:	f003 0302 	and.w	r3, r3, #2
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800a9a8:	bf14      	ite	ne
 800a9aa:	f06f 0011 	mvnne.w	r0, #17
 800a9ae:	2000      	moveq	r0, #0
		if (pstate->rd_gph_id != device_gph_id) {
 800a9b0:	429a      	cmp	r2, r3
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800a9b2:	bf18      	it	ne
 800a9b4:	f06f 0012 	mvnne.w	r0, #18
	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
}
 800a9b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9bc:	4770      	bx	lr
	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800a9be:	4618      	mov	r0, r3
 800a9c0:	4770      	bx	lr
			if (device_range_status !=
 800a9c2:	f002 021f 	and.w	r2, r2, #31
 800a9c6:	2a12      	cmp	r2, #18
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 800a9c8:	bf0c      	ite	eq
 800a9ca:	2000      	moveq	r0, #0
 800a9cc:	f06f 0010 	mvnne.w	r0, #16
 800a9d0:	4770      	bx	lr
 800a9d2:	bf00      	nop

0800a9d4 <VL53L1_update_ll_driver_cfg_state>:
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 800a9d4:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
 800a9d8:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800a9dc:	d01c      	beq.n	800aa18 <VL53L1_update_ll_driver_cfg_state+0x44>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 800a9de:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a9e2:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 800a9e6:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
		if (pstate->cfg_stream_count == 0xFF) {
 800a9ea:	2bff      	cmp	r3, #255	; 0xff
			pstate->cfg_stream_count++;
 800a9ec:	bf1a      	itte	ne
 800a9ee:	3301      	addne	r3, #1
 800a9f0:	b2db      	uxtbne	r3, r3
			pstate->cfg_stream_count = 0x80;
 800a9f2:	2380      	moveq	r3, #128	; 0x80
 800a9f4:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
		switch (pstate->cfg_device_state) {
 800a9f8:	2903      	cmp	r1, #3
		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a9fa:	f082 0302 	eor.w	r3, r2, #2
 800a9fe:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
		switch (pstate->cfg_device_state) {
 800aa02:	d00d      	beq.n	800aa20 <VL53L1_update_ll_driver_cfg_state+0x4c>
 800aa04:	2904      	cmp	r1, #4
 800aa06:	d107      	bne.n	800aa18 <VL53L1_update_ll_driver_cfg_state+0x44>
			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
		break;

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 800aa08:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800aa0c:	f083 0301 	eor.w	r3, r3, #1
 800aa10:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
#endif

	LOG_FUNCTION_END(status);

	return status;
}
 800aa14:	2000      	movs	r0, #0
 800aa16:	4770      	bx	lr
			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800aa18:	4b08      	ldr	r3, [pc, #32]	; (800aa3c <VL53L1_update_ll_driver_cfg_state+0x68>)
 800aa1a:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 800aa1c:	2000      	movs	r0, #0
 800aa1e:	4770      	bx	lr
			pstate->cfg_timing_status ^= 0x01;
 800aa20:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
			pstate->cfg_stream_count = 1;
 800aa24:	2101      	movs	r1, #1
			pstate->cfg_timing_status ^= 0x01;
 800aa26:	404b      	eors	r3, r1
			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 800aa28:	2204      	movs	r2, #4
			pstate->cfg_timing_status ^= 0x01;
 800aa2a:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
			pstate->cfg_stream_count = 1;
 800aa2e:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 800aa32:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
}
 800aa36:	2000      	movs	r0, #0
 800aa38:	4770      	bx	lr
 800aa3a:	bf00      	nop
 800aa3c:	00020003 	.word	0x00020003

0800aa40 <VL53L1_copy_rtn_good_spads_to_buffer>:
{
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800aa40:	7c03      	ldrb	r3, [r0, #16]
 800aa42:	700b      	strb	r3, [r1, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800aa44:	7c43      	ldrb	r3, [r0, #17]
 800aa46:	704b      	strb	r3, [r1, #1]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800aa48:	7c83      	ldrb	r3, [r0, #18]
 800aa4a:	708b      	strb	r3, [r1, #2]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800aa4c:	7cc3      	ldrb	r3, [r0, #19]
 800aa4e:	70cb      	strb	r3, [r1, #3]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800aa50:	7d03      	ldrb	r3, [r0, #20]
 800aa52:	710b      	strb	r3, [r1, #4]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800aa54:	7d43      	ldrb	r3, [r0, #21]
 800aa56:	714b      	strb	r3, [r1, #5]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800aa58:	7d83      	ldrb	r3, [r0, #22]
 800aa5a:	718b      	strb	r3, [r1, #6]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800aa5c:	7dc3      	ldrb	r3, [r0, #23]
 800aa5e:	71cb      	strb	r3, [r1, #7]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800aa60:	7e03      	ldrb	r3, [r0, #24]
 800aa62:	720b      	strb	r3, [r1, #8]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800aa64:	7e43      	ldrb	r3, [r0, #25]
 800aa66:	724b      	strb	r3, [r1, #9]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800aa68:	7e83      	ldrb	r3, [r0, #26]
 800aa6a:	728b      	strb	r3, [r1, #10]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800aa6c:	7ec3      	ldrb	r3, [r0, #27]
 800aa6e:	72cb      	strb	r3, [r1, #11]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800aa70:	7f03      	ldrb	r3, [r0, #28]
 800aa72:	730b      	strb	r3, [r1, #12]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800aa74:	7f43      	ldrb	r3, [r0, #29]
 800aa76:	734b      	strb	r3, [r1, #13]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800aa78:	7f83      	ldrb	r3, [r0, #30]
 800aa7a:	738b      	strb	r3, [r1, #14]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800aa7c:	7fc3      	ldrb	r3, [r0, #31]
 800aa7e:	73cb      	strb	r3, [r1, #15]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800aa80:	f890 3020 	ldrb.w	r3, [r0, #32]
 800aa84:	740b      	strb	r3, [r1, #16]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800aa86:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800aa8a:	744b      	strb	r3, [r1, #17]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800aa8c:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800aa90:	748b      	strb	r3, [r1, #18]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800aa92:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 800aa96:	74cb      	strb	r3, [r1, #19]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800aa98:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800aa9c:	750b      	strb	r3, [r1, #20]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800aa9e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800aaa2:	754b      	strb	r3, [r1, #21]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800aaa4:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 800aaa8:	758b      	strb	r3, [r1, #22]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800aaaa:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 800aaae:	75cb      	strb	r3, [r1, #23]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800aab0:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800aab4:	760b      	strb	r3, [r1, #24]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800aab6:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800aaba:	764b      	strb	r3, [r1, #25]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800aabc:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 800aac0:	768b      	strb	r3, [r1, #26]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800aac2:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 800aac6:	76cb      	strb	r3, [r1, #27]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800aac8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800aacc:	770b      	strb	r3, [r1, #28]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800aace:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800aad2:	774b      	strb	r3, [r1, #29]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800aad4:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 800aad8:	778b      	strb	r3, [r1, #30]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800aada:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800aade:	77cb      	strb	r3, [r1, #31]
 800aae0:	4770      	bx	lr
 800aae2:	bf00      	nop

0800aae4 <VL53L1_i2c_encode_uint16_t>:
	uint16_t   i    = 0;
	uint16_t   data = 0;

	data =  ip_value;

	for (i = 0; i < count ; i++) {
 800aae4:	b151      	cbz	r1, 800aafc <VL53L1_i2c_encode_uint16_t+0x18>
 800aae6:	1e4b      	subs	r3, r1, #1
 800aae8:	0c1b      	lsrs	r3, r3, #16
 800aaea:	041b      	lsls	r3, r3, #16
 800aaec:	4413      	add	r3, r2
 800aaee:	440a      	add	r2, r1
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800aaf0:	f802 0d01 	strb.w	r0, [r2, #-1]!
	for (i = 0; i < count ; i++) {
 800aaf4:	4293      	cmp	r3, r2
		data = data >> 8;
 800aaf6:	ea4f 2010 	mov.w	r0, r0, lsr #8
	for (i = 0; i < count ; i++) {
 800aafa:	d1f9      	bne.n	800aaf0 <VL53L1_i2c_encode_uint16_t+0xc>
 800aafc:	4770      	bx	lr
 800aafe:	bf00      	nop

0800ab00 <VL53L1_i2c_decode_uint16_t>:
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;

	while (count-- > 0) {
 800ab00:	1e42      	subs	r2, r0, #1
 800ab02:	b292      	uxth	r2, r2
 800ab04:	b148      	cbz	r0, 800ab1a <VL53L1_i2c_decode_uint16_t+0x1a>
 800ab06:	440a      	add	r2, r1
 800ab08:	2000      	movs	r0, #0
 800ab0a:	3901      	subs	r1, #1
		value = (value << 8) | (uint16_t)*pbuffer++;
 800ab0c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ab10:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
	while (count-- > 0) {
 800ab14:	428a      	cmp	r2, r1
		value = (value << 8) | (uint16_t)*pbuffer++;
 800ab16:	b280      	uxth	r0, r0
	while (count-- > 0) {
 800ab18:	d1f8      	bne.n	800ab0c <VL53L1_i2c_decode_uint16_t+0xc>
	}

	return value;
}
 800ab1a:	4770      	bx	lr

0800ab1c <VL53L1_i2c_encode_int16_t>:
	uint16_t   i    = 0;
	int16_t    data = 0;

	data =  ip_value;

	for (i = 0; i < count ; i++) {
 800ab1c:	b151      	cbz	r1, 800ab34 <VL53L1_i2c_encode_int16_t+0x18>
 800ab1e:	1e4b      	subs	r3, r1, #1
 800ab20:	0c1b      	lsrs	r3, r3, #16
 800ab22:	041b      	lsls	r3, r3, #16
 800ab24:	4413      	add	r3, r2
 800ab26:	440a      	add	r2, r1
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800ab28:	f802 0d01 	strb.w	r0, [r2, #-1]!
	for (i = 0; i < count ; i++) {
 800ab2c:	4293      	cmp	r3, r2
		data = data >> 8;
 800ab2e:	ea4f 2020 	mov.w	r0, r0, asr #8
	for (i = 0; i < count ; i++) {
 800ab32:	d1f9      	bne.n	800ab28 <VL53L1_i2c_encode_int16_t+0xc>
 800ab34:	4770      	bx	lr
 800ab36:	bf00      	nop

0800ab38 <VL53L1_i2c_decode_int16_t>:
	 */

	int16_t    value = 0x00;

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800ab38:	f991 3000 	ldrsb.w	r3, [r1]
		value = 0xFFFF;
	}

	while (count-- > 0) {
 800ab3c:	1e42      	subs	r2, r0, #1
	if (*pbuffer >= 0x80) {
 800ab3e:	17db      	asrs	r3, r3, #31
	while (count-- > 0) {
 800ab40:	b292      	uxth	r2, r2
 800ab42:	b140      	cbz	r0, 800ab56 <VL53L1_i2c_decode_int16_t+0x1e>
 800ab44:	1888      	adds	r0, r1, r2
 800ab46:	3901      	subs	r1, #1
		value = (value << 8) | (int16_t)*pbuffer++;
 800ab48:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ab4c:	b25b      	sxtb	r3, r3
	while (count-- > 0) {
 800ab4e:	4288      	cmp	r0, r1
		value = (value << 8) | (int16_t)*pbuffer++;
 800ab50:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	while (count-- > 0) {
 800ab54:	d1f8      	bne.n	800ab48 <VL53L1_i2c_decode_int16_t+0x10>
	}

	return value;
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	4770      	bx	lr
 800ab5a:	bf00      	nop

0800ab5c <VL53L1_i2c_encode_uint32_t>:
	uint16_t   i    = 0;
	uint32_t   data = 0;

	data =  ip_value;

	for (i = 0; i < count ; i++) {
 800ab5c:	b151      	cbz	r1, 800ab74 <VL53L1_i2c_encode_uint32_t+0x18>
 800ab5e:	1e4b      	subs	r3, r1, #1
 800ab60:	0c1b      	lsrs	r3, r3, #16
 800ab62:	041b      	lsls	r3, r3, #16
 800ab64:	4413      	add	r3, r2
 800ab66:	440a      	add	r2, r1
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800ab68:	f802 0d01 	strb.w	r0, [r2, #-1]!
	for (i = 0; i < count ; i++) {
 800ab6c:	4293      	cmp	r3, r2
		data = data >> 8;
 800ab6e:	ea4f 2010 	mov.w	r0, r0, lsr #8
	for (i = 0; i < count ; i++) {
 800ab72:	d1f9      	bne.n	800ab68 <VL53L1_i2c_encode_uint32_t+0xc>
 800ab74:	4770      	bx	lr
 800ab76:	bf00      	nop

0800ab78 <VL53L1_i2c_decode_uint32_t>:
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;

	while (count-- > 0) {
 800ab78:	1e42      	subs	r2, r0, #1
 800ab7a:	b292      	uxth	r2, r2
 800ab7c:	b140      	cbz	r0, 800ab90 <VL53L1_i2c_decode_uint32_t+0x18>
 800ab7e:	440a      	add	r2, r1
 800ab80:	2000      	movs	r0, #0
 800ab82:	3901      	subs	r1, #1
		value = (value << 8) | (uint32_t)*pbuffer++;
 800ab84:	f811 3f01 	ldrb.w	r3, [r1, #1]!
	while (count-- > 0) {
 800ab88:	4291      	cmp	r1, r2
		value = (value << 8) | (uint32_t)*pbuffer++;
 800ab8a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
	while (count-- > 0) {
 800ab8e:	d1f9      	bne.n	800ab84 <VL53L1_i2c_decode_uint32_t+0xc>
	}

	return value;
}
 800ab90:	4770      	bx	lr
 800ab92:	bf00      	nop

0800ab94 <VL53L1_i2c_decode_int32_t>:
	 */

	int32_t    value = 0x00;

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800ab94:	f991 3000 	ldrsb.w	r3, [r1]
		value = 0xFFFFFFFF;
	}

	while (count-- > 0) {
 800ab98:	1e42      	subs	r2, r0, #1
	if (*pbuffer >= 0x80) {
 800ab9a:	17db      	asrs	r3, r3, #31
	while (count-- > 0) {
 800ab9c:	b292      	uxth	r2, r2
 800ab9e:	b138      	cbz	r0, 800abb0 <VL53L1_i2c_decode_int32_t+0x1c>
 800aba0:	1888      	adds	r0, r1, r2
 800aba2:	3901      	subs	r1, #1
		value = (value << 8) | (int32_t)*pbuffer++;
 800aba4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
	while (count-- > 0) {
 800aba8:	4288      	cmp	r0, r1
		value = (value << 8) | (int32_t)*pbuffer++;
 800abaa:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	while (count-- > 0) {
 800abae:	d1f9      	bne.n	800aba4 <VL53L1_i2c_decode_int32_t+0x10>
	}

	return value;
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	4770      	bx	lr

0800abb4 <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 800abb4:	b538      	push	{r3, r4, r5, lr}
 800abb6:	460d      	mov	r5, r1

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800abb8:	f000 f9b4 	bl	800af24 <VL53L1_calc_pll_period_us>
 800abbc:	4604      	mov	r4, r0

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 800abbe:	4628      	mov	r0, r5
 800abc0:	f000 f9b6 	bl	800af30 <VL53L1_decode_vcsel_period>
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 800abc4:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 800abc8:	0224      	lsls	r4, r4, #8
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800abca:	09a4      	lsrs	r4, r4, #6

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 800abcc:	fb04 f000 	mul.w	r0, r4, r0
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
}
 800abd0:	0980      	lsrs	r0, r0, #6
 800abd2:	bd38      	pop	{r3, r4, r5, pc}

0800abd4 <VL53L1_calc_range_ignore_threshold>:

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);

	if (x_gradient < 0) {
 800abd4:	2900      	cmp	r1, #0
		x_gradient_int = x_gradient * -1;
 800abd6:	bfba      	itte	lt
 800abd8:	4249      	neglt	r1, r1
 800abda:	b209      	sxthlt	r1, r1
 800abdc:	2100      	movge	r1, #0
	}

	if (y_gradient < 0) {
 800abde:	2a00      	cmp	r2, #0
		y_gradient_int = y_gradient * -1;
 800abe0:	bfb8      	it	lt
 800abe2:	4252      	neglt	r2, r2
{
 800abe4:	b510      	push	{r4, lr}
 800abe6:	bfb4      	ite	lt
 800abe8:	b212      	sxthlt	r2, r2
 800abea:	2200      	movge	r2, #0
	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800abec:	4c0f      	ldr	r4, [pc, #60]	; (800ac2c <VL53L1_calc_range_ignore_threshold+0x58>)
 800abee:	0100      	lsls	r0, r0, #4

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 800abf0:	440a      	add	r2, r1

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800abf2:	490e      	ldr	r1, [pc, #56]	; (800ac2c <VL53L1_calc_range_ignore_threshold+0x58>)
	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800abf4:	fb84 e400 	smull	lr, r4, r4, r0
	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 800abf8:	0152      	lsls	r2, r2, #5
	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800abfa:	17c0      	asrs	r0, r0, #31
 800abfc:	ebc0 10a4 	rsb	r0, r0, r4, asr #6
	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800ac00:	fb81 4102 	smull	r4, r1, r1, r2
 800ac04:	17d2      	asrs	r2, r2, #31
 800ac06:	ebc2 12a1 	rsb	r2, r2, r1, asr #6

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800ac0a:	4402      	add	r2, r0

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800ac0c:	fb02 f303 	mul.w	r3, r2, r3

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800ac10:	f113 0010 	adds.w	r0, r3, #16
 800ac14:	bf48      	it	mi
 800ac16:	f103 002f 	addmi.w	r0, r3, #47	; 0x2f
 800ac1a:	1140      	asrs	r0, r0, #5
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800ac1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ac20:	4298      	cmp	r0, r3
 800ac22:	bfa8      	it	ge
 800ac24:	4618      	movge	r0, r3
}
 800ac26:	b280      	uxth	r0, r0
 800ac28:	bd10      	pop	{r4, pc}
 800ac2a:	bf00      	nop
 800ac2c:	10624dd3 	.word	0x10624dd3

0800ac30 <VL53L1_calc_timeout_us>:
	uint64_t tmp            = 0;

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
	tmp += 0x00800;
 800ac30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac34:	2300      	movs	r3, #0
 800ac36:	fbe1 2300 	umlal	r2, r3, r1, r0
	tmp  = tmp >> 12;
 800ac3a:	0b10      	lsrs	r0, r2, #12
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
}
 800ac3c:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800ac40:	4770      	bx	lr
 800ac42:	bf00      	nop

0800ac44 <VL53L1_calc_decoded_timeout_us>:
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800ac44:	b2c3      	uxtb	r3, r0
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800ac46:	0a00      	lsrs	r0, r0, #8
 800ac48:	fa03 f000 	lsl.w	r0, r3, r0
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800ac4c:	3001      	adds	r0, #1
	tmp += 0x00800;
 800ac4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac52:	2300      	movs	r3, #0
 800ac54:	fbe0 2301 	umlal	r2, r3, r0, r1
	tmp  = tmp >> 12;
 800ac58:	0b10      	lsrs	r0, r2, #12
}
 800ac5a:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800ac5e:	4770      	bx	lr

0800ac60 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800ac60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac64:	9e09      	ldr	r6, [sp, #36]	; 0x24
	uint32_t timeout_mclks      = 0;
	uint16_t timeout_encoded    = 0;

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	f000 80aa 	beq.w	800adc0 <VL53L1_calc_timeout_register_values+0x160>
 800ac6c:	4681      	mov	r9, r0
	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800ac6e:	4618      	mov	r0, r3
 800ac70:	4698      	mov	r8, r3
 800ac72:	4617      	mov	r7, r2
 800ac74:	460c      	mov	r4, r1
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800ac76:	f896 a006 	ldrb.w	sl, [r6, #6]
	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800ac7a:	f000 f953 	bl	800af24 <VL53L1_calc_pll_period_us>
 800ac7e:	4605      	mov	r5, r0
	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 800ac80:	4650      	mov	r0, sl
 800ac82:	f000 f955 	bl	800af30 <VL53L1_decode_vcsel_period>
	macro_period_us =
 800ac86:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 800ac8a:	022d      	lsls	r5, r5, #8
	macro_period_us = macro_period_us >> 6;
 800ac8c:	09ad      	lsrs	r5, r5, #6
	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 800ac8e:	fb05 f000 	mul.w	r0, r5, r0
			((timeout_us << 12) + (macro_period_us>>1)) /
 800ac92:	09c5      	lsrs	r5, r0, #7
 800ac94:	eb05 3309 	add.w	r3, r5, r9, lsl #12
	macro_period_us = macro_period_us >> 6;
 800ac98:	0980      	lsrs	r0, r0, #6
		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
			timeout_mclks = 0xFF;

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800ac9a:	9a08      	ldr	r2, [sp, #32]
	timeout_mclks   =
 800ac9c:	fbb3 f3f0 	udiv	r3, r3, r0
				(uint8_t)timeout_mclks;
 800aca0:	2bff      	cmp	r3, #255	; 0xff
 800aca2:	bf28      	it	cs
 800aca4:	23ff      	movcs	r3, #255	; 0xff
			((timeout_us << 12) + (macro_period_us>>1)) /
 800aca6:	0324      	lsls	r4, r4, #12
				(uint8_t)timeout_mclks;
 800aca8:	71d3      	strb	r3, [r2, #7]
			((timeout_us << 12) + (macro_period_us>>1)) /
 800acaa:	192b      	adds	r3, r5, r4
	timeout_mclks   =
 800acac:	fbb3 f3f0 	udiv	r3, r3, r0
	if (timeout_mclks > 0) {
 800acb0:	bb7b      	cbnz	r3, 800ad12 <VL53L1_calc_timeout_register_values+0xb2>
 800acb2:	461a      	mov	r2, r3
			((timeout_us << 12) + (macro_period_us>>1)) /
 800acb4:	033f      	lsls	r7, r7, #12
 800acb6:	443d      	add	r5, r7
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
 800acb8:	7032      	strb	r2, [r6, #0]
	timeout_mclks   =
 800acba:	fbb5 f5f0 	udiv	r5, r5, r0
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
		ptiming->mm_config__timeout_macrop_a_lo =
 800acbe:	7073      	strb	r3, [r6, #1]
	if (timeout_mclks > 0) {
 800acc0:	2d00      	cmp	r5, #0
 800acc2:	d140      	bne.n	800ad46 <VL53L1_calc_timeout_register_values+0xe6>
 800acc4:	462b      	mov	r3, r5
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
 800acc6:	7133      	strb	r3, [r6, #4]
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
		ptiming->range_config__timeout_macrop_a_lo =
 800acc8:	7175      	strb	r5, [r6, #5]
	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800acca:	4640      	mov	r0, r8
				(uint8_t) (timeout_encoded & 0x00FF);

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800accc:	f896 8009 	ldrb.w	r8, [r6, #9]
	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800acd0:	f000 f928 	bl	800af24 <VL53L1_calc_pll_period_us>
 800acd4:	4605      	mov	r5, r0
	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 800acd6:	4640      	mov	r0, r8
 800acd8:	f000 f92a 	bl	800af30 <VL53L1_decode_vcsel_period>
	macro_period_us =
 800acdc:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 800ace0:	022d      	lsls	r5, r5, #8
	macro_period_us = macro_period_us >> 6;
 800ace2:	09ad      	lsrs	r5, r5, #6
	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 800ace4:	fb05 f000 	mul.w	r0, r5, r0
			((timeout_us << 12) + (macro_period_us>>1)) /
 800ace8:	09c2      	lsrs	r2, r0, #7
 800acea:	4414      	add	r4, r2
	macro_period_us = macro_period_us >> 6;
 800acec:	0980      	lsrs	r0, r0, #6
	timeout_mclks   =
 800acee:	fbb4 f4f0 	udiv	r4, r4, r0
	if (timeout_mclks > 0) {
 800acf2:	2c00      	cmp	r4, #0
 800acf4:	d151      	bne.n	800ad9a <VL53L1_calc_timeout_register_values+0x13a>
 800acf6:	4623      	mov	r3, r4
			((timeout_us << 12) + (macro_period_us>>1)) /
 800acf8:	4417      	add	r7, r2
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
 800acfa:	70b3      	strb	r3, [r6, #2]
	timeout_mclks   =
 800acfc:	fbb7 f7f0 	udiv	r7, r7, r0
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
		ptiming->mm_config__timeout_macrop_b_lo =
 800ad00:	70f4      	strb	r4, [r6, #3]
	if (timeout_mclks > 0) {
 800ad02:	2f00      	cmp	r7, #0
 800ad04:	d132      	bne.n	800ad6c <VL53L1_calc_timeout_register_values+0x10c>
 800ad06:	463b      	mov	r3, r7
		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
 800ad08:	71f3      	strb	r3, [r6, #7]
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
		ptiming->range_config__timeout_macrop_b_lo =
 800ad0a:	7237      	strb	r7, [r6, #8]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ad0c:	2000      	movs	r0, #0
 800ad0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ls_byte = timeout_mclks - 1;
 800ad12:	1e5a      	subs	r2, r3, #1
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800ad14:	f032 03ff 	bics.w	r3, r2, #255	; 0xff
 800ad18:	d009      	beq.n	800ad2e <VL53L1_calc_timeout_register_values+0xce>
 800ad1a:	2300      	movs	r3, #0
			ls_byte = ls_byte >> 1;
 800ad1c:	0852      	lsrs	r2, r2, #1
			ms_byte++;
 800ad1e:	3301      	adds	r3, #1
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800ad20:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
			ms_byte++;
 800ad24:	b29b      	uxth	r3, r3
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800ad26:	2900      	cmp	r1, #0
 800ad28:	d1f8      	bne.n	800ad1c <VL53L1_calc_timeout_register_values+0xbc>
 800ad2a:	021b      	lsls	r3, r3, #8
 800ad2c:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800ad2e:	4413      	add	r3, r2
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	0a1a      	lsrs	r2, r3, #8
			((timeout_us << 12) + (macro_period_us>>1)) /
 800ad34:	033f      	lsls	r7, r7, #12
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	443d      	add	r5, r7
		ptiming->mm_config__timeout_macrop_a_hi =
 800ad3a:	7032      	strb	r2, [r6, #0]
	timeout_mclks   =
 800ad3c:	fbb5 f5f0 	udiv	r5, r5, r0
		ptiming->mm_config__timeout_macrop_a_lo =
 800ad40:	7073      	strb	r3, [r6, #1]
	if (timeout_mclks > 0) {
 800ad42:	2d00      	cmp	r5, #0
 800ad44:	d0be      	beq.n	800acc4 <VL53L1_calc_timeout_register_values+0x64>
		ls_byte = timeout_mclks - 1;
 800ad46:	1e68      	subs	r0, r5, #1
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800ad48:	f030 05ff 	bics.w	r5, r0, #255	; 0xff
 800ad4c:	d009      	beq.n	800ad62 <VL53L1_calc_timeout_register_values+0x102>
 800ad4e:	2100      	movs	r1, #0
			ls_byte = ls_byte >> 1;
 800ad50:	0840      	lsrs	r0, r0, #1
			ms_byte++;
 800ad52:	3101      	adds	r1, #1
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800ad54:	f020 03ff 	bic.w	r3, r0, #255	; 0xff
			ms_byte++;
 800ad58:	b289      	uxth	r1, r1
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d1f8      	bne.n	800ad50 <VL53L1_calc_timeout_register_values+0xf0>
 800ad5e:	020d      	lsls	r5, r1, #8
 800ad60:	b2ad      	uxth	r5, r5
		encoded_timeout = (ms_byte << 8)
 800ad62:	4405      	add	r5, r0
 800ad64:	b2ad      	uxth	r5, r5
 800ad66:	0a2b      	lsrs	r3, r5, #8
 800ad68:	b2ed      	uxtb	r5, r5
 800ad6a:	e7ac      	b.n	800acc6 <VL53L1_calc_timeout_register_values+0x66>
		ls_byte = timeout_mclks - 1;
 800ad6c:	1e78      	subs	r0, r7, #1
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800ad6e:	f030 07ff 	bics.w	r7, r0, #255	; 0xff
 800ad72:	d009      	beq.n	800ad88 <VL53L1_calc_timeout_register_values+0x128>
 800ad74:	2300      	movs	r3, #0
			ls_byte = ls_byte >> 1;
 800ad76:	0840      	lsrs	r0, r0, #1
			ms_byte++;
 800ad78:	3301      	adds	r3, #1
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800ad7a:	f020 02ff 	bic.w	r2, r0, #255	; 0xff
			ms_byte++;
 800ad7e:	b29b      	uxth	r3, r3
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800ad80:	2a00      	cmp	r2, #0
 800ad82:	d1f8      	bne.n	800ad76 <VL53L1_calc_timeout_register_values+0x116>
 800ad84:	021f      	lsls	r7, r3, #8
 800ad86:	b2bf      	uxth	r7, r7
		encoded_timeout = (ms_byte << 8)
 800ad88:	4407      	add	r7, r0
 800ad8a:	b2bf      	uxth	r7, r7
 800ad8c:	0a3b      	lsrs	r3, r7, #8
 800ad8e:	b2ff      	uxtb	r7, r7
		ptiming->range_config__timeout_macrop_b_hi =
 800ad90:	71f3      	strb	r3, [r6, #7]
		ptiming->range_config__timeout_macrop_b_lo =
 800ad92:	7237      	strb	r7, [r6, #8]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ad94:	2000      	movs	r0, #0
 800ad96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ls_byte = timeout_mclks - 1;
 800ad9a:	1e61      	subs	r1, r4, #1
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800ad9c:	f031 04ff 	bics.w	r4, r1, #255	; 0xff
 800ada0:	d009      	beq.n	800adb6 <VL53L1_calc_timeout_register_values+0x156>
 800ada2:	2300      	movs	r3, #0
			ls_byte = ls_byte >> 1;
 800ada4:	0849      	lsrs	r1, r1, #1
			ms_byte++;
 800ada6:	3301      	adds	r3, #1
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800ada8:	f021 04ff 	bic.w	r4, r1, #255	; 0xff
			ms_byte++;
 800adac:	b29b      	uxth	r3, r3
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800adae:	2c00      	cmp	r4, #0
 800adb0:	d1f8      	bne.n	800ada4 <VL53L1_calc_timeout_register_values+0x144>
 800adb2:	021c      	lsls	r4, r3, #8
 800adb4:	b2a4      	uxth	r4, r4
		encoded_timeout = (ms_byte << 8)
 800adb6:	440c      	add	r4, r1
 800adb8:	b2a4      	uxth	r4, r4
 800adba:	0a23      	lsrs	r3, r4, #8
 800adbc:	b2e4      	uxtb	r4, r4
 800adbe:	e79b      	b.n	800acf8 <VL53L1_calc_timeout_register_values+0x98>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800adc0:	f06f 000e 	mvn.w	r0, #14

	LOG_FUNCTION_END(0);

	return status;

}
 800adc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800adc8 <VL53L1_encode_row_col>:
{
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 800adc8:	2807      	cmp	r0, #7
		*pspad_number = 128 + (col << 3) + (15-row);
 800adca:	bf8b      	itete	hi
 800adcc:	ebc0 00c1 	rsbhi	r0, r0, r1, lsl #3
	} else {
		*pspad_number = ((15-col) << 3) + row;
 800add0:	f1c1 010f 	rsbls	r1, r1, #15
		*pspad_number = 128 + (col << 3) + (15-row);
 800add4:	3871      	subhi	r0, #113	; 0x71
		*pspad_number = ((15-col) << 3) + row;
 800add6:	eb00 00c1 	addls.w	r0, r0, r1, lsl #3
 800adda:	b2c0      	uxtb	r0, r0
 800addc:	7010      	strb	r0, [r2, #0]
 800adde:	4770      	bx	lr

0800ade0 <VL53L1_decode_zone_size>:
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 800ade0:	0903      	lsrs	r3, r0, #4
	*pwidth  = encoded_xy_size & 0x0F;
 800ade2:	f000 000f 	and.w	r0, r0, #15
	*pheight = encoded_xy_size >> 4;
 800ade6:	7013      	strb	r3, [r2, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800ade8:	7008      	strb	r0, [r1, #0]
 800adea:	4770      	bx	lr

0800adec <VL53L1_encode_zone_size>:
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 800adec:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800adf0:	7011      	strb	r1, [r2, #0]
 800adf2:	4770      	bx	lr

0800adf4 <VL53L1_low_power_auto_data_init>:

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800adf4:	2300      	movs	r3, #0
	pdev->low_power_auto_data.vhv_loop_bound =
 800adf6:	2203      	movs	r2, #3
 800adf8:	f880 22e4 	strb.w	r2, [r0, #740]	; 0x2e4
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800adfc:	f880 32e5 	strb.w	r3, [r0, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800ae00:	f880 32e6 	strb.w	r3, [r0, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800ae04:	f880 32e7 	strb.w	r3, [r0, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800ae08:	f880 32e8 	strb.w	r3, [r0, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800ae0c:	f880 32e9 	strb.w	r3, [r0, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800ae10:	f880 32ea 	strb.w	r3, [r0, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800ae14:	f8c0 32ec 	str.w	r3, [r0, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 800ae18:	f8a0 32f0 	strh.w	r3, [r0, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	4770      	bx	lr

0800ae20 <VL53L1_low_power_auto_data_stop_range>:
	LOG_FUNCTION_START("");

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800ae20:	22ff      	movs	r2, #255	; 0xff
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
	pdev->low_power_auto_data.dss__required_spads = 0;

	/* restore vhv configs */
	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800ae22:	f890 12e8 	ldrb.w	r1, [r0, #744]	; 0x2e8
	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800ae26:	f880 22e6 	strb.w	r2, [r0, #742]	; 0x2e6
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800ae2a:	2200      	movs	r2, #0
{
 800ae2c:	4603      	mov	r3, r0
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800ae2e:	f880 22ea 	strb.w	r2, [r0, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800ae32:	f8c0 22ec 	str.w	r2, [r0, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 800ae36:	f8a0 22f0 	strh.w	r2, [r0, #752]	; 0x2f0
	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800ae3a:	b109      	cbz	r1, 800ae40 <VL53L1_low_power_auto_data_stop_range+0x20>
		pdev->stat_nvm.vhv_config__init =
 800ae3c:	f880 1163 	strb.w	r1, [r0, #355]	; 0x163
			pdev->low_power_auto_data.saved_vhv_init;
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800ae40:	f893 22e9 	ldrb.w	r2, [r3, #745]	; 0x2e9
 800ae44:	b10a      	cbz	r2, 800ae4a <VL53L1_low_power_auto_data_stop_range+0x2a>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800ae46:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
			pdev->low_power_auto_data.saved_vhv_timeout;

	/* remove phasecal override */
	pdev->gen_cfg.phasecal_config__override = 0x00;
 800ae4a:	2000      	movs	r0, #0
 800ae4c:	f883 018d 	strb.w	r0, [r3, #397]	; 0x18d

	LOG_FUNCTION_END(status);

	return status;
}
 800ae50:	4770      	bx	lr
 800ae52:	bf00      	nop

0800ae54 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 800ae54:	b4f0      	push	{r4, r5, r6, r7}
 800ae56:	4603      	mov	r3, r0
	VL53L1_Error  status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 800ae58:	2701      	movs	r7, #1

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 800ae5a:	2000      	movs	r0, #0

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 800ae5c:	268b      	movs	r6, #139	; 0x8b
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	/* Set DSS to manual/expected SPADs */
	pgeneral->dss_config__manual_effective_spads_select = 200 << 8;
	pgeneral->dss_config__roi_mode_control =
 800ae5e:	2402      	movs	r4, #2
	plpadata->is_low_power_auto_mode = 1;
 800ae60:	7057      	strb	r7, [r2, #1]
	plpadata->low_power_auto_range_count = 0;
 800ae62:	7090      	strb	r0, [r2, #2]
	pgeneral->dss_config__manual_effective_spads_select = 200 << 8;
 800ae64:	f44f 4548 	mov.w	r5, #51200	; 0xc800
	pdynamic->system__sequence_config = \
 800ae68:	744e      	strb	r6, [r1, #17]
	pgeneral->dss_config__roi_mode_control =
 800ae6a:	729c      	strb	r4, [r3, #10]
	pgeneral->dss_config__manual_effective_spads_select = 200 << 8;
 800ae6c:	821d      	strh	r5, [r3, #16]
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

	LOG_FUNCTION_END(status);

	return status;
}
 800ae6e:	bcf0      	pop	{r4, r5, r6, r7}
 800ae70:	4770      	bx	lr
 800ae72:	bf00      	nop

0800ae74 <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800ae74:	b470      	push	{r4, r5, r6}

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800ae76:	f890 4160 	ldrb.w	r4, [r0, #352]	; 0x160
		pdev->stat_nvm.vhv_config__init;
 800ae7a:	f890 3163 	ldrb.w	r3, [r0, #355]	; 0x163
	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800ae7e:	f890 62e4 	ldrb.w	r6, [r0, #740]	; 0x2e4
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800ae82:	f890 12ae 	ldrb.w	r1, [r0, #686]	; 0x2ae
	pdev->low_power_auto_data.saved_vhv_init =
 800ae86:	f880 32e8 	strb.w	r3, [r0, #744]	; 0x2e8
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800ae8a:	f004 0203 	and.w	r2, r4, #3
	pdev->gen_cfg.phasecal_config__override = 0x01;
 800ae8e:	2501      	movs	r5, #1
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800ae90:	eb02 0286 	add.w	r2, r2, r6, lsl #2
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800ae94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae98:	f880 3163 	strb.w	r3, [r0, #355]	; 0x163
	pdev->low_power_auto_data.saved_vhv_timeout =
 800ae9c:	f880 42e9 	strb.w	r4, [r0, #745]	; 0x2e9
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800aea0:	f880 2160 	strb.w	r2, [r0, #352]	; 0x160
	pdev->gen_cfg.phasecal_config__override = 0x01;
 800aea4:	f880 518d 	strb.w	r5, [r0, #397]	; 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
 800aea8:	f880 12ea 	strb.w	r1, [r0, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 800aeac:	f880 1187 	strb.w	r1, [r0, #391]	; 0x187
		pdev->low_power_auto_data.first_run_phasecal_result;

	LOG_FUNCTION_END(status);

	return status;
}
 800aeb0:	bc70      	pop	{r4, r5, r6}
 800aeb2:	2000      	movs	r0, #0
 800aeb4:	4770      	bx	lr
 800aeb6:	bf00      	nop

0800aeb8 <VL53L1_low_power_auto_update_DSS>:
	/* shift up to take advantage of 32 bits */
	/* 9.23 format */
	utemp32a = utemp32a << 16;

	/* check SPAD count */
	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 800aeb8:	f8b0 21d2 	ldrh.w	r2, [r0, #466]	; 0x1d2
{
 800aebc:	b410      	push	{r4}
	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 800aebe:	b17a      	cbz	r2, 800aee0 <VL53L1_low_power_auto_update_DSS+0x28>
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 800aec0:	f8b0 31de 	ldrh.w	r3, [r0, #478]	; 0x1de
		pdev->sys_results.result__ambient_count_rate_mcps_sd0;
 800aec4:	f8b0 41d6 	ldrh.w	r4, [r0, #470]	; 0x1d6
 800aec8:	f64f 71ff 	movw	r1, #65535	; 0xffff
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 800aecc:	4423      	add	r3, r4
 800aece:	428b      	cmp	r3, r1
 800aed0:	bfa8      	it	ge
 800aed2:	460b      	movge	r3, r1
	utemp32a = utemp32a << 16;
 800aed4:	041b      	lsls	r3, r3, #16
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
	else {
		/* format 17.15 */
		utemp32a = utemp32a /
 800aed6:	fbb3 f3f2 	udiv	r3, r3, r2
			pdev->sys_results.result__dss_actual_effective_spads_sd0;
		/* save intermediate result */
		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 800aeda:	f8c0 32ec 	str.w	r3, [r0, #748]	; 0x2ec
		 * format 9.23 */
		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
			16;

		/* check for divide by zero */
		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps == 0)
 800aede:	b963      	cbnz	r3, 800aefa <VL53L1_low_power_auto_update_DSS+0x42>
		pdev->low_power_auto_data.dss__required_spads = 0x8000;

		/* override DSS config */
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
		pdev->low_power_auto_data.dss__required_spads;
		pdev->gen_cfg.dss_config__roi_mode_control =
 800aee0:	2202      	movs	r2, #2
		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 800aee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
		pdev->gen_cfg.dss_config__roi_mode_control =
 800aee6:	f880 218e 	strb.w	r2, [r0, #398]	; 0x18e
		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 800aeea:	f8a0 32f0 	strh.w	r3, [r0, #752]	; 0x2f0
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800aeee:	f8a0 3194 	strh.w	r3, [r0, #404]	; 0x194
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800aef2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aef6:	2000      	movs	r0, #0
 800aef8:	4770      	bx	lr
		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 800aefa:	f8b0 2164 	ldrh.w	r2, [r0, #356]	; 0x164
 800aefe:	0412      	lsls	r2, r2, #16
			utemp32a = utemp32a /
 800af00:	fbb2 f3f3 	udiv	r3, r2, r3
				(uint16_t)utemp32a;
 800af04:	428b      	cmp	r3, r1
 800af06:	bf28      	it	cs
 800af08:	460b      	movcs	r3, r1
			pdev->gen_cfg.dss_config__roi_mode_control =
 800af0a:	2202      	movs	r2, #2
				(uint16_t)utemp32a;
 800af0c:	b29b      	uxth	r3, r3
			pdev->gen_cfg.dss_config__roi_mode_control =
 800af0e:	f880 218e 	strb.w	r2, [r0, #398]	; 0x18e
			pdev->low_power_auto_data.dss__required_spads =
 800af12:	f8a0 32f0 	strh.w	r3, [r0, #752]	; 0x2f0
			pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800af16:	f8a0 3194 	strh.w	r3, [r0, #404]	; 0x194
}
 800af1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af1e:	2000      	movs	r0, #0
 800af20:	4770      	bx	lr
 800af22:	bf00      	nop

0800af24 <VL53L1_calc_pll_period_us>:

	uint32_t  pll_period_us        = 0;

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800af24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
}
 800af28:	fb93 f0f0 	sdiv	r0, r3, r0
 800af2c:	4770      	bx	lr
 800af2e:	bf00      	nop

0800af30 <VL53L1_decode_vcsel_period>:
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800af30:	3001      	adds	r0, #1
 800af32:	0040      	lsls	r0, r0, #1

	return vcsel_period_pclks;
}
 800af34:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 800af38:	4770      	bx	lr
 800af3a:	bf00      	nop

0800af3c <VL53L1_decode_row_col>:
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 800af3c:	0603      	lsls	r3, r0, #24
 800af3e:	d407      	bmi.n	800af50 <VL53L1_decode_row_col+0x14>
		*prow = 8 + ((255-spad_number) & 0x07);
		*pcol = (spad_number-128) >> 3;
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
 800af40:	f1c0 037f 	rsb	r3, r0, #127	; 0x7f
 800af44:	10db      	asrs	r3, r3, #3
		*prow = spad_number & 0x07;
 800af46:	f000 0007 	and.w	r0, r0, #7
 800af4a:	7008      	strb	r0, [r1, #0]
		*pcol = (127-spad_number) >> 3;
 800af4c:	7013      	strb	r3, [r2, #0]
 800af4e:	4770      	bx	lr
		*prow = 8 + ((255-spad_number) & 0x07);
 800af50:	43c3      	mvns	r3, r0
 800af52:	f003 0307 	and.w	r3, r3, #7
		*pcol = (spad_number-128) >> 3;
 800af56:	3880      	subs	r0, #128	; 0x80
		*prow = 8 + ((255-spad_number) & 0x07);
 800af58:	3308      	adds	r3, #8
		*pcol = (spad_number-128) >> 3;
 800af5a:	10c0      	asrs	r0, r0, #3
		*prow = 8 + ((255-spad_number) & 0x07);
 800af5c:	700b      	strb	r3, [r1, #0]
		*pcol = (spad_number-128) >> 3;
 800af5e:	7010      	strb	r0, [r2, #0]
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop

0800af64 <VL53L1_i2c_encode_static_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800af64:	290a      	cmp	r1, #10
 800af66:	d927      	bls.n	800afb8 <VL53L1_i2c_encode_static_nvm_managed+0x54>
{
 800af68:	b538      	push	{r3, r4, r5, lr}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800af6a:	7803      	ldrb	r3, [r0, #0]
 800af6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   0) =
 800af70:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800af72:	7843      	ldrb	r3, [r0, #1]
 800af74:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   1) =
 800af78:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800af7a:	7883      	ldrb	r3, [r0, #2]
 800af7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   2) =
 800af80:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800af82:	78c3      	ldrb	r3, [r0, #3]
 800af84:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   3) =
 800af88:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800af8a:	7903      	ldrb	r3, [r0, #4]
 800af8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af90:	4605      	mov	r5, r0
	*(pbuffer +   4) =
 800af92:	7113      	strb	r3, [r2, #4]
 800af94:	4614      	mov	r4, r2
	VL53L1_i2c_encode_uint16_t(
 800af96:	88c0      	ldrh	r0, [r0, #6]
 800af98:	3205      	adds	r2, #5
 800af9a:	2102      	movs	r1, #2
 800af9c:	f7ff fda2 	bl	800aae4 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
		pdata->vhv_config__timeout_macrop_loop_bound;
 800afa0:	7a2b      	ldrb	r3, [r5, #8]
	*(pbuffer +   7) =
 800afa2:	71e3      	strb	r3, [r4, #7]
	*(pbuffer +   8) =
		pdata->vhv_config__count_thresh;
 800afa4:	7a6b      	ldrb	r3, [r5, #9]
	*(pbuffer +   8) =
 800afa6:	7223      	strb	r3, [r4, #8]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800afa8:	7aab      	ldrb	r3, [r5, #10]
 800afaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer +   9) =
 800afae:	7263      	strb	r3, [r4, #9]
	*(pbuffer +  10) =
		pdata->vhv_config__init;
 800afb0:	7aeb      	ldrb	r3, [r5, #11]
	*(pbuffer +  10) =
 800afb2:	72a3      	strb	r3, [r4, #10]
	LOG_FUNCTION_END(status);


	return status;
 800afb4:	2000      	movs	r0, #0
 800afb6:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800afb8:	f06f 0009 	mvn.w	r0, #9
 800afbc:	4770      	bx	lr
 800afbe:	bf00      	nop

0800afc0 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800afc0:	b570      	push	{r4, r5, r6, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_ReadMulti(
 800afc6:	230b      	movs	r3, #11
 800afc8:	aa01      	add	r2, sp, #4
 800afca:	2101      	movs	r1, #1
 800afcc:	f006 fa56 	bl	801147c <VL53L1_ReadMulti>
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800afd0:	4605      	mov	r5, r0
 800afd2:	bb60      	cbnz	r0, 800b02e <VL53L1_get_static_nvm_managed+0x6e>
		(*(pbuffer +   0)) & 0x7F;
 800afd4:	f89d 6004 	ldrb.w	r6, [sp, #4]
		(*(pbuffer +   1)) & 0xF;
 800afd8:	f89d 0005 	ldrb.w	r0, [sp, #5]
		(*(pbuffer +   2)) & 0x7F;
 800afdc:	f89d 1006 	ldrb.w	r1, [sp, #6]
		(*(pbuffer +   3)) & 0x3;
 800afe0:	f89d 2007 	ldrb.w	r2, [sp, #7]
		(*(pbuffer +   4)) & 0x7F;
 800afe4:	f89d 3008 	ldrb.w	r3, [sp, #8]
		(*(pbuffer +   3)) & 0x3;
 800afe8:	f002 0203 	and.w	r2, r2, #3
		(*(pbuffer +   4)) & 0x7F;
 800afec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		(*(pbuffer +   0)) & 0x7F;
 800aff0:	f006 067f 	and.w	r6, r6, #127	; 0x7f
		(*(pbuffer +   1)) & 0xF;
 800aff4:	f000 000f 	and.w	r0, r0, #15
		(*(pbuffer +   2)) & 0x7F;
 800aff8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	pdata->i2c_slave__device_address =
 800affc:	7026      	strb	r6, [r4, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
 800affe:	7060      	strb	r0, [r4, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
 800b000:	70a1      	strb	r1, [r4, #2]
	pdata->ana_config__reg_avdd1v2_sel =
 800b002:	70e2      	strb	r2, [r4, #3]
	pdata->ana_config__fast_osc__trim =
 800b004:	7123      	strb	r3, [r4, #4]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 800b006:	f10d 0109 	add.w	r1, sp, #9
 800b00a:	2002      	movs	r0, #2
 800b00c:	f7ff fd78 	bl	800ab00 <VL53L1_i2c_decode_uint16_t>
		(*(pbuffer +   9)) & 0x3F;
 800b010:	f89d 300d 	ldrb.w	r3, [sp, #13]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800b014:	f89d 600b 	ldrb.w	r6, [sp, #11]
	pdata->vhv_config__count_thresh =
 800b018:	f89d 100c 	ldrb.w	r1, [sp, #12]
	pdata->vhv_config__init =
 800b01c:	f89d 200e 	ldrb.w	r2, [sp, #14]
	pdata->osc_measured__fast_osc__frequency =
 800b020:	80e0      	strh	r0, [r4, #6]
		(*(pbuffer +   9)) & 0x3F;
 800b022:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_config__offset =
 800b026:	72a3      	strb	r3, [r4, #10]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800b028:	7226      	strb	r6, [r4, #8]
	pdata->vhv_config__count_thresh =
 800b02a:	7261      	strb	r1, [r4, #9]
	pdata->vhv_config__init =
 800b02c:	72e2      	strb	r2, [r4, #11]
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 800b02e:	4628      	mov	r0, r5
 800b030:	b004      	add	sp, #16
 800b032:	bd70      	pop	{r4, r5, r6, pc}

0800b034 <VL53L1_i2c_encode_customer_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800b034:	2916      	cmp	r1, #22
 800b036:	d94b      	bls.n	800b0d0 <VL53L1_i2c_encode_customer_nvm_managed+0x9c>
{
 800b038:	b538      	push	{r3, r4, r5, lr}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800b03a:	7803      	ldrb	r3, [r0, #0]
	*(pbuffer +   0) =
 800b03c:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->global_config__spad_enables_ref_1;
 800b03e:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer +   1) =
 800b040:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->global_config__spad_enables_ref_2;
 800b042:	7883      	ldrb	r3, [r0, #2]
	*(pbuffer +   2) =
 800b044:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->global_config__spad_enables_ref_3;
 800b046:	78c3      	ldrb	r3, [r0, #3]
	*(pbuffer +   3) =
 800b048:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->global_config__spad_enables_ref_4;
 800b04a:	7903      	ldrb	r3, [r0, #4]
	*(pbuffer +   4) =
 800b04c:	7113      	strb	r3, [r2, #4]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800b04e:	7943      	ldrb	r3, [r0, #5]
 800b050:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   5) =
 800b054:	7153      	strb	r3, [r2, #5]
	*(pbuffer +   6) =
		pdata->global_config__ref_en_start_select;
 800b056:	7983      	ldrb	r3, [r0, #6]
	*(pbuffer +   6) =
 800b058:	7193      	strb	r3, [r2, #6]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800b05a:	79c3      	ldrb	r3, [r0, #7]
 800b05c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer +   7) =
 800b060:	71d3      	strb	r3, [r2, #7]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800b062:	7a03      	ldrb	r3, [r0, #8]
 800b064:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   8) =
 800b068:	7213      	strb	r3, [r2, #8]
 800b06a:	4604      	mov	r4, r0
 800b06c:	4615      	mov	r5, r2
	VL53L1_i2c_encode_uint16_t(
 800b06e:	8940      	ldrh	r0, [r0, #10]
 800b070:	3209      	adds	r2, #9
 800b072:	2102      	movs	r1, #2
 800b074:	f7ff fd36 	bl	800aae4 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 800b078:	f105 020b 	add.w	r2, r5, #11
 800b07c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800b080:	2102      	movs	r1, #2
 800b082:	f7ff fd4b 	bl	800ab1c <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 800b086:	f105 020d 	add.w	r2, r5, #13
 800b08a:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800b08e:	2102      	movs	r1, #2
 800b090:	f7ff fd44 	bl	800ab1c <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 800b094:	f105 020f 	add.w	r2, r5, #15
 800b098:	8a20      	ldrh	r0, [r4, #16]
 800b09a:	2102      	movs	r1, #2
 800b09c:	f7ff fd22 	bl	800aae4 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
 800b0a0:	8a60      	ldrh	r0, [r4, #18]
 800b0a2:	f105 0211 	add.w	r2, r5, #17
 800b0a6:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800b0aa:	2102      	movs	r1, #2
 800b0ac:	f7ff fd36 	bl	800ab1c <VL53L1_i2c_encode_int16_t>
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 800b0b0:	f105 0213 	add.w	r2, r5, #19
 800b0b4:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 800b0b8:	2102      	movs	r1, #2
 800b0ba:	f7ff fd2f 	bl	800ab1c <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 800b0be:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 800b0c2:	f105 0215 	add.w	r2, r5, #21
 800b0c6:	2102      	movs	r1, #2
 800b0c8:	f7ff fd28 	bl	800ab1c <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800b0cc:	2000      	movs	r0, #0
 800b0ce:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800b0d0:	f06f 0009 	mvn.w	r0, #9
 800b0d4:	4770      	bx	lr
 800b0d6:	bf00      	nop

0800b0d8 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800b0d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0da:	b087      	sub	sp, #28
 800b0dc:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_ReadMulti(
 800b0de:	2317      	movs	r3, #23
 800b0e0:	466a      	mov	r2, sp
 800b0e2:	210d      	movs	r1, #13
 800b0e4:	f006 f9ca 	bl	801147c <VL53L1_ReadMulti>
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800b0e8:	4605      	mov	r5, r0
 800b0ea:	2800      	cmp	r0, #0
 800b0ec:	d14c      	bne.n	800b188 <VL53L1_get_customer_nvm_managed+0xb0>
		(*(pbuffer +   5)) & 0xF;
 800b0ee:	f89d 1005 	ldrb.w	r1, [sp, #5]
		(*(pbuffer +   7)) & 0x3F;
 800b0f2:	f89d 2007 	ldrb.w	r2, [sp, #7]
		(*(pbuffer +   8)) & 0x3;
 800b0f6:	f89d 3008 	ldrb.w	r3, [sp, #8]
	pdata->global_config__spad_enables_ref_0 =
 800b0fa:	f89d 0000 	ldrb.w	r0, [sp]
	pdata->global_config__spad_enables_ref_1 =
 800b0fe:	f89d 7001 	ldrb.w	r7, [sp, #1]
	pdata->global_config__spad_enables_ref_2 =
 800b102:	f89d 6002 	ldrb.w	r6, [sp, #2]
	pdata->global_config__spad_enables_ref_0 =
 800b106:	7020      	strb	r0, [r4, #0]
		(*(pbuffer +   5)) & 0xF;
 800b108:	f001 010f 	and.w	r1, r1, #15
		(*(pbuffer +   7)) & 0x3F;
 800b10c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
		(*(pbuffer +   8)) & 0x3;
 800b110:	f003 0303 	and.w	r3, r3, #3
	pdata->global_config__spad_enables_ref_3 =
 800b114:	f89d 0003 	ldrb.w	r0, [sp, #3]
	pdata->global_config__spad_enables_ref_5 =
 800b118:	7161      	strb	r1, [r4, #5]
	pdata->ref_spad_man__num_requested_ref_spads =
 800b11a:	71e2      	strb	r2, [r4, #7]
	pdata->global_config__spad_enables_ref_4 =
 800b11c:	f89d 1004 	ldrb.w	r1, [sp, #4]
	pdata->global_config__ref_en_start_select =
 800b120:	f89d 2006 	ldrb.w	r2, [sp, #6]
	pdata->ref_spad_man__ref_location =
 800b124:	7223      	strb	r3, [r4, #8]
	pdata->global_config__ref_en_start_select =
 800b126:	71a2      	strb	r2, [r4, #6]
	pdata->global_config__spad_enables_ref_3 =
 800b128:	70e0      	strb	r0, [r4, #3]
	pdata->global_config__spad_enables_ref_4 =
 800b12a:	7121      	strb	r1, [r4, #4]
	pdata->global_config__spad_enables_ref_1 =
 800b12c:	7067      	strb	r7, [r4, #1]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 800b12e:	f10d 0109 	add.w	r1, sp, #9
	pdata->global_config__spad_enables_ref_2 =
 800b132:	70a6      	strb	r6, [r4, #2]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 800b134:	2002      	movs	r0, #2
 800b136:	f7ff fce3 	bl	800ab00 <VL53L1_i2c_decode_uint16_t>
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 800b13a:	f10d 010b 	add.w	r1, sp, #11
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800b13e:	8160      	strh	r0, [r4, #10]
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 800b140:	2002      	movs	r0, #2
 800b142:	f7ff fcf9 	bl	800ab38 <VL53L1_i2c_decode_int16_t>
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 800b146:	f10d 010d 	add.w	r1, sp, #13
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800b14a:	81a0      	strh	r0, [r4, #12]
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 800b14c:	2002      	movs	r0, #2
 800b14e:	f7ff fcf3 	bl	800ab38 <VL53L1_i2c_decode_int16_t>
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 800b152:	f10d 010f 	add.w	r1, sp, #15
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800b156:	81e0      	strh	r0, [r4, #14]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 800b158:	2002      	movs	r0, #2
 800b15a:	f7ff fcd1 	bl	800ab00 <VL53L1_i2c_decode_uint16_t>
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800b15e:	f10d 0111 	add.w	r1, sp, #17
	pdata->ref_spad_char__total_rate_target_mcps =
 800b162:	8220      	strh	r0, [r4, #16]
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800b164:	2002      	movs	r0, #2
 800b166:	f7ff fce7 	bl	800ab38 <VL53L1_i2c_decode_int16_t>
 800b16a:	f3c0 000c 	ubfx	r0, r0, #0, #13
	pdata->algo__part_to_part_range_offset_mm =
 800b16e:	8260      	strh	r0, [r4, #18]
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 800b170:	f10d 0113 	add.w	r1, sp, #19
 800b174:	2002      	movs	r0, #2
 800b176:	f7ff fcdf 	bl	800ab38 <VL53L1_i2c_decode_int16_t>
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 800b17a:	f10d 0115 	add.w	r1, sp, #21
	pdata->mm_config__inner_offset_mm =
 800b17e:	82a0      	strh	r0, [r4, #20]
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 800b180:	2002      	movs	r0, #2
 800b182:	f7ff fcd9 	bl	800ab38 <VL53L1_i2c_decode_int16_t>
	pdata->mm_config__outer_offset_mm =
 800b186:	82e0      	strh	r0, [r4, #22]
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 800b188:	4628      	mov	r0, r5
 800b18a:	b007      	add	sp, #28
 800b18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b18e:	bf00      	nop

0800b190 <VL53L1_i2c_encode_static_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800b190:	291f      	cmp	r1, #31
 800b192:	d968      	bls.n	800b266 <VL53L1_i2c_encode_static_config+0xd6>
{
 800b194:	b538      	push	{r3, r4, r5, lr}
 800b196:	4604      	mov	r4, r0
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	VL53L1_i2c_encode_uint16_t(
 800b198:	2102      	movs	r1, #2
 800b19a:	8800      	ldrh	r0, [r0, #0]
 800b19c:	4615      	mov	r5, r2
 800b19e:	f7ff fca1 	bl	800aae4 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800b1a2:	78a3      	ldrb	r3, [r4, #2]
 800b1a4:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   2) =
 800b1a8:	70ab      	strb	r3, [r5, #2]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800b1aa:	78e3      	ldrb	r3, [r4, #3]
 800b1ac:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   3) =
 800b1b0:	70eb      	strb	r3, [r5, #3]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800b1b2:	7923      	ldrb	r3, [r4, #4]
 800b1b4:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   4) =
 800b1b8:	712b      	strb	r3, [r5, #4]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800b1ba:	7963      	ldrb	r3, [r4, #5]
 800b1bc:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer +   5) =
 800b1c0:	716b      	strb	r3, [r5, #5]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800b1c2:	79a3      	ldrb	r3, [r4, #6]
 800b1c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   6) =
 800b1c8:	71ab      	strb	r3, [r5, #6]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800b1ca:	79e3      	ldrb	r3, [r4, #7]
 800b1cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   7) =
 800b1d0:	71eb      	strb	r3, [r5, #7]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800b1d2:	7a23      	ldrb	r3, [r4, #8]
 800b1d4:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   8) =
 800b1d8:	722b      	strb	r3, [r5, #8]
	*(pbuffer +   9) =
		pdata->pad_i2c_hv__config;
 800b1da:	7a63      	ldrb	r3, [r4, #9]
	*(pbuffer +   9) =
 800b1dc:	726b      	strb	r3, [r5, #9]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800b1de:	7aa3      	ldrb	r3, [r4, #10]
 800b1e0:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +  10) =
 800b1e4:	72ab      	strb	r3, [r5, #10]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800b1e6:	7ae3      	ldrb	r3, [r4, #11]
 800b1e8:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  11) =
 800b1ec:	72eb      	strb	r3, [r5, #11]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800b1ee:	7b23      	ldrb	r3, [r4, #12]
 800b1f0:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer +  12) =
 800b1f4:	732b      	strb	r3, [r5, #12]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800b1f6:	7b63      	ldrb	r3, [r4, #13]
 800b1f8:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  13) =
 800b1fc:	736b      	strb	r3, [r5, #13]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800b1fe:	7ba3      	ldrb	r3, [r4, #14]
 800b200:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  14) =
 800b204:	73ab      	strb	r3, [r5, #14]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800b206:	7be3      	ldrb	r3, [r4, #15]
 800b208:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer +  15) =
 800b20c:	73eb      	strb	r3, [r5, #15]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800b20e:	7c23      	ldrb	r3, [r4, #16]
 800b210:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer +  16) =
 800b214:	742b      	strb	r3, [r5, #16]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800b216:	7c63      	ldrb	r3, [r4, #17]
 800b218:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +  17) =
 800b21c:	746b      	strb	r3, [r5, #17]
	*(pbuffer +  18) =
		pdata->sigma_estimator__effective_pulse_width_ns;
 800b21e:	7ca3      	ldrb	r3, [r4, #18]
	*(pbuffer +  18) =
 800b220:	74ab      	strb	r3, [r5, #18]
	*(pbuffer +  19) =
		pdata->sigma_estimator__effective_ambient_width_ns;
 800b222:	7ce3      	ldrb	r3, [r4, #19]
	*(pbuffer +  19) =
 800b224:	74eb      	strb	r3, [r5, #19]
	*(pbuffer +  20) =
		pdata->sigma_estimator__sigma_ref_mm;
 800b226:	7d23      	ldrb	r3, [r4, #20]
	*(pbuffer +  20) =
 800b228:	752b      	strb	r3, [r5, #20]
	*(pbuffer +  21) =
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800b22a:	7d63      	ldrb	r3, [r4, #21]
	*(pbuffer +  21) =
 800b22c:	756b      	strb	r3, [r5, #21]
	*(pbuffer +  22) =
		pdata->spare_host_config__static_config_spare_0;
 800b22e:	7da3      	ldrb	r3, [r4, #22]
	*(pbuffer +  22) =
 800b230:	75ab      	strb	r3, [r5, #22]
	*(pbuffer +  23) =
		pdata->spare_host_config__static_config_spare_1;
 800b232:	7de3      	ldrb	r3, [r4, #23]
	*(pbuffer +  23) =
 800b234:	75eb      	strb	r3, [r5, #23]
	VL53L1_i2c_encode_uint16_t(
 800b236:	8b20      	ldrh	r0, [r4, #24]
 800b238:	f105 0218 	add.w	r2, r5, #24
 800b23c:	2102      	movs	r1, #2
 800b23e:	f7ff fc51 	bl	800aae4 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
		pdata->algo__range_ignore_valid_height_mm;
 800b242:	7ea3      	ldrb	r3, [r4, #26]
	*(pbuffer +  26) =
 800b244:	76ab      	strb	r3, [r5, #26]
	*(pbuffer +  27) =
		pdata->algo__range_min_clip;
 800b246:	7ee3      	ldrb	r3, [r4, #27]
	*(pbuffer +  27) =
 800b248:	76eb      	strb	r3, [r5, #27]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800b24a:	7f23      	ldrb	r3, [r4, #28]
 800b24c:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +  28) =
 800b250:	772b      	strb	r3, [r5, #28]
	*(pbuffer +  29) =
		pdata->spare_host_config__static_config_spare_2;
 800b252:	7f63      	ldrb	r3, [r4, #29]
	*(pbuffer +  29) =
 800b254:	776b      	strb	r3, [r5, #29]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800b256:	7fa3      	ldrb	r3, [r4, #30]
 800b258:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +  30) =
 800b25c:	77ab      	strb	r3, [r5, #30]
	*(pbuffer +  31) =
		pdata->sd_config__reset_stages_lsb;
 800b25e:	7fe3      	ldrb	r3, [r4, #31]
	*(pbuffer +  31) =
 800b260:	77eb      	strb	r3, [r5, #31]
	LOG_FUNCTION_END(status);


	return status;
 800b262:	2000      	movs	r0, #0
 800b264:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800b266:	f06f 0009 	mvn.w	r0, #9
 800b26a:	4770      	bx	lr

0800b26c <VL53L1_i2c_encode_general_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 800b26c:	2915      	cmp	r1, #21
 800b26e:	d93f      	bls.n	800b2f0 <VL53L1_i2c_encode_general_config+0x84>
{
 800b270:	b538      	push	{r3, r4, r5, lr}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800b272:	7803      	ldrb	r3, [r0, #0]
	*(pbuffer +   0) =
 800b274:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->global_config__stream_divider;
 800b276:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer +   1) =
 800b278:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->system__interrupt_config_gpio;
 800b27a:	7883      	ldrb	r3, [r0, #2]
	*(pbuffer +   2) =
 800b27c:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800b27e:	78c3      	ldrb	r3, [r0, #3]
 800b280:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   3) =
 800b284:	70d3      	strb	r3, [r2, #3]
 800b286:	4605      	mov	r5, r0
	VL53L1_i2c_encode_uint16_t(
 800b288:	8880      	ldrh	r0, [r0, #4]
 800b28a:	4614      	mov	r4, r2
 800b28c:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800b290:	3204      	adds	r2, #4
 800b292:	2102      	movs	r1, #2
 800b294:	f7ff fc26 	bl	800aae4 <VL53L1_i2c_encode_uint16_t>
		pdata->cal_config__repeat_rate & 0xFFF,
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800b298:	79ab      	ldrb	r3, [r5, #6]
 800b29a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   6) =
 800b29e:	71a3      	strb	r3, [r4, #6]
	*(pbuffer +   7) =
		pdata->phasecal_config__timeout_macrop;
 800b2a0:	79eb      	ldrb	r3, [r5, #7]
	*(pbuffer +   7) =
 800b2a2:	71e3      	strb	r3, [r4, #7]
	*(pbuffer +   8) =
		pdata->phasecal_config__target;
 800b2a4:	7a2b      	ldrb	r3, [r5, #8]
	*(pbuffer +   8) =
 800b2a6:	7223      	strb	r3, [r4, #8]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800b2a8:	7a6b      	ldrb	r3, [r5, #9]
 800b2aa:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   9) =
 800b2ae:	7263      	strb	r3, [r4, #9]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800b2b0:	7aab      	ldrb	r3, [r5, #10]
 800b2b2:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer +  11) =
 800b2b6:	72e3      	strb	r3, [r4, #11]
	VL53L1_i2c_encode_uint16_t(
 800b2b8:	89a8      	ldrh	r0, [r5, #12]
 800b2ba:	f104 020c 	add.w	r2, r4, #12
 800b2be:	2102      	movs	r1, #2
 800b2c0:	f7ff fc10 	bl	800aae4 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 800b2c4:	f104 020e 	add.w	r2, r4, #14
 800b2c8:	89e8      	ldrh	r0, [r5, #14]
 800b2ca:	2102      	movs	r1, #2
 800b2cc:	f7ff fc0a 	bl	800aae4 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 800b2d0:	8a28      	ldrh	r0, [r5, #16]
 800b2d2:	f104 0210 	add.w	r2, r4, #16
 800b2d6:	2102      	movs	r1, #2
 800b2d8:	f7ff fc04 	bl	800aae4 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
		pdata->dss_config__manual_block_select;
 800b2dc:	7cab      	ldrb	r3, [r5, #18]
	*(pbuffer +  18) =
 800b2de:	74a3      	strb	r3, [r4, #18]
	*(pbuffer +  19) =
		pdata->dss_config__aperture_attenuation;
 800b2e0:	7ceb      	ldrb	r3, [r5, #19]
	*(pbuffer +  19) =
 800b2e2:	74e3      	strb	r3, [r4, #19]
	*(pbuffer +  20) =
		pdata->dss_config__max_spads_limit;
 800b2e4:	7d2b      	ldrb	r3, [r5, #20]
	*(pbuffer +  20) =
 800b2e6:	7523      	strb	r3, [r4, #20]
	*(pbuffer +  21) =
		pdata->dss_config__min_spads_limit;
 800b2e8:	7d6b      	ldrb	r3, [r5, #21]
	*(pbuffer +  21) =
 800b2ea:	7563      	strb	r3, [r4, #21]
	LOG_FUNCTION_END(status);


	return status;
 800b2ec:	2000      	movs	r0, #0
 800b2ee:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800b2f0:	f06f 0009 	mvn.w	r0, #9
 800b2f4:	4770      	bx	lr
 800b2f6:	bf00      	nop

0800b2f8 <VL53L1_i2c_encode_timing_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 800b2f8:	2916      	cmp	r1, #22
 800b2fa:	d93d      	bls.n	800b378 <VL53L1_i2c_encode_timing_config+0x80>
{
 800b2fc:	b538      	push	{r3, r4, r5, lr}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800b2fe:	7803      	ldrb	r3, [r0, #0]
 800b300:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   0) =
 800b304:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->mm_config__timeout_macrop_a_lo;
 800b306:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer +   1) =
 800b308:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800b30a:	7883      	ldrb	r3, [r0, #2]
 800b30c:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   2) =
 800b310:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->mm_config__timeout_macrop_b_lo;
 800b312:	78c3      	ldrb	r3, [r0, #3]
	*(pbuffer +   3) =
 800b314:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800b316:	7903      	ldrb	r3, [r0, #4]
 800b318:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   4) =
 800b31c:	7113      	strb	r3, [r2, #4]
	*(pbuffer +   5) =
		pdata->range_config__timeout_macrop_a_lo;
 800b31e:	7943      	ldrb	r3, [r0, #5]
	*(pbuffer +   5) =
 800b320:	7153      	strb	r3, [r2, #5]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800b322:	7983      	ldrb	r3, [r0, #6]
 800b324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer +   6) =
 800b328:	7193      	strb	r3, [r2, #6]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800b32a:	79c3      	ldrb	r3, [r0, #7]
 800b32c:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   7) =
 800b330:	71d3      	strb	r3, [r2, #7]
	*(pbuffer +   8) =
		pdata->range_config__timeout_macrop_b_lo;
 800b332:	7a03      	ldrb	r3, [r0, #8]
	*(pbuffer +   8) =
 800b334:	7213      	strb	r3, [r2, #8]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800b336:	7a43      	ldrb	r3, [r0, #9]
 800b338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b33c:	4605      	mov	r5, r0
	*(pbuffer +   9) =
 800b33e:	7253      	strb	r3, [r2, #9]
 800b340:	4614      	mov	r4, r2
	VL53L1_i2c_encode_uint16_t(
 800b342:	8940      	ldrh	r0, [r0, #10]
 800b344:	320a      	adds	r2, #10
 800b346:	2102      	movs	r1, #2
 800b348:	f7ff fbcc 	bl	800aae4 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 800b34c:	f104 020c 	add.w	r2, r4, #12
 800b350:	89a8      	ldrh	r0, [r5, #12]
 800b352:	2102      	movs	r1, #2
 800b354:	f7ff fbc6 	bl	800aae4 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
		pdata->range_config__valid_phase_low;
 800b358:	7bab      	ldrb	r3, [r5, #14]
	*(pbuffer +  14) =
 800b35a:	73a3      	strb	r3, [r4, #14]
	*(pbuffer +  15) =
		pdata->range_config__valid_phase_high;
 800b35c:	7beb      	ldrb	r3, [r5, #15]
	*(pbuffer +  15) =
 800b35e:	73e3      	strb	r3, [r4, #15]
	VL53L1_i2c_encode_uint32_t(
 800b360:	6928      	ldr	r0, [r5, #16]
 800b362:	f104 0212 	add.w	r2, r4, #18
 800b366:	2104      	movs	r1, #4
 800b368:	f7ff fbf8 	bl	800ab5c <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800b36c:	7d2b      	ldrb	r3, [r5, #20]
 800b36e:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +  22) =
 800b372:	75a3      	strb	r3, [r4, #22]
	LOG_FUNCTION_END(status);


	return status;
 800b374:	2000      	movs	r0, #0
 800b376:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800b378:	f06f 0009 	mvn.w	r0, #9
 800b37c:	4770      	bx	lr
 800b37e:	bf00      	nop

0800b380 <VL53L1_i2c_encode_dynamic_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800b380:	2911      	cmp	r1, #17
 800b382:	d93c      	bls.n	800b3fe <VL53L1_i2c_encode_dynamic_config+0x7e>
{
 800b384:	b538      	push	{r3, r4, r5, lr}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800b386:	7803      	ldrb	r3, [r0, #0]
 800b388:	f003 0303 	and.w	r3, r3, #3
 800b38c:	4615      	mov	r5, r2
	*(pbuffer +   0) =
 800b38e:	f802 3b01 	strb.w	r3, [r2], #1
 800b392:	4604      	mov	r4, r0
	VL53L1_i2c_encode_uint16_t(
 800b394:	2102      	movs	r1, #2
 800b396:	8840      	ldrh	r0, [r0, #2]
 800b398:	f7ff fba4 	bl	800aae4 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 800b39c:	88a0      	ldrh	r0, [r4, #4]
 800b39e:	1cea      	adds	r2, r5, #3
 800b3a0:	2102      	movs	r1, #2
 800b3a2:	f7ff fb9f 	bl	800aae4 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800b3a6:	79a3      	ldrb	r3, [r4, #6]
 800b3a8:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   5) =
 800b3ac:	716b      	strb	r3, [r5, #5]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800b3ae:	79e3      	ldrb	r3, [r4, #7]
 800b3b0:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer +   6) =
 800b3b4:	71ab      	strb	r3, [r5, #6]
	*(pbuffer +   7) =
		pdata->sd_config__woi_sd0;
 800b3b6:	7a23      	ldrb	r3, [r4, #8]
	*(pbuffer +   7) =
 800b3b8:	71eb      	strb	r3, [r5, #7]
	*(pbuffer +   8) =
		pdata->sd_config__woi_sd1;
 800b3ba:	7a63      	ldrb	r3, [r4, #9]
	*(pbuffer +   8) =
 800b3bc:	722b      	strb	r3, [r5, #8]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800b3be:	7aa3      	ldrb	r3, [r4, #10]
 800b3c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   9) =
 800b3c4:	726b      	strb	r3, [r5, #9]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800b3c6:	7ae3      	ldrb	r3, [r4, #11]
 800b3c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +  10) =
 800b3cc:	72ab      	strb	r3, [r5, #10]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800b3ce:	7b23      	ldrb	r3, [r4, #12]
 800b3d0:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  11) =
 800b3d4:	72eb      	strb	r3, [r5, #11]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 800b3d6:	7b63      	ldrb	r3, [r4, #13]
 800b3d8:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  12) =
 800b3dc:	732b      	strb	r3, [r5, #12]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 800b3de:	7ba3      	ldrb	r3, [r4, #14]
 800b3e0:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +  13) =
 800b3e4:	736b      	strb	r3, [r5, #13]
	*(pbuffer +  14) =
		pdata->roi_config__user_roi_centre_spad;
 800b3e6:	7be3      	ldrb	r3, [r4, #15]
	*(pbuffer +  14) =
 800b3e8:	73ab      	strb	r3, [r5, #14]
	*(pbuffer +  15) =
		pdata->roi_config__user_roi_requested_global_xy_size;
 800b3ea:	7c23      	ldrb	r3, [r4, #16]
	*(pbuffer +  15) =
 800b3ec:	73eb      	strb	r3, [r5, #15]
	*(pbuffer +  16) =
		pdata->system__sequence_config;
 800b3ee:	7c63      	ldrb	r3, [r4, #17]
	*(pbuffer +  16) =
 800b3f0:	742b      	strb	r3, [r5, #16]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 800b3f2:	7ca3      	ldrb	r3, [r4, #18]
 800b3f4:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  17) =
 800b3f8:	746b      	strb	r3, [r5, #17]
	LOG_FUNCTION_END(status);


	return status;
 800b3fa:	2000      	movs	r0, #0
 800b3fc:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800b3fe:	f06f 0009 	mvn.w	r0, #9
 800b402:	4770      	bx	lr

0800b404 <VL53L1_i2c_encode_system_control>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 800b404:	2904      	cmp	r1, #4
 800b406:	d913      	bls.n	800b430 <VL53L1_i2c_encode_system_control+0x2c>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800b408:	7803      	ldrb	r3, [r0, #0]
 800b40a:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   0) =
 800b40e:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800b410:	7843      	ldrb	r3, [r0, #1]
 800b412:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   1) =
 800b416:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800b418:	7883      	ldrb	r3, [r0, #2]
 800b41a:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   2) =
 800b41e:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800b420:	78c3      	ldrb	r3, [r0, #3]
 800b422:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   3) =
 800b426:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->system__mode_start;
 800b428:	7903      	ldrb	r3, [r0, #4]
	*(pbuffer +   4) =
 800b42a:	7113      	strb	r3, [r2, #4]
	LOG_FUNCTION_END(status);


	return status;
 800b42c:	2000      	movs	r0, #0
 800b42e:	4770      	bx	lr
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800b430:	f06f 0009 	mvn.w	r0, #9
}
 800b434:	4770      	bx	lr
 800b436:	bf00      	nop

0800b438 <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 800b438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b43a:	b083      	sub	sp, #12
		pdata->power_management__go1_power_force & 0x1;
 800b43c:	780f      	ldrb	r7, [r1, #0]
		pdata->system__stream_count_ctrl & 0x1;
 800b43e:	784e      	ldrb	r6, [r1, #1]
		pdata->firmware__enable & 0x1;
 800b440:	788d      	ldrb	r5, [r1, #2]
		pdata->system__interrupt_clear & 0x3;
 800b442:	78cc      	ldrb	r4, [r1, #3]
	*(pbuffer +   4) =
 800b444:	790a      	ldrb	r2, [r1, #4]
 800b446:	f88d 2004 	strb.w	r2, [sp, #4]
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
		status = VL53L1_WriteMulti(
 800b44a:	2305      	movs	r3, #5
		pdata->power_management__go1_power_force & 0x1;
 800b44c:	f007 0701 	and.w	r7, r7, #1
		pdata->system__stream_count_ctrl & 0x1;
 800b450:	f006 0601 	and.w	r6, r6, #1
		pdata->firmware__enable & 0x1;
 800b454:	f005 0501 	and.w	r5, r5, #1
		pdata->system__interrupt_clear & 0x3;
 800b458:	f004 0403 	and.w	r4, r4, #3
		status = VL53L1_WriteMulti(
 800b45c:	466a      	mov	r2, sp
 800b45e:	2183      	movs	r1, #131	; 0x83
	*(pbuffer +   0) =
 800b460:	f88d 7000 	strb.w	r7, [sp]
	*(pbuffer +   1) =
 800b464:	f88d 6001 	strb.w	r6, [sp, #1]
	*(pbuffer +   2) =
 800b468:	f88d 5002 	strb.w	r5, [sp, #2]
	*(pbuffer +   3) =
 800b46c:	f88d 4003 	strb.w	r4, [sp, #3]
		status = VL53L1_WriteMulti(
 800b470:	f005 ffdc 	bl	801142c <VL53L1_WriteMulti>
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
}
 800b474:	b003      	add	sp, #12
 800b476:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b478 <VL53L1_i2c_decode_system_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 800b478:	282b      	cmp	r0, #43	; 0x2b
 800b47a:	f240 8089 	bls.w	800b590 <VL53L1_i2c_decode_system_results+0x118>
{
 800b47e:	b538      	push	{r3, r4, r5, lr}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800b480:	780b      	ldrb	r3, [r1, #0]
 800b482:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->result__interrupt_status =
 800b486:	7013      	strb	r3, [r2, #0]
	pdata->result__range_status =
 800b488:	784b      	ldrb	r3, [r1, #1]
 800b48a:	7053      	strb	r3, [r2, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800b48c:	788b      	ldrb	r3, [r1, #2]
 800b48e:	f003 030f 	and.w	r3, r3, #15
	pdata->result__report_status =
 800b492:	7093      	strb	r3, [r2, #2]
	pdata->result__stream_count =
 800b494:	78cb      	ldrb	r3, [r1, #3]
 800b496:	70d3      	strb	r3, [r2, #3]
 800b498:	460d      	mov	r5, r1
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 800b49a:	2002      	movs	r0, #2
 800b49c:	3104      	adds	r1, #4
 800b49e:	4614      	mov	r4, r2
 800b4a0:	f7ff fb2e 	bl	800ab00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 800b4a4:	1da9      	adds	r1, r5, #6
	pdata->result__dss_actual_effective_spads_sd0 =
 800b4a6:	80a0      	strh	r0, [r4, #4]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 800b4a8:	2002      	movs	r0, #2
 800b4aa:	f7ff fb29 	bl	800ab00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 800b4ae:	f105 0108 	add.w	r1, r5, #8
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800b4b2:	80e0      	strh	r0, [r4, #6]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 800b4b4:	2002      	movs	r0, #2
 800b4b6:	f7ff fb23 	bl	800ab00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 800b4ba:	f105 010a 	add.w	r1, r5, #10
	pdata->result__ambient_count_rate_mcps_sd0 =
 800b4be:	8120      	strh	r0, [r4, #8]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 800b4c0:	2002      	movs	r0, #2
 800b4c2:	f7ff fb1d 	bl	800ab00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 800b4c6:	f105 010c 	add.w	r1, r5, #12
	pdata->result__sigma_sd0 =
 800b4ca:	8160      	strh	r0, [r4, #10]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 800b4cc:	2002      	movs	r0, #2
 800b4ce:	f7ff fb17 	bl	800ab00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 800b4d2:	f105 010e 	add.w	r1, r5, #14
	pdata->result__phase_sd0 =
 800b4d6:	81a0      	strh	r0, [r4, #12]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 800b4d8:	2002      	movs	r0, #2
 800b4da:	f7ff fb11 	bl	800ab00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 800b4de:	f105 0110 	add.w	r1, r5, #16
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800b4e2:	81e0      	strh	r0, [r4, #14]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 800b4e4:	2002      	movs	r0, #2
 800b4e6:	f7ff fb0b 	bl	800ab00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 800b4ea:	f105 0112 	add.w	r1, r5, #18
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800b4ee:	8220      	strh	r0, [r4, #16]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 800b4f0:	2002      	movs	r0, #2
 800b4f2:	f7ff fb05 	bl	800ab00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 800b4f6:	f105 0114 	add.w	r1, r5, #20
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800b4fa:	8260      	strh	r0, [r4, #18]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 800b4fc:	2002      	movs	r0, #2
 800b4fe:	f7ff faff 	bl	800ab00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800b502:	f105 0116 	add.w	r1, r5, #22
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800b506:	82a0      	strh	r0, [r4, #20]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800b508:	2002      	movs	r0, #2
 800b50a:	f7ff faf9 	bl	800ab00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800b50e:	f105 0118 	add.w	r1, r5, #24
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800b512:	82e0      	strh	r0, [r4, #22]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800b514:	2002      	movs	r0, #2
 800b516:	f7ff faf3 	bl	800ab00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 800b51a:	f105 011a 	add.w	r1, r5, #26
	pdata->result__dss_actual_effective_spads_sd1 =
 800b51e:	8320      	strh	r0, [r4, #24]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 800b520:	2002      	movs	r0, #2
 800b522:	f7ff faed 	bl	800ab00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 800b526:	f105 011c 	add.w	r1, r5, #28
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800b52a:	8360      	strh	r0, [r4, #26]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 800b52c:	2002      	movs	r0, #2
 800b52e:	f7ff fae7 	bl	800ab00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 800b532:	f105 011e 	add.w	r1, r5, #30
	pdata->result__ambient_count_rate_mcps_sd1 =
 800b536:	83a0      	strh	r0, [r4, #28]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 800b538:	2002      	movs	r0, #2
 800b53a:	f7ff fae1 	bl	800ab00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 800b53e:	f105 0120 	add.w	r1, r5, #32
	pdata->result__sigma_sd1 =
 800b542:	83e0      	strh	r0, [r4, #30]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 800b544:	2002      	movs	r0, #2
 800b546:	f7ff fadb 	bl	800ab00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 800b54a:	f105 0122 	add.w	r1, r5, #34	; 0x22
	pdata->result__phase_sd1 =
 800b54e:	8420      	strh	r0, [r4, #32]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 800b550:	2002      	movs	r0, #2
 800b552:	f7ff fad5 	bl	800ab00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 800b556:	f105 0124 	add.w	r1, r5, #36	; 0x24
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800b55a:	8460      	strh	r0, [r4, #34]	; 0x22
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 800b55c:	2002      	movs	r0, #2
 800b55e:	f7ff facf 	bl	800ab00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 800b562:	f105 0126 	add.w	r1, r5, #38	; 0x26
	pdata->result__spare_0_sd1 =
 800b566:	84a0      	strh	r0, [r4, #36]	; 0x24
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 800b568:	2002      	movs	r0, #2
 800b56a:	f7ff fac9 	bl	800ab00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 800b56e:	f105 0128 	add.w	r1, r5, #40	; 0x28
	pdata->result__spare_1_sd1 =
 800b572:	84e0      	strh	r0, [r4, #38]	; 0x26
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 800b574:	2002      	movs	r0, #2
 800b576:	f7ff fac3 	bl	800ab00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_2_sd1 =
 800b57a:	8520      	strh	r0, [r4, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 800b57c:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 800b580:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800b584:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800b588:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800b58c:	2000      	movs	r0, #0
 800b58e:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800b590:	f06f 0009 	mvn.w	r0, #9
 800b594:	4770      	bx	lr
 800b596:	bf00      	nop

0800b598 <VL53L1_i2c_decode_core_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 800b598:	2820      	cmp	r0, #32
 800b59a:	d935      	bls.n	800b608 <VL53L1_i2c_decode_core_results+0x70>
{
 800b59c:	b538      	push	{r3, r4, r5, lr}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 800b59e:	2004      	movs	r0, #4
 800b5a0:	4614      	mov	r4, r2
 800b5a2:	460d      	mov	r5, r1
 800b5a4:	f7ff fae8 	bl	800ab78 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 800b5a8:	1d29      	adds	r1, r5, #4
	pdata->result_core__ambient_window_events_sd0 =
 800b5aa:	6020      	str	r0, [r4, #0]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 800b5ac:	2004      	movs	r0, #4
 800b5ae:	f7ff fae3 	bl	800ab78 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 800b5b2:	f105 0108 	add.w	r1, r5, #8
	pdata->result_core__ranging_total_events_sd0 =
 800b5b6:	6060      	str	r0, [r4, #4]
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 800b5b8:	2004      	movs	r0, #4
 800b5ba:	f7ff faeb 	bl	800ab94 <VL53L1_i2c_decode_int32_t>
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 800b5be:	f105 010c 	add.w	r1, r5, #12
	pdata->result_core__signal_total_events_sd0 =
 800b5c2:	60a0      	str	r0, [r4, #8]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 800b5c4:	2004      	movs	r0, #4
 800b5c6:	f7ff fad7 	bl	800ab78 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 800b5ca:	f105 0110 	add.w	r1, r5, #16
	pdata->result_core__total_periods_elapsed_sd0 =
 800b5ce:	60e0      	str	r0, [r4, #12]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 800b5d0:	2004      	movs	r0, #4
 800b5d2:	f7ff fad1 	bl	800ab78 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 800b5d6:	f105 0114 	add.w	r1, r5, #20
	pdata->result_core__ambient_window_events_sd1 =
 800b5da:	6120      	str	r0, [r4, #16]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 800b5dc:	2004      	movs	r0, #4
 800b5de:	f7ff facb 	bl	800ab78 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 800b5e2:	f105 0118 	add.w	r1, r5, #24
	pdata->result_core__ranging_total_events_sd1 =
 800b5e6:	6160      	str	r0, [r4, #20]
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 800b5e8:	2004      	movs	r0, #4
 800b5ea:	f7ff fad3 	bl	800ab94 <VL53L1_i2c_decode_int32_t>
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 800b5ee:	f105 011c 	add.w	r1, r5, #28
	pdata->result_core__signal_total_events_sd1 =
 800b5f2:	61a0      	str	r0, [r4, #24]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 800b5f4:	2004      	movs	r0, #4
 800b5f6:	f7ff fabf 	bl	800ab78 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__total_periods_elapsed_sd1 =
 800b5fa:	61e0      	str	r0, [r4, #28]
	pdata->result_core__spare_0 =
 800b5fc:	f895 3020 	ldrb.w	r3, [r5, #32]
 800b600:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800b604:	2000      	movs	r0, #0
 800b606:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800b608:	f06f 0009 	mvn.w	r0, #9
 800b60c:	4770      	bx	lr
 800b60e:	bf00      	nop

0800b610 <VL53L1_i2c_decode_debug_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 800b610:	2837      	cmp	r0, #55	; 0x37
 800b612:	f240 80d3 	bls.w	800b7bc <VL53L1_i2c_decode_debug_results+0x1ac>
{
 800b616:	b538      	push	{r3, r4, r5, lr}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 800b618:	2002      	movs	r0, #2
 800b61a:	4614      	mov	r4, r2
 800b61c:	460d      	mov	r5, r1
 800b61e:	f7ff fa6f 	bl	800ab00 <VL53L1_i2c_decode_uint16_t>
	pdata->phasecal_result__reference_phase =
 800b622:	8020      	strh	r0, [r4, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800b624:	78ab      	ldrb	r3, [r5, #2]
 800b626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->phasecal_result__vcsel_start =
 800b62a:	70a3      	strb	r3, [r4, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800b62c:	78eb      	ldrb	r3, [r5, #3]
 800b62e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800b632:	70e3      	strb	r3, [r4, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800b634:	792b      	ldrb	r3, [r5, #4]
 800b636:	f003 0303 	and.w	r3, r3, #3
	pdata->ref_spad_char_result__ref_location =
 800b63a:	7123      	strb	r3, [r4, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 800b63c:	796b      	ldrb	r3, [r5, #5]
 800b63e:	f003 0301 	and.w	r3, r3, #1
	pdata->vhv_result__coldboot_status =
 800b642:	7163      	strb	r3, [r4, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 800b644:	79ab      	ldrb	r3, [r5, #6]
 800b646:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_result__search_result =
 800b64a:	71a3      	strb	r3, [r4, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 800b64c:	79eb      	ldrb	r3, [r5, #7]
 800b64e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_result__latest_setting =
 800b652:	71e3      	strb	r3, [r4, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 800b654:	f105 0108 	add.w	r1, r5, #8
 800b658:	2002      	movs	r0, #2
 800b65a:	f7ff fa51 	bl	800ab00 <VL53L1_i2c_decode_uint16_t>
 800b65e:	f3c0 0009 	ubfx	r0, r0, #0, #10
	pdata->result__osc_calibrate_val =
 800b662:	8120      	strh	r0, [r4, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 800b664:	7aab      	ldrb	r3, [r5, #10]
 800b666:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__powerdown_go1 =
 800b66a:	72a3      	strb	r3, [r4, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 800b66c:	7aeb      	ldrb	r3, [r5, #11]
 800b66e:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__ref_bg_ctrl =
 800b672:	72e3      	strb	r3, [r4, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 800b674:	7b2b      	ldrb	r3, [r5, #12]
 800b676:	f003 030f 	and.w	r3, r3, #15
	pdata->ana_config__regdvdd1v2_ctrl =
 800b67a:	7323      	strb	r3, [r4, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 800b67c:	7b6b      	ldrb	r3, [r5, #13]
 800b67e:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__osc_slow_ctrl =
 800b682:	7363      	strb	r3, [r4, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 800b684:	7bab      	ldrb	r3, [r5, #14]
 800b686:	f003 0301 	and.w	r3, r3, #1
	pdata->test_mode__status =
 800b68a:	73a3      	strb	r3, [r4, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 800b68c:	7beb      	ldrb	r3, [r5, #15]
 800b68e:	f003 0303 	and.w	r3, r3, #3
	pdata->firmware__system_status =
 800b692:	73e3      	strb	r3, [r4, #15]
	pdata->firmware__mode_status =
 800b694:	7c2b      	ldrb	r3, [r5, #16]
 800b696:	7423      	strb	r3, [r4, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 800b698:	7c6b      	ldrb	r3, [r5, #17]
 800b69a:	7463      	strb	r3, [r4, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 800b69c:	f105 0112 	add.w	r1, r5, #18
 800b6a0:	2002      	movs	r0, #2
 800b6a2:	f7ff fa2d 	bl	800ab00 <VL53L1_i2c_decode_uint16_t>
 800b6a6:	f3c0 000b 	ubfx	r0, r0, #0, #12
	pdata->firmware__cal_repeat_rate_counter =
 800b6aa:	8260      	strh	r0, [r4, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800b6ac:	f105 0116 	add.w	r1, r5, #22
 800b6b0:	2002      	movs	r0, #2
 800b6b2:	f7ff fa25 	bl	800ab00 <VL53L1_i2c_decode_uint16_t>
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800b6b6:	f105 0118 	add.w	r1, r5, #24
	pdata->gph__system__thresh_high =
 800b6ba:	82a0      	strh	r0, [r4, #20]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800b6bc:	2002      	movs	r0, #2
 800b6be:	f7ff fa1f 	bl	800ab00 <VL53L1_i2c_decode_uint16_t>
	pdata->gph__system__thresh_low =
 800b6c2:	82e0      	strh	r0, [r4, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 800b6c4:	7eab      	ldrb	r3, [r5, #26]
 800b6c6:	f003 0301 	and.w	r3, r3, #1
	pdata->gph__system__enable_xtalk_per_quadrant =
 800b6ca:	7623      	strb	r3, [r4, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 800b6cc:	7eeb      	ldrb	r3, [r5, #27]
 800b6ce:	f003 0307 	and.w	r3, r3, #7
	pdata->gph__spare_0 =
 800b6d2:	7663      	strb	r3, [r4, #25]
	pdata->gph__sd_config__woi_sd0 =
 800b6d4:	7f2b      	ldrb	r3, [r5, #28]
 800b6d6:	76a3      	strb	r3, [r4, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 800b6d8:	7f6b      	ldrb	r3, [r5, #29]
 800b6da:	76e3      	strb	r3, [r4, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 800b6dc:	7fab      	ldrb	r3, [r5, #30]
 800b6de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->gph__sd_config__initial_phase_sd0 =
 800b6e2:	7723      	strb	r3, [r4, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800b6e4:	7feb      	ldrb	r3, [r5, #31]
 800b6e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->gph__sd_config__initial_phase_sd1 =
 800b6ea:	7763      	strb	r3, [r4, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 800b6ec:	f895 3020 	ldrb.w	r3, [r5, #32]
 800b6f0:	f003 0303 	and.w	r3, r3, #3
	pdata->gph__sd_config__first_order_select =
 800b6f4:	77a3      	strb	r3, [r4, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 800b6f6:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800b6fa:	f003 030f 	and.w	r3, r3, #15
	pdata->gph__sd_config__quantifier =
 800b6fe:	77e3      	strb	r3, [r4, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 800b700:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800b704:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 800b708:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 800b70c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 800b710:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800b714:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 800b718:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 800b71c:	f003 0301 	and.w	r3, r3, #1
	pdata->gph__gph_id =
 800b720:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 800b724:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 800b728:	f003 0303 	and.w	r3, r3, #3
	pdata->system__interrupt_set =
 800b72c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 800b730:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
 800b734:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__enables =
 800b738:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 800b73c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800b740:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__clear =
 800b744:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 800b748:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 800b74c:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__status =
 800b750:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 800b754:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 800b758:	f003 0301 	and.w	r3, r3, #1
	pdata->mcu_to_host_bank__wr_access_en =
 800b75c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 800b760:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800b764:	f003 0301 	and.w	r3, r3, #1
	pdata->power_management__go1_reset_status =
 800b768:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 800b76c:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800b770:	f003 0303 	and.w	r3, r3, #3
	pdata->pad_startup_mode__value_ro =
 800b774:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 800b778:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800b77c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->pad_startup_mode__value_ctrl =
 800b780:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 800b784:	f105 012e 	add.w	r1, r5, #46	; 0x2e
 800b788:	2004      	movs	r0, #4
 800b78a:	f7ff f9f5 	bl	800ab78 <VL53L1_i2c_decode_uint32_t>
 800b78e:	f3c0 0011 	ubfx	r0, r0, #0, #18
	pdata->pll_period_us =
 800b792:	62e0      	str	r0, [r4, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 800b794:	f105 0132 	add.w	r1, r5, #50	; 0x32
 800b798:	2004      	movs	r0, #4
 800b79a:	f7ff f9ed 	bl	800ab78 <VL53L1_i2c_decode_uint32_t>
	pdata->interrupt_scheduler__data_out =
 800b79e:	6320      	str	r0, [r4, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 800b7a0:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
 800b7a4:	f003 0301 	and.w	r3, r3, #1
	pdata->nvm_bist__complete =
 800b7a8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 800b7ac:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
 800b7b0:	f003 0301 	and.w	r3, r3, #1
	pdata->nvm_bist__status =
 800b7b4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 800b7b8:	2000      	movs	r0, #0
 800b7ba:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800b7bc:	f06f 0009 	mvn.w	r0, #9
 800b7c0:	4770      	bx	lr
 800b7c2:	bf00      	nop

0800b7c4 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800b7c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7c8:	b08e      	sub	sp, #56	; 0x38
 800b7ca:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_ReadMulti(
 800b7cc:	2331      	movs	r3, #49	; 0x31
 800b7ce:	aa01      	add	r2, sp, #4
 800b7d0:	f240 110f 	movw	r1, #271	; 0x10f
 800b7d4:	f005 fe52 	bl	801147c <VL53L1_ReadMulti>
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800b7d8:	4605      	mov	r5, r0
 800b7da:	2800      	cmp	r0, #0
 800b7dc:	d16c      	bne.n	800b8b8 <VL53L1_get_nvm_copy_data+0xf4>
	pdata->identification__model_id =
 800b7de:	f89d 1004 	ldrb.w	r1, [sp, #4]
	pdata->identification__module_type =
 800b7e2:	f89d 2005 	ldrb.w	r2, [sp, #5]
	pdata->identification__revision_id =
 800b7e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
	pdata->identification__model_id =
 800b7ea:	7021      	strb	r1, [r4, #0]
	pdata->identification__module_type =
 800b7ec:	7062      	strb	r2, [r4, #1]
	pdata->identification__revision_id =
 800b7ee:	70a3      	strb	r3, [r4, #2]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 800b7f0:	f10d 0107 	add.w	r1, sp, #7
 800b7f4:	2002      	movs	r0, #2
 800b7f6:	f7ff f983 	bl	800ab00 <VL53L1_i2c_decode_uint16_t>
		(*(pbuffer +   6)) & 0x7;
 800b7fa:	f89d 800a 	ldrb.w	r8, [sp, #10]
		(*(pbuffer +   7)) & 0x7;
 800b7fe:	f89d c00b 	ldrb.w	ip, [sp, #11]
		(*(pbuffer +   5)) & 0x7F;
 800b802:	f89d 9009 	ldrb.w	r9, [sp, #9]
		(*(pbuffer +   8)) & 0x3F;
 800b806:	f89d e00c 	ldrb.w	lr, [sp, #12]
		(*(pbuffer +   9)) & 0x3F;
 800b80a:	f89d 700d 	ldrb.w	r7, [sp, #13]
		(*(pbuffer +  10)) & 0x1;
 800b80e:	f89d 600e 	ldrb.w	r6, [sp, #14]
		(*(pbuffer +  11)) & 0x7F;
 800b812:	f89d a00f 	ldrb.w	sl, [sp, #15]
		(*(pbuffer +  12)) & 0x1;
 800b816:	f89d 1010 	ldrb.w	r1, [sp, #16]
		(*(pbuffer +  13)) & 0x3F;
 800b81a:	f89d 2011 	ldrb.w	r2, [sp, #17]
		(*(pbuffer +  14)) & 0x3F;
 800b81e:	f89d 3012 	ldrb.w	r3, [sp, #18]
	pdata->identification__module_id =
 800b822:	80a0      	strh	r0, [r4, #4]
		(*(pbuffer +   6)) & 0x7;
 800b824:	f008 0807 	and.w	r8, r8, #7
		(*(pbuffer +   7)) & 0x7;
 800b828:	f00c 0c07 	and.w	ip, ip, #7
		(*(pbuffer +   8)) & 0x3F;
 800b82c:	f00e 0e3f 	and.w	lr, lr, #63	; 0x3f
		(*(pbuffer +   9)) & 0x3F;
 800b830:	f007 073f 	and.w	r7, r7, #63	; 0x3f
		(*(pbuffer +  10)) & 0x1;
 800b834:	f006 0601 	and.w	r6, r6, #1
		(*(pbuffer +  11)) & 0x7F;
 800b838:	f00a 007f 	and.w	r0, sl, #127	; 0x7f
		(*(pbuffer +  12)) & 0x1;
 800b83c:	f001 0101 	and.w	r1, r1, #1
		(*(pbuffer +  13)) & 0x3F;
 800b840:	f002 023f 	and.w	r2, r2, #63	; 0x3f
		(*(pbuffer +  14)) & 0x3F;
 800b844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ana_config__fast_osc__freq_set =
 800b848:	f884 8007 	strb.w	r8, [r4, #7]
	pdata->ana_config__vcsel_trim =
 800b84c:	f884 c008 	strb.w	ip, [r4, #8]
	pdata->global_config__spad_enables_rtn_0 =
 800b850:	f89d 8013 	ldrb.w	r8, [sp, #19]
	pdata->global_config__spad_enables_rtn_1 =
 800b854:	f89d c014 	ldrb.w	ip, [sp, #20]
	pdata->ana_config__vcsel_selion =
 800b858:	f884 e009 	strb.w	lr, [r4, #9]
		(*(pbuffer +   5)) & 0x7F;
 800b85c:	f009 097f 	and.w	r9, r9, #127	; 0x7f
	pdata->ana_config__vcsel_selion_max =
 800b860:	72a7      	strb	r7, [r4, #10]
	pdata->protected_laser_safety__lock_bit =
 800b862:	72e6      	strb	r6, [r4, #11]
	pdata->laser_safety__key =
 800b864:	7320      	strb	r0, [r4, #12]
	pdata->laser_safety__key_ro =
 800b866:	7361      	strb	r1, [r4, #13]
	pdata->laser_safety__clip =
 800b868:	73a2      	strb	r2, [r4, #14]
	pdata->laser_safety__mult =
 800b86a:	73e3      	strb	r3, [r4, #15]
	pdata->global_config__spad_enables_rtn_2 =
 800b86c:	f8dd e019 	ldr.w	lr, [sp, #25]
 800b870:	f8dd 701d 	ldr.w	r7, [sp, #29]
 800b874:	f8dd 6021 	ldr.w	r6, [sp, #33]	; 0x21
 800b878:	f8dd 0025 	ldr.w	r0, [sp, #37]	; 0x25
 800b87c:	f8dd 1029 	ldr.w	r1, [sp, #41]	; 0x29
 800b880:	f8dd 202d 	ldr.w	r2, [sp, #45]	; 0x2d
 800b884:	f8dd 3031 	ldr.w	r3, [sp, #49]	; 0x31
	pdata->ana_config__fast_osc__trim_max =
 800b888:	f884 9006 	strb.w	r9, [r4, #6]
	pdata->global_config__spad_enables_rtn_0 =
 800b88c:	f884 8010 	strb.w	r8, [r4, #16]
	pdata->global_config__spad_enables_rtn_1 =
 800b890:	f884 c011 	strb.w	ip, [r4, #17]
	pdata->global_config__spad_enables_rtn_2 =
 800b894:	f8dd c015 	ldr.w	ip, [sp, #21]
 800b898:	f8c4 c012 	str.w	ip, [r4, #18]
 800b89c:	f8c4 e016 	str.w	lr, [r4, #22]
 800b8a0:	f8c4 701a 	str.w	r7, [r4, #26]
 800b8a4:	f8c4 601e 	str.w	r6, [r4, #30]
 800b8a8:	f8c4 0022 	str.w	r0, [r4, #34]	; 0x22
 800b8ac:	f8c4 1026 	str.w	r1, [r4, #38]	; 0x26
 800b8b0:	f8c4 202a 	str.w	r2, [r4, #42]	; 0x2a
 800b8b4:	f8c4 302e 	str.w	r3, [r4, #46]	; 0x2e
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 800b8b8:	4628      	mov	r0, r5
 800b8ba:	b00e      	add	sp, #56	; 0x38
 800b8bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b8c0 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 800b8c0:	b570      	push	{r4, r5, r6, lr}
 800b8c2:	460e      	mov	r6, r1
 800b8c4:	b082      	sub	sp, #8
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 800b8c6:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
{
 800b8ca:	4605      	mov	r5, r0
	status = VL53L1_WaitUs(
 800b8cc:	f005 fe3c 	bl	8011548 <VL53L1_WaitUs>
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 800b8d0:	4604      	mov	r4, r0
 800b8d2:	b110      	cbz	r0, 800b8da <VL53L1_poll_for_boot_completion+0x1a>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);

	LOG_FUNCTION_END(status);

	return status;
}
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	b002      	add	sp, #8
 800b8d8:	bd70      	pop	{r4, r5, r6, pc}
		status =
 800b8da:	2301      	movs	r3, #1
 800b8dc:	4631      	mov	r1, r6
 800b8de:	9301      	str	r3, [sp, #4]
 800b8e0:	9300      	str	r3, [sp, #0]
 800b8e2:	22e5      	movs	r2, #229	; 0xe5
 800b8e4:	4628      	mov	r0, r5
 800b8e6:	f005 fe3d 	bl	8011564 <VL53L1_WaitValueMaskEx>
	if (status == VL53L1_ERROR_NONE)
 800b8ea:	4604      	mov	r4, r0
 800b8ec:	2800      	cmp	r0, #0
 800b8ee:	d1f1      	bne.n	800b8d4 <VL53L1_poll_for_boot_completion+0x14>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 800b8f0:	4628      	mov	r0, r5
 800b8f2:	2103      	movs	r1, #3
 800b8f4:	f7fe ffde 	bl	800a8b4 <VL53L1_init_ll_driver_state>
}
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	b002      	add	sp, #8
 800b8fc:	bd70      	pop	{r4, r5, r6, pc}
 800b8fe:	bf00      	nop

0800b900 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b900:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800b902:	f001 fdbd 	bl	800d480 <vTaskStartScheduler>
  
  return osOK;
}
 800b906:	2000      	movs	r0, #0
 800b908:	bd08      	pop	{r3, pc}
 800b90a:	bf00      	nop

0800b90c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b90c:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b90e:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 800b912:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 800b914:	2c84      	cmp	r4, #132	; 0x84
{
 800b916:	4602      	mov	r2, r0
    fpriority += (priority - osPriorityIdle);
 800b918:	bf14      	ite	ne
 800b91a:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b91c:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b91e:	ad03      	add	r5, sp, #12
{
 800b920:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b922:	6840      	ldr	r0, [r0, #4]
 800b924:	6811      	ldr	r1, [r2, #0]
 800b926:	8a12      	ldrh	r2, [r2, #16]
 800b928:	e88d 0030 	stmia.w	sp, {r4, r5}
 800b92c:	f001 fcb8 	bl	800d2a0 <xTaskCreate>
 800b930:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b932:	bf0c      	ite	eq
 800b934:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 800b936:	2000      	movne	r0, #0
}
 800b938:	b005      	add	sp, #20
 800b93a:	bd30      	pop	{r4, r5, pc}

0800b93c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b93c:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b93e:	2800      	cmp	r0, #0
 800b940:	bf08      	it	eq
 800b942:	2001      	moveq	r0, #1
 800b944:	f001 ff24 	bl	800d790 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b948:	2000      	movs	r0, #0
 800b94a:	bd08      	pop	{r3, pc}

0800b94c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800b94c:	b500      	push	{lr}
 800b94e:	b083      	sub	sp, #12
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
                      (StaticTimer_t *)timer_def->controlblock);  
#else
  return xTimerCreate((const char *)"",
 800b950:	6803      	ldr	r3, [r0, #0]
 800b952:	9300      	str	r3, [sp, #0]
 800b954:	4613      	mov	r3, r2
 800b956:	f1a1 0201 	sub.w	r2, r1, #1
 800b95a:	fab2 f282 	clz	r2, r2
 800b95e:	0952      	lsrs	r2, r2, #5
 800b960:	2101      	movs	r1, #1
 800b962:	4803      	ldr	r0, [pc, #12]	; (800b970 <osTimerCreate+0x24>)
 800b964:	f002 fa90 	bl	800de88 <xTimerCreate>
#endif

#else 
	return NULL;
#endif
}
 800b968:	b003      	add	sp, #12
 800b96a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b96e:	bf00      	nop
 800b970:	08013be8 	.word	0x08013be8

0800b974 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 800b974:	b510      	push	{r4, lr}
 800b976:	b084      	sub	sp, #16
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800b978:	2400      	movs	r4, #0
  TickType_t ticks = millisec / portTICK_PERIOD_MS;

  if (ticks == 0)
    ticks = 1;
 800b97a:	42a1      	cmp	r1, r4
 800b97c:	bf14      	ite	ne
 800b97e:	460a      	movne	r2, r1
 800b980:	2201      	moveq	r2, #1
  portBASE_TYPE taskWoken = pdFALSE;
 800b982:	9403      	str	r4, [sp, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b984:	f3ef 8305 	mrs	r3, IPSR
    
  if (inHandlerMode()) 
 800b988:	b14b      	cbz	r3, 800b99e <osTimerStart+0x2a>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800b98a:	9400      	str	r4, [sp, #0]
 800b98c:	ab03      	add	r3, sp, #12
 800b98e:	2109      	movs	r1, #9
 800b990:	f002 fad2 	bl	800df38 <xTimerGenericCommand>
 800b994:	2801      	cmp	r0, #1
 800b996:	d00b      	beq.n	800b9b0 <osTimerStart+0x3c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
      result = osErrorOS;
 800b998:	20ff      	movs	r0, #255	; 0xff

#else 
  result = osErrorOS;
#endif
  return result;
}
 800b99a:	b004      	add	sp, #16
 800b99c:	bd10      	pop	{r4, pc}
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800b99e:	9300      	str	r3, [sp, #0]
 800b9a0:	2104      	movs	r1, #4
 800b9a2:	f002 fac9 	bl	800df38 <xTimerGenericCommand>
 800b9a6:	2801      	cmp	r0, #1
 800b9a8:	d1f6      	bne.n	800b998 <osTimerStart+0x24>
  osStatus result = osOK;
 800b9aa:	2000      	movs	r0, #0
}
 800b9ac:	b004      	add	sp, #16
 800b9ae:	bd10      	pop	{r4, pc}
      portEND_SWITCHING_ISR(taskWoken);     
 800b9b0:	9b03      	ldr	r3, [sp, #12]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d0f9      	beq.n	800b9aa <osTimerStart+0x36>
 800b9b6:	4b05      	ldr	r3, [pc, #20]	; (800b9cc <osTimerStart+0x58>)
 800b9b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9bc:	601a      	str	r2, [r3, #0]
 800b9be:	f3bf 8f4f 	dsb	sy
 800b9c2:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 800b9c6:	4620      	mov	r0, r4
 800b9c8:	e7e7      	b.n	800b99a <osTimerStart+0x26>
 800b9ca:	bf00      	nop
 800b9cc:	e000ed04 	.word	0xe000ed04

0800b9d0 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 800b9d0:	b510      	push	{r4, lr}
 800b9d2:	b084      	sub	sp, #16
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800b9d4:	2400      	movs	r4, #0
 800b9d6:	9403      	str	r4, [sp, #12]
 800b9d8:	f3ef 8305 	mrs	r3, IPSR

  if (inHandlerMode()) {
 800b9dc:	b153      	cbz	r3, 800b9f4 <osTimerStop+0x24>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 800b9de:	9400      	str	r4, [sp, #0]
 800b9e0:	ab03      	add	r3, sp, #12
 800b9e2:	4622      	mov	r2, r4
 800b9e4:	2108      	movs	r1, #8
 800b9e6:	f002 faa7 	bl	800df38 <xTimerGenericCommand>
 800b9ea:	2801      	cmp	r0, #1
 800b9ec:	d00c      	beq.n	800ba08 <osTimerStop+0x38>
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
      result = osErrorOS;
 800b9ee:	20ff      	movs	r0, #255	; 0xff
  }
#else 
  result = osErrorOS;
#endif 
  return result;
}
 800b9f0:	b004      	add	sp, #16
 800b9f2:	bd10      	pop	{r4, pc}
    if (xTimerStop(timer_id, 0) != pdPASS) {
 800b9f4:	9300      	str	r3, [sp, #0]
 800b9f6:	461a      	mov	r2, r3
 800b9f8:	2103      	movs	r1, #3
 800b9fa:	f002 fa9d 	bl	800df38 <xTimerGenericCommand>
 800b9fe:	2801      	cmp	r0, #1
 800ba00:	d1f5      	bne.n	800b9ee <osTimerStop+0x1e>
  osStatus result = osOK;
 800ba02:	2000      	movs	r0, #0
}
 800ba04:	b004      	add	sp, #16
 800ba06:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800ba08:	9b03      	ldr	r3, [sp, #12]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d0f9      	beq.n	800ba02 <osTimerStop+0x32>
 800ba0e:	4b05      	ldr	r3, [pc, #20]	; (800ba24 <osTimerStop+0x54>)
 800ba10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba14:	601a      	str	r2, [r3, #0]
 800ba16:	f3bf 8f4f 	dsb	sy
 800ba1a:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 800ba1e:	4620      	mov	r0, r4
 800ba20:	e7e6      	b.n	800b9f0 <osTimerStop+0x20>
 800ba22:	bf00      	nop
 800ba24:	e000ed04 	.word	0xe000ed04

0800ba28 <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800ba28:	2001      	movs	r0, #1
 800ba2a:	f000 bc7d 	b.w	800c328 <xQueueCreateMutex>
 800ba2e:	bf00      	nop

0800ba30 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800ba30:	b510      	push	{r4, lr}
 800ba32:	b082      	sub	sp, #8
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ba34:	2400      	movs	r4, #0
 800ba36:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 800ba38:	b1d8      	cbz	r0, 800ba72 <osMutexWait+0x42>
 800ba3a:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800ba3e:	b933      	cbnz	r3, 800ba4e <osMutexWait+0x1e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800ba40:	f001 f974 	bl	800cd2c <xQueueSemaphoreTake>
 800ba44:	2801      	cmp	r0, #1
 800ba46:	d017      	beq.n	800ba78 <osMutexWait+0x48>
      return osErrorOS;
 800ba48:	20ff      	movs	r0, #255	; 0xff
    return osErrorOS;
  }
  
  return osOK;
}
 800ba4a:	b002      	add	sp, #8
 800ba4c:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800ba4e:	aa01      	add	r2, sp, #4
 800ba50:	4621      	mov	r1, r4
 800ba52:	f001 fac7 	bl	800cfe4 <xQueueReceiveFromISR>
 800ba56:	2801      	cmp	r0, #1
 800ba58:	d1f6      	bne.n	800ba48 <osMutexWait+0x18>
	portEND_SWITCHING_ISR(taskWoken);
 800ba5a:	9b01      	ldr	r3, [sp, #4]
 800ba5c:	b163      	cbz	r3, 800ba78 <osMutexWait+0x48>
 800ba5e:	4b07      	ldr	r3, [pc, #28]	; (800ba7c <osMutexWait+0x4c>)
 800ba60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba64:	601a      	str	r2, [r3, #0]
 800ba66:	f3bf 8f4f 	dsb	sy
 800ba6a:	f3bf 8f6f 	isb	sy
  return osOK;
 800ba6e:	4620      	mov	r0, r4
 800ba70:	e7eb      	b.n	800ba4a <osMutexWait+0x1a>
    return osErrorParameter;
 800ba72:	2080      	movs	r0, #128	; 0x80
}
 800ba74:	b002      	add	sp, #8
 800ba76:	bd10      	pop	{r4, pc}
  return osOK;
 800ba78:	2000      	movs	r0, #0
 800ba7a:	e7e6      	b.n	800ba4a <osMutexWait+0x1a>
 800ba7c:	e000ed04 	.word	0xe000ed04

0800ba80 <osMutexRelease>:
 800ba80:	b510      	push	{r4, lr}
 800ba82:	b082      	sub	sp, #8
 800ba84:	2400      	movs	r4, #0
 800ba86:	9401      	str	r4, [sp, #4]
 800ba88:	f3ef 8305 	mrs	r3, IPSR
 800ba8c:	b13b      	cbz	r3, 800ba9e <osMutexRelease+0x1e>
 800ba8e:	a901      	add	r1, sp, #4
 800ba90:	f000 ff70 	bl	800c974 <xQueueGiveFromISR>
 800ba94:	2801      	cmp	r0, #1
 800ba96:	d00b      	beq.n	800bab0 <osMutexRelease+0x30>
 800ba98:	20ff      	movs	r0, #255	; 0xff
 800ba9a:	b002      	add	sp, #8
 800ba9c:	bd10      	pop	{r4, pc}
 800ba9e:	461a      	mov	r2, r3
 800baa0:	4619      	mov	r1, r3
 800baa2:	f000 fdad 	bl	800c600 <xQueueGenericSend>
 800baa6:	2801      	cmp	r0, #1
 800baa8:	d1f6      	bne.n	800ba98 <osMutexRelease+0x18>
 800baaa:	2000      	movs	r0, #0
 800baac:	b002      	add	sp, #8
 800baae:	bd10      	pop	{r4, pc}
 800bab0:	9b01      	ldr	r3, [sp, #4]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d0f9      	beq.n	800baaa <osMutexRelease+0x2a>
 800bab6:	4b05      	ldr	r3, [pc, #20]	; (800bacc <osMutexRelease+0x4c>)
 800bab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800babc:	601a      	str	r2, [r3, #0]
 800babe:	f3bf 8f4f 	dsb	sy
 800bac2:	f3bf 8f6f 	isb	sy
 800bac6:	4620      	mov	r0, r4
 800bac8:	e7e7      	b.n	800ba9a <osMutexRelease+0x1a>
 800baca:	bf00      	nop
 800bacc:	e000ed04 	.word	0xe000ed04

0800bad0 <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800bad0:	2901      	cmp	r1, #1
{ 
 800bad2:	4608      	mov	r0, r1
  if (count == 1) {
 800bad4:	d001      	beq.n	800bada <osSemaphoreCreate+0xa>
    vSemaphoreCreateBinary(sema);
    return sema;
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 800bad6:	f000 bd75 	b.w	800c5c4 <xQueueCreateCountingSemaphore>
{ 
 800bada:	b510      	push	{r4, lr}
    vSemaphoreCreateBinary(sema);
 800badc:	2203      	movs	r2, #3
 800bade:	2100      	movs	r1, #0
 800bae0:	f000 fbe6 	bl	800c2b0 <xQueueGenericCreate>
 800bae4:	4604      	mov	r4, r0
 800bae6:	b120      	cbz	r0, 800baf2 <osSemaphoreCreate+0x22>
 800bae8:	2300      	movs	r3, #0
 800baea:	461a      	mov	r2, r3
 800baec:	4619      	mov	r1, r3
 800baee:	f000 fd87 	bl	800c600 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 800baf2:	4620      	mov	r0, r4
 800baf4:	bd10      	pop	{r4, pc}
 800baf6:	bf00      	nop

0800baf8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800baf8:	b510      	push	{r4, lr}
 800bafa:	b082      	sub	sp, #8
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800bafc:	2400      	movs	r4, #0
 800bafe:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800bb00:	b1d8      	cbz	r0, 800bb3a <osSemaphoreWait+0x42>
 800bb02:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800bb06:	b933      	cbnz	r3, 800bb16 <osSemaphoreWait+0x1e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800bb08:	f001 f910 	bl	800cd2c <xQueueSemaphoreTake>
 800bb0c:	2801      	cmp	r0, #1
 800bb0e:	d017      	beq.n	800bb40 <osSemaphoreWait+0x48>
      return osErrorOS;
 800bb10:	20ff      	movs	r0, #255	; 0xff
    return osErrorOS;
  }
  
  return osOK;
}
 800bb12:	b002      	add	sp, #8
 800bb14:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bb16:	aa01      	add	r2, sp, #4
 800bb18:	4621      	mov	r1, r4
 800bb1a:	f001 fa63 	bl	800cfe4 <xQueueReceiveFromISR>
 800bb1e:	2801      	cmp	r0, #1
 800bb20:	d1f6      	bne.n	800bb10 <osSemaphoreWait+0x18>
	portEND_SWITCHING_ISR(taskWoken);
 800bb22:	9b01      	ldr	r3, [sp, #4]
 800bb24:	b163      	cbz	r3, 800bb40 <osSemaphoreWait+0x48>
 800bb26:	4b07      	ldr	r3, [pc, #28]	; (800bb44 <osSemaphoreWait+0x4c>)
 800bb28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb2c:	601a      	str	r2, [r3, #0]
 800bb2e:	f3bf 8f4f 	dsb	sy
 800bb32:	f3bf 8f6f 	isb	sy
  return osOK;
 800bb36:	4620      	mov	r0, r4
 800bb38:	e7eb      	b.n	800bb12 <osSemaphoreWait+0x1a>
    return osErrorParameter;
 800bb3a:	2080      	movs	r0, #128	; 0x80
}
 800bb3c:	b002      	add	sp, #8
 800bb3e:	bd10      	pop	{r4, pc}
  return osOK;
 800bb40:	2000      	movs	r0, #0
 800bb42:	e7e6      	b.n	800bb12 <osSemaphoreWait+0x1a>
 800bb44:	e000ed04 	.word	0xe000ed04

0800bb48 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800bb48:	b510      	push	{r4, lr}
 800bb4a:	b082      	sub	sp, #8
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800bb4c:	2400      	movs	r4, #0
 800bb4e:	9401      	str	r4, [sp, #4]
 800bb50:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 800bb54:	b13b      	cbz	r3, 800bb66 <osSemaphoreRelease+0x1e>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bb56:	a901      	add	r1, sp, #4
 800bb58:	f000 ff0c 	bl	800c974 <xQueueGiveFromISR>
 800bb5c:	2801      	cmp	r0, #1
 800bb5e:	d00b      	beq.n	800bb78 <osSemaphoreRelease+0x30>
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
      result = osErrorOS;
 800bb60:	20ff      	movs	r0, #255	; 0xff
    }
  }
  
  return result;
}
 800bb62:	b002      	add	sp, #8
 800bb64:	bd10      	pop	{r4, pc}
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800bb66:	461a      	mov	r2, r3
 800bb68:	4619      	mov	r1, r3
 800bb6a:	f000 fd49 	bl	800c600 <xQueueGenericSend>
 800bb6e:	2801      	cmp	r0, #1
 800bb70:	d1f6      	bne.n	800bb60 <osSemaphoreRelease+0x18>
  osStatus result = osOK;
 800bb72:	2000      	movs	r0, #0
}
 800bb74:	b002      	add	sp, #8
 800bb76:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800bb78:	9b01      	ldr	r3, [sp, #4]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d0f9      	beq.n	800bb72 <osSemaphoreRelease+0x2a>
 800bb7e:	4b05      	ldr	r3, [pc, #20]	; (800bb94 <osSemaphoreRelease+0x4c>)
 800bb80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb84:	601a      	str	r2, [r3, #0]
 800bb86:	f3bf 8f4f 	dsb	sy
 800bb8a:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 800bb8e:	4620      	mov	r0, r4
 800bb90:	e7e7      	b.n	800bb62 <osSemaphoreRelease+0x1a>
 800bb92:	bf00      	nop
 800bb94:	e000ed04 	.word	0xe000ed04

0800bb98 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb98:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bb9c:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bba0:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bba2:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bba4:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bba6:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bba8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbaa:	6103      	str	r3, [r0, #16]
 800bbac:	4770      	bx	lr
 800bbae:	bf00      	nop

0800bbb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	6103      	str	r3, [r0, #16]
 800bbb4:	4770      	bx	lr
 800bbb6:	bf00      	nop

0800bbb8 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800bbb8:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800bbba:	6802      	ldr	r2, [r0, #0]
{
 800bbbc:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bbbe:	689c      	ldr	r4, [r3, #8]
 800bbc0:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bbc2:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800bbc4:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800bbc6:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bbc8:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bbca:	6099      	str	r1, [r3, #8]
}
 800bbcc:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pvContainer = ( void * ) pxList;
 800bbd0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800bbd2:	6002      	str	r2, [r0, #0]
}
 800bbd4:	4770      	bx	lr
 800bbd6:	bf00      	nop

0800bbd8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bbd8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bbda:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bbdc:	1c6b      	adds	r3, r5, #1
 800bbde:	d011      	beq.n	800bc04 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbe0:	f100 0208 	add.w	r2, r0, #8
 800bbe4:	e000      	b.n	800bbe8 <vListInsert+0x10>
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	6853      	ldr	r3, [r2, #4]
 800bbea:	681c      	ldr	r4, [r3, #0]
 800bbec:	42a5      	cmp	r5, r4
 800bbee:	d2fa      	bcs.n	800bbe6 <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800bbf0:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800bbf2:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800bbf4:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bbf6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bbf8:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800bbfa:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800bbfc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800bbfe:	6004      	str	r4, [r0, #0]
}
 800bc00:	bc30      	pop	{r4, r5}
 800bc02:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800bc04:	6902      	ldr	r2, [r0, #16]
 800bc06:	6853      	ldr	r3, [r2, #4]
 800bc08:	e7f2      	b.n	800bbf0 <vListInsert+0x18>
 800bc0a:	bf00      	nop

0800bc0c <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bc0c:	6842      	ldr	r2, [r0, #4]
 800bc0e:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800bc10:	6903      	ldr	r3, [r0, #16]
{
 800bc12:	b410      	push	{r4}
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bc14:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bc16:	6881      	ldr	r1, [r0, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bc18:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bc1a:	604a      	str	r2, [r1, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 800bc1c:	681a      	ldr	r2, [r3, #0]
	if( pxList->pxIndex == pxItemToRemove )
 800bc1e:	42a0      	cmp	r0, r4
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bc20:	bf08      	it	eq
 800bc22:	6059      	streq	r1, [r3, #4]
	( pxList->uxNumberOfItems )--;
 800bc24:	3a01      	subs	r2, #1
	pxItemToRemove->pvContainer = NULL;
 800bc26:	2100      	movs	r1, #0
 800bc28:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800bc2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bc2c:	6818      	ldr	r0, [r3, #0]
}
 800bc2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc32:	4770      	bx	lr

0800bc34 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bc34:	4b0e      	ldr	r3, [pc, #56]	; (800bc70 <prvTaskExitError+0x3c>)
 800bc36:	681b      	ldr	r3, [r3, #0]
{
 800bc38:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800bc3a:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 800bc3c:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 800bc3e:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800bc40:	d008      	beq.n	800bc54 <prvTaskExitError+0x20>
/*-----------------------------------------------------------*/
portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bc42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc46:	f383 8811 	msr	BASEPRI, r3
 800bc4a:	f3bf 8f6f 	isb	sy
 800bc4e:	f3bf 8f4f 	dsb	sy
 800bc52:	e7fe      	b.n	800bc52 <prvTaskExitError+0x1e>
 800bc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc58:	f383 8811 	msr	BASEPRI, r3
 800bc5c:	f3bf 8f6f 	isb	sy
 800bc60:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bc64:	9b01      	ldr	r3, [sp, #4]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d0fc      	beq.n	800bc64 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bc6a:	b002      	add	sp, #8
 800bc6c:	4770      	bx	lr
 800bc6e:	bf00      	nop
 800bc70:	20000020 	.word	0x20000020

0800bc74 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bc74:	4808      	ldr	r0, [pc, #32]	; (800bc98 <prvPortStartFirstTask+0x24>)
 800bc76:	6800      	ldr	r0, [r0, #0]
 800bc78:	6800      	ldr	r0, [r0, #0]
 800bc7a:	f380 8808 	msr	MSP, r0
 800bc7e:	f04f 0000 	mov.w	r0, #0
 800bc82:	f380 8814 	msr	CONTROL, r0
 800bc86:	b662      	cpsie	i
 800bc88:	b661      	cpsie	f
 800bc8a:	f3bf 8f4f 	dsb	sy
 800bc8e:	f3bf 8f6f 	isb	sy
 800bc92:	df00      	svc	0
 800bc94:	bf00      	nop
 800bc96:	0000      	.short	0x0000
 800bc98:	e000ed08 	.word	0xe000ed08

0800bc9c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bc9c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bcac <vPortEnableVFP+0x10>
 800bca0:	6801      	ldr	r1, [r0, #0]
 800bca2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bca6:	6001      	str	r1, [r0, #0]
 800bca8:	4770      	bx	lr
 800bcaa:	0000      	.short	0x0000
 800bcac:	e000ed88 	.word	0xe000ed88

0800bcb0 <pxPortInitialiseStack>:
{
 800bcb0:	b430      	push	{r4, r5}
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bcb2:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bcb6:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bcba:	4c07      	ldr	r4, [pc, #28]	; (800bcd8 <pxPortInitialiseStack+0x28>)
 800bcbc:	f840 4c0c 	str.w	r4, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bcc0:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bcc4:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bcc8:	e900 0022 	stmdb	r0, {r1, r5}
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bccc:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800bcd0:	bc30      	pop	{r4, r5}
 800bcd2:	3844      	subs	r0, #68	; 0x44
 800bcd4:	4770      	bx	lr
 800bcd6:	bf00      	nop
 800bcd8:	0800bc35 	.word	0x0800bc35
 800bcdc:	00000000 	.word	0x00000000

0800bce0 <SVC_Handler>:
	__asm volatile (
 800bce0:	4b07      	ldr	r3, [pc, #28]	; (800bd00 <pxCurrentTCBConst2>)
 800bce2:	6819      	ldr	r1, [r3, #0]
 800bce4:	6808      	ldr	r0, [r1, #0]
 800bce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcea:	f380 8809 	msr	PSP, r0
 800bcee:	f3bf 8f6f 	isb	sy
 800bcf2:	f04f 0000 	mov.w	r0, #0
 800bcf6:	f380 8811 	msr	BASEPRI, r0
 800bcfa:	4770      	bx	lr
 800bcfc:	f3af 8000 	nop.w

0800bd00 <pxCurrentTCBConst2>:
 800bd00:	20004f14 	.word	0x20004f14

0800bd04 <vPortEnterCritical>:
 800bd04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd08:	f383 8811 	msr	BASEPRI, r3
 800bd0c:	f3bf 8f6f 	isb	sy
 800bd10:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800bd14:	4a0a      	ldr	r2, [pc, #40]	; (800bd40 <vPortEnterCritical+0x3c>)
 800bd16:	6813      	ldr	r3, [r2, #0]
 800bd18:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800bd1a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800bd1c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800bd1e:	d000      	beq.n	800bd22 <vPortEnterCritical+0x1e>
 800bd20:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bd22:	4b08      	ldr	r3, [pc, #32]	; (800bd44 <vPortEnterCritical+0x40>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bd2a:	d0f9      	beq.n	800bd20 <vPortEnterCritical+0x1c>
 800bd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd30:	f383 8811 	msr	BASEPRI, r3
 800bd34:	f3bf 8f6f 	isb	sy
 800bd38:	f3bf 8f4f 	dsb	sy
 800bd3c:	e7fe      	b.n	800bd3c <vPortEnterCritical+0x38>
 800bd3e:	bf00      	nop
 800bd40:	20000020 	.word	0x20000020
 800bd44:	e000ed04 	.word	0xe000ed04

0800bd48 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800bd48:	4a08      	ldr	r2, [pc, #32]	; (800bd6c <vPortExitCritical+0x24>)
 800bd4a:	6813      	ldr	r3, [r2, #0]
 800bd4c:	b943      	cbnz	r3, 800bd60 <vPortExitCritical+0x18>
 800bd4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd52:	f383 8811 	msr	BASEPRI, r3
 800bd56:	f3bf 8f6f 	isb	sy
 800bd5a:	f3bf 8f4f 	dsb	sy
 800bd5e:	e7fe      	b.n	800bd5e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800bd60:	3b01      	subs	r3, #1
 800bd62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bd64:	b90b      	cbnz	r3, 800bd6a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bd66:	f383 8811 	msr	BASEPRI, r3
 800bd6a:	4770      	bx	lr
 800bd6c:	20000020 	.word	0x20000020

0800bd70 <PendSV_Handler>:
	__asm volatile
 800bd70:	f3ef 8009 	mrs	r0, PSP
 800bd74:	f3bf 8f6f 	isb	sy
 800bd78:	4b15      	ldr	r3, [pc, #84]	; (800bdd0 <pxCurrentTCBConst>)
 800bd7a:	681a      	ldr	r2, [r3, #0]
 800bd7c:	f01e 0f10 	tst.w	lr, #16
 800bd80:	bf08      	it	eq
 800bd82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bd86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd8a:	6010      	str	r0, [r2, #0]
 800bd8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bd90:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bd94:	f380 8811 	msr	BASEPRI, r0
 800bd98:	f3bf 8f4f 	dsb	sy
 800bd9c:	f3bf 8f6f 	isb	sy
 800bda0:	f001 fd1c 	bl	800d7dc <vTaskSwitchContext>
 800bda4:	f04f 0000 	mov.w	r0, #0
 800bda8:	f380 8811 	msr	BASEPRI, r0
 800bdac:	bc09      	pop	{r0, r3}
 800bdae:	6819      	ldr	r1, [r3, #0]
 800bdb0:	6808      	ldr	r0, [r1, #0]
 800bdb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdb6:	f01e 0f10 	tst.w	lr, #16
 800bdba:	bf08      	it	eq
 800bdbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bdc0:	f380 8809 	msr	PSP, r0
 800bdc4:	f3bf 8f6f 	isb	sy
 800bdc8:	4770      	bx	lr
 800bdca:	bf00      	nop
 800bdcc:	f3af 8000 	nop.w

0800bdd0 <pxCurrentTCBConst>:
 800bdd0:	20004f14 	.word	0x20004f14

0800bdd4 <SysTick_Handler>:
{
 800bdd4:	b508      	push	{r3, lr}
	__asm volatile
 800bdd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdda:	f383 8811 	msr	BASEPRI, r3
 800bdde:	f3bf 8f6f 	isb	sy
 800bde2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800bde6:	f001 fb99 	bl	800d51c <xTaskIncrementTick>
 800bdea:	b118      	cbz	r0, 800bdf4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bdec:	4b03      	ldr	r3, [pc, #12]	; (800bdfc <SysTick_Handler+0x28>)
 800bdee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdf2:	601a      	str	r2, [r3, #0]
	__asm volatile
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	f383 8811 	msr	BASEPRI, r3
 800bdfa:	bd08      	pop	{r3, pc}
 800bdfc:	e000ed04 	.word	0xe000ed04

0800be00 <vPortSetupTimerInterrupt>:
{
 800be00:	b430      	push	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800be02:	4a09      	ldr	r2, [pc, #36]	; (800be28 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800be04:	4d09      	ldr	r5, [pc, #36]	; (800be2c <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800be06:	4b0a      	ldr	r3, [pc, #40]	; (800be30 <vPortSetupTimerInterrupt+0x30>)
 800be08:	4c0a      	ldr	r4, [pc, #40]	; (800be34 <vPortSetupTimerInterrupt+0x34>)
 800be0a:	480b      	ldr	r0, [pc, #44]	; (800be38 <vPortSetupTimerInterrupt+0x38>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800be0c:	2100      	movs	r1, #0
 800be0e:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800be10:	6029      	str	r1, [r5, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	fba4 1303 	umull	r1, r3, r4, r3
 800be18:	099b      	lsrs	r3, r3, #6
 800be1a:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800be1c:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800be1e:	6003      	str	r3, [r0, #0]
}
 800be20:	bc30      	pop	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800be22:	6011      	str	r1, [r2, #0]
}
 800be24:	4770      	bx	lr
 800be26:	bf00      	nop
 800be28:	e000e010 	.word	0xe000e010
 800be2c:	e000e018 	.word	0xe000e018
 800be30:	2000003c 	.word	0x2000003c
 800be34:	10624dd3 	.word	0x10624dd3
 800be38:	e000e014 	.word	0xe000e014

0800be3c <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800be3c:	4b3a      	ldr	r3, [pc, #232]	; (800bf28 <xPortStartScheduler+0xec>)
 800be3e:	4a3b      	ldr	r2, [pc, #236]	; (800bf2c <xPortStartScheduler+0xf0>)
 800be40:	6819      	ldr	r1, [r3, #0]
 800be42:	4291      	cmp	r1, r2
 800be44:	d038      	beq.n	800beb8 <xPortStartScheduler+0x7c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	4b39      	ldr	r3, [pc, #228]	; (800bf30 <xPortStartScheduler+0xf4>)
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d03d      	beq.n	800beca <xPortStartScheduler+0x8e>
{
 800be4e:	b510      	push	{r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800be50:	4b38      	ldr	r3, [pc, #224]	; (800bf34 <xPortStartScheduler+0xf8>)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800be52:	4839      	ldr	r0, [pc, #228]	; (800bf38 <xPortStartScheduler+0xfc>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800be54:	781a      	ldrb	r2, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800be56:	4c39      	ldr	r4, [pc, #228]	; (800bf3c <xPortStartScheduler+0x100>)
{
 800be58:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800be5a:	b2d2      	uxtb	r2, r2
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800be5c:	21ff      	movs	r1, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800be5e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800be60:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800be62:	781b      	ldrb	r3, [r3, #0]
 800be64:	b2db      	uxtb	r3, r3
 800be66:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800be6a:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be6e:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800be72:	2107      	movs	r1, #7
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800be74:	f003 0350 	and.w	r3, r3, #80	; 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800be78:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be7a:	0611      	lsls	r1, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800be7c:	7023      	strb	r3, [r4, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be7e:	bf48      	it	mi
 800be80:	2306      	movmi	r3, #6
 800be82:	d401      	bmi.n	800be88 <xPortStartScheduler+0x4c>
 800be84:	e00f      	b.n	800bea6 <xPortStartScheduler+0x6a>
 800be86:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800be88:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800be8c:	0052      	lsls	r2, r2, #1
 800be8e:	b2d2      	uxtb	r2, r2
 800be90:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be94:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800be98:	0612      	lsls	r2, r2, #24
 800be9a:	f103 31ff 	add.w	r1, r3, #4294967295
 800be9e:	d4f2      	bmi.n	800be86 <xPortStartScheduler+0x4a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bea0:	2b03      	cmp	r3, #3
 800bea2:	6003      	str	r3, [r0, #0]
 800bea4:	d01a      	beq.n	800bedc <xPortStartScheduler+0xa0>
	__asm volatile
 800bea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beaa:	f383 8811 	msr	BASEPRI, r3
 800beae:	f3bf 8f6f 	isb	sy
 800beb2:	f3bf 8f4f 	dsb	sy
 800beb6:	e7fe      	b.n	800beb6 <xPortStartScheduler+0x7a>
 800beb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bebc:	f383 8811 	msr	BASEPRI, r3
 800bec0:	f3bf 8f6f 	isb	sy
 800bec4:	f3bf 8f4f 	dsb	sy
 800bec8:	e7fe      	b.n	800bec8 <xPortStartScheduler+0x8c>
 800beca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bece:	f383 8811 	msr	BASEPRI, r3
 800bed2:	f3bf 8f6f 	isb	sy
 800bed6:	f3bf 8f4f 	dsb	sy
 800beda:	e7fe      	b.n	800beda <xPortStartScheduler+0x9e>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bedc:	9901      	ldr	r1, [sp, #4]
 800bede:	4c15      	ldr	r4, [pc, #84]	; (800bf34 <xPortStartScheduler+0xf8>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bee0:	4a17      	ldr	r2, [pc, #92]	; (800bf40 <xPortStartScheduler+0x104>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bee2:	021b      	lsls	r3, r3, #8
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bee4:	b2c9      	uxtb	r1, r1
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bee6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800beea:	6003      	str	r3, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800beec:	7021      	strb	r1, [r4, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800beee:	6813      	ldr	r3, [r2, #0]
 800bef0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bef4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bef6:	6813      	ldr	r3, [r2, #0]
 800bef8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800befc:	6013      	str	r3, [r2, #0]
	vPortSetupTimerInterrupt();
 800befe:	f7ff ff7f 	bl	800be00 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800bf02:	4b10      	ldr	r3, [pc, #64]	; (800bf44 <xPortStartScheduler+0x108>)
 800bf04:	2400      	movs	r4, #0
 800bf06:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800bf08:	f7ff fec8 	bl	800bc9c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bf0c:	4a0e      	ldr	r2, [pc, #56]	; (800bf48 <xPortStartScheduler+0x10c>)
 800bf0e:	6813      	ldr	r3, [r2, #0]
 800bf10:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bf14:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800bf16:	f7ff fead 	bl	800bc74 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800bf1a:	f001 fc5f 	bl	800d7dc <vTaskSwitchContext>
	prvTaskExitError();
 800bf1e:	f7ff fe89 	bl	800bc34 <prvTaskExitError>
}
 800bf22:	4620      	mov	r0, r4
 800bf24:	b002      	add	sp, #8
 800bf26:	bd10      	pop	{r4, pc}
 800bf28:	e000ed00 	.word	0xe000ed00
 800bf2c:	410fc271 	.word	0x410fc271
 800bf30:	410fc270 	.word	0x410fc270
 800bf34:	e000e400 	.word	0xe000e400
 800bf38:	200000d8 	.word	0x200000d8
 800bf3c:	200000d4 	.word	0x200000d4
 800bf40:	e000ed20 	.word	0xe000ed20
 800bf44:	20000020 	.word	0x20000020
 800bf48:	e000ef34 	.word	0xe000ef34

0800bf4c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bf4c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bf50:	2b0f      	cmp	r3, #15
 800bf52:	d90e      	bls.n	800bf72 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bf54:	4910      	ldr	r1, [pc, #64]	; (800bf98 <vPortValidateInterruptPriority+0x4c>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bf56:	4a11      	ldr	r2, [pc, #68]	; (800bf9c <vPortValidateInterruptPriority+0x50>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bf58:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bf5a:	7812      	ldrb	r2, [r2, #0]
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	d908      	bls.n	800bf72 <vPortValidateInterruptPriority+0x26>
 800bf60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf64:	f383 8811 	msr	BASEPRI, r3
 800bf68:	f3bf 8f6f 	isb	sy
 800bf6c:	f3bf 8f4f 	dsb	sy
 800bf70:	e7fe      	b.n	800bf70 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bf72:	4b0b      	ldr	r3, [pc, #44]	; (800bfa0 <vPortValidateInterruptPriority+0x54>)
 800bf74:	4a0b      	ldr	r2, [pc, #44]	; (800bfa4 <vPortValidateInterruptPriority+0x58>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	6812      	ldr	r2, [r2, #0]
 800bf7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d908      	bls.n	800bf94 <vPortValidateInterruptPriority+0x48>
 800bf82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf86:	f383 8811 	msr	BASEPRI, r3
 800bf8a:	f3bf 8f6f 	isb	sy
 800bf8e:	f3bf 8f4f 	dsb	sy
 800bf92:	e7fe      	b.n	800bf92 <vPortValidateInterruptPriority+0x46>
 800bf94:	4770      	bx	lr
 800bf96:	bf00      	nop
 800bf98:	e000e3f0 	.word	0xe000e3f0
 800bf9c:	200000d4 	.word	0x200000d4
 800bfa0:	e000ed0c 	.word	0xe000ed0c
 800bfa4:	200000d8 	.word	0x200000d8

0800bfa8 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bfa8:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bfaa:	4b11      	ldr	r3, [pc, #68]	; (800bff0 <prvInsertBlockIntoFreeList+0x48>)
 800bfac:	681a      	ldr	r2, [r3, #0]
 800bfae:	4282      	cmp	r2, r0
 800bfb0:	d201      	bcs.n	800bfb6 <prvInsertBlockIntoFreeList+0xe>
 800bfb2:	4613      	mov	r3, r2
 800bfb4:	e7fa      	b.n	800bfac <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bfb6:	685c      	ldr	r4, [r3, #4]
 800bfb8:	1919      	adds	r1, r3, r4
 800bfba:	4288      	cmp	r0, r1
 800bfbc:	d103      	bne.n	800bfc6 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bfbe:	6841      	ldr	r1, [r0, #4]
 800bfc0:	4421      	add	r1, r4
 800bfc2:	6059      	str	r1, [r3, #4]
 800bfc4:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bfc6:	6844      	ldr	r4, [r0, #4]
 800bfc8:	1901      	adds	r1, r0, r4
 800bfca:	428a      	cmp	r2, r1
 800bfcc:	d109      	bne.n	800bfe2 <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bfce:	4909      	ldr	r1, [pc, #36]	; (800bff4 <prvInsertBlockIntoFreeList+0x4c>)
 800bfd0:	6809      	ldr	r1, [r1, #0]
 800bfd2:	428a      	cmp	r2, r1
 800bfd4:	d005      	beq.n	800bfe2 <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bfd6:	6851      	ldr	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bfd8:	6812      	ldr	r2, [r2, #0]
 800bfda:	6002      	str	r2, [r0, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bfdc:	4421      	add	r1, r4
 800bfde:	6041      	str	r1, [r0, #4]
 800bfe0:	e000      	b.n	800bfe4 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bfe2:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bfe4:	4298      	cmp	r0, r3
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bfe6:	bf18      	it	ne
 800bfe8:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bfea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfee:	4770      	bx	lr
 800bff0:	20004f0c 	.word	0x20004f0c
 800bff4:	200000dc 	.word	0x200000dc

0800bff8 <pvPortMalloc>:
{
 800bff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bffa:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800bffc:	f001 fa80 	bl	800d500 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800c000:	4a3e      	ldr	r2, [pc, #248]	; (800c0fc <pvPortMalloc+0x104>)
 800c002:	6813      	ldr	r3, [r2, #0]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d056      	beq.n	800c0b6 <pvPortMalloc+0xbe>
 800c008:	4a3d      	ldr	r2, [pc, #244]	; (800c100 <pvPortMalloc+0x108>)
 800c00a:	6815      	ldr	r5, [r2, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c00c:	422c      	tst	r4, r5
 800c00e:	d14d      	bne.n	800c0ac <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 800c010:	2c00      	cmp	r4, #0
 800c012:	d04b      	beq.n	800c0ac <pvPortMalloc+0xb4>
				xWantedSize += xHeapStructSize;
 800c014:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c018:	0750      	lsls	r0, r2, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c01a:	bf1c      	itt	ne
 800c01c:	f022 0207 	bicne.w	r2, r2, #7
 800c020:	3208      	addne	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c022:	2a00      	cmp	r2, #0
 800c024:	d042      	beq.n	800c0ac <pvPortMalloc+0xb4>
 800c026:	4f37      	ldr	r7, [pc, #220]	; (800c104 <pvPortMalloc+0x10c>)
 800c028:	683e      	ldr	r6, [r7, #0]
 800c02a:	42b2      	cmp	r2, r6
 800c02c:	d83e      	bhi.n	800c0ac <pvPortMalloc+0xb4>
				pxBlock = xStart.pxNextFreeBlock;
 800c02e:	4836      	ldr	r0, [pc, #216]	; (800c108 <pvPortMalloc+0x110>)
 800c030:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c032:	e006      	b.n	800c042 <pvPortMalloc+0x4a>
 800c034:	f8d4 e000 	ldr.w	lr, [r4]
 800c038:	f1be 0f00 	cmp.w	lr, #0
 800c03c:	d004      	beq.n	800c048 <pvPortMalloc+0x50>
 800c03e:	4620      	mov	r0, r4
 800c040:	4674      	mov	r4, lr
 800c042:	6861      	ldr	r1, [r4, #4]
 800c044:	428a      	cmp	r2, r1
 800c046:	d8f5      	bhi.n	800c034 <pvPortMalloc+0x3c>
				if( pxBlock != pxEnd )
 800c048:	429c      	cmp	r4, r3
 800c04a:	d02f      	beq.n	800c0ac <pvPortMalloc+0xb4>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c04c:	6823      	ldr	r3, [r4, #0]
 800c04e:	6003      	str	r3, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c050:	1a8b      	subs	r3, r1, r2
 800c052:	2b10      	cmp	r3, #16
 800c054:	d910      	bls.n	800c078 <pvPortMalloc+0x80>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c056:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c058:	0741      	lsls	r1, r0, #29
 800c05a:	d008      	beq.n	800c06e <pvPortMalloc+0x76>
 800c05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c060:	f383 8811 	msr	BASEPRI, r3
 800c064:	f3bf 8f6f 	isb	sy
 800c068:	f3bf 8f4f 	dsb	sy
 800c06c:	e7fe      	b.n	800c06c <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c06e:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c070:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c072:	f7ff ff99 	bl	800bfa8 <prvInsertBlockIntoFreeList>
 800c076:	6861      	ldr	r1, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c078:	4a24      	ldr	r2, [pc, #144]	; (800c10c <pvPortMalloc+0x114>)
 800c07a:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c07c:	1a76      	subs	r6, r6, r1
					pxBlock->pxNextFreeBlock = NULL;
 800c07e:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c080:	4329      	orrs	r1, r5
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c082:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c084:	6061      	str	r1, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c086:	6023      	str	r3, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c088:	f104 0408 	add.w	r4, r4, #8
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c08c:	bf38      	it	cc
 800c08e:	6016      	strcc	r6, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c090:	603e      	str	r6, [r7, #0]
	( void ) xTaskResumeAll();
 800c092:	f001 faf1 	bl	800d678 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c096:	0763      	lsls	r3, r4, #29
 800c098:	d00b      	beq.n	800c0b2 <pvPortMalloc+0xba>
 800c09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c09e:	f383 8811 	msr	BASEPRI, r3
 800c0a2:	f3bf 8f6f 	isb	sy
 800c0a6:	f3bf 8f4f 	dsb	sy
 800c0aa:	e7fe      	b.n	800c0aa <pvPortMalloc+0xb2>
	( void ) xTaskResumeAll();
 800c0ac:	f001 fae4 	bl	800d678 <xTaskResumeAll>
 800c0b0:	2400      	movs	r4, #0
}
 800c0b2:	4620      	mov	r0, r4
 800c0b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uxAddress = ( size_t ) ucHeap;
 800c0b6:	4916      	ldr	r1, [pc, #88]	; (800c110 <pvPortMalloc+0x118>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c0b8:	074d      	lsls	r5, r1, #29
 800c0ba:	d01b      	beq.n	800c0f4 <pvPortMalloc+0xfc>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c0bc:	3107      	adds	r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c0be:	4b15      	ldr	r3, [pc, #84]	; (800c114 <pvPortMalloc+0x11c>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c0c0:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c0c4:	1a5b      	subs	r3, r3, r1
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c0c6:	440b      	add	r3, r1
	uxAddress -= xHeapStructSize;
 800c0c8:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c0ca:	f023 0307 	bic.w	r3, r3, #7
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c0ce:	480f      	ldr	r0, [pc, #60]	; (800c10c <pvPortMalloc+0x114>)
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c0d0:	4d0c      	ldr	r5, [pc, #48]	; (800c104 <pvPortMalloc+0x10c>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c0d2:	4e0d      	ldr	r6, [pc, #52]	; (800c108 <pvPortMalloc+0x110>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c0d4:	4f0a      	ldr	r7, [pc, #40]	; (800c100 <pvPortMalloc+0x108>)
	pxEnd = ( void * ) uxAddress;
 800c0d6:	6013      	str	r3, [r2, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c0d8:	1a5a      	subs	r2, r3, r1
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c0da:	6002      	str	r2, [r0, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c0dc:	602a      	str	r2, [r5, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c0de:	2000      	movs	r0, #0
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c0e0:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
	xStart.xBlockSize = ( size_t ) 0;
 800c0e4:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c0e6:	6031      	str	r1, [r6, #0]
	pxEnd->xBlockSize = 0;
 800c0e8:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c0ea:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c0ec:	603d      	str	r5, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c0ee:	604a      	str	r2, [r1, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c0f0:	600b      	str	r3, [r1, #0]
 800c0f2:	e78b      	b.n	800c00c <pvPortMalloc+0x14>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c0f4:	f644 6320 	movw	r3, #20000	; 0x4e20
 800c0f8:	e7e5      	b.n	800c0c6 <pvPortMalloc+0xce>
 800c0fa:	bf00      	nop
 800c0fc:	200000dc 	.word	0x200000dc
 800c100:	20004f00 	.word	0x20004f00
 800c104:	20004f04 	.word	0x20004f04
 800c108:	20004f0c 	.word	0x20004f0c
 800c10c:	20004f08 	.word	0x20004f08
 800c110:	200000e0 	.word	0x200000e0
 800c114:	20004f00 	.word	0x20004f00

0800c118 <vPortFree>:
	if( pv != NULL )
 800c118:	b1d0      	cbz	r0, 800c150 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c11a:	4a19      	ldr	r2, [pc, #100]	; (800c180 <vPortFree+0x68>)
 800c11c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800c120:	6812      	ldr	r2, [r2, #0]
 800c122:	4213      	tst	r3, r2
 800c124:	d108      	bne.n	800c138 <vPortFree+0x20>
 800c126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c12a:	f383 8811 	msr	BASEPRI, r3
 800c12e:	f3bf 8f6f 	isb	sy
 800c132:	f3bf 8f4f 	dsb	sy
 800c136:	e7fe      	b.n	800c136 <vPortFree+0x1e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c138:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800c13c:	b149      	cbz	r1, 800c152 <vPortFree+0x3a>
 800c13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c142:	f383 8811 	msr	BASEPRI, r3
 800c146:	f3bf 8f6f 	isb	sy
 800c14a:	f3bf 8f4f 	dsb	sy
 800c14e:	e7fe      	b.n	800c14e <vPortFree+0x36>
 800c150:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c152:	ea23 0302 	bic.w	r3, r3, r2
{
 800c156:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c158:	f840 3c04 	str.w	r3, [r0, #-4]
 800c15c:	4604      	mov	r4, r0
				vTaskSuspendAll();
 800c15e:	f001 f9cf 	bl	800d500 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c162:	4a08      	ldr	r2, [pc, #32]	; (800c184 <vPortFree+0x6c>)
 800c164:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c168:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c16a:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c16e:	440b      	add	r3, r1
 800c170:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c172:	f7ff ff19 	bl	800bfa8 <prvInsertBlockIntoFreeList>
}
 800c176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800c17a:	f001 ba7d 	b.w	800d678 <xTaskResumeAll>
 800c17e:	bf00      	nop
 800c180:	20004f00 	.word	0x20004f00
 800c184:	20004f04 	.word	0x20004f04

0800c188 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c188:	b570      	push	{r4, r5, r6, lr}
 800c18a:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c18c:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c18e:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 800c190:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c192:	b932      	cbnz	r2, 800c1a2 <prvCopyDataToQueue+0x1a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c194:	6805      	ldr	r5, [r0, #0]
 800c196:	bb3d      	cbnz	r5, 800c1e8 <prvCopyDataToQueue+0x60>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800c198:	6840      	ldr	r0, [r0, #4]
 800c19a:	f001 fd13 	bl	800dbc4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800c19e:	6065      	str	r5, [r4, #4]
 800c1a0:	e025      	b.n	800c1ee <prvCopyDataToQueue+0x66>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c1a2:	b96d      	cbnz	r5, 800c1c0 <prvCopyDataToQueue+0x38>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800c1a4:	6880      	ldr	r0, [r0, #8]
 800c1a6:	f007 f9f9 	bl	801359c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c1aa:	68a3      	ldr	r3, [r4, #8]
 800c1ac:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c1ae:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c1b0:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c1b2:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c1b4:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c1b6:	d317      	bcc.n	800c1e8 <prvCopyDataToQueue+0x60>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c1b8:	6823      	ldr	r3, [r4, #0]
 800c1ba:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800c1bc:	4628      	mov	r0, r5
 800c1be:	e016      	b.n	800c1ee <prvCopyDataToQueue+0x66>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1c0:	68c0      	ldr	r0, [r0, #12]
 800c1c2:	f007 f9eb 	bl	801359c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c1c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c1c8:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c1ca:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c1cc:	425b      	negs	r3, r3
 800c1ce:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c1d0:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c1d2:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c1d4:	d202      	bcs.n	800c1dc <prvCopyDataToQueue+0x54>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800c1d6:	6862      	ldr	r2, [r4, #4]
 800c1d8:	4413      	add	r3, r2
 800c1da:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c1dc:	2d02      	cmp	r5, #2
 800c1de:	d103      	bne.n	800c1e8 <prvCopyDataToQueue+0x60>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c1e0:	b126      	cbz	r6, 800c1ec <prvCopyDataToQueue+0x64>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c1e2:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800c1e4:	2000      	movs	r0, #0
 800c1e6:	e002      	b.n	800c1ee <prvCopyDataToQueue+0x66>
 800c1e8:	2000      	movs	r0, #0
 800c1ea:	e000      	b.n	800c1ee <prvCopyDataToQueue+0x66>
 800c1ec:	4630      	mov	r0, r6
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c1ee:	3601      	adds	r6, #1
 800c1f0:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 800c1f2:	bd70      	pop	{r4, r5, r6, pc}

0800c1f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c1f4:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800c1f6:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c1f8:	b172      	cbz	r2, 800c218 <prvCopyDataFromQueue+0x24>
{
 800c1fa:	b410      	push	{r4}
 800c1fc:	4608      	mov	r0, r1
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800c1fe:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c200:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800c202:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c204:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800c206:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800c208:	bf24      	itt	cs
 800c20a:	6819      	ldrcs	r1, [r3, #0]
 800c20c:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800c20e:	68d9      	ldr	r1, [r3, #12]
	}
}
 800c210:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800c214:	f007 b9c2 	b.w	801359c <memcpy>
 800c218:	4770      	bx	lr
	...

0800c21c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c21c:	b570      	push	{r4, r5, r6, lr}
 800c21e:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c220:	f7ff fd70 	bl	800bd04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c224:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800c228:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c22a:	2c00      	cmp	r4, #0
 800c22c:	dd16      	ble.n	800c25c <prvUnlockQueue+0x40>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c22e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c230:	b1a3      	cbz	r3, 800c25c <prvUnlockQueue+0x40>
 800c232:	f105 0624 	add.w	r6, r5, #36	; 0x24
 800c236:	e005      	b.n	800c244 <prvUnlockQueue+0x28>
 800c238:	3c01      	subs	r4, #1
 800c23a:	b2e3      	uxtb	r3, r4
 800c23c:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c23e:	b16b      	cbz	r3, 800c25c <prvUnlockQueue+0x40>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c240:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c242:	b15b      	cbz	r3, 800c25c <prvUnlockQueue+0x40>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c244:	4630      	mov	r0, r6
 800c246:	f001 fbb3 	bl	800d9b0 <xTaskRemoveFromEventList>
 800c24a:	2800      	cmp	r0, #0
 800c24c:	d0f4      	beq.n	800c238 <prvUnlockQueue+0x1c>
 800c24e:	3c01      	subs	r4, #1
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c250:	f001 fc4a 	bl	800dae8 <vTaskMissedYield>
 800c254:	b2e3      	uxtb	r3, r4
 800c256:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d1f1      	bne.n	800c240 <prvUnlockQueue+0x24>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c25c:	23ff      	movs	r3, #255	; 0xff
 800c25e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c262:	f7ff fd71 	bl	800bd48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c266:	f7ff fd4d 	bl	800bd04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c26a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800c26e:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c270:	2c00      	cmp	r4, #0
 800c272:	dd16      	ble.n	800c2a2 <prvUnlockQueue+0x86>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c274:	692b      	ldr	r3, [r5, #16]
 800c276:	b1a3      	cbz	r3, 800c2a2 <prvUnlockQueue+0x86>
 800c278:	f105 0610 	add.w	r6, r5, #16
 800c27c:	e005      	b.n	800c28a <prvUnlockQueue+0x6e>
 800c27e:	3c01      	subs	r4, #1
 800c280:	b2e3      	uxtb	r3, r4
 800c282:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c284:	b16b      	cbz	r3, 800c2a2 <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c286:	692b      	ldr	r3, [r5, #16]
 800c288:	b15b      	cbz	r3, 800c2a2 <prvUnlockQueue+0x86>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c28a:	4630      	mov	r0, r6
 800c28c:	f001 fb90 	bl	800d9b0 <xTaskRemoveFromEventList>
 800c290:	2800      	cmp	r0, #0
 800c292:	d0f4      	beq.n	800c27e <prvUnlockQueue+0x62>
 800c294:	3c01      	subs	r4, #1
				{
					vTaskMissedYield();
 800c296:	f001 fc27 	bl	800dae8 <vTaskMissedYield>
 800c29a:	b2e3      	uxtb	r3, r4
 800c29c:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d1f1      	bne.n	800c286 <prvUnlockQueue+0x6a>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c2a2:	23ff      	movs	r3, #255	; 0xff
 800c2a4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 800c2a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800c2ac:	f7ff bd4c 	b.w	800bd48 <vPortExitCritical>

0800c2b0 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c2b0:	b940      	cbnz	r0, 800c2c4 <xQueueGenericCreate+0x14>
 800c2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b6:	f383 8811 	msr	BASEPRI, r3
 800c2ba:	f3bf 8f6f 	isb	sy
 800c2be:	f3bf 8f4f 	dsb	sy
 800c2c2:	e7fe      	b.n	800c2c2 <xQueueGenericCreate+0x12>
	{
 800c2c4:	b570      	push	{r4, r5, r6, lr}
 800c2c6:	4606      	mov	r6, r0
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2c8:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800c2cc:	3048      	adds	r0, #72	; 0x48
 800c2ce:	460d      	mov	r5, r1
 800c2d0:	f7ff fe92 	bl	800bff8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800c2d4:	4604      	mov	r4, r0
 800c2d6:	b318      	cbz	r0, 800c320 <xQueueGenericCreate+0x70>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800c2d8:	b325      	cbz	r5, 800c324 <xQueueGenericCreate+0x74>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800c2da:	f100 0348 	add.w	r3, r0, #72	; 0x48
 800c2de:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800c2e0:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c2e2:	6425      	str	r5, [r4, #64]	; 0x40
	taskENTER_CRITICAL();
 800c2e4:	f7ff fd0e 	bl	800bd04 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c2e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c2ea:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c2ec:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c2ee:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c2f0:	fb01 f103 	mul.w	r1, r1, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800c2f4:	1acb      	subs	r3, r1, r3
 800c2f6:	4413      	add	r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c2f8:	2000      	movs	r0, #0
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c2fa:	440a      	add	r2, r1
		pxQueue->cRxLock = queueUNLOCKED;
 800c2fc:	21ff      	movs	r1, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c2fe:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800c300:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c302:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c306:	6062      	str	r2, [r4, #4]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c308:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800c30c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c310:	f7ff fc42 	bl	800bb98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c314:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c318:	f7ff fc3e 	bl	800bb98 <vListInitialise>
	taskEXIT_CRITICAL();
 800c31c:	f7ff fd14 	bl	800bd48 <vPortExitCritical>
	}
 800c320:	4620      	mov	r0, r4
 800c322:	bd70      	pop	{r4, r5, r6, pc}
	if( uxItemSize == ( UBaseType_t ) 0 )
 800c324:	4603      	mov	r3, r0
 800c326:	e7da      	b.n	800c2de <xQueueGenericCreate+0x2e>

0800c328 <xQueueCreateMutex>:
	{
 800c328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800c32c:	2048      	movs	r0, #72	; 0x48
	{
 800c32e:	b085      	sub	sp, #20
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800c330:	f7ff fe62 	bl	800bff8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800c334:	4604      	mov	r4, r0
 800c336:	2800      	cmp	r0, #0
 800c338:	f000 80c7 	beq.w	800c4ca <xQueueCreateMutex+0x1a2>
	pxNewQueue->uxItemSize = uxItemSize;
 800c33c:	f04f 0800 	mov.w	r8, #0
	pxNewQueue->uxLength = uxQueueLength;
 800c340:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c342:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800c344:	63c3      	str	r3, [r0, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c346:	f8c0 8040 	str.w	r8, [r0, #64]	; 0x40
	taskENTER_CRITICAL();
 800c34a:	f7ff fcdb 	bl	800bd04 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c34e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c350:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c352:	6821      	ldr	r1, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c354:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c358:	fb03 f302 	mul.w	r3, r3, r2
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800c35c:	1a9a      	subs	r2, r3, r2
 800c35e:	440a      	add	r2, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c360:	440b      	add	r3, r1
		pxQueue->cRxLock = queueUNLOCKED;
 800c362:	25ff      	movs	r5, #255	; 0xff
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c364:	f104 0610 	add.w	r6, r4, #16
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800c368:	60e2      	str	r2, [r4, #12]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c36a:	6063      	str	r3, [r4, #4]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c36c:	60a1      	str	r1, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 800c36e:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c372:	4630      	mov	r0, r6
		pxQueue->cTxLock = queueUNLOCKED;
 800c374:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c378:	f104 0724 	add.w	r7, r4, #36	; 0x24
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c37c:	f7ff fc0c 	bl	800bb98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c380:	4638      	mov	r0, r7
 800c382:	f7ff fc09 	bl	800bb98 <vListInitialise>
	taskEXIT_CRITICAL();
 800c386:	f7ff fcdf 	bl	800bd48 <vPortExitCritical>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c38a:	6c25      	ldr	r5, [r4, #64]	; 0x40
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c38c:	f8c4 8000 	str.w	r8, [r4]
			pxNewQueue->pxMutexHolder = NULL;
 800c390:	f8c4 8004 	str.w	r8, [r4, #4]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800c394:	f8c4 800c 	str.w	r8, [r4, #12]
 800c398:	f8cd 8004 	str.w	r8, [sp, #4]
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c39c:	2d00      	cmp	r5, #0
 800c39e:	f040 80a5 	bne.w	800c4ec <xQueueCreateMutex+0x1c4>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c3a2:	f001 fba7 	bl	800daf4 <xTaskGetSchedulerState>
 800c3a6:	2800      	cmp	r0, #0
 800c3a8:	f000 8093 	beq.w	800c4d2 <xQueueCreateMutex+0x1aa>
		taskENTER_CRITICAL();
 800c3ac:	f7ff fcaa 	bl	800bd04 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c3b0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c3b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
					portYIELD_WITHIN_API();
 800c3b4:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800c5c0 <xQueueCreateMutex+0x298>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c3b8:	429a      	cmp	r2, r3
		prvLockQueue( pxQueue );
 800c3ba:	f04f 0800 	mov.w	r8, #0
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c3be:	d371      	bcc.n	800c4a4 <xQueueCreateMutex+0x17c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c3c0:	9b01      	ldr	r3, [sp, #4]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d07f      	beq.n	800c4c6 <xQueueCreateMutex+0x19e>
				else if( xEntryTimeSet == pdFALSE )
 800c3c6:	b915      	cbnz	r5, 800c3ce <xQueueCreateMutex+0xa6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c3c8:	a802      	add	r0, sp, #8
 800c3ca:	f001 fb35 	bl	800da38 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800c3ce:	f7ff fcbb 	bl	800bd48 <vPortExitCritical>
		vTaskSuspendAll();
 800c3d2:	f001 f895 	bl	800d500 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c3d6:	f7ff fc95 	bl	800bd04 <vPortEnterCritical>
 800c3da:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c3de:	2bff      	cmp	r3, #255	; 0xff
 800c3e0:	bf08      	it	eq
 800c3e2:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 800c3e6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c3ea:	2bff      	cmp	r3, #255	; 0xff
 800c3ec:	bf08      	it	eq
 800c3ee:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 800c3f2:	f7ff fca9 	bl	800bd48 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c3f6:	a901      	add	r1, sp, #4
 800c3f8:	a802      	add	r0, sp, #8
 800c3fa:	f001 fb29 	bl	800da50 <xTaskCheckForTimeOut>
 800c3fe:	2800      	cmp	r0, #0
 800c400:	f040 80d4 	bne.w	800c5ac <xQueueCreateMutex+0x284>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c404:	f7ff fc7e 	bl	800bd04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c408:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c40a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d076      	beq.n	800c4fe <xQueueCreateMutex+0x1d6>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800c410:	f7ff fc9a 	bl	800bd48 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c414:	f7ff fc76 	bl	800bd04 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800c418:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800c41c:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c41e:	2d00      	cmp	r5, #0
 800c420:	dc04      	bgt.n	800c42c <xQueueCreateMutex+0x104>
 800c422:	e011      	b.n	800c448 <xQueueCreateMutex+0x120>
 800c424:	3d01      	subs	r5, #1
 800c426:	b2eb      	uxtb	r3, r5
 800c428:	b25d      	sxtb	r5, r3
 800c42a:	b16b      	cbz	r3, 800c448 <xQueueCreateMutex+0x120>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c42c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c42e:	b15b      	cbz	r3, 800c448 <xQueueCreateMutex+0x120>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c430:	4638      	mov	r0, r7
 800c432:	f001 fabd 	bl	800d9b0 <xTaskRemoveFromEventList>
 800c436:	2800      	cmp	r0, #0
 800c438:	d0f4      	beq.n	800c424 <xQueueCreateMutex+0xfc>
 800c43a:	3d01      	subs	r5, #1
						vTaskMissedYield();
 800c43c:	f001 fb54 	bl	800dae8 <vTaskMissedYield>
 800c440:	b2eb      	uxtb	r3, r5
 800c442:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c444:	2b00      	cmp	r3, #0
 800c446:	d1f1      	bne.n	800c42c <xQueueCreateMutex+0x104>
		pxQueue->cTxLock = queueUNLOCKED;
 800c448:	23ff      	movs	r3, #255	; 0xff
 800c44a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800c44e:	f7ff fc7b 	bl	800bd48 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c452:	f7ff fc57 	bl	800bd04 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800c456:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800c45a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c45c:	2d00      	cmp	r5, #0
 800c45e:	dc04      	bgt.n	800c46a <xQueueCreateMutex+0x142>
 800c460:	e011      	b.n	800c486 <xQueueCreateMutex+0x15e>
 800c462:	3d01      	subs	r5, #1
 800c464:	b2eb      	uxtb	r3, r5
 800c466:	b25d      	sxtb	r5, r3
 800c468:	b16b      	cbz	r3, 800c486 <xQueueCreateMutex+0x15e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c46a:	6923      	ldr	r3, [r4, #16]
 800c46c:	b15b      	cbz	r3, 800c486 <xQueueCreateMutex+0x15e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c46e:	4630      	mov	r0, r6
 800c470:	f001 fa9e 	bl	800d9b0 <xTaskRemoveFromEventList>
 800c474:	2800      	cmp	r0, #0
 800c476:	d0f4      	beq.n	800c462 <xQueueCreateMutex+0x13a>
 800c478:	3d01      	subs	r5, #1
					vTaskMissedYield();
 800c47a:	f001 fb35 	bl	800dae8 <vTaskMissedYield>
 800c47e:	b2eb      	uxtb	r3, r5
 800c480:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c482:	2b00      	cmp	r3, #0
 800c484:	d1f1      	bne.n	800c46a <xQueueCreateMutex+0x142>
		pxQueue->cRxLock = queueUNLOCKED;
 800c486:	23ff      	movs	r3, #255	; 0xff
 800c488:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800c48c:	f7ff fc5c 	bl	800bd48 <vPortExitCritical>
				( void ) xTaskResumeAll();
 800c490:	f001 f8f2 	bl	800d678 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800c494:	f7ff fc36 	bl	800bd04 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c498:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c49a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c49c:	429a      	cmp	r2, r3
 800c49e:	f04f 0501 	mov.w	r5, #1
 800c4a2:	d28d      	bcs.n	800c3c0 <xQueueCreateMutex+0x98>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	4611      	mov	r1, r2
 800c4a8:	4620      	mov	r0, r4
 800c4aa:	f7ff fe6d 	bl	800c188 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c4ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d175      	bne.n	800c5a0 <xQueueCreateMutex+0x278>
					else if( xYieldRequired != pdFALSE )
 800c4b4:	b138      	cbz	r0, 800c4c6 <xQueueCreateMutex+0x19e>
						queueYIELD_IF_USING_PREEMPTION();
 800c4b6:	4b42      	ldr	r3, [pc, #264]	; (800c5c0 <xQueueCreateMutex+0x298>)
 800c4b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4bc:	601a      	str	r2, [r3, #0]
 800c4be:	f3bf 8f4f 	dsb	sy
 800c4c2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800c4c6:	f7ff fc3f 	bl	800bd48 <vPortExitCritical>
	}
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	b005      	add	sp, #20
 800c4ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c4d2:	9d01      	ldr	r5, [sp, #4]
 800c4d4:	2d00      	cmp	r5, #0
 800c4d6:	f43f af69 	beq.w	800c3ac <xQueueCreateMutex+0x84>
 800c4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4de:	f383 8811 	msr	BASEPRI, r3
 800c4e2:	f3bf 8f6f 	isb	sy
 800c4e6:	f3bf 8f4f 	dsb	sy
 800c4ea:	e7fe      	b.n	800c4ea <xQueueCreateMutex+0x1c2>
 800c4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f0:	f383 8811 	msr	BASEPRI, r3
 800c4f4:	f3bf 8f6f 	isb	sy
 800c4f8:	f3bf 8f4f 	dsb	sy
 800c4fc:	e7fe      	b.n	800c4fc <xQueueCreateMutex+0x1d4>
	taskEXIT_CRITICAL();
 800c4fe:	f7ff fc23 	bl	800bd48 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c502:	9901      	ldr	r1, [sp, #4]
 800c504:	4630      	mov	r0, r6
 800c506:	f001 f9a1 	bl	800d84c <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 800c50a:	f7ff fbfb 	bl	800bd04 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800c50e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800c512:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c514:	2d00      	cmp	r5, #0
 800c516:	dc04      	bgt.n	800c522 <xQueueCreateMutex+0x1fa>
 800c518:	e011      	b.n	800c53e <xQueueCreateMutex+0x216>
 800c51a:	3d01      	subs	r5, #1
 800c51c:	b2eb      	uxtb	r3, r5
 800c51e:	b25d      	sxtb	r5, r3
 800c520:	b16b      	cbz	r3, 800c53e <xQueueCreateMutex+0x216>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c522:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c524:	b15b      	cbz	r3, 800c53e <xQueueCreateMutex+0x216>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c526:	4638      	mov	r0, r7
 800c528:	f001 fa42 	bl	800d9b0 <xTaskRemoveFromEventList>
 800c52c:	2800      	cmp	r0, #0
 800c52e:	d0f4      	beq.n	800c51a <xQueueCreateMutex+0x1f2>
 800c530:	3d01      	subs	r5, #1
						vTaskMissedYield();
 800c532:	f001 fad9 	bl	800dae8 <vTaskMissedYield>
 800c536:	b2eb      	uxtb	r3, r5
 800c538:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d1f1      	bne.n	800c522 <xQueueCreateMutex+0x1fa>
		pxQueue->cTxLock = queueUNLOCKED;
 800c53e:	23ff      	movs	r3, #255	; 0xff
 800c540:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800c544:	f7ff fc00 	bl	800bd48 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c548:	f7ff fbdc 	bl	800bd04 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800c54c:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800c550:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c552:	2d00      	cmp	r5, #0
 800c554:	dc04      	bgt.n	800c560 <xQueueCreateMutex+0x238>
 800c556:	e011      	b.n	800c57c <xQueueCreateMutex+0x254>
 800c558:	3d01      	subs	r5, #1
 800c55a:	b2eb      	uxtb	r3, r5
 800c55c:	b25d      	sxtb	r5, r3
 800c55e:	b16b      	cbz	r3, 800c57c <xQueueCreateMutex+0x254>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c560:	6923      	ldr	r3, [r4, #16]
 800c562:	b15b      	cbz	r3, 800c57c <xQueueCreateMutex+0x254>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c564:	4630      	mov	r0, r6
 800c566:	f001 fa23 	bl	800d9b0 <xTaskRemoveFromEventList>
 800c56a:	2800      	cmp	r0, #0
 800c56c:	d0f4      	beq.n	800c558 <xQueueCreateMutex+0x230>
 800c56e:	3d01      	subs	r5, #1
					vTaskMissedYield();
 800c570:	f001 faba 	bl	800dae8 <vTaskMissedYield>
 800c574:	b2eb      	uxtb	r3, r5
 800c576:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d1f1      	bne.n	800c560 <xQueueCreateMutex+0x238>
		pxQueue->cRxLock = queueUNLOCKED;
 800c57c:	23ff      	movs	r3, #255	; 0xff
 800c57e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800c582:	f7ff fbe1 	bl	800bd48 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 800c586:	f001 f877 	bl	800d678 <xTaskResumeAll>
 800c58a:	2800      	cmp	r0, #0
 800c58c:	d182      	bne.n	800c494 <xQueueCreateMutex+0x16c>
					portYIELD_WITHIN_API();
 800c58e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c592:	f8c9 3000 	str.w	r3, [r9]
 800c596:	f3bf 8f4f 	dsb	sy
 800c59a:	f3bf 8f6f 	isb	sy
 800c59e:	e779      	b.n	800c494 <xQueueCreateMutex+0x16c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c5a0:	4638      	mov	r0, r7
 800c5a2:	f001 fa05 	bl	800d9b0 <xTaskRemoveFromEventList>
 800c5a6:	2800      	cmp	r0, #0
 800c5a8:	d185      	bne.n	800c4b6 <xQueueCreateMutex+0x18e>
 800c5aa:	e78c      	b.n	800c4c6 <xQueueCreateMutex+0x19e>
			prvUnlockQueue( pxQueue );
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	f7ff fe35 	bl	800c21c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c5b2:	f001 f861 	bl	800d678 <xTaskResumeAll>
	}
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	b005      	add	sp, #20
 800c5ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5be:	bf00      	nop
 800c5c0:	e000ed04 	.word	0xe000ed04

0800c5c4 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 800c5c4:	b940      	cbnz	r0, 800c5d8 <xQueueCreateCountingSemaphore+0x14>
 800c5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ca:	f383 8811 	msr	BASEPRI, r3
 800c5ce:	f3bf 8f6f 	isb	sy
 800c5d2:	f3bf 8f4f 	dsb	sy
 800c5d6:	e7fe      	b.n	800c5d6 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c5d8:	4288      	cmp	r0, r1
 800c5da:	d208      	bcs.n	800c5ee <xQueueCreateCountingSemaphore+0x2a>
 800c5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e0:	f383 8811 	msr	BASEPRI, r3
 800c5e4:	f3bf 8f6f 	isb	sy
 800c5e8:	f3bf 8f4f 	dsb	sy
 800c5ec:	e7fe      	b.n	800c5ec <xQueueCreateCountingSemaphore+0x28>
	{
 800c5ee:	b510      	push	{r4, lr}
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c5f0:	2202      	movs	r2, #2
 800c5f2:	460c      	mov	r4, r1
 800c5f4:	2100      	movs	r1, #0
 800c5f6:	f7ff fe5b 	bl	800c2b0 <xQueueGenericCreate>
		if( xHandle != NULL )
 800c5fa:	b100      	cbz	r0, 800c5fe <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c5fc:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800c5fe:	bd10      	pop	{r4, pc}

0800c600 <xQueueGenericSend>:
{
 800c600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c604:	b085      	sub	sp, #20
 800c606:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800c608:	2800      	cmp	r0, #0
 800c60a:	f000 8107 	beq.w	800c81c <xQueueGenericSend+0x21c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c60e:	2900      	cmp	r1, #0
 800c610:	f000 813c 	beq.w	800c88c <xQueueGenericSend+0x28c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c614:	2b02      	cmp	r3, #2
 800c616:	f000 812c 	beq.w	800c872 <xQueueGenericSend+0x272>
 800c61a:	4604      	mov	r4, r0
 800c61c:	461e      	mov	r6, r3
 800c61e:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c620:	f001 fa68 	bl	800daf4 <xTaskGetSchedulerState>
 800c624:	b928      	cbnz	r0, 800c632 <xQueueGenericSend+0x32>
 800c626:	9b01      	ldr	r3, [sp, #4]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	f040 8119 	bne.w	800c860 <xQueueGenericSend+0x260>
 800c62e:	4699      	mov	r9, r3
 800c630:	e001      	b.n	800c636 <xQueueGenericSend+0x36>
 800c632:	f04f 0900 	mov.w	r9, #0
		taskENTER_CRITICAL();
 800c636:	f7ff fb65 	bl	800bd04 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c63a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c63c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
					portYIELD_WITHIN_API();
 800c63e:	f8df a268 	ldr.w	sl, [pc, #616]	; 800c8a8 <xQueueGenericSend+0x2a8>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c642:	429a      	cmp	r2, r3
		prvLockQueue( pxQueue );
 800c644:	f04f 0800 	mov.w	r8, #0
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c648:	d37c      	bcc.n	800c744 <xQueueGenericSend+0x144>
 800c64a:	2e02      	cmp	r6, #2
 800c64c:	d07a      	beq.n	800c744 <xQueueGenericSend+0x144>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c64e:	9d01      	ldr	r5, [sp, #4]
 800c650:	2d00      	cmp	r5, #0
 800c652:	f000 80f9 	beq.w	800c848 <xQueueGenericSend+0x248>
				else if( xEntryTimeSet == pdFALSE )
 800c656:	f1b9 0f00 	cmp.w	r9, #0
 800c65a:	f000 80f1 	beq.w	800c840 <xQueueGenericSend+0x240>
		taskEXIT_CRITICAL();
 800c65e:	f7ff fb73 	bl	800bd48 <vPortExitCritical>
		vTaskSuspendAll();
 800c662:	f000 ff4d 	bl	800d500 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c666:	f7ff fb4d 	bl	800bd04 <vPortEnterCritical>
 800c66a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c66e:	2bff      	cmp	r3, #255	; 0xff
 800c670:	bf08      	it	eq
 800c672:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 800c676:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c67a:	2bff      	cmp	r3, #255	; 0xff
 800c67c:	bf08      	it	eq
 800c67e:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 800c682:	f7ff fb61 	bl	800bd48 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c686:	a901      	add	r1, sp, #4
 800c688:	a802      	add	r0, sp, #8
 800c68a:	f001 f9e1 	bl	800da50 <xTaskCheckForTimeOut>
 800c68e:	2800      	cmp	r0, #0
 800c690:	f040 80cd 	bne.w	800c82e <xQueueGenericSend+0x22e>
	taskENTER_CRITICAL();
 800c694:	f7ff fb36 	bl	800bd04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c698:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c69a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c69c:	429a      	cmp	r2, r3
 800c69e:	d066      	beq.n	800c76e <xQueueGenericSend+0x16e>
	taskEXIT_CRITICAL();
 800c6a0:	f7ff fb52 	bl	800bd48 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c6a4:	f7ff fb2e 	bl	800bd04 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800c6a8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800c6ac:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c6ae:	2d00      	cmp	r5, #0
 800c6b0:	dd16      	ble.n	800c6e0 <xQueueGenericSend+0xe0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c6b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6b4:	b1a3      	cbz	r3, 800c6e0 <xQueueGenericSend+0xe0>
 800c6b6:	f104 0924 	add.w	r9, r4, #36	; 0x24
 800c6ba:	e005      	b.n	800c6c8 <xQueueGenericSend+0xc8>
 800c6bc:	3d01      	subs	r5, #1
 800c6be:	b2eb      	uxtb	r3, r5
 800c6c0:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c6c2:	b16b      	cbz	r3, 800c6e0 <xQueueGenericSend+0xe0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c6c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6c6:	b15b      	cbz	r3, 800c6e0 <xQueueGenericSend+0xe0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c6c8:	4648      	mov	r0, r9
 800c6ca:	f001 f971 	bl	800d9b0 <xTaskRemoveFromEventList>
 800c6ce:	2800      	cmp	r0, #0
 800c6d0:	d0f4      	beq.n	800c6bc <xQueueGenericSend+0xbc>
 800c6d2:	3d01      	subs	r5, #1
						vTaskMissedYield();
 800c6d4:	f001 fa08 	bl	800dae8 <vTaskMissedYield>
 800c6d8:	b2eb      	uxtb	r3, r5
 800c6da:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d1f1      	bne.n	800c6c4 <xQueueGenericSend+0xc4>
		pxQueue->cTxLock = queueUNLOCKED;
 800c6e0:	23ff      	movs	r3, #255	; 0xff
 800c6e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800c6e6:	f7ff fb2f 	bl	800bd48 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c6ea:	f7ff fb0b 	bl	800bd04 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800c6ee:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800c6f2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c6f4:	2d00      	cmp	r5, #0
 800c6f6:	dd16      	ble.n	800c726 <xQueueGenericSend+0x126>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6f8:	6923      	ldr	r3, [r4, #16]
 800c6fa:	b1a3      	cbz	r3, 800c726 <xQueueGenericSend+0x126>
 800c6fc:	f104 0910 	add.w	r9, r4, #16
 800c700:	e005      	b.n	800c70e <xQueueGenericSend+0x10e>
 800c702:	3d01      	subs	r5, #1
 800c704:	b2eb      	uxtb	r3, r5
 800c706:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c708:	b16b      	cbz	r3, 800c726 <xQueueGenericSend+0x126>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c70a:	6923      	ldr	r3, [r4, #16]
 800c70c:	b15b      	cbz	r3, 800c726 <xQueueGenericSend+0x126>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c70e:	4648      	mov	r0, r9
 800c710:	f001 f94e 	bl	800d9b0 <xTaskRemoveFromEventList>
 800c714:	2800      	cmp	r0, #0
 800c716:	d0f4      	beq.n	800c702 <xQueueGenericSend+0x102>
 800c718:	3d01      	subs	r5, #1
					vTaskMissedYield();
 800c71a:	f001 f9e5 	bl	800dae8 <vTaskMissedYield>
 800c71e:	b2eb      	uxtb	r3, r5
 800c720:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c722:	2b00      	cmp	r3, #0
 800c724:	d1f1      	bne.n	800c70a <xQueueGenericSend+0x10a>
		pxQueue->cRxLock = queueUNLOCKED;
 800c726:	23ff      	movs	r3, #255	; 0xff
 800c728:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800c72c:	f7ff fb0c 	bl	800bd48 <vPortExitCritical>
				( void ) xTaskResumeAll();
 800c730:	f000 ffa2 	bl	800d678 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800c734:	f7ff fae6 	bl	800bd04 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c738:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c73a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c73c:	429a      	cmp	r2, r3
 800c73e:	f04f 0901 	mov.w	r9, #1
 800c742:	d282      	bcs.n	800c64a <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c744:	4632      	mov	r2, r6
 800c746:	4639      	mov	r1, r7
 800c748:	4620      	mov	r0, r4
 800c74a:	f7ff fd1d 	bl	800c188 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c74e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c750:	2b00      	cmp	r3, #0
 800c752:	d17d      	bne.n	800c850 <xQueueGenericSend+0x250>
					else if( xYieldRequired != pdFALSE )
 800c754:	b138      	cbz	r0, 800c766 <xQueueGenericSend+0x166>
						queueYIELD_IF_USING_PREEMPTION();
 800c756:	4b54      	ldr	r3, [pc, #336]	; (800c8a8 <xQueueGenericSend+0x2a8>)
 800c758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c75c:	601a      	str	r2, [r3, #0]
 800c75e:	f3bf 8f4f 	dsb	sy
 800c762:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800c766:	f7ff faef 	bl	800bd48 <vPortExitCritical>
				return pdPASS;
 800c76a:	2001      	movs	r0, #1
 800c76c:	e065      	b.n	800c83a <xQueueGenericSend+0x23a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c76e:	f104 0910 	add.w	r9, r4, #16
	taskEXIT_CRITICAL();
 800c772:	f7ff fae9 	bl	800bd48 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c776:	4648      	mov	r0, r9
 800c778:	9901      	ldr	r1, [sp, #4]
 800c77a:	f001 f867 	bl	800d84c <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 800c77e:	f7ff fac1 	bl	800bd04 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800c782:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800c786:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c788:	2d00      	cmp	r5, #0
 800c78a:	dd16      	ble.n	800c7ba <xQueueGenericSend+0x1ba>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c78c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c78e:	b1a3      	cbz	r3, 800c7ba <xQueueGenericSend+0x1ba>
 800c790:	f104 0b24 	add.w	fp, r4, #36	; 0x24
 800c794:	e005      	b.n	800c7a2 <xQueueGenericSend+0x1a2>
 800c796:	3d01      	subs	r5, #1
 800c798:	b2eb      	uxtb	r3, r5
 800c79a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c79c:	b16b      	cbz	r3, 800c7ba <xQueueGenericSend+0x1ba>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c79e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7a0:	b15b      	cbz	r3, 800c7ba <xQueueGenericSend+0x1ba>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c7a2:	4658      	mov	r0, fp
 800c7a4:	f001 f904 	bl	800d9b0 <xTaskRemoveFromEventList>
 800c7a8:	2800      	cmp	r0, #0
 800c7aa:	d0f4      	beq.n	800c796 <xQueueGenericSend+0x196>
 800c7ac:	3d01      	subs	r5, #1
						vTaskMissedYield();
 800c7ae:	f001 f99b 	bl	800dae8 <vTaskMissedYield>
 800c7b2:	b2eb      	uxtb	r3, r5
 800c7b4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d1f1      	bne.n	800c79e <xQueueGenericSend+0x19e>
		pxQueue->cTxLock = queueUNLOCKED;
 800c7ba:	23ff      	movs	r3, #255	; 0xff
 800c7bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800c7c0:	f7ff fac2 	bl	800bd48 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c7c4:	f7ff fa9e 	bl	800bd04 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800c7c8:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800c7cc:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c7ce:	2d00      	cmp	r5, #0
 800c7d0:	dc04      	bgt.n	800c7dc <xQueueGenericSend+0x1dc>
 800c7d2:	e011      	b.n	800c7f8 <xQueueGenericSend+0x1f8>
 800c7d4:	3d01      	subs	r5, #1
 800c7d6:	b2eb      	uxtb	r3, r5
 800c7d8:	b25d      	sxtb	r5, r3
 800c7da:	b16b      	cbz	r3, 800c7f8 <xQueueGenericSend+0x1f8>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7dc:	6923      	ldr	r3, [r4, #16]
 800c7de:	b15b      	cbz	r3, 800c7f8 <xQueueGenericSend+0x1f8>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7e0:	4648      	mov	r0, r9
 800c7e2:	f001 f8e5 	bl	800d9b0 <xTaskRemoveFromEventList>
 800c7e6:	2800      	cmp	r0, #0
 800c7e8:	d0f4      	beq.n	800c7d4 <xQueueGenericSend+0x1d4>
 800c7ea:	3d01      	subs	r5, #1
					vTaskMissedYield();
 800c7ec:	f001 f97c 	bl	800dae8 <vTaskMissedYield>
 800c7f0:	b2eb      	uxtb	r3, r5
 800c7f2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d1f1      	bne.n	800c7dc <xQueueGenericSend+0x1dc>
		pxQueue->cRxLock = queueUNLOCKED;
 800c7f8:	23ff      	movs	r3, #255	; 0xff
 800c7fa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800c7fe:	f7ff faa3 	bl	800bd48 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 800c802:	f000 ff39 	bl	800d678 <xTaskResumeAll>
 800c806:	2800      	cmp	r0, #0
 800c808:	d194      	bne.n	800c734 <xQueueGenericSend+0x134>
					portYIELD_WITHIN_API();
 800c80a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c80e:	f8ca 3000 	str.w	r3, [sl]
 800c812:	f3bf 8f4f 	dsb	sy
 800c816:	f3bf 8f6f 	isb	sy
 800c81a:	e78b      	b.n	800c734 <xQueueGenericSend+0x134>
 800c81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c820:	f383 8811 	msr	BASEPRI, r3
 800c824:	f3bf 8f6f 	isb	sy
 800c828:	f3bf 8f4f 	dsb	sy
 800c82c:	e7fe      	b.n	800c82c <xQueueGenericSend+0x22c>
			prvUnlockQueue( pxQueue );
 800c82e:	4620      	mov	r0, r4
 800c830:	f7ff fcf4 	bl	800c21c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c834:	f000 ff20 	bl	800d678 <xTaskResumeAll>
			return errQUEUE_FULL;
 800c838:	2000      	movs	r0, #0
}
 800c83a:	b005      	add	sp, #20
 800c83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c840:	a802      	add	r0, sp, #8
 800c842:	f001 f8f9 	bl	800da38 <vTaskInternalSetTimeOutState>
 800c846:	e70a      	b.n	800c65e <xQueueGenericSend+0x5e>
					taskEXIT_CRITICAL();
 800c848:	f7ff fa7e 	bl	800bd48 <vPortExitCritical>
					return errQUEUE_FULL;
 800c84c:	4628      	mov	r0, r5
 800c84e:	e7f4      	b.n	800c83a <xQueueGenericSend+0x23a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c850:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c854:	f001 f8ac 	bl	800d9b0 <xTaskRemoveFromEventList>
 800c858:	2800      	cmp	r0, #0
 800c85a:	f47f af7c 	bne.w	800c756 <xQueueGenericSend+0x156>
 800c85e:	e782      	b.n	800c766 <xQueueGenericSend+0x166>
 800c860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c864:	f383 8811 	msr	BASEPRI, r3
 800c868:	f3bf 8f6f 	isb	sy
 800c86c:	f3bf 8f4f 	dsb	sy
 800c870:	e7fe      	b.n	800c870 <xQueueGenericSend+0x270>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c872:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c874:	2a01      	cmp	r2, #1
 800c876:	f43f aed0 	beq.w	800c61a <xQueueGenericSend+0x1a>
 800c87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c87e:	f383 8811 	msr	BASEPRI, r3
 800c882:	f3bf 8f6f 	isb	sy
 800c886:	f3bf 8f4f 	dsb	sy
 800c88a:	e7fe      	b.n	800c88a <xQueueGenericSend+0x28a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c88c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800c88e:	2a00      	cmp	r2, #0
 800c890:	f43f aec0 	beq.w	800c614 <xQueueGenericSend+0x14>
 800c894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c898:	f383 8811 	msr	BASEPRI, r3
 800c89c:	f3bf 8f6f 	isb	sy
 800c8a0:	f3bf 8f4f 	dsb	sy
 800c8a4:	e7fe      	b.n	800c8a4 <xQueueGenericSend+0x2a4>
 800c8a6:	bf00      	nop
 800c8a8:	e000ed04 	.word	0xe000ed04

0800c8ac <xQueueGenericSendFromISR>:
{
 800c8ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800c8b0:	b1f0      	cbz	r0, 800c8f0 <xQueueGenericSendFromISR+0x44>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c8b2:	2900      	cmp	r1, #0
 800c8b4:	d041      	beq.n	800c93a <xQueueGenericSendFromISR+0x8e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c8b6:	2b02      	cmp	r3, #2
 800c8b8:	d033      	beq.n	800c922 <xQueueGenericSendFromISR+0x76>
 800c8ba:	4604      	mov	r4, r0
 800c8bc:	461f      	mov	r7, r3
 800c8be:	4690      	mov	r8, r2
 800c8c0:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c8c2:	f7ff fb43 	bl	800bf4c <vPortValidateInterruptPriority>
	__asm volatile
 800c8c6:	f3ef 8611 	mrs	r6, BASEPRI
 800c8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ce:	f383 8811 	msr	BASEPRI, r3
 800c8d2:	f3bf 8f6f 	isb	sy
 800c8d6:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c8da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c8dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c8de:	429a      	cmp	r2, r3
 800c8e0:	d30f      	bcc.n	800c902 <xQueueGenericSendFromISR+0x56>
 800c8e2:	2f02      	cmp	r7, #2
 800c8e4:	d00d      	beq.n	800c902 <xQueueGenericSendFromISR+0x56>
			xReturn = errQUEUE_FULL;
 800c8e6:	2000      	movs	r0, #0
	__asm volatile
 800c8e8:	f386 8811 	msr	BASEPRI, r6
}
 800c8ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800c8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f4:	f383 8811 	msr	BASEPRI, r3
 800c8f8:	f3bf 8f6f 	isb	sy
 800c8fc:	f3bf 8f4f 	dsb	sy
 800c900:	e7fe      	b.n	800c900 <xQueueGenericSendFromISR+0x54>
			const int8_t cTxLock = pxQueue->cTxLock;
 800c902:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c906:	463a      	mov	r2, r7
 800c908:	4649      	mov	r1, r9
			const int8_t cTxLock = pxQueue->cTxLock;
 800c90a:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c90c:	4620      	mov	r0, r4
 800c90e:	f7ff fc3b 	bl	800c188 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800c912:	1c6b      	adds	r3, r5, #1
 800c914:	d01d      	beq.n	800c952 <xQueueGenericSendFromISR+0xa6>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c916:	1c6b      	adds	r3, r5, #1
 800c918:	b25b      	sxtb	r3, r3
 800c91a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 800c91e:	2001      	movs	r0, #1
 800c920:	e7e2      	b.n	800c8e8 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c922:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800c924:	2c01      	cmp	r4, #1
 800c926:	d0c8      	beq.n	800c8ba <xQueueGenericSendFromISR+0xe>
 800c928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c92c:	f383 8811 	msr	BASEPRI, r3
 800c930:	f3bf 8f6f 	isb	sy
 800c934:	f3bf 8f4f 	dsb	sy
 800c938:	e7fe      	b.n	800c938 <xQueueGenericSendFromISR+0x8c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c93a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800c93c:	2c00      	cmp	r4, #0
 800c93e:	d0ba      	beq.n	800c8b6 <xQueueGenericSendFromISR+0xa>
 800c940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c944:	f383 8811 	msr	BASEPRI, r3
 800c948:	f3bf 8f6f 	isb	sy
 800c94c:	f3bf 8f4f 	dsb	sy
 800c950:	e7fe      	b.n	800c950 <xQueueGenericSendFromISR+0xa4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c952:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c954:	2b00      	cmp	r3, #0
 800c956:	d0e2      	beq.n	800c91e <xQueueGenericSendFromISR+0x72>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c958:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c95c:	f001 f828 	bl	800d9b0 <xTaskRemoveFromEventList>
 800c960:	2800      	cmp	r0, #0
 800c962:	d0dc      	beq.n	800c91e <xQueueGenericSendFromISR+0x72>
							if( pxHigherPriorityTaskWoken != NULL )
 800c964:	f1b8 0f00 	cmp.w	r8, #0
 800c968:	d0d9      	beq.n	800c91e <xQueueGenericSendFromISR+0x72>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c96a:	2001      	movs	r0, #1
 800c96c:	f8c8 0000 	str.w	r0, [r8]
 800c970:	e7ba      	b.n	800c8e8 <xQueueGenericSendFromISR+0x3c>
 800c972:	bf00      	nop

0800c974 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 800c974:	b378      	cbz	r0, 800c9d6 <xQueueGiveFromISR+0x62>
	configASSERT( pxQueue->uxItemSize == 0 );
 800c976:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800c978:	b143      	cbz	r3, 800c98c <xQueueGiveFromISR+0x18>
 800c97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c97e:	f383 8811 	msr	BASEPRI, r3
 800c982:	f3bf 8f6f 	isb	sy
 800c986:	f3bf 8f4f 	dsb	sy
 800c98a:	e7fe      	b.n	800c98a <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800c98c:	6803      	ldr	r3, [r0, #0]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d03a      	beq.n	800ca08 <xQueueGiveFromISR+0x94>
{
 800c992:	b570      	push	{r4, r5, r6, lr}
 800c994:	4604      	mov	r4, r0
 800c996:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c998:	f7ff fad8 	bl	800bf4c <vPortValidateInterruptPriority>
	__asm volatile
 800c99c:	f3ef 8611 	mrs	r6, BASEPRI
 800c9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a4:	f383 8811 	msr	BASEPRI, r3
 800c9a8:	f3bf 8f6f 	isb	sy
 800c9ac:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c9b0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c9b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d225      	bcs.n	800ca04 <xQueueGiveFromISR+0x90>
			const int8_t cTxLock = pxQueue->cTxLock;
 800c9b8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c9bc:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 800c9be:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c9c0:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800c9c2:	1c5a      	adds	r2, r3, #1
 800c9c4:	d010      	beq.n	800c9e8 <xQueueGiveFromISR+0x74>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	b25b      	sxtb	r3, r3
 800c9ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 800c9ce:	2001      	movs	r0, #1
	__asm volatile
 800c9d0:	f386 8811 	msr	BASEPRI, r6
}
 800c9d4:	bd70      	pop	{r4, r5, r6, pc}
	__asm volatile
 800c9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9da:	f383 8811 	msr	BASEPRI, r3
 800c9de:	f3bf 8f6f 	isb	sy
 800c9e2:	f3bf 8f4f 	dsb	sy
 800c9e6:	e7fe      	b.n	800c9e6 <xQueueGiveFromISR+0x72>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c9e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d0ef      	beq.n	800c9ce <xQueueGiveFromISR+0x5a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c9ee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c9f2:	f000 ffdd 	bl	800d9b0 <xTaskRemoveFromEventList>
 800c9f6:	2800      	cmp	r0, #0
 800c9f8:	d0e9      	beq.n	800c9ce <xQueueGiveFromISR+0x5a>
							if( pxHigherPriorityTaskWoken != NULL )
 800c9fa:	2d00      	cmp	r5, #0
 800c9fc:	d0e7      	beq.n	800c9ce <xQueueGiveFromISR+0x5a>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c9fe:	2001      	movs	r0, #1
 800ca00:	6028      	str	r0, [r5, #0]
 800ca02:	e7e5      	b.n	800c9d0 <xQueueGiveFromISR+0x5c>
			xReturn = errQUEUE_FULL;
 800ca04:	2000      	movs	r0, #0
 800ca06:	e7e3      	b.n	800c9d0 <xQueueGiveFromISR+0x5c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800ca08:	6843      	ldr	r3, [r0, #4]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d0c1      	beq.n	800c992 <xQueueGiveFromISR+0x1e>
 800ca0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca12:	f383 8811 	msr	BASEPRI, r3
 800ca16:	f3bf 8f6f 	isb	sy
 800ca1a:	f3bf 8f4f 	dsb	sy
 800ca1e:	e7fe      	b.n	800ca1e <xQueueGiveFromISR+0xaa>

0800ca20 <xQueueReceive>:
{
 800ca20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca24:	b085      	sub	sp, #20
 800ca26:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800ca28:	2800      	cmp	r0, #0
 800ca2a:	f000 8150 	beq.w	800ccce <xQueueReceive+0x2ae>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca2e:	2900      	cmp	r1, #0
 800ca30:	f000 815c 	beq.w	800ccec <xQueueReceive+0x2cc>
 800ca34:	4604      	mov	r4, r0
 800ca36:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ca38:	f001 f85c 	bl	800daf4 <xTaskGetSchedulerState>
 800ca3c:	b950      	cbnz	r0, 800ca54 <xQueueReceive+0x34>
 800ca3e:	9d01      	ldr	r5, [sp, #4]
 800ca40:	b14d      	cbz	r5, 800ca56 <xQueueReceive+0x36>
 800ca42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca46:	f383 8811 	msr	BASEPRI, r3
 800ca4a:	f3bf 8f6f 	isb	sy
 800ca4e:	f3bf 8f4f 	dsb	sy
 800ca52:	e7fe      	b.n	800ca52 <xQueueReceive+0x32>
 800ca54:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
 800ca56:	f7ff f955 	bl	800bd04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca5a:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
					portYIELD_WITHIN_API();
 800ca5e:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 800cd28 <xQueueReceive+0x308>
		prvLockQueue( pxQueue );
 800ca62:	2700      	movs	r7, #0
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca64:	f1b9 0f00 	cmp.w	r9, #0
 800ca68:	f040 8086 	bne.w	800cb78 <xQueueReceive+0x158>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ca6c:	9b01      	ldr	r3, [sp, #4]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	f000 8136 	beq.w	800cce0 <xQueueReceive+0x2c0>
				else if( xEntryTimeSet == pdFALSE )
 800ca74:	b915      	cbnz	r5, 800ca7c <xQueueReceive+0x5c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ca76:	a802      	add	r0, sp, #8
 800ca78:	f000 ffde 	bl	800da38 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800ca7c:	f7ff f964 	bl	800bd48 <vPortExitCritical>
		vTaskSuspendAll();
 800ca80:	f000 fd3e 	bl	800d500 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ca84:	f7ff f93e 	bl	800bd04 <vPortEnterCritical>
 800ca88:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ca8c:	2bff      	cmp	r3, #255	; 0xff
 800ca8e:	bf08      	it	eq
 800ca90:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 800ca94:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ca98:	2bff      	cmp	r3, #255	; 0xff
 800ca9a:	bf08      	it	eq
 800ca9c:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 800caa0:	f7ff f952 	bl	800bd48 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800caa4:	a901      	add	r1, sp, #4
 800caa6:	a802      	add	r0, sp, #8
 800caa8:	f000 ffd2 	bl	800da50 <xTaskCheckForTimeOut>
 800caac:	2800      	cmp	r0, #0
 800caae:	f040 80be 	bne.w	800cc2e <xQueueReceive+0x20e>
	taskENTER_CRITICAL();
 800cab2:	f7ff f927 	bl	800bd04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cab6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d16c      	bne.n	800cb96 <xQueueReceive+0x176>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cabc:	f104 0924 	add.w	r9, r4, #36	; 0x24
	taskEXIT_CRITICAL();
 800cac0:	f7ff f942 	bl	800bd48 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cac4:	4648      	mov	r0, r9
 800cac6:	9901      	ldr	r1, [sp, #4]
 800cac8:	f000 fec0 	bl	800d84c <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 800cacc:	f7ff f91a 	bl	800bd04 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800cad0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800cad4:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cad6:	2d00      	cmp	r5, #0
 800cad8:	dc04      	bgt.n	800cae4 <xQueueReceive+0xc4>
 800cada:	e011      	b.n	800cb00 <xQueueReceive+0xe0>
 800cadc:	3d01      	subs	r5, #1
 800cade:	b2eb      	uxtb	r3, r5
 800cae0:	b25d      	sxtb	r5, r3
 800cae2:	b16b      	cbz	r3, 800cb00 <xQueueReceive+0xe0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cae4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cae6:	b15b      	cbz	r3, 800cb00 <xQueueReceive+0xe0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cae8:	4648      	mov	r0, r9
 800caea:	f000 ff61 	bl	800d9b0 <xTaskRemoveFromEventList>
 800caee:	2800      	cmp	r0, #0
 800caf0:	d0f4      	beq.n	800cadc <xQueueReceive+0xbc>
 800caf2:	3d01      	subs	r5, #1
						vTaskMissedYield();
 800caf4:	f000 fff8 	bl	800dae8 <vTaskMissedYield>
 800caf8:	b2eb      	uxtb	r3, r5
 800cafa:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d1f1      	bne.n	800cae4 <xQueueReceive+0xc4>
		pxQueue->cTxLock = queueUNLOCKED;
 800cb00:	23ff      	movs	r3, #255	; 0xff
 800cb02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800cb06:	f7ff f91f 	bl	800bd48 <vPortExitCritical>
	taskENTER_CRITICAL();
 800cb0a:	f7ff f8fb 	bl	800bd04 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800cb0e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800cb12:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb14:	2d00      	cmp	r5, #0
 800cb16:	dd16      	ble.n	800cb46 <xQueueReceive+0x126>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb18:	6923      	ldr	r3, [r4, #16]
 800cb1a:	b1a3      	cbz	r3, 800cb46 <xQueueReceive+0x126>
 800cb1c:	f104 0910 	add.w	r9, r4, #16
 800cb20:	e005      	b.n	800cb2e <xQueueReceive+0x10e>
 800cb22:	3d01      	subs	r5, #1
 800cb24:	b2eb      	uxtb	r3, r5
 800cb26:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb28:	b16b      	cbz	r3, 800cb46 <xQueueReceive+0x126>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb2a:	6923      	ldr	r3, [r4, #16]
 800cb2c:	b15b      	cbz	r3, 800cb46 <xQueueReceive+0x126>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb2e:	4648      	mov	r0, r9
 800cb30:	f000 ff3e 	bl	800d9b0 <xTaskRemoveFromEventList>
 800cb34:	2800      	cmp	r0, #0
 800cb36:	d0f4      	beq.n	800cb22 <xQueueReceive+0x102>
 800cb38:	3d01      	subs	r5, #1
					vTaskMissedYield();
 800cb3a:	f000 ffd5 	bl	800dae8 <vTaskMissedYield>
 800cb3e:	b2eb      	uxtb	r3, r5
 800cb40:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d1f1      	bne.n	800cb2a <xQueueReceive+0x10a>
		pxQueue->cRxLock = queueUNLOCKED;
 800cb46:	23ff      	movs	r3, #255	; 0xff
 800cb48:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800cb4c:	f7ff f8fc 	bl	800bd48 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 800cb50:	f000 fd92 	bl	800d678 <xTaskResumeAll>
 800cb54:	b938      	cbnz	r0, 800cb66 <xQueueReceive+0x146>
					portYIELD_WITHIN_API();
 800cb56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cb5a:	f8c8 3000 	str.w	r3, [r8]
 800cb5e:	f3bf 8f4f 	dsb	sy
 800cb62:	f3bf 8f6f 	isb	sy
 800cb66:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800cb68:	f7ff f8cc 	bl	800bd04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb6c:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cb70:	f1b9 0f00 	cmp.w	r9, #0
 800cb74:	f43f af7a 	beq.w	800ca6c <xQueueReceive+0x4c>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cb78:	4631      	mov	r1, r6
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	f7ff fb3a 	bl	800c1f4 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cb80:	f109 33ff 	add.w	r3, r9, #4294967295
 800cb84:	63a3      	str	r3, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb86:	6923      	ldr	r3, [r4, #16]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	f040 80bc 	bne.w	800cd06 <xQueueReceive+0x2e6>
				taskEXIT_CRITICAL();
 800cb8e:	f7ff f8db 	bl	800bd48 <vPortExitCritical>
				return pdPASS;
 800cb92:	2001      	movs	r0, #1
 800cb94:	e0a7      	b.n	800cce6 <xQueueReceive+0x2c6>
	taskEXIT_CRITICAL();
 800cb96:	f7ff f8d7 	bl	800bd48 <vPortExitCritical>
	taskENTER_CRITICAL();
 800cb9a:	f7ff f8b3 	bl	800bd04 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800cb9e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800cba2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cba4:	2d00      	cmp	r5, #0
 800cba6:	dd16      	ble.n	800cbd6 <xQueueReceive+0x1b6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cba8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cbaa:	b1a3      	cbz	r3, 800cbd6 <xQueueReceive+0x1b6>
 800cbac:	f104 0924 	add.w	r9, r4, #36	; 0x24
 800cbb0:	e005      	b.n	800cbbe <xQueueReceive+0x19e>
 800cbb2:	3d01      	subs	r5, #1
 800cbb4:	b2eb      	uxtb	r3, r5
 800cbb6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cbb8:	b16b      	cbz	r3, 800cbd6 <xQueueReceive+0x1b6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cbba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cbbc:	b15b      	cbz	r3, 800cbd6 <xQueueReceive+0x1b6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cbbe:	4648      	mov	r0, r9
 800cbc0:	f000 fef6 	bl	800d9b0 <xTaskRemoveFromEventList>
 800cbc4:	2800      	cmp	r0, #0
 800cbc6:	d0f4      	beq.n	800cbb2 <xQueueReceive+0x192>
 800cbc8:	3d01      	subs	r5, #1
						vTaskMissedYield();
 800cbca:	f000 ff8d 	bl	800dae8 <vTaskMissedYield>
 800cbce:	b2eb      	uxtb	r3, r5
 800cbd0:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d1f1      	bne.n	800cbba <xQueueReceive+0x19a>
		pxQueue->cTxLock = queueUNLOCKED;
 800cbd6:	23ff      	movs	r3, #255	; 0xff
 800cbd8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800cbdc:	f7ff f8b4 	bl	800bd48 <vPortExitCritical>
	taskENTER_CRITICAL();
 800cbe0:	f7ff f890 	bl	800bd04 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800cbe4:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800cbe8:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cbea:	2d00      	cmp	r5, #0
 800cbec:	dd16      	ble.n	800cc1c <xQueueReceive+0x1fc>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbee:	6923      	ldr	r3, [r4, #16]
 800cbf0:	b1a3      	cbz	r3, 800cc1c <xQueueReceive+0x1fc>
 800cbf2:	f104 0910 	add.w	r9, r4, #16
 800cbf6:	e005      	b.n	800cc04 <xQueueReceive+0x1e4>
 800cbf8:	3d01      	subs	r5, #1
 800cbfa:	b2eb      	uxtb	r3, r5
 800cbfc:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cbfe:	b16b      	cbz	r3, 800cc1c <xQueueReceive+0x1fc>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc00:	6923      	ldr	r3, [r4, #16]
 800cc02:	b15b      	cbz	r3, 800cc1c <xQueueReceive+0x1fc>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc04:	4648      	mov	r0, r9
 800cc06:	f000 fed3 	bl	800d9b0 <xTaskRemoveFromEventList>
 800cc0a:	2800      	cmp	r0, #0
 800cc0c:	d0f4      	beq.n	800cbf8 <xQueueReceive+0x1d8>
 800cc0e:	3d01      	subs	r5, #1
					vTaskMissedYield();
 800cc10:	f000 ff6a 	bl	800dae8 <vTaskMissedYield>
 800cc14:	b2eb      	uxtb	r3, r5
 800cc16:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d1f1      	bne.n	800cc00 <xQueueReceive+0x1e0>
		pxQueue->cRxLock = queueUNLOCKED;
 800cc1c:	23ff      	movs	r3, #255	; 0xff
 800cc1e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800cc22:	f7ff f891 	bl	800bd48 <vPortExitCritical>
 800cc26:	2501      	movs	r5, #1
				( void ) xTaskResumeAll();
 800cc28:	f000 fd26 	bl	800d678 <xTaskResumeAll>
 800cc2c:	e79c      	b.n	800cb68 <xQueueReceive+0x148>
	taskENTER_CRITICAL();
 800cc2e:	f7ff f869 	bl	800bd04 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800cc32:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800cc36:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cc38:	2d00      	cmp	r5, #0
 800cc3a:	dd16      	ble.n	800cc6a <xQueueReceive+0x24a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc3e:	b1a3      	cbz	r3, 800cc6a <xQueueReceive+0x24a>
 800cc40:	f104 0924 	add.w	r9, r4, #36	; 0x24
 800cc44:	e005      	b.n	800cc52 <xQueueReceive+0x232>
 800cc46:	3d01      	subs	r5, #1
 800cc48:	b2eb      	uxtb	r3, r5
 800cc4a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cc4c:	b16b      	cbz	r3, 800cc6a <xQueueReceive+0x24a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc50:	b15b      	cbz	r3, 800cc6a <xQueueReceive+0x24a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc52:	4648      	mov	r0, r9
 800cc54:	f000 feac 	bl	800d9b0 <xTaskRemoveFromEventList>
 800cc58:	2800      	cmp	r0, #0
 800cc5a:	d0f4      	beq.n	800cc46 <xQueueReceive+0x226>
 800cc5c:	3d01      	subs	r5, #1
						vTaskMissedYield();
 800cc5e:	f000 ff43 	bl	800dae8 <vTaskMissedYield>
 800cc62:	b2eb      	uxtb	r3, r5
 800cc64:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d1f1      	bne.n	800cc4e <xQueueReceive+0x22e>
		pxQueue->cTxLock = queueUNLOCKED;
 800cc6a:	23ff      	movs	r3, #255	; 0xff
 800cc6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800cc70:	f7ff f86a 	bl	800bd48 <vPortExitCritical>
	taskENTER_CRITICAL();
 800cc74:	f7ff f846 	bl	800bd04 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800cc78:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800cc7c:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cc7e:	2d00      	cmp	r5, #0
 800cc80:	dd16      	ble.n	800ccb0 <xQueueReceive+0x290>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc82:	6923      	ldr	r3, [r4, #16]
 800cc84:	b1a3      	cbz	r3, 800ccb0 <xQueueReceive+0x290>
 800cc86:	f104 0910 	add.w	r9, r4, #16
 800cc8a:	e005      	b.n	800cc98 <xQueueReceive+0x278>
 800cc8c:	3d01      	subs	r5, #1
 800cc8e:	b2eb      	uxtb	r3, r5
 800cc90:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cc92:	b16b      	cbz	r3, 800ccb0 <xQueueReceive+0x290>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc94:	6923      	ldr	r3, [r4, #16]
 800cc96:	b15b      	cbz	r3, 800ccb0 <xQueueReceive+0x290>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc98:	4648      	mov	r0, r9
 800cc9a:	f000 fe89 	bl	800d9b0 <xTaskRemoveFromEventList>
 800cc9e:	2800      	cmp	r0, #0
 800cca0:	d0f4      	beq.n	800cc8c <xQueueReceive+0x26c>
 800cca2:	3d01      	subs	r5, #1
					vTaskMissedYield();
 800cca4:	f000 ff20 	bl	800dae8 <vTaskMissedYield>
 800cca8:	b2eb      	uxtb	r3, r5
 800ccaa:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d1f1      	bne.n	800cc94 <xQueueReceive+0x274>
		pxQueue->cRxLock = queueUNLOCKED;
 800ccb0:	23ff      	movs	r3, #255	; 0xff
 800ccb2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800ccb6:	f7ff f847 	bl	800bd48 <vPortExitCritical>
			( void ) xTaskResumeAll();
 800ccba:	f000 fcdd 	bl	800d678 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800ccbe:	f7ff f821 	bl	800bd04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ccc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ccc4:	b163      	cbz	r3, 800cce0 <xQueueReceive+0x2c0>
	taskEXIT_CRITICAL();
 800ccc6:	f7ff f83f 	bl	800bd48 <vPortExitCritical>
 800ccca:	2501      	movs	r5, #1
 800cccc:	e74c      	b.n	800cb68 <xQueueReceive+0x148>
 800ccce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd2:	f383 8811 	msr	BASEPRI, r3
 800ccd6:	f3bf 8f6f 	isb	sy
 800ccda:	f3bf 8f4f 	dsb	sy
 800ccde:	e7fe      	b.n	800ccde <xQueueReceive+0x2be>
					taskEXIT_CRITICAL();
 800cce0:	f7ff f832 	bl	800bd48 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800cce4:	2000      	movs	r0, #0
}
 800cce6:	b005      	add	sp, #20
 800cce8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ccec:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	f43f aea0 	beq.w	800ca34 <xQueueReceive+0x14>
 800ccf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf8:	f383 8811 	msr	BASEPRI, r3
 800ccfc:	f3bf 8f6f 	isb	sy
 800cd00:	f3bf 8f4f 	dsb	sy
 800cd04:	e7fe      	b.n	800cd04 <xQueueReceive+0x2e4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd06:	f104 0010 	add.w	r0, r4, #16
 800cd0a:	f000 fe51 	bl	800d9b0 <xTaskRemoveFromEventList>
 800cd0e:	2800      	cmp	r0, #0
 800cd10:	f43f af3d 	beq.w	800cb8e <xQueueReceive+0x16e>
						queueYIELD_IF_USING_PREEMPTION();
 800cd14:	4b04      	ldr	r3, [pc, #16]	; (800cd28 <xQueueReceive+0x308>)
 800cd16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd1a:	601a      	str	r2, [r3, #0]
 800cd1c:	f3bf 8f4f 	dsb	sy
 800cd20:	f3bf 8f6f 	isb	sy
 800cd24:	e733      	b.n	800cb8e <xQueueReceive+0x16e>
 800cd26:	bf00      	nop
 800cd28:	e000ed04 	.word	0xe000ed04

0800cd2c <xQueueSemaphoreTake>:
{
 800cd2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd30:	b085      	sub	sp, #20
 800cd32:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800cd34:	b150      	cbz	r0, 800cd4c <xQueueSemaphoreTake+0x20>
	configASSERT( pxQueue->uxItemSize == 0 );
 800cd36:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800cd38:	b18d      	cbz	r5, 800cd5e <xQueueSemaphoreTake+0x32>
 800cd3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd3e:	f383 8811 	msr	BASEPRI, r3
 800cd42:	f3bf 8f6f 	isb	sy
 800cd46:	f3bf 8f4f 	dsb	sy
 800cd4a:	e7fe      	b.n	800cd4a <xQueueSemaphoreTake+0x1e>
 800cd4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd50:	f383 8811 	msr	BASEPRI, r3
 800cd54:	f3bf 8f6f 	isb	sy
 800cd58:	f3bf 8f4f 	dsb	sy
 800cd5c:	e7fe      	b.n	800cd5c <xQueueSemaphoreTake+0x30>
 800cd5e:	4604      	mov	r4, r0
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd60:	f000 fec8 	bl	800daf4 <xTaskGetSchedulerState>
 800cd64:	b918      	cbnz	r0, 800cd6e <xQueueSemaphoreTake+0x42>
 800cd66:	9d01      	ldr	r5, [sp, #4]
 800cd68:	2d00      	cmp	r5, #0
 800cd6a:	f040 8102 	bne.w	800cf72 <xQueueSemaphoreTake+0x246>
		taskENTER_CRITICAL();
 800cd6e:	f7fe ffc9 	bl	800bd04 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cd72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
					portYIELD_WITHIN_API();
 800cd74:	f8df 8268 	ldr.w	r8, [pc, #616]	; 800cfe0 <xQueueSemaphoreTake+0x2b4>
 800cd78:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800cd7a:	2700      	movs	r7, #0
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	f040 8087 	bne.w	800ce90 <xQueueSemaphoreTake+0x164>
				if( xTicksToWait == ( TickType_t ) 0 )
 800cd82:	9b01      	ldr	r3, [sp, #4]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	f000 810c 	beq.w	800cfa2 <xQueueSemaphoreTake+0x276>
				else if( xEntryTimeSet == pdFALSE )
 800cd8a:	b916      	cbnz	r6, 800cd92 <xQueueSemaphoreTake+0x66>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cd8c:	a802      	add	r0, sp, #8
 800cd8e:	f000 fe53 	bl	800da38 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800cd92:	f7fe ffd9 	bl	800bd48 <vPortExitCritical>
		vTaskSuspendAll();
 800cd96:	f000 fbb3 	bl	800d500 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cd9a:	f7fe ffb3 	bl	800bd04 <vPortEnterCritical>
 800cd9e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cda2:	2bff      	cmp	r3, #255	; 0xff
 800cda4:	bf08      	it	eq
 800cda6:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 800cdaa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cdae:	2bff      	cmp	r3, #255	; 0xff
 800cdb0:	bf08      	it	eq
 800cdb2:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 800cdb6:	f7fe ffc7 	bl	800bd48 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cdba:	a901      	add	r1, sp, #4
 800cdbc:	a802      	add	r0, sp, #8
 800cdbe:	f000 fe47 	bl	800da50 <xTaskCheckForTimeOut>
 800cdc2:	2800      	cmp	r0, #0
 800cdc4:	d17d      	bne.n	800cec2 <xQueueSemaphoreTake+0x196>
	taskENTER_CRITICAL();
 800cdc6:	f7fe ff9d 	bl	800bd04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cdca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d170      	bne.n	800ceb2 <xQueueSemaphoreTake+0x186>
	taskEXIT_CRITICAL();
 800cdd0:	f7fe ffba 	bl	800bd48 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cdd4:	6823      	ldr	r3, [r4, #0]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	f000 80c2 	beq.w	800cf60 <xQueueSemaphoreTake+0x234>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cddc:	f104 0924 	add.w	r9, r4, #36	; 0x24
 800cde0:	4648      	mov	r0, r9
 800cde2:	9901      	ldr	r1, [sp, #4]
 800cde4:	f000 fd32 	bl	800d84c <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 800cde8:	f7fe ff8c 	bl	800bd04 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800cdec:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
 800cdf0:	b276      	sxtb	r6, r6
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cdf2:	2e00      	cmp	r6, #0
 800cdf4:	dc04      	bgt.n	800ce00 <xQueueSemaphoreTake+0xd4>
 800cdf6:	e011      	b.n	800ce1c <xQueueSemaphoreTake+0xf0>
 800cdf8:	3e01      	subs	r6, #1
 800cdfa:	b2f3      	uxtb	r3, r6
 800cdfc:	b25e      	sxtb	r6, r3
 800cdfe:	b16b      	cbz	r3, 800ce1c <xQueueSemaphoreTake+0xf0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce02:	b15b      	cbz	r3, 800ce1c <xQueueSemaphoreTake+0xf0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce04:	4648      	mov	r0, r9
 800ce06:	f000 fdd3 	bl	800d9b0 <xTaskRemoveFromEventList>
 800ce0a:	2800      	cmp	r0, #0
 800ce0c:	d0f4      	beq.n	800cdf8 <xQueueSemaphoreTake+0xcc>
 800ce0e:	3e01      	subs	r6, #1
						vTaskMissedYield();
 800ce10:	f000 fe6a 	bl	800dae8 <vTaskMissedYield>
 800ce14:	b2f3      	uxtb	r3, r6
 800ce16:	b25e      	sxtb	r6, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d1f1      	bne.n	800ce00 <xQueueSemaphoreTake+0xd4>
		pxQueue->cTxLock = queueUNLOCKED;
 800ce1c:	23ff      	movs	r3, #255	; 0xff
 800ce1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800ce22:	f7fe ff91 	bl	800bd48 <vPortExitCritical>
	taskENTER_CRITICAL();
 800ce26:	f7fe ff6d 	bl	800bd04 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800ce2a:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 800ce2e:	b276      	sxtb	r6, r6
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ce30:	2e00      	cmp	r6, #0
 800ce32:	dd16      	ble.n	800ce62 <xQueueSemaphoreTake+0x136>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce34:	6923      	ldr	r3, [r4, #16]
 800ce36:	b1a3      	cbz	r3, 800ce62 <xQueueSemaphoreTake+0x136>
 800ce38:	f104 0910 	add.w	r9, r4, #16
 800ce3c:	e005      	b.n	800ce4a <xQueueSemaphoreTake+0x11e>
 800ce3e:	3e01      	subs	r6, #1
 800ce40:	b2f3      	uxtb	r3, r6
 800ce42:	b25e      	sxtb	r6, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ce44:	b16b      	cbz	r3, 800ce62 <xQueueSemaphoreTake+0x136>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce46:	6923      	ldr	r3, [r4, #16]
 800ce48:	b15b      	cbz	r3, 800ce62 <xQueueSemaphoreTake+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce4a:	4648      	mov	r0, r9
 800ce4c:	f000 fdb0 	bl	800d9b0 <xTaskRemoveFromEventList>
 800ce50:	2800      	cmp	r0, #0
 800ce52:	d0f4      	beq.n	800ce3e <xQueueSemaphoreTake+0x112>
 800ce54:	3e01      	subs	r6, #1
					vTaskMissedYield();
 800ce56:	f000 fe47 	bl	800dae8 <vTaskMissedYield>
 800ce5a:	b2f3      	uxtb	r3, r6
 800ce5c:	b25e      	sxtb	r6, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d1f1      	bne.n	800ce46 <xQueueSemaphoreTake+0x11a>
		pxQueue->cRxLock = queueUNLOCKED;
 800ce62:	23ff      	movs	r3, #255	; 0xff
 800ce64:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800ce68:	f7fe ff6e 	bl	800bd48 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 800ce6c:	f000 fc04 	bl	800d678 <xTaskResumeAll>
 800ce70:	b938      	cbnz	r0, 800ce82 <xQueueSemaphoreTake+0x156>
					portYIELD_WITHIN_API();
 800ce72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ce76:	f8c8 3000 	str.w	r3, [r8]
 800ce7a:	f3bf 8f4f 	dsb	sy
 800ce7e:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 800ce82:	f7fe ff3f 	bl	800bd04 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ce86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ce88:	2601      	movs	r6, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	f43f af79 	beq.w	800cd82 <xQueueSemaphoreTake+0x56>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ce90:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ce92:	3b01      	subs	r3, #1
 800ce94:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ce96:	b912      	cbnz	r2, 800ce9e <xQueueSemaphoreTake+0x172>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800ce98:	f000 ff50 	bl	800dd3c <pvTaskIncrementMutexHeldCount>
 800ce9c:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce9e:	6923      	ldr	r3, [r4, #16]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d16f      	bne.n	800cf84 <xQueueSemaphoreTake+0x258>
				taskEXIT_CRITICAL();
 800cea4:	f7fe ff50 	bl	800bd48 <vPortExitCritical>
				return pdPASS;
 800cea8:	2501      	movs	r5, #1
}
 800ceaa:	4628      	mov	r0, r5
 800ceac:	b005      	add	sp, #20
 800ceae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 800ceb2:	f7fe ff49 	bl	800bd48 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800ceb6:	4620      	mov	r0, r4
 800ceb8:	f7ff f9b0 	bl	800c21c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cebc:	f000 fbdc 	bl	800d678 <xTaskResumeAll>
 800cec0:	e7df      	b.n	800ce82 <xQueueSemaphoreTake+0x156>
	taskENTER_CRITICAL();
 800cec2:	f7fe ff1f 	bl	800bd04 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800cec6:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
 800ceca:	b276      	sxtb	r6, r6
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cecc:	2e00      	cmp	r6, #0
 800cece:	dd16      	ble.n	800cefe <xQueueSemaphoreTake+0x1d2>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ced0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ced2:	b1a3      	cbz	r3, 800cefe <xQueueSemaphoreTake+0x1d2>
 800ced4:	f104 0924 	add.w	r9, r4, #36	; 0x24
 800ced8:	e005      	b.n	800cee6 <xQueueSemaphoreTake+0x1ba>
 800ceda:	3e01      	subs	r6, #1
 800cedc:	b2f3      	uxtb	r3, r6
 800cede:	b25e      	sxtb	r6, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cee0:	b16b      	cbz	r3, 800cefe <xQueueSemaphoreTake+0x1d2>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cee2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cee4:	b15b      	cbz	r3, 800cefe <xQueueSemaphoreTake+0x1d2>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cee6:	4648      	mov	r0, r9
 800cee8:	f000 fd62 	bl	800d9b0 <xTaskRemoveFromEventList>
 800ceec:	2800      	cmp	r0, #0
 800ceee:	d0f4      	beq.n	800ceda <xQueueSemaphoreTake+0x1ae>
 800cef0:	3e01      	subs	r6, #1
						vTaskMissedYield();
 800cef2:	f000 fdf9 	bl	800dae8 <vTaskMissedYield>
 800cef6:	b2f3      	uxtb	r3, r6
 800cef8:	b25e      	sxtb	r6, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d1f1      	bne.n	800cee2 <xQueueSemaphoreTake+0x1b6>
		pxQueue->cTxLock = queueUNLOCKED;
 800cefe:	23ff      	movs	r3, #255	; 0xff
 800cf00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800cf04:	f7fe ff20 	bl	800bd48 <vPortExitCritical>
	taskENTER_CRITICAL();
 800cf08:	f7fe fefc 	bl	800bd04 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800cf0c:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 800cf10:	b276      	sxtb	r6, r6
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cf12:	2e00      	cmp	r6, #0
 800cf14:	dd16      	ble.n	800cf44 <xQueueSemaphoreTake+0x218>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf16:	6923      	ldr	r3, [r4, #16]
 800cf18:	b1a3      	cbz	r3, 800cf44 <xQueueSemaphoreTake+0x218>
 800cf1a:	f104 0910 	add.w	r9, r4, #16
 800cf1e:	e005      	b.n	800cf2c <xQueueSemaphoreTake+0x200>
 800cf20:	3e01      	subs	r6, #1
 800cf22:	b2f3      	uxtb	r3, r6
 800cf24:	b25e      	sxtb	r6, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cf26:	b16b      	cbz	r3, 800cf44 <xQueueSemaphoreTake+0x218>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf28:	6923      	ldr	r3, [r4, #16]
 800cf2a:	b15b      	cbz	r3, 800cf44 <xQueueSemaphoreTake+0x218>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf2c:	4648      	mov	r0, r9
 800cf2e:	f000 fd3f 	bl	800d9b0 <xTaskRemoveFromEventList>
 800cf32:	2800      	cmp	r0, #0
 800cf34:	d0f4      	beq.n	800cf20 <xQueueSemaphoreTake+0x1f4>
 800cf36:	3e01      	subs	r6, #1
					vTaskMissedYield();
 800cf38:	f000 fdd6 	bl	800dae8 <vTaskMissedYield>
 800cf3c:	b2f3      	uxtb	r3, r6
 800cf3e:	b25e      	sxtb	r6, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d1f1      	bne.n	800cf28 <xQueueSemaphoreTake+0x1fc>
		pxQueue->cRxLock = queueUNLOCKED;
 800cf44:	23ff      	movs	r3, #255	; 0xff
 800cf46:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800cf4a:	f7fe fefd 	bl	800bd48 <vPortExitCritical>
			( void ) xTaskResumeAll();
 800cf4e:	f000 fb93 	bl	800d678 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800cf52:	f7fe fed7 	bl	800bd04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cf56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cf58:	b36b      	cbz	r3, 800cfb6 <xQueueSemaphoreTake+0x28a>
	taskEXIT_CRITICAL();
 800cf5a:	f7fe fef5 	bl	800bd48 <vPortExitCritical>
 800cf5e:	e790      	b.n	800ce82 <xQueueSemaphoreTake+0x156>
						taskENTER_CRITICAL();
 800cf60:	f7fe fed0 	bl	800bd04 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800cf64:	6860      	ldr	r0, [r4, #4]
 800cf66:	f000 fdd5 	bl	800db14 <xTaskPriorityInherit>
 800cf6a:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800cf6c:	f7fe feec 	bl	800bd48 <vPortExitCritical>
 800cf70:	e734      	b.n	800cddc <xQueueSemaphoreTake+0xb0>
 800cf72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf76:	f383 8811 	msr	BASEPRI, r3
 800cf7a:	f3bf 8f6f 	isb	sy
 800cf7e:	f3bf 8f4f 	dsb	sy
 800cf82:	e7fe      	b.n	800cf82 <xQueueSemaphoreTake+0x256>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf84:	f104 0010 	add.w	r0, r4, #16
 800cf88:	f000 fd12 	bl	800d9b0 <xTaskRemoveFromEventList>
 800cf8c:	2800      	cmp	r0, #0
 800cf8e:	d089      	beq.n	800cea4 <xQueueSemaphoreTake+0x178>
						queueYIELD_IF_USING_PREEMPTION();
 800cf90:	4b13      	ldr	r3, [pc, #76]	; (800cfe0 <xQueueSemaphoreTake+0x2b4>)
 800cf92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf96:	601a      	str	r2, [r3, #0]
 800cf98:	f3bf 8f4f 	dsb	sy
 800cf9c:	f3bf 8f6f 	isb	sy
 800cfa0:	e780      	b.n	800cea4 <xQueueSemaphoreTake+0x178>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cfa2:	b1cd      	cbz	r5, 800cfd8 <xQueueSemaphoreTake+0x2ac>
 800cfa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa8:	f383 8811 	msr	BASEPRI, r3
 800cfac:	f3bf 8f6f 	isb	sy
 800cfb0:	f3bf 8f4f 	dsb	sy
 800cfb4:	e7fe      	b.n	800cfb4 <xQueueSemaphoreTake+0x288>
	taskEXIT_CRITICAL();
 800cfb6:	f7fe fec7 	bl	800bd48 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 800cfba:	2d00      	cmp	r5, #0
 800cfbc:	f43f af75 	beq.w	800ceaa <xQueueSemaphoreTake+0x17e>
						taskENTER_CRITICAL();
 800cfc0:	f7fe fea0 	bl	800bd04 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800cfc4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cfc6:	b119      	cbz	r1, 800cfd0 <xQueueSemaphoreTake+0x2a4>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cfc8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800cfca:	6819      	ldr	r1, [r3, #0]
 800cfcc:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800cfd0:	6860      	ldr	r0, [r4, #4]
 800cfd2:	f000 fe51 	bl	800dc78 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 800cfd6:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 800cfd8:	f7fe feb6 	bl	800bd48 <vPortExitCritical>
 800cfdc:	e765      	b.n	800ceaa <xQueueSemaphoreTake+0x17e>
 800cfde:	bf00      	nop
 800cfe0:	e000ed04 	.word	0xe000ed04

0800cfe4 <xQueueReceiveFromISR>:
{
 800cfe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800cfe8:	b1b0      	cbz	r0, 800d018 <xQueueReceiveFromISR+0x34>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cfea:	b379      	cbz	r1, 800d04c <xQueueReceiveFromISR+0x68>
 800cfec:	4605      	mov	r5, r0
 800cfee:	4690      	mov	r8, r2
 800cff0:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cff2:	f7fe ffab 	bl	800bf4c <vPortValidateInterruptPriority>
	__asm volatile
 800cff6:	f3ef 8711 	mrs	r7, BASEPRI
 800cffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cffe:	f383 8811 	msr	BASEPRI, r3
 800d002:	f3bf 8f6f 	isb	sy
 800d006:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d00a:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d00c:	b96c      	cbnz	r4, 800d02a <xQueueReceiveFromISR+0x46>
			xReturn = pdFAIL;
 800d00e:	4620      	mov	r0, r4
	__asm volatile
 800d010:	f387 8811 	msr	BASEPRI, r7
}
 800d014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800d018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d01c:	f383 8811 	msr	BASEPRI, r3
 800d020:	f3bf 8f6f 	isb	sy
 800d024:	f3bf 8f4f 	dsb	sy
 800d028:	e7fe      	b.n	800d028 <xQueueReceiveFromISR+0x44>
			const int8_t cRxLock = pxQueue->cRxLock;
 800d02a:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d02e:	4649      	mov	r1, r9
 800d030:	4628      	mov	r0, r5
			const int8_t cRxLock = pxQueue->cRxLock;
 800d032:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d034:	f7ff f8de 	bl	800c1f4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d038:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 800d03a:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d03c:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800d03e:	d011      	beq.n	800d064 <xQueueReceiveFromISR+0x80>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d040:	1c73      	adds	r3, r6, #1
 800d042:	b25b      	sxtb	r3, r3
 800d044:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
			xReturn = pdPASS;
 800d048:	2001      	movs	r0, #1
 800d04a:	e7e1      	b.n	800d010 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d04c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d0cc      	beq.n	800cfec <xQueueReceiveFromISR+0x8>
 800d052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d056:	f383 8811 	msr	BASEPRI, r3
 800d05a:	f3bf 8f6f 	isb	sy
 800d05e:	f3bf 8f4f 	dsb	sy
 800d062:	e7fe      	b.n	800d062 <xQueueReceiveFromISR+0x7e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d064:	692b      	ldr	r3, [r5, #16]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d0ee      	beq.n	800d048 <xQueueReceiveFromISR+0x64>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d06a:	f105 0010 	add.w	r0, r5, #16
 800d06e:	f000 fc9f 	bl	800d9b0 <xTaskRemoveFromEventList>
 800d072:	2800      	cmp	r0, #0
 800d074:	d0e8      	beq.n	800d048 <xQueueReceiveFromISR+0x64>
						if( pxHigherPriorityTaskWoken != NULL )
 800d076:	f1b8 0f00 	cmp.w	r8, #0
 800d07a:	d0e5      	beq.n	800d048 <xQueueReceiveFromISR+0x64>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d07c:	2001      	movs	r0, #1
 800d07e:	f8c8 0000 	str.w	r0, [r8]
 800d082:	e7c5      	b.n	800d010 <xQueueReceiveFromISR+0x2c>

0800d084 <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d084:	4b13      	ldr	r3, [pc, #76]	; (800d0d4 <vQueueAddToRegistry+0x50>)
 800d086:	681a      	ldr	r2, [r3, #0]
 800d088:	b17a      	cbz	r2, 800d0aa <vQueueAddToRegistry+0x26>
 800d08a:	689a      	ldr	r2, [r3, #8]
 800d08c:	b1b2      	cbz	r2, 800d0bc <vQueueAddToRegistry+0x38>
 800d08e:	691a      	ldr	r2, [r3, #16]
 800d090:	b1b2      	cbz	r2, 800d0c0 <vQueueAddToRegistry+0x3c>
 800d092:	699a      	ldr	r2, [r3, #24]
 800d094:	b1b2      	cbz	r2, 800d0c4 <vQueueAddToRegistry+0x40>
 800d096:	6a1a      	ldr	r2, [r3, #32]
 800d098:	b1b2      	cbz	r2, 800d0c8 <vQueueAddToRegistry+0x44>
 800d09a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d09c:	b1b2      	cbz	r2, 800d0cc <vQueueAddToRegistry+0x48>
 800d09e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d0a0:	b112      	cbz	r2, 800d0a8 <vQueueAddToRegistry+0x24>
 800d0a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0a4:	b1a2      	cbz	r2, 800d0d0 <vQueueAddToRegistry+0x4c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d0a6:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d0a8:	2206      	movs	r2, #6
	{
 800d0aa:	b410      	push	{r4}
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d0ac:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d0b0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d0b4:	6060      	str	r0, [r4, #4]
	}
 800d0b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0ba:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d0bc:	2201      	movs	r2, #1
 800d0be:	e7f4      	b.n	800d0aa <vQueueAddToRegistry+0x26>
 800d0c0:	2202      	movs	r2, #2
 800d0c2:	e7f2      	b.n	800d0aa <vQueueAddToRegistry+0x26>
 800d0c4:	2203      	movs	r2, #3
 800d0c6:	e7f0      	b.n	800d0aa <vQueueAddToRegistry+0x26>
 800d0c8:	2204      	movs	r2, #4
 800d0ca:	e7ee      	b.n	800d0aa <vQueueAddToRegistry+0x26>
 800d0cc:	2205      	movs	r2, #5
 800d0ce:	e7ec      	b.n	800d0aa <vQueueAddToRegistry+0x26>
 800d0d0:	2207      	movs	r2, #7
 800d0d2:	e7ea      	b.n	800d0aa <vQueueAddToRegistry+0x26>
 800d0d4:	20005320 	.word	0x20005320

0800d0d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d0d8:	b570      	push	{r4, r5, r6, lr}
 800d0da:	4605      	mov	r5, r0
 800d0dc:	460c      	mov	r4, r1
 800d0de:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d0e0:	f7fe fe10 	bl	800bd04 <vPortEnterCritical>
 800d0e4:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 800d0e8:	2bff      	cmp	r3, #255	; 0xff
 800d0ea:	bf04      	itt	eq
 800d0ec:	2300      	moveq	r3, #0
 800d0ee:	f885 3044 	strbeq.w	r3, [r5, #68]	; 0x44
 800d0f2:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 800d0f6:	2bff      	cmp	r3, #255	; 0xff
 800d0f8:	bf04      	itt	eq
 800d0fa:	2300      	moveq	r3, #0
 800d0fc:	f885 3045 	strbeq.w	r3, [r5, #69]	; 0x45
 800d100:	f7fe fe22 	bl	800bd48 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d104:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800d106:	b92b      	cbnz	r3, 800d114 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d108:	4632      	mov	r2, r6
 800d10a:	4621      	mov	r1, r4
 800d10c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800d110:	f000 fbee 	bl	800d8f0 <vTaskPlaceOnEventListRestricted>
	taskENTER_CRITICAL();
 800d114:	f7fe fdf6 	bl	800bd04 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800d118:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800d11c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d11e:	2c00      	cmp	r4, #0
 800d120:	dd16      	ble.n	800d150 <vQueueWaitForMessageRestricted+0x78>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d122:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d124:	b1a3      	cbz	r3, 800d150 <vQueueWaitForMessageRestricted+0x78>
 800d126:	f105 0624 	add.w	r6, r5, #36	; 0x24
 800d12a:	e005      	b.n	800d138 <vQueueWaitForMessageRestricted+0x60>
 800d12c:	3c01      	subs	r4, #1
 800d12e:	b2e3      	uxtb	r3, r4
 800d130:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d132:	b16b      	cbz	r3, 800d150 <vQueueWaitForMessageRestricted+0x78>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d134:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d136:	b15b      	cbz	r3, 800d150 <vQueueWaitForMessageRestricted+0x78>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d138:	4630      	mov	r0, r6
 800d13a:	f000 fc39 	bl	800d9b0 <xTaskRemoveFromEventList>
 800d13e:	2800      	cmp	r0, #0
 800d140:	d0f4      	beq.n	800d12c <vQueueWaitForMessageRestricted+0x54>
 800d142:	3c01      	subs	r4, #1
						vTaskMissedYield();
 800d144:	f000 fcd0 	bl	800dae8 <vTaskMissedYield>
 800d148:	b2e3      	uxtb	r3, r4
 800d14a:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d1f1      	bne.n	800d134 <vQueueWaitForMessageRestricted+0x5c>
		pxQueue->cTxLock = queueUNLOCKED;
 800d150:	23ff      	movs	r3, #255	; 0xff
 800d152:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 800d156:	f7fe fdf7 	bl	800bd48 <vPortExitCritical>
	taskENTER_CRITICAL();
 800d15a:	f7fe fdd3 	bl	800bd04 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800d15e:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800d162:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d164:	2c00      	cmp	r4, #0
 800d166:	dd16      	ble.n	800d196 <vQueueWaitForMessageRestricted+0xbe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d168:	692b      	ldr	r3, [r5, #16]
 800d16a:	b1a3      	cbz	r3, 800d196 <vQueueWaitForMessageRestricted+0xbe>
 800d16c:	f105 0610 	add.w	r6, r5, #16
 800d170:	e005      	b.n	800d17e <vQueueWaitForMessageRestricted+0xa6>
 800d172:	3c01      	subs	r4, #1
 800d174:	b2e3      	uxtb	r3, r4
 800d176:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d178:	b16b      	cbz	r3, 800d196 <vQueueWaitForMessageRestricted+0xbe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d17a:	692b      	ldr	r3, [r5, #16]
 800d17c:	b15b      	cbz	r3, 800d196 <vQueueWaitForMessageRestricted+0xbe>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d17e:	4630      	mov	r0, r6
 800d180:	f000 fc16 	bl	800d9b0 <xTaskRemoveFromEventList>
 800d184:	2800      	cmp	r0, #0
 800d186:	d0f4      	beq.n	800d172 <vQueueWaitForMessageRestricted+0x9a>
 800d188:	3c01      	subs	r4, #1
					vTaskMissedYield();
 800d18a:	f000 fcad 	bl	800dae8 <vTaskMissedYield>
 800d18e:	b2e3      	uxtb	r3, r4
 800d190:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d192:	2b00      	cmp	r3, #0
 800d194:	d1f1      	bne.n	800d17a <vQueueWaitForMessageRestricted+0xa2>
		pxQueue->cRxLock = queueUNLOCKED;
 800d196:	23ff      	movs	r3, #255	; 0xff
 800d198:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 800d19c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800d1a0:	f7fe bdd2 	b.w	800bd48 <vPortExitCritical>

0800d1a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	4d16      	ldr	r5, [pc, #88]	; (800d200 <prvIdleTask+0x5c>)
 800d1a8:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800d20c <prvIdleTask+0x68>
 800d1ac:	4f15      	ldr	r7, [pc, #84]	; (800d204 <prvIdleTask+0x60>)
 800d1ae:	4e16      	ldr	r6, [pc, #88]	; (800d208 <prvIdleTask+0x64>)
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
			{
				taskYIELD();
 800d1b0:	f8df a05c 	ldr.w	sl, [pc, #92]	; 800d210 <prvIdleTask+0x6c>
 800d1b4:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
 800d1b8:	e014      	b.n	800d1e4 <prvIdleTask+0x40>

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			taskENTER_CRITICAL();
 800d1ba:	f7fe fda3 	bl	800bd04 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d1c2:	1d20      	adds	r0, r4, #4
 800d1c4:	f7fe fd22 	bl	800bc0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d1c8:	6833      	ldr	r3, [r6, #0]
 800d1ca:	3b01      	subs	r3, #1
 800d1cc:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d1ce:	682b      	ldr	r3, [r5, #0]
 800d1d0:	3b01      	subs	r3, #1
 800d1d2:	602b      	str	r3, [r5, #0]
			}
			taskEXIT_CRITICAL();
 800d1d4:	f7fe fdb8 	bl	800bd48 <vPortExitCritical>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800d1d8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800d1da:	f7fe ff9d 	bl	800c118 <vPortFree>
			vPortFree( pxTCB );
 800d1de:	4620      	mov	r0, r4
 800d1e0:	f7fe ff9a 	bl	800c118 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d1e4:	682b      	ldr	r3, [r5, #0]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d1e7      	bne.n	800d1ba <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d1ea:	f8d8 3000 	ldr.w	r3, [r8]
 800d1ee:	2b01      	cmp	r3, #1
 800d1f0:	d9f8      	bls.n	800d1e4 <prvIdleTask+0x40>
				taskYIELD();
 800d1f2:	f8ca 9000 	str.w	r9, [sl]
 800d1f6:	f3bf 8f4f 	dsb	sy
 800d1fa:	f3bf 8f6f 	isb	sy
 800d1fe:	e7f1      	b.n	800d1e4 <prvIdleTask+0x40>
 800d200:	20004fb0 	.word	0x20004fb0
 800d204:	20005024 	.word	0x20005024
 800d208:	20004fac 	.word	0x20004fac
 800d20c:	20004f20 	.word	0x20004f20
 800d210:	e000ed04 	.word	0xe000ed04

0800d214 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d216:	4b1b      	ldr	r3, [pc, #108]	; (800d284 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d218:	4d1b      	ldr	r5, [pc, #108]	; (800d288 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800d21a:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d21c:	682b      	ldr	r3, [r5, #0]
{
 800d21e:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d220:	1d18      	adds	r0, r3, #4
{
 800d222:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d224:	f7fe fcf2 	bl	800bc0c <uxListRemove>
 800d228:	b940      	cbnz	r0, 800d23c <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800d22a:	682b      	ldr	r3, [r5, #0]
 800d22c:	4917      	ldr	r1, [pc, #92]	; (800d28c <prvAddCurrentTaskToDelayedList+0x78>)
 800d22e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800d230:	680b      	ldr	r3, [r1, #0]
 800d232:	2201      	movs	r2, #1
 800d234:	4082      	lsls	r2, r0
 800d236:	ea23 0302 	bic.w	r3, r3, r2
 800d23a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d23c:	1c63      	adds	r3, r4, #1
 800d23e:	d018      	beq.n	800d272 <prvAddCurrentTaskToDelayedList+0x5e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d240:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d242:	682b      	ldr	r3, [r5, #0]

			if( xTimeToWake < xConstTickCount )
 800d244:	42a6      	cmp	r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d246:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d248:	d80b      	bhi.n	800d262 <prvAddCurrentTaskToDelayedList+0x4e>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d24a:	4b11      	ldr	r3, [pc, #68]	; (800d290 <prvAddCurrentTaskToDelayedList+0x7c>)
 800d24c:	6818      	ldr	r0, [r3, #0]
 800d24e:	6829      	ldr	r1, [r5, #0]
 800d250:	3104      	adds	r1, #4
 800d252:	f7fe fcc1 	bl	800bbd8 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800d256:	4b0f      	ldr	r3, [pc, #60]	; (800d294 <prvAddCurrentTaskToDelayedList+0x80>)
 800d258:	681a      	ldr	r2, [r3, #0]
 800d25a:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 800d25c:	bf38      	it	cc
 800d25e:	601c      	strcc	r4, [r3, #0]
 800d260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d262:	4b0d      	ldr	r3, [pc, #52]	; (800d298 <prvAddCurrentTaskToDelayedList+0x84>)
 800d264:	6818      	ldr	r0, [r3, #0]
 800d266:	6829      	ldr	r1, [r5, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d268:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d26c:	3104      	adds	r1, #4
 800d26e:	f7fe bcb3 	b.w	800bbd8 <vListInsert>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d272:	2f00      	cmp	r7, #0
 800d274:	d0e4      	beq.n	800d240 <prvAddCurrentTaskToDelayedList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d276:	6829      	ldr	r1, [r5, #0]
 800d278:	4808      	ldr	r0, [pc, #32]	; (800d29c <prvAddCurrentTaskToDelayedList+0x88>)
 800d27a:	3104      	adds	r1, #4
}
 800d27c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d280:	f7fe bc9a 	b.w	800bbb8 <vListInsertEnd>
 800d284:	20005038 	.word	0x20005038
 800d288:	20004f14 	.word	0x20004f14
 800d28c:	20004fc0 	.word	0x20004fc0
 800d290:	20004f18 	.word	0x20004f18
 800d294:	20004ff0 	.word	0x20004ff0
 800d298:	20004f1c 	.word	0x20004f1c
 800d29c:	20005010 	.word	0x20005010

0800d2a0 <xTaskCreate>:
	{
 800d2a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2a4:	ea4f 0882 	mov.w	r8, r2, lsl #2
	{
 800d2a8:	4606      	mov	r6, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2aa:	4640      	mov	r0, r8
	{
 800d2ac:	4689      	mov	r9, r1
 800d2ae:	461f      	mov	r7, r3
 800d2b0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2b2:	f7fe fea1 	bl	800bff8 <pvPortMalloc>
			if( pxStack != NULL )
 800d2b6:	2800      	cmp	r0, #0
 800d2b8:	f000 808c 	beq.w	800d3d4 <xTaskCreate+0x134>
 800d2bc:	4682      	mov	sl, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800d2be:	2060      	movs	r0, #96	; 0x60
 800d2c0:	f7fe fe9a 	bl	800bff8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800d2c4:	4604      	mov	r4, r0
 800d2c6:	2800      	cmp	r0, #0
 800d2c8:	f000 8091 	beq.w	800d3ee <xTaskCreate+0x14e>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800d2cc:	f1a8 0804 	sub.w	r8, r8, #4
 800d2d0:	44d0      	add	r8, sl
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800d2d2:	f028 0807 	bic.w	r8, r8, #7
					pxNewTCB->pxStack = pxStack;
 800d2d6:	f8c0 a030 	str.w	sl, [r0, #48]	; 0x30
 800d2da:	f109 33ff 	add.w	r3, r9, #4294967295
 800d2de:	f109 0118 	add.w	r1, r9, #24
 800d2e2:	f100 0233 	add.w	r2, r0, #51	; 0x33
 800d2e6:	e001      	b.n	800d2ec <xTaskCreate+0x4c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d2e8:	428b      	cmp	r3, r1
 800d2ea:	d006      	beq.n	800d2fa <xTaskCreate+0x5a>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d2ec:	7858      	ldrb	r0, [r3, #1]
 800d2ee:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 800d2f2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800d2f6:	2800      	cmp	r0, #0
 800d2f8:	d1f6      	bne.n	800d2e8 <xTaskCreate+0x48>
 800d2fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2fc:	2b06      	cmp	r3, #6
 800d2fe:	bf28      	it	cs
 800d300:	2306      	movcs	r3, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d302:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d306:	f104 0a04 	add.w	sl, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800d30a:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800d30c:	6523      	str	r3, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d30e:	4650      	mov	r0, sl
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d310:	f884 b04c 	strb.w	fp, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d314:	f8c4 b054 	str.w	fp, [r4, #84]	; 0x54
 800d318:	4699      	mov	r9, r3
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d31a:	f7fe fc49 	bl	800bbb0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d31e:	f104 0018 	add.w	r0, r4, #24
 800d322:	f7fe fc45 	bl	800bbb0 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d326:	f1c9 0307 	rsb	r3, r9, #7
		pxNewTCB->ulNotifiedValue = 0;
 800d32a:	f8c4 b058 	str.w	fp, [r4, #88]	; 0x58
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d32e:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d330:	6124      	str	r4, [r4, #16]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d332:	f884 b05c 	strb.w	fp, [r4, #92]	; 0x5c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d336:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d338:	463a      	mov	r2, r7
 800d33a:	4631      	mov	r1, r6
 800d33c:	4640      	mov	r0, r8
 800d33e:	f7fe fcb7 	bl	800bcb0 <pxPortInitialiseStack>
 800d342:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800d344:	b105      	cbz	r5, 800d348 <xTaskCreate+0xa8>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d346:	602c      	str	r4, [r5, #0]
	taskENTER_CRITICAL();
 800d348:	f7fe fcdc 	bl	800bd04 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800d34c:	4a3e      	ldr	r2, [pc, #248]	; (800d448 <xTaskCreate+0x1a8>)
		if( pxCurrentTCB == NULL )
 800d34e:	4e3f      	ldr	r6, [pc, #252]	; (800d44c <xTaskCreate+0x1ac>)
		uxCurrentNumberOfTasks++;
 800d350:	6813      	ldr	r3, [r2, #0]
 800d352:	3301      	adds	r3, #1
 800d354:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d356:	6833      	ldr	r3, [r6, #0]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d03f      	beq.n	800d3dc <xTaskCreate+0x13c>
			if( xSchedulerRunning == pdFALSE )
 800d35c:	4f3c      	ldr	r7, [pc, #240]	; (800d450 <xTaskCreate+0x1b0>)
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	b363      	cbz	r3, 800d3bc <xTaskCreate+0x11c>
 800d362:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d364:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800d474 <xTaskCreate+0x1d4>
		uxTaskNumber++;
 800d368:	4a3a      	ldr	r2, [pc, #232]	; (800d454 <xTaskCreate+0x1b4>)
		prvAddTaskToReadyList( pxNewTCB );
 800d36a:	f8df e10c 	ldr.w	lr, [pc, #268]	; 800d478 <xTaskCreate+0x1d8>
		uxTaskNumber++;
 800d36e:	6810      	ldr	r0, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800d370:	f8de c000 	ldr.w	ip, [lr]
 800d374:	2501      	movs	r5, #1
		uxTaskNumber++;
 800d376:	4428      	add	r0, r5
 800d378:	6010      	str	r0, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800d37a:	fa05 f203 	lsl.w	r2, r5, r3
 800d37e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d382:	ea42 020c 	orr.w	r2, r2, ip
 800d386:	eb08 0083 	add.w	r0, r8, r3, lsl #2
 800d38a:	4651      	mov	r1, sl
 800d38c:	f8ce 2000 	str.w	r2, [lr]
 800d390:	f7fe fc12 	bl	800bbb8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800d394:	f7fe fcd8 	bl	800bd48 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	b1c3      	cbz	r3, 800d3ce <xTaskCreate+0x12e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d39c:	6832      	ldr	r2, [r6, #0]
 800d39e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d3a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d213      	bcs.n	800d3ce <xTaskCreate+0x12e>
			taskYIELD_IF_USING_PREEMPTION();
 800d3a6:	4b2c      	ldr	r3, [pc, #176]	; (800d458 <xTaskCreate+0x1b8>)
 800d3a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3ac:	601a      	str	r2, [r3, #0]
 800d3ae:	f3bf 8f4f 	dsb	sy
 800d3b2:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 800d3b6:	4628      	mov	r0, r5
 800d3b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d3bc:	6832      	ldr	r2, [r6, #0]
 800d3be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d3c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d3c2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800d474 <xTaskCreate+0x1d4>
 800d3c6:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 800d3c8:	bf98      	it	ls
 800d3ca:	6034      	strls	r4, [r6, #0]
 800d3cc:	e7cc      	b.n	800d368 <xTaskCreate+0xc8>
			xReturn = pdPASS;
 800d3ce:	4628      	mov	r0, r5
	}
 800d3d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d3d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pxCurrentTCB = pxNewTCB;
 800d3dc:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d3de:	6813      	ldr	r3, [r2, #0]
 800d3e0:	2b01      	cmp	r3, #1
 800d3e2:	d00b      	beq.n	800d3fc <xTaskCreate+0x15c>
 800d3e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d3e6:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800d474 <xTaskCreate+0x1d4>
 800d3ea:	4f19      	ldr	r7, [pc, #100]	; (800d450 <xTaskCreate+0x1b0>)
 800d3ec:	e7bc      	b.n	800d368 <xTaskCreate+0xc8>
					vPortFree( pxStack );
 800d3ee:	4650      	mov	r0, sl
 800d3f0:	f7fe fe92 	bl	800c118 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3fc:	f8df 8074 	ldr.w	r8, [pc, #116]	; 800d474 <xTaskCreate+0x1d4>
 800d400:	4645      	mov	r5, r8
 800d402:	f108 078c 	add.w	r7, r8, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d406:	4628      	mov	r0, r5
 800d408:	3514      	adds	r5, #20
 800d40a:	f7fe fbc5 	bl	800bb98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d40e:	42af      	cmp	r7, r5
 800d410:	d1f9      	bne.n	800d406 <xTaskCreate+0x166>
	vListInitialise( &xDelayedTaskList1 );
 800d412:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800d47c <xTaskCreate+0x1dc>
	vListInitialise( &xDelayedTaskList2 );
 800d416:	4d11      	ldr	r5, [pc, #68]	; (800d45c <xTaskCreate+0x1bc>)
 800d418:	4f0d      	ldr	r7, [pc, #52]	; (800d450 <xTaskCreate+0x1b0>)
	vListInitialise( &xDelayedTaskList1 );
 800d41a:	4648      	mov	r0, r9
 800d41c:	f7fe fbbc 	bl	800bb98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d420:	4628      	mov	r0, r5
 800d422:	f7fe fbb9 	bl	800bb98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d426:	480e      	ldr	r0, [pc, #56]	; (800d460 <xTaskCreate+0x1c0>)
 800d428:	f7fe fbb6 	bl	800bb98 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800d42c:	480d      	ldr	r0, [pc, #52]	; (800d464 <xTaskCreate+0x1c4>)
 800d42e:	f7fe fbb3 	bl	800bb98 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800d432:	480d      	ldr	r0, [pc, #52]	; (800d468 <xTaskCreate+0x1c8>)
 800d434:	f7fe fbb0 	bl	800bb98 <vListInitialise>
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d438:	4b0c      	ldr	r3, [pc, #48]	; (800d46c <xTaskCreate+0x1cc>)
	pxDelayedTaskList = &xDelayedTaskList1;
 800d43a:	4a0d      	ldr	r2, [pc, #52]	; (800d470 <xTaskCreate+0x1d0>)
 800d43c:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d440:	601d      	str	r5, [r3, #0]
 800d442:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d444:	e790      	b.n	800d368 <xTaskCreate+0xc8>
 800d446:	bf00      	nop
 800d448:	20004fac 	.word	0x20004fac
 800d44c:	20004f14 	.word	0x20004f14
 800d450:	2000500c 	.word	0x2000500c
 800d454:	20004fbc 	.word	0x20004fbc
 800d458:	e000ed04 	.word	0xe000ed04
 800d45c:	20004fd8 	.word	0x20004fd8
 800d460:	20004ff8 	.word	0x20004ff8
 800d464:	20005024 	.word	0x20005024
 800d468:	20005010 	.word	0x20005010
 800d46c:	20004f1c 	.word	0x20004f1c
 800d470:	20004f18 	.word	0x20004f18
 800d474:	20004f20 	.word	0x20004f20
 800d478:	20004fc0 	.word	0x20004fc0
 800d47c:	20004fc4 	.word	0x20004fc4

0800d480 <vTaskStartScheduler>:
{
 800d480:	b530      	push	{r4, r5, lr}
 800d482:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 800d484:	4b18      	ldr	r3, [pc, #96]	; (800d4e8 <vTaskStartScheduler+0x68>)
 800d486:	9301      	str	r3, [sp, #4]
 800d488:	2400      	movs	r4, #0
 800d48a:	9400      	str	r4, [sp, #0]
 800d48c:	4623      	mov	r3, r4
 800d48e:	2280      	movs	r2, #128	; 0x80
 800d490:	4916      	ldr	r1, [pc, #88]	; (800d4ec <vTaskStartScheduler+0x6c>)
 800d492:	4817      	ldr	r0, [pc, #92]	; (800d4f0 <vTaskStartScheduler+0x70>)
 800d494:	f7ff ff04 	bl	800d2a0 <xTaskCreate>
		if( xReturn == pdPASS )
 800d498:	2801      	cmp	r0, #1
 800d49a:	d00c      	beq.n	800d4b6 <vTaskStartScheduler+0x36>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d49c:	3001      	adds	r0, #1
 800d49e:	d001      	beq.n	800d4a4 <vTaskStartScheduler+0x24>
}
 800d4a0:	b003      	add	sp, #12
 800d4a2:	bd30      	pop	{r4, r5, pc}
 800d4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a8:	f383 8811 	msr	BASEPRI, r3
 800d4ac:	f3bf 8f6f 	isb	sy
 800d4b0:	f3bf 8f4f 	dsb	sy
 800d4b4:	e7fe      	b.n	800d4b4 <vTaskStartScheduler+0x34>
			xReturn = xTimerCreateTimerTask();
 800d4b6:	f000 fc9b 	bl	800ddf0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800d4ba:	2801      	cmp	r0, #1
 800d4bc:	d1ee      	bne.n	800d49c <vTaskStartScheduler+0x1c>
 800d4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c2:	f383 8811 	msr	BASEPRI, r3
 800d4c6:	f3bf 8f6f 	isb	sy
 800d4ca:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800d4ce:	4909      	ldr	r1, [pc, #36]	; (800d4f4 <vTaskStartScheduler+0x74>)
		xSchedulerRunning = pdTRUE;
 800d4d0:	4a09      	ldr	r2, [pc, #36]	; (800d4f8 <vTaskStartScheduler+0x78>)
		xTickCount = ( TickType_t ) 0U;
 800d4d2:	4b0a      	ldr	r3, [pc, #40]	; (800d4fc <vTaskStartScheduler+0x7c>)
		xNextTaskUnblockTime = portMAX_DELAY;
 800d4d4:	f04f 35ff 	mov.w	r5, #4294967295
 800d4d8:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 800d4da:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) 0U;
 800d4dc:	601c      	str	r4, [r3, #0]
}
 800d4de:	b003      	add	sp, #12
 800d4e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 800d4e4:	f7fe bcaa 	b.w	800be3c <xPortStartScheduler>
 800d4e8:	20004fec 	.word	0x20004fec
 800d4ec:	08013be4 	.word	0x08013be4
 800d4f0:	0800d1a5 	.word	0x0800d1a5
 800d4f4:	20004ff0 	.word	0x20004ff0
 800d4f8:	2000500c 	.word	0x2000500c
 800d4fc:	20005038 	.word	0x20005038

0800d500 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800d500:	4a02      	ldr	r2, [pc, #8]	; (800d50c <vTaskSuspendAll+0xc>)
 800d502:	6813      	ldr	r3, [r2, #0]
 800d504:	3301      	adds	r3, #1
 800d506:	6013      	str	r3, [r2, #0]
 800d508:	4770      	bx	lr
 800d50a:	bf00      	nop
 800d50c:	20004fb8 	.word	0x20004fb8

0800d510 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800d510:	4b01      	ldr	r3, [pc, #4]	; (800d518 <xTaskGetTickCount+0x8>)
 800d512:	6818      	ldr	r0, [r3, #0]
}
 800d514:	4770      	bx	lr
 800d516:	bf00      	nop
 800d518:	20005038 	.word	0x20005038

0800d51c <xTaskIncrementTick>:
{
 800d51c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d520:	4b4a      	ldr	r3, [pc, #296]	; (800d64c <xTaskIncrementTick+0x130>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d153      	bne.n	800d5d0 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d528:	4b49      	ldr	r3, [pc, #292]	; (800d650 <xTaskIncrementTick+0x134>)
 800d52a:	681e      	ldr	r6, [r3, #0]
 800d52c:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 800d52e:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d530:	2e00      	cmp	r6, #0
 800d532:	d05a      	beq.n	800d5ea <xTaskIncrementTick+0xce>
 800d534:	f8df b138 	ldr.w	fp, [pc, #312]	; 800d670 <xTaskIncrementTick+0x154>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d538:	f8db 2000 	ldr.w	r2, [fp]
 800d53c:	4296      	cmp	r6, r2
 800d53e:	d361      	bcc.n	800d604 <xTaskIncrementTick+0xe8>
 800d540:	4d44      	ldr	r5, [pc, #272]	; (800d654 <xTaskIncrementTick+0x138>)
 800d542:	4f45      	ldr	r7, [pc, #276]	; (800d658 <xTaskIncrementTick+0x13c>)
 800d544:	f8df 812c 	ldr.w	r8, [pc, #300]	; 800d674 <xTaskIncrementTick+0x158>
 800d548:	2400      	movs	r4, #0
 800d54a:	e02e      	b.n	800d5aa <xTaskIncrementTick+0x8e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d54c:	682a      	ldr	r2, [r5, #0]
 800d54e:	68d2      	ldr	r2, [r2, #12]
 800d550:	f8d2 900c 	ldr.w	r9, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d554:	f8d9 1004 	ldr.w	r1, [r9, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d558:	f109 0a04 	add.w	sl, r9, #4
					if( xConstTickCount < xItemValue )
 800d55c:	428e      	cmp	r6, r1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d55e:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 800d560:	d36a      	bcc.n	800d638 <xTaskIncrementTick+0x11c>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d562:	f7fe fb53 	bl	800bc0c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d566:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d56a:	f109 0018 	add.w	r0, r9, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d56e:	b109      	cbz	r1, 800d574 <xTaskIncrementTick+0x58>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d570:	f7fe fb4c 	bl	800bc0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d574:	4b39      	ldr	r3, [pc, #228]	; (800d65c <xTaskIncrementTick+0x140>)
 800d576:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	2201      	movs	r2, #1
 800d57e:	fa02 fe00 	lsl.w	lr, r2, r0
 800d582:	ea4e 0e03 	orr.w	lr, lr, r3
 800d586:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d58a:	4b34      	ldr	r3, [pc, #208]	; (800d65c <xTaskIncrementTick+0x140>)
 800d58c:	4651      	mov	r1, sl
 800d58e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800d592:	f8c3 e000 	str.w	lr, [r3]
 800d596:	f7fe fb0f 	bl	800bbb8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d59a:	f8d8 0000 	ldr.w	r0, [r8]
 800d59e:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 800d5a2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800d5a4:	4291      	cmp	r1, r2
 800d5a6:	bf28      	it	cs
 800d5a8:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d5aa:	682a      	ldr	r2, [r5, #0]
 800d5ac:	6812      	ldr	r2, [r2, #0]
 800d5ae:	2a00      	cmp	r2, #0
 800d5b0:	d1cc      	bne.n	800d54c <xTaskIncrementTick+0x30>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5b2:	f04f 32ff 	mov.w	r2, #4294967295
 800d5b6:	f8cb 2000 	str.w	r2, [fp]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d5ba:	f8d8 3000 	ldr.w	r3, [r8]
 800d5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d5c4:	009b      	lsls	r3, r3, #2
 800d5c6:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 800d5c8:	2b02      	cmp	r3, #2
 800d5ca:	bf28      	it	cs
 800d5cc:	2401      	movcs	r4, #1
 800d5ce:	e004      	b.n	800d5da <xTaskIncrementTick+0xbe>
		++uxPendedTicks;
 800d5d0:	4a23      	ldr	r2, [pc, #140]	; (800d660 <xTaskIncrementTick+0x144>)
 800d5d2:	6813      	ldr	r3, [r2, #0]
 800d5d4:	3301      	adds	r3, #1
 800d5d6:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800d5d8:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800d5da:	4b22      	ldr	r3, [pc, #136]	; (800d664 <xTaskIncrementTick+0x148>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	bf18      	it	ne
 800d5e2:	2401      	movne	r4, #1
}
 800d5e4:	4620      	mov	r0, r4
 800d5e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 800d5ea:	4d1a      	ldr	r5, [pc, #104]	; (800d654 <xTaskIncrementTick+0x138>)
 800d5ec:	682b      	ldr	r3, [r5, #0]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	b16b      	cbz	r3, 800d60e <xTaskIncrementTick+0xf2>
 800d5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5f6:	f383 8811 	msr	BASEPRI, r3
 800d5fa:	f3bf 8f6f 	isb	sy
 800d5fe:	f3bf 8f4f 	dsb	sy
 800d602:	e7fe      	b.n	800d602 <xTaskIncrementTick+0xe6>
 800d604:	4f14      	ldr	r7, [pc, #80]	; (800d658 <xTaskIncrementTick+0x13c>)
 800d606:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800d674 <xTaskIncrementTick+0x158>
BaseType_t xSwitchRequired = pdFALSE;
 800d60a:	2400      	movs	r4, #0
 800d60c:	e7d5      	b.n	800d5ba <xTaskIncrementTick+0x9e>
			taskSWITCH_DELAYED_LISTS();
 800d60e:	4b16      	ldr	r3, [pc, #88]	; (800d668 <xTaskIncrementTick+0x14c>)
 800d610:	6829      	ldr	r1, [r5, #0]
 800d612:	4a16      	ldr	r2, [pc, #88]	; (800d66c <xTaskIncrementTick+0x150>)
 800d614:	6818      	ldr	r0, [r3, #0]
 800d616:	6028      	str	r0, [r5, #0]
 800d618:	6019      	str	r1, [r3, #0]
 800d61a:	6813      	ldr	r3, [r2, #0]
 800d61c:	3301      	adds	r3, #1
 800d61e:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d620:	682b      	ldr	r3, [r5, #0]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	b15b      	cbz	r3, 800d63e <xTaskIncrementTick+0x122>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d626:	682a      	ldr	r2, [r5, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d628:	f8df b044 	ldr.w	fp, [pc, #68]	; 800d670 <xTaskIncrementTick+0x154>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d62c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d62e:	68d2      	ldr	r2, [r2, #12]
 800d630:	6852      	ldr	r2, [r2, #4]
 800d632:	f8cb 2000 	str.w	r2, [fp]
 800d636:	e77f      	b.n	800d538 <xTaskIncrementTick+0x1c>
						xNextTaskUnblockTime = xItemValue;
 800d638:	f8cb 1000 	str.w	r1, [fp]
						break;
 800d63c:	e7bd      	b.n	800d5ba <xTaskIncrementTick+0x9e>
		xNextTaskUnblockTime = portMAX_DELAY;
 800d63e:	f8df b030 	ldr.w	fp, [pc, #48]	; 800d670 <xTaskIncrementTick+0x154>
 800d642:	f04f 32ff 	mov.w	r2, #4294967295
 800d646:	f8cb 2000 	str.w	r2, [fp]
 800d64a:	e775      	b.n	800d538 <xTaskIncrementTick+0x1c>
 800d64c:	20004fb8 	.word	0x20004fb8
 800d650:	20005038 	.word	0x20005038
 800d654:	20004f18 	.word	0x20004f18
 800d658:	20004f20 	.word	0x20004f20
 800d65c:	20004fc0 	.word	0x20004fc0
 800d660:	20004fb4 	.word	0x20004fb4
 800d664:	2000503c 	.word	0x2000503c
 800d668:	20004f1c 	.word	0x20004f1c
 800d66c:	20004ff4 	.word	0x20004ff4
 800d670:	20004ff0 	.word	0x20004ff0
 800d674:	20004f14 	.word	0x20004f14

0800d678 <xTaskResumeAll>:
{
 800d678:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 800d67c:	4c39      	ldr	r4, [pc, #228]	; (800d764 <xTaskResumeAll+0xec>)
 800d67e:	6823      	ldr	r3, [r4, #0]
 800d680:	b943      	cbnz	r3, 800d694 <xTaskResumeAll+0x1c>
 800d682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d686:	f383 8811 	msr	BASEPRI, r3
 800d68a:	f3bf 8f6f 	isb	sy
 800d68e:	f3bf 8f4f 	dsb	sy
 800d692:	e7fe      	b.n	800d692 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800d694:	f7fe fb36 	bl	800bd04 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800d698:	6823      	ldr	r3, [r4, #0]
 800d69a:	3b01      	subs	r3, #1
 800d69c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d69e:	6824      	ldr	r4, [r4, #0]
 800d6a0:	2c00      	cmp	r4, #0
 800d6a2:	d151      	bne.n	800d748 <xTaskResumeAll+0xd0>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d6a4:	4b30      	ldr	r3, [pc, #192]	; (800d768 <xTaskResumeAll+0xf0>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d04d      	beq.n	800d748 <xTaskResumeAll+0xd0>
 800d6ac:	4d2f      	ldr	r5, [pc, #188]	; (800d76c <xTaskResumeAll+0xf4>)
 800d6ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d784 <xTaskResumeAll+0x10c>
					prvAddTaskToReadyList( pxTCB );
 800d6b2:	4e2f      	ldr	r6, [pc, #188]	; (800d770 <xTaskResumeAll+0xf8>)
 800d6b4:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 800d788 <xTaskResumeAll+0x110>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d6b8:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 800d78c <xTaskResumeAll+0x114>
 800d6bc:	e01f      	b.n	800d6fe <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800d6be:	f8da 300c 	ldr.w	r3, [sl, #12]
 800d6c2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6c4:	f104 0804 	add.w	r8, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d6c8:	f104 0018 	add.w	r0, r4, #24
 800d6cc:	f7fe fa9e 	bl	800bc0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6d0:	4640      	mov	r0, r8
 800d6d2:	f7fe fa9b 	bl	800bc0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d6d6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d6d8:	6832      	ldr	r2, [r6, #0]
 800d6da:	fa07 f300 	lsl.w	r3, r7, r0
 800d6de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d6e2:	4313      	orrs	r3, r2
 800d6e4:	4641      	mov	r1, r8
 800d6e6:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800d6ea:	6033      	str	r3, [r6, #0]
 800d6ec:	f7fe fa64 	bl	800bbb8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d6f0:	f8db 3000 	ldr.w	r3, [fp]
 800d6f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d6f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6f8:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 800d6fa:	bf28      	it	cs
 800d6fc:	602f      	strcs	r7, [r5, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d6fe:	f8da 3000 	ldr.w	r3, [sl]
					prvAddTaskToReadyList( pxTCB );
 800d702:	2701      	movs	r7, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d704:	2b00      	cmp	r3, #0
 800d706:	d1da      	bne.n	800d6be <xTaskResumeAll+0x46>
				if( pxTCB != NULL )
 800d708:	b13c      	cbz	r4, 800d71a <xTaskResumeAll+0xa2>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d70a:	4b1a      	ldr	r3, [pc, #104]	; (800d774 <xTaskResumeAll+0xfc>)
 800d70c:	681a      	ldr	r2, [r3, #0]
 800d70e:	6812      	ldr	r2, [r2, #0]
 800d710:	bb02      	cbnz	r2, 800d754 <xTaskResumeAll+0xdc>
		xNextTaskUnblockTime = portMAX_DELAY;
 800d712:	4b19      	ldr	r3, [pc, #100]	; (800d778 <xTaskResumeAll+0x100>)
 800d714:	f04f 32ff 	mov.w	r2, #4294967295
 800d718:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d71a:	4e18      	ldr	r6, [pc, #96]	; (800d77c <xTaskResumeAll+0x104>)
 800d71c:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d71e:	b13c      	cbz	r4, 800d730 <xTaskResumeAll+0xb8>
								xYieldPending = pdTRUE;
 800d720:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800d722:	f7ff fefb 	bl	800d51c <xTaskIncrementTick>
 800d726:	b100      	cbz	r0, 800d72a <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 800d728:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d72a:	3c01      	subs	r4, #1
 800d72c:	d1f9      	bne.n	800d722 <xTaskResumeAll+0xaa>
						uxPendedTicks = 0;
 800d72e:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 800d730:	682b      	ldr	r3, [r5, #0]
 800d732:	b14b      	cbz	r3, 800d748 <xTaskResumeAll+0xd0>
					taskYIELD_IF_USING_PREEMPTION();
 800d734:	4b12      	ldr	r3, [pc, #72]	; (800d780 <xTaskResumeAll+0x108>)
 800d736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d73a:	601a      	str	r2, [r3, #0]
 800d73c:	f3bf 8f4f 	dsb	sy
 800d740:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800d744:	2401      	movs	r4, #1
 800d746:	e000      	b.n	800d74a <xTaskResumeAll+0xd2>
BaseType_t xAlreadyYielded = pdFALSE;
 800d748:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800d74a:	f7fe fafd 	bl	800bd48 <vPortExitCritical>
}
 800d74e:	4620      	mov	r0, r4
 800d750:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d754:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d756:	4b08      	ldr	r3, [pc, #32]	; (800d778 <xTaskResumeAll+0x100>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d758:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d75a:	68d2      	ldr	r2, [r2, #12]
 800d75c:	6852      	ldr	r2, [r2, #4]
 800d75e:	601a      	str	r2, [r3, #0]
 800d760:	e7db      	b.n	800d71a <xTaskResumeAll+0xa2>
 800d762:	bf00      	nop
 800d764:	20004fb8 	.word	0x20004fb8
 800d768:	20004fac 	.word	0x20004fac
 800d76c:	2000503c 	.word	0x2000503c
 800d770:	20004fc0 	.word	0x20004fc0
 800d774:	20004f18 	.word	0x20004f18
 800d778:	20004ff0 	.word	0x20004ff0
 800d77c:	20004fb4 	.word	0x20004fb4
 800d780:	e000ed04 	.word	0xe000ed04
 800d784:	20004ff8 	.word	0x20004ff8
 800d788:	20004f20 	.word	0x20004f20
 800d78c:	20004f14 	.word	0x20004f14

0800d790 <vTaskDelay>:
	{
 800d790:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d792:	b158      	cbz	r0, 800d7ac <vTaskDelay+0x1c>
			configASSERT( uxSchedulerSuspended == 0 );
 800d794:	4b0f      	ldr	r3, [pc, #60]	; (800d7d4 <vTaskDelay+0x44>)
 800d796:	6819      	ldr	r1, [r3, #0]
 800d798:	b189      	cbz	r1, 800d7be <vTaskDelay+0x2e>
 800d79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d79e:	f383 8811 	msr	BASEPRI, r3
 800d7a2:	f3bf 8f6f 	isb	sy
 800d7a6:	f3bf 8f4f 	dsb	sy
 800d7aa:	e7fe      	b.n	800d7aa <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800d7ac:	4b0a      	ldr	r3, [pc, #40]	; (800d7d8 <vTaskDelay+0x48>)
 800d7ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7b2:	601a      	str	r2, [r3, #0]
 800d7b4:	f3bf 8f4f 	dsb	sy
 800d7b8:	f3bf 8f6f 	isb	sy
 800d7bc:	bd08      	pop	{r3, pc}
	++uxSchedulerSuspended;
 800d7be:	681a      	ldr	r2, [r3, #0]
 800d7c0:	3201      	adds	r2, #1
 800d7c2:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d7c4:	f7ff fd26 	bl	800d214 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800d7c8:	f7ff ff56 	bl	800d678 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800d7cc:	2800      	cmp	r0, #0
 800d7ce:	d0ed      	beq.n	800d7ac <vTaskDelay+0x1c>
 800d7d0:	bd08      	pop	{r3, pc}
 800d7d2:	bf00      	nop
 800d7d4:	20004fb8 	.word	0x20004fb8
 800d7d8:	e000ed04 	.word	0xe000ed04

0800d7dc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d7dc:	4b16      	ldr	r3, [pc, #88]	; (800d838 <vTaskSwitchContext+0x5c>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	bb33      	cbnz	r3, 800d830 <vTaskSwitchContext+0x54>
		xYieldPending = pdFALSE;
 800d7e2:	4916      	ldr	r1, [pc, #88]	; (800d83c <vTaskSwitchContext+0x60>)
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800d7e4:	4a16      	ldr	r2, [pc, #88]	; (800d840 <vTaskSwitchContext+0x64>)
		xYieldPending = pdFALSE;
 800d7e6:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800d7e8:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d7ea:	fab3 f383 	clz	r3, r3
 800d7ee:	b2db      	uxtb	r3, r3
 800d7f0:	f1c3 031f 	rsb	r3, r3, #31
 800d7f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d7f8:	009b      	lsls	r3, r3, #2
 800d7fa:	4912      	ldr	r1, [pc, #72]	; (800d844 <vTaskSwitchContext+0x68>)
 800d7fc:	58ca      	ldr	r2, [r1, r3]
 800d7fe:	18c8      	adds	r0, r1, r3
 800d800:	b942      	cbnz	r2, 800d814 <vTaskSwitchContext+0x38>
	__asm volatile
 800d802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d806:	f383 8811 	msr	BASEPRI, r3
 800d80a:	f3bf 8f6f 	isb	sy
 800d80e:	f3bf 8f4f 	dsb	sy
 800d812:	e7fe      	b.n	800d812 <vTaskSwitchContext+0x36>
 800d814:	6842      	ldr	r2, [r0, #4]
 800d816:	3308      	adds	r3, #8
 800d818:	6852      	ldr	r2, [r2, #4]
 800d81a:	6042      	str	r2, [r0, #4]
 800d81c:	440b      	add	r3, r1
 800d81e:	429a      	cmp	r2, r3
 800d820:	bf08      	it	eq
 800d822:	6852      	ldreq	r2, [r2, #4]
 800d824:	4b08      	ldr	r3, [pc, #32]	; (800d848 <vTaskSwitchContext+0x6c>)
 800d826:	bf08      	it	eq
 800d828:	6042      	streq	r2, [r0, #4]
 800d82a:	68d2      	ldr	r2, [r2, #12]
 800d82c:	601a      	str	r2, [r3, #0]
 800d82e:	4770      	bx	lr
		xYieldPending = pdTRUE;
 800d830:	4b02      	ldr	r3, [pc, #8]	; (800d83c <vTaskSwitchContext+0x60>)
 800d832:	2201      	movs	r2, #1
 800d834:	601a      	str	r2, [r3, #0]
 800d836:	4770      	bx	lr
 800d838:	20004fb8 	.word	0x20004fb8
 800d83c:	2000503c 	.word	0x2000503c
 800d840:	20004fc0 	.word	0x20004fc0
 800d844:	20004f20 	.word	0x20004f20
 800d848:	20004f14 	.word	0x20004f14

0800d84c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800d84c:	b348      	cbz	r0, 800d8a2 <vTaskPlaceOnEventList+0x56>
{
 800d84e:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d850:	4d20      	ldr	r5, [pc, #128]	; (800d8d4 <vTaskPlaceOnEventList+0x88>)
 800d852:	460c      	mov	r4, r1
 800d854:	6829      	ldr	r1, [r5, #0]
 800d856:	3118      	adds	r1, #24
 800d858:	f7fe f9be 	bl	800bbd8 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 800d85c:	4b1e      	ldr	r3, [pc, #120]	; (800d8d8 <vTaskPlaceOnEventList+0x8c>)
 800d85e:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d860:	6828      	ldr	r0, [r5, #0]
 800d862:	3004      	adds	r0, #4
 800d864:	f7fe f9d2 	bl	800bc0c <uxListRemove>
 800d868:	b940      	cbnz	r0, 800d87c <vTaskPlaceOnEventList+0x30>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800d86a:	682b      	ldr	r3, [r5, #0]
 800d86c:	491b      	ldr	r1, [pc, #108]	; (800d8dc <vTaskPlaceOnEventList+0x90>)
 800d86e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800d870:	680b      	ldr	r3, [r1, #0]
 800d872:	2201      	movs	r2, #1
 800d874:	4082      	lsls	r2, r0
 800d876:	ea23 0302 	bic.w	r3, r3, r2
 800d87a:	600b      	str	r3, [r1, #0]
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d87c:	1c63      	adds	r3, r4, #1
 800d87e:	d019      	beq.n	800d8b4 <vTaskPlaceOnEventList+0x68>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d880:	4434      	add	r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d882:	682b      	ldr	r3, [r5, #0]
			if( xTimeToWake < xConstTickCount )
 800d884:	42a6      	cmp	r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d886:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d888:	d81b      	bhi.n	800d8c2 <vTaskPlaceOnEventList+0x76>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d88a:	4b15      	ldr	r3, [pc, #84]	; (800d8e0 <vTaskPlaceOnEventList+0x94>)
 800d88c:	6818      	ldr	r0, [r3, #0]
 800d88e:	6829      	ldr	r1, [r5, #0]
 800d890:	3104      	adds	r1, #4
 800d892:	f7fe f9a1 	bl	800bbd8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d896:	4b13      	ldr	r3, [pc, #76]	; (800d8e4 <vTaskPlaceOnEventList+0x98>)
 800d898:	681a      	ldr	r2, [r3, #0]
 800d89a:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800d89c:	bf38      	it	cc
 800d89e:	601c      	strcc	r4, [r3, #0]
 800d8a0:	bd70      	pop	{r4, r5, r6, pc}
 800d8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a6:	f383 8811 	msr	BASEPRI, r3
 800d8aa:	f3bf 8f6f 	isb	sy
 800d8ae:	f3bf 8f4f 	dsb	sy
 800d8b2:	e7fe      	b.n	800d8b2 <vTaskPlaceOnEventList+0x66>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d8b4:	6829      	ldr	r1, [r5, #0]
 800d8b6:	480c      	ldr	r0, [pc, #48]	; (800d8e8 <vTaskPlaceOnEventList+0x9c>)
 800d8b8:	3104      	adds	r1, #4
}
 800d8ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d8be:	f7fe b97b 	b.w	800bbb8 <vListInsertEnd>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d8c2:	4b0a      	ldr	r3, [pc, #40]	; (800d8ec <vTaskPlaceOnEventList+0xa0>)
 800d8c4:	6818      	ldr	r0, [r3, #0]
 800d8c6:	6829      	ldr	r1, [r5, #0]
}
 800d8c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d8cc:	3104      	adds	r1, #4
 800d8ce:	f7fe b983 	b.w	800bbd8 <vListInsert>
 800d8d2:	bf00      	nop
 800d8d4:	20004f14 	.word	0x20004f14
 800d8d8:	20005038 	.word	0x20005038
 800d8dc:	20004fc0 	.word	0x20004fc0
 800d8e0:	20004f18 	.word	0x20004f18
 800d8e4:	20004ff0 	.word	0x20004ff0
 800d8e8:	20005010 	.word	0x20005010
 800d8ec:	20004f1c 	.word	0x20004f1c

0800d8f0 <vTaskPlaceOnEventListRestricted>:
	{
 800d8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxEventList );
 800d8f2:	2800      	cmp	r0, #0
 800d8f4:	d02e      	beq.n	800d954 <vTaskPlaceOnEventListRestricted+0x64>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d8f6:	4c27      	ldr	r4, [pc, #156]	; (800d994 <vTaskPlaceOnEventListRestricted+0xa4>)
 800d8f8:	460d      	mov	r5, r1
 800d8fa:	6821      	ldr	r1, [r4, #0]
 800d8fc:	3118      	adds	r1, #24
 800d8fe:	4617      	mov	r7, r2
 800d900:	f7fe f95a 	bl	800bbb8 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 800d904:	4b24      	ldr	r3, [pc, #144]	; (800d998 <vTaskPlaceOnEventListRestricted+0xa8>)
 800d906:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d908:	6820      	ldr	r0, [r4, #0]
 800d90a:	3004      	adds	r0, #4
		if( xWaitIndefinitely != pdFALSE )
 800d90c:	2f00      	cmp	r7, #0
 800d90e:	d03b      	beq.n	800d988 <vTaskPlaceOnEventListRestricted+0x98>
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d910:	f7fe f97c 	bl	800bc0c <uxListRemove>
 800d914:	2800      	cmp	r0, #0
 800d916:	d130      	bne.n	800d97a <vTaskPlaceOnEventListRestricted+0x8a>
			xTicksToWait = portMAX_DELAY;
 800d918:	f04f 35ff 	mov.w	r5, #4294967295
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800d91c:	6823      	ldr	r3, [r4, #0]
 800d91e:	491f      	ldr	r1, [pc, #124]	; (800d99c <vTaskPlaceOnEventListRestricted+0xac>)
 800d920:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800d922:	680b      	ldr	r3, [r1, #0]
 800d924:	2201      	movs	r2, #1
 800d926:	4082      	lsls	r2, r0
 800d928:	ea23 0302 	bic.w	r3, r3, r2
 800d92c:	600b      	str	r3, [r1, #0]
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d92e:	1c6b      	adds	r3, r5, #1
 800d930:	d021      	beq.n	800d976 <vTaskPlaceOnEventListRestricted+0x86>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d932:	4435      	add	r5, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d934:	6823      	ldr	r3, [r4, #0]
			if( xTimeToWake < xConstTickCount )
 800d936:	42b5      	cmp	r5, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d938:	605d      	str	r5, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d93a:	d314      	bcc.n	800d966 <vTaskPlaceOnEventListRestricted+0x76>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d93c:	4b18      	ldr	r3, [pc, #96]	; (800d9a0 <vTaskPlaceOnEventListRestricted+0xb0>)
 800d93e:	6818      	ldr	r0, [r3, #0]
 800d940:	6821      	ldr	r1, [r4, #0]
 800d942:	3104      	adds	r1, #4
 800d944:	f7fe f948 	bl	800bbd8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d948:	4b16      	ldr	r3, [pc, #88]	; (800d9a4 <vTaskPlaceOnEventListRestricted+0xb4>)
 800d94a:	681a      	ldr	r2, [r3, #0]
 800d94c:	4295      	cmp	r5, r2
 800d94e:	d220      	bcs.n	800d992 <vTaskPlaceOnEventListRestricted+0xa2>
					xNextTaskUnblockTime = xTimeToWake;
 800d950:	601d      	str	r5, [r3, #0]
	}
 800d952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d958:	f383 8811 	msr	BASEPRI, r3
 800d95c:	f3bf 8f6f 	isb	sy
 800d960:	f3bf 8f4f 	dsb	sy
 800d964:	e7fe      	b.n	800d964 <vTaskPlaceOnEventListRestricted+0x74>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d966:	4b10      	ldr	r3, [pc, #64]	; (800d9a8 <vTaskPlaceOnEventListRestricted+0xb8>)
 800d968:	6818      	ldr	r0, [r3, #0]
 800d96a:	6821      	ldr	r1, [r4, #0]
	}
 800d96c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d970:	3104      	adds	r1, #4
 800d972:	f7fe b931 	b.w	800bbd8 <vListInsert>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d976:	2f00      	cmp	r7, #0
 800d978:	d0db      	beq.n	800d932 <vTaskPlaceOnEventListRestricted+0x42>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d97a:	6821      	ldr	r1, [r4, #0]
 800d97c:	480b      	ldr	r0, [pc, #44]	; (800d9ac <vTaskPlaceOnEventListRestricted+0xbc>)
 800d97e:	3104      	adds	r1, #4
	}
 800d980:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d984:	f7fe b918 	b.w	800bbb8 <vListInsertEnd>
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d988:	f7fe f940 	bl	800bc0c <uxListRemove>
 800d98c:	2800      	cmp	r0, #0
 800d98e:	d1ce      	bne.n	800d92e <vTaskPlaceOnEventListRestricted+0x3e>
 800d990:	e7c4      	b.n	800d91c <vTaskPlaceOnEventListRestricted+0x2c>
 800d992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d994:	20004f14 	.word	0x20004f14
 800d998:	20005038 	.word	0x20005038
 800d99c:	20004fc0 	.word	0x20004fc0
 800d9a0:	20004f18 	.word	0x20004f18
 800d9a4:	20004ff0 	.word	0x20004ff0
 800d9a8:	20004f1c 	.word	0x20004f1c
 800d9ac:	20005010 	.word	0x20005010

0800d9b0 <xTaskRemoveFromEventList>:
{
 800d9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800d9b2:	68c3      	ldr	r3, [r0, #12]
 800d9b4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800d9b6:	b32c      	cbz	r4, 800da04 <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d9b8:	f104 0518 	add.w	r5, r4, #24
 800d9bc:	4628      	mov	r0, r5
 800d9be:	f7fe f925 	bl	800bc0c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d9c2:	4b17      	ldr	r3, [pc, #92]	; (800da20 <xTaskRemoveFromEventList+0x70>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	bb33      	cbnz	r3, 800da16 <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d9c8:	1d26      	adds	r6, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d9ca:	4d16      	ldr	r5, [pc, #88]	; (800da24 <xTaskRemoveFromEventList+0x74>)
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d9cc:	4630      	mov	r0, r6
 800d9ce:	f7fe f91d 	bl	800bc0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d9d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d9d4:	682f      	ldr	r7, [r5, #0]
 800d9d6:	4814      	ldr	r0, [pc, #80]	; (800da28 <xTaskRemoveFromEventList+0x78>)
 800d9d8:	2301      	movs	r3, #1
 800d9da:	4093      	lsls	r3, r2
 800d9dc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800d9e0:	433b      	orrs	r3, r7
 800d9e2:	4631      	mov	r1, r6
 800d9e4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800d9e8:	602b      	str	r3, [r5, #0]
 800d9ea:	f7fe f8e5 	bl	800bbb8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d9ee:	4b0f      	ldr	r3, [pc, #60]	; (800da2c <xTaskRemoveFromEventList+0x7c>)
 800d9f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9f6:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800d9f8:	bf83      	ittte	hi
 800d9fa:	4b0d      	ldrhi	r3, [pc, #52]	; (800da30 <xTaskRemoveFromEventList+0x80>)
 800d9fc:	2001      	movhi	r0, #1
 800d9fe:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 800da00:	2000      	movls	r0, #0
}
 800da02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da08:	f383 8811 	msr	BASEPRI, r3
 800da0c:	f3bf 8f6f 	isb	sy
 800da10:	f3bf 8f4f 	dsb	sy
 800da14:	e7fe      	b.n	800da14 <xTaskRemoveFromEventList+0x64>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800da16:	4629      	mov	r1, r5
 800da18:	4806      	ldr	r0, [pc, #24]	; (800da34 <xTaskRemoveFromEventList+0x84>)
 800da1a:	f7fe f8cd 	bl	800bbb8 <vListInsertEnd>
 800da1e:	e7e6      	b.n	800d9ee <xTaskRemoveFromEventList+0x3e>
 800da20:	20004fb8 	.word	0x20004fb8
 800da24:	20004fc0 	.word	0x20004fc0
 800da28:	20004f20 	.word	0x20004f20
 800da2c:	20004f14 	.word	0x20004f14
 800da30:	2000503c 	.word	0x2000503c
 800da34:	20004ff8 	.word	0x20004ff8

0800da38 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800da38:	4a03      	ldr	r2, [pc, #12]	; (800da48 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 800da3a:	4b04      	ldr	r3, [pc, #16]	; (800da4c <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800da3c:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	e880 000c 	stmia.w	r0, {r2, r3}
 800da44:	4770      	bx	lr
 800da46:	bf00      	nop
 800da48:	20004ff4 	.word	0x20004ff4
 800da4c:	20005038 	.word	0x20005038

0800da50 <xTaskCheckForTimeOut>:
{
 800da50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800da52:	b358      	cbz	r0, 800daac <xTaskCheckForTimeOut+0x5c>
	configASSERT( pxTicksToWait );
 800da54:	b309      	cbz	r1, 800da9a <xTaskCheckForTimeOut+0x4a>
 800da56:	460d      	mov	r5, r1
 800da58:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800da5a:	f7fe f953 	bl	800bd04 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 800da5e:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 800da60:	f8df e080 	ldr.w	lr, [pc, #128]	; 800dae4 <xTaskCheckForTimeOut+0x94>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800da64:	6866      	ldr	r6, [r4, #4]
		const TickType_t xConstTickCount = xTickCount;
 800da66:	f8de 2000 	ldr.w	r2, [lr]
			if( *pxTicksToWait == portMAX_DELAY )
 800da6a:	1c59      	adds	r1, r3, #1
 800da6c:	d033      	beq.n	800dad6 <xTaskCheckForTimeOut+0x86>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800da6e:	481c      	ldr	r0, [pc, #112]	; (800dae0 <xTaskCheckForTimeOut+0x90>)
 800da70:	6821      	ldr	r1, [r4, #0]
 800da72:	6807      	ldr	r7, [r0, #0]
 800da74:	42b9      	cmp	r1, r7
 800da76:	d006      	beq.n	800da86 <xTaskCheckForTimeOut+0x36>
 800da78:	42b2      	cmp	r2, r6
 800da7a:	d304      	bcc.n	800da86 <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
 800da7c:	2501      	movs	r5, #1
	taskEXIT_CRITICAL();
 800da7e:	f7fe f963 	bl	800bd48 <vPortExitCritical>
}
 800da82:	4628      	mov	r0, r5
 800da84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800da86:	1b92      	subs	r2, r2, r6
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800da88:	429a      	cmp	r2, r3
 800da8a:	d318      	bcc.n	800dabe <xTaskCheckForTimeOut+0x6e>
			*pxTicksToWait = 0;
 800da8c:	2300      	movs	r3, #0
 800da8e:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 800da90:	2501      	movs	r5, #1
	taskEXIT_CRITICAL();
 800da92:	f7fe f959 	bl	800bd48 <vPortExitCritical>
}
 800da96:	4628      	mov	r0, r5
 800da98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da9e:	f383 8811 	msr	BASEPRI, r3
 800daa2:	f3bf 8f6f 	isb	sy
 800daa6:	f3bf 8f4f 	dsb	sy
 800daaa:	e7fe      	b.n	800daaa <xTaskCheckForTimeOut+0x5a>
 800daac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab0:	f383 8811 	msr	BASEPRI, r3
 800dab4:	f3bf 8f6f 	isb	sy
 800dab8:	f3bf 8f4f 	dsb	sy
 800dabc:	e7fe      	b.n	800dabc <xTaskCheckForTimeOut+0x6c>
			*pxTicksToWait -= xElapsedTime;
 800dabe:	1a9b      	subs	r3, r3, r2
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dac0:	6800      	ldr	r0, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dac2:	f8de 2000 	ldr.w	r2, [lr]
			*pxTicksToWait -= xElapsedTime;
 800dac6:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dac8:	e884 0005 	stmia.w	r4, {r0, r2}
			xReturn = pdFALSE;
 800dacc:	2500      	movs	r5, #0
	taskEXIT_CRITICAL();
 800dace:	f7fe f93b 	bl	800bd48 <vPortExitCritical>
}
 800dad2:	4628      	mov	r0, r5
 800dad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 800dad6:	2500      	movs	r5, #0
	taskEXIT_CRITICAL();
 800dad8:	f7fe f936 	bl	800bd48 <vPortExitCritical>
}
 800dadc:	4628      	mov	r0, r5
 800dade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dae0:	20004ff4 	.word	0x20004ff4
 800dae4:	20005038 	.word	0x20005038

0800dae8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800dae8:	4b01      	ldr	r3, [pc, #4]	; (800daf0 <vTaskMissedYield+0x8>)
 800daea:	2201      	movs	r2, #1
 800daec:	601a      	str	r2, [r3, #0]
 800daee:	4770      	bx	lr
 800daf0:	2000503c 	.word	0x2000503c

0800daf4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800daf4:	4b05      	ldr	r3, [pc, #20]	; (800db0c <xTaskGetSchedulerState+0x18>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	b133      	cbz	r3, 800db08 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dafa:	4b05      	ldr	r3, [pc, #20]	; (800db10 <xTaskGetSchedulerState+0x1c>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800db00:	bf0c      	ite	eq
 800db02:	2002      	moveq	r0, #2
 800db04:	2000      	movne	r0, #0
 800db06:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800db08:	2001      	movs	r0, #1
	}
 800db0a:	4770      	bx	lr
 800db0c:	2000500c 	.word	0x2000500c
 800db10:	20004fb8 	.word	0x20004fb8

0800db14 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800db14:	2800      	cmp	r0, #0
 800db16:	d04b      	beq.n	800dbb0 <xTaskPriorityInherit+0x9c>
	{
 800db18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800db1a:	4c27      	ldr	r4, [pc, #156]	; (800dbb8 <xTaskPriorityInherit+0xa4>)
 800db1c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800db1e:	6822      	ldr	r2, [r4, #0]
 800db20:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800db22:	4293      	cmp	r3, r2
 800db24:	d214      	bcs.n	800db50 <xTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800db26:	6982      	ldr	r2, [r0, #24]
 800db28:	2a00      	cmp	r2, #0
 800db2a:	db04      	blt.n	800db36 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db2c:	6822      	ldr	r2, [r4, #0]
 800db2e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800db30:	f1c2 0207 	rsb	r2, r2, #7
 800db34:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800db36:	4d21      	ldr	r5, [pc, #132]	; (800dbbc <xTaskPriorityInherit+0xa8>)
 800db38:	6942      	ldr	r2, [r0, #20]
 800db3a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800db3e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800db42:	429a      	cmp	r2, r3
 800db44:	d00c      	beq.n	800db60 <xTaskPriorityInherit+0x4c>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800db46:	6823      	ldr	r3, [r4, #0]
 800db48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db4a:	62c3      	str	r3, [r0, #44]	; 0x2c
				xReturn = pdTRUE;
 800db4c:	2001      	movs	r0, #1
	}
 800db4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800db50:	6823      	ldr	r3, [r4, #0]
 800db52:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800db54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db56:	4298      	cmp	r0, r3
 800db58:	bf2c      	ite	cs
 800db5a:	2000      	movcs	r0, #0
 800db5c:	2001      	movcc	r0, #1
 800db5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db60:	1d07      	adds	r7, r0, #4
 800db62:	4606      	mov	r6, r0
 800db64:	4638      	mov	r0, r7
 800db66:	f7fe f851 	bl	800bc0c <uxListRemove>
 800db6a:	bb10      	cbnz	r0, 800dbb2 <xTaskPriorityInherit+0x9e>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800db6c:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800db6e:	4a14      	ldr	r2, [pc, #80]	; (800dbc0 <xTaskPriorityInherit+0xac>)
 800db70:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800db74:	009b      	lsls	r3, r3, #2
 800db76:	58eb      	ldr	r3, [r5, r3]
 800db78:	b933      	cbnz	r3, 800db88 <xTaskPriorityInherit+0x74>
 800db7a:	6813      	ldr	r3, [r2, #0]
 800db7c:	2001      	movs	r0, #1
 800db7e:	fa00 f101 	lsl.w	r1, r0, r1
 800db82:	ea23 0101 	bic.w	r1, r3, r1
 800db86:	6011      	str	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800db88:	6823      	ldr	r3, [r4, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800db8a:	f8d2 e000 	ldr.w	lr, [r2]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800db8e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800db90:	62f0      	str	r0, [r6, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800db92:	2401      	movs	r4, #1
 800db94:	fa04 f300 	lsl.w	r3, r4, r0
 800db98:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800db9c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800dba0:	ea43 030e 	orr.w	r3, r3, lr
 800dba4:	4639      	mov	r1, r7
 800dba6:	6013      	str	r3, [r2, #0]
 800dba8:	f7fe f806 	bl	800bbb8 <vListInsertEnd>
				xReturn = pdTRUE;
 800dbac:	4620      	mov	r0, r4
 800dbae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
 800dbb0:	4770      	bx	lr
 800dbb2:	4a03      	ldr	r2, [pc, #12]	; (800dbc0 <xTaskPriorityInherit+0xac>)
 800dbb4:	e7e8      	b.n	800db88 <xTaskPriorityInherit+0x74>
 800dbb6:	bf00      	nop
 800dbb8:	20004f14 	.word	0x20004f14
 800dbbc:	20004f20 	.word	0x20004f20
 800dbc0:	20004fc0 	.word	0x20004fc0

0800dbc4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800dbc4:	b308      	cbz	r0, 800dc0a <xTaskPriorityDisinherit+0x46>
	{
 800dbc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 800dbc8:	4b28      	ldr	r3, [pc, #160]	; (800dc6c <xTaskPriorityDisinherit+0xa8>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	4298      	cmp	r0, r3
 800dbce:	d008      	beq.n	800dbe2 <xTaskPriorityDisinherit+0x1e>
 800dbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd4:	f383 8811 	msr	BASEPRI, r3
 800dbd8:	f3bf 8f6f 	isb	sy
 800dbdc:	f3bf 8f4f 	dsb	sy
 800dbe0:	e7fe      	b.n	800dbe0 <xTaskPriorityDisinherit+0x1c>
			configASSERT( pxTCB->uxMutexesHeld );
 800dbe2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800dbe4:	b943      	cbnz	r3, 800dbf8 <xTaskPriorityDisinherit+0x34>
 800dbe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbea:	f383 8811 	msr	BASEPRI, r3
 800dbee:	f3bf 8f6f 	isb	sy
 800dbf2:	f3bf 8f4f 	dsb	sy
 800dbf6:	e7fe      	b.n	800dbf6 <xTaskPriorityDisinherit+0x32>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dbf8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800dbfa:	6d02      	ldr	r2, [r0, #80]	; 0x50
			( pxTCB->uxMutexesHeld )--;
 800dbfc:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dbfe:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800dc00:	6543      	str	r3, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dc02:	d000      	beq.n	800dc06 <xTaskPriorityDisinherit+0x42>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dc04:	b11b      	cbz	r3, 800dc0e <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800dc06:	2000      	movs	r0, #0
 800dc08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc0a:	2000      	movs	r0, #0
	}
 800dc0c:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc0e:	1d07      	adds	r7, r0, #4
 800dc10:	4604      	mov	r4, r0
 800dc12:	4638      	mov	r0, r7
 800dc14:	f7fd fffa 	bl	800bc0c <uxListRemove>
 800dc18:	b1c0      	cbz	r0, 800dc4c <xTaskPriorityDisinherit+0x88>
 800dc1a:	4815      	ldr	r0, [pc, #84]	; (800dc70 <xTaskPriorityDisinherit+0xac>)
 800dc1c:	4a15      	ldr	r2, [pc, #84]	; (800dc74 <xTaskPriorityDisinherit+0xb0>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dc1e:	6d23      	ldr	r3, [r4, #80]	; 0x50
					prvAddTaskToReadyList( pxTCB );
 800dc20:	f8d2 c000 	ldr.w	ip, [r2]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dc24:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800dc26:	2501      	movs	r5, #1
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc28:	f1c3 0e07 	rsb	lr, r3, #7
					prvAddTaskToReadyList( pxTCB );
 800dc2c:	fa05 f603 	lsl.w	r6, r5, r3
 800dc30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800dc34:	ea46 060c 	orr.w	r6, r6, ip
 800dc38:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800dc3c:	4639      	mov	r1, r7
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc3e:	f8c4 e018 	str.w	lr, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800dc42:	6016      	str	r6, [r2, #0]
 800dc44:	f7fd ffb8 	bl	800bbb8 <vListInsertEnd>
					xReturn = pdTRUE;
 800dc48:	4628      	mov	r0, r5
	}
 800dc4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800dc4c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800dc4e:	4808      	ldr	r0, [pc, #32]	; (800dc70 <xTaskPriorityDisinherit+0xac>)
 800dc50:	4a08      	ldr	r2, [pc, #32]	; (800dc74 <xTaskPriorityDisinherit+0xb0>)
 800dc52:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800dc56:	009b      	lsls	r3, r3, #2
 800dc58:	58c3      	ldr	r3, [r0, r3]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d1df      	bne.n	800dc1e <xTaskPriorityDisinherit+0x5a>
 800dc5e:	6813      	ldr	r3, [r2, #0]
 800dc60:	2501      	movs	r5, #1
 800dc62:	408d      	lsls	r5, r1
 800dc64:	ea23 0305 	bic.w	r3, r3, r5
 800dc68:	6013      	str	r3, [r2, #0]
 800dc6a:	e7d8      	b.n	800dc1e <xTaskPriorityDisinherit+0x5a>
 800dc6c:	20004f14 	.word	0x20004f14
 800dc70:	20004f20 	.word	0x20004f20
 800dc74:	20004fc0 	.word	0x20004fc0

0800dc78 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800dc78:	b1a8      	cbz	r0, 800dca6 <vTaskPriorityDisinheritAfterTimeout+0x2e>
	{
 800dc7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB->uxMutexesHeld );
 800dc7c:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800dc7e:	b944      	cbnz	r4, 800dc92 <vTaskPriorityDisinheritAfterTimeout+0x1a>
 800dc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc84:	f383 8811 	msr	BASEPRI, r3
 800dc88:	f3bf 8f6f 	isb	sy
 800dc8c:	f3bf 8f4f 	dsb	sy
 800dc90:	e7fe      	b.n	800dc90 <vTaskPriorityDisinheritAfterTimeout+0x18>
 800dc92:	6d02      	ldr	r2, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dc94:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800dc96:	428a      	cmp	r2, r1
 800dc98:	bf38      	it	cc
 800dc9a:	460a      	movcc	r2, r1
 800dc9c:	4293      	cmp	r3, r2
 800dc9e:	d001      	beq.n	800dca4 <vTaskPriorityDisinheritAfterTimeout+0x2c>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dca0:	2c01      	cmp	r4, #1
 800dca2:	d001      	beq.n	800dca8 <vTaskPriorityDisinheritAfterTimeout+0x30>
 800dca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dca6:	4770      	bx	lr
					configASSERT( pxTCB != pxCurrentTCB );
 800dca8:	4921      	ldr	r1, [pc, #132]	; (800dd30 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 800dcaa:	6809      	ldr	r1, [r1, #0]
 800dcac:	4288      	cmp	r0, r1
 800dcae:	d025      	beq.n	800dcfc <vTaskPriorityDisinheritAfterTimeout+0x84>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dcb0:	6981      	ldr	r1, [r0, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 800dcb2:	62c2      	str	r2, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dcb4:	2900      	cmp	r1, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcb6:	bfa8      	it	ge
 800dcb8:	f1c2 0207 	rsbge	r2, r2, #7
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dcbc:	4d1d      	ldr	r5, [pc, #116]	; (800dd34 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcbe:	bfa8      	it	ge
 800dcc0:	6182      	strge	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dcc2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800dcc6:	6942      	ldr	r2, [r0, #20]
 800dcc8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800dccc:	429a      	cmp	r2, r3
 800dcce:	d1e9      	bne.n	800dca4 <vTaskPriorityDisinheritAfterTimeout+0x2c>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dcd0:	1d06      	adds	r6, r0, #4
 800dcd2:	4604      	mov	r4, r0
 800dcd4:	4630      	mov	r0, r6
 800dcd6:	f7fd ff99 	bl	800bc0c <uxListRemove>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800dcda:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dcdc:	b1b8      	cbz	r0, 800dd0e <vTaskPriorityDisinheritAfterTimeout+0x96>
 800dcde:	2301      	movs	r3, #1
 800dce0:	4c15      	ldr	r4, [pc, #84]	; (800dd38 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 800dce2:	4093      	lsls	r3, r2
 800dce4:	0090      	lsls	r0, r2, #2
						prvAddTaskToReadyList( pxTCB );
 800dce6:	6827      	ldr	r7, [r4, #0]
 800dce8:	4410      	add	r0, r2
 800dcea:	433b      	orrs	r3, r7
 800dcec:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800dcf0:	4631      	mov	r1, r6
 800dcf2:	6023      	str	r3, [r4, #0]
	}
 800dcf4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 800dcf8:	f7fd bf5e 	b.w	800bbb8 <vListInsertEnd>
 800dcfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd00:	f383 8811 	msr	BASEPRI, r3
 800dd04:	f3bf 8f6f 	isb	sy
 800dd08:	f3bf 8f4f 	dsb	sy
 800dd0c:	e7fe      	b.n	800dd0c <vTaskPriorityDisinheritAfterTimeout+0x94>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800dd0e:	0090      	lsls	r0, r2, #2
 800dd10:	1883      	adds	r3, r0, r2
 800dd12:	009b      	lsls	r3, r3, #2
 800dd14:	58eb      	ldr	r3, [r5, r3]
 800dd16:	b11b      	cbz	r3, 800dd20 <vTaskPriorityDisinheritAfterTimeout+0xa8>
 800dd18:	2301      	movs	r3, #1
 800dd1a:	4093      	lsls	r3, r2
 800dd1c:	4c06      	ldr	r4, [pc, #24]	; (800dd38 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 800dd1e:	e7e2      	b.n	800dce6 <vTaskPriorityDisinheritAfterTimeout+0x6e>
 800dd20:	4c05      	ldr	r4, [pc, #20]	; (800dd38 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 800dd22:	2301      	movs	r3, #1
 800dd24:	6821      	ldr	r1, [r4, #0]
 800dd26:	4093      	lsls	r3, r2
 800dd28:	ea21 0103 	bic.w	r1, r1, r3
 800dd2c:	6021      	str	r1, [r4, #0]
 800dd2e:	e7da      	b.n	800dce6 <vTaskPriorityDisinheritAfterTimeout+0x6e>
 800dd30:	20004f14 	.word	0x20004f14
 800dd34:	20004f20 	.word	0x20004f20
 800dd38:	20004fc0 	.word	0x20004fc0

0800dd3c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800dd3c:	4b04      	ldr	r3, [pc, #16]	; (800dd50 <pvTaskIncrementMutexHeldCount+0x14>)
 800dd3e:	681a      	ldr	r2, [r3, #0]
 800dd40:	b11a      	cbz	r2, 800dd4a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800dd42:	6819      	ldr	r1, [r3, #0]
 800dd44:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800dd46:	3201      	adds	r2, #1
 800dd48:	654a      	str	r2, [r1, #84]	; 0x54
		return pxCurrentTCB;
 800dd4a:	6818      	ldr	r0, [r3, #0]
	}
 800dd4c:	4770      	bx	lr
 800dd4e:	bf00      	nop
 800dd50:	20004f14 	.word	0x20004f14

0800dd54 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dd54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd58:	4e22      	ldr	r6, [pc, #136]	; (800dde4 <prvSwitchTimerLists+0x90>)
	if( xTimerQueue != NULL )
 800dd5a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800ddec <prvSwitchTimerLists+0x98>
{
 800dd5e:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 800dd60:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dd64:	e00c      	b.n	800dd80 <prvSwitchTimerLists+0x2c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dd66:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dd68:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dd6a:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dd6c:	1d25      	adds	r5, r4, #4
 800dd6e:	4628      	mov	r0, r5
 800dd70:	f7fd ff4c 	bl	800bc0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd76:	4620      	mov	r0, r4
 800dd78:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800dd7a:	69e3      	ldr	r3, [r4, #28]
 800dd7c:	2b01      	cmp	r3, #1
 800dd7e:	d00a      	beq.n	800dd96 <prvSwitchTimerLists+0x42>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dd80:	6833      	ldr	r3, [r6, #0]
 800dd82:	681a      	ldr	r2, [r3, #0]
 800dd84:	2a00      	cmp	r2, #0
 800dd86:	d1ee      	bne.n	800dd66 <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 800dd88:	4a17      	ldr	r2, [pc, #92]	; (800dde8 <prvSwitchTimerLists+0x94>)
 800dd8a:	6811      	ldr	r1, [r2, #0]
 800dd8c:	6031      	str	r1, [r6, #0]
	pxOverflowTimerList = pxTemp;
 800dd8e:	6013      	str	r3, [r2, #0]
}
 800dd90:	b005      	add	sp, #20
 800dd92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dd96:	69a3      	ldr	r3, [r4, #24]
 800dd98:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 800dd9a:	429f      	cmp	r7, r3
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dd9c:	4629      	mov	r1, r5
			if( xReloadTime > xNextExpireTime )
 800dd9e:	d31a      	bcc.n	800ddd6 <prvSwitchTimerLists+0x82>
	if( xTimerQueue != NULL )
 800dda0:	f8d9 3000 	ldr.w	r3, [r9]
 800dda4:	b173      	cbz	r3, 800ddc4 <prvSwitchTimerLists+0x70>
		xMessage.xMessageID = xCommandID;
 800dda6:	f8cd 8004 	str.w	r8, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ddaa:	9702      	str	r7, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800ddac:	9403      	str	r4, [sp, #12]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ddae:	f7ff fea1 	bl	800daf4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	461a      	mov	r2, r3
 800ddb6:	a901      	add	r1, sp, #4
 800ddb8:	f8d9 0000 	ldr.w	r0, [r9]
 800ddbc:	f7fe fc20 	bl	800c600 <xQueueGenericSend>
				configASSERT( xResult );
 800ddc0:	2800      	cmp	r0, #0
 800ddc2:	d1dd      	bne.n	800dd80 <prvSwitchTimerLists+0x2c>
 800ddc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddc8:	f383 8811 	msr	BASEPRI, r3
 800ddcc:	f3bf 8f6f 	isb	sy
 800ddd0:	f3bf 8f4f 	dsb	sy
 800ddd4:	e7fe      	b.n	800ddd4 <prvSwitchTimerLists+0x80>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ddd6:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ddd8:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ddda:	6830      	ldr	r0, [r6, #0]
 800dddc:	f7fd fefc 	bl	800bbd8 <vListInsert>
 800dde0:	e7ce      	b.n	800dd80 <prvSwitchTimerLists+0x2c>
 800dde2:	bf00      	nop
 800dde4:	20005040 	.word	0x20005040
 800dde8:	20005044 	.word	0x20005044
 800ddec:	20005074 	.word	0x20005074

0800ddf0 <xTimerCreateTimerTask>:
{
 800ddf0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800ddf2:	4c1c      	ldr	r4, [pc, #112]	; (800de64 <xTimerCreateTimerTask+0x74>)
{
 800ddf4:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 800ddf6:	f7fd ff85 	bl	800bd04 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800ddfa:	6826      	ldr	r6, [r4, #0]
 800ddfc:	b1d6      	cbz	r6, 800de34 <xTimerCreateTimerTask+0x44>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ddfe:	f7fd ffa3 	bl	800bd48 <vPortExitCritical>
	if( xTimerQueue != NULL )
 800de02:	6823      	ldr	r3, [r4, #0]
 800de04:	b16b      	cbz	r3, 800de22 <xTimerCreateTimerTask+0x32>
			xReturn = xTaskCreate(	prvTimerTask,
 800de06:	4b18      	ldr	r3, [pc, #96]	; (800de68 <xTimerCreateTimerTask+0x78>)
 800de08:	9301      	str	r3, [sp, #4]
 800de0a:	2302      	movs	r3, #2
 800de0c:	9300      	str	r3, [sp, #0]
 800de0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800de12:	2300      	movs	r3, #0
 800de14:	4915      	ldr	r1, [pc, #84]	; (800de6c <xTimerCreateTimerTask+0x7c>)
 800de16:	4816      	ldr	r0, [pc, #88]	; (800de70 <xTimerCreateTimerTask+0x80>)
 800de18:	f7ff fa42 	bl	800d2a0 <xTaskCreate>
	configASSERT( xReturn );
 800de1c:	b108      	cbz	r0, 800de22 <xTimerCreateTimerTask+0x32>
}
 800de1e:	b003      	add	sp, #12
 800de20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de26:	f383 8811 	msr	BASEPRI, r3
 800de2a:	f3bf 8f6f 	isb	sy
 800de2e:	f3bf 8f4f 	dsb	sy
 800de32:	e7fe      	b.n	800de32 <xTimerCreateTimerTask+0x42>
			vListInitialise( &xActiveTimerList1 );
 800de34:	4f0f      	ldr	r7, [pc, #60]	; (800de74 <xTimerCreateTimerTask+0x84>)
			vListInitialise( &xActiveTimerList2 );
 800de36:	4d10      	ldr	r5, [pc, #64]	; (800de78 <xTimerCreateTimerTask+0x88>)
			vListInitialise( &xActiveTimerList1 );
 800de38:	4638      	mov	r0, r7
 800de3a:	f7fd fead 	bl	800bb98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800de3e:	4628      	mov	r0, r5
 800de40:	f7fd feaa 	bl	800bb98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800de44:	4a0d      	ldr	r2, [pc, #52]	; (800de7c <xTimerCreateTimerTask+0x8c>)
			pxOverflowTimerList = &xActiveTimerList2;
 800de46:	4b0e      	ldr	r3, [pc, #56]	; (800de80 <xTimerCreateTimerTask+0x90>)
			pxCurrentTimerList = &xActiveTimerList1;
 800de48:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800de4a:	210c      	movs	r1, #12
 800de4c:	4632      	mov	r2, r6
 800de4e:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800de50:	601d      	str	r5, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800de52:	f7fe fa2d 	bl	800c2b0 <xQueueGenericCreate>
 800de56:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 800de58:	2800      	cmp	r0, #0
 800de5a:	d0d0      	beq.n	800ddfe <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800de5c:	4909      	ldr	r1, [pc, #36]	; (800de84 <xTimerCreateTimerTask+0x94>)
 800de5e:	f7ff f911 	bl	800d084 <vQueueAddToRegistry>
 800de62:	e7cc      	b.n	800ddfe <xTimerCreateTimerTask+0xe>
 800de64:	20005074 	.word	0x20005074
 800de68:	20005078 	.word	0x20005078
 800de6c:	08013bf4 	.word	0x08013bf4
 800de70:	0800dfa1 	.word	0x0800dfa1
 800de74:	20005048 	.word	0x20005048
 800de78:	2000505c 	.word	0x2000505c
 800de7c:	20005040 	.word	0x20005040
 800de80:	20005044 	.word	0x20005044
 800de84:	08013bec 	.word	0x08013bec

0800de88 <xTimerCreate>:
	{
 800de88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de8c:	4682      	mov	sl, r0
 800de8e:	b083      	sub	sp, #12
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800de90:	2028      	movs	r0, #40	; 0x28
	{
 800de92:	460d      	mov	r5, r1
 800de94:	4691      	mov	r9, r2
 800de96:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800de98:	f7fe f8ae 	bl	800bff8 <pvPortMalloc>
		if( pxNewTimer != NULL )
 800de9c:	4604      	mov	r4, r0
 800de9e:	b1f0      	cbz	r0, 800dede <xTimerCreate+0x56>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800dea0:	b945      	cbnz	r5, 800deb4 <xTimerCreate+0x2c>
 800dea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dea6:	f383 8811 	msr	BASEPRI, r3
 800deaa:	f3bf 8f6f 	isb	sy
 800deae:	f3bf 8f4f 	dsb	sy
 800deb2:	e7fe      	b.n	800deb2 <xTimerCreate+0x2a>
		if( xTimerQueue == NULL )
 800deb4:	4f1a      	ldr	r7, [pc, #104]	; (800df20 <xTimerCreate+0x98>)
	taskENTER_CRITICAL();
 800deb6:	f7fd ff25 	bl	800bd04 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800deba:	f8d7 8000 	ldr.w	r8, [r7]
 800debe:	f1b8 0f00 	cmp.w	r8, #0
 800dec2:	d010      	beq.n	800dee6 <xTimerCreate+0x5e>
	taskEXIT_CRITICAL();
 800dec4:	f7fd ff40 	bl	800bd48 <vPortExitCritical>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800dec8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		pxNewTimer->pcTimerName = pcTimerName;
 800deca:	f8c4 a000 	str.w	sl, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800dece:	61a5      	str	r5, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800ded0:	f8c4 901c 	str.w	r9, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800ded4:	6226      	str	r6, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ded6:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800ded8:	1d20      	adds	r0, r4, #4
 800deda:	f7fd fe69 	bl	800bbb0 <vListInitialiseItem>
	}
 800dede:	4620      	mov	r0, r4
 800dee0:	b003      	add	sp, #12
 800dee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			vListInitialise( &xActiveTimerList1 );
 800dee6:	4b0f      	ldr	r3, [pc, #60]	; (800df24 <xTimerCreate+0x9c>)
			vListInitialise( &xActiveTimerList2 );
 800dee8:	f8df b044 	ldr.w	fp, [pc, #68]	; 800df30 <xTimerCreate+0xa8>
			vListInitialise( &xActiveTimerList1 );
 800deec:	9301      	str	r3, [sp, #4]
 800deee:	4618      	mov	r0, r3
 800def0:	f7fd fe52 	bl	800bb98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800def4:	4658      	mov	r0, fp
 800def6:	f7fd fe4f 	bl	800bb98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800defa:	490b      	ldr	r1, [pc, #44]	; (800df28 <xTimerCreate+0xa0>)
			pxOverflowTimerList = &xActiveTimerList2;
 800defc:	f8df e034 	ldr.w	lr, [pc, #52]	; 800df34 <xTimerCreate+0xac>
			pxCurrentTimerList = &xActiveTimerList1;
 800df00:	9b01      	ldr	r3, [sp, #4]
 800df02:	600b      	str	r3, [r1, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800df04:	4642      	mov	r2, r8
 800df06:	210c      	movs	r1, #12
 800df08:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800df0a:	f8ce b000 	str.w	fp, [lr]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800df0e:	f7fe f9cf 	bl	800c2b0 <xQueueGenericCreate>
 800df12:	6038      	str	r0, [r7, #0]
				if( xTimerQueue != NULL )
 800df14:	2800      	cmp	r0, #0
 800df16:	d0d5      	beq.n	800dec4 <xTimerCreate+0x3c>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800df18:	4904      	ldr	r1, [pc, #16]	; (800df2c <xTimerCreate+0xa4>)
 800df1a:	f7ff f8b3 	bl	800d084 <vQueueAddToRegistry>
 800df1e:	e7d1      	b.n	800dec4 <xTimerCreate+0x3c>
 800df20:	20005074 	.word	0x20005074
 800df24:	20005048 	.word	0x20005048
 800df28:	20005040 	.word	0x20005040
 800df2c:	08013bec 	.word	0x08013bec
 800df30:	2000505c 	.word	0x2000505c
 800df34:	20005044 	.word	0x20005044

0800df38 <xTimerGenericCommand>:
	configASSERT( xTimer );
 800df38:	b330      	cbz	r0, 800df88 <xTimerGenericCommand+0x50>
{
 800df3a:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 800df3c:	4d17      	ldr	r5, [pc, #92]	; (800df9c <xTimerGenericCommand+0x64>)
 800df3e:	4604      	mov	r4, r0
 800df40:	6828      	ldr	r0, [r5, #0]
{
 800df42:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 800df44:	b180      	cbz	r0, 800df68 <xTimerGenericCommand+0x30>
 800df46:	4616      	mov	r6, r2
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800df48:	2905      	cmp	r1, #5
 800df4a:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
 800df4c:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800df4e:	9602      	str	r6, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800df50:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800df52:	dc0b      	bgt.n	800df6c <xTimerGenericCommand+0x34>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800df54:	f7ff fdce 	bl	800daf4 <xTaskGetSchedulerState>
 800df58:	2802      	cmp	r0, #2
 800df5a:	d00d      	beq.n	800df78 <xTimerGenericCommand+0x40>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800df5c:	2300      	movs	r3, #0
 800df5e:	6828      	ldr	r0, [r5, #0]
 800df60:	461a      	mov	r2, r3
 800df62:	a901      	add	r1, sp, #4
 800df64:	f7fe fb4c 	bl	800c600 <xQueueGenericSend>
}
 800df68:	b004      	add	sp, #16
 800df6a:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800df6c:	2300      	movs	r3, #0
 800df6e:	a901      	add	r1, sp, #4
 800df70:	f7fe fc9c 	bl	800c8ac <xQueueGenericSendFromISR>
}
 800df74:	b004      	add	sp, #16
 800df76:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800df78:	6828      	ldr	r0, [r5, #0]
 800df7a:	9a08      	ldr	r2, [sp, #32]
 800df7c:	2300      	movs	r3, #0
 800df7e:	a901      	add	r1, sp, #4
 800df80:	f7fe fb3e 	bl	800c600 <xQueueGenericSend>
}
 800df84:	b004      	add	sp, #16
 800df86:	bd70      	pop	{r4, r5, r6, pc}
 800df88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df8c:	f383 8811 	msr	BASEPRI, r3
 800df90:	f3bf 8f6f 	isb	sy
 800df94:	f3bf 8f4f 	dsb	sy
 800df98:	e7fe      	b.n	800df98 <xTimerGenericCommand+0x60>
 800df9a:	bf00      	nop
 800df9c:	20005074 	.word	0x20005074

0800dfa0 <prvTimerTask>:
{
 800dfa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfa4:	4f87      	ldr	r7, [pc, #540]	; (800e1c4 <prvTimerTask+0x224>)
 800dfa6:	4e88      	ldr	r6, [pc, #544]	; (800e1c8 <prvTimerTask+0x228>)
 800dfa8:	f8df 8228 	ldr.w	r8, [pc, #552]	; 800e1d4 <prvTimerTask+0x234>
 800dfac:	4c87      	ldr	r4, [pc, #540]	; (800e1cc <prvTimerTask+0x22c>)
 800dfae:	b089      	sub	sp, #36	; 0x24
 800dfb0:	f04f 0901 	mov.w	r9, #1
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	681d      	ldr	r5, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dfb8:	2d00      	cmp	r5, #0
 800dfba:	d04a      	beq.n	800e052 <prvTimerTask+0xb2>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dfbc:	68db      	ldr	r3, [r3, #12]
 800dfbe:	f8d3 a000 	ldr.w	sl, [r3]
	vTaskSuspendAll();
 800dfc2:	f7ff fa9d 	bl	800d500 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800dfc6:	f7ff faa3 	bl	800d510 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800dfca:	6833      	ldr	r3, [r6, #0]
 800dfcc:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 800dfce:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 800dfd0:	d851      	bhi.n	800e076 <prvTimerTask+0xd6>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dfd2:	4582      	cmp	sl, r0
	xLastTime = xTimeNow;
 800dfd4:	6030      	str	r0, [r6, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dfd6:	d95a      	bls.n	800e08e <prvTimerTask+0xee>
 800dfd8:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dfda:	ebaa 010b 	sub.w	r1, sl, fp
 800dfde:	6820      	ldr	r0, [r4, #0]
 800dfe0:	f7ff f87a 	bl	800d0d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dfe4:	f7ff fb48 	bl	800d678 <xTaskResumeAll>
 800dfe8:	b938      	cbnz	r0, 800dffa <prvTimerTask+0x5a>
					portYIELD_WITHIN_API();
 800dfea:	4a79      	ldr	r2, [pc, #484]	; (800e1d0 <prvTimerTask+0x230>)
 800dfec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dff0:	6013      	str	r3, [r2, #0]
 800dff2:	f3bf 8f4f 	dsb	sy
 800dff6:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dffa:	2500      	movs	r5, #0
 800dffc:	2200      	movs	r2, #0
 800dffe:	a905      	add	r1, sp, #20
 800e000:	6820      	ldr	r0, [r4, #0]
 800e002:	f7fe fd0d 	bl	800ca20 <xQueueReceive>
 800e006:	2800      	cmp	r0, #0
 800e008:	d0d4      	beq.n	800dfb4 <prvTimerTask+0x14>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e00a:	9b05      	ldr	r3, [sp, #20]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	dbf5      	blt.n	800dffc <prvTimerTask+0x5c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e010:	f8dd b01c 	ldr.w	fp, [sp, #28]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e014:	f8db 3014 	ldr.w	r3, [fp, #20]
 800e018:	b11b      	cbz	r3, 800e022 <prvTimerTask+0x82>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e01a:	f10b 0004 	add.w	r0, fp, #4
 800e01e:	f7fd fdf5 	bl	800bc0c <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800e022:	f7ff fa75 	bl	800d510 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800e026:	6833      	ldr	r3, [r6, #0]
 800e028:	4298      	cmp	r0, r3
 800e02a:	d32b      	bcc.n	800e084 <prvTimerTask+0xe4>
 800e02c:	9b05      	ldr	r3, [sp, #20]
	xLastTime = xTimeNow;
 800e02e:	6030      	str	r0, [r6, #0]
 800e030:	2b09      	cmp	r3, #9
 800e032:	d8e3      	bhi.n	800dffc <prvTimerTask+0x5c>
 800e034:	fa09 f303 	lsl.w	r3, r9, r3
 800e038:	f413 7f04 	tst.w	r3, #528	; 0x210
 800e03c:	f040 8090 	bne.w	800e160 <prvTimerTask+0x1c0>
 800e040:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 800e044:	d160      	bne.n	800e108 <prvTimerTask+0x168>
 800e046:	069b      	lsls	r3, r3, #26
 800e048:	d5d8      	bpl.n	800dffc <prvTimerTask+0x5c>
						vPortFree( pxTimer );
 800e04a:	4658      	mov	r0, fp
 800e04c:	f7fe f864 	bl	800c118 <vPortFree>
 800e050:	e7d4      	b.n	800dffc <prvTimerTask+0x5c>
	vTaskSuspendAll();
 800e052:	f7ff fa55 	bl	800d500 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800e056:	f7ff fa5b 	bl	800d510 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800e05a:	6833      	ldr	r3, [r6, #0]
 800e05c:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 800e05e:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 800e060:	d309      	bcc.n	800e076 <prvTimerTask+0xd6>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e062:	f8d8 3000 	ldr.w	r3, [r8]
	xLastTime = xTimeNow;
 800e066:	f8c6 b000 	str.w	fp, [r6]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e06a:	681a      	ldr	r2, [r3, #0]
 800e06c:	fab2 f282 	clz	r2, r2
		xNextExpireTime = ( TickType_t ) 0U;
 800e070:	46aa      	mov	sl, r5
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e072:	0952      	lsrs	r2, r2, #5
 800e074:	e7b1      	b.n	800dfda <prvTimerTask+0x3a>
		prvSwitchTimerLists();
 800e076:	f7ff fe6d 	bl	800dd54 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800e07a:	f8c6 b000 	str.w	fp, [r6]
			( void ) xTaskResumeAll();
 800e07e:	f7ff fafb 	bl	800d678 <xTaskResumeAll>
 800e082:	e7ba      	b.n	800dffa <prvTimerTask+0x5a>
 800e084:	9003      	str	r0, [sp, #12]
		prvSwitchTimerLists();
 800e086:	f7ff fe65 	bl	800dd54 <prvSwitchTimerLists>
 800e08a:	9803      	ldr	r0, [sp, #12]
 800e08c:	e7ce      	b.n	800e02c <prvTimerTask+0x8c>
				( void ) xTaskResumeAll();
 800e08e:	f7ff faf3 	bl	800d678 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	68db      	ldr	r3, [r3, #12]
 800e096:	68dd      	ldr	r5, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e098:	1d29      	adds	r1, r5, #4
 800e09a:	4608      	mov	r0, r1
 800e09c:	9103      	str	r1, [sp, #12]
 800e09e:	f7fd fdb5 	bl	800bc0c <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e0a2:	69ea      	ldr	r2, [r5, #28]
 800e0a4:	9903      	ldr	r1, [sp, #12]
 800e0a6:	2a01      	cmp	r2, #1
 800e0a8:	d003      	beq.n	800e0b2 <prvTimerTask+0x112>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e0aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e0ac:	4628      	mov	r0, r5
 800e0ae:	4798      	blx	r3
 800e0b0:	e7a3      	b.n	800dffa <prvTimerTask+0x5a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e0b2:	69aa      	ldr	r2, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e0b4:	612d      	str	r5, [r5, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e0b6:	eb0a 0002 	add.w	r0, sl, r2
	if( xNextExpiryTime <= xTimeNow )
 800e0ba:	4558      	cmp	r0, fp
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e0bc:	6068      	str	r0, [r5, #4]
	if( xNextExpiryTime <= xTimeNow )
 800e0be:	d81f      	bhi.n	800e100 <prvTimerTask+0x160>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0c0:	ebab 0b0a 	sub.w	fp, fp, sl
 800e0c4:	455a      	cmp	r2, fp
 800e0c6:	d85e      	bhi.n	800e186 <prvTimerTask+0x1e6>
	if( xTimerQueue != NULL )
 800e0c8:	6823      	ldr	r3, [r4, #0]
 800e0ca:	b183      	cbz	r3, 800e0ee <prvTimerTask+0x14e>
		xMessage.xMessageID = xCommandID;
 800e0cc:	f04f 0b00 	mov.w	fp, #0
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e0d0:	f8cd a018 	str.w	sl, [sp, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800e0d4:	9507      	str	r5, [sp, #28]
		xMessage.xMessageID = xCommandID;
 800e0d6:	f8cd b014 	str.w	fp, [sp, #20]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e0da:	f7ff fd0b 	bl	800daf4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e0de:	465b      	mov	r3, fp
 800e0e0:	465a      	mov	r2, fp
 800e0e2:	a905      	add	r1, sp, #20
 800e0e4:	6820      	ldr	r0, [r4, #0]
 800e0e6:	f7fe fa8b 	bl	800c600 <xQueueGenericSend>
			configASSERT( xResult );
 800e0ea:	2800      	cmp	r0, #0
 800e0ec:	d1dd      	bne.n	800e0aa <prvTimerTask+0x10a>
 800e0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0f2:	f383 8811 	msr	BASEPRI, r3
 800e0f6:	f3bf 8f6f 	isb	sy
 800e0fa:	f3bf 8f4f 	dsb	sy
 800e0fe:	e7fe      	b.n	800e0fe <prvTimerTask+0x15e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e100:	6838      	ldr	r0, [r7, #0]
 800e102:	f7fd fd69 	bl	800bbd8 <vListInsert>
 800e106:	e7d0      	b.n	800e0aa <prvTimerTask+0x10a>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e108:	9b06      	ldr	r3, [sp, #24]
 800e10a:	f8db 1018 	ldr.w	r1, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e10e:	f8cb b010 	str.w	fp, [fp, #16]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e112:	185a      	adds	r2, r3, r1
	if( xNextExpiryTime <= xTimeNow )
 800e114:	4282      	cmp	r2, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e116:	f8cb 2004 	str.w	r2, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 800e11a:	d839      	bhi.n	800e190 <prvTimerTask+0x1f0>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e11c:	1ac3      	subs	r3, r0, r3
 800e11e:	4299      	cmp	r1, r3
 800e120:	d840      	bhi.n	800e1a4 <prvTimerTask+0x204>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e122:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 800e126:	4658      	mov	r0, fp
 800e128:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e12a:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e12e:	2b01      	cmp	r3, #1
 800e130:	f47f af64 	bne.w	800dffc <prvTimerTask+0x5c>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e134:	9906      	ldr	r1, [sp, #24]
 800e136:	f8db 2018 	ldr.w	r2, [fp, #24]
 800e13a:	9500      	str	r5, [sp, #0]
 800e13c:	2300      	movs	r3, #0
 800e13e:	440a      	add	r2, r1
 800e140:	4658      	mov	r0, fp
 800e142:	4619      	mov	r1, r3
 800e144:	f7ff fef8 	bl	800df38 <xTimerGenericCommand>
							configASSERT( xResult );
 800e148:	2800      	cmp	r0, #0
 800e14a:	f47f af57 	bne.w	800dffc <prvTimerTask+0x5c>
 800e14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e152:	f383 8811 	msr	BASEPRI, r3
 800e156:	f3bf 8f6f 	isb	sy
 800e15a:	f3bf 8f4f 	dsb	sy
 800e15e:	e7fe      	b.n	800e15e <prvTimerTask+0x1be>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e160:	9b06      	ldr	r3, [sp, #24]
 800e162:	f8cb 3018 	str.w	r3, [fp, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e166:	b323      	cbz	r3, 800e1b2 <prvTimerTask+0x212>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e168:	4403      	add	r3, r0
	if( xNextExpiryTime <= xTimeNow )
 800e16a:	4283      	cmp	r3, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e16c:	f8cb 3004 	str.w	r3, [fp, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e170:	f8cb b010 	str.w	fp, [fp, #16]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e174:	f10b 0104 	add.w	r1, fp, #4
 800e178:	bf94      	ite	ls
 800e17a:	f8d8 0000 	ldrls.w	r0, [r8]
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e17e:	6838      	ldrhi	r0, [r7, #0]
 800e180:	f7fd fd2a 	bl	800bbd8 <vListInsert>
 800e184:	e73a      	b.n	800dffc <prvTimerTask+0x5c>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e186:	f8d8 0000 	ldr.w	r0, [r8]
 800e18a:	f7fd fd25 	bl	800bbd8 <vListInsert>
 800e18e:	e78c      	b.n	800e0aa <prvTimerTask+0x10a>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e190:	4283      	cmp	r3, r0
 800e192:	d901      	bls.n	800e198 <prvTimerTask+0x1f8>
 800e194:	4293      	cmp	r3, r2
 800e196:	d9c4      	bls.n	800e122 <prvTimerTask+0x182>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e198:	f10b 0104 	add.w	r1, fp, #4
 800e19c:	6838      	ldr	r0, [r7, #0]
 800e19e:	f7fd fd1b 	bl	800bbd8 <vListInsert>
 800e1a2:	e72b      	b.n	800dffc <prvTimerTask+0x5c>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e1a4:	f10b 0104 	add.w	r1, fp, #4
 800e1a8:	f8d8 0000 	ldr.w	r0, [r8]
 800e1ac:	f7fd fd14 	bl	800bbd8 <vListInsert>
 800e1b0:	e724      	b.n	800dffc <prvTimerTask+0x5c>
 800e1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b6:	f383 8811 	msr	BASEPRI, r3
 800e1ba:	f3bf 8f6f 	isb	sy
 800e1be:	f3bf 8f4f 	dsb	sy
 800e1c2:	e7fe      	b.n	800e1c2 <prvTimerTask+0x222>
 800e1c4:	20005040 	.word	0x20005040
 800e1c8:	20005070 	.word	0x20005070
 800e1cc:	20005074 	.word	0x20005074
 800e1d0:	e000ed04 	.word	0xe000ed04
 800e1d4:	20005044 	.word	0x20005044

0800e1d8 <accGiveSemaphore>:
//  Wire.send(x);
//  #endif
//}

void accGiveSemaphore(void){
	osSemaphoreRelease (accSampleSemaphoreHandle);
 800e1d8:	4b01      	ldr	r3, [pc, #4]	; (800e1e0 <accGiveSemaphore+0x8>)
 800e1da:	6818      	ldr	r0, [r3, #0]
 800e1dc:	f7fd bcb4 	b.w	800bb48 <osSemaphoreRelease>
 800e1e0:	2000536c 	.word	0x2000536c

0800e1e4 <MMA8451_begin>:
/**************************************************************************/
/*!
    @brief  Setups the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
bool MMA8451_begin(void) {
 800e1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1e8:	b086      	sub	sp, #24
    HAL_I2C_Mem_Read(&hi2c2, _i2caddr<<1, reg, 1, &sample, 1, 2);
 800e1ea:	2401      	movs	r4, #1
  _i2caddr = MMA8451_DEFAULT_ADDRESS;
 800e1ec:	4d54      	ldr	r5, [pc, #336]	; (800e340 <MMA8451_begin+0x15c>)
    HAL_I2C_Mem_Read(&hi2c2, _i2caddr<<1, reg, 1, &sample, 1, 2);
 800e1ee:	4855      	ldr	r0, [pc, #340]	; (800e344 <MMA8451_begin+0x160>)
 800e1f0:	9401      	str	r4, [sp, #4]
 800e1f2:	2602      	movs	r6, #2
 800e1f4:	f10d 0717 	add.w	r7, sp, #23
  _i2caddr = MMA8451_DEFAULT_ADDRESS;
 800e1f8:	f04f 0e1c 	mov.w	lr, #28
    HAL_I2C_Mem_Read(&hi2c2, _i2caddr<<1, reg, 1, &sample, 1, 2);
 800e1fc:	4623      	mov	r3, r4
 800e1fe:	9602      	str	r6, [sp, #8]
 800e200:	9700      	str	r7, [sp, #0]
 800e202:	220d      	movs	r2, #13
 800e204:	2138      	movs	r1, #56	; 0x38
  _i2caddr = MMA8451_DEFAULT_ADDRESS;
 800e206:	f885 e000 	strb.w	lr, [r5]
    HAL_I2C_Mem_Read(&hi2c2, _i2caddr<<1, reg, 1, &sample, 1, 2);
 800e20a:	f7f4 fbf3 	bl	80029f4 <HAL_I2C_Mem_Read>
    return sample;
 800e20e:	f89d 3017 	ldrb.w	r3, [sp, #23]

  /* Check connection */
  uint8_t deviceid = MMA8451_readRegister8(MMA8451_REG_WHOAMI);
  if (deviceid != 0x1A)
 800e212:	2b1a      	cmp	r3, #26
 800e214:	d003      	beq.n	800e21e <MMA8451_begin+0x3a>
  {
    /* No MMA8451 detected ... return false */
    //Serial.println(deviceid, HEX);
    return false;
 800e216:	2000      	movs	r0, #0
    Serial.println(MMA8451_readRegister8(i), HEX);
  }
  */

  return true;
}
 800e218:	b006      	add	sp, #24
 800e21a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e21e:	ab06      	add	r3, sp, #24
 800e220:	2240      	movs	r2, #64	; 0x40
	HAL_I2C_Mem_Write(&hi2c2, _i2caddr<<1, reg, 1, &value, 1, 1);
 800e222:	f995 1000 	ldrsb.w	r1, [r5]
 800e226:	9402      	str	r4, [sp, #8]
 800e228:	f803 2d02 	strb.w	r2, [r3, #-2]!
 800e22c:	40a1      	lsls	r1, r4
 800e22e:	4845      	ldr	r0, [pc, #276]	; (800e344 <MMA8451_begin+0x160>)
 800e230:	e88d 0018 	stmia.w	sp, {r3, r4}
 800e234:	b289      	uxth	r1, r1
 800e236:	4623      	mov	r3, r4
 800e238:	222b      	movs	r2, #43	; 0x2b
    HAL_I2C_Mem_Read(&hi2c2, _i2caddr<<1, reg, 1, &sample, 1, 2);
 800e23a:	4680      	mov	r8, r0
	HAL_I2C_Mem_Write(&hi2c2, _i2caddr<<1, reg, 1, &value, 1, 1);
 800e23c:	f7f4 fab6 	bl	80027ac <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Read(&hi2c2, _i2caddr<<1, reg, 1, &sample, 1, 2);
 800e240:	f995 1000 	ldrsb.w	r1, [r5]
 800e244:	9602      	str	r6, [sp, #8]
 800e246:	0049      	lsls	r1, r1, #1
 800e248:	2301      	movs	r3, #1
 800e24a:	b289      	uxth	r1, r1
 800e24c:	9401      	str	r4, [sp, #4]
 800e24e:	9700      	str	r7, [sp, #0]
 800e250:	222b      	movs	r2, #43	; 0x2b
 800e252:	4640      	mov	r0, r8
 800e254:	f7f4 fbce 	bl	80029f4 <HAL_I2C_Mem_Read>
    return sample;
 800e258:	f89d 3017 	ldrb.w	r3, [sp, #23]
  while (MMA8451_readRegister8(MMA8451_REG_CTRL_REG2) & 0x40);
 800e25c:	065b      	lsls	r3, r3, #25
 800e25e:	d4ef      	bmi.n	800e240 <MMA8451_begin+0x5c>
 800e260:	ab06      	add	r3, sp, #24
	HAL_I2C_Mem_Write(&hi2c2, _i2caddr<<1, reg, 1, &value, 1, 1);
 800e262:	f995 1000 	ldrsb.w	r1, [r5]
 800e266:	9402      	str	r4, [sp, #8]
 800e268:	f803 4d08 	strb.w	r4, [r3, #-8]!
 800e26c:	0049      	lsls	r1, r1, #1
 800e26e:	e88d 0018 	stmia.w	sp, {r3, r4}
 800e272:	b289      	uxth	r1, r1
 800e274:	2301      	movs	r3, #1
 800e276:	220e      	movs	r2, #14
 800e278:	4832      	ldr	r0, [pc, #200]	; (800e344 <MMA8451_begin+0x160>)
 800e27a:	f7f4 fa97 	bl	80027ac <HAL_I2C_Mem_Write>
 800e27e:	ab06      	add	r3, sp, #24
 800e280:	f995 1000 	ldrsb.w	r1, [r5]
 800e284:	9402      	str	r4, [sp, #8]
 800e286:	2203      	movs	r2, #3
 800e288:	f803 2d07 	strb.w	r2, [r3, #-7]!
 800e28c:	0049      	lsls	r1, r1, #1
 800e28e:	e88d 0018 	stmia.w	sp, {r3, r4}
 800e292:	b289      	uxth	r1, r1
 800e294:	2301      	movs	r3, #1
 800e296:	220f      	movs	r2, #15
 800e298:	482a      	ldr	r0, [pc, #168]	; (800e344 <MMA8451_begin+0x160>)
 800e29a:	f7f4 fa87 	bl	80027ac <HAL_I2C_Mem_Write>
 800e29e:	ab06      	add	r3, sp, #24
 800e2a0:	f995 1000 	ldrsb.w	r1, [r5]
 800e2a4:	f803 6d06 	strb.w	r6, [r3, #-6]!
 800e2a8:	0049      	lsls	r1, r1, #1
 800e2aa:	e88d 0018 	stmia.w	sp, {r3, r4}
 800e2ae:	9402      	str	r4, [sp, #8]
 800e2b0:	b289      	uxth	r1, r1
 800e2b2:	2301      	movs	r3, #1
 800e2b4:	222b      	movs	r2, #43	; 0x2b
 800e2b6:	4823      	ldr	r0, [pc, #140]	; (800e344 <MMA8451_begin+0x160>)
 800e2b8:	f7f4 fa78 	bl	80027ac <HAL_I2C_Mem_Write>
 800e2bc:	ab06      	add	r3, sp, #24
 800e2be:	f995 1000 	ldrsb.w	r1, [r5]
 800e2c2:	f803 4d05 	strb.w	r4, [r3, #-5]!
 800e2c6:	0049      	lsls	r1, r1, #1
 800e2c8:	e88d 0018 	stmia.w	sp, {r3, r4}
 800e2cc:	9402      	str	r4, [sp, #8]
 800e2ce:	b289      	uxth	r1, r1
 800e2d0:	2301      	movs	r3, #1
 800e2d2:	222d      	movs	r2, #45	; 0x2d
 800e2d4:	481b      	ldr	r0, [pc, #108]	; (800e344 <MMA8451_begin+0x160>)
 800e2d6:	f7f4 fa69 	bl	80027ac <HAL_I2C_Mem_Write>
 800e2da:	ab06      	add	r3, sp, #24
 800e2dc:	f995 1000 	ldrsb.w	r1, [r5]
 800e2e0:	f803 4d04 	strb.w	r4, [r3, #-4]!
 800e2e4:	0049      	lsls	r1, r1, #1
 800e2e6:	e88d 0018 	stmia.w	sp, {r3, r4}
 800e2ea:	9402      	str	r4, [sp, #8]
 800e2ec:	b289      	uxth	r1, r1
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	222e      	movs	r2, #46	; 0x2e
 800e2f2:	4814      	ldr	r0, [pc, #80]	; (800e344 <MMA8451_begin+0x160>)
 800e2f4:	f7f4 fa5a 	bl	80027ac <HAL_I2C_Mem_Write>
 800e2f8:	ab06      	add	r3, sp, #24
 800e2fa:	f995 1000 	ldrsb.w	r1, [r5]
 800e2fe:	9402      	str	r4, [sp, #8]
 800e300:	2240      	movs	r2, #64	; 0x40
 800e302:	f803 2d03 	strb.w	r2, [r3, #-3]!
 800e306:	0049      	lsls	r1, r1, #1
 800e308:	e88d 0018 	stmia.w	sp, {r3, r4}
 800e30c:	b289      	uxth	r1, r1
 800e30e:	2301      	movs	r3, #1
 800e310:	2211      	movs	r2, #17
 800e312:	480c      	ldr	r0, [pc, #48]	; (800e344 <MMA8451_begin+0x160>)
 800e314:	f7f4 fa4a 	bl	80027ac <HAL_I2C_Mem_Write>
 800e318:	f995 1000 	ldrsb.w	r1, [r5]
 800e31c:	9402      	str	r4, [sp, #8]
 800e31e:	0049      	lsls	r1, r1, #1
 800e320:	9401      	str	r4, [sp, #4]
 800e322:	b289      	uxth	r1, r1
 800e324:	9700      	str	r7, [sp, #0]
 800e326:	2405      	movs	r4, #5
 800e328:	2301      	movs	r3, #1
 800e32a:	222a      	movs	r2, #42	; 0x2a
 800e32c:	4805      	ldr	r0, [pc, #20]	; (800e344 <MMA8451_begin+0x160>)
 800e32e:	f88d 4017 	strb.w	r4, [sp, #23]
 800e332:	f7f4 fa3b 	bl	80027ac <HAL_I2C_Mem_Write>
 800e336:	2001      	movs	r0, #1
}
 800e338:	b006      	add	sp, #24
 800e33a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e33e:	bf00      	nop
 800e340:	20005370 	.word	0x20005370
 800e344:	20005580 	.word	0x20005580

0800e348 <MMA8451_setRange>:
/*!
    @brief  Sets the g range for the accelerometer
*/
/**************************************************************************/
void MMA8451_setRange(mma8451_range_t range)
{
 800e348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_I2C_Mem_Read(&hi2c2, _i2caddr<<1, reg, 1, &sample, 1, 2);
 800e34c:	4f24      	ldr	r7, [pc, #144]	; (800e3e0 <MMA8451_setRange+0x98>)
 800e34e:	4d25      	ldr	r5, [pc, #148]	; (800e3e4 <MMA8451_setRange+0x9c>)
 800e350:	f997 1000 	ldrsb.w	r1, [r7]
{
 800e354:	b086      	sub	sp, #24
    HAL_I2C_Mem_Read(&hi2c2, _i2caddr<<1, reg, 1, &sample, 1, 2);
 800e356:	2401      	movs	r4, #1
 800e358:	f10d 0617 	add.w	r6, sp, #23
 800e35c:	2302      	movs	r3, #2
 800e35e:	0049      	lsls	r1, r1, #1
 800e360:	9302      	str	r3, [sp, #8]
 800e362:	9600      	str	r6, [sp, #0]
 800e364:	4623      	mov	r3, r4
 800e366:	b289      	uxth	r1, r1
{
 800e368:	4680      	mov	r8, r0
    HAL_I2C_Mem_Read(&hi2c2, _i2caddr<<1, reg, 1, &sample, 1, 2);
 800e36a:	9401      	str	r4, [sp, #4]
 800e36c:	4628      	mov	r0, r5
 800e36e:	222a      	movs	r2, #42	; 0x2a
 800e370:	f7f4 fb40 	bl	80029f4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Write(&hi2c2, _i2caddr<<1, reg, 1, &value, 1, 1);
 800e374:	f997 1000 	ldrsb.w	r1, [r7]
 800e378:	9600      	str	r6, [sp, #0]
 800e37a:	40a1      	lsls	r1, r4
 800e37c:	f04f 0e00 	mov.w	lr, #0
 800e380:	4623      	mov	r3, r4
 800e382:	9402      	str	r4, [sp, #8]
 800e384:	b289      	uxth	r1, r1
 800e386:	9401      	str	r4, [sp, #4]
 800e388:	4628      	mov	r0, r5
 800e38a:	222a      	movs	r2, #42	; 0x2a
    return sample;
 800e38c:	f89d 6017 	ldrb.w	r6, [sp, #23]
 800e390:	f88d e017 	strb.w	lr, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c2, _i2caddr<<1, reg, 1, &value, 1, 1);
 800e394:	f7f4 fa0a 	bl	80027ac <HAL_I2C_Mem_Write>
 800e398:	ab06      	add	r3, sp, #24
 800e39a:	f997 1000 	ldrsb.w	r1, [r7]
 800e39e:	9402      	str	r4, [sp, #8]
  uint8_t reg1 = MMA8451_readRegister8(MMA8451_REG_CTRL_REG1);
  MMA8451_writeRegister8(MMA8451_REG_CTRL_REG1, 0x00);            // deactivate
  MMA8451_writeRegister8(MMA8451_REG_XYZ_DATA_CFG, (range & 0x3));  // | 0x10
 800e3a0:	f008 0803 	and.w	r8, r8, #3
 800e3a4:	f803 8d02 	strb.w	r8, [r3, #-2]!
	HAL_I2C_Mem_Write(&hi2c2, _i2caddr<<1, reg, 1, &value, 1, 1);
 800e3a8:	40a1      	lsls	r1, r4
 800e3aa:	e88d 0018 	stmia.w	sp, {r3, r4}
 800e3ae:	b289      	uxth	r1, r1
 800e3b0:	4623      	mov	r3, r4
 800e3b2:	4628      	mov	r0, r5
 800e3b4:	220e      	movs	r2, #14
 800e3b6:	f7f4 f9f9 	bl	80027ac <HAL_I2C_Mem_Write>
 800e3ba:	aa06      	add	r2, sp, #24
 800e3bc:	f997 1000 	ldrsb.w	r1, [r7]
 800e3c0:	9402      	str	r4, [sp, #8]
  MMA8451_writeRegister8(MMA8451_REG_CTRL_REG1, reg1 | 0x01);     // activate
 800e3c2:	4326      	orrs	r6, r4
 800e3c4:	f802 6d03 	strb.w	r6, [r2, #-3]!
	HAL_I2C_Mem_Write(&hi2c2, _i2caddr<<1, reg, 1, &value, 1, 1);
 800e3c8:	40a1      	lsls	r1, r4
 800e3ca:	9200      	str	r2, [sp, #0]
 800e3cc:	b289      	uxth	r1, r1
 800e3ce:	9401      	str	r4, [sp, #4]
 800e3d0:	4623      	mov	r3, r4
 800e3d2:	4628      	mov	r0, r5
 800e3d4:	222a      	movs	r2, #42	; 0x2a
 800e3d6:	f7f4 f9e9 	bl	80027ac <HAL_I2C_Mem_Write>
}
 800e3da:	b006      	add	sp, #24
 800e3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3e0:	20005370 	.word	0x20005370
 800e3e4:	20005580 	.word	0x20005580

0800e3e8 <accelerometerThread>:
void accelerometerThread(void){
 800e3e8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800e3ec:	b089      	sub	sp, #36	; 0x24
	  MMA8451_begin();
 800e3ee:	f7ff fef9 	bl	800e1e4 <MMA8451_begin>
	  MMA8451_setRange(MMA8451_RANGE_4_G);
 800e3f2:	2001      	movs	r0, #1
 800e3f4:	f7ff ffa8 	bl	800e348 <MMA8451_setRange>
 800e3f8:	f8df b194 	ldr.w	fp, [pc, #404]	; 800e590 <accelerometerThread+0x1a8>
 800e3fc:	4f5a      	ldr	r7, [pc, #360]	; (800e568 <accelerometerThread+0x180>)
 800e3fe:	4e5b      	ldr	r6, [pc, #364]	; (800e56c <accelerometerThread+0x184>)
 800e400:	4d5b      	ldr	r5, [pc, #364]	; (800e570 <accelerometerThread+0x188>)
 800e402:	4c5c      	ldr	r4, [pc, #368]	; (800e574 <accelerometerThread+0x18c>)
 800e404:	f8df a18c 	ldr.w	sl, [pc, #396]	; 800e594 <accelerometerThread+0x1ac>
 800e408:	f8df 918c 	ldr.w	r9, [pc, #396]	; 800e598 <accelerometerThread+0x1b0>
 800e40c:	f8df 818c 	ldr.w	r8, [pc, #396]	; 800e59c <accelerometerThread+0x1b4>
  x_g = (float)x / 2048;
 800e410:	eddf 9a59 	vldr	s19, [pc, #356]	; 800e578 <accelerometerThread+0x190>
	  osSemaphoreWait (accSampleSemaphoreHandle, osWaitForever);
 800e414:	f8db 0000 	ldr.w	r0, [fp]
 800e418:	f04f 31ff 	mov.w	r1, #4294967295
 800e41c:	f7fd fb6c 	bl	800baf8 <osSemaphoreWait>
	  HAL_I2C_Mem_Read_IT(&hi2c2, _i2caddr<<1, MMA8451_REG_OUT_X_MSB, 1, sample, 6);
 800e420:	4b56      	ldr	r3, [pc, #344]	; (800e57c <accelerometerThread+0x194>)
 800e422:	4857      	ldr	r0, [pc, #348]	; (800e580 <accelerometerThread+0x198>)
 800e424:	f993 1000 	ldrsb.w	r1, [r3]
 800e428:	9700      	str	r7, [sp, #0]
 800e42a:	2301      	movs	r3, #1
 800e42c:	2206      	movs	r2, #6
 800e42e:	0049      	lsls	r1, r1, #1
 800e430:	b289      	uxth	r1, r1
 800e432:	9201      	str	r2, [sp, #4]
 800e434:	461a      	mov	r2, r3
 800e436:	f7f4 fc13 	bl	8002c60 <HAL_I2C_Mem_Read_IT>
	  osDelay(10);
 800e43a:	200a      	movs	r0, #10
 800e43c:	f7fd fa7e 	bl	800b93c <osDelay>
  x = sample[0]; x <<= 8; x |= sample[1]; x >>= 2;
 800e440:	783b      	ldrb	r3, [r7, #0]
 800e442:	8033      	strh	r3, [r6, #0]
 800e444:	8833      	ldrh	r3, [r6, #0]
 800e446:	f897 e001 	ldrb.w	lr, [r7, #1]
  y = sample[2]; y <<= 8; y |= sample[3]; y >>= 2;
 800e44a:	78ba      	ldrb	r2, [r7, #2]
 800e44c:	78f9      	ldrb	r1, [r7, #3]
  z = sample[4]; z <<= 8; z |= sample[5]; z >>= 2;
 800e44e:	7938      	ldrb	r0, [r7, #4]
  x = sample[0]; x <<= 8; x |= sample[1]; x >>= 2;
 800e450:	b25b      	sxtb	r3, r3
 800e452:	021b      	lsls	r3, r3, #8
 800e454:	8033      	strh	r3, [r6, #0]
 800e456:	8833      	ldrh	r3, [r6, #0]
 800e458:	b21b      	sxth	r3, r3
 800e45a:	ea43 030e 	orr.w	r3, r3, lr
 800e45e:	8033      	strh	r3, [r6, #0]
 800e460:	8833      	ldrh	r3, [r6, #0]
  z = sample[4]; z <<= 8; z |= sample[5]; z >>= 2;
 800e462:	f897 e005 	ldrb.w	lr, [r7, #5]
  x = sample[0]; x <<= 8; x |= sample[1]; x >>= 2;
 800e466:	f343 038d 	sbfx	r3, r3, #2, #14
 800e46a:	8033      	strh	r3, [r6, #0]
  y = sample[2]; y <<= 8; y |= sample[3]; y >>= 2;
 800e46c:	802a      	strh	r2, [r5, #0]
 800e46e:	882a      	ldrh	r2, [r5, #0]


void calculateAngle(float x_g, float y_g, float z_g){
	float accVector[] = {x_g, y_g, z_g};

	arm_dot_prod_f32(accVector,gravityVector,3,&dotProd);
 800e470:	4b44      	ldr	r3, [pc, #272]	; (800e584 <accelerometerThread+0x19c>)
  y = sample[2]; y <<= 8; y |= sample[3]; y >>= 2;
 800e472:	b252      	sxtb	r2, r2
 800e474:	0212      	lsls	r2, r2, #8
 800e476:	802a      	strh	r2, [r5, #0]
 800e478:	882a      	ldrh	r2, [r5, #0]
 800e47a:	b212      	sxth	r2, r2
 800e47c:	430a      	orrs	r2, r1
 800e47e:	802a      	strh	r2, [r5, #0]
 800e480:	882a      	ldrh	r2, [r5, #0]
	arm_dot_prod_f32(accVector,gravityVector,3,&dotProd);
 800e482:	4941      	ldr	r1, [pc, #260]	; (800e588 <accelerometerThread+0x1a0>)
  y = sample[2]; y <<= 8; y |= sample[3]; y >>= 2;
 800e484:	f342 028d 	sbfx	r2, r2, #2, #14
 800e488:	802a      	strh	r2, [r5, #0]
  z = sample[4]; z <<= 8; z |= sample[5]; z >>= 2;
 800e48a:	8020      	strh	r0, [r4, #0]
 800e48c:	8820      	ldrh	r0, [r4, #0]
 800e48e:	b240      	sxtb	r0, r0
 800e490:	0200      	lsls	r0, r0, #8
 800e492:	8020      	strh	r0, [r4, #0]
 800e494:	8822      	ldrh	r2, [r4, #0]
 800e496:	b212      	sxth	r2, r2
 800e498:	ea42 020e 	orr.w	r2, r2, lr
 800e49c:	8022      	strh	r2, [r4, #0]
 800e49e:	8822      	ldrh	r2, [r4, #0]
 800e4a0:	f342 028d 	sbfx	r2, r2, #2, #14
 800e4a4:	8022      	strh	r2, [r4, #0]
  x_g = (float)x / 2048;
 800e4a6:	8832      	ldrh	r2, [r6, #0]
 800e4a8:	b212      	sxth	r2, r2
 800e4aa:	ee07 2a90 	vmov	s15, r2
 800e4ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	arm_dot_prod_f32(accVector,gravityVector,3,&dotProd);
 800e4b2:	2203      	movs	r2, #3
  x_g = (float)x / 2048;
 800e4b4:	ee67 7aa9 	vmul.f32	s15, s15, s19
	arm_dot_prod_f32(accVector,gravityVector,3,&dotProd);
 800e4b8:	a805      	add	r0, sp, #20
  x_g = (float)x / 2048;
 800e4ba:	edca 7a00 	vstr	s15, [sl]
  y_g = (float)y / 2048;
 800e4be:	f8b5 e000 	ldrh.w	lr, [r5]
 800e4c2:	fa0f fe8e 	sxth.w	lr, lr
 800e4c6:	ee07 ea90 	vmov	s15, lr
 800e4ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e4ce:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800e4d2:	edc9 7a00 	vstr	s15, [r9]
  z_g = (float)z / 2048;
 800e4d6:	f8b4 e000 	ldrh.w	lr, [r4]
 800e4da:	fa0f fe8e 	sxth.w	lr, lr
 800e4de:	ee07 ea90 	vmov	s15, lr
 800e4e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e4e6:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800e4ea:	edc8 7a00 	vstr	s15, [r8]
	  calculateAngle(x_g, y_g, z_g);
 800e4ee:	ed9a 9a00 	vldr	s18, [sl]
 800e4f2:	ed99 8a00 	vldr	s16, [r9]
 800e4f6:	edd8 8a00 	vldr	s17, [r8]
	float accVector[] = {x_g, y_g, z_g};
 800e4fa:	ed8d 8a06 	vstr	s16, [sp, #24]

	angle = (dotProd/ ( sqrt(x_g*x_g + y_g*y_g + z_g*z_g))) + PI_DIV_2;
 800e4fe:	ee28 8a08 	vmul.f32	s16, s16, s16
	float accVector[] = {x_g, y_g, z_g};
 800e502:	ed8d 9a05 	vstr	s18, [sp, #20]
	angle = (dotProd/ ( sqrt(x_g*x_g + y_g*y_g + z_g*z_g))) + PI_DIV_2;
 800e506:	eea9 8a09 	vfma.f32	s16, s18, s18
	float accVector[] = {x_g, y_g, z_g};
 800e50a:	edcd 8a07 	vstr	s17, [sp, #28]
	angle = (dotProd/ ( sqrt(x_g*x_g + y_g*y_g + z_g*z_g))) + PI_DIV_2;
 800e50e:	eea8 8aa8 	vfma.f32	s16, s17, s17
	arm_dot_prod_f32(accVector,gravityVector,3,&dotProd);
 800e512:	f004 ffd9 	bl	80134c8 <arm_dot_prod_f32>
	angle = (dotProd/ ( sqrt(x_g*x_g + y_g*y_g + z_g*z_g))) + PI_DIV_2;
 800e516:	ee18 0a10 	vmov	r0, s16
 800e51a:	f7f1 ffd5 	bl	80004c8 <__aeabi_f2d>
 800e51e:	ec41 0b10 	vmov	d0, r0, r1
 800e522:	f005 f8a9 	bl	8013678 <sqrt>
 800e526:	ec53 2b10 	vmov	r2, r3, d0
 800e52a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e52e:	4b15      	ldr	r3, [pc, #84]	; (800e584 <accelerometerThread+0x19c>)
 800e530:	6818      	ldr	r0, [r3, #0]
 800e532:	f7f1 ffc9 	bl	80004c8 <__aeabi_f2d>
 800e536:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e53a:	f7f2 f943 	bl	80007c4 <__aeabi_ddiv>
 800e53e:	a308      	add	r3, pc, #32	; (adr r3, 800e560 <accelerometerThread+0x178>)
 800e540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e544:	f7f1 fe62 	bl	800020c <__adddf3>
 800e548:	f7f2 fb0a 	bl	8000b60 <__aeabi_d2f>
 800e54c:	4b0f      	ldr	r3, [pc, #60]	; (800e58c <accelerometerThread+0x1a4>)
	  setCutoffFreq(angle);
 800e54e:	ee00 0a10 	vmov	s0, r0
	angle = (dotProd/ ( sqrt(x_g*x_g + y_g*y_g + z_g*z_g))) + PI_DIV_2;
 800e552:	6018      	str	r0, [r3, #0]
	  setCutoffFreq(angle);
 800e554:	f000 fbdc 	bl	800ed10 <setCutoffFreq>
 800e558:	e75c      	b.n	800e414 <accelerometerThread+0x2c>
 800e55a:	bf00      	nop
 800e55c:	f3af 8000 	nop.w
 800e560:	544486e0 	.word	0x544486e0
 800e564:	3ff921fb 	.word	0x3ff921fb
 800e568:	200053a4 	.word	0x200053a4
 800e56c:	20005360 	.word	0x20005360
 800e570:	2000538c 	.word	0x2000538c
 800e574:	20005378 	.word	0x20005378
 800e578:	3a000000 	.word	0x3a000000
 800e57c:	20005370 	.word	0x20005370
 800e580:	20005580 	.word	0x20005580
 800e584:	20005374 	.word	0x20005374
 800e588:	20000024 	.word	0x20000024
 800e58c:	20005380 	.word	0x20005380
 800e590:	2000536c 	.word	0x2000536c
 800e594:	20005390 	.word	0x20005390
 800e598:	200053ac 	.word	0x200053ac
 800e59c:	200053a0 	.word	0x200053a0

0800e5a0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800e5a0:	b530      	push	{r4, r5, lr}
  ADC_ChannelConfTypeDef sConfig = {0};

  /**Common config 
  */
  hadc1.Instance = ADC1;
 800e5a2:	4a1c      	ldr	r2, [pc, #112]	; (800e614 <MX_ADC1_Init+0x74>)
 800e5a4:	4b1c      	ldr	r3, [pc, #112]	; (800e618 <MX_ADC1_Init+0x78>)
 800e5a6:	6013      	str	r3, [r2, #0]
{
 800e5a8:	b087      	sub	sp, #28
  ADC_ChannelConfTypeDef sConfig = {0};
 800e5aa:	2300      	movs	r3, #0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e5ac:	2404      	movs	r4, #4
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
 800e5ae:	2101      	movs	r1, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.OversamplingMode = DISABLE;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800e5b0:	4610      	mov	r0, r2
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e5b2:	6154      	str	r4, [r2, #20]
  hadc1.Init.NbrOfConversion = 1;
 800e5b4:	61d1      	str	r1, [r2, #28]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800e5b6:	6053      	str	r3, [r2, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 800e5b8:	9300      	str	r3, [sp, #0]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800e5ba:	6093      	str	r3, [r2, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e5bc:	60d3      	str	r3, [r2, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800e5be:	6113      	str	r3, [r2, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800e5c0:	7613      	strb	r3, [r2, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800e5c2:	7653      	strb	r3, [r2, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800e5c4:	f882 3020 	strb.w	r3, [r2, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800e5c8:	6293      	str	r3, [r2, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800e5ca:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800e5cc:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800e5d0:	6353      	str	r3, [r2, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800e5d2:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
  ADC_ChannelConfTypeDef sConfig = {0};
 800e5d6:	9301      	str	r3, [sp, #4]
 800e5d8:	9302      	str	r3, [sp, #8]
 800e5da:	9303      	str	r3, [sp, #12]
 800e5dc:	9304      	str	r3, [sp, #16]
 800e5de:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800e5e0:	f7f2 fcc6 	bl	8000f70 <HAL_ADC_Init>
 800e5e4:	b998      	cbnz	r0, 800e60e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
  }
  /**Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800e5e6:	4b0d      	ldr	r3, [pc, #52]	; (800e61c <MX_ADC1_Init+0x7c>)
 800e5e8:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800e5ea:	2506      	movs	r5, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800e5ec:	2300      	movs	r3, #0
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800e5ee:	247f      	movs	r4, #127	; 0x7f
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800e5f0:	2204      	movs	r2, #4
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e5f2:	4669      	mov	r1, sp
 800e5f4:	4807      	ldr	r0, [pc, #28]	; (800e614 <MX_ADC1_Init+0x74>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800e5f6:	9501      	str	r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800e5f8:	9302      	str	r3, [sp, #8]
  sConfig.Offset = 0;
 800e5fa:	9305      	str	r3, [sp, #20]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800e5fc:	9403      	str	r4, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800e5fe:	9204      	str	r2, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e600:	f7f2 fd94 	bl	800112c <HAL_ADC_ConfigChannel>
 800e604:	b108      	cbz	r0, 800e60a <MX_ADC1_Init+0x6a>
  {
    Error_Handler();
 800e606:	f001 ff07 	bl	8010418 <Error_Handler>
  }

}
 800e60a:	b007      	add	sp, #28
 800e60c:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 800e60e:	f001 ff03 	bl	8010418 <Error_Handler>
 800e612:	e7e8      	b.n	800e5e6 <MX_ADC1_Init+0x46>
 800e614:	200053b0 	.word	0x200053b0
 800e618:	50040000 	.word	0x50040000
 800e61c:	0c900008 	.word	0x0c900008

0800e620 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800e620:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 800e622:	6801      	ldr	r1, [r0, #0]
 800e624:	4a15      	ldr	r2, [pc, #84]	; (800e67c <HAL_ADC_MspInit+0x5c>)
{
 800e626:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e628:	2300      	movs	r3, #0
  if(adcHandle->Instance==ADC1)
 800e62a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e62c:	9304      	str	r3, [sp, #16]
 800e62e:	9303      	str	r3, [sp, #12]
 800e630:	9305      	str	r3, [sp, #20]
 800e632:	9306      	str	r3, [sp, #24]
 800e634:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 800e636:	d001      	beq.n	800e63c <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800e638:	b008      	add	sp, #32
 800e63a:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 800e63c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e640:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(HALL_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 800e644:	480e      	ldr	r0, [pc, #56]	; (800e680 <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC_CLK_ENABLE();
 800e646:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e648:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e64c:	64da      	str	r2, [r3, #76]	; 0x4c
 800e64e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e650:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800e654:	9201      	str	r2, [sp, #4]
 800e656:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e658:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e65a:	f042 0204 	orr.w	r2, r2, #4
 800e65e:	64da      	str	r2, [r3, #76]	; 0x4c
 800e660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e662:	f003 0304 	and.w	r3, r3, #4
 800e666:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = HALL_OUTPUT_Pin;
 800e668:	2204      	movs	r2, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e66a:	2303      	movs	r3, #3
    HAL_GPIO_Init(HALL_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 800e66c:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e66e:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Pin = HALL_OUTPUT_Pin;
 800e670:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e672:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(HALL_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 800e674:	f7f3 fc52 	bl	8001f1c <HAL_GPIO_Init>
}
 800e678:	b008      	add	sp, #32
 800e67a:	bd10      	pop	{r4, pc}
 800e67c:	50040000 	.word	0x50040000
 800e680:	48000800 	.word	0x48000800

0800e684 <Setup_Cap_Touch>:

uint8_t leftTouchDebounce = 0;
uint8_t rightTouchDebounce = 0;

/**************** functions ***************************/
void Setup_Cap_Touch(void){
 800e684:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e686:	b087      	sub	sp, #28
	uint8_t packet;

	// ungroup all CAP sensors to work individually
	packet = 0x02;
 800e688:	ad06      	add	r5, sp, #24
 800e68a:	2302      	movs	r3, #2
 800e68c:	f805 3d01 	strb.w	r3, [r5, #-1]!
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, CNFG_REG_4, 1, &packet, 1, 1);
 800e690:	4e2a      	ldr	r6, [pc, #168]	; (800e73c <Setup_Cap_Touch+0xb8>)
 800e692:	9500      	str	r5, [sp, #0]
 800e694:	2401      	movs	r4, #1
 800e696:	9402      	str	r4, [sp, #8]
 800e698:	9401      	str	r4, [sp, #4]
 800e69a:	4623      	mov	r3, r4
 800e69c:	4630      	mov	r0, r6
 800e69e:	2240      	movs	r2, #64	; 0x40
 800e6a0:	2150      	movs	r1, #80	; 0x50

	// device will not block multiple touches
	packet = 0x04;
 800e6a2:	2704      	movs	r7, #4
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, CNFG_REG_4, 1, &packet, 1, 1);
 800e6a4:	f7f4 f882 	bl	80027ac <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, MULT_TOUCH_REG, 1, &packet, 1, 1);
 800e6a8:	9402      	str	r4, [sp, #8]
 800e6aa:	9401      	str	r4, [sp, #4]
 800e6ac:	4623      	mov	r3, r4
	packet = 0x04;
 800e6ae:	f88d 7017 	strb.w	r7, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, MULT_TOUCH_REG, 1, &packet, 1, 1);
 800e6b2:	9500      	str	r5, [sp, #0]
 800e6b4:	4630      	mov	r0, r6
 800e6b6:	222a      	movs	r2, #42	; 0x2a
 800e6b8:	2150      	movs	r1, #80	; 0x50
	// disable auto-calibration
//	packet = 0x00;
//	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, CALIBRATION_REG, 1, &packet, 1, 1);

	// sensitivity control
	packet = 0x7F;
 800e6ba:	277f      	movs	r7, #127	; 0x7f
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, MULT_TOUCH_REG, 1, &packet, 1, 1);
 800e6bc:	f7f4 f876 	bl	80027ac <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, DATA_SENS_REG, 1, &packet, 1, 1);
 800e6c0:	9402      	str	r4, [sp, #8]
 800e6c2:	9401      	str	r4, [sp, #4]
 800e6c4:	4623      	mov	r3, r4
	packet = 0x7F;
 800e6c6:	f88d 7017 	strb.w	r7, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, DATA_SENS_REG, 1, &packet, 1, 1);
 800e6ca:	9500      	str	r5, [sp, #0]
 800e6cc:	4630      	mov	r0, r6
 800e6ce:	221f      	movs	r2, #31
 800e6d0:	2150      	movs	r1, #80	; 0x50

	// setting button 1 threshold sets all
	packet = 0x93 | 0x40;
 800e6d2:	27d3      	movs	r7, #211	; 0xd3
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, DATA_SENS_REG, 1, &packet, 1, 1);
 800e6d4:	f7f4 f86a 	bl	80027ac <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, RECAL_REG, 1, &packet, 1, 1);
 800e6d8:	9402      	str	r4, [sp, #8]
 800e6da:	9401      	str	r4, [sp, #4]
 800e6dc:	4623      	mov	r3, r4
	packet = 0x93 | 0x40;
 800e6de:	f88d 7017 	strb.w	r7, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, RECAL_REG, 1, &packet, 1, 1);
 800e6e2:	9500      	str	r5, [sp, #0]

	packet = 0x00;
 800e6e4:	2700      	movs	r7, #0
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, RECAL_REG, 1, &packet, 1, 1);
 800e6e6:	4630      	mov	r0, r6
 800e6e8:	222f      	movs	r2, #47	; 0x2f
 800e6ea:	2150      	movs	r1, #80	; 0x50
 800e6ec:	f7f4 f85e 	bl	80027ac <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, MAIN_STATUS, 1, &packet, 1, 1);
 800e6f0:	9402      	str	r4, [sp, #8]
 800e6f2:	9401      	str	r4, [sp, #4]
 800e6f4:	4623      	mov	r3, r4
 800e6f6:	463a      	mov	r2, r7
 800e6f8:	9500      	str	r5, [sp, #0]
 800e6fa:	4630      	mov	r0, r6
 800e6fc:	2150      	movs	r1, #80	; 0x50
	packet = 0x00;
 800e6fe:	f88d 7017 	strb.w	r7, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, MAIN_STATUS, 1, &packet, 1, 1);
 800e702:	f7f4 f853 	bl	80027ac <HAL_I2C_Mem_Write>

    packet = 0xFF;
 800e706:	27ff      	movs	r7, #255	; 0xff
    HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, 0x4E, 1, &packet, 1, 1);
 800e708:	9402      	str	r4, [sp, #8]
 800e70a:	9401      	str	r4, [sp, #4]
 800e70c:	4623      	mov	r3, r4
 800e70e:	9500      	str	r5, [sp, #0]
 800e710:	4630      	mov	r0, r6
 800e712:	224e      	movs	r2, #78	; 0x4e
 800e714:	2150      	movs	r1, #80	; 0x50
    packet = 0xFF;
 800e716:	f88d 7017 	strb.w	r7, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, 0x4E, 1, &packet, 1, 1);
 800e71a:	f7f4 f847 	bl	80027ac <HAL_I2C_Mem_Write>

    packet = 0x03;
    HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, 0x4E, 1, &packet, 1, 1);
 800e71e:	9402      	str	r4, [sp, #8]
 800e720:	9401      	str	r4, [sp, #4]
 800e722:	4623      	mov	r3, r4
 800e724:	9500      	str	r5, [sp, #0]
 800e726:	4630      	mov	r0, r6
    packet = 0x03;
 800e728:	2403      	movs	r4, #3
    HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, 0x4E, 1, &packet, 1, 1);
 800e72a:	224e      	movs	r2, #78	; 0x4e
 800e72c:	2150      	movs	r1, #80	; 0x50
    packet = 0x03;
 800e72e:	f88d 4017 	strb.w	r4, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, 0x4E, 1, &packet, 1, 1);
 800e732:	f7f4 f83b 	bl	80027ac <HAL_I2C_Mem_Write>
//		packet = 0x00;
//		HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, 0x00, 1, &packet, 1, 1);
//
//		HAL_I2C_Mem_Read(&hi2c1, CAP1214_ADDR<<1, SENSOR_1_DELTA_CNT, 1, &temp, 14, 1);
//	}
}
 800e736:	b007      	add	sp, #28
 800e738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e73a:	bf00      	nop
 800e73c:	20005534 	.word	0x20005534

0800e740 <Reset_Cap_INT>:

	HAL_Delay(1);
	Reset_Cap_INT();
}

void Reset_Cap_INT(void){
 800e740:	b500      	push	{lr}
 800e742:	b087      	sub	sp, #28
	uint8_t packet = 0x00;
 800e744:	a906      	add	r1, sp, #24
 800e746:	2200      	movs	r2, #0
 800e748:	f801 2d01 	strb.w	r2, [r1, #-1]!
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, 0x00, 1, &packet, 1, 1);
 800e74c:	2301      	movs	r3, #1
 800e74e:	9100      	str	r1, [sp, #0]
 800e750:	9302      	str	r3, [sp, #8]
 800e752:	9301      	str	r3, [sp, #4]
 800e754:	2150      	movs	r1, #80	; 0x50
 800e756:	4803      	ldr	r0, [pc, #12]	; (800e764 <Reset_Cap_INT+0x24>)
 800e758:	f7f4 f828 	bl	80027ac <HAL_I2C_Mem_Write>
}
 800e75c:	b007      	add	sp, #28
 800e75e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e762:	bf00      	nop
 800e764:	20005534 	.word	0x20005534

0800e768 <Sample_Cap_Touch>:


//// reads cap touch sense binary values from CAP1214 IC and
////    turns on corresponding LEDs
void Sample_Cap_Touch(void){
 800e768:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800e76c:	b087      	sub	sp, #28
//  uint8_t start_DMA = 0;
//  uint8_t start_DMA_2 = 0;

  Reset_Cap_INT();
 800e76e:	f7ff ffe7 	bl	800e740 <Reset_Cap_INT>
 800e772:	f8df a35c 	ldr.w	sl, [pc, #860]	; 800ead0 <Sample_Cap_Touch+0x368>
 800e776:	4cd3      	ldr	r4, [pc, #844]	; (800eac4 <Sample_Cap_Touch+0x35c>)
 800e778:	f8df 8358 	ldr.w	r8, [pc, #856]	; 800ead4 <Sample_Cap_Touch+0x36c>
 800e77c:	4fd2      	ldr	r7, [pc, #840]	; (800eac8 <Sample_Cap_Touch+0x360>)
	HAL_I2C_Mem_Read(&hi2c1, CAP1214_ADDR<<1, 0x03, 1, cap_read, 2, 2);
 800e77e:	4ed3      	ldr	r6, [pc, #844]	; (800eacc <Sample_Cap_Touch+0x364>)
 800e780:	f10d 0917 	add.w	r9, sp, #23
 800e784:	2501      	movs	r5, #1

  while(1){

    osSemaphoreWait (capSampleSemaphoreHandle, osWaitForever);
 800e786:	f04f 31ff 	mov.w	r1, #4294967295
 800e78a:	f8da 0000 	ldr.w	r0, [sl]
 800e78e:	f7fd f9b3 	bl	800baf8 <osSemaphoreWait>

    taskENTER_CRITICAL();
 800e792:	f7fd fab7 	bl	800bd04 <vPortEnterCritical>
	HAL_I2C_Mem_Read(&hi2c1, CAP1214_ADDR<<1, 0x03, 1, cap_read, 2, 2);
 800e796:	2302      	movs	r3, #2
 800e798:	2203      	movs	r2, #3
 800e79a:	2150      	movs	r1, #80	; 0x50
 800e79c:	9302      	str	r3, [sp, #8]
 800e79e:	9301      	str	r3, [sp, #4]
 800e7a0:	9400      	str	r4, [sp, #0]
 800e7a2:	2301      	movs	r3, #1
 800e7a4:	4630      	mov	r0, r6
 800e7a6:	f7f4 f925 	bl	80029f4 <HAL_I2C_Mem_Read>
	uint8_t packet = 0x00;
 800e7aa:	f04f 0b00 	mov.w	fp, #0
	HAL_Delay(1);
 800e7ae:	2001      	movs	r0, #1
 800e7b0:	f7f2 fbd0 	bl	8000f54 <HAL_Delay>
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, 0x00, 1, &packet, 1, 1);
 800e7b4:	465a      	mov	r2, fp
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	2150      	movs	r1, #80	; 0x50
 800e7ba:	9502      	str	r5, [sp, #8]
 800e7bc:	9501      	str	r5, [sp, #4]
 800e7be:	f8cd 9000 	str.w	r9, [sp]
 800e7c2:	4630      	mov	r0, r6
	uint8_t packet = 0x00;
 800e7c4:	f88d b017 	strb.w	fp, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, 0x00, 1, &packet, 1, 1);
 800e7c8:	f7f3 fff0 	bl	80027ac <HAL_I2C_Mem_Write>
    Read_Cap_Touch();
    taskEXIT_CRITICAL();
 800e7cc:	f7fd fabc 	bl	800bd48 <vPortExitCritical>

    if(isButtonEnabled() == 1){
 800e7d0:	f002 f8fa 	bl	80109c8 <isButtonEnabled>
 800e7d4:	2801      	cmp	r0, #1
 800e7d6:	f040 8087 	bne.w	800e8e8 <Sample_Cap_Touch+0x180>

      if( (cap_read[KEY_1_PORT] & KEY_1_PIN) == KEY_1_PIN){
 800e7da:	7823      	ldrb	r3, [r4, #0]
 800e7dc:	079a      	lsls	r2, r3, #30
 800e7de:	f100 8169 	bmi.w	800eab4 <Sample_Cap_Touch+0x34c>
	      if(LED_State(CAP_1_LED_PORT, CAP_1_LED_PIN)){
		      Set_LED(CAP_1_LED_PORT, CAP_1_LED_PIN, 0);
	      }
      }

      if( (cap_read[KEY_2_PORT] & KEY_2_PIN) == KEY_2_PIN){
 800e7e2:	f013 0b04 	ands.w	fp, r3, #4
 800e7e6:	f000 808b 	beq.w	800e900 <Sample_Cap_Touch+0x198>
	      Set_LED(CAP_2_LED_PORT, CAP_2_LED_PIN, 1);
 800e7ea:	2201      	movs	r2, #1
 800e7ec:	2110      	movs	r1, #16
 800e7ee:	2003      	movs	r0, #3
 800e7f0:	f001 fb70 	bl	800fed4 <Set_LED>
	      if(LED_State(CAP_2_LED_PORT, CAP_2_LED_PIN)){
		      Set_LED(CAP_2_LED_PORT, CAP_2_LED_PIN, 0);
	      }
      }

      if( (cap_read[KEY_3_PORT] & KEY_3_PIN) == KEY_3_PIN){
 800e7f4:	7822      	ldrb	r2, [r4, #0]
 800e7f6:	f012 0b08 	ands.w	fp, r2, #8
 800e7fa:	f000 8092 	beq.w	800e922 <Sample_Cap_Touch+0x1ba>
	      Set_LED(CAP_3_LED_PORT, CAP_3_LED_PIN, 1);
 800e7fe:	2201      	movs	r2, #1
 800e800:	2108      	movs	r1, #8
 800e802:	2003      	movs	r0, #3
 800e804:	f001 fb66 	bl	800fed4 <Set_LED>
	      if(LED_State(CAP_3_LED_PORT, CAP_3_LED_PIN)){
		      Set_LED(CAP_3_LED_PORT, CAP_3_LED_PIN, 0);
	      }
      }

      if( (cap_read[KEY_4_PORT] & KEY_4_PIN) == KEY_4_PIN){
 800e808:	7822      	ldrb	r2, [r4, #0]
 800e80a:	f012 0b10 	ands.w	fp, r2, #16
 800e80e:	f000 8099 	beq.w	800e944 <Sample_Cap_Touch+0x1dc>
	      Set_LED(CAP_4_LED_PORT, CAP_4_LED_PIN, 1);
 800e812:	2201      	movs	r2, #1
 800e814:	2104      	movs	r1, #4
 800e816:	2003      	movs	r0, #3
 800e818:	f001 fb5c 	bl	800fed4 <Set_LED>
	      if(LED_State(CAP_4_LED_PORT, CAP_4_LED_PIN)){
		      Set_LED(CAP_4_LED_PORT, CAP_4_LED_PIN, 0);
	      }
      }

      if( (cap_read[KEY_5_PORT] & KEY_5_PIN) == KEY_5_PIN){
 800e81c:	7822      	ldrb	r2, [r4, #0]
 800e81e:	f012 0b20 	ands.w	fp, r2, #32
 800e822:	f000 80a0 	beq.w	800e966 <Sample_Cap_Touch+0x1fe>
	      Set_LED(CAP_5_LED_PORT, CAP_5_LED_PIN, 1);
 800e826:	2201      	movs	r2, #1
 800e828:	2102      	movs	r1, #2
 800e82a:	2003      	movs	r0, #3
 800e82c:	f001 fb52 	bl	800fed4 <Set_LED>
	      if(LED_State(CAP_5_LED_PORT, CAP_5_LED_PIN)){
		      Set_LED(CAP_5_LED_PORT, CAP_5_LED_PIN, 0);
	      }
      }

      if( (cap_read[KEY_6_PORT] & KEY_6_PIN) == KEY_6_PIN){
 800e830:	7862      	ldrb	r2, [r4, #1]
 800e832:	f012 0b01 	ands.w	fp, r2, #1
 800e836:	f000 80a7 	beq.w	800e988 <Sample_Cap_Touch+0x220>
	      Set_LED(CAP_6_LED_PORT, CAP_6_LED_PIN, 1);
 800e83a:	2201      	movs	r2, #1
 800e83c:	4611      	mov	r1, r2
 800e83e:	2003      	movs	r0, #3
 800e840:	f001 fb48 	bl	800fed4 <Set_LED>
	      if(LED_State(CAP_6_LED_PORT, CAP_6_LED_PIN)){
		      Set_LED(CAP_6_LED_PORT, CAP_6_LED_PIN, 0);
	      }
      }

      if( (cap_read[KEY_7_PORT] & KEY_7_PIN) == KEY_7_PIN){
 800e844:	7862      	ldrb	r2, [r4, #1]
 800e846:	f012 0b02 	ands.w	fp, r2, #2
 800e84a:	f000 80ae 	beq.w	800e9aa <Sample_Cap_Touch+0x242>
	      Set_LED(CAP_7_LED_PORT, CAP_7_LED_PIN, 1);
 800e84e:	2201      	movs	r2, #1
 800e850:	2180      	movs	r1, #128	; 0x80
 800e852:	2002      	movs	r0, #2
 800e854:	f001 fb3e 	bl	800fed4 <Set_LED>
	      if(LED_State(CAP_7_LED_PORT, CAP_7_LED_PIN)){
		      Set_LED(CAP_7_LED_PORT, CAP_7_LED_PIN, 0);
	      }
      }

      if( (cap_read[KEY_8_PORT] & KEY_8_PIN) == KEY_8_PIN){
 800e858:	7862      	ldrb	r2, [r4, #1]
 800e85a:	f012 0b04 	ands.w	fp, r2, #4
 800e85e:	f000 80b5 	beq.w	800e9cc <Sample_Cap_Touch+0x264>
	      Set_LED(CAP_8_LED_PORT, CAP_8_LED_PIN, 1);
 800e862:	2201      	movs	r2, #1
 800e864:	2140      	movs	r1, #64	; 0x40
 800e866:	2002      	movs	r0, #2
 800e868:	f001 fb34 	bl	800fed4 <Set_LED>
	      if(LED_State(CAP_8_LED_PORT, CAP_8_LED_PIN)){
		      Set_LED(CAP_8_LED_PORT, CAP_8_LED_PIN, 0);
	      }
      }

      if( (cap_read[KEY_9_PORT] & KEY_9_PIN) == KEY_9_PIN){
 800e86c:	7862      	ldrb	r2, [r4, #1]
 800e86e:	f012 0b08 	ands.w	fp, r2, #8
 800e872:	f000 80bc 	beq.w	800e9ee <Sample_Cap_Touch+0x286>
	      Set_LED(CAP_9_LED_PORT, CAP_9_LED_PIN, 1);
 800e876:	2201      	movs	r2, #1
 800e878:	2120      	movs	r1, #32
 800e87a:	2002      	movs	r0, #2
 800e87c:	f001 fb2a 	bl	800fed4 <Set_LED>
	      if(LED_State(CAP_9_LED_PORT, CAP_9_LED_PIN)){
		      Set_LED(CAP_9_LED_PORT, CAP_9_LED_PIN, 0);
	      }
      }

      if( (cap_read[KEY_10_PORT] & KEY_10_PIN) == KEY_10_PIN){
 800e880:	7862      	ldrb	r2, [r4, #1]
 800e882:	f012 0b10 	ands.w	fp, r2, #16
 800e886:	f000 80c3 	beq.w	800ea10 <Sample_Cap_Touch+0x2a8>
	      Set_LED(CAP_10_LED_PORT, CAP_10_LED_PIN, 1);
 800e88a:	2201      	movs	r2, #1
 800e88c:	2110      	movs	r1, #16
 800e88e:	2002      	movs	r0, #2
 800e890:	f001 fb20 	bl	800fed4 <Set_LED>
	      if(LED_State(CAP_10_LED_PORT, CAP_10_LED_PIN)){
		      Set_LED(CAP_10_LED_PORT, CAP_10_LED_PIN, 0);
	      }
      }

      if( (cap_read[KEY_11_PORT] & KEY_11_PIN) == KEY_11_PIN){
 800e894:	7862      	ldrb	r2, [r4, #1]
 800e896:	f012 0b20 	ands.w	fp, r2, #32
 800e89a:	f000 80ca 	beq.w	800ea32 <Sample_Cap_Touch+0x2ca>
	      Set_LED(CAP_11_LED_PORT, CAP_11_LED_PIN, 1);
 800e89e:	2201      	movs	r2, #1
 800e8a0:	2108      	movs	r1, #8
 800e8a2:	2002      	movs	r0, #2
 800e8a4:	f001 fb16 	bl	800fed4 <Set_LED>
	      if(LED_State(CAP_11_LED_PORT, CAP_11_LED_PIN)){
		      Set_LED(CAP_11_LED_PORT, CAP_11_LED_PIN, 0);
	      }
      }

      if( (cap_read[KEY_12_PORT] & KEY_12_PIN) == KEY_12_PIN){
 800e8a8:	7862      	ldrb	r2, [r4, #1]
 800e8aa:	f012 0b40 	ands.w	fp, r2, #64	; 0x40
 800e8ae:	f000 80d1 	beq.w	800ea54 <Sample_Cap_Touch+0x2ec>
	      Set_LED(CAP_12_LED_PORT, CAP_12_LED_PIN, 1);
 800e8b2:	2201      	movs	r2, #1
 800e8b4:	2104      	movs	r1, #4
 800e8b6:	2002      	movs	r0, #2
 800e8b8:	f001 fb0c 	bl	800fed4 <Set_LED>
	      if(LED_State(CAP_12_LED_PORT, CAP_12_LED_PIN)){
		      Set_LED(CAP_12_LED_PORT, CAP_12_LED_PIN, 0);
	      }
      }

      if( (cap_read[LEFT_BUTTON_PORT] & LEFT_BUTTON_PIN) == LEFT_BUTTON_PIN){
 800e8bc:	7823      	ldrb	r3, [r4, #0]
 800e8be:	f013 0301 	ands.w	r3, r3, #1
 800e8c2:	f000 80d8 	beq.w	800ea76 <Sample_Cap_Touch+0x30e>
	      if(leftTouchDebounce == 0){
 800e8c6:	f898 3000 	ldrb.w	r3, [r8]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	f000 80ed 	beq.w	800eaaa <Sample_Cap_Touch+0x342>
	      if(leftTouchDebounce){
		      leftTouchDebounce = 0;
	      }
      }

      if( (cap_read[RIGHT_BUTTON_PORT] & RIGHT_BUTTON_PIN) == RIGHT_BUTTON_PIN){
 800e8d0:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800e8d4:	2b00      	cmp	r3, #0
	      if(rightTouchDebounce == 0){
 800e8d6:	783b      	ldrb	r3, [r7, #0]
      if( (cap_read[RIGHT_BUTTON_PORT] & RIGHT_BUTTON_PIN) == RIGHT_BUTTON_PIN){
 800e8d8:	f2c0 80da 	blt.w	800ea90 <Sample_Cap_Touch+0x328>
		      incrementOctave();
		      rightTouchDebounce = 1;
	      }
      }
      else{
	      if(rightTouchDebounce){
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	f43f af52 	beq.w	800e786 <Sample_Cap_Touch+0x1e>
		      rightTouchDebounce = 0;
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	703b      	strb	r3, [r7, #0]
 800e8e6:	e74e      	b.n	800e786 <Sample_Cap_Touch+0x1e>
	      if(LED_State(CAP_1_LED_PORT, CAP_1_LED_PIN)){
 800e8e8:	2120      	movs	r1, #32
 800e8ea:	2003      	movs	r0, #3
 800e8ec:	f001 fb22 	bl	800ff34 <LED_State>
 800e8f0:	2800      	cmp	r0, #0
 800e8f2:	f040 80d4 	bne.w	800ea9e <Sample_Cap_Touch+0x336>
 800e8f6:	7823      	ldrb	r3, [r4, #0]
      if( (cap_read[KEY_2_PORT] & KEY_2_PIN) == KEY_2_PIN){
 800e8f8:	f013 0b04 	ands.w	fp, r3, #4
 800e8fc:	f47f af75 	bne.w	800e7ea <Sample_Cap_Touch+0x82>
	      if(LED_State(CAP_2_LED_PORT, CAP_2_LED_PIN)){
 800e900:	2110      	movs	r1, #16
 800e902:	2003      	movs	r0, #3
 800e904:	f001 fb16 	bl	800ff34 <LED_State>
 800e908:	2800      	cmp	r0, #0
 800e90a:	f43f af73 	beq.w	800e7f4 <Sample_Cap_Touch+0x8c>
		      Set_LED(CAP_2_LED_PORT, CAP_2_LED_PIN, 0);
 800e90e:	465a      	mov	r2, fp
 800e910:	2110      	movs	r1, #16
 800e912:	2003      	movs	r0, #3
 800e914:	f001 fade 	bl	800fed4 <Set_LED>
      if( (cap_read[KEY_3_PORT] & KEY_3_PIN) == KEY_3_PIN){
 800e918:	7822      	ldrb	r2, [r4, #0]
 800e91a:	f012 0b08 	ands.w	fp, r2, #8
 800e91e:	f47f af6e 	bne.w	800e7fe <Sample_Cap_Touch+0x96>
	      if(LED_State(CAP_3_LED_PORT, CAP_3_LED_PIN)){
 800e922:	2108      	movs	r1, #8
 800e924:	2003      	movs	r0, #3
 800e926:	f001 fb05 	bl	800ff34 <LED_State>
 800e92a:	2800      	cmp	r0, #0
 800e92c:	f43f af6c 	beq.w	800e808 <Sample_Cap_Touch+0xa0>
		      Set_LED(CAP_3_LED_PORT, CAP_3_LED_PIN, 0);
 800e930:	465a      	mov	r2, fp
 800e932:	2108      	movs	r1, #8
 800e934:	2003      	movs	r0, #3
 800e936:	f001 facd 	bl	800fed4 <Set_LED>
      if( (cap_read[KEY_4_PORT] & KEY_4_PIN) == KEY_4_PIN){
 800e93a:	7822      	ldrb	r2, [r4, #0]
 800e93c:	f012 0b10 	ands.w	fp, r2, #16
 800e940:	f47f af67 	bne.w	800e812 <Sample_Cap_Touch+0xaa>
	      if(LED_State(CAP_4_LED_PORT, CAP_4_LED_PIN)){
 800e944:	2104      	movs	r1, #4
 800e946:	2003      	movs	r0, #3
 800e948:	f001 faf4 	bl	800ff34 <LED_State>
 800e94c:	2800      	cmp	r0, #0
 800e94e:	f43f af65 	beq.w	800e81c <Sample_Cap_Touch+0xb4>
		      Set_LED(CAP_4_LED_PORT, CAP_4_LED_PIN, 0);
 800e952:	465a      	mov	r2, fp
 800e954:	2104      	movs	r1, #4
 800e956:	2003      	movs	r0, #3
 800e958:	f001 fabc 	bl	800fed4 <Set_LED>
      if( (cap_read[KEY_5_PORT] & KEY_5_PIN) == KEY_5_PIN){
 800e95c:	7822      	ldrb	r2, [r4, #0]
 800e95e:	f012 0b20 	ands.w	fp, r2, #32
 800e962:	f47f af60 	bne.w	800e826 <Sample_Cap_Touch+0xbe>
	      if(LED_State(CAP_5_LED_PORT, CAP_5_LED_PIN)){
 800e966:	2102      	movs	r1, #2
 800e968:	2003      	movs	r0, #3
 800e96a:	f001 fae3 	bl	800ff34 <LED_State>
 800e96e:	2800      	cmp	r0, #0
 800e970:	f43f af5e 	beq.w	800e830 <Sample_Cap_Touch+0xc8>
		      Set_LED(CAP_5_LED_PORT, CAP_5_LED_PIN, 0);
 800e974:	465a      	mov	r2, fp
 800e976:	2102      	movs	r1, #2
 800e978:	2003      	movs	r0, #3
 800e97a:	f001 faab 	bl	800fed4 <Set_LED>
      if( (cap_read[KEY_6_PORT] & KEY_6_PIN) == KEY_6_PIN){
 800e97e:	7862      	ldrb	r2, [r4, #1]
 800e980:	f012 0b01 	ands.w	fp, r2, #1
 800e984:	f47f af59 	bne.w	800e83a <Sample_Cap_Touch+0xd2>
	      if(LED_State(CAP_6_LED_PORT, CAP_6_LED_PIN)){
 800e988:	2101      	movs	r1, #1
 800e98a:	2003      	movs	r0, #3
 800e98c:	f001 fad2 	bl	800ff34 <LED_State>
 800e990:	2800      	cmp	r0, #0
 800e992:	f43f af57 	beq.w	800e844 <Sample_Cap_Touch+0xdc>
		      Set_LED(CAP_6_LED_PORT, CAP_6_LED_PIN, 0);
 800e996:	465a      	mov	r2, fp
 800e998:	2101      	movs	r1, #1
 800e99a:	2003      	movs	r0, #3
 800e99c:	f001 fa9a 	bl	800fed4 <Set_LED>
      if( (cap_read[KEY_7_PORT] & KEY_7_PIN) == KEY_7_PIN){
 800e9a0:	7862      	ldrb	r2, [r4, #1]
 800e9a2:	f012 0b02 	ands.w	fp, r2, #2
 800e9a6:	f47f af52 	bne.w	800e84e <Sample_Cap_Touch+0xe6>
	      if(LED_State(CAP_7_LED_PORT, CAP_7_LED_PIN)){
 800e9aa:	2180      	movs	r1, #128	; 0x80
 800e9ac:	2002      	movs	r0, #2
 800e9ae:	f001 fac1 	bl	800ff34 <LED_State>
 800e9b2:	2800      	cmp	r0, #0
 800e9b4:	f43f af50 	beq.w	800e858 <Sample_Cap_Touch+0xf0>
		      Set_LED(CAP_7_LED_PORT, CAP_7_LED_PIN, 0);
 800e9b8:	465a      	mov	r2, fp
 800e9ba:	2180      	movs	r1, #128	; 0x80
 800e9bc:	2002      	movs	r0, #2
 800e9be:	f001 fa89 	bl	800fed4 <Set_LED>
      if( (cap_read[KEY_8_PORT] & KEY_8_PIN) == KEY_8_PIN){
 800e9c2:	7862      	ldrb	r2, [r4, #1]
 800e9c4:	f012 0b04 	ands.w	fp, r2, #4
 800e9c8:	f47f af4b 	bne.w	800e862 <Sample_Cap_Touch+0xfa>
	      if(LED_State(CAP_8_LED_PORT, CAP_8_LED_PIN)){
 800e9cc:	2140      	movs	r1, #64	; 0x40
 800e9ce:	2002      	movs	r0, #2
 800e9d0:	f001 fab0 	bl	800ff34 <LED_State>
 800e9d4:	2800      	cmp	r0, #0
 800e9d6:	f43f af49 	beq.w	800e86c <Sample_Cap_Touch+0x104>
		      Set_LED(CAP_8_LED_PORT, CAP_8_LED_PIN, 0);
 800e9da:	465a      	mov	r2, fp
 800e9dc:	2140      	movs	r1, #64	; 0x40
 800e9de:	2002      	movs	r0, #2
 800e9e0:	f001 fa78 	bl	800fed4 <Set_LED>
      if( (cap_read[KEY_9_PORT] & KEY_9_PIN) == KEY_9_PIN){
 800e9e4:	7862      	ldrb	r2, [r4, #1]
 800e9e6:	f012 0b08 	ands.w	fp, r2, #8
 800e9ea:	f47f af44 	bne.w	800e876 <Sample_Cap_Touch+0x10e>
	      if(LED_State(CAP_9_LED_PORT, CAP_9_LED_PIN)){
 800e9ee:	2120      	movs	r1, #32
 800e9f0:	2002      	movs	r0, #2
 800e9f2:	f001 fa9f 	bl	800ff34 <LED_State>
 800e9f6:	2800      	cmp	r0, #0
 800e9f8:	f43f af42 	beq.w	800e880 <Sample_Cap_Touch+0x118>
		      Set_LED(CAP_9_LED_PORT, CAP_9_LED_PIN, 0);
 800e9fc:	465a      	mov	r2, fp
 800e9fe:	2120      	movs	r1, #32
 800ea00:	2002      	movs	r0, #2
 800ea02:	f001 fa67 	bl	800fed4 <Set_LED>
      if( (cap_read[KEY_10_PORT] & KEY_10_PIN) == KEY_10_PIN){
 800ea06:	7862      	ldrb	r2, [r4, #1]
 800ea08:	f012 0b10 	ands.w	fp, r2, #16
 800ea0c:	f47f af3d 	bne.w	800e88a <Sample_Cap_Touch+0x122>
	      if(LED_State(CAP_10_LED_PORT, CAP_10_LED_PIN)){
 800ea10:	2110      	movs	r1, #16
 800ea12:	2002      	movs	r0, #2
 800ea14:	f001 fa8e 	bl	800ff34 <LED_State>
 800ea18:	2800      	cmp	r0, #0
 800ea1a:	f43f af3b 	beq.w	800e894 <Sample_Cap_Touch+0x12c>
		      Set_LED(CAP_10_LED_PORT, CAP_10_LED_PIN, 0);
 800ea1e:	465a      	mov	r2, fp
 800ea20:	2110      	movs	r1, #16
 800ea22:	2002      	movs	r0, #2
 800ea24:	f001 fa56 	bl	800fed4 <Set_LED>
      if( (cap_read[KEY_11_PORT] & KEY_11_PIN) == KEY_11_PIN){
 800ea28:	7862      	ldrb	r2, [r4, #1]
 800ea2a:	f012 0b20 	ands.w	fp, r2, #32
 800ea2e:	f47f af36 	bne.w	800e89e <Sample_Cap_Touch+0x136>
	      if(LED_State(CAP_11_LED_PORT, CAP_11_LED_PIN)){
 800ea32:	2108      	movs	r1, #8
 800ea34:	2002      	movs	r0, #2
 800ea36:	f001 fa7d 	bl	800ff34 <LED_State>
 800ea3a:	2800      	cmp	r0, #0
 800ea3c:	f43f af34 	beq.w	800e8a8 <Sample_Cap_Touch+0x140>
		      Set_LED(CAP_11_LED_PORT, CAP_11_LED_PIN, 0);
 800ea40:	465a      	mov	r2, fp
 800ea42:	2108      	movs	r1, #8
 800ea44:	2002      	movs	r0, #2
 800ea46:	f001 fa45 	bl	800fed4 <Set_LED>
      if( (cap_read[KEY_12_PORT] & KEY_12_PIN) == KEY_12_PIN){
 800ea4a:	7862      	ldrb	r2, [r4, #1]
 800ea4c:	f012 0b40 	ands.w	fp, r2, #64	; 0x40
 800ea50:	f47f af2f 	bne.w	800e8b2 <Sample_Cap_Touch+0x14a>
	      if(LED_State(CAP_12_LED_PORT, CAP_12_LED_PIN)){
 800ea54:	2104      	movs	r1, #4
 800ea56:	2002      	movs	r0, #2
 800ea58:	f001 fa6c 	bl	800ff34 <LED_State>
 800ea5c:	2800      	cmp	r0, #0
 800ea5e:	f43f af2d 	beq.w	800e8bc <Sample_Cap_Touch+0x154>
		      Set_LED(CAP_12_LED_PORT, CAP_12_LED_PIN, 0);
 800ea62:	465a      	mov	r2, fp
 800ea64:	2104      	movs	r1, #4
 800ea66:	2002      	movs	r0, #2
 800ea68:	f001 fa34 	bl	800fed4 <Set_LED>
      if( (cap_read[LEFT_BUTTON_PORT] & LEFT_BUTTON_PIN) == LEFT_BUTTON_PIN){
 800ea6c:	7823      	ldrb	r3, [r4, #0]
 800ea6e:	f013 0301 	ands.w	r3, r3, #1
 800ea72:	f47f af28 	bne.w	800e8c6 <Sample_Cap_Touch+0x15e>
	      if(leftTouchDebounce){
 800ea76:	f898 2000 	ldrb.w	r2, [r8]
 800ea7a:	2a00      	cmp	r2, #0
 800ea7c:	f43f af28 	beq.w	800e8d0 <Sample_Cap_Touch+0x168>
		      leftTouchDebounce = 0;
 800ea80:	f888 3000 	strb.w	r3, [r8]
      if( (cap_read[RIGHT_BUTTON_PORT] & RIGHT_BUTTON_PIN) == RIGHT_BUTTON_PIN){
 800ea84:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800ea88:	2b00      	cmp	r3, #0
	      if(rightTouchDebounce == 0){
 800ea8a:	783b      	ldrb	r3, [r7, #0]
      if( (cap_read[RIGHT_BUTTON_PORT] & RIGHT_BUTTON_PIN) == RIGHT_BUTTON_PIN){
 800ea8c:	f6bf af26 	bge.w	800e8dc <Sample_Cap_Touch+0x174>
	      if(rightTouchDebounce == 0){
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	f47f ae78 	bne.w	800e786 <Sample_Cap_Touch+0x1e>
		      incrementOctave();
 800ea96:	f003 fee3 	bl	8012860 <incrementOctave>
		      rightTouchDebounce = 1;
 800ea9a:	703d      	strb	r5, [r7, #0]
 800ea9c:	e673      	b.n	800e786 <Sample_Cap_Touch+0x1e>
		      Set_LED(CAP_1_LED_PORT, CAP_1_LED_PIN, 0);
 800ea9e:	465a      	mov	r2, fp
 800eaa0:	2120      	movs	r1, #32
 800eaa2:	2003      	movs	r0, #3
 800eaa4:	f001 fa16 	bl	800fed4 <Set_LED>
 800eaa8:	e725      	b.n	800e8f6 <Sample_Cap_Touch+0x18e>
		      decrementOctave();
 800eaaa:	f004 f941 	bl	8012d30 <decrementOctave>
		      leftTouchDebounce = 1;
 800eaae:	f888 5000 	strb.w	r5, [r8]
 800eab2:	e70d      	b.n	800e8d0 <Sample_Cap_Touch+0x168>
	  Set_LED(CAP_1_LED_PORT, CAP_1_LED_PIN, 1);
 800eab4:	4602      	mov	r2, r0
 800eab6:	2120      	movs	r1, #32
 800eab8:	2003      	movs	r0, #3
 800eaba:	f001 fa0b 	bl	800fed4 <Set_LED>
 800eabe:	7823      	ldrb	r3, [r4, #0]
 800eac0:	e68f      	b.n	800e7e2 <Sample_Cap_Touch+0x7a>
 800eac2:	bf00      	nop
 800eac4:	20005418 	.word	0x20005418
 800eac8:	2000507d 	.word	0x2000507d
 800eacc:	20005534 	.word	0x20005534
 800ead0:	20005420 	.word	0x20005420
 800ead4:	2000507c 	.word	0x2000507c

0800ead8 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 800ead8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  hcomp1.Instance = COMP1;
 800eada:	4b0d      	ldr	r3, [pc, #52]	; (800eb10 <MX_COMP1_Init+0x38>)
 800eadc:	4a0d      	ldr	r2, [pc, #52]	; (800eb14 <MX_COMP1_Init+0x3c>)
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_3_4VREFINT;
 800eade:	4f0e      	ldr	r7, [pc, #56]	; (800eb18 <MX_COMP1_Init+0x40>)
  hcomp1.Instance = COMP1;
 800eae0:	601a      	str	r2, [r3, #0]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 800eae2:	2680      	movs	r6, #128	; 0x80
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800eae4:	2200      	movs	r2, #0
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_HIGH;
 800eae6:	f44f 3540 	mov.w	r5, #196608	; 0x30000
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
  hcomp1.Init.Mode = COMP_POWERMODE_ULTRALOWPOWER;
 800eaea:	240c      	movs	r4, #12
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_FALLING;
 800eaec:	2121      	movs	r1, #33	; 0x21
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800eaee:	4618      	mov	r0, r3
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_3_4VREFINT;
 800eaf0:	611f      	str	r7, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 800eaf2:	60de      	str	r6, [r3, #12]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_HIGH;
 800eaf4:	615d      	str	r5, [r3, #20]
  hcomp1.Init.Mode = COMP_POWERMODE_ULTRALOWPOWER;
 800eaf6:	609c      	str	r4, [r3, #8]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_FALLING;
 800eaf8:	6219      	str	r1, [r3, #32]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800eafa:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800eafc:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800eafe:	605a      	str	r2, [r3, #4]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800eb00:	f7f2 fd58 	bl	80015b4 <HAL_COMP_Init>
 800eb04:	b900      	cbnz	r0, 800eb08 <MX_COMP1_Init+0x30>
 800eb06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    Error_Handler();
  }

}
 800eb08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Error_Handler();
 800eb0c:	f001 bc84 	b.w	8010418 <Error_Handler>
 800eb10:	20005424 	.word	0x20005424
 800eb14:	40010200 	.word	0x40010200
 800eb18:	00c00020 	.word	0x00c00020

0800eb1c <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 800eb1c:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(compHandle->Instance==COMP1)
 800eb1e:	6802      	ldr	r2, [r0, #0]
 800eb20:	4b14      	ldr	r3, [pc, #80]	; (800eb74 <HAL_COMP_MspInit+0x58>)
{
 800eb22:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eb24:	2400      	movs	r4, #0
  if(compHandle->Instance==COMP1)
 800eb26:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eb28:	9402      	str	r4, [sp, #8]
 800eb2a:	9401      	str	r4, [sp, #4]
 800eb2c:	9403      	str	r4, [sp, #12]
 800eb2e:	9404      	str	r4, [sp, #16]
 800eb30:	9405      	str	r4, [sp, #20]
  if(compHandle->Instance==COMP1)
 800eb32:	d001      	beq.n	800eb38 <HAL_COMP_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 800eb34:	b007      	add	sp, #28
 800eb36:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800eb38:	f503 3387 	add.w	r3, r3, #69120	; 0x10e00
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800eb3c:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800eb3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800eb40:	480d      	ldr	r0, [pc, #52]	; (800eb78 <HAL_COMP_MspInit+0x5c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800eb42:	f042 0202 	orr.w	r2, r2, #2
 800eb46:	64da      	str	r2, [r3, #76]	; 0x4c
 800eb48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eb4a:	f003 0302 	and.w	r3, r3, #2
 800eb4e:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800eb50:	2204      	movs	r2, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800eb52:	2303      	movs	r3, #3
 800eb54:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800eb56:	9201      	str	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800eb58:	9d00      	ldr	r5, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800eb5a:	f7f3 f9df 	bl	8001f1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(COMP_IRQn, 5, 0);
 800eb5e:	4622      	mov	r2, r4
 800eb60:	2105      	movs	r1, #5
 800eb62:	2040      	movs	r0, #64	; 0x40
 800eb64:	f7f2 fe44 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 800eb68:	2040      	movs	r0, #64	; 0x40
 800eb6a:	f7f2 fe77 	bl	800185c <HAL_NVIC_EnableIRQ>
}
 800eb6e:	b007      	add	sp, #28
 800eb70:	bd30      	pop	{r4, r5, pc}
 800eb72:	bf00      	nop
 800eb74:	40010200 	.word	0x40010200
 800eb78:	48000400 	.word	0x48000400

0800eb7c <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800eb7c:	b530      	push	{r4, r5, lr}
 800eb7e:	b08b      	sub	sp, #44	; 0x2c
  DAC_ChannelConfTypeDef sConfig = {0};
 800eb80:	4668      	mov	r0, sp
 800eb82:	2228      	movs	r2, #40	; 0x28
 800eb84:	2100      	movs	r1, #0
 800eb86:	f004 fd14 	bl	80135b2 <memset>

  /**DAC Initialization 
  */
  hdac1.Instance = DAC1;
 800eb8a:	4813      	ldr	r0, [pc, #76]	; (800ebd8 <MX_DAC1_Init+0x5c>)
 800eb8c:	4b13      	ldr	r3, [pc, #76]	; (800ebdc <MX_DAC1_Init+0x60>)
 800eb8e:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800eb90:	f7f2 fe70 	bl	8001874 <HAL_DAC_Init>
 800eb94:	b9e8      	cbnz	r0, 800ebd2 <MX_DAC1_Init+0x56>
  {
    Error_Handler();
  }
  /**DAC channel OUT1 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800eb96:	2300      	movs	r3, #0
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800eb98:	2516      	movs	r5, #22
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800eb9a:	2402      	movs	r4, #2
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800eb9c:	461a      	mov	r2, r3
 800eb9e:	4669      	mov	r1, sp
 800eba0:	480d      	ldr	r0, [pc, #52]	; (800ebd8 <MX_DAC1_Init+0x5c>)
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800eba2:	9301      	str	r3, [sp, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800eba4:	9303      	str	r3, [sp, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800eba6:	9304      	str	r3, [sp, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800eba8:	9305      	str	r3, [sp, #20]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800ebaa:	9502      	str	r5, [sp, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800ebac:	9400      	str	r4, [sp, #0]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800ebae:	f7f2 ff71 	bl	8001a94 <HAL_DAC_ConfigChannel>
 800ebb2:	b958      	cbnz	r0, 800ebcc <MX_DAC1_Init+0x50>
  {
    Error_Handler();
  }
  /**DAC channel OUT2 config 
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800ebb4:	2300      	movs	r3, #0
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800ebb6:	4669      	mov	r1, sp
 800ebb8:	2210      	movs	r2, #16
 800ebba:	4807      	ldr	r0, [pc, #28]	; (800ebd8 <MX_DAC1_Init+0x5c>)
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800ebbc:	9304      	str	r3, [sp, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800ebbe:	f7f2 ff69 	bl	8001a94 <HAL_DAC_ConfigChannel>
 800ebc2:	b108      	cbz	r0, 800ebc8 <MX_DAC1_Init+0x4c>
  {
    Error_Handler();
 800ebc4:	f001 fc28 	bl	8010418 <Error_Handler>
  }

}
 800ebc8:	b00b      	add	sp, #44	; 0x2c
 800ebca:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 800ebcc:	f001 fc24 	bl	8010418 <Error_Handler>
 800ebd0:	e7f0      	b.n	800ebb4 <MX_DAC1_Init+0x38>
    Error_Handler();
 800ebd2:	f001 fc21 	bl	8010418 <Error_Handler>
 800ebd6:	e7de      	b.n	800eb96 <MX_DAC1_Init+0x1a>
 800ebd8:	20005450 	.word	0x20005450
 800ebdc:	40007400 	.word	0x40007400

0800ebe0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800ebe0:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(dacHandle->Instance==DAC1)
 800ebe2:	6802      	ldr	r2, [r0, #0]
 800ebe4:	4b29      	ldr	r3, [pc, #164]	; (800ec8c <HAL_DAC_MspInit+0xac>)
{
 800ebe6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ebe8:	2400      	movs	r4, #0
  if(dacHandle->Instance==DAC1)
 800ebea:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ebec:	9404      	str	r4, [sp, #16]
 800ebee:	9403      	str	r4, [sp, #12]
 800ebf0:	9405      	str	r4, [sp, #20]
 800ebf2:	9406      	str	r4, [sp, #24]
 800ebf4:	9407      	str	r4, [sp, #28]
  if(dacHandle->Instance==DAC1)
 800ebf6:	d001      	beq.n	800ebfc <HAL_DAC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800ebf8:	b009      	add	sp, #36	; 0x24
 800ebfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_DAC1_CLK_ENABLE();
 800ebfc:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 800ec00:	4e23      	ldr	r6, [pc, #140]	; (800ec90 <HAL_DAC_MspInit+0xb0>)
    __HAL_RCC_DAC1_CLK_ENABLE();
 800ec02:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ec04:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800ec08:	659a      	str	r2, [r3, #88]	; 0x58
 800ec0a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ec0c:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800ec10:	9201      	str	r2, [sp, #4]
 800ec12:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ec14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ec16:	f042 0201 	orr.w	r2, r2, #1
 800ec1a:	64da      	str	r2, [r3, #76]	; 0x4c
 800ec1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec1e:	f003 0301 	and.w	r3, r3, #1
 800ec22:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800ec24:	2230      	movs	r2, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ec26:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ec28:	a903      	add	r1, sp, #12
 800ec2a:	4605      	mov	r5, r0
 800ec2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ec30:	9f02      	ldr	r7, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800ec32:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ec34:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ec36:	f7f3 f971 	bl	8001f1c <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 800ec3a:	4b16      	ldr	r3, [pc, #88]	; (800ec94 <HAL_DAC_MspInit+0xb4>)
 800ec3c:	6033      	str	r3, [r6, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 800ec3e:	2006      	movs	r0, #6
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ec40:	f04f 0e10 	mov.w	lr, #16
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800ec44:	2780      	movs	r7, #128	; 0x80
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ec46:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ec4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800ec4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 800ec52:	6070      	str	r0, [r6, #4]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800ec54:	4630      	mov	r0, r6
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800ec56:	60f4      	str	r4, [r6, #12]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 800ec58:	61f4      	str	r4, [r6, #28]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ec5a:	f8c6 e008 	str.w	lr, [r6, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800ec5e:	6137      	str	r7, [r6, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ec60:	6171      	str	r1, [r6, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ec62:	61b2      	str	r2, [r6, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800ec64:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800ec66:	f7f2 ffdf 	bl	8001c28 <HAL_DMA_Init>
 800ec6a:	b958      	cbnz	r0, 800ec84 <HAL_DAC_MspInit+0xa4>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 800ec6c:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800ec6e:	2200      	movs	r2, #0
 800ec70:	2105      	movs	r1, #5
 800ec72:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 800ec74:	62b5      	str	r5, [r6, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800ec76:	f7f2 fdbb 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800ec7a:	2036      	movs	r0, #54	; 0x36
 800ec7c:	f7f2 fdee 	bl	800185c <HAL_NVIC_EnableIRQ>
}
 800ec80:	b009      	add	sp, #36	; 0x24
 800ec82:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 800ec84:	f001 fbc8 	bl	8010418 <Error_Handler>
 800ec88:	e7f0      	b.n	800ec6c <HAL_DAC_MspInit+0x8c>
 800ec8a:	bf00      	nop
 800ec8c:	40007400 	.word	0x40007400
 800ec90:	20005464 	.word	0x20005464
 800ec94:	40020008 	.word	0x40020008

0800ec98 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800ec98:	4b0f      	ldr	r3, [pc, #60]	; (800ecd8 <MX_DMA_Init+0x40>)
{
 800ec9a:	b500      	push	{lr}
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800ec9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ec9e:	f042 0204 	orr.w	r2, r2, #4
 800eca2:	649a      	str	r2, [r3, #72]	; 0x48
 800eca4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
{
 800eca6:	b083      	sub	sp, #12
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800eca8:	f002 0204 	and.w	r2, r2, #4
 800ecac:	9200      	str	r2, [sp, #0]
 800ecae:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800ecb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ecb2:	f042 0201 	orr.w	r2, r2, #1
 800ecb6:	649a      	str	r2, [r3, #72]	; 0x48
 800ecb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ecba:	f003 0301 	and.w	r3, r3, #1
 800ecbe:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 7, 0);
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	2107      	movs	r1, #7
 800ecc4:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800ecc6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 7, 0);
 800ecc8:	f7f2 fd92 	bl	80017f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800eccc:	200b      	movs	r0, #11
 800ecce:	f7f2 fdc5 	bl	800185c <HAL_NVIC_EnableIRQ>

}
 800ecd2:	b003      	add	sp, #12
 800ecd4:	f85d fb04 	ldr.w	pc, [sp], #4
 800ecd8:	40021000 	.word	0x40021000

0800ecdc <initFilter>:
//q15_t coef_1000[6*NUM_STAGES] = {0.005709266664235, 0, 0.011418533328471, 0.005709266664235, 1.832076711084677, -0.854913777741618};
//q15_t coef_1000[6*NUM_STAGES] = {32767, 0, 0, 0, 0, 0};
//const q15_t coef_1000[] = {93.5, 0, 187.0, 93.5, 30016.5, -14006.5};
//const q15_t coef_1000[] = {24.0, 0, 48.5, 24.0, 31433.5, -15147.0};

void initFilter(void){
 800ecdc:	b570      	push	{r4, r5, r6, lr}
	filter_instance.pCoeffs = coef[FILTER_VALS-1];
 800ecde:	4c08      	ldr	r4, [pc, #32]	; (800ed00 <initFilter+0x24>)
	filter_instance.postShift = bit_shift[FILTER_VALS-1];
	filter_instance.numStages = NUM_STAGES;
	filter_instance.pState = filter_state;
 800ece0:	4e08      	ldr	r6, [pc, #32]	; (800ed04 <initFilter+0x28>)
	filter_instance.pCoeffs = coef[FILTER_VALS-1];
 800ece2:	4a09      	ldr	r2, [pc, #36]	; (800ed08 <initFilter+0x2c>)
 800ece4:	60a2      	str	r2, [r4, #8]
void initFilter(void){
 800ece6:	b082      	sub	sp, #8
	filter_instance.postShift = bit_shift[FILTER_VALS-1];
 800ece8:	2501      	movs	r5, #1

	arm_biquad_cascade_df1_init_q15(&filter_instance, NUM_STAGES, coef[FILTER_VALS-1], filter_state, bit_shift[FILTER_VALS-1]);
 800ecea:	4620      	mov	r0, r4
 800ecec:	9500      	str	r5, [sp, #0]
 800ecee:	4629      	mov	r1, r5
 800ecf0:	4633      	mov	r3, r6
	filter_instance.postShift = bit_shift[FILTER_VALS-1];
 800ecf2:	7325      	strb	r5, [r4, #12]
	filter_instance.numStages = NUM_STAGES;
 800ecf4:	7025      	strb	r5, [r4, #0]
	filter_instance.pState = filter_state;
 800ecf6:	6066      	str	r6, [r4, #4]
	arm_biquad_cascade_df1_init_q15(&filter_instance, NUM_STAGES, coef[FILTER_VALS-1], filter_state, bit_shift[FILTER_VALS-1]);
 800ecf8:	f004 fb4e 	bl	8013398 <arm_biquad_cascade_df1_init_q15>

}
 800ecfc:	b002      	add	sp, #8
 800ecfe:	bd70      	pop	{r4, r5, r6, pc}
 800ed00:	200054c4 	.word	0x200054c4
 800ed04:	20005080 	.word	0x20005080
 800ed08:	08014524 	.word	0x08014524
 800ed0c:	00000000 	.word	0x00000000

0800ed10 <setCutoffFreq>:

// inputVal should lie somewhere between 0 and pi/2, inclusively
void setCutoffFreq(float inputAngle){
 800ed10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed12:	ed2d 8b02 	vpush	{d8}

	//if angle is greater than 90-degrees (horizon), flip it
	if(inputAngle < PI_DIV_2){
 800ed16:	ee10 0a10 	vmov	r0, s0
void setCutoffFreq(float inputAngle){
 800ed1a:	b083      	sub	sp, #12
 800ed1c:	eeb0 8a40 	vmov.f32	s16, s0
	if(inputAngle < PI_DIV_2){
 800ed20:	f7f1 fbd2 	bl	80004c8 <__aeabi_f2d>
 800ed24:	a333      	add	r3, pc, #204	; (adr r3, 800edf4 <setCutoffFreq+0xe4>)
 800ed26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed2a:	4604      	mov	r4, r0
 800ed2c:	460d      	mov	r5, r1
 800ed2e:	f7f1 fe91 	bl	8000a54 <__aeabi_dcmplt>
 800ed32:	b1a0      	cbz	r0, 800ed5e <setCutoffFreq+0x4e>
		inputAngle = abs(PI - inputAngle);
 800ed34:	eddf 7a26 	vldr	s15, [pc, #152]	; 800edd0 <setCutoffFreq+0xc0>
 800ed38:	ee37 0ac8 	vsub.f32	s0, s15, s16
 800ed3c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ed40:	ee10 0a10 	vmov	r0, s0
 800ed44:	2800      	cmp	r0, #0
 800ed46:	bfb8      	it	lt
 800ed48:	4240      	neglt	r0, r0
 800ed4a:	ee07 0a90 	vmov	s15, r0
 800ed4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed52:	ee17 0a90 	vmov	r0, s15
 800ed56:	f7f1 fbb7 	bl	80004c8 <__aeabi_f2d>
 800ed5a:	4604      	mov	r4, r0
 800ed5c:	460d      	mov	r5, r1
	}

	// scale angle from 0 to 36 (since coefficients are calculated for 5-degree tilt increments)
	scaledAngle = SCALE_INPUT * inputAngle;
 800ed5e:	a31a      	add	r3, pc, #104	; (adr r3, 800edc8 <setCutoffFreq+0xb8>)
 800ed60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed64:	4620      	mov	r0, r4
 800ed66:	4629      	mov	r1, r5
 800ed68:	f7f1 fc02 	bl	8000570 <__aeabi_dmul>
 800ed6c:	f7f1 fef8 	bl	8000b60 <__aeabi_d2f>
 800ed70:	4b18      	ldr	r3, [pc, #96]	; (800edd4 <setCutoffFreq+0xc4>)

	inputVal = round(scaledAngle);
 800ed72:	4c19      	ldr	r4, [pc, #100]	; (800edd8 <setCutoffFreq+0xc8>)
	scaledAngle = SCALE_INPUT * inputAngle;
 800ed74:	6018      	str	r0, [r3, #0]
	inputVal = round(scaledAngle);
 800ed76:	f7f1 fba7 	bl	80004c8 <__aeabi_f2d>
 800ed7a:	ec41 0b10 	vmov	d0, r0, r1
 800ed7e:	f004 fc35 	bl	80135ec <round>
 800ed82:	ec51 0b10 	vmov	r0, r1, d0
 800ed86:	f7f1 fecb 	bl	8000b20 <__aeabi_d2uiz>


	// dont change if already set
	if(pastVal == inputVal) return;
 800ed8a:	4914      	ldr	r1, [pc, #80]	; (800eddc <setCutoffFreq+0xcc>)
	inputVal = round(scaledAngle);
 800ed8c:	b2c0      	uxtb	r0, r0
 800ed8e:	7020      	strb	r0, [r4, #0]
	if(pastVal == inputVal) return;
 800ed90:	780a      	ldrb	r2, [r1, #0]
 800ed92:	7823      	ldrb	r3, [r4, #0]
 800ed94:	429a      	cmp	r2, r3
 800ed96:	d013      	beq.n	800edc0 <setCutoffFreq+0xb0>

	pastVal = inputVal;
 800ed98:	7825      	ldrb	r5, [r4, #0]

	changedCutoff = 1;
 800ed9a:	4f11      	ldr	r7, [pc, #68]	; (800ede0 <setCutoffFreq+0xd0>)
	arm_biquad_cascade_df1_init_q15(&filter_instance, NUM_STAGES, coef[inputVal], filter_state, bit_shift[inputVal]);
 800ed9c:	4e11      	ldr	r6, [pc, #68]	; (800ede4 <setCutoffFreq+0xd4>)
 800ed9e:	4a12      	ldr	r2, [pc, #72]	; (800ede8 <setCutoffFreq+0xd8>)
 800eda0:	4b12      	ldr	r3, [pc, #72]	; (800edec <setCutoffFreq+0xdc>)
 800eda2:	4813      	ldr	r0, [pc, #76]	; (800edf0 <setCutoffFreq+0xe0>)
	pastVal = inputVal;
 800eda4:	b2ed      	uxtb	r5, r5
 800eda6:	700d      	strb	r5, [r1, #0]
	changedCutoff = 1;
 800eda8:	2101      	movs	r1, #1
 800edaa:	7039      	strb	r1, [r7, #0]
	arm_biquad_cascade_df1_init_q15(&filter_instance, NUM_STAGES, coef[inputVal], filter_state, bit_shift[inputVal]);
 800edac:	7825      	ldrb	r5, [r4, #0]
 800edae:	7824      	ldrb	r4, [r4, #0]
 800edb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800edb4:	5734      	ldrsb	r4, [r6, r4]
 800edb6:	9400      	str	r4, [sp, #0]
 800edb8:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800edbc:	f004 faec 	bl	8013398 <arm_biquad_cascade_df1_init_q15>
}
 800edc0:	b003      	add	sp, #12
 800edc2:	ecbd 8b02 	vpop	{d8}
 800edc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edc8:	7b3f5595 	.word	0x7b3f5595
 800edcc:	404cce9a 	.word	0x404cce9a
 800edd0:	40490fdb 	.word	0x40490fdb
 800edd4:	2000508c 	.word	0x2000508c
 800edd8:	20005088 	.word	0x20005088
 800eddc:	20000030 	.word	0x20000030
 800ede0:	2000507e 	.word	0x2000507e
 800ede4:	08013bfc 	.word	0x08013bfc
 800ede8:	08013cb4 	.word	0x08013cb4
 800edec:	20005080 	.word	0x20005080
 800edf0:	200054c4 	.word	0x200054c4
 800edf4:	544486e0 	.word	0x544486e0
 800edf8:	3ff921fb 	.word	0x3ff921fb

0800edfc <applyFilter>:

void applyFilter(volatile q15_t* input, volatile q15_t* output, volatile q15_t* prev_buffer){
 800edfc:	b570      	push	{r4, r5, r6, lr}
	if(changedCutoff == 1){
 800edfe:	4d0c      	ldr	r5, [pc, #48]	; (800ee30 <applyFilter+0x34>)
 800ee00:	782b      	ldrb	r3, [r5, #0]
 800ee02:	2b01      	cmp	r3, #1
void applyFilter(volatile q15_t* input, volatile q15_t* output, volatile q15_t* prev_buffer){
 800ee04:	4606      	mov	r6, r0
 800ee06:	460c      	mov	r4, r1
	if(changedCutoff == 1){
 800ee08:	d008      	beq.n	800ee1c <applyFilter+0x20>
		arm_biquad_cascade_df1_q15(&filter_instance, prev_buffer, output, (uint32_t) BUFFER_SIZE);
		changedCutoff = 0;
	}
	arm_biquad_cascade_df1_q15(&filter_instance, input, output, (uint32_t) BUFFER_SIZE);
 800ee0a:	4622      	mov	r2, r4
 800ee0c:	4631      	mov	r1, r6
 800ee0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ee12:	4808      	ldr	r0, [pc, #32]	; (800ee34 <applyFilter+0x38>)
}
 800ee14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	arm_biquad_cascade_df1_q15(&filter_instance, input, output, (uint32_t) BUFFER_SIZE);
 800ee18:	f004 ba1a 	b.w	8013250 <arm_biquad_cascade_df1_q15>
		arm_biquad_cascade_df1_q15(&filter_instance, prev_buffer, output, (uint32_t) BUFFER_SIZE);
 800ee1c:	4611      	mov	r1, r2
 800ee1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ee22:	4622      	mov	r2, r4
 800ee24:	4803      	ldr	r0, [pc, #12]	; (800ee34 <applyFilter+0x38>)
 800ee26:	f004 fa13 	bl	8013250 <arm_biquad_cascade_df1_q15>
		changedCutoff = 0;
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	702b      	strb	r3, [r5, #0]
 800ee2e:	e7ec      	b.n	800ee0a <applyFilter+0xe>
 800ee30:	2000507e 	.word	0x2000507e
 800ee34:	200054c4 	.word	0x200054c4

0800ee38 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b096      	sub	sp, #88	; 0x58

  /* USER CODE BEGIN StartDefaultTask */
  osMutexDef (LED_mutex);    // Declare mutex
 800ee3c:	a816      	add	r0, sp, #88	; 0x58
 800ee3e:	2500      	movs	r5, #0
 800ee40:	f840 5d54 	str.w	r5, [r0, #-84]!
  LED_mutex_id = osMutexCreate(osMutex(LED_mutex));
 800ee44:	f7fc fdf0 	bl	800ba28 <osMutexCreate>

  osMutexDef (I2C3_mutex);    // Declare mutex
 800ee48:	ab16      	add	r3, sp, #88	; 0x58
  LED_mutex_id = osMutexCreate(osMutex(LED_mutex));
 800ee4a:	4a30      	ldr	r2, [pc, #192]	; (800ef0c <StartDefaultTask+0xd4>)
  osMutexDef (I2C3_mutex);    // Declare mutex
 800ee4c:	f843 5d50 	str.w	r5, [r3, #-80]!
  LED_mutex_id = osMutexCreate(osMutex(LED_mutex));
 800ee50:	6010      	str	r0, [r2, #0]
  I2C3_mutex_id = osMutexCreate(osMutex(I2C3_mutex));
 800ee52:	4618      	mov	r0, r3
 800ee54:	f7fc fde8 	bl	800ba28 <osMutexCreate>
 800ee58:	4b2d      	ldr	r3, [pc, #180]	; (800ef10 <StartDefaultTask+0xd8>)
  osSemaphoreWait( accSampleSemaphoreHandle, 1);

  osTimerDef(accSampleTimer, accGiveSemaphore);
  accSampleTimerHandle = osTimerCreate(osTimer(accSampleTimer), osTimerPeriodic, (void *)0);

  osThreadDef(lidarMeasurementTask, LidarMeasurement, osPriorityLow, 0, 256);
 800ee5a:	4c2e      	ldr	r4, [pc, #184]	; (800ef14 <StartDefaultTask+0xdc>)
  I2C3_mutex_id = osMutexCreate(osMutex(I2C3_mutex));
 800ee5c:	6018      	str	r0, [r3, #0]
  osMutexWait(I2C3_mutex_id, 5);
 800ee5e:	2105      	movs	r1, #5
 800ee60:	f7fc fde6 	bl	800ba30 <osMutexWait>
  osSemaphoreDef(capSampleSemaphore);
 800ee64:	a816      	add	r0, sp, #88	; 0x58
  capSampleSemaphoreHandle = osSemaphoreCreate (osSemaphore(capSampleSemaphore), 1);
 800ee66:	2101      	movs	r1, #1
  osSemaphoreDef(capSampleSemaphore);
 800ee68:	f840 5d4c 	str.w	r5, [r0, #-76]!
  capSampleSemaphoreHandle = osSemaphoreCreate (osSemaphore(capSampleSemaphore), 1);
 800ee6c:	f7fc fe30 	bl	800bad0 <osSemaphoreCreate>
 800ee70:	4b29      	ldr	r3, [pc, #164]	; (800ef18 <StartDefaultTask+0xe0>)
  osSemaphoreWait( capSampleSemaphoreHandle, 1);
 800ee72:	2101      	movs	r1, #1
  capSampleSemaphoreHandle = osSemaphoreCreate (osSemaphore(capSampleSemaphore), 1);
 800ee74:	6018      	str	r0, [r3, #0]
  osSemaphoreWait( capSampleSemaphoreHandle, 1);
 800ee76:	f7fc fe3f 	bl	800baf8 <osSemaphoreWait>
  osSemaphoreDef(lidarSampleReadySemaphore);
 800ee7a:	a816      	add	r0, sp, #88	; 0x58
  lidarSampleReadySemaphoreHandle = osSemaphoreCreate (osSemaphore(lidarSampleReadySemaphore), 1);
 800ee7c:	2101      	movs	r1, #1
  osSemaphoreDef(lidarSampleReadySemaphore);
 800ee7e:	f840 5d48 	str.w	r5, [r0, #-72]!
  lidarSampleReadySemaphoreHandle = osSemaphoreCreate (osSemaphore(lidarSampleReadySemaphore), 1);
 800ee82:	f7fc fe25 	bl	800bad0 <osSemaphoreCreate>
 800ee86:	4b25      	ldr	r3, [pc, #148]	; (800ef1c <StartDefaultTask+0xe4>)
  osSemaphoreWait( lidarSampleReadySemaphoreHandle, 1);
 800ee88:	2101      	movs	r1, #1
  lidarSampleReadySemaphoreHandle = osSemaphoreCreate (osSemaphore(lidarSampleReadySemaphore), 1);
 800ee8a:	6018      	str	r0, [r3, #0]
  osSemaphoreWait( lidarSampleReadySemaphoreHandle, 1);
 800ee8c:	f7fc fe34 	bl	800baf8 <osSemaphoreWait>
  osSemaphoreDef(accSampleSemaphore);
 800ee90:	a816      	add	r0, sp, #88	; 0x58
  accSampleSemaphoreHandle = osSemaphoreCreate (osSemaphore(accSampleSemaphore), 1);
 800ee92:	2101      	movs	r1, #1
  osSemaphoreDef(accSampleSemaphore);
 800ee94:	f840 5d44 	str.w	r5, [r0, #-68]!
  accSampleSemaphoreHandle = osSemaphoreCreate (osSemaphore(accSampleSemaphore), 1);
 800ee98:	f7fc fe1a 	bl	800bad0 <osSemaphoreCreate>
 800ee9c:	4b20      	ldr	r3, [pc, #128]	; (800ef20 <StartDefaultTask+0xe8>)
  osSemaphoreWait( accSampleSemaphoreHandle, 1);
 800ee9e:	2101      	movs	r1, #1
  accSampleSemaphoreHandle = osSemaphoreCreate (osSemaphore(accSampleSemaphore), 1);
 800eea0:	6018      	str	r0, [r3, #0]
  osSemaphoreWait( accSampleSemaphoreHandle, 1);
 800eea2:	f7fc fe29 	bl	800baf8 <osSemaphoreWait>
  osTimerDef(accSampleTimer, accGiveSemaphore);
 800eea6:	a816      	add	r0, sp, #88	; 0x58
 800eea8:	4b1e      	ldr	r3, [pc, #120]	; (800ef24 <StartDefaultTask+0xec>)
 800eeaa:	f840 3d40 	str.w	r3, [r0, #-64]!
  accSampleTimerHandle = osTimerCreate(osTimer(accSampleTimer), osTimerPeriodic, (void *)0);
 800eeae:	462a      	mov	r2, r5
 800eeb0:	2101      	movs	r1, #1
 800eeb2:	f7fc fd4b 	bl	800b94c <osTimerCreate>
 800eeb6:	4b1c      	ldr	r3, [pc, #112]	; (800ef28 <StartDefaultTask+0xf0>)
 800eeb8:	6018      	str	r0, [r3, #0]
  osThreadDef(lidarMeasurementTask, LidarMeasurement, osPriorityLow, 0, 256);
 800eeba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eebc:	af07      	add	r7, sp, #28
 800eebe:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800eec0:	4626      	mov	r6, r4
  lidarMeasurementHandle = osThreadCreate(osThread(lidarMeasurementTask), NULL);
 800eec2:	4629      	mov	r1, r5
  osThreadDef(lidarMeasurementTask, LidarMeasurement, osPriorityLow, 0, 256);
 800eec4:	f856 3b04 	ldr.w	r3, [r6], #4
 800eec8:	603b      	str	r3, [r7, #0]
  lidarMeasurementHandle = osThreadCreate(osThread(lidarMeasurementTask), NULL);
 800eeca:	a807      	add	r0, sp, #28
 800eecc:	f7fc fd1e 	bl	800b90c <osThreadCreate>
 800eed0:	4b16      	ldr	r3, [pc, #88]	; (800ef2c <StartDefaultTask+0xf4>)
 800eed2:	6018      	str	r0, [r3, #0]
//
  osThreadDef(capSampleTask, Sample_Cap_Touch, osPriorityLow, 0, 256);
 800eed4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800eed6:	af0c      	add	r7, sp, #48	; 0x30
 800eed8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800eeda:	6833      	ldr	r3, [r6, #0]
 800eedc:	603b      	str	r3, [r7, #0]
  capSampleHandle = osThreadCreate(osThread(capSampleTask), NULL);
 800eede:	4629      	mov	r1, r5
 800eee0:	a80c      	add	r0, sp, #48	; 0x30
 800eee2:	f7fc fd13 	bl	800b90c <osThreadCreate>
 800eee6:	4b12      	ldr	r3, [pc, #72]	; (800ef30 <StartDefaultTask+0xf8>)

  osThreadDef(accSampleTask, accelerometerThread, osPriorityLow, 0, 256);
 800eee8:	3418      	adds	r4, #24
  capSampleHandle = osThreadCreate(osThread(capSampleTask), NULL);
 800eeea:	6018      	str	r0, [r3, #0]
  osThreadDef(accSampleTask, accelerometerThread, osPriorityLow, 0, 256);
 800eeec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eeee:	ae11      	add	r6, sp, #68	; 0x44
 800eef0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800eef2:	6823      	ldr	r3, [r4, #0]
 800eef4:	6033      	str	r3, [r6, #0]
  accSampleHandle = osThreadCreate(osThread(accSampleTask), NULL);
 800eef6:	4629      	mov	r1, r5
 800eef8:	a811      	add	r0, sp, #68	; 0x44
 800eefa:	f7fc fd07 	bl	800b90c <osThreadCreate>
 800eefe:	4b0d      	ldr	r3, [pc, #52]	; (800ef34 <StartDefaultTask+0xfc>)
 800ef00:	6018      	str	r0, [r3, #0]
  //osTimerStart(capSampleTimerHandle, 40);

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800ef02:	2001      	movs	r0, #1
 800ef04:	f7fc fd1a 	bl	800b93c <osDelay>
 800ef08:	e7fb      	b.n	800ef02 <StartDefaultTask+0xca>
 800ef0a:	bf00      	nop
 800ef0c:	20005388 	.word	0x20005388
 800ef10:	20005364 	.word	0x20005364
 800ef14:	08013b64 	.word	0x08013b64
 800ef18:	20005420 	.word	0x20005420
 800ef1c:	200054e0 	.word	0x200054e0
 800ef20:	2000536c 	.word	0x2000536c
 800ef24:	0800e1d9 	.word	0x0800e1d9
 800ef28:	20005384 	.word	0x20005384
 800ef2c:	200054e4 	.word	0x200054e4
 800ef30:	200054dc 	.word	0x200054dc
 800ef34:	200054d8 	.word	0x200054d8

0800ef38 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 800ef38:	b530      	push	{r4, r5, lr}
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800ef3a:	4d07      	ldr	r5, [pc, #28]	; (800ef58 <MX_FREERTOS_Init+0x20>)
 800ef3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void MX_FREERTOS_Init(void) {
 800ef3e:	b087      	sub	sp, #28
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800ef40:	ac01      	add	r4, sp, #4
 800ef42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef44:	682b      	ldr	r3, [r5, #0]
 800ef46:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800ef48:	2100      	movs	r1, #0
 800ef4a:	a801      	add	r0, sp, #4
 800ef4c:	f7fc fcde 	bl	800b90c <osThreadCreate>
 800ef50:	4b02      	ldr	r3, [pc, #8]	; (800ef5c <MX_FREERTOS_Init+0x24>)
 800ef52:	6018      	str	r0, [r3, #0]
}
 800ef54:	b007      	add	sp, #28
 800ef56:	bd30      	pop	{r4, r5, pc}
 800ef58:	08013ba0 	.word	0x08013ba0
 800ef5c:	200054d4 	.word	0x200054d4

0800ef60 <MX_GPIO_Init>:
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
     PC2   ------> SharedAnalog_PC2
*/
void MX_GPIO_Init(void)
{
 800ef60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef64:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ef66:	2400      	movs	r4, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800ef68:	4b94      	ldr	r3, [pc, #592]	; (800f1bc <MX_GPIO_Init+0x25c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ef6a:	9408      	str	r4, [sp, #32]
 800ef6c:	9407      	str	r4, [sp, #28]
 800ef6e:	9409      	str	r4, [sp, #36]	; 0x24
 800ef70:	940a      	str	r4, [sp, #40]	; 0x28
 800ef72:	940b      	str	r4, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800ef74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, POWER_SWITCH_Pin|LED_SS_Pin|BT_EN_Pin, GPIO_PIN_RESET);
 800ef76:	f8df 825c 	ldr.w	r8, [pc, #604]	; 800f1d4 <MX_GPIO_Init+0x274>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_LAT_GPIO_Port, LED_LAT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BT_CMD_GPIO_Port, BT_CMD_Pin, GPIO_PIN_SET);
 800ef7a:	4f91      	ldr	r7, [pc, #580]	; (800f1c0 <MX_GPIO_Init+0x260>)
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, VL_XSHUT_Pin|HALL_CNTRL_Pin|SD_CARD_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BUTTON_3_Pin|BUTTON_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800ef7c:	4e91      	ldr	r6, [pc, #580]	; (800f1c4 <MX_GPIO_Init+0x264>)

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin|BUTTON_9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ef7e:	f8df a258 	ldr.w	sl, [pc, #600]	; 800f1d8 <MX_GPIO_Init+0x278>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8 
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ef82:	f8df 9258 	ldr.w	r9, [pc, #600]	; 800f1dc <MX_GPIO_Init+0x27c>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800ef86:	f042 0210 	orr.w	r2, r2, #16
 800ef8a:	64da      	str	r2, [r3, #76]	; 0x4c
 800ef8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ef8e:	f002 0210 	and.w	r2, r2, #16
 800ef92:	9201      	str	r2, [sp, #4]
 800ef94:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ef96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ef98:	f042 0204 	orr.w	r2, r2, #4
 800ef9c:	64da      	str	r2, [r3, #76]	; 0x4c
 800ef9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800efa0:	f002 0204 	and.w	r2, r2, #4
 800efa4:	9202      	str	r2, [sp, #8]
 800efa6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800efa8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800efaa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800efae:	64da      	str	r2, [r3, #76]	; 0x4c
 800efb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800efb2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800efb6:	9203      	str	r2, [sp, #12]
 800efb8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800efba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800efbc:	f042 0201 	orr.w	r2, r2, #1
 800efc0:	64da      	str	r2, [r3, #76]	; 0x4c
 800efc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800efc4:	f002 0201 	and.w	r2, r2, #1
 800efc8:	9204      	str	r2, [sp, #16]
 800efca:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800efcc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800efce:	f042 0202 	orr.w	r2, r2, #2
 800efd2:	64da      	str	r2, [r3, #76]	; 0x4c
 800efd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800efd6:	f002 0202 	and.w	r2, r2, #2
 800efda:	9205      	str	r2, [sp, #20]
 800efdc:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800efde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800efe0:	f042 0208 	orr.w	r2, r2, #8
 800efe4:	64da      	str	r2, [r3, #76]	; 0x4c
 800efe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800efe8:	f003 0308 	and.w	r3, r3, #8
 800efec:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, POWER_SWITCH_Pin|LED_SS_Pin|BT_EN_Pin, GPIO_PIN_RESET);
 800efee:	4622      	mov	r2, r4
 800eff0:	4640      	mov	r0, r8
 800eff2:	f240 1111 	movw	r1, #273	; 0x111
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800eff6:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, POWER_SWITCH_Pin|LED_SS_Pin|BT_EN_Pin, GPIO_PIN_RESET);
 800eff8:	f7f3 f8ac 	bl	8002154 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_LAT_GPIO_Port, LED_LAT_Pin, GPIO_PIN_RESET);
 800effc:	4622      	mov	r2, r4
 800effe:	2104      	movs	r1, #4
 800f000:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800f004:	f7f3 f8a6 	bl	8002154 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BT_CMD_GPIO_Port, BT_CMD_Pin, GPIO_PIN_SET);
 800f008:	4638      	mov	r0, r7
 800f00a:	2201      	movs	r2, #1
 800f00c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f010:	f7f3 f8a0 	bl	8002154 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, VL_XSHUT_Pin|HALL_CNTRL_Pin|SD_CARD_EN_Pin, GPIO_PIN_RESET);
 800f014:	4622      	mov	r2, r4
 800f016:	4638      	mov	r0, r7
 800f018:	f248 01c0 	movw	r1, #32960	; 0x80c0
 800f01c:	f7f3 f89a 	bl	8002154 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800f020:	a907      	add	r1, sp, #28
 800f022:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = BUTTON_3_Pin|BUTTON_8_Pin;
 800f024:	230c      	movs	r3, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f026:	f04f 0b01 	mov.w	fp, #1
  GPIO_InitStruct.Pin = BUTTON_3_Pin|BUTTON_8_Pin;
 800f02a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800f02c:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f02e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800f030:	f7f2 ff74 	bl	8001f1c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800f034:	a907      	add	r1, sp, #28
 800f036:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = POWER_SWITCH_Pin|LED_SS_Pin|BT_EN_Pin;
 800f038:	f240 1311 	movw	r3, #273	; 0x111
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f03c:	2503      	movs	r5, #3
  GPIO_InitStruct.Pin = POWER_SWITCH_Pin|LED_SS_Pin|BT_EN_Pin;
 800f03e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f040:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f042:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f044:	f8cd b020 	str.w	fp, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800f048:	f7f2 ff68 	bl	8001f1c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800f04c:	4640      	mov	r0, r8
 800f04e:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10 
 800f050:	f64f 43e2 	movw	r3, #64738	; 0xfce2
 800f054:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f056:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f058:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800f05a:	f7f2 ff5f 	bl	8001f1c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f05e:	a907      	add	r1, sp, #28
 800f060:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = BUTTON_2_Pin|BUTTON_9_Pin;
 800f062:	f44f 5302 	mov.w	r3, #8320	; 0x2080
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800f066:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pin = BUTTON_2_Pin|BUTTON_9_Pin;
 800f068:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f06a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f06c:	f7f2 ff56 	bl	8001f1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = HALL_OUTPUT_Pin|GPIO_PIN_6;
 800f070:	2344      	movs	r3, #68	; 0x44
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f072:	4650      	mov	r0, sl
 800f074:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = HALL_OUTPUT_Pin|GPIO_PIN_6;
 800f076:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f078:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f07a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f07c:	f7f2 ff4e 	bl	8001f1c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f080:	a907      	add	r1, sp, #28
 800f082:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800f086:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pin = BUTTON_7_Pin|BUTTON_1_Pin;
 800f088:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f08a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f08c:	f7f2 ff46 	bl	8001f1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_LAT_Pin;
 800f090:	2204      	movs	r2, #4
  HAL_GPIO_Init(LED_LAT_GPIO_Port, &GPIO_InitStruct);
 800f092:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800f094:	2302      	movs	r3, #2
  HAL_GPIO_Init(LED_LAT_GPIO_Port, &GPIO_InitStruct);
 800f096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LED_LAT_Pin;
 800f09a:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800f09c:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f09e:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f0a2:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(LED_LAT_GPIO_Port, &GPIO_InitStruct);
 800f0a4:	f7f2 ff3a 	bl	8001f1c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f0a8:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11 
 800f0aa:	f641 03c8 	movw	r3, #6344	; 0x18c8
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f0ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11 
 800f0b2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f0b4:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f0b6:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f0b8:	f7f2 ff30 	bl	8001f1c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f0bc:	a907      	add	r1, sp, #28
 800f0be:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_14 
 800f0c0:	f24d 331b 	movw	r3, #54043	; 0xd31b
 800f0c4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f0c6:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f0c8:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f0ca:	f7f2 ff27 	bl	8001f1c <HAL_GPIO_Init>
                           PD3 PD4 PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1 
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f0ce:	a907      	add	r1, sp, #28
 800f0d0:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1 
 800f0d2:	f242 133b 	movw	r3, #8507	; 0x213b
 800f0d6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f0d8:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f0da:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f0dc:	f7f2 ff1e 	bl	8001f1c <HAL_GPIO_Init>
  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BT_CMD_Pin|VL_XSHUT_Pin|HALL_CNTRL_Pin|SD_CARD_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f0e0:	a907      	add	r1, sp, #28
 800f0e2:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = BT_CMD_Pin|VL_XSHUT_Pin|HALL_CNTRL_Pin|SD_CARD_EN_Pin;
 800f0e4:	f248 23c0 	movw	r3, #33472	; 0x82c0
 800f0e8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f0ea:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f0ee:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f0f0:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f0f2:	f7f2 ff13 	bl	8001f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BUTTON_6_Pin|BUTTON_10_Pin|BUTTON_5_Pin|BUTTON_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f0f6:	4638      	mov	r0, r7
 800f0f8:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = BUTTON_6_Pin|BUTTON_10_Pin|BUTTON_5_Pin|BUTTON_4_Pin;
 800f0fa:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800f0fe:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pin = BUTTON_6_Pin|BUTTON_10_Pin|BUTTON_5_Pin|BUTTON_4_Pin;
 800f100:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f102:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f104:	f7f2 ff0a 	bl	8001f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VL_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(VL_INT_GPIO_Port, &GPIO_InitStruct);
 800f108:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = VL_INT_Pin;
 800f10a:	f44f 7280 	mov.w	r2, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800f10e:	4b2e      	ldr	r3, [pc, #184]	; (800f1c8 <MX_GPIO_Init+0x268>)
  GPIO_InitStruct.Pin = VL_INT_Pin;
 800f110:	9207      	str	r2, [sp, #28]
  HAL_GPIO_Init(VL_INT_GPIO_Port, &GPIO_InitStruct);
 800f112:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800f116:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f118:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(VL_INT_GPIO_Port, &GPIO_InitStruct);
 800f11a:	f7f2 feff 	bl	8001f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HALL_INT_Pin;
 800f11e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(HALL_INT_GPIO_Port, &GPIO_InitStruct);
 800f122:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800f124:	4b29      	ldr	r3, [pc, #164]	; (800f1cc <MX_GPIO_Init+0x26c>)
  GPIO_InitStruct.Pin = HALL_INT_Pin;
 800f126:	9207      	str	r2, [sp, #28]
  HAL_GPIO_Init(HALL_INT_GPIO_Port, &GPIO_InitStruct);
 800f128:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800f12c:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f12e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(HALL_INT_GPIO_Port, &GPIO_InitStruct);
 800f130:	f7f2 fef4 	bl	8001f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAP_ALERT_Pin;
 800f134:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(CAP_ALERT_GPIO_Port, &GPIO_InitStruct);
 800f136:	4648      	mov	r0, r9
 800f138:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = CAP_ALERT_Pin;
 800f13a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800f13c:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f13e:	9409      	str	r4, [sp, #36]	; 0x24

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800f140:	2608      	movs	r6, #8
  HAL_GPIO_Init(CAP_ALERT_GPIO_Port, &GPIO_InitStruct);
 800f142:	f7f2 feeb 	bl	8001f1c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800f146:	a907      	add	r1, sp, #28
 800f148:	4821      	ldr	r0, [pc, #132]	; (800f1d0 <MX_GPIO_Init+0x270>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f14a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f14c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800f14e:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800f150:	f7f2 fee4 	bl	8001f1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800f154:	4622      	mov	r2, r4
 800f156:	2105      	movs	r1, #5
 800f158:	2006      	movs	r0, #6
 800f15a:	f7f2 fb49 	bl	80017f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800f15e:	2006      	movs	r0, #6
 800f160:	f7f2 fb7c 	bl	800185c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800f164:	4622      	mov	r2, r4
 800f166:	2105      	movs	r1, #5
 800f168:	2007      	movs	r0, #7
 800f16a:	f7f2 fb41 	bl	80017f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800f16e:	2007      	movs	r0, #7
 800f170:	f7f2 fb74 	bl	800185c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800f174:	4622      	mov	r2, r4
 800f176:	4630      	mov	r0, r6
 800f178:	2105      	movs	r1, #5
 800f17a:	f7f2 fb39 	bl	80017f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800f17e:	4630      	mov	r0, r6
 800f180:	f7f2 fb6c 	bl	800185c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800f184:	4622      	mov	r2, r4
 800f186:	2105      	movs	r1, #5
 800f188:	2009      	movs	r0, #9
 800f18a:	f7f2 fb31 	bl	80017f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800f18e:	2009      	movs	r0, #9
 800f190:	f7f2 fb64 	bl	800185c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800f194:	4622      	mov	r2, r4
 800f196:	2105      	movs	r1, #5
 800f198:	2017      	movs	r0, #23
 800f19a:	f7f2 fb29 	bl	80017f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800f19e:	2017      	movs	r0, #23
 800f1a0:	f7f2 fb5c 	bl	800185c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800f1a4:	4622      	mov	r2, r4
 800f1a6:	2105      	movs	r1, #5
 800f1a8:	2028      	movs	r0, #40	; 0x28
 800f1aa:	f7f2 fb21 	bl	80017f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800f1ae:	2028      	movs	r0, #40	; 0x28
 800f1b0:	f7f2 fb54 	bl	800185c <HAL_NVIC_EnableIRQ>

}
 800f1b4:	b00d      	add	sp, #52	; 0x34
 800f1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1ba:	bf00      	nop
 800f1bc:	40021000 	.word	0x40021000
 800f1c0:	48000c00 	.word	0x48000c00
 800f1c4:	10110000 	.word	0x10110000
 800f1c8:	10210000 	.word	0x10210000
 800f1cc:	10310000 	.word	0x10310000
 800f1d0:	48001c00 	.word	0x48001c00
 800f1d4:	48001000 	.word	0x48001000
 800f1d8:	48000800 	.word	0x48000800
 800f1dc:	48000400 	.word	0x48000400

0800f1e0 <HALL_Handler>:

void resetIntTracker(void){
	POV_intTracker = 0;
}

void HALL_Handler(void){
 800f1e0:	b510      	push	{r4, lr}
//	itoa(rounds, temp_buf2, 10);
//	HAL_UART_Transmit(&huart3, (uint8_t*) temp_buf2, sizeof(temp_buf2), 10);
//	char str[5] = "\n\r";
//	HAL_UART_Transmit(&huart3, (uint8_t*) str, sizeof(str), 10);

	if(countUp){
 800f1e2:	4921      	ldr	r1, [pc, #132]	; (800f268 <HALL_Handler+0x88>)
 800f1e4:	780b      	ldrb	r3, [r1, #0]
 800f1e6:	b1c3      	cbz	r3, 800f21a <HALL_Handler+0x3a>
		intTracker++;
 800f1e8:	4b20      	ldr	r3, [pc, #128]	; (800f26c <HALL_Handler+0x8c>)
 800f1ea:	781a      	ldrb	r2, [r3, #0]
 800f1ec:	3201      	adds	r2, #1
 800f1ee:	b2d2      	uxtb	r2, r2
 800f1f0:	701a      	strb	r2, [r3, #0]
	}
	else if(countDown){ //can remove this "if check" once confident code works properly
		intTracker--;
	}

	if(intTracker >= (ROTATION_STEPS-1)){
 800f1f2:	781a      	ldrb	r2, [r3, #0]
 800f1f4:	2a04      	cmp	r2, #4
 800f1f6:	d91b      	bls.n	800f230 <HALL_Handler+0x50>
		countDown 	= 1;
 800f1f8:	4a1d      	ldr	r2, [pc, #116]	; (800f270 <HALL_Handler+0x90>)
 800f1fa:	2001      	movs	r0, #1
		countUp 	= 0;
 800f1fc:	2300      	movs	r3, #0
		countDown 	= 1;
 800f1fe:	7010      	strb	r0, [r2, #0]
		countUp 	= 0;
 800f200:	700b      	strb	r3, [r1, #0]
	else if(intTracker == 0){
		countDown 	= 0;
		countUp 	= 1;
	}

	setWavetableAmplitude(&intTracker);
 800f202:	481a      	ldr	r0, [pc, #104]	; (800f26c <HALL_Handler+0x8c>)
 800f204:	f002 fa24 	bl	8011650 <setWavetableAmplitude>

	POV_intTracker++;
 800f208:	4a1a      	ldr	r2, [pc, #104]	; (800f274 <HALL_Handler+0x94>)
 800f20a:	7813      	ldrb	r3, [r2, #0]
 800f20c:	3301      	adds	r3, #1
 800f20e:	b2db      	uxtb	r3, r3
 800f210:	7013      	strb	r3, [r2, #0]
//	if(POV_intTracker == TICK_THRESH){
//		RPR = 2*(DWT->CYCCNT);
//		DWT->CYCCNT = 0; // reset the counter
//	}

	if(POV_intTracker == HALF_MAGNET_CNT){
 800f212:	7813      	ldrb	r3, [r2, #0]
 800f214:	2b03      	cmp	r3, #3
 800f216:	d017      	beq.n	800f248 <HALL_Handler+0x68>
 800f218:	bd10      	pop	{r4, pc}
	else if(countDown){ //can remove this "if check" once confident code works properly
 800f21a:	4b15      	ldr	r3, [pc, #84]	; (800f270 <HALL_Handler+0x90>)
 800f21c:	781b      	ldrb	r3, [r3, #0]
 800f21e:	b18b      	cbz	r3, 800f244 <HALL_Handler+0x64>
		intTracker--;
 800f220:	4b12      	ldr	r3, [pc, #72]	; (800f26c <HALL_Handler+0x8c>)
 800f222:	781a      	ldrb	r2, [r3, #0]
 800f224:	3a01      	subs	r2, #1
 800f226:	b2d2      	uxtb	r2, r2
 800f228:	701a      	strb	r2, [r3, #0]
	if(intTracker >= (ROTATION_STEPS-1)){
 800f22a:	781a      	ldrb	r2, [r3, #0]
 800f22c:	2a04      	cmp	r2, #4
 800f22e:	d8e3      	bhi.n	800f1f8 <HALL_Handler+0x18>
	else if(intTracker == 0){
 800f230:	781b      	ldrb	r3, [r3, #0]
 800f232:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f236:	2b00      	cmp	r3, #0
 800f238:	d1e3      	bne.n	800f202 <HALL_Handler+0x22>
		countDown 	= 0;
 800f23a:	480d      	ldr	r0, [pc, #52]	; (800f270 <HALL_Handler+0x90>)
		countUp 	= 1;
 800f23c:	2301      	movs	r3, #1
		countDown 	= 0;
 800f23e:	7002      	strb	r2, [r0, #0]
		countUp 	= 1;
 800f240:	700b      	strb	r3, [r1, #0]
 800f242:	e7de      	b.n	800f202 <HALL_Handler+0x22>
 800f244:	4b09      	ldr	r3, [pc, #36]	; (800f26c <HALL_Handler+0x8c>)
 800f246:	e7d4      	b.n	800f1f2 <HALL_Handler+0x12>
		RPR = (DWT->CYCCNT);
 800f248:	4c0b      	ldr	r4, [pc, #44]	; (800f278 <HALL_Handler+0x98>)
 800f24a:	4b0c      	ldr	r3, [pc, #48]	; (800f27c <HALL_Handler+0x9c>)
 800f24c:	6860      	ldr	r0, [r4, #4]
 800f24e:	2100      	movs	r1, #0
 800f250:	e9c3 0100 	strd	r0, r1, [r3]
		DWT->CYCCNT = 0; // reset the counter
 800f254:	2000      	movs	r0, #0

		POV_intTracker = 1;
 800f256:	2101      	movs	r1, #1
		DWT->CYCCNT = 0; // reset the counter
 800f258:	6060      	str	r0, [r4, #4]
		POV_intTracker = 1;
 800f25a:	7011      	strb	r1, [r2, #0]
		POV_handler(RPR);
 800f25c:	e9d3 0100 	ldrd	r0, r1, [r3]
	}
}
 800f260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		POV_handler(RPR);
 800f264:	f000 bcd0 	b.w	800fc08 <POV_handler>
 800f268:	20000031 	.word	0x20000031
 800f26c:	200050a1 	.word	0x200050a1
 800f270:	200050a0 	.word	0x200050a0
 800f274:	20005090 	.word	0x20005090
 800f278:	e0001000 	.word	0xe0001000
 800f27c:	20005098 	.word	0x20005098

0800f280 <MX_I2C1_Init>:

/* I2C1 init function */
void MX_I2C1_Init(void)
{

  hi2c1.Instance = I2C1;
 800f280:	4b13      	ldr	r3, [pc, #76]	; (800f2d0 <MX_I2C1_Init+0x50>)
 800f282:	4a14      	ldr	r2, [pc, #80]	; (800f2d4 <MX_I2C1_Init+0x54>)
{
 800f284:	b510      	push	{r4, lr}
  hi2c1.Init.Timing = 0x10909CEC;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800f286:	2101      	movs	r1, #1
  hi2c1.Init.Timing = 0x10909CEC;
 800f288:	4c13      	ldr	r4, [pc, #76]	; (800f2d8 <MX_I2C1_Init+0x58>)
  hi2c1.Instance = I2C1;
 800f28a:	601a      	str	r2, [r3, #0]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800f28c:	4618      	mov	r0, r3
  hi2c1.Init.OwnAddress1 = 0;
 800f28e:	2200      	movs	r2, #0
  hi2c1.Init.Timing = 0x10909CEC;
 800f290:	605c      	str	r4, [r3, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800f292:	60d9      	str	r1, [r3, #12]
  hi2c1.Init.OwnAddress1 = 0;
 800f294:	609a      	str	r2, [r3, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800f296:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800f298:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800f29a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800f29c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800f29e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800f2a0:	f7f3 f896 	bl	80023d0 <HAL_I2C_Init>
 800f2a4:	b988      	cbnz	r0, 800f2ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800f2a6:	2100      	movs	r1, #0
 800f2a8:	4809      	ldr	r0, [pc, #36]	; (800f2d0 <MX_I2C1_Init+0x50>)
 800f2aa:	f7f4 fccb 	bl	8003c44 <HAL_I2CEx_ConfigAnalogFilter>
 800f2ae:	b948      	cbnz	r0, 800f2c4 <MX_I2C1_Init+0x44>
  {
    Error_Handler();
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800f2b0:	2100      	movs	r1, #0
 800f2b2:	4807      	ldr	r0, [pc, #28]	; (800f2d0 <MX_I2C1_Init+0x50>)
 800f2b4:	f7f4 fcf0 	bl	8003c98 <HAL_I2CEx_ConfigDigitalFilter>
 800f2b8:	b900      	cbnz	r0, 800f2bc <MX_I2C1_Init+0x3c>
 800f2ba:	bd10      	pop	{r4, pc}
  {
    Error_Handler();
  }

}
 800f2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800f2c0:	f001 b8aa 	b.w	8010418 <Error_Handler>
    Error_Handler();
 800f2c4:	f001 f8a8 	bl	8010418 <Error_Handler>
 800f2c8:	e7f2      	b.n	800f2b0 <MX_I2C1_Init+0x30>
    Error_Handler();
 800f2ca:	f001 f8a5 	bl	8010418 <Error_Handler>
 800f2ce:	e7ea      	b.n	800f2a6 <MX_I2C1_Init+0x26>
 800f2d0:	20005534 	.word	0x20005534
 800f2d4:	40005400 	.word	0x40005400
 800f2d8:	10909cec 	.word	0x10909cec

0800f2dc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{

  hi2c2.Instance = I2C2;
 800f2dc:	4b13      	ldr	r3, [pc, #76]	; (800f32c <MX_I2C2_Init+0x50>)
 800f2de:	4a14      	ldr	r2, [pc, #80]	; (800f330 <MX_I2C2_Init+0x54>)
{
 800f2e0:	b510      	push	{r4, lr}
  hi2c2.Init.Timing = 0x00702991;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800f2e2:	2101      	movs	r1, #1
  hi2c2.Init.Timing = 0x00702991;
 800f2e4:	4c13      	ldr	r4, [pc, #76]	; (800f334 <MX_I2C2_Init+0x58>)
  hi2c2.Instance = I2C2;
 800f2e6:	601a      	str	r2, [r3, #0]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800f2e8:	4618      	mov	r0, r3
  hi2c2.Init.OwnAddress1 = 0;
 800f2ea:	2200      	movs	r2, #0
  hi2c2.Init.Timing = 0x00702991;
 800f2ec:	605c      	str	r4, [r3, #4]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800f2ee:	60d9      	str	r1, [r3, #12]
  hi2c2.Init.OwnAddress1 = 0;
 800f2f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800f2f2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800f2f4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800f2f6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800f2f8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800f2fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800f2fc:	f7f3 f868 	bl	80023d0 <HAL_I2C_Init>
 800f300:	b988      	cbnz	r0, 800f326 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800f302:	2100      	movs	r1, #0
 800f304:	4809      	ldr	r0, [pc, #36]	; (800f32c <MX_I2C2_Init+0x50>)
 800f306:	f7f4 fc9d 	bl	8003c44 <HAL_I2CEx_ConfigAnalogFilter>
 800f30a:	b948      	cbnz	r0, 800f320 <MX_I2C2_Init+0x44>
  {
    Error_Handler();
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800f30c:	2100      	movs	r1, #0
 800f30e:	4807      	ldr	r0, [pc, #28]	; (800f32c <MX_I2C2_Init+0x50>)
 800f310:	f7f4 fcc2 	bl	8003c98 <HAL_I2CEx_ConfigDigitalFilter>
 800f314:	b900      	cbnz	r0, 800f318 <MX_I2C2_Init+0x3c>
 800f316:	bd10      	pop	{r4, pc}
  {
    Error_Handler();
  }

}
 800f318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800f31c:	f001 b87c 	b.w	8010418 <Error_Handler>
    Error_Handler();
 800f320:	f001 f87a 	bl	8010418 <Error_Handler>
 800f324:	e7f2      	b.n	800f30c <MX_I2C2_Init+0x30>
    Error_Handler();
 800f326:	f001 f877 	bl	8010418 <Error_Handler>
 800f32a:	e7ea      	b.n	800f302 <MX_I2C2_Init+0x26>
 800f32c:	20005580 	.word	0x20005580
 800f330:	40005800 	.word	0x40005800
 800f334:	00702991 	.word	0x00702991

0800f338 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{

  hi2c3.Instance = I2C3;
 800f338:	4b13      	ldr	r3, [pc, #76]	; (800f388 <MX_I2C3_Init+0x50>)
 800f33a:	4a14      	ldr	r2, [pc, #80]	; (800f38c <MX_I2C3_Init+0x54>)
{
 800f33c:	b510      	push	{r4, lr}
  hi2c3.Init.Timing = 0x00702991;
  hi2c3.Init.OwnAddress1 = 0;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800f33e:	2101      	movs	r1, #1
  hi2c3.Init.Timing = 0x00702991;
 800f340:	4c13      	ldr	r4, [pc, #76]	; (800f390 <MX_I2C3_Init+0x58>)
  hi2c3.Instance = I2C3;
 800f342:	601a      	str	r2, [r3, #0]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c3.Init.OwnAddress2 = 0;
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800f344:	4618      	mov	r0, r3
  hi2c3.Init.OwnAddress1 = 0;
 800f346:	2200      	movs	r2, #0
  hi2c3.Init.Timing = 0x00702991;
 800f348:	605c      	str	r4, [r3, #4]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800f34a:	60d9      	str	r1, [r3, #12]
  hi2c3.Init.OwnAddress1 = 0;
 800f34c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800f34e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800f350:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800f352:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800f354:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800f356:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800f358:	f7f3 f83a 	bl	80023d0 <HAL_I2C_Init>
 800f35c:	b988      	cbnz	r0, 800f382 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800f35e:	2100      	movs	r1, #0
 800f360:	4809      	ldr	r0, [pc, #36]	; (800f388 <MX_I2C3_Init+0x50>)
 800f362:	f7f4 fc6f 	bl	8003c44 <HAL_I2CEx_ConfigAnalogFilter>
 800f366:	b948      	cbnz	r0, 800f37c <MX_I2C3_Init+0x44>
  {
    Error_Handler();
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800f368:	2100      	movs	r1, #0
 800f36a:	4807      	ldr	r0, [pc, #28]	; (800f388 <MX_I2C3_Init+0x50>)
 800f36c:	f7f4 fc94 	bl	8003c98 <HAL_I2CEx_ConfigDigitalFilter>
 800f370:	b900      	cbnz	r0, 800f374 <MX_I2C3_Init+0x3c>
 800f372:	bd10      	pop	{r4, pc}
  {
    Error_Handler();
  }

}
 800f374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800f378:	f001 b84e 	b.w	8010418 <Error_Handler>
    Error_Handler();
 800f37c:	f001 f84c 	bl	8010418 <Error_Handler>
 800f380:	e7f2      	b.n	800f368 <MX_I2C3_Init+0x30>
    Error_Handler();
 800f382:	f001 f849 	bl	8010418 <Error_Handler>
 800f386:	e7ea      	b.n	800f35e <MX_I2C3_Init+0x26>
 800f388:	200054e8 	.word	0x200054e8
 800f38c:	40005c00 	.word	0x40005c00
 800f390:	00702991 	.word	0x00702991

0800f394 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800f394:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C1)
 800f396:	6803      	ldr	r3, [r0, #0]
 800f398:	4a49      	ldr	r2, [pc, #292]	; (800f4c0 <HAL_I2C_MspInit+0x12c>)
{
 800f39a:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f39c:	2400      	movs	r4, #0
  if(i2cHandle->Instance==I2C1)
 800f39e:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f3a0:	9408      	str	r4, [sp, #32]
 800f3a2:	9407      	str	r4, [sp, #28]
 800f3a4:	9409      	str	r4, [sp, #36]	; 0x24
 800f3a6:	940a      	str	r4, [sp, #40]	; 0x28
 800f3a8:	940b      	str	r4, [sp, #44]	; 0x2c
  if(i2cHandle->Instance==I2C1)
 800f3aa:	d031      	beq.n	800f410 <HAL_I2C_MspInit+0x7c>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
 800f3ac:	4a45      	ldr	r2, [pc, #276]	; (800f4c4 <HAL_I2C_MspInit+0x130>)
 800f3ae:	4293      	cmp	r3, r2
 800f3b0:	d059      	beq.n	800f466 <HAL_I2C_MspInit+0xd2>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C3)
 800f3b2:	4a45      	ldr	r2, [pc, #276]	; (800f4c8 <HAL_I2C_MspInit+0x134>)
 800f3b4:	4293      	cmp	r3, r2
 800f3b6:	d001      	beq.n	800f3bc <HAL_I2C_MspInit+0x28>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800f3b8:	b00d      	add	sp, #52	; 0x34
 800f3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f3bc:	4d43      	ldr	r5, [pc, #268]	; (800f4cc <HAL_I2C_MspInit+0x138>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f3be:	4844      	ldr	r0, [pc, #272]	; (800f4d0 <HAL_I2C_MspInit+0x13c>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f3c0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800f3c2:	f043 0304 	orr.w	r3, r3, #4
 800f3c6:	64eb      	str	r3, [r5, #76]	; 0x4c
 800f3c8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800f3ca:	f003 0304 	and.w	r3, r3, #4
 800f3ce:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f3d0:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800f3d2:	2303      	movs	r3, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800f3d4:	2204      	movs	r2, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800f3d6:	2712      	movs	r7, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f3d8:	2601      	movs	r6, #1
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f3da:	f8dd e014 	ldr.w	lr, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800f3de:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f3e0:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800f3e2:	920b      	str	r2, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800f3e4:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f3e6:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f3e8:	f7f2 fd98 	bl	8001f1c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800f3ec:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800f3ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f3f2:	65ab      	str	r3, [r5, #88]	; 0x58
 800f3f4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800f3f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f3fa:	9306      	str	r3, [sp, #24]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 800f3fc:	4622      	mov	r2, r4
 800f3fe:	2105      	movs	r1, #5
 800f400:	2048      	movs	r0, #72	; 0x48
    __HAL_RCC_I2C3_CLK_ENABLE();
 800f402:	9b06      	ldr	r3, [sp, #24]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 800f404:	f7f2 f9f4 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800f408:	2048      	movs	r0, #72	; 0x48
 800f40a:	f7f2 fa27 	bl	800185c <HAL_NVIC_EnableIRQ>
}
 800f40e:	e7d3      	b.n	800f3b8 <HAL_I2C_MspInit+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f410:	4d2e      	ldr	r5, [pc, #184]	; (800f4cc <HAL_I2C_MspInit+0x138>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f412:	4830      	ldr	r0, [pc, #192]	; (800f4d4 <HAL_I2C_MspInit+0x140>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f414:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800f416:	f043 0302 	orr.w	r3, r3, #2
 800f41a:	64eb      	str	r3, [r5, #76]	; 0x4c
 800f41c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800f41e:	f003 0302 	and.w	r3, r3, #2
 800f422:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800f424:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f426:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f428:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800f42a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800f42c:	2712      	movs	r7, #18
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800f42e:	2304      	movs	r3, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f430:	2601      	movs	r6, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f432:	f8dd e004 	ldr.w	lr, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f436:	920a      	str	r2, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800f438:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800f43a:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f43c:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f43e:	f7f2 fd6d 	bl	8001f1c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800f442:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800f444:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f448:	65ab      	str	r3, [r5, #88]	; 0x58
 800f44a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800f44c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f450:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800f452:	4622      	mov	r2, r4
 800f454:	2105      	movs	r1, #5
 800f456:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 800f458:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800f45a:	f7f2 f9c9 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800f45e:	201f      	movs	r0, #31
 800f460:	f7f2 f9fc 	bl	800185c <HAL_NVIC_EnableIRQ>
 800f464:	e7a8      	b.n	800f3b8 <HAL_I2C_MspInit+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f466:	4d19      	ldr	r5, [pc, #100]	; (800f4cc <HAL_I2C_MspInit+0x138>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f468:	481a      	ldr	r0, [pc, #104]	; (800f4d4 <HAL_I2C_MspInit+0x140>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f46a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800f46c:	f043 0302 	orr.w	r3, r3, #2
 800f470:	64eb      	str	r3, [r5, #76]	; 0x4c
 800f472:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800f474:	f003 0302 	and.w	r3, r3, #2
 800f478:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800f47a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f47e:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f480:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800f482:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800f484:	2712      	movs	r7, #18
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800f486:	2304      	movs	r3, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f488:	2601      	movs	r6, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f48a:	f8dd e00c 	ldr.w	lr, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f48e:	920a      	str	r2, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800f490:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800f492:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f494:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f496:	f7f2 fd41 	bl	8001f1c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800f49a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800f49c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f4a0:	65ab      	str	r3, [r5, #88]	; 0x58
 800f4a2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800f4a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f4a8:	9304      	str	r3, [sp, #16]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 800f4aa:	4622      	mov	r2, r4
 800f4ac:	2105      	movs	r1, #5
 800f4ae:	2021      	movs	r0, #33	; 0x21
    __HAL_RCC_I2C2_CLK_ENABLE();
 800f4b0:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 800f4b2:	f7f2 f99d 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800f4b6:	2021      	movs	r0, #33	; 0x21
 800f4b8:	f7f2 f9d0 	bl	800185c <HAL_NVIC_EnableIRQ>
 800f4bc:	e77c      	b.n	800f3b8 <HAL_I2C_MspInit+0x24>
 800f4be:	bf00      	nop
 800f4c0:	40005400 	.word	0x40005400
 800f4c4:	40005800 	.word	0x40005800
 800f4c8:	40005c00 	.word	0x40005c00
 800f4cc:	40021000 	.word	0x40021000
 800f4d0:	48000800 	.word	0x48000800
 800f4d4:	48000400 	.word	0x48000400

0800f4d8 <runPOV_step>:
}

void runPOV_step(uint8_t* red, uint8_t* green, uint8_t step) {
  memset(LED_SETTINGS, 255, sizeof LED_SETTINGS);

  if (global_visNum == 1) {
 800f4d8:	4acf      	ldr	r2, [pc, #828]	; (800f818 <runPOV_step+0x340>)
  memset(LED_SETTINGS, 255, sizeof LED_SETTINGS);
 800f4da:	4bd0      	ldr	r3, [pc, #832]	; (800f81c <runPOV_step+0x344>)
void runPOV_step(uint8_t* red, uint8_t* green, uint8_t step) {
 800f4dc:	b410      	push	{r4}
  if (global_visNum == 1) {
 800f4de:	8814      	ldrh	r4, [r2, #0]
  memset(LED_SETTINGS, 255, sizeof LED_SETTINGS);
 800f4e0:	f04f 32ff 	mov.w	r2, #4294967295
  if (global_visNum == 1) {
 800f4e4:	2c01      	cmp	r4, #1
  memset(LED_SETTINGS, 255, sizeof LED_SETTINGS);
 800f4e6:	601a      	str	r2, [r3, #0]
 800f4e8:	809a      	strh	r2, [r3, #4]
  if (global_visNum == 1) {
 800f4ea:	f000 8095 	beq.w	800f618 <runPOV_step+0x140>
      POV_right(red, 1);
    } else {
      POV_left(red, 1);
      POV_right(green, 0);
    }
  } else if (global_visNum == 2) {
 800f4ee:	2c02      	cmp	r4, #2
 800f4f0:	d002      	beq.n	800f4f8 <runPOV_step+0x20>
      POV_left(red + 15 * MESSAGE_WIDTH, 1);
      POV_right(green, 0);
      POV_right(red, 1);
    }
  }
}
 800f4f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f4f6:	4770      	bx	lr
    if ((timerPOVstate % 2) == 1) {
 800f4f8:	4ac9      	ldr	r2, [pc, #804]	; (800f820 <runPOV_step+0x348>)
 800f4fa:	6812      	ldr	r2, [r2, #0]
 800f4fc:	07d2      	lsls	r2, r2, #31
 800f4fe:	f100 80ec 	bmi.w	800f6da <runPOV_step+0x202>
    if (colorMap[0] == 1) {
 800f502:	f891 2069 	ldrb.w	r2, [r1, #105]	; 0x69
 800f506:	2a01      	cmp	r2, #1
 800f508:	f000 81e1 	beq.w	800f8ce <runPOV_step+0x3f6>
    if (colorMap[1] == 1) {
 800f50c:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
 800f510:	2a01      	cmp	r2, #1
 800f512:	f000 81d7 	beq.w	800f8c4 <runPOV_step+0x3ec>
    if (colorMap[2] == 1) {
 800f516:	f891 206b 	ldrb.w	r2, [r1, #107]	; 0x6b
 800f51a:	2a01      	cmp	r2, #1
 800f51c:	f000 81cd 	beq.w	800f8ba <runPOV_step+0x3e2>
    if (colorMap[3] == 1) {
 800f520:	f891 206c 	ldrb.w	r2, [r1, #108]	; 0x6c
 800f524:	2a01      	cmp	r2, #1
 800f526:	f000 81c3 	beq.w	800f8b0 <runPOV_step+0x3d8>
    if (colorMap[4] == 1) {
 800f52a:	f891 206d 	ldrb.w	r2, [r1, #109]	; 0x6d
 800f52e:	2a01      	cmp	r2, #1
 800f530:	f000 81b9 	beq.w	800f8a6 <runPOV_step+0x3ce>
    if (colorMap[5] == 1) {
 800f534:	f891 206e 	ldrb.w	r2, [r1, #110]	; 0x6e
 800f538:	2a01      	cmp	r2, #1
 800f53a:	f000 81af 	beq.w	800f89c <runPOV_step+0x3c4>
    if (colorMap[6] == 1) {
 800f53e:	f891 206f 	ldrb.w	r2, [r1, #111]	; 0x6f
 800f542:	2a01      	cmp	r2, #1
 800f544:	d103      	bne.n	800f54e <runPOV_step+0x76>
      LED_SETTINGS[POV_1_G_REG] &= ~POV_1_G_PIN;
 800f546:	795a      	ldrb	r2, [r3, #5]
 800f548:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f54c:	715a      	strb	r2, [r3, #5]
    if (colorMap[0] == 1) {
 800f54e:	f890 2069 	ldrb.w	r2, [r0, #105]	; 0x69
 800f552:	2a01      	cmp	r2, #1
 800f554:	f000 819d 	beq.w	800f892 <runPOV_step+0x3ba>
    if (colorMap[1] == 1) {
 800f558:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
 800f55c:	2a01      	cmp	r2, #1
 800f55e:	f000 8193 	beq.w	800f888 <runPOV_step+0x3b0>
    if (colorMap[2] == 1) {
 800f562:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
 800f566:	2a01      	cmp	r2, #1
 800f568:	f000 8189 	beq.w	800f87e <runPOV_step+0x3a6>
    if (colorMap[3] == 1) {
 800f56c:	f890 206c 	ldrb.w	r2, [r0, #108]	; 0x6c
 800f570:	2a01      	cmp	r2, #1
 800f572:	f000 817f 	beq.w	800f874 <runPOV_step+0x39c>
    if (colorMap[4] == 1) {
 800f576:	f890 206d 	ldrb.w	r2, [r0, #109]	; 0x6d
 800f57a:	2a01      	cmp	r2, #1
 800f57c:	f000 8175 	beq.w	800f86a <runPOV_step+0x392>
    if (colorMap[5] == 1) {
 800f580:	f890 206e 	ldrb.w	r2, [r0, #110]	; 0x6e
 800f584:	2a01      	cmp	r2, #1
 800f586:	f000 816b 	beq.w	800f860 <runPOV_step+0x388>
    if (colorMap[6] == 1) {
 800f58a:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
 800f58e:	2a01      	cmp	r2, #1
 800f590:	f000 8161 	beq.w	800f856 <runPOV_step+0x37e>
    if (colorMap[0] == 1) {
 800f594:	780a      	ldrb	r2, [r1, #0]
 800f596:	2a01      	cmp	r2, #1
 800f598:	f000 8158 	beq.w	800f84c <runPOV_step+0x374>
    if (colorMap[1] == 1) {
 800f59c:	784a      	ldrb	r2, [r1, #1]
 800f59e:	2a01      	cmp	r2, #1
 800f5a0:	f000 814f 	beq.w	800f842 <runPOV_step+0x36a>
    if (colorMap[2] == 1) {
 800f5a4:	788a      	ldrb	r2, [r1, #2]
 800f5a6:	2a01      	cmp	r2, #1
 800f5a8:	f000 8146 	beq.w	800f838 <runPOV_step+0x360>
    if (colorMap[3] == 1) {
 800f5ac:	78ca      	ldrb	r2, [r1, #3]
 800f5ae:	2a01      	cmp	r2, #1
 800f5b0:	f000 8197 	beq.w	800f8e2 <runPOV_step+0x40a>
    if (colorMap[4] == 1) {
 800f5b4:	790a      	ldrb	r2, [r1, #4]
 800f5b6:	2a01      	cmp	r2, #1
 800f5b8:	f000 818e 	beq.w	800f8d8 <runPOV_step+0x400>
    if (colorMap[5] == 1) {
 800f5bc:	794a      	ldrb	r2, [r1, #5]
 800f5be:	2a01      	cmp	r2, #1
 800f5c0:	f000 8135 	beq.w	800f82e <runPOV_step+0x356>
    if (colorMap[6] == 1) {
 800f5c4:	798a      	ldrb	r2, [r1, #6]
 800f5c6:	2a01      	cmp	r2, #1
 800f5c8:	d103      	bne.n	800f5d2 <runPOV_step+0xfa>
      LED_SETTINGS[POV_8_G_REG] &= ~POV_8_G_PIN;
 800f5ca:	781a      	ldrb	r2, [r3, #0]
 800f5cc:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800f5d0:	701a      	strb	r2, [r3, #0]
    if (colorMap[0] == 1) {
 800f5d2:	7802      	ldrb	r2, [r0, #0]
 800f5d4:	2a01      	cmp	r2, #1
 800f5d6:	f000 8125 	beq.w	800f824 <runPOV_step+0x34c>
    if (colorMap[1] == 1) {
 800f5da:	7842      	ldrb	r2, [r0, #1]
 800f5dc:	2a01      	cmp	r2, #1
 800f5de:	f000 8115 	beq.w	800f80c <runPOV_step+0x334>
    if (colorMap[2] == 1) {
 800f5e2:	7882      	ldrb	r2, [r0, #2]
 800f5e4:	2a01      	cmp	r2, #1
 800f5e6:	f000 810c 	beq.w	800f802 <runPOV_step+0x32a>
    if (colorMap[3] == 1) {
 800f5ea:	78c2      	ldrb	r2, [r0, #3]
 800f5ec:	2a01      	cmp	r2, #1
 800f5ee:	f000 8103 	beq.w	800f7f8 <runPOV_step+0x320>
    if (colorMap[4] == 1) {
 800f5f2:	7902      	ldrb	r2, [r0, #4]
 800f5f4:	2a01      	cmp	r2, #1
 800f5f6:	f000 80fa 	beq.w	800f7ee <runPOV_step+0x316>
    if (colorMap[5] == 1) {
 800f5fa:	7942      	ldrb	r2, [r0, #5]
 800f5fc:	2a01      	cmp	r2, #1
 800f5fe:	f000 80f1 	beq.w	800f7e4 <runPOV_step+0x30c>
    if (colorMap[6] == 1) {
 800f602:	7982      	ldrb	r2, [r0, #6]
 800f604:	2a01      	cmp	r2, #1
 800f606:	f47f af74 	bne.w	800f4f2 <runPOV_step+0x1a>
      LED_SETTINGS[POV_8_R_REG] &= ~POV_8_R_PIN;
 800f60a:	781a      	ldrb	r2, [r3, #0]
 800f60c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800f610:	701a      	strb	r2, [r3, #0]
}
 800f612:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f616:	4770      	bx	lr
    if ((timerPOVstate % 2) == 1) {
 800f618:	4a81      	ldr	r2, [pc, #516]	; (800f820 <runPOV_step+0x348>)
 800f61a:	6812      	ldr	r2, [r2, #0]
 800f61c:	07d4      	lsls	r4, r2, #31
 800f61e:	d43c      	bmi.n	800f69a <runPOV_step+0x1c2>
    if (colorMap[0] == 1) {
 800f620:	7802      	ldrb	r2, [r0, #0]
 800f622:	2a01      	cmp	r2, #1
 800f624:	f000 8176 	beq.w	800f914 <runPOV_step+0x43c>
    if (colorMap[1] == 1) {
 800f628:	7842      	ldrb	r2, [r0, #1]
 800f62a:	2a01      	cmp	r2, #1
 800f62c:	f000 816d 	beq.w	800f90a <runPOV_step+0x432>
    if (colorMap[2] == 1) {
 800f630:	7882      	ldrb	r2, [r0, #2]
 800f632:	2a01      	cmp	r2, #1
 800f634:	f000 8164 	beq.w	800f900 <runPOV_step+0x428>
    if (colorMap[3] == 1) {
 800f638:	78c2      	ldrb	r2, [r0, #3]
 800f63a:	2a01      	cmp	r2, #1
 800f63c:	f000 815b 	beq.w	800f8f6 <runPOV_step+0x41e>
    if (colorMap[4] == 1) {
 800f640:	7902      	ldrb	r2, [r0, #4]
 800f642:	2a01      	cmp	r2, #1
 800f644:	f000 8152 	beq.w	800f8ec <runPOV_step+0x414>
    if (colorMap[5] == 1) {
 800f648:	7942      	ldrb	r2, [r0, #5]
 800f64a:	2a01      	cmp	r2, #1
 800f64c:	f000 818a 	beq.w	800f964 <runPOV_step+0x48c>
    if (colorMap[6] == 1) {
 800f650:	7982      	ldrb	r2, [r0, #6]
 800f652:	2a01      	cmp	r2, #1
 800f654:	f000 8181 	beq.w	800f95a <runPOV_step+0x482>
    if (colorMap[0] == 1) {
 800f658:	780a      	ldrb	r2, [r1, #0]
 800f65a:	2a01      	cmp	r2, #1
 800f65c:	f000 8178 	beq.w	800f950 <runPOV_step+0x478>
    if (colorMap[1] == 1) {
 800f660:	784a      	ldrb	r2, [r1, #1]
 800f662:	2a01      	cmp	r2, #1
 800f664:	f000 816f 	beq.w	800f946 <runPOV_step+0x46e>
    if (colorMap[2] == 1) {
 800f668:	788a      	ldrb	r2, [r1, #2]
 800f66a:	2a01      	cmp	r2, #1
 800f66c:	f000 8166 	beq.w	800f93c <runPOV_step+0x464>
    if (colorMap[3] == 1) {
 800f670:	78ca      	ldrb	r2, [r1, #3]
 800f672:	2a01      	cmp	r2, #1
 800f674:	f000 815d 	beq.w	800f932 <runPOV_step+0x45a>
    if (colorMap[4] == 1) {
 800f678:	790a      	ldrb	r2, [r1, #4]
 800f67a:	2a01      	cmp	r2, #1
 800f67c:	f000 8154 	beq.w	800f928 <runPOV_step+0x450>
    if (colorMap[5] == 1) {
 800f680:	794a      	ldrb	r2, [r1, #5]
 800f682:	2a01      	cmp	r2, #1
 800f684:	f000 814b 	beq.w	800f91e <runPOV_step+0x446>
    if (colorMap[6] == 1) {
 800f688:	798a      	ldrb	r2, [r1, #6]
 800f68a:	2a01      	cmp	r2, #1
 800f68c:	f47f af31 	bne.w	800f4f2 <runPOV_step+0x1a>
      LED_SETTINGS[POV_8_G_REG] &= ~POV_8_G_PIN;
 800f690:	781a      	ldrb	r2, [r3, #0]
 800f692:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800f696:	701a      	strb	r2, [r3, #0]
 800f698:	e72b      	b.n	800f4f2 <runPOV_step+0x1a>
    if (colorMap[0] == 1) {
 800f69a:	780a      	ldrb	r2, [r1, #0]
 800f69c:	2a01      	cmp	r2, #1
 800f69e:	f000 817f 	beq.w	800f9a0 <runPOV_step+0x4c8>
    if (colorMap[1] == 1) {
 800f6a2:	784a      	ldrb	r2, [r1, #1]
 800f6a4:	2a01      	cmp	r2, #1
 800f6a6:	f000 8176 	beq.w	800f996 <runPOV_step+0x4be>
    if (colorMap[2] == 1) {
 800f6aa:	788a      	ldrb	r2, [r1, #2]
 800f6ac:	2a01      	cmp	r2, #1
 800f6ae:	f000 816d 	beq.w	800f98c <runPOV_step+0x4b4>
    if (colorMap[3] == 1) {
 800f6b2:	78ca      	ldrb	r2, [r1, #3]
 800f6b4:	2a01      	cmp	r2, #1
 800f6b6:	f000 8164 	beq.w	800f982 <runPOV_step+0x4aa>
    if (colorMap[4] == 1) {
 800f6ba:	790a      	ldrb	r2, [r1, #4]
 800f6bc:	2a01      	cmp	r2, #1
 800f6be:	f000 815b 	beq.w	800f978 <runPOV_step+0x4a0>
    if (colorMap[5] == 1) {
 800f6c2:	794a      	ldrb	r2, [r1, #5]
 800f6c4:	2a01      	cmp	r2, #1
 800f6c6:	f000 8152 	beq.w	800f96e <runPOV_step+0x496>
    if (colorMap[6] == 1) {
 800f6ca:	798a      	ldrb	r2, [r1, #6]
 800f6cc:	2a01      	cmp	r2, #1
 800f6ce:	d180      	bne.n	800f5d2 <runPOV_step+0xfa>
      LED_SETTINGS[POV_1_G_REG] &= ~POV_1_G_PIN;
 800f6d0:	795a      	ldrb	r2, [r3, #5]
 800f6d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f6d6:	715a      	strb	r2, [r3, #5]
 800f6d8:	e77b      	b.n	800f5d2 <runPOV_step+0xfa>
    if (colorMap[0] == 1) {
 800f6da:	780a      	ldrb	r2, [r1, #0]
 800f6dc:	2a01      	cmp	r2, #1
 800f6de:	f000 81b4 	beq.w	800fa4a <runPOV_step+0x572>
    if (colorMap[1] == 1) {
 800f6e2:	784a      	ldrb	r2, [r1, #1]
 800f6e4:	2a01      	cmp	r2, #1
 800f6e6:	f000 81ab 	beq.w	800fa40 <runPOV_step+0x568>
    if (colorMap[2] == 1) {
 800f6ea:	788a      	ldrb	r2, [r1, #2]
 800f6ec:	2a01      	cmp	r2, #1
 800f6ee:	f000 81d4 	beq.w	800fa9a <runPOV_step+0x5c2>
    if (colorMap[3] == 1) {
 800f6f2:	78ca      	ldrb	r2, [r1, #3]
 800f6f4:	2a01      	cmp	r2, #1
 800f6f6:	f000 81cb 	beq.w	800fa90 <runPOV_step+0x5b8>
    if (colorMap[4] == 1) {
 800f6fa:	790a      	ldrb	r2, [r1, #4]
 800f6fc:	2a01      	cmp	r2, #1
 800f6fe:	f000 81c2 	beq.w	800fa86 <runPOV_step+0x5ae>
    if (colorMap[5] == 1) {
 800f702:	794a      	ldrb	r2, [r1, #5]
 800f704:	2a01      	cmp	r2, #1
 800f706:	f000 81b9 	beq.w	800fa7c <runPOV_step+0x5a4>
    if (colorMap[6] == 1) {
 800f70a:	798a      	ldrb	r2, [r1, #6]
 800f70c:	2a01      	cmp	r2, #1
 800f70e:	d103      	bne.n	800f718 <runPOV_step+0x240>
      LED_SETTINGS[POV_1_G_REG] &= ~POV_1_G_PIN;
 800f710:	795a      	ldrb	r2, [r3, #5]
 800f712:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f716:	715a      	strb	r2, [r3, #5]
    if (colorMap[0] == 1) {
 800f718:	7802      	ldrb	r2, [r0, #0]
 800f71a:	2a01      	cmp	r2, #1
 800f71c:	f000 81a9 	beq.w	800fa72 <runPOV_step+0x59a>
    if (colorMap[1] == 1) {
 800f720:	7842      	ldrb	r2, [r0, #1]
 800f722:	2a01      	cmp	r2, #1
 800f724:	f000 81a0 	beq.w	800fa68 <runPOV_step+0x590>
    if (colorMap[2] == 1) {
 800f728:	7882      	ldrb	r2, [r0, #2]
 800f72a:	2a01      	cmp	r2, #1
 800f72c:	f000 8197 	beq.w	800fa5e <runPOV_step+0x586>
    if (colorMap[3] == 1) {
 800f730:	78c2      	ldrb	r2, [r0, #3]
 800f732:	2a01      	cmp	r2, #1
 800f734:	f000 818e 	beq.w	800fa54 <runPOV_step+0x57c>
    if (colorMap[4] == 1) {
 800f738:	7902      	ldrb	r2, [r0, #4]
 800f73a:	2a01      	cmp	r2, #1
 800f73c:	f000 815d 	beq.w	800f9fa <runPOV_step+0x522>
    if (colorMap[5] == 1) {
 800f740:	7942      	ldrb	r2, [r0, #5]
 800f742:	2a01      	cmp	r2, #1
 800f744:	f000 8154 	beq.w	800f9f0 <runPOV_step+0x518>
    if (colorMap[6] == 1) {
 800f748:	7982      	ldrb	r2, [r0, #6]
 800f74a:	2a01      	cmp	r2, #1
 800f74c:	f000 814b 	beq.w	800f9e6 <runPOV_step+0x50e>
    if (colorMap[0] == 1) {
 800f750:	f891 2069 	ldrb.w	r2, [r1, #105]	; 0x69
 800f754:	2a01      	cmp	r2, #1
 800f756:	f000 8141 	beq.w	800f9dc <runPOV_step+0x504>
    if (colorMap[1] == 1) {
 800f75a:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
 800f75e:	2a01      	cmp	r2, #1
 800f760:	f000 8137 	beq.w	800f9d2 <runPOV_step+0x4fa>
    if (colorMap[2] == 1) {
 800f764:	f891 206b 	ldrb.w	r2, [r1, #107]	; 0x6b
 800f768:	2a01      	cmp	r2, #1
 800f76a:	f000 812d 	beq.w	800f9c8 <runPOV_step+0x4f0>
    if (colorMap[3] == 1) {
 800f76e:	f891 206c 	ldrb.w	r2, [r1, #108]	; 0x6c
 800f772:	2a01      	cmp	r2, #1
 800f774:	f000 8123 	beq.w	800f9be <runPOV_step+0x4e6>
    if (colorMap[4] == 1) {
 800f778:	f891 206d 	ldrb.w	r2, [r1, #109]	; 0x6d
 800f77c:	2a01      	cmp	r2, #1
 800f77e:	f000 8119 	beq.w	800f9b4 <runPOV_step+0x4dc>
    if (colorMap[5] == 1) {
 800f782:	f891 206e 	ldrb.w	r2, [r1, #110]	; 0x6e
 800f786:	2a01      	cmp	r2, #1
 800f788:	f000 810f 	beq.w	800f9aa <runPOV_step+0x4d2>
    if (colorMap[6] == 1) {
 800f78c:	f891 206f 	ldrb.w	r2, [r1, #111]	; 0x6f
 800f790:	2a01      	cmp	r2, #1
 800f792:	d103      	bne.n	800f79c <runPOV_step+0x2c4>
      LED_SETTINGS[POV_8_G_REG] &= ~POV_8_G_PIN;
 800f794:	781a      	ldrb	r2, [r3, #0]
 800f796:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800f79a:	701a      	strb	r2, [r3, #0]
    if (colorMap[0] == 1) {
 800f79c:	f890 2069 	ldrb.w	r2, [r0, #105]	; 0x69
 800f7a0:	2a01      	cmp	r2, #1
 800f7a2:	f000 813e 	beq.w	800fa22 <runPOV_step+0x54a>
    if (colorMap[1] == 1) {
 800f7a6:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
 800f7aa:	2a01      	cmp	r2, #1
 800f7ac:	f000 8134 	beq.w	800fa18 <runPOV_step+0x540>
    if (colorMap[2] == 1) {
 800f7b0:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
 800f7b4:	2a01      	cmp	r2, #1
 800f7b6:	f000 812a 	beq.w	800fa0e <runPOV_step+0x536>
    if (colorMap[3] == 1) {
 800f7ba:	f890 206c 	ldrb.w	r2, [r0, #108]	; 0x6c
 800f7be:	2a01      	cmp	r2, #1
 800f7c0:	f000 8120 	beq.w	800fa04 <runPOV_step+0x52c>
    if (colorMap[4] == 1) {
 800f7c4:	f890 206d 	ldrb.w	r2, [r0, #109]	; 0x6d
 800f7c8:	2a01      	cmp	r2, #1
 800f7ca:	f000 8134 	beq.w	800fa36 <runPOV_step+0x55e>
    if (colorMap[5] == 1) {
 800f7ce:	f890 206e 	ldrb.w	r2, [r0, #110]	; 0x6e
 800f7d2:	2a01      	cmp	r2, #1
 800f7d4:	f000 812a 	beq.w	800fa2c <runPOV_step+0x554>
    if (colorMap[6] == 1) {
 800f7d8:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
 800f7dc:	2a01      	cmp	r2, #1
 800f7de:	f47f ae88 	bne.w	800f4f2 <runPOV_step+0x1a>
 800f7e2:	e712      	b.n	800f60a <runPOV_step+0x132>
      LED_SETTINGS[BUTTON_6_R_REG] &= ~BUTTON_6_R_PIN;
 800f7e4:	781a      	ldrb	r2, [r3, #0]
 800f7e6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 800f7ea:	701a      	strb	r2, [r3, #0]
 800f7ec:	e709      	b.n	800f602 <runPOV_step+0x12a>
      LED_SETTINGS[POV_7_R_REG] &= ~POV_7_R_PIN;
 800f7ee:	781a      	ldrb	r2, [r3, #0]
 800f7f0:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 800f7f4:	701a      	strb	r2, [r3, #0]
 800f7f6:	e700      	b.n	800f5fa <runPOV_step+0x122>
      LED_SETTINGS[BUTTON_5_R_REG] &= ~BUTTON_5_R_PIN;
 800f7f8:	781a      	ldrb	r2, [r3, #0]
 800f7fa:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
 800f7fe:	701a      	strb	r2, [r3, #0]
 800f800:	e6f7      	b.n	800f5f2 <runPOV_step+0x11a>
      LED_SETTINGS[POV_6_R_REG] &= ~POV_6_R_PIN;
 800f802:	785a      	ldrb	r2, [r3, #1]
 800f804:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 800f808:	705a      	strb	r2, [r3, #1]
 800f80a:	e6ee      	b.n	800f5ea <runPOV_step+0x112>
      LED_SETTINGS[BUTTON_4_R_REG] &= ~BUTTON_4_R_PIN;
 800f80c:	785a      	ldrb	r2, [r3, #1]
 800f80e:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 800f812:	705a      	strb	r2, [r3, #1]
 800f814:	e6e5      	b.n	800f5e2 <runPOV_step+0x10a>
 800f816:	bf00      	nop
 800f818:	200050a4 	.word	0x200050a4
 800f81c:	20005398 	.word	0x20005398
 800f820:	20005274 	.word	0x20005274
      LED_SETTINGS[POV_5_R_REG] &= ~POV_5_R_PIN;
 800f824:	785a      	ldrb	r2, [r3, #1]
 800f826:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
 800f82a:	705a      	strb	r2, [r3, #1]
 800f82c:	e6d5      	b.n	800f5da <runPOV_step+0x102>
      LED_SETTINGS[BUTTON_6_G_REG] &= ~BUTTON_6_G_PIN;
 800f82e:	781a      	ldrb	r2, [r3, #0]
 800f830:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 800f834:	701a      	strb	r2, [r3, #0]
 800f836:	e6c5      	b.n	800f5c4 <runPOV_step+0xec>
      LED_SETTINGS[POV_6_G_REG] &= ~POV_6_G_PIN;
 800f838:	785a      	ldrb	r2, [r3, #1]
 800f83a:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 800f83e:	705a      	strb	r2, [r3, #1]
 800f840:	e6b4      	b.n	800f5ac <runPOV_step+0xd4>
      LED_SETTINGS[BUTTON_4_G_REG] &= ~BUTTON_4_G_PIN;
 800f842:	785a      	ldrb	r2, [r3, #1]
 800f844:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800f848:	705a      	strb	r2, [r3, #1]
 800f84a:	e6ab      	b.n	800f5a4 <runPOV_step+0xcc>
      LED_SETTINGS[POV_5_G_REG] &= ~POV_5_G_PIN;
 800f84c:	785a      	ldrb	r2, [r3, #1]
 800f84e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f852:	705a      	strb	r2, [r3, #1]
 800f854:	e6a2      	b.n	800f59c <runPOV_step+0xc4>
      LED_SETTINGS[POV_1_R_REG] &= ~POV_1_R_PIN;
 800f856:	795a      	ldrb	r2, [r3, #5]
 800f858:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
 800f85c:	715a      	strb	r2, [r3, #5]
 800f85e:	e699      	b.n	800f594 <runPOV_step+0xbc>
      LED_SETTINGS[BUTTON_1_R_REG] &= ~BUTTON_1_R_PIN;
 800f860:	795a      	ldrb	r2, [r3, #5]
 800f862:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 800f866:	715a      	strb	r2, [r3, #5]
 800f868:	e68f      	b.n	800f58a <runPOV_step+0xb2>
      LED_SETTINGS[POV_2_R_REG] &= ~POV_2_R_PIN;
 800f86a:	795a      	ldrb	r2, [r3, #5]
 800f86c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 800f870:	715a      	strb	r2, [r3, #5]
 800f872:	e685      	b.n	800f580 <runPOV_step+0xa8>
      LED_SETTINGS[BUTTON_2_R_REG] &= ~BUTTON_2_R_PIN;
 800f874:	795a      	ldrb	r2, [r3, #5]
 800f876:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800f87a:	715a      	strb	r2, [r3, #5]
 800f87c:	e67b      	b.n	800f576 <runPOV_step+0x9e>
      LED_SETTINGS[POV_3_R_REG] &= ~POV_3_R_PIN;
 800f87e:	791a      	ldrb	r2, [r3, #4]
 800f880:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 800f884:	711a      	strb	r2, [r3, #4]
 800f886:	e671      	b.n	800f56c <runPOV_step+0x94>
      LED_SETTINGS[BUTTON_3_R_REG] &= ~BUTTON_3_R_PIN;
 800f888:	791a      	ldrb	r2, [r3, #4]
 800f88a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 800f88e:	711a      	strb	r2, [r3, #4]
 800f890:	e667      	b.n	800f562 <runPOV_step+0x8a>
      LED_SETTINGS[POV_4_R_REG] &= ~POV_4_R_PIN;
 800f892:	791a      	ldrb	r2, [r3, #4]
 800f894:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800f898:	711a      	strb	r2, [r3, #4]
 800f89a:	e65d      	b.n	800f558 <runPOV_step+0x80>
      LED_SETTINGS[BUTTON_1_G_REG] &= ~BUTTON_1_G_PIN;
 800f89c:	795a      	ldrb	r2, [r3, #5]
 800f89e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800f8a2:	715a      	strb	r2, [r3, #5]
 800f8a4:	e64b      	b.n	800f53e <runPOV_step+0x66>
      LED_SETTINGS[POV_2_G_REG] &= ~POV_2_G_PIN;
 800f8a6:	795a      	ldrb	r2, [r3, #5]
 800f8a8:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 800f8ac:	715a      	strb	r2, [r3, #5]
 800f8ae:	e641      	b.n	800f534 <runPOV_step+0x5c>
      LED_SETTINGS[BUTTON_2_G_REG] &= ~BUTTON_2_G_PIN;
 800f8b0:	795a      	ldrb	r2, [r3, #5]
 800f8b2:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800f8b6:	715a      	strb	r2, [r3, #5]
 800f8b8:	e637      	b.n	800f52a <runPOV_step+0x52>
      LED_SETTINGS[POV_3_G_REG] &= ~POV_3_G_PIN;
 800f8ba:	791a      	ldrb	r2, [r3, #4]
 800f8bc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800f8c0:	711a      	strb	r2, [r3, #4]
 800f8c2:	e62d      	b.n	800f520 <runPOV_step+0x48>
      LED_SETTINGS[BUTTON_3_G_REG] &= ~BUTTON_3_G_PIN;
 800f8c4:	791a      	ldrb	r2, [r3, #4]
 800f8c6:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 800f8ca:	711a      	strb	r2, [r3, #4]
 800f8cc:	e623      	b.n	800f516 <runPOV_step+0x3e>
      LED_SETTINGS[POV_4_G_REG] &= ~POV_4_G_PIN;
 800f8ce:	791a      	ldrb	r2, [r3, #4]
 800f8d0:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800f8d4:	711a      	strb	r2, [r3, #4]
 800f8d6:	e619      	b.n	800f50c <runPOV_step+0x34>
      LED_SETTINGS[POV_7_G_REG] &= ~POV_7_G_PIN;
 800f8d8:	781a      	ldrb	r2, [r3, #0]
 800f8da:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800f8de:	701a      	strb	r2, [r3, #0]
 800f8e0:	e66c      	b.n	800f5bc <runPOV_step+0xe4>
      LED_SETTINGS[BUTTON_5_G_REG] &= ~BUTTON_5_G_PIN;
 800f8e2:	781a      	ldrb	r2, [r3, #0]
 800f8e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f8e8:	701a      	strb	r2, [r3, #0]
 800f8ea:	e663      	b.n	800f5b4 <runPOV_step+0xdc>
      LED_SETTINGS[POV_2_R_REG] &= ~POV_2_R_PIN;
 800f8ec:	795a      	ldrb	r2, [r3, #5]
 800f8ee:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 800f8f2:	715a      	strb	r2, [r3, #5]
 800f8f4:	e6a8      	b.n	800f648 <runPOV_step+0x170>
      LED_SETTINGS[BUTTON_2_R_REG] &= ~BUTTON_2_R_PIN;
 800f8f6:	795a      	ldrb	r2, [r3, #5]
 800f8f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800f8fc:	715a      	strb	r2, [r3, #5]
 800f8fe:	e69f      	b.n	800f640 <runPOV_step+0x168>
      LED_SETTINGS[POV_3_R_REG] &= ~POV_3_R_PIN;
 800f900:	791a      	ldrb	r2, [r3, #4]
 800f902:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 800f906:	711a      	strb	r2, [r3, #4]
 800f908:	e696      	b.n	800f638 <runPOV_step+0x160>
      LED_SETTINGS[BUTTON_3_R_REG] &= ~BUTTON_3_R_PIN;
 800f90a:	791a      	ldrb	r2, [r3, #4]
 800f90c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 800f910:	711a      	strb	r2, [r3, #4]
 800f912:	e68d      	b.n	800f630 <runPOV_step+0x158>
      LED_SETTINGS[POV_4_R_REG] &= ~POV_4_R_PIN;
 800f914:	791a      	ldrb	r2, [r3, #4]
 800f916:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800f91a:	711a      	strb	r2, [r3, #4]
 800f91c:	e684      	b.n	800f628 <runPOV_step+0x150>
      LED_SETTINGS[BUTTON_6_G_REG] &= ~BUTTON_6_G_PIN;
 800f91e:	781a      	ldrb	r2, [r3, #0]
 800f920:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 800f924:	701a      	strb	r2, [r3, #0]
 800f926:	e6af      	b.n	800f688 <runPOV_step+0x1b0>
      LED_SETTINGS[POV_7_G_REG] &= ~POV_7_G_PIN;
 800f928:	781a      	ldrb	r2, [r3, #0]
 800f92a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800f92e:	701a      	strb	r2, [r3, #0]
 800f930:	e6a6      	b.n	800f680 <runPOV_step+0x1a8>
      LED_SETTINGS[BUTTON_5_G_REG] &= ~BUTTON_5_G_PIN;
 800f932:	781a      	ldrb	r2, [r3, #0]
 800f934:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f938:	701a      	strb	r2, [r3, #0]
 800f93a:	e69d      	b.n	800f678 <runPOV_step+0x1a0>
      LED_SETTINGS[POV_6_G_REG] &= ~POV_6_G_PIN;
 800f93c:	785a      	ldrb	r2, [r3, #1]
 800f93e:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 800f942:	705a      	strb	r2, [r3, #1]
 800f944:	e694      	b.n	800f670 <runPOV_step+0x198>
      LED_SETTINGS[BUTTON_4_G_REG] &= ~BUTTON_4_G_PIN;
 800f946:	785a      	ldrb	r2, [r3, #1]
 800f948:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800f94c:	705a      	strb	r2, [r3, #1]
 800f94e:	e68b      	b.n	800f668 <runPOV_step+0x190>
      LED_SETTINGS[POV_5_G_REG] &= ~POV_5_G_PIN;
 800f950:	785a      	ldrb	r2, [r3, #1]
 800f952:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f956:	705a      	strb	r2, [r3, #1]
 800f958:	e682      	b.n	800f660 <runPOV_step+0x188>
      LED_SETTINGS[POV_1_R_REG] &= ~POV_1_R_PIN;
 800f95a:	795a      	ldrb	r2, [r3, #5]
 800f95c:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
 800f960:	715a      	strb	r2, [r3, #5]
 800f962:	e679      	b.n	800f658 <runPOV_step+0x180>
      LED_SETTINGS[BUTTON_1_R_REG] &= ~BUTTON_1_R_PIN;
 800f964:	795a      	ldrb	r2, [r3, #5]
 800f966:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 800f96a:	715a      	strb	r2, [r3, #5]
 800f96c:	e670      	b.n	800f650 <runPOV_step+0x178>
      LED_SETTINGS[BUTTON_1_G_REG] &= ~BUTTON_1_G_PIN;
 800f96e:	795a      	ldrb	r2, [r3, #5]
 800f970:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800f974:	715a      	strb	r2, [r3, #5]
 800f976:	e6a8      	b.n	800f6ca <runPOV_step+0x1f2>
      LED_SETTINGS[POV_2_G_REG] &= ~POV_2_G_PIN;
 800f978:	795a      	ldrb	r2, [r3, #5]
 800f97a:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 800f97e:	715a      	strb	r2, [r3, #5]
 800f980:	e69f      	b.n	800f6c2 <runPOV_step+0x1ea>
      LED_SETTINGS[BUTTON_2_G_REG] &= ~BUTTON_2_G_PIN;
 800f982:	795a      	ldrb	r2, [r3, #5]
 800f984:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800f988:	715a      	strb	r2, [r3, #5]
 800f98a:	e696      	b.n	800f6ba <runPOV_step+0x1e2>
      LED_SETTINGS[POV_3_G_REG] &= ~POV_3_G_PIN;
 800f98c:	791a      	ldrb	r2, [r3, #4]
 800f98e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800f992:	711a      	strb	r2, [r3, #4]
 800f994:	e68d      	b.n	800f6b2 <runPOV_step+0x1da>
      LED_SETTINGS[BUTTON_3_G_REG] &= ~BUTTON_3_G_PIN;
 800f996:	791a      	ldrb	r2, [r3, #4]
 800f998:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 800f99c:	711a      	strb	r2, [r3, #4]
 800f99e:	e684      	b.n	800f6aa <runPOV_step+0x1d2>
      LED_SETTINGS[POV_4_G_REG] &= ~POV_4_G_PIN;
 800f9a0:	791a      	ldrb	r2, [r3, #4]
 800f9a2:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800f9a6:	711a      	strb	r2, [r3, #4]
 800f9a8:	e67b      	b.n	800f6a2 <runPOV_step+0x1ca>
      LED_SETTINGS[BUTTON_6_G_REG] &= ~BUTTON_6_G_PIN;
 800f9aa:	781a      	ldrb	r2, [r3, #0]
 800f9ac:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 800f9b0:	701a      	strb	r2, [r3, #0]
 800f9b2:	e6eb      	b.n	800f78c <runPOV_step+0x2b4>
      LED_SETTINGS[POV_7_G_REG] &= ~POV_7_G_PIN;
 800f9b4:	781a      	ldrb	r2, [r3, #0]
 800f9b6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800f9ba:	701a      	strb	r2, [r3, #0]
 800f9bc:	e6e1      	b.n	800f782 <runPOV_step+0x2aa>
      LED_SETTINGS[BUTTON_5_G_REG] &= ~BUTTON_5_G_PIN;
 800f9be:	781a      	ldrb	r2, [r3, #0]
 800f9c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f9c4:	701a      	strb	r2, [r3, #0]
 800f9c6:	e6d7      	b.n	800f778 <runPOV_step+0x2a0>
      LED_SETTINGS[POV_6_G_REG] &= ~POV_6_G_PIN;
 800f9c8:	785a      	ldrb	r2, [r3, #1]
 800f9ca:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 800f9ce:	705a      	strb	r2, [r3, #1]
 800f9d0:	e6cd      	b.n	800f76e <runPOV_step+0x296>
      LED_SETTINGS[BUTTON_4_G_REG] &= ~BUTTON_4_G_PIN;
 800f9d2:	785a      	ldrb	r2, [r3, #1]
 800f9d4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800f9d8:	705a      	strb	r2, [r3, #1]
 800f9da:	e6c3      	b.n	800f764 <runPOV_step+0x28c>
      LED_SETTINGS[POV_5_G_REG] &= ~POV_5_G_PIN;
 800f9dc:	785a      	ldrb	r2, [r3, #1]
 800f9de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f9e2:	705a      	strb	r2, [r3, #1]
 800f9e4:	e6b9      	b.n	800f75a <runPOV_step+0x282>
      LED_SETTINGS[POV_1_R_REG] &= ~POV_1_R_PIN;
 800f9e6:	795a      	ldrb	r2, [r3, #5]
 800f9e8:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
 800f9ec:	715a      	strb	r2, [r3, #5]
 800f9ee:	e6af      	b.n	800f750 <runPOV_step+0x278>
      LED_SETTINGS[BUTTON_1_R_REG] &= ~BUTTON_1_R_PIN;
 800f9f0:	795a      	ldrb	r2, [r3, #5]
 800f9f2:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 800f9f6:	715a      	strb	r2, [r3, #5]
 800f9f8:	e6a6      	b.n	800f748 <runPOV_step+0x270>
      LED_SETTINGS[POV_2_R_REG] &= ~POV_2_R_PIN;
 800f9fa:	795a      	ldrb	r2, [r3, #5]
 800f9fc:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 800fa00:	715a      	strb	r2, [r3, #5]
 800fa02:	e69d      	b.n	800f740 <runPOV_step+0x268>
      LED_SETTINGS[BUTTON_5_R_REG] &= ~BUTTON_5_R_PIN;
 800fa04:	781a      	ldrb	r2, [r3, #0]
 800fa06:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
 800fa0a:	701a      	strb	r2, [r3, #0]
 800fa0c:	e6da      	b.n	800f7c4 <runPOV_step+0x2ec>
      LED_SETTINGS[POV_6_R_REG] &= ~POV_6_R_PIN;
 800fa0e:	785a      	ldrb	r2, [r3, #1]
 800fa10:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 800fa14:	705a      	strb	r2, [r3, #1]
 800fa16:	e6d0      	b.n	800f7ba <runPOV_step+0x2e2>
      LED_SETTINGS[BUTTON_4_R_REG] &= ~BUTTON_4_R_PIN;
 800fa18:	785a      	ldrb	r2, [r3, #1]
 800fa1a:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 800fa1e:	705a      	strb	r2, [r3, #1]
 800fa20:	e6c6      	b.n	800f7b0 <runPOV_step+0x2d8>
      LED_SETTINGS[POV_5_R_REG] &= ~POV_5_R_PIN;
 800fa22:	785a      	ldrb	r2, [r3, #1]
 800fa24:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
 800fa28:	705a      	strb	r2, [r3, #1]
 800fa2a:	e6bc      	b.n	800f7a6 <runPOV_step+0x2ce>
      LED_SETTINGS[BUTTON_6_R_REG] &= ~BUTTON_6_R_PIN;
 800fa2c:	781a      	ldrb	r2, [r3, #0]
 800fa2e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 800fa32:	701a      	strb	r2, [r3, #0]
 800fa34:	e6d0      	b.n	800f7d8 <runPOV_step+0x300>
      LED_SETTINGS[POV_7_R_REG] &= ~POV_7_R_PIN;
 800fa36:	781a      	ldrb	r2, [r3, #0]
 800fa38:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 800fa3c:	701a      	strb	r2, [r3, #0]
 800fa3e:	e6c6      	b.n	800f7ce <runPOV_step+0x2f6>
      LED_SETTINGS[BUTTON_3_G_REG] &= ~BUTTON_3_G_PIN;
 800fa40:	791a      	ldrb	r2, [r3, #4]
 800fa42:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 800fa46:	711a      	strb	r2, [r3, #4]
 800fa48:	e64f      	b.n	800f6ea <runPOV_step+0x212>
      LED_SETTINGS[POV_4_G_REG] &= ~POV_4_G_PIN;
 800fa4a:	791a      	ldrb	r2, [r3, #4]
 800fa4c:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800fa50:	711a      	strb	r2, [r3, #4]
 800fa52:	e646      	b.n	800f6e2 <runPOV_step+0x20a>
      LED_SETTINGS[BUTTON_2_R_REG] &= ~BUTTON_2_R_PIN;
 800fa54:	795a      	ldrb	r2, [r3, #5]
 800fa56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800fa5a:	715a      	strb	r2, [r3, #5]
 800fa5c:	e66c      	b.n	800f738 <runPOV_step+0x260>
      LED_SETTINGS[POV_3_R_REG] &= ~POV_3_R_PIN;
 800fa5e:	791a      	ldrb	r2, [r3, #4]
 800fa60:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 800fa64:	711a      	strb	r2, [r3, #4]
 800fa66:	e663      	b.n	800f730 <runPOV_step+0x258>
      LED_SETTINGS[BUTTON_3_R_REG] &= ~BUTTON_3_R_PIN;
 800fa68:	791a      	ldrb	r2, [r3, #4]
 800fa6a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 800fa6e:	711a      	strb	r2, [r3, #4]
 800fa70:	e65a      	b.n	800f728 <runPOV_step+0x250>
      LED_SETTINGS[POV_4_R_REG] &= ~POV_4_R_PIN;
 800fa72:	791a      	ldrb	r2, [r3, #4]
 800fa74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800fa78:	711a      	strb	r2, [r3, #4]
 800fa7a:	e651      	b.n	800f720 <runPOV_step+0x248>
      LED_SETTINGS[BUTTON_1_G_REG] &= ~BUTTON_1_G_PIN;
 800fa7c:	795a      	ldrb	r2, [r3, #5]
 800fa7e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800fa82:	715a      	strb	r2, [r3, #5]
 800fa84:	e641      	b.n	800f70a <runPOV_step+0x232>
      LED_SETTINGS[POV_2_G_REG] &= ~POV_2_G_PIN;
 800fa86:	795a      	ldrb	r2, [r3, #5]
 800fa88:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 800fa8c:	715a      	strb	r2, [r3, #5]
 800fa8e:	e638      	b.n	800f702 <runPOV_step+0x22a>
      LED_SETTINGS[BUTTON_2_G_REG] &= ~BUTTON_2_G_PIN;
 800fa90:	795a      	ldrb	r2, [r3, #5]
 800fa92:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800fa96:	715a      	strb	r2, [r3, #5]
 800fa98:	e62f      	b.n	800f6fa <runPOV_step+0x222>
      LED_SETTINGS[POV_3_G_REG] &= ~POV_3_G_PIN;
 800fa9a:	791a      	ldrb	r2, [r3, #4]
 800fa9c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800faa0:	711a      	strb	r2, [r3, #4]
 800faa2:	e626      	b.n	800f6f2 <runPOV_step+0x21a>

0800faa4 <POV_Update>:
void POV_Update(void) {
 800faa4:	b570      	push	{r4, r5, r6, lr}
  if (firstRun) {
 800faa6:	4e4a      	ldr	r6, [pc, #296]	; (800fbd0 <POV_Update+0x12c>)
 800faa8:	7833      	ldrb	r3, [r6, #0]
 800faaa:	b313      	cbz	r3, 800faf2 <POV_Update+0x4e>
    if (global_visNum == 1) {
 800faac:	4b49      	ldr	r3, [pc, #292]	; (800fbd4 <POV_Update+0x130>)
      runPOV_step(&message_resenv_red[indexTracker + HALF_LENGTH][0],
 800faae:	4c4a      	ldr	r4, [pc, #296]	; (800fbd8 <POV_Update+0x134>)
    if (global_visNum == 1) {
 800fab0:	881b      	ldrh	r3, [r3, #0]
    firstRun = 0;
 800fab2:	2200      	movs	r2, #0
    if (global_visNum == 1) {
 800fab4:	2b01      	cmp	r3, #1
    firstRun = 0;
 800fab6:	7032      	strb	r2, [r6, #0]
    if (global_visNum == 1) {
 800fab8:	d055      	beq.n	800fb66 <POV_Update+0xc2>
    } else if (global_visNum == 2) {
 800faba:	2b02      	cmp	r3, #2
 800fabc:	d060      	beq.n	800fb80 <POV_Update+0xdc>
  }
}

void transmitToBuffer(void) {
  // taskENTER_CRITICAL();
  if (LED_mutex_id != NULL) {
 800fabe:	4d47      	ldr	r5, [pc, #284]	; (800fbdc <POV_Update+0x138>)
 800fac0:	6828      	ldr	r0, [r5, #0]
 800fac2:	b118      	cbz	r0, 800facc <POV_Update+0x28>
    osMutexWait(LED_mutex_id, osWaitForever);
 800fac4:	f04f 31ff 	mov.w	r1, #4294967295
 800fac8:	f7fb ffb2 	bl	800ba30 <osMutexWait>
  }

  HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_RESET);
 800facc:	2200      	movs	r2, #0
 800face:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fad2:	4843      	ldr	r0, [pc, #268]	; (800fbe0 <POV_Update+0x13c>)
 800fad4:	f7f2 fb3e 	bl	8002154 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit_IT(&hspi2, LED_SETTINGS, 6);
 800fad8:	2206      	movs	r2, #6
 800fada:	4942      	ldr	r1, [pc, #264]	; (800fbe4 <POV_Update+0x140>)
 800fadc:	4842      	ldr	r0, [pc, #264]	; (800fbe8 <POV_Update+0x144>)
 800fade:	f7f5 ff85 	bl	80059ec <HAL_SPI_Transmit_IT>

  // HAL_Delay(1);
  // HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_SET);

  if (LED_mutex_id != NULL) {
 800fae2:	6828      	ldr	r0, [r5, #0]
 800fae4:	b108      	cbz	r0, 800faea <POV_Update+0x46>
    osMutexRelease(LED_mutex_id);
 800fae6:	f7fb ffcb 	bl	800ba80 <osMutexRelease>
    indexTracker++;
 800faea:	6823      	ldr	r3, [r4, #0]
 800faec:	3301      	adds	r3, #1
 800faee:	6023      	str	r3, [r4, #0]
 800faf0:	bd70      	pop	{r4, r5, r6, pc}
  if (indexTracker >= (HALF_LENGTH - 1)) {
 800faf2:	4c39      	ldr	r4, [pc, #228]	; (800fbd8 <POV_Update+0x134>)
 800faf4:	6822      	ldr	r2, [r4, #0]
 800faf6:	2a0e      	cmp	r2, #14
 800faf8:	d80f      	bhi.n	800fb1a <POV_Update+0x76>
    if (global_visNum == 1) {
 800fafa:	4b36      	ldr	r3, [pc, #216]	; (800fbd4 <POV_Update+0x130>)
 800fafc:	881b      	ldrh	r3, [r3, #0]
 800fafe:	2b01      	cmp	r3, #1
 800fb00:	d049      	beq.n	800fb96 <POV_Update+0xf2>
    } else if (global_visNum == 2) {
 800fb02:	2b02      	cmp	r3, #2
 800fb04:	d1db      	bne.n	800fabe <POV_Update+0x1a>
      runPOV_step(&lidar_red[indexTracker][0], &lidar_green[indexTracker][0],
 800fb06:	4939      	ldr	r1, [pc, #228]	; (800fbec <POV_Update+0x148>)
 800fb08:	4839      	ldr	r0, [pc, #228]	; (800fbf0 <POV_Update+0x14c>)
 800fb0a:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 800fb0e:	4419      	add	r1, r3
 800fb10:	b2d2      	uxtb	r2, r2
 800fb12:	4418      	add	r0, r3
 800fb14:	f7ff fce0 	bl	800f4d8 <runPOV_step>
 800fb18:	e7d1      	b.n	800fabe <POV_Update+0x1a>
    HAL_TIM_Base_Stop_IT(&htim3);
 800fb1a:	4836      	ldr	r0, [pc, #216]	; (800fbf4 <POV_Update+0x150>)
 800fb1c:	f7f6 f98a 	bl	8005e34 <HAL_TIM_Base_Stop_IT>
    if (global_visNum == 1) {
 800fb20:	4b2c      	ldr	r3, [pc, #176]	; (800fbd4 <POV_Update+0x130>)
 800fb22:	881b      	ldrh	r3, [r3, #0]
 800fb24:	2b01      	cmp	r3, #1
 800fb26:	d046      	beq.n	800fbb6 <POV_Update+0x112>
    } else if (global_visNum == 2) {
 800fb28:	2b02      	cmp	r3, #2
 800fb2a:	d039      	beq.n	800fba0 <POV_Update+0xfc>
  if (LED_mutex_id != NULL) {
 800fb2c:	4d2b      	ldr	r5, [pc, #172]	; (800fbdc <POV_Update+0x138>)
 800fb2e:	6828      	ldr	r0, [r5, #0]
 800fb30:	b118      	cbz	r0, 800fb3a <POV_Update+0x96>
    osMutexWait(LED_mutex_id, osWaitForever);
 800fb32:	f04f 31ff 	mov.w	r1, #4294967295
 800fb36:	f7fb ff7b 	bl	800ba30 <osMutexWait>
  HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_RESET);
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fb40:	4827      	ldr	r0, [pc, #156]	; (800fbe0 <POV_Update+0x13c>)
 800fb42:	f7f2 fb07 	bl	8002154 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit_IT(&hspi2, LED_SETTINGS, 6);
 800fb46:	2206      	movs	r2, #6
 800fb48:	4926      	ldr	r1, [pc, #152]	; (800fbe4 <POV_Update+0x140>)
 800fb4a:	4827      	ldr	r0, [pc, #156]	; (800fbe8 <POV_Update+0x144>)
 800fb4c:	f7f5 ff4e 	bl	80059ec <HAL_SPI_Transmit_IT>
  if (LED_mutex_id != NULL) {
 800fb50:	6828      	ldr	r0, [r5, #0]
 800fb52:	b108      	cbz	r0, 800fb58 <POV_Update+0xb4>
    osMutexRelease(LED_mutex_id);
 800fb54:	f7fb ff94 	bl	800ba80 <osMutexRelease>
    POV_timerActive = 0;
 800fb58:	4927      	ldr	r1, [pc, #156]	; (800fbf8 <POV_Update+0x154>)
    indexTracker = 0;
 800fb5a:	2300      	movs	r3, #0
    firstRun = 1;
 800fb5c:	2201      	movs	r2, #1
    POV_timerActive = 0;
 800fb5e:	700b      	strb	r3, [r1, #0]
    firstRun = 1;
 800fb60:	7032      	strb	r2, [r6, #0]
    indexTracker = 0;
 800fb62:	6023      	str	r3, [r4, #0]
 800fb64:	bd70      	pop	{r4, r5, r6, pc}
      runPOV_step(&message_resenv_red[indexTracker + HALF_LENGTH][0],
 800fb66:	6822      	ldr	r2, [r4, #0]
                  &message_resenv_green[indexTracker][0], indexTracker);
 800fb68:	4924      	ldr	r1, [pc, #144]	; (800fbfc <POV_Update+0x158>)
      runPOV_step(&message_resenv_red[indexTracker + HALF_LENGTH][0],
 800fb6a:	4825      	ldr	r0, [pc, #148]	; (800fc00 <POV_Update+0x15c>)
 800fb6c:	f102 0310 	add.w	r3, r2, #16
 800fb70:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
      runPOV_step(&message_resenv_red[indexTracker + HALF_LENGTH][0],
 800fb74:	b2d2      	uxtb	r2, r2
 800fb76:	4419      	add	r1, r3
 800fb78:	4418      	add	r0, r3
 800fb7a:	f7ff fcad 	bl	800f4d8 <runPOV_step>
 800fb7e:	e79e      	b.n	800fabe <POV_Update+0x1a>
      runPOV_step(&lidar_red[indexTracker][0], &lidar_green[indexTracker][0],
 800fb80:	6822      	ldr	r2, [r4, #0]
 800fb82:	491a      	ldr	r1, [pc, #104]	; (800fbec <POV_Update+0x148>)
 800fb84:	481a      	ldr	r0, [pc, #104]	; (800fbf0 <POV_Update+0x14c>)
 800fb86:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 800fb8a:	4419      	add	r1, r3
 800fb8c:	b2d2      	uxtb	r2, r2
 800fb8e:	4418      	add	r0, r3
 800fb90:	f7ff fca2 	bl	800f4d8 <runPOV_step>
 800fb94:	e793      	b.n	800fabe <POV_Update+0x1a>
      runPOV_step(&message_resenv_red[indexTracker + HALF_LENGTH][0],
 800fb96:	f102 0310 	add.w	r3, r2, #16
                  &message_resenv_green[indexTracker][0], indexTracker);
 800fb9a:	4918      	ldr	r1, [pc, #96]	; (800fbfc <POV_Update+0x158>)
      runPOV_step(&message_resenv_red[indexTracker + HALF_LENGTH][0],
 800fb9c:	4818      	ldr	r0, [pc, #96]	; (800fc00 <POV_Update+0x15c>)
 800fb9e:	e7e7      	b.n	800fb70 <POV_Update+0xcc>
      runPOV_step(&lidar_red[indexTracker][0], &lidar_green[indexTracker][0],
 800fba0:	6822      	ldr	r2, [r4, #0]
 800fba2:	4912      	ldr	r1, [pc, #72]	; (800fbec <POV_Update+0x148>)
 800fba4:	4812      	ldr	r0, [pc, #72]	; (800fbf0 <POV_Update+0x14c>)
 800fba6:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 800fbaa:	4419      	add	r1, r3
 800fbac:	b2d2      	uxtb	r2, r2
 800fbae:	4418      	add	r0, r3
 800fbb0:	f7ff fc92 	bl	800f4d8 <runPOV_step>
 800fbb4:	e7ba      	b.n	800fb2c <POV_Update+0x88>
      runPOV_step(&message_resenv_red[indexTracker + HALF_LENGTH][0],
 800fbb6:	6822      	ldr	r2, [r4, #0]
                  &message_resenv_green[indexTracker][0], indexTracker);
 800fbb8:	4910      	ldr	r1, [pc, #64]	; (800fbfc <POV_Update+0x158>)
      runPOV_step(&message_resenv_red[indexTracker + HALF_LENGTH][0],
 800fbba:	4811      	ldr	r0, [pc, #68]	; (800fc00 <POV_Update+0x15c>)
 800fbbc:	f102 0310 	add.w	r3, r2, #16
 800fbc0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800fbc4:	b2d2      	uxtb	r2, r2
 800fbc6:	4419      	add	r1, r3
 800fbc8:	4418      	add	r0, r3
 800fbca:	f7ff fc85 	bl	800f4d8 <runPOV_step>
 800fbce:	e7ad      	b.n	800fb2c <POV_Update+0x88>
 800fbd0:	20000032 	.word	0x20000032
 800fbd4:	200050a4 	.word	0x200050a4
 800fbd8:	200050a8 	.word	0x200050a8
 800fbdc:	20005388 	.word	0x20005388
 800fbe0:	48001000 	.word	0x48001000
 800fbe4:	20005398 	.word	0x20005398
 800fbe8:	20005a28 	.word	0x20005a28
 800fbec:	200050b0 	.word	0x200050b0
 800fbf0:	20005190 	.word	0x20005190
 800fbf4:	20005b4c 	.word	0x20005b4c
 800fbf8:	200050a2 	.word	0x200050a2
 800fbfc:	08014504 	.word	0x08014504
 800fc00:	08014654 	.word	0x08014654
 800fc04:	00000000 	.word	0x00000000

0800fc08 <POV_handler>:
void POV_handler(uint64_t RPR) {
 800fc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switchPOV++;
 800fc0a:	4e31      	ldr	r6, [pc, #196]	; (800fcd0 <POV_handler+0xc8>)
  if ((RPR) <= ((uint32_t)TICK_POV_THRESH)) {
 800fc0c:	a52c      	add	r5, pc, #176	; (adr r5, 800fcc0 <POV_handler+0xb8>)
 800fc0e:	e9d5 4500 	ldrd	r4, r5, [r5]
  switchPOV++;
 800fc12:	6833      	ldr	r3, [r6, #0]
  if ((RPR) <= ((uint32_t)TICK_POV_THRESH)) {
 800fc14:	428d      	cmp	r5, r1
  switchPOV++;
 800fc16:	f103 0301 	add.w	r3, r3, #1
  if ((RPR) <= ((uint32_t)TICK_POV_THRESH)) {
 800fc1a:	bf08      	it	eq
 800fc1c:	4284      	cmpeq	r4, r0
  switchPOV++;
 800fc1e:	6033      	str	r3, [r6, #0]
  if ((RPR) <= ((uint32_t)TICK_POV_THRESH)) {
 800fc20:	d200      	bcs.n	800fc24 <POV_handler+0x1c>
 800fc22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    usTickTracker = (uint32_t)RPR;
 800fc24:	4b2b      	ldr	r3, [pc, #172]	; (800fcd4 <POV_handler+0xcc>)
 800fc26:	4604      	mov	r4, r0
 800fc28:	6018      	str	r0, [r3, #0]
    lidarPOV_Map = get_lidar_POV_map();
 800fc2a:	f000 f995 	bl	800ff58 <get_lidar_POV_map>
 800fc2e:	4b2a      	ldr	r3, [pc, #168]	; (800fcd8 <POV_handler+0xd0>)
 800fc30:	4607      	mov	r7, r0
  memset(lidar_green, 0,
 800fc32:	22e0      	movs	r2, #224	; 0xe0
 800fc34:	2100      	movs	r1, #0
 800fc36:	4829      	ldr	r0, [pc, #164]	; (800fcdc <POV_handler+0xd4>)
    lidarPOV_Map = get_lidar_POV_map();
 800fc38:	601f      	str	r7, [r3, #0]
  memset(lidar_green, 0,
 800fc3a:	f003 fcba 	bl	80135b2 <memset>
  memset(lidar_red, 0,
 800fc3e:	22e0      	movs	r2, #224	; 0xe0
 800fc40:	2100      	movs	r1, #0
 800fc42:	4827      	ldr	r0, [pc, #156]	; (800fce0 <POV_handler+0xd8>)
 800fc44:	f003 fcb5 	bl	80135b2 <memset>
  if (lidarPOV_Map >= (MESSAGE_LENGTH)) {
 800fc48:	2f1f      	cmp	r7, #31
 800fc4a:	d82f      	bhi.n	800fcac <POV_handler+0xa4>
    setMatrix(lidar_green,
 800fc4c:	1c7a      	adds	r2, r7, #1
    memset(matrix, 1, size);
 800fc4e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800fc52:	2101      	movs	r1, #1
 800fc54:	4821      	ldr	r0, [pc, #132]	; (800fcdc <POV_handler+0xd4>)
 800fc56:	f003 fcac 	bl	80135b2 <memset>
    global_visNum = 2;
 800fc5a:	4b22      	ldr	r3, [pc, #136]	; (800fce4 <POV_handler+0xdc>)
 800fc5c:	2202      	movs	r2, #2
 800fc5e:	801a      	strh	r2, [r3, #0]
      round(((cyclePerHalfTurn) / ((double)TICK_POV_MICROSEC_10_DIVIDER)) /
 800fc60:	4620      	mov	r0, r4
 800fc62:	f7f0 fc0f 	bl	8000484 <__aeabi_ui2d>
 800fc66:	a318      	add	r3, pc, #96	; (adr r3, 800fcc8 <POV_handler+0xc0>)
 800fc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc6c:	f7f0 fc80 	bl	8000570 <__aeabi_dmul>
 800fc70:	ec41 0b10 	vmov	d0, r0, r1
 800fc74:	f003 fcba 	bl	80135ec <round>
  if (POV_timerActive == 0) {
 800fc78:	4b1b      	ldr	r3, [pc, #108]	; (800fce8 <POV_handler+0xe0>)
 800fc7a:	781a      	ldrb	r2, [r3, #0]
 800fc7c:	2a00      	cmp	r2, #0
 800fc7e:	d1d0      	bne.n	800fc22 <POV_handler+0x1a>
    timerPOVstate = switchPOV;
 800fc80:	4a1a      	ldr	r2, [pc, #104]	; (800fcec <POV_handler+0xe4>)
 800fc82:	6831      	ldr	r1, [r6, #0]
 800fc84:	6011      	str	r1, [r2, #0]
    POV_timerActive = 1;
 800fc86:	2201      	movs	r2, #1
 800fc88:	701a      	strb	r2, [r3, #0]
  uint32_t uS_10_needed =
 800fc8a:	ec51 0b10 	vmov	r0, r1, d0
 800fc8e:	f7f0 ff47 	bl	8000b20 <__aeabi_d2uiz>
    htim3.Instance->ARR = (uint16_t)uS_10_needed;
 800fc92:	4c17      	ldr	r4, [pc, #92]	; (800fcf0 <POV_handler+0xe8>)
 800fc94:	6823      	ldr	r3, [r4, #0]
 800fc96:	b280      	uxth	r0, r0
 800fc98:	62d8      	str	r0, [r3, #44]	; 0x2c
    disable_buttons();
 800fc9a:	f000 fe4b 	bl	8010934 <disable_buttons>
    POV_Update();
 800fc9e:	f7ff ff01 	bl	800faa4 <POV_Update>
    HAL_TIM_Base_Start_IT(&htim3);
 800fca2:	4620      	mov	r0, r4
}
 800fca4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_TIM_Base_Start_IT(&htim3);
 800fca8:	f7f6 b8ac 	b.w	8005e04 <HAL_TIM_Base_Start_IT>
    setMatrix(lidar_red,
 800fcac:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
    memset(matrix, 1, size);
 800fcb0:	f1a7 02d9 	sub.w	r2, r7, #217	; 0xd9
 800fcb4:	2101      	movs	r1, #1
 800fcb6:	480a      	ldr	r0, [pc, #40]	; (800fce0 <POV_handler+0xd8>)
 800fcb8:	f003 fc7b 	bl	80135b2 <memset>
 800fcbc:	e7cd      	b.n	800fc5a <POV_handler+0x52>
 800fcbe:	bf00      	nop
 800fcc0:	01c9c380 	.word	0x01c9c380
 800fcc4:	00000000 	.word	0x00000000
 800fcc8:	47ae147b 	.word	0x47ae147b
 800fccc:	3f147ae1 	.word	0x3f147ae1
 800fcd0:	20005270 	.word	0x20005270
 800fcd4:	20005278 	.word	0x20005278
 800fcd8:	200050ac 	.word	0x200050ac
 800fcdc:	200050b0 	.word	0x200050b0
 800fce0:	20005190 	.word	0x20005190
 800fce4:	200050a4 	.word	0x200050a4
 800fce8:	200050a2 	.word	0x200050a2
 800fcec:	20005274 	.word	0x20005274
 800fcf0:	20005b4c 	.word	0x20005b4c

0800fcf4 <transmitToBuffer>:
void transmitToBuffer(void) {
 800fcf4:	b510      	push	{r4, lr}
  if (LED_mutex_id != NULL) {
 800fcf6:	4c0c      	ldr	r4, [pc, #48]	; (800fd28 <transmitToBuffer+0x34>)
 800fcf8:	6820      	ldr	r0, [r4, #0]
 800fcfa:	b118      	cbz	r0, 800fd04 <transmitToBuffer+0x10>
    osMutexWait(LED_mutex_id, osWaitForever);
 800fcfc:	f04f 31ff 	mov.w	r1, #4294967295
 800fd00:	f7fb fe96 	bl	800ba30 <osMutexWait>
  HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_RESET);
 800fd04:	2200      	movs	r2, #0
 800fd06:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fd0a:	4808      	ldr	r0, [pc, #32]	; (800fd2c <transmitToBuffer+0x38>)
 800fd0c:	f7f2 fa22 	bl	8002154 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit_IT(&hspi2, LED_SETTINGS, 6);
 800fd10:	2206      	movs	r2, #6
 800fd12:	4907      	ldr	r1, [pc, #28]	; (800fd30 <transmitToBuffer+0x3c>)
 800fd14:	4807      	ldr	r0, [pc, #28]	; (800fd34 <transmitToBuffer+0x40>)
 800fd16:	f7f5 fe69 	bl	80059ec <HAL_SPI_Transmit_IT>
  if (LED_mutex_id != NULL) {
 800fd1a:	6820      	ldr	r0, [r4, #0]
 800fd1c:	b118      	cbz	r0, 800fd26 <transmitToBuffer+0x32>
  }

  // HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_SET);
  // taskEXIT_CRITICAL();
  // HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_SET);
}
 800fd1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    osMutexRelease(LED_mutex_id);
 800fd22:	f7fb bead 	b.w	800ba80 <osMutexRelease>
 800fd26:	bd10      	pop	{r4, pc}
 800fd28:	20005388 	.word	0x20005388
 800fd2c:	48001000 	.word	0x48001000
 800fd30:	20005398 	.word	0x20005398
 800fd34:	20005a28 	.word	0x20005a28

0800fd38 <POV_LEDs>:

const uint16_t visualization_map1[60] = {
    {MAP_POV_1_R}, {MAP_POV_1_G}, {MAP_POV_1_R}, {MAP_POV_1_G}, {MAP_POV_1_R},
    {MAP_POV_1_G}, {MAP_POV_1_R}, {MAP_POV_1_G}, {MAP_POV_1_R}, {MAP_POV_1_G}};

void POV_LEDs(uint16_t led_map) {
 800fd38:	b510      	push	{r4, lr}
  if ((led_map & MAP_POV_1_R) == MAP_POV_1_R) {
    LED_SETTINGS[POV_1_R_REG] &= ~POV_1_R_PIN;
 800fd3a:	4b4d      	ldr	r3, [pc, #308]	; (800fe70 <POV_LEDs+0x138>)
 800fd3c:	795a      	ldrb	r2, [r3, #5]
  if ((led_map & MAP_POV_1_R) == MAP_POV_1_R) {
 800fd3e:	07c4      	lsls	r4, r0, #31
    LED_SETTINGS[POV_1_R_REG] &= ~POV_1_R_PIN;
 800fd40:	bf4c      	ite	mi
 800fd42:	f002 02bf 	andmi.w	r2, r2, #191	; 0xbf
  } else {
    LED_SETTINGS[POV_1_R_REG] |= POV_1_R_PIN;
 800fd46:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800fd4a:	715a      	strb	r2, [r3, #5]
  }

  if ((led_map & MAP_POV_2_R) == MAP_POV_2_R) {
    LED_SETTINGS[POV_2_R_REG] &= ~POV_2_R_PIN;
 800fd4c:	795a      	ldrb	r2, [r3, #5]
  if ((led_map & MAP_POV_2_R) == MAP_POV_2_R) {
 800fd4e:	0781      	lsls	r1, r0, #30
    LED_SETTINGS[POV_2_R_REG] &= ~POV_2_R_PIN;
 800fd50:	bf4c      	ite	mi
 800fd52:	f002 02fb 	andmi.w	r2, r2, #251	; 0xfb
  } else {
    LED_SETTINGS[POV_2_R_REG] |= POV_2_R_PIN;
 800fd56:	f042 0204 	orrpl.w	r2, r2, #4
 800fd5a:	715a      	strb	r2, [r3, #5]
  }

  if ((led_map & MAP_POV_3_R) == MAP_POV_3_R) {
    LED_SETTINGS[POV_3_R_REG] &= ~POV_3_R_PIN;
 800fd5c:	791a      	ldrb	r2, [r3, #4]
  if ((led_map & MAP_POV_3_R) == MAP_POV_3_R) {
 800fd5e:	0744      	lsls	r4, r0, #29
    LED_SETTINGS[POV_3_R_REG] &= ~POV_3_R_PIN;
 800fd60:	bf4c      	ite	mi
 800fd62:	f002 02ef 	andmi.w	r2, r2, #239	; 0xef
  } else {
    LED_SETTINGS[POV_3_R_REG] |= POV_3_R_PIN;
 800fd66:	f042 0210 	orrpl.w	r2, r2, #16
 800fd6a:	711a      	strb	r2, [r3, #4]
  }

  if ((led_map & MAP_POV_4_R) == MAP_POV_4_R) {
    LED_SETTINGS[POV_4_R_REG] &= ~POV_4_R_PIN;
 800fd6c:	791a      	ldrb	r2, [r3, #4]
  if ((led_map & MAP_POV_4_R) == MAP_POV_4_R) {
 800fd6e:	0701      	lsls	r1, r0, #28
    LED_SETTINGS[POV_4_R_REG] &= ~POV_4_R_PIN;
 800fd70:	bf4c      	ite	mi
 800fd72:	f002 02fe 	andmi.w	r2, r2, #254	; 0xfe
  } else {
    LED_SETTINGS[POV_4_R_REG] |= POV_4_R_PIN;
 800fd76:	f042 0201 	orrpl.w	r2, r2, #1
 800fd7a:	711a      	strb	r2, [r3, #4]
  }

  if ((led_map & MAP_POV_5_R) == MAP_POV_5_R) {
    LED_SETTINGS[POV_5_R_REG] &= ~POV_5_R_PIN;
 800fd7c:	785a      	ldrb	r2, [r3, #1]
  if ((led_map & MAP_POV_5_R) == MAP_POV_5_R) {
 800fd7e:	06c4      	lsls	r4, r0, #27
    LED_SETTINGS[POV_5_R_REG] &= ~POV_5_R_PIN;
 800fd80:	bf4c      	ite	mi
 800fd82:	f002 02bf 	andmi.w	r2, r2, #191	; 0xbf
  } else {
    LED_SETTINGS[POV_5_R_REG] |= POV_5_R_PIN;
 800fd86:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800fd8a:	705a      	strb	r2, [r3, #1]
  }

  if ((led_map & MAP_POV_6_R) == MAP_POV_6_R) {
    LED_SETTINGS[POV_6_R_REG] &= ~POV_6_R_PIN;
 800fd8c:	785a      	ldrb	r2, [r3, #1]
  if ((led_map & MAP_POV_6_R) == MAP_POV_6_R) {
 800fd8e:	0681      	lsls	r1, r0, #26
    LED_SETTINGS[POV_6_R_REG] &= ~POV_6_R_PIN;
 800fd90:	bf4c      	ite	mi
 800fd92:	f002 02fb 	andmi.w	r2, r2, #251	; 0xfb
  } else {
    LED_SETTINGS[POV_6_R_REG] |= POV_6_R_PIN;
 800fd96:	f042 0204 	orrpl.w	r2, r2, #4
 800fd9a:	705a      	strb	r2, [r3, #1]
  }

  if ((led_map & MAP_POV_7_R) == MAP_POV_7_R) {
    LED_SETTINGS[POV_7_R_REG] &= ~POV_7_R_PIN;
 800fd9c:	781a      	ldrb	r2, [r3, #0]
  if ((led_map & MAP_POV_7_R) == MAP_POV_7_R) {
 800fd9e:	0644      	lsls	r4, r0, #25
    LED_SETTINGS[POV_7_R_REG] &= ~POV_7_R_PIN;
 800fda0:	bf4c      	ite	mi
 800fda2:	f002 02ef 	andmi.w	r2, r2, #239	; 0xef
  } else {
    LED_SETTINGS[POV_7_R_REG] |= POV_7_R_PIN;
 800fda6:	f042 0210 	orrpl.w	r2, r2, #16
 800fdaa:	701a      	strb	r2, [r3, #0]
  }

  if ((led_map & MAP_POV_8_R) == MAP_POV_8_R) {
    LED_SETTINGS[POV_8_R_REG] &= ~POV_8_R_PIN;
 800fdac:	781a      	ldrb	r2, [r3, #0]
  if ((led_map & MAP_POV_8_R) == MAP_POV_8_R) {
 800fdae:	0601      	lsls	r1, r0, #24
    LED_SETTINGS[POV_8_R_REG] &= ~POV_8_R_PIN;
 800fdb0:	bf4c      	ite	mi
 800fdb2:	f002 02fe 	andmi.w	r2, r2, #254	; 0xfe
  } else {
    LED_SETTINGS[POV_8_R_REG] |= POV_8_R_PIN;
 800fdb6:	f042 0201 	orrpl.w	r2, r2, #1
 800fdba:	701a      	strb	r2, [r3, #0]
  }

  if ((led_map & MAP_POV_1_G) == MAP_POV_1_G) {
    LED_SETTINGS[POV_1_G_REG] &= ~POV_1_G_PIN;
 800fdbc:	795a      	ldrb	r2, [r3, #5]
  if ((led_map & MAP_POV_1_G) == MAP_POV_1_G) {
 800fdbe:	05c4      	lsls	r4, r0, #23
    LED_SETTINGS[POV_1_G_REG] &= ~POV_1_G_PIN;
 800fdc0:	bf4c      	ite	mi
 800fdc2:	f002 027f 	andmi.w	r2, r2, #127	; 0x7f
  } else {
    LED_SETTINGS[POV_1_G_REG] |= POV_1_G_PIN;
 800fdc6:	f042 0280 	orrpl.w	r2, r2, #128	; 0x80
 800fdca:	715a      	strb	r2, [r3, #5]
  }

  if ((led_map & MAP_POV_2_G) == MAP_POV_2_G) {
    LED_SETTINGS[POV_2_G_REG] &= ~POV_2_G_PIN;
 800fdcc:	795a      	ldrb	r2, [r3, #5]
  if ((led_map & MAP_POV_2_G) == MAP_POV_2_G) {
 800fdce:	0581      	lsls	r1, r0, #22
    LED_SETTINGS[POV_2_G_REG] &= ~POV_2_G_PIN;
 800fdd0:	bf4c      	ite	mi
 800fdd2:	f002 02f7 	andmi.w	r2, r2, #247	; 0xf7
  } else {
    LED_SETTINGS[POV_2_G_REG] |= POV_2_G_PIN;
 800fdd6:	f042 0208 	orrpl.w	r2, r2, #8
 800fdda:	715a      	strb	r2, [r3, #5]
  }

  if ((led_map & MAP_POV_3_G) == MAP_POV_3_G) {
    LED_SETTINGS[POV_3_G_REG] &= ~POV_3_G_PIN;
 800fddc:	791a      	ldrb	r2, [r3, #4]
  if ((led_map & MAP_POV_3_G) == MAP_POV_3_G) {
 800fdde:	0544      	lsls	r4, r0, #21
    LED_SETTINGS[POV_3_G_REG] &= ~POV_3_G_PIN;
 800fde0:	bf4c      	ite	mi
 800fde2:	f002 02df 	andmi.w	r2, r2, #223	; 0xdf
  } else {
    LED_SETTINGS[POV_3_G_REG] |= POV_3_G_PIN;
 800fde6:	f042 0220 	orrpl.w	r2, r2, #32
 800fdea:	711a      	strb	r2, [r3, #4]
  }

  if ((led_map & MAP_POV_4_G) == MAP_POV_4_G) {
    LED_SETTINGS[POV_4_G_REG] &= ~POV_4_G_PIN;
 800fdec:	791a      	ldrb	r2, [r3, #4]
  if ((led_map & MAP_POV_4_G) == MAP_POV_4_G) {
 800fdee:	0501      	lsls	r1, r0, #20
    LED_SETTINGS[POV_4_G_REG] &= ~POV_4_G_PIN;
 800fdf0:	bf4c      	ite	mi
 800fdf2:	f002 02fd 	andmi.w	r2, r2, #253	; 0xfd
  } else {
    LED_SETTINGS[POV_4_G_REG] |= POV_4_G_PIN;
 800fdf6:	f042 0202 	orrpl.w	r2, r2, #2
 800fdfa:	711a      	strb	r2, [r3, #4]
  }

  if ((led_map & MAP_POV_5_G) == MAP_POV_5_G) {
    LED_SETTINGS[POV_5_G_REG] &= ~POV_5_G_PIN;
 800fdfc:	785a      	ldrb	r2, [r3, #1]
  if ((led_map & MAP_POV_5_G) == MAP_POV_5_G) {
 800fdfe:	04c4      	lsls	r4, r0, #19
    LED_SETTINGS[POV_5_G_REG] &= ~POV_5_G_PIN;
 800fe00:	bf4c      	ite	mi
 800fe02:	f002 027f 	andmi.w	r2, r2, #127	; 0x7f
  } else {
    LED_SETTINGS[POV_5_G_REG] |= POV_5_G_PIN;
 800fe06:	f042 0280 	orrpl.w	r2, r2, #128	; 0x80
 800fe0a:	705a      	strb	r2, [r3, #1]
  }

  if ((led_map & MAP_POV_6_G) == MAP_POV_6_G) {
    LED_SETTINGS[POV_6_G_REG] &= ~POV_6_G_PIN;
 800fe0c:	785a      	ldrb	r2, [r3, #1]
  if ((led_map & MAP_POV_6_G) == MAP_POV_6_G) {
 800fe0e:	0481      	lsls	r1, r0, #18
    LED_SETTINGS[POV_6_G_REG] &= ~POV_6_G_PIN;
 800fe10:	bf4c      	ite	mi
 800fe12:	f002 02f7 	andmi.w	r2, r2, #247	; 0xf7
  } else {
    LED_SETTINGS[POV_6_G_REG] |= POV_6_G_PIN;
 800fe16:	f042 0208 	orrpl.w	r2, r2, #8
 800fe1a:	705a      	strb	r2, [r3, #1]
  }

  if ((led_map & MAP_POV_7_G) == MAP_POV_7_G) {
    LED_SETTINGS[POV_7_G_REG] &= ~POV_7_G_PIN;
 800fe1c:	781a      	ldrb	r2, [r3, #0]
  if ((led_map & MAP_POV_7_G) == MAP_POV_7_G) {
 800fe1e:	0444      	lsls	r4, r0, #17
    LED_SETTINGS[POV_7_G_REG] &= ~POV_7_G_PIN;
 800fe20:	bf4c      	ite	mi
 800fe22:	f002 02df 	andmi.w	r2, r2, #223	; 0xdf
  } else {
    LED_SETTINGS[POV_7_G_REG] |= POV_7_G_PIN;
 800fe26:	f042 0220 	orrpl.w	r2, r2, #32
 800fe2a:	701a      	strb	r2, [r3, #0]
  }

  if ((led_map & MAP_POV_8_G) == MAP_POV_8_G) {
    LED_SETTINGS[POV_8_G_REG] &= ~POV_8_G_PIN;
 800fe2c:	781a      	ldrb	r2, [r3, #0]
  if (LED_mutex_id != NULL) {
 800fe2e:	4c11      	ldr	r4, [pc, #68]	; (800fe74 <POV_LEDs+0x13c>)
  if ((led_map & MAP_POV_8_G) == MAP_POV_8_G) {
 800fe30:	0401      	lsls	r1, r0, #16
    LED_SETTINGS[POV_8_G_REG] &= ~POV_8_G_PIN;
 800fe32:	bf4c      	ite	mi
 800fe34:	f002 02fd 	andmi.w	r2, r2, #253	; 0xfd
  } else {
    LED_SETTINGS[POV_8_G_REG] |= POV_8_G_PIN;
 800fe38:	f042 0202 	orrpl.w	r2, r2, #2
 800fe3c:	701a      	strb	r2, [r3, #0]
  if (LED_mutex_id != NULL) {
 800fe3e:	6820      	ldr	r0, [r4, #0]
 800fe40:	b118      	cbz	r0, 800fe4a <POV_LEDs+0x112>
    osMutexWait(LED_mutex_id, osWaitForever);
 800fe42:	f04f 31ff 	mov.w	r1, #4294967295
 800fe46:	f7fb fdf3 	bl	800ba30 <osMutexWait>
  HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_RESET);
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fe50:	4809      	ldr	r0, [pc, #36]	; (800fe78 <POV_LEDs+0x140>)
 800fe52:	f7f2 f97f 	bl	8002154 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit_IT(&hspi2, LED_SETTINGS, 6);
 800fe56:	2206      	movs	r2, #6
 800fe58:	4905      	ldr	r1, [pc, #20]	; (800fe70 <POV_LEDs+0x138>)
 800fe5a:	4808      	ldr	r0, [pc, #32]	; (800fe7c <POV_LEDs+0x144>)
 800fe5c:	f7f5 fdc6 	bl	80059ec <HAL_SPI_Transmit_IT>
  if (LED_mutex_id != NULL) {
 800fe60:	6820      	ldr	r0, [r4, #0]
 800fe62:	b118      	cbz	r0, 800fe6c <POV_LEDs+0x134>
  }

  transmitToBuffer();
}
 800fe64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    osMutexRelease(LED_mutex_id);
 800fe68:	f7fb be0a 	b.w	800ba80 <osMutexRelease>
 800fe6c:	bd10      	pop	{r4, pc}
 800fe6e:	bf00      	nop
 800fe70:	20005398 	.word	0x20005398
 800fe74:	20005388 	.word	0x20005388
 800fe78:	48001000 	.word	0x48001000
 800fe7c:	20005a28 	.word	0x20005a28

0800fe80 <Flush_LEDS>:
  LED_SETTINGS[5] = 255;

  transmitToBuffer();
}

void Flush_LEDS(void) {
 800fe80:	b510      	push	{r4, lr}
  if (LED_mutex_id != NULL) {
 800fe82:	4c10      	ldr	r4, [pc, #64]	; (800fec4 <Flush_LEDS+0x44>)
  LED_SETTINGS[0] = 255;
 800fe84:	4b10      	ldr	r3, [pc, #64]	; (800fec8 <Flush_LEDS+0x48>)
  if (LED_mutex_id != NULL) {
 800fe86:	6820      	ldr	r0, [r4, #0]
  LED_SETTINGS[0] = 255;
 800fe88:	22ff      	movs	r2, #255	; 0xff
 800fe8a:	701a      	strb	r2, [r3, #0]
  LED_SETTINGS[1] = 255;
 800fe8c:	705a      	strb	r2, [r3, #1]
  LED_SETTINGS[2] = 255;
 800fe8e:	709a      	strb	r2, [r3, #2]
  LED_SETTINGS[3] = 255;
 800fe90:	70da      	strb	r2, [r3, #3]
  LED_SETTINGS[4] = 255;
 800fe92:	711a      	strb	r2, [r3, #4]
  LED_SETTINGS[5] = 255;
 800fe94:	715a      	strb	r2, [r3, #5]
  if (LED_mutex_id != NULL) {
 800fe96:	b118      	cbz	r0, 800fea0 <Flush_LEDS+0x20>
    osMutexWait(LED_mutex_id, osWaitForever);
 800fe98:	f04f 31ff 	mov.w	r1, #4294967295
 800fe9c:	f7fb fdc8 	bl	800ba30 <osMutexWait>
  HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_RESET);
 800fea0:	2200      	movs	r2, #0
 800fea2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fea6:	4809      	ldr	r0, [pc, #36]	; (800fecc <Flush_LEDS+0x4c>)
 800fea8:	f7f2 f954 	bl	8002154 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit_IT(&hspi2, LED_SETTINGS, 6);
 800feac:	2206      	movs	r2, #6
 800feae:	4906      	ldr	r1, [pc, #24]	; (800fec8 <Flush_LEDS+0x48>)
 800feb0:	4807      	ldr	r0, [pc, #28]	; (800fed0 <Flush_LEDS+0x50>)
 800feb2:	f7f5 fd9b 	bl	80059ec <HAL_SPI_Transmit_IT>
  if (LED_mutex_id != NULL) {
 800feb6:	6820      	ldr	r0, [r4, #0]
 800feb8:	b118      	cbz	r0, 800fec2 <Flush_LEDS+0x42>

  transmitToBuffer();
}
 800feba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    osMutexRelease(LED_mutex_id);
 800febe:	f7fb bddf 	b.w	800ba80 <osMutexRelease>
 800fec2:	bd10      	pop	{r4, pc}
 800fec4:	20005388 	.word	0x20005388
 800fec8:	20005398 	.word	0x20005398
 800fecc:	48001000 	.word	0x48001000
 800fed0:	20005a28 	.word	0x20005a28

0800fed4 <Set_LED>:

void Set_LED(uint8_t reg, uint8_t pin, uint8_t state) {
  // turn on LED
  if (state == 1) {
 800fed4:	2a01      	cmp	r2, #1
void Set_LED(uint8_t reg, uint8_t pin, uint8_t state) {
 800fed6:	b510      	push	{r4, lr}
  if (state == 1) {
 800fed8:	d01d      	beq.n	800ff16 <Set_LED+0x42>
    LED_SETTINGS[reg] &= ~pin;
  }
  // turn off LED
  else if (state == 0) {
 800feda:	b91a      	cbnz	r2, 800fee4 <Set_LED+0x10>
    LED_SETTINGS[reg] |= pin;
 800fedc:	4b11      	ldr	r3, [pc, #68]	; (800ff24 <Set_LED+0x50>)
 800fede:	5c1a      	ldrb	r2, [r3, r0]
 800fee0:	4311      	orrs	r1, r2
 800fee2:	5419      	strb	r1, [r3, r0]
  if (LED_mutex_id != NULL) {
 800fee4:	4c10      	ldr	r4, [pc, #64]	; (800ff28 <Set_LED+0x54>)
 800fee6:	6820      	ldr	r0, [r4, #0]
 800fee8:	b118      	cbz	r0, 800fef2 <Set_LED+0x1e>
    osMutexWait(LED_mutex_id, osWaitForever);
 800feea:	f04f 31ff 	mov.w	r1, #4294967295
 800feee:	f7fb fd9f 	bl	800ba30 <osMutexWait>
  HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_RESET);
 800fef2:	2200      	movs	r2, #0
 800fef4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fef8:	480c      	ldr	r0, [pc, #48]	; (800ff2c <Set_LED+0x58>)
 800fefa:	f7f2 f92b 	bl	8002154 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit_IT(&hspi2, LED_SETTINGS, 6);
 800fefe:	2206      	movs	r2, #6
 800ff00:	4908      	ldr	r1, [pc, #32]	; (800ff24 <Set_LED+0x50>)
 800ff02:	480b      	ldr	r0, [pc, #44]	; (800ff30 <Set_LED+0x5c>)
 800ff04:	f7f5 fd72 	bl	80059ec <HAL_SPI_Transmit_IT>
  if (LED_mutex_id != NULL) {
 800ff08:	6820      	ldr	r0, [r4, #0]
 800ff0a:	b118      	cbz	r0, 800ff14 <Set_LED+0x40>
  }

  transmitToBuffer();
}
 800ff0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    osMutexRelease(LED_mutex_id);
 800ff10:	f7fb bdb6 	b.w	800ba80 <osMutexRelease>
 800ff14:	bd10      	pop	{r4, pc}
    LED_SETTINGS[reg] &= ~pin;
 800ff16:	4a03      	ldr	r2, [pc, #12]	; (800ff24 <Set_LED+0x50>)
 800ff18:	5c13      	ldrb	r3, [r2, r0]
 800ff1a:	ea23 0101 	bic.w	r1, r3, r1
 800ff1e:	5411      	strb	r1, [r2, r0]
 800ff20:	e7e0      	b.n	800fee4 <Set_LED+0x10>
 800ff22:	bf00      	nop
 800ff24:	20005398 	.word	0x20005398
 800ff28:	20005388 	.word	0x20005388
 800ff2c:	48001000 	.word	0x48001000
 800ff30:	20005a28 	.word	0x20005a28

0800ff34 <LED_State>:

// returns 1 if LED is on, 0 otherwise
// LED is on if the bit in LED_SETTINGS is zero (because its a sink circuit)
uint8_t LED_State(uint8_t reg, uint8_t pin) {
  if ((LED_SETTINGS[reg] & pin) != 0) {
 800ff34:	4b03      	ldr	r3, [pc, #12]	; (800ff44 <LED_State+0x10>)
 800ff36:	5c1b      	ldrb	r3, [r3, r0]
 800ff38:	420b      	tst	r3, r1
    return 0;  // LED is OFF
  } else {
    return 1;  // LED is ON
  }
}
 800ff3a:	bf0c      	ite	eq
 800ff3c:	2001      	moveq	r0, #1
 800ff3e:	2000      	movne	r0, #0
 800ff40:	4770      	bx	lr
 800ff42:	bf00      	nop
 800ff44:	20005398 	.word	0x20005398

0800ff48 <activateLidar>:
	LED_Lidar_Active = 0;
}

//turn on LIDAR (only works if 3.3V Power Switch is set (enabled) )
void activateLidar(void){
    HAL_GPIO_WritePin(VL_XSHUT_GPIO_Port, VL_XSHUT_Pin, GPIO_PIN_SET);
 800ff48:	2201      	movs	r2, #1
 800ff4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ff4e:	4801      	ldr	r0, [pc, #4]	; (800ff54 <activateLidar+0xc>)
 800ff50:	f7f2 b900 	b.w	8002154 <HAL_GPIO_WritePin>
 800ff54:	48000c00 	.word	0x48000c00

0800ff58 <get_lidar_POV_map>:
void genPOV_Map(int16_t* measurement){
	POV_map = ( ((uint16_t) (*measurement / ((float) MEASUREMENT_POV_DIVISOR)) ) % 64);
}

uint32_t get_lidar_POV_map(void){
	return POV_map;
 800ff58:	4b01      	ldr	r3, [pc, #4]	; (800ff60 <get_lidar_POV_map+0x8>)
}
 800ff5a:	6818      	ldr	r0, [r3, #0]
 800ff5c:	4770      	bx	lr
 800ff5e:	bf00      	nop
 800ff60:	2000527c 	.word	0x2000527c
 800ff64:	00000000 	.word	0x00000000

0800ff68 <LidarMeasurement>:


}

void LidarMeasurement(void)
{
 800ff68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    HAL_GPIO_WritePin(VL_XSHUT_GPIO_Port, VL_XSHUT_Pin, GPIO_PIN_SET);
 800ff6c:	2201      	movs	r2, #1
{
 800ff6e:	ed2d 8b02 	vpush	{d8}
    HAL_GPIO_WritePin(VL_XSHUT_GPIO_Port, VL_XSHUT_Pin, GPIO_PIN_SET);
 800ff72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ff76:	4872      	ldr	r0, [pc, #456]	; (8010140 <LidarMeasurement+0x1d8>)
  //int IntCount;

  activateLidar();
  HAL_Delay(500);
  osDelay(5);
  Dev->I2cHandle = &hi2c3;
 800ff78:	4c72      	ldr	r4, [pc, #456]	; (8010144 <LidarMeasurement+0x1dc>)
 800ff7a:	4e73      	ldr	r6, [pc, #460]	; (8010148 <LidarMeasurement+0x1e0>)
 800ff7c:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 8010168 <LidarMeasurement+0x200>
 800ff80:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 801016c <LidarMeasurement+0x204>
	POV_map = ( ((uint16_t) (*measurement / ((float) MEASUREMENT_POV_DIVISOR)) ) % 64);
 800ff84:	ed9f 8a71 	vldr	s16, [pc, #452]	; 801014c <LidarMeasurement+0x1e4>
	lidar_map = 0x0001 << ( ((uint16_t) (*measurement / ((float) MEASUREMENT_DIVISOR)) ) % 16);
 800ff88:	eddf 8a71 	vldr	s17, [pc, #452]	; 8010150 <LidarMeasurement+0x1e8>
    HAL_GPIO_WritePin(VL_XSHUT_GPIO_Port, VL_XSHUT_Pin, GPIO_PIN_SET);
 800ff8c:	f7f2 f8e2 	bl	8002154 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800ff90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ff94:	f7f0 ffde 	bl	8000f54 <HAL_Delay>
  osDelay(5);
 800ff98:	2005      	movs	r0, #5
 800ff9a:	f7fb fccf 	bl	800b93c <osDelay>
  Dev->I2cHandle = &hi2c3;
 800ff9e:	6820      	ldr	r0, [r4, #0]
 800ffa0:	4b6c      	ldr	r3, [pc, #432]	; (8010154 <LidarMeasurement+0x1ec>)
 800ffa2:	f8c0 33a0 	str.w	r3, [r0, #928]	; 0x3a0
  Dev->I2cDevAddr = 0x52;
 800ffa6:	2352      	movs	r3, #82	; 0x52
 800ffa8:	f880 3398 	strb.w	r3, [r0, #920]	; 0x398
  static VL53L1_RangingMeasurementData_t RangingData;
  //printf("Autonomous Ranging Test\n");
  status = VL53L1_WaitDeviceBooted(Dev);
 800ffac:	f7f8 f84e 	bl	800804c <VL53L1_WaitDeviceBooted>
  status = VL53L1_DataInit(Dev);
 800ffb0:	6820      	ldr	r0, [r4, #0]
 800ffb2:	f7f8 f807 	bl	8007fc4 <VL53L1_DataInit>
  status = VL53L1_StaticInit(Dev);
 800ffb6:	6820      	ldr	r0, [r4, #0]
 800ffb8:	f7f8 f9c0 	bl	800833c <VL53L1_StaticInit>
  status = VL53L1_SetDistanceMode(Dev, VL53L1_DISTANCEMODE_SHORT);
 800ffbc:	2101      	movs	r1, #1
 800ffbe:	6820      	ldr	r0, [r4, #0]
 800ffc0:	f7f8 f848 	bl	8008054 <VL53L1_SetDistanceMode>
  status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(Dev, 20000);
 800ffc4:	f644 6120 	movw	r1, #20000	; 0x4e20
 800ffc8:	6820      	ldr	r0, [r4, #0]
 800ffca:	f7f8 f933 	bl	8008234 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
  status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev, 22);
 800ffce:	2116      	movs	r1, #22
 800ffd0:	6820      	ldr	r0, [r4, #0]
 800ffd2:	f7f8 fa67 	bl	80084a4 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
  status = VL53L1_StartMeasurement(Dev);
 800ffd6:	6820      	ldr	r0, [r4, #0]
 800ffd8:	f7f8 fa6e 	bl	80084b8 <VL53L1_StartMeasurement>
  status = VL53L1_ClearInterruptAndStartMeasurement(Dev);
 800ffdc:	6820      	ldr	r0, [r4, #0]
 800ffde:	f7f8 fab3 	bl	8008548 <VL53L1_ClearInterruptAndStartMeasurement>
  while(1){
	  	osSemaphoreWait( lidarSampleReadySemaphoreHandle, osWaitForever);
		status = VL53L1_GetRangingMeasurementData(Dev, &RangingData);
 800ffe2:	4637      	mov	r7, r6
 800ffe4:	e023      	b.n	801002e <LidarMeasurement+0xc6>
			else if(abs(measurement_hist-RangingData.RangeMilliMeter) > THRESH_MEAS){
				measurement_hist = RangingData.RangeMilliMeter;
				LidarMeasurementHandler(&RangingData.RangeMilliMeter);
			}
			else{
				measurement_hist = measurement_hist * ALPHA_MEAS + RangingData.RangeMilliMeter * BETA_MEAS;
 800ffe6:	f7f0 fa5d 	bl	80004a4 <__aeabi_i2d>
 800ffea:	a351      	add	r3, pc, #324	; (adr r3, 8010130 <LidarMeasurement+0x1c8>)
 800ffec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fff0:	f7f0 fabe 	bl	8000570 <__aeabi_dmul>
 800fff4:	4680      	mov	r8, r0
 800fff6:	4628      	mov	r0, r5
 800fff8:	4689      	mov	r9, r1
 800fffa:	f7f0 fa53 	bl	80004a4 <__aeabi_i2d>
 800fffe:	a34e      	add	r3, pc, #312	; (adr r3, 8010138 <LidarMeasurement+0x1d0>)
 8010000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010004:	f7f0 fab4 	bl	8000570 <__aeabi_dmul>
 8010008:	4602      	mov	r2, r0
 801000a:	460b      	mov	r3, r1
 801000c:	4640      	mov	r0, r8
 801000e:	4649      	mov	r1, r9
 8010010:	f7f0 f8fc 	bl	800020c <__adddf3>
 8010014:	f7f0 fd5c 	bl	8000ad0 <__aeabi_d2iz>
 8010018:	f8ab 0000 	strh.w	r0, [fp]
			}

		}
		taskEXIT_CRITICAL();
 801001c:	f7fb fe94 	bl	800bd48 <vPortExitCritical>
		status = VL53L1_ClearInterruptAndStartMeasurement(Dev);
 8010020:	6820      	ldr	r0, [r4, #0]
 8010022:	f7f8 fa91 	bl	8008548 <VL53L1_ClearInterruptAndStartMeasurement>
		//VL53L1_clear_int_and_enable_range();
		if(isLidarModeActive() == 0) lidarStop();
 8010026:	f001 fb5b 	bl	80116e0 <isLidarModeActive>
 801002a:	2800      	cmp	r0, #0
 801002c:	d03b      	beq.n	80100a6 <LidarMeasurement+0x13e>
	  	osSemaphoreWait( lidarSampleReadySemaphoreHandle, osWaitForever);
 801002e:	f04f 31ff 	mov.w	r1, #4294967295
 8010032:	f8da 0000 	ldr.w	r0, [sl]
 8010036:	f7fb fd5f 	bl	800baf8 <osSemaphoreWait>
		status = VL53L1_GetRangingMeasurementData(Dev, &RangingData);
 801003a:	4639      	mov	r1, r7
 801003c:	6820      	ldr	r0, [r4, #0]
 801003e:	f7f8 fa87 	bl	8008550 <VL53L1_GetRangingMeasurementData>
 8010042:	4605      	mov	r5, r0
		taskENTER_CRITICAL();
 8010044:	f7fb fe5e 	bl	800bd04 <vPortEnterCritical>
		if(status == VL53L1_RANGESTATUS_RANGE_VALID){
 8010048:	2d00      	cmp	r5, #0
 801004a:	d1e7      	bne.n	801001c <LidarMeasurement+0xb4>
			if(measurement_hist == -1){
 801004c:	f9bb 0000 	ldrsh.w	r0, [fp]
 8010050:	1c43      	adds	r3, r0, #1
 8010052:	d02e      	beq.n	80100b2 <LidarMeasurement+0x14a>
			else if(abs(measurement_hist-RangingData.RangeMilliMeter) > THRESH_MEAS){
 8010054:	f9b6 5018 	ldrsh.w	r5, [r6, #24]
 8010058:	1b43      	subs	r3, r0, r5
 801005a:	2b00      	cmp	r3, #0
 801005c:	bfb8      	it	lt
 801005e:	425b      	neglt	r3, r3
 8010060:	2b03      	cmp	r3, #3
 8010062:	ddc0      	ble.n	800ffe6 <LidarMeasurement+0x7e>
	if(*measurement > MAX_LIDAR_MEASUREMENT){
 8010064:	8b33      	ldrh	r3, [r6, #24]
	calcLidarFreq(measurement);
 8010066:	483c      	ldr	r0, [pc, #240]	; (8010158 <LidarMeasurement+0x1f0>)
				measurement_hist = RangingData.RangeMilliMeter;
 8010068:	f8ab 5000 	strh.w	r5, [fp]
	if(*measurement > MAX_LIDAR_MEASUREMENT){
 801006c:	f240 5214 	movw	r2, #1300	; 0x514
 8010070:	b21b      	sxth	r3, r3
 8010072:	4293      	cmp	r3, r2
		*measurement = MAX_LIDAR_MEASUREMENT;
 8010074:	bfc8      	it	gt
 8010076:	8332      	strhgt	r2, [r6, #24]
	calcLidarFreq(measurement);
 8010078:	f001 fc0a 	bl	8011890 <calcLidarFreq>
	if(isButtonEnabled() == 1){
 801007c:	f000 fca4 	bl	80109c8 <isButtonEnabled>
 8010080:	2801      	cmp	r0, #1
 8010082:	d03e      	beq.n	8010102 <LidarMeasurement+0x19a>
	POV_map = ( ((uint16_t) (*measurement / ((float) MEASUREMENT_POV_DIVISOR)) ) % 64);
 8010084:	f9b6 3018 	ldrsh.w	r3, [r6, #24]
 8010088:	4a34      	ldr	r2, [pc, #208]	; (801015c <LidarMeasurement+0x1f4>)
 801008a:	ee07 3a90 	vmov	s15, r3
 801008e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010092:	ee67 7a88 	vmul.f32	s15, s15, s16
 8010096:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801009a:	ee17 3a90 	vmov	r3, s15
 801009e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80100a2:	6013      	str	r3, [r2, #0]
 80100a4:	e7ba      	b.n	801001c <LidarMeasurement+0xb4>
	lidar_measurement  = ((uint16_t)packet[13]) << 8; // high byte
	lidar_measurement |= packet[14];      // low byte
}

void lidarStop(void){
	status = VL53L1_StopMeasurement(Dev);
 80100a6:	6820      	ldr	r0, [r4, #0]
 80100a8:	f7f8 fa44 	bl	8008534 <VL53L1_StopMeasurement>
 80100ac:	4b2c      	ldr	r3, [pc, #176]	; (8010160 <LidarMeasurement+0x1f8>)
 80100ae:	6018      	str	r0, [r3, #0]
 80100b0:	e7bd      	b.n	801002e <LidarMeasurement+0xc6>
	if(*measurement > MAX_LIDAR_MEASUREMENT){
 80100b2:	8b33      	ldrh	r3, [r6, #24]
				measurement_hist = RangingData.RangeMilliMeter;
 80100b4:	8b32      	ldrh	r2, [r6, #24]
 80100b6:	f8ab 2000 	strh.w	r2, [fp]
	if(*measurement > MAX_LIDAR_MEASUREMENT){
 80100ba:	b21b      	sxth	r3, r3
 80100bc:	f240 5214 	movw	r2, #1300	; 0x514
 80100c0:	4293      	cmp	r3, r2
	calcLidarFreq(measurement);
 80100c2:	4825      	ldr	r0, [pc, #148]	; (8010158 <LidarMeasurement+0x1f0>)
		*measurement = MAX_LIDAR_MEASUREMENT;
 80100c4:	bfc8      	it	gt
 80100c6:	8332      	strhgt	r2, [r6, #24]
	calcLidarFreq(measurement);
 80100c8:	f001 fbe2 	bl	8011890 <calcLidarFreq>
	if(isButtonEnabled() == 1){
 80100cc:	f000 fc7c 	bl	80109c8 <isButtonEnabled>
 80100d0:	2801      	cmp	r0, #1
 80100d2:	d1d7      	bne.n	8010084 <LidarMeasurement+0x11c>
	lidar_map = 0x0001 << ( ((uint16_t) (*measurement / ((float) MEASUREMENT_DIVISOR)) ) % 16);
 80100d4:	f9b6 3018 	ldrsh.w	r3, [r6, #24]
 80100d8:	4a22      	ldr	r2, [pc, #136]	; (8010164 <LidarMeasurement+0x1fc>)
 80100da:	ee07 3a90 	vmov	s15, r3
 80100de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80100e2:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80100e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80100ea:	ee17 3a90 	vmov	r3, s15
 80100ee:	f003 030f 	and.w	r3, r3, #15
 80100f2:	fa00 f303 	lsl.w	r3, r0, r3
 80100f6:	b29b      	uxth	r3, r3
		POV_LEDs(lidar_map);
 80100f8:	4618      	mov	r0, r3
	lidar_map = 0x0001 << ( ((uint16_t) (*measurement / ((float) MEASUREMENT_DIVISOR)) ) % 16);
 80100fa:	8013      	strh	r3, [r2, #0]
		POV_LEDs(lidar_map);
 80100fc:	f7ff fe1c 	bl	800fd38 <POV_LEDs>
 8010100:	e7c0      	b.n	8010084 <LidarMeasurement+0x11c>
	lidar_map = 0x0001 << ( ((uint16_t) (*measurement / ((float) MEASUREMENT_DIVISOR)) ) % 16);
 8010102:	f9b6 3018 	ldrsh.w	r3, [r6, #24]
 8010106:	4a17      	ldr	r2, [pc, #92]	; (8010164 <LidarMeasurement+0x1fc>)
 8010108:	ee07 3a90 	vmov	s15, r3
 801010c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010110:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8010114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010118:	ee17 3a90 	vmov	r3, s15
 801011c:	f003 030f 	and.w	r3, r3, #15
 8010120:	4098      	lsls	r0, r3
 8010122:	b283      	uxth	r3, r0
		POV_LEDs(lidar_map);
 8010124:	4618      	mov	r0, r3
	lidar_map = 0x0001 << ( ((uint16_t) (*measurement / ((float) MEASUREMENT_DIVISOR)) ) % 16);
 8010126:	8013      	strh	r3, [r2, #0]
		POV_LEDs(lidar_map);
 8010128:	f7ff fe06 	bl	800fd38 <POV_LEDs>
 801012c:	e7aa      	b.n	8010084 <LidarMeasurement+0x11c>
 801012e:	bf00      	nop
 8010130:	cccccccd 	.word	0xcccccccd
 8010134:	3feccccc 	.word	0x3feccccc
 8010138:	9999999a 	.word	0x9999999a
 801013c:	3fb99999 	.word	0x3fb99999
 8010140:	48000c00 	.word	0x48000c00
 8010144:	20000034 	.word	0x20000034
 8010148:	20005280 	.word	0x20005280
 801014c:	3dcccccd 	.word	0x3dcccccd
 8010150:	3d4ccccd 	.word	0x3d4ccccd
 8010154:	200054e8 	.word	0x200054e8
 8010158:	20005298 	.word	0x20005298
 801015c:	2000527c 	.word	0x2000527c
 8010160:	20005978 	.word	0x20005978
 8010164:	2000529c 	.word	0x2000529c
 8010168:	200054e0 	.word	0x200054e0
 801016c:	20000038 	.word	0x20000038

08010170 <lidarStop>:
void lidarStop(void){
 8010170:	b508      	push	{r3, lr}
	status = VL53L1_StopMeasurement(Dev);
 8010172:	4b03      	ldr	r3, [pc, #12]	; (8010180 <lidarStop+0x10>)
 8010174:	6818      	ldr	r0, [r3, #0]
 8010176:	f7f8 f9dd 	bl	8008534 <VL53L1_StopMeasurement>
 801017a:	4b02      	ldr	r3, [pc, #8]	; (8010184 <lidarStop+0x14>)
 801017c:	6018      	str	r0, [r3, #0]
 801017e:	bd08      	pop	{r3, pc}
 8010180:	20000034 	.word	0x20000034
 8010184:	20005978 	.word	0x20005978

08010188 <lidarStart>:
}

void lidarStart(void){
 8010188:	b510      	push	{r4, lr}
	status = VL53L1_StartMeasurement(Dev);
 801018a:	4c06      	ldr	r4, [pc, #24]	; (80101a4 <lidarStart+0x1c>)
 801018c:	6820      	ldr	r0, [r4, #0]
 801018e:	f7f8 f993 	bl	80084b8 <VL53L1_StartMeasurement>
 8010192:	4b05      	ldr	r3, [pc, #20]	; (80101a8 <lidarStart+0x20>)
 8010194:	4602      	mov	r2, r0
	VL53L1_ClearInterruptAndStartMeasurement(Dev);
 8010196:	6820      	ldr	r0, [r4, #0]
	status = VL53L1_StartMeasurement(Dev);
 8010198:	601a      	str	r2, [r3, #0]
}
 801019a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	VL53L1_ClearInterruptAndStartMeasurement(Dev);
 801019e:	f7f8 b9d3 	b.w	8008548 <VL53L1_ClearInterruptAndStartMeasurement>
 80101a2:	bf00      	nop
 80101a4:	20000034 	.word	0x20000034
 80101a8:	20005978 	.word	0x20005978

080101ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80101ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80101b0:	2100      	movs	r1, #0
{
 80101b2:	b0bc      	sub	sp, #240	; 0xf0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80101b4:	460c      	mov	r4, r1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80101b6:	a805      	add	r0, sp, #20
 80101b8:	2244      	movs	r2, #68	; 0x44
 80101ba:	f003 f9fa 	bl	80135b2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80101be:	4621      	mov	r1, r4
 80101c0:	2298      	movs	r2, #152	; 0x98
 80101c2:	a816      	add	r0, sp, #88	; 0x58
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80101c4:	9401      	str	r4, [sp, #4]
 80101c6:	9400      	str	r4, [sp, #0]
 80101c8:	9402      	str	r4, [sp, #8]
 80101ca:	9403      	str	r4, [sp, #12]
 80101cc:	9404      	str	r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80101ce:	f003 f9f0 	bl	80135b2 <memset>

  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80101d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80101d6:	f7f3 fda1 	bl	8003d1c <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
  /**Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80101da:	f7f3 fd85 	bl	8003ce8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80101de:	4a25      	ldr	r2, [pc, #148]	; (8010274 <SystemClock_Config+0xc8>)

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 80101e0:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8010278 <SystemClock_Config+0xcc>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80101e4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80101e8:	f023 0318 	bic.w	r3, r3, #24
 80101ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80101f0:	2205      	movs	r2, #5
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80101f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80101f6:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80101f8:	2603      	movs	r6, #3
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80101fa:	2701      	movs	r7, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80101fc:	9205      	str	r2, [sp, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80101fe:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLN = 20;
 8010200:	2214      	movs	r2, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8010202:	2304      	movs	r3, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010204:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLN = 20;
 8010206:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8010208:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 801020a:	9707      	str	r7, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 1;
 801020c:	9711      	str	r7, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801020e:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8010210:	9514      	str	r5, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8010212:	9515      	str	r5, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8010214:	9610      	str	r6, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010216:	f7f3 fe61 	bl	8003edc <HAL_RCC_OscConfig>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 801021a:	4631      	mov	r1, r6
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801021c:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 801021e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010220:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8010222:	9601      	str	r6, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8010224:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8010226:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8010228:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 801022a:	f7f4 f997 	bl	800455c <HAL_RCC_ClockConfig>
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 801022e:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8010232:	f44f 7e80 	mov.w	lr, #256	; 0x100
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8010236:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 801023a:	2208      	movs	r2, #8
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 801023c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8010240:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8010242:	9425      	str	r4, [sp, #148]	; 0x94
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8010244:	9427      	str	r4, [sp, #156]	; 0x9c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8010246:	942b      	str	r4, [sp, #172]	; 0xac
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8010248:	942c      	str	r4, [sp, #176]	; 0xb0
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 801024a:	942d      	str	r4, [sp, #180]	; 0xb4
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 801024c:	9617      	str	r6, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 801024e:	9718      	str	r7, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8010250:	951a      	str	r5, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8010252:	951b      	str	r5, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8010254:	951c      	str	r5, [sp, #112]	; 0x70
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8010256:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 801025a:	f8cd c0d8 	str.w	ip, [sp, #216]	; 0xd8
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 801025e:	f8cd e0ec 	str.w	lr, [sp, #236]	; 0xec
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8010262:	9134      	str	r1, [sp, #208]	; 0xd0
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8010264:	9219      	str	r2, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8010266:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8010268:	f7f4 fc0c 	bl	8004a84 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 801026c:	b03c      	add	sp, #240	; 0xf0
 801026e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010272:	bf00      	nop
 8010274:	40021000 	.word	0x40021000
 8010278:	000a41c5 	.word	0x000a41c5

0801027c <main>:
{
 801027c:	b508      	push	{r3, lr}
  HAL_Init();
 801027e:	f7f0 fe47 	bl	8000f10 <HAL_Init>
  SystemClock_Config();
 8010282:	f7ff ff93 	bl	80101ac <SystemClock_Config>
  MX_GPIO_Init();
 8010286:	f7fe fe6b 	bl	800ef60 <MX_GPIO_Init>
  MX_DMA_Init();
 801028a:	f7fe fd05 	bl	800ec98 <MX_DMA_Init>
  MX_TIM6_Init();
 801028e:	f000 fedf 	bl	8011050 <MX_TIM6_Init>
  MX_DAC1_Init();
 8010292:	f7fe fc73 	bl	800eb7c <MX_DAC1_Init>
  MX_SPI2_Init();
 8010296:	f000 fc33 	bl	8010b00 <MX_SPI2_Init>
  MX_TIM1_Init();
 801029a:	f000 fdc7 	bl	8010e2c <MX_TIM1_Init>
  MX_TIM16_Init();
 801029e:	f000 ff25 	bl	80110ec <MX_TIM16_Init>
  MX_TIM17_Init();
 80102a2:	f000 ff3d 	bl	8011120 <MX_TIM17_Init>
  MX_I2C1_Init();
 80102a6:	f7fe ffeb 	bl	800f280 <MX_I2C1_Init>
  MX_I2C3_Init();
 80102aa:	f7ff f845 	bl	800f338 <MX_I2C3_Init>
  MX_USART3_UART_Init();
 80102ae:	f001 f81b 	bl	80112e8 <MX_USART3_UART_Init>
  MX_SDMMC1_SD_Init();
 80102b2:	f000 fbbd 	bl	8010a30 <MX_SDMMC1_SD_Init>
  MX_RTC_Init();
 80102b6:	f000 fb8d 	bl	80109d4 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80102ba:	f000 ffdf 	bl	801127c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80102be:	f7fe f96f 	bl	800e5a0 <MX_ADC1_Init>
  MX_TIM7_Init();
 80102c2:	f000 feed 	bl	80110a0 <MX_TIM7_Init>
  MX_I2C2_Init();
 80102c6:	f7ff f809 	bl	800f2dc <MX_I2C2_Init>
  MX_TIM3_Init();
 80102ca:	f000 fe51 	bl	8010f70 <MX_TIM3_Init>
  MX_TIM4_Init();
 80102ce:	f000 fe87 	bl	8010fe0 <MX_TIM4_Init>
  MX_COMP1_Init();
 80102d2:	f7fe fc01 	bl	800ead8 <MX_COMP1_Init>
  HAL_GPIO_WritePin(POWER_SWITCH_GPIO_Port, POWER_SWITCH_Pin, GPIO_PIN_SET);
 80102d6:	2201      	movs	r2, #1
 80102d8:	2110      	movs	r1, #16
 80102da:	481e      	ldr	r0, [pc, #120]	; (8010354 <main+0xd8>)
 80102dc:	f7f1 ff3a 	bl	8002154 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BT_EN_GPIO_Port, BT_EN_Pin, GPIO_PIN_SET);
 80102e0:	2201      	movs	r2, #1
 80102e2:	4611      	mov	r1, r2
 80102e4:	481b      	ldr	r0, [pc, #108]	; (8010354 <main+0xd8>)
 80102e6:	f7f1 ff35 	bl	8002154 <HAL_GPIO_WritePin>
  activateLidar();
 80102ea:	f7ff fe2d 	bl	800ff48 <activateLidar>
  HAL_Delay(100);
 80102ee:	2064      	movs	r0, #100	; 0x64
 80102f0:	f7f0 fe30 	bl	8000f54 <HAL_Delay>
  HAL_TIM_Base_Start(&htim1);
 80102f4:	4818      	ldr	r0, [pc, #96]	; (8010358 <main+0xdc>)
 80102f6:	f7f5 fd6b 	bl	8005dd0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80102fa:	2100      	movs	r1, #0
 80102fc:	4816      	ldr	r0, [pc, #88]	; (8010358 <main+0xdc>)
 80102fe:	f7f5 fe4b 	bl	8005f98 <HAL_TIM_PWM_Start>
  Setup_Cap_Touch();
 8010302:	f7fe f9bf 	bl	800e684 <Setup_Cap_Touch>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8010306:	4915      	ldr	r1, [pc, #84]	; (801035c <main+0xe0>)
  DWT->CYCCNT = 0; // reset the counter
 8010308:	4b15      	ldr	r3, [pc, #84]	; (8010360 <main+0xe4>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 801030a:	68ca      	ldr	r2, [r1, #12]
  HAL_TIM_Base_Start(&htim6);
 801030c:	4815      	ldr	r0, [pc, #84]	; (8010364 <main+0xe8>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 801030e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  DWT->CYCCNT = 0; // reset the counter
 8010312:	2400      	movs	r4, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8010314:	60ca      	str	r2, [r1, #12]
  DWT->CYCCNT = 0; // reset the counter
 8010316:	605c      	str	r4, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // enable the counter
 8010318:	681a      	ldr	r2, [r3, #0]
 801031a:	f042 0201 	orr.w	r2, r2, #1
 801031e:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start(&htim6);
 8010320:	f7f5 fd56 	bl	8005dd0 <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8010324:	4621      	mov	r1, r4
 8010326:	4810      	ldr	r0, [pc, #64]	; (8010368 <main+0xec>)
 8010328:	f7f1 faba 	bl	80018a0 <HAL_DAC_Start>
  prepBuffer(&hdac1);
 801032c:	480e      	ldr	r0, [pc, #56]	; (8010368 <main+0xec>)
 801032e:	f002 f909 	bl	8012544 <prepBuffer>
  Flush_LEDS();
 8010332:	f7ff fda5 	bl	800fe80 <Flush_LEDS>
  HAL_GPIO_WritePin(HALL_CNTRL_GPIO_Port, HALL_CNTRL_Pin, GPIO_PIN_SET);
 8010336:	2201      	movs	r2, #1
 8010338:	2140      	movs	r1, #64	; 0x40
 801033a:	480c      	ldr	r0, [pc, #48]	; (801036c <main+0xf0>)
 801033c:	f7f1 ff0a 	bl	8002154 <HAL_GPIO_WritePin>
  initFilter();
 8010340:	f7fe fccc 	bl	800ecdc <initFilter>
  HAL_COMP_Start(&hcomp1);
 8010344:	480a      	ldr	r0, [pc, #40]	; (8010370 <main+0xf4>)
 8010346:	f7f1 f9e9 	bl	800171c <HAL_COMP_Start>
  MX_FREERTOS_Init();
 801034a:	f7fe fdf5 	bl	800ef38 <MX_FREERTOS_Init>
  osKernelStart();
 801034e:	f7fb fad7 	bl	800b900 <osKernelStart>
 8010352:	e7fe      	b.n	8010352 <main+0xd6>
 8010354:	48001000 	.word	0x48001000
 8010358:	20005bcc 	.word	0x20005bcc
 801035c:	e000edf0 	.word	0xe000edf0
 8010360:	e0001000 	.word	0xe0001000
 8010364:	20005b8c 	.word	0x20005b8c
 8010368:	20005450 	.word	0x20005450
 801036c:	48000c00 	.word	0x48000c00
 8010370:	20005424 	.word	0x20005424

08010374 <HAL_COMP_TriggerCallback>:
//		ledOut2(15);
//	}
//}

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp){
	HALL_Handler();
 8010374:	f7fe bf34 	b.w	800f1e0 <HALL_Handler>

08010378 <HAL_GPIO_EXTI_Callback>:
//volatile uint8_t LED_state = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if(GPIO_Pin == CAP_ALERT_Pin){
 8010378:	2820      	cmp	r0, #32
{
 801037a:	b508      	push	{r3, lr}
  if(GPIO_Pin == CAP_ALERT_Pin){
 801037c:	d009      	beq.n	8010392 <HAL_GPIO_EXTI_Callback+0x1a>
	  //
	  if (isCapModeActive()) osSemaphoreRelease (capSampleSemaphoreHandle);
	  //if (isCapModeActive()) Sample_Cap_Touch();
	  //Sample_Cap_Touch();
  }
  else if(GPIO_Pin == VL_INT_Pin){
 801037e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8010382:	d00a      	beq.n	801039a <HAL_GPIO_EXTI_Callback+0x22>
//		  HAL_GPIO_TogglePin(LED_LAT_GPIO_Port, LED_LAT_Pin);
//		  LidarMeasurement();
//	  }
	  //LidarMeasurement();
  }
  else if(GPIO_Pin == HALL_INT_Pin){
 8010384:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8010388:	d006      	beq.n	8010398 <HAL_GPIO_EXTI_Callback+0x20>
	  ResistiveTouchSampler();
  }
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 801038a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  ResistiveTouchSampler();
 801038e:	f000 b887 	b.w	80104a0 <ResistiveTouchSampler>
	  if (isCapModeActive()) osSemaphoreRelease (capSampleSemaphoreHandle);
 8010392:	f001 f9ad 	bl	80116f0 <isCapModeActive>
 8010396:	b950      	cbnz	r0, 80103ae <HAL_GPIO_EXTI_Callback+0x36>
 8010398:	bd08      	pop	{r3, pc}
	  if(isLidarModeActive()) osSemaphoreRelease (lidarSampleReadySemaphoreHandle);
 801039a:	f001 f9a1 	bl	80116e0 <isLidarModeActive>
 801039e:	2800      	cmp	r0, #0
 80103a0:	d0fa      	beq.n	8010398 <HAL_GPIO_EXTI_Callback+0x20>
 80103a2:	4b06      	ldr	r3, [pc, #24]	; (80103bc <HAL_GPIO_EXTI_Callback+0x44>)
 80103a4:	6818      	ldr	r0, [r3, #0]
}
 80103a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  if(isLidarModeActive()) osSemaphoreRelease (lidarSampleReadySemaphoreHandle);
 80103aa:	f7fb bbcd 	b.w	800bb48 <osSemaphoreRelease>
	  if (isCapModeActive()) osSemaphoreRelease (capSampleSemaphoreHandle);
 80103ae:	4b04      	ldr	r3, [pc, #16]	; (80103c0 <HAL_GPIO_EXTI_Callback+0x48>)
 80103b0:	6818      	ldr	r0, [r3, #0]
}
 80103b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  if (isCapModeActive()) osSemaphoreRelease (capSampleSemaphoreHandle);
 80103b6:	f7fb bbc7 	b.w	800bb48 <osSemaphoreRelease>
 80103ba:	bf00      	nop
 80103bc:	200054e0 	.word	0x200054e0
 80103c0:	20005420 	.word	0x20005420

080103c4 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 80103c4:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_SET);
 80103c6:	4807      	ldr	r0, [pc, #28]	; (80103e4 <HAL_SPI_TxCpltCallback+0x20>)
 80103c8:	2201      	movs	r2, #1
 80103ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80103ce:	f7f1 fec1 	bl	8002154 <HAL_GPIO_WritePin>

	if (LED_mutex_id != NULL)  {
 80103d2:	4b05      	ldr	r3, [pc, #20]	; (80103e8 <HAL_SPI_TxCpltCallback+0x24>)
 80103d4:	6818      	ldr	r0, [r3, #0]
 80103d6:	b118      	cbz	r0, 80103e0 <HAL_SPI_TxCpltCallback+0x1c>
		osMutexRelease(LED_mutex_id);
	}
}
 80103d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		osMutexRelease(LED_mutex_id);
 80103dc:	f7fb bb50 	b.w	800ba80 <osMutexRelease>
 80103e0:	bd08      	pop	{r3, pc}
 80103e2:	bf00      	nop
 80103e4:	48001000 	.word	0x48001000
 80103e8:	20005388 	.word	0x20005388

080103ec <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80103ec:	6803      	ldr	r3, [r0, #0]
 80103ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80103f2:	d008      	beq.n	8010406 <HAL_TIM_PeriodElapsedCallback+0x1a>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */
  else if (htim->Instance == TIM3) {
 80103f4:	4a06      	ldr	r2, [pc, #24]	; (8010410 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80103f6:	4293      	cmp	r3, r2
 80103f8:	d007      	beq.n	801040a <HAL_TIM_PeriodElapsedCallback+0x1e>
    POV_Update();
  }
  else if (htim->Instance == TIM4) {
 80103fa:	4a06      	ldr	r2, [pc, #24]	; (8010414 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80103fc:	4293      	cmp	r3, r2
 80103fe:	d000      	beq.n	8010402 <HAL_TIM_PeriodElapsedCallback+0x16>
 8010400:	4770      	bx	lr
    enable_buttons();
 8010402:	f000 bac1 	b.w	8010988 <enable_buttons>
    HAL_IncTick();
 8010406:	f7f0 bd97 	b.w	8000f38 <HAL_IncTick>
    POV_Update();
 801040a:	f7ff bb4b 	b.w	800faa4 <POV_Update>
 801040e:	bf00      	nop
 8010410:	40000400 	.word	0x40000400
 8010414:	40000800 	.word	0x40000800

08010418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8010418:	4770      	bx	lr
 801041a:	bf00      	nop

0801041c <buttonStateMachine>:

		buttonStateMachine();
	}
}

void buttonStateMachine(void){
 801041c:	b538      	push	{r3, r4, r5, lr}
	// if accelerometer is enabled, start FreeRTOS Thread Timer
	if( (LED_State(BUTTON_4_G_REG, BUTTON_4_G_PIN) == LED_ON) && (accTimer == 0)){
 801041e:	2120      	movs	r1, #32
 8010420:	2001      	movs	r0, #1
 8010422:	f7ff fd87 	bl	800ff34 <LED_State>
 8010426:	2801      	cmp	r0, #1
 8010428:	d020      	beq.n	801046c <buttonStateMachine+0x50>
		osTimerStart(accSampleTimerHandle, 100);
		accTimer = 1;
	}else if ( (LED_State(BUTTON_4_G_REG, BUTTON_4_G_PIN) == LED_OFF) && (accTimer == 1) ){
 801042a:	2120      	movs	r1, #32
 801042c:	2001      	movs	r0, #1
 801042e:	f7ff fd81 	bl	800ff34 <LED_State>
 8010432:	4604      	mov	r4, r0
 8010434:	b160      	cbz	r0, 8010450 <buttonStateMachine+0x34>
		osTimerStop(accSampleTimerHandle);
		accTimer = 0;

	}

	if(LED_State(BUTTON_5_G_REG, BUTTON_5_G_PIN)){
 8010436:	2180      	movs	r1, #128	; 0x80
 8010438:	2000      	movs	r0, #0
 801043a:	f7ff fd7b 	bl	800ff34 <LED_State>
 801043e:	bb30      	cbnz	r0, 801048e <buttonStateMachine+0x72>
		turnOnLidarSounds();
	}
	else if(LED_State(BUTTON_6_G_REG, BUTTON_6_G_PIN)){
 8010440:	2108      	movs	r1, #8
 8010442:	f7ff fd77 	bl	800ff34 <LED_State>
 8010446:	b968      	cbnz	r0, 8010464 <buttonStateMachine+0x48>
		turnOnCapSounds();
	}else{
		turnOffSounds();
	}
}
 8010448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		turnOffSounds();
 801044c:	f001 ba0e 	b.w	801186c <turnOffSounds>
	}else if ( (LED_State(BUTTON_4_G_REG, BUTTON_4_G_PIN) == LED_OFF) && (accTimer == 1) ){
 8010450:	4d11      	ldr	r5, [pc, #68]	; (8010498 <buttonStateMachine+0x7c>)
 8010452:	782b      	ldrb	r3, [r5, #0]
 8010454:	2b01      	cmp	r3, #1
 8010456:	d1ee      	bne.n	8010436 <buttonStateMachine+0x1a>
		osTimerStop(accSampleTimerHandle);
 8010458:	4b10      	ldr	r3, [pc, #64]	; (801049c <buttonStateMachine+0x80>)
 801045a:	6818      	ldr	r0, [r3, #0]
 801045c:	f7fb fab8 	bl	800b9d0 <osTimerStop>
		accTimer = 0;
 8010460:	702c      	strb	r4, [r5, #0]
 8010462:	e7e8      	b.n	8010436 <buttonStateMachine+0x1a>
}
 8010464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		turnOnCapSounds();
 8010468:	f001 b9e4 	b.w	8011834 <turnOnCapSounds>
	if( (LED_State(BUTTON_4_G_REG, BUTTON_4_G_PIN) == LED_ON) && (accTimer == 0)){
 801046c:	4d0a      	ldr	r5, [pc, #40]	; (8010498 <buttonStateMachine+0x7c>)
 801046e:	782b      	ldrb	r3, [r5, #0]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d1da      	bne.n	801042a <buttonStateMachine+0xe>
		osTimerStart(accSampleTimerHandle, 100);
 8010474:	4b09      	ldr	r3, [pc, #36]	; (801049c <buttonStateMachine+0x80>)
 8010476:	4604      	mov	r4, r0
 8010478:	2164      	movs	r1, #100	; 0x64
 801047a:	6818      	ldr	r0, [r3, #0]
 801047c:	f7fb fa7a 	bl	800b974 <osTimerStart>
	if(LED_State(BUTTON_5_G_REG, BUTTON_5_G_PIN)){
 8010480:	2180      	movs	r1, #128	; 0x80
 8010482:	2000      	movs	r0, #0
		accTimer = 1;
 8010484:	702c      	strb	r4, [r5, #0]
	if(LED_State(BUTTON_5_G_REG, BUTTON_5_G_PIN)){
 8010486:	f7ff fd55 	bl	800ff34 <LED_State>
 801048a:	2800      	cmp	r0, #0
 801048c:	d0d8      	beq.n	8010440 <buttonStateMachine+0x24>
}
 801048e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		turnOnLidarSounds();
 8010492:	f001 b9b9 	b.w	8011808 <turnOnLidarSounds>
 8010496:	bf00      	nop
 8010498:	2000529e 	.word	0x2000529e
 801049c:	20005384 	.word	0x20005384

080104a0 <ResistiveTouchSampler>:
void ResistiveTouchSampler(void){
 80104a0:	b570      	push	{r4, r5, r6, lr}
	button_state = 1;
	//taskEXIT_CRITICAL();
}

uint8_t isButtonEnabled(void){
	return button_state;
 80104a2:	4bd1      	ldr	r3, [pc, #836]	; (80107e8 <ResistiveTouchSampler+0x348>)
	if(isButtonEnabled() == 1){
 80104a4:	781c      	ldrb	r4, [r3, #0]
 80104a6:	2c01      	cmp	r4, #1
 80104a8:	d000      	beq.n	80104ac <ResistiveTouchSampler+0xc>
 80104aa:	bd70      	pop	{r4, r5, r6, pc}
		if(HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin) == GPIO_PIN_SET){
 80104ac:	2102      	movs	r1, #2
 80104ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80104b2:	f7f1 fe49 	bl	8002148 <HAL_GPIO_ReadPin>
 80104b6:	2801      	cmp	r0, #1
 80104b8:	4605      	mov	r5, r0
 80104ba:	d04c      	beq.n	8010556 <ResistiveTouchSampler+0xb6>
		else if(HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin) == GPIO_PIN_SET){
 80104bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80104c0:	48ca      	ldr	r0, [pc, #808]	; (80107ec <ResistiveTouchSampler+0x34c>)
 80104c2:	f7f1 fe41 	bl	8002148 <HAL_GPIO_ReadPin>
 80104c6:	2801      	cmp	r0, #1
 80104c8:	4605      	mov	r5, r0
 80104ca:	f000 80a2 	beq.w	8010612 <ResistiveTouchSampler+0x172>
		else if(HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin) == GPIO_PIN_SET){
 80104ce:	2104      	movs	r1, #4
 80104d0:	48c7      	ldr	r0, [pc, #796]	; (80107f0 <ResistiveTouchSampler+0x350>)
 80104d2:	f7f1 fe39 	bl	8002148 <HAL_GPIO_ReadPin>
 80104d6:	2801      	cmp	r0, #1
 80104d8:	4605      	mov	r5, r0
 80104da:	f000 80cb 	beq.w	8010674 <ResistiveTouchSampler+0x1d4>
		else if(HAL_GPIO_ReadPin(BUTTON_7_GPIO_Port, BUTTON_7_Pin) == GPIO_PIN_SET){
 80104de:	4621      	mov	r1, r4
 80104e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80104e4:	f7f1 fe30 	bl	8002148 <HAL_GPIO_ReadPin>
 80104e8:	2801      	cmp	r0, #1
 80104ea:	4604      	mov	r4, r0
 80104ec:	f000 81b1 	beq.w	8010852 <ResistiveTouchSampler+0x3b2>
		else if(HAL_GPIO_ReadPin(BUTTON_8_GPIO_Port, BUTTON_8_Pin) == GPIO_PIN_SET){
 80104f0:	2108      	movs	r1, #8
 80104f2:	48bf      	ldr	r0, [pc, #764]	; (80107f0 <ResistiveTouchSampler+0x350>)
 80104f4:	f7f1 fe28 	bl	8002148 <HAL_GPIO_ReadPin>
 80104f8:	2801      	cmp	r0, #1
 80104fa:	4604      	mov	r4, r0
 80104fc:	d05a      	beq.n	80105b4 <ResistiveTouchSampler+0x114>
		if(HAL_GPIO_ReadPin(BUTTON_4_GPIO_Port, BUTTON_4_Pin) == GPIO_PIN_SET){
 80104fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8010502:	48bc      	ldr	r0, [pc, #752]	; (80107f4 <ResistiveTouchSampler+0x354>)
 8010504:	f7f1 fe20 	bl	8002148 <HAL_GPIO_ReadPin>
 8010508:	2801      	cmp	r0, #1
 801050a:	4604      	mov	r4, r0
 801050c:	f000 8188 	beq.w	8010820 <ResistiveTouchSampler+0x380>
		if(HAL_GPIO_ReadPin(BUTTON_5_GPIO_Port, BUTTON_5_Pin) == GPIO_PIN_SET){
 8010510:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8010514:	48b7      	ldr	r0, [pc, #732]	; (80107f4 <ResistiveTouchSampler+0x354>)
 8010516:	f7f1 fe17 	bl	8002148 <HAL_GPIO_ReadPin>
 801051a:	2801      	cmp	r0, #1
 801051c:	4604      	mov	r4, r0
 801051e:	f000 8145 	beq.w	80107ac <ResistiveTouchSampler+0x30c>
		if(HAL_GPIO_ReadPin(BUTTON_6_GPIO_Port, BUTTON_6_Pin) == GPIO_PIN_SET){
 8010522:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010526:	48b3      	ldr	r0, [pc, #716]	; (80107f4 <ResistiveTouchSampler+0x354>)
 8010528:	f7f1 fe0e 	bl	8002148 <HAL_GPIO_ReadPin>
 801052c:	2801      	cmp	r0, #1
 801052e:	4604      	mov	r4, r0
 8010530:	f000 811d 	beq.w	801076e <ResistiveTouchSampler+0x2ce>
		if(HAL_GPIO_ReadPin(BUTTON_9_GPIO_Port, BUTTON_9_Pin) == GPIO_PIN_SET){
 8010534:	2180      	movs	r1, #128	; 0x80
 8010536:	48ad      	ldr	r0, [pc, #692]	; (80107ec <ResistiveTouchSampler+0x34c>)
 8010538:	f7f1 fe06 	bl	8002148 <HAL_GPIO_ReadPin>
 801053c:	2801      	cmp	r0, #1
 801053e:	4604      	mov	r4, r0
 8010540:	f000 80c9 	beq.w	80106d6 <ResistiveTouchSampler+0x236>
 8010544:	4cac      	ldr	r4, [pc, #688]	; (80107f8 <ResistiveTouchSampler+0x358>)
		if(trigger_table == 1){
 8010546:	7823      	ldrb	r3, [r4, #0]
 8010548:	2b01      	cmp	r3, #1
 801054a:	f000 8180 	beq.w	801084e <ResistiveTouchSampler+0x3ae>
}
 801054e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		buttonStateMachine();
 8010552:	f7ff bf63 	b.w	801041c <buttonStateMachine>
			if(LED_State(BUTTON_1_G_REG, BUTTON_1_G_PIN) == LED_OFF){
 8010556:	2120      	movs	r1, #32
 8010558:	2005      	movs	r0, #5
 801055a:	f7ff fceb 	bl	800ff34 <LED_State>
 801055e:	4604      	mov	r4, r0
 8010560:	2800      	cmp	r0, #0
 8010562:	d1cc      	bne.n	80104fe <ResistiveTouchSampler+0x5e>
				if ( (HAL_GetTick() - button_1_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 8010564:	4ea5      	ldr	r6, [pc, #660]	; (80107fc <ResistiveTouchSampler+0x35c>)
 8010566:	f7f0 fcef 	bl	8000f48 <HAL_GetTick>
 801056a:	6833      	ldr	r3, [r6, #0]
 801056c:	1ac0      	subs	r0, r0, r3
 801056e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8010572:	d9c4      	bls.n	80104fe <ResistiveTouchSampler+0x5e>
					button_1_timeout = HAL_GetTick();
 8010574:	f7f0 fce8 	bl	8000f48 <HAL_GetTick>
					Set_LED(BUTTON_1_G_REG, BUTTON_1_G_PIN, 1);
 8010578:	462a      	mov	r2, r5
					button_1_timeout = HAL_GetTick();
 801057a:	6030      	str	r0, [r6, #0]
					Set_LED(BUTTON_1_G_REG, BUTTON_1_G_PIN, 1);
 801057c:	2120      	movs	r1, #32
 801057e:	2005      	movs	r0, #5
 8010580:	f7ff fca8 	bl	800fed4 <Set_LED>
					Set_LED(BUTTON_2_G_REG, BUTTON_2_G_PIN, 0);
 8010584:	4622      	mov	r2, r4
 8010586:	2102      	movs	r1, #2
 8010588:	2005      	movs	r0, #5
 801058a:	f7ff fca3 	bl	800fed4 <Set_LED>
					Set_LED(BUTTON_3_G_REG, BUTTON_3_G_PIN, 0);
 801058e:	4622      	mov	r2, r4
 8010590:	2108      	movs	r1, #8
 8010592:	2004      	movs	r0, #4
 8010594:	f7ff fc9e 	bl	800fed4 <Set_LED>
					Set_LED(BUTTON_7_G_REG, BUTTON_7_G_PIN, 0);
 8010598:	4622      	mov	r2, r4
 801059a:	2180      	movs	r1, #128	; 0x80
 801059c:	2003      	movs	r0, #3
 801059e:	f7ff fc99 	bl	800fed4 <Set_LED>
					Set_LED(BUTTON_8_G_REG, BUTTON_8_G_PIN, 0);
 80105a2:	4622      	mov	r2, r4
 80105a4:	2180      	movs	r1, #128	; 0x80
 80105a6:	2004      	movs	r0, #4
 80105a8:	f7ff fc94 	bl	800fed4 <Set_LED>
					setTable('S');
 80105ac:	2053      	movs	r0, #83	; 0x53
 80105ae:	f001 ff7d 	bl	80124ac <setTable>
 80105b2:	e7a4      	b.n	80104fe <ResistiveTouchSampler+0x5e>
			if(LED_State(BUTTON_8_G_REG, BUTTON_8_G_PIN) == LED_OFF){
 80105b4:	2180      	movs	r1, #128	; 0x80
 80105b6:	2004      	movs	r0, #4
 80105b8:	f7ff fcbc 	bl	800ff34 <LED_State>
 80105bc:	4605      	mov	r5, r0
 80105be:	2800      	cmp	r0, #0
 80105c0:	d19d      	bne.n	80104fe <ResistiveTouchSampler+0x5e>
				if ( (HAL_GetTick() - button_8_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 80105c2:	4e8f      	ldr	r6, [pc, #572]	; (8010800 <ResistiveTouchSampler+0x360>)
 80105c4:	f7f0 fcc0 	bl	8000f48 <HAL_GetTick>
 80105c8:	6833      	ldr	r3, [r6, #0]
 80105ca:	1ac3      	subs	r3, r0, r3
 80105cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80105d0:	d995      	bls.n	80104fe <ResistiveTouchSampler+0x5e>
					button_8_timeout = HAL_GetTick();
 80105d2:	f7f0 fcb9 	bl	8000f48 <HAL_GetTick>
					Set_LED(BUTTON_1_G_REG, BUTTON_1_G_PIN, 0);
 80105d6:	462a      	mov	r2, r5
					button_8_timeout = HAL_GetTick();
 80105d8:	6030      	str	r0, [r6, #0]
					Set_LED(BUTTON_1_G_REG, BUTTON_1_G_PIN, 0);
 80105da:	2120      	movs	r1, #32
 80105dc:	2005      	movs	r0, #5
 80105de:	f7ff fc79 	bl	800fed4 <Set_LED>
					Set_LED(BUTTON_2_G_REG, BUTTON_2_G_PIN, 0);
 80105e2:	462a      	mov	r2, r5
 80105e4:	2102      	movs	r1, #2
 80105e6:	2005      	movs	r0, #5
 80105e8:	f7ff fc74 	bl	800fed4 <Set_LED>
					Set_LED(BUTTON_3_G_REG, BUTTON_3_G_PIN, 0);
 80105ec:	462a      	mov	r2, r5
 80105ee:	2108      	movs	r1, #8
 80105f0:	2004      	movs	r0, #4
 80105f2:	f7ff fc6f 	bl	800fed4 <Set_LED>
					Set_LED(BUTTON_7_G_REG, BUTTON_7_G_PIN, 0);
 80105f6:	462a      	mov	r2, r5
 80105f8:	2180      	movs	r1, #128	; 0x80
 80105fa:	2003      	movs	r0, #3
 80105fc:	f7ff fc6a 	bl	800fed4 <Set_LED>
					Set_LED(BUTTON_8_G_REG, BUTTON_8_G_PIN, 1);
 8010600:	4622      	mov	r2, r4
 8010602:	2180      	movs	r1, #128	; 0x80
 8010604:	2004      	movs	r0, #4
 8010606:	f7ff fc65 	bl	800fed4 <Set_LED>
					setTable('W');
 801060a:	2057      	movs	r0, #87	; 0x57
 801060c:	f001 ff4e 	bl	80124ac <setTable>
 8010610:	e775      	b.n	80104fe <ResistiveTouchSampler+0x5e>
			if(LED_State(BUTTON_2_G_REG, BUTTON_2_G_PIN) == LED_OFF){
 8010612:	2102      	movs	r1, #2
 8010614:	2005      	movs	r0, #5
 8010616:	f7ff fc8d 	bl	800ff34 <LED_State>
 801061a:	4604      	mov	r4, r0
 801061c:	2800      	cmp	r0, #0
 801061e:	f47f af6e 	bne.w	80104fe <ResistiveTouchSampler+0x5e>
				if ( (HAL_GetTick() - button_2_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 8010622:	4e78      	ldr	r6, [pc, #480]	; (8010804 <ResistiveTouchSampler+0x364>)
 8010624:	f7f0 fc90 	bl	8000f48 <HAL_GetTick>
 8010628:	6833      	ldr	r3, [r6, #0]
 801062a:	1ac3      	subs	r3, r0, r3
 801062c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010630:	f67f af65 	bls.w	80104fe <ResistiveTouchSampler+0x5e>
					button_2_timeout = HAL_GetTick();
 8010634:	f7f0 fc88 	bl	8000f48 <HAL_GetTick>
					Set_LED(BUTTON_1_G_REG, BUTTON_1_G_PIN, 0);
 8010638:	4622      	mov	r2, r4
					button_2_timeout = HAL_GetTick();
 801063a:	6030      	str	r0, [r6, #0]
					Set_LED(BUTTON_1_G_REG, BUTTON_1_G_PIN, 0);
 801063c:	2120      	movs	r1, #32
 801063e:	2005      	movs	r0, #5
 8010640:	f7ff fc48 	bl	800fed4 <Set_LED>
					Set_LED(BUTTON_2_G_REG, BUTTON_2_G_PIN, 1);
 8010644:	462a      	mov	r2, r5
 8010646:	2102      	movs	r1, #2
 8010648:	2005      	movs	r0, #5
 801064a:	f7ff fc43 	bl	800fed4 <Set_LED>
					Set_LED(BUTTON_3_G_REG, BUTTON_3_G_PIN, 0);
 801064e:	4622      	mov	r2, r4
 8010650:	2108      	movs	r1, #8
 8010652:	2004      	movs	r0, #4
 8010654:	f7ff fc3e 	bl	800fed4 <Set_LED>
					Set_LED(BUTTON_7_G_REG, BUTTON_7_G_PIN, 0);
 8010658:	4622      	mov	r2, r4
 801065a:	2180      	movs	r1, #128	; 0x80
 801065c:	2003      	movs	r0, #3
 801065e:	f7ff fc39 	bl	800fed4 <Set_LED>
					Set_LED(BUTTON_8_G_REG, BUTTON_8_G_PIN, 0);
 8010662:	4622      	mov	r2, r4
 8010664:	2180      	movs	r1, #128	; 0x80
 8010666:	2004      	movs	r0, #4
 8010668:	f7ff fc34 	bl	800fed4 <Set_LED>
					setTable('T');
 801066c:	2054      	movs	r0, #84	; 0x54
 801066e:	f001 ff1d 	bl	80124ac <setTable>
 8010672:	e744      	b.n	80104fe <ResistiveTouchSampler+0x5e>
			if(LED_State(BUTTON_3_G_REG, BUTTON_3_G_PIN) == LED_OFF){
 8010674:	2108      	movs	r1, #8
 8010676:	2004      	movs	r0, #4
 8010678:	f7ff fc5c 	bl	800ff34 <LED_State>
 801067c:	4604      	mov	r4, r0
 801067e:	2800      	cmp	r0, #0
 8010680:	f47f af3d 	bne.w	80104fe <ResistiveTouchSampler+0x5e>
				if ( (HAL_GetTick() - button_3_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 8010684:	4e60      	ldr	r6, [pc, #384]	; (8010808 <ResistiveTouchSampler+0x368>)
 8010686:	f7f0 fc5f 	bl	8000f48 <HAL_GetTick>
 801068a:	6833      	ldr	r3, [r6, #0]
 801068c:	1ac3      	subs	r3, r0, r3
 801068e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010692:	f67f af34 	bls.w	80104fe <ResistiveTouchSampler+0x5e>
					button_3_timeout = HAL_GetTick();
 8010696:	f7f0 fc57 	bl	8000f48 <HAL_GetTick>
					Set_LED(BUTTON_1_G_REG, BUTTON_1_G_PIN, 0);
 801069a:	4622      	mov	r2, r4
					button_3_timeout = HAL_GetTick();
 801069c:	6030      	str	r0, [r6, #0]
					Set_LED(BUTTON_1_G_REG, BUTTON_1_G_PIN, 0);
 801069e:	2120      	movs	r1, #32
 80106a0:	2005      	movs	r0, #5
 80106a2:	f7ff fc17 	bl	800fed4 <Set_LED>
					Set_LED(BUTTON_2_G_REG, BUTTON_2_G_PIN, 0);
 80106a6:	4622      	mov	r2, r4
 80106a8:	2102      	movs	r1, #2
 80106aa:	2005      	movs	r0, #5
 80106ac:	f7ff fc12 	bl	800fed4 <Set_LED>
					Set_LED(BUTTON_3_G_REG, BUTTON_3_G_PIN, 1);
 80106b0:	462a      	mov	r2, r5
 80106b2:	2108      	movs	r1, #8
 80106b4:	2004      	movs	r0, #4
 80106b6:	f7ff fc0d 	bl	800fed4 <Set_LED>
					Set_LED(BUTTON_7_G_REG, BUTTON_7_G_PIN, 0);
 80106ba:	4622      	mov	r2, r4
 80106bc:	2180      	movs	r1, #128	; 0x80
 80106be:	2003      	movs	r0, #3
 80106c0:	f7ff fc08 	bl	800fed4 <Set_LED>
					Set_LED(BUTTON_8_G_REG, BUTTON_8_G_PIN, 0);
 80106c4:	4622      	mov	r2, r4
 80106c6:	2180      	movs	r1, #128	; 0x80
 80106c8:	2004      	movs	r0, #4
 80106ca:	f7ff fc03 	bl	800fed4 <Set_LED>
					setTable('Q');
 80106ce:	2051      	movs	r0, #81	; 0x51
 80106d0:	f001 feec 	bl	80124ac <setTable>
 80106d4:	e713      	b.n	80104fe <ResistiveTouchSampler+0x5e>
			if ( (HAL_GetTick() - button_9_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 80106d6:	4d4d      	ldr	r5, [pc, #308]	; (801080c <ResistiveTouchSampler+0x36c>)
 80106d8:	f7f0 fc36 	bl	8000f48 <HAL_GetTick>
 80106dc:	682b      	ldr	r3, [r5, #0]
 80106de:	1ac0      	subs	r0, r0, r3
 80106e0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80106e4:	f67f af2e 	bls.w	8010544 <ResistiveTouchSampler+0xa4>
				button_9_timeout = HAL_GetTick();
 80106e8:	f7f0 fc2e 	bl	8000f48 <HAL_GetTick>
				if(LED_State(BUTTON_9_G_REG, BUTTON_9_G_PIN) == LED_OFF){
 80106ec:	2102      	movs	r1, #2
				button_9_timeout = HAL_GetTick();
 80106ee:	6028      	str	r0, [r5, #0]
				if(LED_State(BUTTON_9_G_REG, BUTTON_9_G_PIN) == LED_OFF){
 80106f0:	4620      	mov	r0, r4
 80106f2:	f7ff fc1f 	bl	800ff34 <LED_State>
 80106f6:	2800      	cmp	r0, #0
 80106f8:	f040 80e8 	bne.w	80108cc <ResistiveTouchSampler+0x42c>
					Set_LED(BUTTON_9_G_REG, BUTTON_9_G_PIN, 1);
 80106fc:	4622      	mov	r2, r4
 80106fe:	2102      	movs	r1, #2
 8010700:	4620      	mov	r0, r4
 8010702:	f7ff fbe7 	bl	800fed4 <Set_LED>
					activateFilter(1);
 8010706:	4620      	mov	r0, r4
 8010708:	f000 ffb4 	bl	8011674 <activateFilter>
					first_pass = 1;
 801070c:	4d40      	ldr	r5, [pc, #256]	; (8010810 <ResistiveTouchSampler+0x370>)
					trigger_table = 1;
 801070e:	4b3a      	ldr	r3, [pc, #232]	; (80107f8 <ResistiveTouchSampler+0x358>)
					first_pass = 1;
 8010710:	702c      	strb	r4, [r5, #0]
					trigger_table = 1;
 8010712:	701c      	strb	r4, [r3, #0]
			if (HAL_GPIO_ReadPin(BUTTON_10_GPIO_Port, BUTTON_10_Pin) == GPIO_PIN_SET || (first_pass == 1) ){
 8010714:	4837      	ldr	r0, [pc, #220]	; (80107f4 <ResistiveTouchSampler+0x354>)
 8010716:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801071a:	f7f1 fd15 	bl	8002148 <HAL_GPIO_ReadPin>
 801071e:	2801      	cmp	r0, #1
 8010720:	d003      	beq.n	801072a <ResistiveTouchSampler+0x28a>
 8010722:	782b      	ldrb	r3, [r5, #0]
 8010724:	2b01      	cmp	r3, #1
 8010726:	f47f af12 	bne.w	801054e <ResistiveTouchSampler+0xae>
				first_pass = 0;
 801072a:	2300      	movs	r3, #0
				if ( (HAL_GetTick() - button_10_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 801072c:	4c39      	ldr	r4, [pc, #228]	; (8010814 <ResistiveTouchSampler+0x374>)
				first_pass = 0;
 801072e:	702b      	strb	r3, [r5, #0]
				if ( (HAL_GetTick() - button_10_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 8010730:	f7f0 fc0a 	bl	8000f48 <HAL_GetTick>
 8010734:	6823      	ldr	r3, [r4, #0]
 8010736:	1ac3      	subs	r3, r0, r3
 8010738:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801073c:	f67f af07 	bls.w	801054e <ResistiveTouchSampler+0xae>
					button_10_timeout = HAL_GetTick();
 8010740:	f7f0 fc02 	bl	8000f48 <HAL_GetTick>
					if(LED_State(BUTTON_10_G_REG, BUTTON_10_G_PIN) == LED_OFF){
 8010744:	2102      	movs	r1, #2
					button_10_timeout = HAL_GetTick();
 8010746:	6020      	str	r0, [r4, #0]
					if(LED_State(BUTTON_10_G_REG, BUTTON_10_G_PIN) == LED_OFF){
 8010748:	4608      	mov	r0, r1
 801074a:	f7ff fbf3 	bl	800ff34 <LED_State>
 801074e:	2800      	cmp	r0, #0
 8010750:	f040 80d2 	bne.w	80108f8 <ResistiveTouchSampler+0x458>
						Set_LED(BUTTON_10_R_REG, BUTTON_10_R_PIN, 0);
 8010754:	4602      	mov	r2, r0
 8010756:	2101      	movs	r1, #1
 8010758:	2002      	movs	r0, #2
 801075a:	f7ff fbbb 	bl	800fed4 <Set_LED>
						Set_LED(BUTTON_10_G_REG, BUTTON_10_G_PIN, 1);
 801075e:	2102      	movs	r1, #2
 8010760:	4608      	mov	r0, r1
 8010762:	2201      	movs	r2, #1
 8010764:	f7ff fbb6 	bl	800fed4 <Set_LED>
						incrementTable();
 8010768:	f000 ffca 	bl	8011700 <incrementTable>
 801076c:	e6ef      	b.n	801054e <ResistiveTouchSampler+0xae>
			if(LED_State(BUTTON_6_G_REG, BUTTON_6_G_PIN) == LED_OFF){
 801076e:	2108      	movs	r1, #8
 8010770:	2000      	movs	r0, #0
 8010772:	f7ff fbdf 	bl	800ff34 <LED_State>
 8010776:	4605      	mov	r5, r0
 8010778:	2800      	cmp	r0, #0
 801077a:	f47f aedb 	bne.w	8010534 <ResistiveTouchSampler+0x94>
				if ( (HAL_GetTick() - button_6_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 801077e:	4e26      	ldr	r6, [pc, #152]	; (8010818 <ResistiveTouchSampler+0x378>)
 8010780:	f7f0 fbe2 	bl	8000f48 <HAL_GetTick>
 8010784:	6833      	ldr	r3, [r6, #0]
 8010786:	1ac3      	subs	r3, r0, r3
 8010788:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801078c:	f67f aed2 	bls.w	8010534 <ResistiveTouchSampler+0x94>
					button_6_timeout = HAL_GetTick();
 8010790:	f7f0 fbda 	bl	8000f48 <HAL_GetTick>
					Set_LED(BUTTON_6_G_REG, BUTTON_6_G_PIN, 1);
 8010794:	4622      	mov	r2, r4
					button_6_timeout = HAL_GetTick();
 8010796:	6030      	str	r0, [r6, #0]
					Set_LED(BUTTON_6_G_REG, BUTTON_6_G_PIN, 1);
 8010798:	2108      	movs	r1, #8
 801079a:	4628      	mov	r0, r5
 801079c:	f7ff fb9a 	bl	800fed4 <Set_LED>
					Set_LED(BUTTON_5_G_REG, BUTTON_5_G_PIN, 0);
 80107a0:	462a      	mov	r2, r5
 80107a2:	4628      	mov	r0, r5
 80107a4:	2180      	movs	r1, #128	; 0x80
 80107a6:	f7ff fb95 	bl	800fed4 <Set_LED>
 80107aa:	e6c3      	b.n	8010534 <ResistiveTouchSampler+0x94>
			if ( (HAL_GetTick() - button_5_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 80107ac:	4d1b      	ldr	r5, [pc, #108]	; (801081c <ResistiveTouchSampler+0x37c>)
 80107ae:	f7f0 fbcb 	bl	8000f48 <HAL_GetTick>
 80107b2:	682b      	ldr	r3, [r5, #0]
 80107b4:	1ac0      	subs	r0, r0, r3
 80107b6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80107ba:	f67f aeb2 	bls.w	8010522 <ResistiveTouchSampler+0x82>
				button_5_timeout = HAL_GetTick();
 80107be:	f7f0 fbc3 	bl	8000f48 <HAL_GetTick>
				if(LED_State(BUTTON_5_G_REG, BUTTON_5_G_PIN) == LED_OFF){
 80107c2:	2180      	movs	r1, #128	; 0x80
				button_5_timeout = HAL_GetTick();
 80107c4:	6028      	str	r0, [r5, #0]
				if(LED_State(BUTTON_5_G_REG, BUTTON_5_G_PIN) == LED_OFF){
 80107c6:	2000      	movs	r0, #0
 80107c8:	f7ff fbb4 	bl	800ff34 <LED_State>
 80107cc:	4605      	mov	r5, r0
 80107ce:	2800      	cmp	r0, #0
 80107d0:	f47f aea7 	bne.w	8010522 <ResistiveTouchSampler+0x82>
					Set_LED(BUTTON_5_G_REG, BUTTON_5_G_PIN, 1);
 80107d4:	4622      	mov	r2, r4
 80107d6:	2180      	movs	r1, #128	; 0x80
 80107d8:	f7ff fb7c 	bl	800fed4 <Set_LED>
					Set_LED(BUTTON_6_G_REG, BUTTON_6_G_PIN, 0);
 80107dc:	462a      	mov	r2, r5
 80107de:	4628      	mov	r0, r5
 80107e0:	2108      	movs	r1, #8
 80107e2:	f7ff fb77 	bl	800fed4 <Set_LED>
 80107e6:	e69c      	b.n	8010522 <ResistiveTouchSampler+0x82>
 80107e8:	2000003a 	.word	0x2000003a
 80107ec:	48000800 	.word	0x48000800
 80107f0:	48001000 	.word	0x48001000
 80107f4:	48000c00 	.word	0x48000c00
 80107f8:	200052c9 	.word	0x200052c9
 80107fc:	200052a4 	.word	0x200052a4
 8010800:	200052c0 	.word	0x200052c0
 8010804:	200052a8 	.word	0x200052a8
 8010808:	200052ac 	.word	0x200052ac
 801080c:	200052c4 	.word	0x200052c4
 8010810:	200052c8 	.word	0x200052c8
 8010814:	200052a0 	.word	0x200052a0
 8010818:	200052b8 	.word	0x200052b8
 801081c:	200052b4 	.word	0x200052b4
			if ( (HAL_GetTick() - button_4_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 8010820:	4d40      	ldr	r5, [pc, #256]	; (8010924 <ResistiveTouchSampler+0x484>)
 8010822:	f7f0 fb91 	bl	8000f48 <HAL_GetTick>
 8010826:	682b      	ldr	r3, [r5, #0]
 8010828:	1ac0      	subs	r0, r0, r3
 801082a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 801082e:	f67f ae6f 	bls.w	8010510 <ResistiveTouchSampler+0x70>
				button_4_timeout = HAL_GetTick();
 8010832:	f7f0 fb89 	bl	8000f48 <HAL_GetTick>
				if(LED_State(BUTTON_4_G_REG, BUTTON_4_G_PIN) == LED_OFF){
 8010836:	2120      	movs	r1, #32
				button_4_timeout = HAL_GetTick();
 8010838:	6028      	str	r0, [r5, #0]
				if(LED_State(BUTTON_4_G_REG, BUTTON_4_G_PIN) == LED_OFF){
 801083a:	4620      	mov	r0, r4
 801083c:	f7ff fb7a 	bl	800ff34 <LED_State>
 8010840:	bbc0      	cbnz	r0, 80108b4 <ResistiveTouchSampler+0x414>
						Set_LED(BUTTON_4_G_REG, BUTTON_4_G_PIN, 1);
 8010842:	4622      	mov	r2, r4
 8010844:	4620      	mov	r0, r4
 8010846:	2120      	movs	r1, #32
 8010848:	f7ff fb44 	bl	800fed4 <Set_LED>
 801084c:	e660      	b.n	8010510 <ResistiveTouchSampler+0x70>
 801084e:	4d36      	ldr	r5, [pc, #216]	; (8010928 <ResistiveTouchSampler+0x488>)
 8010850:	e760      	b.n	8010714 <ResistiveTouchSampler+0x274>
			if(LED_State(BUTTON_7_G_REG, BUTTON_7_G_PIN) == LED_OFF){
 8010852:	2180      	movs	r1, #128	; 0x80
 8010854:	2003      	movs	r0, #3
 8010856:	f7ff fb6d 	bl	800ff34 <LED_State>
 801085a:	4605      	mov	r5, r0
 801085c:	2800      	cmp	r0, #0
 801085e:	f47f ae4e 	bne.w	80104fe <ResistiveTouchSampler+0x5e>
				if ( (HAL_GetTick() - button_7_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 8010862:	4e32      	ldr	r6, [pc, #200]	; (801092c <ResistiveTouchSampler+0x48c>)
 8010864:	f7f0 fb70 	bl	8000f48 <HAL_GetTick>
 8010868:	6833      	ldr	r3, [r6, #0]
 801086a:	1ac3      	subs	r3, r0, r3
 801086c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010870:	f67f ae45 	bls.w	80104fe <ResistiveTouchSampler+0x5e>
					button_7_timeout = HAL_GetTick();
 8010874:	f7f0 fb68 	bl	8000f48 <HAL_GetTick>
					Set_LED(BUTTON_1_G_REG, BUTTON_1_G_PIN, 0);
 8010878:	462a      	mov	r2, r5
					button_7_timeout = HAL_GetTick();
 801087a:	6030      	str	r0, [r6, #0]
					Set_LED(BUTTON_1_G_REG, BUTTON_1_G_PIN, 0);
 801087c:	2120      	movs	r1, #32
 801087e:	2005      	movs	r0, #5
 8010880:	f7ff fb28 	bl	800fed4 <Set_LED>
					Set_LED(BUTTON_2_G_REG, BUTTON_2_G_PIN, 0);
 8010884:	462a      	mov	r2, r5
 8010886:	2102      	movs	r1, #2
 8010888:	2005      	movs	r0, #5
 801088a:	f7ff fb23 	bl	800fed4 <Set_LED>
					Set_LED(BUTTON_3_G_REG, BUTTON_3_G_PIN, 0);
 801088e:	462a      	mov	r2, r5
 8010890:	2108      	movs	r1, #8
 8010892:	2004      	movs	r0, #4
 8010894:	f7ff fb1e 	bl	800fed4 <Set_LED>
					Set_LED(BUTTON_7_G_REG, BUTTON_7_G_PIN, 1);
 8010898:	4622      	mov	r2, r4
 801089a:	2180      	movs	r1, #128	; 0x80
 801089c:	2003      	movs	r0, #3
 801089e:	f7ff fb19 	bl	800fed4 <Set_LED>
					Set_LED(BUTTON_8_G_REG, BUTTON_8_G_PIN, 0);
 80108a2:	462a      	mov	r2, r5
 80108a4:	2180      	movs	r1, #128	; 0x80
 80108a6:	2004      	movs	r0, #4
 80108a8:	f7ff fb14 	bl	800fed4 <Set_LED>
					setTable('R');
 80108ac:	2052      	movs	r0, #82	; 0x52
 80108ae:	f001 fdfd 	bl	80124ac <setTable>
 80108b2:	e624      	b.n	80104fe <ResistiveTouchSampler+0x5e>
				else if(LED_State(BUTTON_4_G_REG, BUTTON_4_G_PIN) == LED_ON){
 80108b4:	4620      	mov	r0, r4
 80108b6:	2120      	movs	r1, #32
 80108b8:	f7ff fb3c 	bl	800ff34 <LED_State>
 80108bc:	2801      	cmp	r0, #1
 80108be:	f47f ae27 	bne.w	8010510 <ResistiveTouchSampler+0x70>
						Set_LED(BUTTON_4_G_REG, BUTTON_4_G_PIN, 0);
 80108c2:	2200      	movs	r2, #0
 80108c4:	2120      	movs	r1, #32
 80108c6:	f7ff fb05 	bl	800fed4 <Set_LED>
 80108ca:	e621      	b.n	8010510 <ResistiveTouchSampler+0x70>
					Set_LED(BUTTON_9_G_REG, BUTTON_9_G_PIN, 0);
 80108cc:	4620      	mov	r0, r4
 80108ce:	2200      	movs	r2, #0
 80108d0:	2102      	movs	r1, #2
 80108d2:	f7ff faff 	bl	800fed4 <Set_LED>
					Set_LED(BUTTON_10_G_REG, BUTTON_10_G_PIN, 0);
 80108d6:	2102      	movs	r1, #2
 80108d8:	4608      	mov	r0, r1
 80108da:	2200      	movs	r2, #0
 80108dc:	f7ff fafa 	bl	800fed4 <Set_LED>
					Set_LED(BUTTON_10_R_REG, BUTTON_10_R_PIN, 0);
 80108e0:	4621      	mov	r1, r4
 80108e2:	2200      	movs	r2, #0
 80108e4:	2002      	movs	r0, #2
 80108e6:	f7ff faf5 	bl	800fed4 <Set_LED>
					trigger_table = 0;
 80108ea:	4c11      	ldr	r4, [pc, #68]	; (8010930 <ResistiveTouchSampler+0x490>)
 80108ec:	2300      	movs	r3, #0
					activateFilter(0);
 80108ee:	4618      	mov	r0, r3
					trigger_table = 0;
 80108f0:	7023      	strb	r3, [r4, #0]
					activateFilter(0);
 80108f2:	f000 febf 	bl	8011674 <activateFilter>
 80108f6:	e626      	b.n	8010546 <ResistiveTouchSampler+0xa6>
					else if(LED_State(BUTTON_10_R_REG, BUTTON_10_R_PIN) == LED_OFF){
 80108f8:	2101      	movs	r1, #1
 80108fa:	2002      	movs	r0, #2
 80108fc:	f7ff fb1a 	bl	800ff34 <LED_State>
 8010900:	4604      	mov	r4, r0
 8010902:	2800      	cmp	r0, #0
 8010904:	f47f ae23 	bne.w	801054e <ResistiveTouchSampler+0xae>
						Set_LED(BUTTON_10_R_REG, BUTTON_10_R_PIN, 1);
 8010908:	2201      	movs	r2, #1
 801090a:	4611      	mov	r1, r2
 801090c:	2002      	movs	r0, #2
 801090e:	f7ff fae1 	bl	800fed4 <Set_LED>
						Set_LED(BUTTON_10_G_REG, BUTTON_10_G_PIN, 0);
 8010912:	2102      	movs	r1, #2
 8010914:	4622      	mov	r2, r4
 8010916:	4608      	mov	r0, r1
 8010918:	f7ff fadc 	bl	800fed4 <Set_LED>
						incrementTable();
 801091c:	f000 fef0 	bl	8011700 <incrementTable>
 8010920:	e615      	b.n	801054e <ResistiveTouchSampler+0xae>
 8010922:	bf00      	nop
 8010924:	200052b0 	.word	0x200052b0
 8010928:	200052c8 	.word	0x200052c8
 801092c:	200052bc 	.word	0x200052bc
 8010930:	200052c9 	.word	0x200052c9

08010934 <disable_buttons>:
	return button_state;
 8010934:	4b10      	ldr	r3, [pc, #64]	; (8010978 <disable_buttons+0x44>)
	if(isButtonEnabled() == 1){
 8010936:	781a      	ldrb	r2, [r3, #0]
 8010938:	2a01      	cmp	r2, #1
 801093a:	d004      	beq.n	8010946 <disable_buttons+0x12>
		htim4.Instance->CNT = 0;
 801093c:	4b0f      	ldr	r3, [pc, #60]	; (801097c <disable_buttons+0x48>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	2200      	movs	r2, #0
 8010942:	625a      	str	r2, [r3, #36]	; 0x24
 8010944:	4770      	bx	lr
void disable_buttons(void){
 8010946:	b5f0      	push	{r4, r5, r6, r7, lr}
		temp_buffer[0] = LED_SETTINGS[0];
 8010948:	490d      	ldr	r1, [pc, #52]	; (8010980 <disable_buttons+0x4c>)
 801094a:	4a0e      	ldr	r2, [pc, #56]	; (8010984 <disable_buttons+0x50>)
 801094c:	780c      	ldrb	r4, [r1, #0]
 801094e:	7014      	strb	r4, [r2, #0]
		temp_buffer[1] = LED_SETTINGS[1];
 8010950:	f891 e001 	ldrb.w	lr, [r1, #1]
		temp_buffer[2] = LED_SETTINGS[2];
 8010954:	788f      	ldrb	r7, [r1, #2]
		temp_buffer[3] = LED_SETTINGS[3];
 8010956:	78ce      	ldrb	r6, [r1, #3]
		temp_buffer[4] = LED_SETTINGS[4];
 8010958:	790d      	ldrb	r5, [r1, #4]
		temp_buffer[5] = LED_SETTINGS[5];
 801095a:	794c      	ldrb	r4, [r1, #5]
		temp_buffer[1] = LED_SETTINGS[1];
 801095c:	f882 e001 	strb.w	lr, [r2, #1]
		button_state = 0;
 8010960:	2100      	movs	r1, #0
		temp_buffer[2] = LED_SETTINGS[2];
 8010962:	7097      	strb	r7, [r2, #2]
		temp_buffer[3] = LED_SETTINGS[3];
 8010964:	70d6      	strb	r6, [r2, #3]
		temp_buffer[4] = LED_SETTINGS[4];
 8010966:	7115      	strb	r5, [r2, #4]
		temp_buffer[5] = LED_SETTINGS[5];
 8010968:	7154      	strb	r4, [r2, #5]
		button_state = 0;
 801096a:	7019      	strb	r1, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim4);
 801096c:	4803      	ldr	r0, [pc, #12]	; (801097c <disable_buttons+0x48>)
}
 801096e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		HAL_TIM_Base_Start_IT(&htim4);
 8010972:	f7f5 ba47 	b.w	8005e04 <HAL_TIM_Base_Start_IT>
 8010976:	bf00      	nop
 8010978:	2000003a 	.word	0x2000003a
 801097c:	20005acc 	.word	0x20005acc
 8010980:	20005398 	.word	0x20005398
 8010984:	2000597c 	.word	0x2000597c

08010988 <enable_buttons>:
void enable_buttons(void){
 8010988:	b570      	push	{r4, r5, r6, lr}
	HAL_TIM_Base_Stop_IT(&htim4);
 801098a:	480b      	ldr	r0, [pc, #44]	; (80109b8 <enable_buttons+0x30>)
 801098c:	f7f5 fa52 	bl	8005e34 <HAL_TIM_Base_Stop_IT>
	LED_SETTINGS[0] = temp_buffer[0];
 8010990:	4a0a      	ldr	r2, [pc, #40]	; (80109bc <enable_buttons+0x34>)
 8010992:	4b0b      	ldr	r3, [pc, #44]	; (80109c0 <enable_buttons+0x38>)
 8010994:	7816      	ldrb	r6, [r2, #0]
	LED_SETTINGS[1] = temp_buffer[1];
 8010996:	7855      	ldrb	r5, [r2, #1]
	LED_SETTINGS[2] = temp_buffer[2];
 8010998:	7894      	ldrb	r4, [r2, #2]
	LED_SETTINGS[3] = temp_buffer[3];
 801099a:	78d0      	ldrb	r0, [r2, #3]
	LED_SETTINGS[4] = temp_buffer[4];
 801099c:	7911      	ldrb	r1, [r2, #4]
	LED_SETTINGS[5] = temp_buffer[5];
 801099e:	7952      	ldrb	r2, [r2, #5]
	LED_SETTINGS[0] = temp_buffer[0];
 80109a0:	701e      	strb	r6, [r3, #0]
	LED_SETTINGS[1] = temp_buffer[1];
 80109a2:	705d      	strb	r5, [r3, #1]
	LED_SETTINGS[2] = temp_buffer[2];
 80109a4:	709c      	strb	r4, [r3, #2]
	LED_SETTINGS[3] = temp_buffer[3];
 80109a6:	70d8      	strb	r0, [r3, #3]
	LED_SETTINGS[4] = temp_buffer[4];
 80109a8:	7119      	strb	r1, [r3, #4]
	LED_SETTINGS[5] = temp_buffer[5];
 80109aa:	715a      	strb	r2, [r3, #5]
	transmitToBuffer();
 80109ac:	f7ff f9a2 	bl	800fcf4 <transmitToBuffer>
	button_state = 1;
 80109b0:	4b04      	ldr	r3, [pc, #16]	; (80109c4 <enable_buttons+0x3c>)
 80109b2:	2201      	movs	r2, #1
 80109b4:	701a      	strb	r2, [r3, #0]
 80109b6:	bd70      	pop	{r4, r5, r6, pc}
 80109b8:	20005acc 	.word	0x20005acc
 80109bc:	2000597c 	.word	0x2000597c
 80109c0:	20005398 	.word	0x20005398
 80109c4:	2000003a 	.word	0x2000003a

080109c8 <isButtonEnabled>:
	return button_state;
 80109c8:	4b01      	ldr	r3, [pc, #4]	; (80109d0 <isButtonEnabled+0x8>)
}
 80109ca:	7818      	ldrb	r0, [r3, #0]
 80109cc:	4770      	bx	lr
 80109ce:	bf00      	nop
 80109d0:	2000003a 	.word	0x2000003a

080109d4 <MX_RTC_Init>:
void MX_RTC_Init(void)
{

  /**Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80109d4:	4b0b      	ldr	r3, [pc, #44]	; (8010a04 <MX_RTC_Init+0x30>)
 80109d6:	4a0c      	ldr	r2, [pc, #48]	; (8010a08 <MX_RTC_Init+0x34>)
{
 80109d8:	b510      	push	{r4, lr}
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
 80109da:	21ff      	movs	r1, #255	; 0xff
  hrtc.Instance = RTC;
 80109dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = 127;
 80109de:	247f      	movs	r4, #127	; 0x7f
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80109e0:	2200      	movs	r2, #0
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80109e2:	4618      	mov	r0, r3
  hrtc.Init.AsynchPrediv = 127;
 80109e4:	609c      	str	r4, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80109e6:	60d9      	str	r1, [r3, #12]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80109e8:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80109ea:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80109ec:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80109ee:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80109f0:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80109f2:	f7f4 fac9 	bl	8004f88 <HAL_RTC_Init>
 80109f6:	b900      	cbnz	r0, 80109fa <MX_RTC_Init+0x26>
 80109f8:	bd10      	pop	{r4, pc}
  {
    Error_Handler();
  }

}
 80109fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80109fe:	f7ff bd0b 	b.w	8010418 <Error_Handler>
 8010a02:	bf00      	nop
 8010a04:	20005984 	.word	0x20005984
 8010a08:	40002800 	.word	0x40002800

08010a0c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8010a0c:	6802      	ldr	r2, [r0, #0]
 8010a0e:	4b06      	ldr	r3, [pc, #24]	; (8010a28 <HAL_RTC_MspInit+0x1c>)
 8010a10:	429a      	cmp	r2, r3
 8010a12:	d000      	beq.n	8010a16 <HAL_RTC_MspInit+0xa>
 8010a14:	4770      	bx	lr
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8010a16:	4a05      	ldr	r2, [pc, #20]	; (8010a2c <HAL_RTC_MspInit+0x20>)
 8010a18:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8010a1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8010a24:	4770      	bx	lr
 8010a26:	bf00      	nop
 8010a28:	40002800 	.word	0x40002800
 8010a2c:	40021000 	.word	0x40021000

08010a30 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8010a30:	b508      	push	{r3, lr}

  hsd1.Instance = SDMMC1;
 8010a32:	4b0a      	ldr	r3, [pc, #40]	; (8010a5c <MX_SDMMC1_SD_Init+0x2c>)
 8010a34:	4a0a      	ldr	r2, [pc, #40]	; (8010a60 <MX_SDMMC1_SD_Init+0x30>)
 8010a36:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8010a38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8010a3c:	2200      	movs	r2, #0
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 0;
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8010a3e:	4618      	mov	r0, r3
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8010a40:	60d9      	str	r1, [r3, #12]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8010a42:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8010a44:	609a      	str	r2, [r3, #8]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8010a46:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8010a48:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8010a4a:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8010a4c:	f7f4 fcc8 	bl	80053e0 <HAL_SD_Init>
 8010a50:	b900      	cbnz	r0, 8010a54 <MX_SDMMC1_SD_Init+0x24>
 8010a52:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
  }

}
 8010a54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8010a58:	f7ff bcde 	b.w	8010418 <Error_Handler>
 8010a5c:	200059a8 	.word	0x200059a8
 8010a60:	50062400 	.word	0x50062400

08010a64 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8010a64:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
 8010a66:	6802      	ldr	r2, [r0, #0]
 8010a68:	4b21      	ldr	r3, [pc, #132]	; (8010af0 <HAL_SD_MspInit+0x8c>)
{
 8010a6a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010a6c:	2400      	movs	r4, #0
  if(sdHandle->Instance==SDMMC1)
 8010a6e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010a70:	9404      	str	r4, [sp, #16]
 8010a72:	9403      	str	r4, [sp, #12]
 8010a74:	9405      	str	r4, [sp, #20]
 8010a76:	9406      	str	r4, [sp, #24]
 8010a78:	9407      	str	r4, [sp, #28]
  if(sdHandle->Instance==SDMMC1)
 8010a7a:	d001      	beq.n	8010a80 <HAL_SD_MspInit+0x1c>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8010a7c:	b009      	add	sp, #36	; 0x24
 8010a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8010a80:	4b1c      	ldr	r3, [pc, #112]	; (8010af4 <HAL_SD_MspInit+0x90>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010a82:	481d      	ldr	r0, [pc, #116]	; (8010af8 <HAL_SD_MspInit+0x94>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8010a84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010a86:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8010a8a:	64da      	str	r2, [r3, #76]	; 0x4c
 8010a8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010a8e:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8010a92:	9200      	str	r2, [sp, #0]
 8010a94:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010a96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010a98:	f042 0204 	orr.w	r2, r2, #4
 8010a9c:	64da      	str	r2, [r3, #76]	; 0x4c
 8010a9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010aa0:	f002 0204 	and.w	r2, r2, #4
 8010aa4:	9201      	str	r2, [sp, #4]
 8010aa6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8010aa8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010aaa:	f042 0208 	orr.w	r2, r2, #8
 8010aae:	64da      	str	r2, [r3, #76]	; 0x4c
 8010ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8010ab2:	250c      	movs	r5, #12
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8010ab4:	f003 0308 	and.w	r3, r3, #8
 8010ab8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010aba:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8010abc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010ac0:	2603      	movs	r6, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010ac2:	eb0d 0105 	add.w	r1, sp, r5
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8010ac6:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8010ac8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010aca:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010acc:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8010ace:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010ad0:	f7f1 fa24 	bl	8001f1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8010ad4:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010ad6:	eb0d 0105 	add.w	r1, sp, r5
 8010ada:	4808      	ldr	r0, [pc, #32]	; (8010afc <HAL_SD_MspInit+0x98>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010adc:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010ade:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8010ae0:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010ae2:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8010ae4:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010ae6:	f7f1 fa19 	bl	8001f1c <HAL_GPIO_Init>
}
 8010aea:	b009      	add	sp, #36	; 0x24
 8010aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010aee:	bf00      	nop
 8010af0:	50062400 	.word	0x50062400
 8010af4:	40021000 	.word	0x40021000
 8010af8:	48000800 	.word	0x48000800
 8010afc:	48000c00 	.word	0x48000c00

08010b00 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8010b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  hspi2.Instance = SPI2;
 8010b02:	4b12      	ldr	r3, [pc, #72]	; (8010b4c <MX_SPI2_Init+0x4c>)
 8010b04:	4a12      	ldr	r2, [pc, #72]	; (8010b50 <MX_SPI2_Init+0x50>)
 8010b06:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8010b08:	f44f 7082 	mov.w	r0, #260	; 0x104
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8010b0c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8010b10:	2702      	movs	r7, #2
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8010b12:	2601      	movs	r6, #1
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8010b14:	f44f 7500 	mov.w	r5, #512	; 0x200
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8010b18:	2428      	movs	r4, #40	; 0x28
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
 8010b1a:	2107      	movs	r1, #7
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8010b1c:	6058      	str	r0, [r3, #4]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8010b1e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8010b20:	4618      	mov	r0, r3
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8010b22:	2200      	movs	r2, #0
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8010b24:	611f      	str	r7, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8010b26:	615e      	str	r6, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8010b28:	619d      	str	r5, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8010b2a:	61dc      	str	r4, [r3, #28]
  hspi2.Init.CRCPolynomial = 7;
 8010b2c:	62d9      	str	r1, [r3, #44]	; 0x2c
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8010b2e:	609a      	str	r2, [r3, #8]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8010b30:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8010b32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010b34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8010b36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8010b38:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8010b3a:	f7f4 fee9 	bl	8005910 <HAL_SPI_Init>
 8010b3e:	b900      	cbnz	r0, 8010b42 <MX_SPI2_Init+0x42>
 8010b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    Error_Handler();
  }

}
 8010b42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Error_Handler();
 8010b46:	f7ff bc67 	b.w	8010418 <Error_Handler>
 8010b4a:	bf00      	nop
 8010b4c:	20005a28 	.word	0x20005a28
 8010b50:	40003800 	.word	0x40003800

08010b54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8010b54:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI2)
 8010b56:	6802      	ldr	r2, [r0, #0]
 8010b58:	4b24      	ldr	r3, [pc, #144]	; (8010bec <HAL_SPI_MspInit+0x98>)
{
 8010b5a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010b5c:	2400      	movs	r4, #0
  if(spiHandle->Instance==SPI2)
 8010b5e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010b60:	9404      	str	r4, [sp, #16]
 8010b62:	9403      	str	r4, [sp, #12]
 8010b64:	9405      	str	r4, [sp, #20]
 8010b66:	9406      	str	r4, [sp, #24]
 8010b68:	9407      	str	r4, [sp, #28]
  if(spiHandle->Instance==SPI2)
 8010b6a:	d001      	beq.n	8010b70 <HAL_SPI_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8010b6c:	b009      	add	sp, #36	; 0x24
 8010b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8010b70:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8010b74:	2505      	movs	r5, #5
    __HAL_RCC_SPI2_CLK_ENABLE();
 8010b76:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(LED_MOSI_GPIO_Port, &GPIO_InitStruct);
 8010b78:	481d      	ldr	r0, [pc, #116]	; (8010bf0 <HAL_SPI_MspInit+0x9c>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8010b7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010b7e:	659a      	str	r2, [r3, #88]	; 0x58
 8010b80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010b82:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8010b86:	9200      	str	r2, [sp, #0]
 8010b88:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010b8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010b8c:	f042 0204 	orr.w	r2, r2, #4
 8010b90:	64da      	str	r2, [r3, #76]	; 0x4c
 8010b92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010b94:	f002 0204 	and.w	r2, r2, #4
 8010b98:	9201      	str	r2, [sp, #4]
 8010b9a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010b9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010b9e:	f042 0202 	orr.w	r2, r2, #2
 8010ba2:	64da      	str	r2, [r3, #76]	; 0x4c
 8010ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8010ba6:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010ba8:	f003 0302 	and.w	r3, r3, #2
 8010bac:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010bae:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = LED_MOSI_Pin;
 8010bb0:	2308      	movs	r3, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010bb2:	2603      	movs	r6, #3
    HAL_GPIO_Init(LED_MOSI_GPIO_Port, &GPIO_InitStruct);
 8010bb4:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010bb6:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = LED_MOSI_Pin;
 8010bb8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010bba:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010bbc:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(LED_MOSI_GPIO_Port, &GPIO_InitStruct);
 8010bbe:	f7f1 f9ad 	bl	8001f1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED_SCK_Pin;
 8010bc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(LED_SCK_GPIO_Port, &GPIO_InitStruct);
 8010bc6:	a903      	add	r1, sp, #12
 8010bc8:	480a      	ldr	r0, [pc, #40]	; (8010bf4 <HAL_SPI_MspInit+0xa0>)
    GPIO_InitStruct.Pin = LED_SCK_Pin;
 8010bca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010bcc:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010bce:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8010bd0:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010bd2:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(LED_SCK_GPIO_Port, &GPIO_InitStruct);
 8010bd4:	f7f1 f9a2 	bl	8001f1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8010bd8:	4622      	mov	r2, r4
 8010bda:	4629      	mov	r1, r5
 8010bdc:	2024      	movs	r0, #36	; 0x24
 8010bde:	f7f0 fe07 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8010be2:	2024      	movs	r0, #36	; 0x24
 8010be4:	f7f0 fe3a 	bl	800185c <HAL_NVIC_EnableIRQ>
}
 8010be8:	b009      	add	sp, #36	; 0x24
 8010bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bec:	40003800 	.word	0x40003800
 8010bf0:	48000800 	.word	0x48000800
 8010bf4:	48000400 	.word	0x48000400

08010bf8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010bf8:	4b0e      	ldr	r3, [pc, #56]	; (8010c34 <HAL_MspInit+0x3c>)
{
 8010bfa:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010bfc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8010bfe:	f042 0201 	orr.w	r2, r2, #1
 8010c02:	661a      	str	r2, [r3, #96]	; 0x60
 8010c04:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8010c06:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010c08:	f002 0201 	and.w	r2, r2, #1
 8010c0c:	9200      	str	r2, [sp, #0]
 8010c0e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8010c10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010c12:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8010c16:	659a      	str	r2, [r3, #88]	; 0x58
 8010c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010c1e:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8010c20:	2200      	movs	r2, #0
 8010c22:	210f      	movs	r1, #15
 8010c24:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8010c28:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8010c2a:	f7f0 fde1 	bl	80017f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010c2e:	b003      	add	sp, #12
 8010c30:	f85d fb04 	ldr.w	pc, [sp], #4
 8010c34:	40021000 	.word	0x40021000

08010c38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010c38:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8010c3a:	4601      	mov	r1, r0
{
 8010c3c:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8010c3e:	2200      	movs	r2, #0
 8010c40:	201c      	movs	r0, #28
 8010c42:	f7f0 fdd5 	bl	80017f0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8010c46:	201c      	movs	r0, #28
 8010c48:	f7f0 fe08 	bl	800185c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8010c4c:	4b15      	ldr	r3, [pc, #84]	; (8010ca4 <HAL_InitTick+0x6c>)
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8010c4e:	4c16      	ldr	r4, [pc, #88]	; (8010ca8 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM2_CLK_ENABLE();
 8010c50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010c52:	f042 0201 	orr.w	r2, r2, #1
 8010c56:	659a      	str	r2, [r3, #88]	; 0x58
 8010c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c5a:	f003 0301 	and.w	r3, r3, #1
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8010c5e:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM2_CLK_ENABLE();
 8010c60:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8010c62:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 8010c64:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8010c66:	f7f3 fdc7 	bl	80047f8 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8010c6a:	f7f3 fda1 	bl	80047b0 <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8010c6e:	4b0f      	ldr	r3, [pc, #60]	; (8010cac <HAL_InitTick+0x74>)
 8010c70:	fba3 2300 	umull	r2, r3, r3, r0
 8010c74:	0c9b      	lsrs	r3, r3, #18
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
  htim2.Init.Prescaler = uwPrescalerValue;
  htim2.Init.ClockDivision = 0;
 8010c76:	2200      	movs	r2, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8010c78:	3b01      	subs	r3, #1
  htim2.Instance = TIM2;
 8010c7a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  htim2.Init.Period = (1000000 / 1000) - 1;
 8010c7e:	f240 31e7 	movw	r1, #999	; 0x3e7
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8010c82:	4620      	mov	r0, r4
  htim2.Init.Prescaler = uwPrescalerValue;
 8010c84:	6063      	str	r3, [r4, #4]
  htim2.Instance = TIM2;
 8010c86:	6025      	str	r5, [r4, #0]
  htim2.Init.Period = (1000000 / 1000) - 1;
 8010c88:	60e1      	str	r1, [r4, #12]
  htim2.Init.ClockDivision = 0;
 8010c8a:	6122      	str	r2, [r4, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010c8c:	60a2      	str	r2, [r4, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8010c8e:	f7f5 f805 	bl	8005c9c <HAL_TIM_Base_Init>
 8010c92:	b110      	cbz	r0, 8010c9a <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8010c94:	2001      	movs	r0, #1
}
 8010c96:	b009      	add	sp, #36	; 0x24
 8010c98:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim2);
 8010c9a:	4620      	mov	r0, r4
 8010c9c:	f7f5 f8b2 	bl	8005e04 <HAL_TIM_Base_Start_IT>
}
 8010ca0:	b009      	add	sp, #36	; 0x24
 8010ca2:	bd30      	pop	{r4, r5, pc}
 8010ca4:	40021000 	.word	0x40021000
 8010ca8:	20005a8c 	.word	0x20005a8c
 8010cac:	431bde83 	.word	0x431bde83

08010cb0 <NMI_Handler>:
 8010cb0:	4770      	bx	lr
 8010cb2:	bf00      	nop

08010cb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8010cb4:	e7fe      	b.n	8010cb4 <HardFault_Handler>
 8010cb6:	bf00      	nop

08010cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8010cb8:	e7fe      	b.n	8010cb8 <MemManage_Handler>
 8010cba:	bf00      	nop

08010cbc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8010cbc:	e7fe      	b.n	8010cbc <BusFault_Handler>
 8010cbe:	bf00      	nop

08010cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8010cc0:	e7fe      	b.n	8010cc0 <UsageFault_Handler>
 8010cc2:	bf00      	nop

08010cc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8010cc4:	4770      	bx	lr
 8010cc6:	bf00      	nop

08010cc8 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8010cc8:	2001      	movs	r0, #1
 8010cca:	f7f1 ba4d 	b.w	8002168 <HAL_GPIO_EXTI_IRQHandler>
 8010cce:	bf00      	nop

08010cd0 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8010cd0:	2002      	movs	r0, #2
 8010cd2:	f7f1 ba49 	b.w	8002168 <HAL_GPIO_EXTI_IRQHandler>
 8010cd6:	bf00      	nop

08010cd8 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8010cd8:	2004      	movs	r0, #4
 8010cda:	f7f1 ba45 	b.w	8002168 <HAL_GPIO_EXTI_IRQHandler>
 8010cde:	bf00      	nop

08010ce0 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8010ce0:	2008      	movs	r0, #8
 8010ce2:	f7f1 ba41 	b.w	8002168 <HAL_GPIO_EXTI_IRQHandler>
 8010ce6:	bf00      	nop

08010ce8 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8010ce8:	4801      	ldr	r0, [pc, #4]	; (8010cf0 <DMA1_Channel1_IRQHandler+0x8>)
 8010cea:	f7f1 b8c9 	b.w	8001e80 <HAL_DMA_IRQHandler>
 8010cee:	bf00      	nop
 8010cf0:	20005464 	.word	0x20005464

08010cf4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8010cf4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8010cf6:	2020      	movs	r0, #32
 8010cf8:	f7f1 fa36 	bl	8002168 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8010cfc:	2080      	movs	r0, #128	; 0x80
 8010cfe:	f7f1 fa33 	bl	8002168 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8010d02:	f44f 7080 	mov.w	r0, #256	; 0x100
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8010d06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8010d0a:	f7f1 ba2d 	b.w	8002168 <HAL_GPIO_EXTI_IRQHandler>
 8010d0e:	bf00      	nop

08010d10 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8010d10:	4801      	ldr	r0, [pc, #4]	; (8010d18 <TIM2_IRQHandler+0x8>)
 8010d12:	f7f5 bc1f 	b.w	8006554 <HAL_TIM_IRQHandler>
 8010d16:	bf00      	nop
 8010d18:	20005a8c 	.word	0x20005a8c

08010d1c <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8010d1c:	4801      	ldr	r0, [pc, #4]	; (8010d24 <TIM3_IRQHandler+0x8>)
 8010d1e:	f7f5 bc19 	b.w	8006554 <HAL_TIM_IRQHandler>
 8010d22:	bf00      	nop
 8010d24:	20005b4c 	.word	0x20005b4c

08010d28 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8010d28:	4801      	ldr	r0, [pc, #4]	; (8010d30 <TIM4_IRQHandler+0x8>)
 8010d2a:	f7f5 bc13 	b.w	8006554 <HAL_TIM_IRQHandler>
 8010d2e:	bf00      	nop
 8010d30:	20005acc 	.word	0x20005acc

08010d34 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8010d34:	4801      	ldr	r0, [pc, #4]	; (8010d3c <I2C1_EV_IRQHandler+0x8>)
 8010d36:	f7f2 b845 	b.w	8002dc4 <HAL_I2C_EV_IRQHandler>
 8010d3a:	bf00      	nop
 8010d3c:	20005534 	.word	0x20005534

08010d40 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8010d40:	4801      	ldr	r0, [pc, #4]	; (8010d48 <I2C2_EV_IRQHandler+0x8>)
 8010d42:	f7f2 b83f 	b.w	8002dc4 <HAL_I2C_EV_IRQHandler>
 8010d46:	bf00      	nop
 8010d48:	20005580 	.word	0x20005580

08010d4c <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8010d4c:	4801      	ldr	r0, [pc, #4]	; (8010d54 <SPI2_IRQHandler+0x8>)
 8010d4e:	f7f4 bedd 	b.w	8005b0c <HAL_SPI_IRQHandler>
 8010d52:	bf00      	nop
 8010d54:	20005a28 	.word	0x20005a28

08010d58 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8010d58:	4801      	ldr	r0, [pc, #4]	; (8010d60 <USART1_IRQHandler+0x8>)
 8010d5a:	f7f5 bd33 	b.w	80067c4 <HAL_UART_IRQHandler>
 8010d5e:	bf00      	nop
 8010d60:	20005d10 	.word	0x20005d10

08010d64 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8010d64:	4801      	ldr	r0, [pc, #4]	; (8010d6c <USART3_IRQHandler+0x8>)
 8010d66:	f7f5 bd2d 	b.w	80067c4 <HAL_UART_IRQHandler>
 8010d6a:	bf00      	nop
 8010d6c:	20005c8c 	.word	0x20005c8c

08010d70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8010d70:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8010d72:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8010d76:	f7f1 f9f7 	bl	8002168 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8010d7a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8010d7e:	f7f1 f9f3 	bl	8002168 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8010d82:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8010d86:	f7f1 f9ef 	bl	8002168 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8010d8a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8010d8e:	f7f1 f9eb 	bl	8002168 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8010d92:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8010d96:	f7f1 f9e7 	bl	8002168 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8010d9a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8010d9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8010da2:	f7f1 b9e1 	b.w	8002168 <HAL_GPIO_EXTI_IRQHandler>
 8010da6:	bf00      	nop

08010da8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8010da8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8010daa:	4804      	ldr	r0, [pc, #16]	; (8010dbc <TIM6_DAC_IRQHandler+0x14>)
 8010dac:	f7f5 fbd2 	bl	8006554 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8010db0:	4803      	ldr	r0, [pc, #12]	; (8010dc0 <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8010db2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DAC_IRQHandler(&hdac1);
 8010db6:	f7f0 be39 	b.w	8001a2c <HAL_DAC_IRQHandler>
 8010dba:	bf00      	nop
 8010dbc:	20005b8c 	.word	0x20005b8c
 8010dc0:	20005450 	.word	0x20005450

08010dc4 <COMP_IRQHandler>:
void COMP_IRQHandler(void)
{
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8010dc4:	4801      	ldr	r0, [pc, #4]	; (8010dcc <COMP_IRQHandler+0x8>)
 8010dc6:	f7f0 bcdd 	b.w	8001784 <HAL_COMP_IRQHandler>
 8010dca:	bf00      	nop
 8010dcc:	20005424 	.word	0x20005424

08010dd0 <I2C3_EV_IRQHandler>:
void I2C3_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8010dd0:	4801      	ldr	r0, [pc, #4]	; (8010dd8 <I2C3_EV_IRQHandler+0x8>)
 8010dd2:	f7f1 bff7 	b.w	8002dc4 <HAL_I2C_EV_IRQHandler>
 8010dd6:	bf00      	nop
 8010dd8:	200054e8 	.word	0x200054e8

08010ddc <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010ddc:	4911      	ldr	r1, [pc, #68]	; (8010e24 <SystemInit+0x48>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8010dde:	4b12      	ldr	r3, [pc, #72]	; (8010e28 <SystemInit+0x4c>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010de0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8010de4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 8010de8:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010dea:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_MSION;
 8010dee:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8010df0:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8010df2:	f042 0201 	orr.w	r2, r2, #1
 8010df6:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8010df8:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8010dfa:	681a      	ldr	r2, [r3, #0]
 8010dfc:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8010e00:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8010e04:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  RCC->CR &= 0xEAF6FFFFU;
 8010e08:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x00001000U;
 8010e0a:	60dc      	str	r4, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8010e0c:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8010e0e:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= 0xFFFBFFFFU;
 8010e12:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010e16:	601a      	str	r2, [r3, #0]
  RCC->CIER = 0x00000000U;
 8010e18:	6198      	str	r0, [r3, #24]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8010e1a:	608c      	str	r4, [r1, #8]
#endif
}
 8010e1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e20:	4770      	bx	lr
 8010e22:	bf00      	nop
 8010e24:	e000ed00 	.word	0xe000ed00
 8010e28:	40021000 	.word	0x40021000

08010e2c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8010e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8010e2e:	2400      	movs	r4, #0
{
 8010e30:	b0a1      	sub	sp, #132	; 0x84
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  htim1.Instance = TIM1;
 8010e32:	4d4c      	ldr	r5, [pc, #304]	; (8010f64 <MX_TIM1_Init+0x138>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8010e34:	9406      	str	r4, [sp, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8010e36:	4621      	mov	r1, r4
 8010e38:	222c      	movs	r2, #44	; 0x2c
 8010e3a:	a815      	add	r0, sp, #84	; 0x54
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8010e3c:	9405      	str	r4, [sp, #20]
 8010e3e:	9407      	str	r4, [sp, #28]
 8010e40:	9408      	str	r4, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8010e42:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8010e44:	940e      	str	r4, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8010e46:	9403      	str	r4, [sp, #12]
 8010e48:	9404      	str	r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8010e4a:	940f      	str	r4, [sp, #60]	; 0x3c
 8010e4c:	9410      	str	r4, [sp, #64]	; 0x40
 8010e4e:	9411      	str	r4, [sp, #68]	; 0x44
 8010e50:	9412      	str	r4, [sp, #72]	; 0x48
 8010e52:	9413      	str	r4, [sp, #76]	; 0x4c
 8010e54:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8010e56:	f002 fbac 	bl	80135b2 <memset>
  htim1.Instance = TIM1;
 8010e5a:	4943      	ldr	r1, [pc, #268]	; (8010f68 <MX_TIM1_Init+0x13c>)
  htim1.Init.Prescaler = 7;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010e5c:	60ac      	str	r4, [r5, #8]
  htim1.Init.Prescaler = 7;
 8010e5e:	2207      	movs	r2, #7
  htim1.Init.Period = 99;
 8010e60:	2363      	movs	r3, #99	; 0x63
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8010e62:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8010e64:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8010e66:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8010e68:	61ac      	str	r4, [r5, #24]
  htim1.Init.Prescaler = 7;
 8010e6a:	e885 0006 	stmia.w	r5, {r1, r2}
  htim1.Init.Period = 99;
 8010e6e:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8010e70:	f7f4 ff14 	bl	8005c9c <HAL_TIM_Base_Init>
 8010e74:	2800      	cmp	r0, #0
 8010e76:	d157      	bne.n	8010f28 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8010e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8010e7c:	a905      	add	r1, sp, #20
 8010e7e:	4839      	ldr	r0, [pc, #228]	; (8010f64 <MX_TIM1_Init+0x138>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8010e80:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8010e82:	f7f5 faa9 	bl	80063d8 <HAL_TIM_ConfigClockSource>
 8010e86:	2800      	cmp	r0, #0
 8010e88:	d14b      	bne.n	8010f22 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8010e8a:	4836      	ldr	r0, [pc, #216]	; (8010f64 <MX_TIM1_Init+0x138>)
 8010e8c:	f7f4 ffea 	bl	8005e64 <HAL_TIM_PWM_Init>
 8010e90:	2800      	cmp	r0, #0
 8010e92:	d143      	bne.n	8010f1c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8010e94:	2300      	movs	r3, #0
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8010e96:	a902      	add	r1, sp, #8
 8010e98:	4832      	ldr	r0, [pc, #200]	; (8010f64 <MX_TIM1_Init+0x138>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8010e9a:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8010e9c:	9303      	str	r3, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8010e9e:	9304      	str	r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8010ea0:	f7f5 fc10 	bl	80066c4 <HAL_TIMEx_MasterConfigSynchronization>
 8010ea4:	2800      	cmp	r0, #0
 8010ea6:	d136      	bne.n	8010f16 <MX_TIM1_Init+0xea>
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 40;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8010ea8:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8010eaa:	2760      	movs	r7, #96	; 0x60
  sConfigOC.Pulse = 40;
 8010eac:	2628      	movs	r6, #40	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8010eae:	2402      	movs	r4, #2
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8010eb0:	a90e      	add	r1, sp, #56	; 0x38
 8010eb2:	461a      	mov	r2, r3
 8010eb4:	482b      	ldr	r0, [pc, #172]	; (8010f64 <MX_TIM1_Init+0x138>)
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8010eb6:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8010eb8:	9312      	str	r3, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8010eba:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8010ebc:	9314      	str	r3, [sp, #80]	; 0x50
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8010ebe:	970e      	str	r7, [sp, #56]	; 0x38
  sConfigOC.Pulse = 40;
 8010ec0:	960f      	str	r6, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8010ec2:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8010ec4:	f7f5 f8a6 	bl	8006014 <HAL_TIM_PWM_ConfigChannel>
 8010ec8:	bb10      	cbnz	r0, 8010f10 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8010eca:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8010ecc:	f44f 5400 	mov.w	r4, #8192	; 0x2000
  sBreakDeadTimeConfig.BreakFilter = 0;
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8010ed0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  sBreakDeadTimeConfig.Break2Filter = 0;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8010ed4:	a915      	add	r1, sp, #84	; 0x54
 8010ed6:	4823      	ldr	r0, [pc, #140]	; (8010f64 <MX_TIM1_Init+0x138>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8010ed8:	9315      	str	r3, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8010eda:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8010edc:	9317      	str	r3, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.DeadTime = 0;
 8010ede:	9318      	str	r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8010ee0:	9319      	str	r3, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.BreakFilter = 0;
 8010ee2:	931b      	str	r3, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8010ee4:	931c      	str	r3, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.Break2Filter = 0;
 8010ee6:	931e      	str	r3, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8010ee8:	931f      	str	r3, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8010eea:	941a      	str	r4, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8010eec:	921d      	str	r2, [sp, #116]	; 0x74
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8010eee:	f7f5 fc19 	bl	8006724 <HAL_TIMEx_ConfigBreakDeadTime>
 8010ef2:	b108      	cbz	r0, 8010ef8 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8010ef4:	f7ff fa90 	bl	8010418 <Error_Handler>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 8010ef8:	6829      	ldr	r1, [r5, #0]
 8010efa:	4a1b      	ldr	r2, [pc, #108]	; (8010f68 <MX_TIM1_Init+0x13c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010efc:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM1)
 8010efe:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010f00:	930a      	str	r3, [sp, #40]	; 0x28
 8010f02:	9309      	str	r3, [sp, #36]	; 0x24
 8010f04:	930b      	str	r3, [sp, #44]	; 0x2c
 8010f06:	930c      	str	r3, [sp, #48]	; 0x30
 8010f08:	930d      	str	r3, [sp, #52]	; 0x34
  if(timHandle->Instance==TIM1)
 8010f0a:	d010      	beq.n	8010f2e <MX_TIM1_Init+0x102>
}
 8010f0c:	b021      	add	sp, #132	; 0x84
 8010f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8010f10:	f7ff fa82 	bl	8010418 <Error_Handler>
 8010f14:	e7d9      	b.n	8010eca <MX_TIM1_Init+0x9e>
    Error_Handler();
 8010f16:	f7ff fa7f 	bl	8010418 <Error_Handler>
 8010f1a:	e7c5      	b.n	8010ea8 <MX_TIM1_Init+0x7c>
    Error_Handler();
 8010f1c:	f7ff fa7c 	bl	8010418 <Error_Handler>
 8010f20:	e7b8      	b.n	8010e94 <MX_TIM1_Init+0x68>
    Error_Handler();
 8010f22:	f7ff fa79 	bl	8010418 <Error_Handler>
 8010f26:	e7b0      	b.n	8010e8a <MX_TIM1_Init+0x5e>
    Error_Handler();
 8010f28:	f7ff fa76 	bl	8010418 <Error_Handler>
 8010f2c:	e7a4      	b.n	8010e78 <MX_TIM1_Init+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8010f2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010f32:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = LED_PWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 8010f36:	480d      	ldr	r0, [pc, #52]	; (8010f6c <MX_TIM1_Init+0x140>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8010f38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010f3a:	f042 0210 	orr.w	r2, r2, #16
 8010f3e:	64da      	str	r2, [r3, #76]	; 0x4c
 8010f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010f42:	f003 0310 	and.w	r3, r3, #16
 8010f46:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f48:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8010f4a:	2301      	movs	r3, #1
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 8010f4c:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 8010f4e:	f44f 7400 	mov.w	r4, #512	; 0x200
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8010f52:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 8010f54:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f56:	920a      	str	r2, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8010f58:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 8010f5a:	f7f0 ffdf 	bl	8001f1c <HAL_GPIO_Init>
}
 8010f5e:	b021      	add	sp, #132	; 0x84
 8010f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f62:	bf00      	nop
 8010f64:	20005bcc 	.word	0x20005bcc
 8010f68:	40012c00 	.word	0x40012c00
 8010f6c:	48001000 	.word	0x48001000

08010f70 <MX_TIM3_Init>:
{
 8010f70:	b510      	push	{r4, lr}
  htim3.Instance = TIM3;
 8010f72:	4a19      	ldr	r2, [pc, #100]	; (8010fd8 <MX_TIM3_Init+0x68>)
 8010f74:	4b19      	ldr	r3, [pc, #100]	; (8010fdc <MX_TIM3_Init+0x6c>)
 8010f76:	6013      	str	r3, [r2, #0]
{
 8010f78:	b088      	sub	sp, #32
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8010f7a:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 799;
 8010f7c:	f240 341f 	movw	r4, #799	; 0x31f
  htim3.Init.Period = 9;
 8010f80:	2109      	movs	r1, #9
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8010f82:	4610      	mov	r0, r2
  htim3.Init.Prescaler = 799;
 8010f84:	6054      	str	r4, [r2, #4]
  htim3.Init.Period = 9;
 8010f86:	60d1      	str	r1, [r2, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010f88:	6093      	str	r3, [r2, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8010f8a:	9304      	str	r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8010f8c:	9301      	str	r3, [sp, #4]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8010f8e:	6113      	str	r3, [r2, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8010f90:	6193      	str	r3, [r2, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8010f92:	9305      	str	r3, [sp, #20]
 8010f94:	9306      	str	r3, [sp, #24]
 8010f96:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8010f98:	9302      	str	r3, [sp, #8]
 8010f9a:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8010f9c:	f7f4 fe7e 	bl	8005c9c <HAL_TIM_Base_Init>
 8010fa0:	b9b0      	cbnz	r0, 8010fd0 <MX_TIM3_Init+0x60>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8010fa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8010fa6:	a904      	add	r1, sp, #16
 8010fa8:	480b      	ldr	r0, [pc, #44]	; (8010fd8 <MX_TIM3_Init+0x68>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8010faa:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8010fac:	f7f5 fa14 	bl	80063d8 <HAL_TIM_ConfigClockSource>
 8010fb0:	b958      	cbnz	r0, 8010fca <MX_TIM3_Init+0x5a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8010fb2:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8010fb4:	a901      	add	r1, sp, #4
 8010fb6:	4808      	ldr	r0, [pc, #32]	; (8010fd8 <MX_TIM3_Init+0x68>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8010fb8:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8010fba:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8010fbc:	f7f5 fb82 	bl	80066c4 <HAL_TIMEx_MasterConfigSynchronization>
 8010fc0:	b108      	cbz	r0, 8010fc6 <MX_TIM3_Init+0x56>
    Error_Handler();
 8010fc2:	f7ff fa29 	bl	8010418 <Error_Handler>
}
 8010fc6:	b008      	add	sp, #32
 8010fc8:	bd10      	pop	{r4, pc}
    Error_Handler();
 8010fca:	f7ff fa25 	bl	8010418 <Error_Handler>
 8010fce:	e7f0      	b.n	8010fb2 <MX_TIM3_Init+0x42>
    Error_Handler();
 8010fd0:	f7ff fa22 	bl	8010418 <Error_Handler>
 8010fd4:	e7e5      	b.n	8010fa2 <MX_TIM3_Init+0x32>
 8010fd6:	bf00      	nop
 8010fd8:	20005b4c 	.word	0x20005b4c
 8010fdc:	40000400 	.word	0x40000400

08010fe0 <MX_TIM4_Init>:
{
 8010fe0:	b510      	push	{r4, lr}
  htim4.Instance = TIM4;
 8010fe2:	4a19      	ldr	r2, [pc, #100]	; (8011048 <MX_TIM4_Init+0x68>)
 8010fe4:	4b19      	ldr	r3, [pc, #100]	; (801104c <MX_TIM4_Init+0x6c>)
 8010fe6:	6013      	str	r3, [r2, #0]
{
 8010fe8:	b088      	sub	sp, #32
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8010fea:	2300      	movs	r3, #0
  htim4.Init.Prescaler = 7999;
 8010fec:	f641 743f 	movw	r4, #7999	; 0x1f3f
  htim4.Init.Period = 6000;
 8010ff0:	f241 7170 	movw	r1, #6000	; 0x1770
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8010ff4:	4610      	mov	r0, r2
  htim4.Init.Prescaler = 7999;
 8010ff6:	6054      	str	r4, [r2, #4]
  htim4.Init.Period = 6000;
 8010ff8:	60d1      	str	r1, [r2, #12]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010ffa:	6093      	str	r3, [r2, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8010ffc:	9304      	str	r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8010ffe:	9301      	str	r3, [sp, #4]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011000:	6113      	str	r3, [r2, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011002:	6193      	str	r3, [r2, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8011004:	9305      	str	r3, [sp, #20]
 8011006:	9306      	str	r3, [sp, #24]
 8011008:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801100a:	9302      	str	r3, [sp, #8]
 801100c:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 801100e:	f7f4 fe45 	bl	8005c9c <HAL_TIM_Base_Init>
 8011012:	b9b0      	cbnz	r0, 8011042 <MX_TIM4_Init+0x62>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8011014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8011018:	a904      	add	r1, sp, #16
 801101a:	480b      	ldr	r0, [pc, #44]	; (8011048 <MX_TIM4_Init+0x68>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801101c:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 801101e:	f7f5 f9db 	bl	80063d8 <HAL_TIM_ConfigClockSource>
 8011022:	b958      	cbnz	r0, 801103c <MX_TIM4_Init+0x5c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011024:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8011026:	a901      	add	r1, sp, #4
 8011028:	4807      	ldr	r0, [pc, #28]	; (8011048 <MX_TIM4_Init+0x68>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801102a:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801102c:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 801102e:	f7f5 fb49 	bl	80066c4 <HAL_TIMEx_MasterConfigSynchronization>
 8011032:	b108      	cbz	r0, 8011038 <MX_TIM4_Init+0x58>
    Error_Handler();
 8011034:	f7ff f9f0 	bl	8010418 <Error_Handler>
}
 8011038:	b008      	add	sp, #32
 801103a:	bd10      	pop	{r4, pc}
    Error_Handler();
 801103c:	f7ff f9ec 	bl	8010418 <Error_Handler>
 8011040:	e7f0      	b.n	8011024 <MX_TIM4_Init+0x44>
    Error_Handler();
 8011042:	f7ff f9e9 	bl	8010418 <Error_Handler>
 8011046:	e7e5      	b.n	8011014 <MX_TIM4_Init+0x34>
 8011048:	20005acc 	.word	0x20005acc
 801104c:	40000800 	.word	0x40000800

08011050 <MX_TIM6_Init>:
{
 8011050:	b510      	push	{r4, lr}
  htim6.Instance = TIM6;
 8011052:	4b11      	ldr	r3, [pc, #68]	; (8011098 <MX_TIM6_Init+0x48>)
 8011054:	4a11      	ldr	r2, [pc, #68]	; (801109c <MX_TIM6_Init+0x4c>)
 8011056:	601a      	str	r2, [r3, #0]
{
 8011058:	b084      	sub	sp, #16
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801105a:	2200      	movs	r2, #0
  htim6.Init.Prescaler = 9;
 801105c:	2409      	movs	r4, #9
  htim6.Init.Period = 199;
 801105e:	21c7      	movs	r1, #199	; 0xc7
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8011060:	4618      	mov	r0, r3
  htim6.Init.Prescaler = 9;
 8011062:	605c      	str	r4, [r3, #4]
  htim6.Init.Period = 199;
 8011064:	60d9      	str	r1, [r3, #12]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011066:	609a      	str	r2, [r3, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011068:	9201      	str	r2, [sp, #4]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801106a:	619a      	str	r2, [r3, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801106c:	9202      	str	r2, [sp, #8]
 801106e:	9203      	str	r2, [sp, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8011070:	f7f4 fe14 	bl	8005c9c <HAL_TIM_Base_Init>
 8011074:	b960      	cbnz	r0, 8011090 <MX_TIM6_Init+0x40>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8011076:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011078:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 801107a:	a901      	add	r1, sp, #4
 801107c:	4806      	ldr	r0, [pc, #24]	; (8011098 <MX_TIM6_Init+0x48>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801107e:	9201      	str	r2, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011080:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8011082:	f7f5 fb1f 	bl	80066c4 <HAL_TIMEx_MasterConfigSynchronization>
 8011086:	b108      	cbz	r0, 801108c <MX_TIM6_Init+0x3c>
    Error_Handler();
 8011088:	f7ff f9c6 	bl	8010418 <Error_Handler>
}
 801108c:	b004      	add	sp, #16
 801108e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8011090:	f7ff f9c2 	bl	8010418 <Error_Handler>
 8011094:	e7ef      	b.n	8011076 <MX_TIM6_Init+0x26>
 8011096:	bf00      	nop
 8011098:	20005b8c 	.word	0x20005b8c
 801109c:	40001000 	.word	0x40001000

080110a0 <MX_TIM7_Init>:
{
 80110a0:	b500      	push	{lr}
  htim7.Instance = TIM7;
 80110a2:	4a10      	ldr	r2, [pc, #64]	; (80110e4 <MX_TIM7_Init+0x44>)
 80110a4:	4b10      	ldr	r3, [pc, #64]	; (80110e8 <MX_TIM7_Init+0x48>)
 80110a6:	6013      	str	r3, [r2, #0]
{
 80110a8:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80110aa:	2300      	movs	r3, #0
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80110ac:	4610      	mov	r0, r2
  htim7.Init.Prescaler = 0;
 80110ae:	6053      	str	r3, [r2, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80110b0:	9301      	str	r3, [sp, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80110b2:	6093      	str	r3, [r2, #8]
  htim7.Init.Period = 0;
 80110b4:	60d3      	str	r3, [r2, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80110b6:	6193      	str	r3, [r2, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80110b8:	9302      	str	r3, [sp, #8]
 80110ba:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80110bc:	f7f4 fdee 	bl	8005c9c <HAL_TIM_Base_Init>
 80110c0:	b960      	cbnz	r0, 80110dc <MX_TIM7_Init+0x3c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80110c2:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80110c4:	a901      	add	r1, sp, #4
 80110c6:	4807      	ldr	r0, [pc, #28]	; (80110e4 <MX_TIM7_Init+0x44>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80110c8:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80110ca:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80110cc:	f7f5 fafa 	bl	80066c4 <HAL_TIMEx_MasterConfigSynchronization>
 80110d0:	b108      	cbz	r0, 80110d6 <MX_TIM7_Init+0x36>
    Error_Handler();
 80110d2:	f7ff f9a1 	bl	8010418 <Error_Handler>
}
 80110d6:	b005      	add	sp, #20
 80110d8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80110dc:	f7ff f99c 	bl	8010418 <Error_Handler>
 80110e0:	e7ef      	b.n	80110c2 <MX_TIM7_Init+0x22>
 80110e2:	bf00      	nop
 80110e4:	20005c4c 	.word	0x20005c4c
 80110e8:	40001400 	.word	0x40001400

080110ec <MX_TIM16_Init>:
  htim16.Instance = TIM16;
 80110ec:	4b0a      	ldr	r3, [pc, #40]	; (8011118 <MX_TIM16_Init+0x2c>)
 80110ee:	4a0b      	ldr	r2, [pc, #44]	; (801111c <MX_TIM16_Init+0x30>)
{
 80110f0:	b510      	push	{r4, lr}
  htim16.Init.Period = 49;
 80110f2:	2131      	movs	r1, #49	; 0x31
  htim16.Instance = TIM16;
 80110f4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7;
 80110f6:	2407      	movs	r4, #7
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80110f8:	2200      	movs	r2, #0
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80110fa:	4618      	mov	r0, r3
  htim16.Init.Prescaler = 7;
 80110fc:	605c      	str	r4, [r3, #4]
  htim16.Init.Period = 49;
 80110fe:	60d9      	str	r1, [r3, #12]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011100:	609a      	str	r2, [r3, #8]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011102:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8011104:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011106:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8011108:	f7f4 fdc8 	bl	8005c9c <HAL_TIM_Base_Init>
 801110c:	b900      	cbnz	r0, 8011110 <MX_TIM16_Init+0x24>
 801110e:	bd10      	pop	{r4, pc}
}
 8011110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8011114:	f7ff b980 	b.w	8010418 <Error_Handler>
 8011118:	20005c0c 	.word	0x20005c0c
 801111c:	40014400 	.word	0x40014400

08011120 <MX_TIM17_Init>:
  htim17.Instance = TIM17;
 8011120:	4b0a      	ldr	r3, [pc, #40]	; (801114c <MX_TIM17_Init+0x2c>)
 8011122:	4a0b      	ldr	r2, [pc, #44]	; (8011150 <MX_TIM17_Init+0x30>)
{
 8011124:	b510      	push	{r4, lr}
  htim17.Init.Period = 49;
 8011126:	2131      	movs	r1, #49	; 0x31
  htim17.Instance = TIM17;
 8011128:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 79;
 801112a:	244f      	movs	r4, #79	; 0x4f
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 801112c:	2200      	movs	r2, #0
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 801112e:	4618      	mov	r0, r3
  htim17.Init.Prescaler = 79;
 8011130:	605c      	str	r4, [r3, #4]
  htim17.Init.Period = 49;
 8011132:	60d9      	str	r1, [r3, #12]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011134:	609a      	str	r2, [r3, #8]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011136:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8011138:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801113a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 801113c:	f7f4 fdae 	bl	8005c9c <HAL_TIM_Base_Init>
 8011140:	b900      	cbnz	r0, 8011144 <MX_TIM17_Init+0x24>
 8011142:	bd10      	pop	{r4, pc}
}
 8011144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8011148:	f7ff b966 	b.w	8010418 <Error_Handler>
 801114c:	20005b0c 	.word	0x20005b0c
 8011150:	40014800 	.word	0x40014800

08011154 <HAL_TIM_Base_MspInit>:
{
 8011154:	b500      	push	{lr}
  if(tim_baseHandle->Instance==TIM1)
 8011156:	6803      	ldr	r3, [r0, #0]
 8011158:	4a40      	ldr	r2, [pc, #256]	; (801125c <HAL_TIM_Base_MspInit+0x108>)
 801115a:	4293      	cmp	r3, r2
{
 801115c:	b089      	sub	sp, #36	; 0x24
  if(tim_baseHandle->Instance==TIM1)
 801115e:	d021      	beq.n	80111a4 <HAL_TIM_Base_MspInit+0x50>
  else if(tim_baseHandle->Instance==TIM3)
 8011160:	4a3f      	ldr	r2, [pc, #252]	; (8011260 <HAL_TIM_Base_MspInit+0x10c>)
 8011162:	4293      	cmp	r3, r2
 8011164:	d041      	beq.n	80111ea <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM4)
 8011166:	4a3f      	ldr	r2, [pc, #252]	; (8011264 <HAL_TIM_Base_MspInit+0x110>)
 8011168:	4293      	cmp	r3, r2
 801116a:	d051      	beq.n	8011210 <HAL_TIM_Base_MspInit+0xbc>
  else if(tim_baseHandle->Instance==TIM6)
 801116c:	4a3e      	ldr	r2, [pc, #248]	; (8011268 <HAL_TIM_Base_MspInit+0x114>)
 801116e:	4293      	cmp	r3, r2
 8011170:	d061      	beq.n	8011236 <HAL_TIM_Base_MspInit+0xe2>
  else if(tim_baseHandle->Instance==TIM7)
 8011172:	4a3e      	ldr	r2, [pc, #248]	; (801126c <HAL_TIM_Base_MspInit+0x118>)
 8011174:	4293      	cmp	r3, r2
 8011176:	d022      	beq.n	80111be <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM16)
 8011178:	4a3d      	ldr	r2, [pc, #244]	; (8011270 <HAL_TIM_Base_MspInit+0x11c>)
 801117a:	4293      	cmp	r3, r2
 801117c:	d02a      	beq.n	80111d4 <HAL_TIM_Base_MspInit+0x80>
  else if(tim_baseHandle->Instance==TIM17)
 801117e:	4a3d      	ldr	r2, [pc, #244]	; (8011274 <HAL_TIM_Base_MspInit+0x120>)
 8011180:	4293      	cmp	r3, r2
 8011182:	d002      	beq.n	801118a <HAL_TIM_Base_MspInit+0x36>
}
 8011184:	b009      	add	sp, #36	; 0x24
 8011186:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM17_CLK_ENABLE();
 801118a:	4b3b      	ldr	r3, [pc, #236]	; (8011278 <HAL_TIM_Base_MspInit+0x124>)
 801118c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801118e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8011192:	661a      	str	r2, [r3, #96]	; 0x60
 8011194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011196:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801119a:	9307      	str	r3, [sp, #28]
 801119c:	9b07      	ldr	r3, [sp, #28]
}
 801119e:	b009      	add	sp, #36	; 0x24
 80111a0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 80111a4:	4b34      	ldr	r3, [pc, #208]	; (8011278 <HAL_TIM_Base_MspInit+0x124>)
 80111a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80111a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80111ac:	661a      	str	r2, [r3, #96]	; 0x60
 80111ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80111b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80111b4:	9301      	str	r3, [sp, #4]
 80111b6:	9b01      	ldr	r3, [sp, #4]
}
 80111b8:	b009      	add	sp, #36	; 0x24
 80111ba:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM7_CLK_ENABLE();
 80111be:	4b2e      	ldr	r3, [pc, #184]	; (8011278 <HAL_TIM_Base_MspInit+0x124>)
 80111c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80111c2:	f042 0220 	orr.w	r2, r2, #32
 80111c6:	659a      	str	r2, [r3, #88]	; 0x58
 80111c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80111ca:	f003 0320 	and.w	r3, r3, #32
 80111ce:	9305      	str	r3, [sp, #20]
 80111d0:	9b05      	ldr	r3, [sp, #20]
 80111d2:	e7d7      	b.n	8011184 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80111d4:	4b28      	ldr	r3, [pc, #160]	; (8011278 <HAL_TIM_Base_MspInit+0x124>)
 80111d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80111d8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80111dc:	661a      	str	r2, [r3, #96]	; 0x60
 80111de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80111e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80111e4:	9306      	str	r3, [sp, #24]
 80111e6:	9b06      	ldr	r3, [sp, #24]
 80111e8:	e7cc      	b.n	8011184 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80111ea:	4b23      	ldr	r3, [pc, #140]	; (8011278 <HAL_TIM_Base_MspInit+0x124>)
 80111ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80111ee:	f042 0202 	orr.w	r2, r2, #2
 80111f2:	659a      	str	r2, [r3, #88]	; 0x58
 80111f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80111f6:	f003 0302 	and.w	r3, r3, #2
 80111fa:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80111fc:	2200      	movs	r2, #0
 80111fe:	2105      	movs	r1, #5
 8011200:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8011202:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8011204:	f7f0 faf4 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8011208:	201d      	movs	r0, #29
 801120a:	f7f0 fb27 	bl	800185c <HAL_NVIC_EnableIRQ>
 801120e:	e7b9      	b.n	8011184 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8011210:	4b19      	ldr	r3, [pc, #100]	; (8011278 <HAL_TIM_Base_MspInit+0x124>)
 8011212:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011214:	f042 0204 	orr.w	r2, r2, #4
 8011218:	659a      	str	r2, [r3, #88]	; 0x58
 801121a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801121c:	f003 0304 	and.w	r3, r3, #4
 8011220:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8011222:	2200      	movs	r2, #0
 8011224:	2105      	movs	r1, #5
 8011226:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8011228:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 801122a:	f7f0 fae1 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 801122e:	201e      	movs	r0, #30
 8011230:	f7f0 fb14 	bl	800185c <HAL_NVIC_EnableIRQ>
 8011234:	e7a6      	b.n	8011184 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8011236:	4b10      	ldr	r3, [pc, #64]	; (8011278 <HAL_TIM_Base_MspInit+0x124>)
 8011238:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801123a:	f042 0210 	orr.w	r2, r2, #16
 801123e:	659a      	str	r2, [r3, #88]	; 0x58
 8011240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011242:	f003 0310 	and.w	r3, r3, #16
 8011246:	9304      	str	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8011248:	2200      	movs	r2, #0
 801124a:	2105      	movs	r1, #5
 801124c:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 801124e:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8011250:	f7f0 face 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8011254:	2036      	movs	r0, #54	; 0x36
 8011256:	f7f0 fb01 	bl	800185c <HAL_NVIC_EnableIRQ>
 801125a:	e793      	b.n	8011184 <HAL_TIM_Base_MspInit+0x30>
 801125c:	40012c00 	.word	0x40012c00
 8011260:	40000400 	.word	0x40000400
 8011264:	40000800 	.word	0x40000800
 8011268:	40001000 	.word	0x40001000
 801126c:	40001400 	.word	0x40001400
 8011270:	40014400 	.word	0x40014400
 8011274:	40014800 	.word	0x40014800
 8011278:	40021000 	.word	0x40021000

0801127c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 801127c:	4b18      	ldr	r3, [pc, #96]	; (80112e0 <MX_USART1_UART_Init+0x64>)
 801127e:	4a19      	ldr	r2, [pc, #100]	; (80112e4 <MX_USART1_UART_Init+0x68>)
{
 8011280:	b510      	push	{r4, lr}
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8011282:	210c      	movs	r1, #12
  huart1.Instance = USART1;
 8011284:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8011286:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801128a:	2200      	movs	r2, #0
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801128c:	4618      	mov	r0, r3
  huart1.Init.BaudRate = 115200;
 801128e:	605c      	str	r4, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8011290:	6159      	str	r1, [r3, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8011292:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8011294:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8011296:	611a      	str	r2, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011298:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801129a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801129c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 801129e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80112a0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80112a2:	f7f5 fbd5 	bl	8006a50 <HAL_UART_Init>
 80112a6:	b9c0      	cbnz	r0, 80112da <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80112a8:	2100      	movs	r1, #0
 80112aa:	480d      	ldr	r0, [pc, #52]	; (80112e0 <MX_USART1_UART_Init+0x64>)
 80112ac:	f7f6 f9d8 	bl	8007660 <HAL_UARTEx_SetTxFifoThreshold>
 80112b0:	b980      	cbnz	r0, 80112d4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80112b2:	2100      	movs	r1, #0
 80112b4:	480a      	ldr	r0, [pc, #40]	; (80112e0 <MX_USART1_UART_Init+0x64>)
 80112b6:	f7f6 fa35 	bl	8007724 <HAL_UARTEx_SetRxFifoThreshold>
 80112ba:	b940      	cbnz	r0, 80112ce <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80112bc:	4808      	ldr	r0, [pc, #32]	; (80112e0 <MX_USART1_UART_Init+0x64>)
 80112be:	f7f6 f9b1 	bl	8007624 <HAL_UARTEx_DisableFifoMode>
 80112c2:	b900      	cbnz	r0, 80112c6 <MX_USART1_UART_Init+0x4a>
 80112c4:	bd10      	pop	{r4, pc}
  {
    Error_Handler();
  }

}
 80112c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80112ca:	f7ff b8a5 	b.w	8010418 <Error_Handler>
    Error_Handler();
 80112ce:	f7ff f8a3 	bl	8010418 <Error_Handler>
 80112d2:	e7f3      	b.n	80112bc <MX_USART1_UART_Init+0x40>
    Error_Handler();
 80112d4:	f7ff f8a0 	bl	8010418 <Error_Handler>
 80112d8:	e7eb      	b.n	80112b2 <MX_USART1_UART_Init+0x36>
    Error_Handler();
 80112da:	f7ff f89d 	bl	8010418 <Error_Handler>
 80112de:	e7e3      	b.n	80112a8 <MX_USART1_UART_Init+0x2c>
 80112e0:	20005d10 	.word	0x20005d10
 80112e4:	40013800 	.word	0x40013800

080112e8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{

  huart3.Instance = USART3;
 80112e8:	4b18      	ldr	r3, [pc, #96]	; (801134c <MX_USART3_UART_Init+0x64>)
 80112ea:	4a19      	ldr	r2, [pc, #100]	; (8011350 <MX_USART3_UART_Init+0x68>)
{
 80112ec:	b510      	push	{r4, lr}
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 80112ee:	210c      	movs	r1, #12
  huart3.Instance = USART3;
 80112f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80112f2:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80112f6:	2200      	movs	r2, #0
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80112f8:	4618      	mov	r0, r3
  huart3.Init.BaudRate = 115200;
 80112fa:	605c      	str	r4, [r3, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80112fc:	6159      	str	r1, [r3, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80112fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8011300:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8011302:	611a      	str	r2, [r3, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011304:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8011306:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8011308:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 801130a:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801130c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 801130e:	f7f5 fb9f 	bl	8006a50 <HAL_UART_Init>
 8011312:	b9c0      	cbnz	r0, 8011346 <MX_USART3_UART_Init+0x5e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8011314:	2100      	movs	r1, #0
 8011316:	480d      	ldr	r0, [pc, #52]	; (801134c <MX_USART3_UART_Init+0x64>)
 8011318:	f7f6 f9a2 	bl	8007660 <HAL_UARTEx_SetTxFifoThreshold>
 801131c:	b980      	cbnz	r0, 8011340 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 801131e:	2100      	movs	r1, #0
 8011320:	480a      	ldr	r0, [pc, #40]	; (801134c <MX_USART3_UART_Init+0x64>)
 8011322:	f7f6 f9ff 	bl	8007724 <HAL_UARTEx_SetRxFifoThreshold>
 8011326:	b940      	cbnz	r0, 801133a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8011328:	4808      	ldr	r0, [pc, #32]	; (801134c <MX_USART3_UART_Init+0x64>)
 801132a:	f7f6 f97b 	bl	8007624 <HAL_UARTEx_DisableFifoMode>
 801132e:	b900      	cbnz	r0, 8011332 <MX_USART3_UART_Init+0x4a>
 8011330:	bd10      	pop	{r4, pc}
  {
    Error_Handler();
  }

}
 8011332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8011336:	f7ff b86f 	b.w	8010418 <Error_Handler>
    Error_Handler();
 801133a:	f7ff f86d 	bl	8010418 <Error_Handler>
 801133e:	e7f3      	b.n	8011328 <MX_USART3_UART_Init+0x40>
    Error_Handler();
 8011340:	f7ff f86a 	bl	8010418 <Error_Handler>
 8011344:	e7eb      	b.n	801131e <MX_USART3_UART_Init+0x36>
    Error_Handler();
 8011346:	f7ff f867 	bl	8010418 <Error_Handler>
 801134a:	e7e3      	b.n	8011314 <MX_USART3_UART_Init+0x2c>
 801134c:	20005c8c 	.word	0x20005c8c
 8011350:	40004800 	.word	0x40004800

08011354 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8011354:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART1)
 8011356:	6803      	ldr	r3, [r0, #0]
 8011358:	4a30      	ldr	r2, [pc, #192]	; (801141c <HAL_UART_MspInit+0xc8>)
{
 801135a:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801135c:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART1)
 801135e:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011360:	9406      	str	r4, [sp, #24]
 8011362:	9405      	str	r4, [sp, #20]
 8011364:	9407      	str	r4, [sp, #28]
 8011366:	9408      	str	r4, [sp, #32]
 8011368:	9409      	str	r4, [sp, #36]	; 0x24
  if(uartHandle->Instance==USART1)
 801136a:	d02c      	beq.n	80113c6 <HAL_UART_MspInit+0x72>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 801136c:	4a2c      	ldr	r2, [pc, #176]	; (8011420 <HAL_UART_MspInit+0xcc>)
 801136e:	4293      	cmp	r3, r2
 8011370:	d001      	beq.n	8011376 <HAL_UART_MspInit+0x22>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8011372:	b00b      	add	sp, #44	; 0x2c
 8011374:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 8011376:	4b2b      	ldr	r3, [pc, #172]	; (8011424 <HAL_UART_MspInit+0xd0>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011378:	482b      	ldr	r0, [pc, #172]	; (8011428 <HAL_UART_MspInit+0xd4>)
    __HAL_RCC_USART3_CLK_ENABLE();
 801137a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801137c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8011380:	659a      	str	r2, [r3, #88]	; 0x58
 8011382:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011384:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8011388:	9203      	str	r2, [sp, #12]
 801138a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801138c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801138e:	f042 0204 	orr.w	r2, r2, #4
 8011392:	64da      	str	r2, [r3, #76]	; 0x4c
 8011394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011396:	f003 0304 	and.w	r3, r3, #4
 801139a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801139c:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 801139e:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80113a0:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80113a2:	2630      	movs	r6, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80113a4:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80113a6:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80113a8:	9309      	str	r3, [sp, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80113aa:	9f04      	ldr	r7, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80113ac:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80113ae:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80113b0:	f7f0 fdb4 	bl	8001f1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80113b4:	4622      	mov	r2, r4
 80113b6:	2105      	movs	r1, #5
 80113b8:	2027      	movs	r0, #39	; 0x27
 80113ba:	f7f0 fa19 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80113be:	2027      	movs	r0, #39	; 0x27
 80113c0:	f7f0 fa4c 	bl	800185c <HAL_NVIC_EnableIRQ>
}
 80113c4:	e7d5      	b.n	8011372 <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART1_CLK_ENABLE();
 80113c6:	4b17      	ldr	r3, [pc, #92]	; (8011424 <HAL_UART_MspInit+0xd0>)
 80113c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80113ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80113ce:	661a      	str	r2, [r3, #96]	; 0x60
 80113d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80113d2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80113d6:	9201      	str	r2, [sp, #4]
 80113d8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80113da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80113dc:	f042 0201 	orr.w	r2, r2, #1
 80113e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80113e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80113e4:	f003 0301 	and.w	r3, r3, #1
 80113e8:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80113ea:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80113ec:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80113ee:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80113f0:	f44f 66c0 	mov.w	r6, #1536	; 0x600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80113f4:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80113f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80113fa:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80113fc:	9309      	str	r3, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80113fe:	9f02      	ldr	r7, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8011400:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011402:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011404:	f7f0 fd8a 	bl	8001f1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8011408:	4622      	mov	r2, r4
 801140a:	2105      	movs	r1, #5
 801140c:	2025      	movs	r0, #37	; 0x25
 801140e:	f7f0 f9ef 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8011412:	2025      	movs	r0, #37	; 0x25
 8011414:	f7f0 fa22 	bl	800185c <HAL_NVIC_EnableIRQ>
 8011418:	e7ab      	b.n	8011372 <HAL_UART_MspInit+0x1e>
 801141a:	bf00      	nop
 801141c:	40013800 	.word	0x40013800
 8011420:	40004800 	.word	0x40004800
 8011424:	40021000 	.word	0x40021000
 8011428:	48000800 	.word	0x48000800

0801142c <VL53L1_WriteMulti>:
}

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    if (count > sizeof(_I2CBuffer) - 1) {
 801142c:	2bff      	cmp	r3, #255	; 0xff
 801142e:	d81f      	bhi.n	8011470 <VL53L1_WriteMulti+0x44>
VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8011430:	b5f0      	push	{r4, r5, r6, r7, lr}
        return VL53L1_ERROR_INVALID_PARAMS;
    }
    _I2CBuffer[0] = index>>8;
 8011432:	4f11      	ldr	r7, [pc, #68]	; (8011478 <VL53L1_WriteMulti+0x4c>)
 8011434:	460e      	mov	r6, r1
 8011436:	461c      	mov	r4, r3
VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8011438:	b083      	sub	sp, #12
 801143a:	4605      	mov	r5, r0
    _I2CBuffer[0] = index>>8;
 801143c:	0a33      	lsrs	r3, r6, #8
 801143e:	4611      	mov	r1, r2
    _I2CBuffer[1] = index&0xFF;
    memcpy(&_I2CBuffer[2], pdata, count);
 8011440:	1cb8      	adds	r0, r7, #2
 8011442:	4622      	mov	r2, r4
    _I2CBuffer[0] = index>>8;
 8011444:	703b      	strb	r3, [r7, #0]
    _I2CBuffer[1] = index&0xFF;
 8011446:	707e      	strb	r6, [r7, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 8011448:	f002 f8a8 	bl	801359c <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 801144c:	1ca3      	adds	r3, r4, #2
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 801144e:	340c      	adds	r4, #12
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011450:	f895 1398 	ldrb.w	r1, [r5, #920]	; 0x398
 8011454:	f8d5 03a0 	ldr.w	r0, [r5, #928]	; 0x3a0
 8011458:	9400      	str	r4, [sp, #0]
 801145a:	463a      	mov	r2, r7
 801145c:	b29b      	uxth	r3, r3
 801145e:	f7f1 f80d 	bl	800247c <HAL_I2C_Master_Transmit>
    if (status_int != 0) {
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8011462:	2800      	cmp	r0, #0
 8011464:	bf0c      	ite	eq
 8011466:	2000      	moveq	r0, #0
 8011468:	f06f 000c 	mvnne.w	r0, #12
    }
    VL53L1_PutI2cBus();
    return Status;
}
 801146c:	b003      	add	sp, #12
 801146e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return VL53L1_ERROR_INVALID_PARAMS;
 8011470:	f06f 0003 	mvn.w	r0, #3
 8011474:	4770      	bx	lr
 8011476:	bf00      	nop
 8011478:	20005d94 	.word	0x20005d94

0801147c <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 801147c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8011480:	4d16      	ldr	r5, [pc, #88]	; (80114dc <VL53L1_ReadMulti+0x60>)
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011482:	f890 c398 	ldrb.w	ip, [r0, #920]	; 0x398
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8011486:	460e      	mov	r6, r1
 8011488:	b082      	sub	sp, #8
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 801148a:	f04f 0e0c 	mov.w	lr, #12
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 801148e:	461f      	mov	r7, r3
    _I2CBuffer[0] = index>>8;
 8011490:	0a33      	lsrs	r3, r6, #8
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8011492:	4604      	mov	r4, r0
 8011494:	4690      	mov	r8, r2
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011496:	f8d0 03a0 	ldr.w	r0, [r0, #928]	; 0x3a0
    _I2CBuffer[0] = index>>8;
 801149a:	702b      	strb	r3, [r5, #0]
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 801149c:	4661      	mov	r1, ip
 801149e:	f8cd e000 	str.w	lr, [sp]
 80114a2:	462a      	mov	r2, r5
 80114a4:	2302      	movs	r3, #2
    _I2CBuffer[1] = index&0xFF;
 80114a6:	706e      	strb	r6, [r5, #1]
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80114a8:	f7f0 ffe8 	bl	800247c <HAL_I2C_Master_Transmit>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
    if (status_int != 0) {
 80114ac:	b980      	cbnz	r0, 80114d0 <VL53L1_ReadMulti+0x54>
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80114ae:	f894 1398 	ldrb.w	r1, [r4, #920]	; 0x398
 80114b2:	f8d4 03a0 	ldr.w	r0, [r4, #928]	; 0x3a0
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80114b6:	f107 030a 	add.w	r3, r7, #10
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80114ba:	9300      	str	r3, [sp, #0]
 80114bc:	4642      	mov	r2, r8
 80114be:	f041 0101 	orr.w	r1, r1, #1
 80114c2:	b2bb      	uxth	r3, r7
 80114c4:	f7f1 f8a6 	bl	8002614 <HAL_I2C_Master_Receive>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    status_int = _I2CRead(Dev, pdata, count);
    if (status_int != 0) {
 80114c8:	b910      	cbnz	r0, 80114d0 <VL53L1_ReadMulti+0x54>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
    }
done:
    VL53L1_PutI2cBus();
    return Status;
}
 80114ca:	b002      	add	sp, #8
 80114cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80114d0:	f06f 000c 	mvn.w	r0, #12
}
 80114d4:	b002      	add	sp, #8
 80114d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114da:	bf00      	nop
 80114dc:	20005d94 	.word	0x20005d94

080114e0 <VL53L1_RdWord>:
done:
    VL53L1_PutI2cBus();
    return Status;
}

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 80114e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80114e4:	f890 3398 	ldrb.w	r3, [r0, #920]	; 0x398
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80114e8:	4c16      	ldr	r4, [pc, #88]	; (8011544 <VL53L1_RdWord+0x64>)
VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 80114ea:	460e      	mov	r6, r1
 80114ec:	b082      	sub	sp, #8
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80114ee:	f04f 080c 	mov.w	r8, #12
 80114f2:	4619      	mov	r1, r3
    _I2CBuffer[0] = index>>8;
 80114f4:	0a33      	lsrs	r3, r6, #8
VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 80114f6:	4605      	mov	r5, r0
 80114f8:	4617      	mov	r7, r2
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80114fa:	f8d0 03a0 	ldr.w	r0, [r0, #928]	; 0x3a0
    _I2CBuffer[0] = index>>8;
 80114fe:	7023      	strb	r3, [r4, #0]
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011500:	f8cd 8000 	str.w	r8, [sp]
 8011504:	4622      	mov	r2, r4
 8011506:	2302      	movs	r3, #2
	_I2CBuffer[1] = index&0xFF;
 8011508:	7066      	strb	r6, [r4, #1]
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 801150a:	f7f0 ffb7 	bl	800247c <HAL_I2C_Master_Transmit>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);

    if( status_int ){
 801150e:	b9a0      	cbnz	r0, 801153a <VL53L1_RdWord+0x5a>
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8011510:	f895 1398 	ldrb.w	r1, [r5, #920]	; 0x398
 8011514:	f8d5 03a0 	ldr.w	r0, [r5, #928]	; 0x3a0
 8011518:	f8cd 8000 	str.w	r8, [sp]
 801151c:	f041 0101 	orr.w	r1, r1, #1
 8011520:	2302      	movs	r3, #2
 8011522:	4622      	mov	r2, r4
 8011524:	f7f1 f876 	bl	8002614 <HAL_I2C_Master_Receive>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
    if (status_int != 0) {
 8011528:	b938      	cbnz	r0, 801153a <VL53L1_RdWord+0x5a>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
        goto done;
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 801152a:	7822      	ldrb	r2, [r4, #0]
 801152c:	7863      	ldrb	r3, [r4, #1]
 801152e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011532:	803b      	strh	r3, [r7, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
}
 8011534:	b002      	add	sp, #8
 8011536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 801153a:	f06f 000c 	mvn.w	r0, #12
}
 801153e:	b002      	add	sp, #8
 8011540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011544:	20005d94 	.word	0x20005d94

08011548 <VL53L1_WaitUs>:
	(void)pdev;
	HAL_Delay(wait_ms);
    return VL53L1_ERROR_NONE;
}

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 8011548:	b508      	push	{r3, lr}
	(void)pdev;
	HAL_Delay(wait_us/1000);
 801154a:	4805      	ldr	r0, [pc, #20]	; (8011560 <VL53L1_WaitUs+0x18>)
 801154c:	fb80 3001 	smull	r3, r0, r0, r1
 8011550:	17c9      	asrs	r1, r1, #31
 8011552:	ebc1 10a0 	rsb	r0, r1, r0, asr #6
 8011556:	f7ef fcfd 	bl	8000f54 <HAL_Delay>
    return VL53L1_ERROR_NONE;
}
 801155a:	2000      	movs	r0, #0
 801155c:	bd08      	pop	{r3, pc}
 801155e:	bf00      	nop
 8011560:	10624dd3 	.word	0x10624dd3

08011564 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8011564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011568:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 801156c:	4604      	mov	r4, r0

	VL53L1_Error status         = VL53L1_ERROR_NONE;
	uint32_t     start_time_ms = 0;
	uint32_t     current_time_ms = 0;
	uint32_t     polling_time_ms = 0;
	uint8_t      byte_value      = 0;
 801156e:	2000      	movs	r0, #0
{
 8011570:	460d      	mov	r5, r1
 8011572:	4616      	mov	r6, r2
	uint8_t      byte_value      = 0;
 8011574:	f88d 000f 	strb.w	r0, [sp, #15]
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 8011578:	f240 12ff 	movw	r2, #511	; 0x1ff
 801157c:	4932      	ldr	r1, [pc, #200]	; (8011648 <VL53L1_WaitValueMaskEx+0xe4>)
{
 801157e:	f89d 9238 	ldrb.w	r9, [sp, #568]	; 0x238
	VL53L1_COPYSTRING(register_name, "");
 8011582:	a804      	add	r0, sp, #16
{
 8011584:	4698      	mov	r8, r3
	VL53L1_COPYSTRING(register_name, "");
 8011586:	f002 f81c 	bl	80135c2 <strncpy>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 801158a:	2d00      	cmp	r5, #0
 801158c:	d058      	beq.n	8011640 <VL53L1_WaitValueMaskEx+0xdc>
 801158e:	4d2f      	ldr	r5, [pc, #188]	; (801164c <VL53L1_WaitValueMaskEx+0xe8>)
 8011590:	9b8f      	ldr	r3, [sp, #572]	; 0x23c
 8011592:	0a37      	lsrs	r7, r6, #8
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011594:	f04f 0b0c 	mov.w	fp, #12
 8011598:	b2f6      	uxtb	r6, r6
 801159a:	46aa      	mov	sl, r5
 801159c:	bb2b      	cbnz	r3, 80115ea <VL53L1_WaitValueMaskEx+0x86>
 801159e:	f894 1398 	ldrb.w	r1, [r4, #920]	; 0x398
 80115a2:	f8d4 03a0 	ldr.w	r0, [r4, #928]	; 0x3a0
 80115a6:	f8cd b000 	str.w	fp, [sp]
 80115aa:	2302      	movs	r3, #2
 80115ac:	4652      	mov	r2, sl
	_I2CBuffer[0] = index>>8;
 80115ae:	702f      	strb	r7, [r5, #0]
	_I2CBuffer[1] = index&0xFF;
 80115b0:	706e      	strb	r6, [r5, #1]
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80115b2:	f7f0 ff63 	bl	800247c <HAL_I2C_Master_Transmit>
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80115b6:	210b      	movs	r1, #11
 80115b8:	2301      	movs	r3, #1
 80115ba:	f10d 020f 	add.w	r2, sp, #15
    if( status_int ){
 80115be:	bbc8      	cbnz	r0, 8011634 <VL53L1_WaitValueMaskEx+0xd0>
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80115c0:	f894 e398 	ldrb.w	lr, [r4, #920]	; 0x398
 80115c4:	f8d4 03a0 	ldr.w	r0, [r4, #928]	; 0x3a0
 80115c8:	9100      	str	r1, [sp, #0]
 80115ca:	ea4e 0103 	orr.w	r1, lr, r3
 80115ce:	f7f1 f821 	bl	8002614 <HAL_I2C_Master_Receive>
    if (status_int != 0) {
 80115d2:	bb78      	cbnz	r0, 8011634 <VL53L1_WaitValueMaskEx+0xd0>
			status = VL53L1_RdByte(
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 80115d4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80115d8:	ea09 0303 	and.w	r3, r9, r3
 80115dc:	4598      	cmp	r8, r3
 80115de:	d1de      	bne.n	801159e <VL53L1_WaitValueMaskEx+0x3a>
 80115e0:	2000      	movs	r0, #0

	if (found == 0 && status == VL53L1_ERROR_NONE)
		status = VL53L1_ERROR_TIME_OUT;

	return status;
}
 80115e2:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 80115e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80115ea:	f894 1398 	ldrb.w	r1, [r4, #920]	; 0x398
 80115ee:	f8d4 03a0 	ldr.w	r0, [r4, #928]	; 0x3a0
 80115f2:	f8cd b000 	str.w	fp, [sp]
 80115f6:	2302      	movs	r3, #2
 80115f8:	4652      	mov	r2, sl
	_I2CBuffer[0] = index>>8;
 80115fa:	702f      	strb	r7, [r5, #0]
	_I2CBuffer[1] = index&0xFF;
 80115fc:	706e      	strb	r6, [r5, #1]
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80115fe:	f7f0 ff3d 	bl	800247c <HAL_I2C_Master_Transmit>
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8011602:	210b      	movs	r1, #11
 8011604:	2301      	movs	r3, #1
 8011606:	f10d 020f 	add.w	r2, sp, #15
    if( status_int ){
 801160a:	b998      	cbnz	r0, 8011634 <VL53L1_WaitValueMaskEx+0xd0>
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 801160c:	f894 e398 	ldrb.w	lr, [r4, #920]	; 0x398
 8011610:	f8d4 03a0 	ldr.w	r0, [r4, #928]	; 0x3a0
 8011614:	9100      	str	r1, [sp, #0]
 8011616:	f04e 0101 	orr.w	r1, lr, #1
 801161a:	f7f0 fffb 	bl	8002614 <HAL_I2C_Master_Receive>
    if (status_int != 0) {
 801161e:	b948      	cbnz	r0, 8011634 <VL53L1_WaitValueMaskEx+0xd0>
		if ((byte_value & mask) == value)
 8011620:	f89d 300f 	ldrb.w	r3, [sp, #15]
	HAL_Delay(wait_ms);
 8011624:	988f      	ldr	r0, [sp, #572]	; 0x23c
		if ((byte_value & mask) == value)
 8011626:	ea09 0303 	and.w	r3, r9, r3
 801162a:	4598      	cmp	r8, r3
 801162c:	d0d8      	beq.n	80115e0 <VL53L1_WaitValueMaskEx+0x7c>
	HAL_Delay(wait_ms);
 801162e:	f7ef fc91 	bl	8000f54 <HAL_Delay>
 8011632:	e7da      	b.n	80115ea <VL53L1_WaitValueMaskEx+0x86>
 8011634:	f06f 000c 	mvn.w	r0, #12
}
 8011638:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 801163c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		status = VL53L1_ERROR_TIME_OUT;
 8011640:	f06f 0006 	mvn.w	r0, #6
	return status;
 8011644:	e7f8      	b.n	8011638 <VL53L1_WaitValueMaskEx+0xd4>
 8011646:	bf00      	nop
 8011648:	08013be8 	.word	0x08013be8
 801164c:	20005d94 	.word	0x20005d94

08011650 <setWavetableAmplitude>:
uint8_t IIR_filter_active = 1;

// UBaseType_t  uxSavedInterruptStatus;

void setWavetableAmplitude(uint8_t* intTracker) {
  ampltiude_multiplier = (*intTracker) / ((float)ROTATION_STEPS - 1);
 8011650:	7803      	ldrb	r3, [r0, #0]
 8011652:	ed9f 7a06 	vldr	s14, [pc, #24]	; 801166c <setWavetableAmplitude+0x1c>
 8011656:	ee07 3a90 	vmov	s15, r3
 801165a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801165e:	4b04      	ldr	r3, [pc, #16]	; (8011670 <setWavetableAmplitude+0x20>)
 8011660:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011664:	edc3 7a00 	vstr	s15, [r3]
 8011668:	4770      	bx	lr
 801166a:	bf00      	nop
 801166c:	3e4ccccd 	.word	0x3e4ccccd
 8011670:	200052cc 	.word	0x200052cc

08011674 <activateFilter>:
  // ampltiude_multiplier = 1;
}

void activateFilter(uint8_t active) {
  if (active) {
 8011674:	b910      	cbnz	r0, 801167c <activateFilter+0x8>
 8011676:	4b11      	ldr	r3, [pc, #68]	; (80116bc <activateFilter+0x48>)
 8011678:	7018      	strb	r0, [r3, #0]
 801167a:	4770      	bx	lr
void calcFilterFreq(int16_t* measurement) {
  //	freq_fil = 123.471*expf(0.00288811*((float)*measurement));
  //	if(freq_fil > 16000) freq_fil = 16000;
  freq_fil = 0.2;

  freq_fil_inc = (freq_fil / ((float)DAC_FREQ)) * max_filter_index;
 801167c:	4b10      	ldr	r3, [pc, #64]	; (80116c0 <activateFilter+0x4c>)
  switchOctave(octave);
}

void switchFilter(const uint16_t* desired_table, int16_t size) {
  max_filter_index = size;
  filter = desired_table;
 801167e:	4911      	ldr	r1, [pc, #68]	; (80116c4 <activateFilter+0x50>)
  freq_fil_inc = (freq_fil / ((float)DAC_FREQ)) * max_filter_index;
 8011680:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011684:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80116c8 <activateFilter+0x54>
 8011688:	4810      	ldr	r0, [pc, #64]	; (80116cc <activateFilter+0x58>)
 801168a:	ee07 2a90 	vmov	s15, r2
  freq_fil = 0.2;
 801168e:	4a10      	ldr	r2, [pc, #64]	; (80116d0 <activateFilter+0x5c>)
void activateFilter(uint8_t active) {
 8011690:	b410      	push	{r4}
  freq_fil_inc = (freq_fil / ((float)DAC_FREQ)) * max_filter_index;
 8011692:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  freq_fil = 0.2;
 8011696:	4c0f      	ldr	r4, [pc, #60]	; (80116d4 <activateFilter+0x60>)
 8011698:	6014      	str	r4, [r2, #0]
  filter = desired_table;
 801169a:	4c0f      	ldr	r4, [pc, #60]	; (80116d8 <activateFilter+0x64>)
 801169c:	600c      	str	r4, [r1, #0]
  freq_fil_inc = (freq_fil / ((float)DAC_FREQ)) * max_filter_index;
 801169e:	ee67 7a87 	vmul.f32	s15, s15, s14
  max_filter_index = size;
 80116a2:	2482      	movs	r4, #130	; 0x82
 80116a4:	801c      	strh	r4, [r3, #0]
    setFilterIndex = 0;
 80116a6:	4a0d      	ldr	r2, [pc, #52]	; (80116dc <activateFilter+0x68>)
 80116a8:	4b04      	ldr	r3, [pc, #16]	; (80116bc <activateFilter+0x48>)
  freq_fil_inc = (freq_fil / ((float)DAC_FREQ)) * max_filter_index;
 80116aa:	edc0 7a00 	vstr	s15, [r0]
    setFilterIndex = 0;
 80116ae:	2100      	movs	r1, #0
    filter_active = 1;
 80116b0:	2001      	movs	r0, #1
    setFilterIndex = 0;
 80116b2:	7011      	strb	r1, [r2, #0]
 80116b4:	7018      	strb	r0, [r3, #0]
}
 80116b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80116ba:	4770      	bx	lr
 80116bc:	200052d2 	.word	0x200052d2
 80116c0:	2000004c 	.word	0x2000004c
 80116c4:	20007ac8 	.word	0x20007ac8
 80116c8:	36a7c5ac 	.word	0x36a7c5ac
 80116cc:	200076c4 	.word	0x200076c4
 80116d0:	20000044 	.word	0x20000044
 80116d4:	3e4ccccd 	.word	0x3e4ccccd
 80116d8:	08015f7c 	.word	0x08015f7c
 80116dc:	20005319 	.word	0x20005319

080116e0 <isLidarModeActive>:
  if (lidarModeActive) return 1;
 80116e0:	4b02      	ldr	r3, [pc, #8]	; (80116ec <isLidarModeActive+0xc>)
 80116e2:	7818      	ldrb	r0, [r3, #0]
}
 80116e4:	3000      	adds	r0, #0
 80116e6:	bf18      	it	ne
 80116e8:	2001      	movne	r0, #1
 80116ea:	4770      	bx	lr
 80116ec:	20005318 	.word	0x20005318

080116f0 <isCapModeActive>:
  if (capModeActive) return 1;
 80116f0:	4b02      	ldr	r3, [pc, #8]	; (80116fc <isCapModeActive+0xc>)
 80116f2:	7818      	ldrb	r0, [r3, #0]
}
 80116f4:	3000      	adds	r0, #0
 80116f6:	bf18      	it	ne
 80116f8:	2001      	movne	r0, #1
 80116fa:	4770      	bx	lr
 80116fc:	200052d1 	.word	0x200052d1

08011700 <incrementTable>:
  setFilterIndex++;
 8011700:	4a33      	ldr	r2, [pc, #204]	; (80117d0 <incrementTable+0xd0>)
 8011702:	7813      	ldrb	r3, [r2, #0]
 8011704:	3301      	adds	r3, #1
 8011706:	b2db      	uxtb	r3, r3
  if (setFilterIndex >= FILTER_CNT) setFilterIndex = 0;
 8011708:	2b0a      	cmp	r3, #10
  setFilterIndex++;
 801170a:	7013      	strb	r3, [r2, #0]
  if (setFilterIndex >= FILTER_CNT) setFilterIndex = 0;
 801170c:	d909      	bls.n	8011722 <incrementTable+0x22>
 801170e:	2300      	movs	r3, #0
 8011710:	7013      	strb	r3, [r2, #0]
  filter = desired_table;
 8011712:	4a30      	ldr	r2, [pc, #192]	; (80117d4 <incrementTable+0xd4>)
  max_filter_index = size;
 8011714:	4b30      	ldr	r3, [pc, #192]	; (80117d8 <incrementTable+0xd8>)
  filter = desired_table;
 8011716:	4931      	ldr	r1, [pc, #196]	; (80117dc <incrementTable+0xdc>)
 8011718:	6011      	str	r1, [r2, #0]
  max_filter_index = size;
 801171a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801171e:	801a      	strh	r2, [r3, #0]
 8011720:	4770      	bx	lr
  switch (filter) {
 8011722:	3b01      	subs	r3, #1
 8011724:	2b09      	cmp	r3, #9
 8011726:	d8f4      	bhi.n	8011712 <incrementTable+0x12>
 8011728:	e8df f003 	tbb	[pc, r3]
 801172c:	2d343b42 	.word	0x2d343b42
 8011730:	0d151d25 	.word	0x0d151d25
 8011734:	4905      	.short	0x4905
  filter = desired_table;
 8011736:	4a27      	ldr	r2, [pc, #156]	; (80117d4 <incrementTable+0xd4>)
  max_filter_index = size;
 8011738:	4b27      	ldr	r3, [pc, #156]	; (80117d8 <incrementTable+0xd8>)
  filter = desired_table;
 801173a:	4929      	ldr	r1, [pc, #164]	; (80117e0 <incrementTable+0xe0>)
 801173c:	6011      	str	r1, [r2, #0]
  max_filter_index = size;
 801173e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011742:	801a      	strh	r2, [r3, #0]
 8011744:	4770      	bx	lr
  filter = desired_table;
 8011746:	4a23      	ldr	r2, [pc, #140]	; (80117d4 <incrementTable+0xd4>)
  max_filter_index = size;
 8011748:	4b23      	ldr	r3, [pc, #140]	; (80117d8 <incrementTable+0xd8>)
  filter = desired_table;
 801174a:	4926      	ldr	r1, [pc, #152]	; (80117e4 <incrementTable+0xe4>)
 801174c:	6011      	str	r1, [r2, #0]
  max_filter_index = size;
 801174e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011752:	801a      	strh	r2, [r3, #0]
 8011754:	4770      	bx	lr
  filter = desired_table;
 8011756:	4a1f      	ldr	r2, [pc, #124]	; (80117d4 <incrementTable+0xd4>)
  max_filter_index = size;
 8011758:	4b1f      	ldr	r3, [pc, #124]	; (80117d8 <incrementTable+0xd8>)
  filter = desired_table;
 801175a:	4923      	ldr	r1, [pc, #140]	; (80117e8 <incrementTable+0xe8>)
 801175c:	6011      	str	r1, [r2, #0]
  max_filter_index = size;
 801175e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011762:	801a      	strh	r2, [r3, #0]
 8011764:	4770      	bx	lr
  filter = desired_table;
 8011766:	4a1b      	ldr	r2, [pc, #108]	; (80117d4 <incrementTable+0xd4>)
  max_filter_index = size;
 8011768:	4b1b      	ldr	r3, [pc, #108]	; (80117d8 <incrementTable+0xd8>)
  filter = desired_table;
 801176a:	4920      	ldr	r1, [pc, #128]	; (80117ec <incrementTable+0xec>)
 801176c:	6011      	str	r1, [r2, #0]
  max_filter_index = size;
 801176e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011772:	801a      	strh	r2, [r3, #0]
 8011774:	4770      	bx	lr
  filter = desired_table;
 8011776:	4a17      	ldr	r2, [pc, #92]	; (80117d4 <incrementTable+0xd4>)
  max_filter_index = size;
 8011778:	4b17      	ldr	r3, [pc, #92]	; (80117d8 <incrementTable+0xd8>)
  filter = desired_table;
 801177a:	491d      	ldr	r1, [pc, #116]	; (80117f0 <incrementTable+0xf0>)
 801177c:	6011      	str	r1, [r2, #0]
  max_filter_index = size;
 801177e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011782:	801a      	strh	r2, [r3, #0]
 8011784:	4770      	bx	lr
  filter = desired_table;
 8011786:	4a13      	ldr	r2, [pc, #76]	; (80117d4 <incrementTable+0xd4>)
  max_filter_index = size;
 8011788:	4b13      	ldr	r3, [pc, #76]	; (80117d8 <incrementTable+0xd8>)
  filter = desired_table;
 801178a:	491a      	ldr	r1, [pc, #104]	; (80117f4 <incrementTable+0xf4>)
 801178c:	6011      	str	r1, [r2, #0]
  max_filter_index = size;
 801178e:	2283      	movs	r2, #131	; 0x83
 8011790:	801a      	strh	r2, [r3, #0]
 8011792:	4770      	bx	lr
  filter = desired_table;
 8011794:	4a0f      	ldr	r2, [pc, #60]	; (80117d4 <incrementTable+0xd4>)
  max_filter_index = size;
 8011796:	4b10      	ldr	r3, [pc, #64]	; (80117d8 <incrementTable+0xd8>)
  filter = desired_table;
 8011798:	4917      	ldr	r1, [pc, #92]	; (80117f8 <incrementTable+0xf8>)
 801179a:	6011      	str	r1, [r2, #0]
  max_filter_index = size;
 801179c:	2283      	movs	r2, #131	; 0x83
 801179e:	801a      	strh	r2, [r3, #0]
 80117a0:	4770      	bx	lr
  filter = desired_table;
 80117a2:	4a0c      	ldr	r2, [pc, #48]	; (80117d4 <incrementTable+0xd4>)
  max_filter_index = size;
 80117a4:	4b0c      	ldr	r3, [pc, #48]	; (80117d8 <incrementTable+0xd8>)
  filter = desired_table;
 80117a6:	4915      	ldr	r1, [pc, #84]	; (80117fc <incrementTable+0xfc>)
 80117a8:	6011      	str	r1, [r2, #0]
  max_filter_index = size;
 80117aa:	2283      	movs	r2, #131	; 0x83
 80117ac:	801a      	strh	r2, [r3, #0]
 80117ae:	4770      	bx	lr
  filter = desired_table;
 80117b0:	4a08      	ldr	r2, [pc, #32]	; (80117d4 <incrementTable+0xd4>)
  max_filter_index = size;
 80117b2:	4b09      	ldr	r3, [pc, #36]	; (80117d8 <incrementTable+0xd8>)
  filter = desired_table;
 80117b4:	4912      	ldr	r1, [pc, #72]	; (8011800 <incrementTable+0x100>)
 80117b6:	6011      	str	r1, [r2, #0]
  max_filter_index = size;
 80117b8:	2282      	movs	r2, #130	; 0x82
 80117ba:	801a      	strh	r2, [r3, #0]
 80117bc:	4770      	bx	lr
  filter = desired_table;
 80117be:	4a05      	ldr	r2, [pc, #20]	; (80117d4 <incrementTable+0xd4>)
  max_filter_index = size;
 80117c0:	4b05      	ldr	r3, [pc, #20]	; (80117d8 <incrementTable+0xd8>)
  filter = desired_table;
 80117c2:	4910      	ldr	r1, [pc, #64]	; (8011804 <incrementTable+0x104>)
 80117c4:	6011      	str	r1, [r2, #0]
  max_filter_index = size;
 80117c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80117ca:	801a      	strh	r2, [r3, #0]
 80117cc:	4770      	bx	lr
 80117ce:	bf00      	nop
 80117d0:	20005319 	.word	0x20005319
 80117d4:	20007ac8 	.word	0x20007ac8
 80117d8:	2000004c 	.word	0x2000004c
 80117dc:	08014f7c 	.word	0x08014f7c
 80117e0:	08014b7c 	.word	0x08014b7c
 80117e4:	0801497c 	.word	0x0801497c
 80117e8:	0801477c 	.word	0x0801477c
 80117ec:	08016f98 	.word	0x08016f98
 80117f0:	08016d98 	.word	0x08016d98
 80117f4:	08016290 	.word	0x08016290
 80117f8:	08016188 	.word	0x08016188
 80117fc:	08016080 	.word	0x08016080
 8011800:	08015f7c 	.word	0x08015f7c
 8011804:	08014d7c 	.word	0x08014d7c

08011808 <turnOnLidarSounds>:
void turnOnLidarSounds(void) {
 8011808:	b508      	push	{r3, lr}
  if (lidarModeActive == 0) {
 801180a:	4b07      	ldr	r3, [pc, #28]	; (8011828 <turnOnLidarSounds+0x20>)
 801180c:	781a      	ldrb	r2, [r3, #0]
 801180e:	b93a      	cbnz	r2, 8011820 <turnOnLidarSounds+0x18>
    lidarModeActive = 1;
 8011810:	2201      	movs	r2, #1
 8011812:	701a      	strb	r2, [r3, #0]
    lidarStart();
 8011814:	f7fe fcb8 	bl	8010188 <lidarStart>
    osSemaphoreRelease(lidarSampleReadySemaphoreHandle);
 8011818:	4b04      	ldr	r3, [pc, #16]	; (801182c <turnOnLidarSounds+0x24>)
 801181a:	6818      	ldr	r0, [r3, #0]
 801181c:	f7fa f994 	bl	800bb48 <osSemaphoreRelease>
  capModeActive = 0;
 8011820:	4b03      	ldr	r3, [pc, #12]	; (8011830 <turnOnLidarSounds+0x28>)
 8011822:	2200      	movs	r2, #0
 8011824:	701a      	strb	r2, [r3, #0]
 8011826:	bd08      	pop	{r3, pc}
 8011828:	20005318 	.word	0x20005318
 801182c:	200054e0 	.word	0x200054e0
 8011830:	200052d1 	.word	0x200052d1

08011834 <turnOnCapSounds>:
void turnOnCapSounds(void) {
 8011834:	b510      	push	{r4, lr}
  if (lidarModeActive) lidarStop();
 8011836:	4c0a      	ldr	r4, [pc, #40]	; (8011860 <turnOnCapSounds+0x2c>)
 8011838:	7823      	ldrb	r3, [r4, #0]
 801183a:	b973      	cbnz	r3, 801185a <turnOnCapSounds+0x26>
  if (capModeActive != 1) {
 801183c:	4b09      	ldr	r3, [pc, #36]	; (8011864 <turnOnCapSounds+0x30>)
 801183e:	781a      	ldrb	r2, [r3, #0]
 8011840:	2a01      	cmp	r2, #1
 8011842:	d009      	beq.n	8011858 <turnOnCapSounds+0x24>
    lidarModeActive = 0;
 8011844:	2200      	movs	r2, #0
 8011846:	7022      	strb	r2, [r4, #0]
    osSemaphoreRelease(capSampleSemaphoreHandle);
 8011848:	4907      	ldr	r1, [pc, #28]	; (8011868 <turnOnCapSounds+0x34>)
    capModeActive = 1;
 801184a:	2201      	movs	r2, #1
 801184c:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(capSampleSemaphoreHandle);
 801184e:	6808      	ldr	r0, [r1, #0]
}
 8011850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    osSemaphoreRelease(capSampleSemaphoreHandle);
 8011854:	f7fa b978 	b.w	800bb48 <osSemaphoreRelease>
 8011858:	bd10      	pop	{r4, pc}
  if (lidarModeActive) lidarStop();
 801185a:	f7fe fc89 	bl	8010170 <lidarStop>
 801185e:	e7ed      	b.n	801183c <turnOnCapSounds+0x8>
 8011860:	20005318 	.word	0x20005318
 8011864:	200052d1 	.word	0x200052d1
 8011868:	20005420 	.word	0x20005420

0801186c <turnOffSounds>:
void turnOffSounds(void) {
 801186c:	b510      	push	{r4, lr}
  if (lidarModeActive) lidarStop();
 801186e:	4c05      	ldr	r4, [pc, #20]	; (8011884 <turnOffSounds+0x18>)
 8011870:	7823      	ldrb	r3, [r4, #0]
 8011872:	b10b      	cbz	r3, 8011878 <turnOffSounds+0xc>
 8011874:	f7fe fc7c 	bl	8010170 <lidarStop>
  capModeActive = 0;
 8011878:	4a03      	ldr	r2, [pc, #12]	; (8011888 <turnOffSounds+0x1c>)
  lidarModeActive = 0;
 801187a:	2300      	movs	r3, #0
  capModeActive = 0;
 801187c:	7013      	strb	r3, [r2, #0]
  lidarModeActive = 0;
 801187e:	7023      	strb	r3, [r4, #0]
 8011880:	bd10      	pop	{r4, pc}
 8011882:	bf00      	nop
 8011884:	20005318 	.word	0x20005318
 8011888:	200052d1 	.word	0x200052d1
 801188c:	00000000 	.word	0x00000000

08011890 <calcLidarFreq>:
void calcLidarFreq(int16_t* measurement) {
 8011890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  prevlidarSampleTime = lidarSampleTime;
 8011892:	4e43      	ldr	r6, [pc, #268]	; (80119a0 <calcLidarFreq+0x110>)
 8011894:	4c43      	ldr	r4, [pc, #268]	; (80119a4 <calcLidarFreq+0x114>)
 8011896:	6833      	ldr	r3, [r6, #0]
  freq_lidar = freq_lidar_new;
 8011898:	4d43      	ldr	r5, [pc, #268]	; (80119a8 <calcLidarFreq+0x118>)
void calcLidarFreq(int16_t* measurement) {
 801189a:	4607      	mov	r7, r0
 801189c:	ed2d 8b02 	vpush	{d8}
  prevlidarSampleTime = lidarSampleTime;
 80118a0:	6023      	str	r3, [r4, #0]
  lidarSampleTime = HAL_GetTick();
 80118a2:	f7ef fb51 	bl	8000f48 <HAL_GetTick>
  freq_lidar_new = 123.471 * expf(0.00288811 * ((float)*measurement));
 80118a6:	f9b7 2000 	ldrsh.w	r2, [r7]
  time_delta = lidarSampleTime - prevlidarSampleTime;
 80118aa:	6824      	ldr	r4, [r4, #0]
 80118ac:	4b3f      	ldr	r3, [pc, #252]	; (80119ac <calcLidarFreq+0x11c>)
  freq_lidar = freq_lidar_new;
 80118ae:	ed95 8a00 	vldr	s16, [r5]
 80118b2:	4f3f      	ldr	r7, [pc, #252]	; (80119b0 <calcLidarFreq+0x120>)
  lidarSampleTime = HAL_GetTick();
 80118b4:	6030      	str	r0, [r6, #0]
  freq_lidar_new = 123.471 * expf(0.00288811 * ((float)*measurement));
 80118b6:	ee07 2a90 	vmov	s15, r2
 80118ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  time_delta = lidarSampleTime - prevlidarSampleTime;
 80118be:	1b04      	subs	r4, r0, r4
 80118c0:	601c      	str	r4, [r3, #0]
  freq_lidar_new = 123.471 * expf(0.00288811 * ((float)*measurement));
 80118c2:	ee17 0a90 	vmov	r0, s15
  freq_lidar = freq_lidar_new;
 80118c6:	ed87 8a00 	vstr	s16, [r7]
  freq_lidar_new = 123.471 * expf(0.00288811 * ((float)*measurement));
 80118ca:	f7ee fdfd 	bl	80004c8 <__aeabi_f2d>
 80118ce:	a32e      	add	r3, pc, #184	; (adr r3, 8011988 <calcLidarFreq+0xf8>)
 80118d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118d4:	f7ee fe4c 	bl	8000570 <__aeabi_dmul>
 80118d8:	f7ef f942 	bl	8000b60 <__aeabi_d2f>
 80118dc:	ee00 0a10 	vmov	s0, r0
 80118e0:	f001 ff24 	bl	801372c <expf>
 80118e4:	ee10 0a10 	vmov	r0, s0
 80118e8:	f7ee fdee 	bl	80004c8 <__aeabi_f2d>
 80118ec:	a328      	add	r3, pc, #160	; (adr r3, 8011990 <calcLidarFreq+0x100>)
 80118ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118f2:	f7ee fe3d 	bl	8000570 <__aeabi_dmul>
 80118f6:	f7ef f933 	bl	8000b60 <__aeabi_d2f>
  if (freq_lidar > 16000) freq_lidar = 16000;
 80118fa:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80119b4 <calcLidarFreq+0x124>
  freq_lidar_new = 123.471 * expf(0.00288811 * ((float)*measurement));
 80118fe:	6028      	str	r0, [r5, #0]
  if (freq_lidar > 16000) freq_lidar = 16000;
 8011900:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  freq_lidar_new = 123.471 * expf(0.00288811 * ((float)*measurement));
 8011908:	ee07 0a10 	vmov	s14, r0
  if (freq_lidar > 16000) freq_lidar = 16000;
 801190c:	dc31      	bgt.n	8011972 <calcLidarFreq+0xe2>
 801190e:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80119b8 <calcLidarFreq+0x128>
 8011912:	ee68 8a27 	vmul.f32	s17, s16, s15
  if (freq_lidar_prev == freq_lidar)
 8011916:	4b29      	ldr	r3, [pc, #164]	; (80119bc <calcLidarFreq+0x12c>)
 8011918:	edd3 7a00 	vldr	s15, [r3]
 801191c:	eef4 7a48 	vcmp.f32	s15, s16
 8011920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011924:	d02c      	beq.n	8011980 <calcLidarFreq+0xf0>
                       (((int8_t)(time_delta / LIDAR_INTERPOLATE)) * 512));
 8011926:	4620      	mov	r0, r4
    freq_lidar_step = ((freq_lidar_new - freq_lidar) /
 8011928:	ee37 8a48 	vsub.f32	s16, s14, s16
                       (((int8_t)(time_delta / LIDAR_INTERPOLATE)) * 512));
 801192c:	f7ee fdaa 	bl	8000484 <__aeabi_ui2d>
 8011930:	a319      	add	r3, pc, #100	; (adr r3, 8011998 <calcLidarFreq+0x108>)
 8011932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011936:	f7ee fe1b 	bl	8000570 <__aeabi_dmul>
 801193a:	f7ef f8c9 	bl	8000ad0 <__aeabi_d2iz>
 801193e:	b240      	sxtb	r0, r0
 8011940:	0240      	lsls	r0, r0, #9
    freq_lidar_step = ((freq_lidar_new - freq_lidar) /
 8011942:	ee07 0a90 	vmov	s15, r0
 8011946:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801194a:	eec8 6a07 	vdiv.f32	s13, s16, s14
  freq_lidar_inc = (freq_lidar / ((float)DAC_FREQ)) * max_table_index;
 801194e:	4a1c      	ldr	r2, [pc, #112]	; (80119c0 <calcLidarFreq+0x130>)
 8011950:	4b1c      	ldr	r3, [pc, #112]	; (80119c4 <calcLidarFreq+0x134>)
 8011952:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011956:	ee07 2a90 	vmov	s15, r2
 801195a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801195e:	4a1a      	ldr	r2, [pc, #104]	; (80119c8 <calcLidarFreq+0x138>)
 8011960:	ee67 7aa8 	vmul.f32	s15, s15, s17
}
 8011964:	ecbd 8b02 	vpop	{d8}
 8011968:	edc2 6a00 	vstr	s13, [r2]
  freq_lidar_inc = (freq_lidar / ((float)DAC_FREQ)) * max_table_index;
 801196c:	edc3 7a00 	vstr	s15, [r3]
}
 8011970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (freq_lidar > 16000) freq_lidar = 16000;
 8011972:	eeb0 8a67 	vmov.f32	s16, s15
 8011976:	eddf 8a15 	vldr	s17, [pc, #84]	; 80119cc <calcLidarFreq+0x13c>
 801197a:	edc7 7a00 	vstr	s15, [r7]
 801197e:	e7ca      	b.n	8011916 <calcLidarFreq+0x86>
    freq_lidar_step = 0;
 8011980:	eddf 6a13 	vldr	s13, [pc, #76]	; 80119d0 <calcLidarFreq+0x140>
 8011984:	e7e3      	b.n	801194e <calcLidarFreq+0xbe>
 8011986:	bf00      	nop
 8011988:	3fe97a02 	.word	0x3fe97a02
 801198c:	3f67a8ce 	.word	0x3f67a8ce
 8011990:	dd2f1aa0 	.word	0xdd2f1aa0
 8011994:	405ede24 	.word	0x405ede24
 8011998:	00000000 	.word	0x00000000
 801199c:	40538800 	.word	0x40538800
 80119a0:	20006aa0 	.word	0x20006aa0
 80119a4:	20007ad0 	.word	0x20007ad0
 80119a8:	2000530c 	.word	0x2000530c
 80119ac:	200076b8 	.word	0x200076b8
 80119b0:	20000048 	.word	0x20000048
 80119b4:	467a0000 	.word	0x467a0000
 80119b8:	37d1b717 	.word	0x37d1b717
 80119bc:	20005310 	.word	0x20005310
 80119c0:	2000004e 	.word	0x2000004e
 80119c4:	20006a98 	.word	0x20006a98
 80119c8:	20005314 	.word	0x20005314
 80119cc:	3ecccccc 	.word	0x3ecccccc
	...

080119d8 <addTableToBuffer>:
  }
}

void reset_index(float* freq_ind) { freq_ind = 0; }

void addTableToBuffer(q15_t* buffer, float* freq_inc, float* freq_ind) {
 80119d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119dc:	ed2d 8b02 	vpush	{d8}
  if ((filter_active == 1) && (skipFilter == 0)) {
 80119e0:	4bb9      	ldr	r3, [pc, #740]	; (8011cc8 <addTableToBuffer+0x2f0>)
 80119e2:	781b      	ldrb	r3, [r3, #0]
 80119e4:	2b01      	cmp	r3, #1
void addTableToBuffer(q15_t* buffer, float* freq_inc, float* freq_ind) {
 80119e6:	b08f      	sub	sp, #60	; 0x3c
  if ((filter_active == 1) && (skipFilter == 0)) {
 80119e8:	f000 80a7 	beq.w	8011b3a <addTableToBuffer+0x162>
        buffer[i] +=
            ampltiude_multiplier * filter_multiplier(&table_val) * SCALE_OUTPUT;
      }
    }
  } else {
    if (lidarModeActive) {
 80119ec:	4bb7      	ldr	r3, [pc, #732]	; (8011ccc <addTableToBuffer+0x2f4>)
 80119ee:	781b      	ldrb	r3, [r3, #0]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d05a      	beq.n	8011aaa <addTableToBuffer+0xd2>
 80119f4:	4bb6      	ldr	r3, [pc, #728]	; (8011cd0 <addTableToBuffer+0x2f8>)
 80119f6:	f8df b300 	ldr.w	fp, [pc, #768]	; 8011cf8 <addTableToBuffer+0x320>
 80119fa:	681f      	ldr	r7, [r3, #0]
 80119fc:	f8df a2fc 	ldr.w	sl, [pc, #764]	; 8011cfc <addTableToBuffer+0x324>
 8011a00:	4db4      	ldr	r5, [pc, #720]	; (8011cd4 <addTableToBuffer+0x2fc>)
 8011a02:	f8df 92fc 	ldr.w	r9, [pc, #764]	; 8011d00 <addTableToBuffer+0x328>
 8011a06:	f8df 82fc 	ldr.w	r8, [pc, #764]	; 8011d04 <addTableToBuffer+0x32c>
 8011a0a:	4cb3      	ldr	r4, [pc, #716]	; (8011cd8 <addTableToBuffer+0x300>)
  freq_lidar_inc = (freq_lidar / ((float)DAC_FREQ)) * max_table_index;
 8011a0c:	ed9f 6ab3 	vldr	s12, [pc, #716]	; 8011cdc <addTableToBuffer+0x304>
 8011a10:	1e86      	subs	r6, r0, #2
 8011a12:	f200 30fe 	addw	r0, r0, #1022	; 0x3fe
 8011a16:	f9b5 3000 	ldrsh.w	r3, [r5]
  freq_lidar += freq_lidar_step;
 8011a1a:	ed9b 7a00 	vldr	s14, [fp]
 8011a1e:	edda 7a00 	vldr	s15, [sl]
  freq_lidar_inc = (freq_lidar / ((float)DAC_FREQ)) * max_table_index;
 8011a22:	ee06 3a90 	vmov	s13, r3
  freq_lidar += freq_lidar_step;
 8011a26:	ee77 7a27 	vadd.f32	s15, s14, s15
  freq_lidar_inc = (freq_lidar / ((float)DAC_FREQ)) * max_table_index;
 8011a2a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  freq_lidar += freq_lidar_step;
 8011a2e:	edca 7a00 	vstr	s15, [sl]
  freq_lidar_inc = (freq_lidar / ((float)DAC_FREQ)) * max_table_index;
 8011a32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011a36:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011a3a:	edc9 7a00 	vstr	s15, [r9]
      (filter[incrementFilterIndex(&freq_fil_inc, &freq_fil_ind)] / 255.0);
  return (q15_t)filter_product;
}

uint16_t incrementIndex(float* freq_inc, float* freq_ind) {
  *freq_ind += (*freq_inc);
 8011a3e:	ed91 7a00 	vldr	s14, [r1]
 8011a42:	edd2 7a00 	vldr	s15, [r2]
 8011a46:	ee77 7a27 	vadd.f32	s15, s14, s15
  if ((*freq_ind) >= max_table_index) {
 8011a4a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    (*freq_ind) -= max_table_index;
 8011a52:	bfa8      	it	ge
 8011a54:	ee77 7ae6 	vsubge.f32	s15, s15, s13
  *freq_ind += (*freq_inc);
 8011a58:	edc2 7a00 	vstr	s15, [r2]
  }

  return (uint16_t)(*freq_ind);
 8011a5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011a60:	edcd 7a01 	vstr	s15, [sp, #4]
        table_val = waveTable[incrementIndex(freq_inc, freq_ind)];
 8011a64:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        buffer[i] += ampltiude_multiplier * table_val * SCALE_OUTPUT;
 8011a68:	edd4 7a00 	vldr	s15, [r4]
        table_val = waveTable[incrementIndex(freq_inc, freq_ind)];
 8011a6c:	f937 3013 	ldrsh.w	r3, [r7, r3, lsl #1]
 8011a70:	f8a8 3000 	strh.w	r3, [r8]
        buffer[i] += ampltiude_multiplier * table_val * SCALE_OUTPUT;
 8011a74:	f9b6 e002 	ldrsh.w	lr, [r6, #2]
 8011a78:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8011a7c:	ee07 3a10 	vmov	s14, r3
 8011a80:	ee07 ea90 	vmov	s15, lr
 8011a84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011a88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011a8c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011a90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011a94:	ee17 3a90 	vmov	r3, s15
 8011a98:	f826 3f02 	strh.w	r3, [r6, #2]!
      for (int i = 0; i < BUFFER_SIZE; i++) {
 8011a9c:	42b0      	cmp	r0, r6
 8011a9e:	d1ba      	bne.n	8011a16 <addTableToBuffer+0x3e>
}
 8011aa0:	b00f      	add	sp, #60	; 0x3c
 8011aa2:	ecbd 8b02 	vpop	{d8}
 8011aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011aaa:	4b89      	ldr	r3, [pc, #548]	; (8011cd0 <addTableToBuffer+0x2f8>)
 8011aac:	ed92 7a00 	vldr	s14, [r2]
 8011ab0:	681f      	ldr	r7, [r3, #0]
 8011ab2:	4d88      	ldr	r5, [pc, #544]	; (8011cd4 <addTableToBuffer+0x2fc>)
 8011ab4:	f8df 824c 	ldr.w	r8, [pc, #588]	; 8011d04 <addTableToBuffer+0x32c>
 8011ab8:	4c87      	ldr	r4, [pc, #540]	; (8011cd8 <addTableToBuffer+0x300>)
 8011aba:	1e86      	subs	r6, r0, #2
 8011abc:	f200 30fe 	addw	r0, r0, #1022	; 0x3fe
  if ((*freq_ind) >= max_table_index) {
 8011ac0:	f9b5 3000 	ldrsh.w	r3, [r5]
  *freq_ind += (*freq_inc);
 8011ac4:	edd1 6a00 	vldr	s13, [r1]
  if ((*freq_ind) >= max_table_index) {
 8011ac8:	ee07 3a90 	vmov	s15, r3
  *freq_ind += (*freq_inc);
 8011acc:	ee37 7a26 	vadd.f32	s14, s14, s13
  if ((*freq_ind) >= max_table_index) {
 8011ad0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  *freq_ind += (*freq_inc);
 8011ad4:	ed82 7a00 	vstr	s14, [r2]
  if ((*freq_ind) >= max_table_index) {
 8011ad8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    (*freq_ind) -= max_table_index;
 8011ae0:	bf98      	it	ls
 8011ae2:	ee37 7a67 	vsubls.f32	s14, s14, s15
        table_val = waveTable[incrementIndex(freq_inc, freq_ind)];
 8011ae6:	eefc 6ac7 	vcvt.u32.f32	s13, s14
    (*freq_ind) -= max_table_index;
 8011aea:	bf98      	it	ls
 8011aec:	ed82 7a00 	vstrls	s14, [r2]
        table_val = waveTable[incrementIndex(freq_inc, freq_ind)];
 8011af0:	edcd 6a01 	vstr	s13, [sp, #4]
 8011af4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        buffer[i] += ampltiude_multiplier * table_val * SCALE_OUTPUT;
 8011af8:	edd4 7a00 	vldr	s15, [r4]
        table_val = waveTable[incrementIndex(freq_inc, freq_ind)];
 8011afc:	f937 3013 	ldrsh.w	r3, [r7, r3, lsl #1]
 8011b00:	f8a8 3000 	strh.w	r3, [r8]
        buffer[i] += ampltiude_multiplier * table_val * SCALE_OUTPUT;
 8011b04:	f9b6 e002 	ldrsh.w	lr, [r6, #2]
 8011b08:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8011b0c:	ee06 3a10 	vmov	s12, r3
 8011b10:	ee07 ea90 	vmov	s15, lr
 8011b14:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8011b18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011b1c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011b20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011b24:	ee17 3a90 	vmov	r3, s15
 8011b28:	f826 3f02 	strh.w	r3, [r6, #2]!
      for (int i = 0; i < BUFFER_SIZE; i++) {
 8011b2c:	4286      	cmp	r6, r0
 8011b2e:	d1c7      	bne.n	8011ac0 <addTableToBuffer+0xe8>
}
 8011b30:	b00f      	add	sp, #60	; 0x3c
 8011b32:	ecbd 8b02 	vpop	{d8}
 8011b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((filter_active == 1) && (skipFilter == 0)) {
 8011b3a:	4b69      	ldr	r3, [pc, #420]	; (8011ce0 <addTableToBuffer+0x308>)
 8011b3c:	781b      	ldrb	r3, [r3, #0]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	f47f af54 	bne.w	80119ec <addTableToBuffer+0x14>
    if (lidarModeActive) {
 8011b44:	4b61      	ldr	r3, [pc, #388]	; (8011ccc <addTableToBuffer+0x2f4>)
 8011b46:	9101      	str	r1, [sp, #4]
 8011b48:	781b      	ldrb	r3, [r3, #0]
 8011b4a:	4617      	mov	r7, r2
 8011b4c:	4a60      	ldr	r2, [pc, #384]	; (8011cd0 <addTableToBuffer+0x2f8>)
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	f000 80da 	beq.w	8011d08 <addTableToBuffer+0x330>
 8011b54:	4b63      	ldr	r3, [pc, #396]	; (8011ce4 <addTableToBuffer+0x30c>)
 8011b56:	6812      	ldr	r2, [r2, #0]
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	930a      	str	r3, [sp, #40]	; 0x28
 8011b5c:	4b62      	ldr	r3, [pc, #392]	; (8011ce8 <addTableToBuffer+0x310>)
 8011b5e:	9303      	str	r3, [sp, #12]
 8011b60:	4b62      	ldr	r3, [pc, #392]	; (8011cec <addTableToBuffer+0x314>)
 8011b62:	f8df b194 	ldr.w	fp, [pc, #404]	; 8011cf8 <addTableToBuffer+0x320>
 8011b66:	4e62      	ldr	r6, [pc, #392]	; (8011cf0 <addTableToBuffer+0x318>)
 8011b68:	4c5b      	ldr	r4, [pc, #364]	; (8011cd8 <addTableToBuffer+0x300>)
 8011b6a:	9306      	str	r3, [sp, #24]
 8011b6c:	4b61      	ldr	r3, [pc, #388]	; (8011cf4 <addTableToBuffer+0x31c>)
 8011b6e:	4d59      	ldr	r5, [pc, #356]	; (8011cd4 <addTableToBuffer+0x2fc>)
 8011b70:	9209      	str	r2, [sp, #36]	; 0x24
 8011b72:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8011d00 <addTableToBuffer+0x328>
 8011b76:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8011d04 <addTableToBuffer+0x32c>
 8011b7a:	9302      	str	r3, [sp, #8]
 8011b7c:	f200 32fe 	addw	r2, r0, #1022	; 0x3fe
 8011b80:	1e83      	subs	r3, r0, #2
 8011b82:	f8df a178 	ldr.w	sl, [pc, #376]	; 8011cfc <addTableToBuffer+0x324>
  freq_lidar_inc = (freq_lidar / ((float)DAC_FREQ)) * max_table_index;
 8011b86:	ed9f 8a55 	vldr	s16, [pc, #340]	; 8011cdc <addTableToBuffer+0x304>
 8011b8a:	950b      	str	r5, [sp, #44]	; 0x2c
 8011b8c:	9208      	str	r2, [sp, #32]
 8011b8e:	4635      	mov	r5, r6
 8011b90:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8011b94:	465e      	mov	r6, fp
 8011b96:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8011b9a:	46bb      	mov	fp, r7
 8011b9c:	4627      	mov	r7, r4
 8011b9e:	461c      	mov	r4, r3
 8011ba0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  freq_lidar += freq_lidar_step;
 8011ba2:	ed96 7a00 	vldr	s14, [r6]
  freq_lidar_inc = (freq_lidar / ((float)DAC_FREQ)) * max_table_index;
 8011ba6:	f9b3 3000 	ldrsh.w	r3, [r3]
  freq_lidar += freq_lidar_step;
 8011baa:	edda 7a00 	vldr	s15, [sl]
        table_val = waveTable[incrementIndex(freq_inc, freq_ind)];
 8011bae:	9a09      	ldr	r2, [sp, #36]	; 0x24
  freq_lidar_inc = (freq_lidar / ((float)DAC_FREQ)) * max_table_index;
 8011bb0:	ee06 3a90 	vmov	s13, r3
  freq_lidar += freq_lidar_step;
 8011bb4:	ee77 7a27 	vadd.f32	s15, s14, s15
  freq_lidar_inc = (freq_lidar / ((float)DAC_FREQ)) * max_table_index;
 8011bb8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  freq_lidar += freq_lidar_step;
 8011bbc:	edca 7a00 	vstr	s15, [sl]
  freq_lidar_inc = (freq_lidar / ((float)DAC_FREQ)) * max_table_index;
 8011bc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011bc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011bc6:	ee67 7a88 	vmul.f32	s15, s15, s16
 8011bca:	edc3 7a00 	vstr	s15, [r3]
  *freq_ind += (*freq_inc);
 8011bce:	9b01      	ldr	r3, [sp, #4]
 8011bd0:	eddb 7a00 	vldr	s15, [fp]
 8011bd4:	ed93 7a00 	vldr	s14, [r3]
 8011bd8:	ee77 7a27 	vadd.f32	s15, s14, s15
  if ((*freq_ind) >= max_table_index) {
 8011bdc:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    (*freq_ind) -= max_table_index;
 8011be4:	bfa8      	it	ge
 8011be6:	ee77 7ae6 	vsubge.f32	s15, s15, s13
  *freq_ind += (*freq_inc);
 8011bea:	edcb 7a00 	vstr	s15, [fp]
  return (uint16_t)(*freq_ind);
 8011bee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011bf2:	edcd 7a04 	vstr	s15, [sp, #16]
        table_val = waveTable[incrementIndex(freq_inc, freq_ind)];
 8011bf6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8011bfa:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8011bfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011c00:	8018      	strh	r0, [r3, #0]
      (*waveTable) *
 8011c02:	f7ee fc4f 	bl	80004a4 <__aeabi_i2d>
}

uint16_t incrementFilterIndex(float* freq_inc, float* freq_ind) {
  *freq_ind += (*freq_inc);
 8011c06:	9b03      	ldr	r3, [sp, #12]
 8011c08:	edd5 7a00 	vldr	s15, [r5]
 8011c0c:	ed93 7a00 	vldr	s14, [r3]
  if ((*freq_ind) >= max_filter_index) {
 8011c10:	9b06      	ldr	r3, [sp, #24]
      (*waveTable) *
 8011c12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  if ((*freq_ind) >= max_filter_index) {
 8011c14:	f9b3 3000 	ldrsh.w	r3, [r3]
  *freq_ind += (*freq_inc);
 8011c18:	ee77 7a27 	vadd.f32	s15, s14, s15
  if ((*freq_ind) >= max_filter_index) {
 8011c1c:	ee07 3a10 	vmov	s14, r3
 8011c20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  *freq_ind += (*freq_inc);
 8011c24:	edc5 7a00 	vstr	s15, [r5]
  if ((*freq_ind) >= max_filter_index) {
 8011c28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    (*freq_ind) -= max_filter_index;
 8011c30:	bf98      	it	ls
 8011c32:	ee77 7ac7 	vsubls.f32	s15, s15, s14
      (*waveTable) *
 8011c36:	e9cd 0104 	strd	r0, r1, [sp, #16]
    (*freq_ind) -= max_filter_index;
 8011c3a:	bf98      	it	ls
 8011c3c:	edc5 7a00 	vstrls	s15, [r5]
  }

  return (uint16_t)(*freq_ind);
 8011c40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011c44:	edcd 7a07 	vstr	s15, [sp, #28]
      (filter[incrementFilterIndex(&freq_fil_inc, &freq_fil_ind)] / 255.0);
 8011c48:	f8bd 301c 	ldrh.w	r3, [sp, #28]
      (*waveTable) *
 8011c4c:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8011c50:	f7ee fc28 	bl	80004a4 <__aeabi_i2d>
 8011c54:	a31a      	add	r3, pc, #104	; (adr r3, 8011cc0 <addTableToBuffer+0x2e8>)
 8011c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c5a:	4680      	mov	r8, r0
 8011c5c:	4689      	mov	r9, r1
 8011c5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011c62:	f7ee fc85 	bl	8000570 <__aeabi_dmul>
 8011c66:	460b      	mov	r3, r1
 8011c68:	4602      	mov	r2, r0
 8011c6a:	4649      	mov	r1, r9
 8011c6c:	4640      	mov	r0, r8
 8011c6e:	f7ee fc7f 	bl	8000570 <__aeabi_dmul>
 8011c72:	f7ee ff75 	bl	8000b60 <__aeabi_d2f>
 8011c76:	ee07 0a10 	vmov	s14, r0
        buffer[i] +=
 8011c7a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8011c7e:	edd7 6a00 	vldr	s13, [r7]
  return (q15_t)filter_product;
 8011c82:	eefd 7ac7 	vcvt.s32.f32	s15, s14
        buffer[i] +=
 8011c86:	ee76 6aa6 	vadd.f32	s13, s13, s13
  return (q15_t)filter_product;
 8011c8a:	edcd 7a04 	vstr	s15, [sp, #16]
        buffer[i] +=
 8011c8e:	ee07 3a90 	vmov	s15, r3
  filter_product =
 8011c92:	9b02      	ldr	r3, [sp, #8]
 8011c94:	6018      	str	r0, [r3, #0]
            ampltiude_multiplier * filter_multiplier(&table_val) * SCALE_OUTPUT;
 8011c96:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8011c9a:	ee07 3a10 	vmov	s14, r3
        buffer[i] +=
 8011c9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            ampltiude_multiplier * filter_multiplier(&table_val) * SCALE_OUTPUT;
 8011ca2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        buffer[i] +=
 8011ca6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011caa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011cae:	ee17 3a90 	vmov	r3, s15
 8011cb2:	f824 3f02 	strh.w	r3, [r4, #2]!
      for (int i = 0; i < BUFFER_SIZE; i++) {
 8011cb6:	9b08      	ldr	r3, [sp, #32]
 8011cb8:	42a3      	cmp	r3, r4
 8011cba:	f47f af71 	bne.w	8011ba0 <addTableToBuffer+0x1c8>
 8011cbe:	e6ef      	b.n	8011aa0 <addTableToBuffer+0xc8>
 8011cc0:	10101010 	.word	0x10101010
 8011cc4:	3f701010 	.word	0x3f701010
 8011cc8:	200052d2 	.word	0x200052d2
 8011ccc:	20005318 	.word	0x20005318
 8011cd0:	200086dc 	.word	0x200086dc
 8011cd4:	2000004e 	.word	0x2000004e
 8011cd8:	200052cc 	.word	0x200052cc
 8011cdc:	37d1b717 	.word	0x37d1b717
 8011ce0:	2000531a 	.word	0x2000531a
 8011ce4:	20007ac8 	.word	0x20007ac8
 8011ce8:	200076c4 	.word	0x200076c4
 8011cec:	2000004c 	.word	0x2000004c
 8011cf0:	20005304 	.word	0x20005304
 8011cf4:	200086e0 	.word	0x200086e0
 8011cf8:	20005314 	.word	0x20005314
 8011cfc:	20000048 	.word	0x20000048
 8011d00:	20006a98 	.word	0x20006a98
 8011d04:	200076bc 	.word	0x200076bc
 8011d08:	4b51      	ldr	r3, [pc, #324]	; (8011e50 <addTableToBuffer+0x478>)
 8011d0a:	4c52      	ldr	r4, [pc, #328]	; (8011e54 <addTableToBuffer+0x47c>)
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	9307      	str	r3, [sp, #28]
 8011d10:	4b51      	ldr	r3, [pc, #324]	; (8011e58 <addTableToBuffer+0x480>)
 8011d12:	9303      	str	r3, [sp, #12]
 8011d14:	4b51      	ldr	r3, [pc, #324]	; (8011e5c <addTableToBuffer+0x484>)
 8011d16:	f8d2 b000 	ldr.w	fp, [r2]
 8011d1a:	4d51      	ldr	r5, [pc, #324]	; (8011e60 <addTableToBuffer+0x488>)
 8011d1c:	f8df 814c 	ldr.w	r8, [pc, #332]	; 8011e6c <addTableToBuffer+0x494>
 8011d20:	9306      	str	r3, [sp, #24]
 8011d22:	f200 39fe 	addw	r9, r0, #1022	; 0x3fe
 8011d26:	4b4f      	ldr	r3, [pc, #316]	; (8011e64 <addTableToBuffer+0x48c>)
 8011d28:	4e4f      	ldr	r6, [pc, #316]	; (8011e68 <addTableToBuffer+0x490>)
 8011d2a:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8011d2e:	9302      	str	r3, [sp, #8]
 8011d30:	f1a0 0a02 	sub.w	sl, r0, #2
 8011d34:	f8cd 9020 	str.w	r9, [sp, #32]
 8011d38:	950a      	str	r5, [sp, #40]	; 0x28
 8011d3a:	46a3      	mov	fp, r4
 8011d3c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  *freq_ind += (*freq_inc);
 8011d40:	9b01      	ldr	r3, [sp, #4]
 8011d42:	edd7 7a00 	vldr	s15, [r7]
 8011d46:	ed93 7a00 	vldr	s14, [r3]
  if ((*freq_ind) >= max_table_index) {
 8011d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        table_val = waveTable[incrementIndex(freq_inc, freq_ind)];
 8011d4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  if ((*freq_ind) >= max_table_index) {
 8011d4e:	f9b3 3000 	ldrsh.w	r3, [r3]
  *freq_ind += (*freq_inc);
 8011d52:	ee77 7a27 	vadd.f32	s15, s14, s15
  if ((*freq_ind) >= max_table_index) {
 8011d56:	ee07 3a10 	vmov	s14, r3
 8011d5a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  *freq_ind += (*freq_inc);
 8011d5e:	edc7 7a00 	vstr	s15, [r7]
  if ((*freq_ind) >= max_table_index) {
 8011d62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    (*freq_ind) -= max_table_index;
 8011d6a:	bf9c      	itt	ls
 8011d6c:	ee77 7ac7 	vsubls.f32	s15, s15, s14
 8011d70:	edc7 7a00 	vstrls	s15, [r7]
  return (uint16_t)(*freq_ind);
 8011d74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011d78:	edcd 7a04 	vstr	s15, [sp, #16]
        table_val = waveTable[incrementIndex(freq_inc, freq_ind)];
 8011d7c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8011d80:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8011d84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011d86:	8018      	strh	r0, [r3, #0]
      (*waveTable) *
 8011d88:	f7ee fb8c 	bl	80004a4 <__aeabi_i2d>
  *freq_ind += (*freq_inc);
 8011d8c:	9b03      	ldr	r3, [sp, #12]
 8011d8e:	edd6 7a00 	vldr	s15, [r6]
 8011d92:	ed93 7a00 	vldr	s14, [r3]
  if ((*freq_ind) >= max_filter_index) {
 8011d96:	9b06      	ldr	r3, [sp, #24]
      (*waveTable) *
 8011d98:	9a07      	ldr	r2, [sp, #28]
  if ((*freq_ind) >= max_filter_index) {
 8011d9a:	f9b3 3000 	ldrsh.w	r3, [r3]
  *freq_ind += (*freq_inc);
 8011d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
  if ((*freq_ind) >= max_filter_index) {
 8011da2:	ee07 3a10 	vmov	s14, r3
 8011da6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  *freq_ind += (*freq_inc);
 8011daa:	edc6 7a00 	vstr	s15, [r6]
  if ((*freq_ind) >= max_filter_index) {
 8011dae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    (*freq_ind) -= max_filter_index;
 8011db6:	bf98      	it	ls
 8011db8:	ee77 7ac7 	vsubls.f32	s15, s15, s14
      (*waveTable) *
 8011dbc:	4604      	mov	r4, r0
    (*freq_ind) -= max_filter_index;
 8011dbe:	bf98      	it	ls
 8011dc0:	edc6 7a00 	vstrls	s15, [r6]
  return (uint16_t)(*freq_ind);
 8011dc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
      (*waveTable) *
 8011dc8:	460d      	mov	r5, r1
  return (uint16_t)(*freq_ind);
 8011dca:	edcd 7a04 	vstr	s15, [sp, #16]
      (filter[incrementFilterIndex(&freq_fil_inc, &freq_fil_ind)] / 255.0);
 8011dce:	f8bd 3010 	ldrh.w	r3, [sp, #16]
      (*waveTable) *
 8011dd2:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8011dd6:	f7ee fb65 	bl	80004a4 <__aeabi_i2d>
 8011dda:	a31b      	add	r3, pc, #108	; (adr r3, 8011e48 <addTableToBuffer+0x470>)
 8011ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011de0:	4680      	mov	r8, r0
 8011de2:	4689      	mov	r9, r1
 8011de4:	4620      	mov	r0, r4
 8011de6:	4629      	mov	r1, r5
 8011de8:	f7ee fbc2 	bl	8000570 <__aeabi_dmul>
 8011dec:	460b      	mov	r3, r1
 8011dee:	4602      	mov	r2, r0
 8011df0:	4649      	mov	r1, r9
 8011df2:	4640      	mov	r0, r8
 8011df4:	f7ee fbbc 	bl	8000570 <__aeabi_dmul>
 8011df8:	f7ee feb2 	bl	8000b60 <__aeabi_d2f>
 8011dfc:	ee07 0a10 	vmov	s14, r0
        buffer[i] +=
 8011e00:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
 8011e04:	eddb 6a00 	vldr	s13, [fp]
  return (q15_t)filter_product;
 8011e08:	eefd 7ac7 	vcvt.s32.f32	s15, s14
        buffer[i] +=
 8011e0c:	ee76 6aa6 	vadd.f32	s13, s13, s13
  return (q15_t)filter_product;
 8011e10:	edcd 7a04 	vstr	s15, [sp, #16]
        buffer[i] +=
 8011e14:	ee07 3a90 	vmov	s15, r3
  filter_product =
 8011e18:	9b02      	ldr	r3, [sp, #8]
 8011e1a:	6018      	str	r0, [r3, #0]
            ampltiude_multiplier * filter_multiplier(&table_val) * SCALE_OUTPUT;
 8011e1c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8011e20:	ee07 3a10 	vmov	s14, r3
        buffer[i] +=
 8011e24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            ampltiude_multiplier * filter_multiplier(&table_val) * SCALE_OUTPUT;
 8011e28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        buffer[i] +=
 8011e2c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011e30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011e34:	ee17 3a90 	vmov	r3, s15
 8011e38:	f82a 3f02 	strh.w	r3, [sl, #2]!
      for (int i = 0; i < BUFFER_SIZE; i++) {
 8011e3c:	9b08      	ldr	r3, [sp, #32]
 8011e3e:	459a      	cmp	sl, r3
 8011e40:	f47f af7e 	bne.w	8011d40 <addTableToBuffer+0x368>
 8011e44:	e62c      	b.n	8011aa0 <addTableToBuffer+0xc8>
 8011e46:	bf00      	nop
 8011e48:	10101010 	.word	0x10101010
 8011e4c:	3f701010 	.word	0x3f701010
 8011e50:	20007ac8 	.word	0x20007ac8
 8011e54:	200052cc 	.word	0x200052cc
 8011e58:	200076c4 	.word	0x200076c4
 8011e5c:	2000004c 	.word	0x2000004c
 8011e60:	2000004e 	.word	0x2000004e
 8011e64:	200086e0 	.word	0x200086e0
 8011e68:	20005304 	.word	0x20005304
 8011e6c:	200076bc 	.word	0x200076bc

08011e70 <fillBuffer.part.0>:
void fillBuffer(q15_t* buffer) {
 8011e70:	b510      	push	{r4, lr}
    if (LED_State(CAP_1_LED_PORT, CAP_1_LED_PIN)) {
 8011e72:	2120      	movs	r1, #32
void fillBuffer(q15_t* buffer) {
 8011e74:	4604      	mov	r4, r0
    if (LED_State(CAP_1_LED_PORT, CAP_1_LED_PIN)) {
 8011e76:	2003      	movs	r0, #3
 8011e78:	f7fe f85c 	bl	800ff34 <LED_State>
 8011e7c:	2800      	cmp	r0, #0
 8011e7e:	f040 8081 	bne.w	8011f84 <fillBuffer.part.0+0x114>
    if (LED_State(CAP_2_LED_PORT, CAP_2_LED_PIN)) {
 8011e82:	2110      	movs	r1, #16
 8011e84:	2003      	movs	r0, #3
 8011e86:	f7fe f855 	bl	800ff34 <LED_State>
 8011e8a:	2800      	cmp	r0, #0
 8011e8c:	d174      	bne.n	8011f78 <fillBuffer.part.0+0x108>
    if (LED_State(CAP_3_LED_PORT, CAP_3_LED_PIN)) {
 8011e8e:	2108      	movs	r1, #8
 8011e90:	2003      	movs	r0, #3
 8011e92:	f7fe f84f 	bl	800ff34 <LED_State>
 8011e96:	2800      	cmp	r0, #0
 8011e98:	d168      	bne.n	8011f6c <fillBuffer.part.0+0xfc>
    if (LED_State(CAP_4_LED_PORT, CAP_4_LED_PIN)) {
 8011e9a:	2104      	movs	r1, #4
 8011e9c:	2003      	movs	r0, #3
 8011e9e:	f7fe f849 	bl	800ff34 <LED_State>
 8011ea2:	2800      	cmp	r0, #0
 8011ea4:	d15c      	bne.n	8011f60 <fillBuffer.part.0+0xf0>
    if (LED_State(CAP_5_LED_PORT, CAP_5_LED_PIN)) {
 8011ea6:	2102      	movs	r1, #2
 8011ea8:	2003      	movs	r0, #3
 8011eaa:	f7fe f843 	bl	800ff34 <LED_State>
 8011eae:	2800      	cmp	r0, #0
 8011eb0:	d150      	bne.n	8011f54 <fillBuffer.part.0+0xe4>
    if (LED_State(CAP_6_LED_PORT, CAP_6_LED_PIN)) {
 8011eb2:	2101      	movs	r1, #1
 8011eb4:	2003      	movs	r0, #3
 8011eb6:	f7fe f83d 	bl	800ff34 <LED_State>
 8011eba:	2800      	cmp	r0, #0
 8011ebc:	d144      	bne.n	8011f48 <fillBuffer.part.0+0xd8>
    if (LED_State(CAP_7_LED_PORT, CAP_7_LED_PIN)) {
 8011ebe:	2180      	movs	r1, #128	; 0x80
 8011ec0:	2002      	movs	r0, #2
 8011ec2:	f7fe f837 	bl	800ff34 <LED_State>
 8011ec6:	2800      	cmp	r0, #0
 8011ec8:	d138      	bne.n	8011f3c <fillBuffer.part.0+0xcc>
    if (LED_State(CAP_8_LED_PORT, CAP_8_LED_PIN)) {
 8011eca:	2140      	movs	r1, #64	; 0x40
 8011ecc:	2002      	movs	r0, #2
 8011ece:	f7fe f831 	bl	800ff34 <LED_State>
 8011ed2:	bb68      	cbnz	r0, 8011f30 <fillBuffer.part.0+0xc0>
    if (LED_State(CAP_9_LED_PORT, CAP_9_LED_PIN)) {
 8011ed4:	2120      	movs	r1, #32
 8011ed6:	2002      	movs	r0, #2
 8011ed8:	f7fe f82c 	bl	800ff34 <LED_State>
 8011edc:	bb10      	cbnz	r0, 8011f24 <fillBuffer.part.0+0xb4>
    if (LED_State(CAP_10_LED_PORT, CAP_10_LED_PIN)) {
 8011ede:	2110      	movs	r1, #16
 8011ee0:	2002      	movs	r0, #2
 8011ee2:	f7fe f827 	bl	800ff34 <LED_State>
 8011ee6:	b9b8      	cbnz	r0, 8011f18 <fillBuffer.part.0+0xa8>
    if (LED_State(CAP_11_LED_PORT, CAP_11_LED_PIN)) {
 8011ee8:	2108      	movs	r1, #8
 8011eea:	2002      	movs	r0, #2
 8011eec:	f7fe f822 	bl	800ff34 <LED_State>
 8011ef0:	b960      	cbnz	r0, 8011f0c <fillBuffer.part.0+0x9c>
    if (LED_State(CAP_12_LED_PORT, CAP_12_LED_PIN)) {
 8011ef2:	2104      	movs	r1, #4
 8011ef4:	2002      	movs	r0, #2
 8011ef6:	f7fe f81d 	bl	800ff34 <LED_State>
 8011efa:	b900      	cbnz	r0, 8011efe <fillBuffer.part.0+0x8e>
 8011efc:	bd10      	pop	{r4, pc}
      addTableToBuffer(buffer, &freq_12_inc, &freq_12_ind);
 8011efe:	4620      	mov	r0, r4
 8011f00:	4a23      	ldr	r2, [pc, #140]	; (8011f90 <fillBuffer.part.0+0x120>)
 8011f02:	4924      	ldr	r1, [pc, #144]	; (8011f94 <fillBuffer.part.0+0x124>)
}
 8011f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      addTableToBuffer(buffer, &freq_12_inc, &freq_12_ind);
 8011f08:	f7ff bd66 	b.w	80119d8 <addTableToBuffer>
      addTableToBuffer(buffer, &freq_11_inc, &freq_11_ind);
 8011f0c:	4a22      	ldr	r2, [pc, #136]	; (8011f98 <fillBuffer.part.0+0x128>)
 8011f0e:	4923      	ldr	r1, [pc, #140]	; (8011f9c <fillBuffer.part.0+0x12c>)
 8011f10:	4620      	mov	r0, r4
 8011f12:	f7ff fd61 	bl	80119d8 <addTableToBuffer>
 8011f16:	e7ec      	b.n	8011ef2 <fillBuffer.part.0+0x82>
      addTableToBuffer(buffer, &freq_10_inc, &freq_10_ind);
 8011f18:	4a21      	ldr	r2, [pc, #132]	; (8011fa0 <fillBuffer.part.0+0x130>)
 8011f1a:	4922      	ldr	r1, [pc, #136]	; (8011fa4 <fillBuffer.part.0+0x134>)
 8011f1c:	4620      	mov	r0, r4
 8011f1e:	f7ff fd5b 	bl	80119d8 <addTableToBuffer>
 8011f22:	e7e1      	b.n	8011ee8 <fillBuffer.part.0+0x78>
      addTableToBuffer(buffer, &freq_9_inc, &freq_9_ind);
 8011f24:	4a20      	ldr	r2, [pc, #128]	; (8011fa8 <fillBuffer.part.0+0x138>)
 8011f26:	4921      	ldr	r1, [pc, #132]	; (8011fac <fillBuffer.part.0+0x13c>)
 8011f28:	4620      	mov	r0, r4
 8011f2a:	f7ff fd55 	bl	80119d8 <addTableToBuffer>
 8011f2e:	e7d6      	b.n	8011ede <fillBuffer.part.0+0x6e>
      addTableToBuffer(buffer, &freq_8_inc, &freq_8_ind);
 8011f30:	4a1f      	ldr	r2, [pc, #124]	; (8011fb0 <fillBuffer.part.0+0x140>)
 8011f32:	4920      	ldr	r1, [pc, #128]	; (8011fb4 <fillBuffer.part.0+0x144>)
 8011f34:	4620      	mov	r0, r4
 8011f36:	f7ff fd4f 	bl	80119d8 <addTableToBuffer>
 8011f3a:	e7cb      	b.n	8011ed4 <fillBuffer.part.0+0x64>
      addTableToBuffer(buffer, &freq_7_inc, &freq_7_ind);
 8011f3c:	4a1e      	ldr	r2, [pc, #120]	; (8011fb8 <fillBuffer.part.0+0x148>)
 8011f3e:	491f      	ldr	r1, [pc, #124]	; (8011fbc <fillBuffer.part.0+0x14c>)
 8011f40:	4620      	mov	r0, r4
 8011f42:	f7ff fd49 	bl	80119d8 <addTableToBuffer>
 8011f46:	e7c0      	b.n	8011eca <fillBuffer.part.0+0x5a>
      addTableToBuffer(buffer, &freq_6_inc, &freq_6_ind);
 8011f48:	4a1d      	ldr	r2, [pc, #116]	; (8011fc0 <fillBuffer.part.0+0x150>)
 8011f4a:	491e      	ldr	r1, [pc, #120]	; (8011fc4 <fillBuffer.part.0+0x154>)
 8011f4c:	4620      	mov	r0, r4
 8011f4e:	f7ff fd43 	bl	80119d8 <addTableToBuffer>
 8011f52:	e7b4      	b.n	8011ebe <fillBuffer.part.0+0x4e>
      addTableToBuffer(buffer, &freq_5_inc, &freq_5_ind);
 8011f54:	4a1c      	ldr	r2, [pc, #112]	; (8011fc8 <fillBuffer.part.0+0x158>)
 8011f56:	491d      	ldr	r1, [pc, #116]	; (8011fcc <fillBuffer.part.0+0x15c>)
 8011f58:	4620      	mov	r0, r4
 8011f5a:	f7ff fd3d 	bl	80119d8 <addTableToBuffer>
 8011f5e:	e7a8      	b.n	8011eb2 <fillBuffer.part.0+0x42>
      addTableToBuffer(buffer, &freq_4_inc, &freq_4_ind);
 8011f60:	4a1b      	ldr	r2, [pc, #108]	; (8011fd0 <fillBuffer.part.0+0x160>)
 8011f62:	491c      	ldr	r1, [pc, #112]	; (8011fd4 <fillBuffer.part.0+0x164>)
 8011f64:	4620      	mov	r0, r4
 8011f66:	f7ff fd37 	bl	80119d8 <addTableToBuffer>
 8011f6a:	e79c      	b.n	8011ea6 <fillBuffer.part.0+0x36>
      addTableToBuffer(buffer, &freq_3_inc, &freq_3_ind);
 8011f6c:	4a1a      	ldr	r2, [pc, #104]	; (8011fd8 <fillBuffer.part.0+0x168>)
 8011f6e:	491b      	ldr	r1, [pc, #108]	; (8011fdc <fillBuffer.part.0+0x16c>)
 8011f70:	4620      	mov	r0, r4
 8011f72:	f7ff fd31 	bl	80119d8 <addTableToBuffer>
 8011f76:	e790      	b.n	8011e9a <fillBuffer.part.0+0x2a>
      addTableToBuffer(buffer, &freq_2_inc, &freq_2_ind);
 8011f78:	4a19      	ldr	r2, [pc, #100]	; (8011fe0 <fillBuffer.part.0+0x170>)
 8011f7a:	491a      	ldr	r1, [pc, #104]	; (8011fe4 <fillBuffer.part.0+0x174>)
 8011f7c:	4620      	mov	r0, r4
 8011f7e:	f7ff fd2b 	bl	80119d8 <addTableToBuffer>
 8011f82:	e784      	b.n	8011e8e <fillBuffer.part.0+0x1e>
      addTableToBuffer(buffer, &freq_1_inc, &freq_1_ind);
 8011f84:	4a18      	ldr	r2, [pc, #96]	; (8011fe8 <fillBuffer.part.0+0x178>)
 8011f86:	4919      	ldr	r1, [pc, #100]	; (8011fec <fillBuffer.part.0+0x17c>)
 8011f88:	4620      	mov	r0, r4
 8011f8a:	f7ff fd25 	bl	80119d8 <addTableToBuffer>
 8011f8e:	e778      	b.n	8011e82 <fillBuffer.part.0+0x12>
 8011f90:	200052dc 	.word	0x200052dc
 8011f94:	20007ed4 	.word	0x20007ed4
 8011f98:	200052d8 	.word	0x200052d8
 8011f9c:	200076c0 	.word	0x200076c0
 8011fa0:	200052d4 	.word	0x200052d4
 8011fa4:	200082d8 	.word	0x200082d8
 8011fa8:	20005300 	.word	0x20005300
 8011fac:	200072ac 	.word	0x200072ac
 8011fb0:	200052fc 	.word	0x200052fc
 8011fb4:	200086e4 	.word	0x200086e4
 8011fb8:	200052f8 	.word	0x200052f8
 8011fbc:	20006a9c 	.word	0x20006a9c
 8011fc0:	200052f4 	.word	0x200052f4
 8011fc4:	200072a8 	.word	0x200072a8
 8011fc8:	200052f0 	.word	0x200052f0
 8011fcc:	200076b0 	.word	0x200076b0
 8011fd0:	200052ec 	.word	0x200052ec
 8011fd4:	200076b4 	.word	0x200076b4
 8011fd8:	200052e8 	.word	0x200052e8
 8011fdc:	20006aa4 	.word	0x20006aa4
 8011fe0:	200052e4 	.word	0x200052e4
 8011fe4:	20007acc 	.word	0x20007acc
 8011fe8:	200052e0 	.word	0x200052e0
 8011fec:	20005e94 	.word	0x20005e94

08011ff0 <switchOctave>:
}

void switchOctave(uint8_t des_octave) {
 8011ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  octave = des_octave;
 8011ff2:	4bb9      	ldr	r3, [pc, #740]	; (80122d8 <switchOctave+0x2e8>)
  if (des_octave == 4) {
 8011ff4:	2804      	cmp	r0, #4
  octave = des_octave;
 8011ff6:	7018      	strb	r0, [r3, #0]
  if (des_octave == 4) {
 8011ff8:	f000 8088 	beq.w	801210c <switchOctave+0x11c>
    freq_8_inc = (NOTE_G4 / DAC_FREQ) * max_table_index;
    freq_9_inc = (NOTE_G4S / DAC_FREQ) * max_table_index;
    freq_10_inc = (NOTE_A4 / DAC_FREQ) * max_table_index;
    freq_11_inc = (NOTE_A4S / DAC_FREQ) * max_table_index;
    freq_12_inc = (NOTE_B4 / DAC_FREQ) * max_table_index;
  } else if (des_octave == 5) {
 8011ffc:	2805      	cmp	r0, #5
 8011ffe:	f000 8187 	beq.w	8012310 <switchOctave+0x320>
    freq_8_inc = (NOTE_G5 / DAC_FREQ) * max_table_index;
    freq_9_inc = (NOTE_G5S / DAC_FREQ) * max_table_index;
    freq_10_inc = (NOTE_A5 / DAC_FREQ) * max_table_index;
    freq_11_inc = (NOTE_A5S / DAC_FREQ) * max_table_index;
    freq_12_inc = (NOTE_B5 / DAC_FREQ) * max_table_index;
  } else if (des_octave == 3) {
 8012002:	2803      	cmp	r0, #3
 8012004:	d000      	beq.n	8012008 <switchOctave+0x18>
 8012006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    freq_1_inc = (NOTE_C3 / DAC_FREQ) * max_table_index;
 8012008:	4bb4      	ldr	r3, [pc, #720]	; (80122dc <switchOctave+0x2ec>)
 801200a:	4fb5      	ldr	r7, [pc, #724]	; (80122e0 <switchOctave+0x2f0>)
 801200c:	f9b3 0000 	ldrsh.w	r0, [r3]
    freq_2_inc = (NOTE_C3S / DAC_FREQ) * max_table_index;
 8012010:	4eb4      	ldr	r6, [pc, #720]	; (80122e4 <switchOctave+0x2f4>)
    freq_1_inc = (NOTE_C3 / DAC_FREQ) * max_table_index;
 8012012:	f7ee fa47 	bl	80004a4 <__aeabi_i2d>
 8012016:	a382      	add	r3, pc, #520	; (adr r3, 8012220 <switchOctave+0x230>)
 8012018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801201c:	4604      	mov	r4, r0
 801201e:	460d      	mov	r5, r1
 8012020:	f7ee faa6 	bl	8000570 <__aeabi_dmul>
 8012024:	f7ee fd9c 	bl	8000b60 <__aeabi_d2f>
    freq_2_inc = (NOTE_C3S / DAC_FREQ) * max_table_index;
 8012028:	a37f      	add	r3, pc, #508	; (adr r3, 8012228 <switchOctave+0x238>)
 801202a:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_1_inc = (NOTE_C3 / DAC_FREQ) * max_table_index;
 801202e:	6038      	str	r0, [r7, #0]
    freq_2_inc = (NOTE_C3S / DAC_FREQ) * max_table_index;
 8012030:	4629      	mov	r1, r5
 8012032:	4620      	mov	r0, r4
 8012034:	f7ee fa9c 	bl	8000570 <__aeabi_dmul>
 8012038:	f7ee fd92 	bl	8000b60 <__aeabi_d2f>
    freq_3_inc = (NOTE_D3 / DAC_FREQ) * max_table_index;
 801203c:	a37c      	add	r3, pc, #496	; (adr r3, 8012230 <switchOctave+0x240>)
 801203e:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_2_inc = (NOTE_C3S / DAC_FREQ) * max_table_index;
 8012042:	6030      	str	r0, [r6, #0]
    freq_3_inc = (NOTE_D3 / DAC_FREQ) * max_table_index;
 8012044:	4629      	mov	r1, r5
 8012046:	4620      	mov	r0, r4
 8012048:	f7ee fa92 	bl	8000570 <__aeabi_dmul>
 801204c:	f7ee fd88 	bl	8000b60 <__aeabi_d2f>
 8012050:	4ba5      	ldr	r3, [pc, #660]	; (80122e8 <switchOctave+0x2f8>)
    freq_4_inc = (NOTE_D3S / DAC_FREQ) * max_table_index;
 8012052:	4ea6      	ldr	r6, [pc, #664]	; (80122ec <switchOctave+0x2fc>)
    freq_3_inc = (NOTE_D3 / DAC_FREQ) * max_table_index;
 8012054:	6018      	str	r0, [r3, #0]
    freq_4_inc = (NOTE_D3S / DAC_FREQ) * max_table_index;
 8012056:	4629      	mov	r1, r5
 8012058:	a377      	add	r3, pc, #476	; (adr r3, 8012238 <switchOctave+0x248>)
 801205a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801205e:	4620      	mov	r0, r4
 8012060:	f7ee fa86 	bl	8000570 <__aeabi_dmul>
 8012064:	f7ee fd7c 	bl	8000b60 <__aeabi_d2f>
    freq_5_inc = (NOTE_E3 / DAC_FREQ) * max_table_index;
 8012068:	a375      	add	r3, pc, #468	; (adr r3, 8012240 <switchOctave+0x250>)
 801206a:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_4_inc = (NOTE_D3S / DAC_FREQ) * max_table_index;
 801206e:	6030      	str	r0, [r6, #0]
    freq_5_inc = (NOTE_E3 / DAC_FREQ) * max_table_index;
 8012070:	4629      	mov	r1, r5
 8012072:	4620      	mov	r0, r4
 8012074:	f7ee fa7c 	bl	8000570 <__aeabi_dmul>
 8012078:	f7ee fd72 	bl	8000b60 <__aeabi_d2f>
 801207c:	4b9c      	ldr	r3, [pc, #624]	; (80122f0 <switchOctave+0x300>)
    freq_6_inc = (NOTE_F3 / DAC_FREQ) * max_table_index;
 801207e:	4e9d      	ldr	r6, [pc, #628]	; (80122f4 <switchOctave+0x304>)
    freq_5_inc = (NOTE_E3 / DAC_FREQ) * max_table_index;
 8012080:	6018      	str	r0, [r3, #0]
    freq_6_inc = (NOTE_F3 / DAC_FREQ) * max_table_index;
 8012082:	4629      	mov	r1, r5
 8012084:	a370      	add	r3, pc, #448	; (adr r3, 8012248 <switchOctave+0x258>)
 8012086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801208a:	4620      	mov	r0, r4
 801208c:	f7ee fa70 	bl	8000570 <__aeabi_dmul>
 8012090:	f7ee fd66 	bl	8000b60 <__aeabi_d2f>
    freq_7_inc = (NOTE_F3S / DAC_FREQ) * max_table_index;
 8012094:	a36e      	add	r3, pc, #440	; (adr r3, 8012250 <switchOctave+0x260>)
 8012096:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_6_inc = (NOTE_F3 / DAC_FREQ) * max_table_index;
 801209a:	6030      	str	r0, [r6, #0]
    freq_7_inc = (NOTE_F3S / DAC_FREQ) * max_table_index;
 801209c:	4629      	mov	r1, r5
 801209e:	4620      	mov	r0, r4
 80120a0:	f7ee fa66 	bl	8000570 <__aeabi_dmul>
 80120a4:	f7ee fd5c 	bl	8000b60 <__aeabi_d2f>
 80120a8:	4b93      	ldr	r3, [pc, #588]	; (80122f8 <switchOctave+0x308>)
    freq_8_inc = (NOTE_G3 / DAC_FREQ) * max_table_index;
 80120aa:	4e94      	ldr	r6, [pc, #592]	; (80122fc <switchOctave+0x30c>)
    freq_7_inc = (NOTE_F3S / DAC_FREQ) * max_table_index;
 80120ac:	6018      	str	r0, [r3, #0]
    freq_8_inc = (NOTE_G3 / DAC_FREQ) * max_table_index;
 80120ae:	4629      	mov	r1, r5
 80120b0:	a369      	add	r3, pc, #420	; (adr r3, 8012258 <switchOctave+0x268>)
 80120b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120b6:	4620      	mov	r0, r4
 80120b8:	f7ee fa5a 	bl	8000570 <__aeabi_dmul>
 80120bc:	f7ee fd50 	bl	8000b60 <__aeabi_d2f>
    freq_9_inc = (NOTE_G3S / DAC_FREQ) * max_table_index;
 80120c0:	a367      	add	r3, pc, #412	; (adr r3, 8012260 <switchOctave+0x270>)
 80120c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_8_inc = (NOTE_G3 / DAC_FREQ) * max_table_index;
 80120c6:	6030      	str	r0, [r6, #0]
    freq_9_inc = (NOTE_G3S / DAC_FREQ) * max_table_index;
 80120c8:	4629      	mov	r1, r5
 80120ca:	4620      	mov	r0, r4
 80120cc:	f7ee fa50 	bl	8000570 <__aeabi_dmul>
 80120d0:	f7ee fd46 	bl	8000b60 <__aeabi_d2f>
 80120d4:	4b8a      	ldr	r3, [pc, #552]	; (8012300 <switchOctave+0x310>)
    freq_10_inc = (NOTE_A3 / DAC_FREQ) * max_table_index;
 80120d6:	4f8b      	ldr	r7, [pc, #556]	; (8012304 <switchOctave+0x314>)
    freq_9_inc = (NOTE_G3S / DAC_FREQ) * max_table_index;
 80120d8:	6018      	str	r0, [r3, #0]
 80120da:	4606      	mov	r6, r0
    freq_10_inc = (NOTE_A3 / DAC_FREQ) * max_table_index;
 80120dc:	a362      	add	r3, pc, #392	; (adr r3, 8012268 <switchOctave+0x278>)
 80120de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120e2:	4620      	mov	r0, r4
 80120e4:	4629      	mov	r1, r5
 80120e6:	f7ee fa43 	bl	8000570 <__aeabi_dmul>
 80120ea:	f7ee fd39 	bl	8000b60 <__aeabi_d2f>
    freq_11_inc = (NOTE_A3S / DAC_FREQ) * max_table_index;
 80120ee:	4b86      	ldr	r3, [pc, #536]	; (8012308 <switchOctave+0x318>)
    freq_10_inc = (NOTE_A3 / DAC_FREQ) * max_table_index;
 80120f0:	6038      	str	r0, [r7, #0]
    freq_11_inc = (NOTE_A3S / DAC_FREQ) * max_table_index;
 80120f2:	601e      	str	r6, [r3, #0]
    freq_12_inc = (NOTE_B3 / DAC_FREQ) * max_table_index;
 80120f4:	4620      	mov	r0, r4
 80120f6:	a35e      	add	r3, pc, #376	; (adr r3, 8012270 <switchOctave+0x280>)
 80120f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120fc:	4629      	mov	r1, r5
 80120fe:	f7ee fa37 	bl	8000570 <__aeabi_dmul>
 8012102:	f7ee fd2d 	bl	8000b60 <__aeabi_d2f>
 8012106:	4b81      	ldr	r3, [pc, #516]	; (801230c <switchOctave+0x31c>)
 8012108:	6018      	str	r0, [r3, #0]
 801210a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    freq_1_inc = (NOTE_C4 / DAC_FREQ) * max_table_index;
 801210c:	4b73      	ldr	r3, [pc, #460]	; (80122dc <switchOctave+0x2ec>)
 801210e:	4f74      	ldr	r7, [pc, #464]	; (80122e0 <switchOctave+0x2f0>)
 8012110:	f9b3 0000 	ldrsh.w	r0, [r3]
    freq_2_inc = (NOTE_C4S / DAC_FREQ) * max_table_index;
 8012114:	4e73      	ldr	r6, [pc, #460]	; (80122e4 <switchOctave+0x2f4>)
    freq_1_inc = (NOTE_C4 / DAC_FREQ) * max_table_index;
 8012116:	f7ee f9c5 	bl	80004a4 <__aeabi_i2d>
 801211a:	a357      	add	r3, pc, #348	; (adr r3, 8012278 <switchOctave+0x288>)
 801211c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012120:	4604      	mov	r4, r0
 8012122:	460d      	mov	r5, r1
 8012124:	f7ee fa24 	bl	8000570 <__aeabi_dmul>
 8012128:	f7ee fd1a 	bl	8000b60 <__aeabi_d2f>
    freq_2_inc = (NOTE_C4S / DAC_FREQ) * max_table_index;
 801212c:	a354      	add	r3, pc, #336	; (adr r3, 8012280 <switchOctave+0x290>)
 801212e:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_1_inc = (NOTE_C4 / DAC_FREQ) * max_table_index;
 8012132:	6038      	str	r0, [r7, #0]
    freq_2_inc = (NOTE_C4S / DAC_FREQ) * max_table_index;
 8012134:	4629      	mov	r1, r5
 8012136:	4620      	mov	r0, r4
 8012138:	f7ee fa1a 	bl	8000570 <__aeabi_dmul>
 801213c:	f7ee fd10 	bl	8000b60 <__aeabi_d2f>
    freq_3_inc = (NOTE_D4 / DAC_FREQ) * max_table_index;
 8012140:	a351      	add	r3, pc, #324	; (adr r3, 8012288 <switchOctave+0x298>)
 8012142:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_2_inc = (NOTE_C4S / DAC_FREQ) * max_table_index;
 8012146:	6030      	str	r0, [r6, #0]
    freq_3_inc = (NOTE_D4 / DAC_FREQ) * max_table_index;
 8012148:	4629      	mov	r1, r5
 801214a:	4620      	mov	r0, r4
 801214c:	f7ee fa10 	bl	8000570 <__aeabi_dmul>
 8012150:	f7ee fd06 	bl	8000b60 <__aeabi_d2f>
 8012154:	4b64      	ldr	r3, [pc, #400]	; (80122e8 <switchOctave+0x2f8>)
    freq_4_inc = (NOTE_D4S / DAC_FREQ) * max_table_index;
 8012156:	4e65      	ldr	r6, [pc, #404]	; (80122ec <switchOctave+0x2fc>)
    freq_3_inc = (NOTE_D4 / DAC_FREQ) * max_table_index;
 8012158:	6018      	str	r0, [r3, #0]
    freq_4_inc = (NOTE_D4S / DAC_FREQ) * max_table_index;
 801215a:	4629      	mov	r1, r5
 801215c:	a34c      	add	r3, pc, #304	; (adr r3, 8012290 <switchOctave+0x2a0>)
 801215e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012162:	4620      	mov	r0, r4
 8012164:	f7ee fa04 	bl	8000570 <__aeabi_dmul>
 8012168:	f7ee fcfa 	bl	8000b60 <__aeabi_d2f>
    freq_5_inc = (NOTE_E4 / DAC_FREQ) * max_table_index;
 801216c:	a34a      	add	r3, pc, #296	; (adr r3, 8012298 <switchOctave+0x2a8>)
 801216e:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_4_inc = (NOTE_D4S / DAC_FREQ) * max_table_index;
 8012172:	6030      	str	r0, [r6, #0]
    freq_5_inc = (NOTE_E4 / DAC_FREQ) * max_table_index;
 8012174:	4629      	mov	r1, r5
 8012176:	4620      	mov	r0, r4
 8012178:	f7ee f9fa 	bl	8000570 <__aeabi_dmul>
 801217c:	f7ee fcf0 	bl	8000b60 <__aeabi_d2f>
 8012180:	4b5b      	ldr	r3, [pc, #364]	; (80122f0 <switchOctave+0x300>)
    freq_6_inc = (NOTE_F4 / DAC_FREQ) * max_table_index;
 8012182:	4e5c      	ldr	r6, [pc, #368]	; (80122f4 <switchOctave+0x304>)
    freq_5_inc = (NOTE_E4 / DAC_FREQ) * max_table_index;
 8012184:	6018      	str	r0, [r3, #0]
    freq_6_inc = (NOTE_F4 / DAC_FREQ) * max_table_index;
 8012186:	4629      	mov	r1, r5
 8012188:	a345      	add	r3, pc, #276	; (adr r3, 80122a0 <switchOctave+0x2b0>)
 801218a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801218e:	4620      	mov	r0, r4
 8012190:	f7ee f9ee 	bl	8000570 <__aeabi_dmul>
 8012194:	f7ee fce4 	bl	8000b60 <__aeabi_d2f>
    freq_7_inc = (NOTE_F4S / DAC_FREQ) * max_table_index;
 8012198:	a343      	add	r3, pc, #268	; (adr r3, 80122a8 <switchOctave+0x2b8>)
 801219a:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_6_inc = (NOTE_F4 / DAC_FREQ) * max_table_index;
 801219e:	6030      	str	r0, [r6, #0]
    freq_7_inc = (NOTE_F4S / DAC_FREQ) * max_table_index;
 80121a0:	4629      	mov	r1, r5
 80121a2:	4620      	mov	r0, r4
 80121a4:	f7ee f9e4 	bl	8000570 <__aeabi_dmul>
 80121a8:	f7ee fcda 	bl	8000b60 <__aeabi_d2f>
 80121ac:	4b52      	ldr	r3, [pc, #328]	; (80122f8 <switchOctave+0x308>)
    freq_8_inc = (NOTE_G4 / DAC_FREQ) * max_table_index;
 80121ae:	4e53      	ldr	r6, [pc, #332]	; (80122fc <switchOctave+0x30c>)
    freq_7_inc = (NOTE_F4S / DAC_FREQ) * max_table_index;
 80121b0:	6018      	str	r0, [r3, #0]
    freq_8_inc = (NOTE_G4 / DAC_FREQ) * max_table_index;
 80121b2:	4629      	mov	r1, r5
 80121b4:	a33e      	add	r3, pc, #248	; (adr r3, 80122b0 <switchOctave+0x2c0>)
 80121b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ba:	4620      	mov	r0, r4
 80121bc:	f7ee f9d8 	bl	8000570 <__aeabi_dmul>
 80121c0:	f7ee fcce 	bl	8000b60 <__aeabi_d2f>
    freq_9_inc = (NOTE_G4S / DAC_FREQ) * max_table_index;
 80121c4:	a33c      	add	r3, pc, #240	; (adr r3, 80122b8 <switchOctave+0x2c8>)
 80121c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_8_inc = (NOTE_G4 / DAC_FREQ) * max_table_index;
 80121ca:	6030      	str	r0, [r6, #0]
    freq_9_inc = (NOTE_G4S / DAC_FREQ) * max_table_index;
 80121cc:	4629      	mov	r1, r5
 80121ce:	4620      	mov	r0, r4
 80121d0:	f7ee f9ce 	bl	8000570 <__aeabi_dmul>
 80121d4:	f7ee fcc4 	bl	8000b60 <__aeabi_d2f>
 80121d8:	4b49      	ldr	r3, [pc, #292]	; (8012300 <switchOctave+0x310>)
    freq_10_inc = (NOTE_A4 / DAC_FREQ) * max_table_index;
 80121da:	4e4a      	ldr	r6, [pc, #296]	; (8012304 <switchOctave+0x314>)
    freq_9_inc = (NOTE_G4S / DAC_FREQ) * max_table_index;
 80121dc:	6018      	str	r0, [r3, #0]
    freq_10_inc = (NOTE_A4 / DAC_FREQ) * max_table_index;
 80121de:	4629      	mov	r1, r5
 80121e0:	a337      	add	r3, pc, #220	; (adr r3, 80122c0 <switchOctave+0x2d0>)
 80121e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121e6:	4620      	mov	r0, r4
 80121e8:	f7ee f9c2 	bl	8000570 <__aeabi_dmul>
 80121ec:	f7ee fcb8 	bl	8000b60 <__aeabi_d2f>
    freq_11_inc = (NOTE_A4S / DAC_FREQ) * max_table_index;
 80121f0:	a335      	add	r3, pc, #212	; (adr r3, 80122c8 <switchOctave+0x2d8>)
 80121f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_10_inc = (NOTE_A4 / DAC_FREQ) * max_table_index;
 80121f6:	6030      	str	r0, [r6, #0]
    freq_11_inc = (NOTE_A4S / DAC_FREQ) * max_table_index;
 80121f8:	4629      	mov	r1, r5
 80121fa:	4620      	mov	r0, r4
 80121fc:	f7ee f9b8 	bl	8000570 <__aeabi_dmul>
 8012200:	f7ee fcae 	bl	8000b60 <__aeabi_d2f>
 8012204:	4b40      	ldr	r3, [pc, #256]	; (8012308 <switchOctave+0x318>)
    freq_12_inc = (NOTE_B4 / DAC_FREQ) * max_table_index;
 8012206:	4e41      	ldr	r6, [pc, #260]	; (801230c <switchOctave+0x31c>)
    freq_11_inc = (NOTE_A4S / DAC_FREQ) * max_table_index;
 8012208:	6018      	str	r0, [r3, #0]
    freq_12_inc = (NOTE_B4 / DAC_FREQ) * max_table_index;
 801220a:	a331      	add	r3, pc, #196	; (adr r3, 80122d0 <switchOctave+0x2e0>)
 801220c:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_12_inc = (NOTE_B5 / DAC_FREQ) * max_table_index;
 8012210:	4620      	mov	r0, r4
 8012212:	4629      	mov	r1, r5
 8012214:	f7ee f9ac 	bl	8000570 <__aeabi_dmul>
 8012218:	f7ee fca2 	bl	8000b60 <__aeabi_d2f>
 801221c:	6030      	str	r0, [r6, #0]
 801221e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012220:	5d8368d5 	.word	0x5d8368d5
 8012224:	3f6aca5e 	.word	0x3f6aca5e
 8012228:	ea041539 	.word	0xea041539
 801222c:	3f6c6228 	.word	0x3f6c6228
 8012230:	be67af3b 	.word	0xbe67af3b
 8012234:	3f6e1239 	.word	0x3f6e1239
 8012238:	3df95fd2 	.word	0x3df95fd2
 801223c:	3f6fdbfb 	.word	0x3f6fdbfb
 8012240:	07f81c06 	.word	0x07f81c06
 8012244:	3f70e080 	.word	0x3f70e080
 8012248:	b7c4fdcc 	.word	0xb7c4fdcc
 801224c:	3f71e166 	.word	0x3f71e166
 8012250:	d9f1787e 	.word	0xd9f1787e
 8012254:	3f72f195 	.word	0x3f72f195
 8012258:	50085610 	.word	0x50085610
 801225c:	3f7411f8 	.word	0x3f7411f8
 8012260:	fb946074 	.word	0xfb946074
 8012264:	3f754378 	.word	0x3f754378
 8012268:	020c49ba 	.word	0x020c49ba
 801226c:	3f76872b 	.word	0x3f76872b
 8012270:	b59a8120 	.word	0xb59a8120
 8012274:	3f79496f 	.word	0x3f79496f
 8012278:	5d8368d5 	.word	0x5d8368d5
 801227c:	3f7aca5e 	.word	0x3f7aca5e
 8012280:	a000bbe7 	.word	0xa000bbe7
 8012284:	3f7c622f 	.word	0x3f7c622f
 8012288:	746455ec 	.word	0x746455ec
 801228c:	3f7e1240 	.word	0x3f7e1240
 8012290:	f3f60682 	.word	0xf3f60682
 8012294:	3f7fdc01 	.word	0x3f7fdc01
 8012298:	07f81c06 	.word	0x07f81c06
 801229c:	3f80e080 	.word	0x3f80e080
 80122a0:	b7c4fdcc 	.word	0xb7c4fdcc
 80122a4:	3f81e166 	.word	0x3f81e166
 80122a8:	d9f1787e 	.word	0xd9f1787e
 80122ac:	3f82f195 	.word	0x3f82f195
 80122b0:	f50a02b8 	.word	0xf50a02b8
 80122b4:	3f8411f4 	.word	0x3f8411f4
 80122b8:	5692b3cc 	.word	0x5692b3cc
 80122bc:	3f85437c 	.word	0x3f85437c
 80122c0:	020c49ba 	.word	0x020c49ba
 80122c4:	3f86872b 	.word	0x3f86872b
 80122c8:	d2ea1d3f 	.word	0xd2ea1d3f
 80122cc:	3f87de1a 	.word	0x3f87de1a
 80122d0:	5a9c2dc8 	.word	0x5a9c2dc8
 80122d4:	3f89496c 	.word	0x3f89496c
 80122d8:	20000050 	.word	0x20000050
 80122dc:	2000004e 	.word	0x2000004e
 80122e0:	20005e94 	.word	0x20005e94
 80122e4:	20007acc 	.word	0x20007acc
 80122e8:	20006aa4 	.word	0x20006aa4
 80122ec:	200076b4 	.word	0x200076b4
 80122f0:	200076b0 	.word	0x200076b0
 80122f4:	200072a8 	.word	0x200072a8
 80122f8:	20006a9c 	.word	0x20006a9c
 80122fc:	200086e4 	.word	0x200086e4
 8012300:	200072ac 	.word	0x200072ac
 8012304:	200082d8 	.word	0x200082d8
 8012308:	200076c0 	.word	0x200076c0
 801230c:	20007ed4 	.word	0x20007ed4
    freq_1_inc = (NOTE_C5 / DAC_FREQ) * max_table_index;
 8012310:	4b59      	ldr	r3, [pc, #356]	; (8012478 <switchOctave+0x488>)
 8012312:	4f5a      	ldr	r7, [pc, #360]	; (801247c <switchOctave+0x48c>)
 8012314:	f9b3 0000 	ldrsh.w	r0, [r3]
    freq_2_inc = (NOTE_C5S / DAC_FREQ) * max_table_index;
 8012318:	4e59      	ldr	r6, [pc, #356]	; (8012480 <switchOctave+0x490>)
    freq_1_inc = (NOTE_C5 / DAC_FREQ) * max_table_index;
 801231a:	f7ee f8c3 	bl	80004a4 <__aeabi_i2d>
 801231e:	a33e      	add	r3, pc, #248	; (adr r3, 8012418 <switchOctave+0x428>)
 8012320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012324:	4604      	mov	r4, r0
 8012326:	460d      	mov	r5, r1
 8012328:	f7ee f922 	bl	8000570 <__aeabi_dmul>
 801232c:	f7ee fc18 	bl	8000b60 <__aeabi_d2f>
    freq_2_inc = (NOTE_C5S / DAC_FREQ) * max_table_index;
 8012330:	a33b      	add	r3, pc, #236	; (adr r3, 8012420 <switchOctave+0x430>)
 8012332:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_1_inc = (NOTE_C5 / DAC_FREQ) * max_table_index;
 8012336:	6038      	str	r0, [r7, #0]
    freq_2_inc = (NOTE_C5S / DAC_FREQ) * max_table_index;
 8012338:	4629      	mov	r1, r5
 801233a:	4620      	mov	r0, r4
 801233c:	f7ee f918 	bl	8000570 <__aeabi_dmul>
 8012340:	f7ee fc0e 	bl	8000b60 <__aeabi_d2f>
    freq_3_inc = (NOTE_D5 / DAC_FREQ) * max_table_index;
 8012344:	a338      	add	r3, pc, #224	; (adr r3, 8012428 <switchOctave+0x438>)
 8012346:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_2_inc = (NOTE_C5S / DAC_FREQ) * max_table_index;
 801234a:	6030      	str	r0, [r6, #0]
    freq_3_inc = (NOTE_D5 / DAC_FREQ) * max_table_index;
 801234c:	4629      	mov	r1, r5
 801234e:	4620      	mov	r0, r4
 8012350:	f7ee f90e 	bl	8000570 <__aeabi_dmul>
 8012354:	f7ee fc04 	bl	8000b60 <__aeabi_d2f>
 8012358:	4b4a      	ldr	r3, [pc, #296]	; (8012484 <switchOctave+0x494>)
    freq_4_inc = (NOTE_D5S / DAC_FREQ) * max_table_index;
 801235a:	4e4b      	ldr	r6, [pc, #300]	; (8012488 <switchOctave+0x498>)
    freq_3_inc = (NOTE_D5 / DAC_FREQ) * max_table_index;
 801235c:	6018      	str	r0, [r3, #0]
    freq_4_inc = (NOTE_D5S / DAC_FREQ) * max_table_index;
 801235e:	4629      	mov	r1, r5
 8012360:	a333      	add	r3, pc, #204	; (adr r3, 8012430 <switchOctave+0x440>)
 8012362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012366:	4620      	mov	r0, r4
 8012368:	f7ee f902 	bl	8000570 <__aeabi_dmul>
 801236c:	f7ee fbf8 	bl	8000b60 <__aeabi_d2f>
    freq_5_inc = (NOTE_E5 / DAC_FREQ) * max_table_index;
 8012370:	a331      	add	r3, pc, #196	; (adr r3, 8012438 <switchOctave+0x448>)
 8012372:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_4_inc = (NOTE_D5S / DAC_FREQ) * max_table_index;
 8012376:	6030      	str	r0, [r6, #0]
    freq_5_inc = (NOTE_E5 / DAC_FREQ) * max_table_index;
 8012378:	4629      	mov	r1, r5
 801237a:	4620      	mov	r0, r4
 801237c:	f7ee f8f8 	bl	8000570 <__aeabi_dmul>
 8012380:	f7ee fbee 	bl	8000b60 <__aeabi_d2f>
 8012384:	4b41      	ldr	r3, [pc, #260]	; (801248c <switchOctave+0x49c>)
    freq_6_inc = (NOTE_F5 / DAC_FREQ) * max_table_index;
 8012386:	4e42      	ldr	r6, [pc, #264]	; (8012490 <switchOctave+0x4a0>)
    freq_5_inc = (NOTE_E5 / DAC_FREQ) * max_table_index;
 8012388:	6018      	str	r0, [r3, #0]
    freq_6_inc = (NOTE_F5 / DAC_FREQ) * max_table_index;
 801238a:	4629      	mov	r1, r5
 801238c:	a32c      	add	r3, pc, #176	; (adr r3, 8012440 <switchOctave+0x450>)
 801238e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012392:	4620      	mov	r0, r4
 8012394:	f7ee f8ec 	bl	8000570 <__aeabi_dmul>
 8012398:	f7ee fbe2 	bl	8000b60 <__aeabi_d2f>
    freq_7_inc = (NOTE_F5S / DAC_FREQ) * max_table_index;
 801239c:	a32a      	add	r3, pc, #168	; (adr r3, 8012448 <switchOctave+0x458>)
 801239e:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_6_inc = (NOTE_F5 / DAC_FREQ) * max_table_index;
 80123a2:	6030      	str	r0, [r6, #0]
    freq_7_inc = (NOTE_F5S / DAC_FREQ) * max_table_index;
 80123a4:	4629      	mov	r1, r5
 80123a6:	4620      	mov	r0, r4
 80123a8:	f7ee f8e2 	bl	8000570 <__aeabi_dmul>
 80123ac:	f7ee fbd8 	bl	8000b60 <__aeabi_d2f>
 80123b0:	4b38      	ldr	r3, [pc, #224]	; (8012494 <switchOctave+0x4a4>)
    freq_8_inc = (NOTE_G5 / DAC_FREQ) * max_table_index;
 80123b2:	4e39      	ldr	r6, [pc, #228]	; (8012498 <switchOctave+0x4a8>)
    freq_7_inc = (NOTE_F5S / DAC_FREQ) * max_table_index;
 80123b4:	6018      	str	r0, [r3, #0]
    freq_8_inc = (NOTE_G5 / DAC_FREQ) * max_table_index;
 80123b6:	4629      	mov	r1, r5
 80123b8:	a325      	add	r3, pc, #148	; (adr r3, 8012450 <switchOctave+0x460>)
 80123ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123be:	4620      	mov	r0, r4
 80123c0:	f7ee f8d6 	bl	8000570 <__aeabi_dmul>
 80123c4:	f7ee fbcc 	bl	8000b60 <__aeabi_d2f>
    freq_9_inc = (NOTE_G5S / DAC_FREQ) * max_table_index;
 80123c8:	a323      	add	r3, pc, #140	; (adr r3, 8012458 <switchOctave+0x468>)
 80123ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_8_inc = (NOTE_G5 / DAC_FREQ) * max_table_index;
 80123ce:	6030      	str	r0, [r6, #0]
    freq_9_inc = (NOTE_G5S / DAC_FREQ) * max_table_index;
 80123d0:	4629      	mov	r1, r5
 80123d2:	4620      	mov	r0, r4
 80123d4:	f7ee f8cc 	bl	8000570 <__aeabi_dmul>
 80123d8:	f7ee fbc2 	bl	8000b60 <__aeabi_d2f>
 80123dc:	4b2f      	ldr	r3, [pc, #188]	; (801249c <switchOctave+0x4ac>)
    freq_10_inc = (NOTE_A5 / DAC_FREQ) * max_table_index;
 80123de:	4e30      	ldr	r6, [pc, #192]	; (80124a0 <switchOctave+0x4b0>)
    freq_9_inc = (NOTE_G5S / DAC_FREQ) * max_table_index;
 80123e0:	6018      	str	r0, [r3, #0]
    freq_10_inc = (NOTE_A5 / DAC_FREQ) * max_table_index;
 80123e2:	4629      	mov	r1, r5
 80123e4:	a31e      	add	r3, pc, #120	; (adr r3, 8012460 <switchOctave+0x470>)
 80123e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ea:	4620      	mov	r0, r4
 80123ec:	f7ee f8c0 	bl	8000570 <__aeabi_dmul>
 80123f0:	f7ee fbb6 	bl	8000b60 <__aeabi_d2f>
    freq_11_inc = (NOTE_A5S / DAC_FREQ) * max_table_index;
 80123f4:	a31c      	add	r3, pc, #112	; (adr r3, 8012468 <switchOctave+0x478>)
 80123f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_10_inc = (NOTE_A5 / DAC_FREQ) * max_table_index;
 80123fa:	6030      	str	r0, [r6, #0]
    freq_11_inc = (NOTE_A5S / DAC_FREQ) * max_table_index;
 80123fc:	4629      	mov	r1, r5
 80123fe:	4620      	mov	r0, r4
 8012400:	f7ee f8b6 	bl	8000570 <__aeabi_dmul>
 8012404:	f7ee fbac 	bl	8000b60 <__aeabi_d2f>
 8012408:	4b26      	ldr	r3, [pc, #152]	; (80124a4 <switchOctave+0x4b4>)
    freq_12_inc = (NOTE_B5 / DAC_FREQ) * max_table_index;
 801240a:	4e27      	ldr	r6, [pc, #156]	; (80124a8 <switchOctave+0x4b8>)
    freq_11_inc = (NOTE_A5S / DAC_FREQ) * max_table_index;
 801240c:	6018      	str	r0, [r3, #0]
    freq_12_inc = (NOTE_B5 / DAC_FREQ) * max_table_index;
 801240e:	a318      	add	r3, pc, #96	; (adr r3, 8012470 <switchOctave+0x480>)
 8012410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012414:	e6fc      	b.n	8012210 <switchOctave+0x220>
 8012416:	bf00      	nop
 8012418:	0285157e 	.word	0x0285157e
 801241c:	3f8aca5b 	.word	0x3f8aca5b
 8012420:	45026890 	.word	0x45026890
 8012424:	3f8c622c 	.word	0x3f8c622c
 8012428:	746455ec 	.word	0x746455ec
 801242c:	3f8e1240 	.word	0x3f8e1240
 8012430:	f3f60682 	.word	0xf3f60682
 8012434:	3f8fdc01 	.word	0x3f8fdc01
 8012438:	5a78f25a 	.word	0x5a78f25a
 801243c:	3f90e07e 	.word	0x3f90e07e
 8012440:	b7c4fdcc 	.word	0xb7c4fdcc
 8012444:	3f91e166 	.word	0x3f91e166
 8012448:	8770a22a 	.word	0x8770a22a
 801244c:	3f92f197 	.word	0x3f92f197
 8012450:	a2892c64 	.word	0xa2892c64
 8012454:	3f9411f6 	.word	0x3f9411f6
 8012458:	a9138a21 	.word	0xa9138a21
 801245c:	3f95437a 	.word	0x3f95437a
 8012460:	020c49ba 	.word	0x020c49ba
 8012464:	3f96872b 	.word	0x3f96872b
 8012468:	d2ea1d3f 	.word	0xd2ea1d3f
 801246c:	3f97de1a 	.word	0x3f97de1a
 8012470:	081b5775 	.word	0x081b5775
 8012474:	3f99496e 	.word	0x3f99496e
 8012478:	2000004e 	.word	0x2000004e
 801247c:	20005e94 	.word	0x20005e94
 8012480:	20007acc 	.word	0x20007acc
 8012484:	20006aa4 	.word	0x20006aa4
 8012488:	200076b4 	.word	0x200076b4
 801248c:	200076b0 	.word	0x200076b0
 8012490:	200072a8 	.word	0x200072a8
 8012494:	20006a9c 	.word	0x20006a9c
 8012498:	200086e4 	.word	0x200086e4
 801249c:	200072ac 	.word	0x200072ac
 80124a0:	200082d8 	.word	0x200082d8
 80124a4:	200076c0 	.word	0x200076c0
 80124a8:	20007ed4 	.word	0x20007ed4

080124ac <setTable>:
  switch (table) {
 80124ac:	3851      	subs	r0, #81	; 0x51
  switchOctave(octave);
 80124ae:	491d      	ldr	r1, [pc, #116]	; (8012524 <setTable+0x78>)
  switch (table) {
 80124b0:	2806      	cmp	r0, #6
 80124b2:	d805      	bhi.n	80124c0 <setTable+0x14>
 80124b4:	e8df f000 	tbb	[pc, r0]
 80124b8:	0e042218 	.word	0x0e042218
 80124bc:	0404      	.short	0x0404
 80124be:	2c          	.byte	0x2c
 80124bf:	00          	.byte	0x00
  waveTable = desired_table;
 80124c0:	4a19      	ldr	r2, [pc, #100]	; (8012528 <setTable+0x7c>)
  max_table_index = size;
 80124c2:	4b1a      	ldr	r3, [pc, #104]	; (801252c <setTable+0x80>)
  switchOctave(octave);
 80124c4:	7808      	ldrb	r0, [r1, #0]
  waveTable = desired_table;
 80124c6:	491a      	ldr	r1, [pc, #104]	; (8012530 <setTable+0x84>)
 80124c8:	6011      	str	r1, [r2, #0]
  max_table_index = size;
 80124ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80124ce:	801a      	strh	r2, [r3, #0]
  switchOctave(octave);
 80124d0:	f7ff bd8e 	b.w	8011ff0 <switchOctave>
  waveTable = desired_table;
 80124d4:	4a14      	ldr	r2, [pc, #80]	; (8012528 <setTable+0x7c>)
  max_table_index = size;
 80124d6:	4b15      	ldr	r3, [pc, #84]	; (801252c <setTable+0x80>)
  switchOctave(octave);
 80124d8:	7808      	ldrb	r0, [r1, #0]
  waveTable = desired_table;
 80124da:	4916      	ldr	r1, [pc, #88]	; (8012534 <setTable+0x88>)
 80124dc:	6011      	str	r1, [r2, #0]
  max_table_index = size;
 80124de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80124e2:	801a      	strh	r2, [r3, #0]
  switchOctave(octave);
 80124e4:	f7ff bd84 	b.w	8011ff0 <switchOctave>
  waveTable = desired_table;
 80124e8:	4a0f      	ldr	r2, [pc, #60]	; (8012528 <setTable+0x7c>)
  max_table_index = size;
 80124ea:	4b10      	ldr	r3, [pc, #64]	; (801252c <setTable+0x80>)
  switchOctave(octave);
 80124ec:	7808      	ldrb	r0, [r1, #0]
  waveTable = desired_table;
 80124ee:	4912      	ldr	r1, [pc, #72]	; (8012538 <setTable+0x8c>)
 80124f0:	6011      	str	r1, [r2, #0]
  max_table_index = size;
 80124f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80124f6:	801a      	strh	r2, [r3, #0]
  switchOctave(octave);
 80124f8:	f7ff bd7a 	b.w	8011ff0 <switchOctave>
  waveTable = desired_table;
 80124fc:	4a0a      	ldr	r2, [pc, #40]	; (8012528 <setTable+0x7c>)
  max_table_index = size;
 80124fe:	4b0b      	ldr	r3, [pc, #44]	; (801252c <setTable+0x80>)
  switchOctave(octave);
 8012500:	7808      	ldrb	r0, [r1, #0]
  waveTable = desired_table;
 8012502:	490e      	ldr	r1, [pc, #56]	; (801253c <setTable+0x90>)
 8012504:	6011      	str	r1, [r2, #0]
  max_table_index = size;
 8012506:	f44f 7280 	mov.w	r2, #256	; 0x100
 801250a:	801a      	strh	r2, [r3, #0]
  switchOctave(octave);
 801250c:	f7ff bd70 	b.w	8011ff0 <switchOctave>
  waveTable = desired_table;
 8012510:	4a05      	ldr	r2, [pc, #20]	; (8012528 <setTable+0x7c>)
  max_table_index = size;
 8012512:	4b06      	ldr	r3, [pc, #24]	; (801252c <setTable+0x80>)
  switchOctave(octave);
 8012514:	7808      	ldrb	r0, [r1, #0]
  waveTable = desired_table;
 8012516:	490a      	ldr	r1, [pc, #40]	; (8012540 <setTable+0x94>)
 8012518:	6011      	str	r1, [r2, #0]
  max_table_index = size;
 801251a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801251e:	801a      	strh	r2, [r3, #0]
  switchOctave(octave);
 8012520:	f7ff bd66 	b.w	8011ff0 <switchOctave>
 8012524:	20000050 	.word	0x20000050
 8012528:	200086dc 	.word	0x200086dc
 801252c:	2000004e 	.word	0x2000004e
 8012530:	08016798 	.word	0x08016798
 8012534:	08016b98 	.word	0x08016b98
 8012538:	08016998 	.word	0x08016998
 801253c:	08016398 	.word	0x08016398
 8012540:	08016598 	.word	0x08016598

08012544 <prepBuffer>:
void prepBuffer(DAC_HandleTypeDef* hdac) {
 8012544:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (temp_2) {
 8012546:	4baf      	ldr	r3, [pc, #700]	; (8012804 <prepBuffer+0x2c0>)
 8012548:	781a      	ldrb	r2, [r3, #0]
void prepBuffer(DAC_HandleTypeDef* hdac) {
 801254a:	b083      	sub	sp, #12
 801254c:	4605      	mov	r5, r0
  if (temp_2) {
 801254e:	2a00      	cmp	r2, #0
 8012550:	d147      	bne.n	80125e2 <prepBuffer+0x9e>
  if (buff_toggle == 0) {
 8012552:	4fad      	ldr	r7, [pc, #692]	; (8012808 <prepBuffer+0x2c4>)
 8012554:	783c      	ldrb	r4, [r7, #0]
  HAL_GPIO_TogglePin(LED_LAT_GPIO_Port, LED_LAT_Pin);
 8012556:	2104      	movs	r1, #4
 8012558:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  if (buff_toggle == 0) {
 801255c:	2c00      	cmp	r4, #0
 801255e:	d072      	beq.n	8012646 <prepBuffer+0x102>
  } else if (buff_toggle == 1) {
 8012560:	2c01      	cmp	r4, #1
 8012562:	f000 80bc 	beq.w	80126de <prepBuffer+0x19a>
  HAL_DAC_Start_DMA(hdac, DAC_CHANNEL_1, (uint32_t*)buffer, 512,
 8012566:	2400      	movs	r4, #0
 8012568:	4ea8      	ldr	r6, [pc, #672]	; (801280c <prepBuffer+0x2c8>)
  HAL_GPIO_TogglePin(LED_LAT_GPIO_Port, LED_LAT_Pin);
 801256a:	f7ef fdf9 	bl	8002160 <HAL_GPIO_TogglePin>
  HAL_DAC_Start_DMA(hdac, DAC_CHANNEL_1, (uint32_t*)buffer, 512,
 801256e:	4aa8      	ldr	r2, [pc, #672]	; (8012810 <prepBuffer+0x2cc>)
 8012570:	9400      	str	r4, [sp, #0]
 8012572:	4628      	mov	r0, r5
 8012574:	4621      	mov	r1, r4
 8012576:	f44f 7300 	mov.w	r3, #512	; 0x200
 801257a:	f7ef f9bf 	bl	80018fc <HAL_DAC_Start_DMA>
 801257e:	f3c6 0240 	ubfx	r2, r6, #1, #1
    buff_toggle = 0;
 8012582:	703c      	strb	r4, [r7, #0]
 8012584:	2a00      	cmp	r2, #0
 8012586:	f000 80f4 	beq.w	8012772 <prepBuffer+0x22e>
    buffer[i] = BUFFER_OFFSET;
 801258a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801258e:	8033      	strh	r3, [r6, #0]
 8012590:	f44f 75ff 	mov.w	r5, #510	; 0x1fe
 8012594:	21ff      	movs	r1, #255	; 0xff
 8012596:	f240 17ff 	movw	r7, #511	; 0x1ff
  for (int i = 0; i < BUFFER_SIZE; i++) {
 801259a:	2401      	movs	r4, #1
 801259c:	eb06 0242 	add.w	r2, r6, r2, lsl #1
 80125a0:	2300      	movs	r3, #0
    buffer[i] = BUFFER_OFFSET;
 80125a2:	f04f 2002 	mov.w	r0, #33554944	; 0x2000200
 80125a6:	3301      	adds	r3, #1
 80125a8:	428b      	cmp	r3, r1
 80125aa:	f842 0b04 	str.w	r0, [r2], #4
 80125ae:	d3fa      	bcc.n	80125a6 <prepBuffer+0x62>
 80125b0:	42bd      	cmp	r5, r7
 80125b2:	442c      	add	r4, r5
 80125b4:	bf1c      	itt	ne
 80125b6:	f44f 7300 	movne.w	r3, #512	; 0x200
 80125ba:	f826 3014 	strhne.w	r3, [r6, r4, lsl #1]
  if (lidarModeActive) {
 80125be:	4b95      	ldr	r3, [pc, #596]	; (8012814 <prepBuffer+0x2d0>)
 80125c0:	781b      	ldrb	r3, [r3, #0]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	f040 80f0 	bne.w	80127a8 <prepBuffer+0x264>
  } else if (capModeActive) {
 80125c8:	4b93      	ldr	r3, [pc, #588]	; (8012818 <prepBuffer+0x2d4>)
 80125ca:	781b      	ldrb	r3, [r3, #0]
 80125cc:	b113      	cbz	r3, 80125d4 <prepBuffer+0x90>
 80125ce:	488f      	ldr	r0, [pc, #572]	; (801280c <prepBuffer+0x2c8>)
 80125d0:	f7ff fc4e 	bl	8011e70 <fillBuffer.part.0>
    if (IIR_filter_active == 1) {
 80125d4:	4b91      	ldr	r3, [pc, #580]	; (801281c <prepBuffer+0x2d8>)
 80125d6:	781b      	ldrb	r3, [r3, #0]
 80125d8:	2b01      	cmp	r3, #1
 80125da:	f000 80ef 	beq.w	80127bc <prepBuffer+0x278>
}
 80125de:	b003      	add	sp, #12
 80125e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  waveTable = desired_table;
 80125e2:	4a8f      	ldr	r2, [pc, #572]	; (8012820 <prepBuffer+0x2dc>)
  switchOctave(octave);
 80125e4:	488f      	ldr	r0, [pc, #572]	; (8012824 <prepBuffer+0x2e0>)
  max_table_index = size;
 80125e6:	4990      	ldr	r1, [pc, #576]	; (8012828 <prepBuffer+0x2e4>)
  waveTable = desired_table;
 80125e8:	4c90      	ldr	r4, [pc, #576]	; (801282c <prepBuffer+0x2e8>)
 80125ea:	4e88      	ldr	r6, [pc, #544]	; (801280c <prepBuffer+0x2c8>)
 80125ec:	6014      	str	r4, [r2, #0]
  switchOctave(octave);
 80125ee:	7800      	ldrb	r0, [r0, #0]
    temp_2 = 0;
 80125f0:	2200      	movs	r2, #0
  max_table_index = size;
 80125f2:	f44f 7480 	mov.w	r4, #256	; 0x100
    temp_2 = 0;
 80125f6:	701a      	strb	r2, [r3, #0]
  max_table_index = size;
 80125f8:	800c      	strh	r4, [r1, #0]
  switchOctave(octave);
 80125fa:	f7ff fcf9 	bl	8011ff0 <switchOctave>
 80125fe:	f3c6 0240 	ubfx	r2, r6, #1, #1
 8012602:	2a00      	cmp	r2, #0
 8012604:	f000 80c3 	beq.w	801278e <prepBuffer+0x24a>
    buffer[i] = BUFFER_OFFSET;
 8012608:	f44f 7300 	mov.w	r3, #512	; 0x200
 801260c:	8033      	strh	r3, [r6, #0]
 801260e:	f44f 77ff 	mov.w	r7, #510	; 0x1fe
 8012612:	21ff      	movs	r1, #255	; 0xff
 8012614:	f240 1eff 	movw	lr, #511	; 0x1ff
  for (int i = 0; i < BUFFER_SIZE; i++) {
 8012618:	2401      	movs	r4, #1
 801261a:	eb06 0242 	add.w	r2, r6, r2, lsl #1
 801261e:	2300      	movs	r3, #0
    buffer[i] = BUFFER_OFFSET;
 8012620:	f04f 2002 	mov.w	r0, #33554944	; 0x2000200
 8012624:	3301      	adds	r3, #1
 8012626:	4299      	cmp	r1, r3
 8012628:	f842 0b04 	str.w	r0, [r2], #4
 801262c:	d8fa      	bhi.n	8012624 <prepBuffer+0xe0>
 801262e:	4577      	cmp	r7, lr
 8012630:	443c      	add	r4, r7
 8012632:	bf1c      	itt	ne
 8012634:	f44f 7300 	movne.w	r3, #512	; 0x200
 8012638:	f826 3014 	strhne.w	r3, [r6, r4, lsl #1]
    setCutoffFreq(.9);
 801263c:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8012830 <prepBuffer+0x2ec>
 8012640:	f7fc fb66 	bl	800ed10 <setCutoffFreq>
 8012644:	e785      	b.n	8012552 <prepBuffer+0xe>
  HAL_GPIO_TogglePin(LED_LAT_GPIO_Port, LED_LAT_Pin);
 8012646:	f7ef fd8b 	bl	8002160 <HAL_GPIO_TogglePin>
  HAL_DAC_Start_DMA(hdac, DAC_CHANNEL_1, (uint32_t*)buffer, 512,
 801264a:	4628      	mov	r0, r5
 801264c:	4d79      	ldr	r5, [pc, #484]	; (8012834 <prepBuffer+0x2f0>)
 801264e:	4a6f      	ldr	r2, [pc, #444]	; (801280c <prepBuffer+0x2c8>)
 8012650:	9400      	str	r4, [sp, #0]
 8012652:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012656:	4621      	mov	r1, r4
 8012658:	f7ef f950 	bl	80018fc <HAL_DAC_Start_DMA>
    buff_toggle = 1;
 801265c:	2301      	movs	r3, #1
 801265e:	f3c5 0240 	ubfx	r2, r5, #1, #1
 8012662:	703b      	strb	r3, [r7, #0]
 8012664:	2a00      	cmp	r2, #0
 8012666:	f000 808b 	beq.w	8012780 <prepBuffer+0x23c>
    buffer[i] = BUFFER_OFFSET;
 801266a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801266e:	8029      	strh	r1, [r5, #0]
  for (int i = 0; i < BUFFER_SIZE; i++) {
 8012670:	461c      	mov	r4, r3
    buffer[i] = BUFFER_OFFSET;
 8012672:	f44f 76ff 	mov.w	r6, #510	; 0x1fe
 8012676:	21ff      	movs	r1, #255	; 0xff
 8012678:	f240 17ff 	movw	r7, #511	; 0x1ff
 801267c:	eb05 0242 	add.w	r2, r5, r2, lsl #1
  for (int i = 0; i < BUFFER_SIZE; i++) {
 8012680:	2300      	movs	r3, #0
    buffer[i] = BUFFER_OFFSET;
 8012682:	f04f 2002 	mov.w	r0, #33554944	; 0x2000200
 8012686:	3301      	adds	r3, #1
 8012688:	428b      	cmp	r3, r1
 801268a:	f842 0b04 	str.w	r0, [r2], #4
 801268e:	d3fa      	bcc.n	8012686 <prepBuffer+0x142>
 8012690:	1933      	adds	r3, r6, r4
 8012692:	42be      	cmp	r6, r7
 8012694:	bf1c      	itt	ne
 8012696:	f44f 7200 	movne.w	r2, #512	; 0x200
 801269a:	f825 2013 	strhne.w	r2, [r5, r3, lsl #1]
  if (lidarModeActive) {
 801269e:	4b5d      	ldr	r3, [pc, #372]	; (8012814 <prepBuffer+0x2d0>)
 80126a0:	781b      	ldrb	r3, [r3, #0]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	f040 80a1 	bne.w	80127ea <prepBuffer+0x2a6>
  } else if (capModeActive) {
 80126a8:	4b5b      	ldr	r3, [pc, #364]	; (8012818 <prepBuffer+0x2d4>)
 80126aa:	781b      	ldrb	r3, [r3, #0]
 80126ac:	b113      	cbz	r3, 80126b4 <prepBuffer+0x170>
 80126ae:	4861      	ldr	r0, [pc, #388]	; (8012834 <prepBuffer+0x2f0>)
 80126b0:	f7ff fbde 	bl	8011e70 <fillBuffer.part.0>
    if (IIR_filter_active == 1) {
 80126b4:	4b59      	ldr	r3, [pc, #356]	; (801281c <prepBuffer+0x2d8>)
 80126b6:	781b      	ldrb	r3, [r3, #0]
 80126b8:	2b01      	cmp	r3, #1
 80126ba:	d190      	bne.n	80125de <prepBuffer+0x9a>
      arm_shift_q15(buffer_2, BIT_SHIFT_Q_CONV, shifted_buffer_2, BUFFER_SIZE);
 80126bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80126c0:	4a5d      	ldr	r2, [pc, #372]	; (8012838 <prepBuffer+0x2f4>)
 80126c2:	485c      	ldr	r0, [pc, #368]	; (8012834 <prepBuffer+0x2f0>)
 80126c4:	2104      	movs	r1, #4
 80126c6:	f000 fe77 	bl	80133b8 <arm_shift_q15>
      applyFilter(shifted_buffer_2, filtered_buffer_2, shifted_buffer_3);
 80126ca:	4a5c      	ldr	r2, [pc, #368]	; (801283c <prepBuffer+0x2f8>)
 80126cc:	485a      	ldr	r0, [pc, #360]	; (8012838 <prepBuffer+0x2f4>)
 80126ce:	495c      	ldr	r1, [pc, #368]	; (8012840 <prepBuffer+0x2fc>)
 80126d0:	f7fc fb94 	bl	800edfc <applyFilter>
      arm_shift_q15(filtered_buffer_2, (-1 * ((int8_t)BIT_SHIFT_Q_CONV)),
 80126d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80126d8:	4a56      	ldr	r2, [pc, #344]	; (8012834 <prepBuffer+0x2f0>)
 80126da:	4859      	ldr	r0, [pc, #356]	; (8012840 <prepBuffer+0x2fc>)
 80126dc:	e07e      	b.n	80127dc <prepBuffer+0x298>
  HAL_GPIO_TogglePin(LED_LAT_GPIO_Port, LED_LAT_Pin);
 80126de:	f7ef fd3f 	bl	8002160 <HAL_GPIO_TogglePin>
  HAL_DAC_Start_DMA(hdac, DAC_CHANNEL_1, (uint32_t*)buffer, 512,
 80126e2:	2100      	movs	r1, #0
 80126e4:	4628      	mov	r0, r5
 80126e6:	4d4a      	ldr	r5, [pc, #296]	; (8012810 <prepBuffer+0x2cc>)
 80126e8:	4a52      	ldr	r2, [pc, #328]	; (8012834 <prepBuffer+0x2f0>)
 80126ea:	9100      	str	r1, [sp, #0]
 80126ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80126f0:	f7ef f904 	bl	80018fc <HAL_DAC_Start_DMA>
    buff_toggle = 2;
 80126f4:	2302      	movs	r3, #2
 80126f6:	f3c5 0240 	ubfx	r2, r5, #1, #1
 80126fa:	703b      	strb	r3, [r7, #0]
 80126fc:	2a00      	cmp	r2, #0
 80126fe:	d04c      	beq.n	801279a <prepBuffer+0x256>
    buffer[i] = BUFFER_OFFSET;
 8012700:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012704:	802b      	strh	r3, [r5, #0]
 8012706:	f44f 76ff 	mov.w	r6, #510	; 0x1fe
 801270a:	21ff      	movs	r1, #255	; 0xff
 801270c:	f240 17ff 	movw	r7, #511	; 0x1ff
 8012710:	eb05 0242 	add.w	r2, r5, r2, lsl #1
  for (int i = 0; i < BUFFER_SIZE; i++) {
 8012714:	2300      	movs	r3, #0
    buffer[i] = BUFFER_OFFSET;
 8012716:	f04f 2002 	mov.w	r0, #33554944	; 0x2000200
 801271a:	3301      	adds	r3, #1
 801271c:	428b      	cmp	r3, r1
 801271e:	f842 0b04 	str.w	r0, [r2], #4
 8012722:	d3fa      	bcc.n	801271a <prepBuffer+0x1d6>
 8012724:	42b7      	cmp	r7, r6
 8012726:	4434      	add	r4, r6
 8012728:	bf1c      	itt	ne
 801272a:	f44f 7300 	movne.w	r3, #512	; 0x200
 801272e:	f825 3014 	strhne.w	r3, [r5, r4, lsl #1]
  if (lidarModeActive) {
 8012732:	4b38      	ldr	r3, [pc, #224]	; (8012814 <prepBuffer+0x2d0>)
 8012734:	781b      	ldrb	r3, [r3, #0]
 8012736:	2b00      	cmp	r3, #0
 8012738:	d15d      	bne.n	80127f6 <prepBuffer+0x2b2>
  } else if (capModeActive) {
 801273a:	4b37      	ldr	r3, [pc, #220]	; (8012818 <prepBuffer+0x2d4>)
 801273c:	781b      	ldrb	r3, [r3, #0]
 801273e:	b113      	cbz	r3, 8012746 <prepBuffer+0x202>
 8012740:	4833      	ldr	r0, [pc, #204]	; (8012810 <prepBuffer+0x2cc>)
 8012742:	f7ff fb95 	bl	8011e70 <fillBuffer.part.0>
    if (IIR_filter_active == 1) {
 8012746:	4b35      	ldr	r3, [pc, #212]	; (801281c <prepBuffer+0x2d8>)
 8012748:	781b      	ldrb	r3, [r3, #0]
 801274a:	2b01      	cmp	r3, #1
 801274c:	f47f af47 	bne.w	80125de <prepBuffer+0x9a>
      arm_shift_q15(buffer_1, BIT_SHIFT_Q_CONV, shifted_buffer_1, BUFFER_SIZE);
 8012750:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012754:	4a3b      	ldr	r2, [pc, #236]	; (8012844 <prepBuffer+0x300>)
 8012756:	482e      	ldr	r0, [pc, #184]	; (8012810 <prepBuffer+0x2cc>)
 8012758:	2104      	movs	r1, #4
 801275a:	f000 fe2d 	bl	80133b8 <arm_shift_q15>
      applyFilter(shifted_buffer_1, filtered_buffer_1, shifted_buffer_2);
 801275e:	4a36      	ldr	r2, [pc, #216]	; (8012838 <prepBuffer+0x2f4>)
 8012760:	4838      	ldr	r0, [pc, #224]	; (8012844 <prepBuffer+0x300>)
 8012762:	4939      	ldr	r1, [pc, #228]	; (8012848 <prepBuffer+0x304>)
 8012764:	f7fc fb4a 	bl	800edfc <applyFilter>
      arm_shift_q15(filtered_buffer_1, (-1 * ((int8_t)BIT_SHIFT_Q_CONV)),
 8012768:	f44f 7300 	mov.w	r3, #512	; 0x200
 801276c:	4a28      	ldr	r2, [pc, #160]	; (8012810 <prepBuffer+0x2cc>)
 801276e:	4836      	ldr	r0, [pc, #216]	; (8012848 <prepBuffer+0x304>)
 8012770:	e034      	b.n	80127dc <prepBuffer+0x298>
    buff_toggle = 0;
 8012772:	f44f 7500 	mov.w	r5, #512	; 0x200
 8012776:	462f      	mov	r7, r5
 8012778:	f44f 7180 	mov.w	r1, #256	; 0x100
  for (int i = 0; i < BUFFER_SIZE; i++) {
 801277c:	4614      	mov	r4, r2
 801277e:	e70d      	b.n	801259c <prepBuffer+0x58>
    buff_toggle = 1;
 8012780:	f44f 7600 	mov.w	r6, #512	; 0x200
 8012784:	4637      	mov	r7, r6
 8012786:	f44f 7180 	mov.w	r1, #256	; 0x100
  for (int i = 0; i < BUFFER_SIZE; i++) {
 801278a:	4614      	mov	r4, r2
 801278c:	e776      	b.n	801267c <prepBuffer+0x138>
  switchOctave(octave);
 801278e:	f44f 7700 	mov.w	r7, #512	; 0x200
 8012792:	4621      	mov	r1, r4
 8012794:	46be      	mov	lr, r7
  for (int i = 0; i < BUFFER_SIZE; i++) {
 8012796:	4614      	mov	r4, r2
 8012798:	e73f      	b.n	801261a <prepBuffer+0xd6>
    buff_toggle = 2;
 801279a:	f44f 7600 	mov.w	r6, #512	; 0x200
 801279e:	4637      	mov	r7, r6
 80127a0:	f44f 7180 	mov.w	r1, #256	; 0x100
  for (int i = 0; i < BUFFER_SIZE; i++) {
 80127a4:	4614      	mov	r4, r2
 80127a6:	e7b3      	b.n	8012710 <prepBuffer+0x1cc>
    addTableToBuffer(buffer, &freq_lidar_inc, &freq_lidar_ind);
 80127a8:	4a28      	ldr	r2, [pc, #160]	; (801284c <prepBuffer+0x308>)
 80127aa:	4929      	ldr	r1, [pc, #164]	; (8012850 <prepBuffer+0x30c>)
 80127ac:	4817      	ldr	r0, [pc, #92]	; (801280c <prepBuffer+0x2c8>)
 80127ae:	f7ff f913 	bl	80119d8 <addTableToBuffer>
    if (IIR_filter_active == 1) {
 80127b2:	4b1a      	ldr	r3, [pc, #104]	; (801281c <prepBuffer+0x2d8>)
 80127b4:	781b      	ldrb	r3, [r3, #0]
 80127b6:	2b01      	cmp	r3, #1
 80127b8:	f47f af11 	bne.w	80125de <prepBuffer+0x9a>
      arm_shift_q15(buffer_3, BIT_SHIFT_Q_CONV, shifted_buffer_3, BUFFER_SIZE);
 80127bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80127c0:	4a1e      	ldr	r2, [pc, #120]	; (801283c <prepBuffer+0x2f8>)
 80127c2:	4812      	ldr	r0, [pc, #72]	; (801280c <prepBuffer+0x2c8>)
 80127c4:	2104      	movs	r1, #4
 80127c6:	f000 fdf7 	bl	80133b8 <arm_shift_q15>
      applyFilter(shifted_buffer_3, filtered_buffer_3, shifted_buffer_1);
 80127ca:	4a1e      	ldr	r2, [pc, #120]	; (8012844 <prepBuffer+0x300>)
 80127cc:	481b      	ldr	r0, [pc, #108]	; (801283c <prepBuffer+0x2f8>)
 80127ce:	4921      	ldr	r1, [pc, #132]	; (8012854 <prepBuffer+0x310>)
 80127d0:	f7fc fb14 	bl	800edfc <applyFilter>
      arm_shift_q15(filtered_buffer_3, (-1 * ((int8_t)BIT_SHIFT_Q_CONV)),
 80127d4:	4a0d      	ldr	r2, [pc, #52]	; (801280c <prepBuffer+0x2c8>)
 80127d6:	481f      	ldr	r0, [pc, #124]	; (8012854 <prepBuffer+0x310>)
 80127d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80127dc:	f06f 0103 	mvn.w	r1, #3
}
 80127e0:	b003      	add	sp, #12
 80127e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      arm_shift_q15(filtered_buffer_3, (-1 * ((int8_t)BIT_SHIFT_Q_CONV)),
 80127e6:	f000 bde7 	b.w	80133b8 <arm_shift_q15>
    addTableToBuffer(buffer, &freq_lidar_inc, &freq_lidar_ind);
 80127ea:	4a18      	ldr	r2, [pc, #96]	; (801284c <prepBuffer+0x308>)
 80127ec:	4918      	ldr	r1, [pc, #96]	; (8012850 <prepBuffer+0x30c>)
 80127ee:	4811      	ldr	r0, [pc, #68]	; (8012834 <prepBuffer+0x2f0>)
 80127f0:	f7ff f8f2 	bl	80119d8 <addTableToBuffer>
 80127f4:	e75e      	b.n	80126b4 <prepBuffer+0x170>
 80127f6:	4a15      	ldr	r2, [pc, #84]	; (801284c <prepBuffer+0x308>)
 80127f8:	4915      	ldr	r1, [pc, #84]	; (8012850 <prepBuffer+0x30c>)
 80127fa:	4805      	ldr	r0, [pc, #20]	; (8012810 <prepBuffer+0x2cc>)
 80127fc:	f7ff f8ec 	bl	80119d8 <addTableToBuffer>
 8012800:	e7a1      	b.n	8012746 <prepBuffer+0x202>
 8012802:	bf00      	nop
 8012804:	20000051 	.word	0x20000051
 8012808:	200052d0 	.word	0x200052d0
 801280c:	20007ad4 	.word	0x20007ad4
 8012810:	200076c8 	.word	0x200076c8
 8012814:	20005318 	.word	0x20005318
 8012818:	200052d1 	.word	0x200052d1
 801281c:	20000040 	.word	0x20000040
 8012820:	200086dc 	.word	0x200086dc
 8012824:	20000050 	.word	0x20000050
 8012828:	2000004e 	.word	0x2000004e
 801282c:	08016798 	.word	0x08016798
 8012830:	3f666666 	.word	0x3f666666
 8012834:	20006698 	.word	0x20006698
 8012838:	20006aa8 	.word	0x20006aa8
 801283c:	20007ed8 	.word	0x20007ed8
 8012840:	20005e98 	.word	0x20005e98
 8012844:	20006298 	.word	0x20006298
 8012848:	20006ea8 	.word	0x20006ea8
 801284c:	20005308 	.word	0x20005308
 8012850:	20006a98 	.word	0x20006a98
 8012854:	200082dc 	.word	0x200082dc

08012858 <HAL_DAC_ConvCpltCallbackCh1>:
  prepBuffer(hdac);
 8012858:	f7ff be74 	b.w	8012544 <prepBuffer>
 801285c:	0000      	movs	r0, r0
	...

08012860 <incrementOctave>:
  }
}

void incrementOctave(void) {
 8012860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (octave == MAX_OCTAVE)
 8012862:	4abd      	ldr	r2, [pc, #756]	; (8012b58 <incrementOctave+0x2f8>)
 8012864:	7813      	ldrb	r3, [r2, #0]
 8012866:	2b05      	cmp	r3, #5
 8012868:	d00a      	beq.n	8012880 <incrementOctave+0x20>
    return;
  else {
    octave++;
 801286a:	3301      	adds	r3, #1
 801286c:	b2db      	uxtb	r3, r3
  if (des_octave == 4) {
 801286e:	2b04      	cmp	r3, #4
    octave++;
 8012870:	7013      	strb	r3, [r2, #0]
  if (des_octave == 4) {
 8012872:	f000 8088 	beq.w	8012986 <incrementOctave+0x126>
  } else if (des_octave == 5) {
 8012876:	2b05      	cmp	r3, #5
 8012878:	f000 818a 	beq.w	8012b90 <incrementOctave+0x330>
  } else if (des_octave == 3) {
 801287c:	2b03      	cmp	r3, #3
 801287e:	d000      	beq.n	8012882 <incrementOctave+0x22>
 8012880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    freq_1_inc = (NOTE_C3 / DAC_FREQ) * max_table_index;
 8012882:	4bb6      	ldr	r3, [pc, #728]	; (8012b5c <incrementOctave+0x2fc>)
 8012884:	4fb6      	ldr	r7, [pc, #728]	; (8012b60 <incrementOctave+0x300>)
 8012886:	f9b3 0000 	ldrsh.w	r0, [r3]
    freq_2_inc = (NOTE_C3S / DAC_FREQ) * max_table_index;
 801288a:	4eb6      	ldr	r6, [pc, #728]	; (8012b64 <incrementOctave+0x304>)
    freq_1_inc = (NOTE_C3 / DAC_FREQ) * max_table_index;
 801288c:	f7ed fe0a 	bl	80004a4 <__aeabi_i2d>
 8012890:	a383      	add	r3, pc, #524	; (adr r3, 8012aa0 <incrementOctave+0x240>)
 8012892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012896:	4604      	mov	r4, r0
 8012898:	460d      	mov	r5, r1
 801289a:	f7ed fe69 	bl	8000570 <__aeabi_dmul>
 801289e:	f7ee f95f 	bl	8000b60 <__aeabi_d2f>
    freq_2_inc = (NOTE_C3S / DAC_FREQ) * max_table_index;
 80128a2:	a381      	add	r3, pc, #516	; (adr r3, 8012aa8 <incrementOctave+0x248>)
 80128a4:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_1_inc = (NOTE_C3 / DAC_FREQ) * max_table_index;
 80128a8:	6038      	str	r0, [r7, #0]
    freq_2_inc = (NOTE_C3S / DAC_FREQ) * max_table_index;
 80128aa:	4629      	mov	r1, r5
 80128ac:	4620      	mov	r0, r4
 80128ae:	f7ed fe5f 	bl	8000570 <__aeabi_dmul>
 80128b2:	f7ee f955 	bl	8000b60 <__aeabi_d2f>
    freq_3_inc = (NOTE_D3 / DAC_FREQ) * max_table_index;
 80128b6:	a37e      	add	r3, pc, #504	; (adr r3, 8012ab0 <incrementOctave+0x250>)
 80128b8:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_2_inc = (NOTE_C3S / DAC_FREQ) * max_table_index;
 80128bc:	6030      	str	r0, [r6, #0]
    freq_3_inc = (NOTE_D3 / DAC_FREQ) * max_table_index;
 80128be:	4629      	mov	r1, r5
 80128c0:	4620      	mov	r0, r4
 80128c2:	f7ed fe55 	bl	8000570 <__aeabi_dmul>
 80128c6:	f7ee f94b 	bl	8000b60 <__aeabi_d2f>
 80128ca:	4ba7      	ldr	r3, [pc, #668]	; (8012b68 <incrementOctave+0x308>)
    freq_4_inc = (NOTE_D3S / DAC_FREQ) * max_table_index;
 80128cc:	4ea7      	ldr	r6, [pc, #668]	; (8012b6c <incrementOctave+0x30c>)
    freq_3_inc = (NOTE_D3 / DAC_FREQ) * max_table_index;
 80128ce:	6018      	str	r0, [r3, #0]
    freq_4_inc = (NOTE_D3S / DAC_FREQ) * max_table_index;
 80128d0:	4629      	mov	r1, r5
 80128d2:	a379      	add	r3, pc, #484	; (adr r3, 8012ab8 <incrementOctave+0x258>)
 80128d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128d8:	4620      	mov	r0, r4
 80128da:	f7ed fe49 	bl	8000570 <__aeabi_dmul>
 80128de:	f7ee f93f 	bl	8000b60 <__aeabi_d2f>
    freq_5_inc = (NOTE_E3 / DAC_FREQ) * max_table_index;
 80128e2:	a377      	add	r3, pc, #476	; (adr r3, 8012ac0 <incrementOctave+0x260>)
 80128e4:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_4_inc = (NOTE_D3S / DAC_FREQ) * max_table_index;
 80128e8:	6030      	str	r0, [r6, #0]
    freq_5_inc = (NOTE_E3 / DAC_FREQ) * max_table_index;
 80128ea:	4629      	mov	r1, r5
 80128ec:	4620      	mov	r0, r4
 80128ee:	f7ed fe3f 	bl	8000570 <__aeabi_dmul>
 80128f2:	f7ee f935 	bl	8000b60 <__aeabi_d2f>
 80128f6:	4b9e      	ldr	r3, [pc, #632]	; (8012b70 <incrementOctave+0x310>)
    freq_6_inc = (NOTE_F3 / DAC_FREQ) * max_table_index;
 80128f8:	4e9e      	ldr	r6, [pc, #632]	; (8012b74 <incrementOctave+0x314>)
    freq_5_inc = (NOTE_E3 / DAC_FREQ) * max_table_index;
 80128fa:	6018      	str	r0, [r3, #0]
    freq_6_inc = (NOTE_F3 / DAC_FREQ) * max_table_index;
 80128fc:	4629      	mov	r1, r5
 80128fe:	a372      	add	r3, pc, #456	; (adr r3, 8012ac8 <incrementOctave+0x268>)
 8012900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012904:	4620      	mov	r0, r4
 8012906:	f7ed fe33 	bl	8000570 <__aeabi_dmul>
 801290a:	f7ee f929 	bl	8000b60 <__aeabi_d2f>
    freq_7_inc = (NOTE_F3S / DAC_FREQ) * max_table_index;
 801290e:	a370      	add	r3, pc, #448	; (adr r3, 8012ad0 <incrementOctave+0x270>)
 8012910:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_6_inc = (NOTE_F3 / DAC_FREQ) * max_table_index;
 8012914:	6030      	str	r0, [r6, #0]
    freq_7_inc = (NOTE_F3S / DAC_FREQ) * max_table_index;
 8012916:	4629      	mov	r1, r5
 8012918:	4620      	mov	r0, r4
 801291a:	f7ed fe29 	bl	8000570 <__aeabi_dmul>
 801291e:	f7ee f91f 	bl	8000b60 <__aeabi_d2f>
 8012922:	4b95      	ldr	r3, [pc, #596]	; (8012b78 <incrementOctave+0x318>)
    freq_8_inc = (NOTE_G3 / DAC_FREQ) * max_table_index;
 8012924:	4e95      	ldr	r6, [pc, #596]	; (8012b7c <incrementOctave+0x31c>)
    freq_7_inc = (NOTE_F3S / DAC_FREQ) * max_table_index;
 8012926:	6018      	str	r0, [r3, #0]
    freq_8_inc = (NOTE_G3 / DAC_FREQ) * max_table_index;
 8012928:	4629      	mov	r1, r5
 801292a:	a36b      	add	r3, pc, #428	; (adr r3, 8012ad8 <incrementOctave+0x278>)
 801292c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012930:	4620      	mov	r0, r4
 8012932:	f7ed fe1d 	bl	8000570 <__aeabi_dmul>
 8012936:	f7ee f913 	bl	8000b60 <__aeabi_d2f>
    freq_9_inc = (NOTE_G3S / DAC_FREQ) * max_table_index;
 801293a:	a369      	add	r3, pc, #420	; (adr r3, 8012ae0 <incrementOctave+0x280>)
 801293c:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_8_inc = (NOTE_G3 / DAC_FREQ) * max_table_index;
 8012940:	6030      	str	r0, [r6, #0]
    freq_9_inc = (NOTE_G3S / DAC_FREQ) * max_table_index;
 8012942:	4629      	mov	r1, r5
 8012944:	4620      	mov	r0, r4
 8012946:	f7ed fe13 	bl	8000570 <__aeabi_dmul>
 801294a:	f7ee f909 	bl	8000b60 <__aeabi_d2f>
 801294e:	4b8c      	ldr	r3, [pc, #560]	; (8012b80 <incrementOctave+0x320>)
    freq_10_inc = (NOTE_A3 / DAC_FREQ) * max_table_index;
 8012950:	4f8c      	ldr	r7, [pc, #560]	; (8012b84 <incrementOctave+0x324>)
    freq_9_inc = (NOTE_G3S / DAC_FREQ) * max_table_index;
 8012952:	6018      	str	r0, [r3, #0]
 8012954:	4606      	mov	r6, r0
    freq_10_inc = (NOTE_A3 / DAC_FREQ) * max_table_index;
 8012956:	a364      	add	r3, pc, #400	; (adr r3, 8012ae8 <incrementOctave+0x288>)
 8012958:	e9d3 2300 	ldrd	r2, r3, [r3]
 801295c:	4620      	mov	r0, r4
 801295e:	4629      	mov	r1, r5
 8012960:	f7ed fe06 	bl	8000570 <__aeabi_dmul>
 8012964:	f7ee f8fc 	bl	8000b60 <__aeabi_d2f>
    freq_11_inc = (NOTE_A3S / DAC_FREQ) * max_table_index;
 8012968:	4b87      	ldr	r3, [pc, #540]	; (8012b88 <incrementOctave+0x328>)
    freq_10_inc = (NOTE_A3 / DAC_FREQ) * max_table_index;
 801296a:	6038      	str	r0, [r7, #0]
    freq_11_inc = (NOTE_A3S / DAC_FREQ) * max_table_index;
 801296c:	601e      	str	r6, [r3, #0]
    freq_12_inc = (NOTE_B3 / DAC_FREQ) * max_table_index;
 801296e:	4620      	mov	r0, r4
 8012970:	a35f      	add	r3, pc, #380	; (adr r3, 8012af0 <incrementOctave+0x290>)
 8012972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012976:	4629      	mov	r1, r5
 8012978:	f7ed fdfa 	bl	8000570 <__aeabi_dmul>
 801297c:	f7ee f8f0 	bl	8000b60 <__aeabi_d2f>
 8012980:	4b82      	ldr	r3, [pc, #520]	; (8012b8c <incrementOctave+0x32c>)
 8012982:	6018      	str	r0, [r3, #0]
 8012984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    freq_1_inc = (NOTE_C4 / DAC_FREQ) * max_table_index;
 8012986:	4b75      	ldr	r3, [pc, #468]	; (8012b5c <incrementOctave+0x2fc>)
 8012988:	4f75      	ldr	r7, [pc, #468]	; (8012b60 <incrementOctave+0x300>)
 801298a:	f9b3 0000 	ldrsh.w	r0, [r3]
    freq_2_inc = (NOTE_C4S / DAC_FREQ) * max_table_index;
 801298e:	4e75      	ldr	r6, [pc, #468]	; (8012b64 <incrementOctave+0x304>)
    freq_1_inc = (NOTE_C4 / DAC_FREQ) * max_table_index;
 8012990:	f7ed fd88 	bl	80004a4 <__aeabi_i2d>
 8012994:	a358      	add	r3, pc, #352	; (adr r3, 8012af8 <incrementOctave+0x298>)
 8012996:	e9d3 2300 	ldrd	r2, r3, [r3]
 801299a:	4604      	mov	r4, r0
 801299c:	460d      	mov	r5, r1
 801299e:	f7ed fde7 	bl	8000570 <__aeabi_dmul>
 80129a2:	f7ee f8dd 	bl	8000b60 <__aeabi_d2f>
    freq_2_inc = (NOTE_C4S / DAC_FREQ) * max_table_index;
 80129a6:	a356      	add	r3, pc, #344	; (adr r3, 8012b00 <incrementOctave+0x2a0>)
 80129a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_1_inc = (NOTE_C4 / DAC_FREQ) * max_table_index;
 80129ac:	6038      	str	r0, [r7, #0]
    freq_2_inc = (NOTE_C4S / DAC_FREQ) * max_table_index;
 80129ae:	4629      	mov	r1, r5
 80129b0:	4620      	mov	r0, r4
 80129b2:	f7ed fddd 	bl	8000570 <__aeabi_dmul>
 80129b6:	f7ee f8d3 	bl	8000b60 <__aeabi_d2f>
    freq_3_inc = (NOTE_D4 / DAC_FREQ) * max_table_index;
 80129ba:	a353      	add	r3, pc, #332	; (adr r3, 8012b08 <incrementOctave+0x2a8>)
 80129bc:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_2_inc = (NOTE_C4S / DAC_FREQ) * max_table_index;
 80129c0:	6030      	str	r0, [r6, #0]
    freq_3_inc = (NOTE_D4 / DAC_FREQ) * max_table_index;
 80129c2:	4629      	mov	r1, r5
 80129c4:	4620      	mov	r0, r4
 80129c6:	f7ed fdd3 	bl	8000570 <__aeabi_dmul>
 80129ca:	f7ee f8c9 	bl	8000b60 <__aeabi_d2f>
 80129ce:	4b66      	ldr	r3, [pc, #408]	; (8012b68 <incrementOctave+0x308>)
    freq_4_inc = (NOTE_D4S / DAC_FREQ) * max_table_index;
 80129d0:	4e66      	ldr	r6, [pc, #408]	; (8012b6c <incrementOctave+0x30c>)
    freq_3_inc = (NOTE_D4 / DAC_FREQ) * max_table_index;
 80129d2:	6018      	str	r0, [r3, #0]
    freq_4_inc = (NOTE_D4S / DAC_FREQ) * max_table_index;
 80129d4:	4629      	mov	r1, r5
 80129d6:	a34e      	add	r3, pc, #312	; (adr r3, 8012b10 <incrementOctave+0x2b0>)
 80129d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129dc:	4620      	mov	r0, r4
 80129de:	f7ed fdc7 	bl	8000570 <__aeabi_dmul>
 80129e2:	f7ee f8bd 	bl	8000b60 <__aeabi_d2f>
    freq_5_inc = (NOTE_E4 / DAC_FREQ) * max_table_index;
 80129e6:	a34c      	add	r3, pc, #304	; (adr r3, 8012b18 <incrementOctave+0x2b8>)
 80129e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_4_inc = (NOTE_D4S / DAC_FREQ) * max_table_index;
 80129ec:	6030      	str	r0, [r6, #0]
    freq_5_inc = (NOTE_E4 / DAC_FREQ) * max_table_index;
 80129ee:	4629      	mov	r1, r5
 80129f0:	4620      	mov	r0, r4
 80129f2:	f7ed fdbd 	bl	8000570 <__aeabi_dmul>
 80129f6:	f7ee f8b3 	bl	8000b60 <__aeabi_d2f>
 80129fa:	4b5d      	ldr	r3, [pc, #372]	; (8012b70 <incrementOctave+0x310>)
    freq_6_inc = (NOTE_F4 / DAC_FREQ) * max_table_index;
 80129fc:	4e5d      	ldr	r6, [pc, #372]	; (8012b74 <incrementOctave+0x314>)
    freq_5_inc = (NOTE_E4 / DAC_FREQ) * max_table_index;
 80129fe:	6018      	str	r0, [r3, #0]
    freq_6_inc = (NOTE_F4 / DAC_FREQ) * max_table_index;
 8012a00:	4629      	mov	r1, r5
 8012a02:	a347      	add	r3, pc, #284	; (adr r3, 8012b20 <incrementOctave+0x2c0>)
 8012a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a08:	4620      	mov	r0, r4
 8012a0a:	f7ed fdb1 	bl	8000570 <__aeabi_dmul>
 8012a0e:	f7ee f8a7 	bl	8000b60 <__aeabi_d2f>
    freq_7_inc = (NOTE_F4S / DAC_FREQ) * max_table_index;
 8012a12:	a345      	add	r3, pc, #276	; (adr r3, 8012b28 <incrementOctave+0x2c8>)
 8012a14:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_6_inc = (NOTE_F4 / DAC_FREQ) * max_table_index;
 8012a18:	6030      	str	r0, [r6, #0]
    freq_7_inc = (NOTE_F4S / DAC_FREQ) * max_table_index;
 8012a1a:	4629      	mov	r1, r5
 8012a1c:	4620      	mov	r0, r4
 8012a1e:	f7ed fda7 	bl	8000570 <__aeabi_dmul>
 8012a22:	f7ee f89d 	bl	8000b60 <__aeabi_d2f>
 8012a26:	4b54      	ldr	r3, [pc, #336]	; (8012b78 <incrementOctave+0x318>)
    freq_8_inc = (NOTE_G4 / DAC_FREQ) * max_table_index;
 8012a28:	4e54      	ldr	r6, [pc, #336]	; (8012b7c <incrementOctave+0x31c>)
    freq_7_inc = (NOTE_F4S / DAC_FREQ) * max_table_index;
 8012a2a:	6018      	str	r0, [r3, #0]
    freq_8_inc = (NOTE_G4 / DAC_FREQ) * max_table_index;
 8012a2c:	4629      	mov	r1, r5
 8012a2e:	a340      	add	r3, pc, #256	; (adr r3, 8012b30 <incrementOctave+0x2d0>)
 8012a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a34:	4620      	mov	r0, r4
 8012a36:	f7ed fd9b 	bl	8000570 <__aeabi_dmul>
 8012a3a:	f7ee f891 	bl	8000b60 <__aeabi_d2f>
    freq_9_inc = (NOTE_G4S / DAC_FREQ) * max_table_index;
 8012a3e:	a33e      	add	r3, pc, #248	; (adr r3, 8012b38 <incrementOctave+0x2d8>)
 8012a40:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_8_inc = (NOTE_G4 / DAC_FREQ) * max_table_index;
 8012a44:	6030      	str	r0, [r6, #0]
    freq_9_inc = (NOTE_G4S / DAC_FREQ) * max_table_index;
 8012a46:	4629      	mov	r1, r5
 8012a48:	4620      	mov	r0, r4
 8012a4a:	f7ed fd91 	bl	8000570 <__aeabi_dmul>
 8012a4e:	f7ee f887 	bl	8000b60 <__aeabi_d2f>
 8012a52:	4b4b      	ldr	r3, [pc, #300]	; (8012b80 <incrementOctave+0x320>)
    freq_10_inc = (NOTE_A4 / DAC_FREQ) * max_table_index;
 8012a54:	4e4b      	ldr	r6, [pc, #300]	; (8012b84 <incrementOctave+0x324>)
    freq_9_inc = (NOTE_G4S / DAC_FREQ) * max_table_index;
 8012a56:	6018      	str	r0, [r3, #0]
    freq_10_inc = (NOTE_A4 / DAC_FREQ) * max_table_index;
 8012a58:	4629      	mov	r1, r5
 8012a5a:	a339      	add	r3, pc, #228	; (adr r3, 8012b40 <incrementOctave+0x2e0>)
 8012a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a60:	4620      	mov	r0, r4
 8012a62:	f7ed fd85 	bl	8000570 <__aeabi_dmul>
 8012a66:	f7ee f87b 	bl	8000b60 <__aeabi_d2f>
    freq_11_inc = (NOTE_A4S / DAC_FREQ) * max_table_index;
 8012a6a:	a337      	add	r3, pc, #220	; (adr r3, 8012b48 <incrementOctave+0x2e8>)
 8012a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_10_inc = (NOTE_A4 / DAC_FREQ) * max_table_index;
 8012a70:	6030      	str	r0, [r6, #0]
    freq_11_inc = (NOTE_A4S / DAC_FREQ) * max_table_index;
 8012a72:	4629      	mov	r1, r5
 8012a74:	4620      	mov	r0, r4
 8012a76:	f7ed fd7b 	bl	8000570 <__aeabi_dmul>
 8012a7a:	f7ee f871 	bl	8000b60 <__aeabi_d2f>
 8012a7e:	4b42      	ldr	r3, [pc, #264]	; (8012b88 <incrementOctave+0x328>)
    freq_12_inc = (NOTE_B4 / DAC_FREQ) * max_table_index;
 8012a80:	4e42      	ldr	r6, [pc, #264]	; (8012b8c <incrementOctave+0x32c>)
    freq_11_inc = (NOTE_A4S / DAC_FREQ) * max_table_index;
 8012a82:	6018      	str	r0, [r3, #0]
    freq_12_inc = (NOTE_B4 / DAC_FREQ) * max_table_index;
 8012a84:	a332      	add	r3, pc, #200	; (adr r3, 8012b50 <incrementOctave+0x2f0>)
 8012a86:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_12_inc = (NOTE_B5 / DAC_FREQ) * max_table_index;
 8012a8a:	4620      	mov	r0, r4
 8012a8c:	4629      	mov	r1, r5
 8012a8e:	f7ed fd6f 	bl	8000570 <__aeabi_dmul>
 8012a92:	f7ee f865 	bl	8000b60 <__aeabi_d2f>
 8012a96:	6030      	str	r0, [r6, #0]
 8012a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a9a:	bf00      	nop
 8012a9c:	f3af 8000 	nop.w
 8012aa0:	5d8368d5 	.word	0x5d8368d5
 8012aa4:	3f6aca5e 	.word	0x3f6aca5e
 8012aa8:	ea041539 	.word	0xea041539
 8012aac:	3f6c6228 	.word	0x3f6c6228
 8012ab0:	be67af3b 	.word	0xbe67af3b
 8012ab4:	3f6e1239 	.word	0x3f6e1239
 8012ab8:	3df95fd2 	.word	0x3df95fd2
 8012abc:	3f6fdbfb 	.word	0x3f6fdbfb
 8012ac0:	07f81c06 	.word	0x07f81c06
 8012ac4:	3f70e080 	.word	0x3f70e080
 8012ac8:	b7c4fdcc 	.word	0xb7c4fdcc
 8012acc:	3f71e166 	.word	0x3f71e166
 8012ad0:	d9f1787e 	.word	0xd9f1787e
 8012ad4:	3f72f195 	.word	0x3f72f195
 8012ad8:	50085610 	.word	0x50085610
 8012adc:	3f7411f8 	.word	0x3f7411f8
 8012ae0:	fb946074 	.word	0xfb946074
 8012ae4:	3f754378 	.word	0x3f754378
 8012ae8:	020c49ba 	.word	0x020c49ba
 8012aec:	3f76872b 	.word	0x3f76872b
 8012af0:	b59a8120 	.word	0xb59a8120
 8012af4:	3f79496f 	.word	0x3f79496f
 8012af8:	5d8368d5 	.word	0x5d8368d5
 8012afc:	3f7aca5e 	.word	0x3f7aca5e
 8012b00:	a000bbe7 	.word	0xa000bbe7
 8012b04:	3f7c622f 	.word	0x3f7c622f
 8012b08:	746455ec 	.word	0x746455ec
 8012b0c:	3f7e1240 	.word	0x3f7e1240
 8012b10:	f3f60682 	.word	0xf3f60682
 8012b14:	3f7fdc01 	.word	0x3f7fdc01
 8012b18:	07f81c06 	.word	0x07f81c06
 8012b1c:	3f80e080 	.word	0x3f80e080
 8012b20:	b7c4fdcc 	.word	0xb7c4fdcc
 8012b24:	3f81e166 	.word	0x3f81e166
 8012b28:	d9f1787e 	.word	0xd9f1787e
 8012b2c:	3f82f195 	.word	0x3f82f195
 8012b30:	f50a02b8 	.word	0xf50a02b8
 8012b34:	3f8411f4 	.word	0x3f8411f4
 8012b38:	5692b3cc 	.word	0x5692b3cc
 8012b3c:	3f85437c 	.word	0x3f85437c
 8012b40:	020c49ba 	.word	0x020c49ba
 8012b44:	3f86872b 	.word	0x3f86872b
 8012b48:	d2ea1d3f 	.word	0xd2ea1d3f
 8012b4c:	3f87de1a 	.word	0x3f87de1a
 8012b50:	5a9c2dc8 	.word	0x5a9c2dc8
 8012b54:	3f89496c 	.word	0x3f89496c
 8012b58:	20000050 	.word	0x20000050
 8012b5c:	2000004e 	.word	0x2000004e
 8012b60:	20005e94 	.word	0x20005e94
 8012b64:	20007acc 	.word	0x20007acc
 8012b68:	20006aa4 	.word	0x20006aa4
 8012b6c:	200076b4 	.word	0x200076b4
 8012b70:	200076b0 	.word	0x200076b0
 8012b74:	200072a8 	.word	0x200072a8
 8012b78:	20006a9c 	.word	0x20006a9c
 8012b7c:	200086e4 	.word	0x200086e4
 8012b80:	200072ac 	.word	0x200072ac
 8012b84:	200082d8 	.word	0x200082d8
 8012b88:	200076c0 	.word	0x200076c0
 8012b8c:	20007ed4 	.word	0x20007ed4
    freq_1_inc = (NOTE_C5 / DAC_FREQ) * max_table_index;
 8012b90:	4b59      	ldr	r3, [pc, #356]	; (8012cf8 <incrementOctave+0x498>)
 8012b92:	4f5a      	ldr	r7, [pc, #360]	; (8012cfc <incrementOctave+0x49c>)
 8012b94:	f9b3 0000 	ldrsh.w	r0, [r3]
    freq_2_inc = (NOTE_C5S / DAC_FREQ) * max_table_index;
 8012b98:	4e59      	ldr	r6, [pc, #356]	; (8012d00 <incrementOctave+0x4a0>)
    freq_1_inc = (NOTE_C5 / DAC_FREQ) * max_table_index;
 8012b9a:	f7ed fc83 	bl	80004a4 <__aeabi_i2d>
 8012b9e:	a33e      	add	r3, pc, #248	; (adr r3, 8012c98 <incrementOctave+0x438>)
 8012ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ba4:	4604      	mov	r4, r0
 8012ba6:	460d      	mov	r5, r1
 8012ba8:	f7ed fce2 	bl	8000570 <__aeabi_dmul>
 8012bac:	f7ed ffd8 	bl	8000b60 <__aeabi_d2f>
    freq_2_inc = (NOTE_C5S / DAC_FREQ) * max_table_index;
 8012bb0:	a33b      	add	r3, pc, #236	; (adr r3, 8012ca0 <incrementOctave+0x440>)
 8012bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_1_inc = (NOTE_C5 / DAC_FREQ) * max_table_index;
 8012bb6:	6038      	str	r0, [r7, #0]
    freq_2_inc = (NOTE_C5S / DAC_FREQ) * max_table_index;
 8012bb8:	4629      	mov	r1, r5
 8012bba:	4620      	mov	r0, r4
 8012bbc:	f7ed fcd8 	bl	8000570 <__aeabi_dmul>
 8012bc0:	f7ed ffce 	bl	8000b60 <__aeabi_d2f>
    freq_3_inc = (NOTE_D5 / DAC_FREQ) * max_table_index;
 8012bc4:	a338      	add	r3, pc, #224	; (adr r3, 8012ca8 <incrementOctave+0x448>)
 8012bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_2_inc = (NOTE_C5S / DAC_FREQ) * max_table_index;
 8012bca:	6030      	str	r0, [r6, #0]
    freq_3_inc = (NOTE_D5 / DAC_FREQ) * max_table_index;
 8012bcc:	4629      	mov	r1, r5
 8012bce:	4620      	mov	r0, r4
 8012bd0:	f7ed fcce 	bl	8000570 <__aeabi_dmul>
 8012bd4:	f7ed ffc4 	bl	8000b60 <__aeabi_d2f>
 8012bd8:	4b4a      	ldr	r3, [pc, #296]	; (8012d04 <incrementOctave+0x4a4>)
    freq_4_inc = (NOTE_D5S / DAC_FREQ) * max_table_index;
 8012bda:	4e4b      	ldr	r6, [pc, #300]	; (8012d08 <incrementOctave+0x4a8>)
    freq_3_inc = (NOTE_D5 / DAC_FREQ) * max_table_index;
 8012bdc:	6018      	str	r0, [r3, #0]
    freq_4_inc = (NOTE_D5S / DAC_FREQ) * max_table_index;
 8012bde:	4629      	mov	r1, r5
 8012be0:	a333      	add	r3, pc, #204	; (adr r3, 8012cb0 <incrementOctave+0x450>)
 8012be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012be6:	4620      	mov	r0, r4
 8012be8:	f7ed fcc2 	bl	8000570 <__aeabi_dmul>
 8012bec:	f7ed ffb8 	bl	8000b60 <__aeabi_d2f>
    freq_5_inc = (NOTE_E5 / DAC_FREQ) * max_table_index;
 8012bf0:	a331      	add	r3, pc, #196	; (adr r3, 8012cb8 <incrementOctave+0x458>)
 8012bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_4_inc = (NOTE_D5S / DAC_FREQ) * max_table_index;
 8012bf6:	6030      	str	r0, [r6, #0]
    freq_5_inc = (NOTE_E5 / DAC_FREQ) * max_table_index;
 8012bf8:	4629      	mov	r1, r5
 8012bfa:	4620      	mov	r0, r4
 8012bfc:	f7ed fcb8 	bl	8000570 <__aeabi_dmul>
 8012c00:	f7ed ffae 	bl	8000b60 <__aeabi_d2f>
 8012c04:	4b41      	ldr	r3, [pc, #260]	; (8012d0c <incrementOctave+0x4ac>)
    freq_6_inc = (NOTE_F5 / DAC_FREQ) * max_table_index;
 8012c06:	4e42      	ldr	r6, [pc, #264]	; (8012d10 <incrementOctave+0x4b0>)
    freq_5_inc = (NOTE_E5 / DAC_FREQ) * max_table_index;
 8012c08:	6018      	str	r0, [r3, #0]
    freq_6_inc = (NOTE_F5 / DAC_FREQ) * max_table_index;
 8012c0a:	4629      	mov	r1, r5
 8012c0c:	a32c      	add	r3, pc, #176	; (adr r3, 8012cc0 <incrementOctave+0x460>)
 8012c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c12:	4620      	mov	r0, r4
 8012c14:	f7ed fcac 	bl	8000570 <__aeabi_dmul>
 8012c18:	f7ed ffa2 	bl	8000b60 <__aeabi_d2f>
    freq_7_inc = (NOTE_F5S / DAC_FREQ) * max_table_index;
 8012c1c:	a32a      	add	r3, pc, #168	; (adr r3, 8012cc8 <incrementOctave+0x468>)
 8012c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_6_inc = (NOTE_F5 / DAC_FREQ) * max_table_index;
 8012c22:	6030      	str	r0, [r6, #0]
    freq_7_inc = (NOTE_F5S / DAC_FREQ) * max_table_index;
 8012c24:	4629      	mov	r1, r5
 8012c26:	4620      	mov	r0, r4
 8012c28:	f7ed fca2 	bl	8000570 <__aeabi_dmul>
 8012c2c:	f7ed ff98 	bl	8000b60 <__aeabi_d2f>
 8012c30:	4b38      	ldr	r3, [pc, #224]	; (8012d14 <incrementOctave+0x4b4>)
    freq_8_inc = (NOTE_G5 / DAC_FREQ) * max_table_index;
 8012c32:	4e39      	ldr	r6, [pc, #228]	; (8012d18 <incrementOctave+0x4b8>)
    freq_7_inc = (NOTE_F5S / DAC_FREQ) * max_table_index;
 8012c34:	6018      	str	r0, [r3, #0]
    freq_8_inc = (NOTE_G5 / DAC_FREQ) * max_table_index;
 8012c36:	4629      	mov	r1, r5
 8012c38:	a325      	add	r3, pc, #148	; (adr r3, 8012cd0 <incrementOctave+0x470>)
 8012c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c3e:	4620      	mov	r0, r4
 8012c40:	f7ed fc96 	bl	8000570 <__aeabi_dmul>
 8012c44:	f7ed ff8c 	bl	8000b60 <__aeabi_d2f>
    freq_9_inc = (NOTE_G5S / DAC_FREQ) * max_table_index;
 8012c48:	a323      	add	r3, pc, #140	; (adr r3, 8012cd8 <incrementOctave+0x478>)
 8012c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_8_inc = (NOTE_G5 / DAC_FREQ) * max_table_index;
 8012c4e:	6030      	str	r0, [r6, #0]
    freq_9_inc = (NOTE_G5S / DAC_FREQ) * max_table_index;
 8012c50:	4629      	mov	r1, r5
 8012c52:	4620      	mov	r0, r4
 8012c54:	f7ed fc8c 	bl	8000570 <__aeabi_dmul>
 8012c58:	f7ed ff82 	bl	8000b60 <__aeabi_d2f>
 8012c5c:	4b2f      	ldr	r3, [pc, #188]	; (8012d1c <incrementOctave+0x4bc>)
    freq_10_inc = (NOTE_A5 / DAC_FREQ) * max_table_index;
 8012c5e:	4e30      	ldr	r6, [pc, #192]	; (8012d20 <incrementOctave+0x4c0>)
    freq_9_inc = (NOTE_G5S / DAC_FREQ) * max_table_index;
 8012c60:	6018      	str	r0, [r3, #0]
    freq_10_inc = (NOTE_A5 / DAC_FREQ) * max_table_index;
 8012c62:	4629      	mov	r1, r5
 8012c64:	a31e      	add	r3, pc, #120	; (adr r3, 8012ce0 <incrementOctave+0x480>)
 8012c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c6a:	4620      	mov	r0, r4
 8012c6c:	f7ed fc80 	bl	8000570 <__aeabi_dmul>
 8012c70:	f7ed ff76 	bl	8000b60 <__aeabi_d2f>
    freq_11_inc = (NOTE_A5S / DAC_FREQ) * max_table_index;
 8012c74:	a31c      	add	r3, pc, #112	; (adr r3, 8012ce8 <incrementOctave+0x488>)
 8012c76:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_10_inc = (NOTE_A5 / DAC_FREQ) * max_table_index;
 8012c7a:	6030      	str	r0, [r6, #0]
    freq_11_inc = (NOTE_A5S / DAC_FREQ) * max_table_index;
 8012c7c:	4629      	mov	r1, r5
 8012c7e:	4620      	mov	r0, r4
 8012c80:	f7ed fc76 	bl	8000570 <__aeabi_dmul>
 8012c84:	f7ed ff6c 	bl	8000b60 <__aeabi_d2f>
 8012c88:	4b26      	ldr	r3, [pc, #152]	; (8012d24 <incrementOctave+0x4c4>)
    freq_12_inc = (NOTE_B5 / DAC_FREQ) * max_table_index;
 8012c8a:	4e27      	ldr	r6, [pc, #156]	; (8012d28 <incrementOctave+0x4c8>)
    freq_11_inc = (NOTE_A5S / DAC_FREQ) * max_table_index;
 8012c8c:	6018      	str	r0, [r3, #0]
    freq_12_inc = (NOTE_B5 / DAC_FREQ) * max_table_index;
 8012c8e:	a318      	add	r3, pc, #96	; (adr r3, 8012cf0 <incrementOctave+0x490>)
 8012c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c94:	e6f9      	b.n	8012a8a <incrementOctave+0x22a>
 8012c96:	bf00      	nop
 8012c98:	0285157e 	.word	0x0285157e
 8012c9c:	3f8aca5b 	.word	0x3f8aca5b
 8012ca0:	45026890 	.word	0x45026890
 8012ca4:	3f8c622c 	.word	0x3f8c622c
 8012ca8:	746455ec 	.word	0x746455ec
 8012cac:	3f8e1240 	.word	0x3f8e1240
 8012cb0:	f3f60682 	.word	0xf3f60682
 8012cb4:	3f8fdc01 	.word	0x3f8fdc01
 8012cb8:	5a78f25a 	.word	0x5a78f25a
 8012cbc:	3f90e07e 	.word	0x3f90e07e
 8012cc0:	b7c4fdcc 	.word	0xb7c4fdcc
 8012cc4:	3f91e166 	.word	0x3f91e166
 8012cc8:	8770a22a 	.word	0x8770a22a
 8012ccc:	3f92f197 	.word	0x3f92f197
 8012cd0:	a2892c64 	.word	0xa2892c64
 8012cd4:	3f9411f6 	.word	0x3f9411f6
 8012cd8:	a9138a21 	.word	0xa9138a21
 8012cdc:	3f95437a 	.word	0x3f95437a
 8012ce0:	020c49ba 	.word	0x020c49ba
 8012ce4:	3f96872b 	.word	0x3f96872b
 8012ce8:	d2ea1d3f 	.word	0xd2ea1d3f
 8012cec:	3f97de1a 	.word	0x3f97de1a
 8012cf0:	081b5775 	.word	0x081b5775
 8012cf4:	3f99496e 	.word	0x3f99496e
 8012cf8:	2000004e 	.word	0x2000004e
 8012cfc:	20005e94 	.word	0x20005e94
 8012d00:	20007acc 	.word	0x20007acc
 8012d04:	20006aa4 	.word	0x20006aa4
 8012d08:	200076b4 	.word	0x200076b4
 8012d0c:	200076b0 	.word	0x200076b0
 8012d10:	200072a8 	.word	0x200072a8
 8012d14:	20006a9c 	.word	0x20006a9c
 8012d18:	200086e4 	.word	0x200086e4
 8012d1c:	200072ac 	.word	0x200072ac
 8012d20:	200082d8 	.word	0x200082d8
 8012d24:	200076c0 	.word	0x200076c0
 8012d28:	20007ed4 	.word	0x20007ed4
 8012d2c:	00000000 	.word	0x00000000

08012d30 <decrementOctave>:
    switchOctave(octave);
  }
}

void decrementOctave(void) {
 8012d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (octave == MIN_OCTAVE)
 8012d32:	4abd      	ldr	r2, [pc, #756]	; (8013028 <decrementOctave+0x2f8>)
 8012d34:	7813      	ldrb	r3, [r2, #0]
 8012d36:	2b03      	cmp	r3, #3
 8012d38:	d00a      	beq.n	8012d50 <decrementOctave+0x20>
    return;
  else {
    octave--;
 8012d3a:	3b01      	subs	r3, #1
 8012d3c:	b2db      	uxtb	r3, r3
  if (des_octave == 4) {
 8012d3e:	2b04      	cmp	r3, #4
    octave--;
 8012d40:	7013      	strb	r3, [r2, #0]
  if (des_octave == 4) {
 8012d42:	f000 8088 	beq.w	8012e56 <decrementOctave+0x126>
  } else if (des_octave == 5) {
 8012d46:	2b05      	cmp	r3, #5
 8012d48:	f000 818a 	beq.w	8013060 <decrementOctave+0x330>
  } else if (des_octave == 3) {
 8012d4c:	2b03      	cmp	r3, #3
 8012d4e:	d000      	beq.n	8012d52 <decrementOctave+0x22>
 8012d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    freq_1_inc = (NOTE_C3 / DAC_FREQ) * max_table_index;
 8012d52:	4bb6      	ldr	r3, [pc, #728]	; (801302c <decrementOctave+0x2fc>)
 8012d54:	4fb6      	ldr	r7, [pc, #728]	; (8013030 <decrementOctave+0x300>)
 8012d56:	f9b3 0000 	ldrsh.w	r0, [r3]
    freq_2_inc = (NOTE_C3S / DAC_FREQ) * max_table_index;
 8012d5a:	4eb6      	ldr	r6, [pc, #728]	; (8013034 <decrementOctave+0x304>)
    freq_1_inc = (NOTE_C3 / DAC_FREQ) * max_table_index;
 8012d5c:	f7ed fba2 	bl	80004a4 <__aeabi_i2d>
 8012d60:	a383      	add	r3, pc, #524	; (adr r3, 8012f70 <decrementOctave+0x240>)
 8012d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d66:	4604      	mov	r4, r0
 8012d68:	460d      	mov	r5, r1
 8012d6a:	f7ed fc01 	bl	8000570 <__aeabi_dmul>
 8012d6e:	f7ed fef7 	bl	8000b60 <__aeabi_d2f>
    freq_2_inc = (NOTE_C3S / DAC_FREQ) * max_table_index;
 8012d72:	a381      	add	r3, pc, #516	; (adr r3, 8012f78 <decrementOctave+0x248>)
 8012d74:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_1_inc = (NOTE_C3 / DAC_FREQ) * max_table_index;
 8012d78:	6038      	str	r0, [r7, #0]
    freq_2_inc = (NOTE_C3S / DAC_FREQ) * max_table_index;
 8012d7a:	4629      	mov	r1, r5
 8012d7c:	4620      	mov	r0, r4
 8012d7e:	f7ed fbf7 	bl	8000570 <__aeabi_dmul>
 8012d82:	f7ed feed 	bl	8000b60 <__aeabi_d2f>
    freq_3_inc = (NOTE_D3 / DAC_FREQ) * max_table_index;
 8012d86:	a37e      	add	r3, pc, #504	; (adr r3, 8012f80 <decrementOctave+0x250>)
 8012d88:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_2_inc = (NOTE_C3S / DAC_FREQ) * max_table_index;
 8012d8c:	6030      	str	r0, [r6, #0]
    freq_3_inc = (NOTE_D3 / DAC_FREQ) * max_table_index;
 8012d8e:	4629      	mov	r1, r5
 8012d90:	4620      	mov	r0, r4
 8012d92:	f7ed fbed 	bl	8000570 <__aeabi_dmul>
 8012d96:	f7ed fee3 	bl	8000b60 <__aeabi_d2f>
 8012d9a:	4ba7      	ldr	r3, [pc, #668]	; (8013038 <decrementOctave+0x308>)
    freq_4_inc = (NOTE_D3S / DAC_FREQ) * max_table_index;
 8012d9c:	4ea7      	ldr	r6, [pc, #668]	; (801303c <decrementOctave+0x30c>)
    freq_3_inc = (NOTE_D3 / DAC_FREQ) * max_table_index;
 8012d9e:	6018      	str	r0, [r3, #0]
    freq_4_inc = (NOTE_D3S / DAC_FREQ) * max_table_index;
 8012da0:	4629      	mov	r1, r5
 8012da2:	a379      	add	r3, pc, #484	; (adr r3, 8012f88 <decrementOctave+0x258>)
 8012da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012da8:	4620      	mov	r0, r4
 8012daa:	f7ed fbe1 	bl	8000570 <__aeabi_dmul>
 8012dae:	f7ed fed7 	bl	8000b60 <__aeabi_d2f>
    freq_5_inc = (NOTE_E3 / DAC_FREQ) * max_table_index;
 8012db2:	a377      	add	r3, pc, #476	; (adr r3, 8012f90 <decrementOctave+0x260>)
 8012db4:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_4_inc = (NOTE_D3S / DAC_FREQ) * max_table_index;
 8012db8:	6030      	str	r0, [r6, #0]
    freq_5_inc = (NOTE_E3 / DAC_FREQ) * max_table_index;
 8012dba:	4629      	mov	r1, r5
 8012dbc:	4620      	mov	r0, r4
 8012dbe:	f7ed fbd7 	bl	8000570 <__aeabi_dmul>
 8012dc2:	f7ed fecd 	bl	8000b60 <__aeabi_d2f>
 8012dc6:	4b9e      	ldr	r3, [pc, #632]	; (8013040 <decrementOctave+0x310>)
    freq_6_inc = (NOTE_F3 / DAC_FREQ) * max_table_index;
 8012dc8:	4e9e      	ldr	r6, [pc, #632]	; (8013044 <decrementOctave+0x314>)
    freq_5_inc = (NOTE_E3 / DAC_FREQ) * max_table_index;
 8012dca:	6018      	str	r0, [r3, #0]
    freq_6_inc = (NOTE_F3 / DAC_FREQ) * max_table_index;
 8012dcc:	4629      	mov	r1, r5
 8012dce:	a372      	add	r3, pc, #456	; (adr r3, 8012f98 <decrementOctave+0x268>)
 8012dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dd4:	4620      	mov	r0, r4
 8012dd6:	f7ed fbcb 	bl	8000570 <__aeabi_dmul>
 8012dda:	f7ed fec1 	bl	8000b60 <__aeabi_d2f>
    freq_7_inc = (NOTE_F3S / DAC_FREQ) * max_table_index;
 8012dde:	a370      	add	r3, pc, #448	; (adr r3, 8012fa0 <decrementOctave+0x270>)
 8012de0:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_6_inc = (NOTE_F3 / DAC_FREQ) * max_table_index;
 8012de4:	6030      	str	r0, [r6, #0]
    freq_7_inc = (NOTE_F3S / DAC_FREQ) * max_table_index;
 8012de6:	4629      	mov	r1, r5
 8012de8:	4620      	mov	r0, r4
 8012dea:	f7ed fbc1 	bl	8000570 <__aeabi_dmul>
 8012dee:	f7ed feb7 	bl	8000b60 <__aeabi_d2f>
 8012df2:	4b95      	ldr	r3, [pc, #596]	; (8013048 <decrementOctave+0x318>)
    freq_8_inc = (NOTE_G3 / DAC_FREQ) * max_table_index;
 8012df4:	4e95      	ldr	r6, [pc, #596]	; (801304c <decrementOctave+0x31c>)
    freq_7_inc = (NOTE_F3S / DAC_FREQ) * max_table_index;
 8012df6:	6018      	str	r0, [r3, #0]
    freq_8_inc = (NOTE_G3 / DAC_FREQ) * max_table_index;
 8012df8:	4629      	mov	r1, r5
 8012dfa:	a36b      	add	r3, pc, #428	; (adr r3, 8012fa8 <decrementOctave+0x278>)
 8012dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e00:	4620      	mov	r0, r4
 8012e02:	f7ed fbb5 	bl	8000570 <__aeabi_dmul>
 8012e06:	f7ed feab 	bl	8000b60 <__aeabi_d2f>
    freq_9_inc = (NOTE_G3S / DAC_FREQ) * max_table_index;
 8012e0a:	a369      	add	r3, pc, #420	; (adr r3, 8012fb0 <decrementOctave+0x280>)
 8012e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_8_inc = (NOTE_G3 / DAC_FREQ) * max_table_index;
 8012e10:	6030      	str	r0, [r6, #0]
    freq_9_inc = (NOTE_G3S / DAC_FREQ) * max_table_index;
 8012e12:	4629      	mov	r1, r5
 8012e14:	4620      	mov	r0, r4
 8012e16:	f7ed fbab 	bl	8000570 <__aeabi_dmul>
 8012e1a:	f7ed fea1 	bl	8000b60 <__aeabi_d2f>
 8012e1e:	4b8c      	ldr	r3, [pc, #560]	; (8013050 <decrementOctave+0x320>)
    freq_10_inc = (NOTE_A3 / DAC_FREQ) * max_table_index;
 8012e20:	4f8c      	ldr	r7, [pc, #560]	; (8013054 <decrementOctave+0x324>)
    freq_9_inc = (NOTE_G3S / DAC_FREQ) * max_table_index;
 8012e22:	6018      	str	r0, [r3, #0]
 8012e24:	4606      	mov	r6, r0
    freq_10_inc = (NOTE_A3 / DAC_FREQ) * max_table_index;
 8012e26:	a364      	add	r3, pc, #400	; (adr r3, 8012fb8 <decrementOctave+0x288>)
 8012e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e2c:	4620      	mov	r0, r4
 8012e2e:	4629      	mov	r1, r5
 8012e30:	f7ed fb9e 	bl	8000570 <__aeabi_dmul>
 8012e34:	f7ed fe94 	bl	8000b60 <__aeabi_d2f>
    freq_11_inc = (NOTE_A3S / DAC_FREQ) * max_table_index;
 8012e38:	4b87      	ldr	r3, [pc, #540]	; (8013058 <decrementOctave+0x328>)
    freq_10_inc = (NOTE_A3 / DAC_FREQ) * max_table_index;
 8012e3a:	6038      	str	r0, [r7, #0]
    freq_11_inc = (NOTE_A3S / DAC_FREQ) * max_table_index;
 8012e3c:	601e      	str	r6, [r3, #0]
    freq_12_inc = (NOTE_B3 / DAC_FREQ) * max_table_index;
 8012e3e:	4620      	mov	r0, r4
 8012e40:	a35f      	add	r3, pc, #380	; (adr r3, 8012fc0 <decrementOctave+0x290>)
 8012e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e46:	4629      	mov	r1, r5
 8012e48:	f7ed fb92 	bl	8000570 <__aeabi_dmul>
 8012e4c:	f7ed fe88 	bl	8000b60 <__aeabi_d2f>
 8012e50:	4b82      	ldr	r3, [pc, #520]	; (801305c <decrementOctave+0x32c>)
 8012e52:	6018      	str	r0, [r3, #0]
 8012e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    freq_1_inc = (NOTE_C4 / DAC_FREQ) * max_table_index;
 8012e56:	4b75      	ldr	r3, [pc, #468]	; (801302c <decrementOctave+0x2fc>)
 8012e58:	4f75      	ldr	r7, [pc, #468]	; (8013030 <decrementOctave+0x300>)
 8012e5a:	f9b3 0000 	ldrsh.w	r0, [r3]
    freq_2_inc = (NOTE_C4S / DAC_FREQ) * max_table_index;
 8012e5e:	4e75      	ldr	r6, [pc, #468]	; (8013034 <decrementOctave+0x304>)
    freq_1_inc = (NOTE_C4 / DAC_FREQ) * max_table_index;
 8012e60:	f7ed fb20 	bl	80004a4 <__aeabi_i2d>
 8012e64:	a358      	add	r3, pc, #352	; (adr r3, 8012fc8 <decrementOctave+0x298>)
 8012e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e6a:	4604      	mov	r4, r0
 8012e6c:	460d      	mov	r5, r1
 8012e6e:	f7ed fb7f 	bl	8000570 <__aeabi_dmul>
 8012e72:	f7ed fe75 	bl	8000b60 <__aeabi_d2f>
    freq_2_inc = (NOTE_C4S / DAC_FREQ) * max_table_index;
 8012e76:	a356      	add	r3, pc, #344	; (adr r3, 8012fd0 <decrementOctave+0x2a0>)
 8012e78:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_1_inc = (NOTE_C4 / DAC_FREQ) * max_table_index;
 8012e7c:	6038      	str	r0, [r7, #0]
    freq_2_inc = (NOTE_C4S / DAC_FREQ) * max_table_index;
 8012e7e:	4629      	mov	r1, r5
 8012e80:	4620      	mov	r0, r4
 8012e82:	f7ed fb75 	bl	8000570 <__aeabi_dmul>
 8012e86:	f7ed fe6b 	bl	8000b60 <__aeabi_d2f>
    freq_3_inc = (NOTE_D4 / DAC_FREQ) * max_table_index;
 8012e8a:	a353      	add	r3, pc, #332	; (adr r3, 8012fd8 <decrementOctave+0x2a8>)
 8012e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_2_inc = (NOTE_C4S / DAC_FREQ) * max_table_index;
 8012e90:	6030      	str	r0, [r6, #0]
    freq_3_inc = (NOTE_D4 / DAC_FREQ) * max_table_index;
 8012e92:	4629      	mov	r1, r5
 8012e94:	4620      	mov	r0, r4
 8012e96:	f7ed fb6b 	bl	8000570 <__aeabi_dmul>
 8012e9a:	f7ed fe61 	bl	8000b60 <__aeabi_d2f>
 8012e9e:	4b66      	ldr	r3, [pc, #408]	; (8013038 <decrementOctave+0x308>)
    freq_4_inc = (NOTE_D4S / DAC_FREQ) * max_table_index;
 8012ea0:	4e66      	ldr	r6, [pc, #408]	; (801303c <decrementOctave+0x30c>)
    freq_3_inc = (NOTE_D4 / DAC_FREQ) * max_table_index;
 8012ea2:	6018      	str	r0, [r3, #0]
    freq_4_inc = (NOTE_D4S / DAC_FREQ) * max_table_index;
 8012ea4:	4629      	mov	r1, r5
 8012ea6:	a34e      	add	r3, pc, #312	; (adr r3, 8012fe0 <decrementOctave+0x2b0>)
 8012ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eac:	4620      	mov	r0, r4
 8012eae:	f7ed fb5f 	bl	8000570 <__aeabi_dmul>
 8012eb2:	f7ed fe55 	bl	8000b60 <__aeabi_d2f>
    freq_5_inc = (NOTE_E4 / DAC_FREQ) * max_table_index;
 8012eb6:	a34c      	add	r3, pc, #304	; (adr r3, 8012fe8 <decrementOctave+0x2b8>)
 8012eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_4_inc = (NOTE_D4S / DAC_FREQ) * max_table_index;
 8012ebc:	6030      	str	r0, [r6, #0]
    freq_5_inc = (NOTE_E4 / DAC_FREQ) * max_table_index;
 8012ebe:	4629      	mov	r1, r5
 8012ec0:	4620      	mov	r0, r4
 8012ec2:	f7ed fb55 	bl	8000570 <__aeabi_dmul>
 8012ec6:	f7ed fe4b 	bl	8000b60 <__aeabi_d2f>
 8012eca:	4b5d      	ldr	r3, [pc, #372]	; (8013040 <decrementOctave+0x310>)
    freq_6_inc = (NOTE_F4 / DAC_FREQ) * max_table_index;
 8012ecc:	4e5d      	ldr	r6, [pc, #372]	; (8013044 <decrementOctave+0x314>)
    freq_5_inc = (NOTE_E4 / DAC_FREQ) * max_table_index;
 8012ece:	6018      	str	r0, [r3, #0]
    freq_6_inc = (NOTE_F4 / DAC_FREQ) * max_table_index;
 8012ed0:	4629      	mov	r1, r5
 8012ed2:	a347      	add	r3, pc, #284	; (adr r3, 8012ff0 <decrementOctave+0x2c0>)
 8012ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ed8:	4620      	mov	r0, r4
 8012eda:	f7ed fb49 	bl	8000570 <__aeabi_dmul>
 8012ede:	f7ed fe3f 	bl	8000b60 <__aeabi_d2f>
    freq_7_inc = (NOTE_F4S / DAC_FREQ) * max_table_index;
 8012ee2:	a345      	add	r3, pc, #276	; (adr r3, 8012ff8 <decrementOctave+0x2c8>)
 8012ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_6_inc = (NOTE_F4 / DAC_FREQ) * max_table_index;
 8012ee8:	6030      	str	r0, [r6, #0]
    freq_7_inc = (NOTE_F4S / DAC_FREQ) * max_table_index;
 8012eea:	4629      	mov	r1, r5
 8012eec:	4620      	mov	r0, r4
 8012eee:	f7ed fb3f 	bl	8000570 <__aeabi_dmul>
 8012ef2:	f7ed fe35 	bl	8000b60 <__aeabi_d2f>
 8012ef6:	4b54      	ldr	r3, [pc, #336]	; (8013048 <decrementOctave+0x318>)
    freq_8_inc = (NOTE_G4 / DAC_FREQ) * max_table_index;
 8012ef8:	4e54      	ldr	r6, [pc, #336]	; (801304c <decrementOctave+0x31c>)
    freq_7_inc = (NOTE_F4S / DAC_FREQ) * max_table_index;
 8012efa:	6018      	str	r0, [r3, #0]
    freq_8_inc = (NOTE_G4 / DAC_FREQ) * max_table_index;
 8012efc:	4629      	mov	r1, r5
 8012efe:	a340      	add	r3, pc, #256	; (adr r3, 8013000 <decrementOctave+0x2d0>)
 8012f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f04:	4620      	mov	r0, r4
 8012f06:	f7ed fb33 	bl	8000570 <__aeabi_dmul>
 8012f0a:	f7ed fe29 	bl	8000b60 <__aeabi_d2f>
    freq_9_inc = (NOTE_G4S / DAC_FREQ) * max_table_index;
 8012f0e:	a33e      	add	r3, pc, #248	; (adr r3, 8013008 <decrementOctave+0x2d8>)
 8012f10:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_8_inc = (NOTE_G4 / DAC_FREQ) * max_table_index;
 8012f14:	6030      	str	r0, [r6, #0]
    freq_9_inc = (NOTE_G4S / DAC_FREQ) * max_table_index;
 8012f16:	4629      	mov	r1, r5
 8012f18:	4620      	mov	r0, r4
 8012f1a:	f7ed fb29 	bl	8000570 <__aeabi_dmul>
 8012f1e:	f7ed fe1f 	bl	8000b60 <__aeabi_d2f>
 8012f22:	4b4b      	ldr	r3, [pc, #300]	; (8013050 <decrementOctave+0x320>)
    freq_10_inc = (NOTE_A4 / DAC_FREQ) * max_table_index;
 8012f24:	4e4b      	ldr	r6, [pc, #300]	; (8013054 <decrementOctave+0x324>)
    freq_9_inc = (NOTE_G4S / DAC_FREQ) * max_table_index;
 8012f26:	6018      	str	r0, [r3, #0]
    freq_10_inc = (NOTE_A4 / DAC_FREQ) * max_table_index;
 8012f28:	4629      	mov	r1, r5
 8012f2a:	a339      	add	r3, pc, #228	; (adr r3, 8013010 <decrementOctave+0x2e0>)
 8012f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f30:	4620      	mov	r0, r4
 8012f32:	f7ed fb1d 	bl	8000570 <__aeabi_dmul>
 8012f36:	f7ed fe13 	bl	8000b60 <__aeabi_d2f>
    freq_11_inc = (NOTE_A4S / DAC_FREQ) * max_table_index;
 8012f3a:	a337      	add	r3, pc, #220	; (adr r3, 8013018 <decrementOctave+0x2e8>)
 8012f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_10_inc = (NOTE_A4 / DAC_FREQ) * max_table_index;
 8012f40:	6030      	str	r0, [r6, #0]
    freq_11_inc = (NOTE_A4S / DAC_FREQ) * max_table_index;
 8012f42:	4629      	mov	r1, r5
 8012f44:	4620      	mov	r0, r4
 8012f46:	f7ed fb13 	bl	8000570 <__aeabi_dmul>
 8012f4a:	f7ed fe09 	bl	8000b60 <__aeabi_d2f>
 8012f4e:	4b42      	ldr	r3, [pc, #264]	; (8013058 <decrementOctave+0x328>)
    freq_12_inc = (NOTE_B4 / DAC_FREQ) * max_table_index;
 8012f50:	4e42      	ldr	r6, [pc, #264]	; (801305c <decrementOctave+0x32c>)
    freq_11_inc = (NOTE_A4S / DAC_FREQ) * max_table_index;
 8012f52:	6018      	str	r0, [r3, #0]
    freq_12_inc = (NOTE_B4 / DAC_FREQ) * max_table_index;
 8012f54:	a332      	add	r3, pc, #200	; (adr r3, 8013020 <decrementOctave+0x2f0>)
 8012f56:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_12_inc = (NOTE_B5 / DAC_FREQ) * max_table_index;
 8012f5a:	4620      	mov	r0, r4
 8012f5c:	4629      	mov	r1, r5
 8012f5e:	f7ed fb07 	bl	8000570 <__aeabi_dmul>
 8012f62:	f7ed fdfd 	bl	8000b60 <__aeabi_d2f>
 8012f66:	6030      	str	r0, [r6, #0]
 8012f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f6a:	bf00      	nop
 8012f6c:	f3af 8000 	nop.w
 8012f70:	5d8368d5 	.word	0x5d8368d5
 8012f74:	3f6aca5e 	.word	0x3f6aca5e
 8012f78:	ea041539 	.word	0xea041539
 8012f7c:	3f6c6228 	.word	0x3f6c6228
 8012f80:	be67af3b 	.word	0xbe67af3b
 8012f84:	3f6e1239 	.word	0x3f6e1239
 8012f88:	3df95fd2 	.word	0x3df95fd2
 8012f8c:	3f6fdbfb 	.word	0x3f6fdbfb
 8012f90:	07f81c06 	.word	0x07f81c06
 8012f94:	3f70e080 	.word	0x3f70e080
 8012f98:	b7c4fdcc 	.word	0xb7c4fdcc
 8012f9c:	3f71e166 	.word	0x3f71e166
 8012fa0:	d9f1787e 	.word	0xd9f1787e
 8012fa4:	3f72f195 	.word	0x3f72f195
 8012fa8:	50085610 	.word	0x50085610
 8012fac:	3f7411f8 	.word	0x3f7411f8
 8012fb0:	fb946074 	.word	0xfb946074
 8012fb4:	3f754378 	.word	0x3f754378
 8012fb8:	020c49ba 	.word	0x020c49ba
 8012fbc:	3f76872b 	.word	0x3f76872b
 8012fc0:	b59a8120 	.word	0xb59a8120
 8012fc4:	3f79496f 	.word	0x3f79496f
 8012fc8:	5d8368d5 	.word	0x5d8368d5
 8012fcc:	3f7aca5e 	.word	0x3f7aca5e
 8012fd0:	a000bbe7 	.word	0xa000bbe7
 8012fd4:	3f7c622f 	.word	0x3f7c622f
 8012fd8:	746455ec 	.word	0x746455ec
 8012fdc:	3f7e1240 	.word	0x3f7e1240
 8012fe0:	f3f60682 	.word	0xf3f60682
 8012fe4:	3f7fdc01 	.word	0x3f7fdc01
 8012fe8:	07f81c06 	.word	0x07f81c06
 8012fec:	3f80e080 	.word	0x3f80e080
 8012ff0:	b7c4fdcc 	.word	0xb7c4fdcc
 8012ff4:	3f81e166 	.word	0x3f81e166
 8012ff8:	d9f1787e 	.word	0xd9f1787e
 8012ffc:	3f82f195 	.word	0x3f82f195
 8013000:	f50a02b8 	.word	0xf50a02b8
 8013004:	3f8411f4 	.word	0x3f8411f4
 8013008:	5692b3cc 	.word	0x5692b3cc
 801300c:	3f85437c 	.word	0x3f85437c
 8013010:	020c49ba 	.word	0x020c49ba
 8013014:	3f86872b 	.word	0x3f86872b
 8013018:	d2ea1d3f 	.word	0xd2ea1d3f
 801301c:	3f87de1a 	.word	0x3f87de1a
 8013020:	5a9c2dc8 	.word	0x5a9c2dc8
 8013024:	3f89496c 	.word	0x3f89496c
 8013028:	20000050 	.word	0x20000050
 801302c:	2000004e 	.word	0x2000004e
 8013030:	20005e94 	.word	0x20005e94
 8013034:	20007acc 	.word	0x20007acc
 8013038:	20006aa4 	.word	0x20006aa4
 801303c:	200076b4 	.word	0x200076b4
 8013040:	200076b0 	.word	0x200076b0
 8013044:	200072a8 	.word	0x200072a8
 8013048:	20006a9c 	.word	0x20006a9c
 801304c:	200086e4 	.word	0x200086e4
 8013050:	200072ac 	.word	0x200072ac
 8013054:	200082d8 	.word	0x200082d8
 8013058:	200076c0 	.word	0x200076c0
 801305c:	20007ed4 	.word	0x20007ed4
    freq_1_inc = (NOTE_C5 / DAC_FREQ) * max_table_index;
 8013060:	4b59      	ldr	r3, [pc, #356]	; (80131c8 <decrementOctave+0x498>)
 8013062:	4f5a      	ldr	r7, [pc, #360]	; (80131cc <decrementOctave+0x49c>)
 8013064:	f9b3 0000 	ldrsh.w	r0, [r3]
    freq_2_inc = (NOTE_C5S / DAC_FREQ) * max_table_index;
 8013068:	4e59      	ldr	r6, [pc, #356]	; (80131d0 <decrementOctave+0x4a0>)
    freq_1_inc = (NOTE_C5 / DAC_FREQ) * max_table_index;
 801306a:	f7ed fa1b 	bl	80004a4 <__aeabi_i2d>
 801306e:	a33e      	add	r3, pc, #248	; (adr r3, 8013168 <decrementOctave+0x438>)
 8013070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013074:	4604      	mov	r4, r0
 8013076:	460d      	mov	r5, r1
 8013078:	f7ed fa7a 	bl	8000570 <__aeabi_dmul>
 801307c:	f7ed fd70 	bl	8000b60 <__aeabi_d2f>
    freq_2_inc = (NOTE_C5S / DAC_FREQ) * max_table_index;
 8013080:	a33b      	add	r3, pc, #236	; (adr r3, 8013170 <decrementOctave+0x440>)
 8013082:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_1_inc = (NOTE_C5 / DAC_FREQ) * max_table_index;
 8013086:	6038      	str	r0, [r7, #0]
    freq_2_inc = (NOTE_C5S / DAC_FREQ) * max_table_index;
 8013088:	4629      	mov	r1, r5
 801308a:	4620      	mov	r0, r4
 801308c:	f7ed fa70 	bl	8000570 <__aeabi_dmul>
 8013090:	f7ed fd66 	bl	8000b60 <__aeabi_d2f>
    freq_3_inc = (NOTE_D5 / DAC_FREQ) * max_table_index;
 8013094:	a338      	add	r3, pc, #224	; (adr r3, 8013178 <decrementOctave+0x448>)
 8013096:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_2_inc = (NOTE_C5S / DAC_FREQ) * max_table_index;
 801309a:	6030      	str	r0, [r6, #0]
    freq_3_inc = (NOTE_D5 / DAC_FREQ) * max_table_index;
 801309c:	4629      	mov	r1, r5
 801309e:	4620      	mov	r0, r4
 80130a0:	f7ed fa66 	bl	8000570 <__aeabi_dmul>
 80130a4:	f7ed fd5c 	bl	8000b60 <__aeabi_d2f>
 80130a8:	4b4a      	ldr	r3, [pc, #296]	; (80131d4 <decrementOctave+0x4a4>)
    freq_4_inc = (NOTE_D5S / DAC_FREQ) * max_table_index;
 80130aa:	4e4b      	ldr	r6, [pc, #300]	; (80131d8 <decrementOctave+0x4a8>)
    freq_3_inc = (NOTE_D5 / DAC_FREQ) * max_table_index;
 80130ac:	6018      	str	r0, [r3, #0]
    freq_4_inc = (NOTE_D5S / DAC_FREQ) * max_table_index;
 80130ae:	4629      	mov	r1, r5
 80130b0:	a333      	add	r3, pc, #204	; (adr r3, 8013180 <decrementOctave+0x450>)
 80130b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130b6:	4620      	mov	r0, r4
 80130b8:	f7ed fa5a 	bl	8000570 <__aeabi_dmul>
 80130bc:	f7ed fd50 	bl	8000b60 <__aeabi_d2f>
    freq_5_inc = (NOTE_E5 / DAC_FREQ) * max_table_index;
 80130c0:	a331      	add	r3, pc, #196	; (adr r3, 8013188 <decrementOctave+0x458>)
 80130c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_4_inc = (NOTE_D5S / DAC_FREQ) * max_table_index;
 80130c6:	6030      	str	r0, [r6, #0]
    freq_5_inc = (NOTE_E5 / DAC_FREQ) * max_table_index;
 80130c8:	4629      	mov	r1, r5
 80130ca:	4620      	mov	r0, r4
 80130cc:	f7ed fa50 	bl	8000570 <__aeabi_dmul>
 80130d0:	f7ed fd46 	bl	8000b60 <__aeabi_d2f>
 80130d4:	4b41      	ldr	r3, [pc, #260]	; (80131dc <decrementOctave+0x4ac>)
    freq_6_inc = (NOTE_F5 / DAC_FREQ) * max_table_index;
 80130d6:	4e42      	ldr	r6, [pc, #264]	; (80131e0 <decrementOctave+0x4b0>)
    freq_5_inc = (NOTE_E5 / DAC_FREQ) * max_table_index;
 80130d8:	6018      	str	r0, [r3, #0]
    freq_6_inc = (NOTE_F5 / DAC_FREQ) * max_table_index;
 80130da:	4629      	mov	r1, r5
 80130dc:	a32c      	add	r3, pc, #176	; (adr r3, 8013190 <decrementOctave+0x460>)
 80130de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130e2:	4620      	mov	r0, r4
 80130e4:	f7ed fa44 	bl	8000570 <__aeabi_dmul>
 80130e8:	f7ed fd3a 	bl	8000b60 <__aeabi_d2f>
    freq_7_inc = (NOTE_F5S / DAC_FREQ) * max_table_index;
 80130ec:	a32a      	add	r3, pc, #168	; (adr r3, 8013198 <decrementOctave+0x468>)
 80130ee:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_6_inc = (NOTE_F5 / DAC_FREQ) * max_table_index;
 80130f2:	6030      	str	r0, [r6, #0]
    freq_7_inc = (NOTE_F5S / DAC_FREQ) * max_table_index;
 80130f4:	4629      	mov	r1, r5
 80130f6:	4620      	mov	r0, r4
 80130f8:	f7ed fa3a 	bl	8000570 <__aeabi_dmul>
 80130fc:	f7ed fd30 	bl	8000b60 <__aeabi_d2f>
 8013100:	4b38      	ldr	r3, [pc, #224]	; (80131e4 <decrementOctave+0x4b4>)
    freq_8_inc = (NOTE_G5 / DAC_FREQ) * max_table_index;
 8013102:	4e39      	ldr	r6, [pc, #228]	; (80131e8 <decrementOctave+0x4b8>)
    freq_7_inc = (NOTE_F5S / DAC_FREQ) * max_table_index;
 8013104:	6018      	str	r0, [r3, #0]
    freq_8_inc = (NOTE_G5 / DAC_FREQ) * max_table_index;
 8013106:	4629      	mov	r1, r5
 8013108:	a325      	add	r3, pc, #148	; (adr r3, 80131a0 <decrementOctave+0x470>)
 801310a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801310e:	4620      	mov	r0, r4
 8013110:	f7ed fa2e 	bl	8000570 <__aeabi_dmul>
 8013114:	f7ed fd24 	bl	8000b60 <__aeabi_d2f>
    freq_9_inc = (NOTE_G5S / DAC_FREQ) * max_table_index;
 8013118:	a323      	add	r3, pc, #140	; (adr r3, 80131a8 <decrementOctave+0x478>)
 801311a:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_8_inc = (NOTE_G5 / DAC_FREQ) * max_table_index;
 801311e:	6030      	str	r0, [r6, #0]
    freq_9_inc = (NOTE_G5S / DAC_FREQ) * max_table_index;
 8013120:	4629      	mov	r1, r5
 8013122:	4620      	mov	r0, r4
 8013124:	f7ed fa24 	bl	8000570 <__aeabi_dmul>
 8013128:	f7ed fd1a 	bl	8000b60 <__aeabi_d2f>
 801312c:	4b2f      	ldr	r3, [pc, #188]	; (80131ec <decrementOctave+0x4bc>)
    freq_10_inc = (NOTE_A5 / DAC_FREQ) * max_table_index;
 801312e:	4e30      	ldr	r6, [pc, #192]	; (80131f0 <decrementOctave+0x4c0>)
    freq_9_inc = (NOTE_G5S / DAC_FREQ) * max_table_index;
 8013130:	6018      	str	r0, [r3, #0]
    freq_10_inc = (NOTE_A5 / DAC_FREQ) * max_table_index;
 8013132:	4629      	mov	r1, r5
 8013134:	a31e      	add	r3, pc, #120	; (adr r3, 80131b0 <decrementOctave+0x480>)
 8013136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801313a:	4620      	mov	r0, r4
 801313c:	f7ed fa18 	bl	8000570 <__aeabi_dmul>
 8013140:	f7ed fd0e 	bl	8000b60 <__aeabi_d2f>
    freq_11_inc = (NOTE_A5S / DAC_FREQ) * max_table_index;
 8013144:	a31c      	add	r3, pc, #112	; (adr r3, 80131b8 <decrementOctave+0x488>)
 8013146:	e9d3 2300 	ldrd	r2, r3, [r3]
    freq_10_inc = (NOTE_A5 / DAC_FREQ) * max_table_index;
 801314a:	6030      	str	r0, [r6, #0]
    freq_11_inc = (NOTE_A5S / DAC_FREQ) * max_table_index;
 801314c:	4629      	mov	r1, r5
 801314e:	4620      	mov	r0, r4
 8013150:	f7ed fa0e 	bl	8000570 <__aeabi_dmul>
 8013154:	f7ed fd04 	bl	8000b60 <__aeabi_d2f>
 8013158:	4b26      	ldr	r3, [pc, #152]	; (80131f4 <decrementOctave+0x4c4>)
    freq_12_inc = (NOTE_B5 / DAC_FREQ) * max_table_index;
 801315a:	4e27      	ldr	r6, [pc, #156]	; (80131f8 <decrementOctave+0x4c8>)
    freq_11_inc = (NOTE_A5S / DAC_FREQ) * max_table_index;
 801315c:	6018      	str	r0, [r3, #0]
    freq_12_inc = (NOTE_B5 / DAC_FREQ) * max_table_index;
 801315e:	a318      	add	r3, pc, #96	; (adr r3, 80131c0 <decrementOctave+0x490>)
 8013160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013164:	e6f9      	b.n	8012f5a <decrementOctave+0x22a>
 8013166:	bf00      	nop
 8013168:	0285157e 	.word	0x0285157e
 801316c:	3f8aca5b 	.word	0x3f8aca5b
 8013170:	45026890 	.word	0x45026890
 8013174:	3f8c622c 	.word	0x3f8c622c
 8013178:	746455ec 	.word	0x746455ec
 801317c:	3f8e1240 	.word	0x3f8e1240
 8013180:	f3f60682 	.word	0xf3f60682
 8013184:	3f8fdc01 	.word	0x3f8fdc01
 8013188:	5a78f25a 	.word	0x5a78f25a
 801318c:	3f90e07e 	.word	0x3f90e07e
 8013190:	b7c4fdcc 	.word	0xb7c4fdcc
 8013194:	3f91e166 	.word	0x3f91e166
 8013198:	8770a22a 	.word	0x8770a22a
 801319c:	3f92f197 	.word	0x3f92f197
 80131a0:	a2892c64 	.word	0xa2892c64
 80131a4:	3f9411f6 	.word	0x3f9411f6
 80131a8:	a9138a21 	.word	0xa9138a21
 80131ac:	3f95437a 	.word	0x3f95437a
 80131b0:	020c49ba 	.word	0x020c49ba
 80131b4:	3f96872b 	.word	0x3f96872b
 80131b8:	d2ea1d3f 	.word	0xd2ea1d3f
 80131bc:	3f97de1a 	.word	0x3f97de1a
 80131c0:	081b5775 	.word	0x081b5775
 80131c4:	3f99496e 	.word	0x3f99496e
 80131c8:	2000004e 	.word	0x2000004e
 80131cc:	20005e94 	.word	0x20005e94
 80131d0:	20007acc 	.word	0x20007acc
 80131d4:	20006aa4 	.word	0x20006aa4
 80131d8:	200076b4 	.word	0x200076b4
 80131dc:	200076b0 	.word	0x200076b0
 80131e0:	200072a8 	.word	0x200072a8
 80131e4:	20006a9c 	.word	0x20006a9c
 80131e8:	200086e4 	.word	0x200086e4
 80131ec:	200072ac 	.word	0x200072ac
 80131f0:	200082d8 	.word	0x200082d8
 80131f4:	200076c0 	.word	0x200076c0
 80131f8:	20007ed4 	.word	0x20007ed4

080131fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80131fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8013234 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8013200:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8013202:	e003      	b.n	801320c <LoopCopyDataInit>

08013204 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8013204:	4b0c      	ldr	r3, [pc, #48]	; (8013238 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8013206:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8013208:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 801320a:	3104      	adds	r1, #4

0801320c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 801320c:	480b      	ldr	r0, [pc, #44]	; (801323c <LoopForever+0xa>)
	ldr	r3, =_edata
 801320e:	4b0c      	ldr	r3, [pc, #48]	; (8013240 <LoopForever+0xe>)
	adds	r2, r0, r1
 8013210:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8013212:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8013214:	d3f6      	bcc.n	8013204 <CopyDataInit>
	ldr	r2, =_sbss
 8013216:	4a0b      	ldr	r2, [pc, #44]	; (8013244 <LoopForever+0x12>)
	b	LoopFillZerobss
 8013218:	e002      	b.n	8013220 <LoopFillZerobss>

0801321a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 801321a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 801321c:	f842 3b04 	str.w	r3, [r2], #4

08013220 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8013220:	4b09      	ldr	r3, [pc, #36]	; (8013248 <LoopForever+0x16>)
	cmp	r2, r3
 8013222:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8013224:	d3f9      	bcc.n	801321a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8013226:	f7fd fdd9 	bl	8010ddc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801322a:	f000 f993 	bl	8013554 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 801322e:	f7fd f825 	bl	801027c <main>

08013232 <LoopForever>:

LoopForever:
    b LoopForever
 8013232:	e7fe      	b.n	8013232 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8013234:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8013238:	080171cc 	.word	0x080171cc
	ldr	r0, =_sdata
 801323c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8013240:	200000b8 	.word	0x200000b8
	ldr	r2, =_sbss
 8013244:	200000b8 	.word	0x200000b8
	ldr	r3, = _ebss
 8013248:	200086ec 	.word	0x200086ec

0801324c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 801324c:	e7fe      	b.n	801324c <ADC1_IRQHandler>
	...

08013250 <arm_biquad_cascade_df1_q15>:
 8013250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013254:	b08b      	sub	sp, #44	; 0x2c
 8013256:	f990 800c 	ldrsb.w	r8, [r0, #12]
 801325a:	6885      	ldr	r5, [r0, #8]
 801325c:	6844      	ldr	r4, [r0, #4]
 801325e:	f990 0000 	ldrsb.w	r0, [r0]
 8013262:	9004      	str	r0, [sp, #16]
 8013264:	0858      	lsrs	r0, r3, #1
 8013266:	f003 0301 	and.w	r3, r3, #1
 801326a:	9006      	str	r0, [sp, #24]
 801326c:	9307      	str	r3, [sp, #28]
 801326e:	0080      	lsls	r0, r0, #2
 8013270:	4613      	mov	r3, r2
 8013272:	4403      	add	r3, r0
 8013274:	9309      	str	r3, [sp, #36]	; 0x24
 8013276:	f105 030c 	add.w	r3, r5, #12
 801327a:	f1c8 080f 	rsb	r8, r8, #15
 801327e:	9303      	str	r3, [sp, #12]
 8013280:	f104 0308 	add.w	r3, r4, #8
 8013284:	9205      	str	r2, [sp, #20]
 8013286:	9008      	str	r0, [sp, #32]
 8013288:	9101      	str	r1, [sp, #4]
 801328a:	f1c8 0a20 	rsb	sl, r8, #32
 801328e:	9302      	str	r3, [sp, #8]
 8013290:	9a03      	ldr	r2, [sp, #12]
 8013292:	9902      	ldr	r1, [sp, #8]
 8013294:	f852 5c0c 	ldr.w	r5, [r2, #-12]
 8013298:	f852 4c08 	ldr.w	r4, [r2, #-8]
 801329c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80132a0:	e911 000c 	ldmdb	r1, {r2, r3}
 80132a4:	9906      	ldr	r1, [sp, #24]
 80132a6:	2900      	cmp	r1, #0
 80132a8:	d074      	beq.n	8013394 <arm_biquad_cascade_df1_q15+0x144>
 80132aa:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80132ae:	f8dd c014 	ldr.w	ip, [sp, #20]
 80132b2:	468e      	mov	lr, r1
 80132b4:	4693      	mov	fp, r2
 80132b6:	4619      	mov	r1, r3
 80132b8:	f859 6b04 	ldr.w	r6, [r9], #4
 80132bc:	fb25 f706 	smuad	r7, r5, r6
 80132c0:	17fb      	asrs	r3, r7, #31
 80132c2:	461a      	mov	r2, r3
 80132c4:	463b      	mov	r3, r7
 80132c6:	fbc4 32cb 	smlald	r3, r2, r4, fp
 80132ca:	4617      	mov	r7, r2
 80132cc:	fbc0 37c1 	smlald	r3, r7, r0, r1
 80132d0:	fa07 f70a 	lsl.w	r7, r7, sl
 80132d4:	fa23 f308 	lsr.w	r3, r3, r8
 80132d8:	431f      	orrs	r7, r3
 80132da:	b2b2      	uxth	r2, r6
 80132dc:	f307 070f 	ssat	r7, #16, r7
 80132e0:	b2bf      	uxth	r7, r7
 80132e2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80132e6:	ea42 4b0b 	orr.w	fp, r2, fp, lsl #16
 80132ea:	fb25 f116 	smuadx	r1, r5, r6
 80132ee:	17cb      	asrs	r3, r1, #31
 80132f0:	fbc4 13cb 	smlald	r1, r3, r4, fp
 80132f4:	fbc0 13c7 	smlald	r1, r3, r0, r7
 80132f8:	fa21 f108 	lsr.w	r1, r1, r8
 80132fc:	fa03 f30a 	lsl.w	r3, r3, sl
 8013300:	b2ba      	uxth	r2, r7
 8013302:	430b      	orrs	r3, r1
 8013304:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
 8013308:	f303 030f 	ssat	r3, #16, r3
 801330c:	f1be 0e01 	subs.w	lr, lr, #1
 8013310:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8013314:	b299      	uxth	r1, r3
 8013316:	ea4b 4b16 	orr.w	fp, fp, r6, lsr #16
 801331a:	f84c 2b04 	str.w	r2, [ip], #4
 801331e:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8013322:	d1c9      	bne.n	80132b8 <arm_biquad_cascade_df1_q15+0x68>
 8013324:	460b      	mov	r3, r1
 8013326:	9e08      	ldr	r6, [sp, #32]
 8013328:	9901      	ldr	r1, [sp, #4]
 801332a:	4431      	add	r1, r6
 801332c:	9101      	str	r1, [sp, #4]
 801332e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013330:	465a      	mov	r2, fp
 8013332:	9e07      	ldr	r6, [sp, #28]
 8013334:	b1d6      	cbz	r6, 801336c <arm_biquad_cascade_df1_q15+0x11c>
 8013336:	9e01      	ldr	r6, [sp, #4]
 8013338:	f9b6 e000 	ldrsh.w	lr, [r6]
 801333c:	fb25 f50e 	smuad	r5, r5, lr
 8013340:	17ef      	asrs	r7, r5, #31
 8013342:	463e      	mov	r6, r7
 8013344:	fbc4 56c2 	smlald	r5, r6, r4, r2
 8013348:	fbc0 56c3 	smlald	r5, r6, r0, r3
 801334c:	fa06 f60a 	lsl.w	r6, r6, sl
 8013350:	fa25 f508 	lsr.w	r5, r5, r8
 8013354:	ea46 0005 	orr.w	r0, r6, r5
 8013358:	fa1f fe8e 	uxth.w	lr, lr
 801335c:	f300 000f 	ssat	r0, #16, r0
 8013360:	b284      	uxth	r4, r0
 8013362:	8008      	strh	r0, [r1, #0]
 8013364:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8013368:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 801336c:	9802      	ldr	r0, [sp, #8]
 801336e:	f840 3c04 	str.w	r3, [r0, #-4]
 8013372:	9b03      	ldr	r3, [sp, #12]
 8013374:	f840 2c08 	str.w	r2, [r0, #-8]
 8013378:	330c      	adds	r3, #12
 801337a:	9303      	str	r3, [sp, #12]
 801337c:	f100 0308 	add.w	r3, r0, #8
 8013380:	9302      	str	r3, [sp, #8]
 8013382:	9b05      	ldr	r3, [sp, #20]
 8013384:	9301      	str	r3, [sp, #4]
 8013386:	9b04      	ldr	r3, [sp, #16]
 8013388:	3b01      	subs	r3, #1
 801338a:	9304      	str	r3, [sp, #16]
 801338c:	d180      	bne.n	8013290 <arm_biquad_cascade_df1_q15+0x40>
 801338e:	b00b      	add	sp, #44	; 0x2c
 8013390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013394:	9905      	ldr	r1, [sp, #20]
 8013396:	e7cc      	b.n	8013332 <arm_biquad_cascade_df1_q15+0xe2>

08013398 <arm_biquad_cascade_df1_init_q15>:
 8013398:	b538      	push	{r3, r4, r5, lr}
 801339a:	461d      	mov	r5, r3
 801339c:	4604      	mov	r4, r0
 801339e:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 80133a2:	6082      	str	r2, [r0, #8]
 80133a4:	7001      	strb	r1, [r0, #0]
 80133a6:	00ca      	lsls	r2, r1, #3
 80133a8:	7303      	strb	r3, [r0, #12]
 80133aa:	2100      	movs	r1, #0
 80133ac:	4628      	mov	r0, r5
 80133ae:	f000 f900 	bl	80135b2 <memset>
 80133b2:	6065      	str	r5, [r4, #4]
 80133b4:	bd38      	pop	{r3, r4, r5, pc}
 80133b6:	bf00      	nop

080133b8 <arm_shift_q15>:
 80133b8:	2900      	cmp	r1, #0
 80133ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133be:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 80133c2:	da3d      	bge.n	8013440 <arm_shift_q15+0x88>
 80133c4:	f1be 0f00 	cmp.w	lr, #0
 80133c8:	d02b      	beq.n	8013422 <arm_shift_q15+0x6a>
 80133ca:	f1c1 0c00 	rsb	ip, r1, #0
 80133ce:	f100 0608 	add.w	r6, r0, #8
 80133d2:	f102 0708 	add.w	r7, r2, #8
 80133d6:	46f0      	mov	r8, lr
 80133d8:	f936 5c08 	ldrsh.w	r5, [r6, #-8]
 80133dc:	f936 4c06 	ldrsh.w	r4, [r6, #-6]
 80133e0:	fa45 f50c 	asr.w	r5, r5, ip
 80133e4:	b2ad      	uxth	r5, r5
 80133e6:	fa44 f40c 	asr.w	r4, r4, ip
 80133ea:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80133ee:	f847 4c08 	str.w	r4, [r7, #-8]
 80133f2:	f936 5c04 	ldrsh.w	r5, [r6, #-4]
 80133f6:	f936 4c02 	ldrsh.w	r4, [r6, #-2]
 80133fa:	fa45 f50c 	asr.w	r5, r5, ip
 80133fe:	b2ad      	uxth	r5, r5
 8013400:	fa44 f40c 	asr.w	r4, r4, ip
 8013404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8013408:	f1b8 0801 	subs.w	r8, r8, #1
 801340c:	f847 4c04 	str.w	r4, [r7, #-4]
 8013410:	f106 0608 	add.w	r6, r6, #8
 8013414:	f107 0708 	add.w	r7, r7, #8
 8013418:	d1de      	bne.n	80133d8 <arm_shift_q15+0x20>
 801341a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801341e:	4470      	add	r0, lr
 8013420:	4472      	add	r2, lr
 8013422:	f013 0303 	ands.w	r3, r3, #3
 8013426:	d009      	beq.n	801343c <arm_shift_q15+0x84>
 8013428:	4249      	negs	r1, r1
 801342a:	3a02      	subs	r2, #2
 801342c:	f930 4b02 	ldrsh.w	r4, [r0], #2
 8013430:	3b01      	subs	r3, #1
 8013432:	fa44 f401 	asr.w	r4, r4, r1
 8013436:	f822 4f02 	strh.w	r4, [r2, #2]!
 801343a:	d1f7      	bne.n	801342c <arm_shift_q15+0x74>
 801343c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013440:	f1be 0f00 	cmp.w	lr, #0
 8013444:	d02f      	beq.n	80134a6 <arm_shift_q15+0xee>
 8013446:	f100 0608 	add.w	r6, r0, #8
 801344a:	f102 0708 	add.w	r7, r2, #8
 801344e:	46f4      	mov	ip, lr
 8013450:	f936 4c08 	ldrsh.w	r4, [r6, #-8]
 8013454:	f936 8c06 	ldrsh.w	r8, [r6, #-6]
 8013458:	408c      	lsls	r4, r1
 801345a:	f304 040f 	ssat	r4, #16, r4
 801345e:	b2a5      	uxth	r5, r4
 8013460:	fa08 f401 	lsl.w	r4, r8, r1
 8013464:	f304 040f 	ssat	r4, #16, r4
 8013468:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 801346c:	f847 4c08 	str.w	r4, [r7, #-8]
 8013470:	f936 4c04 	ldrsh.w	r4, [r6, #-4]
 8013474:	f936 8c02 	ldrsh.w	r8, [r6, #-2]
 8013478:	408c      	lsls	r4, r1
 801347a:	f304 040f 	ssat	r4, #16, r4
 801347e:	b2a5      	uxth	r5, r4
 8013480:	f1bc 0c01 	subs.w	ip, ip, #1
 8013484:	fa08 f401 	lsl.w	r4, r8, r1
 8013488:	f304 040f 	ssat	r4, #16, r4
 801348c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8013490:	f847 4c04 	str.w	r4, [r7, #-4]
 8013494:	f106 0608 	add.w	r6, r6, #8
 8013498:	f107 0708 	add.w	r7, r7, #8
 801349c:	d1d8      	bne.n	8013450 <arm_shift_q15+0x98>
 801349e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80134a2:	4470      	add	r0, lr
 80134a4:	4472      	add	r2, lr
 80134a6:	f013 0303 	ands.w	r3, r3, #3
 80134aa:	d0c7      	beq.n	801343c <arm_shift_q15+0x84>
 80134ac:	3a02      	subs	r2, #2
 80134ae:	f930 4b02 	ldrsh.w	r4, [r0], #2
 80134b2:	3b01      	subs	r3, #1
 80134b4:	fa04 f401 	lsl.w	r4, r4, r1
 80134b8:	f304 040f 	ssat	r4, #16, r4
 80134bc:	f822 4f02 	strh.w	r4, [r2, #2]!
 80134c0:	d1f5      	bne.n	80134ae <arm_shift_q15+0xf6>
 80134c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134c6:	bf00      	nop

080134c8 <arm_dot_prod_f32>:
 80134c8:	b4f0      	push	{r4, r5, r6, r7}
 80134ca:	0897      	lsrs	r7, r2, #2
 80134cc:	eddf 5a20 	vldr	s11, [pc, #128]	; 8013550 <arm_dot_prod_f32+0x88>
 80134d0:	d02d      	beq.n	801352e <arm_dot_prod_f32+0x66>
 80134d2:	f100 0510 	add.w	r5, r0, #16
 80134d6:	f101 0410 	add.w	r4, r1, #16
 80134da:	463e      	mov	r6, r7
 80134dc:	ed54 7a04 	vldr	s15, [r4, #-16]
 80134e0:	ed15 6a04 	vldr	s12, [r5, #-16]
 80134e4:	ed55 6a03 	vldr	s13, [r5, #-12]
 80134e8:	ed54 3a03 	vldr	s7, [r4, #-12]
 80134ec:	ed15 7a02 	vldr	s14, [r5, #-8]
 80134f0:	ed14 4a02 	vldr	s8, [r4, #-8]
 80134f4:	ed15 5a01 	vldr	s10, [r5, #-4]
 80134f8:	ed54 4a01 	vldr	s9, [r4, #-4]
 80134fc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8013500:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8013504:	ee76 7a25 	vadd.f32	s15, s12, s11
 8013508:	ee27 7a04 	vmul.f32	s14, s14, s8
 801350c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013510:	ee65 5a24 	vmul.f32	s11, s10, s9
 8013514:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013518:	3e01      	subs	r6, #1
 801351a:	f105 0510 	add.w	r5, r5, #16
 801351e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8013522:	f104 0410 	add.w	r4, r4, #16
 8013526:	d1d9      	bne.n	80134dc <arm_dot_prod_f32+0x14>
 8013528:	013f      	lsls	r7, r7, #4
 801352a:	4438      	add	r0, r7
 801352c:	4439      	add	r1, r7
 801352e:	f012 0203 	ands.w	r2, r2, #3
 8013532:	d009      	beq.n	8013548 <arm_dot_prod_f32+0x80>
 8013534:	ecf0 7a01 	vldmia	r0!, {s15}
 8013538:	ecb1 7a01 	vldmia	r1!, {s14}
 801353c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013540:	3a01      	subs	r2, #1
 8013542:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8013546:	d1f5      	bne.n	8013534 <arm_dot_prod_f32+0x6c>
 8013548:	edc3 5a00 	vstr	s11, [r3]
 801354c:	bcf0      	pop	{r4, r5, r6, r7}
 801354e:	4770      	bx	lr
 8013550:	00000000 	.word	0x00000000

08013554 <__libc_init_array>:
 8013554:	b570      	push	{r4, r5, r6, lr}
 8013556:	4e0d      	ldr	r6, [pc, #52]	; (801358c <__libc_init_array+0x38>)
 8013558:	4c0d      	ldr	r4, [pc, #52]	; (8013590 <__libc_init_array+0x3c>)
 801355a:	1ba4      	subs	r4, r4, r6
 801355c:	10a4      	asrs	r4, r4, #2
 801355e:	2500      	movs	r5, #0
 8013560:	42a5      	cmp	r5, r4
 8013562:	d109      	bne.n	8013578 <__libc_init_array+0x24>
 8013564:	4e0b      	ldr	r6, [pc, #44]	; (8013594 <__libc_init_array+0x40>)
 8013566:	4c0c      	ldr	r4, [pc, #48]	; (8013598 <__libc_init_array+0x44>)
 8013568:	f000 faf0 	bl	8013b4c <_init>
 801356c:	1ba4      	subs	r4, r4, r6
 801356e:	10a4      	asrs	r4, r4, #2
 8013570:	2500      	movs	r5, #0
 8013572:	42a5      	cmp	r5, r4
 8013574:	d105      	bne.n	8013582 <__libc_init_array+0x2e>
 8013576:	bd70      	pop	{r4, r5, r6, pc}
 8013578:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801357c:	4798      	blx	r3
 801357e:	3501      	adds	r5, #1
 8013580:	e7ee      	b.n	8013560 <__libc_init_array+0xc>
 8013582:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013586:	4798      	blx	r3
 8013588:	3501      	adds	r5, #1
 801358a:	e7f2      	b.n	8013572 <__libc_init_array+0x1e>
 801358c:	080171c4 	.word	0x080171c4
 8013590:	080171c4 	.word	0x080171c4
 8013594:	080171c4 	.word	0x080171c4
 8013598:	080171c8 	.word	0x080171c8

0801359c <memcpy>:
 801359c:	b510      	push	{r4, lr}
 801359e:	1e43      	subs	r3, r0, #1
 80135a0:	440a      	add	r2, r1
 80135a2:	4291      	cmp	r1, r2
 80135a4:	d100      	bne.n	80135a8 <memcpy+0xc>
 80135a6:	bd10      	pop	{r4, pc}
 80135a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80135ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80135b0:	e7f7      	b.n	80135a2 <memcpy+0x6>

080135b2 <memset>:
 80135b2:	4402      	add	r2, r0
 80135b4:	4603      	mov	r3, r0
 80135b6:	4293      	cmp	r3, r2
 80135b8:	d100      	bne.n	80135bc <memset+0xa>
 80135ba:	4770      	bx	lr
 80135bc:	f803 1b01 	strb.w	r1, [r3], #1
 80135c0:	e7f9      	b.n	80135b6 <memset+0x4>

080135c2 <strncpy>:
 80135c2:	b570      	push	{r4, r5, r6, lr}
 80135c4:	4604      	mov	r4, r0
 80135c6:	b902      	cbnz	r2, 80135ca <strncpy+0x8>
 80135c8:	bd70      	pop	{r4, r5, r6, pc}
 80135ca:	4623      	mov	r3, r4
 80135cc:	f811 5b01 	ldrb.w	r5, [r1], #1
 80135d0:	f803 5b01 	strb.w	r5, [r3], #1
 80135d4:	1e56      	subs	r6, r2, #1
 80135d6:	b91d      	cbnz	r5, 80135e0 <strncpy+0x1e>
 80135d8:	4414      	add	r4, r2
 80135da:	42a3      	cmp	r3, r4
 80135dc:	d103      	bne.n	80135e6 <strncpy+0x24>
 80135de:	bd70      	pop	{r4, r5, r6, pc}
 80135e0:	461c      	mov	r4, r3
 80135e2:	4632      	mov	r2, r6
 80135e4:	e7ef      	b.n	80135c6 <strncpy+0x4>
 80135e6:	f803 5b01 	strb.w	r5, [r3], #1
 80135ea:	e7f6      	b.n	80135da <strncpy+0x18>

080135ec <round>:
 80135ec:	ec51 0b10 	vmov	r0, r1, d0
 80135f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135f2:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80135f6:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 80135fa:	2c13      	cmp	r4, #19
 80135fc:	460b      	mov	r3, r1
 80135fe:	460f      	mov	r7, r1
 8013600:	dc17      	bgt.n	8013632 <round+0x46>
 8013602:	2c00      	cmp	r4, #0
 8013604:	da09      	bge.n	801361a <round+0x2e>
 8013606:	3401      	adds	r4, #1
 8013608:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801360c:	d103      	bne.n	8013616 <round+0x2a>
 801360e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8013612:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013616:	2100      	movs	r1, #0
 8013618:	e028      	b.n	801366c <round+0x80>
 801361a:	4a16      	ldr	r2, [pc, #88]	; (8013674 <round+0x88>)
 801361c:	4122      	asrs	r2, r4
 801361e:	4211      	tst	r1, r2
 8013620:	d100      	bne.n	8013624 <round+0x38>
 8013622:	b180      	cbz	r0, 8013646 <round+0x5a>
 8013624:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013628:	4123      	asrs	r3, r4
 801362a:	443b      	add	r3, r7
 801362c:	ea23 0302 	bic.w	r3, r3, r2
 8013630:	e7f1      	b.n	8013616 <round+0x2a>
 8013632:	2c33      	cmp	r4, #51	; 0x33
 8013634:	dd0a      	ble.n	801364c <round+0x60>
 8013636:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801363a:	d104      	bne.n	8013646 <round+0x5a>
 801363c:	ee10 2a10 	vmov	r2, s0
 8013640:	460b      	mov	r3, r1
 8013642:	f7ec fde3 	bl	800020c <__adddf3>
 8013646:	ec41 0b10 	vmov	d0, r0, r1
 801364a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801364c:	f2a5 4213 	subw	r2, r5, #1043	; 0x413
 8013650:	f04f 35ff 	mov.w	r5, #4294967295
 8013654:	40d5      	lsrs	r5, r2
 8013656:	4228      	tst	r0, r5
 8013658:	d0f5      	beq.n	8013646 <round+0x5a>
 801365a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801365e:	2201      	movs	r2, #1
 8013660:	40a2      	lsls	r2, r4
 8013662:	1812      	adds	r2, r2, r0
 8013664:	bf28      	it	cs
 8013666:	3301      	addcs	r3, #1
 8013668:	ea22 0105 	bic.w	r1, r2, r5
 801366c:	4608      	mov	r0, r1
 801366e:	4619      	mov	r1, r3
 8013670:	e7e9      	b.n	8013646 <round+0x5a>
 8013672:	bf00      	nop
 8013674:	000fffff 	.word	0x000fffff

08013678 <sqrt>:
 8013678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801367c:	ed2d 8b02 	vpush	{d8}
 8013680:	b08b      	sub	sp, #44	; 0x2c
 8013682:	ec55 4b10 	vmov	r4, r5, d0
 8013686:	f000 f8cb 	bl	8013820 <__ieee754_sqrt>
 801368a:	4b26      	ldr	r3, [pc, #152]	; (8013724 <sqrt+0xac>)
 801368c:	eeb0 8a40 	vmov.f32	s16, s0
 8013690:	eef0 8a60 	vmov.f32	s17, s1
 8013694:	f993 6000 	ldrsb.w	r6, [r3]
 8013698:	1c73      	adds	r3, r6, #1
 801369a:	d02a      	beq.n	80136f2 <sqrt+0x7a>
 801369c:	4622      	mov	r2, r4
 801369e:	462b      	mov	r3, r5
 80136a0:	4620      	mov	r0, r4
 80136a2:	4629      	mov	r1, r5
 80136a4:	f7ed f9fe 	bl	8000aa4 <__aeabi_dcmpun>
 80136a8:	4607      	mov	r7, r0
 80136aa:	bb10      	cbnz	r0, 80136f2 <sqrt+0x7a>
 80136ac:	f04f 0800 	mov.w	r8, #0
 80136b0:	f04f 0900 	mov.w	r9, #0
 80136b4:	4642      	mov	r2, r8
 80136b6:	464b      	mov	r3, r9
 80136b8:	4620      	mov	r0, r4
 80136ba:	4629      	mov	r1, r5
 80136bc:	f7ed f9ca 	bl	8000a54 <__aeabi_dcmplt>
 80136c0:	b1b8      	cbz	r0, 80136f2 <sqrt+0x7a>
 80136c2:	2301      	movs	r3, #1
 80136c4:	9300      	str	r3, [sp, #0]
 80136c6:	4b18      	ldr	r3, [pc, #96]	; (8013728 <sqrt+0xb0>)
 80136c8:	9301      	str	r3, [sp, #4]
 80136ca:	9708      	str	r7, [sp, #32]
 80136cc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80136d0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80136d4:	b9b6      	cbnz	r6, 8013704 <sqrt+0x8c>
 80136d6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80136da:	4668      	mov	r0, sp
 80136dc:	f000 fa24 	bl	8013b28 <matherr>
 80136e0:	b1d0      	cbz	r0, 8013718 <sqrt+0xa0>
 80136e2:	9b08      	ldr	r3, [sp, #32]
 80136e4:	b11b      	cbz	r3, 80136ee <sqrt+0x76>
 80136e6:	f000 fa2b 	bl	8013b40 <__errno>
 80136ea:	9b08      	ldr	r3, [sp, #32]
 80136ec:	6003      	str	r3, [r0, #0]
 80136ee:	ed9d 8b06 	vldr	d8, [sp, #24]
 80136f2:	eeb0 0a48 	vmov.f32	s0, s16
 80136f6:	eef0 0a68 	vmov.f32	s1, s17
 80136fa:	b00b      	add	sp, #44	; 0x2c
 80136fc:	ecbd 8b02 	vpop	{d8}
 8013700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013704:	4642      	mov	r2, r8
 8013706:	464b      	mov	r3, r9
 8013708:	4640      	mov	r0, r8
 801370a:	4649      	mov	r1, r9
 801370c:	f7ed f85a 	bl	80007c4 <__aeabi_ddiv>
 8013710:	2e02      	cmp	r6, #2
 8013712:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013716:	d1e0      	bne.n	80136da <sqrt+0x62>
 8013718:	f000 fa12 	bl	8013b40 <__errno>
 801371c:	2321      	movs	r3, #33	; 0x21
 801371e:	6003      	str	r3, [r0, #0]
 8013720:	e7df      	b.n	80136e2 <sqrt+0x6a>
 8013722:	bf00      	nop
 8013724:	20000052 	.word	0x20000052
 8013728:	08017198 	.word	0x08017198

0801372c <expf>:
 801372c:	b530      	push	{r4, r5, lr}
 801372e:	ed2d 8b02 	vpush	{d8}
 8013732:	4d35      	ldr	r5, [pc, #212]	; (8013808 <expf+0xdc>)
 8013734:	b08b      	sub	sp, #44	; 0x2c
 8013736:	eeb0 8a40 	vmov.f32	s16, s0
 801373a:	f000 f921 	bl	8013980 <__ieee754_expf>
 801373e:	f995 3000 	ldrsb.w	r3, [r5]
 8013742:	3301      	adds	r3, #1
 8013744:	ee10 4a10 	vmov	r4, s0
 8013748:	d030      	beq.n	80137ac <expf+0x80>
 801374a:	eeb0 0a48 	vmov.f32	s0, s16
 801374e:	f000 f9ed 	bl	8013b2c <finitef>
 8013752:	b358      	cbz	r0, 80137ac <expf+0x80>
 8013754:	eddf 7a2d 	vldr	s15, [pc, #180]	; 801380c <expf+0xe0>
 8013758:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801375c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013760:	dd35      	ble.n	80137ce <expf+0xa2>
 8013762:	2303      	movs	r3, #3
 8013764:	9300      	str	r3, [sp, #0]
 8013766:	4b2a      	ldr	r3, [pc, #168]	; (8013810 <expf+0xe4>)
 8013768:	9301      	str	r3, [sp, #4]
 801376a:	ee18 0a10 	vmov	r0, s16
 801376e:	2300      	movs	r3, #0
 8013770:	9308      	str	r3, [sp, #32]
 8013772:	f7ec fea9 	bl	80004c8 <__aeabi_f2d>
 8013776:	f995 3000 	ldrsb.w	r3, [r5]
 801377a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801377e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013782:	b9cb      	cbnz	r3, 80137b8 <expf+0x8c>
 8013784:	4b23      	ldr	r3, [pc, #140]	; (8013814 <expf+0xe8>)
 8013786:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801378a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801378e:	4668      	mov	r0, sp
 8013790:	f000 f9ca 	bl	8013b28 <matherr>
 8013794:	b1b0      	cbz	r0, 80137c4 <expf+0x98>
 8013796:	9b08      	ldr	r3, [sp, #32]
 8013798:	b11b      	cbz	r3, 80137a2 <expf+0x76>
 801379a:	f000 f9d1 	bl	8013b40 <__errno>
 801379e:	9b08      	ldr	r3, [sp, #32]
 80137a0:	6003      	str	r3, [r0, #0]
 80137a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80137a6:	f7ed f9db 	bl	8000b60 <__aeabi_d2f>
 80137aa:	4604      	mov	r4, r0
 80137ac:	ee00 4a10 	vmov	s0, r4
 80137b0:	b00b      	add	sp, #44	; 0x2c
 80137b2:	ecbd 8b02 	vpop	{d8}
 80137b6:	bd30      	pop	{r4, r5, pc}
 80137b8:	4917      	ldr	r1, [pc, #92]	; (8013818 <expf+0xec>)
 80137ba:	2000      	movs	r0, #0
 80137bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80137c0:	2b02      	cmp	r3, #2
 80137c2:	d1e4      	bne.n	801378e <expf+0x62>
 80137c4:	f000 f9bc 	bl	8013b40 <__errno>
 80137c8:	2322      	movs	r3, #34	; 0x22
 80137ca:	6003      	str	r3, [r0, #0]
 80137cc:	e7e3      	b.n	8013796 <expf+0x6a>
 80137ce:	eddf 7a13 	vldr	s15, [pc, #76]	; 801381c <expf+0xf0>
 80137d2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80137d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137da:	d5e7      	bpl.n	80137ac <expf+0x80>
 80137dc:	2304      	movs	r3, #4
 80137de:	9300      	str	r3, [sp, #0]
 80137e0:	4b0b      	ldr	r3, [pc, #44]	; (8013810 <expf+0xe4>)
 80137e2:	9301      	str	r3, [sp, #4]
 80137e4:	ee18 0a10 	vmov	r0, s16
 80137e8:	2300      	movs	r3, #0
 80137ea:	9308      	str	r3, [sp, #32]
 80137ec:	f7ec fe6c 	bl	80004c8 <__aeabi_f2d>
 80137f0:	2300      	movs	r3, #0
 80137f2:	2200      	movs	r2, #0
 80137f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80137f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80137fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013800:	f995 3000 	ldrsb.w	r3, [r5]
 8013804:	e7dc      	b.n	80137c0 <expf+0x94>
 8013806:	bf00      	nop
 8013808:	20000052 	.word	0x20000052
 801380c:	42b17180 	.word	0x42b17180
 8013810:	0801719d 	.word	0x0801719d
 8013814:	47efffff 	.word	0x47efffff
 8013818:	7ff00000 	.word	0x7ff00000
 801381c:	c2cff1b5 	.word	0xc2cff1b5

08013820 <__ieee754_sqrt>:
 8013820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013824:	ec55 4b10 	vmov	r4, r5, d0
 8013828:	4e54      	ldr	r6, [pc, #336]	; (801397c <__ieee754_sqrt+0x15c>)
 801382a:	43ae      	bics	r6, r5
 801382c:	ee10 0a10 	vmov	r0, s0
 8013830:	462b      	mov	r3, r5
 8013832:	462a      	mov	r2, r5
 8013834:	4621      	mov	r1, r4
 8013836:	d113      	bne.n	8013860 <__ieee754_sqrt+0x40>
 8013838:	ee10 2a10 	vmov	r2, s0
 801383c:	462b      	mov	r3, r5
 801383e:	ee10 0a10 	vmov	r0, s0
 8013842:	4629      	mov	r1, r5
 8013844:	f7ec fe94 	bl	8000570 <__aeabi_dmul>
 8013848:	4602      	mov	r2, r0
 801384a:	460b      	mov	r3, r1
 801384c:	4620      	mov	r0, r4
 801384e:	4629      	mov	r1, r5
 8013850:	f7ec fcdc 	bl	800020c <__adddf3>
 8013854:	4604      	mov	r4, r0
 8013856:	460d      	mov	r5, r1
 8013858:	ec45 4b10 	vmov	d0, r4, r5
 801385c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013860:	2d00      	cmp	r5, #0
 8013862:	dc10      	bgt.n	8013886 <__ieee754_sqrt+0x66>
 8013864:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013868:	4330      	orrs	r0, r6
 801386a:	d0f5      	beq.n	8013858 <__ieee754_sqrt+0x38>
 801386c:	b15d      	cbz	r5, 8013886 <__ieee754_sqrt+0x66>
 801386e:	ee10 2a10 	vmov	r2, s0
 8013872:	462b      	mov	r3, r5
 8013874:	4620      	mov	r0, r4
 8013876:	4629      	mov	r1, r5
 8013878:	f7ec fcc6 	bl	8000208 <__aeabi_dsub>
 801387c:	4602      	mov	r2, r0
 801387e:	460b      	mov	r3, r1
 8013880:	f7ec ffa0 	bl	80007c4 <__aeabi_ddiv>
 8013884:	e7e6      	b.n	8013854 <__ieee754_sqrt+0x34>
 8013886:	151b      	asrs	r3, r3, #20
 8013888:	d10c      	bne.n	80138a4 <__ieee754_sqrt+0x84>
 801388a:	2a00      	cmp	r2, #0
 801388c:	d06d      	beq.n	801396a <__ieee754_sqrt+0x14a>
 801388e:	2000      	movs	r0, #0
 8013890:	02d6      	lsls	r6, r2, #11
 8013892:	d56e      	bpl.n	8013972 <__ieee754_sqrt+0x152>
 8013894:	1e44      	subs	r4, r0, #1
 8013896:	1b1b      	subs	r3, r3, r4
 8013898:	f1c0 0420 	rsb	r4, r0, #32
 801389c:	fa21 f404 	lsr.w	r4, r1, r4
 80138a0:	4322      	orrs	r2, r4
 80138a2:	4081      	lsls	r1, r0
 80138a4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80138a8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80138ac:	07dd      	lsls	r5, r3, #31
 80138ae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80138b2:	bf42      	ittt	mi
 80138b4:	0052      	lslmi	r2, r2, #1
 80138b6:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 80138ba:	0049      	lslmi	r1, r1, #1
 80138bc:	1058      	asrs	r0, r3, #1
 80138be:	2500      	movs	r5, #0
 80138c0:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 80138c4:	441a      	add	r2, r3
 80138c6:	0049      	lsls	r1, r1, #1
 80138c8:	2316      	movs	r3, #22
 80138ca:	462c      	mov	r4, r5
 80138cc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80138d0:	19a7      	adds	r7, r4, r6
 80138d2:	4297      	cmp	r7, r2
 80138d4:	bfde      	ittt	le
 80138d6:	1bd2      	suble	r2, r2, r7
 80138d8:	19bc      	addle	r4, r7, r6
 80138da:	19ad      	addle	r5, r5, r6
 80138dc:	0052      	lsls	r2, r2, #1
 80138de:	3b01      	subs	r3, #1
 80138e0:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80138e4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80138e8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80138ec:	d1f0      	bne.n	80138d0 <__ieee754_sqrt+0xb0>
 80138ee:	f04f 0e20 	mov.w	lr, #32
 80138f2:	469c      	mov	ip, r3
 80138f4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80138f8:	42a2      	cmp	r2, r4
 80138fa:	eb06 070c 	add.w	r7, r6, ip
 80138fe:	dc02      	bgt.n	8013906 <__ieee754_sqrt+0xe6>
 8013900:	d112      	bne.n	8013928 <__ieee754_sqrt+0x108>
 8013902:	428f      	cmp	r7, r1
 8013904:	d810      	bhi.n	8013928 <__ieee754_sqrt+0x108>
 8013906:	2f00      	cmp	r7, #0
 8013908:	eb07 0c06 	add.w	ip, r7, r6
 801390c:	da34      	bge.n	8013978 <__ieee754_sqrt+0x158>
 801390e:	f1bc 0f00 	cmp.w	ip, #0
 8013912:	db31      	blt.n	8013978 <__ieee754_sqrt+0x158>
 8013914:	f104 0801 	add.w	r8, r4, #1
 8013918:	1b12      	subs	r2, r2, r4
 801391a:	428f      	cmp	r7, r1
 801391c:	bf88      	it	hi
 801391e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8013922:	1bc9      	subs	r1, r1, r7
 8013924:	4433      	add	r3, r6
 8013926:	4644      	mov	r4, r8
 8013928:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 801392c:	f1be 0e01 	subs.w	lr, lr, #1
 8013930:	443a      	add	r2, r7
 8013932:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013936:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801393a:	d1dd      	bne.n	80138f8 <__ieee754_sqrt+0xd8>
 801393c:	430a      	orrs	r2, r1
 801393e:	d006      	beq.n	801394e <__ieee754_sqrt+0x12e>
 8013940:	1c5c      	adds	r4, r3, #1
 8013942:	bf13      	iteet	ne
 8013944:	3301      	addne	r3, #1
 8013946:	3501      	addeq	r5, #1
 8013948:	4673      	moveq	r3, lr
 801394a:	f023 0301 	bicne.w	r3, r3, #1
 801394e:	106a      	asrs	r2, r5, #1
 8013950:	085b      	lsrs	r3, r3, #1
 8013952:	07e9      	lsls	r1, r5, #31
 8013954:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8013958:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801395c:	bf48      	it	mi
 801395e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8013962:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8013966:	461c      	mov	r4, r3
 8013968:	e776      	b.n	8013858 <__ieee754_sqrt+0x38>
 801396a:	0aca      	lsrs	r2, r1, #11
 801396c:	3b15      	subs	r3, #21
 801396e:	0549      	lsls	r1, r1, #21
 8013970:	e78b      	b.n	801388a <__ieee754_sqrt+0x6a>
 8013972:	0052      	lsls	r2, r2, #1
 8013974:	3001      	adds	r0, #1
 8013976:	e78b      	b.n	8013890 <__ieee754_sqrt+0x70>
 8013978:	46a0      	mov	r8, r4
 801397a:	e7cd      	b.n	8013918 <__ieee754_sqrt+0xf8>
 801397c:	7ff00000 	.word	0x7ff00000

08013980 <__ieee754_expf>:
 8013980:	ee10 2a10 	vmov	r2, s0
 8013984:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8013988:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801398c:	d902      	bls.n	8013994 <__ieee754_expf+0x14>
 801398e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013992:	4770      	bx	lr
 8013994:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8013998:	d106      	bne.n	80139a8 <__ieee754_expf+0x28>
 801399a:	eddf 7a51 	vldr	s15, [pc, #324]	; 8013ae0 <__ieee754_expf+0x160>
 801399e:	2b00      	cmp	r3, #0
 80139a0:	bf18      	it	ne
 80139a2:	eeb0 0a67 	vmovne.f32	s0, s15
 80139a6:	4770      	bx	lr
 80139a8:	484e      	ldr	r0, [pc, #312]	; (8013ae4 <__ieee754_expf+0x164>)
 80139aa:	4282      	cmp	r2, r0
 80139ac:	dd04      	ble.n	80139b8 <__ieee754_expf+0x38>
 80139ae:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8013ae8 <__ieee754_expf+0x168>
 80139b2:	ee20 0a00 	vmul.f32	s0, s0, s0
 80139b6:	4770      	bx	lr
 80139b8:	2a00      	cmp	r2, #0
 80139ba:	da03      	bge.n	80139c4 <__ieee754_expf+0x44>
 80139bc:	4a4b      	ldr	r2, [pc, #300]	; (8013aec <__ieee754_expf+0x16c>)
 80139be:	4291      	cmp	r1, r2
 80139c0:	f200 808a 	bhi.w	8013ad8 <__ieee754_expf+0x158>
 80139c4:	4a4a      	ldr	r2, [pc, #296]	; (8013af0 <__ieee754_expf+0x170>)
 80139c6:	4291      	cmp	r1, r2
 80139c8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80139cc:	d954      	bls.n	8013a78 <__ieee754_expf+0xf8>
 80139ce:	4a49      	ldr	r2, [pc, #292]	; (8013af4 <__ieee754_expf+0x174>)
 80139d0:	4291      	cmp	r1, r2
 80139d2:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80139d6:	d836      	bhi.n	8013a46 <__ieee754_expf+0xc6>
 80139d8:	4947      	ldr	r1, [pc, #284]	; (8013af8 <__ieee754_expf+0x178>)
 80139da:	4411      	add	r1, r2
 80139dc:	ed91 7a00 	vldr	s14, [r1]
 80139e0:	4946      	ldr	r1, [pc, #280]	; (8013afc <__ieee754_expf+0x17c>)
 80139e2:	440a      	add	r2, r1
 80139e4:	edd2 7a00 	vldr	s15, [r2]
 80139e8:	ee30 7a47 	vsub.f32	s14, s0, s14
 80139ec:	f1c3 0201 	rsb	r2, r3, #1
 80139f0:	1ad2      	subs	r2, r2, r3
 80139f2:	ee37 0a67 	vsub.f32	s0, s14, s15
 80139f6:	ee60 6a00 	vmul.f32	s13, s0, s0
 80139fa:	eddf 5a41 	vldr	s11, [pc, #260]	; 8013b00 <__ieee754_expf+0x180>
 80139fe:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8013b04 <__ieee754_expf+0x184>
 8013a02:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8013a06:	eddf 5a40 	vldr	s11, [pc, #256]	; 8013b08 <__ieee754_expf+0x188>
 8013a0a:	eee6 5a85 	vfma.f32	s11, s13, s10
 8013a0e:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8013b0c <__ieee754_expf+0x18c>
 8013a12:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8013a16:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8013b10 <__ieee754_expf+0x190>
 8013a1a:	eee6 5a85 	vfma.f32	s11, s13, s10
 8013a1e:	eeb0 5a40 	vmov.f32	s10, s0
 8013a22:	eea6 5ae5 	vfms.f32	s10, s13, s11
 8013a26:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8013a2a:	eef0 6a45 	vmov.f32	s13, s10
 8013a2e:	ee20 5a05 	vmul.f32	s10, s0, s10
 8013a32:	bb92      	cbnz	r2, 8013a9a <__ieee754_expf+0x11a>
 8013a34:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8013a38:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8013a3c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8013a40:	ee36 0a40 	vsub.f32	s0, s12, s0
 8013a44:	4770      	bx	lr
 8013a46:	4b33      	ldr	r3, [pc, #204]	; (8013b14 <__ieee754_expf+0x194>)
 8013a48:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8013b18 <__ieee754_expf+0x198>
 8013a4c:	4413      	add	r3, r2
 8013a4e:	edd3 7a00 	vldr	s15, [r3]
 8013a52:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013a56:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8013b1c <__ieee754_expf+0x19c>
 8013a5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013a5e:	ee17 2a90 	vmov	r2, s15
 8013a62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a66:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013a6a:	eeb0 7a40 	vmov.f32	s14, s0
 8013a6e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8013b20 <__ieee754_expf+0x1a0>
 8013a72:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013a76:	e7bc      	b.n	80139f2 <__ieee754_expf+0x72>
 8013a78:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8013a7c:	d20b      	bcs.n	8013a96 <__ieee754_expf+0x116>
 8013a7e:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8013ae8 <__ieee754_expf+0x168>
 8013a82:	ee70 6a26 	vadd.f32	s13, s0, s13
 8013a86:	eef4 6ac6 	vcmpe.f32	s13, s12
 8013a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a8e:	dd02      	ble.n	8013a96 <__ieee754_expf+0x116>
 8013a90:	ee30 0a06 	vadd.f32	s0, s0, s12
 8013a94:	4770      	bx	lr
 8013a96:	2200      	movs	r2, #0
 8013a98:	e7ad      	b.n	80139f6 <__ieee754_expf+0x76>
 8013a9a:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8013a9e:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8013aa2:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8013aa6:	bfb8      	it	lt
 8013aa8:	3264      	addlt	r2, #100	; 0x64
 8013aaa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013aae:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8013ab2:	ee76 7a40 	vsub.f32	s15, s12, s0
 8013ab6:	ee17 3a90 	vmov	r3, s15
 8013aba:	bfab      	itete	ge
 8013abc:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8013ac0:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8013ac4:	ee00 3a10 	vmovge	s0, r3
 8013ac8:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8013b24 <__ieee754_expf+0x1a4>
 8013acc:	bfbc      	itt	lt
 8013ace:	ee00 3a10 	vmovlt	s0, r3
 8013ad2:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8013ad6:	4770      	bx	lr
 8013ad8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013ae0 <__ieee754_expf+0x160>
 8013adc:	4770      	bx	lr
 8013ade:	bf00      	nop
 8013ae0:	00000000 	.word	0x00000000
 8013ae4:	42b17217 	.word	0x42b17217
 8013ae8:	7149f2ca 	.word	0x7149f2ca
 8013aec:	42cff1b5 	.word	0x42cff1b5
 8013af0:	3eb17218 	.word	0x3eb17218
 8013af4:	3f851591 	.word	0x3f851591
 8013af8:	080171ac 	.word	0x080171ac
 8013afc:	080171b4 	.word	0x080171b4
 8013b00:	3331bb4c 	.word	0x3331bb4c
 8013b04:	b5ddea0e 	.word	0xb5ddea0e
 8013b08:	388ab355 	.word	0x388ab355
 8013b0c:	bb360b61 	.word	0xbb360b61
 8013b10:	3e2aaaab 	.word	0x3e2aaaab
 8013b14:	080171a4 	.word	0x080171a4
 8013b18:	3fb8aa3b 	.word	0x3fb8aa3b
 8013b1c:	3f317180 	.word	0x3f317180
 8013b20:	3717f7d1 	.word	0x3717f7d1
 8013b24:	0d800000 	.word	0x0d800000

08013b28 <matherr>:
 8013b28:	2000      	movs	r0, #0
 8013b2a:	4770      	bx	lr

08013b2c <finitef>:
 8013b2c:	ee10 3a10 	vmov	r3, s0
 8013b30:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8013b34:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8013b38:	bfac      	ite	ge
 8013b3a:	2000      	movge	r0, #0
 8013b3c:	2001      	movlt	r0, #1
 8013b3e:	4770      	bx	lr

08013b40 <__errno>:
 8013b40:	4b01      	ldr	r3, [pc, #4]	; (8013b48 <__errno+0x8>)
 8013b42:	6818      	ldr	r0, [r3, #0]
 8013b44:	4770      	bx	lr
 8013b46:	bf00      	nop
 8013b48:	20000054 	.word	0x20000054

08013b4c <_init>:
 8013b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b4e:	bf00      	nop
 8013b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b52:	bc08      	pop	{r3}
 8013b54:	469e      	mov	lr, r3
 8013b56:	4770      	bx	lr

08013b58 <_fini>:
 8013b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b5a:	bf00      	nop
 8013b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b5e:	bc08      	pop	{r3}
 8013b60:	469e      	mov	lr, r3
 8013b62:	4770      	bx	lr
