
cd_synth_v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000142d4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003658  08014494  08014494  00024494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017aec  08017aec  00027aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017af4  08017af4  00027af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017af8  08017af8  00027af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b8  20000000  08017afc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000864c  200000b8  08017bb4  000300b8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20008704  08017bb4  00038704  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 10 .debug_info   000733df  00000000  00000000  000300e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b118  00000000  00000000  000a34c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0003cbb7  00000000  00000000  000ae5df  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000029f8  00000000  00000000  000eb198  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00008cb8  00000000  00000000  000edb90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000213ca  00000000  00000000  000f6848  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00012a7e  00000000  00000000  00117c12  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000ea  00000000  00000000  0012a690  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000903c  00000000  00000000  0012a77c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000b8 	.word	0x200000b8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801447c 	.word	0x0801447c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000bc 	.word	0x200000bc
 80001fc:	0801447c 	.word	0x0801447c

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033e:	f1a4 0401 	sub.w	r4, r4, #1
 8000342:	d1e9      	bne.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f092 0f00 	teq	r2, #0
 80004ea:	bf14      	ite	ne
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000500:	e720      	b.n	8000344 <__adddf3+0x138>
 8000502:	bf00      	nop

08000504 <__aeabi_ul2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	e00a      	b.n	800052a <__aeabi_l2d+0x16>

08000514 <__aeabi_l2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000522:	d502      	bpl.n	800052a <__aeabi_l2d+0x16>
 8000524:	4240      	negs	r0, r0
 8000526:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800052e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000532:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000536:	f43f aedc 	beq.w	80002f2 <__adddf3+0xe6>
 800053a:	f04f 0203 	mov.w	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000552:	f1c2 0320 	rsb	r3, r2, #32
 8000556:	fa00 fc03 	lsl.w	ip, r0, r3
 800055a:	fa20 f002 	lsr.w	r0, r0, r2
 800055e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000562:	ea40 000e 	orr.w	r0, r0, lr
 8000566:	fa21 f102 	lsr.w	r1, r1, r2
 800056a:	4414      	add	r4, r2
 800056c:	e6c1      	b.n	80002f2 <__adddf3+0xe6>
 800056e:	bf00      	nop

08000570 <__aeabi_dmul>:
 8000570:	b570      	push	{r4, r5, r6, lr}
 8000572:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000576:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800057a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800057e:	bf1d      	ittte	ne
 8000580:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000584:	ea94 0f0c 	teqne	r4, ip
 8000588:	ea95 0f0c 	teqne	r5, ip
 800058c:	f000 f8de 	bleq	800074c <__aeabi_dmul+0x1dc>
 8000590:	442c      	add	r4, r5
 8000592:	ea81 0603 	eor.w	r6, r1, r3
 8000596:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800059a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800059e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005a2:	bf18      	it	ne
 80005a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b0:	d038      	beq.n	8000624 <__aeabi_dmul+0xb4>
 80005b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005c6:	f04f 0600 	mov.w	r6, #0
 80005ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ce:	f09c 0f00 	teq	ip, #0
 80005d2:	bf18      	it	ne
 80005d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e4:	d204      	bcs.n	80005f0 <__aeabi_dmul+0x80>
 80005e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ea:	416d      	adcs	r5, r5
 80005ec:	eb46 0606 	adc.w	r6, r6, r6
 80005f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000600:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000604:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000608:	bf88      	it	hi
 800060a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800060e:	d81e      	bhi.n	800064e <__aeabi_dmul+0xde>
 8000610:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000614:	bf08      	it	eq
 8000616:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800061a:	f150 0000 	adcs.w	r0, r0, #0
 800061e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000628:	ea46 0101 	orr.w	r1, r6, r1
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	ea81 0103 	eor.w	r1, r1, r3
 8000634:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000638:	bfc2      	ittt	gt
 800063a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800063e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000642:	bd70      	popgt	{r4, r5, r6, pc}
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f04f 0e00 	mov.w	lr, #0
 800064c:	3c01      	subs	r4, #1
 800064e:	f300 80ab 	bgt.w	80007a8 <__aeabi_dmul+0x238>
 8000652:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000656:	bfde      	ittt	le
 8000658:	2000      	movle	r0, #0
 800065a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800065e:	bd70      	pople	{r4, r5, r6, pc}
 8000660:	f1c4 0400 	rsb	r4, r4, #0
 8000664:	3c20      	subs	r4, #32
 8000666:	da35      	bge.n	80006d4 <__aeabi_dmul+0x164>
 8000668:	340c      	adds	r4, #12
 800066a:	dc1b      	bgt.n	80006a4 <__aeabi_dmul+0x134>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f305 	lsl.w	r3, r0, r5
 8000678:	fa20 f004 	lsr.w	r0, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000688:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800068c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000690:	fa21 f604 	lsr.w	r6, r1, r4
 8000694:	eb42 0106 	adc.w	r1, r2, r6
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 040c 	rsb	r4, r4, #12
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f304 	lsl.w	r3, r0, r4
 80006b0:	fa20 f005 	lsr.w	r0, r0, r5
 80006b4:	fa01 f204 	lsl.w	r2, r1, r4
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c4:	f141 0100 	adc.w	r1, r1, #0
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 0520 	rsb	r5, r4, #32
 80006d8:	fa00 f205 	lsl.w	r2, r0, r5
 80006dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e0:	fa20 f304 	lsr.w	r3, r0, r4
 80006e4:	fa01 f205 	lsl.w	r2, r1, r5
 80006e8:	ea43 0302 	orr.w	r3, r3, r2
 80006ec:	fa21 f004 	lsr.w	r0, r1, r4
 80006f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f4:	fa21 f204 	lsr.w	r2, r1, r4
 80006f8:	ea20 0002 	bic.w	r0, r0, r2
 80006fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f094 0f00 	teq	r4, #0
 8000710:	d10f      	bne.n	8000732 <__aeabi_dmul+0x1c2>
 8000712:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000716:	0040      	lsls	r0, r0, #1
 8000718:	eb41 0101 	adc.w	r1, r1, r1
 800071c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3c01      	subeq	r4, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1a6>
 8000726:	ea41 0106 	orr.w	r1, r1, r6
 800072a:	f095 0f00 	teq	r5, #0
 800072e:	bf18      	it	ne
 8000730:	4770      	bxne	lr
 8000732:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000736:	0052      	lsls	r2, r2, #1
 8000738:	eb43 0303 	adc.w	r3, r3, r3
 800073c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3d01      	subeq	r5, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1c6>
 8000746:	ea43 0306 	orr.w	r3, r3, r6
 800074a:	4770      	bx	lr
 800074c:	ea94 0f0c 	teq	r4, ip
 8000750:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000754:	bf18      	it	ne
 8000756:	ea95 0f0c 	teqne	r5, ip
 800075a:	d00c      	beq.n	8000776 <__aeabi_dmul+0x206>
 800075c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000760:	bf18      	it	ne
 8000762:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000766:	d1d1      	bne.n	800070c <__aeabi_dmul+0x19c>
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000770:	f04f 0000 	mov.w	r0, #0
 8000774:	bd70      	pop	{r4, r5, r6, pc}
 8000776:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077a:	bf06      	itte	eq
 800077c:	4610      	moveq	r0, r2
 800077e:	4619      	moveq	r1, r3
 8000780:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000784:	d019      	beq.n	80007ba <__aeabi_dmul+0x24a>
 8000786:	ea94 0f0c 	teq	r4, ip
 800078a:	d102      	bne.n	8000792 <__aeabi_dmul+0x222>
 800078c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000790:	d113      	bne.n	80007ba <__aeabi_dmul+0x24a>
 8000792:	ea95 0f0c 	teq	r5, ip
 8000796:	d105      	bne.n	80007a4 <__aeabi_dmul+0x234>
 8000798:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800079c:	bf1c      	itt	ne
 800079e:	4610      	movne	r0, r2
 80007a0:	4619      	movne	r1, r3
 80007a2:	d10a      	bne.n	80007ba <__aeabi_dmul+0x24a>
 80007a4:	ea81 0103 	eor.w	r1, r1, r3
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b4:	f04f 0000 	mov.w	r0, #0
 80007b8:	bd70      	pop	{r4, r5, r6, pc}
 80007ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007c2:	bd70      	pop	{r4, r5, r6, pc}

080007c4 <__aeabi_ddiv>:
 80007c4:	b570      	push	{r4, r5, r6, lr}
 80007c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007d2:	bf1d      	ittte	ne
 80007d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d8:	ea94 0f0c 	teqne	r4, ip
 80007dc:	ea95 0f0c 	teqne	r5, ip
 80007e0:	f000 f8a7 	bleq	8000932 <__aeabi_ddiv+0x16e>
 80007e4:	eba4 0405 	sub.w	r4, r4, r5
 80007e8:	ea81 0e03 	eor.w	lr, r1, r3
 80007ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f4:	f000 8088 	beq.w	8000908 <__aeabi_ddiv+0x144>
 80007f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000800:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000804:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000808:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800080c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000810:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000814:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000818:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800081c:	429d      	cmp	r5, r3
 800081e:	bf08      	it	eq
 8000820:	4296      	cmpeq	r6, r2
 8000822:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000826:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800082a:	d202      	bcs.n	8000832 <__aeabi_ddiv+0x6e>
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	1ab6      	subs	r6, r6, r2
 8000834:	eb65 0503 	sbc.w	r5, r5, r3
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000842:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 000c 	orrcs.w	r0, r0, ip
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a4:	d018      	beq.n	80008d8 <__aeabi_ddiv+0x114>
 80008a6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008aa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008b2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008b6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008be:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008c2:	d1c0      	bne.n	8000846 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	d10b      	bne.n	80008e2 <__aeabi_ddiv+0x11e>
 80008ca:	ea41 0100 	orr.w	r1, r1, r0
 80008ce:	f04f 0000 	mov.w	r0, #0
 80008d2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008d6:	e7b6      	b.n	8000846 <__aeabi_ddiv+0x82>
 80008d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008dc:	bf04      	itt	eq
 80008de:	4301      	orreq	r1, r0
 80008e0:	2000      	moveq	r0, #0
 80008e2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008e6:	bf88      	it	hi
 80008e8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008ec:	f63f aeaf 	bhi.w	800064e <__aeabi_dmul+0xde>
 80008f0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f4:	bf04      	itt	eq
 80008f6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008fe:	f150 0000 	adcs.w	r0, r0, #0
 8000902:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000906:	bd70      	pop	{r4, r5, r6, pc}
 8000908:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800090c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000910:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000914:	bfc2      	ittt	gt
 8000916:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800091e:	bd70      	popgt	{r4, r5, r6, pc}
 8000920:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000924:	f04f 0e00 	mov.w	lr, #0
 8000928:	3c01      	subs	r4, #1
 800092a:	e690      	b.n	800064e <__aeabi_dmul+0xde>
 800092c:	ea45 0e06 	orr.w	lr, r5, r6
 8000930:	e68d      	b.n	800064e <__aeabi_dmul+0xde>
 8000932:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000936:	ea94 0f0c 	teq	r4, ip
 800093a:	bf08      	it	eq
 800093c:	ea95 0f0c 	teqeq	r5, ip
 8000940:	f43f af3b 	beq.w	80007ba <__aeabi_dmul+0x24a>
 8000944:	ea94 0f0c 	teq	r4, ip
 8000948:	d10a      	bne.n	8000960 <__aeabi_ddiv+0x19c>
 800094a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800094e:	f47f af34 	bne.w	80007ba <__aeabi_dmul+0x24a>
 8000952:	ea95 0f0c 	teq	r5, ip
 8000956:	f47f af25 	bne.w	80007a4 <__aeabi_dmul+0x234>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e72c      	b.n	80007ba <__aeabi_dmul+0x24a>
 8000960:	ea95 0f0c 	teq	r5, ip
 8000964:	d106      	bne.n	8000974 <__aeabi_ddiv+0x1b0>
 8000966:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096a:	f43f aefd 	beq.w	8000768 <__aeabi_dmul+0x1f8>
 800096e:	4610      	mov	r0, r2
 8000970:	4619      	mov	r1, r3
 8000972:	e722      	b.n	80007ba <__aeabi_dmul+0x24a>
 8000974:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000978:	bf18      	it	ne
 800097a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800097e:	f47f aec5 	bne.w	800070c <__aeabi_dmul+0x19c>
 8000982:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000986:	f47f af0d 	bne.w	80007a4 <__aeabi_dmul+0x234>
 800098a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800098e:	f47f aeeb 	bne.w	8000768 <__aeabi_dmul+0x1f8>
 8000992:	e712      	b.n	80007ba <__aeabi_dmul+0x24a>

08000994 <__gedf2>:
 8000994:	f04f 3cff 	mov.w	ip, #4294967295
 8000998:	e006      	b.n	80009a8 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__ledf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	e002      	b.n	80009a8 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__cmpdf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009be:	d01b      	beq.n	80009f8 <__cmpdf2+0x54>
 80009c0:	b001      	add	sp, #4
 80009c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009c6:	bf0c      	ite	eq
 80009c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009cc:	ea91 0f03 	teqne	r1, r3
 80009d0:	bf02      	ittt	eq
 80009d2:	ea90 0f02 	teqeq	r0, r2
 80009d6:	2000      	moveq	r0, #0
 80009d8:	4770      	bxeq	lr
 80009da:	f110 0f00 	cmn.w	r0, #0
 80009de:	ea91 0f03 	teq	r1, r3
 80009e2:	bf58      	it	pl
 80009e4:	4299      	cmppl	r1, r3
 80009e6:	bf08      	it	eq
 80009e8:	4290      	cmpeq	r0, r2
 80009ea:	bf2c      	ite	cs
 80009ec:	17d8      	asrcs	r0, r3, #31
 80009ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009f2:	f040 0001 	orr.w	r0, r0, #1
 80009f6:	4770      	bx	lr
 80009f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d102      	bne.n	8000a08 <__cmpdf2+0x64>
 8000a02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a06:	d107      	bne.n	8000a18 <__cmpdf2+0x74>
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d1d6      	bne.n	80009c0 <__cmpdf2+0x1c>
 8000a12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a16:	d0d3      	beq.n	80009c0 <__cmpdf2+0x1c>
 8000a18:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdrcmple>:
 8000a20:	4684      	mov	ip, r0
 8000a22:	4610      	mov	r0, r2
 8000a24:	4662      	mov	r2, ip
 8000a26:	468c      	mov	ip, r1
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4663      	mov	r3, ip
 8000a2c:	e000      	b.n	8000a30 <__aeabi_cdcmpeq>
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdcmpeq>:
 8000a30:	b501      	push	{r0, lr}
 8000a32:	f7ff ffb7 	bl	80009a4 <__cmpdf2>
 8000a36:	2800      	cmp	r0, #0
 8000a38:	bf48      	it	mi
 8000a3a:	f110 0f00 	cmnmi.w	r0, #0
 8000a3e:	bd01      	pop	{r0, pc}

08000a40 <__aeabi_dcmpeq>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff fff4 	bl	8000a30 <__aeabi_cdcmpeq>
 8000a48:	bf0c      	ite	eq
 8000a4a:	2001      	moveq	r0, #1
 8000a4c:	2000      	movne	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmplt>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffea 	bl	8000a30 <__aeabi_cdcmpeq>
 8000a5c:	bf34      	ite	cc
 8000a5e:	2001      	movcc	r0, #1
 8000a60:	2000      	movcs	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmple>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffe0 	bl	8000a30 <__aeabi_cdcmpeq>
 8000a70:	bf94      	ite	ls
 8000a72:	2001      	movls	r0, #1
 8000a74:	2000      	movhi	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpge>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffce 	bl	8000a20 <__aeabi_cdrcmple>
 8000a84:	bf94      	ite	ls
 8000a86:	2001      	movls	r0, #1
 8000a88:	2000      	movhi	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmpgt>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffc4 	bl	8000a20 <__aeabi_cdrcmple>
 8000a98:	bf34      	ite	cc
 8000a9a:	2001      	movcc	r0, #1
 8000a9c:	2000      	movcs	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpun>:
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x10>
 8000aae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab2:	d10a      	bne.n	8000aca <__aeabi_dcmpun+0x26>
 8000ab4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x20>
 8000abe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac2:	d102      	bne.n	8000aca <__aeabi_dcmpun+0x26>
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	f04f 0001 	mov.w	r0, #1
 8000ace:	4770      	bx	lr

08000ad0 <__aeabi_d2iz>:
 8000ad0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad8:	d215      	bcs.n	8000b06 <__aeabi_d2iz+0x36>
 8000ada:	d511      	bpl.n	8000b00 <__aeabi_d2iz+0x30>
 8000adc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae4:	d912      	bls.n	8000b0c <__aeabi_d2iz+0x3c>
 8000ae6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	bf18      	it	ne
 8000afc:	4240      	negne	r0, r0
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0a:	d105      	bne.n	8000b18 <__aeabi_d2iz+0x48>
 8000b0c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b10:	bf08      	it	eq
 8000b12:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop

08000b20 <__aeabi_d2uiz>:
 8000b20:	004a      	lsls	r2, r1, #1
 8000b22:	d211      	bcs.n	8000b48 <__aeabi_d2uiz+0x28>
 8000b24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b28:	d211      	bcs.n	8000b4e <__aeabi_d2uiz+0x2e>
 8000b2a:	d50d      	bpl.n	8000b48 <__aeabi_d2uiz+0x28>
 8000b2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b34:	d40e      	bmi.n	8000b54 <__aeabi_d2uiz+0x34>
 8000b36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_d2uiz+0x3a>
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0000 	mov.w	r0, #0
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2f>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b68:	bf24      	itt	cs
 8000b6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b72:	d90d      	bls.n	8000b90 <__aeabi_d2f+0x30>
 8000b74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b88:	bf08      	it	eq
 8000b8a:	f020 0001 	biceq.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b94:	d121      	bne.n	8000bda <__aeabi_d2f+0x7a>
 8000b96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b9a:	bfbc      	itt	lt
 8000b9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	4770      	bxlt	lr
 8000ba2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000baa:	f1c2 0218 	rsb	r2, r2, #24
 8000bae:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bba:	bf18      	it	ne
 8000bbc:	f040 0001 	orrne.w	r0, r0, #1
 8000bc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bcc:	ea40 000c 	orr.w	r0, r0, ip
 8000bd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd8:	e7cc      	b.n	8000b74 <__aeabi_d2f+0x14>
 8000bda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bde:	d107      	bne.n	8000bf0 <__aeabi_d2f+0x90>
 8000be0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be4:	bf1e      	ittt	ne
 8000be6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bee:	4770      	bxne	lr
 8000bf0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__aeabi_uldivmod>:
 8000c00:	b953      	cbnz	r3, 8000c18 <__aeabi_uldivmod+0x18>
 8000c02:	b94a      	cbnz	r2, 8000c18 <__aeabi_uldivmod+0x18>
 8000c04:	2900      	cmp	r1, #0
 8000c06:	bf08      	it	eq
 8000c08:	2800      	cmpeq	r0, #0
 8000c0a:	bf1c      	itt	ne
 8000c0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c10:	f04f 30ff 	movne.w	r0, #4294967295
 8000c14:	f000 b97a 	b.w	8000f0c <__aeabi_idiv0>
 8000c18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c20:	f000 f806 	bl	8000c30 <__udivmoddi4>
 8000c24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c2c:	b004      	add	sp, #16
 8000c2e:	4770      	bx	lr

08000c30 <__udivmoddi4>:
 8000c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c34:	468c      	mov	ip, r1
 8000c36:	460d      	mov	r5, r1
 8000c38:	4604      	mov	r4, r0
 8000c3a:	9e08      	ldr	r6, [sp, #32]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d151      	bne.n	8000ce4 <__udivmoddi4+0xb4>
 8000c40:	428a      	cmp	r2, r1
 8000c42:	4617      	mov	r7, r2
 8000c44:	d96d      	bls.n	8000d22 <__udivmoddi4+0xf2>
 8000c46:	fab2 fe82 	clz	lr, r2
 8000c4a:	f1be 0f00 	cmp.w	lr, #0
 8000c4e:	d00b      	beq.n	8000c68 <__udivmoddi4+0x38>
 8000c50:	f1ce 0c20 	rsb	ip, lr, #32
 8000c54:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c58:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c5c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c60:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c64:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c68:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c6c:	0c25      	lsrs	r5, r4, #16
 8000c6e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c72:	fa1f f987 	uxth.w	r9, r7
 8000c76:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c7a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c7e:	fb08 f309 	mul.w	r3, r8, r9
 8000c82:	42ab      	cmp	r3, r5
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x6c>
 8000c86:	19ed      	adds	r5, r5, r7
 8000c88:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c8c:	f080 8123 	bcs.w	8000ed6 <__udivmoddi4+0x2a6>
 8000c90:	42ab      	cmp	r3, r5
 8000c92:	f240 8120 	bls.w	8000ed6 <__udivmoddi4+0x2a6>
 8000c96:	f1a8 0802 	sub.w	r8, r8, #2
 8000c9a:	443d      	add	r5, r7
 8000c9c:	1aed      	subs	r5, r5, r3
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ca4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000ca8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cac:	fb00 f909 	mul.w	r9, r0, r9
 8000cb0:	45a1      	cmp	r9, r4
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x98>
 8000cb4:	19e4      	adds	r4, r4, r7
 8000cb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cba:	f080 810a 	bcs.w	8000ed2 <__udivmoddi4+0x2a2>
 8000cbe:	45a1      	cmp	r9, r4
 8000cc0:	f240 8107 	bls.w	8000ed2 <__udivmoddi4+0x2a2>
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	443c      	add	r4, r7
 8000cc8:	eba4 0409 	sub.w	r4, r4, r9
 8000ccc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d061      	beq.n	8000d9a <__udivmoddi4+0x16a>
 8000cd6:	fa24 f40e 	lsr.w	r4, r4, lr
 8000cda:	2300      	movs	r3, #0
 8000cdc:	6034      	str	r4, [r6, #0]
 8000cde:	6073      	str	r3, [r6, #4]
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	d907      	bls.n	8000cf8 <__udivmoddi4+0xc8>
 8000ce8:	2e00      	cmp	r6, #0
 8000cea:	d054      	beq.n	8000d96 <__udivmoddi4+0x166>
 8000cec:	2100      	movs	r1, #0
 8000cee:	e886 0021 	stmia.w	r6, {r0, r5}
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf8:	fab3 f183 	clz	r1, r3
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	f040 808e 	bne.w	8000e1e <__udivmoddi4+0x1ee>
 8000d02:	42ab      	cmp	r3, r5
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xdc>
 8000d06:	4282      	cmp	r2, r0
 8000d08:	f200 80fa 	bhi.w	8000f00 <__udivmoddi4+0x2d0>
 8000d0c:	1a84      	subs	r4, r0, r2
 8000d0e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	46ac      	mov	ip, r5
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	d03f      	beq.n	8000d9a <__udivmoddi4+0x16a>
 8000d1a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	b912      	cbnz	r2, 8000d2a <__udivmoddi4+0xfa>
 8000d24:	2701      	movs	r7, #1
 8000d26:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d2a:	fab7 fe87 	clz	lr, r7
 8000d2e:	f1be 0f00 	cmp.w	lr, #0
 8000d32:	d134      	bne.n	8000d9e <__udivmoddi4+0x16e>
 8000d34:	1beb      	subs	r3, r5, r7
 8000d36:	0c3a      	lsrs	r2, r7, #16
 8000d38:	fa1f fc87 	uxth.w	ip, r7
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d42:	0c25      	lsrs	r5, r4, #16
 8000d44:	fb02 3318 	mls	r3, r2, r8, r3
 8000d48:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d4c:	fb0c f308 	mul.w	r3, ip, r8
 8000d50:	42ab      	cmp	r3, r5
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x134>
 8000d54:	19ed      	adds	r5, r5, r7
 8000d56:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x132>
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	f200 80d1 	bhi.w	8000f04 <__udivmoddi4+0x2d4>
 8000d62:	4680      	mov	r8, r0
 8000d64:	1aed      	subs	r5, r5, r3
 8000d66:	b2a3      	uxth	r3, r4
 8000d68:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d6c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d70:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d74:	fb0c fc00 	mul.w	ip, ip, r0
 8000d78:	45a4      	cmp	ip, r4
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x15c>
 8000d7c:	19e4      	adds	r4, r4, r7
 8000d7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x15a>
 8000d84:	45a4      	cmp	ip, r4
 8000d86:	f200 80b8 	bhi.w	8000efa <__udivmoddi4+0x2ca>
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	eba4 040c 	sub.w	r4, r4, ip
 8000d90:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d94:	e79d      	b.n	8000cd2 <__udivmoddi4+0xa2>
 8000d96:	4631      	mov	r1, r6
 8000d98:	4630      	mov	r0, r6
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	f1ce 0420 	rsb	r4, lr, #32
 8000da2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000da6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000daa:	fa20 f804 	lsr.w	r8, r0, r4
 8000dae:	0c3a      	lsrs	r2, r7, #16
 8000db0:	fa25 f404 	lsr.w	r4, r5, r4
 8000db4:	ea48 0803 	orr.w	r8, r8, r3
 8000db8:	fbb4 f1f2 	udiv	r1, r4, r2
 8000dbc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000dc0:	fb02 4411 	mls	r4, r2, r1, r4
 8000dc4:	fa1f fc87 	uxth.w	ip, r7
 8000dc8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000dcc:	fb01 f30c 	mul.w	r3, r1, ip
 8000dd0:	42ab      	cmp	r3, r5
 8000dd2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000dd6:	d909      	bls.n	8000dec <__udivmoddi4+0x1bc>
 8000dd8:	19ed      	adds	r5, r5, r7
 8000dda:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dde:	f080 808a 	bcs.w	8000ef6 <__udivmoddi4+0x2c6>
 8000de2:	42ab      	cmp	r3, r5
 8000de4:	f240 8087 	bls.w	8000ef6 <__udivmoddi4+0x2c6>
 8000de8:	3902      	subs	r1, #2
 8000dea:	443d      	add	r5, r7
 8000dec:	1aeb      	subs	r3, r5, r3
 8000dee:	fa1f f588 	uxth.w	r5, r8
 8000df2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000df6:	fb02 3310 	mls	r3, r2, r0, r3
 8000dfa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dfe:	fb00 f30c 	mul.w	r3, r0, ip
 8000e02:	42ab      	cmp	r3, r5
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x1e6>
 8000e06:	19ed      	adds	r5, r5, r7
 8000e08:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e0c:	d26f      	bcs.n	8000eee <__udivmoddi4+0x2be>
 8000e0e:	42ab      	cmp	r3, r5
 8000e10:	d96d      	bls.n	8000eee <__udivmoddi4+0x2be>
 8000e12:	3802      	subs	r0, #2
 8000e14:	443d      	add	r5, r7
 8000e16:	1aeb      	subs	r3, r5, r3
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	e78f      	b.n	8000d3e <__udivmoddi4+0x10e>
 8000e1e:	f1c1 0720 	rsb	r7, r1, #32
 8000e22:	fa22 f807 	lsr.w	r8, r2, r7
 8000e26:	408b      	lsls	r3, r1
 8000e28:	fa05 f401 	lsl.w	r4, r5, r1
 8000e2c:	ea48 0303 	orr.w	r3, r8, r3
 8000e30:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e34:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e38:	40fd      	lsrs	r5, r7
 8000e3a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e3e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e42:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e46:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e4a:	fa1f f883 	uxth.w	r8, r3
 8000e4e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e52:	fb09 f408 	mul.w	r4, r9, r8
 8000e56:	42ac      	cmp	r4, r5
 8000e58:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x244>
 8000e62:	18ed      	adds	r5, r5, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	d243      	bcs.n	8000ef2 <__udivmoddi4+0x2c2>
 8000e6a:	42ac      	cmp	r4, r5
 8000e6c:	d941      	bls.n	8000ef2 <__udivmoddi4+0x2c2>
 8000e6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e72:	441d      	add	r5, r3
 8000e74:	1b2d      	subs	r5, r5, r4
 8000e76:	fa1f fe8e 	uxth.w	lr, lr
 8000e7a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e7e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e82:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e86:	fb00 f808 	mul.w	r8, r0, r8
 8000e8a:	45a0      	cmp	r8, r4
 8000e8c:	d907      	bls.n	8000e9e <__udivmoddi4+0x26e>
 8000e8e:	18e4      	adds	r4, r4, r3
 8000e90:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e94:	d229      	bcs.n	8000eea <__udivmoddi4+0x2ba>
 8000e96:	45a0      	cmp	r8, r4
 8000e98:	d927      	bls.n	8000eea <__udivmoddi4+0x2ba>
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	441c      	add	r4, r3
 8000e9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea2:	eba4 0408 	sub.w	r4, r4, r8
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	454c      	cmp	r4, r9
 8000eac:	46c6      	mov	lr, r8
 8000eae:	464d      	mov	r5, r9
 8000eb0:	d315      	bcc.n	8000ede <__udivmoddi4+0x2ae>
 8000eb2:	d012      	beq.n	8000eda <__udivmoddi4+0x2aa>
 8000eb4:	b156      	cbz	r6, 8000ecc <__udivmoddi4+0x29c>
 8000eb6:	ebba 030e 	subs.w	r3, sl, lr
 8000eba:	eb64 0405 	sbc.w	r4, r4, r5
 8000ebe:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec2:	40cb      	lsrs	r3, r1
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	40cc      	lsrs	r4, r1
 8000ec8:	6037      	str	r7, [r6, #0]
 8000eca:	6074      	str	r4, [r6, #4]
 8000ecc:	2100      	movs	r1, #0
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	e6f8      	b.n	8000cc8 <__udivmoddi4+0x98>
 8000ed6:	4690      	mov	r8, r2
 8000ed8:	e6e0      	b.n	8000c9c <__udivmoddi4+0x6c>
 8000eda:	45c2      	cmp	sl, r8
 8000edc:	d2ea      	bcs.n	8000eb4 <__udivmoddi4+0x284>
 8000ede:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ee2:	eb69 0503 	sbc.w	r5, r9, r3
 8000ee6:	3801      	subs	r0, #1
 8000ee8:	e7e4      	b.n	8000eb4 <__udivmoddi4+0x284>
 8000eea:	4628      	mov	r0, r5
 8000eec:	e7d7      	b.n	8000e9e <__udivmoddi4+0x26e>
 8000eee:	4640      	mov	r0, r8
 8000ef0:	e791      	b.n	8000e16 <__udivmoddi4+0x1e6>
 8000ef2:	4681      	mov	r9, r0
 8000ef4:	e7be      	b.n	8000e74 <__udivmoddi4+0x244>
 8000ef6:	4601      	mov	r1, r0
 8000ef8:	e778      	b.n	8000dec <__udivmoddi4+0x1bc>
 8000efa:	3802      	subs	r0, #2
 8000efc:	443c      	add	r4, r7
 8000efe:	e745      	b.n	8000d8c <__udivmoddi4+0x15c>
 8000f00:	4608      	mov	r0, r1
 8000f02:	e708      	b.n	8000d16 <__udivmoddi4+0xe6>
 8000f04:	f1a8 0802 	sub.w	r8, r8, #2
 8000f08:	443d      	add	r5, r7
 8000f0a:	e72b      	b.n	8000d64 <__udivmoddi4+0x134>

08000f0c <__aeabi_idiv0>:
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f10:	b500      	push	{lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f12:	2003      	movs	r0, #3
{
 8000f14:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f16:	f000 fc59 	bl	80017cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f010 f9ec 	bl	80112f8 <HAL_InitTick>
 8000f20:	b118      	cbz	r0, 8000f2a <HAL_Init+0x1a>
  {
    status = HAL_ERROR;
 8000f22:	2001      	movs	r0, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8000f24:	b003      	add	sp, #12
 8000f26:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f2a:	9001      	str	r0, [sp, #4]
    HAL_MspInit();
 8000f2c:	f010 f9c4 	bl	80112b8 <HAL_MspInit>
 8000f30:	9801      	ldr	r0, [sp, #4]
}
 8000f32:	b003      	add	sp, #12
 8000f34:	f85d fb04 	ldr.w	pc, [sp], #4

08000f38 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000f38:	4a02      	ldr	r2, [pc, #8]	; (8000f44 <HAL_IncTick+0xc>)
 8000f3a:	6813      	ldr	r3, [r2, #0]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	2000531c 	.word	0x2000531c

08000f48 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f48:	4b01      	ldr	r3, [pc, #4]	; (8000f50 <HAL_GetTick+0x8>)
 8000f4a:	6818      	ldr	r0, [r3, #0]
}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	2000531c 	.word	0x2000531c

08000f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f54:	b538      	push	{r3, r4, r5, lr}
 8000f56:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f58:	f7ff fff6 	bl	8000f48 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000f5e:	4605      	mov	r5, r0
  {
    wait++;
 8000f60:	bf18      	it	ne
 8000f62:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f64:	f7ff fff0 	bl	8000f48 <HAL_GetTick>
 8000f68:	1b40      	subs	r0, r0, r5
 8000f6a:	4284      	cmp	r4, r0
 8000f6c:	d8fa      	bhi.n	8000f64 <HAL_Delay+0x10>
  {
  }
}
 8000f6e:	bd38      	pop	{r3, r4, r5, pc}

08000f70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f72:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f78:	2800      	cmp	r0, #0
 8000f7a:	f000 80b8 	beq.w	80010ee <HAL_ADC_Init+0x17e>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f7e:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8000f80:	4604      	mov	r4, r0
 8000f82:	2d00      	cmp	r5, #0
 8000f84:	f000 80a0 	beq.w	80010c8 <HAL_ADC_Init+0x158>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000f88:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f8a:	6893      	ldr	r3, [r2, #8]
 8000f8c:	0098      	lsls	r0, r3, #2
 8000f8e:	d505      	bpl.n	8000f9c <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f90:	6893      	ldr	r3, [r2, #8]
 8000f92:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000f96:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f9a:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f9c:	6893      	ldr	r3, [r2, #8]
 8000f9e:	00d9      	lsls	r1, r3, #3
 8000fa0:	d417      	bmi.n	8000fd2 <HAL_ADC_Init+0x62>
    LL_ADC_EnableInternalRegulator(hadc->Instance);
    
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000fa2:	4b5d      	ldr	r3, [pc, #372]	; (8001118 <HAL_ADC_Init+0x1a8>)
  MODIFY_REG(ADCx->CR,
 8000fa4:	6891      	ldr	r1, [r2, #8]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	485c      	ldr	r0, [pc, #368]	; (800111c <HAL_ADC_Init+0x1ac>)
 8000faa:	099b      	lsrs	r3, r3, #6
 8000fac:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8000fb0:	fba0 0303 	umull	r0, r3, r0, r3
 8000fb4:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8000fb8:	099b      	lsrs	r3, r3, #6
 8000fba:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000fbe:	6091      	str	r1, [r2, #8]
 8000fc0:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8000fc2:	9b01      	ldr	r3, [sp, #4]
 8000fc4:	b12b      	cbz	r3, 8000fd2 <HAL_ADC_Init+0x62>
    {
      wait_loop_index--;
 8000fc6:	9b01      	ldr	r3, [sp, #4]
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8000fcc:	9b01      	ldr	r3, [sp, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1f9      	bne.n	8000fc6 <HAL_ADC_Init+0x56>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fd2:	6893      	ldr	r3, [r2, #8]
 8000fd4:	00db      	lsls	r3, r3, #3
 8000fd6:	d414      	bmi.n	8001002 <HAL_ADC_Init+0x92>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000fda:	f043 0310 	orr.w	r3, r3, #16
 8000fde:	65a3      	str	r3, [r4, #88]	; 0x58
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fe0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	65e3      	str	r3, [r4, #92]	; 0x5c
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000fe8:	6893      	ldr	r3, [r2, #8]
 8000fea:	075f      	lsls	r7, r3, #29
    
    tmp_hal_status = HAL_ERROR;
 8000fec:	f04f 0001 	mov.w	r0, #1
 8000ff0:	d50c      	bpl.n	800100c <HAL_ADC_Init+0x9c>
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000ff2:	6da3      	ldr	r3, [r4, #88]	; 0x58
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ff4:	6da3      	ldr	r3, [r4, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8000ff6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ff8:	f043 0310 	orr.w	r3, r3, #16
 8000ffc:	65a3      	str	r3, [r4, #88]	; 0x58
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8000ffe:	b003      	add	sp, #12
 8001000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001002:	6893      	ldr	r3, [r2, #8]
 8001004:	075f      	lsls	r7, r3, #29
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	d4f2      	bmi.n	8000ff2 <HAL_ADC_Init+0x82>
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800100c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800100e:	06d9      	lsls	r1, r3, #27
 8001010:	d4f0      	bmi.n	8000ff4 <HAL_ADC_Init+0x84>
    ADC_STATE_CLR_SET(hadc->State,
 8001012:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001014:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800101e:	6893      	ldr	r3, [r2, #8]
 8001020:	07de      	lsls	r6, r3, #31
 8001022:	d40a      	bmi.n	800103a <HAL_ADC_Init+0xca>
 8001024:	4b3e      	ldr	r3, [pc, #248]	; (8001120 <HAL_ADC_Init+0x1b0>)
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	07db      	lsls	r3, r3, #31
 800102a:	d406      	bmi.n	800103a <HAL_ADC_Init+0xca>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800102c:	493d      	ldr	r1, [pc, #244]	; (8001124 <HAL_ADC_Init+0x1b4>)
 800102e:	6865      	ldr	r5, [r4, #4]
 8001030:	688b      	ldr	r3, [r1, #8]
 8001032:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001036:	432b      	orrs	r3, r5
 8001038:	608b      	str	r3, [r1, #8]
                hadc->Init.DataAlign                                                   |
 800103a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800103c:	68e7      	ldr	r7, [r4, #12]
 800103e:	68a6      	ldr	r6, [r4, #8]
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode)  );
 8001040:	f894 1020 	ldrb.w	r1, [r4, #32]
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001044:	7e65      	ldrb	r5, [r4, #25]
                hadc->Init.DataAlign                                                   |
 8001046:	433b      	orrs	r3, r7
 8001048:	4333      	orrs	r3, r6
 800104a:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800104e:	2901      	cmp	r1, #1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001050:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001054:	d046      	beq.n	80010e4 <HAL_ADC_Init+0x174>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001056:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001058:	b121      	cbz	r1, 8001064 <HAL_ADC_Init+0xf4>
                  | hadc->Init.ExternalTrigConvEdge
 800105a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800105c:	f401 7170 	and.w	r1, r1, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001060:	4329      	orrs	r1, r5
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001062:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 8001064:	68d5      	ldr	r5, [r2, #12]
 8001066:	4930      	ldr	r1, [pc, #192]	; (8001128 <HAL_ADC_Init+0x1b8>)
 8001068:	4029      	ands	r1, r5
 800106a:	430b      	orrs	r3, r1
 800106c:	60d3      	str	r3, [r2, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800106e:	6893      	ldr	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001070:	6891      	ldr	r1, [r2, #8]
 8001072:	070d      	lsls	r5, r1, #28
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001074:	f003 0304 	and.w	r3, r3, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001078:	d417      	bmi.n	80010aa <HAL_ADC_Init+0x13a>
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 800107a:	b9b3      	cbnz	r3, 80010aa <HAL_ADC_Init+0x13a>
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800107c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001080:	7e27      	ldrb	r7, [r4, #24]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001082:	68d1      	ldr	r1, [r2, #12]
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                            |
 8001084:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
      if (hadc->Init.OversamplingMode == ENABLE)
 8001086:	f894 6038 	ldrb.w	r6, [r4, #56]	; 0x38
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800108a:	005b      	lsls	r3, r3, #1
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                            |
 800108c:	ea43 3387 	orr.w	r3, r3, r7, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001090:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                            |
 8001094:	432b      	orrs	r3, r5
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001096:	f021 0106 	bic.w	r1, r1, #6
 800109a:	430b      	orrs	r3, r1
      if (hadc->Init.OversamplingMode == ENABLE)
 800109c:	2e01      	cmp	r6, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800109e:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80010a0:	d028      	beq.n	80010f4 <HAL_ADC_Init+0x184>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80010a2:	6913      	ldr	r3, [r2, #16]
 80010a4:	f023 0301 	bic.w	r3, r3, #1
 80010a8:	6113      	str	r3, [r2, #16]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010aa:	6923      	ldr	r3, [r4, #16]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d011      	beq.n	80010d4 <HAL_ADC_Init+0x164>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80010b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80010b2:	f023 030f 	bic.w	r3, r3, #15
 80010b6:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80010b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80010ba:	f023 0303 	bic.w	r3, r3, #3
 80010be:	f043 0301 	orr.w	r3, r3, #1
 80010c2:	65a3      	str	r3, [r4, #88]	; 0x58
}
 80010c4:	b003      	add	sp, #12
 80010c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 80010c8:	f00d fd62 	bl	800eb90 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80010cc:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 80010ce:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
 80010d2:	e759      	b.n	8000f88 <HAL_ADC_Init+0x18>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80010d4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80010d6:	69e3      	ldr	r3, [r4, #28]
 80010d8:	f021 010f 	bic.w	r1, r1, #15
 80010dc:	3b01      	subs	r3, #1
 80010de:	430b      	orrs	r3, r1
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	e7e9      	b.n	80010b8 <HAL_ADC_Init+0x148>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80010e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80010e6:	3901      	subs	r1, #1
 80010e8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80010ec:	e7b3      	b.n	8001056 <HAL_ADC_Init+0xe6>
    return HAL_ERROR;
 80010ee:	2001      	movs	r0, #1
}
 80010f0:	b003      	add	sp, #12
 80010f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MODIFY_REG(hadc->Instance->CFGR2,
 80010f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80010f6:	6c27      	ldr	r7, [r4, #64]	; 0x40
 80010f8:	6c66      	ldr	r6, [r4, #68]	; 0x44
 80010fa:	6915      	ldr	r5, [r2, #16]
 80010fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80010fe:	433b      	orrs	r3, r7
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	4333      	orrs	r3, r6
 8001106:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 800110a:	430b      	orrs	r3, r1
 800110c:	f025 0504 	bic.w	r5, r5, #4
 8001110:	432b      	orrs	r3, r5
 8001112:	6113      	str	r3, [r2, #16]
 8001114:	e7c9      	b.n	80010aa <HAL_ADC_Init+0x13a>
 8001116:	bf00      	nop
 8001118:	2000003c 	.word	0x2000003c
 800111c:	053e2d63 	.word	0x053e2d63
 8001120:	50040000 	.word	0x50040000
 8001124:	50040300 	.word	0x50040300
 8001128:	fff0c007 	.word	0xfff0c007

0800112c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800112c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800112e:	4603      	mov	r3, r0
 8001130:	b083      	sub	sp, #12
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001132:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
  __IO uint32_t wait_loop_index = 0;
 8001136:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8001138:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0;
 800113a:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 800113c:	f000 8084 	beq.w	8001248 <HAL_ADC_ConfigChannel+0x11c>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001140:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001142:	6894      	ldr	r4, [r2, #8]
  __HAL_LOCK(hadc);
 8001144:	2001      	movs	r0, #1
 8001146:	f014 0404 	ands.w	r4, r4, #4
 800114a:	f883 0054 	strb.w	r0, [r3, #84]	; 0x54
 800114e:	d008      	beq.n	8001162 <HAL_ADC_ConfigChannel+0x36>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001150:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001152:	f042 0220 	orr.w	r2, r2, #32
 8001156:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001158:	2200      	movs	r2, #0
 800115a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  
  /* Return function status */
  return tmp_hal_status;
}
 800115e:	b003      	add	sp, #12
 8001160:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank <= 5U)
 8001162:	684d      	ldr	r5, [r1, #4]
 8001164:	2d05      	cmp	r5, #5
 8001166:	d972      	bls.n	800124e <HAL_ADC_ConfigChannel+0x122>
 8001168:	f005 071f 	and.w	r7, r5, #31
 800116c:	261f      	movs	r6, #31
 800116e:	09ac      	lsrs	r4, r5, #6
 8001170:	fa06 f507 	lsl.w	r5, r6, r7
 8001174:	f004 040c 	and.w	r4, r4, #12
 8001178:	43ed      	mvns	r5, r5
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800117a:	f102 0e30 	add.w	lr, r2, #48	; 0x30
  MODIFY_REG(*preg,
 800117e:	6808      	ldr	r0, [r1, #0]
 8001180:	f85e 6004 	ldr.w	r6, [lr, r4]
 8001184:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8001188:	4035      	ands	r5, r6
 800118a:	40b8      	lsls	r0, r7
 800118c:	4328      	orrs	r0, r5
 800118e:	f84e 0004 	str.w	r0, [lr, r4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001192:	6890      	ldr	r0, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001194:	6894      	ldr	r4, [r2, #8]
 8001196:	0725      	lsls	r5, r4, #28
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001198:	f000 0004 	and.w	r0, r0, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800119c:	f100 809f 	bmi.w	80012de <HAL_ADC_ConfigChannel+0x1b2>
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 80011a0:	2800      	cmp	r0, #0
 80011a2:	f040 809c 	bne.w	80012de <HAL_ADC_ConfigChannel+0x1b2>
      if(sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80011a6:	688d      	ldr	r5, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80011a8:	680c      	ldr	r4, [r1, #0]
      if(sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80011aa:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 80011ae:	f000 815e 	beq.w	800146e <HAL_ADC_ConfigChannel+0x342>
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80011b2:	0de6      	lsrs	r6, r4, #23
 80011b4:	f006 0604 	and.w	r6, r6, #4
 80011b8:	f102 0e14 	add.w	lr, r2, #20
  MODIFY_REG(*preg,
 80011bc:	f3c4 5404 	ubfx	r4, r4, #20, #5
 80011c0:	f856 000e 	ldr.w	r0, [r6, lr]
 80011c4:	2707      	movs	r7, #7
 80011c6:	40a7      	lsls	r7, r4
 80011c8:	ea20 0007 	bic.w	r0, r0, r7
 80011cc:	fa05 f404 	lsl.w	r4, r5, r4
 80011d0:	4320      	orrs	r0, r4
 80011d2:	f846 000e 	str.w	r0, [r6, lr]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80011d6:	6950      	ldr	r0, [r2, #20]
 80011d8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80011dc:	6150      	str	r0, [r2, #20]
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80011de:	690e      	ldr	r6, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80011e0:	68d4      	ldr	r4, [r2, #12]
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80011e2:	2e04      	cmp	r6, #4
 80011e4:	d03b      	beq.n	800125e <HAL_ADC_ConfigChannel+0x132>
  MODIFY_REG(*preg,
 80011e6:	680d      	ldr	r5, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80011e8:	6948      	ldr	r0, [r1, #20]
 80011ea:	f8df e330 	ldr.w	lr, [pc, #816]	; 800151c <HAL_ADC_ConfigChannel+0x3f0>
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011ee:	f102 0760 	add.w	r7, r2, #96	; 0x60
 80011f2:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 80011f6:	0064      	lsls	r4, r4, #1
 80011f8:	40a0      	lsls	r0, r4
  MODIFY_REG(*preg,
 80011fa:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80011fe:	f857 4026 	ldr.w	r4, [r7, r6, lsl #2]
 8001202:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001206:	4328      	orrs	r0, r5
 8001208:	ea04 0e0e 	and.w	lr, r4, lr
 800120c:	ea40 000e 	orr.w	r0, r0, lr
 8001210:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
 8001214:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001216:	6894      	ldr	r4, [r2, #8]
 8001218:	07e4      	lsls	r4, r4, #31
 800121a:	d564      	bpl.n	80012e6 <HAL_ADC_ConfigChannel+0x1ba>
 800121c:	4604      	mov	r4, r0
    if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800121e:	49b6      	ldr	r1, [pc, #728]	; (80014f8 <HAL_ADC_ConfigChannel+0x3cc>)
 8001220:	420c      	tst	r4, r1
 8001222:	d00f      	beq.n	8001244 <HAL_ADC_ConfigChannel+0x118>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001224:	49b5      	ldr	r1, [pc, #724]	; (80014fc <HAL_ADC_ConfigChannel+0x3d0>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001226:	4db6      	ldr	r5, [pc, #728]	; (8001500 <HAL_ADC_ConfigChannel+0x3d4>)
 8001228:	6888      	ldr	r0, [r1, #8]
 800122a:	42ac      	cmp	r4, r5
 800122c:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8001230:	f000 80bd 	beq.w	80013ae <HAL_ADC_ConfigChannel+0x282>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001234:	4db3      	ldr	r5, [pc, #716]	; (8001504 <HAL_ADC_ConfigChannel+0x3d8>)
 8001236:	42ac      	cmp	r4, r5
 8001238:	f000 80dd 	beq.w	80013f6 <HAL_ADC_ConfigChannel+0x2ca>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800123c:	4db2      	ldr	r5, [pc, #712]	; (8001508 <HAL_ADC_ConfigChannel+0x3dc>)
 800123e:	42ac      	cmp	r4, r5
 8001240:	f000 80a5 	beq.w	800138e <HAL_ADC_ConfigChannel+0x262>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001244:	2000      	movs	r0, #0
 8001246:	e787      	b.n	8001158 <HAL_ADC_ConfigChannel+0x2c>
  __HAL_LOCK(hadc);
 8001248:	2002      	movs	r0, #2
}
 800124a:	b003      	add	sp, #12
 800124c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      switch (sConfig->Rank)
 800124e:	3d02      	subs	r5, #2
 8001250:	2d03      	cmp	r5, #3
 8001252:	f200 80e0 	bhi.w	8001416 <HAL_ADC_ConfigChannel+0x2ea>
 8001256:	e8df f005 	tbb	[pc, r5]
 800125a:	9095      	.short	0x9095
 800125c:	838b      	.short	0x838b
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800125e:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001260:	6e16      	ldr	r6, [r2, #96]	; 0x60
 8001262:	f3c0 0412 	ubfx	r4, r0, #0, #19
 8001266:	f3c6 6784 	ubfx	r7, r6, #26, #5
 800126a:	2c00      	cmp	r4, #0
 800126c:	f040 815a 	bne.w	8001524 <HAL_ADC_ConfigChannel+0x3f8>
 8001270:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8001274:	42af      	cmp	r7, r5
 8001276:	f040 8191 	bne.w	800159c <HAL_ADC_ConfigChannel+0x470>
  MODIFY_REG(*preg,
 800127a:	4614      	mov	r4, r2
 800127c:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 8001280:	f844 6f60 	str.w	r6, [r4, #96]!
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001284:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001286:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8001288:	f3c0 0512 	ubfx	r5, r0, #0, #19
 800128c:	f3c6 6784 	ubfx	r7, r6, #26, #5
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001290:	f102 0e64 	add.w	lr, r2, #100	; 0x64
 8001294:	2d00      	cmp	r5, #0
 8001296:	f040 8153 	bne.w	8001540 <HAL_ADC_ConfigChannel+0x414>
 800129a:	f3c0 6584 	ubfx	r5, r0, #26, #5
 800129e:	42af      	cmp	r7, r5
 80012a0:	f000 8154 	beq.w	800154c <HAL_ADC_ConfigChannel+0x420>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012a4:	68a6      	ldr	r6, [r4, #8]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012a6:	f104 0e08 	add.w	lr, r4, #8
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012aa:	f3c6 6784 	ubfx	r7, r6, #26, #5
 80012ae:	42af      	cmp	r7, r5
 80012b0:	f040 816f 	bne.w	8001592 <HAL_ADC_ConfigChannel+0x466>
  MODIFY_REG(*preg,
 80012b4:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 80012b8:	f8ce 6000 	str.w	r6, [lr]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012bc:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012be:	68e6      	ldr	r6, [r4, #12]
 80012c0:	f3c0 0512 	ubfx	r5, r0, #0, #19
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012c4:	340c      	adds	r4, #12
 80012c6:	f3c6 6784 	ubfx	r7, r6, #26, #5
 80012ca:	2d00      	cmp	r5, #0
 80012cc:	f040 8156 	bne.w	800157c <HAL_ADC_ConfigChannel+0x450>
 80012d0:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80012d4:	42bd      	cmp	r5, r7
 80012d6:	d19e      	bne.n	8001216 <HAL_ADC_ConfigChannel+0xea>
  MODIFY_REG(*preg,
 80012d8:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 80012dc:	6026      	str	r6, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012de:	6894      	ldr	r4, [r2, #8]
 80012e0:	6808      	ldr	r0, [r1, #0]
 80012e2:	07e4      	lsls	r4, r4, #31
 80012e4:	d49a      	bmi.n	800121c <HAL_ADC_ConfigChannel+0xf0>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80012e6:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80012e8:	4c88      	ldr	r4, [pc, #544]	; (800150c <HAL_ADC_ConfigChannel+0x3e0>)
 80012ea:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80012ee:	f8df e230 	ldr.w	lr, [pc, #560]	; 8001520 <HAL_ADC_ConfigChannel+0x3f4>
 80012f2:	f006 0718 	and.w	r7, r6, #24
 80012f6:	40fc      	lsrs	r4, r7
 80012f8:	f3c0 0712 	ubfx	r7, r0, #0, #19
 80012fc:	4004      	ands	r4, r0
 80012fe:	ea25 0507 	bic.w	r5, r5, r7
 8001302:	432c      	orrs	r4, r5
 8001304:	4576      	cmp	r6, lr
 8001306:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800130a:	4604      	mov	r4, r0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800130c:	d187      	bne.n	800121e <HAL_ADC_ConfigChannel+0xf2>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1UL) & 0x1FUL), sConfig->SamplingTime);
 800130e:	2f00      	cmp	r7, #0
 8001310:	f040 8086 	bne.w	8001420 <HAL_ADC_ConfigChannel+0x2f4>
 8001314:	0e80      	lsrs	r0, r0, #26
 8001316:	1c44      	adds	r4, r0, #1
 8001318:	f004 061f 	and.w	r6, r4, #31
 800131c:	2e09      	cmp	r6, #9
 800131e:	f200 80b9 	bhi.w	8001494 <HAL_ADC_ConfigChannel+0x368>
 8001322:	06a4      	lsls	r4, r4, #26
 8001324:	2501      	movs	r5, #1
 8001326:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 800132a:	40b5      	lsls	r5, r6
 800132c:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8001330:	432c      	orrs	r4, r5
 8001332:	0500      	lsls	r0, r0, #20
 8001334:	4320      	orrs	r0, r4
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001336:	0dc5      	lsrs	r5, r0, #23
 8001338:	f005 0504 	and.w	r5, r5, #4
 800133c:	f102 0e14 	add.w	lr, r2, #20
  MODIFY_REG(*preg,
 8001340:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8001344:	f855 400e 	ldr.w	r4, [r5, lr]
 8001348:	688e      	ldr	r6, [r1, #8]
 800134a:	2707      	movs	r7, #7
 800134c:	4087      	lsls	r7, r0
 800134e:	ea24 0407 	bic.w	r4, r4, r7
 8001352:	fa06 f000 	lsl.w	r0, r6, r0
 8001356:	4320      	orrs	r0, r4
 8001358:	f845 000e 	str.w	r0, [r5, lr]
 800135c:	680c      	ldr	r4, [r1, #0]
 800135e:	e75e      	b.n	800121e <HAL_ADC_ConfigChannel+0xf2>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8001360:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001364:	6048      	str	r0, [r1, #4]
 8001366:	2700      	movs	r7, #0
 8001368:	f06f 051f 	mvn.w	r5, #31
 800136c:	2404      	movs	r4, #4
 800136e:	e704      	b.n	800117a <HAL_ADC_ConfigChannel+0x4e>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8001370:	2718      	movs	r7, #24
 8001372:	604f      	str	r7, [r1, #4]
 8001374:	f06f 55f8 	mvn.w	r5, #520093696	; 0x1f000000
 8001378:	e6ff      	b.n	800117a <HAL_ADC_ConfigChannel+0x4e>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 800137a:	2712      	movs	r7, #18
 800137c:	604f      	str	r7, [r1, #4]
 800137e:	f46f 05f8 	mvn.w	r5, #8126464	; 0x7c0000
 8001382:	e6fa      	b.n	800117a <HAL_ADC_ConfigChannel+0x4e>
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8001384:	270c      	movs	r7, #12
 8001386:	604f      	str	r7, [r1, #4]
 8001388:	f46f 35f8 	mvn.w	r5, #126976	; 0x1f000
 800138c:	e6f5      	b.n	800117a <HAL_ADC_ConfigChannel+0x4e>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800138e:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8001392:	f47f af57 	bne.w	8001244 <HAL_ADC_ConfigChannel+0x118>
        if (ADC_VREFINT_INSTANCE(hadc))
 8001396:	4c5e      	ldr	r4, [pc, #376]	; (8001510 <HAL_ADC_ConfigChannel+0x3e4>)
 8001398:	42a2      	cmp	r2, r4
 800139a:	f47f af53 	bne.w	8001244 <HAL_ADC_ConfigChannel+0x118>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800139e:	688a      	ldr	r2, [r1, #8]
 80013a0:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80013a4:	4332      	orrs	r2, r6
 80013a6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80013aa:	608a      	str	r2, [r1, #8]
 80013ac:	e6d4      	b.n	8001158 <HAL_ADC_ConfigChannel+0x2c>
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80013ae:	0200      	lsls	r0, r0, #8
 80013b0:	f53f af48 	bmi.w	8001244 <HAL_ADC_ConfigChannel+0x118>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 80013b4:	4856      	ldr	r0, [pc, #344]	; (8001510 <HAL_ADC_ConfigChannel+0x3e4>)
 80013b6:	4282      	cmp	r2, r0
 80013b8:	f47f af44 	bne.w	8001244 <HAL_ADC_ConfigChannel+0x118>
 80013bc:	688a      	ldr	r2, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80013be:	4c55      	ldr	r4, [pc, #340]	; (8001514 <HAL_ADC_ConfigChannel+0x3e8>)
 80013c0:	4855      	ldr	r0, [pc, #340]	; (8001518 <HAL_ADC_ConfigChannel+0x3ec>)
 80013c2:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80013c6:	4332      	orrs	r2, r6
 80013c8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80013cc:	608a      	str	r2, [r1, #8]
 80013ce:	6822      	ldr	r2, [r4, #0]
 80013d0:	0992      	lsrs	r2, r2, #6
 80013d2:	fba0 1202 	umull	r1, r2, r0, r2
 80013d6:	0992      	lsrs	r2, r2, #6
 80013d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80013dc:	0092      	lsls	r2, r2, #2
 80013de:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0UL)
 80013e0:	9a01      	ldr	r2, [sp, #4]
 80013e2:	2a00      	cmp	r2, #0
 80013e4:	f43f af2e 	beq.w	8001244 <HAL_ADC_ConfigChannel+0x118>
            wait_loop_index--;
 80013e8:	9a01      	ldr	r2, [sp, #4]
 80013ea:	3a01      	subs	r2, #1
 80013ec:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0UL)
 80013ee:	9a01      	ldr	r2, [sp, #4]
 80013f0:	2a00      	cmp	r2, #0
 80013f2:	d1f9      	bne.n	80013e8 <HAL_ADC_ConfigChannel+0x2bc>
 80013f4:	e726      	b.n	8001244 <HAL_ADC_ConfigChannel+0x118>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80013f6:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80013fa:	f47f af23 	bne.w	8001244 <HAL_ADC_ConfigChannel+0x118>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80013fe:	4c44      	ldr	r4, [pc, #272]	; (8001510 <HAL_ADC_ConfigChannel+0x3e4>)
 8001400:	42a2      	cmp	r2, r4
 8001402:	f47f af1f 	bne.w	8001244 <HAL_ADC_ConfigChannel+0x118>
 8001406:	688a      	ldr	r2, [r1, #8]
 8001408:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800140c:	4332      	orrs	r2, r6
 800140e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001412:	608a      	str	r2, [r1, #8]
 8001414:	e6a0      	b.n	8001158 <HAL_ADC_ConfigChannel+0x2c>
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8001416:	2706      	movs	r7, #6
 8001418:	604f      	str	r7, [r1, #4]
 800141a:	f46f 65f8 	mvn.w	r5, #1984	; 0x7c0
 800141e:	e6ac      	b.n	800117a <HAL_ADC_ConfigChannel+0x4e>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001420:	fa90 f4a0 	rbit	r4, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1UL) & 0x1FUL), sConfig->SamplingTime);
 8001424:	fab4 f484 	clz	r4, r4
 8001428:	3401      	adds	r4, #1
 800142a:	f004 041f 	and.w	r4, r4, #31
 800142e:	2c09      	cmp	r4, #9
 8001430:	d83f      	bhi.n	80014b2 <HAL_ADC_ConfigChannel+0x386>
 8001432:	fa90 f4a0 	rbit	r4, r0
 8001436:	fab4 f484 	clz	r4, r4
 800143a:	fa90 f5a0 	rbit	r5, r0
 800143e:	fab5 f585 	clz	r5, r5
 8001442:	3501      	adds	r5, #1
 8001444:	3401      	adds	r4, #1
 8001446:	2601      	movs	r6, #1
 8001448:	f005 051f 	and.w	r5, r5, #31
 800144c:	06a4      	lsls	r4, r4, #26
 800144e:	fa06 f505 	lsl.w	r5, r6, r5
 8001452:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8001456:	432c      	orrs	r4, r5
 8001458:	fa90 f0a0 	rbit	r0, r0
 800145c:	fab0 f080 	clz	r0, r0
 8001460:	4430      	add	r0, r6
 8001462:	f000 001f 	and.w	r0, r0, #31
 8001466:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800146a:	0500      	lsls	r0, r0, #20
 800146c:	e762      	b.n	8001334 <HAL_ADC_ConfigChannel+0x208>
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800146e:	0de0      	lsrs	r0, r4, #23
 8001470:	f000 0004 	and.w	r0, r0, #4
 8001474:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 8001478:	f3c4 5404 	ubfx	r4, r4, #20, #5
 800147c:	59c5      	ldr	r5, [r0, r7]
 800147e:	2607      	movs	r6, #7
 8001480:	fa06 f404 	lsl.w	r4, r6, r4
 8001484:	ea25 0504 	bic.w	r5, r5, r4
 8001488:	51c5      	str	r5, [r0, r7]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800148a:	6950      	ldr	r0, [r2, #20]
 800148c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8001490:	6150      	str	r0, [r2, #20]
 8001492:	e6a4      	b.n	80011de <HAL_ADC_ConfigChannel+0xb2>
 8001494:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8001498:	06a5      	lsls	r5, r4, #26
 800149a:	381e      	subs	r0, #30
 800149c:	2401      	movs	r4, #1
 800149e:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80014a2:	fa04 f606 	lsl.w	r6, r4, r6
 80014a6:	0500      	lsls	r0, r0, #20
 80014a8:	4335      	orrs	r5, r6
 80014aa:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 80014ae:	4328      	orrs	r0, r5
 80014b0:	e741      	b.n	8001336 <HAL_ADC_ConfigChannel+0x20a>
 80014b2:	fa90 f5a0 	rbit	r5, r0
 80014b6:	fab5 f585 	clz	r5, r5
 80014ba:	fa90 f4a0 	rbit	r4, r0
 80014be:	fab4 f484 	clz	r4, r4
 80014c2:	3401      	adds	r4, #1
 80014c4:	3501      	adds	r5, #1
 80014c6:	2601      	movs	r6, #1
 80014c8:	f004 041f 	and.w	r4, r4, #31
 80014cc:	06ad      	lsls	r5, r5, #26
 80014ce:	fa06 f404 	lsl.w	r4, r6, r4
 80014d2:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80014d6:	4325      	orrs	r5, r4
 80014d8:	fa90 f4a0 	rbit	r4, r0
 80014dc:	fab4 f484 	clz	r4, r4
 80014e0:	4434      	add	r4, r6
 80014e2:	f004 041f 	and.w	r4, r4, #31
 80014e6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80014ea:	f1a4 001e 	sub.w	r0, r4, #30
 80014ee:	0500      	lsls	r0, r0, #20
 80014f0:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 80014f4:	e7db      	b.n	80014ae <HAL_ADC_ConfigChannel+0x382>
 80014f6:	bf00      	nop
 80014f8:	80080000 	.word	0x80080000
 80014fc:	50040300 	.word	0x50040300
 8001500:	c7520000 	.word	0xc7520000
 8001504:	cb840000 	.word	0xcb840000
 8001508:	80000001 	.word	0x80000001
 800150c:	0007ffff 	.word	0x0007ffff
 8001510:	50040000 	.word	0x50040000
 8001514:	2000003c 	.word	0x2000003c
 8001518:	053e2d63 	.word	0x053e2d63
 800151c:	03fff000 	.word	0x03fff000
 8001520:	407f0000 	.word	0x407f0000
 8001524:	fa90 f4a0 	rbit	r4, r0
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001528:	fab4 f484 	clz	r4, r4
 800152c:	42a7      	cmp	r7, r4
 800152e:	f43f aea4 	beq.w	800127a <HAL_ADC_ConfigChannel+0x14e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001532:	6e56      	ldr	r6, [r2, #100]	; 0x64
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001534:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001538:	f3c6 6784 	ubfx	r7, r6, #26, #5
 800153c:	f102 0e64 	add.w	lr, r2, #100	; 0x64
 8001540:	fa90 f5a0 	rbit	r5, r0
 8001544:	fab5 f585 	clz	r5, r5
 8001548:	42bd      	cmp	r5, r7
 800154a:	d11c      	bne.n	8001586 <HAL_ADC_ConfigChannel+0x45a>
  MODIFY_REG(*preg,
 800154c:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 8001550:	f8ce 6000 	str.w	r6, [lr]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001554:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001556:	68a6      	ldr	r6, [r4, #8]
 8001558:	f3c0 0512 	ubfx	r5, r0, #0, #19
 800155c:	f3c6 6784 	ubfx	r7, r6, #26, #5
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001560:	f104 0e08 	add.w	lr, r4, #8
 8001564:	b315      	cbz	r5, 80015ac <HAL_ADC_ConfigChannel+0x480>
 8001566:	fa90 f5a0 	rbit	r5, r0
 800156a:	fab5 f585 	clz	r5, r5
 800156e:	42bd      	cmp	r5, r7
 8001570:	f43f aea0 	beq.w	80012b4 <HAL_ADC_ConfigChannel+0x188>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001574:	68e6      	ldr	r6, [r4, #12]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001576:	340c      	adds	r4, #12
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001578:	f3c6 6784 	ubfx	r7, r6, #26, #5
 800157c:	fa90 f5a0 	rbit	r5, r0
 8001580:	fab5 f585 	clz	r5, r5
 8001584:	e6a6      	b.n	80012d4 <HAL_ADC_ConfigChannel+0x1a8>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001586:	68a6      	ldr	r6, [r4, #8]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001588:	f104 0e08 	add.w	lr, r4, #8
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800158c:	f3c6 6784 	ubfx	r7, r6, #26, #5
 8001590:	e7e9      	b.n	8001566 <HAL_ADC_ConfigChannel+0x43a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001592:	68e6      	ldr	r6, [r4, #12]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001594:	340c      	adds	r4, #12
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001596:	f3c6 6784 	ubfx	r7, r6, #26, #5
 800159a:	e69b      	b.n	80012d4 <HAL_ADC_ConfigChannel+0x1a8>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800159c:	6e56      	ldr	r6, [r2, #100]	; 0x64
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800159e:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80015a2:	f3c6 6784 	ubfx	r7, r6, #26, #5
 80015a6:	f102 0e64 	add.w	lr, r2, #100	; 0x64
 80015aa:	e678      	b.n	800129e <HAL_ADC_ConfigChannel+0x172>
 80015ac:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80015b0:	e67d      	b.n	80012ae <HAL_ADC_ConfigChannel+0x182>
 80015b2:	bf00      	nop

080015b4 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80015b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015b6:	b083      	sub	sp, #12
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	9300      	str	r3, [sp, #0]
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80015bc:	2800      	cmp	r0, #0
 80015be:	f000 8085 	beq.w	80016cc <HAL_COMP_Init+0x118>
  {
    status = HAL_ERROR;
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80015c2:	6802      	ldr	r2, [r0, #0]
 80015c4:	6813      	ldr	r3, [r2, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	4604      	mov	r4, r0
 80015ca:	db7f      	blt.n	80016cc <HAL_COMP_Init+0x118>
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif
    
    if(hcomp->State == HAL_COMP_STATE_RESET)
 80015cc:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80015d0:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d07c      	beq.n	80016d2 <HAL_COMP_Init+0x11e>
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
    
    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.NonInvertingInput
               | hcomp->Init.InvertingInput
 80015d8:	6927      	ldr	r7, [r4, #16]
 80015da:	68e3      	ldr	r3, [r4, #12]
               | hcomp->Init.BlankingSrce
 80015dc:	69e6      	ldr	r6, [r4, #28]
               | hcomp->Init.Hysteresis
 80015de:	6965      	ldr	r5, [r4, #20]
               | hcomp->Init.OutputPol
 80015e0:	69a0      	ldr	r0, [r4, #24]
    tmp_csr = (  hcomp->Init.NonInvertingInput
 80015e2:	68a1      	ldr	r1, [r4, #8]
               | hcomp->Init.InvertingInput
 80015e4:	433b      	orrs	r3, r7
               | hcomp->Init.BlankingSrce
 80015e6:	4333      	orrs	r3, r6
               | hcomp->Init.Hysteresis
 80015e8:	432b      	orrs	r3, r5
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80015ea:	6816      	ldr	r6, [r2, #0]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif
#else
    MODIFY_REG(hcomp->Instance->CSR,
 80015ec:	4d45      	ldr	r5, [pc, #276]	; (8001704 <HAL_COMP_Init+0x150>)
 80015ee:	6817      	ldr	r7, [r2, #0]
               | hcomp->Init.OutputPol
 80015f0:	4303      	orrs	r3, r0
    tmp_csr = (  hcomp->Init.NonInvertingInput
 80015f2:	430b      	orrs	r3, r1
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80015f4:	6861      	ldr	r1, [r4, #4]
    MODIFY_REG(hcomp->Instance->CSR,
 80015f6:	403d      	ands	r5, r7
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80015f8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    MODIFY_REG(hcomp->Instance->CSR,
 80015fc:	ea43 0305 	orr.w	r3, r3, r5
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8001600:	4941      	ldr	r1, [pc, #260]	; (8001708 <HAL_COMP_Init+0x154>)
    MODIFY_REG(hcomp->Instance->CSR,
 8001602:	6013      	str	r3, [r2, #0]
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8001604:	680b      	ldr	r3, [r1, #0]
 8001606:	bf0c      	ite	eq
 8001608:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 800160c:	f423 7300 	bicne.w	r3, r3, #512	; 0x200
 8001610:	600b      	str	r3, [r1, #0]
    }
#endif /* COMP2 */
    
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8001612:	6813      	ldr	r3, [r2, #0]
 8001614:	021d      	lsls	r5, r3, #8
 8001616:	d514      	bpl.n	8001642 <HAL_COMP_Init+0x8e>
 8001618:	0237      	lsls	r7, r6, #8
 800161a:	d412      	bmi.n	8001642 <HAL_COMP_Init+0x8e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800161c:	4b3b      	ldr	r3, [pc, #236]	; (800170c <HAL_COMP_Init+0x158>)
 800161e:	493c      	ldr	r1, [pc, #240]	; (8001710 <HAL_COMP_Init+0x15c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	099b      	lsrs	r3, r3, #6
 8001624:	fba1 1303 	umull	r1, r3, r1, r3
 8001628:	099b      	lsrs	r3, r3, #6
 800162a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	9300      	str	r3, [sp, #0]
      while(wait_loop_index != 0UL)
 8001632:	9b00      	ldr	r3, [sp, #0]
 8001634:	b12b      	cbz	r3, 8001642 <HAL_COMP_Init+0x8e>
      {
        wait_loop_index--;
 8001636:	9b00      	ldr	r3, [sp, #0]
 8001638:	3b01      	subs	r3, #1
 800163a:	9300      	str	r3, [sp, #0]
      while(wait_loop_index != 0UL)
 800163c:	9b00      	ldr	r3, [sp, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f9      	bne.n	8001636 <HAL_COMP_Init+0x82>
      }
    }
    
    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8001642:	4934      	ldr	r1, [pc, #208]	; (8001714 <HAL_COMP_Init+0x160>)
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8001644:	6a23      	ldr	r3, [r4, #32]
 8001646:	428a      	cmp	r2, r1
 8001648:	bf0b      	itete	eq
 800164a:	f46f 1200 	mvneq.w	r2, #2097152	; 0x200000
 800164e:	f46f 0280 	mvnne.w	r2, #4194304	; 0x400000
 8001652:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
 8001656:	f44f 0180 	movne.w	r1, #4194304	; 0x400000
 800165a:	0798      	lsls	r0, r3, #30
 800165c:	d111      	bne.n	8001682 <HAL_COMP_Init+0xce>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800165e:	4b2e      	ldr	r3, [pc, #184]	; (8001718 <HAL_COMP_Init+0x164>)
 8001660:	6859      	ldr	r1, [r3, #4]
 8001662:	4011      	ands	r1, r2
 8001664:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001666:	6819      	ldr	r1, [r3, #0]
 8001668:	400a      	ands	r2, r1
 800166a:	601a      	str	r2, [r3, #0]
    }
    
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800166c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8001670:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8001674:	2b00      	cmp	r3, #0
 8001676:	d126      	bne.n	80016c6 <HAL_COMP_Init+0x112>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8001678:	2301      	movs	r3, #1
 800167a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    }
  }
  
  return status;
}
 800167e:	b003      	add	sp, #12
 8001680:	bdf0      	pop	{r4, r5, r6, r7, pc}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001682:	4d25      	ldr	r5, [pc, #148]	; (8001718 <HAL_COMP_Init+0x164>)
 8001684:	68a8      	ldr	r0, [r5, #8]
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8001686:	06de      	lsls	r6, r3, #27
 8001688:	bf4c      	ite	mi
 800168a:	4308      	orrmi	r0, r1
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800168c:	4010      	andpl	r0, r2
 800168e:	60a8      	str	r0, [r5, #8]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001690:	4d21      	ldr	r5, [pc, #132]	; (8001718 <HAL_COMP_Init+0x164>)
 8001692:	68e8      	ldr	r0, [r5, #12]
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8001694:	069f      	lsls	r7, r3, #26
 8001696:	bf4c      	ite	mi
 8001698:	4308      	orrmi	r0, r1
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800169a:	4010      	andpl	r0, r2
 800169c:	60e8      	str	r0, [r5, #12]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 800169e:	481e      	ldr	r0, [pc, #120]	; (8001718 <HAL_COMP_Init+0x164>)
 80016a0:	6141      	str	r1, [r0, #20]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80016a2:	6845      	ldr	r5, [r0, #4]
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80016a4:	079e      	lsls	r6, r3, #30
 80016a6:	bf4c      	ite	mi
 80016a8:	430d      	orrmi	r5, r1
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80016aa:	4015      	andpl	r5, r2
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80016ac:	07db      	lsls	r3, r3, #31
 80016ae:	6045      	str	r5, [r0, #4]
 80016b0:	d523      	bpl.n	80016fa <HAL_COMP_Init+0x146>
  SET_BIT(EXTI->IMR1, ExtiLine);
 80016b2:	4b19      	ldr	r3, [pc, #100]	; (8001718 <HAL_COMP_Init+0x164>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	4311      	orrs	r1, r2
 80016b8:	6019      	str	r1, [r3, #0]
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80016ba:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80016be:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0d8      	beq.n	8001678 <HAL_COMP_Init+0xc4>
  HAL_StatusTypeDef status = HAL_OK;
 80016c6:	2000      	movs	r0, #0
}
 80016c8:	b003      	add	sp, #12
 80016ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_ERROR;
 80016cc:	2001      	movs	r0, #1
}
 80016ce:	b003      	add	sp, #12
 80016d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016d6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
      COMP_CLEAR_ERRORCODE(hcomp);
 80016da:	6281      	str	r1, [r0, #40]	; 0x28
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
      hcomp->Lock = HAL_UNLOCKED;
 80016de:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e2:	f042 0201 	orr.w	r2, r2, #1
 80016e6:	661a      	str	r2, [r3, #96]	; 0x60
 80016e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	9b01      	ldr	r3, [sp, #4]
      HAL_COMP_MspInit(hcomp);
 80016f2:	f00d fccd 	bl	800f090 <HAL_COMP_MspInit>
 80016f6:	6822      	ldr	r2, [r4, #0]
 80016f8:	e76e      	b.n	80015d8 <HAL_COMP_Init+0x24>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80016fa:	4907      	ldr	r1, [pc, #28]	; (8001718 <HAL_COMP_Init+0x164>)
 80016fc:	680b      	ldr	r3, [r1, #0]
 80016fe:	401a      	ands	r2, r3
 8001700:	600a      	str	r2, [r1, #0]
 8001702:	e7b3      	b.n	800166c <HAL_COMP_Init+0xb8>
 8001704:	ff207d03 	.word	0xff207d03
 8001708:	40010204 	.word	0x40010204
 800170c:	2000003c 	.word	0x2000003c
 8001710:	053e2d63 	.word	0x053e2d63
 8001714:	40010200 	.word	0x40010200
 8001718:	40010400 	.word	0x40010400

0800171c <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 800171c:	b410      	push	{r4}
 800171e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8001720:	2300      	movs	r3, #0
 8001722:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8001724:	b138      	cbz	r0, 8001736 <HAL_COMP_Start+0x1a>
  {
    status = HAL_ERROR;
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8001726:	6802      	ldr	r2, [r0, #0]
 8001728:	6813      	ldr	r3, [r2, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	db03      	blt.n	8001736 <HAL_COMP_Start+0x1a>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 800172e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001732:	2b01      	cmp	r3, #1
 8001734:	d004      	beq.n	8001740 <HAL_COMP_Start+0x24>
    status = HAL_ERROR;
 8001736:	2001      	movs	r0, #1
      status = HAL_ERROR;
    }
  }

  return status;
}
 8001738:	b003      	add	sp, #12
 800173a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800173e:	4770      	bx	lr
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8001740:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <HAL_COMP_Start+0x60>)
 8001744:	4c0e      	ldr	r4, [pc, #56]	; (8001780 <HAL_COMP_Start+0x64>)
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8001746:	f041 0101 	orr.w	r1, r1, #1
 800174a:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	099b      	lsrs	r3, r3, #6
 8001750:	fba4 2303 	umull	r2, r3, r4, r3
 8001754:	099b      	lsrs	r3, r3, #6
 8001756:	00db      	lsls	r3, r3, #3
      hcomp->State = HAL_COMP_STATE_BUSY;
 8001758:	2202      	movs	r2, #2
 800175a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800175e:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 8001760:	9b01      	ldr	r3, [sp, #4]
 8001762:	b12b      	cbz	r3, 8001770 <HAL_COMP_Start+0x54>
        wait_loop_index--;
 8001764:	9b01      	ldr	r3, [sp, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 800176a:	9b01      	ldr	r3, [sp, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1f9      	bne.n	8001764 <HAL_COMP_Start+0x48>
  HAL_StatusTypeDef status = HAL_OK;
 8001770:	2000      	movs	r0, #0
}
 8001772:	b003      	add	sp, #12
 8001774:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	2000003c 	.word	0x2000003c
 8001780:	053e2d63 	.word	0x053e2d63

08001784 <HAL_COMP_IRQHandler>:
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001784:	4a0e      	ldr	r2, [pc, #56]	; (80017c0 <HAL_COMP_IRQHandler+0x3c>)
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8001786:	6803      	ldr	r3, [r0, #0]
 8001788:	6951      	ldr	r1, [r2, #20]
{
 800178a:	b510      	push	{r4, lr}
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800178c:	4c0d      	ldr	r4, [pc, #52]	; (80017c4 <HAL_COMP_IRQHandler+0x40>)
 800178e:	42a3      	cmp	r3, r4
 8001790:	bf0c      	ite	eq
 8001792:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001796:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 800179a:	ea33 0101 	bics.w	r1, r3, r1
 800179e:	d000      	beq.n	80017a2 <HAL_COMP_IRQHandler+0x1e>
 80017a0:	bd10      	pop	{r4, pc}
  /* Check COMP EXTI flag */
  if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
  {
#if defined(COMP2)
    /* Check whether comparator is in independent or window mode */
    if(READ_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE) != RESET)
 80017a2:	4909      	ldr	r1, [pc, #36]	; (80017c8 <HAL_COMP_IRQHandler+0x44>)
 80017a4:	6809      	ldr	r1, [r1, #0]
 80017a6:	0589      	lsls	r1, r1, #22
 80017a8:	d403      	bmi.n	80017b2 <HAL_COMP_IRQHandler+0x2e>
  WRITE_REG(EXTI->PR1, ExtiLine);
 80017aa:	6153      	str	r3, [r2, #20]
    
    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 80017ac:	f00f f920 	bl	80109f0 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 80017b0:	bd10      	pop	{r4, pc}
 80017b2:	f44f 03c0 	mov.w	r3, #6291456	; 0x600000
 80017b6:	6153      	str	r3, [r2, #20]
    HAL_COMP_TriggerCallback(hcomp);
 80017b8:	f00f f91a 	bl	80109f0 <HAL_COMP_TriggerCallback>
}
 80017bc:	bd10      	pop	{r4, pc}
 80017be:	bf00      	nop
 80017c0:	40010400 	.word	0x40010400
 80017c4:	40010200 	.word	0x40010200
 80017c8:	40010204 	.word	0x40010204

080017cc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017cc:	4a07      	ldr	r2, [pc, #28]	; (80017ec <HAL_NVIC_SetPriorityGrouping+0x20>)
 80017ce:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017d0:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 80017d4:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80017d6:	0200      	lsls	r0, r0, #8
 80017d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017dc:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80017e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80017e4:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80017e6:	60d3      	str	r3, [r2, #12]
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f0:	4b18      	ldr	r3, [pc, #96]	; (8001854 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f2:	b470      	push	{r4, r5, r6}
 80017f4:	68dc      	ldr	r4, [r3, #12]
 80017f6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017fa:	f1c4 0607 	rsb	r6, r4, #7
 80017fe:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001800:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001804:	bf28      	it	cs
 8001806:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001808:	2b06      	cmp	r3, #6
 800180a:	d917      	bls.n	800183c <HAL_NVIC_SetPriority+0x4c>
 800180c:	3c03      	subs	r4, #3
 800180e:	2501      	movs	r5, #1
 8001810:	40a5      	lsls	r5, r4
 8001812:	3d01      	subs	r5, #1
 8001814:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001816:	2301      	movs	r3, #1
 8001818:	40b3      	lsls	r3, r6
 800181a:	3b01      	subs	r3, #1
 800181c:	4019      	ands	r1, r3
 800181e:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 8001820:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001822:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 8001826:	db0c      	blt.n	8001842 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001828:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800182c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001830:	0109      	lsls	r1, r1, #4
 8001832:	b2c9      	uxtb	r1, r1
 8001834:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001838:	bc70      	pop	{r4, r5, r6}
 800183a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800183c:	2200      	movs	r2, #0
 800183e:	4614      	mov	r4, r2
 8001840:	e7e9      	b.n	8001816 <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001842:	4b05      	ldr	r3, [pc, #20]	; (8001858 <HAL_NVIC_SetPriority+0x68>)
 8001844:	f000 000f 	and.w	r0, r0, #15
 8001848:	0109      	lsls	r1, r1, #4
 800184a:	4403      	add	r3, r0
 800184c:	b2c9      	uxtb	r1, r1
 800184e:	7619      	strb	r1, [r3, #24]
 8001850:	bc70      	pop	{r4, r5, r6}
 8001852:	4770      	bx	lr
 8001854:	e000ed00 	.word	0xe000ed00
 8001858:	e000ecfc 	.word	0xe000ecfc

0800185c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800185c:	f000 011f 	and.w	r1, r0, #31
 8001860:	2301      	movs	r3, #1
 8001862:	0940      	lsrs	r0, r0, #5
 8001864:	4a02      	ldr	r2, [pc, #8]	; (8001870 <HAL_NVIC_EnableIRQ+0x14>)
 8001866:	408b      	lsls	r3, r1
 8001868:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100

08001874 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
  /* Check DAC handle */
  if(hdac == NULL)
 8001874:	b188      	cbz	r0, 800189a <HAL_DAC_Init+0x26>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8001876:	7903      	ldrb	r3, [r0, #4]
{
 8001878:	b510      	push	{r4, lr}
  if(hdac->State == HAL_DAC_STATE_RESET)
 800187a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800187e:	4604      	mov	r4, r0
 8001880:	b13b      	cbz	r3, 8001892 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001882:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8001884:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001886:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8001888:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 800188a:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800188c:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800188e:	7122      	strb	r2, [r4, #4]
  return HAL_OK;
 8001890:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8001892:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8001894:	f00d fc5e 	bl	800f154 <HAL_DAC_MspInit>
 8001898:	e7f3      	b.n	8001882 <HAL_DAC_Init+0xe>
     return HAL_ERROR;
 800189a:	2001      	movs	r0, #1
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop

080018a0 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80018a0:	7943      	ldrb	r3, [r0, #5]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d022      	beq.n	80018ec <HAL_DAC_Start+0x4c>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80018a6:	6802      	ldr	r2, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 80018a8:	2302      	movs	r3, #2
{
 80018aa:	b430      	push	{r4, r5}
  hdac->State = HAL_DAC_STATE_BUSY;
 80018ac:	7103      	strb	r3, [r0, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 80018ae:	6815      	ldr	r5, [r2, #0]
  __HAL_LOCK(hdac);
 80018b0:	2401      	movs	r4, #1
  __HAL_DAC_ENABLE(hdac, Channel);
 80018b2:	f001 0310 	and.w	r3, r1, #16
 80018b6:	fa04 f303 	lsl.w	r3, r4, r3
 80018ba:	432b      	orrs	r3, r5
  __HAL_LOCK(hdac);
 80018bc:	7144      	strb	r4, [r0, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 80018be:	6013      	str	r3, [r2, #0]

#if defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if(((DAC_CR_TEN1 & ~(DAC_CR_TSEL1)) == (hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1))))
 80018c0:	6813      	ldr	r3, [r2, #0]
  if(Channel == DAC_CHANNEL_1)
 80018c2:	b159      	cbz	r1, 80018dc <HAL_DAC_Start+0x3c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if(((DAC_CR_TEN2 & ~(DAC_CR_TSEL2)) == (hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2))))
 80018c4:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
 80018c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80018cc:	d010      	beq.n	80018f0 <HAL_DAC_Start+0x50>
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80018ce:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_READY;
 80018d0:	2201      	movs	r2, #1
 80018d2:	7102      	strb	r2, [r0, #4]
  __HAL_UNLOCK(hdac);
 80018d4:	7143      	strb	r3, [r0, #5]

  /* Return function status */
  return HAL_OK;
}
 80018d6:	bc30      	pop	{r4, r5}
  return HAL_OK;
 80018d8:	4618      	mov	r0, r3
}
 80018da:	4770      	bx	lr
    if(((DAC_CR_TEN1 & ~(DAC_CR_TSEL1)) == (hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1))))
 80018dc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d1f4      	bne.n	80018ce <HAL_DAC_Start+0x2e>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80018e4:	6853      	ldr	r3, [r2, #4]
 80018e6:	4323      	orrs	r3, r4
 80018e8:	6053      	str	r3, [r2, #4]
 80018ea:	e7f0      	b.n	80018ce <HAL_DAC_Start+0x2e>
  __HAL_LOCK(hdac);
 80018ec:	2002      	movs	r0, #2
 80018ee:	4770      	bx	lr
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80018f0:	6853      	ldr	r3, [r2, #4]
 80018f2:	f043 0302 	orr.w	r3, r3, #2
 80018f6:	6053      	str	r3, [r2, #4]
 80018f8:	e7e9      	b.n	80018ce <HAL_DAC_Start+0x2e>
 80018fa:	bf00      	nop

080018fc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 80018fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80018fe:	7944      	ldrb	r4, [r0, #5]
{
 8001900:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdac);
 8001902:	2c01      	cmp	r4, #1
 8001904:	d052      	beq.n	80019ac <HAL_DAC_Start_DMA+0xb0>
 8001906:	4696      	mov	lr, r2
 8001908:	460f      	mov	r7, r1

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800190a:	2202      	movs	r2, #2
  __HAL_LOCK(hdac);
 800190c:	2101      	movs	r1, #1
 800190e:	4604      	mov	r4, r0
 8001910:	7141      	strb	r1, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8001912:	7102      	strb	r2, [r0, #4]

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001914:	6806      	ldr	r6, [r0, #0]
  if(Channel == DAC_CHANNEL_1)
 8001916:	bb17      	cbnz	r7, 800195e <HAL_DAC_Start_DMA+0x62>
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001918:	6832      	ldr	r2, [r6, #0]
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800191a:	6880      	ldr	r0, [r0, #8]
 800191c:	492d      	ldr	r1, [pc, #180]	; (80019d4 <HAL_DAC_Start_DMA+0xd8>)
 800191e:	62c1      	str	r1, [r0, #44]	; 0x2c
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001920:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 80019e4 <HAL_DAC_Start_DMA+0xe8>
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001924:	492c      	ldr	r1, [pc, #176]	; (80019d8 <HAL_DAC_Start_DMA+0xdc>)
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001926:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800192a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000

    /* Case of use of channel 1 */
    switch(Alignment)
 800192e:	2d04      	cmp	r5, #4
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001930:	6341      	str	r1, [r0, #52]	; 0x34
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001932:	6032      	str	r2, [r6, #0]
    switch(Alignment)
 8001934:	d048      	beq.n	80019c8 <HAL_DAC_Start_DMA+0xcc>
 8001936:	2d08      	cmp	r5, #8
 8001938:	d03a      	beq.n	80019b0 <HAL_DAC_Start_DMA+0xb4>
 800193a:	2d00      	cmp	r5, #0
 800193c:	d041      	beq.n	80019c2 <HAL_DAC_Start_DMA+0xc6>
  uint32_t tmpreg = 0U;
 800193e:	463a      	mov	r2, r7

  /* Enable the DMA channel */
  if(Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001940:	6835      	ldr	r5, [r6, #0]
 8001942:	f445 5500 	orr.w	r5, r5, #8192	; 0x2000

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001946:	4671      	mov	r1, lr
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001948:	6035      	str	r5, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800194a:	f000 fa1d 	bl	8001d88 <HAL_DMA_Start_IT>
    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800194e:	2300      	movs	r3, #0
 8001950:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8001952:	b310      	cbz	r0, 800199a <HAL_DAC_Start_DMA+0x9e>
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001954:	6923      	ldr	r3, [r4, #16]
 8001956:	f043 0304 	orr.w	r3, r3, #4
 800195a:	6123      	str	r3, [r4, #16]
 800195c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800195e:	6832      	ldr	r2, [r6, #0]
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001960:	68c0      	ldr	r0, [r0, #12]
 8001962:	491e      	ldr	r1, [pc, #120]	; (80019dc <HAL_DAC_Start_DMA+0xe0>)
 8001964:	62c1      	str	r1, [r0, #44]	; 0x2c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001966:	f8df c080 	ldr.w	ip, [pc, #128]	; 80019e8 <HAL_DAC_Start_DMA+0xec>
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800196a:	491d      	ldr	r1, [pc, #116]	; (80019e0 <HAL_DAC_Start_DMA+0xe4>)
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800196c:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001970:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    switch(Alignment)
 8001974:	2d04      	cmp	r5, #4
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001976:	6341      	str	r1, [r0, #52]	; 0x34
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001978:	6032      	str	r2, [r6, #0]
    switch(Alignment)
 800197a:	d01f      	beq.n	80019bc <HAL_DAC_Start_DMA+0xc0>
 800197c:	2d08      	cmp	r5, #8
 800197e:	d01a      	beq.n	80019b6 <HAL_DAC_Start_DMA+0xba>
 8001980:	b32d      	cbz	r5, 80019ce <HAL_DAC_Start_DMA+0xd2>
  uint32_t tmpreg = 0U;
 8001982:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001984:	6835      	ldr	r5, [r6, #0]
 8001986:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800198a:	4671      	mov	r1, lr
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800198c:	6035      	str	r5, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800198e:	f000 f9fb 	bl	8001d88 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8001992:	2300      	movs	r3, #0
 8001994:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 8001996:	2800      	cmp	r0, #0
 8001998:	d1dc      	bne.n	8001954 <HAL_DAC_Start_DMA+0x58>
    __HAL_DAC_ENABLE(hdac, Channel);
 800199a:	6823      	ldr	r3, [r4, #0]
 800199c:	f007 0710 	and.w	r7, r7, #16
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	2101      	movs	r1, #1
 80019a4:	40b9      	lsls	r1, r7
 80019a6:	4311      	orrs	r1, r2
 80019a8:	6019      	str	r1, [r3, #0]
 80019aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hdac);
 80019ac:	2002      	movs	r0, #2
 80019ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80019b0:	f106 0210 	add.w	r2, r6, #16
        break;
 80019b4:	e7c4      	b.n	8001940 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80019b6:	f106 021c 	add.w	r2, r6, #28
        break;
 80019ba:	e7e3      	b.n	8001984 <HAL_DAC_Start_DMA+0x88>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80019bc:	f106 0218 	add.w	r2, r6, #24
        break;
 80019c0:	e7e0      	b.n	8001984 <HAL_DAC_Start_DMA+0x88>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80019c2:	f106 0208 	add.w	r2, r6, #8
        break;
 80019c6:	e7bb      	b.n	8001940 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80019c8:	f106 020c 	add.w	r2, r6, #12
        break;
 80019cc:	e7b8      	b.n	8001940 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80019ce:	f106 0214 	add.w	r2, r6, #20
        break;
 80019d2:	e7d7      	b.n	8001984 <HAL_DAC_Start_DMA+0x88>
 80019d4:	08001a1d 	.word	0x08001a1d
 80019d8:	08001a41 	.word	0x08001a41
 80019dc:	08001c25 	.word	0x08001c25
 80019e0:	08001c41 	.word	0x08001c41
 80019e4:	08001a31 	.word	0x08001a31
 80019e8:	08001c35 	.word	0x08001c35

080019ec <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80019ec:	b410      	push	{r4}
 80019ee:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80019f0:	6800      	ldr	r0, [r0, #0]
  __IO uint32_t tmp = 0;
 80019f2:	2400      	movs	r4, #0
 80019f4:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 80019f6:	9001      	str	r0, [sp, #4]
  if(Channel == DAC_CHANNEL_1)
 80019f8:	b151      	cbz	r1, 8001a10 <HAL_DAC_SetValue+0x24>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80019fa:	9901      	ldr	r1, [sp, #4]
 80019fc:	3114      	adds	r1, #20
 80019fe:	440a      	add	r2, r1
 8001a00:	9201      	str	r2, [sp, #4]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001a02:	9a01      	ldr	r2, [sp, #4]

  /* Return function status */
  return HAL_OK;
}
 8001a04:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8001a06:	6013      	str	r3, [r2, #0]
}
 8001a08:	b003      	add	sp, #12
 8001a0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a0e:	4770      	bx	lr
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001a10:	9901      	ldr	r1, [sp, #4]
 8001a12:	3108      	adds	r1, #8
 8001a14:	440a      	add	r2, r1
 8001a16:	9201      	str	r2, [sp, #4]
 8001a18:	e7f3      	b.n	8001a02 <HAL_DAC_SetValue+0x16>
 8001a1a:	bf00      	nop

08001a1c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001a1c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a1e:	6a84      	ldr	r4, [r0, #40]	; 0x28

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001a20:	4620      	mov	r0, r4
 8001a22:	f011 fadb 	bl	8012fdc <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001a26:	2301      	movs	r3, #1
 8001a28:	7123      	strb	r3, [r4, #4]
 8001a2a:	bd10      	pop	{r4, pc}

08001a2c <HAL_DAC_ConvHalfCpltCallbackCh1>:
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop

08001a30 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001a30:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001a32:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001a34:	f7ff fffa 	bl	8001a2c <HAL_DAC_ConvHalfCpltCallbackCh1>
 8001a38:	bd08      	pop	{r3, pc}
 8001a3a:	bf00      	nop

08001a3c <HAL_DAC_ErrorCallbackCh1>:
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop

08001a40 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001a40:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a42:	6a84      	ldr	r4, [r0, #40]	; 0x28

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001a44:	6923      	ldr	r3, [r4, #16]
 8001a46:	f043 0304 	orr.w	r3, r3, #4
 8001a4a:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001a4c:	4620      	mov	r0, r4
 8001a4e:	f7ff fff5 	bl	8001a3c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001a52:	2301      	movs	r3, #1
 8001a54:	7123      	strb	r3, [r4, #4]
 8001a56:	bd10      	pop	{r4, pc}

08001a58 <HAL_DAC_DMAUnderrunCallbackCh1>:
{
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop

08001a5c <HAL_DAC_IRQHandler>:
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001a5c:	6803      	ldr	r3, [r0, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	0491      	lsls	r1, r2, #18
{
 8001a62:	b510      	push	{r4, lr}
 8001a64:	4604      	mov	r4, r0
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001a66:	d502      	bpl.n	8001a6e <HAL_DAC_IRQHandler+0x12>
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001a68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a6a:	0492      	lsls	r2, r2, #18
 8001a6c:	d418      	bmi.n	8001aa0 <HAL_DAC_IRQHandler+0x44>
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	0091      	lsls	r1, r2, #2
 8001a72:	d502      	bpl.n	8001a7a <HAL_DAC_IRQHandler+0x1e>
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001a74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a76:	0092      	lsls	r2, r2, #2
 8001a78:	d400      	bmi.n	8001a7c <HAL_DAC_IRQHandler+0x20>
 8001a7a:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8001a7c:	2204      	movs	r2, #4
 8001a7e:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001a80:	6922      	ldr	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8001a82:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001a86:	f042 0202 	orr.w	r2, r2, #2
 8001a8a:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8001a8c:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001a94:	4620      	mov	r0, r4
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001a96:	601a      	str	r2, [r3, #0]
}
 8001a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001a9c:	f000 b8c0 	b.w	8001c20 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8001aa0:	2204      	movs	r2, #4
 8001aa2:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001aa4:	6902      	ldr	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8001aa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001aaa:	f042 0201 	orr.w	r2, r2, #1
 8001aae:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8001ab0:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ab8:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001aba:	f7ff ffcd 	bl	8001a58 <HAL_DAC_DMAUnderrunCallbackCh1>
 8001abe:	6823      	ldr	r3, [r4, #0]
 8001ac0:	e7d5      	b.n	8001a6e <HAL_DAC_IRQHandler+0x12>
 8001ac2:	bf00      	nop

08001ac4 <HAL_DAC_ConfigChannel>:
{
 8001ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdac);
 8001ac6:	7943      	ldrb	r3, [r0, #5]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d042      	beq.n	8001b52 <HAL_DAC_ConfigChannel+0x8e>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8001acc:	684f      	ldr	r7, [r1, #4]
 8001ace:	4615      	mov	r5, r2
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ad0:	2302      	movs	r3, #2
  __HAL_LOCK(hdac);
 8001ad2:	2201      	movs	r2, #1
  if(sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001ad4:	2f04      	cmp	r7, #4
 8001ad6:	460e      	mov	r6, r1
 8001ad8:	4604      	mov	r4, r0
  __HAL_LOCK(hdac);
 8001ada:	7142      	strb	r2, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8001adc:	7103      	strb	r3, [r0, #4]
  if(sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001ade:	d03a      	beq.n	8001b56 <HAL_DAC_ConfigChannel+0x92>
 8001ae0:	6803      	ldr	r3, [r0, #0]
 8001ae2:	f005 0510 	and.w	r5, r5, #16
  if(sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001ae6:	6972      	ldr	r2, [r6, #20]
 8001ae8:	2a01      	cmp	r2, #1
 8001aea:	d05f      	beq.n	8001bac <HAL_DAC_ConfigChannel+0xe8>
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001aec:	6930      	ldr	r0, [r6, #16]
 8001aee:	68f2      	ldr	r2, [r6, #12]
  tmpreg1 = hdac->Instance->MCR;
 8001af0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001af2:	4302      	orrs	r2, r0
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001af4:	2007      	movs	r0, #7
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001af6:	433a      	orrs	r2, r7
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001af8:	40a8      	lsls	r0, r5
 8001afa:	ea21 0100 	bic.w	r1, r1, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001afe:	40aa      	lsls	r2, r5
 8001b00:	430a      	orrs	r2, r1
  hdac->Instance->MCR = tmpreg1;
 8001b02:	63da      	str	r2, [r3, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001b04:	6819      	ldr	r1, [r3, #0]
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b06:	68b2      	ldr	r2, [r6, #8]
  if(DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8001b08:	6837      	ldr	r7, [r6, #0]
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001b0a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b0e:	40a8      	lsls	r0, r5
 8001b10:	ea21 0100 	bic.w	r1, r1, r0
 8001b14:	6019      	str	r1, [r3, #0]
  tmpreg1 = hdac->Instance->CR;
 8001b16:	681e      	ldr	r6, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001b18:	f640 71fe 	movw	r1, #4094	; 0xffe
 8001b1c:	40a9      	lsls	r1, r5
 8001b1e:	ea26 0601 	bic.w	r6, r6, r1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b22:	40aa      	lsls	r2, r5
  if(DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8001b24:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b28:	ea46 0602 	orr.w	r6, r6, r2
  if(DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8001b2c:	d03b      	beq.n	8001ba6 <HAL_DAC_ConfigChannel+0xe2>
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8001b2e:	2f00      	cmp	r7, #0
 8001b30:	d146      	bne.n	8001bc0 <HAL_DAC_ConfigChannel+0xfc>
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8001b32:	f426 4600 	bic.w	r6, r6, #32768	; 0x8000
  hdac->Instance->CR = tmpreg1;
 8001b36:	601e      	str	r6, [r3, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001b38:	6819      	ldr	r1, [r3, #0]
 8001b3a:	22c0      	movs	r2, #192	; 0xc0
 8001b3c:	fa02 f505 	lsl.w	r5, r2, r5
 8001b40:	ea21 0505 	bic.w	r5, r1, r5
  __HAL_UNLOCK(hdac);
 8001b44:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8001b46:	2101      	movs	r1, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001b48:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 8001b4a:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 8001b4c:	7121      	strb	r1, [r4, #4]
  __HAL_UNLOCK(hdac);
 8001b4e:	7162      	strb	r2, [r4, #5]
  return HAL_OK;
 8001b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hdac);
 8001b52:	2002      	movs	r0, #2
}
 8001b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Channel == DAC_CHANNEL_1)
 8001b56:	b925      	cbnz	r5, 8001b62 <HAL_DAC_ConfigChannel+0x9e>
 8001b58:	e045      	b.n	8001be6 <HAL_DAC_ConfigChannel+0x122>
        if((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001b5a:	f7ff f9f5 	bl	8000f48 <HAL_GetTick>
 8001b5e:	2801      	cmp	r0, #1
 8001b60:	d837      	bhi.n	8001bd2 <HAL_DAC_ConfigChannel+0x10e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001b62:	6823      	ldr	r3, [r4, #0]
 8001b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	dbf7      	blt.n	8001b5a <HAL_DAC_ConfigChannel+0x96>
      HAL_Delay(1);
 8001b6a:	2001      	movs	r0, #1
 8001b6c:	f7ff f9f2 	bl	8000f54 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001b70:	6823      	ldr	r3, [r4, #0]
 8001b72:	69f2      	ldr	r2, [r6, #28]
 8001b74:	645a      	str	r2, [r3, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001b76:	f005 0510 	and.w	r5, r5, #16
 8001b7a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001b7c:	6a32      	ldr	r2, [r6, #32]
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001b7e:	6a70      	ldr	r0, [r6, #36]	; 0x24
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001b80:	f240 37ff 	movw	r7, #1023	; 0x3ff
 8001b84:	40af      	lsls	r7, r5
 8001b86:	ea21 0107 	bic.w	r1, r1, r7
 8001b8a:	40aa      	lsls	r2, r5
 8001b8c:	4311      	orrs	r1, r2
 8001b8e:	6499      	str	r1, [r3, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001b90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b92:	6877      	ldr	r7, [r6, #4]
 8001b94:	21ff      	movs	r1, #255	; 0xff
 8001b96:	40a9      	lsls	r1, r5
 8001b98:	ea22 0201 	bic.w	r2, r2, r1
 8001b9c:	fa00 f105 	lsl.w	r1, r0, r5
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ba4:	e79f      	b.n	8001ae6 <HAL_DAC_ConfigChannel+0x22>
    tmpreg1 |= DAC_CR_HFSEL;
 8001ba6:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
 8001baa:	e7c4      	b.n	8001b36 <HAL_DAC_ConfigChannel+0x72>
  tmpreg1 = hdac->Instance->CCR;
 8001bac:	6b99      	ldr	r1, [r3, #56]	; 0x38
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001bae:	69b2      	ldr	r2, [r6, #24]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001bb0:	201f      	movs	r0, #31
 8001bb2:	40a8      	lsls	r0, r5
 8001bb4:	ea21 0100 	bic.w	r1, r1, r0
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001bb8:	40aa      	lsls	r2, r5
 8001bba:	430a      	orrs	r2, r1
  hdac->Instance->CCR = tmpreg1;
 8001bbc:	639a      	str	r2, [r3, #56]	; 0x38
 8001bbe:	e795      	b.n	8001aec <HAL_DAC_ConfigChannel+0x28>
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8001bc0:	f002 fe08 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_DAC_ConfigChannel+0x14c>)
 8001bc6:	4298      	cmp	r0, r3
 8001bc8:	d90b      	bls.n	8001be2 <HAL_DAC_ConfigChannel+0x11e>
         tmpreg1 |= DAC_CR_HFSEL;
 8001bca:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
 8001bce:	6823      	ldr	r3, [r4, #0]
 8001bd0:	e7b1      	b.n	8001b36 <HAL_DAC_ConfigChannel+0x72>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001bd2:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001bd4:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001bd6:	f043 0308 	orr.w	r3, r3, #8
 8001bda:	6123      	str	r3, [r4, #16]
          return HAL_TIMEOUT;
 8001bdc:	4610      	mov	r0, r2
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001bde:	7122      	strb	r2, [r4, #4]
          return HAL_TIMEOUT;
 8001be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001be2:	6823      	ldr	r3, [r4, #0]
 8001be4:	e7a5      	b.n	8001b32 <HAL_DAC_ConfigChannel+0x6e>
      tickstart = HAL_GetTick();
 8001be6:	f7ff f9af 	bl	8000f48 <HAL_GetTick>
 8001bea:	4607      	mov	r7, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001bec:	e004      	b.n	8001bf8 <HAL_DAC_ConfigChannel+0x134>
        if((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001bee:	f7ff f9ab 	bl	8000f48 <HAL_GetTick>
 8001bf2:	1bc0      	subs	r0, r0, r7
 8001bf4:	2801      	cmp	r0, #1
 8001bf6:	d8ec      	bhi.n	8001bd2 <HAL_DAC_ConfigChannel+0x10e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001bf8:	6823      	ldr	r3, [r4, #0]
 8001bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bfc:	041b      	lsls	r3, r3, #16
 8001bfe:	d4f6      	bmi.n	8001bee <HAL_DAC_ConfigChannel+0x12a>
      HAL_Delay(1);
 8001c00:	2001      	movs	r0, #1
 8001c02:	f7ff f9a7 	bl	8000f54 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001c06:	6823      	ldr	r3, [r4, #0]
 8001c08:	69f2      	ldr	r2, [r6, #28]
 8001c0a:	641a      	str	r2, [r3, #64]	; 0x40
 8001c0c:	e7b3      	b.n	8001b76 <HAL_DAC_ConfigChannel+0xb2>
 8001c0e:	bf00      	nop
 8001c10:	04c4b400 	.word	0x04c4b400

08001c14 <HAL_DACEx_ConvCpltCallbackCh2>:
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop

08001c18 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop

08001c1c <HAL_DACEx_ErrorCallbackCh2>:
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop

08001c20 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop

08001c24 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001c24:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c26:	6a84      	ldr	r4, [r0, #40]	; 0x28

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001c28:	4620      	mov	r0, r4
 8001c2a:	f7ff fff3 	bl	8001c14 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State= HAL_DAC_STATE_READY;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	7123      	strb	r3, [r4, #4]
 8001c32:	bd10      	pop	{r4, pc}

08001c34 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001c34:	b508      	push	{r3, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001c36:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001c38:	f7ff ffee 	bl	8001c18 <HAL_DACEx_ConvHalfCpltCallbackCh2>
 8001c3c:	bd08      	pop	{r3, pc}
 8001c3e:	bf00      	nop

08001c40 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001c40:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c42:	6a84      	ldr	r4, [r0, #40]	; 0x28

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001c44:	6923      	ldr	r3, [r4, #16]
 8001c46:	f043 0304 	orr.w	r3, r3, #4
 8001c4a:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	f7ff ffe5 	bl	8001c1c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State= HAL_DAC_STATE_READY;
 8001c52:	2301      	movs	r3, #1
 8001c54:	7123      	strb	r3, [r4, #4]
 8001c56:	bd10      	pop	{r4, pc}

08001c58 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001c58:	2800      	cmp	r0, #0
 8001c5a:	d07d      	beq.n	8001d58 <HAL_DMA_Init+0x100>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001c5c:	6801      	ldr	r1, [r0, #0]
 8001c5e:	4a3f      	ldr	r2, [pc, #252]	; (8001d5c <HAL_DMA_Init+0x104>)
 8001c60:	4291      	cmp	r1, r2
{
 8001c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c66:	4603      	mov	r3, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001c68:	d963      	bls.n	8001d32 <HAL_DMA_Init+0xda>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001c6a:	4f3d      	ldr	r7, [pc, #244]	; (8001d60 <HAL_DMA_Init+0x108>)
 8001c6c:	4a3d      	ldr	r2, [pc, #244]	; (8001d64 <HAL_DMA_Init+0x10c>)
    hdma->DmaBaseAddress = DMA2;
 8001c6e:	483e      	ldr	r0, [pc, #248]	; (8001d68 <HAL_DMA_Init+0x110>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001c70:	440f      	add	r7, r1
 8001c72:	fba2 2707 	umull	r2, r7, r2, r7
 8001c76:	093f      	lsrs	r7, r7, #4
 8001c78:	00bf      	lsls	r7, r7, #2
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c7a:	f103 020c 	add.w	r2, r3, #12
 8001c7e:	ca34      	ldmia	r2, {r2, r4, r5}
  tmp |=  hdma->Init.Direction        |
 8001c80:	689e      	ldr	r6, [r3, #8]
 8001c82:	6418      	str	r0, [r3, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c84:	f04f 0e02 	mov.w	lr, #2
  tmp |=  hdma->Init.Direction        |
 8001c88:	4332      	orrs	r2, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c8a:	6998      	ldr	r0, [r3, #24]
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c8c:	f883 e025 	strb.w	lr, [r3, #37]	; 0x25
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c90:	4322      	orrs	r2, r4
  else
  {
    /* DMA2 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
  }
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001c92:	fa5f fe81 	uxtb.w	lr, r1
 8001c96:	4c33      	ldr	r4, [pc, #204]	; (8001d64 <HAL_DMA_Init+0x10c>)
  tmp = hdma->Instance->CCR;
 8001c98:	f8d1 8000 	ldr.w	r8, [r1]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001c9c:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 8001d5c <HAL_DMA_Init+0x104>
 8001ca0:	645f      	str	r7, [r3, #68]	; 0x44
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ca2:	432a      	orrs	r2, r5
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001ca4:	f1ae 0508 	sub.w	r5, lr, #8
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ca8:	4302      	orrs	r2, r0
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001caa:	fba4 0505 	umull	r0, r5, r4, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cae:	69d8      	ldr	r0, [r3, #28]
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cb0:	6a1c      	ldr	r4, [r3, #32]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001cb2:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 8001d84 <HAL_DMA_Init+0x12c>
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cb6:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cb8:	4322      	orrs	r2, r4
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001cba:	4c2c      	ldr	r4, [pc, #176]	; (8001d6c <HAL_DMA_Init+0x114>)
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001cbc:	0928      	lsrs	r0, r5, #4
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001cbe:	f428 48ff 	bic.w	r8, r8, #32640	; 0x7f80
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001cc2:	4561      	cmp	r1, ip
 8001cc4:	bf98      	it	ls
 8001cc6:	46a6      	movls	lr, r4
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_ChannelBase + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001cc8:	08bf      	lsrs	r7, r7, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001cca:	f028 0870 	bic.w	r8, r8, #112	; 0x70
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001cce:	f000 001c 	and.w	r0, r0, #28
 8001cd2:	2401      	movs	r4, #1
  tmp |=  hdma->Init.Direction        |
 8001cd4:	ea42 0208 	orr.w	r2, r2, r8
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001cd8:	fa04 f000 	lsl.w	r0, r4, r0
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_ChannelBase + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001cdc:	eb0e 0c87 	add.w	ip, lr, r7, lsl #2
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001ce0:	4d23      	ldr	r5, [pc, #140]	; (8001d70 <HAL_DMA_Init+0x118>)
  hdma->Instance->CCR = tmp;
 8001ce2:	600a      	str	r2, [r1, #0]
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001ce4:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001ce8:	6518      	str	r0, [r3, #80]	; 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_ChannelBase + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001cea:	f8c3 c048 	str.w	ip, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001cee:	64dd      	str	r5, [r3, #76]	; 0x4c
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001cf0:	d028      	beq.n	8001d44 <HAL_DMA_Init+0xec>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001cf2:	6859      	ldr	r1, [r3, #4]
 8001cf4:	b2ca      	uxtb	r2, r1
  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001cf6:	3901      	subs	r1, #1
 8001cf8:	2903      	cmp	r1, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001cfa:	f84e 2027 	str.w	r2, [lr, r7, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cfe:	6068      	str	r0, [r5, #4]
  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001d00:	d825      	bhi.n	8001d4e <HAL_DMA_Init+0xf6>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d02:	491c      	ldr	r1, [pc, #112]	; (8001d74 <HAL_DMA_Init+0x11c>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001d04:	481c      	ldr	r0, [pc, #112]	; (8001d78 <HAL_DMA_Init+0x120>)
 8001d06:	6598      	str	r0, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d08:	4411      	add	r1, r2

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001d0a:	3a01      	subs	r2, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d0c:	0089      	lsls	r1, r1, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001d0e:	f002 0203 	and.w	r2, r2, #3
 8001d12:	fa04 f202 	lsl.w	r2, r4, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d16:	2400      	movs	r4, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d18:	6559      	str	r1, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001d1a:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d1c:	600c      	str	r4, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d1e:	6042      	str	r2, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d20:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8001d22:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d24:	63d8      	str	r0, [r3, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8001d26:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8001d2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return HAL_OK;
 8001d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d32:	4f12      	ldr	r7, [pc, #72]	; (8001d7c <HAL_DMA_Init+0x124>)
 8001d34:	4a0b      	ldr	r2, [pc, #44]	; (8001d64 <HAL_DMA_Init+0x10c>)
    hdma->DmaBaseAddress = DMA1;
 8001d36:	4812      	ldr	r0, [pc, #72]	; (8001d80 <HAL_DMA_Init+0x128>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d38:	440f      	add	r7, r1
 8001d3a:	fba2 2707 	umull	r2, r7, r2, r7
 8001d3e:	093f      	lsrs	r7, r7, #4
 8001d40:	00bf      	lsls	r7, r7, #2
 8001d42:	e79a      	b.n	8001c7a <HAL_DMA_Init+0x22>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d44:	2200      	movs	r2, #0
 8001d46:	605a      	str	r2, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d48:	f84e 2027 	str.w	r2, [lr, r7, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d4c:	6068      	str	r0, [r5, #4]
    hdma->DMAmuxRequestGen = 0U;
 8001d4e:	2200      	movs	r2, #0
 8001d50:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001d52:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d54:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d56:	e7e3      	b.n	8001d20 <HAL_DMA_Init+0xc8>
    return HAL_ERROR;
 8001d58:	2001      	movs	r0, #1
 8001d5a:	4770      	bx	lr
 8001d5c:	40020407 	.word	0x40020407
 8001d60:	bffdfbf8 	.word	0xbffdfbf8
 8001d64:	cccccccd 	.word	0xcccccccd
 8001d68:	40020400 	.word	0x40020400
 8001d6c:	40020800 	.word	0x40020800
 8001d70:	40020880 	.word	0x40020880
 8001d74:	1000823f 	.word	0x1000823f
 8001d78:	40020940 	.word	0x40020940
 8001d7c:	bffdfff8 	.word	0xbffdfff8
 8001d80:	40020000 	.word	0x40020000
 8001d84:	4002081c 	.word	0x4002081c

08001d88 <HAL_DMA_Start_IT>:
{
 8001d88:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8001d8a:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8001d8e:	2c01      	cmp	r4, #1
 8001d90:	d00b      	beq.n	8001daa <HAL_DMA_Start_IT+0x22>
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d92:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 8001d96:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d98:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 8001d9a:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d9e:	d006      	beq.n	8001dae <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 8001da0:	2300      	movs	r3, #0
 8001da2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    status = HAL_BUSY;
 8001da6:	2002      	movs	r0, #2
 8001da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 8001daa:	2002      	movs	r0, #2
}
 8001dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE(hdma);
 8001dae:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001db0:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
 8001db2:	f8d0 e050 	ldr.w	lr, [r0, #80]	; 0x50
    hdma->State = HAL_DMA_STATE_BUSY;
 8001db6:	2602      	movs	r6, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001db8:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dba:	f880 6025 	strb.w	r6, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dbe:	63c5      	str	r5, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001dc0:	6826      	ldr	r6, [r4, #0]
  if(hdma->DMAmuxRequestGen != 0U)
 8001dc2:	6d45      	ldr	r5, [r0, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8001dc4:	f026 0601 	bic.w	r6, r6, #1
 8001dc8:	6026      	str	r6, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001dca:	f8c7 e004 	str.w	lr, [r7, #4]
  if(hdma->DMAmuxRequestGen != 0U)
 8001dce:	b115      	cbz	r5, 8001dd6 <HAL_DMA_Start_IT+0x4e>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dd0:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8001dd2:	6dc7      	ldr	r7, [r0, #92]	; 0x5c
 8001dd4:	6077      	str	r7, [r6, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001dd6:	6c46      	ldr	r6, [r0, #68]	; 0x44
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dd8:	6887      	ldr	r7, [r0, #8]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001dda:	f006 0e1c 	and.w	lr, r6, #28
 8001dde:	2601      	movs	r6, #1
 8001de0:	fa06 fe0e 	lsl.w	lr, r6, lr
 8001de4:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8001de6:	f8c6 e004 	str.w	lr, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8001dea:	6063      	str	r3, [r4, #4]
    if(NULL != hdma->XferHalfCpltCallback )
 8001dec:	6b03      	ldr	r3, [r0, #48]	; 0x30
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dee:	2f10      	cmp	r7, #16
    hdma->Instance->CPAR = DstAddress;
 8001df0:	bf0b      	itete	eq
 8001df2:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8001df4:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001df6:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8001df8:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001dfa:	b1bb      	cbz	r3, 8001e2c <HAL_DMA_Start_IT+0xa4>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dfc:	6823      	ldr	r3, [r4, #0]
 8001dfe:	f043 030e 	orr.w	r3, r3, #14
 8001e02:	6023      	str	r3, [r4, #0]
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001e04:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	03d2      	lsls	r2, r2, #15
 8001e0a:	d40a      	bmi.n	8001e22 <HAL_DMA_Start_IT+0x9a>
    if(hdma->DMAmuxRequestGen != 0U)
 8001e0c:	b11d      	cbz	r5, 8001e16 <HAL_DMA_Start_IT+0x8e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001e0e:	682b      	ldr	r3, [r5, #0]
 8001e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e14:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8001e16:	6823      	ldr	r3, [r4, #0]
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e1e:	2000      	movs	r0, #0
 8001e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	e7ef      	b.n	8001e0c <HAL_DMA_Start_IT+0x84>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e2c:	6823      	ldr	r3, [r4, #0]
 8001e2e:	f023 0304 	bic.w	r3, r3, #4
 8001e32:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e34:	6823      	ldr	r3, [r4, #0]
 8001e36:	f043 030a 	orr.w	r3, r3, #10
 8001e3a:	6023      	str	r3, [r4, #0]
 8001e3c:	e7e2      	b.n	8001e04 <HAL_DMA_Start_IT+0x7c>
 8001e3e:	bf00      	nop

08001e40 <HAL_DMA_Abort_IT>:
{
 8001e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e42:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d003      	beq.n	8001e52 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8001e4e:	2001      	movs	r0, #1
 8001e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e52:	6803      	ldr	r3, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e54:	6c87      	ldr	r7, [r0, #72]	; 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e56:	6819      	ldr	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001e5a:	6c06      	ldr	r6, [r0, #64]	; 0x40
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e5c:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
    if(hdma->DMAmuxRequestGen != 0U)
 8001e5e:	6d44      	ldr	r4, [r0, #84]	; 0x54
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e60:	f021 010e 	bic.w	r1, r1, #14
 8001e64:	6019      	str	r1, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001e66:	6819      	ldr	r1, [r3, #0]
 8001e68:	f021 0101 	bic.w	r1, r1, #1
 8001e6c:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e6e:	683b      	ldr	r3, [r7, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e70:	6d01      	ldr	r1, [r0, #80]	; 0x50
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e76:	603b      	str	r3, [r7, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e78:	f002 021c 	and.w	r2, r2, #28
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	4093      	lsls	r3, r2
 8001e80:	6073      	str	r3, [r6, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e82:	6069      	str	r1, [r5, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8001e84:	b134      	cbz	r4, 8001e94 <HAL_DMA_Abort_IT+0x54>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e86:	6823      	ldr	r3, [r4, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e88:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8001e8a:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e90:	6023      	str	r3, [r4, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e92:	6051      	str	r1, [r2, #4]
    if(hdma->XferAbortCallback != NULL)
 8001e94:	6b83      	ldr	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001e96:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 8001e98:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8001e9a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001e9e:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8001ea2:	b113      	cbz	r3, 8001eaa <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 8001ea4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001ea6:	4620      	mov	r0, r4
 8001ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001eaa:	4618      	mov	r0, r3
}
 8001eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001eae:	bf00      	nop

08001eb0 <HAL_DMA_IRQHandler>:
{
 8001eb0:	b4f0      	push	{r4, r5, r6, r7}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001eb2:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001eb4:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8001eb6:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001eb8:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001eba:	682c      	ldr	r4, [r5, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001ebc:	2204      	movs	r2, #4
 8001ebe:	f003 031c 	and.w	r3, r3, #28
 8001ec2:	409a      	lsls	r2, r3
 8001ec4:	4211      	tst	r1, r2
 8001ec6:	d00d      	beq.n	8001ee4 <HAL_DMA_IRQHandler+0x34>
 8001ec8:	0767      	lsls	r7, r4, #29
 8001eca:	d50b      	bpl.n	8001ee4 <HAL_DMA_IRQHandler+0x34>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ecc:	682b      	ldr	r3, [r5, #0]
 8001ece:	069b      	lsls	r3, r3, #26
 8001ed0:	d403      	bmi.n	8001eda <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ed2:	682b      	ldr	r3, [r5, #0]
 8001ed4:	f023 0304 	bic.w	r3, r3, #4
 8001ed8:	602b      	str	r3, [r5, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8001eda:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001edc:	6072      	str	r2, [r6, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8001ede:	b1c3      	cbz	r3, 8001f12 <HAL_DMA_IRQHandler+0x62>
}
 8001ee0:	bcf0      	pop	{r4, r5, r6, r7}
      hdma->XferErrorCallback(hdma);
 8001ee2:	4718      	bx	r3
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	409a      	lsls	r2, r3
 8001ee8:	4211      	tst	r1, r2
 8001eea:	d014      	beq.n	8001f16 <HAL_DMA_IRQHandler+0x66>
 8001eec:	07a7      	lsls	r7, r4, #30
 8001eee:	d512      	bpl.n	8001f16 <HAL_DMA_IRQHandler+0x66>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ef0:	682b      	ldr	r3, [r5, #0]
 8001ef2:	0699      	lsls	r1, r3, #26
 8001ef4:	d406      	bmi.n	8001f04 <HAL_DMA_IRQHandler+0x54>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ef6:	682b      	ldr	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001ef8:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001efa:	f023 030a 	bic.w	r3, r3, #10
 8001efe:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001f00:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    if(hdma->XferCpltCallback != NULL)
 8001f04:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001f06:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1e6      	bne.n	8001ee0 <HAL_DMA_IRQHandler+0x30>
}
 8001f12:	bcf0      	pop	{r4, r5, r6, r7}
 8001f14:	4770      	bx	lr
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001f16:	2208      	movs	r2, #8
 8001f18:	409a      	lsls	r2, r3
 8001f1a:	420a      	tst	r2, r1
 8001f1c:	d0f9      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x62>
 8001f1e:	0722      	lsls	r2, r4, #28
 8001f20:	d5f7      	bpl.n	8001f12 <HAL_DMA_IRQHandler+0x62>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f22:	6829      	ldr	r1, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8001f24:	6b44      	ldr	r4, [r0, #52]	; 0x34
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001f26:	2201      	movs	r2, #1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f28:	f021 010e 	bic.w	r1, r1, #14
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 8001f30:	2700      	movs	r7, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f32:	6029      	str	r1, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001f34:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f36:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8001f38:	f880 7024 	strb.w	r7, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8001f3c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 8001f40:	2c00      	cmp	r4, #0
 8001f42:	d0e6      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x62>
      hdma->XferErrorCallback(hdma);
 8001f44:	4623      	mov	r3, r4
}
 8001f46:	bcf0      	pop	{r4, r5, r6, r7}
      hdma->XferErrorCallback(hdma);
 8001f48:	4718      	bx	r3
 8001f4a:	bf00      	nop

08001f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f4c:	468c      	mov	ip, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f4e:	6809      	ldr	r1, [r1, #0]
 8001f50:	2900      	cmp	r1, #0
 8001f52:	f000 80fe 	beq.w	8002152 <HAL_GPIO_Init+0x206>
{
 8001f56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5a:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8002170 <HAL_GPIO_Init+0x224>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f5e:	f8df e214 	ldr.w	lr, [pc, #532]	; 8002174 <HAL_GPIO_Init+0x228>
{
 8001f62:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f64:	2500      	movs	r5, #0
 8001f66:	e088      	b.n	800207a <HAL_GPIO_Init+0x12e>
 8001f68:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f6c:	2203      	movs	r2, #3
      temp = GPIOx->MODER;
 8001f6e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f72:	fa02 f209 	lsl.w	r2, r2, r9
 8001f76:	43d2      	mvns	r2, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f78:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f7c:	ea0b 0b02 	and.w	fp, fp, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f80:	fa06 f609 	lsl.w	r6, r6, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f84:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f88:	ea46 060b 	orr.w	r6, r6, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f8c:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8001f90:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f92:	f240 80a7 	bls.w	80020e4 <HAL_GPIO_Init+0x198>
      temp = GPIOx->PUPDR;
 8001f96:	68c6      	ldr	r6, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f98:	f8dc 3008 	ldr.w	r3, [ip, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f9c:	4032      	ands	r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f9e:	fa03 f309 	lsl.w	r3, r3, r9
 8001fa2:	4313      	orrs	r3, r2
      GPIOx->PUPDR = temp;
 8001fa4:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fa6:	00e3      	lsls	r3, r4, #3
 8001fa8:	d563      	bpl.n	8002072 <HAL_GPIO_Init+0x126>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001faa:	f8d8 3060 	ldr.w	r3, [r8, #96]	; 0x60
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	f8c8 3060 	str.w	r3, [r8, #96]	; 0x60
 8001fb6:	f8d8 3060 	ldr.w	r3, [r8, #96]	; 0x60
 8001fba:	f025 0603 	bic.w	r6, r5, #3
 8001fbe:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8001fca:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fcc:	f005 0303 	and.w	r3, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd0:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001fd2:	f8d6 9008 	ldr.w	r9, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	220f      	movs	r2, #15
 8001fda:	409a      	lsls	r2, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fdc:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fe0:	ea29 0a02 	bic.w	sl, r9, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fe4:	f000 8095 	beq.w	8002112 <HAL_GPIO_Init+0x1c6>
 8001fe8:	4a5a      	ldr	r2, [pc, #360]	; (8002154 <HAL_GPIO_Init+0x208>)
 8001fea:	4290      	cmp	r0, r2
 8001fec:	f000 8093 	beq.w	8002116 <HAL_GPIO_Init+0x1ca>
 8001ff0:	4a59      	ldr	r2, [pc, #356]	; (8002158 <HAL_GPIO_Init+0x20c>)
 8001ff2:	4290      	cmp	r0, r2
 8001ff4:	f000 8094 	beq.w	8002120 <HAL_GPIO_Init+0x1d4>
 8001ff8:	4a58      	ldr	r2, [pc, #352]	; (800215c <HAL_GPIO_Init+0x210>)
 8001ffa:	4290      	cmp	r0, r2
 8001ffc:	f000 8095 	beq.w	800212a <HAL_GPIO_Init+0x1de>
 8002000:	4a57      	ldr	r2, [pc, #348]	; (8002160 <HAL_GPIO_Init+0x214>)
 8002002:	4290      	cmp	r0, r2
 8002004:	f000 8096 	beq.w	8002134 <HAL_GPIO_Init+0x1e8>
 8002008:	4a56      	ldr	r2, [pc, #344]	; (8002164 <HAL_GPIO_Init+0x218>)
 800200a:	4290      	cmp	r0, r2
 800200c:	f000 8097 	beq.w	800213e <HAL_GPIO_Init+0x1f2>
 8002010:	4a55      	ldr	r2, [pc, #340]	; (8002168 <HAL_GPIO_Init+0x21c>)
 8002012:	4290      	cmp	r0, r2
 8002014:	f000 8098 	beq.w	8002148 <HAL_GPIO_Init+0x1fc>
 8002018:	4a54      	ldr	r2, [pc, #336]	; (800216c <HAL_GPIO_Init+0x220>)
 800201a:	4290      	cmp	r0, r2
 800201c:	bf0c      	ite	eq
 800201e:	f04f 0907 	moveq.w	r9, #7
 8002022:	f04f 0908 	movne.w	r9, #8
 8002026:	fa09 f303 	lsl.w	r3, r9, r3
 800202a:	ea43 030a 	orr.w	r3, r3, sl
        SYSCFG->EXTICR[position >> 2u] = temp;
 800202e:	60b3      	str	r3, [r6, #8]
        temp = EXTI->IMR1;
 8002030:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~(iocurrent);
 8002034:	43fa      	mvns	r2, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002036:	03e6      	lsls	r6, r4, #15
        temp &= ~(iocurrent);
 8002038:	bf54      	ite	pl
 800203a:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800203c:	433b      	orrmi	r3, r7
        }
        EXTI->IMR1 = temp;
 800203e:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR1;
 8002042:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002046:	03a6      	lsls	r6, r4, #14
        temp &= ~(iocurrent);
 8002048:	bf54      	ite	pl
 800204a:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800204c:	433b      	orrmi	r3, r7
        }
        EXTI->EMR1 = temp;
 800204e:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002052:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002056:	02e6      	lsls	r6, r4, #11
        temp &= ~(iocurrent);
 8002058:	bf54      	ite	pl
 800205a:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800205c:	433b      	orrmi	r3, r7
        }
        EXTI->RTSR1 = temp;
 800205e:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR1;
 8002062:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002066:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8002068:	bf54      	ite	pl
 800206a:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800206c:	433b      	orrmi	r3, r7
        }
        EXTI->FTSR1 = temp;
 800206e:	f8ce 300c 	str.w	r3, [lr, #12]
      }
    }

    position++;
 8002072:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002074:	fa31 f305 	lsrs.w	r3, r1, r5
 8002078:	d048      	beq.n	800210c <HAL_GPIO_Init+0x1c0>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800207a:	2301      	movs	r3, #1
 800207c:	40ab      	lsls	r3, r5
    if (iocurrent != 0x00u)
 800207e:	ea13 0701 	ands.w	r7, r3, r1
 8002082:	d0f6      	beq.n	8002072 <HAL_GPIO_Init+0x126>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002084:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8002088:	f024 0a10 	bic.w	sl, r4, #16
 800208c:	f1ba 0f02 	cmp.w	sl, #2
 8002090:	f47f af6a 	bne.w	8001f68 <HAL_GPIO_Init+0x1c>
        temp = GPIOx->AFR[position >> 3u];
 8002094:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 8002098:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800209c:	f005 0207 	and.w	r2, r5, #7
        temp = GPIOx->AFR[position >> 3u];
 80020a0:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020a4:	0092      	lsls	r2, r2, #2
 80020a6:	f04f 0b0f 	mov.w	fp, #15
 80020aa:	fa0b fb02 	lsl.w	fp, fp, r2
 80020ae:	ea26 0a0b 	bic.w	sl, r6, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020b2:	f8dc 6010 	ldr.w	r6, [ip, #16]
 80020b6:	fa06 f202 	lsl.w	r2, r6, r2
 80020ba:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->AFR[position >> 3u] = temp;
 80020be:	f8c9 2020 	str.w	r2, [r9, #32]
 80020c2:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020c6:	2203      	movs	r2, #3
      temp = GPIOx->MODER;
 80020c8:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020cc:	fa02 f209 	lsl.w	r2, r2, r9
 80020d0:	43d2      	mvns	r2, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020d2:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020d6:	ea02 0a0a 	and.w	sl, r2, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020da:	fa06 f609 	lsl.w	r6, r6, r9
 80020de:	ea46 060a 	orr.w	r6, r6, sl
      GPIOx->MODER = temp;
 80020e2:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR;
 80020e4:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020e6:	ea06 0a02 	and.w	sl, r6, r2
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020ea:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80020ee:	fa06 f609 	lsl.w	r6, r6, r9
 80020f2:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 80020f6:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80020f8:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80020fc:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002100:	ea2a 0303 	bic.w	r3, sl, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002104:	40ae      	lsls	r6, r5
 8002106:	431e      	orrs	r6, r3
        GPIOx->OTYPER = temp;
 8002108:	6046      	str	r6, [r0, #4]
 800210a:	e744      	b.n	8001f96 <HAL_GPIO_Init+0x4a>
  }
}
 800210c:	b003      	add	sp, #12
 800210e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002112:	2300      	movs	r3, #0
 8002114:	e789      	b.n	800202a <HAL_GPIO_Init+0xde>
 8002116:	f04f 0901 	mov.w	r9, #1
 800211a:	fa09 f303 	lsl.w	r3, r9, r3
 800211e:	e784      	b.n	800202a <HAL_GPIO_Init+0xde>
 8002120:	f04f 0902 	mov.w	r9, #2
 8002124:	fa09 f303 	lsl.w	r3, r9, r3
 8002128:	e77f      	b.n	800202a <HAL_GPIO_Init+0xde>
 800212a:	f04f 0903 	mov.w	r9, #3
 800212e:	fa09 f303 	lsl.w	r3, r9, r3
 8002132:	e77a      	b.n	800202a <HAL_GPIO_Init+0xde>
 8002134:	f04f 0904 	mov.w	r9, #4
 8002138:	fa09 f303 	lsl.w	r3, r9, r3
 800213c:	e775      	b.n	800202a <HAL_GPIO_Init+0xde>
 800213e:	f04f 0905 	mov.w	r9, #5
 8002142:	fa09 f303 	lsl.w	r3, r9, r3
 8002146:	e770      	b.n	800202a <HAL_GPIO_Init+0xde>
 8002148:	f04f 0906 	mov.w	r9, #6
 800214c:	fa09 f303 	lsl.w	r3, r9, r3
 8002150:	e76b      	b.n	800202a <HAL_GPIO_Init+0xde>
 8002152:	4770      	bx	lr
 8002154:	48000400 	.word	0x48000400
 8002158:	48000800 	.word	0x48000800
 800215c:	48000c00 	.word	0x48000c00
 8002160:	48001000 	.word	0x48001000
 8002164:	48001400 	.word	0x48001400
 8002168:	48001800 	.word	0x48001800
 800216c:	48001c00 	.word	0x48001c00
 8002170:	40021000 	.word	0x40021000
 8002174:	40010400 	.word	0x40010400

08002178 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002178:	6903      	ldr	r3, [r0, #16]
 800217a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800217c:	bf14      	ite	ne
 800217e:	2001      	movne	r0, #1
 8002180:	2000      	moveq	r0, #0
 8002182:	4770      	bx	lr

08002184 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002184:	b90a      	cbnz	r2, 800218a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002186:	6281      	str	r1, [r0, #40]	; 0x28
 8002188:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800218a:	6181      	str	r1, [r0, #24]
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop

08002190 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002190:	6943      	ldr	r3, [r0, #20]
 8002192:	4059      	eors	r1, r3
 8002194:	6141      	str	r1, [r0, #20]
 8002196:	4770      	bx	lr

08002198 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002198:	4a04      	ldr	r2, [pc, #16]	; (80021ac <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800219a:	6951      	ldr	r1, [r2, #20]
 800219c:	4201      	tst	r1, r0
 800219e:	d100      	bne.n	80021a2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80021a0:	4770      	bx	lr
{
 80021a2:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021a4:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021a6:	f00e fc25 	bl	80109f4 <HAL_GPIO_EXTI_Callback>
 80021aa:	bd08      	pop	{r3, pc}
 80021ac:	40010400 	.word	0x40010400

080021b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021b0:	b570      	push	{r4, r5, r6, lr}
 80021b2:	4604      	mov	r4, r0
 80021b4:	4616      	mov	r6, r2
 80021b6:	460d      	mov	r5, r1
 80021b8:	b941      	cbnz	r1, 80021cc <I2C_WaitOnRXNEFlagUntilTimeout+0x1c>
 80021ba:	e041      	b.n	8002240 <I2C_WaitOnRXNEFlagUntilTimeout+0x90>
    {
      return HAL_ERROR;
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80021bc:	699a      	ldr	r2, [r3, #24]
 80021be:	0691      	lsls	r1, r2, #26
 80021c0:	d457      	bmi.n	8002272 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
        return HAL_ERROR;
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021c2:	f7fe fec1 	bl	8000f48 <HAL_GetTick>
 80021c6:	1b80      	subs	r0, r0, r6
 80021c8:	4285      	cmp	r5, r0
 80021ca:	d345      	bcc.n	8002258 <I2C_WaitOnRXNEFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021cc:	6823      	ldr	r3, [r4, #0]
 80021ce:	699a      	ldr	r2, [r3, #24]
 80021d0:	0752      	lsls	r2, r2, #29
 80021d2:	d44c      	bmi.n	800226e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021d4:	699a      	ldr	r2, [r3, #24]
 80021d6:	06d0      	lsls	r0, r2, #27
 80021d8:	d5f0      	bpl.n	80021bc <I2C_WaitOnRXNEFlagUntilTimeout+0xc>
 80021da:	1c68      	adds	r0, r5, #1
 80021dc:	d124      	bne.n	8002228 <I2C_WaitOnRXNEFlagUntilTimeout+0x78>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021de:	699a      	ldr	r2, [r3, #24]
 80021e0:	0691      	lsls	r1, r2, #26
 80021e2:	d5fc      	bpl.n	80021de <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021e4:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021e6:	2110      	movs	r1, #16
 80021e8:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021ea:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021ec:	699a      	ldr	r2, [r3, #24]
 80021ee:	0796      	lsls	r6, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 80021f0:	bf44      	itt	mi
 80021f2:	2200      	movmi	r2, #0
 80021f4:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021f6:	699a      	ldr	r2, [r3, #24]
 80021f8:	07d5      	lsls	r5, r2, #31
 80021fa:	d403      	bmi.n	8002204 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021fc:	699a      	ldr	r2, [r3, #24]
 80021fe:	f042 0201 	orr.w	r2, r2, #1
 8002202:	619a      	str	r2, [r3, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	4928      	ldr	r1, [pc, #160]	; (80022a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf8>)
 8002208:	400a      	ands	r2, r1
 800220a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800220c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800220e:	2120      	movs	r1, #32
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002210:	f043 0304 	orr.w	r3, r3, #4
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002214:	2200      	movs	r2, #0
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002216:	6463      	str	r3, [r4, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002218:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800221c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      return HAL_ERROR;
 8002220:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002222:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002226:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002228:	699a      	ldr	r2, [r3, #24]
 800222a:	0692      	lsls	r2, r2, #26
 800222c:	d4da      	bmi.n	80021e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800222e:	f7fe fe8b 	bl	8000f48 <HAL_GetTick>
 8002232:	1b80      	subs	r0, r0, r6
 8002234:	4285      	cmp	r5, r0
 8002236:	d332      	bcc.n	800229e <I2C_WaitOnRXNEFlagUntilTimeout+0xee>
 8002238:	2d00      	cmp	r5, #0
 800223a:	d030      	beq.n	800229e <I2C_WaitOnRXNEFlagUntilTimeout+0xee>
 800223c:	6823      	ldr	r3, [r4, #0]
 800223e:	e7cc      	b.n	80021da <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002240:	6803      	ldr	r3, [r0, #0]
 8002242:	699a      	ldr	r2, [r3, #24]
 8002244:	0751      	lsls	r1, r2, #29
 8002246:	d412      	bmi.n	800226e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002248:	699a      	ldr	r2, [r3, #24]
 800224a:	06d2      	lsls	r2, r2, #27
 800224c:	d4c5      	bmi.n	80021da <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800224e:	699a      	ldr	r2, [r3, #24]
 8002250:	0692      	lsls	r2, r2, #26
 8002252:	d40e      	bmi.n	8002272 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002254:	f7fe fe78 	bl	8000f48 <HAL_GetTick>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002258:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800225a:	2220      	movs	r2, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800225c:	4313      	orrs	r3, r2
      __HAL_UNLOCK(hi2c);
 800225e:	2100      	movs	r1, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002260:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8002262:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 8002266:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      return HAL_ERROR;
 800226a:	2001      	movs	r0, #1
 800226c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_OK;
 800226e:	2000      	movs	r0, #0
 8002270:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002272:	699a      	ldr	r2, [r3, #24]
 8002274:	0750      	lsls	r0, r2, #29
 8002276:	d502      	bpl.n	800227e <I2C_WaitOnRXNEFlagUntilTimeout+0xce>
 8002278:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800227a:	2a00      	cmp	r2, #0
 800227c:	d1f7      	bne.n	800226e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800227e:	2520      	movs	r5, #32
 8002280:	61dd      	str	r5, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8002282:	6859      	ldr	r1, [r3, #4]
 8002284:	4808      	ldr	r0, [pc, #32]	; (80022a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf8>)
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002286:	2200      	movs	r2, #0
        I2C_RESET_CR2(hi2c);
 8002288:	4001      	ands	r1, r0
 800228a:	6059      	str	r1, [r3, #4]
        return HAL_ERROR;
 800228c:	2001      	movs	r0, #1
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800228e:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8002290:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8002294:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002298:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        return HAL_ERROR;
 800229c:	bd70      	pop	{r4, r5, r6, pc}
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800229e:	6c63      	ldr	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022a0:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022a2:	430b      	orrs	r3, r1
 80022a4:	e7b6      	b.n	8002214 <I2C_WaitOnRXNEFlagUntilTimeout+0x64>
 80022a6:	bf00      	nop
 80022a8:	fe00e800 	.word	0xfe00e800

080022ac <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80022ac:	b570      	push	{r4, r5, r6, lr}
 80022ae:	4604      	mov	r4, r0
 80022b0:	460d      	mov	r5, r1
 80022b2:	4616      	mov	r6, r2
 80022b4:	1c6b      	adds	r3, r5, #1
 80022b6:	6822      	ldr	r2, [r4, #0]
 80022b8:	d12a      	bne.n	8002310 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022ba:	6993      	ldr	r3, [r2, #24]
 80022bc:	0798      	lsls	r0, r3, #30
 80022be:	d42a      	bmi.n	8002316 <I2C_WaitOnTXISFlagUntilTimeout+0x6a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022c0:	6993      	ldr	r3, [r2, #24]
 80022c2:	06d9      	lsls	r1, r3, #27
 80022c4:	d5f9      	bpl.n	80022ba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022c6:	6993      	ldr	r3, [r2, #24]
 80022c8:	069d      	lsls	r5, r3, #26
 80022ca:	d5fc      	bpl.n	80022c6 <I2C_WaitOnTXISFlagUntilTimeout+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022cc:	2110      	movs	r1, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022ce:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022d0:	61d1      	str	r1, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022d2:	61d3      	str	r3, [r2, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80022d4:	6993      	ldr	r3, [r2, #24]
 80022d6:	0798      	lsls	r0, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 80022d8:	bf44      	itt	mi
 80022da:	2300      	movmi	r3, #0
 80022dc:	6293      	strmi	r3, [r2, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022de:	6993      	ldr	r3, [r2, #24]
 80022e0:	07d9      	lsls	r1, r3, #31
 80022e2:	d403      	bmi.n	80022ec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80022e4:	6993      	ldr	r3, [r2, #24]
 80022e6:	f043 0301 	orr.w	r3, r3, #1
 80022ea:	6193      	str	r3, [r2, #24]
    I2C_RESET_CR2(hi2c);
 80022ec:	6853      	ldr	r3, [r2, #4]
 80022ee:	4918      	ldr	r1, [pc, #96]	; (8002350 <I2C_WaitOnTXISFlagUntilTimeout+0xa4>)
 80022f0:	400b      	ands	r3, r1
 80022f2:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80022f6:	2120      	movs	r1, #32
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022f8:	f043 0304 	orr.w	r3, r3, #4
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022fc:	2200      	movs	r2, #0
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022fe:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8002300:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002304:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      return HAL_ERROR;
 8002308:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800230a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800230e:	bd70      	pop	{r4, r5, r6, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002310:	6993      	ldr	r3, [r2, #24]
 8002312:	079b      	lsls	r3, r3, #30
 8002314:	d501      	bpl.n	800231a <I2C_WaitOnTXISFlagUntilTimeout+0x6e>
  return HAL_OK;
 8002316:	2000      	movs	r0, #0
}
 8002318:	bd70      	pop	{r4, r5, r6, pc}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800231a:	6993      	ldr	r3, [r2, #24]
 800231c:	06d9      	lsls	r1, r3, #27
 800231e:	d412      	bmi.n	8002346 <I2C_WaitOnTXISFlagUntilTimeout+0x9a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002320:	f7fe fe12 	bl	8000f48 <HAL_GetTick>
 8002324:	1b80      	subs	r0, r0, r6
 8002326:	4285      	cmp	r5, r0
 8002328:	d301      	bcc.n	800232e <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 800232a:	2d00      	cmp	r5, #0
 800232c:	d1c2      	bne.n	80022b4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800232e:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002330:	2120      	movs	r1, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002332:	430b      	orrs	r3, r1
 8002334:	e7e2      	b.n	80022fc <I2C_WaitOnTXISFlagUntilTimeout+0x50>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002336:	f7fe fe07 	bl	8000f48 <HAL_GetTick>
 800233a:	1b80      	subs	r0, r0, r6
 800233c:	4285      	cmp	r5, r0
 800233e:	d3f6      	bcc.n	800232e <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 8002340:	2d00      	cmp	r5, #0
 8002342:	d0f4      	beq.n	800232e <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 8002344:	6822      	ldr	r2, [r4, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002346:	6993      	ldr	r3, [r2, #24]
 8002348:	069b      	lsls	r3, r3, #26
 800234a:	d5f4      	bpl.n	8002336 <I2C_WaitOnTXISFlagUntilTimeout+0x8a>
 800234c:	e7be      	b.n	80022cc <I2C_WaitOnTXISFlagUntilTimeout+0x20>
 800234e:	bf00      	nop
 8002350:	fe00e800 	.word	0xfe00e800

08002354 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002354:	b570      	push	{r4, r5, r6, lr}
 8002356:	4604      	mov	r4, r0
 8002358:	4616      	mov	r6, r2
 800235a:	460d      	mov	r5, r1
 800235c:	b929      	cbnz	r1, 800236a <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
 800235e:	e03d      	b.n	80023dc <I2C_WaitOnSTOPFlagUntilTimeout+0x88>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002360:	f7fe fdf2 	bl	8000f48 <HAL_GetTick>
 8002364:	1b80      	subs	r0, r0, r6
 8002366:	4285      	cmp	r5, r0
 8002368:	d341      	bcc.n	80023ee <I2C_WaitOnSTOPFlagUntilTimeout+0x9a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800236a:	6822      	ldr	r2, [r4, #0]
 800236c:	6993      	ldr	r3, [r2, #24]
 800236e:	0698      	lsls	r0, r3, #26
 8002370:	d441      	bmi.n	80023f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xa2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002372:	6993      	ldr	r3, [r2, #24]
 8002374:	06d9      	lsls	r1, r3, #27
 8002376:	d5f3      	bpl.n	8002360 <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
 8002378:	1c68      	adds	r0, r5, #1
 800237a:	d124      	bne.n	80023c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800237c:	6993      	ldr	r3, [r2, #24]
 800237e:	0699      	lsls	r1, r3, #26
 8002380:	d5fc      	bpl.n	800237c <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002382:	2110      	movs	r1, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002384:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002386:	61d1      	str	r1, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002388:	61d3      	str	r3, [r2, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800238a:	6993      	ldr	r3, [r2, #24]
 800238c:	0798      	lsls	r0, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 800238e:	bf44      	itt	mi
 8002390:	2300      	movmi	r3, #0
 8002392:	6293      	strmi	r3, [r2, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002394:	6993      	ldr	r3, [r2, #24]
 8002396:	07d9      	lsls	r1, r3, #31
 8002398:	d403      	bmi.n	80023a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800239a:	6993      	ldr	r3, [r2, #24]
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	6193      	str	r3, [r2, #24]
    I2C_RESET_CR2(hi2c);
 80023a2:	6853      	ldr	r3, [r2, #4]
 80023a4:	4915      	ldr	r1, [pc, #84]	; (80023fc <I2C_WaitOnSTOPFlagUntilTimeout+0xa8>)
 80023a6:	400b      	ands	r3, r1
 80023a8:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80023ac:	2120      	movs	r1, #32
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023ae:	f043 0304 	orr.w	r3, r3, #4
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b2:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023b4:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80023b6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 80023ba:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 80023be:	2001      	movs	r0, #1
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80023c4:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023c6:	6993      	ldr	r3, [r2, #24]
 80023c8:	069b      	lsls	r3, r3, #26
 80023ca:	d4da      	bmi.n	8002382 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023cc:	f7fe fdbc 	bl	8000f48 <HAL_GetTick>
 80023d0:	1b80      	subs	r0, r0, r6
 80023d2:	4285      	cmp	r5, r0
 80023d4:	d30b      	bcc.n	80023ee <I2C_WaitOnSTOPFlagUntilTimeout+0x9a>
 80023d6:	b155      	cbz	r5, 80023ee <I2C_WaitOnSTOPFlagUntilTimeout+0x9a>
 80023d8:	6822      	ldr	r2, [r4, #0]
 80023da:	e7cd      	b.n	8002378 <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023dc:	6802      	ldr	r2, [r0, #0]
 80023de:	6993      	ldr	r3, [r2, #24]
 80023e0:	069b      	lsls	r3, r3, #26
 80023e2:	d408      	bmi.n	80023f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xa2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023e4:	6993      	ldr	r3, [r2, #24]
 80023e6:	06db      	lsls	r3, r3, #27
 80023e8:	d4c6      	bmi.n	8002378 <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ea:	f7fe fdad 	bl	8000f48 <HAL_GetTick>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80023f0:	2120      	movs	r1, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023f2:	430b      	orrs	r3, r1
 80023f4:	e7dd      	b.n	80023b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x5e>
  return HAL_OK;
 80023f6:	2000      	movs	r0, #0
 80023f8:	bd70      	pop	{r4, r5, r6, pc}
 80023fa:	bf00      	nop
 80023fc:	fe00e800 	.word	0xfe00e800

08002400 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002400:	2800      	cmp	r0, #0
 8002402:	d051      	beq.n	80024a8 <HAL_I2C_Init+0xa8>
{
 8002404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002406:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800240a:	4604      	mov	r4, r0
 800240c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002410:	2b00      	cmp	r3, #0
 8002412:	d040      	beq.n	8002496 <HAL_I2C_Init+0x96>
  __HAL_I2C_DISABLE(hi2c);
 8002414:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002416:	68e0      	ldr	r0, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002418:	2224      	movs	r2, #36	; 0x24
 800241a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800241e:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002420:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 8002422:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002426:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 800242a:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800242c:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800242e:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002430:	2801      	cmp	r0, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002432:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002436:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002438:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800243a:	d031      	beq.n	80024a0 <HAL_I2C_Init+0xa0>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800243c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002440:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002442:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002444:	bf04      	itt	eq
 8002446:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800244a:	605a      	streq	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800244c:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800244e:	6922      	ldr	r2, [r4, #16]
 8002450:	f8d4 e014 	ldr.w	lr, [r4, #20]
 8002454:	69a7      	ldr	r7, [r4, #24]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002456:	69e0      	ldr	r0, [r4, #28]
 8002458:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800245a:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800245e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8002462:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002464:	68dd      	ldr	r5, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002466:	ea42 020e 	orr.w	r2, r2, lr
 800246a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800246e:	4330      	orrs	r0, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002470:	f425 4500 	bic.w	r5, r5, #32768	; 0x8000
 8002474:	60dd      	str	r5, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002476:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002478:	6018      	str	r0, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800247a:	6819      	ldr	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800247c:	2200      	movs	r2, #0
  __HAL_I2C_ENABLE(hi2c);
 800247e:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8002482:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 8002484:	6019      	str	r1, [r3, #0]
  return HAL_OK;
 8002486:	4610      	mov	r0, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002488:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800248a:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800248e:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002490:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  return HAL_OK;
 8002494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002496:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800249a:	f00d fa31 	bl	800f900 <HAL_I2C_MspInit>
 800249e:	e7b9      	b.n	8002414 <HAL_I2C_Init+0x14>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024a4:	609a      	str	r2, [r3, #8]
 80024a6:	e7d1      	b.n	800244c <HAL_I2C_Init+0x4c>
    return HAL_ERROR;
 80024a8:	2001      	movs	r0, #1
 80024aa:	4770      	bx	lr

080024ac <HAL_I2C_Master_Transmit>:
{
 80024ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80024b0:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80024b4:	2c20      	cmp	r4, #32
 80024b6:	d002      	beq.n	80024be <HAL_I2C_Master_Transmit+0x12>
    return HAL_BUSY;
 80024b8:	2002      	movs	r0, #2
 80024ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hi2c);
 80024be:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80024c2:	2c01      	cmp	r4, #1
 80024c4:	d0f8      	beq.n	80024b8 <HAL_I2C_Master_Transmit+0xc>
 80024c6:	4698      	mov	r8, r3
 80024c8:	2301      	movs	r3, #1
 80024ca:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80024ce:	4617      	mov	r7, r2
 80024d0:	460e      	mov	r6, r1
 80024d2:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 80024d4:	f7fe fd38 	bl	8000f48 <HAL_GetTick>
 80024d8:	4605      	mov	r5, r0
 80024da:	e004      	b.n	80024e6 <HAL_I2C_Master_Transmit+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024dc:	f7fe fd34 	bl	8000f48 <HAL_GetTick>
 80024e0:	1b40      	subs	r0, r0, r5
 80024e2:	2819      	cmp	r0, #25
 80024e4:	d86f      	bhi.n	80025c6 <HAL_I2C_Master_Transmit+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024e6:	6823      	ldr	r3, [r4, #0]
 80024e8:	6998      	ldr	r0, [r3, #24]
 80024ea:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 80024ee:	d1f5      	bne.n	80024dc <HAL_I2C_Master_Transmit+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024f0:	2221      	movs	r2, #33	; 0x21
 80024f2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024f6:	2210      	movs	r2, #16
 80024f8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024fc:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 80024fe:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002502:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8002504:	6267      	str	r7, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002506:	b292      	uxth	r2, r2
 8002508:	2aff      	cmp	r2, #255	; 0xff
    hi2c->XferISR   = NULL;
 800250a:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800250c:	d96c      	bls.n	80025e8 <HAL_I2C_Master_Transmit+0x13c>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	4948      	ldr	r1, [pc, #288]	; (8002634 <HAL_I2C_Master_Transmit+0x188>)
 8002512:	4849      	ldr	r0, [pc, #292]	; (8002638 <HAL_I2C_Master_Transmit+0x18c>)
 8002514:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8002518:	4331      	orrs	r1, r6
 800251a:	4002      	ands	r2, r0
 800251c:	430a      	orrs	r2, r1
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800251e:	21ff      	movs	r1, #255	; 0xff
 8002520:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002522:	605a      	str	r2, [r3, #4]
 8002524:	f046 77ff 	orr.w	r7, r6, #33423360	; 0x1fe0000
 8002528:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8002640 <HAL_I2C_Master_Transmit+0x194>
 800252c:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
    while (hi2c->XferCount > 0U)
 8002530:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002532:	9906      	ldr	r1, [sp, #24]
    while (hi2c->XferCount > 0U)
 8002534:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002536:	462a      	mov	r2, r5
 8002538:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800253a:	2b00      	cmp	r3, #0
 800253c:	d066      	beq.n	800260c <HAL_I2C_Master_Transmit+0x160>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800253e:	f7ff feb5 	bl	80022ac <I2C_WaitOnTXISFlagUntilTimeout>
 8002542:	2800      	cmp	r0, #0
 8002544:	d14d      	bne.n	80025e2 <HAL_I2C_Master_Transmit+0x136>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002546:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002548:	6822      	ldr	r2, [r4, #0]
 800254a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800254e:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8002550:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8002552:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002554:	3b01      	subs	r3, #1
 8002556:	b29b      	uxth	r3, r3
 8002558:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800255a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800255c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800255e:	3b01      	subs	r3, #1
 8002560:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002562:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 8002564:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002566:	2900      	cmp	r1, #0
 8002568:	d0e2      	beq.n	8002530 <HAL_I2C_Master_Transmit+0x84>
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1e0      	bne.n	8002530 <HAL_I2C_Master_Transmit+0x84>
 800256e:	9b06      	ldr	r3, [sp, #24]
 8002570:	3301      	adds	r3, #1
 8002572:	d10e      	bne.n	8002592 <HAL_I2C_Master_Transmit+0xe6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002574:	6993      	ldr	r3, [r2, #24]
 8002576:	0619      	lsls	r1, r3, #24
 8002578:	d5fc      	bpl.n	8002574 <HAL_I2C_Master_Transmit+0xc8>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800257a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800257c:	b29b      	uxth	r3, r3
 800257e:	2bff      	cmp	r3, #255	; 0xff
 8002580:	d913      	bls.n	80025aa <HAL_I2C_Master_Transmit+0xfe>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002582:	6853      	ldr	r3, [r2, #4]
 8002584:	ea03 0308 	and.w	r3, r3, r8
 8002588:	433b      	orrs	r3, r7
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800258a:	21ff      	movs	r1, #255	; 0xff
 800258c:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800258e:	6053      	str	r3, [r2, #4]
 8002590:	e7ce      	b.n	8002530 <HAL_I2C_Master_Transmit+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002592:	6993      	ldr	r3, [r2, #24]
 8002594:	061b      	lsls	r3, r3, #24
 8002596:	d4f0      	bmi.n	800257a <HAL_I2C_Master_Transmit+0xce>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002598:	f7fe fcd6 	bl	8000f48 <HAL_GetTick>
 800259c:	9b06      	ldr	r3, [sp, #24]
 800259e:	1b40      	subs	r0, r0, r5
 80025a0:	4283      	cmp	r3, r0
 80025a2:	d310      	bcc.n	80025c6 <HAL_I2C_Master_Transmit+0x11a>
 80025a4:	b17b      	cbz	r3, 80025c6 <HAL_I2C_Master_Transmit+0x11a>
 80025a6:	6822      	ldr	r2, [r4, #0]
 80025a8:	e7e2      	b.n	8002570 <HAL_I2C_Master_Transmit+0xc4>
          hi2c->XferSize = hi2c->XferCount;
 80025aa:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80025ac:	6850      	ldr	r0, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 80025ae:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80025b0:	b2cb      	uxtb	r3, r1
 80025b2:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 80025b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025ba:	ea00 0008 	and.w	r0, r0, r8
 80025be:	4303      	orrs	r3, r0
          hi2c->XferSize = hi2c->XferCount;
 80025c0:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80025c2:	6053      	str	r3, [r2, #4]
 80025c4:	e7b4      	b.n	8002530 <HAL_I2C_Master_Transmit+0x84>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80025c8:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ca:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025cc:	430b      	orrs	r3, r1
 80025ce:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80025d0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 80025d4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          return HAL_ERROR;
 80025d8:	2001      	movs	r0, #1
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025da:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80025de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 80025e2:	2001      	movs	r0, #1
 80025e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hi2c->XferSize = hi2c->XferCount;
 80025e8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80025ea:	4f13      	ldr	r7, [pc, #76]	; (8002638 <HAL_I2C_Master_Transmit+0x18c>)
 80025ec:	6858      	ldr	r0, [r3, #4]
 80025ee:	f3c6 0609 	ubfx	r6, r6, #0, #10
      hi2c->XferSize = hi2c->XferCount;
 80025f2:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80025f4:	f046 4202 	orr.w	r2, r6, #2181038080	; 0x82000000
 80025f8:	4038      	ands	r0, r7
 80025fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025fe:	b2cf      	uxtb	r7, r1
 8002600:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8002604:	4302      	orrs	r2, r0
      hi2c->XferSize = hi2c->XferCount;
 8002606:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	e78b      	b.n	8002524 <HAL_I2C_Master_Transmit+0x78>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800260c:	f7ff fea2 	bl	8002354 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002610:	2800      	cmp	r0, #0
 8002612:	d1e6      	bne.n	80025e2 <HAL_I2C_Master_Transmit+0x136>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002614:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002616:	4d09      	ldr	r5, [pc, #36]	; (800263c <HAL_I2C_Master_Transmit+0x190>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002618:	2120      	movs	r1, #32
 800261a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	402a      	ands	r2, r5
 8002620:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002622:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002626:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800262a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800262e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002632:	bf00      	nop
 8002634:	81ff2000 	.word	0x81ff2000
 8002638:	fc009800 	.word	0xfc009800
 800263c:	fe00e800 	.word	0xfe00e800
 8002640:	fc009c00 	.word	0xfc009c00

08002644 <HAL_I2C_Master_Receive>:
{
 8002644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002648:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 800264c:	2c20      	cmp	r4, #32
 800264e:	d002      	beq.n	8002656 <HAL_I2C_Master_Receive+0x12>
    return HAL_BUSY;
 8002650:	2002      	movs	r0, #2
 8002652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hi2c);
 8002656:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 800265a:	2c01      	cmp	r4, #1
 800265c:	d0f8      	beq.n	8002650 <HAL_I2C_Master_Receive+0xc>
 800265e:	4698      	mov	r8, r3
 8002660:	2301      	movs	r3, #1
 8002662:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8002666:	4617      	mov	r7, r2
 8002668:	460e      	mov	r6, r1
 800266a:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 800266c:	f7fe fc6c 	bl	8000f48 <HAL_GetTick>
 8002670:	4605      	mov	r5, r0
 8002672:	e004      	b.n	800267e <HAL_I2C_Master_Receive+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002674:	f7fe fc68 	bl	8000f48 <HAL_GetTick>
 8002678:	1b40      	subs	r0, r0, r5
 800267a:	2819      	cmp	r0, #25
 800267c:	d862      	bhi.n	8002744 <HAL_I2C_Master_Receive+0x100>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800267e:	6823      	ldr	r3, [r4, #0]
 8002680:	6998      	ldr	r0, [r3, #24]
 8002682:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8002686:	d1f5      	bne.n	8002674 <HAL_I2C_Master_Receive+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002688:	2222      	movs	r2, #34	; 0x22
 800268a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800268e:	2210      	movs	r2, #16
 8002690:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002694:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8002696:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800269a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 800269c:	6267      	str	r7, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800269e:	b292      	uxth	r2, r2
 80026a0:	2aff      	cmp	r2, #255	; 0xff
    hi2c->XferISR   = NULL;
 80026a2:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026a4:	d96d      	bls.n	8002782 <HAL_I2C_Master_Receive+0x13e>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	4948      	ldr	r1, [pc, #288]	; (80027cc <HAL_I2C_Master_Receive+0x188>)
 80026aa:	4849      	ldr	r0, [pc, #292]	; (80027d0 <HAL_I2C_Master_Receive+0x18c>)
 80026ac:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80026b0:	4331      	orrs	r1, r6
 80026b2:	4002      	ands	r2, r0
 80026b4:	430a      	orrs	r2, r1
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026b6:	21ff      	movs	r1, #255	; 0xff
 80026b8:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80026ba:	605a      	str	r2, [r3, #4]
 80026bc:	f046 77ff 	orr.w	r7, r6, #33423360	; 0x1fe0000
 80026c0:	f8df 8114 	ldr.w	r8, [pc, #276]	; 80027d8 <HAL_I2C_Master_Receive+0x194>
 80026c4:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
    while (hi2c->XferCount > 0U)
 80026c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ca:	9906      	ldr	r1, [sp, #24]
    while (hi2c->XferCount > 0U)
 80026cc:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ce:	462a      	mov	r2, r5
 80026d0:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d067      	beq.n	80027a6 <HAL_I2C_Master_Receive+0x162>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026d6:	f7ff fd6b 	bl	80021b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026da:	2800      	cmp	r0, #0
 80026dc:	d14e      	bne.n	800277c <HAL_I2C_Master_Receive+0x138>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026de:	6822      	ldr	r2, [r4, #0]
 80026e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026e4:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 80026e6:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80026e8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80026ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80026ec:	3901      	subs	r1, #1
 80026ee:	b289      	uxth	r1, r1
 80026f0:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026f2:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 80026f8:	3201      	adds	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026fa:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 80026fc:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80026fe:	6262      	str	r2, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002700:	2900      	cmp	r1, #0
 8002702:	d0e1      	beq.n	80026c8 <HAL_I2C_Master_Receive+0x84>
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1df      	bne.n	80026c8 <HAL_I2C_Master_Receive+0x84>
 8002708:	9b06      	ldr	r3, [sp, #24]
 800270a:	6822      	ldr	r2, [r4, #0]
 800270c:	3301      	adds	r3, #1
 800270e:	d10e      	bne.n	800272e <HAL_I2C_Master_Receive+0xea>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002710:	6993      	ldr	r3, [r2, #24]
 8002712:	0619      	lsls	r1, r3, #24
 8002714:	d5fc      	bpl.n	8002710 <HAL_I2C_Master_Receive+0xcc>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002716:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002718:	b29b      	uxth	r3, r3
 800271a:	2bff      	cmp	r3, #255	; 0xff
 800271c:	d920      	bls.n	8002760 <HAL_I2C_Master_Receive+0x11c>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800271e:	6853      	ldr	r3, [r2, #4]
 8002720:	ea03 0308 	and.w	r3, r3, r8
 8002724:	433b      	orrs	r3, r7
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002726:	21ff      	movs	r1, #255	; 0xff
 8002728:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800272a:	6053      	str	r3, [r2, #4]
 800272c:	e7cc      	b.n	80026c8 <HAL_I2C_Master_Receive+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800272e:	6993      	ldr	r3, [r2, #24]
 8002730:	061b      	lsls	r3, r3, #24
 8002732:	d4f0      	bmi.n	8002716 <HAL_I2C_Master_Receive+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002734:	f7fe fc08 	bl	8000f48 <HAL_GetTick>
 8002738:	9b06      	ldr	r3, [sp, #24]
 800273a:	1b40      	subs	r0, r0, r5
 800273c:	4283      	cmp	r3, r0
 800273e:	d301      	bcc.n	8002744 <HAL_I2C_Master_Receive+0x100>
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1e2      	bne.n	800270a <HAL_I2C_Master_Receive+0xc6>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002744:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002746:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002748:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800274a:	430b      	orrs	r3, r1
 800274c:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800274e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 8002752:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          return HAL_ERROR;
 8002756:	2001      	movs	r0, #1
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002758:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800275c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          hi2c->XferSize = hi2c->XferCount;
 8002760:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002762:	6850      	ldr	r0, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8002764:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002766:	b2cb      	uxtb	r3, r1
 8002768:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 800276c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002770:	ea00 0008 	and.w	r0, r0, r8
 8002774:	4303      	orrs	r3, r0
          hi2c->XferSize = hi2c->XferCount;
 8002776:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002778:	6053      	str	r3, [r2, #4]
 800277a:	e7a5      	b.n	80026c8 <HAL_I2C_Master_Receive+0x84>
        return HAL_ERROR;
 800277c:	2001      	movs	r0, #1
 800277e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hi2c->XferSize = hi2c->XferCount;
 8002782:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002784:	4f12      	ldr	r7, [pc, #72]	; (80027d0 <HAL_I2C_Master_Receive+0x18c>)
 8002786:	6858      	ldr	r0, [r3, #4]
 8002788:	f3c6 0609 	ubfx	r6, r6, #0, #10
      hi2c->XferSize = hi2c->XferCount;
 800278c:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800278e:	f046 4202 	orr.w	r2, r6, #2181038080	; 0x82000000
 8002792:	4038      	ands	r0, r7
 8002794:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8002798:	b2cf      	uxtb	r7, r1
 800279a:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800279e:	4302      	orrs	r2, r0
      hi2c->XferSize = hi2c->XferCount;
 80027a0:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80027a2:	605a      	str	r2, [r3, #4]
 80027a4:	e78a      	b.n	80026bc <HAL_I2C_Master_Receive+0x78>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027a6:	f7ff fdd5 	bl	8002354 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027aa:	2800      	cmp	r0, #0
 80027ac:	d1e6      	bne.n	800277c <HAL_I2C_Master_Receive+0x138>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027ae:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80027b0:	4d08      	ldr	r5, [pc, #32]	; (80027d4 <HAL_I2C_Master_Receive+0x190>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027b2:	2120      	movs	r1, #32
 80027b4:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	402a      	ands	r2, r5
 80027ba:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80027bc:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80027c0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027c4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80027c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027cc:	81ff2400 	.word	0x81ff2400
 80027d0:	fc009800 	.word	0xfc009800
 80027d4:	fe00e800 	.word	0xfe00e800
 80027d8:	fc009c00 	.word	0xfc009c00

080027dc <HAL_I2C_Mem_Write>:
{
 80027dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80027e0:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 80027e4:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 80027e8:	2c20      	cmp	r4, #32
 80027ea:	d002      	beq.n	80027f2 <HAL_I2C_Mem_Write+0x16>
    return HAL_BUSY;
 80027ec:	2002      	movs	r0, #2
 80027ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((pData == NULL) || (Size == 0U))
 80027f2:	9c08      	ldr	r4, [sp, #32]
 80027f4:	2c00      	cmp	r4, #0
 80027f6:	f000 809e 	beq.w	8002936 <HAL_I2C_Mem_Write+0x15a>
 80027fa:	2d00      	cmp	r5, #0
 80027fc:	f000 809b 	beq.w	8002936 <HAL_I2C_Mem_Write+0x15a>
    __HAL_LOCK(hi2c);
 8002800:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8002804:	2c01      	cmp	r4, #1
 8002806:	d0f1      	beq.n	80027ec <HAL_I2C_Mem_Write+0x10>
 8002808:	461e      	mov	r6, r3
 800280a:	2301      	movs	r3, #1
 800280c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8002810:	4617      	mov	r7, r2
 8002812:	4688      	mov	r8, r1
 8002814:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8002816:	f7fe fb97 	bl	8000f48 <HAL_GetTick>
 800281a:	4681      	mov	r9, r0
 800281c:	e006      	b.n	800282c <HAL_I2C_Mem_Write+0x50>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800281e:	f7fe fb93 	bl	8000f48 <HAL_GetTick>
 8002822:	eba0 0009 	sub.w	r0, r0, r9
 8002826:	2819      	cmp	r0, #25
 8002828:	f200 8098 	bhi.w	800295c <HAL_I2C_Mem_Write+0x180>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800282c:	6823      	ldr	r3, [r4, #0]
 800282e:	6998      	ldr	r0, [r3, #24]
 8002830:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8002834:	d1f3      	bne.n	800281e <HAL_I2C_Mem_Write+0x42>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002836:	2121      	movs	r1, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002838:	2240      	movs	r2, #64	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800283a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800283e:	f3c8 0809 	ubfx	r8, r8, #0, #10
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002842:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002846:	6460      	str	r0, [r4, #68]	; 0x44
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002848:	b2f2      	uxtb	r2, r6
    hi2c->XferCount = Size;
 800284a:	8565      	strh	r5, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800284c:	6859      	ldr	r1, [r3, #4]
 800284e:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 8002a20 <HAL_I2C_Mem_Write+0x244>
    hi2c->pBuffPtr  = pData;
 8002852:	9d08      	ldr	r5, [sp, #32]
    hi2c->XferISR   = NULL;
 8002854:	6360      	str	r0, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002856:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 800285a:	f042 4201 	orr.w	r2, r2, #2164260864	; 0x81000000
 800285e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002862:	ea01 010e 	and.w	r1, r1, lr
 8002866:	4311      	orrs	r1, r2
    hi2c->pBuffPtr  = pData;
 8002868:	6265      	str	r5, [r4, #36]	; 0x24
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800286a:	464a      	mov	r2, r9
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800286c:	6059      	str	r1, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800286e:	4620      	mov	r0, r4
 8002870:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002872:	f7ff fd1b 	bl	80022ac <I2C_WaitOnTXISFlagUntilTimeout>
 8002876:	2800      	cmp	r0, #0
 8002878:	f040 80a4 	bne.w	80029c4 <HAL_I2C_Mem_Write+0x1e8>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800287c:	2e01      	cmp	r6, #1
 800287e:	d00a      	beq.n	8002896 <HAL_I2C_Mem_Write+0xba>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002880:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002882:	990a      	ldr	r1, [sp, #40]	; 0x28
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002884:	0a3a      	lsrs	r2, r7, #8
 8002886:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002888:	4620      	mov	r0, r4
 800288a:	464a      	mov	r2, r9
 800288c:	f7ff fd0e 	bl	80022ac <I2C_WaitOnTXISFlagUntilTimeout>
 8002890:	2800      	cmp	r0, #0
 8002892:	f040 8097 	bne.w	80029c4 <HAL_I2C_Mem_Write+0x1e8>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002896:	6822      	ldr	r2, [r4, #0]
 8002898:	b2ff      	uxtb	r7, r7
 800289a:	6297      	str	r7, [r2, #40]	; 0x28
 800289c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800289e:	3301      	adds	r3, #1
 80028a0:	d177      	bne.n	8002992 <HAL_I2C_Mem_Write+0x1b6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028a2:	6993      	ldr	r3, [r2, #24]
 80028a4:	061d      	lsls	r5, r3, #24
 80028a6:	d5fc      	bpl.n	80028a2 <HAL_I2C_Mem_Write+0xc6>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	2bff      	cmp	r3, #255	; 0xff
 80028ae:	f240 808f 	bls.w	80029d0 <HAL_I2C_Mem_Write+0x1f4>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80028b2:	6853      	ldr	r3, [r2, #4]
 80028b4:	4858      	ldr	r0, [pc, #352]	; (8002a18 <HAL_I2C_Mem_Write+0x23c>)
 80028b6:	f048 71ff 	orr.w	r1, r8, #33423360	; 0x1fe0000
 80028ba:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80028be:	4003      	ands	r3, r0
 80028c0:	430b      	orrs	r3, r1
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028c2:	21ff      	movs	r1, #255	; 0xff
 80028c4:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80028c6:	6053      	str	r3, [r2, #4]
 80028c8:	f048 75ff 	orr.w	r5, r8, #33423360	; 0x1fe0000
 80028cc:	4e52      	ldr	r6, [pc, #328]	; (8002a18 <HAL_I2C_Mem_Write+0x23c>)
 80028ce:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
 80028d2:	e004      	b.n	80028de <HAL_I2C_Mem_Write+0x102>
    while (hi2c->XferCount > 0U);
 80028d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 8087 	beq.w	80029ec <HAL_I2C_Mem_Write+0x210>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028de:	464a      	mov	r2, r9
 80028e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80028e2:	4620      	mov	r0, r4
 80028e4:	f7ff fce2 	bl	80022ac <I2C_WaitOnTXISFlagUntilTimeout>
 80028e8:	2800      	cmp	r0, #0
 80028ea:	d15f      	bne.n	80029ac <HAL_I2C_Mem_Write+0x1d0>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80028ee:	6822      	ldr	r2, [r4, #0]
 80028f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028f4:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 80028f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80028f8:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80028fa:	3b01      	subs	r3, #1
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002900:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002902:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002904:	3b01      	subs	r3, #1
 8002906:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002908:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 800290a:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800290c:	2900      	cmp	r1, #0
 800290e:	d0e1      	beq.n	80028d4 <HAL_I2C_Mem_Write+0xf8>
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1df      	bne.n	80028d4 <HAL_I2C_Mem_Write+0xf8>
 8002914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002916:	3301      	adds	r3, #1
 8002918:	d113      	bne.n	8002942 <HAL_I2C_Mem_Write+0x166>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800291a:	6993      	ldr	r3, [r2, #24]
 800291c:	0619      	lsls	r1, r3, #24
 800291e:	d5fc      	bpl.n	800291a <HAL_I2C_Mem_Write+0x13e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002920:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002922:	b29b      	uxth	r3, r3
 8002924:	2bff      	cmp	r3, #255	; 0xff
 8002926:	d927      	bls.n	8002978 <HAL_I2C_Mem_Write+0x19c>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002928:	6853      	ldr	r3, [r2, #4]
 800292a:	4033      	ands	r3, r6
 800292c:	432b      	orrs	r3, r5
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800292e:	21ff      	movs	r1, #255	; 0xff
 8002930:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002932:	6053      	str	r3, [r2, #4]
 8002934:	e7ce      	b.n	80028d4 <HAL_I2C_Mem_Write+0xf8>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002936:	f44f 7300 	mov.w	r3, #512	; 0x200
 800293a:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 800293c:	2001      	movs	r0, #1
 800293e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002942:	6993      	ldr	r3, [r2, #24]
 8002944:	061b      	lsls	r3, r3, #24
 8002946:	d4eb      	bmi.n	8002920 <HAL_I2C_Mem_Write+0x144>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002948:	f7fe fafe 	bl	8000f48 <HAL_GetTick>
 800294c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800294e:	eba0 0009 	sub.w	r0, r0, r9
 8002952:	4283      	cmp	r3, r0
 8002954:	d302      	bcc.n	800295c <HAL_I2C_Mem_Write+0x180>
 8002956:	b10b      	cbz	r3, 800295c <HAL_I2C_Mem_Write+0x180>
 8002958:	6822      	ldr	r2, [r4, #0]
 800295a:	e7dc      	b.n	8002916 <HAL_I2C_Mem_Write+0x13a>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800295c:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800295e:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002960:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002962:	430b      	orrs	r3, r1
 8002964:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8002966:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 800296a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          return HAL_ERROR;
 800296e:	2001      	movs	r0, #1
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002970:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002974:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          hi2c->XferSize = hi2c->XferCount;
 8002978:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800297a:	6850      	ldr	r0, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 800297c:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800297e:	b2cf      	uxtb	r7, r1
 8002980:	f048 7300 	orr.w	r3, r8, #33554432	; 0x2000000
 8002984:	4030      	ands	r0, r6
 8002986:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800298a:	4303      	orrs	r3, r0
          hi2c->XferSize = hi2c->XferCount;
 800298c:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800298e:	6053      	str	r3, [r2, #4]
 8002990:	e7a0      	b.n	80028d4 <HAL_I2C_Mem_Write+0xf8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002992:	6993      	ldr	r3, [r2, #24]
 8002994:	0618      	lsls	r0, r3, #24
 8002996:	d487      	bmi.n	80028a8 <HAL_I2C_Mem_Write+0xcc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002998:	f7fe fad6 	bl	8000f48 <HAL_GetTick>
 800299c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800299e:	eba0 0009 	sub.w	r0, r0, r9
 80029a2:	4283      	cmp	r3, r0
 80029a4:	d305      	bcc.n	80029b2 <HAL_I2C_Mem_Write+0x1d6>
 80029a6:	b123      	cbz	r3, 80029b2 <HAL_I2C_Mem_Write+0x1d6>
 80029a8:	6822      	ldr	r2, [r4, #0]
 80029aa:	e778      	b.n	800289e <HAL_I2C_Mem_Write+0xc2>
        return HAL_ERROR;
 80029ac:	2001      	movs	r0, #1
 80029ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80029b4:	2120      	movs	r1, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029b6:	430b      	orrs	r3, r1
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b8:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029ba:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80029bc:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80029c4:	2300      	movs	r3, #0
 80029c6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80029ca:	2001      	movs	r0, #1
 80029cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hi2c->XferSize = hi2c->XferCount;
 80029d0:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80029d2:	4811      	ldr	r0, [pc, #68]	; (8002a18 <HAL_I2C_Mem_Write+0x23c>)
 80029d4:	6853      	ldr	r3, [r2, #4]
      hi2c->XferSize = hi2c->XferCount;
 80029d6:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80029d8:	4018      	ands	r0, r3
 80029da:	b2cd      	uxtb	r5, r1
 80029dc:	f048 7300 	orr.w	r3, r8, #33554432	; 0x2000000
 80029e0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80029e4:	4303      	orrs	r3, r0
      hi2c->XferSize = hi2c->XferCount;
 80029e6:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80029e8:	6053      	str	r3, [r2, #4]
 80029ea:	e76d      	b.n	80028c8 <HAL_I2C_Mem_Write+0xec>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ec:	464a      	mov	r2, r9
 80029ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80029f0:	4620      	mov	r0, r4
 80029f2:	f7ff fcaf 	bl	8002354 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029f6:	2800      	cmp	r0, #0
 80029f8:	d1d8      	bne.n	80029ac <HAL_I2C_Mem_Write+0x1d0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029fa:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80029fc:	4d07      	ldr	r5, [pc, #28]	; (8002a1c <HAL_I2C_Mem_Write+0x240>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029fe:	2120      	movs	r1, #32
 8002a00:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	402a      	ands	r2, r5
 8002a06:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002a08:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002a0c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a10:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002a14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a18:	fc009c00 	.word	0xfc009c00
 8002a1c:	fe00e800 	.word	0xfe00e800
 8002a20:	fc009800 	.word	0xfc009800

08002a24 <HAL_I2C_Mem_Read>:
{
 8002a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a28:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 8002a2c:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a30:	2c20      	cmp	r4, #32
 8002a32:	d002      	beq.n	8002a3a <HAL_I2C_Mem_Read+0x16>
    return HAL_BUSY;
 8002a34:	2002      	movs	r0, #2
 8002a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((pData == NULL) || (Size == 0U))
 8002a3a:	9c08      	ldr	r4, [sp, #32]
 8002a3c:	2c00      	cmp	r4, #0
 8002a3e:	f000 808d 	beq.w	8002b5c <HAL_I2C_Mem_Read+0x138>
 8002a42:	2d00      	cmp	r5, #0
 8002a44:	f000 808a 	beq.w	8002b5c <HAL_I2C_Mem_Read+0x138>
    __HAL_LOCK(hi2c);
 8002a48:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8002a4c:	2c01      	cmp	r4, #1
 8002a4e:	d0f1      	beq.n	8002a34 <HAL_I2C_Mem_Read+0x10>
 8002a50:	4699      	mov	r9, r3
 8002a52:	2301      	movs	r3, #1
 8002a54:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8002a58:	4617      	mov	r7, r2
 8002a5a:	460e      	mov	r6, r1
 8002a5c:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8002a5e:	f7fe fa73 	bl	8000f48 <HAL_GetTick>
 8002a62:	4680      	mov	r8, r0
 8002a64:	e006      	b.n	8002a74 <HAL_I2C_Mem_Read+0x50>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a66:	f7fe fa6f 	bl	8000f48 <HAL_GetTick>
 8002a6a:	eba0 0008 	sub.w	r0, r0, r8
 8002a6e:	2819      	cmp	r0, #25
 8002a70:	f200 8092 	bhi.w	8002b98 <HAL_I2C_Mem_Read+0x174>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a74:	6823      	ldr	r3, [r4, #0]
 8002a76:	6998      	ldr	r0, [r3, #24]
 8002a78:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8002a7c:	d1f3      	bne.n	8002a66 <HAL_I2C_Mem_Read+0x42>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a7e:	2122      	movs	r1, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a80:	2240      	movs	r2, #64	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a82:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002a86:	f3c6 0609 	ubfx	r6, r6, #0, #10
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a8a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a8e:	6460      	str	r0, [r4, #68]	; 0x44
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002a90:	fa5f f289 	uxtb.w	r2, r9
    hi2c->XferCount = Size;
 8002a94:	8565      	strh	r5, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002a96:	6859      	ldr	r1, [r3, #4]
 8002a98:	f8df e1e4 	ldr.w	lr, [pc, #484]	; 8002c80 <HAL_I2C_Mem_Read+0x25c>
    hi2c->pBuffPtr  = pData;
 8002a9c:	9d08      	ldr	r5, [sp, #32]
    hi2c->XferISR   = NULL;
 8002a9e:	6360      	str	r0, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002aa0:	ea46 4202 	orr.w	r2, r6, r2, lsl #16
 8002aa4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002aa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002aac:	ea01 010e 	and.w	r1, r1, lr
 8002ab0:	4311      	orrs	r1, r2
    hi2c->pBuffPtr  = pData;
 8002ab2:	6265      	str	r5, [r4, #36]	; 0x24
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ab4:	4642      	mov	r2, r8
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002ab6:	6059      	str	r1, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ab8:	4620      	mov	r0, r4
 8002aba:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002abc:	f7ff fbf6 	bl	80022ac <I2C_WaitOnTXISFlagUntilTimeout>
 8002ac0:	2800      	cmp	r0, #0
 8002ac2:	f040 80ae 	bne.w	8002c22 <HAL_I2C_Mem_Read+0x1fe>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ac6:	f1b9 0f01 	cmp.w	r9, #1
 8002aca:	d00a      	beq.n	8002ae2 <HAL_I2C_Mem_Read+0xbe>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002acc:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ace:	990a      	ldr	r1, [sp, #40]	; 0x28
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ad0:	0a3a      	lsrs	r2, r7, #8
 8002ad2:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ad4:	4620      	mov	r0, r4
 8002ad6:	4642      	mov	r2, r8
 8002ad8:	f7ff fbe8 	bl	80022ac <I2C_WaitOnTXISFlagUntilTimeout>
 8002adc:	2800      	cmp	r0, #0
 8002ade:	f040 80a0 	bne.w	8002c22 <HAL_I2C_Mem_Read+0x1fe>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ae2:	6821      	ldr	r1, [r4, #0]
 8002ae4:	b2ff      	uxtb	r7, r7
 8002ae6:	628f      	str	r7, [r1, #40]	; 0x28
 8002ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002aea:	3301      	adds	r3, #1
 8002aec:	f040 8082 	bne.w	8002bf4 <HAL_I2C_Mem_Read+0x1d0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002af0:	698b      	ldr	r3, [r1, #24]
 8002af2:	0658      	lsls	r0, r3, #25
 8002af4:	d5fc      	bpl.n	8002af0 <HAL_I2C_Mem_Read+0xcc>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002af6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	2bff      	cmp	r3, #255	; 0xff
 8002afc:	f240 8097 	bls.w	8002c2e <HAL_I2C_Mem_Read+0x20a>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002b00:	684b      	ldr	r3, [r1, #4]
 8002b02:	485f      	ldr	r0, [pc, #380]	; (8002c80 <HAL_I2C_Mem_Read+0x25c>)
 8002b04:	4a5f      	ldr	r2, [pc, #380]	; (8002c84 <HAL_I2C_Mem_Read+0x260>)
 8002b06:	4003      	ands	r3, r0
 8002b08:	4332      	orrs	r2, r6
 8002b0a:	4313      	orrs	r3, r2
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b0c:	22ff      	movs	r2, #255	; 0xff
 8002b0e:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002b10:	604b      	str	r3, [r1, #4]
 8002b12:	f046 75ff 	orr.w	r5, r6, #33423360	; 0x1fe0000
 8002b16:	4f5c      	ldr	r7, [pc, #368]	; (8002c88 <HAL_I2C_Mem_Read+0x264>)
 8002b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b1a:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
 8002b1e:	3301      	adds	r3, #1
 8002b20:	d122      	bne.n	8002b68 <HAL_I2C_Mem_Read+0x144>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b22:	698b      	ldr	r3, [r1, #24]
 8002b24:	075b      	lsls	r3, r3, #29
 8002b26:	d5fc      	bpl.n	8002b22 <HAL_I2C_Mem_Read+0xfe>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b2a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8002b2c:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8002b2e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002b30:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002b32:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002b34:	3901      	subs	r1, #1
 8002b36:	b289      	uxth	r1, r1
 8002b38:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b3a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8002b40:	3201      	adds	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b42:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 8002b44:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002b46:	6262      	str	r2, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b48:	b109      	cbz	r1, 8002b4e <HAL_I2C_Mem_Read+0x12a>
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d032      	beq.n	8002bb4 <HAL_I2C_Mem_Read+0x190>
    while (hi2c->XferCount > 0U);
 8002b4e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d07b      	beq.n	8002c4e <HAL_I2C_Mem_Read+0x22a>
 8002b56:	6821      	ldr	r1, [r4, #0]
 8002b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b5a:	e7e0      	b.n	8002b1e <HAL_I2C_Mem_Read+0xfa>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b60:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8002b62:	2001      	movs	r0, #1
 8002b64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b68:	698b      	ldr	r3, [r1, #24]
 8002b6a:	0758      	lsls	r0, r3, #29
 8002b6c:	d4dc      	bmi.n	8002b28 <HAL_I2C_Mem_Read+0x104>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b6e:	f7fe f9eb 	bl	8000f48 <HAL_GetTick>
 8002b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b74:	eba0 0008 	sub.w	r0, r0, r8
 8002b78:	4283      	cmp	r3, r0
 8002b7a:	d30d      	bcc.n	8002b98 <HAL_I2C_Mem_Read+0x174>
 8002b7c:	b163      	cbz	r3, 8002b98 <HAL_I2C_Mem_Read+0x174>
 8002b7e:	6821      	ldr	r1, [r4, #0]
 8002b80:	e7cd      	b.n	8002b1e <HAL_I2C_Mem_Read+0xfa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b82:	6993      	ldr	r3, [r2, #24]
 8002b84:	061b      	lsls	r3, r3, #24
 8002b86:	d41c      	bmi.n	8002bc2 <HAL_I2C_Mem_Read+0x19e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b88:	f7fe f9de 	bl	8000f48 <HAL_GetTick>
 8002b8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b8e:	eba0 0008 	sub.w	r0, r0, r8
 8002b92:	4283      	cmp	r3, r0
 8002b94:	d300      	bcc.n	8002b98 <HAL_I2C_Mem_Read+0x174>
 8002b96:	b973      	cbnz	r3, 8002bb6 <HAL_I2C_Mem_Read+0x192>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b98:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b9a:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b9c:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b9e:	430b      	orrs	r3, r1
 8002ba0:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8002ba2:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 8002ba6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          return HAL_ERROR;
 8002baa:	2001      	movs	r0, #1
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bac:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002bb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002bb6:	6822      	ldr	r2, [r4, #0]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	d1e2      	bne.n	8002b82 <HAL_I2C_Mem_Read+0x15e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bbc:	6993      	ldr	r3, [r2, #24]
 8002bbe:	0619      	lsls	r1, r3, #24
 8002bc0:	d5fc      	bpl.n	8002bbc <HAL_I2C_Mem_Read+0x198>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bc2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	2bff      	cmp	r3, #255	; 0xff
 8002bc8:	d906      	bls.n	8002bd8 <HAL_I2C_Mem_Read+0x1b4>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002bca:	6853      	ldr	r3, [r2, #4]
 8002bcc:	403b      	ands	r3, r7
 8002bce:	432b      	orrs	r3, r5
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bd0:	21ff      	movs	r1, #255	; 0xff
 8002bd2:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002bd4:	6053      	str	r3, [r2, #4]
 8002bd6:	e7ba      	b.n	8002b4e <HAL_I2C_Mem_Read+0x12a>
          hi2c->XferSize = hi2c->XferCount;
 8002bd8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002bda:	6850      	ldr	r0, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8002bdc:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002bde:	fa5f fe81 	uxtb.w	lr, r1
 8002be2:	f046 7300 	orr.w	r3, r6, #33554432	; 0x2000000
 8002be6:	4038      	ands	r0, r7
 8002be8:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8002bec:	4303      	orrs	r3, r0
          hi2c->XferSize = hi2c->XferCount;
 8002bee:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002bf0:	6053      	str	r3, [r2, #4]
 8002bf2:	e7ac      	b.n	8002b4e <HAL_I2C_Mem_Read+0x12a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bf4:	698b      	ldr	r3, [r1, #24]
 8002bf6:	065a      	lsls	r2, r3, #25
 8002bf8:	f53f af7d 	bmi.w	8002af6 <HAL_I2C_Mem_Read+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bfc:	f7fe f9a4 	bl	8000f48 <HAL_GetTick>
 8002c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c02:	eba0 0008 	sub.w	r0, r0, r8
 8002c06:	4283      	cmp	r3, r0
 8002c08:	d302      	bcc.n	8002c10 <HAL_I2C_Mem_Read+0x1ec>
 8002c0a:	b10b      	cbz	r3, 8002c10 <HAL_I2C_Mem_Read+0x1ec>
 8002c0c:	6821      	ldr	r1, [r4, #0]
 8002c0e:	e76c      	b.n	8002aea <HAL_I2C_Mem_Read+0xc6>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c10:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002c12:	2120      	movs	r1, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c14:	430b      	orrs	r3, r1
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c16:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c18:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002c1a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c1e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002c22:	2300      	movs	r3, #0
 8002c24:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002c28:	2001      	movs	r0, #1
 8002c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hi2c->XferSize = hi2c->XferCount;
 8002c2e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002c30:	4d13      	ldr	r5, [pc, #76]	; (8002c80 <HAL_I2C_Mem_Read+0x25c>)
 8002c32:	6848      	ldr	r0, [r1, #4]
      hi2c->XferSize = hi2c->XferCount;
 8002c34:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002c36:	f046 4302 	orr.w	r3, r6, #2181038080	; 0x82000000
 8002c3a:	4028      	ands	r0, r5
 8002c3c:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8002c40:	b2d5      	uxtb	r5, r2
 8002c42:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8002c46:	4303      	orrs	r3, r0
      hi2c->XferSize = hi2c->XferCount;
 8002c48:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002c4a:	604b      	str	r3, [r1, #4]
 8002c4c:	e761      	b.n	8002b12 <HAL_I2C_Mem_Read+0xee>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c4e:	4642      	mov	r2, r8
 8002c50:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002c52:	4620      	mov	r0, r4
 8002c54:	f7ff fb7e 	bl	8002354 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c58:	b970      	cbnz	r0, 8002c78 <HAL_I2C_Mem_Read+0x254>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c5a:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002c5c:	4d0b      	ldr	r5, [pc, #44]	; (8002c8c <HAL_I2C_Mem_Read+0x268>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c5e:	2120      	movs	r1, #32
 8002c60:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	402a      	ands	r2, r5
 8002c66:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002c68:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002c6c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c70:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002c74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_ERROR;
 8002c78:	2001      	movs	r0, #1
 8002c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c7e:	bf00      	nop
 8002c80:	fc009800 	.word	0xfc009800
 8002c84:	81ff2400 	.word	0x81ff2400
 8002c88:	fc009c00 	.word	0xfc009c00
 8002c8c:	fe00e800 	.word	0xfe00e800

08002c90 <HAL_I2C_Mem_Read_IT>:
{
 8002c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c94:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 8002c98:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c9c:	2c20      	cmp	r4, #32
 8002c9e:	d003      	beq.n	8002ca8 <HAL_I2C_Mem_Read_IT+0x18>
    return HAL_BUSY;
 8002ca0:	2502      	movs	r5, #2
}
 8002ca2:	4628      	mov	r0, r5
 8002ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((pData == NULL) || (Size == 0U))
 8002ca8:	9c08      	ldr	r4, [sp, #32]
 8002caa:	2c00      	cmp	r4, #0
 8002cac:	f000 8081 	beq.w	8002db2 <HAL_I2C_Mem_Read_IT+0x122>
 8002cb0:	2d00      	cmp	r5, #0
 8002cb2:	d07e      	beq.n	8002db2 <HAL_I2C_Mem_Read_IT+0x122>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002cb4:	6804      	ldr	r4, [r0, #0]
 8002cb6:	69a4      	ldr	r4, [r4, #24]
 8002cb8:	f414 4a00 	ands.w	sl, r4, #32768	; 0x8000
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_I2C_Mem_Read_IT+0x10>
    __HAL_LOCK(hi2c);
 8002cbe:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8002cc2:	2c01      	cmp	r4, #1
 8002cc4:	d0ec      	beq.n	8002ca0 <HAL_I2C_Mem_Read_IT+0x10>
 8002cc6:	4698      	mov	r8, r3
 8002cc8:	2301      	movs	r3, #1
 8002cca:	4604      	mov	r4, r0
 8002ccc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8002cd0:	4617      	mov	r7, r2
 8002cd2:	460e      	mov	r6, r1
    tickstart = HAL_GetTick();
 8002cd4:	f7fe f938 	bl	8000f48 <HAL_GetTick>
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002cd8:	2322      	movs	r3, #34	; 0x22
 8002cda:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002cde:	2240      	movs	r2, #64	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ce0:	4b3f      	ldr	r3, [pc, #252]	; (8002de0 <HAL_I2C_Mem_Read_IT+0x150>)
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002ce2:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ce6:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
 8002cea:	8565      	strh	r5, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cec:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8002cf0:	4a3c      	ldr	r2, [pc, #240]	; (8002de4 <HAL_I2C_Mem_Read_IT+0x154>)
    hi2c->pBuffPtr    = pData;
 8002cf2:	9908      	ldr	r1, [sp, #32]
 8002cf4:	6261      	str	r1, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	2bff      	cmp	r3, #255	; 0xff
    tickstart = HAL_GetTick();
 8002cfa:	4681      	mov	r9, r0
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8002cfc:	6362      	str	r2, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cfe:	d85d      	bhi.n	8002dbc <HAL_I2C_Mem_Read_IT+0x12c>
      hi2c->XferSize = hi2c->XferCount;
 8002d00:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      xfermode = I2C_AUTOEND_MODE;
 8002d02:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8002d06:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002d08:	6821      	ldr	r1, [r4, #0]
 8002d0a:	4837      	ldr	r0, [pc, #220]	; (8002de8 <HAL_I2C_Mem_Read_IT+0x158>)
 8002d0c:	684a      	ldr	r2, [r1, #4]
 8002d0e:	8523      	strh	r3, [r4, #40]	; 0x28
 8002d10:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8002d14:	fa5f f388 	uxtb.w	r3, r8
 8002d18:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 8002d1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d20:	4002      	ands	r2, r0
 8002d22:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d26:	4313      	orrs	r3, r2
 8002d28:	604b      	str	r3, [r1, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d2a:	464a      	mov	r2, r9
 8002d2c:	2119      	movs	r1, #25
 8002d2e:	4620      	mov	r0, r4
 8002d30:	f7ff fabc 	bl	80022ac <I2C_WaitOnTXISFlagUntilTimeout>
 8002d34:	4605      	mov	r5, r0
 8002d36:	2800      	cmp	r0, #0
 8002d38:	d14c      	bne.n	8002dd4 <HAL_I2C_Mem_Read_IT+0x144>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d3a:	f1b8 0f01 	cmp.w	r8, #1
 8002d3e:	d009      	beq.n	8002d54 <HAL_I2C_Mem_Read_IT+0xc4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d40:	6823      	ldr	r3, [r4, #0]
 8002d42:	0a3a      	lsrs	r2, r7, #8
 8002d44:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d46:	2119      	movs	r1, #25
 8002d48:	464a      	mov	r2, r9
 8002d4a:	4620      	mov	r0, r4
 8002d4c:	f7ff faae 	bl	80022ac <I2C_WaitOnTXISFlagUntilTimeout>
 8002d50:	2800      	cmp	r0, #0
 8002d52:	d13f      	bne.n	8002dd4 <HAL_I2C_Mem_Read_IT+0x144>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d54:	6822      	ldr	r2, [r4, #0]
 8002d56:	b2ff      	uxtb	r7, r7
 8002d58:	6297      	str	r7, [r2, #40]	; 0x28
 8002d5a:	e006      	b.n	8002d6a <HAL_I2C_Mem_Read_IT+0xda>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d5c:	f7fe f8f4 	bl	8000f48 <HAL_GetTick>
 8002d60:	eba0 0009 	sub.w	r0, r0, r9
 8002d64:	2819      	cmp	r0, #25
 8002d66:	d82d      	bhi.n	8002dc4 <HAL_I2C_Mem_Read_IT+0x134>
 8002d68:	6822      	ldr	r2, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d6a:	6997      	ldr	r7, [r2, #24]
 8002d6c:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 8002d70:	d0f4      	beq.n	8002d5c <HAL_I2C_Mem_Read_IT+0xcc>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002d72:	6851      	ldr	r1, [r2, #4]
 8002d74:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8002d78:	481b      	ldr	r0, [pc, #108]	; (8002de8 <HAL_I2C_Mem_Read_IT+0x158>)
 8002d7a:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 8002d7e:	f446 5610 	orr.w	r6, r6, #9216	; 0x2400
 8002d82:	4001      	ands	r1, r0
 8002d84:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002d88:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002d8a:	4e18      	ldr	r6, [pc, #96]	; (8002dec <HAL_I2C_Mem_Read_IT+0x15c>)
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002d8c:	ea43 030a 	orr.w	r3, r3, sl
 8002d90:	430b      	orrs	r3, r1
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002d92:	42b0      	cmp	r0, r6
    __HAL_UNLOCK(hi2c);
 8002d94:	f04f 0100 	mov.w	r1, #0
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002d98:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hi2c);
 8002d9a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002d9e:	d004      	beq.n	8002daa <HAL_I2C_Mem_Read_IT+0x11a>
 8002da0:	4913      	ldr	r1, [pc, #76]	; (8002df0 <HAL_I2C_Mem_Read_IT+0x160>)
 8002da2:	4288      	cmp	r0, r1
 8002da4:	bf14      	ite	ne
 8002da6:	21f4      	movne	r1, #244	; 0xf4
 8002da8:	2100      	moveq	r1, #0
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002daa:	6813      	ldr	r3, [r2, #0]
 8002dac:	4319      	orrs	r1, r3
 8002dae:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 8002db0:	e777      	b.n	8002ca2 <HAL_I2C_Mem_Read_IT+0x12>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002db2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002db6:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8002db8:	2501      	movs	r5, #1
 8002dba:	e772      	b.n	8002ca2 <HAL_I2C_Mem_Read_IT+0x12>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dbc:	23ff      	movs	r3, #255	; 0xff
      xfermode = I2C_RELOAD_MODE;
 8002dbe:	f04f 7a80 	mov.w	sl, #16777216	; 0x1000000
 8002dc2:	e7a1      	b.n	8002d08 <HAL_I2C_Mem_Read_IT+0x78>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dc4:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002dc6:	2220      	movs	r2, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002dcc:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002dda:	2501      	movs	r5, #1
 8002ddc:	e761      	b.n	8002ca2 <HAL_I2C_Mem_Read_IT+0x12>
 8002dde:	bf00      	nop
 8002de0:	ffff0000 	.word	0xffff0000
 8002de4:	08003815 	.word	0x08003815
 8002de8:	fc009800 	.word	0xfc009800
 8002dec:	08003a51 	.word	0x08003a51
 8002df0:	0800342d 	.word	0x0800342d

08002df4 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002df4:	6803      	ldr	r3, [r0, #0]
{
 8002df6:	b410      	push	{r4}
  if (hi2c->XferISR != NULL)
 8002df8:	6b44      	ldr	r4, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002dfa:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002dfc:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8002dfe:	b11c      	cbz	r4, 8002e08 <HAL_I2C_EV_IRQHandler+0x14>
    hi2c->XferISR(hi2c, itflags, itsources);
 8002e00:	4623      	mov	r3, r4
}
 8002e02:	f85d 4b04 	ldr.w	r4, [sp], #4
    hi2c->XferISR(hi2c, itflags, itsources);
 8002e06:	4718      	bx	r3
}
 8002e08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop

08002e10 <HAL_I2C_MasterTxCpltCallback>:
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop

08002e14 <HAL_I2C_MasterRxCpltCallback>:
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop

08002e18 <HAL_I2C_SlaveTxCpltCallback>:
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop

08002e1c <HAL_I2C_SlaveRxCpltCallback>:
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop

08002e20 <HAL_I2C_AddrCallback>:
{
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop

08002e24 <I2C_ITAddrCplt.isra.8.part.9>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8002e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    transferdirection = I2C_GET_DIR(hi2c);
 8002e26:	6804      	ldr	r4, [r0, #0]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e28:	68c3      	ldr	r3, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8002e2a:	69a1      	ldr	r1, [r4, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002e2c:	69a2      	ldr	r2, [r4, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002e2e:	68a6      	ldr	r6, [r4, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002e30:	68e7      	ldr	r7, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002e32:	0c12      	lsrs	r2, r2, #16
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e34:	2b02      	cmp	r3, #2
    transferdirection = I2C_GET_DIR(hi2c);
 8002e36:	f3c1 4100 	ubfx	r1, r1, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002e3a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e3e:	d10d      	bne.n	8002e5c <I2C_ITAddrCplt.isra.8.part.9+0x38>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002e40:	f3c6 0609 	ubfx	r6, r6, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8002e44:	ea82 12d6 	eor.w	r2, r2, r6, lsr #7
 8002e48:	f012 0306 	ands.w	r3, r2, #6
 8002e4c:	d110      	bne.n	8002e70 <I2C_ITAddrCplt.isra.8.part.9+0x4c>
        hi2c->AddrEventCount++;
 8002e4e:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8002e50:	3201      	adds	r2, #1
 8002e52:	6482      	str	r2, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002e54:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8002e56:	2a02      	cmp	r2, #2
 8002e58:	d016      	beq.n	8002e88 <I2C_ITAddrCplt.isra.8.part.9+0x64>
 8002e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002e5c:	6823      	ldr	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
 8002e5e:	2600      	movs	r6, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002e60:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
 8002e64:	6023      	str	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
 8002e66:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e6a:	f7ff ffd9 	bl	8002e20 <HAL_I2C_AddrCallback>
 8002e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002e70:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);
 8002e72:	2600      	movs	r6, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002e74:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
 8002e78:	6023      	str	r3, [r4, #0]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e7a:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
        __HAL_UNLOCK(hi2c);
 8002e7e:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e82:	f7ff ffcd 	bl	8002e20 <HAL_I2C_AddrCallback>
 8002e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e88:	2708      	movs	r7, #8
          hi2c->AddrEventCount = 0U;
 8002e8a:	6483      	str	r3, [r0, #72]	; 0x48
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e8c:	4632      	mov	r2, r6
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e8e:	61e7      	str	r7, [r4, #28]
          __HAL_UNLOCK(hi2c);
 8002e90:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e94:	f7ff ffc4 	bl	8002e20 <HAL_I2C_AddrCallback>
 8002e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e9a:	bf00      	nop

08002e9c <HAL_I2C_ListenCpltCallback>:
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop

08002ea0 <HAL_I2C_MemTxCpltCallback>:
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop

08002ea4 <HAL_I2C_MemRxCpltCallback>:
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop

08002ea8 <HAL_I2C_ErrorCallback>:
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop

08002eac <HAL_I2C_AbortCpltCallback>:
{
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop

08002eb0 <I2C_ITError>:
{
 8002eb0:	b570      	push	{r4, r5, r6, lr}
 8002eb2:	4604      	mov	r4, r0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002eb4:	4a40      	ldr	r2, [pc, #256]	; (8002fb8 <I2C_ITError+0x108>)
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002eb6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002eba:	2000      	movs	r0, #0
 8002ebc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002ec0:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002ec2:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8002ec4:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002ec6:	3b28      	subs	r3, #40	; 0x28
  hi2c->ErrorCode |= ErrorCode;
 8002ec8:	4311      	orrs	r1, r2
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002eca:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
 8002ecc:	6461      	str	r1, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002ece:	d83d      	bhi.n	8002f4c <I2C_ITError+0x9c>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ed0:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ed4:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002ed8:	6823      	ldr	r3, [r4, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002eda:	4e38      	ldr	r6, [pc, #224]	; (8002fbc <I2C_ITError+0x10c>)
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002edc:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ede:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8002ee2:	2928      	cmp	r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ee4:	f005 0528 	and.w	r5, r5, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ee8:	bf14      	ite	ne
 8002eea:	f06f 01f6 	mvnne.w	r1, #246	; 0xf6
 8002eee:	f06f 0146 	mvneq.w	r1, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ef2:	2d28      	cmp	r5, #40	; 0x28
 8002ef4:	bf18      	it	ne
 8002ef6:	f06f 01f6 	mvnne.w	r1, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002efa:	400a      	ands	r2, r1
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002efc:	2128      	movs	r1, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002efe:	601a      	str	r2, [r3, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002f00:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002f04:	6366      	str	r6, [r4, #52]	; 0x34
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f06:	6320      	str	r0, [r4, #48]	; 0x30
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	f412 4280 	ands.w	r2, r2, #16384	; 0x4000
 8002f0e:	d00f      	beq.n	8002f30 <I2C_ITError+0x80>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002f10:	681a      	ldr	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8002f12:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002f14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f18:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8002f1a:	b140      	cbz	r0, 8002f2e <I2C_ITError+0x7e>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002f1c:	4b28      	ldr	r3, [pc, #160]	; (8002fc0 <I2C_ITError+0x110>)
 8002f1e:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8002f20:	2300      	movs	r3, #0
 8002f22:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002f26:	f7fe ff8b 	bl	8001e40 <HAL_DMA_Abort_IT>
 8002f2a:	2800      	cmp	r0, #0
 8002f2c:	d136      	bne.n	8002f9c <I2C_ITError+0xec>
 8002f2e:	bd70      	pop	{r4, r5, r6, pc}
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002f30:	6819      	ldr	r1, [r3, #0]
 8002f32:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
 8002f36:	d11d      	bne.n	8002f74 <I2C_ITError+0xc4>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002f38:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002f3c:	2b60      	cmp	r3, #96	; 0x60
 8002f3e:	d032      	beq.n	8002fa6 <I2C_ITError+0xf6>
    __HAL_UNLOCK(hi2c);
 8002f40:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002f44:	4620      	mov	r0, r4
 8002f46:	f7ff ffaf 	bl	8002ea8 <HAL_I2C_ErrorCallback>
 8002f4a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002f4c:	6823      	ldr	r3, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f4e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f52:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
 8002f5c:	601a      	str	r2, [r3, #0]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002f5e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8002f62:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 8002f64:	bf1c      	itt	ne
 8002f66:	2220      	movne	r2, #32
 8002f68:	f884 2041 	strbne.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002f70:	6362      	str	r2, [r4, #52]	; 0x34
 8002f72:	e7c9      	b.n	8002f08 <I2C_ITError+0x58>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f74:	6819      	ldr	r1, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8002f76:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f78:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8002f7c:	6019      	str	r1, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8002f7e:	2800      	cmp	r0, #0
 8002f80:	d0d5      	beq.n	8002f2e <I2C_ITError+0x7e>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002f82:	4b0f      	ldr	r3, [pc, #60]	; (8002fc0 <I2C_ITError+0x110>)
 8002f84:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8002f86:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002f8a:	f7fe ff59 	bl	8001e40 <HAL_DMA_Abort_IT>
 8002f8e:	2800      	cmp	r0, #0
 8002f90:	d0cd      	beq.n	8002f2e <I2C_ITError+0x7e>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002f92:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8002f94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002f98:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002f9a:	4718      	bx	r3
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f9c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 8002f9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002fa2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002fa4:	4718      	bx	r3
    hi2c->State = HAL_I2C_STATE_READY;
 8002fa6:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8002fa8:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002fac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8002fb0:	4620      	mov	r0, r4
 8002fb2:	f7ff ff7b 	bl	8002eac <HAL_I2C_AbortCpltCallback>
 8002fb6:	bd70      	pop	{r4, r5, r6, pc}
 8002fb8:	ffff0000 	.word	0xffff0000
 8002fbc:	0800311d 	.word	0x0800311d
 8002fc0:	080035ed 	.word	0x080035ed

08002fc4 <I2C_ITSlaveCplt>:
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002fc4:	6803      	ldr	r3, [r0, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fc6:	2220      	movs	r2, #32
{
 8002fc8:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002fca:	681d      	ldr	r5, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fcc:	61da      	str	r2, [r3, #28]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fce:	2208      	movs	r2, #8
 8002fd0:	61da      	str	r2, [r3, #28]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002fd2:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002fd6:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  I2C_RESET_CR2(hi2c);
 8002fda:	4e4e      	ldr	r6, [pc, #312]	; (8003114 <I2C_ITSlaveCplt+0x150>)
{
 8002fdc:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002fde:	6818      	ldr	r0, [r3, #0]
 8002fe0:	f020 00fe 	bic.w	r0, r0, #254	; 0xfe
 8002fe4:	6018      	str	r0, [r3, #0]
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002fe6:	6858      	ldr	r0, [r3, #4]
 8002fe8:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8002fec:	6058      	str	r0, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	4032      	ands	r2, r6
 8002ff2:	605a      	str	r2, [r3, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ff4:	699a      	ldr	r2, [r3, #24]
 8002ff6:	0792      	lsls	r2, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8002ff8:	bf44      	itt	mi
 8002ffa:	2200      	movmi	r2, #0
 8002ffc:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ffe:	699a      	ldr	r2, [r3, #24]
 8003000:	07d6      	lsls	r6, r2, #31
 8003002:	d403      	bmi.n	800300c <I2C_ITSlaveCplt+0x48>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003004:	699a      	ldr	r2, [r3, #24]
 8003006:	f042 0201 	orr.w	r2, r2, #1
 800300a:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800300c:	0468      	lsls	r0, r5, #17
 800300e:	d530      	bpl.n	8003072 <I2C_ITSlaveCplt+0xae>
    if (hi2c->hdmatx != NULL)
 8003010:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003012:	b11a      	cbz	r2, 800301c <I2C_ITSlaveCplt+0x58>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8003014:	6812      	ldr	r2, [r2, #0]
 8003016:	6852      	ldr	r2, [r2, #4]
 8003018:	b292      	uxth	r2, r2
 800301a:	8562      	strh	r2, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800301c:	f011 0604 	ands.w	r6, r1, #4
 8003020:	d007      	beq.n	8003032 <I2C_ITSlaveCplt+0x6e>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003022:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 8003028:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800302a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 800302c:	3301      	adds	r3, #1
 800302e:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8003030:	bb7a      	cbnz	r2, 8003092 <I2C_ITSlaveCplt+0xce>
  if (hi2c->XferCount != 0U)
 8003032:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003034:	b29b      	uxth	r3, r3
 8003036:	b11b      	cbz	r3, 8003040 <I2C_ITSlaveCplt+0x7c>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003038:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800303a:	f043 0304 	orr.w	r3, r3, #4
 800303e:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 8003040:	2500      	movs	r5, #0
 8003042:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003044:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003048:	6c63      	ldr	r3, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 800304a:	6365      	str	r5, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800304c:	bb43      	cbnz	r3, 80030a0 <I2C_ITSlaveCplt+0xdc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800304e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003050:	4931      	ldr	r1, [pc, #196]	; (8003118 <I2C_ITSlaveCplt+0x154>)
 8003052:	428a      	cmp	r2, r1
 8003054:	d113      	bne.n	800307e <I2C_ITSlaveCplt+0xba>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003056:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800305a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800305e:	2a22      	cmp	r2, #34	; 0x22
    hi2c->State = HAL_I2C_STATE_READY;
 8003060:	f04f 0220 	mov.w	r2, #32
 8003064:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003068:	4620      	mov	r0, r4
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800306a:	d050      	beq.n	800310e <I2C_ITSlaveCplt+0x14a>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800306c:	f7ff fed4 	bl	8002e18 <HAL_I2C_SlaveTxCpltCallback>
 8003070:	bd70      	pop	{r4, r5, r6, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003072:	042a      	lsls	r2, r5, #16
 8003074:	d5d2      	bpl.n	800301c <I2C_ITSlaveCplt+0x58>
    if (hi2c->hdmarx != NULL)
 8003076:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003078:	2a00      	cmp	r2, #0
 800307a:	d1cb      	bne.n	8003014 <I2C_ITSlaveCplt+0x50>
 800307c:	e7ce      	b.n	800301c <I2C_ITSlaveCplt+0x58>
    hi2c->State = HAL_I2C_STATE_READY;
 800307e:	2220      	movs	r2, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003080:	62e1      	str	r1, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hi2c);
 8003082:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003086:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    HAL_I2C_ListenCpltCallback(hi2c);
 800308a:	4620      	mov	r0, r4
 800308c:	f7ff ff06 	bl	8002e9c <HAL_I2C_ListenCpltCallback>
 8003090:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->XferCount--;
 8003092:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003094:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8003096:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8003098:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800309a:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800309c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800309e:	e7c8      	b.n	8003032 <I2C_ITSlaveCplt+0x6e>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80030a0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80030a2:	4620      	mov	r0, r4
 80030a4:	f7ff ff04 	bl	8002eb0 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80030a8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80030ac:	2b28      	cmp	r3, #40	; 0x28
 80030ae:	d1df      	bne.n	8003070 <I2C_ITSlaveCplt+0xac>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030b0:	4a19      	ldr	r2, [pc, #100]	; (8003118 <I2C_ITSlaveCplt+0x154>)
 80030b2:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 80030b4:	2320      	movs	r3, #32
  hi2c->PreviousState = I2C_STATE_NONE;
 80030b6:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->XferISR = NULL;
 80030b8:	6365      	str	r5, [r4, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 80030ba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030be:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80030c2:	b196      	cbz	r6, 80030ea <I2C_ITSlaveCplt+0x126>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030c4:	6822      	ldr	r2, [r4, #0]
 80030c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030ca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80030cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80030ce:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 80030d0:	3301      	adds	r3, #1
 80030d2:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80030d4:	b14a      	cbz	r2, 80030ea <I2C_ITSlaveCplt+0x126>
      hi2c->XferCount--;
 80030d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29b      	uxth	r3, r3
 80030dc:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030de:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->XferSize--;
 80030e0:	3a01      	subs	r2, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030e2:	f043 0304 	orr.w	r3, r3, #4
      hi2c->XferSize--;
 80030e6:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030e8:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80030ea:	6823      	ldr	r3, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80030ec:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80030f0:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80030f4:	681a      	ldr	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030f6:	2510      	movs	r5, #16
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80030f8:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
  __HAL_UNLOCK(hi2c);
 80030fc:	2100      	movs	r1, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80030fe:	601a      	str	r2, [r3, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 8003100:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003102:	61dd      	str	r5, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8003104:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8003108:	f7ff fec8 	bl	8002e9c <HAL_I2C_ListenCpltCallback>
 800310c:	bd70      	pop	{r4, r5, r6, pc}
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800310e:	f7ff fe85 	bl	8002e1c <HAL_I2C_SlaveRxCpltCallback>
 8003112:	bd70      	pop	{r4, r5, r6, pc}
 8003114:	fe00e800 	.word	0xfe00e800
 8003118:	ffff0000 	.word	0xffff0000

0800311c <I2C_Slave_ISR_IT>:
{
 800311c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 800311e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 8003122:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8003124:	2b01      	cmp	r3, #1
 8003126:	f000 80d9 	beq.w	80032dc <I2C_Slave_ISR_IT+0x1c0>
 800312a:	4616      	mov	r6, r2
 800312c:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800312e:	06ca      	lsls	r2, r1, #27
 8003130:	4604      	mov	r4, r0
 8003132:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 8003134:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003138:	d448      	bmi.n	80031cc <I2C_Slave_ISR_IT+0xb0>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800313a:	0768      	lsls	r0, r5, #29
 800313c:	f140 808d 	bpl.w	800325a <I2C_Slave_ISR_IT+0x13e>
 8003140:	0771      	lsls	r1, r6, #29
 8003142:	f140 808a 	bpl.w	800325a <I2C_Slave_ISR_IT+0x13e>
    if (hi2c->XferCount > 0U)
 8003146:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003148:	b29b      	uxth	r3, r3
 800314a:	b16b      	cbz	r3, 8003168 <I2C_Slave_ISR_IT+0x4c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800314c:	6822      	ldr	r2, [r4, #0]
 800314e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003150:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003152:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8003154:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003156:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003158:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800315a:	3b01      	subs	r3, #1
 800315c:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 800315e:	3101      	adds	r1, #1
      hi2c->XferSize--;
 8003160:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8003162:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003164:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003166:	8522      	strh	r2, [r4, #40]	; 0x28
    if ((hi2c->XferCount == 0U) && \
 8003168:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800316a:	b29b      	uxth	r3, r3
 800316c:	bb2b      	cbnz	r3, 80031ba <I2C_Slave_ISR_IT+0x9e>
 800316e:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8003172:	d022      	beq.n	80031ba <I2C_Slave_ISR_IT+0x9e>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003174:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003178:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800317c:	2a29      	cmp	r2, #41	; 0x29
 800317e:	f000 8109 	beq.w	8003394 <I2C_Slave_ISR_IT+0x278>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003182:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8003186:	2a2a      	cmp	r2, #42	; 0x2a
 8003188:	d117      	bne.n	80031ba <I2C_Slave_ISR_IT+0x9e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800318a:	2128      	movs	r1, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800318c:	2222      	movs	r2, #34	; 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800318e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003192:	6322      	str	r2, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003194:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003198:	6821      	ldr	r1, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800319a:	f002 0228 	and.w	r2, r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800319e:	6808      	ldr	r0, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80031a0:	2a28      	cmp	r2, #40	; 0x28
 80031a2:	bf14      	ite	ne
 80031a4:	f06f 02f4 	mvnne.w	r2, #244	; 0xf4
 80031a8:	f06f 0244 	mvneq.w	r2, #68	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80031ac:	4002      	ands	r2, r0
 80031ae:	600a      	str	r2, [r1, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80031b0:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80031b2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80031b6:	f7ff fe31 	bl	8002e1c <HAL_I2C_SlaveRxCpltCallback>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80031ba:	06aa      	lsls	r2, r5, #26
 80031bc:	d502      	bpl.n	80031c4 <I2C_Slave_ISR_IT+0xa8>
 80031be:	06b3      	lsls	r3, r6, #26
 80031c0:	f100 808e 	bmi.w	80032e0 <I2C_Slave_ISR_IT+0x1c4>
  __HAL_UNLOCK(hi2c);
 80031c4:	2000      	movs	r0, #0
 80031c6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return HAL_OK;
 80031ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80031cc:	06f3      	lsls	r3, r6, #27
 80031ce:	d5b4      	bpl.n	800313a <I2C_Slave_ISR_IT+0x1e>
    if (hi2c->XferCount == 0U)
 80031d0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f040 8088 	bne.w	80032ea <I2C_Slave_ISR_IT+0x1ce>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80031da:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80031de:	2a28      	cmp	r2, #40	; 0x28
 80031e0:	f000 80a0 	beq.w	8003324 <I2C_Slave_ISR_IT+0x208>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80031e4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80031e8:	2b29      	cmp	r3, #41	; 0x29
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031ea:	6823      	ldr	r3, [r4, #0]
 80031ec:	f04f 0210 	mov.w	r2, #16
 80031f0:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80031f2:	d1e2      	bne.n	80031ba <I2C_Slave_ISR_IT+0x9e>
 80031f4:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 80031f8:	d0df      	beq.n	80031ba <I2C_Slave_ISR_IT+0x9e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031fa:	699a      	ldr	r2, [r3, #24]
 80031fc:	0792      	lsls	r2, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 80031fe:	bf44      	itt	mi
 8003200:	2200      	movmi	r2, #0
 8003202:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003204:	699a      	ldr	r2, [r3, #24]
 8003206:	07d7      	lsls	r7, r2, #31
 8003208:	d403      	bmi.n	8003212 <I2C_Slave_ISR_IT+0xf6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800320a:	699a      	ldr	r2, [r3, #24]
 800320c:	f042 0201 	orr.w	r2, r2, #1
 8003210:	619a      	str	r2, [r3, #24]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003212:	2200      	movs	r2, #0
 8003214:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003218:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 800321c:	2929      	cmp	r1, #41	; 0x29
 800321e:	f000 80eb 	beq.w	80033f8 <I2C_Slave_ISR_IT+0x2dc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003222:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8003226:	292a      	cmp	r1, #42	; 0x2a
 8003228:	d1c7      	bne.n	80031ba <I2C_Slave_ISR_IT+0x9e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800322a:	2028      	movs	r0, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800322c:	2122      	movs	r1, #34	; 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800322e:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003232:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003234:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003238:	6818      	ldr	r0, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800323a:	f001 0128 	and.w	r1, r1, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800323e:	2928      	cmp	r1, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003240:	bf14      	ite	ne
 8003242:	f06f 01f4 	mvnne.w	r1, #244	; 0xf4
 8003246:	f06f 0144 	mvneq.w	r1, #68	; 0x44
 800324a:	4001      	ands	r1, r0
 800324c:	6019      	str	r1, [r3, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800324e:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8003250:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003254:	f7ff fde2 	bl	8002e1c <HAL_I2C_SlaveRxCpltCallback>
 8003258:	e7af      	b.n	80031ba <I2C_Slave_ISR_IT+0x9e>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800325a:	072a      	lsls	r2, r5, #28
 800325c:	d50f      	bpl.n	800327e <I2C_Slave_ISR_IT+0x162>
 800325e:	0733      	lsls	r3, r6, #28
 8003260:	d50d      	bpl.n	800327e <I2C_Slave_ISR_IT+0x162>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003262:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003266:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800326a:	2b28      	cmp	r3, #40	; 0x28
 800326c:	f000 808e 	beq.w	800338c <I2C_Slave_ISR_IT+0x270>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003270:	6822      	ldr	r2, [r4, #0]
 8003272:	2108      	movs	r1, #8
    __HAL_UNLOCK(hi2c);
 8003274:	2300      	movs	r3, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003276:	61d1      	str	r1, [r2, #28]
    __HAL_UNLOCK(hi2c);
 8003278:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800327c:	e79d      	b.n	80031ba <I2C_Slave_ISR_IT+0x9e>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800327e:	07a8      	lsls	r0, r5, #30
 8003280:	d59b      	bpl.n	80031ba <I2C_Slave_ISR_IT+0x9e>
 8003282:	07b1      	lsls	r1, r6, #30
 8003284:	d599      	bpl.n	80031ba <I2C_Slave_ISR_IT+0x9e>
    if (hi2c->XferCount > 0U)
 8003286:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003288:	b29b      	uxth	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d13c      	bne.n	8003308 <I2C_Slave_ISR_IT+0x1ec>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800328e:	f037 7780 	bics.w	r7, r7, #16777216	; 0x1000000
 8003292:	d192      	bne.n	80031ba <I2C_Slave_ISR_IT+0x9e>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003294:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003298:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800329c:	2b29      	cmp	r3, #41	; 0x29
 800329e:	f000 8092 	beq.w	80033c6 <I2C_Slave_ISR_IT+0x2aa>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80032a2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80032a6:	2b2a      	cmp	r3, #42	; 0x2a
 80032a8:	d187      	bne.n	80031ba <I2C_Slave_ISR_IT+0x9e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80032aa:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80032ac:	2322      	movs	r3, #34	; 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80032ae:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80032b2:	6323      	str	r3, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80032b4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80032b8:	6822      	ldr	r2, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80032ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80032be:	2b28      	cmp	r3, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80032c0:	6811      	ldr	r1, [r2, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80032c2:	bf14      	ite	ne
 80032c4:	f06f 03f4 	mvnne.w	r3, #244	; 0xf4
 80032c8:	f06f 0344 	mvneq.w	r3, #68	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80032cc:	400b      	ands	r3, r1
 80032ce:	6013      	str	r3, [r2, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80032d0:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80032d2:	f884 7040 	strb.w	r7, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80032d6:	f7ff fda1 	bl	8002e1c <HAL_I2C_SlaveRxCpltCallback>
 80032da:	e76e      	b.n	80031ba <I2C_Slave_ISR_IT+0x9e>
  __HAL_LOCK(hi2c);
 80032dc:	2002      	movs	r0, #2
}
 80032de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80032e0:	4629      	mov	r1, r5
 80032e2:	4620      	mov	r0, r4
 80032e4:	f7ff fe6e 	bl	8002fc4 <I2C_ITSlaveCplt>
 80032e8:	e76c      	b.n	80031c4 <I2C_Slave_ISR_IT+0xa8>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ea:	6803      	ldr	r3, [r0, #0]
 80032ec:	2210      	movs	r2, #16
 80032ee:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032f0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80032f2:	f043 0304 	orr.w	r3, r3, #4
 80032f6:	6443      	str	r3, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80032f8:	f037 7380 	bics.w	r3, r7, #16777216	; 0x1000000
 80032fc:	f47f af5d 	bne.w	80031ba <I2C_Slave_ISR_IT+0x9e>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003300:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003302:	f7ff fdd5 	bl	8002eb0 <I2C_ITError>
 8003306:	e758      	b.n	80031ba <I2C_Slave_ISR_IT+0x9e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003308:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800330a:	6823      	ldr	r3, [r4, #0]
 800330c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003310:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003312:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003314:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003316:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003318:	3b01      	subs	r3, #1
 800331a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800331c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800331e:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003320:	8522      	strh	r2, [r4, #40]	; 0x28
 8003322:	e74a      	b.n	80031ba <I2C_Slave_ISR_IT+0x9e>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003324:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 8003328:	f47f af5c 	bne.w	80031e4 <I2C_Slave_ISR_IT+0xc8>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800332c:	493e      	ldr	r1, [pc, #248]	; (8003428 <I2C_Slave_ISR_IT+0x30c>)
 800332e:	62c1      	str	r1, [r0, #44]	; 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 8003330:	2220      	movs	r2, #32
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003332:	0769      	lsls	r1, r5, #29
  hi2c->PreviousState = I2C_STATE_NONE;
 8003334:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR = NULL;
 8003336:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 8003338:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800333c:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003340:	d512      	bpl.n	8003368 <I2C_Slave_ISR_IT+0x24c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003342:	6802      	ldr	r2, [r0, #0]
 8003344:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003346:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003348:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800334a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800334c:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    hi2c->pBuffPtr++;
 800334e:	3301      	adds	r3, #1
 8003350:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8003352:	b14a      	cbz	r2, 8003368 <I2C_Slave_ISR_IT+0x24c>
      hi2c->XferCount--;
 8003354:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003356:	3b01      	subs	r3, #1
 8003358:	b29b      	uxth	r3, r3
 800335a:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800335c:	6c43      	ldr	r3, [r0, #68]	; 0x44
      hi2c->XferSize--;
 800335e:	3a01      	subs	r2, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003360:	f043 0304 	orr.w	r3, r3, #4
      hi2c->XferSize--;
 8003364:	8502      	strh	r2, [r0, #40]	; 0x28
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003366:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003368:	6823      	ldr	r3, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800336a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800336e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003372:	681a      	ldr	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003374:	2710      	movs	r7, #16
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003376:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
  __HAL_UNLOCK(hi2c);
 800337a:	2100      	movs	r1, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800337c:	601a      	str	r2, [r3, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 800337e:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003380:	61df      	str	r7, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8003382:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8003386:	f7ff fd89 	bl	8002e9c <HAL_I2C_ListenCpltCallback>
 800338a:	e716      	b.n	80031ba <I2C_Slave_ISR_IT+0x9e>
 800338c:	4620      	mov	r0, r4
 800338e:	f7ff fd49 	bl	8002e24 <I2C_ITAddrCplt.isra.8.part.9>
 8003392:	e712      	b.n	80031ba <I2C_Slave_ISR_IT+0x9e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003394:	2128      	movs	r1, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003396:	2221      	movs	r2, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003398:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800339c:	6322      	str	r2, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800339e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80033a2:	6821      	ldr	r1, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80033a4:	f002 0228 	and.w	r2, r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80033a8:	6808      	ldr	r0, [r1, #0]
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80033aa:	2a28      	cmp	r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80033ac:	bf14      	ite	ne
 80033ae:	f06f 02f2 	mvnne.w	r2, #242	; 0xf2
 80033b2:	f06f 0242 	mvneq.w	r2, #66	; 0x42
 80033b6:	4002      	ands	r2, r0
 80033b8:	600a      	str	r2, [r1, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80033ba:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80033bc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80033c0:	f7ff fd2a 	bl	8002e18 <HAL_I2C_SlaveTxCpltCallback>
 80033c4:	e6f9      	b.n	80031ba <I2C_Slave_ISR_IT+0x9e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80033c6:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80033c8:	2321      	movs	r3, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80033ca:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80033ce:	6323      	str	r3, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80033d0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80033d4:	6822      	ldr	r2, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80033d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80033da:	2b28      	cmp	r3, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80033dc:	6811      	ldr	r1, [r2, #0]
 80033de:	bf14      	ite	ne
 80033e0:	f06f 03f2 	mvnne.w	r3, #242	; 0xf2
 80033e4:	f06f 0342 	mvneq.w	r3, #66	; 0x42
 80033e8:	400b      	ands	r3, r1
 80033ea:	6013      	str	r3, [r2, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80033ec:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80033ee:	f884 7040 	strb.w	r7, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80033f2:	f7ff fd11 	bl	8002e18 <HAL_I2C_SlaveTxCpltCallback>
 80033f6:	e6e0      	b.n	80031ba <I2C_Slave_ISR_IT+0x9e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80033f8:	2028      	movs	r0, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80033fa:	2121      	movs	r1, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80033fc:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003400:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003402:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003406:	6818      	ldr	r0, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003408:	f001 0128 	and.w	r1, r1, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800340c:	2928      	cmp	r1, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800340e:	bf14      	ite	ne
 8003410:	f06f 01f2 	mvnne.w	r1, #242	; 0xf2
 8003414:	f06f 0142 	mvneq.w	r1, #66	; 0x42
 8003418:	4001      	ands	r1, r0
 800341a:	6019      	str	r1, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800341c:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 800341e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003422:	f7ff fcf9 	bl	8002e18 <HAL_I2C_SlaveTxCpltCallback>
 8003426:	e6c8      	b.n	80031ba <I2C_Slave_ISR_IT+0x9e>
 8003428:	ffff0000 	.word	0xffff0000

0800342c <I2C_Slave_ISR_DMA>:
{
 800342c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hi2c);
 800342e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 8003432:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8003434:	2b01      	cmp	r3, #1
 8003436:	d06c      	beq.n	8003512 <I2C_Slave_ISR_DMA+0xe6>
 8003438:	2301      	movs	r3, #1
 800343a:	4604      	mov	r4, r0
 800343c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003440:	06c8      	lsls	r0, r1, #27
 8003442:	d410      	bmi.n	8003466 <I2C_Slave_ISR_DMA+0x3a>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003444:	070b      	lsls	r3, r1, #28
 8003446:	d55c      	bpl.n	8003502 <I2C_Slave_ISR_DMA+0xd6>
 8003448:	0715      	lsls	r5, r2, #28
 800344a:	d55a      	bpl.n	8003502 <I2C_Slave_ISR_DMA+0xd6>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800344c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003450:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003454:	2b28      	cmp	r3, #40	; 0x28
 8003456:	d077      	beq.n	8003548 <I2C_Slave_ISR_DMA+0x11c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003458:	6823      	ldr	r3, [r4, #0]
 800345a:	2208      	movs	r2, #8
 800345c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800345e:	2000      	movs	r0, #0
 8003460:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8003464:	bd38      	pop	{r3, r4, r5, pc}
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003466:	06d3      	lsls	r3, r2, #27
 8003468:	d5ec      	bpl.n	8003444 <I2C_Slave_ISR_DMA+0x18>
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800346a:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 800346e:	d052      	beq.n	8003516 <I2C_Slave_ISR_DMA+0xea>
      if (hi2c->hdmarx != NULL)
 8003470:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003472:	2b00      	cmp	r3, #0
 8003474:	d053      	beq.n	800351e <I2C_Slave_ISR_DMA+0xf2>
        if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d14f      	bne.n	800351e <I2C_Slave_ISR_DMA+0xf2>
      if (hi2c->hdmatx != NULL)
 800347e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003480:	b10b      	cbz	r3, 8003486 <I2C_Slave_ISR_DMA+0x5a>
        if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003486:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800348a:	2b28      	cmp	r3, #40	; 0x28
 800348c:	d060      	beq.n	8003550 <I2C_Slave_ISR_DMA+0x124>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800348e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003492:	2b29      	cmp	r3, #41	; 0x29
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003494:	6823      	ldr	r3, [r4, #0]
 8003496:	f04f 0210 	mov.w	r2, #16
 800349a:	61da      	str	r2, [r3, #28]
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800349c:	d1df      	bne.n	800345e <I2C_Slave_ISR_DMA+0x32>
 800349e:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 80034a2:	d0dc      	beq.n	800345e <I2C_Slave_ISR_DMA+0x32>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034a4:	699a      	ldr	r2, [r3, #24]
 80034a6:	0791      	lsls	r1, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 80034a8:	bf44      	itt	mi
 80034aa:	2200      	movmi	r2, #0
 80034ac:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034ae:	699a      	ldr	r2, [r3, #24]
 80034b0:	07d2      	lsls	r2, r2, #31
 80034b2:	d403      	bmi.n	80034bc <I2C_Slave_ISR_DMA+0x90>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034b4:	699a      	ldr	r2, [r3, #24]
 80034b6:	f042 0201 	orr.w	r2, r2, #1
 80034ba:	619a      	str	r2, [r3, #24]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034bc:	2200      	movs	r2, #0
 80034be:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80034c2:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 80034c6:	2929      	cmp	r1, #41	; 0x29
 80034c8:	d076      	beq.n	80035b8 <I2C_Slave_ISR_DMA+0x18c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80034ca:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 80034ce:	292a      	cmp	r1, #42	; 0x2a
 80034d0:	d1c5      	bne.n	800345e <I2C_Slave_ISR_DMA+0x32>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80034d2:	2028      	movs	r0, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80034d4:	2122      	movs	r1, #34	; 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80034d6:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80034da:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80034dc:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80034e0:	6818      	ldr	r0, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80034e2:	f001 0128 	and.w	r1, r1, #40	; 0x28
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80034e6:	2928      	cmp	r1, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80034e8:	bf14      	ite	ne
 80034ea:	f06f 01f4 	mvnne.w	r1, #244	; 0xf4
 80034ee:	f06f 0144 	mvneq.w	r1, #68	; 0x44
 80034f2:	4001      	ands	r1, r0
 80034f4:	6019      	str	r1, [r3, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80034f6:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80034f8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80034fc:	f7ff fc8e 	bl	8002e1c <HAL_I2C_SlaveRxCpltCallback>
 8003500:	e7ad      	b.n	800345e <I2C_Slave_ISR_DMA+0x32>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003502:	0688      	lsls	r0, r1, #26
 8003504:	d5ab      	bpl.n	800345e <I2C_Slave_ISR_DMA+0x32>
 8003506:	0693      	lsls	r3, r2, #26
 8003508:	d5a9      	bpl.n	800345e <I2C_Slave_ISR_DMA+0x32>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800350a:	4620      	mov	r0, r4
 800350c:	f7ff fd5a 	bl	8002fc4 <I2C_ITSlaveCplt>
 8003510:	e7a5      	b.n	800345e <I2C_Slave_ISR_DMA+0x32>
  __HAL_LOCK(hi2c);
 8003512:	2002      	movs	r0, #2
 8003514:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003516:	6823      	ldr	r3, [r4, #0]
 8003518:	2210      	movs	r2, #16
 800351a:	61da      	str	r2, [r3, #28]
 800351c:	e79f      	b.n	800345e <I2C_Slave_ISR_DMA+0x32>
      if (hi2c->hdmatx != NULL)
 800351e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003520:	b11b      	cbz	r3, 800352a <I2C_Slave_ISR_DMA+0xfe>
        if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0ad      	beq.n	8003486 <I2C_Slave_ISR_DMA+0x5a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800352a:	6823      	ldr	r3, [r4, #0]
 800352c:	2210      	movs	r2, #16
 800352e:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003530:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003532:	f043 0304 	orr.w	r3, r3, #4
 8003536:	6463      	str	r3, [r4, #68]	; 0x44
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003538:	f035 7380 	bics.w	r3, r5, #16777216	; 0x1000000
 800353c:	d18f      	bne.n	800345e <I2C_Slave_ISR_DMA+0x32>
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800353e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003540:	4620      	mov	r0, r4
 8003542:	f7ff fcb5 	bl	8002eb0 <I2C_ITError>
 8003546:	e78a      	b.n	800345e <I2C_Slave_ISR_DMA+0x32>
 8003548:	4620      	mov	r0, r4
 800354a:	f7ff fc6b 	bl	8002e24 <I2C_ITAddrCplt.isra.8.part.9>
 800354e:	e786      	b.n	800345e <I2C_Slave_ISR_DMA+0x32>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003550:	f1b5 7f00 	cmp.w	r5, #33554432	; 0x2000000
 8003554:	d19b      	bne.n	800348e <I2C_Slave_ISR_DMA+0x62>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003556:	4b24      	ldr	r3, [pc, #144]	; (80035e8 <I2C_Slave_ISR_DMA+0x1bc>)
 8003558:	62e3      	str	r3, [r4, #44]	; 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 800355a:	2220      	movs	r2, #32
  hi2c->PreviousState = I2C_STATE_NONE;
 800355c:	2300      	movs	r3, #0
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800355e:	0748      	lsls	r0, r1, #29
  hi2c->PreviousState = I2C_STATE_NONE;
 8003560:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->XferISR = NULL;
 8003562:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 8003564:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003568:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800356c:	d512      	bpl.n	8003594 <I2C_Slave_ISR_DMA+0x168>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800356e:	6822      	ldr	r2, [r4, #0]
 8003570:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003572:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003574:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003576:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8003578:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 800357a:	3301      	adds	r3, #1
 800357c:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800357e:	b14a      	cbz	r2, 8003594 <I2C_Slave_ISR_DMA+0x168>
      hi2c->XferCount--;
 8003580:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003582:	3b01      	subs	r3, #1
 8003584:	b29b      	uxth	r3, r3
 8003586:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003588:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->XferSize--;
 800358a:	3a01      	subs	r2, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800358c:	f043 0304 	orr.w	r3, r3, #4
      hi2c->XferSize--;
 8003590:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003592:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003594:	6823      	ldr	r3, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003596:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800359a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800359e:	681a      	ldr	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035a0:	2510      	movs	r5, #16
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80035a2:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
  __HAL_UNLOCK(hi2c);
 80035a6:	2100      	movs	r1, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80035a8:	601a      	str	r2, [r3, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 80035aa:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035ac:	61dd      	str	r5, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80035ae:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 80035b2:	f7ff fc73 	bl	8002e9c <HAL_I2C_ListenCpltCallback>
 80035b6:	e752      	b.n	800345e <I2C_Slave_ISR_DMA+0x32>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80035b8:	2028      	movs	r0, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80035ba:	2121      	movs	r1, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80035bc:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80035c0:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80035c2:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80035c6:	6818      	ldr	r0, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80035c8:	f001 0128 	and.w	r1, r1, #40	; 0x28
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80035cc:	2928      	cmp	r1, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80035ce:	bf14      	ite	ne
 80035d0:	f06f 01f2 	mvnne.w	r1, #242	; 0xf2
 80035d4:	f06f 0142 	mvneq.w	r1, #66	; 0x42
 80035d8:	4001      	ands	r1, r0
 80035da:	6019      	str	r1, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80035dc:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80035de:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80035e2:	f7ff fc19 	bl	8002e18 <HAL_I2C_SlaveTxCpltCallback>
 80035e6:	e73a      	b.n	800345e <I2C_Slave_ISR_DMA+0x32>
 80035e8:	ffff0000 	.word	0xffff0000

080035ec <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80035ec:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80035ee:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  hi2c->hdmarx->XferAbortCallback = NULL;
 80035f2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
{
 80035f4:	b510      	push	{r4, lr}
  hi2c->hdmatx->XferAbortCallback = NULL;
 80035f6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80035f8:	2300      	movs	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80035fa:	2a60      	cmp	r2, #96	; 0x60
  hi2c->hdmatx->XferAbortCallback = NULL;
 80035fc:	63a3      	str	r3, [r4, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 80035fe:	638b      	str	r3, [r1, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003600:	d002      	beq.n	8003608 <I2C_DMAAbort+0x1c>
    HAL_I2C_ErrorCallback(hi2c);
 8003602:	f7ff fc51 	bl	8002ea8 <HAL_I2C_ErrorCallback>
 8003606:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8003608:	2320      	movs	r3, #32
 800360a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 800360e:	f7ff fc4d 	bl	8002eac <HAL_I2C_AbortCpltCallback>
 8003612:	bd10      	pop	{r4, pc}

08003614 <I2C_ITMasterCplt>:
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003614:	6803      	ldr	r3, [r0, #0]
 8003616:	2220      	movs	r2, #32
{
 8003618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800361c:	61da      	str	r2, [r3, #28]
  I2C_RESET_CR2(hi2c);
 800361e:	685a      	ldr	r2, [r3, #4]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003620:	4d78      	ldr	r5, [pc, #480]	; (8003804 <I2C_ITMasterCplt+0x1f0>)
{
 8003622:	4604      	mov	r4, r0
  I2C_RESET_CR2(hi2c);
 8003624:	4878      	ldr	r0, [pc, #480]	; (8003808 <I2C_ITMasterCplt+0x1f4>)
 8003626:	4002      	ands	r2, r0
  hi2c->PreviousState = I2C_STATE_NONE;
 8003628:	2000      	movs	r0, #0
  I2C_RESET_CR2(hi2c);
 800362a:	605a      	str	r2, [r3, #4]
  hi2c->PreviousState = I2C_STATE_NONE;
 800362c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->XferISR       = NULL;
 800362e:	6360      	str	r0, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 8003630:	06c8      	lsls	r0, r1, #27
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003632:	62e5      	str	r5, [r4, #44]	; 0x2c
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 8003634:	d505      	bpl.n	8003642 <I2C_ITMasterCplt+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003636:	2210      	movs	r2, #16
 8003638:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800363a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800363c:	f042 0204 	orr.w	r2, r2, #4
 8003640:	6462      	str	r2, [r4, #68]	; 0x44
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003642:	699a      	ldr	r2, [r3, #24]
 8003644:	0791      	lsls	r1, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8003646:	bf44      	itt	mi
 8003648:	2200      	movmi	r2, #0
 800364a:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800364c:	699a      	ldr	r2, [r3, #24]
 800364e:	07d2      	lsls	r2, r2, #31
 8003650:	d403      	bmi.n	800365a <I2C_ITMasterCplt+0x46>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003652:	699a      	ldr	r2, [r3, #24]
 8003654:	f042 0201 	orr.w	r2, r2, #1
 8003658:	619a      	str	r2, [r3, #24]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800365a:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800365e:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003662:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003664:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8003668:	2928      	cmp	r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800366a:	f000 0028 	and.w	r0, r0, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800366e:	bf14      	ite	ne
 8003670:	f06f 01f6 	mvnne.w	r1, #246	; 0xf6
 8003674:	f06f 0146 	mvneq.w	r1, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003678:	2828      	cmp	r0, #40	; 0x28
 800367a:	bf18      	it	ne
 800367c:	f06f 01f6 	mvnne.w	r1, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003680:	400a      	ands	r2, r1
 8003682:	601a      	str	r2, [r3, #0]
  tmperror = hi2c->ErrorCode;
 8003684:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003686:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 800368a:	2960      	cmp	r1, #96	; 0x60
 800368c:	d00b      	beq.n	80036a6 <I2C_ITMasterCplt+0x92>
 800368e:	b952      	cbnz	r2, 80036a6 <I2C_ITMasterCplt+0x92>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003690:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003694:	2b21      	cmp	r3, #33	; 0x21
 8003696:	d077      	beq.n	8003788 <I2C_ITMasterCplt+0x174>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003698:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800369c:	2b22      	cmp	r3, #34	; 0x22
 800369e:	f000 808e 	beq.w	80037be <I2C_ITMasterCplt+0x1aa>
 80036a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80036a6:	2000      	movs	r0, #0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80036a8:	4d56      	ldr	r5, [pc, #344]	; (8003804 <I2C_ITMasterCplt+0x1f0>)
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80036aa:	6c61      	ldr	r1, [r4, #68]	; 0x44
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80036ac:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80036b0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80036b4:	62e5      	str	r5, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80036b6:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 80036b8:	6c65      	ldr	r5, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80036ba:	3a28      	subs	r2, #40	; 0x28
  hi2c->ErrorCode |= ErrorCode;
 80036bc:	4329      	orrs	r1, r5
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80036be:	2a02      	cmp	r2, #2
  hi2c->ErrorCode |= ErrorCode;
 80036c0:	6461      	str	r1, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80036c2:	d833      	bhi.n	800372c <I2C_ITMasterCplt+0x118>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80036c4:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80036c8:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80036cc:	681f      	ldr	r7, [r3, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80036ce:	4e4f      	ldr	r6, [pc, #316]	; (800380c <I2C_ITMasterCplt+0x1f8>)
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80036d0:	f005 0528 	and.w	r5, r5, #40	; 0x28
 80036d4:	2d28      	cmp	r5, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80036d6:	f001 0128 	and.w	r1, r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80036da:	bf14      	ite	ne
 80036dc:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
 80036e0:	f06f 0246 	mvneq.w	r2, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80036e4:	2928      	cmp	r1, #40	; 0x28
 80036e6:	bf18      	it	ne
 80036e8:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80036ec:	403a      	ands	r2, r7
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80036ee:	2128      	movs	r1, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80036f0:	601a      	str	r2, [r3, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80036f2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80036f6:	6320      	str	r0, [r4, #48]	; 0x30
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80036f8:	681a      	ldr	r2, [r3, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80036fa:	6366      	str	r6, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80036fc:	f412 4280 	ands.w	r2, r2, #16384	; 0x4000
 8003700:	d02a      	beq.n	8003758 <I2C_ITMasterCplt+0x144>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003702:	681a      	ldr	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8003704:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003706:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800370a:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 800370c:	2800      	cmp	r0, #0
 800370e:	d0c8      	beq.n	80036a2 <I2C_ITMasterCplt+0x8e>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003710:	4b3f      	ldr	r3, [pc, #252]	; (8003810 <I2C_ITMasterCplt+0x1fc>)
 8003712:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8003714:	2300      	movs	r3, #0
 8003716:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800371a:	f7fe fb91 	bl	8001e40 <HAL_DMA_Abort_IT>
 800371e:	2800      	cmp	r0, #0
 8003720:	d0bf      	beq.n	80036a2 <I2C_ITMasterCplt+0x8e>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003722:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 8003724:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003728:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800372a:	4718      	bx	r3
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800372c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003730:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
 800373a:	601a      	str	r2, [r3, #0]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800373c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8003740:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 8003742:	bf1c      	itt	ne
 8003744:	2220      	movne	r2, #32
 8003746:	f884 2041 	strbne.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800374a:	2200      	movs	r2, #0
 800374c:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800374e:	6362      	str	r2, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	f412 4280 	ands.w	r2, r2, #16384	; 0x4000
 8003756:	d1d4      	bne.n	8003702 <I2C_ITMasterCplt+0xee>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003758:	6819      	ldr	r1, [r3, #0]
 800375a:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
 800375e:	d023      	beq.n	80037a8 <I2C_ITMasterCplt+0x194>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003760:	6819      	ldr	r1, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8003762:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003764:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8003768:	6019      	str	r1, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800376a:	2800      	cmp	r0, #0
 800376c:	d099      	beq.n	80036a2 <I2C_ITMasterCplt+0x8e>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800376e:	4b28      	ldr	r3, [pc, #160]	; (8003810 <I2C_ITMasterCplt+0x1fc>)
 8003770:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8003772:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003776:	f7fe fb63 	bl	8001e40 <HAL_DMA_Abort_IT>
 800377a:	2800      	cmp	r0, #0
 800377c:	d091      	beq.n	80036a2 <I2C_ITMasterCplt+0x8e>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800377e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8003780:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003784:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003786:	4718      	bx	r3
    hi2c->State = HAL_I2C_STATE_READY;
 8003788:	2320      	movs	r3, #32
 800378a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800378e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003792:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003796:	2b40      	cmp	r3, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003798:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      HAL_I2C_MemTxCpltCallback(hi2c);
 800379c:	4620      	mov	r0, r4
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800379e:	d01e      	beq.n	80037de <I2C_ITMasterCplt+0x1ca>
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80037a0:	f7ff fb36 	bl	8002e10 <HAL_I2C_MasterTxCpltCallback>
 80037a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80037a8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80037ac:	2b60      	cmp	r3, #96	; 0x60
 80037ae:	d01e      	beq.n	80037ee <I2C_ITMasterCplt+0x1da>
    __HAL_UNLOCK(hi2c);
 80037b0:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80037b4:	4620      	mov	r0, r4
 80037b6:	f7ff fb77 	bl	8002ea8 <HAL_I2C_ErrorCallback>
 80037ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80037be:	2320      	movs	r3, #32
 80037c0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037c4:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80037c8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037cc:	2b40      	cmp	r3, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ce:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      HAL_I2C_MemRxCpltCallback(hi2c);
 80037d2:	4620      	mov	r0, r4
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037d4:	d007      	beq.n	80037e6 <I2C_ITMasterCplt+0x1d2>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80037d6:	f7ff fb1d 	bl	8002e14 <HAL_I2C_MasterRxCpltCallback>
 80037da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      HAL_I2C_MemTxCpltCallback(hi2c);
 80037de:	f7ff fb5f 	bl	8002ea0 <HAL_I2C_MemTxCpltCallback>
 80037e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      HAL_I2C_MemRxCpltCallback(hi2c);
 80037e6:	f7ff fb5d 	bl	8002ea4 <HAL_I2C_MemRxCpltCallback>
 80037ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80037ee:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 80037f0:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80037f4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 80037f8:	4620      	mov	r0, r4
 80037fa:	f7ff fb57 	bl	8002eac <HAL_I2C_AbortCpltCallback>
 80037fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003802:	bf00      	nop
 8003804:	ffff0000 	.word	0xffff0000
 8003808:	fe00e800 	.word	0xfe00e800
 800380c:	0800311d 	.word	0x0800311d
 8003810:	080035ed 	.word	0x080035ed

08003814 <I2C_Master_ISR_IT>:
{
 8003814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8003816:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800381a:	2b01      	cmp	r3, #1
 800381c:	d068      	beq.n	80038f0 <I2C_Master_ISR_IT+0xdc>
 800381e:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003820:	06cf      	lsls	r7, r1, #27
 8003822:	4616      	mov	r6, r2
 8003824:	460d      	mov	r5, r1
 8003826:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 8003828:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800382c:	d412      	bmi.n	8003854 <I2C_Master_ISR_IT+0x40>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800382e:	076f      	lsls	r7, r5, #29
 8003830:	d526      	bpl.n	8003880 <I2C_Master_ISR_IT+0x6c>
 8003832:	0770      	lsls	r0, r6, #29
 8003834:	d524      	bpl.n	8003880 <I2C_Master_ISR_IT+0x6c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003836:	6822      	ldr	r2, [r4, #0]
 8003838:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800383a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800383c:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 800383e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003840:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hi2c->XferSize--;
 8003842:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->XferCount--;
 8003844:	3b01      	subs	r3, #1
 8003846:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8003848:	3101      	adds	r1, #1
    hi2c->XferSize--;
 800384a:	3a01      	subs	r2, #1
    hi2c->XferCount--;
 800384c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 800384e:	6261      	str	r1, [r4, #36]	; 0x24
    hi2c->XferSize--;
 8003850:	8522      	strh	r2, [r4, #40]	; 0x28
 8003852:	e026      	b.n	80038a2 <I2C_Master_ISR_IT+0x8e>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003854:	06d0      	lsls	r0, r2, #27
 8003856:	d5ea      	bpl.n	800382e <I2C_Master_ISR_IT+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003858:	6823      	ldr	r3, [r4, #0]
 800385a:	2210      	movs	r2, #16
 800385c:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800385e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003860:	f042 0204 	orr.w	r2, r2, #4
 8003864:	6462      	str	r2, [r4, #68]	; 0x44
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003866:	699a      	ldr	r2, [r3, #24]
 8003868:	0791      	lsls	r1, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 800386a:	bf44      	itt	mi
 800386c:	2200      	movmi	r2, #0
 800386e:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003870:	699a      	ldr	r2, [r3, #24]
 8003872:	07d2      	lsls	r2, r2, #31
 8003874:	d415      	bmi.n	80038a2 <I2C_Master_ISR_IT+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003876:	699a      	ldr	r2, [r3, #24]
 8003878:	f042 0201 	orr.w	r2, r2, #1
 800387c:	619a      	str	r2, [r3, #24]
 800387e:	e010      	b.n	80038a2 <I2C_Master_ISR_IT+0x8e>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003880:	07a9      	lsls	r1, r5, #30
 8003882:	d516      	bpl.n	80038b2 <I2C_Master_ISR_IT+0x9e>
 8003884:	07b2      	lsls	r2, r6, #30
 8003886:	d514      	bpl.n	80038b2 <I2C_Master_ISR_IT+0x9e>
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003888:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800388a:	6823      	ldr	r3, [r4, #0]
 800388c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003890:	629a      	str	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8003892:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize--;
 8003894:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 8003896:	6261      	str	r1, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003898:	3b01      	subs	r3, #1
 800389a:	b29b      	uxth	r3, r3
    hi2c->XferSize--;
 800389c:	3a01      	subs	r2, #1
    hi2c->XferCount--;
 800389e:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize--;
 80038a0:	8522      	strh	r2, [r4, #40]	; 0x28
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80038a2:	06aa      	lsls	r2, r5, #26
 80038a4:	d501      	bpl.n	80038aa <I2C_Master_ISR_IT+0x96>
 80038a6:	06b3      	lsls	r3, r6, #26
 80038a8:	d43a      	bmi.n	8003920 <I2C_Master_ISR_IT+0x10c>
  __HAL_UNLOCK(hi2c);
 80038aa:	2000      	movs	r0, #0
 80038ac:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
 80038b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80038b2:	062b      	lsls	r3, r5, #24
 80038b4:	d51e      	bpl.n	80038f4 <I2C_Master_ISR_IT+0xe0>
 80038b6:	0677      	lsls	r7, r6, #25
 80038b8:	d5f3      	bpl.n	80038a2 <I2C_Master_ISR_IT+0x8e>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80038bc:	b29b      	uxth	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d033      	beq.n	800392a <I2C_Master_ISR_IT+0x116>
 80038c2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d130      	bne.n	800392a <I2C_Master_ISR_IT+0x116>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80038c8:	6822      	ldr	r2, [r4, #0]
 80038ca:	6851      	ldr	r1, [r2, #4]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038cc:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80038ce:	b280      	uxth	r0, r0
 80038d0:	28ff      	cmp	r0, #255	; 0xff
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80038d2:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038d6:	d972      	bls.n	80039be <I2C_Master_ISR_IT+0x1aa>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80038d8:	6853      	ldr	r3, [r2, #4]
 80038da:	485c      	ldr	r0, [pc, #368]	; (8003a4c <I2C_Master_ISR_IT+0x238>)
 80038dc:	4003      	ands	r3, r0
 80038de:	f043 73ff 	orr.w	r3, r3, #33423360	; 0x1fe0000
 80038e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e6:	430b      	orrs	r3, r1
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80038e8:	21ff      	movs	r1, #255	; 0xff
 80038ea:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80038ec:	6053      	str	r3, [r2, #4]
 80038ee:	e7d8      	b.n	80038a2 <I2C_Master_ISR_IT+0x8e>
  __HAL_LOCK(hi2c);
 80038f0:	2002      	movs	r0, #2
}
 80038f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80038f4:	0668      	lsls	r0, r5, #25
 80038f6:	d5d4      	bpl.n	80038a2 <I2C_Master_ISR_IT+0x8e>
 80038f8:	0671      	lsls	r1, r6, #25
 80038fa:	d5d2      	bpl.n	80038a2 <I2C_Master_ISR_IT+0x8e>
    if (hi2c->XferCount == 0U)
 80038fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80038fe:	b29b      	uxth	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	d137      	bne.n	8003974 <I2C_Master_ISR_IT+0x160>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003904:	6822      	ldr	r2, [r4, #0]
 8003906:	6853      	ldr	r3, [r2, #4]
 8003908:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 800390c:	d1c9      	bne.n	80038a2 <I2C_Master_ISR_IT+0x8e>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800390e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003910:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8003914:	d133      	bne.n	800397e <I2C_Master_ISR_IT+0x16a>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003916:	6853      	ldr	r3, [r2, #4]
 8003918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800391c:	6053      	str	r3, [r2, #4]
 800391e:	e7c0      	b.n	80038a2 <I2C_Master_ISR_IT+0x8e>
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003920:	4629      	mov	r1, r5
 8003922:	4620      	mov	r0, r4
 8003924:	f7ff fe76 	bl	8003614 <I2C_ITMasterCplt>
 8003928:	e7bf      	b.n	80038aa <I2C_Master_ISR_IT+0x96>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800392a:	6822      	ldr	r2, [r4, #0]
 800392c:	6853      	ldr	r3, [r2, #4]
 800392e:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8003932:	d11f      	bne.n	8003974 <I2C_Master_ISR_IT+0x160>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003934:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003938:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 800393c:	2921      	cmp	r1, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_READY;
 800393e:	f04f 0020 	mov.w	r0, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003942:	d050      	beq.n	80039e6 <I2C_Master_ISR_IT+0x1d2>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003944:	2112      	movs	r1, #18
    hi2c->State         = HAL_I2C_STATE_READY;
 8003946:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800394a:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800394c:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003950:	6817      	ldr	r7, [r2, #0]
    hi2c->XferISR       = NULL;
 8003952:	6363      	str	r3, [r4, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003954:	f000 0028 	and.w	r0, r0, #40	; 0x28
 8003958:	2828      	cmp	r0, #40	; 0x28
 800395a:	bf14      	ite	ne
 800395c:	f06f 01f4 	mvnne.w	r1, #244	; 0xf4
 8003960:	f06f 0144 	mvneq.w	r1, #68	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003964:	4039      	ands	r1, r7
 8003966:	6011      	str	r1, [r2, #0]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003968:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 800396a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800396e:	f7ff fa51 	bl	8002e14 <HAL_I2C_MasterRxCpltCallback>
 8003972:	e796      	b.n	80038a2 <I2C_Master_ISR_IT+0x8e>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003974:	2140      	movs	r1, #64	; 0x40
 8003976:	4620      	mov	r0, r4
 8003978:	f7ff fa9a 	bl	8002eb0 <I2C_ITError>
 800397c:	e791      	b.n	80038a2 <I2C_Master_ISR_IT+0x8e>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800397e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003982:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8003986:	2921      	cmp	r1, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_READY;
 8003988:	f04f 0020 	mov.w	r0, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800398c:	d04f      	beq.n	8003a2e <I2C_Master_ISR_IT+0x21a>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800398e:	2112      	movs	r1, #18
    hi2c->State         = HAL_I2C_STATE_READY;
 8003990:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003994:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003996:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800399a:	6810      	ldr	r0, [r2, #0]
    hi2c->XferISR       = NULL;
 800399c:	6363      	str	r3, [r4, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800399e:	f001 0128 	and.w	r1, r1, #40	; 0x28
 80039a2:	2928      	cmp	r1, #40	; 0x28
 80039a4:	bf14      	ite	ne
 80039a6:	f06f 01f4 	mvnne.w	r1, #244	; 0xf4
 80039aa:	f06f 0144 	mvneq.w	r1, #68	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80039ae:	4001      	ands	r1, r0
 80039b0:	6011      	str	r1, [r2, #0]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80039b2:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80039b4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80039b8:	f7ff fa2c 	bl	8002e14 <HAL_I2C_MasterRxCpltCallback>
 80039bc:	e771      	b.n	80038a2 <I2C_Master_ISR_IT+0x8e>
        hi2c->XferSize = hi2c->XferCount;
 80039be:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80039c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
 80039c2:	b280      	uxth	r0, r0
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80039c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
        hi2c->XferSize = hi2c->XferCount;
 80039c8:	8520      	strh	r0, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80039ca:	d025      	beq.n	8003a18 <I2C_Master_ISR_IT+0x204>
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 80039cc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80039ce:	f8df e07c 	ldr.w	lr, [pc, #124]	; 8003a4c <I2C_Master_ISR_IT+0x238>
 80039d2:	6853      	ldr	r3, [r2, #4]
 80039d4:	ea03 030e 	and.w	r3, r3, lr
 80039d8:	433b      	orrs	r3, r7
 80039da:	b2c0      	uxtb	r0, r0
 80039dc:	430b      	orrs	r3, r1
 80039de:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80039e2:	6053      	str	r3, [r2, #4]
 80039e4:	e75d      	b.n	80038a2 <I2C_Master_ISR_IT+0x8e>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80039e6:	2111      	movs	r1, #17
    hi2c->State         = HAL_I2C_STATE_READY;
 80039e8:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80039ec:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80039ee:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80039f2:	6810      	ldr	r0, [r2, #0]
    hi2c->XferISR       = NULL;
 80039f4:	6363      	str	r3, [r4, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80039f6:	f001 0128 	and.w	r1, r1, #40	; 0x28
 80039fa:	2928      	cmp	r1, #40	; 0x28
 80039fc:	bf18      	it	ne
 80039fe:	f06f 01f2 	mvnne.w	r1, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003a02:	bf08      	it	eq
 8003a04:	f06f 0142 	mvneq.w	r1, #66	; 0x42
 8003a08:	4001      	ands	r1, r0
 8003a0a:	6011      	str	r1, [r2, #0]
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a0c:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8003a0e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a12:	f7ff f9fd 	bl	8002e10 <HAL_I2C_MasterTxCpltCallback>
 8003a16:	e744      	b.n	80038a2 <I2C_Master_ISR_IT+0x8e>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003a18:	6853      	ldr	r3, [r2, #4]
 8003a1a:	4f0c      	ldr	r7, [pc, #48]	; (8003a4c <I2C_Master_ISR_IT+0x238>)
 8003a1c:	403b      	ands	r3, r7
 8003a1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a22:	b2c0      	uxtb	r0, r0
 8003a24:	430b      	orrs	r3, r1
 8003a26:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8003a2a:	6050      	str	r0, [r2, #4]
 8003a2c:	e739      	b.n	80038a2 <I2C_Master_ISR_IT+0x8e>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a2e:	2111      	movs	r1, #17
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a30:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a34:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a36:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003a3a:	6810      	ldr	r0, [r2, #0]
    hi2c->XferISR       = NULL;
 8003a3c:	6363      	str	r3, [r4, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a3e:	f001 0128 	and.w	r1, r1, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003a42:	2928      	cmp	r1, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003a44:	bf18      	it	ne
 8003a46:	f06f 01f2 	mvnne.w	r1, #242	; 0xf2
 8003a4a:	e7da      	b.n	8003a02 <I2C_Master_ISR_IT+0x1ee>
 8003a4c:	fc009c00 	.word	0xfc009c00

08003a50 <I2C_Master_ISR_DMA>:
{
 8003a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8003a52:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d06d      	beq.n	8003b36 <I2C_Master_ISR_DMA+0xe6>
 8003a5a:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003a5c:	06cd      	lsls	r5, r1, #27
 8003a5e:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 8003a60:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003a64:	d43b      	bmi.n	8003ade <I2C_Master_ISR_DMA+0x8e>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003a66:	060f      	lsls	r7, r1, #24
 8003a68:	d55b      	bpl.n	8003b22 <I2C_Master_ISR_DMA+0xd2>
 8003a6a:	0656      	lsls	r6, r2, #25
 8003a6c:	d55b      	bpl.n	8003b26 <I2C_Master_ISR_DMA+0xd6>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003a6e:	6823      	ldr	r3, [r4, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a76:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003a78:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003a7a:	b292      	uxth	r2, r2
 8003a7c:	2a00      	cmp	r2, #0
 8003a7e:	d06f      	beq.n	8003b60 <I2C_Master_ISR_DMA+0x110>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003a80:	685d      	ldr	r5, [r3, #4]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a82:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8003a84:	b289      	uxth	r1, r1
 8003a86:	29ff      	cmp	r1, #255	; 0xff
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003a88:	f3c5 0509 	ubfx	r5, r5, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a8c:	f200 8091 	bhi.w	8003bb2 <I2C_Master_ISR_DMA+0x162>
        hi2c->XferSize = hi2c->XferCount;
 8003a90:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003a92:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
 8003a94:	b290      	uxth	r0, r2
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003a96:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
          xfermode = hi2c->XferOptions;
 8003a9a:	bf18      	it	ne
 8003a9c:	6ae7      	ldrne	r7, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
 8003a9e:	8520      	strh	r0, [r4, #40]	; 0x28
 8003aa0:	b2c1      	uxtb	r1, r0
 8003aa2:	bf06      	itte	eq
 8003aa4:	0409      	lsleq	r1, r1, #16
          xfermode = I2C_AUTOEND_MODE;
 8003aa6:	f04f 7700 	moveq.w	r7, #33554432	; 0x2000000
 8003aaa:	0409      	lslne	r1, r1, #16
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	4e6e      	ldr	r6, [pc, #440]	; (8003c68 <I2C_Master_ISR_DMA+0x218>)
 8003ab0:	4032      	ands	r2, r6
 8003ab2:	432a      	orrs	r2, r5
 8003ab4:	433a      	orrs	r2, r7
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	605a      	str	r2, [r3, #4]
      hi2c->XferCount -= hi2c->XferSize;
 8003aba:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003abc:	1a12      	subs	r2, r2, r0
 8003abe:	b292      	uxth	r2, r2
 8003ac0:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ac2:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8003ac6:	2a22      	cmp	r2, #34	; 0x22
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	bf0c      	ite	eq
 8003acc:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003ad0:	f442 4280 	orrne.w	r2, r2, #16384	; 0x4000
 8003ad4:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hi2c);
 8003ad6:	2000      	movs	r0, #0
 8003ad8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
 8003adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003ade:	06d0      	lsls	r0, r2, #27
 8003ae0:	d5c1      	bpl.n	8003a66 <I2C_Master_ISR_DMA+0x16>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ae2:	6823      	ldr	r3, [r4, #0]
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003ae4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003ae6:	4861      	ldr	r0, [pc, #388]	; (8003c6c <I2C_Master_ISR_DMA+0x21c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ae8:	2110      	movs	r1, #16
 8003aea:	61d9      	str	r1, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003aec:	6c61      	ldr	r1, [r4, #68]	; 0x44
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003aee:	4282      	cmp	r2, r0
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003af0:	f041 0104 	orr.w	r1, r1, #4
 8003af4:	6461      	str	r1, [r4, #68]	; 0x44
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003af6:	d064      	beq.n	8003bc2 <I2C_Master_ISR_DMA+0x172>
 8003af8:	495d      	ldr	r1, [pc, #372]	; (8003c70 <I2C_Master_ISR_DMA+0x220>)
      tmpisr |= I2C_IT_TCI;
 8003afa:	428a      	cmp	r2, r1
 8003afc:	bf14      	ite	ne
 8003afe:	22f4      	movne	r2, #244	; 0xf4
 8003b00:	2260      	moveq	r2, #96	; 0x60
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003b02:	6819      	ldr	r1, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	601a      	str	r2, [r3, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b08:	699a      	ldr	r2, [r3, #24]
 8003b0a:	0791      	lsls	r1, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8003b0c:	bf44      	itt	mi
 8003b0e:	2200      	movmi	r2, #0
 8003b10:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b12:	699a      	ldr	r2, [r3, #24]
 8003b14:	07d2      	lsls	r2, r2, #31
 8003b16:	d4de      	bmi.n	8003ad6 <I2C_Master_ISR_DMA+0x86>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b18:	699a      	ldr	r2, [r3, #24]
 8003b1a:	f042 0201 	orr.w	r2, r2, #1
 8003b1e:	619a      	str	r2, [r3, #24]
 8003b20:	e7d9      	b.n	8003ad6 <I2C_Master_ISR_DMA+0x86>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003b22:	064d      	lsls	r5, r1, #25
 8003b24:	d409      	bmi.n	8003b3a <I2C_Master_ISR_DMA+0xea>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003b26:	068b      	lsls	r3, r1, #26
 8003b28:	d5d5      	bpl.n	8003ad6 <I2C_Master_ISR_DMA+0x86>
 8003b2a:	0692      	lsls	r2, r2, #26
 8003b2c:	d5d3      	bpl.n	8003ad6 <I2C_Master_ISR_DMA+0x86>
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003b2e:	4620      	mov	r0, r4
 8003b30:	f7ff fd70 	bl	8003614 <I2C_ITMasterCplt>
 8003b34:	e7cf      	b.n	8003ad6 <I2C_Master_ISR_DMA+0x86>
  __HAL_LOCK(hi2c);
 8003b36:	2002      	movs	r0, #2
 8003b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003b3a:	0650      	lsls	r0, r2, #25
 8003b3c:	d5f3      	bpl.n	8003b26 <I2C_Master_ISR_DMA+0xd6>
    if (hi2c->XferCount == 0U)
 8003b3e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	bb8b      	cbnz	r3, 8003ba8 <I2C_Master_ISR_DMA+0x158>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003b44:	6822      	ldr	r2, [r4, #0]
 8003b46:	6853      	ldr	r3, [r2, #4]
 8003b48:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8003b4c:	d1c3      	bne.n	8003ad6 <I2C_Master_ISR_DMA+0x86>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003b4e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003b50:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8003b54:	d137      	bne.n	8003bc6 <I2C_Master_ISR_DMA+0x176>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b56:	6853      	ldr	r3, [r2, #4]
 8003b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b5c:	6053      	str	r3, [r2, #4]
 8003b5e:	e7ba      	b.n	8003ad6 <I2C_Master_ISR_DMA+0x86>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	f012 7200 	ands.w	r2, r2, #33554432	; 0x2000000
 8003b66:	d11f      	bne.n	8003ba8 <I2C_Master_ISR_DMA+0x158>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b68:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b6c:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8003b70:	2921      	cmp	r1, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b72:	f04f 0020 	mov.w	r0, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b76:	d046      	beq.n	8003c06 <I2C_Master_ISR_DMA+0x1b6>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b78:	2112      	movs	r1, #18
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b7a:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b7e:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b80:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003b84:	6819      	ldr	r1, [r3, #0]
    hi2c->XferISR       = NULL;
 8003b86:	6362      	str	r2, [r4, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b88:	f000 0028 	and.w	r0, r0, #40	; 0x28
 8003b8c:	2828      	cmp	r0, #40	; 0x28
 8003b8e:	bf14      	ite	ne
 8003b90:	f06f 00f4 	mvnne.w	r0, #244	; 0xf4
 8003b94:	f06f 0044 	mvneq.w	r0, #68	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003b98:	4001      	ands	r1, r0
 8003b9a:	6019      	str	r1, [r3, #0]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b9c:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8003b9e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ba2:	f7ff f937 	bl	8002e14 <HAL_I2C_MasterRxCpltCallback>
 8003ba6:	e796      	b.n	8003ad6 <I2C_Master_ISR_DMA+0x86>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003ba8:	2140      	movs	r1, #64	; 0x40
 8003baa:	4620      	mov	r0, r4
 8003bac:	f7ff f980 	bl	8002eb0 <I2C_ITError>
 8003bb0:	e791      	b.n	8003ad6 <I2C_Master_ISR_DMA+0x86>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bb2:	22ff      	movs	r2, #255	; 0xff
 8003bb4:	8522      	strh	r2, [r4, #40]	; 0x28
 8003bb6:	4610      	mov	r0, r2
 8003bb8:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
        xfermode = I2C_RELOAD_MODE;
 8003bbc:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 8003bc0:	e774      	b.n	8003aac <I2C_Master_ISR_DMA+0x5c>
      tmpisr |= I2C_IT_TCI;
 8003bc2:	2260      	movs	r2, #96	; 0x60
 8003bc4:	e79d      	b.n	8003b02 <I2C_Master_ISR_DMA+0xb2>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003bca:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8003bce:	2921      	cmp	r1, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_READY;
 8003bd0:	f04f 0020 	mov.w	r0, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003bd4:	d02f      	beq.n	8003c36 <I2C_Master_ISR_DMA+0x1e6>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003bd6:	2112      	movs	r1, #18
    hi2c->State         = HAL_I2C_STATE_READY;
 8003bd8:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003bdc:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003bde:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003be2:	6810      	ldr	r0, [r2, #0]
    hi2c->XferISR       = NULL;
 8003be4:	6363      	str	r3, [r4, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003be6:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8003bea:	2928      	cmp	r1, #40	; 0x28
 8003bec:	bf14      	ite	ne
 8003bee:	f06f 01f4 	mvnne.w	r1, #244	; 0xf4
 8003bf2:	f06f 0144 	mvneq.w	r1, #68	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003bf6:	4001      	ands	r1, r0
 8003bf8:	6011      	str	r1, [r2, #0]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003bfa:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8003bfc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c00:	f7ff f908 	bl	8002e14 <HAL_I2C_MasterRxCpltCallback>
 8003c04:	e767      	b.n	8003ad6 <I2C_Master_ISR_DMA+0x86>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c06:	2111      	movs	r1, #17
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c08:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c0c:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c0e:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003c12:	6819      	ldr	r1, [r3, #0]
    hi2c->XferISR       = NULL;
 8003c14:	6362      	str	r2, [r4, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c16:	f000 0028 	and.w	r0, r0, #40	; 0x28
 8003c1a:	2828      	cmp	r0, #40	; 0x28
 8003c1c:	bf14      	ite	ne
 8003c1e:	f06f 00f2 	mvnne.w	r0, #242	; 0xf2
 8003c22:	f06f 0042 	mvneq.w	r0, #66	; 0x42
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003c26:	4001      	ands	r1, r0
 8003c28:	6019      	str	r1, [r3, #0]
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c2a:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8003c2c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c30:	f7ff f8ee 	bl	8002e10 <HAL_I2C_MasterTxCpltCallback>
 8003c34:	e74f      	b.n	8003ad6 <I2C_Master_ISR_DMA+0x86>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c36:	2111      	movs	r1, #17
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c38:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c3c:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c3e:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003c42:	6810      	ldr	r0, [r2, #0]
    hi2c->XferISR       = NULL;
 8003c44:	6363      	str	r3, [r4, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c46:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8003c4a:	2928      	cmp	r1, #40	; 0x28
 8003c4c:	bf14      	ite	ne
 8003c4e:	f06f 01f2 	mvnne.w	r1, #242	; 0xf2
 8003c52:	f06f 0142 	mvneq.w	r1, #66	; 0x42
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003c56:	4001      	ands	r1, r0
 8003c58:	6011      	str	r1, [r2, #0]
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c5a:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8003c5c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c60:	f7ff f8d6 	bl	8002e10 <HAL_I2C_MasterTxCpltCallback>
 8003c64:	e737      	b.n	8003ad6 <I2C_Master_ISR_DMA+0x86>
 8003c66:	bf00      	nop
 8003c68:	fc009c00 	.word	0xfc009c00
 8003c6c:	08003a51 	.word	0x08003a51
 8003c70:	0800342d 	.word	0x0800342d

08003c74 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c74:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b20      	cmp	r3, #32
 8003c7c:	d001      	beq.n	8003c82 <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003c7e:	2002      	movs	r0, #2
 8003c80:	4770      	bx	lr
 8003c82:	4602      	mov	r2, r0
    __HAL_LOCK(hi2c);
 8003c84:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8003c88:	2801      	cmp	r0, #1
 8003c8a:	d0f8      	beq.n	8003c7e <HAL_I2CEx_ConfigAnalogFilter+0xa>
{
 8003c8c:	b410      	push	{r4}
    __HAL_I2C_DISABLE(hi2c);
 8003c8e:	6810      	ldr	r0, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c90:	2424      	movs	r4, #36	; 0x24
 8003c92:	f882 4041 	strb.w	r4, [r2, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8003c96:	6804      	ldr	r4, [r0, #0]
 8003c98:	f024 0401 	bic.w	r4, r4, #1
 8003c9c:	6004      	str	r4, [r0, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c9e:	6804      	ldr	r4, [r0, #0]
 8003ca0:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8003ca4:	6004      	str	r4, [r0, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ca6:	6804      	ldr	r4, [r0, #0]
 8003ca8:	4321      	orrs	r1, r4
 8003caa:	6001      	str	r1, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003cac:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 8003cae:	2400      	movs	r4, #0
    __HAL_I2C_ENABLE(hi2c);
 8003cb0:	f041 0101 	orr.w	r1, r1, #1
 8003cb4:	6001      	str	r1, [r0, #0]
    return HAL_OK;
 8003cb6:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8003cb8:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003cbc:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  }
}
 8003cc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop

08003cc8 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cc8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b20      	cmp	r3, #32
 8003cd0:	d001      	beq.n	8003cd6 <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003cd2:	2002      	movs	r0, #2
 8003cd4:	4770      	bx	lr
 8003cd6:	4602      	mov	r2, r0
    __HAL_LOCK(hi2c);
 8003cd8:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8003cdc:	2801      	cmp	r0, #1
 8003cde:	d0f8      	beq.n	8003cd2 <HAL_I2CEx_ConfigDigitalFilter+0xa>
{
 8003ce0:	b410      	push	{r4}
    __HAL_I2C_DISABLE(hi2c);
 8003ce2:	6810      	ldr	r0, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ce4:	2424      	movs	r4, #36	; 0x24
 8003ce6:	f882 4041 	strb.w	r4, [r2, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8003cea:	6804      	ldr	r4, [r0, #0]
 8003cec:	f024 0401 	bic.w	r4, r4, #1
 8003cf0:	6004      	str	r4, [r0, #0]
    tmpreg = hi2c->Instance->CR1;
 8003cf2:	6804      	ldr	r4, [r0, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8003cf4:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8003cf8:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8003cfc:	6001      	str	r1, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003cfe:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 8003d00:	2400      	movs	r4, #0
    __HAL_I2C_ENABLE(hi2c);
 8003d02:	f041 0101 	orr.w	r1, r1, #1
 8003d06:	6001      	str	r1, [r0, #0]
    return HAL_OK;
 8003d08:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8003d0a:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003d0e:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  }
}
 8003d12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d18:	4a02      	ldr	r2, [pc, #8]	; (8003d24 <HAL_PWR_EnableBkUpAccess+0xc>)
 8003d1a:	6813      	ldr	r3, [r2, #0]
 8003d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	4770      	bx	lr
 8003d24:	40007000 	.word	0x40007000

08003d28 <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d28:	4b07      	ldr	r3, [pc, #28]	; (8003d48 <HAL_PWREx_GetVoltageRange+0x20>)
 8003d2a:	6818      	ldr	r0, [r3, #0]
 8003d2c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003d30:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003d34:	d007      	beq.n	8003d46 <HAL_PWREx_GetVoltageRange+0x1e>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d3a:	f413 7f80 	tst.w	r3, #256	; 0x100
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003d3e:	bf14      	ite	ne
 8003d40:	f44f 7000 	movne.w	r0, #512	; 0x200
 8003d44:	2000      	moveq	r0, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003d46:	4770      	bx	lr
 8003d48:	40007000 	.word	0x40007000

08003d4c <HAL_PWREx_ControlVoltageScaling>:

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d4c:	4a3b      	ldr	r2, [pc, #236]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0xf0>)
{
 8003d4e:	b410      	push	{r4}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d50:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d52:	b968      	cbnz	r0, 8003d70 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d5c:	d014      	beq.n	8003d88 <HAL_PWREx_ControlVoltageScaling+0x3c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d5e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    }
  }
#endif

  return HAL_OK;
}
 8003d62:	f85d 4b04 	ldr.w	r4, [sp], #4
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d6a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8003d6e:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d70:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003d74:	d031      	beq.n	8003dda <HAL_PWREx_ControlVoltageScaling+0x8e>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d76:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d7e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003d80:	2000      	movs	r0, #0
}
 8003d82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d86:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d88:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003d8c:	4b2c      	ldr	r3, [pc, #176]	; (8003e40 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003d8e:	482d      	ldr	r0, [pc, #180]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d90:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003d94:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d98:	6811      	ldr	r1, [r2, #0]
 8003d9a:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8003d9e:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003da2:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003da4:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003da6:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003da8:	2332      	movs	r3, #50	; 0x32
 8003daa:	fb03 f304 	mul.w	r3, r3, r4
 8003dae:	fba0 0303 	umull	r0, r3, r0, r3
 8003db2:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003db4:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003db6:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dba:	d506      	bpl.n	8003dca <HAL_PWREx_ControlVoltageScaling+0x7e>
 8003dbc:	e000      	b.n	8003dc0 <HAL_PWREx_ControlVoltageScaling+0x74>
 8003dbe:	b123      	cbz	r3, 8003dca <HAL_PWREx_ControlVoltageScaling+0x7e>
 8003dc0:	6951      	ldr	r1, [r2, #20]
 8003dc2:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8003dc4:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dc8:	d4f9      	bmi.n	8003dbe <HAL_PWREx_ControlVoltageScaling+0x72>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dca:	4b1c      	ldr	r3, [pc, #112]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	055c      	lsls	r4, r3, #21
 8003dd0:	d5d6      	bpl.n	8003d80 <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 8003dd2:	2003      	movs	r0, #3
}
 8003dd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003dd8:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de2:	d007      	beq.n	8003df4 <HAL_PWREx_ControlVoltageScaling+0xa8>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003de4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8003de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 8003df0:	2000      	movs	r0, #0
 8003df2:	e7c6      	b.n	8003d82 <HAL_PWREx_ControlVoltageScaling+0x36>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003df4:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003df8:	4b11      	ldr	r3, [pc, #68]	; (8003e40 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003dfa:	4812      	ldr	r0, [pc, #72]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dfc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003e00:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e04:	6811      	ldr	r1, [r2, #0]
 8003e06:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8003e0a:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003e0e:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003e10:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e12:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003e14:	2332      	movs	r3, #50	; 0x32
 8003e16:	fb03 f304 	mul.w	r3, r3, r4
 8003e1a:	fba0 0303 	umull	r0, r3, r0, r3
 8003e1e:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e20:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003e22:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e26:	d5d0      	bpl.n	8003dca <HAL_PWREx_ControlVoltageScaling+0x7e>
 8003e28:	e001      	b.n	8003e2e <HAL_PWREx_ControlVoltageScaling+0xe2>
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0cd      	beq.n	8003dca <HAL_PWREx_ControlVoltageScaling+0x7e>
 8003e2e:	6951      	ldr	r1, [r2, #20]
 8003e30:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8003e32:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e36:	d5c8      	bpl.n	8003dca <HAL_PWREx_ControlVoltageScaling+0x7e>
 8003e38:	e7f7      	b.n	8003e2a <HAL_PWREx_ControlVoltageScaling+0xde>
 8003e3a:	bf00      	nop
 8003e3c:	40007000 	.word	0x40007000
 8003e40:	2000003c 	.word	0x2000003c
 8003e44:	431bde83 	.word	0x431bde83

08003e48 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t msirange = 0U, sysclockfreq = 0U;
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e48:	4a2c      	ldr	r2, [pc, #176]	; (8003efc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e4a:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e4c:	68d2      	ldr	r2, [r2, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e4e:	f013 030c 	ands.w	r3, r3, #12
 8003e52:	d008      	beq.n	8003e66 <HAL_RCC_GetSysClockFreq+0x1e>
 8003e54:	2b0c      	cmp	r3, #12
 8003e56:	d037      	beq.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e58:	2b04      	cmp	r3, #4
 8003e5a:	d033      	beq.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x7c>
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	4828      	ldr	r0, [pc, #160]	; (8003f00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e60:	bf18      	it	ne
 8003e62:	2000      	movne	r0, #0
 8003e64:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e66:	4a25      	ldr	r2, [pc, #148]	; (8003efc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e68:	6811      	ldr	r1, [r2, #0]
 8003e6a:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e6c:	bf54      	ite	pl
 8003e6e:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e72:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 8003e74:	4923      	ldr	r1, [pc, #140]	; (8003f04 <HAL_RCC_GetSysClockFreq+0xbc>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e76:	bf54      	ite	pl
 8003e78:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e7c:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8003e80:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e84:	b1fb      	cbz	r3, 8003ec6 <HAL_RCC_GetSysClockFreq+0x7e>
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e86:	2b0c      	cmp	r3, #12
 8003e88:	d136      	bne.n	8003ef8 <HAL_RCC_GetSysClockFreq+0xb0>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e8a:	491c      	ldr	r1, [pc, #112]	; (8003efc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e8c:	68ca      	ldr	r2, [r1, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e8e:	68cb      	ldr	r3, [r1, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e90:	f002 0203 	and.w	r2, r2, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e94:	f3c3 1303 	ubfx	r3, r3, #4, #4

    switch (pllsource)
 8003e98:	2a02      	cmp	r2, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e9a:	f103 0301 	add.w	r3, r3, #1
    switch (pllsource)
 8003e9e:	d022      	beq.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x9e>
 8003ea0:	2a03      	cmp	r2, #3
 8003ea2:	d017      	beq.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x8c>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      break;

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ea4:	fbb0 f0f3 	udiv	r0, r0, r3
 8003ea8:	68ca      	ldr	r2, [r1, #12]
 8003eaa:	f3c2 2306 	ubfx	r3, r2, #8, #7
 8003eae:	fb00 f003 	mul.w	r0, r0, r3
      break;
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003eb2:	4b12      	ldr	r3, [pc, #72]	; (8003efc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8003eba:	3301      	adds	r3, #1
 8003ebc:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8003ebe:	fbb0 f0f3 	udiv	r0, r0, r3
 8003ec2:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8003ec4:	4810      	ldr	r0, [pc, #64]	; (8003f08 <HAL_RCC_GetSysClockFreq+0xc0>)
  }

  return sysclockfreq;
}
 8003ec6:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ec8:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ecc:	2a01      	cmp	r2, #1
 8003ece:	d0ca      	beq.n	8003e66 <HAL_RCC_GetSysClockFreq+0x1e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ed0:	2000      	movs	r0, #0
 8003ed2:	e7da      	b.n	8003e8a <HAL_RCC_GetSysClockFreq+0x42>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ed4:	68ca      	ldr	r2, [r1, #12]
 8003ed6:	480a      	ldr	r0, [pc, #40]	; (8003f00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ed8:	fbb0 f0f3 	udiv	r0, r0, r3
 8003edc:	f3c2 2306 	ubfx	r3, r2, #8, #7
 8003ee0:	fb00 f003 	mul.w	r0, r0, r3
      break;
 8003ee4:	e7e5      	b.n	8003eb2 <HAL_RCC_GetSysClockFreq+0x6a>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ee6:	68ca      	ldr	r2, [r1, #12]
 8003ee8:	4807      	ldr	r0, [pc, #28]	; (8003f08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003eea:	fbb0 f0f3 	udiv	r0, r0, r3
 8003eee:	f3c2 2306 	ubfx	r3, r2, #8, #7
 8003ef2:	fb00 f003 	mul.w	r0, r0, r3
      break;
 8003ef6:	e7dc      	b.n	8003eb2 <HAL_RCC_GetSysClockFreq+0x6a>
 8003ef8:	2000      	movs	r0, #0
  return sysclockfreq;
 8003efa:	4770      	bx	lr
 8003efc:	40021000 	.word	0x40021000
 8003f00:	007a1200 	.word	0x007a1200
 8003f04:	0801507c 	.word	0x0801507c
 8003f08:	00f42400 	.word	0x00f42400

08003f0c <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8003f0c:	2800      	cmp	r0, #0
 8003f0e:	f000 82e7 	beq.w	80044e0 <HAL_RCC_OscConfig+0x5d4>
{
 8003f12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f16:	4a99      	ldr	r2, [pc, #612]	; (800417c <HAL_RCC_OscConfig+0x270>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f18:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f1a:	6895      	ldr	r5, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f1c:	68d6      	ldr	r6, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f1e:	06da      	lsls	r2, r3, #27
{
 8003f20:	b085      	sub	sp, #20
 8003f22:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f24:	f005 050c 	and.w	r5, r5, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f28:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f2c:	d52e      	bpl.n	8003f8c <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f2e:	2d00      	cmp	r5, #0
 8003f30:	f000 812b 	beq.w	800418a <HAL_RCC_OscConfig+0x27e>
 8003f34:	2d0c      	cmp	r5, #12
 8003f36:	f000 8125 	beq.w	8004184 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f3a:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 8003f3c:	4f8f      	ldr	r7, [pc, #572]	; (800417c <HAL_RCC_OscConfig+0x270>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 8181 	beq.w	8004246 <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_MSI_ENABLE();
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	f043 0301 	orr.w	r3, r3, #1
 8003f4a:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8003f4c:	f7fc fffc 	bl	8000f48 <HAL_GetTick>
 8003f50:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f52:	e006      	b.n	8003f62 <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f54:	f7fc fff8 	bl	8000f48 <HAL_GetTick>
 8003f58:	eba0 0008 	sub.w	r0, r0, r8
 8003f5c:	2802      	cmp	r0, #2
 8003f5e:	f200 81e1 	bhi.w	8004324 <HAL_RCC_OscConfig+0x418>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	079b      	lsls	r3, r3, #30
 8003f66:	d5f5      	bpl.n	8003f54 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	f043 0308 	orr.w	r3, r3, #8
 8003f6e:	603b      	str	r3, [r7, #0]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	6a22      	ldr	r2, [r4, #32]
 8003f74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	69e2      	ldr	r2, [r4, #28]
 8003f80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003f88:	607b      	str	r3, [r7, #4]
 8003f8a:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f8c:	07d9      	lsls	r1, r3, #31
 8003f8e:	d529      	bpl.n	8003fe4 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f90:	2d08      	cmp	r5, #8
 8003f92:	f000 8198 	beq.w	80042c6 <HAL_RCC_OscConfig+0x3ba>
 8003f96:	2d0c      	cmp	r5, #12
 8003f98:	f000 8192 	beq.w	80042c0 <HAL_RCC_OscConfig+0x3b4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f9c:	6863      	ldr	r3, [r4, #4]
 8003f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa2:	f000 819a 	beq.w	80042da <HAL_RCC_OscConfig+0x3ce>
 8003fa6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003faa:	f000 8280 	beq.w	80044ae <HAL_RCC_OscConfig+0x5a2>
 8003fae:	4f73      	ldr	r7, [pc, #460]	; (800417c <HAL_RCC_OscConfig+0x270>)
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003fb6:	603a      	str	r2, [r7, #0]
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003fbe:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f040 818f 	bne.w	80042e4 <HAL_RCC_OscConfig+0x3d8>
        tickstart = HAL_GetTick();
 8003fc6:	f7fc ffbf 	bl	8000f48 <HAL_GetTick>
 8003fca:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fcc:	e006      	b.n	8003fdc <HAL_RCC_OscConfig+0xd0>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fce:	f7fc ffbb 	bl	8000f48 <HAL_GetTick>
 8003fd2:	eba0 0008 	sub.w	r0, r0, r8
 8003fd6:	2864      	cmp	r0, #100	; 0x64
 8003fd8:	f200 81a4 	bhi.w	8004324 <HAL_RCC_OscConfig+0x418>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	0398      	lsls	r0, r3, #14
 8003fe0:	d4f5      	bmi.n	8003fce <HAL_RCC_OscConfig+0xc2>
 8003fe2:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fe4:	0799      	lsls	r1, r3, #30
 8003fe6:	f100 80a3 	bmi.w	8004130 <HAL_RCC_OscConfig+0x224>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fea:	0719      	lsls	r1, r3, #28
 8003fec:	d519      	bpl.n	8004022 <HAL_RCC_OscConfig+0x116>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fee:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8003ff0:	4e62      	ldr	r6, [pc, #392]	; (800417c <HAL_RCC_OscConfig+0x270>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 813d 	beq.w	8004272 <HAL_RCC_OscConfig+0x366>
      __HAL_RCC_LSI_ENABLE();
 8003ff8:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8003ffc:	f043 0301 	orr.w	r3, r3, #1
 8004000:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004004:	f7fc ffa0 	bl	8000f48 <HAL_GetTick>
 8004008:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800400a:	e005      	b.n	8004018 <HAL_RCC_OscConfig+0x10c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800400c:	f7fc ff9c 	bl	8000f48 <HAL_GetTick>
 8004010:	1bc0      	subs	r0, r0, r7
 8004012:	2802      	cmp	r0, #2
 8004014:	f200 8186 	bhi.w	8004324 <HAL_RCC_OscConfig+0x418>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004018:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800401c:	079a      	lsls	r2, r3, #30
 800401e:	d5f5      	bpl.n	800400c <HAL_RCC_OscConfig+0x100>
 8004020:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004022:	0758      	lsls	r0, r3, #29
 8004024:	d53f      	bpl.n	80040a6 <HAL_RCC_OscConfig+0x19a>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004026:	4b55      	ldr	r3, [pc, #340]	; (800417c <HAL_RCC_OscConfig+0x270>)
 8004028:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800402a:	00d1      	lsls	r1, r2, #3
 800402c:	f100 81ec 	bmi.w	8004408 <HAL_RCC_OscConfig+0x4fc>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004030:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004032:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004036:	659a      	str	r2, [r3, #88]	; 0x58
 8004038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800403e:	9301      	str	r3, [sp, #4]
 8004040:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004042:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004044:	4e4e      	ldr	r6, [pc, #312]	; (8004180 <HAL_RCC_OscConfig+0x274>)
 8004046:	6833      	ldr	r3, [r6, #0]
 8004048:	05da      	lsls	r2, r3, #23
 800404a:	f140 815a 	bpl.w	8004302 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800404e:	68a3      	ldr	r3, [r4, #8]
 8004050:	2b01      	cmp	r3, #1
 8004052:	f000 8239 	beq.w	80044c8 <HAL_RCC_OscConfig+0x5bc>
 8004056:	2b05      	cmp	r3, #5
 8004058:	f000 81d8 	beq.w	800440c <HAL_RCC_OscConfig+0x500>
 800405c:	4e47      	ldr	r6, [pc, #284]	; (800417c <HAL_RCC_OscConfig+0x270>)
 800405e:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8004062:	f022 0201 	bic.w	r2, r2, #1
 8004066:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 800406a:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800406e:	f022 0204 	bic.w	r2, r2, #4
 8004072:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004076:	2b00      	cmp	r3, #0
 8004078:	f040 81d5 	bne.w	8004426 <HAL_RCC_OscConfig+0x51a>
      tickstart = HAL_GetTick();
 800407c:	f7fc ff64 	bl	8000f48 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004080:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004084:	4681      	mov	r9, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004086:	e006      	b.n	8004096 <HAL_RCC_OscConfig+0x18a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004088:	f7fc ff5e 	bl	8000f48 <HAL_GetTick>
 800408c:	eba0 0009 	sub.w	r0, r0, r9
 8004090:	4540      	cmp	r0, r8
 8004092:	f200 8147 	bhi.w	8004324 <HAL_RCC_OscConfig+0x418>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004096:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800409a:	0799      	lsls	r1, r3, #30
 800409c:	d4f4      	bmi.n	8004088 <HAL_RCC_OscConfig+0x17c>
    if(pwrclkchanged == SET)
 800409e:	2f00      	cmp	r7, #0
 80040a0:	f040 81ff 	bne.w	80044a2 <HAL_RCC_OscConfig+0x596>
 80040a4:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040a6:	069a      	lsls	r2, r3, #26
 80040a8:	d518      	bpl.n	80040dc <HAL_RCC_OscConfig+0x1d0>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_RCC_HSI48_ENABLE();
 80040ac:	4e33      	ldr	r6, [pc, #204]	; (800417c <HAL_RCC_OscConfig+0x270>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 81cf 	beq.w	8004452 <HAL_RCC_OscConfig+0x546>
      __HAL_RCC_HSI48_ENABLE();
 80040b4:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 80040b8:	f043 0301 	orr.w	r3, r3, #1
 80040bc:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
      tickstart = HAL_GetTick();
 80040c0:	f7fc ff42 	bl	8000f48 <HAL_GetTick>
 80040c4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040c6:	e005      	b.n	80040d4 <HAL_RCC_OscConfig+0x1c8>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040c8:	f7fc ff3e 	bl	8000f48 <HAL_GetTick>
 80040cc:	1bc0      	subs	r0, r0, r7
 80040ce:	2802      	cmp	r0, #2
 80040d0:	f200 8128 	bhi.w	8004324 <HAL_RCC_OscConfig+0x418>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040d4:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 80040d8:	079b      	lsls	r3, r3, #30
 80040da:	d5f5      	bpl.n	80040c8 <HAL_RCC_OscConfig+0x1bc>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80040dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80040de:	b31b      	cbz	r3, 8004128 <HAL_RCC_OscConfig+0x21c>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040e0:	2d0c      	cmp	r5, #12
 80040e2:	f000 80ac 	beq.w	800423e <HAL_RCC_OscConfig+0x332>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	f000 820e 	beq.w	8004508 <HAL_RCC_OscConfig+0x5fc>
        __HAL_RCC_PLL_DISABLE();
 80040ec:	4b23      	ldr	r3, [pc, #140]	; (800417c <HAL_RCC_OscConfig+0x270>)
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80040f4:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	f012 5f20 	tst.w	r2, #671088640	; 0x28000000
 80040fc:	f000 81cc 	beq.w	8004498 <HAL_RCC_OscConfig+0x58c>
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004100:	4c1e      	ldr	r4, [pc, #120]	; (800417c <HAL_RCC_OscConfig+0x270>)
 8004102:	68e3      	ldr	r3, [r4, #12]
 8004104:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800410c:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800410e:	f7fc ff1b 	bl	8000f48 <HAL_GetTick>
 8004112:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004114:	e005      	b.n	8004122 <HAL_RCC_OscConfig+0x216>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004116:	f7fc ff17 	bl	8000f48 <HAL_GetTick>
 800411a:	1b40      	subs	r0, r0, r5
 800411c:	2802      	cmp	r0, #2
 800411e:	f200 8101 	bhi.w	8004324 <HAL_RCC_OscConfig+0x418>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	019b      	lsls	r3, r3, #6
 8004126:	d4f6      	bmi.n	8004116 <HAL_RCC_OscConfig+0x20a>
  return HAL_OK;
 8004128:	2000      	movs	r0, #0
}
 800412a:	b005      	add	sp, #20
 800412c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004130:	2d04      	cmp	r5, #4
 8004132:	f000 80b5 	beq.w	80042a0 <HAL_RCC_OscConfig+0x394>
 8004136:	2d0c      	cmp	r5, #12
 8004138:	f000 80af 	beq.w	800429a <HAL_RCC_OscConfig+0x38e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800413c:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 800413e:	4e0f      	ldr	r6, [pc, #60]	; (800417c <HAL_RCC_OscConfig+0x270>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004140:	2b00      	cmp	r3, #0
 8004142:	f000 814f 	beq.w	80043e4 <HAL_RCC_OscConfig+0x4d8>
        __HAL_RCC_HSI_ENABLE();
 8004146:	6833      	ldr	r3, [r6, #0]
 8004148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800414c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800414e:	f7fc fefb 	bl	8000f48 <HAL_GetTick>
 8004152:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004154:	e005      	b.n	8004162 <HAL_RCC_OscConfig+0x256>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004156:	f7fc fef7 	bl	8000f48 <HAL_GetTick>
 800415a:	1bc0      	subs	r0, r0, r7
 800415c:	2802      	cmp	r0, #2
 800415e:	f200 80e1 	bhi.w	8004324 <HAL_RCC_OscConfig+0x418>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004162:	6833      	ldr	r3, [r6, #0]
 8004164:	055b      	lsls	r3, r3, #21
 8004166:	d5f6      	bpl.n	8004156 <HAL_RCC_OscConfig+0x24a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004168:	6873      	ldr	r3, [r6, #4]
 800416a:	6922      	ldr	r2, [r4, #16]
 800416c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004170:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004174:	6073      	str	r3, [r6, #4]
 8004176:	6823      	ldr	r3, [r4, #0]
 8004178:	e737      	b.n	8003fea <HAL_RCC_OscConfig+0xde>
 800417a:	bf00      	nop
 800417c:	40021000 	.word	0x40021000
 8004180:	40007000 	.word	0x40007000
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004184:	2e01      	cmp	r6, #1
 8004186:	f47f aed8 	bne.w	8003f3a <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800418a:	4bbf      	ldr	r3, [pc, #764]	; (8004488 <HAL_RCC_OscConfig+0x57c>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	079f      	lsls	r7, r3, #30
 8004190:	d452      	bmi.n	8004238 <HAL_RCC_OscConfig+0x32c>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004192:	4bbd      	ldr	r3, [pc, #756]	; (8004488 <HAL_RCC_OscConfig+0x57c>)
 8004194:	6a27      	ldr	r7, [r4, #32]
 8004196:	681a      	ldr	r2, [r3, #0]
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004198:	f8df 82ec 	ldr.w	r8, [pc, #748]	; 8004488 <HAL_RCC_OscConfig+0x57c>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800419c:	0710      	lsls	r0, r2, #28
 800419e:	bf56      	itet	pl
 80041a0:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 80041a4:	681b      	ldrmi	r3, [r3, #0]
 80041a6:	091b      	lsrpl	r3, r3, #4
 80041a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041ac:	42bb      	cmp	r3, r7
 80041ae:	f080 80bd 	bcs.w	800432c <HAL_RCC_OscConfig+0x420>
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80041b2:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 80041b6:	00d9      	lsls	r1, r3, #3
 80041b8:	f100 8163 	bmi.w	8004482 <HAL_RCC_OscConfig+0x576>
  {
    vos = HAL_PWREx_GetVoltageRange();
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041bc:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 80041c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c4:	f8c8 3058 	str.w	r3, [r8, #88]	; 0x58
 80041c8:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 80041cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d0:	9302      	str	r3, [sp, #8]
 80041d2:	9b02      	ldr	r3, [sp, #8]
    vos = HAL_PWREx_GetVoltageRange();
 80041d4:	f7ff fda8 	bl	8003d28 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80041d8:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 80041dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041e0:	f8c8 3058 	str.w	r3, [r8, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041e4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80041e8:	f000 8183 	beq.w	80044f2 <HAL_RCC_OscConfig+0x5e6>
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80041ec:	2f7f      	cmp	r7, #127	; 0x7f
 80041ee:	f200 8173 	bhi.w	80044d8 <HAL_RCC_OscConfig+0x5cc>
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80041f2:	f1a7 0770 	sub.w	r7, r7, #112	; 0x70
 80041f6:	fab7 f787 	clz	r7, r7
 80041fa:	097f      	lsrs	r7, r7, #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80041fc:	4aa3      	ldr	r2, [pc, #652]	; (800448c <HAL_RCC_OscConfig+0x580>)
 80041fe:	6813      	ldr	r3, [r2, #0]
 8004200:	f023 030f 	bic.w	r3, r3, #15
 8004204:	433b      	orrs	r3, r7
 8004206:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004208:	6813      	ldr	r3, [r2, #0]
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	429f      	cmp	r7, r3
 8004210:	d115      	bne.n	800423e <HAL_RCC_OscConfig+0x332>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004212:	4b9d      	ldr	r3, [pc, #628]	; (8004488 <HAL_RCC_OscConfig+0x57c>)
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	f042 0208 	orr.w	r2, r2, #8
 800421a:	601a      	str	r2, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	6a21      	ldr	r1, [r4, #32]
 8004220:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004224:	430a      	orrs	r2, r1
 8004226:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	69e1      	ldr	r1, [r4, #28]
 800422c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004230:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004234:	605a      	str	r2, [r3, #4]
 8004236:	e0c0      	b.n	80043ba <HAL_RCC_OscConfig+0x4ae>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004238:	69a3      	ldr	r3, [r4, #24]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1a9      	bne.n	8004192 <HAL_RCC_OscConfig+0x286>
      return HAL_ERROR;
 800423e:	2001      	movs	r0, #1
}
 8004240:	b005      	add	sp, #20
 8004242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        __HAL_RCC_MSI_DISABLE();
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	f023 0301 	bic.w	r3, r3, #1
 800424c:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800424e:	f7fc fe7b 	bl	8000f48 <HAL_GetTick>
 8004252:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004254:	e005      	b.n	8004262 <HAL_RCC_OscConfig+0x356>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004256:	f7fc fe77 	bl	8000f48 <HAL_GetTick>
 800425a:	eba0 0008 	sub.w	r0, r0, r8
 800425e:	2802      	cmp	r0, #2
 8004260:	d860      	bhi.n	8004324 <HAL_RCC_OscConfig+0x418>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	0798      	lsls	r0, r3, #30
 8004266:	d4f6      	bmi.n	8004256 <HAL_RCC_OscConfig+0x34a>
 8004268:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800426a:	07d9      	lsls	r1, r3, #31
 800426c:	f57f aeba 	bpl.w	8003fe4 <HAL_RCC_OscConfig+0xd8>
 8004270:	e68e      	b.n	8003f90 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8004272:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8004276:	f023 0301 	bic.w	r3, r3, #1
 800427a:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 800427e:	f7fc fe63 	bl	8000f48 <HAL_GetTick>
 8004282:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004284:	e004      	b.n	8004290 <HAL_RCC_OscConfig+0x384>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004286:	f7fc fe5f 	bl	8000f48 <HAL_GetTick>
 800428a:	1bc0      	subs	r0, r0, r7
 800428c:	2802      	cmp	r0, #2
 800428e:	d849      	bhi.n	8004324 <HAL_RCC_OscConfig+0x418>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004290:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8004294:	079b      	lsls	r3, r3, #30
 8004296:	d4f6      	bmi.n	8004286 <HAL_RCC_OscConfig+0x37a>
 8004298:	e6c2      	b.n	8004020 <HAL_RCC_OscConfig+0x114>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 800429a:	2e02      	cmp	r6, #2
 800429c:	f47f af4e 	bne.w	800413c <HAL_RCC_OscConfig+0x230>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042a0:	4a79      	ldr	r2, [pc, #484]	; (8004488 <HAL_RCC_OscConfig+0x57c>)
 80042a2:	6812      	ldr	r2, [r2, #0]
 80042a4:	0552      	lsls	r2, r2, #21
 80042a6:	d502      	bpl.n	80042ae <HAL_RCC_OscConfig+0x3a2>
 80042a8:	68e2      	ldr	r2, [r4, #12]
 80042aa:	2a00      	cmp	r2, #0
 80042ac:	d0c7      	beq.n	800423e <HAL_RCC_OscConfig+0x332>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ae:	4976      	ldr	r1, [pc, #472]	; (8004488 <HAL_RCC_OscConfig+0x57c>)
 80042b0:	6920      	ldr	r0, [r4, #16]
 80042b2:	684a      	ldr	r2, [r1, #4]
 80042b4:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 80042b8:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80042bc:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042be:	e694      	b.n	8003fea <HAL_RCC_OscConfig+0xde>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 80042c0:	2e03      	cmp	r6, #3
 80042c2:	f47f ae6b 	bne.w	8003f9c <HAL_RCC_OscConfig+0x90>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c6:	4a70      	ldr	r2, [pc, #448]	; (8004488 <HAL_RCC_OscConfig+0x57c>)
 80042c8:	6812      	ldr	r2, [r2, #0]
 80042ca:	0392      	lsls	r2, r2, #14
 80042cc:	f57f ae8a 	bpl.w	8003fe4 <HAL_RCC_OscConfig+0xd8>
 80042d0:	6862      	ldr	r2, [r4, #4]
 80042d2:	2a00      	cmp	r2, #0
 80042d4:	f47f ae86 	bne.w	8003fe4 <HAL_RCC_OscConfig+0xd8>
 80042d8:	e7b1      	b.n	800423e <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042da:	4a6b      	ldr	r2, [pc, #428]	; (8004488 <HAL_RCC_OscConfig+0x57c>)
 80042dc:	6813      	ldr	r3, [r2, #0]
 80042de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80042e4:	f7fc fe30 	bl	8000f48 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042e8:	4f67      	ldr	r7, [pc, #412]	; (8004488 <HAL_RCC_OscConfig+0x57c>)
        tickstart = HAL_GetTick();
 80042ea:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042ec:	e005      	b.n	80042fa <HAL_RCC_OscConfig+0x3ee>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042ee:	f7fc fe2b 	bl	8000f48 <HAL_GetTick>
 80042f2:	eba0 0008 	sub.w	r0, r0, r8
 80042f6:	2864      	cmp	r0, #100	; 0x64
 80042f8:	d814      	bhi.n	8004324 <HAL_RCC_OscConfig+0x418>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	039b      	lsls	r3, r3, #14
 80042fe:	d5f6      	bpl.n	80042ee <HAL_RCC_OscConfig+0x3e2>
 8004300:	e66f      	b.n	8003fe2 <HAL_RCC_OscConfig+0xd6>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004302:	6833      	ldr	r3, [r6, #0]
 8004304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004308:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800430a:	f7fc fe1d 	bl	8000f48 <HAL_GetTick>
 800430e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004310:	6833      	ldr	r3, [r6, #0]
 8004312:	05db      	lsls	r3, r3, #23
 8004314:	f53f ae9b 	bmi.w	800404e <HAL_RCC_OscConfig+0x142>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004318:	f7fc fe16 	bl	8000f48 <HAL_GetTick>
 800431c:	eba0 0008 	sub.w	r0, r0, r8
 8004320:	2802      	cmp	r0, #2
 8004322:	d9f5      	bls.n	8004310 <HAL_RCC_OscConfig+0x404>
            return HAL_TIMEOUT;
 8004324:	2003      	movs	r0, #3
}
 8004326:	b005      	add	sp, #20
 8004328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800432c:	f8d8 3000 	ldr.w	r3, [r8]
 8004330:	f043 0308 	orr.w	r3, r3, #8
 8004334:	f8c8 3000 	str.w	r3, [r8]
 8004338:	f8d8 3000 	ldr.w	r3, [r8]
 800433c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004340:	433b      	orrs	r3, r7
 8004342:	f8c8 3000 	str.w	r3, [r8]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004346:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800434a:	69e2      	ldr	r2, [r4, #28]
 800434c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004350:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004354:	f8c8 3004 	str.w	r3, [r8, #4]
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004358:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 800435c:	00da      	lsls	r2, r3, #3
 800435e:	f100 808d 	bmi.w	800447c <HAL_RCC_OscConfig+0x570>
    __HAL_RCC_PWR_CLK_ENABLE();
 8004362:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 8004366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800436a:	f8c8 3058 	str.w	r3, [r8, #88]	; 0x58
 800436e:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 8004372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004376:	9303      	str	r3, [sp, #12]
 8004378:	9b03      	ldr	r3, [sp, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800437a:	f7ff fcd5 	bl	8003d28 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800437e:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 8004382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004386:	f8c8 3058 	str.w	r3, [r8, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800438a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800438e:	f000 80a9 	beq.w	80044e4 <HAL_RCC_OscConfig+0x5d8>
    if(msirange >= RCC_MSIRANGE_8)
 8004392:	2f7f      	cmp	r7, #127	; 0x7f
 8004394:	f200 80a2 	bhi.w	80044dc <HAL_RCC_OscConfig+0x5d0>
      if(msirange == RCC_MSIRANGE_7)
 8004398:	f1a7 0770 	sub.w	r7, r7, #112	; 0x70
 800439c:	fab7 f787 	clz	r7, r7
 80043a0:	097f      	lsrs	r7, r7, #5
  __HAL_FLASH_SET_LATENCY(latency);
 80043a2:	4a3a      	ldr	r2, [pc, #232]	; (800448c <HAL_RCC_OscConfig+0x580>)
 80043a4:	6813      	ldr	r3, [r2, #0]
 80043a6:	f023 030f 	bic.w	r3, r3, #15
 80043aa:	433b      	orrs	r3, r7
 80043ac:	6013      	str	r3, [r2, #0]
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80043ae:	6813      	ldr	r3, [r2, #0]
 80043b0:	f003 030f 	and.w	r3, r3, #15
 80043b4:	429f      	cmp	r7, r3
 80043b6:	f47f af42 	bne.w	800423e <HAL_RCC_OscConfig+0x332>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043ba:	f7ff fd45 	bl	8003e48 <HAL_RCC_GetSysClockFreq>
 80043be:	4b32      	ldr	r3, [pc, #200]	; (8004488 <HAL_RCC_OscConfig+0x57c>)
 80043c0:	4933      	ldr	r1, [pc, #204]	; (8004490 <HAL_RCC_OscConfig+0x584>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	4a33      	ldr	r2, [pc, #204]	; (8004494 <HAL_RCC_OscConfig+0x588>)
 80043c6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80043ca:	5ccb      	ldrb	r3, [r1, r3]
 80043cc:	f003 031f 	and.w	r3, r3, #31
 80043d0:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80043d4:	2000      	movs	r0, #0
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043d6:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80043d8:	f00c ff8e 	bl	80112f8 <HAL_InitTick>
        if(status != HAL_OK)
 80043dc:	2800      	cmp	r0, #0
 80043de:	f43f af43 	beq.w	8004268 <HAL_RCC_OscConfig+0x35c>
 80043e2:	e72d      	b.n	8004240 <HAL_RCC_OscConfig+0x334>
        __HAL_RCC_HSI_DISABLE();
 80043e4:	6833      	ldr	r3, [r6, #0]
 80043e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043ea:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80043ec:	f7fc fdac 	bl	8000f48 <HAL_GetTick>
 80043f0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043f2:	e004      	b.n	80043fe <HAL_RCC_OscConfig+0x4f2>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043f4:	f7fc fda8 	bl	8000f48 <HAL_GetTick>
 80043f8:	1bc0      	subs	r0, r0, r7
 80043fa:	2802      	cmp	r0, #2
 80043fc:	d892      	bhi.n	8004324 <HAL_RCC_OscConfig+0x418>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043fe:	6833      	ldr	r3, [r6, #0]
 8004400:	0558      	lsls	r0, r3, #21
 8004402:	d4f7      	bmi.n	80043f4 <HAL_RCC_OscConfig+0x4e8>
 8004404:	6823      	ldr	r3, [r4, #0]
 8004406:	e5f0      	b.n	8003fea <HAL_RCC_OscConfig+0xde>
    FlagStatus       pwrclkchanged = RESET;
 8004408:	2700      	movs	r7, #0
 800440a:	e61b      	b.n	8004044 <HAL_RCC_OscConfig+0x138>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800440c:	4b1e      	ldr	r3, [pc, #120]	; (8004488 <HAL_RCC_OscConfig+0x57c>)
 800440e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004412:	f042 0204 	orr.w	r2, r2, #4
 8004416:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800441a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800441e:	f042 0201 	orr.w	r2, r2, #1
 8004422:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      tickstart = HAL_GetTick();
 8004426:	f7fc fd8f 	bl	8000f48 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800442a:	4e17      	ldr	r6, [pc, #92]	; (8004488 <HAL_RCC_OscConfig+0x57c>)
      tickstart = HAL_GetTick();
 800442c:	4681      	mov	r9, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800442e:	f241 3888 	movw	r8, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004432:	e006      	b.n	8004442 <HAL_RCC_OscConfig+0x536>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004434:	f7fc fd88 	bl	8000f48 <HAL_GetTick>
 8004438:	eba0 0009 	sub.w	r0, r0, r9
 800443c:	4540      	cmp	r0, r8
 800443e:	f63f af71 	bhi.w	8004324 <HAL_RCC_OscConfig+0x418>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004442:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8004446:	0798      	lsls	r0, r3, #30
 8004448:	d5f4      	bpl.n	8004434 <HAL_RCC_OscConfig+0x528>
    if(pwrclkchanged == SET)
 800444a:	2f00      	cmp	r7, #0
 800444c:	f43f ae2a 	beq.w	80040a4 <HAL_RCC_OscConfig+0x198>
 8004450:	e027      	b.n	80044a2 <HAL_RCC_OscConfig+0x596>
      __HAL_RCC_HSI48_DISABLE();
 8004452:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8004456:	f023 0301 	bic.w	r3, r3, #1
 800445a:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
      tickstart = HAL_GetTick();
 800445e:	f7fc fd73 	bl	8000f48 <HAL_GetTick>
 8004462:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004464:	e005      	b.n	8004472 <HAL_RCC_OscConfig+0x566>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004466:	f7fc fd6f 	bl	8000f48 <HAL_GetTick>
 800446a:	1bc0      	subs	r0, r0, r7
 800446c:	2802      	cmp	r0, #2
 800446e:	f63f af59 	bhi.w	8004324 <HAL_RCC_OscConfig+0x418>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004472:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8004476:	0798      	lsls	r0, r3, #30
 8004478:	d4f5      	bmi.n	8004466 <HAL_RCC_OscConfig+0x55a>
 800447a:	e62f      	b.n	80040dc <HAL_RCC_OscConfig+0x1d0>
    vos = HAL_PWREx_GetVoltageRange();
 800447c:	f7ff fc54 	bl	8003d28 <HAL_PWREx_GetVoltageRange>
 8004480:	e783      	b.n	800438a <HAL_RCC_OscConfig+0x47e>
 8004482:	f7ff fc51 	bl	8003d28 <HAL_PWREx_GetVoltageRange>
 8004486:	e6ad      	b.n	80041e4 <HAL_RCC_OscConfig+0x2d8>
 8004488:	40021000 	.word	0x40021000
 800448c:	40022000 	.word	0x40022000
 8004490:	08015064 	.word	0x08015064
 8004494:	2000003c 	.word	0x2000003c
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004498:	68da      	ldr	r2, [r3, #12]
 800449a:	f022 0203 	bic.w	r2, r2, #3
 800449e:	60da      	str	r2, [r3, #12]
 80044a0:	e62e      	b.n	8004100 <HAL_RCC_OscConfig+0x1f4>
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a2:	4a39      	ldr	r2, [pc, #228]	; (8004588 <HAL_RCC_OscConfig+0x67c>)
 80044a4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80044a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044aa:	6593      	str	r3, [r2, #88]	; 0x58
 80044ac:	e5fa      	b.n	80040a4 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044b2:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	e70d      	b.n	80042e4 <HAL_RCC_OscConfig+0x3d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044c8:	4a2f      	ldr	r2, [pc, #188]	; (8004588 <HAL_RCC_OscConfig+0x67c>)
 80044ca:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80044ce:	f043 0301 	orr.w	r3, r3, #1
 80044d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044d6:	e7a6      	b.n	8004426 <HAL_RCC_OscConfig+0x51a>
        latency = FLASH_LATENCY_2; /* 2WS */
 80044d8:	2702      	movs	r7, #2
 80044da:	e68f      	b.n	80041fc <HAL_RCC_OscConfig+0x2f0>
 80044dc:	2702      	movs	r7, #2
 80044de:	e760      	b.n	80043a2 <HAL_RCC_OscConfig+0x496>
    return HAL_ERROR;
 80044e0:	2001      	movs	r0, #1
}
 80044e2:	4770      	bx	lr
    if(msirange > RCC_MSIRANGE_8)
 80044e4:	2f80      	cmp	r7, #128	; 0x80
 80044e6:	d90b      	bls.n	8004500 <HAL_RCC_OscConfig+0x5f4>
        latency = FLASH_LATENCY_2; /* 2WS */
 80044e8:	2fa1      	cmp	r7, #161	; 0xa1
 80044ea:	bf34      	ite	cc
 80044ec:	2701      	movcc	r7, #1
 80044ee:	2702      	movcs	r7, #2
 80044f0:	e757      	b.n	80043a2 <HAL_RCC_OscConfig+0x496>
    if(msirange > RCC_MSIRANGE_8)
 80044f2:	2f80      	cmp	r7, #128	; 0x80
 80044f4:	d906      	bls.n	8004504 <HAL_RCC_OscConfig+0x5f8>
        latency = FLASH_LATENCY_2; /* 2WS */
 80044f6:	2fa1      	cmp	r7, #161	; 0xa1
 80044f8:	bf34      	ite	cc
 80044fa:	2701      	movcc	r7, #1
 80044fc:	2702      	movcs	r7, #2
 80044fe:	e67d      	b.n	80041fc <HAL_RCC_OscConfig+0x2f0>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004500:	2700      	movs	r7, #0
 8004502:	e74e      	b.n	80043a2 <HAL_RCC_OscConfig+0x496>
 8004504:	2700      	movs	r7, #0
 8004506:	e679      	b.n	80041fc <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_PLL_DISABLE();
 8004508:	4d1f      	ldr	r5, [pc, #124]	; (8004588 <HAL_RCC_OscConfig+0x67c>)
 800450a:	682b      	ldr	r3, [r5, #0]
 800450c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004510:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004512:	f7fc fd19 	bl	8000f48 <HAL_GetTick>
 8004516:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004518:	e005      	b.n	8004526 <HAL_RCC_OscConfig+0x61a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800451a:	f7fc fd15 	bl	8000f48 <HAL_GetTick>
 800451e:	1b80      	subs	r0, r0, r6
 8004520:	2802      	cmp	r0, #2
 8004522:	f63f aeff 	bhi.w	8004324 <HAL_RCC_OscConfig+0x418>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004526:	682b      	ldr	r3, [r5, #0]
 8004528:	0199      	lsls	r1, r3, #6
 800452a:	d4f6      	bmi.n	800451a <HAL_RCC_OscConfig+0x60e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800452c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800452e:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8004530:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004532:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004534:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004536:	6c22      	ldr	r2, [r4, #64]	; 0x40
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004538:	4c13      	ldr	r4, [pc, #76]	; (8004588 <HAL_RCC_OscConfig+0x67c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800453a:	06db      	lsls	r3, r3, #27
 800453c:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8004540:	3801      	subs	r0, #1
 8004542:	4333      	orrs	r3, r6
 8004544:	0849      	lsrs	r1, r1, #1
 8004546:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800454a:	3901      	subs	r1, #1
 800454c:	0852      	lsrs	r2, r2, #1
 800454e:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8004552:	3a01      	subs	r2, #1
 8004554:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004558:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800455a:	682b      	ldr	r3, [r5, #0]
 800455c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004560:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004562:	68eb      	ldr	r3, [r5, #12]
 8004564:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004568:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800456a:	f7fc fced 	bl	8000f48 <HAL_GetTick>
 800456e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004570:	e005      	b.n	800457e <HAL_RCC_OscConfig+0x672>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004572:	f7fc fce9 	bl	8000f48 <HAL_GetTick>
 8004576:	1b40      	subs	r0, r0, r5
 8004578:	2802      	cmp	r0, #2
 800457a:	f63f aed3 	bhi.w	8004324 <HAL_RCC_OscConfig+0x418>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800457e:	6823      	ldr	r3, [r4, #0]
 8004580:	019a      	lsls	r2, r3, #6
 8004582:	d5f6      	bpl.n	8004572 <HAL_RCC_OscConfig+0x666>
 8004584:	e5d0      	b.n	8004128 <HAL_RCC_OscConfig+0x21c>
 8004586:	bf00      	nop
 8004588:	40021000 	.word	0x40021000

0800458c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800458c:	2800      	cmp	r0, #0
 800458e:	f000 80ec 	beq.w	800476a <HAL_RCC_ClockConfig+0x1de>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004592:	4a88      	ldr	r2, [pc, #544]	; (80047b4 <HAL_RCC_ClockConfig+0x228>)
{
 8004594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004598:	6813      	ldr	r3, [r2, #0]
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	428b      	cmp	r3, r1
 80045a0:	d20c      	bcs.n	80045bc <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a2:	6813      	ldr	r3, [r2, #0]
 80045a4:	f023 030f 	bic.w	r3, r3, #15
 80045a8:	430b      	orrs	r3, r1
 80045aa:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ac:	6813      	ldr	r3, [r2, #0]
 80045ae:	f003 030f 	and.w	r3, r3, #15
 80045b2:	4299      	cmp	r1, r3
 80045b4:	d002      	beq.n	80045bc <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 80045b6:	2001      	movs	r0, #1
 80045b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045bc:	6803      	ldr	r3, [r0, #0]
 80045be:	07df      	lsls	r7, r3, #31
 80045c0:	4604      	mov	r4, r0
 80045c2:	460d      	mov	r5, r1
 80045c4:	d56e      	bpl.n	80046a4 <HAL_RCC_ClockConfig+0x118>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045c6:	6842      	ldr	r2, [r0, #4]
 80045c8:	2a03      	cmp	r2, #3
 80045ca:	d07e      	beq.n	80046ca <HAL_RCC_ClockConfig+0x13e>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045cc:	4b7a      	ldr	r3, [pc, #488]	; (80047b8 <HAL_RCC_ClockConfig+0x22c>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ce:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045d0:	681b      	ldr	r3, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045d2:	d077      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x138>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045d4:	2a00      	cmp	r2, #0
 80045d6:	f040 80b9 	bne.w	800474c <HAL_RCC_ClockConfig+0x1c0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045da:	079a      	lsls	r2, r3, #30
 80045dc:	d5eb      	bpl.n	80045b6 <HAL_RCC_ClockConfig+0x2a>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80045de:	f7ff fc33 	bl	8003e48 <HAL_RCC_GetSysClockFreq>
 80045e2:	4b76      	ldr	r3, [pc, #472]	; (80047bc <HAL_RCC_ClockConfig+0x230>)
 80045e4:	4298      	cmp	r0, r3
 80045e6:	f200 80b5 	bhi.w	8004754 <HAL_RCC_ClockConfig+0x1c8>
 80045ea:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80045ec:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045f0:	4e71      	ldr	r6, [pc, #452]	; (80047b8 <HAL_RCC_ClockConfig+0x22c>)
 80045f2:	68b3      	ldr	r3, [r6, #8]
 80045f4:	f023 0303 	bic.w	r3, r3, #3
 80045f8:	431a      	orrs	r2, r3
 80045fa:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 80045fc:	f7fc fca4 	bl	8000f48 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004600:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004604:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004606:	e006      	b.n	8004616 <HAL_RCC_ClockConfig+0x8a>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004608:	f7fc fc9e 	bl	8000f48 <HAL_GetTick>
 800460c:	eba0 0008 	sub.w	r0, r0, r8
 8004610:	42b8      	cmp	r0, r7
 8004612:	f200 8098 	bhi.w	8004746 <HAL_RCC_ClockConfig+0x1ba>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004616:	68b3      	ldr	r3, [r6, #8]
 8004618:	6862      	ldr	r2, [r4, #4]
 800461a:	f003 030c 	and.w	r3, r3, #12
 800461e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004622:	d1f1      	bne.n	8004608 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004624:	6823      	ldr	r3, [r4, #0]
 8004626:	079f      	lsls	r7, r3, #30
 8004628:	d43e      	bmi.n	80046a8 <HAL_RCC_ClockConfig+0x11c>
    if(hpre == RCC_SYSCLK_DIV2)
 800462a:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 800462e:	d103      	bne.n	8004638 <HAL_RCC_ClockConfig+0xac>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004630:	68b2      	ldr	r2, [r6, #8]
 8004632:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004636:	60b2      	str	r2, [r6, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004638:	495e      	ldr	r1, [pc, #376]	; (80047b4 <HAL_RCC_ClockConfig+0x228>)
 800463a:	680a      	ldr	r2, [r1, #0]
 800463c:	f002 020f 	and.w	r2, r2, #15
 8004640:	4295      	cmp	r5, r2
 8004642:	d209      	bcs.n	8004658 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004644:	680a      	ldr	r2, [r1, #0]
 8004646:	f022 020f 	bic.w	r2, r2, #15
 800464a:	432a      	orrs	r2, r5
 800464c:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800464e:	680a      	ldr	r2, [r1, #0]
 8004650:	f002 020f 	and.w	r2, r2, #15
 8004654:	4295      	cmp	r5, r2
 8004656:	d1ae      	bne.n	80045b6 <HAL_RCC_ClockConfig+0x2a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004658:	0758      	lsls	r0, r3, #29
 800465a:	d506      	bpl.n	800466a <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800465c:	4956      	ldr	r1, [pc, #344]	; (80047b8 <HAL_RCC_ClockConfig+0x22c>)
 800465e:	68e0      	ldr	r0, [r4, #12]
 8004660:	688a      	ldr	r2, [r1, #8]
 8004662:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004666:	4302      	orrs	r2, r0
 8004668:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800466a:	0719      	lsls	r1, r3, #28
 800466c:	d507      	bpl.n	800467e <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800466e:	4a52      	ldr	r2, [pc, #328]	; (80047b8 <HAL_RCC_ClockConfig+0x22c>)
 8004670:	6921      	ldr	r1, [r4, #16]
 8004672:	6893      	ldr	r3, [r2, #8]
 8004674:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004678:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800467c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800467e:	f7ff fbe3 	bl	8003e48 <HAL_RCC_GetSysClockFreq>
 8004682:	4b4d      	ldr	r3, [pc, #308]	; (80047b8 <HAL_RCC_ClockConfig+0x22c>)
 8004684:	494e      	ldr	r1, [pc, #312]	; (80047c0 <HAL_RCC_ClockConfig+0x234>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	4a4e      	ldr	r2, [pc, #312]	; (80047c4 <HAL_RCC_ClockConfig+0x238>)
 800468a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800468e:	5ccb      	ldrb	r3, [r1, r3]
 8004690:	f003 031f 	and.w	r3, r3, #31
 8004694:	fa20 f303 	lsr.w	r3, r0, r3
 8004698:	6013      	str	r3, [r2, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 800469a:	2000      	movs	r0, #0
}
 800469c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  status = HAL_InitTick (TICK_INT_PRIORITY);
 80046a0:	f00c be2a 	b.w	80112f8 <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046a4:	079a      	lsls	r2, r3, #30
 80046a6:	d5c7      	bpl.n	8004638 <HAL_RCC_ClockConfig+0xac>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046a8:	4943      	ldr	r1, [pc, #268]	; (80047b8 <HAL_RCC_ClockConfig+0x22c>)
 80046aa:	68a0      	ldr	r0, [r4, #8]
 80046ac:	688a      	ldr	r2, [r1, #8]
 80046ae:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80046b2:	4302      	orrs	r2, r0
 80046b4:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046b6:	493f      	ldr	r1, [pc, #252]	; (80047b4 <HAL_RCC_ClockConfig+0x228>)
 80046b8:	680a      	ldr	r2, [r1, #0]
 80046ba:	f002 020f 	and.w	r2, r2, #15
 80046be:	4295      	cmp	r5, r2
 80046c0:	d3c0      	bcc.n	8004644 <HAL_RCC_ClockConfig+0xb8>
 80046c2:	e7c9      	b.n	8004658 <HAL_RCC_ClockConfig+0xcc>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046c4:	0399      	lsls	r1, r3, #14
 80046c6:	d48a      	bmi.n	80045de <HAL_RCC_ClockConfig+0x52>
 80046c8:	e775      	b.n	80045b6 <HAL_RCC_ClockConfig+0x2a>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ca:	493b      	ldr	r1, [pc, #236]	; (80047b8 <HAL_RCC_ClockConfig+0x22c>)
 80046cc:	6808      	ldr	r0, [r1, #0]
 80046ce:	0186      	lsls	r6, r0, #6
 80046d0:	f57f af71 	bpl.w	80045b6 <HAL_RCC_ClockConfig+0x2a>
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
  uint32_t msirange = 0U;
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80046d4:	68c8      	ldr	r0, [r1, #12]
 80046d6:	f000 0003 	and.w	r0, r0, #3
 80046da:	2801      	cmp	r0, #1
 80046dc:	d05b      	beq.n	8004796 <HAL_RCC_ClockConfig+0x20a>
  uint32_t msirange = 0U;
 80046de:	2100      	movs	r1, #0
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046e0:	4f35      	ldr	r7, [pc, #212]	; (80047b8 <HAL_RCC_ClockConfig+0x22c>)
 80046e2:	68fe      	ldr	r6, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046e4:	68f8      	ldr	r0, [r7, #12]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046e6:	f006 0603 	and.w	r6, r6, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046ea:	f3c0 1003 	ubfx	r0, r0, #4, #4

  switch (pllsource)
 80046ee:	2e02      	cmp	r6, #2
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046f0:	f100 0001 	add.w	r0, r0, #1
  switch (pllsource)
 80046f4:	d046      	beq.n	8004784 <HAL_RCC_ClockConfig+0x1f8>
 80046f6:	2e03      	cmp	r6, #3
 80046f8:	d13c      	bne.n	8004774 <HAL_RCC_ClockConfig+0x1e8>
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046fa:	68fe      	ldr	r6, [r7, #12]
 80046fc:	4932      	ldr	r1, [pc, #200]	; (80047c8 <HAL_RCC_ClockConfig+0x23c>)
 80046fe:	fbb1 f1f0 	udiv	r1, r1, r0
 8004702:	f3c6 2006 	ubfx	r0, r6, #8, #7
 8004706:	fb01 f100 	mul.w	r1, r1, r0
  default:
    pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800470a:	4e2b      	ldr	r6, [pc, #172]	; (80047b8 <HAL_RCC_ClockConfig+0x22c>)
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800470c:	4f2b      	ldr	r7, [pc, #172]	; (80047bc <HAL_RCC_ClockConfig+0x230>)
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800470e:	68f0      	ldr	r0, [r6, #12]
 8004710:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8004714:	3001      	adds	r0, #1
 8004716:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 8004718:	fbb1 f1f0 	udiv	r1, r1, r0
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800471c:	42b9      	cmp	r1, r7
 800471e:	d926      	bls.n	800476e <HAL_RCC_ClockConfig+0x1e2>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004720:	68b1      	ldr	r1, [r6, #8]
 8004722:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 8004726:	d005      	beq.n	8004734 <HAL_RCC_ClockConfig+0x1a8>
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004728:	f013 0902 	ands.w	r9, r3, #2
 800472c:	f43f af60 	beq.w	80045f0 <HAL_RCC_ClockConfig+0x64>
 8004730:	68a3      	ldr	r3, [r4, #8]
 8004732:	b9e3      	cbnz	r3, 800476e <HAL_RCC_ClockConfig+0x1e2>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004734:	68b3      	ldr	r3, [r6, #8]
 8004736:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800473a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800473e:	60b3      	str	r3, [r6, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004740:	f04f 0980 	mov.w	r9, #128	; 0x80
 8004744:	e754      	b.n	80045f0 <HAL_RCC_ClockConfig+0x64>
        return HAL_TIMEOUT;
 8004746:	2003      	movs	r0, #3
 8004748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800474c:	055b      	lsls	r3, r3, #21
 800474e:	f57f af32 	bpl.w	80045b6 <HAL_RCC_ClockConfig+0x2a>
 8004752:	e744      	b.n	80045de <HAL_RCC_ClockConfig+0x52>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004754:	4a18      	ldr	r2, [pc, #96]	; (80047b8 <HAL_RCC_ClockConfig+0x22c>)
 8004756:	6893      	ldr	r3, [r2, #8]
 8004758:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800475c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004760:	6093      	str	r3, [r2, #8]
 8004762:	6862      	ldr	r2, [r4, #4]
        hpre = RCC_SYSCLK_DIV2;
 8004764:	f04f 0980 	mov.w	r9, #128	; 0x80
 8004768:	e742      	b.n	80045f0 <HAL_RCC_ClockConfig+0x64>
    return HAL_ERROR;
 800476a:	2001      	movs	r0, #1
}
 800476c:	4770      	bx	lr
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800476e:	f04f 0900 	mov.w	r9, #0
 8004772:	e73d      	b.n	80045f0 <HAL_RCC_ClockConfig+0x64>
    pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004774:	68fe      	ldr	r6, [r7, #12]
 8004776:	fbb1 f1f0 	udiv	r1, r1, r0
 800477a:	f3c6 2006 	ubfx	r0, r6, #8, #7
 800477e:	fb01 f100 	mul.w	r1, r1, r0
 8004782:	e7c2      	b.n	800470a <HAL_RCC_ClockConfig+0x17e>
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004784:	68fe      	ldr	r6, [r7, #12]
 8004786:	4911      	ldr	r1, [pc, #68]	; (80047cc <HAL_RCC_ClockConfig+0x240>)
 8004788:	fbb1 f1f0 	udiv	r1, r1, r0
 800478c:	f3c6 2006 	ubfx	r0, r6, #8, #7
 8004790:	fb01 f100 	mul.w	r1, r1, r0
 8004794:	e7b9      	b.n	800470a <HAL_RCC_ClockConfig+0x17e>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004796:	6808      	ldr	r0, [r1, #0]
 8004798:	0700      	lsls	r0, r0, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800479a:	bf54      	ite	pl
 800479c:	f8d1 1094 	ldrpl.w	r1, [r1, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80047a0:	6809      	ldrmi	r1, [r1, #0]
    msirange = MSIRangeTable[msirange];
 80047a2:	480b      	ldr	r0, [pc, #44]	; (80047d0 <HAL_RCC_ClockConfig+0x244>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80047a4:	bf54      	ite	pl
 80047a6:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80047aa:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 80047ae:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80047b2:	e795      	b.n	80046e0 <HAL_RCC_ClockConfig+0x154>
 80047b4:	40022000 	.word	0x40022000
 80047b8:	40021000 	.word	0x40021000
 80047bc:	04c4b400 	.word	0x04c4b400
 80047c0:	08015064 	.word	0x08015064
 80047c4:	2000003c 	.word	0x2000003c
 80047c8:	007a1200 	.word	0x007a1200
 80047cc:	00f42400 	.word	0x00f42400
 80047d0:	0801507c 	.word	0x0801507c

080047d4 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 80047d4:	4b01      	ldr	r3, [pc, #4]	; (80047dc <HAL_RCC_GetHCLKFreq+0x8>)
}
 80047d6:	6818      	ldr	r0, [r3, #0]
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	2000003c 	.word	0x2000003c

080047e0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80047e0:	4b05      	ldr	r3, [pc, #20]	; (80047f8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80047e2:	4a06      	ldr	r2, [pc, #24]	; (80047fc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80047e4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80047e6:	4906      	ldr	r1, [pc, #24]	; (8004800 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80047e8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80047ec:	6808      	ldr	r0, [r1, #0]
 80047ee:	5cd3      	ldrb	r3, [r2, r3]
 80047f0:	f003 031f 	and.w	r3, r3, #31
}
 80047f4:	40d8      	lsrs	r0, r3
 80047f6:	4770      	bx	lr
 80047f8:	40021000 	.word	0x40021000
 80047fc:	08015074 	.word	0x08015074
 8004800:	2000003c 	.word	0x2000003c

08004804 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004804:	4b05      	ldr	r3, [pc, #20]	; (800481c <HAL_RCC_GetPCLK2Freq+0x18>)
 8004806:	4a06      	ldr	r2, [pc, #24]	; (8004820 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004808:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800480a:	4906      	ldr	r1, [pc, #24]	; (8004824 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800480c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004810:	6808      	ldr	r0, [r1, #0]
 8004812:	5cd3      	ldrb	r3, [r2, r3]
 8004814:	f003 031f 	and.w	r3, r3, #31
}
 8004818:	40d8      	lsrs	r0, r3
 800481a:	4770      	bx	lr
 800481c:	40021000 	.word	0x40021000
 8004820:	08015074 	.word	0x08015074
 8004824:	2000003c 	.word	0x2000003c

08004828 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004828:	4b0e      	ldr	r3, [pc, #56]	; (8004864 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800482a:	220f      	movs	r2, #15
 800482c:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	f002 0203 	and.w	r2, r2, #3
 8004834:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800483c:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004844:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	08db      	lsrs	r3, r3, #3
{
 800484a:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800484c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004850:	4c05      	ldr	r4, [pc, #20]	; (8004868 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004852:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004854:	6823      	ldr	r3, [r4, #0]
}
 8004856:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	600b      	str	r3, [r1, #0]
}
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	40021000 	.word	0x40021000
 8004868:	40022000 	.word	0x40022000

0800486c <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800486c:	4a44      	ldr	r2, [pc, #272]	; (8004980 <RCCEx_PLLSAI1_Config+0x114>)
{
 800486e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004870:	68d3      	ldr	r3, [r2, #12]
 8004872:	079b      	lsls	r3, r3, #30
 8004874:	d007      	beq.n	8004886 <RCCEx_PLLSAI1_Config+0x1a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004876:	68d3      	ldr	r3, [r2, #12]
 8004878:	6802      	ldr	r2, [r0, #0]
 800487a:	f003 0303 	and.w	r3, r3, #3
 800487e:	4293      	cmp	r3, r2
 8004880:	d00c      	beq.n	800489c <RCCEx_PLLSAI1_Config+0x30>
 8004882:	2001      	movs	r0, #1
 8004884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004886:	6803      	ldr	r3, [r0, #0]
 8004888:	2b02      	cmp	r3, #2
 800488a:	d043      	beq.n	8004914 <RCCEx_PLLSAI1_Config+0xa8>
 800488c:	2b03      	cmp	r3, #3
 800488e:	d04d      	beq.n	800492c <RCCEx_PLLSAI1_Config+0xc0>
 8004890:	2b01      	cmp	r3, #1
 8004892:	d1f6      	bne.n	8004882 <RCCEx_PLLSAI1_Config+0x16>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004894:	6812      	ldr	r2, [r2, #0]
 8004896:	0797      	lsls	r7, r2, #30
 8004898:	d5f3      	bpl.n	8004882 <RCCEx_PLLSAI1_Config+0x16>
 800489a:	e03e      	b.n	800491a <RCCEx_PLLSAI1_Config+0xae>
       ||
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0f0      	beq.n	8004882 <RCCEx_PLLSAI1_Config+0x16>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048a0:	4c37      	ldr	r4, [pc, #220]	; (8004980 <RCCEx_PLLSAI1_Config+0x114>)
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048a8:	6023      	str	r3, [r4, #0]
 80048aa:	460f      	mov	r7, r1
 80048ac:	4606      	mov	r6, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ae:	f7fc fb4b 	bl	8000f48 <HAL_GetTick>
 80048b2:	4605      	mov	r5, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048b4:	e004      	b.n	80048c0 <RCCEx_PLLSAI1_Config+0x54>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048b6:	f7fc fb47 	bl	8000f48 <HAL_GetTick>
 80048ba:	1b40      	subs	r0, r0, r5
 80048bc:	2802      	cmp	r0, #2
 80048be:	d833      	bhi.n	8004928 <RCCEx_PLLSAI1_Config+0xbc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048c0:	6823      	ldr	r3, [r4, #0]
 80048c2:	011a      	lsls	r2, r3, #4
 80048c4:	d4f7      	bmi.n	80048b6 <RCCEx_PLLSAI1_Config+0x4a>
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048c6:	2f00      	cmp	r7, #0
 80048c8:	d137      	bne.n	800493a <RCCEx_PLLSAI1_Config+0xce>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048ca:	68f3      	ldr	r3, [r6, #12]
 80048cc:	68b5      	ldr	r5, [r6, #8]
 80048ce:	6920      	ldr	r0, [r4, #16]
 80048d0:	492c      	ldr	r1, [pc, #176]	; (8004984 <RCCEx_PLLSAI1_Config+0x118>)
 80048d2:	6872      	ldr	r2, [r6, #4]
 80048d4:	06db      	lsls	r3, r3, #27
 80048d6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80048da:	4001      	ands	r1, r0
 80048dc:	430b      	orrs	r3, r1
 80048de:	3a01      	subs	r2, #1
 80048e0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80048e4:	6123      	str	r3, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80048e6:	4c26      	ldr	r4, [pc, #152]	; (8004980 <RCCEx_PLLSAI1_Config+0x114>)
 80048e8:	6823      	ldr	r3, [r4, #0]
 80048ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048ee:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f0:	f7fc fb2a 	bl	8000f48 <HAL_GetTick>
 80048f4:	4605      	mov	r5, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048f6:	e004      	b.n	8004902 <RCCEx_PLLSAI1_Config+0x96>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048f8:	f7fc fb26 	bl	8000f48 <HAL_GetTick>
 80048fc:	1b40      	subs	r0, r0, r5
 80048fe:	2802      	cmp	r0, #2
 8004900:	d812      	bhi.n	8004928 <RCCEx_PLLSAI1_Config+0xbc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	011b      	lsls	r3, r3, #4
 8004906:	d5f7      	bpl.n	80048f8 <RCCEx_PLLSAI1_Config+0x8c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004908:	69b2      	ldr	r2, [r6, #24]
 800490a:	6923      	ldr	r3, [r4, #16]
 800490c:	4313      	orrs	r3, r2
 800490e:	6123      	str	r3, [r4, #16]
 8004910:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8004912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004914:	6812      	ldr	r2, [r2, #0]
 8004916:	0556      	lsls	r6, r2, #21
 8004918:	d5b3      	bpl.n	8004882 <RCCEx_PLLSAI1_Config+0x16>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800491a:	4c19      	ldr	r4, [pc, #100]	; (8004980 <RCCEx_PLLSAI1_Config+0x114>)
 800491c:	68e2      	ldr	r2, [r4, #12]
 800491e:	f022 0203 	bic.w	r2, r2, #3
 8004922:	4313      	orrs	r3, r2
 8004924:	60e3      	str	r3, [r4, #12]
 8004926:	e7bb      	b.n	80048a0 <RCCEx_PLLSAI1_Config+0x34>
        status = HAL_TIMEOUT;
 8004928:	2003      	movs	r0, #3
 800492a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800492c:	6814      	ldr	r4, [r2, #0]
 800492e:	03a5      	lsls	r5, r4, #14
 8004930:	d4f3      	bmi.n	800491a <RCCEx_PLLSAI1_Config+0xae>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004932:	6812      	ldr	r2, [r2, #0]
 8004934:	0354      	lsls	r4, r2, #13
 8004936:	d5a4      	bpl.n	8004882 <RCCEx_PLLSAI1_Config+0x16>
 8004938:	e7ef      	b.n	800491a <RCCEx_PLLSAI1_Config+0xae>
      else if(Divider == DIVIDER_Q_UPDATE)
 800493a:	2f01      	cmp	r7, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800493c:	6925      	ldr	r5, [r4, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 800493e:	d00f      	beq.n	8004960 <RCCEx_PLLSAI1_Config+0xf4>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004940:	4b11      	ldr	r3, [pc, #68]	; (8004988 <RCCEx_PLLSAI1_Config+0x11c>)
 8004942:	68b0      	ldr	r0, [r6, #8]
 8004944:	6871      	ldr	r1, [r6, #4]
 8004946:	6972      	ldr	r2, [r6, #20]
 8004948:	402b      	ands	r3, r5
 800494a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800494e:	3901      	subs	r1, #1
 8004950:	0852      	lsrs	r2, r2, #1
 8004952:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004956:	3a01      	subs	r2, #1
 8004958:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800495c:	6123      	str	r3, [r4, #16]
 800495e:	e7c2      	b.n	80048e6 <RCCEx_PLLSAI1_Config+0x7a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004960:	4b0a      	ldr	r3, [pc, #40]	; (800498c <RCCEx_PLLSAI1_Config+0x120>)
 8004962:	68b0      	ldr	r0, [r6, #8]
 8004964:	6871      	ldr	r1, [r6, #4]
 8004966:	6932      	ldr	r2, [r6, #16]
 8004968:	402b      	ands	r3, r5
 800496a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800496e:	3901      	subs	r1, #1
 8004970:	0852      	lsrs	r2, r2, #1
 8004972:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004976:	3a01      	subs	r2, #1
 8004978:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800497c:	6123      	str	r3, [r4, #16]
 800497e:	e7b2      	b.n	80048e6 <RCCEx_PLLSAI1_Config+0x7a>
 8004980:	40021000 	.word	0x40021000
 8004984:	07ff800f 	.word	0x07ff800f
 8004988:	f9ff800f 	.word	0xf9ff800f
 800498c:	ff9f800f 	.word	0xff9f800f

08004990 <RCCEx_PLLSAI2_Config>:
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004990:	4a44      	ldr	r2, [pc, #272]	; (8004aa4 <RCCEx_PLLSAI2_Config+0x114>)
{
 8004992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004994:	68d3      	ldr	r3, [r2, #12]
 8004996:	079b      	lsls	r3, r3, #30
 8004998:	d007      	beq.n	80049aa <RCCEx_PLLSAI2_Config+0x1a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800499a:	68d3      	ldr	r3, [r2, #12]
 800499c:	6802      	ldr	r2, [r0, #0]
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d00c      	beq.n	80049c0 <RCCEx_PLLSAI2_Config+0x30>
 80049a6:	2001      	movs	r0, #1
 80049a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80049aa:	6803      	ldr	r3, [r0, #0]
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d043      	beq.n	8004a38 <RCCEx_PLLSAI2_Config+0xa8>
 80049b0:	2b03      	cmp	r3, #3
 80049b2:	d04d      	beq.n	8004a50 <RCCEx_PLLSAI2_Config+0xc0>
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d1f6      	bne.n	80049a6 <RCCEx_PLLSAI2_Config+0x16>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049b8:	6812      	ldr	r2, [r2, #0]
 80049ba:	0797      	lsls	r7, r2, #30
 80049bc:	d5f3      	bpl.n	80049a6 <RCCEx_PLLSAI2_Config+0x16>
 80049be:	e03e      	b.n	8004a3e <RCCEx_PLLSAI2_Config+0xae>
       ||
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d0f0      	beq.n	80049a6 <RCCEx_PLLSAI2_Config+0x16>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80049c4:	4c37      	ldr	r4, [pc, #220]	; (8004aa4 <RCCEx_PLLSAI2_Config+0x114>)
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049cc:	6023      	str	r3, [r4, #0]
 80049ce:	460f      	mov	r7, r1
 80049d0:	4606      	mov	r6, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049d2:	f7fc fab9 	bl	8000f48 <HAL_GetTick>
 80049d6:	4605      	mov	r5, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049d8:	e004      	b.n	80049e4 <RCCEx_PLLSAI2_Config+0x54>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049da:	f7fc fab5 	bl	8000f48 <HAL_GetTick>
 80049de:	1b40      	subs	r0, r0, r5
 80049e0:	2802      	cmp	r0, #2
 80049e2:	d833      	bhi.n	8004a4c <RCCEx_PLLSAI2_Config+0xbc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049e4:	6823      	ldr	r3, [r4, #0]
 80049e6:	009a      	lsls	r2, r3, #2
 80049e8:	d4f7      	bmi.n	80049da <RCCEx_PLLSAI2_Config+0x4a>
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049ea:	2f00      	cmp	r7, #0
 80049ec:	d137      	bne.n	8004a5e <RCCEx_PLLSAI2_Config+0xce>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049ee:	68f3      	ldr	r3, [r6, #12]
 80049f0:	68b5      	ldr	r5, [r6, #8]
 80049f2:	6960      	ldr	r0, [r4, #20]
 80049f4:	492c      	ldr	r1, [pc, #176]	; (8004aa8 <RCCEx_PLLSAI2_Config+0x118>)
 80049f6:	6872      	ldr	r2, [r6, #4]
 80049f8:	06db      	lsls	r3, r3, #27
 80049fa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80049fe:	4001      	ands	r1, r0
 8004a00:	430b      	orrs	r3, r1
 8004a02:	3a01      	subs	r2, #1
 8004a04:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004a08:	6163      	str	r3, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a0a:	4c26      	ldr	r4, [pc, #152]	; (8004aa4 <RCCEx_PLLSAI2_Config+0x114>)
 8004a0c:	6823      	ldr	r3, [r4, #0]
 8004a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a12:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a14:	f7fc fa98 	bl	8000f48 <HAL_GetTick>
 8004a18:	4605      	mov	r5, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a1a:	e004      	b.n	8004a26 <RCCEx_PLLSAI2_Config+0x96>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a1c:	f7fc fa94 	bl	8000f48 <HAL_GetTick>
 8004a20:	1b40      	subs	r0, r0, r5
 8004a22:	2802      	cmp	r0, #2
 8004a24:	d812      	bhi.n	8004a4c <RCCEx_PLLSAI2_Config+0xbc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a26:	6823      	ldr	r3, [r4, #0]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	d5f7      	bpl.n	8004a1c <RCCEx_PLLSAI2_Config+0x8c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004a2c:	69b2      	ldr	r2, [r6, #24]
 8004a2e:	6963      	ldr	r3, [r4, #20]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	6163      	str	r3, [r4, #20]
 8004a34:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8004a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a38:	6812      	ldr	r2, [r2, #0]
 8004a3a:	0556      	lsls	r6, r2, #21
 8004a3c:	d5b3      	bpl.n	80049a6 <RCCEx_PLLSAI2_Config+0x16>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004a3e:	4c19      	ldr	r4, [pc, #100]	; (8004aa4 <RCCEx_PLLSAI2_Config+0x114>)
 8004a40:	68e2      	ldr	r2, [r4, #12]
 8004a42:	f022 0203 	bic.w	r2, r2, #3
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60e3      	str	r3, [r4, #12]
 8004a4a:	e7bb      	b.n	80049c4 <RCCEx_PLLSAI2_Config+0x34>
        status = HAL_TIMEOUT;
 8004a4c:	2003      	movs	r0, #3
 8004a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a50:	6814      	ldr	r4, [r2, #0]
 8004a52:	03a5      	lsls	r5, r4, #14
 8004a54:	d4f3      	bmi.n	8004a3e <RCCEx_PLLSAI2_Config+0xae>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a56:	6812      	ldr	r2, [r2, #0]
 8004a58:	0354      	lsls	r4, r2, #13
 8004a5a:	d5a4      	bpl.n	80049a6 <RCCEx_PLLSAI2_Config+0x16>
 8004a5c:	e7ef      	b.n	8004a3e <RCCEx_PLLSAI2_Config+0xae>
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a5e:	2f01      	cmp	r7, #1
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a60:	6965      	ldr	r5, [r4, #20]
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a62:	d00f      	beq.n	8004a84 <RCCEx_PLLSAI2_Config+0xf4>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a64:	4b11      	ldr	r3, [pc, #68]	; (8004aac <RCCEx_PLLSAI2_Config+0x11c>)
 8004a66:	68b0      	ldr	r0, [r6, #8]
 8004a68:	6871      	ldr	r1, [r6, #4]
 8004a6a:	6972      	ldr	r2, [r6, #20]
 8004a6c:	402b      	ands	r3, r5
 8004a6e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004a72:	3901      	subs	r1, #1
 8004a74:	0852      	lsrs	r2, r2, #1
 8004a76:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004a7a:	3a01      	subs	r2, #1
 8004a7c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004a80:	6163      	str	r3, [r4, #20]
 8004a82:	e7c2      	b.n	8004a0a <RCCEx_PLLSAI2_Config+0x7a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a84:	4b0a      	ldr	r3, [pc, #40]	; (8004ab0 <RCCEx_PLLSAI2_Config+0x120>)
 8004a86:	68b0      	ldr	r0, [r6, #8]
 8004a88:	6871      	ldr	r1, [r6, #4]
 8004a8a:	6932      	ldr	r2, [r6, #16]
 8004a8c:	402b      	ands	r3, r5
 8004a8e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004a92:	3901      	subs	r1, #1
 8004a94:	0852      	lsrs	r2, r2, #1
 8004a96:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004a9a:	3a01      	subs	r2, #1
 8004a9c:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8004aa0:	6163      	str	r3, [r4, #20]
 8004aa2:	e7b2      	b.n	8004a0a <RCCEx_PLLSAI2_Config+0x7a>
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	07ff800f 	.word	0x07ff800f
 8004aac:	f9ff800f 	.word	0xf9ff800f
 8004ab0:	ff9f800f 	.word	0xff9f800f

08004ab4 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ab8:	6803      	ldr	r3, [r0, #0]
 8004aba:	f413 6600 	ands.w	r6, r3, #2048	; 0x800
{
 8004abe:	b082      	sub	sp, #8
 8004ac0:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ac2:	d014      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x3a>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004ac4:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8004ac6:	2940      	cmp	r1, #64	; 0x40
 8004ac8:	f000 8215 	beq.w	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004acc:	f200 8234 	bhi.w	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004ad0:	2900      	cmp	r1, #0
 8004ad2:	f000 8201 	beq.w	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004ad6:	2920      	cmp	r1, #32
 8004ad8:	f040 8232 	bne.w	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004adc:	2100      	movs	r1, #0
 8004ade:	3020      	adds	r0, #32
 8004ae0:	f7ff ff56 	bl	8004990 <RCCEx_PLLSAI2_Config>
 8004ae4:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004ae6:	2e00      	cmp	r6, #0
 8004ae8:	f000 8239 	beq.w	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8004aec:	6823      	ldr	r3, [r4, #0]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004aee:	04df      	lsls	r7, r3, #19
 8004af0:	f140 8132 	bpl.w	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004af4:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8004af6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004afa:	f000 820b 	beq.w	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8004afe:	f200 8122 	bhi.w	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004b02:	2900      	cmp	r1, #0
 8004b04:	f000 81ed 	beq.w	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004b08:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004b0c:	f040 8123 	bne.w	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b10:	2100      	movs	r1, #0
 8004b12:	f104 0020 	add.w	r0, r4, #32
 8004b16:	f7ff ff3b 	bl	8004990 <RCCEx_PLLSAI2_Config>
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	4607      	mov	r7, r0
    if(ret == HAL_OK)
 8004b1e:	2f00      	cmp	r7, #0
 8004b20:	f040 81e7 	bne.w	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b24:	49c2      	ldr	r1, [pc, #776]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004b26:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004b28:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8004b2c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b30:	4302      	orrs	r2, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b32:	039d      	lsls	r5, r3, #14
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b34:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b38:	f100 8112 	bmi.w	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b3c:	07dd      	lsls	r5, r3, #31
 8004b3e:	d508      	bpl.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b40:	49bb      	ldr	r1, [pc, #748]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004b42:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004b44:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004b48:	f022 0203 	bic.w	r2, r2, #3
 8004b4c:	4302      	orrs	r2, r0
 8004b4e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b52:	0798      	lsls	r0, r3, #30
 8004b54:	d508      	bpl.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b56:	49b6      	ldr	r1, [pc, #728]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004b58:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004b5a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004b5e:	f022 020c 	bic.w	r2, r2, #12
 8004b62:	4302      	orrs	r2, r0
 8004b64:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b68:	0759      	lsls	r1, r3, #29
 8004b6a:	d508      	bpl.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xca>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b6c:	49b0      	ldr	r1, [pc, #704]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004b6e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004b70:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004b74:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8004b78:	4302      	orrs	r2, r0
 8004b7a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b7e:	071a      	lsls	r2, r3, #28
 8004b80:	d508      	bpl.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b82:	49ab      	ldr	r1, [pc, #684]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004b84:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004b86:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004b8a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004b8e:	4302      	orrs	r2, r0
 8004b90:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b94:	06dd      	lsls	r5, r3, #27
 8004b96:	d508      	bpl.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xf6>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b98:	49a5      	ldr	r1, [pc, #660]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004b9a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004b9c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004ba0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004ba4:	4302      	orrs	r2, r0
 8004ba6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004baa:	0698      	lsls	r0, r3, #26
 8004bac:	d508      	bpl.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bae:	49a0      	ldr	r1, [pc, #640]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004bb0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004bb2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004bb6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004bba:	4302      	orrs	r2, r0
 8004bbc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004bc0:	0599      	lsls	r1, r3, #22
 8004bc2:	d508      	bpl.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bc4:	499a      	ldr	r1, [pc, #616]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004bc6:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004bc8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004bcc:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8004bd0:	4302      	orrs	r2, r0
 8004bd2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004bd6:	055a      	lsls	r2, r3, #21
 8004bd8:	d508      	bpl.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x138>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004bda:	4995      	ldr	r1, [pc, #596]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004bdc:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004bde:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004be2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004be6:	4302      	orrs	r2, r0
 8004be8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bec:	065d      	lsls	r5, r3, #25
 8004bee:	d508      	bpl.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bf0:	498f      	ldr	r1, [pc, #572]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004bf2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004bf4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004bf8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004bfc:	4302      	orrs	r2, r0
 8004bfe:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c02:	0618      	lsls	r0, r3, #24
 8004c04:	d508      	bpl.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x164>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c06:	498a      	ldr	r1, [pc, #552]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c0a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004c0e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004c12:	4302      	orrs	r2, r0
 8004c14:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c18:	05d9      	lsls	r1, r3, #23
 8004c1a:	d508      	bpl.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x17a>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c1c:	4984      	ldr	r1, [pc, #528]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004c1e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004c20:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004c24:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004c28:	4302      	orrs	r2, r0
 8004c2a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c2e:	02da      	lsls	r2, r3, #11
 8004c30:	d508      	bpl.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x190>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c32:	497f      	ldr	r1, [pc, #508]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004c34:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004c36:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8004c3a:	f022 0203 	bic.w	r2, r2, #3
 8004c3e:	4302      	orrs	r2, r0
 8004c40:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c44:	049d      	lsls	r5, r3, #18
 8004c46:	d510      	bpl.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c48:	4879      	ldr	r0, [pc, #484]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004c4a:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004c4c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004c50:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004c54:	430a      	orrs	r2, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c56:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c5a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c5e:	f000 812a 	beq.w	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x402>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c62:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004c66:	f000 817d 	beq.w	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c6a:	0318      	lsls	r0, r3, #12
 8004c6c:	d51a      	bpl.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c6e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8004c70:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8004c74:	f000 8124 	beq.w	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8004c78:	496d      	ldr	r1, [pc, #436]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004c7a:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8004c7e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c82:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
 8004c86:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004c8a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004c8e:	4302      	orrs	r2, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c90:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c94:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c98:	f000 8159 	beq.w	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x49a>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c9c:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8004ca0:	f000 8176 	beq.w	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ca4:	0359      	lsls	r1, r3, #13
 8004ca6:	d510      	bpl.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x216>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ca8:	4861      	ldr	r0, [pc, #388]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004caa:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004cac:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004cb0:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004cb4:	430a      	orrs	r2, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cb6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cba:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cbe:	f000 80f5 	beq.w	8004eac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004cc2:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004cc6:	f000 8158 	beq.w	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cca:	045a      	lsls	r2, r3, #17
 8004ccc:	d50d      	bpl.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cce:	4858      	ldr	r0, [pc, #352]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004cd0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8004cd4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004cd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004cdc:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004cde:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ce2:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ce6:	f000 811c 	beq.w	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x46e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004cea:	03dd      	lsls	r5, r3, #15
 8004cec:	d509      	bpl.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x24e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004cee:	4950      	ldr	r1, [pc, #320]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004cf0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004cf4:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8004cf8:	f022 0204 	bic.w	r2, r2, #4
 8004cfc:	4302      	orrs	r2, r0
 8004cfe:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004d02:	0298      	lsls	r0, r3, #10
 8004d04:	d509      	bpl.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x266>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004d06:	494a      	ldr	r1, [pc, #296]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004d08:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8004d0c:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8004d10:	f022 0218 	bic.w	r2, r2, #24
 8004d14:	4302      	orrs	r2, r0
 8004d16:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d1a:	0259      	lsls	r1, r3, #9
 8004d1c:	f100 8094 	bmi.w	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x394>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004d20:	01db      	lsls	r3, r3, #7
 8004d22:	d50c      	bpl.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004d24:	4a42      	ldr	r2, [pc, #264]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004d26:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8004d2a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004d2e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004d32:	430b      	orrs	r3, r1
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004d34:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004d38:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004d3c:	d07c      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x384>
}
 8004d3e:	4630      	mov	r0, r6
 8004d40:	b002      	add	sp, #8
 8004d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch(PeriphClkInit->Sai2ClockSelection)
 8004d46:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8004d4a:	f000 80fb 	beq.w	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x490>
 8004d4e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004d52:	f000 80f7 	beq.w	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x490>
      ret = HAL_ERROR;
 8004d56:	2601      	movs	r6, #1
 8004d58:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d5a:	039d      	lsls	r5, r3, #14
 8004d5c:	f57f aeee 	bpl.w	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x88>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d60:	4b33      	ldr	r3, [pc, #204]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004d62:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004d64:	00d0      	lsls	r0, r2, #3
 8004d66:	d556      	bpl.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x362>
    FlagStatus       pwrclkchanged = RESET;
 8004d68:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d6c:	4d31      	ldr	r5, [pc, #196]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x380>)
 8004d6e:	682b      	ldr	r3, [r5, #0]
 8004d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d74:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004d76:	f7fc f8e7 	bl	8000f48 <HAL_GetTick>
 8004d7a:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d7c:	e006      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d7e:	f7fc f8e3 	bl	8000f48 <HAL_GetTick>
 8004d82:	eba0 0009 	sub.w	r0, r0, r9
 8004d86:	2802      	cmp	r0, #2
 8004d88:	f200 8085 	bhi.w	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d8c:	682b      	ldr	r3, [r5, #0]
 8004d8e:	05d9      	lsls	r1, r3, #23
 8004d90:	d5f5      	bpl.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    if(ret == HAL_OK)
 8004d92:	2f00      	cmp	r7, #0
 8004d94:	f040 8109 	bne.w	8004faa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d98:	4a25      	ldr	r2, [pc, #148]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d9a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d9e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004da2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004da6:	d029      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004da8:	428b      	cmp	r3, r1
 8004daa:	f000 80fc 	beq.w	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004dae:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8004db2:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 8004db6:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8004dba:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004dbe:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004dc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004dc6:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8004dca:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8004dce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004dd2:	07da      	lsls	r2, r3, #31
 8004dd4:	d512      	bpl.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x348>
        tickstart = HAL_GetTick();
 8004dd6:	f7fc f8b7 	bl	8000f48 <HAL_GetTick>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dda:	4d15      	ldr	r5, [pc, #84]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
        tickstart = HAL_GetTick();
 8004ddc:	4682      	mov	sl, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dde:	f241 3988 	movw	r9, #5000	; 0x1388
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004de2:	e005      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004de4:	f7fc f8b0 	bl	8000f48 <HAL_GetTick>
 8004de8:	eba0 000a 	sub.w	r0, r0, sl
 8004dec:	4548      	cmp	r0, r9
 8004dee:	d852      	bhi.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004df0:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8004df4:	079b      	lsls	r3, r3, #30
 8004df6:	d5f5      	bpl.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004df8:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dfc:	4a0c      	ldr	r2, [pc, #48]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004dfe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e06:	430b      	orrs	r3, r1
 8004e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if(pwrclkchanged == SET)
 8004e0c:	f1b8 0f00 	cmp.w	r8, #0
 8004e10:	d146      	bne.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004e12:	6823      	ldr	r3, [r4, #0]
 8004e14:	e692      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x88>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e16:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004e18:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004e1c:	659a      	str	r2, [r3, #88]	; 0x58
 8004e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e24:	9301      	str	r3, [sp, #4]
 8004e26:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004e28:	f04f 0801 	mov.w	r8, #1
 8004e2c:	e79e      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004e2e:	bf00      	nop
 8004e30:	40021000 	.word	0x40021000
 8004e34:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e38:	68d3      	ldr	r3, [r2, #12]
}
 8004e3a:	4630      	mov	r0, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e40:	60d3      	str	r3, [r2, #12]
}
 8004e42:	b002      	add	sp, #8
 8004e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e48:	4d5a      	ldr	r5, [pc, #360]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x500>)
 8004e4a:	682b      	ldr	r3, [r5, #0]
 8004e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e50:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004e52:	f7fc f879 	bl	8000f48 <HAL_GetTick>
 8004e56:	4680      	mov	r8, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e58:	e005      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e5a:	f7fc f875 	bl	8000f48 <HAL_GetTick>
 8004e5e:	eba0 0008 	sub.w	r0, r0, r8
 8004e62:	2802      	cmp	r0, #2
 8004e64:	d870      	bhi.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x494>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e66:	682b      	ldr	r3, [r5, #0]
 8004e68:	009a      	lsls	r2, r3, #2
 8004e6a:	d4f6      	bmi.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    if(ret == HAL_OK)
 8004e6c:	2f00      	cmp	r7, #0
 8004e6e:	d173      	bne.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004e70:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8004e74:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004e78:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004e82:	2102      	movs	r1, #2
 8004e84:	f104 0020 	add.w	r0, r4, #32
 8004e88:	f7ff fd82 	bl	8004990 <RCCEx_PLLSAI2_Config>
    if(ret != HAL_OK)
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	f040 808e 	bne.w	8004fae <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004e92:	6823      	ldr	r3, [r4, #0]
 8004e94:	e744      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
        ret = HAL_TIMEOUT;
 8004e96:	2603      	movs	r6, #3
 8004e98:	4637      	mov	r7, r6
    if(pwrclkchanged == SET)
 8004e9a:	f1b8 0f00 	cmp.w	r8, #0
 8004e9e:	d0b8      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ea0:	4a44      	ldr	r2, [pc, #272]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x500>)
 8004ea2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004ea4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ea8:	6593      	str	r3, [r2, #88]	; 0x58
 8004eaa:	e7b2      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eac:	68c2      	ldr	r2, [r0, #12]
 8004eae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004eb2:	60c2      	str	r2, [r0, #12]
 8004eb4:	e709      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x216>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eb6:	68c2      	ldr	r2, [r0, #12]
 8004eb8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004ebc:	60c2      	str	r2, [r0, #12]
 8004ebe:	e6d4      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ec0:	4a3c      	ldr	r2, [pc, #240]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x500>)
 8004ec2:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
 8004ec6:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8004eca:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ece:	68d1      	ldr	r1, [r2, #12]
 8004ed0:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004ed4:	60d1      	str	r1, [r2, #12]
 8004ed6:	e6e5      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ed8:	3004      	adds	r0, #4
 8004eda:	f7ff fcc7 	bl	800486c <RCCEx_PLLSAI1_Config>
 8004ede:	4606      	mov	r6, r0
      break;
 8004ee0:	e601      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x32>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ee2:	1d20      	adds	r0, r4, #4
 8004ee4:	f7ff fcc2 	bl	800486c <RCCEx_PLLSAI1_Config>
 8004ee8:	4607      	mov	r7, r0
 8004eea:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004eec:	2f00      	cmp	r7, #0
 8004eee:	f43f ae19 	beq.w	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004ef2:	463e      	mov	r6, r7
 8004ef4:	e731      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ef6:	482f      	ldr	r0, [pc, #188]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x500>)
 8004ef8:	68c2      	ldr	r2, [r0, #12]
 8004efa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004efe:	60c2      	str	r2, [r0, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f00:	482c      	ldr	r0, [pc, #176]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x500>)
 8004f02:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 8004f06:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f0a:	4311      	orrs	r1, r2
 8004f0c:	f8c0 109c 	str.w	r1, [r0, #156]	; 0x9c
 8004f10:	2600      	movs	r6, #0
 8004f12:	e5ec      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f14:	4927      	ldr	r1, [pc, #156]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x500>)
 8004f16:	68ca      	ldr	r2, [r1, #12]
 8004f18:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004f1c:	60ca      	str	r2, [r1, #12]
      break;
 8004f1e:	4637      	mov	r7, r6
 8004f20:	e5fd      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x6a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f22:	2102      	movs	r1, #2
 8004f24:	1d20      	adds	r0, r4, #4
 8004f26:	f7ff fca1 	bl	800486c <RCCEx_PLLSAI1_Config>
 8004f2a:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8004f2c:	4607      	mov	r7, r0
 8004f2e:	2800      	cmp	r0, #0
 8004f30:	f43f aedb 	beq.w	8004cea <HAL_RCCEx_PeriphCLKConfig+0x236>
 8004f34:	4606      	mov	r6, r0
 8004f36:	e6d8      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x236>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004f38:	2960      	cmp	r1, #96	; 0x60
 8004f3a:	d0e1      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 8004f3c:	2980      	cmp	r1, #128	; 0x80
 8004f3e:	d0df      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x44c>
      ret = HAL_ERROR;
 8004f40:	2601      	movs	r6, #1
 8004f42:	e5d4      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x3a>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004f44:	4637      	mov	r7, r6
 8004f46:	e5ea      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004f48:	6823      	ldr	r3, [r4, #0]
        ret = HAL_TIMEOUT;
 8004f4a:	2603      	movs	r6, #3
 8004f4c:	e6e8      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f4e:	68ca      	ldr	r2, [r1, #12]
 8004f50:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004f54:	60ca      	str	r2, [r1, #12]
 8004f56:	e6a5      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    if(ret == HAL_OK)
 8004f58:	463e      	mov	r6, r7
 8004f5a:	6823      	ldr	r3, [r4, #0]
 8004f5c:	e6e0      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004f5e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8004f60:	6823      	ldr	r3, [r4, #0]
 8004f62:	e7cd      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x44c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f64:	2101      	movs	r1, #1
 8004f66:	1d20      	adds	r0, r4, #4
 8004f68:	f7ff fc80 	bl	800486c <RCCEx_PLLSAI1_Config>
 8004f6c:	6823      	ldr	r3, [r4, #0]
        if(ret != HAL_OK)
 8004f6e:	4607      	mov	r7, r0
 8004f70:	2800      	cmp	r0, #0
 8004f72:	f43f ae7a 	beq.w	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004f76:	4606      	mov	r6, r0
 8004f78:	e677      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f7a:	2101      	movs	r1, #1
 8004f7c:	1d20      	adds	r0, r4, #4
 8004f7e:	f7ff fc75 	bl	800486c <RCCEx_PLLSAI1_Config>
 8004f82:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8004f84:	4607      	mov	r7, r0
 8004f86:	2800      	cmp	r0, #0
 8004f88:	f43f ae9f 	beq.w	8004cca <HAL_RCCEx_PeriphCLKConfig+0x216>
 8004f8c:	4606      	mov	r6, r0
 8004f8e:	e69c      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x216>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f90:	2101      	movs	r1, #1
 8004f92:	1d20      	adds	r0, r4, #4
 8004f94:	f7ff fc6a 	bl	800486c <RCCEx_PLLSAI1_Config>
 8004f98:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8004f9a:	4607      	mov	r7, r0
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	f43f ae81 	beq.w	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8004fa2:	4606      	mov	r6, r0
 8004fa4:	e67e      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	e713      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
 8004faa:	463e      	mov	r6, r7
 8004fac:	e72e      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x358>
    if(ret != HAL_OK)
 8004fae:	4606      	mov	r6, r0
 8004fb0:	6823      	ldr	r3, [r4, #0]
 8004fb2:	e6b5      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004fb4:	40021000 	.word	0x40021000

08004fb8 <HAL_RTC_Init>:
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_ERROR;

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004fb8:	2800      	cmp	r0, #0
 8004fba:	d06e      	beq.n	800509a <HAL_RTC_Init+0xe2>
{
 8004fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004fbe:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8004fc2:	4604      	mov	r4, r0
 8004fc4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d04f      	beq.n	800506c <HAL_RTC_Init+0xb4>
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fcc:	6823      	ldr	r3, [r4, #0]
 8004fce:	2253      	movs	r2, #83	; 0x53
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004fd0:	2002      	movs	r0, #2
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fd2:	21ca      	movs	r1, #202	; 0xca
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004fd4:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fd8:	6259      	str	r1, [r3, #36]	; 0x24
 8004fda:	625a      	str	r2, [r3, #36]	; 0x24
        return HAL_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004fdc:	68da      	ldr	r2, [r3, #12]
 8004fde:	0655      	lsls	r5, r2, #25
 8004fe0:	d52c      	bpl.n	800503c <HAL_RTC_Init+0x84>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004fe2:	6899      	ldr	r1, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004fe4:	6862      	ldr	r2, [r4, #4]
 8004fe6:	6927      	ldr	r7, [r4, #16]
 8004fe8:	69a6      	ldr	r6, [r4, #24]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004fea:	68a0      	ldr	r0, [r4, #8]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004fec:	68e5      	ldr	r5, [r4, #12]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004fee:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8004ff2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8004ff6:	6099      	str	r1, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004ff8:	6899      	ldr	r1, [r3, #8]
 8004ffa:	433a      	orrs	r2, r7
 8004ffc:	4332      	orrs	r2, r6
 8004ffe:	430a      	orrs	r2, r1
 8005000:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005002:	611d      	str	r5, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005004:	691a      	ldr	r2, [r3, #16]
 8005006:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800500a:	611a      	str	r2, [r3, #16]
      CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800500c:	68da      	ldr	r2, [r3, #12]
 800500e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005012:	60da      	str	r2, [r3, #12]
      if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005014:	689a      	ldr	r2, [r3, #8]
 8005016:	0692      	lsls	r2, r2, #26
 8005018:	d52d      	bpl.n	8005076 <HAL_RTC_Init+0xbe>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800501a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800501c:	6960      	ldr	r0, [r4, #20]
 800501e:	69e2      	ldr	r2, [r4, #28]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005020:	f021 0103 	bic.w	r1, r1, #3
 8005024:	64d9      	str	r1, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005026:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005028:	4302      	orrs	r2, r0
 800502a:	430a      	orrs	r2, r1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800502c:	25ff      	movs	r5, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_READY;
 800502e:	2101      	movs	r1, #1
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005030:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->State = HAL_RTC_STATE_READY;
 8005032:	2000      	movs	r0, #0
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005034:	625d      	str	r5, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_READY;
 8005036:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
 800503a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800503c:	f04f 32ff 	mov.w	r2, #4294967295
 8005040:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005042:	f7fb ff81 	bl	8000f48 <HAL_GetTick>
 8005046:	4605      	mov	r5, r0
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005048:	6823      	ldr	r3, [r4, #0]
 800504a:	68da      	ldr	r2, [r3, #12]
 800504c:	0650      	lsls	r0, r2, #25
 800504e:	d4c8      	bmi.n	8004fe2 <HAL_RTC_Init+0x2a>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005050:	f7fb ff7a 	bl	8000f48 <HAL_GetTick>
 8005054:	1b40      	subs	r0, r0, r5
 8005056:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800505a:	d9f5      	bls.n	8005048 <HAL_RTC_Init+0x90>
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800505c:	6822      	ldr	r2, [r4, #0]
 800505e:	21ff      	movs	r1, #255	; 0xff
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005060:	2304      	movs	r3, #4
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005062:	6251      	str	r1, [r2, #36]	; 0x24
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005064:	2001      	movs	r0, #1
 8005066:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800506a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hrtc->Lock = HAL_UNLOCKED;
 800506c:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 8005070:	f00c f82c 	bl	80110cc <HAL_RTC_MspInit>
 8005074:	e7aa      	b.n	8004fcc <HAL_RTC_Init+0x14>
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005076:	68da      	ldr	r2, [r3, #12]
 8005078:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800507c:	60da      	str	r2, [r3, #12]
  tickstart = HAL_GetTick();
 800507e:	f7fb ff63 	bl	8000f48 <HAL_GetTick>
 8005082:	4605      	mov	r5, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005084:	6823      	ldr	r3, [r4, #0]
 8005086:	68da      	ldr	r2, [r3, #12]
 8005088:	0691      	lsls	r1, r2, #26
 800508a:	d4c6      	bmi.n	800501a <HAL_RTC_Init+0x62>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800508c:	f7fb ff5c 	bl	8000f48 <HAL_GetTick>
 8005090:	1b40      	subs	r0, r0, r5
 8005092:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005096:	d9f5      	bls.n	8005084 <HAL_RTC_Init+0xcc>
 8005098:	e7e0      	b.n	800505c <HAL_RTC_Init+0xa4>
  HAL_StatusTypeDef status = HAL_ERROR;
 800509a:	2001      	movs	r0, #1
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop

080050a0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80050a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050a4:	b087      	sub	sp, #28
 80050a6:	4605      	mov	r5, r0
 80050a8:	4688      	mov	r8, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80050aa:	f7fb ff4d 	bl	8000f48 <HAL_GetTick>
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
  uint32_t *scr = pSCR;
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 80050ae:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 80050b0:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 80050b2:	6828      	ldr	r0, [r5, #0]
 80050b4:	f002 fef4 	bl	8007ea0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80050b8:	4604      	mov	r4, r0
 80050ba:	b118      	cbz	r0, 80050c4 <SD_FindSCR+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
    
  }

  return HAL_SD_ERROR_NONE;
}
 80050bc:	4620      	mov	r0, r4
 80050be:	b007      	add	sp, #28
 80050c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 80050c4:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80050c6:	6828      	ldr	r0, [r5, #0]
 80050c8:	0409      	lsls	r1, r1, #16
 80050ca:	f002 ffdd 	bl	8008088 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 80050ce:	4604      	mov	r4, r0
 80050d0:	2800      	cmp	r0, #0
 80050d2:	d1f3      	bne.n	80050bc <SD_FindSCR+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80050d4:	f04f 31ff 	mov.w	r1, #4294967295
  config.DataLength    = 8;
 80050d8:	2008      	movs	r0, #8
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80050da:	2202      	movs	r2, #2
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80050dc:	2301      	movs	r3, #1
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80050de:	9100      	str	r1, [sp, #0]
  config.DataLength    = 8;
 80050e0:	9001      	str	r0, [sp, #4]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80050e2:	4669      	mov	r1, sp
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80050e4:	2730      	movs	r7, #48	; 0x30
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80050e6:	6828      	ldr	r0, [r5, #0]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80050e8:	9404      	str	r4, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80050ea:	9203      	str	r2, [sp, #12]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80050ec:	9305      	str	r3, [sp, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80050ee:	9702      	str	r7, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80050f0:	f002 fec2 	bl	8007e78 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80050f4:	6828      	ldr	r0, [r5, #0]
 80050f6:	f003 f881 	bl	80081fc <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80050fa:	4604      	mov	r4, r0
 80050fc:	2800      	cmp	r0, #0
 80050fe:	d1dd      	bne.n	80050bc <SD_FindSCR+0x1c>
 8005100:	4683      	mov	fp, r0
 8005102:	4682      	mov	sl, r0
 8005104:	4681      	mov	r9, r0
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8005106:	f240 572a 	movw	r7, #1322	; 0x52a
 800510a:	e004      	b.n	8005116 <SD_FindSCR+0x76>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800510c:	f7fb ff1c 	bl	8000f48 <HAL_GetTick>
 8005110:	1b80      	subs	r0, r0, r6
 8005112:	3001      	adds	r0, #1
 8005114:	d018      	beq.n	8005148 <SD_FindSCR+0xa8>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8005116:	6828      	ldr	r0, [r5, #0]
 8005118:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800511a:	423b      	tst	r3, r7
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800511c:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800511e:	d10e      	bne.n	800513e <SD_FindSCR+0x9e>
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8005120:	031b      	lsls	r3, r3, #12
 8005122:	d4f3      	bmi.n	800510c <SD_FindSCR+0x6c>
 8005124:	f1b9 0f00 	cmp.w	r9, #0
 8005128:	d1f0      	bne.n	800510c <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800512a:	f002 fe91 	bl	8007e50 <SDMMC_ReadFIFO>
 800512e:	4682      	mov	sl, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8005130:	6828      	ldr	r0, [r5, #0]
 8005132:	f002 fe8d 	bl	8007e50 <SDMMC_ReadFIFO>
      index++;
 8005136:	f04f 0901 	mov.w	r9, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800513a:	4683      	mov	fp, r0
 800513c:	e7e6      	b.n	800510c <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800513e:	0719      	lsls	r1, r3, #28
 8005140:	d505      	bpl.n	800514e <SD_FindSCR+0xae>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005142:	2408      	movs	r4, #8
 8005144:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005146:	e7b9      	b.n	80050bc <SD_FindSCR+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 8005148:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800514c:	e7b6      	b.n	80050bc <SD_FindSCR+0x1c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800514e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005150:	079a      	lsls	r2, r3, #30
 8005152:	d502      	bpl.n	800515a <SD_FindSCR+0xba>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005154:	2402      	movs	r4, #2
 8005156:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005158:	e7b0      	b.n	80050bc <SD_FindSCR+0x1c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800515a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800515c:	069b      	lsls	r3, r3, #26
 800515e:	d502      	bpl.n	8005166 <SD_FindSCR+0xc6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005160:	2420      	movs	r4, #32
 8005162:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8005164:	e7aa      	b.n	80050bc <SD_FindSCR+0x1c>
 8005166:	fa9b f28b 	rev.w	r2, fp
 800516a:	fa9a f38a 	rev.w	r3, sl
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800516e:	4902      	ldr	r1, [pc, #8]	; (8005178 <SD_FindSCR+0xd8>)
 8005170:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005172:	e888 000c 	stmia.w	r8, {r2, r3}
  return HAL_SD_ERROR_NONE;
 8005176:	e7a1      	b.n	80050bc <SD_FindSCR+0x1c>
 8005178:	18000f3a 	.word	0x18000f3a

0800517c <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800517c:	6e02      	ldr	r2, [r0, #96]	; 0x60
{
 800517e:	b4f0      	push	{r4, r5, r6, r7}
 8005180:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005182:	0f97      	lsrs	r7, r2, #30
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005184:	f3c2 6683 	ubfx	r6, r2, #26, #4
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005188:	f3c2 6501 	ubfx	r5, r2, #24, #2
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800518c:	f3c2 4407 	ubfx	r4, r2, #16, #8
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005190:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005194:	b2d2      	uxtb	r2, r2
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005196:	700f      	strb	r7, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005198:	704e      	strb	r6, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800519a:	708d      	strb	r5, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800519c:	70cc      	strb	r4, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800519e:	7108      	strb	r0, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80051a0:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80051a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80051a4:	0d15      	lsrs	r5, r2, #20
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80051a6:	f3c2 4403 	ubfx	r4, r2, #16, #4
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80051aa:	80cd      	strh	r5, [r1, #6]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80051ac:	2000      	movs	r0, #0
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80051ae:	720c      	strb	r4, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80051b0:	f3c2 37c0 	ubfx	r7, r2, #15, #1
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80051b4:	f3c2 3680 	ubfx	r6, r2, #14, #1
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80051b8:	f3c2 3540 	ubfx	r5, r2, #13, #1
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80051bc:	f3c2 3400 	ubfx	r4, r2, #12, #1
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80051c0:	724f      	strb	r7, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80051c2:	728e      	strb	r6, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80051c4:	72cd      	strb	r5, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80051c6:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80051c8:	7348      	strb	r0, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 80051ca:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80051cc:	2800      	cmp	r0, #0
 80051ce:	d16c      	bne.n	80052aa <HAL_SD_GetCardCSD+0x12e>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80051d0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80051d2:	f640 74fc 	movw	r4, #4092	; 0xffc
 80051d6:	ea04 0282 	and.w	r2, r4, r2, lsl #2
 80051da:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 80051de:	610a      	str	r2, [r1, #16]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80051e0:	f3c0 5542 	ubfx	r5, r0, #21, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80051e4:	f3c0 4482 	ubfx	r4, r0, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80051e8:	f3c0 32c2 	ubfx	r2, r0, #15, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80051ec:	f3c0 67c2 	ubfx	r7, r0, #27, #3
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80051f0:	f3c0 6602 	ubfx	r6, r0, #24, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80051f4:	750f      	strb	r7, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80051f6:	754e      	strb	r6, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80051f8:	758d      	strb	r5, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80051fa:	75cc      	strb	r4, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80051fc:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80051fe:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005200:	7e0c      	ldrb	r4, [r1, #24]
 8005202:	f004 0407 	and.w	r4, r4, #7
 8005206:	3402      	adds	r4, #2
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005208:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800520a:	40a2      	lsls	r2, r4
 800520c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800520e:	7a0d      	ldrb	r5, [r1, #8]
 8005210:	2401      	movs	r4, #1
 8005212:	f005 050f 	and.w	r5, r5, #15
 8005216:	40ac      	lsls	r4, r5
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8005218:	0a65      	lsrs	r5, r4, #9
 800521a:	fb02 f205 	mul.w	r2, r2, r5
    hsd->SdCard.LogBlockSize = 512U;
 800521e:	f44f 7500 	mov.w	r5, #512	; 0x200
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005222:	651c      	str	r4, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8005224:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8005226:	659d      	str	r5, [r3, #88]	; 0x58
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005228:	f3c0 3480 	ubfx	r4, r0, #14, #1
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800522c:	f3c0 12c6 	ubfx	r2, r0, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005230:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005234:	764c      	strb	r4, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005236:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005238:	76c8      	strb	r0, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800523a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800523c:	0fdd      	lsrs	r5, r3, #31
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800523e:	f3c3 7441 	ubfx	r4, r3, #29, #2
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005242:	f3c3 6282 	ubfx	r2, r3, #26, #3
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005246:	770d      	strb	r5, [r1, #28]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005248:	f3c3 5783 	ubfx	r7, r3, #22, #4
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800524c:	774c      	strb	r4, [r1, #29]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800524e:	f3c3 5640 	ubfx	r6, r3, #21, #1
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005252:	778a      	strb	r2, [r1, #30]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005254:	f3c3 4500 	ubfx	r5, r3, #16, #1
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005258:	f3c3 34c0 	ubfx	r4, r3, #15, #1
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800525c:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->Reserved3 = 0;
 8005260:	2000      	movs	r0, #0
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005262:	77cf      	strb	r7, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005264:	f881 6020 	strb.w	r6, [r1, #32]
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005268:	f3c3 3740 	ubfx	r7, r3, #13, #1
  pCSD->Reserved3 = 0;
 800526c:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005270:	f3c3 3600 	ubfx	r6, r3, #12, #1
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005274:	f881 5022 	strb.w	r5, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005278:	f881 4023 	strb.w	r4, [r1, #35]	; 0x23
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800527c:	f3c3 2581 	ubfx	r5, r3, #10, #2
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005280:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005284:	f3c3 2401 	ubfx	r4, r3, #8, #2
  pCSD->Reserved4 = 1;
 8005288:	2201      	movs	r2, #1
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800528a:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800528e:	f881 7025 	strb.w	r7, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005292:	f881 6026 	strb.w	r6, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005296:	f881 5027 	strb.w	r5, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800529a:	f881 4028 	strb.w	r4, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800529e:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80052a2:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
}
 80052a6:	bcf0      	pop	{r4, r5, r6, r7}
 80052a8:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80052aa:	2801      	cmp	r0, #1
 80052ac:	d00c      	beq.n	80052c8 <HAL_SD_GetCardCSD+0x14c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	490e      	ldr	r1, [pc, #56]	; (80052ec <HAL_SD_GetCardCSD+0x170>)
 80052b2:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80052b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80052b6:	2101      	movs	r1, #1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80052b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80052bc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80052be:	4608      	mov	r0, r1
    hsd->State = HAL_SD_STATE_READY;
 80052c0:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 80052c4:	bcf0      	pop	{r4, r5, r6, r7}
 80052c6:	4770      	bx	lr
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80052c8:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80052ca:	0412      	lsls	r2, r2, #16
 80052cc:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 80052d0:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
 80052d4:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80052d6:	690a      	ldr	r2, [r1, #16]
 80052d8:	3201      	adds	r2, #1
 80052da:	0292      	lsls	r2, r2, #10
    hsd->SdCard.BlockSize = 512U;
 80052dc:	f44f 7400 	mov.w	r4, #512	; 0x200
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80052e0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80052e2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80052e4:	651c      	str	r4, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80052e6:	659c      	str	r4, [r3, #88]	; 0x58
 80052e8:	e79e      	b.n	8005228 <HAL_SD_GetCardCSD+0xac>
 80052ea:	bf00      	nop
 80052ec:	1fe00fff 	.word	0x1fe00fff

080052f0 <HAL_SD_ConfigWideBusOperation>:
{
 80052f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80052f2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  hsd->State = HAL_SD_STATE_BUSY;
 80052f4:	2203      	movs	r2, #3
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80052f6:	4293      	cmp	r3, r2
{
 80052f8:	b08b      	sub	sp, #44	; 0x2c
 80052fa:	4604      	mov	r4, r0
  hsd->State = HAL_SD_STATE_BUSY;
 80052fc:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
{
 8005300:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005302:	d015      	beq.n	8005330 <HAL_SD_ConfigWideBusOperation+0x40>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005304:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005308:	d012      	beq.n	8005330 <HAL_SD_ConfigWideBusOperation+0x40>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800530a:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800530e:	d030      	beq.n	8005372 <HAL_SD_ConfigWideBusOperation+0x82>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005310:	2900      	cmp	r1, #0
 8005312:	d03d      	beq.n	8005390 <HAL_SD_ConfigWideBusOperation+0xa0>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005314:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005316:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800531a:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800531c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800531e:	b175      	cbz	r5, 800533e <HAL_SD_ConfigWideBusOperation+0x4e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005320:	6823      	ldr	r3, [r4, #0]
 8005322:	4a3a      	ldr	r2, [pc, #232]	; (800540c <HAL_SD_ConfigWideBusOperation+0x11c>)
 8005324:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005326:	2001      	movs	r0, #1
 8005328:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 800532c:	b00b      	add	sp, #44	; 0x2c
 800532e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005330:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005336:	63a3      	str	r3, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005338:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800533a:	2d00      	cmp	r5, #0
 800533c:	d1f0      	bne.n	8005320 <HAL_SD_ConfigWideBusOperation+0x30>
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800533e:	6922      	ldr	r2, [r4, #16]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005340:	6963      	ldr	r3, [r4, #20]
 8005342:	9308      	str	r3, [sp, #32]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005344:	9207      	str	r2, [sp, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8005346:	ab0a      	add	r3, sp, #40	; 0x28
 8005348:	e913 0007 	ldmdb	r3, {r0, r1, r2}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800534c:	6867      	ldr	r7, [r4, #4]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800534e:	68a3      	ldr	r3, [r4, #8]
    Init.BusWide             = WideMode;
 8005350:	9606      	str	r6, [sp, #24]
    (void)SDMMC_Init(hsd->Instance, Init);
 8005352:	6826      	ldr	r6, [r4, #0]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005354:	9305      	str	r3, [sp, #20]
    (void)SDMMC_Init(hsd->Instance, Init);
 8005356:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800535a:	9704      	str	r7, [sp, #16]
    (void)SDMMC_Init(hsd->Instance, Init);
 800535c:	ab04      	add	r3, sp, #16
 800535e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005360:	4630      	mov	r0, r6
 8005362:	f002 fd5b 	bl	8007e1c <SDMMC_Init>
  hsd->State = HAL_SD_STATE_READY;
 8005366:	2301      	movs	r3, #1
  return HAL_OK;
 8005368:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800536a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800536e:	b00b      	add	sp, #44	; 0x2c
 8005370:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t scr[2] = {0, 0};
 8005372:	2300      	movs	r3, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005374:	4619      	mov	r1, r3
 8005376:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 8005378:	9304      	str	r3, [sp, #16]
 800537a:	9305      	str	r3, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800537c:	f002 fd78 	bl	8007e70 <SDMMC_GetResponse>
 8005380:	0180      	lsls	r0, r0, #6
 8005382:	d51e      	bpl.n	80053c2 <HAL_SD_ConfigWideBusOperation+0xd2>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005384:	f44f 6000 	mov.w	r0, #2048	; 0x800
      hsd->ErrorCode |= errorstate;
 8005388:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800538a:	4318      	orrs	r0, r3
 800538c:	63a0      	str	r0, [r4, #56]	; 0x38
 800538e:	e7c5      	b.n	800531c <HAL_SD_ConfigWideBusOperation+0x2c>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005390:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 8005392:	9104      	str	r1, [sp, #16]
 8005394:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005396:	f002 fd6b 	bl	8007e70 <SDMMC_GetResponse>
 800539a:	0182      	lsls	r2, r0, #6
 800539c:	d505      	bpl.n	80053aa <HAL_SD_ConfigWideBusOperation+0xba>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800539e:	f44f 6000 	mov.w	r0, #2048	; 0x800
      hsd->ErrorCode |= errorstate;
 80053a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80053a4:	4308      	orrs	r0, r1
 80053a6:	63a0      	str	r0, [r4, #56]	; 0x38
 80053a8:	e7b8      	b.n	800531c <HAL_SD_ConfigWideBusOperation+0x2c>
  errorstate = SD_FindSCR(hsd, scr);
 80053aa:	a904      	add	r1, sp, #16
 80053ac:	4620      	mov	r0, r4
 80053ae:	f7ff fe77 	bl	80050a0 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80053b2:	2800      	cmp	r0, #0
 80053b4:	d1f5      	bne.n	80053a2 <HAL_SD_ConfigWideBusOperation+0xb2>
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80053b6:	9b05      	ldr	r3, [sp, #20]
 80053b8:	03db      	lsls	r3, r3, #15
 80053ba:	d40e      	bmi.n	80053da <HAL_SD_ConfigWideBusOperation+0xea>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80053bc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80053c0:	e7ef      	b.n	80053a2 <HAL_SD_ConfigWideBusOperation+0xb2>
  errorstate = SD_FindSCR(hsd, scr);
 80053c2:	a904      	add	r1, sp, #16
 80053c4:	4620      	mov	r0, r4
 80053c6:	f7ff fe6b 	bl	80050a0 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80053ca:	2800      	cmp	r0, #0
 80053cc:	d1dc      	bne.n	8005388 <HAL_SD_ConfigWideBusOperation+0x98>
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80053ce:	9b05      	ldr	r3, [sp, #20]
 80053d0:	0359      	lsls	r1, r3, #13
 80053d2:	d40e      	bmi.n	80053f2 <HAL_SD_ConfigWideBusOperation+0x102>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80053d4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80053d8:	e7d6      	b.n	8005388 <HAL_SD_ConfigWideBusOperation+0x98>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80053da:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80053dc:	6820      	ldr	r0, [r4, #0]
 80053de:	0409      	lsls	r1, r1, #16
 80053e0:	f002 fe52 	bl	8008088 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80053e4:	2800      	cmp	r0, #0
 80053e6:	d1dc      	bne.n	80053a2 <HAL_SD_ConfigWideBusOperation+0xb2>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 80053e8:	4601      	mov	r1, r0
 80053ea:	6820      	ldr	r0, [r4, #0]
 80053ec:	f002 fec4 	bl	8008178 <SDMMC_CmdBusWidth>
 80053f0:	e7d7      	b.n	80053a2 <HAL_SD_ConfigWideBusOperation+0xb2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80053f2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80053f4:	6820      	ldr	r0, [r4, #0]
 80053f6:	0409      	lsls	r1, r1, #16
 80053f8:	f002 fe46 	bl	8008088 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80053fc:	2800      	cmp	r0, #0
 80053fe:	d1c3      	bne.n	8005388 <HAL_SD_ConfigWideBusOperation+0x98>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8005400:	2102      	movs	r1, #2
 8005402:	6820      	ldr	r0, [r4, #0]
 8005404:	f002 feb8 	bl	8008178 <SDMMC_CmdBusWidth>
 8005408:	e7be      	b.n	8005388 <HAL_SD_ConfigWideBusOperation+0x98>
 800540a:	bf00      	nop
 800540c:	1fe00fff 	.word	0x1fe00fff

08005410 <HAL_SD_Init>:
{ 
 8005410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005414:	b098      	sub	sp, #96	; 0x60
  if(hsd == NULL)
 8005416:	b1f8      	cbz	r0, 8005458 <HAL_SD_Init+0x48>
  if(hsd->State == HAL_SD_STATE_RESET)
 8005418:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800541c:	4604      	mov	r4, r0
 800541e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005422:	2b00      	cmp	r3, #0
 8005424:	d036      	beq.n	8005494 <HAL_SD_Init+0x84>
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8005426:	69a2      	ldr	r2, [r4, #24]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8005428:	6825      	ldr	r5, [r4, #0]
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800542a:	2300      	movs	r3, #0
  hsd->State = HAL_SD_STATE_BUSY;
 800542c:	2003      	movs	r0, #3
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800542e:	213c      	movs	r1, #60	; 0x3c
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8005430:	2a01      	cmp	r2, #1
  hsd->State = HAL_SD_STATE_BUSY;
 8005432:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005436:	9307      	str	r3, [sp, #28]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005438:	9308      	str	r3, [sp, #32]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800543a:	9309      	str	r3, [sp, #36]	; 0x24
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800543c:	930a      	str	r3, [sp, #40]	; 0x28
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800543e:	910b      	str	r1, [sp, #44]	; 0x2c
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8005440:	d02c      	beq.n	800549c <HAL_SD_Init+0x8c>
  status = SDMMC_Init(hsd->Instance, Init);
 8005442:	ab0a      	add	r3, sp, #40	; 0x28
 8005444:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005448:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800544c:	ab07      	add	r3, sp, #28
 800544e:	4628      	mov	r0, r5
 8005450:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005452:	f002 fce3 	bl	8007e1c <SDMMC_Init>
  if(status != HAL_OK)
 8005456:	b120      	cbz	r0, 8005462 <HAL_SD_Init+0x52>
    return HAL_ERROR;
 8005458:	2501      	movs	r5, #1
}
 800545a:	4628      	mov	r0, r5
 800545c:	b018      	add	sp, #96	; 0x60
 800545e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  status = SDMMC_PowerState_ON(hsd->Instance);
 8005462:	6820      	ldr	r0, [r4, #0]
 8005464:	f002 fcf8 	bl	8007e58 <SDMMC_PowerState_ON>
  if(status != HAL_OK)
 8005468:	4605      	mov	r5, r0
 800546a:	2800      	cmp	r0, #0
 800546c:	d1f4      	bne.n	8005458 <HAL_SD_Init+0x48>
  HAL_Delay(2U);
 800546e:	2002      	movs	r0, #2
 8005470:	f7fb fd70 	bl	8000f54 <HAL_Delay>
  __IO uint32_t count = 0;
 8005474:	9506      	str	r5, [sp, #24]
  uint32_t tickstart = HAL_GetTick();
 8005476:	f7fb fd67 	bl	8000f48 <HAL_GetTick>
 800547a:	4680      	mov	r8, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800547c:	6820      	ldr	r0, [r4, #0]
 800547e:	f002 fd93 	bl	8007fa8 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005482:	4605      	mov	r5, r0
 8005484:	b178      	cbz	r0, 80054a6 <HAL_SD_Init+0x96>
    hsd->State = HAL_SD_STATE_READY;
 8005486:	2301      	movs	r3, #1
 8005488:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800548c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800548e:	431d      	orrs	r5, r3
 8005490:	63a5      	str	r5, [r4, #56]	; 0x38
 8005492:	e7e1      	b.n	8005458 <HAL_SD_Init+0x48>
    hsd->Lock = HAL_UNLOCKED;
 8005494:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8005496:	f00b fe45 	bl	8011124 <HAL_SD_MspInit>
 800549a:	e7c4      	b.n	8005426 <HAL_SD_Init+0x16>
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800549c:	682b      	ldr	r3, [r5, #0]
 800549e:	f043 0304 	orr.w	r3, r3, #4
 80054a2:	602b      	str	r3, [r5, #0]
 80054a4:	e7cd      	b.n	8005442 <HAL_SD_Init+0x32>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80054a6:	6820      	ldr	r0, [r4, #0]
 80054a8:	f002 fdac 	bl	8008004 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 80054ac:	fab0 f080 	clz	r0, r0
 80054b0:	0940      	lsrs	r0, r0, #5
 80054b2:	6420      	str	r0, [r4, #64]	; 0x40
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80054b4:	4629      	mov	r1, r5
 80054b6:	6820      	ldr	r0, [r4, #0]
 80054b8:	f002 fde6 	bl	8008088 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 80054bc:	b110      	cbz	r0, 80054c4 <HAL_SD_Init+0xb4>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80054be:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80054c2:	e7e0      	b.n	8005486 <HAL_SD_Init+0x76>
    while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80054c4:	9b06      	ldr	r3, [sp, #24]
 80054c6:	f64f 77fe 	movw	r7, #65534	; 0xfffe
 80054ca:	42bb      	cmp	r3, r7
 80054cc:	f200 8101 	bhi.w	80056d2 <HAL_SD_Init+0x2c2>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80054d0:	4e84      	ldr	r6, [pc, #528]	; (80056e4 <HAL_SD_Init+0x2d4>)
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80054d2:	6820      	ldr	r0, [r4, #0]
 80054d4:	2100      	movs	r1, #0
 80054d6:	f002 fdd7 	bl	8008088 <SDMMC_CmdAppCommand>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80054da:	4631      	mov	r1, r6
      if(errorstate != HAL_SD_ERROR_NONE)
 80054dc:	4605      	mov	r5, r0
 80054de:	2800      	cmp	r0, #0
 80054e0:	d1d1      	bne.n	8005486 <HAL_SD_Init+0x76>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80054e2:	6820      	ldr	r0, [r4, #0]
 80054e4:	f002 fe12 	bl	800810c <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80054e8:	4601      	mov	r1, r0
 80054ea:	2800      	cmp	r0, #0
 80054ec:	d1e7      	bne.n	80054be <HAL_SD_Init+0xae>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80054ee:	6820      	ldr	r0, [r4, #0]
 80054f0:	f002 fcbe 	bl	8007e70 <SDMMC_GetResponse>
      count++;
 80054f4:	9b06      	ldr	r3, [sp, #24]
 80054f6:	3301      	adds	r3, #1
 80054f8:	9306      	str	r3, [sp, #24]
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80054fa:	2800      	cmp	r0, #0
    while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80054fc:	9b06      	ldr	r3, [sp, #24]
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80054fe:	db01      	blt.n	8005504 <HAL_SD_Init+0xf4>
    while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005500:	42bb      	cmp	r3, r7
 8005502:	d9e6      	bls.n	80054d2 <HAL_SD_Init+0xc2>
    if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005504:	9a06      	ldr	r2, [sp, #24]
 8005506:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800550a:	429a      	cmp	r2, r3
 800550c:	d902      	bls.n	8005514 <HAL_SD_Init+0x104>
      return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800550e:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8005512:	e7b8      	b.n	8005486 <HAL_SD_Init+0x76>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005514:	0046      	lsls	r6, r0, #1
 8005516:	d505      	bpl.n	8005524 <HAL_SD_Init+0x114>
      if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8005518:	69a3      	ldr	r3, [r4, #24]
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800551a:	2201      	movs	r2, #1
      if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800551c:	4293      	cmp	r3, r2
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800551e:	63e2      	str	r2, [r4, #60]	; 0x3c
      if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8005520:	f000 8095 	beq.w	800564e <HAL_SD_Init+0x23e>
 8005524:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1;
 8005526:	2301      	movs	r3, #1
 8005528:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U) 
 800552c:	f002 fc9c 	bl	8007e68 <SDMMC_GetPowerState>
 8005530:	b940      	cbnz	r0, 8005544 <HAL_SD_Init+0x134>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005532:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 8005536:	2301      	movs	r3, #1
 8005538:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800553c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800553e:	4303      	orrs	r3, r0
 8005540:	63a3      	str	r3, [r4, #56]	; 0x38
 8005542:	e789      	b.n	8005458 <HAL_SD_Init+0x48>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005544:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005546:	2b03      	cmp	r3, #3
 8005548:	d10f      	bne.n	800556a <HAL_SD_Init+0x15a>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 800554a:	2104      	movs	r1, #4
 800554c:	6820      	ldr	r0, [r4, #0]
 800554e:	f002 fc8f 	bl	8007e70 <SDMMC_GetResponse>
 8005552:	0d00      	lsrs	r0, r0, #20
 8005554:	6460      	str	r0, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005556:	a90d      	add	r1, sp, #52	; 0x34
 8005558:	4620      	mov	r0, r4
 800555a:	f7ff fe0f 	bl	800517c <HAL_SD_GetCardCSD>
 800555e:	4603      	mov	r3, r0
 8005560:	2800      	cmp	r0, #0
 8005562:	d046      	beq.n	80055f2 <HAL_SD_Init+0x1e2>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005564:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005568:	e7e5      	b.n	8005536 <HAL_SD_Init+0x126>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800556a:	6820      	ldr	r0, [r4, #0]
 800556c:	f002 fe88 	bl	8008280 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005570:	2800      	cmp	r0, #0
 8005572:	d1e0      	bne.n	8005536 <HAL_SD_Init+0x126>
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005574:	4601      	mov	r1, r0
 8005576:	6820      	ldr	r0, [r4, #0]
 8005578:	f002 fc7a 	bl	8007e70 <SDMMC_GetResponse>
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800557c:	2104      	movs	r1, #4
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800557e:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005580:	6820      	ldr	r0, [r4, #0]
 8005582:	f002 fc75 	bl	8007e70 <SDMMC_GetResponse>
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005586:	2108      	movs	r1, #8
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005588:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800558a:	6820      	ldr	r0, [r4, #0]
 800558c:	f002 fc70 	bl	8007e70 <SDMMC_GetResponse>
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005590:	210c      	movs	r1, #12
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005592:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005594:	6820      	ldr	r0, [r4, #0]
 8005596:	f002 fc6b 	bl	8007e70 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800559a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800559c:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800559e:	2b03      	cmp	r3, #3
 80055a0:	d0d3      	beq.n	800554a <HAL_SD_Init+0x13a>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80055a2:	f10d 0116 	add.w	r1, sp, #22
 80055a6:	6820      	ldr	r0, [r4, #0]
 80055a8:	f002 fee8 	bl	800837c <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80055ac:	2800      	cmp	r0, #0
 80055ae:	d1c2      	bne.n	8005536 <HAL_SD_Init+0x126>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80055b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80055b2:	2b03      	cmp	r3, #3
 80055b4:	d0c9      	beq.n	800554a <HAL_SD_Init+0x13a>
    hsd->SdCard.RelCardAdd = sd_rca;
 80055b6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80055ba:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80055bc:	6820      	ldr	r0, [r4, #0]
 80055be:	0409      	lsls	r1, r1, #16
 80055c0:	f002 fe9e 	bl	8008300 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80055c4:	2800      	cmp	r0, #0
 80055c6:	d1b6      	bne.n	8005536 <HAL_SD_Init+0x126>
      hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80055c8:	4601      	mov	r1, r0
 80055ca:	6820      	ldr	r0, [r4, #0]
 80055cc:	f002 fc50 	bl	8007e70 <SDMMC_GetResponse>
      hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80055d0:	2104      	movs	r1, #4
      hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80055d2:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80055d4:	6820      	ldr	r0, [r4, #0]
 80055d6:	f002 fc4b 	bl	8007e70 <SDMMC_GetResponse>
      hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80055da:	2108      	movs	r1, #8
      hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80055dc:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80055de:	6820      	ldr	r0, [r4, #0]
 80055e0:	f002 fc46 	bl	8007e70 <SDMMC_GetResponse>
      hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80055e4:	210c      	movs	r1, #12
      hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80055e6:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80055e8:	6820      	ldr	r0, [r4, #0]
 80055ea:	f002 fc41 	bl	8007e70 <SDMMC_GetResponse>
 80055ee:	66e0      	str	r0, [r4, #108]	; 0x6c
 80055f0:	e7ab      	b.n	800554a <HAL_SD_Init+0x13a>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 80055f2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80055f4:	6820      	ldr	r0, [r4, #0]
 80055f6:	0412      	lsls	r2, r2, #16
 80055f8:	f002 fc94 	bl	8007f24 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80055fc:	2800      	cmp	r0, #0
 80055fe:	d19a      	bne.n	8005536 <HAL_SD_Init+0x126>
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005600:	68e1      	ldr	r1, [r4, #12]
 8005602:	4620      	mov	r0, r4
 8005604:	f7ff fe74 	bl	80052f0 <HAL_SD_ConfigWideBusOperation>
 8005608:	4605      	mov	r5, r0
 800560a:	2800      	cmp	r0, #0
 800560c:	f47f af24 	bne.w	8005458 <HAL_SD_Init+0x48>
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8005610:	69a3      	ldr	r3, [r4, #24]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d009      	beq.n	800562a <HAL_SD_Init+0x21a>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005616:	2300      	movs	r3, #0
  hsd->State = HAL_SD_STATE_READY;
 8005618:	2201      	movs	r2, #1
}
 800561a:	4628      	mov	r0, r5
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800561c:	63a3      	str	r3, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800561e:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8005620:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 8005624:	b018      	add	sp, #96	; 0x60
 8005626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) || 
 800562a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800562c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005630:	d002      	beq.n	8005638 <HAL_SD_Init+0x228>
 8005632:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005634:	2b01      	cmp	r3, #1
 8005636:	d1ee      	bne.n	8005616 <HAL_SD_Init+0x206>
      hsd->Instance->CLKCR |= 0x00100000U;
 8005638:	6822      	ldr	r2, [r4, #0]
 800563a:	6853      	ldr	r3, [r2, #4]
 800563c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005640:	6053      	str	r3, [r2, #4]
      if(HAL_SDEx_HighSpeed(hsd) != HAL_SD_ERROR_NONE)
 8005642:	4620      	mov	r0, r4
 8005644:	f000 f852 	bl	80056ec <HAL_SDEx_HighSpeed>
 8005648:	2800      	cmp	r0, #0
 800564a:	d0e4      	beq.n	8005616 <HAL_SD_Init+0x206>
 800564c:	e704      	b.n	8005458 <HAL_SD_Init+0x48>
        if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800564e:	01c5      	lsls	r5, r0, #7
 8005650:	f57f af68 	bpl.w	8005524 <HAL_SD_Init+0x114>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8005654:	6823      	ldr	r3, [r4, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
           hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005658:	f44f 7100 	mov.w	r1, #512	; 0x200
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800565c:	f042 0203 	orr.w	r2, r2, #3
           hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005660:	65e1      	str	r1, [r4, #92]	; 0x5c
          errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8005662:	4618      	mov	r0, r3
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8005664:	601a      	str	r2, [r3, #0]
          errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8005666:	f002 ff1f 	bl	80084a8 <SDMMC_CmdVoltageSwitch>
          if(errorstate != HAL_SD_ERROR_NONE)
 800566a:	4605      	mov	r5, r0
 800566c:	b130      	cbz	r0, 800567c <HAL_SD_Init+0x26c>
 800566e:	e70a      	b.n	8005486 <HAL_SD_Init+0x76>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005670:	f7fb fc6a 	bl	8000f48 <HAL_GetTick>
 8005674:	eba0 0008 	sub.w	r0, r0, r8
 8005678:	3001      	adds	r0, #1
 800567a:	d02f      	beq.n	80056dc <HAL_SD_Init+0x2cc>
          while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800567c:	6823      	ldr	r3, [r4, #0]
 800567e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005680:	0150      	lsls	r0, r2, #5
 8005682:	d5f5      	bpl.n	8005670 <HAL_SD_Init+0x260>
          hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8005684:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005688:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800568a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800568c:	02d9      	lsls	r1, r3, #11
 800568e:	f57f af16 	bpl.w	80054be <HAL_SD_Init+0xae>
            HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8005692:	2001      	movs	r0, #1
 8005694:	f000 f828 	bl	80056e8 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
            hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8005698:	6820      	ldr	r0, [r4, #0]
 800569a:	6803      	ldr	r3, [r0, #0]
 800569c:	f043 0302 	orr.w	r3, r3, #2
 80056a0:	6003      	str	r3, [r0, #0]
 80056a2:	e006      	b.n	80056b2 <HAL_SD_Init+0x2a2>
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80056a4:	f7fb fc50 	bl	8000f48 <HAL_GetTick>
 80056a8:	eba0 0008 	sub.w	r0, r0, r8
 80056ac:	3001      	adds	r0, #1
 80056ae:	d015      	beq.n	80056dc <HAL_SD_Init+0x2cc>
 80056b0:	6820      	ldr	r0, [r4, #0]
            while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80056b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80056b4:	019a      	lsls	r2, r3, #6
 80056b6:	d5f5      	bpl.n	80056a4 <HAL_SD_Init+0x294>
            hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 80056b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056bc:	6383      	str	r3, [r0, #56]	; 0x38
            if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 80056be:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80056c0:	02db      	lsls	r3, r3, #11
 80056c2:	f53f af24 	bmi.w	800550e <HAL_SD_Init+0xfe>
            hsd->Instance->POWER = 0x13U; 
 80056c6:	2213      	movs	r2, #19
            hsd->Instance->ICR = 0xFFFFFFFFU;
 80056c8:	f04f 33ff 	mov.w	r3, #4294967295
            hsd->Instance->POWER = 0x13U; 
 80056cc:	6002      	str	r2, [r0, #0]
            hsd->Instance->ICR = 0xFFFFFFFFU;
 80056ce:	6383      	str	r3, [r0, #56]	; 0x38
 80056d0:	e729      	b.n	8005526 <HAL_SD_Init+0x116>
    if(count >= SDMMC_MAX_VOLT_TRIAL)
 80056d2:	9b06      	ldr	r3, [sp, #24]
 80056d4:	42bb      	cmp	r3, r7
 80056d6:	f63f af1a 	bhi.w	800550e <HAL_SD_Init+0xfe>
 80056da:	e723      	b.n	8005524 <HAL_SD_Init+0x114>
              return HAL_SD_ERROR_TIMEOUT;
 80056dc:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 80056e0:	e6d1      	b.n	8005486 <HAL_SD_Init+0x76>
 80056e2:	bf00      	nop
 80056e4:	c1100000 	.word	0xc1100000

080056e8 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop

080056ec <HAL_SDEx_HighSpeed>:
{
 80056ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056f0:	4604      	mov	r4, r0
 80056f2:	b096      	sub	sp, #88	; 0x58
  uint8_t SD_hs[64]  = {0};
 80056f4:	2540      	movs	r5, #64	; 0x40
 80056f6:	462a      	mov	r2, r5
 80056f8:	2100      	movs	r1, #0
 80056fa:	a806      	add	r0, sp, #24
 80056fc:	f00e fbf1 	bl	8013ee2 <memset>
  uint32_t Timeout = HAL_GetTick();
 8005700:	f7fb fc22 	bl	8000f48 <HAL_GetTick>
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 8005704:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005706:	b92b      	cbnz	r3, 8005714 <HAL_SDEx_HighSpeed+0x28>
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE; 
 8005708:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
}
 800570c:	4630      	mov	r0, r6
 800570e:	b016      	add	sp, #88	; 0x58
 8005710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if((hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED) &&
 8005714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005718:	d004      	beq.n	8005724 <HAL_SDEx_HighSpeed+0x38>
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800571a:	2600      	movs	r6, #0
}
 800571c:	4630      	mov	r0, r6
 800571e:	b016      	add	sp, #88	; 0x58
 8005720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if((hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED) &&
 8005724:	69a7      	ldr	r7, [r4, #24]
 8005726:	2f01      	cmp	r7, #1
 8005728:	d1f7      	bne.n	800571a <HAL_SDEx_HighSpeed+0x2e>
 800572a:	4680      	mov	r8, r0
    hsd->Instance->DCTRL = 0;
 800572c:	6820      	ldr	r0, [r4, #0]
 800572e:	2300      	movs	r3, #0
 8005730:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64);
 8005732:	4629      	mov	r1, r5
 8005734:	f002 fbb4 	bl	8007ea0 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_SD_ERROR_NONE)
 8005738:	4606      	mov	r6, r0
 800573a:	2800      	cmp	r0, #0
 800573c:	d1e6      	bne.n	800570c <HAL_SDEx_HighSpeed+0x20>
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 800573e:	f04f 3eff 	mov.w	lr, #4294967295
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 8005742:	2260      	movs	r2, #96	; 0x60
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005744:	2302      	movs	r3, #2
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005746:	9004      	str	r0, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 8005748:	4669      	mov	r1, sp
 800574a:	6820      	ldr	r0, [r4, #0]
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 800574c:	f8cd e000 	str.w	lr, [sp]
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 8005750:	9202      	str	r2, [sp, #8]
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005752:	9303      	str	r3, [sp, #12]
    sdmmc_datainitstructure.DataLength    = 64;
 8005754:	9501      	str	r5, [sp, #4]
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8005756:	9705      	str	r7, [sp, #20]
    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 8005758:	f002 fb8e 	bl	8007e78 <SDMMC_ConfigData>
    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_SDR25_SWITCH_PATTERN);
 800575c:	4930      	ldr	r1, [pc, #192]	; (8005820 <HAL_SDEx_HighSpeed+0x134>)
 800575e:	6820      	ldr	r0, [r4, #0]
 8005760:	f002 fe60 	bl	8008424 <SDMMC_CmdSwitch>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005764:	4606      	mov	r6, r0
 8005766:	2800      	cmp	r0, #0
 8005768:	d1d0      	bne.n	800570c <HAL_SDEx_HighSpeed+0x20>
 800576a:	ad06      	add	r5, sp, #24
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 800576c:	f240 5a2a 	movw	sl, #1322	; 0x52a
 8005770:	6820      	ldr	r0, [r4, #0]
 8005772:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005774:	ea13 0f0a 	tst.w	r3, sl
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005778:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 800577a:	d124      	bne.n	80057c6 <HAL_SDEx_HighSpeed+0xda>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800577c:	041f      	lsls	r7, r3, #16
 800577e:	d515      	bpl.n	80057ac <HAL_SDEx_HighSpeed+0xc0>
 8005780:	1d2f      	adds	r7, r5, #4
 8005782:	f105 0924 	add.w	r9, r5, #36	; 0x24
 8005786:	e000      	b.n	800578a <HAL_SDEx_HighSpeed+0x9e>
 8005788:	6820      	ldr	r0, [r4, #0]
          data = SDMMC_ReadFIFO(hsd->Instance);
 800578a:	f002 fb61 	bl	8007e50 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 800578e:	f807 0c04 	strb.w	r0, [r7, #-4]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005792:	0a02      	lsrs	r2, r0, #8
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005794:	0c03      	lsrs	r3, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005796:	0e00      	lsrs	r0, r0, #24
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005798:	f807 2c03 	strb.w	r2, [r7, #-3]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800579c:	f807 3c02 	strb.w	r3, [r7, #-2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80057a0:	f807 0c01 	strb.w	r0, [r7, #-1]
 80057a4:	3704      	adds	r7, #4
        for (count = 0U; count < 8U; count++)
 80057a6:	454f      	cmp	r7, r9
 80057a8:	d1ee      	bne.n	8005788 <HAL_SDEx_HighSpeed+0x9c>
 80057aa:	3520      	adds	r5, #32
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 80057ac:	f7fb fbcc 	bl	8000f48 <HAL_GetTick>
 80057b0:	eba0 0008 	sub.w	r0, r0, r8
 80057b4:	3001      	adds	r0, #1
 80057b6:	d1db      	bne.n	8005770 <HAL_SDEx_HighSpeed+0x84>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80057b8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
        hsd->State= HAL_SD_STATE_READY;
 80057bc:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80057be:	63a6      	str	r6, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80057c0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_SD_ERROR_TIMEOUT;
 80057c4:	e7a2      	b.n	800570c <HAL_SDEx_HighSpeed+0x20>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80057c6:	071d      	lsls	r5, r3, #28
 80057c8:	d405      	bmi.n	80057d6 <HAL_SDEx_HighSpeed+0xea>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80057ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80057cc:	0799      	lsls	r1, r3, #30
 80057ce:	d505      	bpl.n	80057dc <HAL_SDEx_HighSpeed+0xf0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80057d0:	2602      	movs	r6, #2
 80057d2:	6386      	str	r6, [r0, #56]	; 0x38
      return errorstate;
 80057d4:	e79a      	b.n	800570c <HAL_SDEx_HighSpeed+0x20>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80057d6:	2308      	movs	r3, #8
 80057d8:	6383      	str	r3, [r0, #56]	; 0x38
      return errorstate;
 80057da:	e797      	b.n	800570c <HAL_SDEx_HighSpeed+0x20>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80057dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80057de:	069a      	lsls	r2, r3, #26
 80057e0:	d502      	bpl.n	80057e8 <HAL_SDEx_HighSpeed+0xfc>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80057e2:	2620      	movs	r6, #32
 80057e4:	6386      	str	r6, [r0, #56]	; 0x38
      return errorstate;
 80057e6:	e791      	b.n	800570c <HAL_SDEx_HighSpeed+0x20>
    if ((SD_hs[13U] & 2U) == 0U)
 80057e8:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80057ec:	4a0d      	ldr	r2, [pc, #52]	; (8005824 <HAL_SDEx_HighSpeed+0x138>)
 80057ee:	6382      	str	r2, [r0, #56]	; 0x38
    if ((SD_hs[13U] & 2U) == 0U)
 80057f0:	079b      	lsls	r3, r3, #30
 80057f2:	d402      	bmi.n	80057fa <HAL_SDEx_HighSpeed+0x10e>
      return errorstate;
 80057f4:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 80057f8:	e788      	b.n	800570c <HAL_SDEx_HighSpeed+0x20>
      HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 80057fa:	2001      	movs	r0, #1
 80057fc:	f7ff ff74 	bl	80056e8 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005800:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005804:	6820      	ldr	r0, [r4, #0]
 8005806:	f002 fb4b 	bl	8007ea0 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 800580a:	4606      	mov	r6, r0
 800580c:	2800      	cmp	r0, #0
 800580e:	f43f af7d 	beq.w	800570c <HAL_SDEx_HighSpeed+0x20>
      hsd->State = HAL_SD_STATE_READY;
 8005812:	2301      	movs	r3, #1
 8005814:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->ErrorCode |= errorstate;
 8005818:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800581a:	4303      	orrs	r3, r0
 800581c:	63a3      	str	r3, [r4, #56]	; 0x38
      return errorstate;
 800581e:	e775      	b.n	800570c <HAL_SDEx_HighSpeed+0x20>
 8005820:	80ffff01 	.word	0x80ffff01
 8005824:	18000f3a 	.word	0x18000f3a

08005828 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005828:	6803      	ldr	r3, [r0, #0]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800582a:	6841      	ldr	r1, [r0, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800582c:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800582e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005832:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005836:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005838:	d013      	beq.n	8005862 <SPI_WaitFifoStateUntilTimeout.part.1+0x3a>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800583a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800583c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005840:	d107      	bne.n	8005852 <SPI_WaitFifoStateUntilTimeout.part.1+0x2a>
        {
          SPI_RESET_CRC(hspi);
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005848:	601a      	str	r2, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005850:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005852:	2201      	movs	r2, #1

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005854:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8005856:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800585a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 800585e:	2003      	movs	r0, #3
 8005860:	4770      	bx	lr
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005862:	6882      	ldr	r2, [r0, #8]
 8005864:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005868:	d002      	beq.n	8005870 <SPI_WaitFifoStateUntilTimeout.part.1+0x48>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800586a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800586e:	d1e4      	bne.n	800583a <SPI_WaitFifoStateUntilTimeout.part.1+0x12>
          __HAL_SPI_DISABLE(hspi);
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	e7df      	b.n	800583a <SPI_WaitFifoStateUntilTimeout.part.1+0x12>
 800587a:	bf00      	nop

0800587c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800587c:	b570      	push	{r4, r5, r6, lr}
 800587e:	4604      	mov	r4, r0
 8005880:	460d      	mov	r5, r1
 8005882:	4616      	mov	r6, r2
 8005884:	1c69      	adds	r1, r5, #1
 8005886:	6820      	ldr	r0, [r4, #0]
 8005888:	d111      	bne.n	80058ae <SPI_EndRxTxTransaction+0x32>
  while ((hspi->Instance->SR & Fifo) != State)
 800588a:	6883      	ldr	r3, [r0, #8]
 800588c:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 8005890:	d1fb      	bne.n	800588a <SPI_EndRxTxTransaction+0xe>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005892:	6883      	ldr	r3, [r0, #8]
 8005894:	061b      	lsls	r3, r3, #24
 8005896:	d504      	bpl.n	80058a2 <SPI_EndRxTxTransaction+0x26>
 8005898:	6883      	ldr	r3, [r0, #8]
 800589a:	061b      	lsls	r3, r3, #24
 800589c:	d4f9      	bmi.n	8005892 <SPI_EndRxTxTransaction+0x16>
 800589e:	e000      	b.n	80058a2 <SPI_EndRxTxTransaction+0x26>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80058a0:	7b03      	ldrb	r3, [r0, #12]
  while ((hspi->Instance->SR & Fifo) != State)
 80058a2:	6883      	ldr	r3, [r0, #8]
 80058a4:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 80058a8:	d1fa      	bne.n	80058a0 <SPI_EndRxTxTransaction+0x24>
  return HAL_OK;
 80058aa:	2000      	movs	r0, #0
 80058ac:	bd70      	pop	{r4, r5, r6, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 80058ae:	6883      	ldr	r3, [r0, #8]
 80058b0:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 80058b4:	d023      	beq.n	80058fe <SPI_EndRxTxTransaction+0x82>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80058b6:	f7fb fb47 	bl	8000f48 <HAL_GetTick>
 80058ba:	1b80      	subs	r0, r0, r6
 80058bc:	4285      	cmp	r5, r0
 80058be:	d8e1      	bhi.n	8005884 <SPI_EndRxTxTransaction+0x8>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058c0:	6823      	ldr	r3, [r4, #0]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058c2:	6861      	ldr	r1, [r4, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058c4:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058c6:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058ce:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058d0:	d02e      	beq.n	8005930 <SPI_EndRxTxTransaction+0xb4>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80058d4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80058d8:	d021      	beq.n	800591e <SPI_EndRxTxTransaction+0xa2>
        hspi->State = HAL_SPI_STATE_READY;
 80058da:	2301      	movs	r3, #1
 80058dc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058e0:	6e23      	ldr	r3, [r4, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 80058e2:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058e4:	f043 0320 	orr.w	r3, r3, #32
 80058e8:	6623      	str	r3, [r4, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 80058ea:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    return HAL_TIMEOUT;
 80058ee:	2003      	movs	r0, #3
 80058f0:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80058f2:	f7fb fb29 	bl	8000f48 <HAL_GetTick>
 80058f6:	1b80      	subs	r0, r0, r6
 80058f8:	4285      	cmp	r5, r0
 80058fa:	d9e1      	bls.n	80058c0 <SPI_EndRxTxTransaction+0x44>
 80058fc:	6820      	ldr	r0, [r4, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058fe:	6883      	ldr	r3, [r0, #8]
 8005900:	061a      	lsls	r2, r3, #24
 8005902:	d4f6      	bmi.n	80058f2 <SPI_EndRxTxTransaction+0x76>
 8005904:	e006      	b.n	8005914 <SPI_EndRxTxTransaction+0x98>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005906:	7b03      	ldrb	r3, [r0, #12]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005908:	f7fb fb1e 	bl	8000f48 <HAL_GetTick>
 800590c:	1b80      	subs	r0, r0, r6
 800590e:	4285      	cmp	r5, r0
 8005910:	d91a      	bls.n	8005948 <SPI_EndRxTxTransaction+0xcc>
 8005912:	6820      	ldr	r0, [r4, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005914:	6883      	ldr	r3, [r0, #8]
 8005916:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 800591a:	d1f4      	bne.n	8005906 <SPI_EndRxTxTransaction+0x8a>
 800591c:	e7c5      	b.n	80058aa <SPI_EndRxTxTransaction+0x2e>
          SPI_RESET_CRC(hspi);
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005924:	601a      	str	r2, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800592c:	601a      	str	r2, [r3, #0]
 800592e:	e7d4      	b.n	80058da <SPI_EndRxTxTransaction+0x5e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005930:	68a2      	ldr	r2, [r4, #8]
 8005932:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005936:	d002      	beq.n	800593e <SPI_EndRxTxTransaction+0xc2>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005938:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800593c:	d1c9      	bne.n	80058d2 <SPI_EndRxTxTransaction+0x56>
          __HAL_SPI_DISABLE(hspi);
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005944:	601a      	str	r2, [r3, #0]
 8005946:	e7c4      	b.n	80058d2 <SPI_EndRxTxTransaction+0x56>
 8005948:	4620      	mov	r0, r4
 800594a:	f7ff ff6d 	bl	8005828 <SPI_WaitFifoStateUntilTimeout.part.1>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800594e:	2800      	cmp	r0, #0
 8005950:	d0ab      	beq.n	80058aa <SPI_EndRxTxTransaction+0x2e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005952:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005954:	f043 0320 	orr.w	r3, r3, #32
 8005958:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 800595a:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800595c:	bd70      	pop	{r4, r5, r6, pc}
 800595e:	bf00      	nop

08005960 <HAL_SPI_Init>:
  if (hspi == NULL)
 8005960:	2800      	cmp	r0, #0
 8005962:	d068      	beq.n	8005a36 <HAL_SPI_Init+0xd6>
{
 8005964:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005966:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800596a:	2200      	movs	r2, #0
{
 800596c:	b083      	sub	sp, #12
 800596e:	4604      	mov	r4, r0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005970:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005974:	6282      	str	r2, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005976:	2b00      	cmp	r3, #0
 8005978:	d04d      	beq.n	8005a16 <HAL_SPI_Init+0xb6>
  hspi->State = HAL_SPI_STATE_BUSY;
 800597a:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800597c:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800597e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8005982:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005984:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8005986:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800598a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800598e:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005990:	d90b      	bls.n	80059aa <HAL_SPI_Init+0x4a>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005992:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8005996:	d146      	bne.n	8005a26 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005998:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800599a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800599c:	2b00      	cmp	r3, #0
 800599e:	d13f      	bne.n	8005a20 <HAL_SPI_Init+0xc0>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80059a0:	2302      	movs	r3, #2
 80059a2:	6323      	str	r3, [r4, #48]	; 0x30
 80059a4:	f04f 0e00 	mov.w	lr, #0
 80059a8:	e00f      	b.n	80059ca <HAL_SPI_Init+0x6a>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80059aa:	d007      	beq.n	80059bc <HAL_SPI_Init+0x5c>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80059ac:	6b20      	ldr	r0, [r4, #48]	; 0x30
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059ae:	2300      	movs	r3, #0
 80059b0:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80059b2:	b130      	cbz	r0, 80059c2 <HAL_SPI_Init+0x62>
 80059b4:	4618      	mov	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80059b6:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
 80059ba:	e006      	b.n	80059ca <HAL_SPI_Init+0x6a>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80059bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80059be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80059c0:	b90b      	cbnz	r3, 80059c6 <HAL_SPI_Init+0x66>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80059c2:	2301      	movs	r3, #1
 80059c4:	6323      	str	r3, [r4, #48]	; 0x30
 80059c6:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80059ca:	68a5      	ldr	r5, [r4, #8]
 80059cc:	6863      	ldr	r3, [r4, #4]
 80059ce:	6927      	ldr	r7, [r4, #16]
 80059d0:	6966      	ldr	r6, [r4, #20]
 80059d2:	432b      	orrs	r3, r5
 80059d4:	433b      	orrs	r3, r7
 80059d6:	69e5      	ldr	r5, [r4, #28]
 80059d8:	69a7      	ldr	r7, [r4, #24]
 80059da:	4333      	orrs	r3, r6
 80059dc:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80059de:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80059e0:	9501      	str	r5, [sp, #4]
 80059e2:	6a65      	ldr	r5, [r4, #36]	; 0x24
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80059e4:	6a26      	ldr	r6, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80059e6:	432a      	orrs	r2, r5
 80059e8:	9d01      	ldr	r5, [sp, #4]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80059ea:	4333      	orrs	r3, r6
 80059ec:	f407 7600 	and.w	r6, r7, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80059f0:	0c3f      	lsrs	r7, r7, #16
 80059f2:	f007 0704 	and.w	r7, r7, #4
 80059f6:	4315      	orrs	r5, r2
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80059f8:	4333      	orrs	r3, r6
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059fa:	2200      	movs	r2, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80059fc:	433d      	orrs	r5, r7
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80059fe:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005a00:	ea45 050e 	orr.w	r5, r5, lr
  hspi->State     = HAL_SPI_STATE_READY;
 8005a04:	2601      	movs	r6, #1
  return HAL_OK;
 8005a06:	4610      	mov	r0, r2
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005a08:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005a0a:	604d      	str	r5, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a0c:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a0e:	f884 605d 	strb.w	r6, [r4, #93]	; 0x5d
}
 8005a12:	b003      	add	sp, #12
 8005a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hspi->Lock = HAL_UNLOCKED;
 8005a16:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8005a1a:	f00b fbfb 	bl	8011214 <HAL_SPI_MspInit>
 8005a1e:	e7ac      	b.n	800597a <HAL_SPI_Init+0x1a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a20:	f04f 0e00 	mov.w	lr, #0
 8005a24:	e7d1      	b.n	80059ca <HAL_SPI_Init+0x6a>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005a26:	6b20      	ldr	r0, [r4, #48]	; 0x30
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005a2c:	2800      	cmp	r0, #0
 8005a2e:	d0b7      	beq.n	80059a0 <HAL_SPI_Init+0x40>
 8005a30:	4618      	mov	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a32:	469e      	mov	lr, r3
 8005a34:	e7c9      	b.n	80059ca <HAL_SPI_Init+0x6a>
    return HAL_ERROR;
 8005a36:	2001      	movs	r0, #1
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop

08005a3c <HAL_SPI_Transmit>:
{
 8005a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hspi);
 8005a40:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8005a44:	2c01      	cmp	r4, #1
{
 8005a46:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8005a48:	d103      	bne.n	8005a52 <HAL_SPI_Transmit+0x16>
 8005a4a:	2002      	movs	r0, #2
}
 8005a4c:	b002      	add	sp, #8
 8005a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a52:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8005a54:	2301      	movs	r3, #1
 8005a56:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 8005a5a:	4604      	mov	r4, r0
 8005a5c:	4617      	mov	r7, r2
 8005a5e:	4688      	mov	r8, r1
  tickstart = HAL_GetTick();
 8005a60:	f7fb fa72 	bl	8000f48 <HAL_GetTick>
 8005a64:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005a66:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8005a6a:	b2c0      	uxtb	r0, r0
 8005a6c:	2801      	cmp	r0, #1
 8005a6e:	d009      	beq.n	8005a84 <HAL_SPI_Transmit+0x48>
    errorcode = HAL_BUSY;
 8005a70:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8005a72:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8005a74:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8005a76:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005a7a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8005a7e:	b002      	add	sp, #8
 8005a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8005a84:	f1b8 0f00 	cmp.w	r8, #0
 8005a88:	d0f3      	beq.n	8005a72 <HAL_SPI_Transmit+0x36>
 8005a8a:	2f00      	cmp	r7, #0
 8005a8c:	d0f1      	beq.n	8005a72 <HAL_SPI_Transmit+0x36>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a8e:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a90:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a94:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a96:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a98:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a9c:	f884 105d 	strb.w	r1, [r4, #93]	; 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005aa0:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005aa2:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferSize  = 0U;
 8005aa4:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->TxISR       = NULL;
 8005aa8:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005aaa:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxXferCount = Size;
 8005aac:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005aae:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005ab0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    SPI_1LINE_TX(hspi);
 8005ab4:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ab6:	f000 80ca 	beq.w	8005c4e <HAL_SPI_Transmit+0x212>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	0651      	lsls	r1, r2, #25
 8005abe:	d403      	bmi.n	8005ac8 <HAL_SPI_Transmit+0x8c>
    __HAL_SPI_ENABLE(hspi);
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ac6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ac8:	68e2      	ldr	r2, [r4, #12]
 8005aca:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ace:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ad0:	d950      	bls.n	8005b74 <HAL_SPI_Transmit+0x138>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ad2:	2a00      	cmp	r2, #0
 8005ad4:	f000 80b1 	beq.w	8005c3a <HAL_SPI_Transmit+0x1fe>
 8005ad8:	2f01      	cmp	r7, #1
 8005ada:	f000 80ae 	beq.w	8005c3a <HAL_SPI_Transmit+0x1fe>
 8005ade:	1c6a      	adds	r2, r5, #1
 8005ae0:	d12f      	bne.n	8005b42 <HAL_SPI_Transmit+0x106>
    while (hspi->TxXferCount > 0U)
 8005ae2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	b183      	cbz	r3, 8005b0a <HAL_SPI_Transmit+0xce>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ae8:	6822      	ldr	r2, [r4, #0]
 8005aea:	6893      	ldr	r3, [r2, #8]
 8005aec:	079b      	lsls	r3, r3, #30
 8005aee:	d53e      	bpl.n	8005b6e <HAL_SPI_Transmit+0x132>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005af0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005af2:	f833 1b02 	ldrh.w	r1, [r3], #2
 8005af6:	60d1      	str	r1, [r2, #12]
        hspi->TxXferCount--;
 8005af8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005afa:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005afc:	3a01      	subs	r2, #1
 8005afe:	b292      	uxth	r2, r2
 8005b00:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8005b02:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1ee      	bne.n	8005ae8 <HAL_SPI_Transmit+0xac>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b0a:	4632      	mov	r2, r6
 8005b0c:	4629      	mov	r1, r5
 8005b0e:	4620      	mov	r0, r4
 8005b10:	f7ff feb4 	bl	800587c <SPI_EndRxTxTransaction>
 8005b14:	b108      	cbz	r0, 8005b1a <HAL_SPI_Transmit+0xde>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b16:	2320      	movs	r3, #32
 8005b18:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b1a:	68a3      	ldr	r3, [r4, #8]
 8005b1c:	b933      	cbnz	r3, 8005b2c <HAL_SPI_Transmit+0xf0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b1e:	6822      	ldr	r2, [r4, #0]
 8005b20:	9301      	str	r3, [sp, #4]
 8005b22:	68d3      	ldr	r3, [r2, #12]
 8005b24:	9301      	str	r3, [sp, #4]
 8005b26:	6893      	ldr	r3, [r2, #8]
 8005b28:	9301      	str	r3, [sp, #4]
 8005b2a:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b2c:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8005b2e:	3000      	adds	r0, #0
 8005b30:	bf18      	it	ne
 8005b32:	2001      	movne	r0, #1
 8005b34:	e79d      	b.n	8005a72 <HAL_SPI_Transmit+0x36>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b36:	f7fb fa07 	bl	8000f48 <HAL_GetTick>
 8005b3a:	1b80      	subs	r0, r0, r6
 8005b3c:	42a8      	cmp	r0, r5
 8005b3e:	f080 8090 	bcs.w	8005c62 <HAL_SPI_Transmit+0x226>
    while (hspi->TxXferCount > 0U)
 8005b42:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d0df      	beq.n	8005b0a <HAL_SPI_Transmit+0xce>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	689a      	ldr	r2, [r3, #8]
 8005b4e:	0797      	lsls	r7, r2, #30
 8005b50:	d5f1      	bpl.n	8005b36 <HAL_SPI_Transmit+0xfa>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b52:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005b54:	f832 1b02 	ldrh.w	r1, [r2], #2
 8005b58:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 8005b5a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b5c:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8005b64:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1ee      	bne.n	8005b4a <HAL_SPI_Transmit+0x10e>
 8005b6c:	e7cd      	b.n	8005b0a <HAL_SPI_Transmit+0xce>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b6e:	f7fb f9eb 	bl	8000f48 <HAL_GetTick>
 8005b72:	e7b6      	b.n	8005ae2 <HAL_SPI_Transmit+0xa6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b74:	2a00      	cmp	r2, #0
 8005b76:	d052      	beq.n	8005c1e <HAL_SPI_Transmit+0x1e2>
 8005b78:	2f01      	cmp	r7, #1
 8005b7a:	d050      	beq.n	8005c1e <HAL_SPI_Transmit+0x1e2>
 8005b7c:	1c68      	adds	r0, r5, #1
 8005b7e:	d129      	bne.n	8005bd4 <HAL_SPI_Transmit+0x198>
    while (hspi->TxXferCount > 0U)
 8005b80:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d0c0      	beq.n	8005b0a <HAL_SPI_Transmit+0xce>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b88:	6822      	ldr	r2, [r4, #0]
 8005b8a:	6893      	ldr	r3, [r2, #8]
 8005b8c:	0799      	lsls	r1, r3, #30
 8005b8e:	d514      	bpl.n	8005bba <HAL_SPI_Transmit+0x17e>
        if (hspi->TxXferCount > 1U)
 8005b90:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d937      	bls.n	8005c08 <HAL_SPI_Transmit+0x1cc>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b98:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005b9a:	f831 3b02 	ldrh.w	r3, [r1], #2
 8005b9e:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 8005ba0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ba2:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005ba4:	3b02      	subs	r3, #2
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8005baa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d0ab      	beq.n	8005b0a <HAL_SPI_Transmit+0xce>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bb2:	6822      	ldr	r2, [r4, #0]
 8005bb4:	6893      	ldr	r3, [r2, #8]
 8005bb6:	0799      	lsls	r1, r3, #30
 8005bb8:	d4ea      	bmi.n	8005b90 <HAL_SPI_Transmit+0x154>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bba:	f7fb f9c5 	bl	8000f48 <HAL_GetTick>
 8005bbe:	e7df      	b.n	8005b80 <HAL_SPI_Transmit+0x144>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 8005bc6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 8005bc8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 8005bce:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 8005bd0:	87e3      	strh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 8005bd2:	63a2      	str	r2, [r4, #56]	; 0x38
    while (hspi->TxXferCount > 0U)
 8005bd4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d096      	beq.n	8005b0a <HAL_SPI_Transmit+0xce>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bdc:	6822      	ldr	r2, [r4, #0]
 8005bde:	6893      	ldr	r3, [r2, #8]
 8005be0:	079b      	lsls	r3, r3, #30
 8005be2:	d539      	bpl.n	8005c58 <HAL_SPI_Transmit+0x21c>
        if (hspi->TxXferCount > 1U)
 8005be4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d9e9      	bls.n	8005bc0 <HAL_SPI_Transmit+0x184>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005bee:	f831 3b02 	ldrh.w	r3, [r1], #2
 8005bf2:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 8005bf4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bf6:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005bf8:	3b02      	subs	r3, #2
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8005bfe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1ea      	bne.n	8005bdc <HAL_SPI_Transmit+0x1a0>
 8005c06:	e780      	b.n	8005b0a <HAL_SPI_Transmit+0xce>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 8005c0e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 8005c10:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8005c12:	3b01      	subs	r3, #1
 8005c14:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 8005c16:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 8005c18:	87e3      	strh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 8005c1a:	63a2      	str	r2, [r4, #56]	; 0x38
 8005c1c:	e7b0      	b.n	8005b80 <HAL_SPI_Transmit+0x144>
      if (hspi->TxXferCount > 1U)
 8005c1e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005c20:	b292      	uxth	r2, r2
 8005c22:	2a01      	cmp	r2, #1
 8005c24:	d91f      	bls.n	8005c66 <HAL_SPI_Transmit+0x22a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c26:	4641      	mov	r1, r8
 8005c28:	f831 2b02 	ldrh.w	r2, [r1], #2
 8005c2c:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8005c2e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c30:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005c32:	3b02      	subs	r3, #2
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005c38:	e7a0      	b.n	8005b7c <HAL_SPI_Transmit+0x140>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c3a:	4641      	mov	r1, r8
 8005c3c:	f831 2b02 	ldrh.w	r2, [r1], #2
 8005c40:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8005c42:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c44:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8005c46:	3b01      	subs	r3, #1
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005c4c:	e747      	b.n	8005ade <HAL_SPI_Transmit+0xa2>
    SPI_1LINE_TX(hspi);
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c54:	601a      	str	r2, [r3, #0]
 8005c56:	e730      	b.n	8005aba <HAL_SPI_Transmit+0x7e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c58:	f7fb f976 	bl	8000f48 <HAL_GetTick>
 8005c5c:	1b80      	subs	r0, r0, r6
 8005c5e:	4285      	cmp	r5, r0
 8005c60:	d8b8      	bhi.n	8005bd4 <HAL_SPI_Transmit+0x198>
          errorcode = HAL_TIMEOUT;
 8005c62:	2003      	movs	r0, #3
 8005c64:	e705      	b.n	8005a72 <HAL_SPI_Transmit+0x36>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c66:	f898 2000 	ldrb.w	r2, [r8]
 8005c6a:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8005c6c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr ++;
 8005c6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005c70:	3b01      	subs	r3, #1
 8005c72:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr ++;
 8005c74:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8005c76:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr ++;
 8005c78:	63a2      	str	r2, [r4, #56]	; 0x38
 8005c7a:	e77f      	b.n	8005b7c <HAL_SPI_Transmit+0x140>

08005c7c <HAL_SPI_ErrorCallback>:
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop

08005c80 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 8005c80:	6802      	ldr	r2, [r0, #0]
{
 8005c82:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8005c84:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8005c86:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005c88:	f003 0541 	and.w	r5, r3, #65	; 0x41
 8005c8c:	2d01      	cmp	r5, #1
{
 8005c8e:	b085      	sub	sp, #20
 8005c90:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005c92:	d05a      	beq.n	8005d4a <HAL_SPI_IRQHandler+0xca>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005c94:	079d      	lsls	r5, r3, #30
 8005c96:	d452      	bmi.n	8005d3e <HAL_SPI_IRQHandler+0xbe>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005c98:	f413 7fb0 	tst.w	r3, #352	; 0x160
 8005c9c:	d04d      	beq.n	8005d3a <HAL_SPI_IRQHandler+0xba>
 8005c9e:	068d      	lsls	r5, r1, #26
 8005ca0:	d54b      	bpl.n	8005d3a <HAL_SPI_IRQHandler+0xba>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005ca2:	0658      	lsls	r0, r3, #25
 8005ca4:	d50e      	bpl.n	8005cc4 <HAL_SPI_IRQHandler+0x44>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005ca6:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8005caa:	2803      	cmp	r0, #3
 8005cac:	d05b      	beq.n	8005d66 <HAL_SPI_IRQHandler+0xe6>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005cae:	6e20      	ldr	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cb0:	2500      	movs	r5, #0
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005cb2:	f040 0004 	orr.w	r0, r0, #4
 8005cb6:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cb8:	9500      	str	r5, [sp, #0]
 8005cba:	68d0      	ldr	r0, [r2, #12]
 8005cbc:	9000      	str	r0, [sp, #0]
 8005cbe:	6890      	ldr	r0, [r2, #8]
 8005cc0:	9000      	str	r0, [sp, #0]
 8005cc2:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005cc4:	069d      	lsls	r5, r3, #26
 8005cc6:	d50c      	bpl.n	8005ce2 <HAL_SPI_IRQHandler+0x62>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005cc8:	6e20      	ldr	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005cca:	2500      	movs	r5, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005ccc:	f040 0001 	orr.w	r0, r0, #1
 8005cd0:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005cd2:	9502      	str	r5, [sp, #8]
 8005cd4:	6890      	ldr	r0, [r2, #8]
 8005cd6:	9002      	str	r0, [sp, #8]
 8005cd8:	6810      	ldr	r0, [r2, #0]
 8005cda:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8005cde:	6010      	str	r0, [r2, #0]
 8005ce0:	9802      	ldr	r0, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005ce2:	05d8      	lsls	r0, r3, #23
 8005ce4:	d508      	bpl.n	8005cf8 <HAL_SPI_IRQHandler+0x78>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005ce6:	6e23      	ldr	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005ce8:	2000      	movs	r0, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005cea:	f043 0308 	orr.w	r3, r3, #8
 8005cee:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005cf0:	9003      	str	r0, [sp, #12]
 8005cf2:	6893      	ldr	r3, [r2, #8]
 8005cf4:	9303      	str	r3, [sp, #12]
 8005cf6:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cf8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005cfa:	b1f3      	cbz	r3, 8005d3a <HAL_SPI_IRQHandler+0xba>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005cfc:	6853      	ldr	r3, [r2, #4]
 8005cfe:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8005d02:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8005d04:	2001      	movs	r0, #1
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005d06:	078b      	lsls	r3, r1, #30
      hspi->State = HAL_SPI_STATE_READY;
 8005d08:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005d0c:	d022      	beq.n	8005d54 <HAL_SPI_IRQHandler+0xd4>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005d0e:	6853      	ldr	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8005d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005d12:	f023 0303 	bic.w	r3, r3, #3
 8005d16:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8005d18:	b120      	cbz	r0, 8005d24 <HAL_SPI_IRQHandler+0xa4>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d1a:	4b17      	ldr	r3, [pc, #92]	; (8005d78 <HAL_SPI_IRQHandler+0xf8>)
 8005d1c:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005d1e:	f7fc f88f 	bl	8001e40 <HAL_DMA_Abort_IT>
 8005d22:	b9d8      	cbnz	r0, 8005d5c <HAL_SPI_IRQHandler+0xdc>
        if (hspi->hdmatx != NULL)
 8005d24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d26:	b140      	cbz	r0, 8005d3a <HAL_SPI_IRQHandler+0xba>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d28:	4b13      	ldr	r3, [pc, #76]	; (8005d78 <HAL_SPI_IRQHandler+0xf8>)
 8005d2a:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005d2c:	f7fc f888 	bl	8001e40 <HAL_DMA_Abort_IT>
 8005d30:	b118      	cbz	r0, 8005d3a <HAL_SPI_IRQHandler+0xba>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d32:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d38:	6623      	str	r3, [r4, #96]	; 0x60
}
 8005d3a:	b005      	add	sp, #20
 8005d3c:	bd30      	pop	{r4, r5, pc}
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005d3e:	0608      	lsls	r0, r1, #24
 8005d40:	d5aa      	bpl.n	8005c98 <HAL_SPI_IRQHandler+0x18>
    hspi->TxISR(hspi);
 8005d42:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005d44:	4620      	mov	r0, r4
 8005d46:	4798      	blx	r3
    return;
 8005d48:	e7f7      	b.n	8005d3a <HAL_SPI_IRQHandler+0xba>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005d4a:	064d      	lsls	r5, r1, #25
 8005d4c:	d5a2      	bpl.n	8005c94 <HAL_SPI_IRQHandler+0x14>
    hspi->RxISR(hspi);
 8005d4e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005d50:	4798      	blx	r3
    return;
 8005d52:	e7f2      	b.n	8005d3a <HAL_SPI_IRQHandler+0xba>
        HAL_SPI_ErrorCallback(hspi);
 8005d54:	4620      	mov	r0, r4
 8005d56:	f7ff ff91 	bl	8005c7c <HAL_SPI_ErrorCallback>
 8005d5a:	e7ee      	b.n	8005d3a <HAL_SPI_IRQHandler+0xba>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d5c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d62:	6623      	str	r3, [r4, #96]	; 0x60
 8005d64:	e7de      	b.n	8005d24 <HAL_SPI_IRQHandler+0xa4>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d66:	2300      	movs	r3, #0
 8005d68:	9301      	str	r3, [sp, #4]
 8005d6a:	68d3      	ldr	r3, [r2, #12]
 8005d6c:	9301      	str	r3, [sp, #4]
 8005d6e:	6893      	ldr	r3, [r2, #8]
 8005d70:	9301      	str	r3, [sp, #4]
 8005d72:	9b01      	ldr	r3, [sp, #4]
        return;
 8005d74:	e7e1      	b.n	8005d3a <HAL_SPI_IRQHandler+0xba>
 8005d76:	bf00      	nop
 8005d78:	08005d7d 	.word	0x08005d7d

08005d7c <SPI_DMAAbortOnError>:
{
 8005d7c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005d7e:	6a83      	ldr	r3, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8005d80:	2200      	movs	r2, #0
 8005d82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  HAL_SPI_ErrorCallback(hspi);
 8005d86:	4618      	mov	r0, r3
  hspi->TxXferCount = 0U;
 8005d88:	87da      	strh	r2, [r3, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8005d8a:	f7ff ff77 	bl	8005c7c <HAL_SPI_ErrorCallback>
 8005d8e:	bd08      	pop	{r3, pc}

08005d90 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d90:	2800      	cmp	r0, #0
 8005d92:	f000 808e 	beq.w	8005eb2 <HAL_TIM_Base_Init+0x122>
{
 8005d96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d98:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005d9c:	4604      	mov	r4, r0
 8005d9e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d057      	beq.n	8005e56 <HAL_TIM_Base_Init+0xc6>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005da6:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005da8:	4943      	ldr	r1, [pc, #268]	; (8005eb8 <HAL_TIM_Base_Init+0x128>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005daa:	2202      	movs	r2, #2
 8005dac:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005db0:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8005db2:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005db4:	d054      	beq.n	8005e60 <HAL_TIM_Base_Init+0xd0>
 8005db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dba:	d068      	beq.n	8005e8e <HAL_TIM_Base_Init+0xfe>
 8005dbc:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8005dc0:	428b      	cmp	r3, r1
 8005dc2:	d026      	beq.n	8005e12 <HAL_TIM_Base_Init+0x82>
 8005dc4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005dc8:	428b      	cmp	r3, r1
 8005dca:	d022      	beq.n	8005e12 <HAL_TIM_Base_Init+0x82>
 8005dcc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005dd0:	428b      	cmp	r3, r1
 8005dd2:	d01e      	beq.n	8005e12 <HAL_TIM_Base_Init+0x82>
 8005dd4:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 8005dd8:	428b      	cmp	r3, r1
 8005dda:	d01a      	beq.n	8005e12 <HAL_TIM_Base_Init+0x82>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ddc:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8005de0:	428b      	cmp	r3, r1
 8005de2:	d051      	beq.n	8005e88 <HAL_TIM_Base_Init+0xf8>
 8005de4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005de8:	428b      	cmp	r3, r1
 8005dea:	d04d      	beq.n	8005e88 <HAL_TIM_Base_Init+0xf8>
 8005dec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005df0:	428b      	cmp	r3, r1
 8005df2:	d049      	beq.n	8005e88 <HAL_TIM_Base_Init+0xf8>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005df4:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005df6:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005df8:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dfe:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8005e00:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e02:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005e04:	6299      	str	r1, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e06:	2201      	movs	r2, #1
 8005e08:	615a      	str	r2, [r3, #20]
  return HAL_OK;
 8005e0a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005e0c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  return HAL_OK;
 8005e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8005e12:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e14:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e16:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e18:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8005e1a:	6865      	ldr	r5, [r4, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e1c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005e20:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e22:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e26:	4925      	ldr	r1, [pc, #148]	; (8005ebc <HAL_TIM_Base_Init+0x12c>)
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e28:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e2e:	4302      	orrs	r2, r0
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e30:	428b      	cmp	r3, r1
  TIMx->CR1 = tmpcr1;
 8005e32:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e34:	62df      	str	r7, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005e36:	629d      	str	r5, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e38:	d00a      	beq.n	8005e50 <HAL_TIM_Base_Init+0xc0>
 8005e3a:	4a21      	ldr	r2, [pc, #132]	; (8005ec0 <HAL_TIM_Base_Init+0x130>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d007      	beq.n	8005e50 <HAL_TIM_Base_Init+0xc0>
 8005e40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d003      	beq.n	8005e50 <HAL_TIM_Base_Init+0xc0>
 8005e48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d1da      	bne.n	8005e06 <HAL_TIM_Base_Init+0x76>
    TIMx->RCR = Structure->RepetitionCounter;
 8005e50:	6962      	ldr	r2, [r4, #20]
 8005e52:	631a      	str	r2, [r3, #48]	; 0x30
 8005e54:	e7d7      	b.n	8005e06 <HAL_TIM_Base_Init+0x76>
    htim->Lock = HAL_UNLOCKED;
 8005e56:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005e5a:	f00b fcdb 	bl	8011814 <HAL_TIM_Base_MspInit>
 8005e5e:	e7a2      	b.n	8005da6 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= Structure->CounterMode;
 8005e60:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e62:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e64:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e66:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005e6a:	432a      	orrs	r2, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e6c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e70:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e76:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8005e78:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e7a:	68e2      	ldr	r2, [r4, #12]
 8005e7c:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005e7e:	6862      	ldr	r2, [r4, #4]
 8005e80:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005e82:	6962      	ldr	r2, [r4, #20]
 8005e84:	631a      	str	r2, [r3, #48]	; 0x30
 8005e86:	e7be      	b.n	8005e06 <HAL_TIM_Base_Init+0x76>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e88:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e8a:	69a1      	ldr	r1, [r4, #24]
 8005e8c:	e7ee      	b.n	8005e6c <HAL_TIM_Base_Init+0xdc>
    tmpcr1 |= Structure->CounterMode;
 8005e8e:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e90:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e92:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e94:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8005e96:	6865      	ldr	r5, [r4, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e98:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005e9c:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e9e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ea2:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ea4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ea8:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8005eaa:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005eac:	62df      	str	r7, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005eae:	629d      	str	r5, [r3, #40]	; 0x28
 8005eb0:	e7c3      	b.n	8005e3a <HAL_TIM_Base_Init+0xaa>
    return HAL_ERROR;
 8005eb2:	2001      	movs	r0, #1
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	40012c00 	.word	0x40012c00
 8005ebc:	40013400 	.word	0x40013400
 8005ec0:	40014000 	.word	0x40014000

08005ec4 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec4:	2202      	movs	r2, #2
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005ec6:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005ecc:	689a      	ldr	r2, [r3, #8]
 8005ece:	4909      	ldr	r1, [pc, #36]	; (8005ef4 <HAL_TIM_Base_Start+0x30>)
 8005ed0:	400a      	ands	r2, r1
 8005ed2:	2a06      	cmp	r2, #6
 8005ed4:	d008      	beq.n	8005ee8 <HAL_TIM_Base_Start+0x24>
 8005ed6:	689a      	ldr	r2, [r3, #8]
 8005ed8:	400a      	ands	r2, r1
 8005eda:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005ede:	d003      	beq.n	8005ee8 <HAL_TIM_Base_Start+0x24>
    __HAL_TIM_ENABLE(htim);
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	f042 0201 	orr.w	r2, r2, #1
 8005ee6:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8005eee:	2000      	movs	r0, #0
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	00010007 	.word	0x00010007

08005ef8 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ef8:	6803      	ldr	r3, [r0, #0]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005efa:	490a      	ldr	r1, [pc, #40]	; (8005f24 <HAL_TIM_Base_Start_IT+0x2c>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005efc:	68da      	ldr	r2, [r3, #12]
 8005efe:	f042 0201 	orr.w	r2, r2, #1
 8005f02:	60da      	str	r2, [r3, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005f04:	689a      	ldr	r2, [r3, #8]
 8005f06:	400a      	ands	r2, r1
 8005f08:	2a06      	cmp	r2, #6
 8005f0a:	d008      	beq.n	8005f1e <HAL_TIM_Base_Start_IT+0x26>
 8005f0c:	689a      	ldr	r2, [r3, #8]
 8005f0e:	400a      	ands	r2, r1
 8005f10:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005f14:	d003      	beq.n	8005f1e <HAL_TIM_Base_Start_IT+0x26>
    __HAL_TIM_ENABLE(htim);
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	f042 0201 	orr.w	r2, r2, #1
 8005f1c:	601a      	str	r2, [r3, #0]
}
 8005f1e:	2000      	movs	r0, #0
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	00010007 	.word	0x00010007

08005f28 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005f28:	6803      	ldr	r3, [r0, #0]
 8005f2a:	68da      	ldr	r2, [r3, #12]
 8005f2c:	f022 0201 	bic.w	r2, r2, #1
 8005f30:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8005f32:	6a19      	ldr	r1, [r3, #32]
 8005f34:	f241 1211 	movw	r2, #4369	; 0x1111
 8005f38:	4211      	tst	r1, r2
 8005f3a:	d108      	bne.n	8005f4e <HAL_TIM_Base_Stop_IT+0x26>
 8005f3c:	6a19      	ldr	r1, [r3, #32]
 8005f3e:	f240 4244 	movw	r2, #1092	; 0x444
 8005f42:	4211      	tst	r1, r2
 8005f44:	d103      	bne.n	8005f4e <HAL_TIM_Base_Stop_IT+0x26>
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	f022 0201 	bic.w	r2, r2, #1
 8005f4c:	601a      	str	r2, [r3, #0]
}
 8005f4e:	2000      	movs	r0, #0
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop

08005f54 <HAL_TIM_PWM_MspInit>:
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop

08005f58 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	f000 808e 	beq.w	800607a <HAL_TIM_PWM_Init+0x122>
{
 8005f5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005f60:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005f64:	4604      	mov	r4, r0
 8005f66:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d057      	beq.n	800601e <HAL_TIM_PWM_Init+0xc6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f6e:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f70:	4943      	ldr	r1, [pc, #268]	; (8006080 <HAL_TIM_PWM_Init+0x128>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005f72:	2202      	movs	r2, #2
 8005f74:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f78:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8005f7a:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f7c:	d054      	beq.n	8006028 <HAL_TIM_PWM_Init+0xd0>
 8005f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f82:	d068      	beq.n	8006056 <HAL_TIM_PWM_Init+0xfe>
 8005f84:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8005f88:	428b      	cmp	r3, r1
 8005f8a:	d026      	beq.n	8005fda <HAL_TIM_PWM_Init+0x82>
 8005f8c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005f90:	428b      	cmp	r3, r1
 8005f92:	d022      	beq.n	8005fda <HAL_TIM_PWM_Init+0x82>
 8005f94:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005f98:	428b      	cmp	r3, r1
 8005f9a:	d01e      	beq.n	8005fda <HAL_TIM_PWM_Init+0x82>
 8005f9c:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 8005fa0:	428b      	cmp	r3, r1
 8005fa2:	d01a      	beq.n	8005fda <HAL_TIM_PWM_Init+0x82>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fa4:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8005fa8:	428b      	cmp	r3, r1
 8005faa:	d051      	beq.n	8006050 <HAL_TIM_PWM_Init+0xf8>
 8005fac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005fb0:	428b      	cmp	r3, r1
 8005fb2:	d04d      	beq.n	8006050 <HAL_TIM_PWM_Init+0xf8>
 8005fb4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005fb8:	428b      	cmp	r3, r1
 8005fba:	d049      	beq.n	8006050 <HAL_TIM_PWM_Init+0xf8>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fbc:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fbe:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8005fc0:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fc6:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8005fc8:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fca:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005fcc:	6299      	str	r1, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005fce:	2201      	movs	r2, #1
 8005fd0:	615a      	str	r2, [r3, #20]
  return HAL_OK;
 8005fd2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005fd4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  return HAL_OK;
 8005fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8005fda:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fdc:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fde:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fe0:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8005fe2:	6865      	ldr	r5, [r4, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fe4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005fe8:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fee:	4925      	ldr	r1, [pc, #148]	; (8006084 <HAL_TIM_PWM_Init+0x12c>)
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ff0:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ff2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ff6:	4302      	orrs	r2, r0
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ff8:	428b      	cmp	r3, r1
  TIMx->CR1 = tmpcr1;
 8005ffa:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ffc:	62df      	str	r7, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005ffe:	629d      	str	r5, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006000:	d00a      	beq.n	8006018 <HAL_TIM_PWM_Init+0xc0>
 8006002:	4a21      	ldr	r2, [pc, #132]	; (8006088 <HAL_TIM_PWM_Init+0x130>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d007      	beq.n	8006018 <HAL_TIM_PWM_Init+0xc0>
 8006008:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800600c:	4293      	cmp	r3, r2
 800600e:	d003      	beq.n	8006018 <HAL_TIM_PWM_Init+0xc0>
 8006010:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006014:	4293      	cmp	r3, r2
 8006016:	d1da      	bne.n	8005fce <HAL_TIM_PWM_Init+0x76>
    TIMx->RCR = Structure->RepetitionCounter;
 8006018:	6962      	ldr	r2, [r4, #20]
 800601a:	631a      	str	r2, [r3, #48]	; 0x30
 800601c:	e7d7      	b.n	8005fce <HAL_TIM_PWM_Init+0x76>
    htim->Lock = HAL_UNLOCKED;
 800601e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006022:	f7ff ff97 	bl	8005f54 <HAL_TIM_PWM_MspInit>
 8006026:	e7a2      	b.n	8005f6e <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= Structure->CounterMode;
 8006028:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800602a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800602c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800602e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006032:	432a      	orrs	r2, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8006034:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006038:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800603a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800603e:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8006040:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006042:	68e2      	ldr	r2, [r4, #12]
 8006044:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006046:	6862      	ldr	r2, [r4, #4]
 8006048:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800604a:	6962      	ldr	r2, [r4, #20]
 800604c:	631a      	str	r2, [r3, #48]	; 0x30
 800604e:	e7be      	b.n	8005fce <HAL_TIM_PWM_Init+0x76>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006050:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006052:	69a1      	ldr	r1, [r4, #24]
 8006054:	e7ee      	b.n	8006034 <HAL_TIM_PWM_Init+0xdc>
    tmpcr1 |= Structure->CounterMode;
 8006056:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006058:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800605a:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800605c:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 800605e:	6865      	ldr	r5, [r4, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006060:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006064:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8006066:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800606a:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800606c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006070:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8006072:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006074:	62df      	str	r7, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006076:	629d      	str	r5, [r3, #40]	; 0x28
 8006078:	e7c3      	b.n	8006002 <HAL_TIM_PWM_Init+0xaa>
    return HAL_ERROR;
 800607a:	2001      	movs	r0, #1
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	40012c00 	.word	0x40012c00
 8006084:	40013400 	.word	0x40013400
 8006088:	40014000 	.word	0x40014000

0800608c <HAL_TIM_PWM_Start>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800608c:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800608e:	2201      	movs	r2, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006090:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006092:	f001 011f 	and.w	r1, r1, #31
 8006096:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 800609a:	ea20 0001 	bic.w	r0, r0, r1
{
 800609e:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 80060a0:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060a2:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060a4:	4c15      	ldr	r4, [pc, #84]	; (80060fc <HAL_TIM_PWM_Start+0x70>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060a6:	4311      	orrs	r1, r2
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060a8:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060aa:	6219      	str	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060ac:	d020      	beq.n	80060f0 <HAL_TIM_PWM_Start+0x64>
 80060ae:	4a14      	ldr	r2, [pc, #80]	; (8006100 <HAL_TIM_PWM_Start+0x74>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d01d      	beq.n	80060f0 <HAL_TIM_PWM_Start+0x64>
 80060b4:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d019      	beq.n	80060f0 <HAL_TIM_PWM_Start+0x64>
 80060bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d015      	beq.n	80060f0 <HAL_TIM_PWM_Start+0x64>
 80060c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d011      	beq.n	80060f0 <HAL_TIM_PWM_Start+0x64>
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 80060cc:	689a      	ldr	r2, [r3, #8]
 80060ce:	490d      	ldr	r1, [pc, #52]	; (8006104 <HAL_TIM_PWM_Start+0x78>)
 80060d0:	400a      	ands	r2, r1
 80060d2:	2a06      	cmp	r2, #6
 80060d4:	d008      	beq.n	80060e8 <HAL_TIM_PWM_Start+0x5c>
 80060d6:	689a      	ldr	r2, [r3, #8]
 80060d8:	400a      	ands	r2, r1
 80060da:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80060de:	d003      	beq.n	80060e8 <HAL_TIM_PWM_Start+0x5c>
    __HAL_TIM_ENABLE(htim);
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	f042 0201 	orr.w	r2, r2, #1
 80060e6:	601a      	str	r2, [r3, #0]
}
 80060e8:	2000      	movs	r0, #0
 80060ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060ee:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 80060f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060f6:	645a      	str	r2, [r3, #68]	; 0x44
 80060f8:	e7e8      	b.n	80060cc <HAL_TIM_PWM_Start+0x40>
 80060fa:	bf00      	nop
 80060fc:	40012c00 	.word	0x40012c00
 8006100:	40013400 	.word	0x40013400
 8006104:	00010007 	.word	0x00010007

08006108 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8006108:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800610c:	2b01      	cmp	r3, #1
 800610e:	d066      	beq.n	80061de <HAL_TIM_PWM_ConfigChannel+0xd6>
{
 8006110:	b5f0      	push	{r4, r5, r6, r7, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8006112:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8006114:	2401      	movs	r4, #1
 8006116:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800611a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 800611e:	2a14      	cmp	r2, #20
 8006120:	d855      	bhi.n	80061ce <HAL_TIM_PWM_ConfigChannel+0xc6>
 8006122:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006126:	009e      	.short	0x009e
 8006128:	00540054 	.word	0x00540054
 800612c:	00dd0054 	.word	0x00dd0054
 8006130:	00540054 	.word	0x00540054
 8006134:	011d0054 	.word	0x011d0054
 8006138:	00540054 	.word	0x00540054
 800613c:	00150054 	.word	0x00150054
 8006140:	00540054 	.word	0x00540054
 8006144:	01590054 	.word	0x01590054
 8006148:	00540054 	.word	0x00540054
 800614c:	005e0054 	.word	0x005e0054
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006150:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006152:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006156:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006158:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800615a:	4e9e      	ldr	r6, [pc, #632]	; (80063d4 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800615c:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8006160:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8006162:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006164:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8006166:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006168:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 800616c:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006170:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006174:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006176:	ea44 340e 	orr.w	r4, r4, lr, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800617a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800617e:	f000 8171 	beq.w	8006464 <HAL_TIM_PWM_ConfigChannel+0x35c>
 8006182:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006186:	42b3      	cmp	r3, r6
 8006188:	f000 816c 	beq.w	8006464 <HAL_TIM_PWM_ConfigChannel+0x35c>
 800618c:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006190:	42b3      	cmp	r3, r6
 8006192:	f000 8167 	beq.w	8006464 <HAL_TIM_PWM_ConfigChannel+0x35c>
 8006196:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800619a:	42b3      	cmp	r3, r6
 800619c:	f000 8162 	beq.w	8006464 <HAL_TIM_PWM_ConfigChannel+0x35c>
 80061a0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80061a4:	42b3      	cmp	r3, r6
 80061a6:	f000 815d 	beq.w	8006464 <HAL_TIM_PWM_ConfigChannel+0x35c>
  TIMx->CCR4 = OC_Config->Pulse;
 80061aa:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80061ac:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80061ae:	61da      	str	r2, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80061b0:	641e      	str	r6, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80061b2:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061b4:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061b6:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061b8:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 80061bc:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061be:	69d9      	ldr	r1, [r3, #28]
 80061c0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80061c4:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061c6:	69da      	ldr	r2, [r3, #28]
 80061c8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80061cc:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80061ce:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80061d0:	2201      	movs	r2, #1
 80061d2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80061d6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80061da:	4618      	mov	r0, r3
 80061dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 80061de:	2002      	movs	r0, #2
 80061e0:	4770      	bx	lr
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80061e2:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80061e4:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80061e8:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061ea:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ec:	4e79      	ldr	r6, [pc, #484]	; (80063d4 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80061ee:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
 80061f2:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80061f4:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80061f6:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80061f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80061fa:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80061fe:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006202:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006206:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006208:	ea44 540e 	orr.w	r4, r4, lr, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800620c:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006210:	f000 811c 	beq.w	800644c <HAL_TIM_PWM_ConfigChannel+0x344>
 8006214:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006218:	42b3      	cmp	r3, r6
 800621a:	f000 8117 	beq.w	800644c <HAL_TIM_PWM_ConfigChannel+0x344>
 800621e:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006222:	42b3      	cmp	r3, r6
 8006224:	f000 8112 	beq.w	800644c <HAL_TIM_PWM_ConfigChannel+0x344>
 8006228:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800622c:	42b3      	cmp	r3, r6
 800622e:	f000 810d 	beq.w	800644c <HAL_TIM_PWM_ConfigChannel+0x344>
 8006232:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006236:	42b3      	cmp	r3, r6
 8006238:	f000 8108 	beq.w	800644c <HAL_TIM_PWM_ConfigChannel+0x344>
  TIMx->CCR6 = OC_Config->Pulse;
 800623c:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800623e:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006240:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8006242:	65de      	str	r6, [r3, #92]	; 0x5c
  TIMx->CCER = tmpccer;
 8006244:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006246:	6d5c      	ldr	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006248:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800624a:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 800624e:	655c      	str	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006250:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006252:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006256:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006258:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800625a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800625e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006260:	e7b5      	b.n	80061ce <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006262:	6803      	ldr	r3, [r0, #0]
  tmpccer |= OC_Config->OCPolarity;
 8006264:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006268:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800626a:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800626c:	4e59      	ldr	r6, [pc, #356]	; (80063d4 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800626e:	f025 0501 	bic.w	r5, r5, #1
 8006272:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8006274:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006276:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8006278:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800627a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 800627e:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006282:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006286:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 8006288:	ea42 020e 	orr.w	r2, r2, lr
  tmpccmrx |= OC_Config->OCMode;
 800628c:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006290:	f000 810c 	beq.w	80064ac <HAL_TIM_PWM_ConfigChannel+0x3a4>
 8006294:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006298:	42b3      	cmp	r3, r6
 800629a:	f000 8107 	beq.w	80064ac <HAL_TIM_PWM_ConfigChannel+0x3a4>
 800629e:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80062a2:	42b3      	cmp	r3, r6
 80062a4:	f000 8102 	beq.w	80064ac <HAL_TIM_PWM_ConfigChannel+0x3a4>
 80062a8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80062ac:	42b3      	cmp	r3, r6
 80062ae:	f000 80fd 	beq.w	80064ac <HAL_TIM_PWM_ConfigChannel+0x3a4>
 80062b2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80062b6:	42b3      	cmp	r3, r6
 80062b8:	f000 80f8 	beq.w	80064ac <HAL_TIM_PWM_ConfigChannel+0x3a4>
  TIMx->CCR1 = OC_Config->Pulse;
 80062bc:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80062be:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80062c0:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80062c2:	635e      	str	r6, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80062c4:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062c6:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062c8:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062ca:	f044 0408 	orr.w	r4, r4, #8
 80062ce:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062d0:	6999      	ldr	r1, [r3, #24]
 80062d2:	f021 0104 	bic.w	r1, r1, #4
 80062d6:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062d8:	699a      	ldr	r2, [r3, #24]
 80062da:	432a      	orrs	r2, r5
 80062dc:	619a      	str	r2, [r3, #24]
      break;
 80062de:	e776      	b.n	80061ce <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062e0:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062e2:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062e6:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062e8:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062ea:	4e3a      	ldr	r6, [pc, #232]	; (80063d4 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062ec:	f025 0510 	bic.w	r5, r5, #16
 80062f0:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80062f2:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80062f4:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80062f6:	699a      	ldr	r2, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062f8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 80062fc:	f024 0420 	bic.w	r4, r4, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006300:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006304:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006306:	ea44 140e 	orr.w	r4, r4, lr, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800630a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800630e:	f000 80be 	beq.w	800648e <HAL_TIM_PWM_ConfigChannel+0x386>
 8006312:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006316:	42b3      	cmp	r3, r6
 8006318:	f000 80b9 	beq.w	800648e <HAL_TIM_PWM_ConfigChannel+0x386>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800631c:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006320:	42b3      	cmp	r3, r6
 8006322:	f000 80bb 	beq.w	800649c <HAL_TIM_PWM_ConfigChannel+0x394>
 8006326:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800632a:	42b3      	cmp	r3, r6
 800632c:	f000 80b6 	beq.w	800649c <HAL_TIM_PWM_ConfigChannel+0x394>
 8006330:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006334:	42b3      	cmp	r3, r6
 8006336:	f000 80b1 	beq.w	800649c <HAL_TIM_PWM_ConfigChannel+0x394>
  TIMx->CCR2 = OC_Config->Pulse;
 800633a:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800633c:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800633e:	619a      	str	r2, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8006340:	639e      	str	r6, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006342:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006344:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006346:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006348:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 800634c:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800634e:	6999      	ldr	r1, [r3, #24]
 8006350:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006354:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006356:	699a      	ldr	r2, [r3, #24]
 8006358:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800635c:	619a      	str	r2, [r3, #24]
      break;
 800635e:	e736      	b.n	80061ce <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006360:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006362:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006366:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8006368:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800636a:	4e1a      	ldr	r6, [pc, #104]	; (80063d4 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800636c:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8006370:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8006372:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006374:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8006376:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006378:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 800637c:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006380:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006384:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006386:	ea44 240e 	orr.w	r4, r4, lr, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 800638a:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800638e:	d06f      	beq.n	8006470 <HAL_TIM_PWM_ConfigChannel+0x368>
 8006390:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006394:	42b3      	cmp	r3, r6
 8006396:	d06b      	beq.n	8006470 <HAL_TIM_PWM_ConfigChannel+0x368>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006398:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800639c:	42b3      	cmp	r3, r6
 800639e:	d06e      	beq.n	800647e <HAL_TIM_PWM_ConfigChannel+0x376>
 80063a0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80063a4:	42b3      	cmp	r3, r6
 80063a6:	d06a      	beq.n	800647e <HAL_TIM_PWM_ConfigChannel+0x376>
 80063a8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80063ac:	42b3      	cmp	r3, r6
 80063ae:	d066      	beq.n	800647e <HAL_TIM_PWM_ConfigChannel+0x376>
  TIMx->CCR3 = OC_Config->Pulse;
 80063b0:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80063b2:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80063b4:	61da      	str	r2, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80063b6:	63de      	str	r6, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80063b8:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063ba:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063bc:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063be:	f044 0408 	orr.w	r4, r4, #8
 80063c2:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063c4:	69d9      	ldr	r1, [r3, #28]
 80063c6:	f021 0104 	bic.w	r1, r1, #4
 80063ca:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063cc:	69da      	ldr	r2, [r3, #28]
 80063ce:	432a      	orrs	r2, r5
 80063d0:	61da      	str	r2, [r3, #28]
      break;
 80063d2:	e6fc      	b.n	80061ce <HAL_TIM_PWM_ConfigChannel+0xc6>
 80063d4:	40012c00 	.word	0x40012c00
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80063d8:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80063da:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80063de:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 80063e0:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063e2:	4e39      	ldr	r6, [pc, #228]	; (80064c8 <HAL_TIM_PWM_ConfigChannel+0x3c0>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80063e4:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
 80063e8:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80063ea:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80063ec:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80063ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80063f0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 80063f4:	f424 3400 	bic.w	r4, r4, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80063f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063fc:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80063fe:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 8006402:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006406:	d027      	beq.n	8006458 <HAL_TIM_PWM_ConfigChannel+0x350>
 8006408:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800640c:	42b3      	cmp	r3, r6
 800640e:	d023      	beq.n	8006458 <HAL_TIM_PWM_ConfigChannel+0x350>
 8006410:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006414:	42b3      	cmp	r3, r6
 8006416:	d01f      	beq.n	8006458 <HAL_TIM_PWM_ConfigChannel+0x350>
 8006418:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800641c:	42b3      	cmp	r3, r6
 800641e:	d01b      	beq.n	8006458 <HAL_TIM_PWM_ConfigChannel+0x350>
 8006420:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006424:	42b3      	cmp	r3, r6
 8006426:	d017      	beq.n	8006458 <HAL_TIM_PWM_ConfigChannel+0x350>
  TIMx->CCR5 = OC_Config->Pulse;
 8006428:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800642a:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800642c:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800642e:	659e      	str	r6, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 8006430:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006432:	6d5c      	ldr	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006434:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006436:	f044 0408 	orr.w	r4, r4, #8
 800643a:	655c      	str	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800643c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800643e:	f021 0104 	bic.w	r1, r1, #4
 8006442:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006444:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006446:	432a      	orrs	r2, r5
 8006448:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800644a:	e6c0      	b.n	80061ce <HAL_TIM_PWM_ConfigChannel+0xc6>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800644c:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 800644e:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006452:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
 8006456:	e6f1      	b.n	800623c <HAL_TIM_PWM_ConfigChannel+0x134>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006458:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800645a:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800645e:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8006462:	e7e1      	b.n	8006428 <HAL_TIM_PWM_ConfigChannel+0x320>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006464:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006466:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800646a:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 800646e:	e69c      	b.n	80061aa <HAL_TIM_PWM_ConfigChannel+0xa2>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006470:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8006472:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006476:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800647a:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800647e:	694e      	ldr	r6, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006480:	698f      	ldr	r7, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006482:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006486:	433e      	orrs	r6, r7
 8006488:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 800648c:	e790      	b.n	80063b0 <HAL_TIM_PWM_ConfigChannel+0x2a8>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800648e:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8006490:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006494:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006498:	f024 0440 	bic.w	r4, r4, #64	; 0x40
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800649c:	694e      	ldr	r6, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800649e:	698f      	ldr	r7, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064a0:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064a4:	433e      	orrs	r6, r7
 80064a6:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
 80064aa:	e746      	b.n	800633a <HAL_TIM_PWM_ConfigChannel+0x232>
    tmpccer |= OC_Config->OCNPolarity;
 80064ac:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 80064ae:	698f      	ldr	r7, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 80064b0:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 80064b4:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 80064b6:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064b8:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80064bc:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 80064be:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80064c2:	4335      	orrs	r5, r6
 80064c4:	e6fa      	b.n	80062bc <HAL_TIM_PWM_ConfigChannel+0x1b4>
 80064c6:	bf00      	nop
 80064c8:	40012c00 	.word	0x40012c00

080064cc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80064cc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d03a      	beq.n	800654a <HAL_TIM_ConfigClockSource+0x7e>
  htim->State = HAL_TIM_STATE_BUSY;
 80064d4:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 80064d6:	6803      	ldr	r3, [r0, #0]
{
 80064d8:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 80064da:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80064de:	689d      	ldr	r5, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80064e0:	680a      	ldr	r2, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064e2:	4c54      	ldr	r4, [pc, #336]	; (8006634 <HAL_TIM_ConfigClockSource+0x168>)
  switch (sClockSourceConfig->ClockSource)
 80064e4:	2a40      	cmp	r2, #64	; 0x40
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064e6:	ea04 0405 	and.w	r4, r4, r5
  __HAL_LOCK(htim);
 80064ea:	f04f 0501 	mov.w	r5, #1
 80064ee:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 80064f2:	609c      	str	r4, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80064f4:	d041      	beq.n	800657a <HAL_TIM_ConfigClockSource+0xae>
 80064f6:	d958      	bls.n	80065aa <HAL_TIM_ConfigClockSource+0xde>
 80064f8:	2a70      	cmp	r2, #112	; 0x70
 80064fa:	f000 8084 	beq.w	8006606 <HAL_TIM_ConfigClockSource+0x13a>
 80064fe:	d826      	bhi.n	800654e <HAL_TIM_ConfigClockSource+0x82>
 8006500:	2a50      	cmp	r2, #80	; 0x50
 8006502:	d068      	beq.n	80065d6 <HAL_TIM_ConfigClockSource+0x10a>
 8006504:	2a60      	cmp	r2, #96	; 0x60
 8006506:	d117      	bne.n	8006538 <HAL_TIM_ConfigClockSource+0x6c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006508:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800650a:	684d      	ldr	r5, [r1, #4]
 800650c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800650e:	f024 0410 	bic.w	r4, r4, #16
 8006512:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006514:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8006516:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006518:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800651c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006520:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006524:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8006528:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800652a:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800652c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800652e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006532:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8006536:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8006538:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800653a:	2201      	movs	r2, #1
 800653c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006540:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8006544:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8006546:	4618      	mov	r0, r3
}
 8006548:	4770      	bx	lr
  __HAL_LOCK(htim);
 800654a:	2002      	movs	r0, #2
 800654c:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800654e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8006552:	d039      	beq.n	80065c8 <HAL_TIM_ConfigClockSource+0xfc>
 8006554:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006558:	d1ee      	bne.n	8006538 <HAL_TIM_ConfigClockSource+0x6c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800655a:	688a      	ldr	r2, [r1, #8]
 800655c:	684d      	ldr	r5, [r1, #4]
 800655e:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8006560:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006562:	432a      	orrs	r2, r5
 8006564:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006568:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800656c:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800656e:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006570:	689a      	ldr	r2, [r3, #8]
 8006572:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006576:	609a      	str	r2, [r3, #8]
      break;
 8006578:	e7de      	b.n	8006538 <HAL_TIM_ConfigClockSource+0x6c>
  tmpccer = TIMx->CCER;
 800657a:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800657c:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800657e:	684c      	ldr	r4, [r1, #4]
 8006580:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006582:	f026 0601 	bic.w	r6, r6, #1
 8006586:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006588:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800658a:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800658e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006592:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8006596:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8006598:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800659a:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800659c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800659e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065a2:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80065a6:	609a      	str	r2, [r3, #8]
 80065a8:	e7c6      	b.n	8006538 <HAL_TIM_ConfigClockSource+0x6c>
  switch (sClockSourceConfig->ClockSource)
 80065aa:	2a10      	cmp	r2, #16
 80065ac:	d004      	beq.n	80065b8 <HAL_TIM_ConfigClockSource+0xec>
 80065ae:	d93e      	bls.n	800662e <HAL_TIM_ConfigClockSource+0x162>
 80065b0:	2a20      	cmp	r2, #32
 80065b2:	d001      	beq.n	80065b8 <HAL_TIM_ConfigClockSource+0xec>
 80065b4:	2a30      	cmp	r2, #48	; 0x30
 80065b6:	d1bf      	bne.n	8006538 <HAL_TIM_ConfigClockSource+0x6c>
  tmpsmcr = TIMx->SMCR;
 80065b8:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065ba:	f042 0207 	orr.w	r2, r2, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80065be:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065c2:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 80065c4:	609a      	str	r2, [r3, #8]
 80065c6:	e7b7      	b.n	8006538 <HAL_TIM_ConfigClockSource+0x6c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80065c8:	689a      	ldr	r2, [r3, #8]
 80065ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80065ce:	f022 0207 	bic.w	r2, r2, #7
 80065d2:	609a      	str	r2, [r3, #8]
      break;
 80065d4:	e7b0      	b.n	8006538 <HAL_TIM_ConfigClockSource+0x6c>
  tmpccer = TIMx->CCER;
 80065d6:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065d8:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065da:	684c      	ldr	r4, [r1, #4]
 80065dc:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065de:	f026 0601 	bic.w	r6, r6, #1
 80065e2:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065e4:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065e6:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065ea:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065ee:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80065f2:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80065f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065f6:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80065f8:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80065fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065fe:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8006602:	609a      	str	r2, [r3, #8]
 8006604:	e798      	b.n	8006538 <HAL_TIM_ConfigClockSource+0x6c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006606:	688a      	ldr	r2, [r1, #8]
 8006608:	684d      	ldr	r5, [r1, #4]
 800660a:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 800660c:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800660e:	432a      	orrs	r2, r5
 8006610:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006614:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006618:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800661a:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 800661c:	689a      	ldr	r2, [r3, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800661e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006622:	f022 0277 	bic.w	r2, r2, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006626:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800662a:	609a      	str	r2, [r3, #8]
      break;
 800662c:	e784      	b.n	8006538 <HAL_TIM_ConfigClockSource+0x6c>
  switch (sClockSourceConfig->ClockSource)
 800662e:	2a00      	cmp	r2, #0
 8006630:	d0c2      	beq.n	80065b8 <HAL_TIM_ConfigClockSource+0xec>
 8006632:	e781      	b.n	8006538 <HAL_TIM_ConfigClockSource+0x6c>
 8006634:	fffe0088 	.word	0xfffe0088

08006638 <HAL_TIM_OC_DelayElapsedCallback>:
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop

0800663c <HAL_TIM_IC_CaptureCallback>:
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop

08006640 <HAL_TIM_PWM_PulseFinishedCallback>:
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop

08006644 <HAL_TIM_TriggerCallback>:
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop

08006648 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006648:	6803      	ldr	r3, [r0, #0]
 800664a:	691a      	ldr	r2, [r3, #16]
 800664c:	0791      	lsls	r1, r2, #30
{
 800664e:	b510      	push	{r4, lr}
 8006650:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006652:	d502      	bpl.n	800665a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006654:	68da      	ldr	r2, [r3, #12]
 8006656:	0792      	lsls	r2, r2, #30
 8006658:	d465      	bmi.n	8006726 <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800665a:	691a      	ldr	r2, [r3, #16]
 800665c:	0752      	lsls	r2, r2, #29
 800665e:	d502      	bpl.n	8006666 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006660:	68da      	ldr	r2, [r3, #12]
 8006662:	0750      	lsls	r0, r2, #29
 8006664:	d44c      	bmi.n	8006700 <HAL_TIM_IRQHandler+0xb8>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006666:	691a      	ldr	r2, [r3, #16]
 8006668:	0711      	lsls	r1, r2, #28
 800666a:	d502      	bpl.n	8006672 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800666c:	68da      	ldr	r2, [r3, #12]
 800666e:	0712      	lsls	r2, r2, #28
 8006670:	d434      	bmi.n	80066dc <HAL_TIM_IRQHandler+0x94>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006672:	691a      	ldr	r2, [r3, #16]
 8006674:	06d0      	lsls	r0, r2, #27
 8006676:	d502      	bpl.n	800667e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006678:	68da      	ldr	r2, [r3, #12]
 800667a:	06d1      	lsls	r1, r2, #27
 800667c:	d41e      	bmi.n	80066bc <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800667e:	691a      	ldr	r2, [r3, #16]
 8006680:	07d2      	lsls	r2, r2, #31
 8006682:	d502      	bpl.n	800668a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006684:	68da      	ldr	r2, [r3, #12]
 8006686:	07d0      	lsls	r0, r2, #31
 8006688:	d46b      	bmi.n	8006762 <HAL_TIM_IRQHandler+0x11a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800668a:	691a      	ldr	r2, [r3, #16]
 800668c:	0611      	lsls	r1, r2, #24
 800668e:	d502      	bpl.n	8006696 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006690:	68da      	ldr	r2, [r3, #12]
 8006692:	0612      	lsls	r2, r2, #24
 8006694:	d46d      	bmi.n	8006772 <HAL_TIM_IRQHandler+0x12a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006696:	691a      	ldr	r2, [r3, #16]
 8006698:	05d0      	lsls	r0, r2, #23
 800669a:	d502      	bpl.n	80066a2 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800669c:	68da      	ldr	r2, [r3, #12]
 800669e:	0611      	lsls	r1, r2, #24
 80066a0:	d46f      	bmi.n	8006782 <HAL_TIM_IRQHandler+0x13a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066a2:	691a      	ldr	r2, [r3, #16]
 80066a4:	0652      	lsls	r2, r2, #25
 80066a6:	d502      	bpl.n	80066ae <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066a8:	68da      	ldr	r2, [r3, #12]
 80066aa:	0650      	lsls	r0, r2, #25
 80066ac:	d451      	bmi.n	8006752 <HAL_TIM_IRQHandler+0x10a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066ae:	691a      	ldr	r2, [r3, #16]
 80066b0:	0691      	lsls	r1, r2, #26
 80066b2:	d502      	bpl.n	80066ba <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066b4:	68da      	ldr	r2, [r3, #12]
 80066b6:	0692      	lsls	r2, r2, #26
 80066b8:	d443      	bmi.n	8006742 <HAL_TIM_IRQHandler+0xfa>
 80066ba:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066bc:	f06f 0210 	mvn.w	r2, #16
 80066c0:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066c2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066c4:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066c6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066ca:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80066cc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066ce:	d06c      	beq.n	80067aa <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_IC_CaptureCallback(htim);
 80066d0:	f7ff ffb4 	bl	800663c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066d4:	2200      	movs	r2, #0
 80066d6:	6823      	ldr	r3, [r4, #0]
 80066d8:	7722      	strb	r2, [r4, #28]
 80066da:	e7d0      	b.n	800667e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066dc:	f06f 0208 	mvn.w	r2, #8
 80066e0:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066e2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066e4:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066e6:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066e8:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80066ea:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066ec:	d15a      	bne.n	80067a4 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ee:	f7ff ffa3 	bl	8006638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066f2:	4620      	mov	r0, r4
 80066f4:	f7ff ffa4 	bl	8006640 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066f8:	2200      	movs	r2, #0
 80066fa:	6823      	ldr	r3, [r4, #0]
 80066fc:	7722      	strb	r2, [r4, #28]
 80066fe:	e7b8      	b.n	8006672 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006700:	f06f 0204 	mvn.w	r2, #4
 8006704:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006706:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006708:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800670a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800670e:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8006710:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006712:	d144      	bne.n	800679e <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006714:	f7ff ff90 	bl	8006638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006718:	4620      	mov	r0, r4
 800671a:	f7ff ff91 	bl	8006640 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800671e:	2200      	movs	r2, #0
 8006720:	6823      	ldr	r3, [r4, #0]
 8006722:	7722      	strb	r2, [r4, #28]
 8006724:	e79f      	b.n	8006666 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006726:	f06f 0202 	mvn.w	r2, #2
 800672a:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800672c:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800672e:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006730:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006732:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006734:	d02d      	beq.n	8006792 <HAL_TIM_IRQHandler+0x14a>
          HAL_TIM_IC_CaptureCallback(htim);
 8006736:	f7ff ff81 	bl	800663c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800673a:	2200      	movs	r2, #0
 800673c:	6823      	ldr	r3, [r4, #0]
 800673e:	7722      	strb	r2, [r4, #28]
 8006740:	e78b      	b.n	800665a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006742:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8006746:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006748:	611a      	str	r2, [r3, #16]
}
 800674a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 800674e:	f000 b8a9 	b.w	80068a4 <HAL_TIMEx_CommutationCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006752:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006756:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006758:	4620      	mov	r0, r4
 800675a:	f7ff ff73 	bl	8006644 <HAL_TIM_TriggerCallback>
 800675e:	6823      	ldr	r3, [r4, #0]
 8006760:	e7a5      	b.n	80066ae <HAL_TIM_IRQHandler+0x66>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006762:	f06f 0201 	mvn.w	r2, #1
 8006766:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006768:	4620      	mov	r0, r4
 800676a:	f00a f99d 	bl	8010aa8 <HAL_TIM_PeriodElapsedCallback>
 800676e:	6823      	ldr	r3, [r4, #0]
 8006770:	e78b      	b.n	800668a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006772:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006776:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006778:	4620      	mov	r0, r4
 800677a:	f000 f895 	bl	80068a8 <HAL_TIMEx_BreakCallback>
 800677e:	6823      	ldr	r3, [r4, #0]
 8006780:	e789      	b.n	8006696 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006782:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006786:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8006788:	4620      	mov	r0, r4
 800678a:	f000 f88f 	bl	80068ac <HAL_TIMEx_Break2Callback>
 800678e:	6823      	ldr	r3, [r4, #0]
 8006790:	e787      	b.n	80066a2 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006792:	f7ff ff51 	bl	8006638 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006796:	4620      	mov	r0, r4
 8006798:	f7ff ff52 	bl	8006640 <HAL_TIM_PWM_PulseFinishedCallback>
 800679c:	e7cd      	b.n	800673a <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 800679e:	f7ff ff4d 	bl	800663c <HAL_TIM_IC_CaptureCallback>
 80067a2:	e7bc      	b.n	800671e <HAL_TIM_IRQHandler+0xd6>
        HAL_TIM_IC_CaptureCallback(htim);
 80067a4:	f7ff ff4a 	bl	800663c <HAL_TIM_IC_CaptureCallback>
 80067a8:	e7a6      	b.n	80066f8 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067aa:	f7ff ff45 	bl	8006638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067ae:	4620      	mov	r0, r4
 80067b0:	f7ff ff46 	bl	8006640 <HAL_TIM_PWM_PulseFinishedCallback>
 80067b4:	e78e      	b.n	80066d4 <HAL_TIM_IRQHandler+0x8c>
 80067b6:	bf00      	nop

080067b8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067b8:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80067bc:	2a01      	cmp	r2, #1
 80067be:	d021      	beq.n	8006804 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
{
 80067c0:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067c2:	6804      	ldr	r4, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067c4:	4d13      	ldr	r5, [pc, #76]	; (8006814 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80067c6:	2202      	movs	r2, #2
 80067c8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067cc:	42ac      	cmp	r4, r5
 80067ce:	4603      	mov	r3, r0
  tmpcr2 = htim->Instance->CR2;
 80067d0:	6862      	ldr	r2, [r4, #4]
  tmpsmcr = htim->Instance->SMCR;
 80067d2:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067d4:	d018      	beq.n	8006808 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 80067d6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80067da:	42ac      	cmp	r4, r5
 80067dc:	d014      	beq.n	8006808 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067de:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067e0:	688d      	ldr	r5, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80067e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 80067e6:	f020 0180 	bic.w	r1, r0, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067ea:	4332      	orrs	r2, r6
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067ec:	4329      	orrs	r1, r5

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067ee:	2601      	movs	r6, #1

  __HAL_UNLOCK(htim);
 80067f0:	2500      	movs	r5, #0
  htim->Instance->CR2 = tmpcr2;
 80067f2:	6062      	str	r2, [r4, #4]

  return HAL_OK;
 80067f4:	4628      	mov	r0, r5
  htim->Instance->SMCR = tmpsmcr;
 80067f6:	60a1      	str	r1, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 80067f8:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80067fc:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
}
 8006800:	bc70      	pop	{r4, r5, r6}
 8006802:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006804:	2002      	movs	r0, #2
 8006806:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006808:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800680a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800680e:	432a      	orrs	r2, r5
 8006810:	e7e5      	b.n	80067de <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8006812:	bf00      	nop
 8006814:	40012c00 	.word	0x40012c00

08006818 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006818:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800681c:	2b01      	cmp	r3, #1
 800681e:	d02c      	beq.n	800687a <HAL_TIMEx_ConfigBreakDeadTime+0x62>
{
 8006820:	b4f0      	push	{r4, r5, r6, r7}

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006822:	e891 00e0 	ldmia.w	r1, {r5, r6, r7}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006826:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006828:	690c      	ldr	r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800682a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800682e:	433b      	orrs	r3, r7
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006830:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006834:	4333      	orrs	r3, r6
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006836:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800683a:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800683c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006840:	4602      	mov	r2, r0
 8006842:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006844:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006846:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006848:	4d14      	ldr	r5, [pc, #80]	; (800689c <HAL_TIMEx_ConfigBreakDeadTime+0x84>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800684a:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800684c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006850:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006852:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006856:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006858:	4333      	orrs	r3, r6
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800685a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800685e:	42a8      	cmp	r0, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006860:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006864:	d00b      	beq.n	800687e <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8006866:	4c0e      	ldr	r4, [pc, #56]	; (80068a0 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 8006868:	42a0      	cmp	r0, r4
 800686a:	d008      	beq.n	800687e <HAL_TIMEx_ConfigBreakDeadTime+0x66>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 800686c:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 800686e:	6443      	str	r3, [r0, #68]	; 0x44

  return HAL_OK;
}
 8006870:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8006872:	4608      	mov	r0, r1
  __HAL_UNLOCK(htim);
 8006874:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
}
 8006878:	4770      	bx	lr
  __HAL_LOCK(htim);
 800687a:	2002      	movs	r0, #2
 800687c:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800687e:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006880:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006882:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006884:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006888:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800688c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006890:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006892:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006896:	430b      	orrs	r3, r1
 8006898:	e7e8      	b.n	800686c <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 800689a:	bf00      	nop
 800689c:	40012c00 	.word	0x40012c00
 80068a0:	40013400 	.word	0x40013400

080068a4 <HAL_TIMEx_CommutationCallback>:
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop

080068a8 <HAL_TIMEx_BreakCallback>:
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop

080068ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop

080068b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068b2:	460e      	mov	r6, r1
  uint16_t *tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068b4:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
 80068b8:	2920      	cmp	r1, #32
{
 80068ba:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 80068bc:	d002      	beq.n	80068c4 <HAL_UART_Transmit+0x14>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80068be:	2002      	movs	r0, #2
  }
}
 80068c0:	b003      	add	sp, #12
 80068c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((pData == NULL) || (Size == 0U))
 80068c4:	2e00      	cmp	r6, #0
 80068c6:	d041      	beq.n	800694c <HAL_UART_Transmit+0x9c>
 80068c8:	2a00      	cmp	r2, #0
 80068ca:	d03f      	beq.n	800694c <HAL_UART_Transmit+0x9c>
 80068cc:	461d      	mov	r5, r3
    __HAL_LOCK(huart);
 80068ce:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	4604      	mov	r4, r0
 80068d6:	d0f2      	beq.n	80068be <HAL_UART_Transmit+0xe>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068d8:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068da:	2000      	movs	r0, #0
    __HAL_LOCK(huart);
 80068dc:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068de:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    __HAL_LOCK(huart);
 80068e2:	f884 107c 	strb.w	r1, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068e6:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
 80068ea:	9201      	str	r2, [sp, #4]
    tickstart = HAL_GetTick();
 80068ec:	f7fa fb2c 	bl	8000f48 <HAL_GetTick>
    huart->TxXferCount = Size;
 80068f0:	9a01      	ldr	r2, [sp, #4]
 80068f2:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80068f6:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
    huart->TxXferSize  = Size;
 80068fa:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
    while (huart->TxXferCount > 0U)
 80068fe:	b29b      	uxth	r3, r3
    tickstart = HAL_GetTick();
 8006900:	4607      	mov	r7, r0
 8006902:	6820      	ldr	r0, [r4, #0]
    while (huart->TxXferCount > 0U)
 8006904:	b1b3      	cbz	r3, 8006934 <HAL_UART_Transmit+0x84>
 8006906:	1c69      	adds	r1, r5, #1
 8006908:	d122      	bne.n	8006950 <HAL_UART_Transmit+0xa0>
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800690a:	69c2      	ldr	r2, [r0, #28]
 800690c:	0612      	lsls	r2, r2, #24
 800690e:	d5fc      	bpl.n	800690a <HAL_UART_Transmit+0x5a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006910:	68a3      	ldr	r3, [r4, #8]
 8006912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006916:	d037      	beq.n	8006988 <HAL_UART_Transmit+0xd8>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8006918:	7833      	ldrb	r3, [r6, #0]
 800691a:	8503      	strh	r3, [r0, #40]	; 0x28
 800691c:	3601      	adds	r6, #1
      huart->TxXferCount--;
 800691e:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8006922:	3b01      	subs	r3, #1
 8006924:	b29b      	uxth	r3, r3
 8006926:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800692a:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 800692e:	b29b      	uxth	r3, r3
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1e8      	bne.n	8006906 <HAL_UART_Transmit+0x56>
 8006934:	1c69      	adds	r1, r5, #1
 8006936:	d130      	bne.n	800699a <HAL_UART_Transmit+0xea>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006938:	69c3      	ldr	r3, [r0, #28]
 800693a:	065a      	lsls	r2, r3, #25
 800693c:	d5fc      	bpl.n	8006938 <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 800693e:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8006940:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 8006942:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
    __HAL_UNLOCK(huart);
 8006946:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    return HAL_OK;
 800694a:	e7b9      	b.n	80068c0 <HAL_UART_Transmit+0x10>
      return  HAL_ERROR;
 800694c:	2001      	movs	r0, #1
 800694e:	e7b7      	b.n	80068c0 <HAL_UART_Transmit+0x10>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006950:	69c3      	ldr	r3, [r0, #28]
 8006952:	061b      	lsls	r3, r3, #24
 8006954:	d4dc      	bmi.n	8006910 <HAL_UART_Transmit+0x60>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006956:	b12d      	cbz	r5, 8006964 <HAL_UART_Transmit+0xb4>
 8006958:	f7fa faf6 	bl	8000f48 <HAL_GetTick>
 800695c:	1bc0      	subs	r0, r0, r7
 800695e:	4285      	cmp	r5, r0
 8006960:	6820      	ldr	r0, [r4, #0]
 8006962:	d2d0      	bcs.n	8006906 <HAL_UART_Transmit+0x56>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006964:	6803      	ldr	r3, [r0, #0]
 8006966:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800696a:	6003      	str	r3, [r0, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800696c:	6883      	ldr	r3, [r0, #8]

        huart->gState = HAL_UART_STATE_READY;
 800696e:	2220      	movs	r2, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006970:	f023 0301 	bic.w	r3, r3, #1
        huart->RxState = HAL_UART_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006974:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006976:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8006978:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
      return HAL_TIMEOUT;
 800697c:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 800697e:	f884 107c 	strb.w	r1, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006982:	f884 207e 	strb.w	r2, [r4, #126]	; 0x7e
 8006986:	e79b      	b.n	80068c0 <HAL_UART_Transmit+0x10>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006988:	6923      	ldr	r3, [r4, #16]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1c4      	bne.n	8006918 <HAL_UART_Transmit+0x68>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800698e:	f836 3b02 	ldrh.w	r3, [r6], #2
 8006992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006996:	8503      	strh	r3, [r0, #40]	; 0x28
        pData += 2U;
 8006998:	e7c1      	b.n	800691e <HAL_UART_Transmit+0x6e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800699a:	69c3      	ldr	r3, [r0, #28]
 800699c:	065b      	lsls	r3, r3, #25
 800699e:	d4ce      	bmi.n	800693e <HAL_UART_Transmit+0x8e>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80069a0:	2d00      	cmp	r5, #0
 80069a2:	d0df      	beq.n	8006964 <HAL_UART_Transmit+0xb4>
 80069a4:	f7fa fad0 	bl	8000f48 <HAL_GetTick>
 80069a8:	1bc0      	subs	r0, r0, r7
 80069aa:	4285      	cmp	r5, r0
 80069ac:	6820      	ldr	r0, [r4, #0]
 80069ae:	d2c1      	bcs.n	8006934 <HAL_UART_Transmit+0x84>
 80069b0:	e7d8      	b.n	8006964 <HAL_UART_Transmit+0xb4>
 80069b2:	bf00      	nop

080069b4 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80069b4:	f890 307e 	ldrb.w	r3, [r0, #126]	; 0x7e
 80069b8:	2b20      	cmp	r3, #32
 80069ba:	d001      	beq.n	80069c0 <HAL_UART_Receive_IT+0xc>
    return HAL_BUSY;
 80069bc:	2002      	movs	r0, #2
 80069be:	4770      	bx	lr
    if ((pData == NULL) || (Size == 0U))
 80069c0:	2900      	cmp	r1, #0
 80069c2:	d038      	beq.n	8006a36 <HAL_UART_Receive_IT+0x82>
 80069c4:	2a00      	cmp	r2, #0
 80069c6:	d036      	beq.n	8006a36 <HAL_UART_Receive_IT+0x82>
    __HAL_LOCK(huart);
 80069c8:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d0f5      	beq.n	80069bc <HAL_UART_Receive_IT+0x8>
    UART_MASK_COMPUTATION(huart);
 80069d0:	6883      	ldr	r3, [r0, #8]
{
 80069d2:	b470      	push	{r4, r5, r6}
    UART_MASK_COMPUTATION(huart);
 80069d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->pRxBuffPtr  = pData;
 80069d8:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxISR       = NULL;
 80069da:	f04f 0400 	mov.w	r4, #0
    __HAL_LOCK(huart);
 80069de:	f04f 0101 	mov.w	r1, #1
    huart->RxXferSize  = Size;
 80069e2:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    huart->RxXferCount = Size;
 80069e6:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    __HAL_LOCK(huart);
 80069ea:	f880 107c 	strb.w	r1, [r0, #124]	; 0x7c
    huart->RxISR       = NULL;
 80069ee:	66c4      	str	r4, [r0, #108]	; 0x6c
    UART_MASK_COMPUTATION(huart);
 80069f0:	d02c      	beq.n	8006a4c <HAL_UART_Receive_IT+0x98>
 80069f2:	bb13      	cbnz	r3, 8006a3a <HAL_UART_Receive_IT+0x86>
 80069f4:	6903      	ldr	r3, [r0, #16]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d13e      	bne.n	8006a78 <HAL_UART_Receive_IT+0xc4>
 80069fa:	23ff      	movs	r3, #255	; 0xff
 80069fc:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a00:	2400      	movs	r4, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a02:	2322      	movs	r3, #34	; 0x22
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a04:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a06:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a0a:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a0e:	688b      	ldr	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006a10:	6e44      	ldr	r4, [r0, #100]	; 0x64
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a12:	f043 0301 	orr.w	r3, r3, #1
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006a16:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a1a:	608b      	str	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006a1c:	d048      	beq.n	8006ab0 <HAL_UART_Receive_IT+0xfc>
        huart->RxISR = UART_RxISR_8BIT;
 8006a1e:	4b31      	ldr	r3, [pc, #196]	; (8006ae4 <HAL_UART_Receive_IT+0x130>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006a20:	680a      	ldr	r2, [r1, #0]
 8006a22:	66c3      	str	r3, [r0, #108]	; 0x6c
 8006a24:	f442 7290 	orr.w	r2, r2, #288	; 0x120
      __HAL_UNLOCK(huart);
 8006a28:	2300      	movs	r3, #0
 8006a2a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    return HAL_OK;
 8006a2e:	4618      	mov	r0, r3
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006a30:	600a      	str	r2, [r1, #0]
}
 8006a32:	bc70      	pop	{r4, r5, r6}
 8006a34:	4770      	bx	lr
      return HAL_ERROR;
 8006a36:	2001      	movs	r0, #1
 8006a38:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8006a3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a3e:	d1df      	bne.n	8006a00 <HAL_UART_Receive_IT+0x4c>
 8006a40:	6903      	ldr	r3, [r0, #16]
 8006a42:	b1cb      	cbz	r3, 8006a78 <HAL_UART_Receive_IT+0xc4>
 8006a44:	233f      	movs	r3, #63	; 0x3f
 8006a46:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006a4a:	e7d9      	b.n	8006a00 <HAL_UART_Receive_IT+0x4c>
 8006a4c:	6903      	ldr	r3, [r0, #16]
 8006a4e:	b9bb      	cbnz	r3, 8006a80 <HAL_UART_Receive_IT+0xcc>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a50:	2422      	movs	r4, #34	; 0x22
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a52:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a54:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a58:	f880 407e 	strb.w	r4, [r0, #126]	; 0x7e
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a5c:	688c      	ldr	r4, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006a5e:	6e45      	ldr	r5, [r0, #100]	; 0x64
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a60:	f044 0401 	orr.w	r4, r4, #1
    UART_MASK_COMPUTATION(huart);
 8006a64:	f240 16ff 	movw	r6, #511	; 0x1ff
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006a68:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    UART_MASK_COMPUTATION(huart);
 8006a6c:	f8a0 6060 	strh.w	r6, [r0, #96]	; 0x60
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a70:	608c      	str	r4, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006a72:	d016      	beq.n	8006aa2 <HAL_UART_Receive_IT+0xee>
        huart->RxISR = UART_RxISR_16BIT;
 8006a74:	4b1c      	ldr	r3, [pc, #112]	; (8006ae8 <HAL_UART_Receive_IT+0x134>)
 8006a76:	e7d3      	b.n	8006a20 <HAL_UART_Receive_IT+0x6c>
    UART_MASK_COMPUTATION(huart);
 8006a78:	237f      	movs	r3, #127	; 0x7f
 8006a7a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006a7e:	e7bf      	b.n	8006a00 <HAL_UART_Receive_IT+0x4c>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a80:	2522      	movs	r5, #34	; 0x22
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a82:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a84:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a88:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a8c:	688c      	ldr	r4, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006a8e:	6e45      	ldr	r5, [r0, #100]	; 0x64
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a90:	f044 0401 	orr.w	r4, r4, #1
    UART_MASK_COMPUTATION(huart);
 8006a94:	26ff      	movs	r6, #255	; 0xff
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006a96:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    UART_MASK_COMPUTATION(huart);
 8006a9a:	f8a0 6060 	strh.w	r6, [r0, #96]	; 0x60
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a9e:	608c      	str	r4, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006aa0:	d1bd      	bne.n	8006a1e <HAL_UART_Receive_IT+0x6a>
 8006aa2:	f8b0 4068 	ldrh.w	r4, [r0, #104]	; 0x68
 8006aa6:	4294      	cmp	r4, r2
 8006aa8:	d915      	bls.n	8006ad6 <HAL_UART_Receive_IT+0x122>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1b7      	bne.n	8006a1e <HAL_UART_Receive_IT+0x6a>
 8006aae:	e7e1      	b.n	8006a74 <HAL_UART_Receive_IT+0xc0>
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006ab0:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d8b2      	bhi.n	8006a1e <HAL_UART_Receive_IT+0x6a>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006ab8:	4b0c      	ldr	r3, [pc, #48]	; (8006aec <HAL_UART_Receive_IT+0x138>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aba:	680a      	ldr	r2, [r1, #0]
 8006abc:	66c3      	str	r3, [r0, #108]	; 0x6c
 8006abe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      __HAL_UNLOCK(huart);
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ac8:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006aca:	688a      	ldr	r2, [r1, #8]
 8006acc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    return HAL_OK;
 8006ad0:	4618      	mov	r0, r3
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006ad2:	608a      	str	r2, [r1, #8]
 8006ad4:	e7ad      	b.n	8006a32 <HAL_UART_Receive_IT+0x7e>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006ad6:	4a05      	ldr	r2, [pc, #20]	; (8006aec <HAL_UART_Receive_IT+0x138>)
 8006ad8:	4c05      	ldr	r4, [pc, #20]	; (8006af0 <HAL_UART_Receive_IT+0x13c>)
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	bf14      	ite	ne
 8006ade:	4613      	movne	r3, r2
 8006ae0:	4623      	moveq	r3, r4
 8006ae2:	e7ea      	b.n	8006aba <HAL_UART_Receive_IT+0x106>
 8006ae4:	08006af9 	.word	0x08006af9
 8006ae8:	08006b55 	.word	0x08006b55
 8006aec:	08006bad 	.word	0x08006bad
 8006af0:	08006c6d 	.word	0x08006c6d

08006af4 <HAL_UART_TxCpltCallback>:
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop

08006af8 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006af8:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
 8006afc:	2a22      	cmp	r2, #34	; 0x22
{
 8006afe:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b00:	d006      	beq.n	8006b10 <UART_RxISR_8BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b02:	6802      	ldr	r2, [r0, #0]
 8006b04:	8b13      	ldrh	r3, [r2, #24]
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	f043 0308 	orr.w	r3, r3, #8
 8006b0c:	8313      	strh	r3, [r2, #24]
 8006b0e:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b10:	6801      	ldr	r1, [r0, #0]
  uint16_t uhMask = huart->Mask;
 8006b12:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b16:	8c8c      	ldrh	r4, [r1, #36]	; 0x24
    *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006b18:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8006b1a:	4022      	ands	r2, r4
 8006b1c:	1c4c      	adds	r4, r1, #1
 8006b1e:	6584      	str	r4, [r0, #88]	; 0x58
 8006b20:	700a      	strb	r2, [r1, #0]
    if (--huart->RxXferCount == 0)
 8006b22:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 8006b26:	3a01      	subs	r2, #1
 8006b28:	b292      	uxth	r2, r2
 8006b2a:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
 8006b2e:	2a00      	cmp	r2, #0
 8006b30:	d1ed      	bne.n	8006b0e <UART_RxISR_8BIT+0x16>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b32:	6801      	ldr	r1, [r0, #0]
 8006b34:	680c      	ldr	r4, [r1, #0]
 8006b36:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 8006b3a:	600c      	str	r4, [r1, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b3c:	688c      	ldr	r4, [r1, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8006b3e:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b40:	f024 0401 	bic.w	r4, r4, #1
 8006b44:	608c      	str	r4, [r1, #8]
      huart->RxISR = NULL;
 8006b46:	66c2      	str	r2, [r0, #108]	; 0x6c
      huart->RxState = HAL_UART_STATE_READY;
 8006b48:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
      HAL_UART_RxCpltCallback(huart);
 8006b4c:	f009 ff78 	bl	8010a40 <HAL_UART_RxCpltCallback>
 8006b50:	bd38      	pop	{r3, r4, r5, pc}
 8006b52:	bf00      	nop

08006b54 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b54:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
 8006b58:	2a22      	cmp	r2, #34	; 0x22
{
 8006b5a:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b5c:	d006      	beq.n	8006b6c <UART_RxISR_16BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b5e:	6802      	ldr	r2, [r0, #0]
 8006b60:	8b13      	ldrh	r3, [r2, #24]
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	f043 0308 	orr.w	r3, r3, #8
 8006b68:	8313      	strh	r3, [r2, #24]
 8006b6a:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b6c:	6804      	ldr	r4, [r0, #0]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006b6e:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b72:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8006b74:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8006b76:	402a      	ands	r2, r5
 8006b78:	f821 2b02 	strh.w	r2, [r1], #2
    if (--huart->RxXferCount == 0)
 8006b7c:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    huart->pRxBuffPtr += 2;
 8006b80:	6581      	str	r1, [r0, #88]	; 0x58
    if (--huart->RxXferCount == 0)
 8006b82:	3a01      	subs	r2, #1
 8006b84:	b292      	uxth	r2, r2
 8006b86:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
 8006b8a:	2a00      	cmp	r2, #0
 8006b8c:	d1ed      	bne.n	8006b6a <UART_RxISR_16BIT+0x16>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b8e:	6821      	ldr	r1, [r4, #0]
 8006b90:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8006b94:	6021      	str	r1, [r4, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b96:	68a1      	ldr	r1, [r4, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8006b98:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b9a:	f021 0101 	bic.w	r1, r1, #1
 8006b9e:	60a1      	str	r1, [r4, #8]
      huart->RxISR = NULL;
 8006ba0:	66c2      	str	r2, [r0, #108]	; 0x6c
      huart->RxState = HAL_UART_STATE_READY;
 8006ba2:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
      HAL_UART_RxCpltCallback(huart);
 8006ba6:	f009 ff4b 	bl	8010a40 <HAL_UART_RxCpltCallback>
 8006baa:	bd38      	pop	{r3, r4, r5, pc}

08006bac <UART_RxISR_8BIT_FIFOEN>:
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint8_t   nb_rx_data;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bac:	f890 307e 	ldrb.w	r3, [r0, #126]	; 0x7e
 8006bb0:	2b22      	cmp	r3, #34	; 0x22
 8006bb2:	d006      	beq.n	8006bc2 <UART_RxISR_8BIT_FIFOEN+0x16>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006bb4:	6802      	ldr	r2, [r0, #0]
 8006bb6:	8b13      	ldrh	r3, [r2, #24]
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	f043 0308 	orr.w	r3, r3, #8
 8006bbe:	8313      	strh	r3, [r2, #24]
  }
}
 8006bc0:	4770      	bx	lr
{
 8006bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0 ; nb_rx_data--)
 8006bc6:	f890 5068 	ldrb.w	r5, [r0, #104]	; 0x68
 8006bca:	4604      	mov	r4, r0
 8006bcc:	b36d      	cbz	r5, 8006c2a <UART_RxISR_8BIT_FIFOEN+0x7e>
 8006bce:	f890 8060 	ldrb.w	r8, [r0, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bd2:	4f24      	ldr	r7, [pc, #144]	; (8006c64 <UART_RxISR_8BIT_FIFOEN+0xb8>)
        huart->RxState = HAL_UART_STATE_READY;
 8006bd4:	2620      	movs	r6, #32
 8006bd6:	e003      	b.n	8006be0 <UART_RxISR_8BIT_FIFOEN+0x34>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0 ; nb_rx_data--)
 8006bd8:	3d01      	subs	r5, #1
 8006bda:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8006bde:	d024      	beq.n	8006c2a <UART_RxISR_8BIT_FIFOEN+0x7e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006be0:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006be2:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006be4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006be6:	1c51      	adds	r1, r2, #1
 8006be8:	ea08 0303 	and.w	r3, r8, r3
 8006bec:	65a1      	str	r1, [r4, #88]	; 0x58
 8006bee:	7013      	strb	r3, [r2, #0]
      huart->RxXferCount--;
 8006bf0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 8006bfc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1e8      	bne.n	8006bd8 <UART_RxISR_8BIT_FIFOEN+0x2c>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c06:	6822      	ldr	r2, [r4, #0]
 8006c08:	6811      	ldr	r1, [r2, #0]
 8006c0a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8006c0e:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c10:	6891      	ldr	r1, [r2, #8]
 8006c12:	4039      	ands	r1, r7
 8006c14:	6091      	str	r1, [r2, #8]
        HAL_UART_RxCpltCallback(huart);
 8006c16:	4620      	mov	r0, r4
        huart->RxState = HAL_UART_STATE_READY;
 8006c18:	f884 607e 	strb.w	r6, [r4, #126]	; 0x7e
        huart->RxISR = NULL;
 8006c1c:	66e3      	str	r3, [r4, #108]	; 0x6c
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0 ; nb_rx_data--)
 8006c1e:	3d01      	subs	r5, #1
        HAL_UART_RxCpltCallback(huart);
 8006c20:	f009 ff0e 	bl	8010a40 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0 ; nb_rx_data--)
 8006c24:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8006c28:	d1da      	bne.n	8006be0 <UART_RxISR_8BIT_FIFOEN+0x34>
    if (((huart->RxXferCount != 0U)) && (huart->RxXferCount < huart->NbRxDataToProcess))
 8006c2a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	b19b      	cbz	r3, 8006c5a <UART_RxISR_8BIT_FIFOEN+0xae>
 8006c32:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006c36:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d90e      	bls.n	8006c5e <UART_RxISR_8BIT_FIFOEN+0xb2>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006c40:	6823      	ldr	r3, [r4, #0]
      huart->RxISR = UART_RxISR_8BIT;
 8006c42:	4909      	ldr	r1, [pc, #36]	; (8006c68 <UART_RxISR_8BIT_FIFOEN+0xbc>)
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006c44:	689a      	ldr	r2, [r3, #8]
 8006c46:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006c4a:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006c4c:	681a      	ldr	r2, [r3, #0]
      huart->RxISR = UART_RxISR_8BIT;
 8006c4e:	66e1      	str	r1, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006c50:	f042 0220 	orr.w	r2, r2, #32
 8006c54:	601a      	str	r2, [r3, #0]
 8006c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c62:	bf00      	nop
 8006c64:	effffffe 	.word	0xeffffffe
 8006c68:	08006af9 	.word	0x08006af9

08006c6c <UART_RxISR_16BIT_FIFOEN>:
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint8_t   nb_rx_data;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c6c:	f890 307e 	ldrb.w	r3, [r0, #126]	; 0x7e
 8006c70:	2b22      	cmp	r3, #34	; 0x22
 8006c72:	d006      	beq.n	8006c82 <UART_RxISR_16BIT_FIFOEN+0x16>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c74:	6802      	ldr	r2, [r0, #0]
 8006c76:	8b13      	ldrh	r3, [r2, #24]
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	f043 0308 	orr.w	r3, r3, #8
 8006c7e:	8313      	strh	r3, [r2, #24]
  }
}
 8006c80:	4770      	bx	lr
{
 8006c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0 ; nb_rx_data--)
 8006c86:	f890 5068 	ldrb.w	r5, [r0, #104]	; 0x68
 8006c8a:	4604      	mov	r4, r0
 8006c8c:	b365      	cbz	r5, 8006ce8 <UART_RxISR_16BIT_FIFOEN+0x7c>
  uint16_t  uhMask = huart->Mask;
 8006c8e:	f8b0 8060 	ldrh.w	r8, [r0, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c92:	4f23      	ldr	r7, [pc, #140]	; (8006d20 <UART_RxISR_16BIT_FIFOEN+0xb4>)
        huart->RxState = HAL_UART_STATE_READY;
 8006c94:	2620      	movs	r6, #32
 8006c96:	e003      	b.n	8006ca0 <UART_RxISR_16BIT_FIFOEN+0x34>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0 ; nb_rx_data--)
 8006c98:	3d01      	subs	r5, #1
 8006c9a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8006c9e:	d023      	beq.n	8006ce8 <UART_RxISR_16BIT_FIFOEN+0x7c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ca0:	6821      	ldr	r1, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 8006ca2:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ca4:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 8006ca6:	ea08 0303 	and.w	r3, r8, r3
 8006caa:	f822 3b02 	strh.w	r3, [r2], #2
      huart->RxXferCount--;
 8006cae:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
      huart->pRxBuffPtr += 2;
 8006cb2:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 8006cbc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1e8      	bne.n	8006c98 <UART_RxISR_16BIT_FIFOEN+0x2c>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cc6:	680a      	ldr	r2, [r1, #0]
 8006cc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ccc:	600a      	str	r2, [r1, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006cce:	688a      	ldr	r2, [r1, #8]
 8006cd0:	403a      	ands	r2, r7
 8006cd2:	608a      	str	r2, [r1, #8]
        HAL_UART_RxCpltCallback(huart);
 8006cd4:	4620      	mov	r0, r4
        huart->RxState = HAL_UART_STATE_READY;
 8006cd6:	f884 607e 	strb.w	r6, [r4, #126]	; 0x7e
        huart->RxISR = NULL;
 8006cda:	66e3      	str	r3, [r4, #108]	; 0x6c
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0 ; nb_rx_data--)
 8006cdc:	3d01      	subs	r5, #1
        HAL_UART_RxCpltCallback(huart);
 8006cde:	f009 feaf 	bl	8010a40 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0 ; nb_rx_data--)
 8006ce2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8006ce6:	d1db      	bne.n	8006ca0 <UART_RxISR_16BIT_FIFOEN+0x34>
    if (((huart->RxXferCount != 0U)) && (huart->RxXferCount < huart->NbRxDataToProcess))
 8006ce8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	b19b      	cbz	r3, 8006d18 <UART_RxISR_16BIT_FIFOEN+0xac>
 8006cf0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006cf4:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d90e      	bls.n	8006d1c <UART_RxISR_16BIT_FIFOEN+0xb0>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006cfe:	6823      	ldr	r3, [r4, #0]
      huart->RxISR = UART_RxISR_16BIT;
 8006d00:	4908      	ldr	r1, [pc, #32]	; (8006d24 <UART_RxISR_16BIT_FIFOEN+0xb8>)
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006d02:	689a      	ldr	r2, [r3, #8]
 8006d04:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006d08:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006d0a:	681a      	ldr	r2, [r3, #0]
      huart->RxISR = UART_RxISR_16BIT;
 8006d0c:	66e1      	str	r1, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006d0e:	f042 0220 	orr.w	r2, r2, #32
 8006d12:	601a      	str	r2, [r3, #0]
 8006d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d20:	effffffe 	.word	0xeffffffe
 8006d24:	08006b55 	.word	0x08006b55

08006d28 <HAL_UART_ErrorCallback>:
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop

08006d2c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006d2c:	6803      	ldr	r3, [r0, #0]
 8006d2e:	69da      	ldr	r2, [r3, #28]
{
 8006d30:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8006d32:	0716      	lsls	r6, r2, #28
{
 8006d34:	4604      	mov	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d36:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d38:	6899      	ldr	r1, [r3, #8]
  if (errorflags == RESET)
 8006d3a:	d05d      	beq.n	8006df8 <HAL_UART_IRQHandler+0xcc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)
 8006d3c:	4d6a      	ldr	r5, [pc, #424]	; (8006ee8 <HAL_UART_IRQHandler+0x1bc>)
 8006d3e:	400d      	ands	r5, r1
 8006d40:	d07e      	beq.n	8006e40 <HAL_UART_IRQHandler+0x114>
    if (((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d42:	07d6      	lsls	r6, r2, #31
 8006d44:	d509      	bpl.n	8006d5a <HAL_UART_IRQHandler+0x2e>
 8006d46:	05c6      	lsls	r6, r0, #23
 8006d48:	d507      	bpl.n	8006d5a <HAL_UART_IRQHandler+0x2e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d4a:	2601      	movs	r6, #1
 8006d4c:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d4e:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 8006d52:	f046 0601 	orr.w	r6, r6, #1
 8006d56:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d5a:	0796      	lsls	r6, r2, #30
 8006d5c:	f140 8089 	bpl.w	8006e72 <HAL_UART_IRQHandler+0x146>
 8006d60:	07ce      	lsls	r6, r1, #31
 8006d62:	d50a      	bpl.n	8006d7a <HAL_UART_IRQHandler+0x4e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d64:	2602      	movs	r6, #2
 8006d66:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d68:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 8006d6c:	f046 0604 	orr.w	r6, r6, #4
 8006d70:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d74:	0756      	lsls	r6, r2, #29
 8006d76:	f100 8081 	bmi.w	8006e7c <HAL_UART_IRQHandler+0x150>
    if (((isrflags & USART_ISR_ORE) != RESET)
 8006d7a:	0716      	lsls	r6, r2, #28
 8006d7c:	d505      	bpl.n	8006d8a <HAL_UART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET) ||
 8006d7e:	0686      	lsls	r6, r0, #26
 8006d80:	f100 8085 	bmi.w	8006e8e <HAL_UART_IRQHandler+0x162>
 8006d84:	2d00      	cmp	r5, #0
 8006d86:	f040 8082 	bne.w	8006e8e <HAL_UART_IRQHandler+0x162>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d8a:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8006d8e:	2d00      	cmp	r5, #0
 8006d90:	d031      	beq.n	8006df6 <HAL_UART_IRQHandler+0xca>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != RESET)
 8006d92:	0695      	lsls	r5, r2, #26
 8006d94:	d507      	bpl.n	8006da6 <HAL_UART_IRQHandler+0x7a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
 8006d96:	0680      	lsls	r0, r0, #26
 8006d98:	f140 8082 	bpl.w	8006ea0 <HAL_UART_IRQHandler+0x174>
        if (huart->RxISR != NULL)
 8006d9c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8006d9e:	b112      	cbz	r2, 8006da6 <HAL_UART_IRQHandler+0x7a>
          huart->RxISR(huart);
 8006da0:	4620      	mov	r0, r4
 8006da2:	4790      	blx	r2
 8006da4:	6823      	ldr	r3, [r4, #0]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8006da6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8006daa:	0712      	lsls	r2, r2, #28
 8006dac:	d404      	bmi.n	8006db8 <HAL_UART_IRQHandler+0x8c>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8006dae:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8006db0:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8006db4:	f000 8092 	beq.w	8006edc <HAL_UART_IRQHandler+0x1b0>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006dbe:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006dc0:	689a      	ldr	r2, [r3, #8]
 8006dc2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006dc6:	f022 0201 	bic.w	r2, r2, #1
  huart->RxState = HAL_UART_STATE_READY;
 8006dca:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006dcc:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8006dce:	f884 107e 	strb.w	r1, [r4, #126]	; 0x7e
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd2:	689a      	ldr	r2, [r3, #8]
  huart->RxISR = NULL;
 8006dd4:	2100      	movs	r1, #0
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd6:	0656      	lsls	r6, r2, #25
  huart->RxISR = NULL;
 8006dd8:	66e1      	str	r1, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dda:	d57b      	bpl.n	8006ed4 <HAL_UART_IRQHandler+0x1a8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ddc:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8006dde:	6fa0      	ldr	r0, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006de0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006de4:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8006de6:	2800      	cmp	r0, #0
 8006de8:	d074      	beq.n	8006ed4 <HAL_UART_IRQHandler+0x1a8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006dea:	4b40      	ldr	r3, [pc, #256]	; (8006eec <HAL_UART_IRQHandler+0x1c0>)
 8006dec:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006dee:	f7fb f827 	bl	8001e40 <HAL_DMA_Abort_IT>
 8006df2:	2800      	cmp	r0, #0
 8006df4:	d157      	bne.n	8006ea6 <HAL_UART_IRQHandler+0x17a>
 8006df6:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_RXNE_RXFNE) != RESET)
 8006df8:	0695      	lsls	r5, r2, #26
 8006dfa:	d50a      	bpl.n	8006e12 <HAL_UART_IRQHandler+0xe6>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
 8006dfc:	0686      	lsls	r6, r0, #26
 8006dfe:	d506      	bpl.n	8006e0e <HAL_UART_IRQHandler+0xe2>
      if (huart->RxISR != NULL)
 8006e00:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d0f7      	beq.n	8006df6 <HAL_UART_IRQHandler+0xca>
      huart->TxISR(huart);
 8006e06:	4620      	mov	r0, r4
}
 8006e08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8006e0c:	4718      	bx	r3
            || ((cr3its & USART_CR3_RXFTIE) != RESET)))
 8006e0e:	00cd      	lsls	r5, r1, #3
 8006e10:	d4f6      	bmi.n	8006e00 <HAL_UART_IRQHandler+0xd4>
  if (((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8006e12:	02d5      	lsls	r5, r2, #11
 8006e14:	d40a      	bmi.n	8006e2c <HAL_UART_IRQHandler+0x100>
  if (((isrflags & USART_ISR_TXE_TXFNF) != RESET)
 8006e16:	0615      	lsls	r5, r2, #24
 8006e18:	d51a      	bpl.n	8006e50 <HAL_UART_IRQHandler+0x124>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != RESET)
 8006e1a:	0606      	lsls	r6, r0, #24
 8006e1c:	d516      	bpl.n	8006e4c <HAL_UART_IRQHandler+0x120>
    if (huart->TxISR != NULL)
 8006e1e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d0e8      	beq.n	8006df6 <HAL_UART_IRQHandler+0xca>
      huart->TxISR(huart);
 8006e24:	4620      	mov	r0, r4
}
 8006e26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8006e2a:	4718      	bx	r3
  if (((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8006e2c:	024e      	lsls	r6, r1, #9
 8006e2e:	d5f2      	bpl.n	8006e16 <HAL_UART_IRQHandler+0xea>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e30:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8006e34:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e36:	621a      	str	r2, [r3, #32]
}
 8006e38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8006e3c:	f000 bea0 	b.w	8007b80 <HAL_UARTEx_WakeupCallback>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != RESET))))
 8006e40:	f410 7f90 	tst.w	r0, #288	; 0x120
 8006e44:	d0e5      	beq.n	8006e12 <HAL_UART_IRQHandler+0xe6>
    if (((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006e46:	07d6      	lsls	r6, r2, #31
 8006e48:	d587      	bpl.n	8006d5a <HAL_UART_IRQHandler+0x2e>
 8006e4a:	e77c      	b.n	8006d46 <HAL_UART_IRQHandler+0x1a>
          || ((cr3its & USART_CR3_TXFTIE) != RESET)))
 8006e4c:	020d      	lsls	r5, r1, #8
 8006e4e:	d4e6      	bmi.n	8006e1e <HAL_UART_IRQHandler+0xf2>
  if (((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e50:	0651      	lsls	r1, r2, #25
 8006e52:	d501      	bpl.n	8006e58 <HAL_UART_IRQHandler+0x12c>
 8006e54:	0646      	lsls	r6, r0, #25
 8006e56:	d42b      	bmi.n	8006eb0 <HAL_UART_IRQHandler+0x184>
  if (((isrflags & USART_ISR_TXFE) != RESET) && ((cr1its & USART_CR1_TXFEIE) != RESET))
 8006e58:	0215      	lsls	r5, r2, #8
 8006e5a:	d501      	bpl.n	8006e60 <HAL_UART_IRQHandler+0x134>
 8006e5c:	0041      	lsls	r1, r0, #1
 8006e5e:	d434      	bmi.n	8006eca <HAL_UART_IRQHandler+0x19e>
  if (((isrflags & USART_ISR_RXFF) != RESET) && ((cr1its & USART_CR1_RXFFIE) != RESET))
 8006e60:	01d3      	lsls	r3, r2, #7
 8006e62:	d5c8      	bpl.n	8006df6 <HAL_UART_IRQHandler+0xca>
 8006e64:	2800      	cmp	r0, #0
 8006e66:	dac6      	bge.n	8006df6 <HAL_UART_IRQHandler+0xca>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006e68:	4620      	mov	r0, r4
}
 8006e6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006e6e:	f000 be89 	b.w	8007b84 <HAL_UARTEx_RxFifoFullCallback>
    if (((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e72:	0756      	lsls	r6, r2, #29
 8006e74:	d581      	bpl.n	8006d7a <HAL_UART_IRQHandler+0x4e>
 8006e76:	07ce      	lsls	r6, r1, #31
 8006e78:	f57f af7f 	bpl.w	8006d7a <HAL_UART_IRQHandler+0x4e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e7c:	2604      	movs	r6, #4
 8006e7e:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e80:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 8006e84:	f046 0602 	orr.w	r6, r6, #2
 8006e88:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 8006e8c:	e775      	b.n	8006d7a <HAL_UART_IRQHandler+0x4e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e8e:	2508      	movs	r5, #8
 8006e90:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e92:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8006e96:	f045 0508 	orr.w	r5, r5, #8
 8006e9a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8006e9e:	e774      	b.n	8006d8a <HAL_UART_IRQHandler+0x5e>
              || ((cr3its & USART_CR3_RXFTIE) != RESET)))
 8006ea0:	00c9      	lsls	r1, r1, #3
 8006ea2:	d580      	bpl.n	8006da6 <HAL_UART_IRQHandler+0x7a>
 8006ea4:	e77a      	b.n	8006d9c <HAL_UART_IRQHandler+0x70>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ea6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
}
 8006ea8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006eac:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006eae:	4718      	bx	r3
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006eb0:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006eb2:	2520      	movs	r5, #32
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006eb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  huart->TxISR = NULL;
 8006eb8:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006eba:	601a      	str	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 8006ebc:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8006ebe:	f884 507d 	strb.w	r5, [r4, #125]	; 0x7d
  huart->TxISR = NULL;
 8006ec2:	6721      	str	r1, [r4, #112]	; 0x70
  HAL_UART_TxCpltCallback(huart);
 8006ec4:	f7ff fe16 	bl	8006af4 <HAL_UART_TxCpltCallback>
 8006ec8:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006eca:	4620      	mov	r0, r4
}
 8006ecc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006ed0:	f000 be5a 	b.w	8007b88 <HAL_UARTEx_TxFifoEmptyCallback>
            HAL_UART_ErrorCallback(huart);
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f7ff ff27 	bl	8006d28 <HAL_UART_ErrorCallback>
 8006eda:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8006edc:	4620      	mov	r0, r4
 8006ede:	f7ff ff23 	bl	8006d28 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ee2:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8006ee6:	bd70      	pop	{r4, r5, r6, pc}
 8006ee8:	10000001 	.word	0x10000001
 8006eec:	08006ef1 	.word	0x08006ef1

08006ef0 <UART_DMAAbortOnError>:
{
 8006ef0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ef2:	6a83      	ldr	r3, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  HAL_UART_ErrorCallback(huart);
 8006efa:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 8006efc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8006f00:	f7ff ff12 	bl	8006d28 <HAL_UART_ErrorCallback>
 8006f04:	bd08      	pop	{r3, pc}
 8006f06:	bf00      	nop

08006f08 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f08:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006f0a:	07da      	lsls	r2, r3, #31
{
 8006f0c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f0e:	d506      	bpl.n	8006f1e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f10:	6801      	ldr	r1, [r0, #0]
 8006f12:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006f14:	684a      	ldr	r2, [r1, #4]
 8006f16:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006f1a:	4322      	orrs	r2, r4
 8006f1c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f1e:	079c      	lsls	r4, r3, #30
 8006f20:	d506      	bpl.n	8006f30 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f22:	6801      	ldr	r1, [r0, #0]
 8006f24:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006f26:	684a      	ldr	r2, [r1, #4]
 8006f28:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006f2c:	4322      	orrs	r2, r4
 8006f2e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f30:	0759      	lsls	r1, r3, #29
 8006f32:	d506      	bpl.n	8006f42 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f34:	6801      	ldr	r1, [r0, #0]
 8006f36:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006f38:	684a      	ldr	r2, [r1, #4]
 8006f3a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f3e:	4322      	orrs	r2, r4
 8006f40:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f42:	071a      	lsls	r2, r3, #28
 8006f44:	d506      	bpl.n	8006f54 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f46:	6801      	ldr	r1, [r0, #0]
 8006f48:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006f4a:	684a      	ldr	r2, [r1, #4]
 8006f4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f50:	4322      	orrs	r2, r4
 8006f52:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f54:	06dc      	lsls	r4, r3, #27
 8006f56:	d506      	bpl.n	8006f66 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f58:	6801      	ldr	r1, [r0, #0]
 8006f5a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006f5c:	688a      	ldr	r2, [r1, #8]
 8006f5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f62:	4322      	orrs	r2, r4
 8006f64:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f66:	0699      	lsls	r1, r3, #26
 8006f68:	d506      	bpl.n	8006f78 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f6a:	6801      	ldr	r1, [r0, #0]
 8006f6c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006f6e:	688a      	ldr	r2, [r1, #8]
 8006f70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f74:	4322      	orrs	r2, r4
 8006f76:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f78:	065a      	lsls	r2, r3, #25
 8006f7a:	d509      	bpl.n	8006f90 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f7c:	6801      	ldr	r1, [r0, #0]
 8006f7e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006f80:	684a      	ldr	r2, [r1, #4]
 8006f82:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006f86:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f88:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f8c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f8e:	d00b      	beq.n	8006fa8 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f90:	061b      	lsls	r3, r3, #24
 8006f92:	d506      	bpl.n	8006fa2 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f94:	6802      	ldr	r2, [r0, #0]
 8006f96:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006f98:	6853      	ldr	r3, [r2, #4]
 8006f9a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006f9e:	430b      	orrs	r3, r1
 8006fa0:	6053      	str	r3, [r2, #4]
}
 8006fa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fa6:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fa8:	684a      	ldr	r2, [r1, #4]
 8006faa:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8006fac:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8006fb0:	4322      	orrs	r2, r4
 8006fb2:	604a      	str	r2, [r1, #4]
 8006fb4:	e7ec      	b.n	8006f90 <UART_AdvFeatureConfig+0x88>
 8006fb6:	bf00      	nop

08006fb8 <HAL_UART_Init>:
  if (huart == NULL)
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	f000 821d 	beq.w	80073f8 <HAL_UART_Init+0x440>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006fbe:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
{
 8006fc2:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8006fc6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006fca:	4604      	mov	r4, r0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d06e      	beq.n	80070ae <HAL_UART_Init+0xf6>
  __HAL_UART_DISABLE(huart);
 8006fd0:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fd2:	6926      	ldr	r6, [r4, #16]
 8006fd4:	6967      	ldr	r7, [r4, #20]
 8006fd6:	69e1      	ldr	r1, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fd8:	48c6      	ldr	r0, [pc, #792]	; (80072f4 <HAL_UART_Init+0x33c>)
  huart->gState = HAL_UART_STATE_BUSY;
 8006fda:	2224      	movs	r2, #36	; 0x24
 8006fdc:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
  __HAL_UART_DISABLE(huart);
 8006fe0:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fe2:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8006fe4:	f025 0501 	bic.w	r5, r5, #1
 8006fe8:	601d      	str	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fea:	4332      	orrs	r2, r6
  tmpreg |= (uint32_t)huart->FifoMode;
 8006fec:	6e65      	ldr	r5, [r4, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fee:	681e      	ldr	r6, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ff0:	433a      	orrs	r2, r7
 8006ff2:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ff4:	4030      	ands	r0, r6
  tmpreg |= (uint32_t)huart->FifoMode;
 8006ff6:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ff8:	4302      	orrs	r2, r0
 8006ffa:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ffc:	685a      	ldr	r2, [r3, #4]
 8006ffe:	68e5      	ldr	r5, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007000:	48bd      	ldr	r0, [pc, #756]	; (80072f8 <HAL_UART_Init+0x340>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007002:	69a6      	ldr	r6, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007004:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007008:	432a      	orrs	r2, r5
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800700a:	4283      	cmp	r3, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800700c:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800700e:	f000 819b 	beq.w	8007348 <HAL_UART_Init+0x390>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007012:	6898      	ldr	r0, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8007014:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007016:	6a65      	ldr	r5, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007018:	4fb8      	ldr	r7, [pc, #736]	; (80072fc <HAL_UART_Init+0x344>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800701a:	f020 406e 	bic.w	r0, r0, #3992977408	; 0xee000000
 800701e:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8007022:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007024:	4302      	orrs	r2, r0
 8007026:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800702a:	f022 020f 	bic.w	r2, r2, #15
 800702e:	432a      	orrs	r2, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007030:	42bb      	cmp	r3, r7
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007032:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007034:	f000 81d0 	beq.w	80073d8 <HAL_UART_Init+0x420>
 8007038:	4ab1      	ldr	r2, [pc, #708]	; (8007300 <HAL_UART_Init+0x348>)
 800703a:	4293      	cmp	r3, r2
 800703c:	f000 81d4 	beq.w	80073e8 <HAL_UART_Init+0x430>
 8007040:	4ab0      	ldr	r2, [pc, #704]	; (8007304 <HAL_UART_Init+0x34c>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d07f      	beq.n	8007146 <HAL_UART_Init+0x18e>
 8007046:	4ab0      	ldr	r2, [pc, #704]	; (8007308 <HAL_UART_Init+0x350>)
 8007048:	4293      	cmp	r3, r2
 800704a:	f000 80b3 	beq.w	80071b4 <HAL_UART_Init+0x1fc>
 800704e:	4aaf      	ldr	r2, [pc, #700]	; (800730c <HAL_UART_Init+0x354>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d011      	beq.n	8007078 <HAL_UART_Init+0xc0>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8007054:	2310      	movs	r3, #16
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007056:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800705a:	f000 815d 	beq.w	8007318 <HAL_UART_Init+0x360>
    switch (clocksource)
 800705e:	2b08      	cmp	r3, #8
 8007060:	d81c      	bhi.n	800709c <HAL_UART_Init+0xe4>
 8007062:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007066:	00b7      	.short	0x00b7
 8007068:	00f00029 	.word	0x00f00029
 800706c:	00e5001b 	.word	0x00e5001b
 8007070:	001b001b 	.word	0x001b001b
 8007074:	0080001b 	.word	0x0080001b
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007078:	4ba5      	ldr	r3, [pc, #660]	; (8007310 <HAL_UART_Init+0x358>)
 800707a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800707e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007086:	f000 80cf 	beq.w	8007228 <HAL_UART_Init+0x270>
 800708a:	f240 809c 	bls.w	80071c6 <HAL_UART_Init+0x20e>
 800708e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007092:	f000 80d4 	beq.w	800723e <HAL_UART_Init+0x286>
 8007096:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800709a:	d060      	beq.n	800715e <HAL_UART_Init+0x1a6>
  huart->RxISR = NULL;
 800709c:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800709e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80070a2:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80070a4:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 80070a6:	6723      	str	r3, [r4, #112]	; 0x70
    return HAL_ERROR;
 80070a8:	2001      	movs	r0, #1
 80070aa:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
    huart->Lock = HAL_UNLOCKED;
 80070ae:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 80070b2:	f00a fcaf 	bl	8011a14 <HAL_UART_MspInit>
 80070b6:	e78b      	b.n	8006fd0 <HAL_UART_Init+0x18>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070b8:	f7fd fba4 	bl	8004804 <HAL_RCC_GetPCLK2Freq>
 80070bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f040 808e 	bne.w	80071e0 <HAL_UART_Init+0x228>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070c4:	2301      	movs	r3, #1
 80070c6:	6862      	ldr	r2, [r4, #4]
 80070c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80070cc:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80070d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80070d4:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070d6:	f1a3 0110 	sub.w	r1, r3, #16
 80070da:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80070de:	4291      	cmp	r1, r2
 80070e0:	d8dc      	bhi.n	800709c <HAL_UART_Init+0xe4>
      huart->Instance->BRR = usartdiv;
 80070e2:	6822      	ldr	r2, [r4, #0]
 80070e4:	60d3      	str	r3, [r2, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070e6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  huart->RxISR = NULL;
 80070e8:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 80070ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070ee:	66a1      	str	r1, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80070f0:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 80070f2:	6723      	str	r3, [r4, #112]	; 0x70
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070f4:	2a00      	cmp	r2, #0
 80070f6:	f040 80f9 	bne.w	80072ec <HAL_UART_Init+0x334>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070fa:	6823      	ldr	r3, [r4, #0]
 80070fc:	685a      	ldr	r2, [r3, #4]
 80070fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007102:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007104:	689a      	ldr	r2, [r3, #8]
 8007106:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800710a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800710c:	681a      	ldr	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800710e:	2100      	movs	r1, #0
  __HAL_UART_ENABLE(huart);
 8007110:	f042 0201 	orr.w	r2, r2, #1
 8007114:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007116:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  tickstart = HAL_GetTick();
 800711a:	f7f9 ff15 	bl	8000f48 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800711e:	6823      	ldr	r3, [r4, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8007124:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007126:	f100 80b6 	bmi.w	8007296 <HAL_UART_Init+0x2de>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	0752      	lsls	r2, r2, #29
 800712e:	f100 80d0 	bmi.w	80072d2 <HAL_UART_Init+0x31a>
  huart->gState = HAL_UART_STATE_READY;
 8007132:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8007134:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8007136:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(huart);
 800713a:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800713e:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
 8007142:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007146:	4b72      	ldr	r3, [pc, #456]	; (8007310 <HAL_UART_Init+0x358>)
 8007148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800714c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007150:	2b10      	cmp	r3, #16
 8007152:	d069      	beq.n	8007228 <HAL_UART_Init+0x270>
 8007154:	d937      	bls.n	80071c6 <HAL_UART_Init+0x20e>
 8007156:	2b20      	cmp	r3, #32
 8007158:	d071      	beq.n	800723e <HAL_UART_Init+0x286>
 800715a:	2b30      	cmp	r3, #48	; 0x30
 800715c:	d19e      	bne.n	800709c <HAL_UART_Init+0xe4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800715e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8007162:	f000 81a3 	beq.w	80074ac <HAL_UART_Init+0x4f4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007166:	2d00      	cmp	r5, #0
 8007168:	f000 8150 	beq.w	800740c <HAL_UART_Init+0x454>
 800716c:	2d01      	cmp	r5, #1
 800716e:	f000 8368 	beq.w	8007842 <HAL_UART_Init+0x88a>
 8007172:	2d02      	cmp	r5, #2
 8007174:	f000 836e 	beq.w	8007854 <HAL_UART_Init+0x89c>
 8007178:	2d03      	cmp	r5, #3
 800717a:	f000 8372 	beq.w	8007862 <HAL_UART_Init+0x8aa>
 800717e:	2d04      	cmp	r5, #4
 8007180:	f000 837d 	beq.w	800787e <HAL_UART_Init+0x8c6>
 8007184:	2d05      	cmp	r5, #5
 8007186:	f000 8393 	beq.w	80078b0 <HAL_UART_Init+0x8f8>
 800718a:	2d06      	cmp	r5, #6
 800718c:	f000 83a8 	beq.w	80078e0 <HAL_UART_Init+0x928>
 8007190:	2d07      	cmp	r5, #7
 8007192:	f000 83c7 	beq.w	8007924 <HAL_UART_Init+0x96c>
 8007196:	2d08      	cmp	r5, #8
 8007198:	f000 83e8 	beq.w	800796c <HAL_UART_Init+0x9b4>
 800719c:	2d09      	cmp	r5, #9
 800719e:	f000 840a 	beq.w	80079b6 <HAL_UART_Init+0x9fe>
 80071a2:	2d0a      	cmp	r5, #10
 80071a4:	f000 841c 	beq.w	80079e0 <HAL_UART_Init+0xa28>
 80071a8:	2d0b      	cmp	r5, #11
 80071aa:	bf14      	ite	ne
 80071ac:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 80071b0:	2380      	moveq	r3, #128	; 0x80
 80071b2:	e124      	b.n	80073fe <HAL_UART_Init+0x446>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071b4:	4b56      	ldr	r3, [pc, #344]	; (8007310 <HAL_UART_Init+0x358>)
 80071b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80071be:	2b40      	cmp	r3, #64	; 0x40
 80071c0:	d032      	beq.n	8007228 <HAL_UART_Init+0x270>
 80071c2:	f200 8126 	bhi.w	8007412 <HAL_UART_Init+0x45a>
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f47f af68 	bne.w	800709c <HAL_UART_Init+0xe4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071cc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80071d0:	f000 81a1 	beq.w	8007516 <HAL_UART_Init+0x55e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071d4:	f7fd fb04 	bl	80047e0 <HAL_RCC_GetPCLK1Freq>
 80071d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071da:	2b00      	cmp	r3, #0
 80071dc:	f43f af72 	beq.w	80070c4 <HAL_UART_Init+0x10c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	f000 8284 	beq.w	80076ee <HAL_UART_Init+0x736>
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	f000 8283 	beq.w	80076f2 <HAL_UART_Init+0x73a>
 80071ec:	2b03      	cmp	r3, #3
 80071ee:	f000 828f 	beq.w	8007710 <HAL_UART_Init+0x758>
 80071f2:	2b04      	cmp	r3, #4
 80071f4:	f000 81bc 	beq.w	8007570 <HAL_UART_Init+0x5b8>
 80071f8:	2b05      	cmp	r3, #5
 80071fa:	f000 8327 	beq.w	800784c <HAL_UART_Init+0x894>
 80071fe:	2b06      	cmp	r3, #6
 8007200:	f000 832d 	beq.w	800785e <HAL_UART_Init+0x8a6>
 8007204:	2b07      	cmp	r3, #7
 8007206:	f000 8331 	beq.w	800786c <HAL_UART_Init+0x8b4>
 800720a:	2b08      	cmp	r3, #8
 800720c:	f000 834e 	beq.w	80078ac <HAL_UART_Init+0x8f4>
 8007210:	2b09      	cmp	r3, #9
 8007212:	f000 836a 	beq.w	80078ea <HAL_UART_Init+0x932>
 8007216:	2b0a      	cmp	r3, #10
 8007218:	f000 8377 	beq.w	800790a <HAL_UART_Init+0x952>
 800721c:	2b0b      	cmp	r3, #11
 800721e:	bf14      	ite	ne
 8007220:	2301      	movne	r3, #1
 8007222:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8007226:	e74e      	b.n	80070c6 <HAL_UART_Init+0x10e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007228:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800722c:	f000 816c 	beq.w	8007508 <HAL_UART_Init+0x550>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007230:	f7fc fe0a 	bl	8003e48 <HAL_RCC_GetSysClockFreq>
 8007234:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007236:	2b00      	cmp	r3, #0
 8007238:	f43f af44 	beq.w	80070c4 <HAL_UART_Init+0x10c>
 800723c:	e7d0      	b.n	80071e0 <HAL_UART_Init+0x228>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800723e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8007242:	f000 816e 	beq.w	8007522 <HAL_UART_Init+0x56a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007246:	2d00      	cmp	r5, #0
 8007248:	f000 80d8 	beq.w	80073fc <HAL_UART_Init+0x444>
 800724c:	2d01      	cmp	r5, #1
 800724e:	f000 82f6 	beq.w	800783e <HAL_UART_Init+0x886>
 8007252:	2d02      	cmp	r5, #2
 8007254:	f000 82fc 	beq.w	8007850 <HAL_UART_Init+0x898>
 8007258:	2d03      	cmp	r5, #3
 800725a:	f000 8305 	beq.w	8007868 <HAL_UART_Init+0x8b0>
 800725e:	2d04      	cmp	r5, #4
 8007260:	f000 8310 	beq.w	8007884 <HAL_UART_Init+0x8cc>
 8007264:	2d05      	cmp	r5, #5
 8007266:	f000 8326 	beq.w	80078b6 <HAL_UART_Init+0x8fe>
 800726a:	2d06      	cmp	r5, #6
 800726c:	f000 833b 	beq.w	80078e6 <HAL_UART_Init+0x92e>
 8007270:	2d07      	cmp	r5, #7
 8007272:	f000 8355 	beq.w	8007920 <HAL_UART_Init+0x968>
 8007276:	2d08      	cmp	r5, #8
 8007278:	f000 8376 	beq.w	8007968 <HAL_UART_Init+0x9b0>
 800727c:	2d09      	cmp	r5, #9
 800727e:	f000 839d 	beq.w	80079bc <HAL_UART_Init+0xa04>
 8007282:	2d0a      	cmp	r5, #10
 8007284:	f000 83af 	beq.w	80079e6 <HAL_UART_Init+0xa2e>
 8007288:	4b22      	ldr	r3, [pc, #136]	; (8007314 <HAL_UART_Init+0x35c>)
 800728a:	f24f 4224 	movw	r2, #62500	; 0xf424
 800728e:	2d0b      	cmp	r5, #11
 8007290:	bf08      	it	eq
 8007292:	4613      	moveq	r3, r2
 8007294:	e0b3      	b.n	80073fe <HAL_UART_Init+0x446>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007296:	69dd      	ldr	r5, [r3, #28]
 8007298:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 800729c:	f47f af45 	bne.w	800712a <HAL_UART_Init+0x172>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80072a0:	f7f9 fe52 	bl	8000f48 <HAL_GetTick>
 80072a4:	1b80      	subs	r0, r0, r6
 80072a6:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80072aa:	6823      	ldr	r3, [r4, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80072ac:	d3f3      	bcc.n	8007296 <HAL_UART_Init+0x2de>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80072b4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072b6:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80072b8:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ba:	f022 0201 	bic.w	r2, r2, #1
 80072be:	609a      	str	r2, [r3, #8]
      return HAL_TIMEOUT;
 80072c0:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 80072c2:	f884 107d 	strb.w	r1, [r4, #125]	; 0x7d
        __HAL_UNLOCK(huart);
 80072c6:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80072ca:	f884 107e 	strb.w	r1, [r4, #126]	; 0x7e
 80072ce:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072d2:	69dd      	ldr	r5, [r3, #28]
 80072d4:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 80072d8:	f47f af2b 	bne.w	8007132 <HAL_UART_Init+0x17a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80072dc:	f7f9 fe34 	bl	8000f48 <HAL_GetTick>
 80072e0:	1b80      	subs	r0, r0, r6
 80072e2:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80072e6:	6823      	ldr	r3, [r4, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80072e8:	d3f3      	bcc.n	80072d2 <HAL_UART_Init+0x31a>
 80072ea:	e7e0      	b.n	80072ae <HAL_UART_Init+0x2f6>
    UART_AdvFeatureConfig(huart);
 80072ec:	4620      	mov	r0, r4
 80072ee:	f7ff fe0b 	bl	8006f08 <UART_AdvFeatureConfig>
 80072f2:	e702      	b.n	80070fa <HAL_UART_Init+0x142>
 80072f4:	cfff69f3 	.word	0xcfff69f3
 80072f8:	40008000 	.word	0x40008000
 80072fc:	40013800 	.word	0x40013800
 8007300:	40004400 	.word	0x40004400
 8007304:	40004800 	.word	0x40004800
 8007308:	40004c00 	.word	0x40004c00
 800730c:	40005000 	.word	0x40005000
 8007310:	40021000 	.word	0x40021000
 8007314:	00f42400 	.word	0x00f42400
    switch (clocksource)
 8007318:	2b08      	cmp	r3, #8
 800731a:	f63f aebf 	bhi.w	800709c <HAL_UART_Init+0xe4>
 800731e:	a201      	add	r2, pc, #4	; (adr r2, 8007324 <HAL_UART_Init+0x36c>)
 8007320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007324:	08007517 	.word	0x08007517
 8007328:	08007421 	.word	0x08007421
 800732c:	08007523 	.word	0x08007523
 8007330:	0800709d 	.word	0x0800709d
 8007334:	08007509 	.word	0x08007509
 8007338:	0800709d 	.word	0x0800709d
 800733c:	0800709d 	.word	0x0800709d
 8007340:	0800709d 	.word	0x0800709d
 8007344:	080074ad 	.word	0x080074ad
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007348:	689a      	ldr	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800734a:	48c5      	ldr	r0, [pc, #788]	; (8007660 <HAL_UART_Init+0x6a8>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800734c:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8007350:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8007354:	4332      	orrs	r2, r6
 8007356:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800735a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800735c:	f022 020f 	bic.w	r2, r2, #15
 8007360:	430a      	orrs	r2, r1
 8007362:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007364:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8007368:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800736c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007370:	f000 81c1 	beq.w	80076f6 <HAL_UART_Init+0x73e>
 8007374:	f240 81ab 	bls.w	80076ce <HAL_UART_Init+0x716>
 8007378:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800737c:	f000 8090 	beq.w	80074a0 <HAL_UART_Init+0x4e8>
 8007380:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007384:	f47f ae8a 	bne.w	800709c <HAL_UART_Init+0xe4>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007388:	2900      	cmp	r1, #0
 800738a:	f040 8214 	bne.w	80077b6 <HAL_UART_Init+0x7fe>
 800738e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007392:	2108      	movs	r1, #8
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8007394:	6862      	ldr	r2, [r4, #4]
 8007396:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 800739a:	4298      	cmp	r0, r3
 800739c:	f63f ae7e 	bhi.w	800709c <HAL_UART_Init+0xe4>
 80073a0:	ebb3 3f02 	cmp.w	r3, r2, lsl #12
 80073a4:	f63f ae7a 	bhi.w	800709c <HAL_UART_Init+0xe4>
        switch (clocksource)
 80073a8:	2908      	cmp	r1, #8
 80073aa:	f63f ae77 	bhi.w	800709c <HAL_UART_Init+0xe4>
 80073ae:	a301      	add	r3, pc, #4	; (adr r3, 80073b4 <HAL_UART_Init+0x3fc>)
 80073b0:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80073b4:	08007653 	.word	0x08007653
 80073b8:	0800709d 	.word	0x0800709d
 80073bc:	080075f9 	.word	0x080075f9
 80073c0:	0800709d 	.word	0x0800709d
 80073c4:	08007575 	.word	0x08007575
 80073c8:	0800709d 	.word	0x0800709d
 80073cc:	0800709d 	.word	0x0800709d
 80073d0:	0800709d 	.word	0x0800709d
 80073d4:	08007681 	.word	0x08007681
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073d8:	4ba1      	ldr	r3, [pc, #644]	; (8007660 <HAL_UART_Init+0x6a8>)
 80073da:	4aa2      	ldr	r2, [pc, #648]	; (8007664 <HAL_UART_Init+0x6ac>)
 80073dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073e0:	f003 0303 	and.w	r3, r3, #3
 80073e4:	5cd3      	ldrb	r3, [r2, r3]
 80073e6:	e636      	b.n	8007056 <HAL_UART_Init+0x9e>
 80073e8:	4b9d      	ldr	r3, [pc, #628]	; (8007660 <HAL_UART_Init+0x6a8>)
 80073ea:	4a9f      	ldr	r2, [pc, #636]	; (8007668 <HAL_UART_Init+0x6b0>)
 80073ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073f0:	f003 030c 	and.w	r3, r3, #12
 80073f4:	5cd3      	ldrb	r3, [r2, r3]
 80073f6:	e62e      	b.n	8007056 <HAL_UART_Init+0x9e>
    return HAL_ERROR;
 80073f8:	2001      	movs	r0, #1
 80073fa:	4770      	bx	lr
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073fc:	4b9b      	ldr	r3, [pc, #620]	; (800766c <HAL_UART_Init+0x6b4>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073fe:	6862      	ldr	r2, [r4, #4]
 8007400:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8007404:	fbb3 f3f2 	udiv	r3, r3, r2
 8007408:	b29b      	uxth	r3, r3
 800740a:	e664      	b.n	80070d6 <HAL_UART_Init+0x11e>
 800740c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007410:	e7f5      	b.n	80073fe <HAL_UART_Init+0x446>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007412:	2b80      	cmp	r3, #128	; 0x80
 8007414:	f43f af13 	beq.w	800723e <HAL_UART_Init+0x286>
 8007418:	2bc0      	cmp	r3, #192	; 0xc0
 800741a:	f43f aea0 	beq.w	800715e <HAL_UART_Init+0x1a6>
 800741e:	e63d      	b.n	800709c <HAL_UART_Init+0xe4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007420:	f7fd f9f0 	bl	8004804 <HAL_RCC_GetPCLK2Freq>
 8007424:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007426:	2b00      	cmp	r3, #0
 8007428:	d073      	beq.n	8007512 <HAL_UART_Init+0x55a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800742a:	2b01      	cmp	r3, #1
 800742c:	f000 8177 	beq.w	800771e <HAL_UART_Init+0x766>
 8007430:	2b02      	cmp	r3, #2
 8007432:	f000 8209 	beq.w	8007848 <HAL_UART_Init+0x890>
 8007436:	2b03      	cmp	r3, #3
 8007438:	f000 820f 	beq.w	800785a <HAL_UART_Init+0x8a2>
 800743c:	2b04      	cmp	r3, #4
 800743e:	f000 821c 	beq.w	800787a <HAL_UART_Init+0x8c2>
 8007442:	2b05      	cmp	r3, #5
 8007444:	f000 8220 	beq.w	8007888 <HAL_UART_Init+0x8d0>
 8007448:	2b06      	cmp	r3, #6
 800744a:	f000 8245 	beq.w	80078d8 <HAL_UART_Init+0x920>
 800744e:	2b07      	cmp	r3, #7
 8007450:	f000 8240 	beq.w	80078d4 <HAL_UART_Init+0x91c>
 8007454:	2b08      	cmp	r3, #8
 8007456:	f000 825b 	beq.w	8007910 <HAL_UART_Init+0x958>
 800745a:	2b09      	cmp	r3, #9
 800745c:	f000 82a9 	beq.w	80079b2 <HAL_UART_Init+0x9fa>
 8007460:	2b0a      	cmp	r3, #10
 8007462:	f000 828a 	beq.w	800797a <HAL_UART_Init+0x9c2>
 8007466:	2b0b      	cmp	r3, #11
 8007468:	bf14      	ite	ne
 800746a:	2301      	movne	r3, #1
 800746c:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8007470:	6861      	ldr	r1, [r4, #4]
 8007472:	fbb0 f2f3 	udiv	r2, r0, r3
 8007476:	084b      	lsrs	r3, r1, #1
 8007478:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800747c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007480:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007482:	f1a3 0110 	sub.w	r1, r3, #16
 8007486:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800748a:	4291      	cmp	r1, r2
 800748c:	f63f ae06 	bhi.w	800709c <HAL_UART_Init+0xe4>
      brrtemp = usartdiv & 0xFFF0U;
 8007490:	f023 020f 	bic.w	r2, r3, #15
      huart->Instance->BRR = brrtemp;
 8007494:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007496:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 800749a:	4313      	orrs	r3, r2
 800749c:	60cb      	str	r3, [r1, #12]
 800749e:	e622      	b.n	80070e6 <HAL_UART_Init+0x12e>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80074a0:	2900      	cmp	r1, #0
 80074a2:	f040 813e 	bne.w	8007722 <HAL_UART_Init+0x76a>
 80074a6:	4b71      	ldr	r3, [pc, #452]	; (800766c <HAL_UART_Init+0x6b4>)
 80074a8:	2102      	movs	r1, #2
 80074aa:	e773      	b.n	8007394 <HAL_UART_Init+0x3dc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074ac:	2d00      	cmp	r5, #0
 80074ae:	f000 8131 	beq.w	8007714 <HAL_UART_Init+0x75c>
 80074b2:	2d01      	cmp	r5, #1
 80074b4:	f000 81dc 	beq.w	8007870 <HAL_UART_Init+0x8b8>
 80074b8:	2d02      	cmp	r5, #2
 80074ba:	f000 81e9 	beq.w	8007890 <HAL_UART_Init+0x8d8>
 80074be:	2d03      	cmp	r5, #3
 80074c0:	f000 8205 	beq.w	80078ce <HAL_UART_Init+0x916>
 80074c4:	2d04      	cmp	r5, #4
 80074c6:	f000 8228 	beq.w	800791a <HAL_UART_Init+0x962>
 80074ca:	2d05      	cmp	r5, #5
 80074cc:	f000 8233 	beq.w	8007936 <HAL_UART_Init+0x97e>
 80074d0:	2d06      	cmp	r5, #6
 80074d2:	f000 8261 	beq.w	8007998 <HAL_UART_Init+0x9e0>
 80074d6:	2d07      	cmp	r5, #7
 80074d8:	f000 825b 	beq.w	8007992 <HAL_UART_Init+0x9da>
 80074dc:	2d08      	cmp	r5, #8
 80074de:	f000 826f 	beq.w	80079c0 <HAL_UART_Init+0xa08>
 80074e2:	2d09      	cmp	r5, #9
 80074e4:	f000 82f7 	beq.w	8007ad6 <HAL_UART_Init+0xb1e>
 80074e8:	2d0a      	cmp	r5, #10
 80074ea:	f000 82f9 	beq.w	8007ae0 <HAL_UART_Init+0xb28>
 80074ee:	2d0b      	cmp	r5, #11
 80074f0:	bf14      	ite	ne
 80074f2:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 80074f6:	f44f 7380 	moveq.w	r3, #256	; 0x100
 80074fa:	6862      	ldr	r2, [r4, #4]
 80074fc:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8007500:	fbb3 f3f2 	udiv	r3, r3, r2
 8007504:	b29b      	uxth	r3, r3
 8007506:	e7bc      	b.n	8007482 <HAL_UART_Init+0x4ca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007508:	f7fc fc9e 	bl	8003e48 <HAL_RCC_GetSysClockFreq>
 800750c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800750e:	2b00      	cmp	r3, #0
 8007510:	d18b      	bne.n	800742a <HAL_UART_Init+0x472>
 8007512:	2301      	movs	r3, #1
 8007514:	e7ac      	b.n	8007470 <HAL_UART_Init+0x4b8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007516:	f7fd f963 	bl	80047e0 <HAL_RCC_GetPCLK1Freq>
 800751a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800751c:	2b00      	cmp	r3, #0
 800751e:	d0f8      	beq.n	8007512 <HAL_UART_Init+0x55a>
 8007520:	e783      	b.n	800742a <HAL_UART_Init+0x472>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007522:	2d00      	cmp	r5, #0
 8007524:	f000 80f9 	beq.w	800771a <HAL_UART_Init+0x762>
 8007528:	2d01      	cmp	r5, #1
 800752a:	f000 81a4 	beq.w	8007876 <HAL_UART_Init+0x8be>
 800752e:	2d02      	cmp	r5, #2
 8007530:	f000 81ac 	beq.w	800788c <HAL_UART_Init+0x8d4>
 8007534:	2d03      	cmp	r5, #3
 8007536:	f000 81d1 	beq.w	80078dc <HAL_UART_Init+0x924>
 800753a:	2d04      	cmp	r5, #4
 800753c:	f000 81e3 	beq.w	8007906 <HAL_UART_Init+0x94e>
 8007540:	2d05      	cmp	r5, #5
 8007542:	f000 81f6 	beq.w	8007932 <HAL_UART_Init+0x97a>
 8007546:	2d06      	cmp	r5, #6
 8007548:	f000 8221 	beq.w	800798e <HAL_UART_Init+0x9d6>
 800754c:	2d07      	cmp	r5, #7
 800754e:	f000 821c 	beq.w	800798a <HAL_UART_Init+0x9d2>
 8007552:	2d08      	cmp	r5, #8
 8007554:	f000 8242 	beq.w	80079dc <HAL_UART_Init+0xa24>
 8007558:	2d09      	cmp	r5, #9
 800755a:	f000 829f 	beq.w	8007a9c <HAL_UART_Init+0xae4>
 800755e:	2d0a      	cmp	r5, #10
 8007560:	f000 82b3 	beq.w	8007aca <HAL_UART_Init+0xb12>
 8007564:	4b42      	ldr	r3, [pc, #264]	; (8007670 <HAL_UART_Init+0x6b8>)
 8007566:	4a43      	ldr	r2, [pc, #268]	; (8007674 <HAL_UART_Init+0x6bc>)
 8007568:	2d0b      	cmp	r5, #11
 800756a:	bf08      	it	eq
 800756c:	4613      	moveq	r3, r2
 800756e:	e7c4      	b.n	80074fa <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007570:	2308      	movs	r3, #8
 8007572:	e5a8      	b.n	80070c6 <HAL_UART_Init+0x10e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007574:	f7fc fc68 	bl	8003e48 <HAL_RCC_GetSysClockFreq>
 8007578:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800757a:	b303      	cbz	r3, 80075be <HAL_UART_Init+0x606>
 800757c:	2b01      	cmp	r3, #1
 800757e:	f000 81c9 	beq.w	8007914 <HAL_UART_Init+0x95c>
 8007582:	2b02      	cmp	r3, #2
 8007584:	f000 81e4 	beq.w	8007950 <HAL_UART_Init+0x998>
 8007588:	2b03      	cmp	r3, #3
 800758a:	f000 81ea 	beq.w	8007962 <HAL_UART_Init+0x9aa>
 800758e:	2b04      	cmp	r3, #4
 8007590:	f000 822e 	beq.w	80079f0 <HAL_UART_Init+0xa38>
 8007594:	2b05      	cmp	r3, #5
 8007596:	f000 821e 	beq.w	80079d6 <HAL_UART_Init+0xa1e>
 800759a:	2b06      	cmp	r3, #6
 800759c:	f000 8218 	beq.w	80079d0 <HAL_UART_Init+0xa18>
 80075a0:	2b07      	cmp	r3, #7
 80075a2:	f000 8212 	beq.w	80079ca <HAL_UART_Init+0xa12>
 80075a6:	2b08      	cmp	r3, #8
 80075a8:	f000 82ab 	beq.w	8007b02 <HAL_UART_Init+0xb4a>
 80075ac:	2b09      	cmp	r3, #9
 80075ae:	f000 82a5 	beq.w	8007afc <HAL_UART_Init+0xb44>
 80075b2:	2b0a      	cmp	r3, #10
 80075b4:	f000 829f 	beq.w	8007af6 <HAL_UART_Init+0xb3e>
 80075b8:	2b0b      	cmp	r3, #11
 80075ba:	f000 82b0 	beq.w	8007b1e <HAL_UART_Init+0xb66>
 80075be:	2201      	movs	r2, #1
 80075c0:	2300      	movs	r3, #0
 80075c2:	2100      	movs	r1, #0
 80075c4:	f7f9 fb1c 	bl	8000c00 <__aeabi_uldivmod>
 80075c8:	6862      	ldr	r2, [r4, #4]
 80075ca:	020f      	lsls	r7, r1, #8
 80075cc:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 80075d0:	0206      	lsls	r6, r0, #8
 80075d2:	0850      	lsrs	r0, r2, #1
 80075d4:	eb16 0b00 	adds.w	fp, r6, r0
 80075d8:	f147 0c00 	adc.w	ip, r7, #0
 80075dc:	4658      	mov	r0, fp
 80075de:	4661      	mov	r1, ip
 80075e0:	2300      	movs	r3, #0
 80075e2:	f7f9 fb0d 	bl	8000c00 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80075e6:	4b24      	ldr	r3, [pc, #144]	; (8007678 <HAL_UART_Init+0x6c0>)
 80075e8:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80075ec:	429a      	cmp	r2, r3
 80075ee:	f63f ad55 	bhi.w	800709c <HAL_UART_Init+0xe4>
          huart->Instance->BRR = usartdiv;
 80075f2:	6823      	ldr	r3, [r4, #0]
 80075f4:	60d8      	str	r0, [r3, #12]
 80075f6:	e576      	b.n	80070e6 <HAL_UART_Init+0x12e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075fa:	b303      	cbz	r3, 800763e <HAL_UART_Init+0x686>
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	f000 81ce 	beq.w	800799e <HAL_UART_Init+0x9e6>
 8007602:	2b02      	cmp	r3, #2
 8007604:	f000 821a 	beq.w	8007a3c <HAL_UART_Init+0xa84>
 8007608:	2b03      	cmp	r3, #3
 800760a:	f000 8223 	beq.w	8007a54 <HAL_UART_Init+0xa9c>
 800760e:	2b04      	cmp	r3, #4
 8007610:	f000 8230 	beq.w	8007a74 <HAL_UART_Init+0xabc>
 8007614:	2b05      	cmp	r3, #5
 8007616:	f000 823e 	beq.w	8007a96 <HAL_UART_Init+0xade>
 800761a:	2b06      	cmp	r3, #6
 800761c:	f000 8237 	beq.w	8007a8e <HAL_UART_Init+0xad6>
 8007620:	2b07      	cmp	r3, #7
 8007622:	f000 8231 	beq.w	8007a88 <HAL_UART_Init+0xad0>
 8007626:	2b08      	cmp	r3, #8
 8007628:	f000 8276 	beq.w	8007b18 <HAL_UART_Init+0xb60>
 800762c:	2b09      	cmp	r3, #9
 800762e:	f000 8280 	beq.w	8007b32 <HAL_UART_Init+0xb7a>
 8007632:	2b0a      	cmp	r3, #10
 8007634:	f000 827a 	beq.w	8007b2c <HAL_UART_Init+0xb74>
 8007638:	2b0b      	cmp	r3, #11
 800763a:	f000 8274 	beq.w	8007b26 <HAL_UART_Init+0xb6e>
 800763e:	480f      	ldr	r0, [pc, #60]	; (800767c <HAL_UART_Init+0x6c4>)
 8007640:	2100      	movs	r1, #0
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007642:	0853      	lsrs	r3, r2, #1
 8007644:	18c0      	adds	r0, r0, r3
 8007646:	f141 0100 	adc.w	r1, r1, #0
 800764a:	2300      	movs	r3, #0
 800764c:	f7f9 fad8 	bl	8000c00 <__aeabi_uldivmod>
 8007650:	e7c9      	b.n	80075e6 <HAL_UART_Init+0x62e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007652:	f7fd f8c5 	bl	80047e0 <HAL_RCC_GetPCLK1Freq>
 8007656:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007658:	2b00      	cmp	r3, #0
 800765a:	d0b0      	beq.n	80075be <HAL_UART_Init+0x606>
 800765c:	e78e      	b.n	800757c <HAL_UART_Init+0x5c4>
 800765e:	bf00      	nop
 8007660:	40021000 	.word	0x40021000
 8007664:	080144e4 	.word	0x080144e4
 8007668:	080144e8 	.word	0x080144e8
 800766c:	00f42400 	.word	0x00f42400
 8007670:	01e84800 	.word	0x01e84800
 8007674:	0001e848 	.word	0x0001e848
 8007678:	000ffcff 	.word	0x000ffcff
 800767c:	f4240000 	.word	0xf4240000
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007680:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007682:	b303      	cbz	r3, 80076c6 <HAL_UART_Init+0x70e>
 8007684:	2b01      	cmp	r3, #1
 8007686:	f000 818d 	beq.w	80079a4 <HAL_UART_Init+0x9ec>
 800768a:	2b02      	cmp	r3, #2
 800768c:	f000 81d9 	beq.w	8007a42 <HAL_UART_Init+0xa8a>
 8007690:	2b03      	cmp	r3, #3
 8007692:	f000 81da 	beq.w	8007a4a <HAL_UART_Init+0xa92>
 8007696:	2b04      	cmp	r3, #4
 8007698:	f000 81f2 	beq.w	8007a80 <HAL_UART_Init+0xac8>
 800769c:	2b05      	cmp	r3, #5
 800769e:	f000 81e4 	beq.w	8007a6a <HAL_UART_Init+0xab2>
 80076a2:	2b06      	cmp	r3, #6
 80076a4:	f000 81de 	beq.w	8007a64 <HAL_UART_Init+0xaac>
 80076a8:	2b07      	cmp	r3, #7
 80076aa:	f000 81d7 	beq.w	8007a5c <HAL_UART_Init+0xaa4>
 80076ae:	2b08      	cmp	r3, #8
 80076b0:	f000 822e 	beq.w	8007b10 <HAL_UART_Init+0xb58>
 80076b4:	2b09      	cmp	r3, #9
 80076b6:	f000 821a 	beq.w	8007aee <HAL_UART_Init+0xb36>
 80076ba:	2b0a      	cmp	r3, #10
 80076bc:	f000 8213 	beq.w	8007ae6 <HAL_UART_Init+0xb2e>
 80076c0:	2b0b      	cmp	r3, #11
 80076c2:	f000 8221 	beq.w	8007b08 <HAL_UART_Init+0xb50>
 80076c6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80076ca:	2100      	movs	r1, #0
 80076cc:	e7b9      	b.n	8007642 <HAL_UART_Init+0x68a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f47f ace4 	bne.w	800709c <HAL_UART_Init+0xe4>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80076d4:	f7fd f884 	bl	80047e0 <HAL_RCC_GetPCLK1Freq>
 80076d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d147      	bne.n	800776e <HAL_UART_Init+0x7b6>
 80076de:	2301      	movs	r3, #1
 80076e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80076e4:	2100      	movs	r1, #0
    if (lpuart_ker_ck_pres != 0U)
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f47f ae54 	bne.w	8007394 <HAL_UART_Init+0x3dc>
 80076ec:	e4fb      	b.n	80070e6 <HAL_UART_Init+0x12e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076ee:	2302      	movs	r3, #2
 80076f0:	e4e9      	b.n	80070c6 <HAL_UART_Init+0x10e>
 80076f2:	2304      	movs	r3, #4
 80076f4:	e4e7      	b.n	80070c6 <HAL_UART_Init+0x10e>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80076f6:	f7fc fba7 	bl	8003e48 <HAL_RCC_GetSysClockFreq>
 80076fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d17d      	bne.n	80077fc <HAL_UART_Init+0x844>
 8007700:	2301      	movs	r3, #1
 8007702:	fbb0 f3f3 	udiv	r3, r0, r3
 8007706:	2104      	movs	r1, #4
    if (lpuart_ker_ck_pres != 0U)
 8007708:	2b00      	cmp	r3, #0
 800770a:	f47f ae43 	bne.w	8007394 <HAL_UART_Init+0x3dc>
 800770e:	e4ea      	b.n	80070e6 <HAL_UART_Init+0x12e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007710:	2306      	movs	r3, #6
 8007712:	e4d8      	b.n	80070c6 <HAL_UART_Init+0x10e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007714:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007718:	e6ef      	b.n	80074fa <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800771a:	4bb9      	ldr	r3, [pc, #740]	; (8007a00 <HAL_UART_Init+0xa48>)
 800771c:	e6ed      	b.n	80074fa <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800771e:	2302      	movs	r3, #2
 8007720:	e6a6      	b.n	8007470 <HAL_UART_Init+0x4b8>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007722:	2901      	cmp	r1, #1
 8007724:	f000 80b7 	beq.w	8007896 <HAL_UART_Init+0x8de>
 8007728:	2902      	cmp	r1, #2
 800772a:	f000 80ca 	beq.w	80078c2 <HAL_UART_Init+0x90a>
 800772e:	2903      	cmp	r1, #3
 8007730:	f000 80e0 	beq.w	80078f4 <HAL_UART_Init+0x93c>
 8007734:	2904      	cmp	r1, #4
 8007736:	f000 8103 	beq.w	8007940 <HAL_UART_Init+0x988>
 800773a:	2905      	cmp	r1, #5
 800773c:	f000 8105 	beq.w	800794a <HAL_UART_Init+0x992>
 8007740:	2906      	cmp	r1, #6
 8007742:	f000 8133 	beq.w	80079ac <HAL_UART_Init+0x9f4>
 8007746:	2907      	cmp	r1, #7
 8007748:	f000 814f 	beq.w	80079ea <HAL_UART_Init+0xa32>
 800774c:	2908      	cmp	r1, #8
 800774e:	f000 81b9 	beq.w	8007ac4 <HAL_UART_Init+0xb0c>
 8007752:	2909      	cmp	r1, #9
 8007754:	f000 81b3 	beq.w	8007abe <HAL_UART_Init+0xb06>
 8007758:	290a      	cmp	r1, #10
 800775a:	f000 81ad 	beq.w	8007ab8 <HAL_UART_Init+0xb00>
 800775e:	4ba9      	ldr	r3, [pc, #676]	; (8007a04 <HAL_UART_Init+0xa4c>)
 8007760:	f24f 4224 	movw	r2, #62500	; 0xf424
 8007764:	290b      	cmp	r1, #11
 8007766:	bf08      	it	eq
 8007768:	4613      	moveq	r3, r2
 800776a:	2102      	movs	r1, #2
 800776c:	e612      	b.n	8007394 <HAL_UART_Init+0x3dc>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800776e:	2b01      	cmp	r3, #1
 8007770:	f000 8096 	beq.w	80078a0 <HAL_UART_Init+0x8e8>
 8007774:	2b02      	cmp	r3, #2
 8007776:	f000 80a8 	beq.w	80078ca <HAL_UART_Init+0x912>
 800777a:	2b03      	cmp	r3, #3
 800777c:	f000 80b8 	beq.w	80078f0 <HAL_UART_Init+0x938>
 8007780:	2b04      	cmp	r3, #4
 8007782:	f000 80db 	beq.w	800793c <HAL_UART_Init+0x984>
 8007786:	2b05      	cmp	r3, #5
 8007788:	f000 80f3 	beq.w	8007972 <HAL_UART_Init+0x9ba>
 800778c:	2b06      	cmp	r3, #6
 800778e:	f000 80f2 	beq.w	8007976 <HAL_UART_Init+0x9be>
 8007792:	2b07      	cmp	r3, #7
 8007794:	f000 8117 	beq.w	80079c6 <HAL_UART_Init+0xa0e>
 8007798:	2b08      	cmp	r3, #8
 800779a:	f000 819f 	beq.w	8007adc <HAL_UART_Init+0xb24>
 800779e:	2b09      	cmp	r3, #9
 80077a0:	f000 8180 	beq.w	8007aa4 <HAL_UART_Init+0xaec>
 80077a4:	2b0a      	cmp	r3, #10
 80077a6:	f000 817b 	beq.w	8007aa0 <HAL_UART_Init+0xae8>
 80077aa:	2b0b      	cmp	r3, #11
 80077ac:	bf14      	ite	ne
 80077ae:	2301      	movne	r3, #1
 80077b0:	f44f 7380 	moveq.w	r3, #256	; 0x100
 80077b4:	e794      	b.n	80076e0 <HAL_UART_Init+0x728>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80077b6:	2901      	cmp	r1, #1
 80077b8:	d074      	beq.n	80078a4 <HAL_UART_Init+0x8ec>
 80077ba:	2902      	cmp	r1, #2
 80077bc:	d07d      	beq.n	80078ba <HAL_UART_Init+0x902>
 80077be:	2903      	cmp	r1, #3
 80077c0:	f000 809d 	beq.w	80078fe <HAL_UART_Init+0x946>
 80077c4:	2904      	cmp	r1, #4
 80077c6:	f000 80b0 	beq.w	800792a <HAL_UART_Init+0x972>
 80077ca:	2905      	cmp	r1, #5
 80077cc:	f000 80c3 	beq.w	8007956 <HAL_UART_Init+0x99e>
 80077d0:	2906      	cmp	r1, #6
 80077d2:	f000 80d4 	beq.w	800797e <HAL_UART_Init+0x9c6>
 80077d6:	2907      	cmp	r1, #7
 80077d8:	f000 810d 	beq.w	80079f6 <HAL_UART_Init+0xa3e>
 80077dc:	2908      	cmp	r1, #8
 80077de:	f000 814c 	beq.w	8007a7a <HAL_UART_Init+0xac2>
 80077e2:	2909      	cmp	r1, #9
 80077e4:	f000 8164 	beq.w	8007ab0 <HAL_UART_Init+0xaf8>
 80077e8:	290a      	cmp	r1, #10
 80077ea:	f000 815d 	beq.w	8007aa8 <HAL_UART_Init+0xaf0>
 80077ee:	290b      	cmp	r1, #11
 80077f0:	bf14      	ite	ne
 80077f2:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 80077f6:	2380      	moveq	r3, #128	; 0x80
 80077f8:	2108      	movs	r1, #8
 80077fa:	e5cb      	b.n	8007394 <HAL_UART_Init+0x3dc>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d04d      	beq.n	800789c <HAL_UART_Init+0x8e4>
 8007800:	2b02      	cmp	r3, #2
 8007802:	d060      	beq.n	80078c6 <HAL_UART_Init+0x90e>
 8007804:	2b03      	cmp	r3, #3
 8007806:	d078      	beq.n	80078fa <HAL_UART_Init+0x942>
 8007808:	2b04      	cmp	r3, #4
 800780a:	f000 809c 	beq.w	8007946 <HAL_UART_Init+0x98e>
 800780e:	2b05      	cmp	r3, #5
 8007810:	f000 80a5 	beq.w	800795e <HAL_UART_Init+0x9a6>
 8007814:	2b06      	cmp	r3, #6
 8007816:	f000 80b6 	beq.w	8007986 <HAL_UART_Init+0x9ce>
 800781a:	2b07      	cmp	r3, #7
 800781c:	f000 8118 	beq.w	8007a50 <HAL_UART_Init+0xa98>
 8007820:	2b08      	cmp	r3, #8
 8007822:	f000 8125 	beq.w	8007a70 <HAL_UART_Init+0xab8>
 8007826:	2b09      	cmp	r3, #9
 8007828:	f000 8153 	beq.w	8007ad2 <HAL_UART_Init+0xb1a>
 800782c:	2b0a      	cmp	r3, #10
 800782e:	f000 814e 	beq.w	8007ace <HAL_UART_Init+0xb16>
 8007832:	2b0b      	cmp	r3, #11
 8007834:	bf14      	ite	ne
 8007836:	2301      	movne	r3, #1
 8007838:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800783c:	e761      	b.n	8007702 <HAL_UART_Init+0x74a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800783e:	4b72      	ldr	r3, [pc, #456]	; (8007a08 <HAL_UART_Init+0xa50>)
 8007840:	e5dd      	b.n	80073fe <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007842:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007846:	e5da      	b.n	80073fe <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007848:	2304      	movs	r3, #4
 800784a:	e611      	b.n	8007470 <HAL_UART_Init+0x4b8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800784c:	230a      	movs	r3, #10
 800784e:	e43a      	b.n	80070c6 <HAL_UART_Init+0x10e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007850:	4b6e      	ldr	r3, [pc, #440]	; (8007a0c <HAL_UART_Init+0xa54>)
 8007852:	e5d4      	b.n	80073fe <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007854:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007858:	e5d1      	b.n	80073fe <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800785a:	2306      	movs	r3, #6
 800785c:	e608      	b.n	8007470 <HAL_UART_Init+0x4b8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800785e:	230c      	movs	r3, #12
 8007860:	e431      	b.n	80070c6 <HAL_UART_Init+0x10e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007862:	f241 5355 	movw	r3, #5461	; 0x1555
 8007866:	e5ca      	b.n	80073fe <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007868:	4b69      	ldr	r3, [pc, #420]	; (8007a10 <HAL_UART_Init+0xa58>)
 800786a:	e5c8      	b.n	80073fe <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800786c:	2310      	movs	r3, #16
 800786e:	e42a      	b.n	80070c6 <HAL_UART_Init+0x10e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007870:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007874:	e641      	b.n	80074fa <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007876:	4b63      	ldr	r3, [pc, #396]	; (8007a04 <HAL_UART_Init+0xa4c>)
 8007878:	e63f      	b.n	80074fa <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800787a:	2308      	movs	r3, #8
 800787c:	e5f8      	b.n	8007470 <HAL_UART_Init+0x4b8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800787e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007882:	e5bc      	b.n	80073fe <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007884:	4b63      	ldr	r3, [pc, #396]	; (8007a14 <HAL_UART_Init+0xa5c>)
 8007886:	e5ba      	b.n	80073fe <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007888:	230a      	movs	r3, #10
 800788a:	e5f1      	b.n	8007470 <HAL_UART_Init+0x4b8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800788c:	4b5e      	ldr	r3, [pc, #376]	; (8007a08 <HAL_UART_Init+0xa50>)
 800788e:	e634      	b.n	80074fa <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007890:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007894:	e631      	b.n	80074fa <HAL_UART_Init+0x542>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007896:	4b5c      	ldr	r3, [pc, #368]	; (8007a08 <HAL_UART_Init+0xa50>)
 8007898:	2102      	movs	r1, #2
 800789a:	e57b      	b.n	8007394 <HAL_UART_Init+0x3dc>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800789c:	2302      	movs	r3, #2
 800789e:	e730      	b.n	8007702 <HAL_UART_Init+0x74a>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80078a0:	2302      	movs	r3, #2
 80078a2:	e71d      	b.n	80076e0 <HAL_UART_Init+0x728>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80078a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80078a8:	2108      	movs	r1, #8
 80078aa:	e573      	b.n	8007394 <HAL_UART_Init+0x3dc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078ac:	2320      	movs	r3, #32
 80078ae:	e40a      	b.n	80070c6 <HAL_UART_Init+0x10e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078b0:	f640 43cc 	movw	r3, #3276	; 0xccc
 80078b4:	e5a3      	b.n	80073fe <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078b6:	4b58      	ldr	r3, [pc, #352]	; (8007a18 <HAL_UART_Init+0xa60>)
 80078b8:	e5a1      	b.n	80073fe <HAL_UART_Init+0x446>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80078ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80078be:	2108      	movs	r1, #8
 80078c0:	e568      	b.n	8007394 <HAL_UART_Init+0x3dc>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80078c2:	4b52      	ldr	r3, [pc, #328]	; (8007a0c <HAL_UART_Init+0xa54>)
 80078c4:	e566      	b.n	8007394 <HAL_UART_Init+0x3dc>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80078c6:	2304      	movs	r3, #4
 80078c8:	e71b      	b.n	8007702 <HAL_UART_Init+0x74a>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80078ca:	2304      	movs	r3, #4
 80078cc:	e708      	b.n	80076e0 <HAL_UART_Init+0x728>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078ce:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80078d2:	e612      	b.n	80074fa <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078d4:	2310      	movs	r3, #16
 80078d6:	e5cb      	b.n	8007470 <HAL_UART_Init+0x4b8>
 80078d8:	230c      	movs	r3, #12
 80078da:	e5c9      	b.n	8007470 <HAL_UART_Init+0x4b8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078dc:	4b4f      	ldr	r3, [pc, #316]	; (8007a1c <HAL_UART_Init+0xa64>)
 80078de:	e60c      	b.n	80074fa <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078e0:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80078e4:	e58b      	b.n	80073fe <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078e6:	4b4e      	ldr	r3, [pc, #312]	; (8007a20 <HAL_UART_Init+0xa68>)
 80078e8:	e589      	b.n	80073fe <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078ea:	2340      	movs	r3, #64	; 0x40
 80078ec:	f7ff bbeb 	b.w	80070c6 <HAL_UART_Init+0x10e>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80078f0:	2306      	movs	r3, #6
 80078f2:	e6f5      	b.n	80076e0 <HAL_UART_Init+0x728>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80078f4:	4b46      	ldr	r3, [pc, #280]	; (8007a10 <HAL_UART_Init+0xa58>)
 80078f6:	2102      	movs	r1, #2
 80078f8:	e54c      	b.n	8007394 <HAL_UART_Init+0x3dc>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80078fa:	2306      	movs	r3, #6
 80078fc:	e701      	b.n	8007702 <HAL_UART_Init+0x74a>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80078fe:	f241 5355 	movw	r3, #5461	; 0x1555
 8007902:	2108      	movs	r1, #8
 8007904:	e546      	b.n	8007394 <HAL_UART_Init+0x3dc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007906:	4b41      	ldr	r3, [pc, #260]	; (8007a0c <HAL_UART_Init+0xa54>)
 8007908:	e5f7      	b.n	80074fa <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800790a:	2380      	movs	r3, #128	; 0x80
 800790c:	f7ff bbdb 	b.w	80070c6 <HAL_UART_Init+0x10e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007910:	2320      	movs	r3, #32
 8007912:	e5ad      	b.n	8007470 <HAL_UART_Init+0x4b8>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007914:	2202      	movs	r2, #2
 8007916:	2300      	movs	r3, #0
 8007918:	e653      	b.n	80075c2 <HAL_UART_Init+0x60a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800791a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800791e:	e5ec      	b.n	80074fa <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007920:	4b40      	ldr	r3, [pc, #256]	; (8007a24 <HAL_UART_Init+0xa6c>)
 8007922:	e56c      	b.n	80073fe <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007924:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007928:	e569      	b.n	80073fe <HAL_UART_Init+0x446>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800792a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800792e:	2108      	movs	r1, #8
 8007930:	e530      	b.n	8007394 <HAL_UART_Init+0x3dc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007932:	4b3d      	ldr	r3, [pc, #244]	; (8007a28 <HAL_UART_Init+0xa70>)
 8007934:	e5e1      	b.n	80074fa <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007936:	f641 1398 	movw	r3, #6552	; 0x1998
 800793a:	e5de      	b.n	80074fa <HAL_UART_Init+0x542>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800793c:	2308      	movs	r3, #8
 800793e:	e6cf      	b.n	80076e0 <HAL_UART_Init+0x728>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007940:	4b34      	ldr	r3, [pc, #208]	; (8007a14 <HAL_UART_Init+0xa5c>)
 8007942:	2102      	movs	r1, #2
 8007944:	e526      	b.n	8007394 <HAL_UART_Init+0x3dc>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007946:	2308      	movs	r3, #8
 8007948:	e6db      	b.n	8007702 <HAL_UART_Init+0x74a>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800794a:	4b33      	ldr	r3, [pc, #204]	; (8007a18 <HAL_UART_Init+0xa60>)
 800794c:	2102      	movs	r1, #2
 800794e:	e521      	b.n	8007394 <HAL_UART_Init+0x3dc>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007950:	2204      	movs	r2, #4
 8007952:	2300      	movs	r3, #0
 8007954:	e635      	b.n	80075c2 <HAL_UART_Init+0x60a>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007956:	f640 43cc 	movw	r3, #3276	; 0xccc
 800795a:	2108      	movs	r1, #8
 800795c:	e51a      	b.n	8007394 <HAL_UART_Init+0x3dc>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800795e:	230a      	movs	r3, #10
 8007960:	e6cf      	b.n	8007702 <HAL_UART_Init+0x74a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007962:	2206      	movs	r2, #6
 8007964:	2300      	movs	r3, #0
 8007966:	e62c      	b.n	80075c2 <HAL_UART_Init+0x60a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007968:	4b30      	ldr	r3, [pc, #192]	; (8007a2c <HAL_UART_Init+0xa74>)
 800796a:	e548      	b.n	80073fe <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800796c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007970:	e545      	b.n	80073fe <HAL_UART_Init+0x446>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007972:	230a      	movs	r3, #10
 8007974:	e6b4      	b.n	80076e0 <HAL_UART_Init+0x728>
 8007976:	230c      	movs	r3, #12
 8007978:	e6b2      	b.n	80076e0 <HAL_UART_Init+0x728>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800797a:	2380      	movs	r3, #128	; 0x80
 800797c:	e578      	b.n	8007470 <HAL_UART_Init+0x4b8>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800797e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8007982:	2108      	movs	r1, #8
 8007984:	e506      	b.n	8007394 <HAL_UART_Init+0x3dc>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007986:	230c      	movs	r3, #12
 8007988:	e6bb      	b.n	8007702 <HAL_UART_Init+0x74a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800798a:	4b22      	ldr	r3, [pc, #136]	; (8007a14 <HAL_UART_Init+0xa5c>)
 800798c:	e5b5      	b.n	80074fa <HAL_UART_Init+0x542>
 800798e:	4b20      	ldr	r3, [pc, #128]	; (8007a10 <HAL_UART_Init+0xa58>)
 8007990:	e5b3      	b.n	80074fa <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007996:	e5b0      	b.n	80074fa <HAL_UART_Init+0x542>
 8007998:	f241 5354 	movw	r3, #5460	; 0x1554
 800799c:	e5ad      	b.n	80074fa <HAL_UART_Init+0x542>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800799e:	4824      	ldr	r0, [pc, #144]	; (8007a30 <HAL_UART_Init+0xa78>)
 80079a0:	2100      	movs	r1, #0
 80079a2:	e64e      	b.n	8007642 <HAL_UART_Init+0x68a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079a4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80079a8:	2100      	movs	r1, #0
 80079aa:	e64a      	b.n	8007642 <HAL_UART_Init+0x68a>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80079ac:	4b1c      	ldr	r3, [pc, #112]	; (8007a20 <HAL_UART_Init+0xa68>)
 80079ae:	2102      	movs	r1, #2
 80079b0:	e4f0      	b.n	8007394 <HAL_UART_Init+0x3dc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079b2:	2340      	movs	r3, #64	; 0x40
 80079b4:	e55c      	b.n	8007470 <HAL_UART_Init+0x4b8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079ba:	e520      	b.n	80073fe <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079bc:	4b1d      	ldr	r3, [pc, #116]	; (8007a34 <HAL_UART_Init+0xa7c>)
 80079be:	e51e      	b.n	80073fe <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80079c4:	e599      	b.n	80074fa <HAL_UART_Init+0x542>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80079c6:	2310      	movs	r3, #16
 80079c8:	e68a      	b.n	80076e0 <HAL_UART_Init+0x728>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079ca:	2210      	movs	r2, #16
 80079cc:	2300      	movs	r3, #0
 80079ce:	e5f8      	b.n	80075c2 <HAL_UART_Init+0x60a>
 80079d0:	220c      	movs	r2, #12
 80079d2:	2300      	movs	r3, #0
 80079d4:	e5f5      	b.n	80075c2 <HAL_UART_Init+0x60a>
 80079d6:	220a      	movs	r2, #10
 80079d8:	2300      	movs	r3, #0
 80079da:	e5f2      	b.n	80075c2 <HAL_UART_Init+0x60a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079dc:	4b11      	ldr	r3, [pc, #68]	; (8007a24 <HAL_UART_Init+0xa6c>)
 80079de:	e58c      	b.n	80074fa <HAL_UART_Init+0x542>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079e4:	e50b      	b.n	80073fe <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079e6:	4b14      	ldr	r3, [pc, #80]	; (8007a38 <HAL_UART_Init+0xa80>)
 80079e8:	e509      	b.n	80073fe <HAL_UART_Init+0x446>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80079ea:	4b0e      	ldr	r3, [pc, #56]	; (8007a24 <HAL_UART_Init+0xa6c>)
 80079ec:	2102      	movs	r1, #2
 80079ee:	e4d1      	b.n	8007394 <HAL_UART_Init+0x3dc>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079f0:	2208      	movs	r2, #8
 80079f2:	2300      	movs	r3, #0
 80079f4:	e5e5      	b.n	80075c2 <HAL_UART_Init+0x60a>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80079f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80079fa:	2108      	movs	r1, #8
 80079fc:	e4ca      	b.n	8007394 <HAL_UART_Init+0x3dc>
 80079fe:	bf00      	nop
 8007a00:	01e84800 	.word	0x01e84800
 8007a04:	00f42400 	.word	0x00f42400
 8007a08:	007a1200 	.word	0x007a1200
 8007a0c:	003d0900 	.word	0x003d0900
 8007a10:	0028b0aa 	.word	0x0028b0aa
 8007a14:	001e8480 	.word	0x001e8480
 8007a18:	00186a00 	.word	0x00186a00
 8007a1c:	00516154 	.word	0x00516154
 8007a20:	00145855 	.word	0x00145855
 8007a24:	000f4240 	.word	0x000f4240
 8007a28:	0030d400 	.word	0x0030d400
 8007a2c:	0007a120 	.word	0x0007a120
 8007a30:	7a120000 	.word	0x7a120000
 8007a34:	0003d090 	.word	0x0003d090
 8007a38:	0001e848 	.word	0x0001e848
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a3c:	4842      	ldr	r0, [pc, #264]	; (8007b48 <HAL_UART_Init+0xb90>)
 8007a3e:	2100      	movs	r1, #0
 8007a40:	e5ff      	b.n	8007642 <HAL_UART_Init+0x68a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a42:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8007a46:	2100      	movs	r1, #0
 8007a48:	e5fb      	b.n	8007642 <HAL_UART_Init+0x68a>
 8007a4a:	4840      	ldr	r0, [pc, #256]	; (8007b4c <HAL_UART_Init+0xb94>)
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	e5f8      	b.n	8007642 <HAL_UART_Init+0x68a>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007a50:	2310      	movs	r3, #16
 8007a52:	e656      	b.n	8007702 <HAL_UART_Init+0x74a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a54:	a138      	add	r1, pc, #224	; (adr r1, 8007b38 <HAL_UART_Init+0xb80>)
 8007a56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a5a:	e5f2      	b.n	8007642 <HAL_UART_Init+0x68a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a5c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007a60:	2100      	movs	r1, #0
 8007a62:	e5ee      	b.n	8007642 <HAL_UART_Init+0x68a>
 8007a64:	483a      	ldr	r0, [pc, #232]	; (8007b50 <HAL_UART_Init+0xb98>)
 8007a66:	2100      	movs	r1, #0
 8007a68:	e5eb      	b.n	8007642 <HAL_UART_Init+0x68a>
 8007a6a:	483a      	ldr	r0, [pc, #232]	; (8007b54 <HAL_UART_Init+0xb9c>)
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	e5e8      	b.n	8007642 <HAL_UART_Init+0x68a>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007a70:	2320      	movs	r3, #32
 8007a72:	e646      	b.n	8007702 <HAL_UART_Init+0x74a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a74:	4838      	ldr	r0, [pc, #224]	; (8007b58 <HAL_UART_Init+0xba0>)
 8007a76:	2100      	movs	r1, #0
 8007a78:	e5e3      	b.n	8007642 <HAL_UART_Init+0x68a>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007a7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a7e:	e489      	b.n	8007394 <HAL_UART_Init+0x3dc>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a80:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007a84:	2100      	movs	r1, #0
 8007a86:	e5dc      	b.n	8007642 <HAL_UART_Init+0x68a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a88:	4834      	ldr	r0, [pc, #208]	; (8007b5c <HAL_UART_Init+0xba4>)
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	e5d9      	b.n	8007642 <HAL_UART_Init+0x68a>
 8007a8e:	a12c      	add	r1, pc, #176	; (adr r1, 8007b40 <HAL_UART_Init+0xb88>)
 8007a90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a94:	e5d5      	b.n	8007642 <HAL_UART_Init+0x68a>
 8007a96:	4832      	ldr	r0, [pc, #200]	; (8007b60 <HAL_UART_Init+0xba8>)
 8007a98:	2100      	movs	r1, #0
 8007a9a:	e5d2      	b.n	8007642 <HAL_UART_Init+0x68a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a9c:	4b31      	ldr	r3, [pc, #196]	; (8007b64 <HAL_UART_Init+0xbac>)
 8007a9e:	e52c      	b.n	80074fa <HAL_UART_Init+0x542>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007aa0:	2380      	movs	r3, #128	; 0x80
 8007aa2:	e61d      	b.n	80076e0 <HAL_UART_Init+0x728>
 8007aa4:	2340      	movs	r3, #64	; 0x40
 8007aa6:	e61b      	b.n	80076e0 <HAL_UART_Init+0x728>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007aa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007aac:	2108      	movs	r1, #8
 8007aae:	e471      	b.n	8007394 <HAL_UART_Init+0x3dc>
 8007ab0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ab4:	2108      	movs	r1, #8
 8007ab6:	e46d      	b.n	8007394 <HAL_UART_Init+0x3dc>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007ab8:	4b2b      	ldr	r3, [pc, #172]	; (8007b68 <HAL_UART_Init+0xbb0>)
 8007aba:	2102      	movs	r1, #2
 8007abc:	e46a      	b.n	8007394 <HAL_UART_Init+0x3dc>
 8007abe:	4b2b      	ldr	r3, [pc, #172]	; (8007b6c <HAL_UART_Init+0xbb4>)
 8007ac0:	2102      	movs	r1, #2
 8007ac2:	e467      	b.n	8007394 <HAL_UART_Init+0x3dc>
 8007ac4:	4b27      	ldr	r3, [pc, #156]	; (8007b64 <HAL_UART_Init+0xbac>)
 8007ac6:	2102      	movs	r1, #2
 8007ac8:	e464      	b.n	8007394 <HAL_UART_Init+0x3dc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007aca:	4b28      	ldr	r3, [pc, #160]	; (8007b6c <HAL_UART_Init+0xbb4>)
 8007acc:	e515      	b.n	80074fa <HAL_UART_Init+0x542>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007ace:	2380      	movs	r3, #128	; 0x80
 8007ad0:	e617      	b.n	8007702 <HAL_UART_Init+0x74a>
 8007ad2:	2340      	movs	r3, #64	; 0x40
 8007ad4:	e615      	b.n	8007702 <HAL_UART_Init+0x74a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ada:	e50e      	b.n	80074fa <HAL_UART_Init+0x542>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007adc:	2320      	movs	r3, #32
 8007ade:	e5ff      	b.n	80076e0 <HAL_UART_Init+0x728>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ae0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ae4:	e509      	b.n	80074fa <HAL_UART_Init+0x542>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ae6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007aea:	2100      	movs	r1, #0
 8007aec:	e5a9      	b.n	8007642 <HAL_UART_Init+0x68a>
 8007aee:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8007af2:	2100      	movs	r1, #0
 8007af4:	e5a5      	b.n	8007642 <HAL_UART_Init+0x68a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007af6:	2280      	movs	r2, #128	; 0x80
 8007af8:	2300      	movs	r3, #0
 8007afa:	e562      	b.n	80075c2 <HAL_UART_Init+0x60a>
 8007afc:	2240      	movs	r2, #64	; 0x40
 8007afe:	2300      	movs	r3, #0
 8007b00:	e55f      	b.n	80075c2 <HAL_UART_Init+0x60a>
 8007b02:	2220      	movs	r2, #32
 8007b04:	2300      	movs	r3, #0
 8007b06:	e55c      	b.n	80075c2 <HAL_UART_Init+0x60a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b08:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	e598      	b.n	8007642 <HAL_UART_Init+0x68a>
 8007b10:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8007b14:	2100      	movs	r1, #0
 8007b16:	e594      	b.n	8007642 <HAL_UART_Init+0x68a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b18:	4815      	ldr	r0, [pc, #84]	; (8007b70 <HAL_UART_Init+0xbb8>)
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	e591      	b.n	8007642 <HAL_UART_Init+0x68a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b22:	2300      	movs	r3, #0
 8007b24:	e54d      	b.n	80075c2 <HAL_UART_Init+0x60a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b26:	4813      	ldr	r0, [pc, #76]	; (8007b74 <HAL_UART_Init+0xbbc>)
 8007b28:	2100      	movs	r1, #0
 8007b2a:	e58a      	b.n	8007642 <HAL_UART_Init+0x68a>
 8007b2c:	4812      	ldr	r0, [pc, #72]	; (8007b78 <HAL_UART_Init+0xbc0>)
 8007b2e:	2100      	movs	r1, #0
 8007b30:	e587      	b.n	8007642 <HAL_UART_Init+0x68a>
 8007b32:	4812      	ldr	r0, [pc, #72]	; (8007b7c <HAL_UART_Init+0xbc4>)
 8007b34:	2100      	movs	r1, #0
 8007b36:	e584      	b.n	8007642 <HAL_UART_Init+0x68a>
 8007b38:	28b0aa00 	.word	0x28b0aa00
 8007b3c:	00000000 	.word	0x00000000
 8007b40:	14585500 	.word	0x14585500
 8007b44:	00000000 	.word	0x00000000
 8007b48:	3d090000 	.word	0x3d090000
 8007b4c:	00155500 	.word	0x00155500
 8007b50:	000aaa00 	.word	0x000aaa00
 8007b54:	000ccc00 	.word	0x000ccc00
 8007b58:	1e848000 	.word	0x1e848000
 8007b5c:	0f424000 	.word	0x0f424000
 8007b60:	186a0000 	.word	0x186a0000
 8007b64:	0007a120 	.word	0x0007a120
 8007b68:	0001e848 	.word	0x0001e848
 8007b6c:	0003d090 	.word	0x0003d090
 8007b70:	07a12000 	.word	0x07a12000
 8007b74:	00f42400 	.word	0x00f42400
 8007b78:	01e84800 	.word	0x01e84800
 8007b7c:	03d09000 	.word	0x03d09000

08007b80 <HAL_UARTEx_WakeupCallback>:
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop

08007b84 <HAL_UARTEx_RxFifoFullCallback>:
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop

08007b88 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop

08007b8c <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b8c:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8007b90:	2a01      	cmp	r2, #1
 8007b92:	d017      	beq.n	8007bc4 <HAL_UARTEx_DisableFifoMode+0x38>
{
 8007b94:	b430      	push	{r4, r5}

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b96:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007b98:	2124      	movs	r1, #36	; 0x24
 8007b9a:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b9e:	6814      	ldr	r4, [r2, #0]
 8007ba0:	4603      	mov	r3, r0

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ba2:	6810      	ldr	r0, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ba4:	2100      	movs	r1, #0
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007ba6:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8007baa:	f020 0001 	bic.w	r0, r0, #1

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8007bae:	2520      	movs	r5, #32
  __HAL_UART_DISABLE(huart);
 8007bb0:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 8007bb2:	4608      	mov	r0, r1
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007bb4:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bb6:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007bb8:	f883 507d 	strb.w	r5, [r3, #125]	; 0x7d
  __HAL_UNLOCK(huart);
 8007bbc:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 8007bc0:	bc30      	pop	{r4, r5}
 8007bc2:	4770      	bx	lr
  __HAL_LOCK(huart);
 8007bc4:	2002      	movs	r0, #2
 8007bc6:	4770      	bx	lr

08007bc8 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bc8:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8007bcc:	2a01      	cmp	r2, #1
 8007bce:	d101      	bne.n	8007bd4 <HAL_UARTEx_SetTxFifoThreshold+0xc>
 8007bd0:	2002      	movs	r0, #2
 8007bd2:	4770      	bx	lr
{
 8007bd4:	b5f0      	push	{r4, r5, r6, r7, lr}

  huart->gState = HAL_UART_STATE_BUSY;
 8007bd6:	2224      	movs	r2, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bd8:	6804      	ldr	r4, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007bda:	f880 207d 	strb.w	r2, [r0, #125]	; 0x7d
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bde:	6825      	ldr	r5, [r4, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007be0:	6822      	ldr	r2, [r4, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U};
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007be2:	6e46      	ldr	r6, [r0, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8007be4:	f022 0201 	bic.w	r2, r2, #1
 8007be8:	6022      	str	r2, [r4, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007bea:	68a2      	ldr	r2, [r4, #8]
{
 8007bec:	b085      	sub	sp, #20
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007bee:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8007bf2:	4311      	orrs	r1, r2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U};
 8007bf4:	2707      	movs	r7, #7
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	f04f 0e03 	mov.w	lr, #3
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U};
 8007bfe:	2008      	movs	r0, #8
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007c00:	60a1      	str	r1, [r4, #8]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U};
 8007c02:	f88d 7004 	strb.w	r7, [sp, #4]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U};
 8007c06:	2104      	movs	r1, #4
 8007c08:	2702      	movs	r7, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U};
 8007c0a:	f88d 2000 	strb.w	r2, [sp]
 8007c0e:	f88d 2001 	strb.w	r2, [sp, #1]
 8007c12:	f88d 2002 	strb.w	r2, [sp, #2]
 8007c16:	f88d 2005 	strb.w	r2, [sp, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U};
 8007c1a:	f88d 200d 	strb.w	r2, [sp, #13]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U};
 8007c1e:	f88d e003 	strb.w	lr, [sp, #3]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U};
 8007c22:	f88d 0008 	strb.w	r0, [sp, #8]
 8007c26:	f88d 000c 	strb.w	r0, [sp, #12]
 8007c2a:	f88d 1009 	strb.w	r1, [sp, #9]
 8007c2e:	f88d 100b 	strb.w	r1, [sp, #11]
 8007c32:	f88d 700a 	strb.w	r7, [sp, #10]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c36:	b33e      	cbz	r6, 8007c88 <HAL_UARTEx_SetTxFifoThreshold+0xc0>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c38:	68a0      	ldr	r0, [r4, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c3a:	68a6      	ldr	r6, [r4, #8]
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 8007c3c:	aa04      	add	r2, sp, #16
 8007c3e:	f3c0 6042 	ubfx	r0, r0, #25, #3
 8007c42:	4410      	add	r0, r2
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 8007c44:	eb02 7656 	add.w	r6, r2, r6, lsr #29
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 8007c48:	f810 2c10 	ldrb.w	r2, [r0, #-16]
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 8007c4c:	f816 1c10 	ldrb.w	r1, [r6, #-16]
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 8007c50:	f810 7c08 	ldrb.w	r7, [r0, #-8]
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 8007c54:	f816 0c08 	ldrb.w	r0, [r6, #-8]
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 8007c58:	fa02 f20e 	lsl.w	r2, r2, lr
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 8007c5c:	fa01 f10e 	lsl.w	r1, r1, lr
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 8007c60:	b2d2      	uxtb	r2, r2
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 8007c62:	b2c9      	uxtb	r1, r1
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 8007c64:	fbb2 f2f7 	udiv	r2, r2, r7
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 8007c68:	fbb1 f1f0 	udiv	r1, r1, r0
  __HAL_UNLOCK(huart);
 8007c6c:	2600      	movs	r6, #0
  huart->gState = HAL_UART_STATE_READY;
 8007c6e:	2720      	movs	r7, #32
  return HAL_OK;
 8007c70:	4630      	mov	r0, r6
 8007c72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8007c76:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c7a:	6025      	str	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007c7c:	f883 707d 	strb.w	r7, [r3, #125]	; 0x7d
  __HAL_UNLOCK(huart);
 8007c80:	f883 607c 	strb.w	r6, [r3, #124]	; 0x7c
}
 8007c84:	b005      	add	sp, #20
 8007c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    huart->NbTxDataToProcess = 1U;
 8007c88:	4611      	mov	r1, r2
 8007c8a:	e7ef      	b.n	8007c6c <HAL_UARTEx_SetTxFifoThreshold+0xa4>

08007c8c <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8007c8c:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8007c90:	2a01      	cmp	r2, #1
 8007c92:	d101      	bne.n	8007c98 <HAL_UARTEx_SetRxFifoThreshold+0xc>
 8007c94:	2002      	movs	r0, #2
 8007c96:	4770      	bx	lr
{
 8007c98:	b5f0      	push	{r4, r5, r6, r7, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8007c9a:	2224      	movs	r2, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c9c:	6804      	ldr	r4, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007c9e:	f880 207d 	strb.w	r2, [r0, #125]	; 0x7d
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ca2:	6825      	ldr	r5, [r4, #0]
  __HAL_UART_DISABLE(huart);
 8007ca4:	6822      	ldr	r2, [r4, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ca6:	6e46      	ldr	r6, [r0, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8007ca8:	f022 0201 	bic.w	r2, r2, #1
 8007cac:	6022      	str	r2, [r4, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007cae:	68a2      	ldr	r2, [r4, #8]
{
 8007cb0:	b085      	sub	sp, #20
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007cb2:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8007cb6:	4311      	orrs	r1, r2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U};
 8007cb8:	2707      	movs	r7, #7
 8007cba:	2201      	movs	r2, #1
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	f04f 0e03 	mov.w	lr, #3
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U};
 8007cc2:	2008      	movs	r0, #8
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007cc4:	60a1      	str	r1, [r4, #8]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U};
 8007cc6:	f88d 7004 	strb.w	r7, [sp, #4]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U};
 8007cca:	2104      	movs	r1, #4
 8007ccc:	2702      	movs	r7, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U};
 8007cce:	f88d 2000 	strb.w	r2, [sp]
 8007cd2:	f88d 2001 	strb.w	r2, [sp, #1]
 8007cd6:	f88d 2002 	strb.w	r2, [sp, #2]
 8007cda:	f88d 2005 	strb.w	r2, [sp, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U};
 8007cde:	f88d 200d 	strb.w	r2, [sp, #13]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U};
 8007ce2:	f88d e003 	strb.w	lr, [sp, #3]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U};
 8007ce6:	f88d 0008 	strb.w	r0, [sp, #8]
 8007cea:	f88d 000c 	strb.w	r0, [sp, #12]
 8007cee:	f88d 1009 	strb.w	r1, [sp, #9]
 8007cf2:	f88d 100b 	strb.w	r1, [sp, #11]
 8007cf6:	f88d 700a 	strb.w	r7, [sp, #10]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007cfa:	b33e      	cbz	r6, 8007d4c <HAL_UARTEx_SetRxFifoThreshold+0xc0>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007cfc:	68a0      	ldr	r0, [r4, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007cfe:	68a6      	ldr	r6, [r4, #8]
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 8007d00:	aa04      	add	r2, sp, #16
 8007d02:	f3c0 6042 	ubfx	r0, r0, #25, #3
 8007d06:	4410      	add	r0, r2
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 8007d08:	eb02 7656 	add.w	r6, r2, r6, lsr #29
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 8007d0c:	f810 2c10 	ldrb.w	r2, [r0, #-16]
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 8007d10:	f816 1c10 	ldrb.w	r1, [r6, #-16]
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 8007d14:	f810 7c08 	ldrb.w	r7, [r0, #-8]
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 8007d18:	f816 0c08 	ldrb.w	r0, [r6, #-8]
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 8007d1c:	fa02 f20e 	lsl.w	r2, r2, lr
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 8007d20:	fa01 f10e 	lsl.w	r1, r1, lr
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 8007d24:	b2d2      	uxtb	r2, r2
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 8007d26:	b2c9      	uxtb	r1, r1
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 8007d28:	fbb2 f2f7 	udiv	r2, r2, r7
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 8007d2c:	fbb1 f1f0 	udiv	r1, r1, r0
  __HAL_UNLOCK(huart);
 8007d30:	2600      	movs	r6, #0
  huart->gState = HAL_UART_STATE_READY;
 8007d32:	2720      	movs	r7, #32
  return HAL_OK;
 8007d34:	4630      	mov	r0, r6
 8007d36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8007d3a:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d3e:	6025      	str	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007d40:	f883 707d 	strb.w	r7, [r3, #125]	; 0x7d
  __HAL_UNLOCK(huart);
 8007d44:	f883 607c 	strb.w	r6, [r3, #124]	; 0x7c
}
 8007d48:	b005      	add	sp, #20
 8007d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    huart->NbTxDataToProcess = 1U;
 8007d4c:	4611      	mov	r1, r2
 8007d4e:	e7ef      	b.n	8007d30 <HAL_UARTEx_SetRxFifoThreshold+0xa4>

08007d50 <SDMMC_GetCmdResp1.part.2>:
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007d50:	4b30      	ldr	r3, [pc, #192]	; (8007e14 <SDMMC_GetCmdResp1.part.2+0xc4>)
 8007d52:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8007d54:	6943      	ldr	r3, [r0, #20]
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007d56:	4830      	ldr	r0, [pc, #192]	; (8007e18 <SDMMC_GetCmdResp1.part.2+0xc8>)
 8007d58:	4018      	ands	r0, r3
 8007d5a:	b148      	cbz	r0, 8007d70 <SDMMC_GetCmdResp1.part.2+0x20>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	db08      	blt.n	8007d72 <SDMMC_GetCmdResp1.part.2+0x22>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007d60:	0059      	lsls	r1, r3, #1
 8007d62:	d509      	bpl.n	8007d78 <SDMMC_GetCmdResp1.part.2+0x28>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007d64:	2040      	movs	r0, #64	; 0x40
 8007d66:	4770      	bx	lr
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007d68:	049a      	lsls	r2, r3, #18
 8007d6a:	d54a      	bpl.n	8007e02 <SDMMC_GetCmdResp1.part.2+0xb2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007d6c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
  }
}
 8007d70:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007d72:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8007d76:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007d78:	009a      	lsls	r2, r3, #2
 8007d7a:	d501      	bpl.n	8007d80 <SDMMC_GetCmdResp1.part.2+0x30>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007d7c:	2080      	movs	r0, #128	; 0x80
 8007d7e:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007d80:	00d9      	lsls	r1, r3, #3
 8007d82:	d502      	bpl.n	8007d8a <SDMMC_GetCmdResp1.part.2+0x3a>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007d84:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007d88:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007d8a:	011a      	lsls	r2, r3, #4
 8007d8c:	d502      	bpl.n	8007d94 <SDMMC_GetCmdResp1.part.2+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007d8e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007d92:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007d94:	0159      	lsls	r1, r3, #5
 8007d96:	d502      	bpl.n	8007d9e <SDMMC_GetCmdResp1.part.2+0x4e>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007d98:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007d9c:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007d9e:	01da      	lsls	r2, r3, #7
 8007da0:	d502      	bpl.n	8007da8 <SDMMC_GetCmdResp1.part.2+0x58>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007da2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007da6:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007da8:	0219      	lsls	r1, r3, #8
 8007daa:	d502      	bpl.n	8007db2 <SDMMC_GetCmdResp1.part.2+0x62>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007dac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007db0:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007db2:	025a      	lsls	r2, r3, #9
 8007db4:	d502      	bpl.n	8007dbc <SDMMC_GetCmdResp1.part.2+0x6c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007db6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007dba:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007dbc:	0299      	lsls	r1, r3, #10
 8007dbe:	d502      	bpl.n	8007dc6 <SDMMC_GetCmdResp1.part.2+0x76>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007dc0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007dc4:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007dc6:	02da      	lsls	r2, r3, #11
 8007dc8:	d502      	bpl.n	8007dd0 <SDMMC_GetCmdResp1.part.2+0x80>
    return SDMMC_ERROR_CC_ERR;
 8007dca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007dce:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007dd0:	0359      	lsls	r1, r3, #13
 8007dd2:	d502      	bpl.n	8007dda <SDMMC_GetCmdResp1.part.2+0x8a>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007dd4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8007dd8:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007dda:	039a      	lsls	r2, r3, #14
 8007ddc:	d502      	bpl.n	8007de4 <SDMMC_GetCmdResp1.part.2+0x94>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007dde:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8007de2:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007de4:	03d9      	lsls	r1, r3, #15
 8007de6:	d502      	bpl.n	8007dee <SDMMC_GetCmdResp1.part.2+0x9e>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007de8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007dec:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007dee:	041a      	lsls	r2, r3, #16
 8007df0:	d502      	bpl.n	8007df8 <SDMMC_GetCmdResp1.part.2+0xa8>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007df2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007df6:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007df8:	0459      	lsls	r1, r3, #17
 8007dfa:	d5b5      	bpl.n	8007d68 <SDMMC_GetCmdResp1.part.2+0x18>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007dfc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8007e00:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007e02:	f013 0f08 	tst.w	r3, #8
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007e06:	bf14      	ite	ne
 8007e08:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8007e0c:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	002000c5 	.word	0x002000c5
 8007e18:	fdffe008 	.word	0xfdffe008

08007e1c <SDMMC_Init>:
{
 8007e1c:	b084      	sub	sp, #16
 8007e1e:	b470      	push	{r4, r5, r6}
 8007e20:	ac04      	add	r4, sp, #16
 8007e22:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 8007e26:	9e05      	ldr	r6, [sp, #20]
 8007e28:	9d06      	ldr	r5, [sp, #24]
 8007e2a:	9c07      	ldr	r4, [sp, #28]
 8007e2c:	4a07      	ldr	r2, [pc, #28]	; (8007e4c <SDMMC_Init+0x30>)
 8007e2e:	460b      	mov	r3, r1
 8007e30:	4333      	orrs	r3, r6
 8007e32:	432b      	orrs	r3, r5
 8007e34:	6845      	ldr	r5, [r0, #4]
 8007e36:	9908      	ldr	r1, [sp, #32]
 8007e38:	4323      	orrs	r3, r4
 8007e3a:	402a      	ands	r2, r5
}
 8007e3c:	bc70      	pop	{r4, r5, r6}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 8007e3e:	430b      	orrs	r3, r1
 8007e40:	4313      	orrs	r3, r2
 8007e42:	6043      	str	r3, [r0, #4]
}
 8007e44:	b004      	add	sp, #16
 8007e46:	2000      	movs	r0, #0
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	fffc2c00 	.word	0xfffc2c00

08007e50 <SDMMC_ReadFIFO>:
 8007e50:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop

08007e58 <SDMMC_PowerState_ON>:
{  
 8007e58:	4602      	mov	r2, r0
}
 8007e5a:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8007e5c:	6813      	ldr	r3, [r2, #0]
 8007e5e:	f043 0303 	orr.w	r3, r3, #3
 8007e62:	6013      	str	r3, [r2, #0]
}
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop

08007e68 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007e68:	6800      	ldr	r0, [r0, #0]
}
 8007e6a:	f000 0003 	and.w	r0, r0, #3
 8007e6e:	4770      	bx	lr

08007e70 <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007e70:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8007e72:	5840      	ldr	r0, [r0, r1]
}  
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop

08007e78 <SDMMC_ConfigData>:
  SDMMCx->DLEN = Data->DataLength;
 8007e78:	e891 000c 	ldmia.w	r1, {r2, r3}
{
 8007e7c:	b470      	push	{r4, r5, r6}
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007e7e:	6242      	str	r2, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 8007e80:	6283      	str	r3, [r0, #40]	; 0x28
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, Data->DataBlockSize |\
 8007e82:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007e84:	688e      	ldr	r6, [r1, #8]
 8007e86:	68cd      	ldr	r5, [r1, #12]
 8007e88:	690c      	ldr	r4, [r1, #16]
 8007e8a:	694a      	ldr	r2, [r1, #20]
 8007e8c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007e90:	4333      	orrs	r3, r6
 8007e92:	432b      	orrs	r3, r5
 8007e94:	4323      	orrs	r3, r4
 8007e96:	4313      	orrs	r3, r2
 8007e98:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8007e9a:	bc70      	pop	{r4, r5, r6}
 8007e9c:	2000      	movs	r0, #0
 8007e9e:	4770      	bx	lr

08007ea0 <SDMMC_CmdBlockLength>:
{
 8007ea0:	b410      	push	{r4}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007ea2:	4b1d      	ldr	r3, [pc, #116]	; (8007f18 <SDMMC_CmdBlockLength+0x78>)
  SDMMCx->ARG = Command->Argument;
 8007ea4:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007ea6:	68c4      	ldr	r4, [r0, #12]
 8007ea8:	4a1c      	ldr	r2, [pc, #112]	; (8007f1c <SDMMC_CmdBlockLength+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007eaa:	491d      	ldr	r1, [pc, #116]	; (8007f20 <SDMMC_CmdBlockLength+0x80>)
 8007eac:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007eae:	4022      	ands	r2, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007eb0:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007eb4:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007eb8:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007eba:	f042 0210 	orr.w	r2, r2, #16
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007ebe:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007ec2:	60c2      	str	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007ec4:	fb03 f301 	mul.w	r3, r3, r1
 8007ec8:	e003      	b.n	8007ed2 <SDMMC_CmdBlockLength+0x32>
  }while(!__SDMMC_GET_FLAG(SDMMCx, flags));
 8007eca:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007ecc:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007ed0:	d107      	bne.n	8007ee2 <SDMMC_CmdBlockLength+0x42>
    if (count-- == 0U)
 8007ed2:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007ed6:	d2f8      	bcs.n	8007eca <SDMMC_CmdBlockLength+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8007ed8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007edc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ee0:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007ee2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007ee4:	075a      	lsls	r2, r3, #29
 8007ee6:	d505      	bpl.n	8007ef4 <SDMMC_CmdBlockLength+0x54>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007ee8:	2304      	movs	r3, #4
 8007eea:	6383      	str	r3, [r0, #56]	; 0x38
}
 8007eec:	f85d 4b04 	ldr.w	r4, [sp], #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007ef0:	4618      	mov	r0, r3
}
 8007ef2:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007ef4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007ef6:	07db      	lsls	r3, r3, #31
 8007ef8:	d405      	bmi.n	8007f06 <SDMMC_CmdBlockLength+0x66>
  return (uint8_t)(SDMMCx->RESPCMD);
 8007efa:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b10      	cmp	r3, #16
 8007f00:	d005      	beq.n	8007f0e <SDMMC_CmdBlockLength+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f02:	2001      	movs	r0, #1
  return errorstate;
 8007f04:	e7ea      	b.n	8007edc <SDMMC_CmdBlockLength+0x3c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007f06:	2301      	movs	r3, #1
 8007f08:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	e7e6      	b.n	8007edc <SDMMC_CmdBlockLength+0x3c>
}
 8007f0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f12:	f7ff bf1d 	b.w	8007d50 <SDMMC_GetCmdResp1.part.2>
 8007f16:	bf00      	nop
 8007f18:	2000003c 	.word	0x2000003c
 8007f1c:	fffee0c0 	.word	0xfffee0c0
 8007f20:	10624dd3 	.word	0x10624dd3

08007f24 <SDMMC_CmdSelDesel>:
{
 8007f24:	b410      	push	{r4}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007f26:	4b1d      	ldr	r3, [pc, #116]	; (8007f9c <SDMMC_CmdSelDesel+0x78>)
  SDMMCx->ARG = Command->Argument;
 8007f28:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007f2a:	68c4      	ldr	r4, [r0, #12]
 8007f2c:	4a1c      	ldr	r2, [pc, #112]	; (8007fa0 <SDMMC_CmdSelDesel+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007f2e:	491d      	ldr	r1, [pc, #116]	; (8007fa4 <SDMMC_CmdSelDesel+0x80>)
 8007f30:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007f32:	4022      	ands	r2, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007f34:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007f38:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007f3c:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007f3e:	f042 0207 	orr.w	r2, r2, #7
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007f42:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007f46:	60c2      	str	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007f48:	fb03 f301 	mul.w	r3, r3, r1
 8007f4c:	e003      	b.n	8007f56 <SDMMC_CmdSelDesel+0x32>
  }while(!__SDMMC_GET_FLAG(SDMMCx, flags));
 8007f4e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007f50:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007f54:	d107      	bne.n	8007f66 <SDMMC_CmdSelDesel+0x42>
    if (count-- == 0U)
 8007f56:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007f5a:	d2f8      	bcs.n	8007f4e <SDMMC_CmdSelDesel+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8007f5c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007f60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f64:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007f66:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007f68:	075a      	lsls	r2, r3, #29
 8007f6a:	d505      	bpl.n	8007f78 <SDMMC_CmdSelDesel+0x54>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007f6c:	2304      	movs	r3, #4
 8007f6e:	6383      	str	r3, [r0, #56]	; 0x38
}
 8007f70:	f85d 4b04 	ldr.w	r4, [sp], #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007f74:	4618      	mov	r0, r3
}
 8007f76:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007f78:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007f7a:	07db      	lsls	r3, r3, #31
 8007f7c:	d405      	bmi.n	8007f8a <SDMMC_CmdSelDesel+0x66>
  return (uint8_t)(SDMMCx->RESPCMD);
 8007f7e:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	2b07      	cmp	r3, #7
 8007f84:	d005      	beq.n	8007f92 <SDMMC_CmdSelDesel+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f86:	2001      	movs	r0, #1
  return errorstate;
 8007f88:	e7ea      	b.n	8007f60 <SDMMC_CmdSelDesel+0x3c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f8e:	4618      	mov	r0, r3
 8007f90:	e7e6      	b.n	8007f60 <SDMMC_CmdSelDesel+0x3c>
}
 8007f92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f96:	f7ff bedb 	b.w	8007d50 <SDMMC_GetCmdResp1.part.2>
 8007f9a:	bf00      	nop
 8007f9c:	2000003c 	.word	0x2000003c
 8007fa0:	fffee0c0 	.word	0xfffee0c0
 8007fa4:	10624dd3 	.word	0x10624dd3

08007fa8 <SDMMC_CmdGoIdleState>:
  SDMMCx->ARG = Command->Argument;
 8007fa8:	2200      	movs	r2, #0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007faa:	4b12      	ldr	r3, [pc, #72]	; (8007ff4 <SDMMC_CmdGoIdleState+0x4c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007fac:	4912      	ldr	r1, [pc, #72]	; (8007ff8 <SDMMC_CmdGoIdleState+0x50>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007fae:	681b      	ldr	r3, [r3, #0]
{
 8007fb0:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 8007fb2:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007fb4:	68c4      	ldr	r4, [r0, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007fb6:	4a11      	ldr	r2, [pc, #68]	; (8007ffc <SDMMC_CmdGoIdleState+0x54>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007fb8:	4021      	ands	r1, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007fba:	fba2 2303 	umull	r2, r3, r2, r3
 8007fbe:	0a5a      	lsrs	r2, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007fc0:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007fc4:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007fc8:	60c1      	str	r1, [r0, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007fca:	fb03 f302 	mul.w	r3, r3, r2
 8007fce:	e002      	b.n	8007fd6 <SDMMC_CmdGoIdleState+0x2e>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007fd0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007fd2:	0612      	lsls	r2, r2, #24
 8007fd4:	d407      	bmi.n	8007fe6 <SDMMC_CmdGoIdleState+0x3e>
    if (count-- == 0U)
 8007fd6:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007fda:	d2f9      	bcs.n	8007fd0 <SDMMC_CmdGoIdleState+0x28>
      return SDMMC_ERROR_TIMEOUT;
 8007fdc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007fe0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fe4:	4770      	bx	lr
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007fe6:	4b06      	ldr	r3, [pc, #24]	; (8008000 <SDMMC_CmdGoIdleState+0x58>)
 8007fe8:	6383      	str	r3, [r0, #56]	; 0x38
}
 8007fea:	f85d 4b04 	ldr.w	r4, [sp], #4
  return SDMMC_ERROR_NONE;
 8007fee:	2000      	movs	r0, #0
}
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	2000003c 	.word	0x2000003c
 8007ff8:	fffee0c0 	.word	0xfffee0c0
 8007ffc:	10624dd3 	.word	0x10624dd3
 8008000:	002000c5 	.word	0x002000c5

08008004 <SDMMC_CmdOperCond>:
  SDMMCx->ARG = Command->Argument;
 8008004:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
{
 8008008:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800800a:	6083      	str	r3, [r0, #8]
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800800c:	4b1b      	ldr	r3, [pc, #108]	; (800807c <SDMMC_CmdOperCond+0x78>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800800e:	68c4      	ldr	r4, [r0, #12]
 8008010:	4a1b      	ldr	r2, [pc, #108]	; (8008080 <SDMMC_CmdOperCond+0x7c>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008012:	681b      	ldr	r3, [r3, #0]
{
 8008014:	4601      	mov	r1, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008016:	481b      	ldr	r0, [pc, #108]	; (8008084 <SDMMC_CmdOperCond+0x80>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8008018:	4022      	ands	r2, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800801a:	fba0 0303 	umull	r0, r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800801e:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008022:	0a58      	lsrs	r0, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8008024:	f042 0208 	orr.w	r2, r2, #8
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008028:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800802c:	60ca      	str	r2, [r1, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800802e:	fb03 f300 	mul.w	r3, r3, r0
 8008032:	e003      	b.n	800803c <SDMMC_CmdOperCond+0x38>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8008034:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8008036:	f012 0f45 	tst.w	r2, #69	; 0x45
 800803a:	d107      	bne.n	800804c <SDMMC_CmdOperCond+0x48>
    if (count-- == 0U)
 800803c:	f113 33ff 	adds.w	r3, r3, #4294967295
 8008040:	d2f8      	bcs.n	8008034 <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8008042:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8008046:	f85d 4b04 	ldr.w	r4, [sp], #4
 800804a:	4770      	bx	lr

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800804c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800804e:	075b      	lsls	r3, r3, #29
 8008050:	d504      	bpl.n	800805c <SDMMC_CmdOperCond+0x58>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008052:	2004      	movs	r0, #4
 8008054:	6388      	str	r0, [r1, #56]	; 0x38
}
 8008056:	f85d 4b04 	ldr.w	r4, [sp], #4
 800805a:	4770      	bx	lr
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800805c:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800805e:	f010 0001 	ands.w	r0, r0, #1
 8008062:	d106      	bne.n	8008072 <SDMMC_CmdOperCond+0x6e>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008064:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8008066:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800806a:	d005      	beq.n	8008078 <SDMMC_CmdOperCond+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800806c:	2340      	movs	r3, #64	; 0x40
 800806e:	638b      	str	r3, [r1, #56]	; 0x38
 8008070:	e7e9      	b.n	8008046 <SDMMC_CmdOperCond+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008072:	2001      	movs	r0, #1
 8008074:	6388      	str	r0, [r1, #56]	; 0x38
 8008076:	e7e6      	b.n	8008046 <SDMMC_CmdOperCond+0x42>
  }
  
  return SDMMC_ERROR_NONE;
 8008078:	4618      	mov	r0, r3
  return errorstate;
 800807a:	e7e4      	b.n	8008046 <SDMMC_CmdOperCond+0x42>
 800807c:	2000003c 	.word	0x2000003c
 8008080:	fffee0c0 	.word	0xfffee0c0
 8008084:	10624dd3 	.word	0x10624dd3

08008088 <SDMMC_CmdAppCommand>:
{
 8008088:	b410      	push	{r4}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800808a:	4b1d      	ldr	r3, [pc, #116]	; (8008100 <SDMMC_CmdAppCommand+0x78>)
  SDMMCx->ARG = Command->Argument;
 800808c:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800808e:	68c4      	ldr	r4, [r0, #12]
 8008090:	4a1c      	ldr	r2, [pc, #112]	; (8008104 <SDMMC_CmdAppCommand+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008092:	491d      	ldr	r1, [pc, #116]	; (8008108 <SDMMC_CmdAppCommand+0x80>)
 8008094:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8008096:	4022      	ands	r2, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008098:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800809c:	f442 5289 	orr.w	r2, r2, #4384	; 0x1120
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80080a0:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 80080a2:	f042 0217 	orr.w	r2, r2, #23
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80080a6:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 80080aa:	60c2      	str	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80080ac:	fb03 f301 	mul.w	r3, r3, r1
 80080b0:	e003      	b.n	80080ba <SDMMC_CmdAppCommand+0x32>
  }while(!__SDMMC_GET_FLAG(SDMMCx, flags));
 80080b2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80080b4:	f012 0f45 	tst.w	r2, #69	; 0x45
 80080b8:	d107      	bne.n	80080ca <SDMMC_CmdAppCommand+0x42>
    if (count-- == 0U)
 80080ba:	f113 33ff 	adds.w	r3, r3, #4294967295
 80080be:	d2f8      	bcs.n	80080b2 <SDMMC_CmdAppCommand+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 80080c0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80080c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080c8:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80080ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80080cc:	075a      	lsls	r2, r3, #29
 80080ce:	d505      	bpl.n	80080dc <SDMMC_CmdAppCommand+0x54>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80080d0:	2304      	movs	r3, #4
 80080d2:	6383      	str	r3, [r0, #56]	; 0x38
}
 80080d4:	f85d 4b04 	ldr.w	r4, [sp], #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80080d8:	4618      	mov	r0, r3
}
 80080da:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80080dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80080de:	07db      	lsls	r3, r3, #31
 80080e0:	d405      	bmi.n	80080ee <SDMMC_CmdAppCommand+0x66>
  return (uint8_t)(SDMMCx->RESPCMD);
 80080e2:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	2b37      	cmp	r3, #55	; 0x37
 80080e8:	d005      	beq.n	80080f6 <SDMMC_CmdAppCommand+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80080ea:	2001      	movs	r0, #1
  return errorstate;
 80080ec:	e7ea      	b.n	80080c4 <SDMMC_CmdAppCommand+0x3c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80080ee:	2301      	movs	r3, #1
 80080f0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80080f2:	4618      	mov	r0, r3
 80080f4:	e7e6      	b.n	80080c4 <SDMMC_CmdAppCommand+0x3c>
}
 80080f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080fa:	f7ff be29 	b.w	8007d50 <SDMMC_GetCmdResp1.part.2>
 80080fe:	bf00      	nop
 8008100:	2000003c 	.word	0x2000003c
 8008104:	fffee0c0 	.word	0xfffee0c0
 8008108:	10624dd3 	.word	0x10624dd3

0800810c <SDMMC_CmdAppOperCommand>:
{
 800810c:	b410      	push	{r4}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800810e:	4b16      	ldr	r3, [pc, #88]	; (8008168 <SDMMC_CmdAppOperCommand+0x5c>)
  SDMMCx->ARG = Command->Argument;
 8008110:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8008112:	68c4      	ldr	r4, [r0, #12]
 8008114:	4a15      	ldr	r2, [pc, #84]	; (800816c <SDMMC_CmdAppOperCommand+0x60>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008116:	4916      	ldr	r1, [pc, #88]	; (8008170 <SDMMC_CmdAppOperCommand+0x64>)
 8008118:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800811a:	4022      	ands	r2, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800811c:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8008120:	f442 5289 	orr.w	r2, r2, #4384	; 0x1120
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008124:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8008126:	f042 0209 	orr.w	r2, r2, #9
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800812a:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800812e:	60c2      	str	r2, [r0, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008130:	fb03 f301 	mul.w	r3, r3, r1
 8008134:	e003      	b.n	800813e <SDMMC_CmdAppOperCommand+0x32>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8008136:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8008138:	f012 0f45 	tst.w	r2, #69	; 0x45
 800813c:	d107      	bne.n	800814e <SDMMC_CmdAppOperCommand+0x42>
    if (count-- == 0U)
 800813e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8008142:	d2f8      	bcs.n	8008136 <SDMMC_CmdAppOperCommand+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8008144:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8008148:	f85d 4b04 	ldr.w	r4, [sp], #4
 800814c:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800814e:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8008150:	f85d 4b04 	ldr.w	r4, [sp], #4
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008154:	f013 0304 	ands.w	r3, r3, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008158:	bf15      	itete	ne
 800815a:	2304      	movne	r3, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800815c:	4a05      	ldreq	r2, [pc, #20]	; (8008174 <SDMMC_CmdAppOperCommand+0x68>)
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800815e:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008160:	6382      	streq	r2, [r0, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8008162:	4618      	mov	r0, r3
}
 8008164:	4770      	bx	lr
 8008166:	bf00      	nop
 8008168:	2000003c 	.word	0x2000003c
 800816c:	fffee0c0 	.word	0xfffee0c0
 8008170:	10624dd3 	.word	0x10624dd3
 8008174:	002000c5 	.word	0x002000c5

08008178 <SDMMC_CmdBusWidth>:
 8008178:	b410      	push	{r4}
 800817a:	4b1d      	ldr	r3, [pc, #116]	; (80081f0 <SDMMC_CmdBusWidth+0x78>)
 800817c:	6081      	str	r1, [r0, #8]
 800817e:	68c4      	ldr	r4, [r0, #12]
 8008180:	4a1c      	ldr	r2, [pc, #112]	; (80081f4 <SDMMC_CmdBusWidth+0x7c>)
 8008182:	491d      	ldr	r1, [pc, #116]	; (80081f8 <SDMMC_CmdBusWidth+0x80>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4022      	ands	r2, r4
 8008188:	fba1 1303 	umull	r1, r3, r1, r3
 800818c:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 8008190:	0a59      	lsrs	r1, r3, #9
 8008192:	f042 0206 	orr.w	r2, r2, #6
 8008196:	f241 3388 	movw	r3, #5000	; 0x1388
 800819a:	60c2      	str	r2, [r0, #12]
 800819c:	fb03 f301 	mul.w	r3, r3, r1
 80081a0:	e003      	b.n	80081aa <SDMMC_CmdBusWidth+0x32>
 80081a2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80081a4:	f012 0f45 	tst.w	r2, #69	; 0x45
 80081a8:	d107      	bne.n	80081ba <SDMMC_CmdBusWidth+0x42>
 80081aa:	f113 33ff 	adds.w	r3, r3, #4294967295
 80081ae:	d2f8      	bcs.n	80081a2 <SDMMC_CmdBusWidth+0x2a>
 80081b0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80081b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081b8:	4770      	bx	lr
 80081ba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80081bc:	075a      	lsls	r2, r3, #29
 80081be:	d505      	bpl.n	80081cc <SDMMC_CmdBusWidth+0x54>
 80081c0:	2304      	movs	r3, #4
 80081c2:	6383      	str	r3, [r0, #56]	; 0x38
 80081c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081c8:	4618      	mov	r0, r3
 80081ca:	4770      	bx	lr
 80081cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80081ce:	07db      	lsls	r3, r3, #31
 80081d0:	d405      	bmi.n	80081de <SDMMC_CmdBusWidth+0x66>
 80081d2:	6903      	ldr	r3, [r0, #16]
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	2b06      	cmp	r3, #6
 80081d8:	d005      	beq.n	80081e6 <SDMMC_CmdBusWidth+0x6e>
 80081da:	2001      	movs	r0, #1
 80081dc:	e7ea      	b.n	80081b4 <SDMMC_CmdBusWidth+0x3c>
 80081de:	2301      	movs	r3, #1
 80081e0:	6383      	str	r3, [r0, #56]	; 0x38
 80081e2:	4618      	mov	r0, r3
 80081e4:	e7e6      	b.n	80081b4 <SDMMC_CmdBusWidth+0x3c>
 80081e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081ea:	f7ff bdb1 	b.w	8007d50 <SDMMC_GetCmdResp1.part.2>
 80081ee:	bf00      	nop
 80081f0:	2000003c 	.word	0x2000003c
 80081f4:	fffee0c0 	.word	0xfffee0c0
 80081f8:	10624dd3 	.word	0x10624dd3

080081fc <SDMMC_CmdSendSCR>:
  SDMMCx->ARG = Command->Argument;
 80081fc:	2300      	movs	r3, #0
{
 80081fe:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 8008200:	6083      	str	r3, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008202:	4b1c      	ldr	r3, [pc, #112]	; (8008274 <SDMMC_CmdSendSCR+0x78>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8008204:	68c4      	ldr	r4, [r0, #12]
 8008206:	4a1c      	ldr	r2, [pc, #112]	; (8008278 <SDMMC_CmdSendSCR+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008208:	491c      	ldr	r1, [pc, #112]	; (800827c <SDMMC_CmdSendSCR+0x80>)
 800820a:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800820c:	4022      	ands	r2, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800820e:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8008212:	f442 5289 	orr.w	r2, r2, #4384	; 0x1120
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008216:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8008218:	f042 0213 	orr.w	r2, r2, #19
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800821c:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8008220:	60c2      	str	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008222:	fb03 f301 	mul.w	r3, r3, r1
 8008226:	e003      	b.n	8008230 <SDMMC_CmdSendSCR+0x34>
  }while(!__SDMMC_GET_FLAG(SDMMCx, flags));
 8008228:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800822a:	f012 0f45 	tst.w	r2, #69	; 0x45
 800822e:	d107      	bne.n	8008240 <SDMMC_CmdSendSCR+0x44>
    if (count-- == 0U)
 8008230:	f113 33ff 	adds.w	r3, r3, #4294967295
 8008234:	d2f8      	bcs.n	8008228 <SDMMC_CmdSendSCR+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8008236:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800823a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800823e:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008240:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008242:	075a      	lsls	r2, r3, #29
 8008244:	d505      	bpl.n	8008252 <SDMMC_CmdSendSCR+0x56>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008246:	2304      	movs	r3, #4
 8008248:	6383      	str	r3, [r0, #56]	; 0x38
}
 800824a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800824e:	4618      	mov	r0, r3
}
 8008250:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008252:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008254:	07db      	lsls	r3, r3, #31
 8008256:	d405      	bmi.n	8008264 <SDMMC_CmdSendSCR+0x68>
  return (uint8_t)(SDMMCx->RESPCMD);
 8008258:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800825a:	b2db      	uxtb	r3, r3
 800825c:	2b33      	cmp	r3, #51	; 0x33
 800825e:	d005      	beq.n	800826c <SDMMC_CmdSendSCR+0x70>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008260:	2001      	movs	r0, #1
  return errorstate;
 8008262:	e7ea      	b.n	800823a <SDMMC_CmdSendSCR+0x3e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008264:	2301      	movs	r3, #1
 8008266:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008268:	4618      	mov	r0, r3
 800826a:	e7e6      	b.n	800823a <SDMMC_CmdSendSCR+0x3e>
}
 800826c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008270:	f7ff bd6e 	b.w	8007d50 <SDMMC_GetCmdResp1.part.2>
 8008274:	2000003c 	.word	0x2000003c
 8008278:	fffee0c0 	.word	0xfffee0c0
 800827c:	10624dd3 	.word	0x10624dd3

08008280 <SDMMC_CmdSendCID>:
  SDMMCx->ARG = Command->Argument;
 8008280:	2300      	movs	r3, #0
{
 8008282:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 8008284:	6083      	str	r3, [r0, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008286:	4b1a      	ldr	r3, [pc, #104]	; (80082f0 <SDMMC_CmdSendCID+0x70>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8008288:	68c4      	ldr	r4, [r0, #12]
 800828a:	4a1a      	ldr	r2, [pc, #104]	; (80082f4 <SDMMC_CmdSendCID+0x74>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800828c:	491a      	ldr	r1, [pc, #104]	; (80082f8 <SDMMC_CmdSendCID+0x78>)
 800828e:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8008290:	4022      	ands	r2, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008292:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8008296:	f442 5298 	orr.w	r2, r2, #4864	; 0x1300
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800829a:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800829c:	f042 0202 	orr.w	r2, r2, #2
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80082a0:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 80082a4:	60c2      	str	r2, [r0, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80082a6:	fb03 f301 	mul.w	r3, r3, r1
 80082aa:	e003      	b.n	80082b4 <SDMMC_CmdSendCID+0x34>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80082ac:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80082ae:	f012 0f45 	tst.w	r2, #69	; 0x45
 80082b2:	d107      	bne.n	80082c4 <SDMMC_CmdSendCID+0x44>
    if (count-- == 0U)
 80082b4:	f113 33ff 	adds.w	r3, r3, #4294967295
 80082b8:	d2f8      	bcs.n	80082ac <SDMMC_CmdSendCID+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80082ba:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80082be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082c2:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80082c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80082c6:	075b      	lsls	r3, r3, #29
 80082c8:	d505      	bpl.n	80082d6 <SDMMC_CmdSendCID+0x56>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80082ca:	2304      	movs	r3, #4
 80082cc:	6383      	str	r3, [r0, #56]	; 0x38
}
 80082ce:	f85d 4b04 	ldr.w	r4, [sp], #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80082d2:	4618      	mov	r0, r3
}
 80082d4:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80082d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 80082d8:	f85d 4b04 	ldr.w	r4, [sp], #4
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80082dc:	f013 0301 	ands.w	r3, r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80082e0:	bf15      	itete	ne
 80082e2:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80082e4:	4a05      	ldreq	r2, [pc, #20]	; (80082fc <SDMMC_CmdSendCID+0x7c>)
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80082e6:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80082e8:	6382      	streq	r2, [r0, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 80082ea:	4618      	mov	r0, r3
}
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop
 80082f0:	2000003c 	.word	0x2000003c
 80082f4:	fffee0c0 	.word	0xfffee0c0
 80082f8:	10624dd3 	.word	0x10624dd3
 80082fc:	002000c5 	.word	0x002000c5

08008300 <SDMMC_CmdSendCSD>:
{
 8008300:	b410      	push	{r4}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008302:	4b1a      	ldr	r3, [pc, #104]	; (800836c <SDMMC_CmdSendCSD+0x6c>)
  SDMMCx->ARG = Command->Argument;
 8008304:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8008306:	68c4      	ldr	r4, [r0, #12]
 8008308:	4a19      	ldr	r2, [pc, #100]	; (8008370 <SDMMC_CmdSendCSD+0x70>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800830a:	491a      	ldr	r1, [pc, #104]	; (8008374 <SDMMC_CmdSendCSD+0x74>)
 800830c:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800830e:	4022      	ands	r2, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008310:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8008314:	f442 5298 	orr.w	r2, r2, #4864	; 0x1300
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008318:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800831a:	f042 0209 	orr.w	r2, r2, #9
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800831e:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8008322:	60c2      	str	r2, [r0, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008324:	fb03 f301 	mul.w	r3, r3, r1
 8008328:	e003      	b.n	8008332 <SDMMC_CmdSendCSD+0x32>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800832a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800832c:	f012 0f45 	tst.w	r2, #69	; 0x45
 8008330:	d107      	bne.n	8008342 <SDMMC_CmdSendCSD+0x42>
    if (count-- == 0U)
 8008332:	f113 33ff 	adds.w	r3, r3, #4294967295
 8008336:	d2f8      	bcs.n	800832a <SDMMC_CmdSendCSD+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8008338:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800833c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008340:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008342:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008344:	075b      	lsls	r3, r3, #29
 8008346:	d505      	bpl.n	8008354 <SDMMC_CmdSendCSD+0x54>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008348:	2304      	movs	r3, #4
 800834a:	6383      	str	r3, [r0, #56]	; 0x38
}
 800834c:	f85d 4b04 	ldr.w	r4, [sp], #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008350:	4618      	mov	r0, r3
}
 8008352:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008354:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8008356:	f85d 4b04 	ldr.w	r4, [sp], #4
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800835a:	f013 0301 	ands.w	r3, r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800835e:	bf15      	itete	ne
 8008360:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008362:	4a05      	ldreq	r2, [pc, #20]	; (8008378 <SDMMC_CmdSendCSD+0x78>)
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008364:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008366:	6382      	streq	r2, [r0, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8008368:	4618      	mov	r0, r3
}
 800836a:	4770      	bx	lr
 800836c:	2000003c 	.word	0x2000003c
 8008370:	fffee0c0 	.word	0xfffee0c0
 8008374:	10624dd3 	.word	0x10624dd3
 8008378:	002000c5 	.word	0x002000c5

0800837c <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
 800837c:	2300      	movs	r3, #0
{
 800837e:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8008380:	6083      	str	r3, [r0, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008382:	4b24      	ldr	r3, [pc, #144]	; (8008414 <SDMMC_CmdSetRelAdd+0x98>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8008384:	68c5      	ldr	r5, [r0, #12]
 8008386:	4a24      	ldr	r2, [pc, #144]	; (8008418 <SDMMC_CmdSetRelAdd+0x9c>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008388:	4c24      	ldr	r4, [pc, #144]	; (800841c <SDMMC_CmdSetRelAdd+0xa0>)
 800838a:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800838c:	402a      	ands	r2, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800838e:	fba4 4303 	umull	r4, r3, r4, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8008392:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008396:	0a5c      	lsrs	r4, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8008398:	f042 0203 	orr.w	r2, r2, #3
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800839c:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 80083a0:	60c2      	str	r2, [r0, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80083a2:	fb03 f304 	mul.w	r3, r3, r4
 80083a6:	e003      	b.n	80083b0 <SDMMC_CmdSetRelAdd+0x34>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80083a8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80083aa:	f012 0f45 	tst.w	r2, #69	; 0x45
 80083ae:	d106      	bne.n	80083be <SDMMC_CmdSetRelAdd+0x42>
    if (count-- == 0U)
 80083b0:	f113 33ff 	adds.w	r3, r3, #4294967295
 80083b4:	d2f8      	bcs.n	80083a8 <SDMMC_CmdSetRelAdd+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80083b6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80083ba:	bc30      	pop	{r4, r5}
 80083bc:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80083be:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80083c0:	075d      	lsls	r5, r3, #29
 80083c2:	d504      	bpl.n	80083ce <SDMMC_CmdSetRelAdd+0x52>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80083c4:	2304      	movs	r3, #4
 80083c6:	6383      	str	r3, [r0, #56]	; 0x38
}
 80083c8:	bc30      	pop	{r4, r5}
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80083ca:	4618      	mov	r0, r3
}
 80083cc:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80083ce:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80083d0:	07dc      	lsls	r4, r3, #31
 80083d2:	d405      	bmi.n	80083e0 <SDMMC_CmdSetRelAdd+0x64>
  return (uint8_t)(SDMMCx->RESPCMD);
 80083d4:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	2b03      	cmp	r3, #3
 80083da:	d005      	beq.n	80083e8 <SDMMC_CmdSetRelAdd+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80083dc:	2001      	movs	r0, #1
 80083de:	e7ec      	b.n	80083ba <SDMMC_CmdSetRelAdd+0x3e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80083e0:	2301      	movs	r3, #1
 80083e2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80083e4:	4618      	mov	r0, r3
 80083e6:	e7e8      	b.n	80083ba <SDMMC_CmdSetRelAdd+0x3e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80083e8:	4b0d      	ldr	r3, [pc, #52]	; (8008420 <SDMMC_CmdSetRelAdd+0xa4>)
 80083ea:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 80083ec:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80083ee:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 80083f2:	d004      	beq.n	80083fe <SDMMC_CmdSetRelAdd+0x82>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80083f4:	045a      	lsls	r2, r3, #17
 80083f6:	d505      	bpl.n	8008404 <SDMMC_CmdSetRelAdd+0x88>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80083f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80083fc:	e7dd      	b.n	80083ba <SDMMC_CmdSetRelAdd+0x3e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 80083fe:	0c1b      	lsrs	r3, r3, #16
 8008400:	800b      	strh	r3, [r1, #0]
 8008402:	e7da      	b.n	80083ba <SDMMC_CmdSetRelAdd+0x3e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008404:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8008408:	bf14      	ite	ne
 800840a:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 800840e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8008412:	e7d2      	b.n	80083ba <SDMMC_CmdSetRelAdd+0x3e>
 8008414:	2000003c 	.word	0x2000003c
 8008418:	fffee0c0 	.word	0xfffee0c0
 800841c:	10624dd3 	.word	0x10624dd3
 8008420:	002000c5 	.word	0x002000c5

08008424 <SDMMC_CmdSwitch>:
{
 8008424:	b410      	push	{r4}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008426:	4b1d      	ldr	r3, [pc, #116]	; (800849c <SDMMC_CmdSwitch+0x78>)
  SDMMCx->ARG = Command->Argument;
 8008428:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800842a:	68c4      	ldr	r4, [r0, #12]
 800842c:	4a1c      	ldr	r2, [pc, #112]	; (80084a0 <SDMMC_CmdSwitch+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800842e:	491d      	ldr	r1, [pc, #116]	; (80084a4 <SDMMC_CmdSwitch+0x80>)
 8008430:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8008432:	4022      	ands	r2, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008434:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8008438:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800843c:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800843e:	f042 0206 	orr.w	r2, r2, #6
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008442:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8008446:	60c2      	str	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008448:	fb03 f301 	mul.w	r3, r3, r1
 800844c:	e003      	b.n	8008456 <SDMMC_CmdSwitch+0x32>
  }while(!__SDMMC_GET_FLAG(SDMMCx, flags));
 800844e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8008450:	f012 0f45 	tst.w	r2, #69	; 0x45
 8008454:	d107      	bne.n	8008466 <SDMMC_CmdSwitch+0x42>
    if (count-- == 0U)
 8008456:	f113 33ff 	adds.w	r3, r3, #4294967295
 800845a:	d2f8      	bcs.n	800844e <SDMMC_CmdSwitch+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800845c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8008460:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008464:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008466:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008468:	075a      	lsls	r2, r3, #29
 800846a:	d505      	bpl.n	8008478 <SDMMC_CmdSwitch+0x54>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800846c:	2304      	movs	r3, #4
 800846e:	6383      	str	r3, [r0, #56]	; 0x38
}
 8008470:	f85d 4b04 	ldr.w	r4, [sp], #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008474:	4618      	mov	r0, r3
}
 8008476:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008478:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800847a:	07db      	lsls	r3, r3, #31
 800847c:	d405      	bmi.n	800848a <SDMMC_CmdSwitch+0x66>
  return (uint8_t)(SDMMCx->RESPCMD);
 800847e:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008480:	b2db      	uxtb	r3, r3
 8008482:	2b06      	cmp	r3, #6
 8008484:	d005      	beq.n	8008492 <SDMMC_CmdSwitch+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008486:	2001      	movs	r0, #1
  return errorstate;
 8008488:	e7ea      	b.n	8008460 <SDMMC_CmdSwitch+0x3c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800848a:	2301      	movs	r3, #1
 800848c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800848e:	4618      	mov	r0, r3
 8008490:	e7e6      	b.n	8008460 <SDMMC_CmdSwitch+0x3c>
}
 8008492:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008496:	f7ff bc5b 	b.w	8007d50 <SDMMC_GetCmdResp1.part.2>
 800849a:	bf00      	nop
 800849c:	2000003c 	.word	0x2000003c
 80084a0:	fffee0c0 	.word	0xfffee0c0
 80084a4:	10624dd3 	.word	0x10624dd3

080084a8 <SDMMC_CmdVoltageSwitch>:
  SDMMCx->ARG = Command->Argument;
 80084a8:	2300      	movs	r3, #0
{
 80084aa:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 80084ac:	6083      	str	r3, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80084ae:	4b1c      	ldr	r3, [pc, #112]	; (8008520 <SDMMC_CmdVoltageSwitch+0x78>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 80084b0:	68c4      	ldr	r4, [r0, #12]
 80084b2:	4a1c      	ldr	r2, [pc, #112]	; (8008524 <SDMMC_CmdVoltageSwitch+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80084b4:	491c      	ldr	r1, [pc, #112]	; (8008528 <SDMMC_CmdVoltageSwitch+0x80>)
 80084b6:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 80084b8:	4022      	ands	r2, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80084ba:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 80084be:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80084c2:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 80084c4:	f042 020b 	orr.w	r2, r2, #11
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80084c8:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 80084cc:	60c2      	str	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80084ce:	fb03 f301 	mul.w	r3, r3, r1
 80084d2:	e003      	b.n	80084dc <SDMMC_CmdVoltageSwitch+0x34>
  }while(!__SDMMC_GET_FLAG(SDMMCx, flags));
 80084d4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80084d6:	f012 0f45 	tst.w	r2, #69	; 0x45
 80084da:	d107      	bne.n	80084ec <SDMMC_CmdVoltageSwitch+0x44>
    if (count-- == 0U)
 80084dc:	f113 33ff 	adds.w	r3, r3, #4294967295
 80084e0:	d2f8      	bcs.n	80084d4 <SDMMC_CmdVoltageSwitch+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80084e2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80084e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084ea:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80084ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80084ee:	075a      	lsls	r2, r3, #29
 80084f0:	d505      	bpl.n	80084fe <SDMMC_CmdVoltageSwitch+0x56>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80084f2:	2304      	movs	r3, #4
 80084f4:	6383      	str	r3, [r0, #56]	; 0x38
}
 80084f6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80084fa:	4618      	mov	r0, r3
}
 80084fc:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80084fe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008500:	07db      	lsls	r3, r3, #31
 8008502:	d405      	bmi.n	8008510 <SDMMC_CmdVoltageSwitch+0x68>
  return (uint8_t)(SDMMCx->RESPCMD);
 8008504:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008506:	b2db      	uxtb	r3, r3
 8008508:	2b0b      	cmp	r3, #11
 800850a:	d005      	beq.n	8008518 <SDMMC_CmdVoltageSwitch+0x70>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800850c:	2001      	movs	r0, #1
  return errorstate;
 800850e:	e7ea      	b.n	80084e6 <SDMMC_CmdVoltageSwitch+0x3e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008510:	2301      	movs	r3, #1
 8008512:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008514:	4618      	mov	r0, r3
 8008516:	e7e6      	b.n	80084e6 <SDMMC_CmdVoltageSwitch+0x3e>
}
 8008518:	f85d 4b04 	ldr.w	r4, [sp], #4
 800851c:	f7ff bc18 	b.w	8007d50 <SDMMC_GetCmdResp1.part.2>
 8008520:	2000003c 	.word	0x2000003c
 8008524:	fffee0c0 	.word	0xfffee0c0
 8008528:	10624dd3 	.word	0x10624dd3

0800852c <VL53L1_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 800852c:	b570      	push	{r4, r5, r6, lr}
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
		Status = VL53L1_data_init(Dev, 1);
 800852e:	2101      	movs	r1, #1
{
 8008530:	4604      	mov	r4, r0
		Status = VL53L1_data_init(Dev, 1);
 8008532:	f000 fc0f 	bl	8008d54 <VL53L1_data_init>

	if (Status == VL53L1_ERROR_NONE) {
 8008536:	4606      	mov	r6, r0
 8008538:	bb38      	cbnz	r0, 800858a <VL53L1_DataInit+0x5e>

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 800853a:	f8d4 1388 	ldr.w	r1, [r4, #904]	; 0x388
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 800853e:	2308      	movs	r3, #8
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8008540:	2501      	movs	r5, #1
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 8008542:	f884 337c 	strb.w	r3, [r4, #892]	; 0x37c
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8008546:	f3c1 318f 	ubfx	r1, r1, #14, #16
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 800854a:	f884 5378 	strb.w	r5, [r4, #888]	; 0x378
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 800854e:	4620      	mov	r0, r4
 8008550:	f000 fee8 	bl	8009324 <VL53L1_set_lite_sigma_threshold>
		break;
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 8008554:	f8d4 138c 	ldr.w	r1, [r4, #908]	; 0x38c

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
	}

	if (Status == VL53L1_ERROR_NONE)
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008558:	f884 5384 	strb.w	r5, [r4, #900]	; 0x384
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 800855c:	f3c1 214f 	ubfx	r1, r1, #9, #16
 8008560:	4620      	mov	r0, r4
 8008562:	f000 fee9 	bl	8009338 <VL53L1_set_lite_min_count_rate>

		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
				LimitCheckId,
				LimitChecksEnable);

		if (LimitChecksEnable == 0) {
 8008566:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800856a:	f884 5385 	strb.w	r5, [r4, #901]	; 0x385
		if (LimitChecksEnable == 0) {
 800856e:	b973      	cbnz	r3, 800858e <VL53L1_DataInit+0x62>
			/* disabled write only internal value */
			VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008570:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8008574:	f8c4 3388 	str.w	r3, [r4, #904]	; 0x388
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 8008578:	2120      	movs	r1, #32
 800857a:	4620      	mov	r0, r4
 800857c:	f000 fedc 	bl	8009338 <VL53L1_set_lite_min_count_rate>

			Status = SetLimitValue(Dev, LimitCheckId,
					LimitCheckValue);

			if (Status == VL53L1_ERROR_NONE) {
				VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008580:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008584:	f8c4 338c 	str.w	r3, [r4, #908]	; 0x38c
			Status = SetLimitValue(Dev, LimitCheckId,
 8008588:	2600      	movs	r6, #0
}
 800858a:	4630      	mov	r0, r6
 800858c:	bd70      	pop	{r4, r5, r6, pc}
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 800858e:	2148      	movs	r1, #72	; 0x48
 8008590:	4620      	mov	r0, r4
 8008592:	f000 fec7 	bl	8009324 <VL53L1_set_lite_sigma_threshold>
		if (LimitChecksEnable == 0) {
 8008596:	f894 3385 	ldrb.w	r3, [r4, #901]	; 0x385
				VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800859a:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800859e:	f8c4 2388 	str.w	r2, [r4, #904]	; 0x388
		if (LimitChecksEnable == 0) {
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1e8      	bne.n	8008578 <VL53L1_DataInit+0x4c>
			VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80085a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80085aa:	f8c4 338c 	str.w	r3, [r4, #908]	; 0x38c
}
 80085ae:	4630      	mov	r0, r6
 80085b0:	bd70      	pop	{r4, r5, r6, pc}
 80085b2:	bf00      	nop

080085b4 <VL53L1_WaitDeviceBooted>:
	Status = VL53L1_poll_for_boot_completion(Dev,
 80085b4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80085b8:	f003 bc36 	b.w	800be28 <VL53L1_poll_for_boot_completion>

080085bc <VL53L1_SetDistanceMode>:
{
 80085bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 80085c0:	1e4b      	subs	r3, r1, #1
 80085c2:	b2db      	uxtb	r3, r3
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 80085c4:	2b02      	cmp	r3, #2
{
 80085c6:	b08c      	sub	sp, #48	; 0x30
	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 80085c8:	f890 637c 	ldrb.w	r6, [r0, #892]	; 0x37c
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 80085cc:	f200 80e3 	bhi.w	8008796 <VL53L1_SetDistanceMode+0x1da>
		if ((DistanceMode == VL53L1_DISTANCEMODE_SHORT) ||
 80085d0:	bf18      	it	ne
 80085d2:	460f      	movne	r7, r1
 80085d4:	460d      	mov	r5, r1
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 80085d6:	a908      	add	r1, sp, #32
			InternalDistanceMode = VL53L1_DISTANCEMODE_LONG;
 80085d8:	bf08      	it	eq
 80085da:	2703      	moveq	r7, #3
 80085dc:	4604      	mov	r4, r0
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 80085de:	f000 fd73 	bl	80090c8 <VL53L1_get_user_zone>
	if (Status == VL53L1_ERROR_NONE)
 80085e2:	b110      	cbz	r0, 80085ea <VL53L1_SetDistanceMode+0x2e>
}
 80085e4:	b00c      	add	sp, #48	; 0x30
 80085e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 80085ea:	ab05      	add	r3, sp, #20
 80085ec:	aa06      	add	r2, sp, #24
 80085ee:	a907      	add	r1, sp, #28
 80085f0:	4620      	mov	r0, r4
	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 80085f2:	f8d4 8014 	ldr.w	r8, [r4, #20]
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 80085f6:	f000 fd07 	bl	8009008 <VL53L1_get_timeouts_us>
	if (Status == VL53L1_ERROR_NONE)
 80085fa:	2800      	cmp	r0, #0
 80085fc:	d1f2      	bne.n	80085e4 <VL53L1_SetDistanceMode+0x28>
	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 80085fe:	2e03      	cmp	r6, #3
	VL53L1_DevicePresetModes LightModes[3] = {
 8008600:	f04f 0102 	mov.w	r1, #2
	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8008604:	f000 808d 	beq.w	8008722 <VL53L1_SetDistanceMode+0x166>
 8008608:	2e08      	cmp	r6, #8
	VL53L1_DevicePresetModes LightModes[3] = {
 800860a:	f04f 0301 	mov.w	r3, #1
 800860e:	f04f 0203 	mov.w	r2, #3
	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8008612:	d02e      	beq.n	8008672 <VL53L1_SetDistanceMode+0xb6>
	VL53L1_DevicePresetModes LightModes[3] = {
 8008614:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8008618:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
	VL53L1_DevicePresetModes TimedModes[3] = {
 800861c:	2107      	movs	r1, #7
 800861e:	2206      	movs	r2, #6
 8008620:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008624:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
 8008628:	2108      	movs	r1, #8
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 800862a:	2224      	movs	r2, #36	; 0x24
	VL53L1_DevicePresetModes TimedModes[3] = {
 800862c:	f88d 102a 	strb.w	r1, [sp, #42]	; 0x2a
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8008630:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8008634:	2125      	movs	r1, #37	; 0x25
 8008636:	2226      	movs	r2, #38	; 0x26
	switch (DistanceMode) {
 8008638:	429f      	cmp	r7, r3
	VL53L1_DevicePresetModes LightModes[3] = {
 800863a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 800863e:	f88d 102d 	strb.w	r1, [sp, #45]	; 0x2d
 8008642:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
	switch (DistanceMode) {
 8008646:	f000 809e 	beq.w	8008786 <VL53L1_SetDistanceMode+0x1ca>
 800864a:	2f02      	cmp	r7, #2
 800864c:	f000 808a 	beq.w	8008764 <VL53L1_SetDistanceMode+0x1a8>
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8008650:	f04f 0920 	mov.w	r9, #32
 8008654:	2302      	movs	r3, #2
	switch (PresetMode) {
 8008656:	2e04      	cmp	r6, #4
 8008658:	f000 808b 	beq.w	8008772 <VL53L1_SetDistanceMode+0x1b6>
 800865c:	2e08      	cmp	r6, #8
 800865e:	f000 808d 	beq.w	800877c <VL53L1_SetDistanceMode+0x1c0>
 8008662:	2e03      	cmp	r6, #3
 8008664:	f000 8092 	beq.w	800878c <VL53L1_SetDistanceMode+0x1d0>
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8008668:	f06f 0007 	mvn.w	r0, #7
}
 800866c:	b00c      	add	sp, #48	; 0x30
 800866e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	VL53L1_DevicePresetModes LightModes[3] = {
 8008672:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	VL53L1_DevicePresetModes TimedModes[3] = {
 8008676:	2306      	movs	r3, #6
	VL53L1_DevicePresetModes LightModes[3] = {
 8008678:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800867c:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
	VL53L1_DevicePresetModes TimedModes[3] = {
 8008680:	2107      	movs	r1, #7
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8008682:	2224      	movs	r2, #36	; 0x24
 8008684:	f04f 0a25 	mov.w	sl, #37	; 0x25
	VL53L1_DevicePresetModes TimedModes[3] = {
 8008688:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
	switch (DistanceMode) {
 800868c:	2f01      	cmp	r7, #1
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 800868e:	f04f 0326 	mov.w	r3, #38	; 0x26
	VL53L1_DevicePresetModes TimedModes[3] = {
 8008692:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8008696:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 800869a:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 800869e:	f88d a02d 	strb.w	sl, [sp, #45]	; 0x2d
 80086a2:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	switch (DistanceMode) {
 80086a6:	d060      	beq.n	800876a <VL53L1_SetDistanceMode+0x1ae>
 80086a8:	2f02      	cmp	r7, #2
 80086aa:	d158      	bne.n	800875e <VL53L1_SetDistanceMode+0x1a2>
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 80086ac:	f04f 0940 	mov.w	r9, #64	; 0x40
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 80086b0:	aa0b      	add	r2, sp, #44	; 0x2c
 80086b2:	ab0a      	add	r3, sp, #40	; 0x28
 80086b4:	9201      	str	r2, [sp, #4]
 80086b6:	9300      	str	r3, [sp, #0]
 80086b8:	f10d 0212 	add.w	r2, sp, #18
 80086bc:	ab09      	add	r3, sp, #36	; 0x24
 80086be:	4651      	mov	r1, sl
 80086c0:	4620      	mov	r0, r4
 80086c2:	f000 fd13 	bl	80090ec <VL53L1_get_preset_mode_timing_cfg>
	if (Status == VL53L1_ERROR_NONE)
 80086c6:	2800      	cmp	r0, #0
 80086c8:	d18c      	bne.n	80085e4 <VL53L1_SetDistanceMode+0x28>
		Status = VL53L1_set_preset_mode(
 80086ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80086cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80086ce:	9101      	str	r1, [sp, #4]
 80086d0:	9000      	str	r0, [sp, #0]
 80086d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086d4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80086d8:	f8cd 8008 	str.w	r8, [sp, #8]
 80086dc:	4651      	mov	r1, sl
 80086de:	4620      	mov	r0, r4
 80086e0:	f000 fd58 	bl	8009194 <VL53L1_set_preset_mode>
	if (Status == VL53L1_ERROR_NONE)
 80086e4:	2800      	cmp	r0, #0
 80086e6:	f47f af7d 	bne.w	80085e4 <VL53L1_SetDistanceMode+0x28>
		VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 80086ea:	f884 9002 	strb.w	r9, [r4, #2]
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 80086ee:	f884 637c 	strb.w	r6, [r4, #892]	; 0x37c
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 80086f2:	f884 737e 	strb.w	r7, [r4, #894]	; 0x37e
		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 80086f6:	f884 737f 	strb.w	r7, [r4, #895]	; 0x37f
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 80086fa:	f884 537d 	strb.w	r5, [r4, #893]	; 0x37d
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 80086fe:	9b05      	ldr	r3, [sp, #20]
 8008700:	9a06      	ldr	r2, [sp, #24]
 8008702:	9907      	ldr	r1, [sp, #28]
 8008704:	4620      	mov	r0, r4
 8008706:	f000 fc59 	bl	8008fbc <VL53L1_set_timeouts_us>
		if (Status == VL53L1_ERROR_NONE)
 800870a:	2800      	cmp	r0, #0
 800870c:	f47f af6a 	bne.w	80085e4 <VL53L1_SetDistanceMode+0x28>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8008710:	9b05      	ldr	r3, [sp, #20]
 8008712:	6123      	str	r3, [r4, #16]
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 8008714:	a908      	add	r1, sp, #32
 8008716:	4620      	mov	r0, r4
 8008718:	f000 fcc4 	bl	80090a4 <VL53L1_set_user_zone>
}
 800871c:	b00c      	add	sp, #48	; 0x30
 800871e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	VL53L1_DevicePresetModes LightModes[3] = {
 8008722:	2201      	movs	r2, #1
	VL53L1_DevicePresetModes TimedModes[3] = {
 8008724:	2307      	movs	r3, #7
	VL53L1_DevicePresetModes LightModes[3] = {
 8008726:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
	VL53L1_DevicePresetModes TimedModes[3] = {
 800872a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800872e:	2208      	movs	r2, #8
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8008730:	2324      	movs	r3, #36	; 0x24
	VL53L1_DevicePresetModes TimedModes[3] = {
 8008732:	f04f 0a06 	mov.w	sl, #6
 8008736:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 800873a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800873e:	2225      	movs	r2, #37	; 0x25
 8008740:	2326      	movs	r3, #38	; 0x26
	switch (DistanceMode) {
 8008742:	2f01      	cmp	r7, #1
	VL53L1_DevicePresetModes LightModes[3] = {
 8008744:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
 8008748:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
	VL53L1_DevicePresetModes TimedModes[3] = {
 800874c:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8008750:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
 8008754:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	switch (DistanceMode) {
 8008758:	d007      	beq.n	800876a <VL53L1_SetDistanceMode+0x1ae>
 800875a:	428f      	cmp	r7, r1
 800875c:	d0a6      	beq.n	80086ac <VL53L1_SetDistanceMode+0xf0>
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 800875e:	f04f 0940 	mov.w	r9, #64	; 0x40
 8008762:	e777      	b.n	8008654 <VL53L1_SetDistanceMode+0x98>
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8008764:	f04f 0920 	mov.w	r9, #32
 8008768:	e775      	b.n	8008656 <VL53L1_SetDistanceMode+0x9a>
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 800876a:	f04f 0940 	mov.w	r9, #64	; 0x40
 800876e:	2300      	movs	r3, #0
 8008770:	e771      	b.n	8008656 <VL53L1_SetDistanceMode+0x9a>
		*pDevicePresetMode = LightModes[DistIdx];
 8008772:	aa0c      	add	r2, sp, #48	; 0x30
 8008774:	4413      	add	r3, r2
 8008776:	f813 ac0c 	ldrb.w	sl, [r3, #-12]
 800877a:	e799      	b.n	80086b0 <VL53L1_SetDistanceMode+0xf4>
 800877c:	aa0c      	add	r2, sp, #48	; 0x30
 800877e:	4413      	add	r3, r2
 8008780:	f813 ac04 	ldrb.w	sl, [r3, #-4]
 8008784:	e794      	b.n	80086b0 <VL53L1_SetDistanceMode+0xf4>
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8008786:	f04f 0920 	mov.w	r9, #32
 800878a:	e7f0      	b.n	800876e <VL53L1_SetDistanceMode+0x1b2>
 800878c:	aa0c      	add	r2, sp, #48	; 0x30
 800878e:	4413      	add	r3, r2
 8008790:	f813 ac08 	ldrb.w	sl, [r3, #-8]
 8008794:	e78c      	b.n	80086b0 <VL53L1_SetDistanceMode+0xf4>
		return VL53L1_ERROR_INVALID_PARAMS;
 8008796:	f06f 0003 	mvn.w	r0, #3
 800879a:	e723      	b.n	80085e4 <VL53L1_SetDistanceMode+0x28>

0800879c <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 800879c:	4b3e      	ldr	r3, [pc, #248]	; (8008898 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>)
 800879e:	4299      	cmp	r1, r3
 80087a0:	d902      	bls.n	80087a8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xc>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80087a2:	f06f 0003 	mvn.w	r0, #3
}
 80087a6:	4770      	bx	lr
{
 80087a8:	b530      	push	{r4, r5, lr}
 80087aa:	b087      	sub	sp, #28
 80087ac:	460d      	mov	r5, r1
{
	VL53L1_Error Status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 80087ae:	f10d 0206 	add.w	r2, sp, #6
 80087b2:	2105      	movs	r1, #5
 80087b4:	4604      	mov	r4, r0
 80087b6:	f000 fc5f 	bl	8009078 <VL53L1_get_sequence_config_bit>
	if (Status == VL53L1_ERROR_NONE) {
 80087ba:	b9c0      	cbnz	r0, 80087ee <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
	Status = VL53L1_get_sequence_config_bit(Dev,
 80087bc:	f10d 0207 	add.w	r2, sp, #7
 80087c0:	2106      	movs	r1, #6
 80087c2:	4620      	mov	r0, r4
 80087c4:	f000 fc58 	bl	8009078 <VL53L1_get_sequence_config_bit>
	if (Status == VL53L1_ERROR_NONE)
 80087c8:	b988      	cbnz	r0, 80087ee <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_get_timeouts_us(Dev,
 80087ca:	ab02      	add	r3, sp, #8
 80087cc:	aa03      	add	r2, sp, #12
 80087ce:	a904      	add	r1, sp, #16
 80087d0:	4620      	mov	r0, r4
 80087d2:	f000 fc19 	bl	8009008 <VL53L1_get_timeouts_us>
	if (Status == VL53L1_ERROR_NONE) {
 80087d6:	b950      	cbnz	r0, 80087ee <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		switch (PresetMode) {
 80087d8:	f894 337c 	ldrb.w	r3, [r4, #892]	; 0x37c
 80087dc:	2b04      	cmp	r3, #4
 80087de:	d032      	beq.n	8008846 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xaa>
 80087e0:	2b08      	cmp	r3, #8
 80087e2:	d01e      	beq.n	8008822 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x86>
 80087e4:	2b03      	cmp	r3, #3
 80087e6:	d004      	beq.n	80087f2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x56>
		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 80087e8:	b1bd      	cbz	r5, 800881a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7e>
 80087ea:	f06f 0007 	mvn.w	r0, #7
}
 80087ee:	b007      	add	sp, #28
 80087f0:	bd30      	pop	{r4, r5, pc}
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80087f2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d045      	beq.n	8008886 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xea>
 80087fa:	f89d 0007 	ldrb.w	r0, [sp, #7]
			FDAMaxTimingBudgetUs *= 2;
 80087fe:	4927      	ldr	r1, [pc, #156]	; (800889c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x100>)
 8008800:	f246 73e8 	movw	r3, #26600	; 0x67e8
 8008804:	f245 4260 	movw	r2, #21600	; 0x5460
 8008808:	2801      	cmp	r0, #1
 800880a:	bf08      	it	eq
 800880c:	461a      	moveq	r2, r3
 800880e:	2302      	movs	r3, #2
		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8008810:	4295      	cmp	r5, r2
 8008812:	d902      	bls.n	800881a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7e>
					- TimingGuard);
 8008814:	1aaa      	subs	r2, r5, r2
			if (TimingBudget > FDAMaxTimingBudgetUs)
 8008816:	428a      	cmp	r2, r1
 8008818:	d925      	bls.n	8008866 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xca>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800881a:	f06f 0003 	mvn.w	r0, #3
}
 800881e:	b007      	add	sp, #28
 8008820:	bd30      	pop	{r4, r5, pc}
			VL53L1_get_tuning_parm(Dev,
 8008822:	aa05      	add	r2, sp, #20
 8008824:	f248 0136 	movw	r1, #32822	; 0x8036
 8008828:	4620      	mov	r0, r4
 800882a:	f001 f8a5 	bl	8009978 <VL53L1_get_tuning_parm>
			if (vhv_loops > 0) {
 800882e:	9b05      	ldr	r3, [sp, #20]
			FDAMaxTimingBudgetUs *= 2;
 8008830:	491a      	ldr	r1, [pc, #104]	; (800889c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x100>)
			if (vhv_loops > 0) {
 8008832:	2b00      	cmp	r3, #0
				vhv += vhv_loops *
 8008834:	bfc3      	ittte	gt
 8008836:	22f5      	movgt	r2, #245	; 0xf5
 8008838:	435a      	mulgt	r2, r3
 800883a:	f602 62d1 	addwgt	r2, r2, #3793	; 0xed1
 800883e:	f640 62d1 	movwle	r2, #3793	; 0xed1
			divisor = 2;
 8008842:	2302      	movs	r3, #2
		break;
 8008844:	e7e4      	b.n	8008810 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x74>
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8008846:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800884a:	2b01      	cmp	r3, #1
 800884c:	d020      	beq.n	8008890 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf4>
 800884e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8008852:	4913      	ldr	r1, [pc, #76]	; (80088a0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x104>)
 8008854:	2b01      	cmp	r3, #1
 8008856:	f241 3288 	movw	r2, #5000	; 0x1388
 800885a:	f04f 0301 	mov.w	r3, #1
 800885e:	bf18      	it	ne
 8008860:	f44f 727a 	movne.w	r2, #1000	; 0x3e8
 8008864:	e7d4      	b.n	8008810 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x74>
				TimingBudget /= divisor;
 8008866:	fbb2 f3f3 	udiv	r3, r2, r3
				Status = VL53L1_set_timeouts_us(
 800886a:	9904      	ldr	r1, [sp, #16]
 800886c:	9a03      	ldr	r2, [sp, #12]
				TimingBudget /= divisor;
 800886e:	9302      	str	r3, [sp, #8]
				Status = VL53L1_set_timeouts_us(
 8008870:	4620      	mov	r0, r4
 8008872:	f000 fba3 	bl	8008fbc <VL53L1_set_timeouts_us>
			if (Status == VL53L1_ERROR_NONE)
 8008876:	2800      	cmp	r0, #0
 8008878:	d1b9      	bne.n	80087ee <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
				VL53L1DevDataSet(Dev,
 800887a:	9b02      	ldr	r3, [sp, #8]
		VL53L1DevDataSet(Dev,
 800887c:	f8c4 5380 	str.w	r5, [r4, #896]	; 0x380
				VL53L1DevDataSet(Dev,
 8008880:	6123      	str	r3, [r4, #16]
}
 8008882:	b007      	add	sp, #28
 8008884:	bd30      	pop	{r4, r5, pc}
			FDAMaxTimingBudgetUs *= 2;
 8008886:	4905      	ldr	r1, [pc, #20]	; (800889c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x100>)
			divisor = 2;
 8008888:	2302      	movs	r3, #2
				TimingGuard = 26600;
 800888a:	f246 72e8 	movw	r2, #26600	; 0x67e8
 800888e:	e7bf      	b.n	8008810 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x74>
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8008890:	4903      	ldr	r1, [pc, #12]	; (80088a0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x104>)
				TimingGuard = 5000;
 8008892:	f241 3288 	movw	r2, #5000	; 0x1388
 8008896:	e7bb      	b.n	8008810 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x74>
 8008898:	00989680 	.word	0x00989680
 800889c:	0010c8e0 	.word	0x0010c8e0
 80088a0:	00086470 	.word	0x00086470

080088a4 <VL53L1_StaticInit>:
{
 80088a4:	b530      	push	{r4, r5, lr}
 80088a6:	b089      	sub	sp, #36	; 0x24
	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 80088a8:	2503      	movs	r5, #3
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 80088aa:	2120      	movs	r1, #32
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 80088ac:	aa07      	add	r2, sp, #28
 80088ae:	ab06      	add	r3, sp, #24
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 80088b0:	7081      	strb	r1, [r0, #2]
	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 80088b2:	f880 5378 	strb.w	r5, [r0, #888]	; 0x378
	VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 80088b6:	f880 537f 	strb.w	r5, [r0, #895]	; 0x37f
	VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 80088ba:	f880 537e 	strb.w	r5, [r0, #894]	; 0x37e
	VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 80088be:	f880 537d 	strb.w	r5, [r0, #893]	; 0x37d
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 80088c2:	2126      	movs	r1, #38	; 0x26
 80088c4:	9201      	str	r2, [sp, #4]
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	f10d 0212 	add.w	r2, sp, #18
 80088cc:	ab05      	add	r3, sp, #20
{
 80088ce:	4604      	mov	r4, r0
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 80088d0:	f000 fc0c 	bl	80090ec <VL53L1_get_preset_mode_timing_cfg>
	if (Status == VL53L1_ERROR_NONE)
 80088d4:	b108      	cbz	r0, 80088da <VL53L1_StaticInit+0x36>
}
 80088d6:	b009      	add	sp, #36	; 0x24
 80088d8:	bd30      	pop	{r4, r5, pc}
		Status = VL53L1_set_preset_mode(
 80088da:	9807      	ldr	r0, [sp, #28]
 80088dc:	9906      	ldr	r1, [sp, #24]
 80088de:	9001      	str	r0, [sp, #4]
 80088e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80088e4:	9002      	str	r0, [sp, #8]
 80088e6:	9100      	str	r1, [sp, #0]
 80088e8:	9b05      	ldr	r3, [sp, #20]
 80088ea:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80088ee:	2126      	movs	r1, #38	; 0x26
 80088f0:	4620      	mov	r0, r4
 80088f2:	f000 fc4f 	bl	8009194 <VL53L1_set_preset_mode>
	if (Status == VL53L1_ERROR_NONE)
 80088f6:	2800      	cmp	r0, #0
 80088f8:	d1ed      	bne.n	80088d6 <VL53L1_StaticInit+0x32>
		VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 80088fa:	2240      	movs	r2, #64	; 0x40
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 80088fc:	2308      	movs	r3, #8
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 80088fe:	f884 537e 	strb.w	r5, [r4, #894]	; 0x37e
		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 8008902:	f884 537f 	strb.w	r5, [r4, #895]	; 0x37f
		VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8008906:	70a2      	strb	r2, [r4, #2]
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8008908:	f884 337c 	strb.w	r3, [r4, #892]	; 0x37c
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 800890c:	f24a 0128 	movw	r1, #41000	; 0xa028
 8008910:	4620      	mov	r0, r4
 8008912:	f7ff ff43 	bl	800879c <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
	if (Status == VL53L1_ERROR_NONE) {
 8008916:	2800      	cmp	r0, #0
 8008918:	d1dd      	bne.n	80088d6 <VL53L1_StaticInit+0x32>
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 800891a:	4620      	mov	r0, r4
 800891c:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8008920:	f000 fb30 	bl	8008f84 <VL53L1_set_inter_measurement_period_ms>
}
 8008924:	b009      	add	sp, #36	; 0x24
 8008926:	bd30      	pop	{r4, r5, pc}

08008928 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:
{
 8008928:	b570      	push	{r4, r5, r6, lr}
	uint8_t Mm1Enabled = 0;
 800892a:	2300      	movs	r3, #0
{
 800892c:	b086      	sub	sp, #24
	*pMeasurementTimingBudgetMicroSeconds = 0;
 800892e:	600b      	str	r3, [r1, #0]
{
 8008930:	460d      	mov	r5, r1
	Status = VL53L1_get_sequence_config_bit(Dev,
 8008932:	f10d 0206 	add.w	r2, sp, #6
 8008936:	2105      	movs	r1, #5
	uint8_t Mm1Enabled = 0;
 8008938:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t Mm2Enabled = 0;
 800893c:	f88d 3007 	strb.w	r3, [sp, #7]
	uint32_t  MmTimeoutUs = 0;
 8008940:	9302      	str	r3, [sp, #8]
	uint32_t  RangeTimeoutUs = 0;
 8008942:	9303      	str	r3, [sp, #12]
	uint32_t PhaseCalTimeoutUs = 0;
 8008944:	9304      	str	r3, [sp, #16]
{
 8008946:	4606      	mov	r6, r0
	Status = VL53L1_get_sequence_config_bit(Dev,
 8008948:	f000 fb96 	bl	8009078 <VL53L1_get_sequence_config_bit>
	if (Status == VL53L1_ERROR_NONE)
 800894c:	4604      	mov	r4, r0
 800894e:	b110      	cbz	r0, 8008956 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x2e>
}
 8008950:	4620      	mov	r0, r4
 8008952:	b006      	add	sp, #24
 8008954:	bd70      	pop	{r4, r5, r6, pc}
	Status = VL53L1_get_sequence_config_bit(Dev,
 8008956:	f10d 0207 	add.w	r2, sp, #7
 800895a:	2106      	movs	r1, #6
 800895c:	4630      	mov	r0, r6
 800895e:	f000 fb8b 	bl	8009078 <VL53L1_get_sequence_config_bit>
	if (Status == VL53L1_ERROR_NONE)
 8008962:	4604      	mov	r4, r0
 8008964:	2800      	cmp	r0, #0
 8008966:	d1f3      	bne.n	8008950 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x28>
		Status = VL53L1_get_timeouts_us(Dev,
 8008968:	ab03      	add	r3, sp, #12
 800896a:	aa02      	add	r2, sp, #8
 800896c:	a904      	add	r1, sp, #16
 800896e:	4630      	mov	r0, r6
 8008970:	f000 fb4a 	bl	8009008 <VL53L1_get_timeouts_us>
	if (Status == VL53L1_ERROR_NONE) {
 8008974:	4604      	mov	r4, r0
 8008976:	2800      	cmp	r0, #0
 8008978:	d1ea      	bne.n	8008950 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x28>
		switch (PresetMode) {
 800897a:	f896 337c 	ldrb.w	r3, [r6, #892]	; 0x37c
 800897e:	2b04      	cmp	r3, #4
 8008980:	d02c      	beq.n	80089dc <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xb4>
 8008982:	2b08      	cmp	r3, #8
 8008984:	d017      	beq.n	80089b6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x8e>
 8008986:	2b03      	cmp	r3, #3
 8008988:	d004      	beq.n	8008994 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x6c>
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800898a:	f06f 0407 	mvn.w	r4, #7
}
 800898e:	4620      	mov	r0, r4
 8008990:	b006      	add	sp, #24
 8008992:	bd70      	pop	{r4, r5, r6, pc}
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8008994:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d02b      	beq.n	80089f4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xcc>
 800899c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d027      	beq.n	80089f4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xcc>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 80089a4:	9b03      	ldr	r3, [sp, #12]
 80089a6:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 80089aa:	3330      	adds	r3, #48	; 0x30
 80089ac:	005b      	lsls	r3, r3, #1
}
 80089ae:	4620      	mov	r0, r4
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 80089b0:	602b      	str	r3, [r5, #0]
}
 80089b2:	b006      	add	sp, #24
 80089b4:	bd70      	pop	{r4, r5, r6, pc}
			VL53L1_get_tuning_parm(Dev,
 80089b6:	aa05      	add	r2, sp, #20
 80089b8:	4630      	mov	r0, r6
 80089ba:	f248 0136 	movw	r1, #32822	; 0x8036
 80089be:	f000 ffdb 	bl	8009978 <VL53L1_get_tuning_parm>
			if (vhv_loops > 0) {
 80089c2:	9a05      	ldr	r2, [sp, #20]
				vhv += vhv_loops *
 80089c4:	23f5      	movs	r3, #245	; 0xf5
			if (vhv_loops > 0) {
 80089c6:	2a00      	cmp	r2, #0
				vhv += vhv_loops *
 80089c8:	bfc8      	it	gt
 80089ca:	4353      	mulgt	r3, r2
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 80089cc:	9a03      	ldr	r2, [sp, #12]
				vhv += vhv_loops *
 80089ce:	bfc8      	it	gt
 80089d0:	33f5      	addgt	r3, #245	; 0xf5
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 80089d2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80089d6:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
		break;
 80089da:	e7e8      	b.n	80089ae <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80089dc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d00d      	beq.n	8008a00 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xd8>
 80089e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d009      	beq.n	8008a00 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xd8>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 80089ec:	9b03      	ldr	r3, [sp, #12]
 80089ee:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80089f2:	e7dc      	b.n	80089ae <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 80089f4:	9b03      	ldr	r3, [sp, #12]
 80089f6:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 80089fa:	3334      	adds	r3, #52	; 0x34
 80089fc:	005b      	lsls	r3, r3, #1
 80089fe:	e7d6      	b.n	80089ae <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8008a00:	9b03      	ldr	r3, [sp, #12]
 8008a02:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8008a06:	3308      	adds	r3, #8
 8008a08:	e7d1      	b.n	80089ae <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
 8008a0a:	bf00      	nop

08008a0c <VL53L1_SetInterMeasurementPeriodMilliSeconds>:
	adjustedIMP += (adjustedIMP * 64) / 1000;
 8008a0c:	4a03      	ldr	r2, [pc, #12]	; (8008a1c <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x10>)
 8008a0e:	018b      	lsls	r3, r1, #6
 8008a10:	fba2 2303 	umull	r2, r3, r2, r3
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8008a14:	eb01 1193 	add.w	r1, r1, r3, lsr #6
 8008a18:	f000 bab4 	b.w	8008f84 <VL53L1_set_inter_measurement_period_ms>
 8008a1c:	10624dd3 	.word	0x10624dd3

08008a20 <VL53L1_StartMeasurement>:
	uint32_t MTBus, IMPms;

	LOG_FUNCTION_START("");

	CurrPalState = VL53L1DevDataGet(Dev, PalState);
	switch (CurrPalState) {
 8008a20:	f890 3378 	ldrb.w	r3, [r0, #888]	; 0x378
 8008a24:	2b05      	cmp	r3, #5
 8008a26:	d814      	bhi.n	8008a52 <VL53L1_StartMeasurement+0x32>
 8008a28:	2b04      	cmp	r3, #4
 8008a2a:	d215      	bcs.n	8008a58 <VL53L1_StartMeasurement+0x38>
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	d913      	bls.n	8008a58 <VL53L1_StartMeasurement+0x38>
{
 8008a30:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		Status = VL53L1_ERROR_UNDEFINED;
	}

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8008a32:	7885      	ldrb	r5, [r0, #2]

	/* Check timing configuration between timing budget and
	* inter measurement period */
	if ((Status == VL53L1_ERROR_NONE) &&
 8008a34:	2d40      	cmp	r5, #64	; 0x40
{
 8008a36:	b082      	sub	sp, #8
 8008a38:	4604      	mov	r4, r0
	if ((Status == VL53L1_ERROR_NONE) &&
 8008a3a:	d013      	beq.n	8008a64 <VL53L1_StartMeasurement+0x44>
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
			Status = VL53L1_ERROR_INVALID_PARAMS;
	}

	if (Status == VL53L1_ERROR_NONE)
		Status = VL53L1_init_and_start_range(
 8008a3c:	4629      	mov	r1, r5
 8008a3e:	2206      	movs	r2, #6
 8008a40:	4620      	mov	r0, r4
 8008a42:	f000 fc7d 	bl	8009340 <VL53L1_init_and_start_range>
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 8008a46:	b910      	cbnz	r0, 8008a4e <VL53L1_StartMeasurement+0x2e>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 8008a48:	2304      	movs	r3, #4
 8008a4a:	f884 3378 	strb.w	r3, [r4, #888]	; 0x378


	LOG_FUNCTION_END(Status);
	return Status;
}
 8008a4e:	b002      	add	sp, #8
 8008a50:	bd70      	pop	{r4, r5, r6, pc}
	switch (CurrPalState) {
 8008a52:	3b62      	subs	r3, #98	; 0x62
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d802      	bhi.n	8008a5e <VL53L1_StartMeasurement+0x3e>
		Status = VL53L1_ERROR_INVALID_COMMAND;
 8008a58:	f06f 000d 	mvn.w	r0, #13
 8008a5c:	4770      	bx	lr
		Status = VL53L1_ERROR_UNDEFINED;
 8008a5e:	f06f 0002 	mvn.w	r0, #2
 8008a62:	4770      	bx	lr
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8008a64:	4669      	mov	r1, sp
 8008a66:	f7ff ff5f 	bl	8008928 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
		MTBus /= 1000;
 8008a6a:	4e0b      	ldr	r6, [pc, #44]	; (8008a98 <VL53L1_StartMeasurement+0x78>)
 8008a6c:	9b00      	ldr	r3, [sp, #0]
 8008a6e:	fba6 2303 	umull	r2, r3, r6, r3
 8008a72:	099b      	lsrs	r3, r3, #6
	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 8008a74:	a901      	add	r1, sp, #4
 8008a76:	4620      	mov	r0, r4
		MTBus /= 1000;
 8008a78:	9300      	str	r3, [sp, #0]
	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 8008a7a:	f000 fa91 	bl	8008fa0 <VL53L1_get_inter_measurement_period_ms>
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 8008a7e:	e89d 000c 	ldmia.w	sp, {r2, r3}
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 8008a82:	0199      	lsls	r1, r3, #6
 8008a84:	fba6 0101 	umull	r0, r1, r6, r1
 8008a88:	eba3 1391 	sub.w	r3, r3, r1, lsr #6
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 8008a8c:	3204      	adds	r2, #4
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d9d4      	bls.n	8008a3c <VL53L1_StartMeasurement+0x1c>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8008a92:	f06f 0003 	mvn.w	r0, #3
	return Status;
 8008a96:	e7da      	b.n	8008a4e <VL53L1_StartMeasurement+0x2e>
 8008a98:	10624dd3 	.word	0x10624dd3

08008a9c <VL53L1_StopMeasurement>:

VL53L1_Error VL53L1_StopMeasurement(VL53L1_DEV Dev)
{
 8008a9c:	b510      	push	{r4, lr}
 8008a9e:	4604      	mov	r4, r0
	VL53L1_Error Status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	Status = VL53L1_stop_range(Dev);
 8008aa0:	f000 fd40 	bl	8009524 <VL53L1_stop_range>

	/* Set PAL State to Idle */
	if (Status == VL53L1_ERROR_NONE)
 8008aa4:	b910      	cbnz	r0, 8008aac <VL53L1_StopMeasurement+0x10>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8008aa6:	2303      	movs	r3, #3
 8008aa8:	f884 3378 	strb.w	r3, [r4, #888]	; 0x378

	LOG_FUNCTION_END(Status);
	return Status;
}
 8008aac:	bd10      	pop	{r4, pc}
 8008aae:	bf00      	nop

08008ab0 <VL53L1_ClearInterruptAndStartMeasurement>:
//		Status = ChangePresetMode(Dev);
//	else
//		Status = VL53L1_clear_interrupt_and_enable_next_range(
//						Dev,
//						DeviceMeasurementMode);
	Status = VL53L1_clear_interrupt_and_enable_next_range(
 8008ab0:	7881      	ldrb	r1, [r0, #2]
 8008ab2:	f000 bd5b 	b.w	800956c <VL53L1_clear_interrupt_and_enable_next_range>
 8008ab6:	bf00      	nop

08008ab8 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 8008ab8:	b5f0      	push	{r4, r5, r6, r7, lr}

	//LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 8008aba:	f04f 33ff 	mov.w	r3, #4294967295
{
 8008abe:	b0a3      	sub	sp, #140	; 0x8c
 8008ac0:	460c      	mov	r4, r1
	memset(pRangingMeasurementData, 0xFF,
 8008ac2:	600b      	str	r3, [r1, #0]
 8008ac4:	604b      	str	r3, [r1, #4]
 8008ac6:	608b      	str	r3, [r1, #8]
 8008ac8:	60cb      	str	r3, [r1, #12]
 8008aca:	610b      	str	r3, [r1, #16]
 8008acc:	614b      	str	r3, [r1, #20]
 8008ace:	618b      	str	r3, [r1, #24]
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 8008ad0:	aa01      	add	r2, sp, #4
 8008ad2:	2102      	movs	r1, #2
{
 8008ad4:	4605      	mov	r5, r0
	Status = VL53L1_get_device_results(
 8008ad6:	f000 feb1 	bl	800983c <VL53L1_get_device_results>
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 8008ada:	b108      	cbz	r0, 8008ae0 <VL53L1_GetRangingMeasurementData+0x28>
				pRangingMeasurementData);
	}

	//LOG_FUNCTION_END(Status);
	return Status;
}
 8008adc:	b023      	add	sp, #140	; 0x8c
 8008ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8008ae0:	f89d 6046 	ldrb.w	r6, [sp, #70]	; 0x46
		pRangingMeasurementData->StreamCount = presults->stream_count;
 8008ae4:	f89d 2006 	ldrb.w	r2, [sp, #6]
	pRangeData->TimeStamp = presults_data->time_stamp;
 8008ae8:	9b03      	ldr	r3, [sp, #12]
		pRangingMeasurementData->StreamCount = presults->stream_count;
 8008aea:	7122      	strb	r2, [r4, #4]
	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8008aec:	f006 061f 	and.w	r6, r6, #31
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 8008af0:	2e07      	cmp	r6, #7
	pRangeData->TimeStamp = presults_data->time_stamp;
 8008af2:	6023      	str	r3, [r4, #0]
		Status = SetSimpleData(Dev, 1,
 8008af4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8008af8:	f9bd 7044 	ldrsh.w	r7, [sp, #68]	; 0x44
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 8008afc:	f000 8094 	beq.w	8008c28 <VL53L1_GetRangingMeasurementData+0x170>
		if (presults_data->median_range_mm < SRL)
 8008b00:	f5b7 7f96 	cmp.w	r7, #300	; 0x12c
 8008b04:	f2c0 8082 	blt.w	8008c0c <VL53L1_GetRangingMeasurementData+0x154>
			RAS = LRAP * presults_data->median_range_mm;
 8008b08:	f641 129a 	movw	r2, #6554	; 0x199a
 8008b0c:	fb17 fe02 	smulbb	lr, r7, r2
 8008b10:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
			partial = (GGm * presults_data->sigma_mm);
 8008b14:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8008b18:	4a56      	ldr	r2, [pc, #344]	; (8008c74 <VL53L1_GetRangingMeasurementData+0x1bc>)
			if (partial <= GI)
 8008b1a:	4857      	ldr	r0, [pc, #348]	; (8008c78 <VL53L1_GetRangingMeasurementData+0x1c0>)
			partial = partial + (RAS >> 1);
 8008b1c:	fb02 c203 	mla	r2, r2, r3, ip
			partial = partial / RAS;
 8008b20:	fbb2 f2fe 	udiv	r2, r2, lr
			partial = partial * 65536;
 8008b24:	0412      	lsls	r2, r2, #16
			if (partial <= GI)
 8008b26:	4282      	cmp	r2, r0
 8008b28:	d806      	bhi.n	8008b38 <VL53L1_GetRangingMeasurementData+0x80>
				SRQL = GI - partial;
 8008b2a:	1a82      	subs	r2, r0, r2
		finalvalue = (uint8_t)(SRQL >> 16);
 8008b2c:	0c12      	lsrs	r2, r2, #16
		returnvalue = MAX(50, MIN(100, finalvalue));
 8008b2e:	2a32      	cmp	r2, #50	; 0x32
		finalvalue = (uint8_t)(SRQL >> 16);
 8008b30:	fa5f fe82 	uxtb.w	lr, r2
		returnvalue = MAX(50, MIN(100, finalvalue));
 8008b34:	f200 8097 	bhi.w	8008c66 <VL53L1_GetRangingMeasurementData+0x1ae>
 8008b38:	f04f 0e32 	mov.w	lr, #50	; 0x32
	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8008b3c:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8008b40:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8008b44:	8327      	strh	r7, [r4, #24]
	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8008b46:	0240      	lsls	r0, r0, #9
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8008b48:	025b      	lsls	r3, r3, #9
	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8008b4a:	0252      	lsls	r2, r2, #9
	pRangeData->EffectiveSpadRtnCount =
 8008b4c:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8008b50:	60e0      	str	r0, [r4, #12]
	switch (device_status) {
 8008b52:	3901      	subs	r1, #1
	pRangeData->RangeFractionalPart = 0;
 8008b54:	2000      	movs	r0, #0
	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 8008b56:	f884 e005 	strb.w	lr, [r4, #5]
	pRangeData->SigmaMilliMeter = TempFix1616;
 8008b5a:	6163      	str	r3, [r4, #20]
		= SignalRate;
 8008b5c:	60a2      	str	r2, [r4, #8]
	pRangeData->EffectiveSpadRtnCount =
 8008b5e:	8227      	strh	r7, [r4, #16]
	pRangeData->RangeFractionalPart = 0;
 8008b60:	76a0      	strb	r0, [r4, #26]
	switch (device_status) {
 8008b62:	2910      	cmp	r1, #16
 8008b64:	d857      	bhi.n	8008c16 <VL53L1_GetRangingMeasurementData+0x15e>
 8008b66:	e8df f001 	tbb	[pc, r1]
 8008b6a:	4e4e      	.short	0x4e4e
 8008b6c:	5656564e 	.word	0x5656564e
 8008b70:	56565656 	.word	0x56565656
 8008b74:	56095656 	.word	0x56095656
 8008b78:	5656      	.short	0x5656
 8008b7a:	4e          	.byte	0x4e
 8008b7b:	00          	.byte	0x00
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 8008b7c:	210d      	movs	r1, #13
 8008b7e:	76e1      	strb	r1, [r4, #27]
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008b80:	f8c5 3390 	str.w	r3, [r5, #912]	; 0x390
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008b84:	f8c5 2394 	str.w	r2, [r5, #916]	; 0x394
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 8008b88:	f10d 0102 	add.w	r1, sp, #2
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	f000 fbc3 	bl	8009318 <VL53L1_get_lite_sigma_threshold>
	if (Status == VL53L1_ERROR_NONE) {
 8008b92:	2800      	cmp	r0, #0
 8008b94:	d15a      	bne.n	8008c4c <VL53L1_GetRangingMeasurementData+0x194>
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 8008b96:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		if (TempFix1616 == 0) {
 8008b9a:	0393      	lsls	r3, r2, #14
 8008b9c:	2a00      	cmp	r2, #0
 8008b9e:	d05f      	beq.n	8008c60 <VL53L1_GetRangingMeasurementData+0x1a8>
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008ba0:	2201      	movs	r2, #1
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008ba2:	f8c5 3388 	str.w	r3, [r5, #904]	; 0x388
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008ba6:	f885 2384 	strb.w	r2, [r5, #900]	; 0x384
 8008baa:	f1a6 0306 	sub.w	r3, r6, #6
 8008bae:	fab3 f383 	clz	r3, r3
 8008bb2:	095b      	lsrs	r3, r3, #5
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008bb4:	f885 3386 	strb.w	r3, [r5, #902]	; 0x386
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 8008bb8:	f10d 0102 	add.w	r1, sp, #2
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	f000 fbb5 	bl	800932c <VL53L1_get_lite_min_count_rate>
	if (Status == VL53L1_ERROR_NONE) {
 8008bc2:	2800      	cmp	r0, #0
 8008bc4:	d135      	bne.n	8008c32 <VL53L1_GetRangingMeasurementData+0x17a>
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 8008bc6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		if (TempFix1616 == 0) {
 8008bca:	0253      	lsls	r3, r2, #9
 8008bcc:	2a00      	cmp	r2, #0
 8008bce:	d043      	beq.n	8008c58 <VL53L1_GetRangingMeasurementData+0x1a0>
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008bd0:	2201      	movs	r2, #1
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008bd2:	f8c5 338c 	str.w	r3, [r5, #908]	; 0x38c
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008bd6:	f885 2385 	strb.w	r2, [r5, #901]	; 0x385
 8008bda:	f1a6 0604 	sub.w	r6, r6, #4
 8008bde:	fab6 f686 	clz	r6, r6
 8008be2:	0976      	lsrs	r6, r6, #5
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008be4:	f885 6387 	strb.w	r6, [r5, #903]	; 0x387
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8008be8:	7ee0      	ldrb	r0, [r4, #27]
 8008bea:	bb60      	cbnz	r0, 8008c46 <VL53L1_GetRangingMeasurementData+0x18e>
	Range = pRangeData->RangeMilliMeter;
 8008bec:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f6bf af73 	bge.w	8008adc <VL53L1_GetRangingMeasurementData+0x24>
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 8008bf6:	4a21      	ldr	r2, [pc, #132]	; (8008c7c <VL53L1_GetRangingMeasurementData+0x1c4>)
 8008bf8:	6852      	ldr	r2, [r2, #4]
 8008bfa:	4293      	cmp	r3, r2
			pRangeData->RangeStatus =
 8008bfc:	bfba      	itte	lt
 8008bfe:	230e      	movlt	r3, #14
 8008c00:	76e3      	strblt	r3, [r4, #27]
			pRangeData->RangeMilliMeter = 0;
 8008c02:	8320      	strhge	r0, [r4, #24]
 8008c04:	e76a      	b.n	8008adc <VL53L1_GetRangingMeasurementData+0x24>
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 8008c06:	2105      	movs	r1, #5
 8008c08:	76e1      	strb	r1, [r4, #27]
 8008c0a:	e7b9      	b.n	8008b80 <VL53L1_GetRangingMeasurementData+0xc8>
		if (presults_data->median_range_mm < SRL)
 8008c0c:	f44f 2c70 	mov.w	ip, #983040	; 0xf0000
			RAS = SRAS * 65536;
 8008c10:	f44f 1ef0 	mov.w	lr, #1966080	; 0x1e0000
 8008c14:	e77e      	b.n	8008b14 <VL53L1_GetRangingMeasurementData+0x5c>
 8008c16:	1f31      	subs	r1, r6, #4
 8008c18:	b2c9      	uxtb	r1, r1
 8008c1a:	290f      	cmp	r1, #15
 8008c1c:	bf96      	itet	ls
 8008c1e:	4818      	ldrls	r0, [pc, #96]	; (8008c80 <VL53L1_GetRangingMeasurementData+0x1c8>)
 8008c20:	21ff      	movhi	r1, #255	; 0xff
 8008c22:	5c41      	ldrbls	r1, [r0, r1]
			pRangeData->RangeStatus =
 8008c24:	76e1      	strb	r1, [r4, #27]
 8008c26:	e7ab      	b.n	8008b80 <VL53L1_GetRangingMeasurementData+0xc8>
 8008c28:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
		returnvalue = 50;
 8008c2c:	f04f 0e32 	mov.w	lr, #50	; 0x32
 8008c30:	e784      	b.n	8008b3c <VL53L1_GetRangingMeasurementData+0x84>
 8008c32:	f895 3385 	ldrb.w	r3, [r5, #901]	; 0x385
	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d0cf      	beq.n	8008bda <VL53L1_GetRangingMeasurementData+0x122>
 8008c3a:	2600      	movs	r6, #0
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008c3c:	f885 6387 	strb.w	r6, [r5, #903]	; 0x387
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8008c40:	7ee0      	ldrb	r0, [r4, #27]
 8008c42:	2800      	cmp	r0, #0
 8008c44:	d0d2      	beq.n	8008bec <VL53L1_GetRangingMeasurementData+0x134>
		Status = SetSimpleData(Dev, 1,
 8008c46:	2000      	movs	r0, #0
}
 8008c48:	b023      	add	sp, #140	; 0x8c
 8008c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c4c:	f895 3384 	ldrb.w	r3, [r5, #900]	; 0x384
	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d0aa      	beq.n	8008baa <VL53L1_GetRangingMeasurementData+0xf2>
 8008c54:	2300      	movs	r3, #0
 8008c56:	e7ad      	b.n	8008bb4 <VL53L1_GetRangingMeasurementData+0xfc>
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008c58:	f885 3385 	strb.w	r3, [r5, #901]	; 0x385
 8008c5c:	461e      	mov	r6, r3
 8008c5e:	e7c1      	b.n	8008be4 <VL53L1_GetRangingMeasurementData+0x12c>
 8008c60:	f885 3384 	strb.w	r3, [r5, #900]	; 0x384
 8008c64:	e7a6      	b.n	8008bb4 <VL53L1_GetRangingMeasurementData+0xfc>
		returnvalue = MAX(50, MIN(100, finalvalue));
 8008c66:	f1be 0f64 	cmp.w	lr, #100	; 0x64
 8008c6a:	bf28      	it	cs
 8008c6c:	f04f 0e64 	movcs.w	lr, #100	; 0x64
 8008c70:	e764      	b.n	8008b3c <VL53L1_GetRangingMeasurementData+0x84>
 8008c72:	bf00      	nop
 8008c74:	0030cccd 	.word	0x0030cccd
 8008c78:	0075b333 	.word	0x0075b333
 8008c7c:	20000000 	.word	0x20000000
 8008c80:	080144f8 	.word	0x080144f8

08008c84 <VL53L1_read_p2p_data>:
}


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 8008c84:	b570      	push	{r4, r5, r6, lr}
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
		status = VL53L1_get_static_nvm_managed(
 8008c86:	f500 71ac 	add.w	r1, r0, #344	; 0x158
{
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	4604      	mov	r4, r0
		status = VL53L1_get_static_nvm_managed(
 8008c8e:	f002 fc4b 	bl	800b528 <VL53L1_get_static_nvm_managed>
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 8008c92:	4605      	mov	r5, r0
 8008c94:	b1a0      	cbz	r0, 8008cc0 <VL53L1_read_p2p_data+0x3c>

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8008c96:	f8b4 315e 	ldrh.w	r3, [r4, #350]	; 0x15e
 8008c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c9e:	d331      	bcc.n	8008d04 <VL53L1_read_p2p_data+0x80>

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 8008ca0:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
 8008ca4:	b94b      	cbnz	r3, 8008cba <VL53L1_read_p2p_data+0x36>
		pdev->optical_centre.y_centre == 0) {
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8008ca6:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8008caa:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
				pdev->mm_roi.x_centre << 4;
 8008cae:	0112      	lsls	r2, r2, #4
				pdev->mm_roi.y_centre << 4;
 8008cb0:	011b      	lsls	r3, r3, #4
		pdev->optical_centre.x_centre =
 8008cb2:	f884 20a2 	strb.w	r2, [r4, #162]	; 0xa2
		pdev->optical_centre.y_centre =
 8008cb6:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8008cba:	4628      	mov	r0, r5
 8008cbc:	b002      	add	sp, #8
 8008cbe:	bd70      	pop	{r4, r5, r6, pc}
		status = VL53L1_get_customer_nvm_managed(
 8008cc0:	f104 0142 	add.w	r1, r4, #66	; 0x42
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	f002 fcbb 	bl	800b640 <VL53L1_get_customer_nvm_managed>
	if (status == VL53L1_ERROR_NONE) {
 8008cca:	4605      	mov	r5, r0
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	d1e2      	bne.n	8008c96 <VL53L1_read_p2p_data+0x12>
		status = VL53L1_get_nvm_copy_data(
 8008cd0:	f504 76fd 	add.w	r6, r4, #506	; 0x1fa
 8008cd4:	4631      	mov	r1, r6
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	f003 f828 	bl	800bd2c <VL53L1_get_nvm_copy_data>
		if (status == VL53L1_ERROR_NONE)
 8008cdc:	4605      	mov	r5, r0
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	d1d9      	bne.n	8008c96 <VL53L1_read_p2p_data+0x12>
			VL53L1_copy_rtn_good_spads_to_buffer(
 8008ce2:	4630      	mov	r0, r6
 8008ce4:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
 8008ce8:	f002 f95e 	bl	800afa8 <VL53L1_copy_rtn_good_spads_to_buffer>
		status =
 8008cec:	f504 722d 	add.w	r2, r4, #692	; 0x2b4
 8008cf0:	21de      	movs	r1, #222	; 0xde
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	f008 ff54 	bl	8011ba0 <VL53L1_RdWord>
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8008cf8:	f8b4 315e 	ldrh.w	r3, [r4, #350]	; 0x15e
 8008cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
		status =
 8008d00:	4605      	mov	r5, r0
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8008d02:	d203      	bcs.n	8008d0c <VL53L1_read_p2p_data+0x88>
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8008d04:	f64b 43cc 	movw	r3, #48332	; 0xbccc
 8008d08:	f8a4 315e 	strh.w	r3, [r4, #350]	; 0x15e
	if (status == VL53L1_ERROR_NONE)
 8008d0c:	2d00      	cmp	r5, #0
 8008d0e:	d1c7      	bne.n	8008ca0 <VL53L1_read_p2p_data+0x1c>
	uint8_t  xy_size = 0;

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 8008d10:	f10d 0206 	add.w	r2, sp, #6
 8008d14:	f10d 0107 	add.w	r1, sp, #7
 8008d18:	f894 022a 	ldrb.w	r0, [r4, #554]	; 0x22a
	uint8_t  x       = 0;
 8008d1c:	f88d 5006 	strb.w	r5, [sp, #6]
	uint8_t  y       = 0;
 8008d20:	f88d 5007 	strb.w	r5, [sp, #7]
	VL53L1_decode_row_col(
 8008d24:	f002 fbbe 	bl	800b4a4 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8008d28:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8008d2c:	f89d 1007 	ldrb.w	r1, [sp, #7]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8008d30:	f894 222b 	ldrb.w	r2, [r4, #555]	; 0x22b
	pmm_roi->x_centre = x;
 8008d34:	462b      	mov	r3, r5
 8008d36:	f360 0307 	bfi	r3, r0, #0, #8
 8008d3a:	f361 230f 	bfi	r3, r1, #8, #8

	pmm_roi->height = xy_size >> 4;
	pmm_roi->width  = xy_size & 0x0F;
 8008d3e:	f002 010f 	and.w	r1, r2, #15
	pmm_roi->x_centre = x;
 8008d42:	f361 4317 	bfi	r3, r1, #16, #8
	pmm_roi->height = xy_size >> 4;
 8008d46:	0912      	lsrs	r2, r2, #4
	pmm_roi->x_centre = x;
 8008d48:	f362 631f 	bfi	r3, r2, #24, #8
 8008d4c:	f8c4 309e 	str.w	r3, [r4, #158]	; 0x9e
 8008d50:	e7a6      	b.n	8008ca0 <VL53L1_read_p2p_data+0x1c>
 8008d52:	bf00      	nop

08008d54 <VL53L1_data_init>:
{
 8008d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d58:	4604      	mov	r4, r0
 8008d5a:	b087      	sub	sp, #28
 8008d5c:	460d      	mov	r5, r1
	VL53L1_init_ll_driver_state(
 8008d5e:	2162      	movs	r1, #98	; 0x62
 8008d60:	f002 f85c 	bl	800ae1c <VL53L1_init_ll_driver_state>
	pdev->phasecal_config_timeout_us  =  1000;
 8008d64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	pdev->mm_config_timeout_us        =  2000;
 8008d68:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8008d6c:	f44f 6020 	mov.w	r0, #2560	; 0xa00
	pdev->range_config_timeout_us     = 13000;
 8008d70:	f243 27c8 	movw	r7, #13000	; 0x32c8
	pdev->inter_measurement_period_ms =   100;
 8008d74:	2664      	movs	r6, #100	; 0x64
	pdev->gain_cal.standard_ranging_gain_factor =
 8008d76:	f240 71db 	movw	r1, #2011	; 0x7db
	pdev->phasecal_config_timeout_us  =  1000;
 8008d7a:	60a2      	str	r2, [r4, #8]
	pdev->mm_config_timeout_us        =  2000;
 8008d7c:	60e3      	str	r3, [r4, #12]
	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8008d7e:	2200      	movs	r2, #0
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8008d80:	2301      	movs	r3, #1
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8008d82:	8320      	strh	r0, [r4, #24]
	pdev->range_config_timeout_us     = 13000;
 8008d84:	6127      	str	r7, [r4, #16]
	pdev->inter_measurement_period_ms =   100;
 8008d86:	6166      	str	r6, [r4, #20]
	pdev->gain_cal.standard_ranging_gain_factor =
 8008d88:	f8a4 109c 	strh.w	r1, [r4, #156]	; 0x9c
	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8008d8c:	7022      	strb	r2, [r4, #0]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8008d8e:	70a2      	strb	r2, [r4, #2]
	pdev->debug_mode                  =  0x00;
 8008d90:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8008d94:	7063      	strb	r3, [r4, #1]
	pdev->offset_calibration_mode =
 8008d96:	70e3      	strb	r3, [r4, #3]
	pdev->offset_correction_mode  =
 8008d98:	7123      	strb	r3, [r4, #4]
	VL53L1_init_version(Dev);
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	f002 f82e 	bl	800adfc <VL53L1_init_version>
	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8008da0:	b115      	cbz	r5, 8008da8 <VL53L1_data_init+0x54>
			status = VL53L1_read_p2p_data(Dev);
 8008da2:	4620      	mov	r0, r4
 8008da4:	f7ff ff6e 	bl	8008c84 <VL53L1_read_p2p_data>
	status =
 8008da8:	f504 7088 	add.w	r0, r4, #272	; 0x110
 8008dac:	f000 ff48 	bl	8009c40 <VL53L1_init_refspadchar_config_struct>
	status =
 8008db0:	f504 7090 	add.w	r0, r4, #288	; 0x120
 8008db4:	f000 ff58 	bl	8009c68 <VL53L1_init_ssc_config_struct>
	status =
 8008db8:	f504 7196 	add.w	r1, r4, #300	; 0x12c
 8008dbc:	f104 0042 	add.w	r0, r4, #66	; 0x42
 8008dc0:	f000 ff5e 	bl	8009c80 <VL53L1_init_xtalk_config_struct>
		VL53L1_init_tuning_parm_storage_struct(
 8008dc4:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
	status =
 8008dc8:	f504 70a2 	add.w	r0, r4, #324	; 0x144
 8008dcc:	f000 ff7a 	bl	8009cc4 <VL53L1_init_offset_cal_config_struct>
	status =
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	f000 ff8b 	bl	8009cec <VL53L1_init_tuning_parm_storage_struct>
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8008dd6:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
		status = VL53L1_set_preset_mode(
 8008dda:	7866      	ldrb	r6, [r4, #1]
 8008ddc:	68a2      	ldr	r2, [r4, #8]
 8008dde:	9205      	str	r2, [sp, #20]
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8008de0:	f003 0303 	and.w	r3, r3, #3
 8008de4:	3b80      	subs	r3, #128	; 0x80
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8008de6:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
	VL53L1_init_ll_driver_state(
 8008dea:	2103      	movs	r1, #3
 8008dec:	4620      	mov	r0, r4
		status = VL53L1_set_preset_mode(
 8008dee:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 8008df2:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8008df6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008dfa:	f8d4 9014 	ldr.w	r9, [r4, #20]
	VL53L1_init_ll_driver_state(
 8008dfe:	f002 f80d 	bl	800ae1c <VL53L1_init_ll_driver_state>
	switch (device_preset_mode) {
 8008e02:	1e72      	subs	r2, r6, #1
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8008e04:	f504 70b2 	add.w	r0, r4, #356	; 0x164
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8008e08:	f504 76c2 	add.w	r6, r4, #388	; 0x184
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8008e0c:	f504 77ce 	add.w	r7, r4, #412	; 0x19c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8008e10:	f504 73da 	add.w	r3, r4, #436	; 0x1b4
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8008e14:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
	VL53L1_low_power_auto_data_t  *plpadata      =
 8008e18:	f504 7e39 	add.w	lr, r4, #740	; 0x2e4
	switch (device_preset_mode) {
 8008e1c:	2a25      	cmp	r2, #37	; 0x25
 8008e1e:	f200 80ad 	bhi.w	8008f7c <VL53L1_data_init+0x228>
 8008e22:	e8df f002 	tbb	[pc, r2]
 8008e26:	4a42      	.short	0x4a42
 8008e28:	6a625a52 	.word	0x6a625a52
 8008e2c:	abab7a72 	.word	0xabab7a72
 8008e30:	abababab 	.word	0xabababab
 8008e34:	8a82abab 	.word	0x8a82abab
 8008e38:	abababab 	.word	0xabababab
 8008e3c:	abababab 	.word	0xabababab
 8008e40:	abababab 	.word	0xabababab
 8008e44:	abababab 	.word	0xabababab
 8008e48:	139a92ab 	.word	0x139a92ab
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 8008e4c:	e88d 4022 	stmia.w	sp, {r1, r5, lr}
 8008e50:	463a      	mov	r2, r7
 8008e52:	4631      	mov	r1, r6
 8008e54:	f001 fdec 	bl	800aa30 <VL53L1_preset_mode_low_power_auto_long_ranging>
 8008e58:	4605      	mov	r5, r0
	if (status == VL53L1_ERROR_NONE) {
 8008e5a:	b9fd      	cbnz	r5, 8008e9c <VL53L1_data_init+0x148>
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8008e5c:	f8b4 315e 	ldrh.w	r3, [r4, #350]	; 0x15e
		pstatic->dss_config__target_total_rate_mcps =
 8008e60:	f8a4 8164 	strh.w	r8, [r4, #356]	; 0x164
		pdev->dss_config__target_total_rate_mcps    =
 8008e64:	f8a4 8018 	strh.w	r8, [r4, #24]
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d07e      	beq.n	8008f6a <VL53L1_data_init+0x216>
		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8008e6c:	9805      	ldr	r0, [sp, #20]
 8008e6e:	60a0      	str	r0, [r4, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8008e70:	f8c4 a00c 	str.w	sl, [r4, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8008e74:	f8c4 b010 	str.w	fp, [r4, #16]
		status =
 8008e78:	465a      	mov	r2, fp
 8008e7a:	e88d 00c0 	stmia.w	sp, {r6, r7}
 8008e7e:	4651      	mov	r1, sl
 8008e80:	f002 f9a2 	bl	800b1c8 <VL53L1_calc_timeout_register_values>
	if (status == VL53L1_ERROR_NONE)
 8008e84:	4605      	mov	r5, r0
 8008e86:	b948      	cbnz	r0, 8008e9c <VL53L1_data_init+0x148>
	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8008e88:	f8b4 32b4 	ldrh.w	r3, [r4, #692]	; 0x2b4
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d06c      	beq.n	8008f6a <VL53L1_data_init+0x216>
			inter_measurement_period_ms *
 8008e90:	fb09 f303 	mul.w	r3, r9, r3
		pdev->tim_cfg.system__intermeasurement_period = \
 8008e94:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8008e98:	f8c4 9014 	str.w	r9, [r4, #20]
	VL53L1_low_power_auto_data_init(
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	f002 fa5d 	bl	800b35c <VL53L1_low_power_auto_data_init>
}
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	b007      	add	sp, #28
 8008ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		status = VL53L1_preset_mode_standard_ranging(
 8008eaa:	e88d 0022 	stmia.w	sp, {r1, r5}
 8008eae:	463a      	mov	r2, r7
 8008eb0:	4631      	mov	r1, r6
 8008eb2:	f000 ff6b 	bl	8009d8c <VL53L1_preset_mode_standard_ranging>
 8008eb6:	4605      	mov	r5, r0
 8008eb8:	e7cf      	b.n	8008e5a <VL53L1_data_init+0x106>
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8008eba:	e88d 0022 	stmia.w	sp, {r1, r5}
 8008ebe:	463a      	mov	r2, r7
 8008ec0:	4631      	mov	r1, r6
 8008ec2:	f001 f801 	bl	8009ec8 <VL53L1_preset_mode_standard_ranging_short_range>
 8008ec6:	4605      	mov	r5, r0
 8008ec8:	e7c7      	b.n	8008e5a <VL53L1_data_init+0x106>
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8008eca:	e88d 0022 	stmia.w	sp, {r1, r5}
 8008ece:	463a      	mov	r2, r7
 8008ed0:	4631      	mov	r1, r6
 8008ed2:	f001 f893 	bl	8009ffc <VL53L1_preset_mode_standard_ranging_long_range>
 8008ed6:	4605      	mov	r5, r0
 8008ed8:	e7bf      	b.n	8008e5a <VL53L1_data_init+0x106>
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8008eda:	e88d 0022 	stmia.w	sp, {r1, r5}
 8008ede:	463a      	mov	r2, r7
 8008ee0:	4631      	mov	r1, r6
 8008ee2:	f001 f927 	bl	800a134 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 8008ee6:	4605      	mov	r5, r0
 8008ee8:	e7b7      	b.n	8008e5a <VL53L1_data_init+0x106>
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 8008eea:	e88d 0022 	stmia.w	sp, {r1, r5}
 8008eee:	463a      	mov	r2, r7
 8008ef0:	4631      	mov	r1, r6
 8008ef2:	f001 f9c3 	bl	800a27c <VL53L1_preset_mode_standard_ranging_mm2_cal>
 8008ef6:	4605      	mov	r5, r0
 8008ef8:	e7af      	b.n	8008e5a <VL53L1_data_init+0x106>
		status = VL53L1_preset_mode_timed_ranging(
 8008efa:	e88d 0022 	stmia.w	sp, {r1, r5}
 8008efe:	463a      	mov	r2, r7
 8008f00:	4631      	mov	r1, r6
 8008f02:	f001 fa5f 	bl	800a3c4 <VL53L1_preset_mode_timed_ranging>
 8008f06:	4605      	mov	r5, r0
 8008f08:	e7a7      	b.n	8008e5a <VL53L1_data_init+0x106>
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8008f0a:	e88d 0022 	stmia.w	sp, {r1, r5}
 8008f0e:	463a      	mov	r2, r7
 8008f10:	4631      	mov	r1, r6
 8008f12:	f001 faf9 	bl	800a508 <VL53L1_preset_mode_timed_ranging_short_range>
 8008f16:	4605      	mov	r5, r0
 8008f18:	e79f      	b.n	8008e5a <VL53L1_data_init+0x106>
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8008f1a:	e88d 0022 	stmia.w	sp, {r1, r5}
 8008f1e:	463a      	mov	r2, r7
 8008f20:	4631      	mov	r1, r6
 8008f22:	f001 fb91 	bl	800a648 <VL53L1_preset_mode_timed_ranging_long_range>
 8008f26:	4605      	mov	r5, r0
 8008f28:	e797      	b.n	8008e5a <VL53L1_data_init+0x106>
		status = VL53L1_preset_mode_olt(
 8008f2a:	e88d 0022 	stmia.w	sp, {r1, r5}
 8008f2e:	463a      	mov	r2, r7
 8008f30:	4631      	mov	r1, r6
 8008f32:	f001 fec5 	bl	800acc0 <VL53L1_preset_mode_olt>
 8008f36:	4605      	mov	r5, r0
 8008f38:	e78f      	b.n	8008e5a <VL53L1_data_init+0x106>
		status = VL53L1_preset_mode_singleshot_ranging(
 8008f3a:	e88d 0022 	stmia.w	sp, {r1, r5}
 8008f3e:	463a      	mov	r2, r7
 8008f40:	4631      	mov	r1, r6
 8008f42:	f001 fe1f 	bl	800ab84 <VL53L1_preset_mode_singleshot_ranging>
 8008f46:	4605      	mov	r5, r0
 8008f48:	e787      	b.n	8008e5a <VL53L1_data_init+0x106>
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 8008f4a:	e88d 4022 	stmia.w	sp, {r1, r5, lr}
 8008f4e:	463a      	mov	r2, r7
 8008f50:	4631      	mov	r1, r6
 8008f52:	f001 fcc1 	bl	800a8d8 <VL53L1_preset_mode_low_power_auto_short_ranging>
 8008f56:	4605      	mov	r5, r0
 8008f58:	e77f      	b.n	8008e5a <VL53L1_data_init+0x106>
		status = VL53L1_preset_mode_low_power_auto_ranging(
 8008f5a:	e88d 4022 	stmia.w	sp, {r1, r5, lr}
 8008f5e:	463a      	mov	r2, r7
 8008f60:	4631      	mov	r1, r6
 8008f62:	f001 fc0f 	bl	800a784 <VL53L1_preset_mode_low_power_auto_ranging>
 8008f66:	4605      	mov	r5, r0
 8008f68:	e777      	b.n	8008e5a <VL53L1_data_init+0x106>
	VL53L1_low_power_auto_data_init(
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	f002 f9f6 	bl	800b35c <VL53L1_low_power_auto_data_init>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8008f70:	f06f 050e 	mvn.w	r5, #14
}
 8008f74:	4628      	mov	r0, r5
 8008f76:	b007      	add	sp, #28
 8008f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		status = VL53L1_ERROR_INVALID_PARAMS;
 8008f7c:	f06f 0503 	mvn.w	r5, #3
 8008f80:	e78c      	b.n	8008e9c <VL53L1_data_init+0x148>
 8008f82:	bf00      	nop

08008f84 <VL53L1_set_inter_measurement_period_ms>:
	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8008f84:	f8b0 32b4 	ldrh.w	r3, [r0, #692]	; 0x2b4
 8008f88:	b133      	cbz	r3, 8008f98 <VL53L1_set_inter_measurement_period_ms+0x14>
			inter_measurement_period_ms *
 8008f8a:	fb01 f303 	mul.w	r3, r1, r3
		pdev->tim_cfg.system__intermeasurement_period = \
 8008f8e:	f8c0 31ac 	str.w	r3, [r0, #428]	; 0x1ac
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8008f92:	6141      	str	r1, [r0, #20]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008f94:	2000      	movs	r0, #0
}
 8008f96:	4770      	bx	lr
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8008f98:	f06f 000e 	mvn.w	r0, #14
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop

08008fa0 <VL53L1_get_inter_measurement_period_ms>:
	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8008fa0:	f8b0 22b4 	ldrh.w	r2, [r0, #692]	; 0x2b4
 8008fa4:	b132      	cbz	r2, 8008fb4 <VL53L1_get_inter_measurement_period_ms+0x14>
			pdev->tim_cfg.system__intermeasurement_period /
 8008fa6:	f8d0 31ac 	ldr.w	r3, [r0, #428]	; 0x1ac
 8008faa:	fbb3 f3f2 	udiv	r3, r3, r2
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008fae:	2000      	movs	r0, #0
		*pinter_measurement_period_ms = \
 8008fb0:	600b      	str	r3, [r1, #0]
}
 8008fb2:	4770      	bx	lr
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8008fb4:	f06f 000e 	mvn.w	r0, #14
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop

08008fbc <VL53L1_set_timeouts_us>:
{
 8008fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8008fc0:	f8b0 e15e 	ldrh.w	lr, [r0, #350]	; 0x15e
{
 8008fc4:	b082      	sub	sp, #8
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8008fc6:	f1be 0f00 	cmp.w	lr, #0
 8008fca:	d104      	bne.n	8008fd6 <VL53L1_set_timeouts_us+0x1a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8008fcc:	f06f 000e 	mvn.w	r0, #14
}
 8008fd0:	b002      	add	sp, #8
 8008fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fd6:	4604      	mov	r4, r0
			VL53L1_calc_timeout_register_values(
 8008fd8:	f500 7cc2 	add.w	ip, r0, #388	; 0x184
 8008fdc:	461f      	mov	r7, r3
 8008fde:	4616      	mov	r6, r2
 8008fe0:	460d      	mov	r5, r1
 8008fe2:	f500 78ce 	add.w	r8, r0, #412	; 0x19c
		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8008fe6:	60a1      	str	r1, [r4, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8008fe8:	60e2      	str	r2, [r4, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8008fea:	6123      	str	r3, [r4, #16]
		status =
 8008fec:	463a      	mov	r2, r7
 8008fee:	4673      	mov	r3, lr
 8008ff0:	4631      	mov	r1, r6
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	f8cd 8004 	str.w	r8, [sp, #4]
 8008ff8:	f8cd c000 	str.w	ip, [sp]
 8008ffc:	f002 f8e4 	bl	800b1c8 <VL53L1_calc_timeout_register_values>
}
 8009000:	b002      	add	sp, #8
 8009002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009006:	bf00      	nop

08009008 <VL53L1_get_timeouts_us>:
{
 8009008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800900c:	4604      	mov	r4, r0
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800900e:	f8b0 015e 	ldrh.w	r0, [r0, #350]	; 0x15e
 8009012:	b360      	cbz	r0, 800906e <VL53L1_get_timeouts_us+0x66>
 8009014:	460f      	mov	r7, r1
		macro_period_us =
 8009016:	f894 11a2 	ldrb.w	r1, [r4, #418]	; 0x1a2
 800901a:	4616      	mov	r6, r2
 800901c:	461d      	mov	r5, r3
 800901e:	f002 f87d 	bl	800b11c <VL53L1_calc_macro_period_us>
 8009022:	4680      	mov	r8, r0
			VL53L1_calc_timeout_us(
 8009024:	4601      	mov	r1, r0
 8009026:	f894 018b 	ldrb.w	r0, [r4, #395]	; 0x18b
 800902a:	f002 f8b5 	bl	800b198 <VL53L1_calc_timeout_us>
		*pphasecal_config_timeout_us =
 800902e:	6038      	str	r0, [r7, #0]
		timeout_encoded =
 8009030:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8009034:	f894 019d 	ldrb.w	r0, [r4, #413]	; 0x19d
		timeout_encoded = (timeout_encoded << 8) +
 8009038:	eb00 2003 	add.w	r0, r0, r3, lsl #8
			VL53L1_calc_decoded_timeout_us(
 800903c:	4641      	mov	r1, r8
 800903e:	b280      	uxth	r0, r0
 8009040:	f002 f8b4 	bl	800b1ac <VL53L1_calc_decoded_timeout_us>
		*pmm_config_timeout_us =
 8009044:	6030      	str	r0, [r6, #0]
		timeout_encoded =
 8009046:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 800904a:	f894 01a1 	ldrb.w	r0, [r4, #417]	; 0x1a1
		timeout_encoded = (timeout_encoded << 8) +
 800904e:	eb00 2003 	add.w	r0, r0, r3, lsl #8
			VL53L1_calc_decoded_timeout_us(
 8009052:	4641      	mov	r1, r8
 8009054:	b280      	uxth	r0, r0
 8009056:	f002 f8a9 	bl	800b1ac <VL53L1_calc_decoded_timeout_us>
		*prange_config_timeout_us =
 800905a:	6028      	str	r0, [r5, #0]
		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	60a3      	str	r3, [r4, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8009060:	6833      	ldr	r3, [r6, #0]
 8009062:	60e3      	str	r3, [r4, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8009064:	682b      	ldr	r3, [r5, #0]
 8009066:	6123      	str	r3, [r4, #16]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009068:	2000      	movs	r0, #0
}
 800906a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800906e:	f06f 000e 	mvn.w	r0, #14
 8009072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009076:	bf00      	nop

08009078 <VL53L1_get_sequence_config_bit>:
	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8009078:	2907      	cmp	r1, #7
 800907a:	d80f      	bhi.n	800909c <VL53L1_get_sequence_config_bit+0x24>
		*pvalue =
 800907c:	f890 31c5 	ldrb.w	r3, [r0, #453]	; 0x1c5
		if (bit_id > 0) {
 8009080:	b139      	cbz	r1, 8009092 <VL53L1_get_sequence_config_bit+0x1a>
			bit_mask  = 0x01 << bit_id;
 8009082:	2001      	movs	r0, #1
 8009084:	4088      	lsls	r0, r1
			*pvalue  = *pvalue >> bit_id;
 8009086:	4018      	ands	r0, r3
 8009088:	fa40 f101 	asr.w	r1, r0, r1
 800908c:	7011      	strb	r1, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800908e:	2000      	movs	r0, #0
 8009090:	4770      	bx	lr
		*pvalue =
 8009092:	f003 0301 	and.w	r3, r3, #1
 8009096:	7013      	strb	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009098:	4608      	mov	r0, r1
}
 800909a:	4770      	bx	lr
		status = VL53L1_ERROR_INVALID_PARAMS;
 800909c:	f06f 0003 	mvn.w	r0, #3
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop

080090a4 <VL53L1_set_user_zone>:
{
 80090a4:	b538      	push	{r3, r4, r5, lr}
 80090a6:	460c      	mov	r4, r1
 80090a8:	4605      	mov	r5, r0
	VL53L1_encode_row_col(
 80090aa:	f200 12c3 	addw	r2, r0, #451	; 0x1c3
 80090ae:	7809      	ldrb	r1, [r1, #0]
 80090b0:	7860      	ldrb	r0, [r4, #1]
 80090b2:	f002 f93d 	bl	800b330 <VL53L1_encode_row_col>
	VL53L1_encode_zone_size(
 80090b6:	78a0      	ldrb	r0, [r4, #2]
 80090b8:	78e1      	ldrb	r1, [r4, #3]
 80090ba:	f505 72e2 	add.w	r2, r5, #452	; 0x1c4
 80090be:	f002 f949 	bl	800b354 <VL53L1_encode_zone_size>
}
 80090c2:	2000      	movs	r0, #0
 80090c4:	bd38      	pop	{r3, r4, r5, pc}
 80090c6:	bf00      	nop

080090c8 <VL53L1_get_user_zone>:
{
 80090c8:	b538      	push	{r3, r4, r5, lr}
 80090ca:	4605      	mov	r5, r0
 80090cc:	460c      	mov	r4, r1
	VL53L1_decode_row_col(
 80090ce:	460a      	mov	r2, r1
 80090d0:	f890 01c3 	ldrb.w	r0, [r0, #451]	; 0x1c3
 80090d4:	3101      	adds	r1, #1
 80090d6:	f002 f9e5 	bl	800b4a4 <VL53L1_decode_row_col>
	VL53L1_decode_zone_size(
 80090da:	f895 01c4 	ldrb.w	r0, [r5, #452]	; 0x1c4
 80090de:	1ce2      	adds	r2, r4, #3
 80090e0:	1ca1      	adds	r1, r4, #2
 80090e2:	f002 f931 	bl	800b348 <VL53L1_decode_zone_size>
}
 80090e6:	2000      	movs	r0, #0
 80090e8:	bd38      	pop	{r3, r4, r5, pc}
 80090ea:	bf00      	nop

080090ec <VL53L1_get_preset_mode_timing_cfg>:
	switch (device_preset_mode) {
 80090ec:	3901      	subs	r1, #1
{
 80090ee:	b410      	push	{r4}
	switch (device_preset_mode) {
 80090f0:	2925      	cmp	r1, #37	; 0x25
 80090f2:	d84a      	bhi.n	800918a <VL53L1_get_preset_mode_timing_cfg+0x9e>
 80090f4:	e8df f001 	tbb	[pc, r1]
 80090f8:	37373737 	.word	0x37373737
 80090fc:	25252537 	.word	0x25252537
 8009100:	49494949 	.word	0x49494949
 8009104:	49494949 	.word	0x49494949
 8009108:	49492537 	.word	0x49492537
 800910c:	49494949 	.word	0x49494949
 8009110:	49494949 	.word	0x49494949
 8009114:	49494949 	.word	0x49494949
 8009118:	13494949 	.word	0x13494949
 800911c:	1313      	.short	0x1313
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800911e:	f8b0 40cc 	ldrh.w	r4, [r0, #204]	; 0xcc
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8009122:	f8d0 10d4 	ldr.w	r1, [r0, #212]	; 0xd4
		*pdss_config__target_total_rate_mcps =
 8009126:	8014      	strh	r4, [r2, #0]
		*pphasecal_config_timeout_us =
 8009128:	6019      	str	r1, [r3, #0]
		*pmm_config_timeout_us =
 800912a:	9a01      	ldr	r2, [sp, #4]
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800912c:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
		*pmm_config_timeout_us =
 8009130:	6013      	str	r3, [r2, #0]
		*prange_config_timeout_us =
 8009132:	9a02      	ldr	r2, [sp, #8]
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 8009134:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
		*prange_config_timeout_us =
 8009138:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800913a:	2000      	movs	r0, #0
}
 800913c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009140:	4770      	bx	lr
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8009142:	f8b0 40cc 	ldrh.w	r4, [r0, #204]	; 0xcc
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8009146:	f8d0 10d4 	ldr.w	r1, [r0, #212]	; 0xd4
		*pdss_config__target_total_rate_mcps =
 800914a:	8014      	strh	r4, [r2, #0]
		*pphasecal_config_timeout_us =
 800914c:	6019      	str	r1, [r3, #0]
		*pmm_config_timeout_us =
 800914e:	9a01      	ldr	r2, [sp, #4]
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 8009150:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
		*pmm_config_timeout_us =
 8009154:	6013      	str	r3, [r2, #0]
		*prange_config_timeout_us =
 8009156:	9a02      	ldr	r2, [sp, #8]
				pdev->tuning_parms.tp_range_timeout_timed_us;
 8009158:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
		*prange_config_timeout_us =
 800915c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800915e:	2000      	movs	r0, #0
}
 8009160:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009164:	4770      	bx	lr
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 8009166:	f8b0 40ca 	ldrh.w	r4, [r0, #202]	; 0xca
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800916a:	f8d0 10d0 	ldr.w	r1, [r0, #208]	; 0xd0
		*pdss_config__target_total_rate_mcps =
 800916e:	8014      	strh	r4, [r2, #0]
		*pphasecal_config_timeout_us =
 8009170:	6019      	str	r1, [r3, #0]
		*pmm_config_timeout_us =
 8009172:	9a01      	ldr	r2, [sp, #4]
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 8009174:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
		*pmm_config_timeout_us =
 8009178:	6013      	str	r3, [r2, #0]
		*prange_config_timeout_us =
 800917a:	9a02      	ldr	r2, [sp, #8]
				pdev->tuning_parms.tp_range_timeout_lite_us;
 800917c:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
		*prange_config_timeout_us =
 8009180:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009182:	2000      	movs	r0, #0
}
 8009184:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009188:	4770      	bx	lr
		status = VL53L1_ERROR_INVALID_PARAMS;
 800918a:	f06f 0003 	mvn.w	r0, #3
}
 800918e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009192:	4770      	bx	lr

08009194 <VL53L1_set_preset_mode>:
{
 8009194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009198:	b085      	sub	sp, #20
 800919a:	460d      	mov	r5, r1
	pdev->preset_mode                 = device_preset_mode;
 800919c:	7041      	strb	r1, [r0, #1]
{
 800919e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 80091a0:	990e      	ldr	r1, [sp, #56]	; 0x38
{
 80091a2:	9e10      	ldr	r6, [sp, #64]	; 0x40
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 80091a4:	60c1      	str	r1, [r0, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 80091a6:	6107      	str	r7, [r0, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 80091a8:	6146      	str	r6, [r0, #20]
	VL53L1_init_ll_driver_state(
 80091aa:	2103      	movs	r1, #3
{
 80091ac:	4604      	mov	r4, r0
 80091ae:	4691      	mov	r9, r2
 80091b0:	469a      	mov	sl, r3
	VL53L1_init_ll_driver_state(
 80091b2:	f001 fe33 	bl	800ae1c <VL53L1_init_ll_driver_state>
	switch (device_preset_mode) {
 80091b6:	1e6a      	subs	r2, r5, #1
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 80091b8:	f504 70b2 	add.w	r0, r4, #356	; 0x164
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 80091bc:	f504 75c2 	add.w	r5, r4, #388	; 0x184
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 80091c0:	f504 7bce 	add.w	fp, r4, #412	; 0x19c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 80091c4:	f504 73da 	add.w	r3, r4, #436	; 0x1b4
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 80091c8:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 80091cc:	f104 0ea4 	add.w	lr, r4, #164	; 0xa4
	VL53L1_low_power_auto_data_t  *plpadata      =
 80091d0:	f504 7c39 	add.w	ip, r4, #740	; 0x2e4
	switch (device_preset_mode) {
 80091d4:	2a25      	cmp	r2, #37	; 0x25
 80091d6:	f200 809c 	bhi.w	8009312 <VL53L1_set_preset_mode+0x17e>
 80091da:	e8df f002 	tbb	[pc, r2]
 80091de:	443d      	.short	0x443d
 80091e0:	6059524b 	.word	0x6059524b
 80091e4:	9a9a6e67 	.word	0x9a9a6e67
 80091e8:	9a9a9a9a 	.word	0x9a9a9a9a
 80091ec:	7c759a9a 	.word	0x7c759a9a
 80091f0:	9a9a9a9a 	.word	0x9a9a9a9a
 80091f4:	9a9a9a9a 	.word	0x9a9a9a9a
 80091f8:	9a9a9a9a 	.word	0x9a9a9a9a
 80091fc:	9a9a9a9a 	.word	0x9a9a9a9a
 8009200:	138c839a 	.word	0x138c839a
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 8009204:	e88d 4002 	stmia.w	sp, {r1, lr}
 8009208:	f8cd c008 	str.w	ip, [sp, #8]
 800920c:	465a      	mov	r2, fp
 800920e:	4629      	mov	r1, r5
 8009210:	f001 fc0e 	bl	800aa30 <VL53L1_preset_mode_low_power_auto_long_ranging>
	if (status == VL53L1_ERROR_NONE) {
 8009214:	b9e8      	cbnz	r0, 8009252 <VL53L1_set_preset_mode+0xbe>
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8009216:	f8b4 315e 	ldrh.w	r3, [r4, #350]	; 0x15e
		pstatic->dss_config__target_total_rate_mcps =
 800921a:	f8a4 9164 	strh.w	r9, [r4, #356]	; 0x164
		pdev->dss_config__target_total_rate_mcps    =
 800921e:	f8a4 9018 	strh.w	r9, [r4, #24]
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8009222:	2b00      	cmp	r3, #0
 8009224:	d070      	beq.n	8009308 <VL53L1_set_preset_mode+0x174>
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8009226:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009228:	60e2      	str	r2, [r4, #12]
		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 800922a:	f8c4 a008 	str.w	sl, [r4, #8]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 800922e:	6127      	str	r7, [r4, #16]
		status =
 8009230:	463a      	mov	r2, r7
 8009232:	e88d 0820 	stmia.w	sp, {r5, fp}
 8009236:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009238:	4650      	mov	r0, sl
 800923a:	f001 ffc5 	bl	800b1c8 <VL53L1_calc_timeout_register_values>
	if (status == VL53L1_ERROR_NONE)
 800923e:	b940      	cbnz	r0, 8009252 <VL53L1_set_preset_mode+0xbe>
	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8009240:	f8b4 32b4 	ldrh.w	r3, [r4, #692]	; 0x2b4
 8009244:	2b00      	cmp	r3, #0
 8009246:	d05f      	beq.n	8009308 <VL53L1_set_preset_mode+0x174>
			inter_measurement_period_ms *
 8009248:	fb06 f303 	mul.w	r3, r6, r3
		pdev->tim_cfg.system__intermeasurement_period = \
 800924c:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8009250:	6166      	str	r6, [r4, #20]
}
 8009252:	b005      	add	sp, #20
 8009254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		status = VL53L1_preset_mode_standard_ranging(
 8009258:	e88d 4002 	stmia.w	sp, {r1, lr}
 800925c:	465a      	mov	r2, fp
 800925e:	4629      	mov	r1, r5
 8009260:	f000 fd94 	bl	8009d8c <VL53L1_preset_mode_standard_ranging>
		break;
 8009264:	e7d6      	b.n	8009214 <VL53L1_set_preset_mode+0x80>
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8009266:	e88d 4002 	stmia.w	sp, {r1, lr}
 800926a:	465a      	mov	r2, fp
 800926c:	4629      	mov	r1, r5
 800926e:	f000 fe2b 	bl	8009ec8 <VL53L1_preset_mode_standard_ranging_short_range>
		break;
 8009272:	e7cf      	b.n	8009214 <VL53L1_set_preset_mode+0x80>
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8009274:	e88d 4002 	stmia.w	sp, {r1, lr}
 8009278:	465a      	mov	r2, fp
 800927a:	4629      	mov	r1, r5
 800927c:	f000 febe 	bl	8009ffc <VL53L1_preset_mode_standard_ranging_long_range>
		break;
 8009280:	e7c8      	b.n	8009214 <VL53L1_set_preset_mode+0x80>
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8009282:	e88d 4002 	stmia.w	sp, {r1, lr}
 8009286:	465a      	mov	r2, fp
 8009288:	4629      	mov	r1, r5
 800928a:	f000 ff53 	bl	800a134 <VL53L1_preset_mode_standard_ranging_mm1_cal>
		break;
 800928e:	e7c1      	b.n	8009214 <VL53L1_set_preset_mode+0x80>
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 8009290:	e88d 4002 	stmia.w	sp, {r1, lr}
 8009294:	465a      	mov	r2, fp
 8009296:	4629      	mov	r1, r5
 8009298:	f000 fff0 	bl	800a27c <VL53L1_preset_mode_standard_ranging_mm2_cal>
		break;
 800929c:	e7ba      	b.n	8009214 <VL53L1_set_preset_mode+0x80>
		status = VL53L1_preset_mode_timed_ranging(
 800929e:	e88d 4002 	stmia.w	sp, {r1, lr}
 80092a2:	465a      	mov	r2, fp
 80092a4:	4629      	mov	r1, r5
 80092a6:	f001 f88d 	bl	800a3c4 <VL53L1_preset_mode_timed_ranging>
		break;
 80092aa:	e7b3      	b.n	8009214 <VL53L1_set_preset_mode+0x80>
		status = VL53L1_preset_mode_timed_ranging_short_range(
 80092ac:	e88d 4002 	stmia.w	sp, {r1, lr}
 80092b0:	465a      	mov	r2, fp
 80092b2:	4629      	mov	r1, r5
 80092b4:	f001 f928 	bl	800a508 <VL53L1_preset_mode_timed_ranging_short_range>
		break;
 80092b8:	e7ac      	b.n	8009214 <VL53L1_set_preset_mode+0x80>
		status = VL53L1_preset_mode_timed_ranging_long_range(
 80092ba:	e88d 4002 	stmia.w	sp, {r1, lr}
 80092be:	465a      	mov	r2, fp
 80092c0:	4629      	mov	r1, r5
 80092c2:	f001 f9c1 	bl	800a648 <VL53L1_preset_mode_timed_ranging_long_range>
		break;
 80092c6:	e7a5      	b.n	8009214 <VL53L1_set_preset_mode+0x80>
		status = VL53L1_preset_mode_olt(
 80092c8:	e88d 4002 	stmia.w	sp, {r1, lr}
 80092cc:	465a      	mov	r2, fp
 80092ce:	4629      	mov	r1, r5
 80092d0:	f001 fcf6 	bl	800acc0 <VL53L1_preset_mode_olt>
		break;
 80092d4:	e79e      	b.n	8009214 <VL53L1_set_preset_mode+0x80>
		status = VL53L1_preset_mode_singleshot_ranging(
 80092d6:	e88d 4002 	stmia.w	sp, {r1, lr}
 80092da:	465a      	mov	r2, fp
 80092dc:	4629      	mov	r1, r5
 80092de:	f001 fc51 	bl	800ab84 <VL53L1_preset_mode_singleshot_ranging>
		break;
 80092e2:	e797      	b.n	8009214 <VL53L1_set_preset_mode+0x80>
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 80092e4:	e88d 4002 	stmia.w	sp, {r1, lr}
 80092e8:	f8cd c008 	str.w	ip, [sp, #8]
 80092ec:	465a      	mov	r2, fp
 80092ee:	4629      	mov	r1, r5
 80092f0:	f001 faf2 	bl	800a8d8 <VL53L1_preset_mode_low_power_auto_short_ranging>
		break;
 80092f4:	e78e      	b.n	8009214 <VL53L1_set_preset_mode+0x80>
		status = VL53L1_preset_mode_low_power_auto_ranging(
 80092f6:	e88d 4002 	stmia.w	sp, {r1, lr}
 80092fa:	f8cd c008 	str.w	ip, [sp, #8]
 80092fe:	465a      	mov	r2, fp
 8009300:	4629      	mov	r1, r5
 8009302:	f001 fa3f 	bl	800a784 <VL53L1_preset_mode_low_power_auto_ranging>
		break;
 8009306:	e785      	b.n	8009214 <VL53L1_set_preset_mode+0x80>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8009308:	f06f 000e 	mvn.w	r0, #14
}
 800930c:	b005      	add	sp, #20
 800930e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		status = VL53L1_ERROR_INVALID_PARAMS;
 8009312:	f06f 0003 	mvn.w	r0, #3
 8009316:	e79c      	b.n	8009252 <VL53L1_set_preset_mode+0xbe>

08009318 <VL53L1_get_lite_sigma_threshold>:
			pdev->tim_cfg.range_config__sigma_thresh;
 8009318:	f8b0 31a6 	ldrh.w	r3, [r0, #422]	; 0x1a6
	*plite_sigma =
 800931c:	800b      	strh	r3, [r1, #0]
}
 800931e:	2000      	movs	r0, #0
 8009320:	4770      	bx	lr
 8009322:	bf00      	nop

08009324 <VL53L1_set_lite_sigma_threshold>:
	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 8009324:	f8a0 11a6 	strh.w	r1, [r0, #422]	; 0x1a6
}
 8009328:	2000      	movs	r0, #0
 800932a:	4770      	bx	lr

0800932c <VL53L1_get_lite_min_count_rate>:
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 800932c:	f8b0 31a8 	ldrh.w	r3, [r0, #424]	; 0x1a8
	*plite_mincountrate =
 8009330:	800b      	strh	r3, [r1, #0]
}
 8009332:	2000      	movs	r0, #0
 8009334:	4770      	bx	lr
 8009336:	bf00      	nop

08009338 <VL53L1_set_lite_min_count_rate>:
	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 8009338:	f8a0 11a8 	strh.w	r1, [r0, #424]	; 0x1a8
}
 800933c:	2000      	movs	r0, #0
 800933e:	4770      	bx	lr

08009340 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 8009340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009344:	4604      	mov	r4, r0
	pdev->measurement_mode = measurement_mode;

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 8009346:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 800934a:	f890 02e6 	ldrb.w	r0, [r0, #742]	; 0x2e6
	pdev->measurement_mode = measurement_mode;
 800934e:	70a1      	strb	r1, [r4, #2]
		(psystem->system__mode_start &
 8009350:	f003 030f 	and.w	r3, r3, #15
	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 8009354:	28ff      	cmp	r0, #255	; 0xff
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8009356:	ea41 0103 	orr.w	r1, r1, r3
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 800935a:	bf04      	itt	eq
 800935c:	2300      	moveq	r3, #0
 800935e:	f884 32e6 	strbeq.w	r3, [r4, #742]	; 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8009362:	f8d4 32e4 	ldr.w	r3, [r4, #740]	; 0x2e4
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8009366:	f8b4 6142 	ldrh.w	r6, [r4, #322]	; 0x142
	psystem->system__mode_start =
 800936a:	f884 11cc 	strb.w	r1, [r4, #460]	; 0x1cc
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800936e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009372:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
{
 800937a:	b0c0      	sub	sp, #256	; 0x100
 800937c:	4615      	mov	r5, r2
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800937e:	f8a4 617c 	strh.w	r6, [r4, #380]	; 0x17c
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8009382:	f000 8090 	beq.w	80094a6 <VL53L1_init_and_start_range+0x166>
			device_config_level =
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8009386:	4a65      	ldr	r2, [pc, #404]	; (800951c <VL53L1_init_and_start_range+0x1dc>)
 8009388:	4293      	cmp	r3, r2
 800938a:	f000 80ae 	beq.w	80094ea <VL53L1_init_and_start_range+0x1aa>
 800938e:	1e6b      	subs	r3, r5, #1
 8009390:	b2db      	uxtb	r3, r3
 8009392:	2b05      	cmp	r3, #5
 8009394:	f240 80b6 	bls.w	8009504 <VL53L1_init_and_start_range+0x1c4>
		break;
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 8009398:	2605      	movs	r6, #5
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800939a:	2783      	movs	r7, #131	; 0x83

	/* Initialize buffer */

	pbuffer = &buffer[0];
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
		*pbuffer++ = 0;
 800939c:	1e72      	subs	r2, r6, #1
 800939e:	b292      	uxth	r2, r2
 80093a0:	2e00      	cmp	r6, #0
 80093a2:	f102 0201 	add.w	r2, r2, #1
 80093a6:	4668      	mov	r0, sp
 80093a8:	bf08      	it	eq
 80093aa:	2201      	moveq	r2, #1
 80093ac:	2100      	movs	r1, #0
 80093ae:	46e8      	mov	r8, sp
 80093b0:	f00a fd97 	bl	8013ee2 <memset>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 80093b4:	2d05      	cmp	r5, #5
 80093b6:	d823      	bhi.n	8009400 <VL53L1_init_and_start_range+0xc0>
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 80093b8:	d02d      	beq.n	8009416 <VL53L1_init_and_start_range+0xd6>
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 80093ba:	2d04      	cmp	r5, #4
 80093bc:	d036      	beq.n	800942c <VL53L1_init_and_start_range+0xec>
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 80093be:	2d03      	cmp	r5, #3
 80093c0:	d03f      	beq.n	8009442 <VL53L1_init_and_start_range+0x102>
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 80093c2:	2d02      	cmp	r5, #2
 80093c4:	d048      	beq.n	8009458 <VL53L1_init_and_start_range+0x118>
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 80093c6:	2d00      	cmp	r5, #0
 80093c8:	d151      	bne.n	800946e <VL53L1_init_and_start_range+0x12e>
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 80093ca:	f1c7 0283 	rsb	r2, r7, #131	; 0x83
				VL53L1_SYSTEM_CONTROL_I2C_INDEX - i2c_index;

		status =
 80093ce:	fa18 f282 	uxtah	r2, r8, r2
 80093d2:	2105      	movs	r1, #5
 80093d4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
 80093d8:	f002 fac8 	bl	800b96c <VL53L1_i2c_encode_system_control>
				&buffer[i2c_buffer_offset_bytes]);
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 80093dc:	b968      	cbnz	r0, 80093fa <VL53L1_init_and_start_range+0xba>
		status =
 80093de:	4633      	mov	r3, r6
 80093e0:	4642      	mov	r2, r8
 80093e2:	4639      	mov	r1, r7
 80093e4:	4620      	mov	r0, r4
 80093e6:	f008 fb81 	bl	8011aec <VL53L1_WriteMulti>
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 80093ea:	b930      	cbnz	r0, 80093fa <VL53L1_init_and_start_range+0xba>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 80093ec:	4620      	mov	r0, r4
 80093ee:	f001 fd29 	bl	800ae44 <VL53L1_update_ll_driver_rd_state>

	if (status == VL53L1_ERROR_NONE)
 80093f2:	b910      	cbnz	r0, 80093fa <VL53L1_init_and_start_range+0xba>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 80093f4:	4620      	mov	r0, r4
 80093f6:	f001 fda1 	bl	800af3c <VL53L1_update_ll_driver_cfg_state>

	LOG_FUNCTION_END(status);

	return status;
}
 80093fa:	b040      	add	sp, #256	; 0x100
 80093fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		i2c_buffer_offset_bytes = \
 8009400:	f1c7 0201 	rsb	r2, r7, #1
		status =
 8009404:	fa18 f282 	uxtah	r2, r8, r2
 8009408:	210b      	movs	r1, #11
 800940a:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 800940e:	f002 f85d 	bl	800b4cc <VL53L1_i2c_encode_static_nvm_managed>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8009412:	2800      	cmp	r0, #0
 8009414:	d1f1      	bne.n	80093fa <VL53L1_init_and_start_range+0xba>
		i2c_buffer_offset_bytes = \
 8009416:	f1c7 020d 	rsb	r2, r7, #13
		status =
 800941a:	fa18 f282 	uxtah	r2, r8, r2
 800941e:	2117      	movs	r1, #23
 8009420:	f104 0042 	add.w	r0, r4, #66	; 0x42
 8009424:	f002 f8ba 	bl	800b59c <VL53L1_i2c_encode_customer_nvm_managed>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8009428:	2800      	cmp	r0, #0
 800942a:	d1e6      	bne.n	80093fa <VL53L1_init_and_start_range+0xba>
		i2c_buffer_offset_bytes = \
 800942c:	f1c7 0224 	rsb	r2, r7, #36	; 0x24
		status =
 8009430:	fa18 f282 	uxtah	r2, r8, r2
 8009434:	2120      	movs	r1, #32
 8009436:	f504 70b2 	add.w	r0, r4, #356	; 0x164
 800943a:	f002 f95d 	bl	800b6f8 <VL53L1_i2c_encode_static_config>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 800943e:	2800      	cmp	r0, #0
 8009440:	d1db      	bne.n	80093fa <VL53L1_init_and_start_range+0xba>
		i2c_buffer_offset_bytes =
 8009442:	f1c7 0244 	rsb	r2, r7, #68	; 0x44
		status =
 8009446:	fa18 f282 	uxtah	r2, r8, r2
 800944a:	2116      	movs	r1, #22
 800944c:	f504 70c2 	add.w	r0, r4, #388	; 0x184
 8009450:	f002 f9c0 	bl	800b7d4 <VL53L1_i2c_encode_general_config>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8009454:	2800      	cmp	r0, #0
 8009456:	d1d0      	bne.n	80093fa <VL53L1_init_and_start_range+0xba>
		i2c_buffer_offset_bytes = \
 8009458:	f1c7 025a 	rsb	r2, r7, #90	; 0x5a
		status =
 800945c:	fa18 f282 	uxtah	r2, r8, r2
 8009460:	2117      	movs	r1, #23
 8009462:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
 8009466:	f002 f9fb 	bl	800b860 <VL53L1_i2c_encode_timing_config>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 800946a:	2800      	cmp	r0, #0
 800946c:	d1c5      	bne.n	80093fa <VL53L1_init_and_start_range+0xba>
		if ((psystem->system__mode_start &
 800946e:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
		i2c_buffer_offset_bytes = \
 8009472:	f1c7 0271 	rsb	r2, r7, #113	; 0x71
		if ((psystem->system__mode_start &
 8009476:	069b      	lsls	r3, r3, #26
		i2c_buffer_offset_bytes = \
 8009478:	b292      	uxth	r2, r2
		if ((psystem->system__mode_start &
 800947a:	d509      	bpl.n	8009490 <VL53L1_init_and_start_range+0x150>
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 800947c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 8009480:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 8009484:	f043 0301 	orr.w	r3, r3, #1
 8009488:	f884 31b4 	strb.w	r3, [r4, #436]	; 0x1b4
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 800948c:	f884 31c0 	strb.w	r3, [r4, #448]	; 0x1c0
		status =
 8009490:	4442      	add	r2, r8
 8009492:	2112      	movs	r1, #18
 8009494:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
 8009498:	f002 fa26 	bl	800b8e8 <VL53L1_i2c_encode_dynamic_config>
	if (status == VL53L1_ERROR_NONE) {
 800949c:	2800      	cmp	r0, #0
 800949e:	d094      	beq.n	80093ca <VL53L1_init_and_start_range+0x8a>
}
 80094a0:	b040      	add	sp, #256	; 0x100
 80094a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((pdev->dyn_cfg.system__sequence_config & (
 80094a6:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
			pdev->gen_cfg.system__interrupt_config_gpio;
 80094aa:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 80094ae:	f884 22e7 	strb.w	r2, [r4, #743]	; 0x2e7
		if ((pdev->dyn_cfg.system__sequence_config & (
 80094b2:	f013 0f60 	tst.w	r3, #96	; 0x60
				pdev->customer.mm_config__outer_offset_mm * 4;
 80094b6:	bf03      	ittte	eq
 80094b8:	f8b4 3058 	ldrheq.w	r3, [r4, #88]	; 0x58
 80094bc:	009b      	lsleq	r3, r3, #2
 80094be:	b29b      	uxtheq	r3, r3
 80094c0:	2300      	movne	r3, #0
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 80094c2:	2120      	movs	r1, #32
		if (device_config_level <
 80094c4:	2d04      	cmp	r5, #4
 80094c6:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 80094ca:	f884 1186 	strb.w	r1, [r4, #390]	; 0x186
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80094ce:	f8d4 32e4 	ldr.w	r3, [r4, #740]	; 0x2e4
		if (device_config_level <
 80094d2:	d812      	bhi.n	80094fa <VL53L1_init_and_start_range+0x1ba>
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80094d4:	4911      	ldr	r1, [pc, #68]	; (800951c <VL53L1_init_and_start_range+0x1dc>)
 80094d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80094da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80094de:	428b      	cmp	r3, r1
 80094e0:	d005      	beq.n	80094ee <VL53L1_init_and_start_range+0x1ae>
 80094e2:	267b      	movs	r6, #123	; 0x7b
 80094e4:	270d      	movs	r7, #13
			device_config_level =
 80094e6:	2505      	movs	r5, #5
 80094e8:	e758      	b.n	800939c <VL53L1_init_and_start_range+0x5c>
 80094ea:	f894 22e7 	ldrb.w	r2, [r4, #743]	; 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 80094ee:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
 80094f2:	2687      	movs	r6, #135	; 0x87
 80094f4:	2701      	movs	r7, #1
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 80094f6:	2506      	movs	r5, #6
 80094f8:	e750      	b.n	800939c <VL53L1_init_and_start_range+0x5c>
 80094fa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80094fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009502:	e740      	b.n	8009386 <VL53L1_init_and_start_range+0x46>
 8009504:	4a06      	ldr	r2, [pc, #24]	; (8009520 <VL53L1_init_and_start_range+0x1e0>)
 8009506:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
 800950a:	f1c7 0688 	rsb	r6, r7, #136	; 0x88
 800950e:	b2b6      	uxth	r6, r6
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 8009510:	2e00      	cmp	r6, #0
 8009512:	f47f af43 	bne.w	800939c <VL53L1_init_and_start_range+0x5c>
 8009516:	46e8      	mov	r8, sp
 8009518:	e74c      	b.n	80093b4 <VL53L1_init_and_start_range+0x74>
 800951a:	bf00      	nop
 800951c:	00010100 	.word	0x00010100
 8009520:	08014508 	.word	0x08014508

08009524 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 8009524:	b538      	push	{r3, r4, r5, lr}
			VL53L1DevStructGetLLDriverHandle(Dev);

	/* Merge ABORT mode with mode_start */

	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8009526:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
 800952a:	f003 030f 	and.w	r3, r3, #15
{
 800952e:	4604      	mov	r4, r0
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8009530:	f063 037f 	orn	r3, r3, #127	; 0x7f
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 8009534:	f500 71e4 	add.w	r1, r0, #456	; 0x1c8
	pdev->sys_ctrl.system__mode_start =
 8009538:	f880 31cc 	strb.w	r3, [r0, #460]	; 0x1cc
	status = VL53L1_set_system_control(
 800953c:	f002 fa30 	bl	800b9a0 <VL53L1_set_system_control>
				Dev,
				&pdev->sys_ctrl);

	/* Abort bit is auto clear so clear register group structure to match */
	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);
 8009540:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
 8009544:	f003 030f 	and.w	r3, r3, #15
	pdev->sys_ctrl.system__mode_start =
 8009548:	f884 31cc 	strb.w	r3, [r4, #460]	; 0x1cc
	status = VL53L1_set_system_control(
 800954c:	4605      	mov	r5, r0

	/* reset zone dynamic info */
	VL53L1_init_ll_driver_state(
 800954e:	2103      	movs	r1, #3
 8009550:	4620      	mov	r0, r4
 8009552:	f001 fc63 	bl	800ae1c <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* reset low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 8009556:	f894 32e5 	ldrb.w	r3, [r4, #741]	; 0x2e5
 800955a:	2b01      	cmp	r3, #1
 800955c:	d001      	beq.n	8009562 <VL53L1_stop_range+0x3e>
		VL53L1_low_power_auto_data_stop_range(Dev);

	return status;
}
 800955e:	4628      	mov	r0, r5
 8009560:	bd38      	pop	{r3, r4, r5, pc}
		VL53L1_low_power_auto_data_stop_range(Dev);
 8009562:	4620      	mov	r0, r4
 8009564:	f001 ff10 	bl	800b388 <VL53L1_low_power_auto_data_stop_range>
}
 8009568:	4628      	mov	r0, r5
 800956a:	bd38      	pop	{r3, r4, r5, pc}

0800956c <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 800956c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 8009570:	f890 22e6 	ldrb.w	r2, [r0, #742]	; 0x2e6
		(psystem->system__mode_start &
 8009574:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
{
 8009578:	4604      	mov	r4, r0
		(psystem->system__mode_start &
 800957a:	f003 030f 	and.w	r3, r3, #15
	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 800957e:	2aff      	cmp	r2, #255	; 0xff
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8009580:	f8b0 0142 	ldrh.w	r0, [r0, #322]	; 0x142
	pdev->measurement_mode = measurement_mode;
 8009584:	70a1      	strb	r1, [r4, #2]
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8009586:	ea41 0103 	orr.w	r1, r1, r3
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 800958a:	bf04      	itt	eq
 800958c:	2300      	moveq	r3, #0
 800958e:	f884 32e6 	strbeq.w	r3, [r4, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8009592:	f8d4 32e4 	ldr.w	r3, [r4, #740]	; 0x2e4
 8009596:	4a67      	ldr	r2, [pc, #412]	; (8009734 <VL53L1_clear_interrupt_and_enable_next_range+0x1c8>)
	psystem->system__mode_start =
 8009598:	f884 11cc 	strb.w	r1, [r4, #460]	; 0x1cc
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800959c:	4013      	ands	r3, r2
 800959e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
{
 80095a2:	b0c1      	sub	sp, #260	; 0x104
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 80095a4:	f8a4 017c 	strh.w	r0, [r4, #380]	; 0x17c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 80095a8:	f504 76da 	add.w	r6, r4, #436	; 0x1b4
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80095ac:	d071      	beq.n	8009692 <VL53L1_clear_interrupt_and_enable_next_range+0x126>
 80095ae:	2744      	movs	r7, #68	; 0x44
 80095b0:	46b8      	mov	r8, r7
 80095b2:	f04f 0903 	mov.w	r9, #3
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80095b6:	4a60      	ldr	r2, [pc, #384]	; (8009738 <VL53L1_clear_interrupt_and_enable_next_range+0x1cc>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d115      	bne.n	80095e8 <VL53L1_clear_interrupt_and_enable_next_range+0x7c>
		pdev->gen_cfg.system__interrupt_config_gpio =
 80095bc:	f894 32e7 	ldrb.w	r3, [r4, #743]	; 0x2e7
 80095c0:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
 80095c4:	2287      	movs	r2, #135	; 0x87
 80095c6:	2100      	movs	r1, #0
 80095c8:	4668      	mov	r0, sp
 80095ca:	f00a fc8a 	bl	8013ee2 <memset>
		status =
 80095ce:	466a      	mov	r2, sp
 80095d0:	210b      	movs	r1, #11
 80095d2:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 80095d6:	466d      	mov	r5, sp
 80095d8:	f001 ff78 	bl	800b4cc <VL53L1_i2c_encode_static_nvm_managed>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 80095dc:	2800      	cmp	r0, #0
 80095de:	f000 808a 	beq.w	80096f6 <VL53L1_clear_interrupt_and_enable_next_range+0x18a>
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
}
 80095e2:	b041      	add	sp, #260	; 0x104
 80095e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*pbuffer++ = 0;
 80095e8:	1e7a      	subs	r2, r7, #1
 80095ea:	2f00      	cmp	r7, #0
 80095ec:	b292      	uxth	r2, r2
 80095ee:	f102 0201 	add.w	r2, r2, #1
 80095f2:	4668      	mov	r0, sp
 80095f4:	bf08      	it	eq
 80095f6:	2201      	moveq	r2, #1
 80095f8:	2100      	movs	r1, #0
 80095fa:	f00a fc72 	bl	8013ee2 <memset>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 80095fe:	f1b9 0f05 	cmp.w	r9, #5
 8009602:	466d      	mov	r5, sp
 8009604:	d07a      	beq.n	80096fc <VL53L1_clear_interrupt_and_enable_next_range+0x190>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8009606:	f1b9 0f03 	cmp.w	r9, #3
 800960a:	f040 8083 	bne.w	8009714 <VL53L1_clear_interrupt_and_enable_next_range+0x1a8>
		i2c_buffer_offset_bytes =
 800960e:	f1c8 0244 	rsb	r2, r8, #68	; 0x44
		status =
 8009612:	fa15 f282 	uxtah	r2, r5, r2
 8009616:	2116      	movs	r1, #22
 8009618:	f504 70c2 	add.w	r0, r4, #388	; 0x184
 800961c:	f002 f8da 	bl	800b7d4 <VL53L1_i2c_encode_general_config>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8009620:	2800      	cmp	r0, #0
 8009622:	d1de      	bne.n	80095e2 <VL53L1_clear_interrupt_and_enable_next_range+0x76>
		i2c_buffer_offset_bytes = \
 8009624:	f1c8 025a 	rsb	r2, r8, #90	; 0x5a
		status =
 8009628:	fa15 f282 	uxtah	r2, r5, r2
 800962c:	2117      	movs	r1, #23
 800962e:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
 8009632:	f002 f915 	bl	800b860 <VL53L1_i2c_encode_timing_config>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8009636:	2800      	cmp	r0, #0
 8009638:	d1d3      	bne.n	80095e2 <VL53L1_clear_interrupt_and_enable_next_range+0x76>
		if ((psystem->system__mode_start &
 800963a:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
		i2c_buffer_offset_bytes = \
 800963e:	f1c8 0271 	rsb	r2, r8, #113	; 0x71
		if ((psystem->system__mode_start &
 8009642:	069b      	lsls	r3, r3, #26
		i2c_buffer_offset_bytes = \
 8009644:	b292      	uxth	r2, r2
		if ((psystem->system__mode_start &
 8009646:	d44b      	bmi.n	80096e0 <VL53L1_clear_interrupt_and_enable_next_range+0x174>
		status =
 8009648:	442a      	add	r2, r5
 800964a:	4630      	mov	r0, r6
 800964c:	2112      	movs	r1, #18
 800964e:	f002 f94b 	bl	800b8e8 <VL53L1_i2c_encode_dynamic_config>
	if (status == VL53L1_ERROR_NONE) {
 8009652:	2800      	cmp	r0, #0
 8009654:	d1c5      	bne.n	80095e2 <VL53L1_clear_interrupt_and_enable_next_range+0x76>
		i2c_buffer_offset_bytes = \
 8009656:	f1c8 0283 	rsb	r2, r8, #131	; 0x83
		status =
 800965a:	fa15 f282 	uxtah	r2, r5, r2
 800965e:	2105      	movs	r1, #5
 8009660:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
 8009664:	f002 f982 	bl	800b96c <VL53L1_i2c_encode_system_control>
	if (status == VL53L1_ERROR_NONE) {
 8009668:	2800      	cmp	r0, #0
 800966a:	d1ba      	bne.n	80095e2 <VL53L1_clear_interrupt_and_enable_next_range+0x76>
		status =
 800966c:	463b      	mov	r3, r7
 800966e:	462a      	mov	r2, r5
 8009670:	4641      	mov	r1, r8
 8009672:	4620      	mov	r0, r4
 8009674:	f008 fa3a 	bl	8011aec <VL53L1_WriteMulti>
	if (status == VL53L1_ERROR_NONE)
 8009678:	2800      	cmp	r0, #0
 800967a:	d1b2      	bne.n	80095e2 <VL53L1_clear_interrupt_and_enable_next_range+0x76>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 800967c:	4620      	mov	r0, r4
 800967e:	f001 fbe1 	bl	800ae44 <VL53L1_update_ll_driver_rd_state>
	if (status == VL53L1_ERROR_NONE)
 8009682:	2800      	cmp	r0, #0
 8009684:	d1ad      	bne.n	80095e2 <VL53L1_clear_interrupt_and_enable_next_range+0x76>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 8009686:	4620      	mov	r0, r4
 8009688:	f001 fc58 	bl	800af3c <VL53L1_update_ll_driver_cfg_state>
}
 800968c:	b041      	add	sp, #260	; 0x104
 800968e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if ((pdev->dyn_cfg.system__sequence_config & (
 8009692:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
		pdev->low_power_auto_data.saved_interrupt_config =
 8009696:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
 800969a:	f884 12e7 	strb.w	r1, [r4, #743]	; 0x2e7
		if ((pdev->dyn_cfg.system__sequence_config & (
 800969e:	f013 0f60 	tst.w	r3, #96	; 0x60
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 80096a2:	f04f 0120 	mov.w	r1, #32
 80096a6:	f884 1186 	strb.w	r1, [r4, #390]	; 0x186
		if ((pdev->dyn_cfg.system__sequence_config & (
 80096aa:	d10d      	bne.n	80096c8 <VL53L1_clear_interrupt_and_enable_next_range+0x15c>
				pdev->customer.mm_config__outer_offset_mm * 4;
 80096ac:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80096b0:	f8d4 32e4 	ldr.w	r3, [r4, #740]	; 0x2e4
 80096b4:	0089      	lsls	r1, r1, #2
			pdev->customer.algo__part_to_part_range_offset_mm =
 80096b6:	f8a4 1054 	strh.w	r1, [r4, #84]	; 0x54
 80096ba:	4013      	ands	r3, r2
 80096bc:	277b      	movs	r7, #123	; 0x7b
 80096be:	f04f 080d 	mov.w	r8, #13
			device_config_level =
 80096c2:	f04f 0905 	mov.w	r9, #5
 80096c6:	e776      	b.n	80095b6 <VL53L1_clear_interrupt_and_enable_next_range+0x4a>
 80096c8:	f8d4 32e4 	ldr.w	r3, [r4, #740]	; 0x2e4
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 80096cc:	2100      	movs	r1, #0
 80096ce:	4013      	ands	r3, r2
 80096d0:	f8a4 1054 	strh.w	r1, [r4, #84]	; 0x54
 80096d4:	277b      	movs	r7, #123	; 0x7b
 80096d6:	f04f 080d 	mov.w	r8, #13
			device_config_level =
 80096da:	f04f 0905 	mov.w	r9, #5
 80096de:	e76a      	b.n	80095b6 <VL53L1_clear_interrupt_and_enable_next_range+0x4a>
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 80096e0:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 80096e4:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 80096e8:	f043 0301 	orr.w	r3, r3, #1
 80096ec:	f884 31b4 	strb.w	r3, [r4, #436]	; 0x1b4
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 80096f0:	f884 31c0 	strb.w	r3, [r4, #448]	; 0x1c0
 80096f4:	e7a8      	b.n	8009648 <VL53L1_clear_interrupt_and_enable_next_range+0xdc>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 80096f6:	f04f 0801 	mov.w	r8, #1
	i2c_buffer_size_bytes = \
 80096fa:	2787      	movs	r7, #135	; 0x87
		i2c_buffer_offset_bytes = \
 80096fc:	f1c8 020d 	rsb	r2, r8, #13
		status =
 8009700:	fa15 f282 	uxtah	r2, r5, r2
 8009704:	2117      	movs	r1, #23
 8009706:	f104 0042 	add.w	r0, r4, #66	; 0x42
 800970a:	f001 ff47 	bl	800b59c <VL53L1_i2c_encode_customer_nvm_managed>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 800970e:	2800      	cmp	r0, #0
 8009710:	f47f af67 	bne.w	80095e2 <VL53L1_clear_interrupt_and_enable_next_range+0x76>
		i2c_buffer_offset_bytes = \
 8009714:	f1c8 0224 	rsb	r2, r8, #36	; 0x24
		status =
 8009718:	fa15 f282 	uxtah	r2, r5, r2
 800971c:	2120      	movs	r1, #32
 800971e:	f504 70b2 	add.w	r0, r4, #356	; 0x164
 8009722:	f001 ffe9 	bl	800b6f8 <VL53L1_i2c_encode_static_config>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8009726:	2800      	cmp	r0, #0
 8009728:	f43f af71 	beq.w	800960e <VL53L1_clear_interrupt_and_enable_next_range+0xa2>
}
 800972c:	b041      	add	sp, #260	; 0x104
 800972e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009732:	bf00      	nop
 8009734:	00ffff00 	.word	0x00ffff00
 8009738:	00010100 	.word	0x00010100

0800973c <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 800973c:	b5f0      	push	{r4, r5, r6, r7, lr}

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 800973e:	78ce      	ldrb	r6, [r1, #3]
 8009740:	709e      	strb	r6, [r3, #2]
 8009742:	784c      	ldrb	r4, [r1, #1]

	pdata = &(presults->data[0]);

	for (i = 0 ; i < 2 ; i++) {

		pdata->range_id     = i;
 8009744:	2500      	movs	r5, #0
 8009746:	f004 041f 	and.w	r4, r4, #31
 800974a:	711d      	strb	r5, [r3, #4]
		pdata->time_stamp   = 0;
 800974c:	609d      	str	r5, [r3, #8]

		if ((psys->result__stream_count == 0) &&
 800974e:	2e00      	cmp	r6, #0
 8009750:	d163      	bne.n	800981a <VL53L1_copy_sys_and_core_results_to_range_results+0xde>
 8009752:	2c09      	cmp	r4, #9
 8009754:	bf14      	ite	ne
 8009756:	4625      	movne	r5, r4
 8009758:	2513      	moveq	r5, #19
 800975a:	f883 5042 	strb.w	r5, [r3, #66]	; 0x42

		switch (i) {

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 800975e:	788d      	ldrb	r5, [r1, #2]
 8009760:	2d07      	cmp	r5, #7
 8009762:	d060      	beq.n	8009826 <VL53L1_copy_sys_and_core_results_to_range_results+0xea>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 8009764:	2d08      	cmp	r5, #8
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
			else
				pdata->actual_effective_spads =
 8009766:	bf14      	ite	ne
 8009768:	888d      	ldrhne	r5, [r1, #4]
				pdata->actual_effective_spads =
 800976a:	8a8d      	ldrheq	r5, [r1, #20]
 800976c:	829d      	strh	r5, [r3, #20]
				psys->result__ambient_count_rate_mcps_sd0;

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 800976e:	894d      	ldrh	r5, [r1, #10]
			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;

			range_mm =
 8009770:	89cf      	ldrh	r7, [r1, #14]
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8009772:	016d      	lsls	r5, r5, #5
			pdata->sigma_mm = (uint16_t)tmpu32;
 8009774:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8009778:	4575      	cmp	r5, lr
 800977a:	bf28      	it	cs
 800977c:	4675      	movcs	r5, lr
			pdata->peak_signal_count_rate_mcps =
 800977e:	f8b1 e010 	ldrh.w	lr, [r1, #16]
 8009782:	f8a3 e030 	strh.w	lr, [r3, #48]	; 0x30
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;

			/* apply correction gain */
			range_mm *= gain_factor;
 8009786:	fb07 f000 	mul.w	r0, r7, r0
			pdata->avg_signal_count_rate_mcps =
 800978a:	f8b1 e016 	ldrh.w	lr, [r1, #22]
			pdata->median_phase =
 800978e:	898f      	ldrh	r7, [r1, #12]
			pdata->avg_signal_count_rate_mcps =
 8009790:	f8a3 e032 	strh.w	lr, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps =
 8009794:	f8b1 e008 	ldrh.w	lr, [r1, #8]
			pdata->sigma_mm = (uint16_t)tmpu32;
 8009798:	879d      	strh	r5, [r3, #60]	; 0x3c
			range_mm += 0x0400;
			range_mm /= 0x0800;
 800979a:	f510 6580 	adds.w	r5, r0, #1024	; 0x400
 800979e:	bf48      	it	mi
 80097a0:	f600 35ff 	addwmi	r5, r0, #3071	; 0xbff
 80097a4:	12ed      	asrs	r5, r5, #11

			pdata->median_range_mm = (int16_t)range_mm;

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
			pdata->signal_total_events =
 80097a6:	6890      	ldr	r0, [r2, #8]
			pdata->median_phase =
 80097a8:	87df      	strh	r7, [r3, #62]	; 0x3e
			pdata->ranging_total_events =
 80097aa:	6857      	ldr	r7, [r2, #4]
			pdata->median_range_mm = (int16_t)range_mm;
 80097ac:	f8a3 5040 	strh.w	r5, [r3, #64]	; 0x40
				pcore->result_core__signal_total_events_sd0;
			pdata->total_periods_elapsed =
 80097b0:	68d5      	ldr	r5, [r2, #12]
				pcore->result_core__total_periods_elapsed_sd0;
			pdata->ambient_window_events =
 80097b2:	6812      	ldr	r2, [r2, #0]
			pdata->ranging_total_events =
 80097b4:	629f      	str	r7, [r3, #40]	; 0x28
			pdata->signal_total_events =
 80097b6:	62d8      	str	r0, [r3, #44]	; 0x2c
		pdata->range_id     = i;
 80097b8:	2701      	movs	r7, #1
		pdata->time_stamp   = 0;
 80097ba:	2000      	movs	r0, #0
			pdata->ambient_count_rate_mcps =
 80097bc:	f8a3 e034 	strh.w	lr, [r3, #52]	; 0x34
			pdata->total_periods_elapsed =
 80097c0:	619d      	str	r5, [r3, #24]
			pdata->ambient_window_events =
 80097c2:	625a      	str	r2, [r3, #36]	; 0x24
		pdata->range_id     = i;
 80097c4:	f883 7044 	strb.w	r7, [r3, #68]	; 0x44
		pdata->time_stamp   = 0;
 80097c8:	6498      	str	r0, [r3, #72]	; 0x48
		if ((psys->result__stream_count == 0) &&
 80097ca:	b37e      	cbz	r6, 800982c <VL53L1_copy_sys_and_core_results_to_range_results+0xf0>
 80097cc:	4622      	mov	r2, r4
 80097ce:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
				psys->result__ambient_count_rate_mcps_sd1;

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 80097d2:	8bca      	ldrh	r2, [r1, #30]
			pdata->actual_effective_spads =
 80097d4:	8b08      	ldrh	r0, [r1, #24]
			pdata->peak_signal_count_rate_mcps =
 80097d6:	8b4f      	ldrh	r7, [r1, #26]
			pdata->actual_effective_spads =
 80097d8:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 80097dc:	0152      	lsls	r2, r2, #5
			pdata->avg_signal_count_rate_mcps =
 80097de:	f64f 70ff 	movw	r0, #65535	; 0xffff
			if (tmpu32 > 0xFFFF) {
				tmpu32 = 0xFFFF;
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 80097e2:	4282      	cmp	r2, r0
			pdata->ambient_count_rate_mcps =
 80097e4:	8b8e      	ldrh	r6, [r1, #28]

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
 80097e6:	8c0d      	ldrh	r5, [r1, #32]
 80097e8:	f8a3 507e 	strh.w	r5, [r3, #126]	; 0x7e
			pdata->sigma_mm = (uint16_t)tmpu32;
 80097ec:	bf28      	it	cs
 80097ee:	4602      	movcs	r2, r0

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 80097f0:	2100      	movs	r1, #0
 80097f2:	2c11      	cmp	r4, #17
			pdata->peak_signal_count_rate_mcps =
 80097f4:	f8a3 7070 	strh.w	r7, [r3, #112]	; 0x70
			pdata->avg_signal_count_rate_mcps =
 80097f8:	f8a3 0072 	strh.w	r0, [r3, #114]	; 0x72
			pdata->sigma_mm = (uint16_t)tmpu32;
 80097fc:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
			pdata->ambient_count_rate_mcps =
 8009800:	f8a3 6074 	strh.w	r6, [r3, #116]	; 0x74
	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8009804:	70d9      	strb	r1, [r3, #3]
 8009806:	d807      	bhi.n	8009818 <VL53L1_copy_sys_and_core_results_to_range_results+0xdc>
 8009808:	2201      	movs	r2, #1
 800980a:	480b      	ldr	r0, [pc, #44]	; (8009838 <VL53L1_copy_sys_and_core_results_to_range_results+0xfc>)
 800980c:	40a2      	lsls	r2, r4
 800980e:	4202      	tst	r2, r0
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8009810:	bf1c      	itt	ne
 8009812:	70dc      	strbne	r4, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 8009814:	f883 1042 	strbne.w	r1, [r3, #66]	; 0x42
 8009818:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((psys->result__stream_count == 0) &&
 800981a:	4625      	mov	r5, r4
 800981c:	f883 5042 	strb.w	r5, [r3, #66]	; 0x42
			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 8009820:	788d      	ldrb	r5, [r1, #2]
 8009822:	2d07      	cmp	r5, #7
 8009824:	d19e      	bne.n	8009764 <VL53L1_copy_sys_and_core_results_to_range_results+0x28>
				pdata->actual_effective_spads =
 8009826:	8a4d      	ldrh	r5, [r1, #18]
 8009828:	829d      	strh	r5, [r3, #20]
 800982a:	e7a0      	b.n	800976e <VL53L1_copy_sys_and_core_results_to_range_results+0x32>
		if ((psys->result__stream_count == 0) &&
 800982c:	2c09      	cmp	r4, #9
 800982e:	bf14      	ite	ne
 8009830:	4622      	movne	r2, r4
 8009832:	2213      	moveq	r2, #19
 8009834:	e7cb      	b.n	80097ce <VL53L1_copy_sys_and_core_results_to_range_results+0x92>
 8009836:	bf00      	nop
 8009838:	0002200e 	.word	0x0002200e

0800983c <VL53L1_get_device_results>:
{
 800983c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	switch (device_results_level) {
 8009840:	2901      	cmp	r1, #1
{
 8009842:	b0c0      	sub	sp, #256	; 0x100
 8009844:	4604      	mov	r4, r0
 8009846:	4691      	mov	r9, r2
	VL53L1_range_results_t   *presults = &(pres->range_results);
 8009848:	f500 783d 	add.w	r8, r0, #756	; 0x2f4
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 800984c:	f500 7a22 	add.w	sl, r0, #648	; 0x288
	switch (device_results_level) {
 8009850:	d050      	beq.n	80098f4 <VL53L1_get_device_results+0xb8>
 8009852:	2902      	cmp	r1, #2
 8009854:	460e      	mov	r6, r1
		status =
 8009856:	466f      	mov	r7, sp
 8009858:	466a      	mov	r2, sp
	switch (device_results_level) {
 800985a:	d117      	bne.n	800988c <VL53L1_get_device_results+0x50>
		status =
 800985c:	2386      	movs	r3, #134	; 0x86
 800985e:	2188      	movs	r1, #136	; 0x88
 8009860:	f008 f96c 	bl	8011b3c <VL53L1_ReadMulti>
 8009864:	4605      	mov	r5, r0
	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 8009866:	2d00      	cmp	r5, #0
 8009868:	d054      	beq.n	8009914 <VL53L1_get_device_results+0xd8>
	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 800986a:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 800986e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8009872:	f884 22f4 	strb.w	r2, [r4, #756]	; 0x2f4
	memcpy(
 8009876:	4641      	mov	r1, r8
 8009878:	4648      	mov	r0, r9
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 800987a:	f884 32f5 	strb.w	r3, [r4, #757]	; 0x2f5
	memcpy(
 800987e:	2284      	movs	r2, #132	; 0x84
 8009880:	f00a fb24 	bl	8013ecc <memcpy>
}
 8009884:	4628      	mov	r0, r5
 8009886:	b040      	add	sp, #256	; 0x100
 8009888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		status =
 800988c:	232c      	movs	r3, #44	; 0x2c
 800988e:	2188      	movs	r1, #136	; 0x88
 8009890:	f008 f954 	bl	8011b3c <VL53L1_ReadMulti>
	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 8009894:	2e01      	cmp	r6, #1
		status =
 8009896:	4605      	mov	r5, r0
	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 8009898:	d8e5      	bhi.n	8009866 <VL53L1_get_device_results+0x2a>
	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 800989a:	bb96      	cbnz	r6, 8009902 <VL53L1_get_device_results+0xc6>
	if (status == VL53L1_ERROR_NONE) {
 800989c:	2d00      	cmp	r5, #0
 800989e:	d1e4      	bne.n	800986a <VL53L1_get_device_results+0x2e>
	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 80098a0:	f504 76e7 	add.w	r6, r4, #462	; 0x1ce
		status =
 80098a4:	4639      	mov	r1, r7
 80098a6:	4632      	mov	r2, r6
 80098a8:	202c      	movs	r0, #44	; 0x2c
 80098aa:	f002 f899 	bl	800b9e0 <VL53L1_i2c_decode_system_results>
	if (status == VL53L1_ERROR_NONE)
 80098ae:	4605      	mov	r5, r0
 80098b0:	2800      	cmp	r0, #0
 80098b2:	d1da      	bne.n	800986a <VL53L1_get_device_results+0x2e>
		VL53L1_copy_sys_and_core_results_to_range_results(
 80098b4:	4652      	mov	r2, sl
 80098b6:	4631      	mov	r1, r6
 80098b8:	4643      	mov	r3, r8
 80098ba:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
 80098be:	f7ff ff3d 	bl	800973c <VL53L1_copy_sys_and_core_results_to_range_results>
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 80098c2:	f894 52e5 	ldrb.w	r5, [r4, #741]	; 0x2e5
 80098c6:	2d01      	cmp	r5, #1
 80098c8:	d02d      	beq.n	8009926 <VL53L1_get_device_results+0xea>
	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 80098ca:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 80098ce:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 80098d2:	f884 22f4 	strb.w	r2, [r4, #756]	; 0x2f4
	memcpy(
 80098d6:	4641      	mov	r1, r8
 80098d8:	4648      	mov	r0, r9
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 80098da:	f884 32f5 	strb.w	r3, [r4, #757]	; 0x2f5
	memcpy(
 80098de:	2284      	movs	r2, #132	; 0x84
 80098e0:	f00a faf4 	bl	8013ecc <memcpy>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 80098e4:	4620      	mov	r0, r4
 80098e6:	f001 fafb 	bl	800aee0 <VL53L1_check_ll_driver_rd_state>
 80098ea:	4605      	mov	r5, r0
}
 80098ec:	4628      	mov	r0, r5
 80098ee:	b040      	add	sp, #256	; 0x100
 80098f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		status =
 80098f4:	466a      	mov	r2, sp
 80098f6:	234d      	movs	r3, #77	; 0x4d
 80098f8:	2188      	movs	r1, #136	; 0x88
 80098fa:	f008 f91f 	bl	8011b3c <VL53L1_ReadMulti>
 80098fe:	466f      	mov	r7, sp
 8009900:	4605      	mov	r5, r0
	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 8009902:	2d00      	cmp	r5, #0
 8009904:	d1b1      	bne.n	800986a <VL53L1_get_device_results+0x2e>
		status =
 8009906:	4652      	mov	r2, sl
 8009908:	a90b      	add	r1, sp, #44	; 0x2c
 800990a:	2021      	movs	r0, #33	; 0x21
 800990c:	f002 f8f8 	bl	800bb00 <VL53L1_i2c_decode_core_results>
 8009910:	4605      	mov	r5, r0
 8009912:	e7c3      	b.n	800989c <VL53L1_get_device_results+0x60>
		status =
 8009914:	f504 722b 	add.w	r2, r4, #684	; 0x2ac
 8009918:	f10d 014e 	add.w	r1, sp, #78	; 0x4e
 800991c:	2038      	movs	r0, #56	; 0x38
 800991e:	f002 f92b 	bl	800bb78 <VL53L1_i2c_decode_debug_results>
 8009922:	4605      	mov	r5, r0
 8009924:	e7ed      	b.n	8009902 <VL53L1_get_device_results+0xc6>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8009926:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 800992a:	b1bb      	cbz	r3, 800995c <VL53L1_get_device_results+0x120>
		} else if ((status == VL53L1_ERROR_NONE) &&
 800992c:	2b01      	cmp	r3, #1
 800992e:	d01f      	beq.n	8009970 <VL53L1_get_device_results+0x134>
		if ((pdev->low_power_auto_data.low_power_auto_range_count != 0xFF) &&
 8009930:	2bff      	cmp	r3, #255	; 0xff
 8009932:	d0ca      	beq.n	80098ca <VL53L1_get_device_results+0x8e>
			status = VL53L1_low_power_auto_update_DSS(
 8009934:	4620      	mov	r0, r4
 8009936:	f001 fd73 	bl	800b420 <VL53L1_low_power_auto_update_DSS>
	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 800993a:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 800993e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8009942:	f884 22f4 	strb.w	r2, [r4, #756]	; 0x2f4
			status = VL53L1_low_power_auto_update_DSS(
 8009946:	4605      	mov	r5, r0
	memcpy(
 8009948:	4641      	mov	r1, r8
 800994a:	4648      	mov	r0, r9
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 800994c:	f884 32f5 	strb.w	r3, [r4, #757]	; 0x2f5
	memcpy(
 8009950:	2284      	movs	r2, #132	; 0x84
 8009952:	f00a fabb 	bl	8013ecc <memcpy>
	if (status == VL53L1_ERROR_NONE)
 8009956:	2d00      	cmp	r5, #0
 8009958:	d0c4      	beq.n	80098e4 <VL53L1_get_device_results+0xa8>
 800995a:	e793      	b.n	8009884 <VL53L1_get_device_results+0x48>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 800995c:	4620      	mov	r0, r4
 800995e:	f001 fd3d 	bl	800b3dc <VL53L1_low_power_auto_setup_manual_calibration>
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 8009962:	f884 52e6 	strb.w	r5, [r4, #742]	; 0x2e6
		if ((pdev->low_power_auto_data.low_power_auto_range_count != 0xFF) &&
 8009966:	4605      	mov	r5, r0
 8009968:	2800      	cmp	r0, #0
 800996a:	f47f af7e 	bne.w	800986a <VL53L1_get_device_results+0x2e>
 800996e:	e7e1      	b.n	8009934 <VL53L1_get_device_results+0xf8>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 8009970:	2302      	movs	r3, #2
 8009972:	f884 32e6 	strb.w	r3, [r4, #742]	; 0x2e6
 8009976:	e7dd      	b.n	8009934 <VL53L1_get_device_results+0xf8>

08009978 <VL53L1_get_tuning_parm>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 8009978:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 800997c:	2938      	cmp	r1, #56	; 0x38
 800997e:	f200 8158 	bhi.w	8009c32 <VL53L1_get_tuning_parm+0x2ba>
 8009982:	e8df f011 	tbh	[pc, r1, lsl #1]
 8009986:	0151      	.short	0x0151
 8009988:	0147014c 	.word	0x0147014c
 800998c:	013d0142 	.word	0x013d0142
 8009990:	01330138 	.word	0x01330138
 8009994:	0129012e 	.word	0x0129012e
 8009998:	011f0124 	.word	0x011f0124
 800999c:	0115011a 	.word	0x0115011a
 80099a0:	010b0110 	.word	0x010b0110
 80099a4:	01010106 	.word	0x01010106
 80099a8:	00f700fc 	.word	0x00f700fc
 80099ac:	00ed00f2 	.word	0x00ed00f2
 80099b0:	00e300e8 	.word	0x00e300e8
 80099b4:	00d900de 	.word	0x00d900de
 80099b8:	00cf00d4 	.word	0x00cf00d4
 80099bc:	00c500ca 	.word	0x00c500ca
 80099c0:	00bb00c0 	.word	0x00bb00c0
 80099c4:	00b100b6 	.word	0x00b100b6
 80099c8:	00a700ac 	.word	0x00a700ac
 80099cc:	009d00a2 	.word	0x009d00a2
 80099d0:	00930098 	.word	0x00930098
 80099d4:	0089008e 	.word	0x0089008e
 80099d8:	007f0084 	.word	0x007f0084
 80099dc:	0075007a 	.word	0x0075007a
 80099e0:	006b0070 	.word	0x006b0070
 80099e4:	00610066 	.word	0x00610066
 80099e8:	0057005c 	.word	0x0057005c
 80099ec:	004d0052 	.word	0x004d0052
 80099f0:	00430048 	.word	0x00430048
 80099f4:	0039003e 	.word	0x0039003e
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
	break;
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 80099f8:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 80099fc:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80099fe:	2000      	movs	r0, #0
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
	break;
 8009a00:	4770      	bx	lr
		*ptuning_parm_value =
 8009a02:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 8009a06:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009a08:	2000      	movs	r0, #0
	break;
 8009a0a:	4770      	bx	lr
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8009a0c:	f890 32e4 	ldrb.w	r3, [r0, #740]	; 0x2e4
 8009a10:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009a12:	2000      	movs	r0, #0
	break;
 8009a14:	4770      	bx	lr
		*ptuning_parm_value =
 8009a16:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
 8009a1a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009a1c:	2000      	movs	r0, #0
	break;
 8009a1e:	4770      	bx	lr
		*ptuning_parm_value =
 8009a20:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
 8009a24:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009a26:	2000      	movs	r0, #0
	break;
 8009a28:	4770      	bx	lr
		*ptuning_parm_value =
 8009a2a:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8009a2e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009a30:	2000      	movs	r0, #0
	break;
 8009a32:	4770      	bx	lr
		*ptuning_parm_value =
 8009a34:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 8009a38:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009a3a:	2000      	movs	r0, #0
	break;
 8009a3c:	4770      	bx	lr
		*ptuning_parm_value =
 8009a3e:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
 8009a42:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009a44:	2000      	movs	r0, #0
	break;
 8009a46:	4770      	bx	lr
		*ptuning_parm_value =
 8009a48:	f8d0 30d0 	ldr.w	r3, [r0, #208]	; 0xd0
 8009a4c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009a4e:	2000      	movs	r0, #0
	break;
 8009a50:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8009a52:	f8b0 30cc 	ldrh.w	r3, [r0, #204]	; 0xcc
 8009a56:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009a58:	2000      	movs	r0, #0
	break;
 8009a5a:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8009a5c:	f8b0 30ca 	ldrh.w	r3, [r0, #202]	; 0xca
 8009a60:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009a62:	2000      	movs	r0, #0
	break;
 8009a64:	4770      	bx	lr
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8009a66:	f8b0 3128 	ldrh.w	r3, [r0, #296]	; 0x128
 8009a6a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009a6c:	2000      	movs	r0, #0
	break;
 8009a6e:	4770      	bx	lr
				(int32_t)pdev->ssc_cfg.vcsel_start;
 8009a70:	f890 3122 	ldrb.w	r3, [r0, #290]	; 0x122
 8009a74:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009a76:	2000      	movs	r0, #0
	break;
 8009a78:	4770      	bx	lr
				(int32_t)pdev->ssc_cfg.vcsel_period;
 8009a7a:	f890 3121 	ldrb.w	r3, [r0, #289]	; 0x121
 8009a7e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009a80:	2000      	movs	r0, #0
	break;
 8009a82:	4770      	bx	lr
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8009a84:	f890 3156 	ldrb.w	r3, [r0, #342]	; 0x156
 8009a88:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009a8a:	2000      	movs	r0, #0
	break;
 8009a8c:	4770      	bx	lr
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8009a8e:	f890 3155 	ldrb.w	r3, [r0, #341]	; 0x155
 8009a92:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009a94:	2000      	movs	r0, #0
	break;
 8009a96:	4770      	bx	lr
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8009a98:	f890 3154 	ldrb.w	r3, [r0, #340]	; 0x154
 8009a9c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009a9e:	2000      	movs	r0, #0
	break;
 8009aa0:	4770      	bx	lr
		*ptuning_parm_value =
 8009aa2:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8009aa6:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009aa8:	2000      	movs	r0, #0
	break;
 8009aaa:	4770      	bx	lr
		*ptuning_parm_value =
 8009aac:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
 8009ab0:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009ab2:	2000      	movs	r0, #0
	break;
 8009ab4:	4770      	bx	lr
		*ptuning_parm_value =
 8009ab6:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
 8009aba:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009abc:	2000      	movs	r0, #0
	break;
 8009abe:	4770      	bx	lr
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 8009ac0:	f8b0 3144 	ldrh.w	r3, [r0, #324]	; 0x144
 8009ac4:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009ac6:	2000      	movs	r0, #0
	break;
 8009ac8:	4770      	bx	lr
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8009aca:	f8b0 311c 	ldrh.w	r3, [r0, #284]	; 0x11c
 8009ace:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009ad0:	2000      	movs	r0, #0
	break;
 8009ad2:	4770      	bx	lr
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8009ad4:	f8b0 311a 	ldrh.w	r3, [r0, #282]	; 0x11a
 8009ad8:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009ada:	2000      	movs	r0, #0
	break;
 8009adc:	4770      	bx	lr
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8009ade:	f8b0 3118 	ldrh.w	r3, [r0, #280]	; 0x118
 8009ae2:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009ae4:	2000      	movs	r0, #0
	break;
 8009ae6:	4770      	bx	lr
		*ptuning_parm_value =
 8009ae8:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8009aec:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009aee:	2000      	movs	r0, #0
	break;
 8009af0:	4770      	bx	lr
				(int32_t)pdev->refspadchar.vcsel_period;
 8009af2:	f890 3111 	ldrb.w	r3, [r0, #273]	; 0x111
 8009af6:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009af8:	2000      	movs	r0, #0
	break;
 8009afa:	4770      	bx	lr
				(int32_t)pdev->refspadchar.device_test_mode;
 8009afc:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
 8009b00:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009b02:	2000      	movs	r0, #0
	break;
 8009b04:	4770      	bx	lr
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8009b06:	f890 3160 	ldrb.w	r3, [r0, #352]	; 0x160
 8009b0a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009b0c:	2000      	movs	r0, #0
	break;
 8009b0e:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8009b10:	f890 30c6 	ldrb.w	r3, [r0, #198]	; 0xc6
 8009b14:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009b16:	2000      	movs	r0, #0
	break;
 8009b18:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8009b1a:	f890 30af 	ldrb.w	r3, [r0, #175]	; 0xaf
 8009b1e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009b20:	2000      	movs	r0, #0
	break;
 8009b22:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8009b24:	f890 30ae 	ldrb.w	r3, [r0, #174]	; 0xae
 8009b28:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009b2a:	2000      	movs	r0, #0
	break;
 8009b2c:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8009b2e:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
 8009b32:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009b34:	2000      	movs	r0, #0
	break;
 8009b36:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8009b38:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 8009b3c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009b3e:	2000      	movs	r0, #0
	break;
 8009b40:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8009b42:	f890 30ab 	ldrb.w	r3, [r0, #171]	; 0xab
 8009b46:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009b48:	2000      	movs	r0, #0
	break;
 8009b4a:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8009b4c:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
 8009b50:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009b52:	2000      	movs	r0, #0
	break;
 8009b54:	4770      	bx	lr
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8009b56:	f9b0 313e 	ldrsh.w	r3, [r0, #318]	; 0x13e
 8009b5a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009b5c:	2000      	movs	r0, #0
	break;
 8009b5e:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8009b60:	f890 30c8 	ldrb.w	r3, [r0, #200]	; 0xc8
 8009b64:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009b66:	2000      	movs	r0, #0
	break;
 8009b68:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8009b6a:	f890 30c7 	ldrb.w	r3, [r0, #199]	; 0xc7
 8009b6e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009b70:	2000      	movs	r0, #0
	break;
 8009b72:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 8009b74:	f890 30c5 	ldrb.w	r3, [r0, #197]	; 0xc5
 8009b78:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009b7a:	2000      	movs	r0, #0
	break;
 8009b7c:	4770      	bx	lr
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8009b7e:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8009b82:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009b84:	2000      	movs	r0, #0
	break;
 8009b86:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8009b88:	f890 30c4 	ldrb.w	r3, [r0, #196]	; 0xc4
 8009b8c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009b8e:	2000      	movs	r0, #0
	break;
 8009b90:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8009b92:	f890 30c3 	ldrb.w	r3, [r0, #195]	; 0xc3
 8009b96:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009b98:	2000      	movs	r0, #0
	break;
 8009b9a:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8009b9c:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
 8009ba0:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009ba2:	2000      	movs	r0, #0
	break;
 8009ba4:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 8009ba6:	f8b0 30c0 	ldrh.w	r3, [r0, #192]	; 0xc0
 8009baa:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009bac:	2000      	movs	r0, #0
	break;
 8009bae:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8009bb0:	f8b0 30be 	ldrh.w	r3, [r0, #190]	; 0xbe
 8009bb4:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009bb6:	2000      	movs	r0, #0
	break;
 8009bb8:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 8009bba:	f8b0 30bc 	ldrh.w	r3, [r0, #188]	; 0xbc
 8009bbe:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009bc0:	2000      	movs	r0, #0
	break;
 8009bc2:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8009bc4:	f8b0 30ba 	ldrh.w	r3, [r0, #186]	; 0xba
 8009bc8:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009bca:	2000      	movs	r0, #0
	break;
 8009bcc:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8009bce:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
 8009bd2:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009bd4:	2000      	movs	r0, #0
	break;
 8009bd6:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8009bd8:	f8b0 30b6 	ldrh.w	r3, [r0, #182]	; 0xb6
 8009bdc:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009bde:	2000      	movs	r0, #0
	break;
 8009be0:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8009be2:	f890 30b4 	ldrb.w	r3, [r0, #180]	; 0xb4
 8009be6:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009be8:	2000      	movs	r0, #0
	break;
 8009bea:	4770      	bx	lr
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8009bec:	f8b0 309c 	ldrh.w	r3, [r0, #156]	; 0x9c
 8009bf0:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009bf2:	2000      	movs	r0, #0
	break;
 8009bf4:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8009bf6:	f8b0 30b2 	ldrh.w	r3, [r0, #178]	; 0xb2
 8009bfa:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009bfc:	2000      	movs	r0, #0
	break;
 8009bfe:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8009c00:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
 8009c04:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009c06:	2000      	movs	r0, #0
	break;
 8009c08:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8009c0a:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 8009c0e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009c10:	2000      	movs	r0, #0
	break;
 8009c12:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8009c14:	f8b0 30a8 	ldrh.w	r3, [r0, #168]	; 0xa8
 8009c18:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009c1a:	2000      	movs	r0, #0
	break;
 8009c1c:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8009c1e:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 8009c22:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009c24:	2000      	movs	r0, #0
	break;
 8009c26:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8009c28:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
 8009c2c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009c2e:	2000      	movs	r0, #0
	break;
 8009c30:	4770      	bx	lr


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 8009c32:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009c36:	6013      	str	r3, [r2, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 8009c38:	f06f 0003 	mvn.w	r0, #3
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8009c3c:	4770      	bx	lr
 8009c3e:	bf00      	nop

08009c40 <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 8009c40:	b470      	push	{r4, r5, r6}
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 8009c42:	2608      	movs	r6, #8
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 8009c44:	250b      	movs	r5, #11
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 8009c46:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	pdata->device_test_mode =
 8009c4a:	7006      	strb	r6, [r0, #0]
	pdata->vcsel_period              =
 8009c4c:	7045      	strb	r5, [r0, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 8009c4e:	f44f 6120 	mov.w	r1, #2560	; 0xa00
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8009c52:	f44f 62a0 	mov.w	r2, #1280	; 0x500
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8009c56:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
	pdata->timeout_us                =
 8009c5a:	6044      	str	r4, [r0, #4]
	pdata->target_count_rate_mcps    =
 8009c5c:	8101      	strh	r1, [r0, #8]
	pdata->min_count_rate_limit_mcps =
 8009c5e:	8142      	strh	r2, [r0, #10]
	pdata->max_count_rate_limit_mcps =
 8009c60:	8183      	strh	r3, [r0, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8009c62:	bc70      	pop	{r4, r5, r6}
 8009c64:	2000      	movs	r0, #0
 8009c66:	4770      	bx	lr

08009c68 <VL53L1_init_ssc_config_struct>:
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 8009c68:	4b04      	ldr	r3, [pc, #16]	; (8009c7c <VL53L1_init_ssc_config_struct+0x14>)
 8009c6a:	6003      	str	r3, [r0, #0]

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 8009c6c:	f648 42a0 	movw	r2, #36000	; 0x8ca0

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 8009c70:	230c      	movs	r3, #12
	pdata->timeout_us   = 36000;
 8009c72:	6042      	str	r2, [r0, #4]
	pdata->rate_limit_mcps =
 8009c74:	8103      	strh	r3, [r0, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8009c76:	2000      	movs	r0, #0
 8009c78:	4770      	bx	lr
 8009c7a:	bf00      	nop
 8009c7c:	020f1200 	.word	0x020f1200

08009c80 <VL53L1_init_xtalk_config_struct>:
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8009c80:	8943      	ldrh	r3, [r0, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8009c82:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
{
 8009c86:	b570      	push	{r4, r5, r6, lr}
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8009c88:	f9b0 500c 	ldrsh.w	r5, [r0, #12]
 8009c8c:	68c4      	ldr	r4, [r0, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8009c8e:	604c      	str	r4, [r1, #4]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;

	pdata->lite_mode_crosstalk_margin_kcps                     =
 8009c90:	2600      	movs	r6, #0
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 8009c92:	2040      	movs	r0, #64	; 0x40
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 8009c94:	600b      	str	r3, [r1, #0]
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8009c96:	608b      	str	r3, [r1, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 8009c98:	818d      	strh	r5, [r1, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8009c9a:	81ca      	strh	r2, [r1, #14]
	pdata->lite_mode_crosstalk_margin_kcps                     =
 8009c9c:	824e      	strh	r6, [r1, #18]
	pdata->crosstalk_range_ignore_threshold_mult =
 8009c9e:	7508      	strb	r0, [r1, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8009ca0:	b923      	cbnz	r3, 8009cac <VL53L1_init_xtalk_config_struct+0x2c>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 8009ca2:	b91c      	cbnz	r4, 8009cac <VL53L1_init_xtalk_config_struct+0x2c>
 8009ca4:	740c      	strb	r4, [r1, #16]
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8009ca6:	82cc      	strh	r4, [r1, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8009ca8:	2000      	movs	r0, #0
 8009caa:	bd70      	pop	{r4, r5, r6, pc}
 8009cac:	460c      	mov	r4, r1
 8009cae:	2601      	movs	r6, #1
			VL53L1_calc_range_ignore_threshold(
 8009cb0:	4629      	mov	r1, r5
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	7426      	strb	r6, [r4, #16]
 8009cb6:	2340      	movs	r3, #64	; 0x40
 8009cb8:	f001 fa40 	bl	800b13c <VL53L1_calc_range_ignore_threshold>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8009cbc:	82e0      	strh	r0, [r4, #22]
}
 8009cbe:	2000      	movs	r0, #0
 8009cc0:	bd70      	pop	{r4, r5, r6, pc}
 8009cc2:	bf00      	nop

08009cc4 <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 8009cc4:	b470      	push	{r4, r5, r6}

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 8009cc6:	2128      	movs	r1, #40	; 0x28
	pdata->pre_num_of_samples                          =
 8009cc8:	2408      	movs	r4, #8
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8009cca:	2209      	movs	r2, #9
	pdata->dss_config__target_total_rate_mcps          =
 8009ccc:	f44f 6620 	mov.w	r6, #2560	; 0xa00
	pdata->phasecal_config_timeout_us                  =
 8009cd0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	pdata->range_config_timeout_us                     =
 8009cd4:	f243 23c8 	movw	r3, #13000	; 0x32c8
	pdata->pre_num_of_samples                          =
 8009cd8:	7404      	strb	r4, [r0, #16]
	pdata->mm1_num_of_samples                          =
 8009cda:	7441      	strb	r1, [r0, #17]
	pdata->mm2_num_of_samples                          =
 8009cdc:	7482      	strb	r2, [r0, #18]
	pdata->dss_config__target_total_rate_mcps          =
 8009cde:	8006      	strh	r6, [r0, #0]
	pdata->phasecal_config_timeout_us                  =
 8009ce0:	6045      	str	r5, [r0, #4]
	pdata->range_config_timeout_us                     =
 8009ce2:	6083      	str	r3, [r0, #8]
	pdata->mm_config_timeout_us                        =
 8009ce4:	60c3      	str	r3, [r0, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8009ce6:	bc70      	pop	{r4, r5, r6}
 8009ce8:	2000      	movs	r0, #0
 8009cea:	4770      	bx	lr

08009cec <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 8009cec:	b4f0      	push	{r4, r5, r6, r7}
 8009cee:	4603      	mov	r3, r0
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 8009cf0:	4a22      	ldr	r2, [pc, #136]	; (8009d7c <VL53L1_init_tuning_parm_storage_struct+0x90>)
 8009cf2:	4c23      	ldr	r4, [pc, #140]	; (8009d80 <VL53L1_init_tuning_parm_storage_struct+0x94>)
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8009cf4:	4923      	ldr	r1, [pc, #140]	; (8009d84 <VL53L1_init_tuning_parm_storage_struct+0x98>)
	pdata->tp_init_phase_rtn_lite_long         =
 8009cf6:	f8c3 2006 	str.w	r2, [r3, #6]
	pdata->tp_tuning_parm_lld_version          =
 8009cfa:	f248 0041 	movw	r0, #32833	; 0x8041
	pdata->tp_tuning_parm_version              =
 8009cfe:	f248 0603 	movw	r6, #32771	; 0x8003
	pdata->tp_tuning_parm_key_table_version    =
 8009d02:	f248 0501 	movw	r5, #32769	; 0x8001
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 8009d06:	f04f 220a 	mov.w	r2, #167774720	; 0xa000a00
	pdata->tp_init_phase_rtn_lite_long         =
 8009d0a:	f8c3 400a 	str.w	r4, [r3, #10]
	pdata->tp_tuning_parm_lld_version          =
 8009d0e:	8098      	strh	r0, [r3, #4]
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8009d10:	f248 0430 	movw	r4, #32816	; 0x8030
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8009d14:	2010      	movs	r0, #16
	pdata->tp_lite_long_sigma_thresh_mm        =
 8009d16:	4f1c      	ldr	r7, [pc, #112]	; (8009d88 <VL53L1_init_tuning_parm_storage_struct+0x9c>)
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8009d18:	77d8      	strb	r0, [r3, #31]
	pdata->tp_tuning_parm_version              =
 8009d1a:	801e      	strh	r6, [r3, #0]
	pdata->tp_cal_repeat_rate                  =
 8009d1c:	2000      	movs	r0, #0
	pdata->tp_lite_long_sigma_thresh_mm        =
 8009d1e:	f04f 16c0 	mov.w	r6, #12583104	; 0xc000c0
	pdata->tp_tuning_parm_key_table_version    =
 8009d22:	805d      	strh	r5, [r3, #2]
	pdata->tp_lite_long_sigma_thresh_mm        =
 8009d24:	f8c3 1012 	str.w	r1, [r3, #18]
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8009d28:	2508      	movs	r5, #8
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 8009d2a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	pdata->tp_dss_target_lite_mcps               =
 8009d2e:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
	pdata->tp_phasecal_timeout_lite_us           =
 8009d32:	62dc      	str	r4, [r3, #44]	; 0x2c
	pdata->tp_lite_sigma_ref_mm                  =
 8009d34:	2201      	movs	r2, #1
	pdata->tp_lite_seed_cfg                      =
 8009d36:	2402      	movs	r4, #2
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8009d38:	779d      	strb	r5, [r3, #30]
	pdata->tp_lite_long_sigma_thresh_mm        =
 8009d3a:	f8c3 7016 	str.w	r7, [r3, #22]

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8009d3e:	f44f 55fa 	mov.w	r5, #8000	; 0x1f40
	pdata->tp_range_timeout_lite_us              =
 8009d42:	f24f 6718 	movw	r7, #63000	; 0xf618
	pdata->tp_lite_long_sigma_thresh_mm        =
 8009d46:	f8c3 601a 	str.w	r6, [r3, #26]
	pdata->tp_phasecal_timeout_timed_us          =
 8009d4a:	6319      	str	r1, [r3, #48]	; 0x30
	pdata->tp_range_timeout_timed_us             =
 8009d4c:	f243 26c8 	movw	r6, #13000	; 0x32c8
	pdata->tp_mm_timeout_lite_us                 =
 8009d50:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
	pdata->tp_lite_min_clip                    =
 8009d54:	7418      	strb	r0, [r3, #16]
	pdata->tp_lite_first_order_select            =
 8009d56:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
	pdata->tp_lite_sigma_ref_mm                  =
 8009d5a:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->tp_timed_seed_cfg                     =
 8009d5e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	pdata->tp_lite_seed_cfg                      =
 8009d62:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
	pdata->tp_lite_quantifier                    =
 8009d66:	f883 4023 	strb.w	r4, [r3, #35]	; 0x23
	pdata->tp_range_timeout_lite_us              =
 8009d6a:	641f      	str	r7, [r3, #64]	; 0x40
	pdata->tp_range_timeout_timed_us             =
 8009d6c:	645e      	str	r6, [r3, #68]	; 0x44
	pdata->tp_range_timeout_lpa_us =
 8009d6e:	649d      	str	r5, [r3, #72]	; 0x48
	pdata->tp_cal_repeat_rate                  =
 8009d70:	81d8      	strh	r0, [r3, #14]
	pdata->tp_mm_timeout_lpa_us =
 8009d72:	63da      	str	r2, [r3, #60]	; 0x3c
	pdata->tp_mm_timeout_lite_us                 =
 8009d74:	6359      	str	r1, [r3, #52]	; 0x34
	pdata->tp_mm_timeout_timed_us                =
 8009d76:	6399      	str	r1, [r3, #56]	; 0x38


	LOG_FUNCTION_END(status);

	return status;
}
 8009d78:	bcf0      	pop	{r4, r5, r6, r7}
 8009d7a:	4770      	bx	lr
 8009d7c:	0e060a0e 	.word	0x0e060a0e
 8009d80:	2102060a 	.word	0x2102060a
 8009d84:	01680168 	.word	0x01680168
 8009d88:	00c00168 	.word	0x00c00168

08009d8c <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8009d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d90:	9e0a      	ldr	r6, [sp, #40]	; 0x28

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
	pstatic->debug__ctrl                                      = 0x00;
 8009d92:	2400      	movs	r4, #0
	 */
	pstatic->gpio_hv_mux__ctrl  = \
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 8009d94:	f04f 0e02 	mov.w	lr, #2
	pstatic->gpio__fio_hv_status                              = 0x00;
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8009d98:	f04f 0808 	mov.w	r8, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8009d9c:	f44f 6720 	mov.w	r7, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 8009da0:	2511      	movs	r5, #17
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8009da2:	8007      	strh	r7, [r0, #0]
	pstatic->debug__ctrl                                      = 0x00;
 8009da4:	7084      	strb	r4, [r0, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 8009da6:	70c4      	strb	r4, [r0, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 8009da8:	7104      	strb	r4, [r0, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 8009daa:	7144      	strb	r4, [r0, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 8009dac:	7184      	strb	r4, [r0, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 8009dae:	71c4      	strb	r4, [r0, #7]
	pstatic->host_if__status                                  = 0x00;
 8009db0:	7204      	strb	r4, [r0, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 8009db2:	7244      	strb	r4, [r0, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 8009db4:	7284      	strb	r4, [r0, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 8009db6:	72c4      	strb	r4, [r0, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 8009db8:	7384      	strb	r4, [r0, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 8009dba:	7444      	strb	r4, [r0, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 8009dbc:	f880 e00d 	strb.w	lr, [r0, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 8009dc0:	f880 e00f 	strb.w	lr, [r0, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8009dc4:	f880 8010 	strb.w	r8, [r0, #16]
	pstatic->gpio_hv_mux__ctrl  = \
 8009dc8:	7305      	strb	r5, [r0, #12]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8009dca:	7fb5      	ldrb	r5, [r6, #30]
 8009dcc:	7485      	strb	r5, [r0, #18]
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8009dce:	7ff5      	ldrb	r5, [r6, #31]
 8009dd0:	74c5      	strb	r5, [r0, #19]
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8009dd2:	f896 5020 	ldrb.w	r5, [r6, #32]
 8009dd6:	7505      	strb	r5, [r0, #20]
			ptuning_parms->tp_lite_sigma_ref_mm;
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8009dd8:	2701      	movs	r7, #1
	pstatic->spare_host_config__static_config_spare_1         = 0x00;

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8009dda:	f04f 0cff 	mov.w	ip, #255	; 0xff
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 8009dde:	7584      	strb	r4, [r0, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 8009de0:	75c4      	strb	r4, [r0, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 8009de2:	8304      	strh	r4, [r0, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8009de4:	7547      	strb	r7, [r0, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8009de6:	f880 c01a 	strb.w	ip, [r0, #26]
	pstatic->algo__range_min_clip                             =
 8009dea:	7c35      	ldrb	r5, [r6, #16]
 8009dec:	76c5      	strb	r5, [r0, #27]
{
 8009dee:	9d09      	ldr	r5, [sp, #36]	; 0x24
	/*
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
 8009df0:	f896 900c 	ldrb.w	r9, [r6, #12]
 8009df4:	f880 901c 	strb.w	r9, [r0, #28]
			ptuning_parms->tp_consistency_lite_phase_tolerance;
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
	pstatic->sd_config__reset_stages_msb                      = 0x00;
	pstatic->sd_config__reset_stages_lsb                      = 0x00;

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8009df8:	f04f 6932 	mov.w	r9, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 8009dfc:	7744      	strb	r4, [r0, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 8009dfe:	7784      	strb	r4, [r0, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 8009e00:	77c4      	strb	r4, [r0, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8009e02:	f8c1 9000 	str.w	r9, [r1]
	 * Set VHV / Phase Cal repeat rate to 1 every
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
 8009e06:	89f0      	ldrh	r0, [r6, #14]
 8009e08:	8088      	strh	r0, [r1, #4]
			ptuning_parms->tp_cal_repeat_rate;
	pgeneral->global_config__vcsel_width                      = 0x02;
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 8009e0a:	200d      	movs	r0, #13
	pgeneral->global_config__vcsel_width                      = 0x02;
 8009e0c:	f881 e006 	strb.w	lr, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 8009e10:	71c8      	strb	r0, [r1, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
 8009e12:	f896 900d 	ldrb.w	r9, [r6, #13]
 8009e16:	f881 9008 	strb.w	r9, [r1, #8]
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
	pgeneral->system__thresh_rate_low                         = 0x0000;
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8009e1a:	4829      	ldr	r0, [pc, #164]	; (8009ec0 <VL53L1_preset_mode_standard_ranging+0x134>)
	pgeneral->phasecal_config__override                       = 0x00;
 8009e1c:	724c      	strb	r4, [r1, #9]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 8009e1e:	f44f 490c 	mov.w	r9, #35840	; 0x8c00

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8009e22:	f04f 0a1a 	mov.w	sl, #26
	pgeneral->dss_config__roi_mode_control =
 8009e26:	728f      	strb	r7, [r1, #10]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8009e28:	f8c1 0012 	str.w	r0, [r1, #18]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 8009e2c:	818c      	strh	r4, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 8009e2e:	81cc      	strh	r4, [r1, #14]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 8009e30:	f8a1 9010 	strh.w	r9, [r1, #16]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8009e34:	f04f 0b20 	mov.w	fp, #32
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8009e38:	f882 a001 	strb.w	sl, [r2, #1]
	ptiming->range_config__vcsel_period_a                     = 0x0B;
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 8009e3c:	2109      	movs	r1, #9
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 8009e3e:	f04f 0a0b 	mov.w	sl, #11
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 8009e42:	f04f 09cc 	mov.w	r9, #204	; 0xcc
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8009e46:	20f5      	movs	r0, #245	; 0xf5
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 8009e48:	7014      	strb	r4, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 8009e4a:	7094      	strb	r4, [r2, #2]
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8009e4c:	7117      	strb	r7, [r2, #4]
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8009e4e:	71d7      	strb	r7, [r2, #7]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8009e50:	f882 b003 	strb.w	fp, [r2, #3]
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 8009e54:	f882 a006 	strb.w	sl, [r2, #6]
	ptiming->range_config__vcsel_period_b                     = 0x09;
 8009e58:	7251      	strb	r1, [r2, #9]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 8009e5a:	f882 9005 	strb.w	r9, [r2, #5]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8009e5e:	7210      	strb	r0, [r2, #8]
	 * Sigma thresh register - format 14.2
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
 8009e60:	8ab0      	ldrh	r0, [r6, #20]
	/*
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8009e62:	f8b6 901a 	ldrh.w	r9, [r6, #26]
	ptiming->range_config__sigma_thresh                       =
 8009e66:	8150      	strh	r0, [r2, #10]
	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
	ptiming->range_config__valid_phase_high                   = 0x78;
 8009e68:	2078      	movs	r0, #120	; 0x78
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8009e6a:	f8a2 900c 	strh.w	r9, [r2, #12]
	ptiming->range_config__valid_phase_high                   = 0x78;
 8009e6e:	73d0      	strb	r0, [r2, #15]
	ptiming->range_config__valid_phase_low                    = 0x08;
 8009e70:	f882 800e 	strb.w	r8, [r2, #14]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 8009e74:	6114      	str	r4, [r2, #16]
	ptiming->system__fractional_enable                        = 0x00;
 8009e76:	7514      	strb	r4, [r2, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 8009e78:	701f      	strb	r7, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 8009e7a:	f8c3 4002 	str.w	r4, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 8009e7e:	719c      	strb	r4, [r3, #6]
	pdynamic->system__seed_config =
 8009e80:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
 8009e84:	71da      	strb	r2, [r3, #7]
			ptuning_parms->tp_lite_seed_cfg;

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 8009e86:	f883 a008 	strb.w	sl, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 8009e8a:	7259      	strb	r1, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
 8009e8c:	79f2      	ldrb	r2, [r6, #7]
 8009e8e:	729a      	strb	r2, [r3, #10]
			ptuning_parms->tp_init_phase_rtn_lite_med;
	pdynamic->sd_config__initial_phase_sd1                     =
 8009e90:	7ab2      	ldrb	r2, [r6, #10]
 8009e92:	72da      	strb	r2, [r3, #11]
			ptuning_parms->tp_init_phase_ref_lite_med;;

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 8009e94:	731f      	strb	r7, [r3, #12]
	 *        3  -> 4095
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
 8009e96:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
 8009e9a:	735a      	strb	r2, [r3, #13]
			ptuning_parms->tp_lite_first_order_select;
	pdynamic->sd_config__quantifier         =
 8009e9c:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
 8009ea0:	7399      	strb	r1, [r3, #14]
	pdynamic->system__grouped_parameter_hold                   = 0x02;

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 8009ea2:	4a08      	ldr	r2, [pc, #32]	; (8009ec4 <VL53L1_preset_mode_standard_ranging+0x138>)
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8009ea4:	f883 c010 	strb.w	ip, [r3, #16]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8009ea8:	26c7      	movs	r6, #199	; 0xc7
	pdynamic->system__sequence_config                          = \
 8009eaa:	21db      	movs	r1, #219	; 0xdb
	pdynamic->system__grouped_parameter_hold                   = 0x02;
 8009eac:	f883 e012 	strb.w	lr, [r3, #18]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8009eb0:	73de      	strb	r6, [r3, #15]
	pdynamic->system__sequence_config                          = \
 8009eb2:	7459      	strb	r1, [r3, #17]
	psystem->system__stream_count_ctrl                         = 0x00;
 8009eb4:	f8c5 2001 	str.w	r2, [r5, #1]
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
}
 8009eb8:	4620      	mov	r0, r4
 8009eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ebe:	bf00      	nop
 8009ec0:	01ff3800 	.word	0x01ff3800
 8009ec4:	21010100 	.word	0x21010100

08009ec8 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8009ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ecc:	9d09      	ldr	r5, [sp, #36]	; 0x24
	pstatic->debug__ctrl                                      = 0x00;
 8009ece:	2400      	movs	r4, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 8009ed0:	f04f 0e02 	mov.w	lr, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8009ed4:	f04f 0c08 	mov.w	ip, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8009ed8:	f44f 6720 	mov.w	r7, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 8009edc:	2611      	movs	r6, #17
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8009ede:	8007      	strh	r7, [r0, #0]
	pstatic->debug__ctrl                                      = 0x00;
 8009ee0:	7084      	strb	r4, [r0, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 8009ee2:	70c4      	strb	r4, [r0, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 8009ee4:	7104      	strb	r4, [r0, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 8009ee6:	7144      	strb	r4, [r0, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 8009ee8:	7184      	strb	r4, [r0, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 8009eea:	71c4      	strb	r4, [r0, #7]
	pstatic->host_if__status                                  = 0x00;
 8009eec:	7204      	strb	r4, [r0, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 8009eee:	7244      	strb	r4, [r0, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 8009ef0:	7284      	strb	r4, [r0, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 8009ef2:	72c4      	strb	r4, [r0, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 8009ef4:	7384      	strb	r4, [r0, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 8009ef6:	7444      	strb	r4, [r0, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 8009ef8:	f880 e00d 	strb.w	lr, [r0, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 8009efc:	f880 e00f 	strb.w	lr, [r0, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8009f00:	f880 c010 	strb.w	ip, [r0, #16]
	pstatic->gpio_hv_mux__ctrl  = \
 8009f04:	7306      	strb	r6, [r0, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8009f06:	7fae      	ldrb	r6, [r5, #30]
 8009f08:	7486      	strb	r6, [r0, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8009f0a:	7fee      	ldrb	r6, [r5, #31]
 8009f0c:	74c6      	strb	r6, [r0, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8009f0e:	f895 6020 	ldrb.w	r6, [r5, #32]
 8009f12:	7506      	strb	r6, [r0, #20]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8009f14:	2701      	movs	r7, #1
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8009f16:	f04f 08ff 	mov.w	r8, #255	; 0xff
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 8009f1a:	7584      	strb	r4, [r0, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 8009f1c:	75c4      	strb	r4, [r0, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 8009f1e:	8304      	strh	r4, [r0, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8009f20:	7547      	strb	r7, [r0, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8009f22:	f880 801a 	strb.w	r8, [r0, #26]
	pstatic->algo__range_min_clip                             =
 8009f26:	7c2e      	ldrb	r6, [r5, #16]
 8009f28:	76c6      	strb	r6, [r0, #27]
{
 8009f2a:	9e08      	ldr	r6, [sp, #32]
	pstatic->algo__consistency_check__tolerance               =
 8009f2c:	f895 900c 	ldrb.w	r9, [r5, #12]
 8009f30:	f880 901c 	strb.w	r9, [r0, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8009f34:	f04f 6932 	mov.w	r9, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 8009f38:	7744      	strb	r4, [r0, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 8009f3a:	7784      	strb	r4, [r0, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 8009f3c:	77c4      	strb	r4, [r0, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8009f3e:	f8c1 9000 	str.w	r9, [r1]
	pgeneral->cal_config__repeat_rate                         =
 8009f42:	89e8      	ldrh	r0, [r5, #14]
 8009f44:	8088      	strh	r0, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 8009f46:	200d      	movs	r0, #13
	pgeneral->global_config__vcsel_width                      = 0x02;
 8009f48:	f881 e006 	strb.w	lr, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 8009f4c:	71c8      	strb	r0, [r1, #7]
	pgeneral->phasecal_config__target                         =
 8009f4e:	f895 900d 	ldrb.w	r9, [r5, #13]
 8009f52:	f881 9008 	strb.w	r9, [r1, #8]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8009f56:	4827      	ldr	r0, [pc, #156]	; (8009ff4 <VL53L1_preset_mode_standard_ranging_short_range+0x12c>)
	pgeneral->phasecal_config__override                       = 0x00;
 8009f58:	724c      	strb	r4, [r1, #9]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 8009f5a:	f44f 490c 	mov.w	r9, #35840	; 0x8c00
	pgeneral->dss_config__roi_mode_control =
 8009f5e:	728f      	strb	r7, [r1, #10]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 8009f60:	818c      	strh	r4, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 8009f62:	81cc      	strh	r4, [r1, #14]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 8009f64:	f8a1 9010 	strh.w	r9, [r1, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8009f68:	f8c1 0012 	str.w	r0, [r1, #18]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8009f6c:	f04f 0a1a 	mov.w	sl, #26
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8009f70:	f04f 0920 	mov.w	r9, #32
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 8009f74:	20cc      	movs	r0, #204	; 0xcc
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8009f76:	21f5      	movs	r1, #245	; 0xf5
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 8009f78:	7014      	strb	r4, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 8009f7a:	7094      	strb	r4, [r2, #2]
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8009f7c:	7117      	strb	r7, [r2, #4]
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8009f7e:	71d7      	strb	r7, [r2, #7]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 8009f80:	6114      	str	r4, [r2, #16]
	ptiming->system__fractional_enable                        = 0x00;
 8009f82:	7514      	strb	r4, [r2, #20]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8009f84:	f882 a001 	strb.w	sl, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8009f88:	f882 9003 	strb.w	r9, [r2, #3]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 8009f8c:	7150      	strb	r0, [r2, #5]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8009f8e:	7211      	strb	r1, [r2, #8]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 8009f90:	701f      	strb	r7, [r3, #0]
	pdynamic->system__thresh_high                              = 0x0000;
 8009f92:	f8c3 4002 	str.w	r4, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 8009f96:	719c      	strb	r4, [r3, #6]
	pdynamic->system__seed_config =
 8009f98:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 8009f9c:	71d9      	strb	r1, [r3, #7]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 8009f9e:	731f      	strb	r7, [r3, #12]
	pdynamic->sd_config__first_order_select =
 8009fa0:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
 8009fa4:	7359      	strb	r1, [r3, #13]
	pdynamic->sd_config__quantifier         =
 8009fa6:	f895 1023 	ldrb.w	r1, [r5, #35]	; 0x23
 8009faa:	7399      	strb	r1, [r3, #14]
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 8009fac:	2007      	movs	r0, #7
		ptiming->range_config__vcsel_period_b                = 0x05;
 8009fae:	2105      	movs	r1, #5
	psystem->system__stream_count_ctrl                         = 0x00;
 8009fb0:	4f11      	ldr	r7, [pc, #68]	; (8009ff8 <VL53L1_preset_mode_standard_ranging_short_range+0x130>)
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8009fb2:	f883 8010 	strb.w	r8, [r3, #16]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8009fb6:	f04f 0ac7 	mov.w	sl, #199	; 0xc7
	pdynamic->system__sequence_config                          = \
 8009fba:	f04f 09db 	mov.w	r9, #219	; 0xdb
	pdynamic->system__grouped_parameter_hold                   = 0x02;
 8009fbe:	f883 e012 	strb.w	lr, [r3, #18]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8009fc2:	f883 a00f 	strb.w	sl, [r3, #15]
	pdynamic->system__sequence_config                          = \
 8009fc6:	f883 9011 	strb.w	r9, [r3, #17]
	psystem->system__stream_count_ctrl                         = 0x00;
 8009fca:	f8c6 7001 	str.w	r7, [r6, #1]
		ptiming->range_config__vcsel_period_a                = 0x07;
 8009fce:	7190      	strb	r0, [r2, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 8009fd0:	7251      	strb	r1, [r2, #9]
		ptiming->range_config__sigma_thresh                  =
 8009fd2:	8aee      	ldrh	r6, [r5, #22]
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8009fd4:	8baf      	ldrh	r7, [r5, #28]
		ptiming->range_config__sigma_thresh                  =
 8009fd6:	8156      	strh	r6, [r2, #10]
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
		ptiming->range_config__valid_phase_low               = 0x08;
		ptiming->range_config__valid_phase_high              = 0x38;
 8009fd8:	2638      	movs	r6, #56	; 0x38
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8009fda:	8197      	strh	r7, [r2, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 8009fdc:	f882 c00e 	strb.w	ip, [r2, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 8009fe0:	73d6      	strb	r6, [r2, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 8009fe2:	7218      	strb	r0, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 8009fe4:	7259      	strb	r1, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
 8009fe6:	7a2a      	ldrb	r2, [r5, #8]
 8009fe8:	729a      	strb	r2, [r3, #10]
				ptuning_parms->tp_init_phase_rtn_lite_short;
		pdynamic->sd_config__initial_phase_sd1               =
 8009fea:	7aea      	ldrb	r2, [r5, #11]
 8009fec:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8009fee:	4620      	mov	r0, r4
 8009ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ff4:	01ff3800 	.word	0x01ff3800
 8009ff8:	21010100 	.word	0x21010100

08009ffc <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8009ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a000:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pstatic->debug__ctrl                                      = 0x00;
 800a002:	2400      	movs	r4, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a004:	f04f 0e02 	mov.w	lr, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a008:	f04f 0c08 	mov.w	ip, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a00c:	f44f 6720 	mov.w	r7, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 800a010:	2611      	movs	r6, #17
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a012:	8007      	strh	r7, [r0, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800a014:	7084      	strb	r4, [r0, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800a016:	70c4      	strb	r4, [r0, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800a018:	7104      	strb	r4, [r0, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800a01a:	7144      	strb	r4, [r0, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800a01c:	7184      	strb	r4, [r0, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800a01e:	71c4      	strb	r4, [r0, #7]
	pstatic->host_if__status                                  = 0x00;
 800a020:	7204      	strb	r4, [r0, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800a022:	7244      	strb	r4, [r0, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800a024:	7284      	strb	r4, [r0, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800a026:	72c4      	strb	r4, [r0, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800a028:	7384      	strb	r4, [r0, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800a02a:	7444      	strb	r4, [r0, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a02c:	f880 e00d 	strb.w	lr, [r0, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800a030:	f880 e00f 	strb.w	lr, [r0, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a034:	f880 c010 	strb.w	ip, [r0, #16]
	pstatic->gpio_hv_mux__ctrl  = \
 800a038:	7306      	strb	r6, [r0, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800a03a:	7fae      	ldrb	r6, [r5, #30]
 800a03c:	7486      	strb	r6, [r0, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800a03e:	7fee      	ldrb	r6, [r5, #31]
 800a040:	74c6      	strb	r6, [r0, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800a042:	f895 6020 	ldrb.w	r6, [r5, #32]
 800a046:	7506      	strb	r6, [r0, #20]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a048:	2701      	movs	r7, #1
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a04a:	f04f 08ff 	mov.w	r8, #255	; 0xff
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800a04e:	7584      	strb	r4, [r0, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800a050:	75c4      	strb	r4, [r0, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800a052:	8304      	strh	r4, [r0, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a054:	7547      	strb	r7, [r0, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a056:	f880 801a 	strb.w	r8, [r0, #26]
	pstatic->algo__range_min_clip                             =
 800a05a:	7c2e      	ldrb	r6, [r5, #16]
 800a05c:	76c6      	strb	r6, [r0, #27]
	pstatic->algo__consistency_check__tolerance               =
 800a05e:	f895 900c 	ldrb.w	r9, [r5, #12]
 800a062:	f880 901c 	strb.w	r9, [r0, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a066:	f04f 6932 	mov.w	r9, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800a06a:	7744      	strb	r4, [r0, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800a06c:	7784      	strb	r4, [r0, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800a06e:	77c4      	strb	r4, [r0, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a070:	f8c1 9000 	str.w	r9, [r1]
	pgeneral->cal_config__repeat_rate                         =
 800a074:	89e8      	ldrh	r0, [r5, #14]
 800a076:	8088      	strh	r0, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a078:	200d      	movs	r0, #13
	pgeneral->global_config__vcsel_width                      = 0x02;
 800a07a:	f881 e006 	strb.w	lr, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a07e:	71c8      	strb	r0, [r1, #7]
	pgeneral->phasecal_config__target                         =
 800a080:	f895 a00d 	ldrb.w	sl, [r5, #13]
 800a084:	f881 a008 	strb.w	sl, [r1, #8]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a088:	4e28      	ldr	r6, [pc, #160]	; (800a12c <VL53L1_preset_mode_standard_ranging_long_range+0x130>)
	pgeneral->phasecal_config__override                       = 0x00;
 800a08a:	724c      	strb	r4, [r1, #9]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a08c:	f44f 4a0c 	mov.w	sl, #35840	; 0x8c00
	pgeneral->dss_config__roi_mode_control =
 800a090:	728f      	strb	r7, [r1, #10]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800a092:	818c      	strh	r4, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800a094:	81cc      	strh	r4, [r1, #14]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a096:	f8a1 a010 	strh.w	sl, [r1, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a09a:	f8c1 6012 	str.w	r6, [r1, #18]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a09e:	f04f 0b1a 	mov.w	fp, #26
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a0a2:	f04f 0a20 	mov.w	sl, #32
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800a0a6:	f04f 09cc 	mov.w	r9, #204	; 0xcc
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800a0aa:	21f5      	movs	r1, #245	; 0xf5
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800a0ac:	7014      	strb	r4, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800a0ae:	7094      	strb	r4, [r2, #2]
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800a0b0:	7117      	strb	r7, [r2, #4]
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800a0b2:	71d7      	strb	r7, [r2, #7]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800a0b4:	6114      	str	r4, [r2, #16]
	ptiming->system__fractional_enable                        = 0x00;
 800a0b6:	7514      	strb	r4, [r2, #20]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a0b8:	f882 b001 	strb.w	fp, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a0bc:	f882 a003 	strb.w	sl, [r2, #3]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800a0c0:	f882 9005 	strb.w	r9, [r2, #5]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800a0c4:	7211      	strb	r1, [r2, #8]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800a0c6:	701f      	strb	r7, [r3, #0]
	pdynamic->system__thresh_high                              = 0x0000;
 800a0c8:	f8c3 4002 	str.w	r4, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800a0cc:	719c      	strb	r4, [r3, #6]
	pdynamic->system__seed_config =
 800a0ce:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 800a0d2:	71d9      	strb	r1, [r3, #7]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800a0d4:	731f      	strb	r7, [r3, #12]
	pdynamic->sd_config__first_order_select =
 800a0d6:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
 800a0da:	7359      	strb	r1, [r3, #13]
	pdynamic->sd_config__quantifier         =
 800a0dc:	f895 1023 	ldrb.w	r1, [r5, #35]	; 0x23
	psystem->system__stream_count_ctrl                         = 0x00;
 800a0e0:	9e09      	ldr	r6, [sp, #36]	; 0x24
	pdynamic->sd_config__quantifier         =
 800a0e2:	7399      	strb	r1, [r3, #14]
	psystem->system__stream_count_ctrl                         = 0x00;
 800a0e4:	4f12      	ldr	r7, [pc, #72]	; (800a130 <VL53L1_preset_mode_standard_ranging_long_range+0x134>)
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800a0e6:	f883 8010 	strb.w	r8, [r3, #16]
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 800a0ea:	210f      	movs	r1, #15
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a0ec:	f04f 0ac7 	mov.w	sl, #199	; 0xc7
	pdynamic->system__sequence_config                          = \
 800a0f0:	f04f 09db 	mov.w	r9, #219	; 0xdb
	pdynamic->system__grouped_parameter_hold                   = 0x02;
 800a0f4:	f883 e012 	strb.w	lr, [r3, #18]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a0f8:	f883 a00f 	strb.w	sl, [r3, #15]
	pdynamic->system__sequence_config                          = \
 800a0fc:	f883 9011 	strb.w	r9, [r3, #17]
	psystem->system__stream_count_ctrl                         = 0x00;
 800a100:	f8c6 7001 	str.w	r7, [r6, #1]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 800a104:	7250      	strb	r0, [r2, #9]
		ptiming->range_config__vcsel_period_a                = 0x0F;
 800a106:	7191      	strb	r1, [r2, #6]
		ptiming->range_config__sigma_thresh                  =
 800a108:	8a6e      	ldrh	r6, [r5, #18]
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a10a:	8b2f      	ldrh	r7, [r5, #24]
		ptiming->range_config__sigma_thresh                  =
 800a10c:	8156      	strh	r6, [r2, #10]
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
		ptiming->range_config__valid_phase_low               = 0x08;
		ptiming->range_config__valid_phase_high              = 0xB8;
 800a10e:	26b8      	movs	r6, #184	; 0xb8
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a110:	8197      	strh	r7, [r2, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800a112:	f882 c00e 	strb.w	ip, [r2, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 800a116:	73d6      	strb	r6, [r2, #15]
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 800a118:	7258      	strb	r0, [r3, #9]
		pdynamic->sd_config__woi_sd0                         = 0x0F;
 800a11a:	7219      	strb	r1, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 800a11c:	79aa      	ldrb	r2, [r5, #6]
 800a11e:	729a      	strb	r2, [r3, #10]
				ptuning_parms->tp_init_phase_rtn_lite_long;
		pdynamic->sd_config__initial_phase_sd1               =
 800a120:	7a6a      	ldrb	r2, [r5, #9]
 800a122:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800a124:	4620      	mov	r0, r4
 800a126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a12a:	bf00      	nop
 800a12c:	01ff3800 	.word	0x01ff3800
 800a130:	21010100 	.word	0x21010100

0800a134 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800a134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a138:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pstatic->debug__ctrl                                      = 0x00;
 800a13a:	2400      	movs	r4, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a13c:	2702      	movs	r7, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a13e:	f04f 0808 	mov.w	r8, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a142:	f44f 6e20 	mov.w	lr, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 800a146:	2611      	movs	r6, #17
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a148:	f8a0 e000 	strh.w	lr, [r0]
	pstatic->debug__ctrl                                      = 0x00;
 800a14c:	7084      	strb	r4, [r0, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800a14e:	70c4      	strb	r4, [r0, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800a150:	7104      	strb	r4, [r0, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800a152:	7144      	strb	r4, [r0, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800a154:	7184      	strb	r4, [r0, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800a156:	71c4      	strb	r4, [r0, #7]
	pstatic->host_if__status                                  = 0x00;
 800a158:	7204      	strb	r4, [r0, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800a15a:	7244      	strb	r4, [r0, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800a15c:	7284      	strb	r4, [r0, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800a15e:	72c4      	strb	r4, [r0, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800a160:	7384      	strb	r4, [r0, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800a162:	7444      	strb	r4, [r0, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a164:	7347      	strb	r7, [r0, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800a166:	73c7      	strb	r7, [r0, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a168:	f880 8010 	strb.w	r8, [r0, #16]
	pstatic->gpio_hv_mux__ctrl  = \
 800a16c:	7306      	strb	r6, [r0, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800a16e:	7fae      	ldrb	r6, [r5, #30]
 800a170:	7486      	strb	r6, [r0, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800a172:	7fee      	ldrb	r6, [r5, #31]
 800a174:	74c6      	strb	r6, [r0, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800a176:	f895 6020 	ldrb.w	r6, [r5, #32]
 800a17a:	7506      	strb	r6, [r0, #20]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a17c:	f04f 0e01 	mov.w	lr, #1
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a180:	f04f 0cff 	mov.w	ip, #255	; 0xff
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800a184:	7584      	strb	r4, [r0, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800a186:	75c4      	strb	r4, [r0, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800a188:	8304      	strh	r4, [r0, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a18a:	f880 e015 	strb.w	lr, [r0, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a18e:	f880 c01a 	strb.w	ip, [r0, #26]
	pstatic->algo__range_min_clip                             =
 800a192:	7c2e      	ldrb	r6, [r5, #16]
 800a194:	76c6      	strb	r6, [r0, #27]
	pstatic->algo__consistency_check__tolerance               =
 800a196:	f895 900c 	ldrb.w	r9, [r5, #12]
 800a19a:	f880 901c 	strb.w	r9, [r0, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a19e:	f04f 6932 	mov.w	r9, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800a1a2:	7744      	strb	r4, [r0, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800a1a4:	7784      	strb	r4, [r0, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800a1a6:	77c4      	strb	r4, [r0, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a1a8:	f8c1 9000 	str.w	r9, [r1]
	pgeneral->cal_config__repeat_rate                         =
 800a1ac:	89e8      	ldrh	r0, [r5, #14]
 800a1ae:	8088      	strh	r0, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a1b0:	200d      	movs	r0, #13
	pgeneral->global_config__vcsel_width                      = 0x02;
 800a1b2:	718f      	strb	r7, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a1b4:	71c8      	strb	r0, [r1, #7]
	pgeneral->phasecal_config__target                         =
 800a1b6:	7b68      	ldrb	r0, [r5, #13]
 800a1b8:	7208      	strb	r0, [r1, #8]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a1ba:	4e2e      	ldr	r6, [pc, #184]	; (800a274 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x140>)
	pgeneral->phasecal_config__override                       = 0x00;
 800a1bc:	724c      	strb	r4, [r1, #9]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a1be:	f44f 4b0c 	mov.w	fp, #35840	; 0x8c00
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a1c2:	f04f 091a 	mov.w	r9, #26
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a1c6:	2020      	movs	r0, #32
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a1c8:	f8c1 6012 	str.w	r6, [r1, #18]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800a1cc:	818c      	strh	r4, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800a1ce:	81cc      	strh	r4, [r1, #14]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a1d0:	f8a1 b010 	strh.w	fp, [r1, #16]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800a1d4:	f04f 0af5 	mov.w	sl, #245	; 0xf5
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a1d8:	f882 9001 	strb.w	r9, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a1dc:	70d0      	strb	r0, [r2, #3]
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800a1de:	f04f 090b 	mov.w	r9, #11
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800a1e2:	2009      	movs	r0, #9
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800a1e4:	f04f 0bcc 	mov.w	fp, #204	; 0xcc
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800a1e8:	7014      	strb	r4, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800a1ea:	7094      	strb	r4, [r2, #2]
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800a1ec:	f882 e004 	strb.w	lr, [r2, #4]
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800a1f0:	f882 e007 	strb.w	lr, [r2, #7]
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800a1f4:	f882 9006 	strb.w	r9, [r2, #6]
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800a1f8:	7250      	strb	r0, [r2, #9]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800a1fa:	f882 b005 	strb.w	fp, [r2, #5]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800a1fe:	f882 a008 	strb.w	sl, [r2, #8]
	ptiming->range_config__sigma_thresh                       =
 800a202:	f8b5 a014 	ldrh.w	sl, [r5, #20]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800a206:	f8b5 b01a 	ldrh.w	fp, [r5, #26]
	ptiming->range_config__sigma_thresh                       =
 800a20a:	f8a2 a00a 	strh.w	sl, [r2, #10]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800a20e:	f04f 0a78 	mov.w	sl, #120	; 0x78
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800a212:	f8a2 b00c 	strh.w	fp, [r2, #12]
	ptiming->range_config__valid_phase_low                    = 0x08;
 800a216:	f882 800e 	strb.w	r8, [r2, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800a21a:	f882 a00f 	strb.w	sl, [r2, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800a21e:	6114      	str	r4, [r2, #16]
	ptiming->system__fractional_enable                        = 0x00;
 800a220:	7514      	strb	r4, [r2, #20]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800a222:	f883 e000 	strb.w	lr, [r3]
	pdynamic->system__thresh_high                              = 0x0000;
 800a226:	f8c3 4002 	str.w	r4, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800a22a:	719c      	strb	r4, [r3, #6]
	pdynamic->system__seed_config =
 800a22c:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
 800a230:	71da      	strb	r2, [r3, #7]
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800a232:	7258      	strb	r0, [r3, #9]
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800a234:	f883 9008 	strb.w	r9, [r3, #8]
	pdynamic->sd_config__initial_phase_sd0                     =
 800a238:	79ea      	ldrb	r2, [r5, #7]
 800a23a:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800a23c:	7aaa      	ldrb	r2, [r5, #10]
 800a23e:	72da      	strb	r2, [r3, #11]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800a240:	f883 e00c 	strb.w	lr, [r3, #12]
	pdynamic->sd_config__first_order_select =
 800a244:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
 800a248:	735a      	strb	r2, [r3, #13]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800a24a:	4620      	mov	r0, r4
	psystem->system__stream_count_ctrl                         = 0x00;
 800a24c:	9c09      	ldr	r4, [sp, #36]	; 0x24
	pdynamic->sd_config__quantifier         =
 800a24e:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
	psystem->system__stream_count_ctrl                         = 0x00;
 800a252:	4d09      	ldr	r5, [pc, #36]	; (800a278 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x144>)
	pdynamic->sd_config__quantifier         =
 800a254:	739a      	strb	r2, [r3, #14]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a256:	f04f 0ec7 	mov.w	lr, #199	; 0xc7
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800a25a:	f883 c010 	strb.w	ip, [r3, #16]
	pdynamic->system__grouped_parameter_hold                   = 0x02;
 800a25e:	749f      	strb	r7, [r3, #18]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a260:	f883 e00f 	strb.w	lr, [r3, #15]
		pdynamic->system__sequence_config  = \
 800a264:	223b      	movs	r2, #59	; 0x3b
	psystem->system__stream_count_ctrl                         = 0x00;
 800a266:	f8c4 5001 	str.w	r5, [r4, #1]
		pgeneral->dss_config__roi_mode_control =
 800a26a:	728f      	strb	r7, [r1, #10]
		pdynamic->system__sequence_config  = \
 800a26c:	745a      	strb	r2, [r3, #17]
}
 800a26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a272:	bf00      	nop
 800a274:	01ff3800 	.word	0x01ff3800
 800a278:	21010100 	.word	0x21010100

0800a27c <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800a27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a280:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pstatic->debug__ctrl                                      = 0x00;
 800a282:	2400      	movs	r4, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a284:	2702      	movs	r7, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a286:	f04f 0808 	mov.w	r8, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a28a:	f44f 6e20 	mov.w	lr, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 800a28e:	2611      	movs	r6, #17
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a290:	f8a0 e000 	strh.w	lr, [r0]
	pstatic->debug__ctrl                                      = 0x00;
 800a294:	7084      	strb	r4, [r0, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800a296:	70c4      	strb	r4, [r0, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800a298:	7104      	strb	r4, [r0, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800a29a:	7144      	strb	r4, [r0, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800a29c:	7184      	strb	r4, [r0, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800a29e:	71c4      	strb	r4, [r0, #7]
	pstatic->host_if__status                                  = 0x00;
 800a2a0:	7204      	strb	r4, [r0, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800a2a2:	7244      	strb	r4, [r0, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800a2a4:	7284      	strb	r4, [r0, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800a2a6:	72c4      	strb	r4, [r0, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800a2a8:	7384      	strb	r4, [r0, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800a2aa:	7444      	strb	r4, [r0, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a2ac:	7347      	strb	r7, [r0, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800a2ae:	73c7      	strb	r7, [r0, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a2b0:	f880 8010 	strb.w	r8, [r0, #16]
	pstatic->gpio_hv_mux__ctrl  = \
 800a2b4:	7306      	strb	r6, [r0, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800a2b6:	7fae      	ldrb	r6, [r5, #30]
 800a2b8:	7486      	strb	r6, [r0, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800a2ba:	7fee      	ldrb	r6, [r5, #31]
 800a2bc:	74c6      	strb	r6, [r0, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800a2be:	f895 6020 	ldrb.w	r6, [r5, #32]
 800a2c2:	7506      	strb	r6, [r0, #20]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a2c4:	f04f 0e01 	mov.w	lr, #1
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a2c8:	f04f 0cff 	mov.w	ip, #255	; 0xff
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800a2cc:	7584      	strb	r4, [r0, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800a2ce:	75c4      	strb	r4, [r0, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800a2d0:	8304      	strh	r4, [r0, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a2d2:	f880 e015 	strb.w	lr, [r0, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a2d6:	f880 c01a 	strb.w	ip, [r0, #26]
	pstatic->algo__range_min_clip                             =
 800a2da:	7c2e      	ldrb	r6, [r5, #16]
 800a2dc:	76c6      	strb	r6, [r0, #27]
	pstatic->algo__consistency_check__tolerance               =
 800a2de:	f895 900c 	ldrb.w	r9, [r5, #12]
 800a2e2:	f880 901c 	strb.w	r9, [r0, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a2e6:	f04f 6932 	mov.w	r9, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800a2ea:	7744      	strb	r4, [r0, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800a2ec:	7784      	strb	r4, [r0, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800a2ee:	77c4      	strb	r4, [r0, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a2f0:	f8c1 9000 	str.w	r9, [r1]
	pgeneral->cal_config__repeat_rate                         =
 800a2f4:	89e8      	ldrh	r0, [r5, #14]
 800a2f6:	8088      	strh	r0, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a2f8:	200d      	movs	r0, #13
	pgeneral->global_config__vcsel_width                      = 0x02;
 800a2fa:	718f      	strb	r7, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a2fc:	71c8      	strb	r0, [r1, #7]
	pgeneral->phasecal_config__target                         =
 800a2fe:	7b68      	ldrb	r0, [r5, #13]
 800a300:	7208      	strb	r0, [r1, #8]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a302:	4e2e      	ldr	r6, [pc, #184]	; (800a3bc <VL53L1_preset_mode_standard_ranging_mm2_cal+0x140>)
	pgeneral->phasecal_config__override                       = 0x00;
 800a304:	724c      	strb	r4, [r1, #9]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a306:	f44f 4b0c 	mov.w	fp, #35840	; 0x8c00
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a30a:	f04f 091a 	mov.w	r9, #26
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a30e:	2020      	movs	r0, #32
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a310:	f8c1 6012 	str.w	r6, [r1, #18]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800a314:	818c      	strh	r4, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800a316:	81cc      	strh	r4, [r1, #14]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a318:	f8a1 b010 	strh.w	fp, [r1, #16]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800a31c:	f04f 0af5 	mov.w	sl, #245	; 0xf5
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a320:	f882 9001 	strb.w	r9, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a324:	70d0      	strb	r0, [r2, #3]
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800a326:	f04f 090b 	mov.w	r9, #11
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800a32a:	2009      	movs	r0, #9
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800a32c:	f04f 0bcc 	mov.w	fp, #204	; 0xcc
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800a330:	7014      	strb	r4, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800a332:	7094      	strb	r4, [r2, #2]
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800a334:	f882 e004 	strb.w	lr, [r2, #4]
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800a338:	f882 e007 	strb.w	lr, [r2, #7]
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800a33c:	f882 9006 	strb.w	r9, [r2, #6]
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800a340:	7250      	strb	r0, [r2, #9]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800a342:	f882 b005 	strb.w	fp, [r2, #5]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800a346:	f882 a008 	strb.w	sl, [r2, #8]
	ptiming->range_config__sigma_thresh                       =
 800a34a:	f8b5 a014 	ldrh.w	sl, [r5, #20]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800a34e:	f8b5 b01a 	ldrh.w	fp, [r5, #26]
	ptiming->range_config__sigma_thresh                       =
 800a352:	f8a2 a00a 	strh.w	sl, [r2, #10]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800a356:	f04f 0a78 	mov.w	sl, #120	; 0x78
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800a35a:	f8a2 b00c 	strh.w	fp, [r2, #12]
	ptiming->range_config__valid_phase_low                    = 0x08;
 800a35e:	f882 800e 	strb.w	r8, [r2, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800a362:	f882 a00f 	strb.w	sl, [r2, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800a366:	6114      	str	r4, [r2, #16]
	ptiming->system__fractional_enable                        = 0x00;
 800a368:	7514      	strb	r4, [r2, #20]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800a36a:	f883 e000 	strb.w	lr, [r3]
	pdynamic->system__thresh_high                              = 0x0000;
 800a36e:	f8c3 4002 	str.w	r4, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800a372:	719c      	strb	r4, [r3, #6]
	pdynamic->system__seed_config =
 800a374:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
 800a378:	71da      	strb	r2, [r3, #7]
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800a37a:	7258      	strb	r0, [r3, #9]
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800a37c:	f883 9008 	strb.w	r9, [r3, #8]
	pdynamic->sd_config__initial_phase_sd0                     =
 800a380:	79ea      	ldrb	r2, [r5, #7]
 800a382:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800a384:	7aaa      	ldrb	r2, [r5, #10]
 800a386:	72da      	strb	r2, [r3, #11]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800a388:	f883 e00c 	strb.w	lr, [r3, #12]
	pdynamic->sd_config__first_order_select =
 800a38c:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
 800a390:	735a      	strb	r2, [r3, #13]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800a392:	4620      	mov	r0, r4
	psystem->system__stream_count_ctrl                         = 0x00;
 800a394:	9c09      	ldr	r4, [sp, #36]	; 0x24
	pdynamic->sd_config__quantifier         =
 800a396:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
	psystem->system__stream_count_ctrl                         = 0x00;
 800a39a:	4d09      	ldr	r5, [pc, #36]	; (800a3c0 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x144>)
	pdynamic->sd_config__quantifier         =
 800a39c:	739a      	strb	r2, [r3, #14]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a39e:	f04f 0ec7 	mov.w	lr, #199	; 0xc7
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800a3a2:	f883 c010 	strb.w	ip, [r3, #16]
	pdynamic->system__grouped_parameter_hold                   = 0x02;
 800a3a6:	749f      	strb	r7, [r3, #18]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a3a8:	f883 e00f 	strb.w	lr, [r3, #15]
		pdynamic->system__sequence_config  = \
 800a3ac:	225b      	movs	r2, #91	; 0x5b
	psystem->system__stream_count_ctrl                         = 0x00;
 800a3ae:	f8c4 5001 	str.w	r5, [r4, #1]
		pgeneral->dss_config__roi_mode_control =
 800a3b2:	728f      	strb	r7, [r1, #10]
		pdynamic->system__sequence_config  = \
 800a3b4:	745a      	strb	r2, [r3, #17]
}
 800a3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ba:	bf00      	nop
 800a3bc:	01ff3800 	.word	0x01ff3800
 800a3c0:	21010100 	.word	0x21010100

0800a3c4 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800a3c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3c8:	4604      	mov	r4, r0
 800a3ca:	9d09      	ldr	r5, [sp, #36]	; 0x24
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a3cc:	f8df a134 	ldr.w	sl, [pc, #308]	; 800a504 <VL53L1_preset_mode_timed_ranging+0x140>
	pstatic->debug__ctrl                                      = 0x00;
 800a3d0:	2000      	movs	r0, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a3d2:	f04f 0e02 	mov.w	lr, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a3d6:	f04f 0808 	mov.w	r8, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a3da:	f44f 6720 	mov.w	r7, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 800a3de:	2611      	movs	r6, #17
	pstatic->debug__ctrl                                      = 0x00;
 800a3e0:	70a0      	strb	r0, [r4, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800a3e2:	70e0      	strb	r0, [r4, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800a3e4:	7120      	strb	r0, [r4, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800a3e6:	7160      	strb	r0, [r4, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800a3e8:	71a0      	strb	r0, [r4, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800a3ea:	71e0      	strb	r0, [r4, #7]
	pstatic->host_if__status                                  = 0x00;
 800a3ec:	7220      	strb	r0, [r4, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800a3ee:	7260      	strb	r0, [r4, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800a3f0:	72a0      	strb	r0, [r4, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800a3f2:	72e0      	strb	r0, [r4, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800a3f4:	73a0      	strb	r0, [r4, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800a3f6:	7460      	strb	r0, [r4, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a3f8:	f884 e00d 	strb.w	lr, [r4, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800a3fc:	f884 e00f 	strb.w	lr, [r4, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a400:	f884 8010 	strb.w	r8, [r4, #16]
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a404:	8027      	strh	r7, [r4, #0]
	pstatic->gpio_hv_mux__ctrl  = \
 800a406:	7326      	strb	r6, [r4, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800a408:	7fae      	ldrb	r6, [r5, #30]
 800a40a:	74a6      	strb	r6, [r4, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800a40c:	7fee      	ldrb	r6, [r5, #31]
 800a40e:	74e6      	strb	r6, [r4, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800a410:	f895 6020 	ldrb.w	r6, [r5, #32]
 800a414:	7526      	strb	r6, [r4, #20]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a416:	f04f 0cff 	mov.w	ip, #255	; 0xff
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a41a:	2601      	movs	r6, #1
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800a41c:	75a0      	strb	r0, [r4, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800a41e:	75e0      	strb	r0, [r4, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800a420:	8320      	strh	r0, [r4, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a422:	7566      	strb	r6, [r4, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a424:	f884 c01a 	strb.w	ip, [r4, #26]
	pstatic->algo__range_min_clip                             =
 800a428:	7c2f      	ldrb	r7, [r5, #16]
 800a42a:	76e7      	strb	r7, [r4, #27]
{
 800a42c:	9f08      	ldr	r7, [sp, #32]
	pstatic->algo__consistency_check__tolerance               =
 800a42e:	f895 900c 	ldrb.w	r9, [r5, #12]
 800a432:	f884 901c 	strb.w	r9, [r4, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a436:	f04f 6932 	mov.w	r9, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800a43a:	7760      	strb	r0, [r4, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800a43c:	77a0      	strb	r0, [r4, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800a43e:	77e0      	strb	r0, [r4, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a440:	f8c1 9000 	str.w	r9, [r1]
	pgeneral->cal_config__repeat_rate                         =
 800a444:	89ec      	ldrh	r4, [r5, #14]
 800a446:	808c      	strh	r4, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a448:	240d      	movs	r4, #13
	pgeneral->global_config__vcsel_width                      = 0x02;
 800a44a:	f881 e006 	strb.w	lr, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a44e:	71cc      	strb	r4, [r1, #7]
	pgeneral->phasecal_config__target                         =
 800a450:	7b6c      	ldrb	r4, [r5, #13]
 800a452:	720c      	strb	r4, [r1, #8]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a454:	f44f 440c 	mov.w	r4, #35840	; 0x8c00
	pgeneral->phasecal_config__override                       = 0x00;
 800a458:	7248      	strb	r0, [r1, #9]
	pgeneral->dss_config__roi_mode_control =
 800a45a:	728e      	strb	r6, [r1, #10]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a45c:	f8c1 a012 	str.w	sl, [r1, #18]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800a460:	8188      	strh	r0, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800a462:	81c8      	strh	r0, [r1, #14]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a464:	820c      	strh	r4, [r1, #16]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a466:	f04f 091a 	mov.w	r9, #26
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800a46a:	240b      	movs	r4, #11
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800a46c:	2109      	movs	r1, #9
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a46e:	f04f 0e20 	mov.w	lr, #32
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800a472:	7010      	strb	r0, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800a474:	7090      	strb	r0, [r2, #2]
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800a476:	7194      	strb	r4, [r2, #6]
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800a478:	7251      	strb	r1, [r2, #9]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a47a:	f882 9001 	strb.w	r9, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a47e:	f882 e003 	strb.w	lr, [r2, #3]
	ptiming->range_config__sigma_thresh                       =
 800a482:	f8b5 e014 	ldrh.w	lr, [r5, #20]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800a486:	f8b5 901a 	ldrh.w	r9, [r5, #26]
	ptiming->range_config__sigma_thresh                       =
 800a48a:	f8a2 e00a 	strh.w	lr, [r2, #10]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800a48e:	f04f 0e78 	mov.w	lr, #120	; 0x78
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800a492:	f8a2 900c 	strh.w	r9, [r2, #12]
	ptiming->range_config__valid_phase_low                    = 0x08;
 800a496:	f882 800e 	strb.w	r8, [r2, #14]
	ptiming->system__fractional_enable                        = 0x00;
 800a49a:	7510      	strb	r0, [r2, #20]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800a49c:	f882 e00f 	strb.w	lr, [r2, #15]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800a4a0:	701e      	strb	r6, [r3, #0]
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800a4a2:	721c      	strb	r4, [r3, #8]
	pdynamic->system__thresh_high                              = 0x0000;
 800a4a4:	f8c3 0002 	str.w	r0, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800a4a8:	7198      	strb	r0, [r3, #6]
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800a4aa:	7259      	strb	r1, [r3, #9]
	pdynamic->sd_config__initial_phase_sd0                     =
 800a4ac:	79e9      	ldrb	r1, [r5, #7]
 800a4ae:	7299      	strb	r1, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800a4b0:	7aa9      	ldrb	r1, [r5, #10]
 800a4b2:	72d9      	strb	r1, [r3, #11]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800a4b4:	731e      	strb	r6, [r3, #12]
	pdynamic->sd_config__first_order_select =
 800a4b6:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
 800a4ba:	7359      	strb	r1, [r3, #13]
	pdynamic->sd_config__quantifier         =
 800a4bc:	f895 1023 	ldrb.w	r1, [r5, #35]	; 0x23
 800a4c0:	7399      	strb	r1, [r3, #14]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a4c2:	f04f 09c7 	mov.w	r9, #199	; 0xc7
	pdynamic->system__sequence_config                          = \
 800a4c6:	f04f 08db 	mov.w	r8, #219	; 0xdb
		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800a4ca:	f04f 0eb1 	mov.w	lr, #177	; 0xb1
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800a4ce:	24d4      	movs	r4, #212	; 0xd4

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 800a4d0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800a4d4:	f883 c010 	strb.w	ip, [r3, #16]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a4d8:	f883 900f 	strb.w	r9, [r3, #15]
	pdynamic->system__sequence_config                          = \
 800a4dc:	f883 8011 	strb.w	r8, [r3, #17]
	psystem->system__stream_count_ctrl                         = 0x00;
 800a4e0:	7078      	strb	r0, [r7, #1]
	psystem->firmware__enable                                  = 0x01;
 800a4e2:	70be      	strb	r6, [r7, #2]
	psystem->system__interrupt_clear                           = \
 800a4e4:	70fe      	strb	r6, [r7, #3]
		pdynamic->system__grouped_parameter_hold = 0x00;
 800a4e6:	7498      	strb	r0, [r3, #18]
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800a4e8:	7110      	strb	r0, [r2, #4]
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800a4ea:	71d0      	strb	r0, [r2, #7]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800a4ec:	f882 e005 	strb.w	lr, [r2, #5]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800a4f0:	7214      	strb	r4, [r2, #8]
		ptiming->system__intermeasurement_period = 0x00000600;
 800a4f2:	6111      	str	r1, [r2, #16]
		pdynamic->system__seed_config =
 800a4f4:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
 800a4f8:	71da      	strb	r2, [r3, #7]
				ptuning_parms->tp_timed_seed_cfg;

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800a4fa:	2340      	movs	r3, #64	; 0x40
 800a4fc:	713b      	strb	r3, [r7, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800a4fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a502:	bf00      	nop
 800a504:	01ff3800 	.word	0x01ff3800

0800a508 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800a508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a50c:	9d09      	ldr	r5, [sp, #36]	; 0x24
	pstatic->debug__ctrl                                      = 0x00;
 800a50e:	2400      	movs	r4, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a510:	f04f 0e02 	mov.w	lr, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a514:	f04f 0c08 	mov.w	ip, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a518:	f44f 6720 	mov.w	r7, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 800a51c:	2611      	movs	r6, #17
	pstatic->debug__ctrl                                      = 0x00;
 800a51e:	7084      	strb	r4, [r0, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800a520:	70c4      	strb	r4, [r0, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800a522:	7104      	strb	r4, [r0, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800a524:	7144      	strb	r4, [r0, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800a526:	7184      	strb	r4, [r0, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800a528:	71c4      	strb	r4, [r0, #7]
	pstatic->host_if__status                                  = 0x00;
 800a52a:	7204      	strb	r4, [r0, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800a52c:	7244      	strb	r4, [r0, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800a52e:	7284      	strb	r4, [r0, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800a530:	72c4      	strb	r4, [r0, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800a532:	7384      	strb	r4, [r0, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800a534:	7444      	strb	r4, [r0, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a536:	f880 e00d 	strb.w	lr, [r0, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800a53a:	f880 e00f 	strb.w	lr, [r0, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a53e:	f880 c010 	strb.w	ip, [r0, #16]
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a542:	8007      	strh	r7, [r0, #0]
	pstatic->gpio_hv_mux__ctrl  = \
 800a544:	7306      	strb	r6, [r0, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800a546:	7fae      	ldrb	r6, [r5, #30]
 800a548:	7486      	strb	r6, [r0, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800a54a:	7fee      	ldrb	r6, [r5, #31]
 800a54c:	74c6      	strb	r6, [r0, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800a54e:	f895 6020 	ldrb.w	r6, [r5, #32]
 800a552:	7506      	strb	r6, [r0, #20]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a554:	f04f 08ff 	mov.w	r8, #255	; 0xff
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a558:	2601      	movs	r6, #1
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800a55a:	7584      	strb	r4, [r0, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800a55c:	75c4      	strb	r4, [r0, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800a55e:	8304      	strh	r4, [r0, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a560:	7546      	strb	r6, [r0, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a562:	f880 801a 	strb.w	r8, [r0, #26]
	pstatic->algo__range_min_clip                             =
 800a566:	7c2f      	ldrb	r7, [r5, #16]
 800a568:	76c7      	strb	r7, [r0, #27]
{
 800a56a:	9f08      	ldr	r7, [sp, #32]
	pstatic->algo__consistency_check__tolerance               =
 800a56c:	f895 900c 	ldrb.w	r9, [r5, #12]
 800a570:	f880 901c 	strb.w	r9, [r0, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a574:	f04f 6932 	mov.w	r9, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800a578:	7744      	strb	r4, [r0, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800a57a:	7784      	strb	r4, [r0, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800a57c:	77c4      	strb	r4, [r0, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a57e:	f8c1 9000 	str.w	r9, [r1]
	pgeneral->cal_config__repeat_rate                         =
 800a582:	89e8      	ldrh	r0, [r5, #14]
 800a584:	8088      	strh	r0, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a586:	200d      	movs	r0, #13
	pgeneral->global_config__vcsel_width                      = 0x02;
 800a588:	f881 e006 	strb.w	lr, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a58c:	71c8      	strb	r0, [r1, #7]
	pgeneral->phasecal_config__target                         =
 800a58e:	7b68      	ldrb	r0, [r5, #13]
 800a590:	7208      	strb	r0, [r1, #8]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a592:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800a644 <VL53L1_preset_mode_timed_ranging_short_range+0x13c>
	pgeneral->phasecal_config__override                       = 0x00;
 800a596:	724c      	strb	r4, [r1, #9]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a598:	f44f 4a0c 	mov.w	sl, #35840	; 0x8c00
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a59c:	f04f 0e1a 	mov.w	lr, #26
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a5a0:	2020      	movs	r0, #32
	pgeneral->dss_config__roi_mode_control =
 800a5a2:	728e      	strb	r6, [r1, #10]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800a5a4:	818c      	strh	r4, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800a5a6:	81cc      	strh	r4, [r1, #14]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a5a8:	f8a1 a010 	strh.w	sl, [r1, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a5ac:	f8c1 9012 	str.w	r9, [r1, #18]
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800a5b0:	7014      	strb	r4, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800a5b2:	7094      	strb	r4, [r2, #2]
	ptiming->system__fractional_enable                        = 0x00;
 800a5b4:	7514      	strb	r4, [r2, #20]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a5b6:	f882 e001 	strb.w	lr, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a5ba:	70d0      	strb	r0, [r2, #3]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800a5bc:	701e      	strb	r6, [r3, #0]
	pdynamic->system__thresh_high                              = 0x0000;
 800a5be:	f8c3 4002 	str.w	r4, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800a5c2:	719c      	strb	r4, [r3, #6]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800a5c4:	731e      	strb	r6, [r3, #12]
	pdynamic->sd_config__first_order_select =
 800a5c6:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
 800a5ca:	7359      	strb	r1, [r3, #13]
	pdynamic->sd_config__quantifier         =
 800a5cc:	f895 1023 	ldrb.w	r1, [r5, #35]	; 0x23
 800a5d0:	7399      	strb	r1, [r3, #14]
		ptiming->range_config__vcsel_period_a                = 0x07;
 800a5d2:	2007      	movs	r0, #7
		ptiming->range_config__vcsel_period_b                = 0x05;
 800a5d4:	2105      	movs	r1, #5
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a5d6:	f04f 09c7 	mov.w	r9, #199	; 0xc7
	pdynamic->system__sequence_config                          = \
 800a5da:	f04f 0edb 	mov.w	lr, #219	; 0xdb
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a5de:	f883 900f 	strb.w	r9, [r3, #15]
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800a5e2:	f883 8010 	strb.w	r8, [r3, #16]
	pdynamic->system__sequence_config                          = \
 800a5e6:	f883 e011 	strb.w	lr, [r3, #17]
	psystem->system__stream_count_ctrl                         = 0x00;
 800a5ea:	707c      	strb	r4, [r7, #1]
	psystem->firmware__enable                                  = 0x01;
 800a5ec:	70be      	strb	r6, [r7, #2]
	psystem->system__interrupt_clear                           = \
 800a5ee:	70fe      	strb	r6, [r7, #3]
		ptiming->range_config__vcsel_period_a                = 0x07;
 800a5f0:	7190      	strb	r0, [r2, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 800a5f2:	7251      	strb	r1, [r2, #9]
		ptiming->range_config__sigma_thresh                  =
 800a5f4:	f8b5 e016 	ldrh.w	lr, [r5, #22]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a5f8:	f8b5 801c 	ldrh.w	r8, [r5, #28]
		ptiming->range_config__sigma_thresh                  =
 800a5fc:	f8a2 e00a 	strh.w	lr, [r2, #10]
		ptiming->range_config__valid_phase_high              = 0x38;
 800a600:	f04f 0e38 	mov.w	lr, #56	; 0x38
 800a604:	f882 e00f 	strb.w	lr, [r2, #15]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a608:	f8a2 800c 	strh.w	r8, [r2, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800a60c:	f882 c00e 	strb.w	ip, [r2, #14]
		pdynamic->sd_config__woi_sd0                         = 0x07;
 800a610:	7218      	strb	r0, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 800a612:	7259      	strb	r1, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
 800a614:	7a29      	ldrb	r1, [r5, #8]
 800a616:	7299      	strb	r1, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
 800a618:	7ae9      	ldrb	r1, [r5, #11]
 800a61a:	72d9      	strb	r1, [r3, #11]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800a61c:	f04f 0e84 	mov.w	lr, #132	; 0x84
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800a620:	20b1      	movs	r0, #177	; 0xb1

		ptiming->system__intermeasurement_period = 0x00000600;
 800a622:	f44f 61c0 	mov.w	r1, #1536	; 0x600
		pdynamic->system__grouped_parameter_hold = 0x00;
 800a626:	749c      	strb	r4, [r3, #18]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800a628:	7210      	strb	r0, [r2, #8]
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800a62a:	7116      	strb	r6, [r2, #4]
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800a62c:	71d6      	strb	r6, [r2, #7]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800a62e:	f882 e005 	strb.w	lr, [r2, #5]
		ptiming->system__intermeasurement_period = 0x00000600;
 800a632:	6111      	str	r1, [r2, #16]
		pdynamic->system__seed_config =
 800a634:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
 800a638:	71da      	strb	r2, [r3, #7]
				ptuning_parms->tp_timed_seed_cfg;

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800a63a:	2340      	movs	r3, #64	; 0x40
 800a63c:	713b      	strb	r3, [r7, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800a63e:	4620      	mov	r0, r4
 800a640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a644:	01ff3800 	.word	0x01ff3800

0800a648 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800a648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a64c:	4604      	mov	r4, r0
 800a64e:	9d09      	ldr	r5, [sp, #36]	; 0x24
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a650:	f8df a12c 	ldr.w	sl, [pc, #300]	; 800a780 <VL53L1_preset_mode_timed_ranging_long_range+0x138>
	pstatic->debug__ctrl                                      = 0x00;
 800a654:	2000      	movs	r0, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a656:	f04f 0e02 	mov.w	lr, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a65a:	f04f 0c08 	mov.w	ip, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a65e:	f44f 6720 	mov.w	r7, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 800a662:	2611      	movs	r6, #17
	pstatic->debug__ctrl                                      = 0x00;
 800a664:	70a0      	strb	r0, [r4, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800a666:	70e0      	strb	r0, [r4, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800a668:	7120      	strb	r0, [r4, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800a66a:	7160      	strb	r0, [r4, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800a66c:	71a0      	strb	r0, [r4, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800a66e:	71e0      	strb	r0, [r4, #7]
	pstatic->host_if__status                                  = 0x00;
 800a670:	7220      	strb	r0, [r4, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800a672:	7260      	strb	r0, [r4, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800a674:	72a0      	strb	r0, [r4, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800a676:	72e0      	strb	r0, [r4, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800a678:	73a0      	strb	r0, [r4, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800a67a:	7460      	strb	r0, [r4, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a67c:	f884 e00d 	strb.w	lr, [r4, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800a680:	f884 e00f 	strb.w	lr, [r4, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a684:	f884 c010 	strb.w	ip, [r4, #16]
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a688:	8027      	strh	r7, [r4, #0]
	pstatic->gpio_hv_mux__ctrl  = \
 800a68a:	7326      	strb	r6, [r4, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800a68c:	7fae      	ldrb	r6, [r5, #30]
 800a68e:	74a6      	strb	r6, [r4, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800a690:	7fee      	ldrb	r6, [r5, #31]
 800a692:	74e6      	strb	r6, [r4, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800a694:	f895 6020 	ldrb.w	r6, [r5, #32]
 800a698:	7526      	strb	r6, [r4, #20]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a69a:	f04f 08ff 	mov.w	r8, #255	; 0xff
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a69e:	2601      	movs	r6, #1
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800a6a0:	75a0      	strb	r0, [r4, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800a6a2:	75e0      	strb	r0, [r4, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800a6a4:	8320      	strh	r0, [r4, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a6a6:	7566      	strb	r6, [r4, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a6a8:	f884 801a 	strb.w	r8, [r4, #26]
	pstatic->algo__range_min_clip                             =
 800a6ac:	7c2f      	ldrb	r7, [r5, #16]
 800a6ae:	76e7      	strb	r7, [r4, #27]
{
 800a6b0:	9f08      	ldr	r7, [sp, #32]
	pstatic->algo__consistency_check__tolerance               =
 800a6b2:	f895 900c 	ldrb.w	r9, [r5, #12]
 800a6b6:	f884 901c 	strb.w	r9, [r4, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a6ba:	f04f 6932 	mov.w	r9, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800a6be:	7760      	strb	r0, [r4, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800a6c0:	77a0      	strb	r0, [r4, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800a6c2:	77e0      	strb	r0, [r4, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a6c4:	f8c1 9000 	str.w	r9, [r1]
	pgeneral->cal_config__repeat_rate                         =
 800a6c8:	89ec      	ldrh	r4, [r5, #14]
 800a6ca:	808c      	strh	r4, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a6cc:	240d      	movs	r4, #13
 800a6ce:	71cc      	strb	r4, [r1, #7]
	pgeneral->global_config__vcsel_width                      = 0x02;
 800a6d0:	f881 e006 	strb.w	lr, [r1, #6]
	pgeneral->phasecal_config__target                         =
 800a6d4:	f895 e00d 	ldrb.w	lr, [r5, #13]
 800a6d8:	f881 e008 	strb.w	lr, [r1, #8]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a6dc:	f44f 4e0c 	mov.w	lr, #35840	; 0x8c00
 800a6e0:	f8a1 e010 	strh.w	lr, [r1, #16]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a6e4:	f04f 091a 	mov.w	r9, #26
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a6e8:	f04f 0e20 	mov.w	lr, #32
	pgeneral->phasecal_config__override                       = 0x00;
 800a6ec:	7248      	strb	r0, [r1, #9]
	pgeneral->dss_config__roi_mode_control =
 800a6ee:	728e      	strb	r6, [r1, #10]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800a6f0:	8188      	strh	r0, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800a6f2:	81c8      	strh	r0, [r1, #14]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a6f4:	f8c1 a012 	str.w	sl, [r1, #18]
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800a6f8:	7010      	strb	r0, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800a6fa:	7090      	strb	r0, [r2, #2]
	ptiming->system__fractional_enable                        = 0x00;
 800a6fc:	7510      	strb	r0, [r2, #20]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a6fe:	f882 9001 	strb.w	r9, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a702:	f882 e003 	strb.w	lr, [r2, #3]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800a706:	701e      	strb	r6, [r3, #0]
	pdynamic->system__thresh_high                              = 0x0000;
 800a708:	f8c3 0002 	str.w	r0, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800a70c:	7198      	strb	r0, [r3, #6]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800a70e:	731e      	strb	r6, [r3, #12]
	pdynamic->sd_config__first_order_select =
 800a710:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
 800a714:	7359      	strb	r1, [r3, #13]
	pdynamic->sd_config__quantifier         =
 800a716:	f895 1023 	ldrb.w	r1, [r5, #35]	; 0x23
 800a71a:	7399      	strb	r1, [r3, #14]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a71c:	f04f 09c7 	mov.w	r9, #199	; 0xc7
		ptiming->range_config__vcsel_period_a                = 0x0F;
 800a720:	210f      	movs	r1, #15
	pdynamic->system__sequence_config                          = \
 800a722:	f04f 0edb 	mov.w	lr, #219	; 0xdb
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a726:	f883 900f 	strb.w	r9, [r3, #15]
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800a72a:	f883 8010 	strb.w	r8, [r3, #16]
	pdynamic->system__sequence_config                          = \
 800a72e:	f883 e011 	strb.w	lr, [r3, #17]
	psystem->system__stream_count_ctrl                         = 0x00;
 800a732:	7078      	strb	r0, [r7, #1]
	psystem->firmware__enable                                  = 0x01;
 800a734:	70be      	strb	r6, [r7, #2]
	psystem->system__interrupt_clear                           = \
 800a736:	70fe      	strb	r6, [r7, #3]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 800a738:	7254      	strb	r4, [r2, #9]
		ptiming->range_config__vcsel_period_a                = 0x0F;
 800a73a:	7191      	strb	r1, [r2, #6]
		ptiming->range_config__sigma_thresh                  =
 800a73c:	8a6e      	ldrh	r6, [r5, #18]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a73e:	f8b5 e018 	ldrh.w	lr, [r5, #24]
		ptiming->range_config__sigma_thresh                  =
 800a742:	8156      	strh	r6, [r2, #10]
		ptiming->range_config__valid_phase_high              = 0xB8;
 800a744:	26b8      	movs	r6, #184	; 0xb8
 800a746:	73d6      	strb	r6, [r2, #15]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a748:	f8a2 e00c 	strh.w	lr, [r2, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800a74c:	f882 c00e 	strb.w	ip, [r2, #14]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 800a750:	725c      	strb	r4, [r3, #9]
		pdynamic->sd_config__woi_sd0                         = 0x0F;
 800a752:	7219      	strb	r1, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 800a754:	79a9      	ldrb	r1, [r5, #6]
 800a756:	7299      	strb	r1, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
 800a758:	7a69      	ldrb	r1, [r5, #9]
 800a75a:	72d9      	strb	r1, [r3, #11]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800a75c:	2697      	movs	r6, #151	; 0x97
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800a75e:	24b1      	movs	r4, #177	; 0xb1

		ptiming->system__intermeasurement_period = 0x00000600;
 800a760:	f44f 61c0 	mov.w	r1, #1536	; 0x600
		pdynamic->system__grouped_parameter_hold = 0x00;
 800a764:	7498      	strb	r0, [r3, #18]
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800a766:	7110      	strb	r0, [r2, #4]
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800a768:	71d0      	strb	r0, [r2, #7]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800a76a:	7156      	strb	r6, [r2, #5]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800a76c:	7214      	strb	r4, [r2, #8]
		ptiming->system__intermeasurement_period = 0x00000600;
 800a76e:	6111      	str	r1, [r2, #16]
		pdynamic->system__seed_config =
 800a770:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
 800a774:	71da      	strb	r2, [r3, #7]
				ptuning_parms->tp_timed_seed_cfg;

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800a776:	2340      	movs	r3, #64	; 0x40
 800a778:	713b      	strb	r3, [r7, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800a77a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a77e:	bf00      	nop
 800a780:	01ff3800 	.word	0x01ff3800

0800a784 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800a784:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a788:	9d09      	ldr	r5, [sp, #36]	; 0x24
	pstatic->debug__ctrl                                      = 0x00;
 800a78a:	2400      	movs	r4, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a78c:	f04f 0902 	mov.w	r9, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a790:	f04f 0808 	mov.w	r8, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a794:	f44f 6720 	mov.w	r7, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 800a798:	2611      	movs	r6, #17
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a79a:	8007      	strh	r7, [r0, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800a79c:	7084      	strb	r4, [r0, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800a79e:	70c4      	strb	r4, [r0, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800a7a0:	7104      	strb	r4, [r0, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800a7a2:	7144      	strb	r4, [r0, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800a7a4:	7184      	strb	r4, [r0, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800a7a6:	71c4      	strb	r4, [r0, #7]
	pstatic->host_if__status                                  = 0x00;
 800a7a8:	7204      	strb	r4, [r0, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800a7aa:	7244      	strb	r4, [r0, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800a7ac:	7284      	strb	r4, [r0, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800a7ae:	72c4      	strb	r4, [r0, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800a7b0:	7384      	strb	r4, [r0, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800a7b2:	7444      	strb	r4, [r0, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a7b4:	f880 900d 	strb.w	r9, [r0, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800a7b8:	f880 900f 	strb.w	r9, [r0, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a7bc:	f880 8010 	strb.w	r8, [r0, #16]
	pstatic->gpio_hv_mux__ctrl  = \
 800a7c0:	7306      	strb	r6, [r0, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800a7c2:	7fae      	ldrb	r6, [r5, #30]
 800a7c4:	7486      	strb	r6, [r0, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800a7c6:	7fee      	ldrb	r6, [r5, #31]
 800a7c8:	74c6      	strb	r6, [r0, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800a7ca:	f895 6020 	ldrb.w	r6, [r5, #32]
 800a7ce:	7506      	strb	r6, [r0, #20]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a7d0:	2701      	movs	r7, #1
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a7d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800a7d6:	7584      	strb	r4, [r0, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800a7d8:	75c4      	strb	r4, [r0, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800a7da:	8304      	strh	r4, [r0, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a7dc:	7547      	strb	r7, [r0, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a7de:	f880 c01a 	strb.w	ip, [r0, #26]
	pstatic->algo__range_min_clip                             =
 800a7e2:	f895 a010 	ldrb.w	sl, [r5, #16]
{
 800a7e6:	9e08      	ldr	r6, [sp, #32]
	pstatic->algo__range_min_clip                             =
 800a7e8:	f880 a01b 	strb.w	sl, [r0, #27]
	pstatic->algo__consistency_check__tolerance               =
 800a7ec:	f895 a00c 	ldrb.w	sl, [r5, #12]
 800a7f0:	f880 a01c 	strb.w	sl, [r0, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a7f4:	f04f 6a32 	mov.w	sl, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800a7f8:	7744      	strb	r4, [r0, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800a7fa:	7784      	strb	r4, [r0, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800a7fc:	77c4      	strb	r4, [r0, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a7fe:	f8c1 a000 	str.w	sl, [r1]
	pgeneral->cal_config__repeat_rate                         =
 800a802:	89e8      	ldrh	r0, [r5, #14]
 800a804:	8088      	strh	r0, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a806:	200d      	movs	r0, #13
	pgeneral->global_config__vcsel_width                      = 0x02;
 800a808:	f881 9006 	strb.w	r9, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a80c:	71c8      	strb	r0, [r1, #7]
	pgeneral->phasecal_config__target                         =
 800a80e:	7b68      	ldrb	r0, [r5, #13]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a810:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 800a8d4 <VL53L1_preset_mode_low_power_auto_ranging+0x150>
	pgeneral->phasecal_config__target                         =
 800a814:	7208      	strb	r0, [r1, #8]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a816:	f44f 4b0c 	mov.w	fp, #35840	; 0x8c00
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a81a:	f8c1 a012 	str.w	sl, [r1, #18]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a81e:	f8a1 b010 	strh.w	fp, [r1, #16]
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800a822:	f04f 0a09 	mov.w	sl, #9
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800a826:	f04f 0b0b 	mov.w	fp, #11
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a82a:	f04f 091a 	mov.w	r9, #26
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a82e:	2020      	movs	r0, #32
	pgeneral->phasecal_config__override                       = 0x00;
 800a830:	724c      	strb	r4, [r1, #9]
	pgeneral->dss_config__roi_mode_control =
 800a832:	728f      	strb	r7, [r1, #10]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800a834:	818c      	strh	r4, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800a836:	81cc      	strh	r4, [r1, #14]
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800a838:	7014      	strb	r4, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800a83a:	7094      	strb	r4, [r2, #2]
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800a83c:	f882 b006 	strb.w	fp, [r2, #6]
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800a840:	f882 a009 	strb.w	sl, [r2, #9]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a844:	f882 9001 	strb.w	r9, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a848:	70d0      	strb	r0, [r2, #3]
	ptiming->range_config__sigma_thresh                       =
 800a84a:	8aa8      	ldrh	r0, [r5, #20]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800a84c:	f8b5 901a 	ldrh.w	r9, [r5, #26]
	ptiming->range_config__sigma_thresh                       =
 800a850:	8150      	strh	r0, [r2, #10]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800a852:	2078      	movs	r0, #120	; 0x78
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800a854:	f8a2 900c 	strh.w	r9, [r2, #12]
	ptiming->range_config__valid_phase_low                    = 0x08;
 800a858:	f882 800e 	strb.w	r8, [r2, #14]
	ptiming->system__fractional_enable                        = 0x00;
 800a85c:	7514      	strb	r4, [r2, #20]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800a85e:	73d0      	strb	r0, [r2, #15]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800a860:	701f      	strb	r7, [r3, #0]
	pdynamic->system__thresh_high                              = 0x0000;
 800a862:	f8c3 4002 	str.w	r4, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800a866:	719c      	strb	r4, [r3, #6]
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800a868:	f883 b008 	strb.w	fp, [r3, #8]
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800a86c:	f883 a009 	strb.w	sl, [r3, #9]
	pdynamic->sd_config__initial_phase_sd0                     =
 800a870:	79e8      	ldrb	r0, [r5, #7]
 800a872:	7298      	strb	r0, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800a874:	7aa8      	ldrb	r0, [r5, #10]
 800a876:	72d8      	strb	r0, [r3, #11]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800a878:	731f      	strb	r7, [r3, #12]
	pdynamic->sd_config__first_order_select =
 800a87a:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
 800a87e:	7358      	strb	r0, [r3, #13]
	pdynamic->sd_config__quantifier         =
 800a880:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
 800a884:	7398      	strb	r0, [r3, #14]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a886:	f04f 0bc7 	mov.w	fp, #199	; 0xc7
	pdynamic->system__sequence_config                          = \
 800a88a:	f04f 0adb 	mov.w	sl, #219	; 0xdb
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800a88e:	f04f 09b1 	mov.w	r9, #177	; 0xb1
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800a892:	f04f 08d4 	mov.w	r8, #212	; 0xd4
		ptiming->system__intermeasurement_period = 0x00000600;
 800a896:	f44f 60c0 	mov.w	r0, #1536	; 0x600
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800a89a:	f883 c010 	strb.w	ip, [r3, #16]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a89e:	f883 b00f 	strb.w	fp, [r3, #15]
	pdynamic->system__sequence_config                          = \
 800a8a2:	f883 a011 	strb.w	sl, [r3, #17]
	psystem->system__stream_count_ctrl                         = 0x00;
 800a8a6:	7074      	strb	r4, [r6, #1]
	psystem->firmware__enable                                  = 0x01;
 800a8a8:	70b7      	strb	r7, [r6, #2]
	psystem->system__interrupt_clear                           = \
 800a8aa:	70f7      	strb	r7, [r6, #3]
		pdynamic->system__grouped_parameter_hold = 0x00;
 800a8ac:	749c      	strb	r4, [r3, #18]
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800a8ae:	7114      	strb	r4, [r2, #4]
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800a8b0:	71d4      	strb	r4, [r2, #7]
		ptiming->system__intermeasurement_period = 0x00000600;
 800a8b2:	6110      	str	r0, [r2, #16]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800a8b4:	f882 9005 	strb.w	r9, [r2, #5]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800a8b8:	f882 8008 	strb.w	r8, [r2, #8]
		pdynamic->system__seed_config =
 800a8bc:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
 800a8c0:	71da      	strb	r2, [r3, #7]
		psystem->system__mode_start =
 800a8c2:	2440      	movs	r4, #64	; 0x40
 800a8c4:	7134      	strb	r4, [r6, #4]
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
		status = VL53L1_config_low_power_auto_mode(
 800a8c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8c8:	4608      	mov	r0, r1
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800a8ca:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
		status = VL53L1_config_low_power_auto_mode(
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	f000 bd74 	b.w	800b3bc <VL53L1_config_low_power_auto_mode>
 800a8d4:	01ff3800 	.word	0x01ff3800

0800a8d8 <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800a8d8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a8dc:	9d09      	ldr	r5, [sp, #36]	; 0x24
	pstatic->debug__ctrl                                      = 0x00;
 800a8de:	2400      	movs	r4, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a8e0:	f04f 0c02 	mov.w	ip, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a8e4:	f04f 0808 	mov.w	r8, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a8e8:	f44f 6720 	mov.w	r7, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 800a8ec:	2611      	movs	r6, #17
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a8ee:	8007      	strh	r7, [r0, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800a8f0:	7084      	strb	r4, [r0, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800a8f2:	70c4      	strb	r4, [r0, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800a8f4:	7104      	strb	r4, [r0, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800a8f6:	7144      	strb	r4, [r0, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800a8f8:	7184      	strb	r4, [r0, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800a8fa:	71c4      	strb	r4, [r0, #7]
	pstatic->host_if__status                                  = 0x00;
 800a8fc:	7204      	strb	r4, [r0, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800a8fe:	7244      	strb	r4, [r0, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800a900:	7284      	strb	r4, [r0, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800a902:	72c4      	strb	r4, [r0, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800a904:	7384      	strb	r4, [r0, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800a906:	7444      	strb	r4, [r0, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 800a908:	f880 c00d 	strb.w	ip, [r0, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800a90c:	f880 c00f 	strb.w	ip, [r0, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a910:	f880 8010 	strb.w	r8, [r0, #16]
	pstatic->gpio_hv_mux__ctrl  = \
 800a914:	7306      	strb	r6, [r0, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800a916:	7fae      	ldrb	r6, [r5, #30]
 800a918:	7486      	strb	r6, [r0, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800a91a:	7fee      	ldrb	r6, [r5, #31]
 800a91c:	74c6      	strb	r6, [r0, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800a91e:	f895 6020 	ldrb.w	r6, [r5, #32]
 800a922:	7506      	strb	r6, [r0, #20]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a924:	2701      	movs	r7, #1
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a926:	f04f 09ff 	mov.w	r9, #255	; 0xff
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800a92a:	7584      	strb	r4, [r0, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800a92c:	75c4      	strb	r4, [r0, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800a92e:	8304      	strh	r4, [r0, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a930:	7547      	strb	r7, [r0, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a932:	f880 901a 	strb.w	r9, [r0, #26]
	pstatic->algo__range_min_clip                             =
 800a936:	f895 a010 	ldrb.w	sl, [r5, #16]
{
 800a93a:	9e08      	ldr	r6, [sp, #32]
	pstatic->algo__range_min_clip                             =
 800a93c:	f880 a01b 	strb.w	sl, [r0, #27]
	pstatic->algo__consistency_check__tolerance               =
 800a940:	f895 a00c 	ldrb.w	sl, [r5, #12]
 800a944:	f880 a01c 	strb.w	sl, [r0, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a948:	f04f 6a32 	mov.w	sl, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800a94c:	7744      	strb	r4, [r0, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800a94e:	7784      	strb	r4, [r0, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800a950:	77c4      	strb	r4, [r0, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a952:	f8c1 a000 	str.w	sl, [r1]
	pgeneral->cal_config__repeat_rate                         =
 800a956:	89e8      	ldrh	r0, [r5, #14]
 800a958:	8088      	strh	r0, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a95a:	200d      	movs	r0, #13
	pgeneral->global_config__vcsel_width                      = 0x02;
 800a95c:	f881 c006 	strb.w	ip, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a960:	71c8      	strb	r0, [r1, #7]
	pgeneral->phasecal_config__target                         =
 800a962:	7b68      	ldrb	r0, [r5, #13]
 800a964:	7208      	strb	r0, [r1, #8]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a966:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800aa2c <VL53L1_preset_mode_low_power_auto_short_ranging+0x154>
	pgeneral->phasecal_config__override                       = 0x00;
 800a96a:	724c      	strb	r4, [r1, #9]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a96c:	f44f 4b0c 	mov.w	fp, #35840	; 0x8c00
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a970:	f04f 0c1a 	mov.w	ip, #26
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a974:	2020      	movs	r0, #32
	pgeneral->dss_config__roi_mode_control =
 800a976:	728f      	strb	r7, [r1, #10]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800a978:	818c      	strh	r4, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800a97a:	81cc      	strh	r4, [r1, #14]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a97c:	f8a1 b010 	strh.w	fp, [r1, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a980:	f8c1 a012 	str.w	sl, [r1, #18]
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800a984:	7014      	strb	r4, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800a986:	7094      	strb	r4, [r2, #2]
	ptiming->system__fractional_enable                        = 0x00;
 800a988:	7514      	strb	r4, [r2, #20]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a98a:	f882 c001 	strb.w	ip, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a98e:	70d0      	strb	r0, [r2, #3]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800a990:	701f      	strb	r7, [r3, #0]
	pdynamic->system__thresh_high                              = 0x0000;
 800a992:	f8c3 4002 	str.w	r4, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800a996:	719c      	strb	r4, [r3, #6]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800a998:	731f      	strb	r7, [r3, #12]
	pdynamic->sd_config__first_order_select =
 800a99a:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
 800a99e:	7358      	strb	r0, [r3, #13]
	pdynamic->sd_config__quantifier         =
 800a9a0:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
 800a9a4:	7398      	strb	r0, [r3, #14]
		ptiming->range_config__vcsel_period_a                = 0x07;
 800a9a6:	f04f 0c07 	mov.w	ip, #7
		ptiming->range_config__vcsel_period_b                = 0x05;
 800a9aa:	2005      	movs	r0, #5
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a9ac:	f04f 0bc7 	mov.w	fp, #199	; 0xc7
	pdynamic->system__sequence_config                          = \
 800a9b0:	f04f 0adb 	mov.w	sl, #219	; 0xdb
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a9b4:	f883 b00f 	strb.w	fp, [r3, #15]
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800a9b8:	f883 9010 	strb.w	r9, [r3, #16]
	pdynamic->system__sequence_config                          = \
 800a9bc:	f883 a011 	strb.w	sl, [r3, #17]
	psystem->system__stream_count_ctrl                         = 0x00;
 800a9c0:	7074      	strb	r4, [r6, #1]
	psystem->firmware__enable                                  = 0x01;
 800a9c2:	70b7      	strb	r7, [r6, #2]
	psystem->system__interrupt_clear                           = \
 800a9c4:	70f7      	strb	r7, [r6, #3]
		ptiming->range_config__vcsel_period_a                = 0x07;
 800a9c6:	f882 c006 	strb.w	ip, [r2, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 800a9ca:	7250      	strb	r0, [r2, #9]
		ptiming->range_config__sigma_thresh                  =
 800a9cc:	f8b5 9016 	ldrh.w	r9, [r5, #22]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a9d0:	f8b5 a01c 	ldrh.w	sl, [r5, #28]
		ptiming->range_config__sigma_thresh                  =
 800a9d4:	f8a2 900a 	strh.w	r9, [r2, #10]
		ptiming->range_config__valid_phase_high              = 0x38;
 800a9d8:	f04f 0938 	mov.w	r9, #56	; 0x38
		ptiming->range_config__valid_phase_low               = 0x08;
 800a9dc:	f882 800e 	strb.w	r8, [r2, #14]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a9e0:	f8a2 a00c 	strh.w	sl, [r2, #12]
		ptiming->range_config__valid_phase_high              = 0x38;
 800a9e4:	f882 900f 	strb.w	r9, [r2, #15]
		pdynamic->sd_config__woi_sd0                         = 0x07;
 800a9e8:	f883 c008 	strb.w	ip, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 800a9ec:	7258      	strb	r0, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
 800a9ee:	7a28      	ldrb	r0, [r5, #8]
 800a9f0:	7298      	strb	r0, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
 800a9f2:	7ae8      	ldrb	r0, [r5, #11]
 800a9f4:	72d8      	strb	r0, [r3, #11]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800a9f6:	f04f 0884 	mov.w	r8, #132	; 0x84
		ptiming->system__intermeasurement_period = 0x00000600;
 800a9fa:	f44f 60c0 	mov.w	r0, #1536	; 0x600
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800a9fe:	f04f 0cb1 	mov.w	ip, #177	; 0xb1
		pdynamic->system__grouped_parameter_hold = 0x00;
 800aa02:	749c      	strb	r4, [r3, #18]
		ptiming->system__intermeasurement_period = 0x00000600;
 800aa04:	6110      	str	r0, [r2, #16]
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800aa06:	7117      	strb	r7, [r2, #4]
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800aa08:	71d7      	strb	r7, [r2, #7]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800aa0a:	f882 8005 	strb.w	r8, [r2, #5]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800aa0e:	f882 c008 	strb.w	ip, [r2, #8]
		pdynamic->system__seed_config =
 800aa12:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
 800aa16:	71da      	strb	r2, [r3, #7]
		psystem->system__mode_start =
 800aa18:	2440      	movs	r4, #64	; 0x40
 800aa1a:	7134      	strb	r4, [r6, #4]
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
		status = VL53L1_config_low_power_auto_mode(
 800aa1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa1e:	4608      	mov	r0, r1
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800aa20:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
		status = VL53L1_config_low_power_auto_mode(
 800aa24:	4619      	mov	r1, r3
 800aa26:	f000 bcc9 	b.w	800b3bc <VL53L1_config_low_power_auto_mode>
 800aa2a:	bf00      	nop
 800aa2c:	01ff3800 	.word	0x01ff3800

0800aa30 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800aa30:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800aa34:	9d09      	ldr	r5, [sp, #36]	; 0x24
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800aa36:	f8df b148 	ldr.w	fp, [pc, #328]	; 800ab80 <VL53L1_preset_mode_low_power_auto_long_ranging+0x150>
	pstatic->debug__ctrl                                      = 0x00;
 800aa3a:	2400      	movs	r4, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 800aa3c:	f04f 0c02 	mov.w	ip, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800aa40:	f04f 0808 	mov.w	r8, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800aa44:	f44f 6720 	mov.w	r7, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 800aa48:	2611      	movs	r6, #17
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800aa4a:	8007      	strh	r7, [r0, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800aa4c:	7084      	strb	r4, [r0, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800aa4e:	70c4      	strb	r4, [r0, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800aa50:	7104      	strb	r4, [r0, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800aa52:	7144      	strb	r4, [r0, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800aa54:	7184      	strb	r4, [r0, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800aa56:	71c4      	strb	r4, [r0, #7]
	pstatic->host_if__status                                  = 0x00;
 800aa58:	7204      	strb	r4, [r0, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800aa5a:	7244      	strb	r4, [r0, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800aa5c:	7284      	strb	r4, [r0, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800aa5e:	72c4      	strb	r4, [r0, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800aa60:	7384      	strb	r4, [r0, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800aa62:	7444      	strb	r4, [r0, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 800aa64:	f880 c00d 	strb.w	ip, [r0, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800aa68:	f880 c00f 	strb.w	ip, [r0, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800aa6c:	f880 8010 	strb.w	r8, [r0, #16]
	pstatic->gpio_hv_mux__ctrl  = \
 800aa70:	7306      	strb	r6, [r0, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800aa72:	7fae      	ldrb	r6, [r5, #30]
 800aa74:	7486      	strb	r6, [r0, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800aa76:	7fee      	ldrb	r6, [r5, #31]
 800aa78:	74c6      	strb	r6, [r0, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800aa7a:	f895 6020 	ldrb.w	r6, [r5, #32]
 800aa7e:	7506      	strb	r6, [r0, #20]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800aa80:	2701      	movs	r7, #1
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800aa82:	f04f 09ff 	mov.w	r9, #255	; 0xff
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800aa86:	7584      	strb	r4, [r0, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800aa88:	75c4      	strb	r4, [r0, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800aa8a:	8304      	strh	r4, [r0, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800aa8c:	7547      	strb	r7, [r0, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800aa8e:	f880 901a 	strb.w	r9, [r0, #26]
	pstatic->algo__range_min_clip                             =
 800aa92:	f895 a010 	ldrb.w	sl, [r5, #16]
{
 800aa96:	9e08      	ldr	r6, [sp, #32]
	pstatic->algo__range_min_clip                             =
 800aa98:	f880 a01b 	strb.w	sl, [r0, #27]
	pstatic->algo__consistency_check__tolerance               =
 800aa9c:	f895 a00c 	ldrb.w	sl, [r5, #12]
 800aaa0:	f880 a01c 	strb.w	sl, [r0, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800aaa4:	f04f 6a32 	mov.w	sl, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800aaa8:	7744      	strb	r4, [r0, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800aaaa:	7784      	strb	r4, [r0, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800aaac:	77c4      	strb	r4, [r0, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800aaae:	f8c1 a000 	str.w	sl, [r1]
	pgeneral->cal_config__repeat_rate                         =
 800aab2:	89e8      	ldrh	r0, [r5, #14]
 800aab4:	8088      	strh	r0, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800aab6:	200d      	movs	r0, #13
 800aab8:	71c8      	strb	r0, [r1, #7]
	pgeneral->global_config__vcsel_width                      = 0x02;
 800aaba:	f881 c006 	strb.w	ip, [r1, #6]
	pgeneral->phasecal_config__target                         =
 800aabe:	f895 c00d 	ldrb.w	ip, [r5, #13]
 800aac2:	f881 c008 	strb.w	ip, [r1, #8]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800aac6:	f44f 4c0c 	mov.w	ip, #35840	; 0x8c00
 800aaca:	f8a1 c010 	strh.w	ip, [r1, #16]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800aace:	f04f 0a1a 	mov.w	sl, #26
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800aad2:	f04f 0c20 	mov.w	ip, #32
	pgeneral->phasecal_config__override                       = 0x00;
 800aad6:	724c      	strb	r4, [r1, #9]
	pgeneral->dss_config__roi_mode_control =
 800aad8:	728f      	strb	r7, [r1, #10]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800aada:	818c      	strh	r4, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800aadc:	81cc      	strh	r4, [r1, #14]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800aade:	f8c1 b012 	str.w	fp, [r1, #18]
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800aae2:	7014      	strb	r4, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800aae4:	7094      	strb	r4, [r2, #2]
	ptiming->system__fractional_enable                        = 0x00;
 800aae6:	7514      	strb	r4, [r2, #20]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800aae8:	f882 a001 	strb.w	sl, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800aaec:	f882 c003 	strb.w	ip, [r2, #3]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800aaf0:	701f      	strb	r7, [r3, #0]
	pdynamic->system__thresh_high                              = 0x0000;
 800aaf2:	f8c3 4002 	str.w	r4, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800aaf6:	719c      	strb	r4, [r3, #6]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800aaf8:	731f      	strb	r7, [r3, #12]
	pdynamic->sd_config__first_order_select =
 800aafa:	f895 c024 	ldrb.w	ip, [r5, #36]	; 0x24
 800aafe:	f883 c00d 	strb.w	ip, [r3, #13]
	pdynamic->sd_config__quantifier         =
 800ab02:	f895 c023 	ldrb.w	ip, [r5, #35]	; 0x23
 800ab06:	f883 c00e 	strb.w	ip, [r3, #14]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800ab0a:	f04f 0bc7 	mov.w	fp, #199	; 0xc7
		ptiming->range_config__vcsel_period_a                = 0x0F;
 800ab0e:	f04f 0c0f 	mov.w	ip, #15
	pdynamic->system__sequence_config                          = \
 800ab12:	f04f 0adb 	mov.w	sl, #219	; 0xdb
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800ab16:	f883 b00f 	strb.w	fp, [r3, #15]
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800ab1a:	f883 9010 	strb.w	r9, [r3, #16]
	pdynamic->system__sequence_config                          = \
 800ab1e:	f883 a011 	strb.w	sl, [r3, #17]
	psystem->system__stream_count_ctrl                         = 0x00;
 800ab22:	7074      	strb	r4, [r6, #1]
	psystem->firmware__enable                                  = 0x01;
 800ab24:	70b7      	strb	r7, [r6, #2]
	psystem->system__interrupt_clear                           = \
 800ab26:	70f7      	strb	r7, [r6, #3]
		ptiming->range_config__vcsel_period_a                = 0x0F;
 800ab28:	f882 c006 	strb.w	ip, [r2, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 800ab2c:	7250      	strb	r0, [r2, #9]
		ptiming->range_config__sigma_thresh                  =
 800ab2e:	8a6f      	ldrh	r7, [r5, #18]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800ab30:	f8b5 9018 	ldrh.w	r9, [r5, #24]
		ptiming->range_config__sigma_thresh                  =
 800ab34:	8157      	strh	r7, [r2, #10]
		ptiming->range_config__valid_phase_high              = 0xB8;
 800ab36:	27b8      	movs	r7, #184	; 0xb8
 800ab38:	73d7      	strb	r7, [r2, #15]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800ab3a:	f8a2 900c 	strh.w	r9, [r2, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800ab3e:	f882 800e 	strb.w	r8, [r2, #14]
		pdynamic->sd_config__woi_sd0                         = 0x0F;
 800ab42:	f883 c008 	strb.w	ip, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 800ab46:	7258      	strb	r0, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
 800ab48:	79a8      	ldrb	r0, [r5, #6]
 800ab4a:	7298      	strb	r0, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
 800ab4c:	7a68      	ldrb	r0, [r5, #9]
 800ab4e:	72d8      	strb	r0, [r3, #11]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800ab50:	27b1      	movs	r7, #177	; 0xb1
		ptiming->system__intermeasurement_period = 0x00000600;
 800ab52:	f44f 60c0 	mov.w	r0, #1536	; 0x600
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800ab56:	f04f 0c97 	mov.w	ip, #151	; 0x97
		pdynamic->system__grouped_parameter_hold = 0x00;
 800ab5a:	749c      	strb	r4, [r3, #18]
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800ab5c:	7114      	strb	r4, [r2, #4]
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800ab5e:	71d4      	strb	r4, [r2, #7]
		ptiming->system__intermeasurement_period = 0x00000600;
 800ab60:	6110      	str	r0, [r2, #16]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800ab62:	f882 c005 	strb.w	ip, [r2, #5]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800ab66:	7217      	strb	r7, [r2, #8]
		pdynamic->system__seed_config =
 800ab68:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
 800ab6c:	71da      	strb	r2, [r3, #7]
		psystem->system__mode_start =
 800ab6e:	2440      	movs	r4, #64	; 0x40
 800ab70:	7134      	strb	r4, [r6, #4]
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
		status = VL53L1_config_low_power_auto_mode(
 800ab72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab74:	4608      	mov	r0, r1
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800ab76:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
		status = VL53L1_config_low_power_auto_mode(
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	f000 bc1e 	b.w	800b3bc <VL53L1_config_low_power_auto_mode>
 800ab80:	01ff3800 	.word	0x01ff3800

0800ab84 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800ab84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab88:	4604      	mov	r4, r0
 800ab8a:	9d09      	ldr	r5, [sp, #36]	; 0x24
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800ab8c:	f8df a12c 	ldr.w	sl, [pc, #300]	; 800acbc <VL53L1_preset_mode_singleshot_ranging+0x138>
	pstatic->debug__ctrl                                      = 0x00;
 800ab90:	2000      	movs	r0, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 800ab92:	f04f 0e02 	mov.w	lr, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800ab96:	f04f 0808 	mov.w	r8, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800ab9a:	f44f 6720 	mov.w	r7, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 800ab9e:	2611      	movs	r6, #17
	pstatic->debug__ctrl                                      = 0x00;
 800aba0:	70a0      	strb	r0, [r4, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800aba2:	70e0      	strb	r0, [r4, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800aba4:	7120      	strb	r0, [r4, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800aba6:	7160      	strb	r0, [r4, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800aba8:	71a0      	strb	r0, [r4, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800abaa:	71e0      	strb	r0, [r4, #7]
	pstatic->host_if__status                                  = 0x00;
 800abac:	7220      	strb	r0, [r4, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800abae:	7260      	strb	r0, [r4, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800abb0:	72a0      	strb	r0, [r4, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800abb2:	72e0      	strb	r0, [r4, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800abb4:	73a0      	strb	r0, [r4, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800abb6:	7460      	strb	r0, [r4, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 800abb8:	f884 e00d 	strb.w	lr, [r4, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800abbc:	f884 e00f 	strb.w	lr, [r4, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800abc0:	f884 8010 	strb.w	r8, [r4, #16]
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800abc4:	8027      	strh	r7, [r4, #0]
	pstatic->gpio_hv_mux__ctrl  = \
 800abc6:	7326      	strb	r6, [r4, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800abc8:	7fae      	ldrb	r6, [r5, #30]
 800abca:	74a6      	strb	r6, [r4, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800abcc:	7fee      	ldrb	r6, [r5, #31]
 800abce:	74e6      	strb	r6, [r4, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800abd0:	f895 6020 	ldrb.w	r6, [r5, #32]
 800abd4:	7526      	strb	r6, [r4, #20]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800abd6:	f04f 0cff 	mov.w	ip, #255	; 0xff
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800abda:	2601      	movs	r6, #1
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800abdc:	75a0      	strb	r0, [r4, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800abde:	75e0      	strb	r0, [r4, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800abe0:	8320      	strh	r0, [r4, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800abe2:	7566      	strb	r6, [r4, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800abe4:	f884 c01a 	strb.w	ip, [r4, #26]
	pstatic->algo__range_min_clip                             =
 800abe8:	7c2f      	ldrb	r7, [r5, #16]
 800abea:	76e7      	strb	r7, [r4, #27]
{
 800abec:	9f08      	ldr	r7, [sp, #32]
	pstatic->algo__consistency_check__tolerance               =
 800abee:	f895 900c 	ldrb.w	r9, [r5, #12]
 800abf2:	f884 901c 	strb.w	r9, [r4, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800abf6:	f04f 6932 	mov.w	r9, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800abfa:	7760      	strb	r0, [r4, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800abfc:	77a0      	strb	r0, [r4, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800abfe:	77e0      	strb	r0, [r4, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800ac00:	f8c1 9000 	str.w	r9, [r1]
	pgeneral->cal_config__repeat_rate                         =
 800ac04:	89ec      	ldrh	r4, [r5, #14]
 800ac06:	808c      	strh	r4, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800ac08:	240d      	movs	r4, #13
	pgeneral->global_config__vcsel_width                      = 0x02;
 800ac0a:	f881 e006 	strb.w	lr, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800ac0e:	71cc      	strb	r4, [r1, #7]
	pgeneral->phasecal_config__target                         =
 800ac10:	7b6c      	ldrb	r4, [r5, #13]
 800ac12:	720c      	strb	r4, [r1, #8]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800ac14:	f44f 440c 	mov.w	r4, #35840	; 0x8c00
	pgeneral->phasecal_config__override                       = 0x00;
 800ac18:	7248      	strb	r0, [r1, #9]
	pgeneral->dss_config__roi_mode_control =
 800ac1a:	728e      	strb	r6, [r1, #10]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800ac1c:	f8c1 a012 	str.w	sl, [r1, #18]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800ac20:	8188      	strh	r0, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800ac22:	81c8      	strh	r0, [r1, #14]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800ac24:	820c      	strh	r4, [r1, #16]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800ac26:	f04f 091a 	mov.w	r9, #26
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800ac2a:	240b      	movs	r4, #11
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800ac2c:	2109      	movs	r1, #9
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800ac2e:	f04f 0e20 	mov.w	lr, #32
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800ac32:	7010      	strb	r0, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800ac34:	7090      	strb	r0, [r2, #2]
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800ac36:	7194      	strb	r4, [r2, #6]
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800ac38:	7251      	strb	r1, [r2, #9]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800ac3a:	f882 9001 	strb.w	r9, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800ac3e:	f882 e003 	strb.w	lr, [r2, #3]
	ptiming->range_config__sigma_thresh                       =
 800ac42:	f8b5 e014 	ldrh.w	lr, [r5, #20]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800ac46:	f8b5 901a 	ldrh.w	r9, [r5, #26]
	ptiming->range_config__sigma_thresh                       =
 800ac4a:	f8a2 e00a 	strh.w	lr, [r2, #10]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800ac4e:	f04f 0e78 	mov.w	lr, #120	; 0x78
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800ac52:	f8a2 900c 	strh.w	r9, [r2, #12]
	ptiming->range_config__valid_phase_low                    = 0x08;
 800ac56:	f882 800e 	strb.w	r8, [r2, #14]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800ac5a:	6110      	str	r0, [r2, #16]
	ptiming->system__fractional_enable                        = 0x00;
 800ac5c:	7510      	strb	r0, [r2, #20]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800ac5e:	f882 e00f 	strb.w	lr, [r2, #15]
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800ac62:	721c      	strb	r4, [r3, #8]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800ac64:	701e      	strb	r6, [r3, #0]
	pdynamic->system__thresh_high                              = 0x0000;
 800ac66:	f8c3 0002 	str.w	r0, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800ac6a:	7198      	strb	r0, [r3, #6]
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800ac6c:	7259      	strb	r1, [r3, #9]
	pdynamic->sd_config__initial_phase_sd0                     =
 800ac6e:	79e9      	ldrb	r1, [r5, #7]
 800ac70:	7299      	strb	r1, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800ac72:	7aa9      	ldrb	r1, [r5, #10]
 800ac74:	72d9      	strb	r1, [r3, #11]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800ac76:	731e      	strb	r6, [r3, #12]
	pdynamic->sd_config__first_order_select =
 800ac78:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
 800ac7c:	7359      	strb	r1, [r3, #13]
	pdynamic->sd_config__quantifier         =
 800ac7e:	f895 1023 	ldrb.w	r1, [r5, #35]	; 0x23
 800ac82:	7399      	strb	r1, [r3, #14]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800ac84:	f04f 08c7 	mov.w	r8, #199	; 0xc7
	pdynamic->system__sequence_config                          = \
 800ac88:	f04f 0edb 	mov.w	lr, #219	; 0xdb

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800ac8c:	24b1      	movs	r4, #177	; 0xb1
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800ac8e:	21d4      	movs	r1, #212	; 0xd4
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800ac90:	f883 c010 	strb.w	ip, [r3, #16]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800ac94:	f883 800f 	strb.w	r8, [r3, #15]
	pdynamic->system__sequence_config                          = \
 800ac98:	f883 e011 	strb.w	lr, [r3, #17]
	psystem->system__stream_count_ctrl                         = 0x00;
 800ac9c:	7078      	strb	r0, [r7, #1]
	psystem->firmware__enable                                  = 0x01;
 800ac9e:	70be      	strb	r6, [r7, #2]
	psystem->system__interrupt_clear                           = \
 800aca0:	70fe      	strb	r6, [r7, #3]
		pdynamic->system__grouped_parameter_hold = 0x00;
 800aca2:	7498      	strb	r0, [r3, #18]
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800aca4:	7110      	strb	r0, [r2, #4]
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800aca6:	71d0      	strb	r0, [r2, #7]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800aca8:	7154      	strb	r4, [r2, #5]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800acaa:	7211      	strb	r1, [r2, #8]

		pdynamic->system__seed_config =
 800acac:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
 800acb0:	71da      	strb	r2, [r3, #7]
				ptuning_parms->tp_timed_seed_cfg;

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 800acb2:	2310      	movs	r3, #16
 800acb4:	713b      	strb	r3, [r7, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800acb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acba:	bf00      	nop
 800acbc:	01ff3800 	.word	0x01ff3800

0800acc0 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800acc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acc4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	pstatic->debug__ctrl                                      = 0x00;
 800acc6:	2400      	movs	r4, #0
	pstatic->gpio__tio_hv_status                              = 0x02;
 800acc8:	f04f 0e02 	mov.w	lr, #2
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800accc:	f04f 0808 	mov.w	r8, #8
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800acd0:	f44f 6720 	mov.w	r7, #2560	; 0xa00
	pstatic->gpio_hv_mux__ctrl  = \
 800acd4:	2511      	movs	r5, #17
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800acd6:	8007      	strh	r7, [r0, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800acd8:	7084      	strb	r4, [r0, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800acda:	70c4      	strb	r4, [r0, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800acdc:	7104      	strb	r4, [r0, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800acde:	7144      	strb	r4, [r0, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800ace0:	7184      	strb	r4, [r0, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800ace2:	71c4      	strb	r4, [r0, #7]
	pstatic->host_if__status                                  = 0x00;
 800ace4:	7204      	strb	r4, [r0, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800ace6:	7244      	strb	r4, [r0, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800ace8:	7284      	strb	r4, [r0, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800acea:	72c4      	strb	r4, [r0, #11]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800acec:	7384      	strb	r4, [r0, #14]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800acee:	7444      	strb	r4, [r0, #17]
	pstatic->gpio__tio_hv_status                              = 0x02;
 800acf0:	f880 e00d 	strb.w	lr, [r0, #13]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800acf4:	f880 e00f 	strb.w	lr, [r0, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800acf8:	f880 8010 	strb.w	r8, [r0, #16]
	pstatic->gpio_hv_mux__ctrl  = \
 800acfc:	7305      	strb	r5, [r0, #12]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800acfe:	7fb5      	ldrb	r5, [r6, #30]
 800ad00:	7485      	strb	r5, [r0, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800ad02:	7ff5      	ldrb	r5, [r6, #31]
 800ad04:	74c5      	strb	r5, [r0, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800ad06:	f896 5020 	ldrb.w	r5, [r6, #32]
 800ad0a:	7505      	strb	r5, [r0, #20]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800ad0c:	2701      	movs	r7, #1
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800ad0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800ad12:	7584      	strb	r4, [r0, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800ad14:	75c4      	strb	r4, [r0, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800ad16:	8304      	strh	r4, [r0, #24]
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800ad18:	7547      	strb	r7, [r0, #21]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800ad1a:	f880 c01a 	strb.w	ip, [r0, #26]
	pstatic->algo__range_min_clip                             =
 800ad1e:	7c35      	ldrb	r5, [r6, #16]
 800ad20:	76c5      	strb	r5, [r0, #27]
{
 800ad22:	9d09      	ldr	r5, [sp, #36]	; 0x24
	pstatic->algo__consistency_check__tolerance               =
 800ad24:	f896 900c 	ldrb.w	r9, [r6, #12]
 800ad28:	f880 901c 	strb.w	r9, [r0, #28]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800ad2c:	f04f 6932 	mov.w	r9, #186646528	; 0xb200000
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800ad30:	7744      	strb	r4, [r0, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800ad32:	7784      	strb	r4, [r0, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800ad34:	77c4      	strb	r4, [r0, #31]
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800ad36:	f8c1 9000 	str.w	r9, [r1]
	pgeneral->cal_config__repeat_rate                         =
 800ad3a:	89f0      	ldrh	r0, [r6, #14]
 800ad3c:	8088      	strh	r0, [r1, #4]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800ad3e:	200d      	movs	r0, #13
	pgeneral->global_config__vcsel_width                      = 0x02;
 800ad40:	f881 e006 	strb.w	lr, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800ad44:	71c8      	strb	r0, [r1, #7]
	pgeneral->phasecal_config__target                         =
 800ad46:	f896 900d 	ldrb.w	r9, [r6, #13]
 800ad4a:	f881 9008 	strb.w	r9, [r1, #8]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800ad4e:	4829      	ldr	r0, [pc, #164]	; (800adf4 <VL53L1_preset_mode_olt+0x134>)
	pgeneral->phasecal_config__override                       = 0x00;
 800ad50:	724c      	strb	r4, [r1, #9]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800ad52:	f44f 490c 	mov.w	r9, #35840	; 0x8c00
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800ad56:	f04f 0a1a 	mov.w	sl, #26
	pgeneral->dss_config__roi_mode_control =
 800ad5a:	728f      	strb	r7, [r1, #10]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800ad5c:	f8c1 0012 	str.w	r0, [r1, #18]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800ad60:	818c      	strh	r4, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800ad62:	81cc      	strh	r4, [r1, #14]
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800ad64:	f8a1 9010 	strh.w	r9, [r1, #16]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800ad68:	f04f 0b20 	mov.w	fp, #32
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800ad6c:	f882 a001 	strb.w	sl, [r2, #1]
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800ad70:	2109      	movs	r1, #9
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800ad72:	f04f 0a0b 	mov.w	sl, #11
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800ad76:	f04f 09cc 	mov.w	r9, #204	; 0xcc
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800ad7a:	20f5      	movs	r0, #245	; 0xf5
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800ad7c:	7014      	strb	r4, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800ad7e:	7094      	strb	r4, [r2, #2]
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800ad80:	7117      	strb	r7, [r2, #4]
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800ad82:	71d7      	strb	r7, [r2, #7]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800ad84:	f882 b003 	strb.w	fp, [r2, #3]
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800ad88:	f882 a006 	strb.w	sl, [r2, #6]
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800ad8c:	7251      	strb	r1, [r2, #9]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800ad8e:	f882 9005 	strb.w	r9, [r2, #5]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800ad92:	7210      	strb	r0, [r2, #8]
	ptiming->range_config__sigma_thresh                       =
 800ad94:	8ab0      	ldrh	r0, [r6, #20]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800ad96:	f8b6 901a 	ldrh.w	r9, [r6, #26]
	ptiming->range_config__sigma_thresh                       =
 800ad9a:	8150      	strh	r0, [r2, #10]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800ad9c:	2078      	movs	r0, #120	; 0x78
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800ad9e:	f8a2 900c 	strh.w	r9, [r2, #12]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800ada2:	73d0      	strb	r0, [r2, #15]
	ptiming->range_config__valid_phase_low                    = 0x08;
 800ada4:	f882 800e 	strb.w	r8, [r2, #14]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800ada8:	6114      	str	r4, [r2, #16]
	ptiming->system__fractional_enable                        = 0x00;
 800adaa:	7514      	strb	r4, [r2, #20]
	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800adac:	701f      	strb	r7, [r3, #0]
	pdynamic->system__thresh_high                              = 0x0000;
 800adae:	f8c3 4002 	str.w	r4, [r3, #2]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800adb2:	719c      	strb	r4, [r3, #6]
	pdynamic->system__seed_config =
 800adb4:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
 800adb8:	71da      	strb	r2, [r3, #7]
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800adba:	f883 a008 	strb.w	sl, [r3, #8]
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800adbe:	7259      	strb	r1, [r3, #9]
	pdynamic->sd_config__initial_phase_sd0                     =
 800adc0:	79f2      	ldrb	r2, [r6, #7]
 800adc2:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800adc4:	7ab2      	ldrb	r2, [r6, #10]
 800adc6:	72da      	strb	r2, [r3, #11]
	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800adc8:	731f      	strb	r7, [r3, #12]
	pdynamic->sd_config__first_order_select =
 800adca:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
 800adce:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
 800add0:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
 800add4:	7399      	strb	r1, [r3, #14]
	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 800add6:	4a08      	ldr	r2, [pc, #32]	; (800adf8 <VL53L1_preset_mode_olt+0x138>)
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800add8:	f883 c010 	strb.w	ip, [r3, #16]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800addc:	26c7      	movs	r6, #199	; 0xc7
	pdynamic->system__sequence_config                          = \
 800adde:	21db      	movs	r1, #219	; 0xdb
	pdynamic->system__grouped_parameter_hold                   = 0x02;
 800ade0:	f883 e012 	strb.w	lr, [r3, #18]
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800ade4:	73de      	strb	r6, [r3, #15]
	pdynamic->system__sequence_config                          = \
 800ade6:	7459      	strb	r1, [r3, #17]
		psystem->system__stream_count_ctrl  = 0x01;
 800ade8:	f8c5 2001 	str.w	r2, [r5, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800adec:	4620      	mov	r0, r4
 800adee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf2:	bf00      	nop
 800adf4:	01ff3800 	.word	0x01ff3800
 800adf8:	21010101 	.word	0x21010101

0800adfc <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800adfc:	b410      	push	{r4}
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800adfe:	2102      	movs	r1, #2
	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800ae00:	2401      	movs	r4, #1
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800ae02:	220a      	movs	r2, #10
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800ae04:	f44f 63e6 	mov.w	r3, #1840	; 0x730
	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800ae08:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800ae0c:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800ae10:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800ae14:	6243      	str	r3, [r0, #36]	; 0x24
}
 800ae16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae1a:	4770      	bx	lr

0800ae1c <VL53L1_init_ll_driver_state>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);

	pstate->cfg_device_state  = device_state;
	pstate->cfg_stream_count  = 0;
 800ae1c:	2300      	movs	r3, #0
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ae1e:	2202      	movs	r2, #2
	pstate->cfg_device_state  = device_state;
 800ae20:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
	pstate->cfg_timing_status = 0;

	pstate->rd_device_state   = device_state;
 800ae24:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
	pstate->cfg_stream_count  = 0;
 800ae28:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	pstate->cfg_timing_status = 0;
 800ae2c:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
	pstate->rd_stream_count   = 0;
 800ae30:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
	pstate->rd_timing_status  = 0;
 800ae34:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ae38:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ae3c:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
 800ae40:	4770      	bx	lr
 800ae42:	bf00      	nop

0800ae44 <VL53L1_update_ll_driver_rd_state>:

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 800ae44:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
 800ae48:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800ae4c:	d018      	beq.n	800ae80 <VL53L1_update_ll_driver_rd_state+0x3c>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 800ae4e:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ae52:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 800ae56:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
		if (pstate->rd_stream_count == 0xFF) {
 800ae5a:	2bff      	cmp	r3, #255	; 0xff
			pstate->rd_stream_count++;
 800ae5c:	bf1a      	itte	ne
 800ae5e:	3301      	addne	r3, #1
 800ae60:	b2db      	uxtbne	r3, r3
			pstate->rd_stream_count = 0x80;
 800ae62:	2380      	moveq	r3, #128	; 0x80
 800ae64:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ae68:	f081 0102 	eor.w	r1, r1, #2
		switch (pstate->rd_device_state) {
 800ae6c:	1ed3      	subs	r3, r2, #3
		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ae6e:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
		switch (pstate->rd_device_state) {
 800ae72:	2b05      	cmp	r3, #5
 800ae74:	d804      	bhi.n	800ae80 <VL53L1_update_ll_driver_rd_state+0x3c>
 800ae76:	e8df f003 	tbb	[pc, r3]
 800ae7a:	0312      	.short	0x0312
 800ae7c:	072c2403 	.word	0x072c2403

		break;

		default:

			pstate->rd_device_state  =
 800ae80:	4b16      	ldr	r3, [pc, #88]	; (800aedc <VL53L1_update_ll_driver_rd_state+0x98>)
 800ae82:	6303      	str	r3, [r0, #48]	; 0x30
#endif

	LOG_FUNCTION_END(status);

	return status;
}
 800ae84:	2000      	movs	r0, #0
 800ae86:	4770      	bx	lr
			pstate->rd_timing_status ^= 0x01;
 800ae88:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
			pstate->rd_device_state =
 800ae8c:	2208      	movs	r2, #8
			pstate->rd_timing_status ^= 0x01;
 800ae8e:	f083 0301 	eor.w	r3, r3, #1
 800ae92:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
			pstate->rd_device_state =
 800ae96:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
}
 800ae9a:	2000      	movs	r0, #0
 800ae9c:	4770      	bx	lr
			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800ae9e:	f890 31c6 	ldrb.w	r3, [r0, #454]	; 0x1c6
 800aea2:	f013 0f02 	tst.w	r3, #2
				pstate->rd_device_state =
 800aea6:	bf18      	it	ne
 800aea8:	2206      	movne	r2, #6
			pstate->rd_stream_count  = 0;
 800aeaa:	f04f 0300 	mov.w	r3, #0
				pstate->rd_device_state =
 800aeae:	bf08      	it	eq
 800aeb0:	2208      	moveq	r2, #8
 800aeb2:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
			pstate->rd_stream_count  = 0;
 800aeb6:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
			pstate->rd_timing_status = 0;
 800aeba:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
}
 800aebe:	2000      	movs	r0, #0
 800aec0:	4770      	bx	lr
			pstate->rd_stream_count = 0;
 800aec2:	2200      	movs	r2, #0
			pstate->rd_device_state =
 800aec4:	2308      	movs	r3, #8
			pstate->rd_stream_count = 0;
 800aec6:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
			pstate->rd_device_state =
 800aeca:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
}
 800aece:	2000      	movs	r0, #0
 800aed0:	4770      	bx	lr
			pstate->rd_device_state =
 800aed2:	2308      	movs	r3, #8
 800aed4:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
}
 800aed8:	2000      	movs	r0, #0
 800aeda:	4770      	bx	lr
 800aedc:	00020003 	.word	0x00020003

0800aee0 <VL53L1_check_ll_driver_rd_state>:
	device_gph_id = (psys_results->result__interrupt_status &
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 800aee0:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
 800aee4:	f013 0320 	ands.w	r3, r3, #32
 800aee8:	d01d      	beq.n	800af26 <VL53L1_check_ll_driver_rd_state+0x46>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 800aeea:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
			psys_results->result__range_status &
 800aeee:	f890 21cf 	ldrb.w	r2, [r0, #463]	; 0x1cf
		if (pstate->rd_device_state ==
 800aef2:	2b06      	cmp	r3, #6
 800aef4:	d019      	beq.n	800af2a <VL53L1_check_ll_driver_rd_state+0x4a>
{
 800aef6:	b410      	push	{r4}
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800aef8:	f890 31ce 	ldrb.w	r3, [r0, #462]	; 0x1ce
			if (device_range_status !=
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 800aefc:	f890 41d1 	ldrb.w	r4, [r0, #465]	; 0x1d1
 800af00:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 800af04:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800af08:	111b      	asrs	r3, r3, #4
			if (pstate->rd_stream_count != device_stream_count) {
 800af0a:	428c      	cmp	r4, r1
		if (pstate->rd_gph_id != device_gph_id) {
 800af0c:	f003 0302 	and.w	r3, r3, #2
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800af10:	bf14      	ite	ne
 800af12:	f06f 0011 	mvnne.w	r0, #17
 800af16:	2000      	moveq	r0, #0
		if (pstate->rd_gph_id != device_gph_id) {
 800af18:	429a      	cmp	r2, r3
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800af1a:	bf18      	it	ne
 800af1c:	f06f 0012 	mvnne.w	r0, #18
	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
}
 800af20:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af24:	4770      	bx	lr
	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800af26:	4618      	mov	r0, r3
 800af28:	4770      	bx	lr
			if (device_range_status !=
 800af2a:	f002 021f 	and.w	r2, r2, #31
 800af2e:	2a12      	cmp	r2, #18
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 800af30:	bf0c      	ite	eq
 800af32:	2000      	moveq	r0, #0
 800af34:	f06f 0010 	mvnne.w	r0, #16
 800af38:	4770      	bx	lr
 800af3a:	bf00      	nop

0800af3c <VL53L1_update_ll_driver_cfg_state>:
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 800af3c:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
 800af40:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800af44:	d01c      	beq.n	800af80 <VL53L1_update_ll_driver_cfg_state+0x44>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 800af46:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800af4a:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 800af4e:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
		if (pstate->cfg_stream_count == 0xFF) {
 800af52:	2bff      	cmp	r3, #255	; 0xff
			pstate->cfg_stream_count++;
 800af54:	bf1a      	itte	ne
 800af56:	3301      	addne	r3, #1
 800af58:	b2db      	uxtbne	r3, r3
			pstate->cfg_stream_count = 0x80;
 800af5a:	2380      	moveq	r3, #128	; 0x80
 800af5c:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
		switch (pstate->cfg_device_state) {
 800af60:	2903      	cmp	r1, #3
		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800af62:	f082 0302 	eor.w	r3, r2, #2
 800af66:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
		switch (pstate->cfg_device_state) {
 800af6a:	d00d      	beq.n	800af88 <VL53L1_update_ll_driver_cfg_state+0x4c>
 800af6c:	2904      	cmp	r1, #4
 800af6e:	d107      	bne.n	800af80 <VL53L1_update_ll_driver_cfg_state+0x44>
			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
		break;

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 800af70:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800af74:	f083 0301 	eor.w	r3, r3, #1
 800af78:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
#endif

	LOG_FUNCTION_END(status);

	return status;
}
 800af7c:	2000      	movs	r0, #0
 800af7e:	4770      	bx	lr
			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800af80:	4b08      	ldr	r3, [pc, #32]	; (800afa4 <VL53L1_update_ll_driver_cfg_state+0x68>)
 800af82:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 800af84:	2000      	movs	r0, #0
 800af86:	4770      	bx	lr
			pstate->cfg_timing_status ^= 0x01;
 800af88:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
			pstate->cfg_stream_count = 1;
 800af8c:	2101      	movs	r1, #1
			pstate->cfg_timing_status ^= 0x01;
 800af8e:	404b      	eors	r3, r1
			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 800af90:	2204      	movs	r2, #4
			pstate->cfg_timing_status ^= 0x01;
 800af92:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
			pstate->cfg_stream_count = 1;
 800af96:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 800af9a:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
}
 800af9e:	2000      	movs	r0, #0
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop
 800afa4:	00020003 	.word	0x00020003

0800afa8 <VL53L1_copy_rtn_good_spads_to_buffer>:
{
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800afa8:	7c03      	ldrb	r3, [r0, #16]
 800afaa:	700b      	strb	r3, [r1, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800afac:	7c43      	ldrb	r3, [r0, #17]
 800afae:	704b      	strb	r3, [r1, #1]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800afb0:	7c83      	ldrb	r3, [r0, #18]
 800afb2:	708b      	strb	r3, [r1, #2]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800afb4:	7cc3      	ldrb	r3, [r0, #19]
 800afb6:	70cb      	strb	r3, [r1, #3]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800afb8:	7d03      	ldrb	r3, [r0, #20]
 800afba:	710b      	strb	r3, [r1, #4]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800afbc:	7d43      	ldrb	r3, [r0, #21]
 800afbe:	714b      	strb	r3, [r1, #5]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800afc0:	7d83      	ldrb	r3, [r0, #22]
 800afc2:	718b      	strb	r3, [r1, #6]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800afc4:	7dc3      	ldrb	r3, [r0, #23]
 800afc6:	71cb      	strb	r3, [r1, #7]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800afc8:	7e03      	ldrb	r3, [r0, #24]
 800afca:	720b      	strb	r3, [r1, #8]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800afcc:	7e43      	ldrb	r3, [r0, #25]
 800afce:	724b      	strb	r3, [r1, #9]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800afd0:	7e83      	ldrb	r3, [r0, #26]
 800afd2:	728b      	strb	r3, [r1, #10]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800afd4:	7ec3      	ldrb	r3, [r0, #27]
 800afd6:	72cb      	strb	r3, [r1, #11]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800afd8:	7f03      	ldrb	r3, [r0, #28]
 800afda:	730b      	strb	r3, [r1, #12]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800afdc:	7f43      	ldrb	r3, [r0, #29]
 800afde:	734b      	strb	r3, [r1, #13]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800afe0:	7f83      	ldrb	r3, [r0, #30]
 800afe2:	738b      	strb	r3, [r1, #14]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800afe4:	7fc3      	ldrb	r3, [r0, #31]
 800afe6:	73cb      	strb	r3, [r1, #15]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800afe8:	f890 3020 	ldrb.w	r3, [r0, #32]
 800afec:	740b      	strb	r3, [r1, #16]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800afee:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800aff2:	744b      	strb	r3, [r1, #17]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800aff4:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800aff8:	748b      	strb	r3, [r1, #18]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800affa:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 800affe:	74cb      	strb	r3, [r1, #19]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800b000:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800b004:	750b      	strb	r3, [r1, #20]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800b006:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800b00a:	754b      	strb	r3, [r1, #21]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800b00c:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 800b010:	758b      	strb	r3, [r1, #22]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800b012:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 800b016:	75cb      	strb	r3, [r1, #23]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800b018:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800b01c:	760b      	strb	r3, [r1, #24]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800b01e:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800b022:	764b      	strb	r3, [r1, #25]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800b024:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 800b028:	768b      	strb	r3, [r1, #26]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800b02a:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 800b02e:	76cb      	strb	r3, [r1, #27]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800b030:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800b034:	770b      	strb	r3, [r1, #28]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800b036:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800b03a:	774b      	strb	r3, [r1, #29]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800b03c:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 800b040:	778b      	strb	r3, [r1, #30]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800b042:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800b046:	77cb      	strb	r3, [r1, #31]
 800b048:	4770      	bx	lr
 800b04a:	bf00      	nop

0800b04c <VL53L1_i2c_encode_uint16_t>:
	uint16_t   i    = 0;
	uint16_t   data = 0;

	data =  ip_value;

	for (i = 0; i < count ; i++) {
 800b04c:	b151      	cbz	r1, 800b064 <VL53L1_i2c_encode_uint16_t+0x18>
 800b04e:	1e4b      	subs	r3, r1, #1
 800b050:	0c1b      	lsrs	r3, r3, #16
 800b052:	041b      	lsls	r3, r3, #16
 800b054:	4413      	add	r3, r2
 800b056:	440a      	add	r2, r1
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800b058:	f802 0d01 	strb.w	r0, [r2, #-1]!
	for (i = 0; i < count ; i++) {
 800b05c:	4293      	cmp	r3, r2
		data = data >> 8;
 800b05e:	ea4f 2010 	mov.w	r0, r0, lsr #8
	for (i = 0; i < count ; i++) {
 800b062:	d1f9      	bne.n	800b058 <VL53L1_i2c_encode_uint16_t+0xc>
 800b064:	4770      	bx	lr
 800b066:	bf00      	nop

0800b068 <VL53L1_i2c_decode_uint16_t>:
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;

	while (count-- > 0) {
 800b068:	1e42      	subs	r2, r0, #1
 800b06a:	b292      	uxth	r2, r2
 800b06c:	b148      	cbz	r0, 800b082 <VL53L1_i2c_decode_uint16_t+0x1a>
 800b06e:	440a      	add	r2, r1
 800b070:	2000      	movs	r0, #0
 800b072:	3901      	subs	r1, #1
		value = (value << 8) | (uint16_t)*pbuffer++;
 800b074:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b078:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
	while (count-- > 0) {
 800b07c:	428a      	cmp	r2, r1
		value = (value << 8) | (uint16_t)*pbuffer++;
 800b07e:	b280      	uxth	r0, r0
	while (count-- > 0) {
 800b080:	d1f8      	bne.n	800b074 <VL53L1_i2c_decode_uint16_t+0xc>
	}

	return value;
}
 800b082:	4770      	bx	lr

0800b084 <VL53L1_i2c_encode_int16_t>:
	uint16_t   i    = 0;
	int16_t    data = 0;

	data =  ip_value;

	for (i = 0; i < count ; i++) {
 800b084:	b151      	cbz	r1, 800b09c <VL53L1_i2c_encode_int16_t+0x18>
 800b086:	1e4b      	subs	r3, r1, #1
 800b088:	0c1b      	lsrs	r3, r3, #16
 800b08a:	041b      	lsls	r3, r3, #16
 800b08c:	4413      	add	r3, r2
 800b08e:	440a      	add	r2, r1
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800b090:	f802 0d01 	strb.w	r0, [r2, #-1]!
	for (i = 0; i < count ; i++) {
 800b094:	4293      	cmp	r3, r2
		data = data >> 8;
 800b096:	ea4f 2020 	mov.w	r0, r0, asr #8
	for (i = 0; i < count ; i++) {
 800b09a:	d1f9      	bne.n	800b090 <VL53L1_i2c_encode_int16_t+0xc>
 800b09c:	4770      	bx	lr
 800b09e:	bf00      	nop

0800b0a0 <VL53L1_i2c_decode_int16_t>:
	 */

	int16_t    value = 0x00;

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800b0a0:	f991 3000 	ldrsb.w	r3, [r1]
		value = 0xFFFF;
	}

	while (count-- > 0) {
 800b0a4:	1e42      	subs	r2, r0, #1
	if (*pbuffer >= 0x80) {
 800b0a6:	17db      	asrs	r3, r3, #31
	while (count-- > 0) {
 800b0a8:	b292      	uxth	r2, r2
 800b0aa:	b140      	cbz	r0, 800b0be <VL53L1_i2c_decode_int16_t+0x1e>
 800b0ac:	1888      	adds	r0, r1, r2
 800b0ae:	3901      	subs	r1, #1
		value = (value << 8) | (int16_t)*pbuffer++;
 800b0b0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b0b4:	b25b      	sxtb	r3, r3
	while (count-- > 0) {
 800b0b6:	4288      	cmp	r0, r1
		value = (value << 8) | (int16_t)*pbuffer++;
 800b0b8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	while (count-- > 0) {
 800b0bc:	d1f8      	bne.n	800b0b0 <VL53L1_i2c_decode_int16_t+0x10>
	}

	return value;
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	4770      	bx	lr
 800b0c2:	bf00      	nop

0800b0c4 <VL53L1_i2c_encode_uint32_t>:
	uint16_t   i    = 0;
	uint32_t   data = 0;

	data =  ip_value;

	for (i = 0; i < count ; i++) {
 800b0c4:	b151      	cbz	r1, 800b0dc <VL53L1_i2c_encode_uint32_t+0x18>
 800b0c6:	1e4b      	subs	r3, r1, #1
 800b0c8:	0c1b      	lsrs	r3, r3, #16
 800b0ca:	041b      	lsls	r3, r3, #16
 800b0cc:	4413      	add	r3, r2
 800b0ce:	440a      	add	r2, r1
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800b0d0:	f802 0d01 	strb.w	r0, [r2, #-1]!
	for (i = 0; i < count ; i++) {
 800b0d4:	4293      	cmp	r3, r2
		data = data >> 8;
 800b0d6:	ea4f 2010 	mov.w	r0, r0, lsr #8
	for (i = 0; i < count ; i++) {
 800b0da:	d1f9      	bne.n	800b0d0 <VL53L1_i2c_encode_uint32_t+0xc>
 800b0dc:	4770      	bx	lr
 800b0de:	bf00      	nop

0800b0e0 <VL53L1_i2c_decode_uint32_t>:
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;

	while (count-- > 0) {
 800b0e0:	1e42      	subs	r2, r0, #1
 800b0e2:	b292      	uxth	r2, r2
 800b0e4:	b140      	cbz	r0, 800b0f8 <VL53L1_i2c_decode_uint32_t+0x18>
 800b0e6:	440a      	add	r2, r1
 800b0e8:	2000      	movs	r0, #0
 800b0ea:	3901      	subs	r1, #1
		value = (value << 8) | (uint32_t)*pbuffer++;
 800b0ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
	while (count-- > 0) {
 800b0f0:	4291      	cmp	r1, r2
		value = (value << 8) | (uint32_t)*pbuffer++;
 800b0f2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
	while (count-- > 0) {
 800b0f6:	d1f9      	bne.n	800b0ec <VL53L1_i2c_decode_uint32_t+0xc>
	}

	return value;
}
 800b0f8:	4770      	bx	lr
 800b0fa:	bf00      	nop

0800b0fc <VL53L1_i2c_decode_int32_t>:
	 */

	int32_t    value = 0x00;

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800b0fc:	f991 3000 	ldrsb.w	r3, [r1]
		value = 0xFFFFFFFF;
	}

	while (count-- > 0) {
 800b100:	1e42      	subs	r2, r0, #1
	if (*pbuffer >= 0x80) {
 800b102:	17db      	asrs	r3, r3, #31
	while (count-- > 0) {
 800b104:	b292      	uxth	r2, r2
 800b106:	b138      	cbz	r0, 800b118 <VL53L1_i2c_decode_int32_t+0x1c>
 800b108:	1888      	adds	r0, r1, r2
 800b10a:	3901      	subs	r1, #1
		value = (value << 8) | (int32_t)*pbuffer++;
 800b10c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
	while (count-- > 0) {
 800b110:	4288      	cmp	r0, r1
		value = (value << 8) | (int32_t)*pbuffer++;
 800b112:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	while (count-- > 0) {
 800b116:	d1f9      	bne.n	800b10c <VL53L1_i2c_decode_int32_t+0x10>
	}

	return value;
}
 800b118:	4618      	mov	r0, r3
 800b11a:	4770      	bx	lr

0800b11c <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 800b11c:	b538      	push	{r3, r4, r5, lr}
 800b11e:	460d      	mov	r5, r1

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800b120:	f000 f9b4 	bl	800b48c <VL53L1_calc_pll_period_us>
 800b124:	4604      	mov	r4, r0

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 800b126:	4628      	mov	r0, r5
 800b128:	f000 f9b6 	bl	800b498 <VL53L1_decode_vcsel_period>
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 800b12c:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 800b130:	0224      	lsls	r4, r4, #8
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800b132:	09a4      	lsrs	r4, r4, #6

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 800b134:	fb04 f000 	mul.w	r0, r4, r0
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
}
 800b138:	0980      	lsrs	r0, r0, #6
 800b13a:	bd38      	pop	{r3, r4, r5, pc}

0800b13c <VL53L1_calc_range_ignore_threshold>:

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);

	if (x_gradient < 0) {
 800b13c:	2900      	cmp	r1, #0
		x_gradient_int = x_gradient * -1;
 800b13e:	bfba      	itte	lt
 800b140:	4249      	neglt	r1, r1
 800b142:	b209      	sxthlt	r1, r1
 800b144:	2100      	movge	r1, #0
	}

	if (y_gradient < 0) {
 800b146:	2a00      	cmp	r2, #0
		y_gradient_int = y_gradient * -1;
 800b148:	bfb8      	it	lt
 800b14a:	4252      	neglt	r2, r2
{
 800b14c:	b510      	push	{r4, lr}
 800b14e:	bfb4      	ite	lt
 800b150:	b212      	sxthlt	r2, r2
 800b152:	2200      	movge	r2, #0
	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800b154:	4c0f      	ldr	r4, [pc, #60]	; (800b194 <VL53L1_calc_range_ignore_threshold+0x58>)
 800b156:	0100      	lsls	r0, r0, #4

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 800b158:	440a      	add	r2, r1

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800b15a:	490e      	ldr	r1, [pc, #56]	; (800b194 <VL53L1_calc_range_ignore_threshold+0x58>)
	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800b15c:	fb84 e400 	smull	lr, r4, r4, r0
	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 800b160:	0152      	lsls	r2, r2, #5
	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800b162:	17c0      	asrs	r0, r0, #31
 800b164:	ebc0 10a4 	rsb	r0, r0, r4, asr #6
	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800b168:	fb81 4102 	smull	r4, r1, r1, r2
 800b16c:	17d2      	asrs	r2, r2, #31
 800b16e:	ebc2 12a1 	rsb	r2, r2, r1, asr #6

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800b172:	4402      	add	r2, r0

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800b174:	fb02 f303 	mul.w	r3, r2, r3

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800b178:	f113 0010 	adds.w	r0, r3, #16
 800b17c:	bf48      	it	mi
 800b17e:	f103 002f 	addmi.w	r0, r3, #47	; 0x2f
 800b182:	1140      	asrs	r0, r0, #5
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800b184:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b188:	4298      	cmp	r0, r3
 800b18a:	bfa8      	it	ge
 800b18c:	4618      	movge	r0, r3
}
 800b18e:	b280      	uxth	r0, r0
 800b190:	bd10      	pop	{r4, pc}
 800b192:	bf00      	nop
 800b194:	10624dd3 	.word	0x10624dd3

0800b198 <VL53L1_calc_timeout_us>:
	uint64_t tmp            = 0;

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
	tmp += 0x00800;
 800b198:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b19c:	2300      	movs	r3, #0
 800b19e:	fbe1 2300 	umlal	r2, r3, r1, r0
	tmp  = tmp >> 12;
 800b1a2:	0b10      	lsrs	r0, r2, #12
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
}
 800b1a4:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800b1a8:	4770      	bx	lr
 800b1aa:	bf00      	nop

0800b1ac <VL53L1_calc_decoded_timeout_us>:
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b1ac:	b2c3      	uxtb	r3, r0
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800b1ae:	0a00      	lsrs	r0, r0, #8
 800b1b0:	fa03 f000 	lsl.w	r0, r3, r0
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b1b4:	3001      	adds	r0, #1
	tmp += 0x00800;
 800b1b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	fbe0 2301 	umlal	r2, r3, r0, r1
	tmp  = tmp >> 12;
 800b1c0:	0b10      	lsrs	r0, r2, #12
}
 800b1c2:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800b1c6:	4770      	bx	lr

0800b1c8 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800b1c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
	uint32_t timeout_mclks      = 0;
	uint16_t timeout_encoded    = 0;

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	f000 80aa 	beq.w	800b328 <VL53L1_calc_timeout_register_values+0x160>
 800b1d4:	4681      	mov	r9, r0
	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	4698      	mov	r8, r3
 800b1da:	4617      	mov	r7, r2
 800b1dc:	460c      	mov	r4, r1
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800b1de:	f896 a006 	ldrb.w	sl, [r6, #6]
	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800b1e2:	f000 f953 	bl	800b48c <VL53L1_calc_pll_period_us>
 800b1e6:	4605      	mov	r5, r0
	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 800b1e8:	4650      	mov	r0, sl
 800b1ea:	f000 f955 	bl	800b498 <VL53L1_decode_vcsel_period>
	macro_period_us =
 800b1ee:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 800b1f2:	022d      	lsls	r5, r5, #8
	macro_period_us = macro_period_us >> 6;
 800b1f4:	09ad      	lsrs	r5, r5, #6
	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 800b1f6:	fb05 f000 	mul.w	r0, r5, r0
			((timeout_us << 12) + (macro_period_us>>1)) /
 800b1fa:	09c5      	lsrs	r5, r0, #7
 800b1fc:	eb05 3309 	add.w	r3, r5, r9, lsl #12
	macro_period_us = macro_period_us >> 6;
 800b200:	0980      	lsrs	r0, r0, #6
		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
			timeout_mclks = 0xFF;

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800b202:	9a08      	ldr	r2, [sp, #32]
	timeout_mclks   =
 800b204:	fbb3 f3f0 	udiv	r3, r3, r0
				(uint8_t)timeout_mclks;
 800b208:	2bff      	cmp	r3, #255	; 0xff
 800b20a:	bf28      	it	cs
 800b20c:	23ff      	movcs	r3, #255	; 0xff
			((timeout_us << 12) + (macro_period_us>>1)) /
 800b20e:	0324      	lsls	r4, r4, #12
				(uint8_t)timeout_mclks;
 800b210:	71d3      	strb	r3, [r2, #7]
			((timeout_us << 12) + (macro_period_us>>1)) /
 800b212:	192b      	adds	r3, r5, r4
	timeout_mclks   =
 800b214:	fbb3 f3f0 	udiv	r3, r3, r0
	if (timeout_mclks > 0) {
 800b218:	bb7b      	cbnz	r3, 800b27a <VL53L1_calc_timeout_register_values+0xb2>
 800b21a:	461a      	mov	r2, r3
			((timeout_us << 12) + (macro_period_us>>1)) /
 800b21c:	033f      	lsls	r7, r7, #12
 800b21e:	443d      	add	r5, r7
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
 800b220:	7032      	strb	r2, [r6, #0]
	timeout_mclks   =
 800b222:	fbb5 f5f0 	udiv	r5, r5, r0
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
		ptiming->mm_config__timeout_macrop_a_lo =
 800b226:	7073      	strb	r3, [r6, #1]
	if (timeout_mclks > 0) {
 800b228:	2d00      	cmp	r5, #0
 800b22a:	d140      	bne.n	800b2ae <VL53L1_calc_timeout_register_values+0xe6>
 800b22c:	462b      	mov	r3, r5
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
 800b22e:	7133      	strb	r3, [r6, #4]
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
		ptiming->range_config__timeout_macrop_a_lo =
 800b230:	7175      	strb	r5, [r6, #5]
	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800b232:	4640      	mov	r0, r8
				(uint8_t) (timeout_encoded & 0x00FF);

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800b234:	f896 8009 	ldrb.w	r8, [r6, #9]
	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800b238:	f000 f928 	bl	800b48c <VL53L1_calc_pll_period_us>
 800b23c:	4605      	mov	r5, r0
	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 800b23e:	4640      	mov	r0, r8
 800b240:	f000 f92a 	bl	800b498 <VL53L1_decode_vcsel_period>
	macro_period_us =
 800b244:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 800b248:	022d      	lsls	r5, r5, #8
	macro_period_us = macro_period_us >> 6;
 800b24a:	09ad      	lsrs	r5, r5, #6
	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 800b24c:	fb05 f000 	mul.w	r0, r5, r0
			((timeout_us << 12) + (macro_period_us>>1)) /
 800b250:	09c2      	lsrs	r2, r0, #7
 800b252:	4414      	add	r4, r2
	macro_period_us = macro_period_us >> 6;
 800b254:	0980      	lsrs	r0, r0, #6
	timeout_mclks   =
 800b256:	fbb4 f4f0 	udiv	r4, r4, r0
	if (timeout_mclks > 0) {
 800b25a:	2c00      	cmp	r4, #0
 800b25c:	d151      	bne.n	800b302 <VL53L1_calc_timeout_register_values+0x13a>
 800b25e:	4623      	mov	r3, r4
			((timeout_us << 12) + (macro_period_us>>1)) /
 800b260:	4417      	add	r7, r2
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
 800b262:	70b3      	strb	r3, [r6, #2]
	timeout_mclks   =
 800b264:	fbb7 f7f0 	udiv	r7, r7, r0
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
		ptiming->mm_config__timeout_macrop_b_lo =
 800b268:	70f4      	strb	r4, [r6, #3]
	if (timeout_mclks > 0) {
 800b26a:	2f00      	cmp	r7, #0
 800b26c:	d132      	bne.n	800b2d4 <VL53L1_calc_timeout_register_values+0x10c>
 800b26e:	463b      	mov	r3, r7
		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
 800b270:	71f3      	strb	r3, [r6, #7]
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
		ptiming->range_config__timeout_macrop_b_lo =
 800b272:	7237      	strb	r7, [r6, #8]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b274:	2000      	movs	r0, #0
 800b276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ls_byte = timeout_mclks - 1;
 800b27a:	1e5a      	subs	r2, r3, #1
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b27c:	f032 03ff 	bics.w	r3, r2, #255	; 0xff
 800b280:	d009      	beq.n	800b296 <VL53L1_calc_timeout_register_values+0xce>
 800b282:	2300      	movs	r3, #0
			ls_byte = ls_byte >> 1;
 800b284:	0852      	lsrs	r2, r2, #1
			ms_byte++;
 800b286:	3301      	adds	r3, #1
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b288:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
			ms_byte++;
 800b28c:	b29b      	uxth	r3, r3
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b28e:	2900      	cmp	r1, #0
 800b290:	d1f8      	bne.n	800b284 <VL53L1_calc_timeout_register_values+0xbc>
 800b292:	021b      	lsls	r3, r3, #8
 800b294:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800b296:	4413      	add	r3, r2
 800b298:	b29b      	uxth	r3, r3
 800b29a:	0a1a      	lsrs	r2, r3, #8
			((timeout_us << 12) + (macro_period_us>>1)) /
 800b29c:	033f      	lsls	r7, r7, #12
 800b29e:	b2db      	uxtb	r3, r3
 800b2a0:	443d      	add	r5, r7
		ptiming->mm_config__timeout_macrop_a_hi =
 800b2a2:	7032      	strb	r2, [r6, #0]
	timeout_mclks   =
 800b2a4:	fbb5 f5f0 	udiv	r5, r5, r0
		ptiming->mm_config__timeout_macrop_a_lo =
 800b2a8:	7073      	strb	r3, [r6, #1]
	if (timeout_mclks > 0) {
 800b2aa:	2d00      	cmp	r5, #0
 800b2ac:	d0be      	beq.n	800b22c <VL53L1_calc_timeout_register_values+0x64>
		ls_byte = timeout_mclks - 1;
 800b2ae:	1e68      	subs	r0, r5, #1
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b2b0:	f030 05ff 	bics.w	r5, r0, #255	; 0xff
 800b2b4:	d009      	beq.n	800b2ca <VL53L1_calc_timeout_register_values+0x102>
 800b2b6:	2100      	movs	r1, #0
			ls_byte = ls_byte >> 1;
 800b2b8:	0840      	lsrs	r0, r0, #1
			ms_byte++;
 800b2ba:	3101      	adds	r1, #1
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b2bc:	f020 03ff 	bic.w	r3, r0, #255	; 0xff
			ms_byte++;
 800b2c0:	b289      	uxth	r1, r1
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d1f8      	bne.n	800b2b8 <VL53L1_calc_timeout_register_values+0xf0>
 800b2c6:	020d      	lsls	r5, r1, #8
 800b2c8:	b2ad      	uxth	r5, r5
		encoded_timeout = (ms_byte << 8)
 800b2ca:	4405      	add	r5, r0
 800b2cc:	b2ad      	uxth	r5, r5
 800b2ce:	0a2b      	lsrs	r3, r5, #8
 800b2d0:	b2ed      	uxtb	r5, r5
 800b2d2:	e7ac      	b.n	800b22e <VL53L1_calc_timeout_register_values+0x66>
		ls_byte = timeout_mclks - 1;
 800b2d4:	1e78      	subs	r0, r7, #1
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b2d6:	f030 07ff 	bics.w	r7, r0, #255	; 0xff
 800b2da:	d009      	beq.n	800b2f0 <VL53L1_calc_timeout_register_values+0x128>
 800b2dc:	2300      	movs	r3, #0
			ls_byte = ls_byte >> 1;
 800b2de:	0840      	lsrs	r0, r0, #1
			ms_byte++;
 800b2e0:	3301      	adds	r3, #1
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b2e2:	f020 02ff 	bic.w	r2, r0, #255	; 0xff
			ms_byte++;
 800b2e6:	b29b      	uxth	r3, r3
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b2e8:	2a00      	cmp	r2, #0
 800b2ea:	d1f8      	bne.n	800b2de <VL53L1_calc_timeout_register_values+0x116>
 800b2ec:	021f      	lsls	r7, r3, #8
 800b2ee:	b2bf      	uxth	r7, r7
		encoded_timeout = (ms_byte << 8)
 800b2f0:	4407      	add	r7, r0
 800b2f2:	b2bf      	uxth	r7, r7
 800b2f4:	0a3b      	lsrs	r3, r7, #8
 800b2f6:	b2ff      	uxtb	r7, r7
		ptiming->range_config__timeout_macrop_b_hi =
 800b2f8:	71f3      	strb	r3, [r6, #7]
		ptiming->range_config__timeout_macrop_b_lo =
 800b2fa:	7237      	strb	r7, [r6, #8]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b2fc:	2000      	movs	r0, #0
 800b2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ls_byte = timeout_mclks - 1;
 800b302:	1e61      	subs	r1, r4, #1
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b304:	f031 04ff 	bics.w	r4, r1, #255	; 0xff
 800b308:	d009      	beq.n	800b31e <VL53L1_calc_timeout_register_values+0x156>
 800b30a:	2300      	movs	r3, #0
			ls_byte = ls_byte >> 1;
 800b30c:	0849      	lsrs	r1, r1, #1
			ms_byte++;
 800b30e:	3301      	adds	r3, #1
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b310:	f021 04ff 	bic.w	r4, r1, #255	; 0xff
			ms_byte++;
 800b314:	b29b      	uxth	r3, r3
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b316:	2c00      	cmp	r4, #0
 800b318:	d1f8      	bne.n	800b30c <VL53L1_calc_timeout_register_values+0x144>
 800b31a:	021c      	lsls	r4, r3, #8
 800b31c:	b2a4      	uxth	r4, r4
		encoded_timeout = (ms_byte << 8)
 800b31e:	440c      	add	r4, r1
 800b320:	b2a4      	uxth	r4, r4
 800b322:	0a23      	lsrs	r3, r4, #8
 800b324:	b2e4      	uxtb	r4, r4
 800b326:	e79b      	b.n	800b260 <VL53L1_calc_timeout_register_values+0x98>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800b328:	f06f 000e 	mvn.w	r0, #14

	LOG_FUNCTION_END(0);

	return status;

}
 800b32c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b330 <VL53L1_encode_row_col>:
{
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 800b330:	2807      	cmp	r0, #7
		*pspad_number = 128 + (col << 3) + (15-row);
 800b332:	bf8b      	itete	hi
 800b334:	ebc0 00c1 	rsbhi	r0, r0, r1, lsl #3
	} else {
		*pspad_number = ((15-col) << 3) + row;
 800b338:	f1c1 010f 	rsbls	r1, r1, #15
		*pspad_number = 128 + (col << 3) + (15-row);
 800b33c:	3871      	subhi	r0, #113	; 0x71
		*pspad_number = ((15-col) << 3) + row;
 800b33e:	eb00 00c1 	addls.w	r0, r0, r1, lsl #3
 800b342:	b2c0      	uxtb	r0, r0
 800b344:	7010      	strb	r0, [r2, #0]
 800b346:	4770      	bx	lr

0800b348 <VL53L1_decode_zone_size>:
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 800b348:	0903      	lsrs	r3, r0, #4
	*pwidth  = encoded_xy_size & 0x0F;
 800b34a:	f000 000f 	and.w	r0, r0, #15
	*pheight = encoded_xy_size >> 4;
 800b34e:	7013      	strb	r3, [r2, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800b350:	7008      	strb	r0, [r1, #0]
 800b352:	4770      	bx	lr

0800b354 <VL53L1_encode_zone_size>:
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 800b354:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800b358:	7011      	strb	r1, [r2, #0]
 800b35a:	4770      	bx	lr

0800b35c <VL53L1_low_power_auto_data_init>:

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800b35c:	2300      	movs	r3, #0
	pdev->low_power_auto_data.vhv_loop_bound =
 800b35e:	2203      	movs	r2, #3
 800b360:	f880 22e4 	strb.w	r2, [r0, #740]	; 0x2e4
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800b364:	f880 32e5 	strb.w	r3, [r0, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800b368:	f880 32e6 	strb.w	r3, [r0, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800b36c:	f880 32e7 	strb.w	r3, [r0, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800b370:	f880 32e8 	strb.w	r3, [r0, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800b374:	f880 32e9 	strb.w	r3, [r0, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800b378:	f880 32ea 	strb.w	r3, [r0, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800b37c:	f8c0 32ec 	str.w	r3, [r0, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 800b380:	f8a0 32f0 	strh.w	r3, [r0, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
}
 800b384:	4618      	mov	r0, r3
 800b386:	4770      	bx	lr

0800b388 <VL53L1_low_power_auto_data_stop_range>:
	LOG_FUNCTION_START("");

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800b388:	22ff      	movs	r2, #255	; 0xff
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
	pdev->low_power_auto_data.dss__required_spads = 0;

	/* restore vhv configs */
	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800b38a:	f890 12e8 	ldrb.w	r1, [r0, #744]	; 0x2e8
	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800b38e:	f880 22e6 	strb.w	r2, [r0, #742]	; 0x2e6
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800b392:	2200      	movs	r2, #0
{
 800b394:	4603      	mov	r3, r0
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800b396:	f880 22ea 	strb.w	r2, [r0, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800b39a:	f8c0 22ec 	str.w	r2, [r0, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 800b39e:	f8a0 22f0 	strh.w	r2, [r0, #752]	; 0x2f0
	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800b3a2:	b109      	cbz	r1, 800b3a8 <VL53L1_low_power_auto_data_stop_range+0x20>
		pdev->stat_nvm.vhv_config__init =
 800b3a4:	f880 1163 	strb.w	r1, [r0, #355]	; 0x163
			pdev->low_power_auto_data.saved_vhv_init;
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800b3a8:	f893 22e9 	ldrb.w	r2, [r3, #745]	; 0x2e9
 800b3ac:	b10a      	cbz	r2, 800b3b2 <VL53L1_low_power_auto_data_stop_range+0x2a>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800b3ae:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
			pdev->low_power_auto_data.saved_vhv_timeout;

	/* remove phasecal override */
	pdev->gen_cfg.phasecal_config__override = 0x00;
 800b3b2:	2000      	movs	r0, #0
 800b3b4:	f883 018d 	strb.w	r0, [r3, #397]	; 0x18d

	LOG_FUNCTION_END(status);

	return status;
}
 800b3b8:	4770      	bx	lr
 800b3ba:	bf00      	nop

0800b3bc <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 800b3bc:	b4f0      	push	{r4, r5, r6, r7}
 800b3be:	4603      	mov	r3, r0
	VL53L1_Error  status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 800b3c0:	2701      	movs	r7, #1

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 800b3c2:	2000      	movs	r0, #0

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 800b3c4:	268b      	movs	r6, #139	; 0x8b
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	/* Set DSS to manual/expected SPADs */
	pgeneral->dss_config__manual_effective_spads_select = 200 << 8;
	pgeneral->dss_config__roi_mode_control =
 800b3c6:	2402      	movs	r4, #2
	plpadata->is_low_power_auto_mode = 1;
 800b3c8:	7057      	strb	r7, [r2, #1]
	plpadata->low_power_auto_range_count = 0;
 800b3ca:	7090      	strb	r0, [r2, #2]
	pgeneral->dss_config__manual_effective_spads_select = 200 << 8;
 800b3cc:	f44f 4548 	mov.w	r5, #51200	; 0xc800
	pdynamic->system__sequence_config = \
 800b3d0:	744e      	strb	r6, [r1, #17]
	pgeneral->dss_config__roi_mode_control =
 800b3d2:	729c      	strb	r4, [r3, #10]
	pgeneral->dss_config__manual_effective_spads_select = 200 << 8;
 800b3d4:	821d      	strh	r5, [r3, #16]
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

	LOG_FUNCTION_END(status);

	return status;
}
 800b3d6:	bcf0      	pop	{r4, r5, r6, r7}
 800b3d8:	4770      	bx	lr
 800b3da:	bf00      	nop

0800b3dc <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800b3dc:	b470      	push	{r4, r5, r6}

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800b3de:	f890 4160 	ldrb.w	r4, [r0, #352]	; 0x160
		pdev->stat_nvm.vhv_config__init;
 800b3e2:	f890 3163 	ldrb.w	r3, [r0, #355]	; 0x163
	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800b3e6:	f890 62e4 	ldrb.w	r6, [r0, #740]	; 0x2e4
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800b3ea:	f890 12ae 	ldrb.w	r1, [r0, #686]	; 0x2ae
	pdev->low_power_auto_data.saved_vhv_init =
 800b3ee:	f880 32e8 	strb.w	r3, [r0, #744]	; 0x2e8
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800b3f2:	f004 0203 	and.w	r2, r4, #3
	pdev->gen_cfg.phasecal_config__override = 0x01;
 800b3f6:	2501      	movs	r5, #1
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800b3f8:	eb02 0286 	add.w	r2, r2, r6, lsl #2
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800b3fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b400:	f880 3163 	strb.w	r3, [r0, #355]	; 0x163
	pdev->low_power_auto_data.saved_vhv_timeout =
 800b404:	f880 42e9 	strb.w	r4, [r0, #745]	; 0x2e9
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800b408:	f880 2160 	strb.w	r2, [r0, #352]	; 0x160
	pdev->gen_cfg.phasecal_config__override = 0x01;
 800b40c:	f880 518d 	strb.w	r5, [r0, #397]	; 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
 800b410:	f880 12ea 	strb.w	r1, [r0, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 800b414:	f880 1187 	strb.w	r1, [r0, #391]	; 0x187
		pdev->low_power_auto_data.first_run_phasecal_result;

	LOG_FUNCTION_END(status);

	return status;
}
 800b418:	bc70      	pop	{r4, r5, r6}
 800b41a:	2000      	movs	r0, #0
 800b41c:	4770      	bx	lr
 800b41e:	bf00      	nop

0800b420 <VL53L1_low_power_auto_update_DSS>:
	/* shift up to take advantage of 32 bits */
	/* 9.23 format */
	utemp32a = utemp32a << 16;

	/* check SPAD count */
	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 800b420:	f8b0 21d2 	ldrh.w	r2, [r0, #466]	; 0x1d2
{
 800b424:	b410      	push	{r4}
	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 800b426:	b17a      	cbz	r2, 800b448 <VL53L1_low_power_auto_update_DSS+0x28>
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 800b428:	f8b0 31de 	ldrh.w	r3, [r0, #478]	; 0x1de
		pdev->sys_results.result__ambient_count_rate_mcps_sd0;
 800b42c:	f8b0 41d6 	ldrh.w	r4, [r0, #470]	; 0x1d6
 800b430:	f64f 71ff 	movw	r1, #65535	; 0xffff
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 800b434:	4423      	add	r3, r4
 800b436:	428b      	cmp	r3, r1
 800b438:	bfa8      	it	ge
 800b43a:	460b      	movge	r3, r1
	utemp32a = utemp32a << 16;
 800b43c:	041b      	lsls	r3, r3, #16
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
	else {
		/* format 17.15 */
		utemp32a = utemp32a /
 800b43e:	fbb3 f3f2 	udiv	r3, r3, r2
			pdev->sys_results.result__dss_actual_effective_spads_sd0;
		/* save intermediate result */
		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 800b442:	f8c0 32ec 	str.w	r3, [r0, #748]	; 0x2ec
		 * format 9.23 */
		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
			16;

		/* check for divide by zero */
		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps == 0)
 800b446:	b963      	cbnz	r3, 800b462 <VL53L1_low_power_auto_update_DSS+0x42>
		pdev->low_power_auto_data.dss__required_spads = 0x8000;

		/* override DSS config */
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
		pdev->low_power_auto_data.dss__required_spads;
		pdev->gen_cfg.dss_config__roi_mode_control =
 800b448:	2202      	movs	r2, #2
		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 800b44a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
		pdev->gen_cfg.dss_config__roi_mode_control =
 800b44e:	f880 218e 	strb.w	r2, [r0, #398]	; 0x18e
		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 800b452:	f8a0 32f0 	strh.w	r3, [r0, #752]	; 0x2f0
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800b456:	f8a0 3194 	strh.w	r3, [r0, #404]	; 0x194
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800b45a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b45e:	2000      	movs	r0, #0
 800b460:	4770      	bx	lr
		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 800b462:	f8b0 2164 	ldrh.w	r2, [r0, #356]	; 0x164
 800b466:	0412      	lsls	r2, r2, #16
			utemp32a = utemp32a /
 800b468:	fbb2 f3f3 	udiv	r3, r2, r3
				(uint16_t)utemp32a;
 800b46c:	428b      	cmp	r3, r1
 800b46e:	bf28      	it	cs
 800b470:	460b      	movcs	r3, r1
			pdev->gen_cfg.dss_config__roi_mode_control =
 800b472:	2202      	movs	r2, #2
				(uint16_t)utemp32a;
 800b474:	b29b      	uxth	r3, r3
			pdev->gen_cfg.dss_config__roi_mode_control =
 800b476:	f880 218e 	strb.w	r2, [r0, #398]	; 0x18e
			pdev->low_power_auto_data.dss__required_spads =
 800b47a:	f8a0 32f0 	strh.w	r3, [r0, #752]	; 0x2f0
			pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800b47e:	f8a0 3194 	strh.w	r3, [r0, #404]	; 0x194
}
 800b482:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b486:	2000      	movs	r0, #0
 800b488:	4770      	bx	lr
 800b48a:	bf00      	nop

0800b48c <VL53L1_calc_pll_period_us>:

	uint32_t  pll_period_us        = 0;

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800b48c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
}
 800b490:	fb93 f0f0 	sdiv	r0, r3, r0
 800b494:	4770      	bx	lr
 800b496:	bf00      	nop

0800b498 <VL53L1_decode_vcsel_period>:
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800b498:	3001      	adds	r0, #1
 800b49a:	0040      	lsls	r0, r0, #1

	return vcsel_period_pclks;
}
 800b49c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 800b4a0:	4770      	bx	lr
 800b4a2:	bf00      	nop

0800b4a4 <VL53L1_decode_row_col>:
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 800b4a4:	0603      	lsls	r3, r0, #24
 800b4a6:	d407      	bmi.n	800b4b8 <VL53L1_decode_row_col+0x14>
		*prow = 8 + ((255-spad_number) & 0x07);
		*pcol = (spad_number-128) >> 3;
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
 800b4a8:	f1c0 037f 	rsb	r3, r0, #127	; 0x7f
 800b4ac:	10db      	asrs	r3, r3, #3
		*prow = spad_number & 0x07;
 800b4ae:	f000 0007 	and.w	r0, r0, #7
 800b4b2:	7008      	strb	r0, [r1, #0]
		*pcol = (127-spad_number) >> 3;
 800b4b4:	7013      	strb	r3, [r2, #0]
 800b4b6:	4770      	bx	lr
		*prow = 8 + ((255-spad_number) & 0x07);
 800b4b8:	43c3      	mvns	r3, r0
 800b4ba:	f003 0307 	and.w	r3, r3, #7
		*pcol = (spad_number-128) >> 3;
 800b4be:	3880      	subs	r0, #128	; 0x80
		*prow = 8 + ((255-spad_number) & 0x07);
 800b4c0:	3308      	adds	r3, #8
		*pcol = (spad_number-128) >> 3;
 800b4c2:	10c0      	asrs	r0, r0, #3
		*prow = 8 + ((255-spad_number) & 0x07);
 800b4c4:	700b      	strb	r3, [r1, #0]
		*pcol = (spad_number-128) >> 3;
 800b4c6:	7010      	strb	r0, [r2, #0]
 800b4c8:	4770      	bx	lr
 800b4ca:	bf00      	nop

0800b4cc <VL53L1_i2c_encode_static_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800b4cc:	290a      	cmp	r1, #10
 800b4ce:	d927      	bls.n	800b520 <VL53L1_i2c_encode_static_nvm_managed+0x54>
{
 800b4d0:	b538      	push	{r3, r4, r5, lr}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800b4d2:	7803      	ldrb	r3, [r0, #0]
 800b4d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   0) =
 800b4d8:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800b4da:	7843      	ldrb	r3, [r0, #1]
 800b4dc:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   1) =
 800b4e0:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800b4e2:	7883      	ldrb	r3, [r0, #2]
 800b4e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   2) =
 800b4e8:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800b4ea:	78c3      	ldrb	r3, [r0, #3]
 800b4ec:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   3) =
 800b4f0:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800b4f2:	7903      	ldrb	r3, [r0, #4]
 800b4f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4f8:	4605      	mov	r5, r0
	*(pbuffer +   4) =
 800b4fa:	7113      	strb	r3, [r2, #4]
 800b4fc:	4614      	mov	r4, r2
	VL53L1_i2c_encode_uint16_t(
 800b4fe:	88c0      	ldrh	r0, [r0, #6]
 800b500:	3205      	adds	r2, #5
 800b502:	2102      	movs	r1, #2
 800b504:	f7ff fda2 	bl	800b04c <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
		pdata->vhv_config__timeout_macrop_loop_bound;
 800b508:	7a2b      	ldrb	r3, [r5, #8]
	*(pbuffer +   7) =
 800b50a:	71e3      	strb	r3, [r4, #7]
	*(pbuffer +   8) =
		pdata->vhv_config__count_thresh;
 800b50c:	7a6b      	ldrb	r3, [r5, #9]
	*(pbuffer +   8) =
 800b50e:	7223      	strb	r3, [r4, #8]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800b510:	7aab      	ldrb	r3, [r5, #10]
 800b512:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer +   9) =
 800b516:	7263      	strb	r3, [r4, #9]
	*(pbuffer +  10) =
		pdata->vhv_config__init;
 800b518:	7aeb      	ldrb	r3, [r5, #11]
	*(pbuffer +  10) =
 800b51a:	72a3      	strb	r3, [r4, #10]
	LOG_FUNCTION_END(status);


	return status;
 800b51c:	2000      	movs	r0, #0
 800b51e:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800b520:	f06f 0009 	mvn.w	r0, #9
 800b524:	4770      	bx	lr
 800b526:	bf00      	nop

0800b528 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800b528:	b570      	push	{r4, r5, r6, lr}
 800b52a:	b084      	sub	sp, #16
 800b52c:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_ReadMulti(
 800b52e:	230b      	movs	r3, #11
 800b530:	aa01      	add	r2, sp, #4
 800b532:	2101      	movs	r1, #1
 800b534:	f006 fb02 	bl	8011b3c <VL53L1_ReadMulti>
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800b538:	4605      	mov	r5, r0
 800b53a:	bb60      	cbnz	r0, 800b596 <VL53L1_get_static_nvm_managed+0x6e>
		(*(pbuffer +   0)) & 0x7F;
 800b53c:	f89d 6004 	ldrb.w	r6, [sp, #4]
		(*(pbuffer +   1)) & 0xF;
 800b540:	f89d 0005 	ldrb.w	r0, [sp, #5]
		(*(pbuffer +   2)) & 0x7F;
 800b544:	f89d 1006 	ldrb.w	r1, [sp, #6]
		(*(pbuffer +   3)) & 0x3;
 800b548:	f89d 2007 	ldrb.w	r2, [sp, #7]
		(*(pbuffer +   4)) & 0x7F;
 800b54c:	f89d 3008 	ldrb.w	r3, [sp, #8]
		(*(pbuffer +   3)) & 0x3;
 800b550:	f002 0203 	and.w	r2, r2, #3
		(*(pbuffer +   4)) & 0x7F;
 800b554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		(*(pbuffer +   0)) & 0x7F;
 800b558:	f006 067f 	and.w	r6, r6, #127	; 0x7f
		(*(pbuffer +   1)) & 0xF;
 800b55c:	f000 000f 	and.w	r0, r0, #15
		(*(pbuffer +   2)) & 0x7F;
 800b560:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	pdata->i2c_slave__device_address =
 800b564:	7026      	strb	r6, [r4, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
 800b566:	7060      	strb	r0, [r4, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
 800b568:	70a1      	strb	r1, [r4, #2]
	pdata->ana_config__reg_avdd1v2_sel =
 800b56a:	70e2      	strb	r2, [r4, #3]
	pdata->ana_config__fast_osc__trim =
 800b56c:	7123      	strb	r3, [r4, #4]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 800b56e:	f10d 0109 	add.w	r1, sp, #9
 800b572:	2002      	movs	r0, #2
 800b574:	f7ff fd78 	bl	800b068 <VL53L1_i2c_decode_uint16_t>
		(*(pbuffer +   9)) & 0x3F;
 800b578:	f89d 300d 	ldrb.w	r3, [sp, #13]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800b57c:	f89d 600b 	ldrb.w	r6, [sp, #11]
	pdata->vhv_config__count_thresh =
 800b580:	f89d 100c 	ldrb.w	r1, [sp, #12]
	pdata->vhv_config__init =
 800b584:	f89d 200e 	ldrb.w	r2, [sp, #14]
	pdata->osc_measured__fast_osc__frequency =
 800b588:	80e0      	strh	r0, [r4, #6]
		(*(pbuffer +   9)) & 0x3F;
 800b58a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_config__offset =
 800b58e:	72a3      	strb	r3, [r4, #10]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800b590:	7226      	strb	r6, [r4, #8]
	pdata->vhv_config__count_thresh =
 800b592:	7261      	strb	r1, [r4, #9]
	pdata->vhv_config__init =
 800b594:	72e2      	strb	r2, [r4, #11]
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 800b596:	4628      	mov	r0, r5
 800b598:	b004      	add	sp, #16
 800b59a:	bd70      	pop	{r4, r5, r6, pc}

0800b59c <VL53L1_i2c_encode_customer_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800b59c:	2916      	cmp	r1, #22
 800b59e:	d94b      	bls.n	800b638 <VL53L1_i2c_encode_customer_nvm_managed+0x9c>
{
 800b5a0:	b538      	push	{r3, r4, r5, lr}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800b5a2:	7803      	ldrb	r3, [r0, #0]
	*(pbuffer +   0) =
 800b5a4:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->global_config__spad_enables_ref_1;
 800b5a6:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer +   1) =
 800b5a8:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->global_config__spad_enables_ref_2;
 800b5aa:	7883      	ldrb	r3, [r0, #2]
	*(pbuffer +   2) =
 800b5ac:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->global_config__spad_enables_ref_3;
 800b5ae:	78c3      	ldrb	r3, [r0, #3]
	*(pbuffer +   3) =
 800b5b0:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->global_config__spad_enables_ref_4;
 800b5b2:	7903      	ldrb	r3, [r0, #4]
	*(pbuffer +   4) =
 800b5b4:	7113      	strb	r3, [r2, #4]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800b5b6:	7943      	ldrb	r3, [r0, #5]
 800b5b8:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   5) =
 800b5bc:	7153      	strb	r3, [r2, #5]
	*(pbuffer +   6) =
		pdata->global_config__ref_en_start_select;
 800b5be:	7983      	ldrb	r3, [r0, #6]
	*(pbuffer +   6) =
 800b5c0:	7193      	strb	r3, [r2, #6]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800b5c2:	79c3      	ldrb	r3, [r0, #7]
 800b5c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer +   7) =
 800b5c8:	71d3      	strb	r3, [r2, #7]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800b5ca:	7a03      	ldrb	r3, [r0, #8]
 800b5cc:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   8) =
 800b5d0:	7213      	strb	r3, [r2, #8]
 800b5d2:	4604      	mov	r4, r0
 800b5d4:	4615      	mov	r5, r2
	VL53L1_i2c_encode_uint16_t(
 800b5d6:	8940      	ldrh	r0, [r0, #10]
 800b5d8:	3209      	adds	r2, #9
 800b5da:	2102      	movs	r1, #2
 800b5dc:	f7ff fd36 	bl	800b04c <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 800b5e0:	f105 020b 	add.w	r2, r5, #11
 800b5e4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800b5e8:	2102      	movs	r1, #2
 800b5ea:	f7ff fd4b 	bl	800b084 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 800b5ee:	f105 020d 	add.w	r2, r5, #13
 800b5f2:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800b5f6:	2102      	movs	r1, #2
 800b5f8:	f7ff fd44 	bl	800b084 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 800b5fc:	f105 020f 	add.w	r2, r5, #15
 800b600:	8a20      	ldrh	r0, [r4, #16]
 800b602:	2102      	movs	r1, #2
 800b604:	f7ff fd22 	bl	800b04c <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
 800b608:	8a60      	ldrh	r0, [r4, #18]
 800b60a:	f105 0211 	add.w	r2, r5, #17
 800b60e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800b612:	2102      	movs	r1, #2
 800b614:	f7ff fd36 	bl	800b084 <VL53L1_i2c_encode_int16_t>
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 800b618:	f105 0213 	add.w	r2, r5, #19
 800b61c:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 800b620:	2102      	movs	r1, #2
 800b622:	f7ff fd2f 	bl	800b084 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 800b626:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 800b62a:	f105 0215 	add.w	r2, r5, #21
 800b62e:	2102      	movs	r1, #2
 800b630:	f7ff fd28 	bl	800b084 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800b634:	2000      	movs	r0, #0
 800b636:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800b638:	f06f 0009 	mvn.w	r0, #9
 800b63c:	4770      	bx	lr
 800b63e:	bf00      	nop

0800b640 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800b640:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b642:	b087      	sub	sp, #28
 800b644:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_ReadMulti(
 800b646:	2317      	movs	r3, #23
 800b648:	466a      	mov	r2, sp
 800b64a:	210d      	movs	r1, #13
 800b64c:	f006 fa76 	bl	8011b3c <VL53L1_ReadMulti>
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800b650:	4605      	mov	r5, r0
 800b652:	2800      	cmp	r0, #0
 800b654:	d14c      	bne.n	800b6f0 <VL53L1_get_customer_nvm_managed+0xb0>
		(*(pbuffer +   5)) & 0xF;
 800b656:	f89d 1005 	ldrb.w	r1, [sp, #5]
		(*(pbuffer +   7)) & 0x3F;
 800b65a:	f89d 2007 	ldrb.w	r2, [sp, #7]
		(*(pbuffer +   8)) & 0x3;
 800b65e:	f89d 3008 	ldrb.w	r3, [sp, #8]
	pdata->global_config__spad_enables_ref_0 =
 800b662:	f89d 0000 	ldrb.w	r0, [sp]
	pdata->global_config__spad_enables_ref_1 =
 800b666:	f89d 7001 	ldrb.w	r7, [sp, #1]
	pdata->global_config__spad_enables_ref_2 =
 800b66a:	f89d 6002 	ldrb.w	r6, [sp, #2]
	pdata->global_config__spad_enables_ref_0 =
 800b66e:	7020      	strb	r0, [r4, #0]
		(*(pbuffer +   5)) & 0xF;
 800b670:	f001 010f 	and.w	r1, r1, #15
		(*(pbuffer +   7)) & 0x3F;
 800b674:	f002 023f 	and.w	r2, r2, #63	; 0x3f
		(*(pbuffer +   8)) & 0x3;
 800b678:	f003 0303 	and.w	r3, r3, #3
	pdata->global_config__spad_enables_ref_3 =
 800b67c:	f89d 0003 	ldrb.w	r0, [sp, #3]
	pdata->global_config__spad_enables_ref_5 =
 800b680:	7161      	strb	r1, [r4, #5]
	pdata->ref_spad_man__num_requested_ref_spads =
 800b682:	71e2      	strb	r2, [r4, #7]
	pdata->global_config__spad_enables_ref_4 =
 800b684:	f89d 1004 	ldrb.w	r1, [sp, #4]
	pdata->global_config__ref_en_start_select =
 800b688:	f89d 2006 	ldrb.w	r2, [sp, #6]
	pdata->ref_spad_man__ref_location =
 800b68c:	7223      	strb	r3, [r4, #8]
	pdata->global_config__ref_en_start_select =
 800b68e:	71a2      	strb	r2, [r4, #6]
	pdata->global_config__spad_enables_ref_3 =
 800b690:	70e0      	strb	r0, [r4, #3]
	pdata->global_config__spad_enables_ref_4 =
 800b692:	7121      	strb	r1, [r4, #4]
	pdata->global_config__spad_enables_ref_1 =
 800b694:	7067      	strb	r7, [r4, #1]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 800b696:	f10d 0109 	add.w	r1, sp, #9
	pdata->global_config__spad_enables_ref_2 =
 800b69a:	70a6      	strb	r6, [r4, #2]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 800b69c:	2002      	movs	r0, #2
 800b69e:	f7ff fce3 	bl	800b068 <VL53L1_i2c_decode_uint16_t>
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 800b6a2:	f10d 010b 	add.w	r1, sp, #11
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800b6a6:	8160      	strh	r0, [r4, #10]
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 800b6a8:	2002      	movs	r0, #2
 800b6aa:	f7ff fcf9 	bl	800b0a0 <VL53L1_i2c_decode_int16_t>
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 800b6ae:	f10d 010d 	add.w	r1, sp, #13
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800b6b2:	81a0      	strh	r0, [r4, #12]
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 800b6b4:	2002      	movs	r0, #2
 800b6b6:	f7ff fcf3 	bl	800b0a0 <VL53L1_i2c_decode_int16_t>
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 800b6ba:	f10d 010f 	add.w	r1, sp, #15
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800b6be:	81e0      	strh	r0, [r4, #14]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 800b6c0:	2002      	movs	r0, #2
 800b6c2:	f7ff fcd1 	bl	800b068 <VL53L1_i2c_decode_uint16_t>
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800b6c6:	f10d 0111 	add.w	r1, sp, #17
	pdata->ref_spad_char__total_rate_target_mcps =
 800b6ca:	8220      	strh	r0, [r4, #16]
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800b6cc:	2002      	movs	r0, #2
 800b6ce:	f7ff fce7 	bl	800b0a0 <VL53L1_i2c_decode_int16_t>
 800b6d2:	f3c0 000c 	ubfx	r0, r0, #0, #13
	pdata->algo__part_to_part_range_offset_mm =
 800b6d6:	8260      	strh	r0, [r4, #18]
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 800b6d8:	f10d 0113 	add.w	r1, sp, #19
 800b6dc:	2002      	movs	r0, #2
 800b6de:	f7ff fcdf 	bl	800b0a0 <VL53L1_i2c_decode_int16_t>
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 800b6e2:	f10d 0115 	add.w	r1, sp, #21
	pdata->mm_config__inner_offset_mm =
 800b6e6:	82a0      	strh	r0, [r4, #20]
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 800b6e8:	2002      	movs	r0, #2
 800b6ea:	f7ff fcd9 	bl	800b0a0 <VL53L1_i2c_decode_int16_t>
	pdata->mm_config__outer_offset_mm =
 800b6ee:	82e0      	strh	r0, [r4, #22]
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	b007      	add	sp, #28
 800b6f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6f6:	bf00      	nop

0800b6f8 <VL53L1_i2c_encode_static_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800b6f8:	291f      	cmp	r1, #31
 800b6fa:	d968      	bls.n	800b7ce <VL53L1_i2c_encode_static_config+0xd6>
{
 800b6fc:	b538      	push	{r3, r4, r5, lr}
 800b6fe:	4604      	mov	r4, r0
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	VL53L1_i2c_encode_uint16_t(
 800b700:	2102      	movs	r1, #2
 800b702:	8800      	ldrh	r0, [r0, #0]
 800b704:	4615      	mov	r5, r2
 800b706:	f7ff fca1 	bl	800b04c <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800b70a:	78a3      	ldrb	r3, [r4, #2]
 800b70c:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   2) =
 800b710:	70ab      	strb	r3, [r5, #2]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800b712:	78e3      	ldrb	r3, [r4, #3]
 800b714:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   3) =
 800b718:	70eb      	strb	r3, [r5, #3]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800b71a:	7923      	ldrb	r3, [r4, #4]
 800b71c:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   4) =
 800b720:	712b      	strb	r3, [r5, #4]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800b722:	7963      	ldrb	r3, [r4, #5]
 800b724:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer +   5) =
 800b728:	716b      	strb	r3, [r5, #5]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800b72a:	79a3      	ldrb	r3, [r4, #6]
 800b72c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   6) =
 800b730:	71ab      	strb	r3, [r5, #6]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800b732:	79e3      	ldrb	r3, [r4, #7]
 800b734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   7) =
 800b738:	71eb      	strb	r3, [r5, #7]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800b73a:	7a23      	ldrb	r3, [r4, #8]
 800b73c:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   8) =
 800b740:	722b      	strb	r3, [r5, #8]
	*(pbuffer +   9) =
		pdata->pad_i2c_hv__config;
 800b742:	7a63      	ldrb	r3, [r4, #9]
	*(pbuffer +   9) =
 800b744:	726b      	strb	r3, [r5, #9]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800b746:	7aa3      	ldrb	r3, [r4, #10]
 800b748:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +  10) =
 800b74c:	72ab      	strb	r3, [r5, #10]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800b74e:	7ae3      	ldrb	r3, [r4, #11]
 800b750:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  11) =
 800b754:	72eb      	strb	r3, [r5, #11]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800b756:	7b23      	ldrb	r3, [r4, #12]
 800b758:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer +  12) =
 800b75c:	732b      	strb	r3, [r5, #12]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800b75e:	7b63      	ldrb	r3, [r4, #13]
 800b760:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  13) =
 800b764:	736b      	strb	r3, [r5, #13]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800b766:	7ba3      	ldrb	r3, [r4, #14]
 800b768:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  14) =
 800b76c:	73ab      	strb	r3, [r5, #14]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800b76e:	7be3      	ldrb	r3, [r4, #15]
 800b770:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer +  15) =
 800b774:	73eb      	strb	r3, [r5, #15]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800b776:	7c23      	ldrb	r3, [r4, #16]
 800b778:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer +  16) =
 800b77c:	742b      	strb	r3, [r5, #16]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800b77e:	7c63      	ldrb	r3, [r4, #17]
 800b780:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +  17) =
 800b784:	746b      	strb	r3, [r5, #17]
	*(pbuffer +  18) =
		pdata->sigma_estimator__effective_pulse_width_ns;
 800b786:	7ca3      	ldrb	r3, [r4, #18]
	*(pbuffer +  18) =
 800b788:	74ab      	strb	r3, [r5, #18]
	*(pbuffer +  19) =
		pdata->sigma_estimator__effective_ambient_width_ns;
 800b78a:	7ce3      	ldrb	r3, [r4, #19]
	*(pbuffer +  19) =
 800b78c:	74eb      	strb	r3, [r5, #19]
	*(pbuffer +  20) =
		pdata->sigma_estimator__sigma_ref_mm;
 800b78e:	7d23      	ldrb	r3, [r4, #20]
	*(pbuffer +  20) =
 800b790:	752b      	strb	r3, [r5, #20]
	*(pbuffer +  21) =
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800b792:	7d63      	ldrb	r3, [r4, #21]
	*(pbuffer +  21) =
 800b794:	756b      	strb	r3, [r5, #21]
	*(pbuffer +  22) =
		pdata->spare_host_config__static_config_spare_0;
 800b796:	7da3      	ldrb	r3, [r4, #22]
	*(pbuffer +  22) =
 800b798:	75ab      	strb	r3, [r5, #22]
	*(pbuffer +  23) =
		pdata->spare_host_config__static_config_spare_1;
 800b79a:	7de3      	ldrb	r3, [r4, #23]
	*(pbuffer +  23) =
 800b79c:	75eb      	strb	r3, [r5, #23]
	VL53L1_i2c_encode_uint16_t(
 800b79e:	8b20      	ldrh	r0, [r4, #24]
 800b7a0:	f105 0218 	add.w	r2, r5, #24
 800b7a4:	2102      	movs	r1, #2
 800b7a6:	f7ff fc51 	bl	800b04c <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
		pdata->algo__range_ignore_valid_height_mm;
 800b7aa:	7ea3      	ldrb	r3, [r4, #26]
	*(pbuffer +  26) =
 800b7ac:	76ab      	strb	r3, [r5, #26]
	*(pbuffer +  27) =
		pdata->algo__range_min_clip;
 800b7ae:	7ee3      	ldrb	r3, [r4, #27]
	*(pbuffer +  27) =
 800b7b0:	76eb      	strb	r3, [r5, #27]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800b7b2:	7f23      	ldrb	r3, [r4, #28]
 800b7b4:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +  28) =
 800b7b8:	772b      	strb	r3, [r5, #28]
	*(pbuffer +  29) =
		pdata->spare_host_config__static_config_spare_2;
 800b7ba:	7f63      	ldrb	r3, [r4, #29]
	*(pbuffer +  29) =
 800b7bc:	776b      	strb	r3, [r5, #29]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800b7be:	7fa3      	ldrb	r3, [r4, #30]
 800b7c0:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +  30) =
 800b7c4:	77ab      	strb	r3, [r5, #30]
	*(pbuffer +  31) =
		pdata->sd_config__reset_stages_lsb;
 800b7c6:	7fe3      	ldrb	r3, [r4, #31]
	*(pbuffer +  31) =
 800b7c8:	77eb      	strb	r3, [r5, #31]
	LOG_FUNCTION_END(status);


	return status;
 800b7ca:	2000      	movs	r0, #0
 800b7cc:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800b7ce:	f06f 0009 	mvn.w	r0, #9
 800b7d2:	4770      	bx	lr

0800b7d4 <VL53L1_i2c_encode_general_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 800b7d4:	2915      	cmp	r1, #21
 800b7d6:	d93f      	bls.n	800b858 <VL53L1_i2c_encode_general_config+0x84>
{
 800b7d8:	b538      	push	{r3, r4, r5, lr}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800b7da:	7803      	ldrb	r3, [r0, #0]
	*(pbuffer +   0) =
 800b7dc:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->global_config__stream_divider;
 800b7de:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer +   1) =
 800b7e0:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->system__interrupt_config_gpio;
 800b7e2:	7883      	ldrb	r3, [r0, #2]
	*(pbuffer +   2) =
 800b7e4:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800b7e6:	78c3      	ldrb	r3, [r0, #3]
 800b7e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   3) =
 800b7ec:	70d3      	strb	r3, [r2, #3]
 800b7ee:	4605      	mov	r5, r0
	VL53L1_i2c_encode_uint16_t(
 800b7f0:	8880      	ldrh	r0, [r0, #4]
 800b7f2:	4614      	mov	r4, r2
 800b7f4:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800b7f8:	3204      	adds	r2, #4
 800b7fa:	2102      	movs	r1, #2
 800b7fc:	f7ff fc26 	bl	800b04c <VL53L1_i2c_encode_uint16_t>
		pdata->cal_config__repeat_rate & 0xFFF,
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800b800:	79ab      	ldrb	r3, [r5, #6]
 800b802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   6) =
 800b806:	71a3      	strb	r3, [r4, #6]
	*(pbuffer +   7) =
		pdata->phasecal_config__timeout_macrop;
 800b808:	79eb      	ldrb	r3, [r5, #7]
	*(pbuffer +   7) =
 800b80a:	71e3      	strb	r3, [r4, #7]
	*(pbuffer +   8) =
		pdata->phasecal_config__target;
 800b80c:	7a2b      	ldrb	r3, [r5, #8]
	*(pbuffer +   8) =
 800b80e:	7223      	strb	r3, [r4, #8]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800b810:	7a6b      	ldrb	r3, [r5, #9]
 800b812:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   9) =
 800b816:	7263      	strb	r3, [r4, #9]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800b818:	7aab      	ldrb	r3, [r5, #10]
 800b81a:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer +  11) =
 800b81e:	72e3      	strb	r3, [r4, #11]
	VL53L1_i2c_encode_uint16_t(
 800b820:	89a8      	ldrh	r0, [r5, #12]
 800b822:	f104 020c 	add.w	r2, r4, #12
 800b826:	2102      	movs	r1, #2
 800b828:	f7ff fc10 	bl	800b04c <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 800b82c:	f104 020e 	add.w	r2, r4, #14
 800b830:	89e8      	ldrh	r0, [r5, #14]
 800b832:	2102      	movs	r1, #2
 800b834:	f7ff fc0a 	bl	800b04c <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 800b838:	8a28      	ldrh	r0, [r5, #16]
 800b83a:	f104 0210 	add.w	r2, r4, #16
 800b83e:	2102      	movs	r1, #2
 800b840:	f7ff fc04 	bl	800b04c <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
		pdata->dss_config__manual_block_select;
 800b844:	7cab      	ldrb	r3, [r5, #18]
	*(pbuffer +  18) =
 800b846:	74a3      	strb	r3, [r4, #18]
	*(pbuffer +  19) =
		pdata->dss_config__aperture_attenuation;
 800b848:	7ceb      	ldrb	r3, [r5, #19]
	*(pbuffer +  19) =
 800b84a:	74e3      	strb	r3, [r4, #19]
	*(pbuffer +  20) =
		pdata->dss_config__max_spads_limit;
 800b84c:	7d2b      	ldrb	r3, [r5, #20]
	*(pbuffer +  20) =
 800b84e:	7523      	strb	r3, [r4, #20]
	*(pbuffer +  21) =
		pdata->dss_config__min_spads_limit;
 800b850:	7d6b      	ldrb	r3, [r5, #21]
	*(pbuffer +  21) =
 800b852:	7563      	strb	r3, [r4, #21]
	LOG_FUNCTION_END(status);


	return status;
 800b854:	2000      	movs	r0, #0
 800b856:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800b858:	f06f 0009 	mvn.w	r0, #9
 800b85c:	4770      	bx	lr
 800b85e:	bf00      	nop

0800b860 <VL53L1_i2c_encode_timing_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 800b860:	2916      	cmp	r1, #22
 800b862:	d93d      	bls.n	800b8e0 <VL53L1_i2c_encode_timing_config+0x80>
{
 800b864:	b538      	push	{r3, r4, r5, lr}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800b866:	7803      	ldrb	r3, [r0, #0]
 800b868:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   0) =
 800b86c:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->mm_config__timeout_macrop_a_lo;
 800b86e:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer +   1) =
 800b870:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800b872:	7883      	ldrb	r3, [r0, #2]
 800b874:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   2) =
 800b878:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->mm_config__timeout_macrop_b_lo;
 800b87a:	78c3      	ldrb	r3, [r0, #3]
	*(pbuffer +   3) =
 800b87c:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800b87e:	7903      	ldrb	r3, [r0, #4]
 800b880:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   4) =
 800b884:	7113      	strb	r3, [r2, #4]
	*(pbuffer +   5) =
		pdata->range_config__timeout_macrop_a_lo;
 800b886:	7943      	ldrb	r3, [r0, #5]
	*(pbuffer +   5) =
 800b888:	7153      	strb	r3, [r2, #5]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800b88a:	7983      	ldrb	r3, [r0, #6]
 800b88c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer +   6) =
 800b890:	7193      	strb	r3, [r2, #6]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800b892:	79c3      	ldrb	r3, [r0, #7]
 800b894:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   7) =
 800b898:	71d3      	strb	r3, [r2, #7]
	*(pbuffer +   8) =
		pdata->range_config__timeout_macrop_b_lo;
 800b89a:	7a03      	ldrb	r3, [r0, #8]
	*(pbuffer +   8) =
 800b89c:	7213      	strb	r3, [r2, #8]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800b89e:	7a43      	ldrb	r3, [r0, #9]
 800b8a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b8a4:	4605      	mov	r5, r0
	*(pbuffer +   9) =
 800b8a6:	7253      	strb	r3, [r2, #9]
 800b8a8:	4614      	mov	r4, r2
	VL53L1_i2c_encode_uint16_t(
 800b8aa:	8940      	ldrh	r0, [r0, #10]
 800b8ac:	320a      	adds	r2, #10
 800b8ae:	2102      	movs	r1, #2
 800b8b0:	f7ff fbcc 	bl	800b04c <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 800b8b4:	f104 020c 	add.w	r2, r4, #12
 800b8b8:	89a8      	ldrh	r0, [r5, #12]
 800b8ba:	2102      	movs	r1, #2
 800b8bc:	f7ff fbc6 	bl	800b04c <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
		pdata->range_config__valid_phase_low;
 800b8c0:	7bab      	ldrb	r3, [r5, #14]
	*(pbuffer +  14) =
 800b8c2:	73a3      	strb	r3, [r4, #14]
	*(pbuffer +  15) =
		pdata->range_config__valid_phase_high;
 800b8c4:	7beb      	ldrb	r3, [r5, #15]
	*(pbuffer +  15) =
 800b8c6:	73e3      	strb	r3, [r4, #15]
	VL53L1_i2c_encode_uint32_t(
 800b8c8:	6928      	ldr	r0, [r5, #16]
 800b8ca:	f104 0212 	add.w	r2, r4, #18
 800b8ce:	2104      	movs	r1, #4
 800b8d0:	f7ff fbf8 	bl	800b0c4 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800b8d4:	7d2b      	ldrb	r3, [r5, #20]
 800b8d6:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +  22) =
 800b8da:	75a3      	strb	r3, [r4, #22]
	LOG_FUNCTION_END(status);


	return status;
 800b8dc:	2000      	movs	r0, #0
 800b8de:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800b8e0:	f06f 0009 	mvn.w	r0, #9
 800b8e4:	4770      	bx	lr
 800b8e6:	bf00      	nop

0800b8e8 <VL53L1_i2c_encode_dynamic_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800b8e8:	2911      	cmp	r1, #17
 800b8ea:	d93c      	bls.n	800b966 <VL53L1_i2c_encode_dynamic_config+0x7e>
{
 800b8ec:	b538      	push	{r3, r4, r5, lr}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800b8ee:	7803      	ldrb	r3, [r0, #0]
 800b8f0:	f003 0303 	and.w	r3, r3, #3
 800b8f4:	4615      	mov	r5, r2
	*(pbuffer +   0) =
 800b8f6:	f802 3b01 	strb.w	r3, [r2], #1
 800b8fa:	4604      	mov	r4, r0
	VL53L1_i2c_encode_uint16_t(
 800b8fc:	2102      	movs	r1, #2
 800b8fe:	8840      	ldrh	r0, [r0, #2]
 800b900:	f7ff fba4 	bl	800b04c <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 800b904:	88a0      	ldrh	r0, [r4, #4]
 800b906:	1cea      	adds	r2, r5, #3
 800b908:	2102      	movs	r1, #2
 800b90a:	f7ff fb9f 	bl	800b04c <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800b90e:	79a3      	ldrb	r3, [r4, #6]
 800b910:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   5) =
 800b914:	716b      	strb	r3, [r5, #5]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800b916:	79e3      	ldrb	r3, [r4, #7]
 800b918:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer +   6) =
 800b91c:	71ab      	strb	r3, [r5, #6]
	*(pbuffer +   7) =
		pdata->sd_config__woi_sd0;
 800b91e:	7a23      	ldrb	r3, [r4, #8]
	*(pbuffer +   7) =
 800b920:	71eb      	strb	r3, [r5, #7]
	*(pbuffer +   8) =
		pdata->sd_config__woi_sd1;
 800b922:	7a63      	ldrb	r3, [r4, #9]
	*(pbuffer +   8) =
 800b924:	722b      	strb	r3, [r5, #8]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800b926:	7aa3      	ldrb	r3, [r4, #10]
 800b928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   9) =
 800b92c:	726b      	strb	r3, [r5, #9]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800b92e:	7ae3      	ldrb	r3, [r4, #11]
 800b930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +  10) =
 800b934:	72ab      	strb	r3, [r5, #10]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800b936:	7b23      	ldrb	r3, [r4, #12]
 800b938:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  11) =
 800b93c:	72eb      	strb	r3, [r5, #11]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 800b93e:	7b63      	ldrb	r3, [r4, #13]
 800b940:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  12) =
 800b944:	732b      	strb	r3, [r5, #12]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 800b946:	7ba3      	ldrb	r3, [r4, #14]
 800b948:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +  13) =
 800b94c:	736b      	strb	r3, [r5, #13]
	*(pbuffer +  14) =
		pdata->roi_config__user_roi_centre_spad;
 800b94e:	7be3      	ldrb	r3, [r4, #15]
	*(pbuffer +  14) =
 800b950:	73ab      	strb	r3, [r5, #14]
	*(pbuffer +  15) =
		pdata->roi_config__user_roi_requested_global_xy_size;
 800b952:	7c23      	ldrb	r3, [r4, #16]
	*(pbuffer +  15) =
 800b954:	73eb      	strb	r3, [r5, #15]
	*(pbuffer +  16) =
		pdata->system__sequence_config;
 800b956:	7c63      	ldrb	r3, [r4, #17]
	*(pbuffer +  16) =
 800b958:	742b      	strb	r3, [r5, #16]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 800b95a:	7ca3      	ldrb	r3, [r4, #18]
 800b95c:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  17) =
 800b960:	746b      	strb	r3, [r5, #17]
	LOG_FUNCTION_END(status);


	return status;
 800b962:	2000      	movs	r0, #0
 800b964:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800b966:	f06f 0009 	mvn.w	r0, #9
 800b96a:	4770      	bx	lr

0800b96c <VL53L1_i2c_encode_system_control>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 800b96c:	2904      	cmp	r1, #4
 800b96e:	d913      	bls.n	800b998 <VL53L1_i2c_encode_system_control+0x2c>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800b970:	7803      	ldrb	r3, [r0, #0]
 800b972:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   0) =
 800b976:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800b978:	7843      	ldrb	r3, [r0, #1]
 800b97a:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   1) =
 800b97e:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800b980:	7883      	ldrb	r3, [r0, #2]
 800b982:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   2) =
 800b986:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800b988:	78c3      	ldrb	r3, [r0, #3]
 800b98a:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   3) =
 800b98e:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->system__mode_start;
 800b990:	7903      	ldrb	r3, [r0, #4]
	*(pbuffer +   4) =
 800b992:	7113      	strb	r3, [r2, #4]
	LOG_FUNCTION_END(status);


	return status;
 800b994:	2000      	movs	r0, #0
 800b996:	4770      	bx	lr
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800b998:	f06f 0009 	mvn.w	r0, #9
}
 800b99c:	4770      	bx	lr
 800b99e:	bf00      	nop

0800b9a0 <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 800b9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9a2:	b083      	sub	sp, #12
		pdata->power_management__go1_power_force & 0x1;
 800b9a4:	780f      	ldrb	r7, [r1, #0]
		pdata->system__stream_count_ctrl & 0x1;
 800b9a6:	784e      	ldrb	r6, [r1, #1]
		pdata->firmware__enable & 0x1;
 800b9a8:	788d      	ldrb	r5, [r1, #2]
		pdata->system__interrupt_clear & 0x3;
 800b9aa:	78cc      	ldrb	r4, [r1, #3]
	*(pbuffer +   4) =
 800b9ac:	790a      	ldrb	r2, [r1, #4]
 800b9ae:	f88d 2004 	strb.w	r2, [sp, #4]
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
		status = VL53L1_WriteMulti(
 800b9b2:	2305      	movs	r3, #5
		pdata->power_management__go1_power_force & 0x1;
 800b9b4:	f007 0701 	and.w	r7, r7, #1
		pdata->system__stream_count_ctrl & 0x1;
 800b9b8:	f006 0601 	and.w	r6, r6, #1
		pdata->firmware__enable & 0x1;
 800b9bc:	f005 0501 	and.w	r5, r5, #1
		pdata->system__interrupt_clear & 0x3;
 800b9c0:	f004 0403 	and.w	r4, r4, #3
		status = VL53L1_WriteMulti(
 800b9c4:	466a      	mov	r2, sp
 800b9c6:	2183      	movs	r1, #131	; 0x83
	*(pbuffer +   0) =
 800b9c8:	f88d 7000 	strb.w	r7, [sp]
	*(pbuffer +   1) =
 800b9cc:	f88d 6001 	strb.w	r6, [sp, #1]
	*(pbuffer +   2) =
 800b9d0:	f88d 5002 	strb.w	r5, [sp, #2]
	*(pbuffer +   3) =
 800b9d4:	f88d 4003 	strb.w	r4, [sp, #3]
		status = VL53L1_WriteMulti(
 800b9d8:	f006 f888 	bl	8011aec <VL53L1_WriteMulti>
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
}
 800b9dc:	b003      	add	sp, #12
 800b9de:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b9e0 <VL53L1_i2c_decode_system_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 800b9e0:	282b      	cmp	r0, #43	; 0x2b
 800b9e2:	f240 8089 	bls.w	800baf8 <VL53L1_i2c_decode_system_results+0x118>
{
 800b9e6:	b538      	push	{r3, r4, r5, lr}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800b9e8:	780b      	ldrb	r3, [r1, #0]
 800b9ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->result__interrupt_status =
 800b9ee:	7013      	strb	r3, [r2, #0]
	pdata->result__range_status =
 800b9f0:	784b      	ldrb	r3, [r1, #1]
 800b9f2:	7053      	strb	r3, [r2, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800b9f4:	788b      	ldrb	r3, [r1, #2]
 800b9f6:	f003 030f 	and.w	r3, r3, #15
	pdata->result__report_status =
 800b9fa:	7093      	strb	r3, [r2, #2]
	pdata->result__stream_count =
 800b9fc:	78cb      	ldrb	r3, [r1, #3]
 800b9fe:	70d3      	strb	r3, [r2, #3]
 800ba00:	460d      	mov	r5, r1
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 800ba02:	2002      	movs	r0, #2
 800ba04:	3104      	adds	r1, #4
 800ba06:	4614      	mov	r4, r2
 800ba08:	f7ff fb2e 	bl	800b068 <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 800ba0c:	1da9      	adds	r1, r5, #6
	pdata->result__dss_actual_effective_spads_sd0 =
 800ba0e:	80a0      	strh	r0, [r4, #4]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 800ba10:	2002      	movs	r0, #2
 800ba12:	f7ff fb29 	bl	800b068 <VL53L1_i2c_decode_uint16_t>
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 800ba16:	f105 0108 	add.w	r1, r5, #8
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800ba1a:	80e0      	strh	r0, [r4, #6]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 800ba1c:	2002      	movs	r0, #2
 800ba1e:	f7ff fb23 	bl	800b068 <VL53L1_i2c_decode_uint16_t>
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 800ba22:	f105 010a 	add.w	r1, r5, #10
	pdata->result__ambient_count_rate_mcps_sd0 =
 800ba26:	8120      	strh	r0, [r4, #8]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 800ba28:	2002      	movs	r0, #2
 800ba2a:	f7ff fb1d 	bl	800b068 <VL53L1_i2c_decode_uint16_t>
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 800ba2e:	f105 010c 	add.w	r1, r5, #12
	pdata->result__sigma_sd0 =
 800ba32:	8160      	strh	r0, [r4, #10]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 800ba34:	2002      	movs	r0, #2
 800ba36:	f7ff fb17 	bl	800b068 <VL53L1_i2c_decode_uint16_t>
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 800ba3a:	f105 010e 	add.w	r1, r5, #14
	pdata->result__phase_sd0 =
 800ba3e:	81a0      	strh	r0, [r4, #12]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 800ba40:	2002      	movs	r0, #2
 800ba42:	f7ff fb11 	bl	800b068 <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 800ba46:	f105 0110 	add.w	r1, r5, #16
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800ba4a:	81e0      	strh	r0, [r4, #14]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 800ba4c:	2002      	movs	r0, #2
 800ba4e:	f7ff fb0b 	bl	800b068 <VL53L1_i2c_decode_uint16_t>
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 800ba52:	f105 0112 	add.w	r1, r5, #18
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800ba56:	8220      	strh	r0, [r4, #16]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 800ba58:	2002      	movs	r0, #2
 800ba5a:	f7ff fb05 	bl	800b068 <VL53L1_i2c_decode_uint16_t>
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 800ba5e:	f105 0114 	add.w	r1, r5, #20
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800ba62:	8260      	strh	r0, [r4, #18]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 800ba64:	2002      	movs	r0, #2
 800ba66:	f7ff faff 	bl	800b068 <VL53L1_i2c_decode_uint16_t>
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800ba6a:	f105 0116 	add.w	r1, r5, #22
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800ba6e:	82a0      	strh	r0, [r4, #20]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800ba70:	2002      	movs	r0, #2
 800ba72:	f7ff faf9 	bl	800b068 <VL53L1_i2c_decode_uint16_t>
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800ba76:	f105 0118 	add.w	r1, r5, #24
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800ba7a:	82e0      	strh	r0, [r4, #22]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800ba7c:	2002      	movs	r0, #2
 800ba7e:	f7ff faf3 	bl	800b068 <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 800ba82:	f105 011a 	add.w	r1, r5, #26
	pdata->result__dss_actual_effective_spads_sd1 =
 800ba86:	8320      	strh	r0, [r4, #24]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 800ba88:	2002      	movs	r0, #2
 800ba8a:	f7ff faed 	bl	800b068 <VL53L1_i2c_decode_uint16_t>
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 800ba8e:	f105 011c 	add.w	r1, r5, #28
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800ba92:	8360      	strh	r0, [r4, #26]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 800ba94:	2002      	movs	r0, #2
 800ba96:	f7ff fae7 	bl	800b068 <VL53L1_i2c_decode_uint16_t>
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 800ba9a:	f105 011e 	add.w	r1, r5, #30
	pdata->result__ambient_count_rate_mcps_sd1 =
 800ba9e:	83a0      	strh	r0, [r4, #28]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 800baa0:	2002      	movs	r0, #2
 800baa2:	f7ff fae1 	bl	800b068 <VL53L1_i2c_decode_uint16_t>
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 800baa6:	f105 0120 	add.w	r1, r5, #32
	pdata->result__sigma_sd1 =
 800baaa:	83e0      	strh	r0, [r4, #30]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 800baac:	2002      	movs	r0, #2
 800baae:	f7ff fadb 	bl	800b068 <VL53L1_i2c_decode_uint16_t>
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 800bab2:	f105 0122 	add.w	r1, r5, #34	; 0x22
	pdata->result__phase_sd1 =
 800bab6:	8420      	strh	r0, [r4, #32]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 800bab8:	2002      	movs	r0, #2
 800baba:	f7ff fad5 	bl	800b068 <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 800babe:	f105 0124 	add.w	r1, r5, #36	; 0x24
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800bac2:	8460      	strh	r0, [r4, #34]	; 0x22
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 800bac4:	2002      	movs	r0, #2
 800bac6:	f7ff facf 	bl	800b068 <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 800baca:	f105 0126 	add.w	r1, r5, #38	; 0x26
	pdata->result__spare_0_sd1 =
 800bace:	84a0      	strh	r0, [r4, #36]	; 0x24
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 800bad0:	2002      	movs	r0, #2
 800bad2:	f7ff fac9 	bl	800b068 <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 800bad6:	f105 0128 	add.w	r1, r5, #40	; 0x28
	pdata->result__spare_1_sd1 =
 800bada:	84e0      	strh	r0, [r4, #38]	; 0x26
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 800badc:	2002      	movs	r0, #2
 800bade:	f7ff fac3 	bl	800b068 <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_2_sd1 =
 800bae2:	8520      	strh	r0, [r4, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 800bae4:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 800bae8:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800baec:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800baf0:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800baf4:	2000      	movs	r0, #0
 800baf6:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800baf8:	f06f 0009 	mvn.w	r0, #9
 800bafc:	4770      	bx	lr
 800bafe:	bf00      	nop

0800bb00 <VL53L1_i2c_decode_core_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 800bb00:	2820      	cmp	r0, #32
 800bb02:	d935      	bls.n	800bb70 <VL53L1_i2c_decode_core_results+0x70>
{
 800bb04:	b538      	push	{r3, r4, r5, lr}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 800bb06:	2004      	movs	r0, #4
 800bb08:	4614      	mov	r4, r2
 800bb0a:	460d      	mov	r5, r1
 800bb0c:	f7ff fae8 	bl	800b0e0 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 800bb10:	1d29      	adds	r1, r5, #4
	pdata->result_core__ambient_window_events_sd0 =
 800bb12:	6020      	str	r0, [r4, #0]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 800bb14:	2004      	movs	r0, #4
 800bb16:	f7ff fae3 	bl	800b0e0 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 800bb1a:	f105 0108 	add.w	r1, r5, #8
	pdata->result_core__ranging_total_events_sd0 =
 800bb1e:	6060      	str	r0, [r4, #4]
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 800bb20:	2004      	movs	r0, #4
 800bb22:	f7ff faeb 	bl	800b0fc <VL53L1_i2c_decode_int32_t>
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 800bb26:	f105 010c 	add.w	r1, r5, #12
	pdata->result_core__signal_total_events_sd0 =
 800bb2a:	60a0      	str	r0, [r4, #8]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 800bb2c:	2004      	movs	r0, #4
 800bb2e:	f7ff fad7 	bl	800b0e0 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 800bb32:	f105 0110 	add.w	r1, r5, #16
	pdata->result_core__total_periods_elapsed_sd0 =
 800bb36:	60e0      	str	r0, [r4, #12]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 800bb38:	2004      	movs	r0, #4
 800bb3a:	f7ff fad1 	bl	800b0e0 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 800bb3e:	f105 0114 	add.w	r1, r5, #20
	pdata->result_core__ambient_window_events_sd1 =
 800bb42:	6120      	str	r0, [r4, #16]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 800bb44:	2004      	movs	r0, #4
 800bb46:	f7ff facb 	bl	800b0e0 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 800bb4a:	f105 0118 	add.w	r1, r5, #24
	pdata->result_core__ranging_total_events_sd1 =
 800bb4e:	6160      	str	r0, [r4, #20]
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 800bb50:	2004      	movs	r0, #4
 800bb52:	f7ff fad3 	bl	800b0fc <VL53L1_i2c_decode_int32_t>
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 800bb56:	f105 011c 	add.w	r1, r5, #28
	pdata->result_core__signal_total_events_sd1 =
 800bb5a:	61a0      	str	r0, [r4, #24]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 800bb5c:	2004      	movs	r0, #4
 800bb5e:	f7ff fabf 	bl	800b0e0 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__total_periods_elapsed_sd1 =
 800bb62:	61e0      	str	r0, [r4, #28]
	pdata->result_core__spare_0 =
 800bb64:	f895 3020 	ldrb.w	r3, [r5, #32]
 800bb68:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800bb6c:	2000      	movs	r0, #0
 800bb6e:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800bb70:	f06f 0009 	mvn.w	r0, #9
 800bb74:	4770      	bx	lr
 800bb76:	bf00      	nop

0800bb78 <VL53L1_i2c_decode_debug_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 800bb78:	2837      	cmp	r0, #55	; 0x37
 800bb7a:	f240 80d3 	bls.w	800bd24 <VL53L1_i2c_decode_debug_results+0x1ac>
{
 800bb7e:	b538      	push	{r3, r4, r5, lr}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 800bb80:	2002      	movs	r0, #2
 800bb82:	4614      	mov	r4, r2
 800bb84:	460d      	mov	r5, r1
 800bb86:	f7ff fa6f 	bl	800b068 <VL53L1_i2c_decode_uint16_t>
	pdata->phasecal_result__reference_phase =
 800bb8a:	8020      	strh	r0, [r4, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800bb8c:	78ab      	ldrb	r3, [r5, #2]
 800bb8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->phasecal_result__vcsel_start =
 800bb92:	70a3      	strb	r3, [r4, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800bb94:	78eb      	ldrb	r3, [r5, #3]
 800bb96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800bb9a:	70e3      	strb	r3, [r4, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800bb9c:	792b      	ldrb	r3, [r5, #4]
 800bb9e:	f003 0303 	and.w	r3, r3, #3
	pdata->ref_spad_char_result__ref_location =
 800bba2:	7123      	strb	r3, [r4, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 800bba4:	796b      	ldrb	r3, [r5, #5]
 800bba6:	f003 0301 	and.w	r3, r3, #1
	pdata->vhv_result__coldboot_status =
 800bbaa:	7163      	strb	r3, [r4, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 800bbac:	79ab      	ldrb	r3, [r5, #6]
 800bbae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_result__search_result =
 800bbb2:	71a3      	strb	r3, [r4, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 800bbb4:	79eb      	ldrb	r3, [r5, #7]
 800bbb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_result__latest_setting =
 800bbba:	71e3      	strb	r3, [r4, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 800bbbc:	f105 0108 	add.w	r1, r5, #8
 800bbc0:	2002      	movs	r0, #2
 800bbc2:	f7ff fa51 	bl	800b068 <VL53L1_i2c_decode_uint16_t>
 800bbc6:	f3c0 0009 	ubfx	r0, r0, #0, #10
	pdata->result__osc_calibrate_val =
 800bbca:	8120      	strh	r0, [r4, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 800bbcc:	7aab      	ldrb	r3, [r5, #10]
 800bbce:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__powerdown_go1 =
 800bbd2:	72a3      	strb	r3, [r4, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 800bbd4:	7aeb      	ldrb	r3, [r5, #11]
 800bbd6:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__ref_bg_ctrl =
 800bbda:	72e3      	strb	r3, [r4, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 800bbdc:	7b2b      	ldrb	r3, [r5, #12]
 800bbde:	f003 030f 	and.w	r3, r3, #15
	pdata->ana_config__regdvdd1v2_ctrl =
 800bbe2:	7323      	strb	r3, [r4, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 800bbe4:	7b6b      	ldrb	r3, [r5, #13]
 800bbe6:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__osc_slow_ctrl =
 800bbea:	7363      	strb	r3, [r4, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 800bbec:	7bab      	ldrb	r3, [r5, #14]
 800bbee:	f003 0301 	and.w	r3, r3, #1
	pdata->test_mode__status =
 800bbf2:	73a3      	strb	r3, [r4, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 800bbf4:	7beb      	ldrb	r3, [r5, #15]
 800bbf6:	f003 0303 	and.w	r3, r3, #3
	pdata->firmware__system_status =
 800bbfa:	73e3      	strb	r3, [r4, #15]
	pdata->firmware__mode_status =
 800bbfc:	7c2b      	ldrb	r3, [r5, #16]
 800bbfe:	7423      	strb	r3, [r4, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 800bc00:	7c6b      	ldrb	r3, [r5, #17]
 800bc02:	7463      	strb	r3, [r4, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 800bc04:	f105 0112 	add.w	r1, r5, #18
 800bc08:	2002      	movs	r0, #2
 800bc0a:	f7ff fa2d 	bl	800b068 <VL53L1_i2c_decode_uint16_t>
 800bc0e:	f3c0 000b 	ubfx	r0, r0, #0, #12
	pdata->firmware__cal_repeat_rate_counter =
 800bc12:	8260      	strh	r0, [r4, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800bc14:	f105 0116 	add.w	r1, r5, #22
 800bc18:	2002      	movs	r0, #2
 800bc1a:	f7ff fa25 	bl	800b068 <VL53L1_i2c_decode_uint16_t>
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800bc1e:	f105 0118 	add.w	r1, r5, #24
	pdata->gph__system__thresh_high =
 800bc22:	82a0      	strh	r0, [r4, #20]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800bc24:	2002      	movs	r0, #2
 800bc26:	f7ff fa1f 	bl	800b068 <VL53L1_i2c_decode_uint16_t>
	pdata->gph__system__thresh_low =
 800bc2a:	82e0      	strh	r0, [r4, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 800bc2c:	7eab      	ldrb	r3, [r5, #26]
 800bc2e:	f003 0301 	and.w	r3, r3, #1
	pdata->gph__system__enable_xtalk_per_quadrant =
 800bc32:	7623      	strb	r3, [r4, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 800bc34:	7eeb      	ldrb	r3, [r5, #27]
 800bc36:	f003 0307 	and.w	r3, r3, #7
	pdata->gph__spare_0 =
 800bc3a:	7663      	strb	r3, [r4, #25]
	pdata->gph__sd_config__woi_sd0 =
 800bc3c:	7f2b      	ldrb	r3, [r5, #28]
 800bc3e:	76a3      	strb	r3, [r4, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 800bc40:	7f6b      	ldrb	r3, [r5, #29]
 800bc42:	76e3      	strb	r3, [r4, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 800bc44:	7fab      	ldrb	r3, [r5, #30]
 800bc46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->gph__sd_config__initial_phase_sd0 =
 800bc4a:	7723      	strb	r3, [r4, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800bc4c:	7feb      	ldrb	r3, [r5, #31]
 800bc4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->gph__sd_config__initial_phase_sd1 =
 800bc52:	7763      	strb	r3, [r4, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 800bc54:	f895 3020 	ldrb.w	r3, [r5, #32]
 800bc58:	f003 0303 	and.w	r3, r3, #3
	pdata->gph__sd_config__first_order_select =
 800bc5c:	77a3      	strb	r3, [r4, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 800bc5e:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800bc62:	f003 030f 	and.w	r3, r3, #15
	pdata->gph__sd_config__quantifier =
 800bc66:	77e3      	strb	r3, [r4, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 800bc68:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800bc6c:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 800bc70:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 800bc74:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 800bc78:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800bc7c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 800bc80:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 800bc84:	f003 0301 	and.w	r3, r3, #1
	pdata->gph__gph_id =
 800bc88:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 800bc8c:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 800bc90:	f003 0303 	and.w	r3, r3, #3
	pdata->system__interrupt_set =
 800bc94:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 800bc98:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
 800bc9c:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__enables =
 800bca0:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 800bca4:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800bca8:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__clear =
 800bcac:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 800bcb0:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 800bcb4:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__status =
 800bcb8:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 800bcbc:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 800bcc0:	f003 0301 	and.w	r3, r3, #1
	pdata->mcu_to_host_bank__wr_access_en =
 800bcc4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 800bcc8:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800bccc:	f003 0301 	and.w	r3, r3, #1
	pdata->power_management__go1_reset_status =
 800bcd0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 800bcd4:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800bcd8:	f003 0303 	and.w	r3, r3, #3
	pdata->pad_startup_mode__value_ro =
 800bcdc:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 800bce0:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800bce4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->pad_startup_mode__value_ctrl =
 800bce8:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 800bcec:	f105 012e 	add.w	r1, r5, #46	; 0x2e
 800bcf0:	2004      	movs	r0, #4
 800bcf2:	f7ff f9f5 	bl	800b0e0 <VL53L1_i2c_decode_uint32_t>
 800bcf6:	f3c0 0011 	ubfx	r0, r0, #0, #18
	pdata->pll_period_us =
 800bcfa:	62e0      	str	r0, [r4, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 800bcfc:	f105 0132 	add.w	r1, r5, #50	; 0x32
 800bd00:	2004      	movs	r0, #4
 800bd02:	f7ff f9ed 	bl	800b0e0 <VL53L1_i2c_decode_uint32_t>
	pdata->interrupt_scheduler__data_out =
 800bd06:	6320      	str	r0, [r4, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 800bd08:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
 800bd0c:	f003 0301 	and.w	r3, r3, #1
	pdata->nvm_bist__complete =
 800bd10:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 800bd14:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
 800bd18:	f003 0301 	and.w	r3, r3, #1
	pdata->nvm_bist__status =
 800bd1c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 800bd20:	2000      	movs	r0, #0
 800bd22:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800bd24:	f06f 0009 	mvn.w	r0, #9
 800bd28:	4770      	bx	lr
 800bd2a:	bf00      	nop

0800bd2c <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800bd2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd30:	b08e      	sub	sp, #56	; 0x38
 800bd32:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_ReadMulti(
 800bd34:	2331      	movs	r3, #49	; 0x31
 800bd36:	aa01      	add	r2, sp, #4
 800bd38:	f240 110f 	movw	r1, #271	; 0x10f
 800bd3c:	f005 fefe 	bl	8011b3c <VL53L1_ReadMulti>
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800bd40:	4605      	mov	r5, r0
 800bd42:	2800      	cmp	r0, #0
 800bd44:	d16c      	bne.n	800be20 <VL53L1_get_nvm_copy_data+0xf4>
	pdata->identification__model_id =
 800bd46:	f89d 1004 	ldrb.w	r1, [sp, #4]
	pdata->identification__module_type =
 800bd4a:	f89d 2005 	ldrb.w	r2, [sp, #5]
	pdata->identification__revision_id =
 800bd4e:	f89d 3006 	ldrb.w	r3, [sp, #6]
	pdata->identification__model_id =
 800bd52:	7021      	strb	r1, [r4, #0]
	pdata->identification__module_type =
 800bd54:	7062      	strb	r2, [r4, #1]
	pdata->identification__revision_id =
 800bd56:	70a3      	strb	r3, [r4, #2]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 800bd58:	f10d 0107 	add.w	r1, sp, #7
 800bd5c:	2002      	movs	r0, #2
 800bd5e:	f7ff f983 	bl	800b068 <VL53L1_i2c_decode_uint16_t>
		(*(pbuffer +   6)) & 0x7;
 800bd62:	f89d 800a 	ldrb.w	r8, [sp, #10]
		(*(pbuffer +   7)) & 0x7;
 800bd66:	f89d c00b 	ldrb.w	ip, [sp, #11]
		(*(pbuffer +   5)) & 0x7F;
 800bd6a:	f89d 9009 	ldrb.w	r9, [sp, #9]
		(*(pbuffer +   8)) & 0x3F;
 800bd6e:	f89d e00c 	ldrb.w	lr, [sp, #12]
		(*(pbuffer +   9)) & 0x3F;
 800bd72:	f89d 700d 	ldrb.w	r7, [sp, #13]
		(*(pbuffer +  10)) & 0x1;
 800bd76:	f89d 600e 	ldrb.w	r6, [sp, #14]
		(*(pbuffer +  11)) & 0x7F;
 800bd7a:	f89d a00f 	ldrb.w	sl, [sp, #15]
		(*(pbuffer +  12)) & 0x1;
 800bd7e:	f89d 1010 	ldrb.w	r1, [sp, #16]
		(*(pbuffer +  13)) & 0x3F;
 800bd82:	f89d 2011 	ldrb.w	r2, [sp, #17]
		(*(pbuffer +  14)) & 0x3F;
 800bd86:	f89d 3012 	ldrb.w	r3, [sp, #18]
	pdata->identification__module_id =
 800bd8a:	80a0      	strh	r0, [r4, #4]
		(*(pbuffer +   6)) & 0x7;
 800bd8c:	f008 0807 	and.w	r8, r8, #7
		(*(pbuffer +   7)) & 0x7;
 800bd90:	f00c 0c07 	and.w	ip, ip, #7
		(*(pbuffer +   8)) & 0x3F;
 800bd94:	f00e 0e3f 	and.w	lr, lr, #63	; 0x3f
		(*(pbuffer +   9)) & 0x3F;
 800bd98:	f007 073f 	and.w	r7, r7, #63	; 0x3f
		(*(pbuffer +  10)) & 0x1;
 800bd9c:	f006 0601 	and.w	r6, r6, #1
		(*(pbuffer +  11)) & 0x7F;
 800bda0:	f00a 007f 	and.w	r0, sl, #127	; 0x7f
		(*(pbuffer +  12)) & 0x1;
 800bda4:	f001 0101 	and.w	r1, r1, #1
		(*(pbuffer +  13)) & 0x3F;
 800bda8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
		(*(pbuffer +  14)) & 0x3F;
 800bdac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ana_config__fast_osc__freq_set =
 800bdb0:	f884 8007 	strb.w	r8, [r4, #7]
	pdata->ana_config__vcsel_trim =
 800bdb4:	f884 c008 	strb.w	ip, [r4, #8]
	pdata->global_config__spad_enables_rtn_0 =
 800bdb8:	f89d 8013 	ldrb.w	r8, [sp, #19]
	pdata->global_config__spad_enables_rtn_1 =
 800bdbc:	f89d c014 	ldrb.w	ip, [sp, #20]
	pdata->ana_config__vcsel_selion =
 800bdc0:	f884 e009 	strb.w	lr, [r4, #9]
		(*(pbuffer +   5)) & 0x7F;
 800bdc4:	f009 097f 	and.w	r9, r9, #127	; 0x7f
	pdata->ana_config__vcsel_selion_max =
 800bdc8:	72a7      	strb	r7, [r4, #10]
	pdata->protected_laser_safety__lock_bit =
 800bdca:	72e6      	strb	r6, [r4, #11]
	pdata->laser_safety__key =
 800bdcc:	7320      	strb	r0, [r4, #12]
	pdata->laser_safety__key_ro =
 800bdce:	7361      	strb	r1, [r4, #13]
	pdata->laser_safety__clip =
 800bdd0:	73a2      	strb	r2, [r4, #14]
	pdata->laser_safety__mult =
 800bdd2:	73e3      	strb	r3, [r4, #15]
	pdata->global_config__spad_enables_rtn_2 =
 800bdd4:	f8dd e019 	ldr.w	lr, [sp, #25]
 800bdd8:	f8dd 701d 	ldr.w	r7, [sp, #29]
 800bddc:	f8dd 6021 	ldr.w	r6, [sp, #33]	; 0x21
 800bde0:	f8dd 0025 	ldr.w	r0, [sp, #37]	; 0x25
 800bde4:	f8dd 1029 	ldr.w	r1, [sp, #41]	; 0x29
 800bde8:	f8dd 202d 	ldr.w	r2, [sp, #45]	; 0x2d
 800bdec:	f8dd 3031 	ldr.w	r3, [sp, #49]	; 0x31
	pdata->ana_config__fast_osc__trim_max =
 800bdf0:	f884 9006 	strb.w	r9, [r4, #6]
	pdata->global_config__spad_enables_rtn_0 =
 800bdf4:	f884 8010 	strb.w	r8, [r4, #16]
	pdata->global_config__spad_enables_rtn_1 =
 800bdf8:	f884 c011 	strb.w	ip, [r4, #17]
	pdata->global_config__spad_enables_rtn_2 =
 800bdfc:	f8dd c015 	ldr.w	ip, [sp, #21]
 800be00:	f8c4 c012 	str.w	ip, [r4, #18]
 800be04:	f8c4 e016 	str.w	lr, [r4, #22]
 800be08:	f8c4 701a 	str.w	r7, [r4, #26]
 800be0c:	f8c4 601e 	str.w	r6, [r4, #30]
 800be10:	f8c4 0022 	str.w	r0, [r4, #34]	; 0x22
 800be14:	f8c4 1026 	str.w	r1, [r4, #38]	; 0x26
 800be18:	f8c4 202a 	str.w	r2, [r4, #42]	; 0x2a
 800be1c:	f8c4 302e 	str.w	r3, [r4, #46]	; 0x2e
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 800be20:	4628      	mov	r0, r5
 800be22:	b00e      	add	sp, #56	; 0x38
 800be24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800be28 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 800be28:	b570      	push	{r4, r5, r6, lr}
 800be2a:	460e      	mov	r6, r1
 800be2c:	b082      	sub	sp, #8
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 800be2e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
{
 800be32:	4605      	mov	r5, r0
	status = VL53L1_WaitUs(
 800be34:	f005 fee8 	bl	8011c08 <VL53L1_WaitUs>
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 800be38:	4604      	mov	r4, r0
 800be3a:	b110      	cbz	r0, 800be42 <VL53L1_poll_for_boot_completion+0x1a>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);

	LOG_FUNCTION_END(status);

	return status;
}
 800be3c:	4620      	mov	r0, r4
 800be3e:	b002      	add	sp, #8
 800be40:	bd70      	pop	{r4, r5, r6, pc}
		status =
 800be42:	2301      	movs	r3, #1
 800be44:	4631      	mov	r1, r6
 800be46:	9301      	str	r3, [sp, #4]
 800be48:	9300      	str	r3, [sp, #0]
 800be4a:	22e5      	movs	r2, #229	; 0xe5
 800be4c:	4628      	mov	r0, r5
 800be4e:	f005 fee9 	bl	8011c24 <VL53L1_WaitValueMaskEx>
	if (status == VL53L1_ERROR_NONE)
 800be52:	4604      	mov	r4, r0
 800be54:	2800      	cmp	r0, #0
 800be56:	d1f1      	bne.n	800be3c <VL53L1_poll_for_boot_completion+0x14>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 800be58:	4628      	mov	r0, r5
 800be5a:	2103      	movs	r1, #3
 800be5c:	f7fe ffde 	bl	800ae1c <VL53L1_init_ll_driver_state>
}
 800be60:	4620      	mov	r0, r4
 800be62:	b002      	add	sp, #8
 800be64:	bd70      	pop	{r4, r5, r6, pc}
 800be66:	bf00      	nop

0800be68 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800be68:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800be6a:	f001 fdc1 	bl	800d9f0 <vTaskStartScheduler>
  
  return osOK;
}
 800be6e:	2000      	movs	r0, #0
 800be70:	bd08      	pop	{r3, pc}
 800be72:	bf00      	nop

0800be74 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800be74:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be76:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 800be7a:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 800be7c:	2c84      	cmp	r4, #132	; 0x84
{
 800be7e:	4602      	mov	r2, r0
    fpriority += (priority - osPriorityIdle);
 800be80:	bf14      	ite	ne
 800be82:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800be84:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be86:	ad03      	add	r5, sp, #12
{
 800be88:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be8a:	6840      	ldr	r0, [r0, #4]
 800be8c:	6811      	ldr	r1, [r2, #0]
 800be8e:	8a12      	ldrh	r2, [r2, #16]
 800be90:	e88d 0030 	stmia.w	sp, {r4, r5}
 800be94:	f001 fcbc 	bl	800d810 <xTaskCreate>
 800be98:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800be9a:	bf0c      	ite	eq
 800be9c:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 800be9e:	2000      	movne	r0, #0
}
 800bea0:	b005      	add	sp, #20
 800bea2:	bd30      	pop	{r4, r5, pc}

0800bea4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bea4:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bea6:	2800      	cmp	r0, #0
 800bea8:	bf08      	it	eq
 800beaa:	2001      	moveq	r0, #1
 800beac:	f001 ff28 	bl	800dd00 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800beb0:	2000      	movs	r0, #0
 800beb2:	bd08      	pop	{r3, pc}

0800beb4 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800beb4:	b500      	push	{lr}
 800beb6:	b083      	sub	sp, #12
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
                      (StaticTimer_t *)timer_def->controlblock);  
#else
  return xTimerCreate((const char *)"",
 800beb8:	6803      	ldr	r3, [r0, #0]
 800beba:	9300      	str	r3, [sp, #0]
 800bebc:	4613      	mov	r3, r2
 800bebe:	f1a1 0201 	sub.w	r2, r1, #1
 800bec2:	fab2 f282 	clz	r2, r2
 800bec6:	0952      	lsrs	r2, r2, #5
 800bec8:	2101      	movs	r1, #1
 800beca:	4803      	ldr	r0, [pc, #12]	; (800bed8 <osTimerCreate+0x24>)
 800becc:	f002 fa94 	bl	800e3f8 <xTimerCreate>
#endif

#else 
	return NULL;
#endif
}
 800bed0:	b003      	add	sp, #12
 800bed2:	f85d fb04 	ldr.w	pc, [sp], #4
 800bed6:	bf00      	nop
 800bed8:	08014518 	.word	0x08014518

0800bedc <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 800bedc:	b510      	push	{r4, lr}
 800bede:	b084      	sub	sp, #16
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800bee0:	2400      	movs	r4, #0
  TickType_t ticks = millisec / portTICK_PERIOD_MS;

  if (ticks == 0)
    ticks = 1;
 800bee2:	42a1      	cmp	r1, r4
 800bee4:	bf14      	ite	ne
 800bee6:	460a      	movne	r2, r1
 800bee8:	2201      	moveq	r2, #1
  portBASE_TYPE taskWoken = pdFALSE;
 800beea:	9403      	str	r4, [sp, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800beec:	f3ef 8305 	mrs	r3, IPSR
    
  if (inHandlerMode()) 
 800bef0:	b14b      	cbz	r3, 800bf06 <osTimerStart+0x2a>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800bef2:	9400      	str	r4, [sp, #0]
 800bef4:	ab03      	add	r3, sp, #12
 800bef6:	2109      	movs	r1, #9
 800bef8:	f002 fad6 	bl	800e4a8 <xTimerGenericCommand>
 800befc:	2801      	cmp	r0, #1
 800befe:	d00b      	beq.n	800bf18 <osTimerStart+0x3c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
      result = osErrorOS;
 800bf00:	20ff      	movs	r0, #255	; 0xff

#else 
  result = osErrorOS;
#endif
  return result;
}
 800bf02:	b004      	add	sp, #16
 800bf04:	bd10      	pop	{r4, pc}
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800bf06:	9300      	str	r3, [sp, #0]
 800bf08:	2104      	movs	r1, #4
 800bf0a:	f002 facd 	bl	800e4a8 <xTimerGenericCommand>
 800bf0e:	2801      	cmp	r0, #1
 800bf10:	d1f6      	bne.n	800bf00 <osTimerStart+0x24>
  osStatus result = osOK;
 800bf12:	2000      	movs	r0, #0
}
 800bf14:	b004      	add	sp, #16
 800bf16:	bd10      	pop	{r4, pc}
      portEND_SWITCHING_ISR(taskWoken);     
 800bf18:	9b03      	ldr	r3, [sp, #12]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d0f9      	beq.n	800bf12 <osTimerStart+0x36>
 800bf1e:	4b05      	ldr	r3, [pc, #20]	; (800bf34 <osTimerStart+0x58>)
 800bf20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf24:	601a      	str	r2, [r3, #0]
 800bf26:	f3bf 8f4f 	dsb	sy
 800bf2a:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 800bf2e:	4620      	mov	r0, r4
 800bf30:	e7e7      	b.n	800bf02 <osTimerStart+0x26>
 800bf32:	bf00      	nop
 800bf34:	e000ed04 	.word	0xe000ed04

0800bf38 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 800bf38:	b510      	push	{r4, lr}
 800bf3a:	b084      	sub	sp, #16
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800bf3c:	2400      	movs	r4, #0
 800bf3e:	9403      	str	r4, [sp, #12]
 800bf40:	f3ef 8305 	mrs	r3, IPSR

  if (inHandlerMode()) {
 800bf44:	b153      	cbz	r3, 800bf5c <osTimerStop+0x24>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 800bf46:	9400      	str	r4, [sp, #0]
 800bf48:	ab03      	add	r3, sp, #12
 800bf4a:	4622      	mov	r2, r4
 800bf4c:	2108      	movs	r1, #8
 800bf4e:	f002 faab 	bl	800e4a8 <xTimerGenericCommand>
 800bf52:	2801      	cmp	r0, #1
 800bf54:	d00c      	beq.n	800bf70 <osTimerStop+0x38>
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
      result = osErrorOS;
 800bf56:	20ff      	movs	r0, #255	; 0xff
  }
#else 
  result = osErrorOS;
#endif 
  return result;
}
 800bf58:	b004      	add	sp, #16
 800bf5a:	bd10      	pop	{r4, pc}
    if (xTimerStop(timer_id, 0) != pdPASS) {
 800bf5c:	9300      	str	r3, [sp, #0]
 800bf5e:	461a      	mov	r2, r3
 800bf60:	2103      	movs	r1, #3
 800bf62:	f002 faa1 	bl	800e4a8 <xTimerGenericCommand>
 800bf66:	2801      	cmp	r0, #1
 800bf68:	d1f5      	bne.n	800bf56 <osTimerStop+0x1e>
  osStatus result = osOK;
 800bf6a:	2000      	movs	r0, #0
}
 800bf6c:	b004      	add	sp, #16
 800bf6e:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800bf70:	9b03      	ldr	r3, [sp, #12]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d0f9      	beq.n	800bf6a <osTimerStop+0x32>
 800bf76:	4b05      	ldr	r3, [pc, #20]	; (800bf8c <osTimerStop+0x54>)
 800bf78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf7c:	601a      	str	r2, [r3, #0]
 800bf7e:	f3bf 8f4f 	dsb	sy
 800bf82:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 800bf86:	4620      	mov	r0, r4
 800bf88:	e7e6      	b.n	800bf58 <osTimerStop+0x20>
 800bf8a:	bf00      	nop
 800bf8c:	e000ed04 	.word	0xe000ed04

0800bf90 <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800bf90:	2001      	movs	r0, #1
 800bf92:	f000 bc81 	b.w	800c898 <xQueueCreateMutex>
 800bf96:	bf00      	nop

0800bf98 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800bf98:	b510      	push	{r4, lr}
 800bf9a:	b082      	sub	sp, #8
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800bf9c:	2400      	movs	r4, #0
 800bf9e:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 800bfa0:	b1d8      	cbz	r0, 800bfda <osMutexWait+0x42>
 800bfa2:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800bfa6:	b933      	cbnz	r3, 800bfb6 <osMutexWait+0x1e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800bfa8:	f001 f978 	bl	800d29c <xQueueSemaphoreTake>
 800bfac:	2801      	cmp	r0, #1
 800bfae:	d017      	beq.n	800bfe0 <osMutexWait+0x48>
      return osErrorOS;
 800bfb0:	20ff      	movs	r0, #255	; 0xff
    return osErrorOS;
  }
  
  return osOK;
}
 800bfb2:	b002      	add	sp, #8
 800bfb4:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800bfb6:	aa01      	add	r2, sp, #4
 800bfb8:	4621      	mov	r1, r4
 800bfba:	f001 facb 	bl	800d554 <xQueueReceiveFromISR>
 800bfbe:	2801      	cmp	r0, #1
 800bfc0:	d1f6      	bne.n	800bfb0 <osMutexWait+0x18>
	portEND_SWITCHING_ISR(taskWoken);
 800bfc2:	9b01      	ldr	r3, [sp, #4]
 800bfc4:	b163      	cbz	r3, 800bfe0 <osMutexWait+0x48>
 800bfc6:	4b07      	ldr	r3, [pc, #28]	; (800bfe4 <osMutexWait+0x4c>)
 800bfc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfcc:	601a      	str	r2, [r3, #0]
 800bfce:	f3bf 8f4f 	dsb	sy
 800bfd2:	f3bf 8f6f 	isb	sy
  return osOK;
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	e7eb      	b.n	800bfb2 <osMutexWait+0x1a>
    return osErrorParameter;
 800bfda:	2080      	movs	r0, #128	; 0x80
}
 800bfdc:	b002      	add	sp, #8
 800bfde:	bd10      	pop	{r4, pc}
  return osOK;
 800bfe0:	2000      	movs	r0, #0
 800bfe2:	e7e6      	b.n	800bfb2 <osMutexWait+0x1a>
 800bfe4:	e000ed04 	.word	0xe000ed04

0800bfe8 <osMutexRelease>:
 800bfe8:	b510      	push	{r4, lr}
 800bfea:	b082      	sub	sp, #8
 800bfec:	2400      	movs	r4, #0
 800bfee:	9401      	str	r4, [sp, #4]
 800bff0:	f3ef 8305 	mrs	r3, IPSR
 800bff4:	b13b      	cbz	r3, 800c006 <osMutexRelease+0x1e>
 800bff6:	a901      	add	r1, sp, #4
 800bff8:	f000 ff74 	bl	800cee4 <xQueueGiveFromISR>
 800bffc:	2801      	cmp	r0, #1
 800bffe:	d00b      	beq.n	800c018 <osMutexRelease+0x30>
 800c000:	20ff      	movs	r0, #255	; 0xff
 800c002:	b002      	add	sp, #8
 800c004:	bd10      	pop	{r4, pc}
 800c006:	461a      	mov	r2, r3
 800c008:	4619      	mov	r1, r3
 800c00a:	f000 fdb1 	bl	800cb70 <xQueueGenericSend>
 800c00e:	2801      	cmp	r0, #1
 800c010:	d1f6      	bne.n	800c000 <osMutexRelease+0x18>
 800c012:	2000      	movs	r0, #0
 800c014:	b002      	add	sp, #8
 800c016:	bd10      	pop	{r4, pc}
 800c018:	9b01      	ldr	r3, [sp, #4]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d0f9      	beq.n	800c012 <osMutexRelease+0x2a>
 800c01e:	4b05      	ldr	r3, [pc, #20]	; (800c034 <osMutexRelease+0x4c>)
 800c020:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c024:	601a      	str	r2, [r3, #0]
 800c026:	f3bf 8f4f 	dsb	sy
 800c02a:	f3bf 8f6f 	isb	sy
 800c02e:	4620      	mov	r0, r4
 800c030:	e7e7      	b.n	800c002 <osMutexRelease+0x1a>
 800c032:	bf00      	nop
 800c034:	e000ed04 	.word	0xe000ed04

0800c038 <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800c038:	2901      	cmp	r1, #1
{ 
 800c03a:	4608      	mov	r0, r1
  if (count == 1) {
 800c03c:	d001      	beq.n	800c042 <osSemaphoreCreate+0xa>
    vSemaphoreCreateBinary(sema);
    return sema;
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 800c03e:	f000 bd79 	b.w	800cb34 <xQueueCreateCountingSemaphore>
{ 
 800c042:	b510      	push	{r4, lr}
    vSemaphoreCreateBinary(sema);
 800c044:	2203      	movs	r2, #3
 800c046:	2100      	movs	r1, #0
 800c048:	f000 fbea 	bl	800c820 <xQueueGenericCreate>
 800c04c:	4604      	mov	r4, r0
 800c04e:	b120      	cbz	r0, 800c05a <osSemaphoreCreate+0x22>
 800c050:	2300      	movs	r3, #0
 800c052:	461a      	mov	r2, r3
 800c054:	4619      	mov	r1, r3
 800c056:	f000 fd8b 	bl	800cb70 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 800c05a:	4620      	mov	r0, r4
 800c05c:	bd10      	pop	{r4, pc}
 800c05e:	bf00      	nop

0800c060 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c060:	b510      	push	{r4, lr}
 800c062:	b082      	sub	sp, #8
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c064:	2400      	movs	r4, #0
 800c066:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800c068:	b1d8      	cbz	r0, 800c0a2 <osSemaphoreWait+0x42>
 800c06a:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800c06e:	b933      	cbnz	r3, 800c07e <osSemaphoreWait+0x1e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800c070:	f001 f914 	bl	800d29c <xQueueSemaphoreTake>
 800c074:	2801      	cmp	r0, #1
 800c076:	d017      	beq.n	800c0a8 <osSemaphoreWait+0x48>
      return osErrorOS;
 800c078:	20ff      	movs	r0, #255	; 0xff
    return osErrorOS;
  }
  
  return osOK;
}
 800c07a:	b002      	add	sp, #8
 800c07c:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c07e:	aa01      	add	r2, sp, #4
 800c080:	4621      	mov	r1, r4
 800c082:	f001 fa67 	bl	800d554 <xQueueReceiveFromISR>
 800c086:	2801      	cmp	r0, #1
 800c088:	d1f6      	bne.n	800c078 <osSemaphoreWait+0x18>
	portEND_SWITCHING_ISR(taskWoken);
 800c08a:	9b01      	ldr	r3, [sp, #4]
 800c08c:	b163      	cbz	r3, 800c0a8 <osSemaphoreWait+0x48>
 800c08e:	4b07      	ldr	r3, [pc, #28]	; (800c0ac <osSemaphoreWait+0x4c>)
 800c090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c094:	601a      	str	r2, [r3, #0]
 800c096:	f3bf 8f4f 	dsb	sy
 800c09a:	f3bf 8f6f 	isb	sy
  return osOK;
 800c09e:	4620      	mov	r0, r4
 800c0a0:	e7eb      	b.n	800c07a <osSemaphoreWait+0x1a>
    return osErrorParameter;
 800c0a2:	2080      	movs	r0, #128	; 0x80
}
 800c0a4:	b002      	add	sp, #8
 800c0a6:	bd10      	pop	{r4, pc}
  return osOK;
 800c0a8:	2000      	movs	r0, #0
 800c0aa:	e7e6      	b.n	800c07a <osSemaphoreWait+0x1a>
 800c0ac:	e000ed04 	.word	0xe000ed04

0800c0b0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800c0b0:	b510      	push	{r4, lr}
 800c0b2:	b082      	sub	sp, #8
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800c0b4:	2400      	movs	r4, #0
 800c0b6:	9401      	str	r4, [sp, #4]
 800c0b8:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 800c0bc:	b13b      	cbz	r3, 800c0ce <osSemaphoreRelease+0x1e>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c0be:	a901      	add	r1, sp, #4
 800c0c0:	f000 ff10 	bl	800cee4 <xQueueGiveFromISR>
 800c0c4:	2801      	cmp	r0, #1
 800c0c6:	d00b      	beq.n	800c0e0 <osSemaphoreRelease+0x30>
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
      result = osErrorOS;
 800c0c8:	20ff      	movs	r0, #255	; 0xff
    }
  }
  
  return result;
}
 800c0ca:	b002      	add	sp, #8
 800c0cc:	bd10      	pop	{r4, pc}
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	f000 fd4d 	bl	800cb70 <xQueueGenericSend>
 800c0d6:	2801      	cmp	r0, #1
 800c0d8:	d1f6      	bne.n	800c0c8 <osSemaphoreRelease+0x18>
  osStatus result = osOK;
 800c0da:	2000      	movs	r0, #0
}
 800c0dc:	b002      	add	sp, #8
 800c0de:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800c0e0:	9b01      	ldr	r3, [sp, #4]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d0f9      	beq.n	800c0da <osSemaphoreRelease+0x2a>
 800c0e6:	4b05      	ldr	r3, [pc, #20]	; (800c0fc <osSemaphoreRelease+0x4c>)
 800c0e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0ec:	601a      	str	r2, [r3, #0]
 800c0ee:	f3bf 8f4f 	dsb	sy
 800c0f2:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 800c0f6:	4620      	mov	r0, r4
 800c0f8:	e7e7      	b.n	800c0ca <osSemaphoreRelease+0x1a>
 800c0fa:	bf00      	nop
 800c0fc:	e000ed04 	.word	0xe000ed04

0800c100 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c100:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c104:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c108:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c10a:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c10c:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c10e:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c110:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c112:	6103      	str	r3, [r0, #16]
 800c114:	4770      	bx	lr
 800c116:	bf00      	nop

0800c118 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800c118:	2300      	movs	r3, #0
 800c11a:	6103      	str	r3, [r0, #16]
 800c11c:	4770      	bx	lr
 800c11e:	bf00      	nop

0800c120 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800c120:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800c122:	6802      	ldr	r2, [r0, #0]
{
 800c124:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c126:	689c      	ldr	r4, [r3, #8]
 800c128:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c12a:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800c12c:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800c12e:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c130:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c132:	6099      	str	r1, [r3, #8]
}
 800c134:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pvContainer = ( void * ) pxList;
 800c138:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800c13a:	6002      	str	r2, [r0, #0]
}
 800c13c:	4770      	bx	lr
 800c13e:	bf00      	nop

0800c140 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c140:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c142:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c144:	1c6b      	adds	r3, r5, #1
 800c146:	d011      	beq.n	800c16c <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c148:	f100 0208 	add.w	r2, r0, #8
 800c14c:	e000      	b.n	800c150 <vListInsert+0x10>
 800c14e:	461a      	mov	r2, r3
 800c150:	6853      	ldr	r3, [r2, #4]
 800c152:	681c      	ldr	r4, [r3, #0]
 800c154:	42a5      	cmp	r5, r4
 800c156:	d2fa      	bcs.n	800c14e <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800c158:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800c15a:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800c15c:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c15e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c160:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800c162:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800c164:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800c166:	6004      	str	r4, [r0, #0]
}
 800c168:	bc30      	pop	{r4, r5}
 800c16a:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800c16c:	6902      	ldr	r2, [r0, #16]
 800c16e:	6853      	ldr	r3, [r2, #4]
 800c170:	e7f2      	b.n	800c158 <vListInsert+0x18>
 800c172:	bf00      	nop

0800c174 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c174:	6842      	ldr	r2, [r0, #4]
 800c176:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800c178:	6903      	ldr	r3, [r0, #16]
{
 800c17a:	b410      	push	{r4}
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c17c:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c17e:	6881      	ldr	r1, [r0, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c180:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c182:	604a      	str	r2, [r1, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 800c184:	681a      	ldr	r2, [r3, #0]
	if( pxList->pxIndex == pxItemToRemove )
 800c186:	42a0      	cmp	r0, r4
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c188:	bf08      	it	eq
 800c18a:	6059      	streq	r1, [r3, #4]
	( pxList->uxNumberOfItems )--;
 800c18c:	3a01      	subs	r2, #1
	pxItemToRemove->pvContainer = NULL;
 800c18e:	2100      	movs	r1, #0
 800c190:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800c192:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c194:	6818      	ldr	r0, [r3, #0]
}
 800c196:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c19a:	4770      	bx	lr

0800c19c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c19c:	4b0e      	ldr	r3, [pc, #56]	; (800c1d8 <prvTaskExitError+0x3c>)
 800c19e:	681b      	ldr	r3, [r3, #0]
{
 800c1a0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800c1a2:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 800c1a4:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 800c1a6:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800c1a8:	d008      	beq.n	800c1bc <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ae:	f383 8811 	msr	BASEPRI, r3
 800c1b2:	f3bf 8f6f 	isb	sy
 800c1b6:	f3bf 8f4f 	dsb	sy
 800c1ba:	e7fe      	b.n	800c1ba <prvTaskExitError+0x1e>
 800c1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c0:	f383 8811 	msr	BASEPRI, r3
 800c1c4:	f3bf 8f6f 	isb	sy
 800c1c8:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c1cc:	9b01      	ldr	r3, [sp, #4]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d0fc      	beq.n	800c1cc <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c1d2:	b002      	add	sp, #8
 800c1d4:	4770      	bx	lr
 800c1d6:	bf00      	nop
 800c1d8:	20000020 	.word	0x20000020

0800c1dc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c1dc:	4808      	ldr	r0, [pc, #32]	; (800c200 <prvPortStartFirstTask+0x24>)
 800c1de:	6800      	ldr	r0, [r0, #0]
 800c1e0:	6800      	ldr	r0, [r0, #0]
 800c1e2:	f380 8808 	msr	MSP, r0
 800c1e6:	f04f 0000 	mov.w	r0, #0
 800c1ea:	f380 8814 	msr	CONTROL, r0
 800c1ee:	b662      	cpsie	i
 800c1f0:	b661      	cpsie	f
 800c1f2:	f3bf 8f4f 	dsb	sy
 800c1f6:	f3bf 8f6f 	isb	sy
 800c1fa:	df00      	svc	0
 800c1fc:	bf00      	nop
 800c1fe:	0000      	.short	0x0000
 800c200:	e000ed08 	.word	0xe000ed08

0800c204 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c204:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c214 <vPortEnableVFP+0x10>
 800c208:	6801      	ldr	r1, [r0, #0]
 800c20a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c20e:	6001      	str	r1, [r0, #0]
 800c210:	4770      	bx	lr
 800c212:	0000      	.short	0x0000
 800c214:	e000ed88 	.word	0xe000ed88

0800c218 <pxPortInitialiseStack>:
{
 800c218:	b430      	push	{r4, r5}
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c21a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c21e:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c222:	4c07      	ldr	r4, [pc, #28]	; (800c240 <pxPortInitialiseStack+0x28>)
 800c224:	f840 4c0c 	str.w	r4, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c228:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c22c:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c230:	e900 0022 	stmdb	r0, {r1, r5}
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c234:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800c238:	bc30      	pop	{r4, r5}
 800c23a:	3844      	subs	r0, #68	; 0x44
 800c23c:	4770      	bx	lr
 800c23e:	bf00      	nop
 800c240:	0800c19d 	.word	0x0800c19d
	...

0800c250 <SVC_Handler>:
	__asm volatile (
 800c250:	4b07      	ldr	r3, [pc, #28]	; (800c270 <pxCurrentTCBConst2>)
 800c252:	6819      	ldr	r1, [r3, #0]
 800c254:	6808      	ldr	r0, [r1, #0]
 800c256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c25a:	f380 8809 	msr	PSP, r0
 800c25e:	f3bf 8f6f 	isb	sy
 800c262:	f04f 0000 	mov.w	r0, #0
 800c266:	f380 8811 	msr	BASEPRI, r0
 800c26a:	4770      	bx	lr
 800c26c:	f3af 8000 	nop.w

0800c270 <pxCurrentTCBConst2>:
 800c270:	20004f14 	.word	0x20004f14

0800c274 <vPortEnterCritical>:
 800c274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c278:	f383 8811 	msr	BASEPRI, r3
 800c27c:	f3bf 8f6f 	isb	sy
 800c280:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800c284:	4a0a      	ldr	r2, [pc, #40]	; (800c2b0 <vPortEnterCritical+0x3c>)
 800c286:	6813      	ldr	r3, [r2, #0]
 800c288:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800c28a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800c28c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800c28e:	d000      	beq.n	800c292 <vPortEnterCritical+0x1e>
 800c290:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c292:	4b08      	ldr	r3, [pc, #32]	; (800c2b4 <vPortEnterCritical+0x40>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c29a:	d0f9      	beq.n	800c290 <vPortEnterCritical+0x1c>
 800c29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a0:	f383 8811 	msr	BASEPRI, r3
 800c2a4:	f3bf 8f6f 	isb	sy
 800c2a8:	f3bf 8f4f 	dsb	sy
 800c2ac:	e7fe      	b.n	800c2ac <vPortEnterCritical+0x38>
 800c2ae:	bf00      	nop
 800c2b0:	20000020 	.word	0x20000020
 800c2b4:	e000ed04 	.word	0xe000ed04

0800c2b8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800c2b8:	4a08      	ldr	r2, [pc, #32]	; (800c2dc <vPortExitCritical+0x24>)
 800c2ba:	6813      	ldr	r3, [r2, #0]
 800c2bc:	b943      	cbnz	r3, 800c2d0 <vPortExitCritical+0x18>
 800c2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c2:	f383 8811 	msr	BASEPRI, r3
 800c2c6:	f3bf 8f6f 	isb	sy
 800c2ca:	f3bf 8f4f 	dsb	sy
 800c2ce:	e7fe      	b.n	800c2ce <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800c2d0:	3b01      	subs	r3, #1
 800c2d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c2d4:	b90b      	cbnz	r3, 800c2da <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c2d6:	f383 8811 	msr	BASEPRI, r3
 800c2da:	4770      	bx	lr
 800c2dc:	20000020 	.word	0x20000020

0800c2e0 <PendSV_Handler>:
	__asm volatile
 800c2e0:	f3ef 8009 	mrs	r0, PSP
 800c2e4:	f3bf 8f6f 	isb	sy
 800c2e8:	4b15      	ldr	r3, [pc, #84]	; (800c340 <pxCurrentTCBConst>)
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	f01e 0f10 	tst.w	lr, #16
 800c2f0:	bf08      	it	eq
 800c2f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c2f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2fa:	6010      	str	r0, [r2, #0]
 800c2fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c300:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c304:	f380 8811 	msr	BASEPRI, r0
 800c308:	f3bf 8f4f 	dsb	sy
 800c30c:	f3bf 8f6f 	isb	sy
 800c310:	f001 fd1c 	bl	800dd4c <vTaskSwitchContext>
 800c314:	f04f 0000 	mov.w	r0, #0
 800c318:	f380 8811 	msr	BASEPRI, r0
 800c31c:	bc09      	pop	{r0, r3}
 800c31e:	6819      	ldr	r1, [r3, #0]
 800c320:	6808      	ldr	r0, [r1, #0]
 800c322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c326:	f01e 0f10 	tst.w	lr, #16
 800c32a:	bf08      	it	eq
 800c32c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c330:	f380 8809 	msr	PSP, r0
 800c334:	f3bf 8f6f 	isb	sy
 800c338:	4770      	bx	lr
 800c33a:	bf00      	nop
 800c33c:	f3af 8000 	nop.w

0800c340 <pxCurrentTCBConst>:
 800c340:	20004f14 	.word	0x20004f14

0800c344 <SysTick_Handler>:
{
 800c344:	b508      	push	{r3, lr}
	__asm volatile
 800c346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c34a:	f383 8811 	msr	BASEPRI, r3
 800c34e:	f3bf 8f6f 	isb	sy
 800c352:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800c356:	f001 fb99 	bl	800da8c <xTaskIncrementTick>
 800c35a:	b118      	cbz	r0, 800c364 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c35c:	4b03      	ldr	r3, [pc, #12]	; (800c36c <SysTick_Handler+0x28>)
 800c35e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c362:	601a      	str	r2, [r3, #0]
	__asm volatile
 800c364:	2300      	movs	r3, #0
 800c366:	f383 8811 	msr	BASEPRI, r3
 800c36a:	bd08      	pop	{r3, pc}
 800c36c:	e000ed04 	.word	0xe000ed04

0800c370 <vPortSetupTimerInterrupt>:
{
 800c370:	b430      	push	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c372:	4a09      	ldr	r2, [pc, #36]	; (800c398 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c374:	4d09      	ldr	r5, [pc, #36]	; (800c39c <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c376:	4b0a      	ldr	r3, [pc, #40]	; (800c3a0 <vPortSetupTimerInterrupt+0x30>)
 800c378:	4c0a      	ldr	r4, [pc, #40]	; (800c3a4 <vPortSetupTimerInterrupt+0x34>)
 800c37a:	480b      	ldr	r0, [pc, #44]	; (800c3a8 <vPortSetupTimerInterrupt+0x38>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c37c:	2100      	movs	r1, #0
 800c37e:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c380:	6029      	str	r1, [r5, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	fba4 1303 	umull	r1, r3, r4, r3
 800c388:	099b      	lsrs	r3, r3, #6
 800c38a:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c38c:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c38e:	6003      	str	r3, [r0, #0]
}
 800c390:	bc30      	pop	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c392:	6011      	str	r1, [r2, #0]
}
 800c394:	4770      	bx	lr
 800c396:	bf00      	nop
 800c398:	e000e010 	.word	0xe000e010
 800c39c:	e000e018 	.word	0xe000e018
 800c3a0:	2000003c 	.word	0x2000003c
 800c3a4:	10624dd3 	.word	0x10624dd3
 800c3a8:	e000e014 	.word	0xe000e014

0800c3ac <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c3ac:	4b3a      	ldr	r3, [pc, #232]	; (800c498 <xPortStartScheduler+0xec>)
 800c3ae:	4a3b      	ldr	r2, [pc, #236]	; (800c49c <xPortStartScheduler+0xf0>)
 800c3b0:	6819      	ldr	r1, [r3, #0]
 800c3b2:	4291      	cmp	r1, r2
 800c3b4:	d038      	beq.n	800c428 <xPortStartScheduler+0x7c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c3b6:	681a      	ldr	r2, [r3, #0]
 800c3b8:	4b39      	ldr	r3, [pc, #228]	; (800c4a0 <xPortStartScheduler+0xf4>)
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	d03d      	beq.n	800c43a <xPortStartScheduler+0x8e>
{
 800c3be:	b510      	push	{r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c3c0:	4b38      	ldr	r3, [pc, #224]	; (800c4a4 <xPortStartScheduler+0xf8>)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c3c2:	4839      	ldr	r0, [pc, #228]	; (800c4a8 <xPortStartScheduler+0xfc>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c3c4:	781a      	ldrb	r2, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c3c6:	4c39      	ldr	r4, [pc, #228]	; (800c4ac <xPortStartScheduler+0x100>)
{
 800c3c8:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c3ca:	b2d2      	uxtb	r2, r2
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c3cc:	21ff      	movs	r1, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c3ce:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c3d0:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c3d2:	781b      	ldrb	r3, [r3, #0]
 800c3d4:	b2db      	uxtb	r3, r3
 800c3d6:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c3da:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c3de:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c3e2:	2107      	movs	r1, #7
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c3e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c3e8:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c3ea:	0611      	lsls	r1, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c3ec:	7023      	strb	r3, [r4, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c3ee:	bf48      	it	mi
 800c3f0:	2306      	movmi	r3, #6
 800c3f2:	d401      	bmi.n	800c3f8 <xPortStartScheduler+0x4c>
 800c3f4:	e00f      	b.n	800c416 <xPortStartScheduler+0x6a>
 800c3f6:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c3f8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c3fc:	0052      	lsls	r2, r2, #1
 800c3fe:	b2d2      	uxtb	r2, r2
 800c400:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c404:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c408:	0612      	lsls	r2, r2, #24
 800c40a:	f103 31ff 	add.w	r1, r3, #4294967295
 800c40e:	d4f2      	bmi.n	800c3f6 <xPortStartScheduler+0x4a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c410:	2b03      	cmp	r3, #3
 800c412:	6003      	str	r3, [r0, #0]
 800c414:	d01a      	beq.n	800c44c <xPortStartScheduler+0xa0>
	__asm volatile
 800c416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c41a:	f383 8811 	msr	BASEPRI, r3
 800c41e:	f3bf 8f6f 	isb	sy
 800c422:	f3bf 8f4f 	dsb	sy
 800c426:	e7fe      	b.n	800c426 <xPortStartScheduler+0x7a>
 800c428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c42c:	f383 8811 	msr	BASEPRI, r3
 800c430:	f3bf 8f6f 	isb	sy
 800c434:	f3bf 8f4f 	dsb	sy
 800c438:	e7fe      	b.n	800c438 <xPortStartScheduler+0x8c>
 800c43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43e:	f383 8811 	msr	BASEPRI, r3
 800c442:	f3bf 8f6f 	isb	sy
 800c446:	f3bf 8f4f 	dsb	sy
 800c44a:	e7fe      	b.n	800c44a <xPortStartScheduler+0x9e>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c44c:	9901      	ldr	r1, [sp, #4]
 800c44e:	4c15      	ldr	r4, [pc, #84]	; (800c4a4 <xPortStartScheduler+0xf8>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c450:	4a17      	ldr	r2, [pc, #92]	; (800c4b0 <xPortStartScheduler+0x104>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c452:	021b      	lsls	r3, r3, #8
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c454:	b2c9      	uxtb	r1, r1
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c456:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c45a:	6003      	str	r3, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c45c:	7021      	strb	r1, [r4, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c45e:	6813      	ldr	r3, [r2, #0]
 800c460:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c464:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c466:	6813      	ldr	r3, [r2, #0]
 800c468:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c46c:	6013      	str	r3, [r2, #0]
	vPortSetupTimerInterrupt();
 800c46e:	f7ff ff7f 	bl	800c370 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800c472:	4b10      	ldr	r3, [pc, #64]	; (800c4b4 <xPortStartScheduler+0x108>)
 800c474:	2400      	movs	r4, #0
 800c476:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800c478:	f7ff fec4 	bl	800c204 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c47c:	4a0e      	ldr	r2, [pc, #56]	; (800c4b8 <xPortStartScheduler+0x10c>)
 800c47e:	6813      	ldr	r3, [r2, #0]
 800c480:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c484:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800c486:	f7ff fea9 	bl	800c1dc <prvPortStartFirstTask>
	vTaskSwitchContext();
 800c48a:	f001 fc5f 	bl	800dd4c <vTaskSwitchContext>
	prvTaskExitError();
 800c48e:	f7ff fe85 	bl	800c19c <prvTaskExitError>
}
 800c492:	4620      	mov	r0, r4
 800c494:	b002      	add	sp, #8
 800c496:	bd10      	pop	{r4, pc}
 800c498:	e000ed00 	.word	0xe000ed00
 800c49c:	410fc271 	.word	0x410fc271
 800c4a0:	410fc270 	.word	0x410fc270
 800c4a4:	e000e400 	.word	0xe000e400
 800c4a8:	200000d8 	.word	0x200000d8
 800c4ac:	200000d4 	.word	0x200000d4
 800c4b0:	e000ed20 	.word	0xe000ed20
 800c4b4:	20000020 	.word	0x20000020
 800c4b8:	e000ef34 	.word	0xe000ef34

0800c4bc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c4bc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c4c0:	2b0f      	cmp	r3, #15
 800c4c2:	d90e      	bls.n	800c4e2 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c4c4:	4910      	ldr	r1, [pc, #64]	; (800c508 <vPortValidateInterruptPriority+0x4c>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c4c6:	4a11      	ldr	r2, [pc, #68]	; (800c50c <vPortValidateInterruptPriority+0x50>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c4c8:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c4ca:	7812      	ldrb	r2, [r2, #0]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d908      	bls.n	800c4e2 <vPortValidateInterruptPriority+0x26>
 800c4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d4:	f383 8811 	msr	BASEPRI, r3
 800c4d8:	f3bf 8f6f 	isb	sy
 800c4dc:	f3bf 8f4f 	dsb	sy
 800c4e0:	e7fe      	b.n	800c4e0 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c4e2:	4b0b      	ldr	r3, [pc, #44]	; (800c510 <vPortValidateInterruptPriority+0x54>)
 800c4e4:	4a0b      	ldr	r2, [pc, #44]	; (800c514 <vPortValidateInterruptPriority+0x58>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	6812      	ldr	r2, [r2, #0]
 800c4ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d908      	bls.n	800c504 <vPortValidateInterruptPriority+0x48>
 800c4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f6:	f383 8811 	msr	BASEPRI, r3
 800c4fa:	f3bf 8f6f 	isb	sy
 800c4fe:	f3bf 8f4f 	dsb	sy
 800c502:	e7fe      	b.n	800c502 <vPortValidateInterruptPriority+0x46>
 800c504:	4770      	bx	lr
 800c506:	bf00      	nop
 800c508:	e000e3f0 	.word	0xe000e3f0
 800c50c:	200000d4 	.word	0x200000d4
 800c510:	e000ed0c 	.word	0xe000ed0c
 800c514:	200000d8 	.word	0x200000d8

0800c518 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c518:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c51a:	4b11      	ldr	r3, [pc, #68]	; (800c560 <prvInsertBlockIntoFreeList+0x48>)
 800c51c:	681a      	ldr	r2, [r3, #0]
 800c51e:	4282      	cmp	r2, r0
 800c520:	d201      	bcs.n	800c526 <prvInsertBlockIntoFreeList+0xe>
 800c522:	4613      	mov	r3, r2
 800c524:	e7fa      	b.n	800c51c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c526:	685c      	ldr	r4, [r3, #4]
 800c528:	1919      	adds	r1, r3, r4
 800c52a:	4288      	cmp	r0, r1
 800c52c:	d103      	bne.n	800c536 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c52e:	6841      	ldr	r1, [r0, #4]
 800c530:	4421      	add	r1, r4
 800c532:	6059      	str	r1, [r3, #4]
 800c534:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c536:	6844      	ldr	r4, [r0, #4]
 800c538:	1901      	adds	r1, r0, r4
 800c53a:	428a      	cmp	r2, r1
 800c53c:	d109      	bne.n	800c552 <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c53e:	4909      	ldr	r1, [pc, #36]	; (800c564 <prvInsertBlockIntoFreeList+0x4c>)
 800c540:	6809      	ldr	r1, [r1, #0]
 800c542:	428a      	cmp	r2, r1
 800c544:	d005      	beq.n	800c552 <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c546:	6851      	ldr	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c548:	6812      	ldr	r2, [r2, #0]
 800c54a:	6002      	str	r2, [r0, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c54c:	4421      	add	r1, r4
 800c54e:	6041      	str	r1, [r0, #4]
 800c550:	e000      	b.n	800c554 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c552:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c554:	4298      	cmp	r0, r3
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c556:	bf18      	it	ne
 800c558:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c55a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c55e:	4770      	bx	lr
 800c560:	20004f0c 	.word	0x20004f0c
 800c564:	200000dc 	.word	0x200000dc

0800c568 <pvPortMalloc>:
{
 800c568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c56a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800c56c:	f001 fa80 	bl	800da70 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800c570:	4a3e      	ldr	r2, [pc, #248]	; (800c66c <pvPortMalloc+0x104>)
 800c572:	6813      	ldr	r3, [r2, #0]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d056      	beq.n	800c626 <pvPortMalloc+0xbe>
 800c578:	4a3d      	ldr	r2, [pc, #244]	; (800c670 <pvPortMalloc+0x108>)
 800c57a:	6815      	ldr	r5, [r2, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c57c:	422c      	tst	r4, r5
 800c57e:	d14d      	bne.n	800c61c <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 800c580:	2c00      	cmp	r4, #0
 800c582:	d04b      	beq.n	800c61c <pvPortMalloc+0xb4>
				xWantedSize += xHeapStructSize;
 800c584:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c588:	0750      	lsls	r0, r2, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c58a:	bf1c      	itt	ne
 800c58c:	f022 0207 	bicne.w	r2, r2, #7
 800c590:	3208      	addne	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c592:	2a00      	cmp	r2, #0
 800c594:	d042      	beq.n	800c61c <pvPortMalloc+0xb4>
 800c596:	4f37      	ldr	r7, [pc, #220]	; (800c674 <pvPortMalloc+0x10c>)
 800c598:	683e      	ldr	r6, [r7, #0]
 800c59a:	42b2      	cmp	r2, r6
 800c59c:	d83e      	bhi.n	800c61c <pvPortMalloc+0xb4>
				pxBlock = xStart.pxNextFreeBlock;
 800c59e:	4836      	ldr	r0, [pc, #216]	; (800c678 <pvPortMalloc+0x110>)
 800c5a0:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5a2:	e006      	b.n	800c5b2 <pvPortMalloc+0x4a>
 800c5a4:	f8d4 e000 	ldr.w	lr, [r4]
 800c5a8:	f1be 0f00 	cmp.w	lr, #0
 800c5ac:	d004      	beq.n	800c5b8 <pvPortMalloc+0x50>
 800c5ae:	4620      	mov	r0, r4
 800c5b0:	4674      	mov	r4, lr
 800c5b2:	6861      	ldr	r1, [r4, #4]
 800c5b4:	428a      	cmp	r2, r1
 800c5b6:	d8f5      	bhi.n	800c5a4 <pvPortMalloc+0x3c>
				if( pxBlock != pxEnd )
 800c5b8:	429c      	cmp	r4, r3
 800c5ba:	d02f      	beq.n	800c61c <pvPortMalloc+0xb4>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c5bc:	6823      	ldr	r3, [r4, #0]
 800c5be:	6003      	str	r3, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c5c0:	1a8b      	subs	r3, r1, r2
 800c5c2:	2b10      	cmp	r3, #16
 800c5c4:	d910      	bls.n	800c5e8 <pvPortMalloc+0x80>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c5c6:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5c8:	0741      	lsls	r1, r0, #29
 800c5ca:	d008      	beq.n	800c5de <pvPortMalloc+0x76>
 800c5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d0:	f383 8811 	msr	BASEPRI, r3
 800c5d4:	f3bf 8f6f 	isb	sy
 800c5d8:	f3bf 8f4f 	dsb	sy
 800c5dc:	e7fe      	b.n	800c5dc <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c5de:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c5e0:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c5e2:	f7ff ff99 	bl	800c518 <prvInsertBlockIntoFreeList>
 800c5e6:	6861      	ldr	r1, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c5e8:	4a24      	ldr	r2, [pc, #144]	; (800c67c <pvPortMalloc+0x114>)
 800c5ea:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c5ec:	1a76      	subs	r6, r6, r1
					pxBlock->pxNextFreeBlock = NULL;
 800c5ee:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c5f0:	4329      	orrs	r1, r5
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c5f2:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c5f4:	6061      	str	r1, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c5f6:	6023      	str	r3, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c5f8:	f104 0408 	add.w	r4, r4, #8
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c5fc:	bf38      	it	cc
 800c5fe:	6016      	strcc	r6, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c600:	603e      	str	r6, [r7, #0]
	( void ) xTaskResumeAll();
 800c602:	f001 faf1 	bl	800dbe8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c606:	0763      	lsls	r3, r4, #29
 800c608:	d00b      	beq.n	800c622 <pvPortMalloc+0xba>
 800c60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c60e:	f383 8811 	msr	BASEPRI, r3
 800c612:	f3bf 8f6f 	isb	sy
 800c616:	f3bf 8f4f 	dsb	sy
 800c61a:	e7fe      	b.n	800c61a <pvPortMalloc+0xb2>
	( void ) xTaskResumeAll();
 800c61c:	f001 fae4 	bl	800dbe8 <xTaskResumeAll>
 800c620:	2400      	movs	r4, #0
}
 800c622:	4620      	mov	r0, r4
 800c624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uxAddress = ( size_t ) ucHeap;
 800c626:	4916      	ldr	r1, [pc, #88]	; (800c680 <pvPortMalloc+0x118>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c628:	074d      	lsls	r5, r1, #29
 800c62a:	d01b      	beq.n	800c664 <pvPortMalloc+0xfc>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c62c:	3107      	adds	r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c62e:	4b15      	ldr	r3, [pc, #84]	; (800c684 <pvPortMalloc+0x11c>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c630:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c634:	1a5b      	subs	r3, r3, r1
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c636:	440b      	add	r3, r1
	uxAddress -= xHeapStructSize;
 800c638:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c63a:	f023 0307 	bic.w	r3, r3, #7
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c63e:	480f      	ldr	r0, [pc, #60]	; (800c67c <pvPortMalloc+0x114>)
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c640:	4d0c      	ldr	r5, [pc, #48]	; (800c674 <pvPortMalloc+0x10c>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c642:	4e0d      	ldr	r6, [pc, #52]	; (800c678 <pvPortMalloc+0x110>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c644:	4f0a      	ldr	r7, [pc, #40]	; (800c670 <pvPortMalloc+0x108>)
	pxEnd = ( void * ) uxAddress;
 800c646:	6013      	str	r3, [r2, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c648:	1a5a      	subs	r2, r3, r1
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c64a:	6002      	str	r2, [r0, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c64c:	602a      	str	r2, [r5, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c64e:	2000      	movs	r0, #0
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c650:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
	xStart.xBlockSize = ( size_t ) 0;
 800c654:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c656:	6031      	str	r1, [r6, #0]
	pxEnd->xBlockSize = 0;
 800c658:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c65a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c65c:	603d      	str	r5, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c65e:	604a      	str	r2, [r1, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c660:	600b      	str	r3, [r1, #0]
 800c662:	e78b      	b.n	800c57c <pvPortMalloc+0x14>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c664:	f644 6320 	movw	r3, #20000	; 0x4e20
 800c668:	e7e5      	b.n	800c636 <pvPortMalloc+0xce>
 800c66a:	bf00      	nop
 800c66c:	200000dc 	.word	0x200000dc
 800c670:	20004f00 	.word	0x20004f00
 800c674:	20004f04 	.word	0x20004f04
 800c678:	20004f0c 	.word	0x20004f0c
 800c67c:	20004f08 	.word	0x20004f08
 800c680:	200000e0 	.word	0x200000e0
 800c684:	20004f00 	.word	0x20004f00

0800c688 <vPortFree>:
	if( pv != NULL )
 800c688:	b1d0      	cbz	r0, 800c6c0 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c68a:	4a19      	ldr	r2, [pc, #100]	; (800c6f0 <vPortFree+0x68>)
 800c68c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800c690:	6812      	ldr	r2, [r2, #0]
 800c692:	4213      	tst	r3, r2
 800c694:	d108      	bne.n	800c6a8 <vPortFree+0x20>
 800c696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c69a:	f383 8811 	msr	BASEPRI, r3
 800c69e:	f3bf 8f6f 	isb	sy
 800c6a2:	f3bf 8f4f 	dsb	sy
 800c6a6:	e7fe      	b.n	800c6a6 <vPortFree+0x1e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c6a8:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800c6ac:	b149      	cbz	r1, 800c6c2 <vPortFree+0x3a>
 800c6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b2:	f383 8811 	msr	BASEPRI, r3
 800c6b6:	f3bf 8f6f 	isb	sy
 800c6ba:	f3bf 8f4f 	dsb	sy
 800c6be:	e7fe      	b.n	800c6be <vPortFree+0x36>
 800c6c0:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c6c2:	ea23 0302 	bic.w	r3, r3, r2
{
 800c6c6:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c6c8:	f840 3c04 	str.w	r3, [r0, #-4]
 800c6cc:	4604      	mov	r4, r0
				vTaskSuspendAll();
 800c6ce:	f001 f9cf 	bl	800da70 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c6d2:	4a08      	ldr	r2, [pc, #32]	; (800c6f4 <vPortFree+0x6c>)
 800c6d4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c6d8:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c6da:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c6de:	440b      	add	r3, r1
 800c6e0:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c6e2:	f7ff ff19 	bl	800c518 <prvInsertBlockIntoFreeList>
}
 800c6e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800c6ea:	f001 ba7d 	b.w	800dbe8 <xTaskResumeAll>
 800c6ee:	bf00      	nop
 800c6f0:	20004f00 	.word	0x20004f00
 800c6f4:	20004f04 	.word	0x20004f04

0800c6f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c6f8:	b570      	push	{r4, r5, r6, lr}
 800c6fa:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c6fc:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c6fe:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 800c700:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c702:	b932      	cbnz	r2, 800c712 <prvCopyDataToQueue+0x1a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c704:	6805      	ldr	r5, [r0, #0]
 800c706:	bb3d      	cbnz	r5, 800c758 <prvCopyDataToQueue+0x60>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800c708:	6840      	ldr	r0, [r0, #4]
 800c70a:	f001 fd13 	bl	800e134 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800c70e:	6065      	str	r5, [r4, #4]
 800c710:	e025      	b.n	800c75e <prvCopyDataToQueue+0x66>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c712:	b96d      	cbnz	r5, 800c730 <prvCopyDataToQueue+0x38>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800c714:	6880      	ldr	r0, [r0, #8]
 800c716:	f007 fbd9 	bl	8013ecc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c71a:	68a3      	ldr	r3, [r4, #8]
 800c71c:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c71e:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c720:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c722:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c724:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c726:	d317      	bcc.n	800c758 <prvCopyDataToQueue+0x60>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c728:	6823      	ldr	r3, [r4, #0]
 800c72a:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800c72c:	4628      	mov	r0, r5
 800c72e:	e016      	b.n	800c75e <prvCopyDataToQueue+0x66>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c730:	68c0      	ldr	r0, [r0, #12]
 800c732:	f007 fbcb 	bl	8013ecc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c736:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c738:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c73a:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c73c:	425b      	negs	r3, r3
 800c73e:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c740:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c742:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c744:	d202      	bcs.n	800c74c <prvCopyDataToQueue+0x54>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800c746:	6862      	ldr	r2, [r4, #4]
 800c748:	4413      	add	r3, r2
 800c74a:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c74c:	2d02      	cmp	r5, #2
 800c74e:	d103      	bne.n	800c758 <prvCopyDataToQueue+0x60>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c750:	b126      	cbz	r6, 800c75c <prvCopyDataToQueue+0x64>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c752:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800c754:	2000      	movs	r0, #0
 800c756:	e002      	b.n	800c75e <prvCopyDataToQueue+0x66>
 800c758:	2000      	movs	r0, #0
 800c75a:	e000      	b.n	800c75e <prvCopyDataToQueue+0x66>
 800c75c:	4630      	mov	r0, r6
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c75e:	3601      	adds	r6, #1
 800c760:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 800c762:	bd70      	pop	{r4, r5, r6, pc}

0800c764 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c764:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800c766:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c768:	b172      	cbz	r2, 800c788 <prvCopyDataFromQueue+0x24>
{
 800c76a:	b410      	push	{r4}
 800c76c:	4608      	mov	r0, r1
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800c76e:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c770:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800c772:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c774:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800c776:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800c778:	bf24      	itt	cs
 800c77a:	6819      	ldrcs	r1, [r3, #0]
 800c77c:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800c77e:	68d9      	ldr	r1, [r3, #12]
	}
}
 800c780:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800c784:	f007 bba2 	b.w	8013ecc <memcpy>
 800c788:	4770      	bx	lr
	...

0800c78c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c78c:	b570      	push	{r4, r5, r6, lr}
 800c78e:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c790:	f7ff fd70 	bl	800c274 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c794:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800c798:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c79a:	2c00      	cmp	r4, #0
 800c79c:	dd16      	ble.n	800c7cc <prvUnlockQueue+0x40>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c79e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c7a0:	b1a3      	cbz	r3, 800c7cc <prvUnlockQueue+0x40>
 800c7a2:	f105 0624 	add.w	r6, r5, #36	; 0x24
 800c7a6:	e005      	b.n	800c7b4 <prvUnlockQueue+0x28>
 800c7a8:	3c01      	subs	r4, #1
 800c7aa:	b2e3      	uxtb	r3, r4
 800c7ac:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c7ae:	b16b      	cbz	r3, 800c7cc <prvUnlockQueue+0x40>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c7b2:	b15b      	cbz	r3, 800c7cc <prvUnlockQueue+0x40>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c7b4:	4630      	mov	r0, r6
 800c7b6:	f001 fbb3 	bl	800df20 <xTaskRemoveFromEventList>
 800c7ba:	2800      	cmp	r0, #0
 800c7bc:	d0f4      	beq.n	800c7a8 <prvUnlockQueue+0x1c>
 800c7be:	3c01      	subs	r4, #1
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c7c0:	f001 fc4a 	bl	800e058 <vTaskMissedYield>
 800c7c4:	b2e3      	uxtb	r3, r4
 800c7c6:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d1f1      	bne.n	800c7b0 <prvUnlockQueue+0x24>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c7cc:	23ff      	movs	r3, #255	; 0xff
 800c7ce:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c7d2:	f7ff fd71 	bl	800c2b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c7d6:	f7ff fd4d 	bl	800c274 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c7da:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800c7de:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c7e0:	2c00      	cmp	r4, #0
 800c7e2:	dd16      	ble.n	800c812 <prvUnlockQueue+0x86>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7e4:	692b      	ldr	r3, [r5, #16]
 800c7e6:	b1a3      	cbz	r3, 800c812 <prvUnlockQueue+0x86>
 800c7e8:	f105 0610 	add.w	r6, r5, #16
 800c7ec:	e005      	b.n	800c7fa <prvUnlockQueue+0x6e>
 800c7ee:	3c01      	subs	r4, #1
 800c7f0:	b2e3      	uxtb	r3, r4
 800c7f2:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c7f4:	b16b      	cbz	r3, 800c812 <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7f6:	692b      	ldr	r3, [r5, #16]
 800c7f8:	b15b      	cbz	r3, 800c812 <prvUnlockQueue+0x86>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7fa:	4630      	mov	r0, r6
 800c7fc:	f001 fb90 	bl	800df20 <xTaskRemoveFromEventList>
 800c800:	2800      	cmp	r0, #0
 800c802:	d0f4      	beq.n	800c7ee <prvUnlockQueue+0x62>
 800c804:	3c01      	subs	r4, #1
				{
					vTaskMissedYield();
 800c806:	f001 fc27 	bl	800e058 <vTaskMissedYield>
 800c80a:	b2e3      	uxtb	r3, r4
 800c80c:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d1f1      	bne.n	800c7f6 <prvUnlockQueue+0x6a>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c812:	23ff      	movs	r3, #255	; 0xff
 800c814:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 800c818:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800c81c:	f7ff bd4c 	b.w	800c2b8 <vPortExitCritical>

0800c820 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c820:	b940      	cbnz	r0, 800c834 <xQueueGenericCreate+0x14>
 800c822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c826:	f383 8811 	msr	BASEPRI, r3
 800c82a:	f3bf 8f6f 	isb	sy
 800c82e:	f3bf 8f4f 	dsb	sy
 800c832:	e7fe      	b.n	800c832 <xQueueGenericCreate+0x12>
	{
 800c834:	b570      	push	{r4, r5, r6, lr}
 800c836:	4606      	mov	r6, r0
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c838:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800c83c:	3048      	adds	r0, #72	; 0x48
 800c83e:	460d      	mov	r5, r1
 800c840:	f7ff fe92 	bl	800c568 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800c844:	4604      	mov	r4, r0
 800c846:	b318      	cbz	r0, 800c890 <xQueueGenericCreate+0x70>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800c848:	b325      	cbz	r5, 800c894 <xQueueGenericCreate+0x74>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800c84a:	f100 0348 	add.w	r3, r0, #72	; 0x48
 800c84e:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800c850:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c852:	6425      	str	r5, [r4, #64]	; 0x40
	taskENTER_CRITICAL();
 800c854:	f7ff fd0e 	bl	800c274 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c858:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c85a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c85c:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c85e:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c860:	fb01 f103 	mul.w	r1, r1, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800c864:	1acb      	subs	r3, r1, r3
 800c866:	4413      	add	r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c868:	2000      	movs	r0, #0
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c86a:	440a      	add	r2, r1
		pxQueue->cRxLock = queueUNLOCKED;
 800c86c:	21ff      	movs	r1, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c86e:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800c870:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c872:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c876:	6062      	str	r2, [r4, #4]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c878:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800c87c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c880:	f7ff fc3e 	bl	800c100 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c884:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c888:	f7ff fc3a 	bl	800c100 <vListInitialise>
	taskEXIT_CRITICAL();
 800c88c:	f7ff fd14 	bl	800c2b8 <vPortExitCritical>
	}
 800c890:	4620      	mov	r0, r4
 800c892:	bd70      	pop	{r4, r5, r6, pc}
	if( uxItemSize == ( UBaseType_t ) 0 )
 800c894:	4603      	mov	r3, r0
 800c896:	e7da      	b.n	800c84e <xQueueGenericCreate+0x2e>

0800c898 <xQueueCreateMutex>:
	{
 800c898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800c89c:	2048      	movs	r0, #72	; 0x48
	{
 800c89e:	b085      	sub	sp, #20
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800c8a0:	f7ff fe62 	bl	800c568 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800c8a4:	4604      	mov	r4, r0
 800c8a6:	2800      	cmp	r0, #0
 800c8a8:	f000 80c7 	beq.w	800ca3a <xQueueCreateMutex+0x1a2>
	pxNewQueue->uxItemSize = uxItemSize;
 800c8ac:	f04f 0800 	mov.w	r8, #0
	pxNewQueue->uxLength = uxQueueLength;
 800c8b0:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c8b2:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800c8b4:	63c3      	str	r3, [r0, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c8b6:	f8c0 8040 	str.w	r8, [r0, #64]	; 0x40
	taskENTER_CRITICAL();
 800c8ba:	f7ff fcdb 	bl	800c274 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c8be:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c8c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c8c2:	6821      	ldr	r1, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c8c4:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c8c8:	fb03 f302 	mul.w	r3, r3, r2
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800c8cc:	1a9a      	subs	r2, r3, r2
 800c8ce:	440a      	add	r2, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c8d0:	440b      	add	r3, r1
		pxQueue->cRxLock = queueUNLOCKED;
 800c8d2:	25ff      	movs	r5, #255	; 0xff
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c8d4:	f104 0610 	add.w	r6, r4, #16
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800c8d8:	60e2      	str	r2, [r4, #12]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c8da:	6063      	str	r3, [r4, #4]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c8dc:	60a1      	str	r1, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 800c8de:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c8e2:	4630      	mov	r0, r6
		pxQueue->cTxLock = queueUNLOCKED;
 800c8e4:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c8e8:	f104 0724 	add.w	r7, r4, #36	; 0x24
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c8ec:	f7ff fc08 	bl	800c100 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c8f0:	4638      	mov	r0, r7
 800c8f2:	f7ff fc05 	bl	800c100 <vListInitialise>
	taskEXIT_CRITICAL();
 800c8f6:	f7ff fcdf 	bl	800c2b8 <vPortExitCritical>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c8fa:	6c25      	ldr	r5, [r4, #64]	; 0x40
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c8fc:	f8c4 8000 	str.w	r8, [r4]
			pxNewQueue->pxMutexHolder = NULL;
 800c900:	f8c4 8004 	str.w	r8, [r4, #4]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800c904:	f8c4 800c 	str.w	r8, [r4, #12]
 800c908:	f8cd 8004 	str.w	r8, [sp, #4]
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c90c:	2d00      	cmp	r5, #0
 800c90e:	f040 80a5 	bne.w	800ca5c <xQueueCreateMutex+0x1c4>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c912:	f001 fba7 	bl	800e064 <xTaskGetSchedulerState>
 800c916:	2800      	cmp	r0, #0
 800c918:	f000 8093 	beq.w	800ca42 <xQueueCreateMutex+0x1aa>
		taskENTER_CRITICAL();
 800c91c:	f7ff fcaa 	bl	800c274 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c920:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c922:	6be3      	ldr	r3, [r4, #60]	; 0x3c
					portYIELD_WITHIN_API();
 800c924:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800cb30 <xQueueCreateMutex+0x298>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c928:	429a      	cmp	r2, r3
		prvLockQueue( pxQueue );
 800c92a:	f04f 0800 	mov.w	r8, #0
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c92e:	d371      	bcc.n	800ca14 <xQueueCreateMutex+0x17c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c930:	9b01      	ldr	r3, [sp, #4]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d07f      	beq.n	800ca36 <xQueueCreateMutex+0x19e>
				else if( xEntryTimeSet == pdFALSE )
 800c936:	b915      	cbnz	r5, 800c93e <xQueueCreateMutex+0xa6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c938:	a802      	add	r0, sp, #8
 800c93a:	f001 fb35 	bl	800dfa8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800c93e:	f7ff fcbb 	bl	800c2b8 <vPortExitCritical>
		vTaskSuspendAll();
 800c942:	f001 f895 	bl	800da70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c946:	f7ff fc95 	bl	800c274 <vPortEnterCritical>
 800c94a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c94e:	2bff      	cmp	r3, #255	; 0xff
 800c950:	bf08      	it	eq
 800c952:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 800c956:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c95a:	2bff      	cmp	r3, #255	; 0xff
 800c95c:	bf08      	it	eq
 800c95e:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 800c962:	f7ff fca9 	bl	800c2b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c966:	a901      	add	r1, sp, #4
 800c968:	a802      	add	r0, sp, #8
 800c96a:	f001 fb29 	bl	800dfc0 <xTaskCheckForTimeOut>
 800c96e:	2800      	cmp	r0, #0
 800c970:	f040 80d4 	bne.w	800cb1c <xQueueCreateMutex+0x284>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c974:	f7ff fc7e 	bl	800c274 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c978:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c97a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c97c:	429a      	cmp	r2, r3
 800c97e:	d076      	beq.n	800ca6e <xQueueCreateMutex+0x1d6>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800c980:	f7ff fc9a 	bl	800c2b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c984:	f7ff fc76 	bl	800c274 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800c988:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800c98c:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c98e:	2d00      	cmp	r5, #0
 800c990:	dc04      	bgt.n	800c99c <xQueueCreateMutex+0x104>
 800c992:	e011      	b.n	800c9b8 <xQueueCreateMutex+0x120>
 800c994:	3d01      	subs	r5, #1
 800c996:	b2eb      	uxtb	r3, r5
 800c998:	b25d      	sxtb	r5, r3
 800c99a:	b16b      	cbz	r3, 800c9b8 <xQueueCreateMutex+0x120>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c99c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c99e:	b15b      	cbz	r3, 800c9b8 <xQueueCreateMutex+0x120>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c9a0:	4638      	mov	r0, r7
 800c9a2:	f001 fabd 	bl	800df20 <xTaskRemoveFromEventList>
 800c9a6:	2800      	cmp	r0, #0
 800c9a8:	d0f4      	beq.n	800c994 <xQueueCreateMutex+0xfc>
 800c9aa:	3d01      	subs	r5, #1
						vTaskMissedYield();
 800c9ac:	f001 fb54 	bl	800e058 <vTaskMissedYield>
 800c9b0:	b2eb      	uxtb	r3, r5
 800c9b2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d1f1      	bne.n	800c99c <xQueueCreateMutex+0x104>
		pxQueue->cTxLock = queueUNLOCKED;
 800c9b8:	23ff      	movs	r3, #255	; 0xff
 800c9ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800c9be:	f7ff fc7b 	bl	800c2b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c9c2:	f7ff fc57 	bl	800c274 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800c9c6:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800c9ca:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c9cc:	2d00      	cmp	r5, #0
 800c9ce:	dc04      	bgt.n	800c9da <xQueueCreateMutex+0x142>
 800c9d0:	e011      	b.n	800c9f6 <xQueueCreateMutex+0x15e>
 800c9d2:	3d01      	subs	r5, #1
 800c9d4:	b2eb      	uxtb	r3, r5
 800c9d6:	b25d      	sxtb	r5, r3
 800c9d8:	b16b      	cbz	r3, 800c9f6 <xQueueCreateMutex+0x15e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9da:	6923      	ldr	r3, [r4, #16]
 800c9dc:	b15b      	cbz	r3, 800c9f6 <xQueueCreateMutex+0x15e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9de:	4630      	mov	r0, r6
 800c9e0:	f001 fa9e 	bl	800df20 <xTaskRemoveFromEventList>
 800c9e4:	2800      	cmp	r0, #0
 800c9e6:	d0f4      	beq.n	800c9d2 <xQueueCreateMutex+0x13a>
 800c9e8:	3d01      	subs	r5, #1
					vTaskMissedYield();
 800c9ea:	f001 fb35 	bl	800e058 <vTaskMissedYield>
 800c9ee:	b2eb      	uxtb	r3, r5
 800c9f0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d1f1      	bne.n	800c9da <xQueueCreateMutex+0x142>
		pxQueue->cRxLock = queueUNLOCKED;
 800c9f6:	23ff      	movs	r3, #255	; 0xff
 800c9f8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800c9fc:	f7ff fc5c 	bl	800c2b8 <vPortExitCritical>
				( void ) xTaskResumeAll();
 800ca00:	f001 f8f2 	bl	800dbe8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800ca04:	f7ff fc36 	bl	800c274 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ca08:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ca0a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	f04f 0501 	mov.w	r5, #1
 800ca12:	d28d      	bcs.n	800c930 <xQueueCreateMutex+0x98>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ca14:	2200      	movs	r2, #0
 800ca16:	4611      	mov	r1, r2
 800ca18:	4620      	mov	r0, r4
 800ca1a:	f7ff fe6d 	bl	800c6f8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d175      	bne.n	800cb10 <xQueueCreateMutex+0x278>
					else if( xYieldRequired != pdFALSE )
 800ca24:	b138      	cbz	r0, 800ca36 <xQueueCreateMutex+0x19e>
						queueYIELD_IF_USING_PREEMPTION();
 800ca26:	4b42      	ldr	r3, [pc, #264]	; (800cb30 <xQueueCreateMutex+0x298>)
 800ca28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca2c:	601a      	str	r2, [r3, #0]
 800ca2e:	f3bf 8f4f 	dsb	sy
 800ca32:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800ca36:	f7ff fc3f 	bl	800c2b8 <vPortExitCritical>
	}
 800ca3a:	4620      	mov	r0, r4
 800ca3c:	b005      	add	sp, #20
 800ca3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ca42:	9d01      	ldr	r5, [sp, #4]
 800ca44:	2d00      	cmp	r5, #0
 800ca46:	f43f af69 	beq.w	800c91c <xQueueCreateMutex+0x84>
 800ca4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca4e:	f383 8811 	msr	BASEPRI, r3
 800ca52:	f3bf 8f6f 	isb	sy
 800ca56:	f3bf 8f4f 	dsb	sy
 800ca5a:	e7fe      	b.n	800ca5a <xQueueCreateMutex+0x1c2>
 800ca5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca60:	f383 8811 	msr	BASEPRI, r3
 800ca64:	f3bf 8f6f 	isb	sy
 800ca68:	f3bf 8f4f 	dsb	sy
 800ca6c:	e7fe      	b.n	800ca6c <xQueueCreateMutex+0x1d4>
	taskEXIT_CRITICAL();
 800ca6e:	f7ff fc23 	bl	800c2b8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ca72:	9901      	ldr	r1, [sp, #4]
 800ca74:	4630      	mov	r0, r6
 800ca76:	f001 f9a1 	bl	800ddbc <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 800ca7a:	f7ff fbfb 	bl	800c274 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800ca7e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800ca82:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca84:	2d00      	cmp	r5, #0
 800ca86:	dc04      	bgt.n	800ca92 <xQueueCreateMutex+0x1fa>
 800ca88:	e011      	b.n	800caae <xQueueCreateMutex+0x216>
 800ca8a:	3d01      	subs	r5, #1
 800ca8c:	b2eb      	uxtb	r3, r5
 800ca8e:	b25d      	sxtb	r5, r3
 800ca90:	b16b      	cbz	r3, 800caae <xQueueCreateMutex+0x216>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca94:	b15b      	cbz	r3, 800caae <xQueueCreateMutex+0x216>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca96:	4638      	mov	r0, r7
 800ca98:	f001 fa42 	bl	800df20 <xTaskRemoveFromEventList>
 800ca9c:	2800      	cmp	r0, #0
 800ca9e:	d0f4      	beq.n	800ca8a <xQueueCreateMutex+0x1f2>
 800caa0:	3d01      	subs	r5, #1
						vTaskMissedYield();
 800caa2:	f001 fad9 	bl	800e058 <vTaskMissedYield>
 800caa6:	b2eb      	uxtb	r3, r5
 800caa8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d1f1      	bne.n	800ca92 <xQueueCreateMutex+0x1fa>
		pxQueue->cTxLock = queueUNLOCKED;
 800caae:	23ff      	movs	r3, #255	; 0xff
 800cab0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800cab4:	f7ff fc00 	bl	800c2b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800cab8:	f7ff fbdc 	bl	800c274 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800cabc:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800cac0:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cac2:	2d00      	cmp	r5, #0
 800cac4:	dc04      	bgt.n	800cad0 <xQueueCreateMutex+0x238>
 800cac6:	e011      	b.n	800caec <xQueueCreateMutex+0x254>
 800cac8:	3d01      	subs	r5, #1
 800caca:	b2eb      	uxtb	r3, r5
 800cacc:	b25d      	sxtb	r5, r3
 800cace:	b16b      	cbz	r3, 800caec <xQueueCreateMutex+0x254>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cad0:	6923      	ldr	r3, [r4, #16]
 800cad2:	b15b      	cbz	r3, 800caec <xQueueCreateMutex+0x254>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cad4:	4630      	mov	r0, r6
 800cad6:	f001 fa23 	bl	800df20 <xTaskRemoveFromEventList>
 800cada:	2800      	cmp	r0, #0
 800cadc:	d0f4      	beq.n	800cac8 <xQueueCreateMutex+0x230>
 800cade:	3d01      	subs	r5, #1
					vTaskMissedYield();
 800cae0:	f001 faba 	bl	800e058 <vTaskMissedYield>
 800cae4:	b2eb      	uxtb	r3, r5
 800cae6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d1f1      	bne.n	800cad0 <xQueueCreateMutex+0x238>
		pxQueue->cRxLock = queueUNLOCKED;
 800caec:	23ff      	movs	r3, #255	; 0xff
 800caee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800caf2:	f7ff fbe1 	bl	800c2b8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 800caf6:	f001 f877 	bl	800dbe8 <xTaskResumeAll>
 800cafa:	2800      	cmp	r0, #0
 800cafc:	d182      	bne.n	800ca04 <xQueueCreateMutex+0x16c>
					portYIELD_WITHIN_API();
 800cafe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cb02:	f8c9 3000 	str.w	r3, [r9]
 800cb06:	f3bf 8f4f 	dsb	sy
 800cb0a:	f3bf 8f6f 	isb	sy
 800cb0e:	e779      	b.n	800ca04 <xQueueCreateMutex+0x16c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb10:	4638      	mov	r0, r7
 800cb12:	f001 fa05 	bl	800df20 <xTaskRemoveFromEventList>
 800cb16:	2800      	cmp	r0, #0
 800cb18:	d185      	bne.n	800ca26 <xQueueCreateMutex+0x18e>
 800cb1a:	e78c      	b.n	800ca36 <xQueueCreateMutex+0x19e>
			prvUnlockQueue( pxQueue );
 800cb1c:	4620      	mov	r0, r4
 800cb1e:	f7ff fe35 	bl	800c78c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cb22:	f001 f861 	bl	800dbe8 <xTaskResumeAll>
	}
 800cb26:	4620      	mov	r0, r4
 800cb28:	b005      	add	sp, #20
 800cb2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb2e:	bf00      	nop
 800cb30:	e000ed04 	.word	0xe000ed04

0800cb34 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 800cb34:	b940      	cbnz	r0, 800cb48 <xQueueCreateCountingSemaphore+0x14>
 800cb36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb3a:	f383 8811 	msr	BASEPRI, r3
 800cb3e:	f3bf 8f6f 	isb	sy
 800cb42:	f3bf 8f4f 	dsb	sy
 800cb46:	e7fe      	b.n	800cb46 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cb48:	4288      	cmp	r0, r1
 800cb4a:	d208      	bcs.n	800cb5e <xQueueCreateCountingSemaphore+0x2a>
 800cb4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb50:	f383 8811 	msr	BASEPRI, r3
 800cb54:	f3bf 8f6f 	isb	sy
 800cb58:	f3bf 8f4f 	dsb	sy
 800cb5c:	e7fe      	b.n	800cb5c <xQueueCreateCountingSemaphore+0x28>
	{
 800cb5e:	b510      	push	{r4, lr}
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cb60:	2202      	movs	r2, #2
 800cb62:	460c      	mov	r4, r1
 800cb64:	2100      	movs	r1, #0
 800cb66:	f7ff fe5b 	bl	800c820 <xQueueGenericCreate>
		if( xHandle != NULL )
 800cb6a:	b100      	cbz	r0, 800cb6e <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cb6c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800cb6e:	bd10      	pop	{r4, pc}

0800cb70 <xQueueGenericSend>:
{
 800cb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb74:	b085      	sub	sp, #20
 800cb76:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800cb78:	2800      	cmp	r0, #0
 800cb7a:	f000 8107 	beq.w	800cd8c <xQueueGenericSend+0x21c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb7e:	2900      	cmp	r1, #0
 800cb80:	f000 813c 	beq.w	800cdfc <xQueueGenericSend+0x28c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cb84:	2b02      	cmp	r3, #2
 800cb86:	f000 812c 	beq.w	800cde2 <xQueueGenericSend+0x272>
 800cb8a:	4604      	mov	r4, r0
 800cb8c:	461e      	mov	r6, r3
 800cb8e:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb90:	f001 fa68 	bl	800e064 <xTaskGetSchedulerState>
 800cb94:	b928      	cbnz	r0, 800cba2 <xQueueGenericSend+0x32>
 800cb96:	9b01      	ldr	r3, [sp, #4]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	f040 8119 	bne.w	800cdd0 <xQueueGenericSend+0x260>
 800cb9e:	4699      	mov	r9, r3
 800cba0:	e001      	b.n	800cba6 <xQueueGenericSend+0x36>
 800cba2:	f04f 0900 	mov.w	r9, #0
		taskENTER_CRITICAL();
 800cba6:	f7ff fb65 	bl	800c274 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cbaa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800cbac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
					portYIELD_WITHIN_API();
 800cbae:	f8df a268 	ldr.w	sl, [pc, #616]	; 800ce18 <xQueueGenericSend+0x2a8>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cbb2:	429a      	cmp	r2, r3
		prvLockQueue( pxQueue );
 800cbb4:	f04f 0800 	mov.w	r8, #0
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cbb8:	d37c      	bcc.n	800ccb4 <xQueueGenericSend+0x144>
 800cbba:	2e02      	cmp	r6, #2
 800cbbc:	d07a      	beq.n	800ccb4 <xQueueGenericSend+0x144>
				if( xTicksToWait == ( TickType_t ) 0 )
 800cbbe:	9d01      	ldr	r5, [sp, #4]
 800cbc0:	2d00      	cmp	r5, #0
 800cbc2:	f000 80f9 	beq.w	800cdb8 <xQueueGenericSend+0x248>
				else if( xEntryTimeSet == pdFALSE )
 800cbc6:	f1b9 0f00 	cmp.w	r9, #0
 800cbca:	f000 80f1 	beq.w	800cdb0 <xQueueGenericSend+0x240>
		taskEXIT_CRITICAL();
 800cbce:	f7ff fb73 	bl	800c2b8 <vPortExitCritical>
		vTaskSuspendAll();
 800cbd2:	f000 ff4d 	bl	800da70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cbd6:	f7ff fb4d 	bl	800c274 <vPortEnterCritical>
 800cbda:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cbde:	2bff      	cmp	r3, #255	; 0xff
 800cbe0:	bf08      	it	eq
 800cbe2:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 800cbe6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cbea:	2bff      	cmp	r3, #255	; 0xff
 800cbec:	bf08      	it	eq
 800cbee:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 800cbf2:	f7ff fb61 	bl	800c2b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cbf6:	a901      	add	r1, sp, #4
 800cbf8:	a802      	add	r0, sp, #8
 800cbfa:	f001 f9e1 	bl	800dfc0 <xTaskCheckForTimeOut>
 800cbfe:	2800      	cmp	r0, #0
 800cc00:	f040 80cd 	bne.w	800cd9e <xQueueGenericSend+0x22e>
	taskENTER_CRITICAL();
 800cc04:	f7ff fb36 	bl	800c274 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cc08:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800cc0a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d066      	beq.n	800ccde <xQueueGenericSend+0x16e>
	taskEXIT_CRITICAL();
 800cc10:	f7ff fb52 	bl	800c2b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800cc14:	f7ff fb2e 	bl	800c274 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800cc18:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800cc1c:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cc1e:	2d00      	cmp	r5, #0
 800cc20:	dd16      	ble.n	800cc50 <xQueueGenericSend+0xe0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc24:	b1a3      	cbz	r3, 800cc50 <xQueueGenericSend+0xe0>
 800cc26:	f104 0924 	add.w	r9, r4, #36	; 0x24
 800cc2a:	e005      	b.n	800cc38 <xQueueGenericSend+0xc8>
 800cc2c:	3d01      	subs	r5, #1
 800cc2e:	b2eb      	uxtb	r3, r5
 800cc30:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cc32:	b16b      	cbz	r3, 800cc50 <xQueueGenericSend+0xe0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc36:	b15b      	cbz	r3, 800cc50 <xQueueGenericSend+0xe0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc38:	4648      	mov	r0, r9
 800cc3a:	f001 f971 	bl	800df20 <xTaskRemoveFromEventList>
 800cc3e:	2800      	cmp	r0, #0
 800cc40:	d0f4      	beq.n	800cc2c <xQueueGenericSend+0xbc>
 800cc42:	3d01      	subs	r5, #1
						vTaskMissedYield();
 800cc44:	f001 fa08 	bl	800e058 <vTaskMissedYield>
 800cc48:	b2eb      	uxtb	r3, r5
 800cc4a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d1f1      	bne.n	800cc34 <xQueueGenericSend+0xc4>
		pxQueue->cTxLock = queueUNLOCKED;
 800cc50:	23ff      	movs	r3, #255	; 0xff
 800cc52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800cc56:	f7ff fb2f 	bl	800c2b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800cc5a:	f7ff fb0b 	bl	800c274 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800cc5e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800cc62:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cc64:	2d00      	cmp	r5, #0
 800cc66:	dd16      	ble.n	800cc96 <xQueueGenericSend+0x126>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc68:	6923      	ldr	r3, [r4, #16]
 800cc6a:	b1a3      	cbz	r3, 800cc96 <xQueueGenericSend+0x126>
 800cc6c:	f104 0910 	add.w	r9, r4, #16
 800cc70:	e005      	b.n	800cc7e <xQueueGenericSend+0x10e>
 800cc72:	3d01      	subs	r5, #1
 800cc74:	b2eb      	uxtb	r3, r5
 800cc76:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cc78:	b16b      	cbz	r3, 800cc96 <xQueueGenericSend+0x126>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc7a:	6923      	ldr	r3, [r4, #16]
 800cc7c:	b15b      	cbz	r3, 800cc96 <xQueueGenericSend+0x126>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc7e:	4648      	mov	r0, r9
 800cc80:	f001 f94e 	bl	800df20 <xTaskRemoveFromEventList>
 800cc84:	2800      	cmp	r0, #0
 800cc86:	d0f4      	beq.n	800cc72 <xQueueGenericSend+0x102>
 800cc88:	3d01      	subs	r5, #1
					vTaskMissedYield();
 800cc8a:	f001 f9e5 	bl	800e058 <vTaskMissedYield>
 800cc8e:	b2eb      	uxtb	r3, r5
 800cc90:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d1f1      	bne.n	800cc7a <xQueueGenericSend+0x10a>
		pxQueue->cRxLock = queueUNLOCKED;
 800cc96:	23ff      	movs	r3, #255	; 0xff
 800cc98:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800cc9c:	f7ff fb0c 	bl	800c2b8 <vPortExitCritical>
				( void ) xTaskResumeAll();
 800cca0:	f000 ffa2 	bl	800dbe8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800cca4:	f7ff fae6 	bl	800c274 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cca8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ccaa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ccac:	429a      	cmp	r2, r3
 800ccae:	f04f 0901 	mov.w	r9, #1
 800ccb2:	d282      	bcs.n	800cbba <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ccb4:	4632      	mov	r2, r6
 800ccb6:	4639      	mov	r1, r7
 800ccb8:	4620      	mov	r0, r4
 800ccba:	f7ff fd1d 	bl	800c6f8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ccbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d17d      	bne.n	800cdc0 <xQueueGenericSend+0x250>
					else if( xYieldRequired != pdFALSE )
 800ccc4:	b138      	cbz	r0, 800ccd6 <xQueueGenericSend+0x166>
						queueYIELD_IF_USING_PREEMPTION();
 800ccc6:	4b54      	ldr	r3, [pc, #336]	; (800ce18 <xQueueGenericSend+0x2a8>)
 800ccc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cccc:	601a      	str	r2, [r3, #0]
 800ccce:	f3bf 8f4f 	dsb	sy
 800ccd2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800ccd6:	f7ff faef 	bl	800c2b8 <vPortExitCritical>
				return pdPASS;
 800ccda:	2001      	movs	r0, #1
 800ccdc:	e065      	b.n	800cdaa <xQueueGenericSend+0x23a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ccde:	f104 0910 	add.w	r9, r4, #16
	taskEXIT_CRITICAL();
 800cce2:	f7ff fae9 	bl	800c2b8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cce6:	4648      	mov	r0, r9
 800cce8:	9901      	ldr	r1, [sp, #4]
 800ccea:	f001 f867 	bl	800ddbc <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 800ccee:	f7ff fac1 	bl	800c274 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800ccf2:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800ccf6:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ccf8:	2d00      	cmp	r5, #0
 800ccfa:	dd16      	ble.n	800cd2a <xQueueGenericSend+0x1ba>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ccfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccfe:	b1a3      	cbz	r3, 800cd2a <xQueueGenericSend+0x1ba>
 800cd00:	f104 0b24 	add.w	fp, r4, #36	; 0x24
 800cd04:	e005      	b.n	800cd12 <xQueueGenericSend+0x1a2>
 800cd06:	3d01      	subs	r5, #1
 800cd08:	b2eb      	uxtb	r3, r5
 800cd0a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cd0c:	b16b      	cbz	r3, 800cd2a <xQueueGenericSend+0x1ba>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd10:	b15b      	cbz	r3, 800cd2a <xQueueGenericSend+0x1ba>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd12:	4658      	mov	r0, fp
 800cd14:	f001 f904 	bl	800df20 <xTaskRemoveFromEventList>
 800cd18:	2800      	cmp	r0, #0
 800cd1a:	d0f4      	beq.n	800cd06 <xQueueGenericSend+0x196>
 800cd1c:	3d01      	subs	r5, #1
						vTaskMissedYield();
 800cd1e:	f001 f99b 	bl	800e058 <vTaskMissedYield>
 800cd22:	b2eb      	uxtb	r3, r5
 800cd24:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d1f1      	bne.n	800cd0e <xQueueGenericSend+0x19e>
		pxQueue->cTxLock = queueUNLOCKED;
 800cd2a:	23ff      	movs	r3, #255	; 0xff
 800cd2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800cd30:	f7ff fac2 	bl	800c2b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800cd34:	f7ff fa9e 	bl	800c274 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800cd38:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800cd3c:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cd3e:	2d00      	cmp	r5, #0
 800cd40:	dc04      	bgt.n	800cd4c <xQueueGenericSend+0x1dc>
 800cd42:	e011      	b.n	800cd68 <xQueueGenericSend+0x1f8>
 800cd44:	3d01      	subs	r5, #1
 800cd46:	b2eb      	uxtb	r3, r5
 800cd48:	b25d      	sxtb	r5, r3
 800cd4a:	b16b      	cbz	r3, 800cd68 <xQueueGenericSend+0x1f8>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd4c:	6923      	ldr	r3, [r4, #16]
 800cd4e:	b15b      	cbz	r3, 800cd68 <xQueueGenericSend+0x1f8>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd50:	4648      	mov	r0, r9
 800cd52:	f001 f8e5 	bl	800df20 <xTaskRemoveFromEventList>
 800cd56:	2800      	cmp	r0, #0
 800cd58:	d0f4      	beq.n	800cd44 <xQueueGenericSend+0x1d4>
 800cd5a:	3d01      	subs	r5, #1
					vTaskMissedYield();
 800cd5c:	f001 f97c 	bl	800e058 <vTaskMissedYield>
 800cd60:	b2eb      	uxtb	r3, r5
 800cd62:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d1f1      	bne.n	800cd4c <xQueueGenericSend+0x1dc>
		pxQueue->cRxLock = queueUNLOCKED;
 800cd68:	23ff      	movs	r3, #255	; 0xff
 800cd6a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800cd6e:	f7ff faa3 	bl	800c2b8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 800cd72:	f000 ff39 	bl	800dbe8 <xTaskResumeAll>
 800cd76:	2800      	cmp	r0, #0
 800cd78:	d194      	bne.n	800cca4 <xQueueGenericSend+0x134>
					portYIELD_WITHIN_API();
 800cd7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cd7e:	f8ca 3000 	str.w	r3, [sl]
 800cd82:	f3bf 8f4f 	dsb	sy
 800cd86:	f3bf 8f6f 	isb	sy
 800cd8a:	e78b      	b.n	800cca4 <xQueueGenericSend+0x134>
 800cd8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd90:	f383 8811 	msr	BASEPRI, r3
 800cd94:	f3bf 8f6f 	isb	sy
 800cd98:	f3bf 8f4f 	dsb	sy
 800cd9c:	e7fe      	b.n	800cd9c <xQueueGenericSend+0x22c>
			prvUnlockQueue( pxQueue );
 800cd9e:	4620      	mov	r0, r4
 800cda0:	f7ff fcf4 	bl	800c78c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cda4:	f000 ff20 	bl	800dbe8 <xTaskResumeAll>
			return errQUEUE_FULL;
 800cda8:	2000      	movs	r0, #0
}
 800cdaa:	b005      	add	sp, #20
 800cdac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cdb0:	a802      	add	r0, sp, #8
 800cdb2:	f001 f8f9 	bl	800dfa8 <vTaskInternalSetTimeOutState>
 800cdb6:	e70a      	b.n	800cbce <xQueueGenericSend+0x5e>
					taskEXIT_CRITICAL();
 800cdb8:	f7ff fa7e 	bl	800c2b8 <vPortExitCritical>
					return errQUEUE_FULL;
 800cdbc:	4628      	mov	r0, r5
 800cdbe:	e7f4      	b.n	800cdaa <xQueueGenericSend+0x23a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cdc0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800cdc4:	f001 f8ac 	bl	800df20 <xTaskRemoveFromEventList>
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	f47f af7c 	bne.w	800ccc6 <xQueueGenericSend+0x156>
 800cdce:	e782      	b.n	800ccd6 <xQueueGenericSend+0x166>
 800cdd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd4:	f383 8811 	msr	BASEPRI, r3
 800cdd8:	f3bf 8f6f 	isb	sy
 800cddc:	f3bf 8f4f 	dsb	sy
 800cde0:	e7fe      	b.n	800cde0 <xQueueGenericSend+0x270>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cde2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cde4:	2a01      	cmp	r2, #1
 800cde6:	f43f aed0 	beq.w	800cb8a <xQueueGenericSend+0x1a>
 800cdea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdee:	f383 8811 	msr	BASEPRI, r3
 800cdf2:	f3bf 8f6f 	isb	sy
 800cdf6:	f3bf 8f4f 	dsb	sy
 800cdfa:	e7fe      	b.n	800cdfa <xQueueGenericSend+0x28a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cdfc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800cdfe:	2a00      	cmp	r2, #0
 800ce00:	f43f aec0 	beq.w	800cb84 <xQueueGenericSend+0x14>
 800ce04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce08:	f383 8811 	msr	BASEPRI, r3
 800ce0c:	f3bf 8f6f 	isb	sy
 800ce10:	f3bf 8f4f 	dsb	sy
 800ce14:	e7fe      	b.n	800ce14 <xQueueGenericSend+0x2a4>
 800ce16:	bf00      	nop
 800ce18:	e000ed04 	.word	0xe000ed04

0800ce1c <xQueueGenericSendFromISR>:
{
 800ce1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800ce20:	b1f0      	cbz	r0, 800ce60 <xQueueGenericSendFromISR+0x44>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce22:	2900      	cmp	r1, #0
 800ce24:	d041      	beq.n	800ceaa <xQueueGenericSendFromISR+0x8e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ce26:	2b02      	cmp	r3, #2
 800ce28:	d033      	beq.n	800ce92 <xQueueGenericSendFromISR+0x76>
 800ce2a:	4604      	mov	r4, r0
 800ce2c:	461f      	mov	r7, r3
 800ce2e:	4690      	mov	r8, r2
 800ce30:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ce32:	f7ff fb43 	bl	800c4bc <vPortValidateInterruptPriority>
	__asm volatile
 800ce36:	f3ef 8611 	mrs	r6, BASEPRI
 800ce3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce3e:	f383 8811 	msr	BASEPRI, r3
 800ce42:	f3bf 8f6f 	isb	sy
 800ce46:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ce4a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ce4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	d30f      	bcc.n	800ce72 <xQueueGenericSendFromISR+0x56>
 800ce52:	2f02      	cmp	r7, #2
 800ce54:	d00d      	beq.n	800ce72 <xQueueGenericSendFromISR+0x56>
			xReturn = errQUEUE_FULL;
 800ce56:	2000      	movs	r0, #0
	__asm volatile
 800ce58:	f386 8811 	msr	BASEPRI, r6
}
 800ce5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800ce60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce64:	f383 8811 	msr	BASEPRI, r3
 800ce68:	f3bf 8f6f 	isb	sy
 800ce6c:	f3bf 8f4f 	dsb	sy
 800ce70:	e7fe      	b.n	800ce70 <xQueueGenericSendFromISR+0x54>
			const int8_t cTxLock = pxQueue->cTxLock;
 800ce72:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ce76:	463a      	mov	r2, r7
 800ce78:	4649      	mov	r1, r9
			const int8_t cTxLock = pxQueue->cTxLock;
 800ce7a:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ce7c:	4620      	mov	r0, r4
 800ce7e:	f7ff fc3b 	bl	800c6f8 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800ce82:	1c6b      	adds	r3, r5, #1
 800ce84:	d01d      	beq.n	800cec2 <xQueueGenericSendFromISR+0xa6>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ce86:	1c6b      	adds	r3, r5, #1
 800ce88:	b25b      	sxtb	r3, r3
 800ce8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 800ce8e:	2001      	movs	r0, #1
 800ce90:	e7e2      	b.n	800ce58 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ce92:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800ce94:	2c01      	cmp	r4, #1
 800ce96:	d0c8      	beq.n	800ce2a <xQueueGenericSendFromISR+0xe>
 800ce98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce9c:	f383 8811 	msr	BASEPRI, r3
 800cea0:	f3bf 8f6f 	isb	sy
 800cea4:	f3bf 8f4f 	dsb	sy
 800cea8:	e7fe      	b.n	800cea8 <xQueueGenericSendFromISR+0x8c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ceaa:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800ceac:	2c00      	cmp	r4, #0
 800ceae:	d0ba      	beq.n	800ce26 <xQueueGenericSendFromISR+0xa>
 800ceb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb4:	f383 8811 	msr	BASEPRI, r3
 800ceb8:	f3bf 8f6f 	isb	sy
 800cebc:	f3bf 8f4f 	dsb	sy
 800cec0:	e7fe      	b.n	800cec0 <xQueueGenericSendFromISR+0xa4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d0e2      	beq.n	800ce8e <xQueueGenericSendFromISR+0x72>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cec8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800cecc:	f001 f828 	bl	800df20 <xTaskRemoveFromEventList>
 800ced0:	2800      	cmp	r0, #0
 800ced2:	d0dc      	beq.n	800ce8e <xQueueGenericSendFromISR+0x72>
							if( pxHigherPriorityTaskWoken != NULL )
 800ced4:	f1b8 0f00 	cmp.w	r8, #0
 800ced8:	d0d9      	beq.n	800ce8e <xQueueGenericSendFromISR+0x72>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ceda:	2001      	movs	r0, #1
 800cedc:	f8c8 0000 	str.w	r0, [r8]
 800cee0:	e7ba      	b.n	800ce58 <xQueueGenericSendFromISR+0x3c>
 800cee2:	bf00      	nop

0800cee4 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 800cee4:	b378      	cbz	r0, 800cf46 <xQueueGiveFromISR+0x62>
	configASSERT( pxQueue->uxItemSize == 0 );
 800cee6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800cee8:	b143      	cbz	r3, 800cefc <xQueueGiveFromISR+0x18>
 800ceea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceee:	f383 8811 	msr	BASEPRI, r3
 800cef2:	f3bf 8f6f 	isb	sy
 800cef6:	f3bf 8f4f 	dsb	sy
 800cefa:	e7fe      	b.n	800cefa <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800cefc:	6803      	ldr	r3, [r0, #0]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d03a      	beq.n	800cf78 <xQueueGiveFromISR+0x94>
{
 800cf02:	b570      	push	{r4, r5, r6, lr}
 800cf04:	4604      	mov	r4, r0
 800cf06:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf08:	f7ff fad8 	bl	800c4bc <vPortValidateInterruptPriority>
	__asm volatile
 800cf0c:	f3ef 8611 	mrs	r6, BASEPRI
 800cf10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf14:	f383 8811 	msr	BASEPRI, r3
 800cf18:	f3bf 8f6f 	isb	sy
 800cf1c:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf20:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cf22:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d225      	bcs.n	800cf74 <xQueueGiveFromISR+0x90>
			const int8_t cTxLock = pxQueue->cTxLock;
 800cf28:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cf2c:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 800cf2e:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cf30:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800cf32:	1c5a      	adds	r2, r3, #1
 800cf34:	d010      	beq.n	800cf58 <xQueueGiveFromISR+0x74>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cf36:	3301      	adds	r3, #1
 800cf38:	b25b      	sxtb	r3, r3
 800cf3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 800cf3e:	2001      	movs	r0, #1
	__asm volatile
 800cf40:	f386 8811 	msr	BASEPRI, r6
}
 800cf44:	bd70      	pop	{r4, r5, r6, pc}
	__asm volatile
 800cf46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf4a:	f383 8811 	msr	BASEPRI, r3
 800cf4e:	f3bf 8f6f 	isb	sy
 800cf52:	f3bf 8f4f 	dsb	sy
 800cf56:	e7fe      	b.n	800cf56 <xQueueGiveFromISR+0x72>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d0ef      	beq.n	800cf3e <xQueueGiveFromISR+0x5a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf5e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800cf62:	f000 ffdd 	bl	800df20 <xTaskRemoveFromEventList>
 800cf66:	2800      	cmp	r0, #0
 800cf68:	d0e9      	beq.n	800cf3e <xQueueGiveFromISR+0x5a>
							if( pxHigherPriorityTaskWoken != NULL )
 800cf6a:	2d00      	cmp	r5, #0
 800cf6c:	d0e7      	beq.n	800cf3e <xQueueGiveFromISR+0x5a>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cf6e:	2001      	movs	r0, #1
 800cf70:	6028      	str	r0, [r5, #0]
 800cf72:	e7e5      	b.n	800cf40 <xQueueGiveFromISR+0x5c>
			xReturn = errQUEUE_FULL;
 800cf74:	2000      	movs	r0, #0
 800cf76:	e7e3      	b.n	800cf40 <xQueueGiveFromISR+0x5c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800cf78:	6843      	ldr	r3, [r0, #4]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d0c1      	beq.n	800cf02 <xQueueGiveFromISR+0x1e>
 800cf7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf82:	f383 8811 	msr	BASEPRI, r3
 800cf86:	f3bf 8f6f 	isb	sy
 800cf8a:	f3bf 8f4f 	dsb	sy
 800cf8e:	e7fe      	b.n	800cf8e <xQueueGiveFromISR+0xaa>

0800cf90 <xQueueReceive>:
{
 800cf90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf94:	b085      	sub	sp, #20
 800cf96:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800cf98:	2800      	cmp	r0, #0
 800cf9a:	f000 8150 	beq.w	800d23e <xQueueReceive+0x2ae>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf9e:	2900      	cmp	r1, #0
 800cfa0:	f000 815c 	beq.w	800d25c <xQueueReceive+0x2cc>
 800cfa4:	4604      	mov	r4, r0
 800cfa6:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cfa8:	f001 f85c 	bl	800e064 <xTaskGetSchedulerState>
 800cfac:	b950      	cbnz	r0, 800cfc4 <xQueueReceive+0x34>
 800cfae:	9d01      	ldr	r5, [sp, #4]
 800cfb0:	b14d      	cbz	r5, 800cfc6 <xQueueReceive+0x36>
 800cfb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb6:	f383 8811 	msr	BASEPRI, r3
 800cfba:	f3bf 8f6f 	isb	sy
 800cfbe:	f3bf 8f4f 	dsb	sy
 800cfc2:	e7fe      	b.n	800cfc2 <xQueueReceive+0x32>
 800cfc4:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
 800cfc6:	f7ff f955 	bl	800c274 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cfca:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
					portYIELD_WITHIN_API();
 800cfce:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 800d298 <xQueueReceive+0x308>
		prvLockQueue( pxQueue );
 800cfd2:	2700      	movs	r7, #0
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cfd4:	f1b9 0f00 	cmp.w	r9, #0
 800cfd8:	f040 8086 	bne.w	800d0e8 <xQueueReceive+0x158>
				if( xTicksToWait == ( TickType_t ) 0 )
 800cfdc:	9b01      	ldr	r3, [sp, #4]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	f000 8136 	beq.w	800d250 <xQueueReceive+0x2c0>
				else if( xEntryTimeSet == pdFALSE )
 800cfe4:	b915      	cbnz	r5, 800cfec <xQueueReceive+0x5c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cfe6:	a802      	add	r0, sp, #8
 800cfe8:	f000 ffde 	bl	800dfa8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800cfec:	f7ff f964 	bl	800c2b8 <vPortExitCritical>
		vTaskSuspendAll();
 800cff0:	f000 fd3e 	bl	800da70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cff4:	f7ff f93e 	bl	800c274 <vPortEnterCritical>
 800cff8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cffc:	2bff      	cmp	r3, #255	; 0xff
 800cffe:	bf08      	it	eq
 800d000:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 800d004:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d008:	2bff      	cmp	r3, #255	; 0xff
 800d00a:	bf08      	it	eq
 800d00c:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 800d010:	f7ff f952 	bl	800c2b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d014:	a901      	add	r1, sp, #4
 800d016:	a802      	add	r0, sp, #8
 800d018:	f000 ffd2 	bl	800dfc0 <xTaskCheckForTimeOut>
 800d01c:	2800      	cmp	r0, #0
 800d01e:	f040 80be 	bne.w	800d19e <xQueueReceive+0x20e>
	taskENTER_CRITICAL();
 800d022:	f7ff f927 	bl	800c274 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d026:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d16c      	bne.n	800d106 <xQueueReceive+0x176>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d02c:	f104 0924 	add.w	r9, r4, #36	; 0x24
	taskEXIT_CRITICAL();
 800d030:	f7ff f942 	bl	800c2b8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d034:	4648      	mov	r0, r9
 800d036:	9901      	ldr	r1, [sp, #4]
 800d038:	f000 fec0 	bl	800ddbc <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 800d03c:	f7ff f91a 	bl	800c274 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800d040:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800d044:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d046:	2d00      	cmp	r5, #0
 800d048:	dc04      	bgt.n	800d054 <xQueueReceive+0xc4>
 800d04a:	e011      	b.n	800d070 <xQueueReceive+0xe0>
 800d04c:	3d01      	subs	r5, #1
 800d04e:	b2eb      	uxtb	r3, r5
 800d050:	b25d      	sxtb	r5, r3
 800d052:	b16b      	cbz	r3, 800d070 <xQueueReceive+0xe0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d054:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d056:	b15b      	cbz	r3, 800d070 <xQueueReceive+0xe0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d058:	4648      	mov	r0, r9
 800d05a:	f000 ff61 	bl	800df20 <xTaskRemoveFromEventList>
 800d05e:	2800      	cmp	r0, #0
 800d060:	d0f4      	beq.n	800d04c <xQueueReceive+0xbc>
 800d062:	3d01      	subs	r5, #1
						vTaskMissedYield();
 800d064:	f000 fff8 	bl	800e058 <vTaskMissedYield>
 800d068:	b2eb      	uxtb	r3, r5
 800d06a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d1f1      	bne.n	800d054 <xQueueReceive+0xc4>
		pxQueue->cTxLock = queueUNLOCKED;
 800d070:	23ff      	movs	r3, #255	; 0xff
 800d072:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800d076:	f7ff f91f 	bl	800c2b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800d07a:	f7ff f8fb 	bl	800c274 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800d07e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800d082:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d084:	2d00      	cmp	r5, #0
 800d086:	dd16      	ble.n	800d0b6 <xQueueReceive+0x126>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d088:	6923      	ldr	r3, [r4, #16]
 800d08a:	b1a3      	cbz	r3, 800d0b6 <xQueueReceive+0x126>
 800d08c:	f104 0910 	add.w	r9, r4, #16
 800d090:	e005      	b.n	800d09e <xQueueReceive+0x10e>
 800d092:	3d01      	subs	r5, #1
 800d094:	b2eb      	uxtb	r3, r5
 800d096:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d098:	b16b      	cbz	r3, 800d0b6 <xQueueReceive+0x126>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d09a:	6923      	ldr	r3, [r4, #16]
 800d09c:	b15b      	cbz	r3, 800d0b6 <xQueueReceive+0x126>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d09e:	4648      	mov	r0, r9
 800d0a0:	f000 ff3e 	bl	800df20 <xTaskRemoveFromEventList>
 800d0a4:	2800      	cmp	r0, #0
 800d0a6:	d0f4      	beq.n	800d092 <xQueueReceive+0x102>
 800d0a8:	3d01      	subs	r5, #1
					vTaskMissedYield();
 800d0aa:	f000 ffd5 	bl	800e058 <vTaskMissedYield>
 800d0ae:	b2eb      	uxtb	r3, r5
 800d0b0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d1f1      	bne.n	800d09a <xQueueReceive+0x10a>
		pxQueue->cRxLock = queueUNLOCKED;
 800d0b6:	23ff      	movs	r3, #255	; 0xff
 800d0b8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800d0bc:	f7ff f8fc 	bl	800c2b8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 800d0c0:	f000 fd92 	bl	800dbe8 <xTaskResumeAll>
 800d0c4:	b938      	cbnz	r0, 800d0d6 <xQueueReceive+0x146>
					portYIELD_WITHIN_API();
 800d0c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d0ca:	f8c8 3000 	str.w	r3, [r8]
 800d0ce:	f3bf 8f4f 	dsb	sy
 800d0d2:	f3bf 8f6f 	isb	sy
 800d0d6:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800d0d8:	f7ff f8cc 	bl	800c274 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d0dc:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d0e0:	f1b9 0f00 	cmp.w	r9, #0
 800d0e4:	f43f af7a 	beq.w	800cfdc <xQueueReceive+0x4c>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d0e8:	4631      	mov	r1, r6
 800d0ea:	4620      	mov	r0, r4
 800d0ec:	f7ff fb3a 	bl	800c764 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d0f0:	f109 33ff 	add.w	r3, r9, #4294967295
 800d0f4:	63a3      	str	r3, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0f6:	6923      	ldr	r3, [r4, #16]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	f040 80bc 	bne.w	800d276 <xQueueReceive+0x2e6>
				taskEXIT_CRITICAL();
 800d0fe:	f7ff f8db 	bl	800c2b8 <vPortExitCritical>
				return pdPASS;
 800d102:	2001      	movs	r0, #1
 800d104:	e0a7      	b.n	800d256 <xQueueReceive+0x2c6>
	taskEXIT_CRITICAL();
 800d106:	f7ff f8d7 	bl	800c2b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800d10a:	f7ff f8b3 	bl	800c274 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800d10e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800d112:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d114:	2d00      	cmp	r5, #0
 800d116:	dd16      	ble.n	800d146 <xQueueReceive+0x1b6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d118:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d11a:	b1a3      	cbz	r3, 800d146 <xQueueReceive+0x1b6>
 800d11c:	f104 0924 	add.w	r9, r4, #36	; 0x24
 800d120:	e005      	b.n	800d12e <xQueueReceive+0x19e>
 800d122:	3d01      	subs	r5, #1
 800d124:	b2eb      	uxtb	r3, r5
 800d126:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d128:	b16b      	cbz	r3, 800d146 <xQueueReceive+0x1b6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d12a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d12c:	b15b      	cbz	r3, 800d146 <xQueueReceive+0x1b6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d12e:	4648      	mov	r0, r9
 800d130:	f000 fef6 	bl	800df20 <xTaskRemoveFromEventList>
 800d134:	2800      	cmp	r0, #0
 800d136:	d0f4      	beq.n	800d122 <xQueueReceive+0x192>
 800d138:	3d01      	subs	r5, #1
						vTaskMissedYield();
 800d13a:	f000 ff8d 	bl	800e058 <vTaskMissedYield>
 800d13e:	b2eb      	uxtb	r3, r5
 800d140:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d142:	2b00      	cmp	r3, #0
 800d144:	d1f1      	bne.n	800d12a <xQueueReceive+0x19a>
		pxQueue->cTxLock = queueUNLOCKED;
 800d146:	23ff      	movs	r3, #255	; 0xff
 800d148:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800d14c:	f7ff f8b4 	bl	800c2b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800d150:	f7ff f890 	bl	800c274 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800d154:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800d158:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d15a:	2d00      	cmp	r5, #0
 800d15c:	dd16      	ble.n	800d18c <xQueueReceive+0x1fc>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d15e:	6923      	ldr	r3, [r4, #16]
 800d160:	b1a3      	cbz	r3, 800d18c <xQueueReceive+0x1fc>
 800d162:	f104 0910 	add.w	r9, r4, #16
 800d166:	e005      	b.n	800d174 <xQueueReceive+0x1e4>
 800d168:	3d01      	subs	r5, #1
 800d16a:	b2eb      	uxtb	r3, r5
 800d16c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d16e:	b16b      	cbz	r3, 800d18c <xQueueReceive+0x1fc>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d170:	6923      	ldr	r3, [r4, #16]
 800d172:	b15b      	cbz	r3, 800d18c <xQueueReceive+0x1fc>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d174:	4648      	mov	r0, r9
 800d176:	f000 fed3 	bl	800df20 <xTaskRemoveFromEventList>
 800d17a:	2800      	cmp	r0, #0
 800d17c:	d0f4      	beq.n	800d168 <xQueueReceive+0x1d8>
 800d17e:	3d01      	subs	r5, #1
					vTaskMissedYield();
 800d180:	f000 ff6a 	bl	800e058 <vTaskMissedYield>
 800d184:	b2eb      	uxtb	r3, r5
 800d186:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d1f1      	bne.n	800d170 <xQueueReceive+0x1e0>
		pxQueue->cRxLock = queueUNLOCKED;
 800d18c:	23ff      	movs	r3, #255	; 0xff
 800d18e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800d192:	f7ff f891 	bl	800c2b8 <vPortExitCritical>
 800d196:	2501      	movs	r5, #1
				( void ) xTaskResumeAll();
 800d198:	f000 fd26 	bl	800dbe8 <xTaskResumeAll>
 800d19c:	e79c      	b.n	800d0d8 <xQueueReceive+0x148>
	taskENTER_CRITICAL();
 800d19e:	f7ff f869 	bl	800c274 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800d1a2:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800d1a6:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d1a8:	2d00      	cmp	r5, #0
 800d1aa:	dd16      	ble.n	800d1da <xQueueReceive+0x24a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1ae:	b1a3      	cbz	r3, 800d1da <xQueueReceive+0x24a>
 800d1b0:	f104 0924 	add.w	r9, r4, #36	; 0x24
 800d1b4:	e005      	b.n	800d1c2 <xQueueReceive+0x232>
 800d1b6:	3d01      	subs	r5, #1
 800d1b8:	b2eb      	uxtb	r3, r5
 800d1ba:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d1bc:	b16b      	cbz	r3, 800d1da <xQueueReceive+0x24a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1c0:	b15b      	cbz	r3, 800d1da <xQueueReceive+0x24a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d1c2:	4648      	mov	r0, r9
 800d1c4:	f000 feac 	bl	800df20 <xTaskRemoveFromEventList>
 800d1c8:	2800      	cmp	r0, #0
 800d1ca:	d0f4      	beq.n	800d1b6 <xQueueReceive+0x226>
 800d1cc:	3d01      	subs	r5, #1
						vTaskMissedYield();
 800d1ce:	f000 ff43 	bl	800e058 <vTaskMissedYield>
 800d1d2:	b2eb      	uxtb	r3, r5
 800d1d4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d1f1      	bne.n	800d1be <xQueueReceive+0x22e>
		pxQueue->cTxLock = queueUNLOCKED;
 800d1da:	23ff      	movs	r3, #255	; 0xff
 800d1dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800d1e0:	f7ff f86a 	bl	800c2b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800d1e4:	f7ff f846 	bl	800c274 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800d1e8:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800d1ec:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d1ee:	2d00      	cmp	r5, #0
 800d1f0:	dd16      	ble.n	800d220 <xQueueReceive+0x290>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1f2:	6923      	ldr	r3, [r4, #16]
 800d1f4:	b1a3      	cbz	r3, 800d220 <xQueueReceive+0x290>
 800d1f6:	f104 0910 	add.w	r9, r4, #16
 800d1fa:	e005      	b.n	800d208 <xQueueReceive+0x278>
 800d1fc:	3d01      	subs	r5, #1
 800d1fe:	b2eb      	uxtb	r3, r5
 800d200:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d202:	b16b      	cbz	r3, 800d220 <xQueueReceive+0x290>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d204:	6923      	ldr	r3, [r4, #16]
 800d206:	b15b      	cbz	r3, 800d220 <xQueueReceive+0x290>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d208:	4648      	mov	r0, r9
 800d20a:	f000 fe89 	bl	800df20 <xTaskRemoveFromEventList>
 800d20e:	2800      	cmp	r0, #0
 800d210:	d0f4      	beq.n	800d1fc <xQueueReceive+0x26c>
 800d212:	3d01      	subs	r5, #1
					vTaskMissedYield();
 800d214:	f000 ff20 	bl	800e058 <vTaskMissedYield>
 800d218:	b2eb      	uxtb	r3, r5
 800d21a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d1f1      	bne.n	800d204 <xQueueReceive+0x274>
		pxQueue->cRxLock = queueUNLOCKED;
 800d220:	23ff      	movs	r3, #255	; 0xff
 800d222:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800d226:	f7ff f847 	bl	800c2b8 <vPortExitCritical>
			( void ) xTaskResumeAll();
 800d22a:	f000 fcdd 	bl	800dbe8 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800d22e:	f7ff f821 	bl	800c274 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d232:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d234:	b163      	cbz	r3, 800d250 <xQueueReceive+0x2c0>
	taskEXIT_CRITICAL();
 800d236:	f7ff f83f 	bl	800c2b8 <vPortExitCritical>
 800d23a:	2501      	movs	r5, #1
 800d23c:	e74c      	b.n	800d0d8 <xQueueReceive+0x148>
 800d23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d242:	f383 8811 	msr	BASEPRI, r3
 800d246:	f3bf 8f6f 	isb	sy
 800d24a:	f3bf 8f4f 	dsb	sy
 800d24e:	e7fe      	b.n	800d24e <xQueueReceive+0x2be>
					taskEXIT_CRITICAL();
 800d250:	f7ff f832 	bl	800c2b8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800d254:	2000      	movs	r0, #0
}
 800d256:	b005      	add	sp, #20
 800d258:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d25c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d25e:	2b00      	cmp	r3, #0
 800d260:	f43f aea0 	beq.w	800cfa4 <xQueueReceive+0x14>
 800d264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d268:	f383 8811 	msr	BASEPRI, r3
 800d26c:	f3bf 8f6f 	isb	sy
 800d270:	f3bf 8f4f 	dsb	sy
 800d274:	e7fe      	b.n	800d274 <xQueueReceive+0x2e4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d276:	f104 0010 	add.w	r0, r4, #16
 800d27a:	f000 fe51 	bl	800df20 <xTaskRemoveFromEventList>
 800d27e:	2800      	cmp	r0, #0
 800d280:	f43f af3d 	beq.w	800d0fe <xQueueReceive+0x16e>
						queueYIELD_IF_USING_PREEMPTION();
 800d284:	4b04      	ldr	r3, [pc, #16]	; (800d298 <xQueueReceive+0x308>)
 800d286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d28a:	601a      	str	r2, [r3, #0]
 800d28c:	f3bf 8f4f 	dsb	sy
 800d290:	f3bf 8f6f 	isb	sy
 800d294:	e733      	b.n	800d0fe <xQueueReceive+0x16e>
 800d296:	bf00      	nop
 800d298:	e000ed04 	.word	0xe000ed04

0800d29c <xQueueSemaphoreTake>:
{
 800d29c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d2a0:	b085      	sub	sp, #20
 800d2a2:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800d2a4:	b150      	cbz	r0, 800d2bc <xQueueSemaphoreTake+0x20>
	configASSERT( pxQueue->uxItemSize == 0 );
 800d2a6:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800d2a8:	b18d      	cbz	r5, 800d2ce <xQueueSemaphoreTake+0x32>
 800d2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ae:	f383 8811 	msr	BASEPRI, r3
 800d2b2:	f3bf 8f6f 	isb	sy
 800d2b6:	f3bf 8f4f 	dsb	sy
 800d2ba:	e7fe      	b.n	800d2ba <xQueueSemaphoreTake+0x1e>
 800d2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c0:	f383 8811 	msr	BASEPRI, r3
 800d2c4:	f3bf 8f6f 	isb	sy
 800d2c8:	f3bf 8f4f 	dsb	sy
 800d2cc:	e7fe      	b.n	800d2cc <xQueueSemaphoreTake+0x30>
 800d2ce:	4604      	mov	r4, r0
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d2d0:	f000 fec8 	bl	800e064 <xTaskGetSchedulerState>
 800d2d4:	b918      	cbnz	r0, 800d2de <xQueueSemaphoreTake+0x42>
 800d2d6:	9d01      	ldr	r5, [sp, #4]
 800d2d8:	2d00      	cmp	r5, #0
 800d2da:	f040 8102 	bne.w	800d4e2 <xQueueSemaphoreTake+0x246>
		taskENTER_CRITICAL();
 800d2de:	f7fe ffc9 	bl	800c274 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d2e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
					portYIELD_WITHIN_API();
 800d2e4:	f8df 8268 	ldr.w	r8, [pc, #616]	; 800d550 <xQueueSemaphoreTake+0x2b4>
 800d2e8:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800d2ea:	2700      	movs	r7, #0
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	f040 8087 	bne.w	800d400 <xQueueSemaphoreTake+0x164>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d2f2:	9b01      	ldr	r3, [sp, #4]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	f000 810c 	beq.w	800d512 <xQueueSemaphoreTake+0x276>
				else if( xEntryTimeSet == pdFALSE )
 800d2fa:	b916      	cbnz	r6, 800d302 <xQueueSemaphoreTake+0x66>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d2fc:	a802      	add	r0, sp, #8
 800d2fe:	f000 fe53 	bl	800dfa8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800d302:	f7fe ffd9 	bl	800c2b8 <vPortExitCritical>
		vTaskSuspendAll();
 800d306:	f000 fbb3 	bl	800da70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d30a:	f7fe ffb3 	bl	800c274 <vPortEnterCritical>
 800d30e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d312:	2bff      	cmp	r3, #255	; 0xff
 800d314:	bf08      	it	eq
 800d316:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 800d31a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d31e:	2bff      	cmp	r3, #255	; 0xff
 800d320:	bf08      	it	eq
 800d322:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 800d326:	f7fe ffc7 	bl	800c2b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d32a:	a901      	add	r1, sp, #4
 800d32c:	a802      	add	r0, sp, #8
 800d32e:	f000 fe47 	bl	800dfc0 <xTaskCheckForTimeOut>
 800d332:	2800      	cmp	r0, #0
 800d334:	d17d      	bne.n	800d432 <xQueueSemaphoreTake+0x196>
	taskENTER_CRITICAL();
 800d336:	f7fe ff9d 	bl	800c274 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d33a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d170      	bne.n	800d422 <xQueueSemaphoreTake+0x186>
	taskEXIT_CRITICAL();
 800d340:	f7fe ffba 	bl	800c2b8 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d344:	6823      	ldr	r3, [r4, #0]
 800d346:	2b00      	cmp	r3, #0
 800d348:	f000 80c2 	beq.w	800d4d0 <xQueueSemaphoreTake+0x234>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d34c:	f104 0924 	add.w	r9, r4, #36	; 0x24
 800d350:	4648      	mov	r0, r9
 800d352:	9901      	ldr	r1, [sp, #4]
 800d354:	f000 fd32 	bl	800ddbc <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 800d358:	f7fe ff8c 	bl	800c274 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800d35c:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
 800d360:	b276      	sxtb	r6, r6
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d362:	2e00      	cmp	r6, #0
 800d364:	dc04      	bgt.n	800d370 <xQueueSemaphoreTake+0xd4>
 800d366:	e011      	b.n	800d38c <xQueueSemaphoreTake+0xf0>
 800d368:	3e01      	subs	r6, #1
 800d36a:	b2f3      	uxtb	r3, r6
 800d36c:	b25e      	sxtb	r6, r3
 800d36e:	b16b      	cbz	r3, 800d38c <xQueueSemaphoreTake+0xf0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d370:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d372:	b15b      	cbz	r3, 800d38c <xQueueSemaphoreTake+0xf0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d374:	4648      	mov	r0, r9
 800d376:	f000 fdd3 	bl	800df20 <xTaskRemoveFromEventList>
 800d37a:	2800      	cmp	r0, #0
 800d37c:	d0f4      	beq.n	800d368 <xQueueSemaphoreTake+0xcc>
 800d37e:	3e01      	subs	r6, #1
						vTaskMissedYield();
 800d380:	f000 fe6a 	bl	800e058 <vTaskMissedYield>
 800d384:	b2f3      	uxtb	r3, r6
 800d386:	b25e      	sxtb	r6, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d1f1      	bne.n	800d370 <xQueueSemaphoreTake+0xd4>
		pxQueue->cTxLock = queueUNLOCKED;
 800d38c:	23ff      	movs	r3, #255	; 0xff
 800d38e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800d392:	f7fe ff91 	bl	800c2b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800d396:	f7fe ff6d 	bl	800c274 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800d39a:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 800d39e:	b276      	sxtb	r6, r6
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d3a0:	2e00      	cmp	r6, #0
 800d3a2:	dd16      	ble.n	800d3d2 <xQueueSemaphoreTake+0x136>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d3a4:	6923      	ldr	r3, [r4, #16]
 800d3a6:	b1a3      	cbz	r3, 800d3d2 <xQueueSemaphoreTake+0x136>
 800d3a8:	f104 0910 	add.w	r9, r4, #16
 800d3ac:	e005      	b.n	800d3ba <xQueueSemaphoreTake+0x11e>
 800d3ae:	3e01      	subs	r6, #1
 800d3b0:	b2f3      	uxtb	r3, r6
 800d3b2:	b25e      	sxtb	r6, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d3b4:	b16b      	cbz	r3, 800d3d2 <xQueueSemaphoreTake+0x136>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d3b6:	6923      	ldr	r3, [r4, #16]
 800d3b8:	b15b      	cbz	r3, 800d3d2 <xQueueSemaphoreTake+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d3ba:	4648      	mov	r0, r9
 800d3bc:	f000 fdb0 	bl	800df20 <xTaskRemoveFromEventList>
 800d3c0:	2800      	cmp	r0, #0
 800d3c2:	d0f4      	beq.n	800d3ae <xQueueSemaphoreTake+0x112>
 800d3c4:	3e01      	subs	r6, #1
					vTaskMissedYield();
 800d3c6:	f000 fe47 	bl	800e058 <vTaskMissedYield>
 800d3ca:	b2f3      	uxtb	r3, r6
 800d3cc:	b25e      	sxtb	r6, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d1f1      	bne.n	800d3b6 <xQueueSemaphoreTake+0x11a>
		pxQueue->cRxLock = queueUNLOCKED;
 800d3d2:	23ff      	movs	r3, #255	; 0xff
 800d3d4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800d3d8:	f7fe ff6e 	bl	800c2b8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 800d3dc:	f000 fc04 	bl	800dbe8 <xTaskResumeAll>
 800d3e0:	b938      	cbnz	r0, 800d3f2 <xQueueSemaphoreTake+0x156>
					portYIELD_WITHIN_API();
 800d3e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d3e6:	f8c8 3000 	str.w	r3, [r8]
 800d3ea:	f3bf 8f4f 	dsb	sy
 800d3ee:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 800d3f2:	f7fe ff3f 	bl	800c274 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d3f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d3f8:	2601      	movs	r6, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	f43f af79 	beq.w	800d2f2 <xQueueSemaphoreTake+0x56>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d400:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d402:	3b01      	subs	r3, #1
 800d404:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d406:	b912      	cbnz	r2, 800d40e <xQueueSemaphoreTake+0x172>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800d408:	f000 ff50 	bl	800e2ac <pvTaskIncrementMutexHeldCount>
 800d40c:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d40e:	6923      	ldr	r3, [r4, #16]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d16f      	bne.n	800d4f4 <xQueueSemaphoreTake+0x258>
				taskEXIT_CRITICAL();
 800d414:	f7fe ff50 	bl	800c2b8 <vPortExitCritical>
				return pdPASS;
 800d418:	2501      	movs	r5, #1
}
 800d41a:	4628      	mov	r0, r5
 800d41c:	b005      	add	sp, #20
 800d41e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 800d422:	f7fe ff49 	bl	800c2b8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800d426:	4620      	mov	r0, r4
 800d428:	f7ff f9b0 	bl	800c78c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d42c:	f000 fbdc 	bl	800dbe8 <xTaskResumeAll>
 800d430:	e7df      	b.n	800d3f2 <xQueueSemaphoreTake+0x156>
	taskENTER_CRITICAL();
 800d432:	f7fe ff1f 	bl	800c274 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800d436:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
 800d43a:	b276      	sxtb	r6, r6
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d43c:	2e00      	cmp	r6, #0
 800d43e:	dd16      	ble.n	800d46e <xQueueSemaphoreTake+0x1d2>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d440:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d442:	b1a3      	cbz	r3, 800d46e <xQueueSemaphoreTake+0x1d2>
 800d444:	f104 0924 	add.w	r9, r4, #36	; 0x24
 800d448:	e005      	b.n	800d456 <xQueueSemaphoreTake+0x1ba>
 800d44a:	3e01      	subs	r6, #1
 800d44c:	b2f3      	uxtb	r3, r6
 800d44e:	b25e      	sxtb	r6, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d450:	b16b      	cbz	r3, 800d46e <xQueueSemaphoreTake+0x1d2>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d452:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d454:	b15b      	cbz	r3, 800d46e <xQueueSemaphoreTake+0x1d2>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d456:	4648      	mov	r0, r9
 800d458:	f000 fd62 	bl	800df20 <xTaskRemoveFromEventList>
 800d45c:	2800      	cmp	r0, #0
 800d45e:	d0f4      	beq.n	800d44a <xQueueSemaphoreTake+0x1ae>
 800d460:	3e01      	subs	r6, #1
						vTaskMissedYield();
 800d462:	f000 fdf9 	bl	800e058 <vTaskMissedYield>
 800d466:	b2f3      	uxtb	r3, r6
 800d468:	b25e      	sxtb	r6, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d1f1      	bne.n	800d452 <xQueueSemaphoreTake+0x1b6>
		pxQueue->cTxLock = queueUNLOCKED;
 800d46e:	23ff      	movs	r3, #255	; 0xff
 800d470:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800d474:	f7fe ff20 	bl	800c2b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800d478:	f7fe fefc 	bl	800c274 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800d47c:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 800d480:	b276      	sxtb	r6, r6
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d482:	2e00      	cmp	r6, #0
 800d484:	dd16      	ble.n	800d4b4 <xQueueSemaphoreTake+0x218>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d486:	6923      	ldr	r3, [r4, #16]
 800d488:	b1a3      	cbz	r3, 800d4b4 <xQueueSemaphoreTake+0x218>
 800d48a:	f104 0910 	add.w	r9, r4, #16
 800d48e:	e005      	b.n	800d49c <xQueueSemaphoreTake+0x200>
 800d490:	3e01      	subs	r6, #1
 800d492:	b2f3      	uxtb	r3, r6
 800d494:	b25e      	sxtb	r6, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d496:	b16b      	cbz	r3, 800d4b4 <xQueueSemaphoreTake+0x218>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d498:	6923      	ldr	r3, [r4, #16]
 800d49a:	b15b      	cbz	r3, 800d4b4 <xQueueSemaphoreTake+0x218>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d49c:	4648      	mov	r0, r9
 800d49e:	f000 fd3f 	bl	800df20 <xTaskRemoveFromEventList>
 800d4a2:	2800      	cmp	r0, #0
 800d4a4:	d0f4      	beq.n	800d490 <xQueueSemaphoreTake+0x1f4>
 800d4a6:	3e01      	subs	r6, #1
					vTaskMissedYield();
 800d4a8:	f000 fdd6 	bl	800e058 <vTaskMissedYield>
 800d4ac:	b2f3      	uxtb	r3, r6
 800d4ae:	b25e      	sxtb	r6, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d1f1      	bne.n	800d498 <xQueueSemaphoreTake+0x1fc>
		pxQueue->cRxLock = queueUNLOCKED;
 800d4b4:	23ff      	movs	r3, #255	; 0xff
 800d4b6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800d4ba:	f7fe fefd 	bl	800c2b8 <vPortExitCritical>
			( void ) xTaskResumeAll();
 800d4be:	f000 fb93 	bl	800dbe8 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800d4c2:	f7fe fed7 	bl	800c274 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d4c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d4c8:	b36b      	cbz	r3, 800d526 <xQueueSemaphoreTake+0x28a>
	taskEXIT_CRITICAL();
 800d4ca:	f7fe fef5 	bl	800c2b8 <vPortExitCritical>
 800d4ce:	e790      	b.n	800d3f2 <xQueueSemaphoreTake+0x156>
						taskENTER_CRITICAL();
 800d4d0:	f7fe fed0 	bl	800c274 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800d4d4:	6860      	ldr	r0, [r4, #4]
 800d4d6:	f000 fdd5 	bl	800e084 <xTaskPriorityInherit>
 800d4da:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800d4dc:	f7fe feec 	bl	800c2b8 <vPortExitCritical>
 800d4e0:	e734      	b.n	800d34c <xQueueSemaphoreTake+0xb0>
 800d4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4e6:	f383 8811 	msr	BASEPRI, r3
 800d4ea:	f3bf 8f6f 	isb	sy
 800d4ee:	f3bf 8f4f 	dsb	sy
 800d4f2:	e7fe      	b.n	800d4f2 <xQueueSemaphoreTake+0x256>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d4f4:	f104 0010 	add.w	r0, r4, #16
 800d4f8:	f000 fd12 	bl	800df20 <xTaskRemoveFromEventList>
 800d4fc:	2800      	cmp	r0, #0
 800d4fe:	d089      	beq.n	800d414 <xQueueSemaphoreTake+0x178>
						queueYIELD_IF_USING_PREEMPTION();
 800d500:	4b13      	ldr	r3, [pc, #76]	; (800d550 <xQueueSemaphoreTake+0x2b4>)
 800d502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d506:	601a      	str	r2, [r3, #0]
 800d508:	f3bf 8f4f 	dsb	sy
 800d50c:	f3bf 8f6f 	isb	sy
 800d510:	e780      	b.n	800d414 <xQueueSemaphoreTake+0x178>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d512:	b1cd      	cbz	r5, 800d548 <xQueueSemaphoreTake+0x2ac>
 800d514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d518:	f383 8811 	msr	BASEPRI, r3
 800d51c:	f3bf 8f6f 	isb	sy
 800d520:	f3bf 8f4f 	dsb	sy
 800d524:	e7fe      	b.n	800d524 <xQueueSemaphoreTake+0x288>
	taskEXIT_CRITICAL();
 800d526:	f7fe fec7 	bl	800c2b8 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 800d52a:	2d00      	cmp	r5, #0
 800d52c:	f43f af75 	beq.w	800d41a <xQueueSemaphoreTake+0x17e>
						taskENTER_CRITICAL();
 800d530:	f7fe fea0 	bl	800c274 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800d534:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d536:	b119      	cbz	r1, 800d540 <xQueueSemaphoreTake+0x2a4>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d538:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d53a:	6819      	ldr	r1, [r3, #0]
 800d53c:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800d540:	6860      	ldr	r0, [r4, #4]
 800d542:	f000 fe51 	bl	800e1e8 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 800d546:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 800d548:	f7fe feb6 	bl	800c2b8 <vPortExitCritical>
 800d54c:	e765      	b.n	800d41a <xQueueSemaphoreTake+0x17e>
 800d54e:	bf00      	nop
 800d550:	e000ed04 	.word	0xe000ed04

0800d554 <xQueueReceiveFromISR>:
{
 800d554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800d558:	b1b0      	cbz	r0, 800d588 <xQueueReceiveFromISR+0x34>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d55a:	b379      	cbz	r1, 800d5bc <xQueueReceiveFromISR+0x68>
 800d55c:	4605      	mov	r5, r0
 800d55e:	4690      	mov	r8, r2
 800d560:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d562:	f7fe ffab 	bl	800c4bc <vPortValidateInterruptPriority>
	__asm volatile
 800d566:	f3ef 8711 	mrs	r7, BASEPRI
 800d56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d56e:	f383 8811 	msr	BASEPRI, r3
 800d572:	f3bf 8f6f 	isb	sy
 800d576:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d57a:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d57c:	b96c      	cbnz	r4, 800d59a <xQueueReceiveFromISR+0x46>
			xReturn = pdFAIL;
 800d57e:	4620      	mov	r0, r4
	__asm volatile
 800d580:	f387 8811 	msr	BASEPRI, r7
}
 800d584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800d588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d58c:	f383 8811 	msr	BASEPRI, r3
 800d590:	f3bf 8f6f 	isb	sy
 800d594:	f3bf 8f4f 	dsb	sy
 800d598:	e7fe      	b.n	800d598 <xQueueReceiveFromISR+0x44>
			const int8_t cRxLock = pxQueue->cRxLock;
 800d59a:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d59e:	4649      	mov	r1, r9
 800d5a0:	4628      	mov	r0, r5
			const int8_t cRxLock = pxQueue->cRxLock;
 800d5a2:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d5a4:	f7ff f8de 	bl	800c764 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d5a8:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 800d5aa:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d5ac:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800d5ae:	d011      	beq.n	800d5d4 <xQueueReceiveFromISR+0x80>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d5b0:	1c73      	adds	r3, r6, #1
 800d5b2:	b25b      	sxtb	r3, r3
 800d5b4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
			xReturn = pdPASS;
 800d5b8:	2001      	movs	r0, #1
 800d5ba:	e7e1      	b.n	800d580 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d5bc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d0cc      	beq.n	800d55c <xQueueReceiveFromISR+0x8>
 800d5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c6:	f383 8811 	msr	BASEPRI, r3
 800d5ca:	f3bf 8f6f 	isb	sy
 800d5ce:	f3bf 8f4f 	dsb	sy
 800d5d2:	e7fe      	b.n	800d5d2 <xQueueReceiveFromISR+0x7e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d5d4:	692b      	ldr	r3, [r5, #16]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d0ee      	beq.n	800d5b8 <xQueueReceiveFromISR+0x64>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5da:	f105 0010 	add.w	r0, r5, #16
 800d5de:	f000 fc9f 	bl	800df20 <xTaskRemoveFromEventList>
 800d5e2:	2800      	cmp	r0, #0
 800d5e4:	d0e8      	beq.n	800d5b8 <xQueueReceiveFromISR+0x64>
						if( pxHigherPriorityTaskWoken != NULL )
 800d5e6:	f1b8 0f00 	cmp.w	r8, #0
 800d5ea:	d0e5      	beq.n	800d5b8 <xQueueReceiveFromISR+0x64>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d5ec:	2001      	movs	r0, #1
 800d5ee:	f8c8 0000 	str.w	r0, [r8]
 800d5f2:	e7c5      	b.n	800d580 <xQueueReceiveFromISR+0x2c>

0800d5f4 <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d5f4:	4b13      	ldr	r3, [pc, #76]	; (800d644 <vQueueAddToRegistry+0x50>)
 800d5f6:	681a      	ldr	r2, [r3, #0]
 800d5f8:	b17a      	cbz	r2, 800d61a <vQueueAddToRegistry+0x26>
 800d5fa:	689a      	ldr	r2, [r3, #8]
 800d5fc:	b1b2      	cbz	r2, 800d62c <vQueueAddToRegistry+0x38>
 800d5fe:	691a      	ldr	r2, [r3, #16]
 800d600:	b1b2      	cbz	r2, 800d630 <vQueueAddToRegistry+0x3c>
 800d602:	699a      	ldr	r2, [r3, #24]
 800d604:	b1b2      	cbz	r2, 800d634 <vQueueAddToRegistry+0x40>
 800d606:	6a1a      	ldr	r2, [r3, #32]
 800d608:	b1b2      	cbz	r2, 800d638 <vQueueAddToRegistry+0x44>
 800d60a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d60c:	b1b2      	cbz	r2, 800d63c <vQueueAddToRegistry+0x48>
 800d60e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d610:	b112      	cbz	r2, 800d618 <vQueueAddToRegistry+0x24>
 800d612:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d614:	b1a2      	cbz	r2, 800d640 <vQueueAddToRegistry+0x4c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d616:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d618:	2206      	movs	r2, #6
	{
 800d61a:	b410      	push	{r4}
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d61c:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d620:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d624:	6060      	str	r0, [r4, #4]
	}
 800d626:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d62a:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d62c:	2201      	movs	r2, #1
 800d62e:	e7f4      	b.n	800d61a <vQueueAddToRegistry+0x26>
 800d630:	2202      	movs	r2, #2
 800d632:	e7f2      	b.n	800d61a <vQueueAddToRegistry+0x26>
 800d634:	2203      	movs	r2, #3
 800d636:	e7f0      	b.n	800d61a <vQueueAddToRegistry+0x26>
 800d638:	2204      	movs	r2, #4
 800d63a:	e7ee      	b.n	800d61a <vQueueAddToRegistry+0x26>
 800d63c:	2205      	movs	r2, #5
 800d63e:	e7ec      	b.n	800d61a <vQueueAddToRegistry+0x26>
 800d640:	2207      	movs	r2, #7
 800d642:	e7ea      	b.n	800d61a <vQueueAddToRegistry+0x26>
 800d644:	20005320 	.word	0x20005320

0800d648 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d648:	b570      	push	{r4, r5, r6, lr}
 800d64a:	4605      	mov	r5, r0
 800d64c:	460c      	mov	r4, r1
 800d64e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d650:	f7fe fe10 	bl	800c274 <vPortEnterCritical>
 800d654:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 800d658:	2bff      	cmp	r3, #255	; 0xff
 800d65a:	bf04      	itt	eq
 800d65c:	2300      	moveq	r3, #0
 800d65e:	f885 3044 	strbeq.w	r3, [r5, #68]	; 0x44
 800d662:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 800d666:	2bff      	cmp	r3, #255	; 0xff
 800d668:	bf04      	itt	eq
 800d66a:	2300      	moveq	r3, #0
 800d66c:	f885 3045 	strbeq.w	r3, [r5, #69]	; 0x45
 800d670:	f7fe fe22 	bl	800c2b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d674:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800d676:	b92b      	cbnz	r3, 800d684 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d678:	4632      	mov	r2, r6
 800d67a:	4621      	mov	r1, r4
 800d67c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800d680:	f000 fbee 	bl	800de60 <vTaskPlaceOnEventListRestricted>
	taskENTER_CRITICAL();
 800d684:	f7fe fdf6 	bl	800c274 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800d688:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800d68c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d68e:	2c00      	cmp	r4, #0
 800d690:	dd16      	ble.n	800d6c0 <vQueueWaitForMessageRestricted+0x78>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d692:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d694:	b1a3      	cbz	r3, 800d6c0 <vQueueWaitForMessageRestricted+0x78>
 800d696:	f105 0624 	add.w	r6, r5, #36	; 0x24
 800d69a:	e005      	b.n	800d6a8 <vQueueWaitForMessageRestricted+0x60>
 800d69c:	3c01      	subs	r4, #1
 800d69e:	b2e3      	uxtb	r3, r4
 800d6a0:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d6a2:	b16b      	cbz	r3, 800d6c0 <vQueueWaitForMessageRestricted+0x78>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d6a4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d6a6:	b15b      	cbz	r3, 800d6c0 <vQueueWaitForMessageRestricted+0x78>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d6a8:	4630      	mov	r0, r6
 800d6aa:	f000 fc39 	bl	800df20 <xTaskRemoveFromEventList>
 800d6ae:	2800      	cmp	r0, #0
 800d6b0:	d0f4      	beq.n	800d69c <vQueueWaitForMessageRestricted+0x54>
 800d6b2:	3c01      	subs	r4, #1
						vTaskMissedYield();
 800d6b4:	f000 fcd0 	bl	800e058 <vTaskMissedYield>
 800d6b8:	b2e3      	uxtb	r3, r4
 800d6ba:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d1f1      	bne.n	800d6a4 <vQueueWaitForMessageRestricted+0x5c>
		pxQueue->cTxLock = queueUNLOCKED;
 800d6c0:	23ff      	movs	r3, #255	; 0xff
 800d6c2:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 800d6c6:	f7fe fdf7 	bl	800c2b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800d6ca:	f7fe fdd3 	bl	800c274 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800d6ce:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800d6d2:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d6d4:	2c00      	cmp	r4, #0
 800d6d6:	dd16      	ble.n	800d706 <vQueueWaitForMessageRestricted+0xbe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6d8:	692b      	ldr	r3, [r5, #16]
 800d6da:	b1a3      	cbz	r3, 800d706 <vQueueWaitForMessageRestricted+0xbe>
 800d6dc:	f105 0610 	add.w	r6, r5, #16
 800d6e0:	e005      	b.n	800d6ee <vQueueWaitForMessageRestricted+0xa6>
 800d6e2:	3c01      	subs	r4, #1
 800d6e4:	b2e3      	uxtb	r3, r4
 800d6e6:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d6e8:	b16b      	cbz	r3, 800d706 <vQueueWaitForMessageRestricted+0xbe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6ea:	692b      	ldr	r3, [r5, #16]
 800d6ec:	b15b      	cbz	r3, 800d706 <vQueueWaitForMessageRestricted+0xbe>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6ee:	4630      	mov	r0, r6
 800d6f0:	f000 fc16 	bl	800df20 <xTaskRemoveFromEventList>
 800d6f4:	2800      	cmp	r0, #0
 800d6f6:	d0f4      	beq.n	800d6e2 <vQueueWaitForMessageRestricted+0x9a>
 800d6f8:	3c01      	subs	r4, #1
					vTaskMissedYield();
 800d6fa:	f000 fcad 	bl	800e058 <vTaskMissedYield>
 800d6fe:	b2e3      	uxtb	r3, r4
 800d700:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d702:	2b00      	cmp	r3, #0
 800d704:	d1f1      	bne.n	800d6ea <vQueueWaitForMessageRestricted+0xa2>
		pxQueue->cRxLock = queueUNLOCKED;
 800d706:	23ff      	movs	r3, #255	; 0xff
 800d708:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 800d70c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800d710:	f7fe bdd2 	b.w	800c2b8 <vPortExitCritical>

0800d714 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d714:	b580      	push	{r7, lr}
 800d716:	4d16      	ldr	r5, [pc, #88]	; (800d770 <prvIdleTask+0x5c>)
 800d718:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800d77c <prvIdleTask+0x68>
 800d71c:	4f15      	ldr	r7, [pc, #84]	; (800d774 <prvIdleTask+0x60>)
 800d71e:	4e16      	ldr	r6, [pc, #88]	; (800d778 <prvIdleTask+0x64>)
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
			{
				taskYIELD();
 800d720:	f8df a05c 	ldr.w	sl, [pc, #92]	; 800d780 <prvIdleTask+0x6c>
 800d724:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
 800d728:	e014      	b.n	800d754 <prvIdleTask+0x40>

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			taskENTER_CRITICAL();
 800d72a:	f7fe fda3 	bl	800c274 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d732:	1d20      	adds	r0, r4, #4
 800d734:	f7fe fd1e 	bl	800c174 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d738:	6833      	ldr	r3, [r6, #0]
 800d73a:	3b01      	subs	r3, #1
 800d73c:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d73e:	682b      	ldr	r3, [r5, #0]
 800d740:	3b01      	subs	r3, #1
 800d742:	602b      	str	r3, [r5, #0]
			}
			taskEXIT_CRITICAL();
 800d744:	f7fe fdb8 	bl	800c2b8 <vPortExitCritical>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800d748:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800d74a:	f7fe ff9d 	bl	800c688 <vPortFree>
			vPortFree( pxTCB );
 800d74e:	4620      	mov	r0, r4
 800d750:	f7fe ff9a 	bl	800c688 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d754:	682b      	ldr	r3, [r5, #0]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d1e7      	bne.n	800d72a <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d75a:	f8d8 3000 	ldr.w	r3, [r8]
 800d75e:	2b01      	cmp	r3, #1
 800d760:	d9f8      	bls.n	800d754 <prvIdleTask+0x40>
				taskYIELD();
 800d762:	f8ca 9000 	str.w	r9, [sl]
 800d766:	f3bf 8f4f 	dsb	sy
 800d76a:	f3bf 8f6f 	isb	sy
 800d76e:	e7f1      	b.n	800d754 <prvIdleTask+0x40>
 800d770:	20004fb0 	.word	0x20004fb0
 800d774:	20005024 	.word	0x20005024
 800d778:	20004fac 	.word	0x20004fac
 800d77c:	20004f20 	.word	0x20004f20
 800d780:	e000ed04 	.word	0xe000ed04

0800d784 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d786:	4b1b      	ldr	r3, [pc, #108]	; (800d7f4 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d788:	4d1b      	ldr	r5, [pc, #108]	; (800d7f8 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800d78a:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d78c:	682b      	ldr	r3, [r5, #0]
{
 800d78e:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d790:	1d18      	adds	r0, r3, #4
{
 800d792:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d794:	f7fe fcee 	bl	800c174 <uxListRemove>
 800d798:	b940      	cbnz	r0, 800d7ac <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800d79a:	682b      	ldr	r3, [r5, #0]
 800d79c:	4917      	ldr	r1, [pc, #92]	; (800d7fc <prvAddCurrentTaskToDelayedList+0x78>)
 800d79e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800d7a0:	680b      	ldr	r3, [r1, #0]
 800d7a2:	2201      	movs	r2, #1
 800d7a4:	4082      	lsls	r2, r0
 800d7a6:	ea23 0302 	bic.w	r3, r3, r2
 800d7aa:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d7ac:	1c63      	adds	r3, r4, #1
 800d7ae:	d018      	beq.n	800d7e2 <prvAddCurrentTaskToDelayedList+0x5e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d7b0:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d7b2:	682b      	ldr	r3, [r5, #0]

			if( xTimeToWake < xConstTickCount )
 800d7b4:	42a6      	cmp	r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d7b6:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d7b8:	d80b      	bhi.n	800d7d2 <prvAddCurrentTaskToDelayedList+0x4e>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d7ba:	4b11      	ldr	r3, [pc, #68]	; (800d800 <prvAddCurrentTaskToDelayedList+0x7c>)
 800d7bc:	6818      	ldr	r0, [r3, #0]
 800d7be:	6829      	ldr	r1, [r5, #0]
 800d7c0:	3104      	adds	r1, #4
 800d7c2:	f7fe fcbd 	bl	800c140 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800d7c6:	4b0f      	ldr	r3, [pc, #60]	; (800d804 <prvAddCurrentTaskToDelayedList+0x80>)
 800d7c8:	681a      	ldr	r2, [r3, #0]
 800d7ca:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 800d7cc:	bf38      	it	cc
 800d7ce:	601c      	strcc	r4, [r3, #0]
 800d7d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d7d2:	4b0d      	ldr	r3, [pc, #52]	; (800d808 <prvAddCurrentTaskToDelayedList+0x84>)
 800d7d4:	6818      	ldr	r0, [r3, #0]
 800d7d6:	6829      	ldr	r1, [r5, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d7d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d7dc:	3104      	adds	r1, #4
 800d7de:	f7fe bcaf 	b.w	800c140 <vListInsert>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d7e2:	2f00      	cmp	r7, #0
 800d7e4:	d0e4      	beq.n	800d7b0 <prvAddCurrentTaskToDelayedList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d7e6:	6829      	ldr	r1, [r5, #0]
 800d7e8:	4808      	ldr	r0, [pc, #32]	; (800d80c <prvAddCurrentTaskToDelayedList+0x88>)
 800d7ea:	3104      	adds	r1, #4
}
 800d7ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d7f0:	f7fe bc96 	b.w	800c120 <vListInsertEnd>
 800d7f4:	20005038 	.word	0x20005038
 800d7f8:	20004f14 	.word	0x20004f14
 800d7fc:	20004fc0 	.word	0x20004fc0
 800d800:	20004f18 	.word	0x20004f18
 800d804:	20004ff0 	.word	0x20004ff0
 800d808:	20004f1c 	.word	0x20004f1c
 800d80c:	20005010 	.word	0x20005010

0800d810 <xTaskCreate>:
	{
 800d810:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d814:	ea4f 0882 	mov.w	r8, r2, lsl #2
	{
 800d818:	4606      	mov	r6, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d81a:	4640      	mov	r0, r8
	{
 800d81c:	4689      	mov	r9, r1
 800d81e:	461f      	mov	r7, r3
 800d820:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d822:	f7fe fea1 	bl	800c568 <pvPortMalloc>
			if( pxStack != NULL )
 800d826:	2800      	cmp	r0, #0
 800d828:	f000 808c 	beq.w	800d944 <xTaskCreate+0x134>
 800d82c:	4682      	mov	sl, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800d82e:	2060      	movs	r0, #96	; 0x60
 800d830:	f7fe fe9a 	bl	800c568 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800d834:	4604      	mov	r4, r0
 800d836:	2800      	cmp	r0, #0
 800d838:	f000 8091 	beq.w	800d95e <xTaskCreate+0x14e>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800d83c:	f1a8 0804 	sub.w	r8, r8, #4
 800d840:	44d0      	add	r8, sl
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800d842:	f028 0807 	bic.w	r8, r8, #7
					pxNewTCB->pxStack = pxStack;
 800d846:	f8c0 a030 	str.w	sl, [r0, #48]	; 0x30
 800d84a:	f109 33ff 	add.w	r3, r9, #4294967295
 800d84e:	f109 0118 	add.w	r1, r9, #24
 800d852:	f100 0233 	add.w	r2, r0, #51	; 0x33
 800d856:	e001      	b.n	800d85c <xTaskCreate+0x4c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d858:	428b      	cmp	r3, r1
 800d85a:	d006      	beq.n	800d86a <xTaskCreate+0x5a>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d85c:	7858      	ldrb	r0, [r3, #1]
 800d85e:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 800d862:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800d866:	2800      	cmp	r0, #0
 800d868:	d1f6      	bne.n	800d858 <xTaskCreate+0x48>
 800d86a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d86c:	2b06      	cmp	r3, #6
 800d86e:	bf28      	it	cs
 800d870:	2306      	movcs	r3, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d872:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d876:	f104 0a04 	add.w	sl, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800d87a:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800d87c:	6523      	str	r3, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d87e:	4650      	mov	r0, sl
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d880:	f884 b04c 	strb.w	fp, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d884:	f8c4 b054 	str.w	fp, [r4, #84]	; 0x54
 800d888:	4699      	mov	r9, r3
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d88a:	f7fe fc45 	bl	800c118 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d88e:	f104 0018 	add.w	r0, r4, #24
 800d892:	f7fe fc41 	bl	800c118 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d896:	f1c9 0307 	rsb	r3, r9, #7
		pxNewTCB->ulNotifiedValue = 0;
 800d89a:	f8c4 b058 	str.w	fp, [r4, #88]	; 0x58
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d89e:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d8a0:	6124      	str	r4, [r4, #16]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d8a2:	f884 b05c 	strb.w	fp, [r4, #92]	; 0x5c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d8a6:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d8a8:	463a      	mov	r2, r7
 800d8aa:	4631      	mov	r1, r6
 800d8ac:	4640      	mov	r0, r8
 800d8ae:	f7fe fcb3 	bl	800c218 <pxPortInitialiseStack>
 800d8b2:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800d8b4:	b105      	cbz	r5, 800d8b8 <xTaskCreate+0xa8>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d8b6:	602c      	str	r4, [r5, #0]
	taskENTER_CRITICAL();
 800d8b8:	f7fe fcdc 	bl	800c274 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800d8bc:	4a3e      	ldr	r2, [pc, #248]	; (800d9b8 <xTaskCreate+0x1a8>)
		if( pxCurrentTCB == NULL )
 800d8be:	4e3f      	ldr	r6, [pc, #252]	; (800d9bc <xTaskCreate+0x1ac>)
		uxCurrentNumberOfTasks++;
 800d8c0:	6813      	ldr	r3, [r2, #0]
 800d8c2:	3301      	adds	r3, #1
 800d8c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d8c6:	6833      	ldr	r3, [r6, #0]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d03f      	beq.n	800d94c <xTaskCreate+0x13c>
			if( xSchedulerRunning == pdFALSE )
 800d8cc:	4f3c      	ldr	r7, [pc, #240]	; (800d9c0 <xTaskCreate+0x1b0>)
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	b363      	cbz	r3, 800d92c <xTaskCreate+0x11c>
 800d8d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d8d4:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800d9e4 <xTaskCreate+0x1d4>
		uxTaskNumber++;
 800d8d8:	4a3a      	ldr	r2, [pc, #232]	; (800d9c4 <xTaskCreate+0x1b4>)
		prvAddTaskToReadyList( pxNewTCB );
 800d8da:	f8df e10c 	ldr.w	lr, [pc, #268]	; 800d9e8 <xTaskCreate+0x1d8>
		uxTaskNumber++;
 800d8de:	6810      	ldr	r0, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800d8e0:	f8de c000 	ldr.w	ip, [lr]
 800d8e4:	2501      	movs	r5, #1
		uxTaskNumber++;
 800d8e6:	4428      	add	r0, r5
 800d8e8:	6010      	str	r0, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800d8ea:	fa05 f203 	lsl.w	r2, r5, r3
 800d8ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d8f2:	ea42 020c 	orr.w	r2, r2, ip
 800d8f6:	eb08 0083 	add.w	r0, r8, r3, lsl #2
 800d8fa:	4651      	mov	r1, sl
 800d8fc:	f8ce 2000 	str.w	r2, [lr]
 800d900:	f7fe fc0e 	bl	800c120 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800d904:	f7fe fcd8 	bl	800c2b8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	b1c3      	cbz	r3, 800d93e <xTaskCreate+0x12e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d90c:	6832      	ldr	r2, [r6, #0]
 800d90e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d910:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d912:	429a      	cmp	r2, r3
 800d914:	d213      	bcs.n	800d93e <xTaskCreate+0x12e>
			taskYIELD_IF_USING_PREEMPTION();
 800d916:	4b2c      	ldr	r3, [pc, #176]	; (800d9c8 <xTaskCreate+0x1b8>)
 800d918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d91c:	601a      	str	r2, [r3, #0]
 800d91e:	f3bf 8f4f 	dsb	sy
 800d922:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 800d926:	4628      	mov	r0, r5
 800d928:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d92c:	6832      	ldr	r2, [r6, #0]
 800d92e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d930:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d932:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800d9e4 <xTaskCreate+0x1d4>
 800d936:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 800d938:	bf98      	it	ls
 800d93a:	6034      	strls	r4, [r6, #0]
 800d93c:	e7cc      	b.n	800d8d8 <xTaskCreate+0xc8>
			xReturn = pdPASS;
 800d93e:	4628      	mov	r0, r5
	}
 800d940:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d944:	f04f 30ff 	mov.w	r0, #4294967295
 800d948:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pxCurrentTCB = pxNewTCB;
 800d94c:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d94e:	6813      	ldr	r3, [r2, #0]
 800d950:	2b01      	cmp	r3, #1
 800d952:	d00b      	beq.n	800d96c <xTaskCreate+0x15c>
 800d954:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d956:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800d9e4 <xTaskCreate+0x1d4>
 800d95a:	4f19      	ldr	r7, [pc, #100]	; (800d9c0 <xTaskCreate+0x1b0>)
 800d95c:	e7bc      	b.n	800d8d8 <xTaskCreate+0xc8>
					vPortFree( pxStack );
 800d95e:	4650      	mov	r0, sl
 800d960:	f7fe fe92 	bl	800c688 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d964:	f04f 30ff 	mov.w	r0, #4294967295
 800d968:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d96c:	f8df 8074 	ldr.w	r8, [pc, #116]	; 800d9e4 <xTaskCreate+0x1d4>
 800d970:	4645      	mov	r5, r8
 800d972:	f108 078c 	add.w	r7, r8, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d976:	4628      	mov	r0, r5
 800d978:	3514      	adds	r5, #20
 800d97a:	f7fe fbc1 	bl	800c100 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d97e:	42af      	cmp	r7, r5
 800d980:	d1f9      	bne.n	800d976 <xTaskCreate+0x166>
	vListInitialise( &xDelayedTaskList1 );
 800d982:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800d9ec <xTaskCreate+0x1dc>
	vListInitialise( &xDelayedTaskList2 );
 800d986:	4d11      	ldr	r5, [pc, #68]	; (800d9cc <xTaskCreate+0x1bc>)
 800d988:	4f0d      	ldr	r7, [pc, #52]	; (800d9c0 <xTaskCreate+0x1b0>)
	vListInitialise( &xDelayedTaskList1 );
 800d98a:	4648      	mov	r0, r9
 800d98c:	f7fe fbb8 	bl	800c100 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d990:	4628      	mov	r0, r5
 800d992:	f7fe fbb5 	bl	800c100 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d996:	480e      	ldr	r0, [pc, #56]	; (800d9d0 <xTaskCreate+0x1c0>)
 800d998:	f7fe fbb2 	bl	800c100 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800d99c:	480d      	ldr	r0, [pc, #52]	; (800d9d4 <xTaskCreate+0x1c4>)
 800d99e:	f7fe fbaf 	bl	800c100 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800d9a2:	480d      	ldr	r0, [pc, #52]	; (800d9d8 <xTaskCreate+0x1c8>)
 800d9a4:	f7fe fbac 	bl	800c100 <vListInitialise>
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d9a8:	4b0c      	ldr	r3, [pc, #48]	; (800d9dc <xTaskCreate+0x1cc>)
	pxDelayedTaskList = &xDelayedTaskList1;
 800d9aa:	4a0d      	ldr	r2, [pc, #52]	; (800d9e0 <xTaskCreate+0x1d0>)
 800d9ac:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d9b0:	601d      	str	r5, [r3, #0]
 800d9b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d9b4:	e790      	b.n	800d8d8 <xTaskCreate+0xc8>
 800d9b6:	bf00      	nop
 800d9b8:	20004fac 	.word	0x20004fac
 800d9bc:	20004f14 	.word	0x20004f14
 800d9c0:	2000500c 	.word	0x2000500c
 800d9c4:	20004fbc 	.word	0x20004fbc
 800d9c8:	e000ed04 	.word	0xe000ed04
 800d9cc:	20004fd8 	.word	0x20004fd8
 800d9d0:	20004ff8 	.word	0x20004ff8
 800d9d4:	20005024 	.word	0x20005024
 800d9d8:	20005010 	.word	0x20005010
 800d9dc:	20004f1c 	.word	0x20004f1c
 800d9e0:	20004f18 	.word	0x20004f18
 800d9e4:	20004f20 	.word	0x20004f20
 800d9e8:	20004fc0 	.word	0x20004fc0
 800d9ec:	20004fc4 	.word	0x20004fc4

0800d9f0 <vTaskStartScheduler>:
{
 800d9f0:	b530      	push	{r4, r5, lr}
 800d9f2:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 800d9f4:	4b18      	ldr	r3, [pc, #96]	; (800da58 <vTaskStartScheduler+0x68>)
 800d9f6:	9301      	str	r3, [sp, #4]
 800d9f8:	2400      	movs	r4, #0
 800d9fa:	9400      	str	r4, [sp, #0]
 800d9fc:	4623      	mov	r3, r4
 800d9fe:	2280      	movs	r2, #128	; 0x80
 800da00:	4916      	ldr	r1, [pc, #88]	; (800da5c <vTaskStartScheduler+0x6c>)
 800da02:	4817      	ldr	r0, [pc, #92]	; (800da60 <vTaskStartScheduler+0x70>)
 800da04:	f7ff ff04 	bl	800d810 <xTaskCreate>
		if( xReturn == pdPASS )
 800da08:	2801      	cmp	r0, #1
 800da0a:	d00c      	beq.n	800da26 <vTaskStartScheduler+0x36>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800da0c:	3001      	adds	r0, #1
 800da0e:	d001      	beq.n	800da14 <vTaskStartScheduler+0x24>
}
 800da10:	b003      	add	sp, #12
 800da12:	bd30      	pop	{r4, r5, pc}
 800da14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da18:	f383 8811 	msr	BASEPRI, r3
 800da1c:	f3bf 8f6f 	isb	sy
 800da20:	f3bf 8f4f 	dsb	sy
 800da24:	e7fe      	b.n	800da24 <vTaskStartScheduler+0x34>
			xReturn = xTimerCreateTimerTask();
 800da26:	f000 fc9b 	bl	800e360 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800da2a:	2801      	cmp	r0, #1
 800da2c:	d1ee      	bne.n	800da0c <vTaskStartScheduler+0x1c>
 800da2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da32:	f383 8811 	msr	BASEPRI, r3
 800da36:	f3bf 8f6f 	isb	sy
 800da3a:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800da3e:	4909      	ldr	r1, [pc, #36]	; (800da64 <vTaskStartScheduler+0x74>)
		xSchedulerRunning = pdTRUE;
 800da40:	4a09      	ldr	r2, [pc, #36]	; (800da68 <vTaskStartScheduler+0x78>)
		xTickCount = ( TickType_t ) 0U;
 800da42:	4b0a      	ldr	r3, [pc, #40]	; (800da6c <vTaskStartScheduler+0x7c>)
		xNextTaskUnblockTime = portMAX_DELAY;
 800da44:	f04f 35ff 	mov.w	r5, #4294967295
 800da48:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 800da4a:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) 0U;
 800da4c:	601c      	str	r4, [r3, #0]
}
 800da4e:	b003      	add	sp, #12
 800da50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 800da54:	f7fe bcaa 	b.w	800c3ac <xPortStartScheduler>
 800da58:	20004fec 	.word	0x20004fec
 800da5c:	08014514 	.word	0x08014514
 800da60:	0800d715 	.word	0x0800d715
 800da64:	20004ff0 	.word	0x20004ff0
 800da68:	2000500c 	.word	0x2000500c
 800da6c:	20005038 	.word	0x20005038

0800da70 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800da70:	4a02      	ldr	r2, [pc, #8]	; (800da7c <vTaskSuspendAll+0xc>)
 800da72:	6813      	ldr	r3, [r2, #0]
 800da74:	3301      	adds	r3, #1
 800da76:	6013      	str	r3, [r2, #0]
 800da78:	4770      	bx	lr
 800da7a:	bf00      	nop
 800da7c:	20004fb8 	.word	0x20004fb8

0800da80 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800da80:	4b01      	ldr	r3, [pc, #4]	; (800da88 <xTaskGetTickCount+0x8>)
 800da82:	6818      	ldr	r0, [r3, #0]
}
 800da84:	4770      	bx	lr
 800da86:	bf00      	nop
 800da88:	20005038 	.word	0x20005038

0800da8c <xTaskIncrementTick>:
{
 800da8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da90:	4b4a      	ldr	r3, [pc, #296]	; (800dbbc <xTaskIncrementTick+0x130>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d153      	bne.n	800db40 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800da98:	4b49      	ldr	r3, [pc, #292]	; (800dbc0 <xTaskIncrementTick+0x134>)
 800da9a:	681e      	ldr	r6, [r3, #0]
 800da9c:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 800da9e:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800daa0:	2e00      	cmp	r6, #0
 800daa2:	d05a      	beq.n	800db5a <xTaskIncrementTick+0xce>
 800daa4:	f8df b138 	ldr.w	fp, [pc, #312]	; 800dbe0 <xTaskIncrementTick+0x154>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800daa8:	f8db 2000 	ldr.w	r2, [fp]
 800daac:	4296      	cmp	r6, r2
 800daae:	d361      	bcc.n	800db74 <xTaskIncrementTick+0xe8>
 800dab0:	4d44      	ldr	r5, [pc, #272]	; (800dbc4 <xTaskIncrementTick+0x138>)
 800dab2:	4f45      	ldr	r7, [pc, #276]	; (800dbc8 <xTaskIncrementTick+0x13c>)
 800dab4:	f8df 812c 	ldr.w	r8, [pc, #300]	; 800dbe4 <xTaskIncrementTick+0x158>
 800dab8:	2400      	movs	r4, #0
 800daba:	e02e      	b.n	800db1a <xTaskIncrementTick+0x8e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800dabc:	682a      	ldr	r2, [r5, #0]
 800dabe:	68d2      	ldr	r2, [r2, #12]
 800dac0:	f8d2 900c 	ldr.w	r9, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dac4:	f8d9 1004 	ldr.w	r1, [r9, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dac8:	f109 0a04 	add.w	sl, r9, #4
					if( xConstTickCount < xItemValue )
 800dacc:	428e      	cmp	r6, r1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dace:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 800dad0:	d36a      	bcc.n	800dba8 <xTaskIncrementTick+0x11c>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dad2:	f7fe fb4f 	bl	800c174 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dad6:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dada:	f109 0018 	add.w	r0, r9, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dade:	b109      	cbz	r1, 800dae4 <xTaskIncrementTick+0x58>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dae0:	f7fe fb48 	bl	800c174 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dae4:	4b39      	ldr	r3, [pc, #228]	; (800dbcc <xTaskIncrementTick+0x140>)
 800dae6:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	2201      	movs	r2, #1
 800daee:	fa02 fe00 	lsl.w	lr, r2, r0
 800daf2:	ea4e 0e03 	orr.w	lr, lr, r3
 800daf6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dafa:	4b34      	ldr	r3, [pc, #208]	; (800dbcc <xTaskIncrementTick+0x140>)
 800dafc:	4651      	mov	r1, sl
 800dafe:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800db02:	f8c3 e000 	str.w	lr, [r3]
 800db06:	f7fe fb0b 	bl	800c120 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800db0a:	f8d8 0000 	ldr.w	r0, [r8]
 800db0e:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 800db12:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800db14:	4291      	cmp	r1, r2
 800db16:	bf28      	it	cs
 800db18:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db1a:	682a      	ldr	r2, [r5, #0]
 800db1c:	6812      	ldr	r2, [r2, #0]
 800db1e:	2a00      	cmp	r2, #0
 800db20:	d1cc      	bne.n	800dabc <xTaskIncrementTick+0x30>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db22:	f04f 32ff 	mov.w	r2, #4294967295
 800db26:	f8cb 2000 	str.w	r2, [fp]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800db2a:	f8d8 3000 	ldr.w	r3, [r8]
 800db2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800db34:	009b      	lsls	r3, r3, #2
 800db36:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 800db38:	2b02      	cmp	r3, #2
 800db3a:	bf28      	it	cs
 800db3c:	2401      	movcs	r4, #1
 800db3e:	e004      	b.n	800db4a <xTaskIncrementTick+0xbe>
		++uxPendedTicks;
 800db40:	4a23      	ldr	r2, [pc, #140]	; (800dbd0 <xTaskIncrementTick+0x144>)
 800db42:	6813      	ldr	r3, [r2, #0]
 800db44:	3301      	adds	r3, #1
 800db46:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800db48:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800db4a:	4b22      	ldr	r3, [pc, #136]	; (800dbd4 <xTaskIncrementTick+0x148>)
 800db4c:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 800db4e:	2b00      	cmp	r3, #0
 800db50:	bf18      	it	ne
 800db52:	2401      	movne	r4, #1
}
 800db54:	4620      	mov	r0, r4
 800db56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 800db5a:	4d1a      	ldr	r5, [pc, #104]	; (800dbc4 <xTaskIncrementTick+0x138>)
 800db5c:	682b      	ldr	r3, [r5, #0]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	b16b      	cbz	r3, 800db7e <xTaskIncrementTick+0xf2>
 800db62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db66:	f383 8811 	msr	BASEPRI, r3
 800db6a:	f3bf 8f6f 	isb	sy
 800db6e:	f3bf 8f4f 	dsb	sy
 800db72:	e7fe      	b.n	800db72 <xTaskIncrementTick+0xe6>
 800db74:	4f14      	ldr	r7, [pc, #80]	; (800dbc8 <xTaskIncrementTick+0x13c>)
 800db76:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800dbe4 <xTaskIncrementTick+0x158>
BaseType_t xSwitchRequired = pdFALSE;
 800db7a:	2400      	movs	r4, #0
 800db7c:	e7d5      	b.n	800db2a <xTaskIncrementTick+0x9e>
			taskSWITCH_DELAYED_LISTS();
 800db7e:	4b16      	ldr	r3, [pc, #88]	; (800dbd8 <xTaskIncrementTick+0x14c>)
 800db80:	6829      	ldr	r1, [r5, #0]
 800db82:	4a16      	ldr	r2, [pc, #88]	; (800dbdc <xTaskIncrementTick+0x150>)
 800db84:	6818      	ldr	r0, [r3, #0]
 800db86:	6028      	str	r0, [r5, #0]
 800db88:	6019      	str	r1, [r3, #0]
 800db8a:	6813      	ldr	r3, [r2, #0]
 800db8c:	3301      	adds	r3, #1
 800db8e:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db90:	682b      	ldr	r3, [r5, #0]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	b15b      	cbz	r3, 800dbae <xTaskIncrementTick+0x122>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800db96:	682a      	ldr	r2, [r5, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800db98:	f8df b044 	ldr.w	fp, [pc, #68]	; 800dbe0 <xTaskIncrementTick+0x154>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800db9c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800db9e:	68d2      	ldr	r2, [r2, #12]
 800dba0:	6852      	ldr	r2, [r2, #4]
 800dba2:	f8cb 2000 	str.w	r2, [fp]
 800dba6:	e77f      	b.n	800daa8 <xTaskIncrementTick+0x1c>
						xNextTaskUnblockTime = xItemValue;
 800dba8:	f8cb 1000 	str.w	r1, [fp]
						break;
 800dbac:	e7bd      	b.n	800db2a <xTaskIncrementTick+0x9e>
		xNextTaskUnblockTime = portMAX_DELAY;
 800dbae:	f8df b030 	ldr.w	fp, [pc, #48]	; 800dbe0 <xTaskIncrementTick+0x154>
 800dbb2:	f04f 32ff 	mov.w	r2, #4294967295
 800dbb6:	f8cb 2000 	str.w	r2, [fp]
 800dbba:	e775      	b.n	800daa8 <xTaskIncrementTick+0x1c>
 800dbbc:	20004fb8 	.word	0x20004fb8
 800dbc0:	20005038 	.word	0x20005038
 800dbc4:	20004f18 	.word	0x20004f18
 800dbc8:	20004f20 	.word	0x20004f20
 800dbcc:	20004fc0 	.word	0x20004fc0
 800dbd0:	20004fb4 	.word	0x20004fb4
 800dbd4:	2000503c 	.word	0x2000503c
 800dbd8:	20004f1c 	.word	0x20004f1c
 800dbdc:	20004ff4 	.word	0x20004ff4
 800dbe0:	20004ff0 	.word	0x20004ff0
 800dbe4:	20004f14 	.word	0x20004f14

0800dbe8 <xTaskResumeAll>:
{
 800dbe8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 800dbec:	4c39      	ldr	r4, [pc, #228]	; (800dcd4 <xTaskResumeAll+0xec>)
 800dbee:	6823      	ldr	r3, [r4, #0]
 800dbf0:	b943      	cbnz	r3, 800dc04 <xTaskResumeAll+0x1c>
 800dbf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbf6:	f383 8811 	msr	BASEPRI, r3
 800dbfa:	f3bf 8f6f 	isb	sy
 800dbfe:	f3bf 8f4f 	dsb	sy
 800dc02:	e7fe      	b.n	800dc02 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800dc04:	f7fe fb36 	bl	800c274 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800dc08:	6823      	ldr	r3, [r4, #0]
 800dc0a:	3b01      	subs	r3, #1
 800dc0c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc0e:	6824      	ldr	r4, [r4, #0]
 800dc10:	2c00      	cmp	r4, #0
 800dc12:	d151      	bne.n	800dcb8 <xTaskResumeAll+0xd0>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dc14:	4b30      	ldr	r3, [pc, #192]	; (800dcd8 <xTaskResumeAll+0xf0>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d04d      	beq.n	800dcb8 <xTaskResumeAll+0xd0>
 800dc1c:	4d2f      	ldr	r5, [pc, #188]	; (800dcdc <xTaskResumeAll+0xf4>)
 800dc1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800dcf4 <xTaskResumeAll+0x10c>
					prvAddTaskToReadyList( pxTCB );
 800dc22:	4e2f      	ldr	r6, [pc, #188]	; (800dce0 <xTaskResumeAll+0xf8>)
 800dc24:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 800dcf8 <xTaskResumeAll+0x110>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc28:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 800dcfc <xTaskResumeAll+0x114>
 800dc2c:	e01f      	b.n	800dc6e <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800dc2e:	f8da 300c 	ldr.w	r3, [sl, #12]
 800dc32:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc34:	f104 0804 	add.w	r8, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dc38:	f104 0018 	add.w	r0, r4, #24
 800dc3c:	f7fe fa9a 	bl	800c174 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc40:	4640      	mov	r0, r8
 800dc42:	f7fe fa97 	bl	800c174 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dc46:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800dc48:	6832      	ldr	r2, [r6, #0]
 800dc4a:	fa07 f300 	lsl.w	r3, r7, r0
 800dc4e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dc52:	4313      	orrs	r3, r2
 800dc54:	4641      	mov	r1, r8
 800dc56:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800dc5a:	6033      	str	r3, [r6, #0]
 800dc5c:	f7fe fa60 	bl	800c120 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc60:	f8db 3000 	ldr.w	r3, [fp]
 800dc64:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800dc66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc68:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 800dc6a:	bf28      	it	cs
 800dc6c:	602f      	strcs	r7, [r5, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dc6e:	f8da 3000 	ldr.w	r3, [sl]
					prvAddTaskToReadyList( pxTCB );
 800dc72:	2701      	movs	r7, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d1da      	bne.n	800dc2e <xTaskResumeAll+0x46>
				if( pxTCB != NULL )
 800dc78:	b13c      	cbz	r4, 800dc8a <xTaskResumeAll+0xa2>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc7a:	4b1a      	ldr	r3, [pc, #104]	; (800dce4 <xTaskResumeAll+0xfc>)
 800dc7c:	681a      	ldr	r2, [r3, #0]
 800dc7e:	6812      	ldr	r2, [r2, #0]
 800dc80:	bb02      	cbnz	r2, 800dcc4 <xTaskResumeAll+0xdc>
		xNextTaskUnblockTime = portMAX_DELAY;
 800dc82:	4b19      	ldr	r3, [pc, #100]	; (800dce8 <xTaskResumeAll+0x100>)
 800dc84:	f04f 32ff 	mov.w	r2, #4294967295
 800dc88:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800dc8a:	4e18      	ldr	r6, [pc, #96]	; (800dcec <xTaskResumeAll+0x104>)
 800dc8c:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800dc8e:	b13c      	cbz	r4, 800dca0 <xTaskResumeAll+0xb8>
								xYieldPending = pdTRUE;
 800dc90:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800dc92:	f7ff fefb 	bl	800da8c <xTaskIncrementTick>
 800dc96:	b100      	cbz	r0, 800dc9a <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 800dc98:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800dc9a:	3c01      	subs	r4, #1
 800dc9c:	d1f9      	bne.n	800dc92 <xTaskResumeAll+0xaa>
						uxPendedTicks = 0;
 800dc9e:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 800dca0:	682b      	ldr	r3, [r5, #0]
 800dca2:	b14b      	cbz	r3, 800dcb8 <xTaskResumeAll+0xd0>
					taskYIELD_IF_USING_PREEMPTION();
 800dca4:	4b12      	ldr	r3, [pc, #72]	; (800dcf0 <xTaskResumeAll+0x108>)
 800dca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcaa:	601a      	str	r2, [r3, #0]
 800dcac:	f3bf 8f4f 	dsb	sy
 800dcb0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800dcb4:	2401      	movs	r4, #1
 800dcb6:	e000      	b.n	800dcba <xTaskResumeAll+0xd2>
BaseType_t xAlreadyYielded = pdFALSE;
 800dcb8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800dcba:	f7fe fafd 	bl	800c2b8 <vPortExitCritical>
}
 800dcbe:	4620      	mov	r0, r4
 800dcc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800dcc4:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dcc6:	4b08      	ldr	r3, [pc, #32]	; (800dce8 <xTaskResumeAll+0x100>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800dcc8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dcca:	68d2      	ldr	r2, [r2, #12]
 800dccc:	6852      	ldr	r2, [r2, #4]
 800dcce:	601a      	str	r2, [r3, #0]
 800dcd0:	e7db      	b.n	800dc8a <xTaskResumeAll+0xa2>
 800dcd2:	bf00      	nop
 800dcd4:	20004fb8 	.word	0x20004fb8
 800dcd8:	20004fac 	.word	0x20004fac
 800dcdc:	2000503c 	.word	0x2000503c
 800dce0:	20004fc0 	.word	0x20004fc0
 800dce4:	20004f18 	.word	0x20004f18
 800dce8:	20004ff0 	.word	0x20004ff0
 800dcec:	20004fb4 	.word	0x20004fb4
 800dcf0:	e000ed04 	.word	0xe000ed04
 800dcf4:	20004ff8 	.word	0x20004ff8
 800dcf8:	20004f20 	.word	0x20004f20
 800dcfc:	20004f14 	.word	0x20004f14

0800dd00 <vTaskDelay>:
	{
 800dd00:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dd02:	b158      	cbz	r0, 800dd1c <vTaskDelay+0x1c>
			configASSERT( uxSchedulerSuspended == 0 );
 800dd04:	4b0f      	ldr	r3, [pc, #60]	; (800dd44 <vTaskDelay+0x44>)
 800dd06:	6819      	ldr	r1, [r3, #0]
 800dd08:	b189      	cbz	r1, 800dd2e <vTaskDelay+0x2e>
 800dd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd0e:	f383 8811 	msr	BASEPRI, r3
 800dd12:	f3bf 8f6f 	isb	sy
 800dd16:	f3bf 8f4f 	dsb	sy
 800dd1a:	e7fe      	b.n	800dd1a <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800dd1c:	4b0a      	ldr	r3, [pc, #40]	; (800dd48 <vTaskDelay+0x48>)
 800dd1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd22:	601a      	str	r2, [r3, #0]
 800dd24:	f3bf 8f4f 	dsb	sy
 800dd28:	f3bf 8f6f 	isb	sy
 800dd2c:	bd08      	pop	{r3, pc}
	++uxSchedulerSuspended;
 800dd2e:	681a      	ldr	r2, [r3, #0]
 800dd30:	3201      	adds	r2, #1
 800dd32:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dd34:	f7ff fd26 	bl	800d784 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800dd38:	f7ff ff56 	bl	800dbe8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800dd3c:	2800      	cmp	r0, #0
 800dd3e:	d0ed      	beq.n	800dd1c <vTaskDelay+0x1c>
 800dd40:	bd08      	pop	{r3, pc}
 800dd42:	bf00      	nop
 800dd44:	20004fb8 	.word	0x20004fb8
 800dd48:	e000ed04 	.word	0xe000ed04

0800dd4c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dd4c:	4b16      	ldr	r3, [pc, #88]	; (800dda8 <vTaskSwitchContext+0x5c>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	bb33      	cbnz	r3, 800dda0 <vTaskSwitchContext+0x54>
		xYieldPending = pdFALSE;
 800dd52:	4916      	ldr	r1, [pc, #88]	; (800ddac <vTaskSwitchContext+0x60>)
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800dd54:	4a16      	ldr	r2, [pc, #88]	; (800ddb0 <vTaskSwitchContext+0x64>)
		xYieldPending = pdFALSE;
 800dd56:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800dd58:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800dd5a:	fab3 f383 	clz	r3, r3
 800dd5e:	b2db      	uxtb	r3, r3
 800dd60:	f1c3 031f 	rsb	r3, r3, #31
 800dd64:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800dd68:	009b      	lsls	r3, r3, #2
 800dd6a:	4912      	ldr	r1, [pc, #72]	; (800ddb4 <vTaskSwitchContext+0x68>)
 800dd6c:	58ca      	ldr	r2, [r1, r3]
 800dd6e:	18c8      	adds	r0, r1, r3
 800dd70:	b942      	cbnz	r2, 800dd84 <vTaskSwitchContext+0x38>
	__asm volatile
 800dd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd76:	f383 8811 	msr	BASEPRI, r3
 800dd7a:	f3bf 8f6f 	isb	sy
 800dd7e:	f3bf 8f4f 	dsb	sy
 800dd82:	e7fe      	b.n	800dd82 <vTaskSwitchContext+0x36>
 800dd84:	6842      	ldr	r2, [r0, #4]
 800dd86:	3308      	adds	r3, #8
 800dd88:	6852      	ldr	r2, [r2, #4]
 800dd8a:	6042      	str	r2, [r0, #4]
 800dd8c:	440b      	add	r3, r1
 800dd8e:	429a      	cmp	r2, r3
 800dd90:	bf08      	it	eq
 800dd92:	6852      	ldreq	r2, [r2, #4]
 800dd94:	4b08      	ldr	r3, [pc, #32]	; (800ddb8 <vTaskSwitchContext+0x6c>)
 800dd96:	bf08      	it	eq
 800dd98:	6042      	streq	r2, [r0, #4]
 800dd9a:	68d2      	ldr	r2, [r2, #12]
 800dd9c:	601a      	str	r2, [r3, #0]
 800dd9e:	4770      	bx	lr
		xYieldPending = pdTRUE;
 800dda0:	4b02      	ldr	r3, [pc, #8]	; (800ddac <vTaskSwitchContext+0x60>)
 800dda2:	2201      	movs	r2, #1
 800dda4:	601a      	str	r2, [r3, #0]
 800dda6:	4770      	bx	lr
 800dda8:	20004fb8 	.word	0x20004fb8
 800ddac:	2000503c 	.word	0x2000503c
 800ddb0:	20004fc0 	.word	0x20004fc0
 800ddb4:	20004f20 	.word	0x20004f20
 800ddb8:	20004f14 	.word	0x20004f14

0800ddbc <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800ddbc:	b348      	cbz	r0, 800de12 <vTaskPlaceOnEventList+0x56>
{
 800ddbe:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ddc0:	4d20      	ldr	r5, [pc, #128]	; (800de44 <vTaskPlaceOnEventList+0x88>)
 800ddc2:	460c      	mov	r4, r1
 800ddc4:	6829      	ldr	r1, [r5, #0]
 800ddc6:	3118      	adds	r1, #24
 800ddc8:	f7fe f9ba 	bl	800c140 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 800ddcc:	4b1e      	ldr	r3, [pc, #120]	; (800de48 <vTaskPlaceOnEventList+0x8c>)
 800ddce:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ddd0:	6828      	ldr	r0, [r5, #0]
 800ddd2:	3004      	adds	r0, #4
 800ddd4:	f7fe f9ce 	bl	800c174 <uxListRemove>
 800ddd8:	b940      	cbnz	r0, 800ddec <vTaskPlaceOnEventList+0x30>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800ddda:	682b      	ldr	r3, [r5, #0]
 800dddc:	491b      	ldr	r1, [pc, #108]	; (800de4c <vTaskPlaceOnEventList+0x90>)
 800ddde:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800dde0:	680b      	ldr	r3, [r1, #0]
 800dde2:	2201      	movs	r2, #1
 800dde4:	4082      	lsls	r2, r0
 800dde6:	ea23 0302 	bic.w	r3, r3, r2
 800ddea:	600b      	str	r3, [r1, #0]
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ddec:	1c63      	adds	r3, r4, #1
 800ddee:	d019      	beq.n	800de24 <vTaskPlaceOnEventList+0x68>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ddf0:	4434      	add	r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ddf2:	682b      	ldr	r3, [r5, #0]
			if( xTimeToWake < xConstTickCount )
 800ddf4:	42a6      	cmp	r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ddf6:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ddf8:	d81b      	bhi.n	800de32 <vTaskPlaceOnEventList+0x76>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ddfa:	4b15      	ldr	r3, [pc, #84]	; (800de50 <vTaskPlaceOnEventList+0x94>)
 800ddfc:	6818      	ldr	r0, [r3, #0]
 800ddfe:	6829      	ldr	r1, [r5, #0]
 800de00:	3104      	adds	r1, #4
 800de02:	f7fe f99d 	bl	800c140 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800de06:	4b13      	ldr	r3, [pc, #76]	; (800de54 <vTaskPlaceOnEventList+0x98>)
 800de08:	681a      	ldr	r2, [r3, #0]
 800de0a:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800de0c:	bf38      	it	cc
 800de0e:	601c      	strcc	r4, [r3, #0]
 800de10:	bd70      	pop	{r4, r5, r6, pc}
 800de12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de16:	f383 8811 	msr	BASEPRI, r3
 800de1a:	f3bf 8f6f 	isb	sy
 800de1e:	f3bf 8f4f 	dsb	sy
 800de22:	e7fe      	b.n	800de22 <vTaskPlaceOnEventList+0x66>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de24:	6829      	ldr	r1, [r5, #0]
 800de26:	480c      	ldr	r0, [pc, #48]	; (800de58 <vTaskPlaceOnEventList+0x9c>)
 800de28:	3104      	adds	r1, #4
}
 800de2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de2e:	f7fe b977 	b.w	800c120 <vListInsertEnd>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de32:	4b0a      	ldr	r3, [pc, #40]	; (800de5c <vTaskPlaceOnEventList+0xa0>)
 800de34:	6818      	ldr	r0, [r3, #0]
 800de36:	6829      	ldr	r1, [r5, #0]
}
 800de38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de3c:	3104      	adds	r1, #4
 800de3e:	f7fe b97f 	b.w	800c140 <vListInsert>
 800de42:	bf00      	nop
 800de44:	20004f14 	.word	0x20004f14
 800de48:	20005038 	.word	0x20005038
 800de4c:	20004fc0 	.word	0x20004fc0
 800de50:	20004f18 	.word	0x20004f18
 800de54:	20004ff0 	.word	0x20004ff0
 800de58:	20005010 	.word	0x20005010
 800de5c:	20004f1c 	.word	0x20004f1c

0800de60 <vTaskPlaceOnEventListRestricted>:
	{
 800de60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxEventList );
 800de62:	2800      	cmp	r0, #0
 800de64:	d02e      	beq.n	800dec4 <vTaskPlaceOnEventListRestricted+0x64>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800de66:	4c27      	ldr	r4, [pc, #156]	; (800df04 <vTaskPlaceOnEventListRestricted+0xa4>)
 800de68:	460d      	mov	r5, r1
 800de6a:	6821      	ldr	r1, [r4, #0]
 800de6c:	3118      	adds	r1, #24
 800de6e:	4617      	mov	r7, r2
 800de70:	f7fe f956 	bl	800c120 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 800de74:	4b24      	ldr	r3, [pc, #144]	; (800df08 <vTaskPlaceOnEventListRestricted+0xa8>)
 800de76:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de78:	6820      	ldr	r0, [r4, #0]
 800de7a:	3004      	adds	r0, #4
		if( xWaitIndefinitely != pdFALSE )
 800de7c:	2f00      	cmp	r7, #0
 800de7e:	d03b      	beq.n	800def8 <vTaskPlaceOnEventListRestricted+0x98>
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de80:	f7fe f978 	bl	800c174 <uxListRemove>
 800de84:	2800      	cmp	r0, #0
 800de86:	d130      	bne.n	800deea <vTaskPlaceOnEventListRestricted+0x8a>
			xTicksToWait = portMAX_DELAY;
 800de88:	f04f 35ff 	mov.w	r5, #4294967295
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800de8c:	6823      	ldr	r3, [r4, #0]
 800de8e:	491f      	ldr	r1, [pc, #124]	; (800df0c <vTaskPlaceOnEventListRestricted+0xac>)
 800de90:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800de92:	680b      	ldr	r3, [r1, #0]
 800de94:	2201      	movs	r2, #1
 800de96:	4082      	lsls	r2, r0
 800de98:	ea23 0302 	bic.w	r3, r3, r2
 800de9c:	600b      	str	r3, [r1, #0]
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800de9e:	1c6b      	adds	r3, r5, #1
 800dea0:	d021      	beq.n	800dee6 <vTaskPlaceOnEventListRestricted+0x86>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dea2:	4435      	add	r5, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dea4:	6823      	ldr	r3, [r4, #0]
			if( xTimeToWake < xConstTickCount )
 800dea6:	42b5      	cmp	r5, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dea8:	605d      	str	r5, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800deaa:	d314      	bcc.n	800ded6 <vTaskPlaceOnEventListRestricted+0x76>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800deac:	4b18      	ldr	r3, [pc, #96]	; (800df10 <vTaskPlaceOnEventListRestricted+0xb0>)
 800deae:	6818      	ldr	r0, [r3, #0]
 800deb0:	6821      	ldr	r1, [r4, #0]
 800deb2:	3104      	adds	r1, #4
 800deb4:	f7fe f944 	bl	800c140 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800deb8:	4b16      	ldr	r3, [pc, #88]	; (800df14 <vTaskPlaceOnEventListRestricted+0xb4>)
 800deba:	681a      	ldr	r2, [r3, #0]
 800debc:	4295      	cmp	r5, r2
 800debe:	d220      	bcs.n	800df02 <vTaskPlaceOnEventListRestricted+0xa2>
					xNextTaskUnblockTime = xTimeToWake;
 800dec0:	601d      	str	r5, [r3, #0]
	}
 800dec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec8:	f383 8811 	msr	BASEPRI, r3
 800decc:	f3bf 8f6f 	isb	sy
 800ded0:	f3bf 8f4f 	dsb	sy
 800ded4:	e7fe      	b.n	800ded4 <vTaskPlaceOnEventListRestricted+0x74>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ded6:	4b10      	ldr	r3, [pc, #64]	; (800df18 <vTaskPlaceOnEventListRestricted+0xb8>)
 800ded8:	6818      	ldr	r0, [r3, #0]
 800deda:	6821      	ldr	r1, [r4, #0]
	}
 800dedc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dee0:	3104      	adds	r1, #4
 800dee2:	f7fe b92d 	b.w	800c140 <vListInsert>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dee6:	2f00      	cmp	r7, #0
 800dee8:	d0db      	beq.n	800dea2 <vTaskPlaceOnEventListRestricted+0x42>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800deea:	6821      	ldr	r1, [r4, #0]
 800deec:	480b      	ldr	r0, [pc, #44]	; (800df1c <vTaskPlaceOnEventListRestricted+0xbc>)
 800deee:	3104      	adds	r1, #4
	}
 800def0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800def4:	f7fe b914 	b.w	800c120 <vListInsertEnd>
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800def8:	f7fe f93c 	bl	800c174 <uxListRemove>
 800defc:	2800      	cmp	r0, #0
 800defe:	d1ce      	bne.n	800de9e <vTaskPlaceOnEventListRestricted+0x3e>
 800df00:	e7c4      	b.n	800de8c <vTaskPlaceOnEventListRestricted+0x2c>
 800df02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df04:	20004f14 	.word	0x20004f14
 800df08:	20005038 	.word	0x20005038
 800df0c:	20004fc0 	.word	0x20004fc0
 800df10:	20004f18 	.word	0x20004f18
 800df14:	20004ff0 	.word	0x20004ff0
 800df18:	20004f1c 	.word	0x20004f1c
 800df1c:	20005010 	.word	0x20005010

0800df20 <xTaskRemoveFromEventList>:
{
 800df20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800df22:	68c3      	ldr	r3, [r0, #12]
 800df24:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800df26:	b32c      	cbz	r4, 800df74 <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800df28:	f104 0518 	add.w	r5, r4, #24
 800df2c:	4628      	mov	r0, r5
 800df2e:	f7fe f921 	bl	800c174 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df32:	4b17      	ldr	r3, [pc, #92]	; (800df90 <xTaskRemoveFromEventList+0x70>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	bb33      	cbnz	r3, 800df86 <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800df38:	1d26      	adds	r6, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
 800df3a:	4d16      	ldr	r5, [pc, #88]	; (800df94 <xTaskRemoveFromEventList+0x74>)
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800df3c:	4630      	mov	r0, r6
 800df3e:	f7fe f919 	bl	800c174 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800df42:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800df44:	682f      	ldr	r7, [r5, #0]
 800df46:	4814      	ldr	r0, [pc, #80]	; (800df98 <xTaskRemoveFromEventList+0x78>)
 800df48:	2301      	movs	r3, #1
 800df4a:	4093      	lsls	r3, r2
 800df4c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800df50:	433b      	orrs	r3, r7
 800df52:	4631      	mov	r1, r6
 800df54:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800df58:	602b      	str	r3, [r5, #0]
 800df5a:	f7fe f8e1 	bl	800c120 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800df5e:	4b0f      	ldr	r3, [pc, #60]	; (800df9c <xTaskRemoveFromEventList+0x7c>)
 800df60:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df66:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800df68:	bf83      	ittte	hi
 800df6a:	4b0d      	ldrhi	r3, [pc, #52]	; (800dfa0 <xTaskRemoveFromEventList+0x80>)
 800df6c:	2001      	movhi	r0, #1
 800df6e:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 800df70:	2000      	movls	r0, #0
}
 800df72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df78:	f383 8811 	msr	BASEPRI, r3
 800df7c:	f3bf 8f6f 	isb	sy
 800df80:	f3bf 8f4f 	dsb	sy
 800df84:	e7fe      	b.n	800df84 <xTaskRemoveFromEventList+0x64>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800df86:	4629      	mov	r1, r5
 800df88:	4806      	ldr	r0, [pc, #24]	; (800dfa4 <xTaskRemoveFromEventList+0x84>)
 800df8a:	f7fe f8c9 	bl	800c120 <vListInsertEnd>
 800df8e:	e7e6      	b.n	800df5e <xTaskRemoveFromEventList+0x3e>
 800df90:	20004fb8 	.word	0x20004fb8
 800df94:	20004fc0 	.word	0x20004fc0
 800df98:	20004f20 	.word	0x20004f20
 800df9c:	20004f14 	.word	0x20004f14
 800dfa0:	2000503c 	.word	0x2000503c
 800dfa4:	20004ff8 	.word	0x20004ff8

0800dfa8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dfa8:	4a03      	ldr	r2, [pc, #12]	; (800dfb8 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dfaa:	4b04      	ldr	r3, [pc, #16]	; (800dfbc <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dfac:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	e880 000c 	stmia.w	r0, {r2, r3}
 800dfb4:	4770      	bx	lr
 800dfb6:	bf00      	nop
 800dfb8:	20004ff4 	.word	0x20004ff4
 800dfbc:	20005038 	.word	0x20005038

0800dfc0 <xTaskCheckForTimeOut>:
{
 800dfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800dfc2:	b358      	cbz	r0, 800e01c <xTaskCheckForTimeOut+0x5c>
	configASSERT( pxTicksToWait );
 800dfc4:	b309      	cbz	r1, 800e00a <xTaskCheckForTimeOut+0x4a>
 800dfc6:	460d      	mov	r5, r1
 800dfc8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800dfca:	f7fe f953 	bl	800c274 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 800dfce:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 800dfd0:	f8df e080 	ldr.w	lr, [pc, #128]	; 800e054 <xTaskCheckForTimeOut+0x94>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dfd4:	6866      	ldr	r6, [r4, #4]
		const TickType_t xConstTickCount = xTickCount;
 800dfd6:	f8de 2000 	ldr.w	r2, [lr]
			if( *pxTicksToWait == portMAX_DELAY )
 800dfda:	1c59      	adds	r1, r3, #1
 800dfdc:	d033      	beq.n	800e046 <xTaskCheckForTimeOut+0x86>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dfde:	481c      	ldr	r0, [pc, #112]	; (800e050 <xTaskCheckForTimeOut+0x90>)
 800dfe0:	6821      	ldr	r1, [r4, #0]
 800dfe2:	6807      	ldr	r7, [r0, #0]
 800dfe4:	42b9      	cmp	r1, r7
 800dfe6:	d006      	beq.n	800dff6 <xTaskCheckForTimeOut+0x36>
 800dfe8:	42b2      	cmp	r2, r6
 800dfea:	d304      	bcc.n	800dff6 <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
 800dfec:	2501      	movs	r5, #1
	taskEXIT_CRITICAL();
 800dfee:	f7fe f963 	bl	800c2b8 <vPortExitCritical>
}
 800dff2:	4628      	mov	r0, r5
 800dff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dff6:	1b92      	subs	r2, r2, r6
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dff8:	429a      	cmp	r2, r3
 800dffa:	d318      	bcc.n	800e02e <xTaskCheckForTimeOut+0x6e>
			*pxTicksToWait = 0;
 800dffc:	2300      	movs	r3, #0
 800dffe:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 800e000:	2501      	movs	r5, #1
	taskEXIT_CRITICAL();
 800e002:	f7fe f959 	bl	800c2b8 <vPortExitCritical>
}
 800e006:	4628      	mov	r0, r5
 800e008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e00e:	f383 8811 	msr	BASEPRI, r3
 800e012:	f3bf 8f6f 	isb	sy
 800e016:	f3bf 8f4f 	dsb	sy
 800e01a:	e7fe      	b.n	800e01a <xTaskCheckForTimeOut+0x5a>
 800e01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e020:	f383 8811 	msr	BASEPRI, r3
 800e024:	f3bf 8f6f 	isb	sy
 800e028:	f3bf 8f4f 	dsb	sy
 800e02c:	e7fe      	b.n	800e02c <xTaskCheckForTimeOut+0x6c>
			*pxTicksToWait -= xElapsedTime;
 800e02e:	1a9b      	subs	r3, r3, r2
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e030:	6800      	ldr	r0, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e032:	f8de 2000 	ldr.w	r2, [lr]
			*pxTicksToWait -= xElapsedTime;
 800e036:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e038:	e884 0005 	stmia.w	r4, {r0, r2}
			xReturn = pdFALSE;
 800e03c:	2500      	movs	r5, #0
	taskEXIT_CRITICAL();
 800e03e:	f7fe f93b 	bl	800c2b8 <vPortExitCritical>
}
 800e042:	4628      	mov	r0, r5
 800e044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 800e046:	2500      	movs	r5, #0
	taskEXIT_CRITICAL();
 800e048:	f7fe f936 	bl	800c2b8 <vPortExitCritical>
}
 800e04c:	4628      	mov	r0, r5
 800e04e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e050:	20004ff4 	.word	0x20004ff4
 800e054:	20005038 	.word	0x20005038

0800e058 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800e058:	4b01      	ldr	r3, [pc, #4]	; (800e060 <vTaskMissedYield+0x8>)
 800e05a:	2201      	movs	r2, #1
 800e05c:	601a      	str	r2, [r3, #0]
 800e05e:	4770      	bx	lr
 800e060:	2000503c 	.word	0x2000503c

0800e064 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800e064:	4b05      	ldr	r3, [pc, #20]	; (800e07c <xTaskGetSchedulerState+0x18>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	b133      	cbz	r3, 800e078 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e06a:	4b05      	ldr	r3, [pc, #20]	; (800e080 <xTaskGetSchedulerState+0x1c>)
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800e070:	bf0c      	ite	eq
 800e072:	2002      	moveq	r0, #2
 800e074:	2000      	movne	r0, #0
 800e076:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e078:	2001      	movs	r0, #1
	}
 800e07a:	4770      	bx	lr
 800e07c:	2000500c 	.word	0x2000500c
 800e080:	20004fb8 	.word	0x20004fb8

0800e084 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800e084:	2800      	cmp	r0, #0
 800e086:	d04b      	beq.n	800e120 <xTaskPriorityInherit+0x9c>
	{
 800e088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e08a:	4c27      	ldr	r4, [pc, #156]	; (800e128 <xTaskPriorityInherit+0xa4>)
 800e08c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800e08e:	6822      	ldr	r2, [r4, #0]
 800e090:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e092:	4293      	cmp	r3, r2
 800e094:	d214      	bcs.n	800e0c0 <xTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e096:	6982      	ldr	r2, [r0, #24]
 800e098:	2a00      	cmp	r2, #0
 800e09a:	db04      	blt.n	800e0a6 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e09c:	6822      	ldr	r2, [r4, #0]
 800e09e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e0a0:	f1c2 0207 	rsb	r2, r2, #7
 800e0a4:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e0a6:	4d21      	ldr	r5, [pc, #132]	; (800e12c <xTaskPriorityInherit+0xa8>)
 800e0a8:	6942      	ldr	r2, [r0, #20]
 800e0aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800e0ae:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	d00c      	beq.n	800e0d0 <xTaskPriorityInherit+0x4c>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e0b6:	6823      	ldr	r3, [r4, #0]
 800e0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0ba:	62c3      	str	r3, [r0, #44]	; 0x2c
				xReturn = pdTRUE;
 800e0bc:	2001      	movs	r0, #1
	}
 800e0be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e0c0:	6823      	ldr	r3, [r4, #0]
 800e0c2:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800e0c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0c6:	4298      	cmp	r0, r3
 800e0c8:	bf2c      	ite	cs
 800e0ca:	2000      	movcs	r0, #0
 800e0cc:	2001      	movcc	r0, #1
 800e0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e0d0:	1d07      	adds	r7, r0, #4
 800e0d2:	4606      	mov	r6, r0
 800e0d4:	4638      	mov	r0, r7
 800e0d6:	f7fe f84d 	bl	800c174 <uxListRemove>
 800e0da:	bb10      	cbnz	r0, 800e122 <xTaskPriorityInherit+0x9e>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e0dc:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800e0de:	4a14      	ldr	r2, [pc, #80]	; (800e130 <xTaskPriorityInherit+0xac>)
 800e0e0:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800e0e4:	009b      	lsls	r3, r3, #2
 800e0e6:	58eb      	ldr	r3, [r5, r3]
 800e0e8:	b933      	cbnz	r3, 800e0f8 <xTaskPriorityInherit+0x74>
 800e0ea:	6813      	ldr	r3, [r2, #0]
 800e0ec:	2001      	movs	r0, #1
 800e0ee:	fa00 f101 	lsl.w	r1, r0, r1
 800e0f2:	ea23 0101 	bic.w	r1, r3, r1
 800e0f6:	6011      	str	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e0f8:	6823      	ldr	r3, [r4, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e0fa:	f8d2 e000 	ldr.w	lr, [r2]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e0fe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e100:	62f0      	str	r0, [r6, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e102:	2401      	movs	r4, #1
 800e104:	fa04 f300 	lsl.w	r3, r4, r0
 800e108:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e10c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800e110:	ea43 030e 	orr.w	r3, r3, lr
 800e114:	4639      	mov	r1, r7
 800e116:	6013      	str	r3, [r2, #0]
 800e118:	f7fe f802 	bl	800c120 <vListInsertEnd>
				xReturn = pdTRUE;
 800e11c:	4620      	mov	r0, r4
 800e11e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
 800e120:	4770      	bx	lr
 800e122:	4a03      	ldr	r2, [pc, #12]	; (800e130 <xTaskPriorityInherit+0xac>)
 800e124:	e7e8      	b.n	800e0f8 <xTaskPriorityInherit+0x74>
 800e126:	bf00      	nop
 800e128:	20004f14 	.word	0x20004f14
 800e12c:	20004f20 	.word	0x20004f20
 800e130:	20004fc0 	.word	0x20004fc0

0800e134 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800e134:	b308      	cbz	r0, 800e17a <xTaskPriorityDisinherit+0x46>
	{
 800e136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 800e138:	4b28      	ldr	r3, [pc, #160]	; (800e1dc <xTaskPriorityDisinherit+0xa8>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	4298      	cmp	r0, r3
 800e13e:	d008      	beq.n	800e152 <xTaskPriorityDisinherit+0x1e>
 800e140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e144:	f383 8811 	msr	BASEPRI, r3
 800e148:	f3bf 8f6f 	isb	sy
 800e14c:	f3bf 8f4f 	dsb	sy
 800e150:	e7fe      	b.n	800e150 <xTaskPriorityDisinherit+0x1c>
			configASSERT( pxTCB->uxMutexesHeld );
 800e152:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800e154:	b943      	cbnz	r3, 800e168 <xTaskPriorityDisinherit+0x34>
 800e156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e15a:	f383 8811 	msr	BASEPRI, r3
 800e15e:	f3bf 8f6f 	isb	sy
 800e162:	f3bf 8f4f 	dsb	sy
 800e166:	e7fe      	b.n	800e166 <xTaskPriorityDisinherit+0x32>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e168:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800e16a:	6d02      	ldr	r2, [r0, #80]	; 0x50
			( pxTCB->uxMutexesHeld )--;
 800e16c:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e16e:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800e170:	6543      	str	r3, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e172:	d000      	beq.n	800e176 <xTaskPriorityDisinherit+0x42>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e174:	b11b      	cbz	r3, 800e17e <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800e176:	2000      	movs	r0, #0
 800e178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e17a:	2000      	movs	r0, #0
	}
 800e17c:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e17e:	1d07      	adds	r7, r0, #4
 800e180:	4604      	mov	r4, r0
 800e182:	4638      	mov	r0, r7
 800e184:	f7fd fff6 	bl	800c174 <uxListRemove>
 800e188:	b1c0      	cbz	r0, 800e1bc <xTaskPriorityDisinherit+0x88>
 800e18a:	4815      	ldr	r0, [pc, #84]	; (800e1e0 <xTaskPriorityDisinherit+0xac>)
 800e18c:	4a15      	ldr	r2, [pc, #84]	; (800e1e4 <xTaskPriorityDisinherit+0xb0>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e18e:	6d23      	ldr	r3, [r4, #80]	; 0x50
					prvAddTaskToReadyList( pxTCB );
 800e190:	f8d2 c000 	ldr.w	ip, [r2]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e194:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800e196:	2501      	movs	r5, #1
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e198:	f1c3 0e07 	rsb	lr, r3, #7
					prvAddTaskToReadyList( pxTCB );
 800e19c:	fa05 f603 	lsl.w	r6, r5, r3
 800e1a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800e1a4:	ea46 060c 	orr.w	r6, r6, ip
 800e1a8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800e1ac:	4639      	mov	r1, r7
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1ae:	f8c4 e018 	str.w	lr, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800e1b2:	6016      	str	r6, [r2, #0]
 800e1b4:	f7fd ffb4 	bl	800c120 <vListInsertEnd>
					xReturn = pdTRUE;
 800e1b8:	4628      	mov	r0, r5
	}
 800e1ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e1bc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e1be:	4808      	ldr	r0, [pc, #32]	; (800e1e0 <xTaskPriorityDisinherit+0xac>)
 800e1c0:	4a08      	ldr	r2, [pc, #32]	; (800e1e4 <xTaskPriorityDisinherit+0xb0>)
 800e1c2:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800e1c6:	009b      	lsls	r3, r3, #2
 800e1c8:	58c3      	ldr	r3, [r0, r3]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d1df      	bne.n	800e18e <xTaskPriorityDisinherit+0x5a>
 800e1ce:	6813      	ldr	r3, [r2, #0]
 800e1d0:	2501      	movs	r5, #1
 800e1d2:	408d      	lsls	r5, r1
 800e1d4:	ea23 0305 	bic.w	r3, r3, r5
 800e1d8:	6013      	str	r3, [r2, #0]
 800e1da:	e7d8      	b.n	800e18e <xTaskPriorityDisinherit+0x5a>
 800e1dc:	20004f14 	.word	0x20004f14
 800e1e0:	20004f20 	.word	0x20004f20
 800e1e4:	20004fc0 	.word	0x20004fc0

0800e1e8 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800e1e8:	b1a8      	cbz	r0, 800e216 <vTaskPriorityDisinheritAfterTimeout+0x2e>
	{
 800e1ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB->uxMutexesHeld );
 800e1ec:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800e1ee:	b944      	cbnz	r4, 800e202 <vTaskPriorityDisinheritAfterTimeout+0x1a>
 800e1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f4:	f383 8811 	msr	BASEPRI, r3
 800e1f8:	f3bf 8f6f 	isb	sy
 800e1fc:	f3bf 8f4f 	dsb	sy
 800e200:	e7fe      	b.n	800e200 <vTaskPriorityDisinheritAfterTimeout+0x18>
 800e202:	6d02      	ldr	r2, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e204:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800e206:	428a      	cmp	r2, r1
 800e208:	bf38      	it	cc
 800e20a:	460a      	movcc	r2, r1
 800e20c:	4293      	cmp	r3, r2
 800e20e:	d001      	beq.n	800e214 <vTaskPriorityDisinheritAfterTimeout+0x2c>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e210:	2c01      	cmp	r4, #1
 800e212:	d001      	beq.n	800e218 <vTaskPriorityDisinheritAfterTimeout+0x30>
 800e214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e216:	4770      	bx	lr
					configASSERT( pxTCB != pxCurrentTCB );
 800e218:	4921      	ldr	r1, [pc, #132]	; (800e2a0 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 800e21a:	6809      	ldr	r1, [r1, #0]
 800e21c:	4288      	cmp	r0, r1
 800e21e:	d025      	beq.n	800e26c <vTaskPriorityDisinheritAfterTimeout+0x84>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e220:	6981      	ldr	r1, [r0, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 800e222:	62c2      	str	r2, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e224:	2900      	cmp	r1, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e226:	bfa8      	it	ge
 800e228:	f1c2 0207 	rsbge	r2, r2, #7
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e22c:	4d1d      	ldr	r5, [pc, #116]	; (800e2a4 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e22e:	bfa8      	it	ge
 800e230:	6182      	strge	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e232:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800e236:	6942      	ldr	r2, [r0, #20]
 800e238:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e23c:	429a      	cmp	r2, r3
 800e23e:	d1e9      	bne.n	800e214 <vTaskPriorityDisinheritAfterTimeout+0x2c>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e240:	1d06      	adds	r6, r0, #4
 800e242:	4604      	mov	r4, r0
 800e244:	4630      	mov	r0, r6
 800e246:	f7fd ff95 	bl	800c174 <uxListRemove>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e24a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e24c:	b1b8      	cbz	r0, 800e27e <vTaskPriorityDisinheritAfterTimeout+0x96>
 800e24e:	2301      	movs	r3, #1
 800e250:	4c15      	ldr	r4, [pc, #84]	; (800e2a8 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 800e252:	4093      	lsls	r3, r2
 800e254:	0090      	lsls	r0, r2, #2
						prvAddTaskToReadyList( pxTCB );
 800e256:	6827      	ldr	r7, [r4, #0]
 800e258:	4410      	add	r0, r2
 800e25a:	433b      	orrs	r3, r7
 800e25c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800e260:	4631      	mov	r1, r6
 800e262:	6023      	str	r3, [r4, #0]
	}
 800e264:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 800e268:	f7fd bf5a 	b.w	800c120 <vListInsertEnd>
 800e26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e270:	f383 8811 	msr	BASEPRI, r3
 800e274:	f3bf 8f6f 	isb	sy
 800e278:	f3bf 8f4f 	dsb	sy
 800e27c:	e7fe      	b.n	800e27c <vTaskPriorityDisinheritAfterTimeout+0x94>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e27e:	0090      	lsls	r0, r2, #2
 800e280:	1883      	adds	r3, r0, r2
 800e282:	009b      	lsls	r3, r3, #2
 800e284:	58eb      	ldr	r3, [r5, r3]
 800e286:	b11b      	cbz	r3, 800e290 <vTaskPriorityDisinheritAfterTimeout+0xa8>
 800e288:	2301      	movs	r3, #1
 800e28a:	4093      	lsls	r3, r2
 800e28c:	4c06      	ldr	r4, [pc, #24]	; (800e2a8 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 800e28e:	e7e2      	b.n	800e256 <vTaskPriorityDisinheritAfterTimeout+0x6e>
 800e290:	4c05      	ldr	r4, [pc, #20]	; (800e2a8 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 800e292:	2301      	movs	r3, #1
 800e294:	6821      	ldr	r1, [r4, #0]
 800e296:	4093      	lsls	r3, r2
 800e298:	ea21 0103 	bic.w	r1, r1, r3
 800e29c:	6021      	str	r1, [r4, #0]
 800e29e:	e7da      	b.n	800e256 <vTaskPriorityDisinheritAfterTimeout+0x6e>
 800e2a0:	20004f14 	.word	0x20004f14
 800e2a4:	20004f20 	.word	0x20004f20
 800e2a8:	20004fc0 	.word	0x20004fc0

0800e2ac <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800e2ac:	4b04      	ldr	r3, [pc, #16]	; (800e2c0 <pvTaskIncrementMutexHeldCount+0x14>)
 800e2ae:	681a      	ldr	r2, [r3, #0]
 800e2b0:	b11a      	cbz	r2, 800e2ba <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800e2b2:	6819      	ldr	r1, [r3, #0]
 800e2b4:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800e2b6:	3201      	adds	r2, #1
 800e2b8:	654a      	str	r2, [r1, #84]	; 0x54
		return pxCurrentTCB;
 800e2ba:	6818      	ldr	r0, [r3, #0]
	}
 800e2bc:	4770      	bx	lr
 800e2be:	bf00      	nop
 800e2c0:	20004f14 	.word	0x20004f14

0800e2c4 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e2c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e2c8:	4e22      	ldr	r6, [pc, #136]	; (800e354 <prvSwitchTimerLists+0x90>)
	if( xTimerQueue != NULL )
 800e2ca:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800e35c <prvSwitchTimerLists+0x98>
{
 800e2ce:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 800e2d0:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e2d4:	e00c      	b.n	800e2f0 <prvSwitchTimerLists+0x2c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e2d6:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e2d8:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e2da:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e2dc:	1d25      	adds	r5, r4, #4
 800e2de:	4628      	mov	r0, r5
 800e2e0:	f7fd ff48 	bl	800c174 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e2e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2e6:	4620      	mov	r0, r4
 800e2e8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e2ea:	69e3      	ldr	r3, [r4, #28]
 800e2ec:	2b01      	cmp	r3, #1
 800e2ee:	d00a      	beq.n	800e306 <prvSwitchTimerLists+0x42>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e2f0:	6833      	ldr	r3, [r6, #0]
 800e2f2:	681a      	ldr	r2, [r3, #0]
 800e2f4:	2a00      	cmp	r2, #0
 800e2f6:	d1ee      	bne.n	800e2d6 <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 800e2f8:	4a17      	ldr	r2, [pc, #92]	; (800e358 <prvSwitchTimerLists+0x94>)
 800e2fa:	6811      	ldr	r1, [r2, #0]
 800e2fc:	6031      	str	r1, [r6, #0]
	pxOverflowTimerList = pxTemp;
 800e2fe:	6013      	str	r3, [r2, #0]
}
 800e300:	b005      	add	sp, #20
 800e302:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e306:	69a3      	ldr	r3, [r4, #24]
 800e308:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 800e30a:	429f      	cmp	r7, r3
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e30c:	4629      	mov	r1, r5
			if( xReloadTime > xNextExpireTime )
 800e30e:	d31a      	bcc.n	800e346 <prvSwitchTimerLists+0x82>
	if( xTimerQueue != NULL )
 800e310:	f8d9 3000 	ldr.w	r3, [r9]
 800e314:	b173      	cbz	r3, 800e334 <prvSwitchTimerLists+0x70>
		xMessage.xMessageID = xCommandID;
 800e316:	f8cd 8004 	str.w	r8, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e31a:	9702      	str	r7, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800e31c:	9403      	str	r4, [sp, #12]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e31e:	f7ff fea1 	bl	800e064 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e322:	2300      	movs	r3, #0
 800e324:	461a      	mov	r2, r3
 800e326:	a901      	add	r1, sp, #4
 800e328:	f8d9 0000 	ldr.w	r0, [r9]
 800e32c:	f7fe fc20 	bl	800cb70 <xQueueGenericSend>
				configASSERT( xResult );
 800e330:	2800      	cmp	r0, #0
 800e332:	d1dd      	bne.n	800e2f0 <prvSwitchTimerLists+0x2c>
 800e334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e338:	f383 8811 	msr	BASEPRI, r3
 800e33c:	f3bf 8f6f 	isb	sy
 800e340:	f3bf 8f4f 	dsb	sy
 800e344:	e7fe      	b.n	800e344 <prvSwitchTimerLists+0x80>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e346:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e348:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e34a:	6830      	ldr	r0, [r6, #0]
 800e34c:	f7fd fef8 	bl	800c140 <vListInsert>
 800e350:	e7ce      	b.n	800e2f0 <prvSwitchTimerLists+0x2c>
 800e352:	bf00      	nop
 800e354:	20005040 	.word	0x20005040
 800e358:	20005044 	.word	0x20005044
 800e35c:	20005074 	.word	0x20005074

0800e360 <xTimerCreateTimerTask>:
{
 800e360:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800e362:	4c1c      	ldr	r4, [pc, #112]	; (800e3d4 <xTimerCreateTimerTask+0x74>)
{
 800e364:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 800e366:	f7fd ff85 	bl	800c274 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800e36a:	6826      	ldr	r6, [r4, #0]
 800e36c:	b1d6      	cbz	r6, 800e3a4 <xTimerCreateTimerTask+0x44>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e36e:	f7fd ffa3 	bl	800c2b8 <vPortExitCritical>
	if( xTimerQueue != NULL )
 800e372:	6823      	ldr	r3, [r4, #0]
 800e374:	b16b      	cbz	r3, 800e392 <xTimerCreateTimerTask+0x32>
			xReturn = xTaskCreate(	prvTimerTask,
 800e376:	4b18      	ldr	r3, [pc, #96]	; (800e3d8 <xTimerCreateTimerTask+0x78>)
 800e378:	9301      	str	r3, [sp, #4]
 800e37a:	2302      	movs	r3, #2
 800e37c:	9300      	str	r3, [sp, #0]
 800e37e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e382:	2300      	movs	r3, #0
 800e384:	4915      	ldr	r1, [pc, #84]	; (800e3dc <xTimerCreateTimerTask+0x7c>)
 800e386:	4816      	ldr	r0, [pc, #88]	; (800e3e0 <xTimerCreateTimerTask+0x80>)
 800e388:	f7ff fa42 	bl	800d810 <xTaskCreate>
	configASSERT( xReturn );
 800e38c:	b108      	cbz	r0, 800e392 <xTimerCreateTimerTask+0x32>
}
 800e38e:	b003      	add	sp, #12
 800e390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e396:	f383 8811 	msr	BASEPRI, r3
 800e39a:	f3bf 8f6f 	isb	sy
 800e39e:	f3bf 8f4f 	dsb	sy
 800e3a2:	e7fe      	b.n	800e3a2 <xTimerCreateTimerTask+0x42>
			vListInitialise( &xActiveTimerList1 );
 800e3a4:	4f0f      	ldr	r7, [pc, #60]	; (800e3e4 <xTimerCreateTimerTask+0x84>)
			vListInitialise( &xActiveTimerList2 );
 800e3a6:	4d10      	ldr	r5, [pc, #64]	; (800e3e8 <xTimerCreateTimerTask+0x88>)
			vListInitialise( &xActiveTimerList1 );
 800e3a8:	4638      	mov	r0, r7
 800e3aa:	f7fd fea9 	bl	800c100 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e3ae:	4628      	mov	r0, r5
 800e3b0:	f7fd fea6 	bl	800c100 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e3b4:	4a0d      	ldr	r2, [pc, #52]	; (800e3ec <xTimerCreateTimerTask+0x8c>)
			pxOverflowTimerList = &xActiveTimerList2;
 800e3b6:	4b0e      	ldr	r3, [pc, #56]	; (800e3f0 <xTimerCreateTimerTask+0x90>)
			pxCurrentTimerList = &xActiveTimerList1;
 800e3b8:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800e3ba:	210c      	movs	r1, #12
 800e3bc:	4632      	mov	r2, r6
 800e3be:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800e3c0:	601d      	str	r5, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800e3c2:	f7fe fa2d 	bl	800c820 <xQueueGenericCreate>
 800e3c6:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 800e3c8:	2800      	cmp	r0, #0
 800e3ca:	d0d0      	beq.n	800e36e <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e3cc:	4909      	ldr	r1, [pc, #36]	; (800e3f4 <xTimerCreateTimerTask+0x94>)
 800e3ce:	f7ff f911 	bl	800d5f4 <vQueueAddToRegistry>
 800e3d2:	e7cc      	b.n	800e36e <xTimerCreateTimerTask+0xe>
 800e3d4:	20005074 	.word	0x20005074
 800e3d8:	20005078 	.word	0x20005078
 800e3dc:	08014524 	.word	0x08014524
 800e3e0:	0800e511 	.word	0x0800e511
 800e3e4:	20005048 	.word	0x20005048
 800e3e8:	2000505c 	.word	0x2000505c
 800e3ec:	20005040 	.word	0x20005040
 800e3f0:	20005044 	.word	0x20005044
 800e3f4:	0801451c 	.word	0x0801451c

0800e3f8 <xTimerCreate>:
	{
 800e3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3fc:	4682      	mov	sl, r0
 800e3fe:	b083      	sub	sp, #12
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800e400:	2028      	movs	r0, #40	; 0x28
	{
 800e402:	460d      	mov	r5, r1
 800e404:	4691      	mov	r9, r2
 800e406:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800e408:	f7fe f8ae 	bl	800c568 <pvPortMalloc>
		if( pxNewTimer != NULL )
 800e40c:	4604      	mov	r4, r0
 800e40e:	b1f0      	cbz	r0, 800e44e <xTimerCreate+0x56>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800e410:	b945      	cbnz	r5, 800e424 <xTimerCreate+0x2c>
 800e412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e416:	f383 8811 	msr	BASEPRI, r3
 800e41a:	f3bf 8f6f 	isb	sy
 800e41e:	f3bf 8f4f 	dsb	sy
 800e422:	e7fe      	b.n	800e422 <xTimerCreate+0x2a>
		if( xTimerQueue == NULL )
 800e424:	4f1a      	ldr	r7, [pc, #104]	; (800e490 <xTimerCreate+0x98>)
	taskENTER_CRITICAL();
 800e426:	f7fd ff25 	bl	800c274 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800e42a:	f8d7 8000 	ldr.w	r8, [r7]
 800e42e:	f1b8 0f00 	cmp.w	r8, #0
 800e432:	d010      	beq.n	800e456 <xTimerCreate+0x5e>
	taskEXIT_CRITICAL();
 800e434:	f7fd ff40 	bl	800c2b8 <vPortExitCritical>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800e438:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		pxNewTimer->pcTimerName = pcTimerName;
 800e43a:	f8c4 a000 	str.w	sl, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800e43e:	61a5      	str	r5, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800e440:	f8c4 901c 	str.w	r9, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800e444:	6226      	str	r6, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800e446:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800e448:	1d20      	adds	r0, r4, #4
 800e44a:	f7fd fe65 	bl	800c118 <vListInitialiseItem>
	}
 800e44e:	4620      	mov	r0, r4
 800e450:	b003      	add	sp, #12
 800e452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			vListInitialise( &xActiveTimerList1 );
 800e456:	4b0f      	ldr	r3, [pc, #60]	; (800e494 <xTimerCreate+0x9c>)
			vListInitialise( &xActiveTimerList2 );
 800e458:	f8df b044 	ldr.w	fp, [pc, #68]	; 800e4a0 <xTimerCreate+0xa8>
			vListInitialise( &xActiveTimerList1 );
 800e45c:	9301      	str	r3, [sp, #4]
 800e45e:	4618      	mov	r0, r3
 800e460:	f7fd fe4e 	bl	800c100 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e464:	4658      	mov	r0, fp
 800e466:	f7fd fe4b 	bl	800c100 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e46a:	490b      	ldr	r1, [pc, #44]	; (800e498 <xTimerCreate+0xa0>)
			pxOverflowTimerList = &xActiveTimerList2;
 800e46c:	f8df e034 	ldr.w	lr, [pc, #52]	; 800e4a4 <xTimerCreate+0xac>
			pxCurrentTimerList = &xActiveTimerList1;
 800e470:	9b01      	ldr	r3, [sp, #4]
 800e472:	600b      	str	r3, [r1, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800e474:	4642      	mov	r2, r8
 800e476:	210c      	movs	r1, #12
 800e478:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800e47a:	f8ce b000 	str.w	fp, [lr]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800e47e:	f7fe f9cf 	bl	800c820 <xQueueGenericCreate>
 800e482:	6038      	str	r0, [r7, #0]
				if( xTimerQueue != NULL )
 800e484:	2800      	cmp	r0, #0
 800e486:	d0d5      	beq.n	800e434 <xTimerCreate+0x3c>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e488:	4904      	ldr	r1, [pc, #16]	; (800e49c <xTimerCreate+0xa4>)
 800e48a:	f7ff f8b3 	bl	800d5f4 <vQueueAddToRegistry>
 800e48e:	e7d1      	b.n	800e434 <xTimerCreate+0x3c>
 800e490:	20005074 	.word	0x20005074
 800e494:	20005048 	.word	0x20005048
 800e498:	20005040 	.word	0x20005040
 800e49c:	0801451c 	.word	0x0801451c
 800e4a0:	2000505c 	.word	0x2000505c
 800e4a4:	20005044 	.word	0x20005044

0800e4a8 <xTimerGenericCommand>:
	configASSERT( xTimer );
 800e4a8:	b330      	cbz	r0, 800e4f8 <xTimerGenericCommand+0x50>
{
 800e4aa:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 800e4ac:	4d17      	ldr	r5, [pc, #92]	; (800e50c <xTimerGenericCommand+0x64>)
 800e4ae:	4604      	mov	r4, r0
 800e4b0:	6828      	ldr	r0, [r5, #0]
{
 800e4b2:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 800e4b4:	b180      	cbz	r0, 800e4d8 <xTimerGenericCommand+0x30>
 800e4b6:	4616      	mov	r6, r2
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e4b8:	2905      	cmp	r1, #5
 800e4ba:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
 800e4bc:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e4be:	9602      	str	r6, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800e4c0:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e4c2:	dc0b      	bgt.n	800e4dc <xTimerGenericCommand+0x34>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e4c4:	f7ff fdce 	bl	800e064 <xTaskGetSchedulerState>
 800e4c8:	2802      	cmp	r0, #2
 800e4ca:	d00d      	beq.n	800e4e8 <xTimerGenericCommand+0x40>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	6828      	ldr	r0, [r5, #0]
 800e4d0:	461a      	mov	r2, r3
 800e4d2:	a901      	add	r1, sp, #4
 800e4d4:	f7fe fb4c 	bl	800cb70 <xQueueGenericSend>
}
 800e4d8:	b004      	add	sp, #16
 800e4da:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e4dc:	2300      	movs	r3, #0
 800e4de:	a901      	add	r1, sp, #4
 800e4e0:	f7fe fc9c 	bl	800ce1c <xQueueGenericSendFromISR>
}
 800e4e4:	b004      	add	sp, #16
 800e4e6:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e4e8:	6828      	ldr	r0, [r5, #0]
 800e4ea:	9a08      	ldr	r2, [sp, #32]
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	a901      	add	r1, sp, #4
 800e4f0:	f7fe fb3e 	bl	800cb70 <xQueueGenericSend>
}
 800e4f4:	b004      	add	sp, #16
 800e4f6:	bd70      	pop	{r4, r5, r6, pc}
 800e4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4fc:	f383 8811 	msr	BASEPRI, r3
 800e500:	f3bf 8f6f 	isb	sy
 800e504:	f3bf 8f4f 	dsb	sy
 800e508:	e7fe      	b.n	800e508 <xTimerGenericCommand+0x60>
 800e50a:	bf00      	nop
 800e50c:	20005074 	.word	0x20005074

0800e510 <prvTimerTask>:
{
 800e510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e514:	4f87      	ldr	r7, [pc, #540]	; (800e734 <prvTimerTask+0x224>)
 800e516:	4e88      	ldr	r6, [pc, #544]	; (800e738 <prvTimerTask+0x228>)
 800e518:	f8df 8228 	ldr.w	r8, [pc, #552]	; 800e744 <prvTimerTask+0x234>
 800e51c:	4c87      	ldr	r4, [pc, #540]	; (800e73c <prvTimerTask+0x22c>)
 800e51e:	b089      	sub	sp, #36	; 0x24
 800e520:	f04f 0901 	mov.w	r9, #1
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e524:	683b      	ldr	r3, [r7, #0]
 800e526:	681d      	ldr	r5, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e528:	2d00      	cmp	r5, #0
 800e52a:	d04a      	beq.n	800e5c2 <prvTimerTask+0xb2>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e52c:	68db      	ldr	r3, [r3, #12]
 800e52e:	f8d3 a000 	ldr.w	sl, [r3]
	vTaskSuspendAll();
 800e532:	f7ff fa9d 	bl	800da70 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800e536:	f7ff faa3 	bl	800da80 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800e53a:	6833      	ldr	r3, [r6, #0]
 800e53c:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 800e53e:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 800e540:	d851      	bhi.n	800e5e6 <prvTimerTask+0xd6>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e542:	4582      	cmp	sl, r0
	xLastTime = xTimeNow;
 800e544:	6030      	str	r0, [r6, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e546:	d95a      	bls.n	800e5fe <prvTimerTask+0xee>
 800e548:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e54a:	ebaa 010b 	sub.w	r1, sl, fp
 800e54e:	6820      	ldr	r0, [r4, #0]
 800e550:	f7ff f87a 	bl	800d648 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e554:	f7ff fb48 	bl	800dbe8 <xTaskResumeAll>
 800e558:	b938      	cbnz	r0, 800e56a <prvTimerTask+0x5a>
					portYIELD_WITHIN_API();
 800e55a:	4a79      	ldr	r2, [pc, #484]	; (800e740 <prvTimerTask+0x230>)
 800e55c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e560:	6013      	str	r3, [r2, #0]
 800e562:	f3bf 8f4f 	dsb	sy
 800e566:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e56a:	2500      	movs	r5, #0
 800e56c:	2200      	movs	r2, #0
 800e56e:	a905      	add	r1, sp, #20
 800e570:	6820      	ldr	r0, [r4, #0]
 800e572:	f7fe fd0d 	bl	800cf90 <xQueueReceive>
 800e576:	2800      	cmp	r0, #0
 800e578:	d0d4      	beq.n	800e524 <prvTimerTask+0x14>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e57a:	9b05      	ldr	r3, [sp, #20]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	dbf5      	blt.n	800e56c <prvTimerTask+0x5c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e580:	f8dd b01c 	ldr.w	fp, [sp, #28]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e584:	f8db 3014 	ldr.w	r3, [fp, #20]
 800e588:	b11b      	cbz	r3, 800e592 <prvTimerTask+0x82>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e58a:	f10b 0004 	add.w	r0, fp, #4
 800e58e:	f7fd fdf1 	bl	800c174 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800e592:	f7ff fa75 	bl	800da80 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800e596:	6833      	ldr	r3, [r6, #0]
 800e598:	4298      	cmp	r0, r3
 800e59a:	d32b      	bcc.n	800e5f4 <prvTimerTask+0xe4>
 800e59c:	9b05      	ldr	r3, [sp, #20]
	xLastTime = xTimeNow;
 800e59e:	6030      	str	r0, [r6, #0]
 800e5a0:	2b09      	cmp	r3, #9
 800e5a2:	d8e3      	bhi.n	800e56c <prvTimerTask+0x5c>
 800e5a4:	fa09 f303 	lsl.w	r3, r9, r3
 800e5a8:	f413 7f04 	tst.w	r3, #528	; 0x210
 800e5ac:	f040 8090 	bne.w	800e6d0 <prvTimerTask+0x1c0>
 800e5b0:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 800e5b4:	d160      	bne.n	800e678 <prvTimerTask+0x168>
 800e5b6:	069b      	lsls	r3, r3, #26
 800e5b8:	d5d8      	bpl.n	800e56c <prvTimerTask+0x5c>
						vPortFree( pxTimer );
 800e5ba:	4658      	mov	r0, fp
 800e5bc:	f7fe f864 	bl	800c688 <vPortFree>
 800e5c0:	e7d4      	b.n	800e56c <prvTimerTask+0x5c>
	vTaskSuspendAll();
 800e5c2:	f7ff fa55 	bl	800da70 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800e5c6:	f7ff fa5b 	bl	800da80 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800e5ca:	6833      	ldr	r3, [r6, #0]
 800e5cc:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 800e5ce:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 800e5d0:	d309      	bcc.n	800e5e6 <prvTimerTask+0xd6>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e5d2:	f8d8 3000 	ldr.w	r3, [r8]
	xLastTime = xTimeNow;
 800e5d6:	f8c6 b000 	str.w	fp, [r6]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e5da:	681a      	ldr	r2, [r3, #0]
 800e5dc:	fab2 f282 	clz	r2, r2
		xNextExpireTime = ( TickType_t ) 0U;
 800e5e0:	46aa      	mov	sl, r5
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e5e2:	0952      	lsrs	r2, r2, #5
 800e5e4:	e7b1      	b.n	800e54a <prvTimerTask+0x3a>
		prvSwitchTimerLists();
 800e5e6:	f7ff fe6d 	bl	800e2c4 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800e5ea:	f8c6 b000 	str.w	fp, [r6]
			( void ) xTaskResumeAll();
 800e5ee:	f7ff fafb 	bl	800dbe8 <xTaskResumeAll>
 800e5f2:	e7ba      	b.n	800e56a <prvTimerTask+0x5a>
 800e5f4:	9003      	str	r0, [sp, #12]
		prvSwitchTimerLists();
 800e5f6:	f7ff fe65 	bl	800e2c4 <prvSwitchTimerLists>
 800e5fa:	9803      	ldr	r0, [sp, #12]
 800e5fc:	e7ce      	b.n	800e59c <prvTimerTask+0x8c>
				( void ) xTaskResumeAll();
 800e5fe:	f7ff faf3 	bl	800dbe8 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e602:	683b      	ldr	r3, [r7, #0]
 800e604:	68db      	ldr	r3, [r3, #12]
 800e606:	68dd      	ldr	r5, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e608:	1d29      	adds	r1, r5, #4
 800e60a:	4608      	mov	r0, r1
 800e60c:	9103      	str	r1, [sp, #12]
 800e60e:	f7fd fdb1 	bl	800c174 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e612:	69ea      	ldr	r2, [r5, #28]
 800e614:	9903      	ldr	r1, [sp, #12]
 800e616:	2a01      	cmp	r2, #1
 800e618:	d003      	beq.n	800e622 <prvTimerTask+0x112>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e61a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e61c:	4628      	mov	r0, r5
 800e61e:	4798      	blx	r3
 800e620:	e7a3      	b.n	800e56a <prvTimerTask+0x5a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e622:	69aa      	ldr	r2, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e624:	612d      	str	r5, [r5, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e626:	eb0a 0002 	add.w	r0, sl, r2
	if( xNextExpiryTime <= xTimeNow )
 800e62a:	4558      	cmp	r0, fp
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e62c:	6068      	str	r0, [r5, #4]
	if( xNextExpiryTime <= xTimeNow )
 800e62e:	d81f      	bhi.n	800e670 <prvTimerTask+0x160>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e630:	ebab 0b0a 	sub.w	fp, fp, sl
 800e634:	455a      	cmp	r2, fp
 800e636:	d85e      	bhi.n	800e6f6 <prvTimerTask+0x1e6>
	if( xTimerQueue != NULL )
 800e638:	6823      	ldr	r3, [r4, #0]
 800e63a:	b183      	cbz	r3, 800e65e <prvTimerTask+0x14e>
		xMessage.xMessageID = xCommandID;
 800e63c:	f04f 0b00 	mov.w	fp, #0
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e640:	f8cd a018 	str.w	sl, [sp, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800e644:	9507      	str	r5, [sp, #28]
		xMessage.xMessageID = xCommandID;
 800e646:	f8cd b014 	str.w	fp, [sp, #20]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e64a:	f7ff fd0b 	bl	800e064 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e64e:	465b      	mov	r3, fp
 800e650:	465a      	mov	r2, fp
 800e652:	a905      	add	r1, sp, #20
 800e654:	6820      	ldr	r0, [r4, #0]
 800e656:	f7fe fa8b 	bl	800cb70 <xQueueGenericSend>
			configASSERT( xResult );
 800e65a:	2800      	cmp	r0, #0
 800e65c:	d1dd      	bne.n	800e61a <prvTimerTask+0x10a>
 800e65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e662:	f383 8811 	msr	BASEPRI, r3
 800e666:	f3bf 8f6f 	isb	sy
 800e66a:	f3bf 8f4f 	dsb	sy
 800e66e:	e7fe      	b.n	800e66e <prvTimerTask+0x15e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e670:	6838      	ldr	r0, [r7, #0]
 800e672:	f7fd fd65 	bl	800c140 <vListInsert>
 800e676:	e7d0      	b.n	800e61a <prvTimerTask+0x10a>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e678:	9b06      	ldr	r3, [sp, #24]
 800e67a:	f8db 1018 	ldr.w	r1, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e67e:	f8cb b010 	str.w	fp, [fp, #16]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e682:	185a      	adds	r2, r3, r1
	if( xNextExpiryTime <= xTimeNow )
 800e684:	4282      	cmp	r2, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e686:	f8cb 2004 	str.w	r2, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 800e68a:	d839      	bhi.n	800e700 <prvTimerTask+0x1f0>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e68c:	1ac3      	subs	r3, r0, r3
 800e68e:	4299      	cmp	r1, r3
 800e690:	d840      	bhi.n	800e714 <prvTimerTask+0x204>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e692:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 800e696:	4658      	mov	r0, fp
 800e698:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e69a:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e69e:	2b01      	cmp	r3, #1
 800e6a0:	f47f af64 	bne.w	800e56c <prvTimerTask+0x5c>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e6a4:	9906      	ldr	r1, [sp, #24]
 800e6a6:	f8db 2018 	ldr.w	r2, [fp, #24]
 800e6aa:	9500      	str	r5, [sp, #0]
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	440a      	add	r2, r1
 800e6b0:	4658      	mov	r0, fp
 800e6b2:	4619      	mov	r1, r3
 800e6b4:	f7ff fef8 	bl	800e4a8 <xTimerGenericCommand>
							configASSERT( xResult );
 800e6b8:	2800      	cmp	r0, #0
 800e6ba:	f47f af57 	bne.w	800e56c <prvTimerTask+0x5c>
 800e6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6c2:	f383 8811 	msr	BASEPRI, r3
 800e6c6:	f3bf 8f6f 	isb	sy
 800e6ca:	f3bf 8f4f 	dsb	sy
 800e6ce:	e7fe      	b.n	800e6ce <prvTimerTask+0x1be>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e6d0:	9b06      	ldr	r3, [sp, #24]
 800e6d2:	f8cb 3018 	str.w	r3, [fp, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e6d6:	b323      	cbz	r3, 800e722 <prvTimerTask+0x212>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e6d8:	4403      	add	r3, r0
	if( xNextExpiryTime <= xTimeNow )
 800e6da:	4283      	cmp	r3, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e6dc:	f8cb 3004 	str.w	r3, [fp, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e6e0:	f8cb b010 	str.w	fp, [fp, #16]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e6e4:	f10b 0104 	add.w	r1, fp, #4
 800e6e8:	bf94      	ite	ls
 800e6ea:	f8d8 0000 	ldrls.w	r0, [r8]
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e6ee:	6838      	ldrhi	r0, [r7, #0]
 800e6f0:	f7fd fd26 	bl	800c140 <vListInsert>
 800e6f4:	e73a      	b.n	800e56c <prvTimerTask+0x5c>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e6f6:	f8d8 0000 	ldr.w	r0, [r8]
 800e6fa:	f7fd fd21 	bl	800c140 <vListInsert>
 800e6fe:	e78c      	b.n	800e61a <prvTimerTask+0x10a>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e700:	4283      	cmp	r3, r0
 800e702:	d901      	bls.n	800e708 <prvTimerTask+0x1f8>
 800e704:	4293      	cmp	r3, r2
 800e706:	d9c4      	bls.n	800e692 <prvTimerTask+0x182>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e708:	f10b 0104 	add.w	r1, fp, #4
 800e70c:	6838      	ldr	r0, [r7, #0]
 800e70e:	f7fd fd17 	bl	800c140 <vListInsert>
 800e712:	e72b      	b.n	800e56c <prvTimerTask+0x5c>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e714:	f10b 0104 	add.w	r1, fp, #4
 800e718:	f8d8 0000 	ldr.w	r0, [r8]
 800e71c:	f7fd fd10 	bl	800c140 <vListInsert>
 800e720:	e724      	b.n	800e56c <prvTimerTask+0x5c>
 800e722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e726:	f383 8811 	msr	BASEPRI, r3
 800e72a:	f3bf 8f6f 	isb	sy
 800e72e:	f3bf 8f4f 	dsb	sy
 800e732:	e7fe      	b.n	800e732 <prvTimerTask+0x222>
 800e734:	20005040 	.word	0x20005040
 800e738:	20005070 	.word	0x20005070
 800e73c:	20005074 	.word	0x20005074
 800e740:	e000ed04 	.word	0xe000ed04
 800e744:	20005044 	.word	0x20005044

0800e748 <accGiveSemaphore>:
//  Wire.send(x);
//  #endif
//}

void accGiveSemaphore(void){
	osSemaphoreRelease (accSampleSemaphoreHandle);
 800e748:	4b01      	ldr	r3, [pc, #4]	; (800e750 <accGiveSemaphore+0x8>)
 800e74a:	6818      	ldr	r0, [r3, #0]
 800e74c:	f7fd bcb0 	b.w	800c0b0 <osSemaphoreRelease>
 800e750:	2000536c 	.word	0x2000536c

0800e754 <MMA8451_begin>:
/**************************************************************************/
/*!
    @brief  Setups the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
bool MMA8451_begin(void) {
 800e754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e758:	b086      	sub	sp, #24
    HAL_I2C_Mem_Read(&hi2c2, _i2caddr<<1, reg, 1, &sample, 1, 2);
 800e75a:	2401      	movs	r4, #1
  _i2caddr = MMA8451_DEFAULT_ADDRESS;
 800e75c:	4d54      	ldr	r5, [pc, #336]	; (800e8b0 <MMA8451_begin+0x15c>)
    HAL_I2C_Mem_Read(&hi2c2, _i2caddr<<1, reg, 1, &sample, 1, 2);
 800e75e:	4855      	ldr	r0, [pc, #340]	; (800e8b4 <MMA8451_begin+0x160>)
 800e760:	9401      	str	r4, [sp, #4]
 800e762:	2602      	movs	r6, #2
 800e764:	f10d 0717 	add.w	r7, sp, #23
  _i2caddr = MMA8451_DEFAULT_ADDRESS;
 800e768:	f04f 0e1c 	mov.w	lr, #28
    HAL_I2C_Mem_Read(&hi2c2, _i2caddr<<1, reg, 1, &sample, 1, 2);
 800e76c:	4623      	mov	r3, r4
 800e76e:	9602      	str	r6, [sp, #8]
 800e770:	9700      	str	r7, [sp, #0]
 800e772:	220d      	movs	r2, #13
 800e774:	2138      	movs	r1, #56	; 0x38
  _i2caddr = MMA8451_DEFAULT_ADDRESS;
 800e776:	f885 e000 	strb.w	lr, [r5]
    HAL_I2C_Mem_Read(&hi2c2, _i2caddr<<1, reg, 1, &sample, 1, 2);
 800e77a:	f7f4 f953 	bl	8002a24 <HAL_I2C_Mem_Read>
    return sample;
 800e77e:	f89d 3017 	ldrb.w	r3, [sp, #23]

  /* Check connection */
  uint8_t deviceid = MMA8451_readRegister8(MMA8451_REG_WHOAMI);
  if (deviceid != 0x1A)
 800e782:	2b1a      	cmp	r3, #26
 800e784:	d003      	beq.n	800e78e <MMA8451_begin+0x3a>
  {
    /* No MMA8451 detected ... return false */
    //Serial.println(deviceid, HEX);
    return false;
 800e786:	2000      	movs	r0, #0
    Serial.println(MMA8451_readRegister8(i), HEX);
  }
  */

  return true;
}
 800e788:	b006      	add	sp, #24
 800e78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e78e:	ab06      	add	r3, sp, #24
 800e790:	2240      	movs	r2, #64	; 0x40
	HAL_I2C_Mem_Write(&hi2c2, _i2caddr<<1, reg, 1, &value, 1, 1);
 800e792:	f995 1000 	ldrsb.w	r1, [r5]
 800e796:	9402      	str	r4, [sp, #8]
 800e798:	f803 2d02 	strb.w	r2, [r3, #-2]!
 800e79c:	40a1      	lsls	r1, r4
 800e79e:	4845      	ldr	r0, [pc, #276]	; (800e8b4 <MMA8451_begin+0x160>)
 800e7a0:	e88d 0018 	stmia.w	sp, {r3, r4}
 800e7a4:	b289      	uxth	r1, r1
 800e7a6:	4623      	mov	r3, r4
 800e7a8:	222b      	movs	r2, #43	; 0x2b
    HAL_I2C_Mem_Read(&hi2c2, _i2caddr<<1, reg, 1, &sample, 1, 2);
 800e7aa:	4680      	mov	r8, r0
	HAL_I2C_Mem_Write(&hi2c2, _i2caddr<<1, reg, 1, &value, 1, 1);
 800e7ac:	f7f4 f816 	bl	80027dc <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Read(&hi2c2, _i2caddr<<1, reg, 1, &sample, 1, 2);
 800e7b0:	f995 1000 	ldrsb.w	r1, [r5]
 800e7b4:	9602      	str	r6, [sp, #8]
 800e7b6:	0049      	lsls	r1, r1, #1
 800e7b8:	2301      	movs	r3, #1
 800e7ba:	b289      	uxth	r1, r1
 800e7bc:	9401      	str	r4, [sp, #4]
 800e7be:	9700      	str	r7, [sp, #0]
 800e7c0:	222b      	movs	r2, #43	; 0x2b
 800e7c2:	4640      	mov	r0, r8
 800e7c4:	f7f4 f92e 	bl	8002a24 <HAL_I2C_Mem_Read>
    return sample;
 800e7c8:	f89d 3017 	ldrb.w	r3, [sp, #23]
  while (MMA8451_readRegister8(MMA8451_REG_CTRL_REG2) & 0x40);
 800e7cc:	065b      	lsls	r3, r3, #25
 800e7ce:	d4ef      	bmi.n	800e7b0 <MMA8451_begin+0x5c>
 800e7d0:	ab06      	add	r3, sp, #24
	HAL_I2C_Mem_Write(&hi2c2, _i2caddr<<1, reg, 1, &value, 1, 1);
 800e7d2:	f995 1000 	ldrsb.w	r1, [r5]
 800e7d6:	9402      	str	r4, [sp, #8]
 800e7d8:	f803 4d08 	strb.w	r4, [r3, #-8]!
 800e7dc:	0049      	lsls	r1, r1, #1
 800e7de:	e88d 0018 	stmia.w	sp, {r3, r4}
 800e7e2:	b289      	uxth	r1, r1
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	220e      	movs	r2, #14
 800e7e8:	4832      	ldr	r0, [pc, #200]	; (800e8b4 <MMA8451_begin+0x160>)
 800e7ea:	f7f3 fff7 	bl	80027dc <HAL_I2C_Mem_Write>
 800e7ee:	ab06      	add	r3, sp, #24
 800e7f0:	f995 1000 	ldrsb.w	r1, [r5]
 800e7f4:	9402      	str	r4, [sp, #8]
 800e7f6:	2203      	movs	r2, #3
 800e7f8:	f803 2d07 	strb.w	r2, [r3, #-7]!
 800e7fc:	0049      	lsls	r1, r1, #1
 800e7fe:	e88d 0018 	stmia.w	sp, {r3, r4}
 800e802:	b289      	uxth	r1, r1
 800e804:	2301      	movs	r3, #1
 800e806:	220f      	movs	r2, #15
 800e808:	482a      	ldr	r0, [pc, #168]	; (800e8b4 <MMA8451_begin+0x160>)
 800e80a:	f7f3 ffe7 	bl	80027dc <HAL_I2C_Mem_Write>
 800e80e:	ab06      	add	r3, sp, #24
 800e810:	f995 1000 	ldrsb.w	r1, [r5]
 800e814:	f803 6d06 	strb.w	r6, [r3, #-6]!
 800e818:	0049      	lsls	r1, r1, #1
 800e81a:	e88d 0018 	stmia.w	sp, {r3, r4}
 800e81e:	9402      	str	r4, [sp, #8]
 800e820:	b289      	uxth	r1, r1
 800e822:	2301      	movs	r3, #1
 800e824:	222b      	movs	r2, #43	; 0x2b
 800e826:	4823      	ldr	r0, [pc, #140]	; (800e8b4 <MMA8451_begin+0x160>)
 800e828:	f7f3 ffd8 	bl	80027dc <HAL_I2C_Mem_Write>
 800e82c:	ab06      	add	r3, sp, #24
 800e82e:	f995 1000 	ldrsb.w	r1, [r5]
 800e832:	f803 4d05 	strb.w	r4, [r3, #-5]!
 800e836:	0049      	lsls	r1, r1, #1
 800e838:	e88d 0018 	stmia.w	sp, {r3, r4}
 800e83c:	9402      	str	r4, [sp, #8]
 800e83e:	b289      	uxth	r1, r1
 800e840:	2301      	movs	r3, #1
 800e842:	222d      	movs	r2, #45	; 0x2d
 800e844:	481b      	ldr	r0, [pc, #108]	; (800e8b4 <MMA8451_begin+0x160>)
 800e846:	f7f3 ffc9 	bl	80027dc <HAL_I2C_Mem_Write>
 800e84a:	ab06      	add	r3, sp, #24
 800e84c:	f995 1000 	ldrsb.w	r1, [r5]
 800e850:	f803 4d04 	strb.w	r4, [r3, #-4]!
 800e854:	0049      	lsls	r1, r1, #1
 800e856:	e88d 0018 	stmia.w	sp, {r3, r4}
 800e85a:	9402      	str	r4, [sp, #8]
 800e85c:	b289      	uxth	r1, r1
 800e85e:	2301      	movs	r3, #1
 800e860:	222e      	movs	r2, #46	; 0x2e
 800e862:	4814      	ldr	r0, [pc, #80]	; (800e8b4 <MMA8451_begin+0x160>)
 800e864:	f7f3 ffba 	bl	80027dc <HAL_I2C_Mem_Write>
 800e868:	ab06      	add	r3, sp, #24
 800e86a:	f995 1000 	ldrsb.w	r1, [r5]
 800e86e:	9402      	str	r4, [sp, #8]
 800e870:	2240      	movs	r2, #64	; 0x40
 800e872:	f803 2d03 	strb.w	r2, [r3, #-3]!
 800e876:	0049      	lsls	r1, r1, #1
 800e878:	e88d 0018 	stmia.w	sp, {r3, r4}
 800e87c:	b289      	uxth	r1, r1
 800e87e:	2301      	movs	r3, #1
 800e880:	2211      	movs	r2, #17
 800e882:	480c      	ldr	r0, [pc, #48]	; (800e8b4 <MMA8451_begin+0x160>)
 800e884:	f7f3 ffaa 	bl	80027dc <HAL_I2C_Mem_Write>
 800e888:	f995 1000 	ldrsb.w	r1, [r5]
 800e88c:	9402      	str	r4, [sp, #8]
 800e88e:	0049      	lsls	r1, r1, #1
 800e890:	9401      	str	r4, [sp, #4]
 800e892:	b289      	uxth	r1, r1
 800e894:	9700      	str	r7, [sp, #0]
 800e896:	2405      	movs	r4, #5
 800e898:	2301      	movs	r3, #1
 800e89a:	222a      	movs	r2, #42	; 0x2a
 800e89c:	4805      	ldr	r0, [pc, #20]	; (800e8b4 <MMA8451_begin+0x160>)
 800e89e:	f88d 4017 	strb.w	r4, [sp, #23]
 800e8a2:	f7f3 ff9b 	bl	80027dc <HAL_I2C_Mem_Write>
 800e8a6:	2001      	movs	r0, #1
}
 800e8a8:	b006      	add	sp, #24
 800e8aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8ae:	bf00      	nop
 800e8b0:	20005370 	.word	0x20005370
 800e8b4:	20005580 	.word	0x20005580

0800e8b8 <MMA8451_setRange>:
/*!
    @brief  Sets the g range for the accelerometer
*/
/**************************************************************************/
void MMA8451_setRange(mma8451_range_t range)
{
 800e8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_I2C_Mem_Read(&hi2c2, _i2caddr<<1, reg, 1, &sample, 1, 2);
 800e8bc:	4f24      	ldr	r7, [pc, #144]	; (800e950 <MMA8451_setRange+0x98>)
 800e8be:	4d25      	ldr	r5, [pc, #148]	; (800e954 <MMA8451_setRange+0x9c>)
 800e8c0:	f997 1000 	ldrsb.w	r1, [r7]
{
 800e8c4:	b086      	sub	sp, #24
    HAL_I2C_Mem_Read(&hi2c2, _i2caddr<<1, reg, 1, &sample, 1, 2);
 800e8c6:	2401      	movs	r4, #1
 800e8c8:	f10d 0617 	add.w	r6, sp, #23
 800e8cc:	2302      	movs	r3, #2
 800e8ce:	0049      	lsls	r1, r1, #1
 800e8d0:	9302      	str	r3, [sp, #8]
 800e8d2:	9600      	str	r6, [sp, #0]
 800e8d4:	4623      	mov	r3, r4
 800e8d6:	b289      	uxth	r1, r1
{
 800e8d8:	4680      	mov	r8, r0
    HAL_I2C_Mem_Read(&hi2c2, _i2caddr<<1, reg, 1, &sample, 1, 2);
 800e8da:	9401      	str	r4, [sp, #4]
 800e8dc:	4628      	mov	r0, r5
 800e8de:	222a      	movs	r2, #42	; 0x2a
 800e8e0:	f7f4 f8a0 	bl	8002a24 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Write(&hi2c2, _i2caddr<<1, reg, 1, &value, 1, 1);
 800e8e4:	f997 1000 	ldrsb.w	r1, [r7]
 800e8e8:	9600      	str	r6, [sp, #0]
 800e8ea:	40a1      	lsls	r1, r4
 800e8ec:	f04f 0e00 	mov.w	lr, #0
 800e8f0:	4623      	mov	r3, r4
 800e8f2:	9402      	str	r4, [sp, #8]
 800e8f4:	b289      	uxth	r1, r1
 800e8f6:	9401      	str	r4, [sp, #4]
 800e8f8:	4628      	mov	r0, r5
 800e8fa:	222a      	movs	r2, #42	; 0x2a
    return sample;
 800e8fc:	f89d 6017 	ldrb.w	r6, [sp, #23]
 800e900:	f88d e017 	strb.w	lr, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c2, _i2caddr<<1, reg, 1, &value, 1, 1);
 800e904:	f7f3 ff6a 	bl	80027dc <HAL_I2C_Mem_Write>
 800e908:	ab06      	add	r3, sp, #24
 800e90a:	f997 1000 	ldrsb.w	r1, [r7]
 800e90e:	9402      	str	r4, [sp, #8]
  uint8_t reg1 = MMA8451_readRegister8(MMA8451_REG_CTRL_REG1);
  MMA8451_writeRegister8(MMA8451_REG_CTRL_REG1, 0x00);            // deactivate
  MMA8451_writeRegister8(MMA8451_REG_XYZ_DATA_CFG, (range & 0x3));  // | 0x10
 800e910:	f008 0803 	and.w	r8, r8, #3
 800e914:	f803 8d02 	strb.w	r8, [r3, #-2]!
	HAL_I2C_Mem_Write(&hi2c2, _i2caddr<<1, reg, 1, &value, 1, 1);
 800e918:	40a1      	lsls	r1, r4
 800e91a:	e88d 0018 	stmia.w	sp, {r3, r4}
 800e91e:	b289      	uxth	r1, r1
 800e920:	4623      	mov	r3, r4
 800e922:	4628      	mov	r0, r5
 800e924:	220e      	movs	r2, #14
 800e926:	f7f3 ff59 	bl	80027dc <HAL_I2C_Mem_Write>
 800e92a:	aa06      	add	r2, sp, #24
 800e92c:	f997 1000 	ldrsb.w	r1, [r7]
 800e930:	9402      	str	r4, [sp, #8]
  MMA8451_writeRegister8(MMA8451_REG_CTRL_REG1, reg1 | 0x01);     // activate
 800e932:	4326      	orrs	r6, r4
 800e934:	f802 6d03 	strb.w	r6, [r2, #-3]!
	HAL_I2C_Mem_Write(&hi2c2, _i2caddr<<1, reg, 1, &value, 1, 1);
 800e938:	40a1      	lsls	r1, r4
 800e93a:	9200      	str	r2, [sp, #0]
 800e93c:	b289      	uxth	r1, r1
 800e93e:	9401      	str	r4, [sp, #4]
 800e940:	4623      	mov	r3, r4
 800e942:	4628      	mov	r0, r5
 800e944:	222a      	movs	r2, #42	; 0x2a
 800e946:	f7f3 ff49 	bl	80027dc <HAL_I2C_Mem_Write>
}
 800e94a:	b006      	add	sp, #24
 800e94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e950:	20005370 	.word	0x20005370
 800e954:	20005580 	.word	0x20005580

0800e958 <accelerometerThread>:
void accelerometerThread(void){
 800e958:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800e95c:	b089      	sub	sp, #36	; 0x24
	  MMA8451_begin();
 800e95e:	f7ff fef9 	bl	800e754 <MMA8451_begin>
	  MMA8451_setRange(MMA8451_RANGE_4_G);
 800e962:	2001      	movs	r0, #1
 800e964:	f7ff ffa8 	bl	800e8b8 <MMA8451_setRange>
 800e968:	f8df b194 	ldr.w	fp, [pc, #404]	; 800eb00 <accelerometerThread+0x1a8>
 800e96c:	4f5a      	ldr	r7, [pc, #360]	; (800ead8 <accelerometerThread+0x180>)
 800e96e:	4e5b      	ldr	r6, [pc, #364]	; (800eadc <accelerometerThread+0x184>)
 800e970:	4d5b      	ldr	r5, [pc, #364]	; (800eae0 <accelerometerThread+0x188>)
 800e972:	4c5c      	ldr	r4, [pc, #368]	; (800eae4 <accelerometerThread+0x18c>)
 800e974:	f8df a18c 	ldr.w	sl, [pc, #396]	; 800eb04 <accelerometerThread+0x1ac>
 800e978:	f8df 918c 	ldr.w	r9, [pc, #396]	; 800eb08 <accelerometerThread+0x1b0>
 800e97c:	f8df 818c 	ldr.w	r8, [pc, #396]	; 800eb0c <accelerometerThread+0x1b4>
  x_g = (float)x / 2048;
 800e980:	eddf 9a59 	vldr	s19, [pc, #356]	; 800eae8 <accelerometerThread+0x190>
	  osSemaphoreWait (accSampleSemaphoreHandle, osWaitForever);
 800e984:	f8db 0000 	ldr.w	r0, [fp]
 800e988:	f04f 31ff 	mov.w	r1, #4294967295
 800e98c:	f7fd fb68 	bl	800c060 <osSemaphoreWait>
	  HAL_I2C_Mem_Read_IT(&hi2c2, _i2caddr<<1, MMA8451_REG_OUT_X_MSB, 1, sample, 6);
 800e990:	4b56      	ldr	r3, [pc, #344]	; (800eaec <accelerometerThread+0x194>)
 800e992:	4857      	ldr	r0, [pc, #348]	; (800eaf0 <accelerometerThread+0x198>)
 800e994:	f993 1000 	ldrsb.w	r1, [r3]
 800e998:	9700      	str	r7, [sp, #0]
 800e99a:	2301      	movs	r3, #1
 800e99c:	2206      	movs	r2, #6
 800e99e:	0049      	lsls	r1, r1, #1
 800e9a0:	b289      	uxth	r1, r1
 800e9a2:	9201      	str	r2, [sp, #4]
 800e9a4:	461a      	mov	r2, r3
 800e9a6:	f7f4 f973 	bl	8002c90 <HAL_I2C_Mem_Read_IT>
	  osDelay(10);
 800e9aa:	200a      	movs	r0, #10
 800e9ac:	f7fd fa7a 	bl	800bea4 <osDelay>
  x = sample[0]; x <<= 8; x |= sample[1]; x >>= 2;
 800e9b0:	783b      	ldrb	r3, [r7, #0]
 800e9b2:	8033      	strh	r3, [r6, #0]
 800e9b4:	8833      	ldrh	r3, [r6, #0]
 800e9b6:	f897 e001 	ldrb.w	lr, [r7, #1]
  y = sample[2]; y <<= 8; y |= sample[3]; y >>= 2;
 800e9ba:	78ba      	ldrb	r2, [r7, #2]
 800e9bc:	78f9      	ldrb	r1, [r7, #3]
  z = sample[4]; z <<= 8; z |= sample[5]; z >>= 2;
 800e9be:	7938      	ldrb	r0, [r7, #4]
  x = sample[0]; x <<= 8; x |= sample[1]; x >>= 2;
 800e9c0:	b25b      	sxtb	r3, r3
 800e9c2:	021b      	lsls	r3, r3, #8
 800e9c4:	8033      	strh	r3, [r6, #0]
 800e9c6:	8833      	ldrh	r3, [r6, #0]
 800e9c8:	b21b      	sxth	r3, r3
 800e9ca:	ea43 030e 	orr.w	r3, r3, lr
 800e9ce:	8033      	strh	r3, [r6, #0]
 800e9d0:	8833      	ldrh	r3, [r6, #0]
  z = sample[4]; z <<= 8; z |= sample[5]; z >>= 2;
 800e9d2:	f897 e005 	ldrb.w	lr, [r7, #5]
  x = sample[0]; x <<= 8; x |= sample[1]; x >>= 2;
 800e9d6:	f343 038d 	sbfx	r3, r3, #2, #14
 800e9da:	8033      	strh	r3, [r6, #0]
  y = sample[2]; y <<= 8; y |= sample[3]; y >>= 2;
 800e9dc:	802a      	strh	r2, [r5, #0]
 800e9de:	882a      	ldrh	r2, [r5, #0]


void calculateAngle(float x_g, float y_g, float z_g){
	float accVector[] = {x_g, y_g, z_g};

	arm_dot_prod_f32(accVector,gravityVector,3,&dotProd);
 800e9e0:	4b44      	ldr	r3, [pc, #272]	; (800eaf4 <accelerometerThread+0x19c>)
  y = sample[2]; y <<= 8; y |= sample[3]; y >>= 2;
 800e9e2:	b252      	sxtb	r2, r2
 800e9e4:	0212      	lsls	r2, r2, #8
 800e9e6:	802a      	strh	r2, [r5, #0]
 800e9e8:	882a      	ldrh	r2, [r5, #0]
 800e9ea:	b212      	sxth	r2, r2
 800e9ec:	430a      	orrs	r2, r1
 800e9ee:	802a      	strh	r2, [r5, #0]
 800e9f0:	882a      	ldrh	r2, [r5, #0]
	arm_dot_prod_f32(accVector,gravityVector,3,&dotProd);
 800e9f2:	4941      	ldr	r1, [pc, #260]	; (800eaf8 <accelerometerThread+0x1a0>)
  y = sample[2]; y <<= 8; y |= sample[3]; y >>= 2;
 800e9f4:	f342 028d 	sbfx	r2, r2, #2, #14
 800e9f8:	802a      	strh	r2, [r5, #0]
  z = sample[4]; z <<= 8; z |= sample[5]; z >>= 2;
 800e9fa:	8020      	strh	r0, [r4, #0]
 800e9fc:	8820      	ldrh	r0, [r4, #0]
 800e9fe:	b240      	sxtb	r0, r0
 800ea00:	0200      	lsls	r0, r0, #8
 800ea02:	8020      	strh	r0, [r4, #0]
 800ea04:	8822      	ldrh	r2, [r4, #0]
 800ea06:	b212      	sxth	r2, r2
 800ea08:	ea42 020e 	orr.w	r2, r2, lr
 800ea0c:	8022      	strh	r2, [r4, #0]
 800ea0e:	8822      	ldrh	r2, [r4, #0]
 800ea10:	f342 028d 	sbfx	r2, r2, #2, #14
 800ea14:	8022      	strh	r2, [r4, #0]
  x_g = (float)x / 2048;
 800ea16:	8832      	ldrh	r2, [r6, #0]
 800ea18:	b212      	sxth	r2, r2
 800ea1a:	ee07 2a90 	vmov	s15, r2
 800ea1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	arm_dot_prod_f32(accVector,gravityVector,3,&dotProd);
 800ea22:	2203      	movs	r2, #3
  x_g = (float)x / 2048;
 800ea24:	ee67 7aa9 	vmul.f32	s15, s15, s19
	arm_dot_prod_f32(accVector,gravityVector,3,&dotProd);
 800ea28:	a805      	add	r0, sp, #20
  x_g = (float)x / 2048;
 800ea2a:	edca 7a00 	vstr	s15, [sl]
  y_g = (float)y / 2048;
 800ea2e:	f8b5 e000 	ldrh.w	lr, [r5]
 800ea32:	fa0f fe8e 	sxth.w	lr, lr
 800ea36:	ee07 ea90 	vmov	s15, lr
 800ea3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ea3e:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800ea42:	edc9 7a00 	vstr	s15, [r9]
  z_g = (float)z / 2048;
 800ea46:	f8b4 e000 	ldrh.w	lr, [r4]
 800ea4a:	fa0f fe8e 	sxth.w	lr, lr
 800ea4e:	ee07 ea90 	vmov	s15, lr
 800ea52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ea56:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800ea5a:	edc8 7a00 	vstr	s15, [r8]
	  calculateAngle(x_g, y_g, z_g);
 800ea5e:	ed9a 9a00 	vldr	s18, [sl]
 800ea62:	ed99 8a00 	vldr	s16, [r9]
 800ea66:	edd8 8a00 	vldr	s17, [r8]
	float accVector[] = {x_g, y_g, z_g};
 800ea6a:	ed8d 8a06 	vstr	s16, [sp, #24]

	angle = (dotProd/ ( sqrt(x_g*x_g + y_g*y_g + z_g*z_g))) + PI_DIV_2;
 800ea6e:	ee28 8a08 	vmul.f32	s16, s16, s16
	float accVector[] = {x_g, y_g, z_g};
 800ea72:	ed8d 9a05 	vstr	s18, [sp, #20]
	angle = (dotProd/ ( sqrt(x_g*x_g + y_g*y_g + z_g*z_g))) + PI_DIV_2;
 800ea76:	eea9 8a09 	vfma.f32	s16, s18, s18
	float accVector[] = {x_g, y_g, z_g};
 800ea7a:	edcd 8a07 	vstr	s17, [sp, #28]
	angle = (dotProd/ ( sqrt(x_g*x_g + y_g*y_g + z_g*z_g))) + PI_DIV_2;
 800ea7e:	eea8 8aa8 	vfma.f32	s16, s17, s17
	arm_dot_prod_f32(accVector,gravityVector,3,&dotProd);
 800ea82:	f005 f9b9 	bl	8013df8 <arm_dot_prod_f32>
	angle = (dotProd/ ( sqrt(x_g*x_g + y_g*y_g + z_g*z_g))) + PI_DIV_2;
 800ea86:	ee18 0a10 	vmov	r0, s16
 800ea8a:	f7f1 fd1d 	bl	80004c8 <__aeabi_f2d>
 800ea8e:	ec41 0b10 	vmov	d0, r0, r1
 800ea92:	f005 fa89 	bl	8013fa8 <sqrt>
 800ea96:	ec53 2b10 	vmov	r2, r3, d0
 800ea9a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ea9e:	4b15      	ldr	r3, [pc, #84]	; (800eaf4 <accelerometerThread+0x19c>)
 800eaa0:	6818      	ldr	r0, [r3, #0]
 800eaa2:	f7f1 fd11 	bl	80004c8 <__aeabi_f2d>
 800eaa6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eaaa:	f7f1 fe8b 	bl	80007c4 <__aeabi_ddiv>
 800eaae:	a308      	add	r3, pc, #32	; (adr r3, 800ead0 <accelerometerThread+0x178>)
 800eab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab4:	f7f1 fbaa 	bl	800020c <__adddf3>
 800eab8:	f7f2 f852 	bl	8000b60 <__aeabi_d2f>
 800eabc:	4b0f      	ldr	r3, [pc, #60]	; (800eafc <accelerometerThread+0x1a4>)
	  setCutoffFreq(angle);
 800eabe:	ee00 0a10 	vmov	s0, r0
	angle = (dotProd/ ( sqrt(x_g*x_g + y_g*y_g + z_g*z_g))) + PI_DIV_2;
 800eac2:	6018      	str	r0, [r3, #0]
	  setCutoffFreq(angle);
 800eac4:	f000 fbdc 	bl	800f280 <setCutoffFreq>
 800eac8:	e75c      	b.n	800e984 <accelerometerThread+0x2c>
 800eaca:	bf00      	nop
 800eacc:	f3af 8000 	nop.w
 800ead0:	544486e0 	.word	0x544486e0
 800ead4:	3ff921fb 	.word	0x3ff921fb
 800ead8:	200053a4 	.word	0x200053a4
 800eadc:	20005360 	.word	0x20005360
 800eae0:	2000538c 	.word	0x2000538c
 800eae4:	20005378 	.word	0x20005378
 800eae8:	3a000000 	.word	0x3a000000
 800eaec:	20005370 	.word	0x20005370
 800eaf0:	20005580 	.word	0x20005580
 800eaf4:	20005374 	.word	0x20005374
 800eaf8:	20000024 	.word	0x20000024
 800eafc:	20005380 	.word	0x20005380
 800eb00:	2000536c 	.word	0x2000536c
 800eb04:	20005390 	.word	0x20005390
 800eb08:	200053ac 	.word	0x200053ac
 800eb0c:	200053a0 	.word	0x200053a0

0800eb10 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800eb10:	b530      	push	{r4, r5, lr}
  ADC_ChannelConfTypeDef sConfig = {0};

  /**Common config 
  */
  hadc1.Instance = ADC1;
 800eb12:	4a1c      	ldr	r2, [pc, #112]	; (800eb84 <MX_ADC1_Init+0x74>)
 800eb14:	4b1c      	ldr	r3, [pc, #112]	; (800eb88 <MX_ADC1_Init+0x78>)
 800eb16:	6013      	str	r3, [r2, #0]
{
 800eb18:	b087      	sub	sp, #28
  ADC_ChannelConfTypeDef sConfig = {0};
 800eb1a:	2300      	movs	r3, #0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800eb1c:	2404      	movs	r4, #4
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
 800eb1e:	2101      	movs	r1, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.OversamplingMode = DISABLE;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800eb20:	4610      	mov	r0, r2
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800eb22:	6154      	str	r4, [r2, #20]
  hadc1.Init.NbrOfConversion = 1;
 800eb24:	61d1      	str	r1, [r2, #28]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800eb26:	6053      	str	r3, [r2, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 800eb28:	9300      	str	r3, [sp, #0]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800eb2a:	6093      	str	r3, [r2, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800eb2c:	60d3      	str	r3, [r2, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800eb2e:	6113      	str	r3, [r2, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800eb30:	7613      	strb	r3, [r2, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800eb32:	7653      	strb	r3, [r2, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800eb34:	f882 3020 	strb.w	r3, [r2, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800eb38:	6293      	str	r3, [r2, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800eb3a:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800eb3c:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800eb40:	6353      	str	r3, [r2, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800eb42:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
  ADC_ChannelConfTypeDef sConfig = {0};
 800eb46:	9301      	str	r3, [sp, #4]
 800eb48:	9302      	str	r3, [sp, #8]
 800eb4a:	9303      	str	r3, [sp, #12]
 800eb4c:	9304      	str	r3, [sp, #16]
 800eb4e:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800eb50:	f7f2 fa0e 	bl	8000f70 <HAL_ADC_Init>
 800eb54:	b998      	cbnz	r0, 800eb7e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
  }
  /**Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800eb56:	4b0d      	ldr	r3, [pc, #52]	; (800eb8c <MX_ADC1_Init+0x7c>)
 800eb58:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800eb5a:	2506      	movs	r5, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800eb5c:	2300      	movs	r3, #0
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800eb5e:	247f      	movs	r4, #127	; 0x7f
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800eb60:	2204      	movs	r2, #4
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800eb62:	4669      	mov	r1, sp
 800eb64:	4807      	ldr	r0, [pc, #28]	; (800eb84 <MX_ADC1_Init+0x74>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800eb66:	9501      	str	r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800eb68:	9302      	str	r3, [sp, #8]
  sConfig.Offset = 0;
 800eb6a:	9305      	str	r3, [sp, #20]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800eb6c:	9403      	str	r4, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800eb6e:	9204      	str	r2, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800eb70:	f7f2 fadc 	bl	800112c <HAL_ADC_ConfigChannel>
 800eb74:	b108      	cbz	r0, 800eb7a <MX_ADC1_Init+0x6a>
  {
    Error_Handler();
 800eb76:	f001 ffad 	bl	8010ad4 <Error_Handler>
  }

}
 800eb7a:	b007      	add	sp, #28
 800eb7c:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 800eb7e:	f001 ffa9 	bl	8010ad4 <Error_Handler>
 800eb82:	e7e8      	b.n	800eb56 <MX_ADC1_Init+0x46>
 800eb84:	200053b0 	.word	0x200053b0
 800eb88:	50040000 	.word	0x50040000
 800eb8c:	0c900008 	.word	0x0c900008

0800eb90 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800eb90:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 800eb92:	6801      	ldr	r1, [r0, #0]
 800eb94:	4a15      	ldr	r2, [pc, #84]	; (800ebec <HAL_ADC_MspInit+0x5c>)
{
 800eb96:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eb98:	2300      	movs	r3, #0
  if(adcHandle->Instance==ADC1)
 800eb9a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eb9c:	9304      	str	r3, [sp, #16]
 800eb9e:	9303      	str	r3, [sp, #12]
 800eba0:	9305      	str	r3, [sp, #20]
 800eba2:	9306      	str	r3, [sp, #24]
 800eba4:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 800eba6:	d001      	beq.n	800ebac <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800eba8:	b008      	add	sp, #32
 800ebaa:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 800ebac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ebb0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(HALL_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 800ebb4:	480e      	ldr	r0, [pc, #56]	; (800ebf0 <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC_CLK_ENABLE();
 800ebb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ebb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ebbc:	64da      	str	r2, [r3, #76]	; 0x4c
 800ebbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ebc0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800ebc4:	9201      	str	r2, [sp, #4]
 800ebc6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ebc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ebca:	f042 0204 	orr.w	r2, r2, #4
 800ebce:	64da      	str	r2, [r3, #76]	; 0x4c
 800ebd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ebd2:	f003 0304 	and.w	r3, r3, #4
 800ebd6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = HALL_OUTPUT_Pin;
 800ebd8:	2204      	movs	r2, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ebda:	2303      	movs	r3, #3
    HAL_GPIO_Init(HALL_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 800ebdc:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ebde:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Pin = HALL_OUTPUT_Pin;
 800ebe0:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ebe2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(HALL_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 800ebe4:	f7f3 f9b2 	bl	8001f4c <HAL_GPIO_Init>
}
 800ebe8:	b008      	add	sp, #32
 800ebea:	bd10      	pop	{r4, pc}
 800ebec:	50040000 	.word	0x50040000
 800ebf0:	48000800 	.word	0x48000800

0800ebf4 <Setup_Cap_Touch>:

uint8_t leftTouchDebounce = 0;
uint8_t rightTouchDebounce = 0;

/**************** functions ***************************/
void Setup_Cap_Touch(void){
 800ebf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebf6:	b087      	sub	sp, #28
	uint8_t packet;

	// ungroup all CAP sensors to work individually
	packet = 0x02;
 800ebf8:	ad06      	add	r5, sp, #24
 800ebfa:	2302      	movs	r3, #2
 800ebfc:	f805 3d01 	strb.w	r3, [r5, #-1]!
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, CNFG_REG_4, 1, &packet, 1, 1);
 800ec00:	4e2a      	ldr	r6, [pc, #168]	; (800ecac <Setup_Cap_Touch+0xb8>)
 800ec02:	9500      	str	r5, [sp, #0]
 800ec04:	2401      	movs	r4, #1
 800ec06:	9402      	str	r4, [sp, #8]
 800ec08:	9401      	str	r4, [sp, #4]
 800ec0a:	4623      	mov	r3, r4
 800ec0c:	4630      	mov	r0, r6
 800ec0e:	2240      	movs	r2, #64	; 0x40
 800ec10:	2150      	movs	r1, #80	; 0x50

	// device will not block multiple touches
	packet = 0x04;
 800ec12:	2704      	movs	r7, #4
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, CNFG_REG_4, 1, &packet, 1, 1);
 800ec14:	f7f3 fde2 	bl	80027dc <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, MULT_TOUCH_REG, 1, &packet, 1, 1);
 800ec18:	9402      	str	r4, [sp, #8]
 800ec1a:	9401      	str	r4, [sp, #4]
 800ec1c:	4623      	mov	r3, r4
	packet = 0x04;
 800ec1e:	f88d 7017 	strb.w	r7, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, MULT_TOUCH_REG, 1, &packet, 1, 1);
 800ec22:	9500      	str	r5, [sp, #0]
 800ec24:	4630      	mov	r0, r6
 800ec26:	222a      	movs	r2, #42	; 0x2a
 800ec28:	2150      	movs	r1, #80	; 0x50
	// disable auto-calibration
//	packet = 0x00;
//	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, CALIBRATION_REG, 1, &packet, 1, 1);

	// sensitivity control
	packet = 0x7F;
 800ec2a:	277f      	movs	r7, #127	; 0x7f
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, MULT_TOUCH_REG, 1, &packet, 1, 1);
 800ec2c:	f7f3 fdd6 	bl	80027dc <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, DATA_SENS_REG, 1, &packet, 1, 1);
 800ec30:	9402      	str	r4, [sp, #8]
 800ec32:	9401      	str	r4, [sp, #4]
 800ec34:	4623      	mov	r3, r4
	packet = 0x7F;
 800ec36:	f88d 7017 	strb.w	r7, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, DATA_SENS_REG, 1, &packet, 1, 1);
 800ec3a:	9500      	str	r5, [sp, #0]
 800ec3c:	4630      	mov	r0, r6
 800ec3e:	221f      	movs	r2, #31
 800ec40:	2150      	movs	r1, #80	; 0x50

	// setting button 1 threshold sets all
	packet = 0x93 | 0x40;
 800ec42:	27d3      	movs	r7, #211	; 0xd3
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, DATA_SENS_REG, 1, &packet, 1, 1);
 800ec44:	f7f3 fdca 	bl	80027dc <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, RECAL_REG, 1, &packet, 1, 1);
 800ec48:	9402      	str	r4, [sp, #8]
 800ec4a:	9401      	str	r4, [sp, #4]
 800ec4c:	4623      	mov	r3, r4
	packet = 0x93 | 0x40;
 800ec4e:	f88d 7017 	strb.w	r7, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, RECAL_REG, 1, &packet, 1, 1);
 800ec52:	9500      	str	r5, [sp, #0]

	packet = 0x00;
 800ec54:	2700      	movs	r7, #0
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, RECAL_REG, 1, &packet, 1, 1);
 800ec56:	4630      	mov	r0, r6
 800ec58:	222f      	movs	r2, #47	; 0x2f
 800ec5a:	2150      	movs	r1, #80	; 0x50
 800ec5c:	f7f3 fdbe 	bl	80027dc <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, MAIN_STATUS, 1, &packet, 1, 1);
 800ec60:	9402      	str	r4, [sp, #8]
 800ec62:	9401      	str	r4, [sp, #4]
 800ec64:	4623      	mov	r3, r4
 800ec66:	463a      	mov	r2, r7
 800ec68:	9500      	str	r5, [sp, #0]
 800ec6a:	4630      	mov	r0, r6
 800ec6c:	2150      	movs	r1, #80	; 0x50
	packet = 0x00;
 800ec6e:	f88d 7017 	strb.w	r7, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, MAIN_STATUS, 1, &packet, 1, 1);
 800ec72:	f7f3 fdb3 	bl	80027dc <HAL_I2C_Mem_Write>

    packet = 0xFF;
 800ec76:	27ff      	movs	r7, #255	; 0xff
    HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, 0x4E, 1, &packet, 1, 1);
 800ec78:	9402      	str	r4, [sp, #8]
 800ec7a:	9401      	str	r4, [sp, #4]
 800ec7c:	4623      	mov	r3, r4
 800ec7e:	9500      	str	r5, [sp, #0]
 800ec80:	4630      	mov	r0, r6
 800ec82:	224e      	movs	r2, #78	; 0x4e
 800ec84:	2150      	movs	r1, #80	; 0x50
    packet = 0xFF;
 800ec86:	f88d 7017 	strb.w	r7, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, 0x4E, 1, &packet, 1, 1);
 800ec8a:	f7f3 fda7 	bl	80027dc <HAL_I2C_Mem_Write>

    packet = 0x03;
    HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, 0x4E, 1, &packet, 1, 1);
 800ec8e:	9402      	str	r4, [sp, #8]
 800ec90:	9401      	str	r4, [sp, #4]
 800ec92:	4623      	mov	r3, r4
 800ec94:	9500      	str	r5, [sp, #0]
 800ec96:	4630      	mov	r0, r6
    packet = 0x03;
 800ec98:	2403      	movs	r4, #3
    HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, 0x4E, 1, &packet, 1, 1);
 800ec9a:	224e      	movs	r2, #78	; 0x4e
 800ec9c:	2150      	movs	r1, #80	; 0x50
    packet = 0x03;
 800ec9e:	f88d 4017 	strb.w	r4, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, 0x4E, 1, &packet, 1, 1);
 800eca2:	f7f3 fd9b 	bl	80027dc <HAL_I2C_Mem_Write>
//		packet = 0x00;
//		HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, 0x00, 1, &packet, 1, 1);
//
//		HAL_I2C_Mem_Read(&hi2c1, CAP1214_ADDR<<1, SENSOR_1_DELTA_CNT, 1, &temp, 14, 1);
//	}
}
 800eca6:	b007      	add	sp, #28
 800eca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecaa:	bf00      	nop
 800ecac:	20005534 	.word	0x20005534

0800ecb0 <Reset_Cap_INT>:

	HAL_Delay(1);
	Reset_Cap_INT();
}

void Reset_Cap_INT(void){
 800ecb0:	b500      	push	{lr}
 800ecb2:	b087      	sub	sp, #28
	uint8_t packet = 0x00;
 800ecb4:	a906      	add	r1, sp, #24
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	f801 2d01 	strb.w	r2, [r1, #-1]!
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, 0x00, 1, &packet, 1, 1);
 800ecbc:	2301      	movs	r3, #1
 800ecbe:	9100      	str	r1, [sp, #0]
 800ecc0:	9302      	str	r3, [sp, #8]
 800ecc2:	9301      	str	r3, [sp, #4]
 800ecc4:	2150      	movs	r1, #80	; 0x50
 800ecc6:	4803      	ldr	r0, [pc, #12]	; (800ecd4 <Reset_Cap_INT+0x24>)
 800ecc8:	f7f3 fd88 	bl	80027dc <HAL_I2C_Mem_Write>
}
 800eccc:	b007      	add	sp, #28
 800ecce:	f85d fb04 	ldr.w	pc, [sp], #4
 800ecd2:	bf00      	nop
 800ecd4:	20005534 	.word	0x20005534

0800ecd8 <Sample_Cap_Touch>:


//// reads cap touch sense binary values from CAP1214 IC and
////    turns on corresponding LEDs
void Sample_Cap_Touch(void){
 800ecd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecdc:	b087      	sub	sp, #28
	uint8_t start_DMA = 0;
	uint8_t start_DMA_2 = 0;

    Reset_Cap_INT();
 800ecde:	f7ff ffe7 	bl	800ecb0 <Reset_Cap_INT>
 800ece2:	f8df 935c 	ldr.w	r9, [pc, #860]	; 800f040 <Sample_Cap_Touch+0x368>
 800ece6:	4dd4      	ldr	r5, [pc, #848]	; (800f038 <Sample_Cap_Touch+0x360>)
 800ece8:	f8df b358 	ldr.w	fp, [pc, #856]	; 800f044 <Sample_Cap_Touch+0x36c>
 800ecec:	f8df a358 	ldr.w	sl, [pc, #856]	; 800f048 <Sample_Cap_Touch+0x370>
	HAL_I2C_Mem_Read(&hi2c1, CAP1214_ADDR<<1, 0x03, 1, cap_read, 2, 2);
 800ecf0:	4fd2      	ldr	r7, [pc, #840]	; (800f03c <Sample_Cap_Touch+0x364>)
 800ecf2:	f10d 0817 	add.w	r8, sp, #23
 800ecf6:	2601      	movs	r6, #1

	while(1){
	osSemaphoreWait (capSampleSemaphoreHandle, osWaitForever);
 800ecf8:	f04f 31ff 	mov.w	r1, #4294967295
 800ecfc:	f8d9 0000 	ldr.w	r0, [r9]
 800ed00:	f7fd f9ae 	bl	800c060 <osSemaphoreWait>

	taskENTER_CRITICAL();
 800ed04:	f7fd fab6 	bl	800c274 <vPortEnterCritical>
	HAL_I2C_Mem_Read(&hi2c1, CAP1214_ADDR<<1, 0x03, 1, cap_read, 2, 2);
 800ed08:	2302      	movs	r3, #2
 800ed0a:	2203      	movs	r2, #3
 800ed0c:	2150      	movs	r1, #80	; 0x50
 800ed0e:	9302      	str	r3, [sp, #8]
 800ed10:	9301      	str	r3, [sp, #4]
 800ed12:	9500      	str	r5, [sp, #0]
 800ed14:	2301      	movs	r3, #1
 800ed16:	4638      	mov	r0, r7
 800ed18:	f7f3 fe84 	bl	8002a24 <HAL_I2C_Mem_Read>
	uint8_t packet = 0x00;
 800ed1c:	2400      	movs	r4, #0
	HAL_Delay(1);
 800ed1e:	2001      	movs	r0, #1
 800ed20:	f7f2 f918 	bl	8000f54 <HAL_Delay>
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, 0x00, 1, &packet, 1, 1);
 800ed24:	4622      	mov	r2, r4
 800ed26:	2301      	movs	r3, #1
 800ed28:	2150      	movs	r1, #80	; 0x50
 800ed2a:	9602      	str	r6, [sp, #8]
 800ed2c:	9601      	str	r6, [sp, #4]
 800ed2e:	f8cd 8000 	str.w	r8, [sp]
 800ed32:	4638      	mov	r0, r7
	uint8_t packet = 0x00;
 800ed34:	f88d 4017 	strb.w	r4, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, 0x00, 1, &packet, 1, 1);
 800ed38:	f7f3 fd50 	bl	80027dc <HAL_I2C_Mem_Write>
	Read_Cap_Touch();
	taskEXIT_CRITICAL();
 800ed3c:	f7fd fabc 	bl	800c2b8 <vPortExitCritical>

	if(isButtonEnabled() == 1){
 800ed40:	f002 f9a2 	bl	8011088 <isButtonEnabled>
 800ed44:	2801      	cmp	r0, #1
 800ed46:	d1d7      	bne.n	800ecf8 <Sample_Cap_Touch+0x20>
		if( (cap_read[KEY_1_PORT] & KEY_1_PIN) == KEY_1_PIN){
 800ed48:	782a      	ldrb	r2, [r5, #0]
 800ed4a:	f012 0402 	ands.w	r4, r2, #2
 800ed4e:	f000 808b 	beq.w	800ee68 <Sample_Cap_Touch+0x190>
			Set_LED(CAP_1_LED_PORT, CAP_1_LED_PIN, 1);
 800ed52:	4602      	mov	r2, r0
 800ed54:	2120      	movs	r1, #32
 800ed56:	2003      	movs	r0, #3
 800ed58:	f001 fbae 	bl	80104b8 <Set_LED>
			if(LED_State(CAP_1_LED_PORT, CAP_1_LED_PIN)){
				Set_LED(CAP_1_LED_PORT, CAP_1_LED_PIN, 0);
			}
		}

		if( (cap_read[KEY_2_PORT] & KEY_2_PIN) == KEY_2_PIN){
 800ed5c:	782a      	ldrb	r2, [r5, #0]
 800ed5e:	f012 0404 	ands.w	r4, r2, #4
 800ed62:	f000 8092 	beq.w	800ee8a <Sample_Cap_Touch+0x1b2>
			Set_LED(CAP_2_LED_PORT, CAP_2_LED_PIN, 1);
 800ed66:	2201      	movs	r2, #1
 800ed68:	2110      	movs	r1, #16
 800ed6a:	2003      	movs	r0, #3
 800ed6c:	f001 fba4 	bl	80104b8 <Set_LED>
			if(LED_State(CAP_2_LED_PORT, CAP_2_LED_PIN)){
				Set_LED(CAP_2_LED_PORT, CAP_2_LED_PIN, 0);
			}
		}

		if( (cap_read[KEY_3_PORT] & KEY_3_PIN) == KEY_3_PIN){
 800ed70:	782a      	ldrb	r2, [r5, #0]
 800ed72:	f012 0408 	ands.w	r4, r2, #8
 800ed76:	f000 8099 	beq.w	800eeac <Sample_Cap_Touch+0x1d4>
			Set_LED(CAP_3_LED_PORT, CAP_3_LED_PIN, 1);
 800ed7a:	2201      	movs	r2, #1
 800ed7c:	2108      	movs	r1, #8
 800ed7e:	2003      	movs	r0, #3
 800ed80:	f001 fb9a 	bl	80104b8 <Set_LED>
			if(LED_State(CAP_3_LED_PORT, CAP_3_LED_PIN)){
				Set_LED(CAP_3_LED_PORT, CAP_3_LED_PIN, 0);
			}
		}

		if( (cap_read[KEY_4_PORT] & KEY_4_PIN) == KEY_4_PIN){
 800ed84:	782a      	ldrb	r2, [r5, #0]
 800ed86:	f012 0410 	ands.w	r4, r2, #16
 800ed8a:	f000 80a0 	beq.w	800eece <Sample_Cap_Touch+0x1f6>
			Set_LED(CAP_4_LED_PORT, CAP_4_LED_PIN, 1);
 800ed8e:	2201      	movs	r2, #1
 800ed90:	2104      	movs	r1, #4
 800ed92:	2003      	movs	r0, #3
 800ed94:	f001 fb90 	bl	80104b8 <Set_LED>
			if(LED_State(CAP_4_LED_PORT, CAP_4_LED_PIN)){
				Set_LED(CAP_4_LED_PORT, CAP_4_LED_PIN, 0);
			}
		}

		if( (cap_read[KEY_5_PORT] & KEY_5_PIN) == KEY_5_PIN){
 800ed98:	782a      	ldrb	r2, [r5, #0]
 800ed9a:	f012 0420 	ands.w	r4, r2, #32
 800ed9e:	f000 80a7 	beq.w	800eef0 <Sample_Cap_Touch+0x218>
			Set_LED(CAP_5_LED_PORT, CAP_5_LED_PIN, 1);
 800eda2:	2201      	movs	r2, #1
 800eda4:	2102      	movs	r1, #2
 800eda6:	2003      	movs	r0, #3
 800eda8:	f001 fb86 	bl	80104b8 <Set_LED>
			if(LED_State(CAP_5_LED_PORT, CAP_5_LED_PIN)){
				Set_LED(CAP_5_LED_PORT, CAP_5_LED_PIN, 0);
			}
		}

		if( (cap_read[KEY_6_PORT] & KEY_6_PIN) == KEY_6_PIN){
 800edac:	786a      	ldrb	r2, [r5, #1]
 800edae:	f012 0401 	ands.w	r4, r2, #1
 800edb2:	f000 80ae 	beq.w	800ef12 <Sample_Cap_Touch+0x23a>
			Set_LED(CAP_6_LED_PORT, CAP_6_LED_PIN, 1);
 800edb6:	2201      	movs	r2, #1
 800edb8:	4611      	mov	r1, r2
 800edba:	2003      	movs	r0, #3
 800edbc:	f001 fb7c 	bl	80104b8 <Set_LED>
			if(LED_State(CAP_6_LED_PORT, CAP_6_LED_PIN)){
				Set_LED(CAP_6_LED_PORT, CAP_6_LED_PIN, 0);
			}
		}

		if( (cap_read[KEY_7_PORT] & KEY_7_PIN) == KEY_7_PIN){
 800edc0:	786a      	ldrb	r2, [r5, #1]
 800edc2:	f012 0402 	ands.w	r4, r2, #2
 800edc6:	f000 80b5 	beq.w	800ef34 <Sample_Cap_Touch+0x25c>
			Set_LED(CAP_7_LED_PORT, CAP_7_LED_PIN, 1);
 800edca:	2201      	movs	r2, #1
 800edcc:	2180      	movs	r1, #128	; 0x80
 800edce:	2002      	movs	r0, #2
 800edd0:	f001 fb72 	bl	80104b8 <Set_LED>
			if(LED_State(CAP_7_LED_PORT, CAP_7_LED_PIN)){
				Set_LED(CAP_7_LED_PORT, CAP_7_LED_PIN, 0);
			}
		}

		if( (cap_read[KEY_8_PORT] & KEY_8_PIN) == KEY_8_PIN){
 800edd4:	786a      	ldrb	r2, [r5, #1]
 800edd6:	f012 0404 	ands.w	r4, r2, #4
 800edda:	f000 80bc 	beq.w	800ef56 <Sample_Cap_Touch+0x27e>
			Set_LED(CAP_8_LED_PORT, CAP_8_LED_PIN, 1);
 800edde:	2201      	movs	r2, #1
 800ede0:	2140      	movs	r1, #64	; 0x40
 800ede2:	2002      	movs	r0, #2
 800ede4:	f001 fb68 	bl	80104b8 <Set_LED>
			if(LED_State(CAP_8_LED_PORT, CAP_8_LED_PIN)){
				Set_LED(CAP_8_LED_PORT, CAP_8_LED_PIN, 0);
			}
		}

		if( (cap_read[KEY_9_PORT] & KEY_9_PIN) == KEY_9_PIN){
 800ede8:	786a      	ldrb	r2, [r5, #1]
 800edea:	f012 0408 	ands.w	r4, r2, #8
 800edee:	f000 80c3 	beq.w	800ef78 <Sample_Cap_Touch+0x2a0>
			Set_LED(CAP_9_LED_PORT, CAP_9_LED_PIN, 1);
 800edf2:	2201      	movs	r2, #1
 800edf4:	2120      	movs	r1, #32
 800edf6:	2002      	movs	r0, #2
 800edf8:	f001 fb5e 	bl	80104b8 <Set_LED>
			if(LED_State(CAP_9_LED_PORT, CAP_9_LED_PIN)){
				Set_LED(CAP_9_LED_PORT, CAP_9_LED_PIN, 0);
			}
		}

		if( (cap_read[KEY_10_PORT] & KEY_10_PIN) == KEY_10_PIN){
 800edfc:	786a      	ldrb	r2, [r5, #1]
 800edfe:	f012 0410 	ands.w	r4, r2, #16
 800ee02:	f000 80ca 	beq.w	800ef9a <Sample_Cap_Touch+0x2c2>
			Set_LED(CAP_10_LED_PORT, CAP_10_LED_PIN, 1);
 800ee06:	2201      	movs	r2, #1
 800ee08:	2110      	movs	r1, #16
 800ee0a:	2002      	movs	r0, #2
 800ee0c:	f001 fb54 	bl	80104b8 <Set_LED>
			if(LED_State(CAP_10_LED_PORT, CAP_10_LED_PIN)){
				Set_LED(CAP_10_LED_PORT, CAP_10_LED_PIN, 0);
			}
		}

		if( (cap_read[KEY_11_PORT] & KEY_11_PIN) == KEY_11_PIN){
 800ee10:	786a      	ldrb	r2, [r5, #1]
 800ee12:	f012 0420 	ands.w	r4, r2, #32
 800ee16:	f000 80d1 	beq.w	800efbc <Sample_Cap_Touch+0x2e4>
			Set_LED(CAP_11_LED_PORT, CAP_11_LED_PIN, 1);
 800ee1a:	2201      	movs	r2, #1
 800ee1c:	2108      	movs	r1, #8
 800ee1e:	2002      	movs	r0, #2
 800ee20:	f001 fb4a 	bl	80104b8 <Set_LED>
			if(LED_State(CAP_11_LED_PORT, CAP_11_LED_PIN)){
				Set_LED(CAP_11_LED_PORT, CAP_11_LED_PIN, 0);
			}
		}

		if( (cap_read[KEY_12_PORT] & KEY_12_PIN) == KEY_12_PIN){
 800ee24:	786a      	ldrb	r2, [r5, #1]
 800ee26:	f012 0440 	ands.w	r4, r2, #64	; 0x40
 800ee2a:	f000 80d8 	beq.w	800efde <Sample_Cap_Touch+0x306>
			Set_LED(CAP_12_LED_PORT, CAP_12_LED_PIN, 1);
 800ee2e:	2201      	movs	r2, #1
 800ee30:	2104      	movs	r1, #4
 800ee32:	2002      	movs	r0, #2
 800ee34:	f001 fb40 	bl	80104b8 <Set_LED>
			if(LED_State(CAP_12_LED_PORT, CAP_12_LED_PIN)){
				Set_LED(CAP_12_LED_PORT, CAP_12_LED_PIN, 0);
			}
		}

		if( (cap_read[LEFT_BUTTON_PORT] & LEFT_BUTTON_PIN) == LEFT_BUTTON_PIN){
 800ee38:	782b      	ldrb	r3, [r5, #0]
 800ee3a:	f013 0301 	ands.w	r3, r3, #1
 800ee3e:	f000 80df 	beq.w	800f000 <Sample_Cap_Touch+0x328>
			if(leftTouchDebounce == 0){
 800ee42:	f89b 3000 	ldrb.w	r3, [fp]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	f000 80f0 	beq.w	800f02c <Sample_Cap_Touch+0x354>
			if(leftTouchDebounce){
				leftTouchDebounce = 0;
			}
		}

		if( (cap_read[RIGHT_BUTTON_PORT] & RIGHT_BUTTON_PIN) == RIGHT_BUTTON_PIN){
 800ee4c:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800ee50:	2b00      	cmp	r3, #0
			if(rightTouchDebounce == 0){
 800ee52:	f89a 3000 	ldrb.w	r3, [sl]
		if( (cap_read[RIGHT_BUTTON_PORT] & RIGHT_BUTTON_PIN) == RIGHT_BUTTON_PIN){
 800ee56:	f2c0 80e1 	blt.w	800f01c <Sample_Cap_Touch+0x344>
				incrementOctave();
				rightTouchDebounce = 1;
			}
		}
		else{
			if(rightTouchDebounce){
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	f43f af4c 	beq.w	800ecf8 <Sample_Cap_Touch+0x20>
				rightTouchDebounce = 0;
 800ee60:	2300      	movs	r3, #0
 800ee62:	f88a 3000 	strb.w	r3, [sl]
 800ee66:	e747      	b.n	800ecf8 <Sample_Cap_Touch+0x20>
			if(LED_State(CAP_1_LED_PORT, CAP_1_LED_PIN)){
 800ee68:	2120      	movs	r1, #32
 800ee6a:	2003      	movs	r0, #3
 800ee6c:	f001 fb5a 	bl	8010524 <LED_State>
 800ee70:	2800      	cmp	r0, #0
 800ee72:	f43f af73 	beq.w	800ed5c <Sample_Cap_Touch+0x84>
				Set_LED(CAP_1_LED_PORT, CAP_1_LED_PIN, 0);
 800ee76:	4622      	mov	r2, r4
 800ee78:	2120      	movs	r1, #32
 800ee7a:	2003      	movs	r0, #3
 800ee7c:	f001 fb1c 	bl	80104b8 <Set_LED>
		if( (cap_read[KEY_2_PORT] & KEY_2_PIN) == KEY_2_PIN){
 800ee80:	782a      	ldrb	r2, [r5, #0]
 800ee82:	f012 0404 	ands.w	r4, r2, #4
 800ee86:	f47f af6e 	bne.w	800ed66 <Sample_Cap_Touch+0x8e>
			if(LED_State(CAP_2_LED_PORT, CAP_2_LED_PIN)){
 800ee8a:	2110      	movs	r1, #16
 800ee8c:	2003      	movs	r0, #3
 800ee8e:	f001 fb49 	bl	8010524 <LED_State>
 800ee92:	2800      	cmp	r0, #0
 800ee94:	f43f af6c 	beq.w	800ed70 <Sample_Cap_Touch+0x98>
				Set_LED(CAP_2_LED_PORT, CAP_2_LED_PIN, 0);
 800ee98:	4622      	mov	r2, r4
 800ee9a:	2110      	movs	r1, #16
 800ee9c:	2003      	movs	r0, #3
 800ee9e:	f001 fb0b 	bl	80104b8 <Set_LED>
		if( (cap_read[KEY_3_PORT] & KEY_3_PIN) == KEY_3_PIN){
 800eea2:	782a      	ldrb	r2, [r5, #0]
 800eea4:	f012 0408 	ands.w	r4, r2, #8
 800eea8:	f47f af67 	bne.w	800ed7a <Sample_Cap_Touch+0xa2>
			if(LED_State(CAP_3_LED_PORT, CAP_3_LED_PIN)){
 800eeac:	2108      	movs	r1, #8
 800eeae:	2003      	movs	r0, #3
 800eeb0:	f001 fb38 	bl	8010524 <LED_State>
 800eeb4:	2800      	cmp	r0, #0
 800eeb6:	f43f af65 	beq.w	800ed84 <Sample_Cap_Touch+0xac>
				Set_LED(CAP_3_LED_PORT, CAP_3_LED_PIN, 0);
 800eeba:	4622      	mov	r2, r4
 800eebc:	2108      	movs	r1, #8
 800eebe:	2003      	movs	r0, #3
 800eec0:	f001 fafa 	bl	80104b8 <Set_LED>
		if( (cap_read[KEY_4_PORT] & KEY_4_PIN) == KEY_4_PIN){
 800eec4:	782a      	ldrb	r2, [r5, #0]
 800eec6:	f012 0410 	ands.w	r4, r2, #16
 800eeca:	f47f af60 	bne.w	800ed8e <Sample_Cap_Touch+0xb6>
			if(LED_State(CAP_4_LED_PORT, CAP_4_LED_PIN)){
 800eece:	2104      	movs	r1, #4
 800eed0:	2003      	movs	r0, #3
 800eed2:	f001 fb27 	bl	8010524 <LED_State>
 800eed6:	2800      	cmp	r0, #0
 800eed8:	f43f af5e 	beq.w	800ed98 <Sample_Cap_Touch+0xc0>
				Set_LED(CAP_4_LED_PORT, CAP_4_LED_PIN, 0);
 800eedc:	4622      	mov	r2, r4
 800eede:	2104      	movs	r1, #4
 800eee0:	2003      	movs	r0, #3
 800eee2:	f001 fae9 	bl	80104b8 <Set_LED>
		if( (cap_read[KEY_5_PORT] & KEY_5_PIN) == KEY_5_PIN){
 800eee6:	782a      	ldrb	r2, [r5, #0]
 800eee8:	f012 0420 	ands.w	r4, r2, #32
 800eeec:	f47f af59 	bne.w	800eda2 <Sample_Cap_Touch+0xca>
			if(LED_State(CAP_5_LED_PORT, CAP_5_LED_PIN)){
 800eef0:	2102      	movs	r1, #2
 800eef2:	2003      	movs	r0, #3
 800eef4:	f001 fb16 	bl	8010524 <LED_State>
 800eef8:	2800      	cmp	r0, #0
 800eefa:	f43f af57 	beq.w	800edac <Sample_Cap_Touch+0xd4>
				Set_LED(CAP_5_LED_PORT, CAP_5_LED_PIN, 0);
 800eefe:	4622      	mov	r2, r4
 800ef00:	2102      	movs	r1, #2
 800ef02:	2003      	movs	r0, #3
 800ef04:	f001 fad8 	bl	80104b8 <Set_LED>
		if( (cap_read[KEY_6_PORT] & KEY_6_PIN) == KEY_6_PIN){
 800ef08:	786a      	ldrb	r2, [r5, #1]
 800ef0a:	f012 0401 	ands.w	r4, r2, #1
 800ef0e:	f47f af52 	bne.w	800edb6 <Sample_Cap_Touch+0xde>
			if(LED_State(CAP_6_LED_PORT, CAP_6_LED_PIN)){
 800ef12:	2101      	movs	r1, #1
 800ef14:	2003      	movs	r0, #3
 800ef16:	f001 fb05 	bl	8010524 <LED_State>
 800ef1a:	2800      	cmp	r0, #0
 800ef1c:	f43f af50 	beq.w	800edc0 <Sample_Cap_Touch+0xe8>
				Set_LED(CAP_6_LED_PORT, CAP_6_LED_PIN, 0);
 800ef20:	4622      	mov	r2, r4
 800ef22:	2101      	movs	r1, #1
 800ef24:	2003      	movs	r0, #3
 800ef26:	f001 fac7 	bl	80104b8 <Set_LED>
		if( (cap_read[KEY_7_PORT] & KEY_7_PIN) == KEY_7_PIN){
 800ef2a:	786a      	ldrb	r2, [r5, #1]
 800ef2c:	f012 0402 	ands.w	r4, r2, #2
 800ef30:	f47f af4b 	bne.w	800edca <Sample_Cap_Touch+0xf2>
			if(LED_State(CAP_7_LED_PORT, CAP_7_LED_PIN)){
 800ef34:	2180      	movs	r1, #128	; 0x80
 800ef36:	2002      	movs	r0, #2
 800ef38:	f001 faf4 	bl	8010524 <LED_State>
 800ef3c:	2800      	cmp	r0, #0
 800ef3e:	f43f af49 	beq.w	800edd4 <Sample_Cap_Touch+0xfc>
				Set_LED(CAP_7_LED_PORT, CAP_7_LED_PIN, 0);
 800ef42:	4622      	mov	r2, r4
 800ef44:	2180      	movs	r1, #128	; 0x80
 800ef46:	2002      	movs	r0, #2
 800ef48:	f001 fab6 	bl	80104b8 <Set_LED>
		if( (cap_read[KEY_8_PORT] & KEY_8_PIN) == KEY_8_PIN){
 800ef4c:	786a      	ldrb	r2, [r5, #1]
 800ef4e:	f012 0404 	ands.w	r4, r2, #4
 800ef52:	f47f af44 	bne.w	800edde <Sample_Cap_Touch+0x106>
			if(LED_State(CAP_8_LED_PORT, CAP_8_LED_PIN)){
 800ef56:	2140      	movs	r1, #64	; 0x40
 800ef58:	2002      	movs	r0, #2
 800ef5a:	f001 fae3 	bl	8010524 <LED_State>
 800ef5e:	2800      	cmp	r0, #0
 800ef60:	f43f af42 	beq.w	800ede8 <Sample_Cap_Touch+0x110>
				Set_LED(CAP_8_LED_PORT, CAP_8_LED_PIN, 0);
 800ef64:	4622      	mov	r2, r4
 800ef66:	2140      	movs	r1, #64	; 0x40
 800ef68:	2002      	movs	r0, #2
 800ef6a:	f001 faa5 	bl	80104b8 <Set_LED>
		if( (cap_read[KEY_9_PORT] & KEY_9_PIN) == KEY_9_PIN){
 800ef6e:	786a      	ldrb	r2, [r5, #1]
 800ef70:	f012 0408 	ands.w	r4, r2, #8
 800ef74:	f47f af3d 	bne.w	800edf2 <Sample_Cap_Touch+0x11a>
			if(LED_State(CAP_9_LED_PORT, CAP_9_LED_PIN)){
 800ef78:	2120      	movs	r1, #32
 800ef7a:	2002      	movs	r0, #2
 800ef7c:	f001 fad2 	bl	8010524 <LED_State>
 800ef80:	2800      	cmp	r0, #0
 800ef82:	f43f af3b 	beq.w	800edfc <Sample_Cap_Touch+0x124>
				Set_LED(CAP_9_LED_PORT, CAP_9_LED_PIN, 0);
 800ef86:	4622      	mov	r2, r4
 800ef88:	2120      	movs	r1, #32
 800ef8a:	2002      	movs	r0, #2
 800ef8c:	f001 fa94 	bl	80104b8 <Set_LED>
		if( (cap_read[KEY_10_PORT] & KEY_10_PIN) == KEY_10_PIN){
 800ef90:	786a      	ldrb	r2, [r5, #1]
 800ef92:	f012 0410 	ands.w	r4, r2, #16
 800ef96:	f47f af36 	bne.w	800ee06 <Sample_Cap_Touch+0x12e>
			if(LED_State(CAP_10_LED_PORT, CAP_10_LED_PIN)){
 800ef9a:	2110      	movs	r1, #16
 800ef9c:	2002      	movs	r0, #2
 800ef9e:	f001 fac1 	bl	8010524 <LED_State>
 800efa2:	2800      	cmp	r0, #0
 800efa4:	f43f af34 	beq.w	800ee10 <Sample_Cap_Touch+0x138>
				Set_LED(CAP_10_LED_PORT, CAP_10_LED_PIN, 0);
 800efa8:	4622      	mov	r2, r4
 800efaa:	2110      	movs	r1, #16
 800efac:	2002      	movs	r0, #2
 800efae:	f001 fa83 	bl	80104b8 <Set_LED>
		if( (cap_read[KEY_11_PORT] & KEY_11_PIN) == KEY_11_PIN){
 800efb2:	786a      	ldrb	r2, [r5, #1]
 800efb4:	f012 0420 	ands.w	r4, r2, #32
 800efb8:	f47f af2f 	bne.w	800ee1a <Sample_Cap_Touch+0x142>
			if(LED_State(CAP_11_LED_PORT, CAP_11_LED_PIN)){
 800efbc:	2108      	movs	r1, #8
 800efbe:	2002      	movs	r0, #2
 800efc0:	f001 fab0 	bl	8010524 <LED_State>
 800efc4:	2800      	cmp	r0, #0
 800efc6:	f43f af2d 	beq.w	800ee24 <Sample_Cap_Touch+0x14c>
				Set_LED(CAP_11_LED_PORT, CAP_11_LED_PIN, 0);
 800efca:	4622      	mov	r2, r4
 800efcc:	2108      	movs	r1, #8
 800efce:	2002      	movs	r0, #2
 800efd0:	f001 fa72 	bl	80104b8 <Set_LED>
		if( (cap_read[KEY_12_PORT] & KEY_12_PIN) == KEY_12_PIN){
 800efd4:	786a      	ldrb	r2, [r5, #1]
 800efd6:	f012 0440 	ands.w	r4, r2, #64	; 0x40
 800efda:	f47f af28 	bne.w	800ee2e <Sample_Cap_Touch+0x156>
			if(LED_State(CAP_12_LED_PORT, CAP_12_LED_PIN)){
 800efde:	2104      	movs	r1, #4
 800efe0:	2002      	movs	r0, #2
 800efe2:	f001 fa9f 	bl	8010524 <LED_State>
 800efe6:	2800      	cmp	r0, #0
 800efe8:	f43f af26 	beq.w	800ee38 <Sample_Cap_Touch+0x160>
				Set_LED(CAP_12_LED_PORT, CAP_12_LED_PIN, 0);
 800efec:	4622      	mov	r2, r4
 800efee:	2104      	movs	r1, #4
 800eff0:	2002      	movs	r0, #2
 800eff2:	f001 fa61 	bl	80104b8 <Set_LED>
		if( (cap_read[LEFT_BUTTON_PORT] & LEFT_BUTTON_PIN) == LEFT_BUTTON_PIN){
 800eff6:	782b      	ldrb	r3, [r5, #0]
 800eff8:	f013 0301 	ands.w	r3, r3, #1
 800effc:	f47f af21 	bne.w	800ee42 <Sample_Cap_Touch+0x16a>
			if(leftTouchDebounce){
 800f000:	f89b 2000 	ldrb.w	r2, [fp]
 800f004:	2a00      	cmp	r2, #0
 800f006:	f43f af21 	beq.w	800ee4c <Sample_Cap_Touch+0x174>
				leftTouchDebounce = 0;
 800f00a:	f88b 3000 	strb.w	r3, [fp]
		if( (cap_read[RIGHT_BUTTON_PORT] & RIGHT_BUTTON_PIN) == RIGHT_BUTTON_PIN){
 800f00e:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800f012:	2b00      	cmp	r3, #0
			if(rightTouchDebounce == 0){
 800f014:	f89a 3000 	ldrb.w	r3, [sl]
		if( (cap_read[RIGHT_BUTTON_PORT] & RIGHT_BUTTON_PIN) == RIGHT_BUTTON_PIN){
 800f018:	f6bf af1f 	bge.w	800ee5a <Sample_Cap_Touch+0x182>
			if(rightTouchDebounce == 0){
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	f47f ae6b 	bne.w	800ecf8 <Sample_Cap_Touch+0x20>
				incrementOctave();
 800f022:	f003 ffdd 	bl	8012fe0 <incrementOctave>
				rightTouchDebounce = 1;
 800f026:	f88a 6000 	strb.w	r6, [sl]
 800f02a:	e665      	b.n	800ecf8 <Sample_Cap_Touch+0x20>
				decrementOctave();
 800f02c:	f004 faac 	bl	8013588 <decrementOctave>
				leftTouchDebounce = 1;
 800f030:	f88b 6000 	strb.w	r6, [fp]
 800f034:	e70a      	b.n	800ee4c <Sample_Cap_Touch+0x174>
 800f036:	bf00      	nop
 800f038:	20005418 	.word	0x20005418
 800f03c:	20005534 	.word	0x20005534
 800f040:	20005420 	.word	0x20005420
 800f044:	2000507c 	.word	0x2000507c
 800f048:	2000507d 	.word	0x2000507d

0800f04c <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 800f04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  hcomp1.Instance = COMP1;
 800f04e:	4b0d      	ldr	r3, [pc, #52]	; (800f084 <MX_COMP1_Init+0x38>)
 800f050:	4a0d      	ldr	r2, [pc, #52]	; (800f088 <MX_COMP1_Init+0x3c>)
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_3_4VREFINT;
 800f052:	4f0e      	ldr	r7, [pc, #56]	; (800f08c <MX_COMP1_Init+0x40>)
  hcomp1.Instance = COMP1;
 800f054:	601a      	str	r2, [r3, #0]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 800f056:	2680      	movs	r6, #128	; 0x80
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800f058:	2200      	movs	r2, #0
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_HIGH;
 800f05a:	f44f 3540 	mov.w	r5, #196608	; 0x30000
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
  hcomp1.Init.Mode = COMP_POWERMODE_ULTRALOWPOWER;
 800f05e:	240c      	movs	r4, #12
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_FALLING;
 800f060:	2121      	movs	r1, #33	; 0x21
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800f062:	4618      	mov	r0, r3
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_3_4VREFINT;
 800f064:	611f      	str	r7, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 800f066:	60de      	str	r6, [r3, #12]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_HIGH;
 800f068:	615d      	str	r5, [r3, #20]
  hcomp1.Init.Mode = COMP_POWERMODE_ULTRALOWPOWER;
 800f06a:	609c      	str	r4, [r3, #8]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_FALLING;
 800f06c:	6219      	str	r1, [r3, #32]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800f06e:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800f070:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800f072:	605a      	str	r2, [r3, #4]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800f074:	f7f2 fa9e 	bl	80015b4 <HAL_COMP_Init>
 800f078:	b900      	cbnz	r0, 800f07c <MX_COMP1_Init+0x30>
 800f07a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    Error_Handler();
  }

}
 800f07c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Error_Handler();
 800f080:	f001 bd28 	b.w	8010ad4 <Error_Handler>
 800f084:	20005424 	.word	0x20005424
 800f088:	40010200 	.word	0x40010200
 800f08c:	00c00020 	.word	0x00c00020

0800f090 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 800f090:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(compHandle->Instance==COMP1)
 800f092:	6802      	ldr	r2, [r0, #0]
 800f094:	4b14      	ldr	r3, [pc, #80]	; (800f0e8 <HAL_COMP_MspInit+0x58>)
{
 800f096:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f098:	2400      	movs	r4, #0
  if(compHandle->Instance==COMP1)
 800f09a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f09c:	9402      	str	r4, [sp, #8]
 800f09e:	9401      	str	r4, [sp, #4]
 800f0a0:	9403      	str	r4, [sp, #12]
 800f0a2:	9404      	str	r4, [sp, #16]
 800f0a4:	9405      	str	r4, [sp, #20]
  if(compHandle->Instance==COMP1)
 800f0a6:	d001      	beq.n	800f0ac <HAL_COMP_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 800f0a8:	b007      	add	sp, #28
 800f0aa:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f0ac:	f503 3387 	add.w	r3, r3, #69120	; 0x10e00
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f0b0:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f0b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f0b4:	480d      	ldr	r0, [pc, #52]	; (800f0ec <HAL_COMP_MspInit+0x5c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f0b6:	f042 0202 	orr.w	r2, r2, #2
 800f0ba:	64da      	str	r2, [r3, #76]	; 0x4c
 800f0bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f0be:	f003 0302 	and.w	r3, r3, #2
 800f0c2:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800f0c4:	2204      	movs	r2, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f0c6:	2303      	movs	r3, #3
 800f0c8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800f0ca:	9201      	str	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f0cc:	9d00      	ldr	r5, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f0ce:	f7f2 ff3d 	bl	8001f4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(COMP_IRQn, 5, 0);
 800f0d2:	4622      	mov	r2, r4
 800f0d4:	2105      	movs	r1, #5
 800f0d6:	2040      	movs	r0, #64	; 0x40
 800f0d8:	f7f2 fb8a 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 800f0dc:	2040      	movs	r0, #64	; 0x40
 800f0de:	f7f2 fbbd 	bl	800185c <HAL_NVIC_EnableIRQ>
}
 800f0e2:	b007      	add	sp, #28
 800f0e4:	bd30      	pop	{r4, r5, pc}
 800f0e6:	bf00      	nop
 800f0e8:	40010200 	.word	0x40010200
 800f0ec:	48000400 	.word	0x48000400

0800f0f0 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800f0f0:	b530      	push	{r4, r5, lr}
 800f0f2:	b08b      	sub	sp, #44	; 0x2c
  DAC_ChannelConfTypeDef sConfig = {0};
 800f0f4:	4668      	mov	r0, sp
 800f0f6:	2228      	movs	r2, #40	; 0x28
 800f0f8:	2100      	movs	r1, #0
 800f0fa:	f004 fef2 	bl	8013ee2 <memset>

  /**DAC Initialization 
  */
  hdac1.Instance = DAC1;
 800f0fe:	4813      	ldr	r0, [pc, #76]	; (800f14c <MX_DAC1_Init+0x5c>)
 800f100:	4b13      	ldr	r3, [pc, #76]	; (800f150 <MX_DAC1_Init+0x60>)
 800f102:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800f104:	f7f2 fbb6 	bl	8001874 <HAL_DAC_Init>
 800f108:	b9e8      	cbnz	r0, 800f146 <MX_DAC1_Init+0x56>
  {
    Error_Handler();
  }
  /**DAC channel OUT1 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800f10a:	2300      	movs	r3, #0
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800f10c:	2516      	movs	r5, #22
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800f10e:	2402      	movs	r4, #2
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800f110:	461a      	mov	r2, r3
 800f112:	4669      	mov	r1, sp
 800f114:	480d      	ldr	r0, [pc, #52]	; (800f14c <MX_DAC1_Init+0x5c>)
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800f116:	9301      	str	r3, [sp, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800f118:	9303      	str	r3, [sp, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800f11a:	9304      	str	r3, [sp, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800f11c:	9305      	str	r3, [sp, #20]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800f11e:	9502      	str	r5, [sp, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800f120:	9400      	str	r4, [sp, #0]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800f122:	f7f2 fccf 	bl	8001ac4 <HAL_DAC_ConfigChannel>
 800f126:	b958      	cbnz	r0, 800f140 <MX_DAC1_Init+0x50>
  {
    Error_Handler();
  }
  /**DAC channel OUT2 config 
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800f128:	2300      	movs	r3, #0
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800f12a:	4669      	mov	r1, sp
 800f12c:	2210      	movs	r2, #16
 800f12e:	4807      	ldr	r0, [pc, #28]	; (800f14c <MX_DAC1_Init+0x5c>)
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800f130:	9304      	str	r3, [sp, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800f132:	f7f2 fcc7 	bl	8001ac4 <HAL_DAC_ConfigChannel>
 800f136:	b108      	cbz	r0, 800f13c <MX_DAC1_Init+0x4c>
  {
    Error_Handler();
 800f138:	f001 fccc 	bl	8010ad4 <Error_Handler>
  }

}
 800f13c:	b00b      	add	sp, #44	; 0x2c
 800f13e:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 800f140:	f001 fcc8 	bl	8010ad4 <Error_Handler>
 800f144:	e7f0      	b.n	800f128 <MX_DAC1_Init+0x38>
    Error_Handler();
 800f146:	f001 fcc5 	bl	8010ad4 <Error_Handler>
 800f14a:	e7de      	b.n	800f10a <MX_DAC1_Init+0x1a>
 800f14c:	20005450 	.word	0x20005450
 800f150:	40007400 	.word	0x40007400

0800f154 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800f154:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(dacHandle->Instance==DAC1)
 800f156:	6802      	ldr	r2, [r0, #0]
 800f158:	4b29      	ldr	r3, [pc, #164]	; (800f200 <HAL_DAC_MspInit+0xac>)
{
 800f15a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f15c:	2400      	movs	r4, #0
  if(dacHandle->Instance==DAC1)
 800f15e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f160:	9404      	str	r4, [sp, #16]
 800f162:	9403      	str	r4, [sp, #12]
 800f164:	9405      	str	r4, [sp, #20]
 800f166:	9406      	str	r4, [sp, #24]
 800f168:	9407      	str	r4, [sp, #28]
  if(dacHandle->Instance==DAC1)
 800f16a:	d001      	beq.n	800f170 <HAL_DAC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800f16c:	b009      	add	sp, #36	; 0x24
 800f16e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_DAC1_CLK_ENABLE();
 800f170:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 800f174:	4e23      	ldr	r6, [pc, #140]	; (800f204 <HAL_DAC_MspInit+0xb0>)
    __HAL_RCC_DAC1_CLK_ENABLE();
 800f176:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f178:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800f17c:	659a      	str	r2, [r3, #88]	; 0x58
 800f17e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f180:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800f184:	9201      	str	r2, [sp, #4]
 800f186:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f188:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f18a:	f042 0201 	orr.w	r2, r2, #1
 800f18e:	64da      	str	r2, [r3, #76]	; 0x4c
 800f190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f192:	f003 0301 	and.w	r3, r3, #1
 800f196:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800f198:	2230      	movs	r2, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f19a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f19c:	a903      	add	r1, sp, #12
 800f19e:	4605      	mov	r5, r0
 800f1a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f1a4:	9f02      	ldr	r7, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800f1a6:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f1a8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f1aa:	f7f2 fecf 	bl	8001f4c <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 800f1ae:	4b16      	ldr	r3, [pc, #88]	; (800f208 <HAL_DAC_MspInit+0xb4>)
 800f1b0:	6033      	str	r3, [r6, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 800f1b2:	2006      	movs	r0, #6
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800f1b4:	f04f 0e10 	mov.w	lr, #16
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800f1b8:	2780      	movs	r7, #128	; 0x80
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800f1ba:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800f1be:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800f1c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 800f1c6:	6070      	str	r0, [r6, #4]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800f1c8:	4630      	mov	r0, r6
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800f1ca:	60f4      	str	r4, [r6, #12]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 800f1cc:	61f4      	str	r4, [r6, #28]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800f1ce:	f8c6 e008 	str.w	lr, [r6, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800f1d2:	6137      	str	r7, [r6, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800f1d4:	6171      	str	r1, [r6, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800f1d6:	61b2      	str	r2, [r6, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800f1d8:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800f1da:	f7f2 fd3d 	bl	8001c58 <HAL_DMA_Init>
 800f1de:	b958      	cbnz	r0, 800f1f8 <HAL_DAC_MspInit+0xa4>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 800f1e0:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	2105      	movs	r1, #5
 800f1e6:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 800f1e8:	62b5      	str	r5, [r6, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800f1ea:	f7f2 fb01 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800f1ee:	2036      	movs	r0, #54	; 0x36
 800f1f0:	f7f2 fb34 	bl	800185c <HAL_NVIC_EnableIRQ>
}
 800f1f4:	b009      	add	sp, #36	; 0x24
 800f1f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 800f1f8:	f001 fc6c 	bl	8010ad4 <Error_Handler>
 800f1fc:	e7f0      	b.n	800f1e0 <HAL_DAC_MspInit+0x8c>
 800f1fe:	bf00      	nop
 800f200:	40007400 	.word	0x40007400
 800f204:	20005464 	.word	0x20005464
 800f208:	40020008 	.word	0x40020008

0800f20c <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800f20c:	4b0f      	ldr	r3, [pc, #60]	; (800f24c <MX_DMA_Init+0x40>)
{
 800f20e:	b500      	push	{lr}
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800f210:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f212:	f042 0204 	orr.w	r2, r2, #4
 800f216:	649a      	str	r2, [r3, #72]	; 0x48
 800f218:	6c9a      	ldr	r2, [r3, #72]	; 0x48
{
 800f21a:	b083      	sub	sp, #12
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800f21c:	f002 0204 	and.w	r2, r2, #4
 800f220:	9200      	str	r2, [sp, #0]
 800f222:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800f224:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f226:	f042 0201 	orr.w	r2, r2, #1
 800f22a:	649a      	str	r2, [r3, #72]	; 0x48
 800f22c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f22e:	f003 0301 	and.w	r3, r3, #1
 800f232:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 7, 0);
 800f234:	2200      	movs	r2, #0
 800f236:	2107      	movs	r1, #7
 800f238:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800f23a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 7, 0);
 800f23c:	f7f2 fad8 	bl	80017f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800f240:	200b      	movs	r0, #11
 800f242:	f7f2 fb0b 	bl	800185c <HAL_NVIC_EnableIRQ>

}
 800f246:	b003      	add	sp, #12
 800f248:	f85d fb04 	ldr.w	pc, [sp], #4
 800f24c:	40021000 	.word	0x40021000

0800f250 <initFilter>:
//q15_t coef_1000[6*NUM_STAGES] = {0.005709266664235, 0, 0.011418533328471, 0.005709266664235, 1.832076711084677, -0.854913777741618};
//q15_t coef_1000[6*NUM_STAGES] = {32767, 0, 0, 0, 0, 0};
//const q15_t coef_1000[] = {93.5, 0, 187.0, 93.5, 30016.5, -14006.5};
//const q15_t coef_1000[] = {24.0, 0, 48.5, 24.0, 31433.5, -15147.0};

void initFilter(void){
 800f250:	b570      	push	{r4, r5, r6, lr}
	filter_instance.pCoeffs = coef[FILTER_VALS-1];
 800f252:	4c08      	ldr	r4, [pc, #32]	; (800f274 <initFilter+0x24>)
	filter_instance.postShift = bit_shift[FILTER_VALS-1];
	filter_instance.numStages = NUM_STAGES;
	filter_instance.pState = filter_state;
 800f254:	4e08      	ldr	r6, [pc, #32]	; (800f278 <initFilter+0x28>)
	filter_instance.pCoeffs = coef[FILTER_VALS-1];
 800f256:	4a09      	ldr	r2, [pc, #36]	; (800f27c <initFilter+0x2c>)
 800f258:	60a2      	str	r2, [r4, #8]
void initFilter(void){
 800f25a:	b082      	sub	sp, #8
	filter_instance.postShift = bit_shift[FILTER_VALS-1];
 800f25c:	2501      	movs	r5, #1

	arm_biquad_cascade_df1_init_q15(&filter_instance, NUM_STAGES, coef[FILTER_VALS-1], filter_state, bit_shift[FILTER_VALS-1]);
 800f25e:	4620      	mov	r0, r4
 800f260:	9500      	str	r5, [sp, #0]
 800f262:	4629      	mov	r1, r5
 800f264:	4633      	mov	r3, r6
	filter_instance.postShift = bit_shift[FILTER_VALS-1];
 800f266:	7325      	strb	r5, [r4, #12]
	filter_instance.numStages = NUM_STAGES;
 800f268:	7025      	strb	r5, [r4, #0]
	filter_instance.pState = filter_state;
 800f26a:	6066      	str	r6, [r4, #4]
	arm_biquad_cascade_df1_init_q15(&filter_instance, NUM_STAGES, coef[FILTER_VALS-1], filter_state, bit_shift[FILTER_VALS-1]);
 800f26c:	f004 fd2c 	bl	8013cc8 <arm_biquad_cascade_df1_init_q15>

}
 800f270:	b002      	add	sp, #8
 800f272:	bd70      	pop	{r4, r5, r6, pc}
 800f274:	200054c4 	.word	0x200054c4
 800f278:	20005080 	.word	0x20005080
 800f27c:	08014e54 	.word	0x08014e54

0800f280 <setCutoffFreq>:

// inputVal should lie somewhere between 0 and pi/2, inclusively
void setCutoffFreq(float inputAngle){
 800f280:	b5f0      	push	{r4, r5, r6, r7, lr}

	//if angle is greater than 90-degrees (horizon), flip it
	if(inputAngle < PI_DIV_2){
 800f282:	ee10 0a10 	vmov	r0, s0
void setCutoffFreq(float inputAngle){
 800f286:	b083      	sub	sp, #12
	if(inputAngle < PI_DIV_2){
 800f288:	f7f1 f91e 	bl	80004c8 <__aeabi_f2d>
 800f28c:	a330      	add	r3, pc, #192	; (adr r3, 800f350 <setCutoffFreq+0xd0>)
 800f28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f292:	4604      	mov	r4, r0
 800f294:	460d      	mov	r5, r1
 800f296:	f7f1 fbdd 	bl	8000a54 <__aeabi_dcmplt>
 800f29a:	b1a8      	cbz	r0, 800f2c8 <setCutoffFreq+0x48>
		inputAngle = abs(PI - inputAngle);
 800f29c:	4622      	mov	r2, r4
 800f29e:	462b      	mov	r3, r5
 800f2a0:	a12d      	add	r1, pc, #180	; (adr r1, 800f358 <setCutoffFreq+0xd8>)
 800f2a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2a6:	f7f0 ffaf 	bl	8000208 <__aeabi_dsub>
 800f2aa:	f7f1 fc11 	bl	8000ad0 <__aeabi_d2iz>
 800f2ae:	2800      	cmp	r0, #0
 800f2b0:	bfb8      	it	lt
 800f2b2:	4240      	neglt	r0, r0
 800f2b4:	ee07 0a90 	vmov	s15, r0
 800f2b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f2bc:	ee17 0a90 	vmov	r0, s15
 800f2c0:	f7f1 f902 	bl	80004c8 <__aeabi_f2d>
 800f2c4:	4604      	mov	r4, r0
 800f2c6:	460d      	mov	r5, r1
	}

	// scale angle from 0 to 36 (since coefficients are calculated for 5-degree tilt increments)
	scaledAngle = SCALE_INPUT * inputAngle;
 800f2c8:	a325      	add	r3, pc, #148	; (adr r3, 800f360 <setCutoffFreq+0xe0>)
 800f2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ce:	4620      	mov	r0, r4
 800f2d0:	4629      	mov	r1, r5
 800f2d2:	f7f1 f94d 	bl	8000570 <__aeabi_dmul>
 800f2d6:	f7f1 fc43 	bl	8000b60 <__aeabi_d2f>
 800f2da:	4b15      	ldr	r3, [pc, #84]	; (800f330 <setCutoffFreq+0xb0>)

	inputVal = round(scaledAngle);
 800f2dc:	4c15      	ldr	r4, [pc, #84]	; (800f334 <setCutoffFreq+0xb4>)
	scaledAngle = SCALE_INPUT * inputAngle;
 800f2de:	6018      	str	r0, [r3, #0]
	inputVal = round(scaledAngle);
 800f2e0:	f7f1 f8f2 	bl	80004c8 <__aeabi_f2d>
 800f2e4:	ec41 0b10 	vmov	d0, r0, r1
 800f2e8:	f004 fe18 	bl	8013f1c <round>
 800f2ec:	ec51 0b10 	vmov	r0, r1, d0
 800f2f0:	f7f1 fc16 	bl	8000b20 <__aeabi_d2uiz>


	// dont change if already set
	if(pastVal == inputVal) return;
 800f2f4:	4910      	ldr	r1, [pc, #64]	; (800f338 <setCutoffFreq+0xb8>)
	inputVal = round(scaledAngle);
 800f2f6:	b2c0      	uxtb	r0, r0
 800f2f8:	7020      	strb	r0, [r4, #0]
	if(pastVal == inputVal) return;
 800f2fa:	780a      	ldrb	r2, [r1, #0]
 800f2fc:	7823      	ldrb	r3, [r4, #0]
 800f2fe:	429a      	cmp	r2, r3
 800f300:	d013      	beq.n	800f32a <setCutoffFreq+0xaa>

	pastVal = inputVal;
 800f302:	7825      	ldrb	r5, [r4, #0]

	changedCutoff = 1;
 800f304:	4f0d      	ldr	r7, [pc, #52]	; (800f33c <setCutoffFreq+0xbc>)
	arm_biquad_cascade_df1_init_q15(&filter_instance, NUM_STAGES, coef[inputVal], filter_state, bit_shift[inputVal]);
 800f306:	4e0e      	ldr	r6, [pc, #56]	; (800f340 <setCutoffFreq+0xc0>)
 800f308:	4a0e      	ldr	r2, [pc, #56]	; (800f344 <setCutoffFreq+0xc4>)
 800f30a:	4b0f      	ldr	r3, [pc, #60]	; (800f348 <setCutoffFreq+0xc8>)
 800f30c:	480f      	ldr	r0, [pc, #60]	; (800f34c <setCutoffFreq+0xcc>)
	pastVal = inputVal;
 800f30e:	b2ed      	uxtb	r5, r5
 800f310:	700d      	strb	r5, [r1, #0]
	changedCutoff = 1;
 800f312:	2101      	movs	r1, #1
 800f314:	7039      	strb	r1, [r7, #0]
	arm_biquad_cascade_df1_init_q15(&filter_instance, NUM_STAGES, coef[inputVal], filter_state, bit_shift[inputVal]);
 800f316:	7825      	ldrb	r5, [r4, #0]
 800f318:	7824      	ldrb	r4, [r4, #0]
 800f31a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f31e:	5734      	ldrsb	r4, [r6, r4]
 800f320:	9400      	str	r4, [sp, #0]
 800f322:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800f326:	f004 fccf 	bl	8013cc8 <arm_biquad_cascade_df1_init_q15>
}
 800f32a:	b003      	add	sp, #12
 800f32c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f32e:	bf00      	nop
 800f330:	2000508c 	.word	0x2000508c
 800f334:	20005088 	.word	0x20005088
 800f338:	20000030 	.word	0x20000030
 800f33c:	2000507e 	.word	0x2000507e
 800f340:	0801452c 	.word	0x0801452c
 800f344:	080145e4 	.word	0x080145e4
 800f348:	20005080 	.word	0x20005080
 800f34c:	200054c4 	.word	0x200054c4
 800f350:	544486e0 	.word	0x544486e0
 800f354:	3ff921fb 	.word	0x3ff921fb
 800f358:	544486e0 	.word	0x544486e0
 800f35c:	400921fb 	.word	0x400921fb
 800f360:	7b3f5595 	.word	0x7b3f5595
 800f364:	404cce9a 	.word	0x404cce9a

0800f368 <applyFilter>:

void applyFilter(volatile q15_t* input, volatile q15_t* output, volatile q15_t* prev_buffer){
 800f368:	b570      	push	{r4, r5, r6, lr}
	if(changedCutoff == 1){
 800f36a:	4d0c      	ldr	r5, [pc, #48]	; (800f39c <applyFilter+0x34>)
 800f36c:	782b      	ldrb	r3, [r5, #0]
 800f36e:	2b01      	cmp	r3, #1
void applyFilter(volatile q15_t* input, volatile q15_t* output, volatile q15_t* prev_buffer){
 800f370:	4606      	mov	r6, r0
 800f372:	460c      	mov	r4, r1
	if(changedCutoff == 1){
 800f374:	d008      	beq.n	800f388 <applyFilter+0x20>
		arm_biquad_cascade_df1_q15(&filter_instance, prev_buffer, output, (uint32_t) BUFFER_SIZE);
		changedCutoff = 0;
	}
	arm_biquad_cascade_df1_q15(&filter_instance, input, output, (uint32_t) BUFFER_SIZE);
 800f376:	4622      	mov	r2, r4
 800f378:	4631      	mov	r1, r6
 800f37a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f37e:	4808      	ldr	r0, [pc, #32]	; (800f3a0 <applyFilter+0x38>)
}
 800f380:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	arm_biquad_cascade_df1_q15(&filter_instance, input, output, (uint32_t) BUFFER_SIZE);
 800f384:	f004 bbfc 	b.w	8013b80 <arm_biquad_cascade_df1_q15>
		arm_biquad_cascade_df1_q15(&filter_instance, prev_buffer, output, (uint32_t) BUFFER_SIZE);
 800f388:	4611      	mov	r1, r2
 800f38a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f38e:	4622      	mov	r2, r4
 800f390:	4803      	ldr	r0, [pc, #12]	; (800f3a0 <applyFilter+0x38>)
 800f392:	f004 fbf5 	bl	8013b80 <arm_biquad_cascade_df1_q15>
		changedCutoff = 0;
 800f396:	2300      	movs	r3, #0
 800f398:	702b      	strb	r3, [r5, #0]
 800f39a:	e7ec      	b.n	800f376 <applyFilter+0xe>
 800f39c:	2000507e 	.word	0x2000507e
 800f3a0:	200054c4 	.word	0x200054c4

0800f3a4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b096      	sub	sp, #88	; 0x58

  /* USER CODE BEGIN StartDefaultTask */
  osMutexDef (LED_mutex);    // Declare mutex
 800f3a8:	a816      	add	r0, sp, #88	; 0x58
 800f3aa:	2500      	movs	r5, #0
 800f3ac:	f840 5d54 	str.w	r5, [r0, #-84]!
  LED_mutex_id = osMutexCreate(osMutex(LED_mutex));
 800f3b0:	f7fc fdee 	bl	800bf90 <osMutexCreate>

  osMutexDef (I2C3_mutex);    // Declare mutex
 800f3b4:	ab16      	add	r3, sp, #88	; 0x58
  LED_mutex_id = osMutexCreate(osMutex(LED_mutex));
 800f3b6:	4a30      	ldr	r2, [pc, #192]	; (800f478 <StartDefaultTask+0xd4>)
  osMutexDef (I2C3_mutex);    // Declare mutex
 800f3b8:	f843 5d50 	str.w	r5, [r3, #-80]!
  LED_mutex_id = osMutexCreate(osMutex(LED_mutex));
 800f3bc:	6010      	str	r0, [r2, #0]
  I2C3_mutex_id = osMutexCreate(osMutex(I2C3_mutex));
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f7fc fde6 	bl	800bf90 <osMutexCreate>
 800f3c4:	4b2d      	ldr	r3, [pc, #180]	; (800f47c <StartDefaultTask+0xd8>)
  osSemaphoreWait( accSampleSemaphoreHandle, 1);

  osTimerDef(accSampleTimer, accGiveSemaphore);
  accSampleTimerHandle = osTimerCreate(osTimer(accSampleTimer), osTimerPeriodic, (void *)0);

  osThreadDef(lidarMeasurementTask, LidarMeasurement, osPriorityLow, 0, 256);
 800f3c6:	4c2e      	ldr	r4, [pc, #184]	; (800f480 <StartDefaultTask+0xdc>)
  I2C3_mutex_id = osMutexCreate(osMutex(I2C3_mutex));
 800f3c8:	6018      	str	r0, [r3, #0]
  osMutexWait(I2C3_mutex_id, 5);
 800f3ca:	2105      	movs	r1, #5
 800f3cc:	f7fc fde4 	bl	800bf98 <osMutexWait>
  osSemaphoreDef(capSampleSemaphore);
 800f3d0:	a816      	add	r0, sp, #88	; 0x58
  capSampleSemaphoreHandle = osSemaphoreCreate (osSemaphore(capSampleSemaphore), 1);
 800f3d2:	2101      	movs	r1, #1
  osSemaphoreDef(capSampleSemaphore);
 800f3d4:	f840 5d4c 	str.w	r5, [r0, #-76]!
  capSampleSemaphoreHandle = osSemaphoreCreate (osSemaphore(capSampleSemaphore), 1);
 800f3d8:	f7fc fe2e 	bl	800c038 <osSemaphoreCreate>
 800f3dc:	4b29      	ldr	r3, [pc, #164]	; (800f484 <StartDefaultTask+0xe0>)
  osSemaphoreWait( capSampleSemaphoreHandle, 1);
 800f3de:	2101      	movs	r1, #1
  capSampleSemaphoreHandle = osSemaphoreCreate (osSemaphore(capSampleSemaphore), 1);
 800f3e0:	6018      	str	r0, [r3, #0]
  osSemaphoreWait( capSampleSemaphoreHandle, 1);
 800f3e2:	f7fc fe3d 	bl	800c060 <osSemaphoreWait>
  osSemaphoreDef(lidarSampleReadySemaphore);
 800f3e6:	a816      	add	r0, sp, #88	; 0x58
  lidarSampleReadySemaphoreHandle = osSemaphoreCreate (osSemaphore(lidarSampleReadySemaphore), 1);
 800f3e8:	2101      	movs	r1, #1
  osSemaphoreDef(lidarSampleReadySemaphore);
 800f3ea:	f840 5d48 	str.w	r5, [r0, #-72]!
  lidarSampleReadySemaphoreHandle = osSemaphoreCreate (osSemaphore(lidarSampleReadySemaphore), 1);
 800f3ee:	f7fc fe23 	bl	800c038 <osSemaphoreCreate>
 800f3f2:	4b25      	ldr	r3, [pc, #148]	; (800f488 <StartDefaultTask+0xe4>)
  osSemaphoreWait( lidarSampleReadySemaphoreHandle, 1);
 800f3f4:	2101      	movs	r1, #1
  lidarSampleReadySemaphoreHandle = osSemaphoreCreate (osSemaphore(lidarSampleReadySemaphore), 1);
 800f3f6:	6018      	str	r0, [r3, #0]
  osSemaphoreWait( lidarSampleReadySemaphoreHandle, 1);
 800f3f8:	f7fc fe32 	bl	800c060 <osSemaphoreWait>
  osSemaphoreDef(accSampleSemaphore);
 800f3fc:	a816      	add	r0, sp, #88	; 0x58
  accSampleSemaphoreHandle = osSemaphoreCreate (osSemaphore(accSampleSemaphore), 1);
 800f3fe:	2101      	movs	r1, #1
  osSemaphoreDef(accSampleSemaphore);
 800f400:	f840 5d44 	str.w	r5, [r0, #-68]!
  accSampleSemaphoreHandle = osSemaphoreCreate (osSemaphore(accSampleSemaphore), 1);
 800f404:	f7fc fe18 	bl	800c038 <osSemaphoreCreate>
 800f408:	4b20      	ldr	r3, [pc, #128]	; (800f48c <StartDefaultTask+0xe8>)
  osSemaphoreWait( accSampleSemaphoreHandle, 1);
 800f40a:	2101      	movs	r1, #1
  accSampleSemaphoreHandle = osSemaphoreCreate (osSemaphore(accSampleSemaphore), 1);
 800f40c:	6018      	str	r0, [r3, #0]
  osSemaphoreWait( accSampleSemaphoreHandle, 1);
 800f40e:	f7fc fe27 	bl	800c060 <osSemaphoreWait>
  osTimerDef(accSampleTimer, accGiveSemaphore);
 800f412:	a816      	add	r0, sp, #88	; 0x58
 800f414:	4b1e      	ldr	r3, [pc, #120]	; (800f490 <StartDefaultTask+0xec>)
 800f416:	f840 3d40 	str.w	r3, [r0, #-64]!
  accSampleTimerHandle = osTimerCreate(osTimer(accSampleTimer), osTimerPeriodic, (void *)0);
 800f41a:	462a      	mov	r2, r5
 800f41c:	2101      	movs	r1, #1
 800f41e:	f7fc fd49 	bl	800beb4 <osTimerCreate>
 800f422:	4b1c      	ldr	r3, [pc, #112]	; (800f494 <StartDefaultTask+0xf0>)
 800f424:	6018      	str	r0, [r3, #0]
  osThreadDef(lidarMeasurementTask, LidarMeasurement, osPriorityLow, 0, 256);
 800f426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f428:	af07      	add	r7, sp, #28
 800f42a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f42c:	4626      	mov	r6, r4
  lidarMeasurementHandle = osThreadCreate(osThread(lidarMeasurementTask), NULL);
 800f42e:	4629      	mov	r1, r5
  osThreadDef(lidarMeasurementTask, LidarMeasurement, osPriorityLow, 0, 256);
 800f430:	f856 3b04 	ldr.w	r3, [r6], #4
 800f434:	603b      	str	r3, [r7, #0]
  lidarMeasurementHandle = osThreadCreate(osThread(lidarMeasurementTask), NULL);
 800f436:	a807      	add	r0, sp, #28
 800f438:	f7fc fd1c 	bl	800be74 <osThreadCreate>
 800f43c:	4b16      	ldr	r3, [pc, #88]	; (800f498 <StartDefaultTask+0xf4>)
 800f43e:	6018      	str	r0, [r3, #0]
//
  osThreadDef(capSampleTask, Sample_Cap_Touch, osPriorityLow, 0, 256);
 800f440:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f442:	af0c      	add	r7, sp, #48	; 0x30
 800f444:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f446:	6833      	ldr	r3, [r6, #0]
 800f448:	603b      	str	r3, [r7, #0]
  capSampleHandle = osThreadCreate(osThread(capSampleTask), NULL);
 800f44a:	4629      	mov	r1, r5
 800f44c:	a80c      	add	r0, sp, #48	; 0x30
 800f44e:	f7fc fd11 	bl	800be74 <osThreadCreate>
 800f452:	4b12      	ldr	r3, [pc, #72]	; (800f49c <StartDefaultTask+0xf8>)

  osThreadDef(accSampleTask, accelerometerThread, osPriorityLow, 0, 256);
 800f454:	3418      	adds	r4, #24
  capSampleHandle = osThreadCreate(osThread(capSampleTask), NULL);
 800f456:	6018      	str	r0, [r3, #0]
  osThreadDef(accSampleTask, accelerometerThread, osPriorityLow, 0, 256);
 800f458:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f45a:	ae11      	add	r6, sp, #68	; 0x44
 800f45c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f45e:	6823      	ldr	r3, [r4, #0]
 800f460:	6033      	str	r3, [r6, #0]
  accSampleHandle = osThreadCreate(osThread(accSampleTask), NULL);
 800f462:	4629      	mov	r1, r5
 800f464:	a811      	add	r0, sp, #68	; 0x44
 800f466:	f7fc fd05 	bl	800be74 <osThreadCreate>
 800f46a:	4b0d      	ldr	r3, [pc, #52]	; (800f4a0 <StartDefaultTask+0xfc>)
 800f46c:	6018      	str	r0, [r3, #0]
  //osTimerStart(capSampleTimerHandle, 40);

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800f46e:	2001      	movs	r0, #1
 800f470:	f7fc fd18 	bl	800bea4 <osDelay>
 800f474:	e7fb      	b.n	800f46e <StartDefaultTask+0xca>
 800f476:	bf00      	nop
 800f478:	20005388 	.word	0x20005388
 800f47c:	20005364 	.word	0x20005364
 800f480:	08014494 	.word	0x08014494
 800f484:	20005420 	.word	0x20005420
 800f488:	200054e0 	.word	0x200054e0
 800f48c:	2000536c 	.word	0x2000536c
 800f490:	0800e749 	.word	0x0800e749
 800f494:	20005384 	.word	0x20005384
 800f498:	200054e4 	.word	0x200054e4
 800f49c:	200054dc 	.word	0x200054dc
 800f4a0:	200054d8 	.word	0x200054d8

0800f4a4 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 800f4a4:	b530      	push	{r4, r5, lr}
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800f4a6:	4d07      	ldr	r5, [pc, #28]	; (800f4c4 <MX_FREERTOS_Init+0x20>)
 800f4a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void MX_FREERTOS_Init(void) {
 800f4aa:	b087      	sub	sp, #28
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800f4ac:	ac01      	add	r4, sp, #4
 800f4ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f4b0:	682b      	ldr	r3, [r5, #0]
 800f4b2:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800f4b4:	2100      	movs	r1, #0
 800f4b6:	a801      	add	r0, sp, #4
 800f4b8:	f7fc fcdc 	bl	800be74 <osThreadCreate>
 800f4bc:	4b02      	ldr	r3, [pc, #8]	; (800f4c8 <MX_FREERTOS_Init+0x24>)
 800f4be:	6018      	str	r0, [r3, #0]
}
 800f4c0:	b007      	add	sp, #28
 800f4c2:	bd30      	pop	{r4, r5, pc}
 800f4c4:	080144d0 	.word	0x080144d0
 800f4c8:	200054d4 	.word	0x200054d4

0800f4cc <MX_GPIO_Init>:
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
     PC2   ------> SharedAnalog_PC2
*/
void MX_GPIO_Init(void)
{
 800f4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4d0:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f4d2:	2400      	movs	r4, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800f4d4:	4b94      	ldr	r3, [pc, #592]	; (800f728 <MX_GPIO_Init+0x25c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f4d6:	9408      	str	r4, [sp, #32]
 800f4d8:	9407      	str	r4, [sp, #28]
 800f4da:	9409      	str	r4, [sp, #36]	; 0x24
 800f4dc:	940a      	str	r4, [sp, #40]	; 0x28
 800f4de:	940b      	str	r4, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800f4e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, POWER_SWITCH_Pin|LED_SS_Pin|BT_EN_Pin, GPIO_PIN_RESET);
 800f4e2:	f8df 825c 	ldr.w	r8, [pc, #604]	; 800f740 <MX_GPIO_Init+0x274>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_LAT_GPIO_Port, LED_LAT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BT_CMD_GPIO_Port, BT_CMD_Pin, GPIO_PIN_SET);
 800f4e6:	4f91      	ldr	r7, [pc, #580]	; (800f72c <MX_GPIO_Init+0x260>)
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, VL_XSHUT_Pin|HALL_CNTRL_Pin|SD_CARD_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BUTTON_3_Pin|BUTTON_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800f4e8:	4e91      	ldr	r6, [pc, #580]	; (800f730 <MX_GPIO_Init+0x264>)

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin|BUTTON_9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f4ea:	f8df a258 	ldr.w	sl, [pc, #600]	; 800f744 <MX_GPIO_Init+0x278>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8 
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f4ee:	f8df 9258 	ldr.w	r9, [pc, #600]	; 800f748 <MX_GPIO_Init+0x27c>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800f4f2:	f042 0210 	orr.w	r2, r2, #16
 800f4f6:	64da      	str	r2, [r3, #76]	; 0x4c
 800f4f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f4fa:	f002 0210 	and.w	r2, r2, #16
 800f4fe:	9201      	str	r2, [sp, #4]
 800f500:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800f502:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f504:	f042 0204 	orr.w	r2, r2, #4
 800f508:	64da      	str	r2, [r3, #76]	; 0x4c
 800f50a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f50c:	f002 0204 	and.w	r2, r2, #4
 800f510:	9202      	str	r2, [sp, #8]
 800f512:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800f514:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f516:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f51a:	64da      	str	r2, [r3, #76]	; 0x4c
 800f51c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f51e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800f522:	9203      	str	r2, [sp, #12]
 800f524:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800f526:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f528:	f042 0201 	orr.w	r2, r2, #1
 800f52c:	64da      	str	r2, [r3, #76]	; 0x4c
 800f52e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f530:	f002 0201 	and.w	r2, r2, #1
 800f534:	9204      	str	r2, [sp, #16]
 800f536:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800f538:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f53a:	f042 0202 	orr.w	r2, r2, #2
 800f53e:	64da      	str	r2, [r3, #76]	; 0x4c
 800f540:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f542:	f002 0202 	and.w	r2, r2, #2
 800f546:	9205      	str	r2, [sp, #20]
 800f548:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800f54a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f54c:	f042 0208 	orr.w	r2, r2, #8
 800f550:	64da      	str	r2, [r3, #76]	; 0x4c
 800f552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f554:	f003 0308 	and.w	r3, r3, #8
 800f558:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, POWER_SWITCH_Pin|LED_SS_Pin|BT_EN_Pin, GPIO_PIN_RESET);
 800f55a:	4622      	mov	r2, r4
 800f55c:	4640      	mov	r0, r8
 800f55e:	f240 1111 	movw	r1, #273	; 0x111
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800f562:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, POWER_SWITCH_Pin|LED_SS_Pin|BT_EN_Pin, GPIO_PIN_RESET);
 800f564:	f7f2 fe0e 	bl	8002184 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_LAT_GPIO_Port, LED_LAT_Pin, GPIO_PIN_RESET);
 800f568:	4622      	mov	r2, r4
 800f56a:	2104      	movs	r1, #4
 800f56c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800f570:	f7f2 fe08 	bl	8002184 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BT_CMD_GPIO_Port, BT_CMD_Pin, GPIO_PIN_SET);
 800f574:	4638      	mov	r0, r7
 800f576:	2201      	movs	r2, #1
 800f578:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f57c:	f7f2 fe02 	bl	8002184 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, VL_XSHUT_Pin|HALL_CNTRL_Pin|SD_CARD_EN_Pin, GPIO_PIN_RESET);
 800f580:	4622      	mov	r2, r4
 800f582:	4638      	mov	r0, r7
 800f584:	f248 01c0 	movw	r1, #32960	; 0x80c0
 800f588:	f7f2 fdfc 	bl	8002184 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800f58c:	a907      	add	r1, sp, #28
 800f58e:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = BUTTON_3_Pin|BUTTON_8_Pin;
 800f590:	230c      	movs	r3, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f592:	f04f 0b01 	mov.w	fp, #1
  GPIO_InitStruct.Pin = BUTTON_3_Pin|BUTTON_8_Pin;
 800f596:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800f598:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f59a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800f59c:	f7f2 fcd6 	bl	8001f4c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800f5a0:	a907      	add	r1, sp, #28
 800f5a2:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = POWER_SWITCH_Pin|LED_SS_Pin|BT_EN_Pin;
 800f5a4:	f240 1311 	movw	r3, #273	; 0x111
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f5a8:	2503      	movs	r5, #3
  GPIO_InitStruct.Pin = POWER_SWITCH_Pin|LED_SS_Pin|BT_EN_Pin;
 800f5aa:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5ac:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f5ae:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f5b0:	f8cd b020 	str.w	fp, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800f5b4:	f7f2 fcca 	bl	8001f4c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800f5b8:	4640      	mov	r0, r8
 800f5ba:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10 
 800f5bc:	f64f 43e2 	movw	r3, #64738	; 0xfce2
 800f5c0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5c2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f5c4:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800f5c6:	f7f2 fcc1 	bl	8001f4c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f5ca:	a907      	add	r1, sp, #28
 800f5cc:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = BUTTON_2_Pin|BUTTON_9_Pin;
 800f5ce:	f44f 5302 	mov.w	r3, #8320	; 0x2080
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800f5d2:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pin = BUTTON_2_Pin|BUTTON_9_Pin;
 800f5d4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5d6:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f5d8:	f7f2 fcb8 	bl	8001f4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = HALL_OUTPUT_Pin|GPIO_PIN_6;
 800f5dc:	2344      	movs	r3, #68	; 0x44
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f5de:	4650      	mov	r0, sl
 800f5e0:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = HALL_OUTPUT_Pin|GPIO_PIN_6;
 800f5e2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f5e4:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5e6:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f5e8:	f7f2 fcb0 	bl	8001f4c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f5ec:	a907      	add	r1, sp, #28
 800f5ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800f5f2:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pin = BUTTON_7_Pin|BUTTON_1_Pin;
 800f5f4:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5f6:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f5f8:	f7f2 fca8 	bl	8001f4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_LAT_Pin;
 800f5fc:	2204      	movs	r2, #4
  HAL_GPIO_Init(LED_LAT_GPIO_Port, &GPIO_InitStruct);
 800f5fe:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800f600:	2302      	movs	r3, #2
  HAL_GPIO_Init(LED_LAT_GPIO_Port, &GPIO_InitStruct);
 800f602:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LED_LAT_Pin;
 800f606:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800f608:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f60a:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f60e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(LED_LAT_GPIO_Port, &GPIO_InitStruct);
 800f610:	f7f2 fc9c 	bl	8001f4c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f614:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11 
 800f616:	f641 03c8 	movw	r3, #6344	; 0x18c8
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f61a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11 
 800f61e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f620:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f622:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f624:	f7f2 fc92 	bl	8001f4c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f628:	a907      	add	r1, sp, #28
 800f62a:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_14 
 800f62c:	f24d 331b 	movw	r3, #54043	; 0xd31b
 800f630:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f632:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f634:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f636:	f7f2 fc89 	bl	8001f4c <HAL_GPIO_Init>
                           PD3 PD4 PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1 
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f63a:	a907      	add	r1, sp, #28
 800f63c:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1 
 800f63e:	f242 133b 	movw	r3, #8507	; 0x213b
 800f642:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f644:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f646:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f648:	f7f2 fc80 	bl	8001f4c <HAL_GPIO_Init>
  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BT_CMD_Pin|VL_XSHUT_Pin|HALL_CNTRL_Pin|SD_CARD_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f64c:	a907      	add	r1, sp, #28
 800f64e:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = BT_CMD_Pin|VL_XSHUT_Pin|HALL_CNTRL_Pin|SD_CARD_EN_Pin;
 800f650:	f248 23c0 	movw	r3, #33472	; 0x82c0
 800f654:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f656:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f65a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f65c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f65e:	f7f2 fc75 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BUTTON_6_Pin|BUTTON_10_Pin|BUTTON_5_Pin|BUTTON_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f662:	4638      	mov	r0, r7
 800f664:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = BUTTON_6_Pin|BUTTON_10_Pin|BUTTON_5_Pin|BUTTON_4_Pin;
 800f666:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800f66a:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pin = BUTTON_6_Pin|BUTTON_10_Pin|BUTTON_5_Pin|BUTTON_4_Pin;
 800f66c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f66e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f670:	f7f2 fc6c 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VL_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(VL_INT_GPIO_Port, &GPIO_InitStruct);
 800f674:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = VL_INT_Pin;
 800f676:	f44f 7280 	mov.w	r2, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800f67a:	4b2e      	ldr	r3, [pc, #184]	; (800f734 <MX_GPIO_Init+0x268>)
  GPIO_InitStruct.Pin = VL_INT_Pin;
 800f67c:	9207      	str	r2, [sp, #28]
  HAL_GPIO_Init(VL_INT_GPIO_Port, &GPIO_InitStruct);
 800f67e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800f682:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f684:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(VL_INT_GPIO_Port, &GPIO_InitStruct);
 800f686:	f7f2 fc61 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HALL_INT_Pin;
 800f68a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(HALL_INT_GPIO_Port, &GPIO_InitStruct);
 800f68e:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800f690:	4b29      	ldr	r3, [pc, #164]	; (800f738 <MX_GPIO_Init+0x26c>)
  GPIO_InitStruct.Pin = HALL_INT_Pin;
 800f692:	9207      	str	r2, [sp, #28]
  HAL_GPIO_Init(HALL_INT_GPIO_Port, &GPIO_InitStruct);
 800f694:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800f698:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f69a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(HALL_INT_GPIO_Port, &GPIO_InitStruct);
 800f69c:	f7f2 fc56 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAP_ALERT_Pin;
 800f6a0:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(CAP_ALERT_GPIO_Port, &GPIO_InitStruct);
 800f6a2:	4648      	mov	r0, r9
 800f6a4:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = CAP_ALERT_Pin;
 800f6a6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800f6a8:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f6aa:	9409      	str	r4, [sp, #36]	; 0x24

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800f6ac:	2608      	movs	r6, #8
  HAL_GPIO_Init(CAP_ALERT_GPIO_Port, &GPIO_InitStruct);
 800f6ae:	f7f2 fc4d 	bl	8001f4c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800f6b2:	a907      	add	r1, sp, #28
 800f6b4:	4821      	ldr	r0, [pc, #132]	; (800f73c <MX_GPIO_Init+0x270>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f6b6:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f6b8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800f6ba:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800f6bc:	f7f2 fc46 	bl	8001f4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800f6c0:	4622      	mov	r2, r4
 800f6c2:	2105      	movs	r1, #5
 800f6c4:	2006      	movs	r0, #6
 800f6c6:	f7f2 f893 	bl	80017f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800f6ca:	2006      	movs	r0, #6
 800f6cc:	f7f2 f8c6 	bl	800185c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800f6d0:	4622      	mov	r2, r4
 800f6d2:	2105      	movs	r1, #5
 800f6d4:	2007      	movs	r0, #7
 800f6d6:	f7f2 f88b 	bl	80017f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800f6da:	2007      	movs	r0, #7
 800f6dc:	f7f2 f8be 	bl	800185c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800f6e0:	4622      	mov	r2, r4
 800f6e2:	4630      	mov	r0, r6
 800f6e4:	2105      	movs	r1, #5
 800f6e6:	f7f2 f883 	bl	80017f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800f6ea:	4630      	mov	r0, r6
 800f6ec:	f7f2 f8b6 	bl	800185c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800f6f0:	4622      	mov	r2, r4
 800f6f2:	2105      	movs	r1, #5
 800f6f4:	2009      	movs	r0, #9
 800f6f6:	f7f2 f87b 	bl	80017f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800f6fa:	2009      	movs	r0, #9
 800f6fc:	f7f2 f8ae 	bl	800185c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800f700:	4622      	mov	r2, r4
 800f702:	2105      	movs	r1, #5
 800f704:	2017      	movs	r0, #23
 800f706:	f7f2 f873 	bl	80017f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800f70a:	2017      	movs	r0, #23
 800f70c:	f7f2 f8a6 	bl	800185c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800f710:	4622      	mov	r2, r4
 800f712:	2105      	movs	r1, #5
 800f714:	2028      	movs	r0, #40	; 0x28
 800f716:	f7f2 f86b 	bl	80017f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800f71a:	2028      	movs	r0, #40	; 0x28
 800f71c:	f7f2 f89e 	bl	800185c <HAL_NVIC_EnableIRQ>

}
 800f720:	b00d      	add	sp, #52	; 0x34
 800f722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f726:	bf00      	nop
 800f728:	40021000 	.word	0x40021000
 800f72c:	48000c00 	.word	0x48000c00
 800f730:	10110000 	.word	0x10110000
 800f734:	10210000 	.word	0x10210000
 800f738:	10310000 	.word	0x10310000
 800f73c:	48001c00 	.word	0x48001c00
 800f740:	48001000 	.word	0x48001000
 800f744:	48000800 	.word	0x48000800
 800f748:	48000400 	.word	0x48000400

0800f74c <HALL_Handler>:

void resetIntTracker(void){
	POV_intTracker = 0;
}

void HALL_Handler(void){
 800f74c:	b510      	push	{r4, lr}
//	itoa(rounds, temp_buf2, 10);
//	HAL_UART_Transmit(&huart3, (uint8_t*) temp_buf2, sizeof(temp_buf2), 10);
//	char str[5] = "\n\r";
//	HAL_UART_Transmit(&huart3, (uint8_t*) str, sizeof(str), 10);

	if(countUp){
 800f74e:	4921      	ldr	r1, [pc, #132]	; (800f7d4 <HALL_Handler+0x88>)
 800f750:	780b      	ldrb	r3, [r1, #0]
 800f752:	b1c3      	cbz	r3, 800f786 <HALL_Handler+0x3a>
		intTracker++;
 800f754:	4b20      	ldr	r3, [pc, #128]	; (800f7d8 <HALL_Handler+0x8c>)
 800f756:	781a      	ldrb	r2, [r3, #0]
 800f758:	3201      	adds	r2, #1
 800f75a:	b2d2      	uxtb	r2, r2
 800f75c:	701a      	strb	r2, [r3, #0]
	}
	else if(countDown){ //can remove this "if check" once confident code works properly
		intTracker--;
	}

	if(intTracker >= (ROTATION_STEPS-1)){
 800f75e:	781a      	ldrb	r2, [r3, #0]
 800f760:	2a04      	cmp	r2, #4
 800f762:	d91b      	bls.n	800f79c <HALL_Handler+0x50>
		countDown 	= 1;
 800f764:	4a1d      	ldr	r2, [pc, #116]	; (800f7dc <HALL_Handler+0x90>)
 800f766:	2001      	movs	r0, #1
		countUp 	= 0;
 800f768:	2300      	movs	r3, #0
		countDown 	= 1;
 800f76a:	7010      	strb	r0, [r2, #0]
		countUp 	= 0;
 800f76c:	700b      	strb	r3, [r1, #0]
	else if(intTracker == 0){
		countDown 	= 0;
		countUp 	= 1;
	}

	setWavetableAmplitude(&intTracker);
 800f76e:	481a      	ldr	r0, [pc, #104]	; (800f7d8 <HALL_Handler+0x8c>)
 800f770:	f002 face 	bl	8011d10 <setWavetableAmplitude>

	POV_intTracker++;
 800f774:	4a1a      	ldr	r2, [pc, #104]	; (800f7e0 <HALL_Handler+0x94>)
 800f776:	7813      	ldrb	r3, [r2, #0]
 800f778:	3301      	adds	r3, #1
 800f77a:	b2db      	uxtb	r3, r3
 800f77c:	7013      	strb	r3, [r2, #0]
//	if(POV_intTracker == TICK_THRESH){
//		RPR = 2*(DWT->CYCCNT);
//		DWT->CYCCNT = 0; // reset the counter
//	}

	if(POV_intTracker == HALF_MAGNET_CNT){
 800f77e:	7813      	ldrb	r3, [r2, #0]
 800f780:	2b03      	cmp	r3, #3
 800f782:	d017      	beq.n	800f7b4 <HALL_Handler+0x68>
 800f784:	bd10      	pop	{r4, pc}
	else if(countDown){ //can remove this "if check" once confident code works properly
 800f786:	4b15      	ldr	r3, [pc, #84]	; (800f7dc <HALL_Handler+0x90>)
 800f788:	781b      	ldrb	r3, [r3, #0]
 800f78a:	b18b      	cbz	r3, 800f7b0 <HALL_Handler+0x64>
		intTracker--;
 800f78c:	4b12      	ldr	r3, [pc, #72]	; (800f7d8 <HALL_Handler+0x8c>)
 800f78e:	781a      	ldrb	r2, [r3, #0]
 800f790:	3a01      	subs	r2, #1
 800f792:	b2d2      	uxtb	r2, r2
 800f794:	701a      	strb	r2, [r3, #0]
	if(intTracker >= (ROTATION_STEPS-1)){
 800f796:	781a      	ldrb	r2, [r3, #0]
 800f798:	2a04      	cmp	r2, #4
 800f79a:	d8e3      	bhi.n	800f764 <HALL_Handler+0x18>
	else if(intTracker == 0){
 800f79c:	781b      	ldrb	r3, [r3, #0]
 800f79e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d1e3      	bne.n	800f76e <HALL_Handler+0x22>
		countDown 	= 0;
 800f7a6:	480d      	ldr	r0, [pc, #52]	; (800f7dc <HALL_Handler+0x90>)
		countUp 	= 1;
 800f7a8:	2301      	movs	r3, #1
		countDown 	= 0;
 800f7aa:	7002      	strb	r2, [r0, #0]
		countUp 	= 1;
 800f7ac:	700b      	strb	r3, [r1, #0]
 800f7ae:	e7de      	b.n	800f76e <HALL_Handler+0x22>
 800f7b0:	4b09      	ldr	r3, [pc, #36]	; (800f7d8 <HALL_Handler+0x8c>)
 800f7b2:	e7d4      	b.n	800f75e <HALL_Handler+0x12>
		RPR = (DWT->CYCCNT);
 800f7b4:	4c0b      	ldr	r4, [pc, #44]	; (800f7e4 <HALL_Handler+0x98>)
 800f7b6:	4b0c      	ldr	r3, [pc, #48]	; (800f7e8 <HALL_Handler+0x9c>)
 800f7b8:	6860      	ldr	r0, [r4, #4]
 800f7ba:	2100      	movs	r1, #0
 800f7bc:	e9c3 0100 	strd	r0, r1, [r3]
		DWT->CYCCNT = 0; // reset the counter
 800f7c0:	2000      	movs	r0, #0

		POV_intTracker = 1;
 800f7c2:	2101      	movs	r1, #1
		DWT->CYCCNT = 0; // reset the counter
 800f7c4:	6060      	str	r0, [r4, #4]
		POV_intTracker = 1;
 800f7c6:	7011      	strb	r1, [r2, #0]
		POV_handler(RPR);
 800f7c8:	e9d3 0100 	ldrd	r0, r1, [r3]
	}
}
 800f7cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		POV_handler(RPR);
 800f7d0:	f000 bce6 	b.w	80101a0 <POV_handler>
 800f7d4:	20000031 	.word	0x20000031
 800f7d8:	200050a1 	.word	0x200050a1
 800f7dc:	200050a0 	.word	0x200050a0
 800f7e0:	20005090 	.word	0x20005090
 800f7e4:	e0001000 	.word	0xe0001000
 800f7e8:	20005098 	.word	0x20005098

0800f7ec <MX_I2C1_Init>:

/* I2C1 init function */
void MX_I2C1_Init(void)
{

  hi2c1.Instance = I2C1;
 800f7ec:	4b13      	ldr	r3, [pc, #76]	; (800f83c <MX_I2C1_Init+0x50>)
 800f7ee:	4a14      	ldr	r2, [pc, #80]	; (800f840 <MX_I2C1_Init+0x54>)
{
 800f7f0:	b510      	push	{r4, lr}
  hi2c1.Init.Timing = 0x10909CEC;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800f7f2:	2101      	movs	r1, #1
  hi2c1.Init.Timing = 0x10909CEC;
 800f7f4:	4c13      	ldr	r4, [pc, #76]	; (800f844 <MX_I2C1_Init+0x58>)
  hi2c1.Instance = I2C1;
 800f7f6:	601a      	str	r2, [r3, #0]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800f7f8:	4618      	mov	r0, r3
  hi2c1.Init.OwnAddress1 = 0;
 800f7fa:	2200      	movs	r2, #0
  hi2c1.Init.Timing = 0x10909CEC;
 800f7fc:	605c      	str	r4, [r3, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800f7fe:	60d9      	str	r1, [r3, #12]
  hi2c1.Init.OwnAddress1 = 0;
 800f800:	609a      	str	r2, [r3, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800f802:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800f804:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800f806:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800f808:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800f80a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800f80c:	f7f2 fdf8 	bl	8002400 <HAL_I2C_Init>
 800f810:	b988      	cbnz	r0, 800f836 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800f812:	2100      	movs	r1, #0
 800f814:	4809      	ldr	r0, [pc, #36]	; (800f83c <MX_I2C1_Init+0x50>)
 800f816:	f7f4 fa2d 	bl	8003c74 <HAL_I2CEx_ConfigAnalogFilter>
 800f81a:	b948      	cbnz	r0, 800f830 <MX_I2C1_Init+0x44>
  {
    Error_Handler();
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800f81c:	2100      	movs	r1, #0
 800f81e:	4807      	ldr	r0, [pc, #28]	; (800f83c <MX_I2C1_Init+0x50>)
 800f820:	f7f4 fa52 	bl	8003cc8 <HAL_I2CEx_ConfigDigitalFilter>
 800f824:	b900      	cbnz	r0, 800f828 <MX_I2C1_Init+0x3c>
 800f826:	bd10      	pop	{r4, pc}
  {
    Error_Handler();
  }

}
 800f828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800f82c:	f001 b952 	b.w	8010ad4 <Error_Handler>
    Error_Handler();
 800f830:	f001 f950 	bl	8010ad4 <Error_Handler>
 800f834:	e7f2      	b.n	800f81c <MX_I2C1_Init+0x30>
    Error_Handler();
 800f836:	f001 f94d 	bl	8010ad4 <Error_Handler>
 800f83a:	e7ea      	b.n	800f812 <MX_I2C1_Init+0x26>
 800f83c:	20005534 	.word	0x20005534
 800f840:	40005400 	.word	0x40005400
 800f844:	10909cec 	.word	0x10909cec

0800f848 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{

  hi2c2.Instance = I2C2;
 800f848:	4b13      	ldr	r3, [pc, #76]	; (800f898 <MX_I2C2_Init+0x50>)
 800f84a:	4a14      	ldr	r2, [pc, #80]	; (800f89c <MX_I2C2_Init+0x54>)
{
 800f84c:	b510      	push	{r4, lr}
  hi2c2.Init.Timing = 0x00702991;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800f84e:	2101      	movs	r1, #1
  hi2c2.Init.Timing = 0x00702991;
 800f850:	4c13      	ldr	r4, [pc, #76]	; (800f8a0 <MX_I2C2_Init+0x58>)
  hi2c2.Instance = I2C2;
 800f852:	601a      	str	r2, [r3, #0]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800f854:	4618      	mov	r0, r3
  hi2c2.Init.OwnAddress1 = 0;
 800f856:	2200      	movs	r2, #0
  hi2c2.Init.Timing = 0x00702991;
 800f858:	605c      	str	r4, [r3, #4]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800f85a:	60d9      	str	r1, [r3, #12]
  hi2c2.Init.OwnAddress1 = 0;
 800f85c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800f85e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800f860:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800f862:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800f864:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800f866:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800f868:	f7f2 fdca 	bl	8002400 <HAL_I2C_Init>
 800f86c:	b988      	cbnz	r0, 800f892 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800f86e:	2100      	movs	r1, #0
 800f870:	4809      	ldr	r0, [pc, #36]	; (800f898 <MX_I2C2_Init+0x50>)
 800f872:	f7f4 f9ff 	bl	8003c74 <HAL_I2CEx_ConfigAnalogFilter>
 800f876:	b948      	cbnz	r0, 800f88c <MX_I2C2_Init+0x44>
  {
    Error_Handler();
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800f878:	2100      	movs	r1, #0
 800f87a:	4807      	ldr	r0, [pc, #28]	; (800f898 <MX_I2C2_Init+0x50>)
 800f87c:	f7f4 fa24 	bl	8003cc8 <HAL_I2CEx_ConfigDigitalFilter>
 800f880:	b900      	cbnz	r0, 800f884 <MX_I2C2_Init+0x3c>
 800f882:	bd10      	pop	{r4, pc}
  {
    Error_Handler();
  }

}
 800f884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800f888:	f001 b924 	b.w	8010ad4 <Error_Handler>
    Error_Handler();
 800f88c:	f001 f922 	bl	8010ad4 <Error_Handler>
 800f890:	e7f2      	b.n	800f878 <MX_I2C2_Init+0x30>
    Error_Handler();
 800f892:	f001 f91f 	bl	8010ad4 <Error_Handler>
 800f896:	e7ea      	b.n	800f86e <MX_I2C2_Init+0x26>
 800f898:	20005580 	.word	0x20005580
 800f89c:	40005800 	.word	0x40005800
 800f8a0:	00702991 	.word	0x00702991

0800f8a4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{

  hi2c3.Instance = I2C3;
 800f8a4:	4b13      	ldr	r3, [pc, #76]	; (800f8f4 <MX_I2C3_Init+0x50>)
 800f8a6:	4a14      	ldr	r2, [pc, #80]	; (800f8f8 <MX_I2C3_Init+0x54>)
{
 800f8a8:	b510      	push	{r4, lr}
  hi2c3.Init.Timing = 0x00702991;
  hi2c3.Init.OwnAddress1 = 0;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800f8aa:	2101      	movs	r1, #1
  hi2c3.Init.Timing = 0x00702991;
 800f8ac:	4c13      	ldr	r4, [pc, #76]	; (800f8fc <MX_I2C3_Init+0x58>)
  hi2c3.Instance = I2C3;
 800f8ae:	601a      	str	r2, [r3, #0]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c3.Init.OwnAddress2 = 0;
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800f8b0:	4618      	mov	r0, r3
  hi2c3.Init.OwnAddress1 = 0;
 800f8b2:	2200      	movs	r2, #0
  hi2c3.Init.Timing = 0x00702991;
 800f8b4:	605c      	str	r4, [r3, #4]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800f8b6:	60d9      	str	r1, [r3, #12]
  hi2c3.Init.OwnAddress1 = 0;
 800f8b8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800f8ba:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800f8bc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800f8be:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800f8c0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800f8c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800f8c4:	f7f2 fd9c 	bl	8002400 <HAL_I2C_Init>
 800f8c8:	b988      	cbnz	r0, 800f8ee <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800f8ca:	2100      	movs	r1, #0
 800f8cc:	4809      	ldr	r0, [pc, #36]	; (800f8f4 <MX_I2C3_Init+0x50>)
 800f8ce:	f7f4 f9d1 	bl	8003c74 <HAL_I2CEx_ConfigAnalogFilter>
 800f8d2:	b948      	cbnz	r0, 800f8e8 <MX_I2C3_Init+0x44>
  {
    Error_Handler();
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800f8d4:	2100      	movs	r1, #0
 800f8d6:	4807      	ldr	r0, [pc, #28]	; (800f8f4 <MX_I2C3_Init+0x50>)
 800f8d8:	f7f4 f9f6 	bl	8003cc8 <HAL_I2CEx_ConfigDigitalFilter>
 800f8dc:	b900      	cbnz	r0, 800f8e0 <MX_I2C3_Init+0x3c>
 800f8de:	bd10      	pop	{r4, pc}
  {
    Error_Handler();
  }

}
 800f8e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800f8e4:	f001 b8f6 	b.w	8010ad4 <Error_Handler>
    Error_Handler();
 800f8e8:	f001 f8f4 	bl	8010ad4 <Error_Handler>
 800f8ec:	e7f2      	b.n	800f8d4 <MX_I2C3_Init+0x30>
    Error_Handler();
 800f8ee:	f001 f8f1 	bl	8010ad4 <Error_Handler>
 800f8f2:	e7ea      	b.n	800f8ca <MX_I2C3_Init+0x26>
 800f8f4:	200054e8 	.word	0x200054e8
 800f8f8:	40005c00 	.word	0x40005c00
 800f8fc:	00702991 	.word	0x00702991

0800f900 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800f900:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C1)
 800f902:	6803      	ldr	r3, [r0, #0]
 800f904:	4a49      	ldr	r2, [pc, #292]	; (800fa2c <HAL_I2C_MspInit+0x12c>)
{
 800f906:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f908:	2400      	movs	r4, #0
  if(i2cHandle->Instance==I2C1)
 800f90a:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f90c:	9408      	str	r4, [sp, #32]
 800f90e:	9407      	str	r4, [sp, #28]
 800f910:	9409      	str	r4, [sp, #36]	; 0x24
 800f912:	940a      	str	r4, [sp, #40]	; 0x28
 800f914:	940b      	str	r4, [sp, #44]	; 0x2c
  if(i2cHandle->Instance==I2C1)
 800f916:	d031      	beq.n	800f97c <HAL_I2C_MspInit+0x7c>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
 800f918:	4a45      	ldr	r2, [pc, #276]	; (800fa30 <HAL_I2C_MspInit+0x130>)
 800f91a:	4293      	cmp	r3, r2
 800f91c:	d059      	beq.n	800f9d2 <HAL_I2C_MspInit+0xd2>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C3)
 800f91e:	4a45      	ldr	r2, [pc, #276]	; (800fa34 <HAL_I2C_MspInit+0x134>)
 800f920:	4293      	cmp	r3, r2
 800f922:	d001      	beq.n	800f928 <HAL_I2C_MspInit+0x28>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800f924:	b00d      	add	sp, #52	; 0x34
 800f926:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f928:	4d43      	ldr	r5, [pc, #268]	; (800fa38 <HAL_I2C_MspInit+0x138>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f92a:	4844      	ldr	r0, [pc, #272]	; (800fa3c <HAL_I2C_MspInit+0x13c>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f92c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800f92e:	f043 0304 	orr.w	r3, r3, #4
 800f932:	64eb      	str	r3, [r5, #76]	; 0x4c
 800f934:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800f936:	f003 0304 	and.w	r3, r3, #4
 800f93a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f93c:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800f93e:	2303      	movs	r3, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800f940:	2204      	movs	r2, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800f942:	2712      	movs	r7, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f944:	2601      	movs	r6, #1
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f946:	f8dd e014 	ldr.w	lr, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800f94a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f94c:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800f94e:	920b      	str	r2, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800f950:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f952:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f954:	f7f2 fafa 	bl	8001f4c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800f958:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800f95a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f95e:	65ab      	str	r3, [r5, #88]	; 0x58
 800f960:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800f962:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f966:	9306      	str	r3, [sp, #24]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 800f968:	4622      	mov	r2, r4
 800f96a:	2105      	movs	r1, #5
 800f96c:	2048      	movs	r0, #72	; 0x48
    __HAL_RCC_I2C3_CLK_ENABLE();
 800f96e:	9b06      	ldr	r3, [sp, #24]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 800f970:	f7f1 ff3e 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800f974:	2048      	movs	r0, #72	; 0x48
 800f976:	f7f1 ff71 	bl	800185c <HAL_NVIC_EnableIRQ>
}
 800f97a:	e7d3      	b.n	800f924 <HAL_I2C_MspInit+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f97c:	4d2e      	ldr	r5, [pc, #184]	; (800fa38 <HAL_I2C_MspInit+0x138>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f97e:	4830      	ldr	r0, [pc, #192]	; (800fa40 <HAL_I2C_MspInit+0x140>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f980:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800f982:	f043 0302 	orr.w	r3, r3, #2
 800f986:	64eb      	str	r3, [r5, #76]	; 0x4c
 800f988:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800f98a:	f003 0302 	and.w	r3, r3, #2
 800f98e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800f990:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f992:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f994:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800f996:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800f998:	2712      	movs	r7, #18
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800f99a:	2304      	movs	r3, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f99c:	2601      	movs	r6, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f99e:	f8dd e004 	ldr.w	lr, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f9a2:	920a      	str	r2, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800f9a4:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800f9a6:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f9a8:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f9aa:	f7f2 facf 	bl	8001f4c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800f9ae:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800f9b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f9b4:	65ab      	str	r3, [r5, #88]	; 0x58
 800f9b6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800f9b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f9bc:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800f9be:	4622      	mov	r2, r4
 800f9c0:	2105      	movs	r1, #5
 800f9c2:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 800f9c4:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800f9c6:	f7f1 ff13 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800f9ca:	201f      	movs	r0, #31
 800f9cc:	f7f1 ff46 	bl	800185c <HAL_NVIC_EnableIRQ>
 800f9d0:	e7a8      	b.n	800f924 <HAL_I2C_MspInit+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f9d2:	4d19      	ldr	r5, [pc, #100]	; (800fa38 <HAL_I2C_MspInit+0x138>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f9d4:	481a      	ldr	r0, [pc, #104]	; (800fa40 <HAL_I2C_MspInit+0x140>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f9d6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800f9d8:	f043 0302 	orr.w	r3, r3, #2
 800f9dc:	64eb      	str	r3, [r5, #76]	; 0x4c
 800f9de:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800f9e0:	f003 0302 	and.w	r3, r3, #2
 800f9e4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800f9e6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f9ea:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f9ec:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800f9ee:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800f9f0:	2712      	movs	r7, #18
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800f9f2:	2304      	movs	r3, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f9f4:	2601      	movs	r6, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f9f6:	f8dd e00c 	ldr.w	lr, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f9fa:	920a      	str	r2, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800f9fc:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800f9fe:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800fa00:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fa02:	f7f2 faa3 	bl	8001f4c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800fa06:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800fa08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800fa0c:	65ab      	str	r3, [r5, #88]	; 0x58
 800fa0e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800fa10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fa14:	9304      	str	r3, [sp, #16]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 800fa16:	4622      	mov	r2, r4
 800fa18:	2105      	movs	r1, #5
 800fa1a:	2021      	movs	r0, #33	; 0x21
    __HAL_RCC_I2C2_CLK_ENABLE();
 800fa1c:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 800fa1e:	f7f1 fee7 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800fa22:	2021      	movs	r0, #33	; 0x21
 800fa24:	f7f1 ff1a 	bl	800185c <HAL_NVIC_EnableIRQ>
 800fa28:	e77c      	b.n	800f924 <HAL_I2C_MspInit+0x24>
 800fa2a:	bf00      	nop
 800fa2c:	40005400 	.word	0x40005400
 800fa30:	40005800 	.word	0x40005800
 800fa34:	40005c00 	.word	0x40005c00
 800fa38:	40021000 	.word	0x40021000
 800fa3c:	48000800 	.word	0x48000800
 800fa40:	48000400 	.word	0x48000400

0800fa44 <runPOV_step>:
}

void runPOV_step(uint8_t* red, uint8_t* green, uint8_t step){
	memset(LED_SETTINGS, 255, sizeof LED_SETTINGS);

	if(global_visNum == 1){
 800fa44:	4acf      	ldr	r2, [pc, #828]	; (800fd84 <runPOV_step+0x340>)
	memset(LED_SETTINGS, 255, sizeof LED_SETTINGS);
 800fa46:	4bd0      	ldr	r3, [pc, #832]	; (800fd88 <runPOV_step+0x344>)
void runPOV_step(uint8_t* red, uint8_t* green, uint8_t step){
 800fa48:	b410      	push	{r4}
	if(global_visNum == 1){
 800fa4a:	8814      	ldrh	r4, [r2, #0]
	memset(LED_SETTINGS, 255, sizeof LED_SETTINGS);
 800fa4c:	f04f 32ff 	mov.w	r2, #4294967295
	if(global_visNum == 1){
 800fa50:	2c01      	cmp	r4, #1
	memset(LED_SETTINGS, 255, sizeof LED_SETTINGS);
 800fa52:	601a      	str	r2, [r3, #0]
 800fa54:	809a      	strh	r2, [r3, #4]
	if(global_visNum == 1){
 800fa56:	f000 8095 	beq.w	800fb84 <runPOV_step+0x140>
		}else{
			POV_left(red, 1);
			POV_right(green, 0);
		}
	}
	else if(global_visNum == 2){
 800fa5a:	2c02      	cmp	r4, #2
 800fa5c:	d002      	beq.n	800fa64 <runPOV_step+0x20>
			POV_right(green, 0);
			POV_right(red, 1);
		}

	}
}
 800fa5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa62:	4770      	bx	lr
		if( (timerPOVstate%2) == 1 ){
 800fa64:	4ac9      	ldr	r2, [pc, #804]	; (800fd8c <runPOV_step+0x348>)
 800fa66:	6812      	ldr	r2, [r2, #0]
 800fa68:	07d2      	lsls	r2, r2, #31
 800fa6a:	f100 80ec 	bmi.w	800fc46 <runPOV_step+0x202>
		if(colorMap[0] == 1){
 800fa6e:	f891 2069 	ldrb.w	r2, [r1, #105]	; 0x69
 800fa72:	2a01      	cmp	r2, #1
 800fa74:	f000 81e1 	beq.w	800fe3a <runPOV_step+0x3f6>
		if(colorMap[1] == 1){
 800fa78:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
 800fa7c:	2a01      	cmp	r2, #1
 800fa7e:	f000 81d7 	beq.w	800fe30 <runPOV_step+0x3ec>
		if(colorMap[2] == 1){
 800fa82:	f891 206b 	ldrb.w	r2, [r1, #107]	; 0x6b
 800fa86:	2a01      	cmp	r2, #1
 800fa88:	f000 81cd 	beq.w	800fe26 <runPOV_step+0x3e2>
		if(colorMap[3] == 1){
 800fa8c:	f891 206c 	ldrb.w	r2, [r1, #108]	; 0x6c
 800fa90:	2a01      	cmp	r2, #1
 800fa92:	f000 81c3 	beq.w	800fe1c <runPOV_step+0x3d8>
		if(colorMap[4] == 1){
 800fa96:	f891 206d 	ldrb.w	r2, [r1, #109]	; 0x6d
 800fa9a:	2a01      	cmp	r2, #1
 800fa9c:	f000 81b9 	beq.w	800fe12 <runPOV_step+0x3ce>
		if(colorMap[5] == 1){
 800faa0:	f891 206e 	ldrb.w	r2, [r1, #110]	; 0x6e
 800faa4:	2a01      	cmp	r2, #1
 800faa6:	f000 81af 	beq.w	800fe08 <runPOV_step+0x3c4>
		if(colorMap[6] == 1){
 800faaa:	f891 206f 	ldrb.w	r2, [r1, #111]	; 0x6f
 800faae:	2a01      	cmp	r2, #1
 800fab0:	d103      	bne.n	800faba <runPOV_step+0x76>
			LED_SETTINGS[POV_1_G_REG] &= ~POV_1_G_PIN;
 800fab2:	795a      	ldrb	r2, [r3, #5]
 800fab4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800fab8:	715a      	strb	r2, [r3, #5]
		if(colorMap[0] == 1){
 800faba:	f890 2069 	ldrb.w	r2, [r0, #105]	; 0x69
 800fabe:	2a01      	cmp	r2, #1
 800fac0:	f000 819d 	beq.w	800fdfe <runPOV_step+0x3ba>
		if(colorMap[1] == 1){
 800fac4:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
 800fac8:	2a01      	cmp	r2, #1
 800faca:	f000 8193 	beq.w	800fdf4 <runPOV_step+0x3b0>
		if(colorMap[2] == 1){
 800face:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
 800fad2:	2a01      	cmp	r2, #1
 800fad4:	f000 8189 	beq.w	800fdea <runPOV_step+0x3a6>
		if(colorMap[3] == 1){
 800fad8:	f890 206c 	ldrb.w	r2, [r0, #108]	; 0x6c
 800fadc:	2a01      	cmp	r2, #1
 800fade:	f000 817f 	beq.w	800fde0 <runPOV_step+0x39c>
		if(colorMap[4] == 1){
 800fae2:	f890 206d 	ldrb.w	r2, [r0, #109]	; 0x6d
 800fae6:	2a01      	cmp	r2, #1
 800fae8:	f000 8175 	beq.w	800fdd6 <runPOV_step+0x392>
		if(colorMap[5] == 1){
 800faec:	f890 206e 	ldrb.w	r2, [r0, #110]	; 0x6e
 800faf0:	2a01      	cmp	r2, #1
 800faf2:	f000 816b 	beq.w	800fdcc <runPOV_step+0x388>
		if(colorMap[6] == 1){
 800faf6:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
 800fafa:	2a01      	cmp	r2, #1
 800fafc:	f000 8161 	beq.w	800fdc2 <runPOV_step+0x37e>
		if(colorMap[0] == 1){
 800fb00:	780a      	ldrb	r2, [r1, #0]
 800fb02:	2a01      	cmp	r2, #1
 800fb04:	f000 8158 	beq.w	800fdb8 <runPOV_step+0x374>
		if(colorMap[1] == 1){
 800fb08:	784a      	ldrb	r2, [r1, #1]
 800fb0a:	2a01      	cmp	r2, #1
 800fb0c:	f000 814f 	beq.w	800fdae <runPOV_step+0x36a>
		if(colorMap[2] == 1){
 800fb10:	788a      	ldrb	r2, [r1, #2]
 800fb12:	2a01      	cmp	r2, #1
 800fb14:	f000 8146 	beq.w	800fda4 <runPOV_step+0x360>
		if(colorMap[3] == 1){
 800fb18:	78ca      	ldrb	r2, [r1, #3]
 800fb1a:	2a01      	cmp	r2, #1
 800fb1c:	f000 8197 	beq.w	800fe4e <runPOV_step+0x40a>
		if(colorMap[4] == 1){
 800fb20:	790a      	ldrb	r2, [r1, #4]
 800fb22:	2a01      	cmp	r2, #1
 800fb24:	f000 818e 	beq.w	800fe44 <runPOV_step+0x400>
		if(colorMap[5] == 1){
 800fb28:	794a      	ldrb	r2, [r1, #5]
 800fb2a:	2a01      	cmp	r2, #1
 800fb2c:	f000 8135 	beq.w	800fd9a <runPOV_step+0x356>
		if(colorMap[6] == 1){
 800fb30:	798a      	ldrb	r2, [r1, #6]
 800fb32:	2a01      	cmp	r2, #1
 800fb34:	d103      	bne.n	800fb3e <runPOV_step+0xfa>
			LED_SETTINGS[POV_8_G_REG] &= ~POV_8_G_PIN;
 800fb36:	781a      	ldrb	r2, [r3, #0]
 800fb38:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800fb3c:	701a      	strb	r2, [r3, #0]
		if(colorMap[0] == 1){
 800fb3e:	7802      	ldrb	r2, [r0, #0]
 800fb40:	2a01      	cmp	r2, #1
 800fb42:	f000 8125 	beq.w	800fd90 <runPOV_step+0x34c>
		if(colorMap[1] == 1){
 800fb46:	7842      	ldrb	r2, [r0, #1]
 800fb48:	2a01      	cmp	r2, #1
 800fb4a:	f000 8115 	beq.w	800fd78 <runPOV_step+0x334>
		if(colorMap[2] == 1){
 800fb4e:	7882      	ldrb	r2, [r0, #2]
 800fb50:	2a01      	cmp	r2, #1
 800fb52:	f000 810c 	beq.w	800fd6e <runPOV_step+0x32a>
		if(colorMap[3] == 1){
 800fb56:	78c2      	ldrb	r2, [r0, #3]
 800fb58:	2a01      	cmp	r2, #1
 800fb5a:	f000 8103 	beq.w	800fd64 <runPOV_step+0x320>
		if(colorMap[4] == 1){
 800fb5e:	7902      	ldrb	r2, [r0, #4]
 800fb60:	2a01      	cmp	r2, #1
 800fb62:	f000 80fa 	beq.w	800fd5a <runPOV_step+0x316>
		if(colorMap[5] == 1){
 800fb66:	7942      	ldrb	r2, [r0, #5]
 800fb68:	2a01      	cmp	r2, #1
 800fb6a:	f000 80f1 	beq.w	800fd50 <runPOV_step+0x30c>
		if(colorMap[6] == 1){
 800fb6e:	7982      	ldrb	r2, [r0, #6]
 800fb70:	2a01      	cmp	r2, #1
 800fb72:	f47f af74 	bne.w	800fa5e <runPOV_step+0x1a>
			LED_SETTINGS[POV_8_R_REG] &= ~POV_8_R_PIN;
 800fb76:	781a      	ldrb	r2, [r3, #0]
 800fb78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800fb7c:	701a      	strb	r2, [r3, #0]
}
 800fb7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb82:	4770      	bx	lr
		if( (timerPOVstate%2) == 1 ){
 800fb84:	4a81      	ldr	r2, [pc, #516]	; (800fd8c <runPOV_step+0x348>)
 800fb86:	6812      	ldr	r2, [r2, #0]
 800fb88:	07d4      	lsls	r4, r2, #31
 800fb8a:	d43c      	bmi.n	800fc06 <runPOV_step+0x1c2>
		if(colorMap[0] == 1){
 800fb8c:	7802      	ldrb	r2, [r0, #0]
 800fb8e:	2a01      	cmp	r2, #1
 800fb90:	f000 8176 	beq.w	800fe80 <runPOV_step+0x43c>
		if(colorMap[1] == 1){
 800fb94:	7842      	ldrb	r2, [r0, #1]
 800fb96:	2a01      	cmp	r2, #1
 800fb98:	f000 816d 	beq.w	800fe76 <runPOV_step+0x432>
		if(colorMap[2] == 1){
 800fb9c:	7882      	ldrb	r2, [r0, #2]
 800fb9e:	2a01      	cmp	r2, #1
 800fba0:	f000 8164 	beq.w	800fe6c <runPOV_step+0x428>
		if(colorMap[3] == 1){
 800fba4:	78c2      	ldrb	r2, [r0, #3]
 800fba6:	2a01      	cmp	r2, #1
 800fba8:	f000 815b 	beq.w	800fe62 <runPOV_step+0x41e>
		if(colorMap[4] == 1){
 800fbac:	7902      	ldrb	r2, [r0, #4]
 800fbae:	2a01      	cmp	r2, #1
 800fbb0:	f000 8152 	beq.w	800fe58 <runPOV_step+0x414>
		if(colorMap[5] == 1){
 800fbb4:	7942      	ldrb	r2, [r0, #5]
 800fbb6:	2a01      	cmp	r2, #1
 800fbb8:	f000 818a 	beq.w	800fed0 <runPOV_step+0x48c>
		if(colorMap[6] == 1){
 800fbbc:	7982      	ldrb	r2, [r0, #6]
 800fbbe:	2a01      	cmp	r2, #1
 800fbc0:	f000 8181 	beq.w	800fec6 <runPOV_step+0x482>
		if(colorMap[0] == 1){
 800fbc4:	780a      	ldrb	r2, [r1, #0]
 800fbc6:	2a01      	cmp	r2, #1
 800fbc8:	f000 8178 	beq.w	800febc <runPOV_step+0x478>
		if(colorMap[1] == 1){
 800fbcc:	784a      	ldrb	r2, [r1, #1]
 800fbce:	2a01      	cmp	r2, #1
 800fbd0:	f000 816f 	beq.w	800feb2 <runPOV_step+0x46e>
		if(colorMap[2] == 1){
 800fbd4:	788a      	ldrb	r2, [r1, #2]
 800fbd6:	2a01      	cmp	r2, #1
 800fbd8:	f000 8166 	beq.w	800fea8 <runPOV_step+0x464>
		if(colorMap[3] == 1){
 800fbdc:	78ca      	ldrb	r2, [r1, #3]
 800fbde:	2a01      	cmp	r2, #1
 800fbe0:	f000 815d 	beq.w	800fe9e <runPOV_step+0x45a>
		if(colorMap[4] == 1){
 800fbe4:	790a      	ldrb	r2, [r1, #4]
 800fbe6:	2a01      	cmp	r2, #1
 800fbe8:	f000 8154 	beq.w	800fe94 <runPOV_step+0x450>
		if(colorMap[5] == 1){
 800fbec:	794a      	ldrb	r2, [r1, #5]
 800fbee:	2a01      	cmp	r2, #1
 800fbf0:	f000 814b 	beq.w	800fe8a <runPOV_step+0x446>
		if(colorMap[6] == 1){
 800fbf4:	798a      	ldrb	r2, [r1, #6]
 800fbf6:	2a01      	cmp	r2, #1
 800fbf8:	f47f af31 	bne.w	800fa5e <runPOV_step+0x1a>
			LED_SETTINGS[POV_8_G_REG] &= ~POV_8_G_PIN;
 800fbfc:	781a      	ldrb	r2, [r3, #0]
 800fbfe:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800fc02:	701a      	strb	r2, [r3, #0]
 800fc04:	e72b      	b.n	800fa5e <runPOV_step+0x1a>
		if(colorMap[0] == 1){
 800fc06:	780a      	ldrb	r2, [r1, #0]
 800fc08:	2a01      	cmp	r2, #1
 800fc0a:	f000 817f 	beq.w	800ff0c <runPOV_step+0x4c8>
		if(colorMap[1] == 1){
 800fc0e:	784a      	ldrb	r2, [r1, #1]
 800fc10:	2a01      	cmp	r2, #1
 800fc12:	f000 8176 	beq.w	800ff02 <runPOV_step+0x4be>
		if(colorMap[2] == 1){
 800fc16:	788a      	ldrb	r2, [r1, #2]
 800fc18:	2a01      	cmp	r2, #1
 800fc1a:	f000 816d 	beq.w	800fef8 <runPOV_step+0x4b4>
		if(colorMap[3] == 1){
 800fc1e:	78ca      	ldrb	r2, [r1, #3]
 800fc20:	2a01      	cmp	r2, #1
 800fc22:	f000 8164 	beq.w	800feee <runPOV_step+0x4aa>
		if(colorMap[4] == 1){
 800fc26:	790a      	ldrb	r2, [r1, #4]
 800fc28:	2a01      	cmp	r2, #1
 800fc2a:	f000 815b 	beq.w	800fee4 <runPOV_step+0x4a0>
		if(colorMap[5] == 1){
 800fc2e:	794a      	ldrb	r2, [r1, #5]
 800fc30:	2a01      	cmp	r2, #1
 800fc32:	f000 8152 	beq.w	800feda <runPOV_step+0x496>
		if(colorMap[6] == 1){
 800fc36:	798a      	ldrb	r2, [r1, #6]
 800fc38:	2a01      	cmp	r2, #1
 800fc3a:	d180      	bne.n	800fb3e <runPOV_step+0xfa>
			LED_SETTINGS[POV_1_G_REG] &= ~POV_1_G_PIN;
 800fc3c:	795a      	ldrb	r2, [r3, #5]
 800fc3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800fc42:	715a      	strb	r2, [r3, #5]
 800fc44:	e77b      	b.n	800fb3e <runPOV_step+0xfa>
		if(colorMap[0] == 1){
 800fc46:	780a      	ldrb	r2, [r1, #0]
 800fc48:	2a01      	cmp	r2, #1
 800fc4a:	f000 81b4 	beq.w	800ffb6 <runPOV_step+0x572>
		if(colorMap[1] == 1){
 800fc4e:	784a      	ldrb	r2, [r1, #1]
 800fc50:	2a01      	cmp	r2, #1
 800fc52:	f000 81ab 	beq.w	800ffac <runPOV_step+0x568>
		if(colorMap[2] == 1){
 800fc56:	788a      	ldrb	r2, [r1, #2]
 800fc58:	2a01      	cmp	r2, #1
 800fc5a:	f000 81d4 	beq.w	8010006 <runPOV_step+0x5c2>
		if(colorMap[3] == 1){
 800fc5e:	78ca      	ldrb	r2, [r1, #3]
 800fc60:	2a01      	cmp	r2, #1
 800fc62:	f000 81cb 	beq.w	800fffc <runPOV_step+0x5b8>
		if(colorMap[4] == 1){
 800fc66:	790a      	ldrb	r2, [r1, #4]
 800fc68:	2a01      	cmp	r2, #1
 800fc6a:	f000 81c2 	beq.w	800fff2 <runPOV_step+0x5ae>
		if(colorMap[5] == 1){
 800fc6e:	794a      	ldrb	r2, [r1, #5]
 800fc70:	2a01      	cmp	r2, #1
 800fc72:	f000 81b9 	beq.w	800ffe8 <runPOV_step+0x5a4>
		if(colorMap[6] == 1){
 800fc76:	798a      	ldrb	r2, [r1, #6]
 800fc78:	2a01      	cmp	r2, #1
 800fc7a:	d103      	bne.n	800fc84 <runPOV_step+0x240>
			LED_SETTINGS[POV_1_G_REG] &= ~POV_1_G_PIN;
 800fc7c:	795a      	ldrb	r2, [r3, #5]
 800fc7e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800fc82:	715a      	strb	r2, [r3, #5]
		if(colorMap[0] == 1){
 800fc84:	7802      	ldrb	r2, [r0, #0]
 800fc86:	2a01      	cmp	r2, #1
 800fc88:	f000 81a9 	beq.w	800ffde <runPOV_step+0x59a>
		if(colorMap[1] == 1){
 800fc8c:	7842      	ldrb	r2, [r0, #1]
 800fc8e:	2a01      	cmp	r2, #1
 800fc90:	f000 81a0 	beq.w	800ffd4 <runPOV_step+0x590>
		if(colorMap[2] == 1){
 800fc94:	7882      	ldrb	r2, [r0, #2]
 800fc96:	2a01      	cmp	r2, #1
 800fc98:	f000 8197 	beq.w	800ffca <runPOV_step+0x586>
		if(colorMap[3] == 1){
 800fc9c:	78c2      	ldrb	r2, [r0, #3]
 800fc9e:	2a01      	cmp	r2, #1
 800fca0:	f000 818e 	beq.w	800ffc0 <runPOV_step+0x57c>
		if(colorMap[4] == 1){
 800fca4:	7902      	ldrb	r2, [r0, #4]
 800fca6:	2a01      	cmp	r2, #1
 800fca8:	f000 815d 	beq.w	800ff66 <runPOV_step+0x522>
		if(colorMap[5] == 1){
 800fcac:	7942      	ldrb	r2, [r0, #5]
 800fcae:	2a01      	cmp	r2, #1
 800fcb0:	f000 8154 	beq.w	800ff5c <runPOV_step+0x518>
		if(colorMap[6] == 1){
 800fcb4:	7982      	ldrb	r2, [r0, #6]
 800fcb6:	2a01      	cmp	r2, #1
 800fcb8:	f000 814b 	beq.w	800ff52 <runPOV_step+0x50e>
		if(colorMap[0] == 1){
 800fcbc:	f891 2069 	ldrb.w	r2, [r1, #105]	; 0x69
 800fcc0:	2a01      	cmp	r2, #1
 800fcc2:	f000 8141 	beq.w	800ff48 <runPOV_step+0x504>
		if(colorMap[1] == 1){
 800fcc6:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
 800fcca:	2a01      	cmp	r2, #1
 800fccc:	f000 8137 	beq.w	800ff3e <runPOV_step+0x4fa>
		if(colorMap[2] == 1){
 800fcd0:	f891 206b 	ldrb.w	r2, [r1, #107]	; 0x6b
 800fcd4:	2a01      	cmp	r2, #1
 800fcd6:	f000 812d 	beq.w	800ff34 <runPOV_step+0x4f0>
		if(colorMap[3] == 1){
 800fcda:	f891 206c 	ldrb.w	r2, [r1, #108]	; 0x6c
 800fcde:	2a01      	cmp	r2, #1
 800fce0:	f000 8123 	beq.w	800ff2a <runPOV_step+0x4e6>
		if(colorMap[4] == 1){
 800fce4:	f891 206d 	ldrb.w	r2, [r1, #109]	; 0x6d
 800fce8:	2a01      	cmp	r2, #1
 800fcea:	f000 8119 	beq.w	800ff20 <runPOV_step+0x4dc>
		if(colorMap[5] == 1){
 800fcee:	f891 206e 	ldrb.w	r2, [r1, #110]	; 0x6e
 800fcf2:	2a01      	cmp	r2, #1
 800fcf4:	f000 810f 	beq.w	800ff16 <runPOV_step+0x4d2>
		if(colorMap[6] == 1){
 800fcf8:	f891 206f 	ldrb.w	r2, [r1, #111]	; 0x6f
 800fcfc:	2a01      	cmp	r2, #1
 800fcfe:	d103      	bne.n	800fd08 <runPOV_step+0x2c4>
			LED_SETTINGS[POV_8_G_REG] &= ~POV_8_G_PIN;
 800fd00:	781a      	ldrb	r2, [r3, #0]
 800fd02:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800fd06:	701a      	strb	r2, [r3, #0]
		if(colorMap[0] == 1){
 800fd08:	f890 2069 	ldrb.w	r2, [r0, #105]	; 0x69
 800fd0c:	2a01      	cmp	r2, #1
 800fd0e:	f000 813e 	beq.w	800ff8e <runPOV_step+0x54a>
		if(colorMap[1] == 1){
 800fd12:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
 800fd16:	2a01      	cmp	r2, #1
 800fd18:	f000 8134 	beq.w	800ff84 <runPOV_step+0x540>
		if(colorMap[2] == 1){
 800fd1c:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
 800fd20:	2a01      	cmp	r2, #1
 800fd22:	f000 812a 	beq.w	800ff7a <runPOV_step+0x536>
		if(colorMap[3] == 1){
 800fd26:	f890 206c 	ldrb.w	r2, [r0, #108]	; 0x6c
 800fd2a:	2a01      	cmp	r2, #1
 800fd2c:	f000 8120 	beq.w	800ff70 <runPOV_step+0x52c>
		if(colorMap[4] == 1){
 800fd30:	f890 206d 	ldrb.w	r2, [r0, #109]	; 0x6d
 800fd34:	2a01      	cmp	r2, #1
 800fd36:	f000 8134 	beq.w	800ffa2 <runPOV_step+0x55e>
		if(colorMap[5] == 1){
 800fd3a:	f890 206e 	ldrb.w	r2, [r0, #110]	; 0x6e
 800fd3e:	2a01      	cmp	r2, #1
 800fd40:	f000 812a 	beq.w	800ff98 <runPOV_step+0x554>
		if(colorMap[6] == 1){
 800fd44:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
 800fd48:	2a01      	cmp	r2, #1
 800fd4a:	f47f ae88 	bne.w	800fa5e <runPOV_step+0x1a>
 800fd4e:	e712      	b.n	800fb76 <runPOV_step+0x132>
			LED_SETTINGS[BUTTON_6_R_REG] &= ~BUTTON_6_R_PIN;
 800fd50:	781a      	ldrb	r2, [r3, #0]
 800fd52:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 800fd56:	701a      	strb	r2, [r3, #0]
 800fd58:	e709      	b.n	800fb6e <runPOV_step+0x12a>
			LED_SETTINGS[POV_7_R_REG] &= ~POV_7_R_PIN;
 800fd5a:	781a      	ldrb	r2, [r3, #0]
 800fd5c:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 800fd60:	701a      	strb	r2, [r3, #0]
 800fd62:	e700      	b.n	800fb66 <runPOV_step+0x122>
			LED_SETTINGS[BUTTON_5_R_REG] &= ~BUTTON_5_R_PIN;
 800fd64:	781a      	ldrb	r2, [r3, #0]
 800fd66:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
 800fd6a:	701a      	strb	r2, [r3, #0]
 800fd6c:	e6f7      	b.n	800fb5e <runPOV_step+0x11a>
			LED_SETTINGS[POV_6_R_REG] &= ~POV_6_R_PIN;
 800fd6e:	785a      	ldrb	r2, [r3, #1]
 800fd70:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 800fd74:	705a      	strb	r2, [r3, #1]
 800fd76:	e6ee      	b.n	800fb56 <runPOV_step+0x112>
			LED_SETTINGS[BUTTON_4_R_REG] &= ~BUTTON_4_R_PIN;
 800fd78:	785a      	ldrb	r2, [r3, #1]
 800fd7a:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 800fd7e:	705a      	strb	r2, [r3, #1]
 800fd80:	e6e5      	b.n	800fb4e <runPOV_step+0x10a>
 800fd82:	bf00      	nop
 800fd84:	200050a4 	.word	0x200050a4
 800fd88:	20005398 	.word	0x20005398
 800fd8c:	20005274 	.word	0x20005274
			LED_SETTINGS[POV_5_R_REG] &= ~POV_5_R_PIN;
 800fd90:	785a      	ldrb	r2, [r3, #1]
 800fd92:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
 800fd96:	705a      	strb	r2, [r3, #1]
 800fd98:	e6d5      	b.n	800fb46 <runPOV_step+0x102>
			LED_SETTINGS[BUTTON_6_G_REG] &= ~BUTTON_6_G_PIN;
 800fd9a:	781a      	ldrb	r2, [r3, #0]
 800fd9c:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 800fda0:	701a      	strb	r2, [r3, #0]
 800fda2:	e6c5      	b.n	800fb30 <runPOV_step+0xec>
			LED_SETTINGS[POV_6_G_REG] &= ~POV_6_G_PIN;
 800fda4:	785a      	ldrb	r2, [r3, #1]
 800fda6:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 800fdaa:	705a      	strb	r2, [r3, #1]
 800fdac:	e6b4      	b.n	800fb18 <runPOV_step+0xd4>
			LED_SETTINGS[BUTTON_4_G_REG] &= ~BUTTON_4_G_PIN;
 800fdae:	785a      	ldrb	r2, [r3, #1]
 800fdb0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800fdb4:	705a      	strb	r2, [r3, #1]
 800fdb6:	e6ab      	b.n	800fb10 <runPOV_step+0xcc>
			LED_SETTINGS[POV_5_G_REG] &= ~POV_5_G_PIN;
 800fdb8:	785a      	ldrb	r2, [r3, #1]
 800fdba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800fdbe:	705a      	strb	r2, [r3, #1]
 800fdc0:	e6a2      	b.n	800fb08 <runPOV_step+0xc4>
			LED_SETTINGS[POV_1_R_REG] &= ~POV_1_R_PIN;
 800fdc2:	795a      	ldrb	r2, [r3, #5]
 800fdc4:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
 800fdc8:	715a      	strb	r2, [r3, #5]
 800fdca:	e699      	b.n	800fb00 <runPOV_step+0xbc>
			LED_SETTINGS[BUTTON_1_R_REG] &= ~BUTTON_1_R_PIN;
 800fdcc:	795a      	ldrb	r2, [r3, #5]
 800fdce:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 800fdd2:	715a      	strb	r2, [r3, #5]
 800fdd4:	e68f      	b.n	800faf6 <runPOV_step+0xb2>
			LED_SETTINGS[POV_2_R_REG] &= ~POV_2_R_PIN;
 800fdd6:	795a      	ldrb	r2, [r3, #5]
 800fdd8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 800fddc:	715a      	strb	r2, [r3, #5]
 800fdde:	e685      	b.n	800faec <runPOV_step+0xa8>
			LED_SETTINGS[BUTTON_2_R_REG] &= ~BUTTON_2_R_PIN;
 800fde0:	795a      	ldrb	r2, [r3, #5]
 800fde2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800fde6:	715a      	strb	r2, [r3, #5]
 800fde8:	e67b      	b.n	800fae2 <runPOV_step+0x9e>
			LED_SETTINGS[POV_3_R_REG] &= ~POV_3_R_PIN;
 800fdea:	791a      	ldrb	r2, [r3, #4]
 800fdec:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 800fdf0:	711a      	strb	r2, [r3, #4]
 800fdf2:	e671      	b.n	800fad8 <runPOV_step+0x94>
			LED_SETTINGS[BUTTON_3_R_REG] &= ~BUTTON_3_R_PIN;
 800fdf4:	791a      	ldrb	r2, [r3, #4]
 800fdf6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 800fdfa:	711a      	strb	r2, [r3, #4]
 800fdfc:	e667      	b.n	800face <runPOV_step+0x8a>
			LED_SETTINGS[POV_4_R_REG] &= ~POV_4_R_PIN;
 800fdfe:	791a      	ldrb	r2, [r3, #4]
 800fe00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800fe04:	711a      	strb	r2, [r3, #4]
 800fe06:	e65d      	b.n	800fac4 <runPOV_step+0x80>
			LED_SETTINGS[BUTTON_1_G_REG] &= ~BUTTON_1_G_PIN;
 800fe08:	795a      	ldrb	r2, [r3, #5]
 800fe0a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800fe0e:	715a      	strb	r2, [r3, #5]
 800fe10:	e64b      	b.n	800faaa <runPOV_step+0x66>
			LED_SETTINGS[POV_2_G_REG] &= ~POV_2_G_PIN;
 800fe12:	795a      	ldrb	r2, [r3, #5]
 800fe14:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 800fe18:	715a      	strb	r2, [r3, #5]
 800fe1a:	e641      	b.n	800faa0 <runPOV_step+0x5c>
			LED_SETTINGS[BUTTON_2_G_REG] &= ~BUTTON_2_G_PIN;
 800fe1c:	795a      	ldrb	r2, [r3, #5]
 800fe1e:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800fe22:	715a      	strb	r2, [r3, #5]
 800fe24:	e637      	b.n	800fa96 <runPOV_step+0x52>
			LED_SETTINGS[POV_3_G_REG] &= ~POV_3_G_PIN;
 800fe26:	791a      	ldrb	r2, [r3, #4]
 800fe28:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800fe2c:	711a      	strb	r2, [r3, #4]
 800fe2e:	e62d      	b.n	800fa8c <runPOV_step+0x48>
			LED_SETTINGS[BUTTON_3_G_REG] &= ~BUTTON_3_G_PIN;
 800fe30:	791a      	ldrb	r2, [r3, #4]
 800fe32:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 800fe36:	711a      	strb	r2, [r3, #4]
 800fe38:	e623      	b.n	800fa82 <runPOV_step+0x3e>
			LED_SETTINGS[POV_4_G_REG] &= ~POV_4_G_PIN;
 800fe3a:	791a      	ldrb	r2, [r3, #4]
 800fe3c:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800fe40:	711a      	strb	r2, [r3, #4]
 800fe42:	e619      	b.n	800fa78 <runPOV_step+0x34>
			LED_SETTINGS[POV_7_G_REG] &= ~POV_7_G_PIN;
 800fe44:	781a      	ldrb	r2, [r3, #0]
 800fe46:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800fe4a:	701a      	strb	r2, [r3, #0]
 800fe4c:	e66c      	b.n	800fb28 <runPOV_step+0xe4>
			LED_SETTINGS[BUTTON_5_G_REG] &= ~BUTTON_5_G_PIN;
 800fe4e:	781a      	ldrb	r2, [r3, #0]
 800fe50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800fe54:	701a      	strb	r2, [r3, #0]
 800fe56:	e663      	b.n	800fb20 <runPOV_step+0xdc>
			LED_SETTINGS[POV_2_R_REG] &= ~POV_2_R_PIN;
 800fe58:	795a      	ldrb	r2, [r3, #5]
 800fe5a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 800fe5e:	715a      	strb	r2, [r3, #5]
 800fe60:	e6a8      	b.n	800fbb4 <runPOV_step+0x170>
			LED_SETTINGS[BUTTON_2_R_REG] &= ~BUTTON_2_R_PIN;
 800fe62:	795a      	ldrb	r2, [r3, #5]
 800fe64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800fe68:	715a      	strb	r2, [r3, #5]
 800fe6a:	e69f      	b.n	800fbac <runPOV_step+0x168>
			LED_SETTINGS[POV_3_R_REG] &= ~POV_3_R_PIN;
 800fe6c:	791a      	ldrb	r2, [r3, #4]
 800fe6e:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 800fe72:	711a      	strb	r2, [r3, #4]
 800fe74:	e696      	b.n	800fba4 <runPOV_step+0x160>
			LED_SETTINGS[BUTTON_3_R_REG] &= ~BUTTON_3_R_PIN;
 800fe76:	791a      	ldrb	r2, [r3, #4]
 800fe78:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 800fe7c:	711a      	strb	r2, [r3, #4]
 800fe7e:	e68d      	b.n	800fb9c <runPOV_step+0x158>
			LED_SETTINGS[POV_4_R_REG] &= ~POV_4_R_PIN;
 800fe80:	791a      	ldrb	r2, [r3, #4]
 800fe82:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800fe86:	711a      	strb	r2, [r3, #4]
 800fe88:	e684      	b.n	800fb94 <runPOV_step+0x150>
			LED_SETTINGS[BUTTON_6_G_REG] &= ~BUTTON_6_G_PIN;
 800fe8a:	781a      	ldrb	r2, [r3, #0]
 800fe8c:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 800fe90:	701a      	strb	r2, [r3, #0]
 800fe92:	e6af      	b.n	800fbf4 <runPOV_step+0x1b0>
			LED_SETTINGS[POV_7_G_REG] &= ~POV_7_G_PIN;
 800fe94:	781a      	ldrb	r2, [r3, #0]
 800fe96:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800fe9a:	701a      	strb	r2, [r3, #0]
 800fe9c:	e6a6      	b.n	800fbec <runPOV_step+0x1a8>
			LED_SETTINGS[BUTTON_5_G_REG] &= ~BUTTON_5_G_PIN;
 800fe9e:	781a      	ldrb	r2, [r3, #0]
 800fea0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800fea4:	701a      	strb	r2, [r3, #0]
 800fea6:	e69d      	b.n	800fbe4 <runPOV_step+0x1a0>
			LED_SETTINGS[POV_6_G_REG] &= ~POV_6_G_PIN;
 800fea8:	785a      	ldrb	r2, [r3, #1]
 800feaa:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 800feae:	705a      	strb	r2, [r3, #1]
 800feb0:	e694      	b.n	800fbdc <runPOV_step+0x198>
			LED_SETTINGS[BUTTON_4_G_REG] &= ~BUTTON_4_G_PIN;
 800feb2:	785a      	ldrb	r2, [r3, #1]
 800feb4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800feb8:	705a      	strb	r2, [r3, #1]
 800feba:	e68b      	b.n	800fbd4 <runPOV_step+0x190>
			LED_SETTINGS[POV_5_G_REG] &= ~POV_5_G_PIN;
 800febc:	785a      	ldrb	r2, [r3, #1]
 800febe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800fec2:	705a      	strb	r2, [r3, #1]
 800fec4:	e682      	b.n	800fbcc <runPOV_step+0x188>
			LED_SETTINGS[POV_1_R_REG] &= ~POV_1_R_PIN;
 800fec6:	795a      	ldrb	r2, [r3, #5]
 800fec8:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
 800fecc:	715a      	strb	r2, [r3, #5]
 800fece:	e679      	b.n	800fbc4 <runPOV_step+0x180>
			LED_SETTINGS[BUTTON_1_R_REG] &= ~BUTTON_1_R_PIN;
 800fed0:	795a      	ldrb	r2, [r3, #5]
 800fed2:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 800fed6:	715a      	strb	r2, [r3, #5]
 800fed8:	e670      	b.n	800fbbc <runPOV_step+0x178>
			LED_SETTINGS[BUTTON_1_G_REG] &= ~BUTTON_1_G_PIN;
 800feda:	795a      	ldrb	r2, [r3, #5]
 800fedc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800fee0:	715a      	strb	r2, [r3, #5]
 800fee2:	e6a8      	b.n	800fc36 <runPOV_step+0x1f2>
			LED_SETTINGS[POV_2_G_REG] &= ~POV_2_G_PIN;
 800fee4:	795a      	ldrb	r2, [r3, #5]
 800fee6:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 800feea:	715a      	strb	r2, [r3, #5]
 800feec:	e69f      	b.n	800fc2e <runPOV_step+0x1ea>
			LED_SETTINGS[BUTTON_2_G_REG] &= ~BUTTON_2_G_PIN;
 800feee:	795a      	ldrb	r2, [r3, #5]
 800fef0:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800fef4:	715a      	strb	r2, [r3, #5]
 800fef6:	e696      	b.n	800fc26 <runPOV_step+0x1e2>
			LED_SETTINGS[POV_3_G_REG] &= ~POV_3_G_PIN;
 800fef8:	791a      	ldrb	r2, [r3, #4]
 800fefa:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800fefe:	711a      	strb	r2, [r3, #4]
 800ff00:	e68d      	b.n	800fc1e <runPOV_step+0x1da>
			LED_SETTINGS[BUTTON_3_G_REG] &= ~BUTTON_3_G_PIN;
 800ff02:	791a      	ldrb	r2, [r3, #4]
 800ff04:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 800ff08:	711a      	strb	r2, [r3, #4]
 800ff0a:	e684      	b.n	800fc16 <runPOV_step+0x1d2>
			LED_SETTINGS[POV_4_G_REG] &= ~POV_4_G_PIN;
 800ff0c:	791a      	ldrb	r2, [r3, #4]
 800ff0e:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800ff12:	711a      	strb	r2, [r3, #4]
 800ff14:	e67b      	b.n	800fc0e <runPOV_step+0x1ca>
			LED_SETTINGS[BUTTON_6_G_REG] &= ~BUTTON_6_G_PIN;
 800ff16:	781a      	ldrb	r2, [r3, #0]
 800ff18:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 800ff1c:	701a      	strb	r2, [r3, #0]
 800ff1e:	e6eb      	b.n	800fcf8 <runPOV_step+0x2b4>
			LED_SETTINGS[POV_7_G_REG] &= ~POV_7_G_PIN;
 800ff20:	781a      	ldrb	r2, [r3, #0]
 800ff22:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ff26:	701a      	strb	r2, [r3, #0]
 800ff28:	e6e1      	b.n	800fcee <runPOV_step+0x2aa>
			LED_SETTINGS[BUTTON_5_G_REG] &= ~BUTTON_5_G_PIN;
 800ff2a:	781a      	ldrb	r2, [r3, #0]
 800ff2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ff30:	701a      	strb	r2, [r3, #0]
 800ff32:	e6d7      	b.n	800fce4 <runPOV_step+0x2a0>
			LED_SETTINGS[POV_6_G_REG] &= ~POV_6_G_PIN;
 800ff34:	785a      	ldrb	r2, [r3, #1]
 800ff36:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 800ff3a:	705a      	strb	r2, [r3, #1]
 800ff3c:	e6cd      	b.n	800fcda <runPOV_step+0x296>
			LED_SETTINGS[BUTTON_4_G_REG] &= ~BUTTON_4_G_PIN;
 800ff3e:	785a      	ldrb	r2, [r3, #1]
 800ff40:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ff44:	705a      	strb	r2, [r3, #1]
 800ff46:	e6c3      	b.n	800fcd0 <runPOV_step+0x28c>
			LED_SETTINGS[POV_5_G_REG] &= ~POV_5_G_PIN;
 800ff48:	785a      	ldrb	r2, [r3, #1]
 800ff4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ff4e:	705a      	strb	r2, [r3, #1]
 800ff50:	e6b9      	b.n	800fcc6 <runPOV_step+0x282>
			LED_SETTINGS[POV_1_R_REG] &= ~POV_1_R_PIN;
 800ff52:	795a      	ldrb	r2, [r3, #5]
 800ff54:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
 800ff58:	715a      	strb	r2, [r3, #5]
 800ff5a:	e6af      	b.n	800fcbc <runPOV_step+0x278>
			LED_SETTINGS[BUTTON_1_R_REG] &= ~BUTTON_1_R_PIN;
 800ff5c:	795a      	ldrb	r2, [r3, #5]
 800ff5e:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 800ff62:	715a      	strb	r2, [r3, #5]
 800ff64:	e6a6      	b.n	800fcb4 <runPOV_step+0x270>
			LED_SETTINGS[POV_2_R_REG] &= ~POV_2_R_PIN;
 800ff66:	795a      	ldrb	r2, [r3, #5]
 800ff68:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 800ff6c:	715a      	strb	r2, [r3, #5]
 800ff6e:	e69d      	b.n	800fcac <runPOV_step+0x268>
			LED_SETTINGS[BUTTON_5_R_REG] &= ~BUTTON_5_R_PIN;
 800ff70:	781a      	ldrb	r2, [r3, #0]
 800ff72:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
 800ff76:	701a      	strb	r2, [r3, #0]
 800ff78:	e6da      	b.n	800fd30 <runPOV_step+0x2ec>
			LED_SETTINGS[POV_6_R_REG] &= ~POV_6_R_PIN;
 800ff7a:	785a      	ldrb	r2, [r3, #1]
 800ff7c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 800ff80:	705a      	strb	r2, [r3, #1]
 800ff82:	e6d0      	b.n	800fd26 <runPOV_step+0x2e2>
			LED_SETTINGS[BUTTON_4_R_REG] &= ~BUTTON_4_R_PIN;
 800ff84:	785a      	ldrb	r2, [r3, #1]
 800ff86:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 800ff8a:	705a      	strb	r2, [r3, #1]
 800ff8c:	e6c6      	b.n	800fd1c <runPOV_step+0x2d8>
			LED_SETTINGS[POV_5_R_REG] &= ~POV_5_R_PIN;
 800ff8e:	785a      	ldrb	r2, [r3, #1]
 800ff90:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
 800ff94:	705a      	strb	r2, [r3, #1]
 800ff96:	e6bc      	b.n	800fd12 <runPOV_step+0x2ce>
			LED_SETTINGS[BUTTON_6_R_REG] &= ~BUTTON_6_R_PIN;
 800ff98:	781a      	ldrb	r2, [r3, #0]
 800ff9a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 800ff9e:	701a      	strb	r2, [r3, #0]
 800ffa0:	e6d0      	b.n	800fd44 <runPOV_step+0x300>
			LED_SETTINGS[POV_7_R_REG] &= ~POV_7_R_PIN;
 800ffa2:	781a      	ldrb	r2, [r3, #0]
 800ffa4:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 800ffa8:	701a      	strb	r2, [r3, #0]
 800ffaa:	e6c6      	b.n	800fd3a <runPOV_step+0x2f6>
			LED_SETTINGS[BUTTON_3_G_REG] &= ~BUTTON_3_G_PIN;
 800ffac:	791a      	ldrb	r2, [r3, #4]
 800ffae:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 800ffb2:	711a      	strb	r2, [r3, #4]
 800ffb4:	e64f      	b.n	800fc56 <runPOV_step+0x212>
			LED_SETTINGS[POV_4_G_REG] &= ~POV_4_G_PIN;
 800ffb6:	791a      	ldrb	r2, [r3, #4]
 800ffb8:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800ffbc:	711a      	strb	r2, [r3, #4]
 800ffbe:	e646      	b.n	800fc4e <runPOV_step+0x20a>
			LED_SETTINGS[BUTTON_2_R_REG] &= ~BUTTON_2_R_PIN;
 800ffc0:	795a      	ldrb	r2, [r3, #5]
 800ffc2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ffc6:	715a      	strb	r2, [r3, #5]
 800ffc8:	e66c      	b.n	800fca4 <runPOV_step+0x260>
			LED_SETTINGS[POV_3_R_REG] &= ~POV_3_R_PIN;
 800ffca:	791a      	ldrb	r2, [r3, #4]
 800ffcc:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 800ffd0:	711a      	strb	r2, [r3, #4]
 800ffd2:	e663      	b.n	800fc9c <runPOV_step+0x258>
			LED_SETTINGS[BUTTON_3_R_REG] &= ~BUTTON_3_R_PIN;
 800ffd4:	791a      	ldrb	r2, [r3, #4]
 800ffd6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 800ffda:	711a      	strb	r2, [r3, #4]
 800ffdc:	e65a      	b.n	800fc94 <runPOV_step+0x250>
			LED_SETTINGS[POV_4_R_REG] &= ~POV_4_R_PIN;
 800ffde:	791a      	ldrb	r2, [r3, #4]
 800ffe0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ffe4:	711a      	strb	r2, [r3, #4]
 800ffe6:	e651      	b.n	800fc8c <runPOV_step+0x248>
			LED_SETTINGS[BUTTON_1_G_REG] &= ~BUTTON_1_G_PIN;
 800ffe8:	795a      	ldrb	r2, [r3, #5]
 800ffea:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ffee:	715a      	strb	r2, [r3, #5]
 800fff0:	e641      	b.n	800fc76 <runPOV_step+0x232>
			LED_SETTINGS[POV_2_G_REG] &= ~POV_2_G_PIN;
 800fff2:	795a      	ldrb	r2, [r3, #5]
 800fff4:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 800fff8:	715a      	strb	r2, [r3, #5]
 800fffa:	e638      	b.n	800fc6e <runPOV_step+0x22a>
			LED_SETTINGS[BUTTON_2_G_REG] &= ~BUTTON_2_G_PIN;
 800fffc:	795a      	ldrb	r2, [r3, #5]
 800fffe:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 8010002:	715a      	strb	r2, [r3, #5]
 8010004:	e62f      	b.n	800fc66 <runPOV_step+0x222>
			LED_SETTINGS[POV_3_G_REG] &= ~POV_3_G_PIN;
 8010006:	791a      	ldrb	r2, [r3, #4]
 8010008:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801000c:	711a      	strb	r2, [r3, #4]
 801000e:	e626      	b.n	800fc5e <runPOV_step+0x21a>

08010010 <POV_Update>:
void POV_Update(void){
 8010010:	b570      	push	{r4, r5, r6, lr}
	if(firstRun){
 8010012:	4e55      	ldr	r6, [pc, #340]	; (8010168 <POV_Update+0x158>)
 8010014:	7833      	ldrb	r3, [r6, #0]
 8010016:	b34b      	cbz	r3, 801006c <POV_Update+0x5c>
		if(global_visNum==1){
 8010018:	4b54      	ldr	r3, [pc, #336]	; (801016c <POV_Update+0x15c>)
			runPOV_step(&message_resenv_red[indexTracker+HALF_LENGTH][0], &message_resenv_green[indexTracker][0], indexTracker);
 801001a:	4c55      	ldr	r4, [pc, #340]	; (8010170 <POV_Update+0x160>)
		if(global_visNum==1){
 801001c:	881b      	ldrh	r3, [r3, #0]
		firstRun = 0;
 801001e:	2200      	movs	r2, #0
		if(global_visNum==1){
 8010020:	2b01      	cmp	r3, #1
		firstRun = 0;
 8010022:	7032      	strb	r2, [r6, #0]
		if(global_visNum==1){
 8010024:	d05d      	beq.n	80100e2 <POV_Update+0xd2>
		else if(global_visNum==2){
 8010026:	2b02      	cmp	r3, #2
 8010028:	d06b      	beq.n	8010102 <POV_Update+0xf2>
//}

void transmitToBuffer(void){

	//taskENTER_CRITICAL();
	if (LED_mutex_id != NULL)  {
 801002a:	4d52      	ldr	r5, [pc, #328]	; (8010174 <POV_Update+0x164>)
 801002c:	6828      	ldr	r0, [r5, #0]
 801002e:	b118      	cbz	r0, 8010038 <POV_Update+0x28>
		osMutexWait(LED_mutex_id, osWaitForever);
 8010030:	f04f 31ff 	mov.w	r1, #4294967295
 8010034:	f7fb ffb0 	bl	800bf98 <osMutexWait>
	}

	HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_RESET);
 8010038:	2200      	movs	r2, #0
 801003a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801003e:	484e      	ldr	r0, [pc, #312]	; (8010178 <POV_Update+0x168>)
 8010040:	f7f2 f8a0 	bl	8002184 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, LED_SETTINGS, 6, 1);
 8010044:	2301      	movs	r3, #1
 8010046:	2206      	movs	r2, #6
 8010048:	494c      	ldr	r1, [pc, #304]	; (801017c <POV_Update+0x16c>)
 801004a:	484d      	ldr	r0, [pc, #308]	; (8010180 <POV_Update+0x170>)
 801004c:	f7f5 fcf6 	bl	8005a3c <HAL_SPI_Transmit>

	//HAL_Delay(1);
	HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_SET);
 8010050:	4849      	ldr	r0, [pc, #292]	; (8010178 <POV_Update+0x168>)
 8010052:	2201      	movs	r2, #1
 8010054:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010058:	f7f2 f894 	bl	8002184 <HAL_GPIO_WritePin>

	  if (LED_mutex_id != NULL)  {
 801005c:	6828      	ldr	r0, [r5, #0]
 801005e:	b108      	cbz	r0, 8010064 <POV_Update+0x54>
			osMutexRelease(LED_mutex_id);
 8010060:	f7fb ffc2 	bl	800bfe8 <osMutexRelease>
		indexTracker++;
 8010064:	6823      	ldr	r3, [r4, #0]
 8010066:	3301      	adds	r3, #1
 8010068:	6023      	str	r3, [r4, #0]
 801006a:	bd70      	pop	{r4, r5, r6, pc}
	if(indexTracker >= (HALF_LENGTH-1)){
 801006c:	4c40      	ldr	r4, [pc, #256]	; (8010170 <POV_Update+0x160>)
 801006e:	6823      	ldr	r3, [r4, #0]
 8010070:	2b0e      	cmp	r3, #14
 8010072:	d809      	bhi.n	8010088 <POV_Update+0x78>
		if(global_visNum==1){
 8010074:	4b3d      	ldr	r3, [pc, #244]	; (801016c <POV_Update+0x15c>)
 8010076:	881b      	ldrh	r3, [r3, #0]
 8010078:	2b01      	cmp	r3, #1
 801007a:	d051      	beq.n	8010120 <POV_Update+0x110>
		else if(global_visNum==2){
 801007c:	2b02      	cmp	r3, #2
 801007e:	d1d4      	bne.n	801002a <POV_Update+0x1a>
			runPOV_step(&lidar_red[indexTracker][0], &lidar_green[indexTracker][0], indexTracker);
 8010080:	6825      	ldr	r5, [r4, #0]
 8010082:	4840      	ldr	r0, [pc, #256]	; (8010184 <POV_Update+0x174>)
 8010084:	6823      	ldr	r3, [r4, #0]
 8010086:	e03f      	b.n	8010108 <POV_Update+0xf8>
		HAL_TIM_Base_Stop_IT(&htim3);
 8010088:	483f      	ldr	r0, [pc, #252]	; (8010188 <POV_Update+0x178>)
 801008a:	f7f5 ff4d 	bl	8005f28 <HAL_TIM_Base_Stop_IT>
		if(global_visNum==1){
 801008e:	4b37      	ldr	r3, [pc, #220]	; (801016c <POV_Update+0x15c>)
 8010090:	881b      	ldrh	r3, [r3, #0]
 8010092:	2b01      	cmp	r3, #1
 8010094:	d057      	beq.n	8010146 <POV_Update+0x136>
		else if(global_visNum==2){
 8010096:	2b02      	cmp	r3, #2
 8010098:	d046      	beq.n	8010128 <POV_Update+0x118>
	if (LED_mutex_id != NULL)  {
 801009a:	4d36      	ldr	r5, [pc, #216]	; (8010174 <POV_Update+0x164>)
 801009c:	6828      	ldr	r0, [r5, #0]
 801009e:	b118      	cbz	r0, 80100a8 <POV_Update+0x98>
		osMutexWait(LED_mutex_id, osWaitForever);
 80100a0:	f04f 31ff 	mov.w	r1, #4294967295
 80100a4:	f7fb ff78 	bl	800bf98 <osMutexWait>
	HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_RESET);
 80100a8:	2200      	movs	r2, #0
 80100aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80100ae:	4832      	ldr	r0, [pc, #200]	; (8010178 <POV_Update+0x168>)
 80100b0:	f7f2 f868 	bl	8002184 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, LED_SETTINGS, 6, 1);
 80100b4:	2301      	movs	r3, #1
 80100b6:	2206      	movs	r2, #6
 80100b8:	4930      	ldr	r1, [pc, #192]	; (801017c <POV_Update+0x16c>)
 80100ba:	4831      	ldr	r0, [pc, #196]	; (8010180 <POV_Update+0x170>)
 80100bc:	f7f5 fcbe 	bl	8005a3c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_SET);
 80100c0:	482d      	ldr	r0, [pc, #180]	; (8010178 <POV_Update+0x168>)
 80100c2:	2201      	movs	r2, #1
 80100c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80100c8:	f7f2 f85c 	bl	8002184 <HAL_GPIO_WritePin>
	  if (LED_mutex_id != NULL)  {
 80100cc:	6828      	ldr	r0, [r5, #0]
 80100ce:	b108      	cbz	r0, 80100d4 <POV_Update+0xc4>
			osMutexRelease(LED_mutex_id);
 80100d0:	f7fb ff8a 	bl	800bfe8 <osMutexRelease>
		POV_timerActive = 0;
 80100d4:	492d      	ldr	r1, [pc, #180]	; (801018c <POV_Update+0x17c>)
		indexTracker = 0;
 80100d6:	2300      	movs	r3, #0
		firstRun = 1;
 80100d8:	2201      	movs	r2, #1
		indexTracker = 0;
 80100da:	6023      	str	r3, [r4, #0]
		POV_timerActive = 0;
 80100dc:	700b      	strb	r3, [r1, #0]
		firstRun = 1;
 80100de:	7032      	strb	r2, [r6, #0]
 80100e0:	bd70      	pop	{r4, r5, r6, pc}
			runPOV_step(&message_resenv_red[indexTracker+HALF_LENGTH][0], &message_resenv_green[indexTracker][0], indexTracker);
 80100e2:	6823      	ldr	r3, [r4, #0]
 80100e4:	482a      	ldr	r0, [pc, #168]	; (8010190 <POV_Update+0x180>)
 80100e6:	6825      	ldr	r5, [r4, #0]
			runPOV_step(&message_resenv_red[indexTracker+HALF_LENGTH][0], &message_resenv_green[indexTracker][0], indexTracker);
 80100e8:	6822      	ldr	r2, [r4, #0]
 80100ea:	492a      	ldr	r1, [pc, #168]	; (8010194 <POV_Update+0x184>)
 80100ec:	3310      	adds	r3, #16
 80100ee:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80100f2:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 80100f6:	4418      	add	r0, r3
 80100f8:	4429      	add	r1, r5
 80100fa:	b2d2      	uxtb	r2, r2
 80100fc:	f7ff fca2 	bl	800fa44 <runPOV_step>
 8010100:	e793      	b.n	801002a <POV_Update+0x1a>
			runPOV_step(&lidar_red[indexTracker][0], &lidar_green[indexTracker][0], indexTracker);
 8010102:	6825      	ldr	r5, [r4, #0]
 8010104:	481f      	ldr	r0, [pc, #124]	; (8010184 <POV_Update+0x174>)
 8010106:	6823      	ldr	r3, [r4, #0]
			runPOV_step(&lidar_red[indexTracker][0], &lidar_green[indexTracker][0], indexTracker);
 8010108:	6822      	ldr	r2, [r4, #0]
 801010a:	4923      	ldr	r1, [pc, #140]	; (8010198 <POV_Update+0x188>)
 801010c:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 8010110:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8010114:	4428      	add	r0, r5
 8010116:	4419      	add	r1, r3
 8010118:	b2d2      	uxtb	r2, r2
 801011a:	f7ff fc93 	bl	800fa44 <runPOV_step>
 801011e:	e784      	b.n	801002a <POV_Update+0x1a>
			runPOV_step(&message_resenv_red[indexTracker+HALF_LENGTH][0], &message_resenv_green[indexTracker][0], indexTracker);
 8010120:	6823      	ldr	r3, [r4, #0]
 8010122:	481b      	ldr	r0, [pc, #108]	; (8010190 <POV_Update+0x180>)
 8010124:	6825      	ldr	r5, [r4, #0]
 8010126:	e7df      	b.n	80100e8 <POV_Update+0xd8>
			runPOV_step(&lidar_red[indexTracker][0], &lidar_green[indexTracker][0], indexTracker);
 8010128:	6825      	ldr	r5, [r4, #0]
 801012a:	6823      	ldr	r3, [r4, #0]
 801012c:	4815      	ldr	r0, [pc, #84]	; (8010184 <POV_Update+0x174>)
 801012e:	6822      	ldr	r2, [r4, #0]
 8010130:	4919      	ldr	r1, [pc, #100]	; (8010198 <POV_Update+0x188>)
 8010132:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 8010136:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801013a:	4428      	add	r0, r5
 801013c:	4419      	add	r1, r3
 801013e:	b2d2      	uxtb	r2, r2
 8010140:	f7ff fc80 	bl	800fa44 <runPOV_step>
 8010144:	e7a9      	b.n	801009a <POV_Update+0x8a>
			runPOV_step(&message_resenv_red[indexTracker+HALF_LENGTH][0], &message_resenv_green[indexTracker][0], indexTracker);
 8010146:	6823      	ldr	r3, [r4, #0]
 8010148:	6825      	ldr	r5, [r4, #0]
 801014a:	4811      	ldr	r0, [pc, #68]	; (8010190 <POV_Update+0x180>)
 801014c:	6822      	ldr	r2, [r4, #0]
 801014e:	4911      	ldr	r1, [pc, #68]	; (8010194 <POV_Update+0x184>)
 8010150:	3310      	adds	r3, #16
 8010152:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8010156:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 801015a:	4418      	add	r0, r3
 801015c:	4429      	add	r1, r5
 801015e:	b2d2      	uxtb	r2, r2
 8010160:	f7ff fc70 	bl	800fa44 <runPOV_step>
 8010164:	e799      	b.n	801009a <POV_Update+0x8a>
 8010166:	bf00      	nop
 8010168:	20000032 	.word	0x20000032
 801016c:	200050a4 	.word	0x200050a4
 8010170:	200050a8 	.word	0x200050a8
 8010174:	20005388 	.word	0x20005388
 8010178:	48001000 	.word	0x48001000
 801017c:	20005398 	.word	0x20005398
 8010180:	20005a40 	.word	0x20005a40
 8010184:	20005190 	.word	0x20005190
 8010188:	20005b64 	.word	0x20005b64
 801018c:	200050a2 	.word	0x200050a2
 8010190:	08014f84 	.word	0x08014f84
 8010194:	08014ea4 	.word	0x08014ea4
 8010198:	200050b0 	.word	0x200050b0
 801019c:	00000000 	.word	0x00000000

080101a0 <POV_handler>:
void POV_handler(uint64_t RPR){
 80101a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	switchPOV++;
 80101a2:	4c39      	ldr	r4, [pc, #228]	; (8010288 <POV_handler+0xe8>)
	if( (RPR) <= ((uint32_t) TICK_POV_THRESH)){
 80101a4:	a734      	add	r7, pc, #208	; (adr r7, 8010278 <POV_handler+0xd8>)
 80101a6:	e9d7 6700 	ldrd	r6, r7, [r7]
	switchPOV++;
 80101aa:	6823      	ldr	r3, [r4, #0]
	if( (RPR) <= ((uint32_t) TICK_POV_THRESH)){
 80101ac:	428f      	cmp	r7, r1
	switchPOV++;
 80101ae:	f103 0301 	add.w	r3, r3, #1
	if( (RPR) <= ((uint32_t) TICK_POV_THRESH)){
 80101b2:	bf08      	it	eq
 80101b4:	4286      	cmpeq	r6, r0
void POV_handler(uint64_t RPR){
 80101b6:	b083      	sub	sp, #12
	switchPOV++;
 80101b8:	6023      	str	r3, [r4, #0]
	if( (RPR) <= ((uint32_t) TICK_POV_THRESH)){
 80101ba:	d201      	bcs.n	80101c0 <POV_handler+0x20>
}
 80101bc:	b003      	add	sp, #12
 80101be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		usTickTracker = (uint32_t) RPR;
 80101c0:	4b32      	ldr	r3, [pc, #200]	; (801028c <POV_handler+0xec>)
 80101c2:	6018      	str	r0, [r3, #0]
		visualizationRun(2, usTickTracker);
 80101c4:	681e      	ldr	r6, [r3, #0]
		lidarPOV_Map = get_lidar_POV_map();
 80101c6:	f000 f9bf 	bl	8010548 <get_lidar_POV_map>
 80101ca:	4b31      	ldr	r3, [pc, #196]	; (8010290 <POV_handler+0xf0>)
 80101cc:	4605      	mov	r5, r0
	memset(lidar_green, 0, sizeof(lidar_green[0][0]) * MESSAGE_LENGTH * MESSAGE_WIDTH);
 80101ce:	22e0      	movs	r2, #224	; 0xe0
 80101d0:	2100      	movs	r1, #0
 80101d2:	4830      	ldr	r0, [pc, #192]	; (8010294 <POV_handler+0xf4>)
		lidarPOV_Map = get_lidar_POV_map();
 80101d4:	601d      	str	r5, [r3, #0]
	memset(lidar_green, 0, sizeof(lidar_green[0][0]) * MESSAGE_LENGTH * MESSAGE_WIDTH);
 80101d6:	f003 fe84 	bl	8013ee2 <memset>
	memset(lidar_red, 0, sizeof(lidar_green[0][0]) * MESSAGE_LENGTH * MESSAGE_WIDTH);
 80101da:	22e0      	movs	r2, #224	; 0xe0
 80101dc:	2100      	movs	r1, #0
 80101de:	482e      	ldr	r0, [pc, #184]	; (8010298 <POV_handler+0xf8>)
 80101e0:	f003 fe7f 	bl	8013ee2 <memset>
	if(lidarPOV_Map >= (MESSAGE_LENGTH) ){
 80101e4:	2d1f      	cmp	r5, #31
 80101e6:	d83e      	bhi.n	8010266 <POV_handler+0xc6>
		setMatrix(lidar_green, sizeof(lidar_green[0][0]) * (lidarPOV_Map+1) * MESSAGE_WIDTH, 0, 0);
 80101e8:	1c6a      	adds	r2, r5, #1
		memset(matrix, 1, size);
 80101ea:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80101ee:	2101      	movs	r1, #1
 80101f0:	4828      	ldr	r0, [pc, #160]	; (8010294 <POV_handler+0xf4>)
 80101f2:	f003 fe76 	bl	8013ee2 <memset>
		global_visNum = 2;
 80101f6:	4b29      	ldr	r3, [pc, #164]	; (801029c <POV_handler+0xfc>)
 80101f8:	2202      	movs	r2, #2
 80101fa:	801a      	strh	r2, [r3, #0]
	volatile uint32_t uS_10_needed =  round( ((cyclePerHalfTurn)/( (double) TICK_POV_MICROSEC_10_DIVIDER)) / ((double) HALF_LENGTH));
 80101fc:	4630      	mov	r0, r6
 80101fe:	f7f0 f941 	bl	8000484 <__aeabi_ui2d>
 8010202:	a31f      	add	r3, pc, #124	; (adr r3, 8010280 <POV_handler+0xe0>)
 8010204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010208:	f7f0 f9b2 	bl	8000570 <__aeabi_dmul>
 801020c:	ec41 0b10 	vmov	d0, r0, r1
 8010210:	f003 fe84 	bl	8013f1c <round>
 8010214:	ec51 0b10 	vmov	r0, r1, d0
 8010218:	f7f0 fc82 	bl	8000b20 <__aeabi_d2uiz>
 801021c:	9001      	str	r0, [sp, #4]
	if(uS_10_needed == 0){
 801021e:	9b01      	ldr	r3, [sp, #4]
 8010220:	b1f3      	cbz	r3, 8010260 <POV_handler+0xc0>
	else if(uS_10_needed >= 65535){
 8010222:	9a01      	ldr	r2, [sp, #4]
 8010224:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8010228:	429a      	cmp	r2, r3
		uS_10_needed = 65535;
 801022a:	bf84      	itt	hi
 801022c:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 8010230:	9301      	strhi	r3, [sp, #4]
	if(POV_timerActive == 0){
 8010232:	4b1b      	ldr	r3, [pc, #108]	; (80102a0 <POV_handler+0x100>)
 8010234:	781a      	ldrb	r2, [r3, #0]
 8010236:	2a00      	cmp	r2, #0
 8010238:	d1c0      	bne.n	80101bc <POV_handler+0x1c>
		POV_timerActive = 1;
 801023a:	2201      	movs	r2, #1
 801023c:	701a      	strb	r2, [r3, #0]
		timerPOVstate = switchPOV;
 801023e:	4b19      	ldr	r3, [pc, #100]	; (80102a4 <POV_handler+0x104>)
 8010240:	6822      	ldr	r2, [r4, #0]
 8010242:	601a      	str	r2, [r3, #0]
		htim3.Instance->ARR = (uint16_t) uS_10_needed;
 8010244:	4c18      	ldr	r4, [pc, #96]	; (80102a8 <POV_handler+0x108>)
 8010246:	9b01      	ldr	r3, [sp, #4]
 8010248:	6822      	ldr	r2, [r4, #0]
 801024a:	b29b      	uxth	r3, r3
 801024c:	62d3      	str	r3, [r2, #44]	; 0x2c
		POV_Update();
 801024e:	f7ff fedf 	bl	8010010 <POV_Update>
		disable_buttons();
 8010252:	f000 fecd 	bl	8010ff0 <disable_buttons>
		HAL_TIM_Base_Start_IT(&htim3);
 8010256:	4620      	mov	r0, r4
 8010258:	f7f5 fe4e 	bl	8005ef8 <HAL_TIM_Base_Start_IT>
}
 801025c:	b003      	add	sp, #12
 801025e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uS_10_needed = 1;
 8010260:	2301      	movs	r3, #1
 8010262:	9301      	str	r3, [sp, #4]
 8010264:	e7e5      	b.n	8010232 <POV_handler+0x92>
		setMatrix(lidar_red, sizeof(lidar_green[0][0]) * (lidarPOV_Map - (MESSAGE_LENGTH-1)) * MESSAGE_WIDTH, 0, 0);
 8010266:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
		memset(matrix, 1, size);
 801026a:	f1a5 02d9 	sub.w	r2, r5, #217	; 0xd9
 801026e:	2101      	movs	r1, #1
 8010270:	4809      	ldr	r0, [pc, #36]	; (8010298 <POV_handler+0xf8>)
 8010272:	f003 fe36 	bl	8013ee2 <memset>
 8010276:	e7be      	b.n	80101f6 <POV_handler+0x56>
 8010278:	01c9c380 	.word	0x01c9c380
 801027c:	00000000 	.word	0x00000000
 8010280:	47ae147b 	.word	0x47ae147b
 8010284:	3f147ae1 	.word	0x3f147ae1
 8010288:	20005270 	.word	0x20005270
 801028c:	20005278 	.word	0x20005278
 8010290:	200050ac 	.word	0x200050ac
 8010294:	200050b0 	.word	0x200050b0
 8010298:	20005190 	.word	0x20005190
 801029c:	200050a4 	.word	0x200050a4
 80102a0:	200050a2 	.word	0x200050a2
 80102a4:	20005274 	.word	0x20005274
 80102a8:	20005b64 	.word	0x20005b64

080102ac <transmitToBuffer>:
void transmitToBuffer(void){
 80102ac:	b510      	push	{r4, lr}
	if (LED_mutex_id != NULL)  {
 80102ae:	4c10      	ldr	r4, [pc, #64]	; (80102f0 <transmitToBuffer+0x44>)
 80102b0:	6820      	ldr	r0, [r4, #0]
 80102b2:	b118      	cbz	r0, 80102bc <transmitToBuffer+0x10>
		osMutexWait(LED_mutex_id, osWaitForever);
 80102b4:	f04f 31ff 	mov.w	r1, #4294967295
 80102b8:	f7fb fe6e 	bl	800bf98 <osMutexWait>
	HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_RESET);
 80102bc:	2200      	movs	r2, #0
 80102be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80102c2:	480c      	ldr	r0, [pc, #48]	; (80102f4 <transmitToBuffer+0x48>)
 80102c4:	f7f1 ff5e 	bl	8002184 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, LED_SETTINGS, 6, 1);
 80102c8:	2301      	movs	r3, #1
 80102ca:	2206      	movs	r2, #6
 80102cc:	490a      	ldr	r1, [pc, #40]	; (80102f8 <transmitToBuffer+0x4c>)
 80102ce:	480b      	ldr	r0, [pc, #44]	; (80102fc <transmitToBuffer+0x50>)
 80102d0:	f7f5 fbb4 	bl	8005a3c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_SET);
 80102d4:	4807      	ldr	r0, [pc, #28]	; (80102f4 <transmitToBuffer+0x48>)
 80102d6:	2201      	movs	r2, #1
 80102d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80102dc:	f7f1 ff52 	bl	8002184 <HAL_GPIO_WritePin>
	  if (LED_mutex_id != NULL)  {
 80102e0:	6820      	ldr	r0, [r4, #0]
 80102e2:	b118      	cbz	r0, 80102ec <transmitToBuffer+0x40>


	//HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_SET);
	//taskEXIT_CRITICAL();
	//HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_SET);
}
 80102e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			osMutexRelease(LED_mutex_id);
 80102e8:	f7fb be7e 	b.w	800bfe8 <osMutexRelease>
 80102ec:	bd10      	pop	{r4, pc}
 80102ee:	bf00      	nop
 80102f0:	20005388 	.word	0x20005388
 80102f4:	48001000 	.word	0x48001000
 80102f8:	20005398 	.word	0x20005398
 80102fc:	20005a40 	.word	0x20005a40

08010300 <POV_LEDs>:
		{MAP_POV_1_R},
		{MAP_POV_1_G}
};


void POV_LEDs(uint16_t led_map){
 8010300:	b510      	push	{r4, lr}
	if( (led_map & MAP_POV_1_R) == MAP_POV_1_R){
		LED_SETTINGS[POV_1_R_REG] &= ~POV_1_R_PIN;
 8010302:	4b50      	ldr	r3, [pc, #320]	; (8010444 <POV_LEDs+0x144>)
 8010304:	795a      	ldrb	r2, [r3, #5]
	if( (led_map & MAP_POV_1_R) == MAP_POV_1_R){
 8010306:	07c4      	lsls	r4, r0, #31
		LED_SETTINGS[POV_1_R_REG] &= ~POV_1_R_PIN;
 8010308:	bf4c      	ite	mi
 801030a:	f002 02bf 	andmi.w	r2, r2, #191	; 0xbf
	}
	else{
		LED_SETTINGS[POV_1_R_REG] |= POV_1_R_PIN;
 801030e:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8010312:	715a      	strb	r2, [r3, #5]
	}

	if( (led_map & MAP_POV_2_R) == MAP_POV_2_R){
		LED_SETTINGS[POV_2_R_REG] &= ~POV_2_R_PIN;
 8010314:	795a      	ldrb	r2, [r3, #5]
	if( (led_map & MAP_POV_2_R) == MAP_POV_2_R){
 8010316:	0781      	lsls	r1, r0, #30
		LED_SETTINGS[POV_2_R_REG] &= ~POV_2_R_PIN;
 8010318:	bf4c      	ite	mi
 801031a:	f002 02fb 	andmi.w	r2, r2, #251	; 0xfb
	}
	else{
			LED_SETTINGS[POV_2_R_REG] |= POV_2_R_PIN;
 801031e:	f042 0204 	orrpl.w	r2, r2, #4
 8010322:	715a      	strb	r2, [r3, #5]
		}

	if( (led_map & MAP_POV_3_R) == MAP_POV_3_R){
		LED_SETTINGS[POV_3_R_REG] &= ~POV_3_R_PIN;
 8010324:	791a      	ldrb	r2, [r3, #4]
	if( (led_map & MAP_POV_3_R) == MAP_POV_3_R){
 8010326:	0744      	lsls	r4, r0, #29
		LED_SETTINGS[POV_3_R_REG] &= ~POV_3_R_PIN;
 8010328:	bf4c      	ite	mi
 801032a:	f002 02ef 	andmi.w	r2, r2, #239	; 0xef
		}
	else{
			LED_SETTINGS[POV_3_R_REG] |= POV_3_R_PIN;
 801032e:	f042 0210 	orrpl.w	r2, r2, #16
 8010332:	711a      	strb	r2, [r3, #4]
		}

	if( (led_map & MAP_POV_4_R) == MAP_POV_4_R){
		LED_SETTINGS[POV_4_R_REG] &= ~POV_4_R_PIN;
 8010334:	791a      	ldrb	r2, [r3, #4]
	if( (led_map & MAP_POV_4_R) == MAP_POV_4_R){
 8010336:	0701      	lsls	r1, r0, #28
		LED_SETTINGS[POV_4_R_REG] &= ~POV_4_R_PIN;
 8010338:	bf4c      	ite	mi
 801033a:	f002 02fe 	andmi.w	r2, r2, #254	; 0xfe
		}
	else{
			LED_SETTINGS[POV_4_R_REG] |= POV_4_R_PIN;
 801033e:	f042 0201 	orrpl.w	r2, r2, #1
 8010342:	711a      	strb	r2, [r3, #4]
		}

	if( (led_map & MAP_POV_5_R) == MAP_POV_5_R){
		LED_SETTINGS[POV_5_R_REG] &= ~POV_5_R_PIN;
 8010344:	785a      	ldrb	r2, [r3, #1]
	if( (led_map & MAP_POV_5_R) == MAP_POV_5_R){
 8010346:	06c4      	lsls	r4, r0, #27
		LED_SETTINGS[POV_5_R_REG] &= ~POV_5_R_PIN;
 8010348:	bf4c      	ite	mi
 801034a:	f002 02bf 	andmi.w	r2, r2, #191	; 0xbf
		}
	else{
			LED_SETTINGS[POV_5_R_REG] |= POV_5_R_PIN;
 801034e:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8010352:	705a      	strb	r2, [r3, #1]
		}

	if( (led_map & MAP_POV_6_R) == MAP_POV_6_R){
		LED_SETTINGS[POV_6_R_REG] &= ~POV_6_R_PIN;
 8010354:	785a      	ldrb	r2, [r3, #1]
	if( (led_map & MAP_POV_6_R) == MAP_POV_6_R){
 8010356:	0681      	lsls	r1, r0, #26
		LED_SETTINGS[POV_6_R_REG] &= ~POV_6_R_PIN;
 8010358:	bf4c      	ite	mi
 801035a:	f002 02fb 	andmi.w	r2, r2, #251	; 0xfb
		}
	else{
			LED_SETTINGS[POV_6_R_REG] |= POV_6_R_PIN;
 801035e:	f042 0204 	orrpl.w	r2, r2, #4
 8010362:	705a      	strb	r2, [r3, #1]
		}

	if( (led_map & MAP_POV_7_R) == MAP_POV_7_R){
		LED_SETTINGS[POV_7_R_REG] &= ~POV_7_R_PIN;
 8010364:	781a      	ldrb	r2, [r3, #0]
	if( (led_map & MAP_POV_7_R) == MAP_POV_7_R){
 8010366:	0644      	lsls	r4, r0, #25
		LED_SETTINGS[POV_7_R_REG] &= ~POV_7_R_PIN;
 8010368:	bf4c      	ite	mi
 801036a:	f002 02ef 	andmi.w	r2, r2, #239	; 0xef
		}
	else{
			LED_SETTINGS[POV_7_R_REG] |= POV_7_R_PIN;
 801036e:	f042 0210 	orrpl.w	r2, r2, #16
 8010372:	701a      	strb	r2, [r3, #0]
		}

	if( (led_map & MAP_POV_8_R) == MAP_POV_8_R){
		LED_SETTINGS[POV_8_R_REG] &= ~POV_8_R_PIN;
 8010374:	781a      	ldrb	r2, [r3, #0]
	if( (led_map & MAP_POV_8_R) == MAP_POV_8_R){
 8010376:	0601      	lsls	r1, r0, #24
		LED_SETTINGS[POV_8_R_REG] &= ~POV_8_R_PIN;
 8010378:	bf4c      	ite	mi
 801037a:	f002 02fe 	andmi.w	r2, r2, #254	; 0xfe
		}
	else{
			LED_SETTINGS[POV_8_R_REG] |= POV_8_R_PIN;
 801037e:	f042 0201 	orrpl.w	r2, r2, #1
 8010382:	701a      	strb	r2, [r3, #0]
		}

	if( (led_map & MAP_POV_1_G) == MAP_POV_1_G){
			LED_SETTINGS[POV_1_G_REG] &= ~POV_1_G_PIN;
 8010384:	795a      	ldrb	r2, [r3, #5]
	if( (led_map & MAP_POV_1_G) == MAP_POV_1_G){
 8010386:	05c4      	lsls	r4, r0, #23
			LED_SETTINGS[POV_1_G_REG] &= ~POV_1_G_PIN;
 8010388:	bf4c      	ite	mi
 801038a:	f002 027f 	andmi.w	r2, r2, #127	; 0x7f
		}
		else{
			LED_SETTINGS[POV_1_G_REG] |= POV_1_G_PIN;
 801038e:	f042 0280 	orrpl.w	r2, r2, #128	; 0x80
 8010392:	715a      	strb	r2, [r3, #5]
		}

		if( (led_map & MAP_POV_2_G) == MAP_POV_2_G){
			LED_SETTINGS[POV_2_G_REG] &= ~POV_2_G_PIN;
 8010394:	795a      	ldrb	r2, [r3, #5]
		if( (led_map & MAP_POV_2_G) == MAP_POV_2_G){
 8010396:	0581      	lsls	r1, r0, #22
			LED_SETTINGS[POV_2_G_REG] &= ~POV_2_G_PIN;
 8010398:	bf4c      	ite	mi
 801039a:	f002 02f7 	andmi.w	r2, r2, #247	; 0xf7
		}
		else{
				LED_SETTINGS[POV_2_G_REG] |= POV_2_G_PIN;
 801039e:	f042 0208 	orrpl.w	r2, r2, #8
 80103a2:	715a      	strb	r2, [r3, #5]
			}

		if( (led_map & MAP_POV_3_G) == MAP_POV_3_G){
			LED_SETTINGS[POV_3_G_REG] &= ~POV_3_G_PIN;
 80103a4:	791a      	ldrb	r2, [r3, #4]
		if( (led_map & MAP_POV_3_G) == MAP_POV_3_G){
 80103a6:	0544      	lsls	r4, r0, #21
			LED_SETTINGS[POV_3_G_REG] &= ~POV_3_G_PIN;
 80103a8:	bf4c      	ite	mi
 80103aa:	f002 02df 	andmi.w	r2, r2, #223	; 0xdf
			}
		else{
				LED_SETTINGS[POV_3_G_REG] |= POV_3_G_PIN;
 80103ae:	f042 0220 	orrpl.w	r2, r2, #32
 80103b2:	711a      	strb	r2, [r3, #4]
			}

		if( (led_map & MAP_POV_4_G) == MAP_POV_4_G){
			LED_SETTINGS[POV_4_G_REG] &= ~POV_4_G_PIN;
 80103b4:	791a      	ldrb	r2, [r3, #4]
		if( (led_map & MAP_POV_4_G) == MAP_POV_4_G){
 80103b6:	0501      	lsls	r1, r0, #20
			LED_SETTINGS[POV_4_G_REG] &= ~POV_4_G_PIN;
 80103b8:	bf4c      	ite	mi
 80103ba:	f002 02fd 	andmi.w	r2, r2, #253	; 0xfd
			}
		else{
				LED_SETTINGS[POV_4_G_REG] |= POV_4_G_PIN;
 80103be:	f042 0202 	orrpl.w	r2, r2, #2
 80103c2:	711a      	strb	r2, [r3, #4]
			}

		if( (led_map & MAP_POV_5_G) == MAP_POV_5_G){
			LED_SETTINGS[POV_5_G_REG] &= ~POV_5_G_PIN;
 80103c4:	785a      	ldrb	r2, [r3, #1]
		if( (led_map & MAP_POV_5_G) == MAP_POV_5_G){
 80103c6:	04c4      	lsls	r4, r0, #19
			LED_SETTINGS[POV_5_G_REG] &= ~POV_5_G_PIN;
 80103c8:	bf4c      	ite	mi
 80103ca:	f002 027f 	andmi.w	r2, r2, #127	; 0x7f
			}
		else{
				LED_SETTINGS[POV_5_G_REG] |= POV_5_G_PIN;
 80103ce:	f042 0280 	orrpl.w	r2, r2, #128	; 0x80
 80103d2:	705a      	strb	r2, [r3, #1]
			}

		if( (led_map & MAP_POV_6_G) == MAP_POV_6_G){
			LED_SETTINGS[POV_6_G_REG] &= ~POV_6_G_PIN;
 80103d4:	785a      	ldrb	r2, [r3, #1]
		if( (led_map & MAP_POV_6_G) == MAP_POV_6_G){
 80103d6:	0481      	lsls	r1, r0, #18
			LED_SETTINGS[POV_6_G_REG] &= ~POV_6_G_PIN;
 80103d8:	bf4c      	ite	mi
 80103da:	f002 02f7 	andmi.w	r2, r2, #247	; 0xf7
			}
		else{
				LED_SETTINGS[POV_6_G_REG] |= POV_6_G_PIN;
 80103de:	f042 0208 	orrpl.w	r2, r2, #8
 80103e2:	705a      	strb	r2, [r3, #1]
			}

		if( (led_map & MAP_POV_7_G) == MAP_POV_7_G){
			LED_SETTINGS[POV_7_G_REG] &= ~POV_7_G_PIN;
 80103e4:	781a      	ldrb	r2, [r3, #0]
		if( (led_map & MAP_POV_7_G) == MAP_POV_7_G){
 80103e6:	0444      	lsls	r4, r0, #17
			LED_SETTINGS[POV_7_G_REG] &= ~POV_7_G_PIN;
 80103e8:	bf4c      	ite	mi
 80103ea:	f002 02df 	andmi.w	r2, r2, #223	; 0xdf
			}
		else{
				LED_SETTINGS[POV_7_G_REG] |= POV_7_G_PIN;
 80103ee:	f042 0220 	orrpl.w	r2, r2, #32
 80103f2:	701a      	strb	r2, [r3, #0]
			}

		if( (led_map & MAP_POV_8_G) == MAP_POV_8_G){
			LED_SETTINGS[POV_8_G_REG] &= ~POV_8_G_PIN;
 80103f4:	781a      	ldrb	r2, [r3, #0]
	if (LED_mutex_id != NULL)  {
 80103f6:	4c14      	ldr	r4, [pc, #80]	; (8010448 <POV_LEDs+0x148>)
		if( (led_map & MAP_POV_8_G) == MAP_POV_8_G){
 80103f8:	0401      	lsls	r1, r0, #16
			LED_SETTINGS[POV_8_G_REG] &= ~POV_8_G_PIN;
 80103fa:	bf4c      	ite	mi
 80103fc:	f002 02fd 	andmi.w	r2, r2, #253	; 0xfd
			}
		else{
				LED_SETTINGS[POV_8_G_REG] |= POV_8_G_PIN;
 8010400:	f042 0202 	orrpl.w	r2, r2, #2
 8010404:	701a      	strb	r2, [r3, #0]
	if (LED_mutex_id != NULL)  {
 8010406:	6820      	ldr	r0, [r4, #0]
 8010408:	b118      	cbz	r0, 8010412 <POV_LEDs+0x112>
		osMutexWait(LED_mutex_id, osWaitForever);
 801040a:	f04f 31ff 	mov.w	r1, #4294967295
 801040e:	f7fb fdc3 	bl	800bf98 <osMutexWait>
	HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_RESET);
 8010412:	2200      	movs	r2, #0
 8010414:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010418:	480c      	ldr	r0, [pc, #48]	; (801044c <POV_LEDs+0x14c>)
 801041a:	f7f1 feb3 	bl	8002184 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, LED_SETTINGS, 6, 1);
 801041e:	2301      	movs	r3, #1
 8010420:	2206      	movs	r2, #6
 8010422:	4908      	ldr	r1, [pc, #32]	; (8010444 <POV_LEDs+0x144>)
 8010424:	480a      	ldr	r0, [pc, #40]	; (8010450 <POV_LEDs+0x150>)
 8010426:	f7f5 fb09 	bl	8005a3c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_SET);
 801042a:	4808      	ldr	r0, [pc, #32]	; (801044c <POV_LEDs+0x14c>)
 801042c:	2201      	movs	r2, #1
 801042e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010432:	f7f1 fea7 	bl	8002184 <HAL_GPIO_WritePin>
	  if (LED_mutex_id != NULL)  {
 8010436:	6820      	ldr	r0, [r4, #0]
 8010438:	b118      	cbz	r0, 8010442 <POV_LEDs+0x142>
			}

		transmitToBuffer();

}
 801043a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			osMutexRelease(LED_mutex_id);
 801043e:	f7fb bdd3 	b.w	800bfe8 <osMutexRelease>
 8010442:	bd10      	pop	{r4, pc}
 8010444:	20005398 	.word	0x20005398
 8010448:	20005388 	.word	0x20005388
 801044c:	48001000 	.word	0x48001000
 8010450:	20005a40 	.word	0x20005a40

08010454 <Flush_LEDS>:


	transmitToBuffer();
}

void Flush_LEDS(void){
 8010454:	b510      	push	{r4, lr}
	if (LED_mutex_id != NULL)  {
 8010456:	4c14      	ldr	r4, [pc, #80]	; (80104a8 <Flush_LEDS+0x54>)
	LED_SETTINGS[0] = 255;
 8010458:	4b14      	ldr	r3, [pc, #80]	; (80104ac <Flush_LEDS+0x58>)
	if (LED_mutex_id != NULL)  {
 801045a:	6820      	ldr	r0, [r4, #0]
	LED_SETTINGS[0] = 255;
 801045c:	22ff      	movs	r2, #255	; 0xff
 801045e:	701a      	strb	r2, [r3, #0]
	LED_SETTINGS[1] = 255;
 8010460:	705a      	strb	r2, [r3, #1]
	LED_SETTINGS[2] = 255;
 8010462:	709a      	strb	r2, [r3, #2]
	LED_SETTINGS[3] = 255;
 8010464:	70da      	strb	r2, [r3, #3]
	LED_SETTINGS[4] = 255;
 8010466:	711a      	strb	r2, [r3, #4]
	LED_SETTINGS[5] = 255;
 8010468:	715a      	strb	r2, [r3, #5]
	if (LED_mutex_id != NULL)  {
 801046a:	b118      	cbz	r0, 8010474 <Flush_LEDS+0x20>
		osMutexWait(LED_mutex_id, osWaitForever);
 801046c:	f04f 31ff 	mov.w	r1, #4294967295
 8010470:	f7fb fd92 	bl	800bf98 <osMutexWait>
	HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_RESET);
 8010474:	2200      	movs	r2, #0
 8010476:	f44f 7180 	mov.w	r1, #256	; 0x100
 801047a:	480d      	ldr	r0, [pc, #52]	; (80104b0 <Flush_LEDS+0x5c>)
 801047c:	f7f1 fe82 	bl	8002184 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, LED_SETTINGS, 6, 1);
 8010480:	2301      	movs	r3, #1
 8010482:	2206      	movs	r2, #6
 8010484:	4909      	ldr	r1, [pc, #36]	; (80104ac <Flush_LEDS+0x58>)
 8010486:	480b      	ldr	r0, [pc, #44]	; (80104b4 <Flush_LEDS+0x60>)
 8010488:	f7f5 fad8 	bl	8005a3c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_SET);
 801048c:	4808      	ldr	r0, [pc, #32]	; (80104b0 <Flush_LEDS+0x5c>)
 801048e:	2201      	movs	r2, #1
 8010490:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010494:	f7f1 fe76 	bl	8002184 <HAL_GPIO_WritePin>
	  if (LED_mutex_id != NULL)  {
 8010498:	6820      	ldr	r0, [r4, #0]
 801049a:	b118      	cbz	r0, 80104a4 <Flush_LEDS+0x50>


	transmitToBuffer();
}
 801049c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			osMutexRelease(LED_mutex_id);
 80104a0:	f7fb bda2 	b.w	800bfe8 <osMutexRelease>
 80104a4:	bd10      	pop	{r4, pc}
 80104a6:	bf00      	nop
 80104a8:	20005388 	.word	0x20005388
 80104ac:	20005398 	.word	0x20005398
 80104b0:	48001000 	.word	0x48001000
 80104b4:	20005a40 	.word	0x20005a40

080104b8 <Set_LED>:

void Set_LED(uint8_t reg, uint8_t pin, uint8_t state){

	// turn on LED
	if(state == 1){
 80104b8:	2a01      	cmp	r2, #1
void Set_LED(uint8_t reg, uint8_t pin, uint8_t state){
 80104ba:	b510      	push	{r4, lr}
	if(state == 1){
 80104bc:	d024      	beq.n	8010508 <Set_LED+0x50>
		LED_SETTINGS[reg] &= ~pin;
	}
	// turn off LED
	else if(state == 0){
 80104be:	b91a      	cbnz	r2, 80104c8 <Set_LED+0x10>
		LED_SETTINGS[reg] |= pin;
 80104c0:	4b14      	ldr	r3, [pc, #80]	; (8010514 <Set_LED+0x5c>)
 80104c2:	5c1a      	ldrb	r2, [r3, r0]
 80104c4:	4311      	orrs	r1, r2
 80104c6:	5419      	strb	r1, [r3, r0]
	if (LED_mutex_id != NULL)  {
 80104c8:	4c13      	ldr	r4, [pc, #76]	; (8010518 <Set_LED+0x60>)
 80104ca:	6820      	ldr	r0, [r4, #0]
 80104cc:	b118      	cbz	r0, 80104d6 <Set_LED+0x1e>
		osMutexWait(LED_mutex_id, osWaitForever);
 80104ce:	f04f 31ff 	mov.w	r1, #4294967295
 80104d2:	f7fb fd61 	bl	800bf98 <osMutexWait>
	HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_RESET);
 80104d6:	2200      	movs	r2, #0
 80104d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80104dc:	480f      	ldr	r0, [pc, #60]	; (801051c <Set_LED+0x64>)
 80104de:	f7f1 fe51 	bl	8002184 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, LED_SETTINGS, 6, 1);
 80104e2:	2301      	movs	r3, #1
 80104e4:	2206      	movs	r2, #6
 80104e6:	490b      	ldr	r1, [pc, #44]	; (8010514 <Set_LED+0x5c>)
 80104e8:	480d      	ldr	r0, [pc, #52]	; (8010520 <Set_LED+0x68>)
 80104ea:	f7f5 faa7 	bl	8005a3c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_SET);
 80104ee:	480b      	ldr	r0, [pc, #44]	; (801051c <Set_LED+0x64>)
 80104f0:	2201      	movs	r2, #1
 80104f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80104f6:	f7f1 fe45 	bl	8002184 <HAL_GPIO_WritePin>
	  if (LED_mutex_id != NULL)  {
 80104fa:	6820      	ldr	r0, [r4, #0]
 80104fc:	b118      	cbz	r0, 8010506 <Set_LED+0x4e>
	}

	transmitToBuffer();
}
 80104fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			osMutexRelease(LED_mutex_id);
 8010502:	f7fb bd71 	b.w	800bfe8 <osMutexRelease>
 8010506:	bd10      	pop	{r4, pc}
		LED_SETTINGS[reg] &= ~pin;
 8010508:	4a02      	ldr	r2, [pc, #8]	; (8010514 <Set_LED+0x5c>)
 801050a:	5c13      	ldrb	r3, [r2, r0]
 801050c:	ea23 0101 	bic.w	r1, r3, r1
 8010510:	5411      	strb	r1, [r2, r0]
 8010512:	e7d9      	b.n	80104c8 <Set_LED+0x10>
 8010514:	20005398 	.word	0x20005398
 8010518:	20005388 	.word	0x20005388
 801051c:	48001000 	.word	0x48001000
 8010520:	20005a40 	.word	0x20005a40

08010524 <LED_State>:

// returns 1 if LED is on, 0 otherwise
// LED is on if the bit in LED_SETTINGS is zero (because its a sink circuit)
uint8_t LED_State(uint8_t reg, uint8_t pin){
	if( (LED_SETTINGS[reg] & pin) != 0){
 8010524:	4b03      	ldr	r3, [pc, #12]	; (8010534 <LED_State+0x10>)
 8010526:	5c1b      	ldrb	r3, [r3, r0]
 8010528:	420b      	tst	r3, r1
		return 0; //LED is OFF
	}
	else{
		return 1; //LED is ON
	}
}
 801052a:	bf0c      	ite	eq
 801052c:	2001      	moveq	r0, #1
 801052e:	2000      	movne	r0, #0
 8010530:	4770      	bx	lr
 8010532:	bf00      	nop
 8010534:	20005398 	.word	0x20005398

08010538 <activateLidar>:
	LED_Lidar_Active = 0;
}

void activateLidar(void){
    //turn on LIDAR (only works if 3.3V Power Switch is set)
    HAL_GPIO_WritePin(VL_XSHUT_GPIO_Port, VL_XSHUT_Pin, GPIO_PIN_SET);
 8010538:	2201      	movs	r2, #1
 801053a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801053e:	4801      	ldr	r0, [pc, #4]	; (8010544 <activateLidar+0xc>)
 8010540:	f7f1 be20 	b.w	8002184 <HAL_GPIO_WritePin>
 8010544:	48000c00 	.word	0x48000c00

08010548 <get_lidar_POV_map>:
void genPOV_Map(int16_t* measurement){
	POV_map = ( ((uint16_t) (*measurement / ((float) MEASUREMENT_POV_DIVISOR)) ) % 64);
}

uint32_t get_lidar_POV_map(void){
	return POV_map;
 8010548:	4b01      	ldr	r3, [pc, #4]	; (8010550 <get_lidar_POV_map+0x8>)
}
 801054a:	6818      	ldr	r0, [r3, #0]
 801054c:	4770      	bx	lr
 801054e:	bf00      	nop
 8010550:	2000527c 	.word	0x2000527c
 8010554:	00000000 	.word	0x00000000

08010558 <LidarMeasurement>:


}

void LidarMeasurement(void)
{
 8010558:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    HAL_GPIO_WritePin(VL_XSHUT_GPIO_Port, VL_XSHUT_Pin, GPIO_PIN_SET);
 801055c:	2201      	movs	r2, #1
{
 801055e:	b085      	sub	sp, #20
    HAL_GPIO_WritePin(VL_XSHUT_GPIO_Port, VL_XSHUT_Pin, GPIO_PIN_SET);
 8010560:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010564:	4882      	ldr	r0, [pc, #520]	; (8010770 <LidarMeasurement+0x218>)
	volatile int IntCount;

	activateLidar();
  HAL_Delay(500);
  osDelay(5);
  Dev->I2cHandle = &hi2c3;
 8010566:	4c83      	ldr	r4, [pc, #524]	; (8010774 <LidarMeasurement+0x21c>)
 8010568:	4e83      	ldr	r6, [pc, #524]	; (8010778 <LidarMeasurement+0x220>)
 801056a:	f8df a230 	ldr.w	sl, [pc, #560]	; 801079c <LidarMeasurement+0x244>
 801056e:	f8df b230 	ldr.w	fp, [pc, #560]	; 80107a0 <LidarMeasurement+0x248>
	POV_map = ( ((uint16_t) (*measurement / ((float) MEASUREMENT_POV_DIVISOR)) ) % 64);
 8010572:	ed9f 8a82 	vldr	s16, [pc, #520]	; 801077c <LidarMeasurement+0x224>
	lidar_map = 0x0001 << ( ((uint16_t) (*measurement / ((float) MEASUREMENT_DIVISOR)) ) % 15);
 8010576:	eddf 8a82 	vldr	s17, [pc, #520]	; 8010780 <LidarMeasurement+0x228>
    HAL_GPIO_WritePin(VL_XSHUT_GPIO_Port, VL_XSHUT_Pin, GPIO_PIN_SET);
 801057a:	f7f1 fe03 	bl	8002184 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 801057e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8010582:	f7f0 fce7 	bl	8000f54 <HAL_Delay>
  osDelay(5);
 8010586:	2005      	movs	r0, #5
 8010588:	f7fb fc8c 	bl	800bea4 <osDelay>
  Dev->I2cHandle = &hi2c3;
 801058c:	6820      	ldr	r0, [r4, #0]
 801058e:	4b7d      	ldr	r3, [pc, #500]	; (8010784 <LidarMeasurement+0x22c>)
 8010590:	f8c0 33a0 	str.w	r3, [r0, #928]	; 0x3a0
  Dev->I2cDevAddr = 0x52;
 8010594:	2352      	movs	r3, #82	; 0x52
 8010596:	f880 3398 	strb.w	r3, [r0, #920]	; 0x398
  static VL53L1_RangingMeasurementData_t RangingData;
  //printf("Autonomous Ranging Test\n");
    status = VL53L1_WaitDeviceBooted(Dev);
 801059a:	f7f8 f80b 	bl	80085b4 <VL53L1_WaitDeviceBooted>
 801059e:	4603      	mov	r3, r0
    status = VL53L1_DataInit(Dev);
 80105a0:	6820      	ldr	r0, [r4, #0]
    status = VL53L1_WaitDeviceBooted(Dev);
 80105a2:	9303      	str	r3, [sp, #12]
    status = VL53L1_DataInit(Dev);
 80105a4:	f7f7 ffc2 	bl	800852c <VL53L1_DataInit>
 80105a8:	4603      	mov	r3, r0
    status = VL53L1_StaticInit(Dev);
 80105aa:	6820      	ldr	r0, [r4, #0]
    status = VL53L1_DataInit(Dev);
 80105ac:	9303      	str	r3, [sp, #12]
    status = VL53L1_StaticInit(Dev);
 80105ae:	f7f8 f979 	bl	80088a4 <VL53L1_StaticInit>
    status = VL53L1_SetDistanceMode(Dev, VL53L1_DISTANCEMODE_SHORT);
 80105b2:	2101      	movs	r1, #1
    status = VL53L1_StaticInit(Dev);
 80105b4:	4603      	mov	r3, r0
    status = VL53L1_SetDistanceMode(Dev, VL53L1_DISTANCEMODE_SHORT);
 80105b6:	6820      	ldr	r0, [r4, #0]
    status = VL53L1_StaticInit(Dev);
 80105b8:	9303      	str	r3, [sp, #12]
    status = VL53L1_SetDistanceMode(Dev, VL53L1_DISTANCEMODE_SHORT);
 80105ba:	f7f7 ffff 	bl	80085bc <VL53L1_SetDistanceMode>
    status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(Dev, 20000);
 80105be:	f644 6120 	movw	r1, #20000	; 0x4e20
    status = VL53L1_SetDistanceMode(Dev, VL53L1_DISTANCEMODE_SHORT);
 80105c2:	4603      	mov	r3, r0
    status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(Dev, 20000);
 80105c4:	6820      	ldr	r0, [r4, #0]
    status = VL53L1_SetDistanceMode(Dev, VL53L1_DISTANCEMODE_SHORT);
 80105c6:	9303      	str	r3, [sp, #12]
    status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(Dev, 20000);
 80105c8:	f7f8 f8e8 	bl	800879c <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
    status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev, 22);
 80105cc:	2116      	movs	r1, #22
    status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(Dev, 20000);
 80105ce:	4603      	mov	r3, r0
    status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev, 22);
 80105d0:	6820      	ldr	r0, [r4, #0]
    status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(Dev, 20000);
 80105d2:	9303      	str	r3, [sp, #12]
    status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev, 22);
 80105d4:	f7f8 fa1a 	bl	8008a0c <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 80105d8:	4603      	mov	r3, r0
    status = VL53L1_StartMeasurement(Dev);
 80105da:	6820      	ldr	r0, [r4, #0]
    status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev, 22);
 80105dc:	9303      	str	r3, [sp, #12]
    status = VL53L1_StartMeasurement(Dev);
 80105de:	f7f8 fa1f 	bl	8008a20 <VL53L1_StartMeasurement>
 80105e2:	4603      	mov	r3, r0
    status = VL53L1_ClearInterruptAndStartMeasurement(Dev);
 80105e4:	6820      	ldr	r0, [r4, #0]
    status = VL53L1_StartMeasurement(Dev);
 80105e6:	9303      	str	r3, [sp, #12]
    status = VL53L1_ClearInterruptAndStartMeasurement(Dev);
 80105e8:	f7f8 fa62 	bl	8008ab0 <VL53L1_ClearInterruptAndStartMeasurement>
//	status = VL53L1_ClearInterruptAndStartMeasurement(Dev);
//	taskEXIT_CRITICAL();

	//VL53L1_read_meas();
	  	osSemaphoreWait( lidarSampleReadySemaphoreHandle, osWaitForever);
		status = VL53L1_GetRangingMeasurementData(Dev, &RangingData);
 80105ec:	4637      	mov	r7, r6
    status = VL53L1_ClearInterruptAndStartMeasurement(Dev);
 80105ee:	9003      	str	r0, [sp, #12]
 80105f0:	e024      	b.n	801063c <LidarMeasurement+0xe4>
			else if(abs(measurement_hist-RangingData.RangeMilliMeter) > THRESH_MEAS){
				measurement_hist = RangingData.RangeMilliMeter;
				LidarMeasurementHandler(&RangingData.RangeMilliMeter);
			}
			else{
				measurement_hist = measurement_hist * ALPHA_MEAS + RangingData.RangeMilliMeter * BETA_MEAS;
 80105f2:	f7ef ff57 	bl	80004a4 <__aeabi_i2d>
 80105f6:	a35a      	add	r3, pc, #360	; (adr r3, 8010760 <LidarMeasurement+0x208>)
 80105f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105fc:	f7ef ffb8 	bl	8000570 <__aeabi_dmul>
 8010600:	4680      	mov	r8, r0
 8010602:	4628      	mov	r0, r5
 8010604:	4689      	mov	r9, r1
 8010606:	f7ef ff4d 	bl	80004a4 <__aeabi_i2d>
 801060a:	a357      	add	r3, pc, #348	; (adr r3, 8010768 <LidarMeasurement+0x210>)
 801060c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010610:	f7ef ffae 	bl	8000570 <__aeabi_dmul>
 8010614:	4602      	mov	r2, r0
 8010616:	460b      	mov	r3, r1
 8010618:	4640      	mov	r0, r8
 801061a:	4649      	mov	r1, r9
 801061c:	f7ef fdf6 	bl	800020c <__adddf3>
 8010620:	f7f0 fa56 	bl	8000ad0 <__aeabi_d2iz>
 8010624:	f8ab 0000 	strh.w	r0, [fp]
			}

		}
		taskEXIT_CRITICAL();
 8010628:	f7fb fe46 	bl	800c2b8 <vPortExitCritical>
		status = VL53L1_ClearInterruptAndStartMeasurement(Dev);
 801062c:	6820      	ldr	r0, [r4, #0]
 801062e:	f7f8 fa3f 	bl	8008ab0 <VL53L1_ClearInterruptAndStartMeasurement>
 8010632:	9003      	str	r0, [sp, #12]
		//VL53L1_clear_int_and_enable_range();
		if(isLidarModeActive() == 0) lidarStop();
 8010634:	f001 fbb8 	bl	8011da8 <isLidarModeActive>
 8010638:	2800      	cmp	r0, #0
 801063a:	d03c      	beq.n	80106b6 <LidarMeasurement+0x15e>
	  	osSemaphoreWait( lidarSampleReadySemaphoreHandle, osWaitForever);
 801063c:	f04f 31ff 	mov.w	r1, #4294967295
 8010640:	f8da 0000 	ldr.w	r0, [sl]
 8010644:	f7fb fd0c 	bl	800c060 <osSemaphoreWait>
		status = VL53L1_GetRangingMeasurementData(Dev, &RangingData);
 8010648:	4639      	mov	r1, r7
 801064a:	6820      	ldr	r0, [r4, #0]
 801064c:	f7f8 fa34 	bl	8008ab8 <VL53L1_GetRangingMeasurementData>
 8010650:	9003      	str	r0, [sp, #12]
		taskENTER_CRITICAL();
 8010652:	f7fb fe0f 	bl	800c274 <vPortEnterCritical>
		if(status == VL53L1_RANGESTATUS_RANGE_VALID){
 8010656:	9b03      	ldr	r3, [sp, #12]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d1e5      	bne.n	8010628 <LidarMeasurement+0xd0>
			if(measurement_hist == -1){
 801065c:	f9bb 0000 	ldrsh.w	r0, [fp]
 8010660:	1c43      	adds	r3, r0, #1
 8010662:	d02e      	beq.n	80106c2 <LidarMeasurement+0x16a>
			else if(abs(measurement_hist-RangingData.RangeMilliMeter) > THRESH_MEAS){
 8010664:	f9b6 5018 	ldrsh.w	r5, [r6, #24]
 8010668:	1b43      	subs	r3, r0, r5
 801066a:	2b00      	cmp	r3, #0
 801066c:	bfb8      	it	lt
 801066e:	425b      	neglt	r3, r3
 8010670:	2b03      	cmp	r3, #3
 8010672:	ddbe      	ble.n	80105f2 <LidarMeasurement+0x9a>
	if(*measurement > MAX_LIDAR_MEASUREMENT){
 8010674:	8b33      	ldrh	r3, [r6, #24]
	calcLidarFreq(measurement);
 8010676:	4844      	ldr	r0, [pc, #272]	; (8010788 <LidarMeasurement+0x230>)
				measurement_hist = RangingData.RangeMilliMeter;
 8010678:	f8ab 5000 	strh.w	r5, [fp]
	if(*measurement > MAX_LIDAR_MEASUREMENT){
 801067c:	f240 5214 	movw	r2, #1300	; 0x514
 8010680:	b21b      	sxth	r3, r3
 8010682:	4293      	cmp	r3, r2
		*measurement = MAX_LIDAR_MEASUREMENT;
 8010684:	bfc8      	it	gt
 8010686:	8332      	strhgt	r2, [r6, #24]
	calcLidarFreq(measurement);
 8010688:	f001 fc66 	bl	8011f58 <calcLidarFreq>
	if(isButtonEnabled() == 1){
 801068c:	f000 fcfc 	bl	8011088 <isButtonEnabled>
 8010690:	2801      	cmp	r0, #1
 8010692:	d046      	beq.n	8010722 <LidarMeasurement+0x1ca>
	POV_map = ( ((uint16_t) (*measurement / ((float) MEASUREMENT_POV_DIVISOR)) ) % 64);
 8010694:	f9b6 3018 	ldrsh.w	r3, [r6, #24]
 8010698:	4a3c      	ldr	r2, [pc, #240]	; (801078c <LidarMeasurement+0x234>)
 801069a:	ee07 3a90 	vmov	s15, r3
 801069e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80106a2:	ee67 7a88 	vmul.f32	s15, s15, s16
 80106a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80106aa:	ee17 3a90 	vmov	r3, s15
 80106ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80106b2:	6013      	str	r3, [r2, #0]
 80106b4:	e7b8      	b.n	8010628 <LidarMeasurement+0xd0>
	lidar_measurement  = ((uint16_t)packet[13]) << 8; // high byte
	lidar_measurement |= packet[14];      // low byte
}

void lidarStop(void){
	status = VL53L1_StopMeasurement(Dev);
 80106b6:	6820      	ldr	r0, [r4, #0]
 80106b8:	f7f8 f9f0 	bl	8008a9c <VL53L1_StopMeasurement>
 80106bc:	4b34      	ldr	r3, [pc, #208]	; (8010790 <LidarMeasurement+0x238>)
 80106be:	6018      	str	r0, [r3, #0]
 80106c0:	e7bc      	b.n	801063c <LidarMeasurement+0xe4>
	if(*measurement > MAX_LIDAR_MEASUREMENT){
 80106c2:	8b33      	ldrh	r3, [r6, #24]
				measurement_hist = RangingData.RangeMilliMeter;
 80106c4:	8b32      	ldrh	r2, [r6, #24]
 80106c6:	f8ab 2000 	strh.w	r2, [fp]
	if(*measurement > MAX_LIDAR_MEASUREMENT){
 80106ca:	b21b      	sxth	r3, r3
 80106cc:	f240 5214 	movw	r2, #1300	; 0x514
 80106d0:	4293      	cmp	r3, r2
	calcLidarFreq(measurement);
 80106d2:	482d      	ldr	r0, [pc, #180]	; (8010788 <LidarMeasurement+0x230>)
		*measurement = MAX_LIDAR_MEASUREMENT;
 80106d4:	bfc8      	it	gt
 80106d6:	8332      	strhgt	r2, [r6, #24]
	calcLidarFreq(measurement);
 80106d8:	f001 fc3e 	bl	8011f58 <calcLidarFreq>
	if(isButtonEnabled() == 1){
 80106dc:	f000 fcd4 	bl	8011088 <isButtonEnabled>
 80106e0:	2801      	cmp	r0, #1
 80106e2:	d1d7      	bne.n	8010694 <LidarMeasurement+0x13c>
	lidar_map = 0x0001 << ( ((uint16_t) (*measurement / ((float) MEASUREMENT_DIVISOR)) ) % 15);
 80106e4:	f9b6 3018 	ldrsh.w	r3, [r6, #24]
 80106e8:	4a2a      	ldr	r2, [pc, #168]	; (8010794 <LidarMeasurement+0x23c>)
 80106ea:	ee07 3a90 	vmov	s15, r3
 80106ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80106f2:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80106f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80106fa:	edcd 7a01 	vstr	s15, [sp, #4]
 80106fe:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010702:	fba2 1203 	umull	r1, r2, r2, r3
 8010706:	08d2      	lsrs	r2, r2, #3
 8010708:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 801070c:	1a9b      	subs	r3, r3, r2
 801070e:	b29b      	uxth	r3, r3
 8010710:	fa00 f303 	lsl.w	r3, r0, r3
 8010714:	b29b      	uxth	r3, r3
 8010716:	4a20      	ldr	r2, [pc, #128]	; (8010798 <LidarMeasurement+0x240>)
		POV_LEDs(lidar_map);
 8010718:	4618      	mov	r0, r3
	lidar_map = 0x0001 << ( ((uint16_t) (*measurement / ((float) MEASUREMENT_DIVISOR)) ) % 15);
 801071a:	8013      	strh	r3, [r2, #0]
		POV_LEDs(lidar_map);
 801071c:	f7ff fdf0 	bl	8010300 <POV_LEDs>
 8010720:	e7b8      	b.n	8010694 <LidarMeasurement+0x13c>
	lidar_map = 0x0001 << ( ((uint16_t) (*measurement / ((float) MEASUREMENT_DIVISOR)) ) % 15);
 8010722:	f9b6 3018 	ldrsh.w	r3, [r6, #24]
 8010726:	4a1b      	ldr	r2, [pc, #108]	; (8010794 <LidarMeasurement+0x23c>)
 8010728:	ee07 3a90 	vmov	s15, r3
 801072c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010730:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8010734:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010738:	edcd 7a01 	vstr	s15, [sp, #4]
 801073c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010740:	fba2 1203 	umull	r1, r2, r2, r3
 8010744:	08d2      	lsrs	r2, r2, #3
 8010746:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 801074a:	1a9b      	subs	r3, r3, r2
 801074c:	b29b      	uxth	r3, r3
 801074e:	4098      	lsls	r0, r3
 8010750:	b283      	uxth	r3, r0
 8010752:	4a11      	ldr	r2, [pc, #68]	; (8010798 <LidarMeasurement+0x240>)
		POV_LEDs(lidar_map);
 8010754:	4618      	mov	r0, r3
	lidar_map = 0x0001 << ( ((uint16_t) (*measurement / ((float) MEASUREMENT_DIVISOR)) ) % 15);
 8010756:	8013      	strh	r3, [r2, #0]
		POV_LEDs(lidar_map);
 8010758:	f7ff fdd2 	bl	8010300 <POV_LEDs>
 801075c:	e79a      	b.n	8010694 <LidarMeasurement+0x13c>
 801075e:	bf00      	nop
 8010760:	cccccccd 	.word	0xcccccccd
 8010764:	3feccccc 	.word	0x3feccccc
 8010768:	9999999a 	.word	0x9999999a
 801076c:	3fb99999 	.word	0x3fb99999
 8010770:	48000c00 	.word	0x48000c00
 8010774:	20000034 	.word	0x20000034
 8010778:	20005280 	.word	0x20005280
 801077c:	3dcccccd 	.word	0x3dcccccd
 8010780:	3d4ccccd 	.word	0x3d4ccccd
 8010784:	200054e8 	.word	0x200054e8
 8010788:	20005298 	.word	0x20005298
 801078c:	2000527c 	.word	0x2000527c
 8010790:	20005978 	.word	0x20005978
 8010794:	88888889 	.word	0x88888889
 8010798:	2000529c 	.word	0x2000529c
 801079c:	200054e0 	.word	0x200054e0
 80107a0:	20000038 	.word	0x20000038

080107a4 <lidarStop>:
void lidarStop(void){
 80107a4:	b508      	push	{r3, lr}
	status = VL53L1_StopMeasurement(Dev);
 80107a6:	4b03      	ldr	r3, [pc, #12]	; (80107b4 <lidarStop+0x10>)
 80107a8:	6818      	ldr	r0, [r3, #0]
 80107aa:	f7f8 f977 	bl	8008a9c <VL53L1_StopMeasurement>
 80107ae:	4b02      	ldr	r3, [pc, #8]	; (80107b8 <lidarStop+0x14>)
 80107b0:	6018      	str	r0, [r3, #0]
 80107b2:	bd08      	pop	{r3, pc}
 80107b4:	20000034 	.word	0x20000034
 80107b8:	20005978 	.word	0x20005978

080107bc <lidarStart>:
}

void lidarStart(void){
 80107bc:	b510      	push	{r4, lr}
	status = VL53L1_StartMeasurement(Dev);
 80107be:	4c06      	ldr	r4, [pc, #24]	; (80107d8 <lidarStart+0x1c>)
 80107c0:	6820      	ldr	r0, [r4, #0]
 80107c2:	f7f8 f92d 	bl	8008a20 <VL53L1_StartMeasurement>
 80107c6:	4b05      	ldr	r3, [pc, #20]	; (80107dc <lidarStart+0x20>)
 80107c8:	4602      	mov	r2, r0
	VL53L1_ClearInterruptAndStartMeasurement(Dev);
 80107ca:	6820      	ldr	r0, [r4, #0]
	status = VL53L1_StartMeasurement(Dev);
 80107cc:	601a      	str	r2, [r3, #0]
}
 80107ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	VL53L1_ClearInterruptAndStartMeasurement(Dev);
 80107d2:	f7f8 b96d 	b.w	8008ab0 <VL53L1_ClearInterruptAndStartMeasurement>
 80107d6:	bf00      	nop
 80107d8:	20000034 	.word	0x20000034
 80107dc:	20005978 	.word	0x20005978

080107e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80107e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80107e4:	2100      	movs	r1, #0
{
 80107e6:	b0bc      	sub	sp, #240	; 0xf0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80107e8:	460c      	mov	r4, r1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80107ea:	a805      	add	r0, sp, #20
 80107ec:	2244      	movs	r2, #68	; 0x44
 80107ee:	f003 fb78 	bl	8013ee2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80107f2:	4621      	mov	r1, r4
 80107f4:	2298      	movs	r2, #152	; 0x98
 80107f6:	a816      	add	r0, sp, #88	; 0x58
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80107f8:	9401      	str	r4, [sp, #4]
 80107fa:	9400      	str	r4, [sp, #0]
 80107fc:	9402      	str	r4, [sp, #8]
 80107fe:	9403      	str	r4, [sp, #12]
 8010800:	9404      	str	r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8010802:	f003 fb6e 	bl	8013ee2 <memset>

  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8010806:	f44f 7000 	mov.w	r0, #512	; 0x200
 801080a:	f7f3 fa9f 	bl	8003d4c <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
  /**Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 801080e:	f7f3 fa83 	bl	8003d18 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8010812:	4a25      	ldr	r2, [pc, #148]	; (80108a8 <SystemClock_Config+0xc8>)

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8010814:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80108ac <SystemClock_Config+0xcc>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8010818:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 801081c:	f023 0318 	bic.w	r3, r3, #24
 8010820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8010824:	2205      	movs	r2, #5
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8010826:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801082a:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801082c:	2603      	movs	r6, #3
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 801082e:	2701      	movs	r7, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8010830:	9205      	str	r2, [sp, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8010832:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLN = 20;
 8010834:	2214      	movs	r2, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8010836:	2304      	movs	r3, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010838:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLN = 20;
 801083a:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 801083c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 801083e:	9707      	str	r7, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 1;
 8010840:	9711      	str	r7, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8010842:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8010844:	9514      	str	r5, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8010846:	9515      	str	r5, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8010848:	9610      	str	r6, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801084a:	f7f3 fb5f 	bl	8003f0c <HAL_RCC_OscConfig>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 801084e:	4631      	mov	r1, r6
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010850:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8010852:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010854:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8010856:	9601      	str	r6, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8010858:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 801085a:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801085c:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 801085e:	f7f3 fe95 	bl	800458c <HAL_RCC_ClockConfig>
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8010862:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8010866:	f44f 7e80 	mov.w	lr, #256	; 0x100
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 801086a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 801086e:	2208      	movs	r2, #8
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8010870:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8010874:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8010876:	9425      	str	r4, [sp, #148]	; 0x94
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8010878:	9427      	str	r4, [sp, #156]	; 0x9c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 801087a:	942b      	str	r4, [sp, #172]	; 0xac
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 801087c:	942c      	str	r4, [sp, #176]	; 0xb0
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 801087e:	942d      	str	r4, [sp, #180]	; 0xb4
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8010880:	9617      	str	r6, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8010882:	9718      	str	r7, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8010884:	951a      	str	r5, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8010886:	951b      	str	r5, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8010888:	951c      	str	r5, [sp, #112]	; 0x70
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 801088a:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 801088e:	f8cd c0d8 	str.w	ip, [sp, #216]	; 0xd8
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8010892:	f8cd e0ec 	str.w	lr, [sp, #236]	; 0xec
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8010896:	9134      	str	r1, [sp, #208]	; 0xd0
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8010898:	9219      	str	r2, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 801089a:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801089c:	f7f4 f90a 	bl	8004ab4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80108a0:	b03c      	add	sp, #240	; 0xf0
 80108a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108a6:	bf00      	nop
 80108a8:	40021000 	.word	0x40021000
 80108ac:	000a41c5 	.word	0x000a41c5

080108b0 <main>:
{
 80108b0:	b508      	push	{r3, lr}
  HAL_Init();
 80108b2:	f7f0 fb2d 	bl	8000f10 <HAL_Init>
  SystemClock_Config();
 80108b6:	f7ff ff93 	bl	80107e0 <SystemClock_Config>
  MX_GPIO_Init();
 80108ba:	f7fe fe07 	bl	800f4cc <MX_GPIO_Init>
  MX_DMA_Init();
 80108be:	f7fe fca5 	bl	800f20c <MX_DMA_Init>
  MX_TIM6_Init();
 80108c2:	f000 ff25 	bl	8011710 <MX_TIM6_Init>
  MX_DAC1_Init();
 80108c6:	f7fe fc13 	bl	800f0f0 <MX_DAC1_Init>
  MX_SPI2_Init();
 80108ca:	f000 fc79 	bl	80111c0 <MX_SPI2_Init>
  MX_TIM1_Init();
 80108ce:	f000 fe0d 	bl	80114ec <MX_TIM1_Init>
  MX_TIM16_Init();
 80108d2:	f000 ff6b 	bl	80117ac <MX_TIM16_Init>
  MX_TIM17_Init();
 80108d6:	f000 ff83 	bl	80117e0 <MX_TIM17_Init>
  MX_I2C1_Init();
 80108da:	f7fe ff87 	bl	800f7ec <MX_I2C1_Init>
  MX_I2C3_Init();
 80108de:	f7fe ffe1 	bl	800f8a4 <MX_I2C3_Init>
  MX_USART3_UART_Init();
 80108e2:	f001 f861 	bl	80119a8 <MX_USART3_UART_Init>
  MX_SDMMC1_SD_Init();
 80108e6:	f000 fc03 	bl	80110f0 <MX_SDMMC1_SD_Init>
  MX_RTC_Init();
 80108ea:	f000 fbd3 	bl	8011094 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80108ee:	f001 f825 	bl	801193c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80108f2:	f7fe f90d 	bl	800eb10 <MX_ADC1_Init>
  MX_TIM7_Init();
 80108f6:	f000 ff33 	bl	8011760 <MX_TIM7_Init>
  MX_I2C2_Init();
 80108fa:	f7fe ffa5 	bl	800f848 <MX_I2C2_Init>
  MX_TIM3_Init();
 80108fe:	f000 fe97 	bl	8011630 <MX_TIM3_Init>
  MX_TIM4_Init();
 8010902:	f000 fecd 	bl	80116a0 <MX_TIM4_Init>
  MX_COMP1_Init();
 8010906:	f7fe fba1 	bl	800f04c <MX_COMP1_Init>
  HAL_GPIO_WritePin(POWER_SWITCH_GPIO_Port, POWER_SWITCH_Pin, GPIO_PIN_SET);
 801090a:	2201      	movs	r2, #1
 801090c:	2110      	movs	r1, #16
 801090e:	482c      	ldr	r0, [pc, #176]	; (80109c0 <main+0x110>)
 8010910:	f7f1 fc38 	bl	8002184 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BT_EN_GPIO_Port, BT_EN_Pin, GPIO_PIN_SET);
 8010914:	2201      	movs	r2, #1
 8010916:	4611      	mov	r1, r2
 8010918:	4829      	ldr	r0, [pc, #164]	; (80109c0 <main+0x110>)
 801091a:	f7f1 fc33 	bl	8002184 <HAL_GPIO_WritePin>
  	  activateLidar();
 801091e:	f7ff fe0b 	bl	8010538 <activateLidar>
    HAL_Delay(1000);
 8010922:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010926:	f7f0 fb15 	bl	8000f54 <HAL_Delay>
    HAL_TIM_Base_Start(&htim1);
 801092a:	4826      	ldr	r0, [pc, #152]	; (80109c4 <main+0x114>)
 801092c:	f7f5 faca 	bl	8005ec4 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8010930:	2100      	movs	r1, #0
 8010932:	4824      	ldr	r0, [pc, #144]	; (80109c4 <main+0x114>)
 8010934:	f7f5 fbaa 	bl	800608c <HAL_TIM_PWM_Start>
    Setup_Cap_Touch();
 8010938:	f7fe f95c 	bl	800ebf4 <Setup_Cap_Touch>
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 801093c:	4922      	ldr	r1, [pc, #136]	; (80109c8 <main+0x118>)
	DWT->CYCCNT = 0; // reset the counter
 801093e:	4b23      	ldr	r3, [pc, #140]	; (80109cc <main+0x11c>)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8010940:	68ca      	ldr	r2, [r1, #12]
    HAL_TIM_Base_Start(&htim6);
 8010942:	4823      	ldr	r0, [pc, #140]	; (80109d0 <main+0x120>)
	DWT->CYCCNT = 0; // reset the counter
 8010944:	2400      	movs	r4, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8010946:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 801094a:	60ca      	str	r2, [r1, #12]
	DWT->CYCCNT = 0; // reset the counter
 801094c:	605c      	str	r4, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // enable the counter
 801094e:	681a      	ldr	r2, [r3, #0]
 8010950:	f042 0201 	orr.w	r2, r2, #1
 8010954:	601a      	str	r2, [r3, #0]
    HAL_TIM_Base_Start(&htim6);
 8010956:	f7f5 fab5 	bl	8005ec4 <HAL_TIM_Base_Start>
    HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 801095a:	4621      	mov	r1, r4
 801095c:	481d      	ldr	r0, [pc, #116]	; (80109d4 <main+0x124>)
 801095e:	f7f0 ff9f 	bl	80018a0 <HAL_DAC_Start>
    HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8010962:	2110      	movs	r1, #16
 8010964:	481b      	ldr	r0, [pc, #108]	; (80109d4 <main+0x124>)
 8010966:	f7f0 ff9b 	bl	80018a0 <HAL_DAC_Start>
    HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0x100);
 801096a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801096e:	4622      	mov	r2, r4
 8010970:	2110      	movs	r1, #16
 8010972:	4818      	ldr	r0, [pc, #96]	; (80109d4 <main+0x124>)
 8010974:	f7f1 f83a 	bl	80019ec <HAL_DAC_SetValue>
    prepBuffer(&hdac1);
 8010978:	4816      	ldr	r0, [pc, #88]	; (80109d4 <main+0x124>)
 801097a:	f002 fa0d 	bl	8012d98 <prepBuffer>
    Flush_LEDS();
 801097e:	f7ff fd69 	bl	8010454 <Flush_LEDS>
    HAL_GPIO_WritePin(BT_CMD_GPIO_Port, BT_CMD_Pin, GPIO_PIN_SET);
 8010982:	2201      	movs	r2, #1
 8010984:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010988:	4813      	ldr	r0, [pc, #76]	; (80109d8 <main+0x128>)
 801098a:	f7f1 fbfb 	bl	8002184 <HAL_GPIO_WritePin>
    HAL_UART_Receive_IT(&huart3, &byte3, 1);
 801098e:	2201      	movs	r2, #1
 8010990:	4912      	ldr	r1, [pc, #72]	; (80109dc <main+0x12c>)
 8010992:	4813      	ldr	r0, [pc, #76]	; (80109e0 <main+0x130>)
 8010994:	f7f6 f80e 	bl	80069b4 <HAL_UART_Receive_IT>
    HAL_UART_Receive_IT(&huart1, &byte1, 1);
 8010998:	2201      	movs	r2, #1
 801099a:	4912      	ldr	r1, [pc, #72]	; (80109e4 <main+0x134>)
 801099c:	4812      	ldr	r0, [pc, #72]	; (80109e8 <main+0x138>)
 801099e:	f7f6 f809 	bl	80069b4 <HAL_UART_Receive_IT>
    HAL_GPIO_WritePin(HALL_CNTRL_GPIO_Port, HALL_CNTRL_Pin, GPIO_PIN_SET);
 80109a2:	2201      	movs	r2, #1
 80109a4:	2140      	movs	r1, #64	; 0x40
 80109a6:	480c      	ldr	r0, [pc, #48]	; (80109d8 <main+0x128>)
 80109a8:	f7f1 fbec 	bl	8002184 <HAL_GPIO_WritePin>
    initFilter();
 80109ac:	f7fe fc50 	bl	800f250 <initFilter>
    HAL_COMP_Start(&hcomp1);
 80109b0:	480e      	ldr	r0, [pc, #56]	; (80109ec <main+0x13c>)
 80109b2:	f7f0 feb3 	bl	800171c <HAL_COMP_Start>
  MX_FREERTOS_Init();
 80109b6:	f7fe fd75 	bl	800f4a4 <MX_FREERTOS_Init>
  osKernelStart();
 80109ba:	f7fb fa55 	bl	800be68 <osKernelStart>
 80109be:	e7fe      	b.n	80109be <main+0x10e>
 80109c0:	48001000 	.word	0x48001000
 80109c4:	20005be4 	.word	0x20005be4
 80109c8:	e000edf0 	.word	0xe000edf0
 80109cc:	e0001000 	.word	0xe0001000
 80109d0:	20005ba4 	.word	0x20005ba4
 80109d4:	20005450 	.word	0x20005450
 80109d8:	48000c00 	.word	0x48000c00
 80109dc:	2000597c 	.word	0x2000597c
 80109e0:	20005ca4 	.word	0x20005ca4
 80109e4:	2000597d 	.word	0x2000597d
 80109e8:	20005d28 	.word	0x20005d28
 80109ec:	20005424 	.word	0x20005424

080109f0 <HAL_COMP_TriggerCallback>:
	}
}

//uint8_t temp;
void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp){
	HALL_Handler();
 80109f0:	f7fe beac 	b.w	800f74c <HALL_Handler>

080109f4 <HAL_GPIO_EXTI_Callback>:
//volatile uint8_t LED_state = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if(GPIO_Pin == CAP_ALERT_Pin){
 80109f4:	2820      	cmp	r0, #32
{
 80109f6:	b508      	push	{r3, lr}
  if(GPIO_Pin == CAP_ALERT_Pin){
 80109f8:	d009      	beq.n	8010a0e <HAL_GPIO_EXTI_Callback+0x1a>
	  //
	  if (isCapModeActive()) osSemaphoreRelease (capSampleSemaphoreHandle);
	  //if (isCapModeActive()) Sample_Cap_Touch();
	  //Sample_Cap_Touch();
  }
  else if(GPIO_Pin == VL_INT_Pin){
 80109fa:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80109fe:	d00a      	beq.n	8010a16 <HAL_GPIO_EXTI_Callback+0x22>
//		  HAL_GPIO_TogglePin(LED_LAT_GPIO_Port, LED_LAT_Pin);
//		  LidarMeasurement();
//	  }
	  //LidarMeasurement();
  }
  else if(GPIO_Pin == HALL_INT_Pin){
 8010a00:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8010a04:	d006      	beq.n	8010a14 <HAL_GPIO_EXTI_Callback+0x20>
	  ResistiveTouchSampler();
  }
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8010a06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  ResistiveTouchSampler();
 8010a0a:	f000 b8a7 	b.w	8010b5c <ResistiveTouchSampler>
	  if (isCapModeActive()) osSemaphoreRelease (capSampleSemaphoreHandle);
 8010a0e:	f001 f9d3 	bl	8011db8 <isCapModeActive>
 8010a12:	b950      	cbnz	r0, 8010a2a <HAL_GPIO_EXTI_Callback+0x36>
 8010a14:	bd08      	pop	{r3, pc}
	  if(isLidarModeActive()) osSemaphoreRelease (lidarSampleReadySemaphoreHandle);
 8010a16:	f001 f9c7 	bl	8011da8 <isLidarModeActive>
 8010a1a:	2800      	cmp	r0, #0
 8010a1c:	d0fa      	beq.n	8010a14 <HAL_GPIO_EXTI_Callback+0x20>
 8010a1e:	4b06      	ldr	r3, [pc, #24]	; (8010a38 <HAL_GPIO_EXTI_Callback+0x44>)
 8010a20:	6818      	ldr	r0, [r3, #0]
}
 8010a22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  if(isLidarModeActive()) osSemaphoreRelease (lidarSampleReadySemaphoreHandle);
 8010a26:	f7fb bb43 	b.w	800c0b0 <osSemaphoreRelease>
	  if (isCapModeActive()) osSemaphoreRelease (capSampleSemaphoreHandle);
 8010a2a:	4b04      	ldr	r3, [pc, #16]	; (8010a3c <HAL_GPIO_EXTI_Callback+0x48>)
 8010a2c:	6818      	ldr	r0, [r3, #0]
}
 8010a2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  if (isCapModeActive()) osSemaphoreRelease (capSampleSemaphoreHandle);
 8010a32:	f7fb bb3d 	b.w	800c0b0 <osSemaphoreRelease>
 8010a36:	bf00      	nop
 8010a38:	200054e0 	.word	0x200054e0
 8010a3c:	20005420 	.word	0x20005420

08010a40 <HAL_UART_RxCpltCallback>:
//		}
//	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8010a40:	b538      	push	{r3, r4, r5, lr}
  if (huart->Instance == USART3)
 8010a42:	4a13      	ldr	r2, [pc, #76]	; (8010a90 <HAL_UART_RxCpltCallback+0x50>)
 8010a44:	6803      	ldr	r3, [r0, #0]
 8010a46:	4293      	cmp	r3, r2
 8010a48:	d011      	beq.n	8010a6e <HAL_UART_RxCpltCallback+0x2e>
//    if (byte == 'm'){
//    	HAL_UART_Transmit(&huart3, "RECEIVED M\n", sizeof("RECEIVED M\n"), 100);
//    }
  }

  if (huart->Instance == USART1)
 8010a4a:	4a12      	ldr	r2, [pc, #72]	; (8010a94 <HAL_UART_RxCpltCallback+0x54>)
 8010a4c:	4293      	cmp	r3, r2
 8010a4e:	d000      	beq.n	8010a52 <HAL_UART_RxCpltCallback+0x12>
 8010a50:	bd38      	pop	{r3, r4, r5, pc}
   {
     /* Transmit one byte with 100 ms timeout */
     HAL_UART_Transmit(&huart3, &byte1, 1, 100);
 8010a52:	4c11      	ldr	r4, [pc, #68]	; (8010a98 <HAL_UART_RxCpltCallback+0x58>)
 8010a54:	4811      	ldr	r0, [pc, #68]	; (8010a9c <HAL_UART_RxCpltCallback+0x5c>)
 8010a56:	2364      	movs	r3, #100	; 0x64
 8010a58:	4621      	mov	r1, r4
 8010a5a:	2201      	movs	r2, #1
 8010a5c:	f7f5 ff28 	bl	80068b0 <HAL_UART_Transmit>

     /* Receive one byte in interrupt mode */
     HAL_UART_Receive_IT(&huart1, &byte1, 1);
 8010a60:	4621      	mov	r1, r4
 8010a62:	2201      	movs	r2, #1
 8010a64:	480e      	ldr	r0, [pc, #56]	; (8010aa0 <HAL_UART_RxCpltCallback+0x60>)
 8010a66:	f7f5 ffa5 	bl	80069b4 <HAL_UART_Receive_IT>

     if (byte1 == '?'){
 8010a6a:	7823      	ldrb	r3, [r4, #0]
 8010a6c:	bd38      	pop	{r3, r4, r5, pc}
    HAL_UART_Transmit(&huart1, &byte3, 1, 100);
 8010a6e:	4d0d      	ldr	r5, [pc, #52]	; (8010aa4 <HAL_UART_RxCpltCallback+0x64>)
 8010a70:	2364      	movs	r3, #100	; 0x64
 8010a72:	4604      	mov	r4, r0
 8010a74:	4629      	mov	r1, r5
 8010a76:	2201      	movs	r2, #1
 8010a78:	4809      	ldr	r0, [pc, #36]	; (8010aa0 <HAL_UART_RxCpltCallback+0x60>)
 8010a7a:	f7f5 ff19 	bl	80068b0 <HAL_UART_Transmit>
    HAL_UART_Receive_IT(&huart3, &byte3, 1);
 8010a7e:	4629      	mov	r1, r5
 8010a80:	2201      	movs	r2, #1
 8010a82:	4806      	ldr	r0, [pc, #24]	; (8010a9c <HAL_UART_RxCpltCallback+0x5c>)
 8010a84:	f7f5 ff96 	bl	80069b4 <HAL_UART_Receive_IT>
    if (byte3 == '?'){
 8010a88:	782b      	ldrb	r3, [r5, #0]
 8010a8a:	6823      	ldr	r3, [r4, #0]
 8010a8c:	e7dd      	b.n	8010a4a <HAL_UART_RxCpltCallback+0xa>
 8010a8e:	bf00      	nop
 8010a90:	40004800 	.word	0x40004800
 8010a94:	40013800 	.word	0x40013800
 8010a98:	2000597d 	.word	0x2000597d
 8010a9c:	20005ca4 	.word	0x20005ca4
 8010aa0:	20005d28 	.word	0x20005d28
 8010aa4:	2000597c 	.word	0x2000597c

08010aa8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8010aa8:	6803      	ldr	r3, [r0, #0]
 8010aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010aae:	d008      	beq.n	8010ac2 <HAL_TIM_PeriodElapsedCallback+0x1a>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */
  else if (htim->Instance == TIM3) {
 8010ab0:	4a06      	ldr	r2, [pc, #24]	; (8010acc <HAL_TIM_PeriodElapsedCallback+0x24>)
 8010ab2:	4293      	cmp	r3, r2
 8010ab4:	d007      	beq.n	8010ac6 <HAL_TIM_PeriodElapsedCallback+0x1e>
	  POV_Update();
    }
  else if (htim->Instance == TIM4) {
 8010ab6:	4a06      	ldr	r2, [pc, #24]	; (8010ad0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8010ab8:	4293      	cmp	r3, r2
 8010aba:	d000      	beq.n	8010abe <HAL_TIM_PeriodElapsedCallback+0x16>
 8010abc:	4770      	bx	lr
	  enable_buttons();
 8010abe:	f000 bac3 	b.w	8011048 <enable_buttons>
    HAL_IncTick();
 8010ac2:	f7f0 ba39 	b.w	8000f38 <HAL_IncTick>
	  POV_Update();
 8010ac6:	f7ff baa3 	b.w	8010010 <POV_Update>
 8010aca:	bf00      	nop
 8010acc:	40000400 	.word	0x40000400
 8010ad0:	40000800 	.word	0x40000800

08010ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8010ad4:	4770      	bx	lr
 8010ad6:	bf00      	nop

08010ad8 <buttonStateMachine>:

		buttonStateMachine();
	}
}

void buttonStateMachine(void){
 8010ad8:	b538      	push	{r3, r4, r5, lr}
	// if accelerometer is enabled, start FreeRTOS Thread Timer
	if( (LED_State(BUTTON_4_G_REG, BUTTON_4_G_PIN) == LED_ON) && (accTimer == 0)){
 8010ada:	2120      	movs	r1, #32
 8010adc:	2001      	movs	r0, #1
 8010ade:	f7ff fd21 	bl	8010524 <LED_State>
 8010ae2:	2801      	cmp	r0, #1
 8010ae4:	d020      	beq.n	8010b28 <buttonStateMachine+0x50>
		osTimerStart(accSampleTimerHandle, 100);
		accTimer = 1;
	}else if ( (LED_State(BUTTON_4_G_REG, BUTTON_4_G_PIN) == LED_OFF) && (accTimer == 1) ){
 8010ae6:	2120      	movs	r1, #32
 8010ae8:	2001      	movs	r0, #1
 8010aea:	f7ff fd1b 	bl	8010524 <LED_State>
 8010aee:	4604      	mov	r4, r0
 8010af0:	b160      	cbz	r0, 8010b0c <buttonStateMachine+0x34>
		osTimerStop(accSampleTimerHandle);
		accTimer = 0;

	}

	if(LED_State(BUTTON_5_G_REG, BUTTON_5_G_PIN)){
 8010af2:	2180      	movs	r1, #128	; 0x80
 8010af4:	2000      	movs	r0, #0
 8010af6:	f7ff fd15 	bl	8010524 <LED_State>
 8010afa:	bb30      	cbnz	r0, 8010b4a <buttonStateMachine+0x72>
		turnOnLidarSounds();
	}
	else if(LED_State(BUTTON_6_G_REG, BUTTON_6_G_PIN)){
 8010afc:	2108      	movs	r1, #8
 8010afe:	f7ff fd11 	bl	8010524 <LED_State>
 8010b02:	b968      	cbnz	r0, 8010b20 <buttonStateMachine+0x48>
		turnOnCapSounds();
	}else{
		turnOffSounds();
	}
}
 8010b04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		turnOffSounds();
 8010b08:	f001 ba16 	b.w	8011f38 <turnOffSounds>
	}else if ( (LED_State(BUTTON_4_G_REG, BUTTON_4_G_PIN) == LED_OFF) && (accTimer == 1) ){
 8010b0c:	4d11      	ldr	r5, [pc, #68]	; (8010b54 <buttonStateMachine+0x7c>)
 8010b0e:	782b      	ldrb	r3, [r5, #0]
 8010b10:	2b01      	cmp	r3, #1
 8010b12:	d1ee      	bne.n	8010af2 <buttonStateMachine+0x1a>
		osTimerStop(accSampleTimerHandle);
 8010b14:	4b10      	ldr	r3, [pc, #64]	; (8010b58 <buttonStateMachine+0x80>)
 8010b16:	6818      	ldr	r0, [r3, #0]
 8010b18:	f7fb fa0e 	bl	800bf38 <osTimerStop>
		accTimer = 0;
 8010b1c:	702c      	strb	r4, [r5, #0]
 8010b1e:	e7e8      	b.n	8010af2 <buttonStateMachine+0x1a>
}
 8010b20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		turnOnCapSounds();
 8010b24:	f001 b9ec 	b.w	8011f00 <turnOnCapSounds>
	if( (LED_State(BUTTON_4_G_REG, BUTTON_4_G_PIN) == LED_ON) && (accTimer == 0)){
 8010b28:	4d0a      	ldr	r5, [pc, #40]	; (8010b54 <buttonStateMachine+0x7c>)
 8010b2a:	782b      	ldrb	r3, [r5, #0]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d1da      	bne.n	8010ae6 <buttonStateMachine+0xe>
		osTimerStart(accSampleTimerHandle, 100);
 8010b30:	4b09      	ldr	r3, [pc, #36]	; (8010b58 <buttonStateMachine+0x80>)
 8010b32:	4604      	mov	r4, r0
 8010b34:	2164      	movs	r1, #100	; 0x64
 8010b36:	6818      	ldr	r0, [r3, #0]
 8010b38:	f7fb f9d0 	bl	800bedc <osTimerStart>
	if(LED_State(BUTTON_5_G_REG, BUTTON_5_G_PIN)){
 8010b3c:	2180      	movs	r1, #128	; 0x80
 8010b3e:	2000      	movs	r0, #0
		accTimer = 1;
 8010b40:	702c      	strb	r4, [r5, #0]
	if(LED_State(BUTTON_5_G_REG, BUTTON_5_G_PIN)){
 8010b42:	f7ff fcef 	bl	8010524 <LED_State>
 8010b46:	2800      	cmp	r0, #0
 8010b48:	d0d8      	beq.n	8010afc <buttonStateMachine+0x24>
}
 8010b4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		turnOnLidarSounds();
 8010b4e:	f001 b9c1 	b.w	8011ed4 <turnOnLidarSounds>
 8010b52:	bf00      	nop
 8010b54:	2000529e 	.word	0x2000529e
 8010b58:	20005384 	.word	0x20005384

08010b5c <ResistiveTouchSampler>:
void ResistiveTouchSampler(void){
 8010b5c:	b570      	push	{r4, r5, r6, lr}
	transmitToBuffer();
	button_state = 1;
}

uint8_t isButtonEnabled(void){
	return button_state;
 8010b5e:	4bd1      	ldr	r3, [pc, #836]	; (8010ea4 <ResistiveTouchSampler+0x348>)
	if(isButtonEnabled() == 1){
 8010b60:	781c      	ldrb	r4, [r3, #0]
 8010b62:	2c01      	cmp	r4, #1
 8010b64:	d000      	beq.n	8010b68 <ResistiveTouchSampler+0xc>
 8010b66:	bd70      	pop	{r4, r5, r6, pc}
		if(HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin) == GPIO_PIN_SET){
 8010b68:	2102      	movs	r1, #2
 8010b6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010b6e:	f7f1 fb03 	bl	8002178 <HAL_GPIO_ReadPin>
 8010b72:	2801      	cmp	r0, #1
 8010b74:	4605      	mov	r5, r0
 8010b76:	d04c      	beq.n	8010c12 <ResistiveTouchSampler+0xb6>
		else if(HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin) == GPIO_PIN_SET){
 8010b78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010b7c:	48ca      	ldr	r0, [pc, #808]	; (8010ea8 <ResistiveTouchSampler+0x34c>)
 8010b7e:	f7f1 fafb 	bl	8002178 <HAL_GPIO_ReadPin>
 8010b82:	2801      	cmp	r0, #1
 8010b84:	4605      	mov	r5, r0
 8010b86:	f000 80a2 	beq.w	8010cce <ResistiveTouchSampler+0x172>
		else if(HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin) == GPIO_PIN_SET){
 8010b8a:	2104      	movs	r1, #4
 8010b8c:	48c7      	ldr	r0, [pc, #796]	; (8010eac <ResistiveTouchSampler+0x350>)
 8010b8e:	f7f1 faf3 	bl	8002178 <HAL_GPIO_ReadPin>
 8010b92:	2801      	cmp	r0, #1
 8010b94:	4605      	mov	r5, r0
 8010b96:	f000 80cb 	beq.w	8010d30 <ResistiveTouchSampler+0x1d4>
		else if(HAL_GPIO_ReadPin(BUTTON_7_GPIO_Port, BUTTON_7_Pin) == GPIO_PIN_SET){
 8010b9a:	4621      	mov	r1, r4
 8010b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010ba0:	f7f1 faea 	bl	8002178 <HAL_GPIO_ReadPin>
 8010ba4:	2801      	cmp	r0, #1
 8010ba6:	4604      	mov	r4, r0
 8010ba8:	f000 81b1 	beq.w	8010f0e <ResistiveTouchSampler+0x3b2>
		else if(HAL_GPIO_ReadPin(BUTTON_8_GPIO_Port, BUTTON_8_Pin) == GPIO_PIN_SET){
 8010bac:	2108      	movs	r1, #8
 8010bae:	48bf      	ldr	r0, [pc, #764]	; (8010eac <ResistiveTouchSampler+0x350>)
 8010bb0:	f7f1 fae2 	bl	8002178 <HAL_GPIO_ReadPin>
 8010bb4:	2801      	cmp	r0, #1
 8010bb6:	4604      	mov	r4, r0
 8010bb8:	d05a      	beq.n	8010c70 <ResistiveTouchSampler+0x114>
		if(HAL_GPIO_ReadPin(BUTTON_4_GPIO_Port, BUTTON_4_Pin) == GPIO_PIN_SET){
 8010bba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8010bbe:	48bc      	ldr	r0, [pc, #752]	; (8010eb0 <ResistiveTouchSampler+0x354>)
 8010bc0:	f7f1 fada 	bl	8002178 <HAL_GPIO_ReadPin>
 8010bc4:	2801      	cmp	r0, #1
 8010bc6:	4604      	mov	r4, r0
 8010bc8:	f000 8188 	beq.w	8010edc <ResistiveTouchSampler+0x380>
		if(HAL_GPIO_ReadPin(BUTTON_5_GPIO_Port, BUTTON_5_Pin) == GPIO_PIN_SET){
 8010bcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8010bd0:	48b7      	ldr	r0, [pc, #732]	; (8010eb0 <ResistiveTouchSampler+0x354>)
 8010bd2:	f7f1 fad1 	bl	8002178 <HAL_GPIO_ReadPin>
 8010bd6:	2801      	cmp	r0, #1
 8010bd8:	4604      	mov	r4, r0
 8010bda:	f000 8145 	beq.w	8010e68 <ResistiveTouchSampler+0x30c>
		if(HAL_GPIO_ReadPin(BUTTON_6_GPIO_Port, BUTTON_6_Pin) == GPIO_PIN_SET){
 8010bde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010be2:	48b3      	ldr	r0, [pc, #716]	; (8010eb0 <ResistiveTouchSampler+0x354>)
 8010be4:	f7f1 fac8 	bl	8002178 <HAL_GPIO_ReadPin>
 8010be8:	2801      	cmp	r0, #1
 8010bea:	4604      	mov	r4, r0
 8010bec:	f000 811d 	beq.w	8010e2a <ResistiveTouchSampler+0x2ce>
		if(HAL_GPIO_ReadPin(BUTTON_9_GPIO_Port, BUTTON_9_Pin) == GPIO_PIN_SET){
 8010bf0:	2180      	movs	r1, #128	; 0x80
 8010bf2:	48ad      	ldr	r0, [pc, #692]	; (8010ea8 <ResistiveTouchSampler+0x34c>)
 8010bf4:	f7f1 fac0 	bl	8002178 <HAL_GPIO_ReadPin>
 8010bf8:	2801      	cmp	r0, #1
 8010bfa:	4604      	mov	r4, r0
 8010bfc:	f000 80c9 	beq.w	8010d92 <ResistiveTouchSampler+0x236>
 8010c00:	4cac      	ldr	r4, [pc, #688]	; (8010eb4 <ResistiveTouchSampler+0x358>)
		if(trigger_table == 1){
 8010c02:	7823      	ldrb	r3, [r4, #0]
 8010c04:	2b01      	cmp	r3, #1
 8010c06:	f000 8180 	beq.w	8010f0a <ResistiveTouchSampler+0x3ae>
}
 8010c0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		buttonStateMachine();
 8010c0e:	f7ff bf63 	b.w	8010ad8 <buttonStateMachine>
			if(LED_State(BUTTON_1_G_REG, BUTTON_1_G_PIN) == LED_OFF){
 8010c12:	2120      	movs	r1, #32
 8010c14:	2005      	movs	r0, #5
 8010c16:	f7ff fc85 	bl	8010524 <LED_State>
 8010c1a:	4604      	mov	r4, r0
 8010c1c:	2800      	cmp	r0, #0
 8010c1e:	d1cc      	bne.n	8010bba <ResistiveTouchSampler+0x5e>
				if ( (HAL_GetTick() - button_1_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 8010c20:	4ea5      	ldr	r6, [pc, #660]	; (8010eb8 <ResistiveTouchSampler+0x35c>)
 8010c22:	f7f0 f991 	bl	8000f48 <HAL_GetTick>
 8010c26:	6833      	ldr	r3, [r6, #0]
 8010c28:	1ac0      	subs	r0, r0, r3
 8010c2a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8010c2e:	d9c4      	bls.n	8010bba <ResistiveTouchSampler+0x5e>
					button_1_timeout = HAL_GetTick();
 8010c30:	f7f0 f98a 	bl	8000f48 <HAL_GetTick>
					Set_LED(BUTTON_1_G_REG, BUTTON_1_G_PIN, 1);
 8010c34:	462a      	mov	r2, r5
					button_1_timeout = HAL_GetTick();
 8010c36:	6030      	str	r0, [r6, #0]
					Set_LED(BUTTON_1_G_REG, BUTTON_1_G_PIN, 1);
 8010c38:	2120      	movs	r1, #32
 8010c3a:	2005      	movs	r0, #5
 8010c3c:	f7ff fc3c 	bl	80104b8 <Set_LED>
					Set_LED(BUTTON_2_R_REG, BUTTON_2_R_PIN, 0);
 8010c40:	4622      	mov	r2, r4
 8010c42:	4629      	mov	r1, r5
 8010c44:	2005      	movs	r0, #5
 8010c46:	f7ff fc37 	bl	80104b8 <Set_LED>
					Set_LED(BUTTON_3_G_REG, BUTTON_3_G_PIN, 0);
 8010c4a:	4622      	mov	r2, r4
 8010c4c:	2108      	movs	r1, #8
 8010c4e:	2004      	movs	r0, #4
 8010c50:	f7ff fc32 	bl	80104b8 <Set_LED>
					Set_LED(BUTTON_7_G_REG, BUTTON_7_G_PIN, 0);
 8010c54:	4622      	mov	r2, r4
 8010c56:	2180      	movs	r1, #128	; 0x80
 8010c58:	2003      	movs	r0, #3
 8010c5a:	f7ff fc2d 	bl	80104b8 <Set_LED>
					Set_LED(BUTTON_8_G_REG, BUTTON_8_G_PIN, 0);
 8010c5e:	4622      	mov	r2, r4
 8010c60:	2180      	movs	r1, #128	; 0x80
 8010c62:	2004      	movs	r0, #4
 8010c64:	f7ff fc28 	bl	80104b8 <Set_LED>
					setTable('S');
 8010c68:	2053      	movs	r0, #83	; 0x53
 8010c6a:	f002 f85f 	bl	8012d2c <setTable>
 8010c6e:	e7a4      	b.n	8010bba <ResistiveTouchSampler+0x5e>
			if(LED_State(BUTTON_8_G_REG, BUTTON_8_G_PIN) == LED_OFF){
 8010c70:	2180      	movs	r1, #128	; 0x80
 8010c72:	2004      	movs	r0, #4
 8010c74:	f7ff fc56 	bl	8010524 <LED_State>
 8010c78:	4605      	mov	r5, r0
 8010c7a:	2800      	cmp	r0, #0
 8010c7c:	d19d      	bne.n	8010bba <ResistiveTouchSampler+0x5e>
				if ( (HAL_GetTick() - button_8_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 8010c7e:	4e8f      	ldr	r6, [pc, #572]	; (8010ebc <ResistiveTouchSampler+0x360>)
 8010c80:	f7f0 f962 	bl	8000f48 <HAL_GetTick>
 8010c84:	6833      	ldr	r3, [r6, #0]
 8010c86:	1ac3      	subs	r3, r0, r3
 8010c88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010c8c:	d995      	bls.n	8010bba <ResistiveTouchSampler+0x5e>
					button_8_timeout = HAL_GetTick();
 8010c8e:	f7f0 f95b 	bl	8000f48 <HAL_GetTick>
					Set_LED(BUTTON_1_G_REG, BUTTON_1_G_PIN, 0);
 8010c92:	462a      	mov	r2, r5
					button_8_timeout = HAL_GetTick();
 8010c94:	6030      	str	r0, [r6, #0]
					Set_LED(BUTTON_1_G_REG, BUTTON_1_G_PIN, 0);
 8010c96:	2120      	movs	r1, #32
 8010c98:	2005      	movs	r0, #5
 8010c9a:	f7ff fc0d 	bl	80104b8 <Set_LED>
					Set_LED(BUTTON_2_R_REG, BUTTON_2_R_PIN, 0);
 8010c9e:	462a      	mov	r2, r5
 8010ca0:	4621      	mov	r1, r4
 8010ca2:	2005      	movs	r0, #5
 8010ca4:	f7ff fc08 	bl	80104b8 <Set_LED>
					Set_LED(BUTTON_3_G_REG, BUTTON_3_G_PIN, 0);
 8010ca8:	462a      	mov	r2, r5
 8010caa:	2108      	movs	r1, #8
 8010cac:	2004      	movs	r0, #4
 8010cae:	f7ff fc03 	bl	80104b8 <Set_LED>
					Set_LED(BUTTON_7_G_REG, BUTTON_7_G_PIN, 0);
 8010cb2:	462a      	mov	r2, r5
 8010cb4:	2180      	movs	r1, #128	; 0x80
 8010cb6:	2003      	movs	r0, #3
 8010cb8:	f7ff fbfe 	bl	80104b8 <Set_LED>
					Set_LED(BUTTON_8_G_REG, BUTTON_8_G_PIN, 1);
 8010cbc:	4622      	mov	r2, r4
 8010cbe:	2180      	movs	r1, #128	; 0x80
 8010cc0:	2004      	movs	r0, #4
 8010cc2:	f7ff fbf9 	bl	80104b8 <Set_LED>
					setTable('W');
 8010cc6:	2057      	movs	r0, #87	; 0x57
 8010cc8:	f002 f830 	bl	8012d2c <setTable>
 8010ccc:	e775      	b.n	8010bba <ResistiveTouchSampler+0x5e>
			if(LED_State(BUTTON_2_G_REG, BUTTON_2_G_PIN) == LED_OFF){
 8010cce:	2102      	movs	r1, #2
 8010cd0:	2005      	movs	r0, #5
 8010cd2:	f7ff fc27 	bl	8010524 <LED_State>
 8010cd6:	4604      	mov	r4, r0
 8010cd8:	2800      	cmp	r0, #0
 8010cda:	f47f af6e 	bne.w	8010bba <ResistiveTouchSampler+0x5e>
				if ( (HAL_GetTick() - button_2_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 8010cde:	4e78      	ldr	r6, [pc, #480]	; (8010ec0 <ResistiveTouchSampler+0x364>)
 8010ce0:	f7f0 f932 	bl	8000f48 <HAL_GetTick>
 8010ce4:	6833      	ldr	r3, [r6, #0]
 8010ce6:	1ac3      	subs	r3, r0, r3
 8010ce8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010cec:	f67f af65 	bls.w	8010bba <ResistiveTouchSampler+0x5e>
					button_2_timeout = HAL_GetTick();
 8010cf0:	f7f0 f92a 	bl	8000f48 <HAL_GetTick>
					Set_LED(BUTTON_1_G_REG, BUTTON_1_G_PIN, 0);
 8010cf4:	4622      	mov	r2, r4
					button_2_timeout = HAL_GetTick();
 8010cf6:	6030      	str	r0, [r6, #0]
					Set_LED(BUTTON_1_G_REG, BUTTON_1_G_PIN, 0);
 8010cf8:	2120      	movs	r1, #32
 8010cfa:	2005      	movs	r0, #5
 8010cfc:	f7ff fbdc 	bl	80104b8 <Set_LED>
					Set_LED(BUTTON_2_R_REG, BUTTON_2_R_PIN, 1);
 8010d00:	462a      	mov	r2, r5
 8010d02:	4629      	mov	r1, r5
 8010d04:	2005      	movs	r0, #5
 8010d06:	f7ff fbd7 	bl	80104b8 <Set_LED>
					Set_LED(BUTTON_3_G_REG, BUTTON_3_G_PIN, 0);
 8010d0a:	4622      	mov	r2, r4
 8010d0c:	2108      	movs	r1, #8
 8010d0e:	2004      	movs	r0, #4
 8010d10:	f7ff fbd2 	bl	80104b8 <Set_LED>
					Set_LED(BUTTON_7_G_REG, BUTTON_7_G_PIN, 0);
 8010d14:	4622      	mov	r2, r4
 8010d16:	2180      	movs	r1, #128	; 0x80
 8010d18:	2003      	movs	r0, #3
 8010d1a:	f7ff fbcd 	bl	80104b8 <Set_LED>
					Set_LED(BUTTON_8_G_REG, BUTTON_8_G_PIN, 0);
 8010d1e:	4622      	mov	r2, r4
 8010d20:	2180      	movs	r1, #128	; 0x80
 8010d22:	2004      	movs	r0, #4
 8010d24:	f7ff fbc8 	bl	80104b8 <Set_LED>
					setTable('T');
 8010d28:	2054      	movs	r0, #84	; 0x54
 8010d2a:	f001 ffff 	bl	8012d2c <setTable>
 8010d2e:	e744      	b.n	8010bba <ResistiveTouchSampler+0x5e>
			if(LED_State(BUTTON_3_G_REG, BUTTON_3_G_PIN) == LED_OFF){
 8010d30:	2108      	movs	r1, #8
 8010d32:	2004      	movs	r0, #4
 8010d34:	f7ff fbf6 	bl	8010524 <LED_State>
 8010d38:	4604      	mov	r4, r0
 8010d3a:	2800      	cmp	r0, #0
 8010d3c:	f47f af3d 	bne.w	8010bba <ResistiveTouchSampler+0x5e>
				if ( (HAL_GetTick() - button_3_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 8010d40:	4e60      	ldr	r6, [pc, #384]	; (8010ec4 <ResistiveTouchSampler+0x368>)
 8010d42:	f7f0 f901 	bl	8000f48 <HAL_GetTick>
 8010d46:	6833      	ldr	r3, [r6, #0]
 8010d48:	1ac3      	subs	r3, r0, r3
 8010d4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010d4e:	f67f af34 	bls.w	8010bba <ResistiveTouchSampler+0x5e>
					button_3_timeout = HAL_GetTick();
 8010d52:	f7f0 f8f9 	bl	8000f48 <HAL_GetTick>
					Set_LED(BUTTON_1_G_REG, BUTTON_1_G_PIN, 0);
 8010d56:	4622      	mov	r2, r4
					button_3_timeout = HAL_GetTick();
 8010d58:	6030      	str	r0, [r6, #0]
					Set_LED(BUTTON_1_G_REG, BUTTON_1_G_PIN, 0);
 8010d5a:	2120      	movs	r1, #32
 8010d5c:	2005      	movs	r0, #5
 8010d5e:	f7ff fbab 	bl	80104b8 <Set_LED>
					Set_LED(BUTTON_2_R_REG, BUTTON_2_R_PIN, 0);
 8010d62:	4622      	mov	r2, r4
 8010d64:	4629      	mov	r1, r5
 8010d66:	2005      	movs	r0, #5
 8010d68:	f7ff fba6 	bl	80104b8 <Set_LED>
					Set_LED(BUTTON_3_G_REG, BUTTON_3_G_PIN, 1);
 8010d6c:	462a      	mov	r2, r5
 8010d6e:	2108      	movs	r1, #8
 8010d70:	2004      	movs	r0, #4
 8010d72:	f7ff fba1 	bl	80104b8 <Set_LED>
					Set_LED(BUTTON_7_G_REG, BUTTON_7_G_PIN, 0);
 8010d76:	4622      	mov	r2, r4
 8010d78:	2180      	movs	r1, #128	; 0x80
 8010d7a:	2003      	movs	r0, #3
 8010d7c:	f7ff fb9c 	bl	80104b8 <Set_LED>
					Set_LED(BUTTON_8_G_REG, BUTTON_8_G_PIN, 0);
 8010d80:	4622      	mov	r2, r4
 8010d82:	2180      	movs	r1, #128	; 0x80
 8010d84:	2004      	movs	r0, #4
 8010d86:	f7ff fb97 	bl	80104b8 <Set_LED>
					setTable('Q');
 8010d8a:	2051      	movs	r0, #81	; 0x51
 8010d8c:	f001 ffce 	bl	8012d2c <setTable>
 8010d90:	e713      	b.n	8010bba <ResistiveTouchSampler+0x5e>
			if ( (HAL_GetTick() - button_9_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 8010d92:	4d4d      	ldr	r5, [pc, #308]	; (8010ec8 <ResistiveTouchSampler+0x36c>)
 8010d94:	f7f0 f8d8 	bl	8000f48 <HAL_GetTick>
 8010d98:	682b      	ldr	r3, [r5, #0]
 8010d9a:	1ac0      	subs	r0, r0, r3
 8010d9c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8010da0:	f67f af2e 	bls.w	8010c00 <ResistiveTouchSampler+0xa4>
				button_9_timeout = HAL_GetTick();
 8010da4:	f7f0 f8d0 	bl	8000f48 <HAL_GetTick>
				if(LED_State(BUTTON_9_G_REG, BUTTON_9_G_PIN) == LED_OFF){
 8010da8:	2102      	movs	r1, #2
				button_9_timeout = HAL_GetTick();
 8010daa:	6028      	str	r0, [r5, #0]
				if(LED_State(BUTTON_9_G_REG, BUTTON_9_G_PIN) == LED_OFF){
 8010dac:	4620      	mov	r0, r4
 8010dae:	f7ff fbb9 	bl	8010524 <LED_State>
 8010db2:	2800      	cmp	r0, #0
 8010db4:	f040 80e8 	bne.w	8010f88 <ResistiveTouchSampler+0x42c>
					Set_LED(BUTTON_9_G_REG, BUTTON_9_G_PIN, 1);
 8010db8:	4622      	mov	r2, r4
 8010dba:	2102      	movs	r1, #2
 8010dbc:	4620      	mov	r0, r4
 8010dbe:	f7ff fb7b 	bl	80104b8 <Set_LED>
					activateFilter(1);
 8010dc2:	4620      	mov	r0, r4
 8010dc4:	f000 ffb6 	bl	8011d34 <activateFilter>
					first_pass = 1;
 8010dc8:	4d40      	ldr	r5, [pc, #256]	; (8010ecc <ResistiveTouchSampler+0x370>)
					trigger_table = 1;
 8010dca:	4b3a      	ldr	r3, [pc, #232]	; (8010eb4 <ResistiveTouchSampler+0x358>)
					first_pass = 1;
 8010dcc:	702c      	strb	r4, [r5, #0]
					trigger_table = 1;
 8010dce:	701c      	strb	r4, [r3, #0]
			if (HAL_GPIO_ReadPin(BUTTON_10_GPIO_Port, BUTTON_10_Pin) == GPIO_PIN_SET || (first_pass == 1) ){
 8010dd0:	4837      	ldr	r0, [pc, #220]	; (8010eb0 <ResistiveTouchSampler+0x354>)
 8010dd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010dd6:	f7f1 f9cf 	bl	8002178 <HAL_GPIO_ReadPin>
 8010dda:	2801      	cmp	r0, #1
 8010ddc:	d003      	beq.n	8010de6 <ResistiveTouchSampler+0x28a>
 8010dde:	782b      	ldrb	r3, [r5, #0]
 8010de0:	2b01      	cmp	r3, #1
 8010de2:	f47f af12 	bne.w	8010c0a <ResistiveTouchSampler+0xae>
				first_pass = 0;
 8010de6:	2300      	movs	r3, #0
				if ( (HAL_GetTick() - button_10_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 8010de8:	4c39      	ldr	r4, [pc, #228]	; (8010ed0 <ResistiveTouchSampler+0x374>)
				first_pass = 0;
 8010dea:	702b      	strb	r3, [r5, #0]
				if ( (HAL_GetTick() - button_10_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 8010dec:	f7f0 f8ac 	bl	8000f48 <HAL_GetTick>
 8010df0:	6823      	ldr	r3, [r4, #0]
 8010df2:	1ac3      	subs	r3, r0, r3
 8010df4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010df8:	f67f af07 	bls.w	8010c0a <ResistiveTouchSampler+0xae>
					button_10_timeout = HAL_GetTick();
 8010dfc:	f7f0 f8a4 	bl	8000f48 <HAL_GetTick>
					if(LED_State(BUTTON_10_G_REG, BUTTON_10_G_PIN) == LED_OFF){
 8010e00:	2102      	movs	r1, #2
					button_10_timeout = HAL_GetTick();
 8010e02:	6020      	str	r0, [r4, #0]
					if(LED_State(BUTTON_10_G_REG, BUTTON_10_G_PIN) == LED_OFF){
 8010e04:	4608      	mov	r0, r1
 8010e06:	f7ff fb8d 	bl	8010524 <LED_State>
 8010e0a:	2800      	cmp	r0, #0
 8010e0c:	f040 80d2 	bne.w	8010fb4 <ResistiveTouchSampler+0x458>
						Set_LED(BUTTON_10_R_REG, BUTTON_10_R_PIN, 0);
 8010e10:	4602      	mov	r2, r0
 8010e12:	2101      	movs	r1, #1
 8010e14:	2002      	movs	r0, #2
 8010e16:	f7ff fb4f 	bl	80104b8 <Set_LED>
						Set_LED(BUTTON_10_G_REG, BUTTON_10_G_PIN, 1);
 8010e1a:	2102      	movs	r1, #2
 8010e1c:	4608      	mov	r0, r1
 8010e1e:	2201      	movs	r2, #1
 8010e20:	f7ff fb4a 	bl	80104b8 <Set_LED>
						incrementTable();
 8010e24:	f000 ffd0 	bl	8011dc8 <incrementTable>
 8010e28:	e6ef      	b.n	8010c0a <ResistiveTouchSampler+0xae>
			if(LED_State(BUTTON_6_G_REG, BUTTON_6_G_PIN) == LED_OFF){
 8010e2a:	2108      	movs	r1, #8
 8010e2c:	2000      	movs	r0, #0
 8010e2e:	f7ff fb79 	bl	8010524 <LED_State>
 8010e32:	4605      	mov	r5, r0
 8010e34:	2800      	cmp	r0, #0
 8010e36:	f47f aedb 	bne.w	8010bf0 <ResistiveTouchSampler+0x94>
				if ( (HAL_GetTick() - button_6_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 8010e3a:	4e26      	ldr	r6, [pc, #152]	; (8010ed4 <ResistiveTouchSampler+0x378>)
 8010e3c:	f7f0 f884 	bl	8000f48 <HAL_GetTick>
 8010e40:	6833      	ldr	r3, [r6, #0]
 8010e42:	1ac3      	subs	r3, r0, r3
 8010e44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010e48:	f67f aed2 	bls.w	8010bf0 <ResistiveTouchSampler+0x94>
					button_6_timeout = HAL_GetTick();
 8010e4c:	f7f0 f87c 	bl	8000f48 <HAL_GetTick>
					Set_LED(BUTTON_6_G_REG, BUTTON_6_G_PIN, 1);
 8010e50:	4622      	mov	r2, r4
					button_6_timeout = HAL_GetTick();
 8010e52:	6030      	str	r0, [r6, #0]
					Set_LED(BUTTON_6_G_REG, BUTTON_6_G_PIN, 1);
 8010e54:	2108      	movs	r1, #8
 8010e56:	4628      	mov	r0, r5
 8010e58:	f7ff fb2e 	bl	80104b8 <Set_LED>
					Set_LED(BUTTON_5_G_REG, BUTTON_5_G_PIN, 0);
 8010e5c:	462a      	mov	r2, r5
 8010e5e:	4628      	mov	r0, r5
 8010e60:	2180      	movs	r1, #128	; 0x80
 8010e62:	f7ff fb29 	bl	80104b8 <Set_LED>
 8010e66:	e6c3      	b.n	8010bf0 <ResistiveTouchSampler+0x94>
			if ( (HAL_GetTick() - button_5_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 8010e68:	4d1b      	ldr	r5, [pc, #108]	; (8010ed8 <ResistiveTouchSampler+0x37c>)
 8010e6a:	f7f0 f86d 	bl	8000f48 <HAL_GetTick>
 8010e6e:	682b      	ldr	r3, [r5, #0]
 8010e70:	1ac0      	subs	r0, r0, r3
 8010e72:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8010e76:	f67f aeb2 	bls.w	8010bde <ResistiveTouchSampler+0x82>
				button_5_timeout = HAL_GetTick();
 8010e7a:	f7f0 f865 	bl	8000f48 <HAL_GetTick>
				if(LED_State(BUTTON_5_G_REG, BUTTON_5_G_PIN) == LED_OFF){
 8010e7e:	2180      	movs	r1, #128	; 0x80
				button_5_timeout = HAL_GetTick();
 8010e80:	6028      	str	r0, [r5, #0]
				if(LED_State(BUTTON_5_G_REG, BUTTON_5_G_PIN) == LED_OFF){
 8010e82:	2000      	movs	r0, #0
 8010e84:	f7ff fb4e 	bl	8010524 <LED_State>
 8010e88:	4605      	mov	r5, r0
 8010e8a:	2800      	cmp	r0, #0
 8010e8c:	f47f aea7 	bne.w	8010bde <ResistiveTouchSampler+0x82>
					Set_LED(BUTTON_5_G_REG, BUTTON_5_G_PIN, 1);
 8010e90:	4622      	mov	r2, r4
 8010e92:	2180      	movs	r1, #128	; 0x80
 8010e94:	f7ff fb10 	bl	80104b8 <Set_LED>
					Set_LED(BUTTON_6_G_REG, BUTTON_6_G_PIN, 0);
 8010e98:	462a      	mov	r2, r5
 8010e9a:	4628      	mov	r0, r5
 8010e9c:	2108      	movs	r1, #8
 8010e9e:	f7ff fb0b 	bl	80104b8 <Set_LED>
 8010ea2:	e69c      	b.n	8010bde <ResistiveTouchSampler+0x82>
 8010ea4:	2000003a 	.word	0x2000003a
 8010ea8:	48000800 	.word	0x48000800
 8010eac:	48001000 	.word	0x48001000
 8010eb0:	48000c00 	.word	0x48000c00
 8010eb4:	200052c9 	.word	0x200052c9
 8010eb8:	200052a4 	.word	0x200052a4
 8010ebc:	200052c0 	.word	0x200052c0
 8010ec0:	200052a8 	.word	0x200052a8
 8010ec4:	200052ac 	.word	0x200052ac
 8010ec8:	200052c4 	.word	0x200052c4
 8010ecc:	200052c8 	.word	0x200052c8
 8010ed0:	200052a0 	.word	0x200052a0
 8010ed4:	200052b8 	.word	0x200052b8
 8010ed8:	200052b4 	.word	0x200052b4
			if ( (HAL_GetTick() - button_4_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 8010edc:	4d40      	ldr	r5, [pc, #256]	; (8010fe0 <ResistiveTouchSampler+0x484>)
 8010ede:	f7f0 f833 	bl	8000f48 <HAL_GetTick>
 8010ee2:	682b      	ldr	r3, [r5, #0]
 8010ee4:	1ac0      	subs	r0, r0, r3
 8010ee6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8010eea:	f67f ae6f 	bls.w	8010bcc <ResistiveTouchSampler+0x70>
				button_4_timeout = HAL_GetTick();
 8010eee:	f7f0 f82b 	bl	8000f48 <HAL_GetTick>
				if(LED_State(BUTTON_4_G_REG, BUTTON_4_G_PIN) == LED_OFF){
 8010ef2:	2120      	movs	r1, #32
				button_4_timeout = HAL_GetTick();
 8010ef4:	6028      	str	r0, [r5, #0]
				if(LED_State(BUTTON_4_G_REG, BUTTON_4_G_PIN) == LED_OFF){
 8010ef6:	4620      	mov	r0, r4
 8010ef8:	f7ff fb14 	bl	8010524 <LED_State>
 8010efc:	bbc0      	cbnz	r0, 8010f70 <ResistiveTouchSampler+0x414>
						Set_LED(BUTTON_4_G_REG, BUTTON_4_G_PIN, 1);
 8010efe:	4622      	mov	r2, r4
 8010f00:	4620      	mov	r0, r4
 8010f02:	2120      	movs	r1, #32
 8010f04:	f7ff fad8 	bl	80104b8 <Set_LED>
 8010f08:	e660      	b.n	8010bcc <ResistiveTouchSampler+0x70>
 8010f0a:	4d36      	ldr	r5, [pc, #216]	; (8010fe4 <ResistiveTouchSampler+0x488>)
 8010f0c:	e760      	b.n	8010dd0 <ResistiveTouchSampler+0x274>
			if(LED_State(BUTTON_7_G_REG, BUTTON_7_G_PIN) == LED_OFF){
 8010f0e:	2180      	movs	r1, #128	; 0x80
 8010f10:	2003      	movs	r0, #3
 8010f12:	f7ff fb07 	bl	8010524 <LED_State>
 8010f16:	4605      	mov	r5, r0
 8010f18:	2800      	cmp	r0, #0
 8010f1a:	f47f ae4e 	bne.w	8010bba <ResistiveTouchSampler+0x5e>
				if ( (HAL_GetTick() - button_7_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 8010f1e:	4e32      	ldr	r6, [pc, #200]	; (8010fe8 <ResistiveTouchSampler+0x48c>)
 8010f20:	f7f0 f812 	bl	8000f48 <HAL_GetTick>
 8010f24:	6833      	ldr	r3, [r6, #0]
 8010f26:	1ac3      	subs	r3, r0, r3
 8010f28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010f2c:	f67f ae45 	bls.w	8010bba <ResistiveTouchSampler+0x5e>
					button_7_timeout = HAL_GetTick();
 8010f30:	f7f0 f80a 	bl	8000f48 <HAL_GetTick>
					Set_LED(BUTTON_1_G_REG, BUTTON_1_G_PIN, 0);
 8010f34:	462a      	mov	r2, r5
					button_7_timeout = HAL_GetTick();
 8010f36:	6030      	str	r0, [r6, #0]
					Set_LED(BUTTON_1_G_REG, BUTTON_1_G_PIN, 0);
 8010f38:	2120      	movs	r1, #32
 8010f3a:	2005      	movs	r0, #5
 8010f3c:	f7ff fabc 	bl	80104b8 <Set_LED>
					Set_LED(BUTTON_2_R_REG, BUTTON_2_R_PIN, 0);
 8010f40:	462a      	mov	r2, r5
 8010f42:	4621      	mov	r1, r4
 8010f44:	2005      	movs	r0, #5
 8010f46:	f7ff fab7 	bl	80104b8 <Set_LED>
					Set_LED(BUTTON_3_G_REG, BUTTON_3_G_PIN, 0);
 8010f4a:	462a      	mov	r2, r5
 8010f4c:	2108      	movs	r1, #8
 8010f4e:	2004      	movs	r0, #4
 8010f50:	f7ff fab2 	bl	80104b8 <Set_LED>
					Set_LED(BUTTON_7_G_REG, BUTTON_7_G_PIN, 1);
 8010f54:	4622      	mov	r2, r4
 8010f56:	2180      	movs	r1, #128	; 0x80
 8010f58:	2003      	movs	r0, #3
 8010f5a:	f7ff faad 	bl	80104b8 <Set_LED>
					Set_LED(BUTTON_8_G_REG, BUTTON_8_G_PIN, 0);
 8010f5e:	462a      	mov	r2, r5
 8010f60:	2180      	movs	r1, #128	; 0x80
 8010f62:	2004      	movs	r0, #4
 8010f64:	f7ff faa8 	bl	80104b8 <Set_LED>
					setTable('R');
 8010f68:	2052      	movs	r0, #82	; 0x52
 8010f6a:	f001 fedf 	bl	8012d2c <setTable>
 8010f6e:	e624      	b.n	8010bba <ResistiveTouchSampler+0x5e>
				else if(LED_State(BUTTON_4_G_REG, BUTTON_4_G_PIN) == LED_ON){
 8010f70:	4620      	mov	r0, r4
 8010f72:	2120      	movs	r1, #32
 8010f74:	f7ff fad6 	bl	8010524 <LED_State>
 8010f78:	2801      	cmp	r0, #1
 8010f7a:	f47f ae27 	bne.w	8010bcc <ResistiveTouchSampler+0x70>
						Set_LED(BUTTON_4_G_REG, BUTTON_4_G_PIN, 0);
 8010f7e:	2200      	movs	r2, #0
 8010f80:	2120      	movs	r1, #32
 8010f82:	f7ff fa99 	bl	80104b8 <Set_LED>
 8010f86:	e621      	b.n	8010bcc <ResistiveTouchSampler+0x70>
					Set_LED(BUTTON_9_G_REG, BUTTON_9_G_PIN, 0);
 8010f88:	4620      	mov	r0, r4
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	2102      	movs	r1, #2
 8010f8e:	f7ff fa93 	bl	80104b8 <Set_LED>
					Set_LED(BUTTON_10_G_REG, BUTTON_10_G_PIN, 0);
 8010f92:	2102      	movs	r1, #2
 8010f94:	4608      	mov	r0, r1
 8010f96:	2200      	movs	r2, #0
 8010f98:	f7ff fa8e 	bl	80104b8 <Set_LED>
					Set_LED(BUTTON_10_R_REG, BUTTON_10_R_PIN, 0);
 8010f9c:	4621      	mov	r1, r4
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	2002      	movs	r0, #2
 8010fa2:	f7ff fa89 	bl	80104b8 <Set_LED>
					trigger_table = 0;
 8010fa6:	4c11      	ldr	r4, [pc, #68]	; (8010fec <ResistiveTouchSampler+0x490>)
 8010fa8:	2300      	movs	r3, #0
					activateFilter(0);
 8010faa:	4618      	mov	r0, r3
					trigger_table = 0;
 8010fac:	7023      	strb	r3, [r4, #0]
					activateFilter(0);
 8010fae:	f000 fec1 	bl	8011d34 <activateFilter>
 8010fb2:	e626      	b.n	8010c02 <ResistiveTouchSampler+0xa6>
					else if(LED_State(BUTTON_10_R_REG, BUTTON_10_R_PIN) == LED_OFF){
 8010fb4:	2101      	movs	r1, #1
 8010fb6:	2002      	movs	r0, #2
 8010fb8:	f7ff fab4 	bl	8010524 <LED_State>
 8010fbc:	4604      	mov	r4, r0
 8010fbe:	2800      	cmp	r0, #0
 8010fc0:	f47f ae23 	bne.w	8010c0a <ResistiveTouchSampler+0xae>
						Set_LED(BUTTON_10_R_REG, BUTTON_10_R_PIN, 1);
 8010fc4:	2201      	movs	r2, #1
 8010fc6:	4611      	mov	r1, r2
 8010fc8:	2002      	movs	r0, #2
 8010fca:	f7ff fa75 	bl	80104b8 <Set_LED>
						Set_LED(BUTTON_10_G_REG, BUTTON_10_G_PIN, 0);
 8010fce:	2102      	movs	r1, #2
 8010fd0:	4622      	mov	r2, r4
 8010fd2:	4608      	mov	r0, r1
 8010fd4:	f7ff fa70 	bl	80104b8 <Set_LED>
						incrementTable();
 8010fd8:	f000 fef6 	bl	8011dc8 <incrementTable>
 8010fdc:	e615      	b.n	8010c0a <ResistiveTouchSampler+0xae>
 8010fde:	bf00      	nop
 8010fe0:	200052b0 	.word	0x200052b0
 8010fe4:	200052c8 	.word	0x200052c8
 8010fe8:	200052bc 	.word	0x200052bc
 8010fec:	200052c9 	.word	0x200052c9

08010ff0 <disable_buttons>:
void disable_buttons(void){
 8010ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return button_state;
 8010ff2:	4b11      	ldr	r3, [pc, #68]	; (8011038 <disable_buttons+0x48>)
	if(isButtonEnabled() == 1){
 8010ff4:	781a      	ldrb	r2, [r3, #0]
 8010ff6:	2a01      	cmp	r2, #1
 8010ff8:	d007      	beq.n	801100a <disable_buttons+0x1a>
		HAL_TIM_Base_Stop_IT(&htim4);
 8010ffa:	4810      	ldr	r0, [pc, #64]	; (801103c <disable_buttons+0x4c>)
 8010ffc:	f7f4 ff94 	bl	8005f28 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Start_IT(&htim4);
 8011000:	480e      	ldr	r0, [pc, #56]	; (801103c <disable_buttons+0x4c>)
}
 8011002:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		HAL_TIM_Base_Start_IT(&htim4);
 8011006:	f7f4 bf77 	b.w	8005ef8 <HAL_TIM_Base_Start_IT>
		temp_buffer[0] = LED_SETTINGS[0];
 801100a:	490d      	ldr	r1, [pc, #52]	; (8011040 <disable_buttons+0x50>)
 801100c:	4a0d      	ldr	r2, [pc, #52]	; (8011044 <disable_buttons+0x54>)
 801100e:	780c      	ldrb	r4, [r1, #0]
 8011010:	7014      	strb	r4, [r2, #0]
		temp_buffer[1] = LED_SETTINGS[1];
 8011012:	f891 e001 	ldrb.w	lr, [r1, #1]
		temp_buffer[2] = LED_SETTINGS[2];
 8011016:	788f      	ldrb	r7, [r1, #2]
		temp_buffer[3] = LED_SETTINGS[3];
 8011018:	78ce      	ldrb	r6, [r1, #3]
		temp_buffer[4] = LED_SETTINGS[4];
 801101a:	790d      	ldrb	r5, [r1, #4]
		temp_buffer[5] = LED_SETTINGS[5];
 801101c:	794c      	ldrb	r4, [r1, #5]
		temp_buffer[1] = LED_SETTINGS[1];
 801101e:	f882 e001 	strb.w	lr, [r2, #1]
		button_state = 0;
 8011022:	2100      	movs	r1, #0
		temp_buffer[2] = LED_SETTINGS[2];
 8011024:	7097      	strb	r7, [r2, #2]
		temp_buffer[3] = LED_SETTINGS[3];
 8011026:	70d6      	strb	r6, [r2, #3]
		temp_buffer[4] = LED_SETTINGS[4];
 8011028:	7115      	strb	r5, [r2, #4]
		temp_buffer[5] = LED_SETTINGS[5];
 801102a:	7154      	strb	r4, [r2, #5]
		button_state = 0;
 801102c:	7019      	strb	r1, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim4);
 801102e:	4803      	ldr	r0, [pc, #12]	; (801103c <disable_buttons+0x4c>)
}
 8011030:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		HAL_TIM_Base_Start_IT(&htim4);
 8011034:	f7f4 bf60 	b.w	8005ef8 <HAL_TIM_Base_Start_IT>
 8011038:	2000003a 	.word	0x2000003a
 801103c:	20005ae4 	.word	0x20005ae4
 8011040:	20005398 	.word	0x20005398
 8011044:	20005994 	.word	0x20005994

08011048 <enable_buttons>:
void enable_buttons(void){
 8011048:	b570      	push	{r4, r5, r6, lr}
	HAL_TIM_Base_Stop_IT(&htim4);
 801104a:	480b      	ldr	r0, [pc, #44]	; (8011078 <enable_buttons+0x30>)
 801104c:	f7f4 ff6c 	bl	8005f28 <HAL_TIM_Base_Stop_IT>
	LED_SETTINGS[0] = temp_buffer[0];
 8011050:	4a0a      	ldr	r2, [pc, #40]	; (801107c <enable_buttons+0x34>)
 8011052:	4b0b      	ldr	r3, [pc, #44]	; (8011080 <enable_buttons+0x38>)
 8011054:	7816      	ldrb	r6, [r2, #0]
	LED_SETTINGS[1] = temp_buffer[1];
 8011056:	7855      	ldrb	r5, [r2, #1]
	LED_SETTINGS[2] = temp_buffer[2];
 8011058:	7894      	ldrb	r4, [r2, #2]
	LED_SETTINGS[3] = temp_buffer[3];
 801105a:	78d0      	ldrb	r0, [r2, #3]
	LED_SETTINGS[4] = temp_buffer[4];
 801105c:	7911      	ldrb	r1, [r2, #4]
	LED_SETTINGS[5] = temp_buffer[5];
 801105e:	7952      	ldrb	r2, [r2, #5]
	LED_SETTINGS[0] = temp_buffer[0];
 8011060:	701e      	strb	r6, [r3, #0]
	LED_SETTINGS[1] = temp_buffer[1];
 8011062:	705d      	strb	r5, [r3, #1]
	LED_SETTINGS[2] = temp_buffer[2];
 8011064:	709c      	strb	r4, [r3, #2]
	LED_SETTINGS[3] = temp_buffer[3];
 8011066:	70d8      	strb	r0, [r3, #3]
	LED_SETTINGS[4] = temp_buffer[4];
 8011068:	7119      	strb	r1, [r3, #4]
	LED_SETTINGS[5] = temp_buffer[5];
 801106a:	715a      	strb	r2, [r3, #5]
	transmitToBuffer();
 801106c:	f7ff f91e 	bl	80102ac <transmitToBuffer>
	button_state = 1;
 8011070:	4b04      	ldr	r3, [pc, #16]	; (8011084 <enable_buttons+0x3c>)
 8011072:	2201      	movs	r2, #1
 8011074:	701a      	strb	r2, [r3, #0]
 8011076:	bd70      	pop	{r4, r5, r6, pc}
 8011078:	20005ae4 	.word	0x20005ae4
 801107c:	20005994 	.word	0x20005994
 8011080:	20005398 	.word	0x20005398
 8011084:	2000003a 	.word	0x2000003a

08011088 <isButtonEnabled>:
	return button_state;
 8011088:	4b01      	ldr	r3, [pc, #4]	; (8011090 <isButtonEnabled+0x8>)
}
 801108a:	7818      	ldrb	r0, [r3, #0]
 801108c:	4770      	bx	lr
 801108e:	bf00      	nop
 8011090:	2000003a 	.word	0x2000003a

08011094 <MX_RTC_Init>:
void MX_RTC_Init(void)
{

  /**Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8011094:	4b0b      	ldr	r3, [pc, #44]	; (80110c4 <MX_RTC_Init+0x30>)
 8011096:	4a0c      	ldr	r2, [pc, #48]	; (80110c8 <MX_RTC_Init+0x34>)
{
 8011098:	b510      	push	{r4, lr}
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
 801109a:	21ff      	movs	r1, #255	; 0xff
  hrtc.Instance = RTC;
 801109c:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = 127;
 801109e:	247f      	movs	r4, #127	; 0x7f
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80110a0:	2200      	movs	r2, #0
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80110a2:	4618      	mov	r0, r3
  hrtc.Init.AsynchPrediv = 127;
 80110a4:	609c      	str	r4, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80110a6:	60d9      	str	r1, [r3, #12]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80110a8:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80110aa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80110ac:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80110ae:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80110b0:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80110b2:	f7f3 ff81 	bl	8004fb8 <HAL_RTC_Init>
 80110b6:	b900      	cbnz	r0, 80110ba <MX_RTC_Init+0x26>
 80110b8:	bd10      	pop	{r4, pc}
  {
    Error_Handler();
  }

}
 80110ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80110be:	f7ff bd09 	b.w	8010ad4 <Error_Handler>
 80110c2:	bf00      	nop
 80110c4:	2000599c 	.word	0x2000599c
 80110c8:	40002800 	.word	0x40002800

080110cc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 80110cc:	6802      	ldr	r2, [r0, #0]
 80110ce:	4b06      	ldr	r3, [pc, #24]	; (80110e8 <HAL_RTC_MspInit+0x1c>)
 80110d0:	429a      	cmp	r2, r3
 80110d2:	d000      	beq.n	80110d6 <HAL_RTC_MspInit+0xa>
 80110d4:	4770      	bx	lr
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80110d6:	4a05      	ldr	r2, [pc, #20]	; (80110ec <HAL_RTC_MspInit+0x20>)
 80110d8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80110dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80110e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80110e4:	4770      	bx	lr
 80110e6:	bf00      	nop
 80110e8:	40002800 	.word	0x40002800
 80110ec:	40021000 	.word	0x40021000

080110f0 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 80110f0:	b508      	push	{r3, lr}

  hsd1.Instance = SDMMC1;
 80110f2:	4b0a      	ldr	r3, [pc, #40]	; (801111c <MX_SDMMC1_SD_Init+0x2c>)
 80110f4:	4a0a      	ldr	r2, [pc, #40]	; (8011120 <MX_SDMMC1_SD_Init+0x30>)
 80110f6:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80110f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80110fc:	2200      	movs	r2, #0
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 0;
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80110fe:	4618      	mov	r0, r3
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8011100:	60d9      	str	r1, [r3, #12]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8011102:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8011104:	609a      	str	r2, [r3, #8]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8011106:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8011108:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 801110a:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 801110c:	f7f4 f980 	bl	8005410 <HAL_SD_Init>
 8011110:	b900      	cbnz	r0, 8011114 <MX_SDMMC1_SD_Init+0x24>
 8011112:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
  }

}
 8011114:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8011118:	f7ff bcdc 	b.w	8010ad4 <Error_Handler>
 801111c:	200059c0 	.word	0x200059c0
 8011120:	50062400 	.word	0x50062400

08011124 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8011124:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
 8011126:	6802      	ldr	r2, [r0, #0]
 8011128:	4b21      	ldr	r3, [pc, #132]	; (80111b0 <HAL_SD_MspInit+0x8c>)
{
 801112a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801112c:	2400      	movs	r4, #0
  if(sdHandle->Instance==SDMMC1)
 801112e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011130:	9404      	str	r4, [sp, #16]
 8011132:	9403      	str	r4, [sp, #12]
 8011134:	9405      	str	r4, [sp, #20]
 8011136:	9406      	str	r4, [sp, #24]
 8011138:	9407      	str	r4, [sp, #28]
  if(sdHandle->Instance==SDMMC1)
 801113a:	d001      	beq.n	8011140 <HAL_SD_MspInit+0x1c>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 801113c:	b009      	add	sp, #36	; 0x24
 801113e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8011140:	4b1c      	ldr	r3, [pc, #112]	; (80111b4 <HAL_SD_MspInit+0x90>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011142:	481d      	ldr	r0, [pc, #116]	; (80111b8 <HAL_SD_MspInit+0x94>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8011144:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011146:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 801114a:	64da      	str	r2, [r3, #76]	; 0x4c
 801114c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801114e:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8011152:	9200      	str	r2, [sp, #0]
 8011154:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011156:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011158:	f042 0204 	orr.w	r2, r2, #4
 801115c:	64da      	str	r2, [r3, #76]	; 0x4c
 801115e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011160:	f002 0204 	and.w	r2, r2, #4
 8011164:	9201      	str	r2, [sp, #4]
 8011166:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8011168:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801116a:	f042 0208 	orr.w	r2, r2, #8
 801116e:	64da      	str	r2, [r3, #76]	; 0x4c
 8011170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8011172:	250c      	movs	r5, #12
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8011174:	f003 0308 	and.w	r3, r3, #8
 8011178:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801117a:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 801117c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011180:	2603      	movs	r6, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011182:	eb0d 0105 	add.w	r1, sp, r5
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8011186:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8011188:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801118a:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801118c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 801118e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011190:	f7f0 fedc 	bl	8001f4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8011194:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011196:	eb0d 0105 	add.w	r1, sp, r5
 801119a:	4808      	ldr	r0, [pc, #32]	; (80111bc <HAL_SD_MspInit+0x98>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801119c:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801119e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80111a0:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80111a2:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80111a4:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80111a6:	f7f0 fed1 	bl	8001f4c <HAL_GPIO_Init>
}
 80111aa:	b009      	add	sp, #36	; 0x24
 80111ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111ae:	bf00      	nop
 80111b0:	50062400 	.word	0x50062400
 80111b4:	40021000 	.word	0x40021000
 80111b8:	48000800 	.word	0x48000800
 80111bc:	48000c00 	.word	0x48000c00

080111c0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80111c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  hspi2.Instance = SPI2;
 80111c2:	4b12      	ldr	r3, [pc, #72]	; (801120c <MX_SPI2_Init+0x4c>)
 80111c4:	4a12      	ldr	r2, [pc, #72]	; (8011210 <MX_SPI2_Init+0x50>)
 80111c6:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80111c8:	f44f 7082 	mov.w	r0, #260	; 0x104
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80111cc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80111d0:	2702      	movs	r7, #2
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80111d2:	2601      	movs	r6, #1
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80111d4:	f44f 7500 	mov.w	r5, #512	; 0x200
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80111d8:	2428      	movs	r4, #40	; 0x28
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
 80111da:	2107      	movs	r1, #7
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80111dc:	6058      	str	r0, [r3, #4]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80111de:	60da      	str	r2, [r3, #12]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80111e0:	4618      	mov	r0, r3
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80111e2:	2200      	movs	r2, #0
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80111e4:	611f      	str	r7, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80111e6:	615e      	str	r6, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80111e8:	619d      	str	r5, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80111ea:	61dc      	str	r4, [r3, #28]
  hspi2.Init.CRCPolynomial = 7;
 80111ec:	62d9      	str	r1, [r3, #44]	; 0x2c
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80111ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80111f0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80111f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80111f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80111f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80111f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80111fa:	f7f4 fbb1 	bl	8005960 <HAL_SPI_Init>
 80111fe:	b900      	cbnz	r0, 8011202 <MX_SPI2_Init+0x42>
 8011200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    Error_Handler();
  }

}
 8011202:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Error_Handler();
 8011206:	f7ff bc65 	b.w	8010ad4 <Error_Handler>
 801120a:	bf00      	nop
 801120c:	20005a40 	.word	0x20005a40
 8011210:	40003800 	.word	0x40003800

08011214 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8011214:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI2)
 8011216:	6802      	ldr	r2, [r0, #0]
 8011218:	4b24      	ldr	r3, [pc, #144]	; (80112ac <HAL_SPI_MspInit+0x98>)
{
 801121a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801121c:	2400      	movs	r4, #0
  if(spiHandle->Instance==SPI2)
 801121e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011220:	9404      	str	r4, [sp, #16]
 8011222:	9403      	str	r4, [sp, #12]
 8011224:	9405      	str	r4, [sp, #20]
 8011226:	9406      	str	r4, [sp, #24]
 8011228:	9407      	str	r4, [sp, #28]
  if(spiHandle->Instance==SPI2)
 801122a:	d001      	beq.n	8011230 <HAL_SPI_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 801122c:	b009      	add	sp, #36	; 0x24
 801122e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8011230:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8011234:	2505      	movs	r5, #5
    __HAL_RCC_SPI2_CLK_ENABLE();
 8011236:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(LED_MOSI_GPIO_Port, &GPIO_InitStruct);
 8011238:	481d      	ldr	r0, [pc, #116]	; (80112b0 <HAL_SPI_MspInit+0x9c>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 801123a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801123e:	659a      	str	r2, [r3, #88]	; 0x58
 8011240:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011242:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8011246:	9200      	str	r2, [sp, #0]
 8011248:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801124a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801124c:	f042 0204 	orr.w	r2, r2, #4
 8011250:	64da      	str	r2, [r3, #76]	; 0x4c
 8011252:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011254:	f002 0204 	and.w	r2, r2, #4
 8011258:	9201      	str	r2, [sp, #4]
 801125a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801125c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801125e:	f042 0202 	orr.w	r2, r2, #2
 8011262:	64da      	str	r2, [r3, #76]	; 0x4c
 8011264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8011266:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011268:	f003 0302 	and.w	r3, r3, #2
 801126c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801126e:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = LED_MOSI_Pin;
 8011270:	2308      	movs	r3, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011272:	2603      	movs	r6, #3
    HAL_GPIO_Init(LED_MOSI_GPIO_Port, &GPIO_InitStruct);
 8011274:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011276:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = LED_MOSI_Pin;
 8011278:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801127a:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801127c:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(LED_MOSI_GPIO_Port, &GPIO_InitStruct);
 801127e:	f7f0 fe65 	bl	8001f4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED_SCK_Pin;
 8011282:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(LED_SCK_GPIO_Port, &GPIO_InitStruct);
 8011286:	a903      	add	r1, sp, #12
 8011288:	480a      	ldr	r0, [pc, #40]	; (80112b4 <HAL_SPI_MspInit+0xa0>)
    GPIO_InitStruct.Pin = LED_SCK_Pin;
 801128a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801128c:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801128e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8011290:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011292:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(LED_SCK_GPIO_Port, &GPIO_InitStruct);
 8011294:	f7f0 fe5a 	bl	8001f4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8011298:	4622      	mov	r2, r4
 801129a:	4629      	mov	r1, r5
 801129c:	2024      	movs	r0, #36	; 0x24
 801129e:	f7f0 faa7 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80112a2:	2024      	movs	r0, #36	; 0x24
 80112a4:	f7f0 fada 	bl	800185c <HAL_NVIC_EnableIRQ>
}
 80112a8:	b009      	add	sp, #36	; 0x24
 80112aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112ac:	40003800 	.word	0x40003800
 80112b0:	48000800 	.word	0x48000800
 80112b4:	48000400 	.word	0x48000400

080112b8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80112b8:	4b0e      	ldr	r3, [pc, #56]	; (80112f4 <HAL_MspInit+0x3c>)
{
 80112ba:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80112bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80112be:	f042 0201 	orr.w	r2, r2, #1
 80112c2:	661a      	str	r2, [r3, #96]	; 0x60
 80112c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80112c6:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80112c8:	f002 0201 	and.w	r2, r2, #1
 80112cc:	9200      	str	r2, [sp, #0]
 80112ce:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80112d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80112d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80112d6:	659a      	str	r2, [r3, #88]	; 0x58
 80112d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80112da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80112de:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80112e0:	2200      	movs	r2, #0
 80112e2:	210f      	movs	r1, #15
 80112e4:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 80112e8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80112ea:	f7f0 fa81 	bl	80017f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80112ee:	b003      	add	sp, #12
 80112f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80112f4:	40021000 	.word	0x40021000

080112f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80112f8:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 80112fa:	4601      	mov	r1, r0
{
 80112fc:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 80112fe:	2200      	movs	r2, #0
 8011300:	201c      	movs	r0, #28
 8011302:	f7f0 fa75 	bl	80017f0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8011306:	201c      	movs	r0, #28
 8011308:	f7f0 faa8 	bl	800185c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 801130c:	4b15      	ldr	r3, [pc, #84]	; (8011364 <HAL_InitTick+0x6c>)
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 801130e:	4c16      	ldr	r4, [pc, #88]	; (8011368 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM2_CLK_ENABLE();
 8011310:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011312:	f042 0201 	orr.w	r2, r2, #1
 8011316:	659a      	str	r2, [r3, #88]	; 0x58
 8011318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801131a:	f003 0301 	and.w	r3, r3, #1
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801131e:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM2_CLK_ENABLE();
 8011320:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8011322:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 8011324:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8011326:	f7f3 fa7f 	bl	8004828 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 801132a:	f7f3 fa59 	bl	80047e0 <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 801132e:	4b0f      	ldr	r3, [pc, #60]	; (801136c <HAL_InitTick+0x74>)
 8011330:	fba3 2300 	umull	r2, r3, r3, r0
 8011334:	0c9b      	lsrs	r3, r3, #18
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
  htim2.Init.Prescaler = uwPrescalerValue;
  htim2.Init.ClockDivision = 0;
 8011336:	2200      	movs	r2, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8011338:	3b01      	subs	r3, #1
  htim2.Instance = TIM2;
 801133a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  htim2.Init.Period = (1000000 / 1000) - 1;
 801133e:	f240 31e7 	movw	r1, #999	; 0x3e7
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8011342:	4620      	mov	r0, r4
  htim2.Init.Prescaler = uwPrescalerValue;
 8011344:	6063      	str	r3, [r4, #4]
  htim2.Instance = TIM2;
 8011346:	6025      	str	r5, [r4, #0]
  htim2.Init.Period = (1000000 / 1000) - 1;
 8011348:	60e1      	str	r1, [r4, #12]
  htim2.Init.ClockDivision = 0;
 801134a:	6122      	str	r2, [r4, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801134c:	60a2      	str	r2, [r4, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 801134e:	f7f4 fd1f 	bl	8005d90 <HAL_TIM_Base_Init>
 8011352:	b110      	cbz	r0, 801135a <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8011354:	2001      	movs	r0, #1
}
 8011356:	b009      	add	sp, #36	; 0x24
 8011358:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim2);
 801135a:	4620      	mov	r0, r4
 801135c:	f7f4 fdcc 	bl	8005ef8 <HAL_TIM_Base_Start_IT>
}
 8011360:	b009      	add	sp, #36	; 0x24
 8011362:	bd30      	pop	{r4, r5, pc}
 8011364:	40021000 	.word	0x40021000
 8011368:	20005aa4 	.word	0x20005aa4
 801136c:	431bde83 	.word	0x431bde83

08011370 <NMI_Handler>:
 8011370:	4770      	bx	lr
 8011372:	bf00      	nop

08011374 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8011374:	e7fe      	b.n	8011374 <HardFault_Handler>
 8011376:	bf00      	nop

08011378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8011378:	e7fe      	b.n	8011378 <MemManage_Handler>
 801137a:	bf00      	nop

0801137c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801137c:	e7fe      	b.n	801137c <BusFault_Handler>
 801137e:	bf00      	nop

08011380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8011380:	e7fe      	b.n	8011380 <UsageFault_Handler>
 8011382:	bf00      	nop

08011384 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8011384:	4770      	bx	lr
 8011386:	bf00      	nop

08011388 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8011388:	2001      	movs	r0, #1
 801138a:	f7f0 bf05 	b.w	8002198 <HAL_GPIO_EXTI_IRQHandler>
 801138e:	bf00      	nop

08011390 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8011390:	2002      	movs	r0, #2
 8011392:	f7f0 bf01 	b.w	8002198 <HAL_GPIO_EXTI_IRQHandler>
 8011396:	bf00      	nop

08011398 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8011398:	2004      	movs	r0, #4
 801139a:	f7f0 befd 	b.w	8002198 <HAL_GPIO_EXTI_IRQHandler>
 801139e:	bf00      	nop

080113a0 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80113a0:	2008      	movs	r0, #8
 80113a2:	f7f0 bef9 	b.w	8002198 <HAL_GPIO_EXTI_IRQHandler>
 80113a6:	bf00      	nop

080113a8 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80113a8:	4801      	ldr	r0, [pc, #4]	; (80113b0 <DMA1_Channel1_IRQHandler+0x8>)
 80113aa:	f7f0 bd81 	b.w	8001eb0 <HAL_DMA_IRQHandler>
 80113ae:	bf00      	nop
 80113b0:	20005464 	.word	0x20005464

080113b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80113b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80113b6:	2020      	movs	r0, #32
 80113b8:	f7f0 feee 	bl	8002198 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80113bc:	2080      	movs	r0, #128	; 0x80
 80113be:	f7f0 feeb 	bl	8002198 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80113c2:	f44f 7080 	mov.w	r0, #256	; 0x100
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80113c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80113ca:	f7f0 bee5 	b.w	8002198 <HAL_GPIO_EXTI_IRQHandler>
 80113ce:	bf00      	nop

080113d0 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80113d0:	4801      	ldr	r0, [pc, #4]	; (80113d8 <TIM2_IRQHandler+0x8>)
 80113d2:	f7f5 b939 	b.w	8006648 <HAL_TIM_IRQHandler>
 80113d6:	bf00      	nop
 80113d8:	20005aa4 	.word	0x20005aa4

080113dc <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80113dc:	4801      	ldr	r0, [pc, #4]	; (80113e4 <TIM3_IRQHandler+0x8>)
 80113de:	f7f5 b933 	b.w	8006648 <HAL_TIM_IRQHandler>
 80113e2:	bf00      	nop
 80113e4:	20005b64 	.word	0x20005b64

080113e8 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80113e8:	4801      	ldr	r0, [pc, #4]	; (80113f0 <TIM4_IRQHandler+0x8>)
 80113ea:	f7f5 b92d 	b.w	8006648 <HAL_TIM_IRQHandler>
 80113ee:	bf00      	nop
 80113f0:	20005ae4 	.word	0x20005ae4

080113f4 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80113f4:	4801      	ldr	r0, [pc, #4]	; (80113fc <I2C1_EV_IRQHandler+0x8>)
 80113f6:	f7f1 bcfd 	b.w	8002df4 <HAL_I2C_EV_IRQHandler>
 80113fa:	bf00      	nop
 80113fc:	20005534 	.word	0x20005534

08011400 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8011400:	4801      	ldr	r0, [pc, #4]	; (8011408 <I2C2_EV_IRQHandler+0x8>)
 8011402:	f7f1 bcf7 	b.w	8002df4 <HAL_I2C_EV_IRQHandler>
 8011406:	bf00      	nop
 8011408:	20005580 	.word	0x20005580

0801140c <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 801140c:	4801      	ldr	r0, [pc, #4]	; (8011414 <SPI2_IRQHandler+0x8>)
 801140e:	f7f4 bc37 	b.w	8005c80 <HAL_SPI_IRQHandler>
 8011412:	bf00      	nop
 8011414:	20005a40 	.word	0x20005a40

08011418 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8011418:	4801      	ldr	r0, [pc, #4]	; (8011420 <USART1_IRQHandler+0x8>)
 801141a:	f7f5 bc87 	b.w	8006d2c <HAL_UART_IRQHandler>
 801141e:	bf00      	nop
 8011420:	20005d28 	.word	0x20005d28

08011424 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8011424:	4801      	ldr	r0, [pc, #4]	; (801142c <USART3_IRQHandler+0x8>)
 8011426:	f7f5 bc81 	b.w	8006d2c <HAL_UART_IRQHandler>
 801142a:	bf00      	nop
 801142c:	20005ca4 	.word	0x20005ca4

08011430 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8011430:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8011432:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8011436:	f7f0 feaf 	bl	8002198 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 801143a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801143e:	f7f0 feab 	bl	8002198 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8011442:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8011446:	f7f0 fea7 	bl	8002198 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 801144a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801144e:	f7f0 fea3 	bl	8002198 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8011452:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8011456:	f7f0 fe9f 	bl	8002198 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 801145a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 801145e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8011462:	f7f0 be99 	b.w	8002198 <HAL_GPIO_EXTI_IRQHandler>
 8011466:	bf00      	nop

08011468 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8011468:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 801146a:	4804      	ldr	r0, [pc, #16]	; (801147c <TIM6_DAC_IRQHandler+0x14>)
 801146c:	f7f5 f8ec 	bl	8006648 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8011470:	4803      	ldr	r0, [pc, #12]	; (8011480 <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8011472:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DAC_IRQHandler(&hdac1);
 8011476:	f7f0 baf1 	b.w	8001a5c <HAL_DAC_IRQHandler>
 801147a:	bf00      	nop
 801147c:	20005ba4 	.word	0x20005ba4
 8011480:	20005450 	.word	0x20005450

08011484 <COMP_IRQHandler>:
void COMP_IRQHandler(void)
{
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8011484:	4801      	ldr	r0, [pc, #4]	; (801148c <COMP_IRQHandler+0x8>)
 8011486:	f7f0 b97d 	b.w	8001784 <HAL_COMP_IRQHandler>
 801148a:	bf00      	nop
 801148c:	20005424 	.word	0x20005424

08011490 <I2C3_EV_IRQHandler>:
void I2C3_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8011490:	4801      	ldr	r0, [pc, #4]	; (8011498 <I2C3_EV_IRQHandler+0x8>)
 8011492:	f7f1 bcaf 	b.w	8002df4 <HAL_I2C_EV_IRQHandler>
 8011496:	bf00      	nop
 8011498:	200054e8 	.word	0x200054e8

0801149c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801149c:	4911      	ldr	r1, [pc, #68]	; (80114e4 <SystemInit+0x48>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 801149e:	4b12      	ldr	r3, [pc, #72]	; (80114e8 <SystemInit+0x4c>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80114a0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80114a4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 80114a8:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80114aa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_MSION;
 80114ae:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80114b0:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80114b2:	f042 0201 	orr.w	r2, r2, #1
 80114b6:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80114b8:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80114ba:	681a      	ldr	r2, [r3, #0]
 80114bc:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80114c0:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80114c4:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  RCC->CR &= 0xEAF6FFFFU;
 80114c8:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x00001000U;
 80114ca:	60dc      	str	r4, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80114cc:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80114ce:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= 0xFFFBFFFFU;
 80114d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80114d6:	601a      	str	r2, [r3, #0]
  RCC->CIER = 0x00000000U;
 80114d8:	6198      	str	r0, [r3, #24]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80114da:	608c      	str	r4, [r1, #8]
#endif
}
 80114dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114e0:	4770      	bx	lr
 80114e2:	bf00      	nop
 80114e4:	e000ed00 	.word	0xe000ed00
 80114e8:	40021000 	.word	0x40021000

080114ec <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80114ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80114ee:	2400      	movs	r4, #0
{
 80114f0:	b0a1      	sub	sp, #132	; 0x84
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  htim1.Instance = TIM1;
 80114f2:	4d4c      	ldr	r5, [pc, #304]	; (8011624 <MX_TIM1_Init+0x138>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80114f4:	9406      	str	r4, [sp, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80114f6:	4621      	mov	r1, r4
 80114f8:	222c      	movs	r2, #44	; 0x2c
 80114fa:	a815      	add	r0, sp, #84	; 0x54
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80114fc:	9405      	str	r4, [sp, #20]
 80114fe:	9407      	str	r4, [sp, #28]
 8011500:	9408      	str	r4, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011502:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8011504:	940e      	str	r4, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011506:	9403      	str	r4, [sp, #12]
 8011508:	9404      	str	r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801150a:	940f      	str	r4, [sp, #60]	; 0x3c
 801150c:	9410      	str	r4, [sp, #64]	; 0x40
 801150e:	9411      	str	r4, [sp, #68]	; 0x44
 8011510:	9412      	str	r4, [sp, #72]	; 0x48
 8011512:	9413      	str	r4, [sp, #76]	; 0x4c
 8011514:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8011516:	f002 fce4 	bl	8013ee2 <memset>
  htim1.Instance = TIM1;
 801151a:	4943      	ldr	r1, [pc, #268]	; (8011628 <MX_TIM1_Init+0x13c>)
  htim1.Init.Prescaler = 7;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 801151c:	60ac      	str	r4, [r5, #8]
  htim1.Init.Prescaler = 7;
 801151e:	2207      	movs	r2, #7
  htim1.Init.Period = 99;
 8011520:	2363      	movs	r3, #99	; 0x63
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8011522:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011524:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8011526:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011528:	61ac      	str	r4, [r5, #24]
  htim1.Init.Prescaler = 7;
 801152a:	e885 0006 	stmia.w	r5, {r1, r2}
  htim1.Init.Period = 99;
 801152e:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8011530:	f7f4 fc2e 	bl	8005d90 <HAL_TIM_Base_Init>
 8011534:	2800      	cmp	r0, #0
 8011536:	d157      	bne.n	80115e8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8011538:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 801153c:	a905      	add	r1, sp, #20
 801153e:	4839      	ldr	r0, [pc, #228]	; (8011624 <MX_TIM1_Init+0x138>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8011540:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8011542:	f7f4 ffc3 	bl	80064cc <HAL_TIM_ConfigClockSource>
 8011546:	2800      	cmp	r0, #0
 8011548:	d14b      	bne.n	80115e2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 801154a:	4836      	ldr	r0, [pc, #216]	; (8011624 <MX_TIM1_Init+0x138>)
 801154c:	f7f4 fd04 	bl	8005f58 <HAL_TIM_PWM_Init>
 8011550:	2800      	cmp	r0, #0
 8011552:	d143      	bne.n	80115dc <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011554:	2300      	movs	r3, #0
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8011556:	a902      	add	r1, sp, #8
 8011558:	4832      	ldr	r0, [pc, #200]	; (8011624 <MX_TIM1_Init+0x138>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801155a:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 801155c:	9303      	str	r3, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801155e:	9304      	str	r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8011560:	f7f5 f92a 	bl	80067b8 <HAL_TIMEx_MasterConfigSynchronization>
 8011564:	2800      	cmp	r0, #0
 8011566:	d136      	bne.n	80115d6 <MX_TIM1_Init+0xea>
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 40;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8011568:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801156a:	2760      	movs	r7, #96	; 0x60
  sConfigOC.Pulse = 40;
 801156c:	2628      	movs	r6, #40	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 801156e:	2402      	movs	r4, #2
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8011570:	a90e      	add	r1, sp, #56	; 0x38
 8011572:	461a      	mov	r2, r3
 8011574:	482b      	ldr	r0, [pc, #172]	; (8011624 <MX_TIM1_Init+0x138>)
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8011576:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8011578:	9312      	str	r3, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801157a:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801157c:	9314      	str	r3, [sp, #80]	; 0x50
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801157e:	970e      	str	r7, [sp, #56]	; 0x38
  sConfigOC.Pulse = 40;
 8011580:	960f      	str	r6, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8011582:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8011584:	f7f4 fdc0 	bl	8006108 <HAL_TIM_PWM_ConfigChannel>
 8011588:	bb10      	cbnz	r0, 80115d0 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 801158a:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801158c:	f44f 5400 	mov.w	r4, #8192	; 0x2000
  sBreakDeadTimeConfig.BreakFilter = 0;
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8011590:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  sBreakDeadTimeConfig.Break2Filter = 0;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8011594:	a915      	add	r1, sp, #84	; 0x54
 8011596:	4823      	ldr	r0, [pc, #140]	; (8011624 <MX_TIM1_Init+0x138>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8011598:	9315      	str	r3, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 801159a:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 801159c:	9317      	str	r3, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.DeadTime = 0;
 801159e:	9318      	str	r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80115a0:	9319      	str	r3, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.BreakFilter = 0;
 80115a2:	931b      	str	r3, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80115a4:	931c      	str	r3, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.Break2Filter = 0;
 80115a6:	931e      	str	r3, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80115a8:	931f      	str	r3, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80115aa:	941a      	str	r4, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80115ac:	921d      	str	r2, [sp, #116]	; 0x74
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80115ae:	f7f5 f933 	bl	8006818 <HAL_TIMEx_ConfigBreakDeadTime>
 80115b2:	b108      	cbz	r0, 80115b8 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80115b4:	f7ff fa8e 	bl	8010ad4 <Error_Handler>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 80115b8:	6829      	ldr	r1, [r5, #0]
 80115ba:	4a1b      	ldr	r2, [pc, #108]	; (8011628 <MX_TIM1_Init+0x13c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80115bc:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM1)
 80115be:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80115c0:	930a      	str	r3, [sp, #40]	; 0x28
 80115c2:	9309      	str	r3, [sp, #36]	; 0x24
 80115c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80115c6:	930c      	str	r3, [sp, #48]	; 0x30
 80115c8:	930d      	str	r3, [sp, #52]	; 0x34
  if(timHandle->Instance==TIM1)
 80115ca:	d010      	beq.n	80115ee <MX_TIM1_Init+0x102>
}
 80115cc:	b021      	add	sp, #132	; 0x84
 80115ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 80115d0:	f7ff fa80 	bl	8010ad4 <Error_Handler>
 80115d4:	e7d9      	b.n	801158a <MX_TIM1_Init+0x9e>
    Error_Handler();
 80115d6:	f7ff fa7d 	bl	8010ad4 <Error_Handler>
 80115da:	e7c5      	b.n	8011568 <MX_TIM1_Init+0x7c>
    Error_Handler();
 80115dc:	f7ff fa7a 	bl	8010ad4 <Error_Handler>
 80115e0:	e7b8      	b.n	8011554 <MX_TIM1_Init+0x68>
    Error_Handler();
 80115e2:	f7ff fa77 	bl	8010ad4 <Error_Handler>
 80115e6:	e7b0      	b.n	801154a <MX_TIM1_Init+0x5e>
    Error_Handler();
 80115e8:	f7ff fa74 	bl	8010ad4 <Error_Handler>
 80115ec:	e7a4      	b.n	8011538 <MX_TIM1_Init+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80115ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80115f2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = LED_PWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 80115f6:	480d      	ldr	r0, [pc, #52]	; (801162c <MX_TIM1_Init+0x140>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80115f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80115fa:	f042 0210 	orr.w	r2, r2, #16
 80115fe:	64da      	str	r2, [r3, #76]	; 0x4c
 8011600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011602:	f003 0310 	and.w	r3, r3, #16
 8011606:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011608:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 801160a:	2301      	movs	r3, #1
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 801160c:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 801160e:	f44f 7400 	mov.w	r4, #512	; 0x200
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8011612:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 8011614:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011616:	920a      	str	r2, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8011618:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 801161a:	f7f0 fc97 	bl	8001f4c <HAL_GPIO_Init>
}
 801161e:	b021      	add	sp, #132	; 0x84
 8011620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011622:	bf00      	nop
 8011624:	20005be4 	.word	0x20005be4
 8011628:	40012c00 	.word	0x40012c00
 801162c:	48001000 	.word	0x48001000

08011630 <MX_TIM3_Init>:
{
 8011630:	b510      	push	{r4, lr}
  htim3.Instance = TIM3;
 8011632:	4a19      	ldr	r2, [pc, #100]	; (8011698 <MX_TIM3_Init+0x68>)
 8011634:	4b19      	ldr	r3, [pc, #100]	; (801169c <MX_TIM3_Init+0x6c>)
 8011636:	6013      	str	r3, [r2, #0]
{
 8011638:	b088      	sub	sp, #32
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801163a:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 799;
 801163c:	f240 341f 	movw	r4, #799	; 0x31f
  htim3.Init.Period = 9;
 8011640:	2109      	movs	r1, #9
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8011642:	4610      	mov	r0, r2
  htim3.Init.Prescaler = 799;
 8011644:	6054      	str	r4, [r2, #4]
  htim3.Init.Period = 9;
 8011646:	60d1      	str	r1, [r2, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011648:	6093      	str	r3, [r2, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801164a:	9304      	str	r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801164c:	9301      	str	r3, [sp, #4]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801164e:	6113      	str	r3, [r2, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011650:	6193      	str	r3, [r2, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8011652:	9305      	str	r3, [sp, #20]
 8011654:	9306      	str	r3, [sp, #24]
 8011656:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011658:	9302      	str	r3, [sp, #8]
 801165a:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 801165c:	f7f4 fb98 	bl	8005d90 <HAL_TIM_Base_Init>
 8011660:	b9b0      	cbnz	r0, 8011690 <MX_TIM3_Init+0x60>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8011662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8011666:	a904      	add	r1, sp, #16
 8011668:	480b      	ldr	r0, [pc, #44]	; (8011698 <MX_TIM3_Init+0x68>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801166a:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 801166c:	f7f4 ff2e 	bl	80064cc <HAL_TIM_ConfigClockSource>
 8011670:	b958      	cbnz	r0, 801168a <MX_TIM3_Init+0x5a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011672:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8011674:	a901      	add	r1, sp, #4
 8011676:	4808      	ldr	r0, [pc, #32]	; (8011698 <MX_TIM3_Init+0x68>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011678:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801167a:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 801167c:	f7f5 f89c 	bl	80067b8 <HAL_TIMEx_MasterConfigSynchronization>
 8011680:	b108      	cbz	r0, 8011686 <MX_TIM3_Init+0x56>
    Error_Handler();
 8011682:	f7ff fa27 	bl	8010ad4 <Error_Handler>
}
 8011686:	b008      	add	sp, #32
 8011688:	bd10      	pop	{r4, pc}
    Error_Handler();
 801168a:	f7ff fa23 	bl	8010ad4 <Error_Handler>
 801168e:	e7f0      	b.n	8011672 <MX_TIM3_Init+0x42>
    Error_Handler();
 8011690:	f7ff fa20 	bl	8010ad4 <Error_Handler>
 8011694:	e7e5      	b.n	8011662 <MX_TIM3_Init+0x32>
 8011696:	bf00      	nop
 8011698:	20005b64 	.word	0x20005b64
 801169c:	40000400 	.word	0x40000400

080116a0 <MX_TIM4_Init>:
{
 80116a0:	b510      	push	{r4, lr}
  htim4.Instance = TIM4;
 80116a2:	4a19      	ldr	r2, [pc, #100]	; (8011708 <MX_TIM4_Init+0x68>)
 80116a4:	4b19      	ldr	r3, [pc, #100]	; (801170c <MX_TIM4_Init+0x6c>)
 80116a6:	6013      	str	r3, [r2, #0]
{
 80116a8:	b088      	sub	sp, #32
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80116aa:	2300      	movs	r3, #0
  htim4.Init.Prescaler = 7999;
 80116ac:	f641 743f 	movw	r4, #7999	; 0x1f3f
  htim4.Init.Period = 6000;
 80116b0:	f241 7170 	movw	r1, #6000	; 0x1770
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80116b4:	4610      	mov	r0, r2
  htim4.Init.Prescaler = 7999;
 80116b6:	6054      	str	r4, [r2, #4]
  htim4.Init.Period = 6000;
 80116b8:	60d1      	str	r1, [r2, #12]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80116ba:	6093      	str	r3, [r2, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80116bc:	9304      	str	r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80116be:	9301      	str	r3, [sp, #4]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80116c0:	6113      	str	r3, [r2, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80116c2:	6193      	str	r3, [r2, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80116c4:	9305      	str	r3, [sp, #20]
 80116c6:	9306      	str	r3, [sp, #24]
 80116c8:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80116ca:	9302      	str	r3, [sp, #8]
 80116cc:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80116ce:	f7f4 fb5f 	bl	8005d90 <HAL_TIM_Base_Init>
 80116d2:	b9b0      	cbnz	r0, 8011702 <MX_TIM4_Init+0x62>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80116d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80116d8:	a904      	add	r1, sp, #16
 80116da:	480b      	ldr	r0, [pc, #44]	; (8011708 <MX_TIM4_Init+0x68>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80116dc:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80116de:	f7f4 fef5 	bl	80064cc <HAL_TIM_ConfigClockSource>
 80116e2:	b958      	cbnz	r0, 80116fc <MX_TIM4_Init+0x5c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80116e4:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80116e6:	a901      	add	r1, sp, #4
 80116e8:	4807      	ldr	r0, [pc, #28]	; (8011708 <MX_TIM4_Init+0x68>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80116ea:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80116ec:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80116ee:	f7f5 f863 	bl	80067b8 <HAL_TIMEx_MasterConfigSynchronization>
 80116f2:	b108      	cbz	r0, 80116f8 <MX_TIM4_Init+0x58>
    Error_Handler();
 80116f4:	f7ff f9ee 	bl	8010ad4 <Error_Handler>
}
 80116f8:	b008      	add	sp, #32
 80116fa:	bd10      	pop	{r4, pc}
    Error_Handler();
 80116fc:	f7ff f9ea 	bl	8010ad4 <Error_Handler>
 8011700:	e7f0      	b.n	80116e4 <MX_TIM4_Init+0x44>
    Error_Handler();
 8011702:	f7ff f9e7 	bl	8010ad4 <Error_Handler>
 8011706:	e7e5      	b.n	80116d4 <MX_TIM4_Init+0x34>
 8011708:	20005ae4 	.word	0x20005ae4
 801170c:	40000800 	.word	0x40000800

08011710 <MX_TIM6_Init>:
{
 8011710:	b510      	push	{r4, lr}
  htim6.Instance = TIM6;
 8011712:	4b11      	ldr	r3, [pc, #68]	; (8011758 <MX_TIM6_Init+0x48>)
 8011714:	4a11      	ldr	r2, [pc, #68]	; (801175c <MX_TIM6_Init+0x4c>)
 8011716:	601a      	str	r2, [r3, #0]
{
 8011718:	b084      	sub	sp, #16
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801171a:	2200      	movs	r2, #0
  htim6.Init.Prescaler = 9;
 801171c:	2409      	movs	r4, #9
  htim6.Init.Period = 199;
 801171e:	21c7      	movs	r1, #199	; 0xc7
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8011720:	4618      	mov	r0, r3
  htim6.Init.Prescaler = 9;
 8011722:	605c      	str	r4, [r3, #4]
  htim6.Init.Period = 199;
 8011724:	60d9      	str	r1, [r3, #12]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011726:	609a      	str	r2, [r3, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011728:	9201      	str	r2, [sp, #4]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801172a:	619a      	str	r2, [r3, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801172c:	9202      	str	r2, [sp, #8]
 801172e:	9203      	str	r2, [sp, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8011730:	f7f4 fb2e 	bl	8005d90 <HAL_TIM_Base_Init>
 8011734:	b960      	cbnz	r0, 8011750 <MX_TIM6_Init+0x40>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8011736:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011738:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 801173a:	a901      	add	r1, sp, #4
 801173c:	4806      	ldr	r0, [pc, #24]	; (8011758 <MX_TIM6_Init+0x48>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801173e:	9201      	str	r2, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011740:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8011742:	f7f5 f839 	bl	80067b8 <HAL_TIMEx_MasterConfigSynchronization>
 8011746:	b108      	cbz	r0, 801174c <MX_TIM6_Init+0x3c>
    Error_Handler();
 8011748:	f7ff f9c4 	bl	8010ad4 <Error_Handler>
}
 801174c:	b004      	add	sp, #16
 801174e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8011750:	f7ff f9c0 	bl	8010ad4 <Error_Handler>
 8011754:	e7ef      	b.n	8011736 <MX_TIM6_Init+0x26>
 8011756:	bf00      	nop
 8011758:	20005ba4 	.word	0x20005ba4
 801175c:	40001000 	.word	0x40001000

08011760 <MX_TIM7_Init>:
{
 8011760:	b500      	push	{lr}
  htim7.Instance = TIM7;
 8011762:	4a10      	ldr	r2, [pc, #64]	; (80117a4 <MX_TIM7_Init+0x44>)
 8011764:	4b10      	ldr	r3, [pc, #64]	; (80117a8 <MX_TIM7_Init+0x48>)
 8011766:	6013      	str	r3, [r2, #0]
{
 8011768:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801176a:	2300      	movs	r3, #0
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 801176c:	4610      	mov	r0, r2
  htim7.Init.Prescaler = 0;
 801176e:	6053      	str	r3, [r2, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011770:	9301      	str	r3, [sp, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011772:	6093      	str	r3, [r2, #8]
  htim7.Init.Period = 0;
 8011774:	60d3      	str	r3, [r2, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011776:	6193      	str	r3, [r2, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011778:	9302      	str	r3, [sp, #8]
 801177a:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 801177c:	f7f4 fb08 	bl	8005d90 <HAL_TIM_Base_Init>
 8011780:	b960      	cbnz	r0, 801179c <MX_TIM7_Init+0x3c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011782:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8011784:	a901      	add	r1, sp, #4
 8011786:	4807      	ldr	r0, [pc, #28]	; (80117a4 <MX_TIM7_Init+0x44>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011788:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801178a:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 801178c:	f7f5 f814 	bl	80067b8 <HAL_TIMEx_MasterConfigSynchronization>
 8011790:	b108      	cbz	r0, 8011796 <MX_TIM7_Init+0x36>
    Error_Handler();
 8011792:	f7ff f99f 	bl	8010ad4 <Error_Handler>
}
 8011796:	b005      	add	sp, #20
 8011798:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 801179c:	f7ff f99a 	bl	8010ad4 <Error_Handler>
 80117a0:	e7ef      	b.n	8011782 <MX_TIM7_Init+0x22>
 80117a2:	bf00      	nop
 80117a4:	20005c64 	.word	0x20005c64
 80117a8:	40001400 	.word	0x40001400

080117ac <MX_TIM16_Init>:
  htim16.Instance = TIM16;
 80117ac:	4b0a      	ldr	r3, [pc, #40]	; (80117d8 <MX_TIM16_Init+0x2c>)
 80117ae:	4a0b      	ldr	r2, [pc, #44]	; (80117dc <MX_TIM16_Init+0x30>)
{
 80117b0:	b510      	push	{r4, lr}
  htim16.Init.Period = 49;
 80117b2:	2131      	movs	r1, #49	; 0x31
  htim16.Instance = TIM16;
 80117b4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7;
 80117b6:	2407      	movs	r4, #7
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80117b8:	2200      	movs	r2, #0
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80117ba:	4618      	mov	r0, r3
  htim16.Init.Prescaler = 7;
 80117bc:	605c      	str	r4, [r3, #4]
  htim16.Init.Period = 49;
 80117be:	60d9      	str	r1, [r3, #12]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80117c0:	609a      	str	r2, [r3, #8]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80117c2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80117c4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80117c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80117c8:	f7f4 fae2 	bl	8005d90 <HAL_TIM_Base_Init>
 80117cc:	b900      	cbnz	r0, 80117d0 <MX_TIM16_Init+0x24>
 80117ce:	bd10      	pop	{r4, pc}
}
 80117d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80117d4:	f7ff b97e 	b.w	8010ad4 <Error_Handler>
 80117d8:	20005c24 	.word	0x20005c24
 80117dc:	40014400 	.word	0x40014400

080117e0 <MX_TIM17_Init>:
  htim17.Instance = TIM17;
 80117e0:	4b0a      	ldr	r3, [pc, #40]	; (801180c <MX_TIM17_Init+0x2c>)
 80117e2:	4a0b      	ldr	r2, [pc, #44]	; (8011810 <MX_TIM17_Init+0x30>)
{
 80117e4:	b510      	push	{r4, lr}
  htim17.Init.Period = 49;
 80117e6:	2131      	movs	r1, #49	; 0x31
  htim17.Instance = TIM17;
 80117e8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 79;
 80117ea:	244f      	movs	r4, #79	; 0x4f
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80117ec:	2200      	movs	r2, #0
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80117ee:	4618      	mov	r0, r3
  htim17.Init.Prescaler = 79;
 80117f0:	605c      	str	r4, [r3, #4]
  htim17.Init.Period = 49;
 80117f2:	60d9      	str	r1, [r3, #12]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80117f4:	609a      	str	r2, [r3, #8]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80117f6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80117f8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80117fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80117fc:	f7f4 fac8 	bl	8005d90 <HAL_TIM_Base_Init>
 8011800:	b900      	cbnz	r0, 8011804 <MX_TIM17_Init+0x24>
 8011802:	bd10      	pop	{r4, pc}
}
 8011804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8011808:	f7ff b964 	b.w	8010ad4 <Error_Handler>
 801180c:	20005b24 	.word	0x20005b24
 8011810:	40014800 	.word	0x40014800

08011814 <HAL_TIM_Base_MspInit>:
{
 8011814:	b500      	push	{lr}
  if(tim_baseHandle->Instance==TIM1)
 8011816:	6803      	ldr	r3, [r0, #0]
 8011818:	4a40      	ldr	r2, [pc, #256]	; (801191c <HAL_TIM_Base_MspInit+0x108>)
 801181a:	4293      	cmp	r3, r2
{
 801181c:	b089      	sub	sp, #36	; 0x24
  if(tim_baseHandle->Instance==TIM1)
 801181e:	d021      	beq.n	8011864 <HAL_TIM_Base_MspInit+0x50>
  else if(tim_baseHandle->Instance==TIM3)
 8011820:	4a3f      	ldr	r2, [pc, #252]	; (8011920 <HAL_TIM_Base_MspInit+0x10c>)
 8011822:	4293      	cmp	r3, r2
 8011824:	d041      	beq.n	80118aa <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM4)
 8011826:	4a3f      	ldr	r2, [pc, #252]	; (8011924 <HAL_TIM_Base_MspInit+0x110>)
 8011828:	4293      	cmp	r3, r2
 801182a:	d051      	beq.n	80118d0 <HAL_TIM_Base_MspInit+0xbc>
  else if(tim_baseHandle->Instance==TIM6)
 801182c:	4a3e      	ldr	r2, [pc, #248]	; (8011928 <HAL_TIM_Base_MspInit+0x114>)
 801182e:	4293      	cmp	r3, r2
 8011830:	d061      	beq.n	80118f6 <HAL_TIM_Base_MspInit+0xe2>
  else if(tim_baseHandle->Instance==TIM7)
 8011832:	4a3e      	ldr	r2, [pc, #248]	; (801192c <HAL_TIM_Base_MspInit+0x118>)
 8011834:	4293      	cmp	r3, r2
 8011836:	d022      	beq.n	801187e <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM16)
 8011838:	4a3d      	ldr	r2, [pc, #244]	; (8011930 <HAL_TIM_Base_MspInit+0x11c>)
 801183a:	4293      	cmp	r3, r2
 801183c:	d02a      	beq.n	8011894 <HAL_TIM_Base_MspInit+0x80>
  else if(tim_baseHandle->Instance==TIM17)
 801183e:	4a3d      	ldr	r2, [pc, #244]	; (8011934 <HAL_TIM_Base_MspInit+0x120>)
 8011840:	4293      	cmp	r3, r2
 8011842:	d002      	beq.n	801184a <HAL_TIM_Base_MspInit+0x36>
}
 8011844:	b009      	add	sp, #36	; 0x24
 8011846:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM17_CLK_ENABLE();
 801184a:	4b3b      	ldr	r3, [pc, #236]	; (8011938 <HAL_TIM_Base_MspInit+0x124>)
 801184c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801184e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8011852:	661a      	str	r2, [r3, #96]	; 0x60
 8011854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011856:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801185a:	9307      	str	r3, [sp, #28]
 801185c:	9b07      	ldr	r3, [sp, #28]
}
 801185e:	b009      	add	sp, #36	; 0x24
 8011860:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8011864:	4b34      	ldr	r3, [pc, #208]	; (8011938 <HAL_TIM_Base_MspInit+0x124>)
 8011866:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8011868:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801186c:	661a      	str	r2, [r3, #96]	; 0x60
 801186e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011874:	9301      	str	r3, [sp, #4]
 8011876:	9b01      	ldr	r3, [sp, #4]
}
 8011878:	b009      	add	sp, #36	; 0x24
 801187a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM7_CLK_ENABLE();
 801187e:	4b2e      	ldr	r3, [pc, #184]	; (8011938 <HAL_TIM_Base_MspInit+0x124>)
 8011880:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011882:	f042 0220 	orr.w	r2, r2, #32
 8011886:	659a      	str	r2, [r3, #88]	; 0x58
 8011888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801188a:	f003 0320 	and.w	r3, r3, #32
 801188e:	9305      	str	r3, [sp, #20]
 8011890:	9b05      	ldr	r3, [sp, #20]
 8011892:	e7d7      	b.n	8011844 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8011894:	4b28      	ldr	r3, [pc, #160]	; (8011938 <HAL_TIM_Base_MspInit+0x124>)
 8011896:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8011898:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 801189c:	661a      	str	r2, [r3, #96]	; 0x60
 801189e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80118a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80118a4:	9306      	str	r3, [sp, #24]
 80118a6:	9b06      	ldr	r3, [sp, #24]
 80118a8:	e7cc      	b.n	8011844 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80118aa:	4b23      	ldr	r3, [pc, #140]	; (8011938 <HAL_TIM_Base_MspInit+0x124>)
 80118ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80118ae:	f042 0202 	orr.w	r2, r2, #2
 80118b2:	659a      	str	r2, [r3, #88]	; 0x58
 80118b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80118b6:	f003 0302 	and.w	r3, r3, #2
 80118ba:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80118bc:	2200      	movs	r2, #0
 80118be:	2105      	movs	r1, #5
 80118c0:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 80118c2:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80118c4:	f7ef ff94 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80118c8:	201d      	movs	r0, #29
 80118ca:	f7ef ffc7 	bl	800185c <HAL_NVIC_EnableIRQ>
 80118ce:	e7b9      	b.n	8011844 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80118d0:	4b19      	ldr	r3, [pc, #100]	; (8011938 <HAL_TIM_Base_MspInit+0x124>)
 80118d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80118d4:	f042 0204 	orr.w	r2, r2, #4
 80118d8:	659a      	str	r2, [r3, #88]	; 0x58
 80118da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80118dc:	f003 0304 	and.w	r3, r3, #4
 80118e0:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80118e2:	2200      	movs	r2, #0
 80118e4:	2105      	movs	r1, #5
 80118e6:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 80118e8:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80118ea:	f7ef ff81 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80118ee:	201e      	movs	r0, #30
 80118f0:	f7ef ffb4 	bl	800185c <HAL_NVIC_EnableIRQ>
 80118f4:	e7a6      	b.n	8011844 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80118f6:	4b10      	ldr	r3, [pc, #64]	; (8011938 <HAL_TIM_Base_MspInit+0x124>)
 80118f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80118fa:	f042 0210 	orr.w	r2, r2, #16
 80118fe:	659a      	str	r2, [r3, #88]	; 0x58
 8011900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011902:	f003 0310 	and.w	r3, r3, #16
 8011906:	9304      	str	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8011908:	2200      	movs	r2, #0
 801190a:	2105      	movs	r1, #5
 801190c:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 801190e:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8011910:	f7ef ff6e 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8011914:	2036      	movs	r0, #54	; 0x36
 8011916:	f7ef ffa1 	bl	800185c <HAL_NVIC_EnableIRQ>
 801191a:	e793      	b.n	8011844 <HAL_TIM_Base_MspInit+0x30>
 801191c:	40012c00 	.word	0x40012c00
 8011920:	40000400 	.word	0x40000400
 8011924:	40000800 	.word	0x40000800
 8011928:	40001000 	.word	0x40001000
 801192c:	40001400 	.word	0x40001400
 8011930:	40014400 	.word	0x40014400
 8011934:	40014800 	.word	0x40014800
 8011938:	40021000 	.word	0x40021000

0801193c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 801193c:	4b18      	ldr	r3, [pc, #96]	; (80119a0 <MX_USART1_UART_Init+0x64>)
 801193e:	4a19      	ldr	r2, [pc, #100]	; (80119a4 <MX_USART1_UART_Init+0x68>)
{
 8011940:	b510      	push	{r4, lr}
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8011942:	210c      	movs	r1, #12
  huart1.Instance = USART1;
 8011944:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8011946:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801194a:	2200      	movs	r2, #0
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801194c:	4618      	mov	r0, r3
  huart1.Init.BaudRate = 115200;
 801194e:	605c      	str	r4, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8011950:	6159      	str	r1, [r3, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8011952:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8011954:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8011956:	611a      	str	r2, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011958:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801195a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801195c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 801195e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8011960:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8011962:	f7f5 fb29 	bl	8006fb8 <HAL_UART_Init>
 8011966:	b9c0      	cbnz	r0, 801199a <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8011968:	2100      	movs	r1, #0
 801196a:	480d      	ldr	r0, [pc, #52]	; (80119a0 <MX_USART1_UART_Init+0x64>)
 801196c:	f7f6 f92c 	bl	8007bc8 <HAL_UARTEx_SetTxFifoThreshold>
 8011970:	b980      	cbnz	r0, 8011994 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8011972:	2100      	movs	r1, #0
 8011974:	480a      	ldr	r0, [pc, #40]	; (80119a0 <MX_USART1_UART_Init+0x64>)
 8011976:	f7f6 f989 	bl	8007c8c <HAL_UARTEx_SetRxFifoThreshold>
 801197a:	b940      	cbnz	r0, 801198e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 801197c:	4808      	ldr	r0, [pc, #32]	; (80119a0 <MX_USART1_UART_Init+0x64>)
 801197e:	f7f6 f905 	bl	8007b8c <HAL_UARTEx_DisableFifoMode>
 8011982:	b900      	cbnz	r0, 8011986 <MX_USART1_UART_Init+0x4a>
 8011984:	bd10      	pop	{r4, pc}
  {
    Error_Handler();
  }

}
 8011986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 801198a:	f7ff b8a3 	b.w	8010ad4 <Error_Handler>
    Error_Handler();
 801198e:	f7ff f8a1 	bl	8010ad4 <Error_Handler>
 8011992:	e7f3      	b.n	801197c <MX_USART1_UART_Init+0x40>
    Error_Handler();
 8011994:	f7ff f89e 	bl	8010ad4 <Error_Handler>
 8011998:	e7eb      	b.n	8011972 <MX_USART1_UART_Init+0x36>
    Error_Handler();
 801199a:	f7ff f89b 	bl	8010ad4 <Error_Handler>
 801199e:	e7e3      	b.n	8011968 <MX_USART1_UART_Init+0x2c>
 80119a0:	20005d28 	.word	0x20005d28
 80119a4:	40013800 	.word	0x40013800

080119a8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{

  huart3.Instance = USART3;
 80119a8:	4b18      	ldr	r3, [pc, #96]	; (8011a0c <MX_USART3_UART_Init+0x64>)
 80119aa:	4a19      	ldr	r2, [pc, #100]	; (8011a10 <MX_USART3_UART_Init+0x68>)
{
 80119ac:	b510      	push	{r4, lr}
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 80119ae:	210c      	movs	r1, #12
  huart3.Instance = USART3;
 80119b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80119b2:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80119b6:	2200      	movs	r2, #0
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80119b8:	4618      	mov	r0, r3
  huart3.Init.BaudRate = 115200;
 80119ba:	605c      	str	r4, [r3, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80119bc:	6159      	str	r1, [r3, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80119be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80119c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80119c2:	611a      	str	r2, [r3, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80119c4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80119c6:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80119c8:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80119ca:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80119cc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80119ce:	f7f5 faf3 	bl	8006fb8 <HAL_UART_Init>
 80119d2:	b9c0      	cbnz	r0, 8011a06 <MX_USART3_UART_Init+0x5e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80119d4:	2100      	movs	r1, #0
 80119d6:	480d      	ldr	r0, [pc, #52]	; (8011a0c <MX_USART3_UART_Init+0x64>)
 80119d8:	f7f6 f8f6 	bl	8007bc8 <HAL_UARTEx_SetTxFifoThreshold>
 80119dc:	b980      	cbnz	r0, 8011a00 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80119de:	2100      	movs	r1, #0
 80119e0:	480a      	ldr	r0, [pc, #40]	; (8011a0c <MX_USART3_UART_Init+0x64>)
 80119e2:	f7f6 f953 	bl	8007c8c <HAL_UARTEx_SetRxFifoThreshold>
 80119e6:	b940      	cbnz	r0, 80119fa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80119e8:	4808      	ldr	r0, [pc, #32]	; (8011a0c <MX_USART3_UART_Init+0x64>)
 80119ea:	f7f6 f8cf 	bl	8007b8c <HAL_UARTEx_DisableFifoMode>
 80119ee:	b900      	cbnz	r0, 80119f2 <MX_USART3_UART_Init+0x4a>
 80119f0:	bd10      	pop	{r4, pc}
  {
    Error_Handler();
  }

}
 80119f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80119f6:	f7ff b86d 	b.w	8010ad4 <Error_Handler>
    Error_Handler();
 80119fa:	f7ff f86b 	bl	8010ad4 <Error_Handler>
 80119fe:	e7f3      	b.n	80119e8 <MX_USART3_UART_Init+0x40>
    Error_Handler();
 8011a00:	f7ff f868 	bl	8010ad4 <Error_Handler>
 8011a04:	e7eb      	b.n	80119de <MX_USART3_UART_Init+0x36>
    Error_Handler();
 8011a06:	f7ff f865 	bl	8010ad4 <Error_Handler>
 8011a0a:	e7e3      	b.n	80119d4 <MX_USART3_UART_Init+0x2c>
 8011a0c:	20005ca4 	.word	0x20005ca4
 8011a10:	40004800 	.word	0x40004800

08011a14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8011a14:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART1)
 8011a16:	6803      	ldr	r3, [r0, #0]
 8011a18:	4a30      	ldr	r2, [pc, #192]	; (8011adc <HAL_UART_MspInit+0xc8>)
{
 8011a1a:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011a1c:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART1)
 8011a1e:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011a20:	9406      	str	r4, [sp, #24]
 8011a22:	9405      	str	r4, [sp, #20]
 8011a24:	9407      	str	r4, [sp, #28]
 8011a26:	9408      	str	r4, [sp, #32]
 8011a28:	9409      	str	r4, [sp, #36]	; 0x24
  if(uartHandle->Instance==USART1)
 8011a2a:	d02c      	beq.n	8011a86 <HAL_UART_MspInit+0x72>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8011a2c:	4a2c      	ldr	r2, [pc, #176]	; (8011ae0 <HAL_UART_MspInit+0xcc>)
 8011a2e:	4293      	cmp	r3, r2
 8011a30:	d001      	beq.n	8011a36 <HAL_UART_MspInit+0x22>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8011a32:	b00b      	add	sp, #44	; 0x2c
 8011a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 8011a36:	4b2b      	ldr	r3, [pc, #172]	; (8011ae4 <HAL_UART_MspInit+0xd0>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011a38:	482b      	ldr	r0, [pc, #172]	; (8011ae8 <HAL_UART_MspInit+0xd4>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8011a3a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011a3c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8011a40:	659a      	str	r2, [r3, #88]	; 0x58
 8011a42:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011a44:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8011a48:	9203      	str	r2, [sp, #12]
 8011a4a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011a4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011a4e:	f042 0204 	orr.w	r2, r2, #4
 8011a52:	64da      	str	r2, [r3, #76]	; 0x4c
 8011a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011a56:	f003 0304 	and.w	r3, r3, #4
 8011a5a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011a5c:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8011a5e:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011a60:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8011a62:	2630      	movs	r6, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011a64:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011a66:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8011a68:	9309      	str	r3, [sp, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011a6a:	9f04      	ldr	r7, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8011a6c:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011a6e:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011a70:	f7f0 fa6c 	bl	8001f4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8011a74:	4622      	mov	r2, r4
 8011a76:	2105      	movs	r1, #5
 8011a78:	2027      	movs	r0, #39	; 0x27
 8011a7a:	f7ef feb9 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8011a7e:	2027      	movs	r0, #39	; 0x27
 8011a80:	f7ef feec 	bl	800185c <HAL_NVIC_EnableIRQ>
}
 8011a84:	e7d5      	b.n	8011a32 <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8011a86:	4b17      	ldr	r3, [pc, #92]	; (8011ae4 <HAL_UART_MspInit+0xd0>)
 8011a88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8011a8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011a8e:	661a      	str	r2, [r3, #96]	; 0x60
 8011a90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8011a92:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8011a96:	9201      	str	r2, [sp, #4]
 8011a98:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011a9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011a9c:	f042 0201 	orr.w	r2, r2, #1
 8011aa0:	64da      	str	r2, [r3, #76]	; 0x4c
 8011aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011aa4:	f003 0301 	and.w	r3, r3, #1
 8011aa8:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011aaa:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8011aac:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011aae:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8011ab0:	f44f 66c0 	mov.w	r6, #1536	; 0x600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011ab4:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011ab6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011aba:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8011abc:	9309      	str	r3, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011abe:	9f02      	ldr	r7, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8011ac0:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011ac2:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011ac4:	f7f0 fa42 	bl	8001f4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8011ac8:	4622      	mov	r2, r4
 8011aca:	2105      	movs	r1, #5
 8011acc:	2025      	movs	r0, #37	; 0x25
 8011ace:	f7ef fe8f 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8011ad2:	2025      	movs	r0, #37	; 0x25
 8011ad4:	f7ef fec2 	bl	800185c <HAL_NVIC_EnableIRQ>
 8011ad8:	e7ab      	b.n	8011a32 <HAL_UART_MspInit+0x1e>
 8011ada:	bf00      	nop
 8011adc:	40013800 	.word	0x40013800
 8011ae0:	40004800 	.word	0x40004800
 8011ae4:	40021000 	.word	0x40021000
 8011ae8:	48000800 	.word	0x48000800

08011aec <VL53L1_WriteMulti>:
}

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    if (count > sizeof(_I2CBuffer) - 1) {
 8011aec:	2bff      	cmp	r3, #255	; 0xff
 8011aee:	d81f      	bhi.n	8011b30 <VL53L1_WriteMulti+0x44>
VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8011af0:	b5f0      	push	{r4, r5, r6, r7, lr}
        return VL53L1_ERROR_INVALID_PARAMS;
    }
    _I2CBuffer[0] = index>>8;
 8011af2:	4f11      	ldr	r7, [pc, #68]	; (8011b38 <VL53L1_WriteMulti+0x4c>)
 8011af4:	460e      	mov	r6, r1
 8011af6:	461c      	mov	r4, r3
VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8011af8:	b083      	sub	sp, #12
 8011afa:	4605      	mov	r5, r0
    _I2CBuffer[0] = index>>8;
 8011afc:	0a33      	lsrs	r3, r6, #8
 8011afe:	4611      	mov	r1, r2
    _I2CBuffer[1] = index&0xFF;
    memcpy(&_I2CBuffer[2], pdata, count);
 8011b00:	1cb8      	adds	r0, r7, #2
 8011b02:	4622      	mov	r2, r4
    _I2CBuffer[0] = index>>8;
 8011b04:	703b      	strb	r3, [r7, #0]
    _I2CBuffer[1] = index&0xFF;
 8011b06:	707e      	strb	r6, [r7, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 8011b08:	f002 f9e0 	bl	8013ecc <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 8011b0c:	1ca3      	adds	r3, r4, #2
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8011b0e:	340c      	adds	r4, #12
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011b10:	f895 1398 	ldrb.w	r1, [r5, #920]	; 0x398
 8011b14:	f8d5 03a0 	ldr.w	r0, [r5, #928]	; 0x3a0
 8011b18:	9400      	str	r4, [sp, #0]
 8011b1a:	463a      	mov	r2, r7
 8011b1c:	b29b      	uxth	r3, r3
 8011b1e:	f7f0 fcc5 	bl	80024ac <HAL_I2C_Master_Transmit>
    if (status_int != 0) {
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8011b22:	2800      	cmp	r0, #0
 8011b24:	bf0c      	ite	eq
 8011b26:	2000      	moveq	r0, #0
 8011b28:	f06f 000c 	mvnne.w	r0, #12
    }
    VL53L1_PutI2cBus();
    return Status;
}
 8011b2c:	b003      	add	sp, #12
 8011b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return VL53L1_ERROR_INVALID_PARAMS;
 8011b30:	f06f 0003 	mvn.w	r0, #3
 8011b34:	4770      	bx	lr
 8011b36:	bf00      	nop
 8011b38:	20005dac 	.word	0x20005dac

08011b3c <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8011b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8011b40:	4d16      	ldr	r5, [pc, #88]	; (8011b9c <VL53L1_ReadMulti+0x60>)
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011b42:	f890 c398 	ldrb.w	ip, [r0, #920]	; 0x398
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8011b46:	460e      	mov	r6, r1
 8011b48:	b082      	sub	sp, #8
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011b4a:	f04f 0e0c 	mov.w	lr, #12
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8011b4e:	461f      	mov	r7, r3
    _I2CBuffer[0] = index>>8;
 8011b50:	0a33      	lsrs	r3, r6, #8
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8011b52:	4604      	mov	r4, r0
 8011b54:	4690      	mov	r8, r2
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011b56:	f8d0 03a0 	ldr.w	r0, [r0, #928]	; 0x3a0
    _I2CBuffer[0] = index>>8;
 8011b5a:	702b      	strb	r3, [r5, #0]
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011b5c:	4661      	mov	r1, ip
 8011b5e:	f8cd e000 	str.w	lr, [sp]
 8011b62:	462a      	mov	r2, r5
 8011b64:	2302      	movs	r3, #2
    _I2CBuffer[1] = index&0xFF;
 8011b66:	706e      	strb	r6, [r5, #1]
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011b68:	f7f0 fca0 	bl	80024ac <HAL_I2C_Master_Transmit>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
    if (status_int != 0) {
 8011b6c:	b980      	cbnz	r0, 8011b90 <VL53L1_ReadMulti+0x54>
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8011b6e:	f894 1398 	ldrb.w	r1, [r4, #920]	; 0x398
 8011b72:	f8d4 03a0 	ldr.w	r0, [r4, #928]	; 0x3a0
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8011b76:	f107 030a 	add.w	r3, r7, #10
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8011b7a:	9300      	str	r3, [sp, #0]
 8011b7c:	4642      	mov	r2, r8
 8011b7e:	f041 0101 	orr.w	r1, r1, #1
 8011b82:	b2bb      	uxth	r3, r7
 8011b84:	f7f0 fd5e 	bl	8002644 <HAL_I2C_Master_Receive>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    status_int = _I2CRead(Dev, pdata, count);
    if (status_int != 0) {
 8011b88:	b910      	cbnz	r0, 8011b90 <VL53L1_ReadMulti+0x54>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
    }
done:
    VL53L1_PutI2cBus();
    return Status;
}
 8011b8a:	b002      	add	sp, #8
 8011b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8011b90:	f06f 000c 	mvn.w	r0, #12
}
 8011b94:	b002      	add	sp, #8
 8011b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b9a:	bf00      	nop
 8011b9c:	20005dac 	.word	0x20005dac

08011ba0 <VL53L1_RdWord>:
done:
    VL53L1_PutI2cBus();
    return Status;
}

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 8011ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011ba4:	f890 3398 	ldrb.w	r3, [r0, #920]	; 0x398
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8011ba8:	4c16      	ldr	r4, [pc, #88]	; (8011c04 <VL53L1_RdWord+0x64>)
VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 8011baa:	460e      	mov	r6, r1
 8011bac:	b082      	sub	sp, #8
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011bae:	f04f 080c 	mov.w	r8, #12
 8011bb2:	4619      	mov	r1, r3
    _I2CBuffer[0] = index>>8;
 8011bb4:	0a33      	lsrs	r3, r6, #8
VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 8011bb6:	4605      	mov	r5, r0
 8011bb8:	4617      	mov	r7, r2
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011bba:	f8d0 03a0 	ldr.w	r0, [r0, #928]	; 0x3a0
    _I2CBuffer[0] = index>>8;
 8011bbe:	7023      	strb	r3, [r4, #0]
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011bc0:	f8cd 8000 	str.w	r8, [sp]
 8011bc4:	4622      	mov	r2, r4
 8011bc6:	2302      	movs	r3, #2
	_I2CBuffer[1] = index&0xFF;
 8011bc8:	7066      	strb	r6, [r4, #1]
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011bca:	f7f0 fc6f 	bl	80024ac <HAL_I2C_Master_Transmit>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);

    if( status_int ){
 8011bce:	b9a0      	cbnz	r0, 8011bfa <VL53L1_RdWord+0x5a>
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8011bd0:	f895 1398 	ldrb.w	r1, [r5, #920]	; 0x398
 8011bd4:	f8d5 03a0 	ldr.w	r0, [r5, #928]	; 0x3a0
 8011bd8:	f8cd 8000 	str.w	r8, [sp]
 8011bdc:	f041 0101 	orr.w	r1, r1, #1
 8011be0:	2302      	movs	r3, #2
 8011be2:	4622      	mov	r2, r4
 8011be4:	f7f0 fd2e 	bl	8002644 <HAL_I2C_Master_Receive>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
    if (status_int != 0) {
 8011be8:	b938      	cbnz	r0, 8011bfa <VL53L1_RdWord+0x5a>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
        goto done;
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8011bea:	7822      	ldrb	r2, [r4, #0]
 8011bec:	7863      	ldrb	r3, [r4, #1]
 8011bee:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011bf2:	803b      	strh	r3, [r7, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
}
 8011bf4:	b002      	add	sp, #8
 8011bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8011bfa:	f06f 000c 	mvn.w	r0, #12
}
 8011bfe:	b002      	add	sp, #8
 8011c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c04:	20005dac 	.word	0x20005dac

08011c08 <VL53L1_WaitUs>:
	(void)pdev;
	HAL_Delay(wait_ms);
    return VL53L1_ERROR_NONE;
}

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 8011c08:	b508      	push	{r3, lr}
	(void)pdev;
	HAL_Delay(wait_us/1000);
 8011c0a:	4805      	ldr	r0, [pc, #20]	; (8011c20 <VL53L1_WaitUs+0x18>)
 8011c0c:	fb80 3001 	smull	r3, r0, r0, r1
 8011c10:	17c9      	asrs	r1, r1, #31
 8011c12:	ebc1 10a0 	rsb	r0, r1, r0, asr #6
 8011c16:	f7ef f99d 	bl	8000f54 <HAL_Delay>
    return VL53L1_ERROR_NONE;
}
 8011c1a:	2000      	movs	r0, #0
 8011c1c:	bd08      	pop	{r3, pc}
 8011c1e:	bf00      	nop
 8011c20:	10624dd3 	.word	0x10624dd3

08011c24 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8011c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c28:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 8011c2c:	4604      	mov	r4, r0

	VL53L1_Error status         = VL53L1_ERROR_NONE;
	uint32_t     start_time_ms = 0;
	uint32_t     current_time_ms = 0;
	uint32_t     polling_time_ms = 0;
	uint8_t      byte_value      = 0;
 8011c2e:	2000      	movs	r0, #0
{
 8011c30:	460d      	mov	r5, r1
 8011c32:	4616      	mov	r6, r2
	uint8_t      byte_value      = 0;
 8011c34:	f88d 000f 	strb.w	r0, [sp, #15]
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 8011c38:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011c3c:	4932      	ldr	r1, [pc, #200]	; (8011d08 <VL53L1_WaitValueMaskEx+0xe4>)
{
 8011c3e:	f89d 9238 	ldrb.w	r9, [sp, #568]	; 0x238
	VL53L1_COPYSTRING(register_name, "");
 8011c42:	a804      	add	r0, sp, #16
{
 8011c44:	4698      	mov	r8, r3
	VL53L1_COPYSTRING(register_name, "");
 8011c46:	f002 f954 	bl	8013ef2 <strncpy>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 8011c4a:	2d00      	cmp	r5, #0
 8011c4c:	d058      	beq.n	8011d00 <VL53L1_WaitValueMaskEx+0xdc>
 8011c4e:	4d2f      	ldr	r5, [pc, #188]	; (8011d0c <VL53L1_WaitValueMaskEx+0xe8>)
 8011c50:	9b8f      	ldr	r3, [sp, #572]	; 0x23c
 8011c52:	0a37      	lsrs	r7, r6, #8
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011c54:	f04f 0b0c 	mov.w	fp, #12
 8011c58:	b2f6      	uxtb	r6, r6
 8011c5a:	46aa      	mov	sl, r5
 8011c5c:	bb2b      	cbnz	r3, 8011caa <VL53L1_WaitValueMaskEx+0x86>
 8011c5e:	f894 1398 	ldrb.w	r1, [r4, #920]	; 0x398
 8011c62:	f8d4 03a0 	ldr.w	r0, [r4, #928]	; 0x3a0
 8011c66:	f8cd b000 	str.w	fp, [sp]
 8011c6a:	2302      	movs	r3, #2
 8011c6c:	4652      	mov	r2, sl
	_I2CBuffer[0] = index>>8;
 8011c6e:	702f      	strb	r7, [r5, #0]
	_I2CBuffer[1] = index&0xFF;
 8011c70:	706e      	strb	r6, [r5, #1]
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011c72:	f7f0 fc1b 	bl	80024ac <HAL_I2C_Master_Transmit>
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8011c76:	210b      	movs	r1, #11
 8011c78:	2301      	movs	r3, #1
 8011c7a:	f10d 020f 	add.w	r2, sp, #15
    if( status_int ){
 8011c7e:	bbc8      	cbnz	r0, 8011cf4 <VL53L1_WaitValueMaskEx+0xd0>
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8011c80:	f894 e398 	ldrb.w	lr, [r4, #920]	; 0x398
 8011c84:	f8d4 03a0 	ldr.w	r0, [r4, #928]	; 0x3a0
 8011c88:	9100      	str	r1, [sp, #0]
 8011c8a:	ea4e 0103 	orr.w	r1, lr, r3
 8011c8e:	f7f0 fcd9 	bl	8002644 <HAL_I2C_Master_Receive>
    if (status_int != 0) {
 8011c92:	bb78      	cbnz	r0, 8011cf4 <VL53L1_WaitValueMaskEx+0xd0>
			status = VL53L1_RdByte(
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8011c94:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8011c98:	ea09 0303 	and.w	r3, r9, r3
 8011c9c:	4598      	cmp	r8, r3
 8011c9e:	d1de      	bne.n	8011c5e <VL53L1_WaitValueMaskEx+0x3a>
 8011ca0:	2000      	movs	r0, #0

	if (found == 0 && status == VL53L1_ERROR_NONE)
		status = VL53L1_ERROR_TIME_OUT;

	return status;
}
 8011ca2:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 8011ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011caa:	f894 1398 	ldrb.w	r1, [r4, #920]	; 0x398
 8011cae:	f8d4 03a0 	ldr.w	r0, [r4, #928]	; 0x3a0
 8011cb2:	f8cd b000 	str.w	fp, [sp]
 8011cb6:	2302      	movs	r3, #2
 8011cb8:	4652      	mov	r2, sl
	_I2CBuffer[0] = index>>8;
 8011cba:	702f      	strb	r7, [r5, #0]
	_I2CBuffer[1] = index&0xFF;
 8011cbc:	706e      	strb	r6, [r5, #1]
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011cbe:	f7f0 fbf5 	bl	80024ac <HAL_I2C_Master_Transmit>
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8011cc2:	210b      	movs	r1, #11
 8011cc4:	2301      	movs	r3, #1
 8011cc6:	f10d 020f 	add.w	r2, sp, #15
    if( status_int ){
 8011cca:	b998      	cbnz	r0, 8011cf4 <VL53L1_WaitValueMaskEx+0xd0>
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8011ccc:	f894 e398 	ldrb.w	lr, [r4, #920]	; 0x398
 8011cd0:	f8d4 03a0 	ldr.w	r0, [r4, #928]	; 0x3a0
 8011cd4:	9100      	str	r1, [sp, #0]
 8011cd6:	f04e 0101 	orr.w	r1, lr, #1
 8011cda:	f7f0 fcb3 	bl	8002644 <HAL_I2C_Master_Receive>
    if (status_int != 0) {
 8011cde:	b948      	cbnz	r0, 8011cf4 <VL53L1_WaitValueMaskEx+0xd0>
		if ((byte_value & mask) == value)
 8011ce0:	f89d 300f 	ldrb.w	r3, [sp, #15]
	HAL_Delay(wait_ms);
 8011ce4:	988f      	ldr	r0, [sp, #572]	; 0x23c
		if ((byte_value & mask) == value)
 8011ce6:	ea09 0303 	and.w	r3, r9, r3
 8011cea:	4598      	cmp	r8, r3
 8011cec:	d0d8      	beq.n	8011ca0 <VL53L1_WaitValueMaskEx+0x7c>
	HAL_Delay(wait_ms);
 8011cee:	f7ef f931 	bl	8000f54 <HAL_Delay>
 8011cf2:	e7da      	b.n	8011caa <VL53L1_WaitValueMaskEx+0x86>
 8011cf4:	f06f 000c 	mvn.w	r0, #12
}
 8011cf8:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 8011cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		status = VL53L1_ERROR_TIME_OUT;
 8011d00:	f06f 0006 	mvn.w	r0, #6
	return status;
 8011d04:	e7f8      	b.n	8011cf8 <VL53L1_WaitValueMaskEx+0xd4>
 8011d06:	bf00      	nop
 8011d08:	08014518 	.word	0x08014518
 8011d0c:	20005dac 	.word	0x20005dac

08011d10 <setWavetableAmplitude>:
volatile uint8_t IIR_filter_active = 1;

//UBaseType_t  uxSavedInterruptStatus;

void setWavetableAmplitude(volatile uint8_t* intTracker){
	ampltiude_multiplier = (*intTracker) / ((float)ROTATION_STEPS-1);
 8011d10:	7803      	ldrb	r3, [r0, #0]
 8011d12:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8011d2c <setWavetableAmplitude+0x1c>
 8011d16:	ee07 3a90 	vmov	s15, r3
 8011d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011d1e:	4b04      	ldr	r3, [pc, #16]	; (8011d30 <setWavetableAmplitude+0x20>)
 8011d20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011d24:	edc3 7a00 	vstr	s15, [r3]
 8011d28:	4770      	bx	lr
 8011d2a:	bf00      	nop
 8011d2c:	3e4ccccd 	.word	0x3e4ccccd
 8011d30:	200052cc 	.word	0x200052cc

08011d34 <activateFilter>:
	//ampltiude_multiplier = 1;
}

void activateFilter(uint8_t active){
	if(active){
 8011d34:	b910      	cbnz	r0, 8011d3c <activateFilter+0x8>
		calcFilterFreq(0);
		setFilter(1);
		setFilterIndex = 0;
	}
	else{
		filter_active = 0;
 8011d36:	4b13      	ldr	r3, [pc, #76]	; (8011d84 <activateFilter+0x50>)
 8011d38:	7018      	strb	r0, [r3, #0]
	}
}
 8011d3a:	4770      	bx	lr
}

void calcFilterFreq(int16_t* measurement){
//	freq_fil = 123.471*expf(0.00288811*((float)*measurement));
//	if(freq_fil > 16000) freq_fil = 16000;
	freq_fil = 0.2;
 8011d3c:	4912      	ldr	r1, [pc, #72]	; (8011d88 <activateFilter+0x54>)
 8011d3e:	4b13      	ldr	r3, [pc, #76]	; (8011d8c <activateFilter+0x58>)

	freq_fil_inc = (freq_fil / ((float)DAC_FREQ)) * max_filter_index;
 8011d40:	4a13      	ldr	r2, [pc, #76]	; (8011d90 <activateFilter+0x5c>)
 8011d42:	eddf 6a14 	vldr	s13, [pc, #80]	; 8011d94 <activateFilter+0x60>
	switchOctave(octave);
}

void switchFilter(volatile uint16_t* desired_table, volatile int16_t size){
	max_filter_index = size;
	filter = desired_table;
 8011d46:	4814      	ldr	r0, [pc, #80]	; (8011d98 <activateFilter+0x64>)
void activateFilter(uint8_t active){
 8011d48:	b470      	push	{r4, r5, r6}
	freq_fil = 0.2;
 8011d4a:	600b      	str	r3, [r1, #0]
	freq_fil_inc = (freq_fil / ((float)DAC_FREQ)) * max_filter_index;
 8011d4c:	8813      	ldrh	r3, [r2, #0]
 8011d4e:	ed91 7a00 	vldr	s14, [r1]
 8011d52:	4e12      	ldr	r6, [pc, #72]	; (8011d9c <activateFilter+0x68>)
	filter = desired_table;
 8011d54:	4d12      	ldr	r5, [pc, #72]	; (8011da0 <activateFilter+0x6c>)
		setFilterIndex = 0;
 8011d56:	4913      	ldr	r1, [pc, #76]	; (8011da4 <activateFilter+0x70>)
		filter_active = 1;
 8011d58:	4c0a      	ldr	r4, [pc, #40]	; (8011d84 <activateFilter+0x50>)
	filter = desired_table;
 8011d5a:	6005      	str	r5, [r0, #0]
	freq_fil_inc = (freq_fil / ((float)DAC_FREQ)) * max_filter_index;
 8011d5c:	b21b      	sxth	r3, r3
 8011d5e:	ee07 3a90 	vmov	s15, r3
 8011d62:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011d66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011d6a:	2082      	movs	r0, #130	; 0x82
 8011d6c:	ee67 7a87 	vmul.f32	s15, s15, s14
		setFilterIndex = 0;
 8011d70:	2300      	movs	r3, #0
	freq_fil_inc = (freq_fil / ((float)DAC_FREQ)) * max_filter_index;
 8011d72:	edc6 7a00 	vstr	s15, [r6]
		filter_active = 1;
 8011d76:	2501      	movs	r5, #1
	max_filter_index = size;
 8011d78:	8010      	strh	r0, [r2, #0]
		setFilterIndex = 0;
 8011d7a:	700b      	strb	r3, [r1, #0]
		filter_active = 1;
 8011d7c:	7025      	strb	r5, [r4, #0]
}
 8011d7e:	bc70      	pop	{r4, r5, r6}
 8011d80:	4770      	bx	lr
 8011d82:	bf00      	nop
 8011d84:	200052d2 	.word	0x200052d2
 8011d88:	20000044 	.word	0x20000044
 8011d8c:	3e4ccccd 	.word	0x3e4ccccd
 8011d90:	2000004c 	.word	0x2000004c
 8011d94:	37d1b717 	.word	0x37d1b717
 8011d98:	20007ae0 	.word	0x20007ae0
 8011d9c:	200076dc 	.word	0x200076dc
 8011da0:	080168ac 	.word	0x080168ac
 8011da4:	20005319 	.word	0x20005319

08011da8 <isLidarModeActive>:
	if(lidarModeActive) return 1;
 8011da8:	4b02      	ldr	r3, [pc, #8]	; (8011db4 <isLidarModeActive+0xc>)
 8011daa:	7818      	ldrb	r0, [r3, #0]
}
 8011dac:	3000      	adds	r0, #0
 8011dae:	bf18      	it	ne
 8011db0:	2001      	movne	r0, #1
 8011db2:	4770      	bx	lr
 8011db4:	20005318 	.word	0x20005318

08011db8 <isCapModeActive>:
	if(capModeActive) return 1;
 8011db8:	4b02      	ldr	r3, [pc, #8]	; (8011dc4 <isCapModeActive+0xc>)
 8011dba:	7818      	ldrb	r0, [r3, #0]
}
 8011dbc:	3000      	adds	r0, #0
 8011dbe:	bf18      	it	ne
 8011dc0:	2001      	movne	r0, #1
 8011dc2:	4770      	bx	lr
 8011dc4:	200052d1 	.word	0x200052d1

08011dc8 <incrementTable>:
	setFilterIndex++;
 8011dc8:	4a34      	ldr	r2, [pc, #208]	; (8011e9c <incrementTable+0xd4>)
 8011dca:	7813      	ldrb	r3, [r2, #0]
 8011dcc:	3301      	adds	r3, #1
 8011dce:	b2db      	uxtb	r3, r3
 8011dd0:	7013      	strb	r3, [r2, #0]
	if(setFilterIndex >= FILTER_CNT) setFilterIndex = 0;
 8011dd2:	7813      	ldrb	r3, [r2, #0]
 8011dd4:	2b0a      	cmp	r3, #10
 8011dd6:	bf84      	itt	hi
 8011dd8:	2300      	movhi	r3, #0
 8011dda:	7013      	strbhi	r3, [r2, #0]
	setFilter(setFilterIndex);
 8011ddc:	7813      	ldrb	r3, [r2, #0]
	switch(filter){
 8011dde:	2b0a      	cmp	r3, #10
 8011de0:	d807      	bhi.n	8011df2 <incrementTable+0x2a>
 8011de2:	e8df f003 	tbb	[pc, r3]
 8011de6:	150d      	.short	0x150d
 8011de8:	3206231c 	.word	0x3206231c
 8011dec:	524a423a 	.word	0x524a423a
 8011df0:	2a          	.byte	0x2a
 8011df1:	00          	.byte	0x00
	filter = desired_table;
 8011df2:	4a2b      	ldr	r2, [pc, #172]	; (8011ea0 <incrementTable+0xd8>)
	max_filter_index = size;
 8011df4:	4b2b      	ldr	r3, [pc, #172]	; (8011ea4 <incrementTable+0xdc>)
	filter = desired_table;
 8011df6:	492c      	ldr	r1, [pc, #176]	; (8011ea8 <incrementTable+0xe0>)
 8011df8:	6011      	str	r1, [r2, #0]
 8011dfa:	2283      	movs	r2, #131	; 0x83
	max_filter_index = size;
 8011dfc:	801a      	strh	r2, [r3, #0]
 8011dfe:	4770      	bx	lr
	filter = desired_table;
 8011e00:	4a27      	ldr	r2, [pc, #156]	; (8011ea0 <incrementTable+0xd8>)
	max_filter_index = size;
 8011e02:	4b28      	ldr	r3, [pc, #160]	; (8011ea4 <incrementTable+0xdc>)
	filter = desired_table;
 8011e04:	4929      	ldr	r1, [pc, #164]	; (8011eac <incrementTable+0xe4>)
 8011e06:	6011      	str	r1, [r2, #0]
 8011e08:	f44f 6200 	mov.w	r2, #2048	; 0x800
	max_filter_index = size;
 8011e0c:	801a      	strh	r2, [r3, #0]
 8011e0e:	4770      	bx	lr
	filter = desired_table;
 8011e10:	4a23      	ldr	r2, [pc, #140]	; (8011ea0 <incrementTable+0xd8>)
	max_filter_index = size;
 8011e12:	4b24      	ldr	r3, [pc, #144]	; (8011ea4 <incrementTable+0xdc>)
	filter = desired_table;
 8011e14:	4926      	ldr	r1, [pc, #152]	; (8011eb0 <incrementTable+0xe8>)
 8011e16:	6011      	str	r1, [r2, #0]
 8011e18:	2282      	movs	r2, #130	; 0x82
	max_filter_index = size;
 8011e1a:	801a      	strh	r2, [r3, #0]
 8011e1c:	4770      	bx	lr
	filter = desired_table;
 8011e1e:	4a20      	ldr	r2, [pc, #128]	; (8011ea0 <incrementTable+0xd8>)
	max_filter_index = size;
 8011e20:	4b20      	ldr	r3, [pc, #128]	; (8011ea4 <incrementTable+0xdc>)
	filter = desired_table;
 8011e22:	4924      	ldr	r1, [pc, #144]	; (8011eb4 <incrementTable+0xec>)
 8011e24:	6011      	str	r1, [r2, #0]
 8011e26:	2283      	movs	r2, #131	; 0x83
	max_filter_index = size;
 8011e28:	801a      	strh	r2, [r3, #0]
 8011e2a:	4770      	bx	lr
	filter = desired_table;
 8011e2c:	4a1c      	ldr	r2, [pc, #112]	; (8011ea0 <incrementTable+0xd8>)
	max_filter_index = size;
 8011e2e:	4b1d      	ldr	r3, [pc, #116]	; (8011ea4 <incrementTable+0xdc>)
	filter = desired_table;
 8011e30:	4921      	ldr	r1, [pc, #132]	; (8011eb8 <incrementTable+0xf0>)
 8011e32:	6011      	str	r1, [r2, #0]
 8011e34:	2283      	movs	r2, #131	; 0x83
	max_filter_index = size;
 8011e36:	801a      	strh	r2, [r3, #0]
 8011e38:	4770      	bx	lr
	filter = desired_table;
 8011e3a:	4a19      	ldr	r2, [pc, #100]	; (8011ea0 <incrementTable+0xd8>)
	max_filter_index = size;
 8011e3c:	4b19      	ldr	r3, [pc, #100]	; (8011ea4 <incrementTable+0xdc>)
	filter = desired_table;
 8011e3e:	491f      	ldr	r1, [pc, #124]	; (8011ebc <incrementTable+0xf4>)
 8011e40:	6011      	str	r1, [r2, #0]
 8011e42:	f44f 7280 	mov.w	r2, #256	; 0x100
	max_filter_index = size;
 8011e46:	801a      	strh	r2, [r3, #0]
 8011e48:	4770      	bx	lr
	filter = desired_table;
 8011e4a:	4a15      	ldr	r2, [pc, #84]	; (8011ea0 <incrementTable+0xd8>)
	max_filter_index = size;
 8011e4c:	4b15      	ldr	r3, [pc, #84]	; (8011ea4 <incrementTable+0xdc>)
	filter = desired_table;
 8011e4e:	491c      	ldr	r1, [pc, #112]	; (8011ec0 <incrementTable+0xf8>)
 8011e50:	6011      	str	r1, [r2, #0]
 8011e52:	f44f 7280 	mov.w	r2, #256	; 0x100
	max_filter_index = size;
 8011e56:	801a      	strh	r2, [r3, #0]
 8011e58:	4770      	bx	lr
	filter = desired_table;
 8011e5a:	4a11      	ldr	r2, [pc, #68]	; (8011ea0 <incrementTable+0xd8>)
	max_filter_index = size;
 8011e5c:	4b11      	ldr	r3, [pc, #68]	; (8011ea4 <incrementTable+0xdc>)
	filter = desired_table;
 8011e5e:	4919      	ldr	r1, [pc, #100]	; (8011ec4 <incrementTable+0xfc>)
 8011e60:	6011      	str	r1, [r2, #0]
 8011e62:	f44f 7280 	mov.w	r2, #256	; 0x100
	max_filter_index = size;
 8011e66:	801a      	strh	r2, [r3, #0]
 8011e68:	4770      	bx	lr
	filter = desired_table;
 8011e6a:	4a0d      	ldr	r2, [pc, #52]	; (8011ea0 <incrementTable+0xd8>)
	max_filter_index = size;
 8011e6c:	4b0d      	ldr	r3, [pc, #52]	; (8011ea4 <incrementTable+0xdc>)
	filter = desired_table;
 8011e6e:	4916      	ldr	r1, [pc, #88]	; (8011ec8 <incrementTable+0x100>)
 8011e70:	6011      	str	r1, [r2, #0]
 8011e72:	f44f 7280 	mov.w	r2, #256	; 0x100
	max_filter_index = size;
 8011e76:	801a      	strh	r2, [r3, #0]
 8011e78:	4770      	bx	lr
	filter = desired_table;
 8011e7a:	4a09      	ldr	r2, [pc, #36]	; (8011ea0 <incrementTable+0xd8>)
	max_filter_index = size;
 8011e7c:	4b09      	ldr	r3, [pc, #36]	; (8011ea4 <incrementTable+0xdc>)
	filter = desired_table;
 8011e7e:	4913      	ldr	r1, [pc, #76]	; (8011ecc <incrementTable+0x104>)
 8011e80:	6011      	str	r1, [r2, #0]
 8011e82:	f44f 7280 	mov.w	r2, #256	; 0x100
	max_filter_index = size;
 8011e86:	801a      	strh	r2, [r3, #0]
 8011e88:	4770      	bx	lr
	filter = desired_table;
 8011e8a:	4a05      	ldr	r2, [pc, #20]	; (8011ea0 <incrementTable+0xd8>)
	max_filter_index = size;
 8011e8c:	4b05      	ldr	r3, [pc, #20]	; (8011ea4 <incrementTable+0xdc>)
	filter = desired_table;
 8011e8e:	4910      	ldr	r1, [pc, #64]	; (8011ed0 <incrementTable+0x108>)
 8011e90:	6011      	str	r1, [r2, #0]
 8011e92:	f44f 7280 	mov.w	r2, #256	; 0x100
	max_filter_index = size;
 8011e96:	801a      	strh	r2, [r3, #0]
 8011e98:	4770      	bx	lr
 8011e9a:	bf00      	nop
 8011e9c:	20005319 	.word	0x20005319
 8011ea0:	20007ae0 	.word	0x20007ae0
 8011ea4:	2000004c 	.word	0x2000004c
 8011ea8:	08016bc0 	.word	0x08016bc0
 8011eac:	080158ac 	.word	0x080158ac
 8011eb0:	080168ac 	.word	0x080168ac
 8011eb4:	080169b0 	.word	0x080169b0
 8011eb8:	08016ab8 	.word	0x08016ab8
 8011ebc:	080156ac 	.word	0x080156ac
 8011ec0:	080176c8 	.word	0x080176c8
 8011ec4:	080178c8 	.word	0x080178c8
 8011ec8:	080150ac 	.word	0x080150ac
 8011ecc:	080152ac 	.word	0x080152ac
 8011ed0:	080154ac 	.word	0x080154ac

08011ed4 <turnOnLidarSounds>:
void turnOnLidarSounds(void){
 8011ed4:	b508      	push	{r3, lr}
	if(lidarModeActive == 0){
 8011ed6:	4b07      	ldr	r3, [pc, #28]	; (8011ef4 <turnOnLidarSounds+0x20>)
 8011ed8:	781a      	ldrb	r2, [r3, #0]
 8011eda:	b93a      	cbnz	r2, 8011eec <turnOnLidarSounds+0x18>
		lidarModeActive = 1;
 8011edc:	2201      	movs	r2, #1
 8011ede:	701a      	strb	r2, [r3, #0]
		lidarStart();
 8011ee0:	f7fe fc6c 	bl	80107bc <lidarStart>
		osSemaphoreRelease (lidarSampleReadySemaphoreHandle);
 8011ee4:	4b04      	ldr	r3, [pc, #16]	; (8011ef8 <turnOnLidarSounds+0x24>)
 8011ee6:	6818      	ldr	r0, [r3, #0]
 8011ee8:	f7fa f8e2 	bl	800c0b0 <osSemaphoreRelease>
	capModeActive = 0;
 8011eec:	4b03      	ldr	r3, [pc, #12]	; (8011efc <turnOnLidarSounds+0x28>)
 8011eee:	2200      	movs	r2, #0
 8011ef0:	701a      	strb	r2, [r3, #0]
 8011ef2:	bd08      	pop	{r3, pc}
 8011ef4:	20005318 	.word	0x20005318
 8011ef8:	200054e0 	.word	0x200054e0
 8011efc:	200052d1 	.word	0x200052d1

08011f00 <turnOnCapSounds>:
void turnOnCapSounds(void){
 8011f00:	b510      	push	{r4, lr}
	if(lidarModeActive) lidarStop();
 8011f02:	4c0a      	ldr	r4, [pc, #40]	; (8011f2c <turnOnCapSounds+0x2c>)
 8011f04:	7823      	ldrb	r3, [r4, #0]
 8011f06:	b973      	cbnz	r3, 8011f26 <turnOnCapSounds+0x26>
	if(capModeActive != 1){
 8011f08:	4b09      	ldr	r3, [pc, #36]	; (8011f30 <turnOnCapSounds+0x30>)
 8011f0a:	781a      	ldrb	r2, [r3, #0]
 8011f0c:	2a01      	cmp	r2, #1
 8011f0e:	d009      	beq.n	8011f24 <turnOnCapSounds+0x24>
		lidarModeActive = 0;
 8011f10:	2200      	movs	r2, #0
 8011f12:	7022      	strb	r2, [r4, #0]
		osSemaphoreRelease (capSampleSemaphoreHandle);
 8011f14:	4907      	ldr	r1, [pc, #28]	; (8011f34 <turnOnCapSounds+0x34>)
		capModeActive = 1;
 8011f16:	2201      	movs	r2, #1
 8011f18:	701a      	strb	r2, [r3, #0]
		osSemaphoreRelease (capSampleSemaphoreHandle);
 8011f1a:	6808      	ldr	r0, [r1, #0]
}
 8011f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		osSemaphoreRelease (capSampleSemaphoreHandle);
 8011f20:	f7fa b8c6 	b.w	800c0b0 <osSemaphoreRelease>
 8011f24:	bd10      	pop	{r4, pc}
	if(lidarModeActive) lidarStop();
 8011f26:	f7fe fc3d 	bl	80107a4 <lidarStop>
 8011f2a:	e7ed      	b.n	8011f08 <turnOnCapSounds+0x8>
 8011f2c:	20005318 	.word	0x20005318
 8011f30:	200052d1 	.word	0x200052d1
 8011f34:	20005420 	.word	0x20005420

08011f38 <turnOffSounds>:
void turnOffSounds(void){
 8011f38:	b510      	push	{r4, lr}
	if(lidarModeActive) lidarStop();
 8011f3a:	4c05      	ldr	r4, [pc, #20]	; (8011f50 <turnOffSounds+0x18>)
 8011f3c:	7823      	ldrb	r3, [r4, #0]
 8011f3e:	b10b      	cbz	r3, 8011f44 <turnOffSounds+0xc>
 8011f40:	f7fe fc30 	bl	80107a4 <lidarStop>
	capModeActive = 0;
 8011f44:	4a03      	ldr	r2, [pc, #12]	; (8011f54 <turnOffSounds+0x1c>)
	lidarModeActive = 0;
 8011f46:	2300      	movs	r3, #0
 8011f48:	7023      	strb	r3, [r4, #0]
	capModeActive = 0;
 8011f4a:	7013      	strb	r3, [r2, #0]
 8011f4c:	bd10      	pop	{r4, pc}
 8011f4e:	bf00      	nop
 8011f50:	20005318 	.word	0x20005318
 8011f54:	200052d1 	.word	0x200052d1

08011f58 <calcLidarFreq>:
void calcLidarFreq(int16_t* measurement){
 8011f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	prevlidarSampleTime = lidarSampleTime;
 8011f5a:	4c45      	ldr	r4, [pc, #276]	; (8012070 <calcLidarFreq+0x118>)
 8011f5c:	4d45      	ldr	r5, [pc, #276]	; (8012074 <calcLidarFreq+0x11c>)
 8011f5e:	6823      	ldr	r3, [r4, #0]
	time_delta = lidarSampleTime - prevlidarSampleTime;
 8011f60:	4e45      	ldr	r6, [pc, #276]	; (8012078 <calcLidarFreq+0x120>)
void calcLidarFreq(int16_t* measurement){
 8011f62:	ed2d 8b02 	vpush	{d8}
 8011f66:	4607      	mov	r7, r0
	prevlidarSampleTime = lidarSampleTime;
 8011f68:	602b      	str	r3, [r5, #0]
	lidarSampleTime = HAL_GetTick();
 8011f6a:	f7ee ffed 	bl	8000f48 <HAL_GetTick>
 8011f6e:	6020      	str	r0, [r4, #0]
	freq_lidar_new = 123.471*expf(0.00288811*((float)*measurement));
 8011f70:	f9b7 0000 	ldrsh.w	r0, [r7]
	time_delta = lidarSampleTime - prevlidarSampleTime;
 8011f74:	6823      	ldr	r3, [r4, #0]
 8011f76:	682a      	ldr	r2, [r5, #0]
	freq_lidar = freq_lidar_new;
 8011f78:	4d40      	ldr	r5, [pc, #256]	; (801207c <calcLidarFreq+0x124>)
 8011f7a:	4c41      	ldr	r4, [pc, #260]	; (8012080 <calcLidarFreq+0x128>)
	freq_lidar_new = 123.471*expf(0.00288811*((float)*measurement));
 8011f7c:	ee07 0a90 	vmov	s15, r0
	time_delta = lidarSampleTime - prevlidarSampleTime;
 8011f80:	1a9b      	subs	r3, r3, r2
	freq_lidar_new = 123.471*expf(0.00288811*((float)*measurement));
 8011f82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	time_delta = lidarSampleTime - prevlidarSampleTime;
 8011f86:	6033      	str	r3, [r6, #0]
	freq_lidar = freq_lidar_new;
 8011f88:	682b      	ldr	r3, [r5, #0]
 8011f8a:	6023      	str	r3, [r4, #0]
	freq_lidar_new = 123.471*expf(0.00288811*((float)*measurement));
 8011f8c:	ee17 0a90 	vmov	r0, s15
 8011f90:	f7ee fa9a 	bl	80004c8 <__aeabi_f2d>
 8011f94:	a330      	add	r3, pc, #192	; (adr r3, 8012058 <calcLidarFreq+0x100>)
 8011f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f9a:	f7ee fae9 	bl	8000570 <__aeabi_dmul>
 8011f9e:	f7ee fddf 	bl	8000b60 <__aeabi_d2f>
 8011fa2:	ee00 0a10 	vmov	s0, r0
 8011fa6:	f002 f859 	bl	801405c <expf>
 8011faa:	ee10 0a10 	vmov	r0, s0
 8011fae:	f7ee fa8b 	bl	80004c8 <__aeabi_f2d>
 8011fb2:	a32b      	add	r3, pc, #172	; (adr r3, 8012060 <calcLidarFreq+0x108>)
 8011fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fb8:	f7ee fada 	bl	8000570 <__aeabi_dmul>
 8011fbc:	f7ee fdd0 	bl	8000b60 <__aeabi_d2f>
 8011fc0:	6028      	str	r0, [r5, #0]
	if(freq_lidar > 16000) freq_lidar = 16000;
 8011fc2:	ed94 7a00 	vldr	s14, [r4]
 8011fc6:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8012084 <calcLidarFreq+0x12c>
	if(freq_lidar_prev == freq_lidar) freq_lidar_step = 0;
 8011fca:	4b2f      	ldr	r3, [pc, #188]	; (8012088 <calcLidarFreq+0x130>)
	if(freq_lidar > 16000) freq_lidar = 16000;
 8011fcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fd4:	bfc8      	it	gt
 8011fd6:	edc4 7a00 	vstrgt	s15, [r4]
	if(freq_lidar_prev == freq_lidar) freq_lidar_step = 0;
 8011fda:	ed93 7a00 	vldr	s14, [r3]
 8011fde:	edd4 7a00 	vldr	s15, [r4]
 8011fe2:	eeb4 7a67 	vcmp.f32	s14, s15
 8011fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fea:	d02f      	beq.n	801204c <calcLidarFreq+0xf4>
		freq_lidar_step = ((freq_lidar_new - freq_lidar) / ( ((int8_t)(time_delta/LIDAR_INTERPOLATE)) * 512) ) ;
 8011fec:	ed95 8a00 	vldr	s16, [r5]
 8011ff0:	edd4 7a00 	vldr	s15, [r4]
 8011ff4:	6830      	ldr	r0, [r6, #0]
 8011ff6:	ee38 8a67 	vsub.f32	s16, s16, s15
 8011ffa:	f7ee fa43 	bl	8000484 <__aeabi_ui2d>
 8011ffe:	a31a      	add	r3, pc, #104	; (adr r3, 8012068 <calcLidarFreq+0x110>)
 8012000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012004:	f7ee fab4 	bl	8000570 <__aeabi_dmul>
 8012008:	f7ee fd62 	bl	8000ad0 <__aeabi_d2iz>
 801200c:	b240      	sxtb	r0, r0
 801200e:	0240      	lsls	r0, r0, #9
 8012010:	ee07 0a90 	vmov	s15, r0
 8012014:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012018:	4b1c      	ldr	r3, [pc, #112]	; (801208c <calcLidarFreq+0x134>)
 801201a:	ee88 7a27 	vdiv.f32	s14, s16, s15
 801201e:	ed83 7a00 	vstr	s14, [r3]
	freq_lidar_inc = (freq_lidar / ((float)DAC_FREQ)) * max_table_index;
 8012022:	4b1b      	ldr	r3, [pc, #108]	; (8012090 <calcLidarFreq+0x138>)
 8012024:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8012094 <calcLidarFreq+0x13c>
 8012028:	881b      	ldrh	r3, [r3, #0]
 801202a:	ed94 7a00 	vldr	s14, [r4]
 801202e:	4a1a      	ldr	r2, [pc, #104]	; (8012098 <calcLidarFreq+0x140>)
 8012030:	b21b      	sxth	r3, r3
 8012032:	ee07 3a90 	vmov	s15, r3
}
 8012036:	ecbd 8b02 	vpop	{d8}
	freq_lidar_inc = (freq_lidar / ((float)DAC_FREQ)) * max_table_index;
 801203a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801203e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012042:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012046:	edc2 7a00 	vstr	s15, [r2]
}
 801204a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(freq_lidar_prev == freq_lidar) freq_lidar_step = 0;
 801204c:	4b0f      	ldr	r3, [pc, #60]	; (801208c <calcLidarFreq+0x134>)
 801204e:	2200      	movs	r2, #0
 8012050:	601a      	str	r2, [r3, #0]
 8012052:	e7e6      	b.n	8012022 <calcLidarFreq+0xca>
 8012054:	f3af 8000 	nop.w
 8012058:	3fe97a02 	.word	0x3fe97a02
 801205c:	3f67a8ce 	.word	0x3f67a8ce
 8012060:	dd2f1aa0 	.word	0xdd2f1aa0
 8012064:	405ede24 	.word	0x405ede24
 8012068:	00000000 	.word	0x00000000
 801206c:	40538800 	.word	0x40538800
 8012070:	20006ab8 	.word	0x20006ab8
 8012074:	20007ae8 	.word	0x20007ae8
 8012078:	200076d0 	.word	0x200076d0
 801207c:	2000530c 	.word	0x2000530c
 8012080:	20000048 	.word	0x20000048
 8012084:	467a0000 	.word	0x467a0000
 8012088:	20005310 	.word	0x20005310
 801208c:	20005314 	.word	0x20005314
 8012090:	2000004e 	.word	0x2000004e
 8012094:	37d1b717 	.word	0x37d1b717
 8012098:	20006ab0 	.word	0x20006ab0
 801209c:	00000000 	.word	0x00000000

080120a0 <addTableToBuffer>:

void reset_index(volatile float* freq_ind){
	freq_ind = 0;
}

void addTableToBuffer(volatile q15_t* buffer, volatile float* freq_inc, volatile float* freq_ind){
 80120a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120a4:	ed2d 8b02 	vpush	{d8}
	if( (filter_active == 1) && (skipFilter == 0) ){
 80120a8:	4b6a      	ldr	r3, [pc, #424]	; (8012254 <addTableToBuffer+0x1b4>)
 80120aa:	781b      	ldrb	r3, [r3, #0]
 80120ac:	2b01      	cmp	r3, #1
void addTableToBuffer(volatile q15_t* buffer, volatile float* freq_inc, volatile float* freq_ind){
 80120ae:	b08d      	sub	sp, #52	; 0x34
	if( (filter_active == 1) && (skipFilter == 0) ){
 80120b0:	f000 80e4 	beq.w	801227c <addTableToBuffer+0x1dc>
		}


	}
	else{
		if(lidarModeActive){
 80120b4:	4b68      	ldr	r3, [pc, #416]	; (8012258 <addTableToBuffer+0x1b8>)
 80120b6:	781b      	ldrb	r3, [r3, #0]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d074      	beq.n	80121a6 <addTableToBuffer+0x106>
 80120bc:	4b67      	ldr	r3, [pc, #412]	; (801225c <addTableToBuffer+0x1bc>)
 80120be:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 8012274 <addTableToBuffer+0x1d4>
 80120c2:	f8d3 c000 	ldr.w	ip, [r3]
 80120c6:	4e66      	ldr	r6, [pc, #408]	; (8012260 <addTableToBuffer+0x1c0>)
 80120c8:	4d66      	ldr	r5, [pc, #408]	; (8012264 <addTableToBuffer+0x1c4>)
 80120ca:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8012278 <addTableToBuffer+0x1d8>
 80120ce:	4c66      	ldr	r4, [pc, #408]	; (8012268 <addTableToBuffer+0x1c8>)
 80120d0:	4f66      	ldr	r7, [pc, #408]	; (801226c <addTableToBuffer+0x1cc>)
	freq_lidar_inc = (freq_lidar / ((float)DAC_FREQ)) * max_table_index;
 80120d2:	ed9f 6a67 	vldr	s12, [pc, #412]	; 8012270 <addTableToBuffer+0x1d0>
 80120d6:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
	freq_lidar += freq_lidar_step;
 80120da:	ed9a 7a00 	vldr	s14, [sl]
 80120de:	edd6 7a00 	vldr	s15, [r6]
 80120e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80120e6:	edc6 7a00 	vstr	s15, [r6]
	freq_lidar_inc = (freq_lidar / ((float)DAC_FREQ)) * max_table_index;
 80120ea:	882b      	ldrh	r3, [r5, #0]
 80120ec:	ed96 7a00 	vldr	s14, [r6]
 80120f0:	b21b      	sxth	r3, r3
 80120f2:	ee07 3a90 	vmov	s15, r3
 80120f6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80120fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80120fe:	ee66 7a87 	vmul.f32	s15, s13, s14
 8012102:	edc9 7a00 	vstr	s15, [r9]
	filter_product = (*waveTable) * (filter[incrementFilterIndex(&freq_fil_inc, &freq_fil_ind)]/255.0);
	return (q15_t) filter_product;
}

uint16_t incrementIndex(volatile float* freq_inc, volatile float* freq_ind){
	*freq_ind += (*freq_inc);
 8012106:	ed91 7a00 	vldr	s14, [r1]
 801210a:	edd2 7a00 	vldr	s15, [r2]
 801210e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012112:	edc2 7a00 	vstr	s15, [r2]
	if((*freq_ind) >= max_table_index){
 8012116:	ed92 7a00 	vldr	s14, [r2]
 801211a:	882b      	ldrh	r3, [r5, #0]
 801211c:	b21b      	sxth	r3, r3
 801211e:	ee07 3a90 	vmov	s15, r3
 8012122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012126:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801212a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801212e:	db0b      	blt.n	8012148 <addTableToBuffer+0xa8>
		(*freq_ind) -= max_table_index;
 8012130:	882b      	ldrh	r3, [r5, #0]
 8012132:	ed92 7a00 	vldr	s14, [r2]
 8012136:	b21b      	sxth	r3, r3
 8012138:	ee07 3a90 	vmov	s15, r3
 801213c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012144:	edc2 7a00 	vstr	s15, [r2]
	}

	return (uint16_t)(*freq_ind);
 8012148:	edd2 7a00 	vldr	s15, [r2]
 801214c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012150:	edcd 7a00 	vstr	s15, [sp]
				table_val = waveTable[incrementIndex(freq_inc, freq_ind)];
 8012154:	f8bd 3000 	ldrh.w	r3, [sp]
 8012158:	f83c 3013 	ldrh.w	r3, [ip, r3, lsl #1]
 801215c:	b21b      	sxth	r3, r3
 801215e:	8023      	strh	r3, [r4, #0]
				buffer[i] += ampltiude_multiplier * table_val * SCALE_OUTPUT;
 8012160:	f8b4 8000 	ldrh.w	r8, [r4]
 8012164:	edd7 7a00 	vldr	s15, [r7]
 8012168:	8803      	ldrh	r3, [r0, #0]
 801216a:	fa0f f888 	sxth.w	r8, r8
 801216e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8012172:	ee07 8a90 	vmov	s15, r8
 8012176:	b21b      	sxth	r3, r3
 8012178:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801217c:	ee07 3a90 	vmov	s15, r3
 8012180:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012184:	eee7 7a26 	vfma.f32	s15, s14, s13
 8012188:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801218c:	edcd 7a00 	vstr	s15, [sp]
 8012190:	f9bd 3000 	ldrsh.w	r3, [sp]
 8012194:	f820 3b02 	strh.w	r3, [r0], #2
			for(int i = 0; i < BUFFER_SIZE; i++){
 8012198:	4570      	cmp	r0, lr
 801219a:	d19e      	bne.n	80120da <addTableToBuffer+0x3a>
}
 801219c:	b00d      	add	sp, #52	; 0x34
 801219e:	ecbd 8b02 	vpop	{d8}
 80121a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121a6:	4b2d      	ldr	r3, [pc, #180]	; (801225c <addTableToBuffer+0x1bc>)
 80121a8:	4d2e      	ldr	r5, [pc, #184]	; (8012264 <addTableToBuffer+0x1c4>)
 80121aa:	f8d3 e000 	ldr.w	lr, [r3]
 80121ae:	4c2e      	ldr	r4, [pc, #184]	; (8012268 <addTableToBuffer+0x1c8>)
 80121b0:	4f2e      	ldr	r7, [pc, #184]	; (801226c <addTableToBuffer+0x1cc>)
 80121b2:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
	*freq_ind += (*freq_inc);
 80121b6:	ed91 7a00 	vldr	s14, [r1]
 80121ba:	edd2 7a00 	vldr	s15, [r2]
 80121be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80121c2:	edc2 7a00 	vstr	s15, [r2]
	if((*freq_ind) >= max_table_index){
 80121c6:	ed92 7a00 	vldr	s14, [r2]
 80121ca:	882b      	ldrh	r3, [r5, #0]
 80121cc:	b21b      	sxth	r3, r3
 80121ce:	ee07 3a90 	vmov	s15, r3
 80121d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80121d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80121da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121de:	db0b      	blt.n	80121f8 <addTableToBuffer+0x158>
		(*freq_ind) -= max_table_index;
 80121e0:	882b      	ldrh	r3, [r5, #0]
 80121e2:	ed92 7a00 	vldr	s14, [r2]
 80121e6:	b21b      	sxth	r3, r3
 80121e8:	ee07 3a90 	vmov	s15, r3
 80121ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80121f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80121f4:	edc2 7a00 	vstr	s15, [r2]
	return (uint16_t)(*freq_ind);
 80121f8:	edd2 7a00 	vldr	s15, [r2]
 80121fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012200:	edcd 7a00 	vstr	s15, [sp]
				table_val = waveTable[incrementIndex(freq_inc, freq_ind)];
 8012204:	f8bd 3000 	ldrh.w	r3, [sp]
 8012208:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 801220c:	b21b      	sxth	r3, r3
 801220e:	8023      	strh	r3, [r4, #0]
				buffer[i] += ampltiude_multiplier * table_val * SCALE_OUTPUT;
 8012210:	8826      	ldrh	r6, [r4, #0]
 8012212:	edd7 7a00 	vldr	s15, [r7]
 8012216:	8803      	ldrh	r3, [r0, #0]
 8012218:	b236      	sxth	r6, r6
 801221a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801221e:	ee07 6a90 	vmov	s15, r6
 8012222:	b21b      	sxth	r3, r3
 8012224:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012228:	ee07 3a90 	vmov	s15, r3
 801222c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012230:	eee7 7a26 	vfma.f32	s15, s14, s13
 8012234:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012238:	edcd 7a00 	vstr	s15, [sp]
 801223c:	f9bd 3000 	ldrsh.w	r3, [sp]
 8012240:	f820 3b02 	strh.w	r3, [r0], #2
			for(int i = 0; i < BUFFER_SIZE; i++){
 8012244:	4584      	cmp	ip, r0
 8012246:	d1b6      	bne.n	80121b6 <addTableToBuffer+0x116>
}
 8012248:	b00d      	add	sp, #52	; 0x34
 801224a:	ecbd 8b02 	vpop	{d8}
 801224e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012252:	bf00      	nop
 8012254:	200052d2 	.word	0x200052d2
 8012258:	20005318 	.word	0x20005318
 801225c:	200086f4 	.word	0x200086f4
 8012260:	20000048 	.word	0x20000048
 8012264:	2000004e 	.word	0x2000004e
 8012268:	200076d4 	.word	0x200076d4
 801226c:	200052cc 	.word	0x200052cc
 8012270:	37d1b717 	.word	0x37d1b717
 8012274:	20005314 	.word	0x20005314
 8012278:	20006ab0 	.word	0x20006ab0
	if( (filter_active == 1) && (skipFilter == 0) ){
 801227c:	4b74      	ldr	r3, [pc, #464]	; (8012450 <addTableToBuffer+0x3b0>)
 801227e:	781b      	ldrb	r3, [r3, #0]
 8012280:	2b00      	cmp	r3, #0
 8012282:	f47f af17 	bne.w	80120b4 <addTableToBuffer+0x14>
		if(lidarModeActive){
 8012286:	4b73      	ldr	r3, [pc, #460]	; (8012454 <addTableToBuffer+0x3b4>)
 8012288:	9100      	str	r1, [sp, #0]
 801228a:	781b      	ldrb	r3, [r3, #0]
 801228c:	4693      	mov	fp, r2
 801228e:	4a72      	ldr	r2, [pc, #456]	; (8012458 <addTableToBuffer+0x3b8>)
 8012290:	2b00      	cmp	r3, #0
 8012292:	f000 80fb 	beq.w	801248c <addTableToBuffer+0x3ec>
 8012296:	4b71      	ldr	r3, [pc, #452]	; (801245c <addTableToBuffer+0x3bc>)
 8012298:	4e71      	ldr	r6, [pc, #452]	; (8012460 <addTableToBuffer+0x3c0>)
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	9306      	str	r3, [sp, #24]
 801229e:	4b71      	ldr	r3, [pc, #452]	; (8012464 <addTableToBuffer+0x3c4>)
 80122a0:	9301      	str	r3, [sp, #4]
 80122a2:	4b71      	ldr	r3, [pc, #452]	; (8012468 <addTableToBuffer+0x3c8>)
 80122a4:	9302      	str	r3, [sp, #8]
 80122a6:	4b71      	ldr	r3, [pc, #452]	; (801246c <addTableToBuffer+0x3cc>)
 80122a8:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8012480 <addTableToBuffer+0x3e0>
 80122ac:	4c70      	ldr	r4, [pc, #448]	; (8012470 <addTableToBuffer+0x3d0>)
 80122ae:	6812      	ldr	r2, [r2, #0]
 80122b0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8012484 <addTableToBuffer+0x3e4>
 80122b4:	9307      	str	r3, [sp, #28]
 80122b6:	4f6f      	ldr	r7, [pc, #444]	; (8012474 <addTableToBuffer+0x3d4>)
 80122b8:	4d6f      	ldr	r5, [pc, #444]	; (8012478 <addTableToBuffer+0x3d8>)
 80122ba:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8012488 <addTableToBuffer+0x3e8>
	freq_lidar_inc = (freq_lidar / ((float)DAC_FREQ)) * max_table_index;
 80122be:	ed9f 8a6f 	vldr	s16, [pc, #444]	; 801247c <addTableToBuffer+0x3dc>
 80122c2:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80122c6:	f500 6380 	add.w	r3, r0, #1024	; 0x400
 80122ca:	9409      	str	r4, [sp, #36]	; 0x24
 80122cc:	9205      	str	r2, [sp, #20]
 80122ce:	9304      	str	r3, [sp, #16]
 80122d0:	f8cd 9020 	str.w	r9, [sp, #32]
 80122d4:	46b2      	mov	sl, r6
 80122d6:	970b      	str	r7, [sp, #44]	; 0x2c
 80122d8:	4604      	mov	r4, r0
	freq_lidar += freq_lidar_step;
 80122da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122dc:	ed93 7a00 	vldr	s14, [r3]
 80122e0:	edda 7a00 	vldr	s15, [sl]
 80122e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80122e8:	edca 7a00 	vstr	s15, [sl]
	freq_lidar_inc = (freq_lidar / ((float)DAC_FREQ)) * max_table_index;
 80122ec:	882b      	ldrh	r3, [r5, #0]
 80122ee:	edda 6a00 	vldr	s13, [sl]
 80122f2:	b21b      	sxth	r3, r3
 80122f4:	ee07 3a90 	vmov	s15, r3
 80122f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80122fc:	ee66 7a88 	vmul.f32	s15, s13, s16
 8012300:	9b08      	ldr	r3, [sp, #32]
 8012302:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012306:	edc3 7a00 	vstr	s15, [r3]
	*freq_ind += (*freq_inc);
 801230a:	9b00      	ldr	r3, [sp, #0]
 801230c:	ed93 7a00 	vldr	s14, [r3]
 8012310:	eddb 7a00 	vldr	s15, [fp]
 8012314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012318:	edcb 7a00 	vstr	s15, [fp]
	if((*freq_ind) >= max_table_index){
 801231c:	ed9b 7a00 	vldr	s14, [fp]
 8012320:	882b      	ldrh	r3, [r5, #0]
 8012322:	b21b      	sxth	r3, r3
 8012324:	ee07 3a90 	vmov	s15, r3
 8012328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801232c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012334:	db0b      	blt.n	801234e <addTableToBuffer+0x2ae>
		(*freq_ind) -= max_table_index;
 8012336:	882b      	ldrh	r3, [r5, #0]
 8012338:	ed9b 7a00 	vldr	s14, [fp]
 801233c:	b21b      	sxth	r3, r3
 801233e:	ee07 3a90 	vmov	s15, r3
 8012342:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012346:	ee77 7a67 	vsub.f32	s15, s14, s15
 801234a:	edcb 7a00 	vstr	s15, [fp]
	return (uint16_t)(*freq_ind);
 801234e:	eddb 7a00 	vldr	s15, [fp]
				table_val = waveTable[incrementIndex(freq_inc, freq_ind)];
 8012352:	9a05      	ldr	r2, [sp, #20]
 8012354:	9909      	ldr	r1, [sp, #36]	; 0x24
	return (uint16_t)(*freq_ind);
 8012356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801235a:	edcd 7a03 	vstr	s15, [sp, #12]
				table_val = waveTable[incrementIndex(freq_inc, freq_ind)];
 801235e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8012362:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012366:	b21b      	sxth	r3, r3
 8012368:	800b      	strh	r3, [r1, #0]
	filter_product = (*waveTable) * (filter[incrementFilterIndex(&freq_fil_inc, &freq_fil_ind)]/255.0);
 801236a:	f9b1 0000 	ldrsh.w	r0, [r1]
 801236e:	f7ee f899 	bl	80004a4 <__aeabi_i2d>
}

uint16_t incrementFilterIndex(volatile float* freq_inc, volatile float* freq_ind){
	*freq_ind += (*freq_inc);
 8012372:	9e01      	ldr	r6, [sp, #4]
	if((*freq_ind) >= max_filter_index){
 8012374:	9f02      	ldr	r7, [sp, #8]
	*freq_ind += (*freq_inc);
 8012376:	ed96 7a00 	vldr	s14, [r6]
 801237a:	edd8 7a00 	vldr	s15, [r8]
 801237e:	ee77 7a27 	vadd.f32	s15, s14, s15
	filter_product = (*waveTable) * (filter[incrementFilterIndex(&freq_fil_inc, &freq_fil_ind)]/255.0);
 8012382:	a331      	add	r3, pc, #196	; (adr r3, 8012448 <addTableToBuffer+0x3a8>)
 8012384:	e9d3 2300 	ldrd	r2, r3, [r3]
	*freq_ind += (*freq_inc);
 8012388:	edc8 7a00 	vstr	s15, [r8]
	if((*freq_ind) >= max_filter_index){
 801238c:	ed98 7a00 	vldr	s14, [r8]
 8012390:	883e      	ldrh	r6, [r7, #0]
 8012392:	b236      	sxth	r6, r6
 8012394:	ee07 6a90 	vmov	s15, r6
 8012398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801239c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80123a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123a4:	db0b      	blt.n	80123be <addTableToBuffer+0x31e>
		(*freq_ind) -= max_filter_index;
 80123a6:	883e      	ldrh	r6, [r7, #0]
 80123a8:	ed98 7a00 	vldr	s14, [r8]
 80123ac:	b236      	sxth	r6, r6
 80123ae:	ee07 6a90 	vmov	s15, r6
 80123b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80123b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80123ba:	edc8 7a00 	vstr	s15, [r8]
	}

	return (uint16_t)(*freq_ind);
 80123be:	edd8 7a00 	vldr	s15, [r8]
	filter_product = (*waveTable) * (filter[incrementFilterIndex(&freq_fil_inc, &freq_fil_ind)]/255.0);
 80123c2:	9f06      	ldr	r7, [sp, #24]
	return (uint16_t)(*freq_ind);
 80123c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80123c8:	edcd 7a03 	vstr	s15, [sp, #12]
	filter_product = (*waveTable) * (filter[incrementFilterIndex(&freq_fil_inc, &freq_fil_ind)]/255.0);
 80123cc:	f8bd 600c 	ldrh.w	r6, [sp, #12]
 80123d0:	f7ee f8ce 	bl	8000570 <__aeabi_dmul>
 80123d4:	f837 9016 	ldrh.w	r9, [r7, r6, lsl #1]
 80123d8:	fa1f f989 	uxth.w	r9, r9
 80123dc:	4606      	mov	r6, r0
 80123de:	4648      	mov	r0, r9
 80123e0:	460f      	mov	r7, r1
 80123e2:	f7ee f85f 	bl	80004a4 <__aeabi_i2d>
 80123e6:	4602      	mov	r2, r0
 80123e8:	460b      	mov	r3, r1
 80123ea:	4630      	mov	r0, r6
 80123ec:	4639      	mov	r1, r7
 80123ee:	f7ee f8bf 	bl	8000570 <__aeabi_dmul>
 80123f2:	f7ee fbb5 	bl	8000b60 <__aeabi_d2f>
 80123f6:	9a07      	ldr	r2, [sp, #28]
					buffer[i] += ampltiude_multiplier*filter_multiplier(&table_val) * SCALE_OUTPUT;
 80123f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	filter_product = (*waveTable) * (filter[incrementFilterIndex(&freq_fil_inc, &freq_fil_ind)]/255.0);
 80123fa:	6010      	str	r0, [r2, #0]
	return (q15_t) filter_product;
 80123fc:	ed92 7a00 	vldr	s14, [r2]
					buffer[i] += ampltiude_multiplier*filter_multiplier(&table_val) * SCALE_OUTPUT;
 8012400:	edd3 7a00 	vldr	s15, [r3]
 8012404:	8823      	ldrh	r3, [r4, #0]
	return (q15_t) filter_product;
 8012406:	eebd 7ac7 	vcvt.s32.f32	s14, s14
					buffer[i] += ampltiude_multiplier*filter_multiplier(&table_val) * SCALE_OUTPUT;
 801240a:	b21b      	sxth	r3, r3
	return (q15_t) filter_product;
 801240c:	ed8d 7a03 	vstr	s14, [sp, #12]
					buffer[i] += ampltiude_multiplier*filter_multiplier(&table_val) * SCALE_OUTPUT;
 8012410:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8012414:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8012418:	ee07 2a10 	vmov	s14, r2
 801241c:	ee07 3a90 	vmov	s15, r3
 8012420:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012428:	eee6 7a87 	vfma.f32	s15, s13, s14
 801242c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012430:	edcd 7a03 	vstr	s15, [sp, #12]
 8012434:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8012438:	f824 3b02 	strh.w	r3, [r4], #2
			for(int i = 0; i < BUFFER_SIZE; i++){
 801243c:	9b04      	ldr	r3, [sp, #16]
 801243e:	42a3      	cmp	r3, r4
 8012440:	f47f af4b 	bne.w	80122da <addTableToBuffer+0x23a>
 8012444:	e6aa      	b.n	801219c <addTableToBuffer+0xfc>
 8012446:	bf00      	nop
 8012448:	10101010 	.word	0x10101010
 801244c:	3f701010 	.word	0x3f701010
 8012450:	2000531a 	.word	0x2000531a
 8012454:	20005318 	.word	0x20005318
 8012458:	200086f4 	.word	0x200086f4
 801245c:	20007ae0 	.word	0x20007ae0
 8012460:	20000048 	.word	0x20000048
 8012464:	200076dc 	.word	0x200076dc
 8012468:	2000004c 	.word	0x2000004c
 801246c:	200086f8 	.word	0x200086f8
 8012470:	200076d4 	.word	0x200076d4
 8012474:	200052cc 	.word	0x200052cc
 8012478:	2000004e 	.word	0x2000004e
 801247c:	37d1b717 	.word	0x37d1b717
 8012480:	20005314 	.word	0x20005314
 8012484:	20006ab0 	.word	0x20006ab0
 8012488:	20005304 	.word	0x20005304
 801248c:	4b5c      	ldr	r3, [pc, #368]	; (8012600 <addTableToBuffer+0x560>)
 801248e:	6812      	ldr	r2, [r2, #0]
 8012490:	f8d3 9000 	ldr.w	r9, [r3]
 8012494:	4b5b      	ldr	r3, [pc, #364]	; (8012604 <addTableToBuffer+0x564>)
 8012496:	9301      	str	r3, [sp, #4]
 8012498:	4b5b      	ldr	r3, [pc, #364]	; (8012608 <addTableToBuffer+0x568>)
 801249a:	9302      	str	r3, [sp, #8]
 801249c:	4b5b      	ldr	r3, [pc, #364]	; (801260c <addTableToBuffer+0x56c>)
 801249e:	9204      	str	r2, [sp, #16]
 80124a0:	4d5b      	ldr	r5, [pc, #364]	; (8012610 <addTableToBuffer+0x570>)
 80124a2:	4f5c      	ldr	r7, [pc, #368]	; (8012614 <addTableToBuffer+0x574>)
 80124a4:	4c5c      	ldr	r4, [pc, #368]	; (8012618 <addTableToBuffer+0x578>)
 80124a6:	f8df 8174 	ldr.w	r8, [pc, #372]	; 801261c <addTableToBuffer+0x57c>
 80124aa:	f8cd 9018 	str.w	r9, [sp, #24]
 80124ae:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 80124b2:	4682      	mov	sl, r0
 80124b4:	9205      	str	r2, [sp, #20]
 80124b6:	4699      	mov	r9, r3
 80124b8:	9507      	str	r5, [sp, #28]
 80124ba:	9708      	str	r7, [sp, #32]
	*freq_ind += (*freq_inc);
 80124bc:	9b00      	ldr	r3, [sp, #0]
	if((*freq_ind) >= max_table_index){
 80124be:	9a07      	ldr	r2, [sp, #28]
	*freq_ind += (*freq_inc);
 80124c0:	ed93 7a00 	vldr	s14, [r3]
 80124c4:	eddb 7a00 	vldr	s15, [fp]
 80124c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80124cc:	edcb 7a00 	vstr	s15, [fp]
	if((*freq_ind) >= max_table_index){
 80124d0:	ed9b 7a00 	vldr	s14, [fp]
 80124d4:	8813      	ldrh	r3, [r2, #0]
 80124d6:	b21b      	sxth	r3, r3
 80124d8:	ee07 3a90 	vmov	s15, r3
 80124dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80124e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80124e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124e8:	db0b      	blt.n	8012502 <addTableToBuffer+0x462>
		(*freq_ind) -= max_table_index;
 80124ea:	8813      	ldrh	r3, [r2, #0]
 80124ec:	ed9b 7a00 	vldr	s14, [fp]
 80124f0:	b21b      	sxth	r3, r3
 80124f2:	ee07 3a90 	vmov	s15, r3
 80124f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80124fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80124fe:	edcb 7a00 	vstr	s15, [fp]
	return (uint16_t)(*freq_ind);
 8012502:	eddb 7a00 	vldr	s15, [fp]
				table_val = waveTable[incrementIndex(freq_inc, freq_ind)];
 8012506:	9a04      	ldr	r2, [sp, #16]
	return (uint16_t)(*freq_ind);
 8012508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801250c:	edcd 7a03 	vstr	s15, [sp, #12]
				table_val = waveTable[incrementIndex(freq_inc, freq_ind)];
 8012510:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8012514:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012518:	b21b      	sxth	r3, r3
 801251a:	8023      	strh	r3, [r4, #0]
	filter_product = (*waveTable) * (filter[incrementFilterIndex(&freq_fil_inc, &freq_fil_ind)]/255.0);
 801251c:	f9b4 0000 	ldrsh.w	r0, [r4]
 8012520:	f7ed ffc0 	bl	80004a4 <__aeabi_i2d>
	*freq_ind += (*freq_inc);
 8012524:	9d01      	ldr	r5, [sp, #4]
	if((*freq_ind) >= max_filter_index){
 8012526:	9e02      	ldr	r6, [sp, #8]
	*freq_ind += (*freq_inc);
 8012528:	ed95 7a00 	vldr	s14, [r5]
 801252c:	edd8 7a00 	vldr	s15, [r8]
 8012530:	ee77 7a27 	vadd.f32	s15, s14, s15
	filter_product = (*waveTable) * (filter[incrementFilterIndex(&freq_fil_inc, &freq_fil_ind)]/255.0);
 8012534:	a330      	add	r3, pc, #192	; (adr r3, 80125f8 <addTableToBuffer+0x558>)
 8012536:	e9d3 2300 	ldrd	r2, r3, [r3]
	*freq_ind += (*freq_inc);
 801253a:	edc8 7a00 	vstr	s15, [r8]
	if((*freq_ind) >= max_filter_index){
 801253e:	ed98 7a00 	vldr	s14, [r8]
 8012542:	8835      	ldrh	r5, [r6, #0]
 8012544:	b22d      	sxth	r5, r5
 8012546:	ee07 5a90 	vmov	s15, r5
 801254a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801254e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012556:	db0b      	blt.n	8012570 <addTableToBuffer+0x4d0>
		(*freq_ind) -= max_filter_index;
 8012558:	8835      	ldrh	r5, [r6, #0]
 801255a:	ed98 7a00 	vldr	s14, [r8]
 801255e:	b22d      	sxth	r5, r5
 8012560:	ee07 5a90 	vmov	s15, r5
 8012564:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012568:	ee77 7a67 	vsub.f32	s15, s14, s15
 801256c:	edc8 7a00 	vstr	s15, [r8]
	return (uint16_t)(*freq_ind);
 8012570:	edd8 7a00 	vldr	s15, [r8]
	filter_product = (*waveTable) * (filter[incrementFilterIndex(&freq_fil_inc, &freq_fil_ind)]/255.0);
 8012574:	9e06      	ldr	r6, [sp, #24]
	return (uint16_t)(*freq_ind);
 8012576:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801257a:	edcd 7a03 	vstr	s15, [sp, #12]
	filter_product = (*waveTable) * (filter[incrementFilterIndex(&freq_fil_inc, &freq_fil_ind)]/255.0);
 801257e:	f8bd 500c 	ldrh.w	r5, [sp, #12]
 8012582:	f7ed fff5 	bl	8000570 <__aeabi_dmul>
 8012586:	f836 5015 	ldrh.w	r5, [r6, r5, lsl #1]
 801258a:	b2ad      	uxth	r5, r5
 801258c:	4606      	mov	r6, r0
 801258e:	4628      	mov	r0, r5
 8012590:	460f      	mov	r7, r1
 8012592:	f7ed ff87 	bl	80004a4 <__aeabi_i2d>
 8012596:	4602      	mov	r2, r0
 8012598:	460b      	mov	r3, r1
 801259a:	4630      	mov	r0, r6
 801259c:	4639      	mov	r1, r7
 801259e:	f7ed ffe7 	bl	8000570 <__aeabi_dmul>
 80125a2:	f7ee fadd 	bl	8000b60 <__aeabi_d2f>
 80125a6:	f8c9 0000 	str.w	r0, [r9]
	return (q15_t) filter_product;
 80125aa:	ed99 7a00 	vldr	s14, [r9]
					buffer[i] += ampltiude_multiplier*filter_multiplier(&table_val) * SCALE_OUTPUT;
 80125ae:	9b08      	ldr	r3, [sp, #32]
	return (q15_t) filter_product;
 80125b0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
					buffer[i] += ampltiude_multiplier*filter_multiplier(&table_val) * SCALE_OUTPUT;
 80125b4:	edd3 7a00 	vldr	s15, [r3]
	return (q15_t) filter_product;
 80125b8:	ed8d 7a03 	vstr	s14, [sp, #12]
					buffer[i] += ampltiude_multiplier*filter_multiplier(&table_val) * SCALE_OUTPUT;
 80125bc:	f8ba 3000 	ldrh.w	r3, [sl]
 80125c0:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80125c4:	b21b      	sxth	r3, r3
 80125c6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80125ca:	ee07 2a10 	vmov	s14, r2
 80125ce:	ee07 3a90 	vmov	s15, r3
 80125d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80125d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80125da:	eee7 7a26 	vfma.f32	s15, s14, s13
 80125de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80125e2:	edcd 7a03 	vstr	s15, [sp, #12]
 80125e6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80125ea:	f82a 3b02 	strh.w	r3, [sl], #2
			for(int i = 0; i < BUFFER_SIZE; i++){
 80125ee:	9b05      	ldr	r3, [sp, #20]
 80125f0:	4553      	cmp	r3, sl
 80125f2:	f47f af63 	bne.w	80124bc <addTableToBuffer+0x41c>
 80125f6:	e5d1      	b.n	801219c <addTableToBuffer+0xfc>
 80125f8:	10101010 	.word	0x10101010
 80125fc:	3f701010 	.word	0x3f701010
 8012600:	20007ae0 	.word	0x20007ae0
 8012604:	200076dc 	.word	0x200076dc
 8012608:	2000004c 	.word	0x2000004c
 801260c:	200086f8 	.word	0x200086f8
 8012610:	2000004e 	.word	0x2000004e
 8012614:	200052cc 	.word	0x200052cc
 8012618:	200076d4 	.word	0x200076d4
 801261c:	20005304 	.word	0x20005304

08012620 <fillBuffer.part.0>:
void fillBuffer(volatile q15_t* buffer){
 8012620:	b510      	push	{r4, lr}
		if(LED_State(CAP_1_LED_PORT, CAP_1_LED_PIN)){
 8012622:	2120      	movs	r1, #32
void fillBuffer(volatile q15_t* buffer){
 8012624:	4604      	mov	r4, r0
		if(LED_State(CAP_1_LED_PORT, CAP_1_LED_PIN)){
 8012626:	2003      	movs	r0, #3
 8012628:	f7fd ff7c 	bl	8010524 <LED_State>
 801262c:	2800      	cmp	r0, #0
 801262e:	f040 8081 	bne.w	8012734 <fillBuffer.part.0+0x114>
		if(LED_State(CAP_2_LED_PORT, CAP_2_LED_PIN)){
 8012632:	2110      	movs	r1, #16
 8012634:	2003      	movs	r0, #3
 8012636:	f7fd ff75 	bl	8010524 <LED_State>
 801263a:	2800      	cmp	r0, #0
 801263c:	d174      	bne.n	8012728 <fillBuffer.part.0+0x108>
		if(LED_State(CAP_3_LED_PORT, CAP_3_LED_PIN)){
 801263e:	2108      	movs	r1, #8
 8012640:	2003      	movs	r0, #3
 8012642:	f7fd ff6f 	bl	8010524 <LED_State>
 8012646:	2800      	cmp	r0, #0
 8012648:	d168      	bne.n	801271c <fillBuffer.part.0+0xfc>
		if(LED_State(CAP_4_LED_PORT, CAP_4_LED_PIN)){
 801264a:	2104      	movs	r1, #4
 801264c:	2003      	movs	r0, #3
 801264e:	f7fd ff69 	bl	8010524 <LED_State>
 8012652:	2800      	cmp	r0, #0
 8012654:	d15c      	bne.n	8012710 <fillBuffer.part.0+0xf0>
		if(LED_State(CAP_5_LED_PORT, CAP_5_LED_PIN)){
 8012656:	2102      	movs	r1, #2
 8012658:	2003      	movs	r0, #3
 801265a:	f7fd ff63 	bl	8010524 <LED_State>
 801265e:	2800      	cmp	r0, #0
 8012660:	d150      	bne.n	8012704 <fillBuffer.part.0+0xe4>
		if(LED_State(CAP_6_LED_PORT, CAP_6_LED_PIN)){
 8012662:	2101      	movs	r1, #1
 8012664:	2003      	movs	r0, #3
 8012666:	f7fd ff5d 	bl	8010524 <LED_State>
 801266a:	2800      	cmp	r0, #0
 801266c:	d144      	bne.n	80126f8 <fillBuffer.part.0+0xd8>
		if(LED_State(CAP_7_LED_PORT, CAP_7_LED_PIN)){
 801266e:	2180      	movs	r1, #128	; 0x80
 8012670:	2002      	movs	r0, #2
 8012672:	f7fd ff57 	bl	8010524 <LED_State>
 8012676:	2800      	cmp	r0, #0
 8012678:	d138      	bne.n	80126ec <fillBuffer.part.0+0xcc>
		if(LED_State(CAP_8_LED_PORT, CAP_8_LED_PIN)){
 801267a:	2140      	movs	r1, #64	; 0x40
 801267c:	2002      	movs	r0, #2
 801267e:	f7fd ff51 	bl	8010524 <LED_State>
 8012682:	bb68      	cbnz	r0, 80126e0 <fillBuffer.part.0+0xc0>
		if(LED_State(CAP_9_LED_PORT, CAP_9_LED_PIN)){
 8012684:	2120      	movs	r1, #32
 8012686:	2002      	movs	r0, #2
 8012688:	f7fd ff4c 	bl	8010524 <LED_State>
 801268c:	bb10      	cbnz	r0, 80126d4 <fillBuffer.part.0+0xb4>
		if(LED_State(CAP_10_LED_PORT, CAP_10_LED_PIN)){
 801268e:	2110      	movs	r1, #16
 8012690:	2002      	movs	r0, #2
 8012692:	f7fd ff47 	bl	8010524 <LED_State>
 8012696:	b9b8      	cbnz	r0, 80126c8 <fillBuffer.part.0+0xa8>
		if(LED_State(CAP_11_LED_PORT, CAP_11_LED_PIN)){
 8012698:	2108      	movs	r1, #8
 801269a:	2002      	movs	r0, #2
 801269c:	f7fd ff42 	bl	8010524 <LED_State>
 80126a0:	b960      	cbnz	r0, 80126bc <fillBuffer.part.0+0x9c>
		if(LED_State(CAP_12_LED_PORT, CAP_12_LED_PIN)){
 80126a2:	2104      	movs	r1, #4
 80126a4:	2002      	movs	r0, #2
 80126a6:	f7fd ff3d 	bl	8010524 <LED_State>
 80126aa:	b900      	cbnz	r0, 80126ae <fillBuffer.part.0+0x8e>
 80126ac:	bd10      	pop	{r4, pc}
				addTableToBuffer(buffer, &freq_12_inc, &freq_12_ind);
 80126ae:	4620      	mov	r0, r4
 80126b0:	4a23      	ldr	r2, [pc, #140]	; (8012740 <fillBuffer.part.0+0x120>)
 80126b2:	4924      	ldr	r1, [pc, #144]	; (8012744 <fillBuffer.part.0+0x124>)
}
 80126b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				addTableToBuffer(buffer, &freq_12_inc, &freq_12_ind);
 80126b8:	f7ff bcf2 	b.w	80120a0 <addTableToBuffer>
				addTableToBuffer(buffer, &freq_11_inc, &freq_11_ind);
 80126bc:	4a22      	ldr	r2, [pc, #136]	; (8012748 <fillBuffer.part.0+0x128>)
 80126be:	4923      	ldr	r1, [pc, #140]	; (801274c <fillBuffer.part.0+0x12c>)
 80126c0:	4620      	mov	r0, r4
 80126c2:	f7ff fced 	bl	80120a0 <addTableToBuffer>
 80126c6:	e7ec      	b.n	80126a2 <fillBuffer.part.0+0x82>
				addTableToBuffer(buffer, &freq_10_inc, &freq_10_ind);
 80126c8:	4a21      	ldr	r2, [pc, #132]	; (8012750 <fillBuffer.part.0+0x130>)
 80126ca:	4922      	ldr	r1, [pc, #136]	; (8012754 <fillBuffer.part.0+0x134>)
 80126cc:	4620      	mov	r0, r4
 80126ce:	f7ff fce7 	bl	80120a0 <addTableToBuffer>
 80126d2:	e7e1      	b.n	8012698 <fillBuffer.part.0+0x78>
				addTableToBuffer(buffer, &freq_9_inc, &freq_9_ind);
 80126d4:	4a20      	ldr	r2, [pc, #128]	; (8012758 <fillBuffer.part.0+0x138>)
 80126d6:	4921      	ldr	r1, [pc, #132]	; (801275c <fillBuffer.part.0+0x13c>)
 80126d8:	4620      	mov	r0, r4
 80126da:	f7ff fce1 	bl	80120a0 <addTableToBuffer>
 80126de:	e7d6      	b.n	801268e <fillBuffer.part.0+0x6e>
				addTableToBuffer(buffer, &freq_8_inc, &freq_8_ind);
 80126e0:	4a1f      	ldr	r2, [pc, #124]	; (8012760 <fillBuffer.part.0+0x140>)
 80126e2:	4920      	ldr	r1, [pc, #128]	; (8012764 <fillBuffer.part.0+0x144>)
 80126e4:	4620      	mov	r0, r4
 80126e6:	f7ff fcdb 	bl	80120a0 <addTableToBuffer>
 80126ea:	e7cb      	b.n	8012684 <fillBuffer.part.0+0x64>
				addTableToBuffer(buffer, &freq_7_inc, &freq_7_ind);
 80126ec:	4a1e      	ldr	r2, [pc, #120]	; (8012768 <fillBuffer.part.0+0x148>)
 80126ee:	491f      	ldr	r1, [pc, #124]	; (801276c <fillBuffer.part.0+0x14c>)
 80126f0:	4620      	mov	r0, r4
 80126f2:	f7ff fcd5 	bl	80120a0 <addTableToBuffer>
 80126f6:	e7c0      	b.n	801267a <fillBuffer.part.0+0x5a>
				addTableToBuffer(buffer, &freq_6_inc, &freq_6_ind);
 80126f8:	4a1d      	ldr	r2, [pc, #116]	; (8012770 <fillBuffer.part.0+0x150>)
 80126fa:	491e      	ldr	r1, [pc, #120]	; (8012774 <fillBuffer.part.0+0x154>)
 80126fc:	4620      	mov	r0, r4
 80126fe:	f7ff fccf 	bl	80120a0 <addTableToBuffer>
 8012702:	e7b4      	b.n	801266e <fillBuffer.part.0+0x4e>
				addTableToBuffer(buffer, &freq_5_inc, &freq_5_ind);
 8012704:	4a1c      	ldr	r2, [pc, #112]	; (8012778 <fillBuffer.part.0+0x158>)
 8012706:	491d      	ldr	r1, [pc, #116]	; (801277c <fillBuffer.part.0+0x15c>)
 8012708:	4620      	mov	r0, r4
 801270a:	f7ff fcc9 	bl	80120a0 <addTableToBuffer>
 801270e:	e7a8      	b.n	8012662 <fillBuffer.part.0+0x42>
				addTableToBuffer(buffer, &freq_4_inc, &freq_4_ind);
 8012710:	4a1b      	ldr	r2, [pc, #108]	; (8012780 <fillBuffer.part.0+0x160>)
 8012712:	491c      	ldr	r1, [pc, #112]	; (8012784 <fillBuffer.part.0+0x164>)
 8012714:	4620      	mov	r0, r4
 8012716:	f7ff fcc3 	bl	80120a0 <addTableToBuffer>
 801271a:	e79c      	b.n	8012656 <fillBuffer.part.0+0x36>
				addTableToBuffer(buffer, &freq_3_inc, &freq_3_ind);
 801271c:	4a1a      	ldr	r2, [pc, #104]	; (8012788 <fillBuffer.part.0+0x168>)
 801271e:	491b      	ldr	r1, [pc, #108]	; (801278c <fillBuffer.part.0+0x16c>)
 8012720:	4620      	mov	r0, r4
 8012722:	f7ff fcbd 	bl	80120a0 <addTableToBuffer>
 8012726:	e790      	b.n	801264a <fillBuffer.part.0+0x2a>
				addTableToBuffer(buffer, &freq_2_inc, &freq_2_ind);
 8012728:	4a19      	ldr	r2, [pc, #100]	; (8012790 <fillBuffer.part.0+0x170>)
 801272a:	491a      	ldr	r1, [pc, #104]	; (8012794 <fillBuffer.part.0+0x174>)
 801272c:	4620      	mov	r0, r4
 801272e:	f7ff fcb7 	bl	80120a0 <addTableToBuffer>
 8012732:	e784      	b.n	801263e <fillBuffer.part.0+0x1e>
			addTableToBuffer(buffer, &freq_1_inc, &freq_1_ind);
 8012734:	4a18      	ldr	r2, [pc, #96]	; (8012798 <fillBuffer.part.0+0x178>)
 8012736:	4919      	ldr	r1, [pc, #100]	; (801279c <fillBuffer.part.0+0x17c>)
 8012738:	4620      	mov	r0, r4
 801273a:	f7ff fcb1 	bl	80120a0 <addTableToBuffer>
 801273e:	e778      	b.n	8012632 <fillBuffer.part.0+0x12>
 8012740:	200052dc 	.word	0x200052dc
 8012744:	20007eec 	.word	0x20007eec
 8012748:	200052d8 	.word	0x200052d8
 801274c:	200076d8 	.word	0x200076d8
 8012750:	200052d4 	.word	0x200052d4
 8012754:	200082f0 	.word	0x200082f0
 8012758:	20005300 	.word	0x20005300
 801275c:	200072c4 	.word	0x200072c4
 8012760:	200052fc 	.word	0x200052fc
 8012764:	200086fc 	.word	0x200086fc
 8012768:	200052f8 	.word	0x200052f8
 801276c:	20006ab4 	.word	0x20006ab4
 8012770:	200052f4 	.word	0x200052f4
 8012774:	200072c0 	.word	0x200072c0
 8012778:	200052f0 	.word	0x200052f0
 801277c:	200076c8 	.word	0x200076c8
 8012780:	200052ec 	.word	0x200052ec
 8012784:	200076cc 	.word	0x200076cc
 8012788:	200052e8 	.word	0x200052e8
 801278c:	20006abc 	.word	0x20006abc
 8012790:	200052e4 	.word	0x200052e4
 8012794:	20007ae4 	.word	0x20007ae4
 8012798:	200052e0 	.word	0x200052e0
 801279c:	20005eac 	.word	0x20005eac

080127a0 <switchOctave>:
}

void switchOctave(uint8_t des_octave){
	octave = des_octave;
 80127a0:	4b6b      	ldr	r3, [pc, #428]	; (8012950 <switchOctave+0x1b0>)
	if(des_octave == 4){
 80127a2:	2804      	cmp	r0, #4
void switchOctave(uint8_t des_octave){
 80127a4:	b510      	push	{r4, lr}
	octave = des_octave;
 80127a6:	7018      	strb	r0, [r3, #0]
	if(des_octave == 4){
 80127a8:	f000 80ee 	beq.w	8012988 <switchOctave+0x1e8>
		freq_9_inc = (NOTE_G4S / DAC_FREQ) * max_table_index;
		freq_10_inc = (NOTE_A4 / DAC_FREQ) * max_table_index;
		freq_11_inc = (NOTE_A4S / DAC_FREQ) * max_table_index;
		freq_12_inc = (NOTE_B4 / DAC_FREQ) * max_table_index;
	}
	else if(des_octave == 5){
 80127ac:	2805      	cmp	r0, #5
 80127ae:	f000 81d5 	beq.w	8012b5c <switchOctave+0x3bc>
		freq_9_inc = (NOTE_G5S / DAC_FREQ) * max_table_index;
		freq_10_inc = (NOTE_A5 / DAC_FREQ) * max_table_index;
		freq_11_inc = (NOTE_A5S / DAC_FREQ) * max_table_index;
		freq_12_inc = (NOTE_B5 / DAC_FREQ) * max_table_index;
	}
	else if(des_octave == 3){
 80127b2:	2803      	cmp	r0, #3
 80127b4:	d000      	beq.n	80127b8 <switchOctave+0x18>
 80127b6:	bd10      	pop	{r4, pc}
		freq_1_inc = (NOTE_C3 / DAC_FREQ) * max_table_index;
 80127b8:	4c66      	ldr	r4, [pc, #408]	; (8012954 <switchOctave+0x1b4>)
 80127ba:	8820      	ldrh	r0, [r4, #0]
 80127bc:	b200      	sxth	r0, r0
 80127be:	f7ed fe71 	bl	80004a4 <__aeabi_i2d>
 80127c2:	a34d      	add	r3, pc, #308	; (adr r3, 80128f8 <switchOctave+0x158>)
 80127c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127c8:	f7ed fed2 	bl	8000570 <__aeabi_dmul>
 80127cc:	f7ee f9c8 	bl	8000b60 <__aeabi_d2f>
 80127d0:	4b61      	ldr	r3, [pc, #388]	; (8012958 <switchOctave+0x1b8>)
 80127d2:	6018      	str	r0, [r3, #0]
		freq_2_inc = (NOTE_C3S / DAC_FREQ) * max_table_index;
 80127d4:	8820      	ldrh	r0, [r4, #0]
 80127d6:	b200      	sxth	r0, r0
 80127d8:	f7ed fe64 	bl	80004a4 <__aeabi_i2d>
 80127dc:	a348      	add	r3, pc, #288	; (adr r3, 8012900 <switchOctave+0x160>)
 80127de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127e2:	f7ed fec5 	bl	8000570 <__aeabi_dmul>
 80127e6:	f7ee f9bb 	bl	8000b60 <__aeabi_d2f>
 80127ea:	4b5c      	ldr	r3, [pc, #368]	; (801295c <switchOctave+0x1bc>)
 80127ec:	6018      	str	r0, [r3, #0]
		freq_3_inc = (NOTE_D3 / DAC_FREQ) * max_table_index;
 80127ee:	8820      	ldrh	r0, [r4, #0]
 80127f0:	b200      	sxth	r0, r0
 80127f2:	f7ed fe57 	bl	80004a4 <__aeabi_i2d>
 80127f6:	a344      	add	r3, pc, #272	; (adr r3, 8012908 <switchOctave+0x168>)
 80127f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127fc:	f7ed feb8 	bl	8000570 <__aeabi_dmul>
 8012800:	f7ee f9ae 	bl	8000b60 <__aeabi_d2f>
 8012804:	4b56      	ldr	r3, [pc, #344]	; (8012960 <switchOctave+0x1c0>)
 8012806:	6018      	str	r0, [r3, #0]
		freq_4_inc = (NOTE_D3S / DAC_FREQ) * max_table_index;
 8012808:	8820      	ldrh	r0, [r4, #0]
 801280a:	b200      	sxth	r0, r0
 801280c:	f7ed fe4a 	bl	80004a4 <__aeabi_i2d>
 8012810:	a33f      	add	r3, pc, #252	; (adr r3, 8012910 <switchOctave+0x170>)
 8012812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012816:	f7ed feab 	bl	8000570 <__aeabi_dmul>
 801281a:	f7ee f9a1 	bl	8000b60 <__aeabi_d2f>
 801281e:	4b51      	ldr	r3, [pc, #324]	; (8012964 <switchOctave+0x1c4>)
 8012820:	6018      	str	r0, [r3, #0]
		freq_5_inc = (NOTE_E3 / DAC_FREQ) * max_table_index;
 8012822:	8820      	ldrh	r0, [r4, #0]
 8012824:	b200      	sxth	r0, r0
 8012826:	f7ed fe3d 	bl	80004a4 <__aeabi_i2d>
 801282a:	a33b      	add	r3, pc, #236	; (adr r3, 8012918 <switchOctave+0x178>)
 801282c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012830:	f7ed fe9e 	bl	8000570 <__aeabi_dmul>
 8012834:	f7ee f994 	bl	8000b60 <__aeabi_d2f>
 8012838:	4b4b      	ldr	r3, [pc, #300]	; (8012968 <switchOctave+0x1c8>)
 801283a:	6018      	str	r0, [r3, #0]
		freq_6_inc = (NOTE_F3 / DAC_FREQ) * max_table_index;
 801283c:	8820      	ldrh	r0, [r4, #0]
 801283e:	b200      	sxth	r0, r0
 8012840:	f7ed fe30 	bl	80004a4 <__aeabi_i2d>
 8012844:	a336      	add	r3, pc, #216	; (adr r3, 8012920 <switchOctave+0x180>)
 8012846:	e9d3 2300 	ldrd	r2, r3, [r3]
 801284a:	f7ed fe91 	bl	8000570 <__aeabi_dmul>
 801284e:	f7ee f987 	bl	8000b60 <__aeabi_d2f>
 8012852:	4b46      	ldr	r3, [pc, #280]	; (801296c <switchOctave+0x1cc>)
 8012854:	6018      	str	r0, [r3, #0]
		freq_7_inc = (NOTE_F3S / DAC_FREQ) * max_table_index;
 8012856:	8820      	ldrh	r0, [r4, #0]
 8012858:	b200      	sxth	r0, r0
 801285a:	f7ed fe23 	bl	80004a4 <__aeabi_i2d>
 801285e:	a332      	add	r3, pc, #200	; (adr r3, 8012928 <switchOctave+0x188>)
 8012860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012864:	f7ed fe84 	bl	8000570 <__aeabi_dmul>
 8012868:	f7ee f97a 	bl	8000b60 <__aeabi_d2f>
 801286c:	4b40      	ldr	r3, [pc, #256]	; (8012970 <switchOctave+0x1d0>)
 801286e:	6018      	str	r0, [r3, #0]
		freq_8_inc = (NOTE_G3 / DAC_FREQ) * max_table_index;
 8012870:	8820      	ldrh	r0, [r4, #0]
 8012872:	b200      	sxth	r0, r0
 8012874:	f7ed fe16 	bl	80004a4 <__aeabi_i2d>
 8012878:	a32d      	add	r3, pc, #180	; (adr r3, 8012930 <switchOctave+0x190>)
 801287a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801287e:	f7ed fe77 	bl	8000570 <__aeabi_dmul>
 8012882:	f7ee f96d 	bl	8000b60 <__aeabi_d2f>
 8012886:	4b3b      	ldr	r3, [pc, #236]	; (8012974 <switchOctave+0x1d4>)
 8012888:	6018      	str	r0, [r3, #0]
		freq_9_inc = (NOTE_G3S / DAC_FREQ) * max_table_index;
 801288a:	8820      	ldrh	r0, [r4, #0]
 801288c:	b200      	sxth	r0, r0
 801288e:	f7ed fe09 	bl	80004a4 <__aeabi_i2d>
 8012892:	a329      	add	r3, pc, #164	; (adr r3, 8012938 <switchOctave+0x198>)
 8012894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012898:	f7ed fe6a 	bl	8000570 <__aeabi_dmul>
 801289c:	f7ee f960 	bl	8000b60 <__aeabi_d2f>
 80128a0:	4b35      	ldr	r3, [pc, #212]	; (8012978 <switchOctave+0x1d8>)
 80128a2:	6018      	str	r0, [r3, #0]
		freq_10_inc = (NOTE_A3 / DAC_FREQ) * max_table_index;
 80128a4:	8820      	ldrh	r0, [r4, #0]
 80128a6:	b200      	sxth	r0, r0
 80128a8:	f7ed fdfc 	bl	80004a4 <__aeabi_i2d>
 80128ac:	a324      	add	r3, pc, #144	; (adr r3, 8012940 <switchOctave+0x1a0>)
 80128ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128b2:	f7ed fe5d 	bl	8000570 <__aeabi_dmul>
 80128b6:	f7ee f953 	bl	8000b60 <__aeabi_d2f>
 80128ba:	4b30      	ldr	r3, [pc, #192]	; (801297c <switchOctave+0x1dc>)
 80128bc:	6018      	str	r0, [r3, #0]
		freq_11_inc = (NOTE_A3S / DAC_FREQ) * max_table_index;
 80128be:	8820      	ldrh	r0, [r4, #0]
 80128c0:	b200      	sxth	r0, r0
 80128c2:	f7ed fdef 	bl	80004a4 <__aeabi_i2d>
 80128c6:	a31c      	add	r3, pc, #112	; (adr r3, 8012938 <switchOctave+0x198>)
 80128c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128cc:	f7ed fe50 	bl	8000570 <__aeabi_dmul>
 80128d0:	f7ee f946 	bl	8000b60 <__aeabi_d2f>
 80128d4:	4b2a      	ldr	r3, [pc, #168]	; (8012980 <switchOctave+0x1e0>)
 80128d6:	6018      	str	r0, [r3, #0]
		freq_12_inc = (NOTE_B3 / DAC_FREQ) * max_table_index;
 80128d8:	8820      	ldrh	r0, [r4, #0]
 80128da:	b200      	sxth	r0, r0
 80128dc:	f7ed fde2 	bl	80004a4 <__aeabi_i2d>
 80128e0:	a319      	add	r3, pc, #100	; (adr r3, 8012948 <switchOctave+0x1a8>)
 80128e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128e6:	f7ed fe43 	bl	8000570 <__aeabi_dmul>
 80128ea:	f7ee f939 	bl	8000b60 <__aeabi_d2f>
 80128ee:	4b25      	ldr	r3, [pc, #148]	; (8012984 <switchOctave+0x1e4>)
 80128f0:	6018      	str	r0, [r3, #0]
 80128f2:	bd10      	pop	{r4, pc}
 80128f4:	f3af 8000 	nop.w
 80128f8:	5d8368d5 	.word	0x5d8368d5
 80128fc:	3f6aca5e 	.word	0x3f6aca5e
 8012900:	ea041539 	.word	0xea041539
 8012904:	3f6c6228 	.word	0x3f6c6228
 8012908:	be67af3b 	.word	0xbe67af3b
 801290c:	3f6e1239 	.word	0x3f6e1239
 8012910:	3df95fd2 	.word	0x3df95fd2
 8012914:	3f6fdbfb 	.word	0x3f6fdbfb
 8012918:	07f81c06 	.word	0x07f81c06
 801291c:	3f70e080 	.word	0x3f70e080
 8012920:	b7c4fdcc 	.word	0xb7c4fdcc
 8012924:	3f71e166 	.word	0x3f71e166
 8012928:	d9f1787e 	.word	0xd9f1787e
 801292c:	3f72f195 	.word	0x3f72f195
 8012930:	50085610 	.word	0x50085610
 8012934:	3f7411f8 	.word	0x3f7411f8
 8012938:	fb946074 	.word	0xfb946074
 801293c:	3f754378 	.word	0x3f754378
 8012940:	020c49ba 	.word	0x020c49ba
 8012944:	3f76872b 	.word	0x3f76872b
 8012948:	b59a8120 	.word	0xb59a8120
 801294c:	3f79496f 	.word	0x3f79496f
 8012950:	20000050 	.word	0x20000050
 8012954:	2000004e 	.word	0x2000004e
 8012958:	20005eac 	.word	0x20005eac
 801295c:	20007ae4 	.word	0x20007ae4
 8012960:	20006abc 	.word	0x20006abc
 8012964:	200076cc 	.word	0x200076cc
 8012968:	200076c8 	.word	0x200076c8
 801296c:	200072c0 	.word	0x200072c0
 8012970:	20006ab4 	.word	0x20006ab4
 8012974:	200086fc 	.word	0x200086fc
 8012978:	200072c4 	.word	0x200072c4
 801297c:	200082f0 	.word	0x200082f0
 8012980:	200076d8 	.word	0x200076d8
 8012984:	20007eec 	.word	0x20007eec
		freq_1_inc = (NOTE_C4 / DAC_FREQ) * max_table_index;
 8012988:	4c67      	ldr	r4, [pc, #412]	; (8012b28 <switchOctave+0x388>)
 801298a:	8820      	ldrh	r0, [r4, #0]
 801298c:	b200      	sxth	r0, r0
 801298e:	f7ed fd89 	bl	80004a4 <__aeabi_i2d>
 8012992:	a34d      	add	r3, pc, #308	; (adr r3, 8012ac8 <switchOctave+0x328>)
 8012994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012998:	f7ed fdea 	bl	8000570 <__aeabi_dmul>
 801299c:	f7ee f8e0 	bl	8000b60 <__aeabi_d2f>
 80129a0:	4b62      	ldr	r3, [pc, #392]	; (8012b2c <switchOctave+0x38c>)
 80129a2:	6018      	str	r0, [r3, #0]
		freq_2_inc = (NOTE_C4S / DAC_FREQ) * max_table_index;
 80129a4:	8820      	ldrh	r0, [r4, #0]
 80129a6:	b200      	sxth	r0, r0
 80129a8:	f7ed fd7c 	bl	80004a4 <__aeabi_i2d>
 80129ac:	a348      	add	r3, pc, #288	; (adr r3, 8012ad0 <switchOctave+0x330>)
 80129ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129b2:	f7ed fddd 	bl	8000570 <__aeabi_dmul>
 80129b6:	f7ee f8d3 	bl	8000b60 <__aeabi_d2f>
 80129ba:	4b5d      	ldr	r3, [pc, #372]	; (8012b30 <switchOctave+0x390>)
 80129bc:	6018      	str	r0, [r3, #0]
		freq_3_inc = (NOTE_D4 / DAC_FREQ) * max_table_index;
 80129be:	8820      	ldrh	r0, [r4, #0]
 80129c0:	b200      	sxth	r0, r0
 80129c2:	f7ed fd6f 	bl	80004a4 <__aeabi_i2d>
 80129c6:	a344      	add	r3, pc, #272	; (adr r3, 8012ad8 <switchOctave+0x338>)
 80129c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129cc:	f7ed fdd0 	bl	8000570 <__aeabi_dmul>
 80129d0:	f7ee f8c6 	bl	8000b60 <__aeabi_d2f>
 80129d4:	4b57      	ldr	r3, [pc, #348]	; (8012b34 <switchOctave+0x394>)
 80129d6:	6018      	str	r0, [r3, #0]
		freq_4_inc = (NOTE_D4S / DAC_FREQ) * max_table_index;
 80129d8:	8820      	ldrh	r0, [r4, #0]
 80129da:	b200      	sxth	r0, r0
 80129dc:	f7ed fd62 	bl	80004a4 <__aeabi_i2d>
 80129e0:	a33f      	add	r3, pc, #252	; (adr r3, 8012ae0 <switchOctave+0x340>)
 80129e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129e6:	f7ed fdc3 	bl	8000570 <__aeabi_dmul>
 80129ea:	f7ee f8b9 	bl	8000b60 <__aeabi_d2f>
 80129ee:	4b52      	ldr	r3, [pc, #328]	; (8012b38 <switchOctave+0x398>)
 80129f0:	6018      	str	r0, [r3, #0]
		freq_5_inc = (NOTE_E4 / DAC_FREQ) * max_table_index;
 80129f2:	8820      	ldrh	r0, [r4, #0]
 80129f4:	b200      	sxth	r0, r0
 80129f6:	f7ed fd55 	bl	80004a4 <__aeabi_i2d>
 80129fa:	a33b      	add	r3, pc, #236	; (adr r3, 8012ae8 <switchOctave+0x348>)
 80129fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a00:	f7ed fdb6 	bl	8000570 <__aeabi_dmul>
 8012a04:	f7ee f8ac 	bl	8000b60 <__aeabi_d2f>
 8012a08:	4b4c      	ldr	r3, [pc, #304]	; (8012b3c <switchOctave+0x39c>)
 8012a0a:	6018      	str	r0, [r3, #0]
		freq_6_inc = (NOTE_F4 / DAC_FREQ) * max_table_index;
 8012a0c:	8820      	ldrh	r0, [r4, #0]
 8012a0e:	b200      	sxth	r0, r0
 8012a10:	f7ed fd48 	bl	80004a4 <__aeabi_i2d>
 8012a14:	a336      	add	r3, pc, #216	; (adr r3, 8012af0 <switchOctave+0x350>)
 8012a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a1a:	f7ed fda9 	bl	8000570 <__aeabi_dmul>
 8012a1e:	f7ee f89f 	bl	8000b60 <__aeabi_d2f>
 8012a22:	4b47      	ldr	r3, [pc, #284]	; (8012b40 <switchOctave+0x3a0>)
 8012a24:	6018      	str	r0, [r3, #0]
		freq_7_inc = (NOTE_F4S / DAC_FREQ) * max_table_index;
 8012a26:	8820      	ldrh	r0, [r4, #0]
 8012a28:	b200      	sxth	r0, r0
 8012a2a:	f7ed fd3b 	bl	80004a4 <__aeabi_i2d>
 8012a2e:	a332      	add	r3, pc, #200	; (adr r3, 8012af8 <switchOctave+0x358>)
 8012a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a34:	f7ed fd9c 	bl	8000570 <__aeabi_dmul>
 8012a38:	f7ee f892 	bl	8000b60 <__aeabi_d2f>
 8012a3c:	4b41      	ldr	r3, [pc, #260]	; (8012b44 <switchOctave+0x3a4>)
 8012a3e:	6018      	str	r0, [r3, #0]
		freq_8_inc = (NOTE_G4 / DAC_FREQ) * max_table_index;
 8012a40:	8820      	ldrh	r0, [r4, #0]
 8012a42:	b200      	sxth	r0, r0
 8012a44:	f7ed fd2e 	bl	80004a4 <__aeabi_i2d>
 8012a48:	a32d      	add	r3, pc, #180	; (adr r3, 8012b00 <switchOctave+0x360>)
 8012a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a4e:	f7ed fd8f 	bl	8000570 <__aeabi_dmul>
 8012a52:	f7ee f885 	bl	8000b60 <__aeabi_d2f>
 8012a56:	4b3c      	ldr	r3, [pc, #240]	; (8012b48 <switchOctave+0x3a8>)
 8012a58:	6018      	str	r0, [r3, #0]
		freq_9_inc = (NOTE_G4S / DAC_FREQ) * max_table_index;
 8012a5a:	8820      	ldrh	r0, [r4, #0]
 8012a5c:	b200      	sxth	r0, r0
 8012a5e:	f7ed fd21 	bl	80004a4 <__aeabi_i2d>
 8012a62:	a329      	add	r3, pc, #164	; (adr r3, 8012b08 <switchOctave+0x368>)
 8012a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a68:	f7ed fd82 	bl	8000570 <__aeabi_dmul>
 8012a6c:	f7ee f878 	bl	8000b60 <__aeabi_d2f>
 8012a70:	4b36      	ldr	r3, [pc, #216]	; (8012b4c <switchOctave+0x3ac>)
 8012a72:	6018      	str	r0, [r3, #0]
		freq_10_inc = (NOTE_A4 / DAC_FREQ) * max_table_index;
 8012a74:	8820      	ldrh	r0, [r4, #0]
 8012a76:	b200      	sxth	r0, r0
 8012a78:	f7ed fd14 	bl	80004a4 <__aeabi_i2d>
 8012a7c:	a324      	add	r3, pc, #144	; (adr r3, 8012b10 <switchOctave+0x370>)
 8012a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a82:	f7ed fd75 	bl	8000570 <__aeabi_dmul>
 8012a86:	f7ee f86b 	bl	8000b60 <__aeabi_d2f>
 8012a8a:	4b31      	ldr	r3, [pc, #196]	; (8012b50 <switchOctave+0x3b0>)
 8012a8c:	6018      	str	r0, [r3, #0]
		freq_11_inc = (NOTE_A4S / DAC_FREQ) * max_table_index;
 8012a8e:	8820      	ldrh	r0, [r4, #0]
 8012a90:	b200      	sxth	r0, r0
 8012a92:	f7ed fd07 	bl	80004a4 <__aeabi_i2d>
 8012a96:	a320      	add	r3, pc, #128	; (adr r3, 8012b18 <switchOctave+0x378>)
 8012a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a9c:	f7ed fd68 	bl	8000570 <__aeabi_dmul>
 8012aa0:	f7ee f85e 	bl	8000b60 <__aeabi_d2f>
 8012aa4:	4b2b      	ldr	r3, [pc, #172]	; (8012b54 <switchOctave+0x3b4>)
 8012aa6:	6018      	str	r0, [r3, #0]
		freq_12_inc = (NOTE_B4 / DAC_FREQ) * max_table_index;
 8012aa8:	8820      	ldrh	r0, [r4, #0]
 8012aaa:	b200      	sxth	r0, r0
 8012aac:	f7ed fcfa 	bl	80004a4 <__aeabi_i2d>
 8012ab0:	a31b      	add	r3, pc, #108	; (adr r3, 8012b20 <switchOctave+0x380>)
 8012ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ab6:	f7ed fd5b 	bl	8000570 <__aeabi_dmul>
 8012aba:	f7ee f851 	bl	8000b60 <__aeabi_d2f>
 8012abe:	4b26      	ldr	r3, [pc, #152]	; (8012b58 <switchOctave+0x3b8>)
 8012ac0:	6018      	str	r0, [r3, #0]
 8012ac2:	bd10      	pop	{r4, pc}
 8012ac4:	f3af 8000 	nop.w
 8012ac8:	5d8368d5 	.word	0x5d8368d5
 8012acc:	3f7aca5e 	.word	0x3f7aca5e
 8012ad0:	a000bbe7 	.word	0xa000bbe7
 8012ad4:	3f7c622f 	.word	0x3f7c622f
 8012ad8:	746455ec 	.word	0x746455ec
 8012adc:	3f7e1240 	.word	0x3f7e1240
 8012ae0:	f3f60682 	.word	0xf3f60682
 8012ae4:	3f7fdc01 	.word	0x3f7fdc01
 8012ae8:	07f81c06 	.word	0x07f81c06
 8012aec:	3f80e080 	.word	0x3f80e080
 8012af0:	b7c4fdcc 	.word	0xb7c4fdcc
 8012af4:	3f81e166 	.word	0x3f81e166
 8012af8:	d9f1787e 	.word	0xd9f1787e
 8012afc:	3f82f195 	.word	0x3f82f195
 8012b00:	f50a02b8 	.word	0xf50a02b8
 8012b04:	3f8411f4 	.word	0x3f8411f4
 8012b08:	5692b3cc 	.word	0x5692b3cc
 8012b0c:	3f85437c 	.word	0x3f85437c
 8012b10:	020c49ba 	.word	0x020c49ba
 8012b14:	3f86872b 	.word	0x3f86872b
 8012b18:	d2ea1d3f 	.word	0xd2ea1d3f
 8012b1c:	3f87de1a 	.word	0x3f87de1a
 8012b20:	5a9c2dc8 	.word	0x5a9c2dc8
 8012b24:	3f89496c 	.word	0x3f89496c
 8012b28:	2000004e 	.word	0x2000004e
 8012b2c:	20005eac 	.word	0x20005eac
 8012b30:	20007ae4 	.word	0x20007ae4
 8012b34:	20006abc 	.word	0x20006abc
 8012b38:	200076cc 	.word	0x200076cc
 8012b3c:	200076c8 	.word	0x200076c8
 8012b40:	200072c0 	.word	0x200072c0
 8012b44:	20006ab4 	.word	0x20006ab4
 8012b48:	200086fc 	.word	0x200086fc
 8012b4c:	200072c4 	.word	0x200072c4
 8012b50:	200082f0 	.word	0x200082f0
 8012b54:	200076d8 	.word	0x200076d8
 8012b58:	20007eec 	.word	0x20007eec
		freq_1_inc = (NOTE_C5 / DAC_FREQ) * max_table_index;
 8012b5c:	4c66      	ldr	r4, [pc, #408]	; (8012cf8 <switchOctave+0x558>)
 8012b5e:	8820      	ldrh	r0, [r4, #0]
 8012b60:	b200      	sxth	r0, r0
 8012b62:	f7ed fc9f 	bl	80004a4 <__aeabi_i2d>
 8012b66:	a34c      	add	r3, pc, #304	; (adr r3, 8012c98 <switchOctave+0x4f8>)
 8012b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b6c:	f7ed fd00 	bl	8000570 <__aeabi_dmul>
 8012b70:	f7ed fff6 	bl	8000b60 <__aeabi_d2f>
 8012b74:	4b61      	ldr	r3, [pc, #388]	; (8012cfc <switchOctave+0x55c>)
 8012b76:	6018      	str	r0, [r3, #0]
		freq_2_inc = (NOTE_C5S / DAC_FREQ) * max_table_index;
 8012b78:	8820      	ldrh	r0, [r4, #0]
 8012b7a:	b200      	sxth	r0, r0
 8012b7c:	f7ed fc92 	bl	80004a4 <__aeabi_i2d>
 8012b80:	a347      	add	r3, pc, #284	; (adr r3, 8012ca0 <switchOctave+0x500>)
 8012b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b86:	f7ed fcf3 	bl	8000570 <__aeabi_dmul>
 8012b8a:	f7ed ffe9 	bl	8000b60 <__aeabi_d2f>
 8012b8e:	4b5c      	ldr	r3, [pc, #368]	; (8012d00 <switchOctave+0x560>)
 8012b90:	6018      	str	r0, [r3, #0]
		freq_3_inc = (NOTE_D5 / DAC_FREQ) * max_table_index;
 8012b92:	8820      	ldrh	r0, [r4, #0]
 8012b94:	b200      	sxth	r0, r0
 8012b96:	f7ed fc85 	bl	80004a4 <__aeabi_i2d>
 8012b9a:	a343      	add	r3, pc, #268	; (adr r3, 8012ca8 <switchOctave+0x508>)
 8012b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ba0:	f7ed fce6 	bl	8000570 <__aeabi_dmul>
 8012ba4:	f7ed ffdc 	bl	8000b60 <__aeabi_d2f>
 8012ba8:	4b56      	ldr	r3, [pc, #344]	; (8012d04 <switchOctave+0x564>)
 8012baa:	6018      	str	r0, [r3, #0]
		freq_4_inc = (NOTE_D5S / DAC_FREQ) * max_table_index;
 8012bac:	8820      	ldrh	r0, [r4, #0]
 8012bae:	b200      	sxth	r0, r0
 8012bb0:	f7ed fc78 	bl	80004a4 <__aeabi_i2d>
 8012bb4:	a33e      	add	r3, pc, #248	; (adr r3, 8012cb0 <switchOctave+0x510>)
 8012bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bba:	f7ed fcd9 	bl	8000570 <__aeabi_dmul>
 8012bbe:	f7ed ffcf 	bl	8000b60 <__aeabi_d2f>
 8012bc2:	4b51      	ldr	r3, [pc, #324]	; (8012d08 <switchOctave+0x568>)
 8012bc4:	6018      	str	r0, [r3, #0]
		freq_5_inc = (NOTE_E5 / DAC_FREQ) * max_table_index;
 8012bc6:	8820      	ldrh	r0, [r4, #0]
 8012bc8:	b200      	sxth	r0, r0
 8012bca:	f7ed fc6b 	bl	80004a4 <__aeabi_i2d>
 8012bce:	a33a      	add	r3, pc, #232	; (adr r3, 8012cb8 <switchOctave+0x518>)
 8012bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bd4:	f7ed fccc 	bl	8000570 <__aeabi_dmul>
 8012bd8:	f7ed ffc2 	bl	8000b60 <__aeabi_d2f>
 8012bdc:	4b4b      	ldr	r3, [pc, #300]	; (8012d0c <switchOctave+0x56c>)
 8012bde:	6018      	str	r0, [r3, #0]
		freq_6_inc = (NOTE_F5 / DAC_FREQ) * max_table_index;
 8012be0:	8820      	ldrh	r0, [r4, #0]
 8012be2:	b200      	sxth	r0, r0
 8012be4:	f7ed fc5e 	bl	80004a4 <__aeabi_i2d>
 8012be8:	a335      	add	r3, pc, #212	; (adr r3, 8012cc0 <switchOctave+0x520>)
 8012bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bee:	f7ed fcbf 	bl	8000570 <__aeabi_dmul>
 8012bf2:	f7ed ffb5 	bl	8000b60 <__aeabi_d2f>
 8012bf6:	4b46      	ldr	r3, [pc, #280]	; (8012d10 <switchOctave+0x570>)
 8012bf8:	6018      	str	r0, [r3, #0]
		freq_7_inc = (NOTE_F5S / DAC_FREQ) * max_table_index;
 8012bfa:	8820      	ldrh	r0, [r4, #0]
 8012bfc:	b200      	sxth	r0, r0
 8012bfe:	f7ed fc51 	bl	80004a4 <__aeabi_i2d>
 8012c02:	a331      	add	r3, pc, #196	; (adr r3, 8012cc8 <switchOctave+0x528>)
 8012c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c08:	f7ed fcb2 	bl	8000570 <__aeabi_dmul>
 8012c0c:	f7ed ffa8 	bl	8000b60 <__aeabi_d2f>
 8012c10:	4b40      	ldr	r3, [pc, #256]	; (8012d14 <switchOctave+0x574>)
 8012c12:	6018      	str	r0, [r3, #0]
		freq_8_inc = (NOTE_G5 / DAC_FREQ) * max_table_index;
 8012c14:	8820      	ldrh	r0, [r4, #0]
 8012c16:	b200      	sxth	r0, r0
 8012c18:	f7ed fc44 	bl	80004a4 <__aeabi_i2d>
 8012c1c:	a32c      	add	r3, pc, #176	; (adr r3, 8012cd0 <switchOctave+0x530>)
 8012c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c22:	f7ed fca5 	bl	8000570 <__aeabi_dmul>
 8012c26:	f7ed ff9b 	bl	8000b60 <__aeabi_d2f>
 8012c2a:	4b3b      	ldr	r3, [pc, #236]	; (8012d18 <switchOctave+0x578>)
 8012c2c:	6018      	str	r0, [r3, #0]
		freq_9_inc = (NOTE_G5S / DAC_FREQ) * max_table_index;
 8012c2e:	8820      	ldrh	r0, [r4, #0]
 8012c30:	b200      	sxth	r0, r0
 8012c32:	f7ed fc37 	bl	80004a4 <__aeabi_i2d>
 8012c36:	a328      	add	r3, pc, #160	; (adr r3, 8012cd8 <switchOctave+0x538>)
 8012c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c3c:	f7ed fc98 	bl	8000570 <__aeabi_dmul>
 8012c40:	f7ed ff8e 	bl	8000b60 <__aeabi_d2f>
 8012c44:	4b35      	ldr	r3, [pc, #212]	; (8012d1c <switchOctave+0x57c>)
 8012c46:	6018      	str	r0, [r3, #0]
		freq_10_inc = (NOTE_A5 / DAC_FREQ) * max_table_index;
 8012c48:	8820      	ldrh	r0, [r4, #0]
 8012c4a:	b200      	sxth	r0, r0
 8012c4c:	f7ed fc2a 	bl	80004a4 <__aeabi_i2d>
 8012c50:	a323      	add	r3, pc, #140	; (adr r3, 8012ce0 <switchOctave+0x540>)
 8012c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c56:	f7ed fc8b 	bl	8000570 <__aeabi_dmul>
 8012c5a:	f7ed ff81 	bl	8000b60 <__aeabi_d2f>
 8012c5e:	4b30      	ldr	r3, [pc, #192]	; (8012d20 <switchOctave+0x580>)
 8012c60:	6018      	str	r0, [r3, #0]
		freq_11_inc = (NOTE_A5S / DAC_FREQ) * max_table_index;
 8012c62:	8820      	ldrh	r0, [r4, #0]
 8012c64:	b200      	sxth	r0, r0
 8012c66:	f7ed fc1d 	bl	80004a4 <__aeabi_i2d>
 8012c6a:	a31f      	add	r3, pc, #124	; (adr r3, 8012ce8 <switchOctave+0x548>)
 8012c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c70:	f7ed fc7e 	bl	8000570 <__aeabi_dmul>
 8012c74:	f7ed ff74 	bl	8000b60 <__aeabi_d2f>
 8012c78:	4b2a      	ldr	r3, [pc, #168]	; (8012d24 <switchOctave+0x584>)
 8012c7a:	6018      	str	r0, [r3, #0]
		freq_12_inc = (NOTE_B5 / DAC_FREQ) * max_table_index;
 8012c7c:	8820      	ldrh	r0, [r4, #0]
 8012c7e:	b200      	sxth	r0, r0
 8012c80:	f7ed fc10 	bl	80004a4 <__aeabi_i2d>
 8012c84:	a31a      	add	r3, pc, #104	; (adr r3, 8012cf0 <switchOctave+0x550>)
 8012c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c8a:	f7ed fc71 	bl	8000570 <__aeabi_dmul>
 8012c8e:	f7ed ff67 	bl	8000b60 <__aeabi_d2f>
 8012c92:	4b25      	ldr	r3, [pc, #148]	; (8012d28 <switchOctave+0x588>)
 8012c94:	6018      	str	r0, [r3, #0]
 8012c96:	bd10      	pop	{r4, pc}
 8012c98:	0285157e 	.word	0x0285157e
 8012c9c:	3f8aca5b 	.word	0x3f8aca5b
 8012ca0:	45026890 	.word	0x45026890
 8012ca4:	3f8c622c 	.word	0x3f8c622c
 8012ca8:	746455ec 	.word	0x746455ec
 8012cac:	3f8e1240 	.word	0x3f8e1240
 8012cb0:	f3f60682 	.word	0xf3f60682
 8012cb4:	3f8fdc01 	.word	0x3f8fdc01
 8012cb8:	5a78f25a 	.word	0x5a78f25a
 8012cbc:	3f90e07e 	.word	0x3f90e07e
 8012cc0:	b7c4fdcc 	.word	0xb7c4fdcc
 8012cc4:	3f91e166 	.word	0x3f91e166
 8012cc8:	8770a22a 	.word	0x8770a22a
 8012ccc:	3f92f197 	.word	0x3f92f197
 8012cd0:	a2892c64 	.word	0xa2892c64
 8012cd4:	3f9411f6 	.word	0x3f9411f6
 8012cd8:	a9138a21 	.word	0xa9138a21
 8012cdc:	3f95437a 	.word	0x3f95437a
 8012ce0:	020c49ba 	.word	0x020c49ba
 8012ce4:	3f96872b 	.word	0x3f96872b
 8012ce8:	d2ea1d3f 	.word	0xd2ea1d3f
 8012cec:	3f97de1a 	.word	0x3f97de1a
 8012cf0:	081b5775 	.word	0x081b5775
 8012cf4:	3f99496e 	.word	0x3f99496e
 8012cf8:	2000004e 	.word	0x2000004e
 8012cfc:	20005eac 	.word	0x20005eac
 8012d00:	20007ae4 	.word	0x20007ae4
 8012d04:	20006abc 	.word	0x20006abc
 8012d08:	200076cc 	.word	0x200076cc
 8012d0c:	200076c8 	.word	0x200076c8
 8012d10:	200072c0 	.word	0x200072c0
 8012d14:	20006ab4 	.word	0x20006ab4
 8012d18:	200086fc 	.word	0x200086fc
 8012d1c:	200072c4 	.word	0x200072c4
 8012d20:	200082f0 	.word	0x200082f0
 8012d24:	200076d8 	.word	0x200076d8
 8012d28:	20007eec 	.word	0x20007eec

08012d2c <setTable>:
	switch(table){
 8012d2c:	3851      	subs	r0, #81	; 0x51
void setTable(char table){
 8012d2e:	b508      	push	{r3, lr}
	max_table_index = size;
 8012d30:	4a11      	ldr	r2, [pc, #68]	; (8012d78 <setTable+0x4c>)
	switch(table){
 8012d32:	2806      	cmp	r0, #6
 8012d34:	d805      	bhi.n	8012d42 <setTable+0x16>
 8012d36:	e8df f000 	tbb	[pc, r0]
 8012d3a:	1713      	.short	0x1713
 8012d3c:	04040f04 	.word	0x04040f04
 8012d40:	1b          	.byte	0x1b
 8012d41:	00          	.byte	0x00
	switchOctave(octave);
 8012d42:	4b0e      	ldr	r3, [pc, #56]	; (8012d7c <setTable+0x50>)
	waveTable = desired_table;
 8012d44:	490e      	ldr	r1, [pc, #56]	; (8012d80 <setTable+0x54>)
 8012d46:	480f      	ldr	r0, [pc, #60]	; (8012d84 <setTable+0x58>)
 8012d48:	6008      	str	r0, [r1, #0]
 8012d4a:	f44f 7180 	mov.w	r1, #256	; 0x100
	max_table_index = size;
 8012d4e:	8011      	strh	r1, [r2, #0]
	switchOctave(octave);
 8012d50:	7818      	ldrb	r0, [r3, #0]
 8012d52:	f7ff fd25 	bl	80127a0 <switchOctave>
 8012d56:	bd08      	pop	{r3, pc}
 8012d58:	4b08      	ldr	r3, [pc, #32]	; (8012d7c <setTable+0x50>)
	waveTable = desired_table;
 8012d5a:	4909      	ldr	r1, [pc, #36]	; (8012d80 <setTable+0x54>)
 8012d5c:	480a      	ldr	r0, [pc, #40]	; (8012d88 <setTable+0x5c>)
 8012d5e:	e7f3      	b.n	8012d48 <setTable+0x1c>
	switchOctave(octave);
 8012d60:	4b06      	ldr	r3, [pc, #24]	; (8012d7c <setTable+0x50>)
	waveTable = desired_table;
 8012d62:	4907      	ldr	r1, [pc, #28]	; (8012d80 <setTable+0x54>)
 8012d64:	4809      	ldr	r0, [pc, #36]	; (8012d8c <setTable+0x60>)
 8012d66:	e7ef      	b.n	8012d48 <setTable+0x1c>
	switchOctave(octave);
 8012d68:	4b04      	ldr	r3, [pc, #16]	; (8012d7c <setTable+0x50>)
	waveTable = desired_table;
 8012d6a:	4905      	ldr	r1, [pc, #20]	; (8012d80 <setTable+0x54>)
 8012d6c:	4808      	ldr	r0, [pc, #32]	; (8012d90 <setTable+0x64>)
 8012d6e:	e7eb      	b.n	8012d48 <setTable+0x1c>
	switchOctave(octave);
 8012d70:	4b02      	ldr	r3, [pc, #8]	; (8012d7c <setTable+0x50>)
	waveTable = desired_table;
 8012d72:	4903      	ldr	r1, [pc, #12]	; (8012d80 <setTable+0x54>)
 8012d74:	4807      	ldr	r0, [pc, #28]	; (8012d94 <setTable+0x68>)
 8012d76:	e7e7      	b.n	8012d48 <setTable+0x1c>
 8012d78:	2000004e 	.word	0x2000004e
 8012d7c:	20000050 	.word	0x20000050
 8012d80:	200086f4 	.word	0x200086f4
 8012d84:	080170c8 	.word	0x080170c8
 8012d88:	080174c8 	.word	0x080174c8
 8012d8c:	080172c8 	.word	0x080172c8
 8012d90:	08016cc8 	.word	0x08016cc8
 8012d94:	08016ec8 	.word	0x08016ec8

08012d98 <prepBuffer>:
void prepBuffer(DAC_HandleTypeDef* hdac){
 8012d98:	b570      	push	{r4, r5, r6, lr}
	if(temp_2){
 8012d9a:	4b7b      	ldr	r3, [pc, #492]	; (8012f88 <prepBuffer+0x1f0>)
 8012d9c:	781a      	ldrb	r2, [r3, #0]
void prepBuffer(DAC_HandleTypeDef* hdac){
 8012d9e:	b082      	sub	sp, #8
 8012da0:	4606      	mov	r6, r0
	if(temp_2){
 8012da2:	2a00      	cmp	r2, #0
 8012da4:	d16d      	bne.n	8012e82 <prepBuffer+0xea>
	if(buff_toggle == 0){
 8012da6:	4c79      	ldr	r4, [pc, #484]	; (8012f8c <prepBuffer+0x1f4>)
 8012da8:	7823      	ldrb	r3, [r4, #0]
 8012daa:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8012dae:	b36b      	cbz	r3, 8012e0c <prepBuffer+0x74>
	else if(buff_toggle == 1){
 8012db0:	7823      	ldrb	r3, [r4, #0]
 8012db2:	2b01      	cmp	r3, #1
	HAL_GPIO_TogglePin(LED_LAT_GPIO_Port, LED_LAT_Pin);
 8012db4:	f04f 0104 	mov.w	r1, #4
 8012db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	else if(buff_toggle == 1){
 8012dbc:	d07c      	beq.n	8012eb8 <prepBuffer+0x120>
	HAL_DAC_Start_DMA(hdac, DAC_CHANNEL_1, (uint32_t*)buffer, 512, DAC_ALIGN_12B_R);
 8012dbe:	2500      	movs	r5, #0
	HAL_GPIO_TogglePin(LED_LAT_GPIO_Port, LED_LAT_Pin);
 8012dc0:	f7ef f9e6 	bl	8002190 <HAL_GPIO_TogglePin>
	HAL_DAC_Start_DMA(hdac, DAC_CHANNEL_1, (uint32_t*)buffer, 512, DAC_ALIGN_12B_R);
 8012dc4:	4629      	mov	r1, r5
 8012dc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012dca:	4a71      	ldr	r2, [pc, #452]	; (8012f90 <prepBuffer+0x1f8>)
 8012dcc:	9500      	str	r5, [sp, #0]
 8012dce:	4630      	mov	r0, r6
 8012dd0:	f7ee fd94 	bl	80018fc <HAL_DAC_Start_DMA>
 8012dd4:	4b6f      	ldr	r3, [pc, #444]	; (8012f94 <prepBuffer+0x1fc>)
		buff_toggle = 0;
 8012dd6:	7025      	strb	r5, [r4, #0]
 8012dd8:	f503 6180 	add.w	r1, r3, #1024	; 0x400
		buffer[i] = BUFFER_OFFSET;
 8012ddc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012de0:	f823 2b02 	strh.w	r2, [r3], #2
	for(int i = 0; i < BUFFER_SIZE; i++){
 8012de4:	4299      	cmp	r1, r3
 8012de6:	d1fb      	bne.n	8012de0 <prepBuffer+0x48>
	if(lidarModeActive){
 8012de8:	4b6b      	ldr	r3, [pc, #428]	; (8012f98 <prepBuffer+0x200>)
 8012dea:	781b      	ldrb	r3, [r3, #0]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	f040 809b 	bne.w	8012f28 <prepBuffer+0x190>
	else if(capModeActive){
 8012df2:	4b6a      	ldr	r3, [pc, #424]	; (8012f9c <prepBuffer+0x204>)
 8012df4:	781b      	ldrb	r3, [r3, #0]
 8012df6:	b113      	cbz	r3, 8012dfe <prepBuffer+0x66>
 8012df8:	4866      	ldr	r0, [pc, #408]	; (8012f94 <prepBuffer+0x1fc>)
 8012dfa:	f7ff fc11 	bl	8012620 <fillBuffer.part.0>
		if(IIR_filter_active == 1){
 8012dfe:	4b68      	ldr	r3, [pc, #416]	; (8012fa0 <prepBuffer+0x208>)
 8012e00:	781b      	ldrb	r3, [r3, #0]
 8012e02:	2b01      	cmp	r3, #1
 8012e04:	f000 809a 	beq.w	8012f3c <prepBuffer+0x1a4>
}
 8012e08:	b002      	add	sp, #8
 8012e0a:	bd70      	pop	{r4, r5, r6, pc}
	HAL_GPIO_TogglePin(LED_LAT_GPIO_Port, LED_LAT_Pin);
 8012e0c:	2104      	movs	r1, #4
 8012e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8012e12:	f7ef f9bd 	bl	8002190 <HAL_GPIO_TogglePin>
	HAL_DAC_Start_DMA(hdac, DAC_CHANNEL_1, (uint32_t*)buffer, 512, DAC_ALIGN_12B_R);
 8012e16:	4629      	mov	r1, r5
 8012e18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012e1c:	4a5d      	ldr	r2, [pc, #372]	; (8012f94 <prepBuffer+0x1fc>)
 8012e1e:	9500      	str	r5, [sp, #0]
 8012e20:	4630      	mov	r0, r6
 8012e22:	f7ee fd6b 	bl	80018fc <HAL_DAC_Start_DMA>
 8012e26:	4b5f      	ldr	r3, [pc, #380]	; (8012fa4 <prepBuffer+0x20c>)
		buff_toggle = 1;
 8012e28:	2201      	movs	r2, #1
 8012e2a:	7022      	strb	r2, [r4, #0]
 8012e2c:	f503 6180 	add.w	r1, r3, #1024	; 0x400
		buffer[i] = BUFFER_OFFSET;
 8012e30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012e34:	f823 2b02 	strh.w	r2, [r3], #2
	for(int i = 0; i < BUFFER_SIZE; i++){
 8012e38:	4299      	cmp	r1, r3
 8012e3a:	d1fb      	bne.n	8012e34 <prepBuffer+0x9c>
	if(lidarModeActive){
 8012e3c:	4b56      	ldr	r3, [pc, #344]	; (8012f98 <prepBuffer+0x200>)
 8012e3e:	781b      	ldrb	r3, [r3, #0]
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	f040 8095 	bne.w	8012f70 <prepBuffer+0x1d8>
	else if(capModeActive){
 8012e46:	4b55      	ldr	r3, [pc, #340]	; (8012f9c <prepBuffer+0x204>)
 8012e48:	781b      	ldrb	r3, [r3, #0]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	f040 808c 	bne.w	8012f68 <prepBuffer+0x1d0>
		if(IIR_filter_active == 1){
 8012e50:	4b53      	ldr	r3, [pc, #332]	; (8012fa0 <prepBuffer+0x208>)
 8012e52:	781b      	ldrb	r3, [r3, #0]
 8012e54:	2b01      	cmp	r3, #1
 8012e56:	d1d7      	bne.n	8012e08 <prepBuffer+0x70>
			arm_shift_q15(buffer_2, BIT_SHIFT_Q_CONV, shifted_buffer_2, BUFFER_SIZE);
 8012e58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012e5c:	4a52      	ldr	r2, [pc, #328]	; (8012fa8 <prepBuffer+0x210>)
 8012e5e:	4851      	ldr	r0, [pc, #324]	; (8012fa4 <prepBuffer+0x20c>)
 8012e60:	2104      	movs	r1, #4
 8012e62:	f000 ff41 	bl	8013ce8 <arm_shift_q15>
			applyFilter(shifted_buffer_2, filtered_buffer_2, shifted_buffer_3);
 8012e66:	4a51      	ldr	r2, [pc, #324]	; (8012fac <prepBuffer+0x214>)
 8012e68:	4951      	ldr	r1, [pc, #324]	; (8012fb0 <prepBuffer+0x218>)
 8012e6a:	484f      	ldr	r0, [pc, #316]	; (8012fa8 <prepBuffer+0x210>)
 8012e6c:	f7fc fa7c 	bl	800f368 <applyFilter>
			arm_shift_q15(filtered_buffer_2, (-1*((int8_t)BIT_SHIFT_Q_CONV)), buffer_2, BUFFER_SIZE);
 8012e70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012e74:	4a4b      	ldr	r2, [pc, #300]	; (8012fa4 <prepBuffer+0x20c>)
 8012e76:	484e      	ldr	r0, [pc, #312]	; (8012fb0 <prepBuffer+0x218>)
 8012e78:	f06f 0103 	mvn.w	r1, #3
 8012e7c:	f000 ff34 	bl	8013ce8 <arm_shift_q15>
 8012e80:	e7c2      	b.n	8012e08 <prepBuffer+0x70>
	waveTable = desired_table;
 8012e82:	484c      	ldr	r0, [pc, #304]	; (8012fb4 <prepBuffer+0x21c>)
	max_table_index = size;
 8012e84:	494c      	ldr	r1, [pc, #304]	; (8012fb8 <prepBuffer+0x220>)
	waveTable = desired_table;
 8012e86:	4c4d      	ldr	r4, [pc, #308]	; (8012fbc <prepBuffer+0x224>)
	switchOctave(octave);
 8012e88:	4a4d      	ldr	r2, [pc, #308]	; (8012fc0 <prepBuffer+0x228>)
	waveTable = desired_table;
 8012e8a:	6004      	str	r4, [r0, #0]
 8012e8c:	f44f 7080 	mov.w	r0, #256	; 0x100
		temp_2 = 0;
 8012e90:	2400      	movs	r4, #0
 8012e92:	701c      	strb	r4, [r3, #0]
	max_table_index = size;
 8012e94:	8008      	strh	r0, [r1, #0]
	switchOctave(octave);
 8012e96:	7810      	ldrb	r0, [r2, #0]
 8012e98:	f7ff fc82 	bl	80127a0 <switchOctave>
 8012e9c:	4b3d      	ldr	r3, [pc, #244]	; (8012f94 <prepBuffer+0x1fc>)
		buffer[i] = BUFFER_OFFSET;
 8012e9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012ea2:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8012ea6:	f823 1b02 	strh.w	r1, [r3], #2
	for(int i = 0; i < BUFFER_SIZE; i++){
 8012eaa:	429a      	cmp	r2, r3
 8012eac:	d1fb      	bne.n	8012ea6 <prepBuffer+0x10e>
		setCutoffFreq(.9);
 8012eae:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8012fc4 <prepBuffer+0x22c>
 8012eb2:	f7fc f9e5 	bl	800f280 <setCutoffFreq>
 8012eb6:	e776      	b.n	8012da6 <prepBuffer+0xe>
	HAL_GPIO_TogglePin(LED_LAT_GPIO_Port, LED_LAT_Pin);
 8012eb8:	f7ef f96a 	bl	8002190 <HAL_GPIO_TogglePin>
	HAL_DAC_Start_DMA(hdac, DAC_CHANNEL_1, (uint32_t*)buffer, 512, DAC_ALIGN_12B_R);
 8012ebc:	2100      	movs	r1, #0
 8012ebe:	9100      	str	r1, [sp, #0]
 8012ec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012ec4:	4a37      	ldr	r2, [pc, #220]	; (8012fa4 <prepBuffer+0x20c>)
 8012ec6:	4630      	mov	r0, r6
 8012ec8:	f7ee fd18 	bl	80018fc <HAL_DAC_Start_DMA>
 8012ecc:	4b30      	ldr	r3, [pc, #192]	; (8012f90 <prepBuffer+0x1f8>)
		buff_toggle = 2;
 8012ece:	2202      	movs	r2, #2
 8012ed0:	7022      	strb	r2, [r4, #0]
 8012ed2:	f503 6180 	add.w	r1, r3, #1024	; 0x400
		buffer[i] = BUFFER_OFFSET;
 8012ed6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012eda:	f823 2b02 	strh.w	r2, [r3], #2
	for(int i = 0; i < BUFFER_SIZE; i++){
 8012ede:	428b      	cmp	r3, r1
 8012ee0:	d1fb      	bne.n	8012eda <prepBuffer+0x142>
	if(lidarModeActive){
 8012ee2:	4b2d      	ldr	r3, [pc, #180]	; (8012f98 <prepBuffer+0x200>)
 8012ee4:	781b      	ldrb	r3, [r3, #0]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d148      	bne.n	8012f7c <prepBuffer+0x1e4>
	else if(capModeActive){
 8012eea:	4b2c      	ldr	r3, [pc, #176]	; (8012f9c <prepBuffer+0x204>)
 8012eec:	781b      	ldrb	r3, [r3, #0]
 8012eee:	b113      	cbz	r3, 8012ef6 <prepBuffer+0x15e>
 8012ef0:	4827      	ldr	r0, [pc, #156]	; (8012f90 <prepBuffer+0x1f8>)
 8012ef2:	f7ff fb95 	bl	8012620 <fillBuffer.part.0>
		if(IIR_filter_active == 1){
 8012ef6:	4b2a      	ldr	r3, [pc, #168]	; (8012fa0 <prepBuffer+0x208>)
 8012ef8:	781b      	ldrb	r3, [r3, #0]
 8012efa:	2b01      	cmp	r3, #1
 8012efc:	d184      	bne.n	8012e08 <prepBuffer+0x70>
			arm_shift_q15(buffer_1, BIT_SHIFT_Q_CONV, shifted_buffer_1, BUFFER_SIZE);
 8012efe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012f02:	4a31      	ldr	r2, [pc, #196]	; (8012fc8 <prepBuffer+0x230>)
 8012f04:	4822      	ldr	r0, [pc, #136]	; (8012f90 <prepBuffer+0x1f8>)
 8012f06:	2104      	movs	r1, #4
 8012f08:	f000 feee 	bl	8013ce8 <arm_shift_q15>
			applyFilter(shifted_buffer_1, filtered_buffer_1, shifted_buffer_2);
 8012f0c:	4a26      	ldr	r2, [pc, #152]	; (8012fa8 <prepBuffer+0x210>)
 8012f0e:	492f      	ldr	r1, [pc, #188]	; (8012fcc <prepBuffer+0x234>)
 8012f10:	482d      	ldr	r0, [pc, #180]	; (8012fc8 <prepBuffer+0x230>)
 8012f12:	f7fc fa29 	bl	800f368 <applyFilter>
			arm_shift_q15(filtered_buffer_1, (-1*((int8_t)BIT_SHIFT_Q_CONV)), buffer_1, BUFFER_SIZE);
 8012f16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012f1a:	4a1d      	ldr	r2, [pc, #116]	; (8012f90 <prepBuffer+0x1f8>)
 8012f1c:	482b      	ldr	r0, [pc, #172]	; (8012fcc <prepBuffer+0x234>)
 8012f1e:	f06f 0103 	mvn.w	r1, #3
 8012f22:	f000 fee1 	bl	8013ce8 <arm_shift_q15>
 8012f26:	e76f      	b.n	8012e08 <prepBuffer+0x70>
		addTableToBuffer(buffer, &freq_lidar_inc, &freq_lidar_ind);
 8012f28:	4a29      	ldr	r2, [pc, #164]	; (8012fd0 <prepBuffer+0x238>)
 8012f2a:	492a      	ldr	r1, [pc, #168]	; (8012fd4 <prepBuffer+0x23c>)
 8012f2c:	4819      	ldr	r0, [pc, #100]	; (8012f94 <prepBuffer+0x1fc>)
 8012f2e:	f7ff f8b7 	bl	80120a0 <addTableToBuffer>
		if(IIR_filter_active == 1){
 8012f32:	4b1b      	ldr	r3, [pc, #108]	; (8012fa0 <prepBuffer+0x208>)
 8012f34:	781b      	ldrb	r3, [r3, #0]
 8012f36:	2b01      	cmp	r3, #1
 8012f38:	f47f af66 	bne.w	8012e08 <prepBuffer+0x70>
			arm_shift_q15(buffer_3, BIT_SHIFT_Q_CONV, shifted_buffer_3, BUFFER_SIZE);
 8012f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012f40:	4a1a      	ldr	r2, [pc, #104]	; (8012fac <prepBuffer+0x214>)
 8012f42:	4814      	ldr	r0, [pc, #80]	; (8012f94 <prepBuffer+0x1fc>)
 8012f44:	2104      	movs	r1, #4
 8012f46:	f000 fecf 	bl	8013ce8 <arm_shift_q15>
			applyFilter(shifted_buffer_3, filtered_buffer_3, shifted_buffer_1);
 8012f4a:	4a1f      	ldr	r2, [pc, #124]	; (8012fc8 <prepBuffer+0x230>)
 8012f4c:	4922      	ldr	r1, [pc, #136]	; (8012fd8 <prepBuffer+0x240>)
 8012f4e:	4817      	ldr	r0, [pc, #92]	; (8012fac <prepBuffer+0x214>)
 8012f50:	f7fc fa0a 	bl	800f368 <applyFilter>
			arm_shift_q15(filtered_buffer_3, (-1*((int8_t)BIT_SHIFT_Q_CONV)), buffer_3, BUFFER_SIZE);
 8012f54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012f58:	4a0e      	ldr	r2, [pc, #56]	; (8012f94 <prepBuffer+0x1fc>)
 8012f5a:	481f      	ldr	r0, [pc, #124]	; (8012fd8 <prepBuffer+0x240>)
 8012f5c:	f06f 0103 	mvn.w	r1, #3
 8012f60:	f000 fec2 	bl	8013ce8 <arm_shift_q15>
}
 8012f64:	b002      	add	sp, #8
 8012f66:	bd70      	pop	{r4, r5, r6, pc}
 8012f68:	480e      	ldr	r0, [pc, #56]	; (8012fa4 <prepBuffer+0x20c>)
 8012f6a:	f7ff fb59 	bl	8012620 <fillBuffer.part.0>
 8012f6e:	e76f      	b.n	8012e50 <prepBuffer+0xb8>
		addTableToBuffer(buffer, &freq_lidar_inc, &freq_lidar_ind);
 8012f70:	4a17      	ldr	r2, [pc, #92]	; (8012fd0 <prepBuffer+0x238>)
 8012f72:	4918      	ldr	r1, [pc, #96]	; (8012fd4 <prepBuffer+0x23c>)
 8012f74:	480b      	ldr	r0, [pc, #44]	; (8012fa4 <prepBuffer+0x20c>)
 8012f76:	f7ff f893 	bl	80120a0 <addTableToBuffer>
 8012f7a:	e769      	b.n	8012e50 <prepBuffer+0xb8>
 8012f7c:	4a14      	ldr	r2, [pc, #80]	; (8012fd0 <prepBuffer+0x238>)
 8012f7e:	4915      	ldr	r1, [pc, #84]	; (8012fd4 <prepBuffer+0x23c>)
 8012f80:	4803      	ldr	r0, [pc, #12]	; (8012f90 <prepBuffer+0x1f8>)
 8012f82:	f7ff f88d 	bl	80120a0 <addTableToBuffer>
 8012f86:	e7b6      	b.n	8012ef6 <prepBuffer+0x15e>
 8012f88:	20000051 	.word	0x20000051
 8012f8c:	200052d0 	.word	0x200052d0
 8012f90:	200076e0 	.word	0x200076e0
 8012f94:	20007aec 	.word	0x20007aec
 8012f98:	20005318 	.word	0x20005318
 8012f9c:	200052d1 	.word	0x200052d1
 8012fa0:	20000040 	.word	0x20000040
 8012fa4:	200066b0 	.word	0x200066b0
 8012fa8:	20006ac0 	.word	0x20006ac0
 8012fac:	20007ef0 	.word	0x20007ef0
 8012fb0:	20005eb0 	.word	0x20005eb0
 8012fb4:	200086f4 	.word	0x200086f4
 8012fb8:	2000004e 	.word	0x2000004e
 8012fbc:	080170c8 	.word	0x080170c8
 8012fc0:	20000050 	.word	0x20000050
 8012fc4:	3f666666 	.word	0x3f666666
 8012fc8:	200062b0 	.word	0x200062b0
 8012fcc:	20006ec0 	.word	0x20006ec0
 8012fd0:	20005308 	.word	0x20005308
 8012fd4:	20006ab0 	.word	0x20006ab0
 8012fd8:	200082f4 	.word	0x200082f4

08012fdc <HAL_DAC_ConvCpltCallbackCh1>:
	prepBuffer(hdac);
 8012fdc:	f7ff bedc 	b.w	8012d98 <prepBuffer>

08012fe0 <incrementOctave>:
}



void incrementOctave(void){
	if(octave == MAX_OCTAVE) return;
 8012fe0:	4b71      	ldr	r3, [pc, #452]	; (80131a8 <incrementOctave+0x1c8>)
 8012fe2:	781a      	ldrb	r2, [r3, #0]
 8012fe4:	2a05      	cmp	r2, #5
 8012fe6:	f000 80af 	beq.w	8013148 <incrementOctave+0x168>
void incrementOctave(void){
 8012fea:	b510      	push	{r4, lr}
	else{
		octave++;
 8012fec:	781a      	ldrb	r2, [r3, #0]
 8012fee:	3201      	adds	r2, #1
 8012ff0:	b2d2      	uxtb	r2, r2
 8012ff2:	701a      	strb	r2, [r3, #0]
		switchOctave(octave);
 8012ff4:	781a      	ldrb	r2, [r3, #0]
 8012ff6:	b2d2      	uxtb	r2, r2
	if(des_octave == 4){
 8012ff8:	2a04      	cmp	r2, #4
	octave = des_octave;
 8012ffa:	701a      	strb	r2, [r3, #0]
	if(des_octave == 4){
 8012ffc:	f000 80f0 	beq.w	80131e0 <incrementOctave+0x200>
	else if(des_octave == 5){
 8013000:	2a05      	cmp	r2, #5
 8013002:	f000 81d7 	beq.w	80133b4 <incrementOctave+0x3d4>
	else if(des_octave == 3){
 8013006:	2a03      	cmp	r2, #3
 8013008:	f040 809d 	bne.w	8013146 <incrementOctave+0x166>
		freq_1_inc = (NOTE_C3 / DAC_FREQ) * max_table_index;
 801300c:	4c67      	ldr	r4, [pc, #412]	; (80131ac <incrementOctave+0x1cc>)
 801300e:	8820      	ldrh	r0, [r4, #0]
 8013010:	b200      	sxth	r0, r0
 8013012:	f7ed fa47 	bl	80004a4 <__aeabi_i2d>
 8013016:	a34e      	add	r3, pc, #312	; (adr r3, 8013150 <incrementOctave+0x170>)
 8013018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801301c:	f7ed faa8 	bl	8000570 <__aeabi_dmul>
 8013020:	f7ed fd9e 	bl	8000b60 <__aeabi_d2f>
 8013024:	4b62      	ldr	r3, [pc, #392]	; (80131b0 <incrementOctave+0x1d0>)
 8013026:	6018      	str	r0, [r3, #0]
		freq_2_inc = (NOTE_C3S / DAC_FREQ) * max_table_index;
 8013028:	8820      	ldrh	r0, [r4, #0]
 801302a:	b200      	sxth	r0, r0
 801302c:	f7ed fa3a 	bl	80004a4 <__aeabi_i2d>
 8013030:	a349      	add	r3, pc, #292	; (adr r3, 8013158 <incrementOctave+0x178>)
 8013032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013036:	f7ed fa9b 	bl	8000570 <__aeabi_dmul>
 801303a:	f7ed fd91 	bl	8000b60 <__aeabi_d2f>
 801303e:	4b5d      	ldr	r3, [pc, #372]	; (80131b4 <incrementOctave+0x1d4>)
 8013040:	6018      	str	r0, [r3, #0]
		freq_3_inc = (NOTE_D3 / DAC_FREQ) * max_table_index;
 8013042:	8820      	ldrh	r0, [r4, #0]
 8013044:	b200      	sxth	r0, r0
 8013046:	f7ed fa2d 	bl	80004a4 <__aeabi_i2d>
 801304a:	a345      	add	r3, pc, #276	; (adr r3, 8013160 <incrementOctave+0x180>)
 801304c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013050:	f7ed fa8e 	bl	8000570 <__aeabi_dmul>
 8013054:	f7ed fd84 	bl	8000b60 <__aeabi_d2f>
 8013058:	4b57      	ldr	r3, [pc, #348]	; (80131b8 <incrementOctave+0x1d8>)
 801305a:	6018      	str	r0, [r3, #0]
		freq_4_inc = (NOTE_D3S / DAC_FREQ) * max_table_index;
 801305c:	8820      	ldrh	r0, [r4, #0]
 801305e:	b200      	sxth	r0, r0
 8013060:	f7ed fa20 	bl	80004a4 <__aeabi_i2d>
 8013064:	a340      	add	r3, pc, #256	; (adr r3, 8013168 <incrementOctave+0x188>)
 8013066:	e9d3 2300 	ldrd	r2, r3, [r3]
 801306a:	f7ed fa81 	bl	8000570 <__aeabi_dmul>
 801306e:	f7ed fd77 	bl	8000b60 <__aeabi_d2f>
 8013072:	4b52      	ldr	r3, [pc, #328]	; (80131bc <incrementOctave+0x1dc>)
 8013074:	6018      	str	r0, [r3, #0]
		freq_5_inc = (NOTE_E3 / DAC_FREQ) * max_table_index;
 8013076:	8820      	ldrh	r0, [r4, #0]
 8013078:	b200      	sxth	r0, r0
 801307a:	f7ed fa13 	bl	80004a4 <__aeabi_i2d>
 801307e:	a33c      	add	r3, pc, #240	; (adr r3, 8013170 <incrementOctave+0x190>)
 8013080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013084:	f7ed fa74 	bl	8000570 <__aeabi_dmul>
 8013088:	f7ed fd6a 	bl	8000b60 <__aeabi_d2f>
 801308c:	4b4c      	ldr	r3, [pc, #304]	; (80131c0 <incrementOctave+0x1e0>)
 801308e:	6018      	str	r0, [r3, #0]
		freq_6_inc = (NOTE_F3 / DAC_FREQ) * max_table_index;
 8013090:	8820      	ldrh	r0, [r4, #0]
 8013092:	b200      	sxth	r0, r0
 8013094:	f7ed fa06 	bl	80004a4 <__aeabi_i2d>
 8013098:	a337      	add	r3, pc, #220	; (adr r3, 8013178 <incrementOctave+0x198>)
 801309a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801309e:	f7ed fa67 	bl	8000570 <__aeabi_dmul>
 80130a2:	f7ed fd5d 	bl	8000b60 <__aeabi_d2f>
 80130a6:	4b47      	ldr	r3, [pc, #284]	; (80131c4 <incrementOctave+0x1e4>)
 80130a8:	6018      	str	r0, [r3, #0]
		freq_7_inc = (NOTE_F3S / DAC_FREQ) * max_table_index;
 80130aa:	8820      	ldrh	r0, [r4, #0]
 80130ac:	b200      	sxth	r0, r0
 80130ae:	f7ed f9f9 	bl	80004a4 <__aeabi_i2d>
 80130b2:	a333      	add	r3, pc, #204	; (adr r3, 8013180 <incrementOctave+0x1a0>)
 80130b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130b8:	f7ed fa5a 	bl	8000570 <__aeabi_dmul>
 80130bc:	f7ed fd50 	bl	8000b60 <__aeabi_d2f>
 80130c0:	4b41      	ldr	r3, [pc, #260]	; (80131c8 <incrementOctave+0x1e8>)
 80130c2:	6018      	str	r0, [r3, #0]
		freq_8_inc = (NOTE_G3 / DAC_FREQ) * max_table_index;
 80130c4:	8820      	ldrh	r0, [r4, #0]
 80130c6:	b200      	sxth	r0, r0
 80130c8:	f7ed f9ec 	bl	80004a4 <__aeabi_i2d>
 80130cc:	a32e      	add	r3, pc, #184	; (adr r3, 8013188 <incrementOctave+0x1a8>)
 80130ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130d2:	f7ed fa4d 	bl	8000570 <__aeabi_dmul>
 80130d6:	f7ed fd43 	bl	8000b60 <__aeabi_d2f>
 80130da:	4b3c      	ldr	r3, [pc, #240]	; (80131cc <incrementOctave+0x1ec>)
 80130dc:	6018      	str	r0, [r3, #0]
		freq_9_inc = (NOTE_G3S / DAC_FREQ) * max_table_index;
 80130de:	8820      	ldrh	r0, [r4, #0]
 80130e0:	b200      	sxth	r0, r0
 80130e2:	f7ed f9df 	bl	80004a4 <__aeabi_i2d>
 80130e6:	a32a      	add	r3, pc, #168	; (adr r3, 8013190 <incrementOctave+0x1b0>)
 80130e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130ec:	f7ed fa40 	bl	8000570 <__aeabi_dmul>
 80130f0:	f7ed fd36 	bl	8000b60 <__aeabi_d2f>
 80130f4:	4b36      	ldr	r3, [pc, #216]	; (80131d0 <incrementOctave+0x1f0>)
 80130f6:	6018      	str	r0, [r3, #0]
		freq_10_inc = (NOTE_A3 / DAC_FREQ) * max_table_index;
 80130f8:	8820      	ldrh	r0, [r4, #0]
 80130fa:	b200      	sxth	r0, r0
 80130fc:	f7ed f9d2 	bl	80004a4 <__aeabi_i2d>
 8013100:	a325      	add	r3, pc, #148	; (adr r3, 8013198 <incrementOctave+0x1b8>)
 8013102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013106:	f7ed fa33 	bl	8000570 <__aeabi_dmul>
 801310a:	f7ed fd29 	bl	8000b60 <__aeabi_d2f>
 801310e:	4b31      	ldr	r3, [pc, #196]	; (80131d4 <incrementOctave+0x1f4>)
 8013110:	6018      	str	r0, [r3, #0]
		freq_11_inc = (NOTE_A3S / DAC_FREQ) * max_table_index;
 8013112:	8820      	ldrh	r0, [r4, #0]
 8013114:	b200      	sxth	r0, r0
 8013116:	f7ed f9c5 	bl	80004a4 <__aeabi_i2d>
 801311a:	a31d      	add	r3, pc, #116	; (adr r3, 8013190 <incrementOctave+0x1b0>)
 801311c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013120:	f7ed fa26 	bl	8000570 <__aeabi_dmul>
 8013124:	f7ed fd1c 	bl	8000b60 <__aeabi_d2f>
 8013128:	4b2b      	ldr	r3, [pc, #172]	; (80131d8 <incrementOctave+0x1f8>)
 801312a:	6018      	str	r0, [r3, #0]
		freq_12_inc = (NOTE_B3 / DAC_FREQ) * max_table_index;
 801312c:	8820      	ldrh	r0, [r4, #0]
 801312e:	b200      	sxth	r0, r0
 8013130:	f7ed f9b8 	bl	80004a4 <__aeabi_i2d>
 8013134:	a31a      	add	r3, pc, #104	; (adr r3, 80131a0 <incrementOctave+0x1c0>)
 8013136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801313a:	f7ed fa19 	bl	8000570 <__aeabi_dmul>
 801313e:	f7ed fd0f 	bl	8000b60 <__aeabi_d2f>
 8013142:	4b26      	ldr	r3, [pc, #152]	; (80131dc <incrementOctave+0x1fc>)
 8013144:	6018      	str	r0, [r3, #0]
 8013146:	bd10      	pop	{r4, pc}
 8013148:	4770      	bx	lr
 801314a:	bf00      	nop
 801314c:	f3af 8000 	nop.w
 8013150:	5d8368d5 	.word	0x5d8368d5
 8013154:	3f6aca5e 	.word	0x3f6aca5e
 8013158:	ea041539 	.word	0xea041539
 801315c:	3f6c6228 	.word	0x3f6c6228
 8013160:	be67af3b 	.word	0xbe67af3b
 8013164:	3f6e1239 	.word	0x3f6e1239
 8013168:	3df95fd2 	.word	0x3df95fd2
 801316c:	3f6fdbfb 	.word	0x3f6fdbfb
 8013170:	07f81c06 	.word	0x07f81c06
 8013174:	3f70e080 	.word	0x3f70e080
 8013178:	b7c4fdcc 	.word	0xb7c4fdcc
 801317c:	3f71e166 	.word	0x3f71e166
 8013180:	d9f1787e 	.word	0xd9f1787e
 8013184:	3f72f195 	.word	0x3f72f195
 8013188:	50085610 	.word	0x50085610
 801318c:	3f7411f8 	.word	0x3f7411f8
 8013190:	fb946074 	.word	0xfb946074
 8013194:	3f754378 	.word	0x3f754378
 8013198:	020c49ba 	.word	0x020c49ba
 801319c:	3f76872b 	.word	0x3f76872b
 80131a0:	b59a8120 	.word	0xb59a8120
 80131a4:	3f79496f 	.word	0x3f79496f
 80131a8:	20000050 	.word	0x20000050
 80131ac:	2000004e 	.word	0x2000004e
 80131b0:	20005eac 	.word	0x20005eac
 80131b4:	20007ae4 	.word	0x20007ae4
 80131b8:	20006abc 	.word	0x20006abc
 80131bc:	200076cc 	.word	0x200076cc
 80131c0:	200076c8 	.word	0x200076c8
 80131c4:	200072c0 	.word	0x200072c0
 80131c8:	20006ab4 	.word	0x20006ab4
 80131cc:	200086fc 	.word	0x200086fc
 80131d0:	200072c4 	.word	0x200072c4
 80131d4:	200082f0 	.word	0x200082f0
 80131d8:	200076d8 	.word	0x200076d8
 80131dc:	20007eec 	.word	0x20007eec
		freq_1_inc = (NOTE_C4 / DAC_FREQ) * max_table_index;
 80131e0:	4c67      	ldr	r4, [pc, #412]	; (8013380 <incrementOctave+0x3a0>)
 80131e2:	8820      	ldrh	r0, [r4, #0]
 80131e4:	b200      	sxth	r0, r0
 80131e6:	f7ed f95d 	bl	80004a4 <__aeabi_i2d>
 80131ea:	a34d      	add	r3, pc, #308	; (adr r3, 8013320 <incrementOctave+0x340>)
 80131ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131f0:	f7ed f9be 	bl	8000570 <__aeabi_dmul>
 80131f4:	f7ed fcb4 	bl	8000b60 <__aeabi_d2f>
 80131f8:	4b62      	ldr	r3, [pc, #392]	; (8013384 <incrementOctave+0x3a4>)
 80131fa:	6018      	str	r0, [r3, #0]
		freq_2_inc = (NOTE_C4S / DAC_FREQ) * max_table_index;
 80131fc:	8820      	ldrh	r0, [r4, #0]
 80131fe:	b200      	sxth	r0, r0
 8013200:	f7ed f950 	bl	80004a4 <__aeabi_i2d>
 8013204:	a348      	add	r3, pc, #288	; (adr r3, 8013328 <incrementOctave+0x348>)
 8013206:	e9d3 2300 	ldrd	r2, r3, [r3]
 801320a:	f7ed f9b1 	bl	8000570 <__aeabi_dmul>
 801320e:	f7ed fca7 	bl	8000b60 <__aeabi_d2f>
 8013212:	4b5d      	ldr	r3, [pc, #372]	; (8013388 <incrementOctave+0x3a8>)
 8013214:	6018      	str	r0, [r3, #0]
		freq_3_inc = (NOTE_D4 / DAC_FREQ) * max_table_index;
 8013216:	8820      	ldrh	r0, [r4, #0]
 8013218:	b200      	sxth	r0, r0
 801321a:	f7ed f943 	bl	80004a4 <__aeabi_i2d>
 801321e:	a344      	add	r3, pc, #272	; (adr r3, 8013330 <incrementOctave+0x350>)
 8013220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013224:	f7ed f9a4 	bl	8000570 <__aeabi_dmul>
 8013228:	f7ed fc9a 	bl	8000b60 <__aeabi_d2f>
 801322c:	4b57      	ldr	r3, [pc, #348]	; (801338c <incrementOctave+0x3ac>)
 801322e:	6018      	str	r0, [r3, #0]
		freq_4_inc = (NOTE_D4S / DAC_FREQ) * max_table_index;
 8013230:	8820      	ldrh	r0, [r4, #0]
 8013232:	b200      	sxth	r0, r0
 8013234:	f7ed f936 	bl	80004a4 <__aeabi_i2d>
 8013238:	a33f      	add	r3, pc, #252	; (adr r3, 8013338 <incrementOctave+0x358>)
 801323a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801323e:	f7ed f997 	bl	8000570 <__aeabi_dmul>
 8013242:	f7ed fc8d 	bl	8000b60 <__aeabi_d2f>
 8013246:	4b52      	ldr	r3, [pc, #328]	; (8013390 <incrementOctave+0x3b0>)
 8013248:	6018      	str	r0, [r3, #0]
		freq_5_inc = (NOTE_E4 / DAC_FREQ) * max_table_index;
 801324a:	8820      	ldrh	r0, [r4, #0]
 801324c:	b200      	sxth	r0, r0
 801324e:	f7ed f929 	bl	80004a4 <__aeabi_i2d>
 8013252:	a33b      	add	r3, pc, #236	; (adr r3, 8013340 <incrementOctave+0x360>)
 8013254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013258:	f7ed f98a 	bl	8000570 <__aeabi_dmul>
 801325c:	f7ed fc80 	bl	8000b60 <__aeabi_d2f>
 8013260:	4b4c      	ldr	r3, [pc, #304]	; (8013394 <incrementOctave+0x3b4>)
 8013262:	6018      	str	r0, [r3, #0]
		freq_6_inc = (NOTE_F4 / DAC_FREQ) * max_table_index;
 8013264:	8820      	ldrh	r0, [r4, #0]
 8013266:	b200      	sxth	r0, r0
 8013268:	f7ed f91c 	bl	80004a4 <__aeabi_i2d>
 801326c:	a336      	add	r3, pc, #216	; (adr r3, 8013348 <incrementOctave+0x368>)
 801326e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013272:	f7ed f97d 	bl	8000570 <__aeabi_dmul>
 8013276:	f7ed fc73 	bl	8000b60 <__aeabi_d2f>
 801327a:	4b47      	ldr	r3, [pc, #284]	; (8013398 <incrementOctave+0x3b8>)
 801327c:	6018      	str	r0, [r3, #0]
		freq_7_inc = (NOTE_F4S / DAC_FREQ) * max_table_index;
 801327e:	8820      	ldrh	r0, [r4, #0]
 8013280:	b200      	sxth	r0, r0
 8013282:	f7ed f90f 	bl	80004a4 <__aeabi_i2d>
 8013286:	a332      	add	r3, pc, #200	; (adr r3, 8013350 <incrementOctave+0x370>)
 8013288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801328c:	f7ed f970 	bl	8000570 <__aeabi_dmul>
 8013290:	f7ed fc66 	bl	8000b60 <__aeabi_d2f>
 8013294:	4b41      	ldr	r3, [pc, #260]	; (801339c <incrementOctave+0x3bc>)
 8013296:	6018      	str	r0, [r3, #0]
		freq_8_inc = (NOTE_G4 / DAC_FREQ) * max_table_index;
 8013298:	8820      	ldrh	r0, [r4, #0]
 801329a:	b200      	sxth	r0, r0
 801329c:	f7ed f902 	bl	80004a4 <__aeabi_i2d>
 80132a0:	a32d      	add	r3, pc, #180	; (adr r3, 8013358 <incrementOctave+0x378>)
 80132a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132a6:	f7ed f963 	bl	8000570 <__aeabi_dmul>
 80132aa:	f7ed fc59 	bl	8000b60 <__aeabi_d2f>
 80132ae:	4b3c      	ldr	r3, [pc, #240]	; (80133a0 <incrementOctave+0x3c0>)
 80132b0:	6018      	str	r0, [r3, #0]
		freq_9_inc = (NOTE_G4S / DAC_FREQ) * max_table_index;
 80132b2:	8820      	ldrh	r0, [r4, #0]
 80132b4:	b200      	sxth	r0, r0
 80132b6:	f7ed f8f5 	bl	80004a4 <__aeabi_i2d>
 80132ba:	a329      	add	r3, pc, #164	; (adr r3, 8013360 <incrementOctave+0x380>)
 80132bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132c0:	f7ed f956 	bl	8000570 <__aeabi_dmul>
 80132c4:	f7ed fc4c 	bl	8000b60 <__aeabi_d2f>
 80132c8:	4b36      	ldr	r3, [pc, #216]	; (80133a4 <incrementOctave+0x3c4>)
 80132ca:	6018      	str	r0, [r3, #0]
		freq_10_inc = (NOTE_A4 / DAC_FREQ) * max_table_index;
 80132cc:	8820      	ldrh	r0, [r4, #0]
 80132ce:	b200      	sxth	r0, r0
 80132d0:	f7ed f8e8 	bl	80004a4 <__aeabi_i2d>
 80132d4:	a324      	add	r3, pc, #144	; (adr r3, 8013368 <incrementOctave+0x388>)
 80132d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132da:	f7ed f949 	bl	8000570 <__aeabi_dmul>
 80132de:	f7ed fc3f 	bl	8000b60 <__aeabi_d2f>
 80132e2:	4b31      	ldr	r3, [pc, #196]	; (80133a8 <incrementOctave+0x3c8>)
 80132e4:	6018      	str	r0, [r3, #0]
		freq_11_inc = (NOTE_A4S / DAC_FREQ) * max_table_index;
 80132e6:	8820      	ldrh	r0, [r4, #0]
 80132e8:	b200      	sxth	r0, r0
 80132ea:	f7ed f8db 	bl	80004a4 <__aeabi_i2d>
 80132ee:	a320      	add	r3, pc, #128	; (adr r3, 8013370 <incrementOctave+0x390>)
 80132f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132f4:	f7ed f93c 	bl	8000570 <__aeabi_dmul>
 80132f8:	f7ed fc32 	bl	8000b60 <__aeabi_d2f>
 80132fc:	4b2b      	ldr	r3, [pc, #172]	; (80133ac <incrementOctave+0x3cc>)
 80132fe:	6018      	str	r0, [r3, #0]
		freq_12_inc = (NOTE_B4 / DAC_FREQ) * max_table_index;
 8013300:	8820      	ldrh	r0, [r4, #0]
 8013302:	b200      	sxth	r0, r0
 8013304:	f7ed f8ce 	bl	80004a4 <__aeabi_i2d>
 8013308:	a31b      	add	r3, pc, #108	; (adr r3, 8013378 <incrementOctave+0x398>)
 801330a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801330e:	f7ed f92f 	bl	8000570 <__aeabi_dmul>
 8013312:	f7ed fc25 	bl	8000b60 <__aeabi_d2f>
 8013316:	4b26      	ldr	r3, [pc, #152]	; (80133b0 <incrementOctave+0x3d0>)
 8013318:	6018      	str	r0, [r3, #0]
 801331a:	bd10      	pop	{r4, pc}
 801331c:	f3af 8000 	nop.w
 8013320:	5d8368d5 	.word	0x5d8368d5
 8013324:	3f7aca5e 	.word	0x3f7aca5e
 8013328:	a000bbe7 	.word	0xa000bbe7
 801332c:	3f7c622f 	.word	0x3f7c622f
 8013330:	746455ec 	.word	0x746455ec
 8013334:	3f7e1240 	.word	0x3f7e1240
 8013338:	f3f60682 	.word	0xf3f60682
 801333c:	3f7fdc01 	.word	0x3f7fdc01
 8013340:	07f81c06 	.word	0x07f81c06
 8013344:	3f80e080 	.word	0x3f80e080
 8013348:	b7c4fdcc 	.word	0xb7c4fdcc
 801334c:	3f81e166 	.word	0x3f81e166
 8013350:	d9f1787e 	.word	0xd9f1787e
 8013354:	3f82f195 	.word	0x3f82f195
 8013358:	f50a02b8 	.word	0xf50a02b8
 801335c:	3f8411f4 	.word	0x3f8411f4
 8013360:	5692b3cc 	.word	0x5692b3cc
 8013364:	3f85437c 	.word	0x3f85437c
 8013368:	020c49ba 	.word	0x020c49ba
 801336c:	3f86872b 	.word	0x3f86872b
 8013370:	d2ea1d3f 	.word	0xd2ea1d3f
 8013374:	3f87de1a 	.word	0x3f87de1a
 8013378:	5a9c2dc8 	.word	0x5a9c2dc8
 801337c:	3f89496c 	.word	0x3f89496c
 8013380:	2000004e 	.word	0x2000004e
 8013384:	20005eac 	.word	0x20005eac
 8013388:	20007ae4 	.word	0x20007ae4
 801338c:	20006abc 	.word	0x20006abc
 8013390:	200076cc 	.word	0x200076cc
 8013394:	200076c8 	.word	0x200076c8
 8013398:	200072c0 	.word	0x200072c0
 801339c:	20006ab4 	.word	0x20006ab4
 80133a0:	200086fc 	.word	0x200086fc
 80133a4:	200072c4 	.word	0x200072c4
 80133a8:	200082f0 	.word	0x200082f0
 80133ac:	200076d8 	.word	0x200076d8
 80133b0:	20007eec 	.word	0x20007eec
		freq_1_inc = (NOTE_C5 / DAC_FREQ) * max_table_index;
 80133b4:	4c66      	ldr	r4, [pc, #408]	; (8013550 <incrementOctave+0x570>)
 80133b6:	8820      	ldrh	r0, [r4, #0]
 80133b8:	b200      	sxth	r0, r0
 80133ba:	f7ed f873 	bl	80004a4 <__aeabi_i2d>
 80133be:	a34c      	add	r3, pc, #304	; (adr r3, 80134f0 <incrementOctave+0x510>)
 80133c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133c4:	f7ed f8d4 	bl	8000570 <__aeabi_dmul>
 80133c8:	f7ed fbca 	bl	8000b60 <__aeabi_d2f>
 80133cc:	4b61      	ldr	r3, [pc, #388]	; (8013554 <incrementOctave+0x574>)
 80133ce:	6018      	str	r0, [r3, #0]
		freq_2_inc = (NOTE_C5S / DAC_FREQ) * max_table_index;
 80133d0:	8820      	ldrh	r0, [r4, #0]
 80133d2:	b200      	sxth	r0, r0
 80133d4:	f7ed f866 	bl	80004a4 <__aeabi_i2d>
 80133d8:	a347      	add	r3, pc, #284	; (adr r3, 80134f8 <incrementOctave+0x518>)
 80133da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133de:	f7ed f8c7 	bl	8000570 <__aeabi_dmul>
 80133e2:	f7ed fbbd 	bl	8000b60 <__aeabi_d2f>
 80133e6:	4b5c      	ldr	r3, [pc, #368]	; (8013558 <incrementOctave+0x578>)
 80133e8:	6018      	str	r0, [r3, #0]
		freq_3_inc = (NOTE_D5 / DAC_FREQ) * max_table_index;
 80133ea:	8820      	ldrh	r0, [r4, #0]
 80133ec:	b200      	sxth	r0, r0
 80133ee:	f7ed f859 	bl	80004a4 <__aeabi_i2d>
 80133f2:	a343      	add	r3, pc, #268	; (adr r3, 8013500 <incrementOctave+0x520>)
 80133f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133f8:	f7ed f8ba 	bl	8000570 <__aeabi_dmul>
 80133fc:	f7ed fbb0 	bl	8000b60 <__aeabi_d2f>
 8013400:	4b56      	ldr	r3, [pc, #344]	; (801355c <incrementOctave+0x57c>)
 8013402:	6018      	str	r0, [r3, #0]
		freq_4_inc = (NOTE_D5S / DAC_FREQ) * max_table_index;
 8013404:	8820      	ldrh	r0, [r4, #0]
 8013406:	b200      	sxth	r0, r0
 8013408:	f7ed f84c 	bl	80004a4 <__aeabi_i2d>
 801340c:	a33e      	add	r3, pc, #248	; (adr r3, 8013508 <incrementOctave+0x528>)
 801340e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013412:	f7ed f8ad 	bl	8000570 <__aeabi_dmul>
 8013416:	f7ed fba3 	bl	8000b60 <__aeabi_d2f>
 801341a:	4b51      	ldr	r3, [pc, #324]	; (8013560 <incrementOctave+0x580>)
 801341c:	6018      	str	r0, [r3, #0]
		freq_5_inc = (NOTE_E5 / DAC_FREQ) * max_table_index;
 801341e:	8820      	ldrh	r0, [r4, #0]
 8013420:	b200      	sxth	r0, r0
 8013422:	f7ed f83f 	bl	80004a4 <__aeabi_i2d>
 8013426:	a33a      	add	r3, pc, #232	; (adr r3, 8013510 <incrementOctave+0x530>)
 8013428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801342c:	f7ed f8a0 	bl	8000570 <__aeabi_dmul>
 8013430:	f7ed fb96 	bl	8000b60 <__aeabi_d2f>
 8013434:	4b4b      	ldr	r3, [pc, #300]	; (8013564 <incrementOctave+0x584>)
 8013436:	6018      	str	r0, [r3, #0]
		freq_6_inc = (NOTE_F5 / DAC_FREQ) * max_table_index;
 8013438:	8820      	ldrh	r0, [r4, #0]
 801343a:	b200      	sxth	r0, r0
 801343c:	f7ed f832 	bl	80004a4 <__aeabi_i2d>
 8013440:	a335      	add	r3, pc, #212	; (adr r3, 8013518 <incrementOctave+0x538>)
 8013442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013446:	f7ed f893 	bl	8000570 <__aeabi_dmul>
 801344a:	f7ed fb89 	bl	8000b60 <__aeabi_d2f>
 801344e:	4b46      	ldr	r3, [pc, #280]	; (8013568 <incrementOctave+0x588>)
 8013450:	6018      	str	r0, [r3, #0]
		freq_7_inc = (NOTE_F5S / DAC_FREQ) * max_table_index;
 8013452:	8820      	ldrh	r0, [r4, #0]
 8013454:	b200      	sxth	r0, r0
 8013456:	f7ed f825 	bl	80004a4 <__aeabi_i2d>
 801345a:	a331      	add	r3, pc, #196	; (adr r3, 8013520 <incrementOctave+0x540>)
 801345c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013460:	f7ed f886 	bl	8000570 <__aeabi_dmul>
 8013464:	f7ed fb7c 	bl	8000b60 <__aeabi_d2f>
 8013468:	4b40      	ldr	r3, [pc, #256]	; (801356c <incrementOctave+0x58c>)
 801346a:	6018      	str	r0, [r3, #0]
		freq_8_inc = (NOTE_G5 / DAC_FREQ) * max_table_index;
 801346c:	8820      	ldrh	r0, [r4, #0]
 801346e:	b200      	sxth	r0, r0
 8013470:	f7ed f818 	bl	80004a4 <__aeabi_i2d>
 8013474:	a32c      	add	r3, pc, #176	; (adr r3, 8013528 <incrementOctave+0x548>)
 8013476:	e9d3 2300 	ldrd	r2, r3, [r3]
 801347a:	f7ed f879 	bl	8000570 <__aeabi_dmul>
 801347e:	f7ed fb6f 	bl	8000b60 <__aeabi_d2f>
 8013482:	4b3b      	ldr	r3, [pc, #236]	; (8013570 <incrementOctave+0x590>)
 8013484:	6018      	str	r0, [r3, #0]
		freq_9_inc = (NOTE_G5S / DAC_FREQ) * max_table_index;
 8013486:	8820      	ldrh	r0, [r4, #0]
 8013488:	b200      	sxth	r0, r0
 801348a:	f7ed f80b 	bl	80004a4 <__aeabi_i2d>
 801348e:	a328      	add	r3, pc, #160	; (adr r3, 8013530 <incrementOctave+0x550>)
 8013490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013494:	f7ed f86c 	bl	8000570 <__aeabi_dmul>
 8013498:	f7ed fb62 	bl	8000b60 <__aeabi_d2f>
 801349c:	4b35      	ldr	r3, [pc, #212]	; (8013574 <incrementOctave+0x594>)
 801349e:	6018      	str	r0, [r3, #0]
		freq_10_inc = (NOTE_A5 / DAC_FREQ) * max_table_index;
 80134a0:	8820      	ldrh	r0, [r4, #0]
 80134a2:	b200      	sxth	r0, r0
 80134a4:	f7ec fffe 	bl	80004a4 <__aeabi_i2d>
 80134a8:	a323      	add	r3, pc, #140	; (adr r3, 8013538 <incrementOctave+0x558>)
 80134aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134ae:	f7ed f85f 	bl	8000570 <__aeabi_dmul>
 80134b2:	f7ed fb55 	bl	8000b60 <__aeabi_d2f>
 80134b6:	4b30      	ldr	r3, [pc, #192]	; (8013578 <incrementOctave+0x598>)
 80134b8:	6018      	str	r0, [r3, #0]
		freq_11_inc = (NOTE_A5S / DAC_FREQ) * max_table_index;
 80134ba:	8820      	ldrh	r0, [r4, #0]
 80134bc:	b200      	sxth	r0, r0
 80134be:	f7ec fff1 	bl	80004a4 <__aeabi_i2d>
 80134c2:	a31f      	add	r3, pc, #124	; (adr r3, 8013540 <incrementOctave+0x560>)
 80134c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134c8:	f7ed f852 	bl	8000570 <__aeabi_dmul>
 80134cc:	f7ed fb48 	bl	8000b60 <__aeabi_d2f>
 80134d0:	4b2a      	ldr	r3, [pc, #168]	; (801357c <incrementOctave+0x59c>)
 80134d2:	6018      	str	r0, [r3, #0]
		freq_12_inc = (NOTE_B5 / DAC_FREQ) * max_table_index;
 80134d4:	8820      	ldrh	r0, [r4, #0]
 80134d6:	b200      	sxth	r0, r0
 80134d8:	f7ec ffe4 	bl	80004a4 <__aeabi_i2d>
 80134dc:	a31a      	add	r3, pc, #104	; (adr r3, 8013548 <incrementOctave+0x568>)
 80134de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134e2:	f7ed f845 	bl	8000570 <__aeabi_dmul>
 80134e6:	f7ed fb3b 	bl	8000b60 <__aeabi_d2f>
 80134ea:	4b25      	ldr	r3, [pc, #148]	; (8013580 <incrementOctave+0x5a0>)
 80134ec:	6018      	str	r0, [r3, #0]
 80134ee:	bd10      	pop	{r4, pc}
 80134f0:	0285157e 	.word	0x0285157e
 80134f4:	3f8aca5b 	.word	0x3f8aca5b
 80134f8:	45026890 	.word	0x45026890
 80134fc:	3f8c622c 	.word	0x3f8c622c
 8013500:	746455ec 	.word	0x746455ec
 8013504:	3f8e1240 	.word	0x3f8e1240
 8013508:	f3f60682 	.word	0xf3f60682
 801350c:	3f8fdc01 	.word	0x3f8fdc01
 8013510:	5a78f25a 	.word	0x5a78f25a
 8013514:	3f90e07e 	.word	0x3f90e07e
 8013518:	b7c4fdcc 	.word	0xb7c4fdcc
 801351c:	3f91e166 	.word	0x3f91e166
 8013520:	8770a22a 	.word	0x8770a22a
 8013524:	3f92f197 	.word	0x3f92f197
 8013528:	a2892c64 	.word	0xa2892c64
 801352c:	3f9411f6 	.word	0x3f9411f6
 8013530:	a9138a21 	.word	0xa9138a21
 8013534:	3f95437a 	.word	0x3f95437a
 8013538:	020c49ba 	.word	0x020c49ba
 801353c:	3f96872b 	.word	0x3f96872b
 8013540:	d2ea1d3f 	.word	0xd2ea1d3f
 8013544:	3f97de1a 	.word	0x3f97de1a
 8013548:	081b5775 	.word	0x081b5775
 801354c:	3f99496e 	.word	0x3f99496e
 8013550:	2000004e 	.word	0x2000004e
 8013554:	20005eac 	.word	0x20005eac
 8013558:	20007ae4 	.word	0x20007ae4
 801355c:	20006abc 	.word	0x20006abc
 8013560:	200076cc 	.word	0x200076cc
 8013564:	200076c8 	.word	0x200076c8
 8013568:	200072c0 	.word	0x200072c0
 801356c:	20006ab4 	.word	0x20006ab4
 8013570:	200086fc 	.word	0x200086fc
 8013574:	200072c4 	.word	0x200072c4
 8013578:	200082f0 	.word	0x200082f0
 801357c:	200076d8 	.word	0x200076d8
 8013580:	20007eec 	.word	0x20007eec
 8013584:	00000000 	.word	0x00000000

08013588 <decrementOctave>:
	}
}

void decrementOctave(void){
	if(octave == MIN_OCTAVE) return;
 8013588:	4b71      	ldr	r3, [pc, #452]	; (8013750 <decrementOctave+0x1c8>)
 801358a:	781a      	ldrb	r2, [r3, #0]
 801358c:	2a03      	cmp	r2, #3
 801358e:	f000 80af 	beq.w	80136f0 <decrementOctave+0x168>
void decrementOctave(void){
 8013592:	b510      	push	{r4, lr}
	else{
		octave--;
 8013594:	781a      	ldrb	r2, [r3, #0]
 8013596:	3a01      	subs	r2, #1
 8013598:	b2d2      	uxtb	r2, r2
 801359a:	701a      	strb	r2, [r3, #0]
		switchOctave(octave);
 801359c:	781a      	ldrb	r2, [r3, #0]
 801359e:	b2d2      	uxtb	r2, r2
	if(des_octave == 4){
 80135a0:	2a04      	cmp	r2, #4
	octave = des_octave;
 80135a2:	701a      	strb	r2, [r3, #0]
	if(des_octave == 4){
 80135a4:	f000 80f0 	beq.w	8013788 <decrementOctave+0x200>
	else if(des_octave == 5){
 80135a8:	2a05      	cmp	r2, #5
 80135aa:	f000 81d7 	beq.w	801395c <decrementOctave+0x3d4>
	else if(des_octave == 3){
 80135ae:	2a03      	cmp	r2, #3
 80135b0:	f040 809d 	bne.w	80136ee <decrementOctave+0x166>
		freq_1_inc = (NOTE_C3 / DAC_FREQ) * max_table_index;
 80135b4:	4c67      	ldr	r4, [pc, #412]	; (8013754 <decrementOctave+0x1cc>)
 80135b6:	8820      	ldrh	r0, [r4, #0]
 80135b8:	b200      	sxth	r0, r0
 80135ba:	f7ec ff73 	bl	80004a4 <__aeabi_i2d>
 80135be:	a34e      	add	r3, pc, #312	; (adr r3, 80136f8 <decrementOctave+0x170>)
 80135c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135c4:	f7ec ffd4 	bl	8000570 <__aeabi_dmul>
 80135c8:	f7ed faca 	bl	8000b60 <__aeabi_d2f>
 80135cc:	4b62      	ldr	r3, [pc, #392]	; (8013758 <decrementOctave+0x1d0>)
 80135ce:	6018      	str	r0, [r3, #0]
		freq_2_inc = (NOTE_C3S / DAC_FREQ) * max_table_index;
 80135d0:	8820      	ldrh	r0, [r4, #0]
 80135d2:	b200      	sxth	r0, r0
 80135d4:	f7ec ff66 	bl	80004a4 <__aeabi_i2d>
 80135d8:	a349      	add	r3, pc, #292	; (adr r3, 8013700 <decrementOctave+0x178>)
 80135da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135de:	f7ec ffc7 	bl	8000570 <__aeabi_dmul>
 80135e2:	f7ed fabd 	bl	8000b60 <__aeabi_d2f>
 80135e6:	4b5d      	ldr	r3, [pc, #372]	; (801375c <decrementOctave+0x1d4>)
 80135e8:	6018      	str	r0, [r3, #0]
		freq_3_inc = (NOTE_D3 / DAC_FREQ) * max_table_index;
 80135ea:	8820      	ldrh	r0, [r4, #0]
 80135ec:	b200      	sxth	r0, r0
 80135ee:	f7ec ff59 	bl	80004a4 <__aeabi_i2d>
 80135f2:	a345      	add	r3, pc, #276	; (adr r3, 8013708 <decrementOctave+0x180>)
 80135f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135f8:	f7ec ffba 	bl	8000570 <__aeabi_dmul>
 80135fc:	f7ed fab0 	bl	8000b60 <__aeabi_d2f>
 8013600:	4b57      	ldr	r3, [pc, #348]	; (8013760 <decrementOctave+0x1d8>)
 8013602:	6018      	str	r0, [r3, #0]
		freq_4_inc = (NOTE_D3S / DAC_FREQ) * max_table_index;
 8013604:	8820      	ldrh	r0, [r4, #0]
 8013606:	b200      	sxth	r0, r0
 8013608:	f7ec ff4c 	bl	80004a4 <__aeabi_i2d>
 801360c:	a340      	add	r3, pc, #256	; (adr r3, 8013710 <decrementOctave+0x188>)
 801360e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013612:	f7ec ffad 	bl	8000570 <__aeabi_dmul>
 8013616:	f7ed faa3 	bl	8000b60 <__aeabi_d2f>
 801361a:	4b52      	ldr	r3, [pc, #328]	; (8013764 <decrementOctave+0x1dc>)
 801361c:	6018      	str	r0, [r3, #0]
		freq_5_inc = (NOTE_E3 / DAC_FREQ) * max_table_index;
 801361e:	8820      	ldrh	r0, [r4, #0]
 8013620:	b200      	sxth	r0, r0
 8013622:	f7ec ff3f 	bl	80004a4 <__aeabi_i2d>
 8013626:	a33c      	add	r3, pc, #240	; (adr r3, 8013718 <decrementOctave+0x190>)
 8013628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801362c:	f7ec ffa0 	bl	8000570 <__aeabi_dmul>
 8013630:	f7ed fa96 	bl	8000b60 <__aeabi_d2f>
 8013634:	4b4c      	ldr	r3, [pc, #304]	; (8013768 <decrementOctave+0x1e0>)
 8013636:	6018      	str	r0, [r3, #0]
		freq_6_inc = (NOTE_F3 / DAC_FREQ) * max_table_index;
 8013638:	8820      	ldrh	r0, [r4, #0]
 801363a:	b200      	sxth	r0, r0
 801363c:	f7ec ff32 	bl	80004a4 <__aeabi_i2d>
 8013640:	a337      	add	r3, pc, #220	; (adr r3, 8013720 <decrementOctave+0x198>)
 8013642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013646:	f7ec ff93 	bl	8000570 <__aeabi_dmul>
 801364a:	f7ed fa89 	bl	8000b60 <__aeabi_d2f>
 801364e:	4b47      	ldr	r3, [pc, #284]	; (801376c <decrementOctave+0x1e4>)
 8013650:	6018      	str	r0, [r3, #0]
		freq_7_inc = (NOTE_F3S / DAC_FREQ) * max_table_index;
 8013652:	8820      	ldrh	r0, [r4, #0]
 8013654:	b200      	sxth	r0, r0
 8013656:	f7ec ff25 	bl	80004a4 <__aeabi_i2d>
 801365a:	a333      	add	r3, pc, #204	; (adr r3, 8013728 <decrementOctave+0x1a0>)
 801365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013660:	f7ec ff86 	bl	8000570 <__aeabi_dmul>
 8013664:	f7ed fa7c 	bl	8000b60 <__aeabi_d2f>
 8013668:	4b41      	ldr	r3, [pc, #260]	; (8013770 <decrementOctave+0x1e8>)
 801366a:	6018      	str	r0, [r3, #0]
		freq_8_inc = (NOTE_G3 / DAC_FREQ) * max_table_index;
 801366c:	8820      	ldrh	r0, [r4, #0]
 801366e:	b200      	sxth	r0, r0
 8013670:	f7ec ff18 	bl	80004a4 <__aeabi_i2d>
 8013674:	a32e      	add	r3, pc, #184	; (adr r3, 8013730 <decrementOctave+0x1a8>)
 8013676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801367a:	f7ec ff79 	bl	8000570 <__aeabi_dmul>
 801367e:	f7ed fa6f 	bl	8000b60 <__aeabi_d2f>
 8013682:	4b3c      	ldr	r3, [pc, #240]	; (8013774 <decrementOctave+0x1ec>)
 8013684:	6018      	str	r0, [r3, #0]
		freq_9_inc = (NOTE_G3S / DAC_FREQ) * max_table_index;
 8013686:	8820      	ldrh	r0, [r4, #0]
 8013688:	b200      	sxth	r0, r0
 801368a:	f7ec ff0b 	bl	80004a4 <__aeabi_i2d>
 801368e:	a32a      	add	r3, pc, #168	; (adr r3, 8013738 <decrementOctave+0x1b0>)
 8013690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013694:	f7ec ff6c 	bl	8000570 <__aeabi_dmul>
 8013698:	f7ed fa62 	bl	8000b60 <__aeabi_d2f>
 801369c:	4b36      	ldr	r3, [pc, #216]	; (8013778 <decrementOctave+0x1f0>)
 801369e:	6018      	str	r0, [r3, #0]
		freq_10_inc = (NOTE_A3 / DAC_FREQ) * max_table_index;
 80136a0:	8820      	ldrh	r0, [r4, #0]
 80136a2:	b200      	sxth	r0, r0
 80136a4:	f7ec fefe 	bl	80004a4 <__aeabi_i2d>
 80136a8:	a325      	add	r3, pc, #148	; (adr r3, 8013740 <decrementOctave+0x1b8>)
 80136aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136ae:	f7ec ff5f 	bl	8000570 <__aeabi_dmul>
 80136b2:	f7ed fa55 	bl	8000b60 <__aeabi_d2f>
 80136b6:	4b31      	ldr	r3, [pc, #196]	; (801377c <decrementOctave+0x1f4>)
 80136b8:	6018      	str	r0, [r3, #0]
		freq_11_inc = (NOTE_A3S / DAC_FREQ) * max_table_index;
 80136ba:	8820      	ldrh	r0, [r4, #0]
 80136bc:	b200      	sxth	r0, r0
 80136be:	f7ec fef1 	bl	80004a4 <__aeabi_i2d>
 80136c2:	a31d      	add	r3, pc, #116	; (adr r3, 8013738 <decrementOctave+0x1b0>)
 80136c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136c8:	f7ec ff52 	bl	8000570 <__aeabi_dmul>
 80136cc:	f7ed fa48 	bl	8000b60 <__aeabi_d2f>
 80136d0:	4b2b      	ldr	r3, [pc, #172]	; (8013780 <decrementOctave+0x1f8>)
 80136d2:	6018      	str	r0, [r3, #0]
		freq_12_inc = (NOTE_B3 / DAC_FREQ) * max_table_index;
 80136d4:	8820      	ldrh	r0, [r4, #0]
 80136d6:	b200      	sxth	r0, r0
 80136d8:	f7ec fee4 	bl	80004a4 <__aeabi_i2d>
 80136dc:	a31a      	add	r3, pc, #104	; (adr r3, 8013748 <decrementOctave+0x1c0>)
 80136de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136e2:	f7ec ff45 	bl	8000570 <__aeabi_dmul>
 80136e6:	f7ed fa3b 	bl	8000b60 <__aeabi_d2f>
 80136ea:	4b26      	ldr	r3, [pc, #152]	; (8013784 <decrementOctave+0x1fc>)
 80136ec:	6018      	str	r0, [r3, #0]
 80136ee:	bd10      	pop	{r4, pc}
 80136f0:	4770      	bx	lr
 80136f2:	bf00      	nop
 80136f4:	f3af 8000 	nop.w
 80136f8:	5d8368d5 	.word	0x5d8368d5
 80136fc:	3f6aca5e 	.word	0x3f6aca5e
 8013700:	ea041539 	.word	0xea041539
 8013704:	3f6c6228 	.word	0x3f6c6228
 8013708:	be67af3b 	.word	0xbe67af3b
 801370c:	3f6e1239 	.word	0x3f6e1239
 8013710:	3df95fd2 	.word	0x3df95fd2
 8013714:	3f6fdbfb 	.word	0x3f6fdbfb
 8013718:	07f81c06 	.word	0x07f81c06
 801371c:	3f70e080 	.word	0x3f70e080
 8013720:	b7c4fdcc 	.word	0xb7c4fdcc
 8013724:	3f71e166 	.word	0x3f71e166
 8013728:	d9f1787e 	.word	0xd9f1787e
 801372c:	3f72f195 	.word	0x3f72f195
 8013730:	50085610 	.word	0x50085610
 8013734:	3f7411f8 	.word	0x3f7411f8
 8013738:	fb946074 	.word	0xfb946074
 801373c:	3f754378 	.word	0x3f754378
 8013740:	020c49ba 	.word	0x020c49ba
 8013744:	3f76872b 	.word	0x3f76872b
 8013748:	b59a8120 	.word	0xb59a8120
 801374c:	3f79496f 	.word	0x3f79496f
 8013750:	20000050 	.word	0x20000050
 8013754:	2000004e 	.word	0x2000004e
 8013758:	20005eac 	.word	0x20005eac
 801375c:	20007ae4 	.word	0x20007ae4
 8013760:	20006abc 	.word	0x20006abc
 8013764:	200076cc 	.word	0x200076cc
 8013768:	200076c8 	.word	0x200076c8
 801376c:	200072c0 	.word	0x200072c0
 8013770:	20006ab4 	.word	0x20006ab4
 8013774:	200086fc 	.word	0x200086fc
 8013778:	200072c4 	.word	0x200072c4
 801377c:	200082f0 	.word	0x200082f0
 8013780:	200076d8 	.word	0x200076d8
 8013784:	20007eec 	.word	0x20007eec
		freq_1_inc = (NOTE_C4 / DAC_FREQ) * max_table_index;
 8013788:	4c67      	ldr	r4, [pc, #412]	; (8013928 <decrementOctave+0x3a0>)
 801378a:	8820      	ldrh	r0, [r4, #0]
 801378c:	b200      	sxth	r0, r0
 801378e:	f7ec fe89 	bl	80004a4 <__aeabi_i2d>
 8013792:	a34d      	add	r3, pc, #308	; (adr r3, 80138c8 <decrementOctave+0x340>)
 8013794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013798:	f7ec feea 	bl	8000570 <__aeabi_dmul>
 801379c:	f7ed f9e0 	bl	8000b60 <__aeabi_d2f>
 80137a0:	4b62      	ldr	r3, [pc, #392]	; (801392c <decrementOctave+0x3a4>)
 80137a2:	6018      	str	r0, [r3, #0]
		freq_2_inc = (NOTE_C4S / DAC_FREQ) * max_table_index;
 80137a4:	8820      	ldrh	r0, [r4, #0]
 80137a6:	b200      	sxth	r0, r0
 80137a8:	f7ec fe7c 	bl	80004a4 <__aeabi_i2d>
 80137ac:	a348      	add	r3, pc, #288	; (adr r3, 80138d0 <decrementOctave+0x348>)
 80137ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137b2:	f7ec fedd 	bl	8000570 <__aeabi_dmul>
 80137b6:	f7ed f9d3 	bl	8000b60 <__aeabi_d2f>
 80137ba:	4b5d      	ldr	r3, [pc, #372]	; (8013930 <decrementOctave+0x3a8>)
 80137bc:	6018      	str	r0, [r3, #0]
		freq_3_inc = (NOTE_D4 / DAC_FREQ) * max_table_index;
 80137be:	8820      	ldrh	r0, [r4, #0]
 80137c0:	b200      	sxth	r0, r0
 80137c2:	f7ec fe6f 	bl	80004a4 <__aeabi_i2d>
 80137c6:	a344      	add	r3, pc, #272	; (adr r3, 80138d8 <decrementOctave+0x350>)
 80137c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137cc:	f7ec fed0 	bl	8000570 <__aeabi_dmul>
 80137d0:	f7ed f9c6 	bl	8000b60 <__aeabi_d2f>
 80137d4:	4b57      	ldr	r3, [pc, #348]	; (8013934 <decrementOctave+0x3ac>)
 80137d6:	6018      	str	r0, [r3, #0]
		freq_4_inc = (NOTE_D4S / DAC_FREQ) * max_table_index;
 80137d8:	8820      	ldrh	r0, [r4, #0]
 80137da:	b200      	sxth	r0, r0
 80137dc:	f7ec fe62 	bl	80004a4 <__aeabi_i2d>
 80137e0:	a33f      	add	r3, pc, #252	; (adr r3, 80138e0 <decrementOctave+0x358>)
 80137e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137e6:	f7ec fec3 	bl	8000570 <__aeabi_dmul>
 80137ea:	f7ed f9b9 	bl	8000b60 <__aeabi_d2f>
 80137ee:	4b52      	ldr	r3, [pc, #328]	; (8013938 <decrementOctave+0x3b0>)
 80137f0:	6018      	str	r0, [r3, #0]
		freq_5_inc = (NOTE_E4 / DAC_FREQ) * max_table_index;
 80137f2:	8820      	ldrh	r0, [r4, #0]
 80137f4:	b200      	sxth	r0, r0
 80137f6:	f7ec fe55 	bl	80004a4 <__aeabi_i2d>
 80137fa:	a33b      	add	r3, pc, #236	; (adr r3, 80138e8 <decrementOctave+0x360>)
 80137fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013800:	f7ec feb6 	bl	8000570 <__aeabi_dmul>
 8013804:	f7ed f9ac 	bl	8000b60 <__aeabi_d2f>
 8013808:	4b4c      	ldr	r3, [pc, #304]	; (801393c <decrementOctave+0x3b4>)
 801380a:	6018      	str	r0, [r3, #0]
		freq_6_inc = (NOTE_F4 / DAC_FREQ) * max_table_index;
 801380c:	8820      	ldrh	r0, [r4, #0]
 801380e:	b200      	sxth	r0, r0
 8013810:	f7ec fe48 	bl	80004a4 <__aeabi_i2d>
 8013814:	a336      	add	r3, pc, #216	; (adr r3, 80138f0 <decrementOctave+0x368>)
 8013816:	e9d3 2300 	ldrd	r2, r3, [r3]
 801381a:	f7ec fea9 	bl	8000570 <__aeabi_dmul>
 801381e:	f7ed f99f 	bl	8000b60 <__aeabi_d2f>
 8013822:	4b47      	ldr	r3, [pc, #284]	; (8013940 <decrementOctave+0x3b8>)
 8013824:	6018      	str	r0, [r3, #0]
		freq_7_inc = (NOTE_F4S / DAC_FREQ) * max_table_index;
 8013826:	8820      	ldrh	r0, [r4, #0]
 8013828:	b200      	sxth	r0, r0
 801382a:	f7ec fe3b 	bl	80004a4 <__aeabi_i2d>
 801382e:	a332      	add	r3, pc, #200	; (adr r3, 80138f8 <decrementOctave+0x370>)
 8013830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013834:	f7ec fe9c 	bl	8000570 <__aeabi_dmul>
 8013838:	f7ed f992 	bl	8000b60 <__aeabi_d2f>
 801383c:	4b41      	ldr	r3, [pc, #260]	; (8013944 <decrementOctave+0x3bc>)
 801383e:	6018      	str	r0, [r3, #0]
		freq_8_inc = (NOTE_G4 / DAC_FREQ) * max_table_index;
 8013840:	8820      	ldrh	r0, [r4, #0]
 8013842:	b200      	sxth	r0, r0
 8013844:	f7ec fe2e 	bl	80004a4 <__aeabi_i2d>
 8013848:	a32d      	add	r3, pc, #180	; (adr r3, 8013900 <decrementOctave+0x378>)
 801384a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801384e:	f7ec fe8f 	bl	8000570 <__aeabi_dmul>
 8013852:	f7ed f985 	bl	8000b60 <__aeabi_d2f>
 8013856:	4b3c      	ldr	r3, [pc, #240]	; (8013948 <decrementOctave+0x3c0>)
 8013858:	6018      	str	r0, [r3, #0]
		freq_9_inc = (NOTE_G4S / DAC_FREQ) * max_table_index;
 801385a:	8820      	ldrh	r0, [r4, #0]
 801385c:	b200      	sxth	r0, r0
 801385e:	f7ec fe21 	bl	80004a4 <__aeabi_i2d>
 8013862:	a329      	add	r3, pc, #164	; (adr r3, 8013908 <decrementOctave+0x380>)
 8013864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013868:	f7ec fe82 	bl	8000570 <__aeabi_dmul>
 801386c:	f7ed f978 	bl	8000b60 <__aeabi_d2f>
 8013870:	4b36      	ldr	r3, [pc, #216]	; (801394c <decrementOctave+0x3c4>)
 8013872:	6018      	str	r0, [r3, #0]
		freq_10_inc = (NOTE_A4 / DAC_FREQ) * max_table_index;
 8013874:	8820      	ldrh	r0, [r4, #0]
 8013876:	b200      	sxth	r0, r0
 8013878:	f7ec fe14 	bl	80004a4 <__aeabi_i2d>
 801387c:	a324      	add	r3, pc, #144	; (adr r3, 8013910 <decrementOctave+0x388>)
 801387e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013882:	f7ec fe75 	bl	8000570 <__aeabi_dmul>
 8013886:	f7ed f96b 	bl	8000b60 <__aeabi_d2f>
 801388a:	4b31      	ldr	r3, [pc, #196]	; (8013950 <decrementOctave+0x3c8>)
 801388c:	6018      	str	r0, [r3, #0]
		freq_11_inc = (NOTE_A4S / DAC_FREQ) * max_table_index;
 801388e:	8820      	ldrh	r0, [r4, #0]
 8013890:	b200      	sxth	r0, r0
 8013892:	f7ec fe07 	bl	80004a4 <__aeabi_i2d>
 8013896:	a320      	add	r3, pc, #128	; (adr r3, 8013918 <decrementOctave+0x390>)
 8013898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801389c:	f7ec fe68 	bl	8000570 <__aeabi_dmul>
 80138a0:	f7ed f95e 	bl	8000b60 <__aeabi_d2f>
 80138a4:	4b2b      	ldr	r3, [pc, #172]	; (8013954 <decrementOctave+0x3cc>)
 80138a6:	6018      	str	r0, [r3, #0]
		freq_12_inc = (NOTE_B4 / DAC_FREQ) * max_table_index;
 80138a8:	8820      	ldrh	r0, [r4, #0]
 80138aa:	b200      	sxth	r0, r0
 80138ac:	f7ec fdfa 	bl	80004a4 <__aeabi_i2d>
 80138b0:	a31b      	add	r3, pc, #108	; (adr r3, 8013920 <decrementOctave+0x398>)
 80138b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138b6:	f7ec fe5b 	bl	8000570 <__aeabi_dmul>
 80138ba:	f7ed f951 	bl	8000b60 <__aeabi_d2f>
 80138be:	4b26      	ldr	r3, [pc, #152]	; (8013958 <decrementOctave+0x3d0>)
 80138c0:	6018      	str	r0, [r3, #0]
 80138c2:	bd10      	pop	{r4, pc}
 80138c4:	f3af 8000 	nop.w
 80138c8:	5d8368d5 	.word	0x5d8368d5
 80138cc:	3f7aca5e 	.word	0x3f7aca5e
 80138d0:	a000bbe7 	.word	0xa000bbe7
 80138d4:	3f7c622f 	.word	0x3f7c622f
 80138d8:	746455ec 	.word	0x746455ec
 80138dc:	3f7e1240 	.word	0x3f7e1240
 80138e0:	f3f60682 	.word	0xf3f60682
 80138e4:	3f7fdc01 	.word	0x3f7fdc01
 80138e8:	07f81c06 	.word	0x07f81c06
 80138ec:	3f80e080 	.word	0x3f80e080
 80138f0:	b7c4fdcc 	.word	0xb7c4fdcc
 80138f4:	3f81e166 	.word	0x3f81e166
 80138f8:	d9f1787e 	.word	0xd9f1787e
 80138fc:	3f82f195 	.word	0x3f82f195
 8013900:	f50a02b8 	.word	0xf50a02b8
 8013904:	3f8411f4 	.word	0x3f8411f4
 8013908:	5692b3cc 	.word	0x5692b3cc
 801390c:	3f85437c 	.word	0x3f85437c
 8013910:	020c49ba 	.word	0x020c49ba
 8013914:	3f86872b 	.word	0x3f86872b
 8013918:	d2ea1d3f 	.word	0xd2ea1d3f
 801391c:	3f87de1a 	.word	0x3f87de1a
 8013920:	5a9c2dc8 	.word	0x5a9c2dc8
 8013924:	3f89496c 	.word	0x3f89496c
 8013928:	2000004e 	.word	0x2000004e
 801392c:	20005eac 	.word	0x20005eac
 8013930:	20007ae4 	.word	0x20007ae4
 8013934:	20006abc 	.word	0x20006abc
 8013938:	200076cc 	.word	0x200076cc
 801393c:	200076c8 	.word	0x200076c8
 8013940:	200072c0 	.word	0x200072c0
 8013944:	20006ab4 	.word	0x20006ab4
 8013948:	200086fc 	.word	0x200086fc
 801394c:	200072c4 	.word	0x200072c4
 8013950:	200082f0 	.word	0x200082f0
 8013954:	200076d8 	.word	0x200076d8
 8013958:	20007eec 	.word	0x20007eec
		freq_1_inc = (NOTE_C5 / DAC_FREQ) * max_table_index;
 801395c:	4c66      	ldr	r4, [pc, #408]	; (8013af8 <decrementOctave+0x570>)
 801395e:	8820      	ldrh	r0, [r4, #0]
 8013960:	b200      	sxth	r0, r0
 8013962:	f7ec fd9f 	bl	80004a4 <__aeabi_i2d>
 8013966:	a34c      	add	r3, pc, #304	; (adr r3, 8013a98 <decrementOctave+0x510>)
 8013968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801396c:	f7ec fe00 	bl	8000570 <__aeabi_dmul>
 8013970:	f7ed f8f6 	bl	8000b60 <__aeabi_d2f>
 8013974:	4b61      	ldr	r3, [pc, #388]	; (8013afc <decrementOctave+0x574>)
 8013976:	6018      	str	r0, [r3, #0]
		freq_2_inc = (NOTE_C5S / DAC_FREQ) * max_table_index;
 8013978:	8820      	ldrh	r0, [r4, #0]
 801397a:	b200      	sxth	r0, r0
 801397c:	f7ec fd92 	bl	80004a4 <__aeabi_i2d>
 8013980:	a347      	add	r3, pc, #284	; (adr r3, 8013aa0 <decrementOctave+0x518>)
 8013982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013986:	f7ec fdf3 	bl	8000570 <__aeabi_dmul>
 801398a:	f7ed f8e9 	bl	8000b60 <__aeabi_d2f>
 801398e:	4b5c      	ldr	r3, [pc, #368]	; (8013b00 <decrementOctave+0x578>)
 8013990:	6018      	str	r0, [r3, #0]
		freq_3_inc = (NOTE_D5 / DAC_FREQ) * max_table_index;
 8013992:	8820      	ldrh	r0, [r4, #0]
 8013994:	b200      	sxth	r0, r0
 8013996:	f7ec fd85 	bl	80004a4 <__aeabi_i2d>
 801399a:	a343      	add	r3, pc, #268	; (adr r3, 8013aa8 <decrementOctave+0x520>)
 801399c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139a0:	f7ec fde6 	bl	8000570 <__aeabi_dmul>
 80139a4:	f7ed f8dc 	bl	8000b60 <__aeabi_d2f>
 80139a8:	4b56      	ldr	r3, [pc, #344]	; (8013b04 <decrementOctave+0x57c>)
 80139aa:	6018      	str	r0, [r3, #0]
		freq_4_inc = (NOTE_D5S / DAC_FREQ) * max_table_index;
 80139ac:	8820      	ldrh	r0, [r4, #0]
 80139ae:	b200      	sxth	r0, r0
 80139b0:	f7ec fd78 	bl	80004a4 <__aeabi_i2d>
 80139b4:	a33e      	add	r3, pc, #248	; (adr r3, 8013ab0 <decrementOctave+0x528>)
 80139b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ba:	f7ec fdd9 	bl	8000570 <__aeabi_dmul>
 80139be:	f7ed f8cf 	bl	8000b60 <__aeabi_d2f>
 80139c2:	4b51      	ldr	r3, [pc, #324]	; (8013b08 <decrementOctave+0x580>)
 80139c4:	6018      	str	r0, [r3, #0]
		freq_5_inc = (NOTE_E5 / DAC_FREQ) * max_table_index;
 80139c6:	8820      	ldrh	r0, [r4, #0]
 80139c8:	b200      	sxth	r0, r0
 80139ca:	f7ec fd6b 	bl	80004a4 <__aeabi_i2d>
 80139ce:	a33a      	add	r3, pc, #232	; (adr r3, 8013ab8 <decrementOctave+0x530>)
 80139d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139d4:	f7ec fdcc 	bl	8000570 <__aeabi_dmul>
 80139d8:	f7ed f8c2 	bl	8000b60 <__aeabi_d2f>
 80139dc:	4b4b      	ldr	r3, [pc, #300]	; (8013b0c <decrementOctave+0x584>)
 80139de:	6018      	str	r0, [r3, #0]
		freq_6_inc = (NOTE_F5 / DAC_FREQ) * max_table_index;
 80139e0:	8820      	ldrh	r0, [r4, #0]
 80139e2:	b200      	sxth	r0, r0
 80139e4:	f7ec fd5e 	bl	80004a4 <__aeabi_i2d>
 80139e8:	a335      	add	r3, pc, #212	; (adr r3, 8013ac0 <decrementOctave+0x538>)
 80139ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ee:	f7ec fdbf 	bl	8000570 <__aeabi_dmul>
 80139f2:	f7ed f8b5 	bl	8000b60 <__aeabi_d2f>
 80139f6:	4b46      	ldr	r3, [pc, #280]	; (8013b10 <decrementOctave+0x588>)
 80139f8:	6018      	str	r0, [r3, #0]
		freq_7_inc = (NOTE_F5S / DAC_FREQ) * max_table_index;
 80139fa:	8820      	ldrh	r0, [r4, #0]
 80139fc:	b200      	sxth	r0, r0
 80139fe:	f7ec fd51 	bl	80004a4 <__aeabi_i2d>
 8013a02:	a331      	add	r3, pc, #196	; (adr r3, 8013ac8 <decrementOctave+0x540>)
 8013a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a08:	f7ec fdb2 	bl	8000570 <__aeabi_dmul>
 8013a0c:	f7ed f8a8 	bl	8000b60 <__aeabi_d2f>
 8013a10:	4b40      	ldr	r3, [pc, #256]	; (8013b14 <decrementOctave+0x58c>)
 8013a12:	6018      	str	r0, [r3, #0]
		freq_8_inc = (NOTE_G5 / DAC_FREQ) * max_table_index;
 8013a14:	8820      	ldrh	r0, [r4, #0]
 8013a16:	b200      	sxth	r0, r0
 8013a18:	f7ec fd44 	bl	80004a4 <__aeabi_i2d>
 8013a1c:	a32c      	add	r3, pc, #176	; (adr r3, 8013ad0 <decrementOctave+0x548>)
 8013a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a22:	f7ec fda5 	bl	8000570 <__aeabi_dmul>
 8013a26:	f7ed f89b 	bl	8000b60 <__aeabi_d2f>
 8013a2a:	4b3b      	ldr	r3, [pc, #236]	; (8013b18 <decrementOctave+0x590>)
 8013a2c:	6018      	str	r0, [r3, #0]
		freq_9_inc = (NOTE_G5S / DAC_FREQ) * max_table_index;
 8013a2e:	8820      	ldrh	r0, [r4, #0]
 8013a30:	b200      	sxth	r0, r0
 8013a32:	f7ec fd37 	bl	80004a4 <__aeabi_i2d>
 8013a36:	a328      	add	r3, pc, #160	; (adr r3, 8013ad8 <decrementOctave+0x550>)
 8013a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a3c:	f7ec fd98 	bl	8000570 <__aeabi_dmul>
 8013a40:	f7ed f88e 	bl	8000b60 <__aeabi_d2f>
 8013a44:	4b35      	ldr	r3, [pc, #212]	; (8013b1c <decrementOctave+0x594>)
 8013a46:	6018      	str	r0, [r3, #0]
		freq_10_inc = (NOTE_A5 / DAC_FREQ) * max_table_index;
 8013a48:	8820      	ldrh	r0, [r4, #0]
 8013a4a:	b200      	sxth	r0, r0
 8013a4c:	f7ec fd2a 	bl	80004a4 <__aeabi_i2d>
 8013a50:	a323      	add	r3, pc, #140	; (adr r3, 8013ae0 <decrementOctave+0x558>)
 8013a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a56:	f7ec fd8b 	bl	8000570 <__aeabi_dmul>
 8013a5a:	f7ed f881 	bl	8000b60 <__aeabi_d2f>
 8013a5e:	4b30      	ldr	r3, [pc, #192]	; (8013b20 <decrementOctave+0x598>)
 8013a60:	6018      	str	r0, [r3, #0]
		freq_11_inc = (NOTE_A5S / DAC_FREQ) * max_table_index;
 8013a62:	8820      	ldrh	r0, [r4, #0]
 8013a64:	b200      	sxth	r0, r0
 8013a66:	f7ec fd1d 	bl	80004a4 <__aeabi_i2d>
 8013a6a:	a31f      	add	r3, pc, #124	; (adr r3, 8013ae8 <decrementOctave+0x560>)
 8013a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a70:	f7ec fd7e 	bl	8000570 <__aeabi_dmul>
 8013a74:	f7ed f874 	bl	8000b60 <__aeabi_d2f>
 8013a78:	4b2a      	ldr	r3, [pc, #168]	; (8013b24 <decrementOctave+0x59c>)
 8013a7a:	6018      	str	r0, [r3, #0]
		freq_12_inc = (NOTE_B5 / DAC_FREQ) * max_table_index;
 8013a7c:	8820      	ldrh	r0, [r4, #0]
 8013a7e:	b200      	sxth	r0, r0
 8013a80:	f7ec fd10 	bl	80004a4 <__aeabi_i2d>
 8013a84:	a31a      	add	r3, pc, #104	; (adr r3, 8013af0 <decrementOctave+0x568>)
 8013a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a8a:	f7ec fd71 	bl	8000570 <__aeabi_dmul>
 8013a8e:	f7ed f867 	bl	8000b60 <__aeabi_d2f>
 8013a92:	4b25      	ldr	r3, [pc, #148]	; (8013b28 <decrementOctave+0x5a0>)
 8013a94:	6018      	str	r0, [r3, #0]
 8013a96:	bd10      	pop	{r4, pc}
 8013a98:	0285157e 	.word	0x0285157e
 8013a9c:	3f8aca5b 	.word	0x3f8aca5b
 8013aa0:	45026890 	.word	0x45026890
 8013aa4:	3f8c622c 	.word	0x3f8c622c
 8013aa8:	746455ec 	.word	0x746455ec
 8013aac:	3f8e1240 	.word	0x3f8e1240
 8013ab0:	f3f60682 	.word	0xf3f60682
 8013ab4:	3f8fdc01 	.word	0x3f8fdc01
 8013ab8:	5a78f25a 	.word	0x5a78f25a
 8013abc:	3f90e07e 	.word	0x3f90e07e
 8013ac0:	b7c4fdcc 	.word	0xb7c4fdcc
 8013ac4:	3f91e166 	.word	0x3f91e166
 8013ac8:	8770a22a 	.word	0x8770a22a
 8013acc:	3f92f197 	.word	0x3f92f197
 8013ad0:	a2892c64 	.word	0xa2892c64
 8013ad4:	3f9411f6 	.word	0x3f9411f6
 8013ad8:	a9138a21 	.word	0xa9138a21
 8013adc:	3f95437a 	.word	0x3f95437a
 8013ae0:	020c49ba 	.word	0x020c49ba
 8013ae4:	3f96872b 	.word	0x3f96872b
 8013ae8:	d2ea1d3f 	.word	0xd2ea1d3f
 8013aec:	3f97de1a 	.word	0x3f97de1a
 8013af0:	081b5775 	.word	0x081b5775
 8013af4:	3f99496e 	.word	0x3f99496e
 8013af8:	2000004e 	.word	0x2000004e
 8013afc:	20005eac 	.word	0x20005eac
 8013b00:	20007ae4 	.word	0x20007ae4
 8013b04:	20006abc 	.word	0x20006abc
 8013b08:	200076cc 	.word	0x200076cc
 8013b0c:	200076c8 	.word	0x200076c8
 8013b10:	200072c0 	.word	0x200072c0
 8013b14:	20006ab4 	.word	0x20006ab4
 8013b18:	200086fc 	.word	0x200086fc
 8013b1c:	200072c4 	.word	0x200072c4
 8013b20:	200082f0 	.word	0x200082f0
 8013b24:	200076d8 	.word	0x200076d8
 8013b28:	20007eec 	.word	0x20007eec

08013b2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8013b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8013b64 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8013b30:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8013b32:	e003      	b.n	8013b3c <LoopCopyDataInit>

08013b34 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8013b34:	4b0c      	ldr	r3, [pc, #48]	; (8013b68 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8013b36:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8013b38:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8013b3a:	3104      	adds	r1, #4

08013b3c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8013b3c:	480b      	ldr	r0, [pc, #44]	; (8013b6c <LoopForever+0xa>)
	ldr	r3, =_edata
 8013b3e:	4b0c      	ldr	r3, [pc, #48]	; (8013b70 <LoopForever+0xe>)
	adds	r2, r0, r1
 8013b40:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8013b42:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8013b44:	d3f6      	bcc.n	8013b34 <CopyDataInit>
	ldr	r2, =_sbss
 8013b46:	4a0b      	ldr	r2, [pc, #44]	; (8013b74 <LoopForever+0x12>)
	b	LoopFillZerobss
 8013b48:	e002      	b.n	8013b50 <LoopFillZerobss>

08013b4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8013b4a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8013b4c:	f842 3b04 	str.w	r3, [r2], #4

08013b50 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8013b50:	4b09      	ldr	r3, [pc, #36]	; (8013b78 <LoopForever+0x16>)
	cmp	r2, r3
 8013b52:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8013b54:	d3f9      	bcc.n	8013b4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8013b56:	f7fd fca1 	bl	801149c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8013b5a:	f000 f993 	bl	8013e84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8013b5e:	f7fc fea7 	bl	80108b0 <main>

08013b62 <LoopForever>:

LoopForever:
    b LoopForever
 8013b62:	e7fe      	b.n	8013b62 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8013b64:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8013b68:	08017afc 	.word	0x08017afc
	ldr	r0, =_sdata
 8013b6c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8013b70:	200000b8 	.word	0x200000b8
	ldr	r2, =_sbss
 8013b74:	200000b8 	.word	0x200000b8
	ldr	r3, = _ebss
 8013b78:	20008704 	.word	0x20008704

08013b7c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8013b7c:	e7fe      	b.n	8013b7c <ADC1_IRQHandler>
	...

08013b80 <arm_biquad_cascade_df1_q15>:
 8013b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b84:	b08b      	sub	sp, #44	; 0x2c
 8013b86:	f990 800c 	ldrsb.w	r8, [r0, #12]
 8013b8a:	6885      	ldr	r5, [r0, #8]
 8013b8c:	6844      	ldr	r4, [r0, #4]
 8013b8e:	f990 0000 	ldrsb.w	r0, [r0]
 8013b92:	9004      	str	r0, [sp, #16]
 8013b94:	0858      	lsrs	r0, r3, #1
 8013b96:	f003 0301 	and.w	r3, r3, #1
 8013b9a:	9006      	str	r0, [sp, #24]
 8013b9c:	9307      	str	r3, [sp, #28]
 8013b9e:	0080      	lsls	r0, r0, #2
 8013ba0:	4613      	mov	r3, r2
 8013ba2:	4403      	add	r3, r0
 8013ba4:	9309      	str	r3, [sp, #36]	; 0x24
 8013ba6:	f105 030c 	add.w	r3, r5, #12
 8013baa:	f1c8 080f 	rsb	r8, r8, #15
 8013bae:	9303      	str	r3, [sp, #12]
 8013bb0:	f104 0308 	add.w	r3, r4, #8
 8013bb4:	9205      	str	r2, [sp, #20]
 8013bb6:	9008      	str	r0, [sp, #32]
 8013bb8:	9101      	str	r1, [sp, #4]
 8013bba:	f1c8 0a20 	rsb	sl, r8, #32
 8013bbe:	9302      	str	r3, [sp, #8]
 8013bc0:	9a03      	ldr	r2, [sp, #12]
 8013bc2:	9902      	ldr	r1, [sp, #8]
 8013bc4:	f852 5c0c 	ldr.w	r5, [r2, #-12]
 8013bc8:	f852 4c08 	ldr.w	r4, [r2, #-8]
 8013bcc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8013bd0:	e911 000c 	ldmdb	r1, {r2, r3}
 8013bd4:	9906      	ldr	r1, [sp, #24]
 8013bd6:	2900      	cmp	r1, #0
 8013bd8:	d074      	beq.n	8013cc4 <arm_biquad_cascade_df1_q15+0x144>
 8013bda:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8013bde:	f8dd c014 	ldr.w	ip, [sp, #20]
 8013be2:	468e      	mov	lr, r1
 8013be4:	4693      	mov	fp, r2
 8013be6:	4619      	mov	r1, r3
 8013be8:	f859 6b04 	ldr.w	r6, [r9], #4
 8013bec:	fb25 f706 	smuad	r7, r5, r6
 8013bf0:	17fb      	asrs	r3, r7, #31
 8013bf2:	461a      	mov	r2, r3
 8013bf4:	463b      	mov	r3, r7
 8013bf6:	fbc4 32cb 	smlald	r3, r2, r4, fp
 8013bfa:	4617      	mov	r7, r2
 8013bfc:	fbc0 37c1 	smlald	r3, r7, r0, r1
 8013c00:	fa07 f70a 	lsl.w	r7, r7, sl
 8013c04:	fa23 f308 	lsr.w	r3, r3, r8
 8013c08:	431f      	orrs	r7, r3
 8013c0a:	b2b2      	uxth	r2, r6
 8013c0c:	f307 070f 	ssat	r7, #16, r7
 8013c10:	b2bf      	uxth	r7, r7
 8013c12:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8013c16:	ea42 4b0b 	orr.w	fp, r2, fp, lsl #16
 8013c1a:	fb25 f116 	smuadx	r1, r5, r6
 8013c1e:	17cb      	asrs	r3, r1, #31
 8013c20:	fbc4 13cb 	smlald	r1, r3, r4, fp
 8013c24:	fbc0 13c7 	smlald	r1, r3, r0, r7
 8013c28:	fa21 f108 	lsr.w	r1, r1, r8
 8013c2c:	fa03 f30a 	lsl.w	r3, r3, sl
 8013c30:	b2ba      	uxth	r2, r7
 8013c32:	430b      	orrs	r3, r1
 8013c34:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
 8013c38:	f303 030f 	ssat	r3, #16, r3
 8013c3c:	f1be 0e01 	subs.w	lr, lr, #1
 8013c40:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8013c44:	b299      	uxth	r1, r3
 8013c46:	ea4b 4b16 	orr.w	fp, fp, r6, lsr #16
 8013c4a:	f84c 2b04 	str.w	r2, [ip], #4
 8013c4e:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8013c52:	d1c9      	bne.n	8013be8 <arm_biquad_cascade_df1_q15+0x68>
 8013c54:	460b      	mov	r3, r1
 8013c56:	9e08      	ldr	r6, [sp, #32]
 8013c58:	9901      	ldr	r1, [sp, #4]
 8013c5a:	4431      	add	r1, r6
 8013c5c:	9101      	str	r1, [sp, #4]
 8013c5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013c60:	465a      	mov	r2, fp
 8013c62:	9e07      	ldr	r6, [sp, #28]
 8013c64:	b1d6      	cbz	r6, 8013c9c <arm_biquad_cascade_df1_q15+0x11c>
 8013c66:	9e01      	ldr	r6, [sp, #4]
 8013c68:	f9b6 e000 	ldrsh.w	lr, [r6]
 8013c6c:	fb25 f50e 	smuad	r5, r5, lr
 8013c70:	17ef      	asrs	r7, r5, #31
 8013c72:	463e      	mov	r6, r7
 8013c74:	fbc4 56c2 	smlald	r5, r6, r4, r2
 8013c78:	fbc0 56c3 	smlald	r5, r6, r0, r3
 8013c7c:	fa06 f60a 	lsl.w	r6, r6, sl
 8013c80:	fa25 f508 	lsr.w	r5, r5, r8
 8013c84:	ea46 0005 	orr.w	r0, r6, r5
 8013c88:	fa1f fe8e 	uxth.w	lr, lr
 8013c8c:	f300 000f 	ssat	r0, #16, r0
 8013c90:	b284      	uxth	r4, r0
 8013c92:	8008      	strh	r0, [r1, #0]
 8013c94:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8013c98:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 8013c9c:	9802      	ldr	r0, [sp, #8]
 8013c9e:	f840 3c04 	str.w	r3, [r0, #-4]
 8013ca2:	9b03      	ldr	r3, [sp, #12]
 8013ca4:	f840 2c08 	str.w	r2, [r0, #-8]
 8013ca8:	330c      	adds	r3, #12
 8013caa:	9303      	str	r3, [sp, #12]
 8013cac:	f100 0308 	add.w	r3, r0, #8
 8013cb0:	9302      	str	r3, [sp, #8]
 8013cb2:	9b05      	ldr	r3, [sp, #20]
 8013cb4:	9301      	str	r3, [sp, #4]
 8013cb6:	9b04      	ldr	r3, [sp, #16]
 8013cb8:	3b01      	subs	r3, #1
 8013cba:	9304      	str	r3, [sp, #16]
 8013cbc:	d180      	bne.n	8013bc0 <arm_biquad_cascade_df1_q15+0x40>
 8013cbe:	b00b      	add	sp, #44	; 0x2c
 8013cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cc4:	9905      	ldr	r1, [sp, #20]
 8013cc6:	e7cc      	b.n	8013c62 <arm_biquad_cascade_df1_q15+0xe2>

08013cc8 <arm_biquad_cascade_df1_init_q15>:
 8013cc8:	b538      	push	{r3, r4, r5, lr}
 8013cca:	461d      	mov	r5, r3
 8013ccc:	4604      	mov	r4, r0
 8013cce:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 8013cd2:	6082      	str	r2, [r0, #8]
 8013cd4:	7001      	strb	r1, [r0, #0]
 8013cd6:	00ca      	lsls	r2, r1, #3
 8013cd8:	7303      	strb	r3, [r0, #12]
 8013cda:	2100      	movs	r1, #0
 8013cdc:	4628      	mov	r0, r5
 8013cde:	f000 f900 	bl	8013ee2 <memset>
 8013ce2:	6065      	str	r5, [r4, #4]
 8013ce4:	bd38      	pop	{r3, r4, r5, pc}
 8013ce6:	bf00      	nop

08013ce8 <arm_shift_q15>:
 8013ce8:	2900      	cmp	r1, #0
 8013cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cee:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8013cf2:	da3d      	bge.n	8013d70 <arm_shift_q15+0x88>
 8013cf4:	f1be 0f00 	cmp.w	lr, #0
 8013cf8:	d02b      	beq.n	8013d52 <arm_shift_q15+0x6a>
 8013cfa:	f1c1 0c00 	rsb	ip, r1, #0
 8013cfe:	f100 0608 	add.w	r6, r0, #8
 8013d02:	f102 0708 	add.w	r7, r2, #8
 8013d06:	46f0      	mov	r8, lr
 8013d08:	f936 5c08 	ldrsh.w	r5, [r6, #-8]
 8013d0c:	f936 4c06 	ldrsh.w	r4, [r6, #-6]
 8013d10:	fa45 f50c 	asr.w	r5, r5, ip
 8013d14:	b2ad      	uxth	r5, r5
 8013d16:	fa44 f40c 	asr.w	r4, r4, ip
 8013d1a:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8013d1e:	f847 4c08 	str.w	r4, [r7, #-8]
 8013d22:	f936 5c04 	ldrsh.w	r5, [r6, #-4]
 8013d26:	f936 4c02 	ldrsh.w	r4, [r6, #-2]
 8013d2a:	fa45 f50c 	asr.w	r5, r5, ip
 8013d2e:	b2ad      	uxth	r5, r5
 8013d30:	fa44 f40c 	asr.w	r4, r4, ip
 8013d34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8013d38:	f1b8 0801 	subs.w	r8, r8, #1
 8013d3c:	f847 4c04 	str.w	r4, [r7, #-4]
 8013d40:	f106 0608 	add.w	r6, r6, #8
 8013d44:	f107 0708 	add.w	r7, r7, #8
 8013d48:	d1de      	bne.n	8013d08 <arm_shift_q15+0x20>
 8013d4a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8013d4e:	4470      	add	r0, lr
 8013d50:	4472      	add	r2, lr
 8013d52:	f013 0303 	ands.w	r3, r3, #3
 8013d56:	d009      	beq.n	8013d6c <arm_shift_q15+0x84>
 8013d58:	4249      	negs	r1, r1
 8013d5a:	3a02      	subs	r2, #2
 8013d5c:	f930 4b02 	ldrsh.w	r4, [r0], #2
 8013d60:	3b01      	subs	r3, #1
 8013d62:	fa44 f401 	asr.w	r4, r4, r1
 8013d66:	f822 4f02 	strh.w	r4, [r2, #2]!
 8013d6a:	d1f7      	bne.n	8013d5c <arm_shift_q15+0x74>
 8013d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d70:	f1be 0f00 	cmp.w	lr, #0
 8013d74:	d02f      	beq.n	8013dd6 <arm_shift_q15+0xee>
 8013d76:	f100 0608 	add.w	r6, r0, #8
 8013d7a:	f102 0708 	add.w	r7, r2, #8
 8013d7e:	46f4      	mov	ip, lr
 8013d80:	f936 4c08 	ldrsh.w	r4, [r6, #-8]
 8013d84:	f936 8c06 	ldrsh.w	r8, [r6, #-6]
 8013d88:	408c      	lsls	r4, r1
 8013d8a:	f304 040f 	ssat	r4, #16, r4
 8013d8e:	b2a5      	uxth	r5, r4
 8013d90:	fa08 f401 	lsl.w	r4, r8, r1
 8013d94:	f304 040f 	ssat	r4, #16, r4
 8013d98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8013d9c:	f847 4c08 	str.w	r4, [r7, #-8]
 8013da0:	f936 4c04 	ldrsh.w	r4, [r6, #-4]
 8013da4:	f936 8c02 	ldrsh.w	r8, [r6, #-2]
 8013da8:	408c      	lsls	r4, r1
 8013daa:	f304 040f 	ssat	r4, #16, r4
 8013dae:	b2a5      	uxth	r5, r4
 8013db0:	f1bc 0c01 	subs.w	ip, ip, #1
 8013db4:	fa08 f401 	lsl.w	r4, r8, r1
 8013db8:	f304 040f 	ssat	r4, #16, r4
 8013dbc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8013dc0:	f847 4c04 	str.w	r4, [r7, #-4]
 8013dc4:	f106 0608 	add.w	r6, r6, #8
 8013dc8:	f107 0708 	add.w	r7, r7, #8
 8013dcc:	d1d8      	bne.n	8013d80 <arm_shift_q15+0x98>
 8013dce:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8013dd2:	4470      	add	r0, lr
 8013dd4:	4472      	add	r2, lr
 8013dd6:	f013 0303 	ands.w	r3, r3, #3
 8013dda:	d0c7      	beq.n	8013d6c <arm_shift_q15+0x84>
 8013ddc:	3a02      	subs	r2, #2
 8013dde:	f930 4b02 	ldrsh.w	r4, [r0], #2
 8013de2:	3b01      	subs	r3, #1
 8013de4:	fa04 f401 	lsl.w	r4, r4, r1
 8013de8:	f304 040f 	ssat	r4, #16, r4
 8013dec:	f822 4f02 	strh.w	r4, [r2, #2]!
 8013df0:	d1f5      	bne.n	8013dde <arm_shift_q15+0xf6>
 8013df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013df6:	bf00      	nop

08013df8 <arm_dot_prod_f32>:
 8013df8:	b4f0      	push	{r4, r5, r6, r7}
 8013dfa:	0897      	lsrs	r7, r2, #2
 8013dfc:	eddf 5a20 	vldr	s11, [pc, #128]	; 8013e80 <arm_dot_prod_f32+0x88>
 8013e00:	d02d      	beq.n	8013e5e <arm_dot_prod_f32+0x66>
 8013e02:	f100 0510 	add.w	r5, r0, #16
 8013e06:	f101 0410 	add.w	r4, r1, #16
 8013e0a:	463e      	mov	r6, r7
 8013e0c:	ed54 7a04 	vldr	s15, [r4, #-16]
 8013e10:	ed15 6a04 	vldr	s12, [r5, #-16]
 8013e14:	ed55 6a03 	vldr	s13, [r5, #-12]
 8013e18:	ed54 3a03 	vldr	s7, [r4, #-12]
 8013e1c:	ed15 7a02 	vldr	s14, [r5, #-8]
 8013e20:	ed14 4a02 	vldr	s8, [r4, #-8]
 8013e24:	ed15 5a01 	vldr	s10, [r5, #-4]
 8013e28:	ed54 4a01 	vldr	s9, [r4, #-4]
 8013e2c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8013e30:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8013e34:	ee76 7a25 	vadd.f32	s15, s12, s11
 8013e38:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013e3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013e40:	ee65 5a24 	vmul.f32	s11, s10, s9
 8013e44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013e48:	3e01      	subs	r6, #1
 8013e4a:	f105 0510 	add.w	r5, r5, #16
 8013e4e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8013e52:	f104 0410 	add.w	r4, r4, #16
 8013e56:	d1d9      	bne.n	8013e0c <arm_dot_prod_f32+0x14>
 8013e58:	013f      	lsls	r7, r7, #4
 8013e5a:	4438      	add	r0, r7
 8013e5c:	4439      	add	r1, r7
 8013e5e:	f012 0203 	ands.w	r2, r2, #3
 8013e62:	d009      	beq.n	8013e78 <arm_dot_prod_f32+0x80>
 8013e64:	ecf0 7a01 	vldmia	r0!, {s15}
 8013e68:	ecb1 7a01 	vldmia	r1!, {s14}
 8013e6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013e70:	3a01      	subs	r2, #1
 8013e72:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8013e76:	d1f5      	bne.n	8013e64 <arm_dot_prod_f32+0x6c>
 8013e78:	edc3 5a00 	vstr	s11, [r3]
 8013e7c:	bcf0      	pop	{r4, r5, r6, r7}
 8013e7e:	4770      	bx	lr
 8013e80:	00000000 	.word	0x00000000

08013e84 <__libc_init_array>:
 8013e84:	b570      	push	{r4, r5, r6, lr}
 8013e86:	4e0d      	ldr	r6, [pc, #52]	; (8013ebc <__libc_init_array+0x38>)
 8013e88:	4c0d      	ldr	r4, [pc, #52]	; (8013ec0 <__libc_init_array+0x3c>)
 8013e8a:	1ba4      	subs	r4, r4, r6
 8013e8c:	10a4      	asrs	r4, r4, #2
 8013e8e:	2500      	movs	r5, #0
 8013e90:	42a5      	cmp	r5, r4
 8013e92:	d109      	bne.n	8013ea8 <__libc_init_array+0x24>
 8013e94:	4e0b      	ldr	r6, [pc, #44]	; (8013ec4 <__libc_init_array+0x40>)
 8013e96:	4c0c      	ldr	r4, [pc, #48]	; (8013ec8 <__libc_init_array+0x44>)
 8013e98:	f000 faf0 	bl	801447c <_init>
 8013e9c:	1ba4      	subs	r4, r4, r6
 8013e9e:	10a4      	asrs	r4, r4, #2
 8013ea0:	2500      	movs	r5, #0
 8013ea2:	42a5      	cmp	r5, r4
 8013ea4:	d105      	bne.n	8013eb2 <__libc_init_array+0x2e>
 8013ea6:	bd70      	pop	{r4, r5, r6, pc}
 8013ea8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013eac:	4798      	blx	r3
 8013eae:	3501      	adds	r5, #1
 8013eb0:	e7ee      	b.n	8013e90 <__libc_init_array+0xc>
 8013eb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013eb6:	4798      	blx	r3
 8013eb8:	3501      	adds	r5, #1
 8013eba:	e7f2      	b.n	8013ea2 <__libc_init_array+0x1e>
 8013ebc:	08017af4 	.word	0x08017af4
 8013ec0:	08017af4 	.word	0x08017af4
 8013ec4:	08017af4 	.word	0x08017af4
 8013ec8:	08017af8 	.word	0x08017af8

08013ecc <memcpy>:
 8013ecc:	b510      	push	{r4, lr}
 8013ece:	1e43      	subs	r3, r0, #1
 8013ed0:	440a      	add	r2, r1
 8013ed2:	4291      	cmp	r1, r2
 8013ed4:	d100      	bne.n	8013ed8 <memcpy+0xc>
 8013ed6:	bd10      	pop	{r4, pc}
 8013ed8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013edc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013ee0:	e7f7      	b.n	8013ed2 <memcpy+0x6>

08013ee2 <memset>:
 8013ee2:	4402      	add	r2, r0
 8013ee4:	4603      	mov	r3, r0
 8013ee6:	4293      	cmp	r3, r2
 8013ee8:	d100      	bne.n	8013eec <memset+0xa>
 8013eea:	4770      	bx	lr
 8013eec:	f803 1b01 	strb.w	r1, [r3], #1
 8013ef0:	e7f9      	b.n	8013ee6 <memset+0x4>

08013ef2 <strncpy>:
 8013ef2:	b570      	push	{r4, r5, r6, lr}
 8013ef4:	4604      	mov	r4, r0
 8013ef6:	b902      	cbnz	r2, 8013efa <strncpy+0x8>
 8013ef8:	bd70      	pop	{r4, r5, r6, pc}
 8013efa:	4623      	mov	r3, r4
 8013efc:	f811 5b01 	ldrb.w	r5, [r1], #1
 8013f00:	f803 5b01 	strb.w	r5, [r3], #1
 8013f04:	1e56      	subs	r6, r2, #1
 8013f06:	b91d      	cbnz	r5, 8013f10 <strncpy+0x1e>
 8013f08:	4414      	add	r4, r2
 8013f0a:	42a3      	cmp	r3, r4
 8013f0c:	d103      	bne.n	8013f16 <strncpy+0x24>
 8013f0e:	bd70      	pop	{r4, r5, r6, pc}
 8013f10:	461c      	mov	r4, r3
 8013f12:	4632      	mov	r2, r6
 8013f14:	e7ef      	b.n	8013ef6 <strncpy+0x4>
 8013f16:	f803 5b01 	strb.w	r5, [r3], #1
 8013f1a:	e7f6      	b.n	8013f0a <strncpy+0x18>

08013f1c <round>:
 8013f1c:	ec51 0b10 	vmov	r0, r1, d0
 8013f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f22:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8013f26:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8013f2a:	2c13      	cmp	r4, #19
 8013f2c:	460b      	mov	r3, r1
 8013f2e:	460f      	mov	r7, r1
 8013f30:	dc17      	bgt.n	8013f62 <round+0x46>
 8013f32:	2c00      	cmp	r4, #0
 8013f34:	da09      	bge.n	8013f4a <round+0x2e>
 8013f36:	3401      	adds	r4, #1
 8013f38:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8013f3c:	d103      	bne.n	8013f46 <round+0x2a>
 8013f3e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8013f42:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013f46:	2100      	movs	r1, #0
 8013f48:	e028      	b.n	8013f9c <round+0x80>
 8013f4a:	4a16      	ldr	r2, [pc, #88]	; (8013fa4 <round+0x88>)
 8013f4c:	4122      	asrs	r2, r4
 8013f4e:	4211      	tst	r1, r2
 8013f50:	d100      	bne.n	8013f54 <round+0x38>
 8013f52:	b180      	cbz	r0, 8013f76 <round+0x5a>
 8013f54:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013f58:	4123      	asrs	r3, r4
 8013f5a:	443b      	add	r3, r7
 8013f5c:	ea23 0302 	bic.w	r3, r3, r2
 8013f60:	e7f1      	b.n	8013f46 <round+0x2a>
 8013f62:	2c33      	cmp	r4, #51	; 0x33
 8013f64:	dd0a      	ble.n	8013f7c <round+0x60>
 8013f66:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8013f6a:	d104      	bne.n	8013f76 <round+0x5a>
 8013f6c:	ee10 2a10 	vmov	r2, s0
 8013f70:	460b      	mov	r3, r1
 8013f72:	f7ec f94b 	bl	800020c <__adddf3>
 8013f76:	ec41 0b10 	vmov	d0, r0, r1
 8013f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f7c:	f2a5 4213 	subw	r2, r5, #1043	; 0x413
 8013f80:	f04f 35ff 	mov.w	r5, #4294967295
 8013f84:	40d5      	lsrs	r5, r2
 8013f86:	4228      	tst	r0, r5
 8013f88:	d0f5      	beq.n	8013f76 <round+0x5a>
 8013f8a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8013f8e:	2201      	movs	r2, #1
 8013f90:	40a2      	lsls	r2, r4
 8013f92:	1812      	adds	r2, r2, r0
 8013f94:	bf28      	it	cs
 8013f96:	3301      	addcs	r3, #1
 8013f98:	ea22 0105 	bic.w	r1, r2, r5
 8013f9c:	4608      	mov	r0, r1
 8013f9e:	4619      	mov	r1, r3
 8013fa0:	e7e9      	b.n	8013f76 <round+0x5a>
 8013fa2:	bf00      	nop
 8013fa4:	000fffff 	.word	0x000fffff

08013fa8 <sqrt>:
 8013fa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013fac:	ed2d 8b02 	vpush	{d8}
 8013fb0:	b08b      	sub	sp, #44	; 0x2c
 8013fb2:	ec55 4b10 	vmov	r4, r5, d0
 8013fb6:	f000 f8cb 	bl	8014150 <__ieee754_sqrt>
 8013fba:	4b26      	ldr	r3, [pc, #152]	; (8014054 <sqrt+0xac>)
 8013fbc:	eeb0 8a40 	vmov.f32	s16, s0
 8013fc0:	eef0 8a60 	vmov.f32	s17, s1
 8013fc4:	f993 6000 	ldrsb.w	r6, [r3]
 8013fc8:	1c73      	adds	r3, r6, #1
 8013fca:	d02a      	beq.n	8014022 <sqrt+0x7a>
 8013fcc:	4622      	mov	r2, r4
 8013fce:	462b      	mov	r3, r5
 8013fd0:	4620      	mov	r0, r4
 8013fd2:	4629      	mov	r1, r5
 8013fd4:	f7ec fd66 	bl	8000aa4 <__aeabi_dcmpun>
 8013fd8:	4607      	mov	r7, r0
 8013fda:	bb10      	cbnz	r0, 8014022 <sqrt+0x7a>
 8013fdc:	f04f 0800 	mov.w	r8, #0
 8013fe0:	f04f 0900 	mov.w	r9, #0
 8013fe4:	4642      	mov	r2, r8
 8013fe6:	464b      	mov	r3, r9
 8013fe8:	4620      	mov	r0, r4
 8013fea:	4629      	mov	r1, r5
 8013fec:	f7ec fd32 	bl	8000a54 <__aeabi_dcmplt>
 8013ff0:	b1b8      	cbz	r0, 8014022 <sqrt+0x7a>
 8013ff2:	2301      	movs	r3, #1
 8013ff4:	9300      	str	r3, [sp, #0]
 8013ff6:	4b18      	ldr	r3, [pc, #96]	; (8014058 <sqrt+0xb0>)
 8013ff8:	9301      	str	r3, [sp, #4]
 8013ffa:	9708      	str	r7, [sp, #32]
 8013ffc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8014000:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8014004:	b9b6      	cbnz	r6, 8014034 <sqrt+0x8c>
 8014006:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801400a:	4668      	mov	r0, sp
 801400c:	f000 fa24 	bl	8014458 <matherr>
 8014010:	b1d0      	cbz	r0, 8014048 <sqrt+0xa0>
 8014012:	9b08      	ldr	r3, [sp, #32]
 8014014:	b11b      	cbz	r3, 801401e <sqrt+0x76>
 8014016:	f000 fa2b 	bl	8014470 <__errno>
 801401a:	9b08      	ldr	r3, [sp, #32]
 801401c:	6003      	str	r3, [r0, #0]
 801401e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8014022:	eeb0 0a48 	vmov.f32	s0, s16
 8014026:	eef0 0a68 	vmov.f32	s1, s17
 801402a:	b00b      	add	sp, #44	; 0x2c
 801402c:	ecbd 8b02 	vpop	{d8}
 8014030:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014034:	4642      	mov	r2, r8
 8014036:	464b      	mov	r3, r9
 8014038:	4640      	mov	r0, r8
 801403a:	4649      	mov	r1, r9
 801403c:	f7ec fbc2 	bl	80007c4 <__aeabi_ddiv>
 8014040:	2e02      	cmp	r6, #2
 8014042:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014046:	d1e0      	bne.n	801400a <sqrt+0x62>
 8014048:	f000 fa12 	bl	8014470 <__errno>
 801404c:	2321      	movs	r3, #33	; 0x21
 801404e:	6003      	str	r3, [r0, #0]
 8014050:	e7df      	b.n	8014012 <sqrt+0x6a>
 8014052:	bf00      	nop
 8014054:	20000052 	.word	0x20000052
 8014058:	08017ac8 	.word	0x08017ac8

0801405c <expf>:
 801405c:	b530      	push	{r4, r5, lr}
 801405e:	ed2d 8b02 	vpush	{d8}
 8014062:	4d35      	ldr	r5, [pc, #212]	; (8014138 <expf+0xdc>)
 8014064:	b08b      	sub	sp, #44	; 0x2c
 8014066:	eeb0 8a40 	vmov.f32	s16, s0
 801406a:	f000 f921 	bl	80142b0 <__ieee754_expf>
 801406e:	f995 3000 	ldrsb.w	r3, [r5]
 8014072:	3301      	adds	r3, #1
 8014074:	ee10 4a10 	vmov	r4, s0
 8014078:	d030      	beq.n	80140dc <expf+0x80>
 801407a:	eeb0 0a48 	vmov.f32	s0, s16
 801407e:	f000 f9ed 	bl	801445c <finitef>
 8014082:	b358      	cbz	r0, 80140dc <expf+0x80>
 8014084:	eddf 7a2d 	vldr	s15, [pc, #180]	; 801413c <expf+0xe0>
 8014088:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801408c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014090:	dd35      	ble.n	80140fe <expf+0xa2>
 8014092:	2303      	movs	r3, #3
 8014094:	9300      	str	r3, [sp, #0]
 8014096:	4b2a      	ldr	r3, [pc, #168]	; (8014140 <expf+0xe4>)
 8014098:	9301      	str	r3, [sp, #4]
 801409a:	ee18 0a10 	vmov	r0, s16
 801409e:	2300      	movs	r3, #0
 80140a0:	9308      	str	r3, [sp, #32]
 80140a2:	f7ec fa11 	bl	80004c8 <__aeabi_f2d>
 80140a6:	f995 3000 	ldrsb.w	r3, [r5]
 80140aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80140ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80140b2:	b9cb      	cbnz	r3, 80140e8 <expf+0x8c>
 80140b4:	4b23      	ldr	r3, [pc, #140]	; (8014144 <expf+0xe8>)
 80140b6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80140ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80140be:	4668      	mov	r0, sp
 80140c0:	f000 f9ca 	bl	8014458 <matherr>
 80140c4:	b1b0      	cbz	r0, 80140f4 <expf+0x98>
 80140c6:	9b08      	ldr	r3, [sp, #32]
 80140c8:	b11b      	cbz	r3, 80140d2 <expf+0x76>
 80140ca:	f000 f9d1 	bl	8014470 <__errno>
 80140ce:	9b08      	ldr	r3, [sp, #32]
 80140d0:	6003      	str	r3, [r0, #0]
 80140d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80140d6:	f7ec fd43 	bl	8000b60 <__aeabi_d2f>
 80140da:	4604      	mov	r4, r0
 80140dc:	ee00 4a10 	vmov	s0, r4
 80140e0:	b00b      	add	sp, #44	; 0x2c
 80140e2:	ecbd 8b02 	vpop	{d8}
 80140e6:	bd30      	pop	{r4, r5, pc}
 80140e8:	4917      	ldr	r1, [pc, #92]	; (8014148 <expf+0xec>)
 80140ea:	2000      	movs	r0, #0
 80140ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80140f0:	2b02      	cmp	r3, #2
 80140f2:	d1e4      	bne.n	80140be <expf+0x62>
 80140f4:	f000 f9bc 	bl	8014470 <__errno>
 80140f8:	2322      	movs	r3, #34	; 0x22
 80140fa:	6003      	str	r3, [r0, #0]
 80140fc:	e7e3      	b.n	80140c6 <expf+0x6a>
 80140fe:	eddf 7a13 	vldr	s15, [pc, #76]	; 801414c <expf+0xf0>
 8014102:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801410a:	d5e7      	bpl.n	80140dc <expf+0x80>
 801410c:	2304      	movs	r3, #4
 801410e:	9300      	str	r3, [sp, #0]
 8014110:	4b0b      	ldr	r3, [pc, #44]	; (8014140 <expf+0xe4>)
 8014112:	9301      	str	r3, [sp, #4]
 8014114:	ee18 0a10 	vmov	r0, s16
 8014118:	2300      	movs	r3, #0
 801411a:	9308      	str	r3, [sp, #32]
 801411c:	f7ec f9d4 	bl	80004c8 <__aeabi_f2d>
 8014120:	2300      	movs	r3, #0
 8014122:	2200      	movs	r2, #0
 8014124:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014128:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801412c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014130:	f995 3000 	ldrsb.w	r3, [r5]
 8014134:	e7dc      	b.n	80140f0 <expf+0x94>
 8014136:	bf00      	nop
 8014138:	20000052 	.word	0x20000052
 801413c:	42b17180 	.word	0x42b17180
 8014140:	08017acd 	.word	0x08017acd
 8014144:	47efffff 	.word	0x47efffff
 8014148:	7ff00000 	.word	0x7ff00000
 801414c:	c2cff1b5 	.word	0xc2cff1b5

08014150 <__ieee754_sqrt>:
 8014150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014154:	ec55 4b10 	vmov	r4, r5, d0
 8014158:	4e54      	ldr	r6, [pc, #336]	; (80142ac <__ieee754_sqrt+0x15c>)
 801415a:	43ae      	bics	r6, r5
 801415c:	ee10 0a10 	vmov	r0, s0
 8014160:	462b      	mov	r3, r5
 8014162:	462a      	mov	r2, r5
 8014164:	4621      	mov	r1, r4
 8014166:	d113      	bne.n	8014190 <__ieee754_sqrt+0x40>
 8014168:	ee10 2a10 	vmov	r2, s0
 801416c:	462b      	mov	r3, r5
 801416e:	ee10 0a10 	vmov	r0, s0
 8014172:	4629      	mov	r1, r5
 8014174:	f7ec f9fc 	bl	8000570 <__aeabi_dmul>
 8014178:	4602      	mov	r2, r0
 801417a:	460b      	mov	r3, r1
 801417c:	4620      	mov	r0, r4
 801417e:	4629      	mov	r1, r5
 8014180:	f7ec f844 	bl	800020c <__adddf3>
 8014184:	4604      	mov	r4, r0
 8014186:	460d      	mov	r5, r1
 8014188:	ec45 4b10 	vmov	d0, r4, r5
 801418c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014190:	2d00      	cmp	r5, #0
 8014192:	dc10      	bgt.n	80141b6 <__ieee754_sqrt+0x66>
 8014194:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014198:	4330      	orrs	r0, r6
 801419a:	d0f5      	beq.n	8014188 <__ieee754_sqrt+0x38>
 801419c:	b15d      	cbz	r5, 80141b6 <__ieee754_sqrt+0x66>
 801419e:	ee10 2a10 	vmov	r2, s0
 80141a2:	462b      	mov	r3, r5
 80141a4:	4620      	mov	r0, r4
 80141a6:	4629      	mov	r1, r5
 80141a8:	f7ec f82e 	bl	8000208 <__aeabi_dsub>
 80141ac:	4602      	mov	r2, r0
 80141ae:	460b      	mov	r3, r1
 80141b0:	f7ec fb08 	bl	80007c4 <__aeabi_ddiv>
 80141b4:	e7e6      	b.n	8014184 <__ieee754_sqrt+0x34>
 80141b6:	151b      	asrs	r3, r3, #20
 80141b8:	d10c      	bne.n	80141d4 <__ieee754_sqrt+0x84>
 80141ba:	2a00      	cmp	r2, #0
 80141bc:	d06d      	beq.n	801429a <__ieee754_sqrt+0x14a>
 80141be:	2000      	movs	r0, #0
 80141c0:	02d6      	lsls	r6, r2, #11
 80141c2:	d56e      	bpl.n	80142a2 <__ieee754_sqrt+0x152>
 80141c4:	1e44      	subs	r4, r0, #1
 80141c6:	1b1b      	subs	r3, r3, r4
 80141c8:	f1c0 0420 	rsb	r4, r0, #32
 80141cc:	fa21 f404 	lsr.w	r4, r1, r4
 80141d0:	4322      	orrs	r2, r4
 80141d2:	4081      	lsls	r1, r0
 80141d4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80141d8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80141dc:	07dd      	lsls	r5, r3, #31
 80141de:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80141e2:	bf42      	ittt	mi
 80141e4:	0052      	lslmi	r2, r2, #1
 80141e6:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 80141ea:	0049      	lslmi	r1, r1, #1
 80141ec:	1058      	asrs	r0, r3, #1
 80141ee:	2500      	movs	r5, #0
 80141f0:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 80141f4:	441a      	add	r2, r3
 80141f6:	0049      	lsls	r1, r1, #1
 80141f8:	2316      	movs	r3, #22
 80141fa:	462c      	mov	r4, r5
 80141fc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8014200:	19a7      	adds	r7, r4, r6
 8014202:	4297      	cmp	r7, r2
 8014204:	bfde      	ittt	le
 8014206:	1bd2      	suble	r2, r2, r7
 8014208:	19bc      	addle	r4, r7, r6
 801420a:	19ad      	addle	r5, r5, r6
 801420c:	0052      	lsls	r2, r2, #1
 801420e:	3b01      	subs	r3, #1
 8014210:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8014214:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8014218:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801421c:	d1f0      	bne.n	8014200 <__ieee754_sqrt+0xb0>
 801421e:	f04f 0e20 	mov.w	lr, #32
 8014222:	469c      	mov	ip, r3
 8014224:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8014228:	42a2      	cmp	r2, r4
 801422a:	eb06 070c 	add.w	r7, r6, ip
 801422e:	dc02      	bgt.n	8014236 <__ieee754_sqrt+0xe6>
 8014230:	d112      	bne.n	8014258 <__ieee754_sqrt+0x108>
 8014232:	428f      	cmp	r7, r1
 8014234:	d810      	bhi.n	8014258 <__ieee754_sqrt+0x108>
 8014236:	2f00      	cmp	r7, #0
 8014238:	eb07 0c06 	add.w	ip, r7, r6
 801423c:	da34      	bge.n	80142a8 <__ieee754_sqrt+0x158>
 801423e:	f1bc 0f00 	cmp.w	ip, #0
 8014242:	db31      	blt.n	80142a8 <__ieee754_sqrt+0x158>
 8014244:	f104 0801 	add.w	r8, r4, #1
 8014248:	1b12      	subs	r2, r2, r4
 801424a:	428f      	cmp	r7, r1
 801424c:	bf88      	it	hi
 801424e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8014252:	1bc9      	subs	r1, r1, r7
 8014254:	4433      	add	r3, r6
 8014256:	4644      	mov	r4, r8
 8014258:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 801425c:	f1be 0e01 	subs.w	lr, lr, #1
 8014260:	443a      	add	r2, r7
 8014262:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8014266:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801426a:	d1dd      	bne.n	8014228 <__ieee754_sqrt+0xd8>
 801426c:	430a      	orrs	r2, r1
 801426e:	d006      	beq.n	801427e <__ieee754_sqrt+0x12e>
 8014270:	1c5c      	adds	r4, r3, #1
 8014272:	bf13      	iteet	ne
 8014274:	3301      	addne	r3, #1
 8014276:	3501      	addeq	r5, #1
 8014278:	4673      	moveq	r3, lr
 801427a:	f023 0301 	bicne.w	r3, r3, #1
 801427e:	106a      	asrs	r2, r5, #1
 8014280:	085b      	lsrs	r3, r3, #1
 8014282:	07e9      	lsls	r1, r5, #31
 8014284:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8014288:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801428c:	bf48      	it	mi
 801428e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8014292:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8014296:	461c      	mov	r4, r3
 8014298:	e776      	b.n	8014188 <__ieee754_sqrt+0x38>
 801429a:	0aca      	lsrs	r2, r1, #11
 801429c:	3b15      	subs	r3, #21
 801429e:	0549      	lsls	r1, r1, #21
 80142a0:	e78b      	b.n	80141ba <__ieee754_sqrt+0x6a>
 80142a2:	0052      	lsls	r2, r2, #1
 80142a4:	3001      	adds	r0, #1
 80142a6:	e78b      	b.n	80141c0 <__ieee754_sqrt+0x70>
 80142a8:	46a0      	mov	r8, r4
 80142aa:	e7cd      	b.n	8014248 <__ieee754_sqrt+0xf8>
 80142ac:	7ff00000 	.word	0x7ff00000

080142b0 <__ieee754_expf>:
 80142b0:	ee10 2a10 	vmov	r2, s0
 80142b4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80142b8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80142bc:	d902      	bls.n	80142c4 <__ieee754_expf+0x14>
 80142be:	ee30 0a00 	vadd.f32	s0, s0, s0
 80142c2:	4770      	bx	lr
 80142c4:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 80142c8:	d106      	bne.n	80142d8 <__ieee754_expf+0x28>
 80142ca:	eddf 7a51 	vldr	s15, [pc, #324]	; 8014410 <__ieee754_expf+0x160>
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	bf18      	it	ne
 80142d2:	eeb0 0a67 	vmovne.f32	s0, s15
 80142d6:	4770      	bx	lr
 80142d8:	484e      	ldr	r0, [pc, #312]	; (8014414 <__ieee754_expf+0x164>)
 80142da:	4282      	cmp	r2, r0
 80142dc:	dd04      	ble.n	80142e8 <__ieee754_expf+0x38>
 80142de:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8014418 <__ieee754_expf+0x168>
 80142e2:	ee20 0a00 	vmul.f32	s0, s0, s0
 80142e6:	4770      	bx	lr
 80142e8:	2a00      	cmp	r2, #0
 80142ea:	da03      	bge.n	80142f4 <__ieee754_expf+0x44>
 80142ec:	4a4b      	ldr	r2, [pc, #300]	; (801441c <__ieee754_expf+0x16c>)
 80142ee:	4291      	cmp	r1, r2
 80142f0:	f200 808a 	bhi.w	8014408 <__ieee754_expf+0x158>
 80142f4:	4a4a      	ldr	r2, [pc, #296]	; (8014420 <__ieee754_expf+0x170>)
 80142f6:	4291      	cmp	r1, r2
 80142f8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80142fc:	d954      	bls.n	80143a8 <__ieee754_expf+0xf8>
 80142fe:	4a49      	ldr	r2, [pc, #292]	; (8014424 <__ieee754_expf+0x174>)
 8014300:	4291      	cmp	r1, r2
 8014302:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8014306:	d836      	bhi.n	8014376 <__ieee754_expf+0xc6>
 8014308:	4947      	ldr	r1, [pc, #284]	; (8014428 <__ieee754_expf+0x178>)
 801430a:	4411      	add	r1, r2
 801430c:	ed91 7a00 	vldr	s14, [r1]
 8014310:	4946      	ldr	r1, [pc, #280]	; (801442c <__ieee754_expf+0x17c>)
 8014312:	440a      	add	r2, r1
 8014314:	edd2 7a00 	vldr	s15, [r2]
 8014318:	ee30 7a47 	vsub.f32	s14, s0, s14
 801431c:	f1c3 0201 	rsb	r2, r3, #1
 8014320:	1ad2      	subs	r2, r2, r3
 8014322:	ee37 0a67 	vsub.f32	s0, s14, s15
 8014326:	ee60 6a00 	vmul.f32	s13, s0, s0
 801432a:	eddf 5a41 	vldr	s11, [pc, #260]	; 8014430 <__ieee754_expf+0x180>
 801432e:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8014434 <__ieee754_expf+0x184>
 8014332:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8014336:	eddf 5a40 	vldr	s11, [pc, #256]	; 8014438 <__ieee754_expf+0x188>
 801433a:	eee6 5a85 	vfma.f32	s11, s13, s10
 801433e:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 801443c <__ieee754_expf+0x18c>
 8014342:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8014346:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8014440 <__ieee754_expf+0x190>
 801434a:	eee6 5a85 	vfma.f32	s11, s13, s10
 801434e:	eeb0 5a40 	vmov.f32	s10, s0
 8014352:	eea6 5ae5 	vfms.f32	s10, s13, s11
 8014356:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 801435a:	eef0 6a45 	vmov.f32	s13, s10
 801435e:	ee20 5a05 	vmul.f32	s10, s0, s10
 8014362:	bb92      	cbnz	r2, 80143ca <__ieee754_expf+0x11a>
 8014364:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8014368:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801436c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8014370:	ee36 0a40 	vsub.f32	s0, s12, s0
 8014374:	4770      	bx	lr
 8014376:	4b33      	ldr	r3, [pc, #204]	; (8014444 <__ieee754_expf+0x194>)
 8014378:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8014448 <__ieee754_expf+0x198>
 801437c:	4413      	add	r3, r2
 801437e:	edd3 7a00 	vldr	s15, [r3]
 8014382:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014386:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801444c <__ieee754_expf+0x19c>
 801438a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801438e:	ee17 2a90 	vmov	r2, s15
 8014392:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014396:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801439a:	eeb0 7a40 	vmov.f32	s14, s0
 801439e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8014450 <__ieee754_expf+0x1a0>
 80143a2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80143a6:	e7bc      	b.n	8014322 <__ieee754_expf+0x72>
 80143a8:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 80143ac:	d20b      	bcs.n	80143c6 <__ieee754_expf+0x116>
 80143ae:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8014418 <__ieee754_expf+0x168>
 80143b2:	ee70 6a26 	vadd.f32	s13, s0, s13
 80143b6:	eef4 6ac6 	vcmpe.f32	s13, s12
 80143ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143be:	dd02      	ble.n	80143c6 <__ieee754_expf+0x116>
 80143c0:	ee30 0a06 	vadd.f32	s0, s0, s12
 80143c4:	4770      	bx	lr
 80143c6:	2200      	movs	r2, #0
 80143c8:	e7ad      	b.n	8014326 <__ieee754_expf+0x76>
 80143ca:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80143ce:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80143d2:	ee85 0a26 	vdiv.f32	s0, s10, s13
 80143d6:	bfb8      	it	lt
 80143d8:	3264      	addlt	r2, #100	; 0x64
 80143da:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80143de:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80143e2:	ee76 7a40 	vsub.f32	s15, s12, s0
 80143e6:	ee17 3a90 	vmov	r3, s15
 80143ea:	bfab      	itete	ge
 80143ec:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80143f0:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80143f4:	ee00 3a10 	vmovge	s0, r3
 80143f8:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8014454 <__ieee754_expf+0x1a4>
 80143fc:	bfbc      	itt	lt
 80143fe:	ee00 3a10 	vmovlt	s0, r3
 8014402:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8014406:	4770      	bx	lr
 8014408:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014410 <__ieee754_expf+0x160>
 801440c:	4770      	bx	lr
 801440e:	bf00      	nop
 8014410:	00000000 	.word	0x00000000
 8014414:	42b17217 	.word	0x42b17217
 8014418:	7149f2ca 	.word	0x7149f2ca
 801441c:	42cff1b5 	.word	0x42cff1b5
 8014420:	3eb17218 	.word	0x3eb17218
 8014424:	3f851591 	.word	0x3f851591
 8014428:	08017adc 	.word	0x08017adc
 801442c:	08017ae4 	.word	0x08017ae4
 8014430:	3331bb4c 	.word	0x3331bb4c
 8014434:	b5ddea0e 	.word	0xb5ddea0e
 8014438:	388ab355 	.word	0x388ab355
 801443c:	bb360b61 	.word	0xbb360b61
 8014440:	3e2aaaab 	.word	0x3e2aaaab
 8014444:	08017ad4 	.word	0x08017ad4
 8014448:	3fb8aa3b 	.word	0x3fb8aa3b
 801444c:	3f317180 	.word	0x3f317180
 8014450:	3717f7d1 	.word	0x3717f7d1
 8014454:	0d800000 	.word	0x0d800000

08014458 <matherr>:
 8014458:	2000      	movs	r0, #0
 801445a:	4770      	bx	lr

0801445c <finitef>:
 801445c:	ee10 3a10 	vmov	r3, s0
 8014460:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8014464:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8014468:	bfac      	ite	ge
 801446a:	2000      	movge	r0, #0
 801446c:	2001      	movlt	r0, #1
 801446e:	4770      	bx	lr

08014470 <__errno>:
 8014470:	4b01      	ldr	r3, [pc, #4]	; (8014478 <__errno+0x8>)
 8014472:	6818      	ldr	r0, [r3, #0]
 8014474:	4770      	bx	lr
 8014476:	bf00      	nop
 8014478:	20000054 	.word	0x20000054

0801447c <_init>:
 801447c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801447e:	bf00      	nop
 8014480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014482:	bc08      	pop	{r3}
 8014484:	469e      	mov	lr, r3
 8014486:	4770      	bx	lr

08014488 <_fini>:
 8014488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801448a:	bf00      	nop
 801448c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801448e:	bc08      	pop	{r3}
 8014490:	469e      	mov	lr, r3
 8014492:	4770      	bx	lr
