
cd_synth_v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012a48  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ed8  08012c08  08012c08  00022c08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013ae0  08013ae0  00023ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013ae8  08013ae8  00023ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08013aec  08013aec  00023aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000c0  20000000  08013af0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00008668  200000c0  08013bb0  000300c0  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20008728  08013bb0  00038728  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00065f25  00000000  00000000  000300f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009380  00000000  00000000  00096015  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00028fb4  00000000  00000000  0009f395  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00003030  00000000  00000000  000c8350  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00003210  00000000  00000000  000cb380  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0003d822  00000000  00000000  000ce590  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0002d908  00000000  00000000  0010bdb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00157ce8  00000000  00000000  001396ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      000000ea  00000000  00000000  002913a2  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008da4  00000000  00000000  0029148c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000c0 	.word	0x200000c0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08012bf0 	.word	0x08012bf0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000c4 	.word	0x200000c4
 80001fc:	08012bf0 	.word	0x08012bf0

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033e:	f1a4 0401 	sub.w	r4, r4, #1
 8000342:	d1e9      	bne.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f092 0f00 	teq	r2, #0
 80004ea:	bf14      	ite	ne
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000500:	e720      	b.n	8000344 <__adddf3+0x138>
 8000502:	bf00      	nop

08000504 <__aeabi_ul2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	e00a      	b.n	800052a <__aeabi_l2d+0x16>

08000514 <__aeabi_l2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000522:	d502      	bpl.n	800052a <__aeabi_l2d+0x16>
 8000524:	4240      	negs	r0, r0
 8000526:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800052e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000532:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000536:	f43f aedc 	beq.w	80002f2 <__adddf3+0xe6>
 800053a:	f04f 0203 	mov.w	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000552:	f1c2 0320 	rsb	r3, r2, #32
 8000556:	fa00 fc03 	lsl.w	ip, r0, r3
 800055a:	fa20 f002 	lsr.w	r0, r0, r2
 800055e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000562:	ea40 000e 	orr.w	r0, r0, lr
 8000566:	fa21 f102 	lsr.w	r1, r1, r2
 800056a:	4414      	add	r4, r2
 800056c:	e6c1      	b.n	80002f2 <__adddf3+0xe6>
 800056e:	bf00      	nop

08000570 <__aeabi_dmul>:
 8000570:	b570      	push	{r4, r5, r6, lr}
 8000572:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000576:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800057a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800057e:	bf1d      	ittte	ne
 8000580:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000584:	ea94 0f0c 	teqne	r4, ip
 8000588:	ea95 0f0c 	teqne	r5, ip
 800058c:	f000 f8de 	bleq	800074c <__aeabi_dmul+0x1dc>
 8000590:	442c      	add	r4, r5
 8000592:	ea81 0603 	eor.w	r6, r1, r3
 8000596:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800059a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800059e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005a2:	bf18      	it	ne
 80005a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b0:	d038      	beq.n	8000624 <__aeabi_dmul+0xb4>
 80005b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005c6:	f04f 0600 	mov.w	r6, #0
 80005ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ce:	f09c 0f00 	teq	ip, #0
 80005d2:	bf18      	it	ne
 80005d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e4:	d204      	bcs.n	80005f0 <__aeabi_dmul+0x80>
 80005e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ea:	416d      	adcs	r5, r5
 80005ec:	eb46 0606 	adc.w	r6, r6, r6
 80005f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000600:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000604:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000608:	bf88      	it	hi
 800060a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800060e:	d81e      	bhi.n	800064e <__aeabi_dmul+0xde>
 8000610:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000614:	bf08      	it	eq
 8000616:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800061a:	f150 0000 	adcs.w	r0, r0, #0
 800061e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000628:	ea46 0101 	orr.w	r1, r6, r1
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	ea81 0103 	eor.w	r1, r1, r3
 8000634:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000638:	bfc2      	ittt	gt
 800063a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800063e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000642:	bd70      	popgt	{r4, r5, r6, pc}
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f04f 0e00 	mov.w	lr, #0
 800064c:	3c01      	subs	r4, #1
 800064e:	f300 80ab 	bgt.w	80007a8 <__aeabi_dmul+0x238>
 8000652:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000656:	bfde      	ittt	le
 8000658:	2000      	movle	r0, #0
 800065a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800065e:	bd70      	pople	{r4, r5, r6, pc}
 8000660:	f1c4 0400 	rsb	r4, r4, #0
 8000664:	3c20      	subs	r4, #32
 8000666:	da35      	bge.n	80006d4 <__aeabi_dmul+0x164>
 8000668:	340c      	adds	r4, #12
 800066a:	dc1b      	bgt.n	80006a4 <__aeabi_dmul+0x134>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f305 	lsl.w	r3, r0, r5
 8000678:	fa20 f004 	lsr.w	r0, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000688:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800068c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000690:	fa21 f604 	lsr.w	r6, r1, r4
 8000694:	eb42 0106 	adc.w	r1, r2, r6
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 040c 	rsb	r4, r4, #12
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f304 	lsl.w	r3, r0, r4
 80006b0:	fa20 f005 	lsr.w	r0, r0, r5
 80006b4:	fa01 f204 	lsl.w	r2, r1, r4
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c4:	f141 0100 	adc.w	r1, r1, #0
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 0520 	rsb	r5, r4, #32
 80006d8:	fa00 f205 	lsl.w	r2, r0, r5
 80006dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e0:	fa20 f304 	lsr.w	r3, r0, r4
 80006e4:	fa01 f205 	lsl.w	r2, r1, r5
 80006e8:	ea43 0302 	orr.w	r3, r3, r2
 80006ec:	fa21 f004 	lsr.w	r0, r1, r4
 80006f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f4:	fa21 f204 	lsr.w	r2, r1, r4
 80006f8:	ea20 0002 	bic.w	r0, r0, r2
 80006fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f094 0f00 	teq	r4, #0
 8000710:	d10f      	bne.n	8000732 <__aeabi_dmul+0x1c2>
 8000712:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000716:	0040      	lsls	r0, r0, #1
 8000718:	eb41 0101 	adc.w	r1, r1, r1
 800071c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3c01      	subeq	r4, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1a6>
 8000726:	ea41 0106 	orr.w	r1, r1, r6
 800072a:	f095 0f00 	teq	r5, #0
 800072e:	bf18      	it	ne
 8000730:	4770      	bxne	lr
 8000732:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000736:	0052      	lsls	r2, r2, #1
 8000738:	eb43 0303 	adc.w	r3, r3, r3
 800073c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3d01      	subeq	r5, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1c6>
 8000746:	ea43 0306 	orr.w	r3, r3, r6
 800074a:	4770      	bx	lr
 800074c:	ea94 0f0c 	teq	r4, ip
 8000750:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000754:	bf18      	it	ne
 8000756:	ea95 0f0c 	teqne	r5, ip
 800075a:	d00c      	beq.n	8000776 <__aeabi_dmul+0x206>
 800075c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000760:	bf18      	it	ne
 8000762:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000766:	d1d1      	bne.n	800070c <__aeabi_dmul+0x19c>
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000770:	f04f 0000 	mov.w	r0, #0
 8000774:	bd70      	pop	{r4, r5, r6, pc}
 8000776:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077a:	bf06      	itte	eq
 800077c:	4610      	moveq	r0, r2
 800077e:	4619      	moveq	r1, r3
 8000780:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000784:	d019      	beq.n	80007ba <__aeabi_dmul+0x24a>
 8000786:	ea94 0f0c 	teq	r4, ip
 800078a:	d102      	bne.n	8000792 <__aeabi_dmul+0x222>
 800078c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000790:	d113      	bne.n	80007ba <__aeabi_dmul+0x24a>
 8000792:	ea95 0f0c 	teq	r5, ip
 8000796:	d105      	bne.n	80007a4 <__aeabi_dmul+0x234>
 8000798:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800079c:	bf1c      	itt	ne
 800079e:	4610      	movne	r0, r2
 80007a0:	4619      	movne	r1, r3
 80007a2:	d10a      	bne.n	80007ba <__aeabi_dmul+0x24a>
 80007a4:	ea81 0103 	eor.w	r1, r1, r3
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b4:	f04f 0000 	mov.w	r0, #0
 80007b8:	bd70      	pop	{r4, r5, r6, pc}
 80007ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007c2:	bd70      	pop	{r4, r5, r6, pc}

080007c4 <__aeabi_ddiv>:
 80007c4:	b570      	push	{r4, r5, r6, lr}
 80007c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007d2:	bf1d      	ittte	ne
 80007d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d8:	ea94 0f0c 	teqne	r4, ip
 80007dc:	ea95 0f0c 	teqne	r5, ip
 80007e0:	f000 f8a7 	bleq	8000932 <__aeabi_ddiv+0x16e>
 80007e4:	eba4 0405 	sub.w	r4, r4, r5
 80007e8:	ea81 0e03 	eor.w	lr, r1, r3
 80007ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f4:	f000 8088 	beq.w	8000908 <__aeabi_ddiv+0x144>
 80007f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000800:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000804:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000808:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800080c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000810:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000814:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000818:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800081c:	429d      	cmp	r5, r3
 800081e:	bf08      	it	eq
 8000820:	4296      	cmpeq	r6, r2
 8000822:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000826:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800082a:	d202      	bcs.n	8000832 <__aeabi_ddiv+0x6e>
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	1ab6      	subs	r6, r6, r2
 8000834:	eb65 0503 	sbc.w	r5, r5, r3
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000842:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 000c 	orrcs.w	r0, r0, ip
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a4:	d018      	beq.n	80008d8 <__aeabi_ddiv+0x114>
 80008a6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008aa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008b2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008b6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008be:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008c2:	d1c0      	bne.n	8000846 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	d10b      	bne.n	80008e2 <__aeabi_ddiv+0x11e>
 80008ca:	ea41 0100 	orr.w	r1, r1, r0
 80008ce:	f04f 0000 	mov.w	r0, #0
 80008d2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008d6:	e7b6      	b.n	8000846 <__aeabi_ddiv+0x82>
 80008d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008dc:	bf04      	itt	eq
 80008de:	4301      	orreq	r1, r0
 80008e0:	2000      	moveq	r0, #0
 80008e2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008e6:	bf88      	it	hi
 80008e8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008ec:	f63f aeaf 	bhi.w	800064e <__aeabi_dmul+0xde>
 80008f0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f4:	bf04      	itt	eq
 80008f6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008fe:	f150 0000 	adcs.w	r0, r0, #0
 8000902:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000906:	bd70      	pop	{r4, r5, r6, pc}
 8000908:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800090c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000910:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000914:	bfc2      	ittt	gt
 8000916:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800091e:	bd70      	popgt	{r4, r5, r6, pc}
 8000920:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000924:	f04f 0e00 	mov.w	lr, #0
 8000928:	3c01      	subs	r4, #1
 800092a:	e690      	b.n	800064e <__aeabi_dmul+0xde>
 800092c:	ea45 0e06 	orr.w	lr, r5, r6
 8000930:	e68d      	b.n	800064e <__aeabi_dmul+0xde>
 8000932:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000936:	ea94 0f0c 	teq	r4, ip
 800093a:	bf08      	it	eq
 800093c:	ea95 0f0c 	teqeq	r5, ip
 8000940:	f43f af3b 	beq.w	80007ba <__aeabi_dmul+0x24a>
 8000944:	ea94 0f0c 	teq	r4, ip
 8000948:	d10a      	bne.n	8000960 <__aeabi_ddiv+0x19c>
 800094a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800094e:	f47f af34 	bne.w	80007ba <__aeabi_dmul+0x24a>
 8000952:	ea95 0f0c 	teq	r5, ip
 8000956:	f47f af25 	bne.w	80007a4 <__aeabi_dmul+0x234>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e72c      	b.n	80007ba <__aeabi_dmul+0x24a>
 8000960:	ea95 0f0c 	teq	r5, ip
 8000964:	d106      	bne.n	8000974 <__aeabi_ddiv+0x1b0>
 8000966:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096a:	f43f aefd 	beq.w	8000768 <__aeabi_dmul+0x1f8>
 800096e:	4610      	mov	r0, r2
 8000970:	4619      	mov	r1, r3
 8000972:	e722      	b.n	80007ba <__aeabi_dmul+0x24a>
 8000974:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000978:	bf18      	it	ne
 800097a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800097e:	f47f aec5 	bne.w	800070c <__aeabi_dmul+0x19c>
 8000982:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000986:	f47f af0d 	bne.w	80007a4 <__aeabi_dmul+0x234>
 800098a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800098e:	f47f aeeb 	bne.w	8000768 <__aeabi_dmul+0x1f8>
 8000992:	e712      	b.n	80007ba <__aeabi_dmul+0x24a>

08000994 <__gedf2>:
 8000994:	f04f 3cff 	mov.w	ip, #4294967295
 8000998:	e006      	b.n	80009a8 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__ledf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	e002      	b.n	80009a8 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__cmpdf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009be:	d01b      	beq.n	80009f8 <__cmpdf2+0x54>
 80009c0:	b001      	add	sp, #4
 80009c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009c6:	bf0c      	ite	eq
 80009c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009cc:	ea91 0f03 	teqne	r1, r3
 80009d0:	bf02      	ittt	eq
 80009d2:	ea90 0f02 	teqeq	r0, r2
 80009d6:	2000      	moveq	r0, #0
 80009d8:	4770      	bxeq	lr
 80009da:	f110 0f00 	cmn.w	r0, #0
 80009de:	ea91 0f03 	teq	r1, r3
 80009e2:	bf58      	it	pl
 80009e4:	4299      	cmppl	r1, r3
 80009e6:	bf08      	it	eq
 80009e8:	4290      	cmpeq	r0, r2
 80009ea:	bf2c      	ite	cs
 80009ec:	17d8      	asrcs	r0, r3, #31
 80009ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009f2:	f040 0001 	orr.w	r0, r0, #1
 80009f6:	4770      	bx	lr
 80009f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d102      	bne.n	8000a08 <__cmpdf2+0x64>
 8000a02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a06:	d107      	bne.n	8000a18 <__cmpdf2+0x74>
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d1d6      	bne.n	80009c0 <__cmpdf2+0x1c>
 8000a12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a16:	d0d3      	beq.n	80009c0 <__cmpdf2+0x1c>
 8000a18:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdrcmple>:
 8000a20:	4684      	mov	ip, r0
 8000a22:	4610      	mov	r0, r2
 8000a24:	4662      	mov	r2, ip
 8000a26:	468c      	mov	ip, r1
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4663      	mov	r3, ip
 8000a2c:	e000      	b.n	8000a30 <__aeabi_cdcmpeq>
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdcmpeq>:
 8000a30:	b501      	push	{r0, lr}
 8000a32:	f7ff ffb7 	bl	80009a4 <__cmpdf2>
 8000a36:	2800      	cmp	r0, #0
 8000a38:	bf48      	it	mi
 8000a3a:	f110 0f00 	cmnmi.w	r0, #0
 8000a3e:	bd01      	pop	{r0, pc}

08000a40 <__aeabi_dcmpeq>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff fff4 	bl	8000a30 <__aeabi_cdcmpeq>
 8000a48:	bf0c      	ite	eq
 8000a4a:	2001      	moveq	r0, #1
 8000a4c:	2000      	movne	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmplt>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffea 	bl	8000a30 <__aeabi_cdcmpeq>
 8000a5c:	bf34      	ite	cc
 8000a5e:	2001      	movcc	r0, #1
 8000a60:	2000      	movcs	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmple>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffe0 	bl	8000a30 <__aeabi_cdcmpeq>
 8000a70:	bf94      	ite	ls
 8000a72:	2001      	movls	r0, #1
 8000a74:	2000      	movhi	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpge>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffce 	bl	8000a20 <__aeabi_cdrcmple>
 8000a84:	bf94      	ite	ls
 8000a86:	2001      	movls	r0, #1
 8000a88:	2000      	movhi	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmpgt>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffc4 	bl	8000a20 <__aeabi_cdrcmple>
 8000a98:	bf34      	ite	cc
 8000a9a:	2001      	movcc	r0, #1
 8000a9c:	2000      	movcs	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpun>:
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x10>
 8000aae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab2:	d10a      	bne.n	8000aca <__aeabi_dcmpun+0x26>
 8000ab4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x20>
 8000abe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac2:	d102      	bne.n	8000aca <__aeabi_dcmpun+0x26>
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	f04f 0001 	mov.w	r0, #1
 8000ace:	4770      	bx	lr

08000ad0 <__aeabi_d2iz>:
 8000ad0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad8:	d215      	bcs.n	8000b06 <__aeabi_d2iz+0x36>
 8000ada:	d511      	bpl.n	8000b00 <__aeabi_d2iz+0x30>
 8000adc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae4:	d912      	bls.n	8000b0c <__aeabi_d2iz+0x3c>
 8000ae6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	bf18      	it	ne
 8000afc:	4240      	negne	r0, r0
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0a:	d105      	bne.n	8000b18 <__aeabi_d2iz+0x48>
 8000b0c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b10:	bf08      	it	eq
 8000b12:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop

08000b20 <__aeabi_d2uiz>:
 8000b20:	004a      	lsls	r2, r1, #1
 8000b22:	d211      	bcs.n	8000b48 <__aeabi_d2uiz+0x28>
 8000b24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b28:	d211      	bcs.n	8000b4e <__aeabi_d2uiz+0x2e>
 8000b2a:	d50d      	bpl.n	8000b48 <__aeabi_d2uiz+0x28>
 8000b2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b34:	d40e      	bmi.n	8000b54 <__aeabi_d2uiz+0x34>
 8000b36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_d2uiz+0x3a>
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0000 	mov.w	r0, #0
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2f>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b68:	bf24      	itt	cs
 8000b6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b72:	d90d      	bls.n	8000b90 <__aeabi_d2f+0x30>
 8000b74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b88:	bf08      	it	eq
 8000b8a:	f020 0001 	biceq.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b94:	d121      	bne.n	8000bda <__aeabi_d2f+0x7a>
 8000b96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b9a:	bfbc      	itt	lt
 8000b9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	4770      	bxlt	lr
 8000ba2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000baa:	f1c2 0218 	rsb	r2, r2, #24
 8000bae:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bba:	bf18      	it	ne
 8000bbc:	f040 0001 	orrne.w	r0, r0, #1
 8000bc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bcc:	ea40 000c 	orr.w	r0, r0, ip
 8000bd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd8:	e7cc      	b.n	8000b74 <__aeabi_d2f+0x14>
 8000bda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bde:	d107      	bne.n	8000bf0 <__aeabi_d2f+0x90>
 8000be0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be4:	bf1e      	ittt	ne
 8000be6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bee:	4770      	bxne	lr
 8000bf0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__aeabi_uldivmod>:
 8000c00:	b953      	cbnz	r3, 8000c18 <__aeabi_uldivmod+0x18>
 8000c02:	b94a      	cbnz	r2, 8000c18 <__aeabi_uldivmod+0x18>
 8000c04:	2900      	cmp	r1, #0
 8000c06:	bf08      	it	eq
 8000c08:	2800      	cmpeq	r0, #0
 8000c0a:	bf1c      	itt	ne
 8000c0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c10:	f04f 30ff 	movne.w	r0, #4294967295
 8000c14:	f000 b97a 	b.w	8000f0c <__aeabi_idiv0>
 8000c18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c20:	f000 f806 	bl	8000c30 <__udivmoddi4>
 8000c24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c2c:	b004      	add	sp, #16
 8000c2e:	4770      	bx	lr

08000c30 <__udivmoddi4>:
 8000c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c34:	468c      	mov	ip, r1
 8000c36:	460d      	mov	r5, r1
 8000c38:	4604      	mov	r4, r0
 8000c3a:	9e08      	ldr	r6, [sp, #32]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d151      	bne.n	8000ce4 <__udivmoddi4+0xb4>
 8000c40:	428a      	cmp	r2, r1
 8000c42:	4617      	mov	r7, r2
 8000c44:	d96d      	bls.n	8000d22 <__udivmoddi4+0xf2>
 8000c46:	fab2 fe82 	clz	lr, r2
 8000c4a:	f1be 0f00 	cmp.w	lr, #0
 8000c4e:	d00b      	beq.n	8000c68 <__udivmoddi4+0x38>
 8000c50:	f1ce 0c20 	rsb	ip, lr, #32
 8000c54:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c58:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c5c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c60:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c64:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c68:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c6c:	0c25      	lsrs	r5, r4, #16
 8000c6e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c72:	fa1f f987 	uxth.w	r9, r7
 8000c76:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c7a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c7e:	fb08 f309 	mul.w	r3, r8, r9
 8000c82:	42ab      	cmp	r3, r5
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x6c>
 8000c86:	19ed      	adds	r5, r5, r7
 8000c88:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c8c:	f080 8123 	bcs.w	8000ed6 <__udivmoddi4+0x2a6>
 8000c90:	42ab      	cmp	r3, r5
 8000c92:	f240 8120 	bls.w	8000ed6 <__udivmoddi4+0x2a6>
 8000c96:	f1a8 0802 	sub.w	r8, r8, #2
 8000c9a:	443d      	add	r5, r7
 8000c9c:	1aed      	subs	r5, r5, r3
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ca4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000ca8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cac:	fb00 f909 	mul.w	r9, r0, r9
 8000cb0:	45a1      	cmp	r9, r4
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x98>
 8000cb4:	19e4      	adds	r4, r4, r7
 8000cb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cba:	f080 810a 	bcs.w	8000ed2 <__udivmoddi4+0x2a2>
 8000cbe:	45a1      	cmp	r9, r4
 8000cc0:	f240 8107 	bls.w	8000ed2 <__udivmoddi4+0x2a2>
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	443c      	add	r4, r7
 8000cc8:	eba4 0409 	sub.w	r4, r4, r9
 8000ccc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d061      	beq.n	8000d9a <__udivmoddi4+0x16a>
 8000cd6:	fa24 f40e 	lsr.w	r4, r4, lr
 8000cda:	2300      	movs	r3, #0
 8000cdc:	6034      	str	r4, [r6, #0]
 8000cde:	6073      	str	r3, [r6, #4]
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	d907      	bls.n	8000cf8 <__udivmoddi4+0xc8>
 8000ce8:	2e00      	cmp	r6, #0
 8000cea:	d054      	beq.n	8000d96 <__udivmoddi4+0x166>
 8000cec:	2100      	movs	r1, #0
 8000cee:	e886 0021 	stmia.w	r6, {r0, r5}
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf8:	fab3 f183 	clz	r1, r3
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	f040 808e 	bne.w	8000e1e <__udivmoddi4+0x1ee>
 8000d02:	42ab      	cmp	r3, r5
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xdc>
 8000d06:	4282      	cmp	r2, r0
 8000d08:	f200 80fa 	bhi.w	8000f00 <__udivmoddi4+0x2d0>
 8000d0c:	1a84      	subs	r4, r0, r2
 8000d0e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	46ac      	mov	ip, r5
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	d03f      	beq.n	8000d9a <__udivmoddi4+0x16a>
 8000d1a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	b912      	cbnz	r2, 8000d2a <__udivmoddi4+0xfa>
 8000d24:	2701      	movs	r7, #1
 8000d26:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d2a:	fab7 fe87 	clz	lr, r7
 8000d2e:	f1be 0f00 	cmp.w	lr, #0
 8000d32:	d134      	bne.n	8000d9e <__udivmoddi4+0x16e>
 8000d34:	1beb      	subs	r3, r5, r7
 8000d36:	0c3a      	lsrs	r2, r7, #16
 8000d38:	fa1f fc87 	uxth.w	ip, r7
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d42:	0c25      	lsrs	r5, r4, #16
 8000d44:	fb02 3318 	mls	r3, r2, r8, r3
 8000d48:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d4c:	fb0c f308 	mul.w	r3, ip, r8
 8000d50:	42ab      	cmp	r3, r5
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x134>
 8000d54:	19ed      	adds	r5, r5, r7
 8000d56:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x132>
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	f200 80d1 	bhi.w	8000f04 <__udivmoddi4+0x2d4>
 8000d62:	4680      	mov	r8, r0
 8000d64:	1aed      	subs	r5, r5, r3
 8000d66:	b2a3      	uxth	r3, r4
 8000d68:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d6c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d70:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d74:	fb0c fc00 	mul.w	ip, ip, r0
 8000d78:	45a4      	cmp	ip, r4
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x15c>
 8000d7c:	19e4      	adds	r4, r4, r7
 8000d7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x15a>
 8000d84:	45a4      	cmp	ip, r4
 8000d86:	f200 80b8 	bhi.w	8000efa <__udivmoddi4+0x2ca>
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	eba4 040c 	sub.w	r4, r4, ip
 8000d90:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d94:	e79d      	b.n	8000cd2 <__udivmoddi4+0xa2>
 8000d96:	4631      	mov	r1, r6
 8000d98:	4630      	mov	r0, r6
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	f1ce 0420 	rsb	r4, lr, #32
 8000da2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000da6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000daa:	fa20 f804 	lsr.w	r8, r0, r4
 8000dae:	0c3a      	lsrs	r2, r7, #16
 8000db0:	fa25 f404 	lsr.w	r4, r5, r4
 8000db4:	ea48 0803 	orr.w	r8, r8, r3
 8000db8:	fbb4 f1f2 	udiv	r1, r4, r2
 8000dbc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000dc0:	fb02 4411 	mls	r4, r2, r1, r4
 8000dc4:	fa1f fc87 	uxth.w	ip, r7
 8000dc8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000dcc:	fb01 f30c 	mul.w	r3, r1, ip
 8000dd0:	42ab      	cmp	r3, r5
 8000dd2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000dd6:	d909      	bls.n	8000dec <__udivmoddi4+0x1bc>
 8000dd8:	19ed      	adds	r5, r5, r7
 8000dda:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dde:	f080 808a 	bcs.w	8000ef6 <__udivmoddi4+0x2c6>
 8000de2:	42ab      	cmp	r3, r5
 8000de4:	f240 8087 	bls.w	8000ef6 <__udivmoddi4+0x2c6>
 8000de8:	3902      	subs	r1, #2
 8000dea:	443d      	add	r5, r7
 8000dec:	1aeb      	subs	r3, r5, r3
 8000dee:	fa1f f588 	uxth.w	r5, r8
 8000df2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000df6:	fb02 3310 	mls	r3, r2, r0, r3
 8000dfa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dfe:	fb00 f30c 	mul.w	r3, r0, ip
 8000e02:	42ab      	cmp	r3, r5
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x1e6>
 8000e06:	19ed      	adds	r5, r5, r7
 8000e08:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e0c:	d26f      	bcs.n	8000eee <__udivmoddi4+0x2be>
 8000e0e:	42ab      	cmp	r3, r5
 8000e10:	d96d      	bls.n	8000eee <__udivmoddi4+0x2be>
 8000e12:	3802      	subs	r0, #2
 8000e14:	443d      	add	r5, r7
 8000e16:	1aeb      	subs	r3, r5, r3
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	e78f      	b.n	8000d3e <__udivmoddi4+0x10e>
 8000e1e:	f1c1 0720 	rsb	r7, r1, #32
 8000e22:	fa22 f807 	lsr.w	r8, r2, r7
 8000e26:	408b      	lsls	r3, r1
 8000e28:	fa05 f401 	lsl.w	r4, r5, r1
 8000e2c:	ea48 0303 	orr.w	r3, r8, r3
 8000e30:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e34:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e38:	40fd      	lsrs	r5, r7
 8000e3a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e3e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e42:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e46:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e4a:	fa1f f883 	uxth.w	r8, r3
 8000e4e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e52:	fb09 f408 	mul.w	r4, r9, r8
 8000e56:	42ac      	cmp	r4, r5
 8000e58:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x244>
 8000e62:	18ed      	adds	r5, r5, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	d243      	bcs.n	8000ef2 <__udivmoddi4+0x2c2>
 8000e6a:	42ac      	cmp	r4, r5
 8000e6c:	d941      	bls.n	8000ef2 <__udivmoddi4+0x2c2>
 8000e6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e72:	441d      	add	r5, r3
 8000e74:	1b2d      	subs	r5, r5, r4
 8000e76:	fa1f fe8e 	uxth.w	lr, lr
 8000e7a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e7e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e82:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e86:	fb00 f808 	mul.w	r8, r0, r8
 8000e8a:	45a0      	cmp	r8, r4
 8000e8c:	d907      	bls.n	8000e9e <__udivmoddi4+0x26e>
 8000e8e:	18e4      	adds	r4, r4, r3
 8000e90:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e94:	d229      	bcs.n	8000eea <__udivmoddi4+0x2ba>
 8000e96:	45a0      	cmp	r8, r4
 8000e98:	d927      	bls.n	8000eea <__udivmoddi4+0x2ba>
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	441c      	add	r4, r3
 8000e9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea2:	eba4 0408 	sub.w	r4, r4, r8
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	454c      	cmp	r4, r9
 8000eac:	46c6      	mov	lr, r8
 8000eae:	464d      	mov	r5, r9
 8000eb0:	d315      	bcc.n	8000ede <__udivmoddi4+0x2ae>
 8000eb2:	d012      	beq.n	8000eda <__udivmoddi4+0x2aa>
 8000eb4:	b156      	cbz	r6, 8000ecc <__udivmoddi4+0x29c>
 8000eb6:	ebba 030e 	subs.w	r3, sl, lr
 8000eba:	eb64 0405 	sbc.w	r4, r4, r5
 8000ebe:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec2:	40cb      	lsrs	r3, r1
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	40cc      	lsrs	r4, r1
 8000ec8:	6037      	str	r7, [r6, #0]
 8000eca:	6074      	str	r4, [r6, #4]
 8000ecc:	2100      	movs	r1, #0
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	e6f8      	b.n	8000cc8 <__udivmoddi4+0x98>
 8000ed6:	4690      	mov	r8, r2
 8000ed8:	e6e0      	b.n	8000c9c <__udivmoddi4+0x6c>
 8000eda:	45c2      	cmp	sl, r8
 8000edc:	d2ea      	bcs.n	8000eb4 <__udivmoddi4+0x284>
 8000ede:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ee2:	eb69 0503 	sbc.w	r5, r9, r3
 8000ee6:	3801      	subs	r0, #1
 8000ee8:	e7e4      	b.n	8000eb4 <__udivmoddi4+0x284>
 8000eea:	4628      	mov	r0, r5
 8000eec:	e7d7      	b.n	8000e9e <__udivmoddi4+0x26e>
 8000eee:	4640      	mov	r0, r8
 8000ef0:	e791      	b.n	8000e16 <__udivmoddi4+0x1e6>
 8000ef2:	4681      	mov	r9, r0
 8000ef4:	e7be      	b.n	8000e74 <__udivmoddi4+0x244>
 8000ef6:	4601      	mov	r1, r0
 8000ef8:	e778      	b.n	8000dec <__udivmoddi4+0x1bc>
 8000efa:	3802      	subs	r0, #2
 8000efc:	443c      	add	r4, r7
 8000efe:	e745      	b.n	8000d8c <__udivmoddi4+0x15c>
 8000f00:	4608      	mov	r0, r1
 8000f02:	e708      	b.n	8000d16 <__udivmoddi4+0xe6>
 8000f04:	f1a8 0802 	sub.w	r8, r8, #2
 8000f08:	443d      	add	r5, r7
 8000f0a:	e72b      	b.n	8000d64 <__udivmoddi4+0x134>

08000f0c <__aeabi_idiv0>:
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f10:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f12:	2003      	movs	r0, #3
 8000f14:	f000 fc9a 	bl	800184c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f00e fb1f 	bl	800f55c <HAL_InitTick>
 8000f1e:	b110      	cbz	r0, 8000f26 <HAL_Init+0x16>
  {
    status = HAL_ERROR;
 8000f20:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8000f22:	4620      	mov	r0, r4
 8000f24:	bd10      	pop	{r4, pc}
 8000f26:	4604      	mov	r4, r0
    HAL_MspInit();
 8000f28:	f00e faf8 	bl	800f51c <HAL_MspInit>
 8000f2c:	e7f9      	b.n	8000f22 <HAL_Init+0x12>
	...

08000f30 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000f30:	4a02      	ldr	r2, [pc, #8]	; (8000f3c <HAL_IncTick+0xc>)
 8000f32:	6813      	ldr	r3, [r2, #0]
 8000f34:	3301      	adds	r3, #1
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20005364 	.word	0x20005364

08000f40 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f40:	4b01      	ldr	r3, [pc, #4]	; (8000f48 <HAL_GetTick+0x8>)
 8000f42:	6818      	ldr	r0, [r3, #0]
}
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20005364 	.word	0x20005364

08000f4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f4c:	b538      	push	{r3, r4, r5, lr}
 8000f4e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f50:	f7ff fff6 	bl	8000f40 <HAL_GetTick>
 8000f54:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f56:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000f5a:	d000      	beq.n	8000f5e <HAL_Delay+0x12>
  {
    wait++;
 8000f5c:	3401      	adds	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f5e:	f7ff ffef 	bl	8000f40 <HAL_GetTick>
 8000f62:	1b40      	subs	r0, r0, r5
 8000f64:	4284      	cmp	r4, r0
 8000f66:	d8fa      	bhi.n	8000f5e <HAL_Delay+0x12>
  {
  }
}
 8000f68:	bd38      	pop	{r3, r4, r5, pc}
	...

08000f6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f6c:	b530      	push	{r4, r5, lr}
 8000f6e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f74:	2800      	cmp	r0, #0
 8000f76:	f000 80f7 	beq.w	8001168 <HAL_ADC_Init+0x1fc>
 8000f7a:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f7c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000f7e:	b323      	cbz	r3, 8000fca <HAL_ADC_Init+0x5e>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000f80:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f82:	689a      	ldr	r2, [r3, #8]
 8000f84:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8000f88:	d026      	beq.n	8000fd8 <HAL_ADC_Init+0x6c>
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	b12a      	cbz	r2, 8000f9a <HAL_ADC_Init+0x2e>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8000f94:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8000f98:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor 
     re-applied once the ADC voltage regulator is enabled */    
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f9a:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f9c:	6893      	ldr	r3, [r2, #8]
 8000f9e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000fa2:	d01b      	beq.n	8000fdc <HAL_ADC_Init+0x70>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	bb0b      	cbnz	r3, 8000fec <HAL_ADC_Init+0x80>
  MODIFY_REG(ADCx->CR,
 8000fa8:	6893      	ldr	r3, [r2, #8]
 8000faa:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000fae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb6:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);
    
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000fb8:	4b6c      	ldr	r3, [pc, #432]	; (800116c <HAL_ADC_Init+0x200>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	099b      	lsrs	r3, r3, #6
 8000fbe:	4a6c      	ldr	r2, [pc, #432]	; (8001170 <HAL_ADC_Init+0x204>)
 8000fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc4:	099b      	lsrs	r3, r3, #6
 8000fc6:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8000fc8:	e00d      	b.n	8000fe6 <HAL_ADC_Init+0x7a>
    HAL_ADC_MspInit(hadc);
 8000fca:	f00c f849 	bl	800d060 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8000fce:	2300      	movs	r3, #0
 8000fd0:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8000fd2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8000fd6:	e7d3      	b.n	8000f80 <HAL_ADC_Init+0x14>
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	e7d7      	b.n	8000f8c <HAL_ADC_Init+0x20>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fdc:	2300      	movs	r3, #0
 8000fde:	e7e2      	b.n	8000fa6 <HAL_ADC_Init+0x3a>
    {
      wait_loop_index--;
 8000fe0:	9b01      	ldr	r3, [sp, #4]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8000fe6:	9b01      	ldr	r3, [sp, #4]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1f9      	bne.n	8000fe0 <HAL_ADC_Init+0x74>
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000fec:	6823      	ldr	r3, [r4, #0]
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000ff4:	f000 8083 	beq.w	80010fe <HAL_ADC_Init+0x192>
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2a00      	cmp	r2, #0
 8000ffc:	f040 8081 	bne.w	8001102 <HAL_ADC_Init+0x196>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001000:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001002:	f042 0210 	orr.w	r2, r2, #16
 8001006:	65a2      	str	r2, [r4, #88]	; 0x58
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001008:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800100a:	f042 0201 	orr.w	r2, r2, #1
 800100e:	65e2      	str	r2, [r4, #92]	; 0x5c
    
    tmp_hal_status = HAL_ERROR;
 8001010:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	f012 0f04 	tst.w	r2, #4
 8001018:	d075      	beq.n	8001106 <HAL_ADC_Init+0x19a>
 800101a:	2101      	movs	r1, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800101c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800101e:	f012 0f10 	tst.w	r2, #16
 8001022:	f040 809a 	bne.w	800115a <HAL_ADC_Init+0x1ee>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001026:	2900      	cmp	r1, #0
 8001028:	f040 8097 	bne.w	800115a <HAL_ADC_Init+0x1ee>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800102c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800102e:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8001032:	f042 0202 	orr.w	r2, r2, #2
 8001036:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	f013 0f01 	tst.w	r3, #1
 800103e:	d064      	beq.n	800110a <HAL_ADC_Init+0x19e>
 8001040:	2301      	movs	r3, #1
    /* Configuration of common ADC parameters                                 */
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001042:	b96b      	cbnz	r3, 8001060 <HAL_ADC_Init+0xf4>
 8001044:	4b4b      	ldr	r3, [pc, #300]	; (8001174 <HAL_ADC_Init+0x208>)
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f013 0f01 	tst.w	r3, #1
 800104c:	d05f      	beq.n	800110e <HAL_ADC_Init+0x1a2>
 800104e:	2301      	movs	r3, #1
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001050:	b933      	cbnz	r3, 8001060 <HAL_ADC_Init+0xf4>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001052:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001054:	4948      	ldr	r1, [pc, #288]	; (8001178 <HAL_ADC_Init+0x20c>)
 8001056:	688a      	ldr	r2, [r1, #8]
 8001058:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800105c:	4313      	orrs	r3, r2
 800105e:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001060:	7e62      	ldrb	r2, [r4, #25]
                hadc->Init.Overrun                                                     |
 8001062:	6b63      	ldr	r3, [r4, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001064:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                hadc->Init.DataAlign                                                   |
 8001068:	68e2      	ldr	r2, [r4, #12]
                hadc->Init.Overrun                                                     |
 800106a:	4313      	orrs	r3, r2
                hadc->Init.Resolution                                                  |
 800106c:	68a2      	ldr	r2, [r4, #8]
                hadc->Init.DataAlign                                                   |
 800106e:	4313      	orrs	r3, r2
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode)  );
 8001070:	f894 2020 	ldrb.w	r2, [r4, #32]
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001074:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001078:	2a01      	cmp	r2, #1
 800107a:	d04a      	beq.n	8001112 <HAL_ADC_Init+0x1a6>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800107c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800107e:	b122      	cbz	r2, 800108a <HAL_ADC_Init+0x11e>
    {
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001080:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001084:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001086:	430a      	orrs	r2, r1
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001088:	4313      	orrs	r3, r2
                 );
    }
    
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 800108a:	6821      	ldr	r1, [r4, #0]
 800108c:	68cd      	ldr	r5, [r1, #12]
 800108e:	4a3b      	ldr	r2, [pc, #236]	; (800117c <HAL_ADC_Init+0x210>)
 8001090:	402a      	ands	r2, r5
 8001092:	4313      	orrs	r3, r2
 8001094:	60cb      	str	r3, [r1, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001096:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001098:	689a      	ldr	r2, [r3, #8]
 800109a:	f012 0f04 	tst.w	r2, #4
 800109e:	d03d      	beq.n	800111c <HAL_ADC_Init+0x1b0>
 80010a0:	2101      	movs	r1, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	f012 0f08 	tst.w	r2, #8
 80010a8:	d03a      	beq.n	8001120 <HAL_ADC_Init+0x1b4>
 80010aa:	2201      	movs	r2, #1
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 80010ac:	b9c1      	cbnz	r1, 80010e0 <HAL_ADC_Init+0x174>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80010ae:	b9ba      	cbnz	r2, 80010e0 <HAL_ADC_Init+0x174>
       )
    {
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                            |
 80010b0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80010b2:	7e21      	ldrb	r1, [r4, #24]
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                            |
 80010b4:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80010b8:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                            |
 80010bc:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
      
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80010c0:	68d9      	ldr	r1, [r3, #12]
 80010c2:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80010c6:	f021 0106 	bic.w	r1, r1, #6
 80010ca:	430a      	orrs	r2, r1
 80010cc:	60da      	str	r2, [r3, #12]
      
      if (hadc->Init.OversamplingMode == ENABLE)
 80010ce:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d026      	beq.n	8001124 <HAL_ADC_Init+0x1b8>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80010d6:	6822      	ldr	r2, [r4, #0]
 80010d8:	6913      	ldr	r3, [r2, #16]
 80010da:	f023 0301 	bic.w	r3, r3, #1
 80010de:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010e0:	6923      	ldr	r3, [r4, #16]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d030      	beq.n	8001148 <HAL_ADC_Init+0x1dc>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80010e6:	6822      	ldr	r2, [r4, #0]
 80010e8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80010ea:	f023 030f 	bic.w	r3, r3, #15
 80010ee:	6313      	str	r3, [r2, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80010f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80010f2:	f023 0303 	bic.w	r3, r3, #3
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	65a3      	str	r3, [r4, #88]	; 0x58
 80010fc:	e032      	b.n	8001164 <HAL_ADC_Init+0x1f8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010fe:	2200      	movs	r2, #0
 8001100:	e77b      	b.n	8000ffa <HAL_ADC_Init+0x8e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001102:	2000      	movs	r0, #0
 8001104:	e785      	b.n	8001012 <HAL_ADC_Init+0xa6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001106:	2100      	movs	r1, #0
 8001108:	e788      	b.n	800101c <HAL_ADC_Init+0xb0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800110a:	2300      	movs	r3, #0
 800110c:	e799      	b.n	8001042 <HAL_ADC_Init+0xd6>
 800110e:	2300      	movs	r3, #0
 8001110:	e79e      	b.n	8001050 <HAL_ADC_Init+0xe4>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001112:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001114:	3a01      	subs	r2, #1
 8001116:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800111a:	e7af      	b.n	800107c <HAL_ADC_Init+0x110>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800111c:	2100      	movs	r1, #0
 800111e:	e7c0      	b.n	80010a2 <HAL_ADC_Init+0x136>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001120:	2200      	movs	r2, #0
 8001122:	e7c3      	b.n	80010ac <HAL_ADC_Init+0x140>
        MODIFY_REG(hadc->Instance->CFGR2,
 8001124:	6821      	ldr	r1, [r4, #0]
 8001126:	690b      	ldr	r3, [r1, #16]
 8001128:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800112c:	f023 0304 	bic.w	r3, r3, #4
 8001130:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001132:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8001134:	432a      	orrs	r2, r5
 8001136:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8001138:	432a      	orrs	r2, r5
 800113a:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800113c:	432a      	orrs	r2, r5
 800113e:	4313      	orrs	r3, r2
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	610b      	str	r3, [r1, #16]
 8001146:	e7cb      	b.n	80010e0 <HAL_ADC_Init+0x174>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001148:	6821      	ldr	r1, [r4, #0]
 800114a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800114c:	f023 030f 	bic.w	r3, r3, #15
 8001150:	69e2      	ldr	r2, [r4, #28]
 8001152:	3a01      	subs	r2, #1
 8001154:	4313      	orrs	r3, r2
 8001156:	630b      	str	r3, [r1, #48]	; 0x30
 8001158:	e7ca      	b.n	80010f0 <HAL_ADC_Init+0x184>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800115a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800115c:	f043 0310 	orr.w	r3, r3, #16
 8001160:	65a3      	str	r3, [r4, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8001162:	2001      	movs	r0, #1
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8001164:	b003      	add	sp, #12
 8001166:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8001168:	2001      	movs	r0, #1
 800116a:	e7fb      	b.n	8001164 <HAL_ADC_Init+0x1f8>
 800116c:	20000048 	.word	0x20000048
 8001170:	053e2d63 	.word	0x053e2d63
 8001174:	50040000 	.word	0x50040000
 8001178:	50040300 	.word	0x50040300
 800117c:	fff0c007 	.word	0xfff0c007

08001180 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001180:	b4f0      	push	{r4, r5, r6, r7}
 8001182:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001184:	2200      	movs	r2, #0
 8001186:	9201      	str	r2, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001188:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 800118c:	2a01      	cmp	r2, #1
 800118e:	f000 8235 	beq.w	80015fc <HAL_ADC_ConfigChannel+0x47c>
 8001192:	4603      	mov	r3, r0
 8001194:	2201      	movs	r2, #1
 8001196:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800119a:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800119c:	6892      	ldr	r2, [r2, #8]
 800119e:	f012 0f04 	tst.w	r2, #4
 80011a2:	d00e      	beq.n	80011c2 <HAL_ADC_ConfigChannel+0x42>
 80011a4:	2201      	movs	r2, #1
 80011a6:	2a00      	cmp	r2, #0
 80011a8:	f040 8219 	bne.w	80015de <HAL_ADC_ConfigChannel+0x45e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80011ac:	684a      	ldr	r2, [r1, #4]
 80011ae:	2a05      	cmp	r2, #5
 80011b0:	d80b      	bhi.n	80011ca <HAL_ADC_ConfigChannel+0x4a>
    {
      switch (sConfig->Rank)
 80011b2:	3a02      	subs	r2, #2
 80011b4:	2a03      	cmp	r2, #3
 80011b6:	f200 809e 	bhi.w	80012f6 <HAL_ADC_ConfigChannel+0x176>
 80011ba:	e8df f002 	tbb	[pc, r2]
 80011be:	9204      	.short	0x9204
 80011c0:	9895      	.short	0x9895
 80011c2:	2200      	movs	r2, #0
 80011c4:	e7ef      	b.n	80011a6 <HAL_ADC_ConfigChannel+0x26>
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 80011c6:	220c      	movs	r2, #12
 80011c8:	604a      	str	r2, [r1, #4]
      }
    }
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80011ca:	681e      	ldr	r6, [r3, #0]
 80011cc:	684d      	ldr	r5, [r1, #4]
 80011ce:	680c      	ldr	r4, [r1, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80011d0:	3630      	adds	r6, #48	; 0x30
 80011d2:	0a2a      	lsrs	r2, r5, #8
 80011d4:	0092      	lsls	r2, r2, #2
 80011d6:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 80011da:	58b0      	ldr	r0, [r6, r2]
 80011dc:	f005 051f 	and.w	r5, r5, #31
 80011e0:	271f      	movs	r7, #31
 80011e2:	40af      	lsls	r7, r5
 80011e4:	ea20 0007 	bic.w	r0, r0, r7
 80011e8:	f3c4 6484 	ubfx	r4, r4, #26, #5
 80011ec:	40ac      	lsls	r4, r5
 80011ee:	4320      	orrs	r0, r4
 80011f0:	50b0      	str	r0, [r6, r2]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011f2:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011f4:	6890      	ldr	r0, [r2, #8]
 80011f6:	f010 0f04 	tst.w	r0, #4
 80011fa:	d07f      	beq.n	80012fc <HAL_ADC_ConfigChannel+0x17c>
 80011fc:	2401      	movs	r4, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80011fe:	6890      	ldr	r0, [r2, #8]
 8001200:	f010 0f08 	tst.w	r0, #8
 8001204:	d07c      	beq.n	8001300 <HAL_ADC_ConfigChannel+0x180>
 8001206:	2001      	movs	r0, #1
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001208:	2c00      	cmp	r4, #0
 800120a:	d134      	bne.n	8001276 <HAL_ADC_ConfigChannel+0xf6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800120c:	2800      	cmp	r0, #0
 800120e:	d132      	bne.n	8001276 <HAL_ADC_ConfigChannel+0xf6>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if(sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001210:	688e      	ldr	r6, [r1, #8]
 8001212:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 8001216:	d075      	beq.n	8001304 <HAL_ADC_ConfigChannel+0x184>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001218:	680d      	ldr	r5, [r1, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800121a:	3214      	adds	r2, #20
 800121c:	0e68      	lsrs	r0, r5, #25
 800121e:	0080      	lsls	r0, r0, #2
 8001220:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8001224:	5814      	ldr	r4, [r2, r0]
 8001226:	f3c5 5504 	ubfx	r5, r5, #20, #5
 800122a:	2707      	movs	r7, #7
 800122c:	40af      	lsls	r7, r5
 800122e:	ea24 0407 	bic.w	r4, r4, r7
 8001232:	fa06 f505 	lsl.w	r5, r6, r5
 8001236:	432c      	orrs	r4, r5
 8001238:	5014      	str	r4, [r2, r0]
        
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800123a:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800123c:	6942      	ldr	r2, [r0, #20]
 800123e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001242:	6142      	str	r2, [r0, #20]
      
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001244:	6948      	ldr	r0, [r1, #20]
 8001246:	681c      	ldr	r4, [r3, #0]
 8001248:	68e2      	ldr	r2, [r4, #12]
 800124a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800124e:	0052      	lsls	r2, r2, #1
 8001250:	fa00 f202 	lsl.w	r2, r0, r2
     
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001254:	690d      	ldr	r5, [r1, #16]
 8001256:	2d04      	cmp	r5, #4
 8001258:	d069      	beq.n	800132e <HAL_ADC_ConfigChannel+0x1ae>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800125a:	680e      	ldr	r6, [r1, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800125c:	3460      	adds	r4, #96	; 0x60
  MODIFY_REG(*preg,
 800125e:	f854 7025 	ldr.w	r7, [r4, r5, lsl #2]
 8001262:	48bc      	ldr	r0, [pc, #752]	; (8001554 <HAL_ADC_ConfigChannel+0x3d4>)
 8001264:	4038      	ands	r0, r7
 8001266:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 800126a:	4332      	orrs	r2, r6
 800126c:	4310      	orrs	r0, r2
 800126e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8001272:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
    }
    
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001276:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001278:	6882      	ldr	r2, [r0, #8]
 800127a:	f012 0f01 	tst.w	r2, #1
 800127e:	f000 80aa 	beq.w	80013d6 <HAL_ADC_ConfigChannel+0x256>
 8001282:	2201      	movs	r2, #1
 8001284:	b9b2      	cbnz	r2, 80012b4 <HAL_ADC_ConfigChannel+0x134>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001286:	680a      	ldr	r2, [r1, #0]
 8001288:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 800128a:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 800128e:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8001292:	ea24 0406 	bic.w	r4, r4, r6
 8001296:	f005 0618 	and.w	r6, r5, #24
 800129a:	4daf      	ldr	r5, [pc, #700]	; (8001558 <HAL_ADC_ConfigChannel+0x3d8>)
 800129c:	40f5      	lsrs	r5, r6
 800129e:	402a      	ands	r2, r5
 80012a0:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80012a4:	4322      	orrs	r2, r4
 80012a6:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      
      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80012aa:	68c8      	ldr	r0, [r1, #12]
 80012ac:	4aab      	ldr	r2, [pc, #684]	; (800155c <HAL_ADC_ConfigChannel+0x3dc>)
 80012ae:	4290      	cmp	r0, r2
 80012b0:	f000 8093 	beq.w	80013da <HAL_ADC_ConfigChannel+0x25a>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */
    
    if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80012b4:	680a      	ldr	r2, [r1, #0]
 80012b6:	49aa      	ldr	r1, [pc, #680]	; (8001560 <HAL_ADC_ConfigChannel+0x3e0>)
 80012b8:	420a      	tst	r2, r1
 80012ba:	f000 819b 	beq.w	80015f4 <HAL_ADC_ConfigChannel+0x474>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012be:	49a9      	ldr	r1, [pc, #676]	; (8001564 <HAL_ADC_ConfigChannel+0x3e4>)
 80012c0:	6889      	ldr	r1, [r1, #8]
 80012c2:	f001 74e0 	and.w	r4, r1, #29360128	; 0x1c00000
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
      
      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80012c6:	48a8      	ldr	r0, [pc, #672]	; (8001568 <HAL_ADC_ConfigChannel+0x3e8>)
 80012c8:	4282      	cmp	r2, r0
 80012ca:	f000 8125 	beq.w	8001518 <HAL_ADC_ConfigChannel+0x398>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80012ce:	48a7      	ldr	r0, [pc, #668]	; (800156c <HAL_ADC_ConfigChannel+0x3ec>)
 80012d0:	4282      	cmp	r2, r0
 80012d2:	f000 815d 	beq.w	8001590 <HAL_ADC_ConfigChannel+0x410>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80012d6:	48a6      	ldr	r0, [pc, #664]	; (8001570 <HAL_ADC_ConfigChannel+0x3f0>)
 80012d8:	4282      	cmp	r2, r0
 80012da:	f000 816d 	beq.w	80015b8 <HAL_ADC_ConfigChannel+0x438>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012de:	2000      	movs	r0, #0
 80012e0:	e182      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x468>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 80012e2:	2212      	movs	r2, #18
 80012e4:	604a      	str	r2, [r1, #4]
 80012e6:	e770      	b.n	80011ca <HAL_ADC_ConfigChannel+0x4a>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 80012e8:	2218      	movs	r2, #24
 80012ea:	604a      	str	r2, [r1, #4]
 80012ec:	e76d      	b.n	80011ca <HAL_ADC_ConfigChannel+0x4a>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 80012ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012f2:	604a      	str	r2, [r1, #4]
 80012f4:	e769      	b.n	80011ca <HAL_ADC_ConfigChannel+0x4a>
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 80012f6:	2206      	movs	r2, #6
 80012f8:	604a      	str	r2, [r1, #4]
 80012fa:	e766      	b.n	80011ca <HAL_ADC_ConfigChannel+0x4a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012fc:	2400      	movs	r4, #0
 80012fe:	e77e      	b.n	80011fe <HAL_ADC_ConfigChannel+0x7e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001300:	2000      	movs	r0, #0
 8001302:	e781      	b.n	8001208 <HAL_ADC_ConfigChannel+0x88>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001304:	680c      	ldr	r4, [r1, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001306:	3214      	adds	r2, #20
 8001308:	0e60      	lsrs	r0, r4, #25
 800130a:	0080      	lsls	r0, r0, #2
 800130c:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8001310:	5815      	ldr	r5, [r2, r0]
 8001312:	f3c4 5404 	ubfx	r4, r4, #20, #5
 8001316:	2607      	movs	r6, #7
 8001318:	fa06 f404 	lsl.w	r4, r6, r4
 800131c:	ea25 0504 	bic.w	r5, r5, r4
 8001320:	5015      	str	r5, [r2, r0]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001322:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001324:	6942      	ldr	r2, [r0, #20]
 8001326:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800132a:	6142      	str	r2, [r0, #20]
 800132c:	e78a      	b.n	8001244 <HAL_ADC_ConfigChannel+0xc4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800132e:	6e20      	ldr	r0, [r4, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001330:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8001334:	680a      	ldr	r2, [r1, #0]
 8001336:	f3c2 0612 	ubfx	r6, r2, #0, #19
 800133a:	bb66      	cbnz	r6, 8001396 <HAL_ADC_ConfigChannel+0x216>
 800133c:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001340:	42aa      	cmp	r2, r5
 8001342:	d02d      	beq.n	80013a0 <HAL_ADC_ConfigChannel+0x220>
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001344:	681c      	ldr	r4, [r3, #0]
 8001346:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001348:	f3c0 6584 	ubfx	r5, r0, #26, #5
 800134c:	680a      	ldr	r2, [r1, #0]
 800134e:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8001352:	bb4e      	cbnz	r6, 80013a8 <HAL_ADC_ConfigChannel+0x228>
 8001354:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001358:	42aa      	cmp	r2, r5
 800135a:	d02a      	beq.n	80013b2 <HAL_ADC_ConfigChannel+0x232>
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800135c:	681c      	ldr	r4, [r3, #0]
 800135e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001360:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8001364:	680a      	ldr	r2, [r1, #0]
 8001366:	f3c2 0612 	ubfx	r6, r2, #0, #19
 800136a:	bb36      	cbnz	r6, 80013ba <HAL_ADC_ConfigChannel+0x23a>
 800136c:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001370:	42aa      	cmp	r2, r5
 8001372:	d027      	beq.n	80013c4 <HAL_ADC_ConfigChannel+0x244>
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001374:	681c      	ldr	r4, [r3, #0]
 8001376:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001378:	f3c0 6584 	ubfx	r5, r0, #26, #5
 800137c:	680a      	ldr	r2, [r1, #0]
 800137e:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8001382:	bb1e      	cbnz	r6, 80013cc <HAL_ADC_ConfigChannel+0x24c>
 8001384:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001388:	42aa      	cmp	r2, r5
 800138a:	f47f af74 	bne.w	8001276 <HAL_ADC_ConfigChannel+0xf6>
  MODIFY_REG(*preg,
 800138e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001392:	66e0      	str	r0, [r4, #108]	; 0x6c
 8001394:	e76f      	b.n	8001276 <HAL_ADC_ConfigChannel+0xf6>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001396:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800139a:	fab2 f282 	clz	r2, r2
 800139e:	e7cf      	b.n	8001340 <HAL_ADC_ConfigChannel+0x1c0>
 80013a0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80013a4:	6620      	str	r0, [r4, #96]	; 0x60
 80013a6:	e7cd      	b.n	8001344 <HAL_ADC_ConfigChannel+0x1c4>
 80013a8:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013ac:	fab2 f282 	clz	r2, r2
 80013b0:	e7d2      	b.n	8001358 <HAL_ADC_ConfigChannel+0x1d8>
 80013b2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80013b6:	6660      	str	r0, [r4, #100]	; 0x64
 80013b8:	e7d0      	b.n	800135c <HAL_ADC_ConfigChannel+0x1dc>
 80013ba:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013be:	fab2 f282 	clz	r2, r2
 80013c2:	e7d5      	b.n	8001370 <HAL_ADC_ConfigChannel+0x1f0>
 80013c4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80013c8:	66a0      	str	r0, [r4, #104]	; 0x68
 80013ca:	e7d3      	b.n	8001374 <HAL_ADC_ConfigChannel+0x1f4>
 80013cc:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013d0:	fab2 f282 	clz	r2, r2
 80013d4:	e7d8      	b.n	8001388 <HAL_ADC_ConfigChannel+0x208>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013d6:	2200      	movs	r2, #0
 80013d8:	e754      	b.n	8001284 <HAL_ADC_ConfigChannel+0x104>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1UL) & 0x1FUL), sConfig->SamplingTime);
 80013da:	681c      	ldr	r4, [r3, #0]
 80013dc:	6808      	ldr	r0, [r1, #0]
 80013de:	f3c0 0612 	ubfx	r6, r0, #0, #19
 80013e2:	bb96      	cbnz	r6, 800144a <HAL_ADC_ConfigChannel+0x2ca>
 80013e4:	0e82      	lsrs	r2, r0, #26
 80013e6:	3201      	adds	r2, #1
 80013e8:	f002 021f 	and.w	r2, r2, #31
 80013ec:	2a09      	cmp	r2, #9
 80013ee:	bf8c      	ite	hi
 80013f0:	2200      	movhi	r2, #0
 80013f2:	2201      	movls	r2, #1
 80013f4:	2a00      	cmp	r2, #0
 80013f6:	d052      	beq.n	800149e <HAL_ADC_ConfigChannel+0x31e>
 80013f8:	bb9e      	cbnz	r6, 8001462 <HAL_ADC_ConfigChannel+0x2e2>
 80013fa:	0e82      	lsrs	r2, r0, #26
 80013fc:	3201      	adds	r2, #1
 80013fe:	0692      	lsls	r2, r2, #26
 8001400:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001404:	bbb6      	cbnz	r6, 8001474 <HAL_ADC_ConfigChannel+0x2f4>
 8001406:	0e85      	lsrs	r5, r0, #26
 8001408:	3501      	adds	r5, #1
 800140a:	f005 071f 	and.w	r7, r5, #31
 800140e:	2501      	movs	r5, #1
 8001410:	40bd      	lsls	r5, r7
 8001412:	4315      	orrs	r5, r2
 8001414:	bbc6      	cbnz	r6, 8001488 <HAL_ADC_ConfigChannel+0x308>
 8001416:	0e82      	lsrs	r2, r0, #26
 8001418:	3201      	adds	r2, #1
 800141a:	f002 021f 	and.w	r2, r2, #31
 800141e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001422:	0512      	lsls	r2, r2, #20
 8001424:	432a      	orrs	r2, r5
 8001426:	688d      	ldr	r5, [r1, #8]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001428:	3414      	adds	r4, #20
 800142a:	0e50      	lsrs	r0, r2, #25
 800142c:	0080      	lsls	r0, r0, #2
 800142e:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8001432:	5826      	ldr	r6, [r4, r0]
 8001434:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8001438:	2707      	movs	r7, #7
 800143a:	4097      	lsls	r7, r2
 800143c:	ea26 0607 	bic.w	r6, r6, r7
 8001440:	fa05 f202 	lsl.w	r2, r5, r2
 8001444:	4332      	orrs	r2, r6
 8001446:	5022      	str	r2, [r4, r0]
 8001448:	e734      	b.n	80012b4 <HAL_ADC_ConfigChannel+0x134>
 800144a:	fa90 f2a0 	rbit	r2, r0
 800144e:	fab2 f282 	clz	r2, r2
 8001452:	3201      	adds	r2, #1
 8001454:	f002 021f 	and.w	r2, r2, #31
 8001458:	2a09      	cmp	r2, #9
 800145a:	bf8c      	ite	hi
 800145c:	2200      	movhi	r2, #0
 800145e:	2201      	movls	r2, #1
 8001460:	e7c8      	b.n	80013f4 <HAL_ADC_ConfigChannel+0x274>
 8001462:	fa90 f2a0 	rbit	r2, r0
 8001466:	fab2 f282 	clz	r2, r2
 800146a:	3201      	adds	r2, #1
 800146c:	0692      	lsls	r2, r2, #26
 800146e:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001472:	e7c7      	b.n	8001404 <HAL_ADC_ConfigChannel+0x284>
 8001474:	fa90 f5a0 	rbit	r5, r0
 8001478:	fab5 f585 	clz	r5, r5
 800147c:	3501      	adds	r5, #1
 800147e:	f005 071f 	and.w	r7, r5, #31
 8001482:	2501      	movs	r5, #1
 8001484:	40bd      	lsls	r5, r7
 8001486:	e7c4      	b.n	8001412 <HAL_ADC_ConfigChannel+0x292>
 8001488:	fa90 f2a0 	rbit	r2, r0
 800148c:	fab2 f282 	clz	r2, r2
 8001490:	3201      	adds	r2, #1
 8001492:	f002 021f 	and.w	r2, r2, #31
 8001496:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800149a:	0512      	lsls	r2, r2, #20
 800149c:	e7c2      	b.n	8001424 <HAL_ADC_ConfigChannel+0x2a4>
 800149e:	b9ce      	cbnz	r6, 80014d4 <HAL_ADC_ConfigChannel+0x354>
 80014a0:	0e82      	lsrs	r2, r0, #26
 80014a2:	3201      	adds	r2, #1
 80014a4:	0692      	lsls	r2, r2, #26
 80014a6:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80014aa:	b9e6      	cbnz	r6, 80014e6 <HAL_ADC_ConfigChannel+0x366>
 80014ac:	0e85      	lsrs	r5, r0, #26
 80014ae:	3501      	adds	r5, #1
 80014b0:	f005 071f 	and.w	r7, r5, #31
 80014b4:	2501      	movs	r5, #1
 80014b6:	40bd      	lsls	r5, r7
 80014b8:	4315      	orrs	r5, r2
 80014ba:	b9f6      	cbnz	r6, 80014fa <HAL_ADC_ConfigChannel+0x37a>
 80014bc:	0e80      	lsrs	r0, r0, #26
 80014be:	3001      	adds	r0, #1
 80014c0:	f000 001f 	and.w	r0, r0, #31
 80014c4:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80014c8:	3a1e      	subs	r2, #30
 80014ca:	0512      	lsls	r2, r2, #20
 80014cc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80014d0:	432a      	orrs	r2, r5
 80014d2:	e7a8      	b.n	8001426 <HAL_ADC_ConfigChannel+0x2a6>
 80014d4:	fa90 f2a0 	rbit	r2, r0
 80014d8:	fab2 f282 	clz	r2, r2
 80014dc:	3201      	adds	r2, #1
 80014de:	0692      	lsls	r2, r2, #26
 80014e0:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80014e4:	e7e1      	b.n	80014aa <HAL_ADC_ConfigChannel+0x32a>
 80014e6:	fa90 f5a0 	rbit	r5, r0
 80014ea:	fab5 f585 	clz	r5, r5
 80014ee:	3501      	adds	r5, #1
 80014f0:	f005 071f 	and.w	r7, r5, #31
 80014f4:	2501      	movs	r5, #1
 80014f6:	40bd      	lsls	r5, r7
 80014f8:	e7de      	b.n	80014b8 <HAL_ADC_ConfigChannel+0x338>
 80014fa:	fa90 f0a0 	rbit	r0, r0
 80014fe:	fab0 f080 	clz	r0, r0
 8001502:	3001      	adds	r0, #1
 8001504:	f000 001f 	and.w	r0, r0, #31
 8001508:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800150c:	f1a0 021e 	sub.w	r2, r0, #30
 8001510:	0512      	lsls	r2, r2, #20
 8001512:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001516:	e7db      	b.n	80014d0 <HAL_ADC_ConfigChannel+0x350>
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001518:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 800151c:	f47f aed7 	bne.w	80012ce <HAL_ADC_ConfigChannel+0x14e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 8001520:	6819      	ldr	r1, [r3, #0]
 8001522:	4a14      	ldr	r2, [pc, #80]	; (8001574 <HAL_ADC_ConfigChannel+0x3f4>)
 8001524:	4291      	cmp	r1, r2
 8001526:	d001      	beq.n	800152c <HAL_ADC_ConfigChannel+0x3ac>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001528:	2000      	movs	r0, #0
 800152a:	e05d      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x468>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800152c:	f444 0200 	orr.w	r2, r4, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001530:	480c      	ldr	r0, [pc, #48]	; (8001564 <HAL_ADC_ConfigChannel+0x3e4>)
 8001532:	6881      	ldr	r1, [r0, #8]
 8001534:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8001538:	430a      	orrs	r2, r1
 800153a:	6082      	str	r2, [r0, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800153c:	4a0e      	ldr	r2, [pc, #56]	; (8001578 <HAL_ADC_ConfigChannel+0x3f8>)
 800153e:	6812      	ldr	r2, [r2, #0]
 8001540:	0992      	lsrs	r2, r2, #6
 8001542:	490e      	ldr	r1, [pc, #56]	; (800157c <HAL_ADC_ConfigChannel+0x3fc>)
 8001544:	fba1 1202 	umull	r1, r2, r1, r2
 8001548:	0992      	lsrs	r2, r2, #6
 800154a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800154e:	0091      	lsls	r1, r2, #2
 8001550:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0UL)
 8001552:	e018      	b.n	8001586 <HAL_ADC_ConfigChannel+0x406>
 8001554:	03fff000 	.word	0x03fff000
 8001558:	0007ffff 	.word	0x0007ffff
 800155c:	407f0000 	.word	0x407f0000
 8001560:	80080000 	.word	0x80080000
 8001564:	50040300 	.word	0x50040300
 8001568:	c7520000 	.word	0xc7520000
 800156c:	cb840000 	.word	0xcb840000
 8001570:	80000001 	.word	0x80000001
 8001574:	50040000 	.word	0x50040000
 8001578:	20000048 	.word	0x20000048
 800157c:	053e2d63 	.word	0x053e2d63
            wait_loop_index--;
 8001580:	9a01      	ldr	r2, [sp, #4]
 8001582:	3a01      	subs	r2, #1
 8001584:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0UL)
 8001586:	9a01      	ldr	r2, [sp, #4]
 8001588:	2a00      	cmp	r2, #0
 800158a:	d1f9      	bne.n	8001580 <HAL_ADC_ConfigChannel+0x400>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800158c:	2000      	movs	r0, #0
 800158e:	e02b      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x468>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001590:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 8001594:	f47f ae9f 	bne.w	80012d6 <HAL_ADC_ConfigChannel+0x156>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001598:	6819      	ldr	r1, [r3, #0]
 800159a:	4a19      	ldr	r2, [pc, #100]	; (8001600 <HAL_ADC_ConfigChannel+0x480>)
 800159c:	4291      	cmp	r1, r2
 800159e:	d001      	beq.n	80015a4 <HAL_ADC_ConfigChannel+0x424>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015a0:	2000      	movs	r0, #0
 80015a2:	e021      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x468>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80015a4:	f044 7280 	orr.w	r2, r4, #16777216	; 0x1000000
 80015a8:	4816      	ldr	r0, [pc, #88]	; (8001604 <HAL_ADC_ConfigChannel+0x484>)
 80015aa:	6881      	ldr	r1, [r0, #8]
 80015ac:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80015b0:	430a      	orrs	r2, r1
 80015b2:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015b4:	2000      	movs	r0, #0
 80015b6:	e017      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x468>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80015b8:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 80015bc:	d11c      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x478>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80015be:	6819      	ldr	r1, [r3, #0]
 80015c0:	4a0f      	ldr	r2, [pc, #60]	; (8001600 <HAL_ADC_ConfigChannel+0x480>)
 80015c2:	4291      	cmp	r1, r2
 80015c4:	d001      	beq.n	80015ca <HAL_ADC_ConfigChannel+0x44a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015c6:	2000      	movs	r0, #0
 80015c8:	e00e      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x468>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80015ca:	f444 0280 	orr.w	r2, r4, #4194304	; 0x400000
 80015ce:	480d      	ldr	r0, [pc, #52]	; (8001604 <HAL_ADC_ConfigChannel+0x484>)
 80015d0:	6881      	ldr	r1, [r0, #8]
 80015d2:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80015d6:	430a      	orrs	r2, r1
 80015d8:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015da:	2000      	movs	r0, #0
 80015dc:	e004      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x468>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015e0:	f042 0220 	orr.w	r2, r2, #32
 80015e4:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 80015e6:	2001      	movs	r0, #1
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  
  /* Return function status */
  return tmp_hal_status;
}
 80015ee:	b002      	add	sp, #8
 80015f0:	bcf0      	pop	{r4, r5, r6, r7}
 80015f2:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015f4:	2000      	movs	r0, #0
 80015f6:	e7f7      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x468>
 80015f8:	2000      	movs	r0, #0
 80015fa:	e7f5      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x468>
  __HAL_LOCK(hadc);
 80015fc:	2002      	movs	r0, #2
 80015fe:	e7f6      	b.n	80015ee <HAL_ADC_ConfigChannel+0x46e>
 8001600:	50040000 	.word	0x50040000
 8001604:	50040300 	.word	0x50040300

08001608 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8001608:	b530      	push	{r4, r5, lr}
 800160a:	b083      	sub	sp, #12
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800160c:	2300      	movs	r3, #0
 800160e:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8001610:	2800      	cmp	r0, #0
 8001612:	f000 80af 	beq.w	8001774 <HAL_COMP_Init+0x16c>
 8001616:	4604      	mov	r4, r0
  {
    status = HAL_ERROR;
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8001618:	6803      	ldr	r3, [r0, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	f2c0 80ab 	blt.w	8001778 <HAL_COMP_Init+0x170>
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif
    
    if(hcomp->State == HAL_COMP_STATE_RESET)
 8001622:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001626:	2b00      	cmp	r3, #0
 8001628:	d02e      	beq.n	8001688 <HAL_COMP_Init+0x80>
      HAL_COMP_MspInit(hcomp);
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800162a:	6822      	ldr	r2, [r4, #0]
 800162c:	6810      	ldr	r0, [r2, #0]
 800162e:	f400 0000 	and.w	r0, r0, #8388608	; 0x800000
    
    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.NonInvertingInput
 8001632:	68e3      	ldr	r3, [r4, #12]
               | hcomp->Init.InvertingInput
 8001634:	6921      	ldr	r1, [r4, #16]
 8001636:	430b      	orrs	r3, r1
               | hcomp->Init.BlankingSrce
 8001638:	69e1      	ldr	r1, [r4, #28]
 800163a:	430b      	orrs	r3, r1
               | hcomp->Init.Hysteresis
 800163c:	6961      	ldr	r1, [r4, #20]
 800163e:	430b      	orrs	r3, r1
               | hcomp->Init.OutputPol
 8001640:	69a1      	ldr	r1, [r4, #24]
 8001642:	430b      	orrs	r3, r1
               | hcomp->Init.Mode
 8001644:	68a1      	ldr	r1, [r4, #8]
    tmp_csr = (  hcomp->Init.NonInvertingInput
 8001646:	430b      	orrs	r3, r1
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif
#else
    MODIFY_REG(hcomp->Instance->CSR,
 8001648:	6815      	ldr	r5, [r2, #0]
 800164a:	494d      	ldr	r1, [pc, #308]	; (8001780 <HAL_COMP_Init+0x178>)
 800164c:	4029      	ands	r1, r5
 800164e:	430b      	orrs	r3, r1
 8001650:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8001652:	6863      	ldr	r3, [r4, #4]
 8001654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001658:	d029      	beq.n	80016ae <HAL_COMP_Init+0xa6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 800165a:	4a4a      	ldr	r2, [pc, #296]	; (8001784 <HAL_COMP_Init+0x17c>)
 800165c:	6813      	ldr	r3, [r2, #0]
 800165e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001662:	6013      	str	r3, [r2, #0]
    }
#endif /* COMP2 */
    
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8001664:	6822      	ldr	r2, [r4, #0]
 8001666:	6813      	ldr	r3, [r2, #0]
 8001668:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800166c:	d02b      	beq.n	80016c6 <HAL_COMP_Init+0xbe>
 800166e:	bb50      	cbnz	r0, 80016c6 <HAL_COMP_Init+0xbe>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001670:	4b45      	ldr	r3, [pc, #276]	; (8001788 <HAL_COMP_Init+0x180>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	099b      	lsrs	r3, r3, #6
 8001676:	4945      	ldr	r1, [pc, #276]	; (800178c <HAL_COMP_Init+0x184>)
 8001678:	fba1 1303 	umull	r1, r3, r1, r3
 800167c:	099b      	lsrs	r3, r3, #6
 800167e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001682:	0099      	lsls	r1, r3, #2
 8001684:	9101      	str	r1, [sp, #4]
      while(wait_loop_index != 0UL)
 8001686:	e01b      	b.n	80016c0 <HAL_COMP_Init+0xb8>
      hcomp->Lock = HAL_UNLOCKED;
 8001688:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      COMP_CLEAR_ERRORCODE(hcomp);
 800168c:	6283      	str	r3, [r0, #40]	; 0x28
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001692:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001696:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001698:	f042 0201 	orr.w	r2, r2, #1
 800169c:	661a      	str	r2, [r3, #96]	; 0x60
 800169e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	9b00      	ldr	r3, [sp, #0]
      HAL_COMP_MspInit(hcomp);
 80016a8:	f00b ff22 	bl	800d4f0 <HAL_COMP_MspInit>
 80016ac:	e7bd      	b.n	800162a <HAL_COMP_Init+0x22>
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 80016ae:	4a35      	ldr	r2, [pc, #212]	; (8001784 <HAL_COMP_Init+0x17c>)
 80016b0:	6813      	ldr	r3, [r2, #0]
 80016b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	e7d4      	b.n	8001664 <HAL_COMP_Init+0x5c>
      {
        wait_loop_index--;
 80016ba:	9b01      	ldr	r3, [sp, #4]
 80016bc:	3b01      	subs	r3, #1
 80016be:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 80016c0:	9b01      	ldr	r3, [sp, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f9      	bne.n	80016ba <HAL_COMP_Init+0xb2>
      }
    }
    
    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80016c6:	4b32      	ldr	r3, [pc, #200]	; (8001790 <HAL_COMP_Init+0x188>)
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d027      	beq.n	800171c <HAL_COMP_Init+0x114>
 80016cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80016d0:	6a22      	ldr	r2, [r4, #32]
 80016d2:	f012 0f03 	tst.w	r2, #3
 80016d6:	d03c      	beq.n	8001752 <HAL_COMP_Init+0x14a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80016d8:	f012 0f10 	tst.w	r2, #16
 80016dc:	d021      	beq.n	8001722 <HAL_COMP_Init+0x11a>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80016de:	492d      	ldr	r1, [pc, #180]	; (8001794 <HAL_COMP_Init+0x18c>)
 80016e0:	688a      	ldr	r2, [r1, #8]
 80016e2:	431a      	orrs	r2, r3
 80016e4:	608a      	str	r2, [r1, #8]
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80016e6:	6a22      	ldr	r2, [r4, #32]
 80016e8:	f012 0f20 	tst.w	r2, #32
 80016ec:	d01f      	beq.n	800172e <HAL_COMP_Init+0x126>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80016ee:	4929      	ldr	r1, [pc, #164]	; (8001794 <HAL_COMP_Init+0x18c>)
 80016f0:	68ca      	ldr	r2, [r1, #12]
 80016f2:	431a      	orrs	r2, r3
 80016f4:	60ca      	str	r2, [r1, #12]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 80016f6:	4a27      	ldr	r2, [pc, #156]	; (8001794 <HAL_COMP_Init+0x18c>)
 80016f8:	6153      	str	r3, [r2, #20]
      
      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
      
      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80016fa:	6a22      	ldr	r2, [r4, #32]
 80016fc:	f012 0f02 	tst.w	r2, #2
 8001700:	d01b      	beq.n	800173a <HAL_COMP_Init+0x132>
  SET_BIT(EXTI->EMR1, ExtiLine);
 8001702:	4924      	ldr	r1, [pc, #144]	; (8001794 <HAL_COMP_Init+0x18c>)
 8001704:	684a      	ldr	r2, [r1, #4]
 8001706:	431a      	orrs	r2, r3
 8001708:	604a      	str	r2, [r1, #4]
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
      }
      
      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800170a:	6a22      	ldr	r2, [r4, #32]
 800170c:	f012 0f01 	tst.w	r2, #1
 8001710:	d019      	beq.n	8001746 <HAL_COMP_Init+0x13e>
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001712:	4920      	ldr	r1, [pc, #128]	; (8001794 <HAL_COMP_Init+0x18c>)
 8001714:	680a      	ldr	r2, [r1, #0]
 8001716:	4313      	orrs	r3, r2
 8001718:	600b      	str	r3, [r1, #0]
 800171a:	e022      	b.n	8001762 <HAL_COMP_Init+0x15a>
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800171c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001720:	e7d6      	b.n	80016d0 <HAL_COMP_Init+0xc8>
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001722:	491c      	ldr	r1, [pc, #112]	; (8001794 <HAL_COMP_Init+0x18c>)
 8001724:	688a      	ldr	r2, [r1, #8]
 8001726:	ea22 0203 	bic.w	r2, r2, r3
 800172a:	608a      	str	r2, [r1, #8]
 800172c:	e7db      	b.n	80016e6 <HAL_COMP_Init+0xde>
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800172e:	4919      	ldr	r1, [pc, #100]	; (8001794 <HAL_COMP_Init+0x18c>)
 8001730:	68ca      	ldr	r2, [r1, #12]
 8001732:	ea22 0203 	bic.w	r2, r2, r3
 8001736:	60ca      	str	r2, [r1, #12]
 8001738:	e7dd      	b.n	80016f6 <HAL_COMP_Init+0xee>
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800173a:	4916      	ldr	r1, [pc, #88]	; (8001794 <HAL_COMP_Init+0x18c>)
 800173c:	684a      	ldr	r2, [r1, #4]
 800173e:	ea22 0203 	bic.w	r2, r2, r3
 8001742:	604a      	str	r2, [r1, #4]
 8001744:	e7e1      	b.n	800170a <HAL_COMP_Init+0x102>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001746:	4913      	ldr	r1, [pc, #76]	; (8001794 <HAL_COMP_Init+0x18c>)
 8001748:	680a      	ldr	r2, [r1, #0]
 800174a:	ea22 0303 	bic.w	r3, r2, r3
 800174e:	600b      	str	r3, [r1, #0]
 8001750:	e007      	b.n	8001762 <HAL_COMP_Init+0x15a>
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8001752:	4a10      	ldr	r2, [pc, #64]	; (8001794 <HAL_COMP_Init+0x18c>)
 8001754:	6851      	ldr	r1, [r2, #4]
 8001756:	43db      	mvns	r3, r3
 8001758:	4019      	ands	r1, r3
 800175a:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800175c:	6811      	ldr	r1, [r2, #0]
 800175e:	400b      	ands	r3, r1
 8001760:	6013      	str	r3, [r2, #0]
    }
    
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8001762:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8001766:	b94b      	cbnz	r3, 800177c <HAL_COMP_Init+0x174>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8001768:	2301      	movs	r3, #1
 800176a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  HAL_StatusTypeDef status = HAL_OK;
 800176e:	2000      	movs	r0, #0
    }
  }
  
  return status;
}
 8001770:	b003      	add	sp, #12
 8001772:	bd30      	pop	{r4, r5, pc}
    status = HAL_ERROR;
 8001774:	2001      	movs	r0, #1
 8001776:	e7fb      	b.n	8001770 <HAL_COMP_Init+0x168>
    status = HAL_ERROR;
 8001778:	2001      	movs	r0, #1
 800177a:	e7f9      	b.n	8001770 <HAL_COMP_Init+0x168>
  HAL_StatusTypeDef status = HAL_OK;
 800177c:	2000      	movs	r0, #0
 800177e:	e7f7      	b.n	8001770 <HAL_COMP_Init+0x168>
 8001780:	ff207d03 	.word	0xff207d03
 8001784:	40010204 	.word	0x40010204
 8001788:	20000048 	.word	0x20000048
 800178c:	053e2d63 	.word	0x053e2d63
 8001790:	40010200 	.word	0x40010200
 8001794:	40010400 	.word	0x40010400

08001798 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8001798:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 800179a:	2300      	movs	r3, #0
 800179c:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800179e:	b320      	cbz	r0, 80017ea <HAL_COMP_Start+0x52>
  {
    status = HAL_ERROR;
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80017a0:	6801      	ldr	r1, [r0, #0]
 80017a2:	680b      	ldr	r3, [r1, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	db22      	blt.n	80017ee <HAL_COMP_Start+0x56>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 80017a8:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d002      	beq.n	80017b8 <HAL_COMP_Start+0x20>
        wait_loop_index--;
      }
    }
    else
    {
      status = HAL_ERROR;
 80017b2:	2001      	movs	r0, #1
    }
  }

  return status;
}
 80017b4:	b002      	add	sp, #8
 80017b6:	4770      	bx	lr
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 80017b8:	680b      	ldr	r3, [r1, #0]
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	600b      	str	r3, [r1, #0]
      hcomp->State = HAL_COMP_STATE_BUSY;
 80017c0:	2302      	movs	r3, #2
 80017c2:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_COMP_Start+0x5c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	099b      	lsrs	r3, r3, #6
 80017cc:	4a0a      	ldr	r2, [pc, #40]	; (80017f8 <HAL_COMP_Start+0x60>)
 80017ce:	fba2 2303 	umull	r2, r3, r2, r3
 80017d2:	099b      	lsrs	r3, r3, #6
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 80017d8:	e002      	b.n	80017e0 <HAL_COMP_Start+0x48>
        wait_loop_index--;
 80017da:	9b01      	ldr	r3, [sp, #4]
 80017dc:	3b01      	subs	r3, #1
 80017de:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 80017e0:	9b01      	ldr	r3, [sp, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f9      	bne.n	80017da <HAL_COMP_Start+0x42>
  HAL_StatusTypeDef status = HAL_OK;
 80017e6:	2000      	movs	r0, #0
 80017e8:	e7e4      	b.n	80017b4 <HAL_COMP_Start+0x1c>
    status = HAL_ERROR;
 80017ea:	2001      	movs	r0, #1
 80017ec:	e7e2      	b.n	80017b4 <HAL_COMP_Start+0x1c>
    status = HAL_ERROR;
 80017ee:	2001      	movs	r0, #1
 80017f0:	e7e0      	b.n	80017b4 <HAL_COMP_Start+0x1c>
 80017f2:	bf00      	nop
 80017f4:	20000048 	.word	0x20000048
 80017f8:	053e2d63 	.word	0x053e2d63

080017fc <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 80017fc:	b508      	push	{r3, lr}
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80017fe:	6802      	ldr	r2, [r0, #0]
 8001800:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <HAL_COMP_IRQHandler+0x44>)
 8001802:	429a      	cmp	r2, r3
 8001804:	d014      	beq.n	8001830 <HAL_COMP_IRQHandler+0x34>
 8001806:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800180a:	4a0e      	ldr	r2, [pc, #56]	; (8001844 <HAL_COMP_IRQHandler+0x48>)
 800180c:	6952      	ldr	r2, [r2, #20]
 800180e:	ea33 0202 	bics.w	r2, r3, r2
 8001812:	d010      	beq.n	8001836 <HAL_COMP_IRQHandler+0x3a>
 8001814:	2200      	movs	r2, #0
  
  /* Check COMP EXTI flag */
  if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 8001816:	b152      	cbz	r2, 800182e <HAL_COMP_IRQHandler+0x32>
  {
#if defined(COMP2)
    /* Check whether comparator is in independent or window mode */
    if(READ_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE) != RESET)
 8001818:	4a0b      	ldr	r2, [pc, #44]	; (8001848 <HAL_COMP_IRQHandler+0x4c>)
 800181a:	6812      	ldr	r2, [r2, #0]
 800181c:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001820:	d00b      	beq.n	800183a <HAL_COMP_IRQHandler+0x3e>
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001822:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8001826:	4b07      	ldr	r3, [pc, #28]	; (8001844 <HAL_COMP_IRQHandler+0x48>)
 8001828:	615a      	str	r2, [r3, #20]
    
    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800182a:	f00d fa01 	bl	800ec30 <HAL_COMP_TriggerCallback>
 800182e:	bd08      	pop	{r3, pc}
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8001830:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001834:	e7e9      	b.n	800180a <HAL_COMP_IRQHandler+0xe>
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001836:	2201      	movs	r2, #1
 8001838:	e7ed      	b.n	8001816 <HAL_COMP_IRQHandler+0x1a>
  WRITE_REG(EXTI->PR1, ExtiLine);
 800183a:	4a02      	ldr	r2, [pc, #8]	; (8001844 <HAL_COMP_IRQHandler+0x48>)
 800183c:	6153      	str	r3, [r2, #20]
 800183e:	e7f4      	b.n	800182a <HAL_COMP_IRQHandler+0x2e>
 8001840:	40010200 	.word	0x40010200
 8001844:	40010400 	.word	0x40010400
 8001848:	40010204 	.word	0x40010204

0800184c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800184c:	4a07      	ldr	r2, [pc, #28]	; (800186c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800184e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001850:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001854:	041b      	lsls	r3, r3, #16
 8001856:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001858:	0200      	lsls	r0, r0, #8
 800185a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800185e:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001860:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001864:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001868:	60d0      	str	r0, [r2, #12]
 800186a:	4770      	bx	lr
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001870:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001872:	4b16      	ldr	r3, [pc, #88]	; (80018cc <HAL_NVIC_SetPriority+0x5c>)
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800187a:	f1c3 0407 	rsb	r4, r3, #7
 800187e:	2c04      	cmp	r4, #4
 8001880:	bf28      	it	cs
 8001882:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001884:	1d1d      	adds	r5, r3, #4
 8001886:	2d06      	cmp	r5, #6
 8001888:	d917      	bls.n	80018ba <HAL_NVIC_SetPriority+0x4a>
 800188a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800188c:	2501      	movs	r5, #1
 800188e:	fa05 f404 	lsl.w	r4, r5, r4
 8001892:	3c01      	subs	r4, #1
 8001894:	4021      	ands	r1, r4
 8001896:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001898:	fa05 f303 	lsl.w	r3, r5, r3
 800189c:	3b01      	subs	r3, #1
 800189e:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 80018a2:	2800      	cmp	r0, #0
 80018a4:	db0b      	blt.n	80018be <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a6:	0109      	lsls	r1, r1, #4
 80018a8:	b2c9      	uxtb	r1, r1
 80018aa:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80018ae:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80018b2:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80018b6:	bc30      	pop	{r4, r5}
 80018b8:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ba:	2300      	movs	r3, #0
 80018bc:	e7e6      	b.n	800188c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018be:	f000 000f 	and.w	r0, r0, #15
 80018c2:	0109      	lsls	r1, r1, #4
 80018c4:	b2c9      	uxtb	r1, r1
 80018c6:	4b02      	ldr	r3, [pc, #8]	; (80018d0 <HAL_NVIC_SetPriority+0x60>)
 80018c8:	5419      	strb	r1, [r3, r0]
 80018ca:	e7f4      	b.n	80018b6 <HAL_NVIC_SetPriority+0x46>
 80018cc:	e000ed00 	.word	0xe000ed00
 80018d0:	e000ed14 	.word	0xe000ed14

080018d4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80018d4:	0942      	lsrs	r2, r0, #5
 80018d6:	f000 001f 	and.w	r0, r0, #31
 80018da:	2301      	movs	r3, #1
 80018dc:	fa03 f000 	lsl.w	r0, r3, r0
 80018e0:	4b01      	ldr	r3, [pc, #4]	; (80018e8 <HAL_NVIC_EnableIRQ+0x14>)
 80018e2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80018e6:	4770      	bx	lr
 80018e8:	e000e100 	.word	0xe000e100

080018ec <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
  /* Check DAC handle */
  if(hdac == NULL)
 80018ec:	b170      	cbz	r0, 800190c <HAL_DAC_Init+0x20>
{
 80018ee:	b510      	push	{r4, lr}
 80018f0:	4604      	mov	r4, r0
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 80018f2:	7903      	ldrb	r3, [r0, #4]
 80018f4:	b133      	cbz	r3, 8001904 <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80018f6:	2302      	movs	r3, #2
 80018f8:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80018fa:	2000      	movs	r0, #0
 80018fc:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80018fe:	2301      	movs	r3, #1
 8001900:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8001902:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8001904:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8001906:	f00b fe57 	bl	800d5b8 <HAL_DAC_MspInit>
 800190a:	e7f4      	b.n	80018f6 <HAL_DAC_Init+0xa>
     return HAL_ERROR;
 800190c:	2001      	movs	r0, #1
 800190e:	4770      	bx	lr

08001910 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001910:	7943      	ldrb	r3, [r0, #5]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d02a      	beq.n	800196c <HAL_DAC_Start+0x5c>
{
 8001916:	b430      	push	{r4, r5}
  __HAL_LOCK(hdac);
 8001918:	2301      	movs	r3, #1
 800191a:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800191c:	2202      	movs	r2, #2
 800191e:	7102      	strb	r2, [r0, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001920:	6804      	ldr	r4, [r0, #0]
 8001922:	6822      	ldr	r2, [r4, #0]
 8001924:	f001 0510 	and.w	r5, r1, #16
 8001928:	40ab      	lsls	r3, r5
 800192a:	4313      	orrs	r3, r2
 800192c:	6023      	str	r3, [r4, #0]

#if defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(Channel == DAC_CHANNEL_1)
 800192e:	b989      	cbnz	r1, 8001954 <HAL_DAC_Start+0x44>
  {
    /* Check if software trigger enabled */
    if(((DAC_CR_TEN1 & ~(DAC_CR_TSEL1)) == (hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1))))
 8001930:	6802      	ldr	r2, [r0, #0]
 8001932:	6813      	ldr	r3, [r2, #0]
 8001934:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001938:	2b02      	cmp	r3, #2
 800193a:	d006      	beq.n	800194a <HAL_DAC_Start+0x3a>
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800193c:	2301      	movs	r3, #1
 800193e:	7103      	strb	r3, [r0, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001940:	2300      	movs	r3, #0
 8001942:	7143      	strb	r3, [r0, #5]

  /* Return function status */
  return HAL_OK;
 8001944:	4618      	mov	r0, r3
}
 8001946:	bc30      	pop	{r4, r5}
 8001948:	4770      	bx	lr
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800194a:	6853      	ldr	r3, [r2, #4]
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	6053      	str	r3, [r2, #4]
 8001952:	e7f3      	b.n	800193c <HAL_DAC_Start+0x2c>
    if(((DAC_CR_TEN2 & ~(DAC_CR_TSEL2)) == (hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2))))
 8001954:	6802      	ldr	r2, [r0, #0]
 8001956:	6813      	ldr	r3, [r2, #0]
 8001958:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
 800195c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001960:	d1ec      	bne.n	800193c <HAL_DAC_Start+0x2c>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001962:	6853      	ldr	r3, [r2, #4]
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	6053      	str	r3, [r2, #4]
 800196a:	e7e7      	b.n	800193c <HAL_DAC_Start+0x2c>
  __HAL_LOCK(hdac);
 800196c:	2002      	movs	r0, #2
 800196e:	4770      	bx	lr

08001970 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8001970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001972:	9d06      	ldr	r5, [sp, #24]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001974:	7944      	ldrb	r4, [r0, #5]
 8001976:	2c01      	cmp	r4, #1
 8001978:	d06d      	beq.n	8001a56 <HAL_DAC_Start_DMA+0xe6>
 800197a:	2401      	movs	r4, #1
 800197c:	7144      	strb	r4, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800197e:	2402      	movs	r4, #2
 8001980:	7104      	strb	r4, [r0, #4]

  if(Channel == DAC_CHANNEL_1)
 8001982:	2900      	cmp	r1, #0
 8001984:	d134      	bne.n	80019f0 <HAL_DAC_Start_DMA+0x80>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001986:	6884      	ldr	r4, [r0, #8]
 8001988:	4e34      	ldr	r6, [pc, #208]	; (8001a5c <HAL_DAC_Start_DMA+0xec>)
 800198a:	62e6      	str	r6, [r4, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800198c:	6884      	ldr	r4, [r0, #8]
 800198e:	4e34      	ldr	r6, [pc, #208]	; (8001a60 <HAL_DAC_Start_DMA+0xf0>)
 8001990:	6326      	str	r6, [r4, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001992:	6884      	ldr	r4, [r0, #8]
 8001994:	4e33      	ldr	r6, [pc, #204]	; (8001a64 <HAL_DAC_Start_DMA+0xf4>)
 8001996:	6366      	str	r6, [r4, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001998:	6806      	ldr	r6, [r0, #0]
 800199a:	6834      	ldr	r4, [r6, #0]
 800199c:	f444 5480 	orr.w	r4, r4, #4096	; 0x1000
 80019a0:	6034      	str	r4, [r6, #0]

    /* Case of use of channel 1 */
    switch(Alignment)
 80019a2:	2d04      	cmp	r5, #4
 80019a4:	d01e      	beq.n	80019e4 <HAL_DAC_Start_DMA+0x74>
 80019a6:	2d08      	cmp	r5, #8
 80019a8:	d01f      	beq.n	80019ea <HAL_DAC_Start_DMA+0x7a>
 80019aa:	b1c5      	cbz	r5, 80019de <HAL_DAC_Start_DMA+0x6e>
  uint32_t tmpreg = 0U;
 80019ac:	460d      	mov	r5, r1
 80019ae:	4616      	mov	r6, r2
 80019b0:	460f      	mov	r7, r1
 80019b2:	4604      	mov	r4, r0
        break;
    }
  }

  /* Enable the DMA channel */
  if(Channel == DAC_CHANNEL_1)
 80019b4:	2900      	cmp	r1, #0
 80019b6:	d139      	bne.n	8001a2c <HAL_DAC_Start_DMA+0xbc>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80019b8:	6801      	ldr	r1, [r0, #0]
 80019ba:	680a      	ldr	r2, [r1, #0]
 80019bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019c0:	600a      	str	r2, [r1, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80019c2:	462a      	mov	r2, r5
 80019c4:	4631      	mov	r1, r6
 80019c6:	6880      	ldr	r0, [r0, #8]
 80019c8:	f000 fa44 	bl	8001e54 <HAL_DMA_Start_IT>
    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80019cc:	2300      	movs	r3, #0
 80019ce:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 80019d0:	2800      	cmp	r0, #0
 80019d2:	d036      	beq.n	8001a42 <HAL_DAC_Start_DMA+0xd2>
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80019d4:	6923      	ldr	r3, [r4, #16]
 80019d6:	f043 0304 	orr.w	r3, r3, #4
 80019da:	6123      	str	r3, [r4, #16]
 80019dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80019de:	6805      	ldr	r5, [r0, #0]
 80019e0:	3508      	adds	r5, #8
        break;
 80019e2:	e7e4      	b.n	80019ae <HAL_DAC_Start_DMA+0x3e>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80019e4:	6805      	ldr	r5, [r0, #0]
 80019e6:	350c      	adds	r5, #12
        break;
 80019e8:	e7e1      	b.n	80019ae <HAL_DAC_Start_DMA+0x3e>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80019ea:	6805      	ldr	r5, [r0, #0]
 80019ec:	3510      	adds	r5, #16
        break;
 80019ee:	e7de      	b.n	80019ae <HAL_DAC_Start_DMA+0x3e>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80019f0:	68c4      	ldr	r4, [r0, #12]
 80019f2:	4e1d      	ldr	r6, [pc, #116]	; (8001a68 <HAL_DAC_Start_DMA+0xf8>)
 80019f4:	62e6      	str	r6, [r4, #44]	; 0x2c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80019f6:	68c4      	ldr	r4, [r0, #12]
 80019f8:	4e1c      	ldr	r6, [pc, #112]	; (8001a6c <HAL_DAC_Start_DMA+0xfc>)
 80019fa:	6326      	str	r6, [r4, #48]	; 0x30
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80019fc:	68c4      	ldr	r4, [r0, #12]
 80019fe:	4e1c      	ldr	r6, [pc, #112]	; (8001a70 <HAL_DAC_Start_DMA+0x100>)
 8001a00:	6366      	str	r6, [r4, #52]	; 0x34
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001a02:	6806      	ldr	r6, [r0, #0]
 8001a04:	6834      	ldr	r4, [r6, #0]
 8001a06:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8001a0a:	6034      	str	r4, [r6, #0]
    switch(Alignment)
 8001a0c:	2d04      	cmp	r5, #4
 8001a0e:	d007      	beq.n	8001a20 <HAL_DAC_Start_DMA+0xb0>
 8001a10:	2d08      	cmp	r5, #8
 8001a12:	d008      	beq.n	8001a26 <HAL_DAC_Start_DMA+0xb6>
 8001a14:	b10d      	cbz	r5, 8001a1a <HAL_DAC_Start_DMA+0xaa>
  uint32_t tmpreg = 0U;
 8001a16:	2500      	movs	r5, #0
 8001a18:	e7c9      	b.n	80019ae <HAL_DAC_Start_DMA+0x3e>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001a1a:	6805      	ldr	r5, [r0, #0]
 8001a1c:	3514      	adds	r5, #20
        break;
 8001a1e:	e7c6      	b.n	80019ae <HAL_DAC_Start_DMA+0x3e>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001a20:	6805      	ldr	r5, [r0, #0]
 8001a22:	3518      	adds	r5, #24
        break;
 8001a24:	e7c3      	b.n	80019ae <HAL_DAC_Start_DMA+0x3e>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001a26:	6805      	ldr	r5, [r0, #0]
 8001a28:	351c      	adds	r5, #28
        break;
 8001a2a:	e7c0      	b.n	80019ae <HAL_DAC_Start_DMA+0x3e>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001a2c:	6801      	ldr	r1, [r0, #0]
 8001a2e:	680a      	ldr	r2, [r1, #0]
 8001a30:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001a34:	600a      	str	r2, [r1, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001a36:	462a      	mov	r2, r5
 8001a38:	4631      	mov	r1, r6
 8001a3a:	68c0      	ldr	r0, [r0, #12]
 8001a3c:	f000 fa0a 	bl	8001e54 <HAL_DMA_Start_IT>
 8001a40:	e7c4      	b.n	80019cc <HAL_DAC_Start_DMA+0x5c>
    __HAL_DAC_ENABLE(hdac, Channel);
 8001a42:	6824      	ldr	r4, [r4, #0]
 8001a44:	6823      	ldr	r3, [r4, #0]
 8001a46:	f007 0110 	and.w	r1, r7, #16
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	fa02 f101 	lsl.w	r1, r2, r1
 8001a50:	4319      	orrs	r1, r3
 8001a52:	6021      	str	r1, [r4, #0]
 8001a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hdac);
 8001a56:	2002      	movs	r0, #2
  }

  /* Return function status */
  return status;
}
 8001a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	08001a75 	.word	0x08001a75
 8001a60:	08001a87 	.word	0x08001a87
 8001a64:	08001a93 	.word	0x08001a93
 8001a68:	08001c91 	.word	0x08001c91
 8001a6c:	08001ca1 	.word	0x08001ca1
 8001a70:	08001cab 	.word	0x08001cab

08001a74 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001a74:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a76:	6a84      	ldr	r4, [r0, #40]	; 0x28

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f00f f95b 	bl	8010d34 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	7123      	strb	r3, [r4, #4]
 8001a82:	bd10      	pop	{r4, pc}

08001a84 <HAL_DAC_ConvHalfCpltCallbackCh1>:
{
 8001a84:	4770      	bx	lr

08001a86 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001a86:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001a88:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001a8a:	f7ff fffb 	bl	8001a84 <HAL_DAC_ConvHalfCpltCallbackCh1>
 8001a8e:	bd08      	pop	{r3, pc}

08001a90 <HAL_DAC_ErrorCallbackCh1>:
{
 8001a90:	4770      	bx	lr

08001a92 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001a92:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a94:	6a84      	ldr	r4, [r0, #40]	; 0x28

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001a96:	6923      	ldr	r3, [r4, #16]
 8001a98:	f043 0304 	orr.w	r3, r3, #4
 8001a9c:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	f7ff fff6 	bl	8001a90 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	7123      	strb	r3, [r4, #4]
 8001aa8:	bd10      	pop	{r4, pc}

08001aaa <HAL_DAC_DMAUnderrunCallbackCh1>:
{
 8001aaa:	4770      	bx	lr

08001aac <HAL_DAC_IRQHandler>:
{
 8001aac:	b510      	push	{r4, lr}
 8001aae:	4604      	mov	r4, r0
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001ab0:	6803      	ldr	r3, [r0, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8001ab8:	d003      	beq.n	8001ac2 <HAL_DAC_IRQHandler+0x16>
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001abc:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8001ac0:	d109      	bne.n	8001ad6 <HAL_DAC_IRQHandler+0x2a>
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001ac2:	6823      	ldr	r3, [r4, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8001aca:	d003      	beq.n	8001ad4 <HAL_DAC_IRQHandler+0x28>
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ace:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8001ad2:	d111      	bne.n	8001af8 <HAL_DAC_IRQHandler+0x4c>
 8001ad4:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8001ad6:	2204      	movs	r2, #4
 8001ad8:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001ada:	6902      	ldr	r2, [r0, #16]
 8001adc:	f042 0201 	orr.w	r2, r2, #1
 8001ae0:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8001ae2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ae6:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001ae8:	6802      	ldr	r2, [r0, #0]
 8001aea:	6813      	ldr	r3, [r2, #0]
 8001aec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001af0:	6013      	str	r3, [r2, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001af2:	f7ff ffda 	bl	8001aaa <HAL_DAC_DMAUnderrunCallbackCh1>
 8001af6:	e7e4      	b.n	8001ac2 <HAL_DAC_IRQHandler+0x16>
      hdac->State = HAL_DAC_STATE_ERROR;
 8001af8:	2204      	movs	r2, #4
 8001afa:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001afc:	6922      	ldr	r2, [r4, #16]
 8001afe:	f042 0202 	orr.w	r2, r2, #2
 8001b02:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8001b04:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b08:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001b0a:	6822      	ldr	r2, [r4, #0]
 8001b0c:	6813      	ldr	r3, [r2, #0]
 8001b0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b12:	6013      	str	r3, [r2, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001b14:	4620      	mov	r0, r4
 8001b16:	f000 f8ba 	bl	8001c8e <HAL_DACEx_DMAUnderrunCallbackCh2>
}
 8001b1a:	e7db      	b.n	8001ad4 <HAL_DAC_IRQHandler+0x28>

08001b1c <HAL_DAC_ConfigChannel>:
{
 8001b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdac);
 8001b1e:	7943      	ldrb	r3, [r0, #5]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	f000 80ac 	beq.w	8001c7e <HAL_DAC_ConfigChannel+0x162>
 8001b26:	4615      	mov	r5, r2
 8001b28:	460e      	mov	r6, r1
 8001b2a:	4604      	mov	r4, r0
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b30:	2302      	movs	r3, #2
 8001b32:	7103      	strb	r3, [r0, #4]
  if(sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001b34:	684b      	ldr	r3, [r1, #4]
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d03c      	beq.n	8001bb4 <HAL_DAC_ConfigChannel+0x98>
  if(sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001b3a:	6973      	ldr	r3, [r6, #20]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	f000 8083 	beq.w	8001c48 <HAL_DAC_ConfigChannel+0x12c>
  tmpreg1 = hdac->Instance->MCR;
 8001b42:	6821      	ldr	r1, [r4, #0]
 8001b44:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001b46:	f005 0510 	and.w	r5, r5, #16
 8001b4a:	2207      	movs	r2, #7
 8001b4c:	40aa      	lsls	r2, r5
 8001b4e:	ea23 0202 	bic.w	r2, r3, r2
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001b52:	6873      	ldr	r3, [r6, #4]
 8001b54:	68f0      	ldr	r0, [r6, #12]
 8001b56:	4303      	orrs	r3, r0
 8001b58:	6930      	ldr	r0, [r6, #16]
 8001b5a:	4303      	orrs	r3, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b5c:	40ab      	lsls	r3, r5
 8001b5e:	4313      	orrs	r3, r2
  hdac->Instance->MCR = tmpreg1;
 8001b60:	63cb      	str	r3, [r1, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001b62:	6821      	ldr	r1, [r4, #0]
 8001b64:	680b      	ldr	r3, [r1, #0]
 8001b66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b6a:	40aa      	lsls	r2, r5
 8001b6c:	ea23 0302 	bic.w	r3, r3, r2
 8001b70:	600b      	str	r3, [r1, #0]
  tmpreg1 = hdac->Instance->CR;
 8001b72:	6823      	ldr	r3, [r4, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001b76:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001b7a:	40aa      	lsls	r2, r5
 8001b7c:	ea23 0302 	bic.w	r3, r3, r2
  tmpreg2 = sConfig->DAC_Trigger;
 8001b80:	68b7      	ldr	r7, [r6, #8]
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b82:	40af      	lsls	r7, r5
 8001b84:	431f      	orrs	r7, r3
  if(DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8001b86:	6833      	ldr	r3, [r6, #0]
 8001b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b8c:	d069      	beq.n	8001c62 <HAL_DAC_ConfigChannel+0x146>
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d16a      	bne.n	8001c68 <HAL_DAC_ConfigChannel+0x14c>
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8001b92:	f427 4700 	bic.w	r7, r7, #32768	; 0x8000
  hdac->Instance->CR = tmpreg1;
 8001b96:	6822      	ldr	r2, [r4, #0]
 8001b98:	6017      	str	r7, [r2, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001b9a:	6821      	ldr	r1, [r4, #0]
 8001b9c:	680b      	ldr	r3, [r1, #0]
 8001b9e:	22c0      	movs	r2, #192	; 0xc0
 8001ba0:	fa02 f505 	lsl.w	r5, r2, r5
 8001ba4:	ea23 0505 	bic.w	r5, r3, r5
 8001ba8:	600d      	str	r5, [r1, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8001baa:	2301      	movs	r3, #1
 8001bac:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 8001bae:	2000      	movs	r0, #0
 8001bb0:	7160      	strb	r0, [r4, #5]
  return HAL_OK;
 8001bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Channel == DAC_CHANNEL_1)
 8001bb4:	b172      	cbz	r2, 8001bd4 <HAL_DAC_ConfigChannel+0xb8>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001bb6:	6823      	ldr	r3, [r4, #0]
 8001bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	da25      	bge.n	8001c0a <HAL_DAC_ConfigChannel+0xee>
        if((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001bbe:	f7ff f9bf 	bl	8000f40 <HAL_GetTick>
 8001bc2:	2801      	cmp	r0, #1
 8001bc4:	d9f7      	bls.n	8001bb6 <HAL_DAC_ConfigChannel+0x9a>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001bc6:	6923      	ldr	r3, [r4, #16]
 8001bc8:	f043 0308 	orr.w	r3, r3, #8
 8001bcc:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001bce:	2003      	movs	r0, #3
 8001bd0:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 8001bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tickstart = HAL_GetTick();
 8001bd4:	f7ff f9b4 	bl	8000f40 <HAL_GetTick>
 8001bd8:	4607      	mov	r7, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001bda:	6823      	ldr	r3, [r4, #0]
 8001bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bde:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001be2:	d00b      	beq.n	8001bfc <HAL_DAC_ConfigChannel+0xe0>
        if((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001be4:	f7ff f9ac 	bl	8000f40 <HAL_GetTick>
 8001be8:	1bc0      	subs	r0, r0, r7
 8001bea:	2801      	cmp	r0, #1
 8001bec:	d9f5      	bls.n	8001bda <HAL_DAC_ConfigChannel+0xbe>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001bee:	6923      	ldr	r3, [r4, #16]
 8001bf0:	f043 0308 	orr.w	r3, r3, #8
 8001bf4:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001bf6:	2003      	movs	r0, #3
 8001bf8:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 8001bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      HAL_Delay(1);
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	f7ff f9a5 	bl	8000f4c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001c02:	6823      	ldr	r3, [r4, #0]
 8001c04:	69f2      	ldr	r2, [r6, #28]
 8001c06:	641a      	str	r2, [r3, #64]	; 0x40
 8001c08:	e005      	b.n	8001c16 <HAL_DAC_ConfigChannel+0xfa>
      HAL_Delay(1);
 8001c0a:	2001      	movs	r0, #1
 8001c0c:	f7ff f99e 	bl	8000f4c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001c10:	6823      	ldr	r3, [r4, #0]
 8001c12:	69f2      	ldr	r2, [r6, #28]
 8001c14:	645a      	str	r2, [r3, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001c16:	6820      	ldr	r0, [r4, #0]
 8001c18:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001c1a:	f005 0210 	and.w	r2, r5, #16
 8001c1e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001c22:	4091      	lsls	r1, r2
 8001c24:	ea23 0301 	bic.w	r3, r3, r1
 8001c28:	6a31      	ldr	r1, [r6, #32]
 8001c2a:	4091      	lsls	r1, r2
 8001c2c:	430b      	orrs	r3, r1
 8001c2e:	6483      	str	r3, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001c30:	6820      	ldr	r0, [r4, #0]
 8001c32:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001c34:	21ff      	movs	r1, #255	; 0xff
 8001c36:	4091      	lsls	r1, r2
 8001c38:	ea23 0301 	bic.w	r3, r3, r1
 8001c3c:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8001c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c42:	4313      	orrs	r3, r2
 8001c44:	64c3      	str	r3, [r0, #76]	; 0x4c
 8001c46:	e778      	b.n	8001b3a <HAL_DAC_ConfigChannel+0x1e>
  tmpreg1 = hdac->Instance->CCR;
 8001c48:	6820      	ldr	r0, [r4, #0]
 8001c4a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001c4c:	f005 0710 	and.w	r7, r5, #16
 8001c50:	211f      	movs	r1, #31
 8001c52:	40b9      	lsls	r1, r7
 8001c54:	ea23 0301 	bic.w	r3, r3, r1
  tmpreg2 = sConfig->DAC_TrimmingValue;
 8001c58:	69b2      	ldr	r2, [r6, #24]
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001c5a:	40ba      	lsls	r2, r7
 8001c5c:	4313      	orrs	r3, r2
  hdac->Instance->CCR = tmpreg1;
 8001c5e:	6383      	str	r3, [r0, #56]	; 0x38
 8001c60:	e76f      	b.n	8001b42 <HAL_DAC_ConfigChannel+0x26>
    tmpreg1 |= DAC_CR_HFSEL;
 8001c62:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 8001c66:	e796      	b.n	8001b96 <HAL_DAC_ConfigChannel+0x7a>
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8001c68:	f002 fbd4 	bl	8004414 <HAL_RCC_GetHCLKFreq>
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <HAL_DAC_ConfigChannel+0x168>)
 8001c6e:	4298      	cmp	r0, r3
 8001c70:	d902      	bls.n	8001c78 <HAL_DAC_ConfigChannel+0x15c>
         tmpreg1 |= DAC_CR_HFSEL;
 8001c72:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 8001c76:	e78e      	b.n	8001b96 <HAL_DAC_ConfigChannel+0x7a>
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8001c78:	f427 4700 	bic.w	r7, r7, #32768	; 0x8000
 8001c7c:	e78b      	b.n	8001b96 <HAL_DAC_ConfigChannel+0x7a>
  __HAL_LOCK(hdac);
 8001c7e:	2002      	movs	r0, #2
}
 8001c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c82:	bf00      	nop
 8001c84:	04c4b400 	.word	0x04c4b400

08001c88 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8001c88:	4770      	bx	lr

08001c8a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8001c8a:	4770      	bx	lr

08001c8c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001c8c:	4770      	bx	lr

08001c8e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001c8e:	4770      	bx	lr

08001c90 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001c90:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c92:	6a84      	ldr	r4, [r0, #40]	; 0x28

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001c94:	4620      	mov	r0, r4
 8001c96:	f7ff fff7 	bl	8001c88 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State= HAL_DAC_STATE_READY;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	7123      	strb	r3, [r4, #4]
 8001c9e:	bd10      	pop	{r4, pc}

08001ca0 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001ca0:	b508      	push	{r3, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001ca2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001ca4:	f7ff fff1 	bl	8001c8a <HAL_DACEx_ConvHalfCpltCallbackCh2>
 8001ca8:	bd08      	pop	{r3, pc}

08001caa <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001caa:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cac:	6a84      	ldr	r4, [r0, #40]	; 0x28

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001cae:	6923      	ldr	r3, [r4, #16]
 8001cb0:	f043 0304 	orr.w	r3, r3, #4
 8001cb4:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001cb6:	4620      	mov	r0, r4
 8001cb8:	f7ff ffe8 	bl	8001c8c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State= HAL_DAC_STATE_READY;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	7123      	strb	r3, [r4, #4]
 8001cc0:	bd10      	pop	{r4, pc}

08001cc2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cc2:	b470      	push	{r4, r5, r6}
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cc4:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8001cc6:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8001cc8:	6065      	str	r5, [r4, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001cca:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8001ccc:	b114      	cbz	r4, 8001cd4 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cce:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8001cd0:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8001cd2:	6065      	str	r5, [r4, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001cd4:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8001cd6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001cd8:	f004 051c 	and.w	r5, r4, #28
 8001cdc:	2401      	movs	r4, #1
 8001cde:	40ac      	lsls	r4, r5
 8001ce0:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ce2:	6804      	ldr	r4, [r0, #0]
 8001ce4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ce6:	6883      	ldr	r3, [r0, #8]
 8001ce8:	2b10      	cmp	r3, #16
 8001cea:	d005      	beq.n	8001cf8 <DMA_SetConfig+0x36>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001cec:	6803      	ldr	r3, [r0, #0]
 8001cee:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001cf0:	6803      	ldr	r3, [r0, #0]
 8001cf2:	60da      	str	r2, [r3, #12]
  }
}
 8001cf4:	bc70      	pop	{r4, r5, r6}
 8001cf6:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8001cf8:	6803      	ldr	r3, [r0, #0]
 8001cfa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001cfc:	6803      	ldr	r3, [r0, #0]
 8001cfe:	60d9      	str	r1, [r3, #12]
 8001d00:	e7f8      	b.n	8001cf4 <DMA_SetConfig+0x32>
	...

08001d04 <DMA_CalcDMAMUXChannelBaseAndMask>:
{
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001d04:	6803      	ldr	r3, [r0, #0]
 8001d06:	4a0d      	ldr	r2, [pc, #52]	; (8001d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d914      	bls.n	8001d36 <DMA_CalcDMAMUXChannelBaseAndMask+0x32>
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
  }
  else
  {
    /* DMA2 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
 8001d0c:	490c      	ldr	r1, [pc, #48]	; (8001d40 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
  }
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	3b08      	subs	r3, #8
 8001d12:	4a0c      	ldr	r2, [pc, #48]	; (8001d44 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 8001d14:	fba2 2303 	umull	r2, r3, r2, r3
 8001d18:	091b      	lsrs	r3, r3, #4
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_ChannelBase + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001d1a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001d1c:	f022 0203 	bic.w	r2, r2, #3
 8001d20:	440a      	add	r2, r1
 8001d22:	6482      	str	r2, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001d24:	4a08      	ldr	r2, [pc, #32]	; (8001d48 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8001d26:	64c2      	str	r2, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001d28:	f003 031c 	and.w	r3, r3, #28
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	6503      	str	r3, [r0, #80]	; 0x50
 8001d34:	4770      	bx	lr
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001d36:	4905      	ldr	r1, [pc, #20]	; (8001d4c <DMA_CalcDMAMUXChannelBaseAndMask+0x48>)
 8001d38:	e7e9      	b.n	8001d0e <DMA_CalcDMAMUXChannelBaseAndMask+0xa>
 8001d3a:	bf00      	nop
 8001d3c:	40020407 	.word	0x40020407
 8001d40:	4002081c 	.word	0x4002081c
 8001d44:	cccccccd 	.word	0xcccccccd
 8001d48:	40020880 	.word	0x40020880
 8001d4c:	40020800 	.word	0x40020800

08001d50 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001d50:	7903      	ldrb	r3, [r0, #4]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d52:	4a07      	ldr	r2, [pc, #28]	; (8001d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 8001d54:	441a      	add	r2, r3
 8001d56:	0092      	lsls	r2, r2, #2
 8001d58:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001d5a:	4a06      	ldr	r2, [pc, #24]	; (8001d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8001d5c:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	2201      	movs	r2, #1
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	65c3      	str	r3, [r0, #92]	; 0x5c
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	1000823f 	.word	0x1000823f
 8001d74:	40020940 	.word	0x40020940

08001d78 <HAL_DMA_Init>:
  if(hdma == NULL)
 8001d78:	2800      	cmp	r0, #0
 8001d7a:	d05c      	beq.n	8001e36 <HAL_DMA_Init+0xbe>
{
 8001d7c:	b510      	push	{r4, lr}
 8001d7e:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001d80:	6802      	ldr	r2, [r0, #0]
 8001d82:	4b2e      	ldr	r3, [pc, #184]	; (8001e3c <HAL_DMA_Init+0xc4>)
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d83e      	bhi.n	8001e06 <HAL_DMA_Init+0x8e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d88:	4b2d      	ldr	r3, [pc, #180]	; (8001e40 <HAL_DMA_Init+0xc8>)
 8001d8a:	4413      	add	r3, r2
 8001d8c:	4a2d      	ldr	r2, [pc, #180]	; (8001e44 <HAL_DMA_Init+0xcc>)
 8001d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d92:	091b      	lsrs	r3, r3, #4
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001d98:	4b2b      	ldr	r3, [pc, #172]	; (8001e48 <HAL_DMA_Init+0xd0>)
 8001d9a:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 8001da2:	6821      	ldr	r1, [r4, #0]
 8001da4:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001da6:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8001daa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 8001dae:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db0:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 8001db2:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db4:	6920      	ldr	r0, [r4, #16]
 8001db6:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001db8:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dba:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dbc:	69a0      	ldr	r0, [r4, #24]
 8001dbe:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dc0:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dc2:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dc4:	6a20      	ldr	r0, [r4, #32]
 8001dc6:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8001dc8:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8001dca:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001dcc:	4620      	mov	r0, r4
 8001dce:	f7ff ff99 	bl	8001d04 <DMA_CalcDMAMUXChannelBaseAndMask>
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001dd2:	68a3      	ldr	r3, [r4, #8]
 8001dd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001dd8:	d020      	beq.n	8001e1c <HAL_DMA_Init+0xa4>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001dda:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001ddc:	7922      	ldrb	r2, [r4, #4]
 8001dde:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001de0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001de2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001de4:	605a      	str	r2, [r3, #4]
  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001de6:	6863      	ldr	r3, [r4, #4]
 8001de8:	3b01      	subs	r3, #1
 8001dea:	2b03      	cmp	r3, #3
 8001dec:	d919      	bls.n	8001e22 <HAL_DMA_Init+0xaa>
    hdma->DMAmuxRequestGen = 0U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001df2:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001df4:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001df6:	2000      	movs	r0, #0
 8001df8:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 8001e00:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  return HAL_OK;
 8001e04:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <HAL_DMA_Init+0xd4>)
 8001e08:	4413      	add	r3, r2
 8001e0a:	4a0e      	ldr	r2, [pc, #56]	; (8001e44 <HAL_DMA_Init+0xcc>)
 8001e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e10:	091b      	lsrs	r3, r3, #4
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001e16:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <HAL_DMA_Init+0xd8>)
 8001e18:	6403      	str	r3, [r0, #64]	; 0x40
 8001e1a:	e7bf      	b.n	8001d9c <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	6063      	str	r3, [r4, #4]
 8001e20:	e7db      	b.n	8001dda <HAL_DMA_Init+0x62>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e22:	4620      	mov	r0, r4
 8001e24:	f7ff ff94 	bl	8001d50 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e28:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001e30:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001e32:	605a      	str	r2, [r3, #4]
 8001e34:	e7df      	b.n	8001df6 <HAL_DMA_Init+0x7e>
    return HAL_ERROR;
 8001e36:	2001      	movs	r0, #1
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40020407 	.word	0x40020407
 8001e40:	bffdfff8 	.word	0xbffdfff8
 8001e44:	cccccccd 	.word	0xcccccccd
 8001e48:	40020000 	.word	0x40020000
 8001e4c:	bffdfbf8 	.word	0xbffdfbf8
 8001e50:	40020400 	.word	0x40020400

08001e54 <HAL_DMA_Start_IT>:
{
 8001e54:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 8001e56:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8001e5a:	2c01      	cmp	r4, #1
 8001e5c:	d042      	beq.n	8001ee4 <HAL_DMA_Start_IT+0x90>
 8001e5e:	2401      	movs	r4, #1
 8001e60:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e64:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8001e68:	b2e4      	uxtb	r4, r4
 8001e6a:	2c01      	cmp	r4, #1
 8001e6c:	d004      	beq.n	8001e78 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    status = HAL_BUSY;
 8001e74:	2002      	movs	r0, #2
 8001e76:	bd38      	pop	{r3, r4, r5, pc}
 8001e78:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e7a:	2002      	movs	r0, #2
 8001e7c:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e80:	2000      	movs	r0, #0
 8001e82:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001e84:	6825      	ldr	r5, [r4, #0]
 8001e86:	6828      	ldr	r0, [r5, #0]
 8001e88:	f020 0001 	bic.w	r0, r0, #1
 8001e8c:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e8e:	4620      	mov	r0, r4
 8001e90:	f7ff ff17 	bl	8001cc2 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8001e94:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e96:	b1d3      	cbz	r3, 8001ece <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e98:	6822      	ldr	r2, [r4, #0]
 8001e9a:	6813      	ldr	r3, [r2, #0]
 8001e9c:	f043 030e 	orr.w	r3, r3, #14
 8001ea0:	6013      	str	r3, [r2, #0]
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001ea2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001eaa:	d003      	beq.n	8001eb4 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eb2:	601a      	str	r2, [r3, #0]
    if(hdma->DMAmuxRequestGen != 0U)
 8001eb4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001eb6:	b11b      	cbz	r3, 8001ec0 <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ebe:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8001ec0:	6822      	ldr	r2, [r4, #0]
 8001ec2:	6813      	ldr	r3, [r2, #0]
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eca:	2000      	movs	r0, #0
 8001ecc:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ece:	6822      	ldr	r2, [r4, #0]
 8001ed0:	6813      	ldr	r3, [r2, #0]
 8001ed2:	f023 0304 	bic.w	r3, r3, #4
 8001ed6:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ed8:	6822      	ldr	r2, [r4, #0]
 8001eda:	6813      	ldr	r3, [r2, #0]
 8001edc:	f043 030a 	orr.w	r3, r3, #10
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	e7de      	b.n	8001ea2 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8001ee4:	2002      	movs	r0, #2
}
 8001ee6:	bd38      	pop	{r3, r4, r5, pc}

08001ee8 <HAL_DMA_Abort_IT>:
{
 8001ee8:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001eea:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d003      	beq.n	8001efc <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ef4:	2304      	movs	r3, #4
 8001ef6:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8001ef8:	2001      	movs	r0, #1
 8001efa:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001efc:	6802      	ldr	r2, [r0, #0]
 8001efe:	6813      	ldr	r3, [r2, #0]
 8001f00:	f023 030e 	bic.w	r3, r3, #14
 8001f04:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001f06:	6802      	ldr	r2, [r0, #0]
 8001f08:	6813      	ldr	r3, [r2, #0]
 8001f0a:	f023 0301 	bic.w	r3, r3, #1
 8001f0e:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f10:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8001f12:	6813      	ldr	r3, [r2, #0]
 8001f14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f18:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001f1a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001f1c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001f1e:	f003 021c 	and.w	r2, r3, #28
 8001f22:	2301      	movs	r3, #1
 8001f24:	4093      	lsls	r3, r2
 8001f26:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f28:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001f2a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001f2c:	605a      	str	r2, [r3, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8001f2e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001f30:	b133      	cbz	r3, 8001f40 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f38:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f3a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001f3c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001f3e:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001f40:	2301      	movs	r3, #1
 8001f42:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001f46:	2300      	movs	r3, #0
 8001f48:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8001f4c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001f4e:	b113      	cbz	r3, 8001f56 <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8001f50:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001f52:	2000      	movs	r0, #0
 8001f54:	bd08      	pop	{r3, pc}
 8001f56:	2000      	movs	r0, #0
}
 8001f58:	bd08      	pop	{r3, pc}

08001f5a <HAL_DMA_IRQHandler>:
{
 8001f5a:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f5c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001f5e:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001f60:	6804      	ldr	r4, [r0, #0]
 8001f62:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001f64:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001f66:	f003 031c 	and.w	r3, r3, #28
 8001f6a:	2204      	movs	r2, #4
 8001f6c:	409a      	lsls	r2, r3
 8001f6e:	4211      	tst	r1, r2
 8001f70:	d016      	beq.n	8001fa0 <HAL_DMA_IRQHandler+0x46>
 8001f72:	f015 0f04 	tst.w	r5, #4
 8001f76:	d013      	beq.n	8001fa0 <HAL_DMA_IRQHandler+0x46>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f78:	6823      	ldr	r3, [r4, #0]
 8001f7a:	f013 0f20 	tst.w	r3, #32
 8001f7e:	d103      	bne.n	8001f88 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f80:	6823      	ldr	r3, [r4, #0]
 8001f82:	f023 0304 	bic.w	r3, r3, #4
 8001f86:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001f88:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001f8a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001f8c:	f003 021c 	and.w	r2, r3, #28
 8001f90:	2304      	movs	r3, #4
 8001f92:	4093      	lsls	r3, r2
 8001f94:	604b      	str	r3, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8001f96:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d03e      	beq.n	800201a <HAL_DMA_IRQHandler+0xc0>
        hdma->XferHalfCpltCallback(hdma);
 8001f9c:	4798      	blx	r3
 8001f9e:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	409a      	lsls	r2, r3
 8001fa4:	4211      	tst	r1, r2
 8001fa6:	d01b      	beq.n	8001fe0 <HAL_DMA_IRQHandler+0x86>
 8001fa8:	f015 0f02 	tst.w	r5, #2
 8001fac:	d018      	beq.n	8001fe0 <HAL_DMA_IRQHandler+0x86>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fae:	6823      	ldr	r3, [r4, #0]
 8001fb0:	f013 0f20 	tst.w	r3, #32
 8001fb4:	d106      	bne.n	8001fc4 <HAL_DMA_IRQHandler+0x6a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001fb6:	6823      	ldr	r3, [r4, #0]
 8001fb8:	f023 030a 	bic.w	r3, r3, #10
 8001fbc:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001fc4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001fc6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001fc8:	f003 021c 	and.w	r2, r3, #28
 8001fcc:	2302      	movs	r3, #2
 8001fce:	4093      	lsls	r3, r2
 8001fd0:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8001fd8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001fda:	b1f3      	cbz	r3, 800201a <HAL_DMA_IRQHandler+0xc0>
      hdma->XferCpltCallback(hdma);
 8001fdc:	4798      	blx	r3
 8001fde:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001fe0:	2208      	movs	r2, #8
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	4219      	tst	r1, r3
 8001fe8:	d017      	beq.n	800201a <HAL_DMA_IRQHandler+0xc0>
 8001fea:	f015 0f08 	tst.w	r5, #8
 8001fee:	d014      	beq.n	800201a <HAL_DMA_IRQHandler+0xc0>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ff0:	6823      	ldr	r3, [r4, #0]
 8001ff2:	f023 030e 	bic.w	r3, r3, #14
 8001ff6:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001ff8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001ffa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001ffc:	f003 031c 	and.w	r3, r3, #28
 8002000:	2201      	movs	r2, #1
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002008:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800200a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800200e:	2300      	movs	r3, #0
 8002010:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8002014:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002016:	b103      	cbz	r3, 800201a <HAL_DMA_IRQHandler+0xc0>
      hdma->XferErrorCallback(hdma);
 8002018:	4798      	blx	r3
 800201a:	bd38      	pop	{r3, r4, r5, pc}

0800201c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800201c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800201e:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8002020:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002022:	e04a      	b.n	80020ba <HAL_GPIO_Init+0x9e>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002024:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8002028:	f10e 0e08 	add.w	lr, lr, #8
 800202c:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002030:	f003 0607 	and.w	r6, r3, #7
 8002034:	00b6      	lsls	r6, r6, #2
 8002036:	270f      	movs	r7, #15
 8002038:	40b7      	lsls	r7, r6
 800203a:	ea24 0407 	bic.w	r4, r4, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800203e:	690f      	ldr	r7, [r1, #16]
 8002040:	fa07 f606 	lsl.w	r6, r7, r6
 8002044:	4334      	orrs	r4, r6
        GPIOx->AFR[position >> 3u] = temp;
 8002046:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
 800204a:	e043      	b.n	80020d4 <HAL_GPIO_Init+0xb8>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800204c:	2607      	movs	r6, #7
 800204e:	e000      	b.n	8002052 <HAL_GPIO_Init+0x36>
 8002050:	2600      	movs	r6, #0
 8002052:	40be      	lsls	r6, r7
 8002054:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002056:	3402      	adds	r4, #2
 8002058:	4e5a      	ldr	r6, [pc, #360]	; (80021c4 <HAL_GPIO_Init+0x1a8>)
 800205a:	f846 5024 	str.w	r5, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800205e:	4c5a      	ldr	r4, [pc, #360]	; (80021c8 <HAL_GPIO_Init+0x1ac>)
 8002060:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8002062:	43d4      	mvns	r4, r2
 8002064:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002068:	684f      	ldr	r7, [r1, #4]
 800206a:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800206e:	d001      	beq.n	8002074 <HAL_GPIO_Init+0x58>
        {
          temp |= iocurrent;
 8002070:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 8002074:	4d54      	ldr	r5, [pc, #336]	; (80021c8 <HAL_GPIO_Init+0x1ac>)
 8002076:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 8002078:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800207a:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800207e:	684f      	ldr	r7, [r1, #4]
 8002080:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002084:	d001      	beq.n	800208a <HAL_GPIO_Init+0x6e>
        {
          temp |= iocurrent;
 8002086:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 800208a:	4d4f      	ldr	r5, [pc, #316]	; (80021c8 <HAL_GPIO_Init+0x1ac>)
 800208c:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800208e:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8002090:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002094:	684f      	ldr	r7, [r1, #4]
 8002096:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800209a:	d001      	beq.n	80020a0 <HAL_GPIO_Init+0x84>
        {
          temp |= iocurrent;
 800209c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80020a0:	4d49      	ldr	r5, [pc, #292]	; (80021c8 <HAL_GPIO_Init+0x1ac>)
 80020a2:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 80020a4:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 80020a6:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020a8:	684e      	ldr	r6, [r1, #4]
 80020aa:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80020ae:	d001      	beq.n	80020b4 <HAL_GPIO_Init+0x98>
        {
          temp |= iocurrent;
 80020b0:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 80020b4:	4a44      	ldr	r2, [pc, #272]	; (80021c8 <HAL_GPIO_Init+0x1ac>)
 80020b6:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 80020b8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ba:	680a      	ldr	r2, [r1, #0]
 80020bc:	fa32 f403 	lsrs.w	r4, r2, r3
 80020c0:	d07e      	beq.n	80021c0 <HAL_GPIO_Init+0x1a4>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020c2:	2501      	movs	r5, #1
 80020c4:	409d      	lsls	r5, r3
    if (iocurrent != 0x00u)
 80020c6:	402a      	ands	r2, r5
 80020c8:	d0f6      	beq.n	80020b8 <HAL_GPIO_Init+0x9c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020ca:	684c      	ldr	r4, [r1, #4]
 80020cc:	2c02      	cmp	r4, #2
 80020ce:	d0a9      	beq.n	8002024 <HAL_GPIO_Init+0x8>
 80020d0:	2c12      	cmp	r4, #18
 80020d2:	d0a7      	beq.n	8002024 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 80020d4:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020d6:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80020da:	2403      	movs	r4, #3
 80020dc:	fa04 f40e 	lsl.w	r4, r4, lr
 80020e0:	43e4      	mvns	r4, r4
 80020e2:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020e4:	684f      	ldr	r7, [r1, #4]
 80020e6:	f007 0703 	and.w	r7, r7, #3
 80020ea:	fa07 f70e 	lsl.w	r7, r7, lr
 80020ee:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 80020f0:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020f2:	684e      	ldr	r6, [r1, #4]
 80020f4:	1e77      	subs	r7, r6, #1
 80020f6:	2f01      	cmp	r7, #1
 80020f8:	d903      	bls.n	8002102 <HAL_GPIO_Init+0xe6>
 80020fa:	2e11      	cmp	r6, #17
 80020fc:	d001      	beq.n	8002102 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020fe:	2e12      	cmp	r6, #18
 8002100:	d10f      	bne.n	8002122 <HAL_GPIO_Init+0x106>
        temp = GPIOx->OSPEEDR;
 8002102:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002104:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002106:	68cf      	ldr	r7, [r1, #12]
 8002108:	fa07 f70e 	lsl.w	r7, r7, lr
 800210c:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 800210e:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8002110:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002112:	ea26 0505 	bic.w	r5, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002116:	684e      	ldr	r6, [r1, #4]
 8002118:	f3c6 1600 	ubfx	r6, r6, #4, #1
 800211c:	409e      	lsls	r6, r3
 800211e:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8002120:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8002122:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002124:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002126:	688d      	ldr	r5, [r1, #8]
 8002128:	fa05 f50e 	lsl.w	r5, r5, lr
 800212c:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 800212e:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002130:	684c      	ldr	r4, [r1, #4]
 8002132:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8002136:	d0bf      	beq.n	80020b8 <HAL_GPIO_Init+0x9c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002138:	4c24      	ldr	r4, [pc, #144]	; (80021cc <HAL_GPIO_Init+0x1b0>)
 800213a:	6e25      	ldr	r5, [r4, #96]	; 0x60
 800213c:	f045 0501 	orr.w	r5, r5, #1
 8002140:	6625      	str	r5, [r4, #96]	; 0x60
 8002142:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8002144:	f004 0401 	and.w	r4, r4, #1
 8002148:	9401      	str	r4, [sp, #4]
 800214a:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800214c:	089c      	lsrs	r4, r3, #2
 800214e:	1ca6      	adds	r6, r4, #2
 8002150:	4d1c      	ldr	r5, [pc, #112]	; (80021c4 <HAL_GPIO_Init+0x1a8>)
 8002152:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002156:	f003 0603 	and.w	r6, r3, #3
 800215a:	00b7      	lsls	r7, r6, #2
 800215c:	260f      	movs	r6, #15
 800215e:	40be      	lsls	r6, r7
 8002160:	ea25 0506 	bic.w	r5, r5, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002164:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8002168:	f43f af72 	beq.w	8002050 <HAL_GPIO_Init+0x34>
 800216c:	4e18      	ldr	r6, [pc, #96]	; (80021d0 <HAL_GPIO_Init+0x1b4>)
 800216e:	42b0      	cmp	r0, r6
 8002170:	d01a      	beq.n	80021a8 <HAL_GPIO_Init+0x18c>
 8002172:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002176:	42b0      	cmp	r0, r6
 8002178:	d018      	beq.n	80021ac <HAL_GPIO_Init+0x190>
 800217a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800217e:	42b0      	cmp	r0, r6
 8002180:	d016      	beq.n	80021b0 <HAL_GPIO_Init+0x194>
 8002182:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002186:	42b0      	cmp	r0, r6
 8002188:	d014      	beq.n	80021b4 <HAL_GPIO_Init+0x198>
 800218a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800218e:	42b0      	cmp	r0, r6
 8002190:	d012      	beq.n	80021b8 <HAL_GPIO_Init+0x19c>
 8002192:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002196:	42b0      	cmp	r0, r6
 8002198:	d010      	beq.n	80021bc <HAL_GPIO_Init+0x1a0>
 800219a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800219e:	42b0      	cmp	r0, r6
 80021a0:	f43f af54 	beq.w	800204c <HAL_GPIO_Init+0x30>
 80021a4:	2608      	movs	r6, #8
 80021a6:	e754      	b.n	8002052 <HAL_GPIO_Init+0x36>
 80021a8:	2601      	movs	r6, #1
 80021aa:	e752      	b.n	8002052 <HAL_GPIO_Init+0x36>
 80021ac:	2602      	movs	r6, #2
 80021ae:	e750      	b.n	8002052 <HAL_GPIO_Init+0x36>
 80021b0:	2603      	movs	r6, #3
 80021b2:	e74e      	b.n	8002052 <HAL_GPIO_Init+0x36>
 80021b4:	2604      	movs	r6, #4
 80021b6:	e74c      	b.n	8002052 <HAL_GPIO_Init+0x36>
 80021b8:	2605      	movs	r6, #5
 80021ba:	e74a      	b.n	8002052 <HAL_GPIO_Init+0x36>
 80021bc:	2606      	movs	r6, #6
 80021be:	e748      	b.n	8002052 <HAL_GPIO_Init+0x36>
  }
}
 80021c0:	b003      	add	sp, #12
 80021c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021c4:	40010000 	.word	0x40010000
 80021c8:	40010400 	.word	0x40010400
 80021cc:	40021000 	.word	0x40021000
 80021d0:	48000400 	.word	0x48000400

080021d4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80021d4:	6903      	ldr	r3, [r0, #16]
 80021d6:	4219      	tst	r1, r3
 80021d8:	d101      	bne.n	80021de <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021da:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80021dc:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 80021de:	2001      	movs	r0, #1
 80021e0:	4770      	bx	lr

080021e2 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021e2:	b90a      	cbnz	r2, 80021e8 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021e4:	6281      	str	r1, [r0, #40]	; 0x28
 80021e6:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021e8:	6181      	str	r1, [r0, #24]
 80021ea:	4770      	bx	lr

080021ec <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80021ec:	6943      	ldr	r3, [r0, #20]
 80021ee:	4059      	eors	r1, r3
 80021f0:	6141      	str	r1, [r0, #20]
 80021f2:	4770      	bx	lr

080021f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021f4:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021f6:	4b05      	ldr	r3, [pc, #20]	; (800220c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	4203      	tst	r3, r0
 80021fc:	d100      	bne.n	8002200 <HAL_GPIO_EXTI_IRQHandler+0xc>
 80021fe:	bd08      	pop	{r3, pc}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002200:	4b02      	ldr	r3, [pc, #8]	; (800220c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002202:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002204:	f00c fd18 	bl	800ec38 <HAL_GPIO_EXTI_Callback>
  }
}
 8002208:	e7f9      	b.n	80021fe <HAL_GPIO_EXTI_IRQHandler+0xa>
 800220a:	bf00      	nop
 800220c:	40010400 	.word	0x40010400

08002210 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002210:	6803      	ldr	r3, [r0, #0]
 8002212:	699a      	ldr	r2, [r3, #24]
 8002214:	f012 0f02 	tst.w	r2, #2
 8002218:	d001      	beq.n	800221e <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 800221a:	2200      	movs	r2, #0
 800221c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800221e:	6803      	ldr	r3, [r0, #0]
 8002220:	699a      	ldr	r2, [r3, #24]
 8002222:	f012 0f01 	tst.w	r2, #1
 8002226:	d103      	bne.n	8002230 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002228:	699a      	ldr	r2, [r3, #24]
 800222a:	f042 0201 	orr.w	r2, r2, #1
 800222e:	619a      	str	r2, [r3, #24]
 8002230:	4770      	bx	lr

08002232 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002232:	b470      	push	{r4, r5, r6}
 8002234:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002236:	6806      	ldr	r6, [r0, #0]
 8002238:	6870      	ldr	r0, [r6, #4]
 800223a:	0d6c      	lsrs	r4, r5, #21
 800223c:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8002240:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8002244:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8002248:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 800224c:	f044 0403 	orr.w	r4, r4, #3
 8002250:	ea20 0004 	bic.w	r0, r0, r4
 8002254:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002258:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800225c:	4319      	orrs	r1, r3
 800225e:	4329      	orrs	r1, r5
 8002260:	4308      	orrs	r0, r1
 8002262:	6070      	str	r0, [r6, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002264:	bc70      	pop	{r4, r5, r6}
 8002266:	4770      	bx	lr

08002268 <I2C_Enable_IRQ>:
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002268:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800226a:	4a1d      	ldr	r2, [pc, #116]	; (80022e0 <I2C_Enable_IRQ+0x78>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d019      	beq.n	80022a4 <I2C_Enable_IRQ+0x3c>
 8002270:	4a1c      	ldr	r2, [pc, #112]	; (80022e4 <I2C_Enable_IRQ+0x7c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d016      	beq.n	80022a4 <I2C_Enable_IRQ+0x3c>
      tmpisr |= I2C_IT_TCI;
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002276:	f011 0f04 	tst.w	r1, #4
 800227a:	d12c      	bne.n	80022d6 <I2C_Enable_IRQ+0x6e>
  uint32_t tmpisr = 0U;
 800227c:	2300      	movs	r3, #0
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800227e:	f011 0f01 	tst.w	r1, #1
 8002282:	d001      	beq.n	8002288 <I2C_Enable_IRQ+0x20>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002284:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002288:	f011 0f02 	tst.w	r1, #2
 800228c:	d001      	beq.n	8002292 <I2C_Enable_IRQ+0x2a>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800228e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8002292:	f001 0112 	and.w	r1, r1, #18
 8002296:	2912      	cmp	r1, #18
 8002298:	d01f      	beq.n	80022da <I2C_Enable_IRQ+0x72>
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800229a:	6802      	ldr	r2, [r0, #0]
 800229c:	6811      	ldr	r1, [r2, #0]
 800229e:	430b      	orrs	r3, r1
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	4770      	bx	lr
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80022a4:	f011 0f04 	tst.w	r1, #4
 80022a8:	d10d      	bne.n	80022c6 <I2C_Enable_IRQ+0x5e>
  uint32_t tmpisr = 0U;
 80022aa:	2300      	movs	r3, #0
    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80022ac:	f001 0211 	and.w	r2, r1, #17
 80022b0:	2a11      	cmp	r2, #17
 80022b2:	d00a      	beq.n	80022ca <I2C_Enable_IRQ+0x62>
 80022b4:	f001 0112 	and.w	r1, r1, #18
    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80022b8:	2912      	cmp	r1, #18
 80022ba:	d009      	beq.n	80022d0 <I2C_Enable_IRQ+0x68>
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 80022bc:	2912      	cmp	r1, #18
 80022be:	d1ec      	bne.n	800229a <I2C_Enable_IRQ+0x32>
      tmpisr |= I2C_IT_TCI;
 80022c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022c4:	e7e9      	b.n	800229a <I2C_Enable_IRQ+0x32>
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80022c6:	23b8      	movs	r3, #184	; 0xb8
 80022c8:	e7f0      	b.n	80022ac <I2C_Enable_IRQ+0x44>
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80022ca:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80022ce:	e7f1      	b.n	80022b4 <I2C_Enable_IRQ+0x4c>
      tmpisr |= I2C_IT_STOPI;
 80022d0:	f043 0320 	orr.w	r3, r3, #32
 80022d4:	e7f2      	b.n	80022bc <I2C_Enable_IRQ+0x54>
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80022d6:	23b8      	movs	r3, #184	; 0xb8
 80022d8:	e7d1      	b.n	800227e <I2C_Enable_IRQ+0x16>
      tmpisr |= I2C_IT_STOPI;
 80022da:	f043 0320 	orr.w	r3, r3, #32
 80022de:	e7dc      	b.n	800229a <I2C_Enable_IRQ+0x32>
 80022e0:	0800370b 	.word	0x0800370b
 80022e4:	08003623 	.word	0x08003623

080022e8 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80022e8:	f011 0f01 	tst.w	r1, #1
 80022ec:	d009      	beq.n	8002302 <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80022ee:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80022f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80022f6:	2b28      	cmp	r3, #40	; 0x28
 80022f8:	d001      	beq.n	80022fe <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80022fa:	23f2      	movs	r3, #242	; 0xf2
 80022fc:	e002      	b.n	8002304 <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80022fe:	2342      	movs	r3, #66	; 0x42
 8002300:	e000      	b.n	8002304 <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 8002302:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002304:	f011 0f02 	tst.w	r1, #2
 8002308:	d02c      	beq.n	8002364 <I2C_Disable_IRQ+0x7c>
{
 800230a:	b410      	push	{r4}
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800230c:	f043 0444 	orr.w	r4, r3, #68	; 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002310:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002314:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8002318:	2a28      	cmp	r2, #40	; 0x28
 800231a:	d018      	beq.n	800234e <I2C_Disable_IRQ+0x66>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800231c:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002320:	f011 0f04 	tst.w	r1, #4
 8002324:	d001      	beq.n	800232a <I2C_Disable_IRQ+0x42>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002326:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800232a:	f001 0211 	and.w	r2, r1, #17
 800232e:	2a11      	cmp	r2, #17
 8002330:	d00f      	beq.n	8002352 <I2C_Disable_IRQ+0x6a>
 8002332:	f001 0112 	and.w	r1, r1, #18
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8002336:	2912      	cmp	r1, #18
 8002338:	d00e      	beq.n	8002358 <I2C_Disable_IRQ+0x70>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800233a:	2912      	cmp	r1, #18
 800233c:	d00f      	beq.n	800235e <I2C_Disable_IRQ+0x76>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800233e:	6801      	ldr	r1, [r0, #0]
 8002340:	680a      	ldr	r2, [r1, #0]
 8002342:	ea22 0303 	bic.w	r3, r2, r3
 8002346:	600b      	str	r3, [r1, #0]
}
 8002348:	f85d 4b04 	ldr.w	r4, [sp], #4
 800234c:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800234e:	4623      	mov	r3, r4
 8002350:	e7e6      	b.n	8002320 <I2C_Disable_IRQ+0x38>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002352:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002356:	e7ec      	b.n	8002332 <I2C_Disable_IRQ+0x4a>
    tmpisr |= I2C_IT_STOPI;
 8002358:	f043 0320 	orr.w	r3, r3, #32
 800235c:	e7ed      	b.n	800233a <I2C_Disable_IRQ+0x52>
    tmpisr |= I2C_IT_TCI;
 800235e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002362:	e7ec      	b.n	800233e <I2C_Disable_IRQ+0x56>
  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002364:	f011 0f04 	tst.w	r1, #4
 8002368:	d001      	beq.n	800236e <I2C_Disable_IRQ+0x86>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800236a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800236e:	f001 0211 	and.w	r2, r1, #17
 8002372:	2a11      	cmp	r2, #17
 8002374:	d00b      	beq.n	800238e <I2C_Disable_IRQ+0xa6>
 8002376:	f001 0112 	and.w	r1, r1, #18
  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800237a:	2912      	cmp	r1, #18
 800237c:	d00a      	beq.n	8002394 <I2C_Disable_IRQ+0xac>
  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800237e:	2912      	cmp	r1, #18
 8002380:	d00b      	beq.n	800239a <I2C_Disable_IRQ+0xb2>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002382:	6801      	ldr	r1, [r0, #0]
 8002384:	680a      	ldr	r2, [r1, #0]
 8002386:	ea22 0303 	bic.w	r3, r2, r3
 800238a:	600b      	str	r3, [r1, #0]
 800238c:	4770      	bx	lr
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800238e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002392:	e7f0      	b.n	8002376 <I2C_Disable_IRQ+0x8e>
    tmpisr |= I2C_IT_STOPI;
 8002394:	f043 0320 	orr.w	r3, r3, #32
 8002398:	e7f1      	b.n	800237e <I2C_Disable_IRQ+0x96>
    tmpisr |= I2C_IT_TCI;
 800239a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800239e:	e7f0      	b.n	8002382 <I2C_Disable_IRQ+0x9a>

080023a0 <I2C_IsAcknowledgeFailed>:
{
 80023a0:	b570      	push	{r4, r5, r6, lr}
 80023a2:	4604      	mov	r4, r0
 80023a4:	460d      	mov	r5, r1
 80023a6:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023a8:	6803      	ldr	r3, [r0, #0]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	f013 0f10 	tst.w	r3, #16
 80023b0:	d01c      	beq.n	80023ec <I2C_IsAcknowledgeFailed+0x4c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023b2:	6823      	ldr	r3, [r4, #0]
 80023b4:	699a      	ldr	r2, [r3, #24]
 80023b6:	f012 0f20 	tst.w	r2, #32
 80023ba:	d119      	bne.n	80023f0 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 80023bc:	f1b5 3fff 	cmp.w	r5, #4294967295
 80023c0:	d0f7      	beq.n	80023b2 <I2C_IsAcknowledgeFailed+0x12>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023c2:	f7fe fdbd 	bl	8000f40 <HAL_GetTick>
 80023c6:	1b80      	subs	r0, r0, r6
 80023c8:	4285      	cmp	r5, r0
 80023ca:	d301      	bcc.n	80023d0 <I2C_IsAcknowledgeFailed+0x30>
 80023cc:	2d00      	cmp	r5, #0
 80023ce:	d1f0      	bne.n	80023b2 <I2C_IsAcknowledgeFailed+0x12>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80023d2:	f043 0320 	orr.w	r3, r3, #32
 80023d6:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80023d8:	2320      	movs	r3, #32
 80023da:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023de:	2300      	movs	r3, #0
 80023e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80023e4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 80023e8:	2001      	movs	r0, #1
 80023ea:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80023ec:	2000      	movs	r0, #0
 80023ee:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023f0:	2210      	movs	r2, #16
 80023f2:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023f4:	6823      	ldr	r3, [r4, #0]
 80023f6:	2520      	movs	r5, #32
 80023f8:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80023fa:	4620      	mov	r0, r4
 80023fc:	f7ff ff08 	bl	8002210 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002400:	6822      	ldr	r2, [r4, #0]
 8002402:	6853      	ldr	r3, [r2, #4]
 8002404:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002408:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800240c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002410:	f023 0301 	bic.w	r3, r3, #1
 8002414:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002416:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002418:	f043 0304 	orr.w	r3, r3, #4
 800241c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800241e:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002422:	2300      	movs	r3, #0
 8002424:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002428:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 800242c:	2001      	movs	r0, #1
}
 800242e:	bd70      	pop	{r4, r5, r6, pc}

08002430 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002430:	b570      	push	{r4, r5, r6, lr}
 8002432:	4604      	mov	r4, r0
 8002434:	460d      	mov	r5, r1
 8002436:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002438:	6823      	ldr	r3, [r4, #0]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	f013 0f02 	tst.w	r3, #2
 8002440:	d11d      	bne.n	800247e <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002442:	4632      	mov	r2, r6
 8002444:	4629      	mov	r1, r5
 8002446:	4620      	mov	r0, r4
 8002448:	f7ff ffaa 	bl	80023a0 <I2C_IsAcknowledgeFailed>
 800244c:	b9c8      	cbnz	r0, 8002482 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800244e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002452:	d0f1      	beq.n	8002438 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002454:	f7fe fd74 	bl	8000f40 <HAL_GetTick>
 8002458:	1b80      	subs	r0, r0, r6
 800245a:	4285      	cmp	r5, r0
 800245c:	d301      	bcc.n	8002462 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800245e:	2d00      	cmp	r5, #0
 8002460:	d1ea      	bne.n	8002438 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002462:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002464:	f043 0320 	orr.w	r3, r3, #32
 8002468:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800246a:	2320      	movs	r3, #32
 800246c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002470:	2300      	movs	r3, #0
 8002472:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002476:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800247a:	2001      	movs	r0, #1
 800247c:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800247e:	2000      	movs	r0, #0
 8002480:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002482:	2001      	movs	r0, #1
}
 8002484:	bd70      	pop	{r4, r5, r6, pc}

08002486 <I2C_WaitOnFlagUntilTimeout>:
{
 8002486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002488:	4605      	mov	r5, r0
 800248a:	460f      	mov	r7, r1
 800248c:	4616      	mov	r6, r2
 800248e:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002490:	682b      	ldr	r3, [r5, #0]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	ea37 0303 	bics.w	r3, r7, r3
 8002498:	bf0c      	ite	eq
 800249a:	2301      	moveq	r3, #1
 800249c:	2300      	movne	r3, #0
 800249e:	42b3      	cmp	r3, r6
 80024a0:	d118      	bne.n	80024d4 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80024a2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80024a6:	d0f3      	beq.n	8002490 <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024a8:	f7fe fd4a 	bl	8000f40 <HAL_GetTick>
 80024ac:	9b06      	ldr	r3, [sp, #24]
 80024ae:	1ac0      	subs	r0, r0, r3
 80024b0:	4284      	cmp	r4, r0
 80024b2:	d301      	bcc.n	80024b8 <I2C_WaitOnFlagUntilTimeout+0x32>
 80024b4:	2c00      	cmp	r4, #0
 80024b6:	d1eb      	bne.n	8002490 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024b8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80024ba:	f043 0320 	orr.w	r3, r3, #32
 80024be:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024c0:	2320      	movs	r3, #32
 80024c2:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c6:	2300      	movs	r3, #0
 80024c8:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80024cc:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 80024d0:	2001      	movs	r0, #1
 80024d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 80024d4:	2000      	movs	r0, #0
}
 80024d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080024d8 <I2C_RequestMemoryWrite>:
{
 80024d8:	b570      	push	{r4, r5, r6, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	4604      	mov	r4, r0
 80024de:	4615      	mov	r5, r2
 80024e0:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80024e2:	4b18      	ldr	r3, [pc, #96]	; (8002544 <I2C_RequestMemoryWrite+0x6c>)
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024ea:	b2f2      	uxtb	r2, r6
 80024ec:	f7ff fea1 	bl	8002232 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024f0:	9a07      	ldr	r2, [sp, #28]
 80024f2:	9906      	ldr	r1, [sp, #24]
 80024f4:	4620      	mov	r0, r4
 80024f6:	f7ff ff9b 	bl	8002430 <I2C_WaitOnTXISFlagUntilTimeout>
 80024fa:	b9e8      	cbnz	r0, 8002538 <I2C_RequestMemoryWrite+0x60>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024fc:	2e01      	cmp	r6, #1
 80024fe:	d00c      	beq.n	800251a <I2C_RequestMemoryWrite+0x42>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002500:	6823      	ldr	r3, [r4, #0]
 8002502:	0a2a      	lsrs	r2, r5, #8
 8002504:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002506:	9a07      	ldr	r2, [sp, #28]
 8002508:	9906      	ldr	r1, [sp, #24]
 800250a:	4620      	mov	r0, r4
 800250c:	f7ff ff90 	bl	8002430 <I2C_WaitOnTXISFlagUntilTimeout>
 8002510:	b9b0      	cbnz	r0, 8002540 <I2C_RequestMemoryWrite+0x68>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002512:	6823      	ldr	r3, [r4, #0]
 8002514:	b2ed      	uxtb	r5, r5
 8002516:	629d      	str	r5, [r3, #40]	; 0x28
 8002518:	e002      	b.n	8002520 <I2C_RequestMemoryWrite+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800251a:	6823      	ldr	r3, [r4, #0]
 800251c:	b2ed      	uxtb	r5, r5
 800251e:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002520:	9b07      	ldr	r3, [sp, #28]
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	9b06      	ldr	r3, [sp, #24]
 8002526:	2200      	movs	r2, #0
 8002528:	2180      	movs	r1, #128	; 0x80
 800252a:	4620      	mov	r0, r4
 800252c:	f7ff ffab 	bl	8002486 <I2C_WaitOnFlagUntilTimeout>
 8002530:	4603      	mov	r3, r0
 8002532:	b110      	cbz	r0, 800253a <I2C_RequestMemoryWrite+0x62>
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e000      	b.n	800253a <I2C_RequestMemoryWrite+0x62>
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
}
 800253a:	4618      	mov	r0, r3
 800253c:	b002      	add	sp, #8
 800253e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e7fa      	b.n	800253a <I2C_RequestMemoryWrite+0x62>
 8002544:	80002000 	.word	0x80002000

08002548 <I2C_RequestMemoryRead>:
{
 8002548:	b570      	push	{r4, r5, r6, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	4604      	mov	r4, r0
 800254e:	4615      	mov	r5, r2
 8002550:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002552:	4b18      	ldr	r3, [pc, #96]	; (80025b4 <I2C_RequestMemoryRead+0x6c>)
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	2300      	movs	r3, #0
 8002558:	b2f2      	uxtb	r2, r6
 800255a:	f7ff fe6a 	bl	8002232 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800255e:	9a07      	ldr	r2, [sp, #28]
 8002560:	9906      	ldr	r1, [sp, #24]
 8002562:	4620      	mov	r0, r4
 8002564:	f7ff ff64 	bl	8002430 <I2C_WaitOnTXISFlagUntilTimeout>
 8002568:	b9e8      	cbnz	r0, 80025a6 <I2C_RequestMemoryRead+0x5e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800256a:	2e01      	cmp	r6, #1
 800256c:	d00c      	beq.n	8002588 <I2C_RequestMemoryRead+0x40>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800256e:	6823      	ldr	r3, [r4, #0]
 8002570:	0a2a      	lsrs	r2, r5, #8
 8002572:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002574:	9a07      	ldr	r2, [sp, #28]
 8002576:	9906      	ldr	r1, [sp, #24]
 8002578:	4620      	mov	r0, r4
 800257a:	f7ff ff59 	bl	8002430 <I2C_WaitOnTXISFlagUntilTimeout>
 800257e:	b9b0      	cbnz	r0, 80025ae <I2C_RequestMemoryRead+0x66>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002580:	6823      	ldr	r3, [r4, #0]
 8002582:	b2ed      	uxtb	r5, r5
 8002584:	629d      	str	r5, [r3, #40]	; 0x28
 8002586:	e002      	b.n	800258e <I2C_RequestMemoryRead+0x46>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002588:	6823      	ldr	r3, [r4, #0]
 800258a:	b2ed      	uxtb	r5, r5
 800258c:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800258e:	9b07      	ldr	r3, [sp, #28]
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	9b06      	ldr	r3, [sp, #24]
 8002594:	2200      	movs	r2, #0
 8002596:	2140      	movs	r1, #64	; 0x40
 8002598:	4620      	mov	r0, r4
 800259a:	f7ff ff74 	bl	8002486 <I2C_WaitOnFlagUntilTimeout>
 800259e:	4603      	mov	r3, r0
 80025a0:	b110      	cbz	r0, 80025a8 <I2C_RequestMemoryRead+0x60>
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <I2C_RequestMemoryRead+0x60>
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	b002      	add	sp, #8
 80025ac:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e7fa      	b.n	80025a8 <I2C_RequestMemoryRead+0x60>
 80025b2:	bf00      	nop
 80025b4:	80002000 	.word	0x80002000

080025b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80025b8:	b570      	push	{r4, r5, r6, lr}
 80025ba:	4605      	mov	r5, r0
 80025bc:	460c      	mov	r4, r1
 80025be:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025c0:	682b      	ldr	r3, [r5, #0]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	f013 0f20 	tst.w	r3, #32
 80025c8:	d11a      	bne.n	8002600 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80025ca:	4632      	mov	r2, r6
 80025cc:	4621      	mov	r1, r4
 80025ce:	4628      	mov	r0, r5
 80025d0:	f7ff fee6 	bl	80023a0 <I2C_IsAcknowledgeFailed>
 80025d4:	b9b0      	cbnz	r0, 8002604 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d6:	f7fe fcb3 	bl	8000f40 <HAL_GetTick>
 80025da:	1b80      	subs	r0, r0, r6
 80025dc:	4284      	cmp	r4, r0
 80025de:	d301      	bcc.n	80025e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 80025e0:	2c00      	cmp	r4, #0
 80025e2:	d1ed      	bne.n	80025c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025e4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80025e6:	f043 0320 	orr.w	r3, r3, #32
 80025ea:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80025ec:	2320      	movs	r3, #32
 80025ee:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f2:	2300      	movs	r3, #0
 80025f4:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80025f8:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80025fc:	2001      	movs	r0, #1
 80025fe:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8002600:	2000      	movs	r0, #0
 8002602:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002604:	2001      	movs	r0, #1
}
 8002606:	bd70      	pop	{r4, r5, r6, pc}

08002608 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8002608:	b570      	push	{r4, r5, r6, lr}
 800260a:	4604      	mov	r4, r0
 800260c:	460d      	mov	r5, r1
 800260e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002610:	6823      	ldr	r3, [r4, #0]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	f013 0f04 	tst.w	r3, #4
 8002618:	d13e      	bne.n	8002698 <I2C_WaitOnRXNEFlagUntilTimeout+0x90>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800261a:	4632      	mov	r2, r6
 800261c:	4629      	mov	r1, r5
 800261e:	4620      	mov	r0, r4
 8002620:	f7ff febe 	bl	80023a0 <I2C_IsAcknowledgeFailed>
 8002624:	4601      	mov	r1, r0
 8002626:	2800      	cmp	r0, #0
 8002628:	d138      	bne.n	800269c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800262a:	6823      	ldr	r3, [r4, #0]
 800262c:	699a      	ldr	r2, [r3, #24]
 800262e:	f012 0f20 	tst.w	r2, #32
 8002632:	d113      	bne.n	800265c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002634:	f7fe fc84 	bl	8000f40 <HAL_GetTick>
 8002638:	1b80      	subs	r0, r0, r6
 800263a:	4285      	cmp	r5, r0
 800263c:	d301      	bcc.n	8002642 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 800263e:	2d00      	cmp	r5, #0
 8002640:	d1e6      	bne.n	8002610 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002642:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002644:	f043 0320 	orr.w	r3, r3, #32
 8002648:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800264a:	2320      	movs	r3, #32
 800264c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8002650:	2300      	movs	r3, #0
 8002652:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002656:	2101      	movs	r1, #1
}
 8002658:	4608      	mov	r0, r1
 800265a:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800265c:	699a      	ldr	r2, [r3, #24]
 800265e:	f012 0f04 	tst.w	r2, #4
 8002662:	d002      	beq.n	800266a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8002664:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002666:	2a00      	cmp	r2, #0
 8002668:	d1f6      	bne.n	8002658 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800266a:	2220      	movs	r2, #32
 800266c:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800266e:	6821      	ldr	r1, [r4, #0]
 8002670:	684b      	ldr	r3, [r1, #4]
 8002672:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002676:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800267a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800267e:	f023 0301 	bic.w	r3, r3, #1
 8002682:	604b      	str	r3, [r1, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002684:	2300      	movs	r3, #0
 8002686:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002688:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800268c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002690:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8002694:	2101      	movs	r1, #1
 8002696:	e7df      	b.n	8002658 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
  return HAL_OK;
 8002698:	2100      	movs	r1, #0
 800269a:	e7dd      	b.n	8002658 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 800269c:	2101      	movs	r1, #1
 800269e:	e7db      	b.n	8002658 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>

080026a0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80026a0:	2800      	cmp	r0, #0
 80026a2:	d059      	beq.n	8002758 <HAL_I2C_Init+0xb8>
{
 80026a4:	b510      	push	{r4, lr}
 80026a6:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026a8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d043      	beq.n	8002738 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80026b0:	2324      	movs	r3, #36	; 0x24
 80026b2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80026b6:	6822      	ldr	r2, [r4, #0]
 80026b8:	6813      	ldr	r3, [r2, #0]
 80026ba:	f023 0301 	bic.w	r3, r3, #1
 80026be:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026c0:	6822      	ldr	r2, [r4, #0]
 80026c2:	6863      	ldr	r3, [r4, #4]
 80026c4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80026c8:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026ca:	6822      	ldr	r2, [r4, #0]
 80026cc:	6893      	ldr	r3, [r2, #8]
 80026ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80026d2:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026d4:	68e3      	ldr	r3, [r4, #12]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d033      	beq.n	8002742 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026da:	6822      	ldr	r2, [r4, #0]
 80026dc:	68a3      	ldr	r3, [r4, #8]
 80026de:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 80026e2:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026e4:	68e3      	ldr	r3, [r4, #12]
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d031      	beq.n	800274e <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026ea:	6822      	ldr	r2, [r4, #0]
 80026ec:	6853      	ldr	r3, [r2, #4]
 80026ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026f6:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026f8:	6822      	ldr	r2, [r4, #0]
 80026fa:	68d3      	ldr	r3, [r2, #12]
 80026fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002700:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002702:	6822      	ldr	r2, [r4, #0]
 8002704:	6923      	ldr	r3, [r4, #16]
 8002706:	6961      	ldr	r1, [r4, #20]
 8002708:	430b      	orrs	r3, r1
 800270a:	69a1      	ldr	r1, [r4, #24]
 800270c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002710:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002712:	6822      	ldr	r2, [r4, #0]
 8002714:	69e3      	ldr	r3, [r4, #28]
 8002716:	6a21      	ldr	r1, [r4, #32]
 8002718:	430b      	orrs	r3, r1
 800271a:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800271c:	6822      	ldr	r2, [r4, #0]
 800271e:	6813      	ldr	r3, [r2, #0]
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002726:	2000      	movs	r0, #0
 8002728:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800272a:	2320      	movs	r3, #32
 800272c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002730:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002732:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8002736:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002738:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800273c:	f00b fbf6 	bl	800df2c <HAL_I2C_MspInit>
 8002740:	e7b6      	b.n	80026b0 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002742:	6822      	ldr	r2, [r4, #0]
 8002744:	68a3      	ldr	r3, [r4, #8]
 8002746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800274a:	6093      	str	r3, [r2, #8]
 800274c:	e7ca      	b.n	80026e4 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800274e:	6823      	ldr	r3, [r4, #0]
 8002750:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	e7c8      	b.n	80026ea <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8002758:	2001      	movs	r0, #1
 800275a:	4770      	bx	lr

0800275c <HAL_I2C_Master_Transmit>:
{
 800275c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002760:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002762:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8002766:	b2ed      	uxtb	r5, r5
 8002768:	2d20      	cmp	r5, #32
 800276a:	d004      	beq.n	8002776 <HAL_I2C_Master_Transmit+0x1a>
    return HAL_BUSY;
 800276c:	2302      	movs	r3, #2
}
 800276e:	4618      	mov	r0, r3
 8002770:	b003      	add	sp, #12
 8002772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 8002776:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 800277a:	2c01      	cmp	r4, #1
 800277c:	d101      	bne.n	8002782 <HAL_I2C_Master_Transmit+0x26>
 800277e:	2302      	movs	r3, #2
 8002780:	e7f5      	b.n	800276e <HAL_I2C_Master_Transmit+0x12>
 8002782:	4698      	mov	r8, r3
 8002784:	4617      	mov	r7, r2
 8002786:	460d      	mov	r5, r1
 8002788:	4604      	mov	r4, r0
 800278a:	f04f 0901 	mov.w	r9, #1
 800278e:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002792:	f7fe fbd5 	bl	8000f40 <HAL_GetTick>
 8002796:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002798:	9000      	str	r0, [sp, #0]
 800279a:	2319      	movs	r3, #25
 800279c:	464a      	mov	r2, r9
 800279e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027a2:	4620      	mov	r0, r4
 80027a4:	f7ff fe6f 	bl	8002486 <I2C_WaitOnFlagUntilTimeout>
 80027a8:	2800      	cmp	r0, #0
 80027aa:	f040 8089 	bne.w	80028c0 <HAL_I2C_Master_Transmit+0x164>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027ae:	2321      	movs	r3, #33	; 0x21
 80027b0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80027b4:	2310      	movs	r3, #16
 80027b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ba:	2300      	movs	r3, #0
 80027bc:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80027be:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80027c0:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027c4:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	2bff      	cmp	r3, #255	; 0xff
 80027cc:	d90a      	bls.n	80027e4 <HAL_I2C_Master_Transmit+0x88>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027ce:	22ff      	movs	r2, #255	; 0xff
 80027d0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80027d2:	4b3f      	ldr	r3, [pc, #252]	; (80028d0 <HAL_I2C_Master_Transmit+0x174>)
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027da:	4629      	mov	r1, r5
 80027dc:	4620      	mov	r0, r4
 80027de:	f7ff fd28 	bl	8002232 <I2C_TransferConfig>
 80027e2:	e018      	b.n	8002816 <HAL_I2C_Master_Transmit+0xba>
      hi2c->XferSize = hi2c->XferCount;
 80027e4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80027e6:	b292      	uxth	r2, r2
 80027e8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80027ea:	4b39      	ldr	r3, [pc, #228]	; (80028d0 <HAL_I2C_Master_Transmit+0x174>)
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	4629      	mov	r1, r5
 80027f6:	4620      	mov	r0, r4
 80027f8:	f7ff fd1b 	bl	8002232 <I2C_TransferConfig>
 80027fc:	e00b      	b.n	8002816 <HAL_I2C_Master_Transmit+0xba>
          hi2c->XferSize = hi2c->XferCount;
 80027fe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002800:	b292      	uxth	r2, r2
 8002802:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002804:	2300      	movs	r3, #0
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	4629      	mov	r1, r5
 8002810:	4620      	mov	r0, r4
 8002812:	f7ff fd0e 	bl	8002232 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002816:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002818:	b29b      	uxth	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d033      	beq.n	8002886 <HAL_I2C_Master_Transmit+0x12a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800281e:	4632      	mov	r2, r6
 8002820:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002822:	4620      	mov	r0, r4
 8002824:	f7ff fe04 	bl	8002430 <I2C_WaitOnTXISFlagUntilTimeout>
 8002828:	2800      	cmp	r0, #0
 800282a:	d14b      	bne.n	80028c4 <HAL_I2C_Master_Transmit+0x168>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800282c:	6823      	ldr	r3, [r4, #0]
 800282e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002830:	7812      	ldrb	r2, [r2, #0]
 8002832:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002834:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002836:	3301      	adds	r3, #1
 8002838:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800283a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800283c:	b29b      	uxth	r3, r3
 800283e:	3b01      	subs	r3, #1
 8002840:	b29b      	uxth	r3, r3
 8002842:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002844:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002846:	3b01      	subs	r3, #1
 8002848:	b29b      	uxth	r3, r3
 800284a:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800284c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800284e:	b292      	uxth	r2, r2
 8002850:	2a00      	cmp	r2, #0
 8002852:	d0e0      	beq.n	8002816 <HAL_I2C_Master_Transmit+0xba>
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1de      	bne.n	8002816 <HAL_I2C_Master_Transmit+0xba>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002858:	9600      	str	r6, [sp, #0]
 800285a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800285c:	2200      	movs	r2, #0
 800285e:	2180      	movs	r1, #128	; 0x80
 8002860:	4620      	mov	r0, r4
 8002862:	f7ff fe10 	bl	8002486 <I2C_WaitOnFlagUntilTimeout>
 8002866:	bb78      	cbnz	r0, 80028c8 <HAL_I2C_Master_Transmit+0x16c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002868:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800286a:	b29b      	uxth	r3, r3
 800286c:	2bff      	cmp	r3, #255	; 0xff
 800286e:	d9c6      	bls.n	80027fe <HAL_I2C_Master_Transmit+0xa2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002870:	22ff      	movs	r2, #255	; 0xff
 8002872:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002874:	2300      	movs	r3, #0
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800287c:	4629      	mov	r1, r5
 800287e:	4620      	mov	r0, r4
 8002880:	f7ff fcd7 	bl	8002232 <I2C_TransferConfig>
 8002884:	e7c7      	b.n	8002816 <HAL_I2C_Master_Transmit+0xba>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002886:	4632      	mov	r2, r6
 8002888:	990a      	ldr	r1, [sp, #40]	; 0x28
 800288a:	4620      	mov	r0, r4
 800288c:	f7ff fe94 	bl	80025b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002890:	4603      	mov	r3, r0
 8002892:	b9d8      	cbnz	r0, 80028cc <HAL_I2C_Master_Transmit+0x170>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002894:	6822      	ldr	r2, [r4, #0]
 8002896:	2120      	movs	r1, #32
 8002898:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 800289a:	6820      	ldr	r0, [r4, #0]
 800289c:	6842      	ldr	r2, [r0, #4]
 800289e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80028a2:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80028a6:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80028aa:	f022 0201 	bic.w	r2, r2, #1
 80028ae:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80028b0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028b4:	2200      	movs	r2, #0
 80028b6:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80028ba:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 80028be:	e756      	b.n	800276e <HAL_I2C_Master_Transmit+0x12>
      return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e754      	b.n	800276e <HAL_I2C_Master_Transmit+0x12>
        return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e752      	b.n	800276e <HAL_I2C_Master_Transmit+0x12>
          return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e750      	b.n	800276e <HAL_I2C_Master_Transmit+0x12>
      return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e74e      	b.n	800276e <HAL_I2C_Master_Transmit+0x12>
 80028d0:	80002000 	.word	0x80002000

080028d4 <HAL_I2C_Master_Receive>:
{
 80028d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028d8:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 80028da:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 80028de:	b2ed      	uxtb	r5, r5
 80028e0:	2d20      	cmp	r5, #32
 80028e2:	d004      	beq.n	80028ee <HAL_I2C_Master_Receive+0x1a>
    return HAL_BUSY;
 80028e4:	2302      	movs	r3, #2
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	b003      	add	sp, #12
 80028ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 80028ee:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80028f2:	2c01      	cmp	r4, #1
 80028f4:	d101      	bne.n	80028fa <HAL_I2C_Master_Receive+0x26>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e7f5      	b.n	80028e6 <HAL_I2C_Master_Receive+0x12>
 80028fa:	4698      	mov	r8, r3
 80028fc:	4617      	mov	r7, r2
 80028fe:	460d      	mov	r5, r1
 8002900:	4604      	mov	r4, r0
 8002902:	f04f 0901 	mov.w	r9, #1
 8002906:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800290a:	f7fe fb19 	bl	8000f40 <HAL_GetTick>
 800290e:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002910:	9000      	str	r0, [sp, #0]
 8002912:	2319      	movs	r3, #25
 8002914:	464a      	mov	r2, r9
 8002916:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800291a:	4620      	mov	r0, r4
 800291c:	f7ff fdb3 	bl	8002486 <I2C_WaitOnFlagUntilTimeout>
 8002920:	2800      	cmp	r0, #0
 8002922:	f040 8088 	bne.w	8002a36 <HAL_I2C_Master_Receive+0x162>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002926:	2322      	movs	r3, #34	; 0x22
 8002928:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800292c:	2310      	movs	r3, #16
 800292e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002932:	2300      	movs	r3, #0
 8002934:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002936:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002938:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800293c:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800293e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002940:	b29b      	uxth	r3, r3
 8002942:	2bff      	cmp	r3, #255	; 0xff
 8002944:	d90a      	bls.n	800295c <HAL_I2C_Master_Receive+0x88>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002946:	22ff      	movs	r2, #255	; 0xff
 8002948:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800294a:	4b3f      	ldr	r3, [pc, #252]	; (8002a48 <HAL_I2C_Master_Receive+0x174>)
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002952:	4629      	mov	r1, r5
 8002954:	4620      	mov	r0, r4
 8002956:	f7ff fc6c 	bl	8002232 <I2C_TransferConfig>
 800295a:	e018      	b.n	800298e <HAL_I2C_Master_Receive+0xba>
      hi2c->XferSize = hi2c->XferCount;
 800295c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800295e:	b292      	uxth	r2, r2
 8002960:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002962:	4b39      	ldr	r3, [pc, #228]	; (8002a48 <HAL_I2C_Master_Receive+0x174>)
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	4629      	mov	r1, r5
 800296e:	4620      	mov	r0, r4
 8002970:	f7ff fc5f 	bl	8002232 <I2C_TransferConfig>
 8002974:	e00b      	b.n	800298e <HAL_I2C_Master_Receive+0xba>
          hi2c->XferSize = hi2c->XferCount;
 8002976:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002978:	b292      	uxth	r2, r2
 800297a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800297c:	2300      	movs	r3, #0
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	4629      	mov	r1, r5
 8002988:	4620      	mov	r0, r4
 800298a:	f7ff fc52 	bl	8002232 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800298e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002990:	b29b      	uxth	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d032      	beq.n	80029fc <HAL_I2C_Master_Receive+0x128>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002996:	4632      	mov	r2, r6
 8002998:	990a      	ldr	r1, [sp, #40]	; 0x28
 800299a:	4620      	mov	r0, r4
 800299c:	f7ff fe34 	bl	8002608 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029a0:	2800      	cmp	r0, #0
 80029a2:	d14a      	bne.n	8002a3a <HAL_I2C_Master_Receive+0x166>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029a6:	6822      	ldr	r2, [r4, #0]
 80029a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029aa:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80029ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029ae:	3301      	adds	r3, #1
 80029b0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80029b2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80029b4:	3a01      	subs	r2, #1
 80029b6:	b292      	uxth	r2, r2
 80029b8:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80029ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80029bc:	b29b      	uxth	r3, r3
 80029be:	3b01      	subs	r3, #1
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0e0      	beq.n	800298e <HAL_I2C_Master_Receive+0xba>
 80029cc:	2a00      	cmp	r2, #0
 80029ce:	d1de      	bne.n	800298e <HAL_I2C_Master_Receive+0xba>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029d0:	9600      	str	r6, [sp, #0]
 80029d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80029d4:	2180      	movs	r1, #128	; 0x80
 80029d6:	4620      	mov	r0, r4
 80029d8:	f7ff fd55 	bl	8002486 <I2C_WaitOnFlagUntilTimeout>
 80029dc:	bb78      	cbnz	r0, 8002a3e <HAL_I2C_Master_Receive+0x16a>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	2bff      	cmp	r3, #255	; 0xff
 80029e4:	d9c7      	bls.n	8002976 <HAL_I2C_Master_Receive+0xa2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029e6:	22ff      	movs	r2, #255	; 0xff
 80029e8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80029ea:	2300      	movs	r3, #0
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029f2:	4629      	mov	r1, r5
 80029f4:	4620      	mov	r0, r4
 80029f6:	f7ff fc1c 	bl	8002232 <I2C_TransferConfig>
 80029fa:	e7c8      	b.n	800298e <HAL_I2C_Master_Receive+0xba>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029fc:	4632      	mov	r2, r6
 80029fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002a00:	4620      	mov	r0, r4
 8002a02:	f7ff fdd9 	bl	80025b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a06:	4603      	mov	r3, r0
 8002a08:	b9d8      	cbnz	r0, 8002a42 <HAL_I2C_Master_Receive+0x16e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a0a:	6822      	ldr	r2, [r4, #0]
 8002a0c:	2120      	movs	r1, #32
 8002a0e:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8002a10:	6820      	ldr	r0, [r4, #0]
 8002a12:	6842      	ldr	r2, [r0, #4]
 8002a14:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002a18:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002a1c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002a20:	f022 0201 	bic.w	r2, r2, #1
 8002a24:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002a26:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002a30:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8002a34:	e757      	b.n	80028e6 <HAL_I2C_Master_Receive+0x12>
      return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e755      	b.n	80028e6 <HAL_I2C_Master_Receive+0x12>
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e753      	b.n	80028e6 <HAL_I2C_Master_Receive+0x12>
          return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e751      	b.n	80028e6 <HAL_I2C_Master_Receive+0x12>
      return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e74f      	b.n	80028e6 <HAL_I2C_Master_Receive+0x12>
 8002a46:	bf00      	nop
 8002a48:	80002400 	.word	0x80002400

08002a4c <HAL_I2C_Mem_Write>:
{
 8002a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a56:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8002a5a:	b2e4      	uxtb	r4, r4
 8002a5c:	2c20      	cmp	r4, #32
 8002a5e:	d004      	beq.n	8002a6a <HAL_I2C_Mem_Write+0x1e>
    return HAL_BUSY;
 8002a60:	2302      	movs	r3, #2
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	b002      	add	sp, #8
 8002a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((pData == NULL) || (Size == 0U))
 8002a6a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002a6c:	b134      	cbz	r4, 8002a7c <HAL_I2C_Mem_Write+0x30>
 8002a6e:	b12d      	cbz	r5, 8002a7c <HAL_I2C_Mem_Write+0x30>
    __HAL_LOCK(hi2c);
 8002a70:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8002a74:	2c01      	cmp	r4, #1
 8002a76:	d106      	bne.n	8002a86 <HAL_I2C_Mem_Write+0x3a>
 8002a78:	2302      	movs	r3, #2
 8002a7a:	e7f2      	b.n	8002a62 <HAL_I2C_Mem_Write+0x16>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a80:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e7ed      	b.n	8002a62 <HAL_I2C_Mem_Write+0x16>
 8002a86:	4698      	mov	r8, r3
 8002a88:	4691      	mov	r9, r2
 8002a8a:	460e      	mov	r6, r1
 8002a8c:	4604      	mov	r4, r0
    __HAL_LOCK(hi2c);
 8002a8e:	f04f 0a01 	mov.w	sl, #1
 8002a92:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002a96:	f7fe fa53 	bl	8000f40 <HAL_GetTick>
 8002a9a:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a9c:	9000      	str	r0, [sp, #0]
 8002a9e:	2319      	movs	r3, #25
 8002aa0:	4652      	mov	r2, sl
 8002aa2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	f7ff fced 	bl	8002486 <I2C_WaitOnFlagUntilTimeout>
 8002aac:	b108      	cbz	r0, 8002ab2 <HAL_I2C_Mem_Write+0x66>
      return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e7d7      	b.n	8002a62 <HAL_I2C_Mem_Write+0x16>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ab2:	2321      	movs	r3, #33	; 0x21
 8002ab4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ab8:	2340      	movs	r3, #64	; 0x40
 8002aba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002ac2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002ac4:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ac6:	8565      	strh	r5, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ac8:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002aca:	9701      	str	r7, [sp, #4]
 8002acc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	4643      	mov	r3, r8
 8002ad2:	464a      	mov	r2, r9
 8002ad4:	4631      	mov	r1, r6
 8002ad6:	4620      	mov	r0, r4
 8002ad8:	f7ff fcfe 	bl	80024d8 <I2C_RequestMemoryWrite>
 8002adc:	b970      	cbnz	r0, 8002afc <HAL_I2C_Mem_Write+0xb0>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ade:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	2bff      	cmp	r3, #255	; 0xff
 8002ae4:	d90f      	bls.n	8002b06 <HAL_I2C_Mem_Write+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ae6:	22ff      	movs	r2, #255	; 0xff
 8002ae8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002aea:	2300      	movs	r3, #0
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002af2:	4631      	mov	r1, r6
 8002af4:	4620      	mov	r0, r4
 8002af6:	f7ff fb9c 	bl	8002232 <I2C_TransferConfig>
 8002afa:	e021      	b.n	8002b40 <HAL_I2C_Mem_Write+0xf4>
      __HAL_UNLOCK(hi2c);
 8002afc:	2300      	movs	r3, #0
 8002afe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002b02:	4653      	mov	r3, sl
 8002b04:	e7ad      	b.n	8002a62 <HAL_I2C_Mem_Write+0x16>
      hi2c->XferSize = hi2c->XferCount;
 8002b06:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002b08:	b292      	uxth	r2, r2
 8002b0a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	4631      	mov	r1, r6
 8002b18:	4620      	mov	r0, r4
 8002b1a:	f7ff fb8a 	bl	8002232 <I2C_TransferConfig>
 8002b1e:	e00f      	b.n	8002b40 <HAL_I2C_Mem_Write+0xf4>
          hi2c->XferSize = hi2c->XferCount;
 8002b20:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002b22:	b292      	uxth	r2, r2
 8002b24:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b26:	2300      	movs	r3, #0
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	4631      	mov	r1, r6
 8002b32:	4620      	mov	r0, r4
 8002b34:	f7ff fb7d 	bl	8002232 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8002b38:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d033      	beq.n	8002ba8 <HAL_I2C_Mem_Write+0x15c>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b40:	463a      	mov	r2, r7
 8002b42:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002b44:	4620      	mov	r0, r4
 8002b46:	f7ff fc73 	bl	8002430 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b4a:	2800      	cmp	r0, #0
 8002b4c:	d149      	bne.n	8002be2 <HAL_I2C_Mem_Write+0x196>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b4e:	6823      	ldr	r3, [r4, #0]
 8002b50:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002b52:	7812      	ldrb	r2, [r2, #0]
 8002b54:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002b56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b58:	3301      	adds	r3, #1
 8002b5a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002b5c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002b66:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b6e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002b70:	b292      	uxth	r2, r2
 8002b72:	2a00      	cmp	r2, #0
 8002b74:	d0e0      	beq.n	8002b38 <HAL_I2C_Mem_Write+0xec>
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1de      	bne.n	8002b38 <HAL_I2C_Mem_Write+0xec>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b7a:	9700      	str	r7, [sp, #0]
 8002b7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2180      	movs	r1, #128	; 0x80
 8002b82:	4620      	mov	r0, r4
 8002b84:	f7ff fc7f 	bl	8002486 <I2C_WaitOnFlagUntilTimeout>
 8002b88:	bb68      	cbnz	r0, 8002be6 <HAL_I2C_Mem_Write+0x19a>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b8a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	2bff      	cmp	r3, #255	; 0xff
 8002b90:	d9c6      	bls.n	8002b20 <HAL_I2C_Mem_Write+0xd4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b92:	22ff      	movs	r2, #255	; 0xff
 8002b94:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b96:	2300      	movs	r3, #0
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b9e:	4631      	mov	r1, r6
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	f7ff fb46 	bl	8002232 <I2C_TransferConfig>
 8002ba6:	e7c7      	b.n	8002b38 <HAL_I2C_Mem_Write+0xec>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ba8:	463a      	mov	r2, r7
 8002baa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002bac:	4620      	mov	r0, r4
 8002bae:	f7ff fd03 	bl	80025b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	b9c8      	cbnz	r0, 8002bea <HAL_I2C_Mem_Write+0x19e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bb6:	6822      	ldr	r2, [r4, #0]
 8002bb8:	2120      	movs	r1, #32
 8002bba:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8002bbc:	6820      	ldr	r0, [r4, #0]
 8002bbe:	6842      	ldr	r2, [r0, #4]
 8002bc0:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002bc4:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002bc8:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002bcc:	f022 0201 	bic.w	r2, r2, #1
 8002bd0:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002bd2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002bdc:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8002be0:	e73f      	b.n	8002a62 <HAL_I2C_Mem_Write+0x16>
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e73d      	b.n	8002a62 <HAL_I2C_Mem_Write+0x16>
          return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e73b      	b.n	8002a62 <HAL_I2C_Mem_Write+0x16>
      return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e739      	b.n	8002a62 <HAL_I2C_Mem_Write+0x16>
	...

08002bf0 <HAL_I2C_Mem_Read>:
{
 8002bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bfa:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8002bfe:	b2e4      	uxtb	r4, r4
 8002c00:	2c20      	cmp	r4, #32
 8002c02:	d004      	beq.n	8002c0e <HAL_I2C_Mem_Read+0x1e>
    return HAL_BUSY;
 8002c04:	2302      	movs	r3, #2
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	b002      	add	sp, #8
 8002c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((pData == NULL) || (Size == 0U))
 8002c0e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002c10:	b134      	cbz	r4, 8002c20 <HAL_I2C_Mem_Read+0x30>
 8002c12:	b12d      	cbz	r5, 8002c20 <HAL_I2C_Mem_Read+0x30>
    __HAL_LOCK(hi2c);
 8002c14:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8002c18:	2c01      	cmp	r4, #1
 8002c1a:	d106      	bne.n	8002c2a <HAL_I2C_Mem_Read+0x3a>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e7f2      	b.n	8002c06 <HAL_I2C_Mem_Read+0x16>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c24:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e7ed      	b.n	8002c06 <HAL_I2C_Mem_Read+0x16>
 8002c2a:	4698      	mov	r8, r3
 8002c2c:	4691      	mov	r9, r2
 8002c2e:	460e      	mov	r6, r1
 8002c30:	4604      	mov	r4, r0
    __HAL_LOCK(hi2c);
 8002c32:	f04f 0a01 	mov.w	sl, #1
 8002c36:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002c3a:	f7fe f981 	bl	8000f40 <HAL_GetTick>
 8002c3e:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c40:	9000      	str	r0, [sp, #0]
 8002c42:	2319      	movs	r3, #25
 8002c44:	4652      	mov	r2, sl
 8002c46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c4a:	4620      	mov	r0, r4
 8002c4c:	f7ff fc1b 	bl	8002486 <I2C_WaitOnFlagUntilTimeout>
 8002c50:	b108      	cbz	r0, 8002c56 <HAL_I2C_Mem_Read+0x66>
      return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e7d7      	b.n	8002c06 <HAL_I2C_Mem_Read+0x16>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c56:	2322      	movs	r3, #34	; 0x22
 8002c58:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c5c:	2340      	movs	r3, #64	; 0x40
 8002c5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c62:	2300      	movs	r3, #0
 8002c64:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002c66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002c68:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c6a:	8565      	strh	r5, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c6c:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c6e:	9701      	str	r7, [sp, #4]
 8002c70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	4643      	mov	r3, r8
 8002c76:	464a      	mov	r2, r9
 8002c78:	4631      	mov	r1, r6
 8002c7a:	4620      	mov	r0, r4
 8002c7c:	f7ff fc64 	bl	8002548 <I2C_RequestMemoryRead>
 8002c80:	b970      	cbnz	r0, 8002ca0 <HAL_I2C_Mem_Read+0xb0>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c82:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	2bff      	cmp	r3, #255	; 0xff
 8002c88:	d90f      	bls.n	8002caa <HAL_I2C_Mem_Read+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c8a:	22ff      	movs	r2, #255	; 0xff
 8002c8c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002c8e:	4b41      	ldr	r3, [pc, #260]	; (8002d94 <HAL_I2C_Mem_Read+0x1a4>)
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c96:	4631      	mov	r1, r6
 8002c98:	4620      	mov	r0, r4
 8002c9a:	f7ff faca 	bl	8002232 <I2C_TransferConfig>
 8002c9e:	e021      	b.n	8002ce4 <HAL_I2C_Mem_Read+0xf4>
      __HAL_UNLOCK(hi2c);
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002ca6:	4653      	mov	r3, sl
 8002ca8:	e7ad      	b.n	8002c06 <HAL_I2C_Mem_Read+0x16>
      hi2c->XferSize = hi2c->XferCount;
 8002caa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002cac:	b292      	uxth	r2, r2
 8002cae:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002cb0:	4b38      	ldr	r3, [pc, #224]	; (8002d94 <HAL_I2C_Mem_Read+0x1a4>)
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	4631      	mov	r1, r6
 8002cbc:	4620      	mov	r0, r4
 8002cbe:	f7ff fab8 	bl	8002232 <I2C_TransferConfig>
 8002cc2:	e00f      	b.n	8002ce4 <HAL_I2C_Mem_Read+0xf4>
          hi2c->XferSize = hi2c->XferCount;
 8002cc4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002cc6:	b292      	uxth	r2, r2
 8002cc8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002cca:	2300      	movs	r3, #0
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	4631      	mov	r1, r6
 8002cd6:	4620      	mov	r0, r4
 8002cd8:	f7ff faab 	bl	8002232 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8002cdc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d034      	beq.n	8002d4e <HAL_I2C_Mem_Read+0x15e>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002ce4:	9700      	str	r7, [sp, #0]
 8002ce6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2104      	movs	r1, #4
 8002cec:	4620      	mov	r0, r4
 8002cee:	f7ff fbca 	bl	8002486 <I2C_WaitOnFlagUntilTimeout>
 8002cf2:	2800      	cmp	r0, #0
 8002cf4:	d148      	bne.n	8002d88 <HAL_I2C_Mem_Read+0x198>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002cf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002cf8:	6822      	ldr	r2, [r4, #0]
 8002cfa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cfc:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002cfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d00:	3301      	adds	r3, #1
 8002d02:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002d04:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002d06:	3a01      	subs	r2, #1
 8002d08:	b292      	uxth	r2, r2
 8002d0a:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002d0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d16:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0de      	beq.n	8002cdc <HAL_I2C_Mem_Read+0xec>
 8002d1e:	2a00      	cmp	r2, #0
 8002d20:	d1dc      	bne.n	8002cdc <HAL_I2C_Mem_Read+0xec>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d22:	9700      	str	r7, [sp, #0]
 8002d24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002d26:	2180      	movs	r1, #128	; 0x80
 8002d28:	4620      	mov	r0, r4
 8002d2a:	f7ff fbac 	bl	8002486 <I2C_WaitOnFlagUntilTimeout>
 8002d2e:	bb68      	cbnz	r0, 8002d8c <HAL_I2C_Mem_Read+0x19c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d30:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	2bff      	cmp	r3, #255	; 0xff
 8002d36:	d9c5      	bls.n	8002cc4 <HAL_I2C_Mem_Read+0xd4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d38:	22ff      	movs	r2, #255	; 0xff
 8002d3a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d44:	4631      	mov	r1, r6
 8002d46:	4620      	mov	r0, r4
 8002d48:	f7ff fa73 	bl	8002232 <I2C_TransferConfig>
 8002d4c:	e7c6      	b.n	8002cdc <HAL_I2C_Mem_Read+0xec>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d4e:	463a      	mov	r2, r7
 8002d50:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002d52:	4620      	mov	r0, r4
 8002d54:	f7ff fc30 	bl	80025b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	b9c8      	cbnz	r0, 8002d90 <HAL_I2C_Mem_Read+0x1a0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d5c:	6822      	ldr	r2, [r4, #0]
 8002d5e:	2120      	movs	r1, #32
 8002d60:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8002d62:	6820      	ldr	r0, [r4, #0]
 8002d64:	6842      	ldr	r2, [r0, #4]
 8002d66:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002d6a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002d6e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002d72:	f022 0201 	bic.w	r2, r2, #1
 8002d76:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002d78:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002d82:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8002d86:	e73e      	b.n	8002c06 <HAL_I2C_Mem_Read+0x16>
        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e73c      	b.n	8002c06 <HAL_I2C_Mem_Read+0x16>
          return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e73a      	b.n	8002c06 <HAL_I2C_Mem_Read+0x16>
      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e738      	b.n	8002c06 <HAL_I2C_Mem_Read+0x16>
 8002d94:	80002400 	.word	0x80002400

08002d98 <HAL_I2C_Mem_Read_IT>:
{
 8002d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002da2:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8002da6:	b2e4      	uxtb	r4, r4
 8002da8:	2c20      	cmp	r4, #32
 8002daa:	d004      	beq.n	8002db6 <HAL_I2C_Mem_Read_IT+0x1e>
    return HAL_BUSY;
 8002dac:	2402      	movs	r4, #2
}
 8002dae:	4620      	mov	r0, r4
 8002db0:	b002      	add	sp, #8
 8002db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((pData == NULL) || (Size == 0U))
 8002db6:	9c08      	ldr	r4, [sp, #32]
 8002db8:	b13c      	cbz	r4, 8002dca <HAL_I2C_Mem_Read_IT+0x32>
 8002dba:	b135      	cbz	r5, 8002dca <HAL_I2C_Mem_Read_IT+0x32>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002dbc:	6804      	ldr	r4, [r0, #0]
 8002dbe:	69a4      	ldr	r4, [r4, #24]
 8002dc0:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8002dc4:	d006      	beq.n	8002dd4 <HAL_I2C_Mem_Read_IT+0x3c>
      return HAL_BUSY;
 8002dc6:	2402      	movs	r4, #2
 8002dc8:	e7f1      	b.n	8002dae <HAL_I2C_Mem_Read_IT+0x16>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002dca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dce:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8002dd0:	2401      	movs	r4, #1
 8002dd2:	e7ec      	b.n	8002dae <HAL_I2C_Mem_Read_IT+0x16>
    __HAL_LOCK(hi2c);
 8002dd4:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8002dd8:	2c01      	cmp	r4, #1
 8002dda:	d101      	bne.n	8002de0 <HAL_I2C_Mem_Read_IT+0x48>
 8002ddc:	2402      	movs	r4, #2
 8002dde:	e7e6      	b.n	8002dae <HAL_I2C_Mem_Read_IT+0x16>
 8002de0:	461f      	mov	r7, r3
 8002de2:	4614      	mov	r4, r2
 8002de4:	460e      	mov	r6, r1
 8002de6:	4680      	mov	r8, r0
 8002de8:	2301      	movs	r3, #1
 8002dea:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002dee:	f7fe f8a7 	bl	8000f40 <HAL_GetTick>
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002df2:	2322      	movs	r3, #34	; 0x22
 8002df4:	f888 3041 	strb.w	r3, [r8, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002df8:	2340      	movs	r3, #64	; 0x40
 8002dfa:	f888 3042 	strb.w	r3, [r8, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 8002e04:	9b08      	ldr	r3, [sp, #32]
 8002e06:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e0a:	f8a8 502a 	strh.w	r5, [r8, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e0e:	4b1c      	ldr	r3, [pc, #112]	; (8002e80 <HAL_I2C_Mem_Read_IT+0xe8>)
 8002e10:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8002e14:	4b1b      	ldr	r3, [pc, #108]	; (8002e84 <HAL_I2C_Mem_Read_IT+0xec>)
 8002e16:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e1a:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	2bff      	cmp	r3, #255	; 0xff
 8002e22:	d914      	bls.n	8002e4e <HAL_I2C_Mem_Read_IT+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e24:	23ff      	movs	r3, #255	; 0xff
 8002e26:	f8a8 3028 	strh.w	r3, [r8, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002e2a:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002e2e:	9001      	str	r0, [sp, #4]
 8002e30:	2319      	movs	r3, #25
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	463b      	mov	r3, r7
 8002e36:	4622      	mov	r2, r4
 8002e38:	4631      	mov	r1, r6
 8002e3a:	4640      	mov	r0, r8
 8002e3c:	f7ff fb84 	bl	8002548 <I2C_RequestMemoryRead>
 8002e40:	4604      	mov	r4, r0
 8002e42:	b158      	cbz	r0, 8002e5c <HAL_I2C_Mem_Read_IT+0xc4>
      __HAL_UNLOCK(hi2c);
 8002e44:	2300      	movs	r3, #0
 8002e46:	f888 3040 	strb.w	r3, [r8, #64]	; 0x40
      return HAL_ERROR;
 8002e4a:	2401      	movs	r4, #1
 8002e4c:	e7af      	b.n	8002dae <HAL_I2C_Mem_Read_IT+0x16>
      hi2c->XferSize = hi2c->XferCount;
 8002e4e:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
 8002e52:	f8a8 3028 	strh.w	r3, [r8, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002e56:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8002e5a:	e7e8      	b.n	8002e2e <HAL_I2C_Mem_Read_IT+0x96>
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8002e5c:	f898 2028 	ldrb.w	r2, [r8, #40]	; 0x28
 8002e60:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <HAL_I2C_Mem_Read_IT+0xf0>)
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	462b      	mov	r3, r5
 8002e66:	4631      	mov	r1, r6
 8002e68:	4640      	mov	r0, r8
 8002e6a:	f7ff f9e2 	bl	8002232 <I2C_TransferConfig>
    __HAL_UNLOCK(hi2c);
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f888 3040 	strb.w	r3, [r8, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002e74:	2102      	movs	r1, #2
 8002e76:	4640      	mov	r0, r8
 8002e78:	f7ff f9f6 	bl	8002268 <I2C_Enable_IRQ>
    return HAL_OK;
 8002e7c:	e797      	b.n	8002dae <HAL_I2C_Mem_Read_IT+0x16>
 8002e7e:	bf00      	nop
 8002e80:	ffff0000 	.word	0xffff0000
 8002e84:	080034a7 	.word	0x080034a7
 8002e88:	80002400 	.word	0x80002400

08002e8c <HAL_I2C_EV_IRQHandler>:
{
 8002e8c:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002e8e:	6803      	ldr	r3, [r0, #0]
 8002e90:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002e92:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8002e94:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002e96:	b103      	cbz	r3, 8002e9a <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8002e98:	4798      	blx	r3
 8002e9a:	bd08      	pop	{r3, pc}

08002e9c <HAL_I2C_MasterTxCpltCallback>:
{
 8002e9c:	4770      	bx	lr

08002e9e <HAL_I2C_MasterRxCpltCallback>:
{
 8002e9e:	4770      	bx	lr

08002ea0 <I2C_ITMasterSequentialCplt>:
{
 8002ea0:	b538      	push	{r3, r4, r5, lr}
 8002ea2:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002eaa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b21      	cmp	r3, #33	; 0x21
 8002eb2:	d00f      	beq.n	8002ed4 <I2C_ITMasterSequentialCplt+0x34>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002eb4:	2320      	movs	r3, #32
 8002eb6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002eba:	2312      	movs	r3, #18
 8002ebc:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002ebe:	2500      	movs	r5, #0
 8002ec0:	6345      	str	r5, [r0, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002ec2:	2102      	movs	r1, #2
 8002ec4:	f7ff fa10 	bl	80022e8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002ec8:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002ecc:	4620      	mov	r0, r4
 8002ece:	f7ff ffe6 	bl	8002e9e <HAL_I2C_MasterRxCpltCallback>
 8002ed2:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->State         = HAL_I2C_STATE_READY;
 8002ed4:	2320      	movs	r3, #32
 8002ed6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002eda:	2311      	movs	r3, #17
 8002edc:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002ede:	2500      	movs	r5, #0
 8002ee0:	6345      	str	r5, [r0, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	f7ff fa00 	bl	80022e8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002ee8:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002eec:	4620      	mov	r0, r4
 8002eee:	f7ff ffd5 	bl	8002e9c <HAL_I2C_MasterTxCpltCallback>
 8002ef2:	bd38      	pop	{r3, r4, r5, pc}

08002ef4 <HAL_I2C_SlaveTxCpltCallback>:
{
 8002ef4:	4770      	bx	lr

08002ef6 <HAL_I2C_SlaveRxCpltCallback>:
{
 8002ef6:	4770      	bx	lr

08002ef8 <I2C_ITSlaveSequentialCplt>:
{
 8002ef8:	b510      	push	{r4, lr}
 8002efa:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002efc:	2300      	movs	r3, #0
 8002efe:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002f02:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b29      	cmp	r3, #41	; 0x29
 8002f0a:	d005      	beq.n	8002f18 <I2C_ITSlaveSequentialCplt+0x20>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002f0c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b2a      	cmp	r3, #42	; 0x2a
 8002f14:	d00f      	beq.n	8002f36 <I2C_ITSlaveSequentialCplt+0x3e>
 8002f16:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002f18:	2328      	movs	r3, #40	; 0x28
 8002f1a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f1e:	2321      	movs	r3, #33	; 0x21
 8002f20:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002f22:	2101      	movs	r1, #1
 8002f24:	f7ff f9e0 	bl	80022e8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002f2e:	4620      	mov	r0, r4
 8002f30:	f7ff ffe0 	bl	8002ef4 <HAL_I2C_SlaveTxCpltCallback>
 8002f34:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002f36:	2328      	movs	r3, #40	; 0x28
 8002f38:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f3c:	2322      	movs	r3, #34	; 0x22
 8002f3e:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002f40:	2102      	movs	r1, #2
 8002f42:	f7ff f9d1 	bl	80022e8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002f46:	2300      	movs	r3, #0
 8002f48:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f4c:	4620      	mov	r0, r4
 8002f4e:	f7ff ffd2 	bl	8002ef6 <HAL_I2C_SlaveRxCpltCallback>
}
 8002f52:	e7e0      	b.n	8002f16 <I2C_ITSlaveSequentialCplt+0x1e>

08002f54 <HAL_I2C_AddrCallback>:
{
 8002f54:	4770      	bx	lr

08002f56 <I2C_ITAddrCplt>:
{
 8002f56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f58:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002f5c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f60:	2b28      	cmp	r3, #40	; 0x28
 8002f62:	d006      	beq.n	8002f72 <I2C_ITAddrCplt+0x1c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f64:	6803      	ldr	r3, [r0, #0]
 8002f66:	2208      	movs	r2, #8
 8002f68:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8002f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f72:	4604      	mov	r4, r0
    transferdirection = I2C_GET_DIR(hi2c);
 8002f74:	6803      	ldr	r3, [r0, #0]
 8002f76:	699e      	ldr	r6, [r3, #24]
 8002f78:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002f7c:	699a      	ldr	r2, [r3, #24]
 8002f7e:	0c12      	lsrs	r2, r2, #16
 8002f80:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002f8a:	68df      	ldr	r7, [r3, #12]
 8002f8c:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f90:	68c1      	ldr	r1, [r0, #12]
 8002f92:	2902      	cmp	r1, #2
 8002f94:	d121      	bne.n	8002fda <I2C_ITAddrCplt+0x84>
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8002f96:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8002f9a:	f015 0f06 	tst.w	r5, #6
 8002f9e:	d110      	bne.n	8002fc2 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 8002fa0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002fa2:	3101      	adds	r1, #1
 8002fa4:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002fa6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002fa8:	2902      	cmp	r1, #2
 8002faa:	d1e1      	bne.n	8002f70 <I2C_ITAddrCplt+0x1a>
          hi2c->AddrEventCount = 0U;
 8002fac:	2100      	movs	r1, #0
 8002fae:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fb0:	2008      	movs	r0, #8
 8002fb2:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8002fb4:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002fb8:	4631      	mov	r1, r6
 8002fba:	4620      	mov	r0, r4
 8002fbc:	f7ff ffca 	bl	8002f54 <HAL_I2C_AddrCallback>
 8002fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002fc2:	2104      	movs	r1, #4
 8002fc4:	f7ff f990 	bl	80022e8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002fc8:	2300      	movs	r3, #0
 8002fca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002fce:	463a      	mov	r2, r7
 8002fd0:	4631      	mov	r1, r6
 8002fd2:	4620      	mov	r0, r4
 8002fd4:	f7ff ffbe 	bl	8002f54 <HAL_I2C_AddrCallback>
 8002fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002fda:	2104      	movs	r1, #4
 8002fdc:	f7ff f984 	bl	80022e8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002fe6:	462a      	mov	r2, r5
 8002fe8:	4631      	mov	r1, r6
 8002fea:	4620      	mov	r0, r4
 8002fec:	f7ff ffb2 	bl	8002f54 <HAL_I2C_AddrCallback>
 8002ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002ff2 <HAL_I2C_ListenCpltCallback>:
{
 8002ff2:	4770      	bx	lr

08002ff4 <I2C_ITListenCplt>:
{
 8002ff4:	b510      	push	{r4, lr}
 8002ff6:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ff8:	4b17      	ldr	r3, [pc, #92]	; (8003058 <I2C_ITListenCplt+0x64>)
 8002ffa:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003000:	2220      	movs	r2, #32
 8003002:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003006:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 800300a:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800300c:	f011 0f04 	tst.w	r1, #4
 8003010:	d013      	beq.n	800303a <I2C_ITListenCplt+0x46>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003012:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003014:	6802      	ldr	r2, [r0, #0]
 8003016:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003018:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800301a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800301c:	3301      	adds	r3, #1
 800301e:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8003020:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8003022:	b153      	cbz	r3, 800303a <I2C_ITListenCplt+0x46>
      hi2c->XferSize--;
 8003024:	3b01      	subs	r3, #1
 8003026:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8003028:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800302a:	b29b      	uxth	r3, r3
 800302c:	3b01      	subs	r3, #1
 800302e:	b29b      	uxth	r3, r3
 8003030:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003032:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003034:	f043 0304 	orr.w	r3, r3, #4
 8003038:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800303a:	2107      	movs	r1, #7
 800303c:	4620      	mov	r0, r4
 800303e:	f7ff f953 	bl	80022e8 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003042:	6823      	ldr	r3, [r4, #0]
 8003044:	2210      	movs	r2, #16
 8003046:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8003048:	2300      	movs	r3, #0
 800304a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 800304e:	4620      	mov	r0, r4
 8003050:	f7ff ffcf 	bl	8002ff2 <HAL_I2C_ListenCpltCallback>
 8003054:	bd10      	pop	{r4, pc}
 8003056:	bf00      	nop
 8003058:	ffff0000 	.word	0xffff0000

0800305c <HAL_I2C_MemTxCpltCallback>:
{
 800305c:	4770      	bx	lr

0800305e <HAL_I2C_MemRxCpltCallback>:
{
 800305e:	4770      	bx	lr

08003060 <HAL_I2C_ErrorCallback>:
{
 8003060:	4770      	bx	lr

08003062 <HAL_I2C_AbortCpltCallback>:
{
 8003062:	4770      	bx	lr

08003064 <I2C_ITError>:
{
 8003064:	b510      	push	{r4, lr}
 8003066:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003068:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800306c:	2200      	movs	r2, #0
 800306e:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003072:	4836      	ldr	r0, [pc, #216]	; (800314c <I2C_ITError+0xe8>)
 8003074:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003076:	8562      	strh	r2, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8003078:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800307a:	4311      	orrs	r1, r2
 800307c:	6461      	str	r1, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800307e:	3b28      	subs	r3, #40	; 0x28
 8003080:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003082:	2b02      	cmp	r3, #2
 8003084:	d81f      	bhi.n	80030c6 <I2C_ITError+0x62>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003086:	2103      	movs	r1, #3
 8003088:	4620      	mov	r0, r4
 800308a:	f7ff f92d 	bl	80022e8 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800308e:	2328      	movs	r3, #40	; 0x28
 8003090:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003094:	2300      	movs	r3, #0
 8003096:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003098:	4b2d      	ldr	r3, [pc, #180]	; (8003150 <I2C_ITError+0xec>)
 800309a:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800309c:	6823      	ldr	r3, [r4, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80030a4:	d023      	beq.n	80030ee <I2C_ITError+0x8a>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030ac:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 80030ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80030b0:	b143      	cbz	r3, 80030c4 <I2C_ITError+0x60>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80030b2:	4a28      	ldr	r2, [pc, #160]	; (8003154 <I2C_ITError+0xf0>)
 80030b4:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 80030b6:	2300      	movs	r3, #0
 80030b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80030bc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80030be:	f7fe ff13 	bl	8001ee8 <HAL_DMA_Abort_IT>
 80030c2:	b980      	cbnz	r0, 80030e6 <I2C_ITError+0x82>
 80030c4:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80030c6:	2107      	movs	r1, #7
 80030c8:	4620      	mov	r0, r4
 80030ca:	f7ff f90d 	bl	80022e8 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80030ce:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b60      	cmp	r3, #96	; 0x60
 80030d6:	d002      	beq.n	80030de <I2C_ITError+0x7a>
      hi2c->State         = HAL_I2C_STATE_READY;
 80030d8:	2320      	movs	r3, #32
 80030da:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80030de:	2300      	movs	r3, #0
 80030e0:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80030e2:	6363      	str	r3, [r4, #52]	; 0x34
 80030e4:	e7da      	b.n	800309c <I2C_ITError+0x38>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80030e6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80030e8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80030ea:	4798      	blx	r3
 80030ec:	bd10      	pop	{r4, pc}
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80030f4:	d014      	beq.n	8003120 <I2C_ITError+0xbc>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030fc:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 80030fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0df      	beq.n	80030c4 <I2C_ITError+0x60>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003104:	4a13      	ldr	r2, [pc, #76]	; (8003154 <I2C_ITError+0xf0>)
 8003106:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8003108:	2300      	movs	r3, #0
 800310a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800310e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003110:	f7fe feea 	bl	8001ee8 <HAL_DMA_Abort_IT>
 8003114:	2800      	cmp	r0, #0
 8003116:	d0d5      	beq.n	80030c4 <I2C_ITError+0x60>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003118:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800311a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800311c:	4798      	blx	r3
 800311e:	bd10      	pop	{r4, pc}
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003120:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b60      	cmp	r3, #96	; 0x60
 8003128:	d006      	beq.n	8003138 <I2C_ITError+0xd4>
    __HAL_UNLOCK(hi2c);
 800312a:	2300      	movs	r3, #0
 800312c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003130:	4620      	mov	r0, r4
 8003132:	f7ff ff95 	bl	8003060 <HAL_I2C_ErrorCallback>
}
 8003136:	e7c5      	b.n	80030c4 <I2C_ITError+0x60>
    hi2c->State = HAL_I2C_STATE_READY;
 8003138:	2320      	movs	r3, #32
 800313a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800313e:	2300      	movs	r3, #0
 8003140:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8003144:	4620      	mov	r0, r4
 8003146:	f7ff ff8c 	bl	8003062 <HAL_I2C_AbortCpltCallback>
 800314a:	bd10      	pop	{r4, pc}
 800314c:	ffff0000 	.word	0xffff0000
 8003150:	08003275 	.word	0x08003275
 8003154:	0800384f 	.word	0x0800384f

08003158 <I2C_ITSlaveCplt>:
{
 8003158:	b570      	push	{r4, r5, r6, lr}
 800315a:	4604      	mov	r4, r0
 800315c:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800315e:	6803      	ldr	r3, [r0, #0]
 8003160:	681e      	ldr	r6, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003162:	2220      	movs	r2, #32
 8003164:	61da      	str	r2, [r3, #28]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003166:	6803      	ldr	r3, [r0, #0]
 8003168:	2208      	movs	r2, #8
 800316a:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800316c:	2107      	movs	r1, #7
 800316e:	f7ff f8bb 	bl	80022e8 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003172:	6822      	ldr	r2, [r4, #0]
 8003174:	6853      	ldr	r3, [r2, #4]
 8003176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800317a:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 800317c:	6822      	ldr	r2, [r4, #0]
 800317e:	6853      	ldr	r3, [r2, #4]
 8003180:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003184:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003188:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800318c:	f023 0301 	bic.w	r3, r3, #1
 8003190:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8003192:	4620      	mov	r0, r4
 8003194:	f7ff f83c 	bl	8002210 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003198:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800319c:	d039      	beq.n	8003212 <I2C_ITSlaveCplt+0xba>
    if (hi2c->hdmatx != NULL)
 800319e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031a0:	b11b      	cbz	r3, 80031aa <I2C_ITSlaveCplt+0x52>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80031aa:	f015 0f04 	tst.w	r5, #4
 80031ae:	d00f      	beq.n	80031d0 <I2C_ITSlaveCplt+0x78>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031b2:	6822      	ldr	r2, [r4, #0]
 80031b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031b6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80031b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031ba:	3301      	adds	r3, #1
 80031bc:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80031be:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80031c0:	b133      	cbz	r3, 80031d0 <I2C_ITSlaveCplt+0x78>
      hi2c->XferSize--;
 80031c2:	3b01      	subs	r3, #1
 80031c4:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80031c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 80031d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	b11b      	cbz	r3, 80031de <I2C_ITSlaveCplt+0x86>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80031d8:	f043 0304 	orr.w	r3, r3, #4
 80031dc:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 80031de:	2300      	movs	r3, #0
 80031e0:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 80031e6:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80031ea:	b9eb      	cbnz	r3, 8003228 <I2C_ITSlaveCplt+0xd0>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80031ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80031ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031f2:	d127      	bne.n	8003244 <I2C_ITSlaveCplt+0xec>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031f4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b22      	cmp	r3, #34	; 0x22
 80031fc:	d02e      	beq.n	800325c <I2C_ITSlaveCplt+0x104>
    hi2c->State = HAL_I2C_STATE_READY;
 80031fe:	2320      	movs	r3, #32
 8003200:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003204:	2300      	movs	r3, #0
 8003206:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800320a:	4620      	mov	r0, r4
 800320c:	f7ff fe72 	bl	8002ef4 <HAL_I2C_SlaveTxCpltCallback>
 8003210:	bd70      	pop	{r4, r5, r6, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003212:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8003216:	d0c8      	beq.n	80031aa <I2C_ITSlaveCplt+0x52>
    if (hi2c->hdmarx != NULL)
 8003218:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0c5      	beq.n	80031aa <I2C_ITSlaveCplt+0x52>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	b29b      	uxth	r3, r3
 8003224:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003226:	e7c0      	b.n	80031aa <I2C_ITSlaveCplt+0x52>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003228:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800322a:	4620      	mov	r0, r4
 800322c:	f7ff ff1a 	bl	8003064 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003230:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b28      	cmp	r3, #40	; 0x28
 8003238:	d1ea      	bne.n	8003210 <I2C_ITSlaveCplt+0xb8>
      I2C_ITListenCplt(hi2c, ITFlags);
 800323a:	4629      	mov	r1, r5
 800323c:	4620      	mov	r0, r4
 800323e:	f7ff fed9 	bl	8002ff4 <I2C_ITListenCplt>
 8003242:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003244:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <I2C_ITSlaveCplt+0x118>)
 8003246:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003248:	2320      	movs	r3, #32
 800324a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800324e:	2300      	movs	r3, #0
 8003250:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003254:	4620      	mov	r0, r4
 8003256:	f7ff fecc 	bl	8002ff2 <HAL_I2C_ListenCpltCallback>
 800325a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800325c:	2320      	movs	r3, #32
 800325e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003262:	2300      	movs	r3, #0
 8003264:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003268:	4620      	mov	r0, r4
 800326a:	f7ff fe44 	bl	8002ef6 <HAL_I2C_SlaveRxCpltCallback>
 800326e:	bd70      	pop	{r4, r5, r6, pc}
 8003270:	ffff0000 	.word	0xffff0000

08003274 <I2C_Slave_ISR_IT>:
{
 8003274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 8003276:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8003278:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800327c:	2b01      	cmp	r3, #1
 800327e:	f000 809e 	beq.w	80033be <I2C_Slave_ISR_IT+0x14a>
 8003282:	4616      	mov	r6, r2
 8003284:	460d      	mov	r5, r1
 8003286:	4604      	mov	r4, r0
 8003288:	2301      	movs	r3, #1
 800328a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800328e:	f011 0f10 	tst.w	r1, #16
 8003292:	d03f      	beq.n	8003314 <I2C_Slave_ISR_IT+0xa0>
 8003294:	f012 0f10 	tst.w	r2, #16
 8003298:	d03c      	beq.n	8003314 <I2C_Slave_ISR_IT+0xa0>
    if (hi2c->XferCount == 0U)
 800329a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800329c:	b29b      	uxth	r3, r3
 800329e:	bb4b      	cbnz	r3, 80032f4 <I2C_Slave_ISR_IT+0x80>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80032a0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b28      	cmp	r3, #40	; 0x28
 80032a8:	d011      	beq.n	80032ce <I2C_Slave_ISR_IT+0x5a>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80032aa:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b29      	cmp	r3, #41	; 0x29
 80032b2:	d012      	beq.n	80032da <I2C_Slave_ISR_IT+0x66>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032b4:	6823      	ldr	r3, [r4, #0]
 80032b6:	2210      	movs	r2, #16
 80032b8:	61da      	str	r2, [r3, #28]
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80032ba:	f015 0f20 	tst.w	r5, #32
 80032be:	d002      	beq.n	80032c6 <I2C_Slave_ISR_IT+0x52>
 80032c0:	f016 0f20 	tst.w	r6, #32
 80032c4:	d176      	bne.n	80033b4 <I2C_Slave_ISR_IT+0x140>
  __HAL_UNLOCK(hi2c);
 80032c6:	2000      	movs	r0, #0
 80032c8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return HAL_OK;
 80032cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80032ce:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 80032d2:	d1ea      	bne.n	80032aa <I2C_Slave_ISR_IT+0x36>
        I2C_ITListenCplt(hi2c, ITFlags);
 80032d4:	f7ff fe8e 	bl	8002ff4 <I2C_ITListenCplt>
 80032d8:	e7ef      	b.n	80032ba <I2C_Slave_ISR_IT+0x46>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80032da:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 80032de:	d0e9      	beq.n	80032b4 <I2C_Slave_ISR_IT+0x40>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032e0:	6823      	ldr	r3, [r4, #0]
 80032e2:	2210      	movs	r2, #16
 80032e4:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 80032e6:	4620      	mov	r0, r4
 80032e8:	f7fe ff92 	bl	8002210 <I2C_Flush_TXDR>
        I2C_ITSlaveSequentialCplt(hi2c);
 80032ec:	4620      	mov	r0, r4
 80032ee:	f7ff fe03 	bl	8002ef8 <I2C_ITSlaveSequentialCplt>
 80032f2:	e7e2      	b.n	80032ba <I2C_Slave_ISR_IT+0x46>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032f4:	6803      	ldr	r3, [r0, #0]
 80032f6:	2210      	movs	r2, #16
 80032f8:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032fa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80032fc:	f043 0304 	orr.w	r3, r3, #4
 8003300:	6443      	str	r3, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003302:	b117      	cbz	r7, 800330a <I2C_Slave_ISR_IT+0x96>
 8003304:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8003308:	d1d7      	bne.n	80032ba <I2C_Slave_ISR_IT+0x46>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800330a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800330c:	4620      	mov	r0, r4
 800330e:	f7ff fea9 	bl	8003064 <I2C_ITError>
 8003312:	e7d2      	b.n	80032ba <I2C_Slave_ISR_IT+0x46>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003314:	f015 0f04 	tst.w	r5, #4
 8003318:	d01f      	beq.n	800335a <I2C_Slave_ISR_IT+0xe6>
 800331a:	f016 0f04 	tst.w	r6, #4
 800331e:	d01c      	beq.n	800335a <I2C_Slave_ISR_IT+0xe6>
    if (hi2c->XferCount > 0U)
 8003320:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003322:	b29b      	uxth	r3, r3
 8003324:	b173      	cbz	r3, 8003344 <I2C_Slave_ISR_IT+0xd0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003326:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003328:	6822      	ldr	r2, [r4, #0]
 800332a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800332c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800332e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003330:	3301      	adds	r3, #1
 8003332:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003334:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003336:	3b01      	subs	r3, #1
 8003338:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800333a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800333c:	b29b      	uxth	r3, r3
 800333e:	3b01      	subs	r3, #1
 8003340:	b29b      	uxth	r3, r3
 8003342:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8003344:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003346:	b29b      	uxth	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1b6      	bne.n	80032ba <I2C_Slave_ISR_IT+0x46>
 800334c:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8003350:	d0b3      	beq.n	80032ba <I2C_Slave_ISR_IT+0x46>
      I2C_ITSlaveSequentialCplt(hi2c);
 8003352:	4620      	mov	r0, r4
 8003354:	f7ff fdd0 	bl	8002ef8 <I2C_ITSlaveSequentialCplt>
 8003358:	e7af      	b.n	80032ba <I2C_Slave_ISR_IT+0x46>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800335a:	f015 0f08 	tst.w	r5, #8
 800335e:	d002      	beq.n	8003366 <I2C_Slave_ISR_IT+0xf2>
 8003360:	f016 0f08 	tst.w	r6, #8
 8003364:	d118      	bne.n	8003398 <I2C_Slave_ISR_IT+0x124>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003366:	f015 0f02 	tst.w	r5, #2
 800336a:	d0a6      	beq.n	80032ba <I2C_Slave_ISR_IT+0x46>
 800336c:	f016 0f02 	tst.w	r6, #2
 8003370:	d0a3      	beq.n	80032ba <I2C_Slave_ISR_IT+0x46>
    if (hi2c->XferCount > 0U)
 8003372:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003374:	b29b      	uxth	r3, r3
 8003376:	b1a3      	cbz	r3, 80033a2 <I2C_Slave_ISR_IT+0x12e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003378:	6823      	ldr	r3, [r4, #0]
 800337a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800337c:	7812      	ldrb	r2, [r2, #0]
 800337e:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003380:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003382:	3301      	adds	r3, #1
 8003384:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003386:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003388:	b29b      	uxth	r3, r3
 800338a:	3b01      	subs	r3, #1
 800338c:	b29b      	uxth	r3, r3
 800338e:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003390:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003392:	3b01      	subs	r3, #1
 8003394:	8523      	strh	r3, [r4, #40]	; 0x28
 8003396:	e790      	b.n	80032ba <I2C_Slave_ISR_IT+0x46>
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003398:	4629      	mov	r1, r5
 800339a:	4620      	mov	r0, r4
 800339c:	f7ff fddb 	bl	8002f56 <I2C_ITAddrCplt>
 80033a0:	e78b      	b.n	80032ba <I2C_Slave_ISR_IT+0x46>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80033a2:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 80033a6:	d001      	beq.n	80033ac <I2C_Slave_ISR_IT+0x138>
 80033a8:	2f00      	cmp	r7, #0
 80033aa:	d186      	bne.n	80032ba <I2C_Slave_ISR_IT+0x46>
        I2C_ITSlaveSequentialCplt(hi2c);
 80033ac:	4620      	mov	r0, r4
 80033ae:	f7ff fda3 	bl	8002ef8 <I2C_ITSlaveSequentialCplt>
 80033b2:	e782      	b.n	80032ba <I2C_Slave_ISR_IT+0x46>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80033b4:	4629      	mov	r1, r5
 80033b6:	4620      	mov	r0, r4
 80033b8:	f7ff fece 	bl	8003158 <I2C_ITSlaveCplt>
 80033bc:	e783      	b.n	80032c6 <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 80033be:	2002      	movs	r0, #2
}
 80033c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080033c2 <I2C_ITMasterCplt>:
{
 80033c2:	b510      	push	{r4, lr}
 80033c4:	4604      	mov	r4, r0
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033c6:	6803      	ldr	r3, [r0, #0]
 80033c8:	2220      	movs	r2, #32
 80033ca:	61da      	str	r2, [r3, #28]
  I2C_RESET_CR2(hi2c);
 80033cc:	6802      	ldr	r2, [r0, #0]
 80033ce:	6853      	ldr	r3, [r2, #4]
 80033d0:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80033d4:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80033d8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80033dc:	f023 0301 	bic.w	r3, r3, #1
 80033e0:	6053      	str	r3, [r2, #4]
  hi2c->PreviousState = I2C_STATE_NONE;
 80033e2:	2300      	movs	r3, #0
 80033e4:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR       = NULL;
 80033e6:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80033e8:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80033ec:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 80033ee:	f011 0f10 	tst.w	r1, #16
 80033f2:	d006      	beq.n	8003402 <I2C_ITMasterCplt+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033f4:	6803      	ldr	r3, [r0, #0]
 80033f6:	2210      	movs	r2, #16
 80033f8:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033fa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80033fc:	f043 0304 	orr.w	r3, r3, #4
 8003400:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Flush_TXDR(hi2c);
 8003402:	4620      	mov	r0, r4
 8003404:	f7fe ff04 	bl	8002210 <I2C_Flush_TXDR>
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003408:	2103      	movs	r1, #3
 800340a:	4620      	mov	r0, r4
 800340c:	f7fe ff6c 	bl	80022e8 <I2C_Disable_IRQ>
  tmperror = hi2c->ErrorCode;
 8003410:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003412:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b60      	cmp	r3, #96	; 0x60
 800341a:	d00b      	beq.n	8003434 <I2C_ITMasterCplt+0x72>
 800341c:	b952      	cbnz	r2, 8003434 <I2C_ITMasterCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800341e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b21      	cmp	r3, #33	; 0x21
 8003426:	d00a      	beq.n	800343e <I2C_ITMasterCplt+0x7c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003428:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b22      	cmp	r3, #34	; 0x22
 8003430:	d01f      	beq.n	8003472 <I2C_ITMasterCplt+0xb0>
 8003432:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003434:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003436:	4620      	mov	r0, r4
 8003438:	f7ff fe14 	bl	8003064 <I2C_ITError>
 800343c:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800343e:	2320      	movs	r3, #32
 8003440:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003444:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b40      	cmp	r3, #64	; 0x40
 800344c:	d008      	beq.n	8003460 <I2C_ITMasterCplt+0x9e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800344e:	2300      	movs	r3, #0
 8003450:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003454:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003458:	4620      	mov	r0, r4
 800345a:	f7ff fd1f 	bl	8002e9c <HAL_I2C_MasterTxCpltCallback>
 800345e:	bd10      	pop	{r4, pc}
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003460:	2300      	movs	r3, #0
 8003462:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003466:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800346a:	4620      	mov	r0, r4
 800346c:	f7ff fdf6 	bl	800305c <HAL_I2C_MemTxCpltCallback>
 8003470:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8003472:	2320      	movs	r3, #32
 8003474:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003478:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b40      	cmp	r3, #64	; 0x40
 8003480:	d008      	beq.n	8003494 <I2C_ITMasterCplt+0xd2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003482:	2300      	movs	r3, #0
 8003484:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003488:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800348c:	4620      	mov	r0, r4
 800348e:	f7ff fd06 	bl	8002e9e <HAL_I2C_MasterRxCpltCallback>
}
 8003492:	e7ce      	b.n	8003432 <I2C_ITMasterCplt+0x70>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003494:	2300      	movs	r3, #0
 8003496:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800349a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800349e:	4620      	mov	r0, r4
 80034a0:	f7ff fddd 	bl	800305e <HAL_I2C_MemRxCpltCallback>
 80034a4:	bd10      	pop	{r4, pc}

080034a6 <I2C_Master_ISR_IT>:
  __HAL_LOCK(hi2c);
 80034a6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	f000 80b7 	beq.w	800361e <I2C_Master_ISR_IT+0x178>
{
 80034b0:	b570      	push	{r4, r5, r6, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	4616      	mov	r6, r2
 80034b6:	460d      	mov	r5, r1
 80034b8:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 80034ba:	2301      	movs	r3, #1
 80034bc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80034c0:	f011 0f10 	tst.w	r1, #16
 80034c4:	d002      	beq.n	80034cc <I2C_Master_ISR_IT+0x26>
 80034c6:	f012 0f10 	tst.w	r2, #16
 80034ca:	d120      	bne.n	800350e <I2C_Master_ISR_IT+0x68>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80034cc:	f015 0f04 	tst.w	r5, #4
 80034d0:	d027      	beq.n	8003522 <I2C_Master_ISR_IT+0x7c>
 80034d2:	f016 0f04 	tst.w	r6, #4
 80034d6:	d024      	beq.n	8003522 <I2C_Master_ISR_IT+0x7c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034da:	6822      	ldr	r2, [r4, #0]
 80034dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034de:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80034e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034e2:	3301      	adds	r3, #1
 80034e4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferSize--;
 80034e6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80034e8:	3b01      	subs	r3, #1
 80034ea:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferCount--;
 80034ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	8563      	strh	r3, [r4, #42]	; 0x2a
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80034f6:	f015 0f20 	tst.w	r5, #32
 80034fa:	d003      	beq.n	8003504 <I2C_Master_ISR_IT+0x5e>
 80034fc:	f016 0f20 	tst.w	r6, #32
 8003500:	f040 8088 	bne.w	8003614 <I2C_Master_ISR_IT+0x16e>
  __HAL_UNLOCK(hi2c);
 8003504:	2000      	movs	r0, #0
 8003506:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 800350a:	b002      	add	sp, #8
 800350c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800350e:	6803      	ldr	r3, [r0, #0]
 8003510:	2210      	movs	r2, #16
 8003512:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003514:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003516:	f043 0304 	orr.w	r3, r3, #4
 800351a:	6443      	str	r3, [r0, #68]	; 0x44
    I2C_Flush_TXDR(hi2c);
 800351c:	f7fe fe78 	bl	8002210 <I2C_Flush_TXDR>
 8003520:	e7e9      	b.n	80034f6 <I2C_Master_ISR_IT+0x50>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003522:	f015 0f02 	tst.w	r5, #2
 8003526:	d012      	beq.n	800354e <I2C_Master_ISR_IT+0xa8>
 8003528:	f016 0f02 	tst.w	r6, #2
 800352c:	d00f      	beq.n	800354e <I2C_Master_ISR_IT+0xa8>
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800352e:	6823      	ldr	r3, [r4, #0]
 8003530:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003532:	7812      	ldrb	r2, [r2, #0]
 8003534:	629a      	str	r2, [r3, #40]	; 0x28
    hi2c->pBuffPtr++;
 8003536:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003538:	3301      	adds	r3, #1
 800353a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferSize--;
 800353c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800353e:	3b01      	subs	r3, #1
 8003540:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferCount--;
 8003542:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003544:	b29b      	uxth	r3, r3
 8003546:	3b01      	subs	r3, #1
 8003548:	b29b      	uxth	r3, r3
 800354a:	8563      	strh	r3, [r4, #42]	; 0x2a
 800354c:	e7d3      	b.n	80034f6 <I2C_Master_ISR_IT+0x50>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800354e:	f015 0f80 	tst.w	r5, #128	; 0x80
 8003552:	d03f      	beq.n	80035d4 <I2C_Master_ISR_IT+0x12e>
 8003554:	f016 0f40 	tst.w	r6, #64	; 0x40
 8003558:	d03c      	beq.n	80035d4 <I2C_Master_ISR_IT+0x12e>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800355a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800355c:	b29b      	uxth	r3, r3
 800355e:	b35b      	cbz	r3, 80035b8 <I2C_Master_ISR_IT+0x112>
 8003560:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003562:	bb4b      	cbnz	r3, 80035b8 <I2C_Master_ISR_IT+0x112>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003564:	6823      	ldr	r3, [r4, #0]
 8003566:	6859      	ldr	r1, [r3, #4]
 8003568:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800356c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800356e:	b29b      	uxth	r3, r3
 8003570:	2bff      	cmp	r3, #255	; 0xff
 8003572:	d80e      	bhi.n	8003592 <I2C_Master_ISR_IT+0xec>
        hi2c->XferSize = hi2c->XferCount;
 8003574:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003576:	b292      	uxth	r2, r2
 8003578:	8522      	strh	r2, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800357a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800357c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003580:	d011      	beq.n	80035a6 <I2C_Master_ISR_IT+0x100>
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8003582:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003584:	2000      	movs	r0, #0
 8003586:	9000      	str	r0, [sp, #0]
 8003588:	b2d2      	uxtb	r2, r2
 800358a:	4620      	mov	r0, r4
 800358c:	f7fe fe51 	bl	8002232 <I2C_TransferConfig>
 8003590:	e7b1      	b.n	80034f6 <I2C_Master_ISR_IT+0x50>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003592:	22ff      	movs	r2, #255	; 0xff
 8003594:	8522      	strh	r2, [r4, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003596:	2300      	movs	r3, #0
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800359e:	4620      	mov	r0, r4
 80035a0:	f7fe fe47 	bl	8002232 <I2C_TransferConfig>
 80035a4:	e7a7      	b.n	80034f6 <I2C_Master_ISR_IT+0x50>
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80035a6:	2300      	movs	r3, #0
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	4620      	mov	r0, r4
 80035b2:	f7fe fe3e 	bl	8002232 <I2C_TransferConfig>
 80035b6:	e79e      	b.n	80034f6 <I2C_Master_ISR_IT+0x50>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80035b8:	6823      	ldr	r3, [r4, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80035c0:	d103      	bne.n	80035ca <I2C_Master_ISR_IT+0x124>
        I2C_ITMasterSequentialCplt(hi2c);
 80035c2:	4620      	mov	r0, r4
 80035c4:	f7ff fc6c 	bl	8002ea0 <I2C_ITMasterSequentialCplt>
 80035c8:	e795      	b.n	80034f6 <I2C_Master_ISR_IT+0x50>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80035ca:	2140      	movs	r1, #64	; 0x40
 80035cc:	4620      	mov	r0, r4
 80035ce:	f7ff fd49 	bl	8003064 <I2C_ITError>
 80035d2:	e790      	b.n	80034f6 <I2C_Master_ISR_IT+0x50>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80035d4:	f015 0f40 	tst.w	r5, #64	; 0x40
 80035d8:	d08d      	beq.n	80034f6 <I2C_Master_ISR_IT+0x50>
 80035da:	f016 0f40 	tst.w	r6, #64	; 0x40
 80035de:	d08a      	beq.n	80034f6 <I2C_Master_ISR_IT+0x50>
    if (hi2c->XferCount == 0U)
 80035e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	b98b      	cbnz	r3, 800360a <I2C_Master_ISR_IT+0x164>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80035e6:	6823      	ldr	r3, [r4, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80035ee:	d182      	bne.n	80034f6 <I2C_Master_ISR_IT+0x50>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80035f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80035f2:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80035f6:	d003      	beq.n	8003600 <I2C_Master_ISR_IT+0x15a>
          I2C_ITMasterSequentialCplt(hi2c);
 80035f8:	4620      	mov	r0, r4
 80035fa:	f7ff fc51 	bl	8002ea0 <I2C_ITMasterSequentialCplt>
 80035fe:	e77a      	b.n	80034f6 <I2C_Master_ISR_IT+0x50>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003606:	605a      	str	r2, [r3, #4]
 8003608:	e775      	b.n	80034f6 <I2C_Master_ISR_IT+0x50>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800360a:	2140      	movs	r1, #64	; 0x40
 800360c:	4620      	mov	r0, r4
 800360e:	f7ff fd29 	bl	8003064 <I2C_ITError>
 8003612:	e770      	b.n	80034f6 <I2C_Master_ISR_IT+0x50>
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003614:	4629      	mov	r1, r5
 8003616:	4620      	mov	r0, r4
 8003618:	f7ff fed3 	bl	80033c2 <I2C_ITMasterCplt>
 800361c:	e772      	b.n	8003504 <I2C_Master_ISR_IT+0x5e>
  __HAL_LOCK(hi2c);
 800361e:	2002      	movs	r0, #2
 8003620:	4770      	bx	lr

08003622 <I2C_Slave_ISR_DMA>:
{
 8003622:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 8003624:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8003626:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800362a:	2b01      	cmp	r3, #1
 800362c:	d06b      	beq.n	8003706 <I2C_Slave_ISR_DMA+0xe4>
 800362e:	4604      	mov	r4, r0
 8003630:	2301      	movs	r3, #1
 8003632:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003636:	f011 0f10 	tst.w	r1, #16
 800363a:	d04c      	beq.n	80036d6 <I2C_Slave_ISR_DMA+0xb4>
 800363c:	f012 0f10 	tst.w	r2, #16
 8003640:	d049      	beq.n	80036d6 <I2C_Slave_ISR_DMA+0xb4>
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003642:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 8003646:	d042      	beq.n	80036ce <I2C_Slave_ISR_DMA+0xac>
      if (hi2c->hdmarx != NULL)
 8003648:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800364a:	b1d3      	cbz	r3, 8003682 <I2C_Slave_ISR_DMA+0x60>
        if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	b1cb      	cbz	r3, 8003686 <I2C_Slave_ISR_DMA+0x64>
  uint32_t treatdmanack = 0U;
 8003652:	2200      	movs	r2, #0
      if (hi2c->hdmatx != NULL)
 8003654:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003656:	b11b      	cbz	r3, 8003660 <I2C_Slave_ISR_DMA+0x3e>
        if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	b903      	cbnz	r3, 8003660 <I2C_Slave_ISR_DMA+0x3e>
          treatdmanack = 1U;
 800365e:	2201      	movs	r2, #1
      if (treatdmanack == 1U)
 8003660:	b99a      	cbnz	r2, 800368a <I2C_Slave_ISR_DMA+0x68>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003662:	6823      	ldr	r3, [r4, #0]
 8003664:	2210      	movs	r2, #16
 8003666:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003668:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800366a:	f043 0304 	orr.w	r3, r3, #4
 800366e:	6463      	str	r3, [r4, #68]	; 0x44
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003670:	b115      	cbz	r5, 8003678 <I2C_Slave_ISR_DMA+0x56>
 8003672:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
 8003676:	d13a      	bne.n	80036ee <I2C_Slave_ISR_DMA+0xcc>
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003678:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800367a:	4620      	mov	r0, r4
 800367c:	f7ff fcf2 	bl	8003064 <I2C_ITError>
 8003680:	e035      	b.n	80036ee <I2C_Slave_ISR_DMA+0xcc>
  uint32_t treatdmanack = 0U;
 8003682:	2200      	movs	r2, #0
 8003684:	e7e6      	b.n	8003654 <I2C_Slave_ISR_DMA+0x32>
          treatdmanack = 1U;
 8003686:	2201      	movs	r2, #1
 8003688:	e7e4      	b.n	8003654 <I2C_Slave_ISR_DMA+0x32>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800368a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b28      	cmp	r3, #40	; 0x28
 8003692:	d008      	beq.n	80036a6 <I2C_Slave_ISR_DMA+0x84>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003694:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b29      	cmp	r3, #41	; 0x29
 800369c:	d00a      	beq.n	80036b4 <I2C_Slave_ISR_DMA+0x92>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800369e:	6823      	ldr	r3, [r4, #0]
 80036a0:	2210      	movs	r2, #16
 80036a2:	61da      	str	r2, [r3, #28]
 80036a4:	e023      	b.n	80036ee <I2C_Slave_ISR_DMA+0xcc>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80036a6:	f1b5 7f00 	cmp.w	r5, #33554432	; 0x2000000
 80036aa:	d1f3      	bne.n	8003694 <I2C_Slave_ISR_DMA+0x72>
          I2C_ITListenCplt(hi2c, ITFlags);
 80036ac:	4620      	mov	r0, r4
 80036ae:	f7ff fca1 	bl	8002ff4 <I2C_ITListenCplt>
 80036b2:	e01c      	b.n	80036ee <I2C_Slave_ISR_DMA+0xcc>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80036b4:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 80036b8:	d0f1      	beq.n	800369e <I2C_Slave_ISR_DMA+0x7c>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036ba:	6823      	ldr	r3, [r4, #0]
 80036bc:	2210      	movs	r2, #16
 80036be:	61da      	str	r2, [r3, #28]
          I2C_Flush_TXDR(hi2c);
 80036c0:	4620      	mov	r0, r4
 80036c2:	f7fe fda5 	bl	8002210 <I2C_Flush_TXDR>
          I2C_ITSlaveSequentialCplt(hi2c);
 80036c6:	4620      	mov	r0, r4
 80036c8:	f7ff fc16 	bl	8002ef8 <I2C_ITSlaveSequentialCplt>
 80036cc:	e00f      	b.n	80036ee <I2C_Slave_ISR_DMA+0xcc>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036ce:	6803      	ldr	r3, [r0, #0]
 80036d0:	2210      	movs	r2, #16
 80036d2:	61da      	str	r2, [r3, #28]
 80036d4:	e00b      	b.n	80036ee <I2C_Slave_ISR_DMA+0xcc>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80036d6:	f011 0f08 	tst.w	r1, #8
 80036da:	d002      	beq.n	80036e2 <I2C_Slave_ISR_DMA+0xc0>
 80036dc:	f012 0f08 	tst.w	r2, #8
 80036e0:	d109      	bne.n	80036f6 <I2C_Slave_ISR_DMA+0xd4>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80036e2:	f011 0f20 	tst.w	r1, #32
 80036e6:	d002      	beq.n	80036ee <I2C_Slave_ISR_DMA+0xcc>
 80036e8:	f012 0f20 	tst.w	r2, #32
 80036ec:	d107      	bne.n	80036fe <I2C_Slave_ISR_DMA+0xdc>
  __HAL_UNLOCK(hi2c);
 80036ee:	2000      	movs	r0, #0
 80036f0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return HAL_OK;
 80036f4:	bd38      	pop	{r3, r4, r5, pc}
    I2C_ITAddrCplt(hi2c, ITFlags);
 80036f6:	4620      	mov	r0, r4
 80036f8:	f7ff fc2d 	bl	8002f56 <I2C_ITAddrCplt>
 80036fc:	e7f7      	b.n	80036ee <I2C_Slave_ISR_DMA+0xcc>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80036fe:	4620      	mov	r0, r4
 8003700:	f7ff fd2a 	bl	8003158 <I2C_ITSlaveCplt>
 8003704:	e7f3      	b.n	80036ee <I2C_Slave_ISR_DMA+0xcc>
  __HAL_LOCK(hi2c);
 8003706:	2002      	movs	r0, #2
}
 8003708:	bd38      	pop	{r3, r4, r5, pc}

0800370a <I2C_Master_ISR_DMA>:
  __HAL_LOCK(hi2c);
 800370a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800370e:	2b01      	cmp	r3, #1
 8003710:	f000 809b 	beq.w	800384a <I2C_Master_ISR_DMA+0x140>
{
 8003714:	b510      	push	{r4, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 800371a:	2301      	movs	r3, #1
 800371c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003720:	f011 0f10 	tst.w	r1, #16
 8003724:	d002      	beq.n	800372c <I2C_Master_ISR_DMA+0x22>
 8003726:	f012 0f10 	tst.w	r2, #16
 800372a:	d132      	bne.n	8003792 <I2C_Master_ISR_DMA+0x88>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800372c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003730:	d05c      	beq.n	80037ec <I2C_Master_ISR_DMA+0xe2>
 8003732:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003736:	d059      	beq.n	80037ec <I2C_Master_ISR_DMA+0xe2>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003738:	6822      	ldr	r2, [r4, #0]
 800373a:	6813      	ldr	r3, [r2, #0]
 800373c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003740:	6013      	str	r3, [r2, #0]
    if (hi2c->XferCount != 0U)
 8003742:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003744:	b29b      	uxth	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d042      	beq.n	80037d0 <I2C_Master_ISR_DMA+0xc6>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800374a:	6823      	ldr	r3, [r4, #0]
 800374c:	6859      	ldr	r1, [r3, #4]
 800374e:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003752:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003754:	b29b      	uxth	r3, r3
 8003756:	2bff      	cmp	r3, #255	; 0xff
 8003758:	d929      	bls.n	80037ae <I2C_Master_ISR_DMA+0xa4>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800375a:	23ff      	movs	r3, #255	; 0xff
 800375c:	8523      	strh	r3, [r4, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800375e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003762:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8003766:	2000      	movs	r0, #0
 8003768:	9000      	str	r0, [sp, #0]
 800376a:	4620      	mov	r0, r4
 800376c:	f7fe fd61 	bl	8002232 <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 8003770:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003772:	b29b      	uxth	r3, r3
 8003774:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003776:	1a9b      	subs	r3, r3, r2
 8003778:	b29b      	uxth	r3, r3
 800377a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800377c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b22      	cmp	r3, #34	; 0x22
 8003784:	d01e      	beq.n	80037c4 <I2C_Master_ISR_DMA+0xba>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003786:	6822      	ldr	r2, [r4, #0]
 8003788:	6813      	ldr	r3, [r2, #0]
 800378a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800378e:	6013      	str	r3, [r2, #0]
 8003790:	e052      	b.n	8003838 <I2C_Master_ISR_DMA+0x12e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003792:	6803      	ldr	r3, [r0, #0]
 8003794:	2210      	movs	r2, #16
 8003796:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003798:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800379a:	f043 0304 	orr.w	r3, r3, #4
 800379e:	6443      	str	r3, [r0, #68]	; 0x44
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80037a0:	2112      	movs	r1, #18
 80037a2:	f7fe fd61 	bl	8002268 <I2C_Enable_IRQ>
    I2C_Flush_TXDR(hi2c);
 80037a6:	4620      	mov	r0, r4
 80037a8:	f7fe fd32 	bl	8002210 <I2C_Flush_TXDR>
 80037ac:	e044      	b.n	8003838 <I2C_Master_ISR_DMA+0x12e>
        hi2c->XferSize = hi2c->XferCount;
 80037ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80037b0:	8523      	strh	r3, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80037b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80037b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037b8:	d001      	beq.n	80037be <I2C_Master_ISR_DMA+0xb4>
          xfermode = hi2c->XferOptions;
 80037ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80037bc:	e7d1      	b.n	8003762 <I2C_Master_ISR_DMA+0x58>
          xfermode = I2C_AUTOEND_MODE;
 80037be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037c2:	e7ce      	b.n	8003762 <I2C_Master_ISR_DMA+0x58>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80037c4:	6822      	ldr	r2, [r4, #0]
 80037c6:	6813      	ldr	r3, [r2, #0]
 80037c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	e033      	b.n	8003838 <I2C_Master_ISR_DMA+0x12e>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80037d0:	6823      	ldr	r3, [r4, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80037d8:	d103      	bne.n	80037e2 <I2C_Master_ISR_DMA+0xd8>
        I2C_ITMasterSequentialCplt(hi2c);
 80037da:	4620      	mov	r0, r4
 80037dc:	f7ff fb60 	bl	8002ea0 <I2C_ITMasterSequentialCplt>
 80037e0:	e02a      	b.n	8003838 <I2C_Master_ISR_DMA+0x12e>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80037e2:	2140      	movs	r1, #64	; 0x40
 80037e4:	4620      	mov	r0, r4
 80037e6:	f7ff fc3d 	bl	8003064 <I2C_ITError>
 80037ea:	e025      	b.n	8003838 <I2C_Master_ISR_DMA+0x12e>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80037ec:	f011 0f40 	tst.w	r1, #64	; 0x40
 80037f0:	d01c      	beq.n	800382c <I2C_Master_ISR_DMA+0x122>
 80037f2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80037f6:	d019      	beq.n	800382c <I2C_Master_ISR_DMA+0x122>
    if (hi2c->XferCount == 0U)
 80037f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	b98b      	cbnz	r3, 8003822 <I2C_Master_ISR_DMA+0x118>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80037fe:	6823      	ldr	r3, [r4, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003806:	d117      	bne.n	8003838 <I2C_Master_ISR_DMA+0x12e>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003808:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800380a:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800380e:	d003      	beq.n	8003818 <I2C_Master_ISR_DMA+0x10e>
          I2C_ITMasterSequentialCplt(hi2c);
 8003810:	4620      	mov	r0, r4
 8003812:	f7ff fb45 	bl	8002ea0 <I2C_ITMasterSequentialCplt>
 8003816:	e00f      	b.n	8003838 <I2C_Master_ISR_DMA+0x12e>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800381e:	605a      	str	r2, [r3, #4]
 8003820:	e00a      	b.n	8003838 <I2C_Master_ISR_DMA+0x12e>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003822:	2140      	movs	r1, #64	; 0x40
 8003824:	4620      	mov	r0, r4
 8003826:	f7ff fc1d 	bl	8003064 <I2C_ITError>
 800382a:	e005      	b.n	8003838 <I2C_Master_ISR_DMA+0x12e>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800382c:	f011 0f20 	tst.w	r1, #32
 8003830:	d002      	beq.n	8003838 <I2C_Master_ISR_DMA+0x12e>
 8003832:	f012 0f20 	tst.w	r2, #32
 8003836:	d104      	bne.n	8003842 <I2C_Master_ISR_DMA+0x138>
  __HAL_UNLOCK(hi2c);
 8003838:	2000      	movs	r0, #0
 800383a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 800383e:	b002      	add	sp, #8
 8003840:	bd10      	pop	{r4, pc}
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003842:	4620      	mov	r0, r4
 8003844:	f7ff fdbd 	bl	80033c2 <I2C_ITMasterCplt>
 8003848:	e7f6      	b.n	8003838 <I2C_Master_ISR_DMA+0x12e>
  __HAL_LOCK(hi2c);
 800384a:	2002      	movs	r0, #2
 800384c:	4770      	bx	lr

0800384e <I2C_DMAAbort>:
{
 800384e:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003850:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hi2c->hdmatx->XferAbortCallback = NULL;
 8003852:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003854:	2300      	movs	r3, #0
 8003856:	6393      	str	r3, [r2, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8003858:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800385a:	6393      	str	r3, [r2, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800385c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b60      	cmp	r3, #96	; 0x60
 8003864:	d002      	beq.n	800386c <I2C_DMAAbort+0x1e>
    HAL_I2C_ErrorCallback(hi2c);
 8003866:	f7ff fbfb 	bl	8003060 <HAL_I2C_ErrorCallback>
 800386a:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800386c:	2320      	movs	r3, #32
 800386e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8003872:	f7ff fbf6 	bl	8003062 <HAL_I2C_AbortCpltCallback>
 8003876:	bd08      	pop	{r3, pc}

08003878 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003878:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b20      	cmp	r3, #32
 8003880:	d001      	beq.n	8003886 <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003882:	2002      	movs	r0, #2
 8003884:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8003886:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800388a:	2b01      	cmp	r3, #1
 800388c:	d020      	beq.n	80038d0 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800388e:	2301      	movs	r3, #1
 8003890:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003894:	2324      	movs	r3, #36	; 0x24
 8003896:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800389a:	6802      	ldr	r2, [r0, #0]
 800389c:	6813      	ldr	r3, [r2, #0]
 800389e:	f023 0301 	bic.w	r3, r3, #1
 80038a2:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038a4:	6802      	ldr	r2, [r0, #0]
 80038a6:	6813      	ldr	r3, [r2, #0]
 80038a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038ac:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80038ae:	6802      	ldr	r2, [r0, #0]
 80038b0:	6813      	ldr	r3, [r2, #0]
 80038b2:	4319      	orrs	r1, r3
 80038b4:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80038b6:	6802      	ldr	r2, [r0, #0]
 80038b8:	6813      	ldr	r3, [r2, #0]
 80038ba:	f043 0301 	orr.w	r3, r3, #1
 80038be:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80038c0:	2320      	movs	r3, #32
 80038c2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80038c6:	2300      	movs	r3, #0
 80038c8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 80038cc:	4618      	mov	r0, r3
 80038ce:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80038d0:	2002      	movs	r0, #2
  }
}
 80038d2:	4770      	bx	lr

080038d4 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038d4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b20      	cmp	r3, #32
 80038dc:	d001      	beq.n	80038e2 <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80038de:	2002      	movs	r0, #2
 80038e0:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80038e2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d01e      	beq.n	8003928 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80038ea:	2301      	movs	r3, #1
 80038ec:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 80038f0:	2324      	movs	r3, #36	; 0x24
 80038f2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 80038f6:	6802      	ldr	r2, [r0, #0]
 80038f8:	6813      	ldr	r3, [r2, #0]
 80038fa:	f023 0301 	bic.w	r3, r3, #1
 80038fe:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8003900:	6802      	ldr	r2, [r0, #0]
 8003902:	6813      	ldr	r3, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8003904:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8003908:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 800390c:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800390e:	6802      	ldr	r2, [r0, #0]
 8003910:	6813      	ldr	r3, [r2, #0]
 8003912:	f043 0301 	orr.w	r3, r3, #1
 8003916:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003918:	2320      	movs	r3, #32
 800391a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800391e:	2300      	movs	r3, #0
 8003920:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 8003924:	4618      	mov	r0, r3
 8003926:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8003928:	2002      	movs	r0, #2
  }
}
 800392a:	4770      	bx	lr

0800392c <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800392c:	4a02      	ldr	r2, [pc, #8]	; (8003938 <HAL_PWR_EnableBkUpAccess+0xc>)
 800392e:	6813      	ldr	r3, [r2, #0]
 8003930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	4770      	bx	lr
 8003938:	40007000 	.word	0x40007000

0800393c <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800393c:	4b0a      	ldr	r3, [pc, #40]	; (8003968 <HAL_PWREx_GetVoltageRange+0x2c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003948:	d008      	beq.n	800395c <HAL_PWREx_GetVoltageRange+0x20>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800394a:	4b07      	ldr	r3, [pc, #28]	; (8003968 <HAL_PWREx_GetVoltageRange+0x2c>)
 800394c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003950:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003954:	d005      	beq.n	8003962 <HAL_PWREx_GetVoltageRange+0x26>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003956:	f44f 7000 	mov.w	r0, #512	; 0x200
 800395a:	4770      	bx	lr
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800395c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003960:	4770      	bx	lr
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003962:	2000      	movs	r0, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	40007000 	.word	0x40007000

0800396c <HAL_PWREx_ControlVoltageScaling>:
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800396c:	2800      	cmp	r0, #0
 800396e:	d136      	bne.n	80039de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003970:	4b3e      	ldr	r3, [pc, #248]	; (8003a6c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800397c:	d008      	beq.n	8003990 <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800397e:	4a3b      	ldr	r2, [pc, #236]	; (8003a6c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8003980:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8003984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003988:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800398c:	2000      	movs	r0, #0
 800398e:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003990:	4a36      	ldr	r2, [pc, #216]	; (8003a6c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8003992:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8003996:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800399a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800399e:	6813      	ldr	r3, [r2, #0]
 80039a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039a8:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80039aa:	4b31      	ldr	r3, [pc, #196]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0x104>)
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	2332      	movs	r3, #50	; 0x32
 80039b0:	fb03 f302 	mul.w	r3, r3, r2
 80039b4:	4a2f      	ldr	r2, [pc, #188]	; (8003a74 <HAL_PWREx_ControlVoltageScaling+0x108>)
 80039b6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ba:	0c9b      	lsrs	r3, r3, #18
 80039bc:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039be:	e000      	b.n	80039c2 <HAL_PWREx_ControlVoltageScaling+0x56>
        wait_loop_index--;
 80039c0:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039c2:	4a2a      	ldr	r2, [pc, #168]	; (8003a6c <HAL_PWREx_ControlVoltageScaling+0x100>)
 80039c4:	6952      	ldr	r2, [r2, #20]
 80039c6:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80039ca:	d001      	beq.n	80039d0 <HAL_PWREx_ControlVoltageScaling+0x64>
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1f7      	bne.n	80039c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039d0:	4b26      	ldr	r3, [pc, #152]	; (8003a6c <HAL_PWREx_ControlVoltageScaling+0x100>)
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80039d8:	d044      	beq.n	8003a64 <HAL_PWREx_ControlVoltageScaling+0xf8>
        return HAL_TIMEOUT;
 80039da:	2003      	movs	r0, #3
 80039dc:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039de:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80039e2:	d008      	beq.n	80039f6 <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80039e4:	4a21      	ldr	r2, [pc, #132]	; (8003a6c <HAL_PWREx_ControlVoltageScaling+0x100>)
 80039e6:	6813      	ldr	r3, [r2, #0]
 80039e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039f0:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80039f2:	2000      	movs	r0, #0
 80039f4:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80039f6:	4b1d      	ldr	r3, [pc, #116]	; (8003a6c <HAL_PWREx_ControlVoltageScaling+0x100>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a02:	d008      	beq.n	8003a16 <HAL_PWREx_ControlVoltageScaling+0xaa>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a04:	4a19      	ldr	r2, [pc, #100]	; (8003a6c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8003a06:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8003a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a0e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 8003a12:	2000      	movs	r0, #0
 8003a14:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a16:	4a15      	ldr	r2, [pc, #84]	; (8003a6c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8003a18:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8003a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a24:	6813      	ldr	r3, [r2, #0]
 8003a26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a2e:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003a30:	4b0f      	ldr	r3, [pc, #60]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	2332      	movs	r3, #50	; 0x32
 8003a36:	fb03 f302 	mul.w	r3, r3, r2
 8003a3a:	4a0e      	ldr	r2, [pc, #56]	; (8003a74 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8003a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a40:	0c9b      	lsrs	r3, r3, #18
 8003a42:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a44:	e000      	b.n	8003a48 <HAL_PWREx_ControlVoltageScaling+0xdc>
        wait_loop_index--;
 8003a46:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a48:	4a08      	ldr	r2, [pc, #32]	; (8003a6c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8003a4a:	6952      	ldr	r2, [r2, #20]
 8003a4c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003a50:	d001      	beq.n	8003a56 <HAL_PWREx_ControlVoltageScaling+0xea>
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f7      	bne.n	8003a46 <HAL_PWREx_ControlVoltageScaling+0xda>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a56:	4b05      	ldr	r3, [pc, #20]	; (8003a6c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003a5e:	d003      	beq.n	8003a68 <HAL_PWREx_ControlVoltageScaling+0xfc>
        return HAL_TIMEOUT;
 8003a60:	2003      	movs	r0, #3
 8003a62:	4770      	bx	lr
  return HAL_OK;
 8003a64:	2000      	movs	r0, #0
 8003a66:	4770      	bx	lr
 8003a68:	2000      	movs	r0, #0
}
 8003a6a:	4770      	bx	lr
 8003a6c:	40007000 	.word	0x40007000
 8003a70:	20000048 	.word	0x20000048
 8003a74:	431bde83 	.word	0x431bde83

08003a78 <RCC_GetSysClockFreqFromPLLSource>:
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
  uint32_t msirange = 0U;
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003a78:	4b25      	ldr	r3, [pc, #148]	; (8003b10 <RCC_GetSysClockFreqFromPLLSource+0x98>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f003 0303 	and.w	r3, r3, #3
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d015      	beq.n	8003ab0 <RCC_GetSysClockFreqFromPLLSource+0x38>
  uint32_t msirange = 0U;
 8003a84:	2100      	movs	r1, #0
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a86:	4a22      	ldr	r2, [pc, #136]	; (8003b10 <RCC_GetSysClockFreqFromPLLSource+0x98>)
 8003a88:	68d3      	ldr	r3, [r2, #12]
 8003a8a:	f003 0303 	and.w	r3, r3, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a8e:	68d0      	ldr	r0, [r2, #12]
 8003a90:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8003a94:	3001      	adds	r0, #1

  switch (pllsource)
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d01d      	beq.n	8003ad6 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003a9a:	2b03      	cmp	r3, #3
 8003a9c:	d02d      	beq.n	8003afa <RCC_GetSysClockFreqFromPLLSource+0x82>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a9e:	fbb1 f1f0 	udiv	r1, r1, r0
 8003aa2:	4b1b      	ldr	r3, [pc, #108]	; (8003b10 <RCC_GetSysClockFreqFromPLLSource+0x98>)
 8003aa4:	68d8      	ldr	r0, [r3, #12]
 8003aa6:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8003aaa:	fb00 f001 	mul.w	r0, r0, r1
    break;
 8003aae:	e01b      	b.n	8003ae8 <RCC_GetSysClockFreqFromPLLSource+0x70>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ab0:	4b17      	ldr	r3, [pc, #92]	; (8003b10 <RCC_GetSysClockFreqFromPLLSource+0x98>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f013 0f08 	tst.w	r3, #8
 8003ab8:	d108      	bne.n	8003acc <RCC_GetSysClockFreqFromPLLSource+0x54>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003aba:	4b15      	ldr	r3, [pc, #84]	; (8003b10 <RCC_GetSysClockFreqFromPLLSource+0x98>)
 8003abc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ac0:	f3c3 2303 	ubfx	r3, r3, #8, #4
    msirange = MSIRangeTable[msirange];
 8003ac4:	4a13      	ldr	r2, [pc, #76]	; (8003b14 <RCC_GetSysClockFreqFromPLLSource+0x9c>)
 8003ac6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003aca:	e7dc      	b.n	8003a86 <RCC_GetSysClockFreqFromPLLSource+0xe>
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003acc:	4b10      	ldr	r3, [pc, #64]	; (8003b10 <RCC_GetSysClockFreqFromPLLSource+0x98>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003ad4:	e7f6      	b.n	8003ac4 <RCC_GetSysClockFreqFromPLLSource+0x4c>
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ad6:	4b10      	ldr	r3, [pc, #64]	; (8003b18 <RCC_GetSysClockFreqFromPLLSource+0xa0>)
 8003ad8:	fbb3 f3f0 	udiv	r3, r3, r0
 8003adc:	4a0c      	ldr	r2, [pc, #48]	; (8003b10 <RCC_GetSysClockFreqFromPLLSource+0x98>)
 8003ade:	68d0      	ldr	r0, [r2, #12]
 8003ae0:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8003ae4:	fb00 f003 	mul.w	r0, r0, r3
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ae8:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <RCC_GetSysClockFreqFromPLLSource+0x98>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8003af0:	3301      	adds	r3, #1
 8003af2:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco/pllr;

  return sysclockfreq;
}
 8003af4:	fbb0 f0f3 	udiv	r0, r0, r3
 8003af8:	4770      	bx	lr
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003afa:	4b08      	ldr	r3, [pc, #32]	; (8003b1c <RCC_GetSysClockFreqFromPLLSource+0xa4>)
 8003afc:	fbb3 f3f0 	udiv	r3, r3, r0
 8003b00:	4a03      	ldr	r2, [pc, #12]	; (8003b10 <RCC_GetSysClockFreqFromPLLSource+0x98>)
 8003b02:	68d0      	ldr	r0, [r2, #12]
 8003b04:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8003b08:	fb00 f003 	mul.w	r0, r0, r3
    break;
 8003b0c:	e7ec      	b.n	8003ae8 <RCC_GetSysClockFreqFromPLLSource+0x70>
 8003b0e:	bf00      	nop
 8003b10:	40021000 	.word	0x40021000
 8003b14:	08012eac 	.word	0x08012eac
 8003b18:	00f42400 	.word	0x00f42400
 8003b1c:	007a1200 	.word	0x007a1200

08003b20 <RCC_SetFlashLatencyFromMSIRange>:
{
 8003b20:	b530      	push	{r4, r5, lr}
 8003b22:	b083      	sub	sp, #12
 8003b24:	4605      	mov	r5, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b26:	4b1f      	ldr	r3, [pc, #124]	; (8003ba4 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8003b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003b2e:	d00a      	beq.n	8003b46 <RCC_SetFlashLatencyFromMSIRange+0x26>
    vos = HAL_PWREx_GetVoltageRange();
 8003b30:	f7ff ff04 	bl	800393c <HAL_PWREx_GetVoltageRange>
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b34:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003b38:	d016      	beq.n	8003b68 <RCC_SetFlashLatencyFromMSIRange+0x48>
    if(msirange >= RCC_MSIRANGE_8)
 8003b3a:	2d7f      	cmp	r5, #127	; 0x7f
 8003b3c:	d81e      	bhi.n	8003b7c <RCC_SetFlashLatencyFromMSIRange+0x5c>
      if(msirange == RCC_MSIRANGE_7)
 8003b3e:	2d70      	cmp	r5, #112	; 0x70
 8003b40:	d02b      	beq.n	8003b9a <RCC_SetFlashLatencyFromMSIRange+0x7a>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b42:	2100      	movs	r1, #0
 8003b44:	e01b      	b.n	8003b7e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b46:	4c17      	ldr	r4, [pc, #92]	; (8003ba4 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8003b48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b4e:	65a3      	str	r3, [r4, #88]	; 0x58
 8003b50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b56:	9301      	str	r3, [sp, #4]
 8003b58:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8003b5a:	f7ff feef 	bl	800393c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b64:	65a3      	str	r3, [r4, #88]	; 0x58
 8003b66:	e7e5      	b.n	8003b34 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8003b68:	2d80      	cmp	r5, #128	; 0x80
 8003b6a:	d903      	bls.n	8003b74 <RCC_SetFlashLatencyFromMSIRange+0x54>
      if(msirange > RCC_MSIRANGE_10)
 8003b6c:	2da0      	cmp	r5, #160	; 0xa0
 8003b6e:	d903      	bls.n	8003b78 <RCC_SetFlashLatencyFromMSIRange+0x58>
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b70:	2102      	movs	r1, #2
 8003b72:	e004      	b.n	8003b7e <RCC_SetFlashLatencyFromMSIRange+0x5e>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b74:	2100      	movs	r1, #0
 8003b76:	e002      	b.n	8003b7e <RCC_SetFlashLatencyFromMSIRange+0x5e>
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b78:	2101      	movs	r1, #1
 8003b7a:	e000      	b.n	8003b7e <RCC_SetFlashLatencyFromMSIRange+0x5e>
      latency = FLASH_LATENCY_2; /* 2WS */
 8003b7c:	2102      	movs	r1, #2
  __HAL_FLASH_SET_LATENCY(latency);
 8003b7e:	4a0a      	ldr	r2, [pc, #40]	; (8003ba8 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8003b80:	6813      	ldr	r3, [r2, #0]
 8003b82:	f023 030f 	bic.w	r3, r3, #15
 8003b86:	430b      	orrs	r3, r1
 8003b88:	6013      	str	r3, [r2, #0]
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b8a:	6813      	ldr	r3, [r2, #0]
 8003b8c:	f003 030f 	and.w	r3, r3, #15
 8003b90:	4299      	cmp	r1, r3
 8003b92:	d004      	beq.n	8003b9e <RCC_SetFlashLatencyFromMSIRange+0x7e>
    return HAL_ERROR;
 8003b94:	2001      	movs	r0, #1
}
 8003b96:	b003      	add	sp, #12
 8003b98:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	e7ef      	b.n	8003b7e <RCC_SetFlashLatencyFromMSIRange+0x5e>
  return HAL_OK;
 8003b9e:	2000      	movs	r0, #0
 8003ba0:	e7f9      	b.n	8003b96 <RCC_SetFlashLatencyFromMSIRange+0x76>
 8003ba2:	bf00      	nop
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	40022000 	.word	0x40022000

08003bac <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bac:	4a31      	ldr	r2, [pc, #196]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003bae:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bb0:	68d2      	ldr	r2, [r2, #12]
 8003bb2:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003bb6:	f013 030c 	ands.w	r3, r3, #12
 8003bba:	d00a      	beq.n	8003bd2 <HAL_RCC_GetSysClockFreq+0x26>
 8003bbc:	2b0c      	cmp	r3, #12
 8003bbe:	d006      	beq.n	8003bce <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003bc0:	2b04      	cmp	r3, #4
 8003bc2:	d01f      	beq.n	8003c04 <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d020      	beq.n	8003c0a <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003bc8:	2000      	movs	r0, #0
 8003bca:	4601      	mov	r1, r0
 8003bcc:	e010      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003bce:	2a01      	cmp	r2, #1
 8003bd0:	d1f6      	bne.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003bd2:	4a28      	ldr	r2, [pc, #160]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003bd4:	6812      	ldr	r2, [r2, #0]
 8003bd6:	f012 0f08 	tst.w	r2, #8
 8003bda:	d10c      	bne.n	8003bf6 <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003bdc:	4a25      	ldr	r2, [pc, #148]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003bde:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8003be2:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8003be6:	4924      	ldr	r1, [pc, #144]	; (8003c78 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003be8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bec:	b143      	cbz	r3, 8003c00 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003bee:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003bf0:	2b0c      	cmp	r3, #12
 8003bf2:	d00d      	beq.n	8003c10 <HAL_RCC_GetSysClockFreq+0x64>
}
 8003bf4:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003bf6:	4a1f      	ldr	r2, [pc, #124]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003bf8:	6812      	ldr	r2, [r2, #0]
 8003bfa:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003bfe:	e7f2      	b.n	8003be6 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8003c00:	4608      	mov	r0, r1
 8003c02:	e7f5      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 8003c04:	481d      	ldr	r0, [pc, #116]	; (8003c7c <HAL_RCC_GetSysClockFreq+0xd0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c06:	2100      	movs	r1, #0
 8003c08:	e7f2      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8003c0a:	481d      	ldr	r0, [pc, #116]	; (8003c80 <HAL_RCC_GetSysClockFreq+0xd4>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	e7ef      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c10:	4b18      	ldr	r3, [pc, #96]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003c12:	68da      	ldr	r2, [r3, #12]
 8003c14:	f002 0203 	and.w	r2, r2, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003c1e:	3301      	adds	r3, #1
    switch (pllsource)
 8003c20:	2a02      	cmp	r2, #2
 8003c22:	d00a      	beq.n	8003c3a <HAL_RCC_GetSysClockFreq+0x8e>
 8003c24:	2a03      	cmp	r2, #3
 8003c26:	d01a      	beq.n	8003c5e <HAL_RCC_GetSysClockFreq+0xb2>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c28:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c2c:	4a11      	ldr	r2, [pc, #68]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003c2e:	68d0      	ldr	r0, [r2, #12]
 8003c30:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8003c34:	fb00 f003 	mul.w	r0, r0, r3
      break;
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0xa0>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c3a:	4810      	ldr	r0, [pc, #64]	; (8003c7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003c3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c40:	4a0c      	ldr	r2, [pc, #48]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003c42:	68d0      	ldr	r0, [r2, #12]
 8003c44:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8003c48:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c4c:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8003c54:	3301      	adds	r3, #1
 8003c56:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8003c58:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8003c5c:	e7ca      	b.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x48>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c5e:	4808      	ldr	r0, [pc, #32]	; (8003c80 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003c60:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c64:	4a03      	ldr	r2, [pc, #12]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003c66:	68d0      	ldr	r0, [r2, #12]
 8003c68:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8003c6c:	fb00 f003 	mul.w	r0, r0, r3
      break;
 8003c70:	e7ec      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0xa0>
 8003c72:	bf00      	nop
 8003c74:	40021000 	.word	0x40021000
 8003c78:	08012eac 	.word	0x08012eac
 8003c7c:	00f42400 	.word	0x00f42400
 8003c80:	007a1200 	.word	0x007a1200

08003c84 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8003c84:	2800      	cmp	r0, #0
 8003c86:	f000 82c0 	beq.w	800420a <HAL_RCC_OscConfig+0x586>
{
 8003c8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c90:	4bab      	ldr	r3, [pc, #684]	; (8003f40 <HAL_RCC_OscConfig+0x2bc>)
 8003c92:	689d      	ldr	r5, [r3, #8]
 8003c94:	f005 050c 	and.w	r5, r5, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c98:	68de      	ldr	r6, [r3, #12]
 8003c9a:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c9e:	6803      	ldr	r3, [r0, #0]
 8003ca0:	f013 0f10 	tst.w	r3, #16
 8003ca4:	d07d      	beq.n	8003da2 <HAL_RCC_OscConfig+0x11e>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ca6:	b1e5      	cbz	r5, 8003ce2 <HAL_RCC_OscConfig+0x5e>
 8003ca8:	2d0c      	cmp	r5, #12
 8003caa:	d018      	beq.n	8003cde <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003cac:	69a3      	ldr	r3, [r4, #24]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 80b4 	beq.w	8003e1c <HAL_RCC_OscConfig+0x198>
        __HAL_RCC_MSI_ENABLE();
 8003cb4:	4aa2      	ldr	r2, [pc, #648]	; (8003f40 <HAL_RCC_OscConfig+0x2bc>)
 8003cb6:	6813      	ldr	r3, [r2, #0]
 8003cb8:	f043 0301 	orr.w	r3, r3, #1
 8003cbc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003cbe:	f7fd f93f 	bl	8000f40 <HAL_GetTick>
 8003cc2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cc4:	4b9e      	ldr	r3, [pc, #632]	; (8003f40 <HAL_RCC_OscConfig+0x2bc>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f013 0f02 	tst.w	r3, #2
 8003ccc:	f040 8093 	bne.w	8003df6 <HAL_RCC_OscConfig+0x172>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cd0:	f7fd f936 	bl	8000f40 <HAL_GetTick>
 8003cd4:	1bc0      	subs	r0, r0, r7
 8003cd6:	2802      	cmp	r0, #2
 8003cd8:	d9f4      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e2a3      	b.n	8004226 <HAL_RCC_OscConfig+0x5a2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003cde:	2e01      	cmp	r6, #1
 8003ce0:	d1e4      	bne.n	8003cac <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ce2:	4b97      	ldr	r3, [pc, #604]	; (8003f40 <HAL_RCC_OscConfig+0x2bc>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f013 0f02 	tst.w	r3, #2
 8003cea:	d003      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x70>
 8003cec:	69a3      	ldr	r3, [r4, #24]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f000 828e 	beq.w	8004210 <HAL_RCC_OscConfig+0x58c>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003cf4:	6a20      	ldr	r0, [r4, #32]
 8003cf6:	4b92      	ldr	r3, [pc, #584]	; (8003f40 <HAL_RCC_OscConfig+0x2bc>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f013 0f08 	tst.w	r3, #8
 8003cfe:	d01d      	beq.n	8003d3c <HAL_RCC_OscConfig+0xb8>
 8003d00:	4b8f      	ldr	r3, [pc, #572]	; (8003f40 <HAL_RCC_OscConfig+0x2bc>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d08:	4283      	cmp	r3, r0
 8003d0a:	d21e      	bcs.n	8003d4a <HAL_RCC_OscConfig+0xc6>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d0c:	f7ff ff08 	bl	8003b20 <RCC_SetFlashLatencyFromMSIRange>
 8003d10:	2800      	cmp	r0, #0
 8003d12:	f040 827f 	bne.w	8004214 <HAL_RCC_OscConfig+0x590>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d16:	4b8a      	ldr	r3, [pc, #552]	; (8003f40 <HAL_RCC_OscConfig+0x2bc>)
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	f042 0208 	orr.w	r2, r2, #8
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003d26:	6a21      	ldr	r1, [r4, #32]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003d32:	69e1      	ldr	r1, [r4, #28]
 8003d34:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003d38:	605a      	str	r2, [r3, #4]
 8003d3a:	e01e      	b.n	8003d7a <HAL_RCC_OscConfig+0xf6>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d3c:	4b80      	ldr	r3, [pc, #512]	; (8003f40 <HAL_RCC_OscConfig+0x2bc>)
 8003d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d42:	091b      	lsrs	r3, r3, #4
 8003d44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d48:	e7de      	b.n	8003d08 <HAL_RCC_OscConfig+0x84>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d4a:	4b7d      	ldr	r3, [pc, #500]	; (8003f40 <HAL_RCC_OscConfig+0x2bc>)
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	f042 0208 	orr.w	r2, r2, #8
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003d5a:	6a21      	ldr	r1, [r4, #32]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d60:	685a      	ldr	r2, [r3, #4]
 8003d62:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003d66:	69e1      	ldr	r1, [r4, #28]
 8003d68:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003d6c:	605a      	str	r2, [r3, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d6e:	6a20      	ldr	r0, [r4, #32]
 8003d70:	f7ff fed6 	bl	8003b20 <RCC_SetFlashLatencyFromMSIRange>
 8003d74:	2800      	cmp	r0, #0
 8003d76:	f040 824f 	bne.w	8004218 <HAL_RCC_OscConfig+0x594>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d7a:	f7ff ff17 	bl	8003bac <HAL_RCC_GetSysClockFreq>
 8003d7e:	4b70      	ldr	r3, [pc, #448]	; (8003f40 <HAL_RCC_OscConfig+0x2bc>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003d86:	4a6f      	ldr	r2, [pc, #444]	; (8003f44 <HAL_RCC_OscConfig+0x2c0>)
 8003d88:	5cd3      	ldrb	r3, [r2, r3]
 8003d8a:	f003 031f 	and.w	r3, r3, #31
 8003d8e:	40d8      	lsrs	r0, r3
 8003d90:	4b6d      	ldr	r3, [pc, #436]	; (8003f48 <HAL_RCC_OscConfig+0x2c4>)
 8003d92:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8003d94:	2000      	movs	r0, #0
 8003d96:	f00b fbe1 	bl	800f55c <HAL_InitTick>
        if(status != HAL_OK)
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2800      	cmp	r0, #0
 8003d9e:	f040 8242 	bne.w	8004226 <HAL_RCC_OscConfig+0x5a2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003da2:	6823      	ldr	r3, [r4, #0]
 8003da4:	f013 0f01 	tst.w	r3, #1
 8003da8:	d057      	beq.n	8003e5a <HAL_RCC_OscConfig+0x1d6>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003daa:	2d08      	cmp	r5, #8
 8003dac:	d04c      	beq.n	8003e48 <HAL_RCC_OscConfig+0x1c4>
 8003dae:	2d0c      	cmp	r5, #12
 8003db0:	d048      	beq.n	8003e44 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003db2:	6863      	ldr	r3, [r4, #4]
 8003db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db8:	d06e      	beq.n	8003e98 <HAL_RCC_OscConfig+0x214>
 8003dba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dbe:	d071      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x220>
 8003dc0:	4b5f      	ldr	r3, [pc, #380]	; (8003f40 <HAL_RCC_OscConfig+0x2bc>)
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003dd0:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dd2:	6863      	ldr	r3, [r4, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d072      	beq.n	8003ebe <HAL_RCC_OscConfig+0x23a>
        tickstart = HAL_GetTick();
 8003dd8:	f7fd f8b2 	bl	8000f40 <HAL_GetTick>
 8003ddc:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dde:	4b58      	ldr	r3, [pc, #352]	; (8003f40 <HAL_RCC_OscConfig+0x2bc>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003de6:	d138      	bne.n	8003e5a <HAL_RCC_OscConfig+0x1d6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003de8:	f7fd f8aa 	bl	8000f40 <HAL_GetTick>
 8003dec:	1bc0      	subs	r0, r0, r7
 8003dee:	2864      	cmp	r0, #100	; 0x64
 8003df0:	d9f5      	bls.n	8003dde <HAL_RCC_OscConfig+0x15a>
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e217      	b.n	8004226 <HAL_RCC_OscConfig+0x5a2>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003df6:	4b52      	ldr	r3, [pc, #328]	; (8003f40 <HAL_RCC_OscConfig+0x2bc>)
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	f042 0208 	orr.w	r2, r2, #8
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003e06:	6a21      	ldr	r1, [r4, #32]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003e12:	69e1      	ldr	r1, [r4, #28]
 8003e14:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003e18:	605a      	str	r2, [r3, #4]
 8003e1a:	e7c2      	b.n	8003da2 <HAL_RCC_OscConfig+0x11e>
        __HAL_RCC_MSI_DISABLE();
 8003e1c:	4a48      	ldr	r2, [pc, #288]	; (8003f40 <HAL_RCC_OscConfig+0x2bc>)
 8003e1e:	6813      	ldr	r3, [r2, #0]
 8003e20:	f023 0301 	bic.w	r3, r3, #1
 8003e24:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003e26:	f7fd f88b 	bl	8000f40 <HAL_GetTick>
 8003e2a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e2c:	4b44      	ldr	r3, [pc, #272]	; (8003f40 <HAL_RCC_OscConfig+0x2bc>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f013 0f02 	tst.w	r3, #2
 8003e34:	d0b5      	beq.n	8003da2 <HAL_RCC_OscConfig+0x11e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e36:	f7fd f883 	bl	8000f40 <HAL_GetTick>
 8003e3a:	1bc0      	subs	r0, r0, r7
 8003e3c:	2802      	cmp	r0, #2
 8003e3e:	d9f5      	bls.n	8003e2c <HAL_RCC_OscConfig+0x1a8>
            return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e1f0      	b.n	8004226 <HAL_RCC_OscConfig+0x5a2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8003e44:	2e03      	cmp	r6, #3
 8003e46:	d1b4      	bne.n	8003db2 <HAL_RCC_OscConfig+0x12e>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e48:	4b3d      	ldr	r3, [pc, #244]	; (8003f40 <HAL_RCC_OscConfig+0x2bc>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003e50:	d003      	beq.n	8003e5a <HAL_RCC_OscConfig+0x1d6>
 8003e52:	6863      	ldr	r3, [r4, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 81e1 	beq.w	800421c <HAL_RCC_OscConfig+0x598>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	f013 0f02 	tst.w	r3, #2
 8003e60:	d04f      	beq.n	8003f02 <HAL_RCC_OscConfig+0x27e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003e62:	2d04      	cmp	r5, #4
 8003e64:	d03c      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x25c>
 8003e66:	2d0c      	cmp	r5, #12
 8003e68:	d038      	beq.n	8003edc <HAL_RCC_OscConfig+0x258>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e6a:	68e3      	ldr	r3, [r4, #12]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d076      	beq.n	8003f5e <HAL_RCC_OscConfig+0x2da>
        __HAL_RCC_HSI_ENABLE();
 8003e70:	4a33      	ldr	r2, [pc, #204]	; (8003f40 <HAL_RCC_OscConfig+0x2bc>)
 8003e72:	6813      	ldr	r3, [r2, #0]
 8003e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e78:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003e7a:	f7fd f861 	bl	8000f40 <HAL_GetTick>
 8003e7e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e80:	4b2f      	ldr	r3, [pc, #188]	; (8003f40 <HAL_RCC_OscConfig+0x2bc>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003e88:	d160      	bne.n	8003f4c <HAL_RCC_OscConfig+0x2c8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e8a:	f7fd f859 	bl	8000f40 <HAL_GetTick>
 8003e8e:	1b80      	subs	r0, r0, r6
 8003e90:	2802      	cmp	r0, #2
 8003e92:	d9f5      	bls.n	8003e80 <HAL_RCC_OscConfig+0x1fc>
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e1c6      	b.n	8004226 <HAL_RCC_OscConfig+0x5a2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e98:	4a29      	ldr	r2, [pc, #164]	; (8003f40 <HAL_RCC_OscConfig+0x2bc>)
 8003e9a:	6813      	ldr	r3, [r2, #0]
 8003e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	e796      	b.n	8003dd2 <HAL_RCC_OscConfig+0x14e>
 8003ea4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ea8:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	e789      	b.n	8003dd2 <HAL_RCC_OscConfig+0x14e>
        tickstart = HAL_GetTick();
 8003ebe:	f7fd f83f 	bl	8000f40 <HAL_GetTick>
 8003ec2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ec4:	4b1e      	ldr	r3, [pc, #120]	; (8003f40 <HAL_RCC_OscConfig+0x2bc>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003ecc:	d0c5      	beq.n	8003e5a <HAL_RCC_OscConfig+0x1d6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ece:	f7fd f837 	bl	8000f40 <HAL_GetTick>
 8003ed2:	1bc0      	subs	r0, r0, r7
 8003ed4:	2864      	cmp	r0, #100	; 0x64
 8003ed6:	d9f5      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x240>
            return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e1a4      	b.n	8004226 <HAL_RCC_OscConfig+0x5a2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8003edc:	2e02      	cmp	r6, #2
 8003ede:	d1c4      	bne.n	8003e6a <HAL_RCC_OscConfig+0x1e6>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ee0:	4b17      	ldr	r3, [pc, #92]	; (8003f40 <HAL_RCC_OscConfig+0x2bc>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003ee8:	d003      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x26e>
 8003eea:	68e3      	ldr	r3, [r4, #12]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 8197 	beq.w	8004220 <HAL_RCC_OscConfig+0x59c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef2:	4a13      	ldr	r2, [pc, #76]	; (8003f40 <HAL_RCC_OscConfig+0x2bc>)
 8003ef4:	6853      	ldr	r3, [r2, #4]
 8003ef6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003efa:	6921      	ldr	r1, [r4, #16]
 8003efc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003f00:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f02:	6823      	ldr	r3, [r4, #0]
 8003f04:	f013 0f08 	tst.w	r3, #8
 8003f08:	d054      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x330>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f0a:	6963      	ldr	r3, [r4, #20]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d03a      	beq.n	8003f86 <HAL_RCC_OscConfig+0x302>
      __HAL_RCC_LSI_ENABLE();
 8003f10:	4a0b      	ldr	r2, [pc, #44]	; (8003f40 <HAL_RCC_OscConfig+0x2bc>)
 8003f12:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003f16:	f043 0301 	orr.w	r3, r3, #1
 8003f1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003f1e:	f7fd f80f 	bl	8000f40 <HAL_GetTick>
 8003f22:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f24:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <HAL_RCC_OscConfig+0x2bc>)
 8003f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f2a:	f013 0f02 	tst.w	r3, #2
 8003f2e:	d141      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x330>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f30:	f7fd f806 	bl	8000f40 <HAL_GetTick>
 8003f34:	1b80      	subs	r0, r0, r6
 8003f36:	2802      	cmp	r0, #2
 8003f38:	d9f4      	bls.n	8003f24 <HAL_RCC_OscConfig+0x2a0>
          return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e173      	b.n	8004226 <HAL_RCC_OscConfig+0x5a2>
 8003f3e:	bf00      	nop
 8003f40:	40021000 	.word	0x40021000
 8003f44:	08012e94 	.word	0x08012e94
 8003f48:	20000048 	.word	0x20000048
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f4c:	4ab7      	ldr	r2, [pc, #732]	; (800422c <HAL_RCC_OscConfig+0x5a8>)
 8003f4e:	6853      	ldr	r3, [r2, #4]
 8003f50:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003f54:	6921      	ldr	r1, [r4, #16]
 8003f56:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003f5a:	6053      	str	r3, [r2, #4]
 8003f5c:	e7d1      	b.n	8003f02 <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_HSI_DISABLE();
 8003f5e:	4ab3      	ldr	r2, [pc, #716]	; (800422c <HAL_RCC_OscConfig+0x5a8>)
 8003f60:	6813      	ldr	r3, [r2, #0]
 8003f62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f66:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003f68:	f7fc ffea 	bl	8000f40 <HAL_GetTick>
 8003f6c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f6e:	4baf      	ldr	r3, [pc, #700]	; (800422c <HAL_RCC_OscConfig+0x5a8>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003f76:	d0c4      	beq.n	8003f02 <HAL_RCC_OscConfig+0x27e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f78:	f7fc ffe2 	bl	8000f40 <HAL_GetTick>
 8003f7c:	1b80      	subs	r0, r0, r6
 8003f7e:	2802      	cmp	r0, #2
 8003f80:	d9f5      	bls.n	8003f6e <HAL_RCC_OscConfig+0x2ea>
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e14f      	b.n	8004226 <HAL_RCC_OscConfig+0x5a2>
      __HAL_RCC_LSI_DISABLE();
 8003f86:	4aa9      	ldr	r2, [pc, #676]	; (800422c <HAL_RCC_OscConfig+0x5a8>)
 8003f88:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003f8c:	f023 0301 	bic.w	r3, r3, #1
 8003f90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003f94:	f7fc ffd4 	bl	8000f40 <HAL_GetTick>
 8003f98:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f9a:	4ba4      	ldr	r3, [pc, #656]	; (800422c <HAL_RCC_OscConfig+0x5a8>)
 8003f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fa0:	f013 0f02 	tst.w	r3, #2
 8003fa4:	d006      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x330>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fa6:	f7fc ffcb 	bl	8000f40 <HAL_GetTick>
 8003faa:	1b80      	subs	r0, r0, r6
 8003fac:	2802      	cmp	r0, #2
 8003fae:	d9f4      	bls.n	8003f9a <HAL_RCC_OscConfig+0x316>
          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e138      	b.n	8004226 <HAL_RCC_OscConfig+0x5a2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	f013 0f04 	tst.w	r3, #4
 8003fba:	d07a      	beq.n	80040b2 <HAL_RCC_OscConfig+0x42e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003fbc:	4b9b      	ldr	r3, [pc, #620]	; (800422c <HAL_RCC_OscConfig+0x5a8>)
 8003fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003fc4:	d136      	bne.n	8004034 <HAL_RCC_OscConfig+0x3b0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fc6:	4b99      	ldr	r3, [pc, #612]	; (800422c <HAL_RCC_OscConfig+0x5a8>)
 8003fc8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003fca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003fce:	659a      	str	r2, [r3, #88]	; 0x58
 8003fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd6:	9301      	str	r3, [sp, #4]
 8003fd8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003fda:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fdc:	4b94      	ldr	r3, [pc, #592]	; (8004230 <HAL_RCC_OscConfig+0x5ac>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003fe4:	d028      	beq.n	8004038 <HAL_RCC_OscConfig+0x3b4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fe6:	68a3      	ldr	r3, [r4, #8]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d039      	beq.n	8004060 <HAL_RCC_OscConfig+0x3dc>
 8003fec:	2b05      	cmp	r3, #5
 8003fee:	d03f      	beq.n	8004070 <HAL_RCC_OscConfig+0x3ec>
 8003ff0:	4b8e      	ldr	r3, [pc, #568]	; (800422c <HAL_RCC_OscConfig+0x5a8>)
 8003ff2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003ff6:	f022 0201 	bic.w	r2, r2, #1
 8003ffa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003ffe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004002:	f022 0204 	bic.w	r2, r2, #4
 8004006:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800400a:	68a3      	ldr	r3, [r4, #8]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d03d      	beq.n	800408c <HAL_RCC_OscConfig+0x408>
      tickstart = HAL_GetTick();
 8004010:	f7fc ff96 	bl	8000f40 <HAL_GetTick>
 8004014:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004016:	4b85      	ldr	r3, [pc, #532]	; (800422c <HAL_RCC_OscConfig+0x5a8>)
 8004018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401c:	f013 0f02 	tst.w	r3, #2
 8004020:	d146      	bne.n	80040b0 <HAL_RCC_OscConfig+0x42c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004022:	f7fc ff8d 	bl	8000f40 <HAL_GetTick>
 8004026:	1bc0      	subs	r0, r0, r7
 8004028:	f241 3388 	movw	r3, #5000	; 0x1388
 800402c:	4298      	cmp	r0, r3
 800402e:	d9f2      	bls.n	8004016 <HAL_RCC_OscConfig+0x392>
          return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e0f8      	b.n	8004226 <HAL_RCC_OscConfig+0x5a2>
    FlagStatus       pwrclkchanged = RESET;
 8004034:	2600      	movs	r6, #0
 8004036:	e7d1      	b.n	8003fdc <HAL_RCC_OscConfig+0x358>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004038:	4a7d      	ldr	r2, [pc, #500]	; (8004230 <HAL_RCC_OscConfig+0x5ac>)
 800403a:	6813      	ldr	r3, [r2, #0]
 800403c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004040:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004042:	f7fc ff7d 	bl	8000f40 <HAL_GetTick>
 8004046:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004048:	4b79      	ldr	r3, [pc, #484]	; (8004230 <HAL_RCC_OscConfig+0x5ac>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004050:	d1c9      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x362>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004052:	f7fc ff75 	bl	8000f40 <HAL_GetTick>
 8004056:	1bc0      	subs	r0, r0, r7
 8004058:	2802      	cmp	r0, #2
 800405a:	d9f5      	bls.n	8004048 <HAL_RCC_OscConfig+0x3c4>
          return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e0e2      	b.n	8004226 <HAL_RCC_OscConfig+0x5a2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004060:	4a72      	ldr	r2, [pc, #456]	; (800422c <HAL_RCC_OscConfig+0x5a8>)
 8004062:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004066:	f043 0301 	orr.w	r3, r3, #1
 800406a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800406e:	e7cc      	b.n	800400a <HAL_RCC_OscConfig+0x386>
 8004070:	4b6e      	ldr	r3, [pc, #440]	; (800422c <HAL_RCC_OscConfig+0x5a8>)
 8004072:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004076:	f042 0204 	orr.w	r2, r2, #4
 800407a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800407e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004082:	f042 0201 	orr.w	r2, r2, #1
 8004086:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800408a:	e7be      	b.n	800400a <HAL_RCC_OscConfig+0x386>
      tickstart = HAL_GetTick();
 800408c:	f7fc ff58 	bl	8000f40 <HAL_GetTick>
 8004090:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004092:	4b66      	ldr	r3, [pc, #408]	; (800422c <HAL_RCC_OscConfig+0x5a8>)
 8004094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004098:	f013 0f02 	tst.w	r3, #2
 800409c:	d008      	beq.n	80040b0 <HAL_RCC_OscConfig+0x42c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800409e:	f7fc ff4f 	bl	8000f40 <HAL_GetTick>
 80040a2:	1bc0      	subs	r0, r0, r7
 80040a4:	f241 3388 	movw	r3, #5000	; 0x1388
 80040a8:	4298      	cmp	r0, r3
 80040aa:	d9f2      	bls.n	8004092 <HAL_RCC_OscConfig+0x40e>
          return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e0ba      	b.n	8004226 <HAL_RCC_OscConfig+0x5a2>
    if(pwrclkchanged == SET)
 80040b0:	b9e6      	cbnz	r6, 80040ec <HAL_RCC_OscConfig+0x468>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	f013 0f20 	tst.w	r3, #32
 80040b8:	d035      	beq.n	8004126 <HAL_RCC_OscConfig+0x4a2>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040bc:	b1e3      	cbz	r3, 80040f8 <HAL_RCC_OscConfig+0x474>
      __HAL_RCC_HSI48_ENABLE();
 80040be:	4a5b      	ldr	r2, [pc, #364]	; (800422c <HAL_RCC_OscConfig+0x5a8>)
 80040c0:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80040c4:	f043 0301 	orr.w	r3, r3, #1
 80040c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 80040cc:	f7fc ff38 	bl	8000f40 <HAL_GetTick>
 80040d0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040d2:	4b56      	ldr	r3, [pc, #344]	; (800422c <HAL_RCC_OscConfig+0x5a8>)
 80040d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040d8:	f013 0f02 	tst.w	r3, #2
 80040dc:	d123      	bne.n	8004126 <HAL_RCC_OscConfig+0x4a2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040de:	f7fc ff2f 	bl	8000f40 <HAL_GetTick>
 80040e2:	1b80      	subs	r0, r0, r6
 80040e4:	2802      	cmp	r0, #2
 80040e6:	d9f4      	bls.n	80040d2 <HAL_RCC_OscConfig+0x44e>
          return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e09c      	b.n	8004226 <HAL_RCC_OscConfig+0x5a2>
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ec:	4a4f      	ldr	r2, [pc, #316]	; (800422c <HAL_RCC_OscConfig+0x5a8>)
 80040ee:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80040f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040f4:	6593      	str	r3, [r2, #88]	; 0x58
 80040f6:	e7dc      	b.n	80040b2 <HAL_RCC_OscConfig+0x42e>
      __HAL_RCC_HSI48_DISABLE();
 80040f8:	4a4c      	ldr	r2, [pc, #304]	; (800422c <HAL_RCC_OscConfig+0x5a8>)
 80040fa:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80040fe:	f023 0301 	bic.w	r3, r3, #1
 8004102:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004106:	f7fc ff1b 	bl	8000f40 <HAL_GetTick>
 800410a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800410c:	4b47      	ldr	r3, [pc, #284]	; (800422c <HAL_RCC_OscConfig+0x5a8>)
 800410e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004112:	f013 0f02 	tst.w	r3, #2
 8004116:	d006      	beq.n	8004126 <HAL_RCC_OscConfig+0x4a2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004118:	f7fc ff12 	bl	8000f40 <HAL_GetTick>
 800411c:	1b80      	subs	r0, r0, r6
 800411e:	2802      	cmp	r0, #2
 8004120:	d9f4      	bls.n	800410c <HAL_RCC_OscConfig+0x488>
          return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e07f      	b.n	8004226 <HAL_RCC_OscConfig+0x5a2>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004126:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004128:	2b00      	cmp	r3, #0
 800412a:	d07b      	beq.n	8004224 <HAL_RCC_OscConfig+0x5a0>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800412c:	2d0c      	cmp	r5, #12
 800412e:	f000 8081 	beq.w	8004234 <HAL_RCC_OscConfig+0x5b0>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004132:	2b02      	cmp	r3, #2
 8004134:	d023      	beq.n	800417e <HAL_RCC_OscConfig+0x4fa>
        __HAL_RCC_PLL_DISABLE();
 8004136:	4b3d      	ldr	r3, [pc, #244]	; (800422c <HAL_RCC_OscConfig+0x5a8>)
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800413e:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
 8004146:	d104      	bne.n	8004152 <HAL_RCC_OscConfig+0x4ce>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004148:	4a38      	ldr	r2, [pc, #224]	; (800422c <HAL_RCC_OscConfig+0x5a8>)
 800414a:	68d3      	ldr	r3, [r2, #12]
 800414c:	f023 0303 	bic.w	r3, r3, #3
 8004150:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004152:	4a36      	ldr	r2, [pc, #216]	; (800422c <HAL_RCC_OscConfig+0x5a8>)
 8004154:	68d3      	ldr	r3, [r2, #12]
 8004156:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800415a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800415e:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8004160:	f7fc feee 	bl	8000f40 <HAL_GetTick>
 8004164:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004166:	4b31      	ldr	r3, [pc, #196]	; (800422c <HAL_RCC_OscConfig+0x5a8>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800416e:	d04a      	beq.n	8004206 <HAL_RCC_OscConfig+0x582>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004170:	f7fc fee6 	bl	8000f40 <HAL_GetTick>
 8004174:	1b00      	subs	r0, r0, r4
 8004176:	2802      	cmp	r0, #2
 8004178:	d9f5      	bls.n	8004166 <HAL_RCC_OscConfig+0x4e2>
            return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e053      	b.n	8004226 <HAL_RCC_OscConfig+0x5a2>
        __HAL_RCC_PLL_DISABLE();
 800417e:	4a2b      	ldr	r2, [pc, #172]	; (800422c <HAL_RCC_OscConfig+0x5a8>)
 8004180:	6813      	ldr	r3, [r2, #0]
 8004182:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004186:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004188:	f7fc feda 	bl	8000f40 <HAL_GetTick>
 800418c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800418e:	4b27      	ldr	r3, [pc, #156]	; (800422c <HAL_RCC_OscConfig+0x5a8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004196:	d006      	beq.n	80041a6 <HAL_RCC_OscConfig+0x522>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004198:	f7fc fed2 	bl	8000f40 <HAL_GetTick>
 800419c:	1b40      	subs	r0, r0, r5
 800419e:	2802      	cmp	r0, #2
 80041a0:	d9f5      	bls.n	800418e <HAL_RCC_OscConfig+0x50a>
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e03f      	b.n	8004226 <HAL_RCC_OscConfig+0x5a2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80041a8:	1e5a      	subs	r2, r3, #1
 80041aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041ac:	021b      	lsls	r3, r3, #8
 80041ae:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80041b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80041b4:	4313      	orrs	r3, r2
 80041b6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80041b8:	0852      	lsrs	r2, r2, #1
 80041ba:	3a01      	subs	r2, #1
 80041bc:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80041c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80041c2:	0852      	lsrs	r2, r2, #1
 80041c4:	3a01      	subs	r2, #1
 80041c6:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80041ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80041cc:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 80041d0:	4a16      	ldr	r2, [pc, #88]	; (800422c <HAL_RCC_OscConfig+0x5a8>)
 80041d2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 80041d4:	6813      	ldr	r3, [r2, #0]
 80041d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041da:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041dc:	68d3      	ldr	r3, [r2, #12]
 80041de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041e2:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80041e4:	f7fc feac 	bl	8000f40 <HAL_GetTick>
 80041e8:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041ea:	4b10      	ldr	r3, [pc, #64]	; (800422c <HAL_RCC_OscConfig+0x5a8>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80041f2:	d106      	bne.n	8004202 <HAL_RCC_OscConfig+0x57e>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f4:	f7fc fea4 	bl	8000f40 <HAL_GetTick>
 80041f8:	1b00      	subs	r0, r0, r4
 80041fa:	2802      	cmp	r0, #2
 80041fc:	d9f5      	bls.n	80041ea <HAL_RCC_OscConfig+0x566>
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e011      	b.n	8004226 <HAL_RCC_OscConfig+0x5a2>
  return HAL_OK;
 8004202:	2300      	movs	r3, #0
 8004204:	e00f      	b.n	8004226 <HAL_RCC_OscConfig+0x5a2>
 8004206:	2300      	movs	r3, #0
 8004208:	e00d      	b.n	8004226 <HAL_RCC_OscConfig+0x5a2>
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
}
 800420c:	4618      	mov	r0, r3
 800420e:	4770      	bx	lr
        return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x5a2>
            return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e006      	b.n	8004226 <HAL_RCC_OscConfig+0x5a2>
            return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e004      	b.n	8004226 <HAL_RCC_OscConfig+0x5a2>
        return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e002      	b.n	8004226 <HAL_RCC_OscConfig+0x5a2>
        return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e000      	b.n	8004226 <HAL_RCC_OscConfig+0x5a2>
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	b003      	add	sp, #12
 800422a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800422c:	40021000 	.word	0x40021000
 8004230:	40007000 	.word	0x40007000
      return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e7f6      	b.n	8004226 <HAL_RCC_OscConfig+0x5a2>

08004238 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004238:	2800      	cmp	r0, #0
 800423a:	f000 80dd 	beq.w	80043f8 <HAL_RCC_ClockConfig+0x1c0>
{
 800423e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004240:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004242:	4b6f      	ldr	r3, [pc, #444]	; (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	428b      	cmp	r3, r1
 800424c:	d20c      	bcs.n	8004268 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424e:	4a6c      	ldr	r2, [pc, #432]	; (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 8004250:	6813      	ldr	r3, [r2, #0]
 8004252:	f023 030f 	bic.w	r3, r3, #15
 8004256:	430b      	orrs	r3, r1
 8004258:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800425a:	6813      	ldr	r3, [r2, #0]
 800425c:	f003 030f 	and.w	r3, r3, #15
 8004260:	4299      	cmp	r1, r3
 8004262:	d001      	beq.n	8004268 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8004264:	2001      	movs	r0, #1
 8004266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004268:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800426a:	6826      	ldr	r6, [r4, #0]
 800426c:	f016 0601 	ands.w	r6, r6, #1
 8004270:	d074      	beq.n	800435c <HAL_RCC_ClockConfig+0x124>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004272:	6863      	ldr	r3, [r4, #4]
 8004274:	2b03      	cmp	r3, #3
 8004276:	d01a      	beq.n	80042ae <HAL_RCC_ClockConfig+0x76>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004278:	2b02      	cmp	r3, #2
 800427a:	d041      	beq.n	8004300 <HAL_RCC_ClockConfig+0xc8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800427c:	2b00      	cmp	r3, #0
 800427e:	d146      	bne.n	800430e <HAL_RCC_ClockConfig+0xd6>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004280:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004284:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f013 0f02 	tst.w	r3, #2
 800428e:	f000 80b5 	beq.w	80043fc <HAL_RCC_ClockConfig+0x1c4>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004292:	f7ff fc8b 	bl	8003bac <HAL_RCC_GetSysClockFreq>
 8004296:	4b5b      	ldr	r3, [pc, #364]	; (8004404 <HAL_RCC_ClockConfig+0x1cc>)
 8004298:	4298      	cmp	r0, r3
 800429a:	d943      	bls.n	8004324 <HAL_RCC_ClockConfig+0xec>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800429c:	4a5a      	ldr	r2, [pc, #360]	; (8004408 <HAL_RCC_ClockConfig+0x1d0>)
 800429e:	6893      	ldr	r3, [r2, #8]
 80042a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042a8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80042aa:	2680      	movs	r6, #128	; 0x80
 80042ac:	e03b      	b.n	8004326 <HAL_RCC_ClockConfig+0xee>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ae:	4b56      	ldr	r3, [pc, #344]	; (8004408 <HAL_RCC_ClockConfig+0x1d0>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80042b6:	d101      	bne.n	80042bc <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80042b8:	2001      	movs	r0, #1
 80042ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80042bc:	f7ff fbdc 	bl	8003a78 <RCC_GetSysClockFreqFromPLLSource>
 80042c0:	4b50      	ldr	r3, [pc, #320]	; (8004404 <HAL_RCC_ClockConfig+0x1cc>)
 80042c2:	4298      	cmp	r0, r3
 80042c4:	d92a      	bls.n	800431c <HAL_RCC_ClockConfig+0xe4>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80042c6:	4b50      	ldr	r3, [pc, #320]	; (8004408 <HAL_RCC_ClockConfig+0x1d0>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 80042ce:	d108      	bne.n	80042e2 <HAL_RCC_ClockConfig+0xaa>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80042d0:	4a4d      	ldr	r2, [pc, #308]	; (8004408 <HAL_RCC_ClockConfig+0x1d0>)
 80042d2:	6893      	ldr	r3, [r2, #8]
 80042d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80042de:	2680      	movs	r6, #128	; 0x80
 80042e0:	e021      	b.n	8004326 <HAL_RCC_ClockConfig+0xee>
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80042e2:	6826      	ldr	r6, [r4, #0]
 80042e4:	f016 0602 	ands.w	r6, r6, #2
 80042e8:	d01d      	beq.n	8004326 <HAL_RCC_ClockConfig+0xee>
 80042ea:	68a3      	ldr	r3, [r4, #8]
 80042ec:	b9c3      	cbnz	r3, 8004320 <HAL_RCC_ClockConfig+0xe8>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80042ee:	4a46      	ldr	r2, [pc, #280]	; (8004408 <HAL_RCC_ClockConfig+0x1d0>)
 80042f0:	6893      	ldr	r3, [r2, #8]
 80042f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042fa:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80042fc:	2680      	movs	r6, #128	; 0x80
 80042fe:	e012      	b.n	8004326 <HAL_RCC_ClockConfig+0xee>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004300:	4b41      	ldr	r3, [pc, #260]	; (8004408 <HAL_RCC_ClockConfig+0x1d0>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004308:	d1c3      	bne.n	8004292 <HAL_RCC_ClockConfig+0x5a>
          return HAL_ERROR;
 800430a:	2001      	movs	r0, #1
 800430c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800430e:	4b3e      	ldr	r3, [pc, #248]	; (8004408 <HAL_RCC_ClockConfig+0x1d0>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004316:	d1bc      	bne.n	8004292 <HAL_RCC_ClockConfig+0x5a>
          return HAL_ERROR;
 8004318:	2001      	movs	r0, #1
 800431a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800431c:	2600      	movs	r6, #0
 800431e:	e002      	b.n	8004326 <HAL_RCC_ClockConfig+0xee>
 8004320:	2600      	movs	r6, #0
 8004322:	e000      	b.n	8004326 <HAL_RCC_ClockConfig+0xee>
 8004324:	2600      	movs	r6, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004326:	4a38      	ldr	r2, [pc, #224]	; (8004408 <HAL_RCC_ClockConfig+0x1d0>)
 8004328:	6893      	ldr	r3, [r2, #8]
 800432a:	f023 0303 	bic.w	r3, r3, #3
 800432e:	6861      	ldr	r1, [r4, #4]
 8004330:	430b      	orrs	r3, r1
 8004332:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8004334:	f7fc fe04 	bl	8000f40 <HAL_GetTick>
 8004338:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800433a:	4b33      	ldr	r3, [pc, #204]	; (8004408 <HAL_RCC_ClockConfig+0x1d0>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f003 030c 	and.w	r3, r3, #12
 8004342:	6862      	ldr	r2, [r4, #4]
 8004344:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004348:	d008      	beq.n	800435c <HAL_RCC_ClockConfig+0x124>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800434a:	f7fc fdf9 	bl	8000f40 <HAL_GetTick>
 800434e:	1bc0      	subs	r0, r0, r7
 8004350:	f241 3388 	movw	r3, #5000	; 0x1388
 8004354:	4298      	cmp	r0, r3
 8004356:	d9f0      	bls.n	800433a <HAL_RCC_ClockConfig+0x102>
        return HAL_TIMEOUT;
 8004358:	2003      	movs	r0, #3
 800435a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800435c:	6823      	ldr	r3, [r4, #0]
 800435e:	f013 0f02 	tst.w	r3, #2
 8004362:	d019      	beq.n	8004398 <HAL_RCC_ClockConfig+0x160>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004364:	4a28      	ldr	r2, [pc, #160]	; (8004408 <HAL_RCC_ClockConfig+0x1d0>)
 8004366:	6893      	ldr	r3, [r2, #8]
 8004368:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800436c:	68a1      	ldr	r1, [r4, #8]
 800436e:	430b      	orrs	r3, r1
 8004370:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004372:	4b23      	ldr	r3, [pc, #140]	; (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	429d      	cmp	r5, r3
 800437c:	d214      	bcs.n	80043a8 <HAL_RCC_ClockConfig+0x170>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800437e:	4a20      	ldr	r2, [pc, #128]	; (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 8004380:	6813      	ldr	r3, [r2, #0]
 8004382:	f023 030f 	bic.w	r3, r3, #15
 8004386:	432b      	orrs	r3, r5
 8004388:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800438a:	6813      	ldr	r3, [r2, #0]
 800438c:	f003 030f 	and.w	r3, r3, #15
 8004390:	429d      	cmp	r5, r3
 8004392:	d009      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x170>
      return HAL_ERROR;
 8004394:	2001      	movs	r0, #1
}
 8004396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(hpre == RCC_SYSCLK_DIV2)
 8004398:	2e80      	cmp	r6, #128	; 0x80
 800439a:	d1ea      	bne.n	8004372 <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800439c:	4a1a      	ldr	r2, [pc, #104]	; (8004408 <HAL_RCC_ClockConfig+0x1d0>)
 800439e:	6893      	ldr	r3, [r2, #8]
 80043a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043a4:	6093      	str	r3, [r2, #8]
 80043a6:	e7e4      	b.n	8004372 <HAL_RCC_ClockConfig+0x13a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a8:	6823      	ldr	r3, [r4, #0]
 80043aa:	f013 0f04 	tst.w	r3, #4
 80043ae:	d006      	beq.n	80043be <HAL_RCC_ClockConfig+0x186>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043b0:	4a15      	ldr	r2, [pc, #84]	; (8004408 <HAL_RCC_ClockConfig+0x1d0>)
 80043b2:	6893      	ldr	r3, [r2, #8]
 80043b4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80043b8:	68e1      	ldr	r1, [r4, #12]
 80043ba:	430b      	orrs	r3, r1
 80043bc:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043be:	6823      	ldr	r3, [r4, #0]
 80043c0:	f013 0f08 	tst.w	r3, #8
 80043c4:	d007      	beq.n	80043d6 <HAL_RCC_ClockConfig+0x19e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043c6:	4a10      	ldr	r2, [pc, #64]	; (8004408 <HAL_RCC_ClockConfig+0x1d0>)
 80043c8:	6893      	ldr	r3, [r2, #8]
 80043ca:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80043ce:	6921      	ldr	r1, [r4, #16]
 80043d0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80043d4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043d6:	f7ff fbe9 	bl	8003bac <HAL_RCC_GetSysClockFreq>
 80043da:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <HAL_RCC_ClockConfig+0x1d0>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80043e2:	4a0a      	ldr	r2, [pc, #40]	; (800440c <HAL_RCC_ClockConfig+0x1d4>)
 80043e4:	5cd3      	ldrb	r3, [r2, r3]
 80043e6:	f003 031f 	and.w	r3, r3, #31
 80043ea:	40d8      	lsrs	r0, r3
 80043ec:	4b08      	ldr	r3, [pc, #32]	; (8004410 <HAL_RCC_ClockConfig+0x1d8>)
 80043ee:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 80043f0:	2000      	movs	r0, #0
 80043f2:	f00b f8b3 	bl	800f55c <HAL_InitTick>
  return status;
 80043f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80043f8:	2001      	movs	r0, #1
 80043fa:	4770      	bx	lr
          return HAL_ERROR;
 80043fc:	2001      	movs	r0, #1
 80043fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004400:	40022000 	.word	0x40022000
 8004404:	04c4b400 	.word	0x04c4b400
 8004408:	40021000 	.word	0x40021000
 800440c:	08012e94 	.word	0x08012e94
 8004410:	20000048 	.word	0x20000048

08004414 <HAL_RCC_GetHCLKFreq>:
}
 8004414:	4b01      	ldr	r3, [pc, #4]	; (800441c <HAL_RCC_GetHCLKFreq+0x8>)
 8004416:	6818      	ldr	r0, [r3, #0]
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	20000048 	.word	0x20000048

08004420 <HAL_RCC_GetPCLK1Freq>:
{
 8004420:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004422:	f7ff fff7 	bl	8004414 <HAL_RCC_GetHCLKFreq>
 8004426:	4b05      	ldr	r3, [pc, #20]	; (800443c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800442e:	4a04      	ldr	r2, [pc, #16]	; (8004440 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004430:	5cd3      	ldrb	r3, [r2, r3]
 8004432:	f003 031f 	and.w	r3, r3, #31
}
 8004436:	40d8      	lsrs	r0, r3
 8004438:	bd08      	pop	{r3, pc}
 800443a:	bf00      	nop
 800443c:	40021000 	.word	0x40021000
 8004440:	08012ea4 	.word	0x08012ea4

08004444 <HAL_RCC_GetPCLK2Freq>:
{
 8004444:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004446:	f7ff ffe5 	bl	8004414 <HAL_RCC_GetHCLKFreq>
 800444a:	4b05      	ldr	r3, [pc, #20]	; (8004460 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004452:	4a04      	ldr	r2, [pc, #16]	; (8004464 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004454:	5cd3      	ldrb	r3, [r2, r3]
 8004456:	f003 031f 	and.w	r3, r3, #31
}
 800445a:	40d8      	lsrs	r0, r3
 800445c:	bd08      	pop	{r3, pc}
 800445e:	bf00      	nop
 8004460:	40021000 	.word	0x40021000
 8004464:	08012ea4 	.word	0x08012ea4

08004468 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004468:	230f      	movs	r3, #15
 800446a:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800446c:	4b0b      	ldr	r3, [pc, #44]	; (800449c <HAL_RCC_GetClockConfig+0x34>)
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	f002 0203 	and.w	r2, r2, #3
 8004474:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800447c:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004484:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	08db      	lsrs	r3, r3, #3
 800448a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800448e:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004490:	4b03      	ldr	r3, [pc, #12]	; (80044a0 <HAL_RCC_GetClockConfig+0x38>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 030f 	and.w	r3, r3, #15
 8004498:	600b      	str	r3, [r1, #0]
 800449a:	4770      	bx	lr
 800449c:	40021000 	.word	0x40021000
 80044a0:	40022000 	.word	0x40022000

080044a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80044a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044a6:	4b59      	ldr	r3, [pc, #356]	; (800460c <RCCEx_PLLSAI1_Config+0x168>)
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f013 0f03 	tst.w	r3, #3
 80044ae:	d00f      	beq.n	80044d0 <RCCEx_PLLSAI1_Config+0x2c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044b0:	4b56      	ldr	r3, [pc, #344]	; (800460c <RCCEx_PLLSAI1_Config+0x168>)
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f003 0303 	and.w	r3, r3, #3
 80044b8:	6802      	ldr	r2, [r0, #0]
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d004      	beq.n	80044c8 <RCCEx_PLLSAI1_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80044be:	2401      	movs	r4, #1
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80044c0:	2c00      	cmp	r4, #0
 80044c2:	d03a      	beq.n	800453a <RCCEx_PLLSAI1_Config+0x96>
      }
    }
  }

  return status;
}
 80044c4:	4620      	mov	r0, r4
 80044c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 80044c8:	2a00      	cmp	r2, #0
 80044ca:	d034      	beq.n	8004536 <RCCEx_PLLSAI1_Config+0x92>
  HAL_StatusTypeDef status = HAL_OK;
 80044cc:	2400      	movs	r4, #0
 80044ce:	e7f7      	b.n	80044c0 <RCCEx_PLLSAI1_Config+0x1c>
    switch(PllSai1->PLLSAI1Source)
 80044d0:	6803      	ldr	r3, [r0, #0]
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d014      	beq.n	8004500 <RCCEx_PLLSAI1_Config+0x5c>
 80044d6:	2b03      	cmp	r3, #3
 80044d8:	d019      	beq.n	800450e <RCCEx_PLLSAI1_Config+0x6a>
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d009      	beq.n	80044f2 <RCCEx_PLLSAI1_Config+0x4e>
      status = HAL_ERROR;
 80044de:	2401      	movs	r4, #1
    if(status == HAL_OK)
 80044e0:	2c00      	cmp	r4, #0
 80044e2:	d1ed      	bne.n	80044c0 <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80044e4:	4d49      	ldr	r5, [pc, #292]	; (800460c <RCCEx_PLLSAI1_Config+0x168>)
 80044e6:	68ea      	ldr	r2, [r5, #12]
 80044e8:	f022 0203 	bic.w	r2, r2, #3
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60eb      	str	r3, [r5, #12]
 80044f0:	e7e6      	b.n	80044c0 <RCCEx_PLLSAI1_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044f2:	4a46      	ldr	r2, [pc, #280]	; (800460c <RCCEx_PLLSAI1_Config+0x168>)
 80044f4:	6812      	ldr	r2, [r2, #0]
 80044f6:	f012 0f02 	tst.w	r2, #2
 80044fa:	d014      	beq.n	8004526 <RCCEx_PLLSAI1_Config+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 80044fc:	2400      	movs	r4, #0
 80044fe:	e7ef      	b.n	80044e0 <RCCEx_PLLSAI1_Config+0x3c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004500:	4a42      	ldr	r2, [pc, #264]	; (800460c <RCCEx_PLLSAI1_Config+0x168>)
 8004502:	6812      	ldr	r2, [r2, #0]
 8004504:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004508:	d00f      	beq.n	800452a <RCCEx_PLLSAI1_Config+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 800450a:	2400      	movs	r4, #0
 800450c:	e7e8      	b.n	80044e0 <RCCEx_PLLSAI1_Config+0x3c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800450e:	4a3f      	ldr	r2, [pc, #252]	; (800460c <RCCEx_PLLSAI1_Config+0x168>)
 8004510:	6812      	ldr	r2, [r2, #0]
 8004512:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004516:	d10a      	bne.n	800452e <RCCEx_PLLSAI1_Config+0x8a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004518:	4a3c      	ldr	r2, [pc, #240]	; (800460c <RCCEx_PLLSAI1_Config+0x168>)
 800451a:	6812      	ldr	r2, [r2, #0]
 800451c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8004520:	d007      	beq.n	8004532 <RCCEx_PLLSAI1_Config+0x8e>
  HAL_StatusTypeDef status = HAL_OK;
 8004522:	2400      	movs	r4, #0
 8004524:	e7dc      	b.n	80044e0 <RCCEx_PLLSAI1_Config+0x3c>
        status = HAL_ERROR;
 8004526:	2401      	movs	r4, #1
 8004528:	e7da      	b.n	80044e0 <RCCEx_PLLSAI1_Config+0x3c>
        status = HAL_ERROR;
 800452a:	2401      	movs	r4, #1
 800452c:	e7d8      	b.n	80044e0 <RCCEx_PLLSAI1_Config+0x3c>
  HAL_StatusTypeDef status = HAL_OK;
 800452e:	2400      	movs	r4, #0
 8004530:	e7d6      	b.n	80044e0 <RCCEx_PLLSAI1_Config+0x3c>
          status = HAL_ERROR;
 8004532:	2401      	movs	r4, #1
 8004534:	e7d4      	b.n	80044e0 <RCCEx_PLLSAI1_Config+0x3c>
      status = HAL_ERROR;
 8004536:	2401      	movs	r4, #1
 8004538:	e7c2      	b.n	80044c0 <RCCEx_PLLSAI1_Config+0x1c>
 800453a:	460f      	mov	r7, r1
 800453c:	4605      	mov	r5, r0
    __HAL_RCC_PLLSAI1_DISABLE();
 800453e:	4a33      	ldr	r2, [pc, #204]	; (800460c <RCCEx_PLLSAI1_Config+0x168>)
 8004540:	6813      	ldr	r3, [r2, #0]
 8004542:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004546:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004548:	f7fc fcfa 	bl	8000f40 <HAL_GetTick>
 800454c:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800454e:	4b2f      	ldr	r3, [pc, #188]	; (800460c <RCCEx_PLLSAI1_Config+0x168>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004556:	d005      	beq.n	8004564 <RCCEx_PLLSAI1_Config+0xc0>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004558:	f7fc fcf2 	bl	8000f40 <HAL_GetTick>
 800455c:	1b80      	subs	r0, r0, r6
 800455e:	2802      	cmp	r0, #2
 8004560:	d9f5      	bls.n	800454e <RCCEx_PLLSAI1_Config+0xaa>
        status = HAL_TIMEOUT;
 8004562:	2403      	movs	r4, #3
    if(status == HAL_OK)
 8004564:	2c00      	cmp	r4, #0
 8004566:	d1ad      	bne.n	80044c4 <RCCEx_PLLSAI1_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 8004568:	bb4f      	cbnz	r7, 80045be <RCCEx_PLLSAI1_Config+0x11a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800456a:	4828      	ldr	r0, [pc, #160]	; (800460c <RCCEx_PLLSAI1_Config+0x168>)
 800456c:	6903      	ldr	r3, [r0, #16]
 800456e:	4a28      	ldr	r2, [pc, #160]	; (8004610 <RCCEx_PLLSAI1_Config+0x16c>)
 8004570:	401a      	ands	r2, r3
 8004572:	68a9      	ldr	r1, [r5, #8]
 8004574:	68eb      	ldr	r3, [r5, #12]
 8004576:	06db      	lsls	r3, r3, #27
 8004578:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800457c:	6869      	ldr	r1, [r5, #4]
 800457e:	3901      	subs	r1, #1
 8004580:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004584:	4313      	orrs	r3, r2
 8004586:	6103      	str	r3, [r0, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8004588:	4a20      	ldr	r2, [pc, #128]	; (800460c <RCCEx_PLLSAI1_Config+0x168>)
 800458a:	6813      	ldr	r3, [r2, #0]
 800458c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004590:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004592:	f7fc fcd5 	bl	8000f40 <HAL_GetTick>
 8004596:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004598:	4b1c      	ldr	r3, [pc, #112]	; (800460c <RCCEx_PLLSAI1_Config+0x168>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80045a0:	d105      	bne.n	80045ae <RCCEx_PLLSAI1_Config+0x10a>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045a2:	f7fc fccd 	bl	8000f40 <HAL_GetTick>
 80045a6:	1b80      	subs	r0, r0, r6
 80045a8:	2802      	cmp	r0, #2
 80045aa:	d9f5      	bls.n	8004598 <RCCEx_PLLSAI1_Config+0xf4>
          status = HAL_TIMEOUT;
 80045ac:	2403      	movs	r4, #3
      if(status == HAL_OK)
 80045ae:	2c00      	cmp	r4, #0
 80045b0:	d188      	bne.n	80044c4 <RCCEx_PLLSAI1_Config+0x20>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80045b2:	4a16      	ldr	r2, [pc, #88]	; (800460c <RCCEx_PLLSAI1_Config+0x168>)
 80045b4:	6913      	ldr	r3, [r2, #16]
 80045b6:	69a9      	ldr	r1, [r5, #24]
 80045b8:	430b      	orrs	r3, r1
 80045ba:	6113      	str	r3, [r2, #16]
 80045bc:	e782      	b.n	80044c4 <RCCEx_PLLSAI1_Config+0x20>
      else if(Divider == DIVIDER_Q_UPDATE)
 80045be:	2f01      	cmp	r7, #1
 80045c0:	d011      	beq.n	80045e6 <RCCEx_PLLSAI1_Config+0x142>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045c2:	4812      	ldr	r0, [pc, #72]	; (800460c <RCCEx_PLLSAI1_Config+0x168>)
 80045c4:	6903      	ldr	r3, [r0, #16]
 80045c6:	4a13      	ldr	r2, [pc, #76]	; (8004614 <RCCEx_PLLSAI1_Config+0x170>)
 80045c8:	401a      	ands	r2, r3
 80045ca:	68a9      	ldr	r1, [r5, #8]
 80045cc:	696b      	ldr	r3, [r5, #20]
 80045ce:	085b      	lsrs	r3, r3, #1
 80045d0:	3b01      	subs	r3, #1
 80045d2:	065b      	lsls	r3, r3, #25
 80045d4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80045d8:	6869      	ldr	r1, [r5, #4]
 80045da:	3901      	subs	r1, #1
 80045dc:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80045e0:	4313      	orrs	r3, r2
 80045e2:	6103      	str	r3, [r0, #16]
 80045e4:	e7d0      	b.n	8004588 <RCCEx_PLLSAI1_Config+0xe4>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045e6:	4809      	ldr	r0, [pc, #36]	; (800460c <RCCEx_PLLSAI1_Config+0x168>)
 80045e8:	6903      	ldr	r3, [r0, #16]
 80045ea:	4a0b      	ldr	r2, [pc, #44]	; (8004618 <RCCEx_PLLSAI1_Config+0x174>)
 80045ec:	401a      	ands	r2, r3
 80045ee:	68a9      	ldr	r1, [r5, #8]
 80045f0:	692b      	ldr	r3, [r5, #16]
 80045f2:	085b      	lsrs	r3, r3, #1
 80045f4:	3b01      	subs	r3, #1
 80045f6:	055b      	lsls	r3, r3, #21
 80045f8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80045fc:	6869      	ldr	r1, [r5, #4]
 80045fe:	3901      	subs	r1, #1
 8004600:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004604:	4313      	orrs	r3, r2
 8004606:	6103      	str	r3, [r0, #16]
 8004608:	e7be      	b.n	8004588 <RCCEx_PLLSAI1_Config+0xe4>
 800460a:	bf00      	nop
 800460c:	40021000 	.word	0x40021000
 8004610:	07ff800f 	.word	0x07ff800f
 8004614:	f9ff800f 	.word	0xf9ff800f
 8004618:	ff9f800f 	.word	0xff9f800f

0800461c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800461c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800461e:	4b59      	ldr	r3, [pc, #356]	; (8004784 <RCCEx_PLLSAI2_Config+0x168>)
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	f013 0f03 	tst.w	r3, #3
 8004626:	d00f      	beq.n	8004648 <RCCEx_PLLSAI2_Config+0x2c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004628:	4b56      	ldr	r3, [pc, #344]	; (8004784 <RCCEx_PLLSAI2_Config+0x168>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f003 0303 	and.w	r3, r3, #3
 8004630:	6802      	ldr	r2, [r0, #0]
 8004632:	4293      	cmp	r3, r2
 8004634:	d004      	beq.n	8004640 <RCCEx_PLLSAI2_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004636:	2401      	movs	r4, #1
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004638:	2c00      	cmp	r4, #0
 800463a:	d03a      	beq.n	80046b2 <RCCEx_PLLSAI2_Config+0x96>
      }
    }
  }

  return status;
}
 800463c:	4620      	mov	r0, r4
 800463e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8004640:	2a00      	cmp	r2, #0
 8004642:	d034      	beq.n	80046ae <RCCEx_PLLSAI2_Config+0x92>
  HAL_StatusTypeDef status = HAL_OK;
 8004644:	2400      	movs	r4, #0
 8004646:	e7f7      	b.n	8004638 <RCCEx_PLLSAI2_Config+0x1c>
    switch(PllSai2->PLLSAI2Source)
 8004648:	6803      	ldr	r3, [r0, #0]
 800464a:	2b02      	cmp	r3, #2
 800464c:	d014      	beq.n	8004678 <RCCEx_PLLSAI2_Config+0x5c>
 800464e:	2b03      	cmp	r3, #3
 8004650:	d019      	beq.n	8004686 <RCCEx_PLLSAI2_Config+0x6a>
 8004652:	2b01      	cmp	r3, #1
 8004654:	d009      	beq.n	800466a <RCCEx_PLLSAI2_Config+0x4e>
      status = HAL_ERROR;
 8004656:	2401      	movs	r4, #1
    if(status == HAL_OK)
 8004658:	2c00      	cmp	r4, #0
 800465a:	d1ed      	bne.n	8004638 <RCCEx_PLLSAI2_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800465c:	4d49      	ldr	r5, [pc, #292]	; (8004784 <RCCEx_PLLSAI2_Config+0x168>)
 800465e:	68ea      	ldr	r2, [r5, #12]
 8004660:	f022 0203 	bic.w	r2, r2, #3
 8004664:	4313      	orrs	r3, r2
 8004666:	60eb      	str	r3, [r5, #12]
 8004668:	e7e6      	b.n	8004638 <RCCEx_PLLSAI2_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800466a:	4a46      	ldr	r2, [pc, #280]	; (8004784 <RCCEx_PLLSAI2_Config+0x168>)
 800466c:	6812      	ldr	r2, [r2, #0]
 800466e:	f012 0f02 	tst.w	r2, #2
 8004672:	d014      	beq.n	800469e <RCCEx_PLLSAI2_Config+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8004674:	2400      	movs	r4, #0
 8004676:	e7ef      	b.n	8004658 <RCCEx_PLLSAI2_Config+0x3c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004678:	4a42      	ldr	r2, [pc, #264]	; (8004784 <RCCEx_PLLSAI2_Config+0x168>)
 800467a:	6812      	ldr	r2, [r2, #0]
 800467c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004680:	d00f      	beq.n	80046a2 <RCCEx_PLLSAI2_Config+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8004682:	2400      	movs	r4, #0
 8004684:	e7e8      	b.n	8004658 <RCCEx_PLLSAI2_Config+0x3c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004686:	4a3f      	ldr	r2, [pc, #252]	; (8004784 <RCCEx_PLLSAI2_Config+0x168>)
 8004688:	6812      	ldr	r2, [r2, #0]
 800468a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800468e:	d10a      	bne.n	80046a6 <RCCEx_PLLSAI2_Config+0x8a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004690:	4a3c      	ldr	r2, [pc, #240]	; (8004784 <RCCEx_PLLSAI2_Config+0x168>)
 8004692:	6812      	ldr	r2, [r2, #0]
 8004694:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8004698:	d007      	beq.n	80046aa <RCCEx_PLLSAI2_Config+0x8e>
  HAL_StatusTypeDef status = HAL_OK;
 800469a:	2400      	movs	r4, #0
 800469c:	e7dc      	b.n	8004658 <RCCEx_PLLSAI2_Config+0x3c>
        status = HAL_ERROR;
 800469e:	2401      	movs	r4, #1
 80046a0:	e7da      	b.n	8004658 <RCCEx_PLLSAI2_Config+0x3c>
        status = HAL_ERROR;
 80046a2:	2401      	movs	r4, #1
 80046a4:	e7d8      	b.n	8004658 <RCCEx_PLLSAI2_Config+0x3c>
  HAL_StatusTypeDef status = HAL_OK;
 80046a6:	2400      	movs	r4, #0
 80046a8:	e7d6      	b.n	8004658 <RCCEx_PLLSAI2_Config+0x3c>
          status = HAL_ERROR;
 80046aa:	2401      	movs	r4, #1
 80046ac:	e7d4      	b.n	8004658 <RCCEx_PLLSAI2_Config+0x3c>
      status = HAL_ERROR;
 80046ae:	2401      	movs	r4, #1
 80046b0:	e7c2      	b.n	8004638 <RCCEx_PLLSAI2_Config+0x1c>
 80046b2:	460f      	mov	r7, r1
 80046b4:	4605      	mov	r5, r0
    __HAL_RCC_PLLSAI2_DISABLE();
 80046b6:	4a33      	ldr	r2, [pc, #204]	; (8004784 <RCCEx_PLLSAI2_Config+0x168>)
 80046b8:	6813      	ldr	r3, [r2, #0]
 80046ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046be:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80046c0:	f7fc fc3e 	bl	8000f40 <HAL_GetTick>
 80046c4:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046c6:	4b2f      	ldr	r3, [pc, #188]	; (8004784 <RCCEx_PLLSAI2_Config+0x168>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80046ce:	d005      	beq.n	80046dc <RCCEx_PLLSAI2_Config+0xc0>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046d0:	f7fc fc36 	bl	8000f40 <HAL_GetTick>
 80046d4:	1b80      	subs	r0, r0, r6
 80046d6:	2802      	cmp	r0, #2
 80046d8:	d9f5      	bls.n	80046c6 <RCCEx_PLLSAI2_Config+0xaa>
        status = HAL_TIMEOUT;
 80046da:	2403      	movs	r4, #3
    if(status == HAL_OK)
 80046dc:	2c00      	cmp	r4, #0
 80046de:	d1ad      	bne.n	800463c <RCCEx_PLLSAI2_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 80046e0:	bb4f      	cbnz	r7, 8004736 <RCCEx_PLLSAI2_Config+0x11a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046e2:	4828      	ldr	r0, [pc, #160]	; (8004784 <RCCEx_PLLSAI2_Config+0x168>)
 80046e4:	6943      	ldr	r3, [r0, #20]
 80046e6:	4a28      	ldr	r2, [pc, #160]	; (8004788 <RCCEx_PLLSAI2_Config+0x16c>)
 80046e8:	401a      	ands	r2, r3
 80046ea:	68a9      	ldr	r1, [r5, #8]
 80046ec:	68eb      	ldr	r3, [r5, #12]
 80046ee:	06db      	lsls	r3, r3, #27
 80046f0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80046f4:	6869      	ldr	r1, [r5, #4]
 80046f6:	3901      	subs	r1, #1
 80046f8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80046fc:	4313      	orrs	r3, r2
 80046fe:	6143      	str	r3, [r0, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8004700:	4a20      	ldr	r2, [pc, #128]	; (8004784 <RCCEx_PLLSAI2_Config+0x168>)
 8004702:	6813      	ldr	r3, [r2, #0]
 8004704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004708:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800470a:	f7fc fc19 	bl	8000f40 <HAL_GetTick>
 800470e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004710:	4b1c      	ldr	r3, [pc, #112]	; (8004784 <RCCEx_PLLSAI2_Config+0x168>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004718:	d105      	bne.n	8004726 <RCCEx_PLLSAI2_Config+0x10a>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800471a:	f7fc fc11 	bl	8000f40 <HAL_GetTick>
 800471e:	1b80      	subs	r0, r0, r6
 8004720:	2802      	cmp	r0, #2
 8004722:	d9f5      	bls.n	8004710 <RCCEx_PLLSAI2_Config+0xf4>
          status = HAL_TIMEOUT;
 8004724:	2403      	movs	r4, #3
      if(status == HAL_OK)
 8004726:	2c00      	cmp	r4, #0
 8004728:	d188      	bne.n	800463c <RCCEx_PLLSAI2_Config+0x20>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800472a:	4a16      	ldr	r2, [pc, #88]	; (8004784 <RCCEx_PLLSAI2_Config+0x168>)
 800472c:	6953      	ldr	r3, [r2, #20]
 800472e:	69a9      	ldr	r1, [r5, #24]
 8004730:	430b      	orrs	r3, r1
 8004732:	6153      	str	r3, [r2, #20]
 8004734:	e782      	b.n	800463c <RCCEx_PLLSAI2_Config+0x20>
      else if(Divider == DIVIDER_Q_UPDATE)
 8004736:	2f01      	cmp	r7, #1
 8004738:	d011      	beq.n	800475e <RCCEx_PLLSAI2_Config+0x142>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800473a:	4812      	ldr	r0, [pc, #72]	; (8004784 <RCCEx_PLLSAI2_Config+0x168>)
 800473c:	6943      	ldr	r3, [r0, #20]
 800473e:	4a13      	ldr	r2, [pc, #76]	; (800478c <RCCEx_PLLSAI2_Config+0x170>)
 8004740:	401a      	ands	r2, r3
 8004742:	68a9      	ldr	r1, [r5, #8]
 8004744:	696b      	ldr	r3, [r5, #20]
 8004746:	085b      	lsrs	r3, r3, #1
 8004748:	3b01      	subs	r3, #1
 800474a:	065b      	lsls	r3, r3, #25
 800474c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004750:	6869      	ldr	r1, [r5, #4]
 8004752:	3901      	subs	r1, #1
 8004754:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004758:	4313      	orrs	r3, r2
 800475a:	6143      	str	r3, [r0, #20]
 800475c:	e7d0      	b.n	8004700 <RCCEx_PLLSAI2_Config+0xe4>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800475e:	4809      	ldr	r0, [pc, #36]	; (8004784 <RCCEx_PLLSAI2_Config+0x168>)
 8004760:	6943      	ldr	r3, [r0, #20]
 8004762:	4a0b      	ldr	r2, [pc, #44]	; (8004790 <RCCEx_PLLSAI2_Config+0x174>)
 8004764:	401a      	ands	r2, r3
 8004766:	68a9      	ldr	r1, [r5, #8]
 8004768:	692b      	ldr	r3, [r5, #16]
 800476a:	085b      	lsrs	r3, r3, #1
 800476c:	3b01      	subs	r3, #1
 800476e:	055b      	lsls	r3, r3, #21
 8004770:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004774:	6869      	ldr	r1, [r5, #4]
 8004776:	3901      	subs	r1, #1
 8004778:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800477c:	4313      	orrs	r3, r2
 800477e:	6143      	str	r3, [r0, #20]
 8004780:	e7be      	b.n	8004700 <RCCEx_PLLSAI2_Config+0xe4>
 8004782:	bf00      	nop
 8004784:	40021000 	.word	0x40021000
 8004788:	07ff800f 	.word	0x07ff800f
 800478c:	f9ff800f 	.word	0xf9ff800f
 8004790:	ff9f800f 	.word	0xff9f800f

08004794 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004798:	b082      	sub	sp, #8
 800479a:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800479c:	6803      	ldr	r3, [r0, #0]
 800479e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80047a2:	d02c      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x6a>
    switch(PeriphClkInit->Sai1ClockSelection)
 80047a4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80047a6:	2b40      	cmp	r3, #64	; 0x40
 80047a8:	d01a      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 80047aa:	d808      	bhi.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x2a>
 80047ac:	b1fb      	cbz	r3, 80047ee <HAL_RCCEx_PeriphCLKConfig+0x5a>
 80047ae:	2b20      	cmp	r3, #32
 80047b0:	d123      	bne.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x66>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80047b2:	2100      	movs	r1, #0
 80047b4:	3020      	adds	r0, #32
 80047b6:	f7ff ff31 	bl	800461c <RCCEx_PLLSAI2_Config>
 80047ba:	4605      	mov	r5, r0
      break;
 80047bc:	e004      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x34>
    switch(PeriphClkInit->Sai1ClockSelection)
 80047be:	2b60      	cmp	r3, #96	; 0x60
 80047c0:	d001      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80047c2:	2b80      	cmp	r3, #128	; 0x80
 80047c4:	d119      	bne.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x66>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047c6:	2500      	movs	r5, #0
    if(ret == HAL_OK)
 80047c8:	bb85      	cbnz	r5, 800482c <HAL_RCCEx_PeriphCLKConfig+0x98>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047ca:	4a62      	ldr	r2, [pc, #392]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047cc:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80047d0:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80047d4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80047d6:	430b      	orrs	r3, r1
 80047d8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047dc:	462e      	mov	r6, r5
 80047de:	e010      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047e0:	4a5c      	ldr	r2, [pc, #368]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047e2:	68d3      	ldr	r3, [r2, #12]
 80047e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047e8:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047ea:	2500      	movs	r5, #0
      break;
 80047ec:	e7ec      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047ee:	2100      	movs	r1, #0
 80047f0:	3004      	adds	r0, #4
 80047f2:	f7ff fe57 	bl	80044a4 <RCCEx_PLLSAI1_Config>
 80047f6:	4605      	mov	r5, r0
      break;
 80047f8:	e7e6      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      ret = HAL_ERROR;
 80047fa:	2501      	movs	r5, #1
 80047fc:	e7e4      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x34>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047fe:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004800:	4635      	mov	r5, r6
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004802:	6823      	ldr	r3, [r4, #0]
 8004804:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004808:	d02a      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    switch(PeriphClkInit->Sai2ClockSelection)
 800480a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800480c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004810:	d016      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8004812:	d80d      	bhi.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8004814:	2b00      	cmp	r3, #0
 8004816:	d07e      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8004818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800481c:	d10e      	bne.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xa8>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800481e:	2100      	movs	r1, #0
 8004820:	f104 0020 	add.w	r0, r4, #32
 8004824:	f7ff fefa 	bl	800461c <RCCEx_PLLSAI2_Config>
 8004828:	4605      	mov	r5, r0
      break;
 800482a:	e00e      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      status = ret;
 800482c:	462e      	mov	r6, r5
 800482e:	e7e8      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004830:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004834:	d009      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xb6>
 8004836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800483a:	d006      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      ret = HAL_ERROR;
 800483c:	2501      	movs	r5, #1
 800483e:	e004      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004840:	4a44      	ldr	r2, [pc, #272]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004842:	68d3      	ldr	r3, [r2, #12]
 8004844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004848:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 800484a:	2d00      	cmp	r5, #0
 800484c:	d169      	bne.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x18e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800484e:	4a41      	ldr	r2, [pc, #260]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004850:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004854:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004858:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800485a:	430b      	orrs	r3, r1
 800485c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004866:	d07e      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004868:	4b3a      	ldr	r3, [pc, #232]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800486a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004870:	d159      	bne.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004872:	2301      	movs	r3, #1
 8004874:	2b00      	cmp	r3, #0
 8004876:	d058      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x196>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004878:	4b36      	ldr	r3, [pc, #216]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800487a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800487c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004880:	659a      	str	r2, [r3, #88]	; 0x58
 8004882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004888:	9301      	str	r3, [sp, #4]
 800488a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800488c:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004890:	4a31      	ldr	r2, [pc, #196]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004892:	6813      	ldr	r3, [r2, #0]
 8004894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004898:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800489a:	f7fc fb51 	bl	8000f40 <HAL_GetTick>
 800489e:	4607      	mov	r7, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048a0:	4b2d      	ldr	r3, [pc, #180]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80048a8:	d105      	bne.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048aa:	f7fc fb49 	bl	8000f40 <HAL_GetTick>
 80048ae:	1bc0      	subs	r0, r0, r7
 80048b0:	2802      	cmp	r0, #2
 80048b2:	d9f5      	bls.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        ret = HAL_TIMEOUT;
 80048b4:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 80048b6:	2d00      	cmp	r5, #0
 80048b8:	d150      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048ba:	4b26      	ldr	r3, [pc, #152]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80048bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048c0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80048c4:	d016      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80048c6:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d012      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048ce:	4a21      	ldr	r2, [pc, #132]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80048d0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80048d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80048d8:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80048dc:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80048e0:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048e4:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80048e8:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80048ec:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80048f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048f4:	f013 0f01 	tst.w	r3, #1
 80048f8:	d11a      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      if(ret == HAL_OK)
 80048fa:	2d00      	cmp	r5, #0
 80048fc:	f040 816a 	bne.w	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x440>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004900:	4a14      	ldr	r2, [pc, #80]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004902:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800490a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800490e:	430b      	orrs	r3, r1
 8004910:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004914:	e023      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004916:	2100      	movs	r1, #0
 8004918:	1d20      	adds	r0, r4, #4
 800491a:	f7ff fdc3 	bl	80044a4 <RCCEx_PLLSAI1_Config>
 800491e:	4605      	mov	r5, r0
      break;
 8004920:	e793      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      status = ret;
 8004922:	462e      	mov	r6, r5
 8004924:	e79c      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004926:	2300      	movs	r3, #0
 8004928:	e7a4      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    FlagStatus       pwrclkchanged = RESET;
 800492a:	f04f 0800 	mov.w	r8, #0
 800492e:	e7af      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xfc>
        tickstart = HAL_GetTick();
 8004930:	f7fc fb06 	bl	8000f40 <HAL_GetTick>
 8004934:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004936:	4b07      	ldr	r3, [pc, #28]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493c:	f013 0f02 	tst.w	r3, #2
 8004940:	d1db      	bne.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x166>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004942:	f7fc fafd 	bl	8000f40 <HAL_GetTick>
 8004946:	1bc0      	subs	r0, r0, r7
 8004948:	f241 3388 	movw	r3, #5000	; 0x1388
 800494c:	4298      	cmp	r0, r3
 800494e:	d9f2      	bls.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
            ret = HAL_TIMEOUT;
 8004950:	2503      	movs	r5, #3
 8004952:	e7d2      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004954:	40021000 	.word	0x40021000
 8004958:	40007000 	.word	0x40007000
      status = ret;
 800495c:	462e      	mov	r6, r5
    if(pwrclkchanged == SET)
 800495e:	f1b8 0f00 	cmp.w	r8, #0
 8004962:	f040 8139 	bne.w	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004966:	6823      	ldr	r3, [r4, #0]
 8004968:	f013 0f01 	tst.w	r3, #1
 800496c:	d008      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800496e:	4ac0      	ldr	r2, [pc, #768]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004970:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004974:	f023 0303 	bic.w	r3, r3, #3
 8004978:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800497a:	430b      	orrs	r3, r1
 800497c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004980:	6823      	ldr	r3, [r4, #0]
 8004982:	f013 0f02 	tst.w	r3, #2
 8004986:	d008      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004988:	4ab9      	ldr	r2, [pc, #740]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800498a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800498e:	f023 030c 	bic.w	r3, r3, #12
 8004992:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004994:	430b      	orrs	r3, r1
 8004996:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	f013 0f04 	tst.w	r3, #4
 80049a0:	d008      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049a2:	4ab3      	ldr	r2, [pc, #716]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80049a4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80049a8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80049ac:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80049ae:	430b      	orrs	r3, r1
 80049b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049b4:	6823      	ldr	r3, [r4, #0]
 80049b6:	f013 0f08 	tst.w	r3, #8
 80049ba:	d008      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049bc:	4aac      	ldr	r2, [pc, #688]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80049be:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80049c2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80049c6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80049c8:	430b      	orrs	r3, r1
 80049ca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049ce:	6823      	ldr	r3, [r4, #0]
 80049d0:	f013 0f10 	tst.w	r3, #16
 80049d4:	d008      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049d6:	4aa6      	ldr	r2, [pc, #664]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80049d8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80049dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049e0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80049e2:	430b      	orrs	r3, r1
 80049e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	f013 0f20 	tst.w	r3, #32
 80049ee:	d008      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049f0:	4a9f      	ldr	r2, [pc, #636]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80049f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80049f6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80049fa:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80049fc:	430b      	orrs	r3, r1
 80049fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004a08:	d008      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x288>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a0a:	4a99      	ldr	r2, [pc, #612]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004a0c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004a10:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8004a14:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004a16:	430b      	orrs	r3, r1
 8004a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a1c:	6823      	ldr	r3, [r4, #0]
 8004a1e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004a22:	d008      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a24:	4a92      	ldr	r2, [pc, #584]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004a26:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004a2a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004a2e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8004a30:	430b      	orrs	r3, r1
 8004a32:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a36:	6823      	ldr	r3, [r4, #0]
 8004a38:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004a3c:	d008      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a3e:	4a8c      	ldr	r2, [pc, #560]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004a40:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004a44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004a48:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004a4a:	430b      	orrs	r3, r1
 8004a4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a50:	6823      	ldr	r3, [r4, #0]
 8004a52:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004a56:	d008      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a58:	4a85      	ldr	r2, [pc, #532]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004a5a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004a5e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004a62:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004a64:	430b      	orrs	r3, r1
 8004a66:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004a70:	d008      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a72:	4a7f      	ldr	r2, [pc, #508]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004a74:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004a78:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004a7c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004a7e:	430b      	orrs	r3, r1
 8004a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a84:	6823      	ldr	r3, [r4, #0]
 8004a86:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004a8a:	d008      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x30a>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a8c:	4a78      	ldr	r2, [pc, #480]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004a8e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004a92:	f023 0303 	bic.w	r3, r3, #3
 8004a96:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004a98:	430b      	orrs	r3, r1
 8004a9a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a9e:	6823      	ldr	r3, [r4, #0]
 8004aa0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004aa4:	d011      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x336>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004aa6:	4a72      	ldr	r2, [pc, #456]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004aa8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004aac:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004ab0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004ab2:	430b      	orrs	r3, r1
 8004ab4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ab8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004aba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004abe:	f000 8091 	beq.w	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x450>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004ac2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ac6:	f000 8092 	beq.w	8004bee <HAL_RCCEx_PeriphCLKConfig+0x45a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004ad0:	d020      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x380>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ad2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8004ad4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ad8:	f000 8093 	beq.w	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x46e>
 8004adc:	4a64      	ldr	r2, [pc, #400]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004ade:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004ae2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ae6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004aea:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004aee:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004af2:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004af4:	430b      	orrs	r3, r1
 8004af6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004afa:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8004afc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b00:	f000 8087 	beq.w	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x47e>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004b04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b08:	f000 8089 	beq.w	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b10:	f000 808b 	beq.w	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x496>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b14:	6823      	ldr	r3, [r4, #0]
 8004b16:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004b1a:	d011      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b1c:	4a54      	ldr	r2, [pc, #336]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004b1e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004b22:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004b26:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004b28:	430b      	orrs	r3, r1
 8004b2a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b2e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004b30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b34:	f000 8083 	beq.w	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b3c:	f000 8084 	beq.w	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b40:	6823      	ldr	r3, [r4, #0]
 8004b42:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004b46:	d00e      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b48:	4a49      	ldr	r2, [pc, #292]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004b4a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004b4e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004b52:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8004b56:	430b      	orrs	r3, r1
 8004b58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b5c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004b60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b64:	d07a      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b66:	6823      	ldr	r3, [r4, #0]
 8004b68:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004b6c:	d009      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b6e:	4a40      	ldr	r2, [pc, #256]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004b70:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004b74:	f023 0304 	bic.w	r3, r3, #4
 8004b78:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8004b7c:	430b      	orrs	r3, r1
 8004b7e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004b82:	6823      	ldr	r3, [r4, #0]
 8004b84:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8004b88:	d009      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004b8a:	4a39      	ldr	r2, [pc, #228]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004b8c:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004b90:	f023 0318 	bic.w	r3, r3, #24
 8004b94:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8004b98:	430b      	orrs	r3, r1
 8004b9a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b9e:	6823      	ldr	r3, [r4, #0]
 8004ba0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004ba4:	d166      	bne.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004ba6:	6823      	ldr	r3, [r4, #0]
 8004ba8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004bac:	d00e      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x438>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004bae:	4a30      	ldr	r2, [pc, #192]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004bb0:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004bb4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004bb8:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8004bbc:	430b      	orrs	r3, r1
 8004bbe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004bc2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004bc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bca:	d07c      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x532>
}
 8004bcc:	4630      	mov	r0, r6
 8004bce:	b002      	add	sp, #8
 8004bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 8004bd4:	462e      	mov	r6, r5
 8004bd6:	e6c2      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bd8:	4a25      	ldr	r2, [pc, #148]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004bda:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004be0:	6593      	str	r3, [r2, #88]	; 0x58
 8004be2:	e6c0      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004be4:	68d3      	ldr	r3, [r2, #12]
 8004be6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bea:	60d3      	str	r3, [r2, #12]
 8004bec:	e76d      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x336>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bee:	2101      	movs	r1, #1
 8004bf0:	1d20      	adds	r0, r4, #4
 8004bf2:	f7ff fc57 	bl	80044a4 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8004bf6:	4605      	mov	r5, r0
 8004bf8:	2800      	cmp	r0, #0
 8004bfa:	f43f af66 	beq.w	8004aca <HAL_RCCEx_PeriphCLKConfig+0x336>
          status = ret;
 8004bfe:	4606      	mov	r6, r0
 8004c00:	e763      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x336>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c02:	4a1b      	ldr	r2, [pc, #108]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004c04:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c0c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004c10:	e773      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x366>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c12:	4a17      	ldr	r2, [pc, #92]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004c14:	68d3      	ldr	r3, [r2, #12]
 8004c16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c1a:	60d3      	str	r3, [r2, #12]
 8004c1c:	e77a      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x380>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c1e:	4a14      	ldr	r2, [pc, #80]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004c20:	68d3      	ldr	r3, [r2, #12]
 8004c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c26:	60d3      	str	r3, [r2, #12]
 8004c28:	e774      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x380>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c2a:	2101      	movs	r1, #1
 8004c2c:	1d20      	adds	r0, r4, #4
 8004c2e:	f7ff fc39 	bl	80044a4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8004c32:	4605      	mov	r5, r0
 8004c34:	2800      	cmp	r0, #0
 8004c36:	f43f af6d 	beq.w	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x380>
        status = ret;
 8004c3a:	4606      	mov	r6, r0
 8004c3c:	e76a      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x380>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c3e:	68d3      	ldr	r3, [r2, #12]
 8004c40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c44:	60d3      	str	r3, [r2, #12]
 8004c46:	e77b      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c48:	2101      	movs	r1, #1
 8004c4a:	1d20      	adds	r0, r4, #4
 8004c4c:	f7ff fc2a 	bl	80044a4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8004c50:	4605      	mov	r5, r0
 8004c52:	2800      	cmp	r0, #0
 8004c54:	f43f af74 	beq.w	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
        status = ret;
 8004c58:	4606      	mov	r6, r0
 8004c5a:	e771      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c5c:	2102      	movs	r1, #2
 8004c5e:	1d20      	adds	r0, r4, #4
 8004c60:	f7ff fc20 	bl	80044a4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8004c64:	4605      	mov	r5, r0
 8004c66:	2800      	cmp	r0, #0
 8004c68:	f43f af7d 	beq.w	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
        status = ret;
 8004c6c:	4606      	mov	r6, r0
 8004c6e:	e77a      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8004c70:	40021000 	.word	0x40021000
    __HAL_RCC_PLLSAI2_DISABLE();
 8004c74:	4a16      	ldr	r2, [pc, #88]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004c76:	6813      	ldr	r3, [r2, #0]
 8004c78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c7c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004c7e:	f7fc f95f 	bl	8000f40 <HAL_GetTick>
 8004c82:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c84:	4b12      	ldr	r3, [pc, #72]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004c8c:	d005      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x506>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c8e:	f7fc f957 	bl	8000f40 <HAL_GetTick>
 8004c92:	1bc0      	subs	r0, r0, r7
 8004c94:	2802      	cmp	r0, #2
 8004c96:	d9f5      	bls.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
        ret = HAL_TIMEOUT;
 8004c98:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 8004c9a:	b11d      	cbz	r5, 8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x510>
    if(ret != HAL_OK)
 8004c9c:	2d00      	cmp	r5, #0
 8004c9e:	d082      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x412>
      status = ret;
 8004ca0:	462e      	mov	r6, r5
 8004ca2:	e780      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x412>
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004ca4:	4a0a      	ldr	r2, [pc, #40]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004ca6:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004caa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004cae:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8004cb2:	430b      	orrs	r3, r1
 8004cb4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004cb8:	2102      	movs	r1, #2
 8004cba:	f104 0020 	add.w	r0, r4, #32
 8004cbe:	f7ff fcad 	bl	800461c <RCCEx_PLLSAI2_Config>
 8004cc2:	4605      	mov	r5, r0
 8004cc4:	e7ea      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x508>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cc6:	68d3      	ldr	r3, [r2, #12]
 8004cc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ccc:	60d3      	str	r3, [r2, #12]
 8004cce:	e77d      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x438>
 8004cd0:	40021000 	.word	0x40021000

08004cd4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004cd4:	b538      	push	{r3, r4, r5, lr}
 8004cd6:	4604      	mov	r4, r0

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004cd8:	6802      	ldr	r2, [r0, #0]
 8004cda:	68d3      	ldr	r3, [r2, #12]
 8004cdc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ce0:	60d3      	str	r3, [r2, #12]
#endif

  tickstart = HAL_GetTick();
 8004ce2:	f7fc f92d 	bl	8000f40 <HAL_GetTick>
 8004ce6:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx)
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004ce8:	6823      	ldr	r3, [r4, #0]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f013 0f20 	tst.w	r3, #32
 8004cf0:	d107      	bne.n	8004d02 <HAL_RTC_WaitForSynchro+0x2e>
#endif
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004cf2:	f7fc f925 	bl	8000f40 <HAL_GetTick>
 8004cf6:	1b40      	subs	r0, r0, r5
 8004cf8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004cfc:	d9f4      	bls.n	8004ce8 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8004cfe:	2003      	movs	r0, #3
    }
  }

  return HAL_OK;
}
 8004d00:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8004d02:	2000      	movs	r0, #0
 8004d04:	bd38      	pop	{r3, r4, r5, pc}

08004d06 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004d06:	b538      	push	{r3, r4, r5, lr}
        return HAL_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004d08:	6803      	ldr	r3, [r0, #0]
 8004d0a:	68da      	ldr	r2, [r3, #12]
 8004d0c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004d10:	d001      	beq.n	8004d16 <RTC_EnterInitMode+0x10>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  return HAL_OK;
 8004d12:	2000      	movs	r0, #0
 8004d14:	bd38      	pop	{r3, r4, r5, pc}
 8004d16:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004d18:	f04f 32ff 	mov.w	r2, #4294967295
 8004d1c:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8004d1e:	f7fc f90f 	bl	8000f40 <HAL_GetTick>
 8004d22:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004d24:	6823      	ldr	r3, [r4, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004d2c:	d107      	bne.n	8004d3e <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004d2e:	f7fc f907 	bl	8000f40 <HAL_GetTick>
 8004d32:	1b40      	subs	r0, r0, r5
 8004d34:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004d38:	d9f4      	bls.n	8004d24 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8004d3a:	2003      	movs	r0, #3
}
 8004d3c:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8004d3e:	2000      	movs	r0, #0
 8004d40:	bd38      	pop	{r3, r4, r5, pc}

08004d42 <HAL_RTC_Init>:
  if(hrtc != NULL)
 8004d42:	2800      	cmp	r0, #0
 8004d44:	d067      	beq.n	8004e16 <HAL_RTC_Init+0xd4>
{
 8004d46:	b538      	push	{r3, r4, r5, lr}
 8004d48:	4604      	mov	r4, r0
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004d4a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d045      	beq.n	8004dde <HAL_RTC_Init+0x9c>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004d52:	2302      	movs	r3, #2
 8004d54:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	22ca      	movs	r2, #202	; 0xca
 8004d5c:	625a      	str	r2, [r3, #36]	; 0x24
 8004d5e:	6823      	ldr	r3, [r4, #0]
 8004d60:	2253      	movs	r2, #83	; 0x53
 8004d62:	625a      	str	r2, [r3, #36]	; 0x24
    if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004d64:	4620      	mov	r0, r4
 8004d66:	f7ff ffce 	bl	8004d06 <RTC_EnterInitMode>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	2800      	cmp	r0, #0
 8004d6e:	d13b      	bne.n	8004de8 <HAL_RTC_Init+0xa6>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004d70:	6821      	ldr	r1, [r4, #0]
 8004d72:	688b      	ldr	r3, [r1, #8]
 8004d74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004d78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d7c:	608b      	str	r3, [r1, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004d7e:	6820      	ldr	r0, [r4, #0]
 8004d80:	6881      	ldr	r1, [r0, #8]
 8004d82:	6863      	ldr	r3, [r4, #4]
 8004d84:	6925      	ldr	r5, [r4, #16]
 8004d86:	432b      	orrs	r3, r5
 8004d88:	69a5      	ldr	r5, [r4, #24]
 8004d8a:	432b      	orrs	r3, r5
 8004d8c:	430b      	orrs	r3, r1
 8004d8e:	6083      	str	r3, [r0, #8]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004d90:	6823      	ldr	r3, [r4, #0]
 8004d92:	68e1      	ldr	r1, [r4, #12]
 8004d94:	6119      	str	r1, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004d96:	6821      	ldr	r1, [r4, #0]
 8004d98:	690b      	ldr	r3, [r1, #16]
 8004d9a:	68a0      	ldr	r0, [r4, #8]
 8004d9c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004da0:	610b      	str	r3, [r1, #16]
      CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004da2:	6821      	ldr	r1, [r4, #0]
 8004da4:	68cb      	ldr	r3, [r1, #12]
 8004da6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004daa:	60cb      	str	r3, [r1, #12]
      if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004dac:	6823      	ldr	r3, [r4, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f013 0f20 	tst.w	r3, #32
 8004db4:	d021      	beq.n	8004dfa <HAL_RTC_Init+0xb8>
      if (status == HAL_OK)
 8004db6:	b9f2      	cbnz	r2, 8004df6 <HAL_RTC_Init+0xb4>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004db8:	6821      	ldr	r1, [r4, #0]
 8004dba:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8004dbc:	f023 0303 	bic.w	r3, r3, #3
 8004dc0:	64cb      	str	r3, [r1, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004dc2:	6820      	ldr	r0, [r4, #0]
 8004dc4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004dc6:	69e1      	ldr	r1, [r4, #28]
 8004dc8:	6965      	ldr	r5, [r4, #20]
 8004dca:	4329      	orrs	r1, r5
 8004dcc:	430b      	orrs	r3, r1
 8004dce:	64c3      	str	r3, [r0, #76]	; 0x4c
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dd0:	6823      	ldr	r3, [r4, #0]
 8004dd2:	21ff      	movs	r1, #255	; 0xff
 8004dd4:	6259      	str	r1, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_READY;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 8004ddc:	e00b      	b.n	8004df6 <HAL_RTC_Init+0xb4>
      hrtc->Lock = HAL_UNLOCKED;
 8004dde:	f880 3020 	strb.w	r3, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 8004de2:	f00a faa9 	bl	800f338 <HAL_RTC_MspInit>
 8004de6:	e7b4      	b.n	8004d52 <HAL_RTC_Init+0x10>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004de8:	6823      	ldr	r3, [r4, #0]
 8004dea:	22ff      	movs	r2, #255	; 0xff
 8004dec:	625a      	str	r2, [r3, #36]	; 0x24
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004dee:	2304      	movs	r3, #4
 8004df0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
      status = HAL_ERROR;
 8004df4:	2201      	movs	r2, #1
}
 8004df6:	4610      	mov	r0, r2
 8004df8:	bd38      	pop	{r3, r4, r5, pc}
        if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004dfa:	4620      	mov	r0, r4
 8004dfc:	f7ff ff6a 	bl	8004cd4 <HAL_RTC_WaitForSynchro>
 8004e00:	4602      	mov	r2, r0
 8004e02:	2800      	cmp	r0, #0
 8004e04:	d0d7      	beq.n	8004db6 <HAL_RTC_Init+0x74>
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	22ff      	movs	r2, #255	; 0xff
 8004e0a:	625a      	str	r2, [r3, #36]	; 0x24
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004e0c:	2304      	movs	r3, #4
 8004e0e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
          status = HAL_ERROR;
 8004e12:	2201      	movs	r2, #1
 8004e14:	e7cf      	b.n	8004db6 <HAL_RTC_Init+0x74>
  HAL_StatusTypeDef status = HAL_ERROR;
 8004e16:	2201      	movs	r2, #1
}
 8004e18:	4610      	mov	r0, r2
 8004e1a:	4770      	bx	lr

08004e1c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 8004e22:	2300      	movs	r3, #0
 8004e24:	9301      	str	r3, [sp, #4]
  uint32_t response = 0, validvoltage = 0;
  uint32_t errorstate;
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8004e26:	f7fc f88b 	bl	8000f40 <HAL_GetTick>
 8004e2a:	4606      	mov	r6, r0
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004e2c:	6820      	ldr	r0, [r4, #0]
 8004e2e:	f002 ff74 	bl	8007d1a <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e32:	4605      	mov	r5, r0
 8004e34:	b110      	cbz	r0, 8004e3c <SD_PowerON+0x20>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  
  return HAL_SD_ERROR_NONE;
}
 8004e36:	4628      	mov	r0, r5
 8004e38:	b003      	add	sp, #12
 8004e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004e3c:	6820      	ldr	r0, [r4, #0]
 8004e3e:	f002 ff7f 	bl	8007d40 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e42:	b150      	cbz	r0, 8004e5a <SD_PowerON+0x3e>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004e44:	2300      	movs	r3, #0
 8004e46:	6423      	str	r3, [r4, #64]	; 0x40
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004e48:	2100      	movs	r1, #0
 8004e4a:	6820      	ldr	r0, [r4, #0]
 8004e4c:	f002 ff90 	bl	8007d70 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e50:	4607      	mov	r7, r0
 8004e52:	b128      	cbz	r0, 8004e60 <SD_PowerON+0x44>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004e54:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8004e58:	e7ed      	b.n	8004e36 <SD_PowerON+0x1a>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	6423      	str	r3, [r4, #64]	; 0x40
 8004e5e:	e7f3      	b.n	8004e48 <SD_PowerON+0x2c>
 8004e60:	4605      	mov	r5, r0
 8004e62:	e002      	b.n	8004e6a <SD_PowerON+0x4e>
      count++;
 8004e64:	9b01      	ldr	r3, [sp, #4]
 8004e66:	3301      	adds	r3, #1
 8004e68:	9301      	str	r3, [sp, #4]
    while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004e6a:	9a01      	ldr	r2, [sp, #4]
 8004e6c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d816      	bhi.n	8004ea2 <SD_PowerON+0x86>
 8004e74:	b9ad      	cbnz	r5, 8004ea2 <SD_PowerON+0x86>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004e76:	2100      	movs	r1, #0
 8004e78:	6820      	ldr	r0, [r4, #0]
 8004e7a:	f002 ff79 	bl	8007d70 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8004e7e:	4605      	mov	r5, r0
 8004e80:	2800      	cmp	r0, #0
 8004e82:	d1d8      	bne.n	8004e36 <SD_PowerON+0x1a>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004e84:	493c      	ldr	r1, [pc, #240]	; (8004f78 <SD_PowerON+0x15c>)
 8004e86:	6820      	ldr	r0, [r4, #0]
 8004e88:	f002 ff8b 	bl	8007da2 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8004e8c:	4605      	mov	r5, r0
 8004e8e:	2800      	cmp	r0, #0
 8004e90:	d16a      	bne.n	8004f68 <SD_PowerON+0x14c>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004e92:	2100      	movs	r1, #0
 8004e94:	6820      	ldr	r0, [r4, #0]
 8004e96:	f002 fdf8 	bl	8007a8a <SDMMC_GetResponse>
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004e9a:	0fc3      	lsrs	r3, r0, #31
 8004e9c:	d0e2      	beq.n	8004e64 <SD_PowerON+0x48>
 8004e9e:	461d      	mov	r5, r3
 8004ea0:	e7e0      	b.n	8004e64 <SD_PowerON+0x48>
    if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004ea2:	9a01      	ldr	r2, [sp, #4]
 8004ea4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d902      	bls.n	8004eb2 <SD_PowerON+0x96>
      return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004eac:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8004eb0:	e7c1      	b.n	8004e36 <SD_PowerON+0x1a>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004eb2:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004eb6:	d05a      	beq.n	8004f6e <SD_PowerON+0x152>
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	63e3      	str	r3, [r4, #60]	; 0x3c
      if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8004ebc:	69a3      	ldr	r3, [r4, #24]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d001      	beq.n	8004ec6 <SD_PowerON+0xaa>
  return HAL_SD_ERROR_NONE;
 8004ec2:	463d      	mov	r5, r7
 8004ec4:	e7b7      	b.n	8004e36 <SD_PowerON+0x1a>
        if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8004ec6:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8004eca:	d101      	bne.n	8004ed0 <SD_PowerON+0xb4>
  return HAL_SD_ERROR_NONE;
 8004ecc:	463d      	mov	r5, r7
 8004ece:	e7b2      	b.n	8004e36 <SD_PowerON+0x1a>
           hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8004ed0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ed4:	65e3      	str	r3, [r4, #92]	; 0x5c
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8004ed6:	6822      	ldr	r2, [r4, #0]
 8004ed8:	6813      	ldr	r3, [r2, #0]
 8004eda:	f043 0303 	orr.w	r3, r3, #3
 8004ede:	6013      	str	r3, [r2, #0]
          errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8004ee0:	6820      	ldr	r0, [r4, #0]
 8004ee2:	f003 f804 	bl	8007eee <SDMMC_CmdVoltageSwitch>
          if(errorstate != HAL_SD_ERROR_NONE)
 8004ee6:	4605      	mov	r5, r0
 8004ee8:	2800      	cmp	r0, #0
 8004eea:	d1a4      	bne.n	8004e36 <SD_PowerON+0x1a>
          while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8004eec:	6823      	ldr	r3, [r4, #0]
 8004eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ef0:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
 8004ef4:	d108      	bne.n	8004f08 <SD_PowerON+0xec>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004ef6:	f7fc f823 	bl	8000f40 <HAL_GetTick>
 8004efa:	1b80      	subs	r0, r0, r6
 8004efc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004f00:	d1f4      	bne.n	8004eec <SD_PowerON+0xd0>
              return HAL_SD_ERROR_TIMEOUT;
 8004f02:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8004f06:	e796      	b.n	8004e36 <SD_PowerON+0x1a>
          hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8004f08:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004f0c:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8004f0e:	6823      	ldr	r3, [r4, #0]
 8004f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f12:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004f16:	d102      	bne.n	8004f1e <SD_PowerON+0x102>
            return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8004f18:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8004f1c:	e78b      	b.n	8004e36 <SD_PowerON+0x1a>
            HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8004f1e:	2001      	movs	r0, #1
 8004f20:	f000 fb2e 	bl	8005580 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
            hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8004f24:	6822      	ldr	r2, [r4, #0]
 8004f26:	6813      	ldr	r3, [r2, #0]
 8004f28:	f043 0302 	orr.w	r3, r3, #2
 8004f2c:	6013      	str	r3, [r2, #0]
            while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f32:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004f36:	d108      	bne.n	8004f4a <SD_PowerON+0x12e>
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004f38:	f7fc f802 	bl	8000f40 <HAL_GetTick>
 8004f3c:	1b80      	subs	r0, r0, r6
 8004f3e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004f42:	d1f4      	bne.n	8004f2e <SD_PowerON+0x112>
                return HAL_SD_ERROR_TIMEOUT;
 8004f44:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8004f48:	e775      	b.n	8004e36 <SD_PowerON+0x1a>
            hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8004f4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f4e:	639a      	str	r2, [r3, #56]	; 0x38
            if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8004f50:	6823      	ldr	r3, [r4, #0]
 8004f52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f54:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8004f58:	d10b      	bne.n	8004f72 <SD_PowerON+0x156>
            hsd->Instance->POWER = 0x13U; 
 8004f5a:	2213      	movs	r2, #19
 8004f5c:	601a      	str	r2, [r3, #0]
            hsd->Instance->ICR = 0xFFFFFFFFU;
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	f04f 32ff 	mov.w	r2, #4294967295
 8004f64:	639a      	str	r2, [r3, #56]	; 0x38
 8004f66:	e766      	b.n	8004e36 <SD_PowerON+0x1a>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004f68:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8004f6c:	e763      	b.n	8004e36 <SD_PowerON+0x1a>
  return HAL_SD_ERROR_NONE;
 8004f6e:	463d      	mov	r5, r7
 8004f70:	e761      	b.n	8004e36 <SD_PowerON+0x1a>
              return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004f72:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8004f76:	e75e      	b.n	8004e36 <SD_PowerON+0x1a>
 8004f78:	c1100000 	.word	0xc1100000

08004f7c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f80:	b088      	sub	sp, #32
 8004f82:	4604      	mov	r4, r0
 8004f84:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004f86:	f7fb ffdb 	bl	8000f40 <HAL_GetTick>
 8004f8a:	4606      	mov	r6, r0
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	9301      	str	r3, [sp, #4]
  uint32_t *scr = pSCR;
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8004f92:	2108      	movs	r1, #8
 8004f94:	6820      	ldr	r0, [r4, #0]
 8004f96:	f002 fe8e 	bl	8007cb6 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f9a:	4605      	mov	r5, r0
 8004f9c:	b118      	cbz	r0, 8004fa6 <SD_FindSCR+0x2a>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
    
  }

  return HAL_SD_ERROR_NONE;
}
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	b008      	add	sp, #32
 8004fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8004fa6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004fa8:	0409      	lsls	r1, r1, #16
 8004faa:	6820      	ldr	r0, [r4, #0]
 8004fac:	f002 fee0 	bl	8007d70 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004fb0:	4605      	mov	r5, r0
 8004fb2:	2800      	cmp	r0, #0
 8004fb4:	d1f3      	bne.n	8004f9e <SD_FindSCR+0x22>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8004fba:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8;
 8004fbc:	2308      	movs	r3, #8
 8004fbe:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004fc0:	2330      	movs	r3, #48	; 0x30
 8004fc2:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004fd0:	a902      	add	r1, sp, #8
 8004fd2:	6820      	ldr	r0, [r4, #0]
 8004fd4:	f002 fe5a 	bl	8007c8c <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004fd8:	6820      	ldr	r0, [r4, #0]
 8004fda:	f002 ff11 	bl	8007e00 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004fde:	4605      	mov	r5, r0
 8004fe0:	2800      	cmp	r0, #0
 8004fe2:	d1dc      	bne.n	8004f9e <SD_FindSCR+0x22>
 8004fe4:	4680      	mov	r8, r0
 8004fe6:	e005      	b.n	8004ff4 <SD_FindSCR+0x78>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004fe8:	f7fb ffaa 	bl	8000f40 <HAL_GetTick>
 8004fec:	1b80      	subs	r0, r0, r6
 8004fee:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004ff2:	d048      	beq.n	8005086 <SD_FindSCR+0x10a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8004ff4:	6820      	ldr	r0, [r4, #0]
 8004ff6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8004ff8:	f240 532a 	movw	r3, #1322	; 0x52a
 8004ffc:	421a      	tst	r2, r3
 8004ffe:	d110      	bne.n	8005022 <SD_FindSCR+0xa6>
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8005000:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005002:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005006:	d1ef      	bne.n	8004fe8 <SD_FindSCR+0x6c>
 8005008:	f1b8 0f00 	cmp.w	r8, #0
 800500c:	d1ec      	bne.n	8004fe8 <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800500e:	f002 fd15 	bl	8007a3c <SDMMC_ReadFIFO>
 8005012:	9000      	str	r0, [sp, #0]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8005014:	6820      	ldr	r0, [r4, #0]
 8005016:	f002 fd11 	bl	8007a3c <SDMMC_ReadFIFO>
 800501a:	9001      	str	r0, [sp, #4]
      index++;
 800501c:	f108 0801 	add.w	r8, r8, #1
 8005020:	e7e2      	b.n	8004fe8 <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005022:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005024:	f013 0f08 	tst.w	r3, #8
 8005028:	d002      	beq.n	8005030 <SD_FindSCR+0xb4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800502a:	2508      	movs	r5, #8
 800502c:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800502e:	e7b6      	b.n	8004f9e <SD_FindSCR+0x22>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005030:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005032:	f013 0f02 	tst.w	r3, #2
 8005036:	d002      	beq.n	800503e <SD_FindSCR+0xc2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005038:	2502      	movs	r5, #2
 800503a:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800503c:	e7af      	b.n	8004f9e <SD_FindSCR+0x22>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800503e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005040:	f013 0f20 	tst.w	r3, #32
 8005044:	d002      	beq.n	800504c <SD_FindSCR+0xd0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005046:	2520      	movs	r5, #32
 8005048:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 800504a:	e7a8      	b.n	8004f9e <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800504c:	4b0f      	ldr	r3, [pc, #60]	; (800508c <SD_FindSCR+0x110>)
 800504e:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005050:	9a01      	ldr	r2, [sp, #4]
 8005052:	0213      	lsls	r3, r2, #8
 8005054:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005058:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800505c:	0a11      	lsrs	r1, r2, #8
 800505e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005062:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005064:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005068:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800506a:	9a00      	ldr	r2, [sp, #0]
 800506c:	0213      	lsls	r3, r2, #8
 800506e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005072:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005076:	0a11      	lsrs	r1, r2, #8
 8005078:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800507c:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800507e:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005082:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 8005084:	e78b      	b.n	8004f9e <SD_FindSCR+0x22>
      return HAL_SD_ERROR_TIMEOUT;
 8005086:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800508a:	e788      	b.n	8004f9e <SD_FindSCR+0x22>
 800508c:	18000f3a 	.word	0x18000f3a

08005090 <SD_WideBus_Enable>:
{
 8005090:	b510      	push	{r4, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	4604      	mov	r4, r0
  uint32_t scr[2] = {0, 0};
 8005096:	2100      	movs	r1, #0
 8005098:	9100      	str	r1, [sp, #0]
 800509a:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800509c:	6800      	ldr	r0, [r0, #0]
 800509e:	f002 fcf4 	bl	8007a8a <SDMMC_GetResponse>
 80050a2:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 80050a6:	d004      	beq.n	80050b2 <SD_WideBus_Enable+0x22>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80050a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
}   
 80050ac:	4618      	mov	r0, r3
 80050ae:	b002      	add	sp, #8
 80050b0:	bd10      	pop	{r4, pc}
  errorstate = SD_FindSCR(hsd, scr);
 80050b2:	4669      	mov	r1, sp
 80050b4:	4620      	mov	r0, r4
 80050b6:	f7ff ff61 	bl	8004f7c <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80050ba:	4603      	mov	r3, r0
 80050bc:	2800      	cmp	r0, #0
 80050be:	d1f5      	bne.n	80050ac <SD_WideBus_Enable+0x1c>
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80050c0:	9b01      	ldr	r3, [sp, #4]
 80050c2:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80050c6:	d102      	bne.n	80050ce <SD_WideBus_Enable+0x3e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80050c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80050cc:	e7ee      	b.n	80050ac <SD_WideBus_Enable+0x1c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80050ce:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80050d0:	0409      	lsls	r1, r1, #16
 80050d2:	6820      	ldr	r0, [r4, #0]
 80050d4:	f002 fe4c 	bl	8007d70 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80050d8:	4603      	mov	r3, r0
 80050da:	2800      	cmp	r0, #0
 80050dc:	d1e6      	bne.n	80050ac <SD_WideBus_Enable+0x1c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 80050de:	2102      	movs	r1, #2
 80050e0:	6820      	ldr	r0, [r4, #0]
 80050e2:	f002 fe74 	bl	8007dce <SDMMC_CmdBusWidth>
 80050e6:	4603      	mov	r3, r0
 80050e8:	e7e0      	b.n	80050ac <SD_WideBus_Enable+0x1c>

080050ea <SD_WideBus_Disable>:
{
 80050ea:	b510      	push	{r4, lr}
 80050ec:	b082      	sub	sp, #8
 80050ee:	4604      	mov	r4, r0
  uint32_t scr[2] = {0, 0};
 80050f0:	2100      	movs	r1, #0
 80050f2:	9100      	str	r1, [sp, #0]
 80050f4:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80050f6:	6800      	ldr	r0, [r0, #0]
 80050f8:	f002 fcc7 	bl	8007a8a <SDMMC_GetResponse>
 80050fc:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8005100:	d004      	beq.n	800510c <SD_WideBus_Disable+0x22>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005102:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 8005106:	4618      	mov	r0, r3
 8005108:	b002      	add	sp, #8
 800510a:	bd10      	pop	{r4, pc}
  errorstate = SD_FindSCR(hsd, scr);
 800510c:	4669      	mov	r1, sp
 800510e:	4620      	mov	r0, r4
 8005110:	f7ff ff34 	bl	8004f7c <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005114:	4603      	mov	r3, r0
 8005116:	2800      	cmp	r0, #0
 8005118:	d1f5      	bne.n	8005106 <SD_WideBus_Disable+0x1c>
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800511a:	9b01      	ldr	r3, [sp, #4]
 800511c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005120:	d102      	bne.n	8005128 <SD_WideBus_Disable+0x3e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005122:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005126:	e7ee      	b.n	8005106 <SD_WideBus_Disable+0x1c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8005128:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800512a:	0409      	lsls	r1, r1, #16
 800512c:	6820      	ldr	r0, [r4, #0]
 800512e:	f002 fe1f 	bl	8007d70 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005132:	4603      	mov	r3, r0
 8005134:	2800      	cmp	r0, #0
 8005136:	d1e6      	bne.n	8005106 <SD_WideBus_Disable+0x1c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 8005138:	2100      	movs	r1, #0
 800513a:	6820      	ldr	r0, [r4, #0]
 800513c:	f002 fe47 	bl	8007dce <SDMMC_CmdBusWidth>
 8005140:	4603      	mov	r3, r0
 8005142:	e7e0      	b.n	8005106 <SD_WideBus_Disable+0x1c>

08005144 <HAL_SD_GetCardCSD>:
{
 8005144:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005146:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005148:	0f9b      	lsrs	r3, r3, #30
 800514a:	700b      	strb	r3, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800514c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800514e:	f3c3 6383 	ubfx	r3, r3, #26, #4
 8005152:	704b      	strb	r3, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005154:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
 8005158:	f003 0303 	and.w	r3, r3, #3
 800515c:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800515e:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
 8005162:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005164:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8005168:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800516a:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800516e:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005170:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005172:	0d1b      	lsrs	r3, r3, #20
 8005174:	80cb      	strh	r3, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005176:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
 800517a:	f003 030f 	and.w	r3, r3, #15
 800517e:	720b      	strb	r3, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005180:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005182:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8005186:	724b      	strb	r3, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005188:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800518a:	f3c3 3380 	ubfx	r3, r3, #14, #1
 800518e:	728b      	strb	r3, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005190:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005192:	f3c3 3340 	ubfx	r3, r3, #13, #1
 8005196:	72cb      	strb	r3, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005198:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800519a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800519e:	730b      	strb	r3, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80051a0:	2300      	movs	r3, #0
 80051a2:	734b      	strb	r3, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 80051a4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f040 8088 	bne.w	80052bc <HAL_SD_GetCardCSD+0x178>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80051ac:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80051ae:	f640 73fc 	movw	r3, #4092	; 0xffc
 80051b2:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 80051b6:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80051b8:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 80051bc:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80051be:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80051c0:	f3c3 63c2 	ubfx	r3, r3, #27, #3
 80051c4:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80051c6:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80051d0:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80051d2:	f3c3 5342 	ubfx	r3, r3, #21, #3
 80051d6:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80051d8:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80051da:	f3c3 4382 	ubfx	r3, r3, #18, #3
 80051de:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80051e0:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80051e2:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 80051e6:	760b      	strb	r3, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80051e8:	690b      	ldr	r3, [r1, #16]
 80051ea:	3301      	adds	r3, #1
 80051ec:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80051ee:	7e0a      	ldrb	r2, [r1, #24]
 80051f0:	f002 0207 	and.w	r2, r2, #7
 80051f4:	3202      	adds	r2, #2
 80051f6:	fa03 f202 	lsl.w	r2, r3, r2
 80051fa:	64c2      	str	r2, [r0, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80051fc:	7a0b      	ldrb	r3, [r1, #8]
 80051fe:	f003 040f 	and.w	r4, r3, #15
 8005202:	2301      	movs	r3, #1
 8005204:	40a3      	lsls	r3, r4
 8005206:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8005208:	0a5b      	lsrs	r3, r3, #9
 800520a:	fb03 f302 	mul.w	r3, r3, r2
 800520e:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8005210:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005214:	6583      	str	r3, [r0, #88]	; 0x58
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005216:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8005218:	f3c3 3380 	ubfx	r3, r3, #14, #1
 800521c:	764b      	strb	r3, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800521e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8005220:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 8005224:	768b      	strb	r3, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005226:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8005228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800522c:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800522e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005230:	0fdb      	lsrs	r3, r3, #31
 8005232:	770b      	strb	r3, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005234:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005236:	f3c3 7341 	ubfx	r3, r3, #29, #2
 800523a:	774b      	strb	r3, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800523c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800523e:	f3c3 6382 	ubfx	r3, r3, #26, #3
 8005242:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005244:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005246:	f3c3 5383 	ubfx	r3, r3, #22, #4
 800524a:	77cb      	strb	r3, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800524c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800524e:	f3c3 5340 	ubfx	r3, r3, #21, #1
 8005252:	f881 3020 	strb.w	r3, [r1, #32]
  pCSD->Reserved3 = 0;
 8005256:	2300      	movs	r3, #0
 8005258:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800525c:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 8005260:	f002 0201 	and.w	r2, r2, #1
 8005264:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005268:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800526a:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800526e:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005272:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8005274:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8005278:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800527c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800527e:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8005282:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005286:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8005288:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800528c:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005290:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8005292:	f3c2 2281 	ubfx	r2, r2, #10, #2
 8005296:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800529a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800529c:	f3c2 2201 	ubfx	r2, r2, #8, #2
 80052a0:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80052a4:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80052a6:	f3c2 0246 	ubfx	r2, r2, #1, #7
 80052aa:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80052ae:	2201      	movs	r2, #1
 80052b0:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
  return HAL_OK;
 80052b4:	4618      	mov	r0, r3
}
 80052b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052ba:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d00b      	beq.n	80052d8 <HAL_SD_GetCardCSD+0x194>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 80052c0:	6803      	ldr	r3, [r0, #0]
 80052c2:	4a0e      	ldr	r2, [pc, #56]	; (80052fc <HAL_SD_GetCardCSD+0x1b8>)
 80052c4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80052c6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80052c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052cc:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80052ce:	2301      	movs	r3, #1
 80052d0:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 80052d4:	4618      	mov	r0, r3
 80052d6:	e7ee      	b.n	80052b6 <HAL_SD_GetCardCSD+0x172>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80052d8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80052da:	041b      	lsls	r3, r3, #16
 80052dc:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80052e0:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 80052e4:	4313      	orrs	r3, r2
 80052e6:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80052e8:	690b      	ldr	r3, [r1, #16]
 80052ea:	3301      	adds	r3, #1
 80052ec:	029b      	lsls	r3, r3, #10
 80052ee:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80052f0:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80052f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052f6:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80052f8:	6583      	str	r3, [r0, #88]	; 0x58
 80052fa:	e78c      	b.n	8005216 <HAL_SD_GetCardCSD+0xd2>
 80052fc:	1fe00fff 	.word	0x1fe00fff

08005300 <SD_InitCard>:
{
 8005300:	b510      	push	{r4, lr}
 8005302:	b08c      	sub	sp, #48	; 0x30
 8005304:	4604      	mov	r4, r0
  uint16_t sd_rca = 1;
 8005306:	2301      	movs	r3, #1
 8005308:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U) 
 800530c:	6800      	ldr	r0, [r0, #0]
 800530e:	f002 fb9e 	bl	8007a4e <SDMMC_GetPowerState>
 8005312:	b920      	cbnz	r0, 800531e <SD_InitCard+0x1e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005314:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
}
 8005318:	4618      	mov	r0, r3
 800531a:	b00c      	add	sp, #48	; 0x30
 800531c:	bd10      	pop	{r4, pc}
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800531e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005320:	2b03      	cmp	r3, #3
 8005322:	d019      	beq.n	8005358 <SD_InitCard+0x58>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005324:	6820      	ldr	r0, [r4, #0]
 8005326:	f002 fd84 	bl	8007e32 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800532a:	4603      	mov	r3, r0
 800532c:	2800      	cmp	r0, #0
 800532e:	d1f3      	bne.n	8005318 <SD_InitCard+0x18>
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005330:	2100      	movs	r1, #0
 8005332:	6820      	ldr	r0, [r4, #0]
 8005334:	f002 fba9 	bl	8007a8a <SDMMC_GetResponse>
 8005338:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800533a:	2104      	movs	r1, #4
 800533c:	6820      	ldr	r0, [r4, #0]
 800533e:	f002 fba4 	bl	8007a8a <SDMMC_GetResponse>
 8005342:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005344:	2108      	movs	r1, #8
 8005346:	6820      	ldr	r0, [r4, #0]
 8005348:	f002 fb9f 	bl	8007a8a <SDMMC_GetResponse>
 800534c:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800534e:	210c      	movs	r1, #12
 8005350:	6820      	ldr	r0, [r4, #0]
 8005352:	f002 fb9a 	bl	8007a8a <SDMMC_GetResponse>
 8005356:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005358:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800535a:	2b03      	cmp	r3, #3
 800535c:	d007      	beq.n	800536e <SD_InitCard+0x6e>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800535e:	f10d 0102 	add.w	r1, sp, #2
 8005362:	6820      	ldr	r0, [r4, #0]
 8005364:	f002 fd91 	bl	8007e8a <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005368:	4603      	mov	r3, r0
 800536a:	2800      	cmp	r0, #0
 800536c:	d1d4      	bne.n	8005318 <SD_InitCard+0x18>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800536e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005370:	2b03      	cmp	r3, #3
 8005372:	d01d      	beq.n	80053b0 <SD_InitCard+0xb0>
    hsd->SdCard.RelCardAdd = sd_rca;
 8005374:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8005378:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800537a:	0409      	lsls	r1, r1, #16
 800537c:	6820      	ldr	r0, [r4, #0]
 800537e:	f002 fd6e 	bl	8007e5e <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005382:	4603      	mov	r3, r0
 8005384:	2800      	cmp	r0, #0
 8005386:	d1c7      	bne.n	8005318 <SD_InitCard+0x18>
      hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005388:	2100      	movs	r1, #0
 800538a:	6820      	ldr	r0, [r4, #0]
 800538c:	f002 fb7d 	bl	8007a8a <SDMMC_GetResponse>
 8005390:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005392:	2104      	movs	r1, #4
 8005394:	6820      	ldr	r0, [r4, #0]
 8005396:	f002 fb78 	bl	8007a8a <SDMMC_GetResponse>
 800539a:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800539c:	2108      	movs	r1, #8
 800539e:	6820      	ldr	r0, [r4, #0]
 80053a0:	f002 fb73 	bl	8007a8a <SDMMC_GetResponse>
 80053a4:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80053a6:	210c      	movs	r1, #12
 80053a8:	6820      	ldr	r0, [r4, #0]
 80053aa:	f002 fb6e 	bl	8007a8a <SDMMC_GetResponse>
 80053ae:	66e0      	str	r0, [r4, #108]	; 0x6c
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 80053b0:	2104      	movs	r1, #4
 80053b2:	6820      	ldr	r0, [r4, #0]
 80053b4:	f002 fb69 	bl	8007a8a <SDMMC_GetResponse>
 80053b8:	0d00      	lsrs	r0, r0, #20
 80053ba:	6460      	str	r0, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80053bc:	a901      	add	r1, sp, #4
 80053be:	4620      	mov	r0, r4
 80053c0:	f7ff fec0 	bl	8005144 <HAL_SD_GetCardCSD>
 80053c4:	b110      	cbz	r0, 80053cc <SD_InitCard+0xcc>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80053c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80053ca:	e7a5      	b.n	8005318 <SD_InitCard+0x18>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 80053cc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80053ce:	0412      	lsls	r2, r2, #16
 80053d0:	2300      	movs	r3, #0
 80053d2:	6820      	ldr	r0, [r4, #0]
 80053d4:	f002 fc88 	bl	8007ce8 <SDMMC_CmdSelDesel>
 80053d8:	4603      	mov	r3, r0
 80053da:	e79d      	b.n	8005318 <SD_InitCard+0x18>

080053dc <HAL_SD_InitCard>:
{
 80053dc:	b530      	push	{r4, r5, lr}
 80053de:	b08b      	sub	sp, #44	; 0x2c
 80053e0:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80053e2:	2300      	movs	r3, #0
 80053e4:	9304      	str	r3, [sp, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80053e6:	9305      	str	r3, [sp, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80053e8:	9306      	str	r3, [sp, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80053ea:	9307      	str	r3, [sp, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80053ec:	233c      	movs	r3, #60	; 0x3c
 80053ee:	9308      	str	r3, [sp, #32]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80053f0:	6983      	ldr	r3, [r0, #24]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d00e      	beq.n	8005414 <HAL_SD_InitCard+0x38>
  status = SDMMC_Init(hsd->Instance, Init);
 80053f6:	ab0a      	add	r3, sp, #40	; 0x28
 80053f8:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80053fc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8005400:	ab04      	add	r3, sp, #16
 8005402:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005404:	6820      	ldr	r0, [r4, #0]
 8005406:	f002 faff 	bl	8007a08 <SDMMC_Init>
  if(status != HAL_OK)
 800540a:	b148      	cbz	r0, 8005420 <HAL_SD_InitCard+0x44>
    return HAL_ERROR;
 800540c:	2501      	movs	r5, #1
}
 800540e:	4628      	mov	r0, r5
 8005410:	b00b      	add	sp, #44	; 0x2c
 8005412:	bd30      	pop	{r4, r5, pc}
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8005414:	6802      	ldr	r2, [r0, #0]
 8005416:	6813      	ldr	r3, [r2, #0]
 8005418:	f043 0304 	orr.w	r3, r3, #4
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	e7ea      	b.n	80053f6 <HAL_SD_InitCard+0x1a>
  status = SDMMC_PowerState_ON(hsd->Instance);
 8005420:	6820      	ldr	r0, [r4, #0]
 8005422:	f002 fb0e 	bl	8007a42 <SDMMC_PowerState_ON>
  if(status != HAL_OK)
 8005426:	4605      	mov	r5, r0
 8005428:	b108      	cbz	r0, 800542e <HAL_SD_InitCard+0x52>
    return HAL_ERROR;
 800542a:	2501      	movs	r5, #1
 800542c:	e7ef      	b.n	800540e <HAL_SD_InitCard+0x32>
  HAL_Delay(2U);
 800542e:	2002      	movs	r0, #2
 8005430:	f7fb fd8c 	bl	8000f4c <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 8005434:	4620      	mov	r0, r4
 8005436:	f7ff fcf1 	bl	8004e1c <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 800543a:	4603      	mov	r3, r0
 800543c:	b130      	cbz	r0, 800544c <HAL_SD_InitCard+0x70>
    hsd->State = HAL_SD_STATE_READY;
 800543e:	2501      	movs	r5, #1
 8005440:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005444:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005446:	4313      	orrs	r3, r2
 8005448:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800544a:	e7e0      	b.n	800540e <HAL_SD_InitCard+0x32>
  errorstate = SD_InitCard(hsd);
 800544c:	4620      	mov	r0, r4
 800544e:	f7ff ff57 	bl	8005300 <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005452:	4603      	mov	r3, r0
 8005454:	2800      	cmp	r0, #0
 8005456:	d0da      	beq.n	800540e <HAL_SD_InitCard+0x32>
    hsd->State = HAL_SD_STATE_READY;
 8005458:	2501      	movs	r5, #1
 800545a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800545e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005460:	4313      	orrs	r3, r2
 8005462:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8005464:	e7d3      	b.n	800540e <HAL_SD_InitCard+0x32>
	...

08005468 <HAL_SD_ConfigWideBusOperation>:
{
 8005468:	b530      	push	{r4, r5, lr}
 800546a:	b08b      	sub	sp, #44	; 0x2c
 800546c:	4604      	mov	r4, r0
 800546e:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8005470:	2303      	movs	r3, #3
 8005472:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005476:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005478:	2b03      	cmp	r3, #3
 800547a:	d025      	beq.n	80054c8 <HAL_SD_ConfigWideBusOperation+0x60>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800547c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005480:	d011      	beq.n	80054a6 <HAL_SD_ConfigWideBusOperation+0x3e>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005482:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8005486:	d013      	beq.n	80054b0 <HAL_SD_ConfigWideBusOperation+0x48>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005488:	b1c1      	cbz	r1, 80054bc <HAL_SD_ConfigWideBusOperation+0x54>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800548a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800548c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005490:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005492:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005494:	b1eb      	cbz	r3, 80054d2 <HAL_SD_ConfigWideBusOperation+0x6a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005496:	6823      	ldr	r3, [r4, #0]
 8005498:	4a1a      	ldr	r2, [pc, #104]	; (8005504 <HAL_SD_ConfigWideBusOperation+0x9c>)
 800549a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800549c:	2001      	movs	r0, #1
 800549e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 80054a2:	b00b      	add	sp, #44	; 0x2c
 80054a4:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80054a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80054a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ac:	6383      	str	r3, [r0, #56]	; 0x38
 80054ae:	e7f0      	b.n	8005492 <HAL_SD_ConfigWideBusOperation+0x2a>
      errorstate = SD_WideBus_Enable(hsd);
 80054b0:	f7ff fdee 	bl	8005090 <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 80054b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80054b6:	4318      	orrs	r0, r3
 80054b8:	63a0      	str	r0, [r4, #56]	; 0x38
 80054ba:	e7ea      	b.n	8005492 <HAL_SD_ConfigWideBusOperation+0x2a>
      errorstate = SD_WideBus_Disable(hsd);
 80054bc:	f7ff fe15 	bl	80050ea <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 80054c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80054c2:	4318      	orrs	r0, r3
 80054c4:	63a0      	str	r0, [r4, #56]	; 0x38
 80054c6:	e7e4      	b.n	8005492 <HAL_SD_ConfigWideBusOperation+0x2a>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80054c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80054ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ce:	6383      	str	r3, [r0, #56]	; 0x38
 80054d0:	e7df      	b.n	8005492 <HAL_SD_ConfigWideBusOperation+0x2a>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80054d2:	6863      	ldr	r3, [r4, #4]
 80054d4:	9304      	str	r3, [sp, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80054d6:	68a3      	ldr	r3, [r4, #8]
 80054d8:	9305      	str	r3, [sp, #20]
    Init.BusWide             = WideMode;
 80054da:	9506      	str	r5, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80054dc:	6923      	ldr	r3, [r4, #16]
 80054de:	9307      	str	r3, [sp, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80054e0:	6963      	ldr	r3, [r4, #20]
 80054e2:	9308      	str	r3, [sp, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 80054e4:	ab0a      	add	r3, sp, #40	; 0x28
 80054e6:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80054ea:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80054ee:	ab04      	add	r3, sp, #16
 80054f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054f2:	6820      	ldr	r0, [r4, #0]
 80054f4:	f002 fa88 	bl	8007a08 <SDMMC_Init>
  hsd->State = HAL_SD_STATE_READY;
 80054f8:	2301      	movs	r3, #1
 80054fa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 80054fe:	2000      	movs	r0, #0
 8005500:	e7cf      	b.n	80054a2 <HAL_SD_ConfigWideBusOperation+0x3a>
 8005502:	bf00      	nop
 8005504:	1fe00fff 	.word	0x1fe00fff

08005508 <HAL_SD_Init>:
{ 
 8005508:	b538      	push	{r3, r4, r5, lr}
  if(hsd == NULL)
 800550a:	2800      	cmp	r0, #0
 800550c:	d034      	beq.n	8005578 <HAL_SD_Init+0x70>
 800550e:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 8005510:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8005514:	b14b      	cbz	r3, 800552a <HAL_SD_Init+0x22>
  hsd->State = HAL_SD_STATE_BUSY;
 8005516:	2303      	movs	r3, #3
 8005518:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800551c:	4620      	mov	r0, r4
 800551e:	f7ff ff5d 	bl	80053dc <HAL_SD_InitCard>
 8005522:	b130      	cbz	r0, 8005532 <HAL_SD_Init+0x2a>
    return HAL_ERROR;
 8005524:	2501      	movs	r5, #1
}
 8005526:	4628      	mov	r0, r5
 8005528:	bd38      	pop	{r3, r4, r5, pc}
    hsd->Lock = HAL_UNLOCKED;
 800552a:	7703      	strb	r3, [r0, #28]
    HAL_SD_MspInit(hsd);
 800552c:	f009 ff2e 	bl	800f38c <HAL_SD_MspInit>
 8005530:	e7f1      	b.n	8005516 <HAL_SD_Init+0xe>
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005532:	68e1      	ldr	r1, [r4, #12]
 8005534:	4620      	mov	r0, r4
 8005536:	f7ff ff97 	bl	8005468 <HAL_SD_ConfigWideBusOperation>
 800553a:	4605      	mov	r5, r0
 800553c:	b9f0      	cbnz	r0, 800557c <HAL_SD_Init+0x74>
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800553e:	69a3      	ldr	r3, [r4, #24]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d006      	beq.n	8005552 <HAL_SD_Init+0x4a>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005544:	2300      	movs	r3, #0
 8005546:	63a3      	str	r3, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8005548:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 800554a:	2301      	movs	r3, #1
 800554c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8005550:	e7e9      	b.n	8005526 <HAL_SD_Init+0x1e>
    if((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) || 
 8005552:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005558:	d002      	beq.n	8005560 <HAL_SD_Init+0x58>
       (hsd->SdCard.CardType == CARD_SDHC_SDXC))
 800555a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    if((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) || 
 800555c:	2b01      	cmp	r3, #1
 800555e:	d1f1      	bne.n	8005544 <HAL_SD_Init+0x3c>
      hsd->Instance->CLKCR |= 0x00100000U;
 8005560:	6822      	ldr	r2, [r4, #0]
 8005562:	6853      	ldr	r3, [r2, #4]
 8005564:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005568:	6053      	str	r3, [r2, #4]
      if(HAL_SDEx_HighSpeed(hsd) != HAL_SD_ERROR_NONE)
 800556a:	4620      	mov	r0, r4
 800556c:	f000 f80a 	bl	8005584 <HAL_SDEx_HighSpeed>
 8005570:	2800      	cmp	r0, #0
 8005572:	d0e7      	beq.n	8005544 <HAL_SD_Init+0x3c>
        return HAL_ERROR;
 8005574:	2501      	movs	r5, #1
 8005576:	e7d6      	b.n	8005526 <HAL_SD_Init+0x1e>
    return HAL_ERROR;
 8005578:	2501      	movs	r5, #1
 800557a:	e7d4      	b.n	8005526 <HAL_SD_Init+0x1e>
    return HAL_ERROR;
 800557c:	2501      	movs	r5, #1
 800557e:	e7d2      	b.n	8005526 <HAL_SD_Init+0x1e>

08005580 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8005580:	4770      	bx	lr
	...

08005584 <HAL_SDEx_HighSpeed>:
{
 8005584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005588:	b096      	sub	sp, #88	; 0x58
 800558a:	4604      	mov	r4, r0
  uint8_t SD_hs[64]  = {0};
 800558c:	2240      	movs	r2, #64	; 0x40
 800558e:	2100      	movs	r1, #0
 8005590:	4668      	mov	r0, sp
 8005592:	f00b fd16 	bl	8010fc2 <memset>
  uint32_t Timeout = HAL_GetTick();
 8005596:	f7fb fcd3 	bl	8000f40 <HAL_GetTick>
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 800559a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800559c:	b92b      	cbnz	r3, 80055aa <HAL_SDEx_HighSpeed+0x26>
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE; 
 800559e:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 80055a2:	4628      	mov	r0, r5
 80055a4:	b016      	add	sp, #88	; 0x58
 80055a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055aa:	4607      	mov	r7, r0
  if((hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED) &&
 80055ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055b0:	d001      	beq.n	80055b6 <HAL_SDEx_HighSpeed+0x32>
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80055b2:	2500      	movs	r5, #0
 80055b4:	e7f5      	b.n	80055a2 <HAL_SDEx_HighSpeed+0x1e>
      (hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE))
 80055b6:	69a3      	ldr	r3, [r4, #24]
  if((hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED) &&
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d001      	beq.n	80055c0 <HAL_SDEx_HighSpeed+0x3c>
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80055bc:	2500      	movs	r5, #0
 80055be:	e7f0      	b.n	80055a2 <HAL_SDEx_HighSpeed+0x1e>
    hsd->Instance->DCTRL = 0;
 80055c0:	6823      	ldr	r3, [r4, #0]
 80055c2:	2200      	movs	r2, #0
 80055c4:	62da      	str	r2, [r3, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64);
 80055c6:	2140      	movs	r1, #64	; 0x40
 80055c8:	6820      	ldr	r0, [r4, #0]
 80055ca:	f002 fb74 	bl	8007cb6 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_SD_ERROR_NONE)
 80055ce:	4605      	mov	r5, r0
 80055d0:	2800      	cmp	r0, #0
 80055d2:	d1e6      	bne.n	80055a2 <HAL_SDEx_HighSpeed+0x1e>
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 80055d4:	f04f 33ff 	mov.w	r3, #4294967295
 80055d8:	9310      	str	r3, [sp, #64]	; 0x40
    sdmmc_datainitstructure.DataLength    = 64;
 80055da:	2340      	movs	r3, #64	; 0x40
 80055dc:	9311      	str	r3, [sp, #68]	; 0x44
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 80055de:	2360      	movs	r3, #96	; 0x60
 80055e0:	9312      	str	r3, [sp, #72]	; 0x48
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80055e2:	2302      	movs	r3, #2
 80055e4:	9313      	str	r3, [sp, #76]	; 0x4c
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80055e6:	2300      	movs	r3, #0
 80055e8:	9314      	str	r3, [sp, #80]	; 0x50
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 80055ea:	2301      	movs	r3, #1
 80055ec:	9315      	str	r3, [sp, #84]	; 0x54
    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 80055ee:	a910      	add	r1, sp, #64	; 0x40
 80055f0:	6820      	ldr	r0, [r4, #0]
 80055f2:	f002 fb4b 	bl	8007c8c <SDMMC_ConfigData>
    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_SDR25_SWITCH_PATTERN);
 80055f6:	4933      	ldr	r1, [pc, #204]	; (80056c4 <HAL_SDEx_HighSpeed+0x140>)
 80055f8:	6820      	ldr	r0, [r4, #0]
 80055fa:	f002 fc5f 	bl	8007ebc <SDMMC_CmdSwitch>
    if(errorstate != HAL_SD_ERROR_NONE)
 80055fe:	4605      	mov	r5, r0
 8005600:	2800      	cmp	r0, #0
 8005602:	d1ce      	bne.n	80055a2 <HAL_SDEx_HighSpeed+0x1e>
 8005604:	466e      	mov	r6, sp
 8005606:	e017      	b.n	8005638 <HAL_SDEx_HighSpeed+0xb4>
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005608:	6820      	ldr	r0, [r4, #0]
 800560a:	f002 fa17 	bl	8007a3c <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 800560e:	7030      	strb	r0, [r6, #0]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005610:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8005614:	7073      	strb	r3, [r6, #1]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005616:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800561a:	70b3      	strb	r3, [r6, #2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800561c:	0e00      	lsrs	r0, r0, #24
 800561e:	70f0      	strb	r0, [r6, #3]
          tempbuff++;
 8005620:	3604      	adds	r6, #4
        for (count = 0U; count < 8U; count++)
 8005622:	f108 0801 	add.w	r8, r8, #1
 8005626:	f1b8 0f07 	cmp.w	r8, #7
 800562a:	d9ed      	bls.n	8005608 <HAL_SDEx_HighSpeed+0x84>
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 800562c:	f7fb fc88 	bl	8000f40 <HAL_GetTick>
 8005630:	1bc0      	subs	r0, r0, r7
 8005632:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005636:	d00b      	beq.n	8005650 <HAL_SDEx_HighSpeed+0xcc>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8005638:	6823      	ldr	r3, [r4, #0]
 800563a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800563c:	f240 522a 	movw	r2, #1322	; 0x52a
 8005640:	4211      	tst	r1, r2
 8005642:	d10c      	bne.n	800565e <HAL_SDEx_HighSpeed+0xda>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005646:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800564a:	d0ef      	beq.n	800562c <HAL_SDEx_HighSpeed+0xa8>
 800564c:	46a8      	mov	r8, r5
 800564e:	e7ea      	b.n	8005626 <HAL_SDEx_HighSpeed+0xa2>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005650:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8005654:	63a5      	str	r5, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005656:	2301      	movs	r3, #1
 8005658:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_SD_ERROR_TIMEOUT;
 800565c:	e7a1      	b.n	80055a2 <HAL_SDEx_HighSpeed+0x1e>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800565e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005660:	f012 0f08 	tst.w	r2, #8
 8005664:	d106      	bne.n	8005674 <HAL_SDEx_HighSpeed+0xf0>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005666:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005668:	f012 0f02 	tst.w	r2, #2
 800566c:	d005      	beq.n	800567a <HAL_SDEx_HighSpeed+0xf6>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800566e:	2502      	movs	r5, #2
 8005670:	639d      	str	r5, [r3, #56]	; 0x38
      return errorstate;
 8005672:	e796      	b.n	80055a2 <HAL_SDEx_HighSpeed+0x1e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005674:	2208      	movs	r2, #8
 8005676:	639a      	str	r2, [r3, #56]	; 0x38
      return errorstate;
 8005678:	e793      	b.n	80055a2 <HAL_SDEx_HighSpeed+0x1e>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800567a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800567c:	f012 0f20 	tst.w	r2, #32
 8005680:	d002      	beq.n	8005688 <HAL_SDEx_HighSpeed+0x104>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005682:	2520      	movs	r5, #32
 8005684:	639d      	str	r5, [r3, #56]	; 0x38
      return errorstate;
 8005686:	e78c      	b.n	80055a2 <HAL_SDEx_HighSpeed+0x1e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005688:	4a0f      	ldr	r2, [pc, #60]	; (80056c8 <HAL_SDEx_HighSpeed+0x144>)
 800568a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((SD_hs[13U] & 2U) == 0U)
 800568c:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8005690:	f013 0f02 	tst.w	r3, #2
 8005694:	d102      	bne.n	800569c <HAL_SDEx_HighSpeed+0x118>
      return errorstate;
 8005696:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800569a:	e782      	b.n	80055a2 <HAL_SDEx_HighSpeed+0x1e>
      HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800569c:	2001      	movs	r0, #1
 800569e:	f7ff ff6f 	bl	8005580 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80056a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056a6:	6820      	ldr	r0, [r4, #0]
 80056a8:	f002 fb05 	bl	8007cb6 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 80056ac:	4605      	mov	r5, r0
 80056ae:	2800      	cmp	r0, #0
 80056b0:	f43f af77 	beq.w	80055a2 <HAL_SDEx_HighSpeed+0x1e>
      hsd->State = HAL_SD_STATE_READY;
 80056b4:	2301      	movs	r3, #1
 80056b6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->ErrorCode |= errorstate;
 80056ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80056bc:	4303      	orrs	r3, r0
 80056be:	63a3      	str	r3, [r4, #56]	; 0x38
      return errorstate;
 80056c0:	e76f      	b.n	80055a2 <HAL_SDEx_HighSpeed+0x1e>
 80056c2:	bf00      	nop
 80056c4:	80ffff01 	.word	0x80ffff01
 80056c8:	18000f3a 	.word	0x18000f3a

080056cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ce:	4605      	mov	r5, r0
 80056d0:	460f      	mov	r7, r1
 80056d2:	4616      	mov	r6, r2
 80056d4:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056d6:	682b      	ldr	r3, [r5, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	ea37 0303 	bics.w	r3, r7, r3
 80056de:	bf0c      	ite	eq
 80056e0:	2301      	moveq	r3, #1
 80056e2:	2300      	movne	r3, #0
 80056e4:	42b3      	cmp	r3, r6
 80056e6:	d037      	beq.n	8005758 <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056e8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80056ec:	d0f3      	beq.n	80056d6 <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80056ee:	f7fb fc27 	bl	8000f40 <HAL_GetTick>
 80056f2:	9b06      	ldr	r3, [sp, #24]
 80056f4:	1ac0      	subs	r0, r0, r3
 80056f6:	4284      	cmp	r4, r0
 80056f8:	d901      	bls.n	80056fe <SPI_WaitFlagStateUntilTimeout+0x32>
 80056fa:	2c00      	cmp	r4, #0
 80056fc:	d1eb      	bne.n	80056d6 <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056fe:	682a      	ldr	r2, [r5, #0]
 8005700:	6853      	ldr	r3, [r2, #4]
 8005702:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8005706:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005708:	686b      	ldr	r3, [r5, #4]
 800570a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800570e:	d00b      	beq.n	8005728 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005710:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005716:	d014      	beq.n	8005742 <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005718:	2301      	movs	r3, #1
 800571a:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800571e:	2300      	movs	r3, #0
 8005720:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005724:	2003      	movs	r0, #3
 8005726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005728:	68ab      	ldr	r3, [r5, #8]
 800572a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800572e:	d002      	beq.n	8005736 <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005734:	d1ec      	bne.n	8005710 <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 8005736:	682a      	ldr	r2, [r5, #0]
 8005738:	6813      	ldr	r3, [r2, #0]
 800573a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800573e:	6013      	str	r3, [r2, #0]
 8005740:	e7e6      	b.n	8005710 <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 8005742:	682a      	ldr	r2, [r5, #0]
 8005744:	6813      	ldr	r3, [r2, #0]
 8005746:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800574a:	6013      	str	r3, [r2, #0]
 800574c:	682a      	ldr	r2, [r5, #0]
 800574e:	6813      	ldr	r3, [r2, #0]
 8005750:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005754:	6013      	str	r3, [r2, #0]
 8005756:	e7df      	b.n	8005718 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 8005758:	2000      	movs	r0, #0
}
 800575a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800575c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800575c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575e:	4607      	mov	r7, r0
 8005760:	460c      	mov	r4, r1
 8005762:	4615      	mov	r5, r2
 8005764:	461e      	mov	r6, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8005766:	e002      	b.n	800576e <SPI_WaitFifoStateUntilTimeout+0x12>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 8005768:	f1b6 3fff 	cmp.w	r6, #4294967295
 800576c:	d10b      	bne.n	8005786 <SPI_WaitFifoStateUntilTimeout+0x2a>
  while ((hspi->Instance->SR & Fifo) != State)
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	6893      	ldr	r3, [r2, #8]
 8005772:	4023      	ands	r3, r4
 8005774:	42ab      	cmp	r3, r5
 8005776:	d03b      	beq.n	80057f0 <SPI_WaitFifoStateUntilTimeout+0x94>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005778:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800577c:	d1f4      	bne.n	8005768 <SPI_WaitFifoStateUntilTimeout+0xc>
 800577e:	2d00      	cmp	r5, #0
 8005780:	d1f2      	bne.n	8005768 <SPI_WaitFifoStateUntilTimeout+0xc>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005782:	7b13      	ldrb	r3, [r2, #12]
 8005784:	e7f0      	b.n	8005768 <SPI_WaitFifoStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005786:	f7fb fbdb 	bl	8000f40 <HAL_GetTick>
 800578a:	9b06      	ldr	r3, [sp, #24]
 800578c:	1ac0      	subs	r0, r0, r3
 800578e:	4286      	cmp	r6, r0
 8005790:	d901      	bls.n	8005796 <SPI_WaitFifoStateUntilTimeout+0x3a>
 8005792:	2e00      	cmp	r6, #0
 8005794:	d1eb      	bne.n	800576e <SPI_WaitFifoStateUntilTimeout+0x12>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	6853      	ldr	r3, [r2, #4]
 800579a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800579e:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057a6:	d00b      	beq.n	80057c0 <SPI_WaitFifoStateUntilTimeout+0x64>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ae:	d014      	beq.n	80057da <SPI_WaitFifoStateUntilTimeout+0x7e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057b0:	2301      	movs	r3, #1
 80057b2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057b6:	2300      	movs	r3, #0
 80057b8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

        return HAL_TIMEOUT;
 80057bc:	2003      	movs	r0, #3
 80057be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057c6:	d002      	beq.n	80057ce <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057cc:	d1ec      	bne.n	80057a8 <SPI_WaitFifoStateUntilTimeout+0x4c>
          __HAL_SPI_DISABLE(hspi);
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	6813      	ldr	r3, [r2, #0]
 80057d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057d6:	6013      	str	r3, [r2, #0]
 80057d8:	e7e6      	b.n	80057a8 <SPI_WaitFifoStateUntilTimeout+0x4c>
          SPI_RESET_CRC(hspi);
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	6813      	ldr	r3, [r2, #0]
 80057de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057e2:	6013      	str	r3, [r2, #0]
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	6813      	ldr	r3, [r2, #0]
 80057e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80057ec:	6013      	str	r3, [r2, #0]
 80057ee:	e7df      	b.n	80057b0 <SPI_WaitFifoStateUntilTimeout+0x54>
      }
    }
  }

  return HAL_OK;
 80057f0:	2000      	movs	r0, #0
}
 80057f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080057f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057f4:	b570      	push	{r4, r5, r6, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	4604      	mov	r4, r0
 80057fa:	460d      	mov	r5, r1
 80057fc:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057fe:	9200      	str	r2, [sp, #0]
 8005800:	460b      	mov	r3, r1
 8005802:	2200      	movs	r2, #0
 8005804:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005808:	f7ff ffa8 	bl	800575c <SPI_WaitFifoStateUntilTimeout>
 800580c:	b138      	cbz	r0, 800581e <SPI_EndRxTxTransaction+0x2a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800580e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005810:	f043 0320 	orr.w	r3, r3, #32
 8005814:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8005818:	4618      	mov	r0, r3
 800581a:	b002      	add	sp, #8
 800581c:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800581e:	9600      	str	r6, [sp, #0]
 8005820:	462b      	mov	r3, r5
 8005822:	2200      	movs	r2, #0
 8005824:	2180      	movs	r1, #128	; 0x80
 8005826:	4620      	mov	r0, r4
 8005828:	f7ff ff50 	bl	80056cc <SPI_WaitFlagStateUntilTimeout>
 800582c:	b128      	cbz	r0, 800583a <SPI_EndRxTxTransaction+0x46>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800582e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005830:	f043 0320 	orr.w	r3, r3, #32
 8005834:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e7ee      	b.n	8005818 <SPI_EndRxTxTransaction+0x24>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800583a:	9600      	str	r6, [sp, #0]
 800583c:	462b      	mov	r3, r5
 800583e:	2200      	movs	r2, #0
 8005840:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005844:	4620      	mov	r0, r4
 8005846:	f7ff ff89 	bl	800575c <SPI_WaitFifoStateUntilTimeout>
 800584a:	4603      	mov	r3, r0
 800584c:	2800      	cmp	r0, #0
 800584e:	d0e3      	beq.n	8005818 <SPI_EndRxTxTransaction+0x24>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005850:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005852:	f043 0320 	orr.w	r3, r3, #32
 8005856:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e7dd      	b.n	8005818 <SPI_EndRxTxTransaction+0x24>

0800585c <HAL_SPI_Init>:
  if (hspi == NULL)
 800585c:	2800      	cmp	r0, #0
 800585e:	d053      	beq.n	8005908 <HAL_SPI_Init+0xac>
{
 8005860:	b510      	push	{r4, lr}
 8005862:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005864:	2300      	movs	r3, #0
 8005866:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005868:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800586c:	2b00      	cmp	r3, #0
 800586e:	d040      	beq.n	80058f2 <HAL_SPI_Init+0x96>
  hspi->State = HAL_SPI_STATE_BUSY;
 8005870:	2302      	movs	r3, #2
 8005872:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8005876:	6822      	ldr	r2, [r4, #0]
 8005878:	6813      	ldr	r3, [r2, #0]
 800587a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800587e:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005880:	68e3      	ldr	r3, [r4, #12]
 8005882:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005886:	d939      	bls.n	80058fc <HAL_SPI_Init+0xa0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005888:	2100      	movs	r1, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800588a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800588e:	d004      	beq.n	800589a <HAL_SPI_Init+0x3e>
 8005890:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005894:	d001      	beq.n	800589a <HAL_SPI_Init+0x3e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005896:	2200      	movs	r2, #0
 8005898:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800589a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800589c:	b922      	cbnz	r2, 80058a8 <HAL_SPI_Init+0x4c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800589e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058a2:	d92e      	bls.n	8005902 <HAL_SPI_Init+0xa6>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80058a4:	2302      	movs	r3, #2
 80058a6:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80058a8:	6822      	ldr	r2, [r4, #0]
 80058aa:	6863      	ldr	r3, [r4, #4]
 80058ac:	68a0      	ldr	r0, [r4, #8]
 80058ae:	4303      	orrs	r3, r0
 80058b0:	6920      	ldr	r0, [r4, #16]
 80058b2:	4303      	orrs	r3, r0
 80058b4:	6960      	ldr	r0, [r4, #20]
 80058b6:	4303      	orrs	r3, r0
 80058b8:	69a0      	ldr	r0, [r4, #24]
 80058ba:	f400 7000 	and.w	r0, r0, #512	; 0x200
 80058be:	4303      	orrs	r3, r0
 80058c0:	69e0      	ldr	r0, [r4, #28]
 80058c2:	4303      	orrs	r3, r0
 80058c4:	6a20      	ldr	r0, [r4, #32]
 80058c6:	4303      	orrs	r3, r0
 80058c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80058ca:	4303      	orrs	r3, r0
 80058cc:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80058ce:	6822      	ldr	r2, [r4, #0]
 80058d0:	8b63      	ldrh	r3, [r4, #26]
 80058d2:	f003 0304 	and.w	r3, r3, #4
 80058d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80058d8:	4303      	orrs	r3, r0
 80058da:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80058dc:	4303      	orrs	r3, r0
 80058de:	68e0      	ldr	r0, [r4, #12]
 80058e0:	4303      	orrs	r3, r0
 80058e2:	430b      	orrs	r3, r1
 80058e4:	6053      	str	r3, [r2, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058e6:	2000      	movs	r0, #0
 80058e8:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80058ea:	2301      	movs	r3, #1
 80058ec:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 80058f0:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80058f2:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80058f6:	f009 fdbf 	bl	800f478 <HAL_SPI_MspInit>
 80058fa:	e7b9      	b.n	8005870 <HAL_SPI_Init+0x14>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80058fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005900:	e7c3      	b.n	800588a <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005902:	2301      	movs	r3, #1
 8005904:	6323      	str	r3, [r4, #48]	; 0x30
 8005906:	e7cf      	b.n	80058a8 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8005908:	2001      	movs	r0, #1
 800590a:	4770      	bx	lr

0800590c <HAL_SPI_Transmit_IT>:
{
 800590c:	4603      	mov	r3, r0
  __HAL_LOCK(hspi);
 800590e:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 8005912:	2801      	cmp	r0, #1
 8005914:	d047      	beq.n	80059a6 <HAL_SPI_Transmit_IT+0x9a>
 8005916:	2001      	movs	r0, #1
 8005918:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
  if ((pData == NULL) || (Size == 0U))
 800591c:	2900      	cmp	r1, #0
 800591e:	d039      	beq.n	8005994 <HAL_SPI_Transmit_IT+0x88>
 8005920:	2a00      	cmp	r2, #0
 8005922:	d039      	beq.n	8005998 <HAL_SPI_Transmit_IT+0x8c>
  if (hspi->State != HAL_SPI_STATE_READY)
 8005924:	f893 005d 	ldrb.w	r0, [r3, #93]	; 0x5d
 8005928:	b2c0      	uxtb	r0, r0
 800592a:	2801      	cmp	r0, #1
 800592c:	d001      	beq.n	8005932 <HAL_SPI_Transmit_IT+0x26>
    errorcode = HAL_BUSY;
 800592e:	2002      	movs	r0, #2
 8005930:	e033      	b.n	800599a <HAL_SPI_Transmit_IT+0x8e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005932:	2003      	movs	r0, #3
 8005934:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005938:	2000      	movs	r0, #0
 800593a:	6618      	str	r0, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800593c:	6399      	str	r1, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800593e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005940:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005942:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005944:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005948:	f8a3 0046 	strh.w	r0, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 800594c:	64d8      	str	r0, [r3, #76]	; 0x4c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800594e:	68da      	ldr	r2, [r3, #12]
 8005950:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 8005954:	d915      	bls.n	8005982 <HAL_SPI_Transmit_IT+0x76>
    hspi->TxISR = SPI_TxISR_16BIT;
 8005956:	4a15      	ldr	r2, [pc, #84]	; (80059ac <HAL_SPI_Transmit_IT+0xa0>)
 8005958:	651a      	str	r2, [r3, #80]	; 0x50
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800595a:	689a      	ldr	r2, [r3, #8]
 800595c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005960:	d012      	beq.n	8005988 <HAL_SPI_Transmit_IT+0x7c>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005962:	6819      	ldr	r1, [r3, #0]
 8005964:	684a      	ldr	r2, [r1, #4]
 8005966:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800596a:	604a      	str	r2, [r1, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	6811      	ldr	r1, [r2, #0]
 8005970:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005974:	d115      	bne.n	80059a2 <HAL_SPI_Transmit_IT+0x96>
    __HAL_SPI_ENABLE(hspi);
 8005976:	6811      	ldr	r1, [r2, #0]
 8005978:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800597c:	6011      	str	r1, [r2, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800597e:	2000      	movs	r0, #0
 8005980:	e00b      	b.n	800599a <HAL_SPI_Transmit_IT+0x8e>
    hspi->TxISR = SPI_TxISR_8BIT;
 8005982:	4a0b      	ldr	r2, [pc, #44]	; (80059b0 <HAL_SPI_Transmit_IT+0xa4>)
 8005984:	651a      	str	r2, [r3, #80]	; 0x50
 8005986:	e7e8      	b.n	800595a <HAL_SPI_Transmit_IT+0x4e>
    SPI_1LINE_TX(hspi);
 8005988:	6819      	ldr	r1, [r3, #0]
 800598a:	680a      	ldr	r2, [r1, #0]
 800598c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005990:	600a      	str	r2, [r1, #0]
 8005992:	e7e6      	b.n	8005962 <HAL_SPI_Transmit_IT+0x56>
    errorcode = HAL_ERROR;
 8005994:	2001      	movs	r0, #1
 8005996:	e000      	b.n	800599a <HAL_SPI_Transmit_IT+0x8e>
 8005998:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 800599a:	2200      	movs	r2, #0
 800599c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80059a0:	4770      	bx	lr
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059a2:	2000      	movs	r0, #0
 80059a4:	e7f9      	b.n	800599a <HAL_SPI_Transmit_IT+0x8e>
  __HAL_LOCK(hspi);
 80059a6:	2002      	movs	r0, #2
}
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	08005a35 	.word	0x08005a35
 80059b0:	08005a0d 	.word	0x08005a0d

080059b4 <HAL_SPI_ErrorCallback>:
{
 80059b4:	4770      	bx	lr

080059b6 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80059b6:	b510      	push	{r4, lr}
 80059b8:	b082      	sub	sp, #8
 80059ba:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059bc:	f7fb fac0 	bl	8000f40 <HAL_GetTick>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80059c0:	6822      	ldr	r2, [r4, #0]
 80059c2:	6853      	ldr	r3, [r2, #4]
 80059c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059c8:	6053      	str	r3, [r2, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80059ca:	4602      	mov	r2, r0
 80059cc:	2164      	movs	r1, #100	; 0x64
 80059ce:	4620      	mov	r0, r4
 80059d0:	f7ff ff10 	bl	80057f4 <SPI_EndRxTxTransaction>
 80059d4:	b118      	cbz	r0, 80059de <SPI_CloseTx_ISR+0x28>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059d6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80059d8:	f043 0320 	orr.w	r3, r3, #32
 80059dc:	6623      	str	r3, [r4, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059de:	68a3      	ldr	r3, [r4, #8]
 80059e0:	b933      	cbnz	r3, 80059f0 <SPI_CloseTx_ISR+0x3a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059e2:	9301      	str	r3, [sp, #4]
 80059e4:	6823      	ldr	r3, [r4, #0]
 80059e6:	68da      	ldr	r2, [r3, #12]
 80059e8:	9201      	str	r2, [sp, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	9301      	str	r3, [sp, #4]
 80059ee:	9b01      	ldr	r3, [sp, #4]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80059f0:	2301      	movs	r3, #1
 80059f2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059f6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80059f8:	b923      	cbnz	r3, 8005a04 <SPI_CloseTx_ISR+0x4e>
  {
    /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
 80059fa:	4620      	mov	r0, r4
 80059fc:	f009 f93e 	bl	800ec7c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8005a00:	b002      	add	sp, #8
 8005a02:	bd10      	pop	{r4, pc}
    HAL_SPI_ErrorCallback(hspi);
 8005a04:	4620      	mov	r0, r4
 8005a06:	f7ff ffd5 	bl	80059b4 <HAL_SPI_ErrorCallback>
 8005a0a:	e7f9      	b.n	8005a00 <SPI_CloseTx_ISR+0x4a>

08005a0c <SPI_TxISR_8BIT>:
{
 8005a0c:	b508      	push	{r3, lr}
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a0e:	6803      	ldr	r3, [r0, #0]
 8005a10:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005a12:	7812      	ldrb	r2, [r2, #0]
 8005a14:	731a      	strb	r2, [r3, #12]
  hspi->pTxBuffPtr++;
 8005a16:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005a18:	3301      	adds	r3, #1
 8005a1a:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8005a1c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	3b01      	subs	r3, #1
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8005a26:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	b103      	cbz	r3, 8005a2e <SPI_TxISR_8BIT+0x22>
 8005a2c:	bd08      	pop	{r3, pc}
    SPI_CloseTx_ISR(hspi);
 8005a2e:	f7ff ffc2 	bl	80059b6 <SPI_CloseTx_ISR>
}
 8005a32:	e7fb      	b.n	8005a2c <SPI_TxISR_8BIT+0x20>

08005a34 <SPI_TxISR_16BIT>:
{
 8005a34:	b508      	push	{r3, lr}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a36:	6803      	ldr	r3, [r0, #0]
 8005a38:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005a3a:	8812      	ldrh	r2, [r2, #0]
 8005a3c:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a3e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005a40:	3302      	adds	r3, #2
 8005a42:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8005a44:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8005a4e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	b103      	cbz	r3, 8005a56 <SPI_TxISR_16BIT+0x22>
 8005a54:	bd08      	pop	{r3, pc}
    SPI_CloseTx_ISR(hspi);
 8005a56:	f7ff ffae 	bl	80059b6 <SPI_CloseTx_ISR>
}
 8005a5a:	e7fb      	b.n	8005a54 <SPI_TxISR_16BIT+0x20>

08005a5c <HAL_SPI_IRQHandler>:
{
 8005a5c:	b510      	push	{r4, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8005a62:	6802      	ldr	r2, [r0, #0]
 8005a64:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8005a66:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005a68:	f003 0041 	and.w	r0, r3, #65	; 0x41
 8005a6c:	2801      	cmp	r0, #1
 8005a6e:	d067      	beq.n	8005b40 <HAL_SPI_IRQHandler+0xe4>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005a70:	f013 0f02 	tst.w	r3, #2
 8005a74:	d002      	beq.n	8005a7c <HAL_SPI_IRQHandler+0x20>
 8005a76:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005a7a:	d168      	bne.n	8005b4e <HAL_SPI_IRQHandler+0xf2>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005a7c:	f413 7fb0 	tst.w	r3, #352	; 0x160
 8005a80:	d068      	beq.n	8005b54 <HAL_SPI_IRQHandler+0xf8>
 8005a82:	f011 0f20 	tst.w	r1, #32
 8005a86:	d065      	beq.n	8005b54 <HAL_SPI_IRQHandler+0xf8>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005a88:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005a8c:	d00f      	beq.n	8005aae <HAL_SPI_IRQHandler+0x52>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005a8e:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8005a92:	b2c0      	uxtb	r0, r0
 8005a94:	2803      	cmp	r0, #3
 8005a96:	d05f      	beq.n	8005b58 <HAL_SPI_IRQHandler+0xfc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005a98:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005a9a:	f040 0004 	orr.w	r0, r0, #4
 8005a9e:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005aa0:	2000      	movs	r0, #0
 8005aa2:	9000      	str	r0, [sp, #0]
 8005aa4:	68d0      	ldr	r0, [r2, #12]
 8005aa6:	9000      	str	r0, [sp, #0]
 8005aa8:	6890      	ldr	r0, [r2, #8]
 8005aaa:	9000      	str	r0, [sp, #0]
 8005aac:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005aae:	f013 0f20 	tst.w	r3, #32
 8005ab2:	d00c      	beq.n	8005ace <HAL_SPI_IRQHandler+0x72>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005ab4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005ab6:	f040 0001 	orr.w	r0, r0, #1
 8005aba:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005abc:	2000      	movs	r0, #0
 8005abe:	9002      	str	r0, [sp, #8]
 8005ac0:	6890      	ldr	r0, [r2, #8]
 8005ac2:	9002      	str	r0, [sp, #8]
 8005ac4:	6810      	ldr	r0, [r2, #0]
 8005ac6:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8005aca:	6010      	str	r0, [r2, #0]
 8005acc:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005ace:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005ad2:	d009      	beq.n	8005ae8 <HAL_SPI_IRQHandler+0x8c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005ad4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005ad6:	f043 0308 	orr.w	r3, r3, #8
 8005ada:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005adc:	2300      	movs	r3, #0
 8005ade:	9303      	str	r3, [sp, #12]
 8005ae0:	6823      	ldr	r3, [r4, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	9303      	str	r3, [sp, #12]
 8005ae6:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ae8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d032      	beq.n	8005b54 <HAL_SPI_IRQHandler+0xf8>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005aee:	6822      	ldr	r2, [r4, #0]
 8005af0:	6853      	ldr	r3, [r2, #4]
 8005af2:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8005af6:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8005af8:	2301      	movs	r3, #1
 8005afa:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005afe:	f011 0f03 	tst.w	r1, #3
 8005b02:	d031      	beq.n	8005b68 <HAL_SPI_IRQHandler+0x10c>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005b04:	6822      	ldr	r2, [r4, #0]
 8005b06:	6853      	ldr	r3, [r2, #4]
 8005b08:	f023 0303 	bic.w	r3, r3, #3
 8005b0c:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8005b0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b10:	b14b      	cbz	r3, 8005b26 <HAL_SPI_IRQHandler+0xca>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005b12:	4a17      	ldr	r2, [pc, #92]	; (8005b70 <HAL_SPI_IRQHandler+0x114>)
 8005b14:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005b16:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b18:	f7fc f9e6 	bl	8001ee8 <HAL_DMA_Abort_IT>
 8005b1c:	b118      	cbz	r0, 8005b26 <HAL_SPI_IRQHandler+0xca>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005b1e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b24:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005b26:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005b28:	b1a3      	cbz	r3, 8005b54 <HAL_SPI_IRQHandler+0xf8>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005b2a:	4a11      	ldr	r2, [pc, #68]	; (8005b70 <HAL_SPI_IRQHandler+0x114>)
 8005b2c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005b2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b30:	f7fc f9da 	bl	8001ee8 <HAL_DMA_Abort_IT>
 8005b34:	b170      	cbz	r0, 8005b54 <HAL_SPI_IRQHandler+0xf8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005b36:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b3c:	6623      	str	r3, [r4, #96]	; 0x60
 8005b3e:	e009      	b.n	8005b54 <HAL_SPI_IRQHandler+0xf8>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005b40:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005b44:	d094      	beq.n	8005a70 <HAL_SPI_IRQHandler+0x14>
    hspi->RxISR(hspi);
 8005b46:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005b48:	4620      	mov	r0, r4
 8005b4a:	4798      	blx	r3
    return;
 8005b4c:	e002      	b.n	8005b54 <HAL_SPI_IRQHandler+0xf8>
    hspi->TxISR(hspi);
 8005b4e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005b50:	4620      	mov	r0, r4
 8005b52:	4798      	blx	r3
}
 8005b54:	b004      	add	sp, #16
 8005b56:	bd10      	pop	{r4, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b58:	2300      	movs	r3, #0
 8005b5a:	9301      	str	r3, [sp, #4]
 8005b5c:	68d3      	ldr	r3, [r2, #12]
 8005b5e:	9301      	str	r3, [sp, #4]
 8005b60:	6893      	ldr	r3, [r2, #8]
 8005b62:	9301      	str	r3, [sp, #4]
 8005b64:	9b01      	ldr	r3, [sp, #4]
        return;
 8005b66:	e7f5      	b.n	8005b54 <HAL_SPI_IRQHandler+0xf8>
        HAL_SPI_ErrorCallback(hspi);
 8005b68:	4620      	mov	r0, r4
 8005b6a:	f7ff ff23 	bl	80059b4 <HAL_SPI_ErrorCallback>
 8005b6e:	e7f1      	b.n	8005b54 <HAL_SPI_IRQHandler+0xf8>
 8005b70:	08005b75 	.word	0x08005b75

08005b74 <SPI_DMAAbortOnError>:
{
 8005b74:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005b76:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005b7e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8005b80:	f7ff ff18 	bl	80059b4 <HAL_SPI_ErrorCallback>
 8005b84:	bd08      	pop	{r3, pc}
	...

08005b88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b88:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b8a:	6a03      	ldr	r3, [r0, #32]
 8005b8c:	f023 0301 	bic.w	r3, r3, #1
 8005b90:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b92:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b94:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b96:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b98:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005b9c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ba0:	680d      	ldr	r5, [r1, #0]
 8005ba2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ba4:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ba8:	688d      	ldr	r5, [r1, #8]
 8005baa:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bac:	4d1c      	ldr	r5, [pc, #112]	; (8005c20 <TIM_OC1_SetConfig+0x98>)
 8005bae:	42a8      	cmp	r0, r5
 8005bb0:	d00f      	beq.n	8005bd2 <TIM_OC1_SetConfig+0x4a>
 8005bb2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005bb6:	42a8      	cmp	r0, r5
 8005bb8:	d00b      	beq.n	8005bd2 <TIM_OC1_SetConfig+0x4a>
 8005bba:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005bbe:	42a8      	cmp	r0, r5
 8005bc0:	d007      	beq.n	8005bd2 <TIM_OC1_SetConfig+0x4a>
 8005bc2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005bc6:	42a8      	cmp	r0, r5
 8005bc8:	d003      	beq.n	8005bd2 <TIM_OC1_SetConfig+0x4a>
 8005bca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005bce:	42a8      	cmp	r0, r5
 8005bd0:	d105      	bne.n	8005bde <TIM_OC1_SetConfig+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005bd2:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bd6:	68cd      	ldr	r5, [r1, #12]
 8005bd8:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bda:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bde:	4d10      	ldr	r5, [pc, #64]	; (8005c20 <TIM_OC1_SetConfig+0x98>)
 8005be0:	42a8      	cmp	r0, r5
 8005be2:	d00f      	beq.n	8005c04 <TIM_OC1_SetConfig+0x7c>
 8005be4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005be8:	42a8      	cmp	r0, r5
 8005bea:	d00b      	beq.n	8005c04 <TIM_OC1_SetConfig+0x7c>
 8005bec:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005bf0:	42a8      	cmp	r0, r5
 8005bf2:	d007      	beq.n	8005c04 <TIM_OC1_SetConfig+0x7c>
 8005bf4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005bf8:	42a8      	cmp	r0, r5
 8005bfa:	d003      	beq.n	8005c04 <TIM_OC1_SetConfig+0x7c>
 8005bfc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005c00:	42a8      	cmp	r0, r5
 8005c02:	d105      	bne.n	8005c10 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c04:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c08:	694d      	ldr	r5, [r1, #20]
 8005c0a:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c0c:	698d      	ldr	r5, [r1, #24]
 8005c0e:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c10:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c12:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c14:	684a      	ldr	r2, [r1, #4]
 8005c16:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c18:	6203      	str	r3, [r0, #32]
}
 8005c1a:	bc30      	pop	{r4, r5}
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	40012c00 	.word	0x40012c00

08005c24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c24:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c26:	6a03      	ldr	r3, [r0, #32]
 8005c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c2c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c2e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c30:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c32:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c34:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005c38:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c3c:	680d      	ldr	r5, [r1, #0]
 8005c3e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c44:	688d      	ldr	r5, [r1, #8]
 8005c46:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c4a:	4d18      	ldr	r5, [pc, #96]	; (8005cac <TIM_OC3_SetConfig+0x88>)
 8005c4c:	42a8      	cmp	r0, r5
 8005c4e:	d025      	beq.n	8005c9c <TIM_OC3_SetConfig+0x78>
 8005c50:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005c54:	42a8      	cmp	r0, r5
 8005c56:	d021      	beq.n	8005c9c <TIM_OC3_SetConfig+0x78>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c58:	4d14      	ldr	r5, [pc, #80]	; (8005cac <TIM_OC3_SetConfig+0x88>)
 8005c5a:	42a8      	cmp	r0, r5
 8005c5c:	d00f      	beq.n	8005c7e <TIM_OC3_SetConfig+0x5a>
 8005c5e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005c62:	42a8      	cmp	r0, r5
 8005c64:	d00b      	beq.n	8005c7e <TIM_OC3_SetConfig+0x5a>
 8005c66:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005c6a:	42a8      	cmp	r0, r5
 8005c6c:	d007      	beq.n	8005c7e <TIM_OC3_SetConfig+0x5a>
 8005c6e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005c72:	42a8      	cmp	r0, r5
 8005c74:	d003      	beq.n	8005c7e <TIM_OC3_SetConfig+0x5a>
 8005c76:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005c7a:	42a8      	cmp	r0, r5
 8005c7c:	d107      	bne.n	8005c8e <TIM_OC3_SetConfig+0x6a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c7e:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c82:	694d      	ldr	r5, [r1, #20]
 8005c84:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c88:	698d      	ldr	r5, [r1, #24]
 8005c8a:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c8e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c90:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c92:	684a      	ldr	r2, [r1, #4]
 8005c94:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c96:	6203      	str	r3, [r0, #32]
}
 8005c98:	bc30      	pop	{r4, r5}
 8005c9a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ca0:	68cd      	ldr	r5, [r1, #12]
 8005ca2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ca6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005caa:	e7d5      	b.n	8005c58 <TIM_OC3_SetConfig+0x34>
 8005cac:	40012c00 	.word	0x40012c00

08005cb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cb0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cb2:	6a03      	ldr	r3, [r0, #32]
 8005cb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cb8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cba:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cbc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cbe:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cc0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005cc4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cc8:	680d      	ldr	r5, [r1, #0]
 8005cca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cd2:	688d      	ldr	r5, [r1, #8]
 8005cd4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cd8:	4d0f      	ldr	r5, [pc, #60]	; (8005d18 <TIM_OC4_SetConfig+0x68>)
 8005cda:	42a8      	cmp	r0, r5
 8005cdc:	d00f      	beq.n	8005cfe <TIM_OC4_SetConfig+0x4e>
 8005cde:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005ce2:	42a8      	cmp	r0, r5
 8005ce4:	d00b      	beq.n	8005cfe <TIM_OC4_SetConfig+0x4e>
 8005ce6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005cea:	42a8      	cmp	r0, r5
 8005cec:	d007      	beq.n	8005cfe <TIM_OC4_SetConfig+0x4e>
 8005cee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005cf2:	42a8      	cmp	r0, r5
 8005cf4:	d003      	beq.n	8005cfe <TIM_OC4_SetConfig+0x4e>
 8005cf6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005cfa:	42a8      	cmp	r0, r5
 8005cfc:	d104      	bne.n	8005d08 <TIM_OC4_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cfe:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d02:	694d      	ldr	r5, [r1, #20]
 8005d04:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d08:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d0a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d0c:	684a      	ldr	r2, [r1, #4]
 8005d0e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d10:	6203      	str	r3, [r0, #32]
}
 8005d12:	bc30      	pop	{r4, r5}
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	40012c00 	.word	0x40012c00

08005d1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d1c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d1e:	6a03      	ldr	r3, [r0, #32]
 8005d20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d24:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d26:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d28:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d2a:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d2c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005d30:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d34:	680d      	ldr	r5, [r1, #0]
 8005d36:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d38:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d3c:	688d      	ldr	r5, [r1, #8]
 8005d3e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d42:	4d0f      	ldr	r5, [pc, #60]	; (8005d80 <TIM_OC5_SetConfig+0x64>)
 8005d44:	42a8      	cmp	r0, r5
 8005d46:	d00f      	beq.n	8005d68 <TIM_OC5_SetConfig+0x4c>
 8005d48:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005d4c:	42a8      	cmp	r0, r5
 8005d4e:	d00b      	beq.n	8005d68 <TIM_OC5_SetConfig+0x4c>
 8005d50:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005d54:	42a8      	cmp	r0, r5
 8005d56:	d007      	beq.n	8005d68 <TIM_OC5_SetConfig+0x4c>
 8005d58:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005d5c:	42a8      	cmp	r0, r5
 8005d5e:	d003      	beq.n	8005d68 <TIM_OC5_SetConfig+0x4c>
 8005d60:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005d64:	42a8      	cmp	r0, r5
 8005d66:	d104      	bne.n	8005d72 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d68:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d6c:	694d      	ldr	r5, [r1, #20]
 8005d6e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d72:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d74:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d76:	684a      	ldr	r2, [r1, #4]
 8005d78:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d7a:	6203      	str	r3, [r0, #32]
}
 8005d7c:	bc30      	pop	{r4, r5}
 8005d7e:	4770      	bx	lr
 8005d80:	40012c00 	.word	0x40012c00

08005d84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d84:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d86:	6a03      	ldr	r3, [r0, #32]
 8005d88:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005d8c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d8e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d90:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d92:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d94:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005d98:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d9c:	680d      	ldr	r5, [r1, #0]
 8005d9e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005da2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005da6:	688d      	ldr	r5, [r1, #8]
 8005da8:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dac:	4d0f      	ldr	r5, [pc, #60]	; (8005dec <TIM_OC6_SetConfig+0x68>)
 8005dae:	42a8      	cmp	r0, r5
 8005db0:	d00f      	beq.n	8005dd2 <TIM_OC6_SetConfig+0x4e>
 8005db2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005db6:	42a8      	cmp	r0, r5
 8005db8:	d00b      	beq.n	8005dd2 <TIM_OC6_SetConfig+0x4e>
 8005dba:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005dbe:	42a8      	cmp	r0, r5
 8005dc0:	d007      	beq.n	8005dd2 <TIM_OC6_SetConfig+0x4e>
 8005dc2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005dc6:	42a8      	cmp	r0, r5
 8005dc8:	d003      	beq.n	8005dd2 <TIM_OC6_SetConfig+0x4e>
 8005dca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005dce:	42a8      	cmp	r0, r5
 8005dd0:	d104      	bne.n	8005ddc <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005dd2:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005dd6:	694d      	ldr	r5, [r1, #20]
 8005dd8:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ddc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dde:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005de0:	684a      	ldr	r2, [r1, #4]
 8005de2:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005de4:	6203      	str	r3, [r0, #32]
}
 8005de6:	bc30      	pop	{r4, r5}
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	40012c00 	.word	0x40012c00

08005df0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005df0:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005df2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005df4:	6a04      	ldr	r4, [r0, #32]
 8005df6:	f024 0401 	bic.w	r4, r4, #1
 8005dfa:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dfc:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dfe:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e02:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e06:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8005e0a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e0c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005e0e:	6203      	str	r3, [r0, #32]
}
 8005e10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e16:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e18:	6a03      	ldr	r3, [r0, #32]
 8005e1a:	f023 0310 	bic.w	r3, r3, #16
 8005e1e:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e20:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8005e22:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e24:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e28:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e30:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e34:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005e36:	6203      	str	r3, [r0, #32]
}
 8005e38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e3e:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e44:	4319      	orrs	r1, r3
 8005e46:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e4a:	6081      	str	r1, [r0, #8]
 8005e4c:	4770      	bx	lr
	...

08005e50 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8005e50:	2302      	movs	r3, #2
 8005e52:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005e56:	6803      	ldr	r3, [r0, #0]
 8005e58:	6899      	ldr	r1, [r3, #8]
 8005e5a:	4a09      	ldr	r2, [pc, #36]	; (8005e80 <HAL_TIM_Base_Start+0x30>)
 8005e5c:	400a      	ands	r2, r1
 8005e5e:	2a06      	cmp	r2, #6
 8005e60:	d009      	beq.n	8005e76 <HAL_TIM_Base_Start+0x26>
 8005e62:	6899      	ldr	r1, [r3, #8]
 8005e64:	4a06      	ldr	r2, [pc, #24]	; (8005e80 <HAL_TIM_Base_Start+0x30>)
 8005e66:	400a      	ands	r2, r1
 8005e68:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005e6c:	d003      	beq.n	8005e76 <HAL_TIM_Base_Start+0x26>
    __HAL_TIM_ENABLE(htim);
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	f042 0201 	orr.w	r2, r2, #1
 8005e74:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005e76:	2301      	movs	r3, #1
 8005e78:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8005e7c:	2000      	movs	r0, #0
 8005e7e:	4770      	bx	lr
 8005e80:	00010007 	.word	0x00010007

08005e84 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e84:	6802      	ldr	r2, [r0, #0]
 8005e86:	68d3      	ldr	r3, [r2, #12]
 8005e88:	f043 0301 	orr.w	r3, r3, #1
 8005e8c:	60d3      	str	r3, [r2, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005e8e:	6803      	ldr	r3, [r0, #0]
 8005e90:	6899      	ldr	r1, [r3, #8]
 8005e92:	4a08      	ldr	r2, [pc, #32]	; (8005eb4 <HAL_TIM_Base_Start_IT+0x30>)
 8005e94:	400a      	ands	r2, r1
 8005e96:	2a06      	cmp	r2, #6
 8005e98:	d009      	beq.n	8005eae <HAL_TIM_Base_Start_IT+0x2a>
 8005e9a:	6899      	ldr	r1, [r3, #8]
 8005e9c:	4a05      	ldr	r2, [pc, #20]	; (8005eb4 <HAL_TIM_Base_Start_IT+0x30>)
 8005e9e:	400a      	ands	r2, r1
 8005ea0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005ea4:	d003      	beq.n	8005eae <HAL_TIM_Base_Start_IT+0x2a>
    __HAL_TIM_ENABLE(htim);
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	f042 0201 	orr.w	r2, r2, #1
 8005eac:	601a      	str	r2, [r3, #0]
}
 8005eae:	2000      	movs	r0, #0
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	00010007 	.word	0x00010007

08005eb8 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005eb8:	6802      	ldr	r2, [r0, #0]
 8005eba:	68d3      	ldr	r3, [r2, #12]
 8005ebc:	f023 0301 	bic.w	r3, r3, #1
 8005ec0:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8005ec2:	6803      	ldr	r3, [r0, #0]
 8005ec4:	6a19      	ldr	r1, [r3, #32]
 8005ec6:	f241 1211 	movw	r2, #4369	; 0x1111
 8005eca:	4211      	tst	r1, r2
 8005ecc:	d108      	bne.n	8005ee0 <HAL_TIM_Base_Stop_IT+0x28>
 8005ece:	6a19      	ldr	r1, [r3, #32]
 8005ed0:	f240 4244 	movw	r2, #1092	; 0x444
 8005ed4:	4211      	tst	r1, r2
 8005ed6:	d103      	bne.n	8005ee0 <HAL_TIM_Base_Stop_IT+0x28>
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	f022 0201 	bic.w	r2, r2, #1
 8005ede:	601a      	str	r2, [r3, #0]
}
 8005ee0:	2000      	movs	r0, #0
 8005ee2:	4770      	bx	lr

08005ee4 <HAL_TIM_PWM_MspInit>:
{
 8005ee4:	4770      	bx	lr

08005ee6 <HAL_TIM_OC_DelayElapsedCallback>:
{
 8005ee6:	4770      	bx	lr

08005ee8 <HAL_TIM_IC_CaptureCallback>:
{
 8005ee8:	4770      	bx	lr

08005eea <HAL_TIM_PWM_PulseFinishedCallback>:
{
 8005eea:	4770      	bx	lr

08005eec <HAL_TIM_TriggerCallback>:
{
 8005eec:	4770      	bx	lr

08005eee <HAL_TIM_IRQHandler>:
{
 8005eee:	b510      	push	{r4, lr}
 8005ef0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ef2:	6803      	ldr	r3, [r0, #0]
 8005ef4:	691a      	ldr	r2, [r3, #16]
 8005ef6:	f012 0f02 	tst.w	r2, #2
 8005efa:	d011      	beq.n	8005f20 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005efc:	68da      	ldr	r2, [r3, #12]
 8005efe:	f012 0f02 	tst.w	r2, #2
 8005f02:	d00d      	beq.n	8005f20 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f04:	f06f 0202 	mvn.w	r2, #2
 8005f08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f0e:	6803      	ldr	r3, [r0, #0]
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	f013 0f03 	tst.w	r3, #3
 8005f16:	d079      	beq.n	800600c <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8005f18:	f7ff ffe6 	bl	8005ee8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f20:	6823      	ldr	r3, [r4, #0]
 8005f22:	691a      	ldr	r2, [r3, #16]
 8005f24:	f012 0f04 	tst.w	r2, #4
 8005f28:	d012      	beq.n	8005f50 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f2a:	68da      	ldr	r2, [r3, #12]
 8005f2c:	f012 0f04 	tst.w	r2, #4
 8005f30:	d00e      	beq.n	8005f50 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f32:	f06f 0204 	mvn.w	r2, #4
 8005f36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f38:	2302      	movs	r3, #2
 8005f3a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f3c:	6823      	ldr	r3, [r4, #0]
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005f44:	d068      	beq.n	8006018 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005f46:	4620      	mov	r0, r4
 8005f48:	f7ff ffce 	bl	8005ee8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f50:	6823      	ldr	r3, [r4, #0]
 8005f52:	691a      	ldr	r2, [r3, #16]
 8005f54:	f012 0f08 	tst.w	r2, #8
 8005f58:	d012      	beq.n	8005f80 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f5a:	68da      	ldr	r2, [r3, #12]
 8005f5c:	f012 0f08 	tst.w	r2, #8
 8005f60:	d00e      	beq.n	8005f80 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f62:	f06f 0208 	mvn.w	r2, #8
 8005f66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f68:	2304      	movs	r3, #4
 8005f6a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f6c:	6823      	ldr	r3, [r4, #0]
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	f013 0f03 	tst.w	r3, #3
 8005f74:	d057      	beq.n	8006026 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8005f76:	4620      	mov	r0, r4
 8005f78:	f7ff ffb6 	bl	8005ee8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f80:	6823      	ldr	r3, [r4, #0]
 8005f82:	691a      	ldr	r2, [r3, #16]
 8005f84:	f012 0f10 	tst.w	r2, #16
 8005f88:	d012      	beq.n	8005fb0 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f8a:	68da      	ldr	r2, [r3, #12]
 8005f8c:	f012 0f10 	tst.w	r2, #16
 8005f90:	d00e      	beq.n	8005fb0 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f92:	f06f 0210 	mvn.w	r2, #16
 8005f96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f98:	2308      	movs	r3, #8
 8005f9a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005fa4:	d046      	beq.n	8006034 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	f7ff ff9e 	bl	8005ee8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fac:	2300      	movs	r3, #0
 8005fae:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fb0:	6823      	ldr	r3, [r4, #0]
 8005fb2:	691a      	ldr	r2, [r3, #16]
 8005fb4:	f012 0f01 	tst.w	r2, #1
 8005fb8:	d003      	beq.n	8005fc2 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fba:	68da      	ldr	r2, [r3, #12]
 8005fbc:	f012 0f01 	tst.w	r2, #1
 8005fc0:	d13f      	bne.n	8006042 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fc2:	6823      	ldr	r3, [r4, #0]
 8005fc4:	691a      	ldr	r2, [r3, #16]
 8005fc6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005fca:	d003      	beq.n	8005fd4 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fcc:	68da      	ldr	r2, [r3, #12]
 8005fce:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005fd2:	d13d      	bne.n	8006050 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005fd4:	6823      	ldr	r3, [r4, #0]
 8005fd6:	691a      	ldr	r2, [r3, #16]
 8005fd8:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005fdc:	d003      	beq.n	8005fe6 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fde:	68da      	ldr	r2, [r3, #12]
 8005fe0:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005fe4:	d13b      	bne.n	800605e <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	691a      	ldr	r2, [r3, #16]
 8005fea:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005fee:	d003      	beq.n	8005ff8 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ff0:	68da      	ldr	r2, [r3, #12]
 8005ff2:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005ff6:	d139      	bne.n	800606c <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ff8:	6823      	ldr	r3, [r4, #0]
 8005ffa:	691a      	ldr	r2, [r3, #16]
 8005ffc:	f012 0f20 	tst.w	r2, #32
 8006000:	d003      	beq.n	800600a <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006002:	68da      	ldr	r2, [r3, #12]
 8006004:	f012 0f20 	tst.w	r2, #32
 8006008:	d137      	bne.n	800607a <HAL_TIM_IRQHandler+0x18c>
 800600a:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800600c:	f7ff ff6b 	bl	8005ee6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006010:	4620      	mov	r0, r4
 8006012:	f7ff ff6a 	bl	8005eea <HAL_TIM_PWM_PulseFinishedCallback>
 8006016:	e781      	b.n	8005f1c <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006018:	4620      	mov	r0, r4
 800601a:	f7ff ff64 	bl	8005ee6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800601e:	4620      	mov	r0, r4
 8006020:	f7ff ff63 	bl	8005eea <HAL_TIM_PWM_PulseFinishedCallback>
 8006024:	e792      	b.n	8005f4c <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006026:	4620      	mov	r0, r4
 8006028:	f7ff ff5d 	bl	8005ee6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800602c:	4620      	mov	r0, r4
 800602e:	f7ff ff5c 	bl	8005eea <HAL_TIM_PWM_PulseFinishedCallback>
 8006032:	e7a3      	b.n	8005f7c <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006034:	4620      	mov	r0, r4
 8006036:	f7ff ff56 	bl	8005ee6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800603a:	4620      	mov	r0, r4
 800603c:	f7ff ff55 	bl	8005eea <HAL_TIM_PWM_PulseFinishedCallback>
 8006040:	e7b4      	b.n	8005fac <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006042:	f06f 0201 	mvn.w	r2, #1
 8006046:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006048:	4620      	mov	r0, r4
 800604a:	f008 fe29 	bl	800eca0 <HAL_TIM_PeriodElapsedCallback>
 800604e:	e7b8      	b.n	8005fc2 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006050:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006054:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006056:	4620      	mov	r0, r4
 8006058:	f000 fae3 	bl	8006622 <HAL_TIMEx_BreakCallback>
 800605c:	e7ba      	b.n	8005fd4 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800605e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006062:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8006064:	4620      	mov	r0, r4
 8006066:	f000 fadd 	bl	8006624 <HAL_TIMEx_Break2Callback>
 800606a:	e7bc      	b.n	8005fe6 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800606c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006070:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006072:	4620      	mov	r0, r4
 8006074:	f7ff ff3a 	bl	8005eec <HAL_TIM_TriggerCallback>
 8006078:	e7be      	b.n	8005ff8 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800607a:	f06f 0220 	mvn.w	r2, #32
 800607e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8006080:	4620      	mov	r0, r4
 8006082:	f000 facd 	bl	8006620 <HAL_TIMEx_CommutationCallback>
}
 8006086:	e7c0      	b.n	800600a <HAL_TIM_IRQHandler+0x11c>

08006088 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8006088:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800608a:	4a30      	ldr	r2, [pc, #192]	; (800614c <TIM_Base_SetConfig+0xc4>)
 800608c:	4290      	cmp	r0, r2
 800608e:	d012      	beq.n	80060b6 <TIM_Base_SetConfig+0x2e>
 8006090:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006094:	d00f      	beq.n	80060b6 <TIM_Base_SetConfig+0x2e>
 8006096:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800609a:	4290      	cmp	r0, r2
 800609c:	d00b      	beq.n	80060b6 <TIM_Base_SetConfig+0x2e>
 800609e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060a2:	4290      	cmp	r0, r2
 80060a4:	d007      	beq.n	80060b6 <TIM_Base_SetConfig+0x2e>
 80060a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060aa:	4290      	cmp	r0, r2
 80060ac:	d003      	beq.n	80060b6 <TIM_Base_SetConfig+0x2e>
 80060ae:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80060b2:	4290      	cmp	r0, r2
 80060b4:	d103      	bne.n	80060be <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80060ba:	684a      	ldr	r2, [r1, #4]
 80060bc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060be:	4a23      	ldr	r2, [pc, #140]	; (800614c <TIM_Base_SetConfig+0xc4>)
 80060c0:	4290      	cmp	r0, r2
 80060c2:	d01e      	beq.n	8006102 <TIM_Base_SetConfig+0x7a>
 80060c4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80060c8:	d01b      	beq.n	8006102 <TIM_Base_SetConfig+0x7a>
 80060ca:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80060ce:	4290      	cmp	r0, r2
 80060d0:	d017      	beq.n	8006102 <TIM_Base_SetConfig+0x7a>
 80060d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060d6:	4290      	cmp	r0, r2
 80060d8:	d013      	beq.n	8006102 <TIM_Base_SetConfig+0x7a>
 80060da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060de:	4290      	cmp	r0, r2
 80060e0:	d00f      	beq.n	8006102 <TIM_Base_SetConfig+0x7a>
 80060e2:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80060e6:	4290      	cmp	r0, r2
 80060e8:	d00b      	beq.n	8006102 <TIM_Base_SetConfig+0x7a>
 80060ea:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80060ee:	4290      	cmp	r0, r2
 80060f0:	d007      	beq.n	8006102 <TIM_Base_SetConfig+0x7a>
 80060f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060f6:	4290      	cmp	r0, r2
 80060f8:	d003      	beq.n	8006102 <TIM_Base_SetConfig+0x7a>
 80060fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060fe:	4290      	cmp	r0, r2
 8006100:	d103      	bne.n	800610a <TIM_Base_SetConfig+0x82>
    tmpcr1 &= ~TIM_CR1_CKD;
 8006102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006106:	68ca      	ldr	r2, [r1, #12]
 8006108:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800610a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800610e:	694a      	ldr	r2, [r1, #20]
 8006110:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006112:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006114:	688b      	ldr	r3, [r1, #8]
 8006116:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006118:	680b      	ldr	r3, [r1, #0]
 800611a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800611c:	4b0b      	ldr	r3, [pc, #44]	; (800614c <TIM_Base_SetConfig+0xc4>)
 800611e:	4298      	cmp	r0, r3
 8006120:	d00f      	beq.n	8006142 <TIM_Base_SetConfig+0xba>
 8006122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006126:	4298      	cmp	r0, r3
 8006128:	d00b      	beq.n	8006142 <TIM_Base_SetConfig+0xba>
 800612a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800612e:	4298      	cmp	r0, r3
 8006130:	d007      	beq.n	8006142 <TIM_Base_SetConfig+0xba>
 8006132:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006136:	4298      	cmp	r0, r3
 8006138:	d003      	beq.n	8006142 <TIM_Base_SetConfig+0xba>
 800613a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800613e:	4298      	cmp	r0, r3
 8006140:	d101      	bne.n	8006146 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 8006142:	690b      	ldr	r3, [r1, #16]
 8006144:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006146:	2301      	movs	r3, #1
 8006148:	6143      	str	r3, [r0, #20]
 800614a:	4770      	bx	lr
 800614c:	40012c00 	.word	0x40012c00

08006150 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006150:	b1a8      	cbz	r0, 800617e <HAL_TIM_Base_Init+0x2e>
{
 8006152:	b510      	push	{r4, lr}
 8006154:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006156:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800615a:	b15b      	cbz	r3, 8006174 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 800615c:	2302      	movs	r3, #2
 800615e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006162:	1d21      	adds	r1, r4, #4
 8006164:	6820      	ldr	r0, [r4, #0]
 8006166:	f7ff ff8f 	bl	8006088 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800616a:	2301      	movs	r3, #1
 800616c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006170:	2000      	movs	r0, #0
 8006172:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006174:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006178:	f009 fbe6 	bl	800f948 <HAL_TIM_Base_MspInit>
 800617c:	e7ee      	b.n	800615c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800617e:	2001      	movs	r0, #1
 8006180:	4770      	bx	lr

08006182 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006182:	b1a8      	cbz	r0, 80061b0 <HAL_TIM_PWM_Init+0x2e>
{
 8006184:	b510      	push	{r4, lr}
 8006186:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006188:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800618c:	b15b      	cbz	r3, 80061a6 <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 800618e:	2302      	movs	r3, #2
 8006190:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006194:	1d21      	adds	r1, r4, #4
 8006196:	6820      	ldr	r0, [r4, #0]
 8006198:	f7ff ff76 	bl	8006088 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800619c:	2301      	movs	r3, #1
 800619e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80061a2:	2000      	movs	r0, #0
 80061a4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80061a6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80061aa:	f7ff fe9b 	bl	8005ee4 <HAL_TIM_PWM_MspInit>
 80061ae:	e7ee      	b.n	800618e <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80061b0:	2001      	movs	r0, #1
 80061b2:	4770      	bx	lr

080061b4 <TIM_OC2_SetConfig>:
{
 80061b4:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061b6:	6a03      	ldr	r3, [r0, #32]
 80061b8:	f023 0310 	bic.w	r3, r3, #16
 80061bc:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80061be:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80061c0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80061c2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061c4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80061c8:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061cc:	680d      	ldr	r5, [r1, #0]
 80061ce:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80061d2:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061d6:	688d      	ldr	r5, [r1, #8]
 80061d8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061dc:	4d18      	ldr	r5, [pc, #96]	; (8006240 <TIM_OC2_SetConfig+0x8c>)
 80061de:	42a8      	cmp	r0, r5
 80061e0:	d025      	beq.n	800622e <TIM_OC2_SetConfig+0x7a>
 80061e2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80061e6:	42a8      	cmp	r0, r5
 80061e8:	d021      	beq.n	800622e <TIM_OC2_SetConfig+0x7a>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ea:	4d15      	ldr	r5, [pc, #84]	; (8006240 <TIM_OC2_SetConfig+0x8c>)
 80061ec:	42a8      	cmp	r0, r5
 80061ee:	d00f      	beq.n	8006210 <TIM_OC2_SetConfig+0x5c>
 80061f0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80061f4:	42a8      	cmp	r0, r5
 80061f6:	d00b      	beq.n	8006210 <TIM_OC2_SetConfig+0x5c>
 80061f8:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80061fc:	42a8      	cmp	r0, r5
 80061fe:	d007      	beq.n	8006210 <TIM_OC2_SetConfig+0x5c>
 8006200:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006204:	42a8      	cmp	r0, r5
 8006206:	d003      	beq.n	8006210 <TIM_OC2_SetConfig+0x5c>
 8006208:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800620c:	42a8      	cmp	r0, r5
 800620e:	d107      	bne.n	8006220 <TIM_OC2_SetConfig+0x6c>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006210:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006214:	694d      	ldr	r5, [r1, #20]
 8006216:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800621a:	698d      	ldr	r5, [r1, #24]
 800621c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8006220:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006222:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8006224:	684a      	ldr	r2, [r1, #4]
 8006226:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006228:	6203      	str	r3, [r0, #32]
}
 800622a:	bc30      	pop	{r4, r5}
 800622c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 800622e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006232:	68cd      	ldr	r5, [r1, #12]
 8006234:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006238:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800623c:	e7d5      	b.n	80061ea <TIM_OC2_SetConfig+0x36>
 800623e:	bf00      	nop
 8006240:	40012c00 	.word	0x40012c00

08006244 <HAL_TIM_PWM_ConfigChannel>:
{
 8006244:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8006246:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800624a:	2b01      	cmp	r3, #1
 800624c:	f000 8092 	beq.w	8006374 <HAL_TIM_PWM_ConfigChannel+0x130>
 8006250:	460d      	mov	r5, r1
 8006252:	4604      	mov	r4, r0
 8006254:	2301      	movs	r3, #1
 8006256:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800625a:	2302      	movs	r3, #2
 800625c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8006260:	2a14      	cmp	r2, #20
 8006262:	d81e      	bhi.n	80062a2 <HAL_TIM_PWM_ConfigChannel+0x5e>
 8006264:	e8df f002 	tbb	[pc, r2]
 8006268:	1d1d1d0b 	.word	0x1d1d1d0b
 800626c:	1d1d1d24 	.word	0x1d1d1d24
 8006270:	1d1d1d38 	.word	0x1d1d1d38
 8006274:	1d1d1d4b 	.word	0x1d1d1d4b
 8006278:	1d1d1d5f 	.word	0x1d1d1d5f
 800627c:	72          	.byte	0x72
 800627d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800627e:	6800      	ldr	r0, [r0, #0]
 8006280:	f7ff fc82 	bl	8005b88 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006284:	6822      	ldr	r2, [r4, #0]
 8006286:	6993      	ldr	r3, [r2, #24]
 8006288:	f043 0308 	orr.w	r3, r3, #8
 800628c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800628e:	6822      	ldr	r2, [r4, #0]
 8006290:	6993      	ldr	r3, [r2, #24]
 8006292:	f023 0304 	bic.w	r3, r3, #4
 8006296:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006298:	6822      	ldr	r2, [r4, #0]
 800629a:	6993      	ldr	r3, [r2, #24]
 800629c:	6929      	ldr	r1, [r5, #16]
 800629e:	430b      	orrs	r3, r1
 80062a0:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 80062a2:	2301      	movs	r3, #1
 80062a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80062a8:	2000      	movs	r0, #0
 80062aa:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80062ae:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062b0:	6800      	ldr	r0, [r0, #0]
 80062b2:	f7ff ff7f 	bl	80061b4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062b6:	6822      	ldr	r2, [r4, #0]
 80062b8:	6993      	ldr	r3, [r2, #24]
 80062ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80062be:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062c0:	6822      	ldr	r2, [r4, #0]
 80062c2:	6993      	ldr	r3, [r2, #24]
 80062c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062c8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062ca:	6822      	ldr	r2, [r4, #0]
 80062cc:	6993      	ldr	r3, [r2, #24]
 80062ce:	6929      	ldr	r1, [r5, #16]
 80062d0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80062d4:	6193      	str	r3, [r2, #24]
      break;
 80062d6:	e7e4      	b.n	80062a2 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062d8:	6800      	ldr	r0, [r0, #0]
 80062da:	f7ff fca3 	bl	8005c24 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062de:	6822      	ldr	r2, [r4, #0]
 80062e0:	69d3      	ldr	r3, [r2, #28]
 80062e2:	f043 0308 	orr.w	r3, r3, #8
 80062e6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062e8:	6822      	ldr	r2, [r4, #0]
 80062ea:	69d3      	ldr	r3, [r2, #28]
 80062ec:	f023 0304 	bic.w	r3, r3, #4
 80062f0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062f2:	6822      	ldr	r2, [r4, #0]
 80062f4:	69d3      	ldr	r3, [r2, #28]
 80062f6:	6929      	ldr	r1, [r5, #16]
 80062f8:	430b      	orrs	r3, r1
 80062fa:	61d3      	str	r3, [r2, #28]
      break;
 80062fc:	e7d1      	b.n	80062a2 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062fe:	6800      	ldr	r0, [r0, #0]
 8006300:	f7ff fcd6 	bl	8005cb0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006304:	6822      	ldr	r2, [r4, #0]
 8006306:	69d3      	ldr	r3, [r2, #28]
 8006308:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800630c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800630e:	6822      	ldr	r2, [r4, #0]
 8006310:	69d3      	ldr	r3, [r2, #28]
 8006312:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006316:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006318:	6822      	ldr	r2, [r4, #0]
 800631a:	69d3      	ldr	r3, [r2, #28]
 800631c:	6929      	ldr	r1, [r5, #16]
 800631e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006322:	61d3      	str	r3, [r2, #28]
      break;
 8006324:	e7bd      	b.n	80062a2 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006326:	6800      	ldr	r0, [r0, #0]
 8006328:	f7ff fcf8 	bl	8005d1c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800632c:	6822      	ldr	r2, [r4, #0]
 800632e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006330:	f043 0308 	orr.w	r3, r3, #8
 8006334:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006336:	6822      	ldr	r2, [r4, #0]
 8006338:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800633a:	f023 0304 	bic.w	r3, r3, #4
 800633e:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006340:	6822      	ldr	r2, [r4, #0]
 8006342:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006344:	6929      	ldr	r1, [r5, #16]
 8006346:	430b      	orrs	r3, r1
 8006348:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 800634a:	e7aa      	b.n	80062a2 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800634c:	6800      	ldr	r0, [r0, #0]
 800634e:	f7ff fd19 	bl	8005d84 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006352:	6822      	ldr	r2, [r4, #0]
 8006354:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006356:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800635a:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800635c:	6822      	ldr	r2, [r4, #0]
 800635e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006360:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006364:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006366:	6822      	ldr	r2, [r4, #0]
 8006368:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800636a:	6929      	ldr	r1, [r5, #16]
 800636c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006370:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 8006372:	e796      	b.n	80062a2 <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 8006374:	2002      	movs	r0, #2
}
 8006376:	bd38      	pop	{r3, r4, r5, pc}

08006378 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006378:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800637a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800637c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006380:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8006384:	4319      	orrs	r1, r3
 8006386:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006388:	6084      	str	r4, [r0, #8]
}
 800638a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006390:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006394:	2b01      	cmp	r3, #1
 8006396:	d073      	beq.n	8006480 <HAL_TIM_ConfigClockSource+0xf0>
{
 8006398:	b510      	push	{r4, lr}
 800639a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800639c:	2301      	movs	r3, #1
 800639e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80063a2:	2302      	movs	r3, #2
 80063a4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80063a8:	6802      	ldr	r2, [r0, #0]
 80063aa:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063ac:	4b35      	ldr	r3, [pc, #212]	; (8006484 <HAL_TIM_ConfigClockSource+0xf4>)
 80063ae:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 80063b0:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80063b2:	680b      	ldr	r3, [r1, #0]
 80063b4:	2b40      	cmp	r3, #64	; 0x40
 80063b6:	d059      	beq.n	800646c <HAL_TIM_ConfigClockSource+0xdc>
 80063b8:	d910      	bls.n	80063dc <HAL_TIM_ConfigClockSource+0x4c>
 80063ba:	2b70      	cmp	r3, #112	; 0x70
 80063bc:	d03c      	beq.n	8006438 <HAL_TIM_ConfigClockSource+0xa8>
 80063be:	d81b      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x68>
 80063c0:	2b50      	cmp	r3, #80	; 0x50
 80063c2:	d049      	beq.n	8006458 <HAL_TIM_ConfigClockSource+0xc8>
 80063c4:	2b60      	cmp	r3, #96	; 0x60
 80063c6:	d130      	bne.n	800642a <HAL_TIM_ConfigClockSource+0x9a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063c8:	68ca      	ldr	r2, [r1, #12]
 80063ca:	6849      	ldr	r1, [r1, #4]
 80063cc:	6820      	ldr	r0, [r4, #0]
 80063ce:	f7ff fd22 	bl	8005e16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063d2:	2160      	movs	r1, #96	; 0x60
 80063d4:	6820      	ldr	r0, [r4, #0]
 80063d6:	f7ff fd32 	bl	8005e3e <TIM_ITRx_SetConfig>
      break;
 80063da:	e026      	b.n	800642a <HAL_TIM_ConfigClockSource+0x9a>
  switch (sClockSourceConfig->ClockSource)
 80063dc:	2b10      	cmp	r3, #16
 80063de:	d006      	beq.n	80063ee <HAL_TIM_ConfigClockSource+0x5e>
 80063e0:	d904      	bls.n	80063ec <HAL_TIM_ConfigClockSource+0x5c>
 80063e2:	2b20      	cmp	r3, #32
 80063e4:	d003      	beq.n	80063ee <HAL_TIM_ConfigClockSource+0x5e>
 80063e6:	2b30      	cmp	r3, #48	; 0x30
 80063e8:	d001      	beq.n	80063ee <HAL_TIM_ConfigClockSource+0x5e>
 80063ea:	e01e      	b.n	800642a <HAL_TIM_ConfigClockSource+0x9a>
 80063ec:	b9eb      	cbnz	r3, 800642a <HAL_TIM_ConfigClockSource+0x9a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063ee:	4619      	mov	r1, r3
 80063f0:	6820      	ldr	r0, [r4, #0]
 80063f2:	f7ff fd24 	bl	8005e3e <TIM_ITRx_SetConfig>
      break;
 80063f6:	e018      	b.n	800642a <HAL_TIM_ConfigClockSource+0x9a>
  switch (sClockSourceConfig->ClockSource)
 80063f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063fc:	d00e      	beq.n	800641c <HAL_TIM_ConfigClockSource+0x8c>
 80063fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006402:	d112      	bne.n	800642a <HAL_TIM_ConfigClockSource+0x9a>
      TIM_ETR_SetConfig(htim->Instance,
 8006404:	68cb      	ldr	r3, [r1, #12]
 8006406:	684a      	ldr	r2, [r1, #4]
 8006408:	6889      	ldr	r1, [r1, #8]
 800640a:	6820      	ldr	r0, [r4, #0]
 800640c:	f7ff ffb4 	bl	8006378 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006410:	6822      	ldr	r2, [r4, #0]
 8006412:	6893      	ldr	r3, [r2, #8]
 8006414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006418:	6093      	str	r3, [r2, #8]
      break;
 800641a:	e006      	b.n	800642a <HAL_TIM_ConfigClockSource+0x9a>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800641c:	6822      	ldr	r2, [r4, #0]
 800641e:	6893      	ldr	r3, [r2, #8]
 8006420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006424:	f023 0307 	bic.w	r3, r3, #7
 8006428:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 800642a:	2301      	movs	r3, #1
 800642c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006430:	2000      	movs	r0, #0
 8006432:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8006436:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8006438:	68cb      	ldr	r3, [r1, #12]
 800643a:	684a      	ldr	r2, [r1, #4]
 800643c:	6889      	ldr	r1, [r1, #8]
 800643e:	6820      	ldr	r0, [r4, #0]
 8006440:	f7ff ff9a 	bl	8006378 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006444:	6822      	ldr	r2, [r4, #0]
 8006446:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800644c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006450:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8006454:	6093      	str	r3, [r2, #8]
      break;
 8006456:	e7e8      	b.n	800642a <HAL_TIM_ConfigClockSource+0x9a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006458:	68ca      	ldr	r2, [r1, #12]
 800645a:	6849      	ldr	r1, [r1, #4]
 800645c:	6820      	ldr	r0, [r4, #0]
 800645e:	f7ff fcc7 	bl	8005df0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006462:	2150      	movs	r1, #80	; 0x50
 8006464:	6820      	ldr	r0, [r4, #0]
 8006466:	f7ff fcea 	bl	8005e3e <TIM_ITRx_SetConfig>
      break;
 800646a:	e7de      	b.n	800642a <HAL_TIM_ConfigClockSource+0x9a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800646c:	68ca      	ldr	r2, [r1, #12]
 800646e:	6849      	ldr	r1, [r1, #4]
 8006470:	6820      	ldr	r0, [r4, #0]
 8006472:	f7ff fcbd 	bl	8005df0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006476:	2140      	movs	r1, #64	; 0x40
 8006478:	6820      	ldr	r0, [r4, #0]
 800647a:	f7ff fce0 	bl	8005e3e <TIM_ITRx_SetConfig>
      break;
 800647e:	e7d4      	b.n	800642a <HAL_TIM_ConfigClockSource+0x9a>
  __HAL_LOCK(htim);
 8006480:	2002      	movs	r0, #2
 8006482:	4770      	bx	lr
 8006484:	fffe0088 	.word	0xfffe0088

08006488 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006488:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800648a:	f001 011f 	and.w	r1, r1, #31
 800648e:	2301      	movs	r3, #1
 8006490:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006494:	6a03      	ldr	r3, [r0, #32]
 8006496:	ea23 0304 	bic.w	r3, r3, r4
 800649a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800649c:	6a03      	ldr	r3, [r0, #32]
 800649e:	408a      	lsls	r2, r1
 80064a0:	4313      	orrs	r3, r2
 80064a2:	6203      	str	r3, [r0, #32]
}
 80064a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064a8:	4770      	bx	lr
	...

080064ac <HAL_TIM_PWM_Start>:
{
 80064ac:	b510      	push	{r4, lr}
 80064ae:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064b0:	2201      	movs	r2, #1
 80064b2:	6800      	ldr	r0, [r0, #0]
 80064b4:	f7ff ffe8 	bl	8006488 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064b8:	6823      	ldr	r3, [r4, #0]
 80064ba:	4a1a      	ldr	r2, [pc, #104]	; (8006524 <HAL_TIM_PWM_Start+0x78>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d029      	beq.n	8006514 <HAL_TIM_PWM_Start+0x68>
 80064c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d027      	beq.n	8006518 <HAL_TIM_PWM_Start+0x6c>
 80064c8:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d025      	beq.n	800651c <HAL_TIM_PWM_Start+0x70>
 80064d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d023      	beq.n	8006520 <HAL_TIM_PWM_Start+0x74>
 80064d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064dc:	4293      	cmp	r3, r2
 80064de:	d017      	beq.n	8006510 <HAL_TIM_PWM_Start+0x64>
 80064e0:	2200      	movs	r2, #0
 80064e2:	b11a      	cbz	r2, 80064ec <HAL_TIM_PWM_Start+0x40>
    __HAL_TIM_MOE_ENABLE(htim);
 80064e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064ea:	645a      	str	r2, [r3, #68]	; 0x44
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 80064ec:	6823      	ldr	r3, [r4, #0]
 80064ee:	6899      	ldr	r1, [r3, #8]
 80064f0:	4a0d      	ldr	r2, [pc, #52]	; (8006528 <HAL_TIM_PWM_Start+0x7c>)
 80064f2:	400a      	ands	r2, r1
 80064f4:	2a06      	cmp	r2, #6
 80064f6:	d009      	beq.n	800650c <HAL_TIM_PWM_Start+0x60>
 80064f8:	6899      	ldr	r1, [r3, #8]
 80064fa:	4a0b      	ldr	r2, [pc, #44]	; (8006528 <HAL_TIM_PWM_Start+0x7c>)
 80064fc:	400a      	ands	r2, r1
 80064fe:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006502:	d003      	beq.n	800650c <HAL_TIM_PWM_Start+0x60>
    __HAL_TIM_ENABLE(htim);
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	f042 0201 	orr.w	r2, r2, #1
 800650a:	601a      	str	r2, [r3, #0]
}
 800650c:	2000      	movs	r0, #0
 800650e:	bd10      	pop	{r4, pc}
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006510:	2201      	movs	r2, #1
 8006512:	e7e6      	b.n	80064e2 <HAL_TIM_PWM_Start+0x36>
 8006514:	2201      	movs	r2, #1
 8006516:	e7e4      	b.n	80064e2 <HAL_TIM_PWM_Start+0x36>
 8006518:	2201      	movs	r2, #1
 800651a:	e7e2      	b.n	80064e2 <HAL_TIM_PWM_Start+0x36>
 800651c:	2201      	movs	r2, #1
 800651e:	e7e0      	b.n	80064e2 <HAL_TIM_PWM_Start+0x36>
 8006520:	2201      	movs	r2, #1
 8006522:	e7de      	b.n	80064e2 <HAL_TIM_PWM_Start+0x36>
 8006524:	40012c00 	.word	0x40012c00
 8006528:	00010007 	.word	0x00010007

0800652c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800652c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006530:	2b01      	cmp	r3, #1
 8006532:	d029      	beq.n	8006588 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
{
 8006534:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8006536:	2301      	movs	r3, #1
 8006538:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800653c:	2302      	movs	r3, #2
 800653e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006542:	6804      	ldr	r4, [r0, #0]
 8006544:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006546:	68a2      	ldr	r2, [r4, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006548:	4d10      	ldr	r5, [pc, #64]	; (800658c <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 800654a:	42ac      	cmp	r4, r5
 800654c:	d017      	beq.n	800657e <HAL_TIMEx_MasterConfigSynchronization+0x52>
 800654e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006552:	42ac      	cmp	r4, r5
 8006554:	d013      	beq.n	800657e <HAL_TIMEx_MasterConfigSynchronization+0x52>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800655a:	680d      	ldr	r5, [r1, #0]
 800655c:	432b      	orrs	r3, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800655e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006562:	6889      	ldr	r1, [r1, #8]
 8006564:	430a      	orrs	r2, r1

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006566:	6063      	str	r3, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006568:	6803      	ldr	r3, [r0, #0]
 800656a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800656c:	2301      	movs	r3, #1
 800656e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006572:	2300      	movs	r3, #0
 8006574:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8006578:	4618      	mov	r0, r3
}
 800657a:	bc30      	pop	{r4, r5}
 800657c:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 800657e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006582:	684d      	ldr	r5, [r1, #4]
 8006584:	432b      	orrs	r3, r5
 8006586:	e7e6      	b.n	8006556 <HAL_TIMEx_MasterConfigSynchronization+0x2a>
  __HAL_LOCK(htim);
 8006588:	2002      	movs	r0, #2
 800658a:	4770      	bx	lr
 800658c:	40012c00 	.word	0x40012c00

08006590 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006590:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006594:	2b01      	cmp	r3, #1
 8006596:	d03f      	beq.n	8006618 <HAL_TIMEx_ConfigBreakDeadTime+0x88>
{
 8006598:	b410      	push	{r4}
  __HAL_LOCK(htim);
 800659a:	2301      	movs	r3, #1
 800659c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80065a0:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065a6:	688a      	ldr	r2, [r1, #8]
 80065a8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80065aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065ae:	684a      	ldr	r2, [r1, #4]
 80065b0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80065b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065b6:	680a      	ldr	r2, [r1, #0]
 80065b8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80065ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065be:	690a      	ldr	r2, [r1, #16]
 80065c0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80065c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065c6:	694a      	ldr	r2, [r1, #20]
 80065c8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80065ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065ce:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80065d0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80065d2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80065d6:	698a      	ldr	r2, [r1, #24]
 80065d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80065dc:	6802      	ldr	r2, [r0, #0]
 80065de:	4c0f      	ldr	r4, [pc, #60]	; (800661c <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 80065e0:	42a2      	cmp	r2, r4
 80065e2:	d00b      	beq.n	80065fc <HAL_TIMEx_ConfigBreakDeadTime+0x6c>
 80065e4:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80065e8:	42a2      	cmp	r2, r4
 80065ea:	d007      	beq.n	80065fc <HAL_TIMEx_ConfigBreakDeadTime+0x6c>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80065ec:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80065ee:	2300      	movs	r3, #0
 80065f0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80065f4:	4618      	mov	r0, r3
}
 80065f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065fa:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80065fc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006600:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8006602:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006606:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800660a:	69cc      	ldr	r4, [r1, #28]
 800660c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800660e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006612:	6a09      	ldr	r1, [r1, #32]
 8006614:	430b      	orrs	r3, r1
 8006616:	e7e9      	b.n	80065ec <HAL_TIMEx_ConfigBreakDeadTime+0x5c>
  __HAL_LOCK(htim);
 8006618:	2002      	movs	r0, #2
 800661a:	4770      	bx	lr
 800661c:	40012c00 	.word	0x40012c00

08006620 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8006620:	4770      	bx	lr

08006622 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006622:	4770      	bx	lr

08006624 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006624:	4770      	bx	lr

08006626 <UART_EndRxTransfer>:
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006626:	6802      	ldr	r2, [r0, #0]
 8006628:	6813      	ldr	r3, [r2, #0]
 800662a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800662e:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006630:	6802      	ldr	r2, [r0, #0]
 8006632:	6893      	ldr	r3, [r2, #8]
 8006634:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006638:	f023 0301 	bic.w	r3, r3, #1
 800663c:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800663e:	2320      	movs	r3, #32
 8006640:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006644:	2300      	movs	r3, #0
 8006646:	66c3      	str	r3, [r0, #108]	; 0x6c
 8006648:	4770      	bx	lr

0800664a <HAL_UART_TxCpltCallback>:
{
 800664a:	4770      	bx	lr

0800664c <UART_EndTransmit_IT>:
  * @param huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800664c:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800664e:	6801      	ldr	r1, [r0, #0]
 8006650:	680a      	ldr	r2, [r1, #0]
 8006652:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006656:	600a      	str	r2, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006658:	2220      	movs	r2, #32
 800665a:	f880 207d 	strb.w	r2, [r0, #125]	; 0x7d

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800665e:	2200      	movs	r2, #0
 8006660:	6702      	str	r2, [r0, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006662:	f7ff fff2 	bl	800664a <HAL_UART_TxCpltCallback>
 8006666:	bd08      	pop	{r3, pc}

08006668 <HAL_UART_ErrorCallback>:
{
 8006668:	4770      	bx	lr
	...

0800666c <HAL_UART_IRQHandler>:
{
 800666c:	b570      	push	{r4, r5, r6, lr}
 800666e:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006670:	6802      	ldr	r2, [r0, #0]
 8006672:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006674:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006676:	6891      	ldr	r1, [r2, #8]
  if (errorflags == RESET)
 8006678:	f013 050f 	ands.w	r5, r3, #15
 800667c:	d10f      	bne.n	800669e <HAL_UART_IRQHandler+0x32>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != RESET)
 800667e:	f013 0f20 	tst.w	r3, #32
 8006682:	d00c      	beq.n	800669e <HAL_UART_IRQHandler+0x32>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
 8006684:	f010 0f20 	tst.w	r0, #32
 8006688:	d102      	bne.n	8006690 <HAL_UART_IRQHandler+0x24>
            || ((cr3its & USART_CR3_RXFTIE) != RESET)))
 800668a:	f011 5f80 	tst.w	r1, #268435456	; 0x10000000
 800668e:	d006      	beq.n	800669e <HAL_UART_IRQHandler+0x32>
      if (huart->RxISR != NULL)
 8006690:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006692:	2b00      	cmp	r3, #0
 8006694:	f000 80b5 	beq.w	8006802 <HAL_UART_IRQHandler+0x196>
        huart->RxISR(huart);
 8006698:	4620      	mov	r0, r4
 800669a:	4798      	blx	r3
 800669c:	bd70      	pop	{r4, r5, r6, pc}
  if ((errorflags != RESET)
 800669e:	2d00      	cmp	r5, #0
 80066a0:	f000 8083 	beq.w	80067aa <HAL_UART_IRQHandler+0x13e>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)
 80066a4:	4d5d      	ldr	r5, [pc, #372]	; (800681c <HAL_UART_IRQHandler+0x1b0>)
 80066a6:	400d      	ands	r5, r1
 80066a8:	d102      	bne.n	80066b0 <HAL_UART_IRQHandler+0x44>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != RESET))))
 80066aa:	f410 7f90 	tst.w	r0, #288	; 0x120
 80066ae:	d07c      	beq.n	80067aa <HAL_UART_IRQHandler+0x13e>
    if (((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80066b0:	f013 0f01 	tst.w	r3, #1
 80066b4:	d009      	beq.n	80066ca <HAL_UART_IRQHandler+0x5e>
 80066b6:	f410 7f80 	tst.w	r0, #256	; 0x100
 80066ba:	d006      	beq.n	80066ca <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80066bc:	2601      	movs	r6, #1
 80066be:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066c0:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80066c4:	4332      	orrs	r2, r6
 80066c6:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066ca:	f013 0f02 	tst.w	r3, #2
 80066ce:	d00b      	beq.n	80066e8 <HAL_UART_IRQHandler+0x7c>
 80066d0:	f011 0f01 	tst.w	r1, #1
 80066d4:	d008      	beq.n	80066e8 <HAL_UART_IRQHandler+0x7c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80066d6:	6822      	ldr	r2, [r4, #0]
 80066d8:	2602      	movs	r6, #2
 80066da:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066dc:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80066e0:	f042 0204 	orr.w	r2, r2, #4
 80066e4:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066e8:	f013 0f04 	tst.w	r3, #4
 80066ec:	d00b      	beq.n	8006706 <HAL_UART_IRQHandler+0x9a>
 80066ee:	f011 0f01 	tst.w	r1, #1
 80066f2:	d008      	beq.n	8006706 <HAL_UART_IRQHandler+0x9a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80066f4:	6822      	ldr	r2, [r4, #0]
 80066f6:	2604      	movs	r6, #4
 80066f8:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066fa:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80066fe:	f042 0202 	orr.w	r2, r2, #2
 8006702:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != RESET)
 8006706:	f013 0f08 	tst.w	r3, #8
 800670a:	d00b      	beq.n	8006724 <HAL_UART_IRQHandler+0xb8>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET) ||
 800670c:	f010 0f20 	tst.w	r0, #32
 8006710:	d100      	bne.n	8006714 <HAL_UART_IRQHandler+0xa8>
 8006712:	b13d      	cbz	r5, 8006724 <HAL_UART_IRQHandler+0xb8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006714:	6822      	ldr	r2, [r4, #0]
 8006716:	2508      	movs	r5, #8
 8006718:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800671a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800671e:	432a      	orrs	r2, r5
 8006720:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006724:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8006728:	2a00      	cmp	r2, #0
 800672a:	d06a      	beq.n	8006802 <HAL_UART_IRQHandler+0x196>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != RESET)
 800672c:	f013 0f20 	tst.w	r3, #32
 8006730:	d009      	beq.n	8006746 <HAL_UART_IRQHandler+0xda>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
 8006732:	f010 0f20 	tst.w	r0, #32
 8006736:	d102      	bne.n	800673e <HAL_UART_IRQHandler+0xd2>
              || ((cr3its & USART_CR3_RXFTIE) != RESET)))
 8006738:	f011 5f80 	tst.w	r1, #268435456	; 0x10000000
 800673c:	d003      	beq.n	8006746 <HAL_UART_IRQHandler+0xda>
        if (huart->RxISR != NULL)
 800673e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006740:	b10b      	cbz	r3, 8006746 <HAL_UART_IRQHandler+0xda>
          huart->RxISR(huart);
 8006742:	4620      	mov	r0, r4
 8006744:	4798      	blx	r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8006746:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800674a:	f013 0f08 	tst.w	r3, #8
 800674e:	d104      	bne.n	800675a <HAL_UART_IRQHandler+0xee>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8006750:	6823      	ldr	r3, [r4, #0]
 8006752:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8006754:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006758:	d020      	beq.n	800679c <HAL_UART_IRQHandler+0x130>
        UART_EndRxTransfer(huart);
 800675a:	4620      	mov	r0, r4
 800675c:	f7ff ff63 	bl	8006626 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006760:	6823      	ldr	r3, [r4, #0]
 8006762:	689a      	ldr	r2, [r3, #8]
 8006764:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006768:	d014      	beq.n	8006794 <HAL_UART_IRQHandler+0x128>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800676a:	689a      	ldr	r2, [r3, #8]
 800676c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006770:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8006772:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006774:	b153      	cbz	r3, 800678c <HAL_UART_IRQHandler+0x120>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006776:	4a2a      	ldr	r2, [pc, #168]	; (8006820 <HAL_UART_IRQHandler+0x1b4>)
 8006778:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800677a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800677c:	f7fb fbb4 	bl	8001ee8 <HAL_DMA_Abort_IT>
 8006780:	2800      	cmp	r0, #0
 8006782:	d03e      	beq.n	8006802 <HAL_UART_IRQHandler+0x196>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006784:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006786:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006788:	4798      	blx	r3
 800678a:	bd70      	pop	{r4, r5, r6, pc}
            HAL_UART_ErrorCallback(huart);
 800678c:	4620      	mov	r0, r4
 800678e:	f7ff ff6b 	bl	8006668 <HAL_UART_ErrorCallback>
 8006792:	bd70      	pop	{r4, r5, r6, pc}
          HAL_UART_ErrorCallback(huart);
 8006794:	4620      	mov	r0, r4
 8006796:	f7ff ff67 	bl	8006668 <HAL_UART_ErrorCallback>
 800679a:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800679c:	4620      	mov	r0, r4
 800679e:	f7ff ff63 	bl	8006668 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067a2:	2300      	movs	r3, #0
 80067a4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 80067a8:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80067aa:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80067ae:	d002      	beq.n	80067b6 <HAL_UART_IRQHandler+0x14a>
 80067b0:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 80067b4:	d10d      	bne.n	80067d2 <HAL_UART_IRQHandler+0x166>
  if (((isrflags & USART_ISR_TXE_TXFNF) != RESET)
 80067b6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80067ba:	d011      	beq.n	80067e0 <HAL_UART_IRQHandler+0x174>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != RESET)
 80067bc:	f010 0f80 	tst.w	r0, #128	; 0x80
 80067c0:	d102      	bne.n	80067c8 <HAL_UART_IRQHandler+0x15c>
          || ((cr3its & USART_CR3_TXFTIE) != RESET)))
 80067c2:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 80067c6:	d00b      	beq.n	80067e0 <HAL_UART_IRQHandler+0x174>
    if (huart->TxISR != NULL)
 80067c8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80067ca:	b1d3      	cbz	r3, 8006802 <HAL_UART_IRQHandler+0x196>
      huart->TxISR(huart);
 80067cc:	4620      	mov	r0, r4
 80067ce:	4798      	blx	r3
 80067d0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80067d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80067d6:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80067d8:	4620      	mov	r0, r4
 80067da:	f001 f805 	bl	80077e8 <HAL_UARTEx_WakeupCallback>
    return;
 80067de:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80067e0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80067e4:	d002      	beq.n	80067ec <HAL_UART_IRQHandler+0x180>
 80067e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80067ea:	d10b      	bne.n	8006804 <HAL_UART_IRQHandler+0x198>
  if (((isrflags & USART_ISR_TXFE) != RESET) && ((cr1its & USART_CR1_TXFEIE) != RESET))
 80067ec:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80067f0:	d002      	beq.n	80067f8 <HAL_UART_IRQHandler+0x18c>
 80067f2:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80067f6:	d109      	bne.n	800680c <HAL_UART_IRQHandler+0x1a0>
  if (((isrflags & USART_ISR_RXFF) != RESET) && ((cr1its & USART_CR1_RXFFIE) != RESET))
 80067f8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80067fc:	d001      	beq.n	8006802 <HAL_UART_IRQHandler+0x196>
 80067fe:	2800      	cmp	r0, #0
 8006800:	db08      	blt.n	8006814 <HAL_UART_IRQHandler+0x1a8>
 8006802:	bd70      	pop	{r4, r5, r6, pc}
    UART_EndTransmit_IT(huart);
 8006804:	4620      	mov	r0, r4
 8006806:	f7ff ff21 	bl	800664c <UART_EndTransmit_IT>
    return;
 800680a:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800680c:	4620      	mov	r0, r4
 800680e:	f000 ffed 	bl	80077ec <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8006812:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006814:	4620      	mov	r0, r4
 8006816:	f000 ffe8 	bl	80077ea <HAL_UARTEx_RxFifoFullCallback>
    return;
 800681a:	e7f2      	b.n	8006802 <HAL_UART_IRQHandler+0x196>
 800681c:	10000001 	.word	0x10000001
 8006820:	08006825 	.word	0x08006825

08006824 <UART_DMAAbortOnError>:
{
 8006824:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006826:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8006828:	2300      	movs	r3, #0
 800682a:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800682e:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8006832:	f7ff ff19 	bl	8006668 <HAL_UART_ErrorCallback>
 8006836:	bd08      	pop	{r3, pc}

08006838 <UART_SetConfig>:
{
 8006838:	e92d 4b78 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, fp, lr}
 800683c:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800683e:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006840:	6883      	ldr	r3, [r0, #8]
 8006842:	6902      	ldr	r2, [r0, #16]
 8006844:	4313      	orrs	r3, r2
 8006846:	6942      	ldr	r2, [r0, #20]
 8006848:	4313      	orrs	r3, r2
 800684a:	69c2      	ldr	r2, [r0, #28]
 800684c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)huart->FifoMode;
 800684e:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8006850:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006852:	6808      	ldr	r0, [r1, #0]
 8006854:	4a9c      	ldr	r2, [pc, #624]	; (8006ac8 <UART_SetConfig+0x290>)
 8006856:	4002      	ands	r2, r0
 8006858:	4313      	orrs	r3, r2
 800685a:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800685c:	6822      	ldr	r2, [r4, #0]
 800685e:	6853      	ldr	r3, [r2, #4]
 8006860:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006864:	68e1      	ldr	r1, [r4, #12]
 8006866:	430b      	orrs	r3, r1
 8006868:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800686a:	69a2      	ldr	r2, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800686c:	6821      	ldr	r1, [r4, #0]
 800686e:	4b97      	ldr	r3, [pc, #604]	; (8006acc <UART_SetConfig+0x294>)
 8006870:	4299      	cmp	r1, r3
 8006872:	d001      	beq.n	8006878 <UART_SetConfig+0x40>
    tmpreg |= huart->Init.OneBitSampling;
 8006874:	6a23      	ldr	r3, [r4, #32]
 8006876:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006878:	688b      	ldr	r3, [r1, #8]
 800687a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800687e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006882:	4313      	orrs	r3, r2
 8006884:	608b      	str	r3, [r1, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006886:	6822      	ldr	r2, [r4, #0]
 8006888:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800688a:	f023 030f 	bic.w	r3, r3, #15
 800688e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006890:	430b      	orrs	r3, r1
 8006892:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006894:	6823      	ldr	r3, [r4, #0]
 8006896:	4a8e      	ldr	r2, [pc, #568]	; (8006ad0 <UART_SetConfig+0x298>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d027      	beq.n	80068ec <UART_SetConfig+0xb4>
 800689c:	4a8d      	ldr	r2, [pc, #564]	; (8006ad4 <UART_SetConfig+0x29c>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d038      	beq.n	8006914 <UART_SetConfig+0xdc>
 80068a2:	4a8d      	ldr	r2, [pc, #564]	; (8006ad8 <UART_SetConfig+0x2a0>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d04e      	beq.n	8006946 <UART_SetConfig+0x10e>
 80068a8:	4a8c      	ldr	r2, [pc, #560]	; (8006adc <UART_SetConfig+0x2a4>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d061      	beq.n	8006972 <UART_SetConfig+0x13a>
 80068ae:	4a8c      	ldr	r2, [pc, #560]	; (8006ae0 <UART_SetConfig+0x2a8>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d074      	beq.n	800699e <UART_SetConfig+0x166>
 80068b4:	4a85      	ldr	r2, [pc, #532]	; (8006acc <UART_SetConfig+0x294>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	f000 808a 	beq.w	80069d0 <UART_SetConfig+0x198>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80068bc:	2510      	movs	r5, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 80068be:	4a83      	ldr	r2, [pc, #524]	; (8006acc <UART_SetConfig+0x294>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	f000 80aa 	beq.w	8006a1a <UART_SetConfig+0x1e2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068c6:	69e3      	ldr	r3, [r4, #28]
 80068c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068cc:	f000 8367 	beq.w	8006f9e <UART_SetConfig+0x766>
    switch (clocksource)
 80068d0:	2d08      	cmp	r5, #8
 80068d2:	f200 862a 	bhi.w	800752a <UART_SetConfig+0xcf2>
 80068d6:	e8df f015 	tbh	[pc, r5, lsl #1]
 80068da:	04dc      	.short	0x04dc
 80068dc:	056b052d 	.word	0x056b052d
 80068e0:	05a50628 	.word	0x05a50628
 80068e4:	06280628 	.word	0x06280628
 80068e8:	05e30628 	.word	0x05e30628
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068ec:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 80068f0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80068f4:	f002 0203 	and.w	r2, r2, #3
 80068f8:	2a03      	cmp	r2, #3
 80068fa:	d809      	bhi.n	8006910 <UART_SetConfig+0xd8>
 80068fc:	e8df f002 	tbb	[pc, r2]
 8006900:	06810402 	.word	0x06810402
 8006904:	2501      	movs	r5, #1
 8006906:	e7da      	b.n	80068be <UART_SetConfig+0x86>
 8006908:	2504      	movs	r5, #4
 800690a:	e7d8      	b.n	80068be <UART_SetConfig+0x86>
 800690c:	2508      	movs	r5, #8
 800690e:	e7d6      	b.n	80068be <UART_SetConfig+0x86>
 8006910:	2510      	movs	r5, #16
 8006912:	e7d4      	b.n	80068be <UART_SetConfig+0x86>
 8006914:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8006918:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800691c:	f002 020c 	and.w	r2, r2, #12
 8006920:	2a0c      	cmp	r2, #12
 8006922:	d80e      	bhi.n	8006942 <UART_SetConfig+0x10a>
 8006924:	e8df f002 	tbb	[pc, r2]
 8006928:	0d0d0d07 	.word	0x0d0d0d07
 800692c:	0d0d0d09 	.word	0x0d0d0d09
 8006930:	0d0d0d6f 	.word	0x0d0d0d6f
 8006934:	0b          	.byte	0x0b
 8006935:	00          	.byte	0x00
 8006936:	2500      	movs	r5, #0
 8006938:	e7c1      	b.n	80068be <UART_SetConfig+0x86>
 800693a:	2504      	movs	r5, #4
 800693c:	e7bf      	b.n	80068be <UART_SetConfig+0x86>
 800693e:	2508      	movs	r5, #8
 8006940:	e7bd      	b.n	80068be <UART_SetConfig+0x86>
 8006942:	2510      	movs	r5, #16
 8006944:	e7bb      	b.n	80068be <UART_SetConfig+0x86>
 8006946:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 800694a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800694e:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8006952:	2a10      	cmp	r2, #16
 8006954:	d009      	beq.n	800696a <UART_SetConfig+0x132>
 8006956:	d905      	bls.n	8006964 <UART_SetConfig+0x12c>
 8006958:	2a20      	cmp	r2, #32
 800695a:	d056      	beq.n	8006a0a <UART_SetConfig+0x1d2>
 800695c:	2a30      	cmp	r2, #48	; 0x30
 800695e:	d106      	bne.n	800696e <UART_SetConfig+0x136>
 8006960:	2508      	movs	r5, #8
 8006962:	e7ac      	b.n	80068be <UART_SetConfig+0x86>
 8006964:	b91a      	cbnz	r2, 800696e <UART_SetConfig+0x136>
 8006966:	2500      	movs	r5, #0
 8006968:	e7a9      	b.n	80068be <UART_SetConfig+0x86>
 800696a:	2504      	movs	r5, #4
 800696c:	e7a7      	b.n	80068be <UART_SetConfig+0x86>
 800696e:	2510      	movs	r5, #16
 8006970:	e7a5      	b.n	80068be <UART_SetConfig+0x86>
 8006972:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8006976:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800697a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800697e:	2a40      	cmp	r2, #64	; 0x40
 8006980:	d009      	beq.n	8006996 <UART_SetConfig+0x15e>
 8006982:	d905      	bls.n	8006990 <UART_SetConfig+0x158>
 8006984:	2a80      	cmp	r2, #128	; 0x80
 8006986:	d042      	beq.n	8006a0e <UART_SetConfig+0x1d6>
 8006988:	2ac0      	cmp	r2, #192	; 0xc0
 800698a:	d106      	bne.n	800699a <UART_SetConfig+0x162>
 800698c:	2508      	movs	r5, #8
 800698e:	e796      	b.n	80068be <UART_SetConfig+0x86>
 8006990:	b91a      	cbnz	r2, 800699a <UART_SetConfig+0x162>
 8006992:	2500      	movs	r5, #0
 8006994:	e793      	b.n	80068be <UART_SetConfig+0x86>
 8006996:	2504      	movs	r5, #4
 8006998:	e791      	b.n	80068be <UART_SetConfig+0x86>
 800699a:	2510      	movs	r5, #16
 800699c:	e78f      	b.n	80068be <UART_SetConfig+0x86>
 800699e:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 80069a2:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80069a6:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80069aa:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80069ae:	d00b      	beq.n	80069c8 <UART_SetConfig+0x190>
 80069b0:	d907      	bls.n	80069c2 <UART_SetConfig+0x18a>
 80069b2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80069b6:	d02c      	beq.n	8006a12 <UART_SetConfig+0x1da>
 80069b8:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80069bc:	d106      	bne.n	80069cc <UART_SetConfig+0x194>
 80069be:	2508      	movs	r5, #8
 80069c0:	e77d      	b.n	80068be <UART_SetConfig+0x86>
 80069c2:	b91a      	cbnz	r2, 80069cc <UART_SetConfig+0x194>
 80069c4:	2500      	movs	r5, #0
 80069c6:	e77a      	b.n	80068be <UART_SetConfig+0x86>
 80069c8:	2504      	movs	r5, #4
 80069ca:	e778      	b.n	80068be <UART_SetConfig+0x86>
 80069cc:	2510      	movs	r5, #16
 80069ce:	e776      	b.n	80068be <UART_SetConfig+0x86>
 80069d0:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 80069d4:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80069d8:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80069dc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80069e0:	d00b      	beq.n	80069fa <UART_SetConfig+0x1c2>
 80069e2:	d907      	bls.n	80069f4 <UART_SetConfig+0x1bc>
 80069e4:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80069e8:	d015      	beq.n	8006a16 <UART_SetConfig+0x1de>
 80069ea:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80069ee:	d106      	bne.n	80069fe <UART_SetConfig+0x1c6>
 80069f0:	2508      	movs	r5, #8
 80069f2:	e764      	b.n	80068be <UART_SetConfig+0x86>
 80069f4:	b91a      	cbnz	r2, 80069fe <UART_SetConfig+0x1c6>
 80069f6:	2500      	movs	r5, #0
 80069f8:	e761      	b.n	80068be <UART_SetConfig+0x86>
 80069fa:	2504      	movs	r5, #4
 80069fc:	e75f      	b.n	80068be <UART_SetConfig+0x86>
 80069fe:	2510      	movs	r5, #16
 8006a00:	e75d      	b.n	80068be <UART_SetConfig+0x86>
 8006a02:	2502      	movs	r5, #2
 8006a04:	e75b      	b.n	80068be <UART_SetConfig+0x86>
 8006a06:	2502      	movs	r5, #2
 8006a08:	e759      	b.n	80068be <UART_SetConfig+0x86>
 8006a0a:	2502      	movs	r5, #2
 8006a0c:	e757      	b.n	80068be <UART_SetConfig+0x86>
 8006a0e:	2502      	movs	r5, #2
 8006a10:	e755      	b.n	80068be <UART_SetConfig+0x86>
 8006a12:	2502      	movs	r5, #2
 8006a14:	e753      	b.n	80068be <UART_SetConfig+0x86>
 8006a16:	2502      	movs	r5, #2
 8006a18:	e751      	b.n	80068be <UART_SetConfig+0x86>
    switch (clocksource)
 8006a1a:	2d08      	cmp	r5, #8
 8006a1c:	f200 80eb 	bhi.w	8006bf6 <UART_SetConfig+0x3be>
 8006a20:	e8df f005 	tbb	[pc, r5]
 8006a24:	e966e905 	.word	0xe966e905
 8006a28:	e9e9e991 	.word	0xe9e9e991
 8006a2c:	c9          	.byte	0xc9
 8006a2d:	00          	.byte	0x00
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006a2e:	f7fd fcf7 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
 8006a32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a34:	b1d3      	cbz	r3, 8006a6c <UART_SetConfig+0x234>
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d037      	beq.n	8006aaa <UART_SetConfig+0x272>
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d037      	beq.n	8006aae <UART_SetConfig+0x276>
 8006a3e:	2b03      	cmp	r3, #3
 8006a40:	d037      	beq.n	8006ab2 <UART_SetConfig+0x27a>
 8006a42:	2b04      	cmp	r3, #4
 8006a44:	d037      	beq.n	8006ab6 <UART_SetConfig+0x27e>
 8006a46:	2b05      	cmp	r3, #5
 8006a48:	d037      	beq.n	8006aba <UART_SetConfig+0x282>
 8006a4a:	2b06      	cmp	r3, #6
 8006a4c:	d037      	beq.n	8006abe <UART_SetConfig+0x286>
 8006a4e:	2b07      	cmp	r3, #7
 8006a50:	d037      	beq.n	8006ac2 <UART_SetConfig+0x28a>
 8006a52:	2b08      	cmp	r3, #8
 8006a54:	d046      	beq.n	8006ae4 <UART_SetConfig+0x2ac>
 8006a56:	2b09      	cmp	r3, #9
 8006a58:	d046      	beq.n	8006ae8 <UART_SetConfig+0x2b0>
 8006a5a:	2b0a      	cmp	r3, #10
 8006a5c:	d046      	beq.n	8006aec <UART_SetConfig+0x2b4>
 8006a5e:	2b0b      	cmp	r3, #11
 8006a60:	d001      	beq.n	8006a66 <UART_SetConfig+0x22e>
 8006a62:	2301      	movs	r3, #1
 8006a64:	e003      	b.n	8006a6e <UART_SetConfig+0x236>
 8006a66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a6a:	e000      	b.n	8006a6e <UART_SetConfig+0x236>
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	fbb0 f0f3 	udiv	r0, r0, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a72:	2600      	movs	r6, #0
    if (lpuart_ker_ck_pres != 0U)
 8006a74:	2800      	cmp	r0, #0
 8006a76:	f000 843e 	beq.w	80072f6 <UART_SetConfig+0xabe>
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8006a7a:	6862      	ldr	r2, [r4, #4]
 8006a7c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8006a80:	4298      	cmp	r0, r3
 8006a82:	f0c0 8555 	bcc.w	8007530 <UART_SetConfig+0xcf8>
 8006a86:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8006a8a:	f200 8553 	bhi.w	8007534 <UART_SetConfig+0xcfc>
        switch (clocksource)
 8006a8e:	2d08      	cmp	r5, #8
 8006a90:	f200 8282 	bhi.w	8006f98 <UART_SetConfig+0x760>
 8006a94:	e8df f015 	tbh	[pc, r5, lsl #1]
 8006a98:	028000ff 	.word	0x028000ff
 8006a9c:	0280015d 	.word	0x0280015d
 8006aa0:	028001da 	.word	0x028001da
 8006aa4:	02800280 	.word	0x02800280
 8006aa8:	0230      	.short	0x0230
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006aaa:	2302      	movs	r3, #2
 8006aac:	e7df      	b.n	8006a6e <UART_SetConfig+0x236>
 8006aae:	2304      	movs	r3, #4
 8006ab0:	e7dd      	b.n	8006a6e <UART_SetConfig+0x236>
 8006ab2:	2306      	movs	r3, #6
 8006ab4:	e7db      	b.n	8006a6e <UART_SetConfig+0x236>
 8006ab6:	2308      	movs	r3, #8
 8006ab8:	e7d9      	b.n	8006a6e <UART_SetConfig+0x236>
 8006aba:	230a      	movs	r3, #10
 8006abc:	e7d7      	b.n	8006a6e <UART_SetConfig+0x236>
 8006abe:	230c      	movs	r3, #12
 8006ac0:	e7d5      	b.n	8006a6e <UART_SetConfig+0x236>
 8006ac2:	2310      	movs	r3, #16
 8006ac4:	e7d3      	b.n	8006a6e <UART_SetConfig+0x236>
 8006ac6:	bf00      	nop
 8006ac8:	cfff69f3 	.word	0xcfff69f3
 8006acc:	40008000 	.word	0x40008000
 8006ad0:	40013800 	.word	0x40013800
 8006ad4:	40004400 	.word	0x40004400
 8006ad8:	40004800 	.word	0x40004800
 8006adc:	40004c00 	.word	0x40004c00
 8006ae0:	40005000 	.word	0x40005000
 8006ae4:	2320      	movs	r3, #32
 8006ae6:	e7c2      	b.n	8006a6e <UART_SetConfig+0x236>
 8006ae8:	2340      	movs	r3, #64	; 0x40
 8006aea:	e7c0      	b.n	8006a6e <UART_SetConfig+0x236>
 8006aec:	2380      	movs	r3, #128	; 0x80
 8006aee:	e7be      	b.n	8006a6e <UART_SetConfig+0x236>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006af0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f000 8082 	beq.w	8006bfc <UART_SetConfig+0x3c4>
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	f000 8082 	beq.w	8006c02 <UART_SetConfig+0x3ca>
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	f000 8082 	beq.w	8006c08 <UART_SetConfig+0x3d0>
 8006b04:	2b03      	cmp	r3, #3
 8006b06:	f000 8082 	beq.w	8006c0e <UART_SetConfig+0x3d6>
 8006b0a:	2b04      	cmp	r3, #4
 8006b0c:	f000 8082 	beq.w	8006c14 <UART_SetConfig+0x3dc>
 8006b10:	2b05      	cmp	r3, #5
 8006b12:	f000 8082 	beq.w	8006c1a <UART_SetConfig+0x3e2>
 8006b16:	2b06      	cmp	r3, #6
 8006b18:	f000 8082 	beq.w	8006c20 <UART_SetConfig+0x3e8>
 8006b1c:	2b07      	cmp	r3, #7
 8006b1e:	f000 8082 	beq.w	8006c26 <UART_SetConfig+0x3ee>
 8006b22:	2b08      	cmp	r3, #8
 8006b24:	f000 8082 	beq.w	8006c2c <UART_SetConfig+0x3f4>
 8006b28:	2b09      	cmp	r3, #9
 8006b2a:	f000 8082 	beq.w	8006c32 <UART_SetConfig+0x3fa>
 8006b2e:	2b0a      	cmp	r3, #10
 8006b30:	f000 8082 	beq.w	8006c38 <UART_SetConfig+0x400>
 8006b34:	2b0b      	cmp	r3, #11
 8006b36:	d002      	beq.n	8006b3e <UART_SetConfig+0x306>
 8006b38:	48af      	ldr	r0, [pc, #700]	; (8006df8 <UART_SetConfig+0x5c0>)
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b3a:	2600      	movs	r6, #0
 8006b3c:	e79a      	b.n	8006a74 <UART_SetConfig+0x23c>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006b3e:	f24f 4024 	movw	r0, #62500	; 0xf424
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b42:	2600      	movs	r6, #0
 8006b44:	e796      	b.n	8006a74 <UART_SetConfig+0x23c>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006b46:	f7fd f831 	bl	8003bac <HAL_RCC_GetSysClockFreq>
 8006b4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b4c:	b1d3      	cbz	r3, 8006b84 <UART_SetConfig+0x34c>
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d01d      	beq.n	8006b8e <UART_SetConfig+0x356>
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d01d      	beq.n	8006b92 <UART_SetConfig+0x35a>
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	d01d      	beq.n	8006b96 <UART_SetConfig+0x35e>
 8006b5a:	2b04      	cmp	r3, #4
 8006b5c:	d01d      	beq.n	8006b9a <UART_SetConfig+0x362>
 8006b5e:	2b05      	cmp	r3, #5
 8006b60:	d01d      	beq.n	8006b9e <UART_SetConfig+0x366>
 8006b62:	2b06      	cmp	r3, #6
 8006b64:	d01d      	beq.n	8006ba2 <UART_SetConfig+0x36a>
 8006b66:	2b07      	cmp	r3, #7
 8006b68:	d01d      	beq.n	8006ba6 <UART_SetConfig+0x36e>
 8006b6a:	2b08      	cmp	r3, #8
 8006b6c:	d01d      	beq.n	8006baa <UART_SetConfig+0x372>
 8006b6e:	2b09      	cmp	r3, #9
 8006b70:	d01d      	beq.n	8006bae <UART_SetConfig+0x376>
 8006b72:	2b0a      	cmp	r3, #10
 8006b74:	d01d      	beq.n	8006bb2 <UART_SetConfig+0x37a>
 8006b76:	2b0b      	cmp	r3, #11
 8006b78:	d001      	beq.n	8006b7e <UART_SetConfig+0x346>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e003      	b.n	8006b86 <UART_SetConfig+0x34e>
 8006b7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b82:	e000      	b.n	8006b86 <UART_SetConfig+0x34e>
 8006b84:	2301      	movs	r3, #1
 8006b86:	fbb0 f0f3 	udiv	r0, r0, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b8a:	2600      	movs	r6, #0
        break;
 8006b8c:	e772      	b.n	8006a74 <UART_SetConfig+0x23c>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006b8e:	2302      	movs	r3, #2
 8006b90:	e7f9      	b.n	8006b86 <UART_SetConfig+0x34e>
 8006b92:	2304      	movs	r3, #4
 8006b94:	e7f7      	b.n	8006b86 <UART_SetConfig+0x34e>
 8006b96:	2306      	movs	r3, #6
 8006b98:	e7f5      	b.n	8006b86 <UART_SetConfig+0x34e>
 8006b9a:	2308      	movs	r3, #8
 8006b9c:	e7f3      	b.n	8006b86 <UART_SetConfig+0x34e>
 8006b9e:	230a      	movs	r3, #10
 8006ba0:	e7f1      	b.n	8006b86 <UART_SetConfig+0x34e>
 8006ba2:	230c      	movs	r3, #12
 8006ba4:	e7ef      	b.n	8006b86 <UART_SetConfig+0x34e>
 8006ba6:	2310      	movs	r3, #16
 8006ba8:	e7ed      	b.n	8006b86 <UART_SetConfig+0x34e>
 8006baa:	2320      	movs	r3, #32
 8006bac:	e7eb      	b.n	8006b86 <UART_SetConfig+0x34e>
 8006bae:	2340      	movs	r3, #64	; 0x40
 8006bb0:	e7e9      	b.n	8006b86 <UART_SetConfig+0x34e>
 8006bb2:	2380      	movs	r3, #128	; 0x80
 8006bb4:	e7e7      	b.n	8006b86 <UART_SetConfig+0x34e>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006bb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d040      	beq.n	8006c3e <UART_SetConfig+0x406>
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d042      	beq.n	8006c46 <UART_SetConfig+0x40e>
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d044      	beq.n	8006c4e <UART_SetConfig+0x416>
 8006bc4:	2b03      	cmp	r3, #3
 8006bc6:	d046      	beq.n	8006c56 <UART_SetConfig+0x41e>
 8006bc8:	2b04      	cmp	r3, #4
 8006bca:	d048      	beq.n	8006c5e <UART_SetConfig+0x426>
 8006bcc:	2b05      	cmp	r3, #5
 8006bce:	d04a      	beq.n	8006c66 <UART_SetConfig+0x42e>
 8006bd0:	2b06      	cmp	r3, #6
 8006bd2:	d04c      	beq.n	8006c6e <UART_SetConfig+0x436>
 8006bd4:	2b07      	cmp	r3, #7
 8006bd6:	d04e      	beq.n	8006c76 <UART_SetConfig+0x43e>
 8006bd8:	2b08      	cmp	r3, #8
 8006bda:	d050      	beq.n	8006c7e <UART_SetConfig+0x446>
 8006bdc:	2b09      	cmp	r3, #9
 8006bde:	d052      	beq.n	8006c86 <UART_SetConfig+0x44e>
 8006be0:	2b0a      	cmp	r3, #10
 8006be2:	d054      	beq.n	8006c8e <UART_SetConfig+0x456>
 8006be4:	2b0b      	cmp	r3, #11
 8006be6:	d003      	beq.n	8006bf0 <UART_SetConfig+0x3b8>
 8006be8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bec:	2600      	movs	r6, #0
 8006bee:	e741      	b.n	8006a74 <UART_SetConfig+0x23c>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006bf0:	2080      	movs	r0, #128	; 0x80
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bf2:	2600      	movs	r6, #0
 8006bf4:	e73e      	b.n	8006a74 <UART_SetConfig+0x23c>
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006bf6:	2000      	movs	r0, #0
        ret = HAL_ERROR;
 8006bf8:	2601      	movs	r6, #1
 8006bfa:	e73b      	b.n	8006a74 <UART_SetConfig+0x23c>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006bfc:	487e      	ldr	r0, [pc, #504]	; (8006df8 <UART_SetConfig+0x5c0>)
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bfe:	2600      	movs	r6, #0
 8006c00:	e738      	b.n	8006a74 <UART_SetConfig+0x23c>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006c02:	487e      	ldr	r0, [pc, #504]	; (8006dfc <UART_SetConfig+0x5c4>)
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c04:	2600      	movs	r6, #0
 8006c06:	e735      	b.n	8006a74 <UART_SetConfig+0x23c>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006c08:	487d      	ldr	r0, [pc, #500]	; (8006e00 <UART_SetConfig+0x5c8>)
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c0a:	2600      	movs	r6, #0
 8006c0c:	e732      	b.n	8006a74 <UART_SetConfig+0x23c>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006c0e:	487d      	ldr	r0, [pc, #500]	; (8006e04 <UART_SetConfig+0x5cc>)
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c10:	2600      	movs	r6, #0
 8006c12:	e72f      	b.n	8006a74 <UART_SetConfig+0x23c>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006c14:	487c      	ldr	r0, [pc, #496]	; (8006e08 <UART_SetConfig+0x5d0>)
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c16:	2600      	movs	r6, #0
 8006c18:	e72c      	b.n	8006a74 <UART_SetConfig+0x23c>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006c1a:	487c      	ldr	r0, [pc, #496]	; (8006e0c <UART_SetConfig+0x5d4>)
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c1c:	2600      	movs	r6, #0
 8006c1e:	e729      	b.n	8006a74 <UART_SetConfig+0x23c>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006c20:	487b      	ldr	r0, [pc, #492]	; (8006e10 <UART_SetConfig+0x5d8>)
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c22:	2600      	movs	r6, #0
 8006c24:	e726      	b.n	8006a74 <UART_SetConfig+0x23c>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006c26:	487b      	ldr	r0, [pc, #492]	; (8006e14 <UART_SetConfig+0x5dc>)
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c28:	2600      	movs	r6, #0
 8006c2a:	e723      	b.n	8006a74 <UART_SetConfig+0x23c>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006c2c:	487a      	ldr	r0, [pc, #488]	; (8006e18 <UART_SetConfig+0x5e0>)
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c2e:	2600      	movs	r6, #0
 8006c30:	e720      	b.n	8006a74 <UART_SetConfig+0x23c>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006c32:	487a      	ldr	r0, [pc, #488]	; (8006e1c <UART_SetConfig+0x5e4>)
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c34:	2600      	movs	r6, #0
 8006c36:	e71d      	b.n	8006a74 <UART_SetConfig+0x23c>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006c38:	4879      	ldr	r0, [pc, #484]	; (8006e20 <UART_SetConfig+0x5e8>)
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c3a:	2600      	movs	r6, #0
 8006c3c:	e71a      	b.n	8006a74 <UART_SetConfig+0x23c>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006c3e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c42:	2600      	movs	r6, #0
 8006c44:	e716      	b.n	8006a74 <UART_SetConfig+0x23c>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006c46:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c4a:	2600      	movs	r6, #0
 8006c4c:	e712      	b.n	8006a74 <UART_SetConfig+0x23c>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006c4e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c52:	2600      	movs	r6, #0
 8006c54:	e70e      	b.n	8006a74 <UART_SetConfig+0x23c>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006c56:	f241 5055 	movw	r0, #5461	; 0x1555
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c5a:	2600      	movs	r6, #0
 8006c5c:	e70a      	b.n	8006a74 <UART_SetConfig+0x23c>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006c5e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c62:	2600      	movs	r6, #0
 8006c64:	e706      	b.n	8006a74 <UART_SetConfig+0x23c>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006c66:	f640 40cc 	movw	r0, #3276	; 0xccc
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c6a:	2600      	movs	r6, #0
 8006c6c:	e702      	b.n	8006a74 <UART_SetConfig+0x23c>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006c6e:	f640 20aa 	movw	r0, #2730	; 0xaaa
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c72:	2600      	movs	r6, #0
 8006c74:	e6fe      	b.n	8006a74 <UART_SetConfig+0x23c>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006c76:	f44f 6000 	mov.w	r0, #2048	; 0x800
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c7a:	2600      	movs	r6, #0
 8006c7c:	e6fa      	b.n	8006a74 <UART_SetConfig+0x23c>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006c7e:	f44f 6080 	mov.w	r0, #1024	; 0x400
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c82:	2600      	movs	r6, #0
 8006c84:	e6f6      	b.n	8006a74 <UART_SetConfig+0x23c>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006c86:	f44f 7000 	mov.w	r0, #512	; 0x200
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c8a:	2600      	movs	r6, #0
 8006c8c:	e6f2      	b.n	8006a74 <UART_SetConfig+0x23c>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006c8e:	f44f 7080 	mov.w	r0, #256	; 0x100
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c92:	2600      	movs	r6, #0
 8006c94:	e6ee      	b.n	8006a74 <UART_SetConfig+0x23c>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c96:	f7fd fbc3 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
 8006c9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c9c:	b1e3      	cbz	r3, 8006cd8 <UART_SetConfig+0x4a0>
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d039      	beq.n	8006d16 <UART_SetConfig+0x4de>
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d03a      	beq.n	8006d1c <UART_SetConfig+0x4e4>
 8006ca6:	2b03      	cmp	r3, #3
 8006ca8:	d03b      	beq.n	8006d22 <UART_SetConfig+0x4ea>
 8006caa:	2b04      	cmp	r3, #4
 8006cac:	d03c      	beq.n	8006d28 <UART_SetConfig+0x4f0>
 8006cae:	2b05      	cmp	r3, #5
 8006cb0:	d03d      	beq.n	8006d2e <UART_SetConfig+0x4f6>
 8006cb2:	2b06      	cmp	r3, #6
 8006cb4:	d03e      	beq.n	8006d34 <UART_SetConfig+0x4fc>
 8006cb6:	2b07      	cmp	r3, #7
 8006cb8:	d03f      	beq.n	8006d3a <UART_SetConfig+0x502>
 8006cba:	2b08      	cmp	r3, #8
 8006cbc:	d040      	beq.n	8006d40 <UART_SetConfig+0x508>
 8006cbe:	2b09      	cmp	r3, #9
 8006cc0:	d041      	beq.n	8006d46 <UART_SetConfig+0x50e>
 8006cc2:	2b0a      	cmp	r3, #10
 8006cc4:	d042      	beq.n	8006d4c <UART_SetConfig+0x514>
 8006cc6:	2b0b      	cmp	r3, #11
 8006cc8:	d002      	beq.n	8006cd0 <UART_SetConfig+0x498>
 8006cca:	2201      	movs	r2, #1
 8006ccc:	2300      	movs	r3, #0
 8006cce:	e005      	b.n	8006cdc <UART_SetConfig+0x4a4>
 8006cd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	e001      	b.n	8006cdc <UART_SetConfig+0x4a4>
 8006cd8:	2201      	movs	r2, #1
 8006cda:	2300      	movs	r3, #0
 8006cdc:	2100      	movs	r1, #0
 8006cde:	f7f9 ff8f 	bl	8000c00 <__aeabi_uldivmod>
 8006ce2:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8006ce6:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 8006cea:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8006cee:	6862      	ldr	r2, [r4, #4]
 8006cf0:	0850      	lsrs	r0, r2, #1
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	eb18 0b00 	adds.w	fp, r8, r0
 8006cf8:	f149 0c00 	adc.w	ip, r9, #0
 8006cfc:	4658      	mov	r0, fp
 8006cfe:	4661      	mov	r1, ip
 8006d00:	f7f9 ff7e 	bl	8000c00 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d04:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8006d08:	4b46      	ldr	r3, [pc, #280]	; (8006e24 <UART_SetConfig+0x5ec>)
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	f200 8414 	bhi.w	8007538 <UART_SetConfig+0xd00>
          huart->Instance->BRR = usartdiv;
 8006d10:	6823      	ldr	r3, [r4, #0]
 8006d12:	60d8      	str	r0, [r3, #12]
 8006d14:	e2ef      	b.n	80072f6 <UART_SetConfig+0xabe>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d16:	2202      	movs	r2, #2
 8006d18:	2300      	movs	r3, #0
 8006d1a:	e7df      	b.n	8006cdc <UART_SetConfig+0x4a4>
 8006d1c:	2204      	movs	r2, #4
 8006d1e:	2300      	movs	r3, #0
 8006d20:	e7dc      	b.n	8006cdc <UART_SetConfig+0x4a4>
 8006d22:	2206      	movs	r2, #6
 8006d24:	2300      	movs	r3, #0
 8006d26:	e7d9      	b.n	8006cdc <UART_SetConfig+0x4a4>
 8006d28:	2208      	movs	r2, #8
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	e7d6      	b.n	8006cdc <UART_SetConfig+0x4a4>
 8006d2e:	220a      	movs	r2, #10
 8006d30:	2300      	movs	r3, #0
 8006d32:	e7d3      	b.n	8006cdc <UART_SetConfig+0x4a4>
 8006d34:	220c      	movs	r2, #12
 8006d36:	2300      	movs	r3, #0
 8006d38:	e7d0      	b.n	8006cdc <UART_SetConfig+0x4a4>
 8006d3a:	2210      	movs	r2, #16
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	e7cd      	b.n	8006cdc <UART_SetConfig+0x4a4>
 8006d40:	2220      	movs	r2, #32
 8006d42:	2300      	movs	r3, #0
 8006d44:	e7ca      	b.n	8006cdc <UART_SetConfig+0x4a4>
 8006d46:	2240      	movs	r2, #64	; 0x40
 8006d48:	2300      	movs	r3, #0
 8006d4a:	e7c7      	b.n	8006cdc <UART_SetConfig+0x4a4>
 8006d4c:	2280      	movs	r2, #128	; 0x80
 8006d4e:	2300      	movs	r3, #0
 8006d50:	e7c4      	b.n	8006cdc <UART_SetConfig+0x4a4>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d54:	b1db      	cbz	r3, 8006d8e <UART_SetConfig+0x556>
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d023      	beq.n	8006da2 <UART_SetConfig+0x56a>
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d024      	beq.n	8006da8 <UART_SetConfig+0x570>
 8006d5e:	2b03      	cmp	r3, #3
 8006d60:	d025      	beq.n	8006dae <UART_SetConfig+0x576>
 8006d62:	2b04      	cmp	r3, #4
 8006d64:	d027      	beq.n	8006db6 <UART_SetConfig+0x57e>
 8006d66:	2b05      	cmp	r3, #5
 8006d68:	d028      	beq.n	8006dbc <UART_SetConfig+0x584>
 8006d6a:	2b06      	cmp	r3, #6
 8006d6c:	d029      	beq.n	8006dc2 <UART_SetConfig+0x58a>
 8006d6e:	2b07      	cmp	r3, #7
 8006d70:	d02b      	beq.n	8006dca <UART_SetConfig+0x592>
 8006d72:	2b08      	cmp	r3, #8
 8006d74:	d02c      	beq.n	8006dd0 <UART_SetConfig+0x598>
 8006d76:	2b09      	cmp	r3, #9
 8006d78:	d02d      	beq.n	8006dd6 <UART_SetConfig+0x59e>
 8006d7a:	2b0a      	cmp	r3, #10
 8006d7c:	d02e      	beq.n	8006ddc <UART_SetConfig+0x5a4>
 8006d7e:	2b0b      	cmp	r3, #11
 8006d80:	d002      	beq.n	8006d88 <UART_SetConfig+0x550>
 8006d82:	4829      	ldr	r0, [pc, #164]	; (8006e28 <UART_SetConfig+0x5f0>)
 8006d84:	2100      	movs	r1, #0
 8006d86:	e004      	b.n	8006d92 <UART_SetConfig+0x55a>
 8006d88:	481b      	ldr	r0, [pc, #108]	; (8006df8 <UART_SetConfig+0x5c0>)
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	e001      	b.n	8006d92 <UART_SetConfig+0x55a>
 8006d8e:	4826      	ldr	r0, [pc, #152]	; (8006e28 <UART_SetConfig+0x5f0>)
 8006d90:	2100      	movs	r1, #0
 8006d92:	0855      	lsrs	r5, r2, #1
 8006d94:	2300      	movs	r3, #0
 8006d96:	1940      	adds	r0, r0, r5
 8006d98:	f141 0100 	adc.w	r1, r1, #0
 8006d9c:	f7f9 ff30 	bl	8000c00 <__aeabi_uldivmod>
            break;
 8006da0:	e7b0      	b.n	8006d04 <UART_SetConfig+0x4cc>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006da2:	4822      	ldr	r0, [pc, #136]	; (8006e2c <UART_SetConfig+0x5f4>)
 8006da4:	2100      	movs	r1, #0
 8006da6:	e7f4      	b.n	8006d92 <UART_SetConfig+0x55a>
 8006da8:	4821      	ldr	r0, [pc, #132]	; (8006e30 <UART_SetConfig+0x5f8>)
 8006daa:	2100      	movs	r1, #0
 8006dac:	e7f1      	b.n	8006d92 <UART_SetConfig+0x55a>
 8006dae:	a10e      	add	r1, pc, #56	; (adr r1, 8006de8 <UART_SetConfig+0x5b0>)
 8006db0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006db4:	e7ed      	b.n	8006d92 <UART_SetConfig+0x55a>
 8006db6:	481f      	ldr	r0, [pc, #124]	; (8006e34 <UART_SetConfig+0x5fc>)
 8006db8:	2100      	movs	r1, #0
 8006dba:	e7ea      	b.n	8006d92 <UART_SetConfig+0x55a>
 8006dbc:	481e      	ldr	r0, [pc, #120]	; (8006e38 <UART_SetConfig+0x600>)
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	e7e7      	b.n	8006d92 <UART_SetConfig+0x55a>
 8006dc2:	a10b      	add	r1, pc, #44	; (adr r1, 8006df0 <UART_SetConfig+0x5b8>)
 8006dc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006dc8:	e7e3      	b.n	8006d92 <UART_SetConfig+0x55a>
 8006dca:	481c      	ldr	r0, [pc, #112]	; (8006e3c <UART_SetConfig+0x604>)
 8006dcc:	2100      	movs	r1, #0
 8006dce:	e7e0      	b.n	8006d92 <UART_SetConfig+0x55a>
 8006dd0:	481b      	ldr	r0, [pc, #108]	; (8006e40 <UART_SetConfig+0x608>)
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	e7dd      	b.n	8006d92 <UART_SetConfig+0x55a>
 8006dd6:	481b      	ldr	r0, [pc, #108]	; (8006e44 <UART_SetConfig+0x60c>)
 8006dd8:	2100      	movs	r1, #0
 8006dda:	e7da      	b.n	8006d92 <UART_SetConfig+0x55a>
 8006ddc:	481a      	ldr	r0, [pc, #104]	; (8006e48 <UART_SetConfig+0x610>)
 8006dde:	2100      	movs	r1, #0
 8006de0:	e7d7      	b.n	8006d92 <UART_SetConfig+0x55a>
 8006de2:	bf00      	nop
 8006de4:	f3af 8000 	nop.w
 8006de8:	28b0aa00 	.word	0x28b0aa00
 8006dec:	00000000 	.word	0x00000000
 8006df0:	14585500 	.word	0x14585500
 8006df4:	00000000 	.word	0x00000000
 8006df8:	00f42400 	.word	0x00f42400
 8006dfc:	007a1200 	.word	0x007a1200
 8006e00:	003d0900 	.word	0x003d0900
 8006e04:	0028b0aa 	.word	0x0028b0aa
 8006e08:	001e8480 	.word	0x001e8480
 8006e0c:	00186a00 	.word	0x00186a00
 8006e10:	00145855 	.word	0x00145855
 8006e14:	000f4240 	.word	0x000f4240
 8006e18:	0007a120 	.word	0x0007a120
 8006e1c:	0003d090 	.word	0x0003d090
 8006e20:	0001e848 	.word	0x0001e848
 8006e24:	000ffcff 	.word	0x000ffcff
 8006e28:	f4240000 	.word	0xf4240000
 8006e2c:	7a120000 	.word	0x7a120000
 8006e30:	3d090000 	.word	0x3d090000
 8006e34:	1e848000 	.word	0x1e848000
 8006e38:	186a0000 	.word	0x186a0000
 8006e3c:	0f424000 	.word	0x0f424000
 8006e40:	07a12000 	.word	0x07a12000
 8006e44:	03d09000 	.word	0x03d09000
 8006e48:	01e84800 	.word	0x01e84800
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e4c:	f7fc feae 	bl	8003bac <HAL_RCC_GetSysClockFreq>
 8006e50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e52:	b1e3      	cbz	r3, 8006e8e <UART_SetConfig+0x656>
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d031      	beq.n	8006ebc <UART_SetConfig+0x684>
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d032      	beq.n	8006ec2 <UART_SetConfig+0x68a>
 8006e5c:	2b03      	cmp	r3, #3
 8006e5e:	d033      	beq.n	8006ec8 <UART_SetConfig+0x690>
 8006e60:	2b04      	cmp	r3, #4
 8006e62:	d034      	beq.n	8006ece <UART_SetConfig+0x696>
 8006e64:	2b05      	cmp	r3, #5
 8006e66:	d035      	beq.n	8006ed4 <UART_SetConfig+0x69c>
 8006e68:	2b06      	cmp	r3, #6
 8006e6a:	d036      	beq.n	8006eda <UART_SetConfig+0x6a2>
 8006e6c:	2b07      	cmp	r3, #7
 8006e6e:	d037      	beq.n	8006ee0 <UART_SetConfig+0x6a8>
 8006e70:	2b08      	cmp	r3, #8
 8006e72:	d038      	beq.n	8006ee6 <UART_SetConfig+0x6ae>
 8006e74:	2b09      	cmp	r3, #9
 8006e76:	d039      	beq.n	8006eec <UART_SetConfig+0x6b4>
 8006e78:	2b0a      	cmp	r3, #10
 8006e7a:	d03a      	beq.n	8006ef2 <UART_SetConfig+0x6ba>
 8006e7c:	2b0b      	cmp	r3, #11
 8006e7e:	d002      	beq.n	8006e86 <UART_SetConfig+0x64e>
 8006e80:	2201      	movs	r2, #1
 8006e82:	2300      	movs	r3, #0
 8006e84:	e005      	b.n	8006e92 <UART_SetConfig+0x65a>
 8006e86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	e001      	b.n	8006e92 <UART_SetConfig+0x65a>
 8006e8e:	2201      	movs	r2, #1
 8006e90:	2300      	movs	r3, #0
 8006e92:	2100      	movs	r1, #0
 8006e94:	f7f9 feb4 	bl	8000c00 <__aeabi_uldivmod>
 8006e98:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8006e9c:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 8006ea0:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8006ea4:	6862      	ldr	r2, [r4, #4]
 8006ea6:	0850      	lsrs	r0, r2, #1
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	eb18 0b00 	adds.w	fp, r8, r0
 8006eae:	f149 0c00 	adc.w	ip, r9, #0
 8006eb2:	4658      	mov	r0, fp
 8006eb4:	4661      	mov	r1, ip
 8006eb6:	f7f9 fea3 	bl	8000c00 <__aeabi_uldivmod>
            break;
 8006eba:	e723      	b.n	8006d04 <UART_SetConfig+0x4cc>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	e7e7      	b.n	8006e92 <UART_SetConfig+0x65a>
 8006ec2:	2204      	movs	r2, #4
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	e7e4      	b.n	8006e92 <UART_SetConfig+0x65a>
 8006ec8:	2206      	movs	r2, #6
 8006eca:	2300      	movs	r3, #0
 8006ecc:	e7e1      	b.n	8006e92 <UART_SetConfig+0x65a>
 8006ece:	2208      	movs	r2, #8
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	e7de      	b.n	8006e92 <UART_SetConfig+0x65a>
 8006ed4:	220a      	movs	r2, #10
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	e7db      	b.n	8006e92 <UART_SetConfig+0x65a>
 8006eda:	220c      	movs	r2, #12
 8006edc:	2300      	movs	r3, #0
 8006ede:	e7d8      	b.n	8006e92 <UART_SetConfig+0x65a>
 8006ee0:	2210      	movs	r2, #16
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	e7d5      	b.n	8006e92 <UART_SetConfig+0x65a>
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	2300      	movs	r3, #0
 8006eea:	e7d2      	b.n	8006e92 <UART_SetConfig+0x65a>
 8006eec:	2240      	movs	r2, #64	; 0x40
 8006eee:	2300      	movs	r3, #0
 8006ef0:	e7cf      	b.n	8006e92 <UART_SetConfig+0x65a>
 8006ef2:	2280      	movs	r2, #128	; 0x80
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	e7cc      	b.n	8006e92 <UART_SetConfig+0x65a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ef8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006efa:	b1eb      	cbz	r3, 8006f38 <UART_SetConfig+0x700>
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d026      	beq.n	8006f4e <UART_SetConfig+0x716>
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d028      	beq.n	8006f56 <UART_SetConfig+0x71e>
 8006f04:	2b03      	cmp	r3, #3
 8006f06:	d02a      	beq.n	8006f5e <UART_SetConfig+0x726>
 8006f08:	2b04      	cmp	r3, #4
 8006f0a:	d02b      	beq.n	8006f64 <UART_SetConfig+0x72c>
 8006f0c:	2b05      	cmp	r3, #5
 8006f0e:	d02d      	beq.n	8006f6c <UART_SetConfig+0x734>
 8006f10:	2b06      	cmp	r3, #6
 8006f12:	d02e      	beq.n	8006f72 <UART_SetConfig+0x73a>
 8006f14:	2b07      	cmp	r3, #7
 8006f16:	d02f      	beq.n	8006f78 <UART_SetConfig+0x740>
 8006f18:	2b08      	cmp	r3, #8
 8006f1a:	d031      	beq.n	8006f80 <UART_SetConfig+0x748>
 8006f1c:	2b09      	cmp	r3, #9
 8006f1e:	d033      	beq.n	8006f88 <UART_SetConfig+0x750>
 8006f20:	2b0a      	cmp	r3, #10
 8006f22:	d035      	beq.n	8006f90 <UART_SetConfig+0x758>
 8006f24:	2b0b      	cmp	r3, #11
 8006f26:	d003      	beq.n	8006f30 <UART_SetConfig+0x6f8>
 8006f28:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	e006      	b.n	8006f3e <UART_SetConfig+0x706>
 8006f30:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006f34:	2100      	movs	r1, #0
 8006f36:	e002      	b.n	8006f3e <UART_SetConfig+0x706>
 8006f38:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	0855      	lsrs	r5, r2, #1
 8006f40:	2300      	movs	r3, #0
 8006f42:	1940      	adds	r0, r0, r5
 8006f44:	f141 0100 	adc.w	r1, r1, #0
 8006f48:	f7f9 fe5a 	bl	8000c00 <__aeabi_uldivmod>
            break;
 8006f4c:	e6da      	b.n	8006d04 <UART_SetConfig+0x4cc>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f4e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8006f52:	2100      	movs	r1, #0
 8006f54:	e7f3      	b.n	8006f3e <UART_SetConfig+0x706>
 8006f56:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8006f5a:	2100      	movs	r1, #0
 8006f5c:	e7ef      	b.n	8006f3e <UART_SetConfig+0x706>
 8006f5e:	4899      	ldr	r0, [pc, #612]	; (80071c4 <UART_SetConfig+0x98c>)
 8006f60:	2100      	movs	r1, #0
 8006f62:	e7ec      	b.n	8006f3e <UART_SetConfig+0x706>
 8006f64:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006f68:	2100      	movs	r1, #0
 8006f6a:	e7e8      	b.n	8006f3e <UART_SetConfig+0x706>
 8006f6c:	4896      	ldr	r0, [pc, #600]	; (80071c8 <UART_SetConfig+0x990>)
 8006f6e:	2100      	movs	r1, #0
 8006f70:	e7e5      	b.n	8006f3e <UART_SetConfig+0x706>
 8006f72:	4896      	ldr	r0, [pc, #600]	; (80071cc <UART_SetConfig+0x994>)
 8006f74:	2100      	movs	r1, #0
 8006f76:	e7e2      	b.n	8006f3e <UART_SetConfig+0x706>
 8006f78:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	e7de      	b.n	8006f3e <UART_SetConfig+0x706>
 8006f80:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8006f84:	2100      	movs	r1, #0
 8006f86:	e7da      	b.n	8006f3e <UART_SetConfig+0x706>
 8006f88:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8006f8c:	2100      	movs	r1, #0
 8006f8e:	e7d6      	b.n	8006f3e <UART_SetConfig+0x706>
 8006f90:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006f94:	2100      	movs	r1, #0
 8006f96:	e7d2      	b.n	8006f3e <UART_SetConfig+0x706>
            ret = HAL_ERROR;
 8006f98:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 8006f9a:	2000      	movs	r0, #0
 8006f9c:	e6b2      	b.n	8006d04 <UART_SetConfig+0x4cc>
    switch (clocksource)
 8006f9e:	2d08      	cmp	r5, #8
 8006fa0:	f200 8174 	bhi.w	800728c <UART_SetConfig+0xa54>
 8006fa4:	e8df f015 	tbh	[pc, r5, lsl #1]
 8006fa8:	00570009 	.word	0x00570009
 8006fac:	01720096 	.word	0x01720096
 8006fb0:	017200cf 	.word	0x017200cf
 8006fb4:	01720172 	.word	0x01720172
 8006fb8:	012c      	.short	0x012c
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fba:	f7fd fa31 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
 8006fbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fc0:	b1d3      	cbz	r3, 8006ff8 <UART_SetConfig+0x7c0>
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d033      	beq.n	800702e <UART_SetConfig+0x7f6>
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d033      	beq.n	8007032 <UART_SetConfig+0x7fa>
 8006fca:	2b03      	cmp	r3, #3
 8006fcc:	d033      	beq.n	8007036 <UART_SetConfig+0x7fe>
 8006fce:	2b04      	cmp	r3, #4
 8006fd0:	d033      	beq.n	800703a <UART_SetConfig+0x802>
 8006fd2:	2b05      	cmp	r3, #5
 8006fd4:	d033      	beq.n	800703e <UART_SetConfig+0x806>
 8006fd6:	2b06      	cmp	r3, #6
 8006fd8:	d033      	beq.n	8007042 <UART_SetConfig+0x80a>
 8006fda:	2b07      	cmp	r3, #7
 8006fdc:	d033      	beq.n	8007046 <UART_SetConfig+0x80e>
 8006fde:	2b08      	cmp	r3, #8
 8006fe0:	d033      	beq.n	800704a <UART_SetConfig+0x812>
 8006fe2:	2b09      	cmp	r3, #9
 8006fe4:	d033      	beq.n	800704e <UART_SetConfig+0x816>
 8006fe6:	2b0a      	cmp	r3, #10
 8006fe8:	d033      	beq.n	8007052 <UART_SetConfig+0x81a>
 8006fea:	2b0b      	cmp	r3, #11
 8006fec:	d001      	beq.n	8006ff2 <UART_SetConfig+0x7ba>
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e003      	b.n	8006ffa <UART_SetConfig+0x7c2>
 8006ff2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ff6:	e000      	b.n	8006ffa <UART_SetConfig+0x7c2>
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	fbb0 f0f3 	udiv	r0, r0, r3
 8006ffe:	6862      	ldr	r2, [r4, #4]
 8007000:	0853      	lsrs	r3, r2, #1
 8007002:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8007006:	fbb3 f3f2 	udiv	r3, r3, r2
 800700a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800700c:	2600      	movs	r6, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800700e:	f1a3 0110 	sub.w	r1, r3, #16
 8007012:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007016:	4291      	cmp	r1, r2
 8007018:	f200 8290 	bhi.w	800753c <UART_SetConfig+0xd04>
      brrtemp = usartdiv & 0xFFF0U;
 800701c:	b29a      	uxth	r2, r3
 800701e:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007022:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8007026:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 8007028:	6822      	ldr	r2, [r4, #0]
 800702a:	60d3      	str	r3, [r2, #12]
 800702c:	e163      	b.n	80072f6 <UART_SetConfig+0xabe>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800702e:	2302      	movs	r3, #2
 8007030:	e7e3      	b.n	8006ffa <UART_SetConfig+0x7c2>
 8007032:	2304      	movs	r3, #4
 8007034:	e7e1      	b.n	8006ffa <UART_SetConfig+0x7c2>
 8007036:	2306      	movs	r3, #6
 8007038:	e7df      	b.n	8006ffa <UART_SetConfig+0x7c2>
 800703a:	2308      	movs	r3, #8
 800703c:	e7dd      	b.n	8006ffa <UART_SetConfig+0x7c2>
 800703e:	230a      	movs	r3, #10
 8007040:	e7db      	b.n	8006ffa <UART_SetConfig+0x7c2>
 8007042:	230c      	movs	r3, #12
 8007044:	e7d9      	b.n	8006ffa <UART_SetConfig+0x7c2>
 8007046:	2310      	movs	r3, #16
 8007048:	e7d7      	b.n	8006ffa <UART_SetConfig+0x7c2>
 800704a:	2320      	movs	r3, #32
 800704c:	e7d5      	b.n	8006ffa <UART_SetConfig+0x7c2>
 800704e:	2340      	movs	r3, #64	; 0x40
 8007050:	e7d3      	b.n	8006ffa <UART_SetConfig+0x7c2>
 8007052:	2380      	movs	r3, #128	; 0x80
 8007054:	e7d1      	b.n	8006ffa <UART_SetConfig+0x7c2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007056:	f7fd f9f5 	bl	8004444 <HAL_RCC_GetPCLK2Freq>
 800705a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800705c:	b1d3      	cbz	r3, 8007094 <UART_SetConfig+0x85c>
 800705e:	2b01      	cmp	r3, #1
 8007060:	d024      	beq.n	80070ac <UART_SetConfig+0x874>
 8007062:	2b02      	cmp	r3, #2
 8007064:	d024      	beq.n	80070b0 <UART_SetConfig+0x878>
 8007066:	2b03      	cmp	r3, #3
 8007068:	d024      	beq.n	80070b4 <UART_SetConfig+0x87c>
 800706a:	2b04      	cmp	r3, #4
 800706c:	d024      	beq.n	80070b8 <UART_SetConfig+0x880>
 800706e:	2b05      	cmp	r3, #5
 8007070:	d024      	beq.n	80070bc <UART_SetConfig+0x884>
 8007072:	2b06      	cmp	r3, #6
 8007074:	d024      	beq.n	80070c0 <UART_SetConfig+0x888>
 8007076:	2b07      	cmp	r3, #7
 8007078:	d024      	beq.n	80070c4 <UART_SetConfig+0x88c>
 800707a:	2b08      	cmp	r3, #8
 800707c:	d024      	beq.n	80070c8 <UART_SetConfig+0x890>
 800707e:	2b09      	cmp	r3, #9
 8007080:	d024      	beq.n	80070cc <UART_SetConfig+0x894>
 8007082:	2b0a      	cmp	r3, #10
 8007084:	d024      	beq.n	80070d0 <UART_SetConfig+0x898>
 8007086:	2b0b      	cmp	r3, #11
 8007088:	d001      	beq.n	800708e <UART_SetConfig+0x856>
 800708a:	2301      	movs	r3, #1
 800708c:	e003      	b.n	8007096 <UART_SetConfig+0x85e>
 800708e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007092:	e000      	b.n	8007096 <UART_SetConfig+0x85e>
 8007094:	2301      	movs	r3, #1
 8007096:	fbb0 f0f3 	udiv	r0, r0, r3
 800709a:	6862      	ldr	r2, [r4, #4]
 800709c:	0853      	lsrs	r3, r2, #1
 800709e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80070a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80070a6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80070a8:	2600      	movs	r6, #0
        break;
 80070aa:	e7b0      	b.n	800700e <UART_SetConfig+0x7d6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070ac:	2302      	movs	r3, #2
 80070ae:	e7f2      	b.n	8007096 <UART_SetConfig+0x85e>
 80070b0:	2304      	movs	r3, #4
 80070b2:	e7f0      	b.n	8007096 <UART_SetConfig+0x85e>
 80070b4:	2306      	movs	r3, #6
 80070b6:	e7ee      	b.n	8007096 <UART_SetConfig+0x85e>
 80070b8:	2308      	movs	r3, #8
 80070ba:	e7ec      	b.n	8007096 <UART_SetConfig+0x85e>
 80070bc:	230a      	movs	r3, #10
 80070be:	e7ea      	b.n	8007096 <UART_SetConfig+0x85e>
 80070c0:	230c      	movs	r3, #12
 80070c2:	e7e8      	b.n	8007096 <UART_SetConfig+0x85e>
 80070c4:	2310      	movs	r3, #16
 80070c6:	e7e6      	b.n	8007096 <UART_SetConfig+0x85e>
 80070c8:	2320      	movs	r3, #32
 80070ca:	e7e4      	b.n	8007096 <UART_SetConfig+0x85e>
 80070cc:	2340      	movs	r3, #64	; 0x40
 80070ce:	e7e2      	b.n	8007096 <UART_SetConfig+0x85e>
 80070d0:	2380      	movs	r3, #128	; 0x80
 80070d2:	e7e0      	b.n	8007096 <UART_SetConfig+0x85e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070d6:	b1cb      	cbz	r3, 800710c <UART_SetConfig+0x8d4>
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d020      	beq.n	800711e <UART_SetConfig+0x8e6>
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d020      	beq.n	8007122 <UART_SetConfig+0x8ea>
 80070e0:	2b03      	cmp	r3, #3
 80070e2:	d020      	beq.n	8007126 <UART_SetConfig+0x8ee>
 80070e4:	2b04      	cmp	r3, #4
 80070e6:	d020      	beq.n	800712a <UART_SetConfig+0x8f2>
 80070e8:	2b05      	cmp	r3, #5
 80070ea:	d020      	beq.n	800712e <UART_SetConfig+0x8f6>
 80070ec:	2b06      	cmp	r3, #6
 80070ee:	d020      	beq.n	8007132 <UART_SetConfig+0x8fa>
 80070f0:	2b07      	cmp	r3, #7
 80070f2:	d020      	beq.n	8007136 <UART_SetConfig+0x8fe>
 80070f4:	2b08      	cmp	r3, #8
 80070f6:	d020      	beq.n	800713a <UART_SetConfig+0x902>
 80070f8:	2b09      	cmp	r3, #9
 80070fa:	d020      	beq.n	800713e <UART_SetConfig+0x906>
 80070fc:	2b0a      	cmp	r3, #10
 80070fe:	d020      	beq.n	8007142 <UART_SetConfig+0x90a>
 8007100:	2b0b      	cmp	r3, #11
 8007102:	d001      	beq.n	8007108 <UART_SetConfig+0x8d0>
 8007104:	4b32      	ldr	r3, [pc, #200]	; (80071d0 <UART_SetConfig+0x998>)
 8007106:	e002      	b.n	800710e <UART_SetConfig+0x8d6>
 8007108:	4b32      	ldr	r3, [pc, #200]	; (80071d4 <UART_SetConfig+0x99c>)
 800710a:	e000      	b.n	800710e <UART_SetConfig+0x8d6>
 800710c:	4b30      	ldr	r3, [pc, #192]	; (80071d0 <UART_SetConfig+0x998>)
 800710e:	6862      	ldr	r2, [r4, #4]
 8007110:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8007114:	fbb3 f3f2 	udiv	r3, r3, r2
 8007118:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800711a:	2600      	movs	r6, #0
        break;
 800711c:	e777      	b.n	800700e <UART_SetConfig+0x7d6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800711e:	4b2e      	ldr	r3, [pc, #184]	; (80071d8 <UART_SetConfig+0x9a0>)
 8007120:	e7f5      	b.n	800710e <UART_SetConfig+0x8d6>
 8007122:	4b2e      	ldr	r3, [pc, #184]	; (80071dc <UART_SetConfig+0x9a4>)
 8007124:	e7f3      	b.n	800710e <UART_SetConfig+0x8d6>
 8007126:	4b2e      	ldr	r3, [pc, #184]	; (80071e0 <UART_SetConfig+0x9a8>)
 8007128:	e7f1      	b.n	800710e <UART_SetConfig+0x8d6>
 800712a:	4b2e      	ldr	r3, [pc, #184]	; (80071e4 <UART_SetConfig+0x9ac>)
 800712c:	e7ef      	b.n	800710e <UART_SetConfig+0x8d6>
 800712e:	4b2e      	ldr	r3, [pc, #184]	; (80071e8 <UART_SetConfig+0x9b0>)
 8007130:	e7ed      	b.n	800710e <UART_SetConfig+0x8d6>
 8007132:	4b2e      	ldr	r3, [pc, #184]	; (80071ec <UART_SetConfig+0x9b4>)
 8007134:	e7eb      	b.n	800710e <UART_SetConfig+0x8d6>
 8007136:	4b2e      	ldr	r3, [pc, #184]	; (80071f0 <UART_SetConfig+0x9b8>)
 8007138:	e7e9      	b.n	800710e <UART_SetConfig+0x8d6>
 800713a:	4b2e      	ldr	r3, [pc, #184]	; (80071f4 <UART_SetConfig+0x9bc>)
 800713c:	e7e7      	b.n	800710e <UART_SetConfig+0x8d6>
 800713e:	4b2e      	ldr	r3, [pc, #184]	; (80071f8 <UART_SetConfig+0x9c0>)
 8007140:	e7e5      	b.n	800710e <UART_SetConfig+0x8d6>
 8007142:	4b2e      	ldr	r3, [pc, #184]	; (80071fc <UART_SetConfig+0x9c4>)
 8007144:	e7e3      	b.n	800710e <UART_SetConfig+0x8d6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007146:	f7fc fd31 	bl	8003bac <HAL_RCC_GetSysClockFreq>
 800714a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800714c:	b1d3      	cbz	r3, 8007184 <UART_SetConfig+0x94c>
 800714e:	2b01      	cmp	r3, #1
 8007150:	d024      	beq.n	800719c <UART_SetConfig+0x964>
 8007152:	2b02      	cmp	r3, #2
 8007154:	d024      	beq.n	80071a0 <UART_SetConfig+0x968>
 8007156:	2b03      	cmp	r3, #3
 8007158:	d024      	beq.n	80071a4 <UART_SetConfig+0x96c>
 800715a:	2b04      	cmp	r3, #4
 800715c:	d024      	beq.n	80071a8 <UART_SetConfig+0x970>
 800715e:	2b05      	cmp	r3, #5
 8007160:	d024      	beq.n	80071ac <UART_SetConfig+0x974>
 8007162:	2b06      	cmp	r3, #6
 8007164:	d024      	beq.n	80071b0 <UART_SetConfig+0x978>
 8007166:	2b07      	cmp	r3, #7
 8007168:	d024      	beq.n	80071b4 <UART_SetConfig+0x97c>
 800716a:	2b08      	cmp	r3, #8
 800716c:	d024      	beq.n	80071b8 <UART_SetConfig+0x980>
 800716e:	2b09      	cmp	r3, #9
 8007170:	d024      	beq.n	80071bc <UART_SetConfig+0x984>
 8007172:	2b0a      	cmp	r3, #10
 8007174:	d024      	beq.n	80071c0 <UART_SetConfig+0x988>
 8007176:	2b0b      	cmp	r3, #11
 8007178:	d001      	beq.n	800717e <UART_SetConfig+0x946>
 800717a:	2301      	movs	r3, #1
 800717c:	e003      	b.n	8007186 <UART_SetConfig+0x94e>
 800717e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007182:	e000      	b.n	8007186 <UART_SetConfig+0x94e>
 8007184:	2301      	movs	r3, #1
 8007186:	fbb0 f0f3 	udiv	r0, r0, r3
 800718a:	6862      	ldr	r2, [r4, #4]
 800718c:	0853      	lsrs	r3, r2, #1
 800718e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8007192:	fbb3 f3f2 	udiv	r3, r3, r2
 8007196:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8007198:	2600      	movs	r6, #0
        break;
 800719a:	e738      	b.n	800700e <UART_SetConfig+0x7d6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800719c:	2302      	movs	r3, #2
 800719e:	e7f2      	b.n	8007186 <UART_SetConfig+0x94e>
 80071a0:	2304      	movs	r3, #4
 80071a2:	e7f0      	b.n	8007186 <UART_SetConfig+0x94e>
 80071a4:	2306      	movs	r3, #6
 80071a6:	e7ee      	b.n	8007186 <UART_SetConfig+0x94e>
 80071a8:	2308      	movs	r3, #8
 80071aa:	e7ec      	b.n	8007186 <UART_SetConfig+0x94e>
 80071ac:	230a      	movs	r3, #10
 80071ae:	e7ea      	b.n	8007186 <UART_SetConfig+0x94e>
 80071b0:	230c      	movs	r3, #12
 80071b2:	e7e8      	b.n	8007186 <UART_SetConfig+0x94e>
 80071b4:	2310      	movs	r3, #16
 80071b6:	e7e6      	b.n	8007186 <UART_SetConfig+0x94e>
 80071b8:	2320      	movs	r3, #32
 80071ba:	e7e4      	b.n	8007186 <UART_SetConfig+0x94e>
 80071bc:	2340      	movs	r3, #64	; 0x40
 80071be:	e7e2      	b.n	8007186 <UART_SetConfig+0x94e>
 80071c0:	2380      	movs	r3, #128	; 0x80
 80071c2:	e7e0      	b.n	8007186 <UART_SetConfig+0x94e>
 80071c4:	00155500 	.word	0x00155500
 80071c8:	000ccc00 	.word	0x000ccc00
 80071cc:	000aaa00 	.word	0x000aaa00
 80071d0:	01e84800 	.word	0x01e84800
 80071d4:	0001e848 	.word	0x0001e848
 80071d8:	00f42400 	.word	0x00f42400
 80071dc:	007a1200 	.word	0x007a1200
 80071e0:	00516154 	.word	0x00516154
 80071e4:	003d0900 	.word	0x003d0900
 80071e8:	0030d400 	.word	0x0030d400
 80071ec:	0028b0aa 	.word	0x0028b0aa
 80071f0:	001e8480 	.word	0x001e8480
 80071f4:	000f4240 	.word	0x000f4240
 80071f8:	0007a120 	.word	0x0007a120
 80071fc:	0003d090 	.word	0x0003d090
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007200:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007202:	b1db      	cbz	r3, 800723c <UART_SetConfig+0xa04>
 8007204:	2b01      	cmp	r3, #1
 8007206:	d023      	beq.n	8007250 <UART_SetConfig+0xa18>
 8007208:	2b02      	cmp	r3, #2
 800720a:	d024      	beq.n	8007256 <UART_SetConfig+0xa1e>
 800720c:	2b03      	cmp	r3, #3
 800720e:	d025      	beq.n	800725c <UART_SetConfig+0xa24>
 8007210:	2b04      	cmp	r3, #4
 8007212:	d026      	beq.n	8007262 <UART_SetConfig+0xa2a>
 8007214:	2b05      	cmp	r3, #5
 8007216:	d027      	beq.n	8007268 <UART_SetConfig+0xa30>
 8007218:	2b06      	cmp	r3, #6
 800721a:	d028      	beq.n	800726e <UART_SetConfig+0xa36>
 800721c:	2b07      	cmp	r3, #7
 800721e:	d029      	beq.n	8007274 <UART_SetConfig+0xa3c>
 8007220:	2b08      	cmp	r3, #8
 8007222:	d02a      	beq.n	800727a <UART_SetConfig+0xa42>
 8007224:	2b09      	cmp	r3, #9
 8007226:	d02b      	beq.n	8007280 <UART_SetConfig+0xa48>
 8007228:	2b0a      	cmp	r3, #10
 800722a:	d02c      	beq.n	8007286 <UART_SetConfig+0xa4e>
 800722c:	2b0b      	cmp	r3, #11
 800722e:	d002      	beq.n	8007236 <UART_SetConfig+0x9fe>
 8007230:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007234:	e004      	b.n	8007240 <UART_SetConfig+0xa08>
 8007236:	f44f 7380 	mov.w	r3, #256	; 0x100
 800723a:	e001      	b.n	8007240 <UART_SetConfig+0xa08>
 800723c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007240:	6862      	ldr	r2, [r4, #4]
 8007242:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8007246:	fbb3 f3f2 	udiv	r3, r3, r2
 800724a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800724c:	2600      	movs	r6, #0
        break;
 800724e:	e6de      	b.n	800700e <UART_SetConfig+0x7d6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007250:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007254:	e7f4      	b.n	8007240 <UART_SetConfig+0xa08>
 8007256:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800725a:	e7f1      	b.n	8007240 <UART_SetConfig+0xa08>
 800725c:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8007260:	e7ee      	b.n	8007240 <UART_SetConfig+0xa08>
 8007262:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007266:	e7eb      	b.n	8007240 <UART_SetConfig+0xa08>
 8007268:	f641 1398 	movw	r3, #6552	; 0x1998
 800726c:	e7e8      	b.n	8007240 <UART_SetConfig+0xa08>
 800726e:	f241 5354 	movw	r3, #5460	; 0x1554
 8007272:	e7e5      	b.n	8007240 <UART_SetConfig+0xa08>
 8007274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007278:	e7e2      	b.n	8007240 <UART_SetConfig+0xa08>
 800727a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800727e:	e7df      	b.n	8007240 <UART_SetConfig+0xa08>
 8007280:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007284:	e7dc      	b.n	8007240 <UART_SetConfig+0xa08>
 8007286:	f44f 7300 	mov.w	r3, #512	; 0x200
 800728a:	e7d9      	b.n	8007240 <UART_SetConfig+0xa08>
        ret = HAL_ERROR;
 800728c:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 800728e:	2300      	movs	r3, #0
 8007290:	e6bd      	b.n	800700e <UART_SetConfig+0x7d6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007292:	f7fd f8c5 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
 8007296:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007298:	b1d3      	cbz	r3, 80072d0 <UART_SetConfig+0xa98>
 800729a:	2b01      	cmp	r3, #1
 800729c:	d036      	beq.n	800730c <UART_SetConfig+0xad4>
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d036      	beq.n	8007310 <UART_SetConfig+0xad8>
 80072a2:	2b03      	cmp	r3, #3
 80072a4:	d036      	beq.n	8007314 <UART_SetConfig+0xadc>
 80072a6:	2b04      	cmp	r3, #4
 80072a8:	d036      	beq.n	8007318 <UART_SetConfig+0xae0>
 80072aa:	2b05      	cmp	r3, #5
 80072ac:	d036      	beq.n	800731c <UART_SetConfig+0xae4>
 80072ae:	2b06      	cmp	r3, #6
 80072b0:	d036      	beq.n	8007320 <UART_SetConfig+0xae8>
 80072b2:	2b07      	cmp	r3, #7
 80072b4:	d036      	beq.n	8007324 <UART_SetConfig+0xaec>
 80072b6:	2b08      	cmp	r3, #8
 80072b8:	d036      	beq.n	8007328 <UART_SetConfig+0xaf0>
 80072ba:	2b09      	cmp	r3, #9
 80072bc:	d036      	beq.n	800732c <UART_SetConfig+0xaf4>
 80072be:	2b0a      	cmp	r3, #10
 80072c0:	d036      	beq.n	8007330 <UART_SetConfig+0xaf8>
 80072c2:	2b0b      	cmp	r3, #11
 80072c4:	d001      	beq.n	80072ca <UART_SetConfig+0xa92>
 80072c6:	2301      	movs	r3, #1
 80072c8:	e003      	b.n	80072d2 <UART_SetConfig+0xa9a>
 80072ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072ce:	e000      	b.n	80072d2 <UART_SetConfig+0xa9a>
 80072d0:	2301      	movs	r3, #1
 80072d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80072d6:	6862      	ldr	r2, [r4, #4]
 80072d8:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80072dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80072e0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80072e2:	2600      	movs	r6, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072e4:	f1a3 0110 	sub.w	r1, r3, #16
 80072e8:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80072ec:	4291      	cmp	r1, r2
 80072ee:	f200 8127 	bhi.w	8007540 <UART_SetConfig+0xd08>
      huart->Instance->BRR = usartdiv;
 80072f2:	6822      	ldr	r2, [r4, #0]
 80072f4:	60d3      	str	r3, [r2, #12]
  huart->NbTxDataToProcess = 1;
 80072f6:	2301      	movs	r3, #1
 80072f8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80072fc:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8007300:	2300      	movs	r3, #0
 8007302:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 8007304:	6723      	str	r3, [r4, #112]	; 0x70
}
 8007306:	4630      	mov	r0, r6
 8007308:	e8bd 8b78 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, fp, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800730c:	2302      	movs	r3, #2
 800730e:	e7e0      	b.n	80072d2 <UART_SetConfig+0xa9a>
 8007310:	2304      	movs	r3, #4
 8007312:	e7de      	b.n	80072d2 <UART_SetConfig+0xa9a>
 8007314:	2306      	movs	r3, #6
 8007316:	e7dc      	b.n	80072d2 <UART_SetConfig+0xa9a>
 8007318:	2308      	movs	r3, #8
 800731a:	e7da      	b.n	80072d2 <UART_SetConfig+0xa9a>
 800731c:	230a      	movs	r3, #10
 800731e:	e7d8      	b.n	80072d2 <UART_SetConfig+0xa9a>
 8007320:	230c      	movs	r3, #12
 8007322:	e7d6      	b.n	80072d2 <UART_SetConfig+0xa9a>
 8007324:	2310      	movs	r3, #16
 8007326:	e7d4      	b.n	80072d2 <UART_SetConfig+0xa9a>
 8007328:	2320      	movs	r3, #32
 800732a:	e7d2      	b.n	80072d2 <UART_SetConfig+0xa9a>
 800732c:	2340      	movs	r3, #64	; 0x40
 800732e:	e7d0      	b.n	80072d2 <UART_SetConfig+0xa9a>
 8007330:	2380      	movs	r3, #128	; 0x80
 8007332:	e7ce      	b.n	80072d2 <UART_SetConfig+0xa9a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007334:	f7fd f886 	bl	8004444 <HAL_RCC_GetPCLK2Freq>
 8007338:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800733a:	b1d3      	cbz	r3, 8007372 <UART_SetConfig+0xb3a>
 800733c:	2b01      	cmp	r3, #1
 800733e:	d023      	beq.n	8007388 <UART_SetConfig+0xb50>
 8007340:	2b02      	cmp	r3, #2
 8007342:	d023      	beq.n	800738c <UART_SetConfig+0xb54>
 8007344:	2b03      	cmp	r3, #3
 8007346:	d023      	beq.n	8007390 <UART_SetConfig+0xb58>
 8007348:	2b04      	cmp	r3, #4
 800734a:	d023      	beq.n	8007394 <UART_SetConfig+0xb5c>
 800734c:	2b05      	cmp	r3, #5
 800734e:	d023      	beq.n	8007398 <UART_SetConfig+0xb60>
 8007350:	2b06      	cmp	r3, #6
 8007352:	d023      	beq.n	800739c <UART_SetConfig+0xb64>
 8007354:	2b07      	cmp	r3, #7
 8007356:	d023      	beq.n	80073a0 <UART_SetConfig+0xb68>
 8007358:	2b08      	cmp	r3, #8
 800735a:	d023      	beq.n	80073a4 <UART_SetConfig+0xb6c>
 800735c:	2b09      	cmp	r3, #9
 800735e:	d023      	beq.n	80073a8 <UART_SetConfig+0xb70>
 8007360:	2b0a      	cmp	r3, #10
 8007362:	d023      	beq.n	80073ac <UART_SetConfig+0xb74>
 8007364:	2b0b      	cmp	r3, #11
 8007366:	d001      	beq.n	800736c <UART_SetConfig+0xb34>
 8007368:	2301      	movs	r3, #1
 800736a:	e003      	b.n	8007374 <UART_SetConfig+0xb3c>
 800736c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007370:	e000      	b.n	8007374 <UART_SetConfig+0xb3c>
 8007372:	2301      	movs	r3, #1
 8007374:	fbb0 f3f3 	udiv	r3, r0, r3
 8007378:	6862      	ldr	r2, [r4, #4]
 800737a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800737e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007382:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8007384:	2600      	movs	r6, #0
        break;
 8007386:	e7ad      	b.n	80072e4 <UART_SetConfig+0xaac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007388:	2302      	movs	r3, #2
 800738a:	e7f3      	b.n	8007374 <UART_SetConfig+0xb3c>
 800738c:	2304      	movs	r3, #4
 800738e:	e7f1      	b.n	8007374 <UART_SetConfig+0xb3c>
 8007390:	2306      	movs	r3, #6
 8007392:	e7ef      	b.n	8007374 <UART_SetConfig+0xb3c>
 8007394:	2308      	movs	r3, #8
 8007396:	e7ed      	b.n	8007374 <UART_SetConfig+0xb3c>
 8007398:	230a      	movs	r3, #10
 800739a:	e7eb      	b.n	8007374 <UART_SetConfig+0xb3c>
 800739c:	230c      	movs	r3, #12
 800739e:	e7e9      	b.n	8007374 <UART_SetConfig+0xb3c>
 80073a0:	2310      	movs	r3, #16
 80073a2:	e7e7      	b.n	8007374 <UART_SetConfig+0xb3c>
 80073a4:	2320      	movs	r3, #32
 80073a6:	e7e5      	b.n	8007374 <UART_SetConfig+0xb3c>
 80073a8:	2340      	movs	r3, #64	; 0x40
 80073aa:	e7e3      	b.n	8007374 <UART_SetConfig+0xb3c>
 80073ac:	2380      	movs	r3, #128	; 0x80
 80073ae:	e7e1      	b.n	8007374 <UART_SetConfig+0xb3c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073b2:	b1d3      	cbz	r3, 80073ea <UART_SetConfig+0xbb2>
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d021      	beq.n	80073fc <UART_SetConfig+0xbc4>
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d021      	beq.n	8007400 <UART_SetConfig+0xbc8>
 80073bc:	2b03      	cmp	r3, #3
 80073be:	d021      	beq.n	8007404 <UART_SetConfig+0xbcc>
 80073c0:	2b04      	cmp	r3, #4
 80073c2:	d021      	beq.n	8007408 <UART_SetConfig+0xbd0>
 80073c4:	2b05      	cmp	r3, #5
 80073c6:	d021      	beq.n	800740c <UART_SetConfig+0xbd4>
 80073c8:	2b06      	cmp	r3, #6
 80073ca:	d021      	beq.n	8007410 <UART_SetConfig+0xbd8>
 80073cc:	2b07      	cmp	r3, #7
 80073ce:	d021      	beq.n	8007414 <UART_SetConfig+0xbdc>
 80073d0:	2b08      	cmp	r3, #8
 80073d2:	d021      	beq.n	8007418 <UART_SetConfig+0xbe0>
 80073d4:	2b09      	cmp	r3, #9
 80073d6:	d021      	beq.n	800741c <UART_SetConfig+0xbe4>
 80073d8:	2b0a      	cmp	r3, #10
 80073da:	d021      	beq.n	8007420 <UART_SetConfig+0xbe8>
 80073dc:	2b0b      	cmp	r3, #11
 80073de:	d001      	beq.n	80073e4 <UART_SetConfig+0xbac>
 80073e0:	4b58      	ldr	r3, [pc, #352]	; (8007544 <UART_SetConfig+0xd0c>)
 80073e2:	e003      	b.n	80073ec <UART_SetConfig+0xbb4>
 80073e4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80073e8:	e000      	b.n	80073ec <UART_SetConfig+0xbb4>
 80073ea:	4b56      	ldr	r3, [pc, #344]	; (8007544 <UART_SetConfig+0xd0c>)
 80073ec:	6862      	ldr	r2, [r4, #4]
 80073ee:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80073f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80073f6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80073f8:	2600      	movs	r6, #0
        break;
 80073fa:	e773      	b.n	80072e4 <UART_SetConfig+0xaac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073fc:	4b52      	ldr	r3, [pc, #328]	; (8007548 <UART_SetConfig+0xd10>)
 80073fe:	e7f5      	b.n	80073ec <UART_SetConfig+0xbb4>
 8007400:	4b52      	ldr	r3, [pc, #328]	; (800754c <UART_SetConfig+0xd14>)
 8007402:	e7f3      	b.n	80073ec <UART_SetConfig+0xbb4>
 8007404:	4b52      	ldr	r3, [pc, #328]	; (8007550 <UART_SetConfig+0xd18>)
 8007406:	e7f1      	b.n	80073ec <UART_SetConfig+0xbb4>
 8007408:	4b52      	ldr	r3, [pc, #328]	; (8007554 <UART_SetConfig+0xd1c>)
 800740a:	e7ef      	b.n	80073ec <UART_SetConfig+0xbb4>
 800740c:	4b52      	ldr	r3, [pc, #328]	; (8007558 <UART_SetConfig+0xd20>)
 800740e:	e7ed      	b.n	80073ec <UART_SetConfig+0xbb4>
 8007410:	4b52      	ldr	r3, [pc, #328]	; (800755c <UART_SetConfig+0xd24>)
 8007412:	e7eb      	b.n	80073ec <UART_SetConfig+0xbb4>
 8007414:	4b52      	ldr	r3, [pc, #328]	; (8007560 <UART_SetConfig+0xd28>)
 8007416:	e7e9      	b.n	80073ec <UART_SetConfig+0xbb4>
 8007418:	4b52      	ldr	r3, [pc, #328]	; (8007564 <UART_SetConfig+0xd2c>)
 800741a:	e7e7      	b.n	80073ec <UART_SetConfig+0xbb4>
 800741c:	4b52      	ldr	r3, [pc, #328]	; (8007568 <UART_SetConfig+0xd30>)
 800741e:	e7e5      	b.n	80073ec <UART_SetConfig+0xbb4>
 8007420:	4b52      	ldr	r3, [pc, #328]	; (800756c <UART_SetConfig+0xd34>)
 8007422:	e7e3      	b.n	80073ec <UART_SetConfig+0xbb4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007424:	f7fc fbc2 	bl	8003bac <HAL_RCC_GetSysClockFreq>
 8007428:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800742a:	b1d3      	cbz	r3, 8007462 <UART_SetConfig+0xc2a>
 800742c:	2b01      	cmp	r3, #1
 800742e:	d023      	beq.n	8007478 <UART_SetConfig+0xc40>
 8007430:	2b02      	cmp	r3, #2
 8007432:	d023      	beq.n	800747c <UART_SetConfig+0xc44>
 8007434:	2b03      	cmp	r3, #3
 8007436:	d023      	beq.n	8007480 <UART_SetConfig+0xc48>
 8007438:	2b04      	cmp	r3, #4
 800743a:	d023      	beq.n	8007484 <UART_SetConfig+0xc4c>
 800743c:	2b05      	cmp	r3, #5
 800743e:	d023      	beq.n	8007488 <UART_SetConfig+0xc50>
 8007440:	2b06      	cmp	r3, #6
 8007442:	d023      	beq.n	800748c <UART_SetConfig+0xc54>
 8007444:	2b07      	cmp	r3, #7
 8007446:	d023      	beq.n	8007490 <UART_SetConfig+0xc58>
 8007448:	2b08      	cmp	r3, #8
 800744a:	d023      	beq.n	8007494 <UART_SetConfig+0xc5c>
 800744c:	2b09      	cmp	r3, #9
 800744e:	d023      	beq.n	8007498 <UART_SetConfig+0xc60>
 8007450:	2b0a      	cmp	r3, #10
 8007452:	d023      	beq.n	800749c <UART_SetConfig+0xc64>
 8007454:	2b0b      	cmp	r3, #11
 8007456:	d001      	beq.n	800745c <UART_SetConfig+0xc24>
 8007458:	2301      	movs	r3, #1
 800745a:	e003      	b.n	8007464 <UART_SetConfig+0xc2c>
 800745c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007460:	e000      	b.n	8007464 <UART_SetConfig+0xc2c>
 8007462:	2301      	movs	r3, #1
 8007464:	fbb0 f3f3 	udiv	r3, r0, r3
 8007468:	6862      	ldr	r2, [r4, #4]
 800746a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800746e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007472:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8007474:	2600      	movs	r6, #0
        break;
 8007476:	e735      	b.n	80072e4 <UART_SetConfig+0xaac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007478:	2302      	movs	r3, #2
 800747a:	e7f3      	b.n	8007464 <UART_SetConfig+0xc2c>
 800747c:	2304      	movs	r3, #4
 800747e:	e7f1      	b.n	8007464 <UART_SetConfig+0xc2c>
 8007480:	2306      	movs	r3, #6
 8007482:	e7ef      	b.n	8007464 <UART_SetConfig+0xc2c>
 8007484:	2308      	movs	r3, #8
 8007486:	e7ed      	b.n	8007464 <UART_SetConfig+0xc2c>
 8007488:	230a      	movs	r3, #10
 800748a:	e7eb      	b.n	8007464 <UART_SetConfig+0xc2c>
 800748c:	230c      	movs	r3, #12
 800748e:	e7e9      	b.n	8007464 <UART_SetConfig+0xc2c>
 8007490:	2310      	movs	r3, #16
 8007492:	e7e7      	b.n	8007464 <UART_SetConfig+0xc2c>
 8007494:	2320      	movs	r3, #32
 8007496:	e7e5      	b.n	8007464 <UART_SetConfig+0xc2c>
 8007498:	2340      	movs	r3, #64	; 0x40
 800749a:	e7e3      	b.n	8007464 <UART_SetConfig+0xc2c>
 800749c:	2380      	movs	r3, #128	; 0x80
 800749e:	e7e1      	b.n	8007464 <UART_SetConfig+0xc2c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074a2:	b1d3      	cbz	r3, 80074da <UART_SetConfig+0xca2>
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d022      	beq.n	80074ee <UART_SetConfig+0xcb6>
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	d023      	beq.n	80074f4 <UART_SetConfig+0xcbc>
 80074ac:	2b03      	cmp	r3, #3
 80074ae:	d024      	beq.n	80074fa <UART_SetConfig+0xcc2>
 80074b0:	2b04      	cmp	r3, #4
 80074b2:	d025      	beq.n	8007500 <UART_SetConfig+0xcc8>
 80074b4:	2b05      	cmp	r3, #5
 80074b6:	d026      	beq.n	8007506 <UART_SetConfig+0xcce>
 80074b8:	2b06      	cmp	r3, #6
 80074ba:	d027      	beq.n	800750c <UART_SetConfig+0xcd4>
 80074bc:	2b07      	cmp	r3, #7
 80074be:	d028      	beq.n	8007512 <UART_SetConfig+0xcda>
 80074c0:	2b08      	cmp	r3, #8
 80074c2:	d029      	beq.n	8007518 <UART_SetConfig+0xce0>
 80074c4:	2b09      	cmp	r3, #9
 80074c6:	d02a      	beq.n	800751e <UART_SetConfig+0xce6>
 80074c8:	2b0a      	cmp	r3, #10
 80074ca:	d02b      	beq.n	8007524 <UART_SetConfig+0xcec>
 80074cc:	2b0b      	cmp	r3, #11
 80074ce:	d002      	beq.n	80074d6 <UART_SetConfig+0xc9e>
 80074d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074d4:	e003      	b.n	80074de <UART_SetConfig+0xca6>
 80074d6:	2380      	movs	r3, #128	; 0x80
 80074d8:	e001      	b.n	80074de <UART_SetConfig+0xca6>
 80074da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074de:	6862      	ldr	r2, [r4, #4]
 80074e0:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80074e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80074e8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80074ea:	2600      	movs	r6, #0
        break;
 80074ec:	e6fa      	b.n	80072e4 <UART_SetConfig+0xaac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80074f2:	e7f4      	b.n	80074de <UART_SetConfig+0xca6>
 80074f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80074f8:	e7f1      	b.n	80074de <UART_SetConfig+0xca6>
 80074fa:	f241 5355 	movw	r3, #5461	; 0x1555
 80074fe:	e7ee      	b.n	80074de <UART_SetConfig+0xca6>
 8007500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007504:	e7eb      	b.n	80074de <UART_SetConfig+0xca6>
 8007506:	f640 43cc 	movw	r3, #3276	; 0xccc
 800750a:	e7e8      	b.n	80074de <UART_SetConfig+0xca6>
 800750c:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8007510:	e7e5      	b.n	80074de <UART_SetConfig+0xca6>
 8007512:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007516:	e7e2      	b.n	80074de <UART_SetConfig+0xca6>
 8007518:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800751c:	e7df      	b.n	80074de <UART_SetConfig+0xca6>
 800751e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007522:	e7dc      	b.n	80074de <UART_SetConfig+0xca6>
 8007524:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007528:	e7d9      	b.n	80074de <UART_SetConfig+0xca6>
        ret = HAL_ERROR;
 800752a:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 800752c:	2300      	movs	r3, #0
 800752e:	e6d9      	b.n	80072e4 <UART_SetConfig+0xaac>
        ret = HAL_ERROR;
 8007530:	2601      	movs	r6, #1
 8007532:	e6e0      	b.n	80072f6 <UART_SetConfig+0xabe>
 8007534:	2601      	movs	r6, #1
 8007536:	e6de      	b.n	80072f6 <UART_SetConfig+0xabe>
          ret = HAL_ERROR;
 8007538:	2601      	movs	r6, #1
 800753a:	e6dc      	b.n	80072f6 <UART_SetConfig+0xabe>
      ret = HAL_ERROR;
 800753c:	2601      	movs	r6, #1
 800753e:	e6da      	b.n	80072f6 <UART_SetConfig+0xabe>
      ret = HAL_ERROR;
 8007540:	2601      	movs	r6, #1
 8007542:	e6d8      	b.n	80072f6 <UART_SetConfig+0xabe>
 8007544:	00f42400 	.word	0x00f42400
 8007548:	007a1200 	.word	0x007a1200
 800754c:	003d0900 	.word	0x003d0900
 8007550:	0028b0aa 	.word	0x0028b0aa
 8007554:	001e8480 	.word	0x001e8480
 8007558:	00186a00 	.word	0x00186a00
 800755c:	00145855 	.word	0x00145855
 8007560:	000f4240 	.word	0x000f4240
 8007564:	0007a120 	.word	0x0007a120
 8007568:	0003d090 	.word	0x0003d090
 800756c:	0001e848 	.word	0x0001e848

08007570 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007570:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007572:	f013 0f01 	tst.w	r3, #1
 8007576:	d006      	beq.n	8007586 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007578:	6802      	ldr	r2, [r0, #0]
 800757a:	6853      	ldr	r3, [r2, #4]
 800757c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007580:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007582:	430b      	orrs	r3, r1
 8007584:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007586:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007588:	f013 0f02 	tst.w	r3, #2
 800758c:	d006      	beq.n	800759c <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800758e:	6802      	ldr	r2, [r0, #0]
 8007590:	6853      	ldr	r3, [r2, #4]
 8007592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007596:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8007598:	430b      	orrs	r3, r1
 800759a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800759c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800759e:	f013 0f04 	tst.w	r3, #4
 80075a2:	d006      	beq.n	80075b2 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075a4:	6802      	ldr	r2, [r0, #0]
 80075a6:	6853      	ldr	r3, [r2, #4]
 80075a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075ac:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80075ae:	430b      	orrs	r3, r1
 80075b0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80075b4:	f013 0f08 	tst.w	r3, #8
 80075b8:	d006      	beq.n	80075c8 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075ba:	6802      	ldr	r2, [r0, #0]
 80075bc:	6853      	ldr	r3, [r2, #4]
 80075be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075c2:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80075c4:	430b      	orrs	r3, r1
 80075c6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80075ca:	f013 0f10 	tst.w	r3, #16
 80075ce:	d006      	beq.n	80075de <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075d0:	6802      	ldr	r2, [r0, #0]
 80075d2:	6893      	ldr	r3, [r2, #8]
 80075d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075d8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80075da:	430b      	orrs	r3, r1
 80075dc:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075de:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80075e0:	f013 0f20 	tst.w	r3, #32
 80075e4:	d006      	beq.n	80075f4 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075e6:	6802      	ldr	r2, [r0, #0]
 80075e8:	6893      	ldr	r3, [r2, #8]
 80075ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075ee:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80075f0:	430b      	orrs	r3, r1
 80075f2:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075f4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80075f6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80075fa:	d00a      	beq.n	8007612 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075fc:	6802      	ldr	r2, [r0, #0]
 80075fe:	6853      	ldr	r3, [r2, #4]
 8007600:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007604:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8007606:	430b      	orrs	r3, r1
 8007608:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800760a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800760c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007610:	d00b      	beq.n	800762a <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007612:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007614:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007618:	d006      	beq.n	8007628 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800761a:	6802      	ldr	r2, [r0, #0]
 800761c:	6853      	ldr	r3, [r2, #4]
 800761e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007622:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8007624:	430b      	orrs	r3, r1
 8007626:	6053      	str	r3, [r2, #4]
 8007628:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800762a:	6802      	ldr	r2, [r0, #0]
 800762c:	6853      	ldr	r3, [r2, #4]
 800762e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007632:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8007634:	430b      	orrs	r3, r1
 8007636:	6053      	str	r3, [r2, #4]
 8007638:	e7eb      	b.n	8007612 <UART_AdvFeatureConfig+0xa2>

0800763a <UART_WaitOnFlagUntilTimeout>:
{
 800763a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800763e:	4605      	mov	r5, r0
 8007640:	460f      	mov	r7, r1
 8007642:	4616      	mov	r6, r2
 8007644:	4698      	mov	r8, r3
 8007646:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007648:	682b      	ldr	r3, [r5, #0]
 800764a:	69db      	ldr	r3, [r3, #28]
 800764c:	ea37 0303 	bics.w	r3, r7, r3
 8007650:	bf0c      	ite	eq
 8007652:	2301      	moveq	r3, #1
 8007654:	2300      	movne	r3, #0
 8007656:	42b3      	cmp	r3, r6
 8007658:	d11e      	bne.n	8007698 <UART_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 800765a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800765e:	d0f3      	beq.n	8007648 <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007660:	b12c      	cbz	r4, 800766e <UART_WaitOnFlagUntilTimeout+0x34>
 8007662:	f7f9 fc6d 	bl	8000f40 <HAL_GetTick>
 8007666:	eba0 0008 	sub.w	r0, r0, r8
 800766a:	4284      	cmp	r4, r0
 800766c:	d2ec      	bcs.n	8007648 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800766e:	682a      	ldr	r2, [r5, #0]
 8007670:	6813      	ldr	r3, [r2, #0]
 8007672:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007676:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007678:	682a      	ldr	r2, [r5, #0]
 800767a:	6893      	ldr	r3, [r2, #8]
 800767c:	f023 0301 	bic.w	r3, r3, #1
 8007680:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8007682:	2320      	movs	r3, #32
 8007684:	f885 307d 	strb.w	r3, [r5, #125]	; 0x7d
        huart->RxState = HAL_UART_STATE_READY;
 8007688:	f885 307e 	strb.w	r3, [r5, #126]	; 0x7e
        __HAL_UNLOCK(huart);
 800768c:	2300      	movs	r3, #0
 800768e:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
        return HAL_TIMEOUT;
 8007692:	2003      	movs	r0, #3
 8007694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8007698:	2000      	movs	r0, #0
}
 800769a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800769e <UART_CheckIdleState>:
{
 800769e:	b530      	push	{r4, r5, lr}
 80076a0:	b083      	sub	sp, #12
 80076a2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076a4:	2300      	movs	r3, #0
 80076a6:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 80076aa:	f7f9 fc49 	bl	8000f40 <HAL_GetTick>
 80076ae:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076b0:	6823      	ldr	r3, [r4, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f013 0f08 	tst.w	r3, #8
 80076b8:	d10e      	bne.n	80076d8 <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076ba:	6823      	ldr	r3, [r4, #0]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f013 0f04 	tst.w	r3, #4
 80076c2:	d117      	bne.n	80076f4 <UART_CheckIdleState+0x56>
  huart->gState = HAL_UART_STATE_READY;
 80076c4:	2320      	movs	r3, #32
 80076c6:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  huart->RxState = HAL_UART_STATE_READY;
 80076ca:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
  __HAL_UNLOCK(huart);
 80076ce:	2000      	movs	r0, #0
 80076d0:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 80076d4:	b003      	add	sp, #12
 80076d6:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	4603      	mov	r3, r0
 80076e0:	2200      	movs	r2, #0
 80076e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80076e6:	4620      	mov	r0, r4
 80076e8:	f7ff ffa7 	bl	800763a <UART_WaitOnFlagUntilTimeout>
 80076ec:	2800      	cmp	r0, #0
 80076ee:	d0e4      	beq.n	80076ba <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 80076f0:	2003      	movs	r0, #3
 80076f2:	e7ef      	b.n	80076d4 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076f8:	9300      	str	r3, [sp, #0]
 80076fa:	462b      	mov	r3, r5
 80076fc:	2200      	movs	r2, #0
 80076fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007702:	4620      	mov	r0, r4
 8007704:	f7ff ff99 	bl	800763a <UART_WaitOnFlagUntilTimeout>
 8007708:	2800      	cmp	r0, #0
 800770a:	d0db      	beq.n	80076c4 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800770c:	2003      	movs	r0, #3
 800770e:	e7e1      	b.n	80076d4 <UART_CheckIdleState+0x36>

08007710 <HAL_UART_Init>:
  if (huart == NULL)
 8007710:	b378      	cbz	r0, 8007772 <HAL_UART_Init+0x62>
{
 8007712:	b510      	push	{r4, lr}
 8007714:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007716:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 800771a:	b30b      	cbz	r3, 8007760 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800771c:	2324      	movs	r3, #36	; 0x24
 800771e:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UART_DISABLE(huart);
 8007722:	6822      	ldr	r2, [r4, #0]
 8007724:	6813      	ldr	r3, [r2, #0]
 8007726:	f023 0301 	bic.w	r3, r3, #1
 800772a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800772c:	4620      	mov	r0, r4
 800772e:	f7ff f883 	bl	8006838 <UART_SetConfig>
 8007732:	2801      	cmp	r0, #1
 8007734:	d01f      	beq.n	8007776 <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007736:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007738:	b9bb      	cbnz	r3, 800776a <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800773a:	6822      	ldr	r2, [r4, #0]
 800773c:	6853      	ldr	r3, [r2, #4]
 800773e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8007742:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007744:	6822      	ldr	r2, [r4, #0]
 8007746:	6893      	ldr	r3, [r2, #8]
 8007748:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800774c:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800774e:	6822      	ldr	r2, [r4, #0]
 8007750:	6813      	ldr	r3, [r2, #0]
 8007752:	f043 0301 	orr.w	r3, r3, #1
 8007756:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8007758:	4620      	mov	r0, r4
 800775a:	f7ff ffa0 	bl	800769e <UART_CheckIdleState>
 800775e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8007760:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 8007764:	f008 fa90 	bl	800fc88 <HAL_UART_MspInit>
 8007768:	e7d8      	b.n	800771c <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800776a:	4620      	mov	r0, r4
 800776c:	f7ff ff00 	bl	8007570 <UART_AdvFeatureConfig>
 8007770:	e7e3      	b.n	800773a <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8007772:	2001      	movs	r0, #1
 8007774:	4770      	bx	lr
}
 8007776:	bd10      	pop	{r4, pc}

08007778 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007778:	b084      	sub	sp, #16
 800777a:	4602      	mov	r2, r0
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U};
 800777c:	4b19      	ldr	r3, [pc, #100]	; (80077e4 <UARTEx_SetNbDataToProcess+0x6c>)
 800777e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007782:	9002      	str	r0, [sp, #8]
 8007784:	f8ad 100c 	strh.w	r1, [sp, #12]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U};
 8007788:	3308      	adds	r3, #8
 800778a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800778e:	9000      	str	r0, [sp, #0]
 8007790:	f8ad 1004 	strh.w	r1, [sp, #4]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007794:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8007796:	b1fb      	cbz	r3, 80077d8 <UARTEx_SetNbDataToProcess+0x60>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007798:	6813      	ldr	r3, [r2, #0]
 800779a:	6899      	ldr	r1, [r3, #8]
 800779c:	f3c1 6142 	ubfx	r1, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80077a0:	6898      	ldr	r0, [r3, #8]
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold]) / denominator[tx_fifo_threshold];
 80077a2:	ab04      	add	r3, sp, #16
 80077a4:	eb03 7050 	add.w	r0, r3, r0, lsr #29
 80077a8:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 80077ac:	00db      	lsls	r3, r3, #3
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 80077b4:	fbb3 f3f0 	udiv	r3, r3, r0
 80077b8:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold]) / denominator[rx_fifo_threshold];
 80077bc:	ab04      	add	r3, sp, #16
 80077be:	4419      	add	r1, r3
 80077c0:	f811 3c08 	ldrb.w	r3, [r1, #-8]
 80077c4:	00db      	lsls	r3, r3, #3
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 80077cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80077d0:	f8a2 3068 	strh.w	r3, [r2, #104]	; 0x68
  }
}
 80077d4:	b004      	add	sp, #16
 80077d6:	4770      	bx	lr
    huart->NbTxDataToProcess = 1U;
 80077d8:	2301      	movs	r3, #1
 80077da:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80077de:	f8a2 3068 	strh.w	r3, [r2, #104]	; 0x68
 80077e2:	e7f7      	b.n	80077d4 <UARTEx_SetNbDataToProcess+0x5c>
 80077e4:	08012c08 	.word	0x08012c08

080077e8 <HAL_UARTEx_WakeupCallback>:
{
 80077e8:	4770      	bx	lr

080077ea <HAL_UARTEx_RxFifoFullCallback>:
{
 80077ea:	4770      	bx	lr

080077ec <HAL_UARTEx_TxFifoEmptyCallback>:
{
 80077ec:	4770      	bx	lr

080077ee <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 80077ee:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d018      	beq.n	8007828 <HAL_UARTEx_DisableFifoMode+0x3a>
 80077f6:	2301      	movs	r3, #1
 80077f8:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 80077fc:	2324      	movs	r3, #36	; 0x24
 80077fe:	f880 307d 	strb.w	r3, [r0, #125]	; 0x7d
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007802:	6803      	ldr	r3, [r0, #0]
 8007804:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007806:	6819      	ldr	r1, [r3, #0]
 8007808:	f021 0101 	bic.w	r1, r1, #1
 800780c:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800780e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007812:	2300      	movs	r3, #0
 8007814:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007816:	6801      	ldr	r1, [r0, #0]
 8007818:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800781a:	2220      	movs	r2, #32
 800781c:	f880 207d 	strb.w	r2, [r0, #125]	; 0x7d
  __HAL_UNLOCK(huart);
 8007820:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 8007824:	4618      	mov	r0, r3
 8007826:	4770      	bx	lr
  __HAL_LOCK(huart);
 8007828:	2002      	movs	r0, #2
}
 800782a:	4770      	bx	lr

0800782c <HAL_UARTEx_SetTxFifoThreshold>:
{
 800782c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800782e:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8007832:	2b01      	cmp	r3, #1
 8007834:	d101      	bne.n	800783a <HAL_UARTEx_SetTxFifoThreshold+0xe>
 8007836:	2002      	movs	r0, #2
}
 8007838:	bd38      	pop	{r3, r4, r5, pc}
 800783a:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800783c:	2301      	movs	r3, #1
 800783e:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8007842:	2324      	movs	r3, #36	; 0x24
 8007844:	f880 307d 	strb.w	r3, [r0, #125]	; 0x7d
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007848:	6803      	ldr	r3, [r0, #0]
 800784a:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	f022 0201 	bic.w	r2, r2, #1
 8007852:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007854:	6802      	ldr	r2, [r0, #0]
 8007856:	6893      	ldr	r3, [r2, #8]
 8007858:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800785c:	4319      	orrs	r1, r3
 800785e:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8007860:	f7ff ff8a 	bl	8007778 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007864:	6823      	ldr	r3, [r4, #0]
 8007866:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007868:	2320      	movs	r3, #32
 800786a:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(huart);
 800786e:	2000      	movs	r0, #0
 8007870:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  return HAL_OK;
 8007874:	bd38      	pop	{r3, r4, r5, pc}

08007876 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8007876:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8007878:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800787c:	2b01      	cmp	r3, #1
 800787e:	d101      	bne.n	8007884 <HAL_UARTEx_SetRxFifoThreshold+0xe>
 8007880:	2002      	movs	r0, #2
}
 8007882:	bd38      	pop	{r3, r4, r5, pc}
 8007884:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8007886:	2301      	movs	r3, #1
 8007888:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 800788c:	2324      	movs	r3, #36	; 0x24
 800788e:	f880 307d 	strb.w	r3, [r0, #125]	; 0x7d
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007892:	6803      	ldr	r3, [r0, #0]
 8007894:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	f022 0201 	bic.w	r2, r2, #1
 800789c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800789e:	6802      	ldr	r2, [r0, #0]
 80078a0:	6893      	ldr	r3, [r2, #8]
 80078a2:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80078a6:	4319      	orrs	r1, r3
 80078a8:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80078aa:	f7ff ff65 	bl	8007778 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078ae:	6823      	ldr	r3, [r4, #0]
 80078b0:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80078b2:	2320      	movs	r3, #32
 80078b4:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(huart);
 80078b8:	2000      	movs	r0, #0
 80078ba:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  return HAL_OK;
 80078be:	bd38      	pop	{r3, r4, r5, pc}

080078c0 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80078c0:	4b0b      	ldr	r3, [pc, #44]	; (80078f0 <SDMMC_GetCmdError+0x30>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a0b      	ldr	r2, [pc, #44]	; (80078f4 <SDMMC_GetCmdError+0x34>)
 80078c6:	fba2 2303 	umull	r2, r3, r2, r3
 80078ca:	0a5a      	lsrs	r2, r3, #9
 80078cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80078d0:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 80078d4:	1e5a      	subs	r2, r3, #1
 80078d6:	b143      	cbz	r3, 80078ea <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80078d8:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 80078da:	4613      	mov	r3, r2
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80078dc:	f011 0f80 	tst.w	r1, #128	; 0x80
 80078e0:	d0f8      	beq.n	80078d4 <SDMMC_GetCmdError+0x14>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80078e2:	4b05      	ldr	r3, [pc, #20]	; (80078f8 <SDMMC_GetCmdError+0x38>)
 80078e4:	6383      	str	r3, [r0, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80078e6:	2000      	movs	r0, #0
 80078e8:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80078ea:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80078ee:	4770      	bx	lr
 80078f0:	20000048 	.word	0x20000048
 80078f4:	10624dd3 	.word	0x10624dd3
 80078f8:	002000c5 	.word	0x002000c5

080078fc <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80078fc:	4b13      	ldr	r3, [pc, #76]	; (800794c <SDMMC_GetCmdResp2+0x50>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a13      	ldr	r2, [pc, #76]	; (8007950 <SDMMC_GetCmdResp2+0x54>)
 8007902:	fba2 2303 	umull	r2, r3, r2, r3
 8007906:	0a5a      	lsrs	r2, r3, #9
 8007908:	f241 3388 	movw	r3, #5000	; 0x1388
 800790c:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8007910:	1e5a      	subs	r2, r3, #1
 8007912:	b1c3      	cbz	r3, 8007946 <SDMMC_GetCmdResp2+0x4a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007914:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 8007916:	4613      	mov	r3, r2
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007918:	f011 0f45 	tst.w	r1, #69	; 0x45
 800791c:	d0f8      	beq.n	8007910 <SDMMC_GetCmdResp2+0x14>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800791e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007920:	f013 0f04 	tst.w	r3, #4
 8007924:	d003      	beq.n	800792e <SDMMC_GetCmdResp2+0x32>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007926:	2304      	movs	r3, #4
 8007928:	6383      	str	r3, [r0, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800792a:	4618      	mov	r0, r3
 800792c:	4770      	bx	lr
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800792e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007930:	f013 0f01 	tst.w	r3, #1
 8007934:	d103      	bne.n	800793e <SDMMC_GetCmdResp2+0x42>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007936:	4b07      	ldr	r3, [pc, #28]	; (8007954 <SDMMC_GetCmdResp2+0x58>)
 8007938:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800793a:	2000      	movs	r0, #0
 800793c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800793e:	2301      	movs	r3, #1
 8007940:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007942:	4618      	mov	r0, r3
 8007944:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007946:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800794a:	4770      	bx	lr
 800794c:	20000048 	.word	0x20000048
 8007950:	10624dd3 	.word	0x10624dd3
 8007954:	002000c5 	.word	0x002000c5

08007958 <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007958:	4b0f      	ldr	r3, [pc, #60]	; (8007998 <SDMMC_GetCmdResp3+0x40>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a0f      	ldr	r2, [pc, #60]	; (800799c <SDMMC_GetCmdResp3+0x44>)
 800795e:	fba2 2303 	umull	r2, r3, r2, r3
 8007962:	0a5a      	lsrs	r2, r3, #9
 8007964:	f241 3388 	movw	r3, #5000	; 0x1388
 8007968:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 800796c:	1e5a      	subs	r2, r3, #1
 800796e:	b183      	cbz	r3, 8007992 <SDMMC_GetCmdResp3+0x3a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007970:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 8007972:	4613      	mov	r3, r2
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007974:	f011 0f45 	tst.w	r1, #69	; 0x45
 8007978:	d0f8      	beq.n	800796c <SDMMC_GetCmdResp3+0x14>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800797a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800797c:	f013 0f04 	tst.w	r3, #4
 8007980:	d003      	beq.n	800798a <SDMMC_GetCmdResp3+0x32>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007982:	2304      	movs	r3, #4
 8007984:	6383      	str	r3, [r0, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007986:	4618      	mov	r0, r3
 8007988:	4770      	bx	lr
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800798a:	4b05      	ldr	r3, [pc, #20]	; (80079a0 <SDMMC_GetCmdResp3+0x48>)
 800798c:	6383      	str	r3, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800798e:	2000      	movs	r0, #0
 8007990:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007992:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007996:	4770      	bx	lr
 8007998:	20000048 	.word	0x20000048
 800799c:	10624dd3 	.word	0x10624dd3
 80079a0:	002000c5 	.word	0x002000c5

080079a4 <SDMMC_GetCmdResp7>:
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80079a4:	4b16      	ldr	r3, [pc, #88]	; (8007a00 <SDMMC_GetCmdResp7+0x5c>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a16      	ldr	r2, [pc, #88]	; (8007a04 <SDMMC_GetCmdResp7+0x60>)
 80079aa:	fba2 2303 	umull	r2, r3, r2, r3
 80079ae:	0a5a      	lsrs	r2, r3, #9
 80079b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80079b4:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 80079b8:	1e5a      	subs	r2, r3, #1
 80079ba:	b1e3      	cbz	r3, 80079f6 <SDMMC_GetCmdResp7+0x52>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80079bc:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 80079be:	4613      	mov	r3, r2
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80079c0:	f011 0f45 	tst.w	r1, #69	; 0x45
 80079c4:	d0f8      	beq.n	80079b8 <SDMMC_GetCmdResp7+0x14>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80079c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80079c8:	f013 0f04 	tst.w	r3, #4
 80079cc:	d003      	beq.n	80079d6 <SDMMC_GetCmdResp7+0x32>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80079ce:	2304      	movs	r3, #4
 80079d0:	6383      	str	r3, [r0, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80079d2:	4618      	mov	r0, r3
 80079d4:	4770      	bx	lr
  }
  
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80079d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80079d8:	f013 0f01 	tst.w	r3, #1
 80079dc:	d107      	bne.n	80079ee <SDMMC_GetCmdResp7+0x4a>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80079de:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80079e0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80079e4:	d00a      	beq.n	80079fc <SDMMC_GetCmdResp7+0x58>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80079e6:	2340      	movs	r3, #64	; 0x40
 80079e8:	6383      	str	r3, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80079ea:	2000      	movs	r0, #0
 80079ec:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80079ee:	2301      	movs	r3, #1
 80079f0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80079f2:	4618      	mov	r0, r3
 80079f4:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80079f6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80079fa:	4770      	bx	lr
  return SDMMC_ERROR_NONE;
 80079fc:	2000      	movs	r0, #0
  
}
 80079fe:	4770      	bx	lr
 8007a00:	20000048 	.word	0x20000048
 8007a04:	10624dd3 	.word	0x10624dd3

08007a08 <SDMMC_Init>:
{
 8007a08:	b084      	sub	sp, #16
 8007a0a:	b410      	push	{r4}
 8007a0c:	ac02      	add	r4, sp, #8
 8007a0e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 8007a12:	6843      	ldr	r3, [r0, #4]
 8007a14:	4a08      	ldr	r2, [pc, #32]	; (8007a38 <SDMMC_Init+0x30>)
 8007a16:	401a      	ands	r2, r3
 8007a18:	9903      	ldr	r1, [sp, #12]
 8007a1a:	9b02      	ldr	r3, [sp, #8]
 8007a1c:	430b      	orrs	r3, r1
 8007a1e:	9904      	ldr	r1, [sp, #16]
 8007a20:	430b      	orrs	r3, r1
 8007a22:	9905      	ldr	r1, [sp, #20]
 8007a24:	430b      	orrs	r3, r1
 8007a26:	9906      	ldr	r1, [sp, #24]
 8007a28:	430b      	orrs	r3, r1
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	6043      	str	r3, [r0, #4]
}
 8007a2e:	2000      	movs	r0, #0
 8007a30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a34:	b004      	add	sp, #16
 8007a36:	4770      	bx	lr
 8007a38:	fffc2c00 	.word	0xfffc2c00

08007a3c <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 8007a3c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8007a40:	4770      	bx	lr

08007a42 <SDMMC_PowerState_ON>:
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8007a42:	6803      	ldr	r3, [r0, #0]
 8007a44:	f043 0303 	orr.w	r3, r3, #3
 8007a48:	6003      	str	r3, [r0, #0]
}
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	4770      	bx	lr

08007a4e <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007a4e:	6800      	ldr	r0, [r0, #0]
}
 8007a50:	f000 0003 	and.w	r0, r0, #3
 8007a54:	4770      	bx	lr
	...

08007a58 <SDMMC_SendCommand>:
{
 8007a58:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 8007a5a:	680b      	ldr	r3, [r1, #0]
 8007a5c:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007a5e:	68c3      	ldr	r3, [r0, #12]
 8007a60:	4a07      	ldr	r2, [pc, #28]	; (8007a80 <SDMMC_SendCommand+0x28>)
 8007a62:	401a      	ands	r2, r3
 8007a64:	684b      	ldr	r3, [r1, #4]
 8007a66:	688c      	ldr	r4, [r1, #8]
 8007a68:	4323      	orrs	r3, r4
 8007a6a:	68cc      	ldr	r4, [r1, #12]
 8007a6c:	4323      	orrs	r3, r4
 8007a6e:	6909      	ldr	r1, [r1, #16]
 8007a70:	430b      	orrs	r3, r1
 8007a72:	4313      	orrs	r3, r2
 8007a74:	60c3      	str	r3, [r0, #12]
}
 8007a76:	2000      	movs	r0, #0
 8007a78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	fffee0c0 	.word	0xfffee0c0

08007a84 <SDMMC_GetCommandResponse>:
  return (uint8_t)(SDMMCx->RESPCMD);
 8007a84:	6900      	ldr	r0, [r0, #16]
}
 8007a86:	b2c0      	uxtb	r0, r0
 8007a88:	4770      	bx	lr

08007a8a <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007a8a:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8007a8c:	5840      	ldr	r0, [r0, r1]
}  
 8007a8e:	4770      	bx	lr

08007a90 <SDMMC_GetCmdResp1>:
{
 8007a90:	b538      	push	{r3, r4, r5, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007a92:	4b51      	ldr	r3, [pc, #324]	; (8007bd8 <SDMMC_GetCmdResp1+0x148>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4c51      	ldr	r4, [pc, #324]	; (8007bdc <SDMMC_GetCmdResp1+0x14c>)
 8007a98:	fba4 4303 	umull	r4, r3, r4, r3
 8007a9c:	0a5b      	lsrs	r3, r3, #9
 8007a9e:	fb02 f203 	mul.w	r2, r2, r3
    if (count-- == 0U)
 8007aa2:	1e53      	subs	r3, r2, #1
 8007aa4:	2a00      	cmp	r2, #0
 8007aa6:	d062      	beq.n	8007b6e <SDMMC_GetCmdResp1+0xde>
  }while(!__SDMMC_GET_FLAG(SDMMCx, flags));
 8007aa8:	6b44      	ldr	r4, [r0, #52]	; 0x34
    if (count-- == 0U)
 8007aaa:	461a      	mov	r2, r3
  }while(!__SDMMC_GET_FLAG(SDMMCx, flags));
 8007aac:	f014 0f45 	tst.w	r4, #69	; 0x45
 8007ab0:	d0f7      	beq.n	8007aa2 <SDMMC_GetCmdResp1+0x12>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007ab2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007ab4:	f013 0f04 	tst.w	r3, #4
 8007ab8:	d003      	beq.n	8007ac2 <SDMMC_GetCmdResp1+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007aba:	2304      	movs	r3, #4
 8007abc:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007abe:	4618      	mov	r0, r3
 8007ac0:	bd38      	pop	{r3, r4, r5, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007ac2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007ac4:	f013 0f01 	tst.w	r3, #1
 8007ac8:	d003      	beq.n	8007ad2 <SDMMC_GetCmdResp1+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007aca:	2301      	movs	r3, #1
 8007acc:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ace:	4618      	mov	r0, r3
 8007ad0:	bd38      	pop	{r3, r4, r5, pc}
 8007ad2:	460d      	mov	r5, r1
 8007ad4:	4604      	mov	r4, r0
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007ad6:	f7ff ffd5 	bl	8007a84 <SDMMC_GetCommandResponse>
 8007ada:	42a8      	cmp	r0, r5
 8007adc:	d001      	beq.n	8007ae2 <SDMMC_GetCmdResp1+0x52>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ade:	2001      	movs	r0, #1
 8007ae0:	bd38      	pop	{r3, r4, r5, pc}
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007ae2:	4b3f      	ldr	r3, [pc, #252]	; (8007be0 <SDMMC_GetCmdResp1+0x150>)
 8007ae4:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	4620      	mov	r0, r4
 8007aea:	f7ff ffce 	bl	8007a8a <SDMMC_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007aee:	4b3d      	ldr	r3, [pc, #244]	; (8007be4 <SDMMC_GetCmdResp1+0x154>)
 8007af0:	4003      	ands	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d03e      	beq.n	8007b74 <SDMMC_GetCmdResp1+0xe4>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007af6:	2800      	cmp	r0, #0
 8007af8:	db3e      	blt.n	8007b78 <SDMMC_GetCmdResp1+0xe8>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007afa:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007afe:	d001      	beq.n	8007b04 <SDMMC_GetCmdResp1+0x74>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007b00:	2040      	movs	r0, #64	; 0x40
 8007b02:	bd38      	pop	{r3, r4, r5, pc}
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007b04:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 8007b08:	d001      	beq.n	8007b0e <SDMMC_GetCmdResp1+0x7e>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007b0a:	2080      	movs	r0, #128	; 0x80
 8007b0c:	bd38      	pop	{r3, r4, r5, pc}
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007b0e:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 8007b12:	d134      	bne.n	8007b7e <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007b14:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 8007b18:	d134      	bne.n	8007b84 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007b1a:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8007b1e:	d134      	bne.n	8007b8a <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007b20:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8007b24:	d134      	bne.n	8007b90 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007b26:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8007b2a:	d134      	bne.n	8007b96 <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007b2c:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8007b30:	d134      	bne.n	8007b9c <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007b32:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8007b36:	d134      	bne.n	8007ba2 <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007b38:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8007b3c:	d134      	bne.n	8007ba8 <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007b3e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8007b42:	d134      	bne.n	8007bae <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007b44:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 8007b48:	d134      	bne.n	8007bb4 <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007b4a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 8007b4e:	d134      	bne.n	8007bba <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007b50:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8007b54:	d134      	bne.n	8007bc0 <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007b56:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8007b5a:	d134      	bne.n	8007bc6 <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007b5c:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8007b60:	d134      	bne.n	8007bcc <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007b62:	f010 0f08 	tst.w	r0, #8
 8007b66:	d034      	beq.n	8007bd2 <SDMMC_GetCmdResp1+0x142>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007b68:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8007b6c:	bd38      	pop	{r3, r4, r5, pc}
      return SDMMC_ERROR_TIMEOUT;
 8007b6e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8007b72:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_NONE;
 8007b74:	2000      	movs	r0, #0
 8007b76:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007b78:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8007b7c:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007b7e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007b82:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007b84:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007b88:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007b8a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007b8e:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007b90:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007b94:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007b96:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007b9a:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007b9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007ba0:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007ba2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007ba6:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_CC_ERR;
 8007ba8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007bac:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007bae:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8007bb2:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007bb4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8007bb8:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007bba:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007bbe:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007bc0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007bc4:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007bc6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8007bca:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_ERASE_RESET;
 8007bcc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8007bd0:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007bd2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
}
 8007bd6:	bd38      	pop	{r3, r4, r5, pc}
 8007bd8:	20000048 	.word	0x20000048
 8007bdc:	10624dd3 	.word	0x10624dd3
 8007be0:	002000c5 	.word	0x002000c5
 8007be4:	fdffe008 	.word	0xfdffe008

08007be8 <SDMMC_GetCmdResp6>:
{
 8007be8:	b570      	push	{r4, r5, r6, lr}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007bea:	4b25      	ldr	r3, [pc, #148]	; (8007c80 <SDMMC_GetCmdResp6+0x98>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4c25      	ldr	r4, [pc, #148]	; (8007c84 <SDMMC_GetCmdResp6+0x9c>)
 8007bf0:	fba4 4303 	umull	r4, r3, r4, r3
 8007bf4:	0a5c      	lsrs	r4, r3, #9
 8007bf6:	f241 3388 	movw	r3, #5000	; 0x1388
 8007bfa:	fb03 f304 	mul.w	r3, r3, r4
    if (count-- == 0U)
 8007bfe:	1e5c      	subs	r4, r3, #1
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d036      	beq.n	8007c72 <SDMMC_GetCmdResp6+0x8a>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007c04:	6b45      	ldr	r5, [r0, #52]	; 0x34
    if (count-- == 0U)
 8007c06:	4623      	mov	r3, r4
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007c08:	f015 0f45 	tst.w	r5, #69	; 0x45
 8007c0c:	d0f7      	beq.n	8007bfe <SDMMC_GetCmdResp6+0x16>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007c0e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007c10:	f013 0f04 	tst.w	r3, #4
 8007c14:	d003      	beq.n	8007c1e <SDMMC_GetCmdResp6+0x36>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007c16:	2304      	movs	r3, #4
 8007c18:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	bd70      	pop	{r4, r5, r6, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007c1e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007c20:	f013 0f01 	tst.w	r3, #1
 8007c24:	d003      	beq.n	8007c2e <SDMMC_GetCmdResp6+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007c26:	2301      	movs	r3, #1
 8007c28:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	bd70      	pop	{r4, r5, r6, pc}
 8007c2e:	4616      	mov	r6, r2
 8007c30:	460d      	mov	r5, r1
 8007c32:	4604      	mov	r4, r0
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007c34:	f7ff ff26 	bl	8007a84 <SDMMC_GetCommandResponse>
 8007c38:	42a8      	cmp	r0, r5
 8007c3a:	d001      	beq.n	8007c40 <SDMMC_GetCmdResp6+0x58>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c3c:	2001      	movs	r0, #1
 8007c3e:	bd70      	pop	{r4, r5, r6, pc}
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007c40:	4b11      	ldr	r3, [pc, #68]	; (8007c88 <SDMMC_GetCmdResp6+0xa0>)
 8007c42:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007c44:	2100      	movs	r1, #0
 8007c46:	4620      	mov	r0, r4
 8007c48:	f7ff ff1f 	bl	8007a8a <SDMMC_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007c4c:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 8007c50:	d005      	beq.n	8007c5e <SDMMC_GetCmdResp6+0x76>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007c52:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8007c56:	d006      	beq.n	8007c66 <SDMMC_GetCmdResp6+0x7e>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007c58:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007c5c:	bd70      	pop	{r4, r5, r6, pc}
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007c5e:	0c00      	lsrs	r0, r0, #16
 8007c60:	8030      	strh	r0, [r6, #0]
    return SDMMC_ERROR_NONE;
 8007c62:	2000      	movs	r0, #0
 8007c64:	bd70      	pop	{r4, r5, r6, pc}
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007c66:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8007c6a:	d005      	beq.n	8007c78 <SDMMC_GetCmdResp6+0x90>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007c6c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007c70:	bd70      	pop	{r4, r5, r6, pc}
      return SDMMC_ERROR_TIMEOUT;
 8007c72:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8007c76:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007c78:	f44f 3080 	mov.w	r0, #65536	; 0x10000
}
 8007c7c:	bd70      	pop	{r4, r5, r6, pc}
 8007c7e:	bf00      	nop
 8007c80:	20000048 	.word	0x20000048
 8007c84:	10624dd3 	.word	0x10624dd3
 8007c88:	002000c5 	.word	0x002000c5

08007c8c <SDMMC_ConfigData>:
{
 8007c8c:	b410      	push	{r4}
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007c8e:	680b      	ldr	r3, [r1, #0]
 8007c90:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 8007c92:	684b      	ldr	r3, [r1, #4]
 8007c94:	6283      	str	r3, [r0, #40]	; 0x28
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, Data->DataBlockSize |\
 8007c96:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8007c98:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007c9c:	688b      	ldr	r3, [r1, #8]
 8007c9e:	68cc      	ldr	r4, [r1, #12]
 8007ca0:	4323      	orrs	r3, r4
 8007ca2:	690c      	ldr	r4, [r1, #16]
 8007ca4:	4323      	orrs	r3, r4
 8007ca6:	6949      	ldr	r1, [r1, #20]
 8007ca8:	430b      	orrs	r3, r1
 8007caa:	4313      	orrs	r3, r2
 8007cac:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8007cae:	2000      	movs	r0, #0
 8007cb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cb4:	4770      	bx	lr

08007cb6 <SDMMC_CmdBlockLength>:
{
 8007cb6:	b530      	push	{r4, r5, lr}
 8007cb8:	b087      	sub	sp, #28
 8007cba:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007cbc:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007cbe:	2410      	movs	r4, #16
 8007cc0:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007cc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cc6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007cd0:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007cd2:	a901      	add	r1, sp, #4
 8007cd4:	f7ff fec0 	bl	8007a58 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cdc:	4621      	mov	r1, r4
 8007cde:	4628      	mov	r0, r5
 8007ce0:	f7ff fed6 	bl	8007a90 <SDMMC_GetCmdResp1>
}
 8007ce4:	b007      	add	sp, #28
 8007ce6:	bd30      	pop	{r4, r5, pc}

08007ce8 <SDMMC_CmdSelDesel>:
{
 8007ce8:	b530      	push	{r4, r5, lr}
 8007cea:	b087      	sub	sp, #28
 8007cec:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007cee:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007cf0:	2407      	movs	r4, #7
 8007cf2:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007cf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cf8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007cfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d02:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d04:	a901      	add	r1, sp, #4
 8007d06:	f7ff fea7 	bl	8007a58 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d0e:	4621      	mov	r1, r4
 8007d10:	4628      	mov	r0, r5
 8007d12:	f7ff febd 	bl	8007a90 <SDMMC_GetCmdResp1>
}
 8007d16:	b007      	add	sp, #28
 8007d18:	bd30      	pop	{r4, r5, pc}

08007d1a <SDMMC_CmdGoIdleState>:
{
 8007d1a:	b510      	push	{r4, lr}
 8007d1c:	b086      	sub	sp, #24
 8007d1e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 8007d20:	2300      	movs	r3, #0
 8007d22:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007d24:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8007d26:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d28:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d2e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d30:	a901      	add	r1, sp, #4
 8007d32:	f7ff fe91 	bl	8007a58 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007d36:	4620      	mov	r0, r4
 8007d38:	f7ff fdc2 	bl	80078c0 <SDMMC_GetCmdError>
}
 8007d3c:	b006      	add	sp, #24
 8007d3e:	bd10      	pop	{r4, pc}

08007d40 <SDMMC_CmdOperCond>:
{
 8007d40:	b510      	push	{r4, lr}
 8007d42:	b086      	sub	sp, #24
 8007d44:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007d46:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007d4a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007d4c:	2308      	movs	r3, #8
 8007d4e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007d50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d54:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d56:	2300      	movs	r3, #0
 8007d58:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d5e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d60:	a901      	add	r1, sp, #4
 8007d62:	f7ff fe79 	bl	8007a58 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007d66:	4620      	mov	r0, r4
 8007d68:	f7ff fe1c 	bl	80079a4 <SDMMC_GetCmdResp7>
}
 8007d6c:	b006      	add	sp, #24
 8007d6e:	bd10      	pop	{r4, pc}

08007d70 <SDMMC_CmdAppCommand>:
{
 8007d70:	b530      	push	{r4, r5, lr}
 8007d72:	b087      	sub	sp, #28
 8007d74:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007d76:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007d78:	2437      	movs	r4, #55	; 0x37
 8007d7a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007d7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d80:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d82:	2300      	movs	r3, #0
 8007d84:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d8a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d8c:	a901      	add	r1, sp, #4
 8007d8e:	f7ff fe63 	bl	8007a58 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8007d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d96:	4621      	mov	r1, r4
 8007d98:	4628      	mov	r0, r5
 8007d9a:	f7ff fe79 	bl	8007a90 <SDMMC_GetCmdResp1>
}
 8007d9e:	b007      	add	sp, #28
 8007da0:	bd30      	pop	{r4, r5, pc}

08007da2 <SDMMC_CmdAppOperCommand>:
{
 8007da2:	b510      	push	{r4, lr}
 8007da4:	b086      	sub	sp, #24
 8007da6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007da8:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007daa:	2329      	movs	r3, #41	; 0x29
 8007dac:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007dae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007db2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007db4:	2300      	movs	r3, #0
 8007db6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007db8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007dbc:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007dbe:	a901      	add	r1, sp, #4
 8007dc0:	f7ff fe4a 	bl	8007a58 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	f7ff fdc7 	bl	8007958 <SDMMC_GetCmdResp3>
}
 8007dca:	b006      	add	sp, #24
 8007dcc:	bd10      	pop	{r4, pc}

08007dce <SDMMC_CmdBusWidth>:
{
 8007dce:	b530      	push	{r4, r5, lr}
 8007dd0:	b087      	sub	sp, #28
 8007dd2:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007dd4:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007dd6:	2406      	movs	r4, #6
 8007dd8:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007dda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007dde:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007de0:	2300      	movs	r3, #0
 8007de2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007de4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007de8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007dea:	a901      	add	r1, sp, #4
 8007dec:	f7ff fe34 	bl	8007a58 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007df4:	4621      	mov	r1, r4
 8007df6:	4628      	mov	r0, r5
 8007df8:	f7ff fe4a 	bl	8007a90 <SDMMC_GetCmdResp1>
}
 8007dfc:	b007      	add	sp, #28
 8007dfe:	bd30      	pop	{r4, r5, pc}

08007e00 <SDMMC_CmdSendSCR>:
{
 8007e00:	b530      	push	{r4, r5, lr}
 8007e02:	b087      	sub	sp, #28
 8007e04:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0;
 8007e06:	2300      	movs	r3, #0
 8007e08:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007e0a:	2433      	movs	r4, #51	; 0x33
 8007e0c:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007e0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e12:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e14:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e1a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e1c:	a901      	add	r1, sp, #4
 8007e1e:	f7ff fe1b 	bl	8007a58 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8007e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e26:	4621      	mov	r1, r4
 8007e28:	4628      	mov	r0, r5
 8007e2a:	f7ff fe31 	bl	8007a90 <SDMMC_GetCmdResp1>
}
 8007e2e:	b007      	add	sp, #28
 8007e30:	bd30      	pop	{r4, r5, pc}

08007e32 <SDMMC_CmdSendCID>:
{
 8007e32:	b510      	push	{r4, lr}
 8007e34:	b086      	sub	sp, #24
 8007e36:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007e3c:	2202      	movs	r2, #2
 8007e3e:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007e40:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007e44:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e46:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e4c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e4e:	a901      	add	r1, sp, #4
 8007e50:	f7ff fe02 	bl	8007a58 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007e54:	4620      	mov	r0, r4
 8007e56:	f7ff fd51 	bl	80078fc <SDMMC_GetCmdResp2>
}
 8007e5a:	b006      	add	sp, #24
 8007e5c:	bd10      	pop	{r4, pc}

08007e5e <SDMMC_CmdSendCSD>:
{
 8007e5e:	b510      	push	{r4, lr}
 8007e60:	b086      	sub	sp, #24
 8007e62:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007e64:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007e66:	2309      	movs	r3, #9
 8007e68:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007e6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007e6e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e70:	2300      	movs	r3, #0
 8007e72:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e78:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e7a:	a901      	add	r1, sp, #4
 8007e7c:	f7ff fdec 	bl	8007a58 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007e80:	4620      	mov	r0, r4
 8007e82:	f7ff fd3b 	bl	80078fc <SDMMC_GetCmdResp2>
}
 8007e86:	b006      	add	sp, #24
 8007e88:	bd10      	pop	{r4, pc}

08007e8a <SDMMC_CmdSetRelAdd>:
{
 8007e8a:	b570      	push	{r4, r5, r6, lr}
 8007e8c:	b086      	sub	sp, #24
 8007e8e:	4605      	mov	r5, r0
 8007e90:	460e      	mov	r6, r1
  sdmmc_cmdinit.Argument         = 0;
 8007e92:	2300      	movs	r3, #0
 8007e94:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007e96:	2403      	movs	r4, #3
 8007e98:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007e9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e9e:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ea0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ea2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ea6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ea8:	a901      	add	r1, sp, #4
 8007eaa:	f7ff fdd5 	bl	8007a58 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007eae:	4632      	mov	r2, r6
 8007eb0:	4621      	mov	r1, r4
 8007eb2:	4628      	mov	r0, r5
 8007eb4:	f7ff fe98 	bl	8007be8 <SDMMC_GetCmdResp6>
}
 8007eb8:	b006      	add	sp, #24
 8007eba:	bd70      	pop	{r4, r5, r6, pc}

08007ebc <SDMMC_CmdSwitch>:
{
 8007ebc:	b530      	push	{r4, r5, lr}
 8007ebe:	b087      	sub	sp, #28
 8007ec0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007ec2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 8007ec4:	2406      	movs	r4, #6
 8007ec6:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007ec8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ecc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ed6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ed8:	a901      	add	r1, sp, #4
 8007eda:	f7ff fdbd 	bl	8007a58 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 8007ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ee2:	4621      	mov	r1, r4
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	f7ff fdd3 	bl	8007a90 <SDMMC_GetCmdResp1>
}
 8007eea:	b007      	add	sp, #28
 8007eec:	bd30      	pop	{r4, r5, pc}

08007eee <SDMMC_CmdVoltageSwitch>:
{
 8007eee:	b530      	push	{r4, r5, lr}
 8007ef0:	b087      	sub	sp, #28
 8007ef2:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0x00000000;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8007ef8:	240b      	movs	r4, #11
 8007efa:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007efc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f00:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f02:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f08:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f0a:	a901      	add	r1, sp, #4
 8007f0c:	f7ff fda4 	bl	8007a58 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8007f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f14:	4621      	mov	r1, r4
 8007f16:	4628      	mov	r0, r5
 8007f18:	f7ff fdba 	bl	8007a90 <SDMMC_GetCmdResp1>
}
 8007f1c:	b007      	add	sp, #28
 8007f1e:	bd30      	pop	{r4, r5, pc}

08007f20 <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 8007f20:	b410      	push	{r4}
 8007f22:	b085      	sub	sp, #20
	VL53L1_Error Status = VL53L1_ERROR_NONE;

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 8007f24:	4c1f      	ldr	r4, [pc, #124]	; (8007fa4 <ComputeDevicePresetMode+0x84>)
 8007f26:	6823      	ldr	r3, [r4, #0]
 8007f28:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007f2c:	0c1b      	lsrs	r3, r3, #16
 8007f2e:	f88d 300e 	strb.w	r3, [sp, #14]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 8007f32:	6863      	ldr	r3, [r4, #4]
 8007f34:	f8ad 3008 	strh.w	r3, [sp, #8]
 8007f38:	0c1b      	lsrs	r3, r3, #16
 8007f3a:	f88d 300a 	strb.w	r3, [sp, #10]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8007f3e:	68a3      	ldr	r3, [r4, #8]
 8007f40:	f8ad 3004 	strh.w	r3, [sp, #4]
 8007f44:	0c1b      	lsrs	r3, r3, #16
 8007f46:	f88d 3006 	strb.w	r3, [sp, #6]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	7013      	strb	r3, [r2, #0]

	switch (DistanceMode) {
 8007f4e:	4299      	cmp	r1, r3
 8007f50:	d003      	beq.n	8007f5a <ComputeDevicePresetMode+0x3a>
 8007f52:	2902      	cmp	r1, #2
 8007f54:	d00b      	beq.n	8007f6e <ComputeDevicePresetMode+0x4e>
		break;
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
		break;
	default:
		DistIdx = 2;
 8007f56:	2302      	movs	r3, #2
 8007f58:	e000      	b.n	8007f5c <ComputeDevicePresetMode+0x3c>
		DistIdx = 0;
 8007f5a:	2300      	movs	r3, #0
	}

	switch (PresetMode) {
 8007f5c:	2804      	cmp	r0, #4
 8007f5e:	d008      	beq.n	8007f72 <ComputeDevicePresetMode+0x52>
 8007f60:	2808      	cmp	r0, #8
 8007f62:	d017      	beq.n	8007f94 <ComputeDevicePresetMode+0x74>
 8007f64:	2803      	cmp	r0, #3
 8007f66:	d00e      	beq.n	8007f86 <ComputeDevicePresetMode+0x66>
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
		break;

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8007f68:	f06f 0007 	mvn.w	r0, #7
 8007f6c:	e007      	b.n	8007f7e <ComputeDevicePresetMode+0x5e>
		DistIdx = 1;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e7f4      	b.n	8007f5c <ComputeDevicePresetMode+0x3c>
		*pDevicePresetMode = LightModes[DistIdx];
 8007f72:	a904      	add	r1, sp, #16
 8007f74:	440b      	add	r3, r1
 8007f76:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8007f7a:	7013      	strb	r3, [r2, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8007f7c:	2000      	movs	r0, #0
	}

	return Status;
}
 8007f7e:	b005      	add	sp, #20
 8007f80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f84:	4770      	bx	lr
		*pDevicePresetMode = TimedModes[DistIdx];
 8007f86:	a904      	add	r1, sp, #16
 8007f88:	440b      	add	r3, r1
 8007f8a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8007f8e:	7013      	strb	r3, [r2, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8007f90:	2000      	movs	r0, #0
		break;
 8007f92:	e7f4      	b.n	8007f7e <ComputeDevicePresetMode+0x5e>
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8007f94:	a904      	add	r1, sp, #16
 8007f96:	440b      	add	r3, r1
 8007f98:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8007f9c:	7013      	strb	r3, [r2, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8007f9e:	2000      	movs	r0, #0
		break;
 8007fa0:	e7ed      	b.n	8007f7e <ComputeDevicePresetMode+0x5e>
 8007fa2:	bf00      	nop
 8007fa4:	08012c18 	.word	0x08012c18

08007fa8 <ComputeRQL>:
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 8007fa8:	b350      	cbz	r0, 8008000 <ComputeRQL+0x58>
		returnvalue = 0;
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 8007faa:	2907      	cmp	r1, #7
 8007fac:	d029      	beq.n	8008002 <ComputeRQL+0x5a>
		returnvalue = 50;
	else {
		if (presults_data->median_range_mm < SRL)
 8007fae:	f9b2 103c 	ldrsh.w	r1, [r2, #60]	; 0x3c
 8007fb2:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
 8007fb6:	db04      	blt.n	8007fc2 <ComputeRQL+0x1a>
			RAS = SRAS * 65536;
		else
			RAS = LRAP * presults_data->median_range_mm;
 8007fb8:	f641 139a 	movw	r3, #6554	; 0x199a
 8007fbc:	fb03 f101 	mul.w	r1, r3, r1
 8007fc0:	e001      	b.n	8007fc6 <ComputeRQL+0x1e>
			RAS = SRAS * 65536;
 8007fc2:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 8007fc6:	b161      	cbz	r1, 8007fe2 <ComputeRQL+0x3a>
			partial = (GGm * presults_data->sigma_mm);
 8007fc8:	8f13      	ldrh	r3, [r2, #56]	; 0x38
			partial = partial + (RAS >> 1);
 8007fca:	084a      	lsrs	r2, r1, #1
 8007fcc:	480e      	ldr	r0, [pc, #56]	; (8008008 <ComputeRQL+0x60>)
 8007fce:	fb00 2303 	mla	r3, r0, r3, r2
			partial = partial / RAS;
 8007fd2:	fbb3 f3f1 	udiv	r3, r3, r1
			partial = partial * 65536;
 8007fd6:	041b      	lsls	r3, r3, #16
			if (partial <= GI)
 8007fd8:	4a0c      	ldr	r2, [pc, #48]	; (800800c <ComputeRQL+0x64>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d809      	bhi.n	8007ff2 <ComputeRQL+0x4a>
				SRQL = GI - partial;
 8007fde:	1ad0      	subs	r0, r2, r3
 8007fe0:	e001      	b.n	8007fe6 <ComputeRQL+0x3e>
			else
				SRQL = 50 * 65536;
		} else
			SRQL = 100 * 65536;
 8007fe2:	f44f 00c8 	mov.w	r0, #6553600	; 0x640000

		finalvalue = (uint8_t)(SRQL >> 16);
 8007fe6:	f3c0 4007 	ubfx	r0, r0, #16, #8
		returnvalue = MAX(50, MIN(100, finalvalue));
 8007fea:	2832      	cmp	r0, #50	; 0x32
 8007fec:	d804      	bhi.n	8007ff8 <ComputeRQL+0x50>
 8007fee:	2032      	movs	r0, #50	; 0x32
	}

	return returnvalue;
}
 8007ff0:	4770      	bx	lr
				SRQL = 50 * 65536;
 8007ff2:	f44f 1048 	mov.w	r0, #3276800	; 0x320000
 8007ff6:	e7f6      	b.n	8007fe6 <ComputeRQL+0x3e>
		returnvalue = MAX(50, MIN(100, finalvalue));
 8007ff8:	2864      	cmp	r0, #100	; 0x64
 8007ffa:	bf28      	it	cs
 8007ffc:	2064      	movcs	r0, #100	; 0x64
 8007ffe:	4770      	bx	lr
 8008000:	4770      	bx	lr
		returnvalue = 50;
 8008002:	2032      	movs	r0, #50	; 0x32
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop
 8008008:	0030cccd 	.word	0x0030cccd
 800800c:	0075b333 	.word	0x0075b333

08008010 <ConvertStatusLite>:

static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8008010:	1f03      	subs	r3, r0, #4
 8008012:	2b0f      	cmp	r3, #15
 8008014:	d817      	bhi.n	8008046 <ConvertStatusLite+0x36>
 8008016:	e8df f003 	tbb	[pc, r3]
 800801a:	0a0c      	.short	0x0a0c
 800801c:	1412190e 	.word	0x1412190e
 8008020:	16101616 	.word	0x16101616
 8008024:	16161616 	.word	0x16161616
 8008028:	1808      	.short	0x1808
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 800802a:	200a      	movs	r0, #10
 800802c:	4770      	bx	lr
		break;
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
		break;
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 800802e:	2004      	movs	r0, #4
		break;
 8008030:	4770      	bx	lr
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 8008032:	2002      	movs	r0, #2
		break;
 8008034:	4770      	bx	lr
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8008036:	2001      	movs	r0, #1
		break;
 8008038:	4770      	bx	lr
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
		break;
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 800803a:	2009      	movs	r0, #9
		break;
 800803c:	4770      	bx	lr
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 800803e:	2003      	movs	r0, #3
		break;
 8008040:	4770      	bx	lr
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8008042:	2000      	movs	r0, #0
		break;
 8008044:	4770      	bx	lr
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8008046:	20ff      	movs	r0, #255	; 0xff
 8008048:	4770      	bx	lr
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 800804a:	2006      	movs	r0, #6
	}

	return RangeStatus;
}
 800804c:	4770      	bx	lr

0800804e <SetPresetMode>:
{
 800804e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008050:	b089      	sub	sp, #36	; 0x24
 8008052:	4605      	mov	r5, r0
 8008054:	460c      	mov	r4, r1
 8008056:	4611      	mov	r1, r2
 8008058:	461f      	mov	r7, r3
	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800805a:	2c03      	cmp	r4, #3
 800805c:	d014      	beq.n	8008088 <SetPresetMode+0x3a>
 800805e:	2c08      	cmp	r4, #8
 8008060:	d010      	beq.n	8008084 <SetPresetMode+0x36>
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8008062:	2620      	movs	r6, #32
	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 8008064:	f10d 021f 	add.w	r2, sp, #31
 8008068:	4620      	mov	r0, r4
 800806a:	f7ff ff59 	bl	8007f20 <ComputeDevicePresetMode>
	if (Status == VL53L1_ERROR_NONE)
 800806e:	4603      	mov	r3, r0
 8008070:	b160      	cbz	r0, 800808c <SetPresetMode+0x3e>
	if (Status == VL53L1_ERROR_NONE)
 8008072:	b1c3      	cbz	r3, 80080a6 <SetPresetMode+0x58>
	if (Status == VL53L1_ERROR_NONE)
 8008074:	b903      	cbnz	r3, 8008078 <SetPresetMode+0x2a>
		VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8008076:	70ae      	strb	r6, [r5, #2]
	if (Status == VL53L1_ERROR_NONE)
 8008078:	b90b      	cbnz	r3, 800807e <SetPresetMode+0x30>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 800807a:	f885 437c 	strb.w	r4, [r5, #892]	; 0x37c
}
 800807e:	4618      	mov	r0, r3
 8008080:	b009      	add	sp, #36	; 0x24
 8008082:	bdf0      	pop	{r4, r5, r6, r7, pc}
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8008084:	2640      	movs	r6, #64	; 0x40
 8008086:	e7ed      	b.n	8008064 <SetPresetMode+0x16>
 8008088:	2640      	movs	r6, #64	; 0x40
 800808a:	e7eb      	b.n	8008064 <SetPresetMode+0x16>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 800808c:	f89d 101f 	ldrb.w	r1, [sp, #31]
 8008090:	ab04      	add	r3, sp, #16
 8008092:	9301      	str	r3, [sp, #4]
 8008094:	ab05      	add	r3, sp, #20
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	ab06      	add	r3, sp, #24
 800809a:	aa07      	add	r2, sp, #28
 800809c:	4628      	mov	r0, r5
 800809e:	f000 fcac 	bl	80089fa <VL53L1_get_preset_mode_timing_cfg>
 80080a2:	4603      	mov	r3, r0
 80080a4:	e7e5      	b.n	8008072 <SetPresetMode+0x24>
		Status = VL53L1_set_preset_mode(
 80080a6:	f89d 101f 	ldrb.w	r1, [sp, #31]
 80080aa:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80080ae:	9702      	str	r7, [sp, #8]
 80080b0:	9b04      	ldr	r3, [sp, #16]
 80080b2:	9301      	str	r3, [sp, #4]
 80080b4:	9b05      	ldr	r3, [sp, #20]
 80080b6:	9300      	str	r3, [sp, #0]
 80080b8:	9b06      	ldr	r3, [sp, #24]
 80080ba:	4628      	mov	r0, r5
 80080bc:	f000 fced 	bl	8008a9a <VL53L1_set_preset_mode>
 80080c0:	4603      	mov	r3, r0
 80080c2:	e7d7      	b.n	8008074 <SetPresetMode+0x26>

080080c4 <SetLimitValue>:
{
 80080c4:	b508      	push	{r3, lr}
	switch (LimitCheckId) {
 80080c6:	b121      	cbz	r1, 80080d2 <SetLimitValue+0xe>
 80080c8:	2901      	cmp	r1, #1
 80080ca:	d008      	beq.n	80080de <SetLimitValue+0x1a>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80080cc:	f06f 0003 	mvn.w	r0, #3
}
 80080d0:	bd08      	pop	{r3, pc}
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 80080d2:	f3c2 318f 	ubfx	r1, r2, #14, #16
 80080d6:	f000 fdcf 	bl	8008c78 <VL53L1_set_lite_sigma_threshold>
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80080da:	2000      	movs	r0, #0
		break;
 80080dc:	bd08      	pop	{r3, pc}
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 80080de:	f3c2 214f 	ubfx	r1, r2, #9, #16
 80080e2:	f000 fdd2 	bl	8008c8a <VL53L1_set_lite_min_count_rate>
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80080e6:	2000      	movs	r0, #0
		break;
 80080e8:	bd08      	pop	{r3, pc}

080080ea <VL53L1_WaitDeviceBooted>:
{
 80080ea:	b508      	push	{r3, lr}
	Status = VL53L1_poll_for_boot_completion(Dev,
 80080ec:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80080f0:	f002 fc68 	bl	800a9c4 <VL53L1_poll_for_boot_completion>
}
 80080f4:	bd08      	pop	{r3, pc}

080080f6 <VL53L1_SetDistanceMode>:
{
 80080f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080fa:	b084      	sub	sp, #16
	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 80080fc:	f890 637c 	ldrb.w	r6, [r0, #892]	; 0x37c
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8008100:	1e4b      	subs	r3, r1, #1
 8008102:	b2db      	uxtb	r3, r3
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 8008104:	2b02      	cmp	r3, #2
 8008106:	d83d      	bhi.n	8008184 <VL53L1_SetDistanceMode+0x8e>
		if ((DistanceMode == VL53L1_DISTANCEMODE_SHORT) ||
 8008108:	2b01      	cmp	r3, #1
 800810a:	d917      	bls.n	800813c <VL53L1_SetDistanceMode+0x46>
			InternalDistanceMode = VL53L1_DISTANCEMODE_LONG;
 800810c:	2703      	movs	r7, #3
 800810e:	460d      	mov	r5, r1
 8008110:	4604      	mov	r4, r0
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 8008112:	4669      	mov	r1, sp
 8008114:	f000 fbf7 	bl	8008906 <VL53L1_get_user_zone>
	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 8008118:	f8d4 8014 	ldr.w	r8, [r4, #20]
	if (Status == VL53L1_ERROR_NONE)
 800811c:	4603      	mov	r3, r0
 800811e:	b178      	cbz	r0, 8008140 <VL53L1_SetDistanceMode+0x4a>
	if (Status == VL53L1_ERROR_NONE)
 8008120:	b1b3      	cbz	r3, 8008150 <VL53L1_SetDistanceMode+0x5a>
	if (Status == VL53L1_ERROR_NONE) {
 8008122:	b92b      	cbnz	r3, 8008130 <VL53L1_SetDistanceMode+0x3a>
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8008124:	f884 737e 	strb.w	r7, [r4, #894]	; 0x37e
		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 8008128:	f884 737f 	strb.w	r7, [r4, #895]	; 0x37f
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 800812c:	f884 537d 	strb.w	r5, [r4, #893]	; 0x37d
	if (Status == VL53L1_ERROR_NONE) {
 8008130:	b1b3      	cbz	r3, 8008160 <VL53L1_SetDistanceMode+0x6a>
	if (Status == VL53L1_ERROR_NONE)
 8008132:	b30b      	cbz	r3, 8008178 <VL53L1_SetDistanceMode+0x82>
}
 8008134:	4618      	mov	r0, r3
 8008136:	b004      	add	sp, #16
 8008138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			InternalDistanceMode = DistanceMode;
 800813c:	460f      	mov	r7, r1
 800813e:	e7e6      	b.n	800810e <VL53L1_SetDistanceMode+0x18>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8008140:	ab03      	add	r3, sp, #12
 8008142:	aa02      	add	r2, sp, #8
 8008144:	a901      	add	r1, sp, #4
 8008146:	4620      	mov	r0, r4
 8008148:	f000 fb78 	bl	800883c <VL53L1_get_timeouts_us>
 800814c:	4603      	mov	r3, r0
 800814e:	e7e7      	b.n	8008120 <VL53L1_SetDistanceMode+0x2a>
		Status = SetPresetMode(Dev,
 8008150:	4643      	mov	r3, r8
 8008152:	463a      	mov	r2, r7
 8008154:	4631      	mov	r1, r6
 8008156:	4620      	mov	r0, r4
 8008158:	f7ff ff79 	bl	800804e <SetPresetMode>
 800815c:	4603      	mov	r3, r0
 800815e:	e7e0      	b.n	8008122 <VL53L1_SetDistanceMode+0x2c>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8008160:	9b03      	ldr	r3, [sp, #12]
 8008162:	9a02      	ldr	r2, [sp, #8]
 8008164:	9901      	ldr	r1, [sp, #4]
 8008166:	4620      	mov	r0, r4
 8008168:	f000 fb49 	bl	80087fe <VL53L1_set_timeouts_us>
		if (Status == VL53L1_ERROR_NONE)
 800816c:	4603      	mov	r3, r0
 800816e:	2800      	cmp	r0, #0
 8008170:	d1df      	bne.n	8008132 <VL53L1_SetDistanceMode+0x3c>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8008172:	9a03      	ldr	r2, [sp, #12]
 8008174:	6122      	str	r2, [r4, #16]
 8008176:	e7dc      	b.n	8008132 <VL53L1_SetDistanceMode+0x3c>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 8008178:	4669      	mov	r1, sp
 800817a:	4620      	mov	r0, r4
 800817c:	f000 fbb2 	bl	80088e4 <VL53L1_set_user_zone>
 8008180:	4603      	mov	r3, r0
 8008182:	e7d7      	b.n	8008134 <VL53L1_SetDistanceMode+0x3e>
		return VL53L1_ERROR_INVALID_PARAMS;
 8008184:	f06f 0303 	mvn.w	r3, #3
 8008188:	e7d4      	b.n	8008134 <VL53L1_SetDistanceMode+0x3e>
	...

0800818c <VL53L1_SetInterMeasurementPeriodMilliSeconds>:
{
 800818c:	b508      	push	{r3, lr}
	adjustedIMP += (adjustedIMP * 64) / 1000;
 800818e:	018b      	lsls	r3, r1, #6
 8008190:	4a03      	ldr	r2, [pc, #12]	; (80081a0 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x14>)
 8008192:	fba2 2303 	umull	r2, r3, r2, r3
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8008196:	eb01 1193 	add.w	r1, r1, r3, lsr #6
 800819a:	f000 fb12 	bl	80087c2 <VL53L1_set_inter_measurement_period_ms>
}
 800819e:	bd08      	pop	{r3, pc}
 80081a0:	10624dd3 	.word	0x10624dd3

080081a4 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:
{
 80081a4:	b510      	push	{r4, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	460c      	mov	r4, r1
	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 80081aa:	a901      	add	r1, sp, #4
 80081ac:	f000 fb18 	bl	80087e0 <VL53L1_get_inter_measurement_period_ms>
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 80081b0:	9b01      	ldr	r3, [sp, #4]
 80081b2:	019a      	lsls	r2, r3, #6
 80081b4:	4903      	ldr	r1, [pc, #12]	; (80081c4 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x20>)
 80081b6:	fba1 1202 	umull	r1, r2, r1, r2
 80081ba:	eba3 1392 	sub.w	r3, r3, r2, lsr #6
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 80081be:	6023      	str	r3, [r4, #0]
}
 80081c0:	b002      	add	sp, #8
 80081c2:	bd10      	pop	{r4, pc}
 80081c4:	10624dd3 	.word	0x10624dd3

080081c8 <VL53L1_SetLimitCheckEnable>:
{
 80081c8:	b570      	push	{r4, r5, r6, lr}
 80081ca:	4604      	mov	r4, r0
 80081cc:	460d      	mov	r5, r1
 80081ce:	4616      	mov	r6, r2
	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 80081d0:	2901      	cmp	r1, #1
 80081d2:	d813      	bhi.n	80081fc <VL53L1_SetLimitCheckEnable+0x34>
		if (LimitCheckEnable == 0)
 80081d4:	b182      	cbz	r2, 80081f8 <VL53L1_SetLimitCheckEnable+0x30>
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80081d6:	f101 03e0 	add.w	r3, r1, #224	; 0xe0
 80081da:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80081de:	689a      	ldr	r2, [r3, #8]
		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 80081e0:	4629      	mov	r1, r5
 80081e2:	4620      	mov	r0, r4
 80081e4:	f7ff ff6e 	bl	80080c4 <SetLimitValue>
	if (Status == VL53L1_ERROR_NONE)
 80081e8:	b928      	cbnz	r0, 80081f6 <VL53L1_SetLimitCheckEnable+0x2e>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80081ea:	3600      	adds	r6, #0
 80081ec:	bf18      	it	ne
 80081ee:	2601      	movne	r6, #1
 80081f0:	442c      	add	r4, r5
 80081f2:	f884 6384 	strb.w	r6, [r4, #900]	; 0x384
}
 80081f6:	bd70      	pop	{r4, r5, r6, pc}
			TempFix1616 = 0;
 80081f8:	2200      	movs	r2, #0
 80081fa:	e7f1      	b.n	80081e0 <VL53L1_SetLimitCheckEnable+0x18>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80081fc:	f06f 0003 	mvn.w	r0, #3
 8008200:	e7f2      	b.n	80081e8 <VL53L1_SetLimitCheckEnable+0x20>

08008202 <VL53L1_GetLimitCheckEnable>:
	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8008202:	2901      	cmp	r1, #1
 8008204:	d805      	bhi.n	8008212 <VL53L1_GetLimitCheckEnable+0x10>
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008206:	4408      	add	r0, r1
 8008208:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
		*pLimitCheckEnable = Temp8;
 800820c:	7013      	strb	r3, [r2, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800820e:	2000      	movs	r0, #0
}
 8008210:	4770      	bx	lr
		*pLimitCheckEnable = 0;
 8008212:	2300      	movs	r3, #0
 8008214:	7013      	strb	r3, [r2, #0]
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8008216:	f06f 0003 	mvn.w	r0, #3
 800821a:	4770      	bx	lr

0800821c <VL53L1_SetLimitCheckValue>:
	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800821c:	2901      	cmp	r1, #1
 800821e:	d818      	bhi.n	8008252 <VL53L1_SetLimitCheckValue+0x36>
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008220:	1843      	adds	r3, r0, r1
 8008222:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
		if (LimitChecksEnable == 0) {
 8008226:	b92b      	cbnz	r3, 8008234 <VL53L1_SetLimitCheckValue+0x18>
			VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008228:	31e0      	adds	r1, #224	; 0xe0
 800822a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800822e:	608a      	str	r2, [r1, #8]
}
 8008230:	4618      	mov	r0, r3
 8008232:	4770      	bx	lr
{
 8008234:	b570      	push	{r4, r5, r6, lr}
 8008236:	4616      	mov	r6, r2
 8008238:	460c      	mov	r4, r1
 800823a:	4605      	mov	r5, r0
			Status = SetLimitValue(Dev, LimitCheckId,
 800823c:	f7ff ff42 	bl	80080c4 <SetLimitValue>
			if (Status == VL53L1_ERROR_NONE) {
 8008240:	4603      	mov	r3, r0
 8008242:	b920      	cbnz	r0, 800824e <VL53L1_SetLimitCheckValue+0x32>
				VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008244:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
 8008248:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800824c:	608e      	str	r6, [r1, #8]
}
 800824e:	4618      	mov	r0, r3
 8008250:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8008252:	f06f 0303 	mvn.w	r3, #3
 8008256:	e7eb      	b.n	8008230 <VL53L1_SetLimitCheckValue+0x14>

08008258 <VL53L1_DataInit>:
{
 8008258:	b570      	push	{r4, r5, r6, lr}
 800825a:	4606      	mov	r6, r0
		Status = VL53L1_data_init(Dev, 1);
 800825c:	2101      	movs	r1, #1
 800825e:	f000 fd23 	bl	8008ca8 <VL53L1_data_init>
	if (Status == VL53L1_ERROR_NONE) {
 8008262:	4604      	mov	r4, r0
 8008264:	b928      	cbnz	r0, 8008272 <VL53L1_DataInit+0x1a>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8008266:	2301      	movs	r3, #1
 8008268:	f886 3378 	strb.w	r3, [r6, #888]	; 0x378
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 800826c:	2308      	movs	r3, #8
 800826e:	f886 337c 	strb.w	r3, [r6, #892]	; 0x37c
{
 8008272:	2500      	movs	r5, #0
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008274:	2d01      	cmp	r5, #1
 8008276:	d80a      	bhi.n	800828e <VL53L1_DataInit+0x36>
		if (Status == VL53L1_ERROR_NONE)
 8008278:	b94c      	cbnz	r4, 800828e <VL53L1_DataInit+0x36>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 800827a:	2201      	movs	r2, #1
 800827c:	4629      	mov	r1, r5
 800827e:	4630      	mov	r0, r6
 8008280:	f7ff ffa2 	bl	80081c8 <VL53L1_SetLimitCheckEnable>
 8008284:	4304      	orrs	r4, r0
 8008286:	b264      	sxtb	r4, r4
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008288:	3501      	adds	r5, #1
 800828a:	b2ed      	uxtb	r5, r5
 800828c:	e7f2      	b.n	8008274 <VL53L1_DataInit+0x1c>
	if (Status == VL53L1_ERROR_NONE) {
 800828e:	b114      	cbz	r4, 8008296 <VL53L1_DataInit+0x3e>
	if (Status == VL53L1_ERROR_NONE) {
 8008290:	b14c      	cbz	r4, 80082a6 <VL53L1_DataInit+0x4e>
}
 8008292:	4620      	mov	r0, r4
 8008294:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L1_SetLimitCheckValue(Dev,
 8008296:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800829a:	2100      	movs	r1, #0
 800829c:	4630      	mov	r0, r6
 800829e:	f7ff ffbd 	bl	800821c <VL53L1_SetLimitCheckValue>
 80082a2:	4604      	mov	r4, r0
 80082a4:	e7f4      	b.n	8008290 <VL53L1_DataInit+0x38>
		Status = VL53L1_SetLimitCheckValue(Dev,
 80082a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80082aa:	2101      	movs	r1, #1
 80082ac:	4630      	mov	r0, r6
 80082ae:	f7ff ffb5 	bl	800821c <VL53L1_SetLimitCheckValue>
 80082b2:	4604      	mov	r4, r0
 80082b4:	e7ed      	b.n	8008292 <VL53L1_DataInit+0x3a>

080082b6 <VL53L1_GetLimitCheckValue>:
{
 80082b6:	b570      	push	{r4, r5, r6, lr}
 80082b8:	b082      	sub	sp, #8
 80082ba:	4604      	mov	r4, r0
 80082bc:	4616      	mov	r6, r2
	switch (LimitCheckId) {
 80082be:	460d      	mov	r5, r1
 80082c0:	b121      	cbz	r1, 80082cc <VL53L1_GetLimitCheckValue+0x16>
 80082c2:	2901      	cmp	r1, #1
 80082c4:	d016      	beq.n	80082f4 <VL53L1_GetLimitCheckValue+0x3e>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80082c6:	f06f 0003 	mvn.w	r0, #3
 80082ca:	e005      	b.n	80082d8 <VL53L1_GetLimitCheckValue+0x22>
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 80082cc:	a901      	add	r1, sp, #4
 80082ce:	f000 fcce 	bl	8008c6e <VL53L1_get_lite_sigma_threshold>
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 80082d2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80082d6:	039b      	lsls	r3, r3, #14
	if (Status == VL53L1_ERROR_NONE) {
 80082d8:	b950      	cbnz	r0, 80082f0 <VL53L1_GetLimitCheckValue+0x3a>
		if (TempFix1616 == 0) {
 80082da:	b19b      	cbz	r3, 8008304 <VL53L1_GetLimitCheckValue+0x4e>
			*pLimitCheckValue = TempFix1616;
 80082dc:	6033      	str	r3, [r6, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80082de:	f105 02e0 	add.w	r2, r5, #224	; 0xe0
 80082e2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80082e6:	6093      	str	r3, [r2, #8]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80082e8:	442c      	add	r4, r5
 80082ea:	2301      	movs	r3, #1
 80082ec:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
}
 80082f0:	b002      	add	sp, #8
 80082f2:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 80082f4:	f10d 0106 	add.w	r1, sp, #6
 80082f8:	f000 fcc2 	bl	8008c80 <VL53L1_get_lite_min_count_rate>
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 80082fc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008300:	025b      	lsls	r3, r3, #9
		break;
 8008302:	e7e9      	b.n	80082d8 <VL53L1_GetLimitCheckValue+0x22>
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 8008304:	f105 03e0 	add.w	r3, r5, #224	; 0xe0
 8008308:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800830c:	689b      	ldr	r3, [r3, #8]
			*pLimitCheckValue = TempFix1616;
 800830e:	6033      	str	r3, [r6, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008310:	442c      	add	r4, r5
 8008312:	2300      	movs	r3, #0
 8008314:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
 8008318:	e7ea      	b.n	80082f0 <VL53L1_GetLimitCheckValue+0x3a>
	...

0800831c <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 800831c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008320:	b082      	sub	sp, #8
 8008322:	4606      	mov	r6, r0
 8008324:	4608      	mov	r0, r1
 8008326:	4690      	mov	r8, r2
 8008328:	461d      	mov	r5, r3
 800832a:	9c08      	ldr	r4, [sp, #32]
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	6023      	str	r3, [r4, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8008330:	f895 703e 	ldrb.w	r7, [r5, #62]	; 0x3e
 8008334:	f007 071f 	and.w	r7, r7, #31

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 8008338:	462a      	mov	r2, r5
 800833a:	4639      	mov	r1, r7
 800833c:	f7ff fe34 	bl	8007fa8 <ComputeRQL>
 8008340:	7160      	strb	r0, [r4, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8008342:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8008344:	025b      	lsls	r3, r3, #9
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8008346:	60a3      	str	r3, [r4, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8008348:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 800834a:	025b      	lsls	r3, r3, #9
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 800834c:	60e3      	str	r3, [r4, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 800834e:	8a2b      	ldrh	r3, [r5, #16]
	pRangeData->EffectiveSpadRtnCount =
 8008350:	8223      	strh	r3, [r4, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8008352:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
 8008354:	025b      	lsls	r3, r3, #9
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8008356:	6163      	str	r3, [r4, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8008358:	f9b5 303c 	ldrsh.w	r3, [r5, #60]	; 0x3c
 800835c:	8323      	strh	r3, [r4, #24]

	pRangeData->RangeFractionalPart = 0;
 800835e:	2300      	movs	r3, #0
 8008360:	76a3      	strb	r3, [r4, #26]

	/* Treat device error status first */
	switch (device_status) {
 8008362:	f108 32ff 	add.w	r2, r8, #4294967295
 8008366:	2a10      	cmp	r2, #16
 8008368:	d84b      	bhi.n	8008402 <SetSimpleData+0xe6>
 800836a:	e8df f002 	tbb	[pc, r2]
 800836e:	0909      	.short	0x0909
 8008370:	4a4a4a09 	.word	0x4a4a4a09
 8008374:	4a4a4a4a 	.word	0x4a4a4a4a
 8008378:	4a474a4a 	.word	0x4a474a4a
 800837c:	4a4a      	.short	0x4a4a
 800837e:	09          	.byte	0x09
 800837f:	00          	.byte	0x00
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 8008380:	2305      	movs	r3, #5
 8008382:	76e3      	strb	r3, [r4, #27]
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 8008384:	7ee3      	ldrb	r3, [r4, #27]
 8008386:	b91b      	cbnz	r3, 8008390 <SetSimpleData+0x74>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 8008388:	4638      	mov	r0, r7
 800838a:	f7ff fe41 	bl	8008010 <ConvertStatusLite>
			pRangeData->RangeStatus =
 800838e:	76e0      	strb	r0, [r4, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8008390:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
 8008392:	025b      	lsls	r3, r3, #9
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008394:	f8c6 3390 	str.w	r3, [r6, #912]	; 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8008398:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800839a:	025b      	lsls	r3, r3, #9
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800839c:	f8c6 3394 	str.w	r3, [r6, #916]	; 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 80083a0:	466a      	mov	r2, sp
 80083a2:	2100      	movs	r1, #0
 80083a4:	4630      	mov	r0, r6
 80083a6:	f7ff ff86 	bl	80082b6 <VL53L1_GetLimitCheckValue>

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;

	VL53L1_GetLimitCheckEnable(Dev,
 80083aa:	f10d 0207 	add.w	r2, sp, #7
 80083ae:	2100      	movs	r1, #0
 80083b0:	4630      	mov	r0, r6
 80083b2:	f7ff ff26 	bl	8008202 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 80083b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d024      	beq.n	8008408 <SetSimpleData+0xec>
 80083be:	2300      	movs	r3, #0
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80083c0:	f886 3386 	strb.w	r3, [r6, #902]	; 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 80083c4:	466a      	mov	r2, sp
 80083c6:	2101      	movs	r1, #1
 80083c8:	4630      	mov	r0, r6
 80083ca:	f7ff ff74 	bl	80082b6 <VL53L1_GetLimitCheckValue>

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;

	VL53L1_GetLimitCheckEnable(Dev,
 80083ce:	f10d 0207 	add.w	r2, sp, #7
 80083d2:	2101      	movs	r1, #1
 80083d4:	4630      	mov	r0, r6
 80083d6:	f7ff ff14 	bl	8008202 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 80083da:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d018      	beq.n	8008414 <SetSimpleData+0xf8>
 80083e2:	2300      	movs	r3, #0
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80083e4:	f886 3387 	strb.w	r3, [r6, #903]	; 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 80083e8:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 80083ec:	7ee3      	ldrb	r3, [r4, #27]
 80083ee:	b90b      	cbnz	r3, 80083f4 <SetSimpleData+0xd8>
 80083f0:	2a00      	cmp	r2, #0
 80083f2:	db15      	blt.n	8008420 <SetSimpleData+0x104>
		else
			pRangeData->RangeMilliMeter = 0;
	}

	return Status;
}
 80083f4:	2000      	movs	r0, #0
 80083f6:	b002      	add	sp, #8
 80083f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 80083fc:	230d      	movs	r3, #13
 80083fe:	76e3      	strb	r3, [r4, #27]
		break;
 8008400:	e7c0      	b.n	8008384 <SetSimpleData+0x68>
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8008402:	2300      	movs	r3, #0
 8008404:	76e3      	strb	r3, [r4, #27]
 8008406:	e7bd      	b.n	8008384 <SetSimpleData+0x68>
	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8008408:	2f06      	cmp	r7, #6
 800840a:	d001      	beq.n	8008410 <SetSimpleData+0xf4>
 800840c:	2300      	movs	r3, #0
 800840e:	e7d7      	b.n	80083c0 <SetSimpleData+0xa4>
 8008410:	2301      	movs	r3, #1
 8008412:	e7d5      	b.n	80083c0 <SetSimpleData+0xa4>
	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8008414:	2f04      	cmp	r7, #4
 8008416:	d001      	beq.n	800841c <SetSimpleData+0x100>
 8008418:	2300      	movs	r3, #0
 800841a:	e7e3      	b.n	80083e4 <SetSimpleData+0xc8>
 800841c:	2301      	movs	r3, #1
 800841e:	e7e1      	b.n	80083e4 <SetSimpleData+0xc8>
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 8008420:	4b04      	ldr	r3, [pc, #16]	; (8008434 <SetSimpleData+0x118>)
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	429a      	cmp	r2, r3
 8008426:	db02      	blt.n	800842e <SetSimpleData+0x112>
			pRangeData->RangeMilliMeter = 0;
 8008428:	2300      	movs	r3, #0
 800842a:	8323      	strh	r3, [r4, #24]
 800842c:	e7e2      	b.n	80083f4 <SetSimpleData+0xd8>
			pRangeData->RangeStatus =
 800842e:	230e      	movs	r3, #14
 8008430:	76e3      	strb	r3, [r4, #27]
 8008432:	e7df      	b.n	80083f4 <SetSimpleData+0xd8>
 8008434:	20000000 	.word	0x20000000

08008438 <VL53L1_GetSequenceStepEnable>:
{
 8008438:	b508      	push	{r3, lr}
	Status = VL53L1_get_sequence_config_bit(Dev,
 800843a:	f000 fa3d 	bl	80088b8 <VL53L1_get_sequence_config_bit>
}
 800843e:	bd08      	pop	{r3, pc}

08008440 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:
{
 8008440:	b570      	push	{r4, r5, r6, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	4606      	mov	r6, r0
 8008446:	460d      	mov	r5, r1
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8008448:	4b49      	ldr	r3, [pc, #292]	; (8008570 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x130>)
 800844a:	4299      	cmp	r1, r3
 800844c:	d813      	bhi.n	8008476 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800844e:	2400      	movs	r4, #0
	if (Status == VL53L1_ERROR_NONE) {
 8008450:	b1a4      	cbz	r4, 800847c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x3c>
	if (Status == VL53L1_ERROR_NONE) {
 8008452:	b1dc      	cbz	r4, 800848c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x4c>
	if (Status == VL53L1_ERROR_NONE)
 8008454:	b314      	cbz	r4, 800849c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x5c>
	if (Status == VL53L1_ERROR_NONE) {
 8008456:	2c00      	cmp	r4, #0
 8008458:	d16a      	bne.n	8008530 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf0>
		PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 800845a:	f896 337c 	ldrb.w	r3, [r6, #892]	; 0x37c
		switch (PresetMode) {
 800845e:	2b04      	cmp	r3, #4
 8008460:	d024      	beq.n	80084ac <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6c>
 8008462:	2b08      	cmp	r3, #8
 8008464:	d046      	beq.n	80084f4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xb4>
 8008466:	2b03      	cmp	r3, #3
 8008468:	d032      	beq.n	80084d0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x90>
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 800846a:	4942      	ldr	r1, [pc, #264]	; (8008574 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x134>)
		divisor = 1;
 800846c:	2001      	movs	r0, #1
		TimingGuard = 0;
 800846e:	2200      	movs	r2, #0
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8008470:	f06f 0407 	mvn.w	r4, #7
 8008474:	e04f      	b.n	8008516 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8008476:	f06f 0403 	mvn.w	r4, #3
 800847a:	e7e9      	b.n	8008450 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x10>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800847c:	f10d 0217 	add.w	r2, sp, #23
 8008480:	2105      	movs	r1, #5
 8008482:	4630      	mov	r0, r6
 8008484:	f7ff ffd8 	bl	8008438 <VL53L1_GetSequenceStepEnable>
 8008488:	4604      	mov	r4, r0
 800848a:	e7e2      	b.n	8008452 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800848c:	f10d 0216 	add.w	r2, sp, #22
 8008490:	2106      	movs	r1, #6
 8008492:	4630      	mov	r0, r6
 8008494:	f7ff ffd0 	bl	8008438 <VL53L1_GetSequenceStepEnable>
 8008498:	4604      	mov	r4, r0
 800849a:	e7db      	b.n	8008454 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x14>
		Status = VL53L1_get_timeouts_us(Dev,
 800849c:	ab04      	add	r3, sp, #16
 800849e:	aa03      	add	r2, sp, #12
 80084a0:	a902      	add	r1, sp, #8
 80084a2:	4630      	mov	r0, r6
 80084a4:	f000 f9ca 	bl	800883c <VL53L1_get_timeouts_us>
 80084a8:	4604      	mov	r4, r0
 80084aa:	e7d4      	b.n	8008456 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x16>
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80084ac:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d045      	beq.n	8008540 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x100>
 80084b4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d004      	beq.n	80084c6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x86>
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 80084bc:	492d      	ldr	r1, [pc, #180]	; (8008574 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x134>)
		divisor = 1;
 80084be:	2001      	movs	r0, #1
				TimingGuard = 1000;
 80084c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80084c4:	e027      	b.n	8008516 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 80084c6:	492b      	ldr	r1, [pc, #172]	; (8008574 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x134>)
		divisor = 1;
 80084c8:	2001      	movs	r0, #1
				TimingGuard = 5000;
 80084ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80084ce:	e022      	b.n	8008516 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80084d0:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d038      	beq.n	800854a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x10a>
 80084d8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d004      	beq.n	80084ea <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xaa>
			FDAMaxTimingBudgetUs *= 2;
 80084e0:	4925      	ldr	r1, [pc, #148]	; (8008578 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x138>)
			divisor = 2;
 80084e2:	2002      	movs	r0, #2
				TimingGuard = 21600;
 80084e4:	f245 4260 	movw	r2, #21600	; 0x5460
 80084e8:	e015      	b.n	8008516 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
			FDAMaxTimingBudgetUs *= 2;
 80084ea:	4923      	ldr	r1, [pc, #140]	; (8008578 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x138>)
			divisor = 2;
 80084ec:	2002      	movs	r0, #2
				TimingGuard = 26600;
 80084ee:	f246 72e8 	movw	r2, #26600	; 0x67e8
 80084f2:	e010      	b.n	8008516 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
			VL53L1_get_tuning_parm(Dev,
 80084f4:	aa01      	add	r2, sp, #4
 80084f6:	f248 0136 	movw	r1, #32822	; 0x8036
 80084fa:	4630      	mov	r0, r6
 80084fc:	f000 fe53 	bl	80091a6 <VL53L1_get_tuning_parm>
			if (vhv_loops > 0) {
 8008500:	9b01      	ldr	r3, [sp, #4]
 8008502:	2b00      	cmp	r3, #0
 8008504:	dd1a      	ble.n	800853c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>
				vhv += vhv_loops *
 8008506:	22f5      	movs	r2, #245	; 0xf5
 8008508:	fb02 f203 	mul.w	r2, r2, r3
 800850c:	32f5      	adds	r2, #245	; 0xf5
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800850e:	f602 52dc 	addw	r2, r2, #3548	; 0xddc
			FDAMaxTimingBudgetUs *= 2;
 8008512:	4919      	ldr	r1, [pc, #100]	; (8008578 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x138>)
			divisor = 2;
 8008514:	2002      	movs	r0, #2
		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8008516:	42aa      	cmp	r2, r5
 8008518:	d21c      	bcs.n	8008554 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x114>
					- TimingGuard);
 800851a:	1aaa      	subs	r2, r5, r2
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 800851c:	9204      	str	r2, [sp, #16]
		if (Status == VL53L1_ERROR_NONE) {
 800851e:	b93c      	cbnz	r4, 8008530 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf0>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 8008520:	9b04      	ldr	r3, [sp, #16]
 8008522:	4299      	cmp	r1, r3
 8008524:	d219      	bcs.n	800855a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x11a>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8008526:	f06f 0403 	mvn.w	r4, #3
			if (Status == VL53L1_ERROR_NONE)
 800852a:	b90c      	cbnz	r4, 8008530 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf0>
				VL53L1DevDataSet(Dev,
 800852c:	9b04      	ldr	r3, [sp, #16]
 800852e:	6133      	str	r3, [r6, #16]
	if (Status == VL53L1_ERROR_NONE) {
 8008530:	b90c      	cbnz	r4, 8008536 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf6>
		VL53L1DevDataSet(Dev,
 8008532:	f8c6 5380 	str.w	r5, [r6, #896]	; 0x380
}
 8008536:	4620      	mov	r0, r4
 8008538:	b006      	add	sp, #24
 800853a:	bd70      	pop	{r4, r5, r6, pc}
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800853c:	22f5      	movs	r2, #245	; 0xf5
 800853e:	e7e6      	b.n	800850e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xce>
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8008540:	490c      	ldr	r1, [pc, #48]	; (8008574 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x134>)
		divisor = 1;
 8008542:	2001      	movs	r0, #1
				TimingGuard = 5000;
 8008544:	f241 3288 	movw	r2, #5000	; 0x1388
 8008548:	e7e5      	b.n	8008516 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
			FDAMaxTimingBudgetUs *= 2;
 800854a:	490b      	ldr	r1, [pc, #44]	; (8008578 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x138>)
			divisor = 2;
 800854c:	2002      	movs	r0, #2
				TimingGuard = 26600;
 800854e:	f246 72e8 	movw	r2, #26600	; 0x67e8
 8008552:	e7e0      	b.n	8008516 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8008554:	f06f 0403 	mvn.w	r4, #3
 8008558:	e7e1      	b.n	800851e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xde>
				TimingBudget /= divisor;
 800855a:	fbb3 f3f0 	udiv	r3, r3, r0
 800855e:	9304      	str	r3, [sp, #16]
				Status = VL53L1_set_timeouts_us(
 8008560:	9a03      	ldr	r2, [sp, #12]
 8008562:	9902      	ldr	r1, [sp, #8]
 8008564:	4630      	mov	r0, r6
 8008566:	f000 f94a 	bl	80087fe <VL53L1_set_timeouts_us>
 800856a:	4604      	mov	r4, r0
 800856c:	e7dd      	b.n	800852a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xea>
 800856e:	bf00      	nop
 8008570:	00989680 	.word	0x00989680
 8008574:	00086470 	.word	0x00086470
 8008578:	0010c8e0 	.word	0x0010c8e0

0800857c <VL53L1_SetPresetMode>:
{
 800857c:	b538      	push	{r3, r4, r5, lr}
 800857e:	4604      	mov	r4, r0
 8008580:	460d      	mov	r5, r1
	Status = SetPresetMode(Dev,
 8008582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008586:	2203      	movs	r2, #3
 8008588:	f7ff fd61 	bl	800804e <SetPresetMode>
	if (Status == VL53L1_ERROR_NONE) {
 800858c:	4603      	mov	r3, r0
 800858e:	b9b8      	cbnz	r0, 80085c0 <VL53L1_SetPresetMode+0x44>
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8008590:	2303      	movs	r3, #3
 8008592:	f884 337e 	strb.w	r3, [r4, #894]	; 0x37e
		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 8008596:	f884 337f 	strb.w	r3, [r4, #895]	; 0x37f
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 800859a:	1eeb      	subs	r3, r5, #3
 800859c:	b2db      	uxtb	r3, r3
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d908      	bls.n	80085b4 <VL53L1_SetPresetMode+0x38>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 80085a2:	2d08      	cmp	r5, #8
 80085a4:	d006      	beq.n	80085b4 <VL53L1_SetPresetMode+0x38>
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 80085a6:	f248 2135 	movw	r1, #33333	; 0x8235
 80085aa:	4620      	mov	r0, r4
 80085ac:	f7ff ff48 	bl	8008440 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 80085b0:	4603      	mov	r3, r0
 80085b2:	e005      	b.n	80085c0 <VL53L1_SetPresetMode+0x44>
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 80085b4:	f24a 0128 	movw	r1, #41000	; 0xa028
 80085b8:	4620      	mov	r0, r4
 80085ba:	f7ff ff41 	bl	8008440 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 80085be:	4603      	mov	r3, r0
	if (Status == VL53L1_ERROR_NONE) {
 80085c0:	b10b      	cbz	r3, 80085c6 <VL53L1_SetPresetMode+0x4a>
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	bd38      	pop	{r3, r4, r5, pc}
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 80085c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80085ca:	4620      	mov	r0, r4
 80085cc:	f7ff fdde 	bl	800818c <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 80085d0:	4603      	mov	r3, r0
 80085d2:	e7f6      	b.n	80085c2 <VL53L1_SetPresetMode+0x46>

080085d4 <VL53L1_StaticInit>:
{
 80085d4:	b508      	push	{r3, lr}
	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 80085d6:	2203      	movs	r2, #3
 80085d8:	f880 2378 	strb.w	r2, [r0, #888]	; 0x378
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 80085dc:	2120      	movs	r1, #32
 80085de:	7081      	strb	r1, [r0, #2]
	VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 80085e0:	f880 237f 	strb.w	r2, [r0, #895]	; 0x37f
	VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 80085e4:	f880 237e 	strb.w	r2, [r0, #894]	; 0x37e
	VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 80085e8:	f880 237d 	strb.w	r2, [r0, #893]	; 0x37d
	Status = VL53L1_SetPresetMode(Dev,
 80085ec:	2108      	movs	r1, #8
 80085ee:	f7ff ffc5 	bl	800857c <VL53L1_SetPresetMode>
}
 80085f2:	bd08      	pop	{r3, pc}

080085f4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:
{
 80085f4:	b570      	push	{r4, r5, r6, lr}
 80085f6:	b086      	sub	sp, #24
 80085f8:	4606      	mov	r6, r0
 80085fa:	460d      	mov	r5, r1
	uint8_t Mm1Enabled = 0;
 80085fc:	2300      	movs	r3, #0
 80085fe:	f88d 3017 	strb.w	r3, [sp, #23]
	uint8_t Mm2Enabled = 0;
 8008602:	f88d 3016 	strb.w	r3, [sp, #22]
	uint32_t  MmTimeoutUs = 0;
 8008606:	9304      	str	r3, [sp, #16]
	uint32_t  RangeTimeoutUs = 0;
 8008608:	9303      	str	r3, [sp, #12]
	uint32_t PhaseCalTimeoutUs = 0;
 800860a:	9302      	str	r3, [sp, #8]
	*pMeasurementTimingBudgetMicroSeconds = 0;
 800860c:	600b      	str	r3, [r1, #0]
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800860e:	f10d 0217 	add.w	r2, sp, #23
 8008612:	2105      	movs	r1, #5
 8008614:	f7ff ff10 	bl	8008438 <VL53L1_GetSequenceStepEnable>
	if (Status == VL53L1_ERROR_NONE)
 8008618:	4604      	mov	r4, r0
 800861a:	b170      	cbz	r0, 800863a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x46>
	if (Status == VL53L1_ERROR_NONE)
 800861c:	b1ac      	cbz	r4, 800864a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x56>
	if (Status == VL53L1_ERROR_NONE) {
 800861e:	2c00      	cmp	r4, #0
 8008620:	d155      	bne.n	80086ce <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xda>
		PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8008622:	f896 337c 	ldrb.w	r3, [r6, #892]	; 0x37c
		switch (PresetMode) {
 8008626:	2b04      	cmp	r3, #4
 8008628:	d017      	beq.n	800865a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
 800862a:	2b08      	cmp	r3, #8
 800862c:	d03a      	beq.n	80086a4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xb0>
 800862e:	2b03      	cmp	r3, #3
 8008630:	d024      	beq.n	800867c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x88>
	uint32_t  MeasTimingBdg = 0;
 8008632:	2300      	movs	r3, #0
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8008634:	f06f 0407 	mvn.w	r4, #7
 8008638:	e04a      	b.n	80086d0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xdc>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800863a:	f10d 0216 	add.w	r2, sp, #22
 800863e:	2106      	movs	r1, #6
 8008640:	4630      	mov	r0, r6
 8008642:	f7ff fef9 	bl	8008438 <VL53L1_GetSequenceStepEnable>
 8008646:	4604      	mov	r4, r0
 8008648:	e7e8      	b.n	800861c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x28>
		Status = VL53L1_get_timeouts_us(Dev,
 800864a:	ab03      	add	r3, sp, #12
 800864c:	aa04      	add	r2, sp, #16
 800864e:	a902      	add	r1, sp, #8
 8008650:	4630      	mov	r0, r6
 8008652:	f000 f8f3 	bl	800883c <VL53L1_get_timeouts_us>
 8008656:	4604      	mov	r4, r0
 8008658:	e7e1      	b.n	800861e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x2a>
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800865a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800865e:	2b01      	cmp	r3, #1
 8008660:	d007      	beq.n	8008672 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x7e>
 8008662:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8008666:	2b01      	cmp	r3, #1
 8008668:	d003      	beq.n	8008672 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x7e>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 800866a:	9b03      	ldr	r3, [sp, #12]
 800866c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8008670:	e02e      	b.n	80086d0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xdc>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8008672:	9b03      	ldr	r3, [sp, #12]
 8008674:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8008678:	3308      	adds	r3, #8
 800867a:	e029      	b.n	80086d0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xdc>
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800867c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d009      	beq.n	8008698 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xa4>
 8008684:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d005      	beq.n	8008698 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xa4>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 800868c:	9b03      	ldr	r3, [sp, #12]
 800868e:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8008692:	3330      	adds	r3, #48	; 0x30
 8008694:	005b      	lsls	r3, r3, #1
 8008696:	e01b      	b.n	80086d0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xdc>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 8008698:	9b03      	ldr	r3, [sp, #12]
 800869a:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 800869e:	3334      	adds	r3, #52	; 0x34
 80086a0:	005b      	lsls	r3, r3, #1
 80086a2:	e015      	b.n	80086d0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xdc>
			VL53L1_get_tuning_parm(Dev,
 80086a4:	aa01      	add	r2, sp, #4
 80086a6:	f248 0136 	movw	r1, #32822	; 0x8036
 80086aa:	4630      	mov	r0, r6
 80086ac:	f000 fd7b 	bl	80091a6 <VL53L1_get_tuning_parm>
			if (vhv_loops > 0) {
 80086b0:	9a01      	ldr	r2, [sp, #4]
 80086b2:	2a00      	cmp	r2, #0
 80086b4:	dd09      	ble.n	80086ca <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xd6>
				vhv += vhv_loops *
 80086b6:	23f5      	movs	r3, #245	; 0xf5
 80086b8:	fb03 f302 	mul.w	r3, r3, r2
 80086bc:	33f5      	adds	r3, #245	; 0xf5
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 80086be:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 80086c2:	9a03      	ldr	r2, [sp, #12]
 80086c4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
		break;
 80086c8:	e002      	b.n	80086d0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xdc>
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 80086ca:	23f5      	movs	r3, #245	; 0xf5
 80086cc:	e7f7      	b.n	80086be <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xca>
	uint32_t  MeasTimingBdg = 0;
 80086ce:	2300      	movs	r3, #0
	if (Status == VL53L1_ERROR_NONE)
 80086d0:	b904      	cbnz	r4, 80086d4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe0>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 80086d2:	602b      	str	r3, [r5, #0]
}
 80086d4:	4620      	mov	r0, r4
 80086d6:	b006      	add	sp, #24
 80086d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080086dc <VL53L1_StartMeasurement>:
{
 80086dc:	b570      	push	{r4, r5, r6, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	4605      	mov	r5, r0
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 80086e2:	f890 3378 	ldrb.w	r3, [r0, #888]	; 0x378
	switch (CurrPalState) {
 80086e6:	2b05      	cmp	r3, #5
 80086e8:	d810      	bhi.n	800870c <VL53L1_StartMeasurement+0x30>
 80086ea:	2b04      	cmp	r3, #4
 80086ec:	d214      	bcs.n	8008718 <VL53L1_StartMeasurement+0x3c>
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	d912      	bls.n	8008718 <VL53L1_StartMeasurement+0x3c>
		Status = VL53L1_ERROR_NONE;
 80086f2:	2400      	movs	r4, #0
	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 80086f4:	78ae      	ldrb	r6, [r5, #2]
	if ((Status == VL53L1_ERROR_NONE) &&
 80086f6:	b90c      	cbnz	r4, 80086fc <VL53L1_StartMeasurement+0x20>
 80086f8:	2e40      	cmp	r6, #64	; 0x40
 80086fa:	d010      	beq.n	800871e <VL53L1_StartMeasurement+0x42>
	if (Status == VL53L1_ERROR_NONE)
 80086fc:	b32c      	cbz	r4, 800874a <VL53L1_StartMeasurement+0x6e>
	if (Status == VL53L1_ERROR_NONE)
 80086fe:	b914      	cbnz	r4, 8008706 <VL53L1_StartMeasurement+0x2a>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 8008700:	2304      	movs	r3, #4
 8008702:	f885 3378 	strb.w	r3, [r5, #888]	; 0x378
}
 8008706:	4620      	mov	r0, r4
 8008708:	b002      	add	sp, #8
 800870a:	bd70      	pop	{r4, r5, r6, pc}
	switch (CurrPalState) {
 800870c:	3b62      	subs	r3, #98	; 0x62
 800870e:	2b01      	cmp	r3, #1
 8008710:	d902      	bls.n	8008718 <VL53L1_StartMeasurement+0x3c>
		Status = VL53L1_ERROR_UNDEFINED;
 8008712:	f06f 0402 	mvn.w	r4, #2
 8008716:	e7ed      	b.n	80086f4 <VL53L1_StartMeasurement+0x18>
		Status = VL53L1_ERROR_INVALID_COMMAND;
 8008718:	f06f 040d 	mvn.w	r4, #13
 800871c:	e7ea      	b.n	80086f4 <VL53L1_StartMeasurement+0x18>
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800871e:	a901      	add	r1, sp, #4
 8008720:	4628      	mov	r0, r5
 8008722:	f7ff ff67 	bl	80085f4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
		MTBus /= 1000;
 8008726:	4a0c      	ldr	r2, [pc, #48]	; (8008758 <VL53L1_StartMeasurement+0x7c>)
 8008728:	9b01      	ldr	r3, [sp, #4]
 800872a:	fba2 2303 	umull	r2, r3, r2, r3
 800872e:	099b      	lsrs	r3, r3, #6
 8008730:	9301      	str	r3, [sp, #4]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 8008732:	4669      	mov	r1, sp
 8008734:	4628      	mov	r0, r5
 8008736:	f7ff fd35 	bl	80081a4 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 800873a:	9b01      	ldr	r3, [sp, #4]
 800873c:	3304      	adds	r3, #4
 800873e:	9a00      	ldr	r2, [sp, #0]
 8008740:	4293      	cmp	r3, r2
 8008742:	d9db      	bls.n	80086fc <VL53L1_StartMeasurement+0x20>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8008744:	f06f 0403 	mvn.w	r4, #3
 8008748:	e7d8      	b.n	80086fc <VL53L1_StartMeasurement+0x20>
		Status = VL53L1_init_and_start_range(
 800874a:	2206      	movs	r2, #6
 800874c:	4631      	mov	r1, r6
 800874e:	4628      	mov	r0, r5
 8008750:	f000 fb04 	bl	8008d5c <VL53L1_init_and_start_range>
 8008754:	4604      	mov	r4, r0
 8008756:	e7d2      	b.n	80086fe <VL53L1_StartMeasurement+0x22>
 8008758:	10624dd3 	.word	0x10624dd3

0800875c <VL53L1_StopMeasurement>:
{
 800875c:	b510      	push	{r4, lr}
 800875e:	4604      	mov	r4, r0
	Status = VL53L1_stop_range(Dev);
 8008760:	f000 fbfc 	bl	8008f5c <VL53L1_stop_range>
	if (Status == VL53L1_ERROR_NONE)
 8008764:	4603      	mov	r3, r0
 8008766:	b910      	cbnz	r0, 800876e <VL53L1_StopMeasurement+0x12>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8008768:	2203      	movs	r2, #3
 800876a:	f884 2378 	strb.w	r2, [r4, #888]	; 0x378
}
 800876e:	4618      	mov	r0, r3
 8008770:	bd10      	pop	{r4, pc}

08008772 <VL53L1_ClearInterruptAndStartMeasurement>:
{
 8008772:	b508      	push	{r3, lr}
	Status = VL53L1_clear_interrupt_and_enable_next_range(
 8008774:	7881      	ldrb	r1, [r0, #2]
 8008776:	f000 fc45 	bl	8009004 <VL53L1_clear_interrupt_and_enable_next_range>
}
 800877a:	bd08      	pop	{r3, pc}

0800877c <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 800877c:	b530      	push	{r4, r5, lr}
 800877e:	b0a5      	sub	sp, #148	; 0x94
 8008780:	4605      	mov	r5, r0
 8008782:	460c      	mov	r4, r1

	//LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 8008784:	f04f 33ff 	mov.w	r3, #4294967295
 8008788:	600b      	str	r3, [r1, #0]
 800878a:	604b      	str	r3, [r1, #4]
 800878c:	608b      	str	r3, [r1, #8]
 800878e:	60cb      	str	r3, [r1, #12]
 8008790:	610b      	str	r3, [r1, #16]
 8008792:	614b      	str	r3, [r1, #20]
 8008794:	618b      	str	r3, [r1, #24]
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 8008796:	aa03      	add	r2, sp, #12
 8008798:	2102      	movs	r1, #2
 800879a:	f000 fcb8 	bl	800910e <VL53L1_get_device_results>
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 800879e:	4603      	mov	r3, r0
 80087a0:	b110      	cbz	r0, 80087a8 <VL53L1_GetRangingMeasurementData+0x2c>
				pRangingMeasurementData);
	}

	//LOG_FUNCTION_END(Status);
	return Status;
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	b025      	add	sp, #148	; 0x94
 80087a6:	bd30      	pop	{r4, r5, pc}
		pRangingMeasurementData->StreamCount = presults->stream_count;
 80087a8:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80087ac:	7123      	strb	r3, [r4, #4]
		Status = SetSimpleData(Dev, 1,
 80087ae:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80087b2:	9400      	str	r4, [sp, #0]
 80087b4:	ab04      	add	r3, sp, #16
 80087b6:	2101      	movs	r1, #1
 80087b8:	4628      	mov	r0, r5
 80087ba:	f7ff fdaf 	bl	800831c <SetSimpleData>
 80087be:	4603      	mov	r3, r0
 80087c0:	e7ef      	b.n	80087a2 <VL53L1_GetRangingMeasurementData+0x26>

080087c2 <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 80087c2:	4602      	mov	r2, r0
	VL53L1_Error  status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 80087c4:	f8b0 32b4 	ldrh.w	r3, [r0, #692]	; 0x2b4
 80087c8:	b13b      	cbz	r3, 80087da <VL53L1_set_inter_measurement_period_ms+0x18>
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80087ca:	2000      	movs	r0, #0
		status = VL53L1_ERROR_DIVISION_BY_ZERO;

	if (status == VL53L1_ERROR_NONE) {
 80087cc:	b920      	cbnz	r0, 80087d8 <VL53L1_set_inter_measurement_period_ms+0x16>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 80087ce:	6151      	str	r1, [r2, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
 80087d0:	fb03 f301 	mul.w	r3, r3, r1
		pdev->tim_cfg.system__intermeasurement_period = \
 80087d4:	f8c2 31ac 	str.w	r3, [r2, #428]	; 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80087d8:	4770      	bx	lr
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80087da:	f06f 000e 	mvn.w	r0, #14
 80087de:	e7f5      	b.n	80087cc <VL53L1_set_inter_measurement_period_ms+0xa>

080087e0 <VL53L1_get_inter_measurement_period_ms>:
	VL53L1_Error  status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 80087e0:	f8b0 22b4 	ldrh.w	r2, [r0, #692]	; 0x2b4
 80087e4:	b142      	cbz	r2, 80087f8 <VL53L1_get_inter_measurement_period_ms+0x18>
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80087e6:	2300      	movs	r3, #0
		status = VL53L1_ERROR_DIVISION_BY_ZERO;

	if (status == VL53L1_ERROR_NONE)
 80087e8:	b923      	cbnz	r3, 80087f4 <VL53L1_get_inter_measurement_period_ms+0x14>
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 80087ea:	f8d0 01ac 	ldr.w	r0, [r0, #428]	; 0x1ac
 80087ee:	fbb0 f2f2 	udiv	r2, r0, r2
		*pinter_measurement_period_ms = \
 80087f2:	600a      	str	r2, [r1, #0]


	LOG_FUNCTION_END(status);

	return status;
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	4770      	bx	lr
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80087f8:	f06f 030e 	mvn.w	r3, #14
 80087fc:	e7f4      	b.n	80087e8 <VL53L1_get_inter_measurement_period_ms+0x8>

080087fe <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 80087fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008800:	b083      	sub	sp, #12
 8008802:	4604      	mov	r4, r0
	VL53L1_LLDriverData_t *pdev =
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8008804:	f8b0 715e 	ldrh.w	r7, [r0, #350]	; 0x15e
 8008808:	b11f      	cbz	r7, 8008812 <VL53L1_set_timeouts_us+0x14>
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800880a:	2000      	movs	r0, #0
		status = VL53L1_ERROR_DIVISION_BY_ZERO;

	if (status == VL53L1_ERROR_NONE) {
 800880c:	b120      	cbz	r0, 8008818 <VL53L1_set_timeouts_us+0x1a>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800880e:	b003      	add	sp, #12
 8008810:	bdf0      	pop	{r4, r5, r6, r7, pc}
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8008812:	f06f 000e 	mvn.w	r0, #14
 8008816:	e7f9      	b.n	800880c <VL53L1_set_timeouts_us+0xe>
 8008818:	461e      	mov	r6, r3
 800881a:	4615      	mov	r5, r2
 800881c:	4608      	mov	r0, r1
		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 800881e:	60a1      	str	r1, [r4, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8008820:	60e2      	str	r2, [r4, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8008822:	6123      	str	r3, [r4, #16]
			VL53L1_calc_timeout_register_values(
 8008824:	f504 73c2 	add.w	r3, r4, #388	; 0x184
 8008828:	f504 74ce 	add.w	r4, r4, #412	; 0x19c
		status =
 800882c:	9401      	str	r4, [sp, #4]
 800882e:	9300      	str	r3, [sp, #0]
 8008830:	463b      	mov	r3, r7
 8008832:	4632      	mov	r2, r6
 8008834:	4629      	mov	r1, r5
 8008836:	f001 facd 	bl	8009dd4 <VL53L1_calc_timeout_register_values>
 800883a:	e7e8      	b.n	800880e <VL53L1_set_timeouts_us+0x10>

0800883c <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 800883c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t  macro_period_us = 0;
	uint16_t  timeout_encoded = 0;

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8008840:	f8b0 515e 	ldrh.w	r5, [r0, #350]	; 0x15e
 8008844:	b125      	cbz	r5, 8008850 <VL53L1_get_timeouts_us+0x14>
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008846:	2600      	movs	r6, #0
		status = VL53L1_ERROR_DIVISION_BY_ZERO;

	if (status == VL53L1_ERROR_NONE) {
 8008848:	b12e      	cbz	r6, 8008856 <VL53L1_get_timeouts_us+0x1a>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800884a:	4630      	mov	r0, r6
 800884c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8008850:	f06f 060e 	mvn.w	r6, #14
 8008854:	e7f8      	b.n	8008848 <VL53L1_get_timeouts_us+0xc>
 8008856:	461f      	mov	r7, r3
 8008858:	4690      	mov	r8, r2
 800885a:	4689      	mov	r9, r1
 800885c:	4604      	mov	r4, r0
		macro_period_us =
 800885e:	f890 11a2 	ldrb.w	r1, [r0, #418]	; 0x1a2
 8008862:	4628      	mov	r0, r5
 8008864:	f001 fa41 	bl	8009cea <VL53L1_calc_macro_period_us>
 8008868:	4605      	mov	r5, r0
			VL53L1_calc_timeout_us(
 800886a:	4601      	mov	r1, r0
 800886c:	f894 018b 	ldrb.w	r0, [r4, #395]	; 0x18b
 8008870:	f001 fa80 	bl	8009d74 <VL53L1_calc_timeout_us>
		*pphasecal_config_timeout_us =
 8008874:	f8c9 0000 	str.w	r0, [r9]
		timeout_encoded =
 8008878:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 800887c:	f894 019d 	ldrb.w	r0, [r4, #413]	; 0x19d
		timeout_encoded = (timeout_encoded << 8) +
 8008880:	eb00 2003 	add.w	r0, r0, r3, lsl #8
			VL53L1_calc_decoded_timeout_us(
 8008884:	4629      	mov	r1, r5
 8008886:	b280      	uxth	r0, r0
 8008888:	f001 fa9c 	bl	8009dc4 <VL53L1_calc_decoded_timeout_us>
		*pmm_config_timeout_us =
 800888c:	f8c8 0000 	str.w	r0, [r8]
		timeout_encoded =
 8008890:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8008894:	f894 01a1 	ldrb.w	r0, [r4, #417]	; 0x1a1
		timeout_encoded = (timeout_encoded << 8) +
 8008898:	eb00 2003 	add.w	r0, r0, r3, lsl #8
			VL53L1_calc_decoded_timeout_us(
 800889c:	4629      	mov	r1, r5
 800889e:	b280      	uxth	r0, r0
 80088a0:	f001 fa90 	bl	8009dc4 <VL53L1_calc_decoded_timeout_us>
		*prange_config_timeout_us =
 80088a4:	6038      	str	r0, [r7, #0]
		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 80088a6:	f8d9 3000 	ldr.w	r3, [r9]
 80088aa:	60a3      	str	r3, [r4, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 80088ac:	f8d8 3000 	ldr.w	r3, [r8]
 80088b0:	60e3      	str	r3, [r4, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	6123      	str	r3, [r4, #16]
 80088b6:	e7c8      	b.n	800884a <VL53L1_get_timeouts_us+0xe>

080088b8 <VL53L1_get_sequence_config_bit>:
	VL53L1_LLDriverData_t *pdev =
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 80088b8:	2907      	cmp	r1, #7
 80088ba:	d80e      	bhi.n	80088da <VL53L1_get_sequence_config_bit+0x22>

		if (bit_id > 0) {
 80088bc:	b159      	cbz	r1, 80088d6 <VL53L1_get_sequence_config_bit+0x1e>
			bit_mask  = 0x01 << bit_id;
 80088be:	2301      	movs	r3, #1
 80088c0:	408b      	lsls	r3, r1
 80088c2:	b2db      	uxtb	r3, r3
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 80088c4:	f890 01c5 	ldrb.w	r0, [r0, #453]	; 0x1c5
		*pvalue =
 80088c8:	4003      	ands	r3, r0
 80088ca:	7013      	strb	r3, [r2, #0]

		if (bit_id > 0) {
 80088cc:	b141      	cbz	r1, 80088e0 <VL53L1_get_sequence_config_bit+0x28>
			*pvalue  = *pvalue >> bit_id;
 80088ce:	410b      	asrs	r3, r1
 80088d0:	7013      	strb	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80088d2:	2000      	movs	r0, #0
 80088d4:	4770      	bx	lr
	uint8_t  bit_mask        = 0x01;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e7f4      	b.n	80088c4 <VL53L1_get_sequence_config_bit+0xc>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 80088da:	f06f 0003 	mvn.w	r0, #3
 80088de:	4770      	bx	lr
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80088e0:	2000      	movs	r0, #0
	}

	return status;
}
 80088e2:	4770      	bx	lr

080088e4 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 80088e4:	b538      	push	{r3, r4, r5, lr}
 80088e6:	4605      	mov	r5, r0
 80088e8:	460c      	mov	r4, r1
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 80088ea:	f200 12c3 	addw	r2, r0, #451	; 0x1c3
 80088ee:	7809      	ldrb	r1, [r1, #0]
 80088f0:	7860      	ldrb	r0, [r4, #1]
 80088f2:	f001 fab1 	bl	8009e58 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 80088f6:	f505 72e2 	add.w	r2, r5, #452	; 0x1c4
 80088fa:	78e1      	ldrb	r1, [r4, #3]
 80088fc:	78a0      	ldrb	r0, [r4, #2]
 80088fe:	f001 fac1 	bl	8009e84 <VL53L1_encode_zone_size>
	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
}
 8008902:	2000      	movs	r0, #0
 8008904:	bd38      	pop	{r3, r4, r5, pc}

08008906 <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8008906:	b538      	push	{r3, r4, r5, lr}
 8008908:	4605      	mov	r5, r0
 800890a:	460c      	mov	r4, r1
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 800890c:	460a      	mov	r2, r1
 800890e:	3101      	adds	r1, #1
 8008910:	f890 01c3 	ldrb.w	r0, [r0, #451]	; 0x1c3
 8008914:	f001 fb5e 	bl	8009fd4 <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 8008918:	1ce2      	adds	r2, r4, #3
 800891a:	1ca1      	adds	r1, r4, #2
 800891c:	f895 01c4 	ldrb.w	r0, [r5, #452]	; 0x1c4
 8008920:	f001 faaa 	bl	8009e78 <VL53L1_decode_zone_size>
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
}
 8008924:	2000      	movs	r0, #0
 8008926:	bd38      	pop	{r3, r4, r5, pc}

08008928 <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8008928:	b570      	push	{r4, r5, r6, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	4606      	mov	r6, r0
 800892e:	460c      	mov	r4, r1
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  x       = 0;
 8008930:	2500      	movs	r5, #0
 8008932:	f88d 5007 	strb.w	r5, [sp, #7]
	uint8_t  y       = 0;
 8008936:	f88d 5006 	strb.w	r5, [sp, #6]
	uint8_t  xy_size = 0;

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 800893a:	f10d 0207 	add.w	r2, sp, #7
 800893e:	f10d 0106 	add.w	r1, sp, #6
 8008942:	f890 022a 	ldrb.w	r0, [r0, #554]	; 0x22a
 8008946:	f001 fb45 	bl	8009fd4 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 800894a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800894e:	7023      	strb	r3, [r4, #0]
	pmm_roi->y_centre = y;
 8008950:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008954:	7063      	strb	r3, [r4, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8008956:	f896 322b 	ldrb.w	r3, [r6, #555]	; 0x22b

	pmm_roi->height = xy_size >> 4;
 800895a:	091a      	lsrs	r2, r3, #4
 800895c:	70e2      	strb	r2, [r4, #3]
	pmm_roi->width  = xy_size & 0x0F;
 800895e:	f003 030f 	and.w	r3, r3, #15
 8008962:	70a3      	strb	r3, [r4, #2]

	LOG_FUNCTION_END(status);

	return status;
}
 8008964:	4628      	mov	r0, r5
 8008966:	b002      	add	sp, #8
 8008968:	bd70      	pop	{r4, r5, r6, pc}

0800896a <VL53L1_read_p2p_data>:
{
 800896a:	b570      	push	{r4, r5, r6, lr}
 800896c:	4604      	mov	r4, r0
		status = VL53L1_get_static_nvm_managed(
 800896e:	f500 71ac 	add.w	r1, r0, #344	; 0x158
 8008972:	f001 fb9d 	bl	800a0b0 <VL53L1_get_static_nvm_managed>
	if (status == VL53L1_ERROR_NONE)
 8008976:	4605      	mov	r5, r0
 8008978:	b1d0      	cbz	r0, 80089b0 <VL53L1_read_p2p_data+0x46>
	if (status == VL53L1_ERROR_NONE) {
 800897a:	b305      	cbz	r5, 80089be <VL53L1_read_p2p_data+0x54>
	if (status == VL53L1_ERROR_NONE)
 800897c:	b375      	cbz	r5, 80089dc <VL53L1_read_p2p_data+0x72>
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 800897e:	f8b4 315e 	ldrh.w	r3, [r4, #350]	; 0x15e
 8008982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008986:	d203      	bcs.n	8008990 <VL53L1_read_p2p_data+0x26>
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8008988:	f64b 43cc 	movw	r3, #48332	; 0xbccc
 800898c:	f8a4 315e 	strh.w	r3, [r4, #350]	; 0x15e
	if (status == VL53L1_ERROR_NONE)
 8008990:	b365      	cbz	r5, 80089ec <VL53L1_read_p2p_data+0x82>
	if (pdev->optical_centre.x_centre == 0 &&
 8008992:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
 8008996:	b94b      	cbnz	r3, 80089ac <VL53L1_read_p2p_data+0x42>
				pdev->mm_roi.x_centre << 4;
 8008998:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
 800899c:	011b      	lsls	r3, r3, #4
		pdev->optical_centre.x_centre =
 800899e:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
				pdev->mm_roi.y_centre << 4;
 80089a2:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
 80089a6:	011b      	lsls	r3, r3, #4
		pdev->optical_centre.y_centre =
 80089a8:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
}
 80089ac:	4628      	mov	r0, r5
 80089ae:	bd70      	pop	{r4, r5, r6, pc}
		status = VL53L1_get_customer_nvm_managed(
 80089b0:	f104 0142 	add.w	r1, r4, #66	; 0x42
 80089b4:	4620      	mov	r0, r4
 80089b6:	f001 fc2e 	bl	800a216 <VL53L1_get_customer_nvm_managed>
 80089ba:	4605      	mov	r5, r0
 80089bc:	e7dd      	b.n	800897a <VL53L1_read_p2p_data+0x10>
		status = VL53L1_get_nvm_copy_data(
 80089be:	f504 76fd 	add.w	r6, r4, #506	; 0x1fa
 80089c2:	4631      	mov	r1, r6
 80089c4:	4620      	mov	r0, r4
 80089c6:	f001 ffe8 	bl	800a99a <VL53L1_get_nvm_copy_data>
		if (status == VL53L1_ERROR_NONE)
 80089ca:	4605      	mov	r5, r0
 80089cc:	2800      	cmp	r0, #0
 80089ce:	d1d5      	bne.n	800897c <VL53L1_read_p2p_data+0x12>
			VL53L1_copy_rtn_good_spads_to_buffer(
 80089d0:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
 80089d4:	4630      	mov	r0, r6
 80089d6:	f001 f8c3 	bl	8009b60 <VL53L1_copy_rtn_good_spads_to_buffer>
 80089da:	e7cf      	b.n	800897c <VL53L1_read_p2p_data+0x12>
		status =
 80089dc:	f504 722d 	add.w	r2, r4, #692	; 0x2b4
 80089e0:	21de      	movs	r1, #222	; 0xde
 80089e2:	4620      	mov	r0, r4
 80089e4:	f007 fa34 	bl	800fe50 <VL53L1_RdWord>
 80089e8:	4605      	mov	r5, r0
 80089ea:	e7c8      	b.n	800897e <VL53L1_read_p2p_data+0x14>
		status =
 80089ec:	f104 019e 	add.w	r1, r4, #158	; 0x9e
 80089f0:	4620      	mov	r0, r4
 80089f2:	f7ff ff99 	bl	8008928 <VL53L1_get_mode_mitigation_roi>
 80089f6:	4605      	mov	r5, r0
 80089f8:	e7cb      	b.n	8008992 <VL53L1_read_p2p_data+0x28>

080089fa <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 80089fa:	b500      	push	{lr}
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 80089fc:	3901      	subs	r1, #1
 80089fe:	2925      	cmp	r1, #37	; 0x25
 8008a00:	d847      	bhi.n	8008a92 <VL53L1_get_preset_mode_timing_cfg+0x98>
 8008a02:	e8df f001 	tbb	[pc, r1]
 8008a06:	1313      	.short	0x1313
 8008a08:	24131313 	.word	0x24131313
 8008a0c:	46462424 	.word	0x46462424
 8008a10:	46464646 	.word	0x46464646
 8008a14:	24134646 	.word	0x24134646
 8008a18:	46464646 	.word	0x46464646
 8008a1c:	46464646 	.word	0x46464646
 8008a20:	46464646 	.word	0x46464646
 8008a24:	46464646 	.word	0x46464646
 8008a28:	35353546 	.word	0x35353546
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 8008a2c:	f8b0 10ca 	ldrh.w	r1, [r0, #202]	; 0xca
		*pdss_config__target_total_rate_mcps =
 8008a30:	8011      	strh	r1, [r2, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8008a32:	f8d0 20d0 	ldr.w	r2, [r0, #208]	; 0xd0
		*pphasecal_config_timeout_us =
 8008a36:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 8008a38:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
		*pmm_config_timeout_us =
 8008a3c:	9a01      	ldr	r2, [sp, #4]
 8008a3e:	6013      	str	r3, [r2, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 8008a40:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
		*prange_config_timeout_us =
 8008a44:	9a02      	ldr	r2, [sp, #8]
 8008a46:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008a48:	2000      	movs	r0, #0
	break;
 8008a4a:	f85d fb04 	ldr.w	pc, [sp], #4
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8008a4e:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 8008a52:	8011      	strh	r1, [r2, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8008a54:	f8d0 20d4 	ldr.w	r2, [r0, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 8008a58:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 8008a5a:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
		*pmm_config_timeout_us =
 8008a5e:	9a01      	ldr	r2, [sp, #4]
 8008a60:	6013      	str	r3, [r2, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 8008a62:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
		*prange_config_timeout_us =
 8008a66:	9a02      	ldr	r2, [sp, #8]
 8008a68:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008a6a:	2000      	movs	r0, #0
	break;
 8008a6c:	f85d fb04 	ldr.w	pc, [sp], #4

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8008a70:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 8008a74:	8011      	strh	r1, [r2, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8008a76:	f8d0 20d4 	ldr.w	r2, [r0, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 8008a7a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8008a7c:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
		*pmm_config_timeout_us =
 8008a80:	9a01      	ldr	r2, [sp, #4]
 8008a82:	6013      	str	r3, [r2, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 8008a84:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
		*prange_config_timeout_us =
 8008a88:	9a02      	ldr	r2, [sp, #8]
 8008a8a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008a8c:	2000      	movs	r0, #0
	break;
 8008a8e:	f85d fb04 	ldr.w	pc, [sp], #4

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8008a92:	f06f 0003 	mvn.w	r0, #3
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8008a96:	f85d fb04 	ldr.w	pc, [sp], #4

08008a9a <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8008a9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a9e:	b089      	sub	sp, #36	; 0x24
 8008aa0:	4604      	mov	r4, r0
 8008aa2:	460d      	mov	r5, r1
 8008aa4:	4616      	mov	r6, r2
 8008aa6:	9307      	str	r3, [sp, #28]

	VL53L1_Error  status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev =
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8008aa8:	f500 77b2 	add.w	r7, r0, #356	; 0x164
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8008aac:	f500 78c2 	add.w	r8, r0, #388	; 0x184
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8008ab0:	f500 73ce 	add.w	r3, r0, #412	; 0x19c
 8008ab4:	9305      	str	r3, [sp, #20]
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8008ab6:	f500 73da 	add.w	r3, r0, #436	; 0x1b4
 8008aba:	9306      	str	r3, [sp, #24]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8008abc:	f500 79e4 	add.w	r9, r0, #456	; 0x1c8
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8008ac0:	f100 0aa4 	add.w	sl, r0, #164	; 0xa4
	VL53L1_low_power_auto_data_t  *plpadata      =
 8008ac4:	f500 7b39 	add.w	fp, r0, #740	; 0x2e4
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 8008ac8:	7041      	strb	r1, [r0, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8008aca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008acc:	60c3      	str	r3, [r0, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8008ace:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ad0:	6103      	str	r3, [r0, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8008ad2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ad4:	6143      	str	r3, [r0, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 8008ad6:	2103      	movs	r1, #3
 8008ad8:	f000 ff55 	bl	8009986 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 8008adc:	3d01      	subs	r5, #1
 8008ade:	2d25      	cmp	r5, #37	; 0x25
 8008ae0:	f200 80b6 	bhi.w	8008c50 <VL53L1_set_preset_mode+0x1b6>
 8008ae4:	e8df f005 	tbb	[pc, r5]
 8008ae8:	40352a13 	.word	0x40352a13
 8008aec:	6c61564b 	.word	0x6c61564b
 8008af0:	b4b4b4b4 	.word	0xb4b4b4b4
 8008af4:	b4b4b4b4 	.word	0xb4b4b4b4
 8008af8:	b4b48277 	.word	0xb4b48277
 8008afc:	b4b4b4b4 	.word	0xb4b4b4b4
 8008b00:	b4b4b4b4 	.word	0xb4b4b4b4
 8008b04:	b4b4b4b4 	.word	0xb4b4b4b4
 8008b08:	8db4b4b4 	.word	0x8db4b4b4
 8008b0c:	a79a      	.short	0xa79a

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 8008b0e:	f8cd a004 	str.w	sl, [sp, #4]
 8008b12:	f8cd 9000 	str.w	r9, [sp]
 8008b16:	9b06      	ldr	r3, [sp, #24]
 8008b18:	9a05      	ldr	r2, [sp, #20]
 8008b1a:	4641      	mov	r1, r8
 8008b1c:	4638      	mov	r0, r7
 8008b1e:	f000 fd4e 	bl	80095be <VL53L1_preset_mode_standard_ranging>

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 8008b22:	b910      	cbnz	r0, 8008b2a <VL53L1_set_preset_mode+0x90>

		pstatic->dss_config__target_total_rate_mcps =
 8008b24:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8008b28:	8326      	strh	r6, [r4, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 8008b2a:	2800      	cmp	r0, #0
 8008b2c:	f000 8093 	beq.w	8008c56 <VL53L1_set_preset_mode+0x1bc>
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 8008b30:	2800      	cmp	r0, #0
 8008b32:	f000 8097 	beq.w	8008c64 <VL53L1_set_preset_mode+0x1ca>
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
}
 8008b36:	b009      	add	sp, #36	; 0x24
 8008b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8008b3c:	f8cd a004 	str.w	sl, [sp, #4]
 8008b40:	f8cd 9000 	str.w	r9, [sp]
 8008b44:	9b06      	ldr	r3, [sp, #24]
 8008b46:	9a05      	ldr	r2, [sp, #20]
 8008b48:	4641      	mov	r1, r8
 8008b4a:	4638      	mov	r0, r7
 8008b4c:	f000 fddb 	bl	8009706 <VL53L1_preset_mode_standard_ranging_short_range>
		break;
 8008b50:	e7e7      	b.n	8008b22 <VL53L1_set_preset_mode+0x88>
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8008b52:	f8cd a004 	str.w	sl, [sp, #4]
 8008b56:	f8cd 9000 	str.w	r9, [sp]
 8008b5a:	9b06      	ldr	r3, [sp, #24]
 8008b5c:	9a05      	ldr	r2, [sp, #20]
 8008b5e:	4641      	mov	r1, r8
 8008b60:	4638      	mov	r0, r7
 8008b62:	f000 fdf1 	bl	8009748 <VL53L1_preset_mode_standard_ranging_long_range>
		break;
 8008b66:	e7dc      	b.n	8008b22 <VL53L1_set_preset_mode+0x88>
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8008b68:	f8cd a004 	str.w	sl, [sp, #4]
 8008b6c:	f8cd 9000 	str.w	r9, [sp]
 8008b70:	9b06      	ldr	r3, [sp, #24]
 8008b72:	9a05      	ldr	r2, [sp, #20]
 8008b74:	4641      	mov	r1, r8
 8008b76:	4638      	mov	r0, r7
 8008b78:	f000 fe07 	bl	800978a <VL53L1_preset_mode_standard_ranging_mm1_cal>
		break;
 8008b7c:	e7d1      	b.n	8008b22 <VL53L1_set_preset_mode+0x88>
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 8008b7e:	f8cd a004 	str.w	sl, [sp, #4]
 8008b82:	f8cd 9000 	str.w	r9, [sp]
 8008b86:	9b06      	ldr	r3, [sp, #24]
 8008b88:	9a05      	ldr	r2, [sp, #20]
 8008b8a:	4641      	mov	r1, r8
 8008b8c:	4638      	mov	r0, r7
 8008b8e:	f000 fe0f 	bl	80097b0 <VL53L1_preset_mode_standard_ranging_mm2_cal>
		break;
 8008b92:	e7c6      	b.n	8008b22 <VL53L1_set_preset_mode+0x88>
		status = VL53L1_preset_mode_timed_ranging(
 8008b94:	f8cd a004 	str.w	sl, [sp, #4]
 8008b98:	f8cd 9000 	str.w	r9, [sp]
 8008b9c:	9b06      	ldr	r3, [sp, #24]
 8008b9e:	9a05      	ldr	r2, [sp, #20]
 8008ba0:	4641      	mov	r1, r8
 8008ba2:	4638      	mov	r0, r7
 8008ba4:	f000 fe17 	bl	80097d6 <VL53L1_preset_mode_timed_ranging>
		break;
 8008ba8:	e7bb      	b.n	8008b22 <VL53L1_set_preset_mode+0x88>
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8008baa:	f8cd a004 	str.w	sl, [sp, #4]
 8008bae:	f8cd 9000 	str.w	r9, [sp]
 8008bb2:	9b06      	ldr	r3, [sp, #24]
 8008bb4:	9a05      	ldr	r2, [sp, #20]
 8008bb6:	4641      	mov	r1, r8
 8008bb8:	4638      	mov	r0, r7
 8008bba:	f000 fe2b 	bl	8009814 <VL53L1_preset_mode_timed_ranging_short_range>
		break;
 8008bbe:	e7b0      	b.n	8008b22 <VL53L1_set_preset_mode+0x88>
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8008bc0:	f8cd a004 	str.w	sl, [sp, #4]
 8008bc4:	f8cd 9000 	str.w	r9, [sp]
 8008bc8:	9b06      	ldr	r3, [sp, #24]
 8008bca:	9a05      	ldr	r2, [sp, #20]
 8008bcc:	4641      	mov	r1, r8
 8008bce:	4638      	mov	r0, r7
 8008bd0:	f000 fe40 	bl	8009854 <VL53L1_preset_mode_timed_ranging_long_range>
		break;
 8008bd4:	e7a5      	b.n	8008b22 <VL53L1_set_preset_mode+0x88>
		status = VL53L1_preset_mode_olt(
 8008bd6:	f8cd a004 	str.w	sl, [sp, #4]
 8008bda:	f8cd 9000 	str.w	r9, [sp]
 8008bde:	9b06      	ldr	r3, [sp, #24]
 8008be0:	9a05      	ldr	r2, [sp, #20]
 8008be2:	4641      	mov	r1, r8
 8008be4:	4638      	mov	r0, r7
 8008be6:	f000 feb2 	bl	800994e <VL53L1_preset_mode_olt>
		break;
 8008bea:	e79a      	b.n	8008b22 <VL53L1_set_preset_mode+0x88>
		status = VL53L1_preset_mode_singleshot_ranging(
 8008bec:	f8cd a004 	str.w	sl, [sp, #4]
 8008bf0:	f8cd 9000 	str.w	r9, [sp]
 8008bf4:	9b06      	ldr	r3, [sp, #24]
 8008bf6:	9a05      	ldr	r2, [sp, #20]
 8008bf8:	4641      	mov	r1, r8
 8008bfa:	4638      	mov	r0, r7
 8008bfc:	f000 fe8b 	bl	8009916 <VL53L1_preset_mode_singleshot_ranging>
		break;
 8008c00:	e78f      	b.n	8008b22 <VL53L1_set_preset_mode+0x88>
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 8008c02:	f8cd b008 	str.w	fp, [sp, #8]
 8008c06:	f8cd a004 	str.w	sl, [sp, #4]
 8008c0a:	f8cd 9000 	str.w	r9, [sp]
 8008c0e:	9b06      	ldr	r3, [sp, #24]
 8008c10:	9a05      	ldr	r2, [sp, #20]
 8008c12:	4641      	mov	r1, r8
 8008c14:	4638      	mov	r0, r7
 8008c16:	f000 fe52 	bl	80098be <VL53L1_preset_mode_low_power_auto_short_ranging>
		break;
 8008c1a:	e782      	b.n	8008b22 <VL53L1_set_preset_mode+0x88>
		status = VL53L1_preset_mode_low_power_auto_ranging(
 8008c1c:	f8cd b008 	str.w	fp, [sp, #8]
 8008c20:	f8cd a004 	str.w	sl, [sp, #4]
 8008c24:	f8cd 9000 	str.w	r9, [sp]
 8008c28:	9b06      	ldr	r3, [sp, #24]
 8008c2a:	9a05      	ldr	r2, [sp, #20]
 8008c2c:	4641      	mov	r1, r8
 8008c2e:	4638      	mov	r0, r7
 8008c30:	f000 fe2f 	bl	8009892 <VL53L1_preset_mode_low_power_auto_ranging>
		break;
 8008c34:	e775      	b.n	8008b22 <VL53L1_set_preset_mode+0x88>
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 8008c36:	f8cd b008 	str.w	fp, [sp, #8]
 8008c3a:	f8cd a004 	str.w	sl, [sp, #4]
 8008c3e:	f8cd 9000 	str.w	r9, [sp]
 8008c42:	9b06      	ldr	r3, [sp, #24]
 8008c44:	9a05      	ldr	r2, [sp, #20]
 8008c46:	4641      	mov	r1, r8
 8008c48:	4638      	mov	r0, r7
 8008c4a:	f000 fe4e 	bl	80098ea <VL53L1_preset_mode_low_power_auto_long_ranging>
		break;
 8008c4e:	e768      	b.n	8008b22 <VL53L1_set_preset_mode+0x88>
		status = VL53L1_ERROR_INVALID_PARAMS;
 8008c50:	f06f 0003 	mvn.w	r0, #3
 8008c54:	e765      	b.n	8008b22 <VL53L1_set_preset_mode+0x88>
		status =
 8008c56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c5a:	9907      	ldr	r1, [sp, #28]
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	f7ff fdce 	bl	80087fe <VL53L1_set_timeouts_us>
 8008c62:	e765      	b.n	8008b30 <VL53L1_set_preset_mode+0x96>
		status =
 8008c64:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008c66:	4620      	mov	r0, r4
 8008c68:	f7ff fdab 	bl	80087c2 <VL53L1_set_inter_measurement_period_ms>
 8008c6c:	e763      	b.n	8008b36 <VL53L1_set_preset_mode+0x9c>

08008c6e <VL53L1_get_lite_sigma_threshold>:
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 8008c6e:	f8b0 31a6 	ldrh.w	r3, [r0, #422]	; 0x1a6
	*plite_sigma =
 8008c72:	800b      	strh	r3, [r1, #0]

	LOG_FUNCTION_END(status);

	return status;

}
 8008c74:	2000      	movs	r0, #0
 8008c76:	4770      	bx	lr

08008c78 <VL53L1_set_lite_sigma_threshold>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 8008c78:	f8a0 11a6 	strh.w	r1, [r0, #422]	; 0x1a6

	LOG_FUNCTION_END(status);

	return status;

}
 8008c7c:	2000      	movs	r0, #0
 8008c7e:	4770      	bx	lr

08008c80 <VL53L1_get_lite_min_count_rate>:
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 8008c80:	f8b0 31a8 	ldrh.w	r3, [r0, #424]	; 0x1a8
	*plite_mincountrate =
 8008c84:	800b      	strh	r3, [r1, #0]

	LOG_FUNCTION_END(status);

	return status;

}
 8008c86:	2000      	movs	r0, #0
 8008c88:	4770      	bx	lr

08008c8a <VL53L1_set_lite_min_count_rate>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 8008c8a:	f8a0 11a8 	strh.w	r1, [r0, #424]	; 0x1a8

	LOG_FUNCTION_END(status);

	return status;

}
 8008c8e:	2000      	movs	r0, #0
 8008c90:	4770      	bx	lr

08008c92 <VL53L1_set_vhv_loopbound>:
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8008c92:	f890 3160 	ldrb.w	r3, [r0, #352]	; 0x160
 8008c96:	f003 0303 	and.w	r3, r3, #3
			(vhv_loopbound * 4);
 8008c9a:	0089      	lsls	r1, r1, #2
 8008c9c:	b2c9      	uxtb	r1, r1
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8008c9e:	440b      	add	r3, r1
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8008ca0:	f880 3160 	strb.w	r3, [r0, #352]	; 0x160

	LOG_FUNCTION_END(status);

	return status;

}
 8008ca4:	2000      	movs	r0, #0
 8008ca6:	4770      	bx	lr

08008ca8 <VL53L1_data_init>:
{
 8008ca8:	b530      	push	{r4, r5, lr}
 8008caa:	b085      	sub	sp, #20
 8008cac:	4604      	mov	r4, r0
 8008cae:	460d      	mov	r5, r1
	VL53L1_init_ll_driver_state(
 8008cb0:	2162      	movs	r1, #98	; 0x62
 8008cb2:	f000 fe68 	bl	8009986 <VL53L1_init_ll_driver_state>
	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	7023      	strb	r3, [r4, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8008cba:	2201      	movs	r2, #1
 8008cbc:	7062      	strb	r2, [r4, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8008cbe:	70a3      	strb	r3, [r4, #2]
	pdev->offset_calibration_mode =
 8008cc0:	70e2      	strb	r2, [r4, #3]
	pdev->offset_correction_mode  =
 8008cc2:	7122      	strb	r2, [r4, #4]
	pdev->phasecal_config_timeout_us  =  1000;
 8008cc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008cc8:	60a2      	str	r2, [r4, #8]
	pdev->mm_config_timeout_us        =  2000;
 8008cca:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008cce:	60e2      	str	r2, [r4, #12]
	pdev->range_config_timeout_us     = 13000;
 8008cd0:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8008cd4:	6122      	str	r2, [r4, #16]
	pdev->inter_measurement_period_ms =   100;
 8008cd6:	2264      	movs	r2, #100	; 0x64
 8008cd8:	6162      	str	r2, [r4, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8008cda:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8008cde:	8322      	strh	r2, [r4, #24]
	pdev->debug_mode                  =  0x00;
 8008ce0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	pdev->gain_cal.standard_ranging_gain_factor =
 8008ce4:	f240 73db 	movw	r3, #2011	; 0x7db
 8008ce8:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
	VL53L1_init_version(Dev);
 8008cec:	4620      	mov	r0, r4
 8008cee:	f000 fe3d 	bl	800996c <VL53L1_init_version>
	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8008cf2:	bb0d      	cbnz	r5, 8008d38 <VL53L1_data_init+0x90>
	status =
 8008cf4:	f504 7088 	add.w	r0, r4, #272	; 0x110
 8008cf8:	f000 fbb8 	bl	800946c <VL53L1_init_refspadchar_config_struct>
	status =
 8008cfc:	f504 7090 	add.w	r0, r4, #288	; 0x120
 8008d00:	f000 fbc6 	bl	8009490 <VL53L1_init_ssc_config_struct>
	status =
 8008d04:	f504 7196 	add.w	r1, r4, #300	; 0x12c
 8008d08:	f104 0042 	add.w	r0, r4, #66	; 0x42
 8008d0c:	f000 fbcf 	bl	80094ae <VL53L1_init_xtalk_config_struct>
	status =
 8008d10:	f504 70a2 	add.w	r0, r4, #324	; 0x144
 8008d14:	f000 fbf6 	bl	8009504 <VL53L1_init_offset_cal_config_struct>
	status =
 8008d18:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
 8008d1c:	f000 fc04 	bl	8009528 <VL53L1_init_tuning_parm_storage_struct>
	status = VL53L1_set_vhv_loopbound(Dev,
 8008d20:	2120      	movs	r1, #32
 8008d22:	4620      	mov	r0, r4
 8008d24:	f7ff ffb5 	bl	8008c92 <VL53L1_set_vhv_loopbound>
	if (status == VL53L1_ERROR_NONE)
 8008d28:	4605      	mov	r5, r0
 8008d2a:	b148      	cbz	r0, 8008d40 <VL53L1_data_init+0x98>
	VL53L1_low_power_auto_data_init(
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	f001 f8ae 	bl	8009e8e <VL53L1_low_power_auto_data_init>
}
 8008d32:	4628      	mov	r0, r5
 8008d34:	b005      	add	sp, #20
 8008d36:	bd30      	pop	{r4, r5, pc}
			status = VL53L1_read_p2p_data(Dev);
 8008d38:	4620      	mov	r0, r4
 8008d3a:	f7ff fe16 	bl	800896a <VL53L1_read_p2p_data>
 8008d3e:	e7d9      	b.n	8008cf4 <VL53L1_data_init+0x4c>
		status = VL53L1_set_preset_mode(
 8008d40:	7861      	ldrb	r1, [r4, #1]
 8008d42:	8b22      	ldrh	r2, [r4, #24]
 8008d44:	68e3      	ldr	r3, [r4, #12]
 8008d46:	6920      	ldr	r0, [r4, #16]
 8008d48:	6965      	ldr	r5, [r4, #20]
 8008d4a:	9502      	str	r5, [sp, #8]
 8008d4c:	9001      	str	r0, [sp, #4]
 8008d4e:	9300      	str	r3, [sp, #0]
 8008d50:	68a3      	ldr	r3, [r4, #8]
 8008d52:	4620      	mov	r0, r4
 8008d54:	f7ff fea1 	bl	8008a9a <VL53L1_set_preset_mode>
 8008d58:	4605      	mov	r5, r0
 8008d5a:	e7e7      	b.n	8008d2c <VL53L1_data_init+0x84>

08008d5c <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 8008d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d60:	b0c3      	sub	sp, #268	; 0x10c
 8008d62:	4604      	mov	r4, r0
 8008d64:	4616      	mov	r6, r2
	VL53L1_Error status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8008d66:	f500 70ac 	add.w	r0, r0, #344	; 0x158
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8008d6a:	f104 0b42 	add.w	fp, r4, #66	; 0x42
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8008d6e:	f504 73b2 	add.w	r3, r4, #356	; 0x164
 8008d72:	9300      	str	r3, [sp, #0]
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8008d74:	f504 73c2 	add.w	r3, r4, #388	; 0x184
 8008d78:	9301      	str	r3, [sp, #4]
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8008d7a:	f504 7ace 	add.w	sl, r4, #412	; 0x19c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8008d7e:	f504 79da 	add.w	r9, r4, #436	; 0x1b4
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8008d82:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
	uint16_t i2c_buffer_size_bytes      = 0;

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 8008d86:	70a1      	strb	r1, [r4, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 8008d88:	f994 31cc 	ldrsb.w	r3, [r4, #460]	; 0x1cc
 8008d8c:	f003 030f 	and.w	r3, r3, #15
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8008d90:	4319      	orrs	r1, r3
	psystem->system__mode_start =
 8008d92:	f884 11cc 	strb.w	r1, [r4, #460]	; 0x1cc
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8008d96:	f8b4 3142 	ldrh.w	r3, [r4, #322]	; 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8008d9a:	f8a4 317c 	strh.w	r3, [r4, #380]	; 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 8008d9e:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
 8008da2:	2bff      	cmp	r3, #255	; 0xff
 8008da4:	d019      	beq.n	8008dda <VL53L1_init_and_start_range+0x7e>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8008da6:	f8d4 32e4 	ldr.w	r3, [r4, #740]	; 0x2e4
 8008daa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008dae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008db6:	d014      	beq.n	8008de2 <VL53L1_init_and_start_range+0x86>
			device_config_level =
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8008db8:	f8d4 32e4 	ldr.w	r3, [r4, #740]	; 0x2e4
 8008dbc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008dc0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008dc4:	4a64      	ldr	r2, [pc, #400]	; (8008f58 <VL53L1_init_and_start_range+0x1fc>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d024      	beq.n	8008e14 <VL53L1_init_and_start_range+0xb8>

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 8008dca:	1e73      	subs	r3, r6, #1
 8008dcc:	2b05      	cmp	r3, #5
 8008dce:	d831      	bhi.n	8008e34 <VL53L1_init_and_start_range+0xd8>
 8008dd0:	e8df f003 	tbb	[pc, r3]
 8008dd4:	282a2c2e 	.word	0x282a2c2e
 8008dd8:	2632      	.short	0x2632
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	f884 32e6 	strb.w	r3, [r4, #742]	; 0x2e6
 8008de0:	e7e1      	b.n	8008da6 <VL53L1_init_and_start_range+0x4a>
			pdev->gen_cfg.system__interrupt_config_gpio;
 8008de2:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 8008de6:	f884 32e7 	strb.w	r3, [r4, #743]	; 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8008dea:	2320      	movs	r3, #32
 8008dec:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
		if ((pdev->dyn_cfg.system__sequence_config & (
 8008df0:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
 8008df4:	f013 0f60 	tst.w	r3, #96	; 0x60
 8008df8:	d108      	bne.n	8008e0c <VL53L1_init_and_start_range+0xb0>
				pdev->customer.mm_config__outer_offset_mm * 4;
 8008dfa:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
 8008dfe:	009b      	lsls	r3, r3, #2
			pdev->customer.algo__part_to_part_range_offset_mm =
 8008e00:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
		if (device_config_level <
 8008e04:	2e04      	cmp	r6, #4
 8008e06:	d8d7      	bhi.n	8008db8 <VL53L1_init_and_start_range+0x5c>
			device_config_level =
 8008e08:	2605      	movs	r6, #5
 8008e0a:	e7d5      	b.n	8008db8 <VL53L1_init_and_start_range+0x5c>
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8008e12:	e7f7      	b.n	8008e04 <VL53L1_init_and_start_range+0xa8>
			pdev->low_power_auto_data.saved_interrupt_config;
 8008e14:	f894 32e7 	ldrb.w	r3, [r4, #743]	; 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 8008e18:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8008e1c:	2606      	movs	r6, #6
 8008e1e:	e7d4      	b.n	8008dca <VL53L1_init_and_start_range+0x6e>
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 8008e20:	2701      	movs	r7, #1
 8008e22:	e00a      	b.n	8008e3a <VL53L1_init_and_start_range+0xde>
		break;
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
		break;
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 8008e24:	2724      	movs	r7, #36	; 0x24
		break;
 8008e26:	e008      	b.n	8008e3a <VL53L1_init_and_start_range+0xde>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 8008e28:	2744      	movs	r7, #68	; 0x44
		break;
 8008e2a:	e006      	b.n	8008e3a <VL53L1_init_and_start_range+0xde>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 8008e2c:	275a      	movs	r7, #90	; 0x5a
		break;
 8008e2e:	e004      	b.n	8008e3a <VL53L1_init_and_start_range+0xde>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 8008e30:	2771      	movs	r7, #113	; 0x71
		break;
 8008e32:	e002      	b.n	8008e3a <VL53L1_init_and_start_range+0xde>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 8008e34:	2783      	movs	r7, #131	; 0x83
		break;
 8008e36:	e000      	b.n	8008e3a <VL53L1_init_and_start_range+0xde>
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8008e38:	270d      	movs	r7, #13
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 8008e3a:	f1c7 0588 	rsb	r5, r7, #136	; 0x88
 8008e3e:	b2ad      	uxth	r5, r5
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 8008e40:	2300      	movs	r3, #0
	pbuffer = &buffer[0];
 8008e42:	aa02      	add	r2, sp, #8
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 8008e44:	e004      	b.n	8008e50 <VL53L1_init_and_start_range+0xf4>
		*pbuffer++ = 0;
 8008e46:	2100      	movs	r1, #0
 8008e48:	7011      	strb	r1, [r2, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	b29b      	uxth	r3, r3
		*pbuffer++ = 0;
 8008e4e:	3201      	adds	r2, #1
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 8008e50:	42ab      	cmp	r3, r5
 8008e52:	d3f8      	bcc.n	8008e46 <VL53L1_init_and_start_range+0xea>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 8008e54:	2e05      	cmp	r6, #5
 8008e56:	d835      	bhi.n	8008ec4 <VL53L1_init_and_start_range+0x168>
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008e58:	2000      	movs	r0, #0
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8008e5a:	2e04      	cmp	r6, #4
 8008e5c:	d901      	bls.n	8008e62 <VL53L1_init_and_start_range+0x106>
 8008e5e:	2800      	cmp	r0, #0
 8008e60:	d039      	beq.n	8008ed6 <VL53L1_init_and_start_range+0x17a>
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8008e62:	2e03      	cmp	r6, #3
 8008e64:	d901      	bls.n	8008e6a <VL53L1_init_and_start_range+0x10e>
 8008e66:	2800      	cmp	r0, #0
 8008e68:	d03f      	beq.n	8008eea <VL53L1_init_and_start_range+0x18e>
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8008e6a:	2e02      	cmp	r6, #2
 8008e6c:	d901      	bls.n	8008e72 <VL53L1_init_and_start_range+0x116>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	d045      	beq.n	8008efe <VL53L1_init_and_start_range+0x1a2>
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8008e72:	2e01      	cmp	r6, #1
 8008e74:	d901      	bls.n	8008e7a <VL53L1_init_and_start_range+0x11e>
 8008e76:	2800      	cmp	r0, #0
 8008e78:	d04b      	beq.n	8008f12 <VL53L1_init_and_start_range+0x1b6>
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8008e7a:	b1c6      	cbz	r6, 8008eae <VL53L1_init_and_start_range+0x152>
 8008e7c:	b9b8      	cbnz	r0, 8008eae <VL53L1_init_and_start_range+0x152>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8008e7e:	f1c7 0271 	rsb	r2, r7, #113	; 0x71
 8008e82:	b292      	uxth	r2, r2
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 8008e84:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
 8008e88:	f013 0f20 	tst.w	r3, #32
 8008e8c:	d009      	beq.n	8008ea2 <VL53L1_init_and_start_range+0x146>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 8008e8e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8008e92:	f043 0101 	orr.w	r1, r3, #1
 8008e96:	f884 11b4 	strb.w	r1, [r4, #436]	; 0x1b4
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 8008e9a:	f884 11c0 	strb.w	r1, [r4, #448]	; 0x1c0
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 8008e9e:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
		}
		status =
 8008ea2:	ab02      	add	r3, sp, #8
 8008ea4:	441a      	add	r2, r3
 8008ea6:	2112      	movs	r1, #18
 8008ea8:	4648      	mov	r0, r9
 8008eaa:	f001 fabe 	bl	800a42a <VL53L1_i2c_encode_dynamic_config>
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (status == VL53L1_ERROR_NONE) {
 8008eae:	2800      	cmp	r0, #0
 8008eb0:	d039      	beq.n	8008f26 <VL53L1_init_and_start_range+0x1ca>
				&buffer[i2c_buffer_offset_bytes]);
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 8008eb2:	2800      	cmp	r0, #0
 8008eb4:	d041      	beq.n	8008f3a <VL53L1_init_and_start_range+0x1de>
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 8008eb6:	2800      	cmp	r0, #0
 8008eb8:	d046      	beq.n	8008f48 <VL53L1_init_and_start_range+0x1ec>
		status = VL53L1_update_ll_driver_rd_state(Dev);

	if (status == VL53L1_ERROR_NONE)
 8008eba:	2800      	cmp	r0, #0
 8008ebc:	d048      	beq.n	8008f50 <VL53L1_init_and_start_range+0x1f4>
		status = VL53L1_update_ll_driver_cfg_state(Dev);

	LOG_FUNCTION_END(status);

	return status;
}
 8008ebe:	b043      	add	sp, #268	; 0x10c
 8008ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		i2c_buffer_offset_bytes = \
 8008ec4:	f1c7 0201 	rsb	r2, r7, #1
		status =
 8008ec8:	ab02      	add	r3, sp, #8
 8008eca:	fa13 f282 	uxtah	r2, r3, r2
 8008ece:	210b      	movs	r1, #11
 8008ed0:	f001 f894 	bl	8009ffc <VL53L1_i2c_encode_static_nvm_managed>
 8008ed4:	e7c1      	b.n	8008e5a <VL53L1_init_and_start_range+0xfe>
		i2c_buffer_offset_bytes = \
 8008ed6:	f1c7 020d 	rsb	r2, r7, #13
		status =
 8008eda:	ab02      	add	r3, sp, #8
 8008edc:	fa13 f282 	uxtah	r2, r3, r2
 8008ee0:	2117      	movs	r1, #23
 8008ee2:	4658      	mov	r0, fp
 8008ee4:	f001 f8f8 	bl	800a0d8 <VL53L1_i2c_encode_customer_nvm_managed>
 8008ee8:	e7bb      	b.n	8008e62 <VL53L1_init_and_start_range+0x106>
		i2c_buffer_offset_bytes = \
 8008eea:	f1c7 0224 	rsb	r2, r7, #36	; 0x24
		status =
 8008eee:	ab02      	add	r3, sp, #8
 8008ef0:	fa13 f282 	uxtah	r2, r3, r2
 8008ef4:	2120      	movs	r1, #32
 8008ef6:	9800      	ldr	r0, [sp, #0]
 8008ef8:	f001 f9a1 	bl	800a23e <VL53L1_i2c_encode_static_config>
 8008efc:	e7b5      	b.n	8008e6a <VL53L1_init_and_start_range+0x10e>
		i2c_buffer_offset_bytes =
 8008efe:	f1c7 0244 	rsb	r2, r7, #68	; 0x44
		status =
 8008f02:	ab02      	add	r3, sp, #8
 8008f04:	fa13 f282 	uxtah	r2, r3, r2
 8008f08:	2116      	movs	r1, #22
 8008f0a:	9801      	ldr	r0, [sp, #4]
 8008f0c:	f001 fa05 	bl	800a31a <VL53L1_i2c_encode_general_config>
 8008f10:	e7af      	b.n	8008e72 <VL53L1_init_and_start_range+0x116>
		i2c_buffer_offset_bytes = \
 8008f12:	f1c7 025a 	rsb	r2, r7, #90	; 0x5a
		status =
 8008f16:	ab02      	add	r3, sp, #8
 8008f18:	fa13 f282 	uxtah	r2, r3, r2
 8008f1c:	2117      	movs	r1, #23
 8008f1e:	4650      	mov	r0, sl
 8008f20:	f001 fa40 	bl	800a3a4 <VL53L1_i2c_encode_timing_config>
 8008f24:	e7a9      	b.n	8008e7a <VL53L1_init_and_start_range+0x11e>
		i2c_buffer_offset_bytes = \
 8008f26:	f1c7 0283 	rsb	r2, r7, #131	; 0x83
		status =
 8008f2a:	ab02      	add	r3, sp, #8
 8008f2c:	fa13 f282 	uxtah	r2, r3, r2
 8008f30:	2105      	movs	r1, #5
 8008f32:	4640      	mov	r0, r8
 8008f34:	f001 fabb 	bl	800a4ae <VL53L1_i2c_encode_system_control>
 8008f38:	e7bb      	b.n	8008eb2 <VL53L1_init_and_start_range+0x156>
		status =
 8008f3a:	462b      	mov	r3, r5
 8008f3c:	aa02      	add	r2, sp, #8
 8008f3e:	4639      	mov	r1, r7
 8008f40:	4620      	mov	r0, r4
 8008f42:	f006 ff2f 	bl	800fda4 <VL53L1_WriteMulti>
 8008f46:	e7b6      	b.n	8008eb6 <VL53L1_init_and_start_range+0x15a>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 8008f48:	4620      	mov	r0, r4
 8008f4a:	f000 fd2f 	bl	80099ac <VL53L1_update_ll_driver_rd_state>
 8008f4e:	e7b4      	b.n	8008eba <VL53L1_init_and_start_range+0x15e>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 8008f50:	4620      	mov	r0, r4
 8008f52:	f000 fdbc 	bl	8009ace <VL53L1_update_ll_driver_cfg_state>
 8008f56:	e7b2      	b.n	8008ebe <VL53L1_init_and_start_range+0x162>
 8008f58:	00010100 	.word	0x00010100

08008f5c <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 8008f5c:	b538      	push	{r3, r4, r5, lr}
 8008f5e:	4604      	mov	r4, r0
			VL53L1DevStructGetLLDriverHandle(Dev);

	/* Merge ABORT mode with mode_start */

	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8008f60:	f990 31cc 	ldrsb.w	r3, [r0, #460]	; 0x1cc
 8008f64:	f003 030f 	and.w	r3, r3, #15
 8008f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	pdev->sys_ctrl.system__mode_start =
 8008f6c:	f880 31cc 	strb.w	r3, [r0, #460]	; 0x1cc
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 8008f70:	f500 71e4 	add.w	r1, r0, #456	; 0x1c8
 8008f74:	f001 fab4 	bl	800a4e0 <VL53L1_set_system_control>
 8008f78:	4605      	mov	r5, r0
				Dev,
				&pdev->sys_ctrl);

	/* Abort bit is auto clear so clear register group structure to match */
	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);
 8008f7a:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
 8008f7e:	f003 030f 	and.w	r3, r3, #15
	pdev->sys_ctrl.system__mode_start =
 8008f82:	f884 31cc 	strb.w	r3, [r4, #460]	; 0x1cc

	/* reset zone dynamic info */
	VL53L1_init_ll_driver_state(
 8008f86:	2103      	movs	r1, #3
 8008f88:	4620      	mov	r0, r4
 8008f8a:	f000 fcfc 	bl	8009986 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* reset low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 8008f8e:	f894 32e5 	ldrb.w	r3, [r4, #741]	; 0x2e5
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d001      	beq.n	8008f9a <VL53L1_stop_range+0x3e>
		VL53L1_low_power_auto_data_stop_range(Dev);

	return status;
}
 8008f96:	4628      	mov	r0, r5
 8008f98:	bd38      	pop	{r3, r4, r5, pc}
		VL53L1_low_power_auto_data_stop_range(Dev);
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	f000 ff8d 	bl	8009eba <VL53L1_low_power_auto_data_stop_range>
 8008fa0:	e7f9      	b.n	8008f96 <VL53L1_stop_range+0x3a>

08008fa2 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 8008fa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fa4:	b0c1      	sub	sp, #260	; 0x104
 8008fa6:	460c      	mov	r4, r1
	VL53L1_Error status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 8008fa8:	f500 75e7 	add.w	r5, r0, #462	; 0x1ce
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 8008fac:	f500 7722 	add.w	r7, r0, #648	; 0x288
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 8008fb0:	f500 762b 	add.w	r6, r0, #684	; 0x2ac

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 8008fb4:	2901      	cmp	r1, #1
 8008fb6:	d010      	beq.n	8008fda <VL53L1_get_measurement_results+0x38>
 8008fb8:	2902      	cmp	r1, #2
 8008fba:	d10c      	bne.n	8008fd6 <VL53L1_get_measurement_results+0x34>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 8008fbc:	2386      	movs	r3, #134	; 0x86
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status =
 8008fbe:	466a      	mov	r2, sp
 8008fc0:	2188      	movs	r1, #136	; 0x88
 8008fc2:	f006 ff0d 	bl	800fde0 <VL53L1_ReadMulti>
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 8008fc6:	2c01      	cmp	r4, #1
 8008fc8:	d900      	bls.n	8008fcc <VL53L1_get_measurement_results+0x2a>
 8008fca:	b140      	cbz	r0, 8008fde <VL53L1_get_measurement_results+0x3c>
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 8008fcc:	b104      	cbz	r4, 8008fd0 <VL53L1_get_measurement_results+0x2e>
 8008fce:	b168      	cbz	r0, 8008fec <VL53L1_get_measurement_results+0x4a>
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 8008fd0:	b190      	cbz	r0, 8008ff8 <VL53L1_get_measurement_results+0x56>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8008fd2:	b041      	add	sp, #260	; 0x104
 8008fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		i2c_buffer_size_bytes =
 8008fd6:	232c      	movs	r3, #44	; 0x2c
		break;
 8008fd8:	e7f1      	b.n	8008fbe <VL53L1_get_measurement_results+0x1c>
		i2c_buffer_size_bytes =
 8008fda:	234d      	movs	r3, #77	; 0x4d
 8008fdc:	e7ef      	b.n	8008fbe <VL53L1_get_measurement_results+0x1c>
		status =
 8008fde:	4632      	mov	r2, r6
 8008fe0:	f10d 014e 	add.w	r1, sp, #78	; 0x4e
 8008fe4:	2038      	movs	r0, #56	; 0x38
 8008fe6:	f001 fb5a 	bl	800a69e <VL53L1_i2c_decode_debug_results>
 8008fea:	e7ef      	b.n	8008fcc <VL53L1_get_measurement_results+0x2a>
		status =
 8008fec:	463a      	mov	r2, r7
 8008fee:	a90b      	add	r1, sp, #44	; 0x2c
 8008ff0:	2021      	movs	r0, #33	; 0x21
 8008ff2:	f001 fb19 	bl	800a628 <VL53L1_i2c_decode_core_results>
 8008ff6:	e7eb      	b.n	8008fd0 <VL53L1_get_measurement_results+0x2e>
		status =
 8008ff8:	462a      	mov	r2, r5
 8008ffa:	4669      	mov	r1, sp
 8008ffc:	202c      	movs	r0, #44	; 0x2c
 8008ffe:	f001 fa84 	bl	800a50a <VL53L1_i2c_decode_system_results>
 8009002:	e7e6      	b.n	8008fd2 <VL53L1_get_measurement_results+0x30>

08009004 <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 8009004:	b508      	push	{r3, lr}
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_init_and_start_range(
 8009006:	2203      	movs	r2, #3
 8009008:	f7ff fea8 	bl	8008d5c <VL53L1_init_and_start_range>
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
}
 800900c:	bd08      	pop	{r3, pc}

0800900e <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 800900e:	b470      	push	{r4, r5, r6}

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 8009010:	78cc      	ldrb	r4, [r1, #3]
 8009012:	709c      	strb	r4, [r3, #2]

	pdata = &(presults->data[0]);
 8009014:	1d1c      	adds	r4, r3, #4

	for (i = 0 ; i < 2 ; i++) {
 8009016:	2500      	movs	r5, #0
 8009018:	e02e      	b.n	8009078 <VL53L1_copy_sys_and_core_results_to_range_results+0x6a>
		pdata->time_stamp   = 0;

		if ((psys->result__stream_count == 0) &&
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800901a:	2613      	movs	r6, #19
 800901c:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
 8009020:	e03b      	b.n	800909a <VL53L1_copy_sys_and_core_results_to_range_results+0x8c>

		switch (i) {

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 8009022:	788e      	ldrb	r6, [r1, #2]
 8009024:	2e07      	cmp	r6, #7
 8009026:	d050      	beq.n	80090ca <VL53L1_copy_sys_and_core_results_to_range_results+0xbc>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 8009028:	2e08      	cmp	r6, #8
 800902a:	d051      	beq.n	80090d0 <VL53L1_copy_sys_and_core_results_to_range_results+0xc2>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 800902c:	888e      	ldrh	r6, [r1, #4]
				pdata->actual_effective_spads =
 800902e:	8226      	strh	r6, [r4, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 8009030:	8a0e      	ldrh	r6, [r1, #16]
			pdata->peak_signal_count_rate_mcps =
 8009032:	85a6      	strh	r6, [r4, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8009034:	8ace      	ldrh	r6, [r1, #22]
			pdata->avg_signal_count_rate_mcps =
 8009036:	85e6      	strh	r6, [r4, #46]	; 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8009038:	890e      	ldrh	r6, [r1, #8]
			pdata->ambient_count_rate_mcps =
 800903a:	8626      	strh	r6, [r4, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 800903c:	894e      	ldrh	r6, [r1, #10]
 800903e:	0176      	lsls	r6, r6, #5
			if (tmpu32 > 0xFFFF) {
 8009040:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 8009044:	d301      	bcc.n	800904a <VL53L1_copy_sys_and_core_results_to_range_results+0x3c>
				tmpu32 = 0xFFFF;
 8009046:	f64f 76ff 	movw	r6, #65535	; 0xffff
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800904a:	8726      	strh	r6, [r4, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 800904c:	898e      	ldrh	r6, [r1, #12]
			pdata->median_phase =
 800904e:	8766      	strh	r6, [r4, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 8009050:	89ce      	ldrh	r6, [r1, #14]

			/* apply correction gain */
			range_mm *= gain_factor;
 8009052:	fb00 f606 	mul.w	r6, r0, r6
			range_mm += 0x0400;
			range_mm /= 0x0800;
 8009056:	f516 6680 	adds.w	r6, r6, #1024	; 0x400
 800905a:	d43c      	bmi.n	80090d6 <VL53L1_copy_sys_and_core_results_to_range_results+0xc8>

			pdata->median_range_mm = (int16_t)range_mm;
 800905c:	f346 26cf 	sbfx	r6, r6, #11, #16
 8009060:	87a6      	strh	r6, [r4, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 8009062:	6856      	ldr	r6, [r2, #4]
			pdata->ranging_total_events =
 8009064:	6266      	str	r6, [r4, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 8009066:	6896      	ldr	r6, [r2, #8]
			pdata->signal_total_events =
 8009068:	62a6      	str	r6, [r4, #40]	; 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 800906a:	68d6      	ldr	r6, [r2, #12]
			pdata->total_periods_elapsed =
 800906c:	6166      	str	r6, [r4, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 800906e:	6816      	ldr	r6, [r2, #0]
			pdata->ambient_window_events =
 8009070:	6226      	str	r6, [r4, #32]
//				pcore->result_core__ambient_window_events_sd1;

			break;
		}

		pdata++;
 8009072:	3440      	adds	r4, #64	; 0x40
	for (i = 0 ; i < 2 ; i++) {
 8009074:	3501      	adds	r5, #1
 8009076:	b2ed      	uxtb	r5, r5
 8009078:	2d01      	cmp	r5, #1
 800907a:	d82f      	bhi.n	80090dc <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
		pdata->range_id     = i;
 800907c:	7025      	strb	r5, [r4, #0]
		pdata->time_stamp   = 0;
 800907e:	2600      	movs	r6, #0
 8009080:	6066      	str	r6, [r4, #4]
		if ((psys->result__stream_count == 0) &&
 8009082:	78ce      	ldrb	r6, [r1, #3]
 8009084:	b926      	cbnz	r6, 8009090 <VL53L1_copy_sys_and_core_results_to_range_results+0x82>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 8009086:	784e      	ldrb	r6, [r1, #1]
		if ((psys->result__stream_count == 0) &&
 8009088:	f006 061f 	and.w	r6, r6, #31
 800908c:	2e09      	cmp	r6, #9
 800908e:	d0c4      	beq.n	800901a <VL53L1_copy_sys_and_core_results_to_range_results+0xc>
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 8009090:	784e      	ldrb	r6, [r1, #1]
 8009092:	f006 061f 	and.w	r6, r6, #31
			pdata->range_status =
 8009096:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
		switch (i) {
 800909a:	2d00      	cmp	r5, #0
 800909c:	d0c1      	beq.n	8009022 <VL53L1_copy_sys_and_core_results_to_range_results+0x14>
 800909e:	2d01      	cmp	r5, #1
 80090a0:	d1e7      	bne.n	8009072 <VL53L1_copy_sys_and_core_results_to_range_results+0x64>
				psys->result__dss_actual_effective_spads_sd1;
 80090a2:	8b0e      	ldrh	r6, [r1, #24]
			pdata->actual_effective_spads =
 80090a4:	8226      	strh	r6, [r4, #16]
				psys->result__peak_signal_count_rate_mcps_sd1;
 80090a6:	8b4e      	ldrh	r6, [r1, #26]
			pdata->peak_signal_count_rate_mcps =
 80090a8:	85a6      	strh	r6, [r4, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
 80090aa:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80090ae:	85e6      	strh	r6, [r4, #46]	; 0x2e
				psys->result__ambient_count_rate_mcps_sd1;
 80090b0:	8b8e      	ldrh	r6, [r1, #28]
			pdata->ambient_count_rate_mcps =
 80090b2:	8626      	strh	r6, [r4, #48]	; 0x30
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 80090b4:	8bce      	ldrh	r6, [r1, #30]
 80090b6:	0176      	lsls	r6, r6, #5
			if (tmpu32 > 0xFFFF) {
 80090b8:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 80090bc:	d301      	bcc.n	80090c2 <VL53L1_copy_sys_and_core_results_to_range_results+0xb4>
				tmpu32 = 0xFFFF;
 80090be:	f64f 76ff 	movw	r6, #65535	; 0xffff
			pdata->sigma_mm = (uint16_t)tmpu32;
 80090c2:	8726      	strh	r6, [r4, #56]	; 0x38
				psys->result__phase_sd1;
 80090c4:	8c0e      	ldrh	r6, [r1, #32]
			pdata->median_phase =
 80090c6:	8766      	strh	r6, [r4, #58]	; 0x3a
			break;
 80090c8:	e7d3      	b.n	8009072 <VL53L1_copy_sys_and_core_results_to_range_results+0x64>
					psys->result__mm_inner_actual_effective_spads_sd0;
 80090ca:	8a4e      	ldrh	r6, [r1, #18]
				pdata->actual_effective_spads =
 80090cc:	8226      	strh	r6, [r4, #16]
 80090ce:	e7af      	b.n	8009030 <VL53L1_copy_sys_and_core_results_to_range_results+0x22>
						psys->result__mm_outer_actual_effective_spads_sd0;
 80090d0:	8a8e      	ldrh	r6, [r1, #20]
				pdata->actual_effective_spads =
 80090d2:	8226      	strh	r6, [r4, #16]
 80090d4:	e7ac      	b.n	8009030 <VL53L1_copy_sys_and_core_results_to_range_results+0x22>
			range_mm /= 0x0800;
 80090d6:	f206 76ff 	addw	r6, r6, #2047	; 0x7ff
 80090da:	e7bf      	b.n	800905c <VL53L1_copy_sys_and_core_results_to_range_results+0x4e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 80090dc:	2200      	movs	r2, #0
 80090de:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 80090e0:	784a      	ldrb	r2, [r1, #1]
 80090e2:	f002 021f 	and.w	r2, r2, #31
 80090e6:	1e51      	subs	r1, r2, #1
 80090e8:	2910      	cmp	r1, #16
 80090ea:	d80e      	bhi.n	800910a <VL53L1_copy_sys_and_core_results_to_range_results+0xfc>
 80090ec:	e8df f001 	tbb	[pc, r1]
 80090f0:	0d090909 	.word	0x0d090909
 80090f4:	0d0d0d0d 	.word	0x0d0d0d0d
 80090f8:	0d0d0d0d 	.word	0x0d0d0d0d
 80090fc:	0d0d0d09 	.word	0x0d0d0d09
 8009100:	09          	.byte	0x09
 8009101:	00          	.byte	0x00
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8009102:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 8009104:	2200      	movs	r2, #0
 8009106:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	break;

	}

	LOG_FUNCTION_END(0);
}
 800910a:	bc70      	pop	{r4, r5, r6}
 800910c:	4770      	bx	lr

0800910e <VL53L1_get_device_results>:
{
 800910e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009110:	4604      	mov	r4, r0
 8009112:	4617      	mov	r7, r2
	VL53L1_range_results_t   *presults = &(pres->range_results);
 8009114:	f500 763d 	add.w	r6, r0, #756	; 0x2f4
		status = VL53L1_get_measurement_results(
 8009118:	f7ff ff43 	bl	8008fa2 <VL53L1_get_measurement_results>
	if (status == VL53L1_ERROR_NONE)
 800911c:	4605      	mov	r5, r0
 800911e:	b198      	cbz	r0, 8009148 <VL53L1_get_device_results+0x3a>
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 8009120:	f894 32e5 	ldrb.w	r3, [r4, #741]	; 0x2e5
 8009124:	2b01      	cmp	r3, #1
 8009126:	d019      	beq.n	800915c <VL53L1_get_device_results+0x4e>
	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8009128:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800912c:	f884 32f4 	strb.w	r3, [r4, #756]	; 0x2f4
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8009130:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8009134:	f884 32f5 	strb.w	r3, [r4, #757]	; 0x2f5
	memcpy(
 8009138:	2284      	movs	r2, #132	; 0x84
 800913a:	4631      	mov	r1, r6
 800913c:	4638      	mov	r0, r7
 800913e:	f007 ff35 	bl	8010fac <memcpy>
	if (status == VL53L1_ERROR_NONE)
 8009142:	b35d      	cbz	r5, 800919c <VL53L1_get_device_results+0x8e>
}
 8009144:	4628      	mov	r0, r5
 8009146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		VL53L1_copy_sys_and_core_results_to_range_results(
 8009148:	4633      	mov	r3, r6
 800914a:	f504 7222 	add.w	r2, r4, #648	; 0x288
 800914e:	f504 71e7 	add.w	r1, r4, #462	; 0x1ce
 8009152:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
 8009156:	f7ff ff5a 	bl	800900e <VL53L1_copy_sys_and_core_results_to_range_results>
 800915a:	e7e1      	b.n	8009120 <VL53L1_get_device_results+0x12>
		if ((status == VL53L1_ERROR_NONE) &&
 800915c:	b915      	cbnz	r5, 8009164 <VL53L1_get_device_results+0x56>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800915e:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 8009162:	b17b      	cbz	r3, 8009184 <VL53L1_get_device_results+0x76>
		} else if ((status == VL53L1_ERROR_NONE) &&
 8009164:	b91d      	cbnz	r5, 800916e <VL53L1_get_device_results+0x60>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8009166:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 800916a:	2b01      	cmp	r3, #1
 800916c:	d012      	beq.n	8009194 <VL53L1_get_device_results+0x86>
		if ((pdev->low_power_auto_data.low_power_auto_range_count != 0xFF) &&
 800916e:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
 8009172:	2bff      	cmp	r3, #255	; 0xff
 8009174:	d0d8      	beq.n	8009128 <VL53L1_get_device_results+0x1a>
 8009176:	2d00      	cmp	r5, #0
 8009178:	d1d6      	bne.n	8009128 <VL53L1_get_device_results+0x1a>
			status = VL53L1_low_power_auto_update_DSS(
 800917a:	4620      	mov	r0, r4
 800917c:	f000 fee3 	bl	8009f46 <VL53L1_low_power_auto_update_DSS>
 8009180:	4605      	mov	r5, r0
 8009182:	e7d1      	b.n	8009128 <VL53L1_get_device_results+0x1a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 8009184:	4620      	mov	r0, r4
 8009186:	f000 febe 	bl	8009f06 <VL53L1_low_power_auto_setup_manual_calibration>
 800918a:	4605      	mov	r5, r0
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 800918c:	2301      	movs	r3, #1
 800918e:	f884 32e6 	strb.w	r3, [r4, #742]	; 0x2e6
 8009192:	e7ec      	b.n	800916e <VL53L1_get_device_results+0x60>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 8009194:	2302      	movs	r3, #2
 8009196:	f884 32e6 	strb.w	r3, [r4, #742]	; 0x2e6
 800919a:	e7e8      	b.n	800916e <VL53L1_get_device_results+0x60>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 800919c:	4620      	mov	r0, r4
 800919e:	f000 fc65 	bl	8009a6c <VL53L1_check_ll_driver_rd_state>
 80091a2:	4605      	mov	r5, r0
 80091a4:	e7ce      	b.n	8009144 <VL53L1_get_device_results+0x36>

080091a6 <VL53L1_get_tuning_parm>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 80091a6:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 80091aa:	2938      	cmp	r1, #56	; 0x38
 80091ac:	f200 8158 	bhi.w	8009460 <VL53L1_get_tuning_parm+0x2ba>
 80091b0:	e8df f011 	tbh	[pc, r1, lsl #1]
 80091b4:	003e0039 	.word	0x003e0039
 80091b8:	00480043 	.word	0x00480043
 80091bc:	0052004d 	.word	0x0052004d
 80091c0:	005c0057 	.word	0x005c0057
 80091c4:	00660061 	.word	0x00660061
 80091c8:	0070006b 	.word	0x0070006b
 80091cc:	007a0075 	.word	0x007a0075
 80091d0:	0084007f 	.word	0x0084007f
 80091d4:	008e0089 	.word	0x008e0089
 80091d8:	00980093 	.word	0x00980093
 80091dc:	00a2009d 	.word	0x00a2009d
 80091e0:	00ac00a7 	.word	0x00ac00a7
 80091e4:	00b600b1 	.word	0x00b600b1
 80091e8:	00c000bb 	.word	0x00c000bb
 80091ec:	00ca00c5 	.word	0x00ca00c5
 80091f0:	00d400cf 	.word	0x00d400cf
 80091f4:	00de00d9 	.word	0x00de00d9
 80091f8:	00e800e3 	.word	0x00e800e3
 80091fc:	00f200ed 	.word	0x00f200ed
 8009200:	00fc00f7 	.word	0x00fc00f7
 8009204:	01060101 	.word	0x01060101
 8009208:	0110010b 	.word	0x0110010b
 800920c:	011a0115 	.word	0x011a0115
 8009210:	0124011f 	.word	0x0124011f
 8009214:	012e0129 	.word	0x012e0129
 8009218:	01380133 	.word	0x01380133
 800921c:	0142013d 	.word	0x0142013d
 8009220:	014c0147 	.word	0x014c0147
 8009224:	0151      	.short	0x0151

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8009226:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
		*ptuning_parm_value =
 800922a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800922c:	2000      	movs	r0, #0
	break;
 800922e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8009230:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
		*ptuning_parm_value =
 8009234:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009236:	2000      	movs	r0, #0
	break;
 8009238:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 800923a:	f8b0 30a8 	ldrh.w	r3, [r0, #168]	; 0xa8
		*ptuning_parm_value =
 800923e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009240:	2000      	movs	r0, #0
	break;
 8009242:	4770      	bx	lr
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8009244:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
		*ptuning_parm_value =
 8009248:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800924a:	2000      	movs	r0, #0
	break;
 800924c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 800924e:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
		*ptuning_parm_value =
 8009252:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009254:	2000      	movs	r0, #0
	break;
 8009256:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8009258:	f8b0 30b2 	ldrh.w	r3, [r0, #178]	; 0xb2
		*ptuning_parm_value =
 800925c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800925e:	2000      	movs	r0, #0
	break;
 8009260:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8009262:	f8b0 309c 	ldrh.w	r3, [r0, #156]	; 0x9c
		*ptuning_parm_value =
 8009266:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009268:	2000      	movs	r0, #0
	break;
 800926a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 800926c:	f890 30b4 	ldrb.w	r3, [r0, #180]	; 0xb4
		*ptuning_parm_value =
 8009270:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009272:	2000      	movs	r0, #0
	break;
 8009274:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8009276:	f8b0 30b6 	ldrh.w	r3, [r0, #182]	; 0xb6
		*ptuning_parm_value =
 800927a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800927c:	2000      	movs	r0, #0
	break;
 800927e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8009280:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
		*ptuning_parm_value =
 8009284:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009286:	2000      	movs	r0, #0
	break;
 8009288:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 800928a:	f8b0 30ba 	ldrh.w	r3, [r0, #186]	; 0xba
		*ptuning_parm_value =
 800928e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009290:	2000      	movs	r0, #0
	break;
 8009292:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 8009294:	f8b0 30bc 	ldrh.w	r3, [r0, #188]	; 0xbc
		*ptuning_parm_value =
 8009298:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800929a:	2000      	movs	r0, #0
	break;
 800929c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 800929e:	f8b0 30be 	ldrh.w	r3, [r0, #190]	; 0xbe
		*ptuning_parm_value =
 80092a2:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80092a4:	2000      	movs	r0, #0
	break;
 80092a6:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 80092a8:	f8b0 30c0 	ldrh.w	r3, [r0, #192]	; 0xc0
		*ptuning_parm_value =
 80092ac:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80092ae:	2000      	movs	r0, #0
	break;
 80092b0:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 80092b2:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
		*ptuning_parm_value =
 80092b6:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80092b8:	2000      	movs	r0, #0
	break;
 80092ba:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 80092bc:	f890 30c3 	ldrb.w	r3, [r0, #195]	; 0xc3
		*ptuning_parm_value =
 80092c0:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80092c2:	2000      	movs	r0, #0
	break;
 80092c4:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 80092c6:	f890 30c4 	ldrb.w	r3, [r0, #196]	; 0xc4
		*ptuning_parm_value =
 80092ca:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80092cc:	2000      	movs	r0, #0
	break;
 80092ce:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 80092d0:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
		*ptuning_parm_value =
 80092d4:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80092d6:	2000      	movs	r0, #0
	break;
 80092d8:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 80092da:	f890 30c5 	ldrb.w	r3, [r0, #197]	; 0xc5
		*ptuning_parm_value =
 80092de:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80092e0:	2000      	movs	r0, #0
	break;
 80092e2:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 80092e4:	f890 30c7 	ldrb.w	r3, [r0, #199]	; 0xc7
		*ptuning_parm_value =
 80092e8:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80092ea:	2000      	movs	r0, #0
	break;
 80092ec:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 80092ee:	f890 30c8 	ldrb.w	r3, [r0, #200]	; 0xc8
		*ptuning_parm_value =
 80092f2:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80092f4:	2000      	movs	r0, #0
	break;
 80092f6:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 80092f8:	f9b0 313e 	ldrsh.w	r3, [r0, #318]	; 0x13e
		*ptuning_parm_value =
 80092fc:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80092fe:	2000      	movs	r0, #0
	break;
 8009300:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8009302:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
		*ptuning_parm_value =
 8009306:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009308:	2000      	movs	r0, #0
	break;
 800930a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 800930c:	f890 30ab 	ldrb.w	r3, [r0, #171]	; 0xab
		*ptuning_parm_value =
 8009310:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009312:	2000      	movs	r0, #0
	break;
 8009314:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8009316:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
		*ptuning_parm_value =
 800931a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800931c:	2000      	movs	r0, #0
	break;
 800931e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8009320:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
		*ptuning_parm_value =
 8009324:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009326:	2000      	movs	r0, #0
	break;
 8009328:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 800932a:	f890 30ae 	ldrb.w	r3, [r0, #174]	; 0xae
		*ptuning_parm_value =
 800932e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009330:	2000      	movs	r0, #0
	break;
 8009332:	4770      	bx	lr
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8009334:	f890 30af 	ldrb.w	r3, [r0, #175]	; 0xaf
		*ptuning_parm_value =
 8009338:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800933a:	2000      	movs	r0, #0
	break;
 800933c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 800933e:	f890 30c6 	ldrb.w	r3, [r0, #198]	; 0xc6
		*ptuning_parm_value =
 8009342:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009344:	2000      	movs	r0, #0
	break;
 8009346:	4770      	bx	lr
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8009348:	f890 3160 	ldrb.w	r3, [r0, #352]	; 0x160
		*ptuning_parm_value =
 800934c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800934e:	2000      	movs	r0, #0
	break;
 8009350:	4770      	bx	lr
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 8009352:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
		*ptuning_parm_value =
 8009356:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009358:	2000      	movs	r0, #0
	break;
 800935a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 800935c:	f890 3111 	ldrb.w	r3, [r0, #273]	; 0x111
		*ptuning_parm_value =
 8009360:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009362:	2000      	movs	r0, #0
	break;
 8009364:	4770      	bx	lr
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 8009366:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
		*ptuning_parm_value =
 800936a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800936c:	2000      	movs	r0, #0
	break;
 800936e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8009370:	f8b0 3118 	ldrh.w	r3, [r0, #280]	; 0x118
		*ptuning_parm_value =
 8009374:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009376:	2000      	movs	r0, #0
	break;
 8009378:	4770      	bx	lr
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 800937a:	f8b0 311a 	ldrh.w	r3, [r0, #282]	; 0x11a
		*ptuning_parm_value =
 800937e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009380:	2000      	movs	r0, #0
	break;
 8009382:	4770      	bx	lr
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8009384:	f8b0 311c 	ldrh.w	r3, [r0, #284]	; 0x11c
		*ptuning_parm_value =
 8009388:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800938a:	2000      	movs	r0, #0
	break;
 800938c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 800938e:	f8b0 3144 	ldrh.w	r3, [r0, #324]	; 0x144
		*ptuning_parm_value =
 8009392:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009394:	2000      	movs	r0, #0
	break;
 8009396:	4770      	bx	lr
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8009398:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
		*ptuning_parm_value =
 800939c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800939e:	2000      	movs	r0, #0
	break;
 80093a0:	4770      	bx	lr
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 80093a2:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
		*ptuning_parm_value =
 80093a6:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80093a8:	2000      	movs	r0, #0
	break;
 80093aa:	4770      	bx	lr
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 80093ac:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
		*ptuning_parm_value =
 80093b0:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80093b2:	2000      	movs	r0, #0
	break;
 80093b4:	4770      	bx	lr
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 80093b6:	f890 3154 	ldrb.w	r3, [r0, #340]	; 0x154
		*ptuning_parm_value =
 80093ba:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80093bc:	2000      	movs	r0, #0
	break;
 80093be:	4770      	bx	lr
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 80093c0:	f890 3155 	ldrb.w	r3, [r0, #341]	; 0x155
		*ptuning_parm_value =
 80093c4:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80093c6:	2000      	movs	r0, #0
	break;
 80093c8:	4770      	bx	lr
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 80093ca:	f890 3156 	ldrb.w	r3, [r0, #342]	; 0x156
		*ptuning_parm_value =
 80093ce:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80093d0:	2000      	movs	r0, #0
	break;
 80093d2:	4770      	bx	lr
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 80093d4:	f890 3121 	ldrb.w	r3, [r0, #289]	; 0x121
		*ptuning_parm_value =
 80093d8:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80093da:	2000      	movs	r0, #0
	break;
 80093dc:	4770      	bx	lr
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 80093de:	f890 3122 	ldrb.w	r3, [r0, #290]	; 0x122
		*ptuning_parm_value =
 80093e2:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80093e4:	2000      	movs	r0, #0
	break;
 80093e6:	4770      	bx	lr
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 80093e8:	f8b0 3128 	ldrh.w	r3, [r0, #296]	; 0x128
		*ptuning_parm_value =
 80093ec:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80093ee:	2000      	movs	r0, #0
	break;
 80093f0:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 80093f2:	f8b0 30ca 	ldrh.w	r3, [r0, #202]	; 0xca
		*ptuning_parm_value =
 80093f6:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80093f8:	2000      	movs	r0, #0
	break;
 80093fa:	4770      	bx	lr
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 80093fc:	f8b0 30cc 	ldrh.w	r3, [r0, #204]	; 0xcc
		*ptuning_parm_value =
 8009400:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009402:	2000      	movs	r0, #0
	break;
 8009404:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8009406:	f8d0 30d0 	ldr.w	r3, [r0, #208]	; 0xd0
		*ptuning_parm_value =
 800940a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800940c:	2000      	movs	r0, #0
	break;
 800940e:	4770      	bx	lr
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8009410:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
		*ptuning_parm_value =
 8009414:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009416:	2000      	movs	r0, #0
	break;
 8009418:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 800941a:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
		*ptuning_parm_value =
 800941e:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009420:	2000      	movs	r0, #0
	break;
 8009422:	4770      	bx	lr
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 8009424:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
		*ptuning_parm_value =
 8009428:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800942a:	2000      	movs	r0, #0
	break;
 800942c:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 800942e:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
		*ptuning_parm_value =
 8009432:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009434:	2000      	movs	r0, #0
	break;
 8009436:	4770      	bx	lr
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8009438:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
		*ptuning_parm_value =
 800943c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800943e:	2000      	movs	r0, #0
	break;
 8009440:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8009442:	f890 32e4 	ldrb.w	r3, [r0, #740]	; 0x2e4
		*ptuning_parm_value =
 8009446:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009448:	2000      	movs	r0, #0
	break;
 800944a:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800944c:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
		*ptuning_parm_value =
 8009450:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009452:	2000      	movs	r0, #0
	break;
 8009454:	4770      	bx	lr
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 8009456:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
		*ptuning_parm_value =
 800945a:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800945c:	2000      	movs	r0, #0
	break;
 800945e:	4770      	bx	lr


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 8009460:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009464:	6013      	str	r3, [r2, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 8009466:	f06f 0003 	mvn.w	r0, #3
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800946a:	4770      	bx	lr

0800946c <VL53L1_init_refspadchar_config_struct>:
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 800946c:	2308      	movs	r3, #8
 800946e:	7003      	strb	r3, [r0, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 8009470:	230b      	movs	r3, #11
 8009472:	7043      	strb	r3, [r0, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 8009474:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009478:	6043      	str	r3, [r0, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 800947a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800947e:	8103      	strh	r3, [r0, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8009480:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8009484:	8143      	strh	r3, [r0, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8009486:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800948a:	8183      	strh	r3, [r0, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 800948c:	2000      	movs	r0, #0
 800948e:	4770      	bx	lr

08009490 <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 8009490:	4603      	mov	r3, r0
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 8009492:	2000      	movs	r0, #0
 8009494:	7018      	strb	r0, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 8009496:	2212      	movs	r2, #18
 8009498:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 800949a:	220f      	movs	r2, #15
 800949c:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 800949e:	2202      	movs	r2, #2
 80094a0:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 80094a2:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 80094a6:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 80094a8:	220c      	movs	r2, #12
 80094aa:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 80094ac:	4770      	bx	lr

080094ae <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 80094ae:	b570      	push	{r4, r5, r6, lr}
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 80094b0:	8944      	ldrh	r4, [r0, #10]
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 80094b2:	600c      	str	r4, [r1, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80094b4:	f9b0 500c 	ldrsh.w	r5, [r0, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 80094b8:	808d      	strh	r5, [r1, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80094ba:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 80094be:	80ca      	strh	r2, [r1, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 80094c0:	8943      	ldrh	r3, [r0, #10]
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 80094c2:	608b      	str	r3, [r1, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80094c4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 80094c8:	818b      	strh	r3, [r1, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80094ca:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 80094ce:	81cb      	strh	r3, [r1, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 80094d0:	2300      	movs	r3, #0
 80094d2:	824b      	strh	r3, [r1, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 80094d4:	2340      	movs	r3, #64	; 0x40
 80094d6:	750b      	strb	r3, [r1, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 80094d8:	b91c      	cbnz	r4, 80094e2 <VL53L1_init_xtalk_config_struct+0x34>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 80094da:	684b      	ldr	r3, [r1, #4]
 80094dc:	b90b      	cbnz	r3, 80094e2 <VL53L1_init_xtalk_config_struct+0x34>
		pdata->global_crosstalk_compensation_enable = 0x00;
 80094de:	740b      	strb	r3, [r1, #16]
 80094e0:	e001      	b.n	80094e6 <VL53L1_init_xtalk_config_struct+0x38>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 80094e2:	2301      	movs	r3, #1
 80094e4:	740b      	strb	r3, [r1, #16]


	if ((status == VL53L1_ERROR_NONE) &&
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 80094e6:	7c0b      	ldrb	r3, [r1, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d003      	beq.n	80094f4 <VL53L1_init_xtalk_config_struct+0x46>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 80094ec:	2300      	movs	r3, #0
 80094ee:	82cb      	strh	r3, [r1, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80094f0:	2000      	movs	r0, #0
 80094f2:	bd70      	pop	{r4, r5, r6, pc}
 80094f4:	460e      	mov	r6, r1
			VL53L1_calc_range_ignore_threshold(
 80094f6:	2340      	movs	r3, #64	; 0x40
 80094f8:	4629      	mov	r1, r5
 80094fa:	4620      	mov	r0, r4
 80094fc:	f000 fc06 	bl	8009d0c <VL53L1_calc_range_ignore_threshold>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8009500:	82f0      	strh	r0, [r6, #22]
 8009502:	e7f5      	b.n	80094f0 <VL53L1_init_xtalk_config_struct+0x42>

08009504 <VL53L1_init_offset_cal_config_struct>:

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 8009504:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8009508:	8003      	strh	r3, [r0, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 800950a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800950e:	6043      	str	r3, [r0, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 8009510:	f243 23c8 	movw	r3, #13000	; 0x32c8
 8009514:	6083      	str	r3, [r0, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 8009516:	60c3      	str	r3, [r0, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 8009518:	2308      	movs	r3, #8
 800951a:	7403      	strb	r3, [r0, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800951c:	2328      	movs	r3, #40	; 0x28
 800951e:	7443      	strb	r3, [r0, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8009520:	2309      	movs	r3, #9
 8009522:	7483      	strb	r3, [r0, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8009524:	2000      	movs	r0, #0
 8009526:	4770      	bx	lr

08009528 <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 8009528:	4603      	mov	r3, r0
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 800952a:	f248 0203 	movw	r2, #32771	; 0x8003
 800952e:	8002      	strh	r2, [r0, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 8009530:	f248 0201 	movw	r2, #32769	; 0x8001
 8009534:	8042      	strh	r2, [r0, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8009536:	f248 0241 	movw	r2, #32833	; 0x8041
 800953a:	8082      	strh	r2, [r0, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800953c:	200e      	movs	r0, #14
 800953e:	7198      	strb	r0, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 8009540:	210a      	movs	r1, #10
 8009542:	71d9      	strb	r1, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 8009544:	2206      	movs	r2, #6
 8009546:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 8009548:	7258      	strb	r0, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 800954a:	7299      	strb	r1, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 800954c:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800954e:	2102      	movs	r1, #2
 8009550:	7319      	strb	r1, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 8009552:	2221      	movs	r2, #33	; 0x21
 8009554:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 8009556:	2000      	movs	r0, #0
 8009558:	81d8      	strh	r0, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 800955a:	7418      	strb	r0, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 800955c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8009560:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 8009562:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 8009564:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 8009566:	22c0      	movs	r2, #192	; 0xc0
 8009568:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 800956a:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 800956c:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800956e:	2208      	movs	r2, #8
 8009570:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8009572:	2210      	movs	r2, #16
 8009574:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 8009576:	2201      	movs	r2, #1
 8009578:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 800957c:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 8009580:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8009584:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 8009588:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 800958c:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8009590:	84d9      	strh	r1, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 8009592:	8519      	strh	r1, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8009594:	f248 0130 	movw	r1, #32816	; 0x8030
 8009598:	62d9      	str	r1, [r3, #44]	; 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 800959a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800959e:	6319      	str	r1, [r3, #48]	; 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 80095a0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80095a4:	6359      	str	r1, [r3, #52]	; 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 80095a6:	6399      	str	r1, [r3, #56]	; 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 80095a8:	f24f 6118 	movw	r1, #63000	; 0xf618
 80095ac:	6419      	str	r1, [r3, #64]	; 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 80095ae:	f243 21c8 	movw	r1, #13000	; 0x32c8
 80095b2:	6459      	str	r1, [r3, #68]	; 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 80095b4:	63da      	str	r2, [r3, #60]	; 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 80095b6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80095ba:	649a      	str	r2, [r3, #72]	; 0x48


	LOG_FUNCTION_END(status);

	return status;
}
 80095bc:	4770      	bx	lr

080095be <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80095be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095c2:	4604      	mov	r4, r0
 80095c4:	9f08      	ldr	r7, [sp, #32]
 80095c6:	9d09      	ldr	r5, [sp, #36]	; 0x24
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 80095c8:	f44f 6020 	mov.w	r0, #2560	; 0xa00
 80095cc:	8020      	strh	r0, [r4, #0]
	pstatic->debug__ctrl                                      = 0x00;
 80095ce:	2000      	movs	r0, #0
 80095d0:	70a0      	strb	r0, [r4, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 80095d2:	70e0      	strb	r0, [r4, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 80095d4:	7120      	strb	r0, [r4, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 80095d6:	7160      	strb	r0, [r4, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 80095d8:	71a0      	strb	r0, [r4, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 80095da:	71e0      	strb	r0, [r4, #7]
	pstatic->host_if__status                                  = 0x00;
 80095dc:	7220      	strb	r0, [r4, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 80095de:	7260      	strb	r0, [r4, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 80095e0:	72a0      	strb	r0, [r4, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 80095e2:	72e0      	strb	r0, [r4, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 80095e4:	2611      	movs	r6, #17
 80095e6:	7326      	strb	r6, [r4, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 80095e8:	f04f 0e02 	mov.w	lr, #2
 80095ec:	f884 e00d 	strb.w	lr, [r4, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 80095f0:	73a0      	strb	r0, [r4, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 80095f2:	f884 e00f 	strb.w	lr, [r4, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 80095f6:	f04f 0808 	mov.w	r8, #8
 80095fa:	f884 8010 	strb.w	r8, [r4, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 80095fe:	7460      	strb	r0, [r4, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8009600:	7fae      	ldrb	r6, [r5, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8009602:	74a6      	strb	r6, [r4, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8009604:	7fee      	ldrb	r6, [r5, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8009606:	74e6      	strb	r6, [r4, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8009608:	f895 6020 	ldrb.w	r6, [r5, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800960c:	7526      	strb	r6, [r4, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800960e:	2601      	movs	r6, #1
 8009610:	7566      	strb	r6, [r4, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 8009612:	75a0      	strb	r0, [r4, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 8009614:	75e0      	strb	r0, [r4, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 8009616:	8320      	strh	r0, [r4, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8009618:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800961c:	f884 c01a 	strb.w	ip, [r4, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8009620:	f895 9010 	ldrb.w	r9, [r5, #16]
	pstatic->algo__range_min_clip                             =
 8009624:	f884 901b 	strb.w	r9, [r4, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8009628:	f895 900c 	ldrb.w	r9, [r5, #12]
	pstatic->algo__consistency_check__tolerance               =
 800962c:	f884 901c 	strb.w	r9, [r4, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 8009630:	7760      	strb	r0, [r4, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 8009632:	77a0      	strb	r0, [r4, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 8009634:	77e0      	strb	r0, [r4, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8009636:	7008      	strb	r0, [r1, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 8009638:	7048      	strb	r0, [r1, #1]
	pgeneral->system__interrupt_config_gpio =
 800963a:	f04f 0920 	mov.w	r9, #32
 800963e:	f881 9002 	strb.w	r9, [r1, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 8009642:	240b      	movs	r4, #11
 8009644:	70cc      	strb	r4, [r1, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8009646:	f8b5 a00e 	ldrh.w	sl, [r5, #14]
	pgeneral->cal_config__repeat_rate                         =
 800964a:	f8a1 a004 	strh.w	sl, [r1, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 800964e:	f881 e006 	strb.w	lr, [r1, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 8009652:	f04f 0a0d 	mov.w	sl, #13
 8009656:	f881 a007 	strb.w	sl, [r1, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 800965a:	f895 a00d 	ldrb.w	sl, [r5, #13]
	pgeneral->phasecal_config__target                         =
 800965e:	f881 a008 	strb.w	sl, [r1, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 8009662:	7248      	strb	r0, [r1, #9]
	pgeneral->dss_config__roi_mode_control =
 8009664:	728e      	strb	r6, [r1, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 8009666:	8188      	strh	r0, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 8009668:	81c8      	strh	r0, [r1, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800966a:	f44f 4a0c 	mov.w	sl, #35840	; 0x8c00
 800966e:	f8a1 a010 	strh.w	sl, [r1, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8009672:	7488      	strb	r0, [r1, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 8009674:	f04f 0a38 	mov.w	sl, #56	; 0x38
 8009678:	f881 a013 	strb.w	sl, [r1, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 800967c:	f881 c014 	strb.w	ip, [r1, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 8009680:	754e      	strb	r6, [r1, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 8009682:	7010      	strb	r0, [r2, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8009684:	211a      	movs	r1, #26
 8009686:	7051      	strb	r1, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 8009688:	7090      	strb	r0, [r2, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800968a:	f882 9003 	strb.w	r9, [r2, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800968e:	7116      	strb	r6, [r2, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 8009690:	21cc      	movs	r1, #204	; 0xcc
 8009692:	7151      	strb	r1, [r2, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 8009694:	7194      	strb	r4, [r2, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8009696:	71d6      	strb	r6, [r2, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8009698:	21f5      	movs	r1, #245	; 0xf5
 800969a:	7211      	strb	r1, [r2, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800969c:	2109      	movs	r1, #9
 800969e:	7251      	strb	r1, [r2, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 80096a0:	f8b5 9014 	ldrh.w	r9, [r5, #20]
	ptiming->range_config__sigma_thresh                       =
 80096a4:	f8a2 900a 	strh.w	r9, [r2, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 80096a8:	f8b5 901a 	ldrh.w	r9, [r5, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 80096ac:	f8a2 900c 	strh.w	r9, [r2, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 80096b0:	f882 800e 	strb.w	r8, [r2, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 80096b4:	f04f 0878 	mov.w	r8, #120	; 0x78
 80096b8:	f882 800f 	strb.w	r8, [r2, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 80096bc:	6110      	str	r0, [r2, #16]
	ptiming->system__fractional_enable                        = 0x00;
 80096be:	7510      	strb	r0, [r2, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 80096c0:	701e      	strb	r6, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 80096c2:	8058      	strh	r0, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 80096c4:	8098      	strh	r0, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 80096c6:	7198      	strb	r0, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 80096c8:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
	pdynamic->system__seed_config =
 80096cc:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 80096ce:	721c      	strb	r4, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 80096d0:	7259      	strb	r1, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 80096d2:	79ea      	ldrb	r2, [r5, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 80096d4:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 80096d6:	7aaa      	ldrb	r2, [r5, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 80096d8:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 80096da:	731e      	strb	r6, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 80096dc:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
	pdynamic->sd_config__first_order_select =
 80096e0:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 80096e2:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
	pdynamic->sd_config__quantifier         =
 80096e6:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 80096e8:	22c7      	movs	r2, #199	; 0xc7
 80096ea:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 80096ec:	f883 c010 	strb.w	ip, [r3, #16]


	pdynamic->system__sequence_config                          = \
 80096f0:	22db      	movs	r2, #219	; 0xdb
 80096f2:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 80096f4:	f883 e012 	strb.w	lr, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 80096f8:	7078      	strb	r0, [r7, #1]
	psystem->firmware__enable                                  = 0x01;
 80096fa:	70be      	strb	r6, [r7, #2]
	psystem->system__interrupt_clear                           = \
 80096fc:	70fe      	strb	r6, [r7, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 80096fe:	2321      	movs	r3, #33	; 0x21
 8009700:	713b      	strb	r3, [r7, #4]
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
}
 8009702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009706 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8009706:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009708:	b083      	sub	sp, #12
 800970a:	4614      	mov	r4, r2
 800970c:	461e      	mov	r6, r3
 800970e:	9d09      	ldr	r5, [sp, #36]	; 0x24

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8009710:	9501      	str	r5, [sp, #4]
 8009712:	9f08      	ldr	r7, [sp, #32]
 8009714:	9700      	str	r7, [sp, #0]
 8009716:	f7ff ff52 	bl	80095be <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800971a:	4603      	mov	r3, r0
 800971c:	b988      	cbnz	r0, 8009742 <VL53L1_preset_mode_standard_ranging_short_range+0x3c>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 800971e:	2107      	movs	r1, #7
 8009720:	71a1      	strb	r1, [r4, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 8009722:	2205      	movs	r2, #5
 8009724:	7262      	strb	r2, [r4, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 8009726:	8ae8      	ldrh	r0, [r5, #22]
		ptiming->range_config__sigma_thresh                  =
 8009728:	8160      	strh	r0, [r4, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 800972a:	8ba8      	ldrh	r0, [r5, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800972c:	81a0      	strh	r0, [r4, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800972e:	2008      	movs	r0, #8
 8009730:	73a0      	strb	r0, [r4, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 8009732:	2038      	movs	r0, #56	; 0x38
 8009734:	73e0      	strb	r0, [r4, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 8009736:	7231      	strb	r1, [r6, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 8009738:	7272      	strb	r2, [r6, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 800973a:	7a2a      	ldrb	r2, [r5, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 800973c:	72b2      	strb	r2, [r6, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 800973e:	7aea      	ldrb	r2, [r5, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 8009740:	72f2      	strb	r2, [r6, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8009742:	4618      	mov	r0, r3
 8009744:	b003      	add	sp, #12
 8009746:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009748 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8009748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800974a:	b083      	sub	sp, #12
 800974c:	4614      	mov	r4, r2
 800974e:	461e      	mov	r6, r3
 8009750:	9d09      	ldr	r5, [sp, #36]	; 0x24

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8009752:	9501      	str	r5, [sp, #4]
 8009754:	9f08      	ldr	r7, [sp, #32]
 8009756:	9700      	str	r7, [sp, #0]
 8009758:	f7ff ff31 	bl	80095be <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800975c:	4603      	mov	r3, r0
 800975e:	b988      	cbnz	r0, 8009784 <VL53L1_preset_mode_standard_ranging_long_range+0x3c>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 8009760:	210f      	movs	r1, #15
 8009762:	71a1      	strb	r1, [r4, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 8009764:	220d      	movs	r2, #13
 8009766:	7262      	strb	r2, [r4, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 8009768:	8a68      	ldrh	r0, [r5, #18]
		ptiming->range_config__sigma_thresh                  =
 800976a:	8160      	strh	r0, [r4, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 800976c:	8b28      	ldrh	r0, [r5, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800976e:	81a0      	strh	r0, [r4, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 8009770:	2008      	movs	r0, #8
 8009772:	73a0      	strb	r0, [r4, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 8009774:	20b8      	movs	r0, #184	; 0xb8
 8009776:	73e0      	strb	r0, [r4, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 8009778:	7231      	strb	r1, [r6, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 800977a:	7272      	strb	r2, [r6, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 800977c:	79aa      	ldrb	r2, [r5, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 800977e:	72b2      	strb	r2, [r6, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 8009780:	7a6a      	ldrb	r2, [r5, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 8009782:	72f2      	strb	r2, [r6, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8009784:	4618      	mov	r0, r3
 8009786:	b003      	add	sp, #12
 8009788:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800978a <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800978a:	b570      	push	{r4, r5, r6, lr}
 800978c:	b082      	sub	sp, #8
 800978e:	460e      	mov	r6, r1
 8009790:	461d      	mov	r5, r3

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8009792:	9c07      	ldr	r4, [sp, #28]
 8009794:	9401      	str	r4, [sp, #4]
 8009796:	9c06      	ldr	r4, [sp, #24]
 8009798:	9400      	str	r4, [sp, #0]
 800979a:	f7ff ff10 	bl	80095be <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800979e:	4603      	mov	r3, r0
 80097a0:	b918      	cbnz	r0, 80097aa <VL53L1_preset_mode_standard_ranging_mm1_cal+0x20>

		pgeneral->dss_config__roi_mode_control =
 80097a2:	2202      	movs	r2, #2
 80097a4:	72b2      	strb	r2, [r6, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 80097a6:	223b      	movs	r2, #59	; 0x3b
 80097a8:	746a      	strb	r2, [r5, #17]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	b002      	add	sp, #8
 80097ae:	bd70      	pop	{r4, r5, r6, pc}

080097b0 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80097b0:	b570      	push	{r4, r5, r6, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	460e      	mov	r6, r1
 80097b6:	461d      	mov	r5, r3

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 80097b8:	9c07      	ldr	r4, [sp, #28]
 80097ba:	9401      	str	r4, [sp, #4]
 80097bc:	9c06      	ldr	r4, [sp, #24]
 80097be:	9400      	str	r4, [sp, #0]
 80097c0:	f7ff fefd 	bl	80095be <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80097c4:	4603      	mov	r3, r0
 80097c6:	b918      	cbnz	r0, 80097d0 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x20>

		pgeneral->dss_config__roi_mode_control =
 80097c8:	2202      	movs	r2, #2
 80097ca:	72b2      	strb	r2, [r6, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 80097cc:	225b      	movs	r2, #91	; 0x5b
 80097ce:	746a      	strb	r2, [r5, #17]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	b002      	add	sp, #8
 80097d4:	bd70      	pop	{r4, r5, r6, pc}

080097d6 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80097d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097d8:	b083      	sub	sp, #12
 80097da:	4614      	mov	r4, r2
 80097dc:	461f      	mov	r7, r3
 80097de:	9d08      	ldr	r5, [sp, #32]
 80097e0:	9e09      	ldr	r6, [sp, #36]	; 0x24

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 80097e2:	9601      	str	r6, [sp, #4]
 80097e4:	9500      	str	r5, [sp, #0]
 80097e6:	f7ff feea 	bl	80095be <VL53L1_preset_mode_standard_ranging>
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80097ea:	4602      	mov	r2, r0
 80097ec:	b978      	cbnz	r0, 800980e <VL53L1_preset_mode_timed_ranging+0x38>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 80097ee:	2300      	movs	r3, #0
 80097f0:	74bb      	strb	r3, [r7, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 80097f2:	7123      	strb	r3, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 80097f4:	21b1      	movs	r1, #177	; 0xb1
 80097f6:	7161      	strb	r1, [r4, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 80097f8:	71e3      	strb	r3, [r4, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 80097fa:	23d4      	movs	r3, #212	; 0xd4
 80097fc:	7223      	strb	r3, [r4, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 80097fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009802:	6123      	str	r3, [r4, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8009804:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
		pdynamic->system__seed_config =
 8009808:	71fb      	strb	r3, [r7, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800980a:	2340      	movs	r3, #64	; 0x40
 800980c:	712b      	strb	r3, [r5, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800980e:	4610      	mov	r0, r2
 8009810:	b003      	add	sp, #12
 8009812:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009814 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8009814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009816:	b083      	sub	sp, #12
 8009818:	4614      	mov	r4, r2
 800981a:	461f      	mov	r7, r3
 800981c:	9d08      	ldr	r5, [sp, #32]
 800981e:	9e09      	ldr	r6, [sp, #36]	; 0x24

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 8009820:	9601      	str	r6, [sp, #4]
 8009822:	9500      	str	r5, [sp, #0]
 8009824:	f7ff ff6f 	bl	8009706 <VL53L1_preset_mode_standard_ranging_short_range>
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8009828:	4603      	mov	r3, r0
 800982a:	b980      	cbnz	r0, 800984e <VL53L1_preset_mode_timed_ranging_short_range+0x3a>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800982c:	2200      	movs	r2, #0
 800982e:	74ba      	strb	r2, [r7, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8009830:	2201      	movs	r2, #1
 8009832:	7122      	strb	r2, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 8009834:	2184      	movs	r1, #132	; 0x84
 8009836:	7161      	strb	r1, [r4, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8009838:	71e2      	strb	r2, [r4, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800983a:	22b1      	movs	r2, #177	; 0xb1
 800983c:	7222      	strb	r2, [r4, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800983e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009842:	6122      	str	r2, [r4, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8009844:	f896 2022 	ldrb.w	r2, [r6, #34]	; 0x22
		pdynamic->system__seed_config =
 8009848:	71fa      	strb	r2, [r7, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800984a:	2240      	movs	r2, #64	; 0x40
 800984c:	712a      	strb	r2, [r5, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800984e:	4618      	mov	r0, r3
 8009850:	b003      	add	sp, #12
 8009852:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009854 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8009854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009856:	b083      	sub	sp, #12
 8009858:	4614      	mov	r4, r2
 800985a:	461f      	mov	r7, r3
 800985c:	9d08      	ldr	r5, [sp, #32]
 800985e:	9e09      	ldr	r6, [sp, #36]	; 0x24

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 8009860:	9601      	str	r6, [sp, #4]
 8009862:	9500      	str	r5, [sp, #0]
 8009864:	f7ff ff70 	bl	8009748 <VL53L1_preset_mode_standard_ranging_long_range>
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8009868:	4602      	mov	r2, r0
 800986a:	b978      	cbnz	r0, 800988c <VL53L1_preset_mode_timed_ranging_long_range+0x38>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800986c:	2300      	movs	r3, #0
 800986e:	74bb      	strb	r3, [r7, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8009870:	7123      	strb	r3, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 8009872:	2197      	movs	r1, #151	; 0x97
 8009874:	7161      	strb	r1, [r4, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8009876:	71e3      	strb	r3, [r4, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 8009878:	23b1      	movs	r3, #177	; 0xb1
 800987a:	7223      	strb	r3, [r4, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800987c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009880:	6123      	str	r3, [r4, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8009882:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
		pdynamic->system__seed_config =
 8009886:	71fb      	strb	r3, [r7, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8009888:	2340      	movs	r3, #64	; 0x40
 800988a:	712b      	strb	r3, [r5, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800988c:	4610      	mov	r0, r2
 800988e:	b003      	add	sp, #12
 8009890:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009892 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8009892:	b570      	push	{r4, r5, r6, lr}
 8009894:	b082      	sub	sp, #8
 8009896:	460d      	mov	r5, r1
 8009898:	461e      	mov	r6, r3

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 800989a:	9c07      	ldr	r4, [sp, #28]
 800989c:	9401      	str	r4, [sp, #4]
 800989e:	9c06      	ldr	r4, [sp, #24]
 80098a0:	9400      	str	r4, [sp, #0]
 80098a2:	f7ff ff98 	bl	80097d6 <VL53L1_preset_mode_timed_ranging>
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 80098a6:	4603      	mov	r3, r0
 80098a8:	b110      	cbz	r0, 80098b0 <VL53L1_preset_mode_low_power_auto_ranging+0x1e>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	b002      	add	sp, #8
 80098ae:	bd70      	pop	{r4, r5, r6, pc}
		status = VL53L1_config_low_power_auto_mode(
 80098b0:	9a08      	ldr	r2, [sp, #32]
 80098b2:	4631      	mov	r1, r6
 80098b4:	4628      	mov	r0, r5
 80098b6:	f000 fb19 	bl	8009eec <VL53L1_config_low_power_auto_mode>
 80098ba:	4603      	mov	r3, r0
 80098bc:	e7f5      	b.n	80098aa <VL53L1_preset_mode_low_power_auto_ranging+0x18>

080098be <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 80098be:	b570      	push	{r4, r5, r6, lr}
 80098c0:	b082      	sub	sp, #8
 80098c2:	460d      	mov	r5, r1
 80098c4:	461e      	mov	r6, r3

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 80098c6:	9c07      	ldr	r4, [sp, #28]
 80098c8:	9401      	str	r4, [sp, #4]
 80098ca:	9c06      	ldr	r4, [sp, #24]
 80098cc:	9400      	str	r4, [sp, #0]
 80098ce:	f7ff ffa1 	bl	8009814 <VL53L1_preset_mode_timed_ranging_short_range>
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 80098d2:	4603      	mov	r3, r0
 80098d4:	b110      	cbz	r0, 80098dc <VL53L1_preset_mode_low_power_auto_short_ranging+0x1e>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	b002      	add	sp, #8
 80098da:	bd70      	pop	{r4, r5, r6, pc}
		status = VL53L1_config_low_power_auto_mode(
 80098dc:	9a08      	ldr	r2, [sp, #32]
 80098de:	4631      	mov	r1, r6
 80098e0:	4628      	mov	r0, r5
 80098e2:	f000 fb03 	bl	8009eec <VL53L1_config_low_power_auto_mode>
 80098e6:	4603      	mov	r3, r0
 80098e8:	e7f5      	b.n	80098d6 <VL53L1_preset_mode_low_power_auto_short_ranging+0x18>

080098ea <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 80098ea:	b570      	push	{r4, r5, r6, lr}
 80098ec:	b082      	sub	sp, #8
 80098ee:	460d      	mov	r5, r1
 80098f0:	461e      	mov	r6, r3

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 80098f2:	9c07      	ldr	r4, [sp, #28]
 80098f4:	9401      	str	r4, [sp, #4]
 80098f6:	9c06      	ldr	r4, [sp, #24]
 80098f8:	9400      	str	r4, [sp, #0]
 80098fa:	f7ff ffab 	bl	8009854 <VL53L1_preset_mode_timed_ranging_long_range>
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 80098fe:	4603      	mov	r3, r0
 8009900:	b110      	cbz	r0, 8009908 <VL53L1_preset_mode_low_power_auto_long_ranging+0x1e>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8009902:	4618      	mov	r0, r3
 8009904:	b002      	add	sp, #8
 8009906:	bd70      	pop	{r4, r5, r6, pc}
		status = VL53L1_config_low_power_auto_mode(
 8009908:	9a08      	ldr	r2, [sp, #32]
 800990a:	4631      	mov	r1, r6
 800990c:	4628      	mov	r0, r5
 800990e:	f000 faed 	bl	8009eec <VL53L1_config_low_power_auto_mode>
 8009912:	4603      	mov	r3, r0
 8009914:	e7f5      	b.n	8009902 <VL53L1_preset_mode_low_power_auto_long_ranging+0x18>

08009916 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8009916:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009918:	b083      	sub	sp, #12
 800991a:	4614      	mov	r4, r2
 800991c:	461f      	mov	r7, r3
 800991e:	9d08      	ldr	r5, [sp, #32]
 8009920:	9e09      	ldr	r6, [sp, #36]	; 0x24

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8009922:	9601      	str	r6, [sp, #4]
 8009924:	9500      	str	r5, [sp, #0]
 8009926:	f7ff fe4a 	bl	80095be <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800992a:	4602      	mov	r2, r0
 800992c:	b960      	cbnz	r0, 8009948 <VL53L1_preset_mode_singleshot_ranging+0x32>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800992e:	2300      	movs	r3, #0
 8009930:	74bb      	strb	r3, [r7, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8009932:	7123      	strb	r3, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 8009934:	21b1      	movs	r1, #177	; 0xb1
 8009936:	7161      	strb	r1, [r4, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8009938:	71e3      	strb	r3, [r4, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800993a:	23d4      	movs	r3, #212	; 0xd4
 800993c:	7223      	strb	r3, [r4, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800993e:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
		pdynamic->system__seed_config =
 8009942:	71fb      	strb	r3, [r7, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 8009944:	2310      	movs	r3, #16
 8009946:	712b      	strb	r3, [r5, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8009948:	4610      	mov	r0, r2
 800994a:	b003      	add	sp, #12
 800994c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800994e <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800994e:	b530      	push	{r4, r5, lr}
 8009950:	b083      	sub	sp, #12
 8009952:	9c06      	ldr	r4, [sp, #24]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8009954:	9d07      	ldr	r5, [sp, #28]
 8009956:	9501      	str	r5, [sp, #4]
 8009958:	9400      	str	r4, [sp, #0]
 800995a:	f7ff fe30 	bl	80095be <VL53L1_preset_mode_standard_ranging>
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800995e:	4603      	mov	r3, r0
 8009960:	b908      	cbnz	r0, 8009966 <VL53L1_preset_mode_olt+0x18>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 8009962:	2201      	movs	r2, #1
 8009964:	7062      	strb	r2, [r4, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8009966:	4618      	mov	r0, r3
 8009968:	b003      	add	sp, #12
 800996a:	bd30      	pop	{r4, r5, pc}

0800996c <VL53L1_init_version>:
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800996c:	2301      	movs	r3, #1
 800996e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 8009972:	2302      	movs	r3, #2
 8009974:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 8009978:	230a      	movs	r3, #10
 800997a:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800997e:	f44f 63e6 	mov.w	r3, #1840	; 0x730
 8009982:	6243      	str	r3, [r0, #36]	; 0x24
 8009984:	4770      	bx	lr

08009986 <VL53L1_init_ll_driver_state>:
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);

	pstate->cfg_device_state  = device_state;
 8009986:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
	pstate->cfg_stream_count  = 0;
 800998a:	2300      	movs	r3, #0
 800998c:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8009990:	2202      	movs	r2, #2
 8009992:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
	pstate->cfg_timing_status = 0;
 8009996:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f

	pstate->rd_device_state   = device_state;
 800999a:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
	pstate->rd_stream_count   = 0;
 800999e:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80099a2:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
	pstate->rd_timing_status  = 0;
 80099a6:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
 80099aa:	4770      	bx	lr

080099ac <VL53L1_update_ll_driver_rd_state>:

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 80099ac:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
 80099b0:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 80099b4:	d016      	beq.n	80099e4 <VL53L1_update_ll_driver_rd_state+0x38>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 80099b6:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 80099ba:	2bff      	cmp	r3, #255	; 0xff
 80099bc:	d01f      	beq.n	80099fe <VL53L1_update_ll_driver_rd_state+0x52>
			pstate->rd_stream_count = 0x80;
		} else {
			pstate->rd_stream_count++;
 80099be:	3301      	adds	r3, #1
 80099c0:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80099c4:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80099c8:	f083 0302 	eor.w	r3, r3, #2
 80099cc:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 80099d0:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 80099d4:	3b03      	subs	r3, #3
 80099d6:	2b05      	cmp	r3, #5
 80099d8:	d83c      	bhi.n	8009a54 <VL53L1_update_ll_driver_rd_state+0xa8>
 80099da:	e8df f003 	tbb	[pc, r3]
 80099de:	3b14      	.short	0x3b14
 80099e0:	312d263b 	.word	0x312d263b
		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 80099e4:	2303      	movs	r3, #3
 80099e6:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
		pstate->rd_stream_count  = 0;
 80099ea:	2300      	movs	r3, #0
 80099ec:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80099f0:	2202      	movs	r2, #2
 80099f2:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
		pstate->rd_timing_status = 0;
 80099f6:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
#endif

	LOG_FUNCTION_END(status);

	return status;
}
 80099fa:	2000      	movs	r0, #0
 80099fc:	4770      	bx	lr
			pstate->rd_stream_count = 0x80;
 80099fe:	2380      	movs	r3, #128	; 0x80
 8009a00:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
 8009a04:	e7de      	b.n	80099c4 <VL53L1_update_ll_driver_rd_state+0x18>
			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8009a06:	f890 31c6 	ldrb.w	r3, [r0, #454]	; 0x1c6
 8009a0a:	f013 0f02 	tst.w	r3, #2
 8009a0e:	d008      	beq.n	8009a22 <VL53L1_update_ll_driver_rd_state+0x76>
				pstate->rd_device_state =
 8009a10:	2306      	movs	r3, #6
 8009a12:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
			pstate->rd_stream_count  = 0;
 8009a16:	2300      	movs	r3, #0
 8009a18:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
			pstate->rd_timing_status = 0;
 8009a1c:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
		break;
 8009a20:	e7eb      	b.n	80099fa <VL53L1_update_ll_driver_rd_state+0x4e>
				pstate->rd_device_state =
 8009a22:	2308      	movs	r3, #8
 8009a24:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 8009a28:	e7f5      	b.n	8009a16 <VL53L1_update_ll_driver_rd_state+0x6a>
			pstate->rd_stream_count = 0;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
			pstate->rd_device_state =
 8009a30:	2308      	movs	r3, #8
 8009a32:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
		break;
 8009a36:	e7e0      	b.n	80099fa <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_device_state =
 8009a38:	2308      	movs	r3, #8
 8009a3a:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
		break;
 8009a3e:	e7dc      	b.n	80099fa <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_timing_status ^= 0x01;
 8009a40:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 8009a44:	f083 0301 	eor.w	r3, r3, #1
 8009a48:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
			pstate->rd_device_state =
 8009a4c:	2308      	movs	r3, #8
 8009a4e:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
		break;
 8009a52:	e7d2      	b.n	80099fa <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_device_state  =
 8009a54:	2303      	movs	r3, #3
 8009a56:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
			pstate->rd_stream_count  = 0;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8009a60:	2202      	movs	r2, #2
 8009a62:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
			pstate->rd_timing_status = 0;
 8009a66:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
		break;
 8009a6a:	e7c6      	b.n	80099fa <VL53L1_update_ll_driver_rd_state+0x4e>

08009a6c <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 8009a6c:	b410      	push	{r4}
 8009a6e:	4603      	mov	r3, r0
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 8009a70:	f890 21cf 	ldrb.w	r2, [r0, #463]	; 0x1cf
	device_range_status =
 8009a74:	f002 011f 	and.w	r1, r2, #31
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 8009a78:	f890 41d1 	ldrb.w	r4, [r0, #465]	; 0x1d1

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 8009a7c:	f890 21ce 	ldrb.w	r2, [r0, #462]	; 0x1ce
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 8009a80:	f890 01cc 	ldrb.w	r0, [r0, #460]	; 0x1cc
 8009a84:	f010 0f20 	tst.w	r0, #32
 8009a88:	d019      	beq.n	8009abe <VL53L1_check_ll_driver_rd_state+0x52>
 8009a8a:	0912      	lsrs	r2, r2, #4
 8009a8c:	f002 0202 	and.w	r2, r2, #2
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 8009a90:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
 8009a94:	2806      	cmp	r0, #6
 8009a96:	d00c      	beq.n	8009ab2 <VL53L1_check_ll_driver_rd_state+0x46>
			if (device_range_status !=
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 8009a98:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
 8009a9c:	428c      	cmp	r4, r1
 8009a9e:	d00c      	beq.n	8009aba <VL53L1_check_ll_driver_rd_state+0x4e>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 8009aa0:	f06f 0011 	mvn.w	r0, #17

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 8009aa4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d10d      	bne.n	8009ac8 <VL53L1_check_ll_driver_rd_state+0x5c>
	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
}
 8009aac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ab0:	4770      	bx	lr
			if (device_range_status !=
 8009ab2:	2912      	cmp	r1, #18
 8009ab4:	d105      	bne.n	8009ac2 <VL53L1_check_ll_driver_rd_state+0x56>
	VL53L1_Error         status = VL53L1_ERROR_NONE;
 8009ab6:	2000      	movs	r0, #0
 8009ab8:	e7f8      	b.n	8009aac <VL53L1_check_ll_driver_rd_state+0x40>
 8009aba:	2000      	movs	r0, #0
 8009abc:	e7f2      	b.n	8009aa4 <VL53L1_check_ll_driver_rd_state+0x38>
 8009abe:	2000      	movs	r0, #0
 8009ac0:	e7f4      	b.n	8009aac <VL53L1_check_ll_driver_rd_state+0x40>
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 8009ac2:	f06f 0010 	mvn.w	r0, #16
 8009ac6:	e7f1      	b.n	8009aac <VL53L1_check_ll_driver_rd_state+0x40>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 8009ac8:	f06f 0012 	mvn.w	r0, #18
 8009acc:	e7ee      	b.n	8009aac <VL53L1_check_ll_driver_rd_state+0x40>

08009ace <VL53L1_update_ll_driver_cfg_state>:
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 8009ace:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
 8009ad2:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8009ad6:	d01e      	beq.n	8009b16 <VL53L1_update_ll_driver_cfg_state+0x48>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 8009ad8:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8009adc:	2bff      	cmp	r3, #255	; 0xff
 8009ade:	d027      	beq.n	8009b30 <VL53L1_update_ll_driver_cfg_state+0x62>
			pstate->cfg_stream_count = 0x80;
		} else {
			pstate->cfg_stream_count++;
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8009ae6:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8009aea:	f083 0302 	eor.w	r3, r3, #2
 8009aee:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 8009af2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8009af6:	2b03      	cmp	r3, #3
 8009af8:	d01e      	beq.n	8009b38 <VL53L1_update_ll_driver_cfg_state+0x6a>
 8009afa:	2b04      	cmp	r3, #4
 8009afc:	d029      	beq.n	8009b52 <VL53L1_update_ll_driver_cfg_state+0x84>

		break;

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 8009afe:	2303      	movs	r3, #3
 8009b00:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
			pstate->cfg_stream_count = 0;
 8009b04:	2300      	movs	r3, #0
 8009b06:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8009b0a:	2202      	movs	r2, #2
 8009b0c:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
			pstate->cfg_timing_status = 0;
 8009b10:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f

		break;
 8009b14:	e00a      	b.n	8009b2c <VL53L1_update_ll_driver_cfg_state+0x5e>
		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8009b16:	2303      	movs	r3, #3
 8009b18:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
		pstate->cfg_stream_count  = 0;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8009b22:	2202      	movs	r2, #2
 8009b24:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
		pstate->cfg_timing_status = 0;
 8009b28:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
#endif

	LOG_FUNCTION_END(status);

	return status;
}
 8009b2c:	2000      	movs	r0, #0
 8009b2e:	4770      	bx	lr
			pstate->cfg_stream_count = 0x80;
 8009b30:	2380      	movs	r3, #128	; 0x80
 8009b32:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
 8009b36:	e7d6      	b.n	8009ae6 <VL53L1_update_ll_driver_cfg_state+0x18>
			pstate->cfg_timing_status ^= 0x01;
 8009b38:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8009b3c:	f083 0301 	eor.w	r3, r3, #1
 8009b40:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
			pstate->cfg_stream_count = 1;
 8009b44:	2301      	movs	r3, #1
 8009b46:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 8009b4a:	2304      	movs	r3, #4
 8009b4c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
		break;
 8009b50:	e7ec      	b.n	8009b2c <VL53L1_update_ll_driver_cfg_state+0x5e>
			pstate->cfg_timing_status ^= 0x01;
 8009b52:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8009b56:	f083 0301 	eor.w	r3, r3, #1
 8009b5a:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
		break;
 8009b5e:	e7e5      	b.n	8009b2c <VL53L1_update_ll_driver_cfg_state+0x5e>

08009b60 <VL53L1_copy_rtn_good_spads_to_buffer>:
{
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8009b60:	7c03      	ldrb	r3, [r0, #16]
 8009b62:	700b      	strb	r3, [r1, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 8009b64:	7c43      	ldrb	r3, [r0, #17]
 8009b66:	704b      	strb	r3, [r1, #1]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8009b68:	7c83      	ldrb	r3, [r0, #18]
 8009b6a:	708b      	strb	r3, [r1, #2]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 8009b6c:	7cc3      	ldrb	r3, [r0, #19]
 8009b6e:	70cb      	strb	r3, [r1, #3]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 8009b70:	7d03      	ldrb	r3, [r0, #20]
 8009b72:	710b      	strb	r3, [r1, #4]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8009b74:	7d43      	ldrb	r3, [r0, #21]
 8009b76:	714b      	strb	r3, [r1, #5]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 8009b78:	7d83      	ldrb	r3, [r0, #22]
 8009b7a:	718b      	strb	r3, [r1, #6]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 8009b7c:	7dc3      	ldrb	r3, [r0, #23]
 8009b7e:	71cb      	strb	r3, [r1, #7]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 8009b80:	7e03      	ldrb	r3, [r0, #24]
 8009b82:	720b      	strb	r3, [r1, #8]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 8009b84:	7e43      	ldrb	r3, [r0, #25]
 8009b86:	724b      	strb	r3, [r1, #9]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8009b88:	7e83      	ldrb	r3, [r0, #26]
 8009b8a:	728b      	strb	r3, [r1, #10]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8009b8c:	7ec3      	ldrb	r3, [r0, #27]
 8009b8e:	72cb      	strb	r3, [r1, #11]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 8009b90:	7f03      	ldrb	r3, [r0, #28]
 8009b92:	730b      	strb	r3, [r1, #12]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8009b94:	7f43      	ldrb	r3, [r0, #29]
 8009b96:	734b      	strb	r3, [r1, #13]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8009b98:	7f83      	ldrb	r3, [r0, #30]
 8009b9a:	738b      	strb	r3, [r1, #14]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8009b9c:	7fc3      	ldrb	r3, [r0, #31]
 8009b9e:	73cb      	strb	r3, [r1, #15]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 8009ba0:	f890 3020 	ldrb.w	r3, [r0, #32]
 8009ba4:	740b      	strb	r3, [r1, #16]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8009ba6:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8009baa:	744b      	strb	r3, [r1, #17]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8009bac:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8009bb0:	748b      	strb	r3, [r1, #18]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8009bb2:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8009bb6:	74cb      	strb	r3, [r1, #19]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8009bb8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8009bbc:	750b      	strb	r3, [r1, #20]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8009bbe:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8009bc2:	754b      	strb	r3, [r1, #21]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8009bc4:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8009bc8:	758b      	strb	r3, [r1, #22]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8009bca:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8009bce:	75cb      	strb	r3, [r1, #23]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8009bd0:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8009bd4:	760b      	strb	r3, [r1, #24]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8009bd6:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8009bda:	764b      	strb	r3, [r1, #25]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8009bdc:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8009be0:	768b      	strb	r3, [r1, #26]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8009be2:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8009be6:	76cb      	strb	r3, [r1, #27]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8009be8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8009bec:	770b      	strb	r3, [r1, #28]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 8009bee:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8009bf2:	774b      	strb	r3, [r1, #29]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8009bf4:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8009bf8:	778b      	strb	r3, [r1, #30]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8009bfa:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8009bfe:	77cb      	strb	r3, [r1, #31]
 8009c00:	4770      	bx	lr

08009c02 <VL53L1_i2c_encode_uint16_t>:
	uint16_t   i    = 0;
	uint16_t   data = 0;

	data =  ip_value;

	for (i = 0; i < count ; i++) {
 8009c02:	2300      	movs	r3, #0
 8009c04:	428b      	cmp	r3, r1
 8009c06:	d20b      	bcs.n	8009c20 <VL53L1_i2c_encode_uint16_t+0x1e>
{
 8009c08:	b410      	push	{r4}
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8009c0a:	1acc      	subs	r4, r1, r3
 8009c0c:	3c01      	subs	r4, #1
 8009c0e:	5510      	strb	r0, [r2, r4]
		data = data >> 8;
 8009c10:	0a00      	lsrs	r0, r0, #8
	for (i = 0; i < count ; i++) {
 8009c12:	3301      	adds	r3, #1
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	428b      	cmp	r3, r1
 8009c18:	d3f7      	bcc.n	8009c0a <VL53L1_i2c_encode_uint16_t+0x8>
	}
}
 8009c1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c1e:	4770      	bx	lr
 8009c20:	4770      	bx	lr

08009c22 <VL53L1_i2c_decode_uint16_t>:
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 8009c22:	2200      	movs	r2, #0

	while (count-- > 0) {
 8009c24:	e005      	b.n	8009c32 <VL53L1_i2c_decode_uint16_t+0x10>
		value = (value << 8) | (uint16_t)*pbuffer++;
 8009c26:	7808      	ldrb	r0, [r1, #0]
 8009c28:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
 8009c2c:	b292      	uxth	r2, r2
 8009c2e:	3101      	adds	r1, #1
	while (count-- > 0) {
 8009c30:	4618      	mov	r0, r3
 8009c32:	1e43      	subs	r3, r0, #1
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	2800      	cmp	r0, #0
 8009c38:	d1f5      	bne.n	8009c26 <VL53L1_i2c_decode_uint16_t+0x4>
	}

	return value;
}
 8009c3a:	4610      	mov	r0, r2
 8009c3c:	4770      	bx	lr

08009c3e <VL53L1_i2c_encode_int16_t>:
	uint16_t   i    = 0;
	int16_t    data = 0;

	data =  ip_value;

	for (i = 0; i < count ; i++) {
 8009c3e:	2300      	movs	r3, #0
 8009c40:	428b      	cmp	r3, r1
 8009c42:	d20b      	bcs.n	8009c5c <VL53L1_i2c_encode_int16_t+0x1e>
{
 8009c44:	b410      	push	{r4}
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8009c46:	1acc      	subs	r4, r1, r3
 8009c48:	3c01      	subs	r4, #1
 8009c4a:	5510      	strb	r0, [r2, r4]
		data = data >> 8;
 8009c4c:	1200      	asrs	r0, r0, #8
	for (i = 0; i < count ; i++) {
 8009c4e:	3301      	adds	r3, #1
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	428b      	cmp	r3, r1
 8009c54:	d3f7      	bcc.n	8009c46 <VL53L1_i2c_encode_int16_t+0x8>
	}
}
 8009c56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c5a:	4770      	bx	lr
 8009c5c:	4770      	bx	lr

08009c5e <VL53L1_i2c_decode_int16_t>:
	 */

	int16_t    value = 0x00;

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 8009c5e:	f991 3000 	ldrsb.w	r3, [r1]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	db01      	blt.n	8009c6a <VL53L1_i2c_decode_int16_t+0xc>
	int16_t    value = 0x00;
 8009c66:	2300      	movs	r3, #0
 8009c68:	e008      	b.n	8009c7c <VL53L1_i2c_decode_int16_t+0x1e>
		value = 0xFFFF;
 8009c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c6e:	e005      	b.n	8009c7c <VL53L1_i2c_decode_int16_t+0x1e>
	}

	while (count-- > 0) {
		value = (value << 8) | (int16_t)*pbuffer++;
 8009c70:	021b      	lsls	r3, r3, #8
 8009c72:	b21b      	sxth	r3, r3
 8009c74:	7808      	ldrb	r0, [r1, #0]
 8009c76:	4303      	orrs	r3, r0
 8009c78:	3101      	adds	r1, #1
	while (count-- > 0) {
 8009c7a:	4610      	mov	r0, r2
 8009c7c:	1e42      	subs	r2, r0, #1
 8009c7e:	b292      	uxth	r2, r2
 8009c80:	2800      	cmp	r0, #0
 8009c82:	d1f5      	bne.n	8009c70 <VL53L1_i2c_decode_int16_t+0x12>
	}

	return value;
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	4770      	bx	lr

08009c88 <VL53L1_i2c_encode_uint32_t>:
	uint16_t   i    = 0;
	uint32_t   data = 0;

	data =  ip_value;

	for (i = 0; i < count ; i++) {
 8009c88:	2300      	movs	r3, #0
 8009c8a:	428b      	cmp	r3, r1
 8009c8c:	d20b      	bcs.n	8009ca6 <VL53L1_i2c_encode_uint32_t+0x1e>
{
 8009c8e:	b410      	push	{r4}
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8009c90:	1acc      	subs	r4, r1, r3
 8009c92:	3c01      	subs	r4, #1
 8009c94:	5510      	strb	r0, [r2, r4]
		data = data >> 8;
 8009c96:	0a00      	lsrs	r0, r0, #8
	for (i = 0; i < count ; i++) {
 8009c98:	3301      	adds	r3, #1
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	428b      	cmp	r3, r1
 8009c9e:	d3f7      	bcc.n	8009c90 <VL53L1_i2c_encode_uint32_t+0x8>
	}
}
 8009ca0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ca4:	4770      	bx	lr
 8009ca6:	4770      	bx	lr

08009ca8 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8009ca8:	4602      	mov	r2, r0
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 8009caa:	2000      	movs	r0, #0

	while (count-- > 0) {
 8009cac:	e004      	b.n	8009cb8 <VL53L1_i2c_decode_uint32_t+0x10>
		value = (value << 8) | (uint32_t)*pbuffer++;
 8009cae:	780a      	ldrb	r2, [r1, #0]
 8009cb0:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8009cb4:	3101      	adds	r1, #1
	while (count-- > 0) {
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	1e53      	subs	r3, r2, #1
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	2a00      	cmp	r2, #0
 8009cbe:	d1f6      	bne.n	8009cae <VL53L1_i2c_decode_uint32_t+0x6>
	}

	return value;
}
 8009cc0:	4770      	bx	lr

08009cc2 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8009cc2:	4602      	mov	r2, r0
	 */

	int32_t    value = 0x00;

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 8009cc4:	f991 3000 	ldrsb.w	r3, [r1]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	db01      	blt.n	8009cd0 <VL53L1_i2c_decode_int32_t+0xe>
	int32_t    value = 0x00;
 8009ccc:	2000      	movs	r0, #0
 8009cce:	e007      	b.n	8009ce0 <VL53L1_i2c_decode_int32_t+0x1e>
		value = 0xFFFFFFFF;
 8009cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd4:	e004      	b.n	8009ce0 <VL53L1_i2c_decode_int32_t+0x1e>
	}

	while (count-- > 0) {
		value = (value << 8) | (int32_t)*pbuffer++;
 8009cd6:	780a      	ldrb	r2, [r1, #0]
 8009cd8:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8009cdc:	3101      	adds	r1, #1
	while (count-- > 0) {
 8009cde:	461a      	mov	r2, r3
 8009ce0:	1e53      	subs	r3, r2, #1
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	2a00      	cmp	r2, #0
 8009ce6:	d1f6      	bne.n	8009cd6 <VL53L1_i2c_decode_int32_t+0x14>
	}

	return value;
}
 8009ce8:	4770      	bx	lr

08009cea <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 8009cea:	b538      	push	{r3, r4, r5, lr}
 8009cec:	460d      	mov	r5, r1

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 8009cee:	f000 f966 	bl	8009fbe <VL53L1_calc_pll_period_us>
 8009cf2:	4604      	mov	r4, r0

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	f000 f967 	bl	8009fc8 <VL53L1_decode_vcsel_period>
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 8009cfa:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 8009cfe:	0223      	lsls	r3, r4, #8
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 8009d00:	099b      	lsrs	r3, r3, #6

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 8009d02:	fb00 f003 	mul.w	r0, r0, r3
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
}
 8009d06:	0980      	lsrs	r0, r0, #6
 8009d08:	bd38      	pop	{r3, r4, r5, pc}
	...

08009d0c <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 8009d0c:	b510      	push	{r4, lr}

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 8009d0e:	0100      	lsls	r0, r0, #4
 8009d10:	4c14      	ldr	r4, [pc, #80]	; (8009d64 <VL53L1_calc_range_ignore_threshold+0x58>)
 8009d12:	fb84 e400 	smull	lr, r4, r4, r0
 8009d16:	17c0      	asrs	r0, r0, #31
 8009d18:	ebc0 10a4 	rsb	r0, r0, r4, asr #6

	if (x_gradient < 0) {
 8009d1c:	2900      	cmp	r1, #0
 8009d1e:	db17      	blt.n	8009d50 <VL53L1_calc_range_ignore_threshold+0x44>
	int16_t    x_gradient_int           = 0;
 8009d20:	2100      	movs	r1, #0
		x_gradient_int = x_gradient * -1;
	}

	if (y_gradient < 0) {
 8009d22:	2a00      	cmp	r2, #0
 8009d24:	db17      	blt.n	8009d56 <VL53L1_calc_range_ignore_threshold+0x4a>
	int16_t    y_gradient_int           = 0;
 8009d26:	2200      	movs	r2, #0

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 8009d28:	440a      	add	r2, r1
 8009d2a:	0152      	lsls	r2, r2, #5

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 8009d2c:	490d      	ldr	r1, [pc, #52]	; (8009d64 <VL53L1_calc_range_ignore_threshold+0x58>)
 8009d2e:	fb81 4102 	smull	r4, r1, r1, r2
 8009d32:	17d2      	asrs	r2, r2, #31
 8009d34:	ebc2 12a1 	rsb	r2, r2, r1, asr #6

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 8009d38:	4402      	add	r2, r0

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 8009d3a:	fb03 f302 	mul.w	r3, r3, r2

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 8009d3e:	3310      	adds	r3, #16
 8009d40:	d40c      	bmi.n	8009d5c <VL53L1_calc_range_ignore_threshold+0x50>
 8009d42:	115b      	asrs	r3, r3, #5

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 8009d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d48:	db0a      	blt.n	8009d60 <VL53L1_calc_range_ignore_threshold+0x54>
		range_ignore_thresh_kcps = 0xFFFF;
 8009d4a:	f64f 70ff 	movw	r0, #65535	; 0xffff
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
}
 8009d4e:	bd10      	pop	{r4, pc}
		x_gradient_int = x_gradient * -1;
 8009d50:	4249      	negs	r1, r1
 8009d52:	b209      	sxth	r1, r1
 8009d54:	e7e5      	b.n	8009d22 <VL53L1_calc_range_ignore_threshold+0x16>
		y_gradient_int = y_gradient * -1;
 8009d56:	4252      	negs	r2, r2
 8009d58:	b212      	sxth	r2, r2
 8009d5a:	e7e5      	b.n	8009d28 <VL53L1_calc_range_ignore_threshold+0x1c>
	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 8009d5c:	331f      	adds	r3, #31
 8009d5e:	e7f0      	b.n	8009d42 <VL53L1_calc_range_ignore_threshold+0x36>
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 8009d60:	b298      	uxth	r0, r3
 8009d62:	bd10      	pop	{r4, pc}
 8009d64:	10624dd3 	.word	0x10624dd3

08009d68 <VL53L1_calc_timeout_mclks>:
	uint32_t timeout_mclks   = 0;

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 8009d68:	084b      	lsrs	r3, r1, #1
 8009d6a:	eb03 3000 	add.w	r0, r3, r0, lsl #12
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
}
 8009d6e:	fbb0 f0f1 	udiv	r0, r0, r1
 8009d72:	4770      	bx	lr

08009d74 <VL53L1_calc_timeout_us>:
	uint32_t timeout_us     = 0;
	uint64_t tmp            = 0;

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 8009d74:	fba0 0101 	umull	r0, r1, r0, r1
	tmp += 0x00800;
 8009d78:	f510 6200 	adds.w	r2, r0, #2048	; 0x800
 8009d7c:	f141 0300 	adc.w	r3, r1, #0
	tmp  = tmp >> 12;
 8009d80:	0b10      	lsrs	r0, r2, #12
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
}
 8009d82:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8009d86:	4770      	bx	lr

08009d88 <VL53L1_encode_timeout>:

	uint16_t encoded_timeout = 0;
	uint32_t ls_byte = 0;
	uint16_t ms_byte = 0;

	if (timeout_mclks > 0) {
 8009d88:	b170      	cbz	r0, 8009da8 <VL53L1_encode_timeout+0x20>
		ls_byte = timeout_mclks - 1;
 8009d8a:	3801      	subs	r0, #1
	uint16_t ms_byte = 0;
 8009d8c:	2300      	movs	r3, #0

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009d8e:	e002      	b.n	8009d96 <VL53L1_encode_timeout+0xe>
			ls_byte = ls_byte >> 1;
 8009d90:	0840      	lsrs	r0, r0, #1
			ms_byte++;
 8009d92:	3301      	adds	r3, #1
 8009d94:	b29b      	uxth	r3, r3
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009d96:	f030 02ff 	bics.w	r2, r0, #255	; 0xff
 8009d9a:	d1f9      	bne.n	8009d90 <VL53L1_encode_timeout+0x8>
		}

		encoded_timeout = (ms_byte << 8)
 8009d9c:	021b      	lsls	r3, r3, #8
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	fa53 f080 	uxtab	r0, r3, r0
 8009da4:	b280      	uxth	r0, r0
 8009da6:	4770      	bx	lr
	uint16_t encoded_timeout = 0;
 8009da8:	2000      	movs	r0, #0
				+ (uint16_t) (ls_byte & 0x000000FF);
	}

	return encoded_timeout;
}
 8009daa:	4770      	bx	lr

08009dac <VL53L1_calc_encoded_timeout>:
{
 8009dac:	b508      	push	{r3, lr}
	timeout_mclks   =
 8009dae:	f7ff ffdb 	bl	8009d68 <VL53L1_calc_timeout_mclks>
	timeout_encoded =
 8009db2:	f7ff ffe9 	bl	8009d88 <VL53L1_encode_timeout>
}
 8009db6:	bd08      	pop	{r3, pc}

08009db8 <VL53L1_decode_timeout>:
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8009db8:	b2c3      	uxtb	r3, r0
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8009dba:	0a00      	lsrs	r0, r0, #8
 8009dbc:	fa03 f000 	lsl.w	r0, r3, r0

	return timeout_macro_clks;
}
 8009dc0:	3001      	adds	r0, #1
 8009dc2:	4770      	bx	lr

08009dc4 <VL53L1_calc_decoded_timeout_us>:
{
 8009dc4:	b510      	push	{r4, lr}
 8009dc6:	460c      	mov	r4, r1
	timeout_mclks =
 8009dc8:	f7ff fff6 	bl	8009db8 <VL53L1_decode_timeout>
	timeout_us    =
 8009dcc:	4621      	mov	r1, r4
 8009dce:	f7ff ffd1 	bl	8009d74 <VL53L1_calc_timeout_us>
}
 8009dd2:	bd10      	pop	{r4, pc}

08009dd4 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 8009dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dd8:	9c09      	ldr	r4, [sp, #36]	; 0x24
	uint32_t timeout_mclks      = 0;
	uint16_t timeout_encoded    = 0;

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 8009dda:	b3cb      	cbz	r3, 8009e50 <VL53L1_calc_timeout_register_values+0x7c>
 8009ddc:	461f      	mov	r7, r3
 8009dde:	4615      	mov	r5, r2
 8009de0:	460e      	mov	r6, r1
 8009de2:	4680      	mov	r8, r0
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
 8009de4:	79a1      	ldrb	r1, [r4, #6]
 8009de6:	4618      	mov	r0, r3
 8009de8:	f7ff ff7f 	bl	8009cea <VL53L1_calc_macro_period_us>
 8009dec:	4681      	mov	r9, r0
				VL53L1_calc_macro_period_us(
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
 8009dee:	4601      	mov	r1, r0
 8009df0:	4640      	mov	r0, r8
 8009df2:	f7ff ffb9 	bl	8009d68 <VL53L1_calc_timeout_mclks>
			VL53L1_calc_timeout_mclks(
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 8009df6:	28ff      	cmp	r0, #255	; 0xff
 8009df8:	d900      	bls.n	8009dfc <VL53L1_calc_timeout_register_values+0x28>
			timeout_mclks = 0xFF;
 8009dfa:	20ff      	movs	r0, #255	; 0xff

		pgeneral->phasecal_config__timeout_macrop =
 8009dfc:	9b08      	ldr	r3, [sp, #32]
 8009dfe:	71d8      	strb	r0, [r3, #7]
				(uint8_t)timeout_mclks;

		/*  Update MM Timing A timeout */
		timeout_encoded =
 8009e00:	4649      	mov	r1, r9
 8009e02:	4630      	mov	r0, r6
 8009e04:	f7ff ffd2 	bl	8009dac <VL53L1_calc_encoded_timeout>
			VL53L1_calc_encoded_timeout(
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8009e08:	f3c0 2307 	ubfx	r3, r0, #8, #8
		ptiming->mm_config__timeout_macrop_a_hi =
 8009e0c:	7023      	strb	r3, [r4, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
 8009e0e:	7060      	strb	r0, [r4, #1]
				(uint8_t) (timeout_encoded & 0x00FF);

		/* Update Range Timing A timeout */
		timeout_encoded =
 8009e10:	4649      	mov	r1, r9
 8009e12:	4628      	mov	r0, r5
 8009e14:	f7ff ffca 	bl	8009dac <VL53L1_calc_encoded_timeout>
			VL53L1_calc_encoded_timeout(
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8009e18:	f3c0 2307 	ubfx	r3, r0, #8, #8
		ptiming->range_config__timeout_macrop_a_hi =
 8009e1c:	7123      	strb	r3, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo =
 8009e1e:	7160      	strb	r0, [r4, #5]
				(uint8_t) (timeout_encoded & 0x00FF);

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
 8009e20:	7a61      	ldrb	r1, [r4, #9]
 8009e22:	4638      	mov	r0, r7
 8009e24:	f7ff ff61 	bl	8009cea <VL53L1_calc_macro_period_us>
 8009e28:	4607      	mov	r7, r0
				VL53L1_calc_macro_period_us(
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
 8009e2a:	4601      	mov	r1, r0
 8009e2c:	4630      	mov	r0, r6
 8009e2e:	f7ff ffbd 	bl	8009dac <VL53L1_calc_encoded_timeout>
				VL53L1_calc_encoded_timeout(
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8009e32:	f3c0 2307 	ubfx	r3, r0, #8, #8
		ptiming->mm_config__timeout_macrop_b_hi =
 8009e36:	70a3      	strb	r3, [r4, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
 8009e38:	70e0      	strb	r0, [r4, #3]
				(uint8_t) (timeout_encoded & 0x00FF);

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 8009e3a:	4639      	mov	r1, r7
 8009e3c:	4628      	mov	r0, r5
 8009e3e:	f7ff ffb5 	bl	8009dac <VL53L1_calc_encoded_timeout>
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8009e42:	f3c0 2307 	ubfx	r3, r0, #8, #8
		ptiming->range_config__timeout_macrop_b_hi =
 8009e46:	71e3      	strb	r3, [r4, #7]
		ptiming->range_config__timeout_macrop_b_lo =
 8009e48:	7220      	strb	r0, [r4, #8]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009e4a:	2000      	movs	r0, #0
 8009e4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8009e50:	f06f 000e 	mvn.w	r0, #14

	LOG_FUNCTION_END(0);

	return status;

}
 8009e54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08009e58 <VL53L1_encode_row_col>:
{
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 8009e58:	2807      	cmp	r0, #7
 8009e5a:	d807      	bhi.n	8009e6c <VL53L1_encode_row_col+0x14>
		*pspad_number = 128 + (col << 3) + (15-row);
	} else {
		*pspad_number = ((15-col) << 3) + row;
 8009e5c:	f1c1 010f 	rsb	r1, r1, #15
 8009e60:	b2c9      	uxtb	r1, r1
 8009e62:	00c9      	lsls	r1, r1, #3
 8009e64:	b2c9      	uxtb	r1, r1
 8009e66:	4408      	add	r0, r1
 8009e68:	7010      	strb	r0, [r2, #0]
 8009e6a:	4770      	bx	lr
		*pspad_number = 128 + (col << 3) + (15-row);
 8009e6c:	00c9      	lsls	r1, r1, #3
 8009e6e:	b2c9      	uxtb	r1, r1
 8009e70:	1a08      	subs	r0, r1, r0
 8009e72:	3871      	subs	r0, #113	; 0x71
 8009e74:	7010      	strb	r0, [r2, #0]
 8009e76:	4770      	bx	lr

08009e78 <VL53L1_decode_zone_size>:
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 8009e78:	0903      	lsrs	r3, r0, #4
 8009e7a:	7013      	strb	r3, [r2, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 8009e7c:	f000 000f 	and.w	r0, r0, #15
 8009e80:	7008      	strb	r0, [r1, #0]
 8009e82:	4770      	bx	lr

08009e84 <VL53L1_encode_zone_size>:
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 8009e84:	0109      	lsls	r1, r1, #4
 8009e86:	b2c9      	uxtb	r1, r1
 8009e88:	4401      	add	r1, r0
 8009e8a:	7011      	strb	r1, [r2, #0]
 8009e8c:	4770      	bx	lr

08009e8e <VL53L1_low_power_auto_data_init>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 8009e8e:	2303      	movs	r3, #3
 8009e90:	f880 32e4 	strb.w	r3, [r0, #740]	; 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 8009e94:	2300      	movs	r3, #0
 8009e96:	f880 32e5 	strb.w	r3, [r0, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 8009e9a:	f880 32e6 	strb.w	r3, [r0, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 8009e9e:	f880 32e7 	strb.w	r3, [r0, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 8009ea2:	f880 32e8 	strb.w	r3, [r0, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 8009ea6:	f880 32e9 	strb.w	r3, [r0, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 8009eaa:	f880 32ea 	strb.w	r3, [r0, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 8009eae:	f8c0 32ec 	str.w	r3, [r0, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 8009eb2:	f8a0 32f0 	strh.w	r3, [r0, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	4770      	bx	lr

08009eba <VL53L1_low_power_auto_data_stop_range>:

VL53L1_Error VL53L1_low_power_auto_data_stop_range(
	VL53L1_DEV                          Dev
	)
{
 8009eba:	4603      	mov	r3, r0
	LOG_FUNCTION_START("");

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 8009ebc:	22ff      	movs	r2, #255	; 0xff
 8009ebe:	f880 22e6 	strb.w	r2, [r0, #742]	; 0x2e6

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f880 22ea 	strb.w	r2, [r0, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 8009ec8:	f8c0 22ec 	str.w	r2, [r0, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 8009ecc:	f8a0 22f0 	strh.w	r2, [r0, #752]	; 0x2f0

	/* restore vhv configs */
	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 8009ed0:	f890 22e8 	ldrb.w	r2, [r0, #744]	; 0x2e8
 8009ed4:	b10a      	cbz	r2, 8009eda <VL53L1_low_power_auto_data_stop_range+0x20>
		pdev->stat_nvm.vhv_config__init =
 8009ed6:	f880 2163 	strb.w	r2, [r0, #355]	; 0x163
			pdev->low_power_auto_data.saved_vhv_init;
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 8009eda:	f893 22e9 	ldrb.w	r2, [r3, #745]	; 0x2e9
 8009ede:	b10a      	cbz	r2, 8009ee4 <VL53L1_low_power_auto_data_stop_range+0x2a>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8009ee0:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
			pdev->low_power_auto_data.saved_vhv_timeout;

	/* remove phasecal override */
	pdev->gen_cfg.phasecal_config__override = 0x00;
 8009ee4:	2000      	movs	r0, #0
 8009ee6:	f883 018d 	strb.w	r0, [r3, #397]	; 0x18d

	LOG_FUNCTION_END(status);

	return status;
}
 8009eea:	4770      	bx	lr

08009eec <VL53L1_config_low_power_auto_mode>:
	VL53L1_Error  status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 8009eec:	2301      	movs	r3, #1
 8009eee:	7053      	strb	r3, [r2, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	7093      	strb	r3, [r2, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 8009ef4:	228b      	movs	r2, #139	; 0x8b
 8009ef6:	744a      	strb	r2, [r1, #17]
			/* VL53L1_SEQUENCE_MM1_EN | \*/
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	/* Set DSS to manual/expected SPADs */
	pgeneral->dss_config__manual_effective_spads_select = 200 << 8;
 8009ef8:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 8009efc:	8202      	strh	r2, [r0, #16]
	pgeneral->dss_config__roi_mode_control =
 8009efe:	2202      	movs	r2, #2
 8009f00:	7282      	strb	r2, [r0, #10]
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

	LOG_FUNCTION_END(status);

	return status;
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	4770      	bx	lr

08009f06 <VL53L1_low_power_auto_setup_manual_calibration>:

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 8009f06:	f890 2163 	ldrb.w	r2, [r0, #355]	; 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 8009f0a:	f880 22e8 	strb.w	r2, [r0, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8009f0e:	f890 3160 	ldrb.w	r3, [r0, #352]	; 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 8009f12:	f880 32e9 	strb.w	r3, [r0, #745]	; 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 8009f16:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009f1a:	f880 2163 	strb.w	r2, [r0, #355]	; 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8009f1e:	f003 0303 	and.w	r3, r3, #3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 8009f22:	f890 22e4 	ldrb.w	r2, [r0, #740]	; 0x2e4
 8009f26:	0092      	lsls	r2, r2, #2
 8009f28:	b2d2      	uxtb	r2, r2
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8009f2a:	4413      	add	r3, r2
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8009f2c:	f880 3160 	strb.w	r3, [r0, #352]	; 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 8009f30:	2301      	movs	r3, #1
 8009f32:	f880 318d 	strb.w	r3, [r0, #397]	; 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 8009f36:	f890 32ae 	ldrb.w	r3, [r0, #686]	; 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 8009f3a:	f880 32ea 	strb.w	r3, [r0, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 8009f3e:	f880 3187 	strb.w	r3, [r0, #391]	; 0x187
		pdev->low_power_auto_data.first_run_phasecal_result;

	LOG_FUNCTION_END(status);

	return status;
}
 8009f42:	2000      	movs	r0, #0
 8009f44:	4770      	bx	lr

08009f46 <VL53L1_low_power_auto_update_DSS>:

VL53L1_Error VL53L1_low_power_auto_update_DSS(
	VL53L1_DEV        Dev)
{
 8009f46:	4602      	mov	r2, r0
	LOG_FUNCTION_START("");

	/* Calc total rate per spad */

	/* 9.7 format */
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 8009f48:	f8b0 31de 	ldrh.w	r3, [r0, #478]	; 0x1de
		pdev->sys_results.result__ambient_count_rate_mcps_sd0;
 8009f4c:	f8b0 11d6 	ldrh.w	r1, [r0, #470]	; 0x1d6
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 8009f50:	440b      	add	r3, r1

	/* clip to 16 bits */
	if (utemp32a > 0xFFFF)
 8009f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f56:	d301      	bcc.n	8009f5c <VL53L1_low_power_auto_update_DSS+0x16>
		utemp32a = 0xFFFF;
 8009f58:	f64f 73ff 	movw	r3, #65535	; 0xffff

	/* shift up to take advantage of 32 bits */
	/* 9.23 format */
	utemp32a = utemp32a << 16;
 8009f5c:	041b      	lsls	r3, r3, #16

	/* check SPAD count */
	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 8009f5e:	f8b2 11d2 	ldrh.w	r1, [r2, #466]	; 0x1d2
 8009f62:	b1c1      	cbz	r1, 8009f96 <VL53L1_low_power_auto_update_DSS+0x50>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
	else {
		/* format 17.15 */
		utemp32a = utemp32a /
 8009f64:	fbb3 f3f1 	udiv	r3, r3, r1
			pdev->sys_results.result__dss_actual_effective_spads_sd0;
		/* save intermediate result */
		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 8009f68:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
			utemp32a;

		/* get the target rate and shift up by 16
		 * format 9.23 */
		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 8009f6c:	f8b2 1164 	ldrh.w	r1, [r2, #356]	; 0x164
 8009f70:	0409      	lsls	r1, r1, #16
			16;

		/* check for divide by zero */
		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps == 0)
 8009f72:	b1b3      	cbz	r3, 8009fa2 <VL53L1_low_power_auto_update_DSS+0x5c>
			status = VL53L1_ERROR_DIVISION_BY_ZERO;
		else {
			/* divide by rate per spad
			 * format 24.8 */
			utemp32a = utemp32a /
 8009f74:	fbb1 f3f3 	udiv	r3, r1, r3
				pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;

			/* clip to 16 bit */
			if (utemp32a > 0xFFFF)
 8009f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f7c:	d301      	bcc.n	8009f82 <VL53L1_low_power_auto_update_DSS+0x3c>
				utemp32a = 0xFFFF;
 8009f7e:	f64f 73ff 	movw	r3, #65535	; 0xffff

			/* save result in low power auto data */
			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 8009f82:	b29b      	uxth	r3, r3
			pdev->low_power_auto_data.dss__required_spads =
 8009f84:	f8a2 32f0 	strh.w	r3, [r2, #752]	; 0x2f0

			/* override DSS config */
			pdev->gen_cfg.dss_config__manual_effective_spads_select =
 8009f88:	f8a2 3194 	strh.w	r3, [r2, #404]	; 0x194
				pdev->low_power_auto_data.dss__required_spads;
			pdev->gen_cfg.dss_config__roi_mode_control =
 8009f8c:	2302      	movs	r3, #2
 8009f8e:	f882 318e 	strb.w	r3, [r2, #398]	; 0x18e
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009f92:	2000      	movs	r0, #0
 8009f94:	e001      	b.n	8009f9a <VL53L1_low_power_auto_update_DSS+0x54>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8009f96:	f06f 000e 	mvn.w	r0, #14
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53L1_ERROR_DIVISION_BY_ZERO) {
 8009f9a:	f110 0f0f 	cmn.w	r0, #15
 8009f9e:	d003      	beq.n	8009fa8 <VL53L1_low_power_auto_update_DSS+0x62>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8009fa0:	4770      	bx	lr
			status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8009fa2:	f06f 000e 	mvn.w	r0, #14
 8009fa6:	e7f8      	b.n	8009f9a <VL53L1_low_power_auto_update_DSS+0x54>
		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 8009fa8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fac:	f8a2 32f0 	strh.w	r3, [r2, #752]	; 0x2f0
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 8009fb0:	f8a2 3194 	strh.w	r3, [r2, #404]	; 0x194
		pdev->gen_cfg.dss_config__roi_mode_control =
 8009fb4:	2302      	movs	r3, #2
 8009fb6:	f882 318e 	strb.w	r3, [r2, #398]	; 0x18e
		status = VL53L1_ERROR_NONE;
 8009fba:	2000      	movs	r0, #0
 8009fbc:	e7f0      	b.n	8009fa0 <VL53L1_low_power_auto_update_DSS+0x5a>

08009fbe <VL53L1_calc_pll_period_us>:
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
}
 8009fbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009fc2:	fb93 f0f0 	sdiv	r0, r3, r0
 8009fc6:	4770      	bx	lr

08009fc8 <VL53L1_decode_vcsel_period>:
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8009fc8:	3001      	adds	r0, #1
 8009fca:	b2c0      	uxtb	r0, r0
 8009fcc:	0040      	lsls	r0, r0, #1

	return vcsel_period_pclks;
}
 8009fce:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 8009fd2:	4770      	bx	lr

08009fd4 <VL53L1_decode_row_col>:
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 8009fd4:	f010 0f80 	tst.w	r0, #128	; 0x80
 8009fd8:	d107      	bne.n	8009fea <VL53L1_decode_row_col+0x16>
		*prow = 8 + ((255-spad_number) & 0x07);
		*pcol = (spad_number-128) >> 3;
	} else {
		*prow = spad_number & 0x07;
 8009fda:	f000 0307 	and.w	r3, r0, #7
 8009fde:	700b      	strb	r3, [r1, #0]
		*pcol = (127-spad_number) >> 3;
 8009fe0:	f1c0 007f 	rsb	r0, r0, #127	; 0x7f
 8009fe4:	10c0      	asrs	r0, r0, #3
 8009fe6:	7010      	strb	r0, [r2, #0]
 8009fe8:	4770      	bx	lr
		*prow = 8 + ((255-spad_number) & 0x07);
 8009fea:	43c3      	mvns	r3, r0
 8009fec:	f003 0307 	and.w	r3, r3, #7
 8009ff0:	3308      	adds	r3, #8
 8009ff2:	700b      	strb	r3, [r1, #0]
		*pcol = (spad_number-128) >> 3;
 8009ff4:	3880      	subs	r0, #128	; 0x80
 8009ff6:	10c0      	asrs	r0, r0, #3
 8009ff8:	7010      	strb	r0, [r2, #0]
 8009ffa:	4770      	bx	lr

08009ffc <VL53L1_i2c_encode_static_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8009ffc:	290a      	cmp	r1, #10
 8009ffe:	d927      	bls.n	800a050 <VL53L1_i2c_encode_static_nvm_managed+0x54>
{
 800a000:	b538      	push	{r3, r4, r5, lr}
 800a002:	4614      	mov	r4, r2
 800a004:	4605      	mov	r5, r0
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800a006:	7803      	ldrb	r3, [r0, #0]
 800a008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   0) =
 800a00c:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800a00e:	7843      	ldrb	r3, [r0, #1]
 800a010:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   1) =
 800a014:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800a016:	7883      	ldrb	r3, [r0, #2]
 800a018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   2) =
 800a01c:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800a01e:	78c3      	ldrb	r3, [r0, #3]
 800a020:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   3) =
 800a024:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800a026:	7903      	ldrb	r3, [r0, #4]
 800a028:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   4) =
 800a02c:	7113      	strb	r3, [r2, #4]
	VL53L1_i2c_encode_uint16_t(
 800a02e:	3205      	adds	r2, #5
 800a030:	2102      	movs	r1, #2
 800a032:	88c0      	ldrh	r0, [r0, #6]
 800a034:	f7ff fde5 	bl	8009c02 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
		pdata->vhv_config__timeout_macrop_loop_bound;
 800a038:	7a2b      	ldrb	r3, [r5, #8]
	*(pbuffer +   7) =
 800a03a:	71e3      	strb	r3, [r4, #7]
	*(pbuffer +   8) =
		pdata->vhv_config__count_thresh;
 800a03c:	7a6b      	ldrb	r3, [r5, #9]
	*(pbuffer +   8) =
 800a03e:	7223      	strb	r3, [r4, #8]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800a040:	7aab      	ldrb	r3, [r5, #10]
 800a042:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer +   9) =
 800a046:	7263      	strb	r3, [r4, #9]
	*(pbuffer +  10) =
		pdata->vhv_config__init;
 800a048:	7aeb      	ldrb	r3, [r5, #11]
	*(pbuffer +  10) =
 800a04a:	72a3      	strb	r3, [r4, #10]
	LOG_FUNCTION_END(status);


	return status;
 800a04c:	2000      	movs	r0, #0
 800a04e:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800a050:	f06f 0009 	mvn.w	r0, #9
 800a054:	4770      	bx	lr

0800a056 <VL53L1_i2c_decode_static_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800a056:	280a      	cmp	r0, #10
 800a058:	d927      	bls.n	800a0aa <VL53L1_i2c_decode_static_nvm_managed+0x54>
{
 800a05a:	b538      	push	{r3, r4, r5, lr}
 800a05c:	4614      	mov	r4, r2
 800a05e:	460d      	mov	r5, r1
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800a060:	780b      	ldrb	r3, [r1, #0]
 800a062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->i2c_slave__device_address =
 800a066:	7013      	strb	r3, [r2, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800a068:	784b      	ldrb	r3, [r1, #1]
 800a06a:	f003 030f 	and.w	r3, r3, #15
	pdata->ana_config__vhv_ref_sel_vddpix =
 800a06e:	7053      	strb	r3, [r2, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800a070:	788b      	ldrb	r3, [r1, #2]
 800a072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->ana_config__vhv_ref_sel_vquench =
 800a076:	7093      	strb	r3, [r2, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800a078:	78cb      	ldrb	r3, [r1, #3]
 800a07a:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__reg_avdd1v2_sel =
 800a07e:	70d3      	strb	r3, [r2, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800a080:	790b      	ldrb	r3, [r1, #4]
 800a082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->ana_config__fast_osc__trim =
 800a086:	7113      	strb	r3, [r2, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 800a088:	3105      	adds	r1, #5
 800a08a:	2002      	movs	r0, #2
 800a08c:	f7ff fdc9 	bl	8009c22 <VL53L1_i2c_decode_uint16_t>
	pdata->osc_measured__fast_osc__frequency =
 800a090:	80e0      	strh	r0, [r4, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800a092:	79eb      	ldrb	r3, [r5, #7]
 800a094:	7223      	strb	r3, [r4, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800a096:	7a2b      	ldrb	r3, [r5, #8]
 800a098:	7263      	strb	r3, [r4, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800a09a:	7a6b      	ldrb	r3, [r5, #9]
 800a09c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_config__offset =
 800a0a0:	72a3      	strb	r3, [r4, #10]
	pdata->vhv_config__init =
 800a0a2:	7aab      	ldrb	r3, [r5, #10]
 800a0a4:	72e3      	strb	r3, [r4, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800a0a6:	2000      	movs	r0, #0
 800a0a8:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800a0aa:	f06f 0009 	mvn.w	r0, #9
 800a0ae:	4770      	bx	lr

0800a0b0 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800a0b0:	b510      	push	{r4, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_ReadMulti(
 800a0b6:	230b      	movs	r3, #11
 800a0b8:	aa01      	add	r2, sp, #4
 800a0ba:	2101      	movs	r1, #1
 800a0bc:	f005 fe90 	bl	800fde0 <VL53L1_ReadMulti>
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	b110      	cbz	r0, 800a0ca <VL53L1_get_static_nvm_managed+0x1a>
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	b004      	add	sp, #16
 800a0c8:	bd10      	pop	{r4, pc}
		status = VL53L1_i2c_decode_static_nvm_managed(
 800a0ca:	4622      	mov	r2, r4
 800a0cc:	a901      	add	r1, sp, #4
 800a0ce:	200b      	movs	r0, #11
 800a0d0:	f7ff ffc1 	bl	800a056 <VL53L1_i2c_decode_static_nvm_managed>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	e7f5      	b.n	800a0c4 <VL53L1_get_static_nvm_managed+0x14>

0800a0d8 <VL53L1_i2c_encode_customer_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800a0d8:	2916      	cmp	r1, #22
 800a0da:	d94c      	bls.n	800a176 <VL53L1_i2c_encode_customer_nvm_managed+0x9e>
{
 800a0dc:	b538      	push	{r3, r4, r5, lr}
 800a0de:	4615      	mov	r5, r2
 800a0e0:	4604      	mov	r4, r0
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800a0e2:	7803      	ldrb	r3, [r0, #0]
	*(pbuffer +   0) =
 800a0e4:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->global_config__spad_enables_ref_1;
 800a0e6:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer +   1) =
 800a0e8:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->global_config__spad_enables_ref_2;
 800a0ea:	7883      	ldrb	r3, [r0, #2]
	*(pbuffer +   2) =
 800a0ec:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->global_config__spad_enables_ref_3;
 800a0ee:	78c3      	ldrb	r3, [r0, #3]
	*(pbuffer +   3) =
 800a0f0:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->global_config__spad_enables_ref_4;
 800a0f2:	7903      	ldrb	r3, [r0, #4]
	*(pbuffer +   4) =
 800a0f4:	7113      	strb	r3, [r2, #4]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800a0f6:	7943      	ldrb	r3, [r0, #5]
 800a0f8:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   5) =
 800a0fc:	7153      	strb	r3, [r2, #5]
	*(pbuffer +   6) =
		pdata->global_config__ref_en_start_select;
 800a0fe:	7983      	ldrb	r3, [r0, #6]
	*(pbuffer +   6) =
 800a100:	7193      	strb	r3, [r2, #6]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800a102:	79c3      	ldrb	r3, [r0, #7]
 800a104:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer +   7) =
 800a108:	71d3      	strb	r3, [r2, #7]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800a10a:	7a03      	ldrb	r3, [r0, #8]
 800a10c:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   8) =
 800a110:	7213      	strb	r3, [r2, #8]
	VL53L1_i2c_encode_uint16_t(
 800a112:	3209      	adds	r2, #9
 800a114:	2102      	movs	r1, #2
 800a116:	8940      	ldrh	r0, [r0, #10]
 800a118:	f7ff fd73 	bl	8009c02 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 800a11c:	f105 020b 	add.w	r2, r5, #11
 800a120:	2102      	movs	r1, #2
 800a122:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800a126:	f7ff fd8a 	bl	8009c3e <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 800a12a:	f105 020d 	add.w	r2, r5, #13
 800a12e:	2102      	movs	r1, #2
 800a130:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800a134:	f7ff fd83 	bl	8009c3e <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 800a138:	f105 020f 	add.w	r2, r5, #15
 800a13c:	2102      	movs	r1, #2
 800a13e:	8a20      	ldrh	r0, [r4, #16]
 800a140:	f7ff fd5f 	bl	8009c02 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800a144:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
	VL53L1_i2c_encode_int16_t(
 800a148:	f105 0211 	add.w	r2, r5, #17
 800a14c:	2102      	movs	r1, #2
 800a14e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800a152:	f7ff fd74 	bl	8009c3e <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 800a156:	f105 0213 	add.w	r2, r5, #19
 800a15a:	2102      	movs	r1, #2
 800a15c:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 800a160:	f7ff fd6d 	bl	8009c3e <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 800a164:	f105 0215 	add.w	r2, r5, #21
 800a168:	2102      	movs	r1, #2
 800a16a:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 800a16e:	f7ff fd66 	bl	8009c3e <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800a172:	2000      	movs	r0, #0
 800a174:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800a176:	f06f 0009 	mvn.w	r0, #9
 800a17a:	4770      	bx	lr

0800a17c <VL53L1_i2c_decode_customer_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800a17c:	2816      	cmp	r0, #22
 800a17e:	d947      	bls.n	800a210 <VL53L1_i2c_decode_customer_nvm_managed+0x94>
{
 800a180:	b538      	push	{r3, r4, r5, lr}
 800a182:	4614      	mov	r4, r2
 800a184:	460d      	mov	r5, r1
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800a186:	780b      	ldrb	r3, [r1, #0]
	pdata->global_config__spad_enables_ref_0 =
 800a188:	7013      	strb	r3, [r2, #0]
	pdata->global_config__spad_enables_ref_1 =
 800a18a:	784b      	ldrb	r3, [r1, #1]
 800a18c:	7053      	strb	r3, [r2, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800a18e:	788b      	ldrb	r3, [r1, #2]
 800a190:	7093      	strb	r3, [r2, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800a192:	78cb      	ldrb	r3, [r1, #3]
 800a194:	70d3      	strb	r3, [r2, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800a196:	790b      	ldrb	r3, [r1, #4]
 800a198:	7113      	strb	r3, [r2, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800a19a:	794b      	ldrb	r3, [r1, #5]
 800a19c:	f003 030f 	and.w	r3, r3, #15
	pdata->global_config__spad_enables_ref_5 =
 800a1a0:	7153      	strb	r3, [r2, #5]
	pdata->global_config__ref_en_start_select =
 800a1a2:	798b      	ldrb	r3, [r1, #6]
 800a1a4:	7193      	strb	r3, [r2, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800a1a6:	79cb      	ldrb	r3, [r1, #7]
 800a1a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ref_spad_man__num_requested_ref_spads =
 800a1ac:	71d3      	strb	r3, [r2, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800a1ae:	7a0b      	ldrb	r3, [r1, #8]
 800a1b0:	f003 0303 	and.w	r3, r3, #3
	pdata->ref_spad_man__ref_location =
 800a1b4:	7213      	strb	r3, [r2, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 800a1b6:	3109      	adds	r1, #9
 800a1b8:	2002      	movs	r0, #2
 800a1ba:	f7ff fd32 	bl	8009c22 <VL53L1_i2c_decode_uint16_t>
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800a1be:	8160      	strh	r0, [r4, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 800a1c0:	f105 010b 	add.w	r1, r5, #11
 800a1c4:	2002      	movs	r0, #2
 800a1c6:	f7ff fd4a 	bl	8009c5e <VL53L1_i2c_decode_int16_t>
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800a1ca:	81a0      	strh	r0, [r4, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 800a1cc:	f105 010d 	add.w	r1, r5, #13
 800a1d0:	2002      	movs	r0, #2
 800a1d2:	f7ff fd44 	bl	8009c5e <VL53L1_i2c_decode_int16_t>
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800a1d6:	81e0      	strh	r0, [r4, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 800a1d8:	f105 010f 	add.w	r1, r5, #15
 800a1dc:	2002      	movs	r0, #2
 800a1de:	f7ff fd20 	bl	8009c22 <VL53L1_i2c_decode_uint16_t>
	pdata->ref_spad_char__total_rate_target_mcps =
 800a1e2:	8220      	strh	r0, [r4, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800a1e4:	f105 0111 	add.w	r1, r5, #17
 800a1e8:	2002      	movs	r0, #2
 800a1ea:	f7ff fd38 	bl	8009c5e <VL53L1_i2c_decode_int16_t>
 800a1ee:	f3c0 000c 	ubfx	r0, r0, #0, #13
	pdata->algo__part_to_part_range_offset_mm =
 800a1f2:	8260      	strh	r0, [r4, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 800a1f4:	f105 0113 	add.w	r1, r5, #19
 800a1f8:	2002      	movs	r0, #2
 800a1fa:	f7ff fd30 	bl	8009c5e <VL53L1_i2c_decode_int16_t>
	pdata->mm_config__inner_offset_mm =
 800a1fe:	82a0      	strh	r0, [r4, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 800a200:	f105 0115 	add.w	r1, r5, #21
 800a204:	2002      	movs	r0, #2
 800a206:	f7ff fd2a 	bl	8009c5e <VL53L1_i2c_decode_int16_t>
	pdata->mm_config__outer_offset_mm =
 800a20a:	82e0      	strh	r0, [r4, #22]

	LOG_FUNCTION_END(status);

	return status;
 800a20c:	2000      	movs	r0, #0
 800a20e:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800a210:	f06f 0009 	mvn.w	r0, #9
 800a214:	4770      	bx	lr

0800a216 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800a216:	b510      	push	{r4, lr}
 800a218:	b086      	sub	sp, #24
 800a21a:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_ReadMulti(
 800a21c:	2317      	movs	r3, #23
 800a21e:	466a      	mov	r2, sp
 800a220:	210d      	movs	r1, #13
 800a222:	f005 fddd 	bl	800fde0 <VL53L1_ReadMulti>
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800a226:	4603      	mov	r3, r0
 800a228:	b110      	cbz	r0, 800a230 <VL53L1_get_customer_nvm_managed+0x1a>
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	b006      	add	sp, #24
 800a22e:	bd10      	pop	{r4, pc}
		status = VL53L1_i2c_decode_customer_nvm_managed(
 800a230:	4622      	mov	r2, r4
 800a232:	4669      	mov	r1, sp
 800a234:	2017      	movs	r0, #23
 800a236:	f7ff ffa1 	bl	800a17c <VL53L1_i2c_decode_customer_nvm_managed>
 800a23a:	4603      	mov	r3, r0
 800a23c:	e7f5      	b.n	800a22a <VL53L1_get_customer_nvm_managed+0x14>

0800a23e <VL53L1_i2c_encode_static_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800a23e:	291f      	cmp	r1, #31
 800a240:	d968      	bls.n	800a314 <VL53L1_i2c_encode_static_config+0xd6>
{
 800a242:	b538      	push	{r3, r4, r5, lr}
 800a244:	4614      	mov	r4, r2
 800a246:	4605      	mov	r5, r0
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	VL53L1_i2c_encode_uint16_t(
 800a248:	2102      	movs	r1, #2
 800a24a:	8800      	ldrh	r0, [r0, #0]
 800a24c:	f7ff fcd9 	bl	8009c02 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800a250:	78ab      	ldrb	r3, [r5, #2]
 800a252:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   2) =
 800a256:	70a3      	strb	r3, [r4, #2]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800a258:	78eb      	ldrb	r3, [r5, #3]
 800a25a:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   3) =
 800a25e:	70e3      	strb	r3, [r4, #3]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800a260:	792b      	ldrb	r3, [r5, #4]
 800a262:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   4) =
 800a266:	7123      	strb	r3, [r4, #4]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800a268:	796b      	ldrb	r3, [r5, #5]
 800a26a:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer +   5) =
 800a26e:	7163      	strb	r3, [r4, #5]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800a270:	79ab      	ldrb	r3, [r5, #6]
 800a272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   6) =
 800a276:	71a3      	strb	r3, [r4, #6]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800a278:	79eb      	ldrb	r3, [r5, #7]
 800a27a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   7) =
 800a27e:	71e3      	strb	r3, [r4, #7]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800a280:	7a2b      	ldrb	r3, [r5, #8]
 800a282:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   8) =
 800a286:	7223      	strb	r3, [r4, #8]
	*(pbuffer +   9) =
		pdata->pad_i2c_hv__config;
 800a288:	7a6b      	ldrb	r3, [r5, #9]
	*(pbuffer +   9) =
 800a28a:	7263      	strb	r3, [r4, #9]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800a28c:	7aab      	ldrb	r3, [r5, #10]
 800a28e:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +  10) =
 800a292:	72a3      	strb	r3, [r4, #10]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800a294:	7aeb      	ldrb	r3, [r5, #11]
 800a296:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  11) =
 800a29a:	72e3      	strb	r3, [r4, #11]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800a29c:	7b2b      	ldrb	r3, [r5, #12]
 800a29e:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer +  12) =
 800a2a2:	7323      	strb	r3, [r4, #12]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800a2a4:	7b6b      	ldrb	r3, [r5, #13]
 800a2a6:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  13) =
 800a2aa:	7363      	strb	r3, [r4, #13]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800a2ac:	7bab      	ldrb	r3, [r5, #14]
 800a2ae:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  14) =
 800a2b2:	73a3      	strb	r3, [r4, #14]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800a2b4:	7beb      	ldrb	r3, [r5, #15]
 800a2b6:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer +  15) =
 800a2ba:	73e3      	strb	r3, [r4, #15]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800a2bc:	7c2b      	ldrb	r3, [r5, #16]
 800a2be:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer +  16) =
 800a2c2:	7423      	strb	r3, [r4, #16]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800a2c4:	7c6b      	ldrb	r3, [r5, #17]
 800a2c6:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +  17) =
 800a2ca:	7463      	strb	r3, [r4, #17]
	*(pbuffer +  18) =
		pdata->sigma_estimator__effective_pulse_width_ns;
 800a2cc:	7cab      	ldrb	r3, [r5, #18]
	*(pbuffer +  18) =
 800a2ce:	74a3      	strb	r3, [r4, #18]
	*(pbuffer +  19) =
		pdata->sigma_estimator__effective_ambient_width_ns;
 800a2d0:	7ceb      	ldrb	r3, [r5, #19]
	*(pbuffer +  19) =
 800a2d2:	74e3      	strb	r3, [r4, #19]
	*(pbuffer +  20) =
		pdata->sigma_estimator__sigma_ref_mm;
 800a2d4:	7d2b      	ldrb	r3, [r5, #20]
	*(pbuffer +  20) =
 800a2d6:	7523      	strb	r3, [r4, #20]
	*(pbuffer +  21) =
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800a2d8:	7d6b      	ldrb	r3, [r5, #21]
	*(pbuffer +  21) =
 800a2da:	7563      	strb	r3, [r4, #21]
	*(pbuffer +  22) =
		pdata->spare_host_config__static_config_spare_0;
 800a2dc:	7dab      	ldrb	r3, [r5, #22]
	*(pbuffer +  22) =
 800a2de:	75a3      	strb	r3, [r4, #22]
	*(pbuffer +  23) =
		pdata->spare_host_config__static_config_spare_1;
 800a2e0:	7deb      	ldrb	r3, [r5, #23]
	*(pbuffer +  23) =
 800a2e2:	75e3      	strb	r3, [r4, #23]
	VL53L1_i2c_encode_uint16_t(
 800a2e4:	f104 0218 	add.w	r2, r4, #24
 800a2e8:	2102      	movs	r1, #2
 800a2ea:	8b28      	ldrh	r0, [r5, #24]
 800a2ec:	f7ff fc89 	bl	8009c02 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
		pdata->algo__range_ignore_valid_height_mm;
 800a2f0:	7eab      	ldrb	r3, [r5, #26]
	*(pbuffer +  26) =
 800a2f2:	76a3      	strb	r3, [r4, #26]
	*(pbuffer +  27) =
		pdata->algo__range_min_clip;
 800a2f4:	7eeb      	ldrb	r3, [r5, #27]
	*(pbuffer +  27) =
 800a2f6:	76e3      	strb	r3, [r4, #27]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800a2f8:	7f2b      	ldrb	r3, [r5, #28]
 800a2fa:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +  28) =
 800a2fe:	7723      	strb	r3, [r4, #28]
	*(pbuffer +  29) =
		pdata->spare_host_config__static_config_spare_2;
 800a300:	7f6b      	ldrb	r3, [r5, #29]
	*(pbuffer +  29) =
 800a302:	7763      	strb	r3, [r4, #29]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800a304:	7fab      	ldrb	r3, [r5, #30]
 800a306:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +  30) =
 800a30a:	77a3      	strb	r3, [r4, #30]
	*(pbuffer +  31) =
		pdata->sd_config__reset_stages_lsb;
 800a30c:	7feb      	ldrb	r3, [r5, #31]
	*(pbuffer +  31) =
 800a30e:	77e3      	strb	r3, [r4, #31]
	LOG_FUNCTION_END(status);


	return status;
 800a310:	2000      	movs	r0, #0
 800a312:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800a314:	f06f 0009 	mvn.w	r0, #9
 800a318:	4770      	bx	lr

0800a31a <VL53L1_i2c_encode_general_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 800a31a:	2915      	cmp	r1, #21
 800a31c:	d93f      	bls.n	800a39e <VL53L1_i2c_encode_general_config+0x84>
{
 800a31e:	b538      	push	{r3, r4, r5, lr}
 800a320:	4614      	mov	r4, r2
 800a322:	4605      	mov	r5, r0
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800a324:	7803      	ldrb	r3, [r0, #0]
	*(pbuffer +   0) =
 800a326:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->global_config__stream_divider;
 800a328:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer +   1) =
 800a32a:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->system__interrupt_config_gpio;
 800a32c:	7883      	ldrb	r3, [r0, #2]
	*(pbuffer +   2) =
 800a32e:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800a330:	78c3      	ldrb	r3, [r0, #3]
 800a332:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   3) =
 800a336:	70d3      	strb	r3, [r2, #3]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800a338:	8880      	ldrh	r0, [r0, #4]
	VL53L1_i2c_encode_uint16_t(
 800a33a:	3204      	adds	r2, #4
 800a33c:	2102      	movs	r1, #2
 800a33e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800a342:	f7ff fc5e 	bl	8009c02 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800a346:	79ab      	ldrb	r3, [r5, #6]
 800a348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   6) =
 800a34c:	71a3      	strb	r3, [r4, #6]
	*(pbuffer +   7) =
		pdata->phasecal_config__timeout_macrop;
 800a34e:	79eb      	ldrb	r3, [r5, #7]
	*(pbuffer +   7) =
 800a350:	71e3      	strb	r3, [r4, #7]
	*(pbuffer +   8) =
		pdata->phasecal_config__target;
 800a352:	7a2b      	ldrb	r3, [r5, #8]
	*(pbuffer +   8) =
 800a354:	7223      	strb	r3, [r4, #8]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800a356:	7a6b      	ldrb	r3, [r5, #9]
 800a358:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   9) =
 800a35c:	7263      	strb	r3, [r4, #9]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800a35e:	7aab      	ldrb	r3, [r5, #10]
 800a360:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer +  11) =
 800a364:	72e3      	strb	r3, [r4, #11]
	VL53L1_i2c_encode_uint16_t(
 800a366:	f104 020c 	add.w	r2, r4, #12
 800a36a:	2102      	movs	r1, #2
 800a36c:	89a8      	ldrh	r0, [r5, #12]
 800a36e:	f7ff fc48 	bl	8009c02 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 800a372:	f104 020e 	add.w	r2, r4, #14
 800a376:	2102      	movs	r1, #2
 800a378:	89e8      	ldrh	r0, [r5, #14]
 800a37a:	f7ff fc42 	bl	8009c02 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 800a37e:	f104 0210 	add.w	r2, r4, #16
 800a382:	2102      	movs	r1, #2
 800a384:	8a28      	ldrh	r0, [r5, #16]
 800a386:	f7ff fc3c 	bl	8009c02 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
		pdata->dss_config__manual_block_select;
 800a38a:	7cab      	ldrb	r3, [r5, #18]
	*(pbuffer +  18) =
 800a38c:	74a3      	strb	r3, [r4, #18]
	*(pbuffer +  19) =
		pdata->dss_config__aperture_attenuation;
 800a38e:	7ceb      	ldrb	r3, [r5, #19]
	*(pbuffer +  19) =
 800a390:	74e3      	strb	r3, [r4, #19]
	*(pbuffer +  20) =
		pdata->dss_config__max_spads_limit;
 800a392:	7d2b      	ldrb	r3, [r5, #20]
	*(pbuffer +  20) =
 800a394:	7523      	strb	r3, [r4, #20]
	*(pbuffer +  21) =
		pdata->dss_config__min_spads_limit;
 800a396:	7d6b      	ldrb	r3, [r5, #21]
	*(pbuffer +  21) =
 800a398:	7563      	strb	r3, [r4, #21]
	LOG_FUNCTION_END(status);


	return status;
 800a39a:	2000      	movs	r0, #0
 800a39c:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800a39e:	f06f 0009 	mvn.w	r0, #9
 800a3a2:	4770      	bx	lr

0800a3a4 <VL53L1_i2c_encode_timing_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 800a3a4:	2916      	cmp	r1, #22
 800a3a6:	d93d      	bls.n	800a424 <VL53L1_i2c_encode_timing_config+0x80>
{
 800a3a8:	b538      	push	{r3, r4, r5, lr}
 800a3aa:	4614      	mov	r4, r2
 800a3ac:	4605      	mov	r5, r0
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800a3ae:	7803      	ldrb	r3, [r0, #0]
 800a3b0:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   0) =
 800a3b4:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->mm_config__timeout_macrop_a_lo;
 800a3b6:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer +   1) =
 800a3b8:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800a3ba:	7883      	ldrb	r3, [r0, #2]
 800a3bc:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   2) =
 800a3c0:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->mm_config__timeout_macrop_b_lo;
 800a3c2:	78c3      	ldrb	r3, [r0, #3]
	*(pbuffer +   3) =
 800a3c4:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800a3c6:	7903      	ldrb	r3, [r0, #4]
 800a3c8:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   4) =
 800a3cc:	7113      	strb	r3, [r2, #4]
	*(pbuffer +   5) =
		pdata->range_config__timeout_macrop_a_lo;
 800a3ce:	7943      	ldrb	r3, [r0, #5]
	*(pbuffer +   5) =
 800a3d0:	7153      	strb	r3, [r2, #5]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800a3d2:	7983      	ldrb	r3, [r0, #6]
 800a3d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer +   6) =
 800a3d8:	7193      	strb	r3, [r2, #6]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800a3da:	79c3      	ldrb	r3, [r0, #7]
 800a3dc:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   7) =
 800a3e0:	71d3      	strb	r3, [r2, #7]
	*(pbuffer +   8) =
		pdata->range_config__timeout_macrop_b_lo;
 800a3e2:	7a03      	ldrb	r3, [r0, #8]
	*(pbuffer +   8) =
 800a3e4:	7213      	strb	r3, [r2, #8]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800a3e6:	7a43      	ldrb	r3, [r0, #9]
 800a3e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer +   9) =
 800a3ec:	7253      	strb	r3, [r2, #9]
	VL53L1_i2c_encode_uint16_t(
 800a3ee:	320a      	adds	r2, #10
 800a3f0:	2102      	movs	r1, #2
 800a3f2:	8940      	ldrh	r0, [r0, #10]
 800a3f4:	f7ff fc05 	bl	8009c02 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 800a3f8:	f104 020c 	add.w	r2, r4, #12
 800a3fc:	2102      	movs	r1, #2
 800a3fe:	89a8      	ldrh	r0, [r5, #12]
 800a400:	f7ff fbff 	bl	8009c02 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
		pdata->range_config__valid_phase_low;
 800a404:	7bab      	ldrb	r3, [r5, #14]
	*(pbuffer +  14) =
 800a406:	73a3      	strb	r3, [r4, #14]
	*(pbuffer +  15) =
		pdata->range_config__valid_phase_high;
 800a408:	7beb      	ldrb	r3, [r5, #15]
	*(pbuffer +  15) =
 800a40a:	73e3      	strb	r3, [r4, #15]
	VL53L1_i2c_encode_uint32_t(
 800a40c:	f104 0212 	add.w	r2, r4, #18
 800a410:	2104      	movs	r1, #4
 800a412:	6928      	ldr	r0, [r5, #16]
 800a414:	f7ff fc38 	bl	8009c88 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800a418:	7d2b      	ldrb	r3, [r5, #20]
 800a41a:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +  22) =
 800a41e:	75a3      	strb	r3, [r4, #22]
	LOG_FUNCTION_END(status);


	return status;
 800a420:	2000      	movs	r0, #0
 800a422:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800a424:	f06f 0009 	mvn.w	r0, #9
 800a428:	4770      	bx	lr

0800a42a <VL53L1_i2c_encode_dynamic_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800a42a:	2911      	cmp	r1, #17
 800a42c:	d93c      	bls.n	800a4a8 <VL53L1_i2c_encode_dynamic_config+0x7e>
{
 800a42e:	b538      	push	{r3, r4, r5, lr}
 800a430:	4615      	mov	r5, r2
 800a432:	4604      	mov	r4, r0
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800a434:	7803      	ldrb	r3, [r0, #0]
 800a436:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   0) =
 800a43a:	f802 3b01 	strb.w	r3, [r2], #1
	VL53L1_i2c_encode_uint16_t(
 800a43e:	2102      	movs	r1, #2
 800a440:	8840      	ldrh	r0, [r0, #2]
 800a442:	f7ff fbde 	bl	8009c02 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 800a446:	1cea      	adds	r2, r5, #3
 800a448:	2102      	movs	r1, #2
 800a44a:	88a0      	ldrh	r0, [r4, #4]
 800a44c:	f7ff fbd9 	bl	8009c02 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800a450:	79a3      	ldrb	r3, [r4, #6]
 800a452:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   5) =
 800a456:	716b      	strb	r3, [r5, #5]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800a458:	79e3      	ldrb	r3, [r4, #7]
 800a45a:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer +   6) =
 800a45e:	71ab      	strb	r3, [r5, #6]
	*(pbuffer +   7) =
		pdata->sd_config__woi_sd0;
 800a460:	7a23      	ldrb	r3, [r4, #8]
	*(pbuffer +   7) =
 800a462:	71eb      	strb	r3, [r5, #7]
	*(pbuffer +   8) =
		pdata->sd_config__woi_sd1;
 800a464:	7a63      	ldrb	r3, [r4, #9]
	*(pbuffer +   8) =
 800a466:	722b      	strb	r3, [r5, #8]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800a468:	7aa3      	ldrb	r3, [r4, #10]
 800a46a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   9) =
 800a46e:	726b      	strb	r3, [r5, #9]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800a470:	7ae3      	ldrb	r3, [r4, #11]
 800a472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +  10) =
 800a476:	72ab      	strb	r3, [r5, #10]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800a478:	7b23      	ldrb	r3, [r4, #12]
 800a47a:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  11) =
 800a47e:	72eb      	strb	r3, [r5, #11]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 800a480:	7b63      	ldrb	r3, [r4, #13]
 800a482:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  12) =
 800a486:	732b      	strb	r3, [r5, #12]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 800a488:	7ba3      	ldrb	r3, [r4, #14]
 800a48a:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +  13) =
 800a48e:	736b      	strb	r3, [r5, #13]
	*(pbuffer +  14) =
		pdata->roi_config__user_roi_centre_spad;
 800a490:	7be3      	ldrb	r3, [r4, #15]
	*(pbuffer +  14) =
 800a492:	73ab      	strb	r3, [r5, #14]
	*(pbuffer +  15) =
		pdata->roi_config__user_roi_requested_global_xy_size;
 800a494:	7c23      	ldrb	r3, [r4, #16]
	*(pbuffer +  15) =
 800a496:	73eb      	strb	r3, [r5, #15]
	*(pbuffer +  16) =
		pdata->system__sequence_config;
 800a498:	7c63      	ldrb	r3, [r4, #17]
	*(pbuffer +  16) =
 800a49a:	742b      	strb	r3, [r5, #16]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 800a49c:	7ca3      	ldrb	r3, [r4, #18]
 800a49e:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  17) =
 800a4a2:	746b      	strb	r3, [r5, #17]
	LOG_FUNCTION_END(status);


	return status;
 800a4a4:	2000      	movs	r0, #0
 800a4a6:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800a4a8:	f06f 0009 	mvn.w	r0, #9
 800a4ac:	4770      	bx	lr

0800a4ae <VL53L1_i2c_encode_system_control>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 800a4ae:	2904      	cmp	r1, #4
 800a4b0:	d913      	bls.n	800a4da <VL53L1_i2c_encode_system_control+0x2c>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800a4b2:	7803      	ldrb	r3, [r0, #0]
 800a4b4:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   0) =
 800a4b8:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800a4ba:	7843      	ldrb	r3, [r0, #1]
 800a4bc:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   1) =
 800a4c0:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800a4c2:	7883      	ldrb	r3, [r0, #2]
 800a4c4:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   2) =
 800a4c8:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800a4ca:	78c3      	ldrb	r3, [r0, #3]
 800a4cc:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   3) =
 800a4d0:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->system__mode_start;
 800a4d2:	7903      	ldrb	r3, [r0, #4]
	*(pbuffer +   4) =
 800a4d4:	7113      	strb	r3, [r2, #4]
	LOG_FUNCTION_END(status);


	return status;
 800a4d6:	2000      	movs	r0, #0
 800a4d8:	4770      	bx	lr
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800a4da:	f06f 0009 	mvn.w	r0, #9
}
 800a4de:	4770      	bx	lr

0800a4e0 <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 800a4e0:	b510      	push	{r4, lr}
 800a4e2:	b082      	sub	sp, #8
 800a4e4:	4604      	mov	r4, r0
 800a4e6:	4608      	mov	r0, r1
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_i2c_encode_system_control(
 800a4e8:	466a      	mov	r2, sp
 800a4ea:	2105      	movs	r1, #5
 800a4ec:	f7ff ffdf 	bl	800a4ae <VL53L1_i2c_encode_system_control>
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	b110      	cbz	r0, 800a4fa <VL53L1_set_system_control+0x1a>
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	b002      	add	sp, #8
 800a4f8:	bd10      	pop	{r4, pc}
		status = VL53L1_WriteMulti(
 800a4fa:	2305      	movs	r3, #5
 800a4fc:	466a      	mov	r2, sp
 800a4fe:	2183      	movs	r1, #131	; 0x83
 800a500:	4620      	mov	r0, r4
 800a502:	f005 fc4f 	bl	800fda4 <VL53L1_WriteMulti>
 800a506:	4603      	mov	r3, r0
 800a508:	e7f4      	b.n	800a4f4 <VL53L1_set_system_control+0x14>

0800a50a <VL53L1_i2c_decode_system_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 800a50a:	282b      	cmp	r0, #43	; 0x2b
 800a50c:	f240 8089 	bls.w	800a622 <VL53L1_i2c_decode_system_results+0x118>
{
 800a510:	b538      	push	{r3, r4, r5, lr}
 800a512:	4614      	mov	r4, r2
 800a514:	460d      	mov	r5, r1
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800a516:	780b      	ldrb	r3, [r1, #0]
 800a518:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->result__interrupt_status =
 800a51c:	7013      	strb	r3, [r2, #0]
	pdata->result__range_status =
 800a51e:	784b      	ldrb	r3, [r1, #1]
 800a520:	7053      	strb	r3, [r2, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800a522:	788b      	ldrb	r3, [r1, #2]
 800a524:	f003 030f 	and.w	r3, r3, #15
	pdata->result__report_status =
 800a528:	7093      	strb	r3, [r2, #2]
	pdata->result__stream_count =
 800a52a:	78cb      	ldrb	r3, [r1, #3]
 800a52c:	70d3      	strb	r3, [r2, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 800a52e:	3104      	adds	r1, #4
 800a530:	2002      	movs	r0, #2
 800a532:	f7ff fb76 	bl	8009c22 <VL53L1_i2c_decode_uint16_t>
	pdata->result__dss_actual_effective_spads_sd0 =
 800a536:	80a0      	strh	r0, [r4, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 800a538:	1da9      	adds	r1, r5, #6
 800a53a:	2002      	movs	r0, #2
 800a53c:	f7ff fb71 	bl	8009c22 <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800a540:	80e0      	strh	r0, [r4, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 800a542:	f105 0108 	add.w	r1, r5, #8
 800a546:	2002      	movs	r0, #2
 800a548:	f7ff fb6b 	bl	8009c22 <VL53L1_i2c_decode_uint16_t>
	pdata->result__ambient_count_rate_mcps_sd0 =
 800a54c:	8120      	strh	r0, [r4, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 800a54e:	f105 010a 	add.w	r1, r5, #10
 800a552:	2002      	movs	r0, #2
 800a554:	f7ff fb65 	bl	8009c22 <VL53L1_i2c_decode_uint16_t>
	pdata->result__sigma_sd0 =
 800a558:	8160      	strh	r0, [r4, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 800a55a:	f105 010c 	add.w	r1, r5, #12
 800a55e:	2002      	movs	r0, #2
 800a560:	f7ff fb5f 	bl	8009c22 <VL53L1_i2c_decode_uint16_t>
	pdata->result__phase_sd0 =
 800a564:	81a0      	strh	r0, [r4, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 800a566:	f105 010e 	add.w	r1, r5, #14
 800a56a:	2002      	movs	r0, #2
 800a56c:	f7ff fb59 	bl	8009c22 <VL53L1_i2c_decode_uint16_t>
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800a570:	81e0      	strh	r0, [r4, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 800a572:	f105 0110 	add.w	r1, r5, #16
 800a576:	2002      	movs	r0, #2
 800a578:	f7ff fb53 	bl	8009c22 <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800a57c:	8220      	strh	r0, [r4, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 800a57e:	f105 0112 	add.w	r1, r5, #18
 800a582:	2002      	movs	r0, #2
 800a584:	f7ff fb4d 	bl	8009c22 <VL53L1_i2c_decode_uint16_t>
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800a588:	8260      	strh	r0, [r4, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 800a58a:	f105 0114 	add.w	r1, r5, #20
 800a58e:	2002      	movs	r0, #2
 800a590:	f7ff fb47 	bl	8009c22 <VL53L1_i2c_decode_uint16_t>
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800a594:	82a0      	strh	r0, [r4, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800a596:	f105 0116 	add.w	r1, r5, #22
 800a59a:	2002      	movs	r0, #2
 800a59c:	f7ff fb41 	bl	8009c22 <VL53L1_i2c_decode_uint16_t>
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800a5a0:	82e0      	strh	r0, [r4, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800a5a2:	f105 0118 	add.w	r1, r5, #24
 800a5a6:	2002      	movs	r0, #2
 800a5a8:	f7ff fb3b 	bl	8009c22 <VL53L1_i2c_decode_uint16_t>
	pdata->result__dss_actual_effective_spads_sd1 =
 800a5ac:	8320      	strh	r0, [r4, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 800a5ae:	f105 011a 	add.w	r1, r5, #26
 800a5b2:	2002      	movs	r0, #2
 800a5b4:	f7ff fb35 	bl	8009c22 <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800a5b8:	8360      	strh	r0, [r4, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 800a5ba:	f105 011c 	add.w	r1, r5, #28
 800a5be:	2002      	movs	r0, #2
 800a5c0:	f7ff fb2f 	bl	8009c22 <VL53L1_i2c_decode_uint16_t>
	pdata->result__ambient_count_rate_mcps_sd1 =
 800a5c4:	83a0      	strh	r0, [r4, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 800a5c6:	f105 011e 	add.w	r1, r5, #30
 800a5ca:	2002      	movs	r0, #2
 800a5cc:	f7ff fb29 	bl	8009c22 <VL53L1_i2c_decode_uint16_t>
	pdata->result__sigma_sd1 =
 800a5d0:	83e0      	strh	r0, [r4, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 800a5d2:	f105 0120 	add.w	r1, r5, #32
 800a5d6:	2002      	movs	r0, #2
 800a5d8:	f7ff fb23 	bl	8009c22 <VL53L1_i2c_decode_uint16_t>
	pdata->result__phase_sd1 =
 800a5dc:	8420      	strh	r0, [r4, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 800a5de:	f105 0122 	add.w	r1, r5, #34	; 0x22
 800a5e2:	2002      	movs	r0, #2
 800a5e4:	f7ff fb1d 	bl	8009c22 <VL53L1_i2c_decode_uint16_t>
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800a5e8:	8460      	strh	r0, [r4, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 800a5ea:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800a5ee:	2002      	movs	r0, #2
 800a5f0:	f7ff fb17 	bl	8009c22 <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_0_sd1 =
 800a5f4:	84a0      	strh	r0, [r4, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 800a5f6:	f105 0126 	add.w	r1, r5, #38	; 0x26
 800a5fa:	2002      	movs	r0, #2
 800a5fc:	f7ff fb11 	bl	8009c22 <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_1_sd1 =
 800a600:	84e0      	strh	r0, [r4, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 800a602:	f105 0128 	add.w	r1, r5, #40	; 0x28
 800a606:	2002      	movs	r0, #2
 800a608:	f7ff fb0b 	bl	8009c22 <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_2_sd1 =
 800a60c:	8520      	strh	r0, [r4, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 800a60e:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 800a612:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800a616:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800a61a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800a61e:	2000      	movs	r0, #0
 800a620:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800a622:	f06f 0009 	mvn.w	r0, #9
 800a626:	4770      	bx	lr

0800a628 <VL53L1_i2c_decode_core_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 800a628:	2820      	cmp	r0, #32
 800a62a:	d935      	bls.n	800a698 <VL53L1_i2c_decode_core_results+0x70>
{
 800a62c:	b538      	push	{r3, r4, r5, lr}
 800a62e:	4614      	mov	r4, r2
 800a630:	460d      	mov	r5, r1
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 800a632:	2004      	movs	r0, #4
 800a634:	f7ff fb38 	bl	8009ca8 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ambient_window_events_sd0 =
 800a638:	6020      	str	r0, [r4, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 800a63a:	1d29      	adds	r1, r5, #4
 800a63c:	2004      	movs	r0, #4
 800a63e:	f7ff fb33 	bl	8009ca8 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ranging_total_events_sd0 =
 800a642:	6060      	str	r0, [r4, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 800a644:	f105 0108 	add.w	r1, r5, #8
 800a648:	2004      	movs	r0, #4
 800a64a:	f7ff fb3a 	bl	8009cc2 <VL53L1_i2c_decode_int32_t>
	pdata->result_core__signal_total_events_sd0 =
 800a64e:	60a0      	str	r0, [r4, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 800a650:	f105 010c 	add.w	r1, r5, #12
 800a654:	2004      	movs	r0, #4
 800a656:	f7ff fb27 	bl	8009ca8 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__total_periods_elapsed_sd0 =
 800a65a:	60e0      	str	r0, [r4, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 800a65c:	f105 0110 	add.w	r1, r5, #16
 800a660:	2004      	movs	r0, #4
 800a662:	f7ff fb21 	bl	8009ca8 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ambient_window_events_sd1 =
 800a666:	6120      	str	r0, [r4, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 800a668:	f105 0114 	add.w	r1, r5, #20
 800a66c:	2004      	movs	r0, #4
 800a66e:	f7ff fb1b 	bl	8009ca8 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ranging_total_events_sd1 =
 800a672:	6160      	str	r0, [r4, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 800a674:	f105 0118 	add.w	r1, r5, #24
 800a678:	2004      	movs	r0, #4
 800a67a:	f7ff fb22 	bl	8009cc2 <VL53L1_i2c_decode_int32_t>
	pdata->result_core__signal_total_events_sd1 =
 800a67e:	61a0      	str	r0, [r4, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 800a680:	f105 011c 	add.w	r1, r5, #28
 800a684:	2004      	movs	r0, #4
 800a686:	f7ff fb0f 	bl	8009ca8 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__total_periods_elapsed_sd1 =
 800a68a:	61e0      	str	r0, [r4, #28]
	pdata->result_core__spare_0 =
 800a68c:	f895 3020 	ldrb.w	r3, [r5, #32]
 800a690:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800a694:	2000      	movs	r0, #0
 800a696:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800a698:	f06f 0009 	mvn.w	r0, #9
 800a69c:	4770      	bx	lr

0800a69e <VL53L1_i2c_decode_debug_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 800a69e:	2837      	cmp	r0, #55	; 0x37
 800a6a0:	f240 80d3 	bls.w	800a84a <VL53L1_i2c_decode_debug_results+0x1ac>
{
 800a6a4:	b538      	push	{r3, r4, r5, lr}
 800a6a6:	4614      	mov	r4, r2
 800a6a8:	460d      	mov	r5, r1
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 800a6aa:	2002      	movs	r0, #2
 800a6ac:	f7ff fab9 	bl	8009c22 <VL53L1_i2c_decode_uint16_t>
	pdata->phasecal_result__reference_phase =
 800a6b0:	8020      	strh	r0, [r4, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800a6b2:	78ab      	ldrb	r3, [r5, #2]
 800a6b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->phasecal_result__vcsel_start =
 800a6b8:	70a3      	strb	r3, [r4, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800a6ba:	78eb      	ldrb	r3, [r5, #3]
 800a6bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800a6c0:	70e3      	strb	r3, [r4, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800a6c2:	792b      	ldrb	r3, [r5, #4]
 800a6c4:	f003 0303 	and.w	r3, r3, #3
	pdata->ref_spad_char_result__ref_location =
 800a6c8:	7123      	strb	r3, [r4, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 800a6ca:	796b      	ldrb	r3, [r5, #5]
 800a6cc:	f003 0301 	and.w	r3, r3, #1
	pdata->vhv_result__coldboot_status =
 800a6d0:	7163      	strb	r3, [r4, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 800a6d2:	79ab      	ldrb	r3, [r5, #6]
 800a6d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_result__search_result =
 800a6d8:	71a3      	strb	r3, [r4, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 800a6da:	79eb      	ldrb	r3, [r5, #7]
 800a6dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_result__latest_setting =
 800a6e0:	71e3      	strb	r3, [r4, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 800a6e2:	f105 0108 	add.w	r1, r5, #8
 800a6e6:	2002      	movs	r0, #2
 800a6e8:	f7ff fa9b 	bl	8009c22 <VL53L1_i2c_decode_uint16_t>
 800a6ec:	f3c0 0009 	ubfx	r0, r0, #0, #10
	pdata->result__osc_calibrate_val =
 800a6f0:	8120      	strh	r0, [r4, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 800a6f2:	7aab      	ldrb	r3, [r5, #10]
 800a6f4:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__powerdown_go1 =
 800a6f8:	72a3      	strb	r3, [r4, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 800a6fa:	7aeb      	ldrb	r3, [r5, #11]
 800a6fc:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__ref_bg_ctrl =
 800a700:	72e3      	strb	r3, [r4, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 800a702:	7b2b      	ldrb	r3, [r5, #12]
 800a704:	f003 030f 	and.w	r3, r3, #15
	pdata->ana_config__regdvdd1v2_ctrl =
 800a708:	7323      	strb	r3, [r4, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 800a70a:	7b6b      	ldrb	r3, [r5, #13]
 800a70c:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__osc_slow_ctrl =
 800a710:	7363      	strb	r3, [r4, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 800a712:	7bab      	ldrb	r3, [r5, #14]
 800a714:	f003 0301 	and.w	r3, r3, #1
	pdata->test_mode__status =
 800a718:	73a3      	strb	r3, [r4, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 800a71a:	7beb      	ldrb	r3, [r5, #15]
 800a71c:	f003 0303 	and.w	r3, r3, #3
	pdata->firmware__system_status =
 800a720:	73e3      	strb	r3, [r4, #15]
	pdata->firmware__mode_status =
 800a722:	7c2b      	ldrb	r3, [r5, #16]
 800a724:	7423      	strb	r3, [r4, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 800a726:	7c6b      	ldrb	r3, [r5, #17]
 800a728:	7463      	strb	r3, [r4, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 800a72a:	f105 0112 	add.w	r1, r5, #18
 800a72e:	2002      	movs	r0, #2
 800a730:	f7ff fa77 	bl	8009c22 <VL53L1_i2c_decode_uint16_t>
 800a734:	f3c0 000b 	ubfx	r0, r0, #0, #12
	pdata->firmware__cal_repeat_rate_counter =
 800a738:	8260      	strh	r0, [r4, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800a73a:	f105 0116 	add.w	r1, r5, #22
 800a73e:	2002      	movs	r0, #2
 800a740:	f7ff fa6f 	bl	8009c22 <VL53L1_i2c_decode_uint16_t>
	pdata->gph__system__thresh_high =
 800a744:	82a0      	strh	r0, [r4, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800a746:	f105 0118 	add.w	r1, r5, #24
 800a74a:	2002      	movs	r0, #2
 800a74c:	f7ff fa69 	bl	8009c22 <VL53L1_i2c_decode_uint16_t>
	pdata->gph__system__thresh_low =
 800a750:	82e0      	strh	r0, [r4, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 800a752:	7eab      	ldrb	r3, [r5, #26]
 800a754:	f003 0301 	and.w	r3, r3, #1
	pdata->gph__system__enable_xtalk_per_quadrant =
 800a758:	7623      	strb	r3, [r4, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 800a75a:	7eeb      	ldrb	r3, [r5, #27]
 800a75c:	f003 0307 	and.w	r3, r3, #7
	pdata->gph__spare_0 =
 800a760:	7663      	strb	r3, [r4, #25]
	pdata->gph__sd_config__woi_sd0 =
 800a762:	7f2b      	ldrb	r3, [r5, #28]
 800a764:	76a3      	strb	r3, [r4, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 800a766:	7f6b      	ldrb	r3, [r5, #29]
 800a768:	76e3      	strb	r3, [r4, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 800a76a:	7fab      	ldrb	r3, [r5, #30]
 800a76c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->gph__sd_config__initial_phase_sd0 =
 800a770:	7723      	strb	r3, [r4, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800a772:	7feb      	ldrb	r3, [r5, #31]
 800a774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->gph__sd_config__initial_phase_sd1 =
 800a778:	7763      	strb	r3, [r4, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 800a77a:	f895 3020 	ldrb.w	r3, [r5, #32]
 800a77e:	f003 0303 	and.w	r3, r3, #3
	pdata->gph__sd_config__first_order_select =
 800a782:	77a3      	strb	r3, [r4, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 800a784:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800a788:	f003 030f 	and.w	r3, r3, #15
	pdata->gph__sd_config__quantifier =
 800a78c:	77e3      	strb	r3, [r4, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 800a78e:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800a792:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 800a796:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 800a79a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 800a79e:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800a7a2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 800a7a6:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 800a7aa:	f003 0301 	and.w	r3, r3, #1
	pdata->gph__gph_id =
 800a7ae:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 800a7b2:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 800a7b6:	f003 0303 	and.w	r3, r3, #3
	pdata->system__interrupt_set =
 800a7ba:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 800a7be:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
 800a7c2:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__enables =
 800a7c6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 800a7ca:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800a7ce:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__clear =
 800a7d2:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 800a7d6:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 800a7da:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__status =
 800a7de:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 800a7e2:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 800a7e6:	f003 0301 	and.w	r3, r3, #1
	pdata->mcu_to_host_bank__wr_access_en =
 800a7ea:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 800a7ee:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800a7f2:	f003 0301 	and.w	r3, r3, #1
	pdata->power_management__go1_reset_status =
 800a7f6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 800a7fa:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800a7fe:	f003 0303 	and.w	r3, r3, #3
	pdata->pad_startup_mode__value_ro =
 800a802:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 800a806:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800a80a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->pad_startup_mode__value_ctrl =
 800a80e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 800a812:	f105 012e 	add.w	r1, r5, #46	; 0x2e
 800a816:	2004      	movs	r0, #4
 800a818:	f7ff fa46 	bl	8009ca8 <VL53L1_i2c_decode_uint32_t>
 800a81c:	f3c0 0011 	ubfx	r0, r0, #0, #18
	pdata->pll_period_us =
 800a820:	62e0      	str	r0, [r4, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 800a822:	f105 0132 	add.w	r1, r5, #50	; 0x32
 800a826:	2004      	movs	r0, #4
 800a828:	f7ff fa3e 	bl	8009ca8 <VL53L1_i2c_decode_uint32_t>
	pdata->interrupt_scheduler__data_out =
 800a82c:	6320      	str	r0, [r4, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 800a82e:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
 800a832:	f003 0301 	and.w	r3, r3, #1
	pdata->nvm_bist__complete =
 800a836:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 800a83a:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
 800a83e:	f003 0301 	and.w	r3, r3, #1
	pdata->nvm_bist__status =
 800a842:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 800a846:	2000      	movs	r0, #0
 800a848:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800a84a:	f06f 0009 	mvn.w	r0, #9
 800a84e:	4770      	bx	lr

0800a850 <VL53L1_i2c_decode_nvm_copy_data>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 800a850:	2830      	cmp	r0, #48	; 0x30
 800a852:	f240 809f 	bls.w	800a994 <VL53L1_i2c_decode_nvm_copy_data+0x144>
{
 800a856:	b538      	push	{r3, r4, r5, lr}
 800a858:	4614      	mov	r4, r2
 800a85a:	460d      	mov	r5, r1
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->identification__model_id =
		(*(pbuffer +   0));
 800a85c:	780b      	ldrb	r3, [r1, #0]
	pdata->identification__model_id =
 800a85e:	7013      	strb	r3, [r2, #0]
	pdata->identification__module_type =
 800a860:	784b      	ldrb	r3, [r1, #1]
 800a862:	7053      	strb	r3, [r2, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 800a864:	788b      	ldrb	r3, [r1, #2]
 800a866:	7093      	strb	r3, [r2, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 800a868:	3103      	adds	r1, #3
 800a86a:	2002      	movs	r0, #2
 800a86c:	f7ff f9d9 	bl	8009c22 <VL53L1_i2c_decode_uint16_t>
	pdata->identification__module_id =
 800a870:	80a0      	strh	r0, [r4, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 800a872:	796b      	ldrb	r3, [r5, #5]
 800a874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->ana_config__fast_osc__trim_max =
 800a878:	71a3      	strb	r3, [r4, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 800a87a:	79ab      	ldrb	r3, [r5, #6]
 800a87c:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__fast_osc__freq_set =
 800a880:	71e3      	strb	r3, [r4, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 800a882:	79eb      	ldrb	r3, [r5, #7]
 800a884:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__vcsel_trim =
 800a888:	7223      	strb	r3, [r4, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 800a88a:	7a2b      	ldrb	r3, [r5, #8]
 800a88c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ana_config__vcsel_selion =
 800a890:	7263      	strb	r3, [r4, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 800a892:	7a6b      	ldrb	r3, [r5, #9]
 800a894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ana_config__vcsel_selion_max =
 800a898:	72a3      	strb	r3, [r4, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 800a89a:	7aab      	ldrb	r3, [r5, #10]
 800a89c:	f003 0301 	and.w	r3, r3, #1
	pdata->protected_laser_safety__lock_bit =
 800a8a0:	72e3      	strb	r3, [r4, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 800a8a2:	7aeb      	ldrb	r3, [r5, #11]
 800a8a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->laser_safety__key =
 800a8a8:	7323      	strb	r3, [r4, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 800a8aa:	7b2b      	ldrb	r3, [r5, #12]
 800a8ac:	f003 0301 	and.w	r3, r3, #1
	pdata->laser_safety__key_ro =
 800a8b0:	7363      	strb	r3, [r4, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 800a8b2:	7b6b      	ldrb	r3, [r5, #13]
 800a8b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->laser_safety__clip =
 800a8b8:	73a3      	strb	r3, [r4, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 800a8ba:	7bab      	ldrb	r3, [r5, #14]
 800a8bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->laser_safety__mult =
 800a8c0:	73e3      	strb	r3, [r4, #15]
	pdata->global_config__spad_enables_rtn_0 =
 800a8c2:	7beb      	ldrb	r3, [r5, #15]
 800a8c4:	7423      	strb	r3, [r4, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 800a8c6:	7c2b      	ldrb	r3, [r5, #16]
 800a8c8:	7463      	strb	r3, [r4, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 800a8ca:	7c6b      	ldrb	r3, [r5, #17]
 800a8cc:	74a3      	strb	r3, [r4, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 800a8ce:	7cab      	ldrb	r3, [r5, #18]
 800a8d0:	74e3      	strb	r3, [r4, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 800a8d2:	7ceb      	ldrb	r3, [r5, #19]
 800a8d4:	7523      	strb	r3, [r4, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 800a8d6:	7d2b      	ldrb	r3, [r5, #20]
 800a8d8:	7563      	strb	r3, [r4, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 800a8da:	7d6b      	ldrb	r3, [r5, #21]
 800a8dc:	75a3      	strb	r3, [r4, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 800a8de:	7dab      	ldrb	r3, [r5, #22]
 800a8e0:	75e3      	strb	r3, [r4, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 800a8e2:	7deb      	ldrb	r3, [r5, #23]
 800a8e4:	7623      	strb	r3, [r4, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 800a8e6:	7e2b      	ldrb	r3, [r5, #24]
 800a8e8:	7663      	strb	r3, [r4, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 800a8ea:	7e6b      	ldrb	r3, [r5, #25]
 800a8ec:	76a3      	strb	r3, [r4, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 800a8ee:	7eab      	ldrb	r3, [r5, #26]
 800a8f0:	76e3      	strb	r3, [r4, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 800a8f2:	7eeb      	ldrb	r3, [r5, #27]
 800a8f4:	7723      	strb	r3, [r4, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 800a8f6:	7f2b      	ldrb	r3, [r5, #28]
 800a8f8:	7763      	strb	r3, [r4, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 800a8fa:	7f6b      	ldrb	r3, [r5, #29]
 800a8fc:	77a3      	strb	r3, [r4, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 800a8fe:	7fab      	ldrb	r3, [r5, #30]
 800a900:	77e3      	strb	r3, [r4, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 800a902:	7feb      	ldrb	r3, [r5, #31]
 800a904:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 800a908:	f895 3020 	ldrb.w	r3, [r5, #32]
 800a90c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 800a910:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800a914:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 800a918:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800a91c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 800a920:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 800a924:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 800a928:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800a92c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 800a930:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 800a934:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 800a938:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 800a93c:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 800a940:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
 800a944:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 800a948:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800a94c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 800a950:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 800a954:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 800a958:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 800a95c:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 800a960:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800a964:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 800a968:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800a96c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 800a970:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800a974:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 800a978:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
 800a97c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 800a980:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800a984:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 800a988:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800a98c:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 800a990:	2000      	movs	r0, #0
 800a992:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800a994:	f06f 0009 	mvn.w	r0, #9
 800a998:	4770      	bx	lr

0800a99a <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800a99a:	b510      	push	{r4, lr}
 800a99c:	b08e      	sub	sp, #56	; 0x38
 800a99e:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_ReadMulti(
 800a9a0:	2331      	movs	r3, #49	; 0x31
 800a9a2:	aa01      	add	r2, sp, #4
 800a9a4:	f240 110f 	movw	r1, #271	; 0x10f
 800a9a8:	f005 fa1a 	bl	800fde0 <VL53L1_ReadMulti>
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	b110      	cbz	r0, 800a9b6 <VL53L1_get_nvm_copy_data+0x1c>
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	b00e      	add	sp, #56	; 0x38
 800a9b4:	bd10      	pop	{r4, pc}
		status = VL53L1_i2c_decode_nvm_copy_data(
 800a9b6:	4622      	mov	r2, r4
 800a9b8:	a901      	add	r1, sp, #4
 800a9ba:	2031      	movs	r0, #49	; 0x31
 800a9bc:	f7ff ff48 	bl	800a850 <VL53L1_i2c_decode_nvm_copy_data>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	e7f5      	b.n	800a9b0 <VL53L1_get_nvm_copy_data+0x16>

0800a9c4 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 800a9c4:	b570      	push	{r4, r5, r6, lr}
 800a9c6:	b082      	sub	sp, #8
 800a9c8:	4605      	mov	r5, r0
 800a9ca:	460e      	mov	r6, r1
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 800a9cc:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800a9d0:	f005 fa6a 	bl	800fea8 <VL53L1_WaitUs>
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 800a9d4:	4604      	mov	r4, r0
 800a9d6:	b118      	cbz	r0, 800a9e0 <VL53L1_poll_for_boot_completion+0x1c>
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 800a9d8:	b164      	cbz	r4, 800a9f4 <VL53L1_poll_for_boot_completion+0x30>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);

	LOG_FUNCTION_END(status);

	return status;
}
 800a9da:	4620      	mov	r0, r4
 800a9dc:	b002      	add	sp, #8
 800a9de:	bd70      	pop	{r4, r5, r6, pc}
		status =
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	9301      	str	r3, [sp, #4]
 800a9e4:	9300      	str	r3, [sp, #0]
 800a9e6:	22e5      	movs	r2, #229	; 0xe5
 800a9e8:	4631      	mov	r1, r6
 800a9ea:	4628      	mov	r0, r5
 800a9ec:	f005 fa6a 	bl	800fec4 <VL53L1_WaitValueMaskEx>
 800a9f0:	4604      	mov	r4, r0
 800a9f2:	e7f1      	b.n	800a9d8 <VL53L1_poll_for_boot_completion+0x14>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 800a9f4:	2103      	movs	r1, #3
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	f7fe ffc5 	bl	8009986 <VL53L1_init_ll_driver_state>
 800a9fc:	e7ed      	b.n	800a9da <VL53L1_poll_for_boot_completion+0x16>

0800a9fe <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 800a9fe:	2884      	cmp	r0, #132	; 0x84
 800aa00:	d001      	beq.n	800aa06 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 800aa02:	3003      	adds	r0, #3
 800aa04:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800aa06:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 800aa08:	4770      	bx	lr

0800aa0a <inHandlerMode>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa0a:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 800aa0e:	3000      	adds	r0, #0
 800aa10:	bf18      	it	ne
 800aa12:	2001      	movne	r0, #1
 800aa14:	4770      	bx	lr

0800aa16 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800aa16:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800aa18:	f001 fb52 	bl	800c0c0 <vTaskStartScheduler>
  
  return osOK;
}
 800aa1c:	2000      	movs	r0, #0
 800aa1e:	bd08      	pop	{r3, pc}

0800aa20 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800aa20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa22:	b085      	sub	sp, #20
 800aa24:	460f      	mov	r7, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aa26:	6844      	ldr	r4, [r0, #4]
 800aa28:	6805      	ldr	r5, [r0, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800aa2a:	6906      	ldr	r6, [r0, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aa2c:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800aa30:	f7ff ffe5 	bl	800a9fe <makeFreeRtosPriority>
 800aa34:	ab03      	add	r3, sp, #12
 800aa36:	9301      	str	r3, [sp, #4]
 800aa38:	9000      	str	r0, [sp, #0]
 800aa3a:	463b      	mov	r3, r7
 800aa3c:	b2b2      	uxth	r2, r6
 800aa3e:	4629      	mov	r1, r5
 800aa40:	4620      	mov	r0, r4
 800aa42:	f001 fb0b 	bl	800c05c <xTaskCreate>
 800aa46:	2801      	cmp	r0, #1
 800aa48:	d102      	bne.n	800aa50 <osThreadCreate+0x30>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800aa4a:	9803      	ldr	r0, [sp, #12]
}
 800aa4c:	b005      	add	sp, #20
 800aa4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 800aa50:	2000      	movs	r0, #0
 800aa52:	e7fb      	b.n	800aa4c <osThreadCreate+0x2c>

0800aa54 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800aa54:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800aa56:	4603      	mov	r3, r0
 800aa58:	b900      	cbnz	r0, 800aa5c <osDelay+0x8>
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f001 fc8d 	bl	800c37c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800aa62:	2000      	movs	r0, #0
 800aa64:	bd08      	pop	{r3, pc}
	...

0800aa68 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800aa68:	b500      	push	{lr}
 800aa6a:	b083      	sub	sp, #12
 800aa6c:	4613      	mov	r3, r2
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
                      (StaticTimer_t *)timer_def->controlblock);  
#else
  return xTimerCreate((const char *)"",
 800aa6e:	2901      	cmp	r1, #1
 800aa70:	d009      	beq.n	800aa86 <osTimerCreate+0x1e>
 800aa72:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 800aa74:	6801      	ldr	r1, [r0, #0]
  return xTimerCreate((const char *)"",
 800aa76:	9100      	str	r1, [sp, #0]
 800aa78:	2101      	movs	r1, #1
 800aa7a:	4804      	ldr	r0, [pc, #16]	; (800aa8c <osTimerCreate+0x24>)
 800aa7c:	f001 ffaa 	bl	800c9d4 <xTimerCreate>
#endif

#else 
	return NULL;
#endif
}
 800aa80:	b003      	add	sp, #12
 800aa82:	f85d fb04 	ldr.w	pc, [sp], #4
  return xTimerCreate((const char *)"",
 800aa86:	2201      	movs	r2, #1
 800aa88:	e7f4      	b.n	800aa74 <osTimerCreate+0xc>
 800aa8a:	bf00      	nop
 800aa8c:	08012c7c 	.word	0x08012c7c

0800aa90 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 800aa90:	b530      	push	{r4, r5, lr}
 800aa92:	b085      	sub	sp, #20
 800aa94:	4605      	mov	r5, r0
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800aa96:	2300      	movs	r3, #0
 800aa98:	9303      	str	r3, [sp, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;

  if (ticks == 0)
 800aa9a:	460c      	mov	r4, r1
 800aa9c:	b901      	cbnz	r1, 800aaa0 <osTimerStart+0x10>
    ticks = 1;
 800aa9e:	2401      	movs	r4, #1
    
  if (inHandlerMode()) 
 800aaa0:	f7ff ffb3 	bl	800aa0a <inHandlerMode>
 800aaa4:	b1c0      	cbz	r0, 800aad8 <osTimerStart+0x48>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	9300      	str	r3, [sp, #0]
 800aaaa:	ab03      	add	r3, sp, #12
 800aaac:	4622      	mov	r2, r4
 800aaae:	2109      	movs	r1, #9
 800aab0:	4628      	mov	r0, r5
 800aab2:	f001 ffa9 	bl	800ca08 <xTimerGenericCommand>
 800aab6:	2801      	cmp	r0, #1
 800aab8:	d002      	beq.n	800aac0 <osTimerStart+0x30>
    {
      result = osErrorOS;
 800aaba:	20ff      	movs	r0, #255	; 0xff

#else 
  result = osErrorOS;
#endif
  return result;
}
 800aabc:	b005      	add	sp, #20
 800aabe:	bd30      	pop	{r4, r5, pc}
      portEND_SWITCHING_ISR(taskWoken);     
 800aac0:	9b03      	ldr	r3, [sp, #12]
 800aac2:	b1b3      	cbz	r3, 800aaf2 <osTimerStart+0x62>
 800aac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aac8:	4b0b      	ldr	r3, [pc, #44]	; (800aaf8 <osTimerStart+0x68>)
 800aaca:	601a      	str	r2, [r3, #0]
 800aacc:	f3bf 8f4f 	dsb	sy
 800aad0:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 800aad4:	2000      	movs	r0, #0
 800aad6:	e7f1      	b.n	800aabc <osTimerStart+0x2c>
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800aad8:	2300      	movs	r3, #0
 800aada:	9300      	str	r3, [sp, #0]
 800aadc:	4622      	mov	r2, r4
 800aade:	2104      	movs	r1, #4
 800aae0:	4628      	mov	r0, r5
 800aae2:	f001 ff91 	bl	800ca08 <xTimerGenericCommand>
 800aae6:	2801      	cmp	r0, #1
 800aae8:	d001      	beq.n	800aaee <osTimerStart+0x5e>
      result = osErrorOS;
 800aaea:	20ff      	movs	r0, #255	; 0xff
  return result;
 800aaec:	e7e6      	b.n	800aabc <osTimerStart+0x2c>
  osStatus result = osOK;
 800aaee:	2000      	movs	r0, #0
 800aaf0:	e7e4      	b.n	800aabc <osTimerStart+0x2c>
 800aaf2:	2000      	movs	r0, #0
 800aaf4:	e7e2      	b.n	800aabc <osTimerStart+0x2c>
 800aaf6:	bf00      	nop
 800aaf8:	e000ed04 	.word	0xe000ed04

0800aafc <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 800aafc:	b510      	push	{r4, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	4604      	mov	r4, r0
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800ab02:	2300      	movs	r3, #0
 800ab04:	9303      	str	r3, [sp, #12]

  if (inHandlerMode()) {
 800ab06:	f7ff ff80 	bl	800aa0a <inHandlerMode>
 800ab0a:	b1b8      	cbz	r0, 800ab3c <osTimerStop+0x40>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	9200      	str	r2, [sp, #0]
 800ab10:	ab03      	add	r3, sp, #12
 800ab12:	2108      	movs	r1, #8
 800ab14:	4620      	mov	r0, r4
 800ab16:	f001 ff77 	bl	800ca08 <xTimerGenericCommand>
 800ab1a:	2801      	cmp	r0, #1
 800ab1c:	d002      	beq.n	800ab24 <osTimerStop+0x28>
      return osErrorOS;
 800ab1e:	20ff      	movs	r0, #255	; 0xff
  }
#else 
  result = osErrorOS;
#endif 
  return result;
}
 800ab20:	b004      	add	sp, #16
 800ab22:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800ab24:	9b03      	ldr	r3, [sp, #12]
 800ab26:	b1b3      	cbz	r3, 800ab56 <osTimerStop+0x5a>
 800ab28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab2c:	4b0b      	ldr	r3, [pc, #44]	; (800ab5c <osTimerStop+0x60>)
 800ab2e:	601a      	str	r2, [r3, #0]
 800ab30:	f3bf 8f4f 	dsb	sy
 800ab34:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 800ab38:	2000      	movs	r0, #0
 800ab3a:	e7f1      	b.n	800ab20 <osTimerStop+0x24>
    if (xTimerStop(timer_id, 0) != pdPASS) {
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	9200      	str	r2, [sp, #0]
 800ab40:	4613      	mov	r3, r2
 800ab42:	2103      	movs	r1, #3
 800ab44:	4620      	mov	r0, r4
 800ab46:	f001 ff5f 	bl	800ca08 <xTimerGenericCommand>
 800ab4a:	2801      	cmp	r0, #1
 800ab4c:	d001      	beq.n	800ab52 <osTimerStop+0x56>
      result = osErrorOS;
 800ab4e:	20ff      	movs	r0, #255	; 0xff
 800ab50:	e7e6      	b.n	800ab20 <osTimerStop+0x24>
  osStatus result = osOK;
 800ab52:	2000      	movs	r0, #0
 800ab54:	e7e4      	b.n	800ab20 <osTimerStop+0x24>
 800ab56:	2000      	movs	r0, #0
 800ab58:	e7e2      	b.n	800ab20 <osTimerStop+0x24>
 800ab5a:	bf00      	nop
 800ab5c:	e000ed04 	.word	0xe000ed04

0800ab60 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800ab60:	b508      	push	{r3, lr}
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800ab62:	2001      	movs	r0, #1
 800ab64:	f000 fe16 	bl	800b794 <xQueueCreateMutex>
#endif
#else
  return NULL;
#endif
}
 800ab68:	bd08      	pop	{r3, pc}
	...

0800ab6c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800ab6c:	b530      	push	{r4, r5, lr}
 800ab6e:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ab70:	2300      	movs	r3, #0
 800ab72:	9301      	str	r3, [sp, #4]
  
  
  if (mutex_id == NULL) {
 800ab74:	b350      	cbz	r0, 800abcc <osMutexWait+0x60>
 800ab76:	460c      	mov	r4, r1
 800ab78:	4605      	mov	r5, r0
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 800ab7a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ab7e:	d00d      	beq.n	800ab9c <osMutexWait+0x30>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 800ab80:	b901      	cbnz	r1, 800ab84 <osMutexWait+0x18>
  ticks = 0;
 800ab82:	461c      	mov	r4, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800ab84:	f7ff ff41 	bl	800aa0a <inHandlerMode>
 800ab88:	b1b8      	cbz	r0, 800abba <osMutexWait+0x4e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800ab8a:	aa01      	add	r2, sp, #4
 800ab8c:	2100      	movs	r1, #0
 800ab8e:	4628      	mov	r0, r5
 800ab90:	f001 f858 	bl	800bc44 <xQueueReceiveFromISR>
 800ab94:	2801      	cmp	r0, #1
 800ab96:	d004      	beq.n	800aba2 <osMutexWait+0x36>
      return osErrorOS;
 800ab98:	20ff      	movs	r0, #255	; 0xff
 800ab9a:	e015      	b.n	800abc8 <osMutexWait+0x5c>
    ticks = portMAX_DELAY;
 800ab9c:	f04f 34ff 	mov.w	r4, #4294967295
 800aba0:	e7f0      	b.n	800ab84 <osMutexWait+0x18>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800aba2:	9b01      	ldr	r3, [sp, #4]
 800aba4:	b1a3      	cbz	r3, 800abd0 <osMutexWait+0x64>
 800aba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abaa:	4b0b      	ldr	r3, [pc, #44]	; (800abd8 <osMutexWait+0x6c>)
 800abac:	601a      	str	r2, [r3, #0]
 800abae:	f3bf 8f4f 	dsb	sy
 800abb2:	f3bf 8f6f 	isb	sy
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800abb6:	2000      	movs	r0, #0
 800abb8:	e006      	b.n	800abc8 <osMutexWait+0x5c>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800abba:	4621      	mov	r1, r4
 800abbc:	4628      	mov	r0, r5
 800abbe:	f000 ff6f 	bl	800baa0 <xQueueSemaphoreTake>
 800abc2:	2801      	cmp	r0, #1
 800abc4:	d006      	beq.n	800abd4 <osMutexWait+0x68>
    return osErrorOS;
 800abc6:	20ff      	movs	r0, #255	; 0xff
}
 800abc8:	b003      	add	sp, #12
 800abca:	bd30      	pop	{r4, r5, pc}
    return osErrorParameter;
 800abcc:	2080      	movs	r0, #128	; 0x80
 800abce:	e7fb      	b.n	800abc8 <osMutexWait+0x5c>
  return osOK;
 800abd0:	2000      	movs	r0, #0
 800abd2:	e7f9      	b.n	800abc8 <osMutexWait+0x5c>
 800abd4:	2000      	movs	r0, #0
 800abd6:	e7f7      	b.n	800abc8 <osMutexWait+0x5c>
 800abd8:	e000ed04 	.word	0xe000ed04

0800abdc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800abdc:	b510      	push	{r4, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800abe2:	2300      	movs	r3, #0
 800abe4:	9301      	str	r3, [sp, #4]
  
  if (inHandlerMode()) {
 800abe6:	f7ff ff10 	bl	800aa0a <inHandlerMode>
 800abea:	b1a0      	cbz	r0, 800ac16 <osMutexRelease+0x3a>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800abec:	a901      	add	r1, sp, #4
 800abee:	4620      	mov	r0, r4
 800abf0:	f000 fe4a 	bl	800b888 <xQueueGiveFromISR>
 800abf4:	2801      	cmp	r0, #1
 800abf6:	d002      	beq.n	800abfe <osMutexRelease+0x22>
      return osErrorOS;
 800abf8:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 800abfa:	b002      	add	sp, #8
 800abfc:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800abfe:	9b01      	ldr	r3, [sp, #4]
 800ac00:	b1ab      	cbz	r3, 800ac2e <osMutexRelease+0x52>
 800ac02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac06:	4b0b      	ldr	r3, [pc, #44]	; (800ac34 <osMutexRelease+0x58>)
 800ac08:	601a      	str	r2, [r3, #0]
 800ac0a:	f3bf 8f4f 	dsb	sy
 800ac0e:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 800ac12:	2000      	movs	r0, #0
 800ac14:	e7f1      	b.n	800abfa <osMutexRelease+0x1e>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800ac16:	2300      	movs	r3, #0
 800ac18:	461a      	mov	r2, r3
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	f000 fce9 	bl	800b5f4 <xQueueGenericSend>
 800ac22:	2801      	cmp	r0, #1
 800ac24:	d001      	beq.n	800ac2a <osMutexRelease+0x4e>
    result = osErrorOS;
 800ac26:	20ff      	movs	r0, #255	; 0xff
 800ac28:	e7e7      	b.n	800abfa <osMutexRelease+0x1e>
  osStatus result = osOK;
 800ac2a:	2000      	movs	r0, #0
 800ac2c:	e7e5      	b.n	800abfa <osMutexRelease+0x1e>
 800ac2e:	2000      	movs	r0, #0
 800ac30:	e7e3      	b.n	800abfa <osMutexRelease+0x1e>
 800ac32:	bf00      	nop
 800ac34:	e000ed04 	.word	0xe000ed04

0800ac38 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800ac38:	b510      	push	{r4, lr}
 800ac3a:	4608      	mov	r0, r1
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800ac3c:	2901      	cmp	r1, #1
 800ac3e:	d004      	beq.n	800ac4a <osSemaphoreCreate+0x12>
    vSemaphoreCreateBinary(sema);
    return sema;
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 800ac40:	f000 fcb8 	bl	800b5b4 <xQueueCreateCountingSemaphore>
 800ac44:	4604      	mov	r4, r0
#else
    return NULL;
#endif
  }
#endif
}
 800ac46:	4620      	mov	r0, r4
 800ac48:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800ac4a:	2203      	movs	r2, #3
 800ac4c:	2100      	movs	r1, #0
 800ac4e:	f000 fc8d 	bl	800b56c <xQueueGenericCreate>
 800ac52:	4604      	mov	r4, r0
 800ac54:	2800      	cmp	r0, #0
 800ac56:	d0f6      	beq.n	800ac46 <osSemaphoreCreate+0xe>
 800ac58:	2300      	movs	r3, #0
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	4619      	mov	r1, r3
 800ac5e:	f000 fcc9 	bl	800b5f4 <xQueueGenericSend>
 800ac62:	e7f0      	b.n	800ac46 <osSemaphoreCreate+0xe>

0800ac64 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800ac64:	b530      	push	{r4, r5, lr}
 800ac66:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ac68:	2300      	movs	r3, #0
 800ac6a:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800ac6c:	b350      	cbz	r0, 800acc4 <osSemaphoreWait+0x60>
 800ac6e:	460c      	mov	r4, r1
 800ac70:	4605      	mov	r5, r0
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 800ac72:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ac76:	d00d      	beq.n	800ac94 <osSemaphoreWait+0x30>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 800ac78:	b901      	cbnz	r1, 800ac7c <osSemaphoreWait+0x18>
  ticks = 0;
 800ac7a:	461c      	mov	r4, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800ac7c:	f7ff fec5 	bl	800aa0a <inHandlerMode>
 800ac80:	b1b8      	cbz	r0, 800acb2 <osSemaphoreWait+0x4e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ac82:	aa01      	add	r2, sp, #4
 800ac84:	2100      	movs	r1, #0
 800ac86:	4628      	mov	r0, r5
 800ac88:	f000 ffdc 	bl	800bc44 <xQueueReceiveFromISR>
 800ac8c:	2801      	cmp	r0, #1
 800ac8e:	d004      	beq.n	800ac9a <osSemaphoreWait+0x36>
      return osErrorOS;
 800ac90:	20ff      	movs	r0, #255	; 0xff
 800ac92:	e015      	b.n	800acc0 <osSemaphoreWait+0x5c>
    ticks = portMAX_DELAY;
 800ac94:	f04f 34ff 	mov.w	r4, #4294967295
 800ac98:	e7f0      	b.n	800ac7c <osSemaphoreWait+0x18>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ac9a:	9b01      	ldr	r3, [sp, #4]
 800ac9c:	b1a3      	cbz	r3, 800acc8 <osSemaphoreWait+0x64>
 800ac9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aca2:	4b0b      	ldr	r3, [pc, #44]	; (800acd0 <osSemaphoreWait+0x6c>)
 800aca4:	601a      	str	r2, [r3, #0]
 800aca6:	f3bf 8f4f 	dsb	sy
 800acaa:	f3bf 8f6f 	isb	sy
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800acae:	2000      	movs	r0, #0
 800acb0:	e006      	b.n	800acc0 <osSemaphoreWait+0x5c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800acb2:	4621      	mov	r1, r4
 800acb4:	4628      	mov	r0, r5
 800acb6:	f000 fef3 	bl	800baa0 <xQueueSemaphoreTake>
 800acba:	2801      	cmp	r0, #1
 800acbc:	d006      	beq.n	800accc <osSemaphoreWait+0x68>
    return osErrorOS;
 800acbe:	20ff      	movs	r0, #255	; 0xff
}
 800acc0:	b003      	add	sp, #12
 800acc2:	bd30      	pop	{r4, r5, pc}
    return osErrorParameter;
 800acc4:	2080      	movs	r0, #128	; 0x80
 800acc6:	e7fb      	b.n	800acc0 <osSemaphoreWait+0x5c>
  return osOK;
 800acc8:	2000      	movs	r0, #0
 800acca:	e7f9      	b.n	800acc0 <osSemaphoreWait+0x5c>
 800accc:	2000      	movs	r0, #0
 800acce:	e7f7      	b.n	800acc0 <osSemaphoreWait+0x5c>
 800acd0:	e000ed04 	.word	0xe000ed04

0800acd4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800acd4:	b510      	push	{r4, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800acda:	2300      	movs	r3, #0
 800acdc:	9301      	str	r3, [sp, #4]
  
  
  if (inHandlerMode()) {
 800acde:	f7ff fe94 	bl	800aa0a <inHandlerMode>
 800ace2:	b1a0      	cbz	r0, 800ad0e <osSemaphoreRelease+0x3a>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ace4:	a901      	add	r1, sp, #4
 800ace6:	4620      	mov	r0, r4
 800ace8:	f000 fdce 	bl	800b888 <xQueueGiveFromISR>
 800acec:	2801      	cmp	r0, #1
 800acee:	d002      	beq.n	800acf6 <osSemaphoreRelease+0x22>
      return osErrorOS;
 800acf0:	20ff      	movs	r0, #255	; 0xff
      result = osErrorOS;
    }
  }
  
  return result;
}
 800acf2:	b002      	add	sp, #8
 800acf4:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800acf6:	9b01      	ldr	r3, [sp, #4]
 800acf8:	b1ab      	cbz	r3, 800ad26 <osSemaphoreRelease+0x52>
 800acfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acfe:	4b0b      	ldr	r3, [pc, #44]	; (800ad2c <osSemaphoreRelease+0x58>)
 800ad00:	601a      	str	r2, [r3, #0]
 800ad02:	f3bf 8f4f 	dsb	sy
 800ad06:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 800ad0a:	2000      	movs	r0, #0
 800ad0c:	e7f1      	b.n	800acf2 <osSemaphoreRelease+0x1e>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800ad0e:	2300      	movs	r3, #0
 800ad10:	461a      	mov	r2, r3
 800ad12:	4619      	mov	r1, r3
 800ad14:	4620      	mov	r0, r4
 800ad16:	f000 fc6d 	bl	800b5f4 <xQueueGenericSend>
 800ad1a:	2801      	cmp	r0, #1
 800ad1c:	d001      	beq.n	800ad22 <osSemaphoreRelease+0x4e>
      result = osErrorOS;
 800ad1e:	20ff      	movs	r0, #255	; 0xff
 800ad20:	e7e7      	b.n	800acf2 <osSemaphoreRelease+0x1e>
  osStatus result = osOK;
 800ad22:	2000      	movs	r0, #0
 800ad24:	e7e5      	b.n	800acf2 <osSemaphoreRelease+0x1e>
 800ad26:	2000      	movs	r0, #0
 800ad28:	e7e3      	b.n	800acf2 <osSemaphoreRelease+0x1e>
 800ad2a:	bf00      	nop
 800ad2c:	e000ed04 	.word	0xe000ed04

0800ad30 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad30:	f100 0308 	add.w	r3, r0, #8
 800ad34:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ad36:	f04f 32ff 	mov.w	r2, #4294967295
 800ad3a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad3c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad3e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ad40:	2300      	movs	r3, #0
 800ad42:	6003      	str	r3, [r0, #0]
 800ad44:	4770      	bx	lr

0800ad46 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800ad46:	2300      	movs	r3, #0
 800ad48:	6103      	str	r3, [r0, #16]
 800ad4a:	4770      	bx	lr

0800ad4c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800ad4c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ad4e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ad50:	689a      	ldr	r2, [r3, #8]
 800ad52:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ad54:	689a      	ldr	r2, [r3, #8]
 800ad56:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ad58:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ad5a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800ad5c:	6803      	ldr	r3, [r0, #0]
 800ad5e:	3301      	adds	r3, #1
 800ad60:	6003      	str	r3, [r0, #0]
 800ad62:	4770      	bx	lr

0800ad64 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ad64:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ad66:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ad68:	f1b5 3fff 	cmp.w	r5, #4294967295
 800ad6c:	d002      	beq.n	800ad74 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad6e:	f100 0208 	add.w	r2, r0, #8
 800ad72:	e002      	b.n	800ad7a <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 800ad74:	6902      	ldr	r2, [r0, #16]
 800ad76:	e004      	b.n	800ad82 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad78:	461a      	mov	r2, r3
 800ad7a:	6853      	ldr	r3, [r2, #4]
 800ad7c:	681c      	ldr	r4, [r3, #0]
 800ad7e:	42a5      	cmp	r5, r4
 800ad80:	d2fa      	bcs.n	800ad78 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ad82:	6853      	ldr	r3, [r2, #4]
 800ad84:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ad86:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ad88:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800ad8a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ad8c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800ad8e:	6803      	ldr	r3, [r0, #0]
 800ad90:	3301      	adds	r3, #1
 800ad92:	6003      	str	r3, [r0, #0]
}
 800ad94:	bc30      	pop	{r4, r5}
 800ad96:	4770      	bx	lr

0800ad98 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800ad98:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ad9a:	6842      	ldr	r2, [r0, #4]
 800ad9c:	6881      	ldr	r1, [r0, #8]
 800ad9e:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ada0:	6882      	ldr	r2, [r0, #8]
 800ada2:	6841      	ldr	r1, [r0, #4]
 800ada4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ada6:	685a      	ldr	r2, [r3, #4]
 800ada8:	4290      	cmp	r0, r2
 800adaa:	d006      	beq.n	800adba <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800adac:	2200      	movs	r2, #0
 800adae:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	3a01      	subs	r2, #1
 800adb4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800adb6:	6818      	ldr	r0, [r3, #0]
}
 800adb8:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800adba:	6882      	ldr	r2, [r0, #8]
 800adbc:	605a      	str	r2, [r3, #4]
 800adbe:	e7f5      	b.n	800adac <uxListRemove+0x14>

0800adc0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800adc0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800adc2:	2300      	movs	r3, #0
 800adc4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800adc6:	4b0d      	ldr	r3, [pc, #52]	; (800adfc <prvTaskExitError+0x3c>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adce:	d008      	beq.n	800ade2 <prvTaskExitError+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800add0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add4:	f383 8811 	msr	BASEPRI, r3
 800add8:	f3bf 8f6f 	isb	sy
 800addc:	f3bf 8f4f 	dsb	sy
 800ade0:	e7fe      	b.n	800ade0 <prvTaskExitError+0x20>
 800ade2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade6:	f383 8811 	msr	BASEPRI, r3
 800adea:	f3bf 8f6f 	isb	sy
 800adee:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800adf2:	9b01      	ldr	r3, [sp, #4]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d0fc      	beq.n	800adf2 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800adf8:	b002      	add	sp, #8
 800adfa:	4770      	bx	lr
 800adfc:	20000020 	.word	0x20000020

0800ae00 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ae00:	4808      	ldr	r0, [pc, #32]	; (800ae24 <prvPortStartFirstTask+0x24>)
 800ae02:	6800      	ldr	r0, [r0, #0]
 800ae04:	6800      	ldr	r0, [r0, #0]
 800ae06:	f380 8808 	msr	MSP, r0
 800ae0a:	f04f 0000 	mov.w	r0, #0
 800ae0e:	f380 8814 	msr	CONTROL, r0
 800ae12:	b662      	cpsie	i
 800ae14:	b661      	cpsie	f
 800ae16:	f3bf 8f4f 	dsb	sy
 800ae1a:	f3bf 8f6f 	isb	sy
 800ae1e:	df00      	svc	0
 800ae20:	bf00      	nop
 800ae22:	0000      	.short	0x0000
 800ae24:	e000ed08 	.word	0xe000ed08

0800ae28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ae28:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ae38 <vPortEnableVFP+0x10>
 800ae2c:	6801      	ldr	r1, [r0, #0]
 800ae2e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ae32:	6001      	str	r1, [r0, #0]
 800ae34:	4770      	bx	lr
 800ae36:	0000      	.short	0x0000
 800ae38:	e000ed88 	.word	0xe000ed88

0800ae3c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ae3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ae40:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ae44:	f021 0101 	bic.w	r1, r1, #1
 800ae48:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ae4c:	4b05      	ldr	r3, [pc, #20]	; (800ae64 <pxPortInitialiseStack+0x28>)
 800ae4e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ae52:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ae56:	f06f 0302 	mvn.w	r3, #2
 800ae5a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800ae5e:	3844      	subs	r0, #68	; 0x44
 800ae60:	4770      	bx	lr
 800ae62:	bf00      	nop
 800ae64:	0800adc1 	.word	0x0800adc1
	...

0800ae70 <SVC_Handler>:
	__asm volatile (
 800ae70:	4b07      	ldr	r3, [pc, #28]	; (800ae90 <pxCurrentTCBConst2>)
 800ae72:	6819      	ldr	r1, [r3, #0]
 800ae74:	6808      	ldr	r0, [r1, #0]
 800ae76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae7a:	f380 8809 	msr	PSP, r0
 800ae7e:	f3bf 8f6f 	isb	sy
 800ae82:	f04f 0000 	mov.w	r0, #0
 800ae86:	f380 8811 	msr	BASEPRI, r0
 800ae8a:	4770      	bx	lr
 800ae8c:	f3af 8000 	nop.w

0800ae90 <pxCurrentTCBConst2>:
 800ae90:	20004f1c 	.word	0x20004f1c

0800ae94 <vPortEnterCritical>:
 800ae94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae98:	f383 8811 	msr	BASEPRI, r3
 800ae9c:	f3bf 8f6f 	isb	sy
 800aea0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800aea4:	4a0a      	ldr	r2, [pc, #40]	; (800aed0 <vPortEnterCritical+0x3c>)
 800aea6:	6813      	ldr	r3, [r2, #0]
 800aea8:	3301      	adds	r3, #1
 800aeaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d10d      	bne.n	800aecc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aeb0:	4b08      	ldr	r3, [pc, #32]	; (800aed4 <vPortEnterCritical+0x40>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f013 0fff 	tst.w	r3, #255	; 0xff
 800aeb8:	d008      	beq.n	800aecc <vPortEnterCritical+0x38>
 800aeba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aebe:	f383 8811 	msr	BASEPRI, r3
 800aec2:	f3bf 8f6f 	isb	sy
 800aec6:	f3bf 8f4f 	dsb	sy
 800aeca:	e7fe      	b.n	800aeca <vPortEnterCritical+0x36>
 800aecc:	4770      	bx	lr
 800aece:	bf00      	nop
 800aed0:	20000020 	.word	0x20000020
 800aed4:	e000ed04 	.word	0xe000ed04

0800aed8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800aed8:	4b09      	ldr	r3, [pc, #36]	; (800af00 <vPortExitCritical+0x28>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	b943      	cbnz	r3, 800aef0 <vPortExitCritical+0x18>
 800aede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee2:	f383 8811 	msr	BASEPRI, r3
 800aee6:	f3bf 8f6f 	isb	sy
 800aeea:	f3bf 8f4f 	dsb	sy
 800aeee:	e7fe      	b.n	800aeee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800aef0:	3b01      	subs	r3, #1
 800aef2:	4a03      	ldr	r2, [pc, #12]	; (800af00 <vPortExitCritical+0x28>)
 800aef4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aef6:	b90b      	cbnz	r3, 800aefc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aef8:	f383 8811 	msr	BASEPRI, r3
 800aefc:	4770      	bx	lr
 800aefe:	bf00      	nop
 800af00:	20000020 	.word	0x20000020
	...

0800af10 <PendSV_Handler>:
	__asm volatile
 800af10:	f3ef 8009 	mrs	r0, PSP
 800af14:	f3bf 8f6f 	isb	sy
 800af18:	4b15      	ldr	r3, [pc, #84]	; (800af70 <pxCurrentTCBConst>)
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	f01e 0f10 	tst.w	lr, #16
 800af20:	bf08      	it	eq
 800af22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800af26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af2a:	6010      	str	r0, [r2, #0]
 800af2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800af30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800af34:	f380 8811 	msr	BASEPRI, r0
 800af38:	f3bf 8f4f 	dsb	sy
 800af3c:	f3bf 8f6f 	isb	sy
 800af40:	f001 fa44 	bl	800c3cc <vTaskSwitchContext>
 800af44:	f04f 0000 	mov.w	r0, #0
 800af48:	f380 8811 	msr	BASEPRI, r0
 800af4c:	bc09      	pop	{r0, r3}
 800af4e:	6819      	ldr	r1, [r3, #0]
 800af50:	6808      	ldr	r0, [r1, #0]
 800af52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af56:	f01e 0f10 	tst.w	lr, #16
 800af5a:	bf08      	it	eq
 800af5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800af60:	f380 8809 	msr	PSP, r0
 800af64:	f3bf 8f6f 	isb	sy
 800af68:	4770      	bx	lr
 800af6a:	bf00      	nop
 800af6c:	f3af 8000 	nop.w

0800af70 <pxCurrentTCBConst>:
 800af70:	20004f1c 	.word	0x20004f1c

0800af74 <SysTick_Handler>:
{
 800af74:	b508      	push	{r3, lr}
	__asm volatile
 800af76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af7a:	f383 8811 	msr	BASEPRI, r3
 800af7e:	f3bf 8f6f 	isb	sy
 800af82:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800af86:	f001 f8eb 	bl	800c160 <xTaskIncrementTick>
 800af8a:	b118      	cbz	r0, 800af94 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800af8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af90:	4b02      	ldr	r3, [pc, #8]	; (800af9c <SysTick_Handler+0x28>)
 800af92:	601a      	str	r2, [r3, #0]
	__asm volatile
 800af94:	2300      	movs	r3, #0
 800af96:	f383 8811 	msr	BASEPRI, r3
 800af9a:	bd08      	pop	{r3, pc}
 800af9c:	e000ed04 	.word	0xe000ed04

0800afa0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800afa0:	4a08      	ldr	r2, [pc, #32]	; (800afc4 <vPortSetupTimerInterrupt+0x24>)
 800afa2:	2300      	movs	r3, #0
 800afa4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800afa6:	4908      	ldr	r1, [pc, #32]	; (800afc8 <vPortSetupTimerInterrupt+0x28>)
 800afa8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800afaa:	4b08      	ldr	r3, [pc, #32]	; (800afcc <vPortSetupTimerInterrupt+0x2c>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	4908      	ldr	r1, [pc, #32]	; (800afd0 <vPortSetupTimerInterrupt+0x30>)
 800afb0:	fba1 1303 	umull	r1, r3, r1, r3
 800afb4:	099b      	lsrs	r3, r3, #6
 800afb6:	3b01      	subs	r3, #1
 800afb8:	4906      	ldr	r1, [pc, #24]	; (800afd4 <vPortSetupTimerInterrupt+0x34>)
 800afba:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800afbc:	2307      	movs	r3, #7
 800afbe:	6013      	str	r3, [r2, #0]
 800afc0:	4770      	bx	lr
 800afc2:	bf00      	nop
 800afc4:	e000e010 	.word	0xe000e010
 800afc8:	e000e018 	.word	0xe000e018
 800afcc:	20000048 	.word	0x20000048
 800afd0:	10624dd3 	.word	0x10624dd3
 800afd4:	e000e014 	.word	0xe000e014

0800afd8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800afd8:	4b3a      	ldr	r3, [pc, #232]	; (800b0c4 <xPortStartScheduler+0xec>)
 800afda:	681a      	ldr	r2, [r3, #0]
 800afdc:	4b3a      	ldr	r3, [pc, #232]	; (800b0c8 <xPortStartScheduler+0xf0>)
 800afde:	429a      	cmp	r2, r3
 800afe0:	d108      	bne.n	800aff4 <xPortStartScheduler+0x1c>
	__asm volatile
 800afe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe6:	f383 8811 	msr	BASEPRI, r3
 800afea:	f3bf 8f6f 	isb	sy
 800afee:	f3bf 8f4f 	dsb	sy
 800aff2:	e7fe      	b.n	800aff2 <xPortStartScheduler+0x1a>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aff4:	4b33      	ldr	r3, [pc, #204]	; (800b0c4 <xPortStartScheduler+0xec>)
 800aff6:	681a      	ldr	r2, [r3, #0]
 800aff8:	4b34      	ldr	r3, [pc, #208]	; (800b0cc <xPortStartScheduler+0xf4>)
 800affa:	429a      	cmp	r2, r3
 800affc:	d108      	bne.n	800b010 <xPortStartScheduler+0x38>
 800affe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b002:	f383 8811 	msr	BASEPRI, r3
 800b006:	f3bf 8f6f 	isb	sy
 800b00a:	f3bf 8f4f 	dsb	sy
 800b00e:	e7fe      	b.n	800b00e <xPortStartScheduler+0x36>
{
 800b010:	b510      	push	{r4, lr}
 800b012:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b014:	4b2e      	ldr	r3, [pc, #184]	; (800b0d0 <xPortStartScheduler+0xf8>)
 800b016:	781a      	ldrb	r2, [r3, #0]
 800b018:	b2d2      	uxtb	r2, r2
 800b01a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b01c:	22ff      	movs	r2, #255	; 0xff
 800b01e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b020:	781b      	ldrb	r3, [r3, #0]
 800b022:	b2db      	uxtb	r3, r3
 800b024:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b028:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b02c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b030:	4a28      	ldr	r2, [pc, #160]	; (800b0d4 <xPortStartScheduler+0xfc>)
 800b032:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b034:	2207      	movs	r2, #7
 800b036:	4b28      	ldr	r3, [pc, #160]	; (800b0d8 <xPortStartScheduler+0x100>)
 800b038:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b03a:	e009      	b.n	800b050 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
 800b03c:	4a26      	ldr	r2, [pc, #152]	; (800b0d8 <xPortStartScheduler+0x100>)
 800b03e:	6813      	ldr	r3, [r2, #0]
 800b040:	3b01      	subs	r3, #1
 800b042:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b044:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b048:	005b      	lsls	r3, r3, #1
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b050:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b054:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b058:	d1f0      	bne.n	800b03c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b05a:	4b1f      	ldr	r3, [pc, #124]	; (800b0d8 <xPortStartScheduler+0x100>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	2b03      	cmp	r3, #3
 800b060:	d008      	beq.n	800b074 <xPortStartScheduler+0x9c>
 800b062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b066:	f383 8811 	msr	BASEPRI, r3
 800b06a:	f3bf 8f6f 	isb	sy
 800b06e:	f3bf 8f4f 	dsb	sy
 800b072:	e7fe      	b.n	800b072 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b074:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b076:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b07a:	4a17      	ldr	r2, [pc, #92]	; (800b0d8 <xPortStartScheduler+0x100>)
 800b07c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b07e:	9b01      	ldr	r3, [sp, #4]
 800b080:	b2db      	uxtb	r3, r3
 800b082:	4a13      	ldr	r2, [pc, #76]	; (800b0d0 <xPortStartScheduler+0xf8>)
 800b084:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b086:	4b15      	ldr	r3, [pc, #84]	; (800b0dc <xPortStartScheduler+0x104>)
 800b088:	681a      	ldr	r2, [r3, #0]
 800b08a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800b08e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b090:	681a      	ldr	r2, [r3, #0]
 800b092:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800b096:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800b098:	f7ff ff82 	bl	800afa0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800b09c:	2400      	movs	r4, #0
 800b09e:	4b10      	ldr	r3, [pc, #64]	; (800b0e0 <xPortStartScheduler+0x108>)
 800b0a0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800b0a2:	f7ff fec1 	bl	800ae28 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b0a6:	4a0f      	ldr	r2, [pc, #60]	; (800b0e4 <xPortStartScheduler+0x10c>)
 800b0a8:	6813      	ldr	r3, [r2, #0]
 800b0aa:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b0ae:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800b0b0:	f7ff fea6 	bl	800ae00 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800b0b4:	f001 f98a 	bl	800c3cc <vTaskSwitchContext>
	prvTaskExitError();
 800b0b8:	f7ff fe82 	bl	800adc0 <prvTaskExitError>
}
 800b0bc:	4620      	mov	r0, r4
 800b0be:	b002      	add	sp, #8
 800b0c0:	bd10      	pop	{r4, pc}
 800b0c2:	bf00      	nop
 800b0c4:	e000ed00 	.word	0xe000ed00
 800b0c8:	410fc271 	.word	0x410fc271
 800b0cc:	410fc270 	.word	0x410fc270
 800b0d0:	e000e400 	.word	0xe000e400
 800b0d4:	200000dc 	.word	0x200000dc
 800b0d8:	200000e0 	.word	0x200000e0
 800b0dc:	e000ed20 	.word	0xe000ed20
 800b0e0:	20000020 	.word	0x20000020
 800b0e4:	e000ef34 	.word	0xe000ef34

0800b0e8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b0e8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b0ec:	2b0f      	cmp	r3, #15
 800b0ee:	d90f      	bls.n	800b110 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b0f0:	4a10      	ldr	r2, [pc, #64]	; (800b134 <vPortValidateInterruptPriority+0x4c>)
 800b0f2:	5c9b      	ldrb	r3, [r3, r2]
 800b0f4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b0f6:	4a10      	ldr	r2, [pc, #64]	; (800b138 <vPortValidateInterruptPriority+0x50>)
 800b0f8:	7812      	ldrb	r2, [r2, #0]
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d208      	bcs.n	800b110 <vPortValidateInterruptPriority+0x28>
 800b0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b102:	f383 8811 	msr	BASEPRI, r3
 800b106:	f3bf 8f6f 	isb	sy
 800b10a:	f3bf 8f4f 	dsb	sy
 800b10e:	e7fe      	b.n	800b10e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b110:	4b0a      	ldr	r3, [pc, #40]	; (800b13c <vPortValidateInterruptPriority+0x54>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b118:	4a09      	ldr	r2, [pc, #36]	; (800b140 <vPortValidateInterruptPriority+0x58>)
 800b11a:	6812      	ldr	r2, [r2, #0]
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d908      	bls.n	800b132 <vPortValidateInterruptPriority+0x4a>
 800b120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b124:	f383 8811 	msr	BASEPRI, r3
 800b128:	f3bf 8f6f 	isb	sy
 800b12c:	f3bf 8f4f 	dsb	sy
 800b130:	e7fe      	b.n	800b130 <vPortValidateInterruptPriority+0x48>
 800b132:	4770      	bx	lr
 800b134:	e000e3f0 	.word	0xe000e3f0
 800b138:	200000dc 	.word	0x200000dc
 800b13c:	e000ed0c 	.word	0xe000ed0c
 800b140:	200000e0 	.word	0x200000e0

0800b144 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b144:	4a13      	ldr	r2, [pc, #76]	; (800b194 <prvHeapInit+0x50>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b146:	f012 0f07 	tst.w	r2, #7
 800b14a:	d01f      	beq.n	800b18c <prvHeapInit+0x48>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b14c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b14e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b152:	f5c1 439c 	rsb	r3, r1, #19968	; 0x4e00
 800b156:	3320      	adds	r3, #32
 800b158:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b15a:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b15c:	480e      	ldr	r0, [pc, #56]	; (800b198 <prvHeapInit+0x54>)
 800b15e:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b160:	2100      	movs	r1, #0
 800b162:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b164:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800b166:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b168:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800b16c:	480b      	ldr	r0, [pc, #44]	; (800b19c <prvHeapInit+0x58>)
 800b16e:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800b170:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b172:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b174:	1a99      	subs	r1, r3, r2
 800b176:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b178:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b17a:	4b09      	ldr	r3, [pc, #36]	; (800b1a0 <prvHeapInit+0x5c>)
 800b17c:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b17e:	4b09      	ldr	r3, [pc, #36]	; (800b1a4 <prvHeapInit+0x60>)
 800b180:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b182:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b186:	4b08      	ldr	r3, [pc, #32]	; (800b1a8 <prvHeapInit+0x64>)
 800b188:	601a      	str	r2, [r3, #0]
 800b18a:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b18c:	f644 6320 	movw	r3, #20000	; 0x4e20
 800b190:	e7e4      	b.n	800b15c <prvHeapInit+0x18>
 800b192:	bf00      	nop
 800b194:	200000e8 	.word	0x200000e8
 800b198:	20004f14 	.word	0x20004f14
 800b19c:	200000e4 	.word	0x200000e4
 800b1a0:	20004f10 	.word	0x20004f10
 800b1a4:	20004f0c 	.word	0x20004f0c
 800b1a8:	20004f08 	.word	0x20004f08

0800b1ac <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b1ac:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b1ae:	4b13      	ldr	r3, [pc, #76]	; (800b1fc <prvInsertBlockIntoFreeList+0x50>)
 800b1b0:	681a      	ldr	r2, [r3, #0]
 800b1b2:	4282      	cmp	r2, r0
 800b1b4:	d31b      	bcc.n	800b1ee <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b1b6:	6859      	ldr	r1, [r3, #4]
 800b1b8:	185c      	adds	r4, r3, r1
 800b1ba:	42a0      	cmp	r0, r4
 800b1bc:	d103      	bne.n	800b1c6 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b1be:	6840      	ldr	r0, [r0, #4]
 800b1c0:	4401      	add	r1, r0
 800b1c2:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b1c4:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b1c6:	6841      	ldr	r1, [r0, #4]
 800b1c8:	1844      	adds	r4, r0, r1
 800b1ca:	42a2      	cmp	r2, r4
 800b1cc:	d113      	bne.n	800b1f6 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b1ce:	4c0c      	ldr	r4, [pc, #48]	; (800b200 <prvInsertBlockIntoFreeList+0x54>)
 800b1d0:	6824      	ldr	r4, [r4, #0]
 800b1d2:	42a2      	cmp	r2, r4
 800b1d4:	d00d      	beq.n	800b1f2 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b1d6:	6852      	ldr	r2, [r2, #4]
 800b1d8:	4411      	add	r1, r2
 800b1da:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b1dc:	681a      	ldr	r2, [r3, #0]
 800b1de:	6812      	ldr	r2, [r2, #0]
 800b1e0:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b1e2:	4298      	cmp	r0, r3
 800b1e4:	d000      	beq.n	800b1e8 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b1e6:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1ec:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b1ee:	4613      	mov	r3, r2
 800b1f0:	e7de      	b.n	800b1b0 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b1f2:	6004      	str	r4, [r0, #0]
 800b1f4:	e7f5      	b.n	800b1e2 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b1f6:	6002      	str	r2, [r0, #0]
 800b1f8:	e7f3      	b.n	800b1e2 <prvInsertBlockIntoFreeList+0x36>
 800b1fa:	bf00      	nop
 800b1fc:	20004f14 	.word	0x20004f14
 800b200:	200000e4 	.word	0x200000e4

0800b204 <pvPortMalloc>:
{
 800b204:	b570      	push	{r4, r5, r6, lr}
 800b206:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800b208:	f000 ff9c 	bl	800c144 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800b20c:	4b3a      	ldr	r3, [pc, #232]	; (800b2f8 <pvPortMalloc+0xf4>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	b1bb      	cbz	r3, 800b242 <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b212:	4b3a      	ldr	r3, [pc, #232]	; (800b2fc <pvPortMalloc+0xf8>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	421c      	tst	r4, r3
 800b218:	d163      	bne.n	800b2e2 <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 800b21a:	b1ac      	cbz	r4, 800b248 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 800b21c:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b21e:	f014 0f07 	tst.w	r4, #7
 800b222:	d011      	beq.n	800b248 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b224:	f024 0407 	bic.w	r4, r4, #7
 800b228:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b22a:	f004 0307 	and.w	r3, r4, #7
 800b22e:	b15b      	cbz	r3, 800b248 <pvPortMalloc+0x44>
 800b230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b234:	f383 8811 	msr	BASEPRI, r3
 800b238:	f3bf 8f6f 	isb	sy
 800b23c:	f3bf 8f4f 	dsb	sy
 800b240:	e7fe      	b.n	800b240 <pvPortMalloc+0x3c>
			prvHeapInit();
 800b242:	f7ff ff7f 	bl	800b144 <prvHeapInit>
 800b246:	e7e4      	b.n	800b212 <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b248:	2c00      	cmp	r4, #0
 800b24a:	d04c      	beq.n	800b2e6 <pvPortMalloc+0xe2>
 800b24c:	4b2c      	ldr	r3, [pc, #176]	; (800b300 <pvPortMalloc+0xfc>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	429c      	cmp	r4, r3
 800b252:	d84a      	bhi.n	800b2ea <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 800b254:	4b2b      	ldr	r3, [pc, #172]	; (800b304 <pvPortMalloc+0x100>)
 800b256:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b258:	e001      	b.n	800b25e <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 800b25a:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800b25c:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b25e:	686a      	ldr	r2, [r5, #4]
 800b260:	4294      	cmp	r4, r2
 800b262:	d902      	bls.n	800b26a <pvPortMalloc+0x66>
 800b264:	682a      	ldr	r2, [r5, #0]
 800b266:	2a00      	cmp	r2, #0
 800b268:	d1f7      	bne.n	800b25a <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 800b26a:	4a23      	ldr	r2, [pc, #140]	; (800b2f8 <pvPortMalloc+0xf4>)
 800b26c:	6812      	ldr	r2, [r2, #0]
 800b26e:	4295      	cmp	r5, r2
 800b270:	d03d      	beq.n	800b2ee <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b272:	681e      	ldr	r6, [r3, #0]
 800b274:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b276:	682a      	ldr	r2, [r5, #0]
 800b278:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b27a:	686b      	ldr	r3, [r5, #4]
 800b27c:	1b1b      	subs	r3, r3, r4
 800b27e:	2b10      	cmp	r3, #16
 800b280:	d910      	bls.n	800b2a4 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b282:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b284:	f010 0f07 	tst.w	r0, #7
 800b288:	d008      	beq.n	800b29c <pvPortMalloc+0x98>
 800b28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b28e:	f383 8811 	msr	BASEPRI, r3
 800b292:	f3bf 8f6f 	isb	sy
 800b296:	f3bf 8f4f 	dsb	sy
 800b29a:	e7fe      	b.n	800b29a <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b29c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b29e:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b2a0:	f7ff ff84 	bl	800b1ac <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b2a4:	686a      	ldr	r2, [r5, #4]
 800b2a6:	4916      	ldr	r1, [pc, #88]	; (800b300 <pvPortMalloc+0xfc>)
 800b2a8:	680b      	ldr	r3, [r1, #0]
 800b2aa:	1a9b      	subs	r3, r3, r2
 800b2ac:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b2ae:	4916      	ldr	r1, [pc, #88]	; (800b308 <pvPortMalloc+0x104>)
 800b2b0:	6809      	ldr	r1, [r1, #0]
 800b2b2:	428b      	cmp	r3, r1
 800b2b4:	d201      	bcs.n	800b2ba <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b2b6:	4914      	ldr	r1, [pc, #80]	; (800b308 <pvPortMalloc+0x104>)
 800b2b8:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b2ba:	4b10      	ldr	r3, [pc, #64]	; (800b2fc <pvPortMalloc+0xf8>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800b2c6:	f000 ffdb 	bl	800c280 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b2ca:	f016 0f07 	tst.w	r6, #7
 800b2ce:	d010      	beq.n	800b2f2 <pvPortMalloc+0xee>
 800b2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d4:	f383 8811 	msr	BASEPRI, r3
 800b2d8:	f3bf 8f6f 	isb	sy
 800b2dc:	f3bf 8f4f 	dsb	sy
 800b2e0:	e7fe      	b.n	800b2e0 <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 800b2e2:	2600      	movs	r6, #0
 800b2e4:	e7ef      	b.n	800b2c6 <pvPortMalloc+0xc2>
 800b2e6:	2600      	movs	r6, #0
 800b2e8:	e7ed      	b.n	800b2c6 <pvPortMalloc+0xc2>
 800b2ea:	2600      	movs	r6, #0
 800b2ec:	e7eb      	b.n	800b2c6 <pvPortMalloc+0xc2>
 800b2ee:	2600      	movs	r6, #0
 800b2f0:	e7e9      	b.n	800b2c6 <pvPortMalloc+0xc2>
}
 800b2f2:	4630      	mov	r0, r6
 800b2f4:	bd70      	pop	{r4, r5, r6, pc}
 800b2f6:	bf00      	nop
 800b2f8:	200000e4 	.word	0x200000e4
 800b2fc:	20004f08 	.word	0x20004f08
 800b300:	20004f0c 	.word	0x20004f0c
 800b304:	20004f14 	.word	0x20004f14
 800b308:	20004f10 	.word	0x20004f10

0800b30c <vPortFree>:
	if( pv != NULL )
 800b30c:	b380      	cbz	r0, 800b370 <vPortFree+0x64>
{
 800b30e:	b538      	push	{r3, r4, r5, lr}
 800b310:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800b312:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b316:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800b31a:	4916      	ldr	r1, [pc, #88]	; (800b374 <vPortFree+0x68>)
 800b31c:	6809      	ldr	r1, [r1, #0]
 800b31e:	420a      	tst	r2, r1
 800b320:	d108      	bne.n	800b334 <vPortFree+0x28>
 800b322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b326:	f383 8811 	msr	BASEPRI, r3
 800b32a:	f3bf 8f6f 	isb	sy
 800b32e:	f3bf 8f4f 	dsb	sy
 800b332:	e7fe      	b.n	800b332 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b334:	f850 0c08 	ldr.w	r0, [r0, #-8]
 800b338:	b140      	cbz	r0, 800b34c <vPortFree+0x40>
 800b33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b33e:	f383 8811 	msr	BASEPRI, r3
 800b342:	f3bf 8f6f 	isb	sy
 800b346:	f3bf 8f4f 	dsb	sy
 800b34a:	e7fe      	b.n	800b34a <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b34c:	ea22 0201 	bic.w	r2, r2, r1
 800b350:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 800b354:	f000 fef6 	bl	800c144 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b358:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800b35c:	4a06      	ldr	r2, [pc, #24]	; (800b378 <vPortFree+0x6c>)
 800b35e:	6813      	ldr	r3, [r2, #0]
 800b360:	440b      	add	r3, r1
 800b362:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b364:	4628      	mov	r0, r5
 800b366:	f7ff ff21 	bl	800b1ac <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800b36a:	f000 ff89 	bl	800c280 <xTaskResumeAll>
 800b36e:	bd38      	pop	{r3, r4, r5, pc}
 800b370:	4770      	bx	lr
 800b372:	bf00      	nop
 800b374:	20004f08 	.word	0x20004f08
 800b378:	20004f0c 	.word	0x20004f0c

0800b37c <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800b37c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b37e:	b123      	cbz	r3, 800b38a <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b380:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b382:	6818      	ldr	r0, [r3, #0]
 800b384:	f1c0 0007 	rsb	r0, r0, #7
 800b388:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b38a:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800b38c:	4770      	bx	lr

0800b38e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b38e:	b510      	push	{r4, lr}
 800b390:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b392:	f7ff fd7f 	bl	800ae94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b396:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b398:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d004      	beq.n	800b3a8 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800b39e:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800b3a0:	f7ff fd9a 	bl	800aed8 <vPortExitCritical>

	return xReturn;
}
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800b3a8:	2401      	movs	r4, #1
 800b3aa:	e7f9      	b.n	800b3a0 <prvIsQueueFull+0x12>

0800b3ac <prvIsQueueEmpty>:
{
 800b3ac:	b510      	push	{r4, lr}
 800b3ae:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800b3b0:	f7ff fd70 	bl	800ae94 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b3b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b3b6:	b123      	cbz	r3, 800b3c2 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 800b3b8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800b3ba:	f7ff fd8d 	bl	800aed8 <vPortExitCritical>
}
 800b3be:	4620      	mov	r0, r4
 800b3c0:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800b3c2:	2401      	movs	r4, #1
 800b3c4:	e7f9      	b.n	800b3ba <prvIsQueueEmpty+0xe>

0800b3c6 <prvCopyDataToQueue>:
{
 800b3c6:	b570      	push	{r4, r5, r6, lr}
 800b3c8:	4604      	mov	r4, r0
 800b3ca:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b3cc:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b3ce:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800b3d0:	b94a      	cbnz	r2, 800b3e6 <prvCopyDataToQueue+0x20>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b3d2:	6803      	ldr	r3, [r0, #0]
 800b3d4:	bb53      	cbnz	r3, 800b42c <prvCopyDataToQueue+0x66>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800b3d6:	6840      	ldr	r0, [r0, #4]
 800b3d8:	f001 f982 	bl	800c6e0 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b3e0:	3501      	adds	r5, #1
 800b3e2:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800b3e4:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800b3e6:	b96e      	cbnz	r6, 800b404 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800b3e8:	6880      	ldr	r0, [r0, #8]
 800b3ea:	f005 fddf 	bl	8010fac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800b3ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b3f0:	68a3      	ldr	r3, [r4, #8]
 800b3f2:	4413      	add	r3, r2
 800b3f4:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b3f6:	6862      	ldr	r2, [r4, #4]
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d319      	bcc.n	800b430 <prvCopyDataToQueue+0x6a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b3fc:	6823      	ldr	r3, [r4, #0]
 800b3fe:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800b400:	2000      	movs	r0, #0
 800b402:	e7ed      	b.n	800b3e0 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b404:	68c0      	ldr	r0, [r0, #12]
 800b406:	f005 fdd1 	bl	8010fac <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800b40a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b40c:	425b      	negs	r3, r3
 800b40e:	68e2      	ldr	r2, [r4, #12]
 800b410:	441a      	add	r2, r3
 800b412:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b414:	6821      	ldr	r1, [r4, #0]
 800b416:	428a      	cmp	r2, r1
 800b418:	d202      	bcs.n	800b420 <prvCopyDataToQueue+0x5a>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800b41a:	6862      	ldr	r2, [r4, #4]
 800b41c:	4413      	add	r3, r2
 800b41e:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800b420:	2e02      	cmp	r6, #2
 800b422:	d107      	bne.n	800b434 <prvCopyDataToQueue+0x6e>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b424:	b145      	cbz	r5, 800b438 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800b426:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 800b428:	2000      	movs	r0, #0
 800b42a:	e7d9      	b.n	800b3e0 <prvCopyDataToQueue+0x1a>
 800b42c:	2000      	movs	r0, #0
 800b42e:	e7d7      	b.n	800b3e0 <prvCopyDataToQueue+0x1a>
 800b430:	2000      	movs	r0, #0
 800b432:	e7d5      	b.n	800b3e0 <prvCopyDataToQueue+0x1a>
 800b434:	2000      	movs	r0, #0
 800b436:	e7d3      	b.n	800b3e0 <prvCopyDataToQueue+0x1a>
 800b438:	2000      	movs	r0, #0
 800b43a:	e7d1      	b.n	800b3e0 <prvCopyDataToQueue+0x1a>

0800b43c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b43c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800b43e:	b172      	cbz	r2, 800b45e <prvCopyDataFromQueue+0x22>
{
 800b440:	b510      	push	{r4, lr}
 800b442:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800b444:	68c4      	ldr	r4, [r0, #12]
 800b446:	4414      	add	r4, r2
 800b448:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b44a:	6840      	ldr	r0, [r0, #4]
 800b44c:	4284      	cmp	r4, r0
 800b44e:	d301      	bcc.n	800b454 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800b450:	6818      	ldr	r0, [r3, #0]
 800b452:	60d8      	str	r0, [r3, #12]
 800b454:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800b456:	68d9      	ldr	r1, [r3, #12]
 800b458:	f005 fda8 	bl	8010fac <memcpy>
 800b45c:	bd10      	pop	{r4, pc}
 800b45e:	4770      	bx	lr

0800b460 <prvUnlockQueue>:
{
 800b460:	b538      	push	{r3, r4, r5, lr}
 800b462:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800b464:	f7ff fd16 	bl	800ae94 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800b468:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800b46c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b46e:	e001      	b.n	800b474 <prvUnlockQueue+0x14>
			--cTxLock;
 800b470:	3c01      	subs	r4, #1
 800b472:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b474:	2c00      	cmp	r4, #0
 800b476:	dd0a      	ble.n	800b48e <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b478:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b47a:	b143      	cbz	r3, 800b48e <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b47c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800b480:	f001 f826 	bl	800c4d0 <xTaskRemoveFromEventList>
 800b484:	2800      	cmp	r0, #0
 800b486:	d0f3      	beq.n	800b470 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 800b488:	f001 f8b4 	bl	800c5f4 <vTaskMissedYield>
 800b48c:	e7f0      	b.n	800b470 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800b48e:	23ff      	movs	r3, #255	; 0xff
 800b490:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 800b494:	f7ff fd20 	bl	800aed8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800b498:	f7ff fcfc 	bl	800ae94 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800b49c:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800b4a0:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b4a2:	e001      	b.n	800b4a8 <prvUnlockQueue+0x48>
				--cRxLock;
 800b4a4:	3c01      	subs	r4, #1
 800b4a6:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b4a8:	2c00      	cmp	r4, #0
 800b4aa:	dd0a      	ble.n	800b4c2 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4ac:	692b      	ldr	r3, [r5, #16]
 800b4ae:	b143      	cbz	r3, 800b4c2 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4b0:	f105 0010 	add.w	r0, r5, #16
 800b4b4:	f001 f80c 	bl	800c4d0 <xTaskRemoveFromEventList>
 800b4b8:	2800      	cmp	r0, #0
 800b4ba:	d0f3      	beq.n	800b4a4 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800b4bc:	f001 f89a 	bl	800c5f4 <vTaskMissedYield>
 800b4c0:	e7f0      	b.n	800b4a4 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800b4c2:	23ff      	movs	r3, #255	; 0xff
 800b4c4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 800b4c8:	f7ff fd06 	bl	800aed8 <vPortExitCritical>
 800b4cc:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b4d0 <xQueueGenericReset>:
{
 800b4d0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800b4d2:	b330      	cbz	r0, 800b522 <xQueueGenericReset+0x52>
 800b4d4:	4604      	mov	r4, r0
 800b4d6:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 800b4d8:	f7ff fcdc 	bl	800ae94 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800b4dc:	6821      	ldr	r1, [r4, #0]
 800b4de:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b4e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b4e2:	fb03 1002 	mla	r0, r3, r2, r1
 800b4e6:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b4e8:	2000      	movs	r0, #0
 800b4ea:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b4ec:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800b4ee:	3a01      	subs	r2, #1
 800b4f0:	fb02 1303 	mla	r3, r2, r3, r1
 800b4f4:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b4f6:	23ff      	movs	r3, #255	; 0xff
 800b4f8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b4fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800b500:	b9c5      	cbnz	r5, 800b534 <xQueueGenericReset+0x64>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b502:	6923      	ldr	r3, [r4, #16]
 800b504:	b1f3      	cbz	r3, 800b544 <xQueueGenericReset+0x74>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b506:	f104 0010 	add.w	r0, r4, #16
 800b50a:	f000 ffe1 	bl	800c4d0 <xTaskRemoveFromEventList>
 800b50e:	b1c8      	cbz	r0, 800b544 <xQueueGenericReset+0x74>
					queueYIELD_IF_USING_PREEMPTION();
 800b510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b514:	4b0d      	ldr	r3, [pc, #52]	; (800b54c <xQueueGenericReset+0x7c>)
 800b516:	601a      	str	r2, [r3, #0]
 800b518:	f3bf 8f4f 	dsb	sy
 800b51c:	f3bf 8f6f 	isb	sy
 800b520:	e010      	b.n	800b544 <xQueueGenericReset+0x74>
 800b522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b526:	f383 8811 	msr	BASEPRI, r3
 800b52a:	f3bf 8f6f 	isb	sy
 800b52e:	f3bf 8f4f 	dsb	sy
 800b532:	e7fe      	b.n	800b532 <xQueueGenericReset+0x62>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b534:	f104 0010 	add.w	r0, r4, #16
 800b538:	f7ff fbfa 	bl	800ad30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b53c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b540:	f7ff fbf6 	bl	800ad30 <vListInitialise>
	taskEXIT_CRITICAL();
 800b544:	f7ff fcc8 	bl	800aed8 <vPortExitCritical>
}
 800b548:	2001      	movs	r0, #1
 800b54a:	bd38      	pop	{r3, r4, r5, pc}
 800b54c:	e000ed04 	.word	0xe000ed04

0800b550 <prvInitialiseNewQueue>:
{
 800b550:	b510      	push	{r4, lr}
 800b552:	9b02      	ldr	r3, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800b554:	460c      	mov	r4, r1
 800b556:	b139      	cbz	r1, 800b568 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b558:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800b55a:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b55c:	641c      	str	r4, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b55e:	2101      	movs	r1, #1
 800b560:	4618      	mov	r0, r3
 800b562:	f7ff ffb5 	bl	800b4d0 <xQueueGenericReset>
 800b566:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b568:	601b      	str	r3, [r3, #0]
 800b56a:	e7f6      	b.n	800b55a <prvInitialiseNewQueue+0xa>

0800b56c <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b56c:	b940      	cbnz	r0, 800b580 <xQueueGenericCreate+0x14>
 800b56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b572:	f383 8811 	msr	BASEPRI, r3
 800b576:	f3bf 8f6f 	isb	sy
 800b57a:	f3bf 8f4f 	dsb	sy
 800b57e:	e7fe      	b.n	800b57e <xQueueGenericCreate+0x12>
	{
 800b580:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b582:	b083      	sub	sp, #12
 800b584:	4605      	mov	r5, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 800b586:	b111      	cbz	r1, 800b58e <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b588:	fb01 f000 	mul.w	r0, r1, r0
 800b58c:	e000      	b.n	800b590 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 800b58e:	2000      	movs	r0, #0
 800b590:	4617      	mov	r7, r2
 800b592:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800b594:	3048      	adds	r0, #72	; 0x48
 800b596:	f7ff fe35 	bl	800b204 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800b59a:	4606      	mov	r6, r0
 800b59c:	b138      	cbz	r0, 800b5ae <xQueueGenericCreate+0x42>
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b59e:	9000      	str	r0, [sp, #0]
 800b5a0:	463b      	mov	r3, r7
 800b5a2:	f100 0248 	add.w	r2, r0, #72	; 0x48
 800b5a6:	4621      	mov	r1, r4
 800b5a8:	4628      	mov	r0, r5
 800b5aa:	f7ff ffd1 	bl	800b550 <prvInitialiseNewQueue>
	}
 800b5ae:	4630      	mov	r0, r6
 800b5b0:	b003      	add	sp, #12
 800b5b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b5b4 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 800b5b4:	b940      	cbnz	r0, 800b5c8 <xQueueCreateCountingSemaphore+0x14>
 800b5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ba:	f383 8811 	msr	BASEPRI, r3
 800b5be:	f3bf 8f6f 	isb	sy
 800b5c2:	f3bf 8f4f 	dsb	sy
 800b5c6:	e7fe      	b.n	800b5c6 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b5c8:	4288      	cmp	r0, r1
 800b5ca:	d208      	bcs.n	800b5de <xQueueCreateCountingSemaphore+0x2a>
 800b5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d0:	f383 8811 	msr	BASEPRI, r3
 800b5d4:	f3bf 8f6f 	isb	sy
 800b5d8:	f3bf 8f4f 	dsb	sy
 800b5dc:	e7fe      	b.n	800b5dc <xQueueCreateCountingSemaphore+0x28>
	{
 800b5de:	b510      	push	{r4, lr}
 800b5e0:	460c      	mov	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b5e2:	2202      	movs	r2, #2
 800b5e4:	2100      	movs	r1, #0
 800b5e6:	f7ff ffc1 	bl	800b56c <xQueueGenericCreate>
		if( xHandle != NULL )
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	b100      	cbz	r0, 800b5f0 <xQueueCreateCountingSemaphore+0x3c>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b5ee:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	bd10      	pop	{r4, pc}

0800b5f4 <xQueueGenericSend>:
{
 800b5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5f6:	b085      	sub	sp, #20
 800b5f8:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800b5fa:	b160      	cbz	r0, 800b616 <xQueueGenericSend+0x22>
 800b5fc:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b5fe:	b199      	cbz	r1, 800b628 <xQueueGenericSend+0x34>
 800b600:	2501      	movs	r5, #1
 800b602:	b9bd      	cbnz	r5, 800b634 <xQueueGenericSend+0x40>
 800b604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b608:	f383 8811 	msr	BASEPRI, r3
 800b60c:	f3bf 8f6f 	isb	sy
 800b610:	f3bf 8f4f 	dsb	sy
 800b614:	e7fe      	b.n	800b614 <xQueueGenericSend+0x20>
 800b616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b61a:	f383 8811 	msr	BASEPRI, r3
 800b61e:	f3bf 8f6f 	isb	sy
 800b622:	f3bf 8f4f 	dsb	sy
 800b626:	e7fe      	b.n	800b626 <xQueueGenericSend+0x32>
 800b628:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800b62a:	b90a      	cbnz	r2, 800b630 <xQueueGenericSend+0x3c>
 800b62c:	2501      	movs	r5, #1
 800b62e:	e7e8      	b.n	800b602 <xQueueGenericSend+0xe>
 800b630:	2500      	movs	r5, #0
 800b632:	e7e6      	b.n	800b602 <xQueueGenericSend+0xe>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b634:	2b02      	cmp	r3, #2
 800b636:	d009      	beq.n	800b64c <xQueueGenericSend+0x58>
 800b638:	b96d      	cbnz	r5, 800b656 <xQueueGenericSend+0x62>
 800b63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b63e:	f383 8811 	msr	BASEPRI, r3
 800b642:	f3bf 8f6f 	isb	sy
 800b646:	f3bf 8f4f 	dsb	sy
 800b64a:	e7fe      	b.n	800b64a <xQueueGenericSend+0x56>
 800b64c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b64e:	2a01      	cmp	r2, #1
 800b650:	d0f2      	beq.n	800b638 <xQueueGenericSend+0x44>
 800b652:	2500      	movs	r5, #0
 800b654:	e7f0      	b.n	800b638 <xQueueGenericSend+0x44>
 800b656:	461e      	mov	r6, r3
 800b658:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b65a:	f000 ffd1 	bl	800c600 <xTaskGetSchedulerState>
 800b65e:	b910      	cbnz	r0, 800b666 <xQueueGenericSend+0x72>
 800b660:	9b01      	ldr	r3, [sp, #4]
 800b662:	b103      	cbz	r3, 800b666 <xQueueGenericSend+0x72>
 800b664:	2500      	movs	r5, #0
 800b666:	b945      	cbnz	r5, 800b67a <xQueueGenericSend+0x86>
 800b668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b66c:	f383 8811 	msr	BASEPRI, r3
 800b670:	f3bf 8f6f 	isb	sy
 800b674:	f3bf 8f4f 	dsb	sy
 800b678:	e7fe      	b.n	800b678 <xQueueGenericSend+0x84>
 800b67a:	2500      	movs	r5, #0
 800b67c:	e02c      	b.n	800b6d8 <xQueueGenericSend+0xe4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b67e:	4632      	mov	r2, r6
 800b680:	4639      	mov	r1, r7
 800b682:	4620      	mov	r0, r4
 800b684:	f7ff fe9f 	bl	800b3c6 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b688:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b68a:	b18b      	cbz	r3, 800b6b0 <xQueueGenericSend+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b68c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b690:	f000 ff1e 	bl	800c4d0 <xTaskRemoveFromEventList>
 800b694:	b138      	cbz	r0, 800b6a6 <xQueueGenericSend+0xb2>
							queueYIELD_IF_USING_PREEMPTION();
 800b696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b69a:	4b37      	ldr	r3, [pc, #220]	; (800b778 <xQueueGenericSend+0x184>)
 800b69c:	601a      	str	r2, [r3, #0]
 800b69e:	f3bf 8f4f 	dsb	sy
 800b6a2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800b6a6:	f7ff fc17 	bl	800aed8 <vPortExitCritical>
				return pdPASS;
 800b6aa:	2001      	movs	r0, #1
}
 800b6ac:	b005      	add	sp, #20
 800b6ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
					else if( xYieldRequired != pdFALSE )
 800b6b0:	2800      	cmp	r0, #0
 800b6b2:	d0f8      	beq.n	800b6a6 <xQueueGenericSend+0xb2>
						queueYIELD_IF_USING_PREEMPTION();
 800b6b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6b8:	4b2f      	ldr	r3, [pc, #188]	; (800b778 <xQueueGenericSend+0x184>)
 800b6ba:	601a      	str	r2, [r3, #0]
 800b6bc:	f3bf 8f4f 	dsb	sy
 800b6c0:	f3bf 8f6f 	isb	sy
 800b6c4:	e7ef      	b.n	800b6a6 <xQueueGenericSend+0xb2>
					taskEXIT_CRITICAL();
 800b6c6:	f7ff fc07 	bl	800aed8 <vPortExitCritical>
					return errQUEUE_FULL;
 800b6ca:	2000      	movs	r0, #0
 800b6cc:	e7ee      	b.n	800b6ac <xQueueGenericSend+0xb8>
				prvUnlockQueue( pxQueue );
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	f7ff fec6 	bl	800b460 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b6d4:	f000 fdd4 	bl	800c280 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800b6d8:	f7ff fbdc 	bl	800ae94 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b6dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b6de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d3cc      	bcc.n	800b67e <xQueueGenericSend+0x8a>
 800b6e4:	2e02      	cmp	r6, #2
 800b6e6:	d0ca      	beq.n	800b67e <xQueueGenericSend+0x8a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800b6e8:	9b01      	ldr	r3, [sp, #4]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d0eb      	beq.n	800b6c6 <xQueueGenericSend+0xd2>
				else if( xEntryTimeSet == pdFALSE )
 800b6ee:	b91d      	cbnz	r5, 800b6f8 <xQueueGenericSend+0x104>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b6f0:	a802      	add	r0, sp, #8
 800b6f2:	f000 ff33 	bl	800c55c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b6f6:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 800b6f8:	f7ff fbee 	bl	800aed8 <vPortExitCritical>
		vTaskSuspendAll();
 800b6fc:	f000 fd22 	bl	800c144 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b700:	f7ff fbc8 	bl	800ae94 <vPortEnterCritical>
 800b704:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b708:	b25b      	sxtb	r3, r3
 800b70a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b70e:	d102      	bne.n	800b716 <xQueueGenericSend+0x122>
 800b710:	2300      	movs	r3, #0
 800b712:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800b716:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b71a:	b25b      	sxtb	r3, r3
 800b71c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b720:	d102      	bne.n	800b728 <xQueueGenericSend+0x134>
 800b722:	2300      	movs	r3, #0
 800b724:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b728:	f7ff fbd6 	bl	800aed8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b72c:	a901      	add	r1, sp, #4
 800b72e:	a802      	add	r0, sp, #8
 800b730:	f000 ff20 	bl	800c574 <xTaskCheckForTimeOut>
 800b734:	b9c8      	cbnz	r0, 800b76a <xQueueGenericSend+0x176>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b736:	4620      	mov	r0, r4
 800b738:	f7ff fe29 	bl	800b38e <prvIsQueueFull>
 800b73c:	2800      	cmp	r0, #0
 800b73e:	d0c6      	beq.n	800b6ce <xQueueGenericSend+0xda>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b740:	9901      	ldr	r1, [sp, #4]
 800b742:	f104 0010 	add.w	r0, r4, #16
 800b746:	f000 fe8f 	bl	800c468 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b74a:	4620      	mov	r0, r4
 800b74c:	f7ff fe88 	bl	800b460 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b750:	f000 fd96 	bl	800c280 <xTaskResumeAll>
 800b754:	2800      	cmp	r0, #0
 800b756:	d1bf      	bne.n	800b6d8 <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
 800b758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b75c:	4b06      	ldr	r3, [pc, #24]	; (800b778 <xQueueGenericSend+0x184>)
 800b75e:	601a      	str	r2, [r3, #0]
 800b760:	f3bf 8f4f 	dsb	sy
 800b764:	f3bf 8f6f 	isb	sy
 800b768:	e7b6      	b.n	800b6d8 <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
 800b76a:	4620      	mov	r0, r4
 800b76c:	f7ff fe78 	bl	800b460 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b770:	f000 fd86 	bl	800c280 <xTaskResumeAll>
			return errQUEUE_FULL;
 800b774:	2000      	movs	r0, #0
 800b776:	e799      	b.n	800b6ac <xQueueGenericSend+0xb8>
 800b778:	e000ed04 	.word	0xe000ed04

0800b77c <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 800b77c:	b148      	cbz	r0, 800b792 <prvInitialiseMutex+0x16>
	{
 800b77e:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 800b780:	2100      	movs	r1, #0
 800b782:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b784:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800b786:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b788:	460b      	mov	r3, r1
 800b78a:	460a      	mov	r2, r1
 800b78c:	f7ff ff32 	bl	800b5f4 <xQueueGenericSend>
 800b790:	bd08      	pop	{r3, pc}
 800b792:	4770      	bx	lr

0800b794 <xQueueCreateMutex>:
	{
 800b794:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b796:	4602      	mov	r2, r0
 800b798:	2100      	movs	r1, #0
 800b79a:	2001      	movs	r0, #1
 800b79c:	f7ff fee6 	bl	800b56c <xQueueGenericCreate>
 800b7a0:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 800b7a2:	f7ff ffeb 	bl	800b77c <prvInitialiseMutex>
	}
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	bd10      	pop	{r4, pc}

0800b7aa <xQueueGenericSendFromISR>:
{
 800b7aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800b7ae:	b160      	cbz	r0, 800b7ca <xQueueGenericSendFromISR+0x20>
 800b7b0:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7b2:	b199      	cbz	r1, 800b7dc <xQueueGenericSendFromISR+0x32>
 800b7b4:	2001      	movs	r0, #1
 800b7b6:	b9b8      	cbnz	r0, 800b7e8 <xQueueGenericSendFromISR+0x3e>
 800b7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7bc:	f383 8811 	msr	BASEPRI, r3
 800b7c0:	f3bf 8f6f 	isb	sy
 800b7c4:	f3bf 8f4f 	dsb	sy
 800b7c8:	e7fe      	b.n	800b7c8 <xQueueGenericSendFromISR+0x1e>
 800b7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ce:	f383 8811 	msr	BASEPRI, r3
 800b7d2:	f3bf 8f6f 	isb	sy
 800b7d6:	f3bf 8f4f 	dsb	sy
 800b7da:	e7fe      	b.n	800b7da <xQueueGenericSendFromISR+0x30>
 800b7dc:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800b7de:	b908      	cbnz	r0, 800b7e4 <xQueueGenericSendFromISR+0x3a>
 800b7e0:	2001      	movs	r0, #1
 800b7e2:	e7e8      	b.n	800b7b6 <xQueueGenericSendFromISR+0xc>
 800b7e4:	2000      	movs	r0, #0
 800b7e6:	e7e6      	b.n	800b7b6 <xQueueGenericSendFromISR+0xc>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b7e8:	2b02      	cmp	r3, #2
 800b7ea:	d009      	beq.n	800b800 <xQueueGenericSendFromISR+0x56>
 800b7ec:	b968      	cbnz	r0, 800b80a <xQueueGenericSendFromISR+0x60>
 800b7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f2:	f383 8811 	msr	BASEPRI, r3
 800b7f6:	f3bf 8f6f 	isb	sy
 800b7fa:	f3bf 8f4f 	dsb	sy
 800b7fe:	e7fe      	b.n	800b7fe <xQueueGenericSendFromISR+0x54>
 800b800:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800b802:	2d01      	cmp	r5, #1
 800b804:	d0f2      	beq.n	800b7ec <xQueueGenericSendFromISR+0x42>
 800b806:	2000      	movs	r0, #0
 800b808:	e7f0      	b.n	800b7ec <xQueueGenericSendFromISR+0x42>
 800b80a:	461f      	mov	r7, r3
 800b80c:	4690      	mov	r8, r2
 800b80e:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b810:	f7ff fc6a 	bl	800b0e8 <vPortValidateInterruptPriority>
	__asm volatile
 800b814:	f3ef 8611 	mrs	r6, BASEPRI
 800b818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b81c:	f383 8811 	msr	BASEPRI, r3
 800b820:	f3bf 8f6f 	isb	sy
 800b824:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b828:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b82a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d301      	bcc.n	800b834 <xQueueGenericSendFromISR+0x8a>
 800b830:	2f02      	cmp	r7, #2
 800b832:	d121      	bne.n	800b878 <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 800b834:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800b838:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b83a:	463a      	mov	r2, r7
 800b83c:	4649      	mov	r1, r9
 800b83e:	4620      	mov	r0, r4
 800b840:	f7ff fdc1 	bl	800b3c6 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800b844:	f1b5 3fff 	cmp.w	r5, #4294967295
 800b848:	d110      	bne.n	800b86c <xQueueGenericSendFromISR+0xc2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b84a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b84c:	b1b3      	cbz	r3, 800b87c <xQueueGenericSendFromISR+0xd2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b84e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b852:	f000 fe3d 	bl	800c4d0 <xTaskRemoveFromEventList>
 800b856:	b198      	cbz	r0, 800b880 <xQueueGenericSendFromISR+0xd6>
							if( pxHigherPriorityTaskWoken != NULL )
 800b858:	f1b8 0f00 	cmp.w	r8, #0
 800b85c:	d012      	beq.n	800b884 <xQueueGenericSendFromISR+0xda>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b85e:	2001      	movs	r0, #1
 800b860:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800b864:	f386 8811 	msr	BASEPRI, r6
}
 800b868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b86c:	1c6b      	adds	r3, r5, #1
 800b86e:	b25b      	sxtb	r3, r3
 800b870:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 800b874:	2001      	movs	r0, #1
 800b876:	e7f5      	b.n	800b864 <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
 800b878:	2000      	movs	r0, #0
 800b87a:	e7f3      	b.n	800b864 <xQueueGenericSendFromISR+0xba>
			xReturn = pdPASS;
 800b87c:	2001      	movs	r0, #1
 800b87e:	e7f1      	b.n	800b864 <xQueueGenericSendFromISR+0xba>
 800b880:	2001      	movs	r0, #1
 800b882:	e7ef      	b.n	800b864 <xQueueGenericSendFromISR+0xba>
 800b884:	2001      	movs	r0, #1
 800b886:	e7ed      	b.n	800b864 <xQueueGenericSendFromISR+0xba>

0800b888 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 800b888:	b160      	cbz	r0, 800b8a4 <xQueueGiveFromISR+0x1c>
{
 800b88a:	b570      	push	{r4, r5, r6, lr}
 800b88c:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800b88e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b890:	b18b      	cbz	r3, 800b8b6 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800b892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b896:	f383 8811 	msr	BASEPRI, r3
 800b89a:	f3bf 8f6f 	isb	sy
 800b89e:	f3bf 8f4f 	dsb	sy
 800b8a2:	e7fe      	b.n	800b8a2 <xQueueGiveFromISR+0x1a>
 800b8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a8:	f383 8811 	msr	BASEPRI, r3
 800b8ac:	f3bf 8f6f 	isb	sy
 800b8b0:	f3bf 8f4f 	dsb	sy
 800b8b4:	e7fe      	b.n	800b8b4 <xQueueGiveFromISR+0x2c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800b8b6:	6803      	ldr	r3, [r0, #0]
 800b8b8:	b153      	cbz	r3, 800b8d0 <xQueueGiveFromISR+0x48>
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	b973      	cbnz	r3, 800b8dc <xQueueGiveFromISR+0x54>
 800b8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c2:	f383 8811 	msr	BASEPRI, r3
 800b8c6:	f3bf 8f6f 	isb	sy
 800b8ca:	f3bf 8f4f 	dsb	sy
 800b8ce:	e7fe      	b.n	800b8ce <xQueueGiveFromISR+0x46>
 800b8d0:	6843      	ldr	r3, [r0, #4]
 800b8d2:	b90b      	cbnz	r3, 800b8d8 <xQueueGiveFromISR+0x50>
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	e7f1      	b.n	800b8bc <xQueueGiveFromISR+0x34>
 800b8d8:	2300      	movs	r3, #0
 800b8da:	e7ef      	b.n	800b8bc <xQueueGiveFromISR+0x34>
 800b8dc:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b8de:	f7ff fc03 	bl	800b0e8 <vPortValidateInterruptPriority>
	__asm volatile
 800b8e2:	f3ef 8511 	mrs	r5, BASEPRI
 800b8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ea:	f383 8811 	msr	BASEPRI, r3
 800b8ee:	f3bf 8f6f 	isb	sy
 800b8f2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b8f6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b8f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d21a      	bcs.n	800b934 <xQueueGiveFromISR+0xac>
			const int8_t cTxLock = pxQueue->cTxLock;
 800b8fe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b902:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b904:	3201      	adds	r2, #1
 800b906:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800b908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b90c:	d10c      	bne.n	800b928 <xQueueGiveFromISR+0xa0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b90e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b910:	b193      	cbz	r3, 800b938 <xQueueGiveFromISR+0xb0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b912:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b916:	f000 fddb 	bl	800c4d0 <xTaskRemoveFromEventList>
 800b91a:	b178      	cbz	r0, 800b93c <xQueueGiveFromISR+0xb4>
							if( pxHigherPriorityTaskWoken != NULL )
 800b91c:	b186      	cbz	r6, 800b940 <xQueueGiveFromISR+0xb8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b91e:	2001      	movs	r0, #1
 800b920:	6030      	str	r0, [r6, #0]
	__asm volatile
 800b922:	f385 8811 	msr	BASEPRI, r5
}
 800b926:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b928:	3301      	adds	r3, #1
 800b92a:	b25b      	sxtb	r3, r3
 800b92c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 800b930:	2001      	movs	r0, #1
 800b932:	e7f6      	b.n	800b922 <xQueueGiveFromISR+0x9a>
			xReturn = errQUEUE_FULL;
 800b934:	2000      	movs	r0, #0
 800b936:	e7f4      	b.n	800b922 <xQueueGiveFromISR+0x9a>
			xReturn = pdPASS;
 800b938:	2001      	movs	r0, #1
 800b93a:	e7f2      	b.n	800b922 <xQueueGiveFromISR+0x9a>
 800b93c:	2001      	movs	r0, #1
 800b93e:	e7f0      	b.n	800b922 <xQueueGiveFromISR+0x9a>
 800b940:	2001      	movs	r0, #1
 800b942:	e7ee      	b.n	800b922 <xQueueGiveFromISR+0x9a>

0800b944 <xQueueReceive>:
{
 800b944:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b946:	b085      	sub	sp, #20
 800b948:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800b94a:	b160      	cbz	r0, 800b966 <xQueueReceive+0x22>
 800b94c:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b94e:	b199      	cbz	r1, 800b978 <xQueueReceive+0x34>
 800b950:	2501      	movs	r5, #1
 800b952:	b9bd      	cbnz	r5, 800b984 <xQueueReceive+0x40>
	__asm volatile
 800b954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b958:	f383 8811 	msr	BASEPRI, r3
 800b95c:	f3bf 8f6f 	isb	sy
 800b960:	f3bf 8f4f 	dsb	sy
 800b964:	e7fe      	b.n	800b964 <xQueueReceive+0x20>
 800b966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b96a:	f383 8811 	msr	BASEPRI, r3
 800b96e:	f3bf 8f6f 	isb	sy
 800b972:	f3bf 8f4f 	dsb	sy
 800b976:	e7fe      	b.n	800b976 <xQueueReceive+0x32>
 800b978:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b97a:	b90b      	cbnz	r3, 800b980 <xQueueReceive+0x3c>
 800b97c:	2501      	movs	r5, #1
 800b97e:	e7e8      	b.n	800b952 <xQueueReceive+0xe>
 800b980:	2500      	movs	r5, #0
 800b982:	e7e6      	b.n	800b952 <xQueueReceive+0xe>
 800b984:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b986:	f000 fe3b 	bl	800c600 <xTaskGetSchedulerState>
 800b98a:	b910      	cbnz	r0, 800b992 <xQueueReceive+0x4e>
 800b98c:	9b01      	ldr	r3, [sp, #4]
 800b98e:	b103      	cbz	r3, 800b992 <xQueueReceive+0x4e>
 800b990:	2500      	movs	r5, #0
 800b992:	b945      	cbnz	r5, 800b9a6 <xQueueReceive+0x62>
 800b994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b998:	f383 8811 	msr	BASEPRI, r3
 800b99c:	f3bf 8f6f 	isb	sy
 800b9a0:	f3bf 8f4f 	dsb	sy
 800b9a4:	e7fe      	b.n	800b9a4 <xQueueReceive+0x60>
 800b9a6:	2700      	movs	r7, #0
 800b9a8:	e02f      	b.n	800ba0a <xQueueReceive+0xc6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b9aa:	4631      	mov	r1, r6
 800b9ac:	4620      	mov	r0, r4
 800b9ae:	f7ff fd45 	bl	800b43c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b9b2:	3d01      	subs	r5, #1
 800b9b4:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9b6:	6923      	ldr	r3, [r4, #16]
 800b9b8:	b163      	cbz	r3, 800b9d4 <xQueueReceive+0x90>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9ba:	f104 0010 	add.w	r0, r4, #16
 800b9be:	f000 fd87 	bl	800c4d0 <xTaskRemoveFromEventList>
 800b9c2:	b138      	cbz	r0, 800b9d4 <xQueueReceive+0x90>
						queueYIELD_IF_USING_PREEMPTION();
 800b9c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9c8:	4b34      	ldr	r3, [pc, #208]	; (800ba9c <xQueueReceive+0x158>)
 800b9ca:	601a      	str	r2, [r3, #0]
 800b9cc:	f3bf 8f4f 	dsb	sy
 800b9d0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800b9d4:	f7ff fa80 	bl	800aed8 <vPortExitCritical>
				return pdPASS;
 800b9d8:	2001      	movs	r0, #1
}
 800b9da:	b005      	add	sp, #20
 800b9dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 800b9de:	f7ff fa7b 	bl	800aed8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800b9e2:	2000      	movs	r0, #0
 800b9e4:	e7f9      	b.n	800b9da <xQueueReceive+0x96>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b9e6:	a802      	add	r0, sp, #8
 800b9e8:	f000 fdb8 	bl	800c55c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b9ec:	2701      	movs	r7, #1
 800b9ee:	e016      	b.n	800ba1e <xQueueReceive+0xda>
		prvLockQueue( pxQueue );
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800b9f6:	e01e      	b.n	800ba36 <xQueueReceive+0xf2>
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b9fe:	e020      	b.n	800ba42 <xQueueReceive+0xfe>
				prvUnlockQueue( pxQueue );
 800ba00:	4620      	mov	r0, r4
 800ba02:	f7ff fd2d 	bl	800b460 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ba06:	f000 fc3b 	bl	800c280 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800ba0a:	f7ff fa43 	bl	800ae94 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba0e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ba10:	2d00      	cmp	r5, #0
 800ba12:	d1ca      	bne.n	800b9aa <xQueueReceive+0x66>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba14:	9b01      	ldr	r3, [sp, #4]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d0e1      	beq.n	800b9de <xQueueReceive+0x9a>
				else if( xEntryTimeSet == pdFALSE )
 800ba1a:	2f00      	cmp	r7, #0
 800ba1c:	d0e3      	beq.n	800b9e6 <xQueueReceive+0xa2>
		taskEXIT_CRITICAL();
 800ba1e:	f7ff fa5b 	bl	800aed8 <vPortExitCritical>
		vTaskSuspendAll();
 800ba22:	f000 fb8f 	bl	800c144 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba26:	f7ff fa35 	bl	800ae94 <vPortEnterCritical>
 800ba2a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ba2e:	b25b      	sxtb	r3, r3
 800ba30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba34:	d0dc      	beq.n	800b9f0 <xQueueReceive+0xac>
 800ba36:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ba3a:	b25b      	sxtb	r3, r3
 800ba3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba40:	d0da      	beq.n	800b9f8 <xQueueReceive+0xb4>
 800ba42:	f7ff fa49 	bl	800aed8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba46:	a901      	add	r1, sp, #4
 800ba48:	a802      	add	r0, sp, #8
 800ba4a:	f000 fd93 	bl	800c574 <xTaskCheckForTimeOut>
 800ba4e:	b9c8      	cbnz	r0, 800ba84 <xQueueReceive+0x140>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba50:	4620      	mov	r0, r4
 800ba52:	f7ff fcab 	bl	800b3ac <prvIsQueueEmpty>
 800ba56:	2800      	cmp	r0, #0
 800ba58:	d0d2      	beq.n	800ba00 <xQueueReceive+0xbc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ba5a:	9901      	ldr	r1, [sp, #4]
 800ba5c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ba60:	f000 fd02 	bl	800c468 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ba64:	4620      	mov	r0, r4
 800ba66:	f7ff fcfb 	bl	800b460 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ba6a:	f000 fc09 	bl	800c280 <xTaskResumeAll>
 800ba6e:	2800      	cmp	r0, #0
 800ba70:	d1cb      	bne.n	800ba0a <xQueueReceive+0xc6>
					portYIELD_WITHIN_API();
 800ba72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba76:	4b09      	ldr	r3, [pc, #36]	; (800ba9c <xQueueReceive+0x158>)
 800ba78:	601a      	str	r2, [r3, #0]
 800ba7a:	f3bf 8f4f 	dsb	sy
 800ba7e:	f3bf 8f6f 	isb	sy
 800ba82:	e7c2      	b.n	800ba0a <xQueueReceive+0xc6>
			prvUnlockQueue( pxQueue );
 800ba84:	4620      	mov	r0, r4
 800ba86:	f7ff fceb 	bl	800b460 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ba8a:	f000 fbf9 	bl	800c280 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba8e:	4620      	mov	r0, r4
 800ba90:	f7ff fc8c 	bl	800b3ac <prvIsQueueEmpty>
 800ba94:	2800      	cmp	r0, #0
 800ba96:	d0b8      	beq.n	800ba0a <xQueueReceive+0xc6>
				return errQUEUE_EMPTY;
 800ba98:	2000      	movs	r0, #0
 800ba9a:	e79e      	b.n	800b9da <xQueueReceive+0x96>
 800ba9c:	e000ed04 	.word	0xe000ed04

0800baa0 <xQueueSemaphoreTake>:
{
 800baa0:	b570      	push	{r4, r5, r6, lr}
 800baa2:	b084      	sub	sp, #16
 800baa4:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800baa6:	b158      	cbz	r0, 800bac0 <xQueueSemaphoreTake+0x20>
 800baa8:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800baaa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800baac:	b18b      	cbz	r3, 800bad2 <xQueueSemaphoreTake+0x32>
 800baae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab2:	f383 8811 	msr	BASEPRI, r3
 800bab6:	f3bf 8f6f 	isb	sy
 800baba:	f3bf 8f4f 	dsb	sy
 800babe:	e7fe      	b.n	800babe <xQueueSemaphoreTake+0x1e>
 800bac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac4:	f383 8811 	msr	BASEPRI, r3
 800bac8:	f3bf 8f6f 	isb	sy
 800bacc:	f3bf 8f4f 	dsb	sy
 800bad0:	e7fe      	b.n	800bad0 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bad2:	f000 fd95 	bl	800c600 <xTaskGetSchedulerState>
 800bad6:	b960      	cbnz	r0, 800baf2 <xQueueSemaphoreTake+0x52>
 800bad8:	9b01      	ldr	r3, [sp, #4]
 800bada:	b963      	cbnz	r3, 800baf6 <xQueueSemaphoreTake+0x56>
 800badc:	2301      	movs	r3, #1
 800bade:	b963      	cbnz	r3, 800bafa <xQueueSemaphoreTake+0x5a>
 800bae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae4:	f383 8811 	msr	BASEPRI, r3
 800bae8:	f3bf 8f6f 	isb	sy
 800baec:	f3bf 8f4f 	dsb	sy
 800baf0:	e7fe      	b.n	800baf0 <xQueueSemaphoreTake+0x50>
 800baf2:	2301      	movs	r3, #1
 800baf4:	e7f3      	b.n	800bade <xQueueSemaphoreTake+0x3e>
 800baf6:	2300      	movs	r3, #0
 800baf8:	e7f1      	b.n	800bade <xQueueSemaphoreTake+0x3e>
 800bafa:	2500      	movs	r5, #0
 800bafc:	462e      	mov	r6, r5
 800bafe:	e04e      	b.n	800bb9e <xQueueSemaphoreTake+0xfe>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bb00:	3b01      	subs	r3, #1
 800bb02:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bb04:	6823      	ldr	r3, [r4, #0]
 800bb06:	b913      	cbnz	r3, 800bb0e <xQueueSemaphoreTake+0x6e>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800bb08:	f000 feaa 	bl	800c860 <pvTaskIncrementMutexHeldCount>
 800bb0c:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb0e:	6923      	ldr	r3, [r4, #16]
 800bb10:	b163      	cbz	r3, 800bb2c <xQueueSemaphoreTake+0x8c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb12:	f104 0010 	add.w	r0, r4, #16
 800bb16:	f000 fcdb 	bl	800c4d0 <xTaskRemoveFromEventList>
 800bb1a:	b138      	cbz	r0, 800bb2c <xQueueSemaphoreTake+0x8c>
						queueYIELD_IF_USING_PREEMPTION();
 800bb1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb20:	4b47      	ldr	r3, [pc, #284]	; (800bc40 <xQueueSemaphoreTake+0x1a0>)
 800bb22:	601a      	str	r2, [r3, #0]
 800bb24:	f3bf 8f4f 	dsb	sy
 800bb28:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800bb2c:	f7ff f9d4 	bl	800aed8 <vPortExitCritical>
				return pdPASS;
 800bb30:	2501      	movs	r5, #1
}
 800bb32:	4628      	mov	r0, r5
 800bb34:	b004      	add	sp, #16
 800bb36:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bb38:	b145      	cbz	r5, 800bb4c <xQueueSemaphoreTake+0xac>
 800bb3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb3e:	f383 8811 	msr	BASEPRI, r3
 800bb42:	f3bf 8f6f 	isb	sy
 800bb46:	f3bf 8f4f 	dsb	sy
 800bb4a:	e7fe      	b.n	800bb4a <xQueueSemaphoreTake+0xaa>
					taskEXIT_CRITICAL();
 800bb4c:	f7ff f9c4 	bl	800aed8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800bb50:	e7ef      	b.n	800bb32 <xQueueSemaphoreTake+0x92>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb52:	a802      	add	r0, sp, #8
 800bb54:	f000 fd02 	bl	800c55c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb58:	2601      	movs	r6, #1
 800bb5a:	e02a      	b.n	800bbb2 <xQueueSemaphoreTake+0x112>
		prvLockQueue( pxQueue );
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800bb62:	e032      	b.n	800bbca <xQueueSemaphoreTake+0x12a>
 800bb64:	2300      	movs	r3, #0
 800bb66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bb6a:	e034      	b.n	800bbd6 <xQueueSemaphoreTake+0x136>
						taskENTER_CRITICAL();
 800bb6c:	f7ff f992 	bl	800ae94 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800bb70:	6860      	ldr	r0, [r4, #4]
 800bb72:	f000 fd55 	bl	800c620 <xTaskPriorityInherit>
 800bb76:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800bb78:	f7ff f9ae 	bl	800aed8 <vPortExitCritical>
 800bb7c:	e03b      	b.n	800bbf6 <xQueueSemaphoreTake+0x156>
				prvUnlockQueue( pxQueue );
 800bb7e:	4620      	mov	r0, r4
 800bb80:	f7ff fc6e 	bl	800b460 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bb84:	f000 fb7c 	bl	800c280 <xTaskResumeAll>
 800bb88:	e009      	b.n	800bb9e <xQueueSemaphoreTake+0xfe>
			prvUnlockQueue( pxQueue );
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	f7ff fc68 	bl	800b460 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bb90:	f000 fb76 	bl	800c280 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb94:	4620      	mov	r0, r4
 800bb96:	f7ff fc09 	bl	800b3ac <prvIsQueueEmpty>
 800bb9a:	2800      	cmp	r0, #0
 800bb9c:	d140      	bne.n	800bc20 <xQueueSemaphoreTake+0x180>
		taskENTER_CRITICAL();
 800bb9e:	f7ff f979 	bl	800ae94 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bba2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d1ab      	bne.n	800bb00 <xQueueSemaphoreTake+0x60>
				if( xTicksToWait == ( TickType_t ) 0 )
 800bba8:	9b01      	ldr	r3, [sp, #4]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d0c4      	beq.n	800bb38 <xQueueSemaphoreTake+0x98>
				else if( xEntryTimeSet == pdFALSE )
 800bbae:	2e00      	cmp	r6, #0
 800bbb0:	d0cf      	beq.n	800bb52 <xQueueSemaphoreTake+0xb2>
		taskEXIT_CRITICAL();
 800bbb2:	f7ff f991 	bl	800aed8 <vPortExitCritical>
		vTaskSuspendAll();
 800bbb6:	f000 fac5 	bl	800c144 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bbba:	f7ff f96b 	bl	800ae94 <vPortEnterCritical>
 800bbbe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bbc2:	b25b      	sxtb	r3, r3
 800bbc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbc8:	d0c8      	beq.n	800bb5c <xQueueSemaphoreTake+0xbc>
 800bbca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800bbce:	b25b      	sxtb	r3, r3
 800bbd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbd4:	d0c6      	beq.n	800bb64 <xQueueSemaphoreTake+0xc4>
 800bbd6:	f7ff f97f 	bl	800aed8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bbda:	a901      	add	r1, sp, #4
 800bbdc:	a802      	add	r0, sp, #8
 800bbde:	f000 fcc9 	bl	800c574 <xTaskCheckForTimeOut>
 800bbe2:	2800      	cmp	r0, #0
 800bbe4:	d1d1      	bne.n	800bb8a <xQueueSemaphoreTake+0xea>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bbe6:	4620      	mov	r0, r4
 800bbe8:	f7ff fbe0 	bl	800b3ac <prvIsQueueEmpty>
 800bbec:	2800      	cmp	r0, #0
 800bbee:	d0c6      	beq.n	800bb7e <xQueueSemaphoreTake+0xde>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bbf0:	6823      	ldr	r3, [r4, #0]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d0ba      	beq.n	800bb6c <xQueueSemaphoreTake+0xcc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bbf6:	9901      	ldr	r1, [sp, #4]
 800bbf8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800bbfc:	f000 fc34 	bl	800c468 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bc00:	4620      	mov	r0, r4
 800bc02:	f7ff fc2d 	bl	800b460 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bc06:	f000 fb3b 	bl	800c280 <xTaskResumeAll>
 800bc0a:	2800      	cmp	r0, #0
 800bc0c:	d1c7      	bne.n	800bb9e <xQueueSemaphoreTake+0xfe>
					portYIELD_WITHIN_API();
 800bc0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc12:	4b0b      	ldr	r3, [pc, #44]	; (800bc40 <xQueueSemaphoreTake+0x1a0>)
 800bc14:	601a      	str	r2, [r3, #0]
 800bc16:	f3bf 8f4f 	dsb	sy
 800bc1a:	f3bf 8f6f 	isb	sy
 800bc1e:	e7be      	b.n	800bb9e <xQueueSemaphoreTake+0xfe>
					if( xInheritanceOccurred != pdFALSE )
 800bc20:	2d00      	cmp	r5, #0
 800bc22:	d086      	beq.n	800bb32 <xQueueSemaphoreTake+0x92>
						taskENTER_CRITICAL();
 800bc24:	f7ff f936 	bl	800ae94 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bc28:	4620      	mov	r0, r4
 800bc2a:	f7ff fba7 	bl	800b37c <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800bc2e:	4601      	mov	r1, r0
 800bc30:	6860      	ldr	r0, [r4, #4]
 800bc32:	f000 fdaf 	bl	800c794 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800bc36:	f7ff f94f 	bl	800aed8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800bc3a:	2500      	movs	r5, #0
 800bc3c:	e779      	b.n	800bb32 <xQueueSemaphoreTake+0x92>
 800bc3e:	bf00      	nop
 800bc40:	e000ed04 	.word	0xe000ed04

0800bc44 <xQueueReceiveFromISR>:
{
 800bc44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800bc48:	b160      	cbz	r0, 800bc64 <xQueueReceiveFromISR+0x20>
 800bc4a:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc4c:	b199      	cbz	r1, 800bc76 <xQueueReceiveFromISR+0x32>
 800bc4e:	2301      	movs	r3, #1
 800bc50:	b9bb      	cbnz	r3, 800bc82 <xQueueReceiveFromISR+0x3e>
 800bc52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc56:	f383 8811 	msr	BASEPRI, r3
 800bc5a:	f3bf 8f6f 	isb	sy
 800bc5e:	f3bf 8f4f 	dsb	sy
 800bc62:	e7fe      	b.n	800bc62 <xQueueReceiveFromISR+0x1e>
 800bc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc68:	f383 8811 	msr	BASEPRI, r3
 800bc6c:	f3bf 8f6f 	isb	sy
 800bc70:	f3bf 8f4f 	dsb	sy
 800bc74:	e7fe      	b.n	800bc74 <xQueueReceiveFromISR+0x30>
 800bc76:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800bc78:	b90b      	cbnz	r3, 800bc7e <xQueueReceiveFromISR+0x3a>
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	e7e8      	b.n	800bc50 <xQueueReceiveFromISR+0xc>
 800bc7e:	2300      	movs	r3, #0
 800bc80:	e7e6      	b.n	800bc50 <xQueueReceiveFromISR+0xc>
 800bc82:	4617      	mov	r7, r2
 800bc84:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc86:	f7ff fa2f 	bl	800b0e8 <vPortValidateInterruptPriority>
	__asm volatile
 800bc8a:	f3ef 8611 	mrs	r6, BASEPRI
 800bc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc92:	f383 8811 	msr	BASEPRI, r3
 800bc96:	f3bf 8f6f 	isb	sy
 800bc9a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc9e:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bca2:	f1b8 0f00 	cmp.w	r8, #0
 800bca6:	d020      	beq.n	800bcea <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 800bca8:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800bcac:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bcae:	4649      	mov	r1, r9
 800bcb0:	4620      	mov	r0, r4
 800bcb2:	f7ff fbc3 	bl	800b43c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bcb6:	f108 33ff 	add.w	r3, r8, #4294967295
 800bcba:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800bcbc:	f1b5 3fff 	cmp.w	r5, #4294967295
 800bcc0:	d10d      	bne.n	800bcde <xQueueReceiveFromISR+0x9a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bcc2:	6923      	ldr	r3, [r4, #16]
 800bcc4:	b19b      	cbz	r3, 800bcee <xQueueReceiveFromISR+0xaa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bcc6:	f104 0010 	add.w	r0, r4, #16
 800bcca:	f000 fc01 	bl	800c4d0 <xTaskRemoveFromEventList>
 800bcce:	b180      	cbz	r0, 800bcf2 <xQueueReceiveFromISR+0xae>
						if( pxHigherPriorityTaskWoken != NULL )
 800bcd0:	b18f      	cbz	r7, 800bcf6 <xQueueReceiveFromISR+0xb2>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bcd2:	2001      	movs	r0, #1
 800bcd4:	6038      	str	r0, [r7, #0]
	__asm volatile
 800bcd6:	f386 8811 	msr	BASEPRI, r6
}
 800bcda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bcde:	1c6b      	adds	r3, r5, #1
 800bce0:	b25b      	sxtb	r3, r3
 800bce2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800bce6:	2001      	movs	r0, #1
 800bce8:	e7f5      	b.n	800bcd6 <xQueueReceiveFromISR+0x92>
			xReturn = pdFAIL;
 800bcea:	2000      	movs	r0, #0
 800bcec:	e7f3      	b.n	800bcd6 <xQueueReceiveFromISR+0x92>
			xReturn = pdPASS;
 800bcee:	2001      	movs	r0, #1
 800bcf0:	e7f1      	b.n	800bcd6 <xQueueReceiveFromISR+0x92>
 800bcf2:	2001      	movs	r0, #1
 800bcf4:	e7ef      	b.n	800bcd6 <xQueueReceiveFromISR+0x92>
 800bcf6:	2001      	movs	r0, #1
 800bcf8:	e7ed      	b.n	800bcd6 <xQueueReceiveFromISR+0x92>
	...

0800bcfc <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	2b07      	cmp	r3, #7
 800bd00:	d80c      	bhi.n	800bd1c <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bd02:	4a07      	ldr	r2, [pc, #28]	; (800bd20 <vQueueAddToRegistry+0x24>)
 800bd04:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800bd08:	b10a      	cbz	r2, 800bd0e <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd0a:	3301      	adds	r3, #1
 800bd0c:	e7f7      	b.n	800bcfe <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bd0e:	4a04      	ldr	r2, [pc, #16]	; (800bd20 <vQueueAddToRegistry+0x24>)
 800bd10:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bd14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bd18:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bd1a:	4770      	bx	lr
 800bd1c:	4770      	bx	lr
 800bd1e:	bf00      	nop
 800bd20:	20005368 	.word	0x20005368

0800bd24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bd24:	b570      	push	{r4, r5, r6, lr}
 800bd26:	4604      	mov	r4, r0
 800bd28:	460d      	mov	r5, r1
 800bd2a:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bd2c:	f7ff f8b2 	bl	800ae94 <vPortEnterCritical>
 800bd30:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bd34:	b25b      	sxtb	r3, r3
 800bd36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd3a:	d00d      	beq.n	800bd58 <vQueueWaitForMessageRestricted+0x34>
 800bd3c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800bd40:	b25b      	sxtb	r3, r3
 800bd42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd46:	d00b      	beq.n	800bd60 <vQueueWaitForMessageRestricted+0x3c>
 800bd48:	f7ff f8c6 	bl	800aed8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bd4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bd4e:	b15b      	cbz	r3, 800bd68 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bd50:	4620      	mov	r0, r4
 800bd52:	f7ff fb85 	bl	800b460 <prvUnlockQueue>
 800bd56:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800bd58:	2300      	movs	r3, #0
 800bd5a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800bd5e:	e7ed      	b.n	800bd3c <vQueueWaitForMessageRestricted+0x18>
 800bd60:	2300      	movs	r3, #0
 800bd62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bd66:	e7ef      	b.n	800bd48 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bd68:	4632      	mov	r2, r6
 800bd6a:	4629      	mov	r1, r5
 800bd6c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800bd70:	f000 fb92 	bl	800c498 <vTaskPlaceOnEventListRestricted>
 800bd74:	e7ec      	b.n	800bd50 <vQueueWaitForMessageRestricted+0x2c>
	...

0800bd78 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd78:	4b0a      	ldr	r3, [pc, #40]	; (800bda4 <prvResetNextTaskUnblockTime+0x2c>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	b94b      	cbnz	r3, 800bd94 <prvResetNextTaskUnblockTime+0x1c>
 800bd80:	2301      	movs	r3, #1
 800bd82:	b94b      	cbnz	r3, 800bd98 <prvResetNextTaskUnblockTime+0x20>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bd84:	4b07      	ldr	r3, [pc, #28]	; (800bda4 <prvResetNextTaskUnblockTime+0x2c>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	68db      	ldr	r3, [r3, #12]
 800bd8a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bd8c:	685a      	ldr	r2, [r3, #4]
 800bd8e:	4b06      	ldr	r3, [pc, #24]	; (800bda8 <prvResetNextTaskUnblockTime+0x30>)
 800bd90:	601a      	str	r2, [r3, #0]
 800bd92:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd94:	2300      	movs	r3, #0
 800bd96:	e7f4      	b.n	800bd82 <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
 800bd98:	f04f 32ff 	mov.w	r2, #4294967295
 800bd9c:	4b02      	ldr	r3, [pc, #8]	; (800bda8 <prvResetNextTaskUnblockTime+0x30>)
 800bd9e:	601a      	str	r2, [r3, #0]
 800bda0:	4770      	bx	lr
 800bda2:	bf00      	nop
 800bda4:	20004f20 	.word	0x20004f20
 800bda8:	20004ff8 	.word	0x20004ff8

0800bdac <prvDeleteTCB>:
	{
 800bdac:	b510      	push	{r4, lr}
 800bdae:	4604      	mov	r4, r0
			vPortFree( pxTCB->pxStack );
 800bdb0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800bdb2:	f7ff faab 	bl	800b30c <vPortFree>
			vPortFree( pxTCB );
 800bdb6:	4620      	mov	r0, r4
 800bdb8:	f7ff faa8 	bl	800b30c <vPortFree>
 800bdbc:	bd10      	pop	{r4, pc}

0800bdbe <prvInitialiseNewTask>:
{
 800bdbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdc2:	4680      	mov	r8, r0
 800bdc4:	4699      	mov	r9, r3
 800bdc6:	9d08      	ldr	r5, [sp, #32]
 800bdc8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bdca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800bdcc:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800bdce:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800bdd2:	3a01      	subs	r2, #1
 800bdd4:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800bdd8:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bddc:	2300      	movs	r3, #0
 800bdde:	2b18      	cmp	r3, #24
 800bde0:	d807      	bhi.n	800bdf2 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bde2:	5cc8      	ldrb	r0, [r1, r3]
 800bde4:	18e2      	adds	r2, r4, r3
 800bde6:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 800bdea:	5cca      	ldrb	r2, [r1, r3]
 800bdec:	b10a      	cbz	r2, 800bdf2 <prvInitialiseNewTask+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bdee:	3301      	adds	r3, #1
 800bdf0:	e7f5      	b.n	800bdde <prvInitialiseNewTask+0x20>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bdf8:	2d06      	cmp	r5, #6
 800bdfa:	d900      	bls.n	800bdfe <prvInitialiseNewTask+0x40>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bdfc:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 800bdfe:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800be00:	6525      	str	r5, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800be02:	f04f 0a00 	mov.w	sl, #0
 800be06:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800be0a:	1d20      	adds	r0, r4, #4
 800be0c:	f7fe ff9b 	bl	800ad46 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800be10:	f104 0018 	add.w	r0, r4, #24
 800be14:	f7fe ff97 	bl	800ad46 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800be18:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be1a:	f1c5 0507 	rsb	r5, r5, #7
 800be1e:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800be20:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800be22:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800be26:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800be2a:	464a      	mov	r2, r9
 800be2c:	4641      	mov	r1, r8
 800be2e:	4630      	mov	r0, r6
 800be30:	f7ff f804 	bl	800ae3c <pxPortInitialiseStack>
 800be34:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800be36:	b107      	cbz	r7, 800be3a <prvInitialiseNewTask+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800be38:	603c      	str	r4, [r7, #0]
 800be3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800be40 <prvInitialiseTaskLists>:
{
 800be40:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be42:	2400      	movs	r4, #0
 800be44:	e007      	b.n	800be56 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800be46:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800be4a:	0093      	lsls	r3, r2, #2
 800be4c:	480e      	ldr	r0, [pc, #56]	; (800be88 <prvInitialiseTaskLists+0x48>)
 800be4e:	4418      	add	r0, r3
 800be50:	f7fe ff6e 	bl	800ad30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be54:	3401      	adds	r4, #1
 800be56:	2c06      	cmp	r4, #6
 800be58:	d9f5      	bls.n	800be46 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800be5a:	4d0c      	ldr	r5, [pc, #48]	; (800be8c <prvInitialiseTaskLists+0x4c>)
 800be5c:	4628      	mov	r0, r5
 800be5e:	f7fe ff67 	bl	800ad30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800be62:	4c0b      	ldr	r4, [pc, #44]	; (800be90 <prvInitialiseTaskLists+0x50>)
 800be64:	4620      	mov	r0, r4
 800be66:	f7fe ff63 	bl	800ad30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800be6a:	480a      	ldr	r0, [pc, #40]	; (800be94 <prvInitialiseTaskLists+0x54>)
 800be6c:	f7fe ff60 	bl	800ad30 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800be70:	4809      	ldr	r0, [pc, #36]	; (800be98 <prvInitialiseTaskLists+0x58>)
 800be72:	f7fe ff5d 	bl	800ad30 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800be76:	4809      	ldr	r0, [pc, #36]	; (800be9c <prvInitialiseTaskLists+0x5c>)
 800be78:	f7fe ff5a 	bl	800ad30 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800be7c:	4b08      	ldr	r3, [pc, #32]	; (800bea0 <prvInitialiseTaskLists+0x60>)
 800be7e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800be80:	4b08      	ldr	r3, [pc, #32]	; (800bea4 <prvInitialiseTaskLists+0x64>)
 800be82:	601c      	str	r4, [r3, #0]
 800be84:	bd38      	pop	{r3, r4, r5, pc}
 800be86:	bf00      	nop
 800be88:	20004f28 	.word	0x20004f28
 800be8c:	20004fcc 	.word	0x20004fcc
 800be90:	20004fe0 	.word	0x20004fe0
 800be94:	20005000 	.word	0x20005000
 800be98:	2000502c 	.word	0x2000502c
 800be9c:	20005018 	.word	0x20005018
 800bea0:	20004f20 	.word	0x20004f20
 800bea4:	20004f24 	.word	0x20004f24

0800bea8 <prvAddNewTaskToReadyList>:
{
 800bea8:	b510      	push	{r4, lr}
 800beaa:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800beac:	f7fe fff2 	bl	800ae94 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800beb0:	4a20      	ldr	r2, [pc, #128]	; (800bf34 <prvAddNewTaskToReadyList+0x8c>)
 800beb2:	6813      	ldr	r3, [r2, #0]
 800beb4:	3301      	adds	r3, #1
 800beb6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800beb8:	4b1f      	ldr	r3, [pc, #124]	; (800bf38 <prvAddNewTaskToReadyList+0x90>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d031      	beq.n	800bf24 <prvAddNewTaskToReadyList+0x7c>
			if( xSchedulerRunning == pdFALSE )
 800bec0:	4b1e      	ldr	r3, [pc, #120]	; (800bf3c <prvAddNewTaskToReadyList+0x94>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	b93b      	cbnz	r3, 800bed6 <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bec6:	4b1c      	ldr	r3, [pc, #112]	; (800bf38 <prvAddNewTaskToReadyList+0x90>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800becc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bece:	429a      	cmp	r2, r3
 800bed0:	d801      	bhi.n	800bed6 <prvAddNewTaskToReadyList+0x2e>
					pxCurrentTCB = pxNewTCB;
 800bed2:	4b19      	ldr	r3, [pc, #100]	; (800bf38 <prvAddNewTaskToReadyList+0x90>)
 800bed4:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
 800bed6:	4a1a      	ldr	r2, [pc, #104]	; (800bf40 <prvAddNewTaskToReadyList+0x98>)
 800bed8:	6813      	ldr	r3, [r2, #0]
 800beda:	3301      	adds	r3, #1
 800bedc:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800bede:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bee0:	2201      	movs	r2, #1
 800bee2:	409a      	lsls	r2, r3
 800bee4:	4917      	ldr	r1, [pc, #92]	; (800bf44 <prvAddNewTaskToReadyList+0x9c>)
 800bee6:	6808      	ldr	r0, [r1, #0]
 800bee8:	4302      	orrs	r2, r0
 800beea:	600a      	str	r2, [r1, #0]
 800beec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800bef0:	009a      	lsls	r2, r3, #2
 800bef2:	1d21      	adds	r1, r4, #4
 800bef4:	4814      	ldr	r0, [pc, #80]	; (800bf48 <prvAddNewTaskToReadyList+0xa0>)
 800bef6:	4410      	add	r0, r2
 800bef8:	f7fe ff28 	bl	800ad4c <vListInsertEnd>
	taskEXIT_CRITICAL();
 800befc:	f7fe ffec 	bl	800aed8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800bf00:	4b0e      	ldr	r3, [pc, #56]	; (800bf3c <prvAddNewTaskToReadyList+0x94>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	b16b      	cbz	r3, 800bf22 <prvAddNewTaskToReadyList+0x7a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bf06:	4b0c      	ldr	r3, [pc, #48]	; (800bf38 <prvAddNewTaskToReadyList+0x90>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d207      	bcs.n	800bf22 <prvAddNewTaskToReadyList+0x7a>
			taskYIELD_IF_USING_PREEMPTION();
 800bf12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf16:	4b0d      	ldr	r3, [pc, #52]	; (800bf4c <prvAddNewTaskToReadyList+0xa4>)
 800bf18:	601a      	str	r2, [r3, #0]
 800bf1a:	f3bf 8f4f 	dsb	sy
 800bf1e:	f3bf 8f6f 	isb	sy
 800bf22:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
 800bf24:	4b04      	ldr	r3, [pc, #16]	; (800bf38 <prvAddNewTaskToReadyList+0x90>)
 800bf26:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bf28:	6813      	ldr	r3, [r2, #0]
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d1d3      	bne.n	800bed6 <prvAddNewTaskToReadyList+0x2e>
				prvInitialiseTaskLists();
 800bf2e:	f7ff ff87 	bl	800be40 <prvInitialiseTaskLists>
 800bf32:	e7d0      	b.n	800bed6 <prvAddNewTaskToReadyList+0x2e>
 800bf34:	20004fb4 	.word	0x20004fb4
 800bf38:	20004f1c 	.word	0x20004f1c
 800bf3c:	20005014 	.word	0x20005014
 800bf40:	20004fc4 	.word	0x20004fc4
 800bf44:	20004fc8 	.word	0x20004fc8
 800bf48:	20004f28 	.word	0x20004f28
 800bf4c:	e000ed04 	.word	0xe000ed04

0800bf50 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf50:	4b0f      	ldr	r3, [pc, #60]	; (800bf90 <prvCheckTasksWaitingTermination+0x40>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	b1d3      	cbz	r3, 800bf8c <prvCheckTasksWaitingTermination+0x3c>
{
 800bf56:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800bf58:	f7fe ff9c 	bl	800ae94 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800bf5c:	4b0d      	ldr	r3, [pc, #52]	; (800bf94 <prvCheckTasksWaitingTermination+0x44>)
 800bf5e:	68db      	ldr	r3, [r3, #12]
 800bf60:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf62:	1d20      	adds	r0, r4, #4
 800bf64:	f7fe ff18 	bl	800ad98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bf68:	4a0b      	ldr	r2, [pc, #44]	; (800bf98 <prvCheckTasksWaitingTermination+0x48>)
 800bf6a:	6813      	ldr	r3, [r2, #0]
 800bf6c:	3b01      	subs	r3, #1
 800bf6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bf70:	4a07      	ldr	r2, [pc, #28]	; (800bf90 <prvCheckTasksWaitingTermination+0x40>)
 800bf72:	6813      	ldr	r3, [r2, #0]
 800bf74:	3b01      	subs	r3, #1
 800bf76:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800bf78:	f7fe ffae 	bl	800aed8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800bf7c:	4620      	mov	r0, r4
 800bf7e:	f7ff ff15 	bl	800bdac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf82:	4b03      	ldr	r3, [pc, #12]	; (800bf90 <prvCheckTasksWaitingTermination+0x40>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d1e6      	bne.n	800bf58 <prvCheckTasksWaitingTermination+0x8>
}
 800bf8a:	bd10      	pop	{r4, pc}
 800bf8c:	4770      	bx	lr
 800bf8e:	bf00      	nop
 800bf90:	20004fb8 	.word	0x20004fb8
 800bf94:	2000502c 	.word	0x2000502c
 800bf98:	20004fb4 	.word	0x20004fb4

0800bf9c <prvIdleTask>:
{
 800bf9c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800bf9e:	f7ff ffd7 	bl	800bf50 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bfa2:	4b06      	ldr	r3, [pc, #24]	; (800bfbc <prvIdleTask+0x20>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	2b01      	cmp	r3, #1
 800bfa8:	d9f9      	bls.n	800bf9e <prvIdleTask+0x2>
				taskYIELD();
 800bfaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfae:	4b04      	ldr	r3, [pc, #16]	; (800bfc0 <prvIdleTask+0x24>)
 800bfb0:	601a      	str	r2, [r3, #0]
 800bfb2:	f3bf 8f4f 	dsb	sy
 800bfb6:	f3bf 8f6f 	isb	sy
 800bfba:	e7f0      	b.n	800bf9e <prvIdleTask+0x2>
 800bfbc:	20004f28 	.word	0x20004f28
 800bfc0:	e000ed04 	.word	0xe000ed04

0800bfc4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bfc4:	b570      	push	{r4, r5, r6, lr}
 800bfc6:	4604      	mov	r4, r0
 800bfc8:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bfca:	4b1d      	ldr	r3, [pc, #116]	; (800c040 <prvAddCurrentTaskToDelayedList+0x7c>)
 800bfcc:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bfce:	4b1d      	ldr	r3, [pc, #116]	; (800c044 <prvAddCurrentTaskToDelayedList+0x80>)
 800bfd0:	6818      	ldr	r0, [r3, #0]
 800bfd2:	3004      	adds	r0, #4
 800bfd4:	f7fe fee0 	bl	800ad98 <uxListRemove>
 800bfd8:	b950      	cbnz	r0, 800bff0 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800bfda:	4b1a      	ldr	r3, [pc, #104]	; (800c044 <prvAddCurrentTaskToDelayedList+0x80>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	fa03 f202 	lsl.w	r2, r3, r2
 800bfe6:	4918      	ldr	r1, [pc, #96]	; (800c048 <prvAddCurrentTaskToDelayedList+0x84>)
 800bfe8:	680b      	ldr	r3, [r1, #0]
 800bfea:	ea23 0302 	bic.w	r3, r3, r2
 800bfee:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bff0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800bff4:	d013      	beq.n	800c01e <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bff6:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bff8:	4b12      	ldr	r3, [pc, #72]	; (800c044 <prvAddCurrentTaskToDelayedList+0x80>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800bffe:	42a5      	cmp	r5, r4
 800c000:	d816      	bhi.n	800c030 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c002:	4b12      	ldr	r3, [pc, #72]	; (800c04c <prvAddCurrentTaskToDelayedList+0x88>)
 800c004:	6818      	ldr	r0, [r3, #0]
 800c006:	4b0f      	ldr	r3, [pc, #60]	; (800c044 <prvAddCurrentTaskToDelayedList+0x80>)
 800c008:	6819      	ldr	r1, [r3, #0]
 800c00a:	3104      	adds	r1, #4
 800c00c:	f7fe feaa 	bl	800ad64 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800c010:	4b0f      	ldr	r3, [pc, #60]	; (800c050 <prvAddCurrentTaskToDelayedList+0x8c>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	429c      	cmp	r4, r3
 800c016:	d201      	bcs.n	800c01c <prvAddCurrentTaskToDelayedList+0x58>
				{
					xNextTaskUnblockTime = xTimeToWake;
 800c018:	4b0d      	ldr	r3, [pc, #52]	; (800c050 <prvAddCurrentTaskToDelayedList+0x8c>)
 800c01a:	601c      	str	r4, [r3, #0]
 800c01c:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c01e:	2e00      	cmp	r6, #0
 800c020:	d0e9      	beq.n	800bff6 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c022:	4b08      	ldr	r3, [pc, #32]	; (800c044 <prvAddCurrentTaskToDelayedList+0x80>)
 800c024:	6819      	ldr	r1, [r3, #0]
 800c026:	3104      	adds	r1, #4
 800c028:	480a      	ldr	r0, [pc, #40]	; (800c054 <prvAddCurrentTaskToDelayedList+0x90>)
 800c02a:	f7fe fe8f 	bl	800ad4c <vListInsertEnd>
 800c02e:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c030:	4b09      	ldr	r3, [pc, #36]	; (800c058 <prvAddCurrentTaskToDelayedList+0x94>)
 800c032:	6818      	ldr	r0, [r3, #0]
 800c034:	4b03      	ldr	r3, [pc, #12]	; (800c044 <prvAddCurrentTaskToDelayedList+0x80>)
 800c036:	6819      	ldr	r1, [r3, #0]
 800c038:	3104      	adds	r1, #4
 800c03a:	f7fe fe93 	bl	800ad64 <vListInsert>
 800c03e:	bd70      	pop	{r4, r5, r6, pc}
 800c040:	20005040 	.word	0x20005040
 800c044:	20004f1c 	.word	0x20004f1c
 800c048:	20004fc8 	.word	0x20004fc8
 800c04c:	20004f20 	.word	0x20004f20
 800c050:	20004ff8 	.word	0x20004ff8
 800c054:	20005018 	.word	0x20005018
 800c058:	20004f24 	.word	0x20004f24

0800c05c <xTaskCreate>:
	{
 800c05c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c060:	b085      	sub	sp, #20
 800c062:	4606      	mov	r6, r0
 800c064:	460f      	mov	r7, r1
 800c066:	4615      	mov	r5, r2
 800c068:	4698      	mov	r8, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c06a:	0090      	lsls	r0, r2, #2
 800c06c:	f7ff f8ca 	bl	800b204 <pvPortMalloc>
			if( pxStack != NULL )
 800c070:	b300      	cbz	r0, 800c0b4 <xTaskCreate+0x58>
 800c072:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800c074:	2060      	movs	r0, #96	; 0x60
 800c076:	f7ff f8c5 	bl	800b204 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800c07a:	4604      	mov	r4, r0
 800c07c:	b1b0      	cbz	r0, 800c0ac <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 800c07e:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 800c082:	b1cc      	cbz	r4, 800c0b8 <xTaskCreate+0x5c>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c084:	2300      	movs	r3, #0
 800c086:	9303      	str	r3, [sp, #12]
 800c088:	9402      	str	r4, [sp, #8]
 800c08a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c08c:	9301      	str	r3, [sp, #4]
 800c08e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c090:	9300      	str	r3, [sp, #0]
 800c092:	4643      	mov	r3, r8
 800c094:	462a      	mov	r2, r5
 800c096:	4639      	mov	r1, r7
 800c098:	4630      	mov	r0, r6
 800c09a:	f7ff fe90 	bl	800bdbe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c09e:	4620      	mov	r0, r4
 800c0a0:	f7ff ff02 	bl	800bea8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c0a4:	2001      	movs	r0, #1
	}
 800c0a6:	b005      	add	sp, #20
 800c0a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800c0ac:	4648      	mov	r0, r9
 800c0ae:	f7ff f92d 	bl	800b30c <vPortFree>
 800c0b2:	e7e6      	b.n	800c082 <xTaskCreate+0x26>
				pxNewTCB = NULL;
 800c0b4:	2400      	movs	r4, #0
 800c0b6:	e7e4      	b.n	800c082 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c0b8:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800c0bc:	e7f3      	b.n	800c0a6 <xTaskCreate+0x4a>
	...

0800c0c0 <vTaskStartScheduler>:
{
 800c0c0:	b500      	push	{lr}
 800c0c2:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 800c0c4:	4b19      	ldr	r3, [pc, #100]	; (800c12c <vTaskStartScheduler+0x6c>)
 800c0c6:	9301      	str	r3, [sp, #4]
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	9300      	str	r3, [sp, #0]
 800c0cc:	2280      	movs	r2, #128	; 0x80
 800c0ce:	4918      	ldr	r1, [pc, #96]	; (800c130 <vTaskStartScheduler+0x70>)
 800c0d0:	4818      	ldr	r0, [pc, #96]	; (800c134 <vTaskStartScheduler+0x74>)
 800c0d2:	f7ff ffc3 	bl	800c05c <xTaskCreate>
		if( xReturn == pdPASS )
 800c0d6:	2801      	cmp	r0, #1
 800c0d8:	d007      	beq.n	800c0ea <vTaskStartScheduler+0x2a>
	if( xReturn == pdPASS )
 800c0da:	2801      	cmp	r0, #1
 800c0dc:	d008      	beq.n	800c0f0 <vTaskStartScheduler+0x30>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c0de:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c0e2:	d01a      	beq.n	800c11a <vTaskStartScheduler+0x5a>
}
 800c0e4:	b003      	add	sp, #12
 800c0e6:	f85d fb04 	ldr.w	pc, [sp], #4
			xReturn = xTimerCreateTimerTask();
 800c0ea:	f000 fc49 	bl	800c980 <xTimerCreateTimerTask>
 800c0ee:	e7f4      	b.n	800c0da <vTaskStartScheduler+0x1a>
	__asm volatile
 800c0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f4:	f383 8811 	msr	BASEPRI, r3
 800c0f8:	f3bf 8f6f 	isb	sy
 800c0fc:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800c100:	f04f 32ff 	mov.w	r2, #4294967295
 800c104:	4b0c      	ldr	r3, [pc, #48]	; (800c138 <vTaskStartScheduler+0x78>)
 800c106:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c108:	2201      	movs	r2, #1
 800c10a:	4b0c      	ldr	r3, [pc, #48]	; (800c13c <vTaskStartScheduler+0x7c>)
 800c10c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800c10e:	2200      	movs	r2, #0
 800c110:	4b0b      	ldr	r3, [pc, #44]	; (800c140 <vTaskStartScheduler+0x80>)
 800c112:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800c114:	f7fe ff60 	bl	800afd8 <xPortStartScheduler>
 800c118:	e7e4      	b.n	800c0e4 <vTaskStartScheduler+0x24>
 800c11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c11e:	f383 8811 	msr	BASEPRI, r3
 800c122:	f3bf 8f6f 	isb	sy
 800c126:	f3bf 8f4f 	dsb	sy
 800c12a:	e7fe      	b.n	800c12a <vTaskStartScheduler+0x6a>
 800c12c:	20004ff4 	.word	0x20004ff4
 800c130:	08012c78 	.word	0x08012c78
 800c134:	0800bf9d 	.word	0x0800bf9d
 800c138:	20004ff8 	.word	0x20004ff8
 800c13c:	20005014 	.word	0x20005014
 800c140:	20005040 	.word	0x20005040

0800c144 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800c144:	4a02      	ldr	r2, [pc, #8]	; (800c150 <vTaskSuspendAll+0xc>)
 800c146:	6813      	ldr	r3, [r2, #0]
 800c148:	3301      	adds	r3, #1
 800c14a:	6013      	str	r3, [r2, #0]
 800c14c:	4770      	bx	lr
 800c14e:	bf00      	nop
 800c150:	20004fc0 	.word	0x20004fc0

0800c154 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800c154:	4b01      	ldr	r3, [pc, #4]	; (800c15c <xTaskGetTickCount+0x8>)
 800c156:	6818      	ldr	r0, [r3, #0]
}
 800c158:	4770      	bx	lr
 800c15a:	bf00      	nop
 800c15c:	20005040 	.word	0x20005040

0800c160 <xTaskIncrementTick>:
{
 800c160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c162:	4b3c      	ldr	r3, [pc, #240]	; (800c254 <xTaskIncrementTick+0xf4>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d168      	bne.n	800c23c <xTaskIncrementTick+0xdc>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c16a:	4b3b      	ldr	r3, [pc, #236]	; (800c258 <xTaskIncrementTick+0xf8>)
 800c16c:	681d      	ldr	r5, [r3, #0]
 800c16e:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800c170:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c172:	b9c5      	cbnz	r5, 800c1a6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800c174:	4b39      	ldr	r3, [pc, #228]	; (800c25c <xTaskIncrementTick+0xfc>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	b143      	cbz	r3, 800c18e <xTaskIncrementTick+0x2e>
 800c17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c180:	f383 8811 	msr	BASEPRI, r3
 800c184:	f3bf 8f6f 	isb	sy
 800c188:	f3bf 8f4f 	dsb	sy
 800c18c:	e7fe      	b.n	800c18c <xTaskIncrementTick+0x2c>
 800c18e:	4a33      	ldr	r2, [pc, #204]	; (800c25c <xTaskIncrementTick+0xfc>)
 800c190:	6811      	ldr	r1, [r2, #0]
 800c192:	4b33      	ldr	r3, [pc, #204]	; (800c260 <xTaskIncrementTick+0x100>)
 800c194:	6818      	ldr	r0, [r3, #0]
 800c196:	6010      	str	r0, [r2, #0]
 800c198:	6019      	str	r1, [r3, #0]
 800c19a:	4a32      	ldr	r2, [pc, #200]	; (800c264 <xTaskIncrementTick+0x104>)
 800c19c:	6813      	ldr	r3, [r2, #0]
 800c19e:	3301      	adds	r3, #1
 800c1a0:	6013      	str	r3, [r2, #0]
 800c1a2:	f7ff fde9 	bl	800bd78 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c1a6:	4b30      	ldr	r3, [pc, #192]	; (800c268 <xTaskIncrementTick+0x108>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	429d      	cmp	r5, r3
 800c1ac:	d23a      	bcs.n	800c224 <xTaskIncrementTick+0xc4>
BaseType_t xSwitchRequired = pdFALSE;
 800c1ae:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c1b0:	4b2e      	ldr	r3, [pc, #184]	; (800c26c <xTaskIncrementTick+0x10c>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c1ba:	009a      	lsls	r2, r3, #2
 800c1bc:	4b2c      	ldr	r3, [pc, #176]	; (800c270 <xTaskIncrementTick+0x110>)
 800c1be:	589b      	ldr	r3, [r3, r2]
 800c1c0:	2b01      	cmp	r3, #1
 800c1c2:	d940      	bls.n	800c246 <xTaskIncrementTick+0xe6>
				xSwitchRequired = pdTRUE;
 800c1c4:	2401      	movs	r4, #1
 800c1c6:	e03e      	b.n	800c246 <xTaskIncrementTick+0xe6>
							xSwitchRequired = pdTRUE;
 800c1c8:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c1ca:	4b24      	ldr	r3, [pc, #144]	; (800c25c <xTaskIncrementTick+0xfc>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	b353      	cbz	r3, 800c228 <xTaskIncrementTick+0xc8>
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	bb53      	cbnz	r3, 800c22c <xTaskIncrementTick+0xcc>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c1d6:	4b21      	ldr	r3, [pc, #132]	; (800c25c <xTaskIncrementTick+0xfc>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	68db      	ldr	r3, [r3, #12]
 800c1dc:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c1de:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 800c1e0:	429d      	cmp	r5, r3
 800c1e2:	d328      	bcc.n	800c236 <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c1e4:	1d37      	adds	r7, r6, #4
 800c1e6:	4638      	mov	r0, r7
 800c1e8:	f7fe fdd6 	bl	800ad98 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c1ec:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800c1ee:	b11b      	cbz	r3, 800c1f8 <xTaskIncrementTick+0x98>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c1f0:	f106 0018 	add.w	r0, r6, #24
 800c1f4:	f7fe fdd0 	bl	800ad98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c1f8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	409a      	lsls	r2, r3
 800c1fe:	491d      	ldr	r1, [pc, #116]	; (800c274 <xTaskIncrementTick+0x114>)
 800c200:	6808      	ldr	r0, [r1, #0]
 800c202:	4302      	orrs	r2, r0
 800c204:	600a      	str	r2, [r1, #0]
 800c206:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c20a:	009a      	lsls	r2, r3, #2
 800c20c:	4639      	mov	r1, r7
 800c20e:	4818      	ldr	r0, [pc, #96]	; (800c270 <xTaskIncrementTick+0x110>)
 800c210:	4410      	add	r0, r2
 800c212:	f7fe fd9b 	bl	800ad4c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c216:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800c218:	4b14      	ldr	r3, [pc, #80]	; (800c26c <xTaskIncrementTick+0x10c>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c21e:	429a      	cmp	r2, r3
 800c220:	d2d2      	bcs.n	800c1c8 <xTaskIncrementTick+0x68>
 800c222:	e7d2      	b.n	800c1ca <xTaskIncrementTick+0x6a>
 800c224:	2400      	movs	r4, #0
 800c226:	e7d0      	b.n	800c1ca <xTaskIncrementTick+0x6a>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c228:	2301      	movs	r3, #1
 800c22a:	e7d3      	b.n	800c1d4 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c22c:	f04f 32ff 	mov.w	r2, #4294967295
 800c230:	4b0d      	ldr	r3, [pc, #52]	; (800c268 <xTaskIncrementTick+0x108>)
 800c232:	601a      	str	r2, [r3, #0]
					break;
 800c234:	e7bc      	b.n	800c1b0 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800c236:	4a0c      	ldr	r2, [pc, #48]	; (800c268 <xTaskIncrementTick+0x108>)
 800c238:	6013      	str	r3, [r2, #0]
						break;
 800c23a:	e7b9      	b.n	800c1b0 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 800c23c:	4a0e      	ldr	r2, [pc, #56]	; (800c278 <xTaskIncrementTick+0x118>)
 800c23e:	6813      	ldr	r3, [r2, #0]
 800c240:	3301      	adds	r3, #1
 800c242:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800c244:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800c246:	4b0d      	ldr	r3, [pc, #52]	; (800c27c <xTaskIncrementTick+0x11c>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	b103      	cbz	r3, 800c24e <xTaskIncrementTick+0xee>
			xSwitchRequired = pdTRUE;
 800c24c:	2401      	movs	r4, #1
}
 800c24e:	4620      	mov	r0, r4
 800c250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c252:	bf00      	nop
 800c254:	20004fc0 	.word	0x20004fc0
 800c258:	20005040 	.word	0x20005040
 800c25c:	20004f20 	.word	0x20004f20
 800c260:	20004f24 	.word	0x20004f24
 800c264:	20004ffc 	.word	0x20004ffc
 800c268:	20004ff8 	.word	0x20004ff8
 800c26c:	20004f1c 	.word	0x20004f1c
 800c270:	20004f28 	.word	0x20004f28
 800c274:	20004fc8 	.word	0x20004fc8
 800c278:	20004fbc 	.word	0x20004fbc
 800c27c:	20005044 	.word	0x20005044

0800c280 <xTaskResumeAll>:
{
 800c280:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800c282:	4b35      	ldr	r3, [pc, #212]	; (800c358 <xTaskResumeAll+0xd8>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	b943      	cbnz	r3, 800c29a <xTaskResumeAll+0x1a>
 800c288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c28c:	f383 8811 	msr	BASEPRI, r3
 800c290:	f3bf 8f6f 	isb	sy
 800c294:	f3bf 8f4f 	dsb	sy
 800c298:	e7fe      	b.n	800c298 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800c29a:	f7fe fdfb 	bl	800ae94 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800c29e:	4b2e      	ldr	r3, [pc, #184]	; (800c358 <xTaskResumeAll+0xd8>)
 800c2a0:	681a      	ldr	r2, [r3, #0]
 800c2a2:	3a01      	subs	r2, #1
 800c2a4:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d150      	bne.n	800c34e <xTaskResumeAll+0xce>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c2ac:	4b2b      	ldr	r3, [pc, #172]	; (800c35c <xTaskResumeAll+0xdc>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	b923      	cbnz	r3, 800c2bc <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 800c2b2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800c2b4:	f7fe fe10 	bl	800aed8 <vPortExitCritical>
}
 800c2b8:	4620      	mov	r0, r4
 800c2ba:	bd38      	pop	{r3, r4, r5, pc}
 800c2bc:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c2be:	4b28      	ldr	r3, [pc, #160]	; (800c360 <xTaskResumeAll+0xe0>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	b31b      	cbz	r3, 800c30c <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800c2c4:	4b26      	ldr	r3, [pc, #152]	; (800c360 <xTaskResumeAll+0xe0>)
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c2ca:	f104 0018 	add.w	r0, r4, #24
 800c2ce:	f7fe fd63 	bl	800ad98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c2d2:	1d25      	adds	r5, r4, #4
 800c2d4:	4628      	mov	r0, r5
 800c2d6:	f7fe fd5f 	bl	800ad98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c2da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c2dc:	2201      	movs	r2, #1
 800c2de:	409a      	lsls	r2, r3
 800c2e0:	4920      	ldr	r1, [pc, #128]	; (800c364 <xTaskResumeAll+0xe4>)
 800c2e2:	6808      	ldr	r0, [r1, #0]
 800c2e4:	4302      	orrs	r2, r0
 800c2e6:	600a      	str	r2, [r1, #0]
 800c2e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c2ec:	009a      	lsls	r2, r3, #2
 800c2ee:	4629      	mov	r1, r5
 800c2f0:	481d      	ldr	r0, [pc, #116]	; (800c368 <xTaskResumeAll+0xe8>)
 800c2f2:	4410      	add	r0, r2
 800c2f4:	f7fe fd2a 	bl	800ad4c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c2f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c2fa:	4b1c      	ldr	r3, [pc, #112]	; (800c36c <xTaskResumeAll+0xec>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c300:	429a      	cmp	r2, r3
 800c302:	d3dc      	bcc.n	800c2be <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 800c304:	2201      	movs	r2, #1
 800c306:	4b1a      	ldr	r3, [pc, #104]	; (800c370 <xTaskResumeAll+0xf0>)
 800c308:	601a      	str	r2, [r3, #0]
 800c30a:	e7d8      	b.n	800c2be <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 800c30c:	b10c      	cbz	r4, 800c312 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 800c30e:	f7ff fd33 	bl	800bd78 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c312:	4b18      	ldr	r3, [pc, #96]	; (800c374 <xTaskResumeAll+0xf4>)
 800c314:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c316:	b974      	cbnz	r4, 800c336 <xTaskResumeAll+0xb6>
				if( xYieldPending != pdFALSE )
 800c318:	4b15      	ldr	r3, [pc, #84]	; (800c370 <xTaskResumeAll+0xf0>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	b1cb      	cbz	r3, 800c352 <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
 800c31e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c322:	4b15      	ldr	r3, [pc, #84]	; (800c378 <xTaskResumeAll+0xf8>)
 800c324:	601a      	str	r2, [r3, #0]
 800c326:	f3bf 8f4f 	dsb	sy
 800c32a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800c32e:	2401      	movs	r4, #1
 800c330:	e7c0      	b.n	800c2b4 <xTaskResumeAll+0x34>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c332:	3c01      	subs	r4, #1
 800c334:	d007      	beq.n	800c346 <xTaskResumeAll+0xc6>
							if( xTaskIncrementTick() != pdFALSE )
 800c336:	f7ff ff13 	bl	800c160 <xTaskIncrementTick>
 800c33a:	2800      	cmp	r0, #0
 800c33c:	d0f9      	beq.n	800c332 <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 800c33e:	2201      	movs	r2, #1
 800c340:	4b0b      	ldr	r3, [pc, #44]	; (800c370 <xTaskResumeAll+0xf0>)
 800c342:	601a      	str	r2, [r3, #0]
 800c344:	e7f5      	b.n	800c332 <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
 800c346:	2200      	movs	r2, #0
 800c348:	4b0a      	ldr	r3, [pc, #40]	; (800c374 <xTaskResumeAll+0xf4>)
 800c34a:	601a      	str	r2, [r3, #0]
 800c34c:	e7e4      	b.n	800c318 <xTaskResumeAll+0x98>
BaseType_t xAlreadyYielded = pdFALSE;
 800c34e:	2400      	movs	r4, #0
 800c350:	e7b0      	b.n	800c2b4 <xTaskResumeAll+0x34>
 800c352:	2400      	movs	r4, #0
 800c354:	e7ae      	b.n	800c2b4 <xTaskResumeAll+0x34>
 800c356:	bf00      	nop
 800c358:	20004fc0 	.word	0x20004fc0
 800c35c:	20004fb4 	.word	0x20004fb4
 800c360:	20005000 	.word	0x20005000
 800c364:	20004fc8 	.word	0x20004fc8
 800c368:	20004f28 	.word	0x20004f28
 800c36c:	20004f1c 	.word	0x20004f1c
 800c370:	20005044 	.word	0x20005044
 800c374:	20004fbc 	.word	0x20004fbc
 800c378:	e000ed04 	.word	0xe000ed04

0800c37c <vTaskDelay>:
	{
 800c37c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c37e:	b1a8      	cbz	r0, 800c3ac <vTaskDelay+0x30>
 800c380:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800c382:	4b10      	ldr	r3, [pc, #64]	; (800c3c4 <vTaskDelay+0x48>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	b143      	cbz	r3, 800c39a <vTaskDelay+0x1e>
 800c388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c38c:	f383 8811 	msr	BASEPRI, r3
 800c390:	f3bf 8f6f 	isb	sy
 800c394:	f3bf 8f4f 	dsb	sy
 800c398:	e7fe      	b.n	800c398 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800c39a:	f7ff fed3 	bl	800c144 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c39e:	2100      	movs	r1, #0
 800c3a0:	4620      	mov	r0, r4
 800c3a2:	f7ff fe0f 	bl	800bfc4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800c3a6:	f7ff ff6b 	bl	800c280 <xTaskResumeAll>
 800c3aa:	e000      	b.n	800c3ae <vTaskDelay+0x32>
	BaseType_t xAlreadyYielded = pdFALSE;
 800c3ac:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
 800c3ae:	b938      	cbnz	r0, 800c3c0 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 800c3b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3b4:	4b04      	ldr	r3, [pc, #16]	; (800c3c8 <vTaskDelay+0x4c>)
 800c3b6:	601a      	str	r2, [r3, #0]
 800c3b8:	f3bf 8f4f 	dsb	sy
 800c3bc:	f3bf 8f6f 	isb	sy
 800c3c0:	bd10      	pop	{r4, pc}
 800c3c2:	bf00      	nop
 800c3c4:	20004fc0 	.word	0x20004fc0
 800c3c8:	e000ed04 	.word	0xe000ed04

0800c3cc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c3cc:	4b21      	ldr	r3, [pc, #132]	; (800c454 <vTaskSwitchContext+0x88>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	b9c3      	cbnz	r3, 800c404 <vTaskSwitchContext+0x38>
		xYieldPending = pdFALSE;
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	4b20      	ldr	r3, [pc, #128]	; (800c458 <vTaskSwitchContext+0x8c>)
 800c3d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800c3d8:	4b20      	ldr	r3, [pc, #128]	; (800c45c <vTaskSwitchContext+0x90>)
 800c3da:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c3dc:	fab3 f383 	clz	r3, r3
 800c3e0:	b2db      	uxtb	r3, r3
 800c3e2:	f1c3 031f 	rsb	r3, r3, #31
 800c3e6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800c3ea:	008a      	lsls	r2, r1, #2
 800c3ec:	491c      	ldr	r1, [pc, #112]	; (800c460 <vTaskSwitchContext+0x94>)
 800c3ee:	588a      	ldr	r2, [r1, r2]
 800c3f0:	b962      	cbnz	r2, 800c40c <vTaskSwitchContext+0x40>
	__asm volatile
 800c3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f6:	f383 8811 	msr	BASEPRI, r3
 800c3fa:	f3bf 8f6f 	isb	sy
 800c3fe:	f3bf 8f4f 	dsb	sy
 800c402:	e7fe      	b.n	800c402 <vTaskSwitchContext+0x36>
		xYieldPending = pdTRUE;
 800c404:	2201      	movs	r2, #1
 800c406:	4b14      	ldr	r3, [pc, #80]	; (800c458 <vTaskSwitchContext+0x8c>)
 800c408:	601a      	str	r2, [r3, #0]
 800c40a:	4770      	bx	lr
{
 800c40c:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800c40e:	4814      	ldr	r0, [pc, #80]	; (800c460 <vTaskSwitchContext+0x94>)
 800c410:	009a      	lsls	r2, r3, #2
 800c412:	18d4      	adds	r4, r2, r3
 800c414:	00a1      	lsls	r1, r4, #2
 800c416:	4401      	add	r1, r0
 800c418:	684c      	ldr	r4, [r1, #4]
 800c41a:	6864      	ldr	r4, [r4, #4]
 800c41c:	604c      	str	r4, [r1, #4]
 800c41e:	441a      	add	r2, r3
 800c420:	0091      	lsls	r1, r2, #2
 800c422:	3108      	adds	r1, #8
 800c424:	4408      	add	r0, r1
 800c426:	4284      	cmp	r4, r0
 800c428:	d00b      	beq.n	800c442 <vTaskSwitchContext+0x76>
 800c42a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c42e:	009a      	lsls	r2, r3, #2
 800c430:	4b0b      	ldr	r3, [pc, #44]	; (800c460 <vTaskSwitchContext+0x94>)
 800c432:	4413      	add	r3, r2
 800c434:	685b      	ldr	r3, [r3, #4]
 800c436:	68da      	ldr	r2, [r3, #12]
 800c438:	4b0a      	ldr	r3, [pc, #40]	; (800c464 <vTaskSwitchContext+0x98>)
 800c43a:	601a      	str	r2, [r3, #0]
}
 800c43c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c440:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800c442:	6860      	ldr	r0, [r4, #4]
 800c444:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800c448:	0091      	lsls	r1, r2, #2
 800c44a:	4a05      	ldr	r2, [pc, #20]	; (800c460 <vTaskSwitchContext+0x94>)
 800c44c:	440a      	add	r2, r1
 800c44e:	6050      	str	r0, [r2, #4]
 800c450:	e7eb      	b.n	800c42a <vTaskSwitchContext+0x5e>
 800c452:	bf00      	nop
 800c454:	20004fc0 	.word	0x20004fc0
 800c458:	20005044 	.word	0x20005044
 800c45c:	20004fc8 	.word	0x20004fc8
 800c460:	20004f28 	.word	0x20004f28
 800c464:	20004f1c 	.word	0x20004f1c

0800c468 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800c468:	b940      	cbnz	r0, 800c47c <vTaskPlaceOnEventList+0x14>
 800c46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c46e:	f383 8811 	msr	BASEPRI, r3
 800c472:	f3bf 8f6f 	isb	sy
 800c476:	f3bf 8f4f 	dsb	sy
 800c47a:	e7fe      	b.n	800c47a <vTaskPlaceOnEventList+0x12>
{
 800c47c:	b510      	push	{r4, lr}
 800c47e:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c480:	4b04      	ldr	r3, [pc, #16]	; (800c494 <vTaskPlaceOnEventList+0x2c>)
 800c482:	6819      	ldr	r1, [r3, #0]
 800c484:	3118      	adds	r1, #24
 800c486:	f7fe fc6d 	bl	800ad64 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c48a:	2101      	movs	r1, #1
 800c48c:	4620      	mov	r0, r4
 800c48e:	f7ff fd99 	bl	800bfc4 <prvAddCurrentTaskToDelayedList>
 800c492:	bd10      	pop	{r4, pc}
 800c494:	20004f1c 	.word	0x20004f1c

0800c498 <vTaskPlaceOnEventListRestricted>:
	{
 800c498:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800c49a:	b170      	cbz	r0, 800c4ba <vTaskPlaceOnEventListRestricted+0x22>
 800c49c:	460c      	mov	r4, r1
 800c49e:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c4a0:	4a0a      	ldr	r2, [pc, #40]	; (800c4cc <vTaskPlaceOnEventListRestricted+0x34>)
 800c4a2:	6811      	ldr	r1, [r2, #0]
 800c4a4:	3118      	adds	r1, #24
 800c4a6:	f7fe fc51 	bl	800ad4c <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800c4aa:	b10d      	cbz	r5, 800c4b0 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 800c4ac:	f04f 34ff 	mov.w	r4, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c4b0:	4629      	mov	r1, r5
 800c4b2:	4620      	mov	r0, r4
 800c4b4:	f7ff fd86 	bl	800bfc4 <prvAddCurrentTaskToDelayedList>
 800c4b8:	bd38      	pop	{r3, r4, r5, pc}
 800c4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4be:	f383 8811 	msr	BASEPRI, r3
 800c4c2:	f3bf 8f6f 	isb	sy
 800c4c6:	f3bf 8f4f 	dsb	sy
 800c4ca:	e7fe      	b.n	800c4ca <vTaskPlaceOnEventListRestricted+0x32>
 800c4cc:	20004f1c 	.word	0x20004f1c

0800c4d0 <xTaskRemoveFromEventList>:
{
 800c4d0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800c4d2:	68c3      	ldr	r3, [r0, #12]
 800c4d4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800c4d6:	b324      	cbz	r4, 800c522 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c4d8:	f104 0518 	add.w	r5, r4, #24
 800c4dc:	4628      	mov	r0, r5
 800c4de:	f7fe fc5b 	bl	800ad98 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4e2:	4b18      	ldr	r3, [pc, #96]	; (800c544 <xTaskRemoveFromEventList+0x74>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	bb2b      	cbnz	r3, 800c534 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c4e8:	1d25      	adds	r5, r4, #4
 800c4ea:	4628      	mov	r0, r5
 800c4ec:	f7fe fc54 	bl	800ad98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c4f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	409a      	lsls	r2, r3
 800c4f6:	4914      	ldr	r1, [pc, #80]	; (800c548 <xTaskRemoveFromEventList+0x78>)
 800c4f8:	6808      	ldr	r0, [r1, #0]
 800c4fa:	4302      	orrs	r2, r0
 800c4fc:	600a      	str	r2, [r1, #0]
 800c4fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c502:	009a      	lsls	r2, r3, #2
 800c504:	4629      	mov	r1, r5
 800c506:	4811      	ldr	r0, [pc, #68]	; (800c54c <xTaskRemoveFromEventList+0x7c>)
 800c508:	4410      	add	r0, r2
 800c50a:	f7fe fc1f 	bl	800ad4c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c50e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c510:	4b0f      	ldr	r3, [pc, #60]	; (800c550 <xTaskRemoveFromEventList+0x80>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c516:	429a      	cmp	r2, r3
 800c518:	d911      	bls.n	800c53e <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800c51a:	2001      	movs	r0, #1
 800c51c:	4b0d      	ldr	r3, [pc, #52]	; (800c554 <xTaskRemoveFromEventList+0x84>)
 800c51e:	6018      	str	r0, [r3, #0]
 800c520:	bd38      	pop	{r3, r4, r5, pc}
 800c522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c526:	f383 8811 	msr	BASEPRI, r3
 800c52a:	f3bf 8f6f 	isb	sy
 800c52e:	f3bf 8f4f 	dsb	sy
 800c532:	e7fe      	b.n	800c532 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c534:	4629      	mov	r1, r5
 800c536:	4808      	ldr	r0, [pc, #32]	; (800c558 <xTaskRemoveFromEventList+0x88>)
 800c538:	f7fe fc08 	bl	800ad4c <vListInsertEnd>
 800c53c:	e7e7      	b.n	800c50e <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800c53e:	2000      	movs	r0, #0
}
 800c540:	bd38      	pop	{r3, r4, r5, pc}
 800c542:	bf00      	nop
 800c544:	20004fc0 	.word	0x20004fc0
 800c548:	20004fc8 	.word	0x20004fc8
 800c54c:	20004f28 	.word	0x20004f28
 800c550:	20004f1c 	.word	0x20004f1c
 800c554:	20005044 	.word	0x20005044
 800c558:	20005000 	.word	0x20005000

0800c55c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c55c:	4b03      	ldr	r3, [pc, #12]	; (800c56c <vTaskInternalSetTimeOutState+0x10>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c562:	4b03      	ldr	r3, [pc, #12]	; (800c570 <vTaskInternalSetTimeOutState+0x14>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	6043      	str	r3, [r0, #4]
 800c568:	4770      	bx	lr
 800c56a:	bf00      	nop
 800c56c:	20004ffc 	.word	0x20004ffc
 800c570:	20005040 	.word	0x20005040

0800c574 <xTaskCheckForTimeOut>:
{
 800c574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800c576:	b1e0      	cbz	r0, 800c5b2 <xTaskCheckForTimeOut+0x3e>
 800c578:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800c57a:	b319      	cbz	r1, 800c5c4 <xTaskCheckForTimeOut+0x50>
 800c57c:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 800c57e:	f7fe fc89 	bl	800ae94 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800c582:	4b1a      	ldr	r3, [pc, #104]	; (800c5ec <xTaskCheckForTimeOut+0x78>)
 800c584:	6818      	ldr	r0, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c586:	6869      	ldr	r1, [r5, #4]
 800c588:	1a42      	subs	r2, r0, r1
			if( *pxTicksToWait == portMAX_DELAY )
 800c58a:	6823      	ldr	r3, [r4, #0]
 800c58c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c590:	d028      	beq.n	800c5e4 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c592:	682f      	ldr	r7, [r5, #0]
 800c594:	4e16      	ldr	r6, [pc, #88]	; (800c5f0 <xTaskCheckForTimeOut+0x7c>)
 800c596:	6836      	ldr	r6, [r6, #0]
 800c598:	42b7      	cmp	r7, r6
 800c59a:	d001      	beq.n	800c5a0 <xTaskCheckForTimeOut+0x2c>
 800c59c:	4288      	cmp	r0, r1
 800c59e:	d223      	bcs.n	800c5e8 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d318      	bcc.n	800c5d6 <xTaskCheckForTimeOut+0x62>
			*pxTicksToWait = 0;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800c5a8:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800c5aa:	f7fe fc95 	bl	800aed8 <vPortExitCritical>
}
 800c5ae:	4620      	mov	r0, r4
 800c5b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b6:	f383 8811 	msr	BASEPRI, r3
 800c5ba:	f3bf 8f6f 	isb	sy
 800c5be:	f3bf 8f4f 	dsb	sy
 800c5c2:	e7fe      	b.n	800c5c2 <xTaskCheckForTimeOut+0x4e>
 800c5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c8:	f383 8811 	msr	BASEPRI, r3
 800c5cc:	f3bf 8f6f 	isb	sy
 800c5d0:	f3bf 8f4f 	dsb	sy
 800c5d4:	e7fe      	b.n	800c5d4 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= xElapsedTime;
 800c5d6:	1a9b      	subs	r3, r3, r2
 800c5d8:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c5da:	4628      	mov	r0, r5
 800c5dc:	f7ff ffbe 	bl	800c55c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c5e0:	2400      	movs	r4, #0
 800c5e2:	e7e2      	b.n	800c5aa <xTaskCheckForTimeOut+0x36>
				xReturn = pdFALSE;
 800c5e4:	2400      	movs	r4, #0
 800c5e6:	e7e0      	b.n	800c5aa <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
 800c5e8:	2401      	movs	r4, #1
 800c5ea:	e7de      	b.n	800c5aa <xTaskCheckForTimeOut+0x36>
 800c5ec:	20005040 	.word	0x20005040
 800c5f0:	20004ffc 	.word	0x20004ffc

0800c5f4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	4b01      	ldr	r3, [pc, #4]	; (800c5fc <vTaskMissedYield+0x8>)
 800c5f8:	601a      	str	r2, [r3, #0]
 800c5fa:	4770      	bx	lr
 800c5fc:	20005044 	.word	0x20005044

0800c600 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800c600:	4b05      	ldr	r3, [pc, #20]	; (800c618 <xTaskGetSchedulerState+0x18>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	b123      	cbz	r3, 800c610 <xTaskGetSchedulerState+0x10>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c606:	4b05      	ldr	r3, [pc, #20]	; (800c61c <xTaskGetSchedulerState+0x1c>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	b91b      	cbnz	r3, 800c614 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_RUNNING;
 800c60c:	2002      	movs	r0, #2
 800c60e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c610:	2001      	movs	r0, #1
 800c612:	4770      	bx	lr
				xReturn = taskSCHEDULER_SUSPENDED;
 800c614:	2000      	movs	r0, #0
	}
 800c616:	4770      	bx	lr
 800c618:	20005014 	.word	0x20005014
 800c61c:	20004fc0 	.word	0x20004fc0

0800c620 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800c620:	2800      	cmp	r0, #0
 800c622:	d054      	beq.n	800c6ce <xTaskPriorityInherit+0xae>
	{
 800c624:	b538      	push	{r3, r4, r5, lr}
 800c626:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c628:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800c62a:	492a      	ldr	r1, [pc, #168]	; (800c6d4 <xTaskPriorityInherit+0xb4>)
 800c62c:	6809      	ldr	r1, [r1, #0]
 800c62e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800c630:	428a      	cmp	r2, r1
 800c632:	d242      	bcs.n	800c6ba <xTaskPriorityInherit+0x9a>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c634:	6981      	ldr	r1, [r0, #24]
 800c636:	2900      	cmp	r1, #0
 800c638:	db05      	blt.n	800c646 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c63a:	4926      	ldr	r1, [pc, #152]	; (800c6d4 <xTaskPriorityInherit+0xb4>)
 800c63c:	6809      	ldr	r1, [r1, #0]
 800c63e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800c640:	f1c1 0107 	rsb	r1, r1, #7
 800c644:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c646:	6960      	ldr	r0, [r4, #20]
 800c648:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800c64c:	0091      	lsls	r1, r2, #2
 800c64e:	4a22      	ldr	r2, [pc, #136]	; (800c6d8 <xTaskPriorityInherit+0xb8>)
 800c650:	440a      	add	r2, r1
 800c652:	4290      	cmp	r0, r2
 800c654:	d007      	beq.n	800c666 <xTaskPriorityInherit+0x46>
 800c656:	2200      	movs	r2, #0
 800c658:	b93a      	cbnz	r2, 800c66a <xTaskPriorityInherit+0x4a>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c65a:	4a1e      	ldr	r2, [pc, #120]	; (800c6d4 <xTaskPriorityInherit+0xb4>)
 800c65c:	6812      	ldr	r2, [r2, #0]
 800c65e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c660:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 800c662:	2001      	movs	r0, #1
 800c664:	bd38      	pop	{r3, r4, r5, pc}
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c666:	2201      	movs	r2, #1
 800c668:	e7f6      	b.n	800c658 <xTaskPriorityInherit+0x38>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c66a:	1d25      	adds	r5, r4, #4
 800c66c:	4628      	mov	r0, r5
 800c66e:	f7fe fb93 	bl	800ad98 <uxListRemove>
 800c672:	b968      	cbnz	r0, 800c690 <xTaskPriorityInherit+0x70>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800c674:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c676:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800c67a:	008a      	lsls	r2, r1, #2
 800c67c:	4916      	ldr	r1, [pc, #88]	; (800c6d8 <xTaskPriorityInherit+0xb8>)
 800c67e:	588a      	ldr	r2, [r1, r2]
 800c680:	b932      	cbnz	r2, 800c690 <xTaskPriorityInherit+0x70>
 800c682:	2201      	movs	r2, #1
 800c684:	409a      	lsls	r2, r3
 800c686:	4915      	ldr	r1, [pc, #84]	; (800c6dc <xTaskPriorityInherit+0xbc>)
 800c688:	680b      	ldr	r3, [r1, #0]
 800c68a:	ea23 0302 	bic.w	r3, r3, r2
 800c68e:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c690:	4b10      	ldr	r3, [pc, #64]	; (800c6d4 <xTaskPriorityInherit+0xb4>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c696:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c698:	2401      	movs	r4, #1
 800c69a:	fa04 f203 	lsl.w	r2, r4, r3
 800c69e:	490f      	ldr	r1, [pc, #60]	; (800c6dc <xTaskPriorityInherit+0xbc>)
 800c6a0:	6808      	ldr	r0, [r1, #0]
 800c6a2:	4302      	orrs	r2, r0
 800c6a4:	600a      	str	r2, [r1, #0]
 800c6a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c6aa:	009a      	lsls	r2, r3, #2
 800c6ac:	4629      	mov	r1, r5
 800c6ae:	480a      	ldr	r0, [pc, #40]	; (800c6d8 <xTaskPriorityInherit+0xb8>)
 800c6b0:	4410      	add	r0, r2
 800c6b2:	f7fe fb4b 	bl	800ad4c <vListInsertEnd>
				xReturn = pdTRUE;
 800c6b6:	4620      	mov	r0, r4
 800c6b8:	bd38      	pop	{r3, r4, r5, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c6ba:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800c6bc:	4b05      	ldr	r3, [pc, #20]	; (800c6d4 <xTaskPriorityInherit+0xb4>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d201      	bcs.n	800c6ca <xTaskPriorityInherit+0xaa>
					xReturn = pdTRUE;
 800c6c6:	2001      	movs	r0, #1
	}
 800c6c8:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 800c6ca:	2000      	movs	r0, #0
 800c6cc:	bd38      	pop	{r3, r4, r5, pc}
 800c6ce:	2000      	movs	r0, #0
 800c6d0:	4770      	bx	lr
 800c6d2:	bf00      	nop
 800c6d4:	20004f1c 	.word	0x20004f1c
 800c6d8:	20004f28 	.word	0x20004f28
 800c6dc:	20004fc8 	.word	0x20004fc8

0800c6e0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800c6e0:	2800      	cmp	r0, #0
 800c6e2:	d04a      	beq.n	800c77a <xTaskPriorityDisinherit+0x9a>
	{
 800c6e4:	b538      	push	{r3, r4, r5, lr}
 800c6e6:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800c6e8:	4a27      	ldr	r2, [pc, #156]	; (800c788 <xTaskPriorityDisinherit+0xa8>)
 800c6ea:	6812      	ldr	r2, [r2, #0]
 800c6ec:	4290      	cmp	r0, r2
 800c6ee:	d008      	beq.n	800c702 <xTaskPriorityDisinherit+0x22>
 800c6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6f4:	f383 8811 	msr	BASEPRI, r3
 800c6f8:	f3bf 8f6f 	isb	sy
 800c6fc:	f3bf 8f4f 	dsb	sy
 800c700:	e7fe      	b.n	800c700 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800c702:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800c704:	b942      	cbnz	r2, 800c718 <xTaskPriorityDisinherit+0x38>
 800c706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c70a:	f383 8811 	msr	BASEPRI, r3
 800c70e:	f3bf 8f6f 	isb	sy
 800c712:	f3bf 8f4f 	dsb	sy
 800c716:	e7fe      	b.n	800c716 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800c718:	3a01      	subs	r2, #1
 800c71a:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c71c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800c71e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800c720:	4288      	cmp	r0, r1
 800c722:	d02c      	beq.n	800c77e <xTaskPriorityDisinherit+0x9e>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c724:	bb6a      	cbnz	r2, 800c782 <xTaskPriorityDisinherit+0xa2>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c726:	1d25      	adds	r5, r4, #4
 800c728:	4628      	mov	r0, r5
 800c72a:	f7fe fb35 	bl	800ad98 <uxListRemove>
 800c72e:	b970      	cbnz	r0, 800c74e <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c730:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c732:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800c736:	008b      	lsls	r3, r1, #2
 800c738:	4914      	ldr	r1, [pc, #80]	; (800c78c <xTaskPriorityDisinherit+0xac>)
 800c73a:	58cb      	ldr	r3, [r1, r3]
 800c73c:	b93b      	cbnz	r3, 800c74e <xTaskPriorityDisinherit+0x6e>
 800c73e:	2301      	movs	r3, #1
 800c740:	fa03 f202 	lsl.w	r2, r3, r2
 800c744:	4912      	ldr	r1, [pc, #72]	; (800c790 <xTaskPriorityDisinherit+0xb0>)
 800c746:	680b      	ldr	r3, [r1, #0]
 800c748:	ea23 0302 	bic.w	r3, r3, r2
 800c74c:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c74e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c750:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c752:	f1c3 0207 	rsb	r2, r3, #7
 800c756:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800c758:	2401      	movs	r4, #1
 800c75a:	fa04 f203 	lsl.w	r2, r4, r3
 800c75e:	490c      	ldr	r1, [pc, #48]	; (800c790 <xTaskPriorityDisinherit+0xb0>)
 800c760:	6808      	ldr	r0, [r1, #0]
 800c762:	4302      	orrs	r2, r0
 800c764:	600a      	str	r2, [r1, #0]
 800c766:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c76a:	009a      	lsls	r2, r3, #2
 800c76c:	4629      	mov	r1, r5
 800c76e:	4807      	ldr	r0, [pc, #28]	; (800c78c <xTaskPriorityDisinherit+0xac>)
 800c770:	4410      	add	r0, r2
 800c772:	f7fe faeb 	bl	800ad4c <vListInsertEnd>
					xReturn = pdTRUE;
 800c776:	4620      	mov	r0, r4
 800c778:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 800c77a:	2000      	movs	r0, #0
 800c77c:	4770      	bx	lr
 800c77e:	2000      	movs	r0, #0
 800c780:	bd38      	pop	{r3, r4, r5, pc}
 800c782:	2000      	movs	r0, #0
	}
 800c784:	bd38      	pop	{r3, r4, r5, pc}
 800c786:	bf00      	nop
 800c788:	20004f1c 	.word	0x20004f1c
 800c78c:	20004f28 	.word	0x20004f28
 800c790:	20004fc8 	.word	0x20004fc8

0800c794 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800c794:	2800      	cmp	r0, #0
 800c796:	d05b      	beq.n	800c850 <vTaskPriorityDisinheritAfterTimeout+0xbc>
	{
 800c798:	b538      	push	{r3, r4, r5, lr}
 800c79a:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800c79c:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800c79e:	b940      	cbnz	r0, 800c7b2 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800c7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a4:	f383 8811 	msr	BASEPRI, r3
 800c7a8:	f3bf 8f6f 	isb	sy
 800c7ac:	f3bf 8f4f 	dsb	sy
 800c7b0:	e7fe      	b.n	800c7b0 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c7b2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800c7b4:	428a      	cmp	r2, r1
 800c7b6:	d200      	bcs.n	800c7ba <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c7b8:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c7ba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c7bc:	428a      	cmp	r2, r1
 800c7be:	d001      	beq.n	800c7c4 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c7c0:	2801      	cmp	r0, #1
 800c7c2:	d000      	beq.n	800c7c6 <vTaskPriorityDisinheritAfterTimeout+0x32>
 800c7c4:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800c7c6:	4823      	ldr	r0, [pc, #140]	; (800c854 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 800c7c8:	6800      	ldr	r0, [r0, #0]
 800c7ca:	4284      	cmp	r4, r0
 800c7cc:	d108      	bne.n	800c7e0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
 800c7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d2:	f383 8811 	msr	BASEPRI, r3
 800c7d6:	f3bf 8f6f 	isb	sy
 800c7da:	f3bf 8f4f 	dsb	sy
 800c7de:	e7fe      	b.n	800c7de <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
 800c7e0:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c7e2:	69a0      	ldr	r0, [r4, #24]
 800c7e4:	2800      	cmp	r0, #0
 800c7e6:	db02      	blt.n	800c7ee <vTaskPriorityDisinheritAfterTimeout+0x5a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7e8:	f1c2 0207 	rsb	r2, r2, #7
 800c7ec:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c7ee:	6963      	ldr	r3, [r4, #20]
 800c7f0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800c7f4:	0088      	lsls	r0, r1, #2
 800c7f6:	4a18      	ldr	r2, [pc, #96]	; (800c858 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 800c7f8:	4402      	add	r2, r0
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d126      	bne.n	800c84c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800c7fe:	2201      	movs	r2, #1
 800c800:	2a00      	cmp	r2, #0
 800c802:	d0df      	beq.n	800c7c4 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c804:	1d25      	adds	r5, r4, #4
 800c806:	4628      	mov	r0, r5
 800c808:	f7fe fac6 	bl	800ad98 <uxListRemove>
 800c80c:	b970      	cbnz	r0, 800c82c <vTaskPriorityDisinheritAfterTimeout+0x98>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c80e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c810:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800c814:	008b      	lsls	r3, r1, #2
 800c816:	4910      	ldr	r1, [pc, #64]	; (800c858 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 800c818:	58cb      	ldr	r3, [r1, r3]
 800c81a:	b93b      	cbnz	r3, 800c82c <vTaskPriorityDisinheritAfterTimeout+0x98>
 800c81c:	2301      	movs	r3, #1
 800c81e:	fa03 f202 	lsl.w	r2, r3, r2
 800c822:	490e      	ldr	r1, [pc, #56]	; (800c85c <vTaskPriorityDisinheritAfterTimeout+0xc8>)
 800c824:	680b      	ldr	r3, [r1, #0]
 800c826:	ea23 0302 	bic.w	r3, r3, r2
 800c82a:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
 800c82c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c82e:	2201      	movs	r2, #1
 800c830:	409a      	lsls	r2, r3
 800c832:	490a      	ldr	r1, [pc, #40]	; (800c85c <vTaskPriorityDisinheritAfterTimeout+0xc8>)
 800c834:	6808      	ldr	r0, [r1, #0]
 800c836:	4302      	orrs	r2, r0
 800c838:	600a      	str	r2, [r1, #0]
 800c83a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c83e:	009a      	lsls	r2, r3, #2
 800c840:	4629      	mov	r1, r5
 800c842:	4805      	ldr	r0, [pc, #20]	; (800c858 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 800c844:	4410      	add	r0, r2
 800c846:	f7fe fa81 	bl	800ad4c <vListInsertEnd>
	}
 800c84a:	e7bb      	b.n	800c7c4 <vTaskPriorityDisinheritAfterTimeout+0x30>
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c84c:	2200      	movs	r2, #0
 800c84e:	e7d7      	b.n	800c800 <vTaskPriorityDisinheritAfterTimeout+0x6c>
 800c850:	4770      	bx	lr
 800c852:	bf00      	nop
 800c854:	20004f1c 	.word	0x20004f1c
 800c858:	20004f28 	.word	0x20004f28
 800c85c:	20004fc8 	.word	0x20004fc8

0800c860 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800c860:	4b05      	ldr	r3, [pc, #20]	; (800c878 <pvTaskIncrementMutexHeldCount+0x18>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	b123      	cbz	r3, 800c870 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800c866:	4b04      	ldr	r3, [pc, #16]	; (800c878 <pvTaskIncrementMutexHeldCount+0x18>)
 800c868:	681a      	ldr	r2, [r3, #0]
 800c86a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c86c:	3301      	adds	r3, #1
 800c86e:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
 800c870:	4b01      	ldr	r3, [pc, #4]	; (800c878 <pvTaskIncrementMutexHeldCount+0x18>)
 800c872:	6818      	ldr	r0, [r3, #0]
	}
 800c874:	4770      	bx	lr
 800c876:	bf00      	nop
 800c878:	20004f1c 	.word	0x20004f1c

0800c87c <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c87c:	4b06      	ldr	r3, [pc, #24]	; (800c898 <prvGetNextExpireTime+0x1c>)
 800c87e:	681a      	ldr	r2, [r3, #0]
 800c880:	6813      	ldr	r3, [r2, #0]
 800c882:	fab3 f383 	clz	r3, r3
 800c886:	095b      	lsrs	r3, r3, #5
 800c888:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c88a:	b913      	cbnz	r3, 800c892 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c88c:	68d3      	ldr	r3, [r2, #12]
 800c88e:	6818      	ldr	r0, [r3, #0]
 800c890:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c892:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800c894:	4770      	bx	lr
 800c896:	bf00      	nop
 800c898:	20005048 	.word	0x20005048

0800c89c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c89c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c89e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c8a0:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c8a2:	4291      	cmp	r1, r2
 800c8a4:	d80c      	bhi.n	800c8c0 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8a6:	1ad2      	subs	r2, r2, r3
 800c8a8:	6983      	ldr	r3, [r0, #24]
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d301      	bcc.n	800c8b2 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c8ae:	2001      	movs	r0, #1
 800c8b0:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c8b2:	1d01      	adds	r1, r0, #4
 800c8b4:	4b09      	ldr	r3, [pc, #36]	; (800c8dc <prvInsertTimerInActiveList+0x40>)
 800c8b6:	6818      	ldr	r0, [r3, #0]
 800c8b8:	f7fe fa54 	bl	800ad64 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800c8bc:	2000      	movs	r0, #0
 800c8be:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d201      	bcs.n	800c8c8 <prvInsertTimerInActiveList+0x2c>
 800c8c4:	4299      	cmp	r1, r3
 800c8c6:	d206      	bcs.n	800c8d6 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c8c8:	1d01      	adds	r1, r0, #4
 800c8ca:	4b05      	ldr	r3, [pc, #20]	; (800c8e0 <prvInsertTimerInActiveList+0x44>)
 800c8cc:	6818      	ldr	r0, [r3, #0]
 800c8ce:	f7fe fa49 	bl	800ad64 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800c8d2:	2000      	movs	r0, #0
 800c8d4:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
 800c8d6:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
 800c8d8:	bd08      	pop	{r3, pc}
 800c8da:	bf00      	nop
 800c8dc:	2000504c 	.word	0x2000504c
 800c8e0:	20005048 	.word	0x20005048

0800c8e4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c8e4:	b538      	push	{r3, r4, r5, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c8e6:	f7fe fad5 	bl	800ae94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c8ea:	4b0f      	ldr	r3, [pc, #60]	; (800c928 <prvCheckForValidListAndQueue+0x44>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	b113      	cbz	r3, 800c8f6 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c8f0:	f7fe faf2 	bl	800aed8 <vPortExitCritical>
 800c8f4:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800c8f6:	4d0d      	ldr	r5, [pc, #52]	; (800c92c <prvCheckForValidListAndQueue+0x48>)
 800c8f8:	4628      	mov	r0, r5
 800c8fa:	f7fe fa19 	bl	800ad30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c8fe:	4c0c      	ldr	r4, [pc, #48]	; (800c930 <prvCheckForValidListAndQueue+0x4c>)
 800c900:	4620      	mov	r0, r4
 800c902:	f7fe fa15 	bl	800ad30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c906:	4b0b      	ldr	r3, [pc, #44]	; (800c934 <prvCheckForValidListAndQueue+0x50>)
 800c908:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c90a:	4b0b      	ldr	r3, [pc, #44]	; (800c938 <prvCheckForValidListAndQueue+0x54>)
 800c90c:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800c90e:	2200      	movs	r2, #0
 800c910:	210c      	movs	r1, #12
 800c912:	200a      	movs	r0, #10
 800c914:	f7fe fe2a 	bl	800b56c <xQueueGenericCreate>
 800c918:	4b03      	ldr	r3, [pc, #12]	; (800c928 <prvCheckForValidListAndQueue+0x44>)
 800c91a:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800c91c:	2800      	cmp	r0, #0
 800c91e:	d0e7      	beq.n	800c8f0 <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c920:	4906      	ldr	r1, [pc, #24]	; (800c93c <prvCheckForValidListAndQueue+0x58>)
 800c922:	f7ff f9eb 	bl	800bcfc <vQueueAddToRegistry>
 800c926:	e7e3      	b.n	800c8f0 <prvCheckForValidListAndQueue+0xc>
 800c928:	2000507c 	.word	0x2000507c
 800c92c:	20005050 	.word	0x20005050
 800c930:	20005064 	.word	0x20005064
 800c934:	20005048 	.word	0x20005048
 800c938:	2000504c 	.word	0x2000504c
 800c93c:	08012c80 	.word	0x08012c80

0800c940 <prvInitialiseNewTimer>:
{
 800c940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c944:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c946:	b941      	cbnz	r1, 800c95a <prvInitialiseNewTimer+0x1a>
 800c948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c94c:	f383 8811 	msr	BASEPRI, r3
 800c950:	f3bf 8f6f 	isb	sy
 800c954:	f3bf 8f4f 	dsb	sy
 800c958:	e7fe      	b.n	800c958 <prvInitialiseNewTimer+0x18>
 800c95a:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
 800c95c:	b174      	cbz	r4, 800c97c <prvInitialiseNewTimer+0x3c>
 800c95e:	461d      	mov	r5, r3
 800c960:	4616      	mov	r6, r2
 800c962:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
 800c964:	f7ff ffbe 	bl	800c8e4 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
 800c968:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c96c:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800c96e:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800c970:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c972:	9b06      	ldr	r3, [sp, #24]
 800c974:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c976:	1d20      	adds	r0, r4, #4
 800c978:	f7fe f9e5 	bl	800ad46 <vListInitialiseItem>
 800c97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c980 <xTimerCreateTimerTask>:
{
 800c980:	b500      	push	{lr}
 800c982:	b083      	sub	sp, #12
	prvCheckForValidListAndQueue();
 800c984:	f7ff ffae 	bl	800c8e4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800c988:	4b0e      	ldr	r3, [pc, #56]	; (800c9c4 <xTimerCreateTimerTask+0x44>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	b1a3      	cbz	r3, 800c9b8 <xTimerCreateTimerTask+0x38>
			xReturn = xTaskCreate(	prvTimerTask,
 800c98e:	4b0e      	ldr	r3, [pc, #56]	; (800c9c8 <xTimerCreateTimerTask+0x48>)
 800c990:	9301      	str	r3, [sp, #4]
 800c992:	2302      	movs	r3, #2
 800c994:	9300      	str	r3, [sp, #0]
 800c996:	2300      	movs	r3, #0
 800c998:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c99c:	490b      	ldr	r1, [pc, #44]	; (800c9cc <xTimerCreateTimerTask+0x4c>)
 800c99e:	480c      	ldr	r0, [pc, #48]	; (800c9d0 <xTimerCreateTimerTask+0x50>)
 800c9a0:	f7ff fb5c 	bl	800c05c <xTaskCreate>
	configASSERT( xReturn );
 800c9a4:	b950      	cbnz	r0, 800c9bc <xTimerCreateTimerTask+0x3c>
 800c9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9aa:	f383 8811 	msr	BASEPRI, r3
 800c9ae:	f3bf 8f6f 	isb	sy
 800c9b2:	f3bf 8f4f 	dsb	sy
 800c9b6:	e7fe      	b.n	800c9b6 <xTimerCreateTimerTask+0x36>
BaseType_t xReturn = pdFAIL;
 800c9b8:	2000      	movs	r0, #0
 800c9ba:	e7f3      	b.n	800c9a4 <xTimerCreateTimerTask+0x24>
}
 800c9bc:	b003      	add	sp, #12
 800c9be:	f85d fb04 	ldr.w	pc, [sp], #4
 800c9c2:	bf00      	nop
 800c9c4:	2000507c 	.word	0x2000507c
 800c9c8:	20005080 	.word	0x20005080
 800c9cc:	08012c88 	.word	0x08012c88
 800c9d0:	0800cccd 	.word	0x0800cccd

0800c9d4 <xTimerCreate>:
	{
 800c9d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9d8:	b082      	sub	sp, #8
 800c9da:	4605      	mov	r5, r0
 800c9dc:	460e      	mov	r6, r1
 800c9de:	4617      	mov	r7, r2
 800c9e0:	4698      	mov	r8, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800c9e2:	2028      	movs	r0, #40	; 0x28
 800c9e4:	f7fe fc0e 	bl	800b204 <pvPortMalloc>
		if( pxNewTimer != NULL )
 800c9e8:	4604      	mov	r4, r0
 800c9ea:	b140      	cbz	r0, 800c9fe <xTimerCreate+0x2a>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c9ec:	9001      	str	r0, [sp, #4]
 800c9ee:	9b08      	ldr	r3, [sp, #32]
 800c9f0:	9300      	str	r3, [sp, #0]
 800c9f2:	4643      	mov	r3, r8
 800c9f4:	463a      	mov	r2, r7
 800c9f6:	4631      	mov	r1, r6
 800c9f8:	4628      	mov	r0, r5
 800c9fa:	f7ff ffa1 	bl	800c940 <prvInitialiseNewTimer>
	}
 800c9fe:	4620      	mov	r0, r4
 800ca00:	b002      	add	sp, #8
 800ca02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800ca08 <xTimerGenericCommand>:
	configASSERT( xTimer );
 800ca08:	b1c0      	cbz	r0, 800ca3c <xTimerGenericCommand+0x34>
{
 800ca0a:	b530      	push	{r4, r5, lr}
 800ca0c:	b085      	sub	sp, #20
 800ca0e:	4615      	mov	r5, r2
 800ca10:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
 800ca12:	4a17      	ldr	r2, [pc, #92]	; (800ca70 <xTimerGenericCommand+0x68>)
 800ca14:	6810      	ldr	r0, [r2, #0]
 800ca16:	b340      	cbz	r0, 800ca6a <xTimerGenericCommand+0x62>
 800ca18:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
 800ca1a:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ca1c:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800ca1e:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ca20:	2905      	cmp	r1, #5
 800ca22:	dc1c      	bgt.n	800ca5e <xTimerGenericCommand+0x56>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ca24:	f7ff fdec 	bl	800c600 <xTaskGetSchedulerState>
 800ca28:	2802      	cmp	r0, #2
 800ca2a:	d010      	beq.n	800ca4e <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	461a      	mov	r2, r3
 800ca30:	a901      	add	r1, sp, #4
 800ca32:	480f      	ldr	r0, [pc, #60]	; (800ca70 <xTimerGenericCommand+0x68>)
 800ca34:	6800      	ldr	r0, [r0, #0]
 800ca36:	f7fe fddd 	bl	800b5f4 <xQueueGenericSend>
 800ca3a:	e014      	b.n	800ca66 <xTimerGenericCommand+0x5e>
 800ca3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca40:	f383 8811 	msr	BASEPRI, r3
 800ca44:	f3bf 8f6f 	isb	sy
 800ca48:	f3bf 8f4f 	dsb	sy
 800ca4c:	e7fe      	b.n	800ca4c <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ca4e:	2300      	movs	r3, #0
 800ca50:	9a08      	ldr	r2, [sp, #32]
 800ca52:	a901      	add	r1, sp, #4
 800ca54:	4806      	ldr	r0, [pc, #24]	; (800ca70 <xTimerGenericCommand+0x68>)
 800ca56:	6800      	ldr	r0, [r0, #0]
 800ca58:	f7fe fdcc 	bl	800b5f4 <xQueueGenericSend>
 800ca5c:	e003      	b.n	800ca66 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ca5e:	2300      	movs	r3, #0
 800ca60:	a901      	add	r1, sp, #4
 800ca62:	f7fe fea2 	bl	800b7aa <xQueueGenericSendFromISR>
}
 800ca66:	b005      	add	sp, #20
 800ca68:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 800ca6a:	2000      	movs	r0, #0
	return xReturn;
 800ca6c:	e7fb      	b.n	800ca66 <xTimerGenericCommand+0x5e>
 800ca6e:	bf00      	nop
 800ca70:	2000507c 	.word	0x2000507c

0800ca74 <prvSwitchTimerLists>:
{
 800ca74:	b570      	push	{r4, r5, r6, lr}
 800ca76:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ca78:	4b1a      	ldr	r3, [pc, #104]	; (800cae4 <prvSwitchTimerLists+0x70>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	681a      	ldr	r2, [r3, #0]
 800ca7e:	b352      	cbz	r2, 800cad6 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ca80:	68db      	ldr	r3, [r3, #12]
 800ca82:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ca84:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca86:	1d25      	adds	r5, r4, #4
 800ca88:	4628      	mov	r0, r5
 800ca8a:	f7fe f985 	bl	800ad98 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca90:	4620      	mov	r0, r4
 800ca92:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ca94:	69e3      	ldr	r3, [r4, #28]
 800ca96:	2b01      	cmp	r3, #1
 800ca98:	d1ee      	bne.n	800ca78 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ca9a:	69a3      	ldr	r3, [r4, #24]
 800ca9c:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800ca9e:	429e      	cmp	r6, r3
 800caa0:	d207      	bcs.n	800cab2 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800caa2:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800caa4:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800caa6:	4629      	mov	r1, r5
 800caa8:	4b0e      	ldr	r3, [pc, #56]	; (800cae4 <prvSwitchTimerLists+0x70>)
 800caaa:	6818      	ldr	r0, [r3, #0]
 800caac:	f7fe f95a 	bl	800ad64 <vListInsert>
 800cab0:	e7e2      	b.n	800ca78 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cab2:	2100      	movs	r1, #0
 800cab4:	9100      	str	r1, [sp, #0]
 800cab6:	460b      	mov	r3, r1
 800cab8:	4632      	mov	r2, r6
 800caba:	4620      	mov	r0, r4
 800cabc:	f7ff ffa4 	bl	800ca08 <xTimerGenericCommand>
				configASSERT( xResult );
 800cac0:	2800      	cmp	r0, #0
 800cac2:	d1d9      	bne.n	800ca78 <prvSwitchTimerLists+0x4>
 800cac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac8:	f383 8811 	msr	BASEPRI, r3
 800cacc:	f3bf 8f6f 	isb	sy
 800cad0:	f3bf 8f4f 	dsb	sy
 800cad4:	e7fe      	b.n	800cad4 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
 800cad6:	4a04      	ldr	r2, [pc, #16]	; (800cae8 <prvSwitchTimerLists+0x74>)
 800cad8:	6810      	ldr	r0, [r2, #0]
 800cada:	4902      	ldr	r1, [pc, #8]	; (800cae4 <prvSwitchTimerLists+0x70>)
 800cadc:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800cade:	6013      	str	r3, [r2, #0]
}
 800cae0:	b002      	add	sp, #8
 800cae2:	bd70      	pop	{r4, r5, r6, pc}
 800cae4:	20005048 	.word	0x20005048
 800cae8:	2000504c 	.word	0x2000504c

0800caec <prvSampleTimeNow>:
{
 800caec:	b538      	push	{r3, r4, r5, lr}
 800caee:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800caf0:	f7ff fb30 	bl	800c154 <xTaskGetTickCount>
 800caf4:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800caf6:	4b07      	ldr	r3, [pc, #28]	; (800cb14 <prvSampleTimeNow+0x28>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	4298      	cmp	r0, r3
 800cafc:	d305      	bcc.n	800cb0a <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800cafe:	2300      	movs	r3, #0
 800cb00:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800cb02:	4b04      	ldr	r3, [pc, #16]	; (800cb14 <prvSampleTimeNow+0x28>)
 800cb04:	601c      	str	r4, [r3, #0]
}
 800cb06:	4620      	mov	r0, r4
 800cb08:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800cb0a:	f7ff ffb3 	bl	800ca74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cb0e:	2301      	movs	r3, #1
 800cb10:	602b      	str	r3, [r5, #0]
 800cb12:	e7f6      	b.n	800cb02 <prvSampleTimeNow+0x16>
 800cb14:	20005078 	.word	0x20005078

0800cb18 <prvProcessExpiredTimer>:
{
 800cb18:	b570      	push	{r4, r5, r6, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	4605      	mov	r5, r0
 800cb1e:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cb20:	4b14      	ldr	r3, [pc, #80]	; (800cb74 <prvProcessExpiredTimer+0x5c>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	68db      	ldr	r3, [r3, #12]
 800cb26:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb28:	1d20      	adds	r0, r4, #4
 800cb2a:	f7fe f935 	bl	800ad98 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800cb2e:	69e3      	ldr	r3, [r4, #28]
 800cb30:	2b01      	cmp	r3, #1
 800cb32:	d004      	beq.n	800cb3e <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb36:	4620      	mov	r0, r4
 800cb38:	4798      	blx	r3
}
 800cb3a:	b002      	add	sp, #8
 800cb3c:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cb3e:	69a1      	ldr	r1, [r4, #24]
 800cb40:	462b      	mov	r3, r5
 800cb42:	4632      	mov	r2, r6
 800cb44:	4429      	add	r1, r5
 800cb46:	4620      	mov	r0, r4
 800cb48:	f7ff fea8 	bl	800c89c <prvInsertTimerInActiveList>
 800cb4c:	2800      	cmp	r0, #0
 800cb4e:	d0f1      	beq.n	800cb34 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cb50:	2100      	movs	r1, #0
 800cb52:	9100      	str	r1, [sp, #0]
 800cb54:	460b      	mov	r3, r1
 800cb56:	462a      	mov	r2, r5
 800cb58:	4620      	mov	r0, r4
 800cb5a:	f7ff ff55 	bl	800ca08 <xTimerGenericCommand>
			configASSERT( xResult );
 800cb5e:	2800      	cmp	r0, #0
 800cb60:	d1e8      	bne.n	800cb34 <prvProcessExpiredTimer+0x1c>
 800cb62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb66:	f383 8811 	msr	BASEPRI, r3
 800cb6a:	f3bf 8f6f 	isb	sy
 800cb6e:	f3bf 8f4f 	dsb	sy
 800cb72:	e7fe      	b.n	800cb72 <prvProcessExpiredTimer+0x5a>
 800cb74:	20005048 	.word	0x20005048

0800cb78 <prvProcessTimerOrBlockTask>:
{
 800cb78:	b570      	push	{r4, r5, r6, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	4606      	mov	r6, r0
 800cb7e:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800cb80:	f7ff fae0 	bl	800c144 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cb84:	a801      	add	r0, sp, #4
 800cb86:	f7ff ffb1 	bl	800caec <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800cb8a:	9b01      	ldr	r3, [sp, #4]
 800cb8c:	bb23      	cbnz	r3, 800cbd8 <prvProcessTimerOrBlockTask+0x60>
 800cb8e:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cb90:	b90c      	cbnz	r4, 800cb96 <prvProcessTimerOrBlockTask+0x1e>
 800cb92:	42b0      	cmp	r0, r6
 800cb94:	d219      	bcs.n	800cbca <prvProcessTimerOrBlockTask+0x52>
				if( xListWasEmpty != pdFALSE )
 800cb96:	b12c      	cbz	r4, 800cba4 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cb98:	4b11      	ldr	r3, [pc, #68]	; (800cbe0 <prvProcessTimerOrBlockTask+0x68>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	681c      	ldr	r4, [r3, #0]
 800cb9e:	fab4 f484 	clz	r4, r4
 800cba2:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cba4:	4622      	mov	r2, r4
 800cba6:	1b71      	subs	r1, r6, r5
 800cba8:	4b0e      	ldr	r3, [pc, #56]	; (800cbe4 <prvProcessTimerOrBlockTask+0x6c>)
 800cbaa:	6818      	ldr	r0, [r3, #0]
 800cbac:	f7ff f8ba 	bl	800bd24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cbb0:	f7ff fb66 	bl	800c280 <xTaskResumeAll>
 800cbb4:	b938      	cbnz	r0, 800cbc6 <prvProcessTimerOrBlockTask+0x4e>
					portYIELD_WITHIN_API();
 800cbb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbba:	4b0b      	ldr	r3, [pc, #44]	; (800cbe8 <prvProcessTimerOrBlockTask+0x70>)
 800cbbc:	601a      	str	r2, [r3, #0]
 800cbbe:	f3bf 8f4f 	dsb	sy
 800cbc2:	f3bf 8f6f 	isb	sy
}
 800cbc6:	b002      	add	sp, #8
 800cbc8:	bd70      	pop	{r4, r5, r6, pc}
				( void ) xTaskResumeAll();
 800cbca:	f7ff fb59 	bl	800c280 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cbce:	4629      	mov	r1, r5
 800cbd0:	4630      	mov	r0, r6
 800cbd2:	f7ff ffa1 	bl	800cb18 <prvProcessExpiredTimer>
 800cbd6:	e7f6      	b.n	800cbc6 <prvProcessTimerOrBlockTask+0x4e>
			( void ) xTaskResumeAll();
 800cbd8:	f7ff fb52 	bl	800c280 <xTaskResumeAll>
}
 800cbdc:	e7f3      	b.n	800cbc6 <prvProcessTimerOrBlockTask+0x4e>
 800cbde:	bf00      	nop
 800cbe0:	2000504c 	.word	0x2000504c
 800cbe4:	2000507c 	.word	0x2000507c
 800cbe8:	e000ed04 	.word	0xe000ed04

0800cbec <prvProcessReceivedCommands>:
{
 800cbec:	b530      	push	{r4, r5, lr}
 800cbee:	b087      	sub	sp, #28
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	a903      	add	r1, sp, #12
 800cbf4:	4b34      	ldr	r3, [pc, #208]	; (800ccc8 <prvProcessReceivedCommands+0xdc>)
 800cbf6:	6818      	ldr	r0, [r3, #0]
 800cbf8:	f7fe fea4 	bl	800b944 <xQueueReceive>
 800cbfc:	2800      	cmp	r0, #0
 800cbfe:	d060      	beq.n	800ccc2 <prvProcessReceivedCommands+0xd6>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cc00:	9b03      	ldr	r3, [sp, #12]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	dbf4      	blt.n	800cbf0 <prvProcessReceivedCommands+0x4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cc06:	9c05      	ldr	r4, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cc08:	6963      	ldr	r3, [r4, #20]
 800cc0a:	b113      	cbz	r3, 800cc12 <prvProcessReceivedCommands+0x26>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cc0c:	1d20      	adds	r0, r4, #4
 800cc0e:	f7fe f8c3 	bl	800ad98 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cc12:	a802      	add	r0, sp, #8
 800cc14:	f7ff ff6a 	bl	800caec <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800cc18:	9b03      	ldr	r3, [sp, #12]
 800cc1a:	2b09      	cmp	r3, #9
 800cc1c:	d8e8      	bhi.n	800cbf0 <prvProcessReceivedCommands+0x4>
 800cc1e:	a201      	add	r2, pc, #4	; (adr r2, 800cc24 <prvProcessReceivedCommands+0x38>)
 800cc20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc24:	0800cc4d 	.word	0x0800cc4d
 800cc28:	0800cc4d 	.word	0x0800cc4d
 800cc2c:	0800cc4d 	.word	0x0800cc4d
 800cc30:	0800cbf1 	.word	0x0800cbf1
 800cc34:	0800cc95 	.word	0x0800cc95
 800cc38:	0800ccbb 	.word	0x0800ccbb
 800cc3c:	0800cc4d 	.word	0x0800cc4d
 800cc40:	0800cc4d 	.word	0x0800cc4d
 800cc44:	0800cbf1 	.word	0x0800cbf1
 800cc48:	0800cc95 	.word	0x0800cc95
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cc4c:	9904      	ldr	r1, [sp, #16]
 800cc4e:	69a5      	ldr	r5, [r4, #24]
 800cc50:	460b      	mov	r3, r1
 800cc52:	4602      	mov	r2, r0
 800cc54:	4429      	add	r1, r5
 800cc56:	4620      	mov	r0, r4
 800cc58:	f7ff fe20 	bl	800c89c <prvInsertTimerInActiveList>
 800cc5c:	2800      	cmp	r0, #0
 800cc5e:	d0c7      	beq.n	800cbf0 <prvProcessReceivedCommands+0x4>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cc60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc62:	4620      	mov	r0, r4
 800cc64:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800cc66:	69e3      	ldr	r3, [r4, #28]
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	d1c1      	bne.n	800cbf0 <prvProcessReceivedCommands+0x4>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cc6c:	69a2      	ldr	r2, [r4, #24]
 800cc6e:	2100      	movs	r1, #0
 800cc70:	9100      	str	r1, [sp, #0]
 800cc72:	460b      	mov	r3, r1
 800cc74:	9804      	ldr	r0, [sp, #16]
 800cc76:	4402      	add	r2, r0
 800cc78:	4620      	mov	r0, r4
 800cc7a:	f7ff fec5 	bl	800ca08 <xTimerGenericCommand>
							configASSERT( xResult );
 800cc7e:	2800      	cmp	r0, #0
 800cc80:	d1b6      	bne.n	800cbf0 <prvProcessReceivedCommands+0x4>
 800cc82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc86:	f383 8811 	msr	BASEPRI, r3
 800cc8a:	f3bf 8f6f 	isb	sy
 800cc8e:	f3bf 8f4f 	dsb	sy
 800cc92:	e7fe      	b.n	800cc92 <prvProcessReceivedCommands+0xa6>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cc94:	9904      	ldr	r1, [sp, #16]
 800cc96:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cc98:	b131      	cbz	r1, 800cca8 <prvProcessReceivedCommands+0xbc>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	4602      	mov	r2, r0
 800cc9e:	4401      	add	r1, r0
 800cca0:	4620      	mov	r0, r4
 800cca2:	f7ff fdfb 	bl	800c89c <prvInsertTimerInActiveList>
					break;
 800cca6:	e7a3      	b.n	800cbf0 <prvProcessReceivedCommands+0x4>
 800cca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccac:	f383 8811 	msr	BASEPRI, r3
 800ccb0:	f3bf 8f6f 	isb	sy
 800ccb4:	f3bf 8f4f 	dsb	sy
 800ccb8:	e7fe      	b.n	800ccb8 <prvProcessReceivedCommands+0xcc>
						vPortFree( pxTimer );
 800ccba:	4620      	mov	r0, r4
 800ccbc:	f7fe fb26 	bl	800b30c <vPortFree>
					break;
 800ccc0:	e796      	b.n	800cbf0 <prvProcessReceivedCommands+0x4>
}
 800ccc2:	b007      	add	sp, #28
 800ccc4:	bd30      	pop	{r4, r5, pc}
 800ccc6:	bf00      	nop
 800ccc8:	2000507c 	.word	0x2000507c

0800cccc <prvTimerTask>:
{
 800cccc:	b500      	push	{lr}
 800ccce:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ccd0:	a801      	add	r0, sp, #4
 800ccd2:	f7ff fdd3 	bl	800c87c <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ccd6:	9901      	ldr	r1, [sp, #4]
 800ccd8:	f7ff ff4e 	bl	800cb78 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800ccdc:	f7ff ff86 	bl	800cbec <prvProcessReceivedCommands>
 800cce0:	e7f6      	b.n	800ccd0 <prvTimerTask+0x4>
	...

0800cce4 <accGiveSemaphore>:
//  #else
//  Wire.send(x);
//  #endif
//}

void accGiveSemaphore(void){
 800cce4:	b508      	push	{r3, lr}
	osSemaphoreRelease (accSampleSemaphoreHandle);
 800cce6:	4b02      	ldr	r3, [pc, #8]	; (800ccf0 <accGiveSemaphore+0xc>)
 800cce8:	6818      	ldr	r0, [r3, #0]
 800ccea:	f7fd fff3 	bl	800acd4 <osSemaphoreRelease>
 800ccee:	bd08      	pop	{r3, pc}
 800ccf0:	200053b4 	.word	0x200053b4

0800ccf4 <MMA8451_writeRegister8>:
/**************************************************************************/
/*!
    @brief  Writes 8-bits to the specified destination register
*/
/**************************************************************************/
void MMA8451_writeRegister8(uint8_t reg, uint8_t value) {
 800ccf4:	b500      	push	{lr}
 800ccf6:	b087      	sub	sp, #28
 800ccf8:	aa06      	add	r2, sp, #24
 800ccfa:	f802 1d01 	strb.w	r1, [r2, #-1]!
	HAL_I2C_Mem_Write(&hi2c2, _i2caddr<<1, reg, 1, &value, 1, 1);
 800ccfe:	4b08      	ldr	r3, [pc, #32]	; (800cd20 <MMA8451_writeRegister8+0x2c>)
 800cd00:	f993 1000 	ldrsb.w	r1, [r3]
 800cd04:	0049      	lsls	r1, r1, #1
 800cd06:	b289      	uxth	r1, r1
 800cd08:	2301      	movs	r3, #1
 800cd0a:	9302      	str	r3, [sp, #8]
 800cd0c:	9301      	str	r3, [sp, #4]
 800cd0e:	9200      	str	r2, [sp, #0]
 800cd10:	4602      	mov	r2, r0
 800cd12:	4804      	ldr	r0, [pc, #16]	; (800cd24 <MMA8451_writeRegister8+0x30>)
 800cd14:	f7f5 fe9a 	bl	8002a4c <HAL_I2C_Mem_Write>
}
 800cd18:	b007      	add	sp, #28
 800cd1a:	f85d fb04 	ldr.w	pc, [sp], #4
 800cd1e:	bf00      	nop
 800cd20:	200053b8 	.word	0x200053b8
 800cd24:	200055b8 	.word	0x200055b8

0800cd28 <MMA8451_readRegister8>:
/**************************************************************************/
/*!
    @brief  Reads 8-bits from the specified register
*/
/**************************************************************************/
uint8_t MMA8451_readRegister8(uint8_t reg) {
 800cd28:	b500      	push	{lr}
 800cd2a:	b087      	sub	sp, #28
//    i2cwrite(reg);
//    Wire.endTransmission(false); // MMA8451 + friends uses repeated start!!
//    Wire.requestFrom(_i2caddr, 1);
//#endif
	uint8_t sample;
    HAL_I2C_Mem_Read(&hi2c2, _i2caddr<<1, reg, 1, &sample, 1, 2);
 800cd2c:	4b0a      	ldr	r3, [pc, #40]	; (800cd58 <MMA8451_readRegister8+0x30>)
 800cd2e:	f993 1000 	ldrsb.w	r1, [r3]
 800cd32:	0049      	lsls	r1, r1, #1
 800cd34:	b289      	uxth	r1, r1
 800cd36:	2302      	movs	r3, #2
 800cd38:	9302      	str	r3, [sp, #8]
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	9301      	str	r3, [sp, #4]
 800cd3e:	f10d 0217 	add.w	r2, sp, #23
 800cd42:	9200      	str	r2, [sp, #0]
 800cd44:	4602      	mov	r2, r0
 800cd46:	4805      	ldr	r0, [pc, #20]	; (800cd5c <MMA8451_readRegister8+0x34>)
 800cd48:	f7f5 ff52 	bl	8002bf0 <HAL_I2C_Mem_Read>
    
    return sample;
}
 800cd4c:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800cd50:	b007      	add	sp, #28
 800cd52:	f85d fb04 	ldr.w	pc, [sp], #4
 800cd56:	bf00      	nop
 800cd58:	200053b8 	.word	0x200053b8
 800cd5c:	200055b8 	.word	0x200055b8

0800cd60 <MMA8451_begin>:
/**************************************************************************/
/*!
    @brief  Setups the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
bool MMA8451_begin(void) {
 800cd60:	b508      	push	{r3, lr}
  _i2caddr = MMA8451_DEFAULT_ADDRESS;
 800cd62:	221c      	movs	r2, #28
 800cd64:	4b18      	ldr	r3, [pc, #96]	; (800cdc8 <MMA8451_begin+0x68>)
 800cd66:	701a      	strb	r2, [r3, #0]

  /* Check connection */
  uint8_t deviceid = MMA8451_readRegister8(MMA8451_REG_WHOAMI);
 800cd68:	200d      	movs	r0, #13
 800cd6a:	f7ff ffdd 	bl	800cd28 <MMA8451_readRegister8>
  if (deviceid != 0x1A)
 800cd6e:	281a      	cmp	r0, #26
 800cd70:	d001      	beq.n	800cd76 <MMA8451_begin+0x16>
  {
    /* No MMA8451 detected ... return false */
    //Serial.println(deviceid, HEX);
    return false;
 800cd72:	2000      	movs	r0, #0
    Serial.println(MMA8451_readRegister8(i), HEX);
  }
  */

  return true;
}
 800cd74:	bd08      	pop	{r3, pc}
  MMA8451_writeRegister8(MMA8451_REG_CTRL_REG2, 0x40); // reset
 800cd76:	2140      	movs	r1, #64	; 0x40
 800cd78:	202b      	movs	r0, #43	; 0x2b
 800cd7a:	f7ff ffbb 	bl	800ccf4 <MMA8451_writeRegister8>
  while (MMA8451_readRegister8(MMA8451_REG_CTRL_REG2) & 0x40);
 800cd7e:	202b      	movs	r0, #43	; 0x2b
 800cd80:	f7ff ffd2 	bl	800cd28 <MMA8451_readRegister8>
 800cd84:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cd88:	d1f9      	bne.n	800cd7e <MMA8451_begin+0x1e>
  MMA8451_writeRegister8(MMA8451_REG_XYZ_DATA_CFG, MMA8451_RANGE_4_G); // | 0x10
 800cd8a:	2101      	movs	r1, #1
 800cd8c:	200e      	movs	r0, #14
 800cd8e:	f7ff ffb1 	bl	800ccf4 <MMA8451_writeRegister8>
  MMA8451_writeRegister8(0x0F, 0x03);
 800cd92:	2103      	movs	r1, #3
 800cd94:	200f      	movs	r0, #15
 800cd96:	f7ff ffad 	bl	800ccf4 <MMA8451_writeRegister8>
  MMA8451_writeRegister8(MMA8451_REG_CTRL_REG2, 0x02);
 800cd9a:	2102      	movs	r1, #2
 800cd9c:	202b      	movs	r0, #43	; 0x2b
 800cd9e:	f7ff ffa9 	bl	800ccf4 <MMA8451_writeRegister8>
  MMA8451_writeRegister8(MMA8451_REG_CTRL_REG4, 0x01);
 800cda2:	2101      	movs	r1, #1
 800cda4:	202d      	movs	r0, #45	; 0x2d
 800cda6:	f7ff ffa5 	bl	800ccf4 <MMA8451_writeRegister8>
  MMA8451_writeRegister8(MMA8451_REG_CTRL_REG5, 0x01);
 800cdaa:	2101      	movs	r1, #1
 800cdac:	202e      	movs	r0, #46	; 0x2e
 800cdae:	f7ff ffa1 	bl	800ccf4 <MMA8451_writeRegister8>
  MMA8451_writeRegister8(MMA8451_REG_PL_CFG, 0x40);
 800cdb2:	2140      	movs	r1, #64	; 0x40
 800cdb4:	2011      	movs	r0, #17
 800cdb6:	f7ff ff9d 	bl	800ccf4 <MMA8451_writeRegister8>
  MMA8451_writeRegister8(MMA8451_REG_CTRL_REG1, 0x01 | 0x04);
 800cdba:	2105      	movs	r1, #5
 800cdbc:	202a      	movs	r0, #42	; 0x2a
 800cdbe:	f7ff ff99 	bl	800ccf4 <MMA8451_writeRegister8>
  return true;
 800cdc2:	2001      	movs	r0, #1
 800cdc4:	bd08      	pop	{r3, pc}
 800cdc6:	bf00      	nop
 800cdc8:	200053b8 	.word	0x200053b8

0800cdcc <MMA8451_read>:

void MMA8451_read(uint8_t* sample) {
 800cdcc:	b410      	push	{r4}


  x = sample[0]; x <<= 8; x |= sample[1]; x >>= 2;
 800cdce:	7803      	ldrb	r3, [r0, #0]
 800cdd0:	492b      	ldr	r1, [pc, #172]	; (800ce80 <MMA8451_read+0xb4>)
 800cdd2:	800b      	strh	r3, [r1, #0]
 800cdd4:	880b      	ldrh	r3, [r1, #0]
 800cdd6:	b21b      	sxth	r3, r3
 800cdd8:	021b      	lsls	r3, r3, #8
 800cdda:	b21b      	sxth	r3, r3
 800cddc:	800b      	strh	r3, [r1, #0]
 800cdde:	7843      	ldrb	r3, [r0, #1]
 800cde0:	880a      	ldrh	r2, [r1, #0]
 800cde2:	b212      	sxth	r2, r2
 800cde4:	4313      	orrs	r3, r2
 800cde6:	800b      	strh	r3, [r1, #0]
 800cde8:	880b      	ldrh	r3, [r1, #0]
 800cdea:	f343 038d 	sbfx	r3, r3, #2, #14
 800cdee:	800b      	strh	r3, [r1, #0]
  y = sample[2]; y <<= 8; y |= sample[3]; y >>= 2;
 800cdf0:	7883      	ldrb	r3, [r0, #2]
 800cdf2:	4a24      	ldr	r2, [pc, #144]	; (800ce84 <MMA8451_read+0xb8>)
 800cdf4:	8013      	strh	r3, [r2, #0]
 800cdf6:	8813      	ldrh	r3, [r2, #0]
 800cdf8:	b21b      	sxth	r3, r3
 800cdfa:	021b      	lsls	r3, r3, #8
 800cdfc:	b21b      	sxth	r3, r3
 800cdfe:	8013      	strh	r3, [r2, #0]
 800ce00:	78c3      	ldrb	r3, [r0, #3]
 800ce02:	8814      	ldrh	r4, [r2, #0]
 800ce04:	b224      	sxth	r4, r4
 800ce06:	4323      	orrs	r3, r4
 800ce08:	8013      	strh	r3, [r2, #0]
 800ce0a:	8813      	ldrh	r3, [r2, #0]
 800ce0c:	f343 038d 	sbfx	r3, r3, #2, #14
 800ce10:	8013      	strh	r3, [r2, #0]
  z = sample[4]; z <<= 8; z |= sample[5]; z >>= 2;
 800ce12:	7904      	ldrb	r4, [r0, #4]
 800ce14:	4b1c      	ldr	r3, [pc, #112]	; (800ce88 <MMA8451_read+0xbc>)
 800ce16:	801c      	strh	r4, [r3, #0]
 800ce18:	881c      	ldrh	r4, [r3, #0]
 800ce1a:	b224      	sxth	r4, r4
 800ce1c:	0224      	lsls	r4, r4, #8
 800ce1e:	b224      	sxth	r4, r4
 800ce20:	801c      	strh	r4, [r3, #0]
 800ce22:	7940      	ldrb	r0, [r0, #5]
 800ce24:	881c      	ldrh	r4, [r3, #0]
 800ce26:	b224      	sxth	r4, r4
 800ce28:	4320      	orrs	r0, r4
 800ce2a:	8018      	strh	r0, [r3, #0]
 800ce2c:	8818      	ldrh	r0, [r3, #0]
 800ce2e:	f340 008d 	sbfx	r0, r0, #2, #14
 800ce32:	8018      	strh	r0, [r3, #0]
//  uint16_t divider = 1;
////  if (range == MMA8451_RANGE_8_G) divider = 1024;
////  if (range == MMA8451_RANGE_4_G) divider = 2048;
//  if (range == MMA8451_RANGE_2_G) divider = 4096;

  x_g = (float)x / 2048;
 800ce34:	8809      	ldrh	r1, [r1, #0]
 800ce36:	b209      	sxth	r1, r1
 800ce38:	ee07 1a90 	vmov	s15, r1
 800ce3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ce40:	eddf 6a12 	vldr	s13, [pc, #72]	; 800ce8c <MMA8451_read+0xc0>
 800ce44:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ce48:	4911      	ldr	r1, [pc, #68]	; (800ce90 <MMA8451_read+0xc4>)
 800ce4a:	ed81 7a00 	vstr	s14, [r1]
  y_g = (float)y / 2048;
 800ce4e:	8812      	ldrh	r2, [r2, #0]
 800ce50:	b212      	sxth	r2, r2
 800ce52:	ee07 2a90 	vmov	s15, r2
 800ce56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ce5a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ce5e:	4a0d      	ldr	r2, [pc, #52]	; (800ce94 <MMA8451_read+0xc8>)
 800ce60:	ed82 7a00 	vstr	s14, [r2]
  z_g = (float)z / 2048;
 800ce64:	881b      	ldrh	r3, [r3, #0]
 800ce66:	b21b      	sxth	r3, r3
 800ce68:	ee07 3a90 	vmov	s15, r3
 800ce6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce70:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ce74:	4b08      	ldr	r3, [pc, #32]	; (800ce98 <MMA8451_read+0xcc>)
 800ce76:	edc3 7a00 	vstr	s15, [r3]

}
 800ce7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce7e:	4770      	bx	lr
 800ce80:	200053a8 	.word	0x200053a8
 800ce84:	200053d4 	.word	0x200053d4
 800ce88:	200053c0 	.word	0x200053c0
 800ce8c:	3a000000 	.word	0x3a000000
 800ce90:	200053d8 	.word	0x200053d8
 800ce94:	200053f4 	.word	0x200053f4
 800ce98:	200053e8 	.word	0x200053e8

0800ce9c <MMA8451_setRange>:
/*!
    @brief  Sets the g range for the accelerometer
*/
/**************************************************************************/
void MMA8451_setRange(mma8451_range_t range)
{
 800ce9c:	b538      	push	{r3, r4, r5, lr}
 800ce9e:	4605      	mov	r5, r0
  uint8_t reg1 = MMA8451_readRegister8(MMA8451_REG_CTRL_REG1);
 800cea0:	202a      	movs	r0, #42	; 0x2a
 800cea2:	f7ff ff41 	bl	800cd28 <MMA8451_readRegister8>
 800cea6:	4604      	mov	r4, r0
  MMA8451_writeRegister8(MMA8451_REG_CTRL_REG1, 0x00);            // deactivate
 800cea8:	2100      	movs	r1, #0
 800ceaa:	202a      	movs	r0, #42	; 0x2a
 800ceac:	f7ff ff22 	bl	800ccf4 <MMA8451_writeRegister8>
  MMA8451_writeRegister8(MMA8451_REG_XYZ_DATA_CFG, (range & 0x3));  // | 0x10
 800ceb0:	f005 0103 	and.w	r1, r5, #3
 800ceb4:	200e      	movs	r0, #14
 800ceb6:	f7ff ff1d 	bl	800ccf4 <MMA8451_writeRegister8>
  MMA8451_writeRegister8(MMA8451_REG_CTRL_REG1, reg1 | 0x01);     // activate
 800ceba:	f044 0101 	orr.w	r1, r4, #1
 800cebe:	b2c9      	uxtb	r1, r1
 800cec0:	202a      	movs	r0, #42	; 0x2a
 800cec2:	f7ff ff17 	bl	800ccf4 <MMA8451_writeRegister8>
 800cec6:	bd38      	pop	{r3, r4, r5, pc}

0800cec8 <calculateAngle>:
  sensor->min_value   = 0;
  sensor->resolution  = 0;
}


void calculateAngle(float x_g, float y_g, float z_g){
 800cec8:	b530      	push	{r4, r5, lr}
 800ceca:	ed2d 8b04 	vpush	{d8-d9}
 800cece:	b085      	sub	sp, #20
 800ced0:	eeb0 8a40 	vmov.f32	s16, s0
 800ced4:	eeb0 9a60 	vmov.f32	s18, s1
 800ced8:	eef0 8a41 	vmov.f32	s17, s2
	float accVector[] = {x_g, y_g, z_g};
 800cedc:	ed8d 0a01 	vstr	s0, [sp, #4]
 800cee0:	edcd 0a02 	vstr	s1, [sp, #8]
 800cee4:	ed8d 1a03 	vstr	s2, [sp, #12]

	arm_dot_prod_f32(accVector,gravityVector,3,&dotProd);
 800cee8:	4c18      	ldr	r4, [pc, #96]	; (800cf4c <calculateAngle+0x84>)
 800ceea:	4623      	mov	r3, r4
 800ceec:	2203      	movs	r2, #3
 800ceee:	4918      	ldr	r1, [pc, #96]	; (800cf50 <calculateAngle+0x88>)
 800cef0:	a801      	add	r0, sp, #4
 800cef2:	f003 fff1 	bl	8010ed8 <arm_dot_prod_f32>

	angle = acos(dotProd/ ( sqrt(x_g*x_g + y_g*y_g + z_g*z_g)));
 800cef6:	6820      	ldr	r0, [r4, #0]
 800cef8:	f7f3 fae6 	bl	80004c8 <__aeabi_f2d>
 800cefc:	4604      	mov	r4, r0
 800cefe:	460d      	mov	r5, r1
 800cf00:	ee28 8a08 	vmul.f32	s16, s16, s16
 800cf04:	ee29 9a09 	vmul.f32	s18, s18, s18
 800cf08:	ee38 8a09 	vadd.f32	s16, s16, s18
 800cf0c:	ee68 8aa8 	vmul.f32	s17, s17, s17
 800cf10:	ee78 7a28 	vadd.f32	s15, s16, s17
 800cf14:	ee17 0a90 	vmov	r0, s15
 800cf18:	f7f3 fad6 	bl	80004c8 <__aeabi_f2d>
 800cf1c:	ec41 0b10 	vmov	d0, r0, r1
 800cf20:	f004 f99a 	bl	8011258 <sqrt>
 800cf24:	ec53 2b10 	vmov	r2, r3, d0
 800cf28:	4620      	mov	r0, r4
 800cf2a:	4629      	mov	r1, r5
 800cf2c:	f7f3 fc4a 	bl	80007c4 <__aeabi_ddiv>
 800cf30:	ec41 0b10 	vmov	d0, r0, r1
 800cf34:	f004 f938 	bl	80111a8 <acos>
 800cf38:	ec51 0b10 	vmov	r0, r1, d0
 800cf3c:	f7f3 fe10 	bl	8000b60 <__aeabi_d2f>
 800cf40:	4b04      	ldr	r3, [pc, #16]	; (800cf54 <calculateAngle+0x8c>)
 800cf42:	6018      	str	r0, [r3, #0]
//	return angle;
}
 800cf44:	b005      	add	sp, #20
 800cf46:	ecbd 8b04 	vpop	{d8-d9}
 800cf4a:	bd30      	pop	{r4, r5, pc}
 800cf4c:	200053bc 	.word	0x200053bc
 800cf50:	20000024 	.word	0x20000024
 800cf54:	200053c8 	.word	0x200053c8

0800cf58 <accelerometerThread>:
void accelerometerThread(void){
 800cf58:	b500      	push	{lr}
 800cf5a:	b083      	sub	sp, #12
	  MMA8451_begin();
 800cf5c:	f7ff ff00 	bl	800cd60 <MMA8451_begin>
	  MMA8451_setRange(MMA8451_RANGE_4_G);
 800cf60:	2001      	movs	r0, #1
 800cf62:	f7ff ff9b 	bl	800ce9c <MMA8451_setRange>
	  osSemaphoreWait (accSampleSemaphoreHandle, osWaitForever);
 800cf66:	f04f 31ff 	mov.w	r1, #4294967295
 800cf6a:	4b14      	ldr	r3, [pc, #80]	; (800cfbc <accelerometerThread+0x64>)
 800cf6c:	6818      	ldr	r0, [r3, #0]
 800cf6e:	f7fd fe79 	bl	800ac64 <osSemaphoreWait>
	  HAL_I2C_Mem_Read_IT(&hi2c2, _i2caddr<<1, MMA8451_REG_OUT_X_MSB, 1, sample, 6);
 800cf72:	4b13      	ldr	r3, [pc, #76]	; (800cfc0 <accelerometerThread+0x68>)
 800cf74:	f993 1000 	ldrsb.w	r1, [r3]
 800cf78:	0049      	lsls	r1, r1, #1
 800cf7a:	b289      	uxth	r1, r1
 800cf7c:	2306      	movs	r3, #6
 800cf7e:	9301      	str	r3, [sp, #4]
 800cf80:	4c10      	ldr	r4, [pc, #64]	; (800cfc4 <accelerometerThread+0x6c>)
 800cf82:	9400      	str	r4, [sp, #0]
 800cf84:	2301      	movs	r3, #1
 800cf86:	461a      	mov	r2, r3
 800cf88:	480f      	ldr	r0, [pc, #60]	; (800cfc8 <accelerometerThread+0x70>)
 800cf8a:	f7f5 ff05 	bl	8002d98 <HAL_I2C_Mem_Read_IT>
	  osDelay(10);
 800cf8e:	200a      	movs	r0, #10
 800cf90:	f7fd fd60 	bl	800aa54 <osDelay>
	  MMA8451_read(sample);
 800cf94:	4620      	mov	r0, r4
 800cf96:	f7ff ff19 	bl	800cdcc <MMA8451_read>
	  calculateAngle(x_g, y_g, z_g);
 800cf9a:	4b0c      	ldr	r3, [pc, #48]	; (800cfcc <accelerometerThread+0x74>)
 800cf9c:	ed93 0a00 	vldr	s0, [r3]
 800cfa0:	4b0b      	ldr	r3, [pc, #44]	; (800cfd0 <accelerometerThread+0x78>)
 800cfa2:	edd3 0a00 	vldr	s1, [r3]
 800cfa6:	4b0b      	ldr	r3, [pc, #44]	; (800cfd4 <accelerometerThread+0x7c>)
 800cfa8:	ed93 1a00 	vldr	s2, [r3]
 800cfac:	f7ff ff8c 	bl	800cec8 <calculateAngle>
	  setCutoffFreq(angle);
 800cfb0:	4b09      	ldr	r3, [pc, #36]	; (800cfd8 <accelerometerThread+0x80>)
 800cfb2:	ed93 0a00 	vldr	s0, [r3]
 800cfb6:	f000 fce5 	bl	800d984 <setCutoffFreq>
 800cfba:	e7d4      	b.n	800cf66 <accelerometerThread+0xe>
 800cfbc:	200053b4 	.word	0x200053b4
 800cfc0:	200053b8 	.word	0x200053b8
 800cfc4:	200053ec 	.word	0x200053ec
 800cfc8:	200055b8 	.word	0x200055b8
 800cfcc:	200053d8 	.word	0x200053d8
 800cfd0:	200053f4 	.word	0x200053f4
 800cfd4:	200053e8 	.word	0x200053e8
 800cfd8:	200053c8 	.word	0x200053c8

0800cfdc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800cfdc:	b500      	push	{lr}
 800cfde:	b087      	sub	sp, #28
  ADC_ChannelConfTypeDef sConfig = {0};
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	9300      	str	r3, [sp, #0]
 800cfe4:	9301      	str	r3, [sp, #4]
 800cfe6:	9302      	str	r3, [sp, #8]
 800cfe8:	9303      	str	r3, [sp, #12]
 800cfea:	9304      	str	r3, [sp, #16]
 800cfec:	9305      	str	r3, [sp, #20]

  /**Common config 
  */
  hadc1.Instance = ADC1;
 800cfee:	4819      	ldr	r0, [pc, #100]	; (800d054 <MX_ADC1_Init+0x78>)
 800cff0:	4a19      	ldr	r2, [pc, #100]	; (800d058 <MX_ADC1_Init+0x7c>)
 800cff2:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800cff4:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800cff6:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800cff8:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800cffa:	6103      	str	r3, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800cffc:	2204      	movs	r2, #4
 800cffe:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800d000:	7603      	strb	r3, [r0, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800d002:	7643      	strb	r3, [r0, #25]
  hadc1.Init.NbrOfConversion = 1;
 800d004:	2201      	movs	r2, #1
 800d006:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800d008:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800d00c:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800d00e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800d010:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800d014:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800d016:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800d01a:	f7f3 ffa7 	bl	8000f6c <HAL_ADC_Init>
 800d01e:	b990      	cbnz	r0, 800d046 <MX_ADC1_Init+0x6a>
  {
    Error_Handler();
  }
  /**Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800d020:	4b0e      	ldr	r3, [pc, #56]	; (800d05c <MX_ADC1_Init+0x80>)
 800d022:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800d024:	2306      	movs	r3, #6
 800d026:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800d028:	2300      	movs	r3, #0
 800d02a:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800d02c:	227f      	movs	r2, #127	; 0x7f
 800d02e:	9203      	str	r2, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800d030:	2204      	movs	r2, #4
 800d032:	9204      	str	r2, [sp, #16]
  sConfig.Offset = 0;
 800d034:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d036:	4669      	mov	r1, sp
 800d038:	4806      	ldr	r0, [pc, #24]	; (800d054 <MX_ADC1_Init+0x78>)
 800d03a:	f7f4 f8a1 	bl	8001180 <HAL_ADC_ConfigChannel>
 800d03e:	b928      	cbnz	r0, 800d04c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
  }

}
 800d040:	b007      	add	sp, #28
 800d042:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800d046:	f001 fe45 	bl	800ecd4 <Error_Handler>
 800d04a:	e7e9      	b.n	800d020 <MX_ADC1_Init+0x44>
    Error_Handler();
 800d04c:	f001 fe42 	bl	800ecd4 <Error_Handler>
}
 800d050:	e7f6      	b.n	800d040 <MX_ADC1_Init+0x64>
 800d052:	bf00      	nop
 800d054:	200053f8 	.word	0x200053f8
 800d058:	50040000 	.word	0x50040000
 800d05c:	0c900008 	.word	0x0c900008

0800d060 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800d060:	b500      	push	{lr}
 800d062:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d064:	2300      	movs	r3, #0
 800d066:	9303      	str	r3, [sp, #12]
 800d068:	9304      	str	r3, [sp, #16]
 800d06a:	9305      	str	r3, [sp, #20]
 800d06c:	9306      	str	r3, [sp, #24]
 800d06e:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 800d070:	6802      	ldr	r2, [r0, #0]
 800d072:	4b12      	ldr	r3, [pc, #72]	; (800d0bc <HAL_ADC_MspInit+0x5c>)
 800d074:	429a      	cmp	r2, r3
 800d076:	d002      	beq.n	800d07e <HAL_ADC_MspInit+0x1e>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800d078:	b009      	add	sp, #36	; 0x24
 800d07a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC_CLK_ENABLE();
 800d07e:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 800d082:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
 800d086:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d088:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d08c:	64da      	str	r2, [r3, #76]	; 0x4c
 800d08e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d090:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800d094:	9201      	str	r2, [sp, #4]
 800d096:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d098:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d09a:	f042 0204 	orr.w	r2, r2, #4
 800d09e:	64da      	str	r2, [r3, #76]	; 0x4c
 800d0a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0a2:	f003 0304 	and.w	r3, r3, #4
 800d0a6:	9302      	str	r3, [sp, #8]
 800d0a8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = HALL_OUTPUT_Pin;
 800d0aa:	2304      	movs	r3, #4
 800d0ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d0ae:	2303      	movs	r3, #3
 800d0b0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(HALL_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 800d0b2:	a903      	add	r1, sp, #12
 800d0b4:	4802      	ldr	r0, [pc, #8]	; (800d0c0 <HAL_ADC_MspInit+0x60>)
 800d0b6:	f7f4 ffb1 	bl	800201c <HAL_GPIO_Init>
}
 800d0ba:	e7dd      	b.n	800d078 <HAL_ADC_MspInit+0x18>
 800d0bc:	50040000 	.word	0x50040000
 800d0c0:	48000800 	.word	0x48000800

0800d0c4 <Setup_Cap_Touch>:

uint8_t leftTouchDebounce = 0;
uint8_t rightTouchDebounce = 0;

/**************** functions ***************************/
void Setup_Cap_Touch(void){
 800d0c4:	b570      	push	{r4, r5, r6, lr}
 800d0c6:	b086      	sub	sp, #24
	uint8_t packet;

	// ungroup all CAP sensors to work individually
	packet = 0x02;
 800d0c8:	ad06      	add	r5, sp, #24
 800d0ca:	2302      	movs	r3, #2
 800d0cc:	f805 3d01 	strb.w	r3, [r5, #-1]!
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, CNFG_REG_4, 1, &packet, 1, 1);
 800d0d0:	4e29      	ldr	r6, [pc, #164]	; (800d178 <Setup_Cap_Touch+0xb4>)
 800d0d2:	2401      	movs	r4, #1
 800d0d4:	9402      	str	r4, [sp, #8]
 800d0d6:	9401      	str	r4, [sp, #4]
 800d0d8:	9500      	str	r5, [sp, #0]
 800d0da:	4623      	mov	r3, r4
 800d0dc:	2240      	movs	r2, #64	; 0x40
 800d0de:	2150      	movs	r1, #80	; 0x50
 800d0e0:	4630      	mov	r0, r6
 800d0e2:	f7f5 fcb3 	bl	8002a4c <HAL_I2C_Mem_Write>

	// device will not block multiple touches
	packet = 0x04;
 800d0e6:	2304      	movs	r3, #4
 800d0e8:	f88d 3017 	strb.w	r3, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, MULT_TOUCH_REG, 1, &packet, 1, 1);
 800d0ec:	9402      	str	r4, [sp, #8]
 800d0ee:	9401      	str	r4, [sp, #4]
 800d0f0:	9500      	str	r5, [sp, #0]
 800d0f2:	4623      	mov	r3, r4
 800d0f4:	222a      	movs	r2, #42	; 0x2a
 800d0f6:	2150      	movs	r1, #80	; 0x50
 800d0f8:	4630      	mov	r0, r6
 800d0fa:	f7f5 fca7 	bl	8002a4c <HAL_I2C_Mem_Write>
	// disable auto-calibration
//	packet = 0x00;
//	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, CALIBRATION_REG, 1, &packet, 1, 1);

	// sensitivity control
	packet = 0x7F;
 800d0fe:	237f      	movs	r3, #127	; 0x7f
 800d100:	f88d 3017 	strb.w	r3, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, DATA_SENS_REG, 1, &packet, 1, 1);
 800d104:	9402      	str	r4, [sp, #8]
 800d106:	9401      	str	r4, [sp, #4]
 800d108:	9500      	str	r5, [sp, #0]
 800d10a:	4623      	mov	r3, r4
 800d10c:	221f      	movs	r2, #31
 800d10e:	2150      	movs	r1, #80	; 0x50
 800d110:	4630      	mov	r0, r6
 800d112:	f7f5 fc9b 	bl	8002a4c <HAL_I2C_Mem_Write>

	// setting button 1 threshold sets all
	packet = 0x93 | 0x40;
 800d116:	23d3      	movs	r3, #211	; 0xd3
 800d118:	f88d 3017 	strb.w	r3, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, RECAL_REG, 1, &packet, 1, 1);
 800d11c:	9402      	str	r4, [sp, #8]
 800d11e:	9401      	str	r4, [sp, #4]
 800d120:	9500      	str	r5, [sp, #0]
 800d122:	4623      	mov	r3, r4
 800d124:	222f      	movs	r2, #47	; 0x2f
 800d126:	2150      	movs	r1, #80	; 0x50
 800d128:	4630      	mov	r0, r6
 800d12a:	f7f5 fc8f 	bl	8002a4c <HAL_I2C_Mem_Write>

	packet = 0x00;
 800d12e:	2200      	movs	r2, #0
 800d130:	f88d 2017 	strb.w	r2, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, MAIN_STATUS, 1, &packet, 1, 1);
 800d134:	9402      	str	r4, [sp, #8]
 800d136:	9401      	str	r4, [sp, #4]
 800d138:	9500      	str	r5, [sp, #0]
 800d13a:	4623      	mov	r3, r4
 800d13c:	2150      	movs	r1, #80	; 0x50
 800d13e:	4630      	mov	r0, r6
 800d140:	f7f5 fc84 	bl	8002a4c <HAL_I2C_Mem_Write>

    packet = 0xFF;
 800d144:	23ff      	movs	r3, #255	; 0xff
 800d146:	f88d 3017 	strb.w	r3, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, 0x4E, 1, &packet, 1, 1);
 800d14a:	9402      	str	r4, [sp, #8]
 800d14c:	9401      	str	r4, [sp, #4]
 800d14e:	9500      	str	r5, [sp, #0]
 800d150:	4623      	mov	r3, r4
 800d152:	224e      	movs	r2, #78	; 0x4e
 800d154:	2150      	movs	r1, #80	; 0x50
 800d156:	4630      	mov	r0, r6
 800d158:	f7f5 fc78 	bl	8002a4c <HAL_I2C_Mem_Write>

    packet = 0x03;
 800d15c:	2303      	movs	r3, #3
 800d15e:	f88d 3017 	strb.w	r3, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, 0x4E, 1, &packet, 1, 1);
 800d162:	9402      	str	r4, [sp, #8]
 800d164:	9401      	str	r4, [sp, #4]
 800d166:	9500      	str	r5, [sp, #0]
 800d168:	4623      	mov	r3, r4
 800d16a:	224e      	movs	r2, #78	; 0x4e
 800d16c:	2150      	movs	r1, #80	; 0x50
 800d16e:	4630      	mov	r0, r6
 800d170:	f7f5 fc6c 	bl	8002a4c <HAL_I2C_Mem_Write>
//		packet = 0x00;
//		HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, 0x00, 1, &packet, 1, 1);
//
//		HAL_I2C_Mem_Read(&hi2c1, CAP1214_ADDR<<1, SENSOR_1_DELTA_CNT, 1, &temp, 14, 1);
//	}
}
 800d174:	b006      	add	sp, #24
 800d176:	bd70      	pop	{r4, r5, r6, pc}
 800d178:	2000556c 	.word	0x2000556c

0800d17c <Reset_Cap_INT>:

	HAL_Delay(1);
	Reset_Cap_INT();
}

void Reset_Cap_INT(void){
 800d17c:	b500      	push	{lr}
 800d17e:	b087      	sub	sp, #28
	uint8_t packet = 0x00;
 800d180:	2200      	movs	r2, #0
 800d182:	a906      	add	r1, sp, #24
 800d184:	f801 2d01 	strb.w	r2, [r1, #-1]!
	HAL_I2C_Mem_Write(&hi2c1, CAP1214_ADDR<<1, 0x00, 1, &packet, 1, 1);
 800d188:	2301      	movs	r3, #1
 800d18a:	9302      	str	r3, [sp, #8]
 800d18c:	9301      	str	r3, [sp, #4]
 800d18e:	9100      	str	r1, [sp, #0]
 800d190:	2150      	movs	r1, #80	; 0x50
 800d192:	4803      	ldr	r0, [pc, #12]	; (800d1a0 <Reset_Cap_INT+0x24>)
 800d194:	f7f5 fc5a 	bl	8002a4c <HAL_I2C_Mem_Write>
}
 800d198:	b007      	add	sp, #28
 800d19a:	f85d fb04 	ldr.w	pc, [sp], #4
 800d19e:	bf00      	nop
 800d1a0:	2000556c 	.word	0x2000556c

0800d1a4 <Read_Cap_Touch>:
void Read_Cap_Touch(void){
 800d1a4:	b500      	push	{lr}
 800d1a6:	b085      	sub	sp, #20
	HAL_I2C_Mem_Read(&hi2c1, CAP1214_ADDR<<1, 0x03, 1, cap_read, 2, 2);
 800d1a8:	2302      	movs	r3, #2
 800d1aa:	9302      	str	r3, [sp, #8]
 800d1ac:	9301      	str	r3, [sp, #4]
 800d1ae:	4b08      	ldr	r3, [pc, #32]	; (800d1d0 <Read_Cap_Touch+0x2c>)
 800d1b0:	9300      	str	r3, [sp, #0]
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	2203      	movs	r2, #3
 800d1b6:	2150      	movs	r1, #80	; 0x50
 800d1b8:	4806      	ldr	r0, [pc, #24]	; (800d1d4 <Read_Cap_Touch+0x30>)
 800d1ba:	f7f5 fd19 	bl	8002bf0 <HAL_I2C_Mem_Read>
	HAL_Delay(1);
 800d1be:	2001      	movs	r0, #1
 800d1c0:	f7f3 fec4 	bl	8000f4c <HAL_Delay>
	Reset_Cap_INT();
 800d1c4:	f7ff ffda 	bl	800d17c <Reset_Cap_INT>
}
 800d1c8:	b005      	add	sp, #20
 800d1ca:	f85d fb04 	ldr.w	pc, [sp], #4
 800d1ce:	bf00      	nop
 800d1d0:	20005460 	.word	0x20005460
 800d1d4:	2000556c 	.word	0x2000556c

0800d1d8 <Sample_Cap_Touch>:


//// reads cap touch sense binary values from CAP1214 IC and
////    turns on corresponding LEDs
void Sample_Cap_Touch(void){
 800d1d8:	b508      	push	{r3, lr}
//  uint8_t start_DMA = 0;
//  uint8_t start_DMA_2 = 0;

  Reset_Cap_INT();
 800d1da:	f7ff ffcf 	bl	800d17c <Reset_Cap_INT>
 800d1de:	e0b2      	b.n	800d346 <Sample_Cap_Touch+0x16e>
    Read_Cap_Touch();
    taskEXIT_CRITICAL();

    if(isButtonEnabled() == 1){

      if( (cap_read[KEY_1_PORT] & KEY_1_PIN) == KEY_1_PIN){
 800d1e0:	4baf      	ldr	r3, [pc, #700]	; (800d4a0 <Sample_Cap_Touch+0x2c8>)
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	f013 0f02 	tst.w	r3, #2
 800d1e8:	f000 80c5 	beq.w	800d376 <Sample_Cap_Touch+0x19e>
	  Set_LED(CAP_1_LED_PORT, CAP_1_LED_PIN, 1);
 800d1ec:	2201      	movs	r2, #1
 800d1ee:	2120      	movs	r1, #32
 800d1f0:	2003      	movs	r0, #3
 800d1f2:	f001 fb09 	bl	800e808 <Set_LED>
 800d1f6:	e0be      	b.n	800d376 <Sample_Cap_Touch+0x19e>
      }
      }
      else{
	      if(LED_State(CAP_1_LED_PORT, CAP_1_LED_PIN)){
		      Set_LED(CAP_1_LED_PORT, CAP_1_LED_PIN, 0);
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	2120      	movs	r1, #32
 800d1fc:	2003      	movs	r0, #3
 800d1fe:	f001 fb03 	bl	800e808 <Set_LED>
 800d202:	e0b8      	b.n	800d376 <Sample_Cap_Touch+0x19e>

      if( (cap_read[KEY_2_PORT] & KEY_2_PIN) == KEY_2_PIN){
	      Set_LED(CAP_2_LED_PORT, CAP_2_LED_PIN, 1);
      }
      else{
	      if(LED_State(CAP_2_LED_PORT, CAP_2_LED_PIN)){
 800d204:	2110      	movs	r1, #16
 800d206:	2003      	movs	r0, #3
 800d208:	f001 fb12 	bl	800e830 <LED_State>
 800d20c:	2800      	cmp	r0, #0
 800d20e:	f000 80bd 	beq.w	800d38c <Sample_Cap_Touch+0x1b4>
		      Set_LED(CAP_2_LED_PORT, CAP_2_LED_PIN, 0);
 800d212:	2200      	movs	r2, #0
 800d214:	2110      	movs	r1, #16
 800d216:	2003      	movs	r0, #3
 800d218:	f001 faf6 	bl	800e808 <Set_LED>
 800d21c:	e0b6      	b.n	800d38c <Sample_Cap_Touch+0x1b4>

      if( (cap_read[KEY_3_PORT] & KEY_3_PIN) == KEY_3_PIN){
	      Set_LED(CAP_3_LED_PORT, CAP_3_LED_PIN, 1);
      }
      else{
	      if(LED_State(CAP_3_LED_PORT, CAP_3_LED_PIN)){
 800d21e:	2108      	movs	r1, #8
 800d220:	2003      	movs	r0, #3
 800d222:	f001 fb05 	bl	800e830 <LED_State>
 800d226:	2800      	cmp	r0, #0
 800d228:	f000 80bb 	beq.w	800d3a2 <Sample_Cap_Touch+0x1ca>
		      Set_LED(CAP_3_LED_PORT, CAP_3_LED_PIN, 0);
 800d22c:	2200      	movs	r2, #0
 800d22e:	2108      	movs	r1, #8
 800d230:	2003      	movs	r0, #3
 800d232:	f001 fae9 	bl	800e808 <Set_LED>
 800d236:	e0b4      	b.n	800d3a2 <Sample_Cap_Touch+0x1ca>

      if( (cap_read[KEY_4_PORT] & KEY_4_PIN) == KEY_4_PIN){
	      Set_LED(CAP_4_LED_PORT, CAP_4_LED_PIN, 1);
      }
      else{
	      if(LED_State(CAP_4_LED_PORT, CAP_4_LED_PIN)){
 800d238:	2104      	movs	r1, #4
 800d23a:	2003      	movs	r0, #3
 800d23c:	f001 faf8 	bl	800e830 <LED_State>
 800d240:	2800      	cmp	r0, #0
 800d242:	f000 80b9 	beq.w	800d3b8 <Sample_Cap_Touch+0x1e0>
		      Set_LED(CAP_4_LED_PORT, CAP_4_LED_PIN, 0);
 800d246:	2200      	movs	r2, #0
 800d248:	2104      	movs	r1, #4
 800d24a:	2003      	movs	r0, #3
 800d24c:	f001 fadc 	bl	800e808 <Set_LED>
 800d250:	e0b2      	b.n	800d3b8 <Sample_Cap_Touch+0x1e0>

      if( (cap_read[KEY_5_PORT] & KEY_5_PIN) == KEY_5_PIN){
	      Set_LED(CAP_5_LED_PORT, CAP_5_LED_PIN, 1);
      }
      else{
	      if(LED_State(CAP_5_LED_PORT, CAP_5_LED_PIN)){
 800d252:	2102      	movs	r1, #2
 800d254:	2003      	movs	r0, #3
 800d256:	f001 faeb 	bl	800e830 <LED_State>
 800d25a:	2800      	cmp	r0, #0
 800d25c:	f000 80b7 	beq.w	800d3ce <Sample_Cap_Touch+0x1f6>
		      Set_LED(CAP_5_LED_PORT, CAP_5_LED_PIN, 0);
 800d260:	2200      	movs	r2, #0
 800d262:	2102      	movs	r1, #2
 800d264:	2003      	movs	r0, #3
 800d266:	f001 facf 	bl	800e808 <Set_LED>
 800d26a:	e0b0      	b.n	800d3ce <Sample_Cap_Touch+0x1f6>

      if( (cap_read[KEY_6_PORT] & KEY_6_PIN) == KEY_6_PIN){
	      Set_LED(CAP_6_LED_PORT, CAP_6_LED_PIN, 1);
      }
      else{
	      if(LED_State(CAP_6_LED_PORT, CAP_6_LED_PIN)){
 800d26c:	2101      	movs	r1, #1
 800d26e:	2003      	movs	r0, #3
 800d270:	f001 fade 	bl	800e830 <LED_State>
 800d274:	2800      	cmp	r0, #0
 800d276:	f000 80b5 	beq.w	800d3e4 <Sample_Cap_Touch+0x20c>
		      Set_LED(CAP_6_LED_PORT, CAP_6_LED_PIN, 0);
 800d27a:	2200      	movs	r2, #0
 800d27c:	2101      	movs	r1, #1
 800d27e:	2003      	movs	r0, #3
 800d280:	f001 fac2 	bl	800e808 <Set_LED>
 800d284:	e0ae      	b.n	800d3e4 <Sample_Cap_Touch+0x20c>

      if( (cap_read[KEY_7_PORT] & KEY_7_PIN) == KEY_7_PIN){
	      Set_LED(CAP_7_LED_PORT, CAP_7_LED_PIN, 1);
      }
      else{
	      if(LED_State(CAP_7_LED_PORT, CAP_7_LED_PIN)){
 800d286:	2180      	movs	r1, #128	; 0x80
 800d288:	2002      	movs	r0, #2
 800d28a:	f001 fad1 	bl	800e830 <LED_State>
 800d28e:	2800      	cmp	r0, #0
 800d290:	f000 80b3 	beq.w	800d3fa <Sample_Cap_Touch+0x222>
		      Set_LED(CAP_7_LED_PORT, CAP_7_LED_PIN, 0);
 800d294:	2200      	movs	r2, #0
 800d296:	2180      	movs	r1, #128	; 0x80
 800d298:	2002      	movs	r0, #2
 800d29a:	f001 fab5 	bl	800e808 <Set_LED>
 800d29e:	e0ac      	b.n	800d3fa <Sample_Cap_Touch+0x222>

      if( (cap_read[KEY_8_PORT] & KEY_8_PIN) == KEY_8_PIN){
	      Set_LED(CAP_8_LED_PORT, CAP_8_LED_PIN, 1);
      }
      else{
	      if(LED_State(CAP_8_LED_PORT, CAP_8_LED_PIN)){
 800d2a0:	2140      	movs	r1, #64	; 0x40
 800d2a2:	2002      	movs	r0, #2
 800d2a4:	f001 fac4 	bl	800e830 <LED_State>
 800d2a8:	2800      	cmp	r0, #0
 800d2aa:	f000 80b1 	beq.w	800d410 <Sample_Cap_Touch+0x238>
		      Set_LED(CAP_8_LED_PORT, CAP_8_LED_PIN, 0);
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	2140      	movs	r1, #64	; 0x40
 800d2b2:	2002      	movs	r0, #2
 800d2b4:	f001 faa8 	bl	800e808 <Set_LED>
 800d2b8:	e0aa      	b.n	800d410 <Sample_Cap_Touch+0x238>

      if( (cap_read[KEY_9_PORT] & KEY_9_PIN) == KEY_9_PIN){
	      Set_LED(CAP_9_LED_PORT, CAP_9_LED_PIN, 1);
      }
      else{
	      if(LED_State(CAP_9_LED_PORT, CAP_9_LED_PIN)){
 800d2ba:	2120      	movs	r1, #32
 800d2bc:	2002      	movs	r0, #2
 800d2be:	f001 fab7 	bl	800e830 <LED_State>
 800d2c2:	2800      	cmp	r0, #0
 800d2c4:	f000 80af 	beq.w	800d426 <Sample_Cap_Touch+0x24e>
		      Set_LED(CAP_9_LED_PORT, CAP_9_LED_PIN, 0);
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	2120      	movs	r1, #32
 800d2cc:	2002      	movs	r0, #2
 800d2ce:	f001 fa9b 	bl	800e808 <Set_LED>
 800d2d2:	e0a8      	b.n	800d426 <Sample_Cap_Touch+0x24e>

      if( (cap_read[KEY_10_PORT] & KEY_10_PIN) == KEY_10_PIN){
	      Set_LED(CAP_10_LED_PORT, CAP_10_LED_PIN, 1);
      }
      else{
	      if(LED_State(CAP_10_LED_PORT, CAP_10_LED_PIN)){
 800d2d4:	2110      	movs	r1, #16
 800d2d6:	2002      	movs	r0, #2
 800d2d8:	f001 faaa 	bl	800e830 <LED_State>
 800d2dc:	2800      	cmp	r0, #0
 800d2de:	f000 80ad 	beq.w	800d43c <Sample_Cap_Touch+0x264>
		      Set_LED(CAP_10_LED_PORT, CAP_10_LED_PIN, 0);
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	2110      	movs	r1, #16
 800d2e6:	2002      	movs	r0, #2
 800d2e8:	f001 fa8e 	bl	800e808 <Set_LED>
 800d2ec:	e0a6      	b.n	800d43c <Sample_Cap_Touch+0x264>

      if( (cap_read[KEY_11_PORT] & KEY_11_PIN) == KEY_11_PIN){
	      Set_LED(CAP_11_LED_PORT, CAP_11_LED_PIN, 1);
      }
      else{
	      if(LED_State(CAP_11_LED_PORT, CAP_11_LED_PIN)){
 800d2ee:	2108      	movs	r1, #8
 800d2f0:	2002      	movs	r0, #2
 800d2f2:	f001 fa9d 	bl	800e830 <LED_State>
 800d2f6:	2800      	cmp	r0, #0
 800d2f8:	f000 80ab 	beq.w	800d452 <Sample_Cap_Touch+0x27a>
		      Set_LED(CAP_11_LED_PORT, CAP_11_LED_PIN, 0);
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	2108      	movs	r1, #8
 800d300:	2002      	movs	r0, #2
 800d302:	f001 fa81 	bl	800e808 <Set_LED>
 800d306:	e0a4      	b.n	800d452 <Sample_Cap_Touch+0x27a>

      if( (cap_read[KEY_12_PORT] & KEY_12_PIN) == KEY_12_PIN){
	      Set_LED(CAP_12_LED_PORT, CAP_12_LED_PIN, 1);
      }
      else{
	      if(LED_State(CAP_12_LED_PORT, CAP_12_LED_PIN)){
 800d308:	2104      	movs	r1, #4
 800d30a:	2002      	movs	r0, #2
 800d30c:	f001 fa90 	bl	800e830 <LED_State>
 800d310:	2800      	cmp	r0, #0
 800d312:	f000 80a9 	beq.w	800d468 <Sample_Cap_Touch+0x290>
		      Set_LED(CAP_12_LED_PORT, CAP_12_LED_PIN, 0);
 800d316:	2200      	movs	r2, #0
 800d318:	2104      	movs	r1, #4
 800d31a:	2002      	movs	r0, #2
 800d31c:	f001 fa74 	bl	800e808 <Set_LED>
 800d320:	e0a2      	b.n	800d468 <Sample_Cap_Touch+0x290>
		      decrementOctave();
		      leftTouchDebounce = 1;
	      }
      }
      else{
	      if(leftTouchDebounce){
 800d322:	4b60      	ldr	r3, [pc, #384]	; (800d4a4 <Sample_Cap_Touch+0x2cc>)
 800d324:	781b      	ldrb	r3, [r3, #0]
 800d326:	b113      	cbz	r3, 800d32e <Sample_Cap_Touch+0x156>
		      leftTouchDebounce = 0;
 800d328:	2200      	movs	r2, #0
 800d32a:	4b5e      	ldr	r3, [pc, #376]	; (800d4a4 <Sample_Cap_Touch+0x2cc>)
 800d32c:	701a      	strb	r2, [r3, #0]
	      }
      }

      if( (cap_read[RIGHT_BUTTON_PORT] & RIGHT_BUTTON_PIN) == RIGHT_BUTTON_PIN){
 800d32e:	4b5c      	ldr	r3, [pc, #368]	; (800d4a0 <Sample_Cap_Touch+0x2c8>)
 800d330:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800d334:	2b00      	cmp	r3, #0
 800d336:	f2c0 80a8 	blt.w	800d48a <Sample_Cap_Touch+0x2b2>
		      incrementOctave();
		      rightTouchDebounce = 1;
	      }
      }
      else{
	      if(rightTouchDebounce){
 800d33a:	4b5b      	ldr	r3, [pc, #364]	; (800d4a8 <Sample_Cap_Touch+0x2d0>)
 800d33c:	781b      	ldrb	r3, [r3, #0]
 800d33e:	b113      	cbz	r3, 800d346 <Sample_Cap_Touch+0x16e>
		      rightTouchDebounce = 0;
 800d340:	2200      	movs	r2, #0
 800d342:	4b59      	ldr	r3, [pc, #356]	; (800d4a8 <Sample_Cap_Touch+0x2d0>)
 800d344:	701a      	strb	r2, [r3, #0]
    osSemaphoreWait (capSampleSemaphoreHandle, osWaitForever);
 800d346:	f04f 31ff 	mov.w	r1, #4294967295
 800d34a:	4b58      	ldr	r3, [pc, #352]	; (800d4ac <Sample_Cap_Touch+0x2d4>)
 800d34c:	6818      	ldr	r0, [r3, #0]
 800d34e:	f7fd fc89 	bl	800ac64 <osSemaphoreWait>
    taskENTER_CRITICAL();
 800d352:	f7fd fd9f 	bl	800ae94 <vPortEnterCritical>
    Read_Cap_Touch();
 800d356:	f7ff ff25 	bl	800d1a4 <Read_Cap_Touch>
    taskEXIT_CRITICAL();
 800d35a:	f7fd fdbd 	bl	800aed8 <vPortExitCritical>
    if(isButtonEnabled() == 1){
 800d35e:	f001 fd1d 	bl	800ed9c <isButtonEnabled>
 800d362:	2801      	cmp	r0, #1
 800d364:	f43f af3c 	beq.w	800d1e0 <Sample_Cap_Touch+0x8>
	      if(LED_State(CAP_1_LED_PORT, CAP_1_LED_PIN)){
 800d368:	2120      	movs	r1, #32
 800d36a:	2003      	movs	r0, #3
 800d36c:	f001 fa60 	bl	800e830 <LED_State>
 800d370:	2800      	cmp	r0, #0
 800d372:	f47f af41 	bne.w	800d1f8 <Sample_Cap_Touch+0x20>
      if( (cap_read[KEY_2_PORT] & KEY_2_PIN) == KEY_2_PIN){
 800d376:	4b4a      	ldr	r3, [pc, #296]	; (800d4a0 <Sample_Cap_Touch+0x2c8>)
 800d378:	781b      	ldrb	r3, [r3, #0]
 800d37a:	f013 0f04 	tst.w	r3, #4
 800d37e:	f43f af41 	beq.w	800d204 <Sample_Cap_Touch+0x2c>
	      Set_LED(CAP_2_LED_PORT, CAP_2_LED_PIN, 1);
 800d382:	2201      	movs	r2, #1
 800d384:	2110      	movs	r1, #16
 800d386:	2003      	movs	r0, #3
 800d388:	f001 fa3e 	bl	800e808 <Set_LED>
      if( (cap_read[KEY_3_PORT] & KEY_3_PIN) == KEY_3_PIN){
 800d38c:	4b44      	ldr	r3, [pc, #272]	; (800d4a0 <Sample_Cap_Touch+0x2c8>)
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	f013 0f08 	tst.w	r3, #8
 800d394:	f43f af43 	beq.w	800d21e <Sample_Cap_Touch+0x46>
	      Set_LED(CAP_3_LED_PORT, CAP_3_LED_PIN, 1);
 800d398:	2201      	movs	r2, #1
 800d39a:	2108      	movs	r1, #8
 800d39c:	2003      	movs	r0, #3
 800d39e:	f001 fa33 	bl	800e808 <Set_LED>
      if( (cap_read[KEY_4_PORT] & KEY_4_PIN) == KEY_4_PIN){
 800d3a2:	4b3f      	ldr	r3, [pc, #252]	; (800d4a0 <Sample_Cap_Touch+0x2c8>)
 800d3a4:	781b      	ldrb	r3, [r3, #0]
 800d3a6:	f013 0f10 	tst.w	r3, #16
 800d3aa:	f43f af45 	beq.w	800d238 <Sample_Cap_Touch+0x60>
	      Set_LED(CAP_4_LED_PORT, CAP_4_LED_PIN, 1);
 800d3ae:	2201      	movs	r2, #1
 800d3b0:	2104      	movs	r1, #4
 800d3b2:	2003      	movs	r0, #3
 800d3b4:	f001 fa28 	bl	800e808 <Set_LED>
      if( (cap_read[KEY_5_PORT] & KEY_5_PIN) == KEY_5_PIN){
 800d3b8:	4b39      	ldr	r3, [pc, #228]	; (800d4a0 <Sample_Cap_Touch+0x2c8>)
 800d3ba:	781b      	ldrb	r3, [r3, #0]
 800d3bc:	f013 0f20 	tst.w	r3, #32
 800d3c0:	f43f af47 	beq.w	800d252 <Sample_Cap_Touch+0x7a>
	      Set_LED(CAP_5_LED_PORT, CAP_5_LED_PIN, 1);
 800d3c4:	2201      	movs	r2, #1
 800d3c6:	2102      	movs	r1, #2
 800d3c8:	2003      	movs	r0, #3
 800d3ca:	f001 fa1d 	bl	800e808 <Set_LED>
      if( (cap_read[KEY_6_PORT] & KEY_6_PIN) == KEY_6_PIN){
 800d3ce:	4b34      	ldr	r3, [pc, #208]	; (800d4a0 <Sample_Cap_Touch+0x2c8>)
 800d3d0:	785b      	ldrb	r3, [r3, #1]
 800d3d2:	f013 0f01 	tst.w	r3, #1
 800d3d6:	f43f af49 	beq.w	800d26c <Sample_Cap_Touch+0x94>
	      Set_LED(CAP_6_LED_PORT, CAP_6_LED_PIN, 1);
 800d3da:	2201      	movs	r2, #1
 800d3dc:	4611      	mov	r1, r2
 800d3de:	2003      	movs	r0, #3
 800d3e0:	f001 fa12 	bl	800e808 <Set_LED>
      if( (cap_read[KEY_7_PORT] & KEY_7_PIN) == KEY_7_PIN){
 800d3e4:	4b2e      	ldr	r3, [pc, #184]	; (800d4a0 <Sample_Cap_Touch+0x2c8>)
 800d3e6:	785b      	ldrb	r3, [r3, #1]
 800d3e8:	f013 0f02 	tst.w	r3, #2
 800d3ec:	f43f af4b 	beq.w	800d286 <Sample_Cap_Touch+0xae>
	      Set_LED(CAP_7_LED_PORT, CAP_7_LED_PIN, 1);
 800d3f0:	2201      	movs	r2, #1
 800d3f2:	2180      	movs	r1, #128	; 0x80
 800d3f4:	2002      	movs	r0, #2
 800d3f6:	f001 fa07 	bl	800e808 <Set_LED>
      if( (cap_read[KEY_8_PORT] & KEY_8_PIN) == KEY_8_PIN){
 800d3fa:	4b29      	ldr	r3, [pc, #164]	; (800d4a0 <Sample_Cap_Touch+0x2c8>)
 800d3fc:	785b      	ldrb	r3, [r3, #1]
 800d3fe:	f013 0f04 	tst.w	r3, #4
 800d402:	f43f af4d 	beq.w	800d2a0 <Sample_Cap_Touch+0xc8>
	      Set_LED(CAP_8_LED_PORT, CAP_8_LED_PIN, 1);
 800d406:	2201      	movs	r2, #1
 800d408:	2140      	movs	r1, #64	; 0x40
 800d40a:	2002      	movs	r0, #2
 800d40c:	f001 f9fc 	bl	800e808 <Set_LED>
      if( (cap_read[KEY_9_PORT] & KEY_9_PIN) == KEY_9_PIN){
 800d410:	4b23      	ldr	r3, [pc, #140]	; (800d4a0 <Sample_Cap_Touch+0x2c8>)
 800d412:	785b      	ldrb	r3, [r3, #1]
 800d414:	f013 0f08 	tst.w	r3, #8
 800d418:	f43f af4f 	beq.w	800d2ba <Sample_Cap_Touch+0xe2>
	      Set_LED(CAP_9_LED_PORT, CAP_9_LED_PIN, 1);
 800d41c:	2201      	movs	r2, #1
 800d41e:	2120      	movs	r1, #32
 800d420:	2002      	movs	r0, #2
 800d422:	f001 f9f1 	bl	800e808 <Set_LED>
      if( (cap_read[KEY_10_PORT] & KEY_10_PIN) == KEY_10_PIN){
 800d426:	4b1e      	ldr	r3, [pc, #120]	; (800d4a0 <Sample_Cap_Touch+0x2c8>)
 800d428:	785b      	ldrb	r3, [r3, #1]
 800d42a:	f013 0f10 	tst.w	r3, #16
 800d42e:	f43f af51 	beq.w	800d2d4 <Sample_Cap_Touch+0xfc>
	      Set_LED(CAP_10_LED_PORT, CAP_10_LED_PIN, 1);
 800d432:	2201      	movs	r2, #1
 800d434:	2110      	movs	r1, #16
 800d436:	2002      	movs	r0, #2
 800d438:	f001 f9e6 	bl	800e808 <Set_LED>
      if( (cap_read[KEY_11_PORT] & KEY_11_PIN) == KEY_11_PIN){
 800d43c:	4b18      	ldr	r3, [pc, #96]	; (800d4a0 <Sample_Cap_Touch+0x2c8>)
 800d43e:	785b      	ldrb	r3, [r3, #1]
 800d440:	f013 0f20 	tst.w	r3, #32
 800d444:	f43f af53 	beq.w	800d2ee <Sample_Cap_Touch+0x116>
	      Set_LED(CAP_11_LED_PORT, CAP_11_LED_PIN, 1);
 800d448:	2201      	movs	r2, #1
 800d44a:	2108      	movs	r1, #8
 800d44c:	2002      	movs	r0, #2
 800d44e:	f001 f9db 	bl	800e808 <Set_LED>
      if( (cap_read[KEY_12_PORT] & KEY_12_PIN) == KEY_12_PIN){
 800d452:	4b13      	ldr	r3, [pc, #76]	; (800d4a0 <Sample_Cap_Touch+0x2c8>)
 800d454:	785b      	ldrb	r3, [r3, #1]
 800d456:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d45a:	f43f af55 	beq.w	800d308 <Sample_Cap_Touch+0x130>
	      Set_LED(CAP_12_LED_PORT, CAP_12_LED_PIN, 1);
 800d45e:	2201      	movs	r2, #1
 800d460:	2104      	movs	r1, #4
 800d462:	2002      	movs	r0, #2
 800d464:	f001 f9d0 	bl	800e808 <Set_LED>
      if( (cap_read[LEFT_BUTTON_PORT] & LEFT_BUTTON_PIN) == LEFT_BUTTON_PIN){
 800d468:	4b0d      	ldr	r3, [pc, #52]	; (800d4a0 <Sample_Cap_Touch+0x2c8>)
 800d46a:	781b      	ldrb	r3, [r3, #0]
 800d46c:	f013 0f01 	tst.w	r3, #1
 800d470:	f43f af57 	beq.w	800d322 <Sample_Cap_Touch+0x14a>
	      if(leftTouchDebounce == 0){
 800d474:	4b0b      	ldr	r3, [pc, #44]	; (800d4a4 <Sample_Cap_Touch+0x2cc>)
 800d476:	781b      	ldrb	r3, [r3, #0]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	f47f af58 	bne.w	800d32e <Sample_Cap_Touch+0x156>
		      decrementOctave();
 800d47e:	f003 fc6b 	bl	8010d58 <decrementOctave>
		      leftTouchDebounce = 1;
 800d482:	2201      	movs	r2, #1
 800d484:	4b07      	ldr	r3, [pc, #28]	; (800d4a4 <Sample_Cap_Touch+0x2cc>)
 800d486:	701a      	strb	r2, [r3, #0]
 800d488:	e751      	b.n	800d32e <Sample_Cap_Touch+0x156>
	      if(rightTouchDebounce == 0){
 800d48a:	4b07      	ldr	r3, [pc, #28]	; (800d4a8 <Sample_Cap_Touch+0x2d0>)
 800d48c:	781b      	ldrb	r3, [r3, #0]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	f47f af59 	bne.w	800d346 <Sample_Cap_Touch+0x16e>
		      incrementOctave();
 800d494:	f003 fc52 	bl	8010d3c <incrementOctave>
		      rightTouchDebounce = 1;
 800d498:	2201      	movs	r2, #1
 800d49a:	4b03      	ldr	r3, [pc, #12]	; (800d4a8 <Sample_Cap_Touch+0x2d0>)
 800d49c:	701a      	strb	r2, [r3, #0]
 800d49e:	e752      	b.n	800d346 <Sample_Cap_Touch+0x16e>
 800d4a0:	20005460 	.word	0x20005460
 800d4a4:	20005084 	.word	0x20005084
 800d4a8:	20005085 	.word	0x20005085
 800d4ac:	20005468 	.word	0x20005468

0800d4b0 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 800d4b0:	b508      	push	{r3, lr}

  hcomp1.Instance = COMP1;
 800d4b2:	480c      	ldr	r0, [pc, #48]	; (800d4e4 <MX_COMP1_Init+0x34>)
 800d4b4:	4b0c      	ldr	r3, [pc, #48]	; (800d4e8 <MX_COMP1_Init+0x38>)
 800d4b6:	6003      	str	r3, [r0, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_3_4VREFINT;
 800d4b8:	4b0c      	ldr	r3, [pc, #48]	; (800d4ec <MX_COMP1_Init+0x3c>)
 800d4ba:	6103      	str	r3, [r0, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 800d4bc:	2380      	movs	r3, #128	; 0x80
 800d4be:	60c3      	str	r3, [r0, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	6183      	str	r3, [r0, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_HIGH;
 800d4c4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800d4c8:	6142      	str	r2, [r0, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800d4ca:	61c3      	str	r3, [r0, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_ULTRALOWPOWER;
 800d4cc:	220c      	movs	r2, #12
 800d4ce:	6082      	str	r2, [r0, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800d4d0:	6043      	str	r3, [r0, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_FALLING;
 800d4d2:	2321      	movs	r3, #33	; 0x21
 800d4d4:	6203      	str	r3, [r0, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800d4d6:	f7f4 f897 	bl	8001608 <HAL_COMP_Init>
 800d4da:	b900      	cbnz	r0, 800d4de <MX_COMP1_Init+0x2e>
 800d4dc:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 800d4de:	f001 fbf9 	bl	800ecd4 <Error_Handler>
  }

}
 800d4e2:	e7fb      	b.n	800d4dc <MX_COMP1_Init+0x2c>
 800d4e4:	2000546c 	.word	0x2000546c
 800d4e8:	40010200 	.word	0x40010200
 800d4ec:	00c00020 	.word	0x00c00020

0800d4f0 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 800d4f0:	b500      	push	{lr}
 800d4f2:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	9301      	str	r3, [sp, #4]
 800d4f8:	9302      	str	r3, [sp, #8]
 800d4fa:	9303      	str	r3, [sp, #12]
 800d4fc:	9304      	str	r3, [sp, #16]
 800d4fe:	9305      	str	r3, [sp, #20]
  if(compHandle->Instance==COMP1)
 800d500:	6802      	ldr	r2, [r0, #0]
 800d502:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d506:	f503 3381 	add.w	r3, r3, #66048	; 0x10200
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d002      	beq.n	800d514 <HAL_COMP_MspInit+0x24>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 800d50e:	b007      	add	sp, #28
 800d510:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d514:	f503 3387 	add.w	r3, r3, #69120	; 0x10e00
 800d518:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d51a:	f042 0202 	orr.w	r2, r2, #2
 800d51e:	64da      	str	r2, [r3, #76]	; 0x4c
 800d520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d522:	f003 0302 	and.w	r3, r3, #2
 800d526:	9300      	str	r3, [sp, #0]
 800d528:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800d52a:	2304      	movs	r3, #4
 800d52c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d52e:	2303      	movs	r3, #3
 800d530:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d532:	a901      	add	r1, sp, #4
 800d534:	4805      	ldr	r0, [pc, #20]	; (800d54c <HAL_COMP_MspInit+0x5c>)
 800d536:	f7f4 fd71 	bl	800201c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(COMP_IRQn, 5, 0);
 800d53a:	2200      	movs	r2, #0
 800d53c:	2105      	movs	r1, #5
 800d53e:	2040      	movs	r0, #64	; 0x40
 800d540:	f7f4 f996 	bl	8001870 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 800d544:	2040      	movs	r0, #64	; 0x40
 800d546:	f7f4 f9c5 	bl	80018d4 <HAL_NVIC_EnableIRQ>
}
 800d54a:	e7e0      	b.n	800d50e <HAL_COMP_MspInit+0x1e>
 800d54c:	48000400 	.word	0x48000400

0800d550 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800d550:	b500      	push	{lr}
 800d552:	b08b      	sub	sp, #44	; 0x2c
  DAC_ChannelConfTypeDef sConfig = {0};
 800d554:	2228      	movs	r2, #40	; 0x28
 800d556:	2100      	movs	r1, #0
 800d558:	4668      	mov	r0, sp
 800d55a:	f003 fd32 	bl	8010fc2 <memset>

  /**DAC Initialization 
  */
  hdac1.Instance = DAC1;
 800d55e:	4814      	ldr	r0, [pc, #80]	; (800d5b0 <MX_DAC1_Init+0x60>)
 800d560:	4b14      	ldr	r3, [pc, #80]	; (800d5b4 <MX_DAC1_Init+0x64>)
 800d562:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800d564:	f7f4 f9c2 	bl	80018ec <HAL_DAC_Init>
 800d568:	b9c0      	cbnz	r0, 800d59c <MX_DAC1_Init+0x4c>
  {
    Error_Handler();
  }
  /**DAC channel OUT1 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800d56a:	2200      	movs	r2, #0
 800d56c:	9201      	str	r2, [sp, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800d56e:	2316      	movs	r3, #22
 800d570:	9302      	str	r3, [sp, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800d572:	2302      	movs	r3, #2
 800d574:	9300      	str	r3, [sp, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800d576:	9203      	str	r2, [sp, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800d578:	9204      	str	r2, [sp, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800d57a:	9205      	str	r2, [sp, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800d57c:	4669      	mov	r1, sp
 800d57e:	480c      	ldr	r0, [pc, #48]	; (800d5b0 <MX_DAC1_Init+0x60>)
 800d580:	f7f4 facc 	bl	8001b1c <HAL_DAC_ConfigChannel>
 800d584:	b968      	cbnz	r0, 800d5a2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
  }
  /**DAC channel OUT2 config 
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800d586:	2300      	movs	r3, #0
 800d588:	9304      	str	r3, [sp, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800d58a:	2210      	movs	r2, #16
 800d58c:	4669      	mov	r1, sp
 800d58e:	4808      	ldr	r0, [pc, #32]	; (800d5b0 <MX_DAC1_Init+0x60>)
 800d590:	f7f4 fac4 	bl	8001b1c <HAL_DAC_ConfigChannel>
 800d594:	b940      	cbnz	r0, 800d5a8 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
  }

}
 800d596:	b00b      	add	sp, #44	; 0x2c
 800d598:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800d59c:	f001 fb9a 	bl	800ecd4 <Error_Handler>
 800d5a0:	e7e3      	b.n	800d56a <MX_DAC1_Init+0x1a>
    Error_Handler();
 800d5a2:	f001 fb97 	bl	800ecd4 <Error_Handler>
 800d5a6:	e7ee      	b.n	800d586 <MX_DAC1_Init+0x36>
    Error_Handler();
 800d5a8:	f001 fb94 	bl	800ecd4 <Error_Handler>
}
 800d5ac:	e7f3      	b.n	800d596 <MX_DAC1_Init+0x46>
 800d5ae:	bf00      	nop
 800d5b0:	20005498 	.word	0x20005498
 800d5b4:	40007400 	.word	0x40007400

0800d5b8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800d5b8:	b510      	push	{r4, lr}
 800d5ba:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d5bc:	2300      	movs	r3, #0
 800d5be:	9303      	str	r3, [sp, #12]
 800d5c0:	9304      	str	r3, [sp, #16]
 800d5c2:	9305      	str	r3, [sp, #20]
 800d5c4:	9306      	str	r3, [sp, #24]
 800d5c6:	9307      	str	r3, [sp, #28]
  if(dacHandle->Instance==DAC1)
 800d5c8:	6802      	ldr	r2, [r0, #0]
 800d5ca:	4b25      	ldr	r3, [pc, #148]	; (800d660 <HAL_DAC_MspInit+0xa8>)
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	d001      	beq.n	800d5d4 <HAL_DAC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800d5d0:	b008      	add	sp, #32
 800d5d2:	bd10      	pop	{r4, pc}
 800d5d4:	4604      	mov	r4, r0
    __HAL_RCC_DAC1_CLK_ENABLE();
 800d5d6:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
 800d5da:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d5dc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800d5e0:	659a      	str	r2, [r3, #88]	; 0x58
 800d5e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d5e4:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800d5e8:	9201      	str	r2, [sp, #4]
 800d5ea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d5ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d5ee:	f042 0201 	orr.w	r2, r2, #1
 800d5f2:	64da      	str	r2, [r3, #76]	; 0x4c
 800d5f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d5f6:	f003 0301 	and.w	r3, r3, #1
 800d5fa:	9302      	str	r3, [sp, #8]
 800d5fc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800d5fe:	2330      	movs	r3, #48	; 0x30
 800d600:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d602:	2303      	movs	r3, #3
 800d604:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d606:	a903      	add	r1, sp, #12
 800d608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d60c:	f7f4 fd06 	bl	800201c <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 800d610:	4814      	ldr	r0, [pc, #80]	; (800d664 <HAL_DAC_MspInit+0xac>)
 800d612:	4b15      	ldr	r3, [pc, #84]	; (800d668 <HAL_DAC_MspInit+0xb0>)
 800d614:	6003      	str	r3, [r0, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 800d616:	2306      	movs	r3, #6
 800d618:	6043      	str	r3, [r0, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d61a:	2310      	movs	r3, #16
 800d61c:	6083      	str	r3, [r0, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800d61e:	2300      	movs	r3, #0
 800d620:	60c3      	str	r3, [r0, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800d622:	2280      	movs	r2, #128	; 0x80
 800d624:	6102      	str	r2, [r0, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800d626:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d62a:	6142      	str	r2, [r0, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800d62c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d630:	6182      	str	r2, [r0, #24]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 800d632:	61c3      	str	r3, [r0, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800d634:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d638:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800d63a:	f7f4 fb9d 	bl	8001d78 <HAL_DMA_Init>
 800d63e:	b958      	cbnz	r0, 800d658 <HAL_DAC_MspInit+0xa0>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 800d640:	4b08      	ldr	r3, [pc, #32]	; (800d664 <HAL_DAC_MspInit+0xac>)
 800d642:	60a3      	str	r3, [r4, #8]
 800d644:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800d646:	2200      	movs	r2, #0
 800d648:	2105      	movs	r1, #5
 800d64a:	2036      	movs	r0, #54	; 0x36
 800d64c:	f7f4 f910 	bl	8001870 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800d650:	2036      	movs	r0, #54	; 0x36
 800d652:	f7f4 f93f 	bl	80018d4 <HAL_NVIC_EnableIRQ>
}
 800d656:	e7bb      	b.n	800d5d0 <HAL_DAC_MspInit+0x18>
      Error_Handler();
 800d658:	f001 fb3c 	bl	800ecd4 <Error_Handler>
 800d65c:	e7f0      	b.n	800d640 <HAL_DAC_MspInit+0x88>
 800d65e:	bf00      	nop
 800d660:	40007400 	.word	0x40007400
 800d664:	200054ac 	.word	0x200054ac
 800d668:	40020008 	.word	0x40020008

0800d66c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800d66c:	b500      	push	{lr}
 800d66e:	b083      	sub	sp, #12
  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800d670:	4b0e      	ldr	r3, [pc, #56]	; (800d6ac <MX_DMA_Init+0x40>)
 800d672:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d674:	f042 0204 	orr.w	r2, r2, #4
 800d678:	649a      	str	r2, [r3, #72]	; 0x48
 800d67a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d67c:	f002 0204 	and.w	r2, r2, #4
 800d680:	9200      	str	r2, [sp, #0]
 800d682:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800d684:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d686:	f042 0201 	orr.w	r2, r2, #1
 800d68a:	649a      	str	r2, [r3, #72]	; 0x48
 800d68c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d68e:	f003 0301 	and.w	r3, r3, #1
 800d692:	9301      	str	r3, [sp, #4]
 800d694:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 7, 0);
 800d696:	2200      	movs	r2, #0
 800d698:	2107      	movs	r1, #7
 800d69a:	200b      	movs	r0, #11
 800d69c:	f7f4 f8e8 	bl	8001870 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800d6a0:	200b      	movs	r0, #11
 800d6a2:	f7f4 f917 	bl	80018d4 <HAL_NVIC_EnableIRQ>

}
 800d6a6:	b003      	add	sp, #12
 800d6a8:	f85d fb04 	ldr.w	pc, [sp], #4
 800d6ac:	40021000 	.word	0x40021000

0800d6b0 <resetFilter>:

	arm_biquad_cascade_df1_init_q15(&filter_instance, NUM_STAGES, coef[FILTER_VALS-1], filter_state, bit_shift[FILTER_VALS-1]);

}

void resetFilter(void){
 800d6b0:	4770      	bx	lr
	...

0800d6b4 <adjustFilterCutoff>:
}



// ref: http://shepazu.github.io/Audio-EQ-Cookbook/audio-eq-cookbook.html
void adjustFilterCutoff(float desired_cutoff){
 800d6b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6b8:	ed2d 8b02 	vpush	{d8}
  if(desired_cutoff > MAX_CUTOFF_FREQ){
 800d6bc:	eddf 7a4f 	vldr	s15, [pc, #316]	; 800d7fc <adjustFilterCutoff+0x148>
 800d6c0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800d6c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6c8:	dd01      	ble.n	800d6ce <adjustFilterCutoff+0x1a>
      desired_cutoff = MAX_CUTOFF_FREQ;
 800d6ca:	eeb0 0a67 	vmov.f32	s0, s15
  }

  if(desired_cutoff == current_cutoff){
 800d6ce:	4b4c      	ldr	r3, [pc, #304]	; (800d800 <adjustFilterCutoff+0x14c>)
 800d6d0:	edd3 7a00 	vldr	s15, [r3]
 800d6d4:	eeb4 0a67 	vcmp.f32	s0, s15
 800d6d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6dc:	f000 808a 	beq.w	800d7f4 <adjustFilterCutoff+0x140>
        return;
    }

  current_cutoff = desired_cutoff;
 800d6e0:	ed83 0a00 	vstr	s0, [r3]

  // calculate omega_not
  omega = 2 * PI * current_cutoff / ((float) SAMPLING_FREQ);
 800d6e4:	eddf 7a47 	vldr	s15, [pc, #284]	; 800d804 <adjustFilterCutoff+0x150>
 800d6e8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d6ec:	eddf 7a46 	vldr	s15, [pc, #280]	; 800d808 <adjustFilterCutoff+0x154>
 800d6f0:	ee80 7a27 	vdiv.f32	s14, s0, s15
 800d6f4:	ee17 0a10 	vmov	r0, s14
 800d6f8:	f7f2 fee6 	bl	80004c8 <__aeabi_f2d>
 800d6fc:	ec41 0b18 	vmov	d8, r0, r1
 800d700:	4b42      	ldr	r3, [pc, #264]	; (800d80c <adjustFilterCutoff+0x158>)
 800d702:	e9c3 0100 	strd	r0, r1, [r3]

  // precalculate sin and cos of omega
  cos_omega = cos(omega);
 800d706:	ec41 0b10 	vmov	d0, r0, r1
 800d70a:	f003 fc79 	bl	8011000 <cos>
 800d70e:	ec51 0b10 	vmov	r0, r1, d0
 800d712:	f7f3 fa25 	bl	8000b60 <__aeabi_d2f>
 800d716:	4606      	mov	r6, r0
 800d718:	4b3d      	ldr	r3, [pc, #244]	; (800d810 <adjustFilterCutoff+0x15c>)
 800d71a:	6018      	str	r0, [r3, #0]
  sin_omega = sin(omega);
 800d71c:	eeb0 0a48 	vmov.f32	s0, s16
 800d720:	eef0 0a68 	vmov.f32	s1, s17
 800d724:	f003 fcf8 	bl	8011118 <sin>
 800d728:	ec51 0b10 	vmov	r0, r1, d0
 800d72c:	f7f3 fa18 	bl	8000b60 <__aeabi_d2f>
 800d730:	4604      	mov	r4, r0
 800d732:	4b38      	ldr	r3, [pc, #224]	; (800d814 <adjustFilterCutoff+0x160>)
 800d734:	6018      	str	r0, [r3, #0]

  // calculate alpha
  alpha = sin_omega/ (2.0*Q);
 800d736:	4b38      	ldr	r3, [pc, #224]	; (800d818 <adjustFilterCutoff+0x164>)
 800d738:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d73c:	4602      	mov	r2, r0
 800d73e:	460b      	mov	r3, r1
 800d740:	f7f2 fd64 	bl	800020c <__adddf3>
 800d744:	4680      	mov	r8, r0
 800d746:	4689      	mov	r9, r1
 800d748:	4620      	mov	r0, r4
 800d74a:	f7f2 febd 	bl	80004c8 <__aeabi_f2d>
 800d74e:	4642      	mov	r2, r8
 800d750:	464b      	mov	r3, r9
 800d752:	f7f3 f837 	bl	80007c4 <__aeabi_ddiv>
 800d756:	4682      	mov	sl, r0
 800d758:	468b      	mov	fp, r1
 800d75a:	4b30      	ldr	r3, [pc, #192]	; (800d81c <adjustFilterCutoff+0x168>)
 800d75c:	e9c3 ab00 	strd	sl, fp, [r3]

  // calculate coefficients and normalize by a_0
  a_0 = 1 + alpha;
 800d760:	2200      	movs	r2, #0
 800d762:	4b2f      	ldr	r3, [pc, #188]	; (800d820 <adjustFilterCutoff+0x16c>)
 800d764:	f7f2 fd52 	bl	800020c <__adddf3>
 800d768:	4604      	mov	r4, r0
 800d76a:	460d      	mov	r5, r1
 800d76c:	4b2d      	ldr	r3, [pc, #180]	; (800d824 <adjustFilterCutoff+0x170>)
 800d76e:	e9c3 4500 	strd	r4, r5, [r3]

  b_0 = ((1.0 - cos_omega) / 2.0) / a_0;
 800d772:	4630      	mov	r0, r6
 800d774:	f7f2 fea8 	bl	80004c8 <__aeabi_f2d>
 800d778:	4606      	mov	r6, r0
 800d77a:	460f      	mov	r7, r1
 800d77c:	4602      	mov	r2, r0
 800d77e:	460b      	mov	r3, r1
 800d780:	2000      	movs	r0, #0
 800d782:	4927      	ldr	r1, [pc, #156]	; (800d820 <adjustFilterCutoff+0x16c>)
 800d784:	f7f2 fd40 	bl	8000208 <__aeabi_dsub>
 800d788:	4680      	mov	r8, r0
 800d78a:	4689      	mov	r9, r1
 800d78c:	2200      	movs	r2, #0
 800d78e:	4b26      	ldr	r3, [pc, #152]	; (800d828 <adjustFilterCutoff+0x174>)
 800d790:	f7f2 feee 	bl	8000570 <__aeabi_dmul>
 800d794:	4622      	mov	r2, r4
 800d796:	462b      	mov	r3, r5
 800d798:	f7f3 f814 	bl	80007c4 <__aeabi_ddiv>
 800d79c:	ec41 0b18 	vmov	d8, r0, r1
 800d7a0:	4b22      	ldr	r3, [pc, #136]	; (800d82c <adjustFilterCutoff+0x178>)
 800d7a2:	e9c3 0100 	strd	r0, r1, [r3]
  b_1 = (1.0 - cos_omega) / a_0;
 800d7a6:	4622      	mov	r2, r4
 800d7a8:	462b      	mov	r3, r5
 800d7aa:	4640      	mov	r0, r8
 800d7ac:	4649      	mov	r1, r9
 800d7ae:	f7f3 f809 	bl	80007c4 <__aeabi_ddiv>
 800d7b2:	4b1f      	ldr	r3, [pc, #124]	; (800d830 <adjustFilterCutoff+0x17c>)
 800d7b4:	e9c3 0100 	strd	r0, r1, [r3]
  b_2 = b_0;
 800d7b8:	4b1e      	ldr	r3, [pc, #120]	; (800d834 <adjustFilterCutoff+0x180>)
 800d7ba:	ed83 8b00 	vstr	d8, [r3]
  a_1 = (-2.0 * cos_omega) / a_0;
 800d7be:	2200      	movs	r2, #0
 800d7c0:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800d7c4:	4630      	mov	r0, r6
 800d7c6:	4639      	mov	r1, r7
 800d7c8:	f7f2 fed2 	bl	8000570 <__aeabi_dmul>
 800d7cc:	4622      	mov	r2, r4
 800d7ce:	462b      	mov	r3, r5
 800d7d0:	f7f2 fff8 	bl	80007c4 <__aeabi_ddiv>
 800d7d4:	4b18      	ldr	r3, [pc, #96]	; (800d838 <adjustFilterCutoff+0x184>)
 800d7d6:	e9c3 0100 	strd	r0, r1, [r3]
  a_2 = (1.0 - alpha) / a_0;
 800d7da:	4652      	mov	r2, sl
 800d7dc:	465b      	mov	r3, fp
 800d7de:	2000      	movs	r0, #0
 800d7e0:	490f      	ldr	r1, [pc, #60]	; (800d820 <adjustFilterCutoff+0x16c>)
 800d7e2:	f7f2 fd11 	bl	8000208 <__aeabi_dsub>
 800d7e6:	4622      	mov	r2, r4
 800d7e8:	462b      	mov	r3, r5
 800d7ea:	f7f2 ffeb 	bl	80007c4 <__aeabi_ddiv>
 800d7ee:	4b13      	ldr	r3, [pc, #76]	; (800d83c <adjustFilterCutoff+0x188>)
 800d7f0:	e9c3 0100 	strd	r0, r1, [r3]
}
 800d7f4:	ecbd 8b02 	vpop	{d8}
 800d7f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7fc:	467a0000 	.word	0x467a0000
 800d800:	20000038 	.word	0x20000038
 800d804:	40c90fdb 	.word	0x40c90fdb
 800d808:	471c4000 	.word	0x471c4000
 800d80c:	200050c8 	.word	0x200050c8
 800d810:	200050c0 	.word	0x200050c0
 800d814:	200050d0 	.word	0x200050d0
 800d818:	20000030 	.word	0x20000030
 800d81c:	200050a0 	.word	0x200050a0
 800d820:	3ff00000 	.word	0x3ff00000
 800d824:	20005088 	.word	0x20005088
 800d828:	3fe00000 	.word	0x3fe00000
 800d82c:	200050a8 	.word	0x200050a8
 800d830:	200050b0 	.word	0x200050b0
 800d834:	200050b8 	.word	0x200050b8
 800d838:	20005090 	.word	0x20005090
 800d83c:	20005098 	.word	0x20005098

0800d840 <applyCustomFilter>:

void applyCustomFilter(q15_t* input_buffer, q15_t* output_buffer, uint16_t size){
 800d840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d844:	b083      	sub	sp, #12
 800d846:	4682      	mov	sl, r0
 800d848:	4689      	mov	r9, r1
 800d84a:	4690      	mov	r8, r2
  for(uint16_t i = 0; i < size; i++){
 800d84c:	2400      	movs	r4, #0
 800d84e:	e05f      	b.n	800d910 <applyCustomFilter+0xd0>
      output_buffer[i] = b_0 * input_buffer[i]
 800d850:	f93a 0014 	ldrsh.w	r0, [sl, r4, lsl #1]
 800d854:	f7f2 fe26 	bl	80004a4 <__aeabi_i2d>
 800d858:	4b30      	ldr	r3, [pc, #192]	; (800d91c <applyCustomFilter+0xdc>)
 800d85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d85e:	f7f2 fe87 	bl	8000570 <__aeabi_dmul>
 800d862:	4606      	mov	r6, r0
 800d864:	460f      	mov	r7, r1
		      + b_1 * x_1
 800d866:	4d2e      	ldr	r5, [pc, #184]	; (800d920 <applyCustomFilter+0xe0>)
 800d868:	8828      	ldrh	r0, [r5, #0]
 800d86a:	f7f2 fe1b 	bl	80004a4 <__aeabi_i2d>
 800d86e:	4b2d      	ldr	r3, [pc, #180]	; (800d924 <applyCustomFilter+0xe4>)
 800d870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d874:	f7f2 fe7c 	bl	8000570 <__aeabi_dmul>
 800d878:	4602      	mov	r2, r0
 800d87a:	460b      	mov	r3, r1
 800d87c:	4630      	mov	r0, r6
 800d87e:	4639      	mov	r1, r7
 800d880:	f7f2 fcc4 	bl	800020c <__adddf3>
 800d884:	4606      	mov	r6, r0
 800d886:	460f      	mov	r7, r1
		      + b_2 * x_2
 800d888:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 800d93c <applyCustomFilter+0xfc>
 800d88c:	f8bb 0000 	ldrh.w	r0, [fp]
 800d890:	f7f2 fe08 	bl	80004a4 <__aeabi_i2d>
 800d894:	4b24      	ldr	r3, [pc, #144]	; (800d928 <applyCustomFilter+0xe8>)
 800d896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d89a:	f7f2 fe69 	bl	8000570 <__aeabi_dmul>
 800d89e:	4602      	mov	r2, r0
 800d8a0:	460b      	mov	r3, r1
 800d8a2:	4630      	mov	r0, r6
 800d8a4:	4639      	mov	r1, r7
 800d8a6:	f7f2 fcb1 	bl	800020c <__adddf3>
 800d8aa:	e9cd 0100 	strd	r0, r1, [sp]
		      - a_1 * y_1
 800d8ae:	4e1f      	ldr	r6, [pc, #124]	; (800d92c <applyCustomFilter+0xec>)
 800d8b0:	8830      	ldrh	r0, [r6, #0]
 800d8b2:	f7f2 fdf7 	bl	80004a4 <__aeabi_i2d>
 800d8b6:	4b1e      	ldr	r3, [pc, #120]	; (800d930 <applyCustomFilter+0xf0>)
 800d8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8bc:	f7f2 fe58 	bl	8000570 <__aeabi_dmul>
 800d8c0:	4602      	mov	r2, r0
 800d8c2:	460b      	mov	r3, r1
 800d8c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d8c8:	f7f2 fc9e 	bl	8000208 <__aeabi_dsub>
 800d8cc:	e9cd 0100 	strd	r0, r1, [sp]
		      - a_2 * y_2;
 800d8d0:	4f18      	ldr	r7, [pc, #96]	; (800d934 <applyCustomFilter+0xf4>)
 800d8d2:	8838      	ldrh	r0, [r7, #0]
 800d8d4:	f7f2 fde6 	bl	80004a4 <__aeabi_i2d>
 800d8d8:	4b17      	ldr	r3, [pc, #92]	; (800d938 <applyCustomFilter+0xf8>)
 800d8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8de:	f7f2 fe47 	bl	8000570 <__aeabi_dmul>
 800d8e2:	4602      	mov	r2, r0
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d8ea:	f7f2 fc8d 	bl	8000208 <__aeabi_dsub>
      output_buffer[i] = b_0 * input_buffer[i]
 800d8ee:	f7f3 f8ef 	bl	8000ad0 <__aeabi_d2iz>
 800d8f2:	f829 0014 	strh.w	r0, [r9, r4, lsl #1]
      x_2 = x_1;
 800d8f6:	882b      	ldrh	r3, [r5, #0]
 800d8f8:	f8ab 3000 	strh.w	r3, [fp]
      x_1 = input_buffer[i];
 800d8fc:	f83a 3014 	ldrh.w	r3, [sl, r4, lsl #1]
 800d900:	802b      	strh	r3, [r5, #0]
      y_2 = y_1;
 800d902:	8833      	ldrh	r3, [r6, #0]
 800d904:	803b      	strh	r3, [r7, #0]
      y_1 = output_buffer[i];
 800d906:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
 800d90a:	8033      	strh	r3, [r6, #0]
  for(uint16_t i = 0; i < size; i++){
 800d90c:	3401      	adds	r4, #1
 800d90e:	b2a4      	uxth	r4, r4
 800d910:	4544      	cmp	r4, r8
 800d912:	d39d      	bcc.n	800d850 <applyCustomFilter+0x10>
  }
}
 800d914:	b003      	add	sp, #12
 800d916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d91a:	bf00      	nop
 800d91c:	200050a8 	.word	0x200050a8
 800d920:	200050d4 	.word	0x200050d4
 800d924:	200050b0 	.word	0x200050b0
 800d928:	200050b8 	.word	0x200050b8
 800d92c:	200050d8 	.word	0x200050d8
 800d930:	20005090 	.word	0x20005090
 800d934:	200050da 	.word	0x200050da
 800d938:	20005098 	.word	0x20005098
 800d93c:	200050d6 	.word	0x200050d6

0800d940 <angleToCutoffFreq>:

	double new_cutoff = angleToCutoffFreq(inputAngle);
	adjustFilterCutoff(new_cutoff);
}

double angleToCutoffFreq(float inputAngle){
 800d940:	b508      	push	{r3, lr}
  return 16000 * expf(-1.01966 * inputAngle);
 800d942:	ee10 0a10 	vmov	r0, s0
 800d946:	f7f2 fdbf 	bl	80004c8 <__aeabi_f2d>
 800d94a:	a30c      	add	r3, pc, #48	; (adr r3, 800d97c <angleToCutoffFreq+0x3c>)
 800d94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d950:	f7f2 fe0e 	bl	8000570 <__aeabi_dmul>
 800d954:	f7f3 f904 	bl	8000b60 <__aeabi_d2f>
 800d958:	ee00 0a10 	vmov	s0, r0
 800d95c:	f003 fcd6 	bl	801130c <expf>
 800d960:	eddf 7a05 	vldr	s15, [pc, #20]	; 800d978 <angleToCutoffFreq+0x38>
 800d964:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d968:	ee17 0a90 	vmov	r0, s15
 800d96c:	f7f2 fdac 	bl	80004c8 <__aeabi_f2d>
}
 800d970:	ec41 0b10 	vmov	d0, r0, r1
 800d974:	bd08      	pop	{r3, pc}
 800d976:	bf00      	nop
 800d978:	467a0000 	.word	0x467a0000
 800d97c:	0110a138 	.word	0x0110a138
 800d980:	bff05087 	.word	0xbff05087

0800d984 <setCutoffFreq>:
	if(pastVal == inputAngle) return;
 800d984:	4b11      	ldr	r3, [pc, #68]	; (800d9cc <setCutoffFreq+0x48>)
 800d986:	781b      	ldrb	r3, [r3, #0]
 800d988:	b2db      	uxtb	r3, r3
 800d98a:	ee07 3a90 	vmov	s15, r3
 800d98e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d992:	eef4 7a40 	vcmp.f32	s15, s0
 800d996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d99a:	d100      	bne.n	800d99e <setCutoffFreq+0x1a>
 800d99c:	4770      	bx	lr
void setCutoffFreq(float inputAngle){
 800d99e:	b500      	push	{lr}
 800d9a0:	b083      	sub	sp, #12
	pastVal = inputAngle;
 800d9a2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800d9a6:	edcd 7a01 	vstr	s15, [sp, #4]
 800d9aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d9ae:	4a07      	ldr	r2, [pc, #28]	; (800d9cc <setCutoffFreq+0x48>)
 800d9b0:	7013      	strb	r3, [r2, #0]
	double new_cutoff = angleToCutoffFreq(inputAngle);
 800d9b2:	f7ff ffc5 	bl	800d940 <angleToCutoffFreq>
	adjustFilterCutoff(new_cutoff);
 800d9b6:	ec51 0b10 	vmov	r0, r1, d0
 800d9ba:	f7f3 f8d1 	bl	8000b60 <__aeabi_d2f>
 800d9be:	ee00 0a10 	vmov	s0, r0
 800d9c2:	f7ff fe77 	bl	800d6b4 <adjustFilterCutoff>
}
 800d9c6:	b003      	add	sp, #12
 800d9c8:	f85d fb04 	ldr.w	pc, [sp], #4
 800d9cc:	2000003c 	.word	0x2000003c

0800d9d0 <changeQ>:

void changeQ(double new_Q){
  Q = new_Q;
 800d9d0:	4b01      	ldr	r3, [pc, #4]	; (800d9d8 <changeQ+0x8>)
 800d9d2:	ed83 0b00 	vstr	d0, [r3]
 800d9d6:	4770      	bx	lr
 800d9d8:	20000030 	.word	0x20000030

0800d9dc <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b096      	sub	sp, #88	; 0x58

  /* USER CODE BEGIN StartDefaultTask */
  osMutexDef (LED_mutex);    // Declare mutex
 800d9e0:	2500      	movs	r5, #0
 800d9e2:	a816      	add	r0, sp, #88	; 0x58
 800d9e4:	f840 5d04 	str.w	r5, [r0, #-4]!
  LED_mutex_id = osMutexCreate(osMutex(LED_mutex));
 800d9e8:	f7fd f8ba 	bl	800ab60 <osMutexCreate>
 800d9ec:	4b30      	ldr	r3, [pc, #192]	; (800dab0 <StartDefaultTask+0xd4>)
 800d9ee:	6018      	str	r0, [r3, #0]

  osMutexDef (I2C3_mutex);    // Declare mutex
 800d9f0:	a816      	add	r0, sp, #88	; 0x58
 800d9f2:	f840 5d08 	str.w	r5, [r0, #-8]!
  I2C3_mutex_id = osMutexCreate(osMutex(I2C3_mutex));
 800d9f6:	f7fd f8b3 	bl	800ab60 <osMutexCreate>
 800d9fa:	4b2e      	ldr	r3, [pc, #184]	; (800dab4 <StartDefaultTask+0xd8>)
 800d9fc:	6018      	str	r0, [r3, #0]
  osMutexWait(I2C3_mutex_id, 5);
 800d9fe:	2105      	movs	r1, #5
 800da00:	f7fd f8b4 	bl	800ab6c <osMutexWait>

  osSemaphoreDef(capSampleSemaphore);
 800da04:	a816      	add	r0, sp, #88	; 0x58
 800da06:	f840 5d0c 	str.w	r5, [r0, #-12]!
  capSampleSemaphoreHandle = osSemaphoreCreate (osSemaphore(capSampleSemaphore), 1);
 800da0a:	2101      	movs	r1, #1
 800da0c:	f7fd f914 	bl	800ac38 <osSemaphoreCreate>
 800da10:	4b29      	ldr	r3, [pc, #164]	; (800dab8 <StartDefaultTask+0xdc>)
 800da12:	6018      	str	r0, [r3, #0]
  osSemaphoreWait( capSampleSemaphoreHandle, 1);
 800da14:	2101      	movs	r1, #1
 800da16:	f7fd f925 	bl	800ac64 <osSemaphoreWait>

  osSemaphoreDef(lidarSampleReadySemaphore);
 800da1a:	a816      	add	r0, sp, #88	; 0x58
 800da1c:	f840 5d10 	str.w	r5, [r0, #-16]!
  lidarSampleReadySemaphoreHandle = osSemaphoreCreate (osSemaphore(lidarSampleReadySemaphore), 1);
 800da20:	2101      	movs	r1, #1
 800da22:	f7fd f909 	bl	800ac38 <osSemaphoreCreate>
 800da26:	4b25      	ldr	r3, [pc, #148]	; (800dabc <StartDefaultTask+0xe0>)
 800da28:	6018      	str	r0, [r3, #0]
  osSemaphoreWait( lidarSampleReadySemaphoreHandle, 1);
 800da2a:	2101      	movs	r1, #1
 800da2c:	f7fd f91a 	bl	800ac64 <osSemaphoreWait>

  osSemaphoreDef(accSampleSemaphore);
 800da30:	a816      	add	r0, sp, #88	; 0x58
 800da32:	f840 5d14 	str.w	r5, [r0, #-20]!
  accSampleSemaphoreHandle = osSemaphoreCreate (osSemaphore(accSampleSemaphore), 1);
 800da36:	2101      	movs	r1, #1
 800da38:	f7fd f8fe 	bl	800ac38 <osSemaphoreCreate>
 800da3c:	4b20      	ldr	r3, [pc, #128]	; (800dac0 <StartDefaultTask+0xe4>)
 800da3e:	6018      	str	r0, [r3, #0]
  osSemaphoreWait( accSampleSemaphoreHandle, 1);
 800da40:	2101      	movs	r1, #1
 800da42:	f7fd f90f 	bl	800ac64 <osSemaphoreWait>

  osTimerDef(accSampleTimer, accGiveSemaphore);
 800da46:	a816      	add	r0, sp, #88	; 0x58
 800da48:	4b1e      	ldr	r3, [pc, #120]	; (800dac4 <StartDefaultTask+0xe8>)
 800da4a:	f840 3d18 	str.w	r3, [r0, #-24]!
  accSampleTimerHandle = osTimerCreate(osTimer(accSampleTimer), osTimerPeriodic, (void *)0);
 800da4e:	462a      	mov	r2, r5
 800da50:	2101      	movs	r1, #1
 800da52:	f7fd f809 	bl	800aa68 <osTimerCreate>
 800da56:	4b1c      	ldr	r3, [pc, #112]	; (800dac8 <StartDefaultTask+0xec>)
 800da58:	6018      	str	r0, [r3, #0]

  osThreadDef(lidarMeasurementTask, LidarMeasurement, osPriorityLow, 0, 256);
 800da5a:	4c1c      	ldr	r4, [pc, #112]	; (800dacc <StartDefaultTask+0xf0>)
 800da5c:	ae0b      	add	r6, sp, #44	; 0x2c
 800da5e:	4627      	mov	r7, r4
 800da60:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800da62:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	6033      	str	r3, [r6, #0]
  lidarMeasurementHandle = osThreadCreate(osThread(lidarMeasurementTask), NULL);
 800da68:	4629      	mov	r1, r5
 800da6a:	a80b      	add	r0, sp, #44	; 0x2c
 800da6c:	f7fc ffd8 	bl	800aa20 <osThreadCreate>
 800da70:	4b17      	ldr	r3, [pc, #92]	; (800dad0 <StartDefaultTask+0xf4>)
 800da72:	6018      	str	r0, [r3, #0]
//
  osThreadDef(capSampleTask, Sample_Cap_Touch, osPriorityLow, 0, 256);
 800da74:	ae06      	add	r6, sp, #24
 800da76:	f104 0714 	add.w	r7, r4, #20
 800da7a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800da7c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	6033      	str	r3, [r6, #0]
  capSampleHandle = osThreadCreate(osThread(capSampleTask), NULL);
 800da82:	4629      	mov	r1, r5
 800da84:	a806      	add	r0, sp, #24
 800da86:	f7fc ffcb 	bl	800aa20 <osThreadCreate>
 800da8a:	4b12      	ldr	r3, [pc, #72]	; (800dad4 <StartDefaultTask+0xf8>)
 800da8c:	6018      	str	r0, [r3, #0]

  osThreadDef(accSampleTask, accelerometerThread, osPriorityLow, 0, 256);
 800da8e:	ae01      	add	r6, sp, #4
 800da90:	3428      	adds	r4, #40	; 0x28
 800da92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800da94:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800da96:	6823      	ldr	r3, [r4, #0]
 800da98:	6033      	str	r3, [r6, #0]
  accSampleHandle = osThreadCreate(osThread(accSampleTask), NULL);
 800da9a:	4629      	mov	r1, r5
 800da9c:	a801      	add	r0, sp, #4
 800da9e:	f7fc ffbf 	bl	800aa20 <osThreadCreate>
 800daa2:	4b0d      	ldr	r3, [pc, #52]	; (800dad8 <StartDefaultTask+0xfc>)
 800daa4:	6018      	str	r0, [r3, #0]
  //osTimerStart(capSampleTimerHandle, 40);

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800daa6:	2001      	movs	r0, #1
 800daa8:	f7fc ffd4 	bl	800aa54 <osDelay>
 800daac:	e7fb      	b.n	800daa6 <StartDefaultTask+0xca>
 800daae:	bf00      	nop
 800dab0:	200053d0 	.word	0x200053d0
 800dab4:	200053ac 	.word	0x200053ac
 800dab8:	20005468 	.word	0x20005468
 800dabc:	20005518 	.word	0x20005518
 800dac0:	200053b4 	.word	0x200053b4
 800dac4:	0800cce5 	.word	0x0800cce5
 800dac8:	200053cc 	.word	0x200053cc
 800dacc:	08012c28 	.word	0x08012c28
 800dad0:	2000551c 	.word	0x2000551c
 800dad4:	20005514 	.word	0x20005514
 800dad8:	20005510 	.word	0x20005510

0800dadc <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 800dadc:	b530      	push	{r4, r5, lr}
 800dade:	b087      	sub	sp, #28
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800dae0:	ac01      	add	r4, sp, #4
 800dae2:	4d06      	ldr	r5, [pc, #24]	; (800dafc <MX_FREERTOS_Init+0x20>)
 800dae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dae8:	682b      	ldr	r3, [r5, #0]
 800daea:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800daec:	2100      	movs	r1, #0
 800daee:	a801      	add	r0, sp, #4
 800daf0:	f7fc ff96 	bl	800aa20 <osThreadCreate>
 800daf4:	4b02      	ldr	r3, [pc, #8]	; (800db00 <MX_FREERTOS_Init+0x24>)
 800daf6:	6018      	str	r0, [r3, #0]
}
 800daf8:	b007      	add	sp, #28
 800dafa:	bd30      	pop	{r4, r5, pc}
 800dafc:	08012c64 	.word	0x08012c64
 800db00:	2000550c 	.word	0x2000550c

0800db04 <MX_GPIO_Init>:
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
     PC2   ------> SharedAnalog_PC2
*/
void MX_GPIO_Init(void)
{
 800db04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db08:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800db0a:	2400      	movs	r4, #0
 800db0c:	9407      	str	r4, [sp, #28]
 800db0e:	9408      	str	r4, [sp, #32]
 800db10:	9409      	str	r4, [sp, #36]	; 0x24
 800db12:	940a      	str	r4, [sp, #40]	; 0x28
 800db14:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800db16:	4b93      	ldr	r3, [pc, #588]	; (800dd64 <MX_GPIO_Init+0x260>)
 800db18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db1a:	f042 0210 	orr.w	r2, r2, #16
 800db1e:	64da      	str	r2, [r3, #76]	; 0x4c
 800db20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db22:	f002 0210 	and.w	r2, r2, #16
 800db26:	9201      	str	r2, [sp, #4]
 800db28:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800db2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db2c:	f042 0204 	orr.w	r2, r2, #4
 800db30:	64da      	str	r2, [r3, #76]	; 0x4c
 800db32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db34:	f002 0204 	and.w	r2, r2, #4
 800db38:	9202      	str	r2, [sp, #8]
 800db3a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800db3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800db42:	64da      	str	r2, [r3, #76]	; 0x4c
 800db44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db46:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800db4a:	9203      	str	r2, [sp, #12]
 800db4c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800db4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db50:	f042 0201 	orr.w	r2, r2, #1
 800db54:	64da      	str	r2, [r3, #76]	; 0x4c
 800db56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db58:	f002 0201 	and.w	r2, r2, #1
 800db5c:	9204      	str	r2, [sp, #16]
 800db5e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800db60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db62:	f042 0202 	orr.w	r2, r2, #2
 800db66:	64da      	str	r2, [r3, #76]	; 0x4c
 800db68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db6a:	f002 0202 	and.w	r2, r2, #2
 800db6e:	9205      	str	r2, [sp, #20]
 800db70:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800db72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db74:	f042 0208 	orr.w	r2, r2, #8
 800db78:	64da      	str	r2, [r3, #76]	; 0x4c
 800db7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db7c:	f003 0308 	and.w	r3, r3, #8
 800db80:	9306      	str	r3, [sp, #24]
 800db82:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, POWER_SWITCH_Pin|LED_SS_Pin|BT_EN_Pin, GPIO_PIN_RESET);
 800db84:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 800dd7c <MX_GPIO_Init+0x278>
 800db88:	4622      	mov	r2, r4
 800db8a:	f240 1111 	movw	r1, #273	; 0x111
 800db8e:	4640      	mov	r0, r8
 800db90:	f7f4 fb27 	bl	80021e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_LAT_GPIO_Port, LED_LAT_Pin, GPIO_PIN_RESET);
 800db94:	4622      	mov	r2, r4
 800db96:	2104      	movs	r1, #4
 800db98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800db9c:	f7f4 fb21 	bl	80021e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BT_CMD_GPIO_Port, BT_CMD_Pin, GPIO_PIN_SET);
 800dba0:	4f71      	ldr	r7, [pc, #452]	; (800dd68 <MX_GPIO_Init+0x264>)
 800dba2:	2201      	movs	r2, #1
 800dba4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dba8:	4638      	mov	r0, r7
 800dbaa:	f7f4 fb1a 	bl	80021e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, VL_XSHUT_Pin|HALL_CNTRL_Pin|SD_CARD_EN_Pin, GPIO_PIN_RESET);
 800dbae:	4622      	mov	r2, r4
 800dbb0:	f248 01c0 	movw	r1, #32960	; 0x80c0
 800dbb4:	4638      	mov	r0, r7
 800dbb6:	f7f4 fb14 	bl	80021e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BUTTON_3_Pin|BUTTON_8_Pin;
 800dbba:	230c      	movs	r3, #12
 800dbbc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800dbbe:	4e6b      	ldr	r6, [pc, #428]	; (800dd6c <MX_GPIO_Init+0x268>)
 800dbc0:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dbc2:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800dbc4:	a907      	add	r1, sp, #28
 800dbc6:	4640      	mov	r0, r8
 800dbc8:	f7f4 fa28 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = POWER_SWITCH_Pin|LED_SS_Pin|BT_EN_Pin;
 800dbcc:	f240 1311 	movw	r3, #273	; 0x111
 800dbd0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800dbd2:	f04f 0901 	mov.w	r9, #1
 800dbd6:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dbda:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dbdc:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800dbde:	a907      	add	r1, sp, #28
 800dbe0:	4640      	mov	r0, r8
 800dbe2:	f7f4 fa1b 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE6 PE7 PE10 
                           PE11 PE12 PE13 PE14 
                           PE15 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10 
 800dbe6:	f64f 43e2 	movw	r3, #64738	; 0xfce2
 800dbea:	9307      	str	r3, [sp, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800dbec:	2503      	movs	r5, #3
 800dbee:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dbf0:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800dbf2:	a907      	add	r1, sp, #28
 800dbf4:	4640      	mov	r0, r8
 800dbf6:	f7f4 fa11 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin|BUTTON_9_Pin;
 800dbfa:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 800dbfe:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800dc00:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc02:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dc04:	f5a8 6800 	sub.w	r8, r8, #2048	; 0x800
 800dc08:	a907      	add	r1, sp, #28
 800dc0a:	4640      	mov	r0, r8
 800dc0c:	f7f4 fa06 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PC6 */
  GPIO_InitStruct.Pin = HALL_OUTPUT_Pin|GPIO_PIN_6;
 800dc10:	2344      	movs	r3, #68	; 0x44
 800dc12:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800dc14:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc16:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dc18:	a907      	add	r1, sp, #28
 800dc1a:	4640      	mov	r0, r8
 800dc1c:	f7f4 f9fe 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUTTON_7_Pin|BUTTON_1_Pin;
 800dc20:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800dc22:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc24:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dc26:	a907      	add	r1, sp, #28
 800dc28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800dc2c:	f7f4 f9f6 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_LAT_Pin;
 800dc30:	2304      	movs	r3, #4
 800dc32:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800dc34:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc38:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800dc3a:	f04f 0a02 	mov.w	sl, #2
 800dc3e:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  HAL_GPIO_Init(LED_LAT_GPIO_Port, &GPIO_InitStruct);
 800dc42:	a907      	add	r1, sp, #28
 800dc44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800dc48:	f7f4 f9e8 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA6 PA7 PA11 
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11 
 800dc4c:	f641 03c8 	movw	r3, #6344	; 0x18c8
 800dc50:	9307      	str	r3, [sp, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800dc52:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc54:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dc56:	a907      	add	r1, sp, #28
 800dc58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800dc5c:	f7f4 f9de 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB12 PB14 
                           PB15 PB3 PB4 PB8 
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_14 
 800dc60:	f24d 331b 	movw	r3, #54043	; 0xd31b
 800dc64:	9307      	str	r3, [sp, #28]
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8 
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800dc66:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc68:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dc6a:	f5a8 6880 	sub.w	r8, r8, #1024	; 0x400
 800dc6e:	a907      	add	r1, sp, #28
 800dc70:	4640      	mov	r0, r8
 800dc72:	f7f4 f9d3 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD13 PD0 PD1 
                           PD3 PD4 PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1 
 800dc76:	f242 133b 	movw	r3, #8507	; 0x213b
 800dc7a:	9307      	str	r3, [sp, #28]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800dc7c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc7e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800dc80:	a907      	add	r1, sp, #28
 800dc82:	4638      	mov	r0, r7
 800dc84:	f7f4 f9ca 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BT_CMD_Pin|VL_XSHUT_Pin|HALL_CNTRL_Pin|SD_CARD_EN_Pin;
 800dc88:	f248 23c0 	movw	r3, #33472	; 0x82c0
 800dc8c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800dc8e:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc92:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dc94:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800dc96:	a907      	add	r1, sp, #28
 800dc98:	4638      	mov	r0, r7
 800dc9a:	f7f4 f9bf 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BUTTON_6_Pin|BUTTON_10_Pin|BUTTON_5_Pin|BUTTON_4_Pin;
 800dc9e:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800dca2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800dca4:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dca6:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800dca8:	a907      	add	r1, sp, #28
 800dcaa:	4638      	mov	r0, r7
 800dcac:	f7f4 f9b6 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VL_INT_Pin;
 800dcb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dcb4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800dcb6:	4b2e      	ldr	r3, [pc, #184]	; (800dd70 <MX_GPIO_Init+0x26c>)
 800dcb8:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dcba:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(VL_INT_GPIO_Port, &GPIO_InitStruct);
 800dcbc:	a907      	add	r1, sp, #28
 800dcbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800dcc2:	f7f4 f9ab 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HALL_INT_Pin;
 800dcc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dcca:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800dccc:	4b29      	ldr	r3, [pc, #164]	; (800dd74 <MX_GPIO_Init+0x270>)
 800dcce:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dcd0:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(HALL_INT_GPIO_Port, &GPIO_InitStruct);
 800dcd2:	a907      	add	r1, sp, #28
 800dcd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800dcd8:	f7f4 f9a0 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAP_ALERT_Pin;
 800dcdc:	2320      	movs	r3, #32
 800dcde:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800dce0:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800dce2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  HAL_GPIO_Init(CAP_ALERT_GPIO_Port, &GPIO_InitStruct);
 800dce6:	a907      	add	r1, sp, #28
 800dce8:	4640      	mov	r0, r8
 800dcea:	f7f4 f997 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800dcee:	2608      	movs	r6, #8
 800dcf0:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800dcf2:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dcf4:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800dcf6:	a907      	add	r1, sp, #28
 800dcf8:	481f      	ldr	r0, [pc, #124]	; (800dd78 <MX_GPIO_Init+0x274>)
 800dcfa:	f7f4 f98f 	bl	800201c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800dcfe:	4622      	mov	r2, r4
 800dd00:	2105      	movs	r1, #5
 800dd02:	2006      	movs	r0, #6
 800dd04:	f7f3 fdb4 	bl	8001870 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800dd08:	2006      	movs	r0, #6
 800dd0a:	f7f3 fde3 	bl	80018d4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800dd0e:	4622      	mov	r2, r4
 800dd10:	2105      	movs	r1, #5
 800dd12:	2007      	movs	r0, #7
 800dd14:	f7f3 fdac 	bl	8001870 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800dd18:	2007      	movs	r0, #7
 800dd1a:	f7f3 fddb 	bl	80018d4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800dd1e:	4622      	mov	r2, r4
 800dd20:	2105      	movs	r1, #5
 800dd22:	4630      	mov	r0, r6
 800dd24:	f7f3 fda4 	bl	8001870 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800dd28:	4630      	mov	r0, r6
 800dd2a:	f7f3 fdd3 	bl	80018d4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800dd2e:	4622      	mov	r2, r4
 800dd30:	2105      	movs	r1, #5
 800dd32:	2009      	movs	r0, #9
 800dd34:	f7f3 fd9c 	bl	8001870 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800dd38:	2009      	movs	r0, #9
 800dd3a:	f7f3 fdcb 	bl	80018d4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800dd3e:	4622      	mov	r2, r4
 800dd40:	2105      	movs	r1, #5
 800dd42:	2017      	movs	r0, #23
 800dd44:	f7f3 fd94 	bl	8001870 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800dd48:	2017      	movs	r0, #23
 800dd4a:	f7f3 fdc3 	bl	80018d4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800dd4e:	4622      	mov	r2, r4
 800dd50:	2105      	movs	r1, #5
 800dd52:	2028      	movs	r0, #40	; 0x28
 800dd54:	f7f3 fd8c 	bl	8001870 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800dd58:	2028      	movs	r0, #40	; 0x28
 800dd5a:	f7f3 fdbb 	bl	80018d4 <HAL_NVIC_EnableIRQ>

}
 800dd5e:	b00c      	add	sp, #48	; 0x30
 800dd60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd64:	40021000 	.word	0x40021000
 800dd68:	48000c00 	.word	0x48000c00
 800dd6c:	10110000 	.word	0x10110000
 800dd70:	10210000 	.word	0x10210000
 800dd74:	10310000 	.word	0x10310000
 800dd78:	48001c00 	.word	0x48001c00
 800dd7c:	48001000 	.word	0x48001000

0800dd80 <HALL_Handler>:

void resetIntTracker(void){
	POV_intTracker = 0;
}

void HALL_Handler(void){
 800dd80:	b508      	push	{r3, lr}
//	itoa(rounds, temp_buf2, 10);
//	HAL_UART_Transmit(&huart3, (uint8_t*) temp_buf2, sizeof(temp_buf2), 10);
//	char str[5] = "\n\r";
//	HAL_UART_Transmit(&huart3, (uint8_t*) str, sizeof(str), 10);

	if(countUp){
 800dd82:	4b22      	ldr	r3, [pc, #136]	; (800de0c <HALL_Handler+0x8c>)
 800dd84:	781b      	ldrb	r3, [r3, #0]
 800dd86:	b1e3      	cbz	r3, 800ddc2 <HALL_Handler+0x42>
		intTracker++;
 800dd88:	4a21      	ldr	r2, [pc, #132]	; (800de10 <HALL_Handler+0x90>)
 800dd8a:	7813      	ldrb	r3, [r2, #0]
 800dd8c:	3301      	adds	r3, #1
 800dd8e:	b2db      	uxtb	r3, r3
 800dd90:	7013      	strb	r3, [r2, #0]
	}
	else if(countDown){ //can remove this "if check" once confident code works properly
		intTracker--;
	}

	if(intTracker >= (ROTATION_STEPS-1)){
 800dd92:	4b1f      	ldr	r3, [pc, #124]	; (800de10 <HALL_Handler+0x90>)
 800dd94:	781b      	ldrb	r3, [r3, #0]
 800dd96:	b2db      	uxtb	r3, r3
 800dd98:	2b04      	cmp	r3, #4
 800dd9a:	d91c      	bls.n	800ddd6 <HALL_Handler+0x56>
		countDown 	= 1;
 800dd9c:	2201      	movs	r2, #1
 800dd9e:	4b1d      	ldr	r3, [pc, #116]	; (800de14 <HALL_Handler+0x94>)
 800dda0:	701a      	strb	r2, [r3, #0]
		countUp 	= 0;
 800dda2:	2200      	movs	r2, #0
 800dda4:	4b19      	ldr	r3, [pc, #100]	; (800de0c <HALL_Handler+0x8c>)
 800dda6:	701a      	strb	r2, [r3, #0]
	else if(intTracker == 0){
		countDown 	= 0;
		countUp 	= 1;
	}

	setWavetableAmplitude(&intTracker);
 800dda8:	4819      	ldr	r0, [pc, #100]	; (800de10 <HALL_Handler+0x90>)
 800ddaa:	f002 f8db 	bl	800ff64 <setWavetableAmplitude>

	POV_intTracker++;
 800ddae:	4a1a      	ldr	r2, [pc, #104]	; (800de18 <HALL_Handler+0x98>)
 800ddb0:	7813      	ldrb	r3, [r2, #0]
 800ddb2:	3301      	adds	r3, #1
 800ddb4:	b2db      	uxtb	r3, r3
 800ddb6:	7013      	strb	r3, [r2, #0]
//	if(POV_intTracker == TICK_THRESH){
//		RPR = 2*(DWT->CYCCNT);
//		DWT->CYCCNT = 0; // reset the counter
//	}

	if(POV_intTracker == HALF_MAGNET_CNT){
 800ddb8:	7813      	ldrb	r3, [r2, #0]
 800ddba:	b2db      	uxtb	r3, r3
 800ddbc:	2b03      	cmp	r3, #3
 800ddbe:	d015      	beq.n	800ddec <HALL_Handler+0x6c>
 800ddc0:	bd08      	pop	{r3, pc}
	else if(countDown){ //can remove this "if check" once confident code works properly
 800ddc2:	4b14      	ldr	r3, [pc, #80]	; (800de14 <HALL_Handler+0x94>)
 800ddc4:	781b      	ldrb	r3, [r3, #0]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d0e3      	beq.n	800dd92 <HALL_Handler+0x12>
		intTracker--;
 800ddca:	4a11      	ldr	r2, [pc, #68]	; (800de10 <HALL_Handler+0x90>)
 800ddcc:	7813      	ldrb	r3, [r2, #0]
 800ddce:	3b01      	subs	r3, #1
 800ddd0:	b2db      	uxtb	r3, r3
 800ddd2:	7013      	strb	r3, [r2, #0]
 800ddd4:	e7dd      	b.n	800dd92 <HALL_Handler+0x12>
	else if(intTracker == 0){
 800ddd6:	4b0e      	ldr	r3, [pc, #56]	; (800de10 <HALL_Handler+0x90>)
 800ddd8:	781b      	ldrb	r3, [r3, #0]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d1e4      	bne.n	800dda8 <HALL_Handler+0x28>
		countDown 	= 0;
 800ddde:	2200      	movs	r2, #0
 800dde0:	4b0c      	ldr	r3, [pc, #48]	; (800de14 <HALL_Handler+0x94>)
 800dde2:	701a      	strb	r2, [r3, #0]
		countUp 	= 1;
 800dde4:	2201      	movs	r2, #1
 800dde6:	4b09      	ldr	r3, [pc, #36]	; (800de0c <HALL_Handler+0x8c>)
 800dde8:	701a      	strb	r2, [r3, #0]
 800ddea:	e7dd      	b.n	800dda8 <HALL_Handler+0x28>
		RPR = (DWT->CYCCNT);
 800ddec:	480b      	ldr	r0, [pc, #44]	; (800de1c <HALL_Handler+0x9c>)
 800ddee:	6842      	ldr	r2, [r0, #4]
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	490b      	ldr	r1, [pc, #44]	; (800de20 <HALL_Handler+0xa0>)
 800ddf4:	e9c1 2300 	strd	r2, r3, [r1]
		DWT->CYCCNT = 0; // reset the counter
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	6043      	str	r3, [r0, #4]

		POV_intTracker = 1;
 800ddfc:	2201      	movs	r2, #1
 800ddfe:	4b06      	ldr	r3, [pc, #24]	; (800de18 <HALL_Handler+0x98>)
 800de00:	701a      	strb	r2, [r3, #0]
		POV_handler(RPR);
 800de02:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de06:	f000 fbef 	bl	800e5e8 <POV_handler>
	}
}
 800de0a:	e7d9      	b.n	800ddc0 <HALL_Handler+0x40>
 800de0c:	2000003d 	.word	0x2000003d
 800de10:	200050e9 	.word	0x200050e9
 800de14:	200050e8 	.word	0x200050e8
 800de18:	200050dc 	.word	0x200050dc
 800de1c:	e0001000 	.word	0xe0001000
 800de20:	200050e0 	.word	0x200050e0

0800de24 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800de24:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 800de26:	4812      	ldr	r0, [pc, #72]	; (800de70 <MX_I2C1_Init+0x4c>)
 800de28:	4b12      	ldr	r3, [pc, #72]	; (800de74 <MX_I2C1_Init+0x50>)
 800de2a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800de2c:	4b12      	ldr	r3, [pc, #72]	; (800de78 <MX_I2C1_Init+0x54>)
 800de2e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800de30:	2300      	movs	r3, #0
 800de32:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800de34:	2201      	movs	r2, #1
 800de36:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800de38:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800de3a:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800de3c:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800de3e:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800de40:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800de42:	f7f4 fc2d 	bl	80026a0 <HAL_I2C_Init>
 800de46:	b950      	cbnz	r0, 800de5e <MX_I2C1_Init+0x3a>
  {
    Error_Handler();
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800de48:	2100      	movs	r1, #0
 800de4a:	4809      	ldr	r0, [pc, #36]	; (800de70 <MX_I2C1_Init+0x4c>)
 800de4c:	f7f5 fd14 	bl	8003878 <HAL_I2CEx_ConfigAnalogFilter>
 800de50:	b940      	cbnz	r0, 800de64 <MX_I2C1_Init+0x40>
  {
    Error_Handler();
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800de52:	2100      	movs	r1, #0
 800de54:	4806      	ldr	r0, [pc, #24]	; (800de70 <MX_I2C1_Init+0x4c>)
 800de56:	f7f5 fd3d 	bl	80038d4 <HAL_I2CEx_ConfigDigitalFilter>
 800de5a:	b930      	cbnz	r0, 800de6a <MX_I2C1_Init+0x46>
 800de5c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800de5e:	f000 ff39 	bl	800ecd4 <Error_Handler>
 800de62:	e7f1      	b.n	800de48 <MX_I2C1_Init+0x24>
    Error_Handler();
 800de64:	f000 ff36 	bl	800ecd4 <Error_Handler>
 800de68:	e7f3      	b.n	800de52 <MX_I2C1_Init+0x2e>
  {
    Error_Handler();
 800de6a:	f000 ff33 	bl	800ecd4 <Error_Handler>
  }

}
 800de6e:	e7f5      	b.n	800de5c <MX_I2C1_Init+0x38>
 800de70:	2000556c 	.word	0x2000556c
 800de74:	40005400 	.word	0x40005400
 800de78:	10909cec 	.word	0x10909cec

0800de7c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800de7c:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 800de7e:	4812      	ldr	r0, [pc, #72]	; (800dec8 <MX_I2C2_Init+0x4c>)
 800de80:	4b12      	ldr	r3, [pc, #72]	; (800decc <MX_I2C2_Init+0x50>)
 800de82:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x00702991;
 800de84:	4b12      	ldr	r3, [pc, #72]	; (800ded0 <MX_I2C2_Init+0x54>)
 800de86:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800de88:	2300      	movs	r3, #0
 800de8a:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800de8c:	2201      	movs	r2, #1
 800de8e:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800de90:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800de92:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800de94:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800de96:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800de98:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800de9a:	f7f4 fc01 	bl	80026a0 <HAL_I2C_Init>
 800de9e:	b950      	cbnz	r0, 800deb6 <MX_I2C2_Init+0x3a>
  {
    Error_Handler();
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800dea0:	2100      	movs	r1, #0
 800dea2:	4809      	ldr	r0, [pc, #36]	; (800dec8 <MX_I2C2_Init+0x4c>)
 800dea4:	f7f5 fce8 	bl	8003878 <HAL_I2CEx_ConfigAnalogFilter>
 800dea8:	b940      	cbnz	r0, 800debc <MX_I2C2_Init+0x40>
  {
    Error_Handler();
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800deaa:	2100      	movs	r1, #0
 800deac:	4806      	ldr	r0, [pc, #24]	; (800dec8 <MX_I2C2_Init+0x4c>)
 800deae:	f7f5 fd11 	bl	80038d4 <HAL_I2CEx_ConfigDigitalFilter>
 800deb2:	b930      	cbnz	r0, 800dec2 <MX_I2C2_Init+0x46>
 800deb4:	bd08      	pop	{r3, pc}
    Error_Handler();
 800deb6:	f000 ff0d 	bl	800ecd4 <Error_Handler>
 800deba:	e7f1      	b.n	800dea0 <MX_I2C2_Init+0x24>
    Error_Handler();
 800debc:	f000 ff0a 	bl	800ecd4 <Error_Handler>
 800dec0:	e7f3      	b.n	800deaa <MX_I2C2_Init+0x2e>
  {
    Error_Handler();
 800dec2:	f000 ff07 	bl	800ecd4 <Error_Handler>
  }

}
 800dec6:	e7f5      	b.n	800deb4 <MX_I2C2_Init+0x38>
 800dec8:	200055b8 	.word	0x200055b8
 800decc:	40005800 	.word	0x40005800
 800ded0:	00702991 	.word	0x00702991

0800ded4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800ded4:	b508      	push	{r3, lr}

  hi2c3.Instance = I2C3;
 800ded6:	4812      	ldr	r0, [pc, #72]	; (800df20 <MX_I2C3_Init+0x4c>)
 800ded8:	4b12      	ldr	r3, [pc, #72]	; (800df24 <MX_I2C3_Init+0x50>)
 800deda:	6003      	str	r3, [r0, #0]
  hi2c3.Init.Timing = 0x00702991;
 800dedc:	4b12      	ldr	r3, [pc, #72]	; (800df28 <MX_I2C3_Init+0x54>)
 800dede:	6043      	str	r3, [r0, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800dee0:	2300      	movs	r3, #0
 800dee2:	6083      	str	r3, [r0, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800dee4:	2201      	movs	r2, #1
 800dee6:	60c2      	str	r2, [r0, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800dee8:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800deea:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800deec:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800deee:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800def0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800def2:	f7f4 fbd5 	bl	80026a0 <HAL_I2C_Init>
 800def6:	b950      	cbnz	r0, 800df0e <MX_I2C3_Init+0x3a>
  {
    Error_Handler();
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800def8:	2100      	movs	r1, #0
 800defa:	4809      	ldr	r0, [pc, #36]	; (800df20 <MX_I2C3_Init+0x4c>)
 800defc:	f7f5 fcbc 	bl	8003878 <HAL_I2CEx_ConfigAnalogFilter>
 800df00:	b940      	cbnz	r0, 800df14 <MX_I2C3_Init+0x40>
  {
    Error_Handler();
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800df02:	2100      	movs	r1, #0
 800df04:	4806      	ldr	r0, [pc, #24]	; (800df20 <MX_I2C3_Init+0x4c>)
 800df06:	f7f5 fce5 	bl	80038d4 <HAL_I2CEx_ConfigDigitalFilter>
 800df0a:	b930      	cbnz	r0, 800df1a <MX_I2C3_Init+0x46>
 800df0c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800df0e:	f000 fee1 	bl	800ecd4 <Error_Handler>
 800df12:	e7f1      	b.n	800def8 <MX_I2C3_Init+0x24>
    Error_Handler();
 800df14:	f000 fede 	bl	800ecd4 <Error_Handler>
 800df18:	e7f3      	b.n	800df02 <MX_I2C3_Init+0x2e>
  {
    Error_Handler();
 800df1a:	f000 fedb 	bl	800ecd4 <Error_Handler>
  }

}
 800df1e:	e7f5      	b.n	800df0c <MX_I2C3_Init+0x38>
 800df20:	20005520 	.word	0x20005520
 800df24:	40005c00 	.word	0x40005c00
 800df28:	00702991 	.word	0x00702991

0800df2c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800df2c:	b510      	push	{r4, lr}
 800df2e:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800df30:	2300      	movs	r3, #0
 800df32:	9307      	str	r3, [sp, #28]
 800df34:	9308      	str	r3, [sp, #32]
 800df36:	9309      	str	r3, [sp, #36]	; 0x24
 800df38:	930a      	str	r3, [sp, #40]	; 0x28
 800df3a:	930b      	str	r3, [sp, #44]	; 0x2c
  if(i2cHandle->Instance==I2C1)
 800df3c:	6803      	ldr	r3, [r0, #0]
 800df3e:	4a44      	ldr	r2, [pc, #272]	; (800e050 <HAL_I2C_MspInit+0x124>)
 800df40:	4293      	cmp	r3, r2
 800df42:	d007      	beq.n	800df54 <HAL_I2C_MspInit+0x28>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
 800df44:	4a43      	ldr	r2, [pc, #268]	; (800e054 <HAL_I2C_MspInit+0x128>)
 800df46:	4293      	cmp	r3, r2
 800df48:	d02e      	beq.n	800dfa8 <HAL_I2C_MspInit+0x7c>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C3)
 800df4a:	4a43      	ldr	r2, [pc, #268]	; (800e058 <HAL_I2C_MspInit+0x12c>)
 800df4c:	4293      	cmp	r3, r2
 800df4e:	d056      	beq.n	800dffe <HAL_I2C_MspInit+0xd2>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800df50:	b00c      	add	sp, #48	; 0x30
 800df52:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800df54:	4c41      	ldr	r4, [pc, #260]	; (800e05c <HAL_I2C_MspInit+0x130>)
 800df56:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800df58:	f043 0302 	orr.w	r3, r3, #2
 800df5c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800df5e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800df60:	f003 0302 	and.w	r3, r3, #2
 800df64:	9301      	str	r3, [sp, #4]
 800df66:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800df68:	23c0      	movs	r3, #192	; 0xc0
 800df6a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800df6c:	2312      	movs	r3, #18
 800df6e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800df70:	2301      	movs	r3, #1
 800df72:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800df74:	2303      	movs	r3, #3
 800df76:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800df78:	2304      	movs	r3, #4
 800df7a:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800df7c:	a907      	add	r1, sp, #28
 800df7e:	4838      	ldr	r0, [pc, #224]	; (800e060 <HAL_I2C_MspInit+0x134>)
 800df80:	f7f4 f84c 	bl	800201c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800df84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800df86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800df8a:	65a3      	str	r3, [r4, #88]	; 0x58
 800df8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800df8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800df92:	9302      	str	r3, [sp, #8]
 800df94:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800df96:	2200      	movs	r2, #0
 800df98:	2105      	movs	r1, #5
 800df9a:	201f      	movs	r0, #31
 800df9c:	f7f3 fc68 	bl	8001870 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800dfa0:	201f      	movs	r0, #31
 800dfa2:	f7f3 fc97 	bl	80018d4 <HAL_NVIC_EnableIRQ>
 800dfa6:	e7d3      	b.n	800df50 <HAL_I2C_MspInit+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dfa8:	4c2c      	ldr	r4, [pc, #176]	; (800e05c <HAL_I2C_MspInit+0x130>)
 800dfaa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800dfac:	f043 0302 	orr.w	r3, r3, #2
 800dfb0:	64e3      	str	r3, [r4, #76]	; 0x4c
 800dfb2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800dfb4:	f003 0302 	and.w	r3, r3, #2
 800dfb8:	9303      	str	r3, [sp, #12]
 800dfba:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800dfbc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800dfc0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800dfc2:	2312      	movs	r3, #18
 800dfc4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dfca:	2303      	movs	r3, #3
 800dfcc:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800dfce:	2304      	movs	r3, #4
 800dfd0:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dfd2:	a907      	add	r1, sp, #28
 800dfd4:	4822      	ldr	r0, [pc, #136]	; (800e060 <HAL_I2C_MspInit+0x134>)
 800dfd6:	f7f4 f821 	bl	800201c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800dfda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dfdc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800dfe0:	65a3      	str	r3, [r4, #88]	; 0x58
 800dfe2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dfe4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dfe8:	9304      	str	r3, [sp, #16]
 800dfea:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 800dfec:	2200      	movs	r2, #0
 800dfee:	2105      	movs	r1, #5
 800dff0:	2021      	movs	r0, #33	; 0x21
 800dff2:	f7f3 fc3d 	bl	8001870 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800dff6:	2021      	movs	r0, #33	; 0x21
 800dff8:	f7f3 fc6c 	bl	80018d4 <HAL_NVIC_EnableIRQ>
 800dffc:	e7a8      	b.n	800df50 <HAL_I2C_MspInit+0x24>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800dffe:	4c17      	ldr	r4, [pc, #92]	; (800e05c <HAL_I2C_MspInit+0x130>)
 800e000:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800e002:	f043 0304 	orr.w	r3, r3, #4
 800e006:	64e3      	str	r3, [r4, #76]	; 0x4c
 800e008:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800e00a:	f003 0304 	and.w	r3, r3, #4
 800e00e:	9305      	str	r3, [sp, #20]
 800e010:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800e012:	2303      	movs	r3, #3
 800e014:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e016:	2212      	movs	r2, #18
 800e018:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e01a:	2201      	movs	r2, #1
 800e01c:	9209      	str	r2, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e01e:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800e020:	2304      	movs	r3, #4
 800e022:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e024:	a907      	add	r1, sp, #28
 800e026:	480f      	ldr	r0, [pc, #60]	; (800e064 <HAL_I2C_MspInit+0x138>)
 800e028:	f7f3 fff8 	bl	800201c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800e02c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e02e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e032:	65a3      	str	r3, [r4, #88]	; 0x58
 800e034:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e036:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e03a:	9306      	str	r3, [sp, #24]
 800e03c:	9b06      	ldr	r3, [sp, #24]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 800e03e:	2200      	movs	r2, #0
 800e040:	2105      	movs	r1, #5
 800e042:	2048      	movs	r0, #72	; 0x48
 800e044:	f7f3 fc14 	bl	8001870 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800e048:	2048      	movs	r0, #72	; 0x48
 800e04a:	f7f3 fc43 	bl	80018d4 <HAL_NVIC_EnableIRQ>
}
 800e04e:	e77f      	b.n	800df50 <HAL_I2C_MspInit+0x24>
 800e050:	40005400 	.word	0x40005400
 800e054:	40005800 	.word	0x40005800
 800e058:	40005c00 	.word	0x40005c00
 800e05c:	40021000 	.word	0x40021000
 800e060:	48000400 	.word	0x48000400
 800e064:	48000800 	.word	0x48000800

0800e068 <POV_left>:

// POV_left() modifies map for left pixels
// POV_right() modifies map for right pixels
void POV_left(uint8_t* colorMap, uint8_t color) {
  // set to red
  if (color == 1) {
 800e068:	2901      	cmp	r1, #1
 800e06a:	d015      	beq.n	800e098 <POV_left+0x30>

  }

  // set to green
  else {
    if (colorMap[0] == 1) {
 800e06c:	7803      	ldrb	r3, [r0, #0]
 800e06e:	2b01      	cmp	r3, #1
 800e070:	d051      	beq.n	800e116 <POV_left+0xae>
      LED_SETTINGS[POV_4_G_REG] &= ~POV_4_G_PIN;
    }

    if (colorMap[1] == 1) {
 800e072:	7843      	ldrb	r3, [r0, #1]
 800e074:	2b01      	cmp	r3, #1
 800e076:	d054      	beq.n	800e122 <POV_left+0xba>
      LED_SETTINGS[BUTTON_3_G_REG] &= ~BUTTON_3_G_PIN;
    }

    if (colorMap[2] == 1) {
 800e078:	7883      	ldrb	r3, [r0, #2]
 800e07a:	2b01      	cmp	r3, #1
 800e07c:	d057      	beq.n	800e12e <POV_left+0xc6>
      LED_SETTINGS[POV_3_G_REG] &= ~POV_3_G_PIN;
    }

    if (colorMap[3] == 1) {
 800e07e:	78c3      	ldrb	r3, [r0, #3]
 800e080:	2b01      	cmp	r3, #1
 800e082:	d05a      	beq.n	800e13a <POV_left+0xd2>
      LED_SETTINGS[BUTTON_2_G_REG] &= ~BUTTON_2_G_PIN;
    }

    if (colorMap[4] == 1) {
 800e084:	7903      	ldrb	r3, [r0, #4]
 800e086:	2b01      	cmp	r3, #1
 800e088:	d05d      	beq.n	800e146 <POV_left+0xde>
      LED_SETTINGS[POV_2_G_REG] &= ~POV_2_G_PIN;
    }

    if (colorMap[5] == 1) {
 800e08a:	7943      	ldrb	r3, [r0, #5]
 800e08c:	2b01      	cmp	r3, #1
 800e08e:	d060      	beq.n	800e152 <POV_left+0xea>
      LED_SETTINGS[BUTTON_1_G_REG] &= ~BUTTON_1_G_PIN;
    }

    if (colorMap[6] == 1) {
 800e090:	7983      	ldrb	r3, [r0, #6]
 800e092:	2b01      	cmp	r3, #1
 800e094:	d063      	beq.n	800e15e <POV_left+0xf6>
 800e096:	4770      	bx	lr
    if (colorMap[0] == 1) {
 800e098:	7803      	ldrb	r3, [r0, #0]
 800e09a:	2b01      	cmp	r3, #1
 800e09c:	d017      	beq.n	800e0ce <POV_left+0x66>
    if (colorMap[1] == 1) {
 800e09e:	7843      	ldrb	r3, [r0, #1]
 800e0a0:	2b01      	cmp	r3, #1
 800e0a2:	d01a      	beq.n	800e0da <POV_left+0x72>
    if (colorMap[2] == 1) {
 800e0a4:	7883      	ldrb	r3, [r0, #2]
 800e0a6:	2b01      	cmp	r3, #1
 800e0a8:	d01d      	beq.n	800e0e6 <POV_left+0x7e>
    if (colorMap[3] == 1) {
 800e0aa:	78c3      	ldrb	r3, [r0, #3]
 800e0ac:	2b01      	cmp	r3, #1
 800e0ae:	d020      	beq.n	800e0f2 <POV_left+0x8a>
    if (colorMap[4] == 1) {
 800e0b0:	7903      	ldrb	r3, [r0, #4]
 800e0b2:	2b01      	cmp	r3, #1
 800e0b4:	d023      	beq.n	800e0fe <POV_left+0x96>
    if (colorMap[5] == 1) {
 800e0b6:	7943      	ldrb	r3, [r0, #5]
 800e0b8:	2b01      	cmp	r3, #1
 800e0ba:	d026      	beq.n	800e10a <POV_left+0xa2>
    if (colorMap[6] == 1) {
 800e0bc:	7983      	ldrb	r3, [r0, #6]
 800e0be:	2b01      	cmp	r3, #1
 800e0c0:	d1e9      	bne.n	800e096 <POV_left+0x2e>
      LED_SETTINGS[POV_1_R_REG] &= ~POV_1_R_PIN;
 800e0c2:	4a2a      	ldr	r2, [pc, #168]	; (800e16c <POV_left+0x104>)
 800e0c4:	7953      	ldrb	r3, [r2, #5]
 800e0c6:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
 800e0ca:	7153      	strb	r3, [r2, #5]
 800e0cc:	4770      	bx	lr
      LED_SETTINGS[POV_4_R_REG] &= ~POV_4_R_PIN;
 800e0ce:	4a27      	ldr	r2, [pc, #156]	; (800e16c <POV_left+0x104>)
 800e0d0:	7913      	ldrb	r3, [r2, #4]
 800e0d2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800e0d6:	7113      	strb	r3, [r2, #4]
 800e0d8:	e7e1      	b.n	800e09e <POV_left+0x36>
      LED_SETTINGS[BUTTON_3_R_REG] &= ~BUTTON_3_R_PIN;
 800e0da:	4a24      	ldr	r2, [pc, #144]	; (800e16c <POV_left+0x104>)
 800e0dc:	7913      	ldrb	r3, [r2, #4]
 800e0de:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 800e0e2:	7113      	strb	r3, [r2, #4]
 800e0e4:	e7de      	b.n	800e0a4 <POV_left+0x3c>
      LED_SETTINGS[POV_3_R_REG] &= ~POV_3_R_PIN;
 800e0e6:	4a21      	ldr	r2, [pc, #132]	; (800e16c <POV_left+0x104>)
 800e0e8:	7913      	ldrb	r3, [r2, #4]
 800e0ea:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800e0ee:	7113      	strb	r3, [r2, #4]
 800e0f0:	e7db      	b.n	800e0aa <POV_left+0x42>
      LED_SETTINGS[BUTTON_2_R_REG] &= ~BUTTON_2_R_PIN;
 800e0f2:	4a1e      	ldr	r2, [pc, #120]	; (800e16c <POV_left+0x104>)
 800e0f4:	7953      	ldrb	r3, [r2, #5]
 800e0f6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800e0fa:	7153      	strb	r3, [r2, #5]
 800e0fc:	e7d8      	b.n	800e0b0 <POV_left+0x48>
      LED_SETTINGS[POV_2_R_REG] &= ~POV_2_R_PIN;
 800e0fe:	4a1b      	ldr	r2, [pc, #108]	; (800e16c <POV_left+0x104>)
 800e100:	7953      	ldrb	r3, [r2, #5]
 800e102:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 800e106:	7153      	strb	r3, [r2, #5]
 800e108:	e7d5      	b.n	800e0b6 <POV_left+0x4e>
      LED_SETTINGS[BUTTON_1_R_REG] &= ~BUTTON_1_R_PIN;
 800e10a:	4a18      	ldr	r2, [pc, #96]	; (800e16c <POV_left+0x104>)
 800e10c:	7953      	ldrb	r3, [r2, #5]
 800e10e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800e112:	7153      	strb	r3, [r2, #5]
 800e114:	e7d2      	b.n	800e0bc <POV_left+0x54>
      LED_SETTINGS[POV_4_G_REG] &= ~POV_4_G_PIN;
 800e116:	4a15      	ldr	r2, [pc, #84]	; (800e16c <POV_left+0x104>)
 800e118:	7913      	ldrb	r3, [r2, #4]
 800e11a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800e11e:	7113      	strb	r3, [r2, #4]
 800e120:	e7a7      	b.n	800e072 <POV_left+0xa>
      LED_SETTINGS[BUTTON_3_G_REG] &= ~BUTTON_3_G_PIN;
 800e122:	4a12      	ldr	r2, [pc, #72]	; (800e16c <POV_left+0x104>)
 800e124:	7913      	ldrb	r3, [r2, #4]
 800e126:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 800e12a:	7113      	strb	r3, [r2, #4]
 800e12c:	e7a4      	b.n	800e078 <POV_left+0x10>
      LED_SETTINGS[POV_3_G_REG] &= ~POV_3_G_PIN;
 800e12e:	4a0f      	ldr	r2, [pc, #60]	; (800e16c <POV_left+0x104>)
 800e130:	7913      	ldrb	r3, [r2, #4]
 800e132:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e136:	7113      	strb	r3, [r2, #4]
 800e138:	e7a1      	b.n	800e07e <POV_left+0x16>
      LED_SETTINGS[BUTTON_2_G_REG] &= ~BUTTON_2_G_PIN;
 800e13a:	4a0c      	ldr	r2, [pc, #48]	; (800e16c <POV_left+0x104>)
 800e13c:	7953      	ldrb	r3, [r2, #5]
 800e13e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800e142:	7153      	strb	r3, [r2, #5]
 800e144:	e79e      	b.n	800e084 <POV_left+0x1c>
      LED_SETTINGS[POV_2_G_REG] &= ~POV_2_G_PIN;
 800e146:	4a09      	ldr	r2, [pc, #36]	; (800e16c <POV_left+0x104>)
 800e148:	7953      	ldrb	r3, [r2, #5]
 800e14a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 800e14e:	7153      	strb	r3, [r2, #5]
 800e150:	e79b      	b.n	800e08a <POV_left+0x22>
      LED_SETTINGS[BUTTON_1_G_REG] &= ~BUTTON_1_G_PIN;
 800e152:	4a06      	ldr	r2, [pc, #24]	; (800e16c <POV_left+0x104>)
 800e154:	7953      	ldrb	r3, [r2, #5]
 800e156:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e15a:	7153      	strb	r3, [r2, #5]
 800e15c:	e798      	b.n	800e090 <POV_left+0x28>
      LED_SETTINGS[POV_1_G_REG] &= ~POV_1_G_PIN;
 800e15e:	4a03      	ldr	r2, [pc, #12]	; (800e16c <POV_left+0x104>)
 800e160:	7953      	ldrb	r3, [r2, #5]
 800e162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e166:	7153      	strb	r3, [r2, #5]
    }
  }
}
 800e168:	e795      	b.n	800e096 <POV_left+0x2e>
 800e16a:	bf00      	nop
 800e16c:	200053e0 	.word	0x200053e0

0800e170 <POV_right>:

void POV_right(uint8_t* colorMap, uint8_t color) {
  // set to red
  if (color == 1) {
 800e170:	2901      	cmp	r1, #1
 800e172:	d015      	beq.n	800e1a0 <POV_right+0x30>

  }

  // set to green
  else {
    if (colorMap[0] == 1) {
 800e174:	7803      	ldrb	r3, [r0, #0]
 800e176:	2b01      	cmp	r3, #1
 800e178:	d051      	beq.n	800e21e <POV_right+0xae>
      LED_SETTINGS[POV_5_G_REG] &= ~POV_5_G_PIN;
    }

    if (colorMap[1] == 1) {
 800e17a:	7843      	ldrb	r3, [r0, #1]
 800e17c:	2b01      	cmp	r3, #1
 800e17e:	d054      	beq.n	800e22a <POV_right+0xba>
      LED_SETTINGS[BUTTON_4_G_REG] &= ~BUTTON_4_G_PIN;
    }

    if (colorMap[2] == 1) {
 800e180:	7883      	ldrb	r3, [r0, #2]
 800e182:	2b01      	cmp	r3, #1
 800e184:	d057      	beq.n	800e236 <POV_right+0xc6>
      LED_SETTINGS[POV_6_G_REG] &= ~POV_6_G_PIN;
    }

    if (colorMap[3] == 1) {
 800e186:	78c3      	ldrb	r3, [r0, #3]
 800e188:	2b01      	cmp	r3, #1
 800e18a:	d05a      	beq.n	800e242 <POV_right+0xd2>
      LED_SETTINGS[BUTTON_5_G_REG] &= ~BUTTON_5_G_PIN;
    }

    if (colorMap[4] == 1) {
 800e18c:	7903      	ldrb	r3, [r0, #4]
 800e18e:	2b01      	cmp	r3, #1
 800e190:	d05d      	beq.n	800e24e <POV_right+0xde>
      LED_SETTINGS[POV_7_G_REG] &= ~POV_7_G_PIN;
    }

    if (colorMap[5] == 1) {
 800e192:	7943      	ldrb	r3, [r0, #5]
 800e194:	2b01      	cmp	r3, #1
 800e196:	d060      	beq.n	800e25a <POV_right+0xea>
      LED_SETTINGS[BUTTON_6_G_REG] &= ~BUTTON_6_G_PIN;
    }

    if (colorMap[6] == 1) {
 800e198:	7983      	ldrb	r3, [r0, #6]
 800e19a:	2b01      	cmp	r3, #1
 800e19c:	d063      	beq.n	800e266 <POV_right+0xf6>
 800e19e:	4770      	bx	lr
    if (colorMap[0] == 1) {
 800e1a0:	7803      	ldrb	r3, [r0, #0]
 800e1a2:	2b01      	cmp	r3, #1
 800e1a4:	d017      	beq.n	800e1d6 <POV_right+0x66>
    if (colorMap[1] == 1) {
 800e1a6:	7843      	ldrb	r3, [r0, #1]
 800e1a8:	2b01      	cmp	r3, #1
 800e1aa:	d01a      	beq.n	800e1e2 <POV_right+0x72>
    if (colorMap[2] == 1) {
 800e1ac:	7883      	ldrb	r3, [r0, #2]
 800e1ae:	2b01      	cmp	r3, #1
 800e1b0:	d01d      	beq.n	800e1ee <POV_right+0x7e>
    if (colorMap[3] == 1) {
 800e1b2:	78c3      	ldrb	r3, [r0, #3]
 800e1b4:	2b01      	cmp	r3, #1
 800e1b6:	d020      	beq.n	800e1fa <POV_right+0x8a>
    if (colorMap[4] == 1) {
 800e1b8:	7903      	ldrb	r3, [r0, #4]
 800e1ba:	2b01      	cmp	r3, #1
 800e1bc:	d023      	beq.n	800e206 <POV_right+0x96>
    if (colorMap[5] == 1) {
 800e1be:	7943      	ldrb	r3, [r0, #5]
 800e1c0:	2b01      	cmp	r3, #1
 800e1c2:	d026      	beq.n	800e212 <POV_right+0xa2>
    if (colorMap[6] == 1) {
 800e1c4:	7983      	ldrb	r3, [r0, #6]
 800e1c6:	2b01      	cmp	r3, #1
 800e1c8:	d1e9      	bne.n	800e19e <POV_right+0x2e>
      LED_SETTINGS[POV_8_R_REG] &= ~POV_8_R_PIN;
 800e1ca:	4a2a      	ldr	r2, [pc, #168]	; (800e274 <POV_right+0x104>)
 800e1cc:	7813      	ldrb	r3, [r2, #0]
 800e1ce:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800e1d2:	7013      	strb	r3, [r2, #0]
 800e1d4:	4770      	bx	lr
      LED_SETTINGS[POV_5_R_REG] &= ~POV_5_R_PIN;
 800e1d6:	4a27      	ldr	r2, [pc, #156]	; (800e274 <POV_right+0x104>)
 800e1d8:	7853      	ldrb	r3, [r2, #1]
 800e1da:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
 800e1de:	7053      	strb	r3, [r2, #1]
 800e1e0:	e7e1      	b.n	800e1a6 <POV_right+0x36>
      LED_SETTINGS[BUTTON_4_R_REG] &= ~BUTTON_4_R_PIN;
 800e1e2:	4a24      	ldr	r2, [pc, #144]	; (800e274 <POV_right+0x104>)
 800e1e4:	7853      	ldrb	r3, [r2, #1]
 800e1e6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800e1ea:	7053      	strb	r3, [r2, #1]
 800e1ec:	e7de      	b.n	800e1ac <POV_right+0x3c>
      LED_SETTINGS[POV_6_R_REG] &= ~POV_6_R_PIN;
 800e1ee:	4a21      	ldr	r2, [pc, #132]	; (800e274 <POV_right+0x104>)
 800e1f0:	7853      	ldrb	r3, [r2, #1]
 800e1f2:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 800e1f6:	7053      	strb	r3, [r2, #1]
 800e1f8:	e7db      	b.n	800e1b2 <POV_right+0x42>
      LED_SETTINGS[BUTTON_5_R_REG] &= ~BUTTON_5_R_PIN;
 800e1fa:	4a1e      	ldr	r2, [pc, #120]	; (800e274 <POV_right+0x104>)
 800e1fc:	7813      	ldrb	r3, [r2, #0]
 800e1fe:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
 800e202:	7013      	strb	r3, [r2, #0]
 800e204:	e7d8      	b.n	800e1b8 <POV_right+0x48>
      LED_SETTINGS[POV_7_R_REG] &= ~POV_7_R_PIN;
 800e206:	4a1b      	ldr	r2, [pc, #108]	; (800e274 <POV_right+0x104>)
 800e208:	7813      	ldrb	r3, [r2, #0]
 800e20a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800e20e:	7013      	strb	r3, [r2, #0]
 800e210:	e7d5      	b.n	800e1be <POV_right+0x4e>
      LED_SETTINGS[BUTTON_6_R_REG] &= ~BUTTON_6_R_PIN;
 800e212:	4a18      	ldr	r2, [pc, #96]	; (800e274 <POV_right+0x104>)
 800e214:	7813      	ldrb	r3, [r2, #0]
 800e216:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 800e21a:	7013      	strb	r3, [r2, #0]
 800e21c:	e7d2      	b.n	800e1c4 <POV_right+0x54>
      LED_SETTINGS[POV_5_G_REG] &= ~POV_5_G_PIN;
 800e21e:	4a15      	ldr	r2, [pc, #84]	; (800e274 <POV_right+0x104>)
 800e220:	7853      	ldrb	r3, [r2, #1]
 800e222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e226:	7053      	strb	r3, [r2, #1]
 800e228:	e7a7      	b.n	800e17a <POV_right+0xa>
      LED_SETTINGS[BUTTON_4_G_REG] &= ~BUTTON_4_G_PIN;
 800e22a:	4a12      	ldr	r2, [pc, #72]	; (800e274 <POV_right+0x104>)
 800e22c:	7853      	ldrb	r3, [r2, #1]
 800e22e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e232:	7053      	strb	r3, [r2, #1]
 800e234:	e7a4      	b.n	800e180 <POV_right+0x10>
      LED_SETTINGS[POV_6_G_REG] &= ~POV_6_G_PIN;
 800e236:	4a0f      	ldr	r2, [pc, #60]	; (800e274 <POV_right+0x104>)
 800e238:	7853      	ldrb	r3, [r2, #1]
 800e23a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 800e23e:	7053      	strb	r3, [r2, #1]
 800e240:	e7a1      	b.n	800e186 <POV_right+0x16>
      LED_SETTINGS[BUTTON_5_G_REG] &= ~BUTTON_5_G_PIN;
 800e242:	4a0c      	ldr	r2, [pc, #48]	; (800e274 <POV_right+0x104>)
 800e244:	7813      	ldrb	r3, [r2, #0]
 800e246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e24a:	7013      	strb	r3, [r2, #0]
 800e24c:	e79e      	b.n	800e18c <POV_right+0x1c>
      LED_SETTINGS[POV_7_G_REG] &= ~POV_7_G_PIN;
 800e24e:	4a09      	ldr	r2, [pc, #36]	; (800e274 <POV_right+0x104>)
 800e250:	7813      	ldrb	r3, [r2, #0]
 800e252:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e256:	7013      	strb	r3, [r2, #0]
 800e258:	e79b      	b.n	800e192 <POV_right+0x22>
      LED_SETTINGS[BUTTON_6_G_REG] &= ~BUTTON_6_G_PIN;
 800e25a:	4a06      	ldr	r2, [pc, #24]	; (800e274 <POV_right+0x104>)
 800e25c:	7813      	ldrb	r3, [r2, #0]
 800e25e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 800e262:	7013      	strb	r3, [r2, #0]
 800e264:	e798      	b.n	800e198 <POV_right+0x28>
      LED_SETTINGS[POV_8_G_REG] &= ~POV_8_G_PIN;
 800e266:	4a03      	ldr	r2, [pc, #12]	; (800e274 <POV_right+0x104>)
 800e268:	7813      	ldrb	r3, [r2, #0]
 800e26a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800e26e:	7013      	strb	r3, [r2, #0]
    }
  }
}
 800e270:	e795      	b.n	800e19e <POV_right+0x2e>
 800e272:	bf00      	nop
 800e274:	200053e0 	.word	0x200053e0

0800e278 <runPOV_step>:

    indexTracker++;
  }
}

void runPOV_step(uint8_t* red, uint8_t* green, uint8_t step) {
 800e278:	b538      	push	{r3, r4, r5, lr}
 800e27a:	4604      	mov	r4, r0
 800e27c:	460d      	mov	r5, r1
  memset(LED_SETTINGS, 255, sizeof LED_SETTINGS);
 800e27e:	4b26      	ldr	r3, [pc, #152]	; (800e318 <runPOV_step+0xa0>)
 800e280:	f04f 32ff 	mov.w	r2, #4294967295
 800e284:	601a      	str	r2, [r3, #0]
 800e286:	809a      	strh	r2, [r3, #4]

  if (global_visNum == 1) {
 800e288:	4b24      	ldr	r3, [pc, #144]	; (800e31c <runPOV_step+0xa4>)
 800e28a:	881b      	ldrh	r3, [r3, #0]
 800e28c:	2b01      	cmp	r3, #1
 800e28e:	d002      	beq.n	800e296 <runPOV_step+0x1e>
      POV_right(red, 1);
    } else {
      POV_left(red, 1);
      POV_right(green, 0);
    }
  } else if (global_visNum == 2) {
 800e290:	2b02      	cmp	r3, #2
 800e292:	d016      	beq.n	800e2c2 <runPOV_step+0x4a>
 800e294:	bd38      	pop	{r3, r4, r5, pc}
    if ((timerPOVstate % 2) == 1) {
 800e296:	4b22      	ldr	r3, [pc, #136]	; (800e320 <runPOV_step+0xa8>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	f013 0f01 	tst.w	r3, #1
 800e29e:	d008      	beq.n	800e2b2 <runPOV_step+0x3a>
      POV_left(green, 0);
 800e2a0:	2100      	movs	r1, #0
 800e2a2:	4628      	mov	r0, r5
 800e2a4:	f7ff fee0 	bl	800e068 <POV_left>
      POV_right(red, 1);
 800e2a8:	2101      	movs	r1, #1
 800e2aa:	4620      	mov	r0, r4
 800e2ac:	f7ff ff60 	bl	800e170 <POV_right>
 800e2b0:	bd38      	pop	{r3, r4, r5, pc}
      POV_left(red, 1);
 800e2b2:	2101      	movs	r1, #1
 800e2b4:	f7ff fed8 	bl	800e068 <POV_left>
      POV_right(green, 0);
 800e2b8:	2100      	movs	r1, #0
 800e2ba:	4628      	mov	r0, r5
 800e2bc:	f7ff ff58 	bl	800e170 <POV_right>
 800e2c0:	bd38      	pop	{r3, r4, r5, pc}
    if ((timerPOVstate % 2) == 1) {
 800e2c2:	4b17      	ldr	r3, [pc, #92]	; (800e320 <runPOV_step+0xa8>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	f013 0f01 	tst.w	r3, #1
 800e2ca:	d112      	bne.n	800e2f2 <runPOV_step+0x7a>
      POV_left(green, 0);
      POV_left(red, 1);
      POV_right(green + 15 * MESSAGE_WIDTH, 0);
      POV_right(red + 15 * MESSAGE_WIDTH, 1);
    } else {
      POV_left(green + 15 * MESSAGE_WIDTH, 0);
 800e2cc:	2100      	movs	r1, #0
 800e2ce:	f105 0069 	add.w	r0, r5, #105	; 0x69
 800e2d2:	f7ff fec9 	bl	800e068 <POV_left>
      POV_left(red + 15 * MESSAGE_WIDTH, 1);
 800e2d6:	2101      	movs	r1, #1
 800e2d8:	f104 0069 	add.w	r0, r4, #105	; 0x69
 800e2dc:	f7ff fec4 	bl	800e068 <POV_left>
      POV_right(green, 0);
 800e2e0:	2100      	movs	r1, #0
 800e2e2:	4628      	mov	r0, r5
 800e2e4:	f7ff ff44 	bl	800e170 <POV_right>
      POV_right(red, 1);
 800e2e8:	2101      	movs	r1, #1
 800e2ea:	4620      	mov	r0, r4
 800e2ec:	f7ff ff40 	bl	800e170 <POV_right>
    }
  }
}
 800e2f0:	e7d0      	b.n	800e294 <runPOV_step+0x1c>
      POV_left(green, 0);
 800e2f2:	2100      	movs	r1, #0
 800e2f4:	4628      	mov	r0, r5
 800e2f6:	f7ff feb7 	bl	800e068 <POV_left>
      POV_left(red, 1);
 800e2fa:	2101      	movs	r1, #1
 800e2fc:	4620      	mov	r0, r4
 800e2fe:	f7ff feb3 	bl	800e068 <POV_left>
      POV_right(green + 15 * MESSAGE_WIDTH, 0);
 800e302:	2100      	movs	r1, #0
 800e304:	f105 0069 	add.w	r0, r5, #105	; 0x69
 800e308:	f7ff ff32 	bl	800e170 <POV_right>
      POV_right(red + 15 * MESSAGE_WIDTH, 1);
 800e30c:	2101      	movs	r1, #1
 800e30e:	f104 0069 	add.w	r0, r4, #105	; 0x69
 800e312:	f7ff ff2d 	bl	800e170 <POV_right>
 800e316:	bd38      	pop	{r3, r4, r5, pc}
 800e318:	200053e0 	.word	0x200053e0
 800e31c:	200050ec 	.word	0x200050ec
 800e320:	200052bc 	.word	0x200052bc

0800e324 <setMatrix>:
    run_message(message_resenv_red, message_resenv_green, cyclePerHalfTurn);
  }
}

void setMatrix(uint8_t matrix[][MESSAGE_WIDTH], uint32_t size, uint16_t length,
               uint8_t reverse) {
 800e324:	b508      	push	{r3, lr}
  if (reverse == 0) {
 800e326:	b153      	cbz	r3, 800e33e <setMatrix+0x1a>
    memset(matrix, 1, size);
  } else {
    uint16_t pointerOffset = (MESSAGE_LENGTH - 1) - length;
 800e328:	f1c2 021f 	rsb	r2, r2, #31
 800e32c:	b292      	uxth	r2, r2
    memset(&(matrix[pointerOffset][0]), 1, size);
 800e32e:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 800e332:	460a      	mov	r2, r1
 800e334:	2101      	movs	r1, #1
 800e336:	4418      	add	r0, r3
 800e338:	f002 fe43 	bl	8010fc2 <memset>
 800e33c:	bd08      	pop	{r3, pc}
    memset(matrix, 1, size);
 800e33e:	460a      	mov	r2, r1
 800e340:	2101      	movs	r1, #1
 800e342:	f002 fe3e 	bl	8010fc2 <memset>
 800e346:	bd08      	pop	{r3, pc}

0800e348 <updatePOV_LidarMatricies>:
  }
}

uint8_t temp_tracker = 0;
void updatePOV_LidarMatricies(uint32_t lidarPOV_Map) {
 800e348:	b538      	push	{r3, r4, r5, lr}
 800e34a:	4604      	mov	r4, r0
  memset(lidar_green, 0,
 800e34c:	25e0      	movs	r5, #224	; 0xe0
 800e34e:	462a      	mov	r2, r5
 800e350:	2100      	movs	r1, #0
 800e352:	480e      	ldr	r0, [pc, #56]	; (800e38c <updatePOV_LidarMatricies+0x44>)
 800e354:	f002 fe35 	bl	8010fc2 <memset>
         sizeof(lidar_green[0][0]) * MESSAGE_LENGTH * MESSAGE_WIDTH);
  memset(lidar_red, 0,
 800e358:	462a      	mov	r2, r5
 800e35a:	2100      	movs	r1, #0
 800e35c:	480c      	ldr	r0, [pc, #48]	; (800e390 <updatePOV_LidarMatricies+0x48>)
 800e35e:	f002 fe30 	bl	8010fc2 <memset>
         sizeof(lidar_green[0][0]) * MESSAGE_LENGTH * MESSAGE_WIDTH);

  uint16_t diff;

  if (lidarPOV_Map >= (MESSAGE_LENGTH)) {
 800e362:	2c1f      	cmp	r4, #31
 800e364:	d808      	bhi.n	800e378 <updatePOV_LidarMatricies+0x30>
    setMatrix(lidar_red,
              sizeof(lidar_green[0][0]) *
                  (lidarPOV_Map - (MESSAGE_LENGTH - 1)) * MESSAGE_WIDTH,
              0, 0);
  } else {
    setMatrix(lidar_green,
 800e366:	1c61      	adds	r1, r4, #1
 800e368:	2300      	movs	r3, #0
 800e36a:	461a      	mov	r2, r3
 800e36c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800e370:	4806      	ldr	r0, [pc, #24]	; (800e38c <updatePOV_LidarMatricies+0x44>)
 800e372:	f7ff ffd7 	bl	800e324 <setMatrix>
 800e376:	bd38      	pop	{r3, r4, r5, pc}
    setMatrix(lidar_red,
 800e378:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800e37c:	2300      	movs	r3, #0
 800e37e:	461a      	mov	r2, r3
 800e380:	f1a4 01d9 	sub.w	r1, r4, #217	; 0xd9
 800e384:	4802      	ldr	r0, [pc, #8]	; (800e390 <updatePOV_LidarMatricies+0x48>)
 800e386:	f7ff ffcd 	bl	800e324 <setMatrix>
 800e38a:	bd38      	pop	{r3, r4, r5, pc}
 800e38c:	200050f8 	.word	0x200050f8
 800e390:	200051d8 	.word	0x200051d8

0800e394 <transmitToBuffer>:
              sizeof(lidar_green[0][0]) * (lidarPOV_Map + 1) * MESSAGE_WIDTH, 0,
              0);
  }
}

void transmitToBuffer(void) {
 800e394:	b508      	push	{r3, lr}
  // taskENTER_CRITICAL();
  if (LED_mutex_id != NULL) {
 800e396:	4b0c      	ldr	r3, [pc, #48]	; (800e3c8 <transmitToBuffer+0x34>)
 800e398:	6818      	ldr	r0, [r3, #0]
 800e39a:	b118      	cbz	r0, 800e3a4 <transmitToBuffer+0x10>
    osMutexWait(LED_mutex_id, osWaitForever);
 800e39c:	f04f 31ff 	mov.w	r1, #4294967295
 800e3a0:	f7fc fbe4 	bl	800ab6c <osMutexWait>
  }

  HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_RESET);
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e3aa:	4808      	ldr	r0, [pc, #32]	; (800e3cc <transmitToBuffer+0x38>)
 800e3ac:	f7f3 ff19 	bl	80021e2 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit_IT(&hspi2, LED_SETTINGS, 6);
 800e3b0:	2206      	movs	r2, #6
 800e3b2:	4907      	ldr	r1, [pc, #28]	; (800e3d0 <transmitToBuffer+0x3c>)
 800e3b4:	4807      	ldr	r0, [pc, #28]	; (800e3d4 <transmitToBuffer+0x40>)
 800e3b6:	f7f7 faa9 	bl	800590c <HAL_SPI_Transmit_IT>

  // HAL_Delay(1);
  // HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_SET);

  if (LED_mutex_id != NULL) {
 800e3ba:	4b03      	ldr	r3, [pc, #12]	; (800e3c8 <transmitToBuffer+0x34>)
 800e3bc:	6818      	ldr	r0, [r3, #0]
 800e3be:	b108      	cbz	r0, 800e3c4 <transmitToBuffer+0x30>
    osMutexRelease(LED_mutex_id);
 800e3c0:	f7fc fc0c 	bl	800abdc <osMutexRelease>
 800e3c4:	bd08      	pop	{r3, pc}
 800e3c6:	bf00      	nop
 800e3c8:	200053d0 	.word	0x200053d0
 800e3cc:	48001000 	.word	0x48001000
 800e3d0:	200053e0 	.word	0x200053e0
 800e3d4:	20005a60 	.word	0x20005a60

0800e3d8 <POV_Update>:
void POV_Update(void) {
 800e3d8:	b508      	push	{r3, lr}
  if (firstRun) {
 800e3da:	4b44      	ldr	r3, [pc, #272]	; (800e4ec <POV_Update+0x114>)
 800e3dc:	781b      	ldrb	r3, [r3, #0]
 800e3de:	b35b      	cbz	r3, 800e438 <POV_Update+0x60>
    firstRun = 0;
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	4b42      	ldr	r3, [pc, #264]	; (800e4ec <POV_Update+0x114>)
 800e3e4:	701a      	strb	r2, [r3, #0]
    if (global_visNum == 1) {
 800e3e6:	4b42      	ldr	r3, [pc, #264]	; (800e4f0 <POV_Update+0x118>)
 800e3e8:	881b      	ldrh	r3, [r3, #0]
 800e3ea:	2b01      	cmp	r3, #1
 800e3ec:	d008      	beq.n	800e400 <POV_Update+0x28>
    } else if (global_visNum == 2) {
 800e3ee:	2b02      	cmp	r3, #2
 800e3f0:	d016      	beq.n	800e420 <POV_Update+0x48>
    transmitToBuffer();
 800e3f2:	f7ff ffcf 	bl	800e394 <transmitToBuffer>
    indexTracker++;
 800e3f6:	4a3f      	ldr	r2, [pc, #252]	; (800e4f4 <POV_Update+0x11c>)
 800e3f8:	6813      	ldr	r3, [r2, #0]
 800e3fa:	3301      	adds	r3, #1
 800e3fc:	6013      	str	r3, [r2, #0]
    return;
 800e3fe:	bd08      	pop	{r3, pc}
      runPOV_step(&message_resenv_red[indexTracker + HALF_LENGTH][0],
 800e400:	4b3c      	ldr	r3, [pc, #240]	; (800e4f4 <POV_Update+0x11c>)
 800e402:	681a      	ldr	r2, [r3, #0]
 800e404:	f102 0010 	add.w	r0, r2, #16
 800e408:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
                  &message_resenv_green[indexTracker][0], indexTracker);
 800e40c:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
      runPOV_step(&message_resenv_red[indexTracker + HALF_LENGTH][0],
 800e410:	b2d2      	uxtb	r2, r2
 800e412:	4939      	ldr	r1, [pc, #228]	; (800e4f8 <POV_Update+0x120>)
 800e414:	4419      	add	r1, r3
 800e416:	4b39      	ldr	r3, [pc, #228]	; (800e4fc <POV_Update+0x124>)
 800e418:	4418      	add	r0, r3
 800e41a:	f7ff ff2d 	bl	800e278 <runPOV_step>
 800e41e:	e7e8      	b.n	800e3f2 <POV_Update+0x1a>
      runPOV_step(&lidar_red[indexTracker][0], &lidar_green[indexTracker][0],
 800e420:	4b34      	ldr	r3, [pc, #208]	; (800e4f4 <POV_Update+0x11c>)
 800e422:	681a      	ldr	r2, [r3, #0]
 800e424:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 800e428:	b2d2      	uxtb	r2, r2
 800e42a:	4935      	ldr	r1, [pc, #212]	; (800e500 <POV_Update+0x128>)
 800e42c:	4419      	add	r1, r3
 800e42e:	4835      	ldr	r0, [pc, #212]	; (800e504 <POV_Update+0x12c>)
 800e430:	4418      	add	r0, r3
 800e432:	f7ff ff21 	bl	800e278 <runPOV_step>
 800e436:	e7dc      	b.n	800e3f2 <POV_Update+0x1a>
  if (indexTracker >= (HALF_LENGTH - 1)) {
 800e438:	4b2e      	ldr	r3, [pc, #184]	; (800e4f4 <POV_Update+0x11c>)
 800e43a:	681a      	ldr	r2, [r3, #0]
 800e43c:	2a0e      	cmp	r2, #14
 800e43e:	d80c      	bhi.n	800e45a <POV_Update+0x82>
    if (global_visNum == 1) {
 800e440:	4b2b      	ldr	r3, [pc, #172]	; (800e4f0 <POV_Update+0x118>)
 800e442:	881b      	ldrh	r3, [r3, #0]
 800e444:	2b01      	cmp	r3, #1
 800e446:	d038      	beq.n	800e4ba <POV_Update+0xe2>
    } else if (global_visNum == 2) {
 800e448:	2b02      	cmp	r3, #2
 800e44a:	d044      	beq.n	800e4d6 <POV_Update+0xfe>
    transmitToBuffer();
 800e44c:	f7ff ffa2 	bl	800e394 <transmitToBuffer>
    indexTracker++;
 800e450:	4a28      	ldr	r2, [pc, #160]	; (800e4f4 <POV_Update+0x11c>)
 800e452:	6813      	ldr	r3, [r2, #0]
 800e454:	3301      	adds	r3, #1
 800e456:	6013      	str	r3, [r2, #0]
 800e458:	bd08      	pop	{r3, pc}
    HAL_TIM_Base_Stop_IT(&htim3);
 800e45a:	482b      	ldr	r0, [pc, #172]	; (800e508 <POV_Update+0x130>)
 800e45c:	f7f7 fd2c 	bl	8005eb8 <HAL_TIM_Base_Stop_IT>
    if (global_visNum == 1) {
 800e460:	4b23      	ldr	r3, [pc, #140]	; (800e4f0 <POV_Update+0x118>)
 800e462:	881b      	ldrh	r3, [r3, #0]
 800e464:	2b01      	cmp	r3, #1
 800e466:	d00c      	beq.n	800e482 <POV_Update+0xaa>
    } else if (global_visNum == 2) {
 800e468:	2b02      	cmp	r3, #2
 800e46a:	d01a      	beq.n	800e4a2 <POV_Update+0xca>
    transmitToBuffer();
 800e46c:	f7ff ff92 	bl	800e394 <transmitToBuffer>
    indexTracker = 0;
 800e470:	2300      	movs	r3, #0
 800e472:	4a20      	ldr	r2, [pc, #128]	; (800e4f4 <POV_Update+0x11c>)
 800e474:	6013      	str	r3, [r2, #0]
    POV_timerActive = 0;
 800e476:	4a25      	ldr	r2, [pc, #148]	; (800e50c <POV_Update+0x134>)
 800e478:	7013      	strb	r3, [r2, #0]
    firstRun = 1;
 800e47a:	2201      	movs	r2, #1
 800e47c:	4b1b      	ldr	r3, [pc, #108]	; (800e4ec <POV_Update+0x114>)
 800e47e:	701a      	strb	r2, [r3, #0]
 800e480:	bd08      	pop	{r3, pc}
      runPOV_step(&message_resenv_red[indexTracker + HALF_LENGTH][0],
 800e482:	4b1c      	ldr	r3, [pc, #112]	; (800e4f4 <POV_Update+0x11c>)
 800e484:	681a      	ldr	r2, [r3, #0]
 800e486:	f102 0010 	add.w	r0, r2, #16
 800e48a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
                  &message_resenv_green[indexTracker][0], indexTracker);
 800e48e:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
      runPOV_step(&message_resenv_red[indexTracker + HALF_LENGTH][0],
 800e492:	b2d2      	uxtb	r2, r2
 800e494:	4918      	ldr	r1, [pc, #96]	; (800e4f8 <POV_Update+0x120>)
 800e496:	4419      	add	r1, r3
 800e498:	4b18      	ldr	r3, [pc, #96]	; (800e4fc <POV_Update+0x124>)
 800e49a:	4418      	add	r0, r3
 800e49c:	f7ff feec 	bl	800e278 <runPOV_step>
 800e4a0:	e7e4      	b.n	800e46c <POV_Update+0x94>
      runPOV_step(&lidar_red[indexTracker][0], &lidar_green[indexTracker][0],
 800e4a2:	4b14      	ldr	r3, [pc, #80]	; (800e4f4 <POV_Update+0x11c>)
 800e4a4:	681a      	ldr	r2, [r3, #0]
 800e4a6:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 800e4aa:	b2d2      	uxtb	r2, r2
 800e4ac:	4914      	ldr	r1, [pc, #80]	; (800e500 <POV_Update+0x128>)
 800e4ae:	4419      	add	r1, r3
 800e4b0:	4814      	ldr	r0, [pc, #80]	; (800e504 <POV_Update+0x12c>)
 800e4b2:	4418      	add	r0, r3
 800e4b4:	f7ff fee0 	bl	800e278 <runPOV_step>
 800e4b8:	e7d8      	b.n	800e46c <POV_Update+0x94>
      runPOV_step(&message_resenv_red[indexTracker + HALF_LENGTH][0],
 800e4ba:	f102 0010 	add.w	r0, r2, #16
 800e4be:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
                  &message_resenv_green[indexTracker][0], indexTracker);
 800e4c2:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
      runPOV_step(&message_resenv_red[indexTracker + HALF_LENGTH][0],
 800e4c6:	b2d2      	uxtb	r2, r2
 800e4c8:	490b      	ldr	r1, [pc, #44]	; (800e4f8 <POV_Update+0x120>)
 800e4ca:	4419      	add	r1, r3
 800e4cc:	4b0b      	ldr	r3, [pc, #44]	; (800e4fc <POV_Update+0x124>)
 800e4ce:	4418      	add	r0, r3
 800e4d0:	f7ff fed2 	bl	800e278 <runPOV_step>
 800e4d4:	e7ba      	b.n	800e44c <POV_Update+0x74>
      runPOV_step(&lidar_red[indexTracker][0], &lidar_green[indexTracker][0],
 800e4d6:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 800e4da:	b2d2      	uxtb	r2, r2
 800e4dc:	4908      	ldr	r1, [pc, #32]	; (800e500 <POV_Update+0x128>)
 800e4de:	4419      	add	r1, r3
 800e4e0:	4808      	ldr	r0, [pc, #32]	; (800e504 <POV_Update+0x12c>)
 800e4e2:	4418      	add	r0, r3
 800e4e4:	f7ff fec8 	bl	800e278 <runPOV_step>
 800e4e8:	e7b0      	b.n	800e44c <POV_Update+0x74>
 800e4ea:	bf00      	nop
 800e4ec:	2000003e 	.word	0x2000003e
 800e4f0:	200050ec 	.word	0x200050ec
 800e4f4:	200050f0 	.word	0x200050f0
 800e4f8:	08012cd4 	.word	0x08012cd4
 800e4fc:	08012db4 	.word	0x08012db4
 800e500:	200050f8 	.word	0x200050f8
 800e504:	200051d8 	.word	0x200051d8
 800e508:	20005b84 	.word	0x20005b84
 800e50c:	200050ea 	.word	0x200050ea

0800e510 <run_message>:
                 uint32_t cyclePerHalfTurn) {
 800e510:	b510      	push	{r4, lr}
      round(((cyclePerHalfTurn) / ((double)TICK_POV_MICROSEC_10_DIVIDER)) /
 800e512:	4610      	mov	r0, r2
 800e514:	f7f1 ffb6 	bl	8000484 <__aeabi_ui2d>
 800e518:	2200      	movs	r2, #0
 800e51a:	4b13      	ldr	r3, [pc, #76]	; (800e568 <run_message+0x58>)
 800e51c:	f7f2 f952 	bl	80007c4 <__aeabi_ddiv>
 800e520:	2200      	movs	r2, #0
 800e522:	4b12      	ldr	r3, [pc, #72]	; (800e56c <run_message+0x5c>)
 800e524:	f7f2 f824 	bl	8000570 <__aeabi_dmul>
 800e528:	ec41 0b10 	vmov	d0, r0, r1
 800e52c:	f002 fdac 	bl	8011088 <round>
  uint32_t uS_10_needed =
 800e530:	ec51 0b10 	vmov	r0, r1, d0
 800e534:	f7f2 faf4 	bl	8000b20 <__aeabi_d2uiz>
  if (POV_timerActive == 0) {
 800e538:	4b0d      	ldr	r3, [pc, #52]	; (800e570 <run_message+0x60>)
 800e53a:	781b      	ldrb	r3, [r3, #0]
 800e53c:	b103      	cbz	r3, 800e540 <run_message+0x30>
 800e53e:	bd10      	pop	{r4, pc}
    POV_timerActive = 1;
 800e540:	2201      	movs	r2, #1
 800e542:	4b0b      	ldr	r3, [pc, #44]	; (800e570 <run_message+0x60>)
 800e544:	701a      	strb	r2, [r3, #0]
    timerPOVstate = switchPOV;
 800e546:	4b0b      	ldr	r3, [pc, #44]	; (800e574 <run_message+0x64>)
 800e548:	681a      	ldr	r2, [r3, #0]
 800e54a:	4b0b      	ldr	r3, [pc, #44]	; (800e578 <run_message+0x68>)
 800e54c:	601a      	str	r2, [r3, #0]
    htim3.Instance->ARR = (uint16_t)uS_10_needed;
 800e54e:	4c0b      	ldr	r4, [pc, #44]	; (800e57c <run_message+0x6c>)
 800e550:	6823      	ldr	r3, [r4, #0]
 800e552:	b280      	uxth	r0, r0
 800e554:	62d8      	str	r0, [r3, #44]	; 0x2c
    disable_buttons();
 800e556:	f000 fead 	bl	800f2b4 <disable_buttons>
    POV_Update();
 800e55a:	f7ff ff3d 	bl	800e3d8 <POV_Update>
    HAL_TIM_Base_Start_IT(&htim3);
 800e55e:	4620      	mov	r0, r4
 800e560:	f7f7 fc90 	bl	8005e84 <HAL_TIM_Base_Start_IT>
}
 800e564:	e7eb      	b.n	800e53e <run_message+0x2e>
 800e566:	bf00      	nop
 800e568:	40890000 	.word	0x40890000
 800e56c:	3fb00000 	.word	0x3fb00000
 800e570:	200050ea 	.word	0x200050ea
 800e574:	200052b8 	.word	0x200052b8
 800e578:	200052bc 	.word	0x200052bc
 800e57c:	20005b84 	.word	0x20005b84

0800e580 <visualizationRun>:
void visualizationRun(uint8_t visNum, uint32_t cyclePerHalfTurn) {
 800e580:	b510      	push	{r4, lr}
 800e582:	460c      	mov	r4, r1
  if (visNum == 1) {
 800e584:	2801      	cmp	r0, #1
 800e586:	d00a      	beq.n	800e59e <visualizationRun+0x1e>
  } else if (visNum == 2) {
 800e588:	2802      	cmp	r0, #2
 800e58a:	d011      	beq.n	800e5b0 <visualizationRun+0x30>
    global_visNum = 1;
 800e58c:	2201      	movs	r2, #1
 800e58e:	4b10      	ldr	r3, [pc, #64]	; (800e5d0 <visualizationRun+0x50>)
 800e590:	801a      	strh	r2, [r3, #0]
    run_message(message_resenv_red, message_resenv_green, cyclePerHalfTurn);
 800e592:	460a      	mov	r2, r1
 800e594:	490f      	ldr	r1, [pc, #60]	; (800e5d4 <visualizationRun+0x54>)
 800e596:	4810      	ldr	r0, [pc, #64]	; (800e5d8 <visualizationRun+0x58>)
 800e598:	f7ff ffba 	bl	800e510 <run_message>
 800e59c:	bd10      	pop	{r4, pc}
    global_visNum = 1;
 800e59e:	2201      	movs	r2, #1
 800e5a0:	4b0b      	ldr	r3, [pc, #44]	; (800e5d0 <visualizationRun+0x50>)
 800e5a2:	801a      	strh	r2, [r3, #0]
    run_message(message_resenv_red, message_resenv_green, cyclePerHalfTurn);
 800e5a4:	460a      	mov	r2, r1
 800e5a6:	490b      	ldr	r1, [pc, #44]	; (800e5d4 <visualizationRun+0x54>)
 800e5a8:	480b      	ldr	r0, [pc, #44]	; (800e5d8 <visualizationRun+0x58>)
 800e5aa:	f7ff ffb1 	bl	800e510 <run_message>
 800e5ae:	bd10      	pop	{r4, pc}
    lidarPOV_Map = get_lidar_POV_map();
 800e5b0:	f000 f980 	bl	800e8b4 <get_lidar_POV_map>
 800e5b4:	4b09      	ldr	r3, [pc, #36]	; (800e5dc <visualizationRun+0x5c>)
 800e5b6:	6018      	str	r0, [r3, #0]
    updatePOV_LidarMatricies(lidarPOV_Map);
 800e5b8:	f7ff fec6 	bl	800e348 <updatePOV_LidarMatricies>
    global_visNum = 2;
 800e5bc:	2202      	movs	r2, #2
 800e5be:	4b04      	ldr	r3, [pc, #16]	; (800e5d0 <visualizationRun+0x50>)
 800e5c0:	801a      	strh	r2, [r3, #0]
    run_message(lidar_green, lidar_red, cyclePerHalfTurn);
 800e5c2:	4622      	mov	r2, r4
 800e5c4:	4906      	ldr	r1, [pc, #24]	; (800e5e0 <visualizationRun+0x60>)
 800e5c6:	4807      	ldr	r0, [pc, #28]	; (800e5e4 <visualizationRun+0x64>)
 800e5c8:	f7ff ffa2 	bl	800e510 <run_message>
 800e5cc:	bd10      	pop	{r4, pc}
 800e5ce:	bf00      	nop
 800e5d0:	200050ec 	.word	0x200050ec
 800e5d4:	08012cd4 	.word	0x08012cd4
 800e5d8:	08012db4 	.word	0x08012db4
 800e5dc:	200050f4 	.word	0x200050f4
 800e5e0:	200051d8 	.word	0x200051d8
 800e5e4:	200050f8 	.word	0x200050f8

0800e5e8 <POV_handler>:
void POV_handler(uint64_t RPR) {
 800e5e8:	b508      	push	{r3, lr}
  switchPOV++;
 800e5ea:	4a0b      	ldr	r2, [pc, #44]	; (800e618 <POV_handler+0x30>)
 800e5ec:	6813      	ldr	r3, [r2, #0]
 800e5ee:	3301      	adds	r3, #1
 800e5f0:	6013      	str	r3, [r2, #0]
  if ((RPR) <= ((uint32_t)TICK_POV_THRESH)) {
 800e5f2:	a307      	add	r3, pc, #28	; (adr r3, 800e610 <POV_handler+0x28>)
 800e5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f8:	428b      	cmp	r3, r1
 800e5fa:	bf08      	it	eq
 800e5fc:	4282      	cmpeq	r2, r0
 800e5fe:	d200      	bcs.n	800e602 <POV_handler+0x1a>
 800e600:	bd08      	pop	{r3, pc}
    usTickTracker = (uint32_t)RPR;
 800e602:	4b06      	ldr	r3, [pc, #24]	; (800e61c <POV_handler+0x34>)
 800e604:	6018      	str	r0, [r3, #0]
    visualizationRun(2, usTickTracker);
 800e606:	4601      	mov	r1, r0
 800e608:	2002      	movs	r0, #2
 800e60a:	f7ff ffb9 	bl	800e580 <visualizationRun>
}
 800e60e:	e7f7      	b.n	800e600 <POV_handler+0x18>
 800e610:	01c9c380 	.word	0x01c9c380
 800e614:	00000000 	.word	0x00000000
 800e618:	200052b8 	.word	0x200052b8
 800e61c:	200052c0 	.word	0x200052c0

0800e620 <POV_LEDs>:

const uint16_t visualization_map1[60] = {
    {MAP_POV_1_R}, {MAP_POV_1_G}, {MAP_POV_1_R}, {MAP_POV_1_G}, {MAP_POV_1_R},
    {MAP_POV_1_G}, {MAP_POV_1_R}, {MAP_POV_1_G}, {MAP_POV_1_R}, {MAP_POV_1_G}};

void POV_LEDs(uint16_t led_map) {
 800e620:	b508      	push	{r3, lr}
  if ((led_map & MAP_POV_1_R) == MAP_POV_1_R) {
 800e622:	f010 0f01 	tst.w	r0, #1
 800e626:	d07f      	beq.n	800e728 <POV_LEDs+0x108>
    LED_SETTINGS[POV_1_R_REG] &= ~POV_1_R_PIN;
 800e628:	4a6f      	ldr	r2, [pc, #444]	; (800e7e8 <POV_LEDs+0x1c8>)
 800e62a:	7953      	ldrb	r3, [r2, #5]
 800e62c:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
 800e630:	7153      	strb	r3, [r2, #5]
  } else {
    LED_SETTINGS[POV_1_R_REG] |= POV_1_R_PIN;
  }

  if ((led_map & MAP_POV_2_R) == MAP_POV_2_R) {
 800e632:	f010 0f02 	tst.w	r0, #2
 800e636:	d07d      	beq.n	800e734 <POV_LEDs+0x114>
    LED_SETTINGS[POV_2_R_REG] &= ~POV_2_R_PIN;
 800e638:	4a6b      	ldr	r2, [pc, #428]	; (800e7e8 <POV_LEDs+0x1c8>)
 800e63a:	7953      	ldrb	r3, [r2, #5]
 800e63c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 800e640:	7153      	strb	r3, [r2, #5]
  } else {
    LED_SETTINGS[POV_2_R_REG] |= POV_2_R_PIN;
  }

  if ((led_map & MAP_POV_3_R) == MAP_POV_3_R) {
 800e642:	f010 0f04 	tst.w	r0, #4
 800e646:	d07b      	beq.n	800e740 <POV_LEDs+0x120>
    LED_SETTINGS[POV_3_R_REG] &= ~POV_3_R_PIN;
 800e648:	4a67      	ldr	r2, [pc, #412]	; (800e7e8 <POV_LEDs+0x1c8>)
 800e64a:	7913      	ldrb	r3, [r2, #4]
 800e64c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800e650:	7113      	strb	r3, [r2, #4]
  } else {
    LED_SETTINGS[POV_3_R_REG] |= POV_3_R_PIN;
  }

  if ((led_map & MAP_POV_4_R) == MAP_POV_4_R) {
 800e652:	f010 0f08 	tst.w	r0, #8
 800e656:	d079      	beq.n	800e74c <POV_LEDs+0x12c>
    LED_SETTINGS[POV_4_R_REG] &= ~POV_4_R_PIN;
 800e658:	4a63      	ldr	r2, [pc, #396]	; (800e7e8 <POV_LEDs+0x1c8>)
 800e65a:	7913      	ldrb	r3, [r2, #4]
 800e65c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800e660:	7113      	strb	r3, [r2, #4]
  } else {
    LED_SETTINGS[POV_4_R_REG] |= POV_4_R_PIN;
  }

  if ((led_map & MAP_POV_5_R) == MAP_POV_5_R) {
 800e662:	f010 0f10 	tst.w	r0, #16
 800e666:	d077      	beq.n	800e758 <POV_LEDs+0x138>
    LED_SETTINGS[POV_5_R_REG] &= ~POV_5_R_PIN;
 800e668:	4a5f      	ldr	r2, [pc, #380]	; (800e7e8 <POV_LEDs+0x1c8>)
 800e66a:	7853      	ldrb	r3, [r2, #1]
 800e66c:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
 800e670:	7053      	strb	r3, [r2, #1]
  } else {
    LED_SETTINGS[POV_5_R_REG] |= POV_5_R_PIN;
  }

  if ((led_map & MAP_POV_6_R) == MAP_POV_6_R) {
 800e672:	f010 0f20 	tst.w	r0, #32
 800e676:	d075      	beq.n	800e764 <POV_LEDs+0x144>
    LED_SETTINGS[POV_6_R_REG] &= ~POV_6_R_PIN;
 800e678:	4a5b      	ldr	r2, [pc, #364]	; (800e7e8 <POV_LEDs+0x1c8>)
 800e67a:	7853      	ldrb	r3, [r2, #1]
 800e67c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 800e680:	7053      	strb	r3, [r2, #1]
  } else {
    LED_SETTINGS[POV_6_R_REG] |= POV_6_R_PIN;
  }

  if ((led_map & MAP_POV_7_R) == MAP_POV_7_R) {
 800e682:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e686:	d073      	beq.n	800e770 <POV_LEDs+0x150>
    LED_SETTINGS[POV_7_R_REG] &= ~POV_7_R_PIN;
 800e688:	4a57      	ldr	r2, [pc, #348]	; (800e7e8 <POV_LEDs+0x1c8>)
 800e68a:	7813      	ldrb	r3, [r2, #0]
 800e68c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800e690:	7013      	strb	r3, [r2, #0]
  } else {
    LED_SETTINGS[POV_7_R_REG] |= POV_7_R_PIN;
  }

  if ((led_map & MAP_POV_8_R) == MAP_POV_8_R) {
 800e692:	f010 0f80 	tst.w	r0, #128	; 0x80
 800e696:	d071      	beq.n	800e77c <POV_LEDs+0x15c>
    LED_SETTINGS[POV_8_R_REG] &= ~POV_8_R_PIN;
 800e698:	4a53      	ldr	r2, [pc, #332]	; (800e7e8 <POV_LEDs+0x1c8>)
 800e69a:	7813      	ldrb	r3, [r2, #0]
 800e69c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800e6a0:	7013      	strb	r3, [r2, #0]
  } else {
    LED_SETTINGS[POV_8_R_REG] |= POV_8_R_PIN;
  }

  if ((led_map & MAP_POV_1_G) == MAP_POV_1_G) {
 800e6a2:	f410 7f80 	tst.w	r0, #256	; 0x100
 800e6a6:	d06f      	beq.n	800e788 <POV_LEDs+0x168>
    LED_SETTINGS[POV_1_G_REG] &= ~POV_1_G_PIN;
 800e6a8:	4a4f      	ldr	r2, [pc, #316]	; (800e7e8 <POV_LEDs+0x1c8>)
 800e6aa:	7953      	ldrb	r3, [r2, #5]
 800e6ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e6b0:	7153      	strb	r3, [r2, #5]
  } else {
    LED_SETTINGS[POV_1_G_REG] |= POV_1_G_PIN;
  }

  if ((led_map & MAP_POV_2_G) == MAP_POV_2_G) {
 800e6b2:	f410 7f00 	tst.w	r0, #512	; 0x200
 800e6b6:	d06d      	beq.n	800e794 <POV_LEDs+0x174>
    LED_SETTINGS[POV_2_G_REG] &= ~POV_2_G_PIN;
 800e6b8:	4a4b      	ldr	r2, [pc, #300]	; (800e7e8 <POV_LEDs+0x1c8>)
 800e6ba:	7953      	ldrb	r3, [r2, #5]
 800e6bc:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 800e6c0:	7153      	strb	r3, [r2, #5]
  } else {
    LED_SETTINGS[POV_2_G_REG] |= POV_2_G_PIN;
  }

  if ((led_map & MAP_POV_3_G) == MAP_POV_3_G) {
 800e6c2:	f410 6f80 	tst.w	r0, #1024	; 0x400
 800e6c6:	d06b      	beq.n	800e7a0 <POV_LEDs+0x180>
    LED_SETTINGS[POV_3_G_REG] &= ~POV_3_G_PIN;
 800e6c8:	4a47      	ldr	r2, [pc, #284]	; (800e7e8 <POV_LEDs+0x1c8>)
 800e6ca:	7913      	ldrb	r3, [r2, #4]
 800e6cc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e6d0:	7113      	strb	r3, [r2, #4]
  } else {
    LED_SETTINGS[POV_3_G_REG] |= POV_3_G_PIN;
  }

  if ((led_map & MAP_POV_4_G) == MAP_POV_4_G) {
 800e6d2:	f410 6f00 	tst.w	r0, #2048	; 0x800
 800e6d6:	d069      	beq.n	800e7ac <POV_LEDs+0x18c>
    LED_SETTINGS[POV_4_G_REG] &= ~POV_4_G_PIN;
 800e6d8:	4a43      	ldr	r2, [pc, #268]	; (800e7e8 <POV_LEDs+0x1c8>)
 800e6da:	7913      	ldrb	r3, [r2, #4]
 800e6dc:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800e6e0:	7113      	strb	r3, [r2, #4]
  } else {
    LED_SETTINGS[POV_4_G_REG] |= POV_4_G_PIN;
  }

  if ((led_map & MAP_POV_5_G) == MAP_POV_5_G) {
 800e6e2:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 800e6e6:	d067      	beq.n	800e7b8 <POV_LEDs+0x198>
    LED_SETTINGS[POV_5_G_REG] &= ~POV_5_G_PIN;
 800e6e8:	4a3f      	ldr	r2, [pc, #252]	; (800e7e8 <POV_LEDs+0x1c8>)
 800e6ea:	7853      	ldrb	r3, [r2, #1]
 800e6ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e6f0:	7053      	strb	r3, [r2, #1]
  } else {
    LED_SETTINGS[POV_5_G_REG] |= POV_5_G_PIN;
  }

  if ((led_map & MAP_POV_6_G) == MAP_POV_6_G) {
 800e6f2:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 800e6f6:	d065      	beq.n	800e7c4 <POV_LEDs+0x1a4>
    LED_SETTINGS[POV_6_G_REG] &= ~POV_6_G_PIN;
 800e6f8:	4a3b      	ldr	r2, [pc, #236]	; (800e7e8 <POV_LEDs+0x1c8>)
 800e6fa:	7853      	ldrb	r3, [r2, #1]
 800e6fc:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 800e700:	7053      	strb	r3, [r2, #1]
  } else {
    LED_SETTINGS[POV_6_G_REG] |= POV_6_G_PIN;
  }

  if ((led_map & MAP_POV_7_G) == MAP_POV_7_G) {
 800e702:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 800e706:	d063      	beq.n	800e7d0 <POV_LEDs+0x1b0>
    LED_SETTINGS[POV_7_G_REG] &= ~POV_7_G_PIN;
 800e708:	4a37      	ldr	r2, [pc, #220]	; (800e7e8 <POV_LEDs+0x1c8>)
 800e70a:	7813      	ldrb	r3, [r2, #0]
 800e70c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e710:	7013      	strb	r3, [r2, #0]
  } else {
    LED_SETTINGS[POV_7_G_REG] |= POV_7_G_PIN;
  }

  if ((led_map & MAP_POV_8_G) == MAP_POV_8_G) {
 800e712:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800e716:	d161      	bne.n	800e7dc <POV_LEDs+0x1bc>
    LED_SETTINGS[POV_8_G_REG] &= ~POV_8_G_PIN;
  } else {
    LED_SETTINGS[POV_8_G_REG] |= POV_8_G_PIN;
 800e718:	4a33      	ldr	r2, [pc, #204]	; (800e7e8 <POV_LEDs+0x1c8>)
 800e71a:	7813      	ldrb	r3, [r2, #0]
 800e71c:	f043 0302 	orr.w	r3, r3, #2
 800e720:	7013      	strb	r3, [r2, #0]
  }

  transmitToBuffer();
 800e722:	f7ff fe37 	bl	800e394 <transmitToBuffer>
 800e726:	bd08      	pop	{r3, pc}
    LED_SETTINGS[POV_1_R_REG] |= POV_1_R_PIN;
 800e728:	4a2f      	ldr	r2, [pc, #188]	; (800e7e8 <POV_LEDs+0x1c8>)
 800e72a:	7953      	ldrb	r3, [r2, #5]
 800e72c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e730:	7153      	strb	r3, [r2, #5]
 800e732:	e77e      	b.n	800e632 <POV_LEDs+0x12>
    LED_SETTINGS[POV_2_R_REG] |= POV_2_R_PIN;
 800e734:	4a2c      	ldr	r2, [pc, #176]	; (800e7e8 <POV_LEDs+0x1c8>)
 800e736:	7953      	ldrb	r3, [r2, #5]
 800e738:	f043 0304 	orr.w	r3, r3, #4
 800e73c:	7153      	strb	r3, [r2, #5]
 800e73e:	e780      	b.n	800e642 <POV_LEDs+0x22>
    LED_SETTINGS[POV_3_R_REG] |= POV_3_R_PIN;
 800e740:	4a29      	ldr	r2, [pc, #164]	; (800e7e8 <POV_LEDs+0x1c8>)
 800e742:	7913      	ldrb	r3, [r2, #4]
 800e744:	f043 0310 	orr.w	r3, r3, #16
 800e748:	7113      	strb	r3, [r2, #4]
 800e74a:	e782      	b.n	800e652 <POV_LEDs+0x32>
    LED_SETTINGS[POV_4_R_REG] |= POV_4_R_PIN;
 800e74c:	4a26      	ldr	r2, [pc, #152]	; (800e7e8 <POV_LEDs+0x1c8>)
 800e74e:	7913      	ldrb	r3, [r2, #4]
 800e750:	f043 0301 	orr.w	r3, r3, #1
 800e754:	7113      	strb	r3, [r2, #4]
 800e756:	e784      	b.n	800e662 <POV_LEDs+0x42>
    LED_SETTINGS[POV_5_R_REG] |= POV_5_R_PIN;
 800e758:	4a23      	ldr	r2, [pc, #140]	; (800e7e8 <POV_LEDs+0x1c8>)
 800e75a:	7853      	ldrb	r3, [r2, #1]
 800e75c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e760:	7053      	strb	r3, [r2, #1]
 800e762:	e786      	b.n	800e672 <POV_LEDs+0x52>
    LED_SETTINGS[POV_6_R_REG] |= POV_6_R_PIN;
 800e764:	4a20      	ldr	r2, [pc, #128]	; (800e7e8 <POV_LEDs+0x1c8>)
 800e766:	7853      	ldrb	r3, [r2, #1]
 800e768:	f043 0304 	orr.w	r3, r3, #4
 800e76c:	7053      	strb	r3, [r2, #1]
 800e76e:	e788      	b.n	800e682 <POV_LEDs+0x62>
    LED_SETTINGS[POV_7_R_REG] |= POV_7_R_PIN;
 800e770:	4a1d      	ldr	r2, [pc, #116]	; (800e7e8 <POV_LEDs+0x1c8>)
 800e772:	7813      	ldrb	r3, [r2, #0]
 800e774:	f043 0310 	orr.w	r3, r3, #16
 800e778:	7013      	strb	r3, [r2, #0]
 800e77a:	e78a      	b.n	800e692 <POV_LEDs+0x72>
    LED_SETTINGS[POV_8_R_REG] |= POV_8_R_PIN;
 800e77c:	4a1a      	ldr	r2, [pc, #104]	; (800e7e8 <POV_LEDs+0x1c8>)
 800e77e:	7813      	ldrb	r3, [r2, #0]
 800e780:	f043 0301 	orr.w	r3, r3, #1
 800e784:	7013      	strb	r3, [r2, #0]
 800e786:	e78c      	b.n	800e6a2 <POV_LEDs+0x82>
    LED_SETTINGS[POV_1_G_REG] |= POV_1_G_PIN;
 800e788:	4a17      	ldr	r2, [pc, #92]	; (800e7e8 <POV_LEDs+0x1c8>)
 800e78a:	7953      	ldrb	r3, [r2, #5]
 800e78c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e790:	7153      	strb	r3, [r2, #5]
 800e792:	e78e      	b.n	800e6b2 <POV_LEDs+0x92>
    LED_SETTINGS[POV_2_G_REG] |= POV_2_G_PIN;
 800e794:	4a14      	ldr	r2, [pc, #80]	; (800e7e8 <POV_LEDs+0x1c8>)
 800e796:	7953      	ldrb	r3, [r2, #5]
 800e798:	f043 0308 	orr.w	r3, r3, #8
 800e79c:	7153      	strb	r3, [r2, #5]
 800e79e:	e790      	b.n	800e6c2 <POV_LEDs+0xa2>
    LED_SETTINGS[POV_3_G_REG] |= POV_3_G_PIN;
 800e7a0:	4a11      	ldr	r2, [pc, #68]	; (800e7e8 <POV_LEDs+0x1c8>)
 800e7a2:	7913      	ldrb	r3, [r2, #4]
 800e7a4:	f043 0320 	orr.w	r3, r3, #32
 800e7a8:	7113      	strb	r3, [r2, #4]
 800e7aa:	e792      	b.n	800e6d2 <POV_LEDs+0xb2>
    LED_SETTINGS[POV_4_G_REG] |= POV_4_G_PIN;
 800e7ac:	4a0e      	ldr	r2, [pc, #56]	; (800e7e8 <POV_LEDs+0x1c8>)
 800e7ae:	7913      	ldrb	r3, [r2, #4]
 800e7b0:	f043 0302 	orr.w	r3, r3, #2
 800e7b4:	7113      	strb	r3, [r2, #4]
 800e7b6:	e794      	b.n	800e6e2 <POV_LEDs+0xc2>
    LED_SETTINGS[POV_5_G_REG] |= POV_5_G_PIN;
 800e7b8:	4a0b      	ldr	r2, [pc, #44]	; (800e7e8 <POV_LEDs+0x1c8>)
 800e7ba:	7853      	ldrb	r3, [r2, #1]
 800e7bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7c0:	7053      	strb	r3, [r2, #1]
 800e7c2:	e796      	b.n	800e6f2 <POV_LEDs+0xd2>
    LED_SETTINGS[POV_6_G_REG] |= POV_6_G_PIN;
 800e7c4:	4a08      	ldr	r2, [pc, #32]	; (800e7e8 <POV_LEDs+0x1c8>)
 800e7c6:	7853      	ldrb	r3, [r2, #1]
 800e7c8:	f043 0308 	orr.w	r3, r3, #8
 800e7cc:	7053      	strb	r3, [r2, #1]
 800e7ce:	e798      	b.n	800e702 <POV_LEDs+0xe2>
    LED_SETTINGS[POV_7_G_REG] |= POV_7_G_PIN;
 800e7d0:	4a05      	ldr	r2, [pc, #20]	; (800e7e8 <POV_LEDs+0x1c8>)
 800e7d2:	7813      	ldrb	r3, [r2, #0]
 800e7d4:	f043 0320 	orr.w	r3, r3, #32
 800e7d8:	7013      	strb	r3, [r2, #0]
 800e7da:	e79a      	b.n	800e712 <POV_LEDs+0xf2>
    LED_SETTINGS[POV_8_G_REG] &= ~POV_8_G_PIN;
 800e7dc:	4a02      	ldr	r2, [pc, #8]	; (800e7e8 <POV_LEDs+0x1c8>)
 800e7de:	7813      	ldrb	r3, [r2, #0]
 800e7e0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800e7e4:	7013      	strb	r3, [r2, #0]
 800e7e6:	e79c      	b.n	800e722 <POV_LEDs+0x102>
 800e7e8:	200053e0 	.word	0x200053e0

0800e7ec <Flush_LEDS>:
  LED_SETTINGS[5] = 255;

  transmitToBuffer();
}

void Flush_LEDS(void) {
 800e7ec:	b508      	push	{r3, lr}
  LED_SETTINGS[0] = 255;
 800e7ee:	4b05      	ldr	r3, [pc, #20]	; (800e804 <Flush_LEDS+0x18>)
 800e7f0:	22ff      	movs	r2, #255	; 0xff
 800e7f2:	701a      	strb	r2, [r3, #0]
  LED_SETTINGS[1] = 255;
 800e7f4:	705a      	strb	r2, [r3, #1]
  LED_SETTINGS[2] = 255;
 800e7f6:	709a      	strb	r2, [r3, #2]
  LED_SETTINGS[3] = 255;
 800e7f8:	70da      	strb	r2, [r3, #3]
  LED_SETTINGS[4] = 255;
 800e7fa:	711a      	strb	r2, [r3, #4]
  LED_SETTINGS[5] = 255;
 800e7fc:	715a      	strb	r2, [r3, #5]

  transmitToBuffer();
 800e7fe:	f7ff fdc9 	bl	800e394 <transmitToBuffer>
 800e802:	bd08      	pop	{r3, pc}
 800e804:	200053e0 	.word	0x200053e0

0800e808 <Set_LED>:
}

void Set_LED(uint8_t reg, uint8_t pin, uint8_t state) {
 800e808:	b508      	push	{r3, lr}
  // turn on LED
  if (state == 1) {
 800e80a:	2a01      	cmp	r2, #1
 800e80c:	d007      	beq.n	800e81e <Set_LED+0x16>
    LED_SETTINGS[reg] &= ~pin;
  }
  // turn off LED
  else if (state == 0) {
 800e80e:	b91a      	cbnz	r2, 800e818 <Set_LED+0x10>
    LED_SETTINGS[reg] |= pin;
 800e810:	4a06      	ldr	r2, [pc, #24]	; (800e82c <Set_LED+0x24>)
 800e812:	5c13      	ldrb	r3, [r2, r0]
 800e814:	4319      	orrs	r1, r3
 800e816:	5411      	strb	r1, [r2, r0]
  }

  transmitToBuffer();
 800e818:	f7ff fdbc 	bl	800e394 <transmitToBuffer>
 800e81c:	bd08      	pop	{r3, pc}
    LED_SETTINGS[reg] &= ~pin;
 800e81e:	4a03      	ldr	r2, [pc, #12]	; (800e82c <Set_LED+0x24>)
 800e820:	5c13      	ldrb	r3, [r2, r0]
 800e822:	ea23 0101 	bic.w	r1, r3, r1
 800e826:	5411      	strb	r1, [r2, r0]
 800e828:	e7f6      	b.n	800e818 <Set_LED+0x10>
 800e82a:	bf00      	nop
 800e82c:	200053e0 	.word	0x200053e0

0800e830 <LED_State>:
}

// returns 1 if LED is on, 0 otherwise
// LED is on if the bit in LED_SETTINGS is zero (because its a sink circuit)
uint8_t LED_State(uint8_t reg, uint8_t pin) {
  if ((LED_SETTINGS[reg] & pin) != 0) {
 800e830:	4b03      	ldr	r3, [pc, #12]	; (800e840 <LED_State+0x10>)
 800e832:	5c1b      	ldrb	r3, [r3, r0]
 800e834:	420b      	tst	r3, r1
 800e836:	d101      	bne.n	800e83c <LED_State+0xc>
    return 0;  // LED is OFF
  } else {
    return 1;  // LED is ON
 800e838:	2001      	movs	r0, #1
  }
}
 800e83a:	4770      	bx	lr
    return 0;  // LED is OFF
 800e83c:	2000      	movs	r0, #0
 800e83e:	4770      	bx	lr
 800e840:	200053e0 	.word	0x200053e0

0800e844 <activateLidar>:
void deactiveLidarLED(void){
	LED_Lidar_Active = 0;
}

//turn on LIDAR (only works if 3.3V Power Switch is set (enabled) )
void activateLidar(void){
 800e844:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(VL_XSHUT_GPIO_Port, VL_XSHUT_Pin, GPIO_PIN_SET);
 800e846:	2201      	movs	r2, #1
 800e848:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e84c:	4801      	ldr	r0, [pc, #4]	; (800e854 <activateLidar+0x10>)
 800e84e:	f7f3 fcc8 	bl	80021e2 <HAL_GPIO_WritePin>
 800e852:	bd08      	pop	{r3, pc}
 800e854:	48000c00 	.word	0x48000c00

0800e858 <genMap>:
    HAL_GPIO_WritePin(VL_XSHUT_GPIO_Port, VL_XSHUT_Pin, GPIO_PIN_RESET);
}

// gen LED map for when disk is not spinning
void genMap(int16_t* measurement){
	lidar_map = 0x0001 << ( ((uint16_t) (*measurement / ((float) MEASUREMENT_DIVISOR)) ) % 16);
 800e858:	f9b0 3000 	ldrsh.w	r3, [r0]
 800e85c:	ee07 3a10 	vmov	s14, r3
 800e860:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e864:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800e868:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e86c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e870:	ee17 3a90 	vmov	r3, s15
 800e874:	f003 030f 	and.w	r3, r3, #15
 800e878:	2201      	movs	r2, #1
 800e87a:	fa02 f303 	lsl.w	r3, r2, r3
 800e87e:	4a01      	ldr	r2, [pc, #4]	; (800e884 <genMap+0x2c>)
 800e880:	8013      	strh	r3, [r2, #0]
 800e882:	4770      	bx	lr
 800e884:	200052e4 	.word	0x200052e4

0800e888 <genPOV_Map>:
}

// gen LED activation value for when disk is spinning
void genPOV_Map(int16_t* measurement){
	POV_map = ( ((uint16_t) (*measurement / ((float) MEASUREMENT_POV_DIVISOR)) ) % 64);
 800e888:	f9b0 3000 	ldrsh.w	r3, [r0]
 800e88c:	ee07 3a10 	vmov	s14, r3
 800e890:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e894:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e898:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e89c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e8a0:	ee17 3a90 	vmov	r3, s15
 800e8a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e8a8:	4a01      	ldr	r2, [pc, #4]	; (800e8b0 <genPOV_Map+0x28>)
 800e8aa:	6013      	str	r3, [r2, #0]
 800e8ac:	4770      	bx	lr
 800e8ae:	bf00      	nop
 800e8b0:	200052c4 	.word	0x200052c4

0800e8b4 <get_lidar_POV_map>:
}

uint32_t get_lidar_POV_map(void){
	return POV_map;
}
 800e8b4:	4b01      	ldr	r3, [pc, #4]	; (800e8bc <get_lidar_POV_map+0x8>)
 800e8b6:	6818      	ldr	r0, [r3, #0]
 800e8b8:	4770      	bx	lr
 800e8ba:	bf00      	nop
 800e8bc:	200052c4 	.word	0x200052c4

0800e8c0 <LidarMeasurementHandler>:

void LidarMeasurementHandler(volatile int16_t* measurement){
 800e8c0:	b510      	push	{r4, lr}
 800e8c2:	4604      	mov	r4, r0
	if(*measurement > MAX_LIDAR_MEASUREMENT){
 800e8c4:	8803      	ldrh	r3, [r0, #0]
 800e8c6:	b21b      	sxth	r3, r3
 800e8c8:	f240 5214 	movw	r2, #1300	; 0x514
 800e8cc:	4293      	cmp	r3, r2
 800e8ce:	dd0e      	ble.n	800e8ee <LidarMeasurementHandler+0x2e>
	    turnSoundOff();
 800e8d0:	f001 fb68 	bl	800ffa4 <turnSoundOff>
		*measurement = 1;
 800e8d4:	2301      	movs	r3, #1
 800e8d6:	8023      	strh	r3, [r4, #0]
	// flip the measurements so high frequencies are when you get close to the disk
	//*measurement = MAX_LIDAR_MEASUREMENT - *measurement;


	// calculate frequency of wavetable based on measurement
	calcLidarFreq(measurement);
 800e8d8:	4620      	mov	r0, r4
 800e8da:	f001 fbb5 	bl	8010048 <calcLidarFreq>

	// non-spinning LED display mode
	if(isButtonEnabled() == 1){
 800e8de:	f000 fa5d 	bl	800ed9c <isButtonEnabled>
 800e8e2:	2801      	cmp	r0, #1
 800e8e4:	d006      	beq.n	800e8f4 <LidarMeasurementHandler+0x34>
		genMap(measurement);
		POV_LEDs(lidar_map);
	}

	genPOV_Map(measurement);
 800e8e6:	4620      	mov	r0, r4
 800e8e8:	f7ff ffce 	bl	800e888 <genPOV_Map>
 800e8ec:	bd10      	pop	{r4, pc}
	    turnSoundOn();
 800e8ee:	f001 fb5f 	bl	800ffb0 <turnSoundOn>
 800e8f2:	e7f1      	b.n	800e8d8 <LidarMeasurementHandler+0x18>
		genMap(measurement);
 800e8f4:	4620      	mov	r0, r4
 800e8f6:	f7ff ffaf 	bl	800e858 <genMap>
		POV_LEDs(lidar_map);
 800e8fa:	4b02      	ldr	r3, [pc, #8]	; (800e904 <LidarMeasurementHandler+0x44>)
 800e8fc:	8818      	ldrh	r0, [r3, #0]
 800e8fe:	f7ff fe8f 	bl	800e620 <POV_LEDs>
 800e902:	e7f0      	b.n	800e8e6 <LidarMeasurementHandler+0x26>
 800e904:	200052e4 	.word	0x200052e4

0800e908 <lidarStop>:

	lidar_measurement  = ((uint16_t)packet[13]) << 8; // high byte
	lidar_measurement |= packet[14];      // low byte
}

void lidarStop(void){
 800e908:	b508      	push	{r3, lr}
	status = VL53L1_StopMeasurement(Dev);
 800e90a:	4b03      	ldr	r3, [pc, #12]	; (800e918 <lidarStop+0x10>)
 800e90c:	6818      	ldr	r0, [r3, #0]
 800e90e:	f7f9 ff25 	bl	800875c <VL53L1_StopMeasurement>
 800e912:	4b02      	ldr	r3, [pc, #8]	; (800e91c <lidarStop+0x14>)
 800e914:	6018      	str	r0, [r3, #0]
 800e916:	bd08      	pop	{r3, pc}
 800e918:	20000040 	.word	0x20000040
 800e91c:	200059b0 	.word	0x200059b0

0800e920 <LidarMeasurement>:
{
 800e920:	b5d0      	push	{r4, r6, r7, lr}
  activateLidar();
 800e922:	f7ff ff8f 	bl	800e844 <activateLidar>
  HAL_Delay(500);
 800e926:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e92a:	f7f2 fb0f 	bl	8000f4c <HAL_Delay>
  osDelay(5);
 800e92e:	2005      	movs	r0, #5
 800e930:	f7fc f890 	bl	800aa54 <osDelay>
  Dev->I2cHandle = &hi2c3;
 800e934:	4c40      	ldr	r4, [pc, #256]	; (800ea38 <LidarMeasurement+0x118>)
 800e936:	6820      	ldr	r0, [r4, #0]
 800e938:	4b40      	ldr	r3, [pc, #256]	; (800ea3c <LidarMeasurement+0x11c>)
 800e93a:	f8c0 33a0 	str.w	r3, [r0, #928]	; 0x3a0
  Dev->I2cDevAddr = 0x52;
 800e93e:	2352      	movs	r3, #82	; 0x52
 800e940:	f880 3398 	strb.w	r3, [r0, #920]	; 0x398
  status = VL53L1_WaitDeviceBooted(Dev);
 800e944:	f7f9 fbd1 	bl	80080ea <VL53L1_WaitDeviceBooted>
  status = VL53L1_DataInit(Dev);
 800e948:	6820      	ldr	r0, [r4, #0]
 800e94a:	f7f9 fc85 	bl	8008258 <VL53L1_DataInit>
  status = VL53L1_StaticInit(Dev);
 800e94e:	6820      	ldr	r0, [r4, #0]
 800e950:	f7f9 fe40 	bl	80085d4 <VL53L1_StaticInit>
  status = VL53L1_SetDistanceMode(Dev, VL53L1_DISTANCEMODE_SHORT);
 800e954:	2101      	movs	r1, #1
 800e956:	6820      	ldr	r0, [r4, #0]
 800e958:	f7f9 fbcd 	bl	80080f6 <VL53L1_SetDistanceMode>
  status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(Dev, 20000);
 800e95c:	f644 6120 	movw	r1, #20000	; 0x4e20
 800e960:	6820      	ldr	r0, [r4, #0]
 800e962:	f7f9 fd6d 	bl	8008440 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
  status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev, 22);
 800e966:	2116      	movs	r1, #22
 800e968:	6820      	ldr	r0, [r4, #0]
 800e96a:	f7f9 fc0f 	bl	800818c <VL53L1_SetInterMeasurementPeriodMilliSeconds>
  status = VL53L1_StartMeasurement(Dev);
 800e96e:	6820      	ldr	r0, [r4, #0]
 800e970:	f7f9 feb4 	bl	80086dc <VL53L1_StartMeasurement>
  status = VL53L1_ClearInterruptAndStartMeasurement(Dev);
 800e974:	6820      	ldr	r0, [r4, #0]
 800e976:	f7f9 fefc 	bl	8008772 <VL53L1_ClearInterruptAndStartMeasurement>
 800e97a:	e015      	b.n	800e9a8 <LidarMeasurement+0x88>
				measurement_hist = RangingData.RangeMilliMeter;
 800e97c:	4830      	ldr	r0, [pc, #192]	; (800ea40 <LidarMeasurement+0x120>)
 800e97e:	f930 2f18 	ldrsh.w	r2, [r0, #24]!
 800e982:	801a      	strh	r2, [r3, #0]
				LidarMeasurementHandler(&RangingData.RangeMilliMeter);
 800e984:	f7ff ff9c 	bl	800e8c0 <LidarMeasurementHandler>
 800e988:	e004      	b.n	800e994 <LidarMeasurement+0x74>
				measurement_hist = RangingData.RangeMilliMeter;
 800e98a:	4b2e      	ldr	r3, [pc, #184]	; (800ea44 <LidarMeasurement+0x124>)
 800e98c:	801c      	strh	r4, [r3, #0]
				LidarMeasurementHandler(&RangingData.RangeMilliMeter);
 800e98e:	482e      	ldr	r0, [pc, #184]	; (800ea48 <LidarMeasurement+0x128>)
 800e990:	f7ff ff96 	bl	800e8c0 <LidarMeasurementHandler>
		taskEXIT_CRITICAL();
 800e994:	f7fc faa0 	bl	800aed8 <vPortExitCritical>
		status = VL53L1_ClearInterruptAndStartMeasurement(Dev);
 800e998:	4b27      	ldr	r3, [pc, #156]	; (800ea38 <LidarMeasurement+0x118>)
 800e99a:	6818      	ldr	r0, [r3, #0]
 800e99c:	f7f9 fee9 	bl	8008772 <VL53L1_ClearInterruptAndStartMeasurement>
		if(isLidarModeActive() == 0) lidarStop();
 800e9a0:	f001 faf0 	bl	800ff84 <isLidarModeActive>
 800e9a4:	2800      	cmp	r0, #0
 800e9a6:	d03a      	beq.n	800ea1e <LidarMeasurement+0xfe>
	  	osSemaphoreWait( lidarSampleReadySemaphoreHandle, osWaitForever);
 800e9a8:	f04f 31ff 	mov.w	r1, #4294967295
 800e9ac:	4b27      	ldr	r3, [pc, #156]	; (800ea4c <LidarMeasurement+0x12c>)
 800e9ae:	6818      	ldr	r0, [r3, #0]
 800e9b0:	f7fc f958 	bl	800ac64 <osSemaphoreWait>
		status = VL53L1_GetRangingMeasurementData(Dev, &RangingData);
 800e9b4:	4922      	ldr	r1, [pc, #136]	; (800ea40 <LidarMeasurement+0x120>)
 800e9b6:	4b20      	ldr	r3, [pc, #128]	; (800ea38 <LidarMeasurement+0x118>)
 800e9b8:	6818      	ldr	r0, [r3, #0]
 800e9ba:	f7f9 fedf 	bl	800877c <VL53L1_GetRangingMeasurementData>
 800e9be:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 800e9c0:	f7fc fa68 	bl	800ae94 <vPortEnterCritical>
		if(status == VL53L1_RANGESTATUS_RANGE_VALID){
 800e9c4:	2c00      	cmp	r4, #0
 800e9c6:	d1e5      	bne.n	800e994 <LidarMeasurement+0x74>
			if(measurement_hist == -1){
 800e9c8:	4b1e      	ldr	r3, [pc, #120]	; (800ea44 <LidarMeasurement+0x124>)
 800e9ca:	f9b3 0000 	ldrsh.w	r0, [r3]
 800e9ce:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e9d2:	d0d3      	beq.n	800e97c <LidarMeasurement+0x5c>
			else if(abs(measurement_hist-RangingData.RangeMilliMeter) > THRESH_MEAS){
 800e9d4:	4b1a      	ldr	r3, [pc, #104]	; (800ea40 <LidarMeasurement+0x120>)
 800e9d6:	f9b3 4018 	ldrsh.w	r4, [r3, #24]
 800e9da:	1b03      	subs	r3, r0, r4
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	bfb8      	it	lt
 800e9e0:	425b      	neglt	r3, r3
 800e9e2:	2b03      	cmp	r3, #3
 800e9e4:	dcd1      	bgt.n	800e98a <LidarMeasurement+0x6a>
				measurement_hist = measurement_hist * ALPHA_MEAS + RangingData.RangeMilliMeter * BETA_MEAS;
 800e9e6:	f7f1 fd5d 	bl	80004a4 <__aeabi_i2d>
 800e9ea:	a30f      	add	r3, pc, #60	; (adr r3, 800ea28 <LidarMeasurement+0x108>)
 800e9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9f0:	f7f1 fdbe 	bl	8000570 <__aeabi_dmul>
 800e9f4:	4606      	mov	r6, r0
 800e9f6:	460f      	mov	r7, r1
 800e9f8:	4620      	mov	r0, r4
 800e9fa:	f7f1 fd53 	bl	80004a4 <__aeabi_i2d>
 800e9fe:	a30c      	add	r3, pc, #48	; (adr r3, 800ea30 <LidarMeasurement+0x110>)
 800ea00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea04:	f7f1 fdb4 	bl	8000570 <__aeabi_dmul>
 800ea08:	4602      	mov	r2, r0
 800ea0a:	460b      	mov	r3, r1
 800ea0c:	4630      	mov	r0, r6
 800ea0e:	4639      	mov	r1, r7
 800ea10:	f7f1 fbfc 	bl	800020c <__adddf3>
 800ea14:	f7f2 f85c 	bl	8000ad0 <__aeabi_d2iz>
 800ea18:	4b0a      	ldr	r3, [pc, #40]	; (800ea44 <LidarMeasurement+0x124>)
 800ea1a:	8018      	strh	r0, [r3, #0]
 800ea1c:	e7ba      	b.n	800e994 <LidarMeasurement+0x74>
		if(isLidarModeActive() == 0) lidarStop();
 800ea1e:	f7ff ff73 	bl	800e908 <lidarStop>
 800ea22:	e7c1      	b.n	800e9a8 <LidarMeasurement+0x88>
 800ea24:	f3af 8000 	nop.w
 800ea28:	cccccccd 	.word	0xcccccccd
 800ea2c:	3feccccc 	.word	0x3feccccc
 800ea30:	9999999a 	.word	0x9999999a
 800ea34:	3fb99999 	.word	0x3fb99999
 800ea38:	20000040 	.word	0x20000040
 800ea3c:	20005520 	.word	0x20005520
 800ea40:	200052c8 	.word	0x200052c8
 800ea44:	20000044 	.word	0x20000044
 800ea48:	200052e0 	.word	0x200052e0
 800ea4c:	20005518 	.word	0x20005518

0800ea50 <lidarStart>:
}

void lidarStart(void){
 800ea50:	b510      	push	{r4, lr}
	status = VL53L1_StartMeasurement(Dev);
 800ea52:	4c05      	ldr	r4, [pc, #20]	; (800ea68 <lidarStart+0x18>)
 800ea54:	6820      	ldr	r0, [r4, #0]
 800ea56:	f7f9 fe41 	bl	80086dc <VL53L1_StartMeasurement>
 800ea5a:	4b04      	ldr	r3, [pc, #16]	; (800ea6c <lidarStart+0x1c>)
 800ea5c:	6018      	str	r0, [r3, #0]
	VL53L1_ClearInterruptAndStartMeasurement(Dev);
 800ea5e:	6820      	ldr	r0, [r4, #0]
 800ea60:	f7f9 fe87 	bl	8008772 <VL53L1_ClearInterruptAndStartMeasurement>
 800ea64:	bd10      	pop	{r4, pc}
 800ea66:	bf00      	nop
 800ea68:	20000040 	.word	0x20000040
 800ea6c:	200059b0 	.word	0x200059b0

0800ea70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ea70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea72:	b0bd      	sub	sp, #244	; 0xf4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ea74:	2244      	movs	r2, #68	; 0x44
 800ea76:	2100      	movs	r1, #0
 800ea78:	a82b      	add	r0, sp, #172	; 0xac
 800ea7a:	f002 faa2 	bl	8010fc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ea7e:	2400      	movs	r4, #0
 800ea80:	9426      	str	r4, [sp, #152]	; 0x98
 800ea82:	9427      	str	r4, [sp, #156]	; 0x9c
 800ea84:	9428      	str	r4, [sp, #160]	; 0xa0
 800ea86:	9429      	str	r4, [sp, #164]	; 0xa4
 800ea88:	942a      	str	r4, [sp, #168]	; 0xa8
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ea8a:	2298      	movs	r2, #152	; 0x98
 800ea8c:	4621      	mov	r1, r4
 800ea8e:	4668      	mov	r0, sp
 800ea90:	f002 fa97 	bl	8010fc2 <memset>

  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800ea94:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ea98:	f7f4 ff68 	bl	800396c <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
  /**Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800ea9c:	f7f4 ff46 	bl	800392c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800eaa0:	4a22      	ldr	r2, [pc, #136]	; (800eb2c <SystemClock_Config+0xbc>)
 800eaa2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800eaa6:	f023 0318 	bic.w	r3, r3, #24
 800eaaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800eaae:	2305      	movs	r3, #5
 800eab0:	932b      	str	r3, [sp, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800eab2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800eab6:	932c      	str	r3, [sp, #176]	; 0xb0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800eab8:	2701      	movs	r7, #1
 800eaba:	972d      	str	r7, [sp, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800eabc:	2502      	movs	r5, #2
 800eabe:	9535      	str	r5, [sp, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800eac0:	2603      	movs	r6, #3
 800eac2:	9636      	str	r6, [sp, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800eac4:	9737      	str	r7, [sp, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 20;
 800eac6:	2314      	movs	r3, #20
 800eac8:	9338      	str	r3, [sp, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800eaca:	2304      	movs	r3, #4
 800eacc:	9339      	str	r3, [sp, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800eace:	953a      	str	r5, [sp, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800ead0:	953b      	str	r5, [sp, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ead2:	a82b      	add	r0, sp, #172	; 0xac
 800ead4:	f7f5 f8d6 	bl	8003c84 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ead8:	230f      	movs	r3, #15
 800eada:	9326      	str	r3, [sp, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800eadc:	9627      	str	r6, [sp, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800eade:	9428      	str	r4, [sp, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800eae0:	9429      	str	r4, [sp, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800eae2:	942a      	str	r4, [sp, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800eae4:	4631      	mov	r1, r6
 800eae6:	a826      	add	r0, sp, #152	; 0x98
 800eae8:	f7f5 fba6 	bl	8004238 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 800eaec:	4b10      	ldr	r3, [pc, #64]	; (800eb30 <SystemClock_Config+0xc0>)
 800eaee:	9300      	str	r3, [sp, #0]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800eaf0:	940f      	str	r4, [sp, #60]	; 0x3c
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800eaf2:	9411      	str	r4, [sp, #68]	; 0x44
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800eaf4:	9415      	str	r4, [sp, #84]	; 0x54
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800eaf6:	9416      	str	r4, [sp, #88]	; 0x58
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800eaf8:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800eafa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800eafe:	9320      	str	r3, [sp, #128]	; 0x80
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800eb00:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eb04:	9325      	str	r3, [sp, #148]	; 0x94
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 800eb06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800eb0a:	931e      	str	r3, [sp, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800eb0c:	9601      	str	r6, [sp, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800eb0e:	9702      	str	r7, [sp, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800eb10:	2308      	movs	r3, #8
 800eb12:	9303      	str	r3, [sp, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800eb14:	9504      	str	r5, [sp, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800eb16:	9505      	str	r5, [sp, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800eb18:	9506      	str	r5, [sp, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800eb1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800eb1e:	9307      	str	r3, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800eb20:	4668      	mov	r0, sp
 800eb22:	f7f5 fe37 	bl	8004794 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800eb26:	b03d      	add	sp, #244	; 0xf4
 800eb28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb2a:	bf00      	nop
 800eb2c:	40021000 	.word	0x40021000
 800eb30:	000a41c5 	.word	0x000a41c5

0800eb34 <main>:
{
 800eb34:	b508      	push	{r3, lr}
  HAL_Init();
 800eb36:	f7f2 f9eb 	bl	8000f10 <HAL_Init>
  SystemClock_Config();
 800eb3a:	f7ff ff99 	bl	800ea70 <SystemClock_Config>
  MX_GPIO_Init();
 800eb3e:	f7fe ffe1 	bl	800db04 <MX_GPIO_Init>
  MX_DMA_Init();
 800eb42:	f7fe fd93 	bl	800d66c <MX_DMA_Init>
  MX_TIM6_Init();
 800eb46:	f000 fe81 	bl	800f84c <MX_TIM6_Init>
  MX_DAC1_Init();
 800eb4a:	f7fe fd01 	bl	800d550 <MX_DAC1_Init>
  MX_SPI2_Init();
 800eb4e:	f000 fc6b 	bl	800f428 <MX_SPI2_Init>
  MX_TIM1_Init();
 800eb52:	f000 ffb3 	bl	800fabc <MX_TIM1_Init>
  MX_TIM16_Init();
 800eb56:	f000 fec7 	bl	800f8e8 <MX_TIM16_Init>
  MX_TIM17_Init();
 800eb5a:	f000 fedd 	bl	800f918 <MX_TIM17_Init>
  MX_I2C1_Init();
 800eb5e:	f7ff f961 	bl	800de24 <MX_I2C1_Init>
  MX_I2C3_Init();
 800eb62:	f7ff f9b7 	bl	800ded4 <MX_I2C3_Init>
  MX_USART3_UART_Init();
 800eb66:	f001 f85b 	bl	800fc20 <MX_USART3_UART_Init>
  MX_SDMMC1_SD_Init();
 800eb6a:	f000 fbf7 	bl	800f35c <MX_SDMMC1_SD_Init>
  MX_RTC_Init();
 800eb6e:	f000 fbc9 	bl	800f304 <MX_RTC_Init>
  MX_USART1_UART_Init();
 800eb72:	f001 f821 	bl	800fbb8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800eb76:	f7fe fa31 	bl	800cfdc <MX_ADC1_Init>
  MX_TIM7_Init();
 800eb7a:	f000 fe8f 	bl	800f89c <MX_TIM7_Init>
  MX_I2C2_Init();
 800eb7e:	f7ff f97d 	bl	800de7c <MX_I2C2_Init>
  MX_TIM3_Init();
 800eb82:	f000 fdef 	bl	800f764 <MX_TIM3_Init>
  MX_TIM4_Init();
 800eb86:	f000 fe27 	bl	800f7d8 <MX_TIM4_Init>
  MX_COMP1_Init();
 800eb8a:	f7fe fc91 	bl	800d4b0 <MX_COMP1_Init>
  HAL_GPIO_WritePin(POWER_SWITCH_GPIO_Port, POWER_SWITCH_Pin, GPIO_PIN_SET);
 800eb8e:	4c20      	ldr	r4, [pc, #128]	; (800ec10 <main+0xdc>)
 800eb90:	2201      	movs	r2, #1
 800eb92:	2110      	movs	r1, #16
 800eb94:	4620      	mov	r0, r4
 800eb96:	f7f3 fb24 	bl	80021e2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BT_EN_GPIO_Port, BT_EN_Pin, GPIO_PIN_SET);
 800eb9a:	2201      	movs	r2, #1
 800eb9c:	4611      	mov	r1, r2
 800eb9e:	4620      	mov	r0, r4
 800eba0:	f7f3 fb1f 	bl	80021e2 <HAL_GPIO_WritePin>
  activateLidar();
 800eba4:	f7ff fe4e 	bl	800e844 <activateLidar>
  HAL_Delay(100);
 800eba8:	2064      	movs	r0, #100	; 0x64
 800ebaa:	f7f2 f9cf 	bl	8000f4c <HAL_Delay>
  HAL_TIM_Base_Start(&htim1);
 800ebae:	4c19      	ldr	r4, [pc, #100]	; (800ec14 <main+0xe0>)
 800ebb0:	4620      	mov	r0, r4
 800ebb2:	f7f7 f94d 	bl	8005e50 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800ebb6:	2100      	movs	r1, #0
 800ebb8:	4620      	mov	r0, r4
 800ebba:	f7f7 fc77 	bl	80064ac <HAL_TIM_PWM_Start>
  Setup_Cap_Touch();
 800ebbe:	f7fe fa81 	bl	800d0c4 <Setup_Cap_Touch>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800ebc2:	4a15      	ldr	r2, [pc, #84]	; (800ec18 <main+0xe4>)
 800ebc4:	68d3      	ldr	r3, [r2, #12]
 800ebc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ebca:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0; // reset the counter
 800ebcc:	4b13      	ldr	r3, [pc, #76]	; (800ec1c <main+0xe8>)
 800ebce:	2500      	movs	r5, #0
 800ebd0:	605d      	str	r5, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // enable the counter
 800ebd2:	681a      	ldr	r2, [r3, #0]
 800ebd4:	f042 0201 	orr.w	r2, r2, #1
 800ebd8:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start(&htim6);
 800ebda:	4811      	ldr	r0, [pc, #68]	; (800ec20 <main+0xec>)
 800ebdc:	f7f7 f938 	bl	8005e50 <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800ebe0:	4c10      	ldr	r4, [pc, #64]	; (800ec24 <main+0xf0>)
 800ebe2:	4629      	mov	r1, r5
 800ebe4:	4620      	mov	r0, r4
 800ebe6:	f7f2 fe93 	bl	8001910 <HAL_DAC_Start>
  prepBuffer(&hdac1);
 800ebea:	4620      	mov	r0, r4
 800ebec:	f002 f80a 	bl	8010c04 <prepBuffer>
  Flush_LEDS();
 800ebf0:	f7ff fdfc 	bl	800e7ec <Flush_LEDS>
  HAL_GPIO_WritePin(HALL_CNTRL_GPIO_Port, HALL_CNTRL_Pin, GPIO_PIN_SET);
 800ebf4:	2201      	movs	r2, #1
 800ebf6:	2140      	movs	r1, #64	; 0x40
 800ebf8:	480b      	ldr	r0, [pc, #44]	; (800ec28 <main+0xf4>)
 800ebfa:	f7f3 faf2 	bl	80021e2 <HAL_GPIO_WritePin>
  HAL_COMP_Start(&hcomp1);
 800ebfe:	480b      	ldr	r0, [pc, #44]	; (800ec2c <main+0xf8>)
 800ec00:	f7f2 fdca 	bl	8001798 <HAL_COMP_Start>
  MX_FREERTOS_Init();
 800ec04:	f7fe ff6a 	bl	800dadc <MX_FREERTOS_Init>
  osKernelStart();
 800ec08:	f7fb ff05 	bl	800aa16 <osKernelStart>
 800ec0c:	e7fe      	b.n	800ec0c <main+0xd8>
 800ec0e:	bf00      	nop
 800ec10:	48001000 	.word	0x48001000
 800ec14:	20005c04 	.word	0x20005c04
 800ec18:	e000edf0 	.word	0xe000edf0
 800ec1c:	e0001000 	.word	0xe0001000
 800ec20:	20005bc4 	.word	0x20005bc4
 800ec24:	20005498 	.word	0x20005498
 800ec28:	48000c00 	.word	0x48000c00
 800ec2c:	2000546c 	.word	0x2000546c

0800ec30 <HAL_COMP_TriggerCallback>:
//	else if(RPS < (15*RPS_LED_THRESH)){
//		ledOut2(15);
//	}
//}

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp){
 800ec30:	b508      	push	{r3, lr}
	HALL_Handler();
 800ec32:	f7ff f8a5 	bl	800dd80 <HALL_Handler>
 800ec36:	bd08      	pop	{r3, pc}

0800ec38 <HAL_GPIO_EXTI_Callback>:
	POV_LEDs(POV_map3);
}

//volatile uint8_t LED_state = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800ec38:	b508      	push	{r3, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if(GPIO_Pin == CAP_ALERT_Pin){
 800ec3a:	2820      	cmp	r0, #32
 800ec3c:	d008      	beq.n	800ec50 <HAL_GPIO_EXTI_Callback+0x18>
	  //
	  if (isCapModeActive()) osSemaphoreRelease (capSampleSemaphoreHandle);
	  //if (isCapModeActive()) Sample_Cap_Touch();
	  //Sample_Cap_Touch();
  }
  else if(GPIO_Pin == VL_INT_Pin){
 800ec3e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800ec42:	d00e      	beq.n	800ec62 <HAL_GPIO_EXTI_Callback+0x2a>
//		  HAL_GPIO_TogglePin(LED_LAT_GPIO_Port, LED_LAT_Pin);
//		  LidarMeasurement();
//	  }
	  //LidarMeasurement();
  }
  else if(GPIO_Pin == HALL_INT_Pin){
 800ec44:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800ec48:	d001      	beq.n	800ec4e <HAL_GPIO_EXTI_Callback+0x16>
	  //LED_state++;
//	  Set_LED(BUTTON_3_G_REG, BUTTON_3_G_PIN, LED_state%2);
	  //HALL_Handler();
  }
  else{
	  ResistiveTouchSampler();
 800ec4a:	f000 f8ad 	bl	800eda8 <ResistiveTouchSampler>
 800ec4e:	bd08      	pop	{r3, pc}
	  if (isCapModeActive()) osSemaphoreRelease (capSampleSemaphoreHandle);
 800ec50:	f001 f9a0 	bl	800ff94 <isCapModeActive>
 800ec54:	2800      	cmp	r0, #0
 800ec56:	d0fa      	beq.n	800ec4e <HAL_GPIO_EXTI_Callback+0x16>
 800ec58:	4b06      	ldr	r3, [pc, #24]	; (800ec74 <HAL_GPIO_EXTI_Callback+0x3c>)
 800ec5a:	6818      	ldr	r0, [r3, #0]
 800ec5c:	f7fc f83a 	bl	800acd4 <osSemaphoreRelease>
 800ec60:	bd08      	pop	{r3, pc}
	  if(isLidarModeActive()) osSemaphoreRelease (lidarSampleReadySemaphoreHandle);
 800ec62:	f001 f98f 	bl	800ff84 <isLidarModeActive>
 800ec66:	2800      	cmp	r0, #0
 800ec68:	d0f1      	beq.n	800ec4e <HAL_GPIO_EXTI_Callback+0x16>
 800ec6a:	4b03      	ldr	r3, [pc, #12]	; (800ec78 <HAL_GPIO_EXTI_Callback+0x40>)
 800ec6c:	6818      	ldr	r0, [r3, #0]
 800ec6e:	f7fc f831 	bl	800acd4 <osSemaphoreRelease>
 800ec72:	bd08      	pop	{r3, pc}
 800ec74:	20005468 	.word	0x20005468
 800ec78:	20005518 	.word	0x20005518

0800ec7c <HAL_SPI_TxCpltCallback>:
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 800ec7c:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_SET);
 800ec7e:	2201      	movs	r2, #1
 800ec80:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ec84:	4804      	ldr	r0, [pc, #16]	; (800ec98 <HAL_SPI_TxCpltCallback+0x1c>)
 800ec86:	f7f3 faac 	bl	80021e2 <HAL_GPIO_WritePin>

	if (LED_mutex_id != NULL)  {
 800ec8a:	4b04      	ldr	r3, [pc, #16]	; (800ec9c <HAL_SPI_TxCpltCallback+0x20>)
 800ec8c:	6818      	ldr	r0, [r3, #0]
 800ec8e:	b108      	cbz	r0, 800ec94 <HAL_SPI_TxCpltCallback+0x18>
		osMutexRelease(LED_mutex_id);
 800ec90:	f7fb ffa4 	bl	800abdc <osMutexRelease>
 800ec94:	bd08      	pop	{r3, pc}
 800ec96:	bf00      	nop
 800ec98:	48001000 	.word	0x48001000
 800ec9c:	200053d0 	.word	0x200053d0

0800eca0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800eca0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800eca2:	6803      	ldr	r3, [r0, #0]
 800eca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eca8:	d006      	beq.n	800ecb8 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */
  else if (htim->Instance == TIM3) {
 800ecaa:	4a08      	ldr	r2, [pc, #32]	; (800eccc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800ecac:	4293      	cmp	r3, r2
 800ecae:	d006      	beq.n	800ecbe <HAL_TIM_PeriodElapsedCallback+0x1e>
    POV_Update();
  }
  else if (htim->Instance == TIM4) {
 800ecb0:	4a07      	ldr	r2, [pc, #28]	; (800ecd0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800ecb2:	4293      	cmp	r3, r2
 800ecb4:	d006      	beq.n	800ecc4 <HAL_TIM_PeriodElapsedCallback+0x24>
 800ecb6:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 800ecb8:	f7f2 f93a 	bl	8000f30 <HAL_IncTick>
 800ecbc:	bd08      	pop	{r3, pc}
    POV_Update();
 800ecbe:	f7ff fb8b 	bl	800e3d8 <POV_Update>
 800ecc2:	bd08      	pop	{r3, pc}
    enable_buttons();
 800ecc4:	f000 f84a 	bl	800ed5c <enable_buttons>
  }
//  else if (htim->Instance == TIM6) {
//	  HAL_GPIO_TogglePin(LED_LAT_GPIO_Port, LED_LAT_Pin);
//    }
  /* USER CODE END Callback 1 */
}
 800ecc8:	e7f5      	b.n	800ecb6 <HAL_TIM_PeriodElapsedCallback+0x16>
 800ecca:	bf00      	nop
 800eccc:	40000400 	.word	0x40000400
 800ecd0:	40000800 	.word	0x40000800

0800ecd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ecd4:	4770      	bx	lr
	...

0800ecd8 <getBitCrush>:
	}
}

uint8_t getBitCrush(void){
  return bit_crush;
}
 800ecd8:	4b01      	ldr	r3, [pc, #4]	; (800ece0 <getBitCrush+0x8>)
 800ecda:	7818      	ldrb	r0, [r3, #0]
 800ecdc:	4770      	bx	lr
 800ecde:	bf00      	nop
 800ece0:	200052e7 	.word	0x200052e7

0800ece4 <buttonStateMachine>:

void buttonStateMachine(void){
 800ece4:	b508      	push	{r3, lr}
	// if accelerometer is enabled, start FreeRTOS Thread Timer
	if( (LED_State(BUTTON_4_G_REG, BUTTON_4_G_PIN) == LED_ON) && (accTimer == 0)){
 800ece6:	2120      	movs	r1, #32
 800ece8:	2001      	movs	r0, #1
 800ecea:	f7ff fda1 	bl	800e830 <LED_State>
 800ecee:	2801      	cmp	r0, #1
 800ecf0:	d015      	beq.n	800ed1e <buttonStateMachine+0x3a>
		osTimerStart(accSampleTimerHandle, 20);
		accTimer = 1;
	}else if ( (LED_State(BUTTON_4_G_REG, BUTTON_4_G_PIN) == LED_OFF) && (accTimer == 1) ){
 800ecf2:	2120      	movs	r1, #32
 800ecf4:	2001      	movs	r0, #1
 800ecf6:	f7ff fd9b 	bl	800e830 <LED_State>
 800ecfa:	b918      	cbnz	r0, 800ed04 <buttonStateMachine+0x20>
 800ecfc:	4b15      	ldr	r3, [pc, #84]	; (800ed54 <buttonStateMachine+0x70>)
 800ecfe:	781b      	ldrb	r3, [r3, #0]
 800ed00:	2b01      	cmp	r3, #1
 800ed02:	d019      	beq.n	800ed38 <buttonStateMachine+0x54>
		osTimerStop(accSampleTimerHandle);
		accTimer = 0;

	}

	if(LED_State(BUTTON_5_G_REG, BUTTON_5_G_PIN)){
 800ed04:	2180      	movs	r1, #128	; 0x80
 800ed06:	2000      	movs	r0, #0
 800ed08:	f7ff fd92 	bl	800e830 <LED_State>
 800ed0c:	b9e0      	cbnz	r0, 800ed48 <buttonStateMachine+0x64>
		turnOnLidarSounds();
	}
	else if(LED_State(BUTTON_6_G_REG, BUTTON_6_G_PIN)){
 800ed0e:	2108      	movs	r1, #8
 800ed10:	2000      	movs	r0, #0
 800ed12:	f7ff fd8d 	bl	800e830 <LED_State>
 800ed16:	b9d0      	cbnz	r0, 800ed4e <buttonStateMachine+0x6a>
		turnOnCapSounds();
	}else{
		turnOffSounds();
 800ed18:	f001 f984 	bl	8010024 <turnOffSounds>
 800ed1c:	bd08      	pop	{r3, pc}
	if( (LED_State(BUTTON_4_G_REG, BUTTON_4_G_PIN) == LED_ON) && (accTimer == 0)){
 800ed1e:	4b0d      	ldr	r3, [pc, #52]	; (800ed54 <buttonStateMachine+0x70>)
 800ed20:	781b      	ldrb	r3, [r3, #0]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d1e5      	bne.n	800ecf2 <buttonStateMachine+0xe>
		osTimerStart(accSampleTimerHandle, 20);
 800ed26:	2114      	movs	r1, #20
 800ed28:	4b0b      	ldr	r3, [pc, #44]	; (800ed58 <buttonStateMachine+0x74>)
 800ed2a:	6818      	ldr	r0, [r3, #0]
 800ed2c:	f7fb feb0 	bl	800aa90 <osTimerStart>
		accTimer = 1;
 800ed30:	2201      	movs	r2, #1
 800ed32:	4b08      	ldr	r3, [pc, #32]	; (800ed54 <buttonStateMachine+0x70>)
 800ed34:	701a      	strb	r2, [r3, #0]
 800ed36:	e7e5      	b.n	800ed04 <buttonStateMachine+0x20>
		osTimerStop(accSampleTimerHandle);
 800ed38:	4b07      	ldr	r3, [pc, #28]	; (800ed58 <buttonStateMachine+0x74>)
 800ed3a:	6818      	ldr	r0, [r3, #0]
 800ed3c:	f7fb fede 	bl	800aafc <osTimerStop>
		accTimer = 0;
 800ed40:	2200      	movs	r2, #0
 800ed42:	4b04      	ldr	r3, [pc, #16]	; (800ed54 <buttonStateMachine+0x70>)
 800ed44:	701a      	strb	r2, [r3, #0]
 800ed46:	e7dd      	b.n	800ed04 <buttonStateMachine+0x20>
		turnOnLidarSounds();
 800ed48:	f001 f938 	bl	800ffbc <turnOnLidarSounds>
 800ed4c:	bd08      	pop	{r3, pc}
		turnOnCapSounds();
 800ed4e:	f001 f94d 	bl	800ffec <turnOnCapSounds>
 800ed52:	bd08      	pop	{r3, pc}
 800ed54:	200052e6 	.word	0x200052e6
 800ed58:	200053cc 	.word	0x200053cc

0800ed5c <enable_buttons>:
//		HAL_TIM_Base_Stop_IT(&htim4);
//		HAL_TIM_Base_Start_IT(&htim4);
	}
}

void enable_buttons(void){
 800ed5c:	b508      	push	{r3, lr}
	//taskENTER_CRITICAL();

	HAL_TIM_Base_Stop_IT(&htim4);
 800ed5e:	480b      	ldr	r0, [pc, #44]	; (800ed8c <enable_buttons+0x30>)
 800ed60:	f7f7 f8aa 	bl	8005eb8 <HAL_TIM_Base_Stop_IT>
	LED_SETTINGS[0] = temp_buffer[0];
 800ed64:	4a0a      	ldr	r2, [pc, #40]	; (800ed90 <enable_buttons+0x34>)
 800ed66:	7811      	ldrb	r1, [r2, #0]
 800ed68:	4b0a      	ldr	r3, [pc, #40]	; (800ed94 <enable_buttons+0x38>)
 800ed6a:	7019      	strb	r1, [r3, #0]
	LED_SETTINGS[1] = temp_buffer[1];
 800ed6c:	7851      	ldrb	r1, [r2, #1]
 800ed6e:	7059      	strb	r1, [r3, #1]
	LED_SETTINGS[2] = temp_buffer[2];
 800ed70:	7891      	ldrb	r1, [r2, #2]
 800ed72:	7099      	strb	r1, [r3, #2]
	LED_SETTINGS[3] = temp_buffer[3];
 800ed74:	78d1      	ldrb	r1, [r2, #3]
 800ed76:	70d9      	strb	r1, [r3, #3]
	LED_SETTINGS[4] = temp_buffer[4];
 800ed78:	7911      	ldrb	r1, [r2, #4]
 800ed7a:	7119      	strb	r1, [r3, #4]
	LED_SETTINGS[5] = temp_buffer[5];
 800ed7c:	7952      	ldrb	r2, [r2, #5]
 800ed7e:	715a      	strb	r2, [r3, #5]
	transmitToBuffer();
 800ed80:	f7ff fb08 	bl	800e394 <transmitToBuffer>
	button_state = 1;
 800ed84:	2201      	movs	r2, #1
 800ed86:	4b04      	ldr	r3, [pc, #16]	; (800ed98 <enable_buttons+0x3c>)
 800ed88:	701a      	strb	r2, [r3, #0]
 800ed8a:	bd08      	pop	{r3, pc}
 800ed8c:	20005b04 	.word	0x20005b04
 800ed90:	200059b4 	.word	0x200059b4
 800ed94:	200053e0 	.word	0x200053e0
 800ed98:	20000046 	.word	0x20000046

0800ed9c <isButtonEnabled>:
	//taskEXIT_CRITICAL();
}

uint8_t isButtonEnabled(void){
	return button_state;
}
 800ed9c:	4b01      	ldr	r3, [pc, #4]	; (800eda4 <isButtonEnabled+0x8>)
 800ed9e:	7818      	ldrb	r0, [r3, #0]
 800eda0:	4770      	bx	lr
 800eda2:	bf00      	nop
 800eda4:	20000046 	.word	0x20000046

0800eda8 <ResistiveTouchSampler>:
void ResistiveTouchSampler(void){
 800eda8:	b508      	push	{r3, lr}
	if(isButtonEnabled() == 1){
 800edaa:	f7ff fff7 	bl	800ed9c <isButtonEnabled>
 800edae:	2801      	cmp	r0, #1
 800edb0:	d000      	beq.n	800edb4 <ResistiveTouchSampler+0xc>
 800edb2:	bd08      	pop	{r3, pc}
		if(HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin) == GPIO_PIN_SET){
 800edb4:	2102      	movs	r1, #2
 800edb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800edba:	f7f3 fa0b 	bl	80021d4 <HAL_GPIO_ReadPin>
 800edbe:	2801      	cmp	r0, #1
 800edc0:	d046      	beq.n	800ee50 <ResistiveTouchSampler+0xa8>
		else if(HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin) == GPIO_PIN_SET){
 800edc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800edc6:	48d0      	ldr	r0, [pc, #832]	; (800f108 <ResistiveTouchSampler+0x360>)
 800edc8:	f7f3 fa04 	bl	80021d4 <HAL_GPIO_ReadPin>
 800edcc:	2801      	cmp	r0, #1
 800edce:	d070      	beq.n	800eeb2 <ResistiveTouchSampler+0x10a>
		else if(HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin) == GPIO_PIN_SET){
 800edd0:	2104      	movs	r1, #4
 800edd2:	48ce      	ldr	r0, [pc, #824]	; (800f10c <ResistiveTouchSampler+0x364>)
 800edd4:	f7f3 f9fe 	bl	80021d4 <HAL_GPIO_ReadPin>
 800edd8:	2801      	cmp	r0, #1
 800edda:	f000 809b 	beq.w	800ef14 <ResistiveTouchSampler+0x16c>
		else if(HAL_GPIO_ReadPin(BUTTON_7_GPIO_Port, BUTTON_7_Pin) == GPIO_PIN_SET){
 800edde:	2101      	movs	r1, #1
 800ede0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ede4:	f7f3 f9f6 	bl	80021d4 <HAL_GPIO_ReadPin>
 800ede8:	2801      	cmp	r0, #1
 800edea:	f000 80c6 	beq.w	800ef7a <ResistiveTouchSampler+0x1d2>
		else if(HAL_GPIO_ReadPin(BUTTON_8_GPIO_Port, BUTTON_8_Pin) == GPIO_PIN_SET){
 800edee:	2108      	movs	r1, #8
 800edf0:	48c6      	ldr	r0, [pc, #792]	; (800f10c <ResistiveTouchSampler+0x364>)
 800edf2:	f7f3 f9ef 	bl	80021d4 <HAL_GPIO_ReadPin>
 800edf6:	2801      	cmp	r0, #1
 800edf8:	f000 80f2 	beq.w	800efe0 <ResistiveTouchSampler+0x238>
		if(HAL_GPIO_ReadPin(BUTTON_4_GPIO_Port, BUTTON_4_Pin) == GPIO_PIN_SET){
 800edfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ee00:	48c3      	ldr	r0, [pc, #780]	; (800f110 <ResistiveTouchSampler+0x368>)
 800ee02:	f7f3 f9e7 	bl	80021d4 <HAL_GPIO_ReadPin>
 800ee06:	2801      	cmp	r0, #1
 800ee08:	f000 811d 	beq.w	800f046 <ResistiveTouchSampler+0x29e>
		if(HAL_GPIO_ReadPin(BUTTON_5_GPIO_Port, BUTTON_5_Pin) == GPIO_PIN_SET){
 800ee0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ee10:	48bf      	ldr	r0, [pc, #764]	; (800f110 <ResistiveTouchSampler+0x368>)
 800ee12:	f7f3 f9df 	bl	80021d4 <HAL_GPIO_ReadPin>
 800ee16:	2801      	cmp	r0, #1
 800ee18:	f000 8139 	beq.w	800f08e <ResistiveTouchSampler+0x2e6>
		if(HAL_GPIO_ReadPin(BUTTON_6_GPIO_Port, BUTTON_6_Pin) == GPIO_PIN_SET){
 800ee1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ee20:	48bb      	ldr	r0, [pc, #748]	; (800f110 <ResistiveTouchSampler+0x368>)
 800ee22:	f7f3 f9d7 	bl	80021d4 <HAL_GPIO_ReadPin>
 800ee26:	2801      	cmp	r0, #1
 800ee28:	f000 814f 	beq.w	800f0ca <ResistiveTouchSampler+0x322>
		if(HAL_GPIO_ReadPin(BUTTON_9_GPIO_Port, BUTTON_9_Pin) == GPIO_PIN_SET){
 800ee2c:	2180      	movs	r1, #128	; 0x80
 800ee2e:	48b6      	ldr	r0, [pc, #728]	; (800f108 <ResistiveTouchSampler+0x360>)
 800ee30:	f7f3 f9d0 	bl	80021d4 <HAL_GPIO_ReadPin>
 800ee34:	2801      	cmp	r0, #1
 800ee36:	f000 817d 	beq.w	800f134 <ResistiveTouchSampler+0x38c>
		if(HAL_GPIO_ReadPin(BUTTON_10_GPIO_Port, BUTTON_10_Pin) == GPIO_PIN_SET){
 800ee3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ee3e:	48b4      	ldr	r0, [pc, #720]	; (800f110 <ResistiveTouchSampler+0x368>)
 800ee40:	f7f3 f9c8 	bl	80021d4 <HAL_GPIO_ReadPin>
 800ee44:	2801      	cmp	r0, #1
 800ee46:	f000 81c6 	beq.w	800f1d6 <ResistiveTouchSampler+0x42e>
		buttonStateMachine();
 800ee4a:	f7ff ff4b 	bl	800ece4 <buttonStateMachine>
}
 800ee4e:	e7b0      	b.n	800edb2 <ResistiveTouchSampler+0xa>
			if(LED_State(BUTTON_1_G_REG, BUTTON_1_G_PIN) == LED_OFF){
 800ee50:	2120      	movs	r1, #32
 800ee52:	2005      	movs	r0, #5
 800ee54:	f7ff fcec 	bl	800e830 <LED_State>
 800ee58:	2800      	cmp	r0, #0
 800ee5a:	d1cf      	bne.n	800edfc <ResistiveTouchSampler+0x54>
				if ( (HAL_GetTick() - button_1_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 800ee5c:	f7f2 f870 	bl	8000f40 <HAL_GetTick>
 800ee60:	4bac      	ldr	r3, [pc, #688]	; (800f114 <ResistiveTouchSampler+0x36c>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	1ac0      	subs	r0, r0, r3
 800ee66:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ee6a:	d9c7      	bls.n	800edfc <ResistiveTouchSampler+0x54>
					button_1_timeout = HAL_GetTick();
 800ee6c:	f7f2 f868 	bl	8000f40 <HAL_GetTick>
 800ee70:	4ba8      	ldr	r3, [pc, #672]	; (800f114 <ResistiveTouchSampler+0x36c>)
 800ee72:	6018      	str	r0, [r3, #0]
					Set_LED(BUTTON_1_G_REG, BUTTON_1_G_PIN, 1);
 800ee74:	2201      	movs	r2, #1
 800ee76:	2120      	movs	r1, #32
 800ee78:	2005      	movs	r0, #5
 800ee7a:	f7ff fcc5 	bl	800e808 <Set_LED>
					Set_LED(BUTTON_2_G_REG, BUTTON_2_G_PIN, 0);
 800ee7e:	2200      	movs	r2, #0
 800ee80:	2102      	movs	r1, #2
 800ee82:	2005      	movs	r0, #5
 800ee84:	f7ff fcc0 	bl	800e808 <Set_LED>
					Set_LED(BUTTON_3_G_REG, BUTTON_3_G_PIN, 0);
 800ee88:	2200      	movs	r2, #0
 800ee8a:	2108      	movs	r1, #8
 800ee8c:	2004      	movs	r0, #4
 800ee8e:	f7ff fcbb 	bl	800e808 <Set_LED>
					Set_LED(BUTTON_7_G_REG, BUTTON_7_G_PIN, 0);
 800ee92:	2200      	movs	r2, #0
 800ee94:	2180      	movs	r1, #128	; 0x80
 800ee96:	2003      	movs	r0, #3
 800ee98:	f7ff fcb6 	bl	800e808 <Set_LED>
					Set_LED(BUTTON_8_G_REG, BUTTON_8_G_PIN, 0);
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	2180      	movs	r1, #128	; 0x80
 800eea0:	2004      	movs	r0, #4
 800eea2:	f7ff fcb1 	bl	800e808 <Set_LED>
					setTable('S');
 800eea6:	2053      	movs	r0, #83	; 0x53
 800eea8:	f001 fe74 	bl	8010b94 <setTable>
					resetFilter();
 800eeac:	f7fe fc00 	bl	800d6b0 <resetFilter>
 800eeb0:	e7a4      	b.n	800edfc <ResistiveTouchSampler+0x54>
			if(LED_State(BUTTON_2_G_REG, BUTTON_2_G_PIN) == LED_OFF){
 800eeb2:	2102      	movs	r1, #2
 800eeb4:	2005      	movs	r0, #5
 800eeb6:	f7ff fcbb 	bl	800e830 <LED_State>
 800eeba:	2800      	cmp	r0, #0
 800eebc:	d19e      	bne.n	800edfc <ResistiveTouchSampler+0x54>
				if ( (HAL_GetTick() - button_2_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 800eebe:	f7f2 f83f 	bl	8000f40 <HAL_GetTick>
 800eec2:	4b95      	ldr	r3, [pc, #596]	; (800f118 <ResistiveTouchSampler+0x370>)
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	1ac3      	subs	r3, r0, r3
 800eec8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800eecc:	d996      	bls.n	800edfc <ResistiveTouchSampler+0x54>
					button_2_timeout = HAL_GetTick();
 800eece:	f7f2 f837 	bl	8000f40 <HAL_GetTick>
 800eed2:	4b91      	ldr	r3, [pc, #580]	; (800f118 <ResistiveTouchSampler+0x370>)
 800eed4:	6018      	str	r0, [r3, #0]
					Set_LED(BUTTON_1_G_REG, BUTTON_1_G_PIN, 0);
 800eed6:	2200      	movs	r2, #0
 800eed8:	2120      	movs	r1, #32
 800eeda:	2005      	movs	r0, #5
 800eedc:	f7ff fc94 	bl	800e808 <Set_LED>
					Set_LED(BUTTON_2_G_REG, BUTTON_2_G_PIN, 1);
 800eee0:	2201      	movs	r2, #1
 800eee2:	2102      	movs	r1, #2
 800eee4:	2005      	movs	r0, #5
 800eee6:	f7ff fc8f 	bl	800e808 <Set_LED>
					Set_LED(BUTTON_3_G_REG, BUTTON_3_G_PIN, 0);
 800eeea:	2200      	movs	r2, #0
 800eeec:	2108      	movs	r1, #8
 800eeee:	2004      	movs	r0, #4
 800eef0:	f7ff fc8a 	bl	800e808 <Set_LED>
					Set_LED(BUTTON_7_G_REG, BUTTON_7_G_PIN, 0);
 800eef4:	2200      	movs	r2, #0
 800eef6:	2180      	movs	r1, #128	; 0x80
 800eef8:	2003      	movs	r0, #3
 800eefa:	f7ff fc85 	bl	800e808 <Set_LED>
					Set_LED(BUTTON_8_G_REG, BUTTON_8_G_PIN, 0);
 800eefe:	2200      	movs	r2, #0
 800ef00:	2180      	movs	r1, #128	; 0x80
 800ef02:	2004      	movs	r0, #4
 800ef04:	f7ff fc80 	bl	800e808 <Set_LED>
					setTable('T');
 800ef08:	2054      	movs	r0, #84	; 0x54
 800ef0a:	f001 fe43 	bl	8010b94 <setTable>
					resetFilter();
 800ef0e:	f7fe fbcf 	bl	800d6b0 <resetFilter>
 800ef12:	e773      	b.n	800edfc <ResistiveTouchSampler+0x54>
			if(LED_State(BUTTON_3_G_REG, BUTTON_3_G_PIN) == LED_OFF){
 800ef14:	2108      	movs	r1, #8
 800ef16:	2004      	movs	r0, #4
 800ef18:	f7ff fc8a 	bl	800e830 <LED_State>
 800ef1c:	2800      	cmp	r0, #0
 800ef1e:	f47f af6d 	bne.w	800edfc <ResistiveTouchSampler+0x54>
				if ( (HAL_GetTick() - button_3_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 800ef22:	f7f2 f80d 	bl	8000f40 <HAL_GetTick>
 800ef26:	4b7d      	ldr	r3, [pc, #500]	; (800f11c <ResistiveTouchSampler+0x374>)
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	1ac3      	subs	r3, r0, r3
 800ef2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ef30:	f67f af64 	bls.w	800edfc <ResistiveTouchSampler+0x54>
					button_3_timeout = HAL_GetTick();
 800ef34:	f7f2 f804 	bl	8000f40 <HAL_GetTick>
 800ef38:	4b78      	ldr	r3, [pc, #480]	; (800f11c <ResistiveTouchSampler+0x374>)
 800ef3a:	6018      	str	r0, [r3, #0]
					Set_LED(BUTTON_1_G_REG, BUTTON_1_G_PIN, 0);
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	2120      	movs	r1, #32
 800ef40:	2005      	movs	r0, #5
 800ef42:	f7ff fc61 	bl	800e808 <Set_LED>
					Set_LED(BUTTON_2_G_REG, BUTTON_2_G_PIN, 0);
 800ef46:	2200      	movs	r2, #0
 800ef48:	2102      	movs	r1, #2
 800ef4a:	2005      	movs	r0, #5
 800ef4c:	f7ff fc5c 	bl	800e808 <Set_LED>
					Set_LED(BUTTON_3_G_REG, BUTTON_3_G_PIN, 1);
 800ef50:	2201      	movs	r2, #1
 800ef52:	2108      	movs	r1, #8
 800ef54:	2004      	movs	r0, #4
 800ef56:	f7ff fc57 	bl	800e808 <Set_LED>
					Set_LED(BUTTON_7_G_REG, BUTTON_7_G_PIN, 0);
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	2180      	movs	r1, #128	; 0x80
 800ef5e:	2003      	movs	r0, #3
 800ef60:	f7ff fc52 	bl	800e808 <Set_LED>
					Set_LED(BUTTON_8_G_REG, BUTTON_8_G_PIN, 0);
 800ef64:	2200      	movs	r2, #0
 800ef66:	2180      	movs	r1, #128	; 0x80
 800ef68:	2004      	movs	r0, #4
 800ef6a:	f7ff fc4d 	bl	800e808 <Set_LED>
					setTable('Q');
 800ef6e:	2051      	movs	r0, #81	; 0x51
 800ef70:	f001 fe10 	bl	8010b94 <setTable>
					resetFilter();
 800ef74:	f7fe fb9c 	bl	800d6b0 <resetFilter>
 800ef78:	e740      	b.n	800edfc <ResistiveTouchSampler+0x54>
			if(LED_State(BUTTON_7_G_REG, BUTTON_7_G_PIN) == LED_OFF){
 800ef7a:	2180      	movs	r1, #128	; 0x80
 800ef7c:	2003      	movs	r0, #3
 800ef7e:	f7ff fc57 	bl	800e830 <LED_State>
 800ef82:	2800      	cmp	r0, #0
 800ef84:	f47f af3a 	bne.w	800edfc <ResistiveTouchSampler+0x54>
				if ( (HAL_GetTick() - button_7_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 800ef88:	f7f1 ffda 	bl	8000f40 <HAL_GetTick>
 800ef8c:	4b64      	ldr	r3, [pc, #400]	; (800f120 <ResistiveTouchSampler+0x378>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	1ac3      	subs	r3, r0, r3
 800ef92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ef96:	f67f af31 	bls.w	800edfc <ResistiveTouchSampler+0x54>
					button_7_timeout = HAL_GetTick();
 800ef9a:	f7f1 ffd1 	bl	8000f40 <HAL_GetTick>
 800ef9e:	4b60      	ldr	r3, [pc, #384]	; (800f120 <ResistiveTouchSampler+0x378>)
 800efa0:	6018      	str	r0, [r3, #0]
					Set_LED(BUTTON_1_G_REG, BUTTON_1_G_PIN, 0);
 800efa2:	2200      	movs	r2, #0
 800efa4:	2120      	movs	r1, #32
 800efa6:	2005      	movs	r0, #5
 800efa8:	f7ff fc2e 	bl	800e808 <Set_LED>
					Set_LED(BUTTON_2_G_REG, BUTTON_2_G_PIN, 0);
 800efac:	2200      	movs	r2, #0
 800efae:	2102      	movs	r1, #2
 800efb0:	2005      	movs	r0, #5
 800efb2:	f7ff fc29 	bl	800e808 <Set_LED>
					Set_LED(BUTTON_3_G_REG, BUTTON_3_G_PIN, 0);
 800efb6:	2200      	movs	r2, #0
 800efb8:	2108      	movs	r1, #8
 800efba:	2004      	movs	r0, #4
 800efbc:	f7ff fc24 	bl	800e808 <Set_LED>
					Set_LED(BUTTON_7_G_REG, BUTTON_7_G_PIN, 1);
 800efc0:	2201      	movs	r2, #1
 800efc2:	2180      	movs	r1, #128	; 0x80
 800efc4:	2003      	movs	r0, #3
 800efc6:	f7ff fc1f 	bl	800e808 <Set_LED>
					Set_LED(BUTTON_8_G_REG, BUTTON_8_G_PIN, 0);
 800efca:	2200      	movs	r2, #0
 800efcc:	2180      	movs	r1, #128	; 0x80
 800efce:	2004      	movs	r0, #4
 800efd0:	f7ff fc1a 	bl	800e808 <Set_LED>
					setTable('R');
 800efd4:	2052      	movs	r0, #82	; 0x52
 800efd6:	f001 fddd 	bl	8010b94 <setTable>
					resetFilter();
 800efda:	f7fe fb69 	bl	800d6b0 <resetFilter>
 800efde:	e70d      	b.n	800edfc <ResistiveTouchSampler+0x54>
			if(LED_State(BUTTON_8_G_REG, BUTTON_8_G_PIN) == LED_OFF){
 800efe0:	2180      	movs	r1, #128	; 0x80
 800efe2:	2004      	movs	r0, #4
 800efe4:	f7ff fc24 	bl	800e830 <LED_State>
 800efe8:	2800      	cmp	r0, #0
 800efea:	f47f af07 	bne.w	800edfc <ResistiveTouchSampler+0x54>
				if ( (HAL_GetTick() - button_8_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 800efee:	f7f1 ffa7 	bl	8000f40 <HAL_GetTick>
 800eff2:	4b4c      	ldr	r3, [pc, #304]	; (800f124 <ResistiveTouchSampler+0x37c>)
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	1ac3      	subs	r3, r0, r3
 800eff8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800effc:	f67f aefe 	bls.w	800edfc <ResistiveTouchSampler+0x54>
					button_8_timeout = HAL_GetTick();
 800f000:	f7f1 ff9e 	bl	8000f40 <HAL_GetTick>
 800f004:	4b47      	ldr	r3, [pc, #284]	; (800f124 <ResistiveTouchSampler+0x37c>)
 800f006:	6018      	str	r0, [r3, #0]
					Set_LED(BUTTON_1_G_REG, BUTTON_1_G_PIN, 0);
 800f008:	2200      	movs	r2, #0
 800f00a:	2120      	movs	r1, #32
 800f00c:	2005      	movs	r0, #5
 800f00e:	f7ff fbfb 	bl	800e808 <Set_LED>
					Set_LED(BUTTON_2_G_REG, BUTTON_2_G_PIN, 0);
 800f012:	2200      	movs	r2, #0
 800f014:	2102      	movs	r1, #2
 800f016:	2005      	movs	r0, #5
 800f018:	f7ff fbf6 	bl	800e808 <Set_LED>
					Set_LED(BUTTON_3_G_REG, BUTTON_3_G_PIN, 0);
 800f01c:	2200      	movs	r2, #0
 800f01e:	2108      	movs	r1, #8
 800f020:	2004      	movs	r0, #4
 800f022:	f7ff fbf1 	bl	800e808 <Set_LED>
					Set_LED(BUTTON_7_G_REG, BUTTON_7_G_PIN, 0);
 800f026:	2200      	movs	r2, #0
 800f028:	2180      	movs	r1, #128	; 0x80
 800f02a:	2003      	movs	r0, #3
 800f02c:	f7ff fbec 	bl	800e808 <Set_LED>
					Set_LED(BUTTON_8_G_REG, BUTTON_8_G_PIN, 1);
 800f030:	2201      	movs	r2, #1
 800f032:	2180      	movs	r1, #128	; 0x80
 800f034:	2004      	movs	r0, #4
 800f036:	f7ff fbe7 	bl	800e808 <Set_LED>
					setTable('W');
 800f03a:	2057      	movs	r0, #87	; 0x57
 800f03c:	f001 fdaa 	bl	8010b94 <setTable>
					resetFilter();
 800f040:	f7fe fb36 	bl	800d6b0 <resetFilter>
 800f044:	e6da      	b.n	800edfc <ResistiveTouchSampler+0x54>
			if ( (HAL_GetTick() - button_4_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 800f046:	f7f1 ff7b 	bl	8000f40 <HAL_GetTick>
 800f04a:	4b37      	ldr	r3, [pc, #220]	; (800f128 <ResistiveTouchSampler+0x380>)
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	1ac0      	subs	r0, r0, r3
 800f050:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800f054:	f67f aeda 	bls.w	800ee0c <ResistiveTouchSampler+0x64>
				button_4_timeout = HAL_GetTick();
 800f058:	f7f1 ff72 	bl	8000f40 <HAL_GetTick>
 800f05c:	4b32      	ldr	r3, [pc, #200]	; (800f128 <ResistiveTouchSampler+0x380>)
 800f05e:	6018      	str	r0, [r3, #0]
				if(LED_State(BUTTON_4_G_REG, BUTTON_4_G_PIN) == LED_OFF){
 800f060:	2120      	movs	r1, #32
 800f062:	2001      	movs	r0, #1
 800f064:	f7ff fbe4 	bl	800e830 <LED_State>
 800f068:	b928      	cbnz	r0, 800f076 <ResistiveTouchSampler+0x2ce>
						Set_LED(BUTTON_4_G_REG, BUTTON_4_G_PIN, 1);
 800f06a:	2201      	movs	r2, #1
 800f06c:	2120      	movs	r1, #32
 800f06e:	4610      	mov	r0, r2
 800f070:	f7ff fbca 	bl	800e808 <Set_LED>
 800f074:	e6ca      	b.n	800ee0c <ResistiveTouchSampler+0x64>
				else if(LED_State(BUTTON_4_G_REG, BUTTON_4_G_PIN) == LED_ON){
 800f076:	2120      	movs	r1, #32
 800f078:	2001      	movs	r0, #1
 800f07a:	f7ff fbd9 	bl	800e830 <LED_State>
 800f07e:	2801      	cmp	r0, #1
 800f080:	f47f aec4 	bne.w	800ee0c <ResistiveTouchSampler+0x64>
						Set_LED(BUTTON_4_G_REG, BUTTON_4_G_PIN, 0);
 800f084:	2200      	movs	r2, #0
 800f086:	2120      	movs	r1, #32
 800f088:	f7ff fbbe 	bl	800e808 <Set_LED>
 800f08c:	e6be      	b.n	800ee0c <ResistiveTouchSampler+0x64>
			if ( (HAL_GetTick() - button_5_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 800f08e:	f7f1 ff57 	bl	8000f40 <HAL_GetTick>
 800f092:	4b26      	ldr	r3, [pc, #152]	; (800f12c <ResistiveTouchSampler+0x384>)
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	1ac0      	subs	r0, r0, r3
 800f098:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800f09c:	f67f aebe 	bls.w	800ee1c <ResistiveTouchSampler+0x74>
				button_5_timeout = HAL_GetTick();
 800f0a0:	f7f1 ff4e 	bl	8000f40 <HAL_GetTick>
 800f0a4:	4b21      	ldr	r3, [pc, #132]	; (800f12c <ResistiveTouchSampler+0x384>)
 800f0a6:	6018      	str	r0, [r3, #0]
				if(LED_State(BUTTON_5_G_REG, BUTTON_5_G_PIN) == LED_OFF){
 800f0a8:	2180      	movs	r1, #128	; 0x80
 800f0aa:	2000      	movs	r0, #0
 800f0ac:	f7ff fbc0 	bl	800e830 <LED_State>
 800f0b0:	2800      	cmp	r0, #0
 800f0b2:	f47f aeb3 	bne.w	800ee1c <ResistiveTouchSampler+0x74>
					Set_LED(BUTTON_5_G_REG, BUTTON_5_G_PIN, 1);
 800f0b6:	2201      	movs	r2, #1
 800f0b8:	2180      	movs	r1, #128	; 0x80
 800f0ba:	f7ff fba5 	bl	800e808 <Set_LED>
					Set_LED(BUTTON_6_G_REG, BUTTON_6_G_PIN, 0);
 800f0be:	2200      	movs	r2, #0
 800f0c0:	2108      	movs	r1, #8
 800f0c2:	4610      	mov	r0, r2
 800f0c4:	f7ff fba0 	bl	800e808 <Set_LED>
 800f0c8:	e6a8      	b.n	800ee1c <ResistiveTouchSampler+0x74>
			if(LED_State(BUTTON_6_G_REG, BUTTON_6_G_PIN) == LED_OFF){
 800f0ca:	2108      	movs	r1, #8
 800f0cc:	2000      	movs	r0, #0
 800f0ce:	f7ff fbaf 	bl	800e830 <LED_State>
 800f0d2:	2800      	cmp	r0, #0
 800f0d4:	f47f aeaa 	bne.w	800ee2c <ResistiveTouchSampler+0x84>
				if ( (HAL_GetTick() - button_6_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 800f0d8:	f7f1 ff32 	bl	8000f40 <HAL_GetTick>
 800f0dc:	4b14      	ldr	r3, [pc, #80]	; (800f130 <ResistiveTouchSampler+0x388>)
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	1ac3      	subs	r3, r0, r3
 800f0e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f0e6:	f67f aea1 	bls.w	800ee2c <ResistiveTouchSampler+0x84>
					button_6_timeout = HAL_GetTick();
 800f0ea:	f7f1 ff29 	bl	8000f40 <HAL_GetTick>
 800f0ee:	4b10      	ldr	r3, [pc, #64]	; (800f130 <ResistiveTouchSampler+0x388>)
 800f0f0:	6018      	str	r0, [r3, #0]
					Set_LED(BUTTON_6_G_REG, BUTTON_6_G_PIN, 1);
 800f0f2:	2201      	movs	r2, #1
 800f0f4:	2108      	movs	r1, #8
 800f0f6:	2000      	movs	r0, #0
 800f0f8:	f7ff fb86 	bl	800e808 <Set_LED>
					Set_LED(BUTTON_5_G_REG, BUTTON_5_G_PIN, 0);
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	2180      	movs	r1, #128	; 0x80
 800f100:	4610      	mov	r0, r2
 800f102:	f7ff fb81 	bl	800e808 <Set_LED>
 800f106:	e691      	b.n	800ee2c <ResistiveTouchSampler+0x84>
 800f108:	48000800 	.word	0x48000800
 800f10c:	48001000 	.word	0x48001000
 800f110:	48000c00 	.word	0x48000c00
 800f114:	200052f0 	.word	0x200052f0
 800f118:	200052f4 	.word	0x200052f4
 800f11c:	200052f8 	.word	0x200052f8
 800f120:	20005308 	.word	0x20005308
 800f124:	2000530c 	.word	0x2000530c
 800f128:	200052fc 	.word	0x200052fc
 800f12c:	20005300 	.word	0x20005300
 800f130:	20005304 	.word	0x20005304
		  if ( (HAL_GetTick() - button_9_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 800f134:	f7f1 ff04 	bl	8000f40 <HAL_GetTick>
 800f138:	4b59      	ldr	r3, [pc, #356]	; (800f2a0 <ResistiveTouchSampler+0x4f8>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	1ac0      	subs	r0, r0, r3
 800f13e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800f142:	f67f ae7a 	bls.w	800ee3a <ResistiveTouchSampler+0x92>
		    button_9_timeout = HAL_GetTick();
 800f146:	f7f1 fefb 	bl	8000f40 <HAL_GetTick>
 800f14a:	4b55      	ldr	r3, [pc, #340]	; (800f2a0 <ResistiveTouchSampler+0x4f8>)
 800f14c:	6018      	str	r0, [r3, #0]
		    button_9_state++;
 800f14e:	4a55      	ldr	r2, [pc, #340]	; (800f2a4 <ResistiveTouchSampler+0x4fc>)
 800f150:	7813      	ldrb	r3, [r2, #0]
 800f152:	3301      	adds	r3, #1
 800f154:	b2db      	uxtb	r3, r3
 800f156:	7013      	strb	r3, [r2, #0]
		    bit_crush++;
 800f158:	4953      	ldr	r1, [pc, #332]	; (800f2a8 <ResistiveTouchSampler+0x500>)
 800f15a:	780a      	ldrb	r2, [r1, #0]
 800f15c:	3201      	adds	r2, #1
 800f15e:	700a      	strb	r2, [r1, #0]
		    if(button_9_state == 1){
 800f160:	2b01      	cmp	r3, #1
 800f162:	d013      	beq.n	800f18c <ResistiveTouchSampler+0x3e4>
		    else if(button_9_state == 2){
 800f164:	2b02      	cmp	r3, #2
 800f166:	d01a      	beq.n	800f19e <ResistiveTouchSampler+0x3f6>
		    else if(button_9_state == 3){
 800f168:	2b03      	cmp	r3, #3
 800f16a:	d026      	beq.n	800f1ba <ResistiveTouchSampler+0x412>
		      Set_LED(BUTTON_9_G_REG, BUTTON_9_G_PIN, 0);
 800f16c:	2200      	movs	r2, #0
 800f16e:	2102      	movs	r1, #2
 800f170:	2001      	movs	r0, #1
 800f172:	f7ff fb49 	bl	800e808 <Set_LED>
		      Set_LED(BUTTON_9_R_REG, BUTTON_9_R_PIN, 0);
 800f176:	2200      	movs	r2, #0
 800f178:	2101      	movs	r1, #1
 800f17a:	4608      	mov	r0, r1
 800f17c:	f7ff fb44 	bl	800e808 <Set_LED>
		      bit_crush = 0;
 800f180:	2300      	movs	r3, #0
 800f182:	4a49      	ldr	r2, [pc, #292]	; (800f2a8 <ResistiveTouchSampler+0x500>)
 800f184:	7013      	strb	r3, [r2, #0]
		      button_9_state = 0;
 800f186:	4a47      	ldr	r2, [pc, #284]	; (800f2a4 <ResistiveTouchSampler+0x4fc>)
 800f188:	7013      	strb	r3, [r2, #0]
 800f18a:	e656      	b.n	800ee3a <ResistiveTouchSampler+0x92>
		      Set_LED(BUTTON_9_G_REG, BUTTON_9_G_PIN, 1);
 800f18c:	2201      	movs	r2, #1
 800f18e:	2102      	movs	r1, #2
 800f190:	4610      	mov	r0, r2
 800f192:	f7ff fb39 	bl	800e808 <Set_LED>
		      bit_crush = 4;
 800f196:	2204      	movs	r2, #4
 800f198:	4b43      	ldr	r3, [pc, #268]	; (800f2a8 <ResistiveTouchSampler+0x500>)
 800f19a:	701a      	strb	r2, [r3, #0]
 800f19c:	e64d      	b.n	800ee3a <ResistiveTouchSampler+0x92>
		      Set_LED(BUTTON_9_G_REG, BUTTON_9_G_PIN, 1);
 800f19e:	2201      	movs	r2, #1
 800f1a0:	2102      	movs	r1, #2
 800f1a2:	4610      	mov	r0, r2
 800f1a4:	f7ff fb30 	bl	800e808 <Set_LED>
		      Set_LED(BUTTON_9_R_REG, BUTTON_9_R_PIN, 1);
 800f1a8:	2201      	movs	r2, #1
 800f1aa:	4611      	mov	r1, r2
 800f1ac:	4610      	mov	r0, r2
 800f1ae:	f7ff fb2b 	bl	800e808 <Set_LED>
		      bit_crush = 6;
 800f1b2:	2206      	movs	r2, #6
 800f1b4:	4b3c      	ldr	r3, [pc, #240]	; (800f2a8 <ResistiveTouchSampler+0x500>)
 800f1b6:	701a      	strb	r2, [r3, #0]
 800f1b8:	e63f      	b.n	800ee3a <ResistiveTouchSampler+0x92>
		      Set_LED(BUTTON_9_G_REG, BUTTON_9_G_PIN, 0);
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	2102      	movs	r1, #2
 800f1be:	2001      	movs	r0, #1
 800f1c0:	f7ff fb22 	bl	800e808 <Set_LED>
		      Set_LED(BUTTON_9_R_REG, BUTTON_9_R_PIN, 1);
 800f1c4:	2201      	movs	r2, #1
 800f1c6:	4611      	mov	r1, r2
 800f1c8:	4610      	mov	r0, r2
 800f1ca:	f7ff fb1d 	bl	800e808 <Set_LED>
		      bit_crush = 8;
 800f1ce:	2208      	movs	r2, #8
 800f1d0:	4b35      	ldr	r3, [pc, #212]	; (800f2a8 <ResistiveTouchSampler+0x500>)
 800f1d2:	701a      	strb	r2, [r3, #0]
 800f1d4:	e631      	b.n	800ee3a <ResistiveTouchSampler+0x92>
		  if ( (HAL_GetTick() - button_10_timeout) > BUTTON_DEBOUNCE_THRESH_MS){
 800f1d6:	f7f1 feb3 	bl	8000f40 <HAL_GetTick>
 800f1da:	4b34      	ldr	r3, [pc, #208]	; (800f2ac <ResistiveTouchSampler+0x504>)
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	1ac0      	subs	r0, r0, r3
 800f1e0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800f1e4:	f67f ae31 	bls.w	800ee4a <ResistiveTouchSampler+0xa2>
		    button_10_timeout = HAL_GetTick();
 800f1e8:	f7f1 feaa 	bl	8000f40 <HAL_GetTick>
 800f1ec:	4b2f      	ldr	r3, [pc, #188]	; (800f2ac <ResistiveTouchSampler+0x504>)
 800f1ee:	6018      	str	r0, [r3, #0]
		    button_10_state++;
 800f1f0:	4a2f      	ldr	r2, [pc, #188]	; (800f2b0 <ResistiveTouchSampler+0x508>)
 800f1f2:	7813      	ldrb	r3, [r2, #0]
 800f1f4:	3301      	adds	r3, #1
 800f1f6:	b2db      	uxtb	r3, r3
 800f1f8:	7013      	strb	r3, [r2, #0]
		    if(button_10_state == 1){
 800f1fa:	2b01      	cmp	r3, #1
 800f1fc:	d018      	beq.n	800f230 <ResistiveTouchSampler+0x488>
		    else if(button_10_state == 2){
 800f1fe:	2b02      	cmp	r3, #2
 800f200:	d020      	beq.n	800f244 <ResistiveTouchSampler+0x49c>
		    else if(button_10_state == 3){
 800f202:	2b03      	cmp	r3, #3
 800f204:	d02d      	beq.n	800f262 <ResistiveTouchSampler+0x4ba>
		    else if(button_10_state == 4){
 800f206:	2b04      	cmp	r3, #4
 800f208:	f47f ae1f 	bne.w	800ee4a <ResistiveTouchSampler+0xa2>
		      Set_LED(BUTTON_10_G_REG, BUTTON_10_G_PIN, 0);
 800f20c:	2200      	movs	r2, #0
 800f20e:	2102      	movs	r1, #2
 800f210:	4608      	mov	r0, r1
 800f212:	f7ff faf9 	bl	800e808 <Set_LED>
		      Set_LED(BUTTON_10_R_REG, BUTTON_10_R_PIN, 0);
 800f216:	2200      	movs	r2, #0
 800f218:	2101      	movs	r1, #1
 800f21a:	2002      	movs	r0, #2
 800f21c:	f7ff faf4 	bl	800e808 <Set_LED>
		      changeQ(5);
 800f220:	ed9f 0b17 	vldr	d0, [pc, #92]	; 800f280 <ResistiveTouchSampler+0x4d8>
 800f224:	f7fe fbd4 	bl	800d9d0 <changeQ>
		      button_10_state = 0;
 800f228:	2200      	movs	r2, #0
 800f22a:	4b21      	ldr	r3, [pc, #132]	; (800f2b0 <ResistiveTouchSampler+0x508>)
 800f22c:	701a      	strb	r2, [r3, #0]
 800f22e:	e60c      	b.n	800ee4a <ResistiveTouchSampler+0xa2>
		      Set_LED(BUTTON_10_G_REG, BUTTON_10_G_PIN, 1);
 800f230:	2201      	movs	r2, #1
 800f232:	2102      	movs	r1, #2
 800f234:	4608      	mov	r0, r1
 800f236:	f7ff fae7 	bl	800e808 <Set_LED>
		      changeQ(1);
 800f23a:	ed9f 0b13 	vldr	d0, [pc, #76]	; 800f288 <ResistiveTouchSampler+0x4e0>
 800f23e:	f7fe fbc7 	bl	800d9d0 <changeQ>
 800f242:	e602      	b.n	800ee4a <ResistiveTouchSampler+0xa2>
		      Set_LED(BUTTON_10_G_REG, BUTTON_10_G_PIN, 1);
 800f244:	2201      	movs	r2, #1
 800f246:	2102      	movs	r1, #2
 800f248:	4608      	mov	r0, r1
 800f24a:	f7ff fadd 	bl	800e808 <Set_LED>
		      Set_LED(BUTTON_10_R_REG, BUTTON_10_R_PIN, 1);
 800f24e:	2201      	movs	r2, #1
 800f250:	4611      	mov	r1, r2
 800f252:	2002      	movs	r0, #2
 800f254:	f7ff fad8 	bl	800e808 <Set_LED>
		      changeQ(1.6);
 800f258:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 800f290 <ResistiveTouchSampler+0x4e8>
 800f25c:	f7fe fbb8 	bl	800d9d0 <changeQ>
 800f260:	e5f3      	b.n	800ee4a <ResistiveTouchSampler+0xa2>
		      Set_LED(BUTTON_10_G_REG, BUTTON_10_G_PIN, 0);
 800f262:	2200      	movs	r2, #0
 800f264:	2102      	movs	r1, #2
 800f266:	4608      	mov	r0, r1
 800f268:	f7ff face 	bl	800e808 <Set_LED>
		      Set_LED(BUTTON_10_R_REG, BUTTON_10_R_PIN, 1);
 800f26c:	2201      	movs	r2, #1
 800f26e:	4611      	mov	r1, r2
 800f270:	2002      	movs	r0, #2
 800f272:	f7ff fac9 	bl	800e808 <Set_LED>
		      changeQ(2.5);
 800f276:	ed9f 0b08 	vldr	d0, [pc, #32]	; 800f298 <ResistiveTouchSampler+0x4f0>
 800f27a:	f7fe fba9 	bl	800d9d0 <changeQ>
 800f27e:	e5e4      	b.n	800ee4a <ResistiveTouchSampler+0xa2>
 800f280:	00000000 	.word	0x00000000
 800f284:	40140000 	.word	0x40140000
 800f288:	00000000 	.word	0x00000000
 800f28c:	3ff00000 	.word	0x3ff00000
 800f290:	9999999a 	.word	0x9999999a
 800f294:	3ff99999 	.word	0x3ff99999
 800f298:	00000000 	.word	0x00000000
 800f29c:	40040000 	.word	0x40040000
 800f2a0:	20005314 	.word	0x20005314
 800f2a4:	20005310 	.word	0x20005310
 800f2a8:	200052e7 	.word	0x200052e7
 800f2ac:	200052ec 	.word	0x200052ec
 800f2b0:	200052e8 	.word	0x200052e8

0800f2b4 <disable_buttons>:
void disable_buttons(void){
 800f2b4:	b508      	push	{r3, lr}
	if(isButtonEnabled() == 1){
 800f2b6:	f7ff fd71 	bl	800ed9c <isButtonEnabled>
 800f2ba:	2801      	cmp	r0, #1
 800f2bc:	d004      	beq.n	800f2c8 <disable_buttons+0x14>
		htim4.Instance->CNT = 0;
 800f2be:	4b0d      	ldr	r3, [pc, #52]	; (800f2f4 <disable_buttons+0x40>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	625a      	str	r2, [r3, #36]	; 0x24
 800f2c6:	bd08      	pop	{r3, pc}
		button_state = 0;
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	4b0b      	ldr	r3, [pc, #44]	; (800f2f8 <disable_buttons+0x44>)
 800f2cc:	701a      	strb	r2, [r3, #0]
		temp_buffer[0] = LED_SETTINGS[0];
 800f2ce:	4a0b      	ldr	r2, [pc, #44]	; (800f2fc <disable_buttons+0x48>)
 800f2d0:	7811      	ldrb	r1, [r2, #0]
 800f2d2:	4b0b      	ldr	r3, [pc, #44]	; (800f300 <disable_buttons+0x4c>)
 800f2d4:	7019      	strb	r1, [r3, #0]
		temp_buffer[1] = LED_SETTINGS[1];
 800f2d6:	7851      	ldrb	r1, [r2, #1]
 800f2d8:	7059      	strb	r1, [r3, #1]
		temp_buffer[2] = LED_SETTINGS[2];
 800f2da:	7891      	ldrb	r1, [r2, #2]
 800f2dc:	7099      	strb	r1, [r3, #2]
		temp_buffer[3] = LED_SETTINGS[3];
 800f2de:	78d1      	ldrb	r1, [r2, #3]
 800f2e0:	70d9      	strb	r1, [r3, #3]
		temp_buffer[4] = LED_SETTINGS[4];
 800f2e2:	7911      	ldrb	r1, [r2, #4]
 800f2e4:	7119      	strb	r1, [r3, #4]
		temp_buffer[5] = LED_SETTINGS[5];
 800f2e6:	7952      	ldrb	r2, [r2, #5]
 800f2e8:	715a      	strb	r2, [r3, #5]
		HAL_TIM_Base_Start_IT(&htim4);
 800f2ea:	4802      	ldr	r0, [pc, #8]	; (800f2f4 <disable_buttons+0x40>)
 800f2ec:	f7f6 fdca 	bl	8005e84 <HAL_TIM_Base_Start_IT>
 800f2f0:	bd08      	pop	{r3, pc}
 800f2f2:	bf00      	nop
 800f2f4:	20005b04 	.word	0x20005b04
 800f2f8:	20000046 	.word	0x20000046
 800f2fc:	200053e0 	.word	0x200053e0
 800f300:	200059b4 	.word	0x200059b4

0800f304 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800f304:	b508      	push	{r3, lr}

  /**Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800f306:	480a      	ldr	r0, [pc, #40]	; (800f330 <MX_RTC_Init+0x2c>)
 800f308:	4b0a      	ldr	r3, [pc, #40]	; (800f334 <MX_RTC_Init+0x30>)
 800f30a:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800f30c:	2300      	movs	r3, #0
 800f30e:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 800f310:	227f      	movs	r2, #127	; 0x7f
 800f312:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 800f314:	22ff      	movs	r2, #255	; 0xff
 800f316:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800f318:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800f31a:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800f31c:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800f31e:	61c3      	str	r3, [r0, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800f320:	f7f5 fd0f 	bl	8004d42 <HAL_RTC_Init>
 800f324:	b900      	cbnz	r0, 800f328 <MX_RTC_Init+0x24>
 800f326:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 800f328:	f7ff fcd4 	bl	800ecd4 <Error_Handler>
  }

}
 800f32c:	e7fb      	b.n	800f326 <MX_RTC_Init+0x22>
 800f32e:	bf00      	nop
 800f330:	200059bc 	.word	0x200059bc
 800f334:	40002800 	.word	0x40002800

0800f338 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 800f338:	6802      	ldr	r2, [r0, #0]
 800f33a:	4b06      	ldr	r3, [pc, #24]	; (800f354 <HAL_RTC_MspInit+0x1c>)
 800f33c:	429a      	cmp	r2, r3
 800f33e:	d000      	beq.n	800f342 <HAL_RTC_MspInit+0xa>
 800f340:	4770      	bx	lr
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800f342:	4a05      	ldr	r2, [pc, #20]	; (800f358 <HAL_RTC_MspInit+0x20>)
 800f344:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800f348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f34c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800f350:	e7f6      	b.n	800f340 <HAL_RTC_MspInit+0x8>
 800f352:	bf00      	nop
 800f354:	40002800 	.word	0x40002800
 800f358:	40021000 	.word	0x40021000

0800f35c <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 800f35c:	b508      	push	{r3, lr}

  hsd1.Instance = SDMMC1;
 800f35e:	4809      	ldr	r0, [pc, #36]	; (800f384 <MX_SDMMC1_SD_Init+0x28>)
 800f360:	4b09      	ldr	r3, [pc, #36]	; (800f388 <MX_SDMMC1_SD_Init+0x2c>)
 800f362:	6003      	str	r3, [r0, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800f364:	2300      	movs	r3, #0
 800f366:	6043      	str	r3, [r0, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800f368:	6083      	str	r3, [r0, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800f36a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800f36e:	60c2      	str	r2, [r0, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800f370:	6103      	str	r3, [r0, #16]
  hsd1.Init.ClockDiv = 0;
 800f372:	6143      	str	r3, [r0, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 800f374:	6183      	str	r3, [r0, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800f376:	f7f6 f8c7 	bl	8005508 <HAL_SD_Init>
 800f37a:	b900      	cbnz	r0, 800f37e <MX_SDMMC1_SD_Init+0x22>
 800f37c:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 800f37e:	f7ff fca9 	bl	800ecd4 <Error_Handler>
  }

}
 800f382:	e7fb      	b.n	800f37c <MX_SDMMC1_SD_Init+0x20>
 800f384:	200059e0 	.word	0x200059e0
 800f388:	50062400 	.word	0x50062400

0800f38c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800f38c:	b570      	push	{r4, r5, r6, lr}
 800f38e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f390:	2300      	movs	r3, #0
 800f392:	9303      	str	r3, [sp, #12]
 800f394:	9304      	str	r3, [sp, #16]
 800f396:	9305      	str	r3, [sp, #20]
 800f398:	9306      	str	r3, [sp, #24]
 800f39a:	9307      	str	r3, [sp, #28]
  if(sdHandle->Instance==SDMMC1)
 800f39c:	6802      	ldr	r2, [r0, #0]
 800f39e:	4b1e      	ldr	r3, [pc, #120]	; (800f418 <HAL_SD_MspInit+0x8c>)
 800f3a0:	429a      	cmp	r2, r3
 800f3a2:	d001      	beq.n	800f3a8 <HAL_SD_MspInit+0x1c>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800f3a4:	b008      	add	sp, #32
 800f3a6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800f3a8:	4b1c      	ldr	r3, [pc, #112]	; (800f41c <HAL_SD_MspInit+0x90>)
 800f3aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f3ac:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800f3b0:	64da      	str	r2, [r3, #76]	; 0x4c
 800f3b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f3b4:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800f3b8:	9200      	str	r2, [sp, #0]
 800f3ba:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f3bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f3be:	f042 0204 	orr.w	r2, r2, #4
 800f3c2:	64da      	str	r2, [r3, #76]	; 0x4c
 800f3c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f3c6:	f002 0204 	and.w	r2, r2, #4
 800f3ca:	9201      	str	r2, [sp, #4]
 800f3cc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800f3ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f3d0:	f042 0208 	orr.w	r2, r2, #8
 800f3d4:	64da      	str	r2, [r3, #76]	; 0x4c
 800f3d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f3d8:	f003 0308 	and.w	r3, r3, #8
 800f3dc:	9302      	str	r3, [sp, #8]
 800f3de:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800f3e0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800f3e4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f3e6:	2602      	movs	r6, #2
 800f3e8:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f3ea:	2503      	movs	r5, #3
 800f3ec:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800f3ee:	240c      	movs	r4, #12
 800f3f0:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f3f2:	eb0d 0104 	add.w	r1, sp, r4
 800f3f6:	480a      	ldr	r0, [pc, #40]	; (800f420 <HAL_SD_MspInit+0x94>)
 800f3f8:	f7f2 fe10 	bl	800201c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800f3fc:	2304      	movs	r3, #4
 800f3fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f400:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f402:	2300      	movs	r3, #0
 800f404:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f406:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800f408:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f40a:	eb0d 0104 	add.w	r1, sp, r4
 800f40e:	4805      	ldr	r0, [pc, #20]	; (800f424 <HAL_SD_MspInit+0x98>)
 800f410:	f7f2 fe04 	bl	800201c <HAL_GPIO_Init>
}
 800f414:	e7c6      	b.n	800f3a4 <HAL_SD_MspInit+0x18>
 800f416:	bf00      	nop
 800f418:	50062400 	.word	0x50062400
 800f41c:	40021000 	.word	0x40021000
 800f420:	48000800 	.word	0x48000800
 800f424:	48000c00 	.word	0x48000c00

0800f428 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800f428:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 800f42a:	4811      	ldr	r0, [pc, #68]	; (800f470 <MX_SPI2_Init+0x48>)
 800f42c:	4b11      	ldr	r3, [pc, #68]	; (800f474 <MX_SPI2_Init+0x4c>)
 800f42e:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800f430:	f44f 7382 	mov.w	r3, #260	; 0x104
 800f434:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800f436:	2300      	movs	r3, #0
 800f438:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800f43a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800f43e:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800f440:	2202      	movs	r2, #2
 800f442:	6102      	str	r2, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800f444:	2201      	movs	r2, #1
 800f446:	6142      	str	r2, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800f448:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f44c:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800f44e:	2228      	movs	r2, #40	; 0x28
 800f450:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800f452:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800f454:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f456:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800f458:	2207      	movs	r2, #7
 800f45a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800f45c:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800f45e:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800f460:	f7f6 f9fc 	bl	800585c <HAL_SPI_Init>
 800f464:	b900      	cbnz	r0, 800f468 <MX_SPI2_Init+0x40>
 800f466:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 800f468:	f7ff fc34 	bl	800ecd4 <Error_Handler>
  }

}
 800f46c:	e7fb      	b.n	800f466 <MX_SPI2_Init+0x3e>
 800f46e:	bf00      	nop
 800f470:	20005a60 	.word	0x20005a60
 800f474:	40003800 	.word	0x40003800

0800f478 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800f478:	b570      	push	{r4, r5, r6, lr}
 800f47a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f47c:	2300      	movs	r3, #0
 800f47e:	9303      	str	r3, [sp, #12]
 800f480:	9304      	str	r3, [sp, #16]
 800f482:	9305      	str	r3, [sp, #20]
 800f484:	9306      	str	r3, [sp, #24]
 800f486:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI2)
 800f488:	6802      	ldr	r2, [r0, #0]
 800f48a:	4b21      	ldr	r3, [pc, #132]	; (800f510 <HAL_SPI_MspInit+0x98>)
 800f48c:	429a      	cmp	r2, r3
 800f48e:	d001      	beq.n	800f494 <HAL_SPI_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800f490:	b008      	add	sp, #32
 800f492:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 800f494:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 800f498:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f49a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f49e:	659a      	str	r2, [r3, #88]	; 0x58
 800f4a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f4a2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800f4a6:	9200      	str	r2, [sp, #0]
 800f4a8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f4aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f4ac:	f042 0204 	orr.w	r2, r2, #4
 800f4b0:	64da      	str	r2, [r3, #76]	; 0x4c
 800f4b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f4b4:	f002 0204 	and.w	r2, r2, #4
 800f4b8:	9201      	str	r2, [sp, #4]
 800f4ba:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f4bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f4be:	f042 0202 	orr.w	r2, r2, #2
 800f4c2:	64da      	str	r2, [r3, #76]	; 0x4c
 800f4c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f4c6:	f003 0302 	and.w	r3, r3, #2
 800f4ca:	9302      	str	r3, [sp, #8]
 800f4cc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = LED_MOSI_Pin;
 800f4ce:	2308      	movs	r3, #8
 800f4d0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f4d2:	2502      	movs	r5, #2
 800f4d4:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f4d6:	2603      	movs	r6, #3
 800f4d8:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800f4da:	2405      	movs	r4, #5
 800f4dc:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(LED_MOSI_GPIO_Port, &GPIO_InitStruct);
 800f4de:	a903      	add	r1, sp, #12
 800f4e0:	480c      	ldr	r0, [pc, #48]	; (800f514 <HAL_SPI_MspInit+0x9c>)
 800f4e2:	f7f2 fd9b 	bl	800201c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED_SCK_Pin;
 800f4e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f4ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f4ec:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4ee:	2500      	movs	r5, #0
 800f4f0:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f4f2:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800f4f4:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(LED_SCK_GPIO_Port, &GPIO_InitStruct);
 800f4f6:	a903      	add	r1, sp, #12
 800f4f8:	4807      	ldr	r0, [pc, #28]	; (800f518 <HAL_SPI_MspInit+0xa0>)
 800f4fa:	f7f2 fd8f 	bl	800201c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800f4fe:	462a      	mov	r2, r5
 800f500:	4621      	mov	r1, r4
 800f502:	2024      	movs	r0, #36	; 0x24
 800f504:	f7f2 f9b4 	bl	8001870 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800f508:	2024      	movs	r0, #36	; 0x24
 800f50a:	f7f2 f9e3 	bl	80018d4 <HAL_NVIC_EnableIRQ>
}
 800f50e:	e7bf      	b.n	800f490 <HAL_SPI_MspInit+0x18>
 800f510:	40003800 	.word	0x40003800
 800f514:	48000800 	.word	0x48000800
 800f518:	48000400 	.word	0x48000400

0800f51c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800f51c:	b500      	push	{lr}
 800f51e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f520:	4b0d      	ldr	r3, [pc, #52]	; (800f558 <HAL_MspInit+0x3c>)
 800f522:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800f524:	f042 0201 	orr.w	r2, r2, #1
 800f528:	661a      	str	r2, [r3, #96]	; 0x60
 800f52a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800f52c:	f002 0201 	and.w	r2, r2, #1
 800f530:	9200      	str	r2, [sp, #0]
 800f532:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800f534:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f536:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800f53a:	659a      	str	r2, [r3, #88]	; 0x58
 800f53c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f53e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f542:	9301      	str	r3, [sp, #4]
 800f544:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800f546:	2200      	movs	r2, #0
 800f548:	210f      	movs	r1, #15
 800f54a:	f06f 0001 	mvn.w	r0, #1
 800f54e:	f7f2 f98f 	bl	8001870 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800f552:	b003      	add	sp, #12
 800f554:	f85d fb04 	ldr.w	pc, [sp], #4
 800f558:	40021000 	.word	0x40021000

0800f55c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f55c:	b500      	push	{lr}
 800f55e:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 800f560:	2200      	movs	r2, #0
 800f562:	4601      	mov	r1, r0
 800f564:	201c      	movs	r0, #28
 800f566:	f7f2 f983 	bl	8001870 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 800f56a:	201c      	movs	r0, #28
 800f56c:	f7f2 f9b2 	bl	80018d4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800f570:	4b15      	ldr	r3, [pc, #84]	; (800f5c8 <HAL_InitTick+0x6c>)
 800f572:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f574:	f042 0201 	orr.w	r2, r2, #1
 800f578:	659a      	str	r2, [r3, #88]	; 0x58
 800f57a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f57c:	f003 0301 	and.w	r3, r3, #1
 800f580:	9301      	str	r3, [sp, #4]
 800f582:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800f584:	a902      	add	r1, sp, #8
 800f586:	a803      	add	r0, sp, #12
 800f588:	f7f4 ff6e 	bl	8004468 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800f58c:	f7f4 ff48 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800f590:	4b0e      	ldr	r3, [pc, #56]	; (800f5cc <HAL_InitTick+0x70>)
 800f592:	fba3 2300 	umull	r2, r3, r3, r0
 800f596:	0c9b      	lsrs	r3, r3, #18
 800f598:	3b01      	subs	r3, #1
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800f59a:	480d      	ldr	r0, [pc, #52]	; (800f5d0 <HAL_InitTick+0x74>)
 800f59c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f5a0:	6002      	str	r2, [r0, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 800f5a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f5a6:	60c2      	str	r2, [r0, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800f5a8:	6043      	str	r3, [r0, #4]
  htim2.Init.ClockDivision = 0;
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	6103      	str	r3, [r0, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f5ae:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800f5b0:	f7f6 fdce 	bl	8006150 <HAL_TIM_Base_Init>
 800f5b4:	b118      	cbz	r0, 800f5be <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
  }
  
  /* Return function status */
  return HAL_ERROR;
 800f5b6:	2001      	movs	r0, #1
}
 800f5b8:	b009      	add	sp, #36	; 0x24
 800f5ba:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim2);
 800f5be:	4804      	ldr	r0, [pc, #16]	; (800f5d0 <HAL_InitTick+0x74>)
 800f5c0:	f7f6 fc60 	bl	8005e84 <HAL_TIM_Base_Start_IT>
 800f5c4:	e7f8      	b.n	800f5b8 <HAL_InitTick+0x5c>
 800f5c6:	bf00      	nop
 800f5c8:	40021000 	.word	0x40021000
 800f5cc:	431bde83 	.word	0x431bde83
 800f5d0:	20005ac4 	.word	0x20005ac4

0800f5d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800f5d4:	4770      	bx	lr

0800f5d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800f5d6:	e7fe      	b.n	800f5d6 <HardFault_Handler>

0800f5d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800f5d8:	e7fe      	b.n	800f5d8 <MemManage_Handler>

0800f5da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800f5da:	e7fe      	b.n	800f5da <BusFault_Handler>

0800f5dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800f5dc:	e7fe      	b.n	800f5dc <UsageFault_Handler>

0800f5de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800f5de:	4770      	bx	lr

0800f5e0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800f5e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800f5e2:	2001      	movs	r0, #1
 800f5e4:	f7f2 fe06 	bl	80021f4 <HAL_GPIO_EXTI_IRQHandler>
 800f5e8:	bd08      	pop	{r3, pc}

0800f5ea <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800f5ea:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800f5ec:	2002      	movs	r0, #2
 800f5ee:	f7f2 fe01 	bl	80021f4 <HAL_GPIO_EXTI_IRQHandler>
 800f5f2:	bd08      	pop	{r3, pc}

0800f5f4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800f5f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800f5f6:	2004      	movs	r0, #4
 800f5f8:	f7f2 fdfc 	bl	80021f4 <HAL_GPIO_EXTI_IRQHandler>
 800f5fc:	bd08      	pop	{r3, pc}

0800f5fe <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800f5fe:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800f600:	2008      	movs	r0, #8
 800f602:	f7f2 fdf7 	bl	80021f4 <HAL_GPIO_EXTI_IRQHandler>
 800f606:	bd08      	pop	{r3, pc}

0800f608 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800f608:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800f60a:	4802      	ldr	r0, [pc, #8]	; (800f614 <DMA1_Channel1_IRQHandler+0xc>)
 800f60c:	f7f2 fca5 	bl	8001f5a <HAL_DMA_IRQHandler>
 800f610:	bd08      	pop	{r3, pc}
 800f612:	bf00      	nop
 800f614:	200054ac 	.word	0x200054ac

0800f618 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800f618:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800f61a:	2020      	movs	r0, #32
 800f61c:	f7f2 fdea 	bl	80021f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800f620:	2080      	movs	r0, #128	; 0x80
 800f622:	f7f2 fde7 	bl	80021f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800f626:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f62a:	f7f2 fde3 	bl	80021f4 <HAL_GPIO_EXTI_IRQHandler>
 800f62e:	bd08      	pop	{r3, pc}

0800f630 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800f630:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800f632:	4802      	ldr	r0, [pc, #8]	; (800f63c <TIM2_IRQHandler+0xc>)
 800f634:	f7f6 fc5b 	bl	8005eee <HAL_TIM_IRQHandler>
 800f638:	bd08      	pop	{r3, pc}
 800f63a:	bf00      	nop
 800f63c:	20005ac4 	.word	0x20005ac4

0800f640 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800f640:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800f642:	4802      	ldr	r0, [pc, #8]	; (800f64c <TIM3_IRQHandler+0xc>)
 800f644:	f7f6 fc53 	bl	8005eee <HAL_TIM_IRQHandler>
 800f648:	bd08      	pop	{r3, pc}
 800f64a:	bf00      	nop
 800f64c:	20005b84 	.word	0x20005b84

0800f650 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800f650:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800f652:	4802      	ldr	r0, [pc, #8]	; (800f65c <TIM4_IRQHandler+0xc>)
 800f654:	f7f6 fc4b 	bl	8005eee <HAL_TIM_IRQHandler>
 800f658:	bd08      	pop	{r3, pc}
 800f65a:	bf00      	nop
 800f65c:	20005b04 	.word	0x20005b04

0800f660 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800f660:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800f662:	4802      	ldr	r0, [pc, #8]	; (800f66c <I2C1_EV_IRQHandler+0xc>)
 800f664:	f7f3 fc12 	bl	8002e8c <HAL_I2C_EV_IRQHandler>
 800f668:	bd08      	pop	{r3, pc}
 800f66a:	bf00      	nop
 800f66c:	2000556c 	.word	0x2000556c

0800f670 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800f670:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800f672:	4802      	ldr	r0, [pc, #8]	; (800f67c <I2C2_EV_IRQHandler+0xc>)
 800f674:	f7f3 fc0a 	bl	8002e8c <HAL_I2C_EV_IRQHandler>
 800f678:	bd08      	pop	{r3, pc}
 800f67a:	bf00      	nop
 800f67c:	200055b8 	.word	0x200055b8

0800f680 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800f680:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800f682:	4802      	ldr	r0, [pc, #8]	; (800f68c <SPI2_IRQHandler+0xc>)
 800f684:	f7f6 f9ea 	bl	8005a5c <HAL_SPI_IRQHandler>
 800f688:	bd08      	pop	{r3, pc}
 800f68a:	bf00      	nop
 800f68c:	20005a60 	.word	0x20005a60

0800f690 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800f690:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800f692:	4802      	ldr	r0, [pc, #8]	; (800f69c <USART1_IRQHandler+0xc>)
 800f694:	f7f6 ffea 	bl	800666c <HAL_UART_IRQHandler>
 800f698:	bd08      	pop	{r3, pc}
 800f69a:	bf00      	nop
 800f69c:	20005d48 	.word	0x20005d48

0800f6a0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800f6a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800f6a2:	4802      	ldr	r0, [pc, #8]	; (800f6ac <USART3_IRQHandler+0xc>)
 800f6a4:	f7f6 ffe2 	bl	800666c <HAL_UART_IRQHandler>
 800f6a8:	bd08      	pop	{r3, pc}
 800f6aa:	bf00      	nop
 800f6ac:	20005cc4 	.word	0x20005cc4

0800f6b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800f6b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800f6b2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800f6b6:	f7f2 fd9d 	bl	80021f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800f6ba:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f6be:	f7f2 fd99 	bl	80021f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800f6c2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800f6c6:	f7f2 fd95 	bl	80021f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800f6ca:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800f6ce:	f7f2 fd91 	bl	80021f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800f6d2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800f6d6:	f7f2 fd8d 	bl	80021f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800f6da:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800f6de:	f7f2 fd89 	bl	80021f4 <HAL_GPIO_EXTI_IRQHandler>
 800f6e2:	bd08      	pop	{r3, pc}

0800f6e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800f6e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800f6e6:	4803      	ldr	r0, [pc, #12]	; (800f6f4 <TIM6_DAC_IRQHandler+0x10>)
 800f6e8:	f7f6 fc01 	bl	8005eee <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800f6ec:	4802      	ldr	r0, [pc, #8]	; (800f6f8 <TIM6_DAC_IRQHandler+0x14>)
 800f6ee:	f7f2 f9dd 	bl	8001aac <HAL_DAC_IRQHandler>
 800f6f2:	bd08      	pop	{r3, pc}
 800f6f4:	20005bc4 	.word	0x20005bc4
 800f6f8:	20005498 	.word	0x20005498

0800f6fc <COMP_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 21 and 22.
  */
void COMP_IRQHandler(void)
{
 800f6fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 800f6fe:	4802      	ldr	r0, [pc, #8]	; (800f708 <COMP_IRQHandler+0xc>)
 800f700:	f7f2 f87c 	bl	80017fc <HAL_COMP_IRQHandler>
 800f704:	bd08      	pop	{r3, pc}
 800f706:	bf00      	nop
 800f708:	2000546c 	.word	0x2000546c

0800f70c <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 800f70c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 800f70e:	4802      	ldr	r0, [pc, #8]	; (800f718 <I2C3_EV_IRQHandler+0xc>)
 800f710:	f7f3 fbbc 	bl	8002e8c <HAL_I2C_EV_IRQHandler>
 800f714:	bd08      	pop	{r3, pc}
 800f716:	bf00      	nop
 800f718:	20005520 	.word	0x20005520

0800f71c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800f71c:	490f      	ldr	r1, [pc, #60]	; (800f75c <SystemInit+0x40>)
 800f71e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800f722:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800f72a:	4b0d      	ldr	r3, [pc, #52]	; (800f760 <SystemInit+0x44>)
 800f72c:	681a      	ldr	r2, [r3, #0]
 800f72e:	f042 0201 	orr.w	r2, r2, #1
 800f732:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800f734:	2000      	movs	r0, #0
 800f736:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800f738:	681a      	ldr	r2, [r3, #0]
 800f73a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800f73e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800f742:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800f744:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f748:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800f74a:	681a      	ldr	r2, [r3, #0]
 800f74c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f750:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800f752:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800f754:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f758:	608b      	str	r3, [r1, #8]
 800f75a:	4770      	bx	lr
 800f75c:	e000ed00 	.word	0xe000ed00
 800f760:	40021000 	.word	0x40021000

0800f764 <MX_TIM3_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800f764:	b500      	push	{lr}
 800f766:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f768:	2300      	movs	r3, #0
 800f76a:	9304      	str	r3, [sp, #16]
 800f76c:	9305      	str	r3, [sp, #20]
 800f76e:	9306      	str	r3, [sp, #24]
 800f770:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f772:	9301      	str	r3, [sp, #4]
 800f774:	9302      	str	r3, [sp, #8]
 800f776:	9303      	str	r3, [sp, #12]

  htim3.Instance = TIM3;
 800f778:	4815      	ldr	r0, [pc, #84]	; (800f7d0 <MX_TIM3_Init+0x6c>)
 800f77a:	4a16      	ldr	r2, [pc, #88]	; (800f7d4 <MX_TIM3_Init+0x70>)
 800f77c:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 799;
 800f77e:	f240 321f 	movw	r2, #799	; 0x31f
 800f782:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f784:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 9;
 800f786:	2209      	movs	r2, #9
 800f788:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f78a:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f78c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800f78e:	f7f6 fcdf 	bl	8006150 <HAL_TIM_Base_Init>
 800f792:	b998      	cbnz	r0, 800f7bc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f794:	a908      	add	r1, sp, #32
 800f796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f79a:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800f79e:	480c      	ldr	r0, [pc, #48]	; (800f7d0 <MX_TIM3_Init+0x6c>)
 800f7a0:	f7f6 fdf6 	bl	8006390 <HAL_TIM_ConfigClockSource>
 800f7a4:	b968      	cbnz	r0, 800f7c2 <MX_TIM3_Init+0x5e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f7aa:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800f7ac:	a901      	add	r1, sp, #4
 800f7ae:	4808      	ldr	r0, [pc, #32]	; (800f7d0 <MX_TIM3_Init+0x6c>)
 800f7b0:	f7f6 febc 	bl	800652c <HAL_TIMEx_MasterConfigSynchronization>
 800f7b4:	b940      	cbnz	r0, 800f7c8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
  }

}
 800f7b6:	b009      	add	sp, #36	; 0x24
 800f7b8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800f7bc:	f7ff fa8a 	bl	800ecd4 <Error_Handler>
 800f7c0:	e7e8      	b.n	800f794 <MX_TIM3_Init+0x30>
    Error_Handler();
 800f7c2:	f7ff fa87 	bl	800ecd4 <Error_Handler>
 800f7c6:	e7ee      	b.n	800f7a6 <MX_TIM3_Init+0x42>
    Error_Handler();
 800f7c8:	f7ff fa84 	bl	800ecd4 <Error_Handler>
}
 800f7cc:	e7f3      	b.n	800f7b6 <MX_TIM3_Init+0x52>
 800f7ce:	bf00      	nop
 800f7d0:	20005b84 	.word	0x20005b84
 800f7d4:	40000400 	.word	0x40000400

0800f7d8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800f7d8:	b500      	push	{lr}
 800f7da:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f7dc:	2300      	movs	r3, #0
 800f7de:	9304      	str	r3, [sp, #16]
 800f7e0:	9305      	str	r3, [sp, #20]
 800f7e2:	9306      	str	r3, [sp, #24]
 800f7e4:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f7e6:	9301      	str	r3, [sp, #4]
 800f7e8:	9302      	str	r3, [sp, #8]
 800f7ea:	9303      	str	r3, [sp, #12]

  htim4.Instance = TIM4;
 800f7ec:	4815      	ldr	r0, [pc, #84]	; (800f844 <MX_TIM4_Init+0x6c>)
 800f7ee:	4a16      	ldr	r2, [pc, #88]	; (800f848 <MX_TIM4_Init+0x70>)
 800f7f0:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 7999;
 800f7f2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800f7f6:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f7f8:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 6000;
 800f7fa:	f241 7270 	movw	r2, #6000	; 0x1770
 800f7fe:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f800:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f802:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800f804:	f7f6 fca4 	bl	8006150 <HAL_TIM_Base_Init>
 800f808:	b998      	cbnz	r0, 800f832 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f80a:	a908      	add	r1, sp, #32
 800f80c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f810:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800f814:	480b      	ldr	r0, [pc, #44]	; (800f844 <MX_TIM4_Init+0x6c>)
 800f816:	f7f6 fdbb 	bl	8006390 <HAL_TIM_ConfigClockSource>
 800f81a:	b968      	cbnz	r0, 800f838 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f81c:	2300      	movs	r3, #0
 800f81e:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f820:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800f822:	a901      	add	r1, sp, #4
 800f824:	4807      	ldr	r0, [pc, #28]	; (800f844 <MX_TIM4_Init+0x6c>)
 800f826:	f7f6 fe81 	bl	800652c <HAL_TIMEx_MasterConfigSynchronization>
 800f82a:	b940      	cbnz	r0, 800f83e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
  }

}
 800f82c:	b009      	add	sp, #36	; 0x24
 800f82e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800f832:	f7ff fa4f 	bl	800ecd4 <Error_Handler>
 800f836:	e7e8      	b.n	800f80a <MX_TIM4_Init+0x32>
    Error_Handler();
 800f838:	f7ff fa4c 	bl	800ecd4 <Error_Handler>
 800f83c:	e7ee      	b.n	800f81c <MX_TIM4_Init+0x44>
    Error_Handler();
 800f83e:	f7ff fa49 	bl	800ecd4 <Error_Handler>
}
 800f842:	e7f3      	b.n	800f82c <MX_TIM4_Init+0x54>
 800f844:	20005b04 	.word	0x20005b04
 800f848:	40000800 	.word	0x40000800

0800f84c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800f84c:	b500      	push	{lr}
 800f84e:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f850:	2300      	movs	r3, #0
 800f852:	9301      	str	r3, [sp, #4]
 800f854:	9302      	str	r3, [sp, #8]
 800f856:	9303      	str	r3, [sp, #12]

  htim6.Instance = TIM6;
 800f858:	480e      	ldr	r0, [pc, #56]	; (800f894 <MX_TIM6_Init+0x48>)
 800f85a:	4a0f      	ldr	r2, [pc, #60]	; (800f898 <MX_TIM6_Init+0x4c>)
 800f85c:	6002      	str	r2, [r0, #0]
  htim6.Init.Prescaler = 9;
 800f85e:	2209      	movs	r2, #9
 800f860:	6042      	str	r2, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f862:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 199;
 800f864:	22c7      	movs	r2, #199	; 0xc7
 800f866:	60c2      	str	r2, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f868:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800f86a:	f7f6 fc71 	bl	8006150 <HAL_TIM_Base_Init>
 800f86e:	b958      	cbnz	r0, 800f888 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800f870:	2320      	movs	r3, #32
 800f872:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f874:	2300      	movs	r3, #0
 800f876:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800f878:	a901      	add	r1, sp, #4
 800f87a:	4806      	ldr	r0, [pc, #24]	; (800f894 <MX_TIM6_Init+0x48>)
 800f87c:	f7f6 fe56 	bl	800652c <HAL_TIMEx_MasterConfigSynchronization>
 800f880:	b928      	cbnz	r0, 800f88e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
  }

}
 800f882:	b005      	add	sp, #20
 800f884:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800f888:	f7ff fa24 	bl	800ecd4 <Error_Handler>
 800f88c:	e7f0      	b.n	800f870 <MX_TIM6_Init+0x24>
    Error_Handler();
 800f88e:	f7ff fa21 	bl	800ecd4 <Error_Handler>
}
 800f892:	e7f6      	b.n	800f882 <MX_TIM6_Init+0x36>
 800f894:	20005bc4 	.word	0x20005bc4
 800f898:	40001000 	.word	0x40001000

0800f89c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800f89c:	b500      	push	{lr}
 800f89e:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	9301      	str	r3, [sp, #4]
 800f8a4:	9302      	str	r3, [sp, #8]
 800f8a6:	9303      	str	r3, [sp, #12]

  htim7.Instance = TIM7;
 800f8a8:	480d      	ldr	r0, [pc, #52]	; (800f8e0 <MX_TIM7_Init+0x44>)
 800f8aa:	4a0e      	ldr	r2, [pc, #56]	; (800f8e4 <MX_TIM7_Init+0x48>)
 800f8ac:	6002      	str	r2, [r0, #0]
  htim7.Init.Prescaler = 0;
 800f8ae:	6043      	str	r3, [r0, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f8b0:	6083      	str	r3, [r0, #8]
  htim7.Init.Period = 0;
 800f8b2:	60c3      	str	r3, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f8b4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800f8b6:	f7f6 fc4b 	bl	8006150 <HAL_TIM_Base_Init>
 800f8ba:	b950      	cbnz	r0, 800f8d2 <MX_TIM7_Init+0x36>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f8bc:	2300      	movs	r3, #0
 800f8be:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f8c0:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800f8c2:	a901      	add	r1, sp, #4
 800f8c4:	4806      	ldr	r0, [pc, #24]	; (800f8e0 <MX_TIM7_Init+0x44>)
 800f8c6:	f7f6 fe31 	bl	800652c <HAL_TIMEx_MasterConfigSynchronization>
 800f8ca:	b928      	cbnz	r0, 800f8d8 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
  }

}
 800f8cc:	b005      	add	sp, #20
 800f8ce:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800f8d2:	f7ff f9ff 	bl	800ecd4 <Error_Handler>
 800f8d6:	e7f1      	b.n	800f8bc <MX_TIM7_Init+0x20>
    Error_Handler();
 800f8d8:	f7ff f9fc 	bl	800ecd4 <Error_Handler>
}
 800f8dc:	e7f6      	b.n	800f8cc <MX_TIM7_Init+0x30>
 800f8de:	bf00      	nop
 800f8e0:	20005c84 	.word	0x20005c84
 800f8e4:	40001400 	.word	0x40001400

0800f8e8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800f8e8:	b508      	push	{r3, lr}

  htim16.Instance = TIM16;
 800f8ea:	4809      	ldr	r0, [pc, #36]	; (800f910 <MX_TIM16_Init+0x28>)
 800f8ec:	4b09      	ldr	r3, [pc, #36]	; (800f914 <MX_TIM16_Init+0x2c>)
 800f8ee:	6003      	str	r3, [r0, #0]
  htim16.Init.Prescaler = 7;
 800f8f0:	2307      	movs	r3, #7
 800f8f2:	6043      	str	r3, [r0, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	6083      	str	r3, [r0, #8]
  htim16.Init.Period = 49;
 800f8f8:	2231      	movs	r2, #49	; 0x31
 800f8fa:	60c2      	str	r2, [r0, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f8fc:	6103      	str	r3, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 800f8fe:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f900:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800f902:	f7f6 fc25 	bl	8006150 <HAL_TIM_Base_Init>
 800f906:	b900      	cbnz	r0, 800f90a <MX_TIM16_Init+0x22>
 800f908:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 800f90a:	f7ff f9e3 	bl	800ecd4 <Error_Handler>
  }

}
 800f90e:	e7fb      	b.n	800f908 <MX_TIM16_Init+0x20>
 800f910:	20005c44 	.word	0x20005c44
 800f914:	40014400 	.word	0x40014400

0800f918 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800f918:	b508      	push	{r3, lr}

  htim17.Instance = TIM17;
 800f91a:	4809      	ldr	r0, [pc, #36]	; (800f940 <MX_TIM17_Init+0x28>)
 800f91c:	4b09      	ldr	r3, [pc, #36]	; (800f944 <MX_TIM17_Init+0x2c>)
 800f91e:	6003      	str	r3, [r0, #0]
  htim17.Init.Prescaler = 79;
 800f920:	234f      	movs	r3, #79	; 0x4f
 800f922:	6043      	str	r3, [r0, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f924:	2300      	movs	r3, #0
 800f926:	6083      	str	r3, [r0, #8]
  htim17.Init.Period = 49;
 800f928:	2231      	movs	r2, #49	; 0x31
 800f92a:	60c2      	str	r2, [r0, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f92c:	6103      	str	r3, [r0, #16]
  htim17.Init.RepetitionCounter = 0;
 800f92e:	6143      	str	r3, [r0, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f930:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800f932:	f7f6 fc0d 	bl	8006150 <HAL_TIM_Base_Init>
 800f936:	b900      	cbnz	r0, 800f93a <MX_TIM17_Init+0x22>
 800f938:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 800f93a:	f7ff f9cb 	bl	800ecd4 <Error_Handler>
  }

}
 800f93e:	e7fb      	b.n	800f938 <MX_TIM17_Init+0x20>
 800f940:	20005b44 	.word	0x20005b44
 800f944:	40014800 	.word	0x40014800

0800f948 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800f948:	b500      	push	{lr}
 800f94a:	b089      	sub	sp, #36	; 0x24

  if(tim_baseHandle->Instance==TIM1)
 800f94c:	6803      	ldr	r3, [r0, #0]
 800f94e:	4a3e      	ldr	r2, [pc, #248]	; (800fa48 <HAL_TIM_Base_MspInit+0x100>)
 800f950:	4293      	cmp	r3, r2
 800f952:	d014      	beq.n	800f97e <HAL_TIM_Base_MspInit+0x36>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 800f954:	4a3d      	ldr	r2, [pc, #244]	; (800fa4c <HAL_TIM_Base_MspInit+0x104>)
 800f956:	4293      	cmp	r3, r2
 800f958:	d01c      	beq.n	800f994 <HAL_TIM_Base_MspInit+0x4c>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM4)
 800f95a:	4a3d      	ldr	r2, [pc, #244]	; (800fa50 <HAL_TIM_Base_MspInit+0x108>)
 800f95c:	4293      	cmp	r3, r2
 800f95e:	d02c      	beq.n	800f9ba <HAL_TIM_Base_MspInit+0x72>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM6)
 800f960:	4a3c      	ldr	r2, [pc, #240]	; (800fa54 <HAL_TIM_Base_MspInit+0x10c>)
 800f962:	4293      	cmp	r3, r2
 800f964:	d03c      	beq.n	800f9e0 <HAL_TIM_Base_MspInit+0x98>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM7)
 800f966:	4a3c      	ldr	r2, [pc, #240]	; (800fa58 <HAL_TIM_Base_MspInit+0x110>)
 800f968:	4293      	cmp	r3, r2
 800f96a:	d04c      	beq.n	800fa06 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM16)
 800f96c:	4a3b      	ldr	r2, [pc, #236]	; (800fa5c <HAL_TIM_Base_MspInit+0x114>)
 800f96e:	4293      	cmp	r3, r2
 800f970:	d054      	beq.n	800fa1c <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM17)
 800f972:	4a3b      	ldr	r2, [pc, #236]	; (800fa60 <HAL_TIM_Base_MspInit+0x118>)
 800f974:	4293      	cmp	r3, r2
 800f976:	d05c      	beq.n	800fa32 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800f978:	b009      	add	sp, #36	; 0x24
 800f97a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 800f97e:	4b39      	ldr	r3, [pc, #228]	; (800fa64 <HAL_TIM_Base_MspInit+0x11c>)
 800f980:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800f982:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f986:	661a      	str	r2, [r3, #96]	; 0x60
 800f988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f98a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f98e:	9301      	str	r3, [sp, #4]
 800f990:	9b01      	ldr	r3, [sp, #4]
 800f992:	e7f1      	b.n	800f978 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800f994:	4b33      	ldr	r3, [pc, #204]	; (800fa64 <HAL_TIM_Base_MspInit+0x11c>)
 800f996:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f998:	f042 0202 	orr.w	r2, r2, #2
 800f99c:	659a      	str	r2, [r3, #88]	; 0x58
 800f99e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9a0:	f003 0302 	and.w	r3, r3, #2
 800f9a4:	9302      	str	r3, [sp, #8]
 800f9a6:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	2105      	movs	r1, #5
 800f9ac:	201d      	movs	r0, #29
 800f9ae:	f7f1 ff5f 	bl	8001870 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800f9b2:	201d      	movs	r0, #29
 800f9b4:	f7f1 ff8e 	bl	80018d4 <HAL_NVIC_EnableIRQ>
 800f9b8:	e7de      	b.n	800f978 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800f9ba:	4b2a      	ldr	r3, [pc, #168]	; (800fa64 <HAL_TIM_Base_MspInit+0x11c>)
 800f9bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f9be:	f042 0204 	orr.w	r2, r2, #4
 800f9c2:	659a      	str	r2, [r3, #88]	; 0x58
 800f9c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9c6:	f003 0304 	and.w	r3, r3, #4
 800f9ca:	9303      	str	r3, [sp, #12]
 800f9cc:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	2105      	movs	r1, #5
 800f9d2:	201e      	movs	r0, #30
 800f9d4:	f7f1 ff4c 	bl	8001870 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800f9d8:	201e      	movs	r0, #30
 800f9da:	f7f1 ff7b 	bl	80018d4 <HAL_NVIC_EnableIRQ>
 800f9de:	e7cb      	b.n	800f978 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800f9e0:	4b20      	ldr	r3, [pc, #128]	; (800fa64 <HAL_TIM_Base_MspInit+0x11c>)
 800f9e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f9e4:	f042 0210 	orr.w	r2, r2, #16
 800f9e8:	659a      	str	r2, [r3, #88]	; 0x58
 800f9ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9ec:	f003 0310 	and.w	r3, r3, #16
 800f9f0:	9304      	str	r3, [sp, #16]
 800f9f2:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	2105      	movs	r1, #5
 800f9f8:	2036      	movs	r0, #54	; 0x36
 800f9fa:	f7f1 ff39 	bl	8001870 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800f9fe:	2036      	movs	r0, #54	; 0x36
 800fa00:	f7f1 ff68 	bl	80018d4 <HAL_NVIC_EnableIRQ>
 800fa04:	e7b8      	b.n	800f978 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800fa06:	4b17      	ldr	r3, [pc, #92]	; (800fa64 <HAL_TIM_Base_MspInit+0x11c>)
 800fa08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fa0a:	f042 0220 	orr.w	r2, r2, #32
 800fa0e:	659a      	str	r2, [r3, #88]	; 0x58
 800fa10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa12:	f003 0320 	and.w	r3, r3, #32
 800fa16:	9305      	str	r3, [sp, #20]
 800fa18:	9b05      	ldr	r3, [sp, #20]
 800fa1a:	e7ad      	b.n	800f978 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800fa1c:	4b11      	ldr	r3, [pc, #68]	; (800fa64 <HAL_TIM_Base_MspInit+0x11c>)
 800fa1e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800fa20:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800fa24:	661a      	str	r2, [r3, #96]	; 0x60
 800fa26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fa28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fa2c:	9306      	str	r3, [sp, #24]
 800fa2e:	9b06      	ldr	r3, [sp, #24]
 800fa30:	e7a2      	b.n	800f978 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800fa32:	4b0c      	ldr	r3, [pc, #48]	; (800fa64 <HAL_TIM_Base_MspInit+0x11c>)
 800fa34:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800fa36:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800fa3a:	661a      	str	r2, [r3, #96]	; 0x60
 800fa3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fa3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fa42:	9307      	str	r3, [sp, #28]
 800fa44:	9b07      	ldr	r3, [sp, #28]
}
 800fa46:	e797      	b.n	800f978 <HAL_TIM_Base_MspInit+0x30>
 800fa48:	40012c00 	.word	0x40012c00
 800fa4c:	40000400 	.word	0x40000400
 800fa50:	40000800 	.word	0x40000800
 800fa54:	40001000 	.word	0x40001000
 800fa58:	40001400 	.word	0x40001400
 800fa5c:	40014400 	.word	0x40014400
 800fa60:	40014800 	.word	0x40014800
 800fa64:	40021000 	.word	0x40021000

0800fa68 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800fa68:	b500      	push	{lr}
 800fa6a:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	9301      	str	r3, [sp, #4]
 800fa70:	9302      	str	r3, [sp, #8]
 800fa72:	9303      	str	r3, [sp, #12]
 800fa74:	9304      	str	r3, [sp, #16]
 800fa76:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM1)
 800fa78:	6802      	ldr	r2, [r0, #0]
 800fa7a:	4b0e      	ldr	r3, [pc, #56]	; (800fab4 <HAL_TIM_MspPostInit+0x4c>)
 800fa7c:	429a      	cmp	r2, r3
 800fa7e:	d002      	beq.n	800fa86 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800fa80:	b007      	add	sp, #28
 800fa82:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800fa86:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800fa8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fa8c:	f042 0210 	orr.w	r2, r2, #16
 800fa90:	64da      	str	r2, [r3, #76]	; 0x4c
 800fa92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa94:	f003 0310 	and.w	r3, r3, #16
 800fa98:	9300      	str	r3, [sp, #0]
 800fa9a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 800fa9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800faa0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800faa2:	2302      	movs	r3, #2
 800faa4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800faa6:	2301      	movs	r3, #1
 800faa8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 800faaa:	a901      	add	r1, sp, #4
 800faac:	4802      	ldr	r0, [pc, #8]	; (800fab8 <HAL_TIM_MspPostInit+0x50>)
 800faae:	f7f2 fab5 	bl	800201c <HAL_GPIO_Init>
}
 800fab2:	e7e5      	b.n	800fa80 <HAL_TIM_MspPostInit+0x18>
 800fab4:	40012c00 	.word	0x40012c00
 800fab8:	48001000 	.word	0x48001000

0800fabc <MX_TIM1_Init>:
{
 800fabc:	b510      	push	{r4, lr}
 800fabe:	b09a      	sub	sp, #104	; 0x68
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800fac0:	2400      	movs	r4, #0
 800fac2:	9416      	str	r4, [sp, #88]	; 0x58
 800fac4:	9417      	str	r4, [sp, #92]	; 0x5c
 800fac6:	9418      	str	r4, [sp, #96]	; 0x60
 800fac8:	9419      	str	r4, [sp, #100]	; 0x64
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800faca:	9413      	str	r4, [sp, #76]	; 0x4c
 800facc:	9414      	str	r4, [sp, #80]	; 0x50
 800face:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 800fad0:	940c      	str	r4, [sp, #48]	; 0x30
 800fad2:	940d      	str	r4, [sp, #52]	; 0x34
 800fad4:	940e      	str	r4, [sp, #56]	; 0x38
 800fad6:	940f      	str	r4, [sp, #60]	; 0x3c
 800fad8:	9410      	str	r4, [sp, #64]	; 0x40
 800fada:	9411      	str	r4, [sp, #68]	; 0x44
 800fadc:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800fade:	222c      	movs	r2, #44	; 0x2c
 800fae0:	4621      	mov	r1, r4
 800fae2:	a801      	add	r0, sp, #4
 800fae4:	f001 fa6d 	bl	8010fc2 <memset>
  htim1.Instance = TIM1;
 800fae8:	4831      	ldr	r0, [pc, #196]	; (800fbb0 <MX_TIM1_Init+0xf4>)
 800faea:	4b32      	ldr	r3, [pc, #200]	; (800fbb4 <MX_TIM1_Init+0xf8>)
 800faec:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 7;
 800faee:	2307      	movs	r3, #7
 800faf0:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800faf2:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 99;
 800faf4:	2363      	movs	r3, #99	; 0x63
 800faf6:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800faf8:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800fafa:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fafc:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800fafe:	f7f6 fb27 	bl	8006150 <HAL_TIM_Base_Init>
 800fb02:	2800      	cmp	r0, #0
 800fb04:	d142      	bne.n	800fb8c <MX_TIM1_Init+0xd0>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fb06:	a91a      	add	r1, sp, #104	; 0x68
 800fb08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fb0c:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800fb10:	4827      	ldr	r0, [pc, #156]	; (800fbb0 <MX_TIM1_Init+0xf4>)
 800fb12:	f7f6 fc3d 	bl	8006390 <HAL_TIM_ConfigClockSource>
 800fb16:	2800      	cmp	r0, #0
 800fb18:	d13b      	bne.n	800fb92 <MX_TIM1_Init+0xd6>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800fb1a:	4825      	ldr	r0, [pc, #148]	; (800fbb0 <MX_TIM1_Init+0xf4>)
 800fb1c:	f7f6 fb31 	bl	8006182 <HAL_TIM_PWM_Init>
 800fb20:	2800      	cmp	r0, #0
 800fb22:	d139      	bne.n	800fb98 <MX_TIM1_Init+0xdc>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fb24:	2300      	movs	r3, #0
 800fb26:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800fb28:	9314      	str	r3, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fb2a:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800fb2c:	a913      	add	r1, sp, #76	; 0x4c
 800fb2e:	4820      	ldr	r0, [pc, #128]	; (800fbb0 <MX_TIM1_Init+0xf4>)
 800fb30:	f7f6 fcfc 	bl	800652c <HAL_TIMEx_MasterConfigSynchronization>
 800fb34:	2800      	cmp	r0, #0
 800fb36:	d132      	bne.n	800fb9e <MX_TIM1_Init+0xe2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800fb38:	2360      	movs	r3, #96	; 0x60
 800fb3a:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = 40;
 800fb3c:	2328      	movs	r3, #40	; 0x28
 800fb3e:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800fb40:	2302      	movs	r3, #2
 800fb42:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800fb44:	2200      	movs	r2, #0
 800fb46:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800fb48:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800fb4a:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800fb4c:	9212      	str	r2, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800fb4e:	a90c      	add	r1, sp, #48	; 0x30
 800fb50:	4817      	ldr	r0, [pc, #92]	; (800fbb0 <MX_TIM1_Init+0xf4>)
 800fb52:	f7f6 fb77 	bl	8006244 <HAL_TIM_PWM_ConfigChannel>
 800fb56:	bb28      	cbnz	r0, 800fba4 <MX_TIM1_Init+0xe8>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800fb58:	2300      	movs	r3, #0
 800fb5a:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800fb5c:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800fb5e:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800fb60:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800fb62:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800fb64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800fb68:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800fb6a:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800fb6c:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800fb6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800fb72:	9209      	str	r2, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800fb74:	930a      	str	r3, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800fb76:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800fb78:	a901      	add	r1, sp, #4
 800fb7a:	480d      	ldr	r0, [pc, #52]	; (800fbb0 <MX_TIM1_Init+0xf4>)
 800fb7c:	f7f6 fd08 	bl	8006590 <HAL_TIMEx_ConfigBreakDeadTime>
 800fb80:	b998      	cbnz	r0, 800fbaa <MX_TIM1_Init+0xee>
  HAL_TIM_MspPostInit(&htim1);
 800fb82:	480b      	ldr	r0, [pc, #44]	; (800fbb0 <MX_TIM1_Init+0xf4>)
 800fb84:	f7ff ff70 	bl	800fa68 <HAL_TIM_MspPostInit>
}
 800fb88:	b01a      	add	sp, #104	; 0x68
 800fb8a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800fb8c:	f7ff f8a2 	bl	800ecd4 <Error_Handler>
 800fb90:	e7b9      	b.n	800fb06 <MX_TIM1_Init+0x4a>
    Error_Handler();
 800fb92:	f7ff f89f 	bl	800ecd4 <Error_Handler>
 800fb96:	e7c0      	b.n	800fb1a <MX_TIM1_Init+0x5e>
    Error_Handler();
 800fb98:	f7ff f89c 	bl	800ecd4 <Error_Handler>
 800fb9c:	e7c2      	b.n	800fb24 <MX_TIM1_Init+0x68>
    Error_Handler();
 800fb9e:	f7ff f899 	bl	800ecd4 <Error_Handler>
 800fba2:	e7c9      	b.n	800fb38 <MX_TIM1_Init+0x7c>
    Error_Handler();
 800fba4:	f7ff f896 	bl	800ecd4 <Error_Handler>
 800fba8:	e7d6      	b.n	800fb58 <MX_TIM1_Init+0x9c>
    Error_Handler();
 800fbaa:	f7ff f893 	bl	800ecd4 <Error_Handler>
 800fbae:	e7e8      	b.n	800fb82 <MX_TIM1_Init+0xc6>
 800fbb0:	20005c04 	.word	0x20005c04
 800fbb4:	40012c00 	.word	0x40012c00

0800fbb8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800fbb8:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 800fbba:	4817      	ldr	r0, [pc, #92]	; (800fc18 <MX_USART1_UART_Init+0x60>)
 800fbbc:	4b17      	ldr	r3, [pc, #92]	; (800fc1c <MX_USART1_UART_Init+0x64>)
 800fbbe:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800fbc0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800fbc4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800fbca:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800fbcc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800fbce:	220c      	movs	r2, #12
 800fbd0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800fbd2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800fbd4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800fbd6:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800fbd8:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800fbda:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800fbdc:	f7f7 fd98 	bl	8007710 <HAL_UART_Init>
 800fbe0:	b970      	cbnz	r0, 800fc00 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800fbe2:	2100      	movs	r1, #0
 800fbe4:	480c      	ldr	r0, [pc, #48]	; (800fc18 <MX_USART1_UART_Init+0x60>)
 800fbe6:	f7f7 fe21 	bl	800782c <HAL_UARTEx_SetTxFifoThreshold>
 800fbea:	b960      	cbnz	r0, 800fc06 <MX_USART1_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800fbec:	2100      	movs	r1, #0
 800fbee:	480a      	ldr	r0, [pc, #40]	; (800fc18 <MX_USART1_UART_Init+0x60>)
 800fbf0:	f7f7 fe41 	bl	8007876 <HAL_UARTEx_SetRxFifoThreshold>
 800fbf4:	b950      	cbnz	r0, 800fc0c <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800fbf6:	4808      	ldr	r0, [pc, #32]	; (800fc18 <MX_USART1_UART_Init+0x60>)
 800fbf8:	f7f7 fdf9 	bl	80077ee <HAL_UARTEx_DisableFifoMode>
 800fbfc:	b948      	cbnz	r0, 800fc12 <MX_USART1_UART_Init+0x5a>
 800fbfe:	bd08      	pop	{r3, pc}
    Error_Handler();
 800fc00:	f7ff f868 	bl	800ecd4 <Error_Handler>
 800fc04:	e7ed      	b.n	800fbe2 <MX_USART1_UART_Init+0x2a>
    Error_Handler();
 800fc06:	f7ff f865 	bl	800ecd4 <Error_Handler>
 800fc0a:	e7ef      	b.n	800fbec <MX_USART1_UART_Init+0x34>
    Error_Handler();
 800fc0c:	f7ff f862 	bl	800ecd4 <Error_Handler>
 800fc10:	e7f1      	b.n	800fbf6 <MX_USART1_UART_Init+0x3e>
  {
    Error_Handler();
 800fc12:	f7ff f85f 	bl	800ecd4 <Error_Handler>
  }

}
 800fc16:	e7f2      	b.n	800fbfe <MX_USART1_UART_Init+0x46>
 800fc18:	20005d48 	.word	0x20005d48
 800fc1c:	40013800 	.word	0x40013800

0800fc20 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800fc20:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 800fc22:	4817      	ldr	r0, [pc, #92]	; (800fc80 <MX_USART3_UART_Init+0x60>)
 800fc24:	4b17      	ldr	r3, [pc, #92]	; (800fc84 <MX_USART3_UART_Init+0x64>)
 800fc26:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 800fc28:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800fc2c:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800fc2e:	2300      	movs	r3, #0
 800fc30:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800fc32:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800fc34:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800fc36:	220c      	movs	r2, #12
 800fc38:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800fc3a:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800fc3c:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800fc3e:	6203      	str	r3, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800fc40:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800fc42:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800fc44:	f7f7 fd64 	bl	8007710 <HAL_UART_Init>
 800fc48:	b970      	cbnz	r0, 800fc68 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800fc4a:	2100      	movs	r1, #0
 800fc4c:	480c      	ldr	r0, [pc, #48]	; (800fc80 <MX_USART3_UART_Init+0x60>)
 800fc4e:	f7f7 fded 	bl	800782c <HAL_UARTEx_SetTxFifoThreshold>
 800fc52:	b960      	cbnz	r0, 800fc6e <MX_USART3_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800fc54:	2100      	movs	r1, #0
 800fc56:	480a      	ldr	r0, [pc, #40]	; (800fc80 <MX_USART3_UART_Init+0x60>)
 800fc58:	f7f7 fe0d 	bl	8007876 <HAL_UARTEx_SetRxFifoThreshold>
 800fc5c:	b950      	cbnz	r0, 800fc74 <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800fc5e:	4808      	ldr	r0, [pc, #32]	; (800fc80 <MX_USART3_UART_Init+0x60>)
 800fc60:	f7f7 fdc5 	bl	80077ee <HAL_UARTEx_DisableFifoMode>
 800fc64:	b948      	cbnz	r0, 800fc7a <MX_USART3_UART_Init+0x5a>
 800fc66:	bd08      	pop	{r3, pc}
    Error_Handler();
 800fc68:	f7ff f834 	bl	800ecd4 <Error_Handler>
 800fc6c:	e7ed      	b.n	800fc4a <MX_USART3_UART_Init+0x2a>
    Error_Handler();
 800fc6e:	f7ff f831 	bl	800ecd4 <Error_Handler>
 800fc72:	e7ef      	b.n	800fc54 <MX_USART3_UART_Init+0x34>
    Error_Handler();
 800fc74:	f7ff f82e 	bl	800ecd4 <Error_Handler>
 800fc78:	e7f1      	b.n	800fc5e <MX_USART3_UART_Init+0x3e>
  {
    Error_Handler();
 800fc7a:	f7ff f82b 	bl	800ecd4 <Error_Handler>
  }

}
 800fc7e:	e7f2      	b.n	800fc66 <MX_USART3_UART_Init+0x46>
 800fc80:	20005cc4 	.word	0x20005cc4
 800fc84:	40004800 	.word	0x40004800

0800fc88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800fc88:	b500      	push	{lr}
 800fc8a:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	9305      	str	r3, [sp, #20]
 800fc90:	9306      	str	r3, [sp, #24]
 800fc92:	9307      	str	r3, [sp, #28]
 800fc94:	9308      	str	r3, [sp, #32]
 800fc96:	9309      	str	r3, [sp, #36]	; 0x24
  if(uartHandle->Instance==USART1)
 800fc98:	6803      	ldr	r3, [r0, #0]
 800fc9a:	4a2d      	ldr	r2, [pc, #180]	; (800fd50 <HAL_UART_MspInit+0xc8>)
 800fc9c:	4293      	cmp	r3, r2
 800fc9e:	d005      	beq.n	800fcac <HAL_UART_MspInit+0x24>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 800fca0:	4a2c      	ldr	r2, [pc, #176]	; (800fd54 <HAL_UART_MspInit+0xcc>)
 800fca2:	4293      	cmp	r3, r2
 800fca4:	d02c      	beq.n	800fd00 <HAL_UART_MspInit+0x78>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800fca6:	b00b      	add	sp, #44	; 0x2c
 800fca8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 800fcac:	4b2a      	ldr	r3, [pc, #168]	; (800fd58 <HAL_UART_MspInit+0xd0>)
 800fcae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800fcb0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fcb4:	661a      	str	r2, [r3, #96]	; 0x60
 800fcb6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800fcb8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800fcbc:	9201      	str	r2, [sp, #4]
 800fcbe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fcc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fcc2:	f042 0201 	orr.w	r2, r2, #1
 800fcc6:	64da      	str	r2, [r3, #76]	; 0x4c
 800fcc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fcca:	f003 0301 	and.w	r3, r3, #1
 800fcce:	9302      	str	r3, [sp, #8]
 800fcd0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800fcd2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800fcd6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fcd8:	2302      	movs	r3, #2
 800fcda:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fcdc:	2303      	movs	r3, #3
 800fcde:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800fce0:	2307      	movs	r3, #7
 800fce2:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fce4:	a905      	add	r1, sp, #20
 800fce6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800fcea:	f7f2 f997 	bl	800201c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800fcee:	2200      	movs	r2, #0
 800fcf0:	2105      	movs	r1, #5
 800fcf2:	2025      	movs	r0, #37	; 0x25
 800fcf4:	f7f1 fdbc 	bl	8001870 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800fcf8:	2025      	movs	r0, #37	; 0x25
 800fcfa:	f7f1 fdeb 	bl	80018d4 <HAL_NVIC_EnableIRQ>
 800fcfe:	e7d2      	b.n	800fca6 <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART3_CLK_ENABLE();
 800fd00:	4b15      	ldr	r3, [pc, #84]	; (800fd58 <HAL_UART_MspInit+0xd0>)
 800fd02:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fd04:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800fd08:	659a      	str	r2, [r3, #88]	; 0x58
 800fd0a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fd0c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800fd10:	9203      	str	r2, [sp, #12]
 800fd12:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800fd14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fd16:	f042 0204 	orr.w	r2, r2, #4
 800fd1a:	64da      	str	r2, [r3, #76]	; 0x4c
 800fd1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd1e:	f003 0304 	and.w	r3, r3, #4
 800fd22:	9304      	str	r3, [sp, #16]
 800fd24:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800fd26:	2330      	movs	r3, #48	; 0x30
 800fd28:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fd2a:	2302      	movs	r3, #2
 800fd2c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fd2e:	2303      	movs	r3, #3
 800fd30:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800fd32:	2307      	movs	r3, #7
 800fd34:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fd36:	a905      	add	r1, sp, #20
 800fd38:	4808      	ldr	r0, [pc, #32]	; (800fd5c <HAL_UART_MspInit+0xd4>)
 800fd3a:	f7f2 f96f 	bl	800201c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800fd3e:	2200      	movs	r2, #0
 800fd40:	2105      	movs	r1, #5
 800fd42:	2027      	movs	r0, #39	; 0x27
 800fd44:	f7f1 fd94 	bl	8001870 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800fd48:	2027      	movs	r0, #39	; 0x27
 800fd4a:	f7f1 fdc3 	bl	80018d4 <HAL_NVIC_EnableIRQ>
}
 800fd4e:	e7aa      	b.n	800fca6 <HAL_UART_MspInit+0x1e>
 800fd50:	40013800 	.word	0x40013800
 800fd54:	40004800 	.word	0x40004800
 800fd58:	40021000 	.word	0x40021000
 800fd5c:	48000800 	.word	0x48000800

0800fd60 <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800fd60:	b510      	push	{r4, lr}
 800fd62:	b082      	sub	sp, #8
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800fd64:	f102 030a 	add.w	r3, r2, #10

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800fd68:	f890 4398 	ldrb.w	r4, [r0, #920]	; 0x398
 800fd6c:	f8d0 03a0 	ldr.w	r0, [r0, #928]	; 0x3a0
 800fd70:	9300      	str	r3, [sp, #0]
 800fd72:	b293      	uxth	r3, r2
 800fd74:	460a      	mov	r2, r1
 800fd76:	4621      	mov	r1, r4
 800fd78:	f7f2 fcf0 	bl	800275c <HAL_I2C_Master_Transmit>
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
}
 800fd7c:	b002      	add	sp, #8
 800fd7e:	bd10      	pop	{r4, pc}

0800fd80 <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800fd80:	b510      	push	{r4, lr}
 800fd82:	b082      	sub	sp, #8
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800fd84:	f102 030a 	add.w	r3, r2, #10

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800fd88:	f890 4398 	ldrb.w	r4, [r0, #920]	; 0x398
 800fd8c:	f8d0 03a0 	ldr.w	r0, [r0, #928]	; 0x3a0
 800fd90:	9300      	str	r3, [sp, #0]
 800fd92:	b293      	uxth	r3, r2
 800fd94:	460a      	mov	r2, r1
 800fd96:	f044 0101 	orr.w	r1, r4, #1
 800fd9a:	f7f2 fd9b 	bl	80028d4 <HAL_I2C_Master_Receive>
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
}
 800fd9e:	b002      	add	sp, #8
 800fda0:	bd10      	pop	{r4, pc}
	...

0800fda4 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    if (count > sizeof(_I2CBuffer) - 1) {
 800fda4:	2bff      	cmp	r3, #255	; 0xff
 800fda6:	d813      	bhi.n	800fdd0 <VL53L1_WriteMulti+0x2c>
VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800fda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdaa:	460c      	mov	r4, r1
 800fdac:	461f      	mov	r7, r3
 800fdae:	4611      	mov	r1, r2
 800fdb0:	4606      	mov	r6, r0
        return VL53L1_ERROR_INVALID_PARAMS;
    }
    _I2CBuffer[0] = index>>8;
 800fdb2:	4d0a      	ldr	r5, [pc, #40]	; (800fddc <VL53L1_WriteMulti+0x38>)
 800fdb4:	0a23      	lsrs	r3, r4, #8
 800fdb6:	702b      	strb	r3, [r5, #0]
    _I2CBuffer[1] = index&0xFF;
 800fdb8:	706c      	strb	r4, [r5, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 800fdba:	463a      	mov	r2, r7
 800fdbc:	1ca8      	adds	r0, r5, #2
 800fdbe:	f001 f8f5 	bl	8010fac <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 800fdc2:	1cba      	adds	r2, r7, #2
 800fdc4:	4629      	mov	r1, r5
 800fdc6:	4630      	mov	r0, r6
 800fdc8:	f7ff ffca 	bl	800fd60 <_I2CWrite>
    if (status_int != 0) {
 800fdcc:	b918      	cbnz	r0, 800fdd6 <VL53L1_WriteMulti+0x32>
 800fdce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return VL53L1_ERROR_INVALID_PARAMS;
 800fdd0:	f06f 0003 	mvn.w	r0, #3
 800fdd4:	4770      	bx	lr
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fdd6:	f06f 000c 	mvn.w	r0, #12
    }
    VL53L1_PutI2cBus();
    return Status;
}
 800fdda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fddc:	20005dcc 	.word	0x20005dcc

0800fde0 <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800fde0:	b570      	push	{r4, r5, r6, lr}
 800fde2:	4604      	mov	r4, r0
 800fde4:	4615      	mov	r5, r2
 800fde6:	461e      	mov	r6, r3
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800fde8:	4b0a      	ldr	r3, [pc, #40]	; (800fe14 <VL53L1_ReadMulti+0x34>)
 800fdea:	0a0a      	lsrs	r2, r1, #8
 800fdec:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800fdee:	7059      	strb	r1, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800fdf0:	2202      	movs	r2, #2
 800fdf2:	4619      	mov	r1, r3
 800fdf4:	f7ff ffb4 	bl	800fd60 <_I2CWrite>
    if (status_int != 0) {
 800fdf8:	b930      	cbnz	r0, 800fe08 <VL53L1_ReadMulti+0x28>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    status_int = _I2CRead(Dev, pdata, count);
 800fdfa:	4632      	mov	r2, r6
 800fdfc:	4629      	mov	r1, r5
 800fdfe:	4620      	mov	r0, r4
 800fe00:	f7ff ffbe 	bl	800fd80 <_I2CRead>
    if (status_int != 0) {
 800fe04:	b918      	cbnz	r0, 800fe0e <VL53L1_ReadMulti+0x2e>
 800fe06:	bd70      	pop	{r4, r5, r6, pc}
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fe08:	f06f 000c 	mvn.w	r0, #12
 800fe0c:	bd70      	pop	{r4, r5, r6, pc}
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fe0e:	f06f 000c 	mvn.w	r0, #12
    }
done:
    VL53L1_PutI2cBus();
    return Status;
}
 800fe12:	bd70      	pop	{r4, r5, r6, pc}
 800fe14:	20005dcc 	.word	0x20005dcc

0800fe18 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 800fe18:	b538      	push	{r3, r4, r5, lr}
 800fe1a:	4604      	mov	r4, r0
 800fe1c:	4615      	mov	r5, r2
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 800fe1e:	4b0b      	ldr	r3, [pc, #44]	; (800fe4c <VL53L1_RdByte+0x34>)
 800fe20:	0a0a      	lsrs	r2, r1, #8
 800fe22:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800fe24:	7059      	strb	r1, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800fe26:	2202      	movs	r2, #2
 800fe28:	4619      	mov	r1, r3
 800fe2a:	f7ff ff99 	bl	800fd60 <_I2CWrite>
    if( status_int ){
 800fe2e:	b930      	cbnz	r0, 800fe3e <VL53L1_RdByte+0x26>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    status_int = _I2CRead(Dev, data, 1);
 800fe30:	2201      	movs	r2, #1
 800fe32:	4629      	mov	r1, r5
 800fe34:	4620      	mov	r0, r4
 800fe36:	f7ff ffa3 	bl	800fd80 <_I2CRead>
    if (status_int != 0) {
 800fe3a:	b918      	cbnz	r0, 800fe44 <VL53L1_RdByte+0x2c>
 800fe3c:	bd38      	pop	{r3, r4, r5, pc}
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fe3e:	f06f 000c 	mvn.w	r0, #12
 800fe42:	bd38      	pop	{r3, r4, r5, pc}
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fe44:	f06f 000c 	mvn.w	r0, #12
    }
done:
    VL53L1_PutI2cBus();
    return Status;
}
 800fe48:	bd38      	pop	{r3, r4, r5, pc}
 800fe4a:	bf00      	nop
 800fe4c:	20005dcc 	.word	0x20005dcc

0800fe50 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 800fe50:	b538      	push	{r3, r4, r5, lr}
 800fe52:	4604      	mov	r4, r0
 800fe54:	4615      	mov	r5, r2
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800fe56:	4b0e      	ldr	r3, [pc, #56]	; (800fe90 <VL53L1_RdWord+0x40>)
 800fe58:	0a0a      	lsrs	r2, r1, #8
 800fe5a:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800fe5c:	7059      	strb	r1, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800fe5e:	2202      	movs	r2, #2
 800fe60:	4619      	mov	r1, r3
 800fe62:	f7ff ff7d 	bl	800fd60 <_I2CWrite>

    if( status_int ){
 800fe66:	b960      	cbnz	r0, 800fe82 <VL53L1_RdWord+0x32>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800fe68:	2202      	movs	r2, #2
 800fe6a:	4909      	ldr	r1, [pc, #36]	; (800fe90 <VL53L1_RdWord+0x40>)
 800fe6c:	4620      	mov	r0, r4
 800fe6e:	f7ff ff87 	bl	800fd80 <_I2CRead>
    if (status_int != 0) {
 800fe72:	b948      	cbnz	r0, 800fe88 <VL53L1_RdWord+0x38>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
        goto done;
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800fe74:	4a06      	ldr	r2, [pc, #24]	; (800fe90 <VL53L1_RdWord+0x40>)
 800fe76:	7811      	ldrb	r1, [r2, #0]
 800fe78:	7853      	ldrb	r3, [r2, #1]
 800fe7a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800fe7e:	802b      	strh	r3, [r5, #0]
 800fe80:	bd38      	pop	{r3, r4, r5, pc}
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fe82:	f06f 000c 	mvn.w	r0, #12
 800fe86:	bd38      	pop	{r3, r4, r5, pc}
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fe88:	f06f 000c 	mvn.w	r0, #12
done:
    VL53L1_PutI2cBus();
    return Status;
}
 800fe8c:	bd38      	pop	{r3, r4, r5, pc}
 800fe8e:	bf00      	nop
 800fe90:	20005dcc 	.word	0x20005dcc

0800fe94 <VL53L1_GetTickCount>:
    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 800fe94:	2300      	movs	r3, #0
 800fe96:	6003      	str	r3, [r0, #0]
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
}
 800fe98:	4618      	mov	r0, r3
 800fe9a:	4770      	bx	lr

0800fe9c <VL53L1_WaitMs>:
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}


VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms){
 800fe9c:	b508      	push	{r3, lr}
	(void)pdev;
	HAL_Delay(wait_ms);
 800fe9e:	4608      	mov	r0, r1
 800fea0:	f7f1 f854 	bl	8000f4c <HAL_Delay>
    return VL53L1_ERROR_NONE;
}
 800fea4:	2000      	movs	r0, #0
 800fea6:	bd08      	pop	{r3, pc}

0800fea8 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 800fea8:	b508      	push	{r3, lr}
	(void)pdev;
	HAL_Delay(wait_us/1000);
 800feaa:	4805      	ldr	r0, [pc, #20]	; (800fec0 <VL53L1_WaitUs+0x18>)
 800feac:	fb80 3001 	smull	r3, r0, r0, r1
 800feb0:	17c9      	asrs	r1, r1, #31
 800feb2:	ebc1 10a0 	rsb	r0, r1, r0, asr #6
 800feb6:	f7f1 f849 	bl	8000f4c <HAL_Delay>
    return VL53L1_ERROR_NONE;
}
 800feba:	2000      	movs	r0, #0
 800febc:	bd08      	pop	{r3, pc}
 800febe:	bf00      	nop
 800fec0:	10624dd3 	.word	0x10624dd3

0800fec4 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 800fec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fec8:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 800fecc:	4606      	mov	r6, r0
 800fece:	460f      	mov	r7, r1
 800fed0:	4692      	mov	sl, r2
 800fed2:	4699      	mov	r9, r3
 800fed4:	f89d 8238 	ldrb.w	r8, [sp, #568]	; 0x238
 800fed8:	f8dd b23c 	ldr.w	fp, [sp, #572]	; 0x23c
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
	uint32_t     start_time_ms = 0;
 800fedc:	2400      	movs	r4, #0
 800fede:	9483      	str	r4, [sp, #524]	; 0x20c
	uint32_t     current_time_ms = 0;
 800fee0:	9482      	str	r4, [sp, #520]	; 0x208
	uint32_t     polling_time_ms = 0;
	uint8_t      byte_value      = 0;
 800fee2:	f88d 4207 	strb.w	r4, [sp, #519]	; 0x207
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 800fee6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800feea:	491d      	ldr	r1, [pc, #116]	; (800ff60 <VL53L1_WaitValueMaskEx+0x9c>)
 800feec:	a801      	add	r0, sp, #4
 800feee:	f001 f870 	bl	8010fd2 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(&start_time_ms);
 800fef2:	a883      	add	r0, sp, #524	; 0x20c
 800fef4:	f7ff ffce 	bl	800fe94 <VL53L1_GetTickCount>
	uint8_t      found           = 0;
 800fef8:	4625      	mov	r5, r4
	uint32_t     polling_time_ms = 0;
 800fefa:	4623      	mov	r3, r4
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 800fefc:	e007      	b.n	800ff0e <VL53L1_WaitValueMaskEx+0x4a>
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
			found = 1;
 800fefe:	2501      	movs	r5, #1
 800ff00:	e016      	b.n	800ff30 <VL53L1_WaitValueMaskEx+0x6c>
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(&current_time_ms);
 800ff02:	a882      	add	r0, sp, #520	; 0x208
 800ff04:	f7ff ffc6 	bl	800fe94 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 800ff08:	9a83      	ldr	r2, [sp, #524]	; 0x20c
 800ff0a:	9b82      	ldr	r3, [sp, #520]	; 0x208
 800ff0c:	1a9b      	subs	r3, r3, r2
	while ((status == VL53L1_ERROR_NONE) &&
 800ff0e:	b9e4      	cbnz	r4, 800ff4a <VL53L1_WaitValueMaskEx+0x86>
 800ff10:	42bb      	cmp	r3, r7
 800ff12:	d21a      	bcs.n	800ff4a <VL53L1_WaitValueMaskEx+0x86>
		   (polling_time_ms < timeout_ms) &&
 800ff14:	b9cd      	cbnz	r5, 800ff4a <VL53L1_WaitValueMaskEx+0x86>
			status = VL53L1_RdByte(
 800ff16:	f20d 2207 	addw	r2, sp, #519	; 0x207
 800ff1a:	4651      	mov	r1, sl
 800ff1c:	4630      	mov	r0, r6
 800ff1e:	f7ff ff7b 	bl	800fe18 <VL53L1_RdByte>
 800ff22:	4604      	mov	r4, r0
		if ((byte_value & mask) == value)
 800ff24:	f89d 3207 	ldrb.w	r3, [sp, #519]	; 0x207
 800ff28:	ea08 0303 	and.w	r3, r8, r3
 800ff2c:	454b      	cmp	r3, r9
 800ff2e:	d0e6      	beq.n	800fefe <VL53L1_WaitValueMaskEx+0x3a>
		if (status == VL53L1_ERROR_NONE  &&
 800ff30:	2c00      	cmp	r4, #0
 800ff32:	d1e6      	bne.n	800ff02 <VL53L1_WaitValueMaskEx+0x3e>
 800ff34:	2d00      	cmp	r5, #0
 800ff36:	d1e4      	bne.n	800ff02 <VL53L1_WaitValueMaskEx+0x3e>
			found == 0 &&
 800ff38:	f1bb 0f00 	cmp.w	fp, #0
 800ff3c:	d0e1      	beq.n	800ff02 <VL53L1_WaitValueMaskEx+0x3e>
			status = VL53L1_WaitMs(
 800ff3e:	4659      	mov	r1, fp
 800ff40:	4630      	mov	r0, r6
 800ff42:	f7ff ffab 	bl	800fe9c <VL53L1_WaitMs>
 800ff46:	4604      	mov	r4, r0
 800ff48:	e7db      	b.n	800ff02 <VL53L1_WaitValueMaskEx+0x3e>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 800ff4a:	b905      	cbnz	r5, 800ff4e <VL53L1_WaitValueMaskEx+0x8a>
 800ff4c:	b124      	cbz	r4, 800ff58 <VL53L1_WaitValueMaskEx+0x94>
		status = VL53L1_ERROR_TIME_OUT;

	return status;
}
 800ff4e:	4620      	mov	r0, r4
 800ff50:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 800ff54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		status = VL53L1_ERROR_TIME_OUT;
 800ff58:	f06f 0406 	mvn.w	r4, #6
 800ff5c:	e7f7      	b.n	800ff4e <VL53L1_WaitValueMaskEx+0x8a>
 800ff5e:	bf00      	nop
 800ff60:	08012c7c 	.word	0x08012c7c

0800ff64 <setWavetableAmplitude>:
uint8_t IIR_filter_active = 1;

// UBaseType_t  uxSavedInterruptStatus;

void setWavetableAmplitude(uint8_t* intTracker) {
  ampltiude_multiplier = (*intTracker) / ((float)ROTATION_STEPS - 1);
 800ff64:	7803      	ldrb	r3, [r0, #0]
 800ff66:	ee07 3a90 	vmov	s15, r3
 800ff6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ff6e:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800ff72:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ff76:	4b02      	ldr	r3, [pc, #8]	; (800ff80 <setWavetableAmplitude+0x1c>)
 800ff78:	ed83 7a00 	vstr	s14, [r3]
 800ff7c:	4770      	bx	lr
 800ff7e:	bf00      	nop
 800ff80:	20005318 	.word	0x20005318

0800ff84 <isLidarModeActive>:
    filter_active = 0;
  }
}

uint8_t isLidarModeActive(void) {
  if (lidarModeActive) return 1;
 800ff84:	4b02      	ldr	r3, [pc, #8]	; (800ff90 <isLidarModeActive+0xc>)
 800ff86:	7818      	ldrb	r0, [r3, #0]
 800ff88:	b900      	cbnz	r0, 800ff8c <isLidarModeActive+0x8>
  return 0;
}
 800ff8a:	4770      	bx	lr
  if (lidarModeActive) return 1;
 800ff8c:	2001      	movs	r0, #1
 800ff8e:	e7fc      	b.n	800ff8a <isLidarModeActive+0x6>
 800ff90:	20005360 	.word	0x20005360

0800ff94 <isCapModeActive>:
uint8_t isCapModeActive(void) {
  if (capModeActive) return 1;
 800ff94:	4b02      	ldr	r3, [pc, #8]	; (800ffa0 <isCapModeActive+0xc>)
 800ff96:	7818      	ldrb	r0, [r3, #0]
 800ff98:	b900      	cbnz	r0, 800ff9c <isCapModeActive+0x8>
  return 0;
}
 800ff9a:	4770      	bx	lr
  if (capModeActive) return 1;
 800ff9c:	2001      	movs	r0, #1
 800ff9e:	e7fc      	b.n	800ff9a <isCapModeActive+0x6>
 800ffa0:	2000531d 	.word	0x2000531d

0800ffa4 <turnSoundOff>:

void turnSoundOff(void){
  signal_off = 0;
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	4b01      	ldr	r3, [pc, #4]	; (800ffac <turnSoundOff+0x8>)
 800ffa8:	701a      	strb	r2, [r3, #0]
 800ffaa:	4770      	bx	lr
 800ffac:	20000059 	.word	0x20000059

0800ffb0 <turnSoundOn>:
}

void turnSoundOn(void){
  signal_off = 1;
 800ffb0:	2201      	movs	r2, #1
 800ffb2:	4b01      	ldr	r3, [pc, #4]	; (800ffb8 <turnSoundOn+0x8>)
 800ffb4:	701a      	strb	r2, [r3, #0]
 800ffb6:	4770      	bx	lr
 800ffb8:	20000059 	.word	0x20000059

0800ffbc <turnOnLidarSounds>:
  if (setFilterIndex >= FILTER_CNT) setFilterIndex = 0;
  setFilter(setFilterIndex);
}

// uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
void turnOnLidarSounds(void) {
 800ffbc:	b508      	push	{r3, lr}
  if (lidarModeActive == 0) {
 800ffbe:	4b08      	ldr	r3, [pc, #32]	; (800ffe0 <turnOnLidarSounds+0x24>)
 800ffc0:	781b      	ldrb	r3, [r3, #0]
 800ffc2:	b11b      	cbz	r3, 800ffcc <turnOnLidarSounds+0x10>
    lidarModeActive = 1;
    lidarStart();
    osSemaphoreRelease(lidarSampleReadySemaphoreHandle);
    // LidarMeasurement();
  }
  capModeActive = 0;
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	4b07      	ldr	r3, [pc, #28]	; (800ffe4 <turnOnLidarSounds+0x28>)
 800ffc8:	701a      	strb	r2, [r3, #0]
 800ffca:	bd08      	pop	{r3, pc}
    lidarModeActive = 1;
 800ffcc:	2201      	movs	r2, #1
 800ffce:	4b04      	ldr	r3, [pc, #16]	; (800ffe0 <turnOnLidarSounds+0x24>)
 800ffd0:	701a      	strb	r2, [r3, #0]
    lidarStart();
 800ffd2:	f7fe fd3d 	bl	800ea50 <lidarStart>
    osSemaphoreRelease(lidarSampleReadySemaphoreHandle);
 800ffd6:	4b04      	ldr	r3, [pc, #16]	; (800ffe8 <turnOnLidarSounds+0x2c>)
 800ffd8:	6818      	ldr	r0, [r3, #0]
 800ffda:	f7fa fe7b 	bl	800acd4 <osSemaphoreRelease>
 800ffde:	e7f1      	b.n	800ffc4 <turnOnLidarSounds+0x8>
 800ffe0:	20005360 	.word	0x20005360
 800ffe4:	2000531d 	.word	0x2000531d
 800ffe8:	20005518 	.word	0x20005518

0800ffec <turnOnCapSounds>:
}

void turnOnCapSounds(void) {
 800ffec:	b508      	push	{r3, lr}
  if (lidarModeActive) lidarStop();
 800ffee:	4b0a      	ldr	r3, [pc, #40]	; (8010018 <turnOnCapSounds+0x2c>)
 800fff0:	781b      	ldrb	r3, [r3, #0]
 800fff2:	b973      	cbnz	r3, 8010012 <turnOnCapSounds+0x26>
  if (capModeActive != 1) {
 800fff4:	4b09      	ldr	r3, [pc, #36]	; (801001c <turnOnCapSounds+0x30>)
 800fff6:	781b      	ldrb	r3, [r3, #0]
 800fff8:	2b01      	cmp	r3, #1
 800fffa:	d009      	beq.n	8010010 <turnOnCapSounds+0x24>
    lidarModeActive = 0;
 800fffc:	2200      	movs	r2, #0
 800fffe:	4b06      	ldr	r3, [pc, #24]	; (8010018 <turnOnCapSounds+0x2c>)
 8010000:	701a      	strb	r2, [r3, #0]
    capModeActive = 1;
 8010002:	2201      	movs	r2, #1
 8010004:	4b05      	ldr	r3, [pc, #20]	; (801001c <turnOnCapSounds+0x30>)
 8010006:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(capSampleSemaphoreHandle);
 8010008:	4b05      	ldr	r3, [pc, #20]	; (8010020 <turnOnCapSounds+0x34>)
 801000a:	6818      	ldr	r0, [r3, #0]
 801000c:	f7fa fe62 	bl	800acd4 <osSemaphoreRelease>
 8010010:	bd08      	pop	{r3, pc}
  if (lidarModeActive) lidarStop();
 8010012:	f7fe fc79 	bl	800e908 <lidarStop>
 8010016:	e7ed      	b.n	800fff4 <turnOnCapSounds+0x8>
 8010018:	20005360 	.word	0x20005360
 801001c:	2000531d 	.word	0x2000531d
 8010020:	20005468 	.word	0x20005468

08010024 <turnOffSounds>:
  }
  // Sample_Cap_Touch();
}

void turnOffSounds(void) {
 8010024:	b508      	push	{r3, lr}
  if (lidarModeActive) lidarStop();
 8010026:	4b06      	ldr	r3, [pc, #24]	; (8010040 <turnOffSounds+0x1c>)
 8010028:	781b      	ldrb	r3, [r3, #0]
 801002a:	b92b      	cbnz	r3, 8010038 <turnOffSounds+0x14>
  lidarModeActive = 0;
 801002c:	2300      	movs	r3, #0
 801002e:	4a04      	ldr	r2, [pc, #16]	; (8010040 <turnOffSounds+0x1c>)
 8010030:	7013      	strb	r3, [r2, #0]
  capModeActive = 0;
 8010032:	4a04      	ldr	r2, [pc, #16]	; (8010044 <turnOffSounds+0x20>)
 8010034:	7013      	strb	r3, [r2, #0]
 8010036:	bd08      	pop	{r3, pc}
  if (lidarModeActive) lidarStop();
 8010038:	f7fe fc66 	bl	800e908 <lidarStop>
 801003c:	e7f6      	b.n	801002c <turnOffSounds+0x8>
 801003e:	bf00      	nop
 8010040:	20005360 	.word	0x20005360
 8010044:	2000531d 	.word	0x2000531d

08010048 <calcLidarFreq>:
}

void calcLidarFreq(int16_t* measurement) {
 8010048:	b570      	push	{r4, r5, r6, lr}
 801004a:	4606      	mov	r6, r0
  prevlidarSampleTime = lidarSampleTime;
 801004c:	4c34      	ldr	r4, [pc, #208]	; (8010120 <calcLidarFreq+0xd8>)
 801004e:	4d35      	ldr	r5, [pc, #212]	; (8010124 <calcLidarFreq+0xdc>)
 8010050:	682b      	ldr	r3, [r5, #0]
 8010052:	6023      	str	r3, [r4, #0]
  lidarSampleTime = HAL_GetTick();
 8010054:	f7f0 ff74 	bl	8000f40 <HAL_GetTick>
 8010058:	6028      	str	r0, [r5, #0]
  time_delta = lidarSampleTime - prevlidarSampleTime;
 801005a:	6823      	ldr	r3, [r4, #0]
 801005c:	1ac0      	subs	r0, r0, r3
 801005e:	ee07 0a90 	vmov	s15, r0
 8010062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010066:	4b30      	ldr	r3, [pc, #192]	; (8010128 <calcLidarFreq+0xe0>)
 8010068:	edc3 7a00 	vstr	s15, [r3]

  freq_lidar = freq_lidar_new;
 801006c:	4c2f      	ldr	r4, [pc, #188]	; (801012c <calcLidarFreq+0xe4>)
 801006e:	6822      	ldr	r2, [r4, #0]
 8010070:	4b2f      	ldr	r3, [pc, #188]	; (8010130 <calcLidarFreq+0xe8>)
 8010072:	601a      	str	r2, [r3, #0]
  freq_lidar_new = 123.471 * expf(0.00288811 * ((float)*measurement));
 8010074:	f9b6 0000 	ldrsh.w	r0, [r6]
 8010078:	ee07 0a90 	vmov	s15, r0
 801007c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010080:	ee17 0a90 	vmov	r0, s15
 8010084:	f7f0 fa20 	bl	80004c8 <__aeabi_f2d>
 8010088:	a321      	add	r3, pc, #132	; (adr r3, 8010110 <calcLidarFreq+0xc8>)
 801008a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801008e:	f7f0 fa6f 	bl	8000570 <__aeabi_dmul>
 8010092:	f7f0 fd65 	bl	8000b60 <__aeabi_d2f>
 8010096:	ee00 0a10 	vmov	s0, r0
 801009a:	f001 f937 	bl	801130c <expf>
 801009e:	ee10 0a10 	vmov	r0, s0
 80100a2:	f7f0 fa11 	bl	80004c8 <__aeabi_f2d>
 80100a6:	a31c      	add	r3, pc, #112	; (adr r3, 8010118 <calcLidarFreq+0xd0>)
 80100a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ac:	f7f0 fa60 	bl	8000570 <__aeabi_dmul>
 80100b0:	f7f0 fd56 	bl	8000b60 <__aeabi_d2f>
 80100b4:	ee07 0a90 	vmov	s15, r0
 80100b8:	6020      	str	r0, [r4, #0]

  //freq_lidar_new = 2391.02 * log(0.401853 * ((float)*measurement));

  if (freq_lidar_new > 18000) freq_lidar_new = 18000;
 80100ba:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8010134 <calcLidarFreq+0xec>
 80100be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80100c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100c6:	dd02      	ble.n	80100ce <calcLidarFreq+0x86>
 80100c8:	4623      	mov	r3, r4
 80100ca:	ed83 7a00 	vstr	s14, [r3]

  if (freq_lidar_new == freq_lidar)
 80100ce:	4b17      	ldr	r3, [pc, #92]	; (801012c <calcLidarFreq+0xe4>)
 80100d0:	edd3 7a00 	vldr	s15, [r3]
 80100d4:	4b16      	ldr	r3, [pc, #88]	; (8010130 <calcLidarFreq+0xe8>)
 80100d6:	ed93 7a00 	vldr	s14, [r3]
 80100da:	eef4 7a47 	vcmp.f32	s15, s14
 80100de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100e2:	d102      	bne.n	80100ea <calcLidarFreq+0xa2>
    freq_lidar_step = 0;
 80100e4:	2200      	movs	r2, #0
 80100e6:	4b14      	ldr	r3, [pc, #80]	; (8010138 <calcLidarFreq+0xf0>)
 80100e8:	601a      	str	r2, [r3, #0]

//    freq_lidar_step = ((freq_lidar_new - freq_lidar) /
//                           (((time_delta / 40000))));
  }

  freq_lidar_inc = (freq_lidar / ((float)DAC_FREQ)) * max_table_index;
 80100ea:	eddf 7a14 	vldr	s15, [pc, #80]	; 801013c <calcLidarFreq+0xf4>
 80100ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80100f2:	4b13      	ldr	r3, [pc, #76]	; (8010140 <calcLidarFreq+0xf8>)
 80100f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80100f8:	ee07 3a90 	vmov	s15, r3
 80100fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010100:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010104:	4b0f      	ldr	r3, [pc, #60]	; (8010144 <calcLidarFreq+0xfc>)
 8010106:	edc3 7a00 	vstr	s15, [r3]
 801010a:	bd70      	pop	{r4, r5, r6, pc}
 801010c:	f3af 8000 	nop.w
 8010110:	3fe97a02 	.word	0x3fe97a02
 8010114:	3f67a8ce 	.word	0x3f67a8ce
 8010118:	dd2f1aa0 	.word	0xdd2f1aa0
 801011c:	405ede24 	.word	0x405ede24
 8010120:	20007b08 	.word	0x20007b08
 8010124:	20006ad8 	.word	0x20006ad8
 8010128:	200076f0 	.word	0x200076f0
 801012c:	20005358 	.word	0x20005358
 8010130:	20000050 	.word	0x20000050
 8010134:	468ca000 	.word	0x468ca000
 8010138:	2000535c 	.word	0x2000535c
 801013c:	471c4000 	.word	0x471c4000
 8010140:	20000056 	.word	0x20000056
 8010144:	20006ad0 	.word	0x20006ad0

08010148 <updateLidarInc>:
}

void updateLidarInc(void) {
 8010148:	b5d0      	push	{r4, r6, r7, lr}
 801014a:	ed2d 8b02 	vpush	{d8}

  //freq_lidar += freq_lidar_step;

  freq_lidar += ALPHA_DELTA_FREQ * (freq_lidar_new - freq_lidar);
 801014e:	4c1c      	ldr	r4, [pc, #112]	; (80101c0 <updateLidarInc+0x78>)
 8010150:	ed94 8a00 	vldr	s16, [r4]
 8010154:	4b1b      	ldr	r3, [pc, #108]	; (80101c4 <updateLidarInc+0x7c>)
 8010156:	edd3 7a00 	vldr	s15, [r3]
 801015a:	ee77 7ac8 	vsub.f32	s15, s15, s16
 801015e:	ee17 0a90 	vmov	r0, s15
 8010162:	f7f0 f9b1 	bl	80004c8 <__aeabi_f2d>
 8010166:	a314      	add	r3, pc, #80	; (adr r3, 80101b8 <updateLidarInc+0x70>)
 8010168:	e9d3 2300 	ldrd	r2, r3, [r3]
 801016c:	f7f0 fa00 	bl	8000570 <__aeabi_dmul>
 8010170:	4606      	mov	r6, r0
 8010172:	460f      	mov	r7, r1
 8010174:	ee18 0a10 	vmov	r0, s16
 8010178:	f7f0 f9a6 	bl	80004c8 <__aeabi_f2d>
 801017c:	4632      	mov	r2, r6
 801017e:	463b      	mov	r3, r7
 8010180:	f7f0 f844 	bl	800020c <__adddf3>
 8010184:	f7f0 fcec 	bl	8000b60 <__aeabi_d2f>
 8010188:	ee07 0a10 	vmov	s14, r0
 801018c:	6020      	str	r0, [r4, #0]
  freq_lidar_inc = (freq_lidar / ((float)DAC_FREQ)) * max_table_index;
 801018e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80101c8 <updateLidarInc+0x80>
 8010192:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8010196:	4b0d      	ldr	r3, [pc, #52]	; (80101cc <updateLidarInc+0x84>)
 8010198:	f9b3 3000 	ldrsh.w	r3, [r3]
 801019c:	ee07 3a90 	vmov	s15, r3
 80101a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80101a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80101a8:	4b09      	ldr	r3, [pc, #36]	; (80101d0 <updateLidarInc+0x88>)
 80101aa:	edc3 7a00 	vstr	s15, [r3]
}
 80101ae:	ecbd 8b02 	vpop	{d8}
 80101b2:	bdd0      	pop	{r4, r6, r7, pc}
 80101b4:	f3af 8000 	nop.w
 80101b8:	47ae147b 	.word	0x47ae147b
 80101bc:	3f747ae1 	.word	0x3f747ae1
 80101c0:	20000050 	.word	0x20000050
 80101c4:	20005358 	.word	0x20005358
 80101c8:	471c4000 	.word	0x471c4000
 80101cc:	20000056 	.word	0x20000056
 80101d0:	20006ad0 	.word	0x20006ad0

080101d4 <applyBitCrush>:
//	for(int i = 0; i < BUFFER_SIZE; i++){
//		buffer[i] += BUFFER_OFFSET;
//	}
//}

void applyBitCrush(q15_t* buffer, uint16_t size){
 80101d4:	b570      	push	{r4, r5, r6, lr}
 80101d6:	4604      	mov	r4, r0
 80101d8:	460e      	mov	r6, r1
  uint32_t bitCrush = getBitCrush();
 80101da:	f7fe fd7d 	bl	800ecd8 <getBitCrush>
 80101de:	4605      	mov	r5, r0

  arm_shift_q15(buffer, -bitCrush, buffer, size);
 80101e0:	4241      	negs	r1, r0
 80101e2:	4633      	mov	r3, r6
 80101e4:	4622      	mov	r2, r4
 80101e6:	b249      	sxtb	r1, r1
 80101e8:	4620      	mov	r0, r4
 80101ea:	f000 fded 	bl	8010dc8 <arm_shift_q15>
  arm_shift_q15(buffer, bitCrush, buffer, size);
 80101ee:	4633      	mov	r3, r6
 80101f0:	4622      	mov	r2, r4
 80101f2:	b269      	sxtb	r1, r5
 80101f4:	4620      	mov	r0, r4
 80101f6:	f000 fde7 	bl	8010dc8 <arm_shift_q15>
 80101fa:	bd70      	pop	{r4, r5, r6, pc}

080101fc <passBufferToDAC>:
  // vTaskSuspend( NULL );
  // Resume the suspended task.
  // xYieldRequired = xTaskResumeFromISR( DAC_BufferRefreshHandle );
}

void passBufferToDAC(q15_t* buffer, DAC_HandleTypeDef* hdac) {
 80101fc:	b530      	push	{r4, r5, lr}
 80101fe:	b083      	sub	sp, #12
 8010200:	4605      	mov	r5, r0
 8010202:	460c      	mov	r4, r1
  HAL_GPIO_TogglePin(LED_LAT_GPIO_Port, LED_LAT_Pin);
 8010204:	2104      	movs	r1, #4
 8010206:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801020a:	f7f1 ffef 	bl	80021ec <HAL_GPIO_TogglePin>
  HAL_DAC_Start_DMA(hdac, DAC_CHANNEL_1, (uint32_t*)buffer, 512,
 801020e:	2100      	movs	r1, #0
 8010210:	9100      	str	r1, [sp, #0]
 8010212:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010216:	462a      	mov	r2, r5
 8010218:	4620      	mov	r0, r4
 801021a:	f7f1 fba9 	bl	8001970 <HAL_DAC_Start_DMA>
                    DAC_ALIGN_12B_R);
}
 801021e:	b003      	add	sp, #12
 8010220:	bd30      	pop	{r4, r5, pc}

08010222 <clearBuffer>:

void clearBuffer(q15_t* buffer) {
  for (int i = 0; i < BUFFER_SIZE; i++) {
 8010222:	2300      	movs	r3, #0
 8010224:	e004      	b.n	8010230 <clearBuffer+0xe>
    buffer[i] = BUFFER_OFFSET;
 8010226:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801022a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
  for (int i = 0; i < BUFFER_SIZE; i++) {
 801022e:	3301      	adds	r3, #1
 8010230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010234:	dbf7      	blt.n	8010226 <clearBuffer+0x4>
  }
}
 8010236:	4770      	bx	lr

08010238 <incrementIndex>:
      (*waveTable) *
      (filter[incrementFilterIndex(&freq_fil_inc, &freq_fil_ind)] / 255.0);
  return (q15_t)filter_product;
}

uint16_t incrementIndex(float* freq_inc, float* freq_ind) {
 8010238:	b082      	sub	sp, #8
  *freq_ind += (*freq_inc);
 801023a:	edd0 7a00 	vldr	s15, [r0]
 801023e:	ed91 7a00 	vldr	s14, [r1]
 8010242:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010246:	edc1 7a00 	vstr	s15, [r1]
  if ((*freq_ind) >= max_table_index) {
 801024a:	4b0d      	ldr	r3, [pc, #52]	; (8010280 <incrementIndex+0x48>)
 801024c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010250:	ee07 3a10 	vmov	s14, r3
 8010254:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010258:	eef4 7ac7 	vcmpe.f32	s15, s14
 801025c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010260:	db03      	blt.n	801026a <incrementIndex+0x32>
    (*freq_ind) -= max_table_index;
 8010262:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010266:	edc1 7a00 	vstr	s15, [r1]
  }

  return (uint16_t)(*freq_ind);
 801026a:	edd1 7a00 	vldr	s15, [r1]
 801026e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010272:	edcd 7a01 	vstr	s15, [sp, #4]
}
 8010276:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 801027a:	b002      	add	sp, #8
 801027c:	4770      	bx	lr
 801027e:	bf00      	nop
 8010280:	20000056 	.word	0x20000056

08010284 <incrementFilterIndex>:

uint16_t incrementFilterIndex(float* freq_inc, float* freq_ind) {
 8010284:	b082      	sub	sp, #8
  *freq_ind += (*freq_inc);
 8010286:	edd0 7a00 	vldr	s15, [r0]
 801028a:	ed91 7a00 	vldr	s14, [r1]
 801028e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010292:	edc1 7a00 	vstr	s15, [r1]
  if ((*freq_ind) >= max_filter_index) {
 8010296:	4b0d      	ldr	r3, [pc, #52]	; (80102cc <incrementFilterIndex+0x48>)
 8010298:	f9b3 3000 	ldrsh.w	r3, [r3]
 801029c:	ee07 3a10 	vmov	s14, r3
 80102a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80102a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80102a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102ac:	db03      	blt.n	80102b6 <incrementFilterIndex+0x32>
    (*freq_ind) -= max_filter_index;
 80102ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80102b2:	edc1 7a00 	vstr	s15, [r1]
  }

  return (uint16_t)(*freq_ind);
 80102b6:	edd1 7a00 	vldr	s15, [r1]
 80102ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80102be:	edcd 7a01 	vstr	s15, [sp, #4]
}
 80102c2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80102c6:	b002      	add	sp, #8
 80102c8:	4770      	bx	lr
 80102ca:	bf00      	nop
 80102cc:	20000054 	.word	0x20000054

080102d0 <filter_multiplier>:
q15_t filter_multiplier(int16_t* waveTable) {
 80102d0:	b570      	push	{r4, r5, r6, lr}
 80102d2:	b082      	sub	sp, #8
      (*waveTable) *
 80102d4:	f9b0 6000 	ldrsh.w	r6, [r0]
      (filter[incrementFilterIndex(&freq_fil_inc, &freq_fil_ind)] / 255.0);
 80102d8:	4b15      	ldr	r3, [pc, #84]	; (8010330 <filter_multiplier+0x60>)
 80102da:	681c      	ldr	r4, [r3, #0]
 80102dc:	4915      	ldr	r1, [pc, #84]	; (8010334 <filter_multiplier+0x64>)
 80102de:	4816      	ldr	r0, [pc, #88]	; (8010338 <filter_multiplier+0x68>)
 80102e0:	f7ff ffd0 	bl	8010284 <incrementFilterIndex>
 80102e4:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80102e8:	f7f0 f8dc 	bl	80004a4 <__aeabi_i2d>
 80102ec:	a30e      	add	r3, pc, #56	; (adr r3, 8010328 <filter_multiplier+0x58>)
 80102ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102f2:	f7f0 fa67 	bl	80007c4 <__aeabi_ddiv>
 80102f6:	4604      	mov	r4, r0
 80102f8:	460d      	mov	r5, r1
      (*waveTable) *
 80102fa:	4630      	mov	r0, r6
 80102fc:	f7f0 f8d2 	bl	80004a4 <__aeabi_i2d>
 8010300:	4622      	mov	r2, r4
 8010302:	462b      	mov	r3, r5
 8010304:	f7f0 f934 	bl	8000570 <__aeabi_dmul>
 8010308:	f7f0 fc2a 	bl	8000b60 <__aeabi_d2f>
 801030c:	ee07 0a90 	vmov	s15, r0
  filter_product =
 8010310:	4b0a      	ldr	r3, [pc, #40]	; (801033c <filter_multiplier+0x6c>)
 8010312:	6018      	str	r0, [r3, #0]
  return (q15_t)filter_product;
 8010314:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010318:	edcd 7a01 	vstr	s15, [sp, #4]
}
 801031c:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 8010320:	b002      	add	sp, #8
 8010322:	bd70      	pop	{r4, r5, r6, pc}
 8010324:	f3af 8000 	nop.w
 8010328:	00000000 	.word	0x00000000
 801032c:	406fe000 	.word	0x406fe000
 8010330:	20007b00 	.word	0x20007b00
 8010334:	20005350 	.word	0x20005350
 8010338:	200076fc 	.word	0x200076fc
 801033c:	2000871c 	.word	0x2000871c

08010340 <addTableToBuffer>:
void addTableToBuffer(q15_t* buffer, float* freq_inc, float* freq_ind) {
 8010340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010344:	4604      	mov	r4, r0
 8010346:	460d      	mov	r5, r1
 8010348:	4616      	mov	r6, r2
  if ((filter_active == 1) && (skipFilter == 0)) {
 801034a:	4b64      	ldr	r3, [pc, #400]	; (80104dc <addTableToBuffer+0x19c>)
 801034c:	781b      	ldrb	r3, [r3, #0]
 801034e:	2b01      	cmp	r3, #1
 8010350:	d006      	beq.n	8010360 <addTableToBuffer+0x20>
    if (lidarModeActive) {
 8010352:	4b63      	ldr	r3, [pc, #396]	; (80104e0 <addTableToBuffer+0x1a0>)
 8010354:	781b      	ldrb	r3, [r3, #0]
 8010356:	2b00      	cmp	r3, #0
 8010358:	f040 8095 	bne.w	8010486 <addTableToBuffer+0x146>
 801035c:	2700      	movs	r7, #0
 801035e:	e0b7      	b.n	80104d0 <addTableToBuffer+0x190>
  if ((filter_active == 1) && (skipFilter == 0)) {
 8010360:	4b60      	ldr	r3, [pc, #384]	; (80104e4 <addTableToBuffer+0x1a4>)
 8010362:	781b      	ldrb	r3, [r3, #0]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d1f4      	bne.n	8010352 <addTableToBuffer+0x12>
    if (lidarModeActive) {
 8010368:	4b5d      	ldr	r3, [pc, #372]	; (80104e0 <addTableToBuffer+0x1a0>)
 801036a:	781b      	ldrb	r3, [r3, #0]
 801036c:	bb8b      	cbnz	r3, 80103d2 <addTableToBuffer+0x92>
 801036e:	2700      	movs	r7, #0
 8010370:	e05a      	b.n	8010428 <addTableToBuffer+0xe8>
        updateLidarInc();
 8010372:	f7ff fee9 	bl	8010148 <updateLidarInc>
        table_val = waveTable[incrementIndex(freq_inc, freq_ind)];
 8010376:	4b5c      	ldr	r3, [pc, #368]	; (80104e8 <addTableToBuffer+0x1a8>)
 8010378:	f8d3 8000 	ldr.w	r8, [r3]
 801037c:	4631      	mov	r1, r6
 801037e:	4628      	mov	r0, r5
 8010380:	f7ff ff5a 	bl	8010238 <incrementIndex>
 8010384:	f938 3010 	ldrsh.w	r3, [r8, r0, lsl #1]
 8010388:	4858      	ldr	r0, [pc, #352]	; (80104ec <addTableToBuffer+0x1ac>)
 801038a:	8003      	strh	r3, [r0, #0]
            ampltiude_multiplier * filter_multiplier(&table_val) * SCALE_OUTPUT;
 801038c:	f7ff ffa0 	bl	80102d0 <filter_multiplier>
 8010390:	ee07 0a90 	vmov	s15, r0
 8010394:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010398:	4b55      	ldr	r3, [pc, #340]	; (80104f0 <addTableToBuffer+0x1b0>)
 801039a:	ed93 7a00 	vldr	s14, [r3]
 801039e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80103a2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80103a6:	ee27 7a87 	vmul.f32	s14, s15, s14
        buffer[i] +=
 80103aa:	f934 3017 	ldrsh.w	r3, [r4, r7, lsl #1]
 80103ae:	ee07 3a90 	vmov	s15, r3
 80103b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80103b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80103ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80103be:	ee17 3a90 	vmov	r3, s15
 80103c2:	f824 3017 	strh.w	r3, [r4, r7, lsl #1]
      for (int i = 0; i < BUFFER_SIZE; i++) {
 80103c6:	3701      	adds	r7, #1
 80103c8:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 80103cc:	dbd1      	blt.n	8010372 <addTableToBuffer+0x32>
 80103ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103d2:	2700      	movs	r7, #0
 80103d4:	e7f8      	b.n	80103c8 <addTableToBuffer+0x88>
        table_val = waveTable[incrementIndex(freq_inc, freq_ind)];
 80103d6:	4b44      	ldr	r3, [pc, #272]	; (80104e8 <addTableToBuffer+0x1a8>)
 80103d8:	f8d3 8000 	ldr.w	r8, [r3]
 80103dc:	4631      	mov	r1, r6
 80103de:	4628      	mov	r0, r5
 80103e0:	f7ff ff2a 	bl	8010238 <incrementIndex>
 80103e4:	f938 3010 	ldrsh.w	r3, [r8, r0, lsl #1]
 80103e8:	4840      	ldr	r0, [pc, #256]	; (80104ec <addTableToBuffer+0x1ac>)
 80103ea:	8003      	strh	r3, [r0, #0]
            ampltiude_multiplier * filter_multiplier(&table_val) * SCALE_OUTPUT;
 80103ec:	f7ff ff70 	bl	80102d0 <filter_multiplier>
 80103f0:	ee07 0a90 	vmov	s15, r0
 80103f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80103f8:	4b3d      	ldr	r3, [pc, #244]	; (80104f0 <addTableToBuffer+0x1b0>)
 80103fa:	ed93 7a00 	vldr	s14, [r3]
 80103fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010402:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8010406:	ee27 7a87 	vmul.f32	s14, s15, s14
        buffer[i] +=
 801040a:	f934 3017 	ldrsh.w	r3, [r4, r7, lsl #1]
 801040e:	ee07 3a90 	vmov	s15, r3
 8010412:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010416:	ee77 7a87 	vadd.f32	s15, s15, s14
 801041a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801041e:	ee17 3a90 	vmov	r3, s15
 8010422:	f824 3017 	strh.w	r3, [r4, r7, lsl #1]
      for (int i = 0; i < BUFFER_SIZE; i++) {
 8010426:	3701      	adds	r7, #1
 8010428:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 801042c:	dbd3      	blt.n	80103d6 <addTableToBuffer+0x96>
 801042e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        updateLidarInc();
 8010432:	f7ff fe89 	bl	8010148 <updateLidarInc>
        table_val = waveTable[incrementIndex(freq_inc, freq_ind)];
 8010436:	4b2c      	ldr	r3, [pc, #176]	; (80104e8 <addTableToBuffer+0x1a8>)
 8010438:	f8d3 8000 	ldr.w	r8, [r3]
 801043c:	4631      	mov	r1, r6
 801043e:	4628      	mov	r0, r5
 8010440:	f7ff fefa 	bl	8010238 <incrementIndex>
 8010444:	f938 3010 	ldrsh.w	r3, [r8, r0, lsl #1]
 8010448:	4a28      	ldr	r2, [pc, #160]	; (80104ec <addTableToBuffer+0x1ac>)
 801044a:	8013      	strh	r3, [r2, #0]
        buffer[i] += ( ( (int32_t) (ampltiude_multiplier * (table_val * SCALE_OUTPUT) ) )) * signal_off;
 801044c:	009b      	lsls	r3, r3, #2
 801044e:	ee07 3a90 	vmov	s15, r3
 8010452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010456:	4b26      	ldr	r3, [pc, #152]	; (80104f0 <addTableToBuffer+0x1b0>)
 8010458:	ed93 7a00 	vldr	s14, [r3]
 801045c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010460:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010464:	ee17 3a90 	vmov	r3, s15
 8010468:	4a22      	ldr	r2, [pc, #136]	; (80104f4 <addTableToBuffer+0x1b4>)
 801046a:	7812      	ldrb	r2, [r2, #0]
 801046c:	fb12 f303 	smulbb	r3, r2, r3
 8010470:	f834 2017 	ldrh.w	r2, [r4, r7, lsl #1]
 8010474:	4413      	add	r3, r2
 8010476:	f824 3017 	strh.w	r3, [r4, r7, lsl #1]
      for (int i = 0; i < BUFFER_SIZE; i++) {
 801047a:	3701      	adds	r7, #1
 801047c:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8010480:	dbd7      	blt.n	8010432 <addTableToBuffer+0xf2>
 8010482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010486:	2700      	movs	r7, #0
 8010488:	e7f8      	b.n	801047c <addTableToBuffer+0x13c>
        table_val = waveTable[incrementIndex(freq_inc, freq_ind)];
 801048a:	4b17      	ldr	r3, [pc, #92]	; (80104e8 <addTableToBuffer+0x1a8>)
 801048c:	f8d3 8000 	ldr.w	r8, [r3]
 8010490:	4631      	mov	r1, r6
 8010492:	4628      	mov	r0, r5
 8010494:	f7ff fed0 	bl	8010238 <incrementIndex>
 8010498:	f938 3010 	ldrsh.w	r3, [r8, r0, lsl #1]
 801049c:	4a13      	ldr	r2, [pc, #76]	; (80104ec <addTableToBuffer+0x1ac>)
 801049e:	8013      	strh	r3, [r2, #0]
        buffer[i] += ( ( (int32_t) (ampltiude_multiplier * (table_val * SCALE_OUTPUT) ) )) * signal_off;
 80104a0:	009b      	lsls	r3, r3, #2
 80104a2:	ee07 3a90 	vmov	s15, r3
 80104a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80104aa:	4b11      	ldr	r3, [pc, #68]	; (80104f0 <addTableToBuffer+0x1b0>)
 80104ac:	ed93 7a00 	vldr	s14, [r3]
 80104b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80104b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80104b8:	ee17 3a90 	vmov	r3, s15
 80104bc:	4a0d      	ldr	r2, [pc, #52]	; (80104f4 <addTableToBuffer+0x1b4>)
 80104be:	7812      	ldrb	r2, [r2, #0]
 80104c0:	fb12 f303 	smulbb	r3, r2, r3
 80104c4:	f834 2017 	ldrh.w	r2, [r4, r7, lsl #1]
 80104c8:	4413      	add	r3, r2
 80104ca:	f824 3017 	strh.w	r3, [r4, r7, lsl #1]
      for (int i = 0; i < BUFFER_SIZE; i++) {
 80104ce:	3701      	adds	r7, #1
 80104d0:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 80104d4:	dbd9      	blt.n	801048a <addTableToBuffer+0x14a>
 80104d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104da:	bf00      	nop
 80104dc:	2000531e 	.word	0x2000531e
 80104e0:	20005360 	.word	0x20005360
 80104e4:	20005361 	.word	0x20005361
 80104e8:	20008718 	.word	0x20008718
 80104ec:	200076f4 	.word	0x200076f4
 80104f0:	20005318 	.word	0x20005318
 80104f4:	20000059 	.word	0x20000059

080104f8 <fillBuffer>:
void fillBuffer(q15_t* buffer) {
 80104f8:	b510      	push	{r4, lr}
 80104fa:	4604      	mov	r4, r0
  if (lidarModeActive) {
 80104fc:	4b4d      	ldr	r3, [pc, #308]	; (8010634 <fillBuffer+0x13c>)
 80104fe:	781b      	ldrb	r3, [r3, #0]
 8010500:	b91b      	cbnz	r3, 801050a <fillBuffer+0x12>
  } else if (capModeActive) {
 8010502:	4b4d      	ldr	r3, [pc, #308]	; (8010638 <fillBuffer+0x140>)
 8010504:	781b      	ldrb	r3, [r3, #0]
 8010506:	b92b      	cbnz	r3, 8010514 <fillBuffer+0x1c>
 8010508:	bd10      	pop	{r4, pc}
    addTableToBuffer(buffer, &freq_lidar_inc, &freq_lidar_ind);
 801050a:	4a4c      	ldr	r2, [pc, #304]	; (801063c <fillBuffer+0x144>)
 801050c:	494c      	ldr	r1, [pc, #304]	; (8010640 <fillBuffer+0x148>)
 801050e:	f7ff ff17 	bl	8010340 <addTableToBuffer>
 8010512:	bd10      	pop	{r4, pc}
    if (LED_State(CAP_1_LED_PORT, CAP_1_LED_PIN)) {
 8010514:	2120      	movs	r1, #32
 8010516:	2003      	movs	r0, #3
 8010518:	f7fe f98a 	bl	800e830 <LED_State>
 801051c:	2800      	cmp	r0, #0
 801051e:	d147      	bne.n	80105b0 <fillBuffer+0xb8>
    if (LED_State(CAP_2_LED_PORT, CAP_2_LED_PIN)) {
 8010520:	2110      	movs	r1, #16
 8010522:	2003      	movs	r0, #3
 8010524:	f7fe f984 	bl	800e830 <LED_State>
 8010528:	2800      	cmp	r0, #0
 801052a:	d147      	bne.n	80105bc <fillBuffer+0xc4>
    if (LED_State(CAP_3_LED_PORT, CAP_3_LED_PIN)) {
 801052c:	2108      	movs	r1, #8
 801052e:	2003      	movs	r0, #3
 8010530:	f7fe f97e 	bl	800e830 <LED_State>
 8010534:	2800      	cmp	r0, #0
 8010536:	d147      	bne.n	80105c8 <fillBuffer+0xd0>
    if (LED_State(CAP_4_LED_PORT, CAP_4_LED_PIN)) {
 8010538:	2104      	movs	r1, #4
 801053a:	2003      	movs	r0, #3
 801053c:	f7fe f978 	bl	800e830 <LED_State>
 8010540:	2800      	cmp	r0, #0
 8010542:	d147      	bne.n	80105d4 <fillBuffer+0xdc>
    if (LED_State(CAP_5_LED_PORT, CAP_5_LED_PIN)) {
 8010544:	2102      	movs	r1, #2
 8010546:	2003      	movs	r0, #3
 8010548:	f7fe f972 	bl	800e830 <LED_State>
 801054c:	2800      	cmp	r0, #0
 801054e:	d147      	bne.n	80105e0 <fillBuffer+0xe8>
    if (LED_State(CAP_6_LED_PORT, CAP_6_LED_PIN)) {
 8010550:	2101      	movs	r1, #1
 8010552:	2003      	movs	r0, #3
 8010554:	f7fe f96c 	bl	800e830 <LED_State>
 8010558:	2800      	cmp	r0, #0
 801055a:	d147      	bne.n	80105ec <fillBuffer+0xf4>
    if (LED_State(CAP_7_LED_PORT, CAP_7_LED_PIN)) {
 801055c:	2180      	movs	r1, #128	; 0x80
 801055e:	2002      	movs	r0, #2
 8010560:	f7fe f966 	bl	800e830 <LED_State>
 8010564:	2800      	cmp	r0, #0
 8010566:	d147      	bne.n	80105f8 <fillBuffer+0x100>
    if (LED_State(CAP_8_LED_PORT, CAP_8_LED_PIN)) {
 8010568:	2140      	movs	r1, #64	; 0x40
 801056a:	2002      	movs	r0, #2
 801056c:	f7fe f960 	bl	800e830 <LED_State>
 8010570:	2800      	cmp	r0, #0
 8010572:	d147      	bne.n	8010604 <fillBuffer+0x10c>
    if (LED_State(CAP_9_LED_PORT, CAP_9_LED_PIN)) {
 8010574:	2120      	movs	r1, #32
 8010576:	2002      	movs	r0, #2
 8010578:	f7fe f95a 	bl	800e830 <LED_State>
 801057c:	2800      	cmp	r0, #0
 801057e:	d147      	bne.n	8010610 <fillBuffer+0x118>
    if (LED_State(CAP_10_LED_PORT, CAP_10_LED_PIN)) {
 8010580:	2110      	movs	r1, #16
 8010582:	2002      	movs	r0, #2
 8010584:	f7fe f954 	bl	800e830 <LED_State>
 8010588:	2800      	cmp	r0, #0
 801058a:	d147      	bne.n	801061c <fillBuffer+0x124>
    if (LED_State(CAP_11_LED_PORT, CAP_11_LED_PIN)) {
 801058c:	2108      	movs	r1, #8
 801058e:	2002      	movs	r0, #2
 8010590:	f7fe f94e 	bl	800e830 <LED_State>
 8010594:	2800      	cmp	r0, #0
 8010596:	d147      	bne.n	8010628 <fillBuffer+0x130>
    if (LED_State(CAP_12_LED_PORT, CAP_12_LED_PIN)) {
 8010598:	2104      	movs	r1, #4
 801059a:	2002      	movs	r0, #2
 801059c:	f7fe f948 	bl	800e830 <LED_State>
 80105a0:	2800      	cmp	r0, #0
 80105a2:	d0b1      	beq.n	8010508 <fillBuffer+0x10>
      addTableToBuffer(buffer, &freq_12_inc, &freq_12_ind);
 80105a4:	4a27      	ldr	r2, [pc, #156]	; (8010644 <fillBuffer+0x14c>)
 80105a6:	4928      	ldr	r1, [pc, #160]	; (8010648 <fillBuffer+0x150>)
 80105a8:	4620      	mov	r0, r4
 80105aa:	f7ff fec9 	bl	8010340 <addTableToBuffer>
}
 80105ae:	e7ab      	b.n	8010508 <fillBuffer+0x10>
      addTableToBuffer(buffer, &freq_1_inc, &freq_1_ind);
 80105b0:	4a26      	ldr	r2, [pc, #152]	; (801064c <fillBuffer+0x154>)
 80105b2:	4927      	ldr	r1, [pc, #156]	; (8010650 <fillBuffer+0x158>)
 80105b4:	4620      	mov	r0, r4
 80105b6:	f7ff fec3 	bl	8010340 <addTableToBuffer>
 80105ba:	e7b1      	b.n	8010520 <fillBuffer+0x28>
      addTableToBuffer(buffer, &freq_2_inc, &freq_2_ind);
 80105bc:	4a25      	ldr	r2, [pc, #148]	; (8010654 <fillBuffer+0x15c>)
 80105be:	4926      	ldr	r1, [pc, #152]	; (8010658 <fillBuffer+0x160>)
 80105c0:	4620      	mov	r0, r4
 80105c2:	f7ff febd 	bl	8010340 <addTableToBuffer>
 80105c6:	e7b1      	b.n	801052c <fillBuffer+0x34>
      addTableToBuffer(buffer, &freq_3_inc, &freq_3_ind);
 80105c8:	4a24      	ldr	r2, [pc, #144]	; (801065c <fillBuffer+0x164>)
 80105ca:	4925      	ldr	r1, [pc, #148]	; (8010660 <fillBuffer+0x168>)
 80105cc:	4620      	mov	r0, r4
 80105ce:	f7ff feb7 	bl	8010340 <addTableToBuffer>
 80105d2:	e7b1      	b.n	8010538 <fillBuffer+0x40>
      addTableToBuffer(buffer, &freq_4_inc, &freq_4_ind);
 80105d4:	4a23      	ldr	r2, [pc, #140]	; (8010664 <fillBuffer+0x16c>)
 80105d6:	4924      	ldr	r1, [pc, #144]	; (8010668 <fillBuffer+0x170>)
 80105d8:	4620      	mov	r0, r4
 80105da:	f7ff feb1 	bl	8010340 <addTableToBuffer>
 80105de:	e7b1      	b.n	8010544 <fillBuffer+0x4c>
      addTableToBuffer(buffer, &freq_5_inc, &freq_5_ind);
 80105e0:	4a22      	ldr	r2, [pc, #136]	; (801066c <fillBuffer+0x174>)
 80105e2:	4923      	ldr	r1, [pc, #140]	; (8010670 <fillBuffer+0x178>)
 80105e4:	4620      	mov	r0, r4
 80105e6:	f7ff feab 	bl	8010340 <addTableToBuffer>
 80105ea:	e7b1      	b.n	8010550 <fillBuffer+0x58>
      addTableToBuffer(buffer, &freq_6_inc, &freq_6_ind);
 80105ec:	4a21      	ldr	r2, [pc, #132]	; (8010674 <fillBuffer+0x17c>)
 80105ee:	4922      	ldr	r1, [pc, #136]	; (8010678 <fillBuffer+0x180>)
 80105f0:	4620      	mov	r0, r4
 80105f2:	f7ff fea5 	bl	8010340 <addTableToBuffer>
 80105f6:	e7b1      	b.n	801055c <fillBuffer+0x64>
      addTableToBuffer(buffer, &freq_7_inc, &freq_7_ind);
 80105f8:	4a20      	ldr	r2, [pc, #128]	; (801067c <fillBuffer+0x184>)
 80105fa:	4921      	ldr	r1, [pc, #132]	; (8010680 <fillBuffer+0x188>)
 80105fc:	4620      	mov	r0, r4
 80105fe:	f7ff fe9f 	bl	8010340 <addTableToBuffer>
 8010602:	e7b1      	b.n	8010568 <fillBuffer+0x70>
      addTableToBuffer(buffer, &freq_8_inc, &freq_8_ind);
 8010604:	4a1f      	ldr	r2, [pc, #124]	; (8010684 <fillBuffer+0x18c>)
 8010606:	4920      	ldr	r1, [pc, #128]	; (8010688 <fillBuffer+0x190>)
 8010608:	4620      	mov	r0, r4
 801060a:	f7ff fe99 	bl	8010340 <addTableToBuffer>
 801060e:	e7b1      	b.n	8010574 <fillBuffer+0x7c>
      addTableToBuffer(buffer, &freq_9_inc, &freq_9_ind);
 8010610:	4a1e      	ldr	r2, [pc, #120]	; (801068c <fillBuffer+0x194>)
 8010612:	491f      	ldr	r1, [pc, #124]	; (8010690 <fillBuffer+0x198>)
 8010614:	4620      	mov	r0, r4
 8010616:	f7ff fe93 	bl	8010340 <addTableToBuffer>
 801061a:	e7b1      	b.n	8010580 <fillBuffer+0x88>
      addTableToBuffer(buffer, &freq_10_inc, &freq_10_ind);
 801061c:	4a1d      	ldr	r2, [pc, #116]	; (8010694 <fillBuffer+0x19c>)
 801061e:	491e      	ldr	r1, [pc, #120]	; (8010698 <fillBuffer+0x1a0>)
 8010620:	4620      	mov	r0, r4
 8010622:	f7ff fe8d 	bl	8010340 <addTableToBuffer>
 8010626:	e7b1      	b.n	801058c <fillBuffer+0x94>
      addTableToBuffer(buffer, &freq_11_inc, &freq_11_ind);
 8010628:	4a1c      	ldr	r2, [pc, #112]	; (801069c <fillBuffer+0x1a4>)
 801062a:	491d      	ldr	r1, [pc, #116]	; (80106a0 <fillBuffer+0x1a8>)
 801062c:	4620      	mov	r0, r4
 801062e:	f7ff fe87 	bl	8010340 <addTableToBuffer>
 8010632:	e7b1      	b.n	8010598 <fillBuffer+0xa0>
 8010634:	20005360 	.word	0x20005360
 8010638:	2000531d 	.word	0x2000531d
 801063c:	20005354 	.word	0x20005354
 8010640:	20006ad0 	.word	0x20006ad0
 8010644:	20005328 	.word	0x20005328
 8010648:	20007f10 	.word	0x20007f10
 801064c:	2000532c 	.word	0x2000532c
 8010650:	20005ecc 	.word	0x20005ecc
 8010654:	20005330 	.word	0x20005330
 8010658:	20007b04 	.word	0x20007b04
 801065c:	20005334 	.word	0x20005334
 8010660:	20006adc 	.word	0x20006adc
 8010664:	20005338 	.word	0x20005338
 8010668:	200076ec 	.word	0x200076ec
 801066c:	2000533c 	.word	0x2000533c
 8010670:	200076e8 	.word	0x200076e8
 8010674:	20005340 	.word	0x20005340
 8010678:	200072e0 	.word	0x200072e0
 801067c:	20005344 	.word	0x20005344
 8010680:	20006ad4 	.word	0x20006ad4
 8010684:	20005348 	.word	0x20005348
 8010688:	20008720 	.word	0x20008720
 801068c:	2000534c 	.word	0x2000534c
 8010690:	200072e4 	.word	0x200072e4
 8010694:	20005320 	.word	0x20005320
 8010698:	20008314 	.word	0x20008314
 801069c:	20005324 	.word	0x20005324
 80106a0:	200076f8 	.word	0x200076f8
 80106a4:	00000000 	.word	0x00000000

080106a8 <switchOctave>:

void switchOctave(uint8_t des_octave) {
 80106a8:	b570      	push	{r4, r5, r6, lr}
  octave = des_octave;
 80106aa:	4bbf      	ldr	r3, [pc, #764]	; (80109a8 <switchOctave+0x300>)
 80106ac:	7018      	strb	r0, [r3, #0]
  if (des_octave == 4) {
 80106ae:	2804      	cmp	r0, #4
 80106b0:	d006      	beq.n	80106c0 <switchOctave+0x18>
    freq_8_inc = (NOTE_G4 / DAC_FREQ) * max_table_index;
    freq_9_inc = (NOTE_G4S / DAC_FREQ) * max_table_index;
    freq_10_inc = (NOTE_A4 / DAC_FREQ) * max_table_index;
    freq_11_inc = (NOTE_A4S / DAC_FREQ) * max_table_index;
    freq_12_inc = (NOTE_B4 / DAC_FREQ) * max_table_index;
  } else if (des_octave == 5) {
 80106b2:	2805      	cmp	r0, #5
 80106b4:	f000 808e 	beq.w	80107d4 <switchOctave+0x12c>
    freq_8_inc = (NOTE_G5 / DAC_FREQ) * max_table_index;
    freq_9_inc = (NOTE_G5S / DAC_FREQ) * max_table_index;
    freq_10_inc = (NOTE_A5 / DAC_FREQ) * max_table_index;
    freq_11_inc = (NOTE_A5S / DAC_FREQ) * max_table_index;
    freq_12_inc = (NOTE_B5 / DAC_FREQ) * max_table_index;
  } else if (des_octave == 3) {
 80106b8:	2803      	cmp	r0, #3
 80106ba:	f000 8191 	beq.w	80109e0 <switchOctave+0x338>
 80106be:	bd70      	pop	{r4, r5, r6, pc}
    freq_1_inc = (NOTE_C4 / DAC_FREQ) * max_table_index;
 80106c0:	4bba      	ldr	r3, [pc, #744]	; (80109ac <switchOctave+0x304>)
 80106c2:	f9b3 0000 	ldrsh.w	r0, [r3]
 80106c6:	f7ef feed 	bl	80004a4 <__aeabi_i2d>
 80106ca:	4604      	mov	r4, r0
 80106cc:	460d      	mov	r5, r1
 80106ce:	a386      	add	r3, pc, #536	; (adr r3, 80108e8 <switchOctave+0x240>)
 80106d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106d4:	f7ef ff4c 	bl	8000570 <__aeabi_dmul>
 80106d8:	f7f0 fa42 	bl	8000b60 <__aeabi_d2f>
 80106dc:	4bb4      	ldr	r3, [pc, #720]	; (80109b0 <switchOctave+0x308>)
 80106de:	6018      	str	r0, [r3, #0]
    freq_2_inc = (NOTE_C4S / DAC_FREQ) * max_table_index;
 80106e0:	a383      	add	r3, pc, #524	; (adr r3, 80108f0 <switchOctave+0x248>)
 80106e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106e6:	4620      	mov	r0, r4
 80106e8:	4629      	mov	r1, r5
 80106ea:	f7ef ff41 	bl	8000570 <__aeabi_dmul>
 80106ee:	f7f0 fa37 	bl	8000b60 <__aeabi_d2f>
 80106f2:	4bb0      	ldr	r3, [pc, #704]	; (80109b4 <switchOctave+0x30c>)
 80106f4:	6018      	str	r0, [r3, #0]
    freq_3_inc = (NOTE_D4 / DAC_FREQ) * max_table_index;
 80106f6:	a380      	add	r3, pc, #512	; (adr r3, 80108f8 <switchOctave+0x250>)
 80106f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106fc:	4620      	mov	r0, r4
 80106fe:	4629      	mov	r1, r5
 8010700:	f7ef ff36 	bl	8000570 <__aeabi_dmul>
 8010704:	f7f0 fa2c 	bl	8000b60 <__aeabi_d2f>
 8010708:	4bab      	ldr	r3, [pc, #684]	; (80109b8 <switchOctave+0x310>)
 801070a:	6018      	str	r0, [r3, #0]
    freq_4_inc = (NOTE_D4S / DAC_FREQ) * max_table_index;
 801070c:	a37c      	add	r3, pc, #496	; (adr r3, 8010900 <switchOctave+0x258>)
 801070e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010712:	4620      	mov	r0, r4
 8010714:	4629      	mov	r1, r5
 8010716:	f7ef ff2b 	bl	8000570 <__aeabi_dmul>
 801071a:	f7f0 fa21 	bl	8000b60 <__aeabi_d2f>
 801071e:	4ba7      	ldr	r3, [pc, #668]	; (80109bc <switchOctave+0x314>)
 8010720:	6018      	str	r0, [r3, #0]
    freq_5_inc = (NOTE_E4 / DAC_FREQ) * max_table_index;
 8010722:	a379      	add	r3, pc, #484	; (adr r3, 8010908 <switchOctave+0x260>)
 8010724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010728:	4620      	mov	r0, r4
 801072a:	4629      	mov	r1, r5
 801072c:	f7ef ff20 	bl	8000570 <__aeabi_dmul>
 8010730:	f7f0 fa16 	bl	8000b60 <__aeabi_d2f>
 8010734:	4ba2      	ldr	r3, [pc, #648]	; (80109c0 <switchOctave+0x318>)
 8010736:	6018      	str	r0, [r3, #0]
    freq_6_inc = (NOTE_F4 / DAC_FREQ) * max_table_index;
 8010738:	a375      	add	r3, pc, #468	; (adr r3, 8010910 <switchOctave+0x268>)
 801073a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801073e:	4620      	mov	r0, r4
 8010740:	4629      	mov	r1, r5
 8010742:	f7ef ff15 	bl	8000570 <__aeabi_dmul>
 8010746:	f7f0 fa0b 	bl	8000b60 <__aeabi_d2f>
 801074a:	4b9e      	ldr	r3, [pc, #632]	; (80109c4 <switchOctave+0x31c>)
 801074c:	6018      	str	r0, [r3, #0]
    freq_7_inc = (NOTE_F4S / DAC_FREQ) * max_table_index;
 801074e:	a372      	add	r3, pc, #456	; (adr r3, 8010918 <switchOctave+0x270>)
 8010750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010754:	4620      	mov	r0, r4
 8010756:	4629      	mov	r1, r5
 8010758:	f7ef ff0a 	bl	8000570 <__aeabi_dmul>
 801075c:	f7f0 fa00 	bl	8000b60 <__aeabi_d2f>
 8010760:	4b99      	ldr	r3, [pc, #612]	; (80109c8 <switchOctave+0x320>)
 8010762:	6018      	str	r0, [r3, #0]
    freq_8_inc = (NOTE_G4 / DAC_FREQ) * max_table_index;
 8010764:	a36e      	add	r3, pc, #440	; (adr r3, 8010920 <switchOctave+0x278>)
 8010766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801076a:	4620      	mov	r0, r4
 801076c:	4629      	mov	r1, r5
 801076e:	f7ef feff 	bl	8000570 <__aeabi_dmul>
 8010772:	f7f0 f9f5 	bl	8000b60 <__aeabi_d2f>
 8010776:	4b95      	ldr	r3, [pc, #596]	; (80109cc <switchOctave+0x324>)
 8010778:	6018      	str	r0, [r3, #0]
    freq_9_inc = (NOTE_G4S / DAC_FREQ) * max_table_index;
 801077a:	a36b      	add	r3, pc, #428	; (adr r3, 8010928 <switchOctave+0x280>)
 801077c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010780:	4620      	mov	r0, r4
 8010782:	4629      	mov	r1, r5
 8010784:	f7ef fef4 	bl	8000570 <__aeabi_dmul>
 8010788:	f7f0 f9ea 	bl	8000b60 <__aeabi_d2f>
 801078c:	4b90      	ldr	r3, [pc, #576]	; (80109d0 <switchOctave+0x328>)
 801078e:	6018      	str	r0, [r3, #0]
    freq_10_inc = (NOTE_A4 / DAC_FREQ) * max_table_index;
 8010790:	a367      	add	r3, pc, #412	; (adr r3, 8010930 <switchOctave+0x288>)
 8010792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010796:	4620      	mov	r0, r4
 8010798:	4629      	mov	r1, r5
 801079a:	f7ef fee9 	bl	8000570 <__aeabi_dmul>
 801079e:	f7f0 f9df 	bl	8000b60 <__aeabi_d2f>
 80107a2:	4b8c      	ldr	r3, [pc, #560]	; (80109d4 <switchOctave+0x32c>)
 80107a4:	6018      	str	r0, [r3, #0]
    freq_11_inc = (NOTE_A4S / DAC_FREQ) * max_table_index;
 80107a6:	a364      	add	r3, pc, #400	; (adr r3, 8010938 <switchOctave+0x290>)
 80107a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ac:	4620      	mov	r0, r4
 80107ae:	4629      	mov	r1, r5
 80107b0:	f7ef fede 	bl	8000570 <__aeabi_dmul>
 80107b4:	f7f0 f9d4 	bl	8000b60 <__aeabi_d2f>
 80107b8:	4b87      	ldr	r3, [pc, #540]	; (80109d8 <switchOctave+0x330>)
 80107ba:	6018      	str	r0, [r3, #0]
    freq_12_inc = (NOTE_B4 / DAC_FREQ) * max_table_index;
 80107bc:	a360      	add	r3, pc, #384	; (adr r3, 8010940 <switchOctave+0x298>)
 80107be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107c2:	4620      	mov	r0, r4
 80107c4:	4629      	mov	r1, r5
 80107c6:	f7ef fed3 	bl	8000570 <__aeabi_dmul>
 80107ca:	f7f0 f9c9 	bl	8000b60 <__aeabi_d2f>
 80107ce:	4b83      	ldr	r3, [pc, #524]	; (80109dc <switchOctave+0x334>)
 80107d0:	6018      	str	r0, [r3, #0]
 80107d2:	bd70      	pop	{r4, r5, r6, pc}
    freq_1_inc = (NOTE_C5 / DAC_FREQ) * max_table_index;
 80107d4:	4b75      	ldr	r3, [pc, #468]	; (80109ac <switchOctave+0x304>)
 80107d6:	f9b3 0000 	ldrsh.w	r0, [r3]
 80107da:	f7ef fe63 	bl	80004a4 <__aeabi_i2d>
 80107de:	4604      	mov	r4, r0
 80107e0:	460d      	mov	r5, r1
 80107e2:	a359      	add	r3, pc, #356	; (adr r3, 8010948 <switchOctave+0x2a0>)
 80107e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107e8:	f7ef fec2 	bl	8000570 <__aeabi_dmul>
 80107ec:	f7f0 f9b8 	bl	8000b60 <__aeabi_d2f>
 80107f0:	4b6f      	ldr	r3, [pc, #444]	; (80109b0 <switchOctave+0x308>)
 80107f2:	6018      	str	r0, [r3, #0]
    freq_2_inc = (NOTE_C5S / DAC_FREQ) * max_table_index;
 80107f4:	a356      	add	r3, pc, #344	; (adr r3, 8010950 <switchOctave+0x2a8>)
 80107f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107fa:	4620      	mov	r0, r4
 80107fc:	4629      	mov	r1, r5
 80107fe:	f7ef feb7 	bl	8000570 <__aeabi_dmul>
 8010802:	f7f0 f9ad 	bl	8000b60 <__aeabi_d2f>
 8010806:	4b6b      	ldr	r3, [pc, #428]	; (80109b4 <switchOctave+0x30c>)
 8010808:	6018      	str	r0, [r3, #0]
    freq_3_inc = (NOTE_D5 / DAC_FREQ) * max_table_index;
 801080a:	a353      	add	r3, pc, #332	; (adr r3, 8010958 <switchOctave+0x2b0>)
 801080c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010810:	4620      	mov	r0, r4
 8010812:	4629      	mov	r1, r5
 8010814:	f7ef feac 	bl	8000570 <__aeabi_dmul>
 8010818:	f7f0 f9a2 	bl	8000b60 <__aeabi_d2f>
 801081c:	4b66      	ldr	r3, [pc, #408]	; (80109b8 <switchOctave+0x310>)
 801081e:	6018      	str	r0, [r3, #0]
    freq_4_inc = (NOTE_D5S / DAC_FREQ) * max_table_index;
 8010820:	a34f      	add	r3, pc, #316	; (adr r3, 8010960 <switchOctave+0x2b8>)
 8010822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010826:	4620      	mov	r0, r4
 8010828:	4629      	mov	r1, r5
 801082a:	f7ef fea1 	bl	8000570 <__aeabi_dmul>
 801082e:	f7f0 f997 	bl	8000b60 <__aeabi_d2f>
 8010832:	4b62      	ldr	r3, [pc, #392]	; (80109bc <switchOctave+0x314>)
 8010834:	6018      	str	r0, [r3, #0]
    freq_5_inc = (NOTE_E5 / DAC_FREQ) * max_table_index;
 8010836:	a34c      	add	r3, pc, #304	; (adr r3, 8010968 <switchOctave+0x2c0>)
 8010838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801083c:	4620      	mov	r0, r4
 801083e:	4629      	mov	r1, r5
 8010840:	f7ef fe96 	bl	8000570 <__aeabi_dmul>
 8010844:	f7f0 f98c 	bl	8000b60 <__aeabi_d2f>
 8010848:	4b5d      	ldr	r3, [pc, #372]	; (80109c0 <switchOctave+0x318>)
 801084a:	6018      	str	r0, [r3, #0]
    freq_6_inc = (NOTE_F5 / DAC_FREQ) * max_table_index;
 801084c:	a348      	add	r3, pc, #288	; (adr r3, 8010970 <switchOctave+0x2c8>)
 801084e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010852:	4620      	mov	r0, r4
 8010854:	4629      	mov	r1, r5
 8010856:	f7ef fe8b 	bl	8000570 <__aeabi_dmul>
 801085a:	f7f0 f981 	bl	8000b60 <__aeabi_d2f>
 801085e:	4b59      	ldr	r3, [pc, #356]	; (80109c4 <switchOctave+0x31c>)
 8010860:	6018      	str	r0, [r3, #0]
    freq_7_inc = (NOTE_F5S / DAC_FREQ) * max_table_index;
 8010862:	a345      	add	r3, pc, #276	; (adr r3, 8010978 <switchOctave+0x2d0>)
 8010864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010868:	4620      	mov	r0, r4
 801086a:	4629      	mov	r1, r5
 801086c:	f7ef fe80 	bl	8000570 <__aeabi_dmul>
 8010870:	f7f0 f976 	bl	8000b60 <__aeabi_d2f>
 8010874:	4b54      	ldr	r3, [pc, #336]	; (80109c8 <switchOctave+0x320>)
 8010876:	6018      	str	r0, [r3, #0]
    freq_8_inc = (NOTE_G5 / DAC_FREQ) * max_table_index;
 8010878:	a341      	add	r3, pc, #260	; (adr r3, 8010980 <switchOctave+0x2d8>)
 801087a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801087e:	4620      	mov	r0, r4
 8010880:	4629      	mov	r1, r5
 8010882:	f7ef fe75 	bl	8000570 <__aeabi_dmul>
 8010886:	f7f0 f96b 	bl	8000b60 <__aeabi_d2f>
 801088a:	4b50      	ldr	r3, [pc, #320]	; (80109cc <switchOctave+0x324>)
 801088c:	6018      	str	r0, [r3, #0]
    freq_9_inc = (NOTE_G5S / DAC_FREQ) * max_table_index;
 801088e:	a33e      	add	r3, pc, #248	; (adr r3, 8010988 <switchOctave+0x2e0>)
 8010890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010894:	4620      	mov	r0, r4
 8010896:	4629      	mov	r1, r5
 8010898:	f7ef fe6a 	bl	8000570 <__aeabi_dmul>
 801089c:	f7f0 f960 	bl	8000b60 <__aeabi_d2f>
 80108a0:	4b4b      	ldr	r3, [pc, #300]	; (80109d0 <switchOctave+0x328>)
 80108a2:	6018      	str	r0, [r3, #0]
    freq_10_inc = (NOTE_A5 / DAC_FREQ) * max_table_index;
 80108a4:	a33a      	add	r3, pc, #232	; (adr r3, 8010990 <switchOctave+0x2e8>)
 80108a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108aa:	4620      	mov	r0, r4
 80108ac:	4629      	mov	r1, r5
 80108ae:	f7ef fe5f 	bl	8000570 <__aeabi_dmul>
 80108b2:	f7f0 f955 	bl	8000b60 <__aeabi_d2f>
 80108b6:	4b47      	ldr	r3, [pc, #284]	; (80109d4 <switchOctave+0x32c>)
 80108b8:	6018      	str	r0, [r3, #0]
    freq_11_inc = (NOTE_A5S / DAC_FREQ) * max_table_index;
 80108ba:	a337      	add	r3, pc, #220	; (adr r3, 8010998 <switchOctave+0x2f0>)
 80108bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c0:	4620      	mov	r0, r4
 80108c2:	4629      	mov	r1, r5
 80108c4:	f7ef fe54 	bl	8000570 <__aeabi_dmul>
 80108c8:	f7f0 f94a 	bl	8000b60 <__aeabi_d2f>
 80108cc:	4b42      	ldr	r3, [pc, #264]	; (80109d8 <switchOctave+0x330>)
 80108ce:	6018      	str	r0, [r3, #0]
    freq_12_inc = (NOTE_B5 / DAC_FREQ) * max_table_index;
 80108d0:	a333      	add	r3, pc, #204	; (adr r3, 80109a0 <switchOctave+0x2f8>)
 80108d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108d6:	4620      	mov	r0, r4
 80108d8:	4629      	mov	r1, r5
 80108da:	f7ef fe49 	bl	8000570 <__aeabi_dmul>
 80108de:	f7f0 f93f 	bl	8000b60 <__aeabi_d2f>
 80108e2:	4b3e      	ldr	r3, [pc, #248]	; (80109dc <switchOctave+0x334>)
 80108e4:	6018      	str	r0, [r3, #0]
 80108e6:	bd70      	pop	{r4, r5, r6, pc}
 80108e8:	5d8368d5 	.word	0x5d8368d5
 80108ec:	3f7aca5e 	.word	0x3f7aca5e
 80108f0:	a000bbe7 	.word	0xa000bbe7
 80108f4:	3f7c622f 	.word	0x3f7c622f
 80108f8:	746455ec 	.word	0x746455ec
 80108fc:	3f7e1240 	.word	0x3f7e1240
 8010900:	f3f60682 	.word	0xf3f60682
 8010904:	3f7fdc01 	.word	0x3f7fdc01
 8010908:	07f81c06 	.word	0x07f81c06
 801090c:	3f80e080 	.word	0x3f80e080
 8010910:	b7c4fdcc 	.word	0xb7c4fdcc
 8010914:	3f81e166 	.word	0x3f81e166
 8010918:	d9f1787e 	.word	0xd9f1787e
 801091c:	3f82f195 	.word	0x3f82f195
 8010920:	f50a02b8 	.word	0xf50a02b8
 8010924:	3f8411f4 	.word	0x3f8411f4
 8010928:	5692b3cc 	.word	0x5692b3cc
 801092c:	3f85437c 	.word	0x3f85437c
 8010930:	020c49ba 	.word	0x020c49ba
 8010934:	3f86872b 	.word	0x3f86872b
 8010938:	d2ea1d3f 	.word	0xd2ea1d3f
 801093c:	3f87de1a 	.word	0x3f87de1a
 8010940:	5a9c2dc8 	.word	0x5a9c2dc8
 8010944:	3f89496c 	.word	0x3f89496c
 8010948:	0285157e 	.word	0x0285157e
 801094c:	3f8aca5b 	.word	0x3f8aca5b
 8010950:	45026890 	.word	0x45026890
 8010954:	3f8c622c 	.word	0x3f8c622c
 8010958:	746455ec 	.word	0x746455ec
 801095c:	3f8e1240 	.word	0x3f8e1240
 8010960:	f3f60682 	.word	0xf3f60682
 8010964:	3f8fdc01 	.word	0x3f8fdc01
 8010968:	5a78f25a 	.word	0x5a78f25a
 801096c:	3f90e07e 	.word	0x3f90e07e
 8010970:	b7c4fdcc 	.word	0xb7c4fdcc
 8010974:	3f91e166 	.word	0x3f91e166
 8010978:	8770a22a 	.word	0x8770a22a
 801097c:	3f92f197 	.word	0x3f92f197
 8010980:	a2892c64 	.word	0xa2892c64
 8010984:	3f9411f6 	.word	0x3f9411f6
 8010988:	a9138a21 	.word	0xa9138a21
 801098c:	3f95437a 	.word	0x3f95437a
 8010990:	020c49ba 	.word	0x020c49ba
 8010994:	3f96872b 	.word	0x3f96872b
 8010998:	d2ea1d3f 	.word	0xd2ea1d3f
 801099c:	3f97de1a 	.word	0x3f97de1a
 80109a0:	081b5775 	.word	0x081b5775
 80109a4:	3f99496e 	.word	0x3f99496e
 80109a8:	20000058 	.word	0x20000058
 80109ac:	20000056 	.word	0x20000056
 80109b0:	20005ecc 	.word	0x20005ecc
 80109b4:	20007b04 	.word	0x20007b04
 80109b8:	20006adc 	.word	0x20006adc
 80109bc:	200076ec 	.word	0x200076ec
 80109c0:	200076e8 	.word	0x200076e8
 80109c4:	200072e0 	.word	0x200072e0
 80109c8:	20006ad4 	.word	0x20006ad4
 80109cc:	20008720 	.word	0x20008720
 80109d0:	200072e4 	.word	0x200072e4
 80109d4:	20008314 	.word	0x20008314
 80109d8:	200076f8 	.word	0x200076f8
 80109dc:	20007f10 	.word	0x20007f10
    freq_1_inc = (NOTE_C3 / DAC_FREQ) * max_table_index;
 80109e0:	4b57      	ldr	r3, [pc, #348]	; (8010b40 <switchOctave+0x498>)
 80109e2:	f9b3 0000 	ldrsh.w	r0, [r3]
 80109e6:	f7ef fd5d 	bl	80004a4 <__aeabi_i2d>
 80109ea:	4604      	mov	r4, r0
 80109ec:	460d      	mov	r5, r1
 80109ee:	a33e      	add	r3, pc, #248	; (adr r3, 8010ae8 <switchOctave+0x440>)
 80109f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109f4:	f7ef fdbc 	bl	8000570 <__aeabi_dmul>
 80109f8:	f7f0 f8b2 	bl	8000b60 <__aeabi_d2f>
 80109fc:	4b51      	ldr	r3, [pc, #324]	; (8010b44 <switchOctave+0x49c>)
 80109fe:	6018      	str	r0, [r3, #0]
    freq_2_inc = (NOTE_C3S / DAC_FREQ) * max_table_index;
 8010a00:	a33b      	add	r3, pc, #236	; (adr r3, 8010af0 <switchOctave+0x448>)
 8010a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a06:	4620      	mov	r0, r4
 8010a08:	4629      	mov	r1, r5
 8010a0a:	f7ef fdb1 	bl	8000570 <__aeabi_dmul>
 8010a0e:	f7f0 f8a7 	bl	8000b60 <__aeabi_d2f>
 8010a12:	4b4d      	ldr	r3, [pc, #308]	; (8010b48 <switchOctave+0x4a0>)
 8010a14:	6018      	str	r0, [r3, #0]
    freq_3_inc = (NOTE_D3 / DAC_FREQ) * max_table_index;
 8010a16:	a338      	add	r3, pc, #224	; (adr r3, 8010af8 <switchOctave+0x450>)
 8010a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a1c:	4620      	mov	r0, r4
 8010a1e:	4629      	mov	r1, r5
 8010a20:	f7ef fda6 	bl	8000570 <__aeabi_dmul>
 8010a24:	f7f0 f89c 	bl	8000b60 <__aeabi_d2f>
 8010a28:	4b48      	ldr	r3, [pc, #288]	; (8010b4c <switchOctave+0x4a4>)
 8010a2a:	6018      	str	r0, [r3, #0]
    freq_4_inc = (NOTE_D3S / DAC_FREQ) * max_table_index;
 8010a2c:	a334      	add	r3, pc, #208	; (adr r3, 8010b00 <switchOctave+0x458>)
 8010a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a32:	4620      	mov	r0, r4
 8010a34:	4629      	mov	r1, r5
 8010a36:	f7ef fd9b 	bl	8000570 <__aeabi_dmul>
 8010a3a:	f7f0 f891 	bl	8000b60 <__aeabi_d2f>
 8010a3e:	4b44      	ldr	r3, [pc, #272]	; (8010b50 <switchOctave+0x4a8>)
 8010a40:	6018      	str	r0, [r3, #0]
    freq_5_inc = (NOTE_E3 / DAC_FREQ) * max_table_index;
 8010a42:	a331      	add	r3, pc, #196	; (adr r3, 8010b08 <switchOctave+0x460>)
 8010a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a48:	4620      	mov	r0, r4
 8010a4a:	4629      	mov	r1, r5
 8010a4c:	f7ef fd90 	bl	8000570 <__aeabi_dmul>
 8010a50:	f7f0 f886 	bl	8000b60 <__aeabi_d2f>
 8010a54:	4b3f      	ldr	r3, [pc, #252]	; (8010b54 <switchOctave+0x4ac>)
 8010a56:	6018      	str	r0, [r3, #0]
    freq_6_inc = (NOTE_F3 / DAC_FREQ) * max_table_index;
 8010a58:	a32d      	add	r3, pc, #180	; (adr r3, 8010b10 <switchOctave+0x468>)
 8010a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a5e:	4620      	mov	r0, r4
 8010a60:	4629      	mov	r1, r5
 8010a62:	f7ef fd85 	bl	8000570 <__aeabi_dmul>
 8010a66:	f7f0 f87b 	bl	8000b60 <__aeabi_d2f>
 8010a6a:	4b3b      	ldr	r3, [pc, #236]	; (8010b58 <switchOctave+0x4b0>)
 8010a6c:	6018      	str	r0, [r3, #0]
    freq_7_inc = (NOTE_F3S / DAC_FREQ) * max_table_index;
 8010a6e:	a32a      	add	r3, pc, #168	; (adr r3, 8010b18 <switchOctave+0x470>)
 8010a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a74:	4620      	mov	r0, r4
 8010a76:	4629      	mov	r1, r5
 8010a78:	f7ef fd7a 	bl	8000570 <__aeabi_dmul>
 8010a7c:	f7f0 f870 	bl	8000b60 <__aeabi_d2f>
 8010a80:	4b36      	ldr	r3, [pc, #216]	; (8010b5c <switchOctave+0x4b4>)
 8010a82:	6018      	str	r0, [r3, #0]
    freq_8_inc = (NOTE_G3 / DAC_FREQ) * max_table_index;
 8010a84:	a326      	add	r3, pc, #152	; (adr r3, 8010b20 <switchOctave+0x478>)
 8010a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a8a:	4620      	mov	r0, r4
 8010a8c:	4629      	mov	r1, r5
 8010a8e:	f7ef fd6f 	bl	8000570 <__aeabi_dmul>
 8010a92:	f7f0 f865 	bl	8000b60 <__aeabi_d2f>
 8010a96:	4b32      	ldr	r3, [pc, #200]	; (8010b60 <switchOctave+0x4b8>)
 8010a98:	6018      	str	r0, [r3, #0]
    freq_9_inc = (NOTE_G3S / DAC_FREQ) * max_table_index;
 8010a9a:	a323      	add	r3, pc, #140	; (adr r3, 8010b28 <switchOctave+0x480>)
 8010a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aa0:	4620      	mov	r0, r4
 8010aa2:	4629      	mov	r1, r5
 8010aa4:	f7ef fd64 	bl	8000570 <__aeabi_dmul>
 8010aa8:	f7f0 f85a 	bl	8000b60 <__aeabi_d2f>
 8010aac:	4606      	mov	r6, r0
 8010aae:	4b2d      	ldr	r3, [pc, #180]	; (8010b64 <switchOctave+0x4bc>)
 8010ab0:	6018      	str	r0, [r3, #0]
    freq_10_inc = (NOTE_A3 / DAC_FREQ) * max_table_index;
 8010ab2:	a31f      	add	r3, pc, #124	; (adr r3, 8010b30 <switchOctave+0x488>)
 8010ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ab8:	4620      	mov	r0, r4
 8010aba:	4629      	mov	r1, r5
 8010abc:	f7ef fd58 	bl	8000570 <__aeabi_dmul>
 8010ac0:	f7f0 f84e 	bl	8000b60 <__aeabi_d2f>
 8010ac4:	4b28      	ldr	r3, [pc, #160]	; (8010b68 <switchOctave+0x4c0>)
 8010ac6:	6018      	str	r0, [r3, #0]
    freq_11_inc = (NOTE_A3S / DAC_FREQ) * max_table_index;
 8010ac8:	4b28      	ldr	r3, [pc, #160]	; (8010b6c <switchOctave+0x4c4>)
 8010aca:	601e      	str	r6, [r3, #0]
    freq_12_inc = (NOTE_B3 / DAC_FREQ) * max_table_index;
 8010acc:	a31a      	add	r3, pc, #104	; (adr r3, 8010b38 <switchOctave+0x490>)
 8010ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad2:	4620      	mov	r0, r4
 8010ad4:	4629      	mov	r1, r5
 8010ad6:	f7ef fd4b 	bl	8000570 <__aeabi_dmul>
 8010ada:	f7f0 f841 	bl	8000b60 <__aeabi_d2f>
 8010ade:	4b24      	ldr	r3, [pc, #144]	; (8010b70 <switchOctave+0x4c8>)
 8010ae0:	6018      	str	r0, [r3, #0]
  }
}
 8010ae2:	e5ec      	b.n	80106be <switchOctave+0x16>
 8010ae4:	f3af 8000 	nop.w
 8010ae8:	5d8368d5 	.word	0x5d8368d5
 8010aec:	3f6aca5e 	.word	0x3f6aca5e
 8010af0:	ea041539 	.word	0xea041539
 8010af4:	3f6c6228 	.word	0x3f6c6228
 8010af8:	be67af3b 	.word	0xbe67af3b
 8010afc:	3f6e1239 	.word	0x3f6e1239
 8010b00:	3df95fd2 	.word	0x3df95fd2
 8010b04:	3f6fdbfb 	.word	0x3f6fdbfb
 8010b08:	07f81c06 	.word	0x07f81c06
 8010b0c:	3f70e080 	.word	0x3f70e080
 8010b10:	b7c4fdcc 	.word	0xb7c4fdcc
 8010b14:	3f71e166 	.word	0x3f71e166
 8010b18:	d9f1787e 	.word	0xd9f1787e
 8010b1c:	3f72f195 	.word	0x3f72f195
 8010b20:	50085610 	.word	0x50085610
 8010b24:	3f7411f8 	.word	0x3f7411f8
 8010b28:	fb946074 	.word	0xfb946074
 8010b2c:	3f754378 	.word	0x3f754378
 8010b30:	020c49ba 	.word	0x020c49ba
 8010b34:	3f76872b 	.word	0x3f76872b
 8010b38:	b59a8120 	.word	0xb59a8120
 8010b3c:	3f79496f 	.word	0x3f79496f
 8010b40:	20000056 	.word	0x20000056
 8010b44:	20005ecc 	.word	0x20005ecc
 8010b48:	20007b04 	.word	0x20007b04
 8010b4c:	20006adc 	.word	0x20006adc
 8010b50:	200076ec 	.word	0x200076ec
 8010b54:	200076e8 	.word	0x200076e8
 8010b58:	200072e0 	.word	0x200072e0
 8010b5c:	20006ad4 	.word	0x20006ad4
 8010b60:	20008720 	.word	0x20008720
 8010b64:	200072e4 	.word	0x200072e4
 8010b68:	20008314 	.word	0x20008314
 8010b6c:	200076f8 	.word	0x200076f8
 8010b70:	20007f10 	.word	0x20007f10

08010b74 <switchTable>:
void switchTable(const uint16_t* desired_table, int16_t size) {
 8010b74:	b508      	push	{r3, lr}
  max_table_index = size;
 8010b76:	4b04      	ldr	r3, [pc, #16]	; (8010b88 <switchTable+0x14>)
 8010b78:	8019      	strh	r1, [r3, #0]
  waveTable = desired_table;
 8010b7a:	4b04      	ldr	r3, [pc, #16]	; (8010b8c <switchTable+0x18>)
 8010b7c:	6018      	str	r0, [r3, #0]
  switchOctave(octave);
 8010b7e:	4b04      	ldr	r3, [pc, #16]	; (8010b90 <switchTable+0x1c>)
 8010b80:	7818      	ldrb	r0, [r3, #0]
 8010b82:	f7ff fd91 	bl	80106a8 <switchOctave>
 8010b86:	bd08      	pop	{r3, pc}
 8010b88:	20000056 	.word	0x20000056
 8010b8c:	20008718 	.word	0x20008718
 8010b90:	20000058 	.word	0x20000058

08010b94 <setTable>:
void setTable(char table) {
 8010b94:	b508      	push	{r3, lr}
  switch (table) {
 8010b96:	3851      	subs	r0, #81	; 0x51
 8010b98:	2806      	cmp	r0, #6
 8010b9a:	d823      	bhi.n	8010be4 <setTable+0x50>
 8010b9c:	e8df f000 	tbb	[pc, r0]
 8010ba0:	1004161c 	.word	0x1004161c
 8010ba4:	2222      	.short	0x2222
 8010ba6:	0a          	.byte	0x0a
 8010ba7:	00          	.byte	0x00
      switchTable(SinTable, sizeof(SinTable) >> 1);
 8010ba8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010bac:	4810      	ldr	r0, [pc, #64]	; (8010bf0 <setTable+0x5c>)
 8010bae:	f7ff ffe1 	bl	8010b74 <switchTable>
      break;
 8010bb2:	bd08      	pop	{r3, pc}
      switchTable(SawTable, sizeof(SawTable) >> 1);
 8010bb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010bb8:	480e      	ldr	r0, [pc, #56]	; (8010bf4 <setTable+0x60>)
 8010bba:	f7ff ffdb 	bl	8010b74 <switchTable>
      break;
 8010bbe:	bd08      	pop	{r3, pc}
      switchTable(TriangleTable, sizeof(TriangleTable) >> 1);
 8010bc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010bc4:	480c      	ldr	r0, [pc, #48]	; (8010bf8 <setTable+0x64>)
 8010bc6:	f7ff ffd5 	bl	8010b74 <switchTable>
      break;
 8010bca:	bd08      	pop	{r3, pc}
      switchTable(RampTable, sizeof(RampTable) >> 1);
 8010bcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010bd0:	480a      	ldr	r0, [pc, #40]	; (8010bfc <setTable+0x68>)
 8010bd2:	f7ff ffcf 	bl	8010b74 <switchTable>
      break;
 8010bd6:	bd08      	pop	{r3, pc}
      switchTable(SquareTable, sizeof(SquareTable) >> 1);
 8010bd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010bdc:	4808      	ldr	r0, [pc, #32]	; (8010c00 <setTable+0x6c>)
 8010bde:	f7ff ffc9 	bl	8010b74 <switchTable>
      break;
 8010be2:	bd08      	pop	{r3, pc}
      switchTable(SinTable, sizeof(SinTable) >> 1);
 8010be4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010be8:	4801      	ldr	r0, [pc, #4]	; (8010bf0 <setTable+0x5c>)
 8010bea:	f7ff ffc3 	bl	8010b74 <switchTable>
 8010bee:	bd08      	pop	{r3, pc}
 8010bf0:	080132dc 	.word	0x080132dc
 8010bf4:	080130dc 	.word	0x080130dc
 8010bf8:	080136dc 	.word	0x080136dc
 8010bfc:	08012edc 	.word	0x08012edc
 8010c00:	080134dc 	.word	0x080134dc

08010c04 <prepBuffer>:
void prepBuffer(DAC_HandleTypeDef* hdac) {
 8010c04:	b510      	push	{r4, lr}
 8010c06:	4604      	mov	r4, r0
  if (temp_2) {
 8010c08:	4b3f      	ldr	r3, [pc, #252]	; (8010d08 <prepBuffer+0x104>)
 8010c0a:	781b      	ldrb	r3, [r3, #0]
 8010c0c:	b9bb      	cbnz	r3, 8010c3e <prepBuffer+0x3a>
  if (buff_toggle == 0) {
 8010c0e:	4b3f      	ldr	r3, [pc, #252]	; (8010d0c <prepBuffer+0x108>)
 8010c10:	781b      	ldrb	r3, [r3, #0]
 8010c12:	b323      	cbz	r3, 8010c5e <prepBuffer+0x5a>
  } else if (buff_toggle == 1) {
 8010c14:	2b01      	cmp	r3, #1
 8010c16:	d044      	beq.n	8010ca2 <prepBuffer+0x9e>
    passBufferToDAC(filtered_buffer_1, hdac);
 8010c18:	4621      	mov	r1, r4
 8010c1a:	483d      	ldr	r0, [pc, #244]	; (8010d10 <prepBuffer+0x10c>)
 8010c1c:	f7ff faee 	bl	80101fc <passBufferToDAC>
    buff_toggle = 0;
 8010c20:	2200      	movs	r2, #0
 8010c22:	4b3a      	ldr	r3, [pc, #232]	; (8010d0c <prepBuffer+0x108>)
 8010c24:	701a      	strb	r2, [r3, #0]
    clearBuffer(buffer_3);
 8010c26:	4c3b      	ldr	r4, [pc, #236]	; (8010d14 <prepBuffer+0x110>)
 8010c28:	4620      	mov	r0, r4
 8010c2a:	f7ff fafa 	bl	8010222 <clearBuffer>
    fillBuffer(buffer_3);
 8010c2e:	4620      	mov	r0, r4
 8010c30:	f7ff fc62 	bl	80104f8 <fillBuffer>
    if (IIR_filter_active == 1) {
 8010c34:	4b38      	ldr	r3, [pc, #224]	; (8010d18 <prepBuffer+0x114>)
 8010c36:	781b      	ldrb	r3, [r3, #0]
 8010c38:	2b01      	cmp	r3, #1
 8010c3a:	d054      	beq.n	8010ce6 <prepBuffer+0xe2>
 8010c3c:	bd10      	pop	{r4, pc}
    temp_2 = 0;
 8010c3e:	2200      	movs	r2, #0
 8010c40:	4b31      	ldr	r3, [pc, #196]	; (8010d08 <prepBuffer+0x104>)
 8010c42:	701a      	strb	r2, [r3, #0]
    switchTable(SinTable, sizeof(SinTable) >> 1);
 8010c44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010c48:	4834      	ldr	r0, [pc, #208]	; (8010d1c <prepBuffer+0x118>)
 8010c4a:	f7ff ff93 	bl	8010b74 <switchTable>
    clearBuffer(buffer_3);
 8010c4e:	4831      	ldr	r0, [pc, #196]	; (8010d14 <prepBuffer+0x110>)
 8010c50:	f7ff fae7 	bl	8010222 <clearBuffer>
    setCutoffFreq(.9);
 8010c54:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8010d20 <prepBuffer+0x11c>
 8010c58:	f7fc fe94 	bl	800d984 <setCutoffFreq>
 8010c5c:	e7d7      	b.n	8010c0e <prepBuffer+0xa>
    passBufferToDAC(filtered_buffer_3, hdac);
 8010c5e:	4621      	mov	r1, r4
 8010c60:	4830      	ldr	r0, [pc, #192]	; (8010d24 <prepBuffer+0x120>)
 8010c62:	f7ff facb 	bl	80101fc <passBufferToDAC>
    buff_toggle = 1;
 8010c66:	2201      	movs	r2, #1
 8010c68:	4b28      	ldr	r3, [pc, #160]	; (8010d0c <prepBuffer+0x108>)
 8010c6a:	701a      	strb	r2, [r3, #0]
    clearBuffer(buffer_2);
 8010c6c:	4c2e      	ldr	r4, [pc, #184]	; (8010d28 <prepBuffer+0x124>)
 8010c6e:	4620      	mov	r0, r4
 8010c70:	f7ff fad7 	bl	8010222 <clearBuffer>
    fillBuffer(buffer_2);
 8010c74:	4620      	mov	r0, r4
 8010c76:	f7ff fc3f 	bl	80104f8 <fillBuffer>
    if (IIR_filter_active == 1) {
 8010c7a:	4b27      	ldr	r3, [pc, #156]	; (8010d18 <prepBuffer+0x114>)
 8010c7c:	781b      	ldrb	r3, [r3, #0]
 8010c7e:	2b01      	cmp	r3, #1
 8010c80:	d1dc      	bne.n	8010c3c <prepBuffer+0x38>
      applyCustomFilter(buffer_2, filtered_buffer_2, BUFFER_SIZE);
 8010c82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010c86:	4929      	ldr	r1, [pc, #164]	; (8010d2c <prepBuffer+0x128>)
 8010c88:	4620      	mov	r0, r4
 8010c8a:	f7fc fdd9 	bl	800d840 <applyCustomFilter>
      if(getBitCrush() > 0){
 8010c8e:	f7fe f823 	bl	800ecd8 <getBitCrush>
 8010c92:	2800      	cmp	r0, #0
 8010c94:	ddd2      	ble.n	8010c3c <prepBuffer+0x38>
	  applyBitCrush(filtered_buffer_2, BUFFER_SIZE);
 8010c96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010c9a:	4824      	ldr	r0, [pc, #144]	; (8010d2c <prepBuffer+0x128>)
 8010c9c:	f7ff fa9a 	bl	80101d4 <applyBitCrush>
 8010ca0:	bd10      	pop	{r4, pc}
    passBufferToDAC(filtered_buffer_2, hdac);
 8010ca2:	4621      	mov	r1, r4
 8010ca4:	4821      	ldr	r0, [pc, #132]	; (8010d2c <prepBuffer+0x128>)
 8010ca6:	f7ff faa9 	bl	80101fc <passBufferToDAC>
    buff_toggle = 2;
 8010caa:	2202      	movs	r2, #2
 8010cac:	4b17      	ldr	r3, [pc, #92]	; (8010d0c <prepBuffer+0x108>)
 8010cae:	701a      	strb	r2, [r3, #0]
    clearBuffer(buffer_1);
 8010cb0:	4c1f      	ldr	r4, [pc, #124]	; (8010d30 <prepBuffer+0x12c>)
 8010cb2:	4620      	mov	r0, r4
 8010cb4:	f7ff fab5 	bl	8010222 <clearBuffer>
    fillBuffer(buffer_1);
 8010cb8:	4620      	mov	r0, r4
 8010cba:	f7ff fc1d 	bl	80104f8 <fillBuffer>
    if (IIR_filter_active == 1) {
 8010cbe:	4b16      	ldr	r3, [pc, #88]	; (8010d18 <prepBuffer+0x114>)
 8010cc0:	781b      	ldrb	r3, [r3, #0]
 8010cc2:	2b01      	cmp	r3, #1
 8010cc4:	d1ba      	bne.n	8010c3c <prepBuffer+0x38>
      applyCustomFilter(buffer_1, filtered_buffer_1, BUFFER_SIZE);
 8010cc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010cca:	4911      	ldr	r1, [pc, #68]	; (8010d10 <prepBuffer+0x10c>)
 8010ccc:	4620      	mov	r0, r4
 8010cce:	f7fc fdb7 	bl	800d840 <applyCustomFilter>
      if(getBitCrush() > 0){
 8010cd2:	f7fe f801 	bl	800ecd8 <getBitCrush>
 8010cd6:	2800      	cmp	r0, #0
 8010cd8:	ddb0      	ble.n	8010c3c <prepBuffer+0x38>
	  applyBitCrush(filtered_buffer_1, BUFFER_SIZE);
 8010cda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010cde:	480c      	ldr	r0, [pc, #48]	; (8010d10 <prepBuffer+0x10c>)
 8010ce0:	f7ff fa78 	bl	80101d4 <applyBitCrush>
 8010ce4:	bd10      	pop	{r4, pc}
      applyCustomFilter(buffer_3, filtered_buffer_3, BUFFER_SIZE);
 8010ce6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010cea:	490e      	ldr	r1, [pc, #56]	; (8010d24 <prepBuffer+0x120>)
 8010cec:	4620      	mov	r0, r4
 8010cee:	f7fc fda7 	bl	800d840 <applyCustomFilter>
      if(getBitCrush() > 0){
 8010cf2:	f7fd fff1 	bl	800ecd8 <getBitCrush>
 8010cf6:	2800      	cmp	r0, #0
 8010cf8:	dda0      	ble.n	8010c3c <prepBuffer+0x38>
      	  applyBitCrush(filtered_buffer_3, BUFFER_SIZE);
 8010cfa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010cfe:	4809      	ldr	r0, [pc, #36]	; (8010d24 <prepBuffer+0x120>)
 8010d00:	f7ff fa68 	bl	80101d4 <applyBitCrush>
}
 8010d04:	e79a      	b.n	8010c3c <prepBuffer+0x38>
 8010d06:	bf00      	nop
 8010d08:	2000005a 	.word	0x2000005a
 8010d0c:	2000531c 	.word	0x2000531c
 8010d10:	20006ee0 	.word	0x20006ee0
 8010d14:	20007b0c 	.word	0x20007b0c
 8010d18:	2000004c 	.word	0x2000004c
 8010d1c:	080132dc 	.word	0x080132dc
 8010d20:	3f666666 	.word	0x3f666666
 8010d24:	20008318 	.word	0x20008318
 8010d28:	200066d0 	.word	0x200066d0
 8010d2c:	20005ed0 	.word	0x20005ed0
 8010d30:	20007700 	.word	0x20007700

08010d34 <HAL_DAC_ConvCpltCallbackCh1>:
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac) {
 8010d34:	b508      	push	{r3, lr}
  prepBuffer(hdac);
 8010d36:	f7ff ff65 	bl	8010c04 <prepBuffer>
 8010d3a:	bd08      	pop	{r3, pc}

08010d3c <incrementOctave>:

void incrementOctave(void) {
 8010d3c:	b508      	push	{r3, lr}
  if (octave == MAX_OCTAVE)
 8010d3e:	4b05      	ldr	r3, [pc, #20]	; (8010d54 <incrementOctave+0x18>)
 8010d40:	7818      	ldrb	r0, [r3, #0]
 8010d42:	2805      	cmp	r0, #5
 8010d44:	d004      	beq.n	8010d50 <incrementOctave+0x14>
    return;
  else {
    octave++;
 8010d46:	3001      	adds	r0, #1
 8010d48:	b2c0      	uxtb	r0, r0
 8010d4a:	7018      	strb	r0, [r3, #0]
    switchOctave(octave);
 8010d4c:	f7ff fcac 	bl	80106a8 <switchOctave>
 8010d50:	bd08      	pop	{r3, pc}
 8010d52:	bf00      	nop
 8010d54:	20000058 	.word	0x20000058

08010d58 <decrementOctave>:
  }
}

void decrementOctave(void) {
 8010d58:	b508      	push	{r3, lr}
  if (octave == MIN_OCTAVE)
 8010d5a:	4b05      	ldr	r3, [pc, #20]	; (8010d70 <decrementOctave+0x18>)
 8010d5c:	7818      	ldrb	r0, [r3, #0]
 8010d5e:	2803      	cmp	r0, #3
 8010d60:	d004      	beq.n	8010d6c <decrementOctave+0x14>
    return;
  else {
    octave--;
 8010d62:	3801      	subs	r0, #1
 8010d64:	b2c0      	uxtb	r0, r0
 8010d66:	7018      	strb	r0, [r3, #0]
    switchOctave(octave);
 8010d68:	f7ff fc9e 	bl	80106a8 <switchOctave>
 8010d6c:	bd08      	pop	{r3, pc}
 8010d6e:	bf00      	nop
 8010d70:	20000058 	.word	0x20000058

08010d74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8010d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010dac <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8010d78:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8010d7a:	e003      	b.n	8010d84 <LoopCopyDataInit>

08010d7c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8010d7c:	4b0c      	ldr	r3, [pc, #48]	; (8010db0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8010d7e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8010d80:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8010d82:	3104      	adds	r1, #4

08010d84 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8010d84:	480b      	ldr	r0, [pc, #44]	; (8010db4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8010d86:	4b0c      	ldr	r3, [pc, #48]	; (8010db8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8010d88:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8010d8a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8010d8c:	d3f6      	bcc.n	8010d7c <CopyDataInit>
	ldr	r2, =_sbss
 8010d8e:	4a0b      	ldr	r2, [pc, #44]	; (8010dbc <LoopForever+0x12>)
	b	LoopFillZerobss
 8010d90:	e002      	b.n	8010d98 <LoopFillZerobss>

08010d92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8010d92:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8010d94:	f842 3b04 	str.w	r3, [r2], #4

08010d98 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8010d98:	4b09      	ldr	r3, [pc, #36]	; (8010dc0 <LoopForever+0x16>)
	cmp	r2, r3
 8010d9a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8010d9c:	d3f9      	bcc.n	8010d92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8010d9e:	f7fe fcbd 	bl	800f71c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010da2:	f000 f8df 	bl	8010f64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8010da6:	f7fd fec5 	bl	800eb34 <main>

08010daa <LoopForever>:

LoopForever:
    b LoopForever
 8010daa:	e7fe      	b.n	8010daa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8010dac:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8010db0:	08013af0 	.word	0x08013af0
	ldr	r0, =_sdata
 8010db4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8010db8:	200000c0 	.word	0x200000c0
	ldr	r2, =_sbss
 8010dbc:	200000c0 	.word	0x200000c0
	ldr	r3, = _ebss
 8010dc0:	20008728 	.word	0x20008728

08010dc4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8010dc4:	e7fe      	b.n	8010dc4 <ADC1_IRQHandler>
	...

08010dc8 <arm_shift_q15>:
 8010dc8:	2900      	cmp	r1, #0
 8010dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dce:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8010dd2:	da3d      	bge.n	8010e50 <arm_shift_q15+0x88>
 8010dd4:	f1be 0f00 	cmp.w	lr, #0
 8010dd8:	d02b      	beq.n	8010e32 <arm_shift_q15+0x6a>
 8010dda:	f1c1 0c00 	rsb	ip, r1, #0
 8010dde:	f100 0608 	add.w	r6, r0, #8
 8010de2:	f102 0708 	add.w	r7, r2, #8
 8010de6:	46f0      	mov	r8, lr
 8010de8:	f936 5c08 	ldrsh.w	r5, [r6, #-8]
 8010dec:	f936 4c06 	ldrsh.w	r4, [r6, #-6]
 8010df0:	fa45 f50c 	asr.w	r5, r5, ip
 8010df4:	b2ad      	uxth	r5, r5
 8010df6:	fa44 f40c 	asr.w	r4, r4, ip
 8010dfa:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8010dfe:	f847 4c08 	str.w	r4, [r7, #-8]
 8010e02:	f936 5c04 	ldrsh.w	r5, [r6, #-4]
 8010e06:	f936 4c02 	ldrsh.w	r4, [r6, #-2]
 8010e0a:	fa45 f50c 	asr.w	r5, r5, ip
 8010e0e:	b2ad      	uxth	r5, r5
 8010e10:	fa44 f40c 	asr.w	r4, r4, ip
 8010e14:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8010e18:	f1b8 0801 	subs.w	r8, r8, #1
 8010e1c:	f847 4c04 	str.w	r4, [r7, #-4]
 8010e20:	f106 0608 	add.w	r6, r6, #8
 8010e24:	f107 0708 	add.w	r7, r7, #8
 8010e28:	d1de      	bne.n	8010de8 <arm_shift_q15+0x20>
 8010e2a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8010e2e:	4470      	add	r0, lr
 8010e30:	4472      	add	r2, lr
 8010e32:	f013 0303 	ands.w	r3, r3, #3
 8010e36:	d009      	beq.n	8010e4c <arm_shift_q15+0x84>
 8010e38:	4249      	negs	r1, r1
 8010e3a:	3a02      	subs	r2, #2
 8010e3c:	f930 4b02 	ldrsh.w	r4, [r0], #2
 8010e40:	3b01      	subs	r3, #1
 8010e42:	fa44 f401 	asr.w	r4, r4, r1
 8010e46:	f822 4f02 	strh.w	r4, [r2, #2]!
 8010e4a:	d1f7      	bne.n	8010e3c <arm_shift_q15+0x74>
 8010e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e50:	f1be 0f00 	cmp.w	lr, #0
 8010e54:	d02f      	beq.n	8010eb6 <arm_shift_q15+0xee>
 8010e56:	f100 0608 	add.w	r6, r0, #8
 8010e5a:	f102 0708 	add.w	r7, r2, #8
 8010e5e:	46f4      	mov	ip, lr
 8010e60:	f936 4c08 	ldrsh.w	r4, [r6, #-8]
 8010e64:	f936 8c06 	ldrsh.w	r8, [r6, #-6]
 8010e68:	408c      	lsls	r4, r1
 8010e6a:	f304 040f 	ssat	r4, #16, r4
 8010e6e:	b2a5      	uxth	r5, r4
 8010e70:	fa08 f401 	lsl.w	r4, r8, r1
 8010e74:	f304 040f 	ssat	r4, #16, r4
 8010e78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8010e7c:	f847 4c08 	str.w	r4, [r7, #-8]
 8010e80:	f936 4c04 	ldrsh.w	r4, [r6, #-4]
 8010e84:	f936 8c02 	ldrsh.w	r8, [r6, #-2]
 8010e88:	408c      	lsls	r4, r1
 8010e8a:	f304 040f 	ssat	r4, #16, r4
 8010e8e:	b2a5      	uxth	r5, r4
 8010e90:	f1bc 0c01 	subs.w	ip, ip, #1
 8010e94:	fa08 f401 	lsl.w	r4, r8, r1
 8010e98:	f304 040f 	ssat	r4, #16, r4
 8010e9c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8010ea0:	f847 4c04 	str.w	r4, [r7, #-4]
 8010ea4:	f106 0608 	add.w	r6, r6, #8
 8010ea8:	f107 0708 	add.w	r7, r7, #8
 8010eac:	d1d8      	bne.n	8010e60 <arm_shift_q15+0x98>
 8010eae:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8010eb2:	4470      	add	r0, lr
 8010eb4:	4472      	add	r2, lr
 8010eb6:	f013 0303 	ands.w	r3, r3, #3
 8010eba:	d0c7      	beq.n	8010e4c <arm_shift_q15+0x84>
 8010ebc:	3a02      	subs	r2, #2
 8010ebe:	f930 4b02 	ldrsh.w	r4, [r0], #2
 8010ec2:	3b01      	subs	r3, #1
 8010ec4:	fa04 f401 	lsl.w	r4, r4, r1
 8010ec8:	f304 040f 	ssat	r4, #16, r4
 8010ecc:	f822 4f02 	strh.w	r4, [r2, #2]!
 8010ed0:	d1f5      	bne.n	8010ebe <arm_shift_q15+0xf6>
 8010ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ed6:	bf00      	nop

08010ed8 <arm_dot_prod_f32>:
 8010ed8:	b4f0      	push	{r4, r5, r6, r7}
 8010eda:	0897      	lsrs	r7, r2, #2
 8010edc:	eddf 5a20 	vldr	s11, [pc, #128]	; 8010f60 <arm_dot_prod_f32+0x88>
 8010ee0:	d02d      	beq.n	8010f3e <arm_dot_prod_f32+0x66>
 8010ee2:	f100 0510 	add.w	r5, r0, #16
 8010ee6:	f101 0410 	add.w	r4, r1, #16
 8010eea:	463e      	mov	r6, r7
 8010eec:	ed54 7a04 	vldr	s15, [r4, #-16]
 8010ef0:	ed15 6a04 	vldr	s12, [r5, #-16]
 8010ef4:	ed55 6a03 	vldr	s13, [r5, #-12]
 8010ef8:	ed54 3a03 	vldr	s7, [r4, #-12]
 8010efc:	ed15 7a02 	vldr	s14, [r5, #-8]
 8010f00:	ed14 4a02 	vldr	s8, [r4, #-8]
 8010f04:	ed15 5a01 	vldr	s10, [r5, #-4]
 8010f08:	ed54 4a01 	vldr	s9, [r4, #-4]
 8010f0c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8010f10:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8010f14:	ee76 7a25 	vadd.f32	s15, s12, s11
 8010f18:	ee27 7a04 	vmul.f32	s14, s14, s8
 8010f1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f20:	ee65 5a24 	vmul.f32	s11, s10, s9
 8010f24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f28:	3e01      	subs	r6, #1
 8010f2a:	f105 0510 	add.w	r5, r5, #16
 8010f2e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8010f32:	f104 0410 	add.w	r4, r4, #16
 8010f36:	d1d9      	bne.n	8010eec <arm_dot_prod_f32+0x14>
 8010f38:	013f      	lsls	r7, r7, #4
 8010f3a:	4438      	add	r0, r7
 8010f3c:	4439      	add	r1, r7
 8010f3e:	f012 0203 	ands.w	r2, r2, #3
 8010f42:	d009      	beq.n	8010f58 <arm_dot_prod_f32+0x80>
 8010f44:	ecf0 7a01 	vldmia	r0!, {s15}
 8010f48:	ecb1 7a01 	vldmia	r1!, {s14}
 8010f4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010f50:	3a01      	subs	r2, #1
 8010f52:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8010f56:	d1f5      	bne.n	8010f44 <arm_dot_prod_f32+0x6c>
 8010f58:	edc3 5a00 	vstr	s11, [r3]
 8010f5c:	bcf0      	pop	{r4, r5, r6, r7}
 8010f5e:	4770      	bx	lr
 8010f60:	00000000 	.word	0x00000000

08010f64 <__libc_init_array>:
 8010f64:	b570      	push	{r4, r5, r6, lr}
 8010f66:	4e0d      	ldr	r6, [pc, #52]	; (8010f9c <__libc_init_array+0x38>)
 8010f68:	4c0d      	ldr	r4, [pc, #52]	; (8010fa0 <__libc_init_array+0x3c>)
 8010f6a:	1ba4      	subs	r4, r4, r6
 8010f6c:	10a4      	asrs	r4, r4, #2
 8010f6e:	2500      	movs	r5, #0
 8010f70:	42a5      	cmp	r5, r4
 8010f72:	d109      	bne.n	8010f88 <__libc_init_array+0x24>
 8010f74:	4e0b      	ldr	r6, [pc, #44]	; (8010fa4 <__libc_init_array+0x40>)
 8010f76:	4c0c      	ldr	r4, [pc, #48]	; (8010fa8 <__libc_init_array+0x44>)
 8010f78:	f001 fe3a 	bl	8012bf0 <_init>
 8010f7c:	1ba4      	subs	r4, r4, r6
 8010f7e:	10a4      	asrs	r4, r4, #2
 8010f80:	2500      	movs	r5, #0
 8010f82:	42a5      	cmp	r5, r4
 8010f84:	d105      	bne.n	8010f92 <__libc_init_array+0x2e>
 8010f86:	bd70      	pop	{r4, r5, r6, pc}
 8010f88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010f8c:	4798      	blx	r3
 8010f8e:	3501      	adds	r5, #1
 8010f90:	e7ee      	b.n	8010f70 <__libc_init_array+0xc>
 8010f92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010f96:	4798      	blx	r3
 8010f98:	3501      	adds	r5, #1
 8010f9a:	e7f2      	b.n	8010f82 <__libc_init_array+0x1e>
 8010f9c:	08013ae8 	.word	0x08013ae8
 8010fa0:	08013ae8 	.word	0x08013ae8
 8010fa4:	08013ae8 	.word	0x08013ae8
 8010fa8:	08013aec 	.word	0x08013aec

08010fac <memcpy>:
 8010fac:	b510      	push	{r4, lr}
 8010fae:	1e43      	subs	r3, r0, #1
 8010fb0:	440a      	add	r2, r1
 8010fb2:	4291      	cmp	r1, r2
 8010fb4:	d100      	bne.n	8010fb8 <memcpy+0xc>
 8010fb6:	bd10      	pop	{r4, pc}
 8010fb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010fbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010fc0:	e7f7      	b.n	8010fb2 <memcpy+0x6>

08010fc2 <memset>:
 8010fc2:	4402      	add	r2, r0
 8010fc4:	4603      	mov	r3, r0
 8010fc6:	4293      	cmp	r3, r2
 8010fc8:	d100      	bne.n	8010fcc <memset+0xa>
 8010fca:	4770      	bx	lr
 8010fcc:	f803 1b01 	strb.w	r1, [r3], #1
 8010fd0:	e7f9      	b.n	8010fc6 <memset+0x4>

08010fd2 <strncpy>:
 8010fd2:	b570      	push	{r4, r5, r6, lr}
 8010fd4:	4604      	mov	r4, r0
 8010fd6:	b902      	cbnz	r2, 8010fda <strncpy+0x8>
 8010fd8:	bd70      	pop	{r4, r5, r6, pc}
 8010fda:	4623      	mov	r3, r4
 8010fdc:	f811 5b01 	ldrb.w	r5, [r1], #1
 8010fe0:	f803 5b01 	strb.w	r5, [r3], #1
 8010fe4:	1e56      	subs	r6, r2, #1
 8010fe6:	b91d      	cbnz	r5, 8010ff0 <strncpy+0x1e>
 8010fe8:	4414      	add	r4, r2
 8010fea:	42a3      	cmp	r3, r4
 8010fec:	d103      	bne.n	8010ff6 <strncpy+0x24>
 8010fee:	bd70      	pop	{r4, r5, r6, pc}
 8010ff0:	461c      	mov	r4, r3
 8010ff2:	4632      	mov	r2, r6
 8010ff4:	e7ef      	b.n	8010fd6 <strncpy+0x4>
 8010ff6:	f803 5b01 	strb.w	r5, [r3], #1
 8010ffa:	e7f6      	b.n	8010fea <strncpy+0x18>
 8010ffc:	0000      	movs	r0, r0
	...

08011000 <cos>:
 8011000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011002:	ec51 0b10 	vmov	r0, r1, d0
 8011006:	4a1e      	ldr	r2, [pc, #120]	; (8011080 <cos+0x80>)
 8011008:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801100c:	4293      	cmp	r3, r2
 801100e:	dc06      	bgt.n	801101e <cos+0x1e>
 8011010:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8011078 <cos+0x78>
 8011014:	f000 ffc8 	bl	8011fa8 <__kernel_cos>
 8011018:	ec51 0b10 	vmov	r0, r1, d0
 801101c:	e007      	b.n	801102e <cos+0x2e>
 801101e:	4a19      	ldr	r2, [pc, #100]	; (8011084 <cos+0x84>)
 8011020:	4293      	cmp	r3, r2
 8011022:	dd09      	ble.n	8011038 <cos+0x38>
 8011024:	ee10 2a10 	vmov	r2, s0
 8011028:	460b      	mov	r3, r1
 801102a:	f7ef f8ed 	bl	8000208 <__aeabi_dsub>
 801102e:	ec41 0b10 	vmov	d0, r0, r1
 8011032:	b005      	add	sp, #20
 8011034:	f85d fb04 	ldr.w	pc, [sp], #4
 8011038:	4668      	mov	r0, sp
 801103a:	f000 fc3d 	bl	80118b8 <__ieee754_rem_pio2>
 801103e:	f000 0003 	and.w	r0, r0, #3
 8011042:	2801      	cmp	r0, #1
 8011044:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011048:	ed9d 0b00 	vldr	d0, [sp]
 801104c:	d007      	beq.n	801105e <cos+0x5e>
 801104e:	2802      	cmp	r0, #2
 8011050:	d00e      	beq.n	8011070 <cos+0x70>
 8011052:	2800      	cmp	r0, #0
 8011054:	d0de      	beq.n	8011014 <cos+0x14>
 8011056:	2001      	movs	r0, #1
 8011058:	f001 fbde 	bl	8012818 <__kernel_sin>
 801105c:	e7dc      	b.n	8011018 <cos+0x18>
 801105e:	f001 fbdb 	bl	8012818 <__kernel_sin>
 8011062:	ec53 2b10 	vmov	r2, r3, d0
 8011066:	ee10 0a10 	vmov	r0, s0
 801106a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801106e:	e7de      	b.n	801102e <cos+0x2e>
 8011070:	f000 ff9a 	bl	8011fa8 <__kernel_cos>
 8011074:	e7f5      	b.n	8011062 <cos+0x62>
 8011076:	bf00      	nop
	...
 8011080:	3fe921fb 	.word	0x3fe921fb
 8011084:	7fefffff 	.word	0x7fefffff

08011088 <round>:
 8011088:	ec51 0b10 	vmov	r0, r1, d0
 801108c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801108e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8011092:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8011096:	2c13      	cmp	r4, #19
 8011098:	460b      	mov	r3, r1
 801109a:	460f      	mov	r7, r1
 801109c:	dc17      	bgt.n	80110ce <round+0x46>
 801109e:	2c00      	cmp	r4, #0
 80110a0:	da09      	bge.n	80110b6 <round+0x2e>
 80110a2:	3401      	adds	r4, #1
 80110a4:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80110a8:	d103      	bne.n	80110b2 <round+0x2a>
 80110aa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80110ae:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80110b2:	2100      	movs	r1, #0
 80110b4:	e028      	b.n	8011108 <round+0x80>
 80110b6:	4a16      	ldr	r2, [pc, #88]	; (8011110 <round+0x88>)
 80110b8:	4122      	asrs	r2, r4
 80110ba:	4211      	tst	r1, r2
 80110bc:	d100      	bne.n	80110c0 <round+0x38>
 80110be:	b180      	cbz	r0, 80110e2 <round+0x5a>
 80110c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80110c4:	4123      	asrs	r3, r4
 80110c6:	443b      	add	r3, r7
 80110c8:	ea23 0302 	bic.w	r3, r3, r2
 80110cc:	e7f1      	b.n	80110b2 <round+0x2a>
 80110ce:	2c33      	cmp	r4, #51	; 0x33
 80110d0:	dd0a      	ble.n	80110e8 <round+0x60>
 80110d2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80110d6:	d104      	bne.n	80110e2 <round+0x5a>
 80110d8:	ee10 2a10 	vmov	r2, s0
 80110dc:	460b      	mov	r3, r1
 80110de:	f7ef f895 	bl	800020c <__adddf3>
 80110e2:	ec41 0b10 	vmov	d0, r0, r1
 80110e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110e8:	f2a5 4213 	subw	r2, r5, #1043	; 0x413
 80110ec:	f04f 35ff 	mov.w	r5, #4294967295
 80110f0:	40d5      	lsrs	r5, r2
 80110f2:	4228      	tst	r0, r5
 80110f4:	d0f5      	beq.n	80110e2 <round+0x5a>
 80110f6:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80110fa:	2201      	movs	r2, #1
 80110fc:	40a2      	lsls	r2, r4
 80110fe:	1812      	adds	r2, r2, r0
 8011100:	bf28      	it	cs
 8011102:	3301      	addcs	r3, #1
 8011104:	ea22 0105 	bic.w	r1, r2, r5
 8011108:	4608      	mov	r0, r1
 801110a:	4619      	mov	r1, r3
 801110c:	e7e9      	b.n	80110e2 <round+0x5a>
 801110e:	bf00      	nop
 8011110:	000fffff 	.word	0x000fffff
 8011114:	00000000 	.word	0x00000000

08011118 <sin>:
 8011118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801111a:	ec51 0b10 	vmov	r0, r1, d0
 801111e:	4a20      	ldr	r2, [pc, #128]	; (80111a0 <sin+0x88>)
 8011120:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011124:	4293      	cmp	r3, r2
 8011126:	dc07      	bgt.n	8011138 <sin+0x20>
 8011128:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8011198 <sin+0x80>
 801112c:	2000      	movs	r0, #0
 801112e:	f001 fb73 	bl	8012818 <__kernel_sin>
 8011132:	ec51 0b10 	vmov	r0, r1, d0
 8011136:	e007      	b.n	8011148 <sin+0x30>
 8011138:	4a1a      	ldr	r2, [pc, #104]	; (80111a4 <sin+0x8c>)
 801113a:	4293      	cmp	r3, r2
 801113c:	dd09      	ble.n	8011152 <sin+0x3a>
 801113e:	ee10 2a10 	vmov	r2, s0
 8011142:	460b      	mov	r3, r1
 8011144:	f7ef f860 	bl	8000208 <__aeabi_dsub>
 8011148:	ec41 0b10 	vmov	d0, r0, r1
 801114c:	b005      	add	sp, #20
 801114e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011152:	4668      	mov	r0, sp
 8011154:	f000 fbb0 	bl	80118b8 <__ieee754_rem_pio2>
 8011158:	f000 0003 	and.w	r0, r0, #3
 801115c:	2801      	cmp	r0, #1
 801115e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011162:	ed9d 0b00 	vldr	d0, [sp]
 8011166:	d004      	beq.n	8011172 <sin+0x5a>
 8011168:	2802      	cmp	r0, #2
 801116a:	d005      	beq.n	8011178 <sin+0x60>
 801116c:	b970      	cbnz	r0, 801118c <sin+0x74>
 801116e:	2001      	movs	r0, #1
 8011170:	e7dd      	b.n	801112e <sin+0x16>
 8011172:	f000 ff19 	bl	8011fa8 <__kernel_cos>
 8011176:	e7dc      	b.n	8011132 <sin+0x1a>
 8011178:	2001      	movs	r0, #1
 801117a:	f001 fb4d 	bl	8012818 <__kernel_sin>
 801117e:	ec53 2b10 	vmov	r2, r3, d0
 8011182:	ee10 0a10 	vmov	r0, s0
 8011186:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801118a:	e7dd      	b.n	8011148 <sin+0x30>
 801118c:	f000 ff0c 	bl	8011fa8 <__kernel_cos>
 8011190:	e7f5      	b.n	801117e <sin+0x66>
 8011192:	bf00      	nop
 8011194:	f3af 8000 	nop.w
	...
 80111a0:	3fe921fb 	.word	0x3fe921fb
 80111a4:	7fefffff 	.word	0x7fefffff

080111a8 <acos>:
 80111a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111aa:	ed2d 8b02 	vpush	{d8}
 80111ae:	4e26      	ldr	r6, [pc, #152]	; (8011248 <acos+0xa0>)
 80111b0:	b08b      	sub	sp, #44	; 0x2c
 80111b2:	ec55 4b10 	vmov	r4, r5, d0
 80111b6:	f000 f923 	bl	8011400 <__ieee754_acos>
 80111ba:	f996 3000 	ldrsb.w	r3, [r6]
 80111be:	eeb0 8a40 	vmov.f32	s16, s0
 80111c2:	eef0 8a60 	vmov.f32	s17, s1
 80111c6:	3301      	adds	r3, #1
 80111c8:	d036      	beq.n	8011238 <acos+0x90>
 80111ca:	4622      	mov	r2, r4
 80111cc:	462b      	mov	r3, r5
 80111ce:	4620      	mov	r0, r4
 80111d0:	4629      	mov	r1, r5
 80111d2:	f7ef fc67 	bl	8000aa4 <__aeabi_dcmpun>
 80111d6:	4607      	mov	r7, r0
 80111d8:	bb70      	cbnz	r0, 8011238 <acos+0x90>
 80111da:	ec45 4b10 	vmov	d0, r4, r5
 80111de:	f001 fbd5 	bl	801298c <fabs>
 80111e2:	2200      	movs	r2, #0
 80111e4:	4b19      	ldr	r3, [pc, #100]	; (801124c <acos+0xa4>)
 80111e6:	ec51 0b10 	vmov	r0, r1, d0
 80111ea:	f7ef fc51 	bl	8000a90 <__aeabi_dcmpgt>
 80111ee:	b318      	cbz	r0, 8011238 <acos+0x90>
 80111f0:	2301      	movs	r3, #1
 80111f2:	9300      	str	r3, [sp, #0]
 80111f4:	4816      	ldr	r0, [pc, #88]	; (8011250 <acos+0xa8>)
 80111f6:	4b17      	ldr	r3, [pc, #92]	; (8011254 <acos+0xac>)
 80111f8:	9301      	str	r3, [sp, #4]
 80111fa:	9708      	str	r7, [sp, #32]
 80111fc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8011200:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8011204:	f001 fc54 	bl	8012ab0 <nan>
 8011208:	f996 3000 	ldrsb.w	r3, [r6]
 801120c:	2b02      	cmp	r3, #2
 801120e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8011212:	d104      	bne.n	801121e <acos+0x76>
 8011214:	f001 fce6 	bl	8012be4 <__errno>
 8011218:	2321      	movs	r3, #33	; 0x21
 801121a:	6003      	str	r3, [r0, #0]
 801121c:	e004      	b.n	8011228 <acos+0x80>
 801121e:	4668      	mov	r0, sp
 8011220:	f001 fc42 	bl	8012aa8 <matherr>
 8011224:	2800      	cmp	r0, #0
 8011226:	d0f5      	beq.n	8011214 <acos+0x6c>
 8011228:	9b08      	ldr	r3, [sp, #32]
 801122a:	b11b      	cbz	r3, 8011234 <acos+0x8c>
 801122c:	f001 fcda 	bl	8012be4 <__errno>
 8011230:	9b08      	ldr	r3, [sp, #32]
 8011232:	6003      	str	r3, [r0, #0]
 8011234:	ed9d 8b06 	vldr	d8, [sp, #24]
 8011238:	eeb0 0a48 	vmov.f32	s0, s16
 801123c:	eef0 0a68 	vmov.f32	s1, s17
 8011240:	b00b      	add	sp, #44	; 0x2c
 8011242:	ecbd 8b02 	vpop	{d8}
 8011246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011248:	2000005b 	.word	0x2000005b
 801124c:	3ff00000 	.word	0x3ff00000
 8011250:	080138ea 	.word	0x080138ea
 8011254:	080138dc 	.word	0x080138dc

08011258 <sqrt>:
 8011258:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801125c:	ed2d 8b02 	vpush	{d8}
 8011260:	b08b      	sub	sp, #44	; 0x2c
 8011262:	ec55 4b10 	vmov	r4, r5, d0
 8011266:	f000 fd19 	bl	8011c9c <__ieee754_sqrt>
 801126a:	4b26      	ldr	r3, [pc, #152]	; (8011304 <sqrt+0xac>)
 801126c:	eeb0 8a40 	vmov.f32	s16, s0
 8011270:	eef0 8a60 	vmov.f32	s17, s1
 8011274:	f993 6000 	ldrsb.w	r6, [r3]
 8011278:	1c73      	adds	r3, r6, #1
 801127a:	d02a      	beq.n	80112d2 <sqrt+0x7a>
 801127c:	4622      	mov	r2, r4
 801127e:	462b      	mov	r3, r5
 8011280:	4620      	mov	r0, r4
 8011282:	4629      	mov	r1, r5
 8011284:	f7ef fc0e 	bl	8000aa4 <__aeabi_dcmpun>
 8011288:	4607      	mov	r7, r0
 801128a:	bb10      	cbnz	r0, 80112d2 <sqrt+0x7a>
 801128c:	f04f 0800 	mov.w	r8, #0
 8011290:	f04f 0900 	mov.w	r9, #0
 8011294:	4642      	mov	r2, r8
 8011296:	464b      	mov	r3, r9
 8011298:	4620      	mov	r0, r4
 801129a:	4629      	mov	r1, r5
 801129c:	f7ef fbda 	bl	8000a54 <__aeabi_dcmplt>
 80112a0:	b1b8      	cbz	r0, 80112d2 <sqrt+0x7a>
 80112a2:	2301      	movs	r3, #1
 80112a4:	9300      	str	r3, [sp, #0]
 80112a6:	4b18      	ldr	r3, [pc, #96]	; (8011308 <sqrt+0xb0>)
 80112a8:	9301      	str	r3, [sp, #4]
 80112aa:	9708      	str	r7, [sp, #32]
 80112ac:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80112b0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80112b4:	b9b6      	cbnz	r6, 80112e4 <sqrt+0x8c>
 80112b6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80112ba:	4668      	mov	r0, sp
 80112bc:	f001 fbf4 	bl	8012aa8 <matherr>
 80112c0:	b1d0      	cbz	r0, 80112f8 <sqrt+0xa0>
 80112c2:	9b08      	ldr	r3, [sp, #32]
 80112c4:	b11b      	cbz	r3, 80112ce <sqrt+0x76>
 80112c6:	f001 fc8d 	bl	8012be4 <__errno>
 80112ca:	9b08      	ldr	r3, [sp, #32]
 80112cc:	6003      	str	r3, [r0, #0]
 80112ce:	ed9d 8b06 	vldr	d8, [sp, #24]
 80112d2:	eeb0 0a48 	vmov.f32	s0, s16
 80112d6:	eef0 0a68 	vmov.f32	s1, s17
 80112da:	b00b      	add	sp, #44	; 0x2c
 80112dc:	ecbd 8b02 	vpop	{d8}
 80112e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80112e4:	4642      	mov	r2, r8
 80112e6:	464b      	mov	r3, r9
 80112e8:	4640      	mov	r0, r8
 80112ea:	4649      	mov	r1, r9
 80112ec:	f7ef fa6a 	bl	80007c4 <__aeabi_ddiv>
 80112f0:	2e02      	cmp	r6, #2
 80112f2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80112f6:	d1e0      	bne.n	80112ba <sqrt+0x62>
 80112f8:	f001 fc74 	bl	8012be4 <__errno>
 80112fc:	2321      	movs	r3, #33	; 0x21
 80112fe:	6003      	str	r3, [r0, #0]
 8011300:	e7df      	b.n	80112c2 <sqrt+0x6a>
 8011302:	bf00      	nop
 8011304:	2000005b 	.word	0x2000005b
 8011308:	080138e1 	.word	0x080138e1

0801130c <expf>:
 801130c:	b530      	push	{r4, r5, lr}
 801130e:	ed2d 8b02 	vpush	{d8}
 8011312:	4d35      	ldr	r5, [pc, #212]	; (80113e8 <expf+0xdc>)
 8011314:	b08b      	sub	sp, #44	; 0x2c
 8011316:	eeb0 8a40 	vmov.f32	s16, s0
 801131a:	f000 fd6f 	bl	8011dfc <__ieee754_expf>
 801131e:	f995 3000 	ldrsb.w	r3, [r5]
 8011322:	3301      	adds	r3, #1
 8011324:	ee10 4a10 	vmov	r4, s0
 8011328:	d030      	beq.n	801138c <expf+0x80>
 801132a:	eeb0 0a48 	vmov.f32	s0, s16
 801132e:	f001 fc41 	bl	8012bb4 <finitef>
 8011332:	b358      	cbz	r0, 801138c <expf+0x80>
 8011334:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80113ec <expf+0xe0>
 8011338:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801133c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011340:	dd35      	ble.n	80113ae <expf+0xa2>
 8011342:	2303      	movs	r3, #3
 8011344:	9300      	str	r3, [sp, #0]
 8011346:	4b2a      	ldr	r3, [pc, #168]	; (80113f0 <expf+0xe4>)
 8011348:	9301      	str	r3, [sp, #4]
 801134a:	ee18 0a10 	vmov	r0, s16
 801134e:	2300      	movs	r3, #0
 8011350:	9308      	str	r3, [sp, #32]
 8011352:	f7ef f8b9 	bl	80004c8 <__aeabi_f2d>
 8011356:	f995 3000 	ldrsb.w	r3, [r5]
 801135a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801135e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011362:	b9cb      	cbnz	r3, 8011398 <expf+0x8c>
 8011364:	4b23      	ldr	r3, [pc, #140]	; (80113f4 <expf+0xe8>)
 8011366:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801136a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801136e:	4668      	mov	r0, sp
 8011370:	f001 fb9a 	bl	8012aa8 <matherr>
 8011374:	b1b0      	cbz	r0, 80113a4 <expf+0x98>
 8011376:	9b08      	ldr	r3, [sp, #32]
 8011378:	b11b      	cbz	r3, 8011382 <expf+0x76>
 801137a:	f001 fc33 	bl	8012be4 <__errno>
 801137e:	9b08      	ldr	r3, [sp, #32]
 8011380:	6003      	str	r3, [r0, #0]
 8011382:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011386:	f7ef fbeb 	bl	8000b60 <__aeabi_d2f>
 801138a:	4604      	mov	r4, r0
 801138c:	ee00 4a10 	vmov	s0, r4
 8011390:	b00b      	add	sp, #44	; 0x2c
 8011392:	ecbd 8b02 	vpop	{d8}
 8011396:	bd30      	pop	{r4, r5, pc}
 8011398:	4917      	ldr	r1, [pc, #92]	; (80113f8 <expf+0xec>)
 801139a:	2000      	movs	r0, #0
 801139c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80113a0:	2b02      	cmp	r3, #2
 80113a2:	d1e4      	bne.n	801136e <expf+0x62>
 80113a4:	f001 fc1e 	bl	8012be4 <__errno>
 80113a8:	2322      	movs	r3, #34	; 0x22
 80113aa:	6003      	str	r3, [r0, #0]
 80113ac:	e7e3      	b.n	8011376 <expf+0x6a>
 80113ae:	eddf 7a13 	vldr	s15, [pc, #76]	; 80113fc <expf+0xf0>
 80113b2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80113b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113ba:	d5e7      	bpl.n	801138c <expf+0x80>
 80113bc:	2304      	movs	r3, #4
 80113be:	9300      	str	r3, [sp, #0]
 80113c0:	4b0b      	ldr	r3, [pc, #44]	; (80113f0 <expf+0xe4>)
 80113c2:	9301      	str	r3, [sp, #4]
 80113c4:	ee18 0a10 	vmov	r0, s16
 80113c8:	2300      	movs	r3, #0
 80113ca:	9308      	str	r3, [sp, #32]
 80113cc:	f7ef f87c 	bl	80004c8 <__aeabi_f2d>
 80113d0:	2300      	movs	r3, #0
 80113d2:	2200      	movs	r2, #0
 80113d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80113d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80113dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80113e0:	f995 3000 	ldrsb.w	r3, [r5]
 80113e4:	e7dc      	b.n	80113a0 <expf+0x94>
 80113e6:	bf00      	nop
 80113e8:	2000005b 	.word	0x2000005b
 80113ec:	42b17180 	.word	0x42b17180
 80113f0:	080138e6 	.word	0x080138e6
 80113f4:	47efffff 	.word	0x47efffff
 80113f8:	7ff00000 	.word	0x7ff00000
 80113fc:	c2cff1b5 	.word	0xc2cff1b5

08011400 <__ieee754_acos>:
 8011400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011404:	ec55 4b10 	vmov	r4, r5, d0
 8011408:	49b7      	ldr	r1, [pc, #732]	; (80116e8 <__ieee754_acos+0x2e8>)
 801140a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801140e:	428b      	cmp	r3, r1
 8011410:	dd1b      	ble.n	801144a <__ieee754_acos+0x4a>
 8011412:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8011416:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801141a:	4323      	orrs	r3, r4
 801141c:	d109      	bne.n	8011432 <__ieee754_acos+0x32>
 801141e:	2d00      	cmp	r5, #0
 8011420:	f300 8211 	bgt.w	8011846 <__ieee754_acos+0x446>
 8011424:	a196      	add	r1, pc, #600	; (adr r1, 8011680 <__ieee754_acos+0x280>)
 8011426:	e9d1 0100 	ldrd	r0, r1, [r1]
 801142a:	ec41 0b10 	vmov	d0, r0, r1
 801142e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011432:	ee10 2a10 	vmov	r2, s0
 8011436:	462b      	mov	r3, r5
 8011438:	4620      	mov	r0, r4
 801143a:	4629      	mov	r1, r5
 801143c:	f7ee fee4 	bl	8000208 <__aeabi_dsub>
 8011440:	4602      	mov	r2, r0
 8011442:	460b      	mov	r3, r1
 8011444:	f7ef f9be 	bl	80007c4 <__aeabi_ddiv>
 8011448:	e7ef      	b.n	801142a <__ieee754_acos+0x2a>
 801144a:	49a8      	ldr	r1, [pc, #672]	; (80116ec <__ieee754_acos+0x2ec>)
 801144c:	428b      	cmp	r3, r1
 801144e:	f300 8087 	bgt.w	8011560 <__ieee754_acos+0x160>
 8011452:	4aa7      	ldr	r2, [pc, #668]	; (80116f0 <__ieee754_acos+0x2f0>)
 8011454:	4293      	cmp	r3, r2
 8011456:	f340 81f9 	ble.w	801184c <__ieee754_acos+0x44c>
 801145a:	ee10 2a10 	vmov	r2, s0
 801145e:	ee10 0a10 	vmov	r0, s0
 8011462:	462b      	mov	r3, r5
 8011464:	4629      	mov	r1, r5
 8011466:	f7ef f883 	bl	8000570 <__aeabi_dmul>
 801146a:	a387      	add	r3, pc, #540	; (adr r3, 8011688 <__ieee754_acos+0x288>)
 801146c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011470:	4606      	mov	r6, r0
 8011472:	460f      	mov	r7, r1
 8011474:	f7ef f87c 	bl	8000570 <__aeabi_dmul>
 8011478:	a385      	add	r3, pc, #532	; (adr r3, 8011690 <__ieee754_acos+0x290>)
 801147a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801147e:	f7ee fec5 	bl	800020c <__adddf3>
 8011482:	4632      	mov	r2, r6
 8011484:	463b      	mov	r3, r7
 8011486:	f7ef f873 	bl	8000570 <__aeabi_dmul>
 801148a:	a383      	add	r3, pc, #524	; (adr r3, 8011698 <__ieee754_acos+0x298>)
 801148c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011490:	f7ee feba 	bl	8000208 <__aeabi_dsub>
 8011494:	4632      	mov	r2, r6
 8011496:	463b      	mov	r3, r7
 8011498:	f7ef f86a 	bl	8000570 <__aeabi_dmul>
 801149c:	a380      	add	r3, pc, #512	; (adr r3, 80116a0 <__ieee754_acos+0x2a0>)
 801149e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114a2:	f7ee feb3 	bl	800020c <__adddf3>
 80114a6:	4632      	mov	r2, r6
 80114a8:	463b      	mov	r3, r7
 80114aa:	f7ef f861 	bl	8000570 <__aeabi_dmul>
 80114ae:	a37e      	add	r3, pc, #504	; (adr r3, 80116a8 <__ieee754_acos+0x2a8>)
 80114b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114b4:	f7ee fea8 	bl	8000208 <__aeabi_dsub>
 80114b8:	4632      	mov	r2, r6
 80114ba:	463b      	mov	r3, r7
 80114bc:	f7ef f858 	bl	8000570 <__aeabi_dmul>
 80114c0:	a37b      	add	r3, pc, #492	; (adr r3, 80116b0 <__ieee754_acos+0x2b0>)
 80114c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114c6:	f7ee fea1 	bl	800020c <__adddf3>
 80114ca:	4632      	mov	r2, r6
 80114cc:	463b      	mov	r3, r7
 80114ce:	f7ef f84f 	bl	8000570 <__aeabi_dmul>
 80114d2:	a379      	add	r3, pc, #484	; (adr r3, 80116b8 <__ieee754_acos+0x2b8>)
 80114d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114d8:	4680      	mov	r8, r0
 80114da:	4689      	mov	r9, r1
 80114dc:	4630      	mov	r0, r6
 80114de:	4639      	mov	r1, r7
 80114e0:	f7ef f846 	bl	8000570 <__aeabi_dmul>
 80114e4:	a376      	add	r3, pc, #472	; (adr r3, 80116c0 <__ieee754_acos+0x2c0>)
 80114e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ea:	f7ee fe8d 	bl	8000208 <__aeabi_dsub>
 80114ee:	4632      	mov	r2, r6
 80114f0:	463b      	mov	r3, r7
 80114f2:	f7ef f83d 	bl	8000570 <__aeabi_dmul>
 80114f6:	a374      	add	r3, pc, #464	; (adr r3, 80116c8 <__ieee754_acos+0x2c8>)
 80114f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114fc:	f7ee fe86 	bl	800020c <__adddf3>
 8011500:	4632      	mov	r2, r6
 8011502:	463b      	mov	r3, r7
 8011504:	f7ef f834 	bl	8000570 <__aeabi_dmul>
 8011508:	a371      	add	r3, pc, #452	; (adr r3, 80116d0 <__ieee754_acos+0x2d0>)
 801150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801150e:	f7ee fe7b 	bl	8000208 <__aeabi_dsub>
 8011512:	4632      	mov	r2, r6
 8011514:	463b      	mov	r3, r7
 8011516:	f7ef f82b 	bl	8000570 <__aeabi_dmul>
 801151a:	2200      	movs	r2, #0
 801151c:	4b75      	ldr	r3, [pc, #468]	; (80116f4 <__ieee754_acos+0x2f4>)
 801151e:	f7ee fe75 	bl	800020c <__adddf3>
 8011522:	4602      	mov	r2, r0
 8011524:	460b      	mov	r3, r1
 8011526:	4640      	mov	r0, r8
 8011528:	4649      	mov	r1, r9
 801152a:	f7ef f94b 	bl	80007c4 <__aeabi_ddiv>
 801152e:	4622      	mov	r2, r4
 8011530:	462b      	mov	r3, r5
 8011532:	f7ef f81d 	bl	8000570 <__aeabi_dmul>
 8011536:	4602      	mov	r2, r0
 8011538:	460b      	mov	r3, r1
 801153a:	a167      	add	r1, pc, #412	; (adr r1, 80116d8 <__ieee754_acos+0x2d8>)
 801153c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011540:	f7ee fe62 	bl	8000208 <__aeabi_dsub>
 8011544:	4602      	mov	r2, r0
 8011546:	460b      	mov	r3, r1
 8011548:	4620      	mov	r0, r4
 801154a:	4629      	mov	r1, r5
 801154c:	f7ee fe5c 	bl	8000208 <__aeabi_dsub>
 8011550:	4602      	mov	r2, r0
 8011552:	460b      	mov	r3, r1
 8011554:	a162      	add	r1, pc, #392	; (adr r1, 80116e0 <__ieee754_acos+0x2e0>)
 8011556:	e9d1 0100 	ldrd	r0, r1, [r1]
 801155a:	f7ee fe55 	bl	8000208 <__aeabi_dsub>
 801155e:	e764      	b.n	801142a <__ieee754_acos+0x2a>
 8011560:	2d00      	cmp	r5, #0
 8011562:	f280 80cb 	bge.w	80116fc <__ieee754_acos+0x2fc>
 8011566:	ee10 0a10 	vmov	r0, s0
 801156a:	2200      	movs	r2, #0
 801156c:	4b61      	ldr	r3, [pc, #388]	; (80116f4 <__ieee754_acos+0x2f4>)
 801156e:	4629      	mov	r1, r5
 8011570:	f7ee fe4c 	bl	800020c <__adddf3>
 8011574:	2200      	movs	r2, #0
 8011576:	4b60      	ldr	r3, [pc, #384]	; (80116f8 <__ieee754_acos+0x2f8>)
 8011578:	f7ee fffa 	bl	8000570 <__aeabi_dmul>
 801157c:	a342      	add	r3, pc, #264	; (adr r3, 8011688 <__ieee754_acos+0x288>)
 801157e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011582:	4604      	mov	r4, r0
 8011584:	460d      	mov	r5, r1
 8011586:	f7ee fff3 	bl	8000570 <__aeabi_dmul>
 801158a:	a341      	add	r3, pc, #260	; (adr r3, 8011690 <__ieee754_acos+0x290>)
 801158c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011590:	f7ee fe3c 	bl	800020c <__adddf3>
 8011594:	4622      	mov	r2, r4
 8011596:	462b      	mov	r3, r5
 8011598:	f7ee ffea 	bl	8000570 <__aeabi_dmul>
 801159c:	a33e      	add	r3, pc, #248	; (adr r3, 8011698 <__ieee754_acos+0x298>)
 801159e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115a2:	f7ee fe31 	bl	8000208 <__aeabi_dsub>
 80115a6:	4622      	mov	r2, r4
 80115a8:	462b      	mov	r3, r5
 80115aa:	f7ee ffe1 	bl	8000570 <__aeabi_dmul>
 80115ae:	a33c      	add	r3, pc, #240	; (adr r3, 80116a0 <__ieee754_acos+0x2a0>)
 80115b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115b4:	f7ee fe2a 	bl	800020c <__adddf3>
 80115b8:	4622      	mov	r2, r4
 80115ba:	462b      	mov	r3, r5
 80115bc:	f7ee ffd8 	bl	8000570 <__aeabi_dmul>
 80115c0:	a339      	add	r3, pc, #228	; (adr r3, 80116a8 <__ieee754_acos+0x2a8>)
 80115c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115c6:	f7ee fe1f 	bl	8000208 <__aeabi_dsub>
 80115ca:	4622      	mov	r2, r4
 80115cc:	462b      	mov	r3, r5
 80115ce:	f7ee ffcf 	bl	8000570 <__aeabi_dmul>
 80115d2:	a337      	add	r3, pc, #220	; (adr r3, 80116b0 <__ieee754_acos+0x2b0>)
 80115d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115d8:	f7ee fe18 	bl	800020c <__adddf3>
 80115dc:	4622      	mov	r2, r4
 80115de:	462b      	mov	r3, r5
 80115e0:	f7ee ffc6 	bl	8000570 <__aeabi_dmul>
 80115e4:	ec45 4b10 	vmov	d0, r4, r5
 80115e8:	4680      	mov	r8, r0
 80115ea:	4689      	mov	r9, r1
 80115ec:	f000 fb56 	bl	8011c9c <__ieee754_sqrt>
 80115f0:	a331      	add	r3, pc, #196	; (adr r3, 80116b8 <__ieee754_acos+0x2b8>)
 80115f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115f6:	4620      	mov	r0, r4
 80115f8:	4629      	mov	r1, r5
 80115fa:	ec57 6b10 	vmov	r6, r7, d0
 80115fe:	f7ee ffb7 	bl	8000570 <__aeabi_dmul>
 8011602:	a32f      	add	r3, pc, #188	; (adr r3, 80116c0 <__ieee754_acos+0x2c0>)
 8011604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011608:	f7ee fdfe 	bl	8000208 <__aeabi_dsub>
 801160c:	4622      	mov	r2, r4
 801160e:	462b      	mov	r3, r5
 8011610:	f7ee ffae 	bl	8000570 <__aeabi_dmul>
 8011614:	a32c      	add	r3, pc, #176	; (adr r3, 80116c8 <__ieee754_acos+0x2c8>)
 8011616:	e9d3 2300 	ldrd	r2, r3, [r3]
 801161a:	f7ee fdf7 	bl	800020c <__adddf3>
 801161e:	4622      	mov	r2, r4
 8011620:	462b      	mov	r3, r5
 8011622:	f7ee ffa5 	bl	8000570 <__aeabi_dmul>
 8011626:	a32a      	add	r3, pc, #168	; (adr r3, 80116d0 <__ieee754_acos+0x2d0>)
 8011628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801162c:	f7ee fdec 	bl	8000208 <__aeabi_dsub>
 8011630:	4622      	mov	r2, r4
 8011632:	462b      	mov	r3, r5
 8011634:	f7ee ff9c 	bl	8000570 <__aeabi_dmul>
 8011638:	2200      	movs	r2, #0
 801163a:	4b2e      	ldr	r3, [pc, #184]	; (80116f4 <__ieee754_acos+0x2f4>)
 801163c:	f7ee fde6 	bl	800020c <__adddf3>
 8011640:	4602      	mov	r2, r0
 8011642:	460b      	mov	r3, r1
 8011644:	4640      	mov	r0, r8
 8011646:	4649      	mov	r1, r9
 8011648:	f7ef f8bc 	bl	80007c4 <__aeabi_ddiv>
 801164c:	4632      	mov	r2, r6
 801164e:	463b      	mov	r3, r7
 8011650:	f7ee ff8e 	bl	8000570 <__aeabi_dmul>
 8011654:	a320      	add	r3, pc, #128	; (adr r3, 80116d8 <__ieee754_acos+0x2d8>)
 8011656:	e9d3 2300 	ldrd	r2, r3, [r3]
 801165a:	f7ee fdd5 	bl	8000208 <__aeabi_dsub>
 801165e:	4632      	mov	r2, r6
 8011660:	463b      	mov	r3, r7
 8011662:	f7ee fdd3 	bl	800020c <__adddf3>
 8011666:	4602      	mov	r2, r0
 8011668:	460b      	mov	r3, r1
 801166a:	f7ee fdcf 	bl	800020c <__adddf3>
 801166e:	4602      	mov	r2, r0
 8011670:	460b      	mov	r3, r1
 8011672:	a103      	add	r1, pc, #12	; (adr r1, 8011680 <__ieee754_acos+0x280>)
 8011674:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011678:	e76f      	b.n	801155a <__ieee754_acos+0x15a>
 801167a:	bf00      	nop
 801167c:	f3af 8000 	nop.w
 8011680:	54442d18 	.word	0x54442d18
 8011684:	400921fb 	.word	0x400921fb
 8011688:	0dfdf709 	.word	0x0dfdf709
 801168c:	3f023de1 	.word	0x3f023de1
 8011690:	7501b288 	.word	0x7501b288
 8011694:	3f49efe0 	.word	0x3f49efe0
 8011698:	b5688f3b 	.word	0xb5688f3b
 801169c:	3fa48228 	.word	0x3fa48228
 80116a0:	0e884455 	.word	0x0e884455
 80116a4:	3fc9c155 	.word	0x3fc9c155
 80116a8:	03eb6f7d 	.word	0x03eb6f7d
 80116ac:	3fd4d612 	.word	0x3fd4d612
 80116b0:	55555555 	.word	0x55555555
 80116b4:	3fc55555 	.word	0x3fc55555
 80116b8:	b12e9282 	.word	0xb12e9282
 80116bc:	3fb3b8c5 	.word	0x3fb3b8c5
 80116c0:	1b8d0159 	.word	0x1b8d0159
 80116c4:	3fe6066c 	.word	0x3fe6066c
 80116c8:	9c598ac8 	.word	0x9c598ac8
 80116cc:	40002ae5 	.word	0x40002ae5
 80116d0:	1c8a2d4b 	.word	0x1c8a2d4b
 80116d4:	40033a27 	.word	0x40033a27
 80116d8:	33145c07 	.word	0x33145c07
 80116dc:	3c91a626 	.word	0x3c91a626
 80116e0:	54442d18 	.word	0x54442d18
 80116e4:	3ff921fb 	.word	0x3ff921fb
 80116e8:	3fefffff 	.word	0x3fefffff
 80116ec:	3fdfffff 	.word	0x3fdfffff
 80116f0:	3c600000 	.word	0x3c600000
 80116f4:	3ff00000 	.word	0x3ff00000
 80116f8:	3fe00000 	.word	0x3fe00000
 80116fc:	ee10 2a10 	vmov	r2, s0
 8011700:	462b      	mov	r3, r5
 8011702:	2000      	movs	r0, #0
 8011704:	496a      	ldr	r1, [pc, #424]	; (80118b0 <__ieee754_acos+0x4b0>)
 8011706:	f7ee fd7f 	bl	8000208 <__aeabi_dsub>
 801170a:	2200      	movs	r2, #0
 801170c:	4b69      	ldr	r3, [pc, #420]	; (80118b4 <__ieee754_acos+0x4b4>)
 801170e:	f7ee ff2f 	bl	8000570 <__aeabi_dmul>
 8011712:	4604      	mov	r4, r0
 8011714:	460d      	mov	r5, r1
 8011716:	ec45 4b10 	vmov	d0, r4, r5
 801171a:	f000 fabf 	bl	8011c9c <__ieee754_sqrt>
 801171e:	a34e      	add	r3, pc, #312	; (adr r3, 8011858 <__ieee754_acos+0x458>)
 8011720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011724:	4620      	mov	r0, r4
 8011726:	4629      	mov	r1, r5
 8011728:	ec59 8b10 	vmov	r8, r9, d0
 801172c:	f7ee ff20 	bl	8000570 <__aeabi_dmul>
 8011730:	a34b      	add	r3, pc, #300	; (adr r3, 8011860 <__ieee754_acos+0x460>)
 8011732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011736:	f7ee fd69 	bl	800020c <__adddf3>
 801173a:	4622      	mov	r2, r4
 801173c:	462b      	mov	r3, r5
 801173e:	f7ee ff17 	bl	8000570 <__aeabi_dmul>
 8011742:	a349      	add	r3, pc, #292	; (adr r3, 8011868 <__ieee754_acos+0x468>)
 8011744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011748:	f7ee fd5e 	bl	8000208 <__aeabi_dsub>
 801174c:	4622      	mov	r2, r4
 801174e:	462b      	mov	r3, r5
 8011750:	f7ee ff0e 	bl	8000570 <__aeabi_dmul>
 8011754:	a346      	add	r3, pc, #280	; (adr r3, 8011870 <__ieee754_acos+0x470>)
 8011756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801175a:	f7ee fd57 	bl	800020c <__adddf3>
 801175e:	4622      	mov	r2, r4
 8011760:	462b      	mov	r3, r5
 8011762:	f7ee ff05 	bl	8000570 <__aeabi_dmul>
 8011766:	a344      	add	r3, pc, #272	; (adr r3, 8011878 <__ieee754_acos+0x478>)
 8011768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801176c:	f7ee fd4c 	bl	8000208 <__aeabi_dsub>
 8011770:	4622      	mov	r2, r4
 8011772:	462b      	mov	r3, r5
 8011774:	f7ee fefc 	bl	8000570 <__aeabi_dmul>
 8011778:	a341      	add	r3, pc, #260	; (adr r3, 8011880 <__ieee754_acos+0x480>)
 801177a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801177e:	f7ee fd45 	bl	800020c <__adddf3>
 8011782:	4622      	mov	r2, r4
 8011784:	462b      	mov	r3, r5
 8011786:	f7ee fef3 	bl	8000570 <__aeabi_dmul>
 801178a:	a33f      	add	r3, pc, #252	; (adr r3, 8011888 <__ieee754_acos+0x488>)
 801178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011790:	4682      	mov	sl, r0
 8011792:	468b      	mov	fp, r1
 8011794:	4620      	mov	r0, r4
 8011796:	4629      	mov	r1, r5
 8011798:	f7ee feea 	bl	8000570 <__aeabi_dmul>
 801179c:	a33c      	add	r3, pc, #240	; (adr r3, 8011890 <__ieee754_acos+0x490>)
 801179e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117a2:	f7ee fd31 	bl	8000208 <__aeabi_dsub>
 80117a6:	4622      	mov	r2, r4
 80117a8:	462b      	mov	r3, r5
 80117aa:	f7ee fee1 	bl	8000570 <__aeabi_dmul>
 80117ae:	a33a      	add	r3, pc, #232	; (adr r3, 8011898 <__ieee754_acos+0x498>)
 80117b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117b4:	f7ee fd2a 	bl	800020c <__adddf3>
 80117b8:	4622      	mov	r2, r4
 80117ba:	462b      	mov	r3, r5
 80117bc:	f7ee fed8 	bl	8000570 <__aeabi_dmul>
 80117c0:	a337      	add	r3, pc, #220	; (adr r3, 80118a0 <__ieee754_acos+0x4a0>)
 80117c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117c6:	f7ee fd1f 	bl	8000208 <__aeabi_dsub>
 80117ca:	4622      	mov	r2, r4
 80117cc:	462b      	mov	r3, r5
 80117ce:	f7ee fecf 	bl	8000570 <__aeabi_dmul>
 80117d2:	2200      	movs	r2, #0
 80117d4:	4b36      	ldr	r3, [pc, #216]	; (80118b0 <__ieee754_acos+0x4b0>)
 80117d6:	f7ee fd19 	bl	800020c <__adddf3>
 80117da:	4602      	mov	r2, r0
 80117dc:	460b      	mov	r3, r1
 80117de:	4650      	mov	r0, sl
 80117e0:	4659      	mov	r1, fp
 80117e2:	f7ee ffef 	bl	80007c4 <__aeabi_ddiv>
 80117e6:	4642      	mov	r2, r8
 80117e8:	464b      	mov	r3, r9
 80117ea:	f7ee fec1 	bl	8000570 <__aeabi_dmul>
 80117ee:	2600      	movs	r6, #0
 80117f0:	4682      	mov	sl, r0
 80117f2:	468b      	mov	fp, r1
 80117f4:	4632      	mov	r2, r6
 80117f6:	464b      	mov	r3, r9
 80117f8:	4630      	mov	r0, r6
 80117fa:	4649      	mov	r1, r9
 80117fc:	f7ee feb8 	bl	8000570 <__aeabi_dmul>
 8011800:	4602      	mov	r2, r0
 8011802:	460b      	mov	r3, r1
 8011804:	4620      	mov	r0, r4
 8011806:	4629      	mov	r1, r5
 8011808:	f7ee fcfe 	bl	8000208 <__aeabi_dsub>
 801180c:	4632      	mov	r2, r6
 801180e:	4604      	mov	r4, r0
 8011810:	460d      	mov	r5, r1
 8011812:	464b      	mov	r3, r9
 8011814:	4640      	mov	r0, r8
 8011816:	4649      	mov	r1, r9
 8011818:	f7ee fcf8 	bl	800020c <__adddf3>
 801181c:	4602      	mov	r2, r0
 801181e:	460b      	mov	r3, r1
 8011820:	4620      	mov	r0, r4
 8011822:	4629      	mov	r1, r5
 8011824:	f7ee ffce 	bl	80007c4 <__aeabi_ddiv>
 8011828:	4602      	mov	r2, r0
 801182a:	460b      	mov	r3, r1
 801182c:	4650      	mov	r0, sl
 801182e:	4659      	mov	r1, fp
 8011830:	f7ee fcec 	bl	800020c <__adddf3>
 8011834:	4632      	mov	r2, r6
 8011836:	464b      	mov	r3, r9
 8011838:	f7ee fce8 	bl	800020c <__adddf3>
 801183c:	4602      	mov	r2, r0
 801183e:	460b      	mov	r3, r1
 8011840:	f7ee fce4 	bl	800020c <__adddf3>
 8011844:	e5f1      	b.n	801142a <__ieee754_acos+0x2a>
 8011846:	2000      	movs	r0, #0
 8011848:	2100      	movs	r1, #0
 801184a:	e5ee      	b.n	801142a <__ieee754_acos+0x2a>
 801184c:	a116      	add	r1, pc, #88	; (adr r1, 80118a8 <__ieee754_acos+0x4a8>)
 801184e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011852:	e5ea      	b.n	801142a <__ieee754_acos+0x2a>
 8011854:	f3af 8000 	nop.w
 8011858:	0dfdf709 	.word	0x0dfdf709
 801185c:	3f023de1 	.word	0x3f023de1
 8011860:	7501b288 	.word	0x7501b288
 8011864:	3f49efe0 	.word	0x3f49efe0
 8011868:	b5688f3b 	.word	0xb5688f3b
 801186c:	3fa48228 	.word	0x3fa48228
 8011870:	0e884455 	.word	0x0e884455
 8011874:	3fc9c155 	.word	0x3fc9c155
 8011878:	03eb6f7d 	.word	0x03eb6f7d
 801187c:	3fd4d612 	.word	0x3fd4d612
 8011880:	55555555 	.word	0x55555555
 8011884:	3fc55555 	.word	0x3fc55555
 8011888:	b12e9282 	.word	0xb12e9282
 801188c:	3fb3b8c5 	.word	0x3fb3b8c5
 8011890:	1b8d0159 	.word	0x1b8d0159
 8011894:	3fe6066c 	.word	0x3fe6066c
 8011898:	9c598ac8 	.word	0x9c598ac8
 801189c:	40002ae5 	.word	0x40002ae5
 80118a0:	1c8a2d4b 	.word	0x1c8a2d4b
 80118a4:	40033a27 	.word	0x40033a27
 80118a8:	54442d18 	.word	0x54442d18
 80118ac:	3ff921fb 	.word	0x3ff921fb
 80118b0:	3ff00000 	.word	0x3ff00000
 80118b4:	3fe00000 	.word	0x3fe00000

080118b8 <__ieee754_rem_pio2>:
 80118b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118bc:	ec57 6b10 	vmov	r6, r7, d0
 80118c0:	4bc3      	ldr	r3, [pc, #780]	; (8011bd0 <__ieee754_rem_pio2+0x318>)
 80118c2:	b08d      	sub	sp, #52	; 0x34
 80118c4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80118c8:	4598      	cmp	r8, r3
 80118ca:	4604      	mov	r4, r0
 80118cc:	9704      	str	r7, [sp, #16]
 80118ce:	dc07      	bgt.n	80118e0 <__ieee754_rem_pio2+0x28>
 80118d0:	2200      	movs	r2, #0
 80118d2:	2300      	movs	r3, #0
 80118d4:	ed84 0b00 	vstr	d0, [r4]
 80118d8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80118dc:	2500      	movs	r5, #0
 80118de:	e027      	b.n	8011930 <__ieee754_rem_pio2+0x78>
 80118e0:	4bbc      	ldr	r3, [pc, #752]	; (8011bd4 <__ieee754_rem_pio2+0x31c>)
 80118e2:	4598      	cmp	r8, r3
 80118e4:	dc75      	bgt.n	80119d2 <__ieee754_rem_pio2+0x11a>
 80118e6:	9b04      	ldr	r3, [sp, #16]
 80118e8:	4dbb      	ldr	r5, [pc, #748]	; (8011bd8 <__ieee754_rem_pio2+0x320>)
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	ee10 0a10 	vmov	r0, s0
 80118f0:	a3a9      	add	r3, pc, #676	; (adr r3, 8011b98 <__ieee754_rem_pio2+0x2e0>)
 80118f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118f6:	4639      	mov	r1, r7
 80118f8:	dd36      	ble.n	8011968 <__ieee754_rem_pio2+0xb0>
 80118fa:	f7ee fc85 	bl	8000208 <__aeabi_dsub>
 80118fe:	45a8      	cmp	r8, r5
 8011900:	4606      	mov	r6, r0
 8011902:	460f      	mov	r7, r1
 8011904:	d018      	beq.n	8011938 <__ieee754_rem_pio2+0x80>
 8011906:	a3a6      	add	r3, pc, #664	; (adr r3, 8011ba0 <__ieee754_rem_pio2+0x2e8>)
 8011908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801190c:	f7ee fc7c 	bl	8000208 <__aeabi_dsub>
 8011910:	4602      	mov	r2, r0
 8011912:	460b      	mov	r3, r1
 8011914:	e9c4 2300 	strd	r2, r3, [r4]
 8011918:	4630      	mov	r0, r6
 801191a:	4639      	mov	r1, r7
 801191c:	f7ee fc74 	bl	8000208 <__aeabi_dsub>
 8011920:	a39f      	add	r3, pc, #636	; (adr r3, 8011ba0 <__ieee754_rem_pio2+0x2e8>)
 8011922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011926:	f7ee fc6f 	bl	8000208 <__aeabi_dsub>
 801192a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801192e:	2501      	movs	r5, #1
 8011930:	4628      	mov	r0, r5
 8011932:	b00d      	add	sp, #52	; 0x34
 8011934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011938:	a39b      	add	r3, pc, #620	; (adr r3, 8011ba8 <__ieee754_rem_pio2+0x2f0>)
 801193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801193e:	f7ee fc63 	bl	8000208 <__aeabi_dsub>
 8011942:	a39b      	add	r3, pc, #620	; (adr r3, 8011bb0 <__ieee754_rem_pio2+0x2f8>)
 8011944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011948:	4606      	mov	r6, r0
 801194a:	460f      	mov	r7, r1
 801194c:	f7ee fc5c 	bl	8000208 <__aeabi_dsub>
 8011950:	4602      	mov	r2, r0
 8011952:	460b      	mov	r3, r1
 8011954:	e9c4 2300 	strd	r2, r3, [r4]
 8011958:	4630      	mov	r0, r6
 801195a:	4639      	mov	r1, r7
 801195c:	f7ee fc54 	bl	8000208 <__aeabi_dsub>
 8011960:	a393      	add	r3, pc, #588	; (adr r3, 8011bb0 <__ieee754_rem_pio2+0x2f8>)
 8011962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011966:	e7de      	b.n	8011926 <__ieee754_rem_pio2+0x6e>
 8011968:	f7ee fc50 	bl	800020c <__adddf3>
 801196c:	45a8      	cmp	r8, r5
 801196e:	4606      	mov	r6, r0
 8011970:	460f      	mov	r7, r1
 8011972:	d016      	beq.n	80119a2 <__ieee754_rem_pio2+0xea>
 8011974:	a38a      	add	r3, pc, #552	; (adr r3, 8011ba0 <__ieee754_rem_pio2+0x2e8>)
 8011976:	e9d3 2300 	ldrd	r2, r3, [r3]
 801197a:	f7ee fc47 	bl	800020c <__adddf3>
 801197e:	4602      	mov	r2, r0
 8011980:	460b      	mov	r3, r1
 8011982:	e9c4 2300 	strd	r2, r3, [r4]
 8011986:	4630      	mov	r0, r6
 8011988:	4639      	mov	r1, r7
 801198a:	f7ee fc3d 	bl	8000208 <__aeabi_dsub>
 801198e:	a384      	add	r3, pc, #528	; (adr r3, 8011ba0 <__ieee754_rem_pio2+0x2e8>)
 8011990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011994:	f7ee fc3a 	bl	800020c <__adddf3>
 8011998:	f04f 35ff 	mov.w	r5, #4294967295
 801199c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80119a0:	e7c6      	b.n	8011930 <__ieee754_rem_pio2+0x78>
 80119a2:	a381      	add	r3, pc, #516	; (adr r3, 8011ba8 <__ieee754_rem_pio2+0x2f0>)
 80119a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119a8:	f7ee fc30 	bl	800020c <__adddf3>
 80119ac:	a380      	add	r3, pc, #512	; (adr r3, 8011bb0 <__ieee754_rem_pio2+0x2f8>)
 80119ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119b2:	4606      	mov	r6, r0
 80119b4:	460f      	mov	r7, r1
 80119b6:	f7ee fc29 	bl	800020c <__adddf3>
 80119ba:	4602      	mov	r2, r0
 80119bc:	460b      	mov	r3, r1
 80119be:	e9c4 2300 	strd	r2, r3, [r4]
 80119c2:	4630      	mov	r0, r6
 80119c4:	4639      	mov	r1, r7
 80119c6:	f7ee fc1f 	bl	8000208 <__aeabi_dsub>
 80119ca:	a379      	add	r3, pc, #484	; (adr r3, 8011bb0 <__ieee754_rem_pio2+0x2f8>)
 80119cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119d0:	e7e0      	b.n	8011994 <__ieee754_rem_pio2+0xdc>
 80119d2:	4b82      	ldr	r3, [pc, #520]	; (8011bdc <__ieee754_rem_pio2+0x324>)
 80119d4:	4598      	cmp	r8, r3
 80119d6:	f300 80d0 	bgt.w	8011b7a <__ieee754_rem_pio2+0x2c2>
 80119da:	f000 ffd7 	bl	801298c <fabs>
 80119de:	ec57 6b10 	vmov	r6, r7, d0
 80119e2:	ee10 0a10 	vmov	r0, s0
 80119e6:	a374      	add	r3, pc, #464	; (adr r3, 8011bb8 <__ieee754_rem_pio2+0x300>)
 80119e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ec:	4639      	mov	r1, r7
 80119ee:	f7ee fdbf 	bl	8000570 <__aeabi_dmul>
 80119f2:	2200      	movs	r2, #0
 80119f4:	4b7a      	ldr	r3, [pc, #488]	; (8011be0 <__ieee754_rem_pio2+0x328>)
 80119f6:	f7ee fc09 	bl	800020c <__adddf3>
 80119fa:	f7ef f869 	bl	8000ad0 <__aeabi_d2iz>
 80119fe:	4605      	mov	r5, r0
 8011a00:	f7ee fd50 	bl	80004a4 <__aeabi_i2d>
 8011a04:	a364      	add	r3, pc, #400	; (adr r3, 8011b98 <__ieee754_rem_pio2+0x2e0>)
 8011a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011a0e:	f7ee fdaf 	bl	8000570 <__aeabi_dmul>
 8011a12:	4602      	mov	r2, r0
 8011a14:	460b      	mov	r3, r1
 8011a16:	4630      	mov	r0, r6
 8011a18:	4639      	mov	r1, r7
 8011a1a:	f7ee fbf5 	bl	8000208 <__aeabi_dsub>
 8011a1e:	a360      	add	r3, pc, #384	; (adr r3, 8011ba0 <__ieee754_rem_pio2+0x2e8>)
 8011a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a24:	4682      	mov	sl, r0
 8011a26:	468b      	mov	fp, r1
 8011a28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a2c:	f7ee fda0 	bl	8000570 <__aeabi_dmul>
 8011a30:	2d1f      	cmp	r5, #31
 8011a32:	4606      	mov	r6, r0
 8011a34:	460f      	mov	r7, r1
 8011a36:	dc2a      	bgt.n	8011a8e <__ieee754_rem_pio2+0x1d6>
 8011a38:	1e6a      	subs	r2, r5, #1
 8011a3a:	4b6a      	ldr	r3, [pc, #424]	; (8011be4 <__ieee754_rem_pio2+0x32c>)
 8011a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a40:	4598      	cmp	r8, r3
 8011a42:	d024      	beq.n	8011a8e <__ieee754_rem_pio2+0x1d6>
 8011a44:	4632      	mov	r2, r6
 8011a46:	463b      	mov	r3, r7
 8011a48:	4650      	mov	r0, sl
 8011a4a:	4659      	mov	r1, fp
 8011a4c:	f7ee fbdc 	bl	8000208 <__aeabi_dsub>
 8011a50:	e9c4 0100 	strd	r0, r1, [r4]
 8011a54:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011a58:	4650      	mov	r0, sl
 8011a5a:	4642      	mov	r2, r8
 8011a5c:	464b      	mov	r3, r9
 8011a5e:	4659      	mov	r1, fp
 8011a60:	f7ee fbd2 	bl	8000208 <__aeabi_dsub>
 8011a64:	463b      	mov	r3, r7
 8011a66:	4632      	mov	r2, r6
 8011a68:	f7ee fbce 	bl	8000208 <__aeabi_dsub>
 8011a6c:	9b04      	ldr	r3, [sp, #16]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011a74:	f6bf af5c 	bge.w	8011930 <__ieee754_rem_pio2+0x78>
 8011a78:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011a7c:	6063      	str	r3, [r4, #4]
 8011a7e:	f8c4 8000 	str.w	r8, [r4]
 8011a82:	60a0      	str	r0, [r4, #8]
 8011a84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011a88:	60e3      	str	r3, [r4, #12]
 8011a8a:	426d      	negs	r5, r5
 8011a8c:	e750      	b.n	8011930 <__ieee754_rem_pio2+0x78>
 8011a8e:	4632      	mov	r2, r6
 8011a90:	463b      	mov	r3, r7
 8011a92:	4650      	mov	r0, sl
 8011a94:	4659      	mov	r1, fp
 8011a96:	f7ee fbb7 	bl	8000208 <__aeabi_dsub>
 8011a9a:	ea4f 5228 	mov.w	r2, r8, asr #20
 8011a9e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011aa2:	1ad3      	subs	r3, r2, r3
 8011aa4:	2b10      	cmp	r3, #16
 8011aa6:	e9c4 0100 	strd	r0, r1, [r4]
 8011aaa:	9205      	str	r2, [sp, #20]
 8011aac:	ddd2      	ble.n	8011a54 <__ieee754_rem_pio2+0x19c>
 8011aae:	a33e      	add	r3, pc, #248	; (adr r3, 8011ba8 <__ieee754_rem_pio2+0x2f0>)
 8011ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ab4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ab8:	f7ee fd5a 	bl	8000570 <__aeabi_dmul>
 8011abc:	4606      	mov	r6, r0
 8011abe:	460f      	mov	r7, r1
 8011ac0:	4602      	mov	r2, r0
 8011ac2:	460b      	mov	r3, r1
 8011ac4:	4650      	mov	r0, sl
 8011ac6:	4659      	mov	r1, fp
 8011ac8:	f7ee fb9e 	bl	8000208 <__aeabi_dsub>
 8011acc:	4602      	mov	r2, r0
 8011ace:	460b      	mov	r3, r1
 8011ad0:	4680      	mov	r8, r0
 8011ad2:	4689      	mov	r9, r1
 8011ad4:	4650      	mov	r0, sl
 8011ad6:	4659      	mov	r1, fp
 8011ad8:	f7ee fb96 	bl	8000208 <__aeabi_dsub>
 8011adc:	4632      	mov	r2, r6
 8011ade:	463b      	mov	r3, r7
 8011ae0:	f7ee fb92 	bl	8000208 <__aeabi_dsub>
 8011ae4:	a332      	add	r3, pc, #200	; (adr r3, 8011bb0 <__ieee754_rem_pio2+0x2f8>)
 8011ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aea:	4606      	mov	r6, r0
 8011aec:	460f      	mov	r7, r1
 8011aee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011af2:	f7ee fd3d 	bl	8000570 <__aeabi_dmul>
 8011af6:	4632      	mov	r2, r6
 8011af8:	463b      	mov	r3, r7
 8011afa:	f7ee fb85 	bl	8000208 <__aeabi_dsub>
 8011afe:	4602      	mov	r2, r0
 8011b00:	460b      	mov	r3, r1
 8011b02:	4606      	mov	r6, r0
 8011b04:	460f      	mov	r7, r1
 8011b06:	4640      	mov	r0, r8
 8011b08:	4649      	mov	r1, r9
 8011b0a:	f7ee fb7d 	bl	8000208 <__aeabi_dsub>
 8011b0e:	9a05      	ldr	r2, [sp, #20]
 8011b10:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011b14:	1ad3      	subs	r3, r2, r3
 8011b16:	2b31      	cmp	r3, #49	; 0x31
 8011b18:	e9c4 0100 	strd	r0, r1, [r4]
 8011b1c:	dd2a      	ble.n	8011b74 <__ieee754_rem_pio2+0x2bc>
 8011b1e:	a328      	add	r3, pc, #160	; (adr r3, 8011bc0 <__ieee754_rem_pio2+0x308>)
 8011b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011b28:	f7ee fd22 	bl	8000570 <__aeabi_dmul>
 8011b2c:	4606      	mov	r6, r0
 8011b2e:	460f      	mov	r7, r1
 8011b30:	4602      	mov	r2, r0
 8011b32:	460b      	mov	r3, r1
 8011b34:	4640      	mov	r0, r8
 8011b36:	4649      	mov	r1, r9
 8011b38:	f7ee fb66 	bl	8000208 <__aeabi_dsub>
 8011b3c:	4602      	mov	r2, r0
 8011b3e:	460b      	mov	r3, r1
 8011b40:	4682      	mov	sl, r0
 8011b42:	468b      	mov	fp, r1
 8011b44:	4640      	mov	r0, r8
 8011b46:	4649      	mov	r1, r9
 8011b48:	f7ee fb5e 	bl	8000208 <__aeabi_dsub>
 8011b4c:	4632      	mov	r2, r6
 8011b4e:	463b      	mov	r3, r7
 8011b50:	f7ee fb5a 	bl	8000208 <__aeabi_dsub>
 8011b54:	a31c      	add	r3, pc, #112	; (adr r3, 8011bc8 <__ieee754_rem_pio2+0x310>)
 8011b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b5a:	4606      	mov	r6, r0
 8011b5c:	460f      	mov	r7, r1
 8011b5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011b62:	f7ee fd05 	bl	8000570 <__aeabi_dmul>
 8011b66:	4632      	mov	r2, r6
 8011b68:	463b      	mov	r3, r7
 8011b6a:	f7ee fb4d 	bl	8000208 <__aeabi_dsub>
 8011b6e:	4606      	mov	r6, r0
 8011b70:	460f      	mov	r7, r1
 8011b72:	e767      	b.n	8011a44 <__ieee754_rem_pio2+0x18c>
 8011b74:	46c2      	mov	sl, r8
 8011b76:	46cb      	mov	fp, r9
 8011b78:	e76c      	b.n	8011a54 <__ieee754_rem_pio2+0x19c>
 8011b7a:	4b1b      	ldr	r3, [pc, #108]	; (8011be8 <__ieee754_rem_pio2+0x330>)
 8011b7c:	4598      	cmp	r8, r3
 8011b7e:	dd35      	ble.n	8011bec <__ieee754_rem_pio2+0x334>
 8011b80:	ee10 2a10 	vmov	r2, s0
 8011b84:	463b      	mov	r3, r7
 8011b86:	4630      	mov	r0, r6
 8011b88:	4639      	mov	r1, r7
 8011b8a:	f7ee fb3d 	bl	8000208 <__aeabi_dsub>
 8011b8e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011b92:	e9c4 0100 	strd	r0, r1, [r4]
 8011b96:	e6a1      	b.n	80118dc <__ieee754_rem_pio2+0x24>
 8011b98:	54400000 	.word	0x54400000
 8011b9c:	3ff921fb 	.word	0x3ff921fb
 8011ba0:	1a626331 	.word	0x1a626331
 8011ba4:	3dd0b461 	.word	0x3dd0b461
 8011ba8:	1a600000 	.word	0x1a600000
 8011bac:	3dd0b461 	.word	0x3dd0b461
 8011bb0:	2e037073 	.word	0x2e037073
 8011bb4:	3ba3198a 	.word	0x3ba3198a
 8011bb8:	6dc9c883 	.word	0x6dc9c883
 8011bbc:	3fe45f30 	.word	0x3fe45f30
 8011bc0:	2e000000 	.word	0x2e000000
 8011bc4:	3ba3198a 	.word	0x3ba3198a
 8011bc8:	252049c1 	.word	0x252049c1
 8011bcc:	397b839a 	.word	0x397b839a
 8011bd0:	3fe921fb 	.word	0x3fe921fb
 8011bd4:	4002d97b 	.word	0x4002d97b
 8011bd8:	3ff921fb 	.word	0x3ff921fb
 8011bdc:	413921fb 	.word	0x413921fb
 8011be0:	3fe00000 	.word	0x3fe00000
 8011be4:	080138ec 	.word	0x080138ec
 8011be8:	7fefffff 	.word	0x7fefffff
 8011bec:	ea4f 5528 	mov.w	r5, r8, asr #20
 8011bf0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8011bf4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8011bf8:	4630      	mov	r0, r6
 8011bfa:	460f      	mov	r7, r1
 8011bfc:	f7ee ff68 	bl	8000ad0 <__aeabi_d2iz>
 8011c00:	f7ee fc50 	bl	80004a4 <__aeabi_i2d>
 8011c04:	4602      	mov	r2, r0
 8011c06:	460b      	mov	r3, r1
 8011c08:	4630      	mov	r0, r6
 8011c0a:	4639      	mov	r1, r7
 8011c0c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011c10:	f7ee fafa 	bl	8000208 <__aeabi_dsub>
 8011c14:	2200      	movs	r2, #0
 8011c16:	4b1f      	ldr	r3, [pc, #124]	; (8011c94 <__ieee754_rem_pio2+0x3dc>)
 8011c18:	f7ee fcaa 	bl	8000570 <__aeabi_dmul>
 8011c1c:	460f      	mov	r7, r1
 8011c1e:	4606      	mov	r6, r0
 8011c20:	f7ee ff56 	bl	8000ad0 <__aeabi_d2iz>
 8011c24:	f7ee fc3e 	bl	80004a4 <__aeabi_i2d>
 8011c28:	4602      	mov	r2, r0
 8011c2a:	460b      	mov	r3, r1
 8011c2c:	4630      	mov	r0, r6
 8011c2e:	4639      	mov	r1, r7
 8011c30:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011c34:	f7ee fae8 	bl	8000208 <__aeabi_dsub>
 8011c38:	2200      	movs	r2, #0
 8011c3a:	4b16      	ldr	r3, [pc, #88]	; (8011c94 <__ieee754_rem_pio2+0x3dc>)
 8011c3c:	f7ee fc98 	bl	8000570 <__aeabi_dmul>
 8011c40:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011c44:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8011c48:	f04f 0803 	mov.w	r8, #3
 8011c4c:	2600      	movs	r6, #0
 8011c4e:	2700      	movs	r7, #0
 8011c50:	4632      	mov	r2, r6
 8011c52:	463b      	mov	r3, r7
 8011c54:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8011c58:	f108 3aff 	add.w	sl, r8, #4294967295
 8011c5c:	f7ee fef0 	bl	8000a40 <__aeabi_dcmpeq>
 8011c60:	b9b0      	cbnz	r0, 8011c90 <__ieee754_rem_pio2+0x3d8>
 8011c62:	4b0d      	ldr	r3, [pc, #52]	; (8011c98 <__ieee754_rem_pio2+0x3e0>)
 8011c64:	9301      	str	r3, [sp, #4]
 8011c66:	2302      	movs	r3, #2
 8011c68:	9300      	str	r3, [sp, #0]
 8011c6a:	462a      	mov	r2, r5
 8011c6c:	4643      	mov	r3, r8
 8011c6e:	4621      	mov	r1, r4
 8011c70:	a806      	add	r0, sp, #24
 8011c72:	f000 fa81 	bl	8012178 <__kernel_rem_pio2>
 8011c76:	9b04      	ldr	r3, [sp, #16]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	4605      	mov	r5, r0
 8011c7c:	f6bf ae58 	bge.w	8011930 <__ieee754_rem_pio2+0x78>
 8011c80:	6863      	ldr	r3, [r4, #4]
 8011c82:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011c86:	6063      	str	r3, [r4, #4]
 8011c88:	68e3      	ldr	r3, [r4, #12]
 8011c8a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011c8e:	e6fb      	b.n	8011a88 <__ieee754_rem_pio2+0x1d0>
 8011c90:	46d0      	mov	r8, sl
 8011c92:	e7dd      	b.n	8011c50 <__ieee754_rem_pio2+0x398>
 8011c94:	41700000 	.word	0x41700000
 8011c98:	0801396c 	.word	0x0801396c

08011c9c <__ieee754_sqrt>:
 8011c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ca0:	ec55 4b10 	vmov	r4, r5, d0
 8011ca4:	4e54      	ldr	r6, [pc, #336]	; (8011df8 <__ieee754_sqrt+0x15c>)
 8011ca6:	43ae      	bics	r6, r5
 8011ca8:	ee10 0a10 	vmov	r0, s0
 8011cac:	462b      	mov	r3, r5
 8011cae:	462a      	mov	r2, r5
 8011cb0:	4621      	mov	r1, r4
 8011cb2:	d113      	bne.n	8011cdc <__ieee754_sqrt+0x40>
 8011cb4:	ee10 2a10 	vmov	r2, s0
 8011cb8:	462b      	mov	r3, r5
 8011cba:	ee10 0a10 	vmov	r0, s0
 8011cbe:	4629      	mov	r1, r5
 8011cc0:	f7ee fc56 	bl	8000570 <__aeabi_dmul>
 8011cc4:	4602      	mov	r2, r0
 8011cc6:	460b      	mov	r3, r1
 8011cc8:	4620      	mov	r0, r4
 8011cca:	4629      	mov	r1, r5
 8011ccc:	f7ee fa9e 	bl	800020c <__adddf3>
 8011cd0:	4604      	mov	r4, r0
 8011cd2:	460d      	mov	r5, r1
 8011cd4:	ec45 4b10 	vmov	d0, r4, r5
 8011cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cdc:	2d00      	cmp	r5, #0
 8011cde:	dc10      	bgt.n	8011d02 <__ieee754_sqrt+0x66>
 8011ce0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011ce4:	4330      	orrs	r0, r6
 8011ce6:	d0f5      	beq.n	8011cd4 <__ieee754_sqrt+0x38>
 8011ce8:	b15d      	cbz	r5, 8011d02 <__ieee754_sqrt+0x66>
 8011cea:	ee10 2a10 	vmov	r2, s0
 8011cee:	462b      	mov	r3, r5
 8011cf0:	4620      	mov	r0, r4
 8011cf2:	4629      	mov	r1, r5
 8011cf4:	f7ee fa88 	bl	8000208 <__aeabi_dsub>
 8011cf8:	4602      	mov	r2, r0
 8011cfa:	460b      	mov	r3, r1
 8011cfc:	f7ee fd62 	bl	80007c4 <__aeabi_ddiv>
 8011d00:	e7e6      	b.n	8011cd0 <__ieee754_sqrt+0x34>
 8011d02:	151b      	asrs	r3, r3, #20
 8011d04:	d10c      	bne.n	8011d20 <__ieee754_sqrt+0x84>
 8011d06:	2a00      	cmp	r2, #0
 8011d08:	d06d      	beq.n	8011de6 <__ieee754_sqrt+0x14a>
 8011d0a:	2000      	movs	r0, #0
 8011d0c:	02d6      	lsls	r6, r2, #11
 8011d0e:	d56e      	bpl.n	8011dee <__ieee754_sqrt+0x152>
 8011d10:	1e44      	subs	r4, r0, #1
 8011d12:	1b1b      	subs	r3, r3, r4
 8011d14:	f1c0 0420 	rsb	r4, r0, #32
 8011d18:	fa21 f404 	lsr.w	r4, r1, r4
 8011d1c:	4322      	orrs	r2, r4
 8011d1e:	4081      	lsls	r1, r0
 8011d20:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011d24:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8011d28:	07dd      	lsls	r5, r3, #31
 8011d2a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8011d2e:	bf42      	ittt	mi
 8011d30:	0052      	lslmi	r2, r2, #1
 8011d32:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8011d36:	0049      	lslmi	r1, r1, #1
 8011d38:	1058      	asrs	r0, r3, #1
 8011d3a:	2500      	movs	r5, #0
 8011d3c:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8011d40:	441a      	add	r2, r3
 8011d42:	0049      	lsls	r1, r1, #1
 8011d44:	2316      	movs	r3, #22
 8011d46:	462c      	mov	r4, r5
 8011d48:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8011d4c:	19a7      	adds	r7, r4, r6
 8011d4e:	4297      	cmp	r7, r2
 8011d50:	bfde      	ittt	le
 8011d52:	1bd2      	suble	r2, r2, r7
 8011d54:	19bc      	addle	r4, r7, r6
 8011d56:	19ad      	addle	r5, r5, r6
 8011d58:	0052      	lsls	r2, r2, #1
 8011d5a:	3b01      	subs	r3, #1
 8011d5c:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8011d60:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011d64:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011d68:	d1f0      	bne.n	8011d4c <__ieee754_sqrt+0xb0>
 8011d6a:	f04f 0e20 	mov.w	lr, #32
 8011d6e:	469c      	mov	ip, r3
 8011d70:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8011d74:	42a2      	cmp	r2, r4
 8011d76:	eb06 070c 	add.w	r7, r6, ip
 8011d7a:	dc02      	bgt.n	8011d82 <__ieee754_sqrt+0xe6>
 8011d7c:	d112      	bne.n	8011da4 <__ieee754_sqrt+0x108>
 8011d7e:	428f      	cmp	r7, r1
 8011d80:	d810      	bhi.n	8011da4 <__ieee754_sqrt+0x108>
 8011d82:	2f00      	cmp	r7, #0
 8011d84:	eb07 0c06 	add.w	ip, r7, r6
 8011d88:	da34      	bge.n	8011df4 <__ieee754_sqrt+0x158>
 8011d8a:	f1bc 0f00 	cmp.w	ip, #0
 8011d8e:	db31      	blt.n	8011df4 <__ieee754_sqrt+0x158>
 8011d90:	f104 0801 	add.w	r8, r4, #1
 8011d94:	1b12      	subs	r2, r2, r4
 8011d96:	428f      	cmp	r7, r1
 8011d98:	bf88      	it	hi
 8011d9a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8011d9e:	1bc9      	subs	r1, r1, r7
 8011da0:	4433      	add	r3, r6
 8011da2:	4644      	mov	r4, r8
 8011da4:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8011da8:	f1be 0e01 	subs.w	lr, lr, #1
 8011dac:	443a      	add	r2, r7
 8011dae:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011db2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011db6:	d1dd      	bne.n	8011d74 <__ieee754_sqrt+0xd8>
 8011db8:	430a      	orrs	r2, r1
 8011dba:	d006      	beq.n	8011dca <__ieee754_sqrt+0x12e>
 8011dbc:	1c5c      	adds	r4, r3, #1
 8011dbe:	bf13      	iteet	ne
 8011dc0:	3301      	addne	r3, #1
 8011dc2:	3501      	addeq	r5, #1
 8011dc4:	4673      	moveq	r3, lr
 8011dc6:	f023 0301 	bicne.w	r3, r3, #1
 8011dca:	106a      	asrs	r2, r5, #1
 8011dcc:	085b      	lsrs	r3, r3, #1
 8011dce:	07e9      	lsls	r1, r5, #31
 8011dd0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011dd4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8011dd8:	bf48      	it	mi
 8011dda:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8011dde:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8011de2:	461c      	mov	r4, r3
 8011de4:	e776      	b.n	8011cd4 <__ieee754_sqrt+0x38>
 8011de6:	0aca      	lsrs	r2, r1, #11
 8011de8:	3b15      	subs	r3, #21
 8011dea:	0549      	lsls	r1, r1, #21
 8011dec:	e78b      	b.n	8011d06 <__ieee754_sqrt+0x6a>
 8011dee:	0052      	lsls	r2, r2, #1
 8011df0:	3001      	adds	r0, #1
 8011df2:	e78b      	b.n	8011d0c <__ieee754_sqrt+0x70>
 8011df4:	46a0      	mov	r8, r4
 8011df6:	e7cd      	b.n	8011d94 <__ieee754_sqrt+0xf8>
 8011df8:	7ff00000 	.word	0x7ff00000

08011dfc <__ieee754_expf>:
 8011dfc:	ee10 2a10 	vmov	r2, s0
 8011e00:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8011e04:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8011e08:	d902      	bls.n	8011e10 <__ieee754_expf+0x14>
 8011e0a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011e0e:	4770      	bx	lr
 8011e10:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8011e14:	d106      	bne.n	8011e24 <__ieee754_expf+0x28>
 8011e16:	eddf 7a51 	vldr	s15, [pc, #324]	; 8011f5c <__ieee754_expf+0x160>
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	bf18      	it	ne
 8011e1e:	eeb0 0a67 	vmovne.f32	s0, s15
 8011e22:	4770      	bx	lr
 8011e24:	484e      	ldr	r0, [pc, #312]	; (8011f60 <__ieee754_expf+0x164>)
 8011e26:	4282      	cmp	r2, r0
 8011e28:	dd04      	ble.n	8011e34 <__ieee754_expf+0x38>
 8011e2a:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8011f64 <__ieee754_expf+0x168>
 8011e2e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011e32:	4770      	bx	lr
 8011e34:	2a00      	cmp	r2, #0
 8011e36:	da03      	bge.n	8011e40 <__ieee754_expf+0x44>
 8011e38:	4a4b      	ldr	r2, [pc, #300]	; (8011f68 <__ieee754_expf+0x16c>)
 8011e3a:	4291      	cmp	r1, r2
 8011e3c:	f200 808a 	bhi.w	8011f54 <__ieee754_expf+0x158>
 8011e40:	4a4a      	ldr	r2, [pc, #296]	; (8011f6c <__ieee754_expf+0x170>)
 8011e42:	4291      	cmp	r1, r2
 8011e44:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8011e48:	d954      	bls.n	8011ef4 <__ieee754_expf+0xf8>
 8011e4a:	4a49      	ldr	r2, [pc, #292]	; (8011f70 <__ieee754_expf+0x174>)
 8011e4c:	4291      	cmp	r1, r2
 8011e4e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8011e52:	d836      	bhi.n	8011ec2 <__ieee754_expf+0xc6>
 8011e54:	4947      	ldr	r1, [pc, #284]	; (8011f74 <__ieee754_expf+0x178>)
 8011e56:	4411      	add	r1, r2
 8011e58:	ed91 7a00 	vldr	s14, [r1]
 8011e5c:	4946      	ldr	r1, [pc, #280]	; (8011f78 <__ieee754_expf+0x17c>)
 8011e5e:	440a      	add	r2, r1
 8011e60:	edd2 7a00 	vldr	s15, [r2]
 8011e64:	ee30 7a47 	vsub.f32	s14, s0, s14
 8011e68:	f1c3 0201 	rsb	r2, r3, #1
 8011e6c:	1ad2      	subs	r2, r2, r3
 8011e6e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8011e72:	ee60 6a00 	vmul.f32	s13, s0, s0
 8011e76:	eddf 5a41 	vldr	s11, [pc, #260]	; 8011f7c <__ieee754_expf+0x180>
 8011e7a:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8011f80 <__ieee754_expf+0x184>
 8011e7e:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8011e82:	eddf 5a40 	vldr	s11, [pc, #256]	; 8011f84 <__ieee754_expf+0x188>
 8011e86:	eee6 5a85 	vfma.f32	s11, s13, s10
 8011e8a:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8011f88 <__ieee754_expf+0x18c>
 8011e8e:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8011e92:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8011f8c <__ieee754_expf+0x190>
 8011e96:	eee6 5a85 	vfma.f32	s11, s13, s10
 8011e9a:	eeb0 5a40 	vmov.f32	s10, s0
 8011e9e:	eea6 5ae5 	vfms.f32	s10, s13, s11
 8011ea2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8011ea6:	eef0 6a45 	vmov.f32	s13, s10
 8011eaa:	ee20 5a05 	vmul.f32	s10, s0, s10
 8011eae:	bb92      	cbnz	r2, 8011f16 <__ieee754_expf+0x11a>
 8011eb0:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8011eb4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8011eb8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011ebc:	ee36 0a40 	vsub.f32	s0, s12, s0
 8011ec0:	4770      	bx	lr
 8011ec2:	4b33      	ldr	r3, [pc, #204]	; (8011f90 <__ieee754_expf+0x194>)
 8011ec4:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8011f94 <__ieee754_expf+0x198>
 8011ec8:	4413      	add	r3, r2
 8011eca:	edd3 7a00 	vldr	s15, [r3]
 8011ece:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011ed2:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8011f98 <__ieee754_expf+0x19c>
 8011ed6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011eda:	ee17 2a90 	vmov	r2, s15
 8011ede:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011ee2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8011ee6:	eeb0 7a40 	vmov.f32	s14, s0
 8011eea:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8011f9c <__ieee754_expf+0x1a0>
 8011eee:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011ef2:	e7bc      	b.n	8011e6e <__ieee754_expf+0x72>
 8011ef4:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8011ef8:	d20b      	bcs.n	8011f12 <__ieee754_expf+0x116>
 8011efa:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8011f64 <__ieee754_expf+0x168>
 8011efe:	ee70 6a26 	vadd.f32	s13, s0, s13
 8011f02:	eef4 6ac6 	vcmpe.f32	s13, s12
 8011f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f0a:	dd02      	ble.n	8011f12 <__ieee754_expf+0x116>
 8011f0c:	ee30 0a06 	vadd.f32	s0, s0, s12
 8011f10:	4770      	bx	lr
 8011f12:	2200      	movs	r2, #0
 8011f14:	e7ad      	b.n	8011e72 <__ieee754_expf+0x76>
 8011f16:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8011f1a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8011f1e:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8011f22:	bfb8      	it	lt
 8011f24:	3264      	addlt	r2, #100	; 0x64
 8011f26:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011f2a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8011f2e:	ee76 7a40 	vsub.f32	s15, s12, s0
 8011f32:	ee17 3a90 	vmov	r3, s15
 8011f36:	bfab      	itete	ge
 8011f38:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8011f3c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8011f40:	ee00 3a10 	vmovge	s0, r3
 8011f44:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8011fa0 <__ieee754_expf+0x1a4>
 8011f48:	bfbc      	itt	lt
 8011f4a:	ee00 3a10 	vmovlt	s0, r3
 8011f4e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8011f52:	4770      	bx	lr
 8011f54:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011f5c <__ieee754_expf+0x160>
 8011f58:	4770      	bx	lr
 8011f5a:	bf00      	nop
 8011f5c:	00000000 	.word	0x00000000
 8011f60:	42b17217 	.word	0x42b17217
 8011f64:	7149f2ca 	.word	0x7149f2ca
 8011f68:	42cff1b5 	.word	0x42cff1b5
 8011f6c:	3eb17218 	.word	0x3eb17218
 8011f70:	3f851591 	.word	0x3f851591
 8011f74:	08013a7c 	.word	0x08013a7c
 8011f78:	08013a84 	.word	0x08013a84
 8011f7c:	3331bb4c 	.word	0x3331bb4c
 8011f80:	b5ddea0e 	.word	0xb5ddea0e
 8011f84:	388ab355 	.word	0x388ab355
 8011f88:	bb360b61 	.word	0xbb360b61
 8011f8c:	3e2aaaab 	.word	0x3e2aaaab
 8011f90:	08013a74 	.word	0x08013a74
 8011f94:	3fb8aa3b 	.word	0x3fb8aa3b
 8011f98:	3f317180 	.word	0x3f317180
 8011f9c:	3717f7d1 	.word	0x3717f7d1
 8011fa0:	0d800000 	.word	0x0d800000
 8011fa4:	00000000 	.word	0x00000000

08011fa8 <__kernel_cos>:
 8011fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fac:	ec59 8b10 	vmov	r8, r9, d0
 8011fb0:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 8011fb4:	b085      	sub	sp, #20
 8011fb6:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8011fba:	ed8d 1b00 	vstr	d1, [sp]
 8011fbe:	da07      	bge.n	8011fd0 <__kernel_cos+0x28>
 8011fc0:	ee10 0a10 	vmov	r0, s0
 8011fc4:	4649      	mov	r1, r9
 8011fc6:	f7ee fd83 	bl	8000ad0 <__aeabi_d2iz>
 8011fca:	2800      	cmp	r0, #0
 8011fcc:	f000 80aa 	beq.w	8012124 <__kernel_cos+0x17c>
 8011fd0:	4642      	mov	r2, r8
 8011fd2:	464b      	mov	r3, r9
 8011fd4:	4640      	mov	r0, r8
 8011fd6:	4649      	mov	r1, r9
 8011fd8:	f7ee faca 	bl	8000570 <__aeabi_dmul>
 8011fdc:	a359      	add	r3, pc, #356	; (adr r3, 8012144 <__kernel_cos+0x19c>)
 8011fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fe2:	4604      	mov	r4, r0
 8011fe4:	460d      	mov	r5, r1
 8011fe6:	f7ee fac3 	bl	8000570 <__aeabi_dmul>
 8011fea:	a358      	add	r3, pc, #352	; (adr r3, 801214c <__kernel_cos+0x1a4>)
 8011fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ff0:	f7ee f90c 	bl	800020c <__adddf3>
 8011ff4:	4622      	mov	r2, r4
 8011ff6:	462b      	mov	r3, r5
 8011ff8:	f7ee faba 	bl	8000570 <__aeabi_dmul>
 8011ffc:	a355      	add	r3, pc, #340	; (adr r3, 8012154 <__kernel_cos+0x1ac>)
 8011ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012002:	f7ee f901 	bl	8000208 <__aeabi_dsub>
 8012006:	4622      	mov	r2, r4
 8012008:	462b      	mov	r3, r5
 801200a:	f7ee fab1 	bl	8000570 <__aeabi_dmul>
 801200e:	a353      	add	r3, pc, #332	; (adr r3, 801215c <__kernel_cos+0x1b4>)
 8012010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012014:	f7ee f8fa 	bl	800020c <__adddf3>
 8012018:	4622      	mov	r2, r4
 801201a:	462b      	mov	r3, r5
 801201c:	f7ee faa8 	bl	8000570 <__aeabi_dmul>
 8012020:	a350      	add	r3, pc, #320	; (adr r3, 8012164 <__kernel_cos+0x1bc>)
 8012022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012026:	f7ee f8ef 	bl	8000208 <__aeabi_dsub>
 801202a:	4622      	mov	r2, r4
 801202c:	462b      	mov	r3, r5
 801202e:	f7ee fa9f 	bl	8000570 <__aeabi_dmul>
 8012032:	a34e      	add	r3, pc, #312	; (adr r3, 801216c <__kernel_cos+0x1c4>)
 8012034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012038:	f7ee f8e8 	bl	800020c <__adddf3>
 801203c:	462b      	mov	r3, r5
 801203e:	4622      	mov	r2, r4
 8012040:	f7ee fa96 	bl	8000570 <__aeabi_dmul>
 8012044:	4b3a      	ldr	r3, [pc, #232]	; (8012130 <__kernel_cos+0x188>)
 8012046:	429f      	cmp	r7, r3
 8012048:	4682      	mov	sl, r0
 801204a:	468b      	mov	fp, r1
 801204c:	dc2c      	bgt.n	80120a8 <__kernel_cos+0x100>
 801204e:	2200      	movs	r2, #0
 8012050:	4b38      	ldr	r3, [pc, #224]	; (8012134 <__kernel_cos+0x18c>)
 8012052:	4620      	mov	r0, r4
 8012054:	4629      	mov	r1, r5
 8012056:	f7ee fa8b 	bl	8000570 <__aeabi_dmul>
 801205a:	4652      	mov	r2, sl
 801205c:	4606      	mov	r6, r0
 801205e:	460f      	mov	r7, r1
 8012060:	465b      	mov	r3, fp
 8012062:	4620      	mov	r0, r4
 8012064:	4629      	mov	r1, r5
 8012066:	f7ee fa83 	bl	8000570 <__aeabi_dmul>
 801206a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801206e:	4604      	mov	r4, r0
 8012070:	460d      	mov	r5, r1
 8012072:	4640      	mov	r0, r8
 8012074:	4649      	mov	r1, r9
 8012076:	f7ee fa7b 	bl	8000570 <__aeabi_dmul>
 801207a:	4602      	mov	r2, r0
 801207c:	460b      	mov	r3, r1
 801207e:	4620      	mov	r0, r4
 8012080:	4629      	mov	r1, r5
 8012082:	f7ee f8c1 	bl	8000208 <__aeabi_dsub>
 8012086:	4602      	mov	r2, r0
 8012088:	460b      	mov	r3, r1
 801208a:	4630      	mov	r0, r6
 801208c:	4639      	mov	r1, r7
 801208e:	f7ee f8bb 	bl	8000208 <__aeabi_dsub>
 8012092:	460b      	mov	r3, r1
 8012094:	4928      	ldr	r1, [pc, #160]	; (8012138 <__kernel_cos+0x190>)
 8012096:	4602      	mov	r2, r0
 8012098:	2000      	movs	r0, #0
 801209a:	f7ee f8b5 	bl	8000208 <__aeabi_dsub>
 801209e:	ec41 0b10 	vmov	d0, r0, r1
 80120a2:	b005      	add	sp, #20
 80120a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120a8:	4b24      	ldr	r3, [pc, #144]	; (801213c <__kernel_cos+0x194>)
 80120aa:	4923      	ldr	r1, [pc, #140]	; (8012138 <__kernel_cos+0x190>)
 80120ac:	429f      	cmp	r7, r3
 80120ae:	bfd7      	itett	le
 80120b0:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 80120b4:	4f22      	ldrgt	r7, [pc, #136]	; (8012140 <__kernel_cos+0x198>)
 80120b6:	2200      	movle	r2, #0
 80120b8:	4616      	movle	r6, r2
 80120ba:	bfd4      	ite	le
 80120bc:	461f      	movle	r7, r3
 80120be:	2600      	movgt	r6, #0
 80120c0:	4632      	mov	r2, r6
 80120c2:	463b      	mov	r3, r7
 80120c4:	2000      	movs	r0, #0
 80120c6:	f7ee f89f 	bl	8000208 <__aeabi_dsub>
 80120ca:	2200      	movs	r2, #0
 80120cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80120d0:	4b18      	ldr	r3, [pc, #96]	; (8012134 <__kernel_cos+0x18c>)
 80120d2:	4620      	mov	r0, r4
 80120d4:	4629      	mov	r1, r5
 80120d6:	f7ee fa4b 	bl	8000570 <__aeabi_dmul>
 80120da:	4632      	mov	r2, r6
 80120dc:	463b      	mov	r3, r7
 80120de:	f7ee f893 	bl	8000208 <__aeabi_dsub>
 80120e2:	4652      	mov	r2, sl
 80120e4:	4606      	mov	r6, r0
 80120e6:	460f      	mov	r7, r1
 80120e8:	465b      	mov	r3, fp
 80120ea:	4620      	mov	r0, r4
 80120ec:	4629      	mov	r1, r5
 80120ee:	f7ee fa3f 	bl	8000570 <__aeabi_dmul>
 80120f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80120f6:	4604      	mov	r4, r0
 80120f8:	460d      	mov	r5, r1
 80120fa:	4640      	mov	r0, r8
 80120fc:	4649      	mov	r1, r9
 80120fe:	f7ee fa37 	bl	8000570 <__aeabi_dmul>
 8012102:	4602      	mov	r2, r0
 8012104:	460b      	mov	r3, r1
 8012106:	4620      	mov	r0, r4
 8012108:	4629      	mov	r1, r5
 801210a:	f7ee f87d 	bl	8000208 <__aeabi_dsub>
 801210e:	4602      	mov	r2, r0
 8012110:	460b      	mov	r3, r1
 8012112:	4630      	mov	r0, r6
 8012114:	4639      	mov	r1, r7
 8012116:	f7ee f877 	bl	8000208 <__aeabi_dsub>
 801211a:	4602      	mov	r2, r0
 801211c:	460b      	mov	r3, r1
 801211e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012122:	e7ba      	b.n	801209a <__kernel_cos+0xf2>
 8012124:	2000      	movs	r0, #0
 8012126:	4904      	ldr	r1, [pc, #16]	; (8012138 <__kernel_cos+0x190>)
 8012128:	e7b9      	b.n	801209e <__kernel_cos+0xf6>
 801212a:	bf00      	nop
 801212c:	f3af 8000 	nop.w
 8012130:	3fd33332 	.word	0x3fd33332
 8012134:	3fe00000 	.word	0x3fe00000
 8012138:	3ff00000 	.word	0x3ff00000
 801213c:	3fe90000 	.word	0x3fe90000
 8012140:	3fd20000 	.word	0x3fd20000
 8012144:	be8838d4 	.word	0xbe8838d4
 8012148:	bda8fae9 	.word	0xbda8fae9
 801214c:	bdb4b1c4 	.word	0xbdb4b1c4
 8012150:	3e21ee9e 	.word	0x3e21ee9e
 8012154:	809c52ad 	.word	0x809c52ad
 8012158:	3e927e4f 	.word	0x3e927e4f
 801215c:	19cb1590 	.word	0x19cb1590
 8012160:	3efa01a0 	.word	0x3efa01a0
 8012164:	16c15177 	.word	0x16c15177
 8012168:	3f56c16c 	.word	0x3f56c16c
 801216c:	5555554c 	.word	0x5555554c
 8012170:	3fa55555 	.word	0x3fa55555
 8012174:	00000000 	.word	0x00000000

08012178 <__kernel_rem_pio2>:
 8012178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801217c:	ed2d 8b02 	vpush	{d8}
 8012180:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8012184:	1ed4      	subs	r4, r2, #3
 8012186:	9306      	str	r3, [sp, #24]
 8012188:	9102      	str	r1, [sp, #8]
 801218a:	4bc3      	ldr	r3, [pc, #780]	; (8012498 <__kernel_rem_pio2+0x320>)
 801218c:	99a4      	ldr	r1, [sp, #656]	; 0x290
 801218e:	9009      	str	r0, [sp, #36]	; 0x24
 8012190:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012194:	9300      	str	r3, [sp, #0]
 8012196:	9b06      	ldr	r3, [sp, #24]
 8012198:	3b01      	subs	r3, #1
 801219a:	9304      	str	r3, [sp, #16]
 801219c:	2318      	movs	r3, #24
 801219e:	fb94 f4f3 	sdiv	r4, r4, r3
 80121a2:	f06f 0317 	mvn.w	r3, #23
 80121a6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80121aa:	fb04 3303 	mla	r3, r4, r3, r3
 80121ae:	eb03 0a02 	add.w	sl, r3, r2
 80121b2:	9b00      	ldr	r3, [sp, #0]
 80121b4:	9a04      	ldr	r2, [sp, #16]
 80121b6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8012488 <__kernel_rem_pio2+0x310>
 80121ba:	eb03 0802 	add.w	r8, r3, r2
 80121be:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80121c0:	1aa7      	subs	r7, r4, r2
 80121c2:	ae20      	add	r6, sp, #128	; 0x80
 80121c4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80121c8:	2500      	movs	r5, #0
 80121ca:	4545      	cmp	r5, r8
 80121cc:	dd13      	ble.n	80121f6 <__kernel_rem_pio2+0x7e>
 80121ce:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8012488 <__kernel_rem_pio2+0x310>
 80121d2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80121d6:	2600      	movs	r6, #0
 80121d8:	9b00      	ldr	r3, [sp, #0]
 80121da:	429e      	cmp	r6, r3
 80121dc:	dc32      	bgt.n	8012244 <__kernel_rem_pio2+0xcc>
 80121de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121e0:	9303      	str	r3, [sp, #12]
 80121e2:	9b06      	ldr	r3, [sp, #24]
 80121e4:	199d      	adds	r5, r3, r6
 80121e6:	ab20      	add	r3, sp, #128	; 0x80
 80121e8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80121ec:	9308      	str	r3, [sp, #32]
 80121ee:	ec59 8b18 	vmov	r8, r9, d8
 80121f2:	2700      	movs	r7, #0
 80121f4:	e01f      	b.n	8012236 <__kernel_rem_pio2+0xbe>
 80121f6:	42ef      	cmn	r7, r5
 80121f8:	d407      	bmi.n	801220a <__kernel_rem_pio2+0x92>
 80121fa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80121fe:	f7ee f951 	bl	80004a4 <__aeabi_i2d>
 8012202:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012206:	3501      	adds	r5, #1
 8012208:	e7df      	b.n	80121ca <__kernel_rem_pio2+0x52>
 801220a:	ec51 0b18 	vmov	r0, r1, d8
 801220e:	e7f8      	b.n	8012202 <__kernel_rem_pio2+0x8a>
 8012210:	9908      	ldr	r1, [sp, #32]
 8012212:	9d03      	ldr	r5, [sp, #12]
 8012214:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8012218:	9108      	str	r1, [sp, #32]
 801221a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801221e:	9503      	str	r5, [sp, #12]
 8012220:	f7ee f9a6 	bl	8000570 <__aeabi_dmul>
 8012224:	4602      	mov	r2, r0
 8012226:	460b      	mov	r3, r1
 8012228:	4640      	mov	r0, r8
 801222a:	4649      	mov	r1, r9
 801222c:	f7ed ffee 	bl	800020c <__adddf3>
 8012230:	3701      	adds	r7, #1
 8012232:	4680      	mov	r8, r0
 8012234:	4689      	mov	r9, r1
 8012236:	9b04      	ldr	r3, [sp, #16]
 8012238:	429f      	cmp	r7, r3
 801223a:	dde9      	ble.n	8012210 <__kernel_rem_pio2+0x98>
 801223c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8012240:	3601      	adds	r6, #1
 8012242:	e7c9      	b.n	80121d8 <__kernel_rem_pio2+0x60>
 8012244:	9b00      	ldr	r3, [sp, #0]
 8012246:	9f00      	ldr	r7, [sp, #0]
 8012248:	aa0c      	add	r2, sp, #48	; 0x30
 801224a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801224e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012250:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8012252:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012256:	930a      	str	r3, [sp, #40]	; 0x28
 8012258:	ab98      	add	r3, sp, #608	; 0x260
 801225a:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 801225e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012262:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012266:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801226a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801226e:	9308      	str	r3, [sp, #32]
 8012270:	9a08      	ldr	r2, [sp, #32]
 8012272:	ab98      	add	r3, sp, #608	; 0x260
 8012274:	4413      	add	r3, r2
 8012276:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 801227a:	2600      	movs	r6, #0
 801227c:	1bbb      	subs	r3, r7, r6
 801227e:	2b00      	cmp	r3, #0
 8012280:	dc77      	bgt.n	8012372 <__kernel_rem_pio2+0x1fa>
 8012282:	ec49 8b10 	vmov	d0, r8, r9
 8012286:	4650      	mov	r0, sl
 8012288:	f000 fc1a 	bl	8012ac0 <scalbn>
 801228c:	ec55 4b10 	vmov	r4, r5, d0
 8012290:	2200      	movs	r2, #0
 8012292:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8012296:	ee10 0a10 	vmov	r0, s0
 801229a:	4629      	mov	r1, r5
 801229c:	f7ee f968 	bl	8000570 <__aeabi_dmul>
 80122a0:	ec41 0b10 	vmov	d0, r0, r1
 80122a4:	f000 fb7c 	bl	80129a0 <floor>
 80122a8:	2200      	movs	r2, #0
 80122aa:	ec51 0b10 	vmov	r0, r1, d0
 80122ae:	4b7b      	ldr	r3, [pc, #492]	; (801249c <__kernel_rem_pio2+0x324>)
 80122b0:	f7ee f95e 	bl	8000570 <__aeabi_dmul>
 80122b4:	4602      	mov	r2, r0
 80122b6:	460b      	mov	r3, r1
 80122b8:	4620      	mov	r0, r4
 80122ba:	4629      	mov	r1, r5
 80122bc:	f7ed ffa4 	bl	8000208 <__aeabi_dsub>
 80122c0:	460d      	mov	r5, r1
 80122c2:	4604      	mov	r4, r0
 80122c4:	f7ee fc04 	bl	8000ad0 <__aeabi_d2iz>
 80122c8:	9003      	str	r0, [sp, #12]
 80122ca:	f7ee f8eb 	bl	80004a4 <__aeabi_i2d>
 80122ce:	4602      	mov	r2, r0
 80122d0:	460b      	mov	r3, r1
 80122d2:	4620      	mov	r0, r4
 80122d4:	4629      	mov	r1, r5
 80122d6:	f7ed ff97 	bl	8000208 <__aeabi_dsub>
 80122da:	f1ba 0f00 	cmp.w	sl, #0
 80122de:	4680      	mov	r8, r0
 80122e0:	4689      	mov	r9, r1
 80122e2:	dd6b      	ble.n	80123bc <__kernel_rem_pio2+0x244>
 80122e4:	1e7a      	subs	r2, r7, #1
 80122e6:	ab0c      	add	r3, sp, #48	; 0x30
 80122e8:	f1ca 0118 	rsb	r1, sl, #24
 80122ec:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80122f0:	9c03      	ldr	r4, [sp, #12]
 80122f2:	fa40 f301 	asr.w	r3, r0, r1
 80122f6:	441c      	add	r4, r3
 80122f8:	408b      	lsls	r3, r1
 80122fa:	1ac0      	subs	r0, r0, r3
 80122fc:	ab0c      	add	r3, sp, #48	; 0x30
 80122fe:	9403      	str	r4, [sp, #12]
 8012300:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8012304:	f1ca 0317 	rsb	r3, sl, #23
 8012308:	fa40 fb03 	asr.w	fp, r0, r3
 801230c:	f1bb 0f00 	cmp.w	fp, #0
 8012310:	dd62      	ble.n	80123d8 <__kernel_rem_pio2+0x260>
 8012312:	9b03      	ldr	r3, [sp, #12]
 8012314:	2200      	movs	r2, #0
 8012316:	3301      	adds	r3, #1
 8012318:	9303      	str	r3, [sp, #12]
 801231a:	4614      	mov	r4, r2
 801231c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8012320:	4297      	cmp	r7, r2
 8012322:	f300 8089 	bgt.w	8012438 <__kernel_rem_pio2+0x2c0>
 8012326:	f1ba 0f00 	cmp.w	sl, #0
 801232a:	dd07      	ble.n	801233c <__kernel_rem_pio2+0x1c4>
 801232c:	f1ba 0f01 	cmp.w	sl, #1
 8012330:	f000 8096 	beq.w	8012460 <__kernel_rem_pio2+0x2e8>
 8012334:	f1ba 0f02 	cmp.w	sl, #2
 8012338:	f000 809c 	beq.w	8012474 <__kernel_rem_pio2+0x2fc>
 801233c:	f1bb 0f02 	cmp.w	fp, #2
 8012340:	d14a      	bne.n	80123d8 <__kernel_rem_pio2+0x260>
 8012342:	4642      	mov	r2, r8
 8012344:	464b      	mov	r3, r9
 8012346:	2000      	movs	r0, #0
 8012348:	4955      	ldr	r1, [pc, #340]	; (80124a0 <__kernel_rem_pio2+0x328>)
 801234a:	f7ed ff5d 	bl	8000208 <__aeabi_dsub>
 801234e:	4680      	mov	r8, r0
 8012350:	4689      	mov	r9, r1
 8012352:	2c00      	cmp	r4, #0
 8012354:	d040      	beq.n	80123d8 <__kernel_rem_pio2+0x260>
 8012356:	4650      	mov	r0, sl
 8012358:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8012490 <__kernel_rem_pio2+0x318>
 801235c:	f000 fbb0 	bl	8012ac0 <scalbn>
 8012360:	4640      	mov	r0, r8
 8012362:	4649      	mov	r1, r9
 8012364:	ec53 2b10 	vmov	r2, r3, d0
 8012368:	f7ed ff4e 	bl	8000208 <__aeabi_dsub>
 801236c:	4680      	mov	r8, r0
 801236e:	4689      	mov	r9, r1
 8012370:	e032      	b.n	80123d8 <__kernel_rem_pio2+0x260>
 8012372:	2200      	movs	r2, #0
 8012374:	4b4b      	ldr	r3, [pc, #300]	; (80124a4 <__kernel_rem_pio2+0x32c>)
 8012376:	4640      	mov	r0, r8
 8012378:	4649      	mov	r1, r9
 801237a:	f7ee f8f9 	bl	8000570 <__aeabi_dmul>
 801237e:	f7ee fba7 	bl	8000ad0 <__aeabi_d2iz>
 8012382:	f7ee f88f 	bl	80004a4 <__aeabi_i2d>
 8012386:	2200      	movs	r2, #0
 8012388:	4b47      	ldr	r3, [pc, #284]	; (80124a8 <__kernel_rem_pio2+0x330>)
 801238a:	4604      	mov	r4, r0
 801238c:	460d      	mov	r5, r1
 801238e:	f7ee f8ef 	bl	8000570 <__aeabi_dmul>
 8012392:	4602      	mov	r2, r0
 8012394:	460b      	mov	r3, r1
 8012396:	4640      	mov	r0, r8
 8012398:	4649      	mov	r1, r9
 801239a:	f7ed ff35 	bl	8000208 <__aeabi_dsub>
 801239e:	f7ee fb97 	bl	8000ad0 <__aeabi_d2iz>
 80123a2:	ab0c      	add	r3, sp, #48	; 0x30
 80123a4:	4629      	mov	r1, r5
 80123a6:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80123aa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80123ae:	4620      	mov	r0, r4
 80123b0:	f7ed ff2c 	bl	800020c <__adddf3>
 80123b4:	3601      	adds	r6, #1
 80123b6:	4680      	mov	r8, r0
 80123b8:	4689      	mov	r9, r1
 80123ba:	e75f      	b.n	801227c <__kernel_rem_pio2+0x104>
 80123bc:	d106      	bne.n	80123cc <__kernel_rem_pio2+0x254>
 80123be:	1e7b      	subs	r3, r7, #1
 80123c0:	aa0c      	add	r2, sp, #48	; 0x30
 80123c2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80123c6:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80123ca:	e79f      	b.n	801230c <__kernel_rem_pio2+0x194>
 80123cc:	2200      	movs	r2, #0
 80123ce:	4b37      	ldr	r3, [pc, #220]	; (80124ac <__kernel_rem_pio2+0x334>)
 80123d0:	f7ee fb54 	bl	8000a7c <__aeabi_dcmpge>
 80123d4:	bb68      	cbnz	r0, 8012432 <__kernel_rem_pio2+0x2ba>
 80123d6:	4683      	mov	fp, r0
 80123d8:	2200      	movs	r2, #0
 80123da:	2300      	movs	r3, #0
 80123dc:	4640      	mov	r0, r8
 80123de:	4649      	mov	r1, r9
 80123e0:	f7ee fb2e 	bl	8000a40 <__aeabi_dcmpeq>
 80123e4:	2800      	cmp	r0, #0
 80123e6:	f000 80c1 	beq.w	801256c <__kernel_rem_pio2+0x3f4>
 80123ea:	1e7c      	subs	r4, r7, #1
 80123ec:	4623      	mov	r3, r4
 80123ee:	2200      	movs	r2, #0
 80123f0:	9900      	ldr	r1, [sp, #0]
 80123f2:	428b      	cmp	r3, r1
 80123f4:	da5c      	bge.n	80124b0 <__kernel_rem_pio2+0x338>
 80123f6:	2a00      	cmp	r2, #0
 80123f8:	f040 808b 	bne.w	8012512 <__kernel_rem_pio2+0x39a>
 80123fc:	2401      	movs	r4, #1
 80123fe:	f06f 0203 	mvn.w	r2, #3
 8012402:	fb02 f304 	mul.w	r3, r2, r4
 8012406:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012408:	58cb      	ldr	r3, [r1, r3]
 801240a:	2b00      	cmp	r3, #0
 801240c:	d056      	beq.n	80124bc <__kernel_rem_pio2+0x344>
 801240e:	9b08      	ldr	r3, [sp, #32]
 8012410:	aa98      	add	r2, sp, #608	; 0x260
 8012412:	4413      	add	r3, r2
 8012414:	f1a3 0b90 	sub.w	fp, r3, #144	; 0x90
 8012418:	9b06      	ldr	r3, [sp, #24]
 801241a:	19dd      	adds	r5, r3, r7
 801241c:	ab20      	add	r3, sp, #128	; 0x80
 801241e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8012422:	19e3      	adds	r3, r4, r7
 8012424:	1c7e      	adds	r6, r7, #1
 8012426:	9303      	str	r3, [sp, #12]
 8012428:	9b03      	ldr	r3, [sp, #12]
 801242a:	429e      	cmp	r6, r3
 801242c:	dd48      	ble.n	80124c0 <__kernel_rem_pio2+0x348>
 801242e:	461f      	mov	r7, r3
 8012430:	e712      	b.n	8012258 <__kernel_rem_pio2+0xe0>
 8012432:	f04f 0b02 	mov.w	fp, #2
 8012436:	e76c      	b.n	8012312 <__kernel_rem_pio2+0x19a>
 8012438:	ab0c      	add	r3, sp, #48	; 0x30
 801243a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801243e:	b94c      	cbnz	r4, 8012454 <__kernel_rem_pio2+0x2dc>
 8012440:	b12b      	cbz	r3, 801244e <__kernel_rem_pio2+0x2d6>
 8012442:	a80c      	add	r0, sp, #48	; 0x30
 8012444:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012448:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801244c:	2301      	movs	r3, #1
 801244e:	3201      	adds	r2, #1
 8012450:	461c      	mov	r4, r3
 8012452:	e765      	b.n	8012320 <__kernel_rem_pio2+0x1a8>
 8012454:	a80c      	add	r0, sp, #48	; 0x30
 8012456:	1acb      	subs	r3, r1, r3
 8012458:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801245c:	4623      	mov	r3, r4
 801245e:	e7f6      	b.n	801244e <__kernel_rem_pio2+0x2d6>
 8012460:	1e7a      	subs	r2, r7, #1
 8012462:	ab0c      	add	r3, sp, #48	; 0x30
 8012464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012468:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801246c:	a90c      	add	r1, sp, #48	; 0x30
 801246e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012472:	e763      	b.n	801233c <__kernel_rem_pio2+0x1c4>
 8012474:	1e7a      	subs	r2, r7, #1
 8012476:	ab0c      	add	r3, sp, #48	; 0x30
 8012478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801247c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012480:	e7f4      	b.n	801246c <__kernel_rem_pio2+0x2f4>
 8012482:	bf00      	nop
 8012484:	f3af 8000 	nop.w
	...
 8012494:	3ff00000 	.word	0x3ff00000
 8012498:	08013ad0 	.word	0x08013ad0
 801249c:	40200000 	.word	0x40200000
 80124a0:	3ff00000 	.word	0x3ff00000
 80124a4:	3e700000 	.word	0x3e700000
 80124a8:	41700000 	.word	0x41700000
 80124ac:	3fe00000 	.word	0x3fe00000
 80124b0:	a90c      	add	r1, sp, #48	; 0x30
 80124b2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80124b6:	3b01      	subs	r3, #1
 80124b8:	430a      	orrs	r2, r1
 80124ba:	e799      	b.n	80123f0 <__kernel_rem_pio2+0x278>
 80124bc:	3401      	adds	r4, #1
 80124be:	e7a0      	b.n	8012402 <__kernel_rem_pio2+0x28a>
 80124c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124c2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80124c6:	f7ed ffed 	bl	80004a4 <__aeabi_i2d>
 80124ca:	e8e5 0102 	strd	r0, r1, [r5], #8
 80124ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124d0:	9508      	str	r5, [sp, #32]
 80124d2:	461c      	mov	r4, r3
 80124d4:	2700      	movs	r7, #0
 80124d6:	f04f 0800 	mov.w	r8, #0
 80124da:	f04f 0900 	mov.w	r9, #0
 80124de:	9b04      	ldr	r3, [sp, #16]
 80124e0:	429f      	cmp	r7, r3
 80124e2:	dd03      	ble.n	80124ec <__kernel_rem_pio2+0x374>
 80124e4:	e8eb 8902 	strd	r8, r9, [fp], #8
 80124e8:	3601      	adds	r6, #1
 80124ea:	e79d      	b.n	8012428 <__kernel_rem_pio2+0x2b0>
 80124ec:	9908      	ldr	r1, [sp, #32]
 80124ee:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80124f2:	9108      	str	r1, [sp, #32]
 80124f4:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80124f8:	f7ee f83a 	bl	8000570 <__aeabi_dmul>
 80124fc:	4602      	mov	r2, r0
 80124fe:	460b      	mov	r3, r1
 8012500:	4640      	mov	r0, r8
 8012502:	4649      	mov	r1, r9
 8012504:	f7ed fe82 	bl	800020c <__adddf3>
 8012508:	3701      	adds	r7, #1
 801250a:	4680      	mov	r8, r0
 801250c:	4689      	mov	r9, r1
 801250e:	e7e6      	b.n	80124de <__kernel_rem_pio2+0x366>
 8012510:	3c01      	subs	r4, #1
 8012512:	ab0c      	add	r3, sp, #48	; 0x30
 8012514:	f1aa 0a18 	sub.w	sl, sl, #24
 8012518:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d0f7      	beq.n	8012510 <__kernel_rem_pio2+0x398>
 8012520:	4650      	mov	r0, sl
 8012522:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 80127f8 <__kernel_rem_pio2+0x680>
 8012526:	f000 facb 	bl	8012ac0 <scalbn>
 801252a:	00e5      	lsls	r5, r4, #3
 801252c:	ab98      	add	r3, sp, #608	; 0x260
 801252e:	eb03 0905 	add.w	r9, r3, r5
 8012532:	ec57 6b10 	vmov	r6, r7, d0
 8012536:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 801253a:	46a0      	mov	r8, r4
 801253c:	f1b8 0f00 	cmp.w	r8, #0
 8012540:	da4d      	bge.n	80125de <__kernel_rem_pio2+0x466>
 8012542:	ed9f 8baf 	vldr	d8, [pc, #700]	; 8012800 <__kernel_rem_pio2+0x688>
 8012546:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 801254a:	2300      	movs	r3, #0
 801254c:	9304      	str	r3, [sp, #16]
 801254e:	4657      	mov	r7, sl
 8012550:	9b04      	ldr	r3, [sp, #16]
 8012552:	ebb4 0903 	subs.w	r9, r4, r3
 8012556:	d476      	bmi.n	8012646 <__kernel_rem_pio2+0x4ce>
 8012558:	4bab      	ldr	r3, [pc, #684]	; (8012808 <__kernel_rem_pio2+0x690>)
 801255a:	461e      	mov	r6, r3
 801255c:	ab70      	add	r3, sp, #448	; 0x1c0
 801255e:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8012562:	ed8d 8b06 	vstr	d8, [sp, #24]
 8012566:	f04f 0800 	mov.w	r8, #0
 801256a:	e05e      	b.n	801262a <__kernel_rem_pio2+0x4b2>
 801256c:	f1ca 0000 	rsb	r0, sl, #0
 8012570:	ec49 8b10 	vmov	d0, r8, r9
 8012574:	f000 faa4 	bl	8012ac0 <scalbn>
 8012578:	ec55 4b10 	vmov	r4, r5, d0
 801257c:	2200      	movs	r2, #0
 801257e:	4ba3      	ldr	r3, [pc, #652]	; (801280c <__kernel_rem_pio2+0x694>)
 8012580:	ee10 0a10 	vmov	r0, s0
 8012584:	4629      	mov	r1, r5
 8012586:	f7ee fa79 	bl	8000a7c <__aeabi_dcmpge>
 801258a:	b1f8      	cbz	r0, 80125cc <__kernel_rem_pio2+0x454>
 801258c:	2200      	movs	r2, #0
 801258e:	4ba0      	ldr	r3, [pc, #640]	; (8012810 <__kernel_rem_pio2+0x698>)
 8012590:	4620      	mov	r0, r4
 8012592:	4629      	mov	r1, r5
 8012594:	f7ed ffec 	bl	8000570 <__aeabi_dmul>
 8012598:	f7ee fa9a 	bl	8000ad0 <__aeabi_d2iz>
 801259c:	4606      	mov	r6, r0
 801259e:	f7ed ff81 	bl	80004a4 <__aeabi_i2d>
 80125a2:	2200      	movs	r2, #0
 80125a4:	4b99      	ldr	r3, [pc, #612]	; (801280c <__kernel_rem_pio2+0x694>)
 80125a6:	f7ed ffe3 	bl	8000570 <__aeabi_dmul>
 80125aa:	460b      	mov	r3, r1
 80125ac:	4602      	mov	r2, r0
 80125ae:	4629      	mov	r1, r5
 80125b0:	4620      	mov	r0, r4
 80125b2:	f7ed fe29 	bl	8000208 <__aeabi_dsub>
 80125b6:	f7ee fa8b 	bl	8000ad0 <__aeabi_d2iz>
 80125ba:	1c7c      	adds	r4, r7, #1
 80125bc:	ab0c      	add	r3, sp, #48	; 0x30
 80125be:	f10a 0a18 	add.w	sl, sl, #24
 80125c2:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80125c6:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 80125ca:	e7a9      	b.n	8012520 <__kernel_rem_pio2+0x3a8>
 80125cc:	4620      	mov	r0, r4
 80125ce:	4629      	mov	r1, r5
 80125d0:	f7ee fa7e 	bl	8000ad0 <__aeabi_d2iz>
 80125d4:	ab0c      	add	r3, sp, #48	; 0x30
 80125d6:	463c      	mov	r4, r7
 80125d8:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80125dc:	e7a0      	b.n	8012520 <__kernel_rem_pio2+0x3a8>
 80125de:	ab0c      	add	r3, sp, #48	; 0x30
 80125e0:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80125e4:	f7ed ff5e 	bl	80004a4 <__aeabi_i2d>
 80125e8:	4632      	mov	r2, r6
 80125ea:	463b      	mov	r3, r7
 80125ec:	f7ed ffc0 	bl	8000570 <__aeabi_dmul>
 80125f0:	2200      	movs	r2, #0
 80125f2:	e969 0102 	strd	r0, r1, [r9, #-8]!
 80125f6:	4b86      	ldr	r3, [pc, #536]	; (8012810 <__kernel_rem_pio2+0x698>)
 80125f8:	4630      	mov	r0, r6
 80125fa:	4639      	mov	r1, r7
 80125fc:	f7ed ffb8 	bl	8000570 <__aeabi_dmul>
 8012600:	f108 38ff 	add.w	r8, r8, #4294967295
 8012604:	4606      	mov	r6, r0
 8012606:	460f      	mov	r7, r1
 8012608:	e798      	b.n	801253c <__kernel_rem_pio2+0x3c4>
 801260a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801260e:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8012612:	f7ed ffad 	bl	8000570 <__aeabi_dmul>
 8012616:	4602      	mov	r2, r0
 8012618:	460b      	mov	r3, r1
 801261a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801261e:	f7ed fdf5 	bl	800020c <__adddf3>
 8012622:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012626:	f108 0801 	add.w	r8, r8, #1
 801262a:	9b00      	ldr	r3, [sp, #0]
 801262c:	4598      	cmp	r8, r3
 801262e:	dc02      	bgt.n	8012636 <__kernel_rem_pio2+0x4be>
 8012630:	9b04      	ldr	r3, [sp, #16]
 8012632:	4598      	cmp	r8, r3
 8012634:	dde9      	ble.n	801260a <__kernel_rem_pio2+0x492>
 8012636:	9b04      	ldr	r3, [sp, #16]
 8012638:	ed9d 7b06 	vldr	d7, [sp, #24]
 801263c:	3301      	adds	r3, #1
 801263e:	ecaa 7b02 	vstmia	sl!, {d7}
 8012642:	9304      	str	r3, [sp, #16]
 8012644:	e784      	b.n	8012550 <__kernel_rem_pio2+0x3d8>
 8012646:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8012648:	2b03      	cmp	r3, #3
 801264a:	d85d      	bhi.n	8012708 <__kernel_rem_pio2+0x590>
 801264c:	e8df f003 	tbb	[pc, r3]
 8012650:	0226264b 	.word	0x0226264b
 8012654:	ab98      	add	r3, sp, #608	; 0x260
 8012656:	441d      	add	r5, r3
 8012658:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 801265c:	462e      	mov	r6, r5
 801265e:	46a2      	mov	sl, r4
 8012660:	f1ba 0f00 	cmp.w	sl, #0
 8012664:	dc6e      	bgt.n	8012744 <__kernel_rem_pio2+0x5cc>
 8012666:	462e      	mov	r6, r5
 8012668:	46a2      	mov	sl, r4
 801266a:	f1ba 0f01 	cmp.w	sl, #1
 801266e:	f300 808a 	bgt.w	8012786 <__kernel_rem_pio2+0x60e>
 8012672:	2000      	movs	r0, #0
 8012674:	2100      	movs	r1, #0
 8012676:	2c01      	cmp	r4, #1
 8012678:	f300 80a6 	bgt.w	80127c8 <__kernel_rem_pio2+0x650>
 801267c:	f1bb 0f00 	cmp.w	fp, #0
 8012680:	f040 80a8 	bne.w	80127d4 <__kernel_rem_pio2+0x65c>
 8012684:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 8012688:	9c02      	ldr	r4, [sp, #8]
 801268a:	e9c4 2300 	strd	r2, r3, [r4]
 801268e:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 8012692:	e9c4 0104 	strd	r0, r1, [r4, #16]
 8012696:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801269a:	e035      	b.n	8012708 <__kernel_rem_pio2+0x590>
 801269c:	3508      	adds	r5, #8
 801269e:	ab48      	add	r3, sp, #288	; 0x120
 80126a0:	441d      	add	r5, r3
 80126a2:	4626      	mov	r6, r4
 80126a4:	2000      	movs	r0, #0
 80126a6:	2100      	movs	r1, #0
 80126a8:	2e00      	cmp	r6, #0
 80126aa:	da3c      	bge.n	8012726 <__kernel_rem_pio2+0x5ae>
 80126ac:	f1bb 0f00 	cmp.w	fp, #0
 80126b0:	d03f      	beq.n	8012732 <__kernel_rem_pio2+0x5ba>
 80126b2:	4602      	mov	r2, r0
 80126b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80126b8:	9d02      	ldr	r5, [sp, #8]
 80126ba:	e9c5 2300 	strd	r2, r3, [r5]
 80126be:	4602      	mov	r2, r0
 80126c0:	460b      	mov	r3, r1
 80126c2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80126c6:	f7ed fd9f 	bl	8000208 <__aeabi_dsub>
 80126ca:	ae4a      	add	r6, sp, #296	; 0x128
 80126cc:	2501      	movs	r5, #1
 80126ce:	42ac      	cmp	r4, r5
 80126d0:	da32      	bge.n	8012738 <__kernel_rem_pio2+0x5c0>
 80126d2:	f1bb 0f00 	cmp.w	fp, #0
 80126d6:	d002      	beq.n	80126de <__kernel_rem_pio2+0x566>
 80126d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80126dc:	4619      	mov	r1, r3
 80126de:	9b02      	ldr	r3, [sp, #8]
 80126e0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80126e4:	e010      	b.n	8012708 <__kernel_rem_pio2+0x590>
 80126e6:	ab98      	add	r3, sp, #608	; 0x260
 80126e8:	441d      	add	r5, r3
 80126ea:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 80126ee:	2000      	movs	r0, #0
 80126f0:	2100      	movs	r1, #0
 80126f2:	2c00      	cmp	r4, #0
 80126f4:	da11      	bge.n	801271a <__kernel_rem_pio2+0x5a2>
 80126f6:	f1bb 0f00 	cmp.w	fp, #0
 80126fa:	d002      	beq.n	8012702 <__kernel_rem_pio2+0x58a>
 80126fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012700:	4619      	mov	r1, r3
 8012702:	9b02      	ldr	r3, [sp, #8]
 8012704:	e9c3 0100 	strd	r0, r1, [r3]
 8012708:	9b03      	ldr	r3, [sp, #12]
 801270a:	f003 0007 	and.w	r0, r3, #7
 801270e:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8012712:	ecbd 8b02 	vpop	{d8}
 8012716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801271a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801271e:	f7ed fd75 	bl	800020c <__adddf3>
 8012722:	3c01      	subs	r4, #1
 8012724:	e7e5      	b.n	80126f2 <__kernel_rem_pio2+0x57a>
 8012726:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801272a:	f7ed fd6f 	bl	800020c <__adddf3>
 801272e:	3e01      	subs	r6, #1
 8012730:	e7ba      	b.n	80126a8 <__kernel_rem_pio2+0x530>
 8012732:	4602      	mov	r2, r0
 8012734:	460b      	mov	r3, r1
 8012736:	e7bf      	b.n	80126b8 <__kernel_rem_pio2+0x540>
 8012738:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801273c:	f7ed fd66 	bl	800020c <__adddf3>
 8012740:	3501      	adds	r5, #1
 8012742:	e7c4      	b.n	80126ce <__kernel_rem_pio2+0x556>
 8012744:	ed16 7b02 	vldr	d7, [r6, #-8]
 8012748:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 801274c:	ec53 2b17 	vmov	r2, r3, d7
 8012750:	4640      	mov	r0, r8
 8012752:	4649      	mov	r1, r9
 8012754:	ed8d 7b00 	vstr	d7, [sp]
 8012758:	f7ed fd58 	bl	800020c <__adddf3>
 801275c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012760:	4602      	mov	r2, r0
 8012762:	460b      	mov	r3, r1
 8012764:	4640      	mov	r0, r8
 8012766:	4649      	mov	r1, r9
 8012768:	f7ed fd4e 	bl	8000208 <__aeabi_dsub>
 801276c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012770:	f7ed fd4c 	bl	800020c <__adddf3>
 8012774:	ed9d 7b04 	vldr	d7, [sp, #16]
 8012778:	e966 0102 	strd	r0, r1, [r6, #-8]!
 801277c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012780:	ed06 7b02 	vstr	d7, [r6, #-8]
 8012784:	e76c      	b.n	8012660 <__kernel_rem_pio2+0x4e8>
 8012786:	ed16 7b02 	vldr	d7, [r6, #-8]
 801278a:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 801278e:	ec53 2b17 	vmov	r2, r3, d7
 8012792:	4640      	mov	r0, r8
 8012794:	4649      	mov	r1, r9
 8012796:	ed8d 7b00 	vstr	d7, [sp]
 801279a:	f7ed fd37 	bl	800020c <__adddf3>
 801279e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80127a2:	4602      	mov	r2, r0
 80127a4:	460b      	mov	r3, r1
 80127a6:	4640      	mov	r0, r8
 80127a8:	4649      	mov	r1, r9
 80127aa:	f7ed fd2d 	bl	8000208 <__aeabi_dsub>
 80127ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80127b2:	f7ed fd2b 	bl	800020c <__adddf3>
 80127b6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80127ba:	e966 0102 	strd	r0, r1, [r6, #-8]!
 80127be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80127c2:	ed06 7b02 	vstr	d7, [r6, #-8]
 80127c6:	e750      	b.n	801266a <__kernel_rem_pio2+0x4f2>
 80127c8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80127cc:	f7ed fd1e 	bl	800020c <__adddf3>
 80127d0:	3c01      	subs	r4, #1
 80127d2:	e750      	b.n	8012676 <__kernel_rem_pio2+0x4fe>
 80127d4:	9a02      	ldr	r2, [sp, #8]
 80127d6:	683b      	ldr	r3, [r7, #0]
 80127d8:	6013      	str	r3, [r2, #0]
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	6110      	str	r0, [r2, #16]
 80127de:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80127e2:	6053      	str	r3, [r2, #4]
 80127e4:	68bb      	ldr	r3, [r7, #8]
 80127e6:	6093      	str	r3, [r2, #8]
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80127ee:	60d3      	str	r3, [r2, #12]
 80127f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80127f4:	6153      	str	r3, [r2, #20]
 80127f6:	e787      	b.n	8012708 <__kernel_rem_pio2+0x590>
 80127f8:	00000000 	.word	0x00000000
 80127fc:	3ff00000 	.word	0x3ff00000
	...
 8012808:	08013a90 	.word	0x08013a90
 801280c:	41700000 	.word	0x41700000
 8012810:	3e700000 	.word	0x3e700000
 8012814:	00000000 	.word	0x00000000

08012818 <__kernel_sin>:
 8012818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801281c:	ec55 4b10 	vmov	r4, r5, d0
 8012820:	b085      	sub	sp, #20
 8012822:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012826:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801282a:	ed8d 1b00 	vstr	d1, [sp]
 801282e:	9002      	str	r0, [sp, #8]
 8012830:	da06      	bge.n	8012840 <__kernel_sin+0x28>
 8012832:	ee10 0a10 	vmov	r0, s0
 8012836:	4629      	mov	r1, r5
 8012838:	f7ee f94a 	bl	8000ad0 <__aeabi_d2iz>
 801283c:	2800      	cmp	r0, #0
 801283e:	d051      	beq.n	80128e4 <__kernel_sin+0xcc>
 8012840:	4622      	mov	r2, r4
 8012842:	462b      	mov	r3, r5
 8012844:	4620      	mov	r0, r4
 8012846:	4629      	mov	r1, r5
 8012848:	f7ed fe92 	bl	8000570 <__aeabi_dmul>
 801284c:	4682      	mov	sl, r0
 801284e:	468b      	mov	fp, r1
 8012850:	4602      	mov	r2, r0
 8012852:	460b      	mov	r3, r1
 8012854:	4620      	mov	r0, r4
 8012856:	4629      	mov	r1, r5
 8012858:	f7ed fe8a 	bl	8000570 <__aeabi_dmul>
 801285c:	a341      	add	r3, pc, #260	; (adr r3, 8012964 <__kernel_sin+0x14c>)
 801285e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012862:	4680      	mov	r8, r0
 8012864:	4689      	mov	r9, r1
 8012866:	4650      	mov	r0, sl
 8012868:	4659      	mov	r1, fp
 801286a:	f7ed fe81 	bl	8000570 <__aeabi_dmul>
 801286e:	a33f      	add	r3, pc, #252	; (adr r3, 801296c <__kernel_sin+0x154>)
 8012870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012874:	f7ed fcc8 	bl	8000208 <__aeabi_dsub>
 8012878:	4652      	mov	r2, sl
 801287a:	465b      	mov	r3, fp
 801287c:	f7ed fe78 	bl	8000570 <__aeabi_dmul>
 8012880:	a33c      	add	r3, pc, #240	; (adr r3, 8012974 <__kernel_sin+0x15c>)
 8012882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012886:	f7ed fcc1 	bl	800020c <__adddf3>
 801288a:	4652      	mov	r2, sl
 801288c:	465b      	mov	r3, fp
 801288e:	f7ed fe6f 	bl	8000570 <__aeabi_dmul>
 8012892:	a33a      	add	r3, pc, #232	; (adr r3, 801297c <__kernel_sin+0x164>)
 8012894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012898:	f7ed fcb6 	bl	8000208 <__aeabi_dsub>
 801289c:	4652      	mov	r2, sl
 801289e:	465b      	mov	r3, fp
 80128a0:	f7ed fe66 	bl	8000570 <__aeabi_dmul>
 80128a4:	a337      	add	r3, pc, #220	; (adr r3, 8012984 <__kernel_sin+0x16c>)
 80128a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128aa:	f7ed fcaf 	bl	800020c <__adddf3>
 80128ae:	9b02      	ldr	r3, [sp, #8]
 80128b0:	4606      	mov	r6, r0
 80128b2:	460f      	mov	r7, r1
 80128b4:	b9db      	cbnz	r3, 80128ee <__kernel_sin+0xd6>
 80128b6:	4602      	mov	r2, r0
 80128b8:	460b      	mov	r3, r1
 80128ba:	4650      	mov	r0, sl
 80128bc:	4659      	mov	r1, fp
 80128be:	f7ed fe57 	bl	8000570 <__aeabi_dmul>
 80128c2:	a325      	add	r3, pc, #148	; (adr r3, 8012958 <__kernel_sin+0x140>)
 80128c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128c8:	f7ed fc9e 	bl	8000208 <__aeabi_dsub>
 80128cc:	4642      	mov	r2, r8
 80128ce:	464b      	mov	r3, r9
 80128d0:	f7ed fe4e 	bl	8000570 <__aeabi_dmul>
 80128d4:	4602      	mov	r2, r0
 80128d6:	460b      	mov	r3, r1
 80128d8:	4620      	mov	r0, r4
 80128da:	4629      	mov	r1, r5
 80128dc:	f7ed fc96 	bl	800020c <__adddf3>
 80128e0:	4604      	mov	r4, r0
 80128e2:	460d      	mov	r5, r1
 80128e4:	ec45 4b10 	vmov	d0, r4, r5
 80128e8:	b005      	add	sp, #20
 80128ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128ee:	2200      	movs	r2, #0
 80128f0:	4b1b      	ldr	r3, [pc, #108]	; (8012960 <__kernel_sin+0x148>)
 80128f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80128f6:	f7ed fe3b 	bl	8000570 <__aeabi_dmul>
 80128fa:	4632      	mov	r2, r6
 80128fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012900:	463b      	mov	r3, r7
 8012902:	4640      	mov	r0, r8
 8012904:	4649      	mov	r1, r9
 8012906:	f7ed fe33 	bl	8000570 <__aeabi_dmul>
 801290a:	4602      	mov	r2, r0
 801290c:	460b      	mov	r3, r1
 801290e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012912:	f7ed fc79 	bl	8000208 <__aeabi_dsub>
 8012916:	4652      	mov	r2, sl
 8012918:	465b      	mov	r3, fp
 801291a:	f7ed fe29 	bl	8000570 <__aeabi_dmul>
 801291e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012922:	f7ed fc71 	bl	8000208 <__aeabi_dsub>
 8012926:	a30c      	add	r3, pc, #48	; (adr r3, 8012958 <__kernel_sin+0x140>)
 8012928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801292c:	4606      	mov	r6, r0
 801292e:	460f      	mov	r7, r1
 8012930:	4640      	mov	r0, r8
 8012932:	4649      	mov	r1, r9
 8012934:	f7ed fe1c 	bl	8000570 <__aeabi_dmul>
 8012938:	4602      	mov	r2, r0
 801293a:	460b      	mov	r3, r1
 801293c:	4630      	mov	r0, r6
 801293e:	4639      	mov	r1, r7
 8012940:	f7ed fc64 	bl	800020c <__adddf3>
 8012944:	4602      	mov	r2, r0
 8012946:	460b      	mov	r3, r1
 8012948:	4620      	mov	r0, r4
 801294a:	4629      	mov	r1, r5
 801294c:	f7ed fc5c 	bl	8000208 <__aeabi_dsub>
 8012950:	e7c6      	b.n	80128e0 <__kernel_sin+0xc8>
 8012952:	bf00      	nop
 8012954:	f3af 8000 	nop.w
 8012958:	55555549 	.word	0x55555549
 801295c:	3fc55555 	.word	0x3fc55555
 8012960:	3fe00000 	.word	0x3fe00000
 8012964:	5acfd57c 	.word	0x5acfd57c
 8012968:	3de5d93a 	.word	0x3de5d93a
 801296c:	8a2b9ceb 	.word	0x8a2b9ceb
 8012970:	3e5ae5e6 	.word	0x3e5ae5e6
 8012974:	57b1fe7d 	.word	0x57b1fe7d
 8012978:	3ec71de3 	.word	0x3ec71de3
 801297c:	19c161d5 	.word	0x19c161d5
 8012980:	3f2a01a0 	.word	0x3f2a01a0
 8012984:	1110f8a6 	.word	0x1110f8a6
 8012988:	3f811111 	.word	0x3f811111

0801298c <fabs>:
 801298c:	ec53 2b10 	vmov	r2, r3, d0
 8012990:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012994:	ec43 2b10 	vmov	d0, r2, r3
 8012998:	4770      	bx	lr
 801299a:	0000      	movs	r0, r0
 801299c:	0000      	movs	r0, r0
	...

080129a0 <floor>:
 80129a0:	ec51 0b10 	vmov	r0, r1, d0
 80129a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129a8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80129ac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80129b0:	2e13      	cmp	r6, #19
 80129b2:	ee10 8a10 	vmov	r8, s0
 80129b6:	460c      	mov	r4, r1
 80129b8:	ee10 5a10 	vmov	r5, s0
 80129bc:	dc35      	bgt.n	8012a2a <floor+0x8a>
 80129be:	2e00      	cmp	r6, #0
 80129c0:	da17      	bge.n	80129f2 <floor+0x52>
 80129c2:	a335      	add	r3, pc, #212	; (adr r3, 8012a98 <floor+0xf8>)
 80129c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129c8:	f7ed fc20 	bl	800020c <__adddf3>
 80129cc:	2200      	movs	r2, #0
 80129ce:	2300      	movs	r3, #0
 80129d0:	f7ee f85e 	bl	8000a90 <__aeabi_dcmpgt>
 80129d4:	b150      	cbz	r0, 80129ec <floor+0x4c>
 80129d6:	2c00      	cmp	r4, #0
 80129d8:	da5a      	bge.n	8012a90 <floor+0xf0>
 80129da:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80129de:	ea53 0308 	orrs.w	r3, r3, r8
 80129e2:	4b2f      	ldr	r3, [pc, #188]	; (8012aa0 <floor+0x100>)
 80129e4:	f04f 0500 	mov.w	r5, #0
 80129e8:	bf18      	it	ne
 80129ea:	461c      	movne	r4, r3
 80129ec:	4621      	mov	r1, r4
 80129ee:	4628      	mov	r0, r5
 80129f0:	e025      	b.n	8012a3e <floor+0x9e>
 80129f2:	4f2c      	ldr	r7, [pc, #176]	; (8012aa4 <floor+0x104>)
 80129f4:	4137      	asrs	r7, r6
 80129f6:	ea01 0307 	and.w	r3, r1, r7
 80129fa:	4303      	orrs	r3, r0
 80129fc:	d01f      	beq.n	8012a3e <floor+0x9e>
 80129fe:	a326      	add	r3, pc, #152	; (adr r3, 8012a98 <floor+0xf8>)
 8012a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a04:	f7ed fc02 	bl	800020c <__adddf3>
 8012a08:	2200      	movs	r2, #0
 8012a0a:	2300      	movs	r3, #0
 8012a0c:	f7ee f840 	bl	8000a90 <__aeabi_dcmpgt>
 8012a10:	2800      	cmp	r0, #0
 8012a12:	d0eb      	beq.n	80129ec <floor+0x4c>
 8012a14:	2c00      	cmp	r4, #0
 8012a16:	bfbe      	ittt	lt
 8012a18:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012a1c:	fa43 f606 	asrlt.w	r6, r3, r6
 8012a20:	19a4      	addlt	r4, r4, r6
 8012a22:	ea24 0407 	bic.w	r4, r4, r7
 8012a26:	2500      	movs	r5, #0
 8012a28:	e7e0      	b.n	80129ec <floor+0x4c>
 8012a2a:	2e33      	cmp	r6, #51	; 0x33
 8012a2c:	dd0b      	ble.n	8012a46 <floor+0xa6>
 8012a2e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012a32:	d104      	bne.n	8012a3e <floor+0x9e>
 8012a34:	ee10 2a10 	vmov	r2, s0
 8012a38:	460b      	mov	r3, r1
 8012a3a:	f7ed fbe7 	bl	800020c <__adddf3>
 8012a3e:	ec41 0b10 	vmov	d0, r0, r1
 8012a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a46:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8012a4e:	fa23 f707 	lsr.w	r7, r3, r7
 8012a52:	4238      	tst	r0, r7
 8012a54:	d0f3      	beq.n	8012a3e <floor+0x9e>
 8012a56:	a310      	add	r3, pc, #64	; (adr r3, 8012a98 <floor+0xf8>)
 8012a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a5c:	f7ed fbd6 	bl	800020c <__adddf3>
 8012a60:	2200      	movs	r2, #0
 8012a62:	2300      	movs	r3, #0
 8012a64:	f7ee f814 	bl	8000a90 <__aeabi_dcmpgt>
 8012a68:	2800      	cmp	r0, #0
 8012a6a:	d0bf      	beq.n	80129ec <floor+0x4c>
 8012a6c:	2c00      	cmp	r4, #0
 8012a6e:	da02      	bge.n	8012a76 <floor+0xd6>
 8012a70:	2e14      	cmp	r6, #20
 8012a72:	d103      	bne.n	8012a7c <floor+0xdc>
 8012a74:	3401      	adds	r4, #1
 8012a76:	ea25 0507 	bic.w	r5, r5, r7
 8012a7a:	e7b7      	b.n	80129ec <floor+0x4c>
 8012a7c:	2301      	movs	r3, #1
 8012a7e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012a82:	fa03 f606 	lsl.w	r6, r3, r6
 8012a86:	4435      	add	r5, r6
 8012a88:	45a8      	cmp	r8, r5
 8012a8a:	bf88      	it	hi
 8012a8c:	18e4      	addhi	r4, r4, r3
 8012a8e:	e7f2      	b.n	8012a76 <floor+0xd6>
 8012a90:	2500      	movs	r5, #0
 8012a92:	462c      	mov	r4, r5
 8012a94:	e7aa      	b.n	80129ec <floor+0x4c>
 8012a96:	bf00      	nop
 8012a98:	8800759c 	.word	0x8800759c
 8012a9c:	7e37e43c 	.word	0x7e37e43c
 8012aa0:	bff00000 	.word	0xbff00000
 8012aa4:	000fffff 	.word	0x000fffff

08012aa8 <matherr>:
 8012aa8:	2000      	movs	r0, #0
 8012aaa:	4770      	bx	lr
 8012aac:	0000      	movs	r0, r0
	...

08012ab0 <nan>:
 8012ab0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012ab8 <nan+0x8>
 8012ab4:	4770      	bx	lr
 8012ab6:	bf00      	nop
 8012ab8:	00000000 	.word	0x00000000
 8012abc:	7ff80000 	.word	0x7ff80000

08012ac0 <scalbn>:
 8012ac0:	b570      	push	{r4, r5, r6, lr}
 8012ac2:	ec55 4b10 	vmov	r4, r5, d0
 8012ac6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012aca:	4606      	mov	r6, r0
 8012acc:	462b      	mov	r3, r5
 8012ace:	b9b2      	cbnz	r2, 8012afe <scalbn+0x3e>
 8012ad0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012ad4:	4323      	orrs	r3, r4
 8012ad6:	d03c      	beq.n	8012b52 <scalbn+0x92>
 8012ad8:	2200      	movs	r2, #0
 8012ada:	4b33      	ldr	r3, [pc, #204]	; (8012ba8 <scalbn+0xe8>)
 8012adc:	4629      	mov	r1, r5
 8012ade:	ee10 0a10 	vmov	r0, s0
 8012ae2:	f7ed fd45 	bl	8000570 <__aeabi_dmul>
 8012ae6:	4a31      	ldr	r2, [pc, #196]	; (8012bac <scalbn+0xec>)
 8012ae8:	4296      	cmp	r6, r2
 8012aea:	4604      	mov	r4, r0
 8012aec:	460d      	mov	r5, r1
 8012aee:	460b      	mov	r3, r1
 8012af0:	da13      	bge.n	8012b1a <scalbn+0x5a>
 8012af2:	a329      	add	r3, pc, #164	; (adr r3, 8012b98 <scalbn+0xd8>)
 8012af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012af8:	f7ed fd3a 	bl	8000570 <__aeabi_dmul>
 8012afc:	e00a      	b.n	8012b14 <scalbn+0x54>
 8012afe:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012b02:	428a      	cmp	r2, r1
 8012b04:	d10c      	bne.n	8012b20 <scalbn+0x60>
 8012b06:	ee10 2a10 	vmov	r2, s0
 8012b0a:	462b      	mov	r3, r5
 8012b0c:	4620      	mov	r0, r4
 8012b0e:	4629      	mov	r1, r5
 8012b10:	f7ed fb7c 	bl	800020c <__adddf3>
 8012b14:	4604      	mov	r4, r0
 8012b16:	460d      	mov	r5, r1
 8012b18:	e01b      	b.n	8012b52 <scalbn+0x92>
 8012b1a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012b1e:	3a36      	subs	r2, #54	; 0x36
 8012b20:	4432      	add	r2, r6
 8012b22:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012b26:	428a      	cmp	r2, r1
 8012b28:	dd0b      	ble.n	8012b42 <scalbn+0x82>
 8012b2a:	ec45 4b11 	vmov	d1, r4, r5
 8012b2e:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8012ba0 <scalbn+0xe0>
 8012b32:	f000 f849 	bl	8012bc8 <copysign>
 8012b36:	a31a      	add	r3, pc, #104	; (adr r3, 8012ba0 <scalbn+0xe0>)
 8012b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b3c:	ec51 0b10 	vmov	r0, r1, d0
 8012b40:	e7da      	b.n	8012af8 <scalbn+0x38>
 8012b42:	2a00      	cmp	r2, #0
 8012b44:	dd08      	ble.n	8012b58 <scalbn+0x98>
 8012b46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012b4a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012b4e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012b52:	ec45 4b10 	vmov	d0, r4, r5
 8012b56:	bd70      	pop	{r4, r5, r6, pc}
 8012b58:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012b5c:	da0d      	bge.n	8012b7a <scalbn+0xba>
 8012b5e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012b62:	429e      	cmp	r6, r3
 8012b64:	ec45 4b11 	vmov	d1, r4, r5
 8012b68:	dce1      	bgt.n	8012b2e <scalbn+0x6e>
 8012b6a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8012b98 <scalbn+0xd8>
 8012b6e:	f000 f82b 	bl	8012bc8 <copysign>
 8012b72:	a309      	add	r3, pc, #36	; (adr r3, 8012b98 <scalbn+0xd8>)
 8012b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b78:	e7e0      	b.n	8012b3c <scalbn+0x7c>
 8012b7a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012b7e:	3236      	adds	r2, #54	; 0x36
 8012b80:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012b84:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012b88:	4620      	mov	r0, r4
 8012b8a:	4629      	mov	r1, r5
 8012b8c:	2200      	movs	r2, #0
 8012b8e:	4b08      	ldr	r3, [pc, #32]	; (8012bb0 <scalbn+0xf0>)
 8012b90:	e7b2      	b.n	8012af8 <scalbn+0x38>
 8012b92:	bf00      	nop
 8012b94:	f3af 8000 	nop.w
 8012b98:	c2f8f359 	.word	0xc2f8f359
 8012b9c:	01a56e1f 	.word	0x01a56e1f
 8012ba0:	8800759c 	.word	0x8800759c
 8012ba4:	7e37e43c 	.word	0x7e37e43c
 8012ba8:	43500000 	.word	0x43500000
 8012bac:	ffff3cb0 	.word	0xffff3cb0
 8012bb0:	3c900000 	.word	0x3c900000

08012bb4 <finitef>:
 8012bb4:	ee10 3a10 	vmov	r3, s0
 8012bb8:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8012bbc:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8012bc0:	bfac      	ite	ge
 8012bc2:	2000      	movge	r0, #0
 8012bc4:	2001      	movlt	r0, #1
 8012bc6:	4770      	bx	lr

08012bc8 <copysign>:
 8012bc8:	ec53 2b10 	vmov	r2, r3, d0
 8012bcc:	ee11 0a90 	vmov	r0, s3
 8012bd0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012bd4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012bd8:	ea41 0300 	orr.w	r3, r1, r0
 8012bdc:	ec43 2b10 	vmov	d0, r2, r3
 8012be0:	4770      	bx	lr
	...

08012be4 <__errno>:
 8012be4:	4b01      	ldr	r3, [pc, #4]	; (8012bec <__errno+0x8>)
 8012be6:	6818      	ldr	r0, [r3, #0]
 8012be8:	4770      	bx	lr
 8012bea:	bf00      	nop
 8012bec:	2000005c 	.word	0x2000005c

08012bf0 <_init>:
 8012bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bf2:	bf00      	nop
 8012bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012bf6:	bc08      	pop	{r3}
 8012bf8:	469e      	mov	lr, r3
 8012bfa:	4770      	bx	lr

08012bfc <_fini>:
 8012bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bfe:	bf00      	nop
 8012c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c02:	bc08      	pop	{r3}
 8012c04:	469e      	mov	lr, r3
 8012c06:	4770      	bx	lr
